void sub_215CBF168(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215CBF180(_Unwind_Exception *a1)
{
}

void sub_215CBF194(uint64_t a1, int a2)
{
  int v3 = a2;
  if (a2 != 2)
  {
    if (a2 != 1)
    {
      if (!a2)
      {
        v2.__r_.__value_.__r.__words[0] = (std::string::size_type)CGColorSpaceCreateDeviceGray();
        operator new();
      }
      sub_215CBF59C();
    }
    v2.__r_.__value_.__r.__words[0] = (std::string::size_type)CGColorSpaceCreateDeviceRGB();
    operator new();
  }
  v2.__r_.__value_.__r.__words[0] = (std::string::size_type)CGColorSpaceCreateDeviceCMYK();
  operator new();
}

void sub_215CBF3B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215CBF48C(uint64_t a1, const void *a2, uint64_t a3)
{
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  sub_215CBF924(&v3, a2);
}

void sub_215CBF588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215CBF59C()
{
  int v0 = 0;
  sub_215CBF6C0();
}

void sub_215CBF684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215CBF698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215CBF6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215CBF6C0()
{
}

void sub_215CBF8BC(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_215CBF8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215CBF924(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  operator new();
}

void sub_215CBF998(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215CBF9B0(_Unwind_Exception *a1)
{
}

void sub_215CBF9C8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215CBFA00(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t sub_215CBFA24(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP12CGColorSpaceEC1ES4_EUlS4_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP12CGColorSpaceEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP12CGColorSpaceEC1ES4_EUlS4_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP12CGColorSpaceEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void sub_215CBFA98(int a1, CFTypeRef cf, int a3)
{
  if (a3)
  {
    if (cf) {
      CFRetain(cf);
    }
    operator new();
  }
  operator new();
}

void sub_215CBFB94(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215CBFBA8()
{
}

void sub_215CBFBD4()
{
}

uint64_t sub_215CBFBE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void sub_215CBFC14(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215CBFC4C(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t sub_215CBFC70(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP14CGDataConsumerEC1ES4_EUlS4_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP14CGDataConsumerEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP14CGDataConsumerEC1ES4_EUlS4_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP14CGDataConsumerEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void sub_215CBFCE4(int a1, CFTypeRef cf, int a3)
{
  if (a3) {
    sub_215B9C414(&v3, cf);
  }
  CFTypeRef v3 = cf;
  operator new();
}

void sub_215CBFDF0(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215CBFE08(_Unwind_Exception *a1)
{
}

void sub_215CBFE1C(uint64_t a1@<X0>, int a2@<W8>)
{
  CGDataProviderRef v5 = *(CGDataProviderRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4
    && (atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5) {
      goto LABEL_7;
    }
  }
  else if (v5)
  {
    goto LABEL_7;
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreGraphics/src/DataProviderRef.cpp", 44, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_7:
  CFDataRef v6 = CGDataProviderCopyData(*(CGDataProviderRef *)a1);

  sub_215DD1300(a2, v6, 0);
}

uint64_t sub_215CBFF04(void *a1, uint64_t a2, uint64_t a3)
{
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 2) != 0) {
    return 0;
  }
  std::istream::tellg();
  std::istream::seekg();
  if (a3 < 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C686698;
    __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
  }
  std::istream::read();
  return a1[1];
}

uint64_t sub_215CC0000(void *a1, uint64_t a2)
{
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 2) != 0) {
    return 0;
  }
  std::istream::tellg();
  std::istream::seekg();
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 2) == 0)
  {
    std::istream::tellg();
    return v5 - v6;
  }
  return a2;
}

void sub_215CC00DC(void *a1)
{
  std::istream::seekg();
  std::string v2 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));

  std::ios_base::clear(v2, 0);
}

void sub_215CC0134(int a1, CFTypeRef cf, int a3)
{
  if (a3) {
    sub_215B9D60C(&v3, cf);
  }
  CFTypeRef v3 = cf;
  operator new();
}

void sub_215CC0240(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215CC0258(_Unwind_Exception *a1)
{
}

unint64_t sub_215CC026C(uint64_t a1)
{
  CGImageRef v3 = *(CGImageRef *)a1;
  std::string v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2
    && (atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (v3) {
      goto LABEL_7;
    }
  }
  else if (v3)
  {
    goto LABEL_7;
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreGraphics/src/ImageRef.cpp", 223, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_17;
  }
LABEL_7:
  CGImageRef v5 = *(CGImageRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4
    && (atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5) {
      goto LABEL_13;
    }
  }
  else if (v5)
  {
    goto LABEL_13;
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreGraphics/src/ImageRef.cpp", 169, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
LABEL_17:
    abort();
  }
LABEL_13:
  unsigned int Width = CGImageGetWidth(*(CGImageRef *)a1);
  CGImageRef v8 = *(CGImageRef *)a1;
  v7 = *(std::__shared_weak_count **)(a1 + 8);
  if (v7
    && (atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8) {
      return Width | ((unint64_t)CGImageGetHeight(*(CGImageRef *)a1) << 32);
    }
  }
  else if (v8)
  {
    return Width | ((unint64_t)CGImageGetHeight(*(CGImageRef *)a1) << 32);
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreGraphics/src/ImageRef.cpp", 174, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_17;
  }
  return Width | ((unint64_t)CGImageGetHeight(*(CGImageRef *)a1) << 32);
}

void sub_215CC0478(uint64_t a1)
{
  CGImageRef v3 = *(CGImageRef *)a1;
  std::string v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2
    && (atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (v3) {
      goto LABEL_7;
    }
  }
  else if (v3)
  {
    goto LABEL_7;
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreGraphics/src/ImageRef.cpp", 179, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_7:
  CGImageGetBitsPerComponent(*(CGImageRef *)a1);
  memset(&space[2], 0, 24);
  CGImageRef v5 = *(CGImageRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4
    && (atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5) {
      goto LABEL_13;
    }
  }
  else if (v5)
  {
    goto LABEL_13;
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreGraphics/src/ImageRef.cpp", 194, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_13:
  CGColorSpaceRef ColorSpace = CGImageGetColorSpace(*(CGImageRef *)a1);
  sub_215CBF05C((int)space, ColorSpace, 1);
}

void sub_215CC1618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  sub_215739038(v36 - 128);
  sub_215733368((uint64_t)&a13);
  sub_2157352DC(&a15);
  _Unwind_Resume(a1);
}

void sub_215CC16A0()
{
}

void sub_215CC16C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
}

void sub_215CC1740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2157352DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215CC17A8(uint64_t a1)
{
  v12 = &unk_26C65F5B0;
  uint64_t v1 = *(void *)(a1 + 8);
  std::string v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    CGImageRef v3 = *(const UInt8 **)(a1 + 40);
    int v4 = *(_DWORD *)(a1 + 48);
    __int16 v5 = *(_WORD *)(a1 + 52);
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    CGImageRef v3 = *(const UInt8 **)(a1 + 40);
    int v4 = *(_DWORD *)(a1 + 48);
    __int16 v5 = *(_WORD *)(a1 + 52);
  }
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v13 = v1;
  v14 = v2;
  uint64_t v15 = v6;
  int v16 = *(_DWORD *)(a1 + 32);
  v17 = v3;
  int v18 = v4;
  __int16 v19 = v5;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v7 = v17;
    if ((_BYTE)v19)
    {
LABEL_7:
      if (v7)
      {
        if (v14)
        {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        (*(void (**)(uint64_t, void, const char *))(*(void *)v13 + 88))(v13, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v7 = v17;
      }
    }
  }
  else
  {
    v7 = v17;
    if ((_BYTE)v19) {
      goto LABEL_7;
    }
  }
  switch(v18)
  {
    case 1:
      CFDataRef data = (CFDataRef)&unk_26C66C138;
      sub_215BA777C((uint64_t)&v12, (uint64_t)&v21);
      CFIndex v8 = 0;
      if (v23 && v24) {
        CFIndex v8 = ((v24 - 1) * v26 + (v23 - 1) * v25 + 1);
      }
      goto LABEL_54;
    case 2:
      CFDataRef data = (CFDataRef)&unk_26C66C3B0;
      sub_215BA8040((uint64_t)&v12, (uint64_t)&v21);
      goto LABEL_28;
    case 3:
      CFDataRef data = (CFDataRef)&unk_26C66C628;
      sub_215C43800((uint64_t)&v12, (uint64_t)&v21);
LABEL_28:
      CFIndex v8 = 0;
      if (!v23 || !v24) {
        goto LABEL_54;
      }
      int v9 = (v24 - 1) * v26 + (v23 - 1) * v25;
      goto LABEL_42;
    case 4:
      CFDataRef data = (CFDataRef)&unk_26C66C8A0;
      sub_215C43DFC((uint64_t)&v12, (uint64_t)&v21);
      CFIndex v8 = 0;
      if (!v23 || !v24) {
        goto LABEL_54;
      }
      int v10 = (v24 - 1) * v26 + (v23 - 1) * v25;
      goto LABEL_53;
    case 21:
      CFDataRef data = (CFDataRef)&unk_26C66F298;
      sub_215BA863C((uint64_t)&v12, (uint64_t)&v21);
      goto LABEL_44;
    case 22:
      CFDataRef data = (CFDataRef)&unk_26C66F510;
      sub_215C4ABE8((uint64_t)&v12, (uint64_t)&v21);
      goto LABEL_38;
    case 23:
      CFDataRef data = (CFDataRef)&unk_26C66F788;
      sub_215C4B268((uint64_t)&v12, (uint64_t)&v21);
      goto LABEL_38;
    case 24:
      CFDataRef data = (CFDataRef)&unk_26C66FA00;
      sub_215C4B8E8((uint64_t)&v12, (uint64_t)&v21);
      goto LABEL_49;
    case 25:
      CFDataRef data = (CFDataRef)&unk_26C66FC78;
      sub_215C4BF68((uint64_t)&v12, (uint64_t)&v21);
      goto LABEL_44;
    case 29:
      CFDataRef data = (CFDataRef)&unk_26C670658;
      sub_215C4D964((uint64_t)&v12, (uint64_t)&v21);
      goto LABEL_44;
    case 30:
      CFDataRef data = (CFDataRef)&unk_26C6708D0;
      sub_215C4DFE0((uint64_t)&v12, (uint64_t)&v21);
      goto LABEL_38;
    case 31:
      CFDataRef data = (CFDataRef)&unk_26C670B48;
      sub_215C4E660((uint64_t)&v12, (uint64_t)&v21);
      goto LABEL_38;
    case 32:
      CFDataRef data = (CFDataRef)&unk_26C670DC0;
      sub_215C4ECE0((uint64_t)&v12, (uint64_t)&v21);
      goto LABEL_49;
    case 33:
      CFDataRef data = (CFDataRef)&unk_26C671038;
      sub_215C4F360((uint64_t)&v12, (uint64_t)&v21);
      goto LABEL_44;
    case 37:
      CFDataRef data = (CFDataRef)&unk_26C671A18;
      sub_215C50D5C((uint64_t)&v12, (uint64_t)&v21);
LABEL_44:
      CFIndex v8 = 0;
      if (v23 && v24 && v25) {
        CFIndex v8 = ((v24 - 1) * v27 + (v23 - 1) * v26 + v28 * (v25 - 1) + 1);
      }
      goto LABEL_54;
    case 38:
      CFDataRef data = (CFDataRef)&unk_26C671C90;
      sub_215C513D8((uint64_t)&v12, (uint64_t)&v21);
      goto LABEL_38;
    case 39:
      CFDataRef data = (CFDataRef)&unk_26C671F08;
      sub_215C51A58((uint64_t)&v12, (uint64_t)&v21);
LABEL_38:
      CFIndex v8 = 0;
      if (v23 && v24 && v25)
      {
        int v9 = (v24 - 1) * v27 + (v23 - 1) * v26 + v28 * (v25 - 1);
LABEL_42:
        CFIndex v8 = 2 * (v9 + 1);
      }
      goto LABEL_54;
    case 40:
      CFDataRef data = (CFDataRef)&unk_26C672180;
      sub_215C520D8((uint64_t)&v12, (uint64_t)&v21);
LABEL_49:
      CFIndex v8 = 0;
      if (v23 && v24 && v25)
      {
        int v10 = (v24 - 1) * v27 + (v23 - 1) * v26 + v28 * (v25 - 1);
LABEL_53:
        CFIndex v8 = 4 * (v10 + 1);
      }
LABEL_54:
      v11 = v22;
      if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (v7) {
          goto LABEL_59;
        }
      }
      else if (v7)
      {
        goto LABEL_59;
      }
      if (v8
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
LABEL_63:
        abort();
      }
LABEL_59:
      sub_215DD15B0(v7, v8);
    default:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_215E1ABD8);
      goto LABEL_63;
  }
}

void sub_215CC2180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  sub_215733368(v18);
  sub_215733368((uint64_t)&a9);
  sub_215733368((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_215CC21BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215CC21D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_215733368((uint64_t)va1);
  sub_215822608((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215CC21EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215822608((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215CC22A4(uint64_t a1)
{
}

void sub_215CC2494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
    {
LABEL_6:
      if (a26 < 0) {
        operator delete(a21);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

void sub_215CC24EC()
{
  v0[6] = 0;
  sub_2157FD010(v0, "Cannot copy CGImage of format ");
  sub_215806C64();
}

void sub_215CC2604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215CC2618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215CC262C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215CC2640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215CC2654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215CC2668(uint64_t a1, int a2, uint64_t *a3)
{
  switch(a2)
  {
    case 1:
      sub_215B9C2F0((uint64_t)&provider, *a3);
    case 2:
      sub_215B9C2F0((uint64_t)&provider, *a3);
    case 3:
      sub_215B9C2F0((uint64_t)&provider, *a3);
    case 4:
      sub_215B9C2F0((uint64_t)&provider, *a3);
    case 5:
      sub_215B9C2F0((uint64_t)&space, *a3);
    case 6:
      sub_215B9C2F0((uint64_t)&space, *a3);
    case 7:
      sub_215B9C2F0((uint64_t)&space, *a3);
    case 8:
      sub_215B9C2F0((uint64_t)&space, *a3);
    case 9:
      sub_215B9C2F0((uint64_t)&space, *a3);
    case 10:
      sub_215B9C2F0((uint64_t)&space, *a3);
    case 11:
      sub_215B9C2F0((uint64_t)&space, *a3);
    case 12:
      sub_215B9C2F0((uint64_t)&space, *a3);
    case 13:
      sub_215B9C2F0((uint64_t)&space, *a3);
    case 14:
      sub_215B9C2F0((uint64_t)&space, *a3);
    case 15:
      sub_215B9C2F0((uint64_t)&space, *a3);
    case 16:
      sub_215B9C2F0((uint64_t)&space, *a3);
    case 17:
      sub_215B9C2F0((uint64_t)&space, *a3);
    case 18:
      sub_215B9C2F0((uint64_t)&space, *a3);
    case 19:
      sub_215B9C2F0((uint64_t)&space, *a3);
    case 20:
      sub_215B9C2F0((uint64_t)&space, *a3);
    case 21:
      sub_215B9C2F0((uint64_t)&provider, *a3);
    case 22:
      sub_215B9C2F0((uint64_t)&provider, *a3);
    case 23:
      sub_215B9C2F0((uint64_t)&provider, *a3);
    case 24:
      sub_215B9C2F0((uint64_t)&provider, *a3);
    case 25:
      sub_215B9C2F0((uint64_t)&provider, *a3);
    case 26:
      sub_215B9C2F0((uint64_t)&space, *a3);
    case 27:
      sub_215B9C2F0((uint64_t)&space, *a3);
    case 28:
      sub_215B9C2F0((uint64_t)&space, *a3);
    case 29:
      sub_215B9C2F0((uint64_t)&provider, *a3);
    case 30:
      sub_215B9C2F0((uint64_t)&provider, *a3);
    case 31:
      sub_215B9C2F0((uint64_t)&provider, *a3);
    case 32:
      sub_215B9C2F0((uint64_t)&provider, *a3);
    case 33:
      sub_215B9C2F0((uint64_t)&provider, *a3);
    case 34:
      sub_215B9C2F0((uint64_t)&space, *a3);
    case 35:
      sub_215B9C2F0((uint64_t)&space, *a3);
    case 36:
      sub_215B9C2F0((uint64_t)&space, *a3);
    case 37:
      sub_215B9C2F0((uint64_t)&provider, *a3);
    case 38:
      sub_215B9C2F0((uint64_t)&provider, *a3);
    case 39:
      sub_215B9C2F0((uint64_t)&provider, *a3);
    case 40:
      sub_215B9C2F0((uint64_t)&provider, *a3);
    default:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_215E1ABD8);
      abort();
  }
}

void sub_215CC55BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (!atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (a14 && !atomic_fetch_add(&a14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
    std::__shared_weak_count::__release_weak(a14);
  }
  if (a12)
  {
    if (!atomic_fetch_add(&a12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215CC568C(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215CC56A4()
{
}

void sub_215CC56B4(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215CC56CC()
{
}

void sub_215CC56DC(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215CC56F4()
{
}

void sub_215CC5704(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215CC571C()
{
}

void sub_215CC572C(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215CC5744()
{
}

void sub_215CC5754(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215CC576C()
{
}

void sub_215CC577C(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215CC5794()
{
}

void sub_215CC57A4(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215CC57BC()
{
}

void sub_215CC57CC(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215CC57E4()
{
}

void sub_215CC57F4(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215CC580C()
{
}

void sub_215CC581C(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215CC5834()
{
}

void sub_215CC5844(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215CC585C()
{
}

void sub_215CC586C(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215CC5884()
{
}

void sub_215CC5894(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215CC58AC()
{
}

void sub_215CC58BC(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215CC58D4()
{
}

void sub_215CC58E4(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215CC58FC()
{
}

void sub_215CC590C(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215CC5924()
{
}

void sub_215CC5934(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215CC594C()
{
}

void sub_215CC595C()
{
}

void sub_215CC5964()
{
}

void sub_215CC596C()
{
}

void sub_215CC5974()
{
}

void sub_215CC597C()
{
}

void sub_215CC5984()
{
}

void sub_215CC598C()
{
}

void sub_215CC5994()
{
}

void sub_215CC599C()
{
}

void sub_215CC59A4()
{
}

void sub_215CC59AC()
{
}

void sub_215CC59B4()
{
}

void sub_215CC59BC()
{
}

void sub_215CC59C4()
{
}

void sub_215CC59CC()
{
}

void sub_215CC59D4()
{
}

void sub_215CC59DC()
{
}

void sub_215CC59E4()
{
}

void sub_215CC59EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (!a14) {
    JUMPOUT(0x215CC5AE0);
  }
  JUMPOUT(0x215CC5AA0);
}

void sub_215CC5A50()
{
}

void sub_215CC5B8C(uint64_t a1, const void *a2, uint64_t a3)
{
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  sub_215B9D60C(&v3, a2);
}

void sub_215CC5C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215CC5C9C(char ***a1)
{
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    uint64_t v6 = *a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v3 - *a1);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_215738AC0();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (void)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        sub_215738AD8();
      }
      uint64_t v11 = (char *)operator new(24 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v12 = &v11[24 * v7];
    uint64_t v13 = (char **)&v11[24 * v10];
    v14 = (char *)operator new(0x50uLL);
    *(void *)uint64_t v12 = v14;
    *(_OWORD *)(v12 + 8) = xmmword_215EE31A0;
    strcpy(v14, "Byte order size for non-8 bits per component does not match bits per component.");
    __int16 v5 = (char **)(v12 + 24);
    if (v3 == v6)
    {
      *a1 = (char **)v12;
      a1[1] = v5;
      a1[2] = v13;
    }
    else
    {
      do
      {
        long long v15 = *(_OWORD *)(v3 - 3);
        *((void *)v12 - 1) = *(v3 - 1);
        *(_OWORD *)(v12 - 24) = v15;
        v12 -= 24;
        *(v3 - 2) = 0;
        *(v3 - 1) = 0;
        *(v3 - 3) = 0;
        v3 -= 3;
      }
      while (v3 != v6);
      uint64_t v3 = *a1;
      int v16 = a1[1];
      *a1 = (char **)v12;
      a1[1] = v5;
      a1[2] = v13;
      while (v16 != v3)
      {
        if (*((char *)v16 - 1) < 0) {
          operator delete(*(v16 - 3));
        }
        v16 -= 3;
      }
    }
    if (v3) {
      operator delete(v3);
    }
  }
  else
  {
    uint64_t v4 = (char *)operator new(0x50uLL);
    *uint64_t v3 = v4;
    *(_OWORD *)(v3 + 1) = xmmword_215EE31A0;
    strcpy(v4, "Byte order size for non-8 bits per component does not match bits per component.");
    __int16 v5 = v3 + 3;
    a1[1] = v3 + 3;
  }
  a1[1] = v5;
}

void sub_215CC5E84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215739038((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215CC5E98(char ***a1)
{
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    uint64_t v6 = *a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v3 - *a1);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_215738AC0();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (void)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        sub_215738AD8();
      }
      uint64_t v11 = (char *)operator new(24 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v12 = &v11[24 * v7];
    uint64_t v13 = (char **)&v11[24 * v10];
    v14 = (char *)operator new(0x50uLL);
    *(void *)uint64_t v12 = v14;
    *(_OWORD *)(v12 + 8) = xmmword_215EE31B0;
    strcpy(v14, "Byte order and bits per component do not correspond to a supported format.");
    __int16 v5 = (char **)(v12 + 24);
    if (v3 == v6)
    {
      *a1 = (char **)v12;
      a1[1] = v5;
      a1[2] = v13;
    }
    else
    {
      do
      {
        long long v15 = *(_OWORD *)(v3 - 3);
        *((void *)v12 - 1) = *(v3 - 1);
        *(_OWORD *)(v12 - 24) = v15;
        v12 -= 24;
        *(v3 - 2) = 0;
        *(v3 - 1) = 0;
        *(v3 - 3) = 0;
        v3 -= 3;
      }
      while (v3 != v6);
      uint64_t v3 = *a1;
      int v16 = a1[1];
      *a1 = (char **)v12;
      a1[1] = v5;
      a1[2] = v13;
      while (v16 != v3)
      {
        if (*((char *)v16 - 1) < 0) {
          operator delete(*(v16 - 3));
        }
        v16 -= 3;
      }
    }
    if (v3) {
      operator delete(v3);
    }
  }
  else
  {
    uint64_t v4 = (char *)operator new(0x50uLL);
    *uint64_t v3 = v4;
    *(_OWORD *)(v3 + 1) = xmmword_215EE31B0;
    strcpy(v4, "Byte order and bits per component do not correspond to a supported format.");
    __int16 v5 = v3 + 3;
    a1[1] = v3 + 3;
  }
  a1[1] = v5;
}

void sub_215CC6080(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215739038((uint64_t)va);
  _Unwind_Resume(a1);
}

size_t sub_215CC6094(void **a1)
{
  uint64_t v1 = (_DWORD *)**a1;
  unint64_t v2 = (const char **)(*a1)[1];
  uint64_t v3 = v1[6];
  if (v3 != -1) {
    ((void (*)(char *, _DWORD *))off_26C6812E8[v3])(&v10, v1);
  }
  v1[6] = -1;
  uint64_t v4 = *v2;
  size_t result = strlen(*v2);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  size_t v6 = result;
  if (result >= 0x17)
  {
    uint64_t v8 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v8 = result | 7;
    }
    uint64_t v9 = v8 + 1;
    unint64_t v7 = operator new(v8 + 1);
    *((void *)v1 + 1) = v6;
    *((void *)v1 + 2) = v9 | 0x8000000000000000;
    *(void *)uint64_t v1 = v7;
  }
  else
  {
    *((unsigned char *)v1 + 23) = result;
    unint64_t v7 = v1;
    if (!result) {
      goto LABEL_11;
    }
  }
  size_t result = (size_t)memmove(v7, v4, v6);
LABEL_11:
  *((unsigned char *)v7 + v6) = 0;
  v1[6] = 1;
  return result;
}

void sub_215CC6188(uint64_t *a1, uint64_t a2)
{
  v19[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  *(void *)((char *)v19 + 7) = *(void *)(a2 + 15);
  uint64_t v4 = *(void **)a2;
  v19[0] = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 23);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  v14 = v4;
  *(void *)long long v15 = v19[0];
  *(void *)&v15[7] = *(void *)((char *)v19 + 7);
  char v16 = v5;
  memset(v19, 0, 15);
  size_t v6 = __p;
  unint64_t v7 = **(const char ***)(v2 + 24);
  size_t v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  uint64_t v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    size_t v6 = operator new(v11 + 1);
    __p[1] = v9;
    unint64_t v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((unsigned char *)v9 + (void)v6) = 0;
    uint64_t v10 = *(unsigned int *)(v3 + 24);
    if (v10 == -1) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8) {
    goto LABEL_9;
  }
  LOBYTE(__p[0]) = 0;
  uint64_t v10 = *(unsigned int *)(v3 + 24);
  if (v10 != -1) {
LABEL_10:
  }
    ((void (*)(char *, uint64_t))off_26C6812E8[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_21573A150((void *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0) {
    goto LABEL_15;
  }
}

void sub_215CC6348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215CC638C(uint64_t a1, void **a2)
{
  uint64_t v3 = *(const char ***)(*(void *)a1 + 32);
  char v5 = a2[1];
  uint64_t v4 = a2[2];
  size_t v6 = *v3;
  if (v5 < (void *)v4)
  {
    size_t v7 = strlen(*v3);
    if (v7 > 0x7FFFFFFFFFFFFFF7) {
      sub_215731CD8();
    }
    size_t v8 = v7;
    if (v7 >= 0x17)
    {
      uint64_t v15 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v15 = v7 | 7;
      }
      uint64_t v16 = v15 + 1;
      uint64_t v9 = operator new(v15 + 1);
      v5[1] = v8;
      v5[2] = v16 | 0x8000000000000000;
      *char v5 = v9;
    }
    else
    {
      *((unsigned char *)v5 + 23) = v7;
      uint64_t v9 = v5;
      if (!v7) {
        goto LABEL_19;
      }
    }
    memmove(v9, v6, v8);
LABEL_19:
    *((unsigned char *)v9 + v8) = 0;
    v17 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (unsigned char *)*a2) >> 3);
  if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_215738AC0();
  }
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a2) >> 3);
  uint64_t v12 = 2 * v11;
  if (2 * v11 <= v10 + 1) {
    uint64_t v12 = v10 + 1;
  }
  if (v11 >= 0x555555555555555) {
    unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v13 = v12;
  }
  if (v13)
  {
    if (v13 > 0xAAAAAAAAAAAAAAALL) {
      sub_215738AD8();
    }
    v14 = (char *)operator new(24 * v13);
  }
  else
  {
    v14 = 0;
  }
  unint64_t v18 = &v14[24 * v10];
  size_t v19 = strlen(v6);
  if (v19 > 0x7FFFFFFFFFFFFFF7) {
    sub_215731CD8();
  }
  size_t v20 = v19;
  if (v19 >= 0x17)
  {
    uint64_t v25 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17) {
      uint64_t v25 = v19 | 7;
    }
    uint64_t v26 = v25 + 1;
    uint64_t v21 = operator new(v25 + 1);
    *((void *)v18 + 1) = v20;
    *((void *)v18 + 2) = v26 | 0x8000000000000000;
    *(void *)unint64_t v18 = v21;
  }
  else
  {
    v18[23] = v19;
    uint64_t v21 = v18;
    if (!v19)
    {
      v22 = &v14[24 * v13];
      *unint64_t v18 = 0;
      v17 = v18 + 24;
      int v23 = (void **)*a2;
      int v24 = (void **)a2[1];
      if (v24 == *a2) {
        goto LABEL_36;
      }
      do
      {
LABEL_30:
        long long v27 = *(_OWORD *)(v24 - 3);
        *((void *)v18 - 1) = *(v24 - 1);
        *(_OWORD *)(v18 - 24) = v27;
        v18 -= 24;
        *(v24 - 2) = 0;
        *(v24 - 1) = 0;
        *(v24 - 3) = 0;
        v24 -= 3;
      }
      while (v24 != v23);
      int v24 = (void **)*a2;
      int v28 = (void **)a2[1];
      *a2 = v18;
      a2[1] = v17;
      a2[2] = v22;
      while (v28 != v24)
      {
        if (*((char *)v28 - 1) < 0) {
          operator delete(*(v28 - 3));
        }
        v28 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v21, v6, v20);
  v22 = &v14[24 * v13];
  *((unsigned char *)v21 + v20) = 0;
  v17 = v18 + 24;
  int v23 = (void **)*a2;
  int v24 = (void **)a2[1];
  if (v24 != *a2) {
    goto LABEL_30;
  }
LABEL_36:
  *a2 = v18;
  a2[1] = v17;
  a2[2] = v22;
LABEL_37:
  if (v24) {
    operator delete(v24);
  }
LABEL_39:
  a2[1] = v17;
}

void sub_215CC6624(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_215CC663C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

#error "215CC6644: too big function (funcsize=0)"

void sub_215CDB3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  sub_21590B874((uint64_t)&a29);
  sub_215B588FC((uint64_t)&a39);
  sub_215733368(v39 - 176);
  if (a27 && !atomic_fetch_add(&a27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a27->__on_zero_shared)(a27);
    std::__shared_weak_count::__release_weak(a27);
  }
  uint64_t v41 = *(void *)(v39 - 120);
  if (v41 == v39 - 144)
  {
    (*(void (**)(uint64_t))(*(void *)(v39 - 144) + 32))(v39 - 144);
  }
  else if (v41)
  {
    (*(void (**)(uint64_t))(*(void *)v41 + 40))(v41);
  }
  if (a18)
  {
    if (!atomic_fetch_add(&a18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void *sub_215CDE250(void *a1, uint64_t a2, _DWORD *a3, unsigned int *a4)
{
  *a1 = &unk_26C66C138;
  if (a3[1]) {
    BOOL v5 = *a3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  unint64_t v6 = (unint64_t)*a4 << 32;
  if (v5) {
    unint64_t v6 = 0;
  }
  unint64_t v8 = v6 | (*a3 != 0);
  uint64_t v9 = a2;
  sub_2158FFE18(&v9, a3, (uint64_t *)&v8, (uint64_t)(a1 + 1));
  return a1;
}

void sub_215CDE2D8(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    goto LABEL_12;
  }
  BOOL v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v3 = *(void *)(a1 + 8);
    unint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if (*(unsigned char *)(a1 + 49)) {
          goto LABEL_8;
        }
LABEL_12:
        *a2 = 0;
        return;
      }
    }
  }
  if (!*(unsigned char *)(a1 + 49)) {
    goto LABEL_12;
  }
LABEL_8:
  size_t v7 = *(void (**)(uint64_t, void))(*(void *)v3 + 96);

  v7(v3, 0);
}

void sub_215CDE40C(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (!v3) {
    goto LABEL_12;
  }
  BOOL v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v3 = *(void *)(a2 + 8);
    unint64_t v6 = *(std::__shared_weak_count **)(a2 + 16);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if (*(unsigned char *)(a2 + 49)) {
          goto LABEL_8;
        }
LABEL_12:
        *a1 = 0;
        return;
      }
    }
  }
  if (!*(unsigned char *)(a2 + 49)) {
    goto LABEL_12;
  }
LABEL_8:
  size_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)v3 + 96);

  v7(v3, 1);
}

void sub_215CDE544()
{
}

void *sub_215CDE558(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *size_t result = &unk_26C6813A0;
  result[1] = v3;
  return result;
}

uint64_t sub_215CDE5A0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6813A0;
  a2[1] = v2;
  return result;
}

void sub_215CDE5CC(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v5 + 32) != *a2 || *(_DWORD *)(v5 + 36) != a2[1])
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreGraphics/src/ImageRef.cpp", 541, (uint64_t)"size == image.Size()", 20, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  *(void *)a3 = &unk_26C67C908;
  uint64_t v6 = *(void *)(v5 + 8);
  size_t v7 = *(std::__shared_weak_count **)(v5 + 16);
  if (!v7)
  {
    __int16 v11 = *(_WORD *)(v5 + 48);
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = 0;
    long long v12 = *(_OWORD *)(v5 + 24);
    *(void *)(a3 + 40) = *(void *)(v5 + 40);
    *(_OWORD *)(a3 + 24) = v12;
    *(_WORD *)(a3 + 48) = v11;
    return;
  }
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  __int16 v9 = *(_WORD *)(v5 + 48);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v10 = *(_OWORD *)(v5 + 24);
  *(void *)(a3 + 40) = *(void *)(v5 + 40);
  *(_OWORD *)(a3 + 24) = v10;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v7;
  *(_WORD *)(a3 + 48) = v9;
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);

  std::__shared_weak_count::__release_weak(v7);
}

uint64_t sub_215CDE778(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3"
                     "_10MutabilityE1EEEENK3$_0clINS4_ILS5_1ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13Dynamic"
                                "BufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_1ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5Siz"
                                "eTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_1ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_1ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215CDE7E8()
{
  return &unk_26C681410;
}

void sub_215CDE7F8()
{
}

void *sub_215CDE80C(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *size_t result = &unk_26C681430;
  result[1] = v3;
  return result;
}

uint64_t sub_215CDE854(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C681430;
  a2[1] = v2;
  return result;
}

void sub_215CDE880(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v5 + 32) != *a2 || *(_DWORD *)(v5 + 36) != a2[1])
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreGraphics/src/ImageRef.cpp", 541, (uint64_t)"size == image.Size()", 20, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  *(void *)a3 = &unk_26C67CA00;
  uint64_t v6 = *(void *)(v5 + 8);
  size_t v7 = *(std::__shared_weak_count **)(v5 + 16);
  if (!v7)
  {
    __int16 v11 = *(_WORD *)(v5 + 48);
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = 0;
    long long v12 = *(_OWORD *)(v5 + 24);
    *(void *)(a3 + 40) = *(void *)(v5 + 40);
    *(_OWORD *)(a3 + 24) = v12;
    *(_WORD *)(a3 + 48) = v11;
    return;
  }
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  __int16 v9 = *(_WORD *)(v5 + 48);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v10 = *(_OWORD *)(v5 + 24);
  *(void *)(a3 + 40) = *(void *)(v5 + 40);
  *(_OWORD *)(a3 + 24) = v10;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v7;
  *(_WORD *)(a3 + 48) = v9;
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);

  std::__shared_weak_count::__release_weak(v7);
}

uint64_t sub_215CDEA2C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3"
                     "_10MutabilityE1EEEENK3$_0clINS4_ILS5_2ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13Dynamic"
                                "BufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_2ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5Siz"
                                "eTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_2ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_2ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215CDEA9C()
{
  return &unk_26C6814A0;
}

void sub_215CDEAAC()
{
}

void *sub_215CDEAC0(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *size_t result = &unk_26C6814C0;
  result[1] = v3;
  return result;
}

uint64_t sub_215CDEB08(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6814C0;
  a2[1] = v2;
  return result;
}

void sub_215CDEB34(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v5 + 32) != *a2 || *(_DWORD *)(v5 + 36) != a2[1])
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreGraphics/src/ImageRef.cpp", 541, (uint64_t)"size == image.Size()", 20, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  *(void *)a3 = &unk_26C67CAF8;
  uint64_t v6 = *(void *)(v5 + 8);
  size_t v7 = *(std::__shared_weak_count **)(v5 + 16);
  if (!v7)
  {
    __int16 v11 = *(_WORD *)(v5 + 48);
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = 0;
    long long v12 = *(_OWORD *)(v5 + 24);
    *(void *)(a3 + 40) = *(void *)(v5 + 40);
    *(_OWORD *)(a3 + 24) = v12;
    *(_WORD *)(a3 + 48) = v11;
    return;
  }
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  __int16 v9 = *(_WORD *)(v5 + 48);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v10 = *(_OWORD *)(v5 + 24);
  *(void *)(a3 + 40) = *(void *)(v5 + 40);
  *(_OWORD *)(a3 + 24) = v10;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v7;
  *(_WORD *)(a3 + 48) = v9;
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);

  std::__shared_weak_count::__release_weak(v7);
}

uint64_t sub_215CDECE0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3"
                     "_10MutabilityE1EEEENK3$_0clINS4_ILS5_3ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13Dynamic"
                                "BufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_3ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5Siz"
                                "eTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_3ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_3ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215CDED50()
{
  return &unk_26C681530;
}

void sub_215CDED5C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 3)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215CDF010();
  }
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)&long long v14 = v4;
      *((void *)&v14 + 1) = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      long long v14 = v4;
    }
  }
  else
  {
    long long v14 = 0uLL;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v8 = v7 != 0;
  BOOL v9 = v7 == 0;
  if (!*(_DWORD *)(a1 + 28)) {
    BOOL v9 = 1;
  }
  if (v9) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = ((unint64_t)*(unsigned int *)(a1 + 32) << 31) & 0x7FFFFFFF00000000;
  }
  if (v9) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 24);
  }
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  unint64_t v12 = v10 | v8;
  __int16 v13 = *(_WORD *)(a1 + 52);
  if (*((void *)&v14 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 1uLL, memory_order_relaxed);
    *(_OWORD *)a2 = v14;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v12;
    *(_WORD *)(a2 + 40) = v13;
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v14 + 1) + 16))(*((void *)&v14 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v14 + 1));
    }
  }
  else
  {
    *(_OWORD *)a2 = (unint64_t)v14;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v12;
    *(_WORD *)(a2 + 40) = v13;
  }
}

void sub_215CDEFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void sub_215CDF010()
{
  int v0 = sub_215BBED20();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215CDF090()
{
}

void *sub_215CDF0A4(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *size_t result = &unk_26C681550;
  result[1] = v3;
  return result;
}

uint64_t sub_215CDF0EC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C681550;
  a2[1] = v2;
  return result;
}

void sub_215CDF118(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v5 + 32) != *a2 || *(_DWORD *)(v5 + 36) != a2[1])
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreGraphics/src/ImageRef.cpp", 541, (uint64_t)"size == image.Size()", 20, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  *(void *)a3 = &unk_26C67CBF0;
  uint64_t v6 = *(void *)(v5 + 8);
  int v7 = *(std::__shared_weak_count **)(v5 + 16);
  if (!v7)
  {
    __int16 v11 = *(_WORD *)(v5 + 48);
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = 0;
    long long v12 = *(_OWORD *)(v5 + 24);
    *(void *)(a3 + 40) = *(void *)(v5 + 40);
    *(_OWORD *)(a3 + 24) = v12;
    *(_WORD *)(a3 + 48) = v11;
    return;
  }
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  __int16 v9 = *(_WORD *)(v5 + 48);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v10 = *(_OWORD *)(v5 + 24);
  *(void *)(a3 + 40) = *(void *)(v5 + 40);
  *(_OWORD *)(a3 + 24) = v10;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v7;
  *(_WORD *)(a3 + 48) = v9;
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);

  std::__shared_weak_count::__release_weak(v7);
}

uint64_t sub_215CDF2C4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3"
                     "_10MutabilityE1EEEENK3$_0clINS4_ILS5_4ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13Dynamic"
                                "BufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_4ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5Siz"
                                "eTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_4ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_4ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215CDF334()
{
  return &unk_26C6815C0;
}

void sub_215CDF340(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 4)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215CDF5F4();
  }
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)&long long v14 = v4;
      *((void *)&v14 + 1) = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      long long v14 = v4;
    }
  }
  else
  {
    long long v14 = 0uLL;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v8 = v7 != 0;
  BOOL v9 = v7 == 0;
  if (!*(_DWORD *)(a1 + 28)) {
    BOOL v9 = 1;
  }
  if (v9) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = ((unint64_t)*(unsigned int *)(a1 + 32) << 30) & 0x3FFFFFFF00000000;
  }
  if (v9) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 24);
  }
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  unint64_t v12 = v10 | v8;
  __int16 v13 = *(_WORD *)(a1 + 52);
  if (*((void *)&v14 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 1uLL, memory_order_relaxed);
    *(_OWORD *)a2 = v14;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v12;
    *(_WORD *)(a2 + 40) = v13;
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v14 + 1) + 16))(*((void *)&v14 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v14 + 1));
    }
  }
  else
  {
    *(_OWORD *)a2 = (unint64_t)v14;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v12;
    *(_WORD *)(a2 + 40) = v13;
  }
}

void sub_215CDF5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void sub_215CDF5F4()
{
  int v0 = sub_215BBF3D4();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void *sub_215CDF670(void *a1, uint64_t a2, _DWORD *a3, unsigned int *a4)
{
  *a1 = &unk_26C66F298;
  uint64_t v5 = 3;
  if (!*a3) {
    uint64_t v5 = 0;
  }
  if (a3[1]) {
    BOOL v6 = *a3 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  unint64_t v7 = (unint64_t)*a4 << 32;
  if (v6) {
    unint64_t v7 = 0;
  }
  unint64_t v9 = v7 | v5;
  uint64_t v10 = a2;
  sub_215913504(&v10, a3, &v9, (uint64_t)(a1 + 1));
  return a1;
}

void sub_215CDF6FC(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    goto LABEL_12;
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v3 = *(void *)(a1 + 8);
    BOOL v6 = *(std::__shared_weak_count **)(a1 + 16);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if (*(unsigned char *)(a1 + 73)) {
          goto LABEL_8;
        }
LABEL_12:
        *a2 = 0;
        return;
      }
    }
  }
  if (!*(unsigned char *)(a1 + 73)) {
    goto LABEL_12;
  }
LABEL_8:
  unint64_t v7 = *(void (**)(uint64_t, void))(*(void *)v3 + 96);

  v7(v3, 0);
}

void sub_215CDF830(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (!v3) {
    goto LABEL_12;
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v3 = *(void *)(a2 + 8);
    BOOL v6 = *(std::__shared_weak_count **)(a2 + 16);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if (*(unsigned char *)(a2 + 73)) {
          goto LABEL_8;
        }
LABEL_12:
        *a1 = 0;
        return;
      }
    }
  }
  if (!*(unsigned char *)(a2 + 73)) {
    goto LABEL_12;
  }
LABEL_8:
  unint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)v3 + 96);

  v7(v3, 1);
}

void sub_215CDF968()
{
}

void *sub_215CDF97C(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *size_t result = &unk_26C6815E0;
  result[1] = v3;
  return result;
}

uint64_t sub_215CDF9C4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6815E0;
  a2[1] = v2;
  return result;
}

void sub_215CDF9F0(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v5 + 56) != *a2 || *(_DWORD *)(v5 + 60) != a2[1])
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreGraphics/src/ImageRef.cpp", 541, (uint64_t)"size == image.Size()", 20, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  *(void *)a3 = &unk_26C67CFD0;
  uint64_t v6 = *(void *)(v5 + 8);
  unint64_t v7 = *(std::__shared_weak_count **)(v5 + 16);
  if (!v7)
  {
    __int16 v12 = *(_WORD *)(v5 + 72);
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = 0;
    long long v13 = *(_OWORD *)(v5 + 24);
    long long v14 = *(_OWORD *)(v5 + 40);
    *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
    *(_OWORD *)(a3 + 40) = v14;
    *(_OWORD *)(a3 + 24) = v13;
    *(_WORD *)(a3 + 72) = v12;
    return;
  }
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  __int16 v9 = *(_WORD *)(v5 + 72);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v10 = *(_OWORD *)(v5 + 24);
  long long v11 = *(_OWORD *)(v5 + 40);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
  *(_OWORD *)(a3 + 40) = v11;
  *(_OWORD *)(a3 + 24) = v10;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v7;
  *(_WORD *)(a3 + 72) = v9;
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);

  std::__shared_weak_count::__release_weak(v7);
}

uint64_t sub_215CDFBAC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3"
                     "_10MutabilityE1EEEENK3$_0clINS4_ILS5_21ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13Dynamic"
                                "BufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_21ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5Si"
                                "zeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_21ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_21ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215CDFC1C()
{
  return &unk_26C681650;
}

void sub_215CDFC2C()
{
}

void *sub_215CDFC40(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *size_t result = &unk_26C681670;
  result[1] = v3;
  return result;
}

uint64_t sub_215CDFC88(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C681670;
  a2[1] = v2;
  return result;
}

void sub_215CDFCB4(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v5 + 56) != *a2 || *(_DWORD *)(v5 + 60) != a2[1])
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreGraphics/src/ImageRef.cpp", 541, (uint64_t)"size == image.Size()", 20, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  *(void *)a3 = &unk_26C67D0C8;
  uint64_t v6 = *(void *)(v5 + 8);
  unint64_t v7 = *(std::__shared_weak_count **)(v5 + 16);
  if (!v7)
  {
    __int16 v12 = *(_WORD *)(v5 + 72);
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = 0;
    long long v13 = *(_OWORD *)(v5 + 24);
    long long v14 = *(_OWORD *)(v5 + 40);
    *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
    *(_OWORD *)(a3 + 40) = v14;
    *(_OWORD *)(a3 + 24) = v13;
    *(_WORD *)(a3 + 72) = v12;
    return;
  }
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  __int16 v9 = *(_WORD *)(v5 + 72);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v10 = *(_OWORD *)(v5 + 24);
  long long v11 = *(_OWORD *)(v5 + 40);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
  *(_OWORD *)(a3 + 40) = v11;
  *(_OWORD *)(a3 + 24) = v10;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v7;
  *(_WORD *)(a3 + 72) = v9;
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);

  std::__shared_weak_count::__release_weak(v7);
}

uint64_t sub_215CDFE70(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3"
                     "_10MutabilityE1EEEENK3$_0clINS4_ILS5_22ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13Dynamic"
                                "BufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_22ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5Si"
                                "zeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_22ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_22ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215CDFEE0()
{
  return &unk_26C6816E0;
}

void sub_215CDFEEC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 22)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215CE0224();
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v18 = v4;
      size_t v19 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      uint64_t v18 = *(void *)(a1 + 8);
      size_t v19 = 0;
    }
  }
  else
  {
    uint64_t v18 = 0;
    size_t v19 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  BOOL v7 = *(_DWORD *)(a1 + 24) == 0;
  if (*(_DWORD *)(a1 + 24)) {
    uint64_t v8 = 3;
  }
  else {
    uint64_t v8 = 0;
  }
  if (!*(_DWORD *)(a1 + 28)) {
    BOOL v7 = 1;
  }
  BOOL v9 = !v7;
  if (v7) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = ((unint64_t)*(unsigned int *)(a1 + 32) << 31) & 0x7FFFFFFF00000000;
  }
  unint64_t v11 = v10 | v8;
  unint64_t v12 = *(void *)(a1 + 24);
  if (!v9) {
    unint64_t v12 = 0;
  }
  *(void *)((char *)&v20 + 4) = v12;
  unint64_t v13 = v12;
  LODWORD(v20) = 3;
  uint64_t v14 = v20;
  unint64_t v15 = HIDWORD(v12);
  LODWORD(v21) = 1;
  HIDWORD(v21) = v10 | v8;
  unint64_t v16 = HIDWORD(v10);
  if (HIDWORD(v12) * HIDWORD(v10) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  __int16 v17 = *(_WORD *)(a1 + 52);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v18;
  *(void *)(a2 + 8) = v19;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v14;
  *(_DWORD *)(a2 + 32) = v15;
  *(void *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 44) = v16;
  *(void *)(a2 + 48) = v13;
  *(void *)(a2 + 56) = v11;
  *(_WORD *)(a2 + 64) = v17;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
}

void sub_215CE01D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_215CE0224()
{
  int v0 = sub_215BC7960();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215CE02A4()
{
}

void *sub_215CE02B8(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *size_t result = &unk_26C681700;
  result[1] = v3;
  return result;
}

uint64_t sub_215CE0300(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C681700;
  a2[1] = v2;
  return result;
}

void sub_215CE032C(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v5 + 56) != *a2 || *(_DWORD *)(v5 + 60) != a2[1])
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreGraphics/src/ImageRef.cpp", 541, (uint64_t)"size == image.Size()", 20, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  *(void *)a3 = &unk_26C680380;
  uint64_t v6 = *(void *)(v5 + 8);
  BOOL v7 = *(std::__shared_weak_count **)(v5 + 16);
  if (!v7)
  {
    __int16 v12 = *(_WORD *)(v5 + 72);
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = 0;
    long long v13 = *(_OWORD *)(v5 + 24);
    long long v14 = *(_OWORD *)(v5 + 40);
    *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
    *(_OWORD *)(a3 + 40) = v14;
    *(_OWORD *)(a3 + 24) = v13;
    *(_WORD *)(a3 + 72) = v12;
    return;
  }
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  __int16 v9 = *(_WORD *)(v5 + 72);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v10 = *(_OWORD *)(v5 + 24);
  long long v11 = *(_OWORD *)(v5 + 40);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
  *(_OWORD *)(a3 + 40) = v11;
  *(_OWORD *)(a3 + 24) = v10;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v7;
  *(_WORD *)(a3 + 72) = v9;
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);

  std::__shared_weak_count::__release_weak(v7);
}

uint64_t sub_215CE04E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3"
                     "_10MutabilityE1EEEENK3$_0clINS4_ILS5_23ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13Dynamic"
                                "BufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_23ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5Si"
                                "zeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_23ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_23ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215CE0558()
{
  return &unk_26C681770;
}

void sub_215CE0564(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 23)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215CE089C();
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v18 = v4;
      size_t v19 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      uint64_t v18 = *(void *)(a1 + 8);
      size_t v19 = 0;
    }
  }
  else
  {
    uint64_t v18 = 0;
    size_t v19 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  BOOL v7 = *(_DWORD *)(a1 + 24) == 0;
  if (*(_DWORD *)(a1 + 24)) {
    uint64_t v8 = 3;
  }
  else {
    uint64_t v8 = 0;
  }
  if (!*(_DWORD *)(a1 + 28)) {
    BOOL v7 = 1;
  }
  BOOL v9 = !v7;
  if (v7) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = ((unint64_t)*(unsigned int *)(a1 + 32) << 31) & 0x7FFFFFFF00000000;
  }
  unint64_t v11 = v10 | v8;
  unint64_t v12 = *(void *)(a1 + 24);
  if (!v9) {
    unint64_t v12 = 0;
  }
  *(void *)((char *)&v20 + 4) = v12;
  unint64_t v13 = v12;
  LODWORD(v20) = 3;
  uint64_t v14 = v20;
  unint64_t v15 = HIDWORD(v12);
  LODWORD(v21) = 1;
  HIDWORD(v21) = v10 | v8;
  unint64_t v16 = HIDWORD(v10);
  if (HIDWORD(v12) * HIDWORD(v10) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  __int16 v17 = *(_WORD *)(a1 + 52);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v18;
  *(void *)(a2 + 8) = v19;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v14;
  *(_DWORD *)(a2 + 32) = v15;
  *(void *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 44) = v16;
  *(void *)(a2 + 48) = v13;
  *(void *)(a2 + 56) = v11;
  *(_WORD *)(a2 + 64) = v17;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
}

void sub_215CE0850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_215CE089C()
{
  int v0 = sub_215BC81D8();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215CE091C()
{
}

void *sub_215CE0930(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *size_t result = &unk_26C681790;
  result[1] = v3;
  return result;
}

uint64_t sub_215CE0978(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C681790;
  a2[1] = v2;
  return result;
}

void sub_215CE09A4(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v5 + 56) != *a2 || *(_DWORD *)(v5 + 60) != a2[1])
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreGraphics/src/ImageRef.cpp", 541, (uint64_t)"size == image.Size()", 20, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  *(void *)a3 = &unk_26C680478;
  uint64_t v6 = *(void *)(v5 + 8);
  BOOL v7 = *(std::__shared_weak_count **)(v5 + 16);
  if (!v7)
  {
    __int16 v12 = *(_WORD *)(v5 + 72);
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = 0;
    long long v13 = *(_OWORD *)(v5 + 24);
    long long v14 = *(_OWORD *)(v5 + 40);
    *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
    *(_OWORD *)(a3 + 40) = v14;
    *(_OWORD *)(a3 + 24) = v13;
    *(_WORD *)(a3 + 72) = v12;
    return;
  }
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  __int16 v9 = *(_WORD *)(v5 + 72);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v10 = *(_OWORD *)(v5 + 24);
  long long v11 = *(_OWORD *)(v5 + 40);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
  *(_OWORD *)(a3 + 40) = v11;
  *(_OWORD *)(a3 + 24) = v10;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v7;
  *(_WORD *)(a3 + 72) = v9;
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);

  std::__shared_weak_count::__release_weak(v7);
}

uint64_t sub_215CE0B60(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3"
                     "_10MutabilityE1EEEENK3$_0clINS4_ILS5_24ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13Dynamic"
                                "BufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_24ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5Si"
                                "zeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_24ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_24ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215CE0BD0()
{
  return &unk_26C681800;
}

void sub_215CE0BDC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 24)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215CE0F14();
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v18 = v4;
      size_t v19 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      uint64_t v18 = *(void *)(a1 + 8);
      size_t v19 = 0;
    }
  }
  else
  {
    uint64_t v18 = 0;
    size_t v19 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  BOOL v7 = *(_DWORD *)(a1 + 24) == 0;
  if (*(_DWORD *)(a1 + 24)) {
    uint64_t v8 = 3;
  }
  else {
    uint64_t v8 = 0;
  }
  if (!*(_DWORD *)(a1 + 28)) {
    BOOL v7 = 1;
  }
  BOOL v9 = !v7;
  if (v7) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = ((unint64_t)*(unsigned int *)(a1 + 32) << 30) & 0x3FFFFFFF00000000;
  }
  unint64_t v11 = v10 | v8;
  unint64_t v12 = *(void *)(a1 + 24);
  if (!v9) {
    unint64_t v12 = 0;
  }
  *(void *)((char *)&v20 + 4) = v12;
  unint64_t v13 = v12;
  LODWORD(v20) = 3;
  uint64_t v14 = v20;
  unint64_t v15 = HIDWORD(v12);
  LODWORD(v21) = 1;
  HIDWORD(v21) = v10 | v8;
  unint64_t v16 = HIDWORD(v10);
  if (HIDWORD(v12) * HIDWORD(v10) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  __int16 v17 = *(_WORD *)(a1 + 52);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v18;
  *(void *)(a2 + 8) = v19;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v14;
  *(_DWORD *)(a2 + 32) = v15;
  *(void *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 44) = v16;
  *(void *)(a2 + 48) = v13;
  *(void *)(a2 + 56) = v11;
  *(_WORD *)(a2 + 64) = v17;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
}

void sub_215CE0EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_215CE0F14()
{
  int v0 = sub_215BC8A50();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void *sub_215CE0F90(void *a1, uint64_t a2, _DWORD *a3, unsigned int *a4)
{
  *a1 = &unk_26C66FC78;
  if (a3[1]) {
    BOOL v5 = *a3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  unint64_t v6 = (unint64_t)*a4 << 32;
  if (v5) {
    unint64_t v6 = 0;
  }
  uint64_t v8 = v6 | (4 * (*a3 != 0));
  uint64_t v9 = a2;
  sub_215917904(&v9, a3, &v8, (uint64_t)(a1 + 1));
  return a1;
}

void sub_215CE101C()
{
}

void *sub_215CE1030(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *size_t result = &unk_26C681820;
  result[1] = v3;
  return result;
}

uint64_t sub_215CE1078(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C681820;
  a2[1] = v2;
  return result;
}

void sub_215CE10A4(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v5 + 56) != *a2 || *(_DWORD *)(v5 + 60) != a2[1])
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreGraphics/src/ImageRef.cpp", 541, (uint64_t)"size == image.Size()", 20, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  *(void *)a3 = &unk_26C67D1C0;
  uint64_t v6 = *(void *)(v5 + 8);
  BOOL v7 = *(std::__shared_weak_count **)(v5 + 16);
  if (!v7)
  {
    __int16 v12 = *(_WORD *)(v5 + 72);
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = 0;
    long long v13 = *(_OWORD *)(v5 + 24);
    long long v14 = *(_OWORD *)(v5 + 40);
    *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
    *(_OWORD *)(a3 + 40) = v14;
    *(_OWORD *)(a3 + 24) = v13;
    *(_WORD *)(a3 + 72) = v12;
    return;
  }
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  __int16 v9 = *(_WORD *)(v5 + 72);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v10 = *(_OWORD *)(v5 + 24);
  long long v11 = *(_OWORD *)(v5 + 40);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
  *(_OWORD *)(a3 + 40) = v11;
  *(_OWORD *)(a3 + 24) = v10;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v7;
  *(_WORD *)(a3 + 72) = v9;
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);

  std::__shared_weak_count::__release_weak(v7);
}

uint64_t sub_215CE1260(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3"
                     "_10MutabilityE1EEEENK3$_0clINS4_ILS5_25ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13Dynamic"
                                "BufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_25ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5Si"
                                "zeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_25ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_25ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215CE12D0()
{
  return &unk_26C681890;
}

void sub_215CE12DC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 25)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215CE1610();
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v19 = v4;
      long long v20 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 8);
      long long v20 = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
    long long v20 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v10 = v7 == 0;
  BOOL v8 = v7 != 0;
  int v9 = v10;
  if (!*(_DWORD *)(a1 + 28)) {
    int v9 = 1;
  }
  BOOL v10 = v9 == 0;
  if (v9) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  }
  uint64_t v12 = v11 | (4 * v8);
  unint64_t v13 = *(void *)(a1 + 24);
  if (!v10) {
    unint64_t v13 = 0;
  }
  LODWORD(v21) = 4;
  *(void *)((char *)&v21 + 4) = v13;
  unint64_t v14 = v13;
  uint64_t v15 = v21;
  unint64_t v16 = HIDWORD(v13);
  LODWORD(v22) = 1;
  HIDWORD(v22) = v12;
  unint64_t v17 = HIDWORD(v11);
  if (HIDWORD(v13) * HIDWORD(v11) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  __int16 v18 = *(_WORD *)(a1 + 52);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v19;
  *(void *)(a2 + 8) = v20;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v15;
  *(_DWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 36) = v22;
  *(_DWORD *)(a2 + 44) = v17;
  *(void *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = v12;
  *(_WORD *)(a2 + 64) = v18;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_215CE15C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_215CE1610()
{
  int v0 = sub_215BC9104();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void *sub_215CE168C(void *a1, uint64_t a2, _DWORD *a3, unsigned int *a4)
{
  *a1 = &unk_26C670658;
  if (a3[1]) {
    BOOL v5 = *a3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  unint64_t v6 = (unint64_t)*a4 << 32;
  if (v5) {
    unint64_t v6 = 0;
  }
  uint64_t v8 = v6 | (4 * (*a3 != 0));
  uint64_t v9 = a2;
  sub_21591B7E8(&v9, a3, &v8, (uint64_t)(a1 + 1));
  return a1;
}

void *sub_215CE1714(void *result, unsigned __int8 *a2, _DWORD **a3)
{
  *size_t result = a2;
  unint64_t v3 = *a3;
  result[2] = *a3;
  uint64_t v4 = a2[3];
  if (v4 != 255)
  {
    if (!a2[3])
    {
      if (v3
        || (size_t result = (void *)sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8), !result))
      {
        *unint64_t v3 = 0;
        return result;
      }
LABEL_43:
      abort();
    }
    float v6 = 255.0;
    float v7 = 255.0 / (float)v4;
    uint64_t v8 = (char *)&unk_215EE5E12 + 256 * v4;
    unsigned int v9 = *a2;
    float v10 = floorf(v7 * (float)v9);
    if (v10 <= 255.0) {
      float v6 = v10;
    }
    int v11 = (int)v6;
    unsigned int v12 = v8[v6];
    if (v12 != v9)
    {
      if (v12 >= v9 || v11 == 255)
      {
        if (v12 <= v9 || v11 == 0) {
          goto LABEL_44;
        }
        LOBYTE(v11) = v11 - 1;
      }
      else
      {
        LOBYTE(v11) = v11 + 1;
      }
    }
    *(unsigned char *)unint64_t v3 = v11;
    unsigned int v14 = *(unsigned __int8 *)(*result + 1);
    float v15 = floorf(v7 * (float)v14);
    if (v15 > 255.0) {
      float v15 = 255.0;
    }
    int v16 = (int)v15;
    unsigned int v17 = v8[v15];
    if (v17 != v14)
    {
      if (v17 >= v14 || v16 == 255)
      {
        if (v17 <= v14 || v16 == 0) {
          goto LABEL_44;
        }
        LOBYTE(v16) = v16 - 1;
      }
      else
      {
        LOBYTE(v16) = v16 + 1;
      }
    }
    *(unsigned char *)(result[2] + 1) = v16;
    unsigned int v19 = *(unsigned __int8 *)(*result + 2);
    float v20 = floorf(v7 * (float)v19);
    if (v20 > 255.0) {
      float v20 = 255.0;
    }
    int v21 = (int)v20;
    unsigned int v22 = v8[v20];
    if (v22 == v19) {
      goto LABEL_42;
    }
    if (v22 < v19 && v21 != 255)
    {
      LOBYTE(v21) = v21 + 1;
LABEL_42:
      *(unsigned char *)(result[2] + 2) = v21;
      *(unsigned char *)(result[2] + 3) = *(unsigned char *)(*result + 3);
      return result;
    }
    if (v22 > v19 && v21 != 0)
    {
      LOBYTE(v21) = v21 - 1;
      goto LABEL_42;
    }
LABEL_44:
    sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreGraphics/src/ImageRef.cpp", 69, (uint64_t)"", 0, (uint64_t)"Should not happen", 17, (void (*)(void **))sub_215E1ABD8);
    abort();
  }
  int v5 = *(_DWORD *)a2;
  if (!v3)
  {
    size_t result = (void *)sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
    if (result) {
      goto LABEL_43;
    }
  }
  *unint64_t v3 = v5;
  return result;
}

void sub_215CE1970()
{
}

void *sub_215CE1984(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *size_t result = &unk_26C6818B0;
  result[1] = v3;
  return result;
}

uint64_t sub_215CE19CC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6818B0;
  a2[1] = v2;
  return result;
}

void sub_215CE19F8(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v5 + 56) != *a2 || *(_DWORD *)(v5 + 60) != a2[1])
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreGraphics/src/ImageRef.cpp", 541, (uint64_t)"size == image.Size()", 20, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  *(void *)a3 = &unk_26C67F028;
  uint64_t v6 = *(void *)(v5 + 8);
  float v7 = *(std::__shared_weak_count **)(v5 + 16);
  if (!v7)
  {
    __int16 v12 = *(_WORD *)(v5 + 72);
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = 0;
    long long v13 = *(_OWORD *)(v5 + 24);
    long long v14 = *(_OWORD *)(v5 + 40);
    *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
    *(_OWORD *)(a3 + 40) = v14;
    *(_OWORD *)(a3 + 24) = v13;
    *(_WORD *)(a3 + 72) = v12;
    return;
  }
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  __int16 v9 = *(_WORD *)(v5 + 72);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v10 = *(_OWORD *)(v5 + 24);
  long long v11 = *(_OWORD *)(v5 + 40);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
  *(_OWORD *)(a3 + 40) = v11;
  *(_OWORD *)(a3 + 24) = v10;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v7;
  *(_WORD *)(a3 + 72) = v9;
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);

  std::__shared_weak_count::__release_weak(v7);
}

uint64_t sub_215CE1BB4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3"
                     "_10MutabilityE1EEEENK3$_0clINS4_ILS5_29ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13Dynamic"
                                "BufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_29ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5Si"
                                "zeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_29ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_29ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215CE1C24()
{
  return &unk_26C681920;
}

void sub_215CE1C30(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 29)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215CE1F64();
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v19 = v4;
      float v20 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 8);
      float v20 = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
    float v20 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v10 = v7 == 0;
  BOOL v8 = v7 != 0;
  int v9 = v10;
  if (!*(_DWORD *)(a1 + 28)) {
    int v9 = 1;
  }
  BOOL v10 = v9 == 0;
  if (v9) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  }
  uint64_t v12 = v11 | (4 * v8);
  unint64_t v13 = *(void *)(a1 + 24);
  if (!v10) {
    unint64_t v13 = 0;
  }
  LODWORD(v21) = 4;
  *(void *)((char *)&v21 + 4) = v13;
  unint64_t v14 = v13;
  uint64_t v15 = v21;
  unint64_t v16 = HIDWORD(v13);
  LODWORD(v22) = 1;
  HIDWORD(v22) = v12;
  unint64_t v17 = HIDWORD(v11);
  if (HIDWORD(v13) * HIDWORD(v11) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  __int16 v18 = *(_WORD *)(a1 + 52);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v19;
  *(void *)(a2 + 8) = v20;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v15;
  *(_DWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 36) = v22;
  *(_DWORD *)(a2 + 44) = v17;
  *(void *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = v12;
  *(_WORD *)(a2 + 64) = v18;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_215CE1F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_215CE1F64()
{
  int v0 = sub_215BCB018();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215CE1FE4()
{
}

void *sub_215CE1FF8(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *size_t result = &unk_26C681940;
  result[1] = v3;
  return result;
}

uint64_t sub_215CE2040(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C681940;
  a2[1] = v2;
  return result;
}

void sub_215CE206C(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v5 + 56) != *a2 || *(_DWORD *)(v5 + 60) != a2[1])
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreGraphics/src/ImageRef.cpp", 541, (uint64_t)"size == image.Size()", 20, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  *(void *)a3 = &unk_26C680858;
  uint64_t v6 = *(void *)(v5 + 8);
  int v7 = *(std::__shared_weak_count **)(v5 + 16);
  if (!v7)
  {
    __int16 v12 = *(_WORD *)(v5 + 72);
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = 0;
    long long v13 = *(_OWORD *)(v5 + 24);
    long long v14 = *(_OWORD *)(v5 + 40);
    *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
    *(_OWORD *)(a3 + 40) = v14;
    *(_OWORD *)(a3 + 24) = v13;
    *(_WORD *)(a3 + 72) = v12;
    return;
  }
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  __int16 v9 = *(_WORD *)(v5 + 72);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v10 = *(_OWORD *)(v5 + 24);
  long long v11 = *(_OWORD *)(v5 + 40);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
  *(_OWORD *)(a3 + 40) = v11;
  *(_OWORD *)(a3 + 24) = v10;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v7;
  *(_WORD *)(a3 + 72) = v9;
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);

  std::__shared_weak_count::__release_weak(v7);
}

uint64_t sub_215CE2228(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3"
                     "_10MutabilityE1EEEENK3$_0clINS4_ILS5_30ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13Dynamic"
                                "BufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_30ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5Si"
                                "zeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_30ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_30ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215CE2298()
{
  return &unk_26C6819B0;
}

void sub_215CE22A4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 30)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215CE25DC();
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v19 = v4;
      float v20 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 8);
      float v20 = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
    float v20 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v10 = v7 == 0;
  BOOL v8 = v7 != 0;
  int v9 = v10;
  if (!*(_DWORD *)(a1 + 28)) {
    int v9 = 1;
  }
  BOOL v10 = v9 == 0;
  if (v9) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = ((unint64_t)*(unsigned int *)(a1 + 32) << 31) & 0x7FFFFFFF00000000;
  }
  uint64_t v12 = v11 | (4 * v8);
  unint64_t v13 = *(void *)(a1 + 24);
  if (!v10) {
    unint64_t v13 = 0;
  }
  LODWORD(v21) = 4;
  *(void *)((char *)&v21 + 4) = v13;
  unint64_t v14 = v13;
  uint64_t v15 = v21;
  unint64_t v16 = HIDWORD(v13);
  LODWORD(v22) = 1;
  HIDWORD(v22) = v12;
  unint64_t v17 = HIDWORD(v11);
  if (HIDWORD(v13) * HIDWORD(v11) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  __int16 v18 = *(_WORD *)(a1 + 52);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v19;
  *(void *)(a2 + 8) = v20;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v15;
  *(_DWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 36) = v22;
  *(_DWORD *)(a2 + 44) = v17;
  *(void *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = v12;
  *(_WORD *)(a2 + 64) = v18;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_215CE2590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_215CE25DC()
{
  int v0 = sub_215BCB890();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215CE265C()
{
}

void *sub_215CE2670(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *size_t result = &unk_26C6819D0;
  result[1] = v3;
  return result;
}

uint64_t sub_215CE26B8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6819D0;
  a2[1] = v2;
  return result;
}

void sub_215CE26E4(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v5 + 56) != *a2 || *(_DWORD *)(v5 + 60) != a2[1])
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreGraphics/src/ImageRef.cpp", 541, (uint64_t)"size == image.Size()", 20, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  *(void *)a3 = &unk_26C67D2B8;
  uint64_t v6 = *(void *)(v5 + 8);
  int v7 = *(std::__shared_weak_count **)(v5 + 16);
  if (!v7)
  {
    __int16 v12 = *(_WORD *)(v5 + 72);
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = 0;
    long long v13 = *(_OWORD *)(v5 + 24);
    long long v14 = *(_OWORD *)(v5 + 40);
    *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
    *(_OWORD *)(a3 + 40) = v14;
    *(_OWORD *)(a3 + 24) = v13;
    *(_WORD *)(a3 + 72) = v12;
    return;
  }
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  __int16 v9 = *(_WORD *)(v5 + 72);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v10 = *(_OWORD *)(v5 + 24);
  long long v11 = *(_OWORD *)(v5 + 40);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
  *(_OWORD *)(a3 + 40) = v11;
  *(_OWORD *)(a3 + 24) = v10;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v7;
  *(_WORD *)(a3 + 72) = v9;
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);

  std::__shared_weak_count::__release_weak(v7);
}

uint64_t sub_215CE28A0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3"
                     "_10MutabilityE1EEEENK3$_0clINS4_ILS5_31ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13Dynamic"
                                "BufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_31ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5Si"
                                "zeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_31ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_31ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215CE2910()
{
  return &unk_26C681A40;
}

void sub_215CE291C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 31)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215CE2C54();
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v19 = v4;
      float v20 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 8);
      float v20 = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
    float v20 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v10 = v7 == 0;
  BOOL v8 = v7 != 0;
  int v9 = v10;
  if (!*(_DWORD *)(a1 + 28)) {
    int v9 = 1;
  }
  BOOL v10 = v9 == 0;
  if (v9) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = ((unint64_t)*(unsigned int *)(a1 + 32) << 31) & 0x7FFFFFFF00000000;
  }
  uint64_t v12 = v11 | (4 * v8);
  unint64_t v13 = *(void *)(a1 + 24);
  if (!v10) {
    unint64_t v13 = 0;
  }
  LODWORD(v21) = 4;
  *(void *)((char *)&v21 + 4) = v13;
  unint64_t v14 = v13;
  uint64_t v15 = v21;
  unint64_t v16 = HIDWORD(v13);
  LODWORD(v22) = 1;
  HIDWORD(v22) = v12;
  unint64_t v17 = HIDWORD(v11);
  if (HIDWORD(v13) * HIDWORD(v11) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  __int16 v18 = *(_WORD *)(a1 + 52);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v19;
  *(void *)(a2 + 8) = v20;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v15;
  *(_DWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 36) = v22;
  *(_DWORD *)(a2 + 44) = v17;
  *(void *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = v12;
  *(_WORD *)(a2 + 64) = v18;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_215CE2C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_215CE2C54()
{
  int v0 = sub_215BCBF44();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215CE2CD4()
{
}

void *sub_215CE2CE8(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *size_t result = &unk_26C681A60;
  result[1] = v3;
  return result;
}

uint64_t sub_215CE2D30(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C681A60;
  a2[1] = v2;
  return result;
}

void sub_215CE2D5C(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v5 + 56) != *a2 || *(_DWORD *)(v5 + 60) != a2[1])
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreGraphics/src/ImageRef.cpp", 541, (uint64_t)"size == image.Size()", 20, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  *(void *)a3 = &unk_26C67D3B0;
  uint64_t v6 = *(void *)(v5 + 8);
  int v7 = *(std::__shared_weak_count **)(v5 + 16);
  if (!v7)
  {
    __int16 v12 = *(_WORD *)(v5 + 72);
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = 0;
    long long v13 = *(_OWORD *)(v5 + 24);
    long long v14 = *(_OWORD *)(v5 + 40);
    *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
    *(_OWORD *)(a3 + 40) = v14;
    *(_OWORD *)(a3 + 24) = v13;
    *(_WORD *)(a3 + 72) = v12;
    return;
  }
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  __int16 v9 = *(_WORD *)(v5 + 72);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v10 = *(_OWORD *)(v5 + 24);
  long long v11 = *(_OWORD *)(v5 + 40);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
  *(_OWORD *)(a3 + 40) = v11;
  *(_OWORD *)(a3 + 24) = v10;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v7;
  *(_WORD *)(a3 + 72) = v9;
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);

  std::__shared_weak_count::__release_weak(v7);
}

uint64_t sub_215CE2F18(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3"
                     "_10MutabilityE1EEEENK3$_0clINS4_ILS5_32ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13Dynamic"
                                "BufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_32ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5Si"
                                "zeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_32ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_32ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215CE2F88()
{
  return &unk_26C681AD0;
}

void sub_215CE2F94(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 32)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215CE32CC();
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v19 = v4;
      float v20 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 8);
      float v20 = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
    float v20 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v10 = v7 == 0;
  BOOL v8 = v7 != 0;
  int v9 = v10;
  if (!*(_DWORD *)(a1 + 28)) {
    int v9 = 1;
  }
  BOOL v10 = v9 == 0;
  if (v9) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = ((unint64_t)*(unsigned int *)(a1 + 32) << 30) & 0x3FFFFFFF00000000;
  }
  uint64_t v12 = v11 | (4 * v8);
  unint64_t v13 = *(void *)(a1 + 24);
  if (!v10) {
    unint64_t v13 = 0;
  }
  LODWORD(v21) = 4;
  *(void *)((char *)&v21 + 4) = v13;
  unint64_t v14 = v13;
  uint64_t v15 = v21;
  unint64_t v16 = HIDWORD(v13);
  LODWORD(v22) = 1;
  HIDWORD(v22) = v12;
  unint64_t v17 = HIDWORD(v11);
  if (HIDWORD(v13) * HIDWORD(v11) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  __int16 v18 = *(_WORD *)(a1 + 52);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v19;
  *(void *)(a2 + 8) = v20;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v15;
  *(_DWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 36) = v22;
  *(_DWORD *)(a2 + 44) = v17;
  *(void *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = v12;
  *(_WORD *)(a2 + 64) = v18;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_215CE3280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_215CE32CC()
{
  int v0 = sub_215BCC5F8();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void *sub_215CE3348(void *a1, uint64_t a2, _DWORD *a3, unsigned int *a4)
{
  *a1 = &unk_26C671038;
  if (a3[1]) {
    BOOL v5 = *a3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  unint64_t v6 = (unint64_t)*a4 << 32;
  if (v5) {
    unint64_t v6 = 0;
  }
  uint64_t v8 = v6 | (4 * (*a3 != 0));
  uint64_t v9 = a2;
  sub_21591FBE8(&v9, a3, &v8, (uint64_t)(a1 + 1));
  return a1;
}

void sub_215CE33D4()
{
}

void *sub_215CE33E8(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *size_t result = &unk_26C681AF0;
  result[1] = v3;
  return result;
}

uint64_t sub_215CE3430(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C681AF0;
  a2[1] = v2;
  return result;
}

void sub_215CE345C(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v5 + 56) != *a2 || *(_DWORD *)(v5 + 60) != a2[1])
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreGraphics/src/ImageRef.cpp", 541, (uint64_t)"size == image.Size()", 20, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  *(void *)a3 = &unk_26C67F120;
  uint64_t v6 = *(void *)(v5 + 8);
  int v7 = *(std::__shared_weak_count **)(v5 + 16);
  if (!v7)
  {
    __int16 v12 = *(_WORD *)(v5 + 72);
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = 0;
    long long v13 = *(_OWORD *)(v5 + 24);
    long long v14 = *(_OWORD *)(v5 + 40);
    *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
    *(_OWORD *)(a3 + 40) = v14;
    *(_OWORD *)(a3 + 24) = v13;
    *(_WORD *)(a3 + 72) = v12;
    return;
  }
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  __int16 v9 = *(_WORD *)(v5 + 72);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v10 = *(_OWORD *)(v5 + 24);
  long long v11 = *(_OWORD *)(v5 + 40);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
  *(_OWORD *)(a3 + 40) = v11;
  *(_OWORD *)(a3 + 24) = v10;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v7;
  *(_WORD *)(a3 + 72) = v9;
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);

  std::__shared_weak_count::__release_weak(v7);
}

uint64_t sub_215CE3618(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3"
                     "_10MutabilityE1EEEENK3$_0clINS4_ILS5_33ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13Dynamic"
                                "BufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_33ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5Si"
                                "zeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_33ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_33ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215CE3688()
{
  return &unk_26C681B60;
}

void sub_215CE3694(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 33)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215CE39C8();
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v19 = v4;
      float v20 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 8);
      float v20 = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
    float v20 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v10 = v7 == 0;
  BOOL v8 = v7 != 0;
  int v9 = v10;
  if (!*(_DWORD *)(a1 + 28)) {
    int v9 = 1;
  }
  BOOL v10 = v9 == 0;
  if (v9) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  }
  uint64_t v12 = v11 | (4 * v8);
  unint64_t v13 = *(void *)(a1 + 24);
  if (!v10) {
    unint64_t v13 = 0;
  }
  LODWORD(v21) = 4;
  *(void *)((char *)&v21 + 4) = v13;
  unint64_t v14 = v13;
  uint64_t v15 = v21;
  unint64_t v16 = HIDWORD(v13);
  LODWORD(v22) = 1;
  HIDWORD(v22) = v12;
  unint64_t v17 = HIDWORD(v11);
  if (HIDWORD(v13) * HIDWORD(v11) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  __int16 v18 = *(_WORD *)(a1 + 52);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v19;
  *(void *)(a2 + 8) = v20;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v15;
  *(_DWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 36) = v22;
  *(_DWORD *)(a2 + 44) = v17;
  *(void *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = v12;
  *(_WORD *)(a2 + 64) = v18;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_215CE397C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_215CE39C8()
{
  int v0 = sub_215BCCCAC();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void *sub_215CE3A44(void *a1, uint64_t a2, _DWORD *a3, unsigned int *a4)
{
  *a1 = &unk_26C671A18;
  if (a3[1]) {
    BOOL v5 = *a3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  unint64_t v6 = (unint64_t)*a4 << 32;
  if (v5) {
    unint64_t v6 = 0;
  }
  uint64_t v8 = v6 | (4 * (*a3 != 0));
  uint64_t v9 = a2;
  sub_215923ACC(&v9, a3, &v8, (uint64_t)(a1 + 1));
  return a1;
}

void sub_215CE3AD0()
{
}

void *sub_215CE3AE4(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *size_t result = &unk_26C681B80;
  result[1] = v3;
  return result;
}

uint64_t sub_215CE3B2C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C681B80;
  a2[1] = v2;
  return result;
}

void sub_215CE3B58(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v5 + 56) != *a2 || *(_DWORD *)(v5 + 60) != a2[1])
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreGraphics/src/ImageRef.cpp", 541, (uint64_t)"size == image.Size()", 20, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  *(void *)a3 = &unk_26C67D4A8;
  uint64_t v6 = *(void *)(v5 + 8);
  int v7 = *(std::__shared_weak_count **)(v5 + 16);
  if (!v7)
  {
    __int16 v12 = *(_WORD *)(v5 + 72);
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = 0;
    long long v13 = *(_OWORD *)(v5 + 24);
    long long v14 = *(_OWORD *)(v5 + 40);
    *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
    *(_OWORD *)(a3 + 40) = v14;
    *(_OWORD *)(a3 + 24) = v13;
    *(_WORD *)(a3 + 72) = v12;
    return;
  }
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  __int16 v9 = *(_WORD *)(v5 + 72);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v10 = *(_OWORD *)(v5 + 24);
  long long v11 = *(_OWORD *)(v5 + 40);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
  *(_OWORD *)(a3 + 40) = v11;
  *(_OWORD *)(a3 + 24) = v10;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v7;
  *(_WORD *)(a3 + 72) = v9;
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);

  std::__shared_weak_count::__release_weak(v7);
}

uint64_t sub_215CE3D14(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3"
                     "_10MutabilityE1EEEENK3$_0clINS4_ILS5_37ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13Dynamic"
                                "BufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_37ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5Si"
                                "zeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_37ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_37ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215CE3D84()
{
  return &unk_26C681BF0;
}

void sub_215CE3D90(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 37)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215CE40C4();
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v19 = v4;
      float v20 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 8);
      float v20 = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
    float v20 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v10 = v7 == 0;
  BOOL v8 = v7 != 0;
  int v9 = v10;
  if (!*(_DWORD *)(a1 + 28)) {
    int v9 = 1;
  }
  BOOL v10 = v9 == 0;
  if (v9) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  }
  uint64_t v12 = v11 | (4 * v8);
  unint64_t v13 = *(void *)(a1 + 24);
  if (!v10) {
    unint64_t v13 = 0;
  }
  LODWORD(v21) = 4;
  *(void *)((char *)&v21 + 4) = v13;
  unint64_t v14 = v13;
  uint64_t v15 = v21;
  unint64_t v16 = HIDWORD(v13);
  LODWORD(v22) = 1;
  HIDWORD(v22) = v12;
  unint64_t v17 = HIDWORD(v11);
  if (HIDWORD(v13) * HIDWORD(v11) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  __int16 v18 = *(_WORD *)(a1 + 52);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v19;
  *(void *)(a2 + 8) = v20;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v15;
  *(_DWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 36) = v22;
  *(_DWORD *)(a2 + 44) = v17;
  *(void *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = v12;
  *(_WORD *)(a2 + 64) = v18;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_215CE4078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_215CE40C4()
{
  int v0 = sub_215BCEBC0();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215CE4144()
{
}

void *sub_215CE4158(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *size_t result = &unk_26C681C10;
  result[1] = v3;
  return result;
}

uint64_t sub_215CE41A0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C681C10;
  a2[1] = v2;
  return result;
}

void sub_215CE41CC(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v5 + 56) != *a2 || *(_DWORD *)(v5 + 60) != a2[1])
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreGraphics/src/ImageRef.cpp", 541, (uint64_t)"size == image.Size()", 20, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  *(void *)a3 = &unk_26C67D5A0;
  uint64_t v6 = *(void *)(v5 + 8);
  int v7 = *(std::__shared_weak_count **)(v5 + 16);
  if (!v7)
  {
    __int16 v12 = *(_WORD *)(v5 + 72);
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = 0;
    long long v13 = *(_OWORD *)(v5 + 24);
    long long v14 = *(_OWORD *)(v5 + 40);
    *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
    *(_OWORD *)(a3 + 40) = v14;
    *(_OWORD *)(a3 + 24) = v13;
    *(_WORD *)(a3 + 72) = v12;
    return;
  }
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  __int16 v9 = *(_WORD *)(v5 + 72);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v10 = *(_OWORD *)(v5 + 24);
  long long v11 = *(_OWORD *)(v5 + 40);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
  *(_OWORD *)(a3 + 40) = v11;
  *(_OWORD *)(a3 + 24) = v10;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v7;
  *(_WORD *)(a3 + 72) = v9;
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);

  std::__shared_weak_count::__release_weak(v7);
}

uint64_t sub_215CE4388(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3"
                     "_10MutabilityE1EEEENK3$_0clINS4_ILS5_38ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13Dynamic"
                                "BufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_38ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5Si"
                                "zeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_38ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_38ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215CE43F8()
{
  return &unk_26C681C80;
}

void sub_215CE4404(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 38)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215CE473C();
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v19 = v4;
      float v20 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 8);
      float v20 = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
    float v20 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v10 = v7 == 0;
  BOOL v8 = v7 != 0;
  int v9 = v10;
  if (!*(_DWORD *)(a1 + 28)) {
    int v9 = 1;
  }
  BOOL v10 = v9 == 0;
  if (v9) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = ((unint64_t)*(unsigned int *)(a1 + 32) << 31) & 0x7FFFFFFF00000000;
  }
  uint64_t v12 = v11 | (4 * v8);
  unint64_t v13 = *(void *)(a1 + 24);
  if (!v10) {
    unint64_t v13 = 0;
  }
  LODWORD(v21) = 4;
  *(void *)((char *)&v21 + 4) = v13;
  unint64_t v14 = v13;
  uint64_t v15 = v21;
  unint64_t v16 = HIDWORD(v13);
  LODWORD(v22) = 1;
  HIDWORD(v22) = v12;
  unint64_t v17 = HIDWORD(v11);
  if (HIDWORD(v13) * HIDWORD(v11) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  __int16 v18 = *(_WORD *)(a1 + 52);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v19;
  *(void *)(a2 + 8) = v20;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v15;
  *(_DWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 36) = v22;
  *(_DWORD *)(a2 + 44) = v17;
  *(void *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = v12;
  *(_WORD *)(a2 + 64) = v18;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_215CE46F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_215CE473C()
{
  int v0 = sub_215BCF274();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215CE47BC()
{
}

void *sub_215CE47D0(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *size_t result = &unk_26C681CA0;
  result[1] = v3;
  return result;
}

uint64_t sub_215CE4818(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C681CA0;
  a2[1] = v2;
  return result;
}

void sub_215CE4844(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v5 + 56) != *a2 || *(_DWORD *)(v5 + 60) != a2[1])
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreGraphics/src/ImageRef.cpp", 541, (uint64_t)"size == image.Size()", 20, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  *(void *)a3 = &unk_26C680C38;
  uint64_t v6 = *(void *)(v5 + 8);
  int v7 = *(std::__shared_weak_count **)(v5 + 16);
  if (!v7)
  {
    __int16 v12 = *(_WORD *)(v5 + 72);
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = 0;
    long long v13 = *(_OWORD *)(v5 + 24);
    long long v14 = *(_OWORD *)(v5 + 40);
    *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
    *(_OWORD *)(a3 + 40) = v14;
    *(_OWORD *)(a3 + 24) = v13;
    *(_WORD *)(a3 + 72) = v12;
    return;
  }
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  __int16 v9 = *(_WORD *)(v5 + 72);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v10 = *(_OWORD *)(v5 + 24);
  long long v11 = *(_OWORD *)(v5 + 40);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
  *(_OWORD *)(a3 + 40) = v11;
  *(_OWORD *)(a3 + 24) = v10;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v7;
  *(_WORD *)(a3 + 72) = v9;
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);

  std::__shared_weak_count::__release_weak(v7);
}

uint64_t sub_215CE4A00(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3"
                     "_10MutabilityE1EEEENK3$_0clINS4_ILS5_39ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13Dynamic"
                                "BufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_39ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5Si"
                                "zeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_39ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_39ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215CE4A70()
{
  return &unk_26C681D10;
}

void sub_215CE4A7C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 39)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215CE4DB4();
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v19 = v4;
      float v20 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 8);
      float v20 = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
    float v20 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v10 = v7 == 0;
  BOOL v8 = v7 != 0;
  int v9 = v10;
  if (!*(_DWORD *)(a1 + 28)) {
    int v9 = 1;
  }
  BOOL v10 = v9 == 0;
  if (v9) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = ((unint64_t)*(unsigned int *)(a1 + 32) << 31) & 0x7FFFFFFF00000000;
  }
  uint64_t v12 = v11 | (4 * v8);
  unint64_t v13 = *(void *)(a1 + 24);
  if (!v10) {
    unint64_t v13 = 0;
  }
  LODWORD(v21) = 4;
  *(void *)((char *)&v21 + 4) = v13;
  unint64_t v14 = v13;
  uint64_t v15 = v21;
  unint64_t v16 = HIDWORD(v13);
  LODWORD(v22) = 1;
  HIDWORD(v22) = v12;
  unint64_t v17 = HIDWORD(v11);
  if (HIDWORD(v13) * HIDWORD(v11) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  __int16 v18 = *(_WORD *)(a1 + 52);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v19;
  *(void *)(a2 + 8) = v20;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v15;
  *(_DWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 36) = v22;
  *(_DWORD *)(a2 + 44) = v17;
  *(void *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = v12;
  *(_WORD *)(a2 + 64) = v18;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_215CE4D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_215CE4DB4()
{
  int v0 = sub_215BCFAEC();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215CE4E34()
{
}

void *sub_215CE4E48(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *size_t result = &unk_26C681D30;
  result[1] = v3;
  return result;
}

uint64_t sub_215CE4E90(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C681D30;
  a2[1] = v2;
  return result;
}

void sub_215CE4EBC(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v5 + 56) != *a2 || *(_DWORD *)(v5 + 60) != a2[1])
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreGraphics/src/ImageRef.cpp", 541, (uint64_t)"size == image.Size()", 20, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  *(void *)a3 = &unk_26C680D30;
  uint64_t v6 = *(void *)(v5 + 8);
  int v7 = *(std::__shared_weak_count **)(v5 + 16);
  if (!v7)
  {
    __int16 v12 = *(_WORD *)(v5 + 72);
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = 0;
    long long v13 = *(_OWORD *)(v5 + 24);
    long long v14 = *(_OWORD *)(v5 + 40);
    *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
    *(_OWORD *)(a3 + 40) = v14;
    *(_OWORD *)(a3 + 24) = v13;
    *(_WORD *)(a3 + 72) = v12;
    return;
  }
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  __int16 v9 = *(_WORD *)(v5 + 72);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v10 = *(_OWORD *)(v5 + 24);
  long long v11 = *(_OWORD *)(v5 + 40);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
  *(_OWORD *)(a3 + 40) = v11;
  *(_OWORD *)(a3 + 24) = v10;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v7;
  *(_WORD *)(a3 + 72) = v9;
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);

  std::__shared_weak_count::__release_weak(v7);
}

uint64_t sub_215CE5078(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3"
                     "_10MutabilityE1EEEENK3$_0clINS4_ILS5_40ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13Dynamic"
                                "BufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_40ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5Si"
                                "zeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_40ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZNK4cv3d3kit2cg8ImageRef13CopyIntoImageENS0_3img9ImageViewILNS3_6FormatE0ENS3_13DynamicBufferELNS3_10MutabilityE1EEEENK3$_0clINS4_ILS5_40ES6_LS7_1EEEEEvRKT_EUlRKNS_3esn3arr5SizeTILj2ELNSG_8SizeTypeE0EvEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215CE50E8()
{
  return &unk_26C681DA0;
}

void sub_215CE50F4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 40)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215CE542C();
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v19 = v4;
      float v20 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 8);
      float v20 = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
    float v20 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v10 = v7 == 0;
  BOOL v8 = v7 != 0;
  int v9 = v10;
  if (!*(_DWORD *)(a1 + 28)) {
    int v9 = 1;
  }
  BOOL v10 = v9 == 0;
  if (v9) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = ((unint64_t)*(unsigned int *)(a1 + 32) << 30) & 0x3FFFFFFF00000000;
  }
  uint64_t v12 = v11 | (4 * v8);
  unint64_t v13 = *(void *)(a1 + 24);
  if (!v10) {
    unint64_t v13 = 0;
  }
  LODWORD(v21) = 4;
  *(void *)((char *)&v21 + 4) = v13;
  unint64_t v14 = v13;
  uint64_t v15 = v21;
  unint64_t v16 = HIDWORD(v13);
  LODWORD(v22) = 1;
  HIDWORD(v22) = v12;
  unint64_t v17 = HIDWORD(v11);
  if (HIDWORD(v13) * HIDWORD(v11) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  __int16 v18 = *(_WORD *)(a1 + 52);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v19;
  *(void *)(a2 + 8) = v20;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v15;
  *(_DWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 36) = v22;
  *(_DWORD *)(a2 + 44) = v17;
  *(void *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = v12;
  *(_WORD *)(a2 + 64) = v18;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_215CE53E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_215CE542C()
{
  int v0 = sub_215BD0364();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215CE54A8(_DWORD *a1)
{
  v1[10] = &unk_26C66C5A0;
  sub_215D932B0(a1, (uint64_t)v1);
  operator new();
}

void sub_215CE56E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_2159029A8(&a9);
  _Unwind_Resume(a1);
}

void sub_215CE571C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215CE5730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215D7D7C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215CE5744(_DWORD *a1)
{
  v1[10] = &unk_26C66C818;
  sub_215D934B8(a1, (uint64_t)v1);
  operator new();
}

void sub_215CE5984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_2159009A0(&a9);
  _Unwind_Resume(a1);
}

void sub_215CE59B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215CE59CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (a18) {
    free(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_215CE59E4(_DWORD *a1)
{
  uint64_t v10 = &unk_26C66F488;
  sub_215DAB4B4((uint64_t)v11, a1);
  long long v2 = v11[0];
  long long v3 = v11[1];
  uint64_t v1 = &unk_26C6644E0;
  long long v4 = v11[2];
  uint64_t v5 = v12;
  long long v6 = v13;
  uint64_t v7 = v14;
  uint64_t v9 = v16;
  long long v8 = v15;
  operator new();
}

void sub_215CE5CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215CE5CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215CE5CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_215CE5D0C(_DWORD *a1)
{
  v1[14] = &unk_26C66F700;
  sub_215D98338(a1, (uint64_t)v1);
  operator new();
}

void sub_215CE5F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215916338(&a9);
  _Unwind_Resume(a1);
}

void sub_215CE5FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215CE5FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215D88A5C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215CE5FCC(_DWORD *a1)
{
  uint64_t v10 = &unk_26C66F978;
  sub_215DAB66C((uint64_t)v11, a1);
  long long v2 = v11[0];
  long long v3 = v11[1];
  uint64_t v1 = &unk_26C6645E0;
  long long v4 = v11[2];
  uint64_t v5 = v12;
  long long v6 = v13;
  uint64_t v7 = v14;
  uint64_t v9 = v16;
  long long v8 = v15;
  operator new();
}

void sub_215CE6294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215CE62C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215CE62DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_215CE62F4(_DWORD *a1)
{
  v1[14] = &unk_26C66FBF0;
  sub_215D98B6C(a1, (uint64_t)v1);
  operator new();
}

void sub_215CE6558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215CE658C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215CE65A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_215CE65B8(_DWORD *a1)
{
  v1[14] = &unk_26C6705D0;
  sub_215D99BFC(a1, (uint64_t)v1);
  operator new();
}

void sub_215CE681C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215CE6850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215CE6864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_215CE687C(_DWORD *a1)
{
  uint64_t v10 = &unk_26C670848;
  sub_215DAB824((uint64_t)v11, a1);
  long long v2 = v11[0];
  long long v3 = v11[1];
  uint64_t v1 = &unk_26C6648E0;
  long long v4 = v11[2];
  uint64_t v5 = v12;
  long long v6 = v13;
  uint64_t v7 = v14;
  uint64_t v9 = v16;
  long long v8 = v15;
  operator new();
}

void sub_215CE6B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215CE6B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215CE6B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_215CE6BA4(_DWORD *a1)
{
  v1[14] = &unk_26C670AC0;
  sub_215D9A448(a1, (uint64_t)v1);
  operator new();
}

void sub_215CE6E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_21591E61C(&a9);
  _Unwind_Resume(a1);
}

void sub_215CE6E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215CE6E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215D8D2A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215CE6E64(_DWORD *a1)
{
  uint64_t v10 = &unk_26C670D38;
  sub_215DAB9E4((uint64_t)v11, a1);
  long long v2 = v11[0];
  long long v3 = v11[1];
  uint64_t v1 = &unk_26C6649E0;
  long long v4 = v11[2];
  uint64_t v5 = v12;
  long long v6 = v13;
  uint64_t v7 = v14;
  uint64_t v9 = v16;
  long long v8 = v15;
  operator new();
}

void sub_215CE712C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215CE7160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215CE7174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_215CE718C(_DWORD *a1)
{
  v1[14] = &unk_26C670FB0;
  sub_215D9AC8C(a1, (uint64_t)v1);
  operator new();
}

void sub_215CE73F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215CE7424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215CE7438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_215CE7450(_DWORD *a1)
{
  v1[14] = &unk_26C671990;
  sub_215D9BD1C(a1, (uint64_t)v1);
  operator new();
}

void sub_215CE76B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215CE76E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215CE76FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_215CE7714(_DWORD *a1)
{
  uint64_t v10 = &unk_26C671C08;
  sub_215DAB824((uint64_t)v11, a1);
  long long v2 = v11[0];
  long long v3 = v11[1];
  uint64_t v1 = &unk_26C664CE0;
  long long v4 = v11[2];
  uint64_t v5 = v12;
  long long v6 = v13;
  uint64_t v7 = v14;
  uint64_t v9 = v16;
  long long v8 = v15;
  operator new();
}

void sub_215CE79DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215CE7A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215CE7A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_215CE7A3C(_DWORD *a1)
{
  v1[14] = &unk_26C671E80;
  sub_215D9C568(a1, (uint64_t)v1);
  operator new();
}

void sub_215CE7CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215926900(&a9);
  _Unwind_Resume(a1);
}

void sub_215CE7CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215CE7CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215D919E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215CE7CFC(_DWORD *a1)
{
  uint64_t v10 = &unk_26C6720F8;
  sub_215DAB9E4((uint64_t)v11, a1);
  long long v2 = v11[0];
  long long v3 = v11[1];
  uint64_t v1 = &unk_26C664DE0;
  long long v4 = v11[2];
  uint64_t v5 = v12;
  long long v6 = v13;
  uint64_t v7 = v14;
  uint64_t v9 = v16;
  long long v8 = v15;
  operator new();
}

void sub_215CE7FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215CE7FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215CE800C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_215CE8024(unsigned char *a1)
{
  *a1 = 0;
  a1[8] = 0;
  operator new();
}

void sub_215CE8140(_Unwind_Exception *a1)
{
  uint64_t v7 = v6;
  sub_215CEA630(v7, *(void **)(v1 + 176));
  std::mutex::~mutex(v4);
  sub_215B60C50(v3);
  sub_215733368(v2);
  if (*(unsigned char *)(v1 + 24))
  {
    sub_215DDC9D8(v5);
    if (!*(unsigned char *)(v1 + 8)) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if (!*(unsigned char *)(v1 + 8))
  {
    goto LABEL_3;
  }
  sub_215DDC738((uint64_t **)v1);
  _Unwind_Resume(a1);
}

void sub_215CE81B4()
{
}

void sub_215CE82CC(_Unwind_Exception *a1)
{
  uint64_t v7 = v6;
  sub_215CEA630(v7, *(void **)(v1 + 176));
  std::mutex::~mutex(v5);
  sub_215B60C50(v4);
  sub_215733368(v3);
  if (*(unsigned char *)(v1 + 24))
  {
    sub_215DDC9D8(v2);
    if (!*(unsigned char *)(v1 + 8)) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if (!*(unsigned char *)(v1 + 8))
  {
    goto LABEL_3;
  }
  sub_215DDC738((uint64_t **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215CE8330(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  long long v8 = (char *)operator new(0x30uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)long long v8 = &unk_26C6748C0;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)a2;
  *((void *)v8 + 5) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 168) = a1 + 176;
  *(void *)(a1 + 32) = v8 + 24;
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = a3;
  *(void *)(a1 + 104) = 850045863;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 184) = 0;
  if (a4 == 1)
  {
    if (a3)
    {
      uint64_t v10 = a1;
      unint64_t v11 = &v12;
      uint64_t v12 = 0;
      if (atomic_load_explicit((atomic_ullong *volatile)(a1 + 80), memory_order_acquire) != -1)
      {
        uint64_t v14 = &v10;
        long long v13 = &v14;
        std::__call_once((std::once_flag::_State_type *)(a1 + 80), &v13, (void (__cdecl *)(void *))sub_215CEAAD8);
      }
    }
    else
    {
      uint64_t v10 = a1;
      unint64_t v11 = &v12;
      uint64_t v12 = 0;
      if (atomic_load_explicit((atomic_ullong *volatile)(a1 + 72), memory_order_acquire) != -1)
      {
        uint64_t v14 = &v10;
        long long v13 = &v14;
        std::__call_once((std::once_flag::_State_type *)(a1 + 72), &v13, (void (__cdecl *)(void *))sub_215CEA798);
      }
    }
  }
  return a1;
}

void sub_215CE84D8(_Unwind_Exception *a1)
{
  sub_215CEA630(v4, *(void **)(v1 + 176));
  std::mutex::~mutex(v5);
  sub_215B60C50(v3);
  sub_215733368(v6);
  if (*(unsigned char *)(v1 + 24))
  {
    sub_215DDC9D8(v2);
    if (!*(unsigned char *)(v1 + 8)) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if (!*(unsigned char *)(v1 + 8))
  {
    goto LABEL_3;
  }
  sub_215DDC738((uint64_t **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215CE8548(uint64_t a1, uint64_t a2, int a3)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  uint64_t v5 = (CFDictionaryRef *)(a1 + 48);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v6 = a1 + 88;
  *(void *)(v6 + 16) = 850045863;
  *(unsigned char *)(v6 - 24) = 1;
  *(void *)(v6 - 16) = 0;
  *(void *)(v6 - 8) = 0;
  *(unsigned char *)(v6 + 8) = 0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(void *)(v6 + 72) = 0;
  *(void *)(v6 + 88) = 0;
  *(void *)(v6 + 80) = v6 + 88;
  *(void *)(v6 + 96) = 0;
  if (atomic_load_explicit((atomic_ullong *volatile)v6, memory_order_acquire) != -1)
  {
    float v20 = &v21;
    v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
    std::__call_once((std::once_flag::_State_type *)v6, &v23, (void (__cdecl *)(void *))nullsub_340);
  }
  if (a3 == 1)
  {
    uint64_t v7 = sub_215D2AAFC();
    if (!sub_215DD2384((uint64_t)v5, v7, v8))
    {
      CFTypeID v17 = v9;
      __cxa_allocate_exception(0x10uLL);
      long long v21 = (char *)operator new(0xA0uLL);
      long long v22 = xmmword_215EF5E20;
      strcpy(v21, "CFDictionary cannot be used to create dict::Dictionary. It must only hold trivially serializable types: Boolean, Number, String, Array or Dictionary values");
      CFStringRef v18 = CFCopyTypeIDDescription(v17);
      sub_215CE8B74((int)&v19, v18, 0);
    }
  }
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 56);
  if (v10
    && (atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v11) {
      return a1;
    }
  }
  else if (!v11)
  {
    return a1;
  }
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 56);
  if (v12
    && (atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (v13)
    {
LABEL_11:
      if (CFDictionaryGetCount(*v5)) {
        return a1;
      }
    }
  }
  else if (v13)
  {
    goto LABEL_11;
  }
  uint64_t v14 = (char *)operator new(0x30uLL);
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0;
  *(void *)uint64_t v14 = &unk_26C6748C0;
  v14[47] = 2;
  strcpy(v14 + 24, "{}");
  long long v15 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v14 + 24;
  *(void *)(a1 + 40) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  return a1;
}

void sub_215CE88B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a17 && a16 < 0) {
    operator delete(a11);
  }
  sub_215733368((uint64_t)&a9);
  operator delete(v33);
  if (v34) {
    __cxa_free_exception(v32);
  }
  sub_215CEA630(v31, *(void **)(v26 + 176));
  std::mutex::~mutex(v30);
  sub_215B60C50(v29);
  sub_215733368(v28);
  if (*(unsigned char *)(v26 + 24))
  {
    sub_215DDC9D8(v27);
    if (!*(unsigned char *)(v26 + 8)) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }
  else if (!*(unsigned char *)(v26 + 8))
  {
    goto LABEL_10;
  }
  sub_215DDC738((uint64_t **)v26);
  _Unwind_Resume(a1);
}

uint64_t sub_215CE89A0(uint64_t a1, long long *a2, uint64_t a3)
{
  int v7 = -1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_215738B0C(&v5, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    uint64_t v6 = *((void *)a2 + 2);
  }
  int v7 = 1;
  uint64_t v8 = &v5;
  CFTypeID v9 = ", but contains ";
  uint64_t v10 = &v5;
  uint64_t v11 = ", but contains ";
  uint64_t v12 = ", but contains ";
  sub_215ABA68C((uint64_t *)&v10, (uint64_t)&v5);
  if (*(unsigned char *)(a3 + 24))
  {
    uint64_t v8 = &v5;
    CFTypeID v9 = (const char *)a3;
    uint64_t v10 = &v5;
    uint64_t v11 = (const char *)a3;
    uint64_t v12 = (const char *)a3;
    if (v7 != -1)
    {
      uint64_t v13 = &v8;
      ((void (*)(long long ***, long long *))off_26C681DC8[v7])(&v13, &v5);
      goto LABEL_9;
    }
LABEL_13:
    sub_215742D4C();
  }
  uint64_t v8 = &v5;
  CFTypeID v9 = "nullopt";
  uint64_t v10 = &v5;
  uint64_t v11 = "nullopt";
  uint64_t v12 = "nullopt";
  if (v7 == -1) {
    goto LABEL_13;
  }
  uint64_t v13 = &v8;
  ((void (*)(long long ***, long long *))off_26C681DF8[v7])(&v13, &v5);
LABEL_9:
  if (v7 == -1) {
    sub_215742D4C();
  }
  uint64_t v8 = (long long *)&v13;
  uint64_t result = ((uint64_t (*)(long long **, long long *))off_26C681E10[v7])(&v8, &v5);
  if (v7 != -1) {
    return ((uint64_t (*)(long long **, long long *))off_26C681DE0[v7])(&v8, &v5);
  }
  return result;
}

void sub_215CE8B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215CE8B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215CE8B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215CE8B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215CE8B74(int a1, CFTypeRef cf, int a3)
{
  if (a3) {
    sub_215CEA6F8(&v3, cf);
  }
  CFTypeRef v3 = cf;
  operator new();
}

void sub_215CE8C80(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215CE8C98(_Unwind_Exception *a1)
{
}

uint64_t sub_215CE8CAC(uint64_t a1, std::mutex **a2)
{
  if (a2)
  {
    int v4 = 0;
    LOBYTE(v14) = 0;
    char v16 = 0;
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    std::mutex::lock((std::mutex *)(a1 + 104));
    uint64_t v14 = (std::mutex *)(a1 + 104);
    int v4 = 1;
    char v15 = 1;
    char v16 = 1;
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
LABEL_3:
      BOOL v6 = 0;
      if (!v4) {
        return v5;
      }
      goto LABEL_16;
    }
  }
  if (*(void *)(a1 + 184))
  {
    BOOL v6 = 0;
    uint64_t v5 = *(void *)(*(void *)(a1 + 168) + 56);
    if (!v4) {
      return v5;
    }
  }
  else
  {
    v10[0] = 0;
    v10[1] = 0;
    char v11 = 1;
    if (a2) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = &v14;
    }
    sub_215CE8E10(&v12, a1, (uint64_t)v10, (uint64_t)v8);
    uint64_t v5 = v12;
    CFTypeID v9 = v13;
    if (v13)
    {
      if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    BOOL v6 = v15 == 0;
    if (!v16) {
      return v5;
    }
  }
LABEL_16:
  if (v6) {
    return v5;
  }
  std::mutex::unlock(v14);
  return v5;
}

void sub_215CE8DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if ((_BYTE)a17)
  {
    if (a15) {
      std::mutex::unlock(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215CE8E10(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a2 + 96) || *(unsigned char *)(a2 + 24))
  {
    uint64_t v30 = a2;
    uint64_t v31 = &v32;
    uint64_t v32 = a4;
    if (atomic_load_explicit((atomic_ullong *volatile)(a2 + 80), memory_order_acquire) != -1)
    {
      int v34 = &v30;
      v33 = &v34;
      std::__call_once((std::once_flag::_State_type *)(a2 + 80), &v33, (void (__cdecl *)(void *))sub_215CEAAD8);
    }
    sub_215DDB540(*(unsigned __int8 **)(a2 + 16), a3, &v24);
  }
  else
  {
    uint64_t v30 = a2;
    uint64_t v31 = &v32;
    uint64_t v32 = a4;
    if (atomic_load_explicit((atomic_ullong *volatile)(a2 + 72), memory_order_acquire) != -1)
    {
      int v34 = &v30;
      v33 = &v34;
      std::__call_once((std::once_flag::_State_type *)(a2 + 72), &v33, (void (__cdecl *)(void *))sub_215CEA798);
    }
    sub_215DDAC80(*(unsigned __int8 **)a2, a3, &v24);
  }
  int v7 = (char *)operator new(0x30uLL);
  uint64_t v8 = (std::__shared_weak_count *)v7;
  *((void *)v7 + 2) = 0;
  *((void *)v7 + 1) = 0;
  *(void *)int v7 = &unk_26C681E38;
  CFTypeID v9 = v7 + 24;
  *(_OWORD *)(v7 + 24) = v24;
  *((void *)v7 + 5) = v25;
  uint64_t v28 = v7 + 24;
  uint64_t v29 = (std::__shared_weak_count *)v7;
  long long v24 = *(_OWORD *)a3;
  uint64_t v25 = *(void *)(a3 + 16);
  uint64_t v26 = v7 + 24;
  long long v27 = (std::__shared_weak_count *)v7;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
  char v11 = (uint64_t **)(a2 + 176);
  uint64_t v10 = *(uint64_t **)(a2 + 176);
  if (v10)
  {
    if (BYTE8(v24))
    {
      while (1)
      {
        while (1)
        {
          uint64_t v12 = v10;
          if (!*((unsigned char *)v10 + 40)) {
            goto LABEL_19;
          }
          unint64_t v15 = v10[4];
          if ((void)v24 == v15) {
            break;
          }
          if ((unint64_t)v24 >= v15)
          {
            if (v15 >= (unint64_t)v24) {
              char v14 = 1;
            }
            else {
              char v14 = -1;
            }
            if ((v14 & 0x80) == 0) {
              goto LABEL_48;
            }
            goto LABEL_19;
          }
LABEL_31:
          uint64_t v10 = (uint64_t *)*v12;
          char v11 = (uint64_t **)v12;
          if (!*v12) {
            goto LABEL_34;
          }
        }
        unsigned int v16 = *((unsigned __int8 *)v12 + 48);
        if (v25 < v16) {
          goto LABEL_31;
        }
        BOOL v17 = v16 == v25;
        if (v16 >= v25) {
          char v18 = 1;
        }
        else {
          char v18 = -1;
        }
        if (v17) {
          char v18 = 0;
        }
        if ((v18 & 0x80) == 0) {
          goto LABEL_48;
        }
LABEL_19:
        uint64_t v10 = (uint64_t *)v12[1];
        if (!v10) {
          goto LABEL_14;
        }
      }
    }
    while (1)
    {
      while (1)
      {
        uint64_t v12 = v10;
        if (!*((unsigned char *)v10 + 40))
        {
          unsigned int v13 = *((unsigned __int8 *)v10 + 48);
          if (v25 >= v13) {
            break;
          }
        }
        uint64_t v10 = (uint64_t *)*v10;
        char v11 = (uint64_t **)v12;
        if (!*v12) {
          goto LABEL_34;
        }
      }
      if (v13 >= v25) {
        break;
      }
      uint64_t v10 = (uint64_t *)v10[1];
      if (!v10)
      {
LABEL_14:
        char v11 = (uint64_t **)(v12 + 1);
        goto LABEL_34;
      }
    }
LABEL_48:
    uint64_t v19 = v12;
    if (!atomic_fetch_add((atomic_ullong *volatile)v7 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_38;
    }
  }
  else
  {
    uint64_t v12 = (uint64_t *)(a2 + 176);
LABEL_34:
    uint64_t v19 = operator new(0x48uLL);
    v19[2] = *(_OWORD *)a3;
    *((void *)v19 + 6) = *(void *)(a3 + 16);
    *((void *)v19 + 7) = v9;
    *((void *)v19 + 8) = v8;
    uint64_t v26 = 0;
    long long v27 = 0;
    *(void *)uint64_t v19 = 0;
    *((void *)v19 + 1) = 0;
    *((void *)v19 + 2) = v12;
    const char *v11 = (uint64_t *)v19;
    uint64_t v20 = **(void **)(a2 + 168);
    long long v21 = (uint64_t *)v19;
    if (v20)
    {
      *(void *)(a2 + 168) = v20;
      long long v21 = *v11;
    }
    sub_21573B048(*(uint64_t **)(a2 + 176), v21);
    ++*(void *)(a2 + 184);
    uint64_t v8 = v27;
    if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_38:
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a1 = *((void *)v19 + 7);
  uint64_t v22 = *((void *)v19 + 8);
  a1[1] = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  std::string v23 = v29;
  if (v29)
  {
    if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_215CE9168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_215CE9184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215CE91A0(uint64_t a1, uint64_t a2)
{
  v33 = (std::mutex *)(a1 + 104);
  char v34 = 1;
  std::mutex::lock((std::mutex *)(a1 + 104));
  uint64_t v4 = *(void *)(a1 + 176);
  if (!v4) {
    goto LABEL_55;
  }
  unint64_t v5 = *(void *)a2;
  unsigned int v6 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v7 = a1 + 176;
  if (*(unsigned char *)(a2 + 8))
  {
    do
    {
      if (*(unsigned char *)(v4 + 40))
      {
        unint64_t v11 = *(void *)(v4 + 32);
        BOOL v12 = v11 == v5;
        if (v11 >= v5) {
          char v8 = 1;
        }
        else {
          char v8 = -1;
        }
        if (v12)
        {
          unsigned int v13 = *(unsigned __int8 *)(v4 + 48);
          BOOL v14 = v13 == v6;
          char v8 = v13 >= v6 ? 1 : -1;
          if (v14) {
            char v8 = 0;
          }
        }
      }
      else
      {
        char v8 = -1;
      }
      BOOL v9 = (v8 & 0x80) == 0;
      if (v8 < 0) {
        uint64_t v10 = (uint64_t *)(v4 + 8);
      }
      else {
        uint64_t v10 = (uint64_t *)v4;
      }
      if (v9) {
        uint64_t v7 = v4;
      }
      uint64_t v4 = *v10;
    }
    while (*v10);
  }
  else
  {
    do
    {
      if (*(unsigned char *)(v4 + 40))
      {
        char v17 = 1;
      }
      else
      {
        unsigned int v15 = *(unsigned __int8 *)(v4 + 48);
        BOOL v16 = v15 == v6;
        if (v15 >= v6) {
          char v17 = 1;
        }
        else {
          char v17 = -1;
        }
        if (v16) {
          char v17 = 0;
        }
      }
      BOOL v18 = (v17 & 0x80) == 0;
      if (v17 < 0) {
        uint64_t v19 = (uint64_t *)(v4 + 8);
      }
      else {
        uint64_t v19 = (uint64_t *)v4;
      }
      if (v18) {
        uint64_t v7 = v4;
      }
      uint64_t v4 = *v19;
    }
    while (*v19);
  }
  if (v7 == a1 + 176) {
    goto LABEL_55;
  }
  int v20 = *(unsigned __int8 *)(v7 + 40);
  if (*(unsigned char *)(a2 + 8) && *(unsigned char *)(v7 + 40))
  {
    unint64_t v21 = *(void *)(v7 + 32);
    BOOL v22 = v5 == v21;
    if (v5 >= v21) {
      char v23 = 1;
    }
    else {
      char v23 = -1;
    }
    if (!v22) {
      goto LABEL_53;
    }
    goto LABEL_47;
  }
  char v23 = -1;
  if (v20 == 0 || *(unsigned char *)(a2 + 8) != 0) {
    char v23 = 1;
  }
  if ((*(unsigned char *)(a2 + 8) != 0) == (v20 != 0))
  {
LABEL_47:
    unsigned int v24 = *(unsigned __int8 *)(v7 + 48);
    BOOL v25 = v6 >= v24;
    BOOL v26 = v6 == v24;
    char v27 = -1;
    if (v25) {
      char v27 = 1;
    }
    if (v26) {
      char v23 = 0;
    }
    else {
      char v23 = v27;
    }
  }
LABEL_53:
  if ((v23 & 0x80) == 0)
  {
    uint64_t v28 = *(void *)(v7 + 56);
LABEL_59:
    std::mutex::unlock(v33);
    return v28;
  }
LABEL_55:
  sub_215CE8E10(&v31, a1, a2, (uint64_t)&v33);
  uint64_t v28 = v31;
  uint64_t v29 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  if (v34) {
    goto LABEL_59;
  }
  return v28;
}

void sub_215CE9374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  if (a12) {
    std::mutex::unlock(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215CE9390(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 96)) {
    BOOL v4 = *(unsigned char *)(a2 + 96) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (*(unsigned char *)(a1 + 64)) {
      BOOL v5 = *(unsigned char *)(a2 + 64) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      unsigned int v6 = (std::once_flag::_State_type *)(a1 + 72);
      uint64_t v11 = a1;
      BOOL v12 = &v13;
      uint64_t v13 = 0;
      if (atomic_load_explicit((atomic_ullong *volatile)(a1 + 72), memory_order_acquire) != -1)
      {
        unsigned int v15 = &v11;
        BOOL v14 = &v15;
        std::__call_once(v6, &v14, (void (__cdecl *)(void *))sub_215CEA798);
      }
      BOOL v12 = &v13;
      uint64_t v13 = 0;
      uint64_t v11 = a2;
      if (atomic_load_explicit((atomic_ullong *volatile)(a2 + 72), memory_order_acquire) != -1)
      {
        unsigned int v15 = &v11;
        BOOL v14 = &v15;
        std::__call_once((std::once_flag::_State_type *)(a2 + 72), &v14, (void (__cdecl *)(void *))sub_215CEA798);
      }
      return sub_215DDCA2C(*(uint64_t **)a1, *(uint64_t **)a2);
    }
    else
    {
      BOOL v9 = (const void **)(a1 + 48);
      uint64_t v10 = a2 + 48;
      return sub_215B60CD4(v9, v10);
    }
  }
  else
  {
    char v8 = (std::once_flag::_State_type *)(a1 + 80);
    uint64_t v11 = a1;
    BOOL v12 = &v13;
    uint64_t v13 = 0;
    if (atomic_load_explicit((atomic_ullong *volatile)(a1 + 80), memory_order_acquire) != -1)
    {
      unsigned int v15 = &v11;
      BOOL v14 = &v15;
      std::__call_once(v8, &v14, (void (__cdecl *)(void *))sub_215CEAAD8);
    }
    BOOL v12 = &v13;
    uint64_t v13 = 0;
    uint64_t v11 = a2;
    if (atomic_load_explicit((atomic_ullong *volatile)(a2 + 80), memory_order_acquire) != -1)
    {
      unsigned int v15 = &v11;
      BOOL v14 = &v15;
      std::__call_once((std::once_flag::_State_type *)(a2 + 80), &v14, (void (__cdecl *)(void *))sub_215CEAAD8);
    }
    return sub_215DDCDD8(*(uint64_t **)(a1 + 16), *(uint64_t **)(a2 + 16));
  }
}

uint64_t sub_215CE954C(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 32);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215CE95C8()
{
}

void sub_215CE96B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t **a9)
{
}

void sub_215CE96C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DDC9D8((void ****)va);
  MEMORY[0x2166C4D20](v2, 0x10E2C40590DAB7CLL);
  _Unwind_Resume(a1);
}

uint64_t ***sub_215CE96F8(uint64_t ***a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    CFTypeRef v3 = sub_215CE9BC8(v2);
    MEMORY[0x2166C4D20](v3, 0x10E2C40590DAB7CLL);
  }
  return a1;
}

void sub_215CE9740()
{
}

void sub_215CE9834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  MEMORY[0x2166C4D20](v16, 0x10E2C40590DAB7CLL);
  _Unwind_Resume(a1);
}

void sub_215CE9884(uint64_t a1, uint64_t a2)
{
  sub_21575FC70((uint64_t)&v2, a2);
}

void sub_215CE9A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t **a12)
{
}

void sub_215CE9A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_215733368((uint64_t)&a13);
  MEMORY[0x2166C4D20](v13, 0x10E2C40590DAB7CLL);
  sub_215733368((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_215CE9A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215CE9A80(void *a1)
{
  uint64_t v1 = *a1;
  long long v2 = (std::once_flag::_State_type *)(*a1 + 72);
  v4[0] = v1;
  v4[1] = &v5;
  uint64_t v5 = 0;
  if (atomic_load_explicit((atomic_ullong *volatile)v2, memory_order_acquire) != -1)
  {
    uint64_t v7 = v4;
    unsigned int v6 = &v7;
    std::__call_once(v2, &v6, (void (__cdecl *)(void *))sub_215CEA798);
  }
  return v1;
}

uint64_t sub_215CE9AF0(void *a1)
{
  uint64_t v1 = *a1;
  long long v2 = (std::once_flag::_State_type *)(*a1 + 80);
  v4[0] = v1;
  v4[1] = &v5;
  uint64_t v5 = 0;
  if (atomic_load_explicit((atomic_ullong *volatile)v2, memory_order_acquire) != -1)
  {
    uint64_t v7 = v4;
    unsigned int v6 = &v7;
    std::__call_once(v2, &v6, (void (__cdecl *)(void *))sub_215CEAAD8);
  }
  return v1 + 16;
}

uint64_t sub_215CE9B60(void *a1)
{
  uint64_t v1 = *a1;
  long long v2 = (std::once_flag::_State_type *)(*a1 + 88);
  uint64_t v4 = v1;
  if (atomic_load_explicit((atomic_ullong *volatile)v2, memory_order_acquire) != -1)
  {
    unsigned int v6 = &v4;
    uint64_t v5 = &v6;
    std::__call_once(v2, &v5, (void (__cdecl *)(void *))sub_215CEAE18);
  }
  return v1 + 48;
}

uint64_t **sub_215CE9BC8(uint64_t **a1)
{
  sub_215CEA630((uint64_t)(a1 + 21), a1[22]);
  std::mutex::~mutex((std::mutex *)(a1 + 13));
  if (*((unsigned char *)a1 + 64))
  {
    long long v2 = (std::__shared_weak_count *)a1[7];
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  CFTypeRef v3 = (std::__shared_weak_count *)a1[5];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!*((unsigned char *)a1 + 24)) {
      goto LABEL_10;
    }
  }
  else if (!*((unsigned char *)a1 + 24))
  {
    goto LABEL_10;
  }
  uint64_t v4 = (void ***)a1[2];
  a1[2] = 0;
  if (v4)
  {
    sub_215CEB204(v4 + 1, *(unsigned __int8 *)v4);
    MEMORY[0x2166C4D20](v4, 0x1022C40B06DCE69);
  }
LABEL_10:
  if (*((unsigned char *)a1 + 8))
  {
    uint64_t v5 = *a1;
    *a1 = 0;
    if (v5)
    {
      sub_215CE9D14(v5 + 1, *(unsigned __int8 *)v5);
      MEMORY[0x2166C4D20](v5, 0x1022C40B06DCE69);
    }
  }
  return a1;
}

void sub_215CE9D14(uint64_t *a1, int a2)
{
  __p = 0;
  v66 = 0;
  v67 = 0;
  int v3 = a2 - 1;
  if (a2 == 1)
  {
    sub_215CEA364((uint64_t)&__p, *(void *)(*a1 + 16));
    uint64_t v7 = *a1 + 8;
    char v8 = *(char **)*a1;
    if (v8 != (char *)v7)
    {
      BOOL v9 = v66;
      do
      {
        if (v9 >= v67)
        {
          BOOL v9 = sub_215CEA474(&__p, v8 + 56);
        }
        else
        {
          *BOOL v9 = v8[56];
          *((void *)v9 + 1) = *((void *)v8 + 8);
          v8[56] = 0;
          *((void *)v8 + 8) = 0;
          v9 += 16;
        }
        v66 = v9;
        uint64_t v10 = (char *)*((void *)v8 + 1);
        if (v10)
        {
          do
          {
            uint64_t v11 = v10;
            uint64_t v10 = *(char **)v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            uint64_t v11 = (char *)*((void *)v8 + 2);
            BOOL v12 = *(void *)v11 == (void)v8;
            char v8 = v11;
          }
          while (!v12);
        }
        char v8 = v11;
      }
      while (v11 != (char *)v7);
    }
  }
  else if (a2 == 2)
  {
    sub_215CEA364((uint64_t)&__p, (uint64_t)(*(void *)(*a1 + 8) - *(void *)*a1) >> 4);
    uint64_t v4 = *(void *)*a1;
    uint64_t v5 = *(void *)(*a1 + 8);
    if (v4 != v5)
    {
      unsigned int v6 = v66;
      do
      {
        if (v6 < v67)
        {
          *unsigned int v6 = *(unsigned char *)v4;
          *((void *)v6 + 1) = *(void *)(v4 + 8);
          *(unsigned char *)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
          v6 += 16;
        }
        else
        {
          unsigned int v6 = sub_215CEA474(&__p, (char *)v4);
        }
        v66 = v6;
        v4 += 16;
      }
      while (v4 != v5);
    }
  }
  BOOL v14 = (char *)__p;
  uint64_t v13 = v66;
  if (__p != v66)
  {
    int v62 = v3;
    while (1)
    {
      unsigned __int8 v63 = *(v13 - 16);
      v64 = (void *)*((void *)v13 - 1);
      *(v13 - 16) = 0;
      *((void *)v13 - 1) = 0;
      unsigned int v15 = v66 - 16;
      sub_215CE9D14(v66 - 8, *(v66 - 16));
      v66 = v15;
      if (v63 == 1) {
        break;
      }
      if (v63 == 2)
      {
        uint64_t v16 = (void *)*v64;
        char v17 = v64 + 1;
        BOOL v18 = (void *)v64[1];
        if ((void *)*v64 != v18)
        {
          do
          {
            if (v15 < v67)
            {
              *unsigned int v15 = *(unsigned char *)v16;
              *((void *)v15 + 1) = v16[1];
              *(unsigned char *)uint64_t v16 = 0;
              v16[1] = 0;
              v15 += 16;
            }
            else
            {
              uint64_t v19 = (char *)__p;
              uint64_t v20 = (v15 - (unsigned char *)__p) >> 4;
              unint64_t v21 = v20 + 1;
              if ((unint64_t)(v20 + 1) >> 60) {
                goto LABEL_105;
              }
              uint64_t v22 = v67 - (unsigned char *)__p;
              if ((v67 - (unsigned char *)__p) >> 3 > v21) {
                unint64_t v21 = v22 >> 3;
              }
              if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v23 = v21;
              }
              if (v23 >> 60) {
                goto LABEL_106;
              }
              unsigned int v24 = (char *)operator new(16 * v23);
              BOOL v25 = &v24[16 * v20];
              *BOOL v25 = *(unsigned char *)v16;
              *((void *)v25 + 1) = v16[1];
              *(unsigned char *)uint64_t v16 = 0;
              v16[1] = 0;
              BOOL v26 = v66;
              char v27 = v25;
              if (v66 != v19)
              {
                do
                {
                  char v28 = *(v26 - 16);
                  v26 -= 16;
                  *(v27 - 16) = v28;
                  v27 -= 16;
                  *((void *)v27 + 1) = *((void *)v26 + 1);
                  *BOOL v26 = 0;
                  *((void *)v26 + 1) = 0;
                }
                while (v26 != v19);
                uint64_t v19 = v66;
              }
              uint64_t v29 = &v24[16 * v23];
              uint64_t v30 = (char *)__p;
              unsigned int v15 = v25 + 16;
              __p = v27;
              v66 = v25 + 16;
              v67 = v29;
              if (v19 != v30)
              {
                uint64_t v31 = v19 - 8;
                do
                {
                  uint64_t v32 = v31 - 8;
                  sub_215CE9D14(v31, *(v31 - 8));
                  v31 -= 16;
                }
                while (v32 != v30);
              }
              if (v30) {
                operator delete(v30);
              }
            }
            v66 = v15;
            v16 += 2;
          }
          while (v16 != v18);
          uint64_t v16 = (void *)*v64;
          char v17 = v64 + 1;
          uint64_t v50 = v64[1];
          if (v50 == *v64)
          {
            void *v17 = v50;
            goto LABEL_24;
          }
          uint64_t v51 = v50 - 8;
          do
          {
            v52 = (void *)(v51 - 8);
            sub_215CE9D14(v51, *(unsigned __int8 *)(v51 - 8));
            v51 -= 16;
          }
          while (v52 != v16);
        }
        void *v17 = v16;
      }
LABEL_24:
      sub_215CE9D14(&v64, v63);
      BOOL v14 = (char *)__p;
      uint64_t v13 = v66;
      if (__p == v66)
      {
        int v3 = v62;
        goto LABEL_83;
      }
    }
    uint64_t v33 = (uint64_t)v64;
    char v34 = v64 + 1;
    v35 = (void *)*v64;
    if ((void *)*v64 == v64 + 1)
    {
LABEL_80:
      sub_215CEA5A0(v33, *(char **)(v33 + 8));
      *(void *)uint64_t v33 = v33 + 8;
      *(void *)(v33 + 16) = 0;
      *(void *)(v33 + 8) = 0;
      goto LABEL_24;
    }
    while (1)
    {
      if (v15 < v67)
      {
        *unsigned int v15 = *((unsigned char *)v35 + 56);
        *((void *)v15 + 1) = v35[8];
        *((unsigned char *)v35 + 56) = 0;
        v35[8] = 0;
        v15 += 16;
        v66 = v15;
        uint64_t v36 = (void *)v35[1];
        if (v36) {
          goto LABEL_70;
        }
        goto LABEL_72;
      }
      v37 = (char *)__p;
      uint64_t v38 = (v15 - (unsigned char *)__p) >> 4;
      unint64_t v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 60) {
LABEL_105:
      }
        sub_215CEA45C();
      uint64_t v40 = v67 - (unsigned char *)__p;
      if ((v67 - (unsigned char *)__p) >> 3 > v39) {
        unint64_t v39 = v40 >> 3;
      }
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v39;
      }
      if (v41 >> 60) {
LABEL_106:
      }
        sub_215738AD8();
      v42 = (char *)operator new(16 * v41);
      v43 = &v42[16 * v38];
      char *v43 = *((unsigned char *)v35 + 56);
      *((void *)v43 + 1) = v35[8];
      *((unsigned char *)v35 + 56) = 0;
      v35[8] = 0;
      v44 = v43 + 16;
      if (v15 == v37)
      {
        __p = v43;
        v66 = v43 + 16;
        v67 = &v42[16 * v41];
      }
      else
      {
        do
        {
          char v45 = *(v15 - 16);
          v15 -= 16;
          *(v43 - 16) = v45;
          v43 -= 16;
          *((void *)v43 + 1) = *((void *)v15 + 1);
          *unsigned int v15 = 0;
          *((void *)v15 + 1) = 0;
        }
        while (v15 != v37);
        unsigned int v15 = (char *)__p;
        v46 = v66;
        __p = v43;
        v66 = v44;
        v67 = &v42[16 * v41];
        if (v46 != v15)
        {
          v47 = v46 - 8;
          do
          {
            v48 = v47 - 8;
            sub_215CE9D14(v47, *(v47 - 8));
            v47 -= 16;
          }
          while (v48 != v15);
        }
        if (!v15)
        {
          unsigned int v15 = v44;
          v66 = v44;
          uint64_t v36 = (void *)v35[1];
          if (v36) {
            goto LABEL_70;
          }
          goto LABEL_72;
        }
      }
      operator delete(v15);
      unsigned int v15 = v44;
      v66 = v44;
      uint64_t v36 = (void *)v35[1];
      if (v36)
      {
        do
        {
LABEL_70:
          v49 = v36;
          uint64_t v36 = (void *)*v36;
        }
        while (v36);
        goto LABEL_49;
      }
      do
      {
LABEL_72:
        v49 = (void *)v35[2];
        BOOL v12 = *v49 == (void)v35;
        v35 = v49;
      }
      while (!v12);
LABEL_49:
      v35 = v49;
      if (v49 == v34)
      {
        uint64_t v33 = (uint64_t)v64;
        goto LABEL_80;
      }
    }
  }
LABEL_83:
  switch(v3)
  {
    case 0:
      sub_215CEA5A0(*a1, *(char **)(*a1 + 8));
      goto LABEL_96;
    case 1:
      v53 = (void **)*a1;
      v55 = *(void **)*a1;
      if (!v55) {
        goto LABEL_97;
      }
      v56 = v53[1];
      v54 = *(void **)*a1;
      if (v56 != v55)
      {
        uint64_t v57 = (uint64_t)v56 - 8;
        do
        {
          v58 = (void *)(v57 - 8);
          sub_215CE9D14(v57, *(unsigned __int8 *)(v57 - 8));
          v57 -= 16;
        }
        while (v58 != v55);
        v54 = *v53;
      }
      v53[1] = v55;
      break;
    case 2:
      v53 = (void **)*a1;
      if ((*(char *)(*a1 + 23) & 0x80000000) == 0) {
        goto LABEL_97;
      }
      v54 = *v53;
      break;
    case 7:
      v53 = (void **)*a1;
      v54 = *(void **)*a1;
      if (!v54) {
        goto LABEL_97;
      }
      v53[1] = v54;
      break;
    default:
      goto LABEL_98;
  }
  operator delete(v54);
LABEL_96:
  v53 = (void **)*a1;
LABEL_97:
  operator delete(v53);
  BOOL v14 = (char *)__p;
LABEL_98:
  if (v14)
  {
    v59 = v14;
    if (v66 != v14)
    {
      v60 = v66 - 8;
      do
      {
        v61 = v60 - 8;
        sub_215CE9D14(v60, *(v60 - 8));
        v60 -= 16;
      }
      while (v61 != v14);
      v59 = __p;
    }
    v66 = v14;
    operator delete(v59);
  }
}

void sub_215CEA364(uint64_t a1, unint64_t a2)
{
  long long v2 = *(char **)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) {
    return;
  }
  if (a2 >> 60) {
    sub_215CEA45C();
  }
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = 16 * a2;
  unsigned int v6 = (char *)operator new(16 * a2);
  uint64_t v7 = &v6[v5];
  char v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_10;
  }
  BOOL v9 = &v6[v4 - v2];
  do
  {
    char v10 = *(v4 - 16);
    v4 -= 16;
    *(v9 - 16) = v10;
    v9 -= 16;
    *((void *)v9 + 1) = *((void *)v4 + 1);
    char *v4 = 0;
    *((void *)v4 + 1) = 0;
  }
  while (v4 != v2);
  long long v2 = *(char **)a1;
  uint64_t v11 = *(char **)(a1 + 8);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v11 != v2)
  {
    BOOL v12 = v11 - 8;
    do
    {
      uint64_t v13 = v12 - 8;
      sub_215CE9D14(v12, *(v12 - 8));
      v12 -= 16;
    }
    while (v13 != v2);
  }
  if (v2)
  {
LABEL_10:
    operator delete(v2);
  }
}

void sub_215CEA45C()
{
}

char *sub_215CEA474(void **a1, char *a2)
{
  uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    sub_215CEA45C();
  }
  uint64_t v5 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v5 >> 3 > v4) {
    unint64_t v4 = v5 >> 3;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 60) {
    sub_215738AD8();
  }
  uint64_t v9 = 16 * v7;
  char v10 = (char *)operator new(16 * v7);
  uint64_t v11 = &v10[16 * v3];
  BOOL v12 = &v10[v9];
  char *v11 = *a2;
  *((void *)v11 + 1) = *((void *)a2 + 1);
  *a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v13 = v11 + 16;
  BOOL v14 = (char *)*a1;
  unsigned int v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v15) {
      return v13;
    }
    goto LABEL_13;
  }
  do
  {
    char v16 = *(v15 - 16);
    v15 -= 16;
    *(v11 - 16) = v16;
    v11 -= 16;
    *((void *)v11 + 1) = *((void *)v15 + 1);
    *unsigned int v15 = 0;
    *((void *)v15 + 1) = 0;
  }
  while (v15 != v14);
  unsigned int v15 = (char *)*a1;
  char v17 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v13;
  a1[2] = v12;
  if (v17 != v15)
  {
    BOOL v18 = v17 - 8;
    do
    {
      uint64_t v19 = v18 - 8;
      sub_215CE9D14(v18, *(v18 - 8));
      v18 -= 16;
    }
    while (v19 != v15);
  }
  if (v15) {
LABEL_13:
  }
    operator delete(v15);
  return v13;
}

void sub_215CEA5A0(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_215CEA5A0(a1, *(void *)a2);
    sub_215CEA5A0(a1, *((void *)a2 + 1));
    sub_215CE9D14(a2 + 64, a2[56]);
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      unint64_t v4 = a2;
    }
    else
    {
      unint64_t v4 = a2;
    }
    operator delete(v4);
  }
}

void sub_215CEA630(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_215CEA630(a1, *a2);
    sub_215CEA630(a1, a2[1]);
    unint64_t v4 = (std::__shared_weak_count *)a2[8];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v5 = a2;
    }
    else
    {
      uint64_t v5 = a2;
    }
    operator delete(v5);
  }
}

void sub_215CEA6F8(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  operator new();
}

void sub_215CEA76C(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215CEA784(_Unwind_Exception *a1)
{
}

void sub_215CEA798(uint64_t ***a1)
{
  uint64_t v1 = **a1;
  uint64_t v3 = *v1;
  long long v2 = (std::mutex ***)v1[1];
  if (!*(void *)(v3 + 32) && !*(unsigned char *)(v3 + 24)) {
    sub_21575FC70((uint64_t)&v5, v3 + 48);
  }
  uint64_t v4 = sub_215CE8CAC(v3, *v2);
  sub_215DDBFDC(v4);
}

void sub_215CEAA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  MEMORY[0x2166C4D20](v4, 0x1022C40B06DCE69);
  sub_215DDC738((uint64_t **)va);
  if (a4)
  {
    if (!atomic_fetch_add(&a4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  _Unwind_Resume(a1);
}

void sub_215CEAAC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DDC738((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_215CEAAD8(uint64_t ***a1)
{
  uint64_t v1 = **a1;
  uint64_t v3 = *v1;
  long long v2 = (void *)v1[1];
  if (!*(void *)(v3 + 32) && !*(unsigned char *)(v3 + 8)) {
    sub_21575FC70((uint64_t)&v5, v3 + 48);
  }
  uint64_t v4 = (uint64_t *)sub_215CE8CAC(v3, *v2);
  sub_215DDC12C(v4);
}

void sub_215CEAD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  MEMORY[0x2166C4D20](v4, 0x1022C40B06DCE69);
  sub_215DDC9D8((void ****)va);
  if (a4)
  {
    if (!atomic_fetch_add(&a4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  _Unwind_Resume(a1);
}

void sub_215CEAE04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DDC9D8((void ****)va);
  _Unwind_Resume(a1);
}

void sub_215CEAE18(uint64_t ***a1)
{
  uint64_t v1 = ***a1;
  if (*(unsigned char *)(v1 + 96))
  {
    uint64_t v2 = ***a1;
    uint64_t v3 = &v4;
    uint64_t v4 = 0;
    if (atomic_load_explicit((atomic_ullong *volatile)(v1 + 80), memory_order_acquire) != -1)
    {
      BOOL v6 = &v2;
      uint64_t v5 = &v6;
      std::__call_once((std::once_flag::_State_type *)(v1 + 80), &v5, (void (__cdecl *)(void *))sub_215CEAAD8);
    }
    BOOL v6 = *(uint64_t **)(v1 + 16);
    sub_215D2C4E0();
  }
  uint64_t v2 = ***a1;
  uint64_t v3 = &v4;
  uint64_t v4 = 0;
  if (atomic_load_explicit((atomic_ullong *volatile)(v1 + 72), memory_order_acquire) != -1)
  {
    BOOL v6 = &v2;
    uint64_t v5 = &v6;
    std::__call_once((std::once_flag::_State_type *)(v1 + 72), &v5, (void (__cdecl *)(void *))sub_215CEA798);
  }
  BOOL v6 = *(uint64_t **)v1;
  sub_215D2C3D4();
}

void sub_215CEAFDC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C681E38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215CEAFFC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C681E38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215CEB050(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

void sub_215CEB06C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t **sub_215CEB0A4(uint64_t a1)
{
  uint64_t result = *(uint64_t ***)(a1 + 24);
  if (result)
  {
    sub_215CE9BC8(result);
    JUMPOUT(0x2166C4D20);
  }
  return result;
}

uint64_t sub_215CEB0EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit4dict10Dictionary7PrivateEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit4dict10Dictionary7PrivateEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit4dict10Dictionary7PrivateEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit4dict10Dictionary7PrivateEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void ***sub_215CEB160(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    unint64_t v3 = (void ***)**result;
    if (v3)
    {
      uint64_t v4 = (void ***)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          sub_215CEB204(v4 - 1, *((unsigned __int8 *)v4 - 16));
          if (*((char *)v4 - 17) < 0) {
            operator delete(*(v4 - 5));
          }
          v4 -= 5;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_215CEB204(void ***a1, int a2)
{
  __p = 0;
  v66 = 0;
  v67 = 0;
  int v3 = a2 - 1;
  if (a2 == 1)
  {
    sub_215CEB864((uint64_t)&__p, 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)(*a1)[1] - (unsigned char *)**a1) >> 3));
    unint64_t v7 = (char *)**a1;
    char v8 = (char *)(*a1)[1];
    if (v7 != v8)
    {
      uint64_t v9 = v66;
      char v10 = v7 + 24;
      do
      {
        if (v9 < v67)
        {
          *uint64_t v9 = *v10;
          *((void *)v9 + 1) = *((void *)v10 + 1);
          *char v10 = 0;
          *((void *)v10 + 1) = 0;
          v9 += 16;
        }
        else
        {
          uint64_t v9 = sub_215CEB95C(&__p, v10);
        }
        v66 = v9;
        uint64_t v11 = v10 + 16;
        v10 += 40;
      }
      while (v11 != v8);
    }
  }
  else if (a2 == 2)
  {
    sub_215CEB864((uint64_t)&__p, ((unsigned char *)(*a1)[1] - (unsigned char *)**a1) >> 4);
    uint64_t v4 = (char *)**a1;
    uint64_t v5 = (char *)(*a1)[1];
    if (v4 != v5)
    {
      BOOL v6 = v66;
      do
      {
        if (v6 < v67)
        {
          *BOOL v6 = *v4;
          *((void *)v6 + 1) = *((void *)v4 + 1);
          char *v4 = 0;
          *((void *)v4 + 1) = 0;
          v6 += 16;
        }
        else
        {
          BOOL v6 = sub_215CEB95C(&__p, v4);
        }
        v66 = v6;
        v4 += 16;
      }
      while (v4 != v5);
    }
  }
  uint64_t v13 = (char *)__p;
  BOOL v12 = v66;
  if (__p != v66)
  {
    int v62 = v3;
    while (1)
    {
      unsigned __int8 v63 = *(v12 - 16);
      v64 = (uint64_t *)*((void *)v12 - 1);
      *(v12 - 16) = 0;
      *((void *)v12 - 1) = 0;
      unsigned int v15 = v66 - 16;
      sub_215CEB204(v66 - 8, *(v66 - 16));
      v66 = v15;
      if (v63 != 1)
      {
        if (v63 != 2) {
          goto LABEL_19;
        }
        uint64_t v16 = *v64;
        char v17 = v64 + 1;
        uint64_t v18 = v64[1];
        if (*v64 != v18)
        {
          do
          {
            if (v15 < v67)
            {
              *unsigned int v15 = *(unsigned char *)v16;
              *((void *)v15 + 1) = *(void *)(v16 + 8);
              *(unsigned char *)uint64_t v16 = 0;
              *(void *)(v16 + 8) = 0;
              v15 += 16;
            }
            else
            {
              uint64_t v19 = (char *)__p;
              uint64_t v20 = (v15 - (unsigned char *)__p) >> 4;
              unint64_t v21 = v20 + 1;
              if ((unint64_t)(v20 + 1) >> 60) {
                goto LABEL_102;
              }
              uint64_t v22 = v67 - (unsigned char *)__p;
              if ((v67 - (unsigned char *)__p) >> 3 > v21) {
                unint64_t v21 = v22 >> 3;
              }
              if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v23 = v21;
              }
              if (v23 >> 60) {
                goto LABEL_103;
              }
              unsigned int v24 = (char *)operator new(16 * v23);
              BOOL v25 = &v24[16 * v20];
              *BOOL v25 = *(unsigned char *)v16;
              *((void *)v25 + 1) = *(void *)(v16 + 8);
              *(unsigned char *)uint64_t v16 = 0;
              *(void *)(v16 + 8) = 0;
              BOOL v26 = v66;
              char v27 = v25;
              if (v66 != v19)
              {
                do
                {
                  char v28 = *(v26 - 16);
                  v26 -= 16;
                  *(v27 - 16) = v28;
                  v27 -= 16;
                  *((void *)v27 + 1) = *((void *)v26 + 1);
                  *BOOL v26 = 0;
                  *((void *)v26 + 1) = 0;
                }
                while (v26 != v19);
                uint64_t v19 = v66;
              }
              uint64_t v29 = &v24[16 * v23];
              uint64_t v30 = (char *)__p;
              unsigned int v15 = v25 + 16;
              __p = v27;
              v66 = v25 + 16;
              v67 = v29;
              if (v19 != v30)
              {
                uint64_t v31 = v19 - 8;
                do
                {
                  uint64_t v32 = v31 - 8;
                  sub_215CEB204(v31, *(v31 - 8));
                  v31 -= 16;
                }
                while (v32 != v30);
              }
              if (v30) {
                operator delete(v30);
              }
            }
            v66 = v15;
            v16 += 16;
          }
          while (v16 != v18);
          uint64_t v16 = *v64;
          char v17 = v64 + 1;
          uint64_t v47 = v64[1];
          if (v47 == *v64)
          {
            void *v17 = v47;
            goto LABEL_19;
          }
          uint64_t v48 = v47 - 8;
          do
          {
            uint64_t v49 = v48 - 8;
            sub_215CEB204(v48, *(unsigned __int8 *)(v48 - 8));
            v48 -= 16;
          }
          while (v49 != v16);
        }
        void *v17 = v16;
        goto LABEL_19;
      }
      uint64_t v14 = *v64;
      uint64_t v33 = v64 + 1;
      uint64_t v34 = v64[1];
      if (*v64 == v34) {
        goto LABEL_18;
      }
      do
      {
        if (v15 < v67)
        {
          *unsigned int v15 = *(unsigned char *)(v14 + 24);
          *((void *)v15 + 1) = *(void *)(v14 + 32);
          *(unsigned char *)(v14 + 24) = 0;
          *(void *)(v14 + 32) = 0;
          v35 = v15 + 16;
          goto LABEL_45;
        }
        uint64_t v36 = (char *)__p;
        uint64_t v37 = (v15 - (unsigned char *)__p) >> 4;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 60) {
LABEL_102:
        }
          sub_215CEA45C();
        uint64_t v39 = v67 - (unsigned char *)__p;
        if ((v67 - (unsigned char *)__p) >> 3 > v38) {
          unint64_t v38 = v39 >> 3;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v40 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40 >> 60) {
LABEL_103:
        }
          sub_215738AD8();
        unint64_t v41 = (char *)operator new(16 * v40);
        v42 = &v41[16 * v37];
        char *v42 = *(unsigned char *)(v14 + 24);
        *((void *)v42 + 1) = *(void *)(v14 + 32);
        *(unsigned char *)(v14 + 24) = 0;
        *(void *)(v14 + 32) = 0;
        v35 = v42 + 16;
        if (v15 == v36)
        {
          __p = v42;
          v66 = v42 + 16;
          v67 = &v41[16 * v40];
LABEL_62:
          operator delete(v15);
          goto LABEL_45;
        }
        do
        {
          char v43 = *(v15 - 16);
          v15 -= 16;
          *(v42 - 16) = v43;
          v42 -= 16;
          *((void *)v42 + 1) = *((void *)v15 + 1);
          *unsigned int v15 = 0;
          *((void *)v15 + 1) = 0;
        }
        while (v15 != v36);
        unsigned int v15 = (char *)__p;
        v44 = v66;
        __p = v42;
        v66 = v35;
        v67 = &v41[16 * v40];
        if (v44 != v15)
        {
          char v45 = v44 - 8;
          do
          {
            v46 = v45 - 8;
            sub_215CEB204(v45, *(v45 - 8));
            v45 -= 16;
          }
          while (v46 != v15);
        }
        if (v15) {
          goto LABEL_62;
        }
LABEL_45:
        v66 = v35;
        v14 += 40;
        unsigned int v15 = v35;
      }
      while (v14 != v34);
      uint64_t v50 = *v64;
      uint64_t v33 = v64 + 1;
      uint64_t v14 = v64[1];
      if (v14 != *v64)
      {
        do
        {
          sub_215CEB204(v14 - 8, *(unsigned __int8 *)(v14 - 16));
          if (*(char *)(v14 - 17) < 0) {
            operator delete(*(void **)(v14 - 40));
          }
          v14 -= 40;
        }
        while (v14 != v50);
        uint64_t v14 = v50;
      }
LABEL_18:
      void *v33 = v14;
LABEL_19:
      sub_215CEB204(&v64, v63);
      uint64_t v13 = (char *)__p;
      BOOL v12 = v66;
      if (__p == v66)
      {
        int v3 = v62;
        break;
      }
    }
  }
  switch(v3)
  {
    case 0:
      uint64_t v51 = *a1;
      v52 = (void **)**a1;
      if (!v52) {
        goto LABEL_94;
      }
      v53 = (void **)v51[1];
      v54 = **a1;
      if (v53 != v52)
      {
        do
        {
          sub_215CEB204(v53 - 1, *((unsigned __int8 *)v53 - 16));
          if (*((char *)v53 - 17) < 0) {
            operator delete(*(v53 - 5));
          }
          v53 -= 5;
        }
        while (v53 != v52);
        v54 = *v51;
      }
      v51[1] = v52;
      break;
    case 1:
      uint64_t v51 = *a1;
      v55 = (char *)**a1;
      if (!v55) {
        goto LABEL_94;
      }
      v56 = (char *)v51[1];
      v54 = **a1;
      if (v56 != v55)
      {
        uint64_t v57 = v56 - 8;
        do
        {
          v58 = v57 - 8;
          sub_215CEB204(v57, *(v57 - 8));
          v57 -= 16;
        }
        while (v58 != v55);
        v54 = *v51;
      }
      v51[1] = v55;
      break;
    case 2:
      uint64_t v51 = *a1;
      if ((*((char *)*a1 + 23) & 0x80000000) == 0) {
        goto LABEL_94;
      }
      v54 = *v51;
      break;
    case 7:
      uint64_t v51 = *a1;
      v54 = **a1;
      if (!v54) {
        goto LABEL_94;
      }
      v51[1] = v54;
      break;
    default:
      goto LABEL_95;
  }
  operator delete(v54);
  uint64_t v51 = *a1;
LABEL_94:
  operator delete(v51);
  uint64_t v13 = (char *)__p;
LABEL_95:
  if (v13)
  {
    v59 = v13;
    if (v66 != v13)
    {
      v60 = v66 - 8;
      do
      {
        v61 = v60 - 8;
        sub_215CEB204(v60, *(v60 - 8));
        v60 -= 16;
      }
      while (v61 != v13);
      v59 = __p;
    }
    v66 = v13;
    operator delete(v59);
  }
}

void sub_215CEB864(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(char **)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) {
    return;
  }
  if (a2 >> 60) {
    sub_215CEA45C();
  }
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = 16 * a2;
  BOOL v6 = (char *)operator new(16 * a2);
  unint64_t v7 = &v6[v5];
  char v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v9 = &v6[v4 - v2];
  do
  {
    char v10 = *(v4 - 16);
    v4 -= 16;
    *(v9 - 16) = v10;
    v9 -= 16;
    *((void *)v9 + 1) = *((void *)v4 + 1);
    char *v4 = 0;
    *((void *)v4 + 1) = 0;
  }
  while (v4 != v2);
  uint64_t v2 = *(char **)a1;
  uint64_t v11 = *(char **)(a1 + 8);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v11 != v2)
  {
    BOOL v12 = v11 - 8;
    do
    {
      uint64_t v13 = v12 - 8;
      sub_215CEB204(v12, *(v12 - 8));
      v12 -= 16;
    }
    while (v13 != v2);
  }
  if (v2)
  {
LABEL_10:
    operator delete(v2);
  }
}

char *sub_215CEB95C(void **a1, char *a2)
{
  uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    sub_215CEA45C();
  }
  uint64_t v5 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v5 >> 3 > v4) {
    unint64_t v4 = v5 >> 3;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 60) {
    sub_215738AD8();
  }
  uint64_t v9 = 16 * v7;
  char v10 = (char *)operator new(16 * v7);
  uint64_t v11 = &v10[16 * v3];
  BOOL v12 = &v10[v9];
  char *v11 = *a2;
  *((void *)v11 + 1) = *((void *)a2 + 1);
  *a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v13 = v11 + 16;
  uint64_t v14 = (char *)*a1;
  unsigned int v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v15) {
      return v13;
    }
    goto LABEL_13;
  }
  do
  {
    char v16 = *(v15 - 16);
    v15 -= 16;
    *(v11 - 16) = v16;
    v11 -= 16;
    *((void *)v11 + 1) = *((void *)v15 + 1);
    *unsigned int v15 = 0;
    *((void *)v15 + 1) = 0;
  }
  while (v15 != v14);
  unsigned int v15 = (char *)*a1;
  char v17 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v13;
  a1[2] = v12;
  if (v17 != v15)
  {
    uint64_t v18 = v17 - 8;
    do
    {
      uint64_t v19 = v18 - 8;
      sub_215CEB204(v18, *(v18 - 8));
      v18 -= 16;
    }
    while (v19 != v15);
  }
  if (v15) {
LABEL_13:
  }
    operator delete(v15);
  return v13;
}

uint64_t sub_215CEBA88(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = (std::__shared_weak_count *)a1[1];
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *a2;
  BOOL v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = sub_215CE9390(v3, v5);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (!v9 || atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v7;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return v7;
}

void sub_215CEBB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void *sub_215CEBBB0(void *a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 0:
      uint64_t v3 = "unknown";
      uint64_t v4 = 7;
      goto LABEL_5;
    case 1:
      uint64_t v3 = "per-vertex";
      uint64_t v4 = 10;
      goto LABEL_5;
    case 2:
      uint64_t v3 = "per-face";
      uint64_t v4 = 8;
LABEL_5:
      sub_215731D94(a1, (uint64_t)v3, v4);
      break;
    case 3:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Mesh/src/TriMesh.cpp", 46, (uint64_t)"", 0, (uint64_t)"Unsupported type", 16, (void (*)(void **))sub_215E1ABD8);
      abort();
    default:
      return a1;
  }
  return a1;
}

void sub_215CEBC88()
{
}

void sub_215CEC204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *a16)
{
  if (*(char *)(v16 - 81) < 0) {
    operator delete(*(void **)(v16 - 104));
  }
  sub_215B0E8FC(a16);
  _Unwind_Resume(a1);
}

void sub_215CEC22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_2157352DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215CEC268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_215CEDA04((uint64_t *)(v10 - 104));
  sub_215B0E8FC(a9);
  sub_2157352DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215CEC28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_215B0E8FC(a9);
  sub_2157352DC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215CEC2A8(uint64_t result, uint64_t a2)
{
  if (a2 == 1)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    uint64_t v2 = 0x100000000;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0x100000000;
    *(void *)(result + 32) = 0;
    *(void *)(result + 40) = 0;
    *(void *)(result + 48) = 0;
    *(void *)(result + 56) = 0x100000000;
    *(_DWORD *)(result + 64) = 0;
    *(void *)(result + 72) = 0;
    *(void *)(result + 80) = 0;
    *(void *)(result + 88) = 0;
    *(void *)(result + 96) = 0x100000000;
    *(_DWORD *)(result + 104) = 0;
    *(void *)(result + 112) = 0;
    *(void *)(result + 120) = 0;
    *(void *)(result + 128) = 0;
    *(void *)(result + 136) = 0x100000000;
    *(void *)(result + 144) = 0;
    *(void *)(result + 152) = 0;
    *(void *)(result + 160) = 0;
    *(void *)(result + 168) = 0x100000000;
    *(void *)(result + 176) = 0;
    *(void *)(result + 184) = 0;
    *(void *)(result + 192) = 0;
    *(void *)(result + 200) = 0x100000000;
    *(void *)(result + 208) = 0;
    *(void *)(result + 216) = 0;
    *(void *)(result + 224) = 0;
    *(void *)(result + 232) = 0x100000000;
    *(void *)(result + 240) = 0;
    *(void *)(result + 248) = 0;
    *(void *)(result + 256) = 0;
    *(void *)(result + 264) = 0x100000000;
    *(_DWORD *)(result + 272) = 0;
    *(void *)(result + 280) = 0;
    *(void *)(result + 288) = 0;
    *(void *)(result + 296) = 0;
    *(void *)(result + 304) = 0x100000000;
  }
  else
  {
    if (a2 == 2)
    {
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Mesh/include/Kit/Mesh/TriMeshAllocator.h", 151, (uint64_t)"", 0, (uint64_t)"Invalid mode", 12, (void (*)(void **))sub_215E1ABD8);
      abort();
    }
    uint64_t v2 = 0;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_DWORD *)(result + 64) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_DWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 192) = 0u;
    *(_OWORD *)(result + 208) = 0u;
    *(_OWORD *)(result + 224) = 0u;
    *(_OWORD *)(result + 240) = 0u;
    *(_OWORD *)(result + 256) = 0u;
    *(_DWORD *)(result + 272) = 0;
  }
  *(_DWORD *)(result + 312) = 0;
  *(void *)(result + 320) = 0;
  *(void *)(result + 328) = 0;
  *(void *)(result + 336) = 0;
  *(void *)(result + 344) = v2;
  *(_DWORD *)(result + 352) = 0;
  *(unsigned char *)(result + 356) = 0;
  *(unsigned char *)(result + 380) = 0;
  return result;
}

void sub_215CEC3C4(void *a1, uint64_t **a2)
{
  sub_215731D94(a1, (uint64_t)"TriMeshData{\n", 13);
  uint64_t v4 = sub_215731D94(a1, (uint64_t)"vertices={", 10);
  LODWORD(v22) = 0;
  sub_215CEDA54((uint64_t)&v21, a2);
  if (v22 != -1)
  {
    uint64_t v16 = v17;
    ((void (*)(void **__return_ptr, void **, uint64_t *))off_26C681EF8[v22])(&__p, &v16, &v21);
    if (v22 != -1) {
      ((void (*)(void **, uint64_t *))off_26C681EE0[v22])(&v16, &v21);
    }
    if ((v20 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v20 & 0x80u) == 0) {
      uint64_t v6 = v20;
    }
    else {
      uint64_t v6 = v19;
    }
    uint64_t v7 = sub_215731D94(v4, (uint64_t)p_p, v6);
    sub_215731D94(v7, (uint64_t)"}\n", 2);
    if ((char)v20 < 0) {
      operator delete(__p);
    }
    char v8 = sub_215731D94(a1, (uint64_t)"faces={", 7);
    LODWORD(v22) = 0;
    sub_215CEDD0C((uint64_t)&v21, a2 + 14);
    if (v22 != -1)
    {
      uint64_t v16 = v17;
      ((void (*)(void **__return_ptr, void **, uint64_t *))off_26C681EF8[v22])(&__p, &v16, &v21);
      if (v22 != -1) {
        ((void (*)(void **, uint64_t *))off_26C681EE0[v22])(&v16, &v21);
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v9 = &__p;
      }
      else {
        uint64_t v9 = __p;
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v10 = v20;
      }
      else {
        uint64_t v10 = v19;
      }
      uint64_t v11 = sub_215731D94(v8, (uint64_t)v9, v10);
      sub_215731D94(v11, (uint64_t)"}\n", 2);
      if ((char)v20 < 0) {
        operator delete(__p);
      }
      BOOL v12 = sub_215731D94(a1, (uint64_t)"normals={", 9);
      LODWORD(v22) = 0;
      sub_215CEDA54((uint64_t)&v21, a2 + 9);
      if (v22 != -1)
      {
        uint64_t v16 = v17;
        ((void (*)(void **__return_ptr, void **, uint64_t *))off_26C681EF8[v22])(&__p, &v16, &v21);
        if (v22 != -1) {
          ((void (*)(void **, uint64_t *))off_26C681EE0[v22])(&v16, &v21);
        }
        if ((v20 & 0x80u) == 0) {
          uint64_t v13 = &__p;
        }
        else {
          uint64_t v13 = __p;
        }
        if ((v20 & 0x80u) == 0) {
          uint64_t v14 = v20;
        }
        else {
          uint64_t v14 = v19;
        }
        unsigned int v15 = sub_215731D94(v12, (uint64_t)v13, v14);
        sub_215731D94(v15, (uint64_t)"}\n", 2);
        if ((char)v20 < 0) {
          operator delete(__p);
        }
        sub_215731D94(a1, (uint64_t)"normals_type=", 13);
        sub_215CED698();
      }
      sub_215742D4C();
    }
    sub_215742D4C();
  }
  sub_215742D4C();
}

void sub_215CED434(_Unwind_Exception *a1)
{
  sub_215742CF0(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_215CED448(_Unwind_Exception *a1)
{
  sub_215742CF0(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_215CED45C(_Unwind_Exception *a1)
{
  sub_215742CF0(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_215CED470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a31 < 0)
  {
    operator delete(__p);
    sub_215742CF0((uint64_t)&a19);
    _Unwind_Resume(a1);
  }
  sub_215742CF0((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_215CED698()
{
  int v0 = 0;
  operator new();
}

void sub_215CED964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x2166C4D20](v2, 0x10B2C40EED050F3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215CED990(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215CED9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_215742CF0((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_215742CF0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_215CEDA04(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 55) < 0) {
      operator delete(*(void **)(v2 + 32));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_215CEDA54(uint64_t a1, uint64_t **a2)
{
  if ((char *)a2[1] - (char *)*a2 <= 11)
  {
    uint64_t v24 = a1;
    BOOL v25 = "{}";
    uint64_t v26 = a1;
    char v27 = "{}";
    char v28 = "{}";
    uint64_t v3 = *(unsigned int *)(a1 + 24);
    if (v3 != -1)
    {
      uint64_t v18 = (uint64_t)&v24;
      return ((uint64_t (*)(uint64_t *, uint64_t))off_26C681F10[v3])(&v18, a1);
    }
LABEL_18:
    sub_215742D4C();
  }
  uint64_t v24 = a1;
  BOOL v25 = "{";
  uint64_t v26 = a1;
  char v27 = "{";
  char v28 = "{";
  uint64_t v5 = *(unsigned int *)(a1 + 24);
  if (v5 == -1) {
    goto LABEL_18;
  }
  uint64_t v18 = (uint64_t)&v24;
  ((void (*)(uint64_t *, uint64_t))off_26C681F28[v5])(&v18, a1);
  uint64_t v7 = *a2;
  uint64_t v8 = **a2;
  int v23 = *((_DWORD *)*a2 + 2);
  uint64_t v22 = v8;
  uint64_t v18 = 0x100000003;
  int v19 = 3;
  unsigned __int8 v20 = &v22;
  int v21 = 0;
  sub_215D25F20((unsigned int *)&v18, __p);
  uint64_t v24 = a1;
  BOOL v25 = (const char *)__p;
  uint64_t v26 = a1;
  char v27 = (const char *)__p;
  char v28 = (const char *)__p;
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  if (v9 == -1) {
    sub_215742D4C();
  }
  uint64_t v29 = &v24;
  ((void (*)(uint64_t **, uint64_t))off_26C681EC8[v9])(&v29, a1);
  if (v17 < 0)
  {
    operator delete(__p[0]);
    uint64_t v10 = a2[1];
    uint64_t v11 = (uint64_t *)((char *)v7 + 12);
    if (v11 != v10)
    {
LABEL_12:
      do
      {
        uint64_t v24 = a1;
        BOOL v25 = ",";
        uint64_t v26 = a1;
        char v27 = ",";
        char v28 = ",";
        uint64_t v12 = *(unsigned int *)(a1 + 24);
        if (v12 == -1) {
          goto LABEL_18;
        }
        uint64_t v18 = (uint64_t)&v24;
        ((void (*)(uint64_t *, uint64_t))off_26C681F28[v12])(&v18, a1);
        uint64_t v13 = *v11;
        int v23 = *((_DWORD *)v11 + 2);
        uint64_t v22 = v13;
        uint64_t v18 = 0x100000003;
        int v19 = 3;
        unsigned __int8 v20 = &v22;
        int v21 = 0;
        sub_215D25F20((unsigned int *)&v18, __p);
        uint64_t v24 = a1;
        BOOL v25 = (const char *)__p;
        uint64_t v26 = a1;
        char v27 = (const char *)__p;
        char v28 = (const char *)__p;
        uint64_t v14 = *(unsigned int *)(a1 + 24);
        if (v14 == -1) {
          sub_215742D4C();
        }
        uint64_t v29 = &v24;
        ((void (*)(uint64_t **, uint64_t))off_26C681EC8[v14])(&v29, a1);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v11 = (uint64_t *)((char *)v11 + 12);
      }
      while (v11 != v10);
    }
  }
  else
  {
    uint64_t v10 = a2[1];
    uint64_t v11 = (uint64_t *)((char *)v7 + 12);
    if (v11 != v10) {
      goto LABEL_12;
    }
  }
  uint64_t v24 = a1;
  BOOL v25 = "}";
  uint64_t v26 = a1;
  char v27 = "}";
  char v28 = "}";
  uint64_t v15 = *(unsigned int *)(a1 + 24);
  if (v15 == -1) {
    goto LABEL_18;
  }
  uint64_t v18 = (uint64_t)&v24;
  return ((uint64_t (*)(uint64_t *, uint64_t))off_26C681F28[v15])(&v18, a1);
}

void sub_215CEDCE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215CEDD0C(uint64_t a1, uint64_t **a2)
{
  if ((char *)a2[1] - (char *)*a2 <= 11)
  {
    uint64_t v24 = a1;
    BOOL v25 = "{}";
    uint64_t v26 = a1;
    char v27 = "{}";
    char v28 = "{}";
    uint64_t v3 = *(unsigned int *)(a1 + 24);
    if (v3 != -1)
    {
      uint64_t v18 = (uint64_t)&v24;
      return ((uint64_t (*)(uint64_t *, uint64_t))off_26C681F10[v3])(&v18, a1);
    }
LABEL_18:
    sub_215742D4C();
  }
  uint64_t v24 = a1;
  BOOL v25 = "{";
  uint64_t v26 = a1;
  char v27 = "{";
  char v28 = "{";
  uint64_t v5 = *(unsigned int *)(a1 + 24);
  if (v5 == -1) {
    goto LABEL_18;
  }
  uint64_t v18 = (uint64_t)&v24;
  ((void (*)(uint64_t *, uint64_t))off_26C681F28[v5])(&v18, a1);
  uint64_t v7 = *a2;
  uint64_t v8 = **a2;
  int v23 = *((_DWORD *)*a2 + 2);
  uint64_t v22 = v8;
  uint64_t v18 = 0x100000003;
  int v19 = 3;
  unsigned __int8 v20 = &v22;
  int v21 = 0;
  sub_215D25B64((unsigned int *)&v18, __p);
  uint64_t v24 = a1;
  BOOL v25 = (const char *)__p;
  uint64_t v26 = a1;
  char v27 = (const char *)__p;
  char v28 = (const char *)__p;
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  if (v9 == -1) {
    sub_215742D4C();
  }
  uint64_t v29 = &v24;
  ((void (*)(uint64_t **, uint64_t))off_26C681EC8[v9])(&v29, a1);
  if (v17 < 0)
  {
    operator delete(__p[0]);
    uint64_t v10 = a2[1];
    uint64_t v11 = (uint64_t *)((char *)v7 + 12);
    if (v11 != v10)
    {
LABEL_12:
      do
      {
        uint64_t v24 = a1;
        BOOL v25 = ",";
        uint64_t v26 = a1;
        char v27 = ",";
        char v28 = ",";
        uint64_t v12 = *(unsigned int *)(a1 + 24);
        if (v12 == -1) {
          goto LABEL_18;
        }
        uint64_t v18 = (uint64_t)&v24;
        ((void (*)(uint64_t *, uint64_t))off_26C681F28[v12])(&v18, a1);
        uint64_t v13 = *v11;
        int v23 = *((_DWORD *)v11 + 2);
        uint64_t v22 = v13;
        uint64_t v18 = 0x100000003;
        int v19 = 3;
        unsigned __int8 v20 = &v22;
        int v21 = 0;
        sub_215D25B64((unsigned int *)&v18, __p);
        uint64_t v24 = a1;
        BOOL v25 = (const char *)__p;
        uint64_t v26 = a1;
        char v27 = (const char *)__p;
        char v28 = (const char *)__p;
        uint64_t v14 = *(unsigned int *)(a1 + 24);
        if (v14 == -1) {
          sub_215742D4C();
        }
        uint64_t v29 = &v24;
        ((void (*)(uint64_t **, uint64_t))off_26C681EC8[v14])(&v29, a1);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v11 = (uint64_t *)((char *)v11 + 12);
      }
      while (v11 != v10);
    }
  }
  else
  {
    uint64_t v10 = a2[1];
    uint64_t v11 = (uint64_t *)((char *)v7 + 12);
    if (v11 != v10) {
      goto LABEL_12;
    }
  }
  uint64_t v24 = a1;
  BOOL v25 = "}";
  uint64_t v26 = a1;
  char v27 = "}";
  char v28 = "}";
  uint64_t v15 = *(unsigned int *)(a1 + 24);
  if (v15 == -1) {
    goto LABEL_18;
  }
  uint64_t v18 = (uint64_t)&v24;
  return ((uint64_t (*)(uint64_t *, uint64_t))off_26C681F28[v15])(&v18, a1);
}

void sub_215CEDFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215CEDFC4(uint64_t a1, unsigned __int8 **a2)
{
  if (a2[1] - *a2 <= 0)
  {
    uint64_t v15 = a1;
    uint64_t v16 = (std::string *)"{}";
    uint64_t v17 = a1;
    uint64_t v18 = (std::string *)"{}";
    int v19 = (std::string *)"{}";
    uint64_t v9 = *(unsigned int *)(a1 + 24);
    if (v9 != -1)
    {
      v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
      return ((uint64_t (*)(std::string *, uint64_t))off_26C681F10[v9])(&v14, a1);
    }
    goto LABEL_19;
  }
  uint64_t v15 = a1;
  uint64_t v16 = (std::string *)"{";
  uint64_t v17 = a1;
  uint64_t v18 = (std::string *)"{";
  int v19 = (std::string *)"{";
  uint64_t v3 = *(unsigned int *)(a1 + 24);
  if (v3 == -1) {
    goto LABEL_19;
  }
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  ((void (*)(std::string *, uint64_t))off_26C681F28[v3])(&v14, a1);
  uint64_t v5 = (uint64_t)*a2;
  std::to_string(&v14, **a2);
  uint64_t v15 = a1;
  uint64_t v16 = &v14;
  uint64_t v17 = a1;
  uint64_t v18 = &v14;
  int v19 = &v14;
  uint64_t v6 = *(unsigned int *)(a1 + 24);
  if (v6 == -1) {
    sub_215742D4C();
  }
  unsigned __int8 v20 = &v15;
  ((void (*)(uint64_t **, uint64_t))off_26C681EC8[v6])(&v20, a1);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    uint64_t v7 = a2[1];
    uint64_t v8 = (unsigned __int8 *)(v5 + 1);
    if (v8 == v7) {
      goto LABEL_16;
    }
LABEL_12:
    while (1)
    {
      uint64_t v15 = a1;
      uint64_t v16 = (std::string *)",";
      uint64_t v17 = a1;
      uint64_t v18 = (std::string *)",";
      int v19 = (std::string *)",";
      uint64_t v11 = *(unsigned int *)(a1 + 24);
      if (v11 == -1) {
        break;
      }
      v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
      ((void (*)(std::string *, uint64_t))off_26C681F28[v11])(&v14, a1);
      std::to_string(&v14, *v8);
      uint64_t v15 = a1;
      uint64_t v16 = &v14;
      uint64_t v17 = a1;
      uint64_t v18 = &v14;
      int v19 = &v14;
      uint64_t v12 = *(unsigned int *)(a1 + 24);
      if (v12 == -1) {
        sub_215742D4C();
      }
      unsigned __int8 v20 = &v15;
      ((void (*)(uint64_t **, uint64_t))off_26C681EC8[v12])(&v20, a1);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
      if (++v8 == v7) {
        goto LABEL_16;
      }
    }
LABEL_19:
    sub_215742D4C();
  }
  uint64_t v7 = a2[1];
  uint64_t v8 = (unsigned __int8 *)(v5 + 1);
  if (v8 != v7) {
    goto LABEL_12;
  }
LABEL_16:
  uint64_t v15 = a1;
  uint64_t v16 = (std::string *)"}";
  uint64_t v17 = a1;
  uint64_t v18 = (std::string *)"}";
  int v19 = (std::string *)"}";
  uint64_t v13 = *(unsigned int *)(a1 + 24);
  if (v13 == -1) {
    goto LABEL_19;
  }
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  return ((uint64_t (*)(std::string *, uint64_t))off_26C681F28[v13])(&v14, a1);
}

void sub_215CEE1F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215CEE214(uint64_t a1, uint64_t *a2)
{
  if (!*(unsigned char *)a1)
  {
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v16 = (void **)",";
    uint64_t v17 = v15;
    uint64_t v18 = (void **)",";
    int v19 = (void **)",";
    uint64_t v4 = *(unsigned int *)(v15 + 24);
    if (v4 == -1) {
      sub_215742D4C();
    }
    uint64_t v9 = (uint64_t)&v15;
    ((void (*)(uint64_t *))off_26C681F28[v4])(&v9);
  }
  *(unsigned char *)a1 = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v13 = *a2;
  int v14 = *((_DWORD *)a2 + 2);
  uint64_t v9 = 0x100000003;
  int v10 = 3;
  uint64_t v11 = &v13;
  int v12 = 0;
  sub_215D25F20((unsigned int *)&v9, __p);
  uint64_t v15 = v5;
  uint64_t v16 = __p;
  uint64_t v17 = v5;
  uint64_t v18 = __p;
  int v19 = __p;
  uint64_t v6 = *(unsigned int *)(v5 + 24);
  if (v6 == -1) {
    sub_215742D4C();
  }
  unsigned __int8 v20 = &v15;
  ((void (*)(uint64_t **, uint64_t))off_26C681EC8[v6])(&v20, v5);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_215CEE334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_215CEE350(unint64_t result)
{
  if (result >= 2)
  {
    sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Mesh/src/TriMeshAllocator.cpp", 42, (uint64_t)"", 0, (uint64_t)"unknown allocator mode", 22, (void (*)(void **))sub_215E1ABD8);
    abort();
  }
  return result;
}

const char *sub_215CEE3A8()
{
  return "Mesh IO";
}

double sub_215CEE3B4@<D0>(int a1@<W1>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 0:
      *(unsigned char *)(a2 + 23) = 8;
      strcpy((char *)a2, "no error");
      break;
    case 1:
      *(unsigned char *)(a2 + 23) = 21;
      double result = *(double *)"failed to open stream";
      strcpy((char *)a2, "failed to open stream");
      break;
    case 2:
      *(unsigned char *)(a2 + 23) = 14;
      strcpy((char *)a2, "index overflow");
      break;
    case 3:
      *(unsigned char *)(a2 + 23) = 18;
      double result = *(double *)"unsupported format";
      strcpy((char *)a2, "unsupported format");
      break;
    case 4:
      uint64_t v4 = (char *)operator new(0x20uLL);
      *(void *)a2 = v4;
      *(_OWORD *)(a2 + 8) = xmmword_215E9AD40;
      strcpy(v4, "failed to read from stream");
      double result = *(double *)"read from stream";
      break;
    case 5:
      uint64_t v5 = (char *)operator new(0x20uLL);
      *(void *)a2 = v5;
      *(_OWORD *)(a2 + 8) = xmmword_215ECEB10;
      strcpy(v5, "failed to write to stream");
      double result = *(double *)" write to stream";
      break;
    default:
      *(unsigned char *)(a2 + 23) = 18;
      double result = *(double *)"unknown error code";
      strcpy((char *)a2, "unknown error code");
      break;
  }
  return result;
}

uint64_t sub_215CEE578(unsigned __int8 *a1)
{
  uint64_t v1 = a1;
  int v2 = (char)a1[23];
  uint64_t v3 = *(unsigned __int8 **)a1;
  if (v2 >= 0) {
    std::string::size_type v4 = a1[23];
  }
  else {
    std::string::size_type v4 = *((void *)a1 + 1);
  }
  memset(&v10, 0, sizeof(v10));
  std::string::reserve(&v10, v4);
  if (v2 < 0) {
    uint64_t v1 = v3;
  }
  for (; v4; --v4)
  {
    std::string::value_type v5 = __tolower(*v1);
    std::string::push_back(&v10, v5);
    ++v1;
  }
  std::string::size_type size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v10.__r_.__value_.__l.__size_;
  }
  if (size != 4) {
    goto LABEL_14;
  }
  uint64_t v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = &v10;
  }
  if (LODWORD(v7->__r_.__value_.__l.__data_) == 1784835886)
  {
    uint64_t v8 = 0x100000000;
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v8;
    }
  }
  else
  {
LABEL_14:
    uint64_t v8 = 0;
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v8;
    }
  }
  operator delete(v10.__r_.__value_.__l.__data_);
  return v8;
}

void sub_215CEE670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215CEE690(uint64_t a1, unsigned int a2)
{
  if (a2 > 1)
  {
    sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Mesh/src/TriMeshIO.cpp", 110, (uint64_t)"", 0, (uint64_t)"format not implemented", 22, (void (*)(void **))sub_215E1ABD8);
    abort();
  }
  if (a2 == 1)
  {
    if (*(void *)(a1 + 32) != *(void *)(a1 + 40) || *(_DWORD *)(a1 + 104) > 1u) {
      return 0;
    }
  }
  else if (*(_DWORD *)(a1 + 104) > 1u)
  {
    return 0;
  }
  if (*(_DWORD *)(a1 + 64) > 1u) {
    return 0;
  }
  if (*(void *)(a1 + 144) == *(void *)(a1 + 152)
    && *(void *)(a1 + 176) == *(void *)(a1 + 184)
    && *(void *)(a1 + 208) == *(void *)(a1 + 216)
    && *(void *)(a1 + 240) == *(void *)(a1 + 248)
    && *(void *)(a1 + 280) == *(void *)(a1 + 288)
    && *(void *)(a1 + 320) == *(void *)(a1 + 328)
    && !*(unsigned char *)(a1 + 380))
  {
    return 2;
  }
  return 1;
}

void sub_215CEE79C(uint64_t a1, unsigned int a2, long long *a3)
{
  v39[2] = *MEMORY[0x263EF8340];
  sub_215741BFC(__dst, a3);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890448, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267890448))
  {
    __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_26ACF2428, &dword_21572C000);
    __cxa_guard_release(&qword_267890448);
  }
  sub_215741BFC(&__p, (long long *)__dst);
  uint64_t v9 = a2;
  if (!v36)
  {
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = &off_26ACF2428;
    *(unsigned char *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 112) = 0;
    goto LABEL_19;
  }
  int v10 = v29;
  if (v29)
  {
    uint64_t v11 = __p;
    v39[0] = v28;
    *(void *)((char *)v39 + 7) = *(void *)((char *)&v28 + 7);
    LOBYTE(a2) = HIBYTE(v28);
    long long v28 = 0uLL;
    __p = 0;
    int v12 = v35;
    if (v35) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v11 = 0;
    int v12 = v35;
    if (v35)
    {
LABEL_5:
      uint64_t v13 = v30;
      v38[0] = v31;
      *(void *)((char *)v38 + 7) = *(void *)((char *)&v31 + 7);
      char v6 = HIBYTE(v31);
      uint64_t v30 = 0;
      long long v31 = 0uLL;
      uint64_t v5 = v32;
      uint64_t v3 = v33;
      v37[0] = v34;
      *(void *)((char *)v37 + 7) = *(void *)((char *)&v34 + 7);
      char v4 = HIBYTE(v34);
      uint64_t v33 = 0;
      long long v34 = 0uLL;
      if (!v29) {
        goto LABEL_12;
      }
      goto LABEL_10;
    }
  }
  uint64_t v13 = 0;
  if (!v29) {
    goto LABEL_12;
  }
LABEL_10:
  if (SHIBYTE(v28) < 0)
  {
    uint64_t v17 = v9;
    operator delete(__p);
    *(void *)a1 = v17;
    *(void *)(a1 + 8) = &off_26ACF2428;
    *(unsigned char *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 112) = 0;
    int v14 = (unsigned char *)(a1 + 112);
    *(unsigned char *)(a1 + 40) = 0;
LABEL_13:
    uint64_t v15 = v39[0];
    *(void *)(a1 + 16) = v11;
    *(void *)(a1 + 24) = v15;
    *(void *)(a1 + 31) = *(void *)((char *)v39 + 7);
    *(unsigned char *)(a1 + 39) = a2;
    v39[0] = 0;
    *(void *)((char *)v39 + 7) = 0;
    *(unsigned char *)(a1 + 40) = 1;
    LOBYTE(a2) = 0;
    uint64_t v11 = 0;
    goto LABEL_14;
  }
LABEL_12:
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = &off_26ACF2428;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  int v14 = (unsigned char *)(a1 + 112);
  *(unsigned char *)(a1 + 40) = 0;
  if (v10) {
    goto LABEL_13;
  }
LABEL_14:
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  if (v12)
  {
    uint64_t v16 = v38[0];
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = v16;
    *(void *)(a1 + 63) = *(void *)((char *)v38 + 7);
    *(unsigned char *)(a1 + 71) = v6;
    v38[0] = 0;
    *(void *)((char *)v38 + 7) = 0;
    *(void *)(a1 + 72) = v5;
    *(void *)(a1 + 80) = v3;
    *(void *)(a1 + 88) = v37[0];
    *(void *)(a1 + 95) = *(void *)((char *)v37 + 7);
    *(unsigned char *)(a1 + 103) = v4;
    v37[0] = 0;
    *(void *)((char *)v37 + 7) = 0;
    *(unsigned char *)(a1 + 104) = 1;
  }
  unsigned char *v14 = 1;
  if (v10 && (a2 & 0x80) != 0) {
    operator delete(v11);
  }
LABEL_19:
  if (!v26) {
    return;
  }
  if (v25)
  {
    if ((v24 & 0x80000000) == 0)
    {
      if ((v22 & 0x80000000) == 0) {
        goto LABEL_23;
      }
LABEL_28:
      operator delete(v21);
      if (!v20) {
        return;
      }
      goto LABEL_24;
    }
    operator delete(v23);
    if (v22 < 0) {
      goto LABEL_28;
    }
  }
LABEL_23:
  if (!v20) {
    return;
  }
LABEL_24:
  if (v19 < 0) {
    operator delete(__dst[0]);
  }
}

void sub_215CEEA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21573FE74((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215CEEA90(char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = a1;
  if (a1[23] < 0)
  {
    char v6 = *(char **)a1;
    if (!*(void *)a1)
    {
      BOOL v8 = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Mesh/src/TriMeshIO.cpp", 242, (uint64_t)"filepath", 8, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
      char v6 = 0;
      if (v8) {
        abort();
      }
    }
  }
  long long v106 = 0uLL;
  v105 = &unk_26C6824A8;
  memset(&__p, 0, sizeof(__p));
  uint64_t v9 = v6 - 1;
  while (*++v9)
    ;
  sub_21577D738((unint64_t)&__p, v6, v9);
  sub_215CF5C8C(&__p, 0x30u, a3, v108);
  long long v11 = *(_OWORD *)&v108[8];
  *(void *)&v108[8] = 0;
  *(void *)&v108[16] = 0;
  int v12 = (std::__shared_weak_count *)*((void *)&v106 + 1);
  long long v106 = v11;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = *(std::__shared_weak_count **)&v108[16];
    if (!*(void *)&v108[16])
    {
LABEL_10:
      if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_11;
      }
LABEL_16:
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
      uint64_t v14 = v106;
      if (!(void)v106) {
        goto LABEL_155;
      }
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v13 = *(std::__shared_weak_count **)&v108[16];
    if (!*(void *)&v108[16]) {
      goto LABEL_10;
    }
  }
  if (atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_16;
  }
LABEL_11:
  uint64_t v14 = v106;
  if (!(void)v106)
  {
LABEL_155:
    unsigned int v86 = 1;
    v87 = (std::__shared_weak_count *)*((void *)&v106 + 1);
    if (!*((void *)&v106 + 1)) {
      goto LABEL_157;
    }
    goto LABEL_156;
  }
LABEL_17:
  uint64_t v94 = a4;
  v95 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
  if (*((_DWORD *)a2 + 26) >= 2u
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Mesh/src/TriMeshIO.cpp", 168, (uint64_t)"(mesh.normals_type == TriMeshMetadataType::PerVertex || mesh.normals_type == TriMeshMetadataType::Unknown)", 106, (uint64_t)"obj export requires per-vertex normals", 38, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_153;
  }
  if (*((_DWORD *)a2 + 16) >= 2u
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Mesh/src/TriMeshIO.cpp", 171, (uint64_t)"(mesh.colors_type == TriMeshMetadataType::PerVertex || mesh.colors_type == TriMeshMetadataType::Unknown)", 104, (uint64_t)"obj export requires per-vertex colors", 37, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_153;
  }
  uint64_t v15 = a2[5] - a2[4];
  if (v15)
  {
    if (v15 != a2[1] - *a2
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Mesh/src/TriMeshIO.cpp", 173, (uint64_t)"(mesh.colors.size() == 0 || mesh.colors.size() == mesh.vertices.size())", 71, (uint64_t)"mesh's #colors must be either zero or equal to #vertices", 56, (void (*)(void **))sub_215E1ABD8))
    {
      goto LABEL_153;
    }
  }
  if (a2[22] == a2[23])
  {
    if (a2[26] == a2[27]
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Mesh/src/TriMeshIO.cpp", 179, (uint64_t)"(mesh.tex_faces.empty())", 24, (uint64_t)"for meshes without texture coords, mesh's #tex_faces must be zero", 65, (void (*)(void **))sub_215E1ABD8))
    {
      goto LABEL_30;
    }
LABEL_153:
    abort();
  }
  if (a2[27] - a2[26] != a2[15] - a2[14]
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Mesh/src/TriMeshIO.cpp", 176, (uint64_t)"(mesh.tex_faces.size() == mesh.faces.size())", 44, (uint64_t)"for meshes with texture coords, mesh's #tex_faces must be equal to #faces", 73, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_153;
  }
LABEL_30:
  uint64_t v92 = a2[26];
  uint64_t v93 = a2[27];
  uint64_t v90 = a2[14];
  uint64_t v91 = a2[15];
  uint64_t v17 = *a2;
  uint64_t v16 = a2[1];
  uint64_t v19 = a2[4];
  uint64_t v18 = a2[5];
  sub_2157328B8((uint64_t)v108);
  *(void *)&v108[*(void *)(*(void *)&v108[16] - 24) + 32] = 8;
  if (v16 - v17 == v18 - v19)
  {
    if (a2[1] != *a2)
    {
      uint64_t v20 = 0;
      unint64_t v21 = 0;
      do
      {
        sub_215731D94(&v108[16], (uint64_t)"v ", 2);
        char v22 = (void *)std::ostream::operator<<();
        sub_215731D94(v22, (uint64_t)" ", 1);
        int v23 = (void *)std::ostream::operator<<();
        sub_215731D94(v23, (uint64_t)" ", 1);
        char v24 = (void *)std::ostream::operator<<();
        sub_215731D94(v24, (uint64_t)" ", 1);
        char v25 = (void *)std::ostream::operator<<();
        sub_215731D94(v25, (uint64_t)" ", 1);
        char v26 = (void *)std::ostream::operator<<();
        sub_215731D94(v26, (uint64_t)" ", 1);
        char v27 = (void *)std::ostream::operator<<();
        sub_215731D94(v27, (uint64_t)"\n", 1);
        ++v21;
        v20 += 12;
      }
      while (v21 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
    }
  }
  else
  {
    uint64_t v28 = *a2;
    uint64_t v29 = a2[1];
    if (*a2 != v29)
    {
      do
      {
        sub_215731D94(&v108[16], (uint64_t)"v ", 2);
        uint64_t v30 = (void *)std::ostream::operator<<();
        sub_215731D94(v30, (uint64_t)" ", 1);
        long long v31 = (void *)std::ostream::operator<<();
        sub_215731D94(v31, (uint64_t)" ", 1);
        uint64_t v32 = (void *)std::ostream::operator<<();
        sub_215731D94(v32, (uint64_t)"\n", 1);
        v28 += 12;
      }
      while (v28 != v29);
    }
  }
  if ((v118 & 0x10) != 0)
  {
    unint64_t v35 = v117;
    if (v117 < v113)
    {
      unint64_t v117 = v113;
      unint64_t v35 = v113;
    }
    char v36 = v112;
    std::string::size_type v33 = v35 - (void)v112;
    if (v35 - (unint64_t)v112 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_146;
    }
  }
  else
  {
    if ((v118 & 8) == 0)
    {
      std::string::size_type v33 = 0;
      *((unsigned char *)&__p.__pn_.__r_.__value_.__s + 23) = 0;
      p_p = &__p;
      goto LABEL_50;
    }
    char v36 = v110;
    std::string::size_type v33 = *((void *)&v111 + 1) - (void)v110;
    if (*((void *)&v111 + 1) - (void)v110 > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_146:
    }
      sub_215731CD8();
  }
  if (v33 >= 0x17)
  {
    uint64_t v37 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17) {
      uint64_t v37 = v33 | 7;
    }
    uint64_t v38 = v37 + 1;
    p_p = (std::__fs::filesystem::path *)operator new(v37 + 1);
    __p.__pn_.__r_.__value_.__l.__size_ = v33;
    __p.__pn_.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
    __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_49;
  }
  *((unsigned char *)&__p.__pn_.__r_.__value_.__s + 23) = v33;
  p_p = &__p;
  if (v33) {
LABEL_49:
  }
    memmove(p_p, v36, v33);
LABEL_50:
  p_p->__pn_.__r_.__value_.__s.__data_[v33] = 0;
  if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v39 = &__p;
  }
  else {
    uint64_t v39 = (std::__fs::filesystem::path *)__p.__pn_.__r_.__value_.__r.__words[0];
  }
  if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__pn_.__r_.__value_.__l.__size_;
  }
  sub_215731D94(v95, (uint64_t)v39, size);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v116) & 0x80000000) == 0) {
      goto LABEL_58;
    }
  }
  else if ((SHIBYTE(v116) & 0x80000000) == 0)
  {
    goto LABEL_58;
  }
  operator delete(*((void **)&v114 + 1));
LABEL_58:
  *((void *)&v114 + 1) = 0;
  uint64_t v115 = 0;
  uint64_t v116 = 0;
  sub_21573B8E0((uint64_t)&v108[24]);
  *(void *)&v108[*(void *)(*(void *)&v108[16] - 24) + 32] = 8;
  uint64_t v41 = a2[22];
  for (uint64_t i = a2[23]; v41 != i; v41 += 8)
  {
    sub_215731D94(&v108[16], (uint64_t)"vt ", 3);
    char v43 = (void *)std::ostream::operator<<();
    sub_215731D94(v43, (uint64_t)" ", 1);
    v44 = (void *)std::ostream::operator<<();
    sub_215731D94(v44, (uint64_t)"\n", 1);
  }
  if ((v118 & 0x10) != 0)
  {
    unint64_t v47 = v117;
    if (v117 < v113)
    {
      unint64_t v117 = v113;
      unint64_t v47 = v113;
    }
    uint64_t v48 = v112;
    std::string::size_type v45 = v47 - (void)v112;
    if (v47 - (unint64_t)v112 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_148;
    }
  }
  else
  {
    if ((v118 & 8) == 0)
    {
      std::string::size_type v45 = 0;
      *((unsigned char *)&__p.__pn_.__r_.__value_.__s + 23) = 0;
      v46 = &__p;
      goto LABEL_75;
    }
    uint64_t v48 = v110;
    std::string::size_type v45 = *((void *)&v111 + 1) - (void)v110;
    if (*((void *)&v111 + 1) - (void)v110 > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_148:
    }
      sub_215731CD8();
  }
  if (v45 >= 0x17)
  {
    uint64_t v49 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v45 | 7) != 0x17) {
      uint64_t v49 = v45 | 7;
    }
    uint64_t v50 = v49 + 1;
    v46 = (std::__fs::filesystem::path *)operator new(v49 + 1);
    __p.__pn_.__r_.__value_.__l.__size_ = v45;
    __p.__pn_.__r_.__value_.__r.__words[2] = v50 | 0x8000000000000000;
    __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
    goto LABEL_74;
  }
  *((unsigned char *)&__p.__pn_.__r_.__value_.__s + 23) = v45;
  v46 = &__p;
  if (v45) {
LABEL_74:
  }
    memmove(v46, v48, v45);
LABEL_75:
  v46->__pn_.__r_.__value_.__s.__data_[v45] = 0;
  if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v51 = &__p;
  }
  else {
    uint64_t v51 = (std::__fs::filesystem::path *)__p.__pn_.__r_.__value_.__r.__words[0];
  }
  if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v52 = HIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v52 = __p.__pn_.__r_.__value_.__l.__size_;
  }
  sub_215731D94(v95, (uint64_t)v51, v52);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v116) & 0x80000000) == 0) {
      goto LABEL_83;
    }
  }
  else if ((SHIBYTE(v116) & 0x80000000) == 0)
  {
    goto LABEL_83;
  }
  operator delete(*((void **)&v114 + 1));
LABEL_83:
  *((void *)&v114 + 1) = 0;
  uint64_t v115 = 0;
  uint64_t v116 = 0;
  sub_21573B8E0((uint64_t)&v108[24]);
  *(void *)&v108[*(void *)(*(void *)&v108[16] - 24) + 32] = 8;
  uint64_t v53 = a2[9];
  for (uint64_t j = a2[10]; v53 != j; v53 += 12)
  {
    sub_215731D94(&v108[16], (uint64_t)"vn ", 3);
    v55 = (void *)std::ostream::operator<<();
    sub_215731D94(v55, (uint64_t)" ", 1);
    v56 = (void *)std::ostream::operator<<();
    sub_215731D94(v56, (uint64_t)" ", 1);
    uint64_t v57 = (void *)std::ostream::operator<<();
    sub_215731D94(v57, (uint64_t)"\n", 1);
  }
  if ((v118 & 0x10) != 0)
  {
    unint64_t v60 = v117;
    if (v117 < v113)
    {
      unint64_t v117 = v113;
      unint64_t v60 = v113;
    }
    v61 = v112;
    std::string::size_type v58 = v60 - (void)v112;
    if (v60 - (unint64_t)v112 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_150;
    }
  }
  else
  {
    if ((v118 & 8) == 0)
    {
      std::string::size_type v58 = 0;
      *((unsigned char *)&__p.__pn_.__r_.__value_.__s + 23) = 0;
      v59 = &__p;
      goto LABEL_100;
    }
    v61 = v110;
    std::string::size_type v58 = *((void *)&v111 + 1) - (void)v110;
    if (*((void *)&v111 + 1) - (void)v110 > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_150:
    }
      sub_215731CD8();
  }
  if (v58 >= 0x17)
  {
    uint64_t v62 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v58 | 7) != 0x17) {
      uint64_t v62 = v58 | 7;
    }
    uint64_t v63 = v62 + 1;
    v59 = (std::__fs::filesystem::path *)operator new(v62 + 1);
    __p.__pn_.__r_.__value_.__l.__size_ = v58;
    __p.__pn_.__r_.__value_.__r.__words[2] = v63 | 0x8000000000000000;
    __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
    goto LABEL_99;
  }
  *((unsigned char *)&__p.__pn_.__r_.__value_.__s + 23) = v58;
  v59 = &__p;
  if (v58) {
LABEL_99:
  }
    memmove(v59, v61, v58);
LABEL_100:
  v59->__pn_.__r_.__value_.__s.__data_[v58] = 0;
  if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v64 = &__p;
  }
  else {
    v64 = (std::__fs::filesystem::path *)__p.__pn_.__r_.__value_.__r.__words[0];
  }
  if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v65 = HIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v65 = __p.__pn_.__r_.__value_.__l.__size_;
  }
  sub_215731D94(v95, (uint64_t)v64, v65);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v116) & 0x80000000) == 0) {
      goto LABEL_108;
    }
  }
  else if ((SHIBYTE(v116) & 0x80000000) == 0)
  {
    goto LABEL_108;
  }
  operator delete(*((void **)&v114 + 1));
LABEL_108:
  *((void *)&v114 + 1) = 0;
  uint64_t v115 = 0;
  uint64_t v116 = 0;
  sub_21573B8E0((uint64_t)&v108[24]);
  *(void *)&v108[*(void *)(*(void *)&v108[16] - 24) + 32] = 8;
  if (a2[15] != a2[14])
  {
    if (v93 - v92 == v91 - v90)
    {
      uint64_t v66 = 0;
      unint64_t v67 = 0;
      do
      {
        sub_215731D94(&v108[16], (uint64_t)"f", 1);
        sub_215731D94(&v108[16], (uint64_t)" ", 1);
        v68 = (void *)std::ostream::operator<<();
        sub_215731D94(v68, (uint64_t)"/", 1);
        v69 = (void *)std::ostream::operator<<();
        sub_215731D94(v69, (uint64_t)"/", 1);
        std::ostream::operator<<();
        sub_215731D94(&v108[16], (uint64_t)" ", 1);
        v70 = (void *)std::ostream::operator<<();
        sub_215731D94(v70, (uint64_t)"/", 1);
        v71 = (void *)std::ostream::operator<<();
        sub_215731D94(v71, (uint64_t)"/", 1);
        std::ostream::operator<<();
        sub_215731D94(&v108[16], (uint64_t)" ", 1);
        v72 = (void *)std::ostream::operator<<();
        sub_215731D94(v72, (uint64_t)"/", 1);
        v73 = (void *)std::ostream::operator<<();
        sub_215731D94(v73, (uint64_t)"/", 1);
        std::ostream::operator<<();
        sub_215731D94(&v108[16], (uint64_t)"\n", 1);
        ++v67;
        v66 += 12;
      }
      while (v67 < 0xAAAAAAAAAAAAAAABLL * ((a2[15] - a2[14]) >> 2));
    }
    else
    {
      uint64_t v74 = 0;
      unint64_t v75 = 0;
      do
      {
        sub_215731D94(&v108[16], (uint64_t)"f", 1);
        sub_215731D94(&v108[16], (uint64_t)" ", 1);
        std::ostream::operator<<();
        sub_215731D94(&v108[16], (uint64_t)" ", 1);
        std::ostream::operator<<();
        sub_215731D94(&v108[16], (uint64_t)" ", 1);
        std::ostream::operator<<();
        sub_215731D94(&v108[16], (uint64_t)"\n", 1);
        ++v75;
        v74 += 12;
      }
      while (v75 < 0xAAAAAAAAAAAAAAABLL * ((a2[15] - a2[14]) >> 2));
    }
  }
  if ((v118 & 0x10) != 0)
  {
    unint64_t v78 = v117;
    if (v117 < v113)
    {
      unint64_t v117 = v113;
      unint64_t v78 = v113;
    }
    v79 = v112;
    std::string::size_type v76 = v78 - (void)v112;
    if (v78 - (unint64_t)v112 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_152;
    }
  }
  else
  {
    if ((v118 & 8) == 0)
    {
      std::string::size_type v76 = 0;
      *((unsigned char *)&__p.__pn_.__r_.__value_.__s + 23) = 0;
      v77 = &__p;
      goto LABEL_130;
    }
    v79 = v110;
    std::string::size_type v76 = *((void *)&v111 + 1) - (void)v110;
    if (*((void *)&v111 + 1) - (void)v110 > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_152:
    }
      sub_215731CD8();
  }
  if (v76 >= 0x17)
  {
    uint64_t v80 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v76 | 7) != 0x17) {
      uint64_t v80 = v76 | 7;
    }
    uint64_t v81 = v80 + 1;
    v77 = (std::__fs::filesystem::path *)operator new(v80 + 1);
    __p.__pn_.__r_.__value_.__l.__size_ = v76;
    __p.__pn_.__r_.__value_.__r.__words[2] = v81 | 0x8000000000000000;
    __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
    goto LABEL_129;
  }
  *((unsigned char *)&__p.__pn_.__r_.__value_.__s + 23) = v76;
  v77 = &__p;
  if (v76) {
LABEL_129:
  }
    memmove(v77, v79, v76);
LABEL_130:
  v77->__pn_.__r_.__value_.__s.__data_[v76] = 0;
  if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v82 = &__p;
  }
  else {
    v82 = (std::__fs::filesystem::path *)__p.__pn_.__r_.__value_.__r.__words[0];
  }
  if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v83 = HIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v83 = __p.__pn_.__r_.__value_.__l.__size_;
  }
  sub_215731D94(v95, (uint64_t)v82, v83);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  }
  int v84 = *(_DWORD *)((char *)v95 + *(void *)(*v95 - 24) + 32);
  *(void *)v108 = *MEMORY[0x263F8C2B8];
  uint64_t v85 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)&v108[*(void *)(*(void *)v108 - 24)] = *(void *)(MEMORY[0x263F8C2B8] + 64);
  *(void *)&v108[16] = v85;
  *(void *)&v108[24] = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v116) < 0) {
    operator delete(*((void **)&v114 + 1));
  }
  if ((v84 & 5) != 0) {
    unsigned int v86 = 5;
  }
  else {
    unsigned int v86 = 0;
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2166C4BF0](&v119);
  a4 = v94;
  v87 = (std::__shared_weak_count *)*((void *)&v106 + 1);
  if (!*((void *)&v106 + 1))
  {
LABEL_157:
    if (v86) {
      goto LABEL_158;
    }
LABEL_169:
    *(unsigned char *)(a4 + 120) = 1;
    return;
  }
LABEL_156:
  if (atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_157;
  }
  ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
  std::__shared_weak_count::__release_weak(v87);
  if (!v86) {
    goto LABEL_169;
  }
LABEL_158:
  LOBYTE(v96) = 0;
  char v104 = 0;
  sub_215CEE79C((uint64_t)v108, v86, &v96);
  *(_OWORD *)a4 = *(_OWORD *)v108;
  *(unsigned char *)(a4 + 16) = 0;
  *(unsigned char *)(a4 + 112) = 0;
  if (!(_BYTE)v117)
  {
    *(unsigned char *)(a4 + 120) = 0;
    if (!v104) {
      return;
    }
LABEL_171:
    if (!v103) {
      goto LABEL_174;
    }
    if (v102 < 0)
    {
      operator delete(v101);
      if ((v100 & 0x80000000) == 0)
      {
LABEL_174:
        if (!v98) {
          return;
        }
        goto LABEL_175;
      }
    }
    else if ((v100 & 0x80000000) == 0)
    {
      goto LABEL_174;
    }
    operator delete(v99);
    if (!v98) {
      return;
    }
LABEL_175:
    if (v97 < 0) {
      operator delete((void *)v96);
    }
    return;
  }
  *(unsigned char *)(a4 + 40) = 0;
  int v88 = v110;
  if ((_BYTE)v110)
  {
    *(_OWORD *)(a4 + 16) = *(_OWORD *)&v108[16];
    *(void *)(a4 + 32) = v109;
    *(void *)&v108[24] = 0;
    uint64_t v109 = 0;
    *(void *)&v108[16] = 0;
    *(unsigned char *)(a4 + 40) = 1;
  }
  *(unsigned char *)(a4 + 48) = 0;
  *(unsigned char *)(a4 + 104) = 0;
  if ((_BYTE)v116)
  {
    *(_OWORD *)(a4 + 48) = v111;
    unint64_t v89 = v113;
    *(void *)(a4 + 64) = v112;
    *(void *)(a4 + 72) = v89;
    *(_OWORD *)(a4 + 80) = v114;
    *(void *)(a4 + 96) = v115;
    *(unsigned char *)(a4 + 104) = 1;
  }
  *(unsigned char *)(a4 + 112) = 1;
  *(unsigned char *)(a4 + 120) = 0;
  if (v88 && SHIBYTE(v109) < 0) {
    operator delete(*(void **)&v108[16]);
  }
  if (v104) {
    goto LABEL_171;
  }
}

void sub_215CEFBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21573FE74((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215CEFBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_215CEFC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_215CEFC54(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v348 = *MEMORY[0x263EF8340];
  uint64_t v278 = a2;
  std::__fs::filesystem::path::__string_view v9 = std::__fs::filesystem::path::__extension((const std::__fs::filesystem::path *)a1);
  if (v9.__size_ > 0x7FFFFFFFFFFFFFF7) {
    sub_215731CD8();
  }
  if (v9.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v11 = (v9.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v11 = v9.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *(void *)&long long v288 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    *((void *)&__dst + 1) = v9.__size_;
    goto LABEL_8;
  }
  BYTE7(v288) = v9.__size_;
  p_dst = &__dst;
  if (v9.__size_) {
LABEL_8:
  }
    memmove(p_dst, v9.__data_, v9.__size_);
  *((unsigned char *)p_dst + v9.__size_) = 0;
  uint64_t v13 = (void *)*((void *)&__dst + 1);
  uint64_t v14 = (void *)__dst;
  LODWORD(__src[0]) = v288;
  *(_DWORD *)((char *)__src + 3) = *(_DWORD *)((char *)&v288 + 3);
  int v15 = SBYTE7(v288);
  if (SBYTE7(v288) < 0)
  {
    sub_215738B0C(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
    unsigned __int8 v17 = BYTE7(v323);
    uint64_t v16 = (void **)__p[0];
    uint64_t v13 = __p[1];
  }
  else
  {
    *(_OWORD *)std::__fs::filesystem::path __p = __dst;
    LODWORD(v323) = __src[0];
    *(_DWORD *)((char *)&v323 + 3) = *(_DWORD *)((char *)__src + 3);
    BYTE7(v323) = BYTE7(v288);
    uint64_t v16 = (void **)__dst;
    unsigned __int8 v17 = BYTE7(v288);
  }
  int v18 = (char)v17;
  if ((v17 & 0x80u) == 0) {
    std::string::size_type v19 = v17;
  }
  else {
    std::string::size_type v19 = (std::string::size_type)v13;
  }
  memset(&v277, 0, sizeof(v277));
  std::string::reserve(&v277, v19);
  if (v18 >= 0) {
    uint64_t v16 = __p;
  }
  for (; v19; --v19)
  {
    std::string::value_type v20 = __tolower(*(unsigned __int8 *)v16);
    std::string::push_back(&v277, v20);
    uint64_t v16 = (void **)((char *)v16 + 1);
  }
  if (SBYTE7(v323) < 0)
  {
    operator delete(__p[0]);
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_21;
    }
  }
  else if ((v15 & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(v14);
LABEL_21:
  std::string::size_type size = HIBYTE(v277.__r_.__value_.__r.__words[2]);
  if ((v277.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v277.__r_.__value_.__l.__size_;
  }
  if (size == 4)
  {
    char v22 = &v277;
    if ((v277.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      char v22 = (std::string *)v277.__r_.__value_.__r.__words[0];
    }
    BOOL v23 = LODWORD(v22->__r_.__value_.__l.__data_) == 1784835886;
    int v24 = BYTE4(v278);
    int v25 = v278;
    if (!BYTE4(v278)) {
      goto LABEL_31;
    }
  }
  else
  {
    BOOL v23 = 0;
    int v24 = BYTE4(v278);
    int v25 = v278;
    if (!BYTE4(v278)) {
      goto LABEL_31;
    }
  }
  if (!v25)
  {
    BOOL v26 = 1;
    goto LABEL_32;
  }
LABEL_31:
  BOOL v26 = v25 == 1;
  if (!v24)
  {
    if (!v23)
    {
      DWORD2(v323) = 0;
      sub_215AE254C(__p, "could not determine mesh format from file extension of path ");
      sub_2158B2364();
    }
    int v25 = 0;
    LODWORD(v278) = 0;
    BYTE4(v278) = 1;
    goto LABEL_43;
  }
LABEL_32:
  if (size)
  {
    if (v23 && !v26)
    {
      LODWORD(v281[0]) = 0;
      sub_21574F544(__src, "cannot load ");
      __p[0] = __src;
      __p[1] = &v277;
      *(void *)&long long v323 = __src;
      *((void *)&v323 + 1) = &v277;
      v324 = &v277;
      if (LODWORD(v281[0]) != -1)
      {
        *(void *)&long long v338 = __p;
        ((void (*)(long long *, void **))off_26C682048[LODWORD(v281[0])])(&v338, __src);
        __p[0] = __src;
        __p[1] = " file with format ";
        *(void *)&long long v323 = __src;
        *((void *)&v323 + 1) = " file with format ";
        v324 = (std::string *)" file with format ";
        if (LODWORD(v281[0]) != -1)
        {
          *(void *)&long long v338 = __p;
          ((void (*)(long long *, void **))off_26C682060[LODWORD(v281[0])])(&v338, __src);
          sub_215CF28C4();
        }
        sub_215742D4C();
      }
      sub_215742D4C();
    }
    if (!v23 && v26)
    {
      LODWORD(v281[0]) = 0;
      sub_21574F544(__src, "cannot load ");
      sub_215CF28C4();
    }
  }
LABEL_43:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a4 + 368))(&v274, a4, a1, 8);
  if (!v275)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      sub_215738B0C(__p, *(void **)a1, *(void *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)std::__fs::filesystem::path __p = *(_OWORD *)a1;
      *(void *)&long long v323 = *(void *)(a1 + 16);
    }
    if (SBYTE7(v323) < 0)
    {
      sub_215738B0C(v265, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      *(_OWORD *)v265 = *(_OWORD *)__p;
      uint64_t v266 = v323;
    }
    char v267 = 1;
    LOBYTE(v268) = 0;
    char v272 = 0;
    char v273 = 1;
    sub_215CEE79C((uint64_t)&__dst, 1u, (long long *)v265);
    *(_OWORD *)a5 = __dst;
    *(unsigned char *)(a5 + 16) = 0;
    *(unsigned char *)(a5 + 112) = 0;
    if ((_BYTE)v296)
    {
      *(unsigned char *)(a5 + 40) = 0;
      int v245 = v290;
      if ((_BYTE)v290)
      {
        *(_OWORD *)(a5 + 16) = v288;
        *(void *)(a5 + 32) = v289;
        v289 = 0;
        long long v288 = 0uLL;
        *(unsigned char *)(a5 + 40) = 1;
      }
      *(unsigned char *)(a5 + 48) = 0;
      *(unsigned char *)(a5 + 104) = 0;
      if ((_BYTE)v295)
      {
        uint64_t v246 = *(void *)v293;
        *(void *)(a5 + 64) = v292;
        *(_OWORD *)(a5 + 48) = v291;
        long long v291 = 0uLL;
        *(void *)(a5 + 72) = v246;
        *(_OWORD *)(a5 + 80) = *(_OWORD *)&v293[8];
        *(void *)(a5 + 96) = v294;
        uint64_t v292 = 0;
        *(_OWORD *)&v293[8] = 0uLL;
        uint64_t v294 = 0;
        *(unsigned char *)(a5 + 104) = 1;
      }
      *(unsigned char *)(a5 + 112) = 1;
      *(unsigned char *)(a5 + 384) = 0;
      if (v245 && SHIBYTE(v289) < 0) {
        operator delete((void *)v288);
      }
    }
    else
    {
      *(unsigned char *)(a5 + 384) = 0;
    }
    if (v273)
    {
      if (v272)
      {
        if (v271 < 0) {
          operator delete(v270);
        }
        if (v269 < 0) {
          operator delete(v268);
        }
      }
      if (v267 && SHIBYTE(v266) < 0) {
        operator delete(v265[0]);
      }
    }
    if (SBYTE7(v323) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_362;
  }
  char v27 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v275 + 16))(v275);
  sub_215CEC2A8((uint64_t)&__dst, a3);
  *((void *)&__dst + 1) = __dst;
  v290 = v289;
  *(void *)&v293[8] = *(void *)v293;
  v297 = v296;
  uint64_t v300 = v299;
  v302 = v301;
  v307 = v306;
  uint64_t v310 = v309;
  uint64_t v312 = v311;
  uint64_t v314 = v313;
  if (v315) {
    char v315 = 0;
  }
  uint64_t v28 = 0;
  __src[0] = 0;
  __src[1] = 0;
  v280 = 0;
  v281[0] = v294;
  uint64_t v29 = (std::locale::id *)MEMORY[0x263F8C108];
  long long v340 = 0uLL;
  v341 = 0;
  long long v338 = 0uLL;
  uint64_t v339 = 0;
  int8x16_t v259 = (int8x16_t)vdupq_n_s64(1uLL);
  v260 = *(void **)(MEMORY[0x263F8C2C0] + 24);
  v261 = (void *)*MEMORY[0x263F8C2C0];
  v262 = *(void **)(MEMORY[0x263F8C2C0] + 16);
  v263 = *(void **)(MEMORY[0x263F8C2C0] + 8);
  uint64_t v264 = a5;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(*v27 - 24)));
    uint64_t v30 = std::locale::use_facet((const std::locale *)__p, v29);
    unsigned __int8 v31 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale((std::locale *)__p);
    uint64_t v32 = sub_215734FB4(v27, (uint64_t)&v338, v31);
    if ((*((unsigned char *)v32 + *(void *)(*v32 - 24) + 32) & 5) != 0) {
      break;
    }
    if (SHIBYTE(v339) < 0)
    {
      if (*((void *)&v338 + 1) >= 2uLL)
      {
        std::string::size_type v33 = (long long *)v338;
        if (*(unsigned char *)v338 != 35) {
          goto LABEL_54;
        }
      }
    }
    else if (SHIBYTE(v339) >= 2 && v338 != 35)
    {
      std::string::size_type v33 = &v338;
LABEL_54:
      switch(*(_WORD *)v33)
      {
        case 0x2076:
          if (v339 >= 0) {
            uint64_t v38 = (const char *)&v338;
          }
          else {
            uint64_t v38 = (const char *)v338;
          }
          int v39 = sscanf(v38 + 2, "%f %f %f %f %f %f", &v333, (char *)&v333 + 4, &v334, &v335, &v336, &v337);
          if (v25 || v39 != 6)
          {
            if (v39 != 3
              && v39 != 6
              && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Mesh/src/TriMeshIO.cpp", 289, (uint64_t)"read_count == 3 || read_count == 6", 34, (uint64_t)"Wrong v fields for reading position", 35, (void (*)(void **))sub_215E1ABD8))
            {
              abort();
            }
            uint64_t v44 = *((void *)&__dst + 1);
            if (*((void *)&__dst + 1) >= (unint64_t)v288)
            {
              *((void *)&__dst + 1) = sub_215CF257C((uint64_t)&__dst, &v333, (_DWORD *)&v333 + 1, &v334);
            }
            else
            {
              **((void **)&__dst + 1) = v333;
              *(_DWORD *)(v44 + 8) = v334;
              *((void *)&__dst + 1) = v44 + 12;
            }
          }
          else
          {
            uint64_t v40 = *((void *)&__dst + 1);
            if (*((void *)&__dst + 1) >= (unint64_t)v288)
            {
              uint64_t v41 = sub_215CF257C((uint64_t)&__dst, &v333, (_DWORD *)&v333 + 1, &v334);
            }
            else
            {
              **((void **)&__dst + 1) = v333;
              *(_DWORD *)(v40 + 8) = v334;
              uint64_t v41 = (_DWORD *)(v40 + 12);
            }
            *((void *)&__dst + 1) = v41;
            unint64_t v47 = v290;
            if ((unint64_t)v290 >= (unint64_t)v291)
            {
              v290 = sub_215CF257C((uint64_t)&v289, &v335, &v336, &v337);
            }
            else
            {
              _DWORD *v290 = v335;
              v47[1] = v336;
              v47[2] = v337;
              v290 = v47 + 3;
            }
          }
          break;
        case 0x6E76:
          if (v339 >= 0) {
            v42 = (char *)&v338 + 3;
          }
          else {
            v42 = (const char *)(v338 + 3);
          }
          if (sscanf(v42, "%f %f %f", &v333, (char *)&v333 + 4, &v334) != 3
            && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Mesh/src/TriMeshIO.cpp", 294, (uint64_t)"read_count == 3", 15, (uint64_t)"Wrong vn fields for reading position", 36, (void (*)(void **))sub_215E1ABD8))
          {
            abort();
          }
          char v43 = __src[1];
          if (__src[1] >= v280)
          {
            __src[1] = sub_215CF257C((uint64_t)__src, &v333, (_DWORD *)&v333 + 1, &v334);
          }
          else
          {
            *(void *)__src[1] = v333;
            v43[2] = v334;
            __src[1] = v43 + 3;
          }
          break;
        case 0x7476:
          if (v339 >= 0) {
            std::string::size_type v45 = (char *)&v338 + 3;
          }
          else {
            std::string::size_type v45 = (const char *)(v338 + 3);
          }
          if (sscanf(v45, "%f %f", &v333, (char *)&v333 + 4) != 2
            && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Mesh/src/TriMeshIO.cpp", 298, (uint64_t)"read_count == 2", 15, (uint64_t)"Wrong vt fields for reading position", 36, (void (*)(void **))sub_215E1ABD8))
          {
            abort();
          }
          v46 = v302;
          if ((unint64_t)v302 >= v303)
          {
            uint64_t v48 = v28;
            uint64_t v49 = (char *)((char *)v302 - (char *)v301);
            uint64_t v50 = v302 - v301;
            if ((unint64_t)(v50 + 1) >> 61) {
              sub_215738AC0();
            }
            unint64_t v51 = (uint64_t)(v303 - (void)v301) >> 2;
            if (v51 <= v50 + 1) {
              unint64_t v51 = v50 + 1;
            }
            uint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
            if (v303 - (unint64_t)v301 < 0x7FFFFFFFFFFFFFF8) {
              uint64_t v52 = v51;
            }
            if (v52)
            {
              LODWORD(v320[0]) = v52;
              if (v305 == -1) {
                sub_215742D4C();
              }
              uint64_t v53 = (char *)((char *)v302 - (char *)v301);
              __p[0] = v320;
              uint64_t v54 = ((uint64_t (*)(void **, unsigned char *))off_26C681FE0[v305])(__p, v304);
              uint64_t v49 = v53;
            }
            else
            {
              uint64_t v54 = 0;
              uint64_t v55 = 0;
            }
            uint64_t v62 = (void ***)(v54 + 8 * v50);
            *uint64_t v62 = v333;
            uint64_t v63 = v62 + 1;
            v64 = v302;
            std::string::size_type v65 = v301;
            if (v302 == v301)
            {
              uint64_t v28 = v48;
            }
            else
            {
              unint64_t v66 = (char *)v302 - (char *)v301 - 8;
              uint64_t v28 = v48;
              if (v66 < 0x58) {
                goto LABEL_392;
              }
              if ((unint64_t)((char *)v302 - v54 - v49) < 0x20) {
                goto LABEL_392;
              }
              uint64_t v67 = (v66 >> 3) + 1;
              uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
              v69 = &v302[v68 / 0xFFFFFFFFFFFFFFF8];
              uint64_t v62 = (void ***)((char *)v62 - v68);
              v70 = &v49[v54 - 16];
              v71 = v302 - 2;
              uint64_t v72 = v67 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v73 = *(_OWORD *)v71;
                *((_OWORD *)v70 - 1) = *((_OWORD *)v71 - 1);
                *(_OWORD *)v70 = v73;
                v70 -= 32;
                v71 -= 4;
                v72 -= 4;
              }
              while (v72);
              v64 = v69;
              if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_392:
                do
                {
                  uint64_t v74 = *--v64;
                  *--uint64_t v62 = v74;
                }
                while (v64 != v65);
              }
              v64 = v301;
            }
            v301 = v62;
            v302 = v63;
            unint64_t v75 = v303;
            unint64_t v303 = v54 + 8 * v55;
            if (v64)
            {
              __p[0] = v64;
              LODWORD(__p[1]) = (v75 - (unint64_t)v64) >> 3;
              if (v305 == -1) {
                sub_215742D4C();
              }
              v320[0] = __p;
              ((void (*)(void **, unsigned char *))off_26C681FB0[v305])(v320, v304);
            }
            v302 = v63;
          }
          else
          {
            *v302 = v333;
            v302 = v46 + 1;
          }
          break;
        case 0x2066:
          uint64_t v34 = MEMORY[0x263F8C338] + 64;
          v332[0] = MEMORY[0x263F8C338] + 64;
          __p[0] = v263;
          *(void **)((char *)__p + *((void *)v263 - 3)) = v262;
          __p[1] = 0;
          unint64_t v35 = (std::ios_base *)((char *)__p + *((void *)__p[0] - 3));
          std::ios_base::init(v35, &v323);
          char v36 = (void *)(MEMORY[0x263F8C338] + 24);
          v35[1].__vftable = 0;
          v35[1].__fmtflags_ = -1;
          __p[0] = v36;
          v332[0] = v34;
          std::streambuf::basic_streambuf();
          uint64_t v37 = MEMORY[0x263F8C318] + 16;
          *(void *)&long long v323 = MEMORY[0x263F8C318] + 16;
          *(_OWORD *)v329 = 0u;
          long long v330 = 0u;
          int v331 = 8;
          if (SHIBYTE(v339) < 0)
          {
            sub_21573AB08(v329, (void *)v338, *((size_t *)&v338 + 1));
          }
          else
          {
            *(_OWORD *)v329 = v338;
            *(void *)&long long v330 = v339;
          }
          sub_21573B8E0((uint64_t)&v323);
          v320[1] = 0;
          v320[0] = 0;
          uint64_t v321 = 0;
          memset(&v319, 0, sizeof(v319));
          v56 = sub_215A9B3F0((uint64_t *)__p, (uint64_t)v320);
          sub_215A9B3F0(v56, (uint64_t)&v319);
          uint64_t v57 = (std::string *)v319.__r_.__value_.__r.__words[0];
          if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v57 = &v319;
          }
          std::string::size_type v58 = HIBYTE(v319.__r_.__value_.__r.__words[2]);
          if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v58 = v319.__r_.__value_.__l.__size_;
          }
          uint64_t v250 = v37;
          if (!v58) {
            goto LABEL_251;
          }
          if (v58 >= 8)
          {
            if (v58 < 0x20)
            {
              uint64_t v59 = 0;
              uint64_t v61 = 0;
LABEL_128:
              unint64_t v60 = (std::string *)((char *)v57 + (v58 & 0xFFFFFFFFFFFFFFF8));
              int64x2_t v125 = 0uLL;
              int64x2_t v126 = (int64x2_t)(unint64_t)v59;
              v127 = (int8x8_t *)((char *)v57 + v61);
              std::string::size_type v128 = v61 - (v58 & 0xFFFFFFFFFFFFFFF8);
              int64x2_t v129 = 0uLL;
              int64x2_t v130 = 0uLL;
              do
              {
                int8x8_t v131 = *v127++;
                uint16x8_t v132 = vmovl_u8((uint8x8_t)vceq_s8(v131, (int8x8_t)0x2F2F2F2F2F2F2F2FLL));
                uint32x4_t v133 = vmovl_u16(*(uint16x4_t *)v132.i8);
                v134.i64[0] = v133.u32[0];
                v134.i64[1] = v133.u32[1];
                int64x2_t v135 = (int64x2_t)vandq_s8(v134, v259);
                v134.i64[0] = v133.u32[2];
                v134.i64[1] = v133.u32[3];
                int64x2_t v136 = (int64x2_t)vandq_s8(v134, v259);
                uint32x4_t v137 = vmovl_high_u16(v132);
                v134.i64[0] = v137.u32[0];
                v134.i64[1] = v137.u32[1];
                int64x2_t v138 = (int64x2_t)vandq_s8(v134, v259);
                v134.i64[0] = v137.u32[2];
                v134.i64[1] = v137.u32[3];
                int64x2_t v130 = vaddq_s64(v130, (int64x2_t)vandq_s8(v134, v259));
                int64x2_t v129 = vaddq_s64(v129, v138);
                int64x2_t v125 = vaddq_s64(v125, v136);
                int64x2_t v126 = vaddq_s64(v126, v135);
                v128 += 8;
              }
              while (v128);
              uint64_t v59 = vaddvq_s64(vaddq_s64(vaddq_s64(v126, v129), vaddq_s64(v125, v130)));
              if (v58 == (v58 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_137;
              }
              goto LABEL_133;
            }
            int64x2_t v76 = 0uLL;
            uint64_t v61 = v58 & 0xFFFFFFFFFFFFFFE0;
            int64x2_t v77 = 0uLL;
            unint64_t v78 = (int8x16_t *)&v57->__r_.__value_.__r.__words[2];
            int64x2_t v79 = 0uLL;
            unint64_t v80 = v58 & 0xFFFFFFFFFFFFFFE0;
            int64x2_t v81 = 0uLL;
            int64x2_t v82 = 0uLL;
            int64x2_t v83 = 0uLL;
            int64x2_t v84 = 0uLL;
            int64x2_t v85 = 0uLL;
            int64x2_t v86 = 0uLL;
            int64x2_t v87 = 0uLL;
            int64x2_t v88 = 0uLL;
            int64x2_t v89 = 0uLL;
            int64x2_t v90 = 0uLL;
            int64x2_t v91 = 0uLL;
            int64x2_t v92 = 0uLL;
            int64x2_t v93 = 0uLL;
            do
            {
              v94.i64[0] = 0x2F2F2F2F2F2F2F2FLL;
              v94.i64[1] = 0x2F2F2F2F2F2F2F2FLL;
              uint8x16_t v95 = (uint8x16_t)vceqq_s8(v78[-1], v94);
              uint16x8_t v96 = vmovl_u8(*(uint8x8_t *)v95.i8);
              uint32x4_t v97 = vmovl_u16(*(uint16x4_t *)v96.i8);
              v98.i64[0] = v97.u32[0];
              v98.i64[1] = v97.u32[1];
              int8x16_t v99 = (int8x16_t)vdupq_n_s64(1uLL);
              int64x2_t v255 = (int64x2_t)vandq_s8(v98, v99);
              v98.i64[0] = v97.u32[2];
              v98.i64[1] = v97.u32[3];
              int64x2_t v100 = (int64x2_t)vandq_s8(v98, v99);
              uint32x4_t v101 = vmovl_high_u16(v96);
              v98.i64[0] = v101.u32[0];
              v98.i64[1] = v101.u32[1];
              int64x2_t v102 = (int64x2_t)vandq_s8(v98, v99);
              uint16x8_t v103 = vmovl_high_u8(v95);
              uint32x4_t v104 = vmovl_u16(*(uint16x4_t *)v103.i8);
              v98.i64[0] = v104.u32[0];
              v98.i64[1] = v104.u32[1];
              int64x2_t v105 = (int64x2_t)vandq_s8(v98, v99);
              v98.i64[0] = v101.u32[2];
              v98.i64[1] = v101.u32[3];
              int64x2_t v106 = (int64x2_t)vandq_s8(v98, v99);
              v98.i64[0] = v104.u32[2];
              v98.i64[1] = v104.u32[3];
              int64x2_t v107 = (int64x2_t)vandq_s8(v98, v99);
              uint32x4_t v108 = vmovl_high_u16(v103);
              v98.i64[0] = v108.u32[0];
              v98.i64[1] = v108.u32[1];
              int64x2_t v109 = (int64x2_t)vandq_s8(v98, v99);
              v98.i64[0] = v108.u32[2];
              v98.i64[1] = v108.u32[3];
              int64x2_t v110 = (int64x2_t)vandq_s8(v98, v99);
              uint8x16_t v111 = (uint8x16_t)vceqq_s8(*v78, v94);
              uint16x8_t v112 = vmovl_u8(*(uint8x8_t *)v111.i8);
              uint32x4_t v113 = vmovl_u16(*(uint16x4_t *)v112.i8);
              v98.i64[0] = v113.u32[0];
              v98.i64[1] = v113.u32[1];
              int64x2_t v114 = (int64x2_t)vandq_s8(v98, v99);
              v98.i64[0] = v113.u32[2];
              v98.i64[1] = v113.u32[3];
              int64x2_t v115 = (int64x2_t)vandq_s8(v98, v99);
              uint32x4_t v116 = vmovl_high_u16(v112);
              v98.i64[0] = v116.u32[0];
              v98.i64[1] = v116.u32[1];
              int64x2_t v117 = (int64x2_t)vandq_s8(v98, v99);
              uint16x8_t v118 = vmovl_high_u8(v111);
              uint32x4_t v119 = vmovl_u16(*(uint16x4_t *)v118.i8);
              v98.i64[0] = v119.u32[0];
              v98.i64[1] = v119.u32[1];
              int64x2_t v120 = (int64x2_t)vandq_s8(v98, v99);
              v98.i64[0] = v116.u32[2];
              v98.i64[1] = v116.u32[3];
              int64x2_t v121 = (int64x2_t)vandq_s8(v98, v99);
              v98.i64[0] = v119.u32[2];
              v98.i64[1] = v119.u32[3];
              int64x2_t v122 = (int64x2_t)vandq_s8(v98, v99);
              uint32x4_t v123 = vmovl_high_u16(v118);
              v98.i64[0] = v123.u32[0];
              v98.i64[1] = v123.u32[1];
              int64x2_t v124 = (int64x2_t)vandq_s8(v98, v99);
              v98.i64[0] = v123.u32[2];
              v98.i64[1] = v123.u32[3];
              int64x2_t v85 = vaddq_s64(v85, v110);
              int64x2_t v84 = vaddq_s64(v84, v109);
              int64x2_t v83 = vaddq_s64(v83, v107);
              int64x2_t v81 = vaddq_s64(v81, v106);
              int64x2_t v82 = vaddq_s64(v82, v105);
              int64x2_t v79 = vaddq_s64(v79, v102);
              int64x2_t v77 = vaddq_s64(v77, v100);
              int64x2_t v76 = vaddq_s64(v76, v255);
              int64x2_t v93 = vaddq_s64(v93, (int64x2_t)vandq_s8(v98, v99));
              int64x2_t v92 = vaddq_s64(v92, v124);
              int64x2_t v91 = vaddq_s64(v91, v122);
              int64x2_t v89 = vaddq_s64(v89, v121);
              int64x2_t v90 = vaddq_s64(v90, v120);
              int64x2_t v88 = vaddq_s64(v88, v117);
              int64x2_t v87 = vaddq_s64(v87, v115);
              int64x2_t v86 = vaddq_s64(v86, v114);
              v78 += 2;
              v80 -= 32;
            }
            while (v80);
            uint64_t v59 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v86, v76), vaddq_s64(v90, v82)), vaddq_s64(vaddq_s64(v88, v79), vaddq_s64(v92, v84))), vaddq_s64(vaddq_s64(vaddq_s64(v87, v77), vaddq_s64(v91, v83)), vaddq_s64(vaddq_s64(v89, v81), vaddq_s64(v93, v85)))));
            if (v58 == v61) {
              goto LABEL_137;
            }
            if ((v58 & 0x18) != 0) {
              goto LABEL_128;
            }
            unint64_t v60 = (std::string *)((char *)v57 + v61);
          }
          else
          {
            uint64_t v59 = 0;
            unint64_t v60 = v57;
          }
LABEL_133:
          v139 = (unsigned __int8 *)v57 + v58;
          do
          {
            int v140 = v60->__r_.__value_.__s.__data_[0];
            unint64_t v60 = (std::string *)((char *)v60 + 1);
            if (v140 == 47) {
              ++v59;
            }
          }
          while (v60 != (std::string *)v139);
LABEL_137:
          if (v59)
          {
            if (v59 != 2)
            {
              char v209 = 0;
              int v248 = 3;
              uint64_t v28 = v28;
              goto LABEL_262;
            }
            uint64_t v141 = 0;
            int v249 = v25;
            while (1)
            {
              uint64_t v252 = v141;
              if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unint64_t v142 = HIBYTE(v319.__r_.__value_.__r.__words[2]);
              }
              else {
                unint64_t v142 = v319.__r_.__value_.__l.__size_;
              }
              if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v143 = &v319;
              }
              else {
                v143 = (std::string *)v319.__r_.__value_.__r.__words[0];
              }
              v144 = (char *)v143 + v142;
              unsigned int v258 = v28;
              if ((uint64_t)v142 >= 1)
              {
                size_t v145 = v142;
                v146 = v143;
                do
                {
                  v147 = memchr(v146, 47, v145);
                  if (!v147) {
                    break;
                  }
                  if (*v147 == 47) {
                    goto LABEL_152;
                  }
                  v146 = (std::string *)(v147 + 1);
                  size_t v145 = v144 - (unsigned char *)v146;
                }
                while (v144 - (unsigned char *)v146 > 0);
              }
              v147 = (char *)v143 + v142;
LABEL_152:
              unint64_t v148 = v147 == v144 ? -1 : v147 - (unsigned char *)v143;
              std::string::size_type v149 = v148 + 1;
              if (v142 >= v148 + 1)
              {
                v151 = (char *)v143 + v149;
                size_t v152 = v142 - v149;
                if ((uint64_t)(v142 - v149) >= 1)
                {
                  do
                  {
                    v153 = memchr(v151, 47, v152);
                    if (!v153) {
                      break;
                    }
                    if (*v153 == 47) {
                      goto LABEL_162;
                    }
                    v151 = v153 + 1;
                    size_t v152 = v144 - v151;
                  }
                  while (v144 - v151 > 0);
                }
                v153 = (char *)v143 + v142;
LABEL_162:
                uint64_t v150 = v153 - (unsigned char *)v143;
                if (v153 == v144) {
                  uint64_t v150 = -1;
                }
              }
              else
              {
                uint64_t v150 = -1;
              }
              if (v142 >= v148) {
                unint64_t v142 = v148;
              }
              if (v142 > 0x7FFFFFFFFFFFFFF7) {
                sub_215731CD8();
              }
              uint64_t v256 = v150;
              unint64_t v251 = v148;
              if (v142 >= 0x17) {
                break;
              }
              *((unsigned char *)&__str.__r_.__value_.__s + 23) = v142;
              p_str = &__str;
              if (v142) {
                goto LABEL_173;
              }
LABEL_174:
              p_str[v142] = 0;
              unint64_t v157 = std::stoull(&__str, 0, 10);
              uint64_t v158 = v256;
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              std::string::size_type v159 = v256 + 1;
              std::string::size_type v253 = v149;
              if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::size_type v160 = v319.__r_.__value_.__l.__size_;
                if (v319.__r_.__value_.__l.__size_ < v159) {
LABEL_380:
                }
                  sub_215739EF4();
                v161 = (std::string *)v319.__r_.__value_.__r.__words[0];
              }
              else
              {
                std::string::size_type v160 = HIBYTE(v319.__r_.__value_.__r.__words[2]);
                if (v159 > HIBYTE(v319.__r_.__value_.__r.__words[2])) {
                  goto LABEL_380;
                }
                v161 = &v319;
              }
              std::string::size_type v162 = v160 - v159;
              if (v160 - v159 > 0x7FFFFFFFFFFFFFF7) {
                sub_215731CD8();
              }
              if (v162 >= 0x17)
              {
                uint64_t v164 = (v162 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v162 | 7) != 0x17) {
                  uint64_t v164 = v162 | 7;
                }
                uint64_t v165 = v164 + 1;
                v163 = operator new(v164 + 1);
                __str.__r_.__value_.__r.__words[2] = v165 | 0x8000000000000000;
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v163;
                __str.__r_.__value_.__l.__size_ = v162;
                uint64_t v158 = v256;
LABEL_188:
                memmove(v163, (char *)v161 + v159, v162);
                goto LABEL_189;
              }
              *((unsigned char *)&__str.__r_.__value_.__s + 23) = v160 - v159;
              v163 = &__str;
              if (v160 != v159) {
                goto LABEL_188;
              }
LABEL_189:
              *((unsigned char *)v163 + v162) = 0;
              unint64_t v166 = std::stoull(&__str, 0, 10);
              uint64_t v28 = v258;
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              unint64_t v257 = v166;
              if (v158 - v251 >= 2)
              {
                a5 = v264;
                if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::size_type v167 = v319.__r_.__value_.__l.__size_;
                  if (v319.__r_.__value_.__l.__size_ < v253) {
LABEL_382:
                  }
                    sub_215739EF4();
                  v168 = (std::string *)v319.__r_.__value_.__r.__words[0];
                }
                else
                {
                  std::string::size_type v167 = HIBYTE(v319.__r_.__value_.__r.__words[2]);
                  if (v253 > HIBYTE(v319.__r_.__value_.__r.__words[2])) {
                    goto LABEL_382;
                  }
                  v168 = &v319;
                }
                unint64_t v170 = v167 - v253;
                if (v170 >= v158 - v251 - 1) {
                  std::string::size_type v171 = v158 - v251 - 1;
                }
                else {
                  std::string::size_type v171 = v170;
                }
                if (v171 > 0x7FFFFFFFFFFFFFF7) {
                  sub_215731CD8();
                }
                if (v171 >= 0x17)
                {
                  uint64_t v173 = (v171 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v171 | 7) != 0x17) {
                    uint64_t v173 = v171 | 7;
                  }
                  uint64_t v174 = v173 + 1;
                  v172 = operator new(v173 + 1);
                  __str.__r_.__value_.__r.__words[2] = v174 | 0x8000000000000000;
                  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v172;
                  __str.__r_.__value_.__l.__size_ = v171;
                  a5 = v264;
                }
                else
                {
                  *((unsigned char *)&__str.__r_.__value_.__s + 23) = v171;
                  v172 = &__str;
                  if (!v171)
                  {
LABEL_209:
                    uint64_t v28 = v258;
                    v172[v171] = 0;
                    unint64_t v169 = std::stoull(&__str, 0, 10);
                    unint64_t v166 = v257;
                    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                    {
                      unint64_t v175 = v169;
                      operator delete(__str.__r_.__value_.__l.__data_);
                      unint64_t v169 = v175;
                    }
                    goto LABEL_211;
                  }
                }
                memmove(v172, (char *)v168 + v253, v171);
                goto LABEL_209;
              }
              unint64_t v169 = 0;
              a5 = v264;
LABEL_211:
              if (HIDWORD(v157) || HIDWORD(v166) || HIDWORD(v169))
              {
                char v209 = 0;
                int v248 = 2;
                goto LABEL_262;
              }
              unint64_t v254 = v169;
              uint64_t v176 = v252;
              if (v157 == v166) {
                goto LABEL_248;
              }
              v178 = (char *)*((void *)&v340 + 1);
              uint64_t v177 = v340;
              unint64_t v179 = (*((void *)&v340 + 1) - (void)v340) >> 2;
              if (v157 <= v179) {
                goto LABEL_247;
              }
              v180 = v341;
              do
              {
                if (v178 < v180)
                {
                  *(_DWORD *)v178 = v179;
                  v181 = v178 + 4;
                  goto LABEL_218;
                }
                v182 = (char *)v340;
                v183 = &v178[-v340];
                uint64_t v184 = (uint64_t)&v178[-v340] >> 2;
                unint64_t v185 = v184 + 1;
                if ((unint64_t)(v184 + 1) >> 62) {
                  sub_2157E81A4();
                }
                if ((uint64_t)&v180[-v340] >> 1 > v185) {
                  unint64_t v185 = (uint64_t)&v180[-v340] >> 1;
                }
                if ((unint64_t)&v180[-v340] >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v186 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v186 = v185;
                }
                if (v186)
                {
                  if (v186 >> 62) {
                    sub_215738AD8();
                  }
                  v187 = operator new(4 * v186);
                  v188 = &v187[4 * v184];
                  _DWORD *v188 = v179;
                  v181 = (char *)(v188 + 1);
                  int64_t v189 = v178 - v182;
                  if (v178 == v182) {
                    goto LABEL_234;
                  }
                }
                else
                {
                  v187 = 0;
                  v188 = (_DWORD *)(4 * v184);
                  v190 = (_DWORD *)(4 * v184);
                  _DWORD *v190 = v179;
                  v181 = (char *)(v190 + 1);
                  int64_t v189 = v178 - v182;
                  if (v178 == v182) {
                    goto LABEL_234;
                  }
                }
                unint64_t v191 = v189 - 4;
                if (v191 < 0xBC)
                {
                  v192 = v178;
                  goto LABEL_233;
                }
                unint64_t v194 = (v178 - 4 - v182) & 0xFFFFFFFFFFFFFFFCLL;
                if (&v183[(void)v187 - 4 - v194] > &v183[(void)v187 - 4])
                {
                  v192 = v178;
                  do
                  {
LABEL_233:
                    int v193 = *((_DWORD *)v192 - 1);
                    v192 -= 4;
                    *--v188 = v193;
                  }
                  while (v192 != v182);
                  goto LABEL_234;
                }
                if (&v178[-v194 - 4] > v178 - 4)
                {
                  v192 = v178;
                  goto LABEL_233;
                }
                if ((unint64_t)(v182 - v187) < 0x20)
                {
                  v192 = v178;
                  goto LABEL_233;
                }
                uint64_t v195 = (v191 >> 2) + 1;
                uint64_t v196 = 4 * (v195 & 0x7FFFFFFFFFFFFFF8);
                v192 = &v178[-v196];
                v188 = (_DWORD *)((char *)v188 - v196);
                v197 = &v183[(void)v187 - 16];
                v198 = v178 - 16;
                uint64_t v199 = v195 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v200 = *(_OWORD *)v198;
                  *((_OWORD *)v197 - 1) = *((_OWORD *)v198 - 1);
                  *(_OWORD *)v197 = v200;
                  v197 -= 32;
                  v198 -= 32;
                  v199 -= 8;
                }
                while (v199);
                if (v195 != (v195 & 0x7FFFFFFFFFFFFFF8)) {
                  goto LABEL_233;
                }
LABEL_234:
                v180 = &v187[4 * v186];
                *(void *)&long long v340 = v188;
                v341 = v180;
                if (v182) {
                  operator delete(v182);
                }
LABEL_218:
                *((void *)&v340 + 1) = v181;
                unint64_t v179 = (v179 + 1);
                v178 = v181;
              }
              while (v157 > v179);
              uint64_t v177 = v340;
              int v25 = v249;
              uint64_t v176 = v252;
LABEL_247:
              *(_DWORD *)(v177 + 4 * v157 - 4) = v257 - 1;
              uint64_t v28 = 1;
              a5 = v264;
LABEL_248:
              uint64_t v201 = 2 * v176;
              *(void *)&v345[v201] = v157;
              *(uint64_t *)((char *)&v342 + v201 * 4) = v254;
              sub_215A9B3F0((uint64_t *)__p, (uint64_t)&v319);
              uint64_t v141 = v176 + 1;
              if (v141 == 3)
              {
                LODWORD(__str.__r_.__value_.__l.__data_) = v345[0] - 1;
                int v202 = v346 - 1;
                int v317 = v346 - 1;
                int v203 = v347 - 1;
                int v316 = v347 - 1;
                v204 = v297;
                if ((unint64_t)v297 >= v298)
                {
                  v205 = sub_215CF2720((uint64_t)&v296, &__str, &v317, &v316);
                }
                else
                {
                  _DWORD *v297 = v345[0] - 1;
                  v204[1] = v202;
                  v205 = v204 + 3;
                  v204[2] = v203;
                }
                v297 = v205;
                if (v342 != v343)
                {
                  LODWORD(__str.__r_.__value_.__l.__data_) = v342 - 1;
                  int v213 = v343 - 1;
                  int v317 = v343 - 1;
                  int v214 = v344 - 1;
                  int v316 = v344 - 1;
                  v215 = v307;
                  if ((unint64_t)v307 >= v308)
                  {
                    v216 = sub_215CF2720((uint64_t)&v306, &__str, &v317, &v316);
                  }
                  else
                  {
                    _DWORD *v307 = v342 - 1;
                    v215[1] = v213;
                    v216 = v215 + 3;
                    v215[2] = v214;
                  }
                  v307 = v216;
                }
LABEL_260:
                char v209 = 1;
                goto LABEL_262;
              }
            }
            uint64_t v155 = (v142 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v142 | 7) != 0x17) {
              uint64_t v155 = v142 | 7;
            }
            uint64_t v156 = v155 + 1;
            p_str = operator new(v155 + 1);
            __str.__r_.__value_.__r.__words[2] = v156 | 0x8000000000000000;
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
            __str.__r_.__value_.__l.__size_ = v142;
LABEL_173:
            memmove(p_str, v143, v142);
            goto LABEL_174;
          }
LABEL_251:
          unint64_t v206 = std::stoull(&v319, 0, 10);
          sub_215A9B3F0((uint64_t *)__p, (uint64_t)&v319);
          unint64_t v207 = std::stoull(&v319, 0, 10);
          sub_215A9B3F0((uint64_t *)__p, (uint64_t)&v319);
          unint64_t v208 = std::stoull(&v319, 0, 10);
          char v209 = 0;
          uint64_t v28 = v28;
          if (!HIDWORD(v206) && !HIDWORD(v207) && !HIDWORD(v208))
          {
            v345[0] = v206 - 1;
            LODWORD(v342) = v207 - 1;
            int v210 = v208 - 1;
            LODWORD(__str.__r_.__value_.__l.__data_) = v208 - 1;
            v211 = v297;
            if ((unint64_t)v297 >= v298)
            {
              v212 = sub_215CF2720((uint64_t)&v296, v345, &v342, &__str);
            }
            else
            {
              _DWORD *v297 = v206 - 1;
              v211[1] = v207 - 1;
              v212 = v211 + 3;
              v211[2] = v210;
            }
            v297 = v212;
            goto LABEL_260;
          }
          int v248 = 2;
LABEL_262:
          if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v319.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v321) < 0) {
            operator delete(v320[0]);
          }
          __p[0] = v261;
          *(void **)((char *)__p + *((void *)v261 - 3)) = v260;
          *(void *)&long long v323 = v250;
          if (SBYTE7(v330) < 0) {
            operator delete(v329[0]);
          }
          std::streambuf::~streambuf();
          std::istream::~istream();
          MEMORY[0x2166C4BF0](v332);
          if ((v209 & 1) == 0)
          {
            unsigned int v242 = v248;
            goto LABEL_309;
          }
          break;
      }
    }
  }
  if ((v28 & 1) == 0)
  {
    long long v239 = *(_OWORD *)__src;
    *(_OWORD *)__src = *(_OWORD *)v293;
    *(_OWORD *)v293 = v239;
    v240 = v280;
    uint64_t v241 = v281[0];
    v280 = *(void **)&v293[16];
    v281[0] = v294;
    *(void *)&v293[16] = v240;
    uint64_t v294 = v241;
    goto LABEL_304;
  }
  if (*((void *)&__dst + 1) == (void)__dst)
  {
LABEL_304:
    if (v289 != v290) {
      LODWORD(v292) = 1;
    }
    a5 = v264;
    if (*(void *)v293 != *(void *)&v293[8]) {
      int v295 = 1;
    }
    unsigned int v242 = ~(2 * *(_DWORD *)((char *)v27 + *(void *)(*v27 - 24) + 32)) & 4;
    goto LABEL_309;
  }
  unint64_t v217 = 0;
  unint64_t v218 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&__dst + 1) - __dst) >> 2);
  uint64_t v219 = v340;
  unint64_t v220 = (uint64_t)(*((void *)&v340 + 1) - v340) >> 2;
  while (1)
  {
    unsigned int v223 = v217;
    if (v217 < v220) {
      unsigned int v223 = *(_DWORD *)(v219 + 4 * v217);
    }
    if (v223 >= 0xAAAAAAAAAAAAAAABLL * (((char *)__src[1] - (char *)__src[0]) >> 2)) {
      break;
    }
    v224 = (char *)__src[0] + 12 * v223;
    v225 = *(void **)&v293[8];
    if (*(void *)&v293[8] < *(void *)&v293[16])
    {
      uint64_t v221 = *(void *)v224;
      *(_DWORD *)(*(void *)&v293[8] + 8) = *((_DWORD *)v224 + 2);
      void *v225 = v221;
      v222 = (char *)v225 + 12;
    }
    else
    {
      unint64_t v226 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v293[8] - *(void *)v293) >> 2);
      unint64_t v227 = v226 + 1;
      if (v226 + 1 > 0x1555555555555555) {
        sub_215738AC0();
      }
      if (0x5555555555555556 * ((uint64_t)(*(void *)&v293[16] - *(void *)v293) >> 2) > v227) {
        unint64_t v227 = 0x5555555555555556 * ((uint64_t)(*(void *)&v293[16] - *(void *)v293) >> 2);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v293[16] - *(void *)v293) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
        uint64_t v228 = 0x1555555555555555;
      }
      else {
        uint64_t v228 = v227;
      }
      if (v228)
      {
        LODWORD(v333) = v228;
        if (HIDWORD(v294) == -1) {
          sub_215742D4C();
        }
        __p[0] = &v333;
        uint64_t v229 = ((uint64_t (*)(void **, uint64_t *))off_26C681FC0[HIDWORD(v294)])(__p, &v294);
      }
      else
      {
        uint64_t v229 = 0;
        uint64_t v230 = 0;
      }
      unint64_t v231 = v229 + 12 * v226;
      uint64_t v232 = *(void *)v224;
      *(_DWORD *)(v231 + 8) = *((_DWORD *)v224 + 2);
      *(void *)unint64_t v231 = v232;
      v233 = *(_DWORD **)&v293[8];
      v234 = *(_DWORD **)v293;
      unint64_t v235 = v231;
      if (*(void *)&v293[8] != *(void *)v293)
      {
        do
        {
          uint64_t v236 = *(void *)(v233 - 3);
          v233 -= 3;
          int v237 = v233[2];
          *(void *)(v235 - 12) = v236;
          v235 -= 12;
          *(_DWORD *)(v235 + 8) = v237;
        }
        while (v233 != v234);
        v233 = *(_DWORD **)v293;
      }
      v222 = (char *)(v231 + 12);
      *(void *)v293 = v235;
      *(void *)&v293[8] = v231 + 12;
      uint64_t v238 = *(void *)&v293[16];
      *(void *)&v293[16] = v229 + 12 * v230;
      if (v233)
      {
        __p[0] = v233;
        LODWORD(__p[1]) = -1431655765 * ((unint64_t)(v238 - (void)v233) >> 2);
        if (HIDWORD(v294) == -1) {
          sub_215742D4C();
        }
        v333 = __p;
        ((void (*)(void ***, uint64_t *))off_26C681FD0[HIDWORD(v294)])(&v333, &v294);
      }
    }
    *(void *)&v293[8] = v222;
    if (++v217 == v218) {
      goto LABEL_304;
    }
  }
  unsigned int v242 = 3;
  a5 = v264;
LABEL_309:
  if (SHIBYTE(v339) < 0) {
    operator delete((void *)v338);
  }
  if ((void)v340) {
    operator delete((void *)v340);
  }
  if (__src[0])
  {
    __src[1] = __src[0];
    __p[0] = __src[0];
    LODWORD(__p[1]) = -1431655765 * (((unint64_t)v280 - (unint64_t)__src[0]) >> 2);
    if (HIDWORD(v281[0]) == -1) {
      sub_215742D4C();
    }
    *(void *)&long long v340 = __p;
    ((void (*)(long long *, void *))off_26C681FD0[HIDWORD(v281[0])])(&v340, v281);
  }
  if (v242)
  {
    LOBYTE(__src[0]) = 0;
    char v286 = 0;
    sub_215CEE79C((uint64_t)__p, v242, (long long *)__src);
    *(_OWORD *)a5 = *(_OWORD *)__p;
    *(unsigned char *)(a5 + 16) = 0;
    *(unsigned char *)(a5 + 112) = 0;
    if ((_BYTE)v331)
    {
      *(unsigned char *)(a5 + 40) = 0;
      int v243 = v325;
      if (v325)
      {
        *(_OWORD *)(a5 + 16) = v323;
        *(void *)(a5 + 32) = v324;
        v324 = 0;
        long long v323 = 0uLL;
        *(unsigned char *)(a5 + 40) = 1;
      }
      *(unsigned char *)(a5 + 48) = 0;
      *(unsigned char *)(a5 + 104) = 0;
      if (BYTE8(v330))
      {
        *(_OWORD *)(a5 + 48) = v326;
        uint64_t v244 = v328;
        *(void *)(a5 + 64) = v327;
        *(void *)(a5 + 72) = v244;
        *(_OWORD *)(a5 + 80) = *(_OWORD *)v329;
        *(void *)(a5 + 96) = v330;
        *(unsigned char *)(a5 + 104) = 1;
      }
      *(unsigned char *)(a5 + 112) = 1;
      *(unsigned char *)(a5 + 384) = 0;
      if (v243 && SHIBYTE(v324) < 0) {
        operator delete((void *)v323);
      }
    }
    else
    {
      *(unsigned char *)(a5 + 384) = 0;
    }
    if (v286)
    {
      if (v285)
      {
        if (v284 < 0) {
          operator delete(v283);
        }
        if (v282 < 0) {
          operator delete((void *)v281[1]);
        }
      }
      if (LOBYTE(v281[0]) && SHIBYTE(v280) < 0) {
        operator delete(__src[0]);
      }
    }
  }
  else
  {
    sub_215AD21F0(a5, (uint64_t)&__dst);
    *(unsigned char *)(a5 + 384) = 1;
  }
  sub_215956690((uint64_t *)&__dst);
LABEL_362:
  v247 = v276;
  if (v276 && !atomic_fetch_add(&v276->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
    std::__shared_weak_count::__release_weak(v247);
  }
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v277.__r_.__value_.__l.__data_);
  }
}

void sub_215CF2138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (SLOBYTE(STACK[0x557]) < 0)
  {
    operator delete((void *)STACK[0x540]);
    if ((SLOBYTE(STACK[0x56F]) & 0x80000000) == 0)
    {
LABEL_7:
      sub_215CF2440((uint64_t)&STACK[0x570]);
      if (SLOBYTE(STACK[0x6AF]) < 0) {
        operator delete((void *)STACK[0x698]);
      }
      v64 = *(void **)(v62 - 240);
      if (v64)
      {
        *(void *)(v62 - 232) = v64;
        operator delete(v64);
      }
      sub_215B2A944((uint64_t *)&STACK[0x330]);
      sub_215956690((uint64_t *)&STACK[0x3A0]);
      sub_215CF6138((uint64_t)&a62);
      if (SLOBYTE(STACK[0x327]) < 0)
      {
        operator delete((void *)STACK[0x310]);
        _Unwind_Resume(a1);
      }
      _Unwind_Resume(a1);
    }
  }
  else if ((SLOBYTE(STACK[0x56F]) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete((void *)STACK[0x558]);
  goto LABEL_7;
}

uint64_t sub_215CF2440(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C0];
  uint64_t v3 = *MEMORY[0x263F8C2C0];
  *(void *)a1 = *MEMORY[0x263F8C2C0];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x2166C4BF0](a1 + 120);
  return a1;
}

void sub_215CF2544(std::error_category *a1)
{
  std::error_category::~error_category(a1);

  JUMPOUT(0x2166C4D20);
}

_DWORD *sub_215CF257C(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v5 = 0x1555555555555555;
  char v6 = *(void ***)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *(void *)a1) >> 2);
  unint64_t v9 = v8 + 1;
  if (v8 + 1 > 0x1555555555555555) {
    sub_215738AC0();
  }
  if (0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - (void)v6) >> 2) > v9) {
    unint64_t v9 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - (void)v6) >> 2);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - (void)v6) >> 2) < 0xAAAAAAAAAAAAAAALL) {
    uint64_t v5 = v9;
  }
  if (v5)
  {
    LODWORD(v25) = v5;
    uint64_t v13 = *(unsigned int *)(a1 + 28);
    if (v13 == -1) {
      sub_215742D4C();
    }
    BOOL v23 = &v25;
    uint64_t v14 = ((uint64_t (*)(void ***, uint64_t))off_26C681FC0[v13])(&v23, a1 + 24);
    char v6 = *(void ***)a1;
    uint64_t v7 = *(void *)(a1 + 8);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  uint64_t v16 = (_DWORD *)(v14 + 12 * v8);
  *uint64_t v16 = *a2;
  v16[1] = *a3;
  v16[2] = *a4;
  unsigned __int8 v17 = v16 + 3;
  if ((void **)v7 != v6)
  {
    do
    {
      uint64_t v18 = *(void *)(v7 - 12);
      v7 -= 12;
      int v19 = *(_DWORD *)(v7 + 8);
      *(void *)(v16 - 3) = v18;
      v16 -= 3;
      v16[2] = v19;
    }
    while ((void **)v7 != v6);
    char v6 = *(void ***)a1;
  }
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v17;
  uint64_t v20 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14 + 12 * v15;
  if (v6)
  {
    BOOL v23 = v6;
    int v24 = -1431655765 * ((unint64_t)(v20 - (void)v6) >> 2);
    uint64_t v21 = *(unsigned int *)(a1 + 28);
    if (v21 == -1) {
      sub_215742D4C();
    }
    int v25 = &v23;
    ((void (*)(void **, uint64_t))off_26C681FD0[v21])(&v25, a1 + 24);
  }
  return v17;
}

_DWORD *sub_215CF2720(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v5 = 0x1555555555555555;
  char v6 = *(void ***)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *(void *)a1) >> 2);
  unint64_t v9 = v8 + 1;
  if (v8 + 1 > 0x1555555555555555) {
    sub_215738AC0();
  }
  if (0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - (void)v6) >> 2) > v9) {
    unint64_t v9 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - (void)v6) >> 2);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - (void)v6) >> 2) < 0xAAAAAAAAAAAAAAALL) {
    uint64_t v5 = v9;
  }
  if (v5)
  {
    LODWORD(v25) = v5;
    uint64_t v13 = *(unsigned int *)(a1 + 28);
    if (v13 == -1) {
      sub_215742D4C();
    }
    BOOL v23 = &v25;
    uint64_t v14 = ((uint64_t (*)(void ***, uint64_t))off_26C681FF0[v13])(&v23, a1 + 24);
    char v6 = *(void ***)a1;
    uint64_t v7 = *(void *)(a1 + 8);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  uint64_t v16 = (_DWORD *)(v14 + 12 * v8);
  *uint64_t v16 = *a2;
  v16[1] = *a3;
  v16[2] = *a4;
  unsigned __int8 v17 = v16 + 3;
  if ((void **)v7 != v6)
  {
    do
    {
      uint64_t v18 = *(void *)(v7 - 12);
      v7 -= 12;
      int v19 = *(_DWORD *)(v7 + 8);
      *(void *)(v16 - 3) = v18;
      v16 -= 3;
      v16[2] = v19;
    }
    while ((void **)v7 != v6);
    char v6 = *(void ***)a1;
  }
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v17;
  uint64_t v20 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14 + 12 * v15;
  if (v6)
  {
    BOOL v23 = v6;
    int v24 = -1431655765 * ((unint64_t)(v20 - (void)v6) >> 2);
    uint64_t v21 = *(unsigned int *)(a1 + 28);
    if (v21 == -1) {
      sub_215742D4C();
    }
    int v25 = &v23;
    ((void (*)(void **, uint64_t))off_26C681FA0[v21])(&v25, a1 + 24);
  }
  return v17;
}

void sub_215CF28C4()
{
}

void sub_215CF2AC0(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_215CF2AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215CF2B28(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (a2[1] - *a2) >> 2;
  HIDWORD(v109) = 0;
  int64x2_t v107 = 0;
  uint32x4_t v108 = 0;
  int64x2_t v106 = 0;
  sub_215CF3D90((uint64_t)&v106, 0xAAAAAAAAAAAAAAABLL * v4);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    unint64_t v7 = (unint64_t)v107;
  }
  else
  {
    unint64_t v7 = (unint64_t)v107;
    do
    {
      int v9 = *(_DWORD *)(v5 + 8);
      uint16x8_t v103 = *(void **)v5;
      int v104 = v9;
      if (v7 < (unint64_t)v108)
      {
        uint64_t v8 = (uint64_t)v103;
        *(_DWORD *)(v7 + 8) = v104;
        *(void *)unint64_t v7 = v8;
        v7 += 12;
      }
      else
      {
        unint64_t v7 = sub_215CF3EF4((unint64_t *)&v106, (uint64_t *)&v103);
      }
      int64x2_t v107 = (char *)v7;
      v5 += 12;
    }
    while (v5 != v6);
  }
  *(void *)a1 = v106;
  *(void *)(a1 + 8) = v7;
  uint64_t v10 = v109;
  *(void *)(a1 + 16) = v108;
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 16);
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a2[5] - a2[4]) >> 2);
  HIDWORD(v109) = 0;
  int64x2_t v107 = 0;
  uint32x4_t v108 = 0;
  int64x2_t v106 = 0;
  sub_215CF3D90((uint64_t)&v106, v11);
  uint64_t v12 = a2[4];
  uint64_t v13 = a2[5];
  if (v12 == v13)
  {
    unint64_t v14 = (unint64_t)v107;
  }
  else
  {
    unint64_t v14 = (unint64_t)v107;
    do
    {
      int v16 = *(_DWORD *)(v12 + 8);
      uint16x8_t v103 = *(void **)v12;
      int v104 = v16;
      if (v14 < (unint64_t)v108)
      {
        uint64_t v15 = (uint64_t)v103;
        *(_DWORD *)(v14 + 8) = v104;
        *(void *)unint64_t v14 = v15;
        v14 += 12;
      }
      else
      {
        unint64_t v14 = sub_215CF3EF4((unint64_t *)&v106, (uint64_t *)&v103);
      }
      int64x2_t v107 = (char *)v14;
      v12 += 12;
    }
    while (v12 != v13);
  }
  *(void *)(a1 + 40) = v106;
  *(void *)(a1 + 48) = v14;
  uint64_t v17 = v109;
  *(void *)(a1 + 56) = v108;
  *(void *)(a1 + 64) = v17;
  *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 26);
  unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((a2[10] - a2[9]) >> 2);
  HIDWORD(v109) = 0;
  int64x2_t v107 = 0;
  uint32x4_t v108 = 0;
  int64x2_t v106 = 0;
  sub_215CF3D90((uint64_t)&v106, v18);
  uint64_t v19 = a2[9];
  uint64_t v20 = a2[10];
  if (v19 == v20)
  {
    unint64_t v21 = (unint64_t)v107;
  }
  else
  {
    unint64_t v21 = (unint64_t)v107;
    do
    {
      int v23 = *(_DWORD *)(v19 + 8);
      uint16x8_t v103 = *(void **)v19;
      int v104 = v23;
      if (v21 < (unint64_t)v108)
      {
        uint64_t v22 = (uint64_t)v103;
        *(_DWORD *)(v21 + 8) = v104;
        *(void *)unint64_t v21 = v22;
        v21 += 12;
      }
      else
      {
        unint64_t v21 = sub_215CF3EF4((unint64_t *)&v106, (uint64_t *)&v103);
      }
      int64x2_t v107 = (char *)v21;
      v19 += 12;
    }
    while (v19 != v20);
  }
  int v25 = v108;
  uint64_t v24 = v109;
  *(void *)(a1 + 80) = v106;
  *(void *)(a1 + 88) = v21;
  *(void *)(a1 + 96) = v25;
  *(void *)(a1 + 104) = v24;
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 68);
  sub_2159BADC8((void *)(a1 + 120), (uint64_t)(a2 + 30));
  *(_DWORD *)(a1 + 152) = *((_DWORD *)a2 + 78);
  sub_2159BADC8((void *)(a1 + 160), (uint64_t)(a2 + 35));
  unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((a2[15] - a2[14]) >> 2);
  HIDWORD(v109) = 0;
  int64x2_t v107 = 0;
  uint32x4_t v108 = 0;
  int64x2_t v106 = 0;
  sub_215CF4080((uint64_t)&v106, v26);
  uint64_t v27 = a2[14];
  uint64_t v28 = a2[15];
  if (v27 == v28)
  {
    unint64_t v29 = (unint64_t)v107;
  }
  else
  {
    unint64_t v29 = (unint64_t)v107;
    do
    {
      int v31 = *(_DWORD *)(v27 + 8);
      uint16x8_t v103 = *(void **)v27;
      int v104 = v31;
      if (v29 < (unint64_t)v108)
      {
        uint64_t v30 = (uint64_t)v103;
        *(_DWORD *)(v29 + 8) = v104;
        *(void *)unint64_t v29 = v30;
        v29 += 12;
      }
      else
      {
        unint64_t v29 = sub_215CF41E4((unint64_t *)&v106, (uint64_t *)&v103);
      }
      int64x2_t v107 = (char *)v29;
      v27 += 12;
    }
    while (v27 != v28);
  }
  std::string::size_type v33 = v108;
  uint64_t v32 = v109;
  *(void *)(a1 + 192) = v106;
  *(void *)(a1 + 200) = v29;
  *(void *)(a1 + 208) = v33;
  *(void *)(a1 + 216) = v32;
  unint64_t v35 = (char *)a2[18];
  uint64_t v34 = (char *)a2[19];
  HIDWORD(v109) = 0;
  int64x2_t v107 = 0;
  uint32x4_t v108 = 0;
  int64x2_t v106 = 0;
  unint64_t v36 = v34 - v35;
  if (v34 != v35)
  {
    if ((v36 & 0x8000000000000000) != 0) {
      sub_215738AC0();
    }
    uint64_t v37 = (v36 >> 3);
    uint64_t v38 = (char *)operator new(8 * v37);
    int64x2_t v106 = v38;
    int64x2_t v107 = v38;
    uint32x4_t v108 = &v38[8 * v37];
    while (1)
    {
      uint64_t v39 = *(void *)v35;
      if (v38 < v108)
      {
        *(void *)uint64_t v38 = v39;
        v38 += 8;
      }
      else
      {
        uint64_t v40 = (char *)(v38 - v106);
        uint64_t v41 = (v38 - v106) >> 3;
        if ((unint64_t)(v41 + 1) >> 61) {
          sub_215738AC0();
        }
        unint64_t v42 = (v108 - v106) >> 2;
        if (v42 <= v41 + 1) {
          unint64_t v42 = v41 + 1;
        }
        if ((unint64_t)(v108 - v106) >= 0x7FFFFFFFFFFFFFF8) {
          uint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v43 = v42;
        }
        if (v43)
        {
          LODWORD(v105) = v43;
          if (HIDWORD(v109) == -1) {
            sub_215742D4C();
          }
          uint16x8_t v103 = &v105;
          uint64_t v44 = ((uint64_t (*)(void **, uint64_t *))off_26C6820E8[HIDWORD(v109)])(&v103, &v109);
          v46 = (char *)(v44 + 8 * v41);
          *(void *)v46 = v39;
          uint64_t v38 = v46 + 8;
          unint64_t v47 = (unint64_t)v106;
          uint64_t v48 = (uint64_t)v107;
          int64_t v49 = v107 - v106;
          if (v107 != v106)
          {
LABEL_47:
            unint64_t v51 = v49 - 8;
            if (v51 < 0x58) {
              goto LABEL_110;
            }
            if ((unint64_t)(v48 - v44 - (void)v40) < 0x20) {
              goto LABEL_110;
            }
            uint64_t v52 = (v51 >> 3) + 1;
            uint64_t v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v54 = v48 - v53;
            v46 -= v53;
            uint64_t v55 = (_OWORD *)(v44 + 8 * v41 - 16);
            v56 = (long long *)(v48 - 16);
            uint64_t v57 = v52 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v58 = *v56;
              *(v55 - 1) = *(v56 - 1);
              _OWORD *v55 = v58;
              v55 -= 2;
              v56 -= 2;
              v57 -= 4;
            }
            while (v57);
            uint64_t v48 = v54;
            if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_110:
              do
              {
                uint64_t v59 = *(void *)(v48 - 8);
                v48 -= 8;
                *((void *)v46 - 1) = v59;
                v46 -= 8;
              }
              while (v48 != v47);
            }
            uint64_t v48 = (uint64_t)v106;
            int64x2_t v106 = v46;
            int64x2_t v107 = v38;
            uint64_t v50 = v108;
            uint32x4_t v108 = (char *)(v44 + 8 * v45);
            if (!v48) {
              goto LABEL_33;
            }
LABEL_54:
            uint16x8_t v103 = (void *)v48;
            int v104 = (unint64_t)&v50[-v48] >> 3;
            if (HIDWORD(v109) == -1) {
              sub_215742D4C();
            }
            int64x2_t v105 = &v103;
            ((void (*)(void ***, uint64_t *))off_26C6820F8[HIDWORD(v109)])(&v105, &v109);
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v44 = 0;
          uint64_t v45 = 0;
          v46 = (char *)(8 * v41);
          *(void *)(8 * v41) = v39;
          uint64_t v38 = (char *)(8 * v41 + 8);
          unint64_t v47 = (unint64_t)v106;
          uint64_t v48 = (uint64_t)v107;
          int64_t v49 = v107 - v106;
          if (v107 != v106) {
            goto LABEL_47;
          }
        }
        int64x2_t v106 = v46;
        int64x2_t v107 = v38;
        uint64_t v50 = v108;
        uint32x4_t v108 = (char *)(v44 + 8 * v45);
        if (v48) {
          goto LABEL_54;
        }
      }
LABEL_33:
      int64x2_t v107 = v38;
      v35 += 8;
      if (v35 == v34)
      {
        unint64_t v60 = (unint64_t)v106;
        unint64_t v36 = (unint64_t)v108;
        goto LABEL_58;
      }
    }
  }
  unint64_t v60 = 0;
  uint64_t v38 = 0;
LABEL_58:
  uint64_t v61 = v109;
  *(void *)(a1 + 224) = v60;
  *(void *)(a1 + 232) = v38;
  *(void *)(a1 + 240) = v36;
  *(void *)(a1 + 248) = v61;
  uint64_t v63 = (char *)a2[22];
  uint64_t v62 = (char *)a2[23];
  HIDWORD(v109) = 0;
  int64x2_t v107 = 0;
  uint32x4_t v108 = 0;
  int64x2_t v106 = 0;
  unint64_t v64 = v62 - v63;
  if (v62 != v63)
  {
    if ((v64 & 0x8000000000000000) != 0) {
      sub_215738AC0();
    }
    uint64_t v65 = (v64 >> 3);
    unint64_t v66 = (char *)operator new(8 * v65);
    int64x2_t v106 = v66;
    int64x2_t v107 = v66;
    uint32x4_t v108 = &v66[8 * v65];
    while (1)
    {
      int v68 = *(_DWORD *)v63;
      int v67 = *((_DWORD *)v63 + 1);
      if (v66 < v108)
      {
        *(_DWORD *)unint64_t v66 = v68;
        *((_DWORD *)v66 + 1) = v67;
        v66 += 8;
        goto LABEL_62;
      }
      v69 = (char *)(v66 - v106);
      uint64_t v70 = (v66 - v106) >> 3;
      if ((unint64_t)(v70 + 1) >> 61) {
        sub_215738AC0();
      }
      unint64_t v71 = (v108 - v106) >> 2;
      if (v71 <= v70 + 1) {
        unint64_t v71 = v70 + 1;
      }
      uint64_t v72 = (unint64_t)(v108 - v106) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v71;
      if (v72)
      {
        LODWORD(v105) = v72;
        if (HIDWORD(v109) == -1) {
          sub_215742D4C();
        }
        uint16x8_t v103 = &v105;
        uint64_t v73 = ((uint64_t (*)(void **, uint64_t *))off_26C682108[HIDWORD(v109)])(&v103, &v109);
        unint64_t v75 = (char *)(v73 + 8 * v70);
        *(_DWORD *)unint64_t v75 = v68;
        *((_DWORD *)v75 + 1) = v67;
        unint64_t v76 = (unint64_t)v106;
        uint64_t v77 = (uint64_t)v107;
        int64_t v78 = v107 - v106;
        if (v107 == v106)
        {
LABEL_76:
          unint64_t v66 = v75 + 8;
          int64x2_t v106 = v75;
          int64x2_t v107 = v75 + 8;
          int64x2_t v81 = v108;
          uint32x4_t v108 = (char *)(v73 + 8 * v74);
          if (v77) {
            goto LABEL_84;
          }
          goto LABEL_62;
        }
      }
      else
      {
        uint64_t v73 = 0;
        uint64_t v74 = 0;
        unint64_t v75 = (char *)(8 * v70);
        *(_DWORD *)unint64_t v75 = v68;
        *((_DWORD *)v75 + 1) = v67;
        unint64_t v76 = (unint64_t)v106;
        uint64_t v77 = (uint64_t)v107;
        int64_t v78 = v107 - v106;
        if (v107 == v106) {
          goto LABEL_76;
        }
      }
      unint64_t v79 = v78 - 8;
      if ((unint64_t)(v78 - 8) < 0x58) {
        break;
      }
      unint64_t v80 = (unint64_t)v75;
      if ((unint64_t)(v77 - v73 - (void)v69) < 0x20) {
        goto LABEL_82;
      }
      uint64_t v82 = (v79 >> 3) + 1;
      uint64_t v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v84 = v77 - v83;
      unint64_t v80 = (unint64_t)&v75[-v83];
      int64x2_t v85 = (_OWORD *)(v73 + 8 * v70 - 16);
      int64x2_t v86 = (long long *)(v77 - 16);
      uint64_t v87 = v82 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v88 = *v86;
        *(v85 - 1) = *(v86 - 1);
        *int64x2_t v85 = v88;
        v85 -= 2;
        v86 -= 2;
        v87 -= 4;
      }
      while (v87);
      uint64_t v77 = v84;
      if (v82 != (v82 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_82;
      }
LABEL_83:
      uint64_t v77 = (uint64_t)v106;
      unint64_t v66 = v75 + 8;
      int64x2_t v106 = (char *)v80;
      int64x2_t v107 = v75 + 8;
      int64x2_t v81 = v108;
      uint32x4_t v108 = (char *)(v73 + 8 * v74);
      if (v77)
      {
LABEL_84:
        uint16x8_t v103 = (void *)v77;
        int v104 = (unint64_t)&v81[-v77] >> 3;
        if (HIDWORD(v109) == -1) {
          sub_215742D4C();
        }
        int64x2_t v105 = &v103;
        ((void (*)(void ***, uint64_t *))off_26C682118[HIDWORD(v109)])(&v105, &v109);
      }
LABEL_62:
      int64x2_t v107 = v66;
      v63 += 8;
      if (v63 == v62)
      {
        unint64_t v90 = (unint64_t)v106;
        unint64_t v64 = (unint64_t)v108;
        goto LABEL_88;
      }
    }
    unint64_t v80 = (unint64_t)v75;
    do
    {
LABEL_82:
      uint64_t v89 = *(void *)(v77 - 8);
      v77 -= 8;
      *(void *)(v80 - 8) = v89;
      v80 -= 8;
    }
    while (v77 != v76);
    goto LABEL_83;
  }
  unint64_t v90 = 0;
  unint64_t v66 = 0;
LABEL_88:
  uint64_t v91 = v109;
  *(void *)(a1 + 256) = v90;
  *(void *)(a1 + 264) = v66;
  *(void *)(a1 + 272) = v64;
  *(void *)(a1 + 280) = v91;
  unint64_t v92 = 0xAAAAAAAAAAAAAAABLL * ((a2[27] - a2[26]) >> 2);
  HIDWORD(v109) = 0;
  int64x2_t v107 = 0;
  uint32x4_t v108 = 0;
  int64x2_t v106 = 0;
  sub_215CF4080((uint64_t)&v106, v92);
  uint64_t v93 = a2[26];
  uint64_t v94 = a2[27];
  if (v93 == v94)
  {
    unint64_t v95 = (unint64_t)v107;
  }
  else
  {
    unint64_t v95 = (unint64_t)v107;
    do
    {
      int v97 = *(_DWORD *)(v93 + 8);
      uint16x8_t v103 = *(void **)v93;
      int v104 = v97;
      if (v95 < (unint64_t)v108)
      {
        uint64_t v96 = (uint64_t)v103;
        *(_DWORD *)(v95 + 8) = v104;
        *(void *)unint64_t v95 = v96;
        v95 += 12;
      }
      else
      {
        unint64_t v95 = sub_215CF41E4((unint64_t *)&v106, (uint64_t *)&v103);
      }
      int64x2_t v107 = (char *)v95;
      v93 += 12;
    }
    while (v93 != v94);
  }
  int8x16_t v99 = v108;
  uint64_t v98 = v109;
  *(void *)(a1 + 288) = v106;
  *(void *)(a1 + 296) = v95;
  *(void *)(a1 + 304) = v99;
  *(void *)(a1 + 312) = v98;
  *(unsigned char *)(a1 + 320) = 0;
  *(unsigned char *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 348) = *((_DWORD *)a2 + 88);
  sub_2159BB61C((void *)(a1 + 352), (uint64_t)(a2 + 40));
  if (*((unsigned char *)a2 + 380))
  {
    if (*(unsigned char *)(a1 + 344)) {
      *(unsigned char *)(a1 + 344) = 0;
    }
    int v100 = *((_DWORD *)a2 + 91);
    *(void *)(a1 + 320) = *(uint64_t *)((char *)a2 + 356);
    *(_DWORD *)(a1 + 328) = v100;
    int v101 = *((_DWORD *)a2 + 94);
    *(void *)(a1 + 332) = a2[46];
    *(_DWORD *)(a1 + 340) = v101;
    *(unsigned char *)(a1 + 344) = 1;
  }
  return a1;
}

void sub_215CF33D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t *a11)
{
  sub_2159A04E4(v12);
  sub_2159A0574(v11 + 32);
  sub_2159A05F8(v11 + 28);
  sub_2159A04E4(v11 + 24);
  sub_2159A067C(a10);
  sub_2159A067C(a11);
  sub_2159A06FC(v11 + 10);
  sub_2159A06FC(v11 + 5);
  sub_2159A06FC(v11);
  _Unwind_Resume(a1);
}

void sub_215CF34D4(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_215CEC2A8(a3, a2);
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
  uint64_t v9 = *(void *)a3;
  uint64_t v8 = *(void *)(a3 + 8);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a3) >> 2);
  if (v7 <= v10)
  {
    if (v7 < v10)
    {
      uint64_t v8 = v9 + 4 * ((v5 - *a1) >> 2);
      *(void *)(a3 + 8) = v8;
    }
  }
  else
  {
    sub_215954C34(a3, v7 - v10);
    uint64_t v6 = *a1;
    uint64_t v5 = a1[1];
    uint64_t v9 = *(void *)a3;
    uint64_t v8 = *(void *)(a3 + 8);
  }
  if (v6 != v5 || v9 != v8)
  {
    uint64_t v11 = v9 + 12;
    uint64_t v12 = v6 + 12;
    do
    {
      do
      {
        uint64_t v13 = v11;
        uint64_t v14 = v12;
        uint64_t v15 = *(void *)(v12 - 12);
        *(_DWORD *)(v11 - 4) = *(_DWORD *)(v14 - 4);
        *(void *)(v11 - 12) = v15;
        v11 += 12;
        uint64_t v12 = v14 + 12;
      }
      while (v14 != v5);
    }
    while (v13 != v8);
  }
  uint64_t v16 = *(void *)(a3 + 32);
  *(_DWORD *)(a3 + 64) = *((_DWORD *)a1 + 8);
  uint64_t v18 = a1[5];
  uint64_t v17 = a1[6];
  unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 2);
  uint64_t v20 = *(void *)(a3 + 40);
  unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v16) >> 2);
  if (v19 <= v21)
  {
    if (v19 < v21)
    {
      uint64_t v20 = v16 + 4 * ((v17 - v18) >> 2);
      *(void *)(a3 + 40) = v20;
    }
  }
  else
  {
    sub_215954C34(a3 + 32, v19 - v21);
    uint64_t v18 = a1[5];
    uint64_t v17 = a1[6];
    uint64_t v16 = *(void *)(a3 + 32);
    uint64_t v20 = *(void *)(a3 + 40);
  }
  if (v18 != v17 || v16 != v20)
  {
    uint64_t v22 = v16 + 12;
    uint64_t v23 = v18 + 12;
    do
    {
      do
      {
        uint64_t v24 = v22;
        uint64_t v25 = v23;
        uint64_t v26 = *(void *)(v23 - 12);
        *(_DWORD *)(v22 - 4) = *(_DWORD *)(v25 - 4);
        *(void *)(v22 - 12) = v26;
        v22 += 12;
        uint64_t v23 = v25 + 12;
      }
      while (v25 != v17);
    }
    while (v24 != v20);
  }
  uint64_t v27 = *(void *)(a3 + 72);
  *(_DWORD *)(a3 + 104) = *((_DWORD *)a1 + 18);
  uint64_t v29 = a1[10];
  uint64_t v28 = a1[11];
  unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((v28 - v29) >> 2);
  uint64_t v31 = *(void *)(a3 + 80);
  unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v27) >> 2);
  if (v30 <= v32)
  {
    if (v30 < v32)
    {
      uint64_t v31 = v27 + 4 * ((v28 - v29) >> 2);
      *(void *)(a3 + 80) = v31;
    }
  }
  else
  {
    sub_215954C34(a3 + 72, v30 - v32);
    uint64_t v29 = a1[10];
    uint64_t v28 = a1[11];
    uint64_t v27 = *(void *)(a3 + 72);
    uint64_t v31 = *(void *)(a3 + 80);
  }
  if (v29 != v28 || v27 != v31)
  {
    uint64_t v33 = v27 + 12;
    uint64_t v34 = v29 + 12;
    do
    {
      do
      {
        uint64_t v35 = v33;
        uint64_t v36 = v34;
        uint64_t v37 = *(void *)(v34 - 12);
        *(_DWORD *)(v33 - 4) = *(_DWORD *)(v36 - 4);
        *(void *)(v33 - 12) = v37;
        v33 += 12;
        uint64_t v34 = v36 + 12;
      }
      while (v36 != v28);
    }
    while (v35 != v31);
  }
  uint64_t v38 = *(void *)(a3 + 240);
  *(_DWORD *)(a3 + 272) = *((_DWORD *)a1 + 28);
  uint64_t v39 = (unsigned char *)a1[15];
  uint64_t v40 = (unsigned char *)a1[16];
  unint64_t v41 = *(void *)(a3 + 248) - v38;
  BOOL v42 = v40 - v39 >= v41;
  size_t v43 = v40 - v39 - v41;
  if (v43 != 0 && v42)
  {
    sub_215957E5C(a3 + 240, v43);
    uint64_t v39 = (unsigned char *)a1[15];
    uint64_t v40 = (unsigned char *)a1[16];
  }
  else if (!v42)
  {
    *(void *)(a3 + 248) = v38 + v40 - v39;
  }
  if (v40 != v39) {
    memmove(*(void **)(a3 + 240), v39, v40 - v39);
  }
  *(_DWORD *)(a3 + 312) = *((_DWORD *)a1 + 38);
  uint64_t v44 = (unsigned char *)a1[20];
  uint64_t v45 = (unsigned char *)a1[21];
  uint64_t v46 = *(void *)(a3 + 280);
  unint64_t v47 = *(void *)(a3 + 288) - v46;
  BOOL v48 = v45 - v44 >= v47;
  size_t v49 = v45 - v44 - v47;
  if (v49 != 0 && v48)
  {
    sub_215957E5C(a3 + 280, v49);
    uint64_t v44 = (unsigned char *)a1[20];
    uint64_t v45 = (unsigned char *)a1[21];
  }
  else if (!v48)
  {
    *(void *)(a3 + 288) = v46 + v45 - v44;
  }
  if (v45 != v44) {
    memmove(*(void **)(a3 + 280), v44, v45 - v44);
  }
  uint64_t v51 = a1[24];
  uint64_t v50 = a1[25];
  unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((v50 - v51) >> 2);
  uint64_t v54 = *(void *)(a3 + 112);
  uint64_t v53 = *(void *)(a3 + 120);
  unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((v53 - v54) >> 2);
  if (v52 <= v55)
  {
    if (v52 < v55)
    {
      uint64_t v53 = v54 + 4 * ((v50 - v51) >> 2);
      *(void *)(a3 + 120) = v53;
    }
  }
  else
  {
    sub_2159551D8(a3 + 112, v52 - v55);
    uint64_t v51 = a1[24];
    uint64_t v50 = a1[25];
    uint64_t v54 = *(void *)(a3 + 112);
    uint64_t v53 = *(void *)(a3 + 120);
  }
  if (v51 != v50 || v54 != v53)
  {
    uint64_t v56 = v54 + 12;
    uint64_t v57 = v51 + 12;
    do
    {
      do
      {
        uint64_t v58 = v56;
        uint64_t v59 = v57;
        uint64_t v60 = *(void *)(v57 - 12);
        *(_DWORD *)(v56 - 4) = *(_DWORD *)(v59 - 4);
        *(void *)(v56 - 12) = v60;
        v56 += 12;
        uint64_t v57 = v59 + 12;
      }
      while (v59 != v50);
    }
    while (v58 != v53);
  }
  unint64_t v62 = *(void *)(a3 + 144);
  unint64_t v61 = *(void *)(a3 + 152);
  uint64_t v64 = a1[28];
  uint64_t v63 = a1[29];
  uint64_t v65 = v63 - v64;
  unint64_t v66 = (v63 - v64) >> 3;
  unint64_t v67 = v61 - v62;
  unint64_t v68 = (uint64_t)(v61 - v62) >> 3;
  unint64_t v69 = v66 - v68;
  if (v66 <= v68)
  {
    if (v66 < v68)
    {
      unint64_t v61 = v62 + 8 * v66;
      *(void *)(a3 + 152) = v61;
    }
  }
  else
  {
    uint64_t v70 = *(void *)(a3 + 160);
    if (v69 <= (uint64_t)(v70 - v61) >> 3)
    {
      v61 += 8 * v69;
      *(void *)(a3 + 152) = v61;
    }
    else
    {
      if (v65 < 0) {
        sub_215738AC0();
      }
      unint64_t v71 = v70 - v62;
      unint64_t v72 = (uint64_t)(v70 - v62) >> 2;
      if (v72 <= v66) {
        LODWORD(v72) = v66;
      }
      if (v71 >= 0x7FFFFFFFFFFFFFF8) {
        int v73 = -1;
      }
      else {
        int v73 = v72;
      }
      LODWORD(v154) = v73;
      uint64_t v74 = *(unsigned int *)(a3 + 172);
      if (v74 == -1) {
        goto LABEL_135;
      }
      size_t v152 = (char *)&v154;
      uint64_t v75 = ((uint64_t (*)(char **, uint64_t))off_26C682128[v74])(&v152, a3 + 168);
      uint64_t v77 = *(char **)(a3 + 144);
      int64_t v78 = *(char **)(a3 + 152);
      unint64_t v62 = v75 + 8 * v68;
      unint64_t v61 = v62 + 8 * v69;
      if (v78 != v77)
      {
        unint64_t v79 = v78 - v77 - 8;
        if (v79 < 0x58) {
          goto LABEL_142;
        }
        if ((unint64_t)&v78[-v75 - v67] < 0x20) {
          goto LABEL_142;
        }
        uint64_t v80 = (v79 >> 3) + 1;
        uint64_t v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v82 = &v78[-v81];
        v62 -= v81;
        uint64_t v83 = (_OWORD *)(v75 + 8 * v68 - 16);
        uint64_t v84 = (long long *)(v78 - 16);
        uint64_t v85 = v80 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v86 = *v84;
          *(v83 - 1) = *(v84 - 1);
          *uint64_t v83 = v86;
          v83 -= 2;
          v84 -= 2;
          v85 -= 4;
        }
        while (v85);
        int64_t v78 = v82;
        if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_142:
          do
          {
            uint64_t v87 = *((void *)v78 - 1);
            v78 -= 8;
            *(void *)(v62 - 8) = v87;
            v62 -= 8;
          }
          while (v78 != v77);
        }
        uint64_t v77 = *(char **)(a3 + 144);
      }
      *(void *)(a3 + 144) = v62;
      *(void *)(a3 + 152) = v61;
      uint64_t v88 = *(void *)(a3 + 160);
      *(void *)(a3 + 160) = v75 + 8 * v76;
      if (v77)
      {
        size_t v152 = v77;
        int v153 = (unint64_t)(v88 - (void)v77) >> 3;
        uint64_t v89 = *(unsigned int *)(a3 + 172);
        if (v89 == -1) {
          sub_215742D4C();
        }
        v154 = &v152;
        ((void (*)(char ***, uint64_t))off_26C682138[v89])(&v154, a3 + 168);
        unint64_t v62 = *(void *)(a3 + 144);
        unint64_t v61 = *(void *)(a3 + 152);
      }
    }
    uint64_t v64 = a1[28];
    uint64_t v63 = a1[29];
  }
  if (v64 != v63 || v62 != v61)
  {
    unint64_t v91 = v62 + 8;
    uint64_t v92 = v64 + 8;
    do
    {
      do
      {
        unint64_t v93 = v91;
        uint64_t v94 = v92;
        *(void *)(v91 - 8) = *(void *)(v92 - 8);
        v91 += 8;
        v92 += 8;
      }
      while (v94 != v63);
    }
    while (v93 != v61);
  }
  unint64_t v96 = *(void *)(a3 + 176);
  unint64_t v95 = *(void *)(a3 + 184);
  uint64_t v98 = a1[32];
  uint64_t v97 = a1[33];
  uint64_t v99 = v97 - v98;
  unint64_t v100 = (v97 - v98) >> 3;
  unint64_t v101 = v95 - v96;
  unint64_t v102 = (uint64_t)(v95 - v96) >> 3;
  unint64_t v103 = v100 - v102;
  if (v100 > v102)
  {
    uint64_t v104 = *(void *)(a3 + 192);
    if (v103 <= (uint64_t)(v104 - v95) >> 3)
    {
      v95 += 8 * v103;
      *(void *)(a3 + 184) = v95;
LABEL_105:
      uint64_t v98 = a1[32];
      uint64_t v97 = a1[33];
      goto LABEL_106;
    }
    if (v99 < 0) {
      sub_215738AC0();
    }
    unint64_t v105 = v104 - v96;
    unint64_t v106 = (uint64_t)(v104 - v96) >> 2;
    if (v106 <= v100) {
      LODWORD(v106) = v100;
    }
    if (v105 >= 0x7FFFFFFFFFFFFFF8) {
      int v107 = -1;
    }
    else {
      int v107 = v106;
    }
    LODWORD(v154) = v107;
    uint64_t v108 = *(unsigned int *)(a3 + 204);
    if (v108 != -1)
    {
      size_t v152 = (char *)&v154;
      uint64_t v109 = ((uint64_t (*)(char **, uint64_t))off_26C682148[v108])(&v152, a3 + 200);
      uint8x16_t v111 = *(char **)(a3 + 176);
      uint16x8_t v112 = *(char **)(a3 + 184);
      unint64_t v96 = v109 + 8 * v102;
      unint64_t v95 = v96 + 8 * v103;
      if (v112 != v111)
      {
        unint64_t v113 = v112 - v111 - 8;
        if (v113 < 0x58) {
          goto LABEL_143;
        }
        if ((unint64_t)&v112[-v109 - v101] < 0x20) {
          goto LABEL_143;
        }
        uint64_t v114 = (v113 >> 3) + 1;
        uint64_t v115 = 8 * (v114 & 0x3FFFFFFFFFFFFFFCLL);
        uint32x4_t v116 = &v112[-v115];
        v96 -= v115;
        int64x2_t v117 = (_OWORD *)(v109 + 8 * v102 - 16);
        uint16x8_t v118 = (long long *)(v112 - 16);
        uint64_t v119 = v114 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v120 = *v118;
          *(v117 - 1) = *(v118 - 1);
          *int64x2_t v117 = v120;
          v117 -= 2;
          v118 -= 2;
          v119 -= 4;
        }
        while (v119);
        uint16x8_t v112 = v116;
        if (v114 != (v114 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_143:
          do
          {
            uint64_t v121 = *((void *)v112 - 1);
            v112 -= 8;
            *(void *)(v96 - 8) = v121;
            v96 -= 8;
          }
          while (v112 != v111);
        }
        uint8x16_t v111 = *(char **)(a3 + 176);
      }
      *(void *)(a3 + 176) = v96;
      *(void *)(a3 + 184) = v95;
      uint64_t v122 = *(void *)(a3 + 192);
      *(void *)(a3 + 192) = v109 + 8 * v110;
      if (v111)
      {
        size_t v152 = v111;
        int v153 = (unint64_t)(v122 - (void)v111) >> 3;
        uint64_t v123 = *(unsigned int *)(a3 + 204);
        if (v123 == -1) {
          sub_215742D4C();
        }
        v154 = &v152;
        ((void (*)(char ***, uint64_t))off_26C682158[v123])(&v154, a3 + 200);
        unint64_t v96 = *(void *)(a3 + 176);
        unint64_t v95 = *(void *)(a3 + 184);
      }
      goto LABEL_105;
    }
LABEL_135:
    sub_215742D4C();
  }
  if (v100 < v102)
  {
    unint64_t v95 = v96 + 8 * v100;
    *(void *)(a3 + 184) = v95;
  }
LABEL_106:
  if (v98 != v97 || v96 != v95)
  {
    unint64_t v125 = v96 + 8;
    uint64_t v126 = v98 + 8;
    do
    {
      do
      {
        unint64_t v127 = v125;
        uint64_t v128 = v126;
        *(void *)(v125 - 8) = *(void *)(v126 - 8);
        v125 += 8;
        v126 += 8;
      }
      while (v128 != v97);
    }
    while (v127 != v95);
  }
  uint64_t v130 = a1[36];
  uint64_t v129 = a1[37];
  unint64_t v131 = 0xAAAAAAAAAAAAAAABLL * ((v129 - v130) >> 2);
  uint64_t v133 = *(void *)(a3 + 208);
  uint64_t v132 = *(void *)(a3 + 216);
  unint64_t v134 = 0xAAAAAAAAAAAAAAABLL * ((v132 - v133) >> 2);
  if (v131 <= v134)
  {
    if (v131 < v134)
    {
      uint64_t v132 = v133 + 4 * ((v129 - v130) >> 2);
      *(void *)(a3 + 216) = v132;
    }
  }
  else
  {
    sub_2159551D8(a3 + 208, v131 - v134);
    uint64_t v130 = a1[36];
    uint64_t v129 = a1[37];
    uint64_t v133 = *(void *)(a3 + 208);
    uint64_t v132 = *(void *)(a3 + 216);
  }
  if (v130 != v129 || v133 != v132)
  {
    uint64_t v135 = v133 + 12;
    uint64_t v136 = v130 + 12;
    do
    {
      do
      {
        uint64_t v137 = v135;
        uint64_t v138 = v136;
        uint64_t v139 = *(void *)(v136 - 12);
        *(_DWORD *)(v135 - 4) = *(_DWORD *)(v138 - 4);
        *(void *)(v135 - 12) = v139;
        v135 += 12;
        uint64_t v136 = v138 + 12;
      }
      while (v138 != v129);
    }
    while (v137 != v132);
  }
  if (*((unsigned char *)a1 + 344))
  {
    uint64_t v140 = a1[40];
    uint64_t v141 = *(uint64_t *)((char *)a1 + 332);
    int v142 = *((_DWORD *)a1 + 85);
    int v143 = *(unsigned __int8 *)(a3 + 380);
    *(_DWORD *)(a3 + 364) = *((_DWORD *)a1 + 82);
    *(void *)(a3 + 356) = v140;
    *(_DWORD *)(a3 + 376) = v142;
    *(void *)(a3 + 368) = v141;
    if (!v143) {
      *(unsigned char *)(a3 + 380) = 1;
    }
  }
  *(_DWORD *)(a3 + 352) = *((_DWORD *)a1 + 87);
  v144 = (unsigned char *)a1[44];
  size_t v145 = (unsigned char *)a1[45];
  unint64_t v146 = (v145 - v144) >> 2;
  uint64_t v147 = *(void *)(a3 + 320);
  unint64_t v148 = (*(void *)(a3 + 328) - v147) >> 2;
  BOOL v149 = v146 >= v148;
  unint64_t v150 = v146 - v148;
  if (v150 != 0 && v149)
  {
    sub_215958438(a3 + 320, v150);
    v144 = (unsigned char *)a1[44];
    size_t v145 = (unsigned char *)a1[45];
  }
  else if (!v149)
  {
    *(void *)(a3 + 328) = v147 + 4 * v146;
  }
  if (v145 != v144)
  {
    v151 = *(void **)(a3 + 320);
    memmove(v151, v144, v145 - v144);
  }
}

void sub_215CF3D7C(_Unwind_Exception *a1)
{
  sub_215956690(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215CF3D90(uint64_t result, unint64_t a2)
{
  uint64_t v2 = *(void *)result;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(result + 16) - *(void *)result) >> 2) < a2)
  {
    uint64_t v3 = result;
    if (a2 >= 0x1555555555555556) {
      sub_215738AC0();
    }
    uint64_t v4 = *(void *)(result + 8);
    LODWORD(v18) = a2;
    uint64_t v5 = *(unsigned int *)(result + 28);
    if (v5 == -1) {
      sub_215742D4C();
    }
    uint64_t v6 = (unsigned __int128)((v4 - v2) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
    uint64_t v7 = (v6 >> 1) + ((unint64_t)v6 >> 63);
    uint64_t v16 = &v18;
    double result = ((uint64_t (*)(void ***, uint64_t))off_26C6820A8[v5])(&v16, result + 24);
    uint64_t v10 = *(void *)v3;
    uint64_t v9 = *(void *)(v3 + 8);
    uint64_t v11 = result + 12 * v7;
    if (v9 != *(void *)v3)
    {
      do
      {
        uint64_t v12 = *(void *)(v9 - 12);
        v9 -= 12;
        int v13 = *(_DWORD *)(v9 + 8);
        *(void *)(v11 - 12) = v12;
        v11 -= 12;
        *(_DWORD *)(v11 + 8) = v13;
      }
      while (v9 != v10);
      uint64_t v9 = *(void *)v3;
    }
    *(void *)uint64_t v3 = v11;
    *(void *)(v3 + 8) = result + 12 * v7;
    uint64_t v14 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = result + 12 * v8;
    if (v9)
    {
      uint64_t v16 = (void **)v9;
      int v17 = -1431655765 * ((unint64_t)(v14 - v9) >> 2);
      uint64_t v15 = *(unsigned int *)(v3 + 28);
      if (v15 == -1) {
        sub_215742D4C();
      }
      uint64_t v18 = &v16;
      return ((uint64_t (*)(void **, uint64_t))off_26C6820B8[v15])(&v18, v3 + 24);
    }
  }
  return result;
}

unint64_t sub_215CF3EF4(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = 0x1555555555555555;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555) {
    sub_215738AC0();
  }
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2) > v5) {
    unint64_t v5 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 2) < 0xAAAAAAAAAAAAAAALL) {
    uint64_t v3 = v5;
  }
  if (v3)
  {
    LODWORD(v22) = v3;
    uint64_t v7 = *((unsigned int *)a1 + 7);
    if (v7 == -1) {
      sub_215742D4C();
    }
    uint64_t v20 = &v22;
    uint64_t v8 = ((uint64_t (*)(void ***, unint64_t *))off_26C6820A8[v7])(&v20, a1 + 3);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  unint64_t v10 = v8 + 12 * v4;
  uint64_t v11 = *a2;
  *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 + 2);
  *(void *)unint64_t v10 = v11;
  unint64_t v12 = v10 + 12;
  unint64_t v14 = *a1;
  unint64_t v13 = a1[1];
  if (v13 != *a1)
  {
    do
    {
      uint64_t v15 = *(void *)(v13 - 12);
      v13 -= 12;
      int v16 = *(_DWORD *)(v13 + 8);
      *(void *)(v10 - 12) = v15;
      v10 -= 12;
      *(_DWORD *)(v10 + 8) = v16;
    }
    while (v13 != v14);
    unint64_t v13 = *a1;
  }
  *a1 = v10;
  a1[1] = v12;
  unint64_t v17 = a1[2];
  a1[2] = v8 + 12 * v9;
  if (v13)
  {
    uint64_t v20 = (void **)v13;
    int v21 = -1431655765 * ((v17 - v13) >> 2);
    uint64_t v18 = *((unsigned int *)a1 + 7);
    if (v18 == -1) {
      sub_215742D4C();
    }
    uint64_t v22 = &v20;
    ((void (*)(void **, unint64_t *))off_26C6820B8[v18])(&v22, a1 + 3);
  }
  return v12;
}

uint64_t sub_215CF4080(uint64_t result, unint64_t a2)
{
  uint64_t v2 = *(void *)result;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(result + 16) - *(void *)result) >> 2) < a2)
  {
    uint64_t v3 = result;
    if (a2 >= 0x1555555555555556) {
      sub_215738AC0();
    }
    uint64_t v4 = *(void *)(result + 8);
    LODWORD(v18) = a2;
    uint64_t v5 = *(unsigned int *)(result + 28);
    if (v5 == -1) {
      sub_215742D4C();
    }
    uint64_t v6 = (unsigned __int128)((v4 - v2) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
    uint64_t v7 = (v6 >> 1) + ((unint64_t)v6 >> 63);
    int v16 = &v18;
    double result = ((uint64_t (*)(void ***, uint64_t))off_26C6820C8[v5])(&v16, result + 24);
    uint64_t v10 = *(void *)v3;
    uint64_t v9 = *(void *)(v3 + 8);
    uint64_t v11 = result + 12 * v7;
    if (v9 != *(void *)v3)
    {
      do
      {
        uint64_t v12 = *(void *)(v9 - 12);
        v9 -= 12;
        int v13 = *(_DWORD *)(v9 + 8);
        *(void *)(v11 - 12) = v12;
        v11 -= 12;
        *(_DWORD *)(v11 + 8) = v13;
      }
      while (v9 != v10);
      uint64_t v9 = *(void *)v3;
    }
    *(void *)uint64_t v3 = v11;
    *(void *)(v3 + 8) = result + 12 * v7;
    uint64_t v14 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = result + 12 * v8;
    if (v9)
    {
      int v16 = (void **)v9;
      int v17 = -1431655765 * ((unint64_t)(v14 - v9) >> 2);
      uint64_t v15 = *(unsigned int *)(v3 + 28);
      if (v15 == -1) {
        sub_215742D4C();
      }
      uint64_t v18 = &v16;
      return ((uint64_t (*)(void **, uint64_t))off_26C6820D8[v15])(&v18, v3 + 24);
    }
  }
  return result;
}

unint64_t sub_215CF41E4(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = 0x1555555555555555;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555) {
    sub_215738AC0();
  }
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2) > v5) {
    unint64_t v5 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 2) < 0xAAAAAAAAAAAAAAALL) {
    uint64_t v3 = v5;
  }
  if (v3)
  {
    LODWORD(v22) = v3;
    uint64_t v7 = *((unsigned int *)a1 + 7);
    if (v7 == -1) {
      sub_215742D4C();
    }
    uint64_t v20 = &v22;
    uint64_t v8 = ((uint64_t (*)(void ***, unint64_t *))off_26C6820C8[v7])(&v20, a1 + 3);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  unint64_t v10 = v8 + 12 * v4;
  uint64_t v11 = *a2;
  *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 + 2);
  *(void *)unint64_t v10 = v11;
  unint64_t v12 = v10 + 12;
  unint64_t v14 = *a1;
  unint64_t v13 = a1[1];
  if (v13 != *a1)
  {
    do
    {
      uint64_t v15 = *(void *)(v13 - 12);
      v13 -= 12;
      int v16 = *(_DWORD *)(v13 + 8);
      *(void *)(v10 - 12) = v15;
      v10 -= 12;
      *(_DWORD *)(v10 + 8) = v16;
    }
    while (v13 != v14);
    unint64_t v13 = *a1;
  }
  *a1 = v10;
  a1[1] = v12;
  unint64_t v17 = a1[2];
  a1[2] = v8 + 12 * v9;
  if (v13)
  {
    uint64_t v20 = (void **)v13;
    int v21 = -1431655765 * ((v17 - v13) >> 2);
    uint64_t v18 = *((unsigned int *)a1 + 7);
    if (v18 == -1) {
      sub_215742D4C();
    }
    uint64_t v22 = &v20;
    ((void (*)(void **, unint64_t *))off_26C6820D8[v18])(&v22, a1 + 3);
  }
  return v12;
}

void sub_215CF4374()
{
}

std::__fs::filesystem::path *sub_215CF4388@<X0>(std::__fs::filesystem::path *a1@<X1>, std::__fs::filesystem::path *a2@<X8>)
{
  return std::__fs::filesystem::__absolute(a2, a1, 0);
}

std::__fs::filesystem::path *sub_215CF4394@<X0>(std::__fs::filesystem::path *a1@<X1>, std::__fs::filesystem::path *a2@<X8>)
{
  return std::__fs::filesystem::__canonical(a2, a1, 0);
}

std::__fs::filesystem::path *sub_215CF43A0@<X0>(std::__fs::filesystem::path *__p@<X1>, std::__fs::filesystem::path *a2@<X8>)
{
  return std::__fs::filesystem::__weakly_canonical(a2, __p, 0);
}

void sub_215CF43AC(std::__fs::filesystem::path *a1@<X1>, std::__fs::filesystem::path *a2@<X8>)
{
  std::__fs::filesystem::__current_path(&v4, 0);
  sub_215CF4430(a2, a1, &v4);
  if (SHIBYTE(v4.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_215CF4414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215CF4430(std::__fs::filesystem::path *a1, std::__fs::filesystem::path *__p, const std::__fs::filesystem::path *a3)
{
  std::__fs::filesystem::__weakly_canonical(&v6, __p, 0);
  std::__fs::filesystem::__weakly_canonical(&__pa, a3, 0);
  std::__fs::filesystem::path::lexically_relative(a1, &v6, &__pa);
  if ((SHIBYTE(__pa.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    operator delete(v6.__pn_.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__pa.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_5;
  }
}

void sub_215CF44C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_215CF4510(std::__fs::filesystem::path *a1@<X1>, const std::__fs::filesystem::path *a2@<X2>, std::__fs::filesystem::path *a3@<X8>)
{
}

void sub_215CF4518(std::__fs::filesystem::path *a1@<X1>, std::__fs::filesystem::path *a2@<X8>)
{
  std::__fs::filesystem::__current_path(&v4, 0);
  sub_215CF459C(a2, a1, &v4);
  if (SHIBYTE(v4.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_215CF4580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215CF459C(std::__fs::filesystem::path *a1, std::__fs::filesystem::path *__p, const std::__fs::filesystem::path *a3)
{
  std::__fs::filesystem::__weakly_canonical(&v8, __p, 0);
  std::__fs::filesystem::__weakly_canonical(&__base, a3, 0);
  std::__fs::filesystem::path::lexically_relative(&v9, &v8, &__base);
  std::string::size_type size = HIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]);
  char v6 = HIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]);
  if ((v9.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v9.__pn_.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    *a1 = v9;
    goto LABEL_8;
  }
  if ((SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *a1 = v8;
    if ((v6 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  sub_215738B0C(a1, v8.__pn_.__r_.__value_.__l.__data_, v8.__pn_.__r_.__value_.__l.__size_);
  if ((*((unsigned char *)&v9.__pn_.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_7:
  }
    operator delete(v9.__pn_.__r_.__value_.__l.__data_);
LABEL_8:
  if ((SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_12:
    operator delete(v8.__pn_.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__base.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_12;
  }
}

void sub_215CF4698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 17) < 0)
  {
    operator delete(*(void **)(v21 - 40));
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a21 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_215CF470C(std::__fs::filesystem::path *a1@<X1>, const std::__fs::filesystem::path *a2@<X2>, std::__fs::filesystem::path *a3@<X8>)
{
}

void sub_215CF4714(int a1, std::__fs::filesystem::path *__from, std::__fs::filesystem::path *__to)
{
}

void sub_215CF4728(int a1, std::__fs::filesystem::path *__from, std::__fs::filesystem::path *__to, std::__fs::filesystem::copy_options __opt)
{
}

BOOL sub_215CF473C(int a1, std::__fs::filesystem::path *__from, std::__fs::filesystem::path *__to)
{
  return std::__fs::filesystem::__copy_file(__from, __to, (std::__fs::filesystem::copy_options)0, 0);
}

BOOL sub_215CF4750(int a1, std::__fs::filesystem::path *__from, std::__fs::filesystem::path *__to, std::__fs::filesystem::copy_options __opt)
{
  return std::__fs::filesystem::__copy_file(__from, __to, __opt, 0);
}

void sub_215CF4764(int a1, std::__fs::filesystem::path *__existing_symlink, std::__fs::filesystem::path *__new_symlink)
{
}

BOOL sub_215CF4774(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__create_directory(a2, 0);
}

BOOL sub_215CF4780(int a1, std::__fs::filesystem::path *a2, std::__fs::filesystem::path *__attributes)
{
  return std::__fs::filesystem::__create_directory(a2, __attributes, 0);
}

BOOL sub_215CF4790(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__create_directories(a2, 0);
}

void sub_215CF479C(int a1, std::__fs::filesystem::path *__to, std::__fs::filesystem::path *__new_hard_link)
{
}

void sub_215CF47AC(int a1, std::__fs::filesystem::path *__to, std::__fs::filesystem::path *__new_symlink)
{
}

void sub_215CF47BC(int a1, std::__fs::filesystem::path *__to, std::__fs::filesystem::path *__new_symlink)
{
}

std::__fs::filesystem::path *sub_215CF47CC@<X0>(std::__fs::filesystem::path *a1@<X8>)
{
  return std::__fs::filesystem::__current_path(a1, 0);
}

void sub_215CF47D4(int a1, std::__fs::filesystem::path *a2)
{
}

BOOL sub_215CF47E0(int a1, std::__fs::filesystem::path *a2)
{
  std::__fs::filesystem::__status(a2, 0);
  if (v4) {
    BOOL v2 = v4 == 255;
  }
  else {
    BOOL v2 = 1;
  }
  return !v2;
}

BOOL sub_215CF4820(int a1, std::__fs::filesystem::path *a2, std::__fs::filesystem::path *a3)
{
  return std::__fs::filesystem::__equivalent(a2, a3, 0);
}

uintmax_t sub_215CF4830(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__file_size(a2, 0);
}

uintmax_t sub_215CF483C(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__hard_link_count(a2, 0);
}

uint64_t sub_215CF4848(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__last_write_time(a2, 0).__d_.__rep_;
}

void sub_215CF4854(int a1, std::__fs::filesystem::path *a2, std::__fs::filesystem::perms a3, std::__fs::filesystem::perm_options a4)
{
}

std::__fs::filesystem::path *sub_215CF4868@<X0>(std::__fs::filesystem::path *a1@<X1>, std::__fs::filesystem::path *a2@<X8>)
{
  return std::__fs::filesystem::__read_symlink(a2, a1, 0);
}

BOOL sub_215CF4874(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__remove(a2, 0);
}

uintmax_t sub_215CF4880(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__remove_all(a2, 0);
}

void sub_215CF488C(int a1, std::__fs::filesystem::path *__from, std::__fs::filesystem::path *__to)
{
}

void sub_215CF489C(int a1, std::__fs::filesystem::path *a2, uintmax_t __size)
{
}

std::__fs::filesystem::space_info *sub_215CF48AC@<X0>(std::__fs::filesystem::path *a1@<X1>, std::__fs::filesystem::space_info *a2@<X8>)
{
  return std::__fs::filesystem::__space(a2, a1, 0);
}

std::__fs::filesystem::file_status sub_215CF48B8(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__status(a2, 0);
}

std::__fs::filesystem::file_status sub_215CF48C4(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__symlink_status(a2, 0);
}

std::__fs::filesystem::path *sub_215CF48D0@<X0>(std::__fs::filesystem::path *a1@<X8>)
{
  return std::__fs::filesystem::__temp_directory_path(a1, 0);
}

BOOL sub_215CF48D8(int a1, std::__fs::filesystem::path *a2)
{
  std::__fs::filesystem::__status(a2, 0);
  return v3 == 4;
}

BOOL sub_215CF4914(int a1, std::__fs::filesystem::path *a2)
{
  std::__fs::filesystem::__status(a2, 0);
  return v3 == 5;
}

BOOL sub_215CF4950(int a1, std::__fs::filesystem::path *a2)
{
  std::__fs::filesystem::__status(a2, 0);
  return v3 == 2;
}

BOOL sub_215CF498C(int a1, std::__fs::filesystem::path *__p)
{
  return std::__fs::filesystem::__fs_is_empty(__p, 0);
}

BOOL sub_215CF4998(int a1, std::__fs::filesystem::path *a2)
{
  std::__fs::filesystem::__status(a2, 0);
  return v3 == 1;
}

BOOL sub_215CF49D4(int a1, std::__fs::filesystem::path *a2)
{
  std::__fs::filesystem::__status(a2, 0);
  return v3 == 6;
}

BOOL sub_215CF4A10(int a1, std::__fs::filesystem::path *a2)
{
  std::__fs::filesystem::__status(a2, 0);
  if (!v3) {
    return 0;
  }
  if (v3 == 255) {
    return 0;
  }
  return v3 - 4 < 0xFFFFFFFD;
}

BOOL sub_215CF4A6C(int a1, std::__fs::filesystem::path *a2)
{
  std::__fs::filesystem::__status(a2, 0);
  return v3 == 7;
}

BOOL sub_215CF4AA8(int a1, std::__fs::filesystem::path *a2)
{
  std::__fs::filesystem::__symlink_status(a2, 0);
  return v3 == 3;
}

void sub_215CF4AE4()
{
}

void sub_215CF4CB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_215CF4D08()
{
}

void sub_215CF4E70(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x2166C4BF0](v2);
  MEMORY[0x2166C4D20](v1, 0x10F1C40A09425BCLL);
  _Unwind_Resume(a1);
}

void sub_215CF4EB0()
{
}

void sub_215CF5080(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_215CF50D4()
{
}

void sub_215CF5238(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x2166C4BF0](v2);
  MEMORY[0x2166C4D20](v1, 0x10F1C4067547207);
  _Unwind_Resume(a1);
}

void sub_215CF5278(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  MEMORY[0x2166C4990](&v14, a1, 0, a2);
  std::__fs::filesystem::directory_iterator v13 = v14;
  if (v14.__imp_.__cntrl_) {
    atomic_fetch_add_explicit(&v14.__imp_.__cntrl_->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v12[1] = 0;
  v12[2] = 0;
  while (v13.__imp_.__ptr_)
  {
    unint64_t v5 = std::__fs::filesystem::directory_iterator::__dereference(&v13);
    char v6 = std::__fs::filesystem::directory_iterator::__dereference(&v13);
    if (((1 << v6->__data_.__cache_type_) & 0x17) != 0)
    {
      std::__fs::filesystem::__status(&v6->__p_, 0);
      unint64_t v7 = a3[1];
      if (v7 >= a3[2]) {
        goto LABEL_4;
      }
    }
    else
    {
      std::__fs::filesystem::perms non_sym_perms = v6->__data_.__non_sym_perms_;
      LOBYTE(v12[0]) = v6->__data_.__type_;
      HIDWORD(v12[0]) = non_sym_perms;
      unint64_t v7 = a3[1];
      if (v7 >= a3[2])
      {
LABEL_4:
        uint64_t v4 = sub_215CF5528((uint64_t)a3, (uint64_t)v5, v12);
        goto LABEL_5;
      }
    }
    if (SHIBYTE(v5->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_215738B0C((unsigned char *)v7, v5->__p_.__pn_.__r_.__value_.__l.__data_, v5->__p_.__pn_.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v9 = *(_OWORD *)&v5->__p_.__pn_.__r_.__value_.__l.__data_;
      *(void *)(v7 + 16) = *((void *)&v5->__p_.__pn_.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v7 = v9;
    }
    *(void *)(v7 + 24) = v12[0];
    uint64_t v4 = v7 + 32;
    a3[1] = v7 + 32;
LABEL_5:
    a3[1] = v4;
    std::__fs::filesystem::directory_iterator::__increment(&v13, 0);
  }
  cntrl = v13.__imp_.__cntrl_;
  if (v13.__imp_.__cntrl_ && !atomic_fetch_add(&v13.__imp_.__cntrl_->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
    std::__shared_weak_count::__release_weak(cntrl);
  }
  uint64_t v11 = v14.__imp_.__cntrl_;
  if (v14.__imp_.__cntrl_ && !atomic_fetch_add(&v14.__imp_.__cntrl_->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_215CF5458(_Unwind_Exception *a1)
{
  sub_2157C3C78(v1);
  _Unwind_Resume(a1);
}

void sub_215CF546C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  *(void *)(v3 + 8) = v4;
  sub_215733368((uint64_t)va);
  sub_215733368((uint64_t)va1);
  sub_215733368((uint64_t)va2);
  sub_2157C3C78((void **)v3);
  _Unwind_Resume(a1);
}

uint64_t (***sub_215CF54AC())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890450, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890450))
  {
    return off_26ACF2430;
  }
  __cxa_atexit((void (*)(void *))nullsub_364, off_26ACF2430, &dword_21572C000);
  __cxa_guard_release(&qword_267890450);
  return off_26ACF2430;
}

uint64_t sub_215CF5528(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void ***)a1;
  unint64_t v5 = *(void ***)(a1 + 8);
  uint64_t v6 = ((uint64_t)v5 - *(void *)a1) >> 5;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 59) {
    sub_215738AC0();
  }
  uint64_t v10 = *(void *)(a1 + 16) - (void)v4;
  if (v10 >> 4 > v7) {
    unint64_t v7 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v7;
  }
  if (v11)
  {
    if (v11 >> 59) {
      sub_215738AD8();
    }
    unint64_t v12 = operator new(32 * v11);
    uint64_t v13 = (uint64_t)&v12[4 * v6];
    uint64_t v18 = v13;
    uint64_t v19 = v13;
    uint64_t v20 = (char *)&v12[4 * v11];
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_10:
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a2;
      *(void *)(v13 + 16) = *(void *)(a2 + 16);
      v12[4 * v6 + 3] = *a3;
      uint64_t v14 = v13 + 32;
      if (v5 == v4) {
        goto LABEL_20;
      }
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t v13 = 32 * v6;
    uint64_t v18 = 32 * v6;
    uint64_t v19 = 32 * v6;
    uint64_t v20 = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_10;
    }
  }
  sub_215738B0C((unsigned char *)v13, *(void **)a2, *(void *)(a2 + 8));
  uint64_t v4 = *(void ***)a1;
  unint64_t v5 = *(void ***)(a1 + 8);
  uint64_t v13 = v18;
  v12[4 * v6 + 3] = *a3;
  uint64_t v14 = v19 + 32;
  if (v5 == v4)
  {
LABEL_20:
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = v20;
    goto LABEL_21;
  }
  do
  {
LABEL_14:
    long long v15 = *((_OWORD *)v5 - 2);
    *(void *)(v13 - 16) = *(v5 - 2);
    *(_OWORD *)(v13 - 32) = v15;
    *(v5 - 3) = 0;
    *(v5 - 2) = 0;
    *(v5 - 4) = 0;
    *(void *)(v13 - 8) = *(v5 - 1);
    v13 -= 32;
    v5 -= 4;
  }
  while (v5 != v4);
  uint64_t v4 = *(void ***)a1;
  int v16 = *(void ***)(a1 + 8);
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v14;
  *(void *)(a1 + 16) = v20;
  while (v16 != v4)
  {
    if (*((char *)v16 - 9) < 0) {
      operator delete(*(v16 - 4));
    }
    v16 -= 4;
  }
LABEL_21:
  if (v4) {
    operator delete(v4);
  }
  return v14;
}

void sub_215CF56E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215CF56FC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215CF56FC(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      unint64_t v5 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        unint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void **sub_215CF5764(void **__dst, void *__src, size_t __len)
{
  LODWORD(v6) = *((char *)__dst + 23);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = (unint64_t)__dst[2];
    unint64_t v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__len > v8)
    {
      size_t v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __len - v8)
      {
        uint64_t v9 = *__dst;
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          unint64_t v7 = operator new(v11);
          memcpy(v7, __src, __len);
          if (v8 != 22) {
            operator delete(v9);
          }
          __dst[2] = (void *)(v11 | 0x8000000000000000);
          *long long __dst = v7;
LABEL_23:
          __dst[1] = (void *)__len;
          goto LABEL_24;
        }
LABEL_8:
        unint64_t v12 = 2 * v8;
        if (__len > 2 * v8) {
          unint64_t v12 = __len;
        }
        uint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v13 = v12 | 7;
        }
        if (v12 >= 0x17) {
          size_t v11 = v13 + 1;
        }
        else {
          size_t v11 = 23;
        }
        goto LABEL_15;
      }
LABEL_25:
      sub_215731CD8();
    }
    unint64_t v6 = HIBYTE(v10);
    unint64_t v7 = *__dst;
  }
  else
  {
    unint64_t v7 = __dst;
    if (__len > 0x16)
    {
      if (__len - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        unint64_t v8 = 22;
        uint64_t v9 = __dst;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((unsigned char *)__dst + 23);
  }
  if ((v6 & 0x80) != 0) {
    goto LABEL_23;
  }
  *((unsigned char *)__dst + 23) = __len & 0x7F;
LABEL_24:
  *((unsigned char *)v7 + __len) = 0;
  return __dst;
}

void sub_215CF58C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C682178;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215CF58E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C682178;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215CF5938(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_215CF59BC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215CF59F4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_215CF5A24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000215EF6049) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000215EF6049 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000215EF6049)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000215EF6049 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void sub_215CF5AA8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C682218;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215CF5AC8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C682218;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215CF5B1C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_215CF5BA0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215CF5BD8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_215CF5C08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000215EF6153) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000215EF6153 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000215EF6153)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000215EF6153 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void sub_215CF5C8C(const std::__fs::filesystem::path *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, const std::__fs::filesystem::path *))(*(void *)a3 + 272))(&v16, a3, a1);
  if ((_BYTE)v16)
  {
    if (v16 != 255 && v16 == 2)
    {
      a4[1] = 0;
      a4[2] = 0;
      *a4 = &unk_26C6824A8;
      return;
    }
  }
  std::__fs::filesystem::path::__string_view v9 = std::__fs::filesystem::path::__parent_path(a1);
  if (v9.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  if (v9.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v11 = (v9.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v11 = v9.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v9.__size_;
    unint64_t v18 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v18) = v9.__size_;
  p_dst = &__dst;
  if (v9.__size_) {
LABEL_13:
  }
    memmove(p_dst, v9.__data_, v9.__size_);
  *((unsigned char *)p_dst + v9.__size_) = 0;
  unint64_t v15 = v18;
  *(_OWORD *)std::__fs::filesystem::path __p = __dst;
  unint64_t v13 = HIBYTE(v18);
  if ((v18 & 0x8000000000000000) != 0) {
    unint64_t v13 = *((void *)&__dst + 1);
  }
  if (!v13
    || ((*(uint64_t (**)(uint64_t, void **))(*(void *)a3 + 312))(a3, __p) & 1) != 0
    || ((*(uint64_t (**)(uint64_t, void **))(*(void *)a3 + 128))(a3, __p) & 1) != 0)
  {
    (*(void (**)(uint64_t, const std::__fs::filesystem::path *, void))(*(void *)a3 + 376))(a3, a1, a2);
    if (SHIBYTE(v15) < 0) {
LABEL_20:
    }
      operator delete(__p[0]);
  }
  else
  {
    a4[1] = 0;
    a4[2] = 0;
    *a4 = &unk_26C6824A8;
    if (SHIBYTE(v15) < 0) {
      goto LABEL_20;
    }
  }
}

void sub_215CF5ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t (***sub_215CF5EF8())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890458, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890458))
  {
    return &off_26ACF2438;
  }
  __cxa_atexit((void (*)(void *))nullsub_341, &off_26ACF2438, &dword_21572C000);
  __cxa_guard_release(&qword_267890458);
  return &off_26ACF2438;
}

void *sub_215CF5F74(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &unk_26C682480;
  unint64_t v6 = (char *)operator new(0x108uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)unint64_t v6 = &unk_26C682540;
  std::streambuf::basic_streambuf();
  *((void *)v6 + 8) = a3;
  *((void *)v6 + 9) = a3;
  *((void *)v6 + 1std::__fs::filesystem::__rename(__from, __to, 0) = a3 + a2;
  *((void *)v6 + 6) = &unk_26C682658;
  *((void *)v6 + 4) = 0;
  *((void *)v6 + 5) = &unk_26C6825C8;
  *((void *)v6 + 3) = &unk_26C682730;
  *((void *)v6 + 14) = &unk_26C682758;
  std::ios_base::init((std::ios_base *)(v6 + 112), v6 + 48);
  *((void *)v6 + 31) = 0;
  *((_DWORD *)v6 + 64) = -1;
  *((void *)v6 + 3) = &unk_26C6825A0;
  *((void *)v6 + 14) = &unk_26C6826E0;
  *((void *)v6 + 5) = &unk_26C6825C8;
  *((void *)v6 + 6) = &unk_26C682658;
  a1[1] = v6 + 40;
  a1[2] = v6;
  return a1;
}

uint64_t sub_215CF6138(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215CF61B4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215CF6240(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t sub_215CF6268(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215CF62E4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215CF6370(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

void sub_215CF6398(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C682540;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215CF63B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C682540;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215CF640C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_215CF6434(uint64_t a1)
{
  uint64_t v2 = std::istream::~istream();
  MEMORY[0x2166C4BF0](v2 + 88);
  std::streambuf::~streambuf();
  return a1;
}

void sub_215CF6474()
{
  uint64_t v0 = std::istream::~istream();
  MEMORY[0x2166C4BF0](v0 + 88);
  std::streambuf::~streambuf();

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215CF64D8(uint64_t a1)
{
  std::istream::~istream();
  MEMORY[0x2166C4BF0](a1 + 72);

  return std::streambuf::~streambuf();
}

void sub_215CF6524(uint64_t a1)
{
  std::istream::~istream();
  MEMORY[0x2166C4BF0](a1 + 72);
  std::streambuf::~streambuf();

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215CF658C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_215CF6594(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::istream::~istream();
  MEMORY[0x2166C4BF0](v1 + 88);

  return std::streambuf::~streambuf();
}

void sub_215CF65F4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::istream::~istream();
  MEMORY[0x2166C4BF0](v1 + 88);
  std::streambuf::~streambuf();

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215CF666C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::istream::~istream();
  MEMORY[0x2166C4BF0](v1 + 88);

  return std::streambuf::~streambuf();
}

void sub_215CF66CC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::istream::~istream();
  MEMORY[0x2166C4BF0](v1 + 88);
  std::streambuf::~streambuf();

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215CF6744(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215CF67C0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215CF684C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_215CF6854(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215CF68D0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215CF695C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *sub_215CF6964(void *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v4 = v3;
  }
  unint64_t v5 = sub_215731D94(a1, a2, v4);
  unint64_t v6 = sub_215731D94(v5, (uint64_t)":", 1);
  std::to_string(&v11, *(unsigned __int16 *)(v2 + 24));
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v7 = &v11;
  }
  else {
    unint64_t v7 = (std::string *)v11.__r_.__value_.__r.__words[0];
  }
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v11.__r_.__value_.__l.__size_;
  }
  uint64_t result = sub_215731D94(v6, (uint64_t)v7, size);
  unint64_t v10 = result;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    return v10;
  }
  return result;
}

void sub_215CF6A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215CF6A34(char *__s)
{
  v1[6] = 0;
  sub_2157C4454(v1, __s);
  sub_215CF7738();
}

void sub_215CF6B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215CF6B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215CF6B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215CF6B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215CF6B80(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  *a1 = &unk_26C682858;
  unint64_t v5 = (void *)a5[3];
  if (v5)
  {
    if (v5 == a5)
    {
      unint64_t v7 = v6;
      (*(void (**)(void *, void *))(*a5 + 24))(a5, v6);
    }
    else
    {
      unint64_t v7 = (void *)a5[3];
      a5[3] = 0;
    }
  }
  else
  {
    unint64_t v7 = 0;
  }
  operator new();
}

void sub_215CF6FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215CF70A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(void))(a1 + 16))();
  }
  return a1;
}

void sub_215CF70DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(void))(a1 + 16))();
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215CF7138(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 16))();
}

uint64_t sub_215CF7164(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 24))();
}

uint64_t sub_215CF7190(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  uint64_t result = *v2;
  if (*v2)
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 48))(result, a2, 3))
    {
      return 1;
    }
    else
    {
      uint64_t result = *v2;
      *uint64_t v2 = 0;
      if (result)
      {
        (*(void (**)(uint64_t))(*(void *)result + 8))(result);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_215CF7228(uint64_t a1)
{
  uint64_t result = **(void **)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 64))();
  }
  return result;
}

void sub_215CF725C()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_215CF7410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215CF7460(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2)
  {
    sub_215CF8F90(*(std::mutex **)(v2 + 192), v2);
    if (*(char *)(v2 + 183) < 0)
    {
      operator delete(*(void **)(v2 + 160));
      if ((*(char *)(v2 + 151) & 0x80000000) == 0) {
        goto LABEL_4;
      }
    }
    else if ((*(char *)(v2 + 151) & 0x80000000) == 0)
    {
LABEL_4:
      std::condition_variable::~condition_variable((std::condition_variable *)(v2 + 72));
      std::mutex::~mutex((std::mutex *)(v2 + 8));
      MEMORY[0x2166C4D20](v2, 0x10B3C4063A2C955);
      return a1;
    }
    operator delete(*(void **)(v2 + 128));
    goto LABEL_4;
  }
  return a1;
}

void sub_215CF74F4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (!v1) {
    goto LABEL_5;
  }
  sub_215CF8F90(*(std::mutex **)(v1 + 192), v1);
  if (*(char *)(v1 + 183) < 0)
  {
    operator delete(*(void **)(v1 + 160));
    if ((*(char *)(v1 + 151) & 0x80000000) == 0) {
      goto LABEL_4;
    }
  }
  else if ((*(char *)(v1 + 151) & 0x80000000) == 0)
  {
LABEL_4:
    std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 72));
    std::mutex::~mutex((std::mutex *)(v1 + 8));
    MEMORY[0x2166C4D20](v1, 0x10B3C4063A2C955);
LABEL_5:
    JUMPOUT(0x2166C4D20);
  }
  operator delete(*(void **)(v1 + 128));
  goto LABEL_4;
}

uint64_t sub_215CF75A8(uint64_t a1)
{
  return *(void *)(a1 + 8) + 160;
}

uint64_t sub_215CF75B4(uint64_t a1)
{
  return *(void *)(a1 + 8) + 128;
}

uint64_t sub_215CF75C0(uint64_t a1, void *a2)
{
  return 1;
}

uint64_t sub_215CF75E8(uint64_t a1)
{
  unint64_t v1 = *(const void **)(a1 + 8);
  if (v1) {
    unint64_t v2 = (char *)__dynamic_cast(v1, (const struct __class_type_info *)&unk_26C682958, (const struct __class_type_info *)&unk_26C682968, 0);
  }
  else {
    unint64_t v2 = 0;
  }
  m = (std::mutex *)(v2 + 8);
  v6.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v2 + 8);
  v6.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v2 + 8));
  if (v2[120])
  {
    v2[120] = 0;
LABEL_9:
    std::mutex::unlock(m);
    return 1;
  }
  do
    std::condition_variable::wait((std::condition_variable *)(v2 + 72), &v6);
  while (!v2[120]);
  BOOL owns = v6.__owns_;
  v2[120] = 0;
  if (owns)
  {
    m = v6.__m_;
    goto LABEL_9;
  }
  return 1;
}

void *sub_215CF76BC(void *result)
{
  if (result)
  {
    unint64_t v1 = result;
    uint64_t v2 = *result;
    *unint64_t v1 = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    JUMPOUT(0x2166C4D20);
  }
  return result;
}

void sub_215CF7738()
{
}

void sub_215CF7924(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_215CF7948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_215CF798C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890460, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890460))
  {
    return &qword_267890468;
  }
  sub_215CF7A2C();
  __cxa_atexit((void (*)(void *))sub_215CF7ADC, &qword_267890468, &dword_21572C000);
  __cxa_guard_release(&qword_267890460);
  return &qword_267890468;
}

void sub_215CF7A14(_Unwind_Exception *a1)
{
}

double sub_215CF7A2C()
{
  qword_267890468 = 850045863;
  unk_267890470 = 0u;
  unk_267890480 = 0u;
  unk_267890490 = 0u;
  qword_2678904A0 = 0;
  dword_2678904A8 = 3;
  byte_2678904AC = 1;
  qword_2678904B0 = 0;
  qword_2678904B8 = 0;
  MEMORY[0x2166C46A0](algn_2678904C0);
  double result = 0.0;
  xmmword_267890500 = 0u;
  *(_OWORD *)algn_267890510 = 0u;
  dword_267890520 = 1065353216;
  qword_267890538 = 0;
  qword_267890530 = 0;
  qword_267890528 = (uint64_t)&qword_267890530;
  return result;
}

void sub_215CF7AB4(_Unwind_Exception *a1)
{
  if (qword_2678904B8) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)qword_2678904B8);
  }
  std::mutex::~mutex((std::mutex *)&qword_267890468);
  _Unwind_Resume(a1);
}

void sub_215CF7ADC(uint64_t a1)
{
  sub_215ACFED0(*(char **)(a1 + 200));
  uint64_t v2 = *(void **)(a1 + 168);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_215CFB14C((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  if (v4) {
    operator delete(v4);
  }
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 88));
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 80);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }

  std::mutex::~mutex((std::mutex *)a1);
}

void sub_215CF7B68(void *a1, std::mutex *this, int a3)
{
  std::mutex::lock(this);
  if (a3 != 1)
  {
    LODWORD(this[1].__m_.__sig) = a3;
    BYTE4(this[1].__m_.__sig) = 1;
    if (a3 != 2) {
      goto LABEL_18;
    }
    *a1 = 0;
    a1[1] = 0;
    unint64_t v7 = *(std::__shared_weak_count **)&this[1].__m_.__opaque[8];
    if (!v7) {
      goto LABEL_18;
    }
    goto LABEL_11;
  }
  if (BYTE4(this[1].__m_.__sig)) {
    BOOL v6 = (this[1].__m_.__sig & 0xFFFFFFFD) == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    LODWORD(this[1].__m_.__sig) = 1;
    BYTE4(this[1].__m_.__sig) = 1;
    goto LABEL_18;
  }
  LODWORD(this[1].__m_.__sig) = 2;
  BYTE4(this[1].__m_.__sig) = 1;
  *a1 = 0;
  a1[1] = 0;
  unint64_t v7 = *(std::__shared_weak_count **)&this[1].__m_.__opaque[8];
  if (v7)
  {
LABEL_11:
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    a1[1] = v8;
    if (v8)
    {
      uint64_t v9 = *(void *)this[1].__m_.__opaque;
      *a1 = v9;
      if (v9) {
        goto LABEL_13;
      }
      std::string v11 = v8;
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
LABEL_18:
  std::basic_string_view<_CharT, _Traits>::size_type v12 = operator new(0x20uLL);
  v12[1] = 0;
  v12[2] = 0;
  void *v12 = &unk_26C682A20;
  void v12[3] = (char *)this + 88;
  std::recursive_mutex::lock((std::recursive_mutex *)&this[1].__m_.__opaque[16]);
  *a1 = v12 + 3;
  a1[1] = v12;
  atomic_fetch_add_explicit(v12 + 2, 1uLL, memory_order_relaxed);
  unint64_t v13 = *(std::__shared_weak_count **)&this[1].__m_.__opaque[8];
  *(void *)this[1].__m_.__opaque = v12 + 3;
  *(void *)&this[1].__m_.__opaque[8] = v12;
  if (v13)
  {
    std::__shared_weak_count::__release_weak(v13);
    unint64_t v10 = this;
    goto LABEL_15;
  }
LABEL_13:
  unint64_t v10 = this;

LABEL_15:
  std::mutex::unlock(v10);
}

void sub_215CF7D00(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_215CF7D20(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215CF7D34(uint64_t a1)
{
  sub_215CFB2F0(*(void **)(a1 + 112));
  uint64_t v2 = a1 + 40;
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3 == a1 + 72)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 72) + 32))(a1 + 72);
    uint64_t v4 = *(void *)(a1 + 64);
    if (v4 != v2) {
      goto LABEL_5;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    uint64_t v4 = *(void *)(a1 + 64);
    if (v4 != v2)
    {
LABEL_5:
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
      }
      if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
        return a1;
      }
      goto LABEL_11;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 40);
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return a1;
  }
LABEL_11:
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_215CF7E54(uint64_t a1)
{
  sub_215CFB2F0(*(void **)(a1 + 80));
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3 != a1 + 40)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4 != v2) {
      goto LABEL_5;
    }
LABEL_9:
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 8);
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)(a1 + 40) + 32))(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4 == v2) {
    goto LABEL_9;
  }
LABEL_5:
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  return a1;
}

void sub_215CF7F5C(std::mutex *this, uint64_t a2)
{
  sub_215CF7B68(&v78, this, 3);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(__p, a2);
  if (v76 >= 0) {
    unint64_t v5 = (uint64_t *)__p;
  }
  else {
    unint64_t v5 = (uint64_t *)__p[0];
  }
  if (v76 >= 0) {
    unint64_t v6 = HIBYTE(v76);
  }
  else {
    unint64_t v6 = (unint64_t)__p[1];
  }
  unint64_t v7 = sub_21573A6BC((uint64_t)v80, v5, v6);
  uint64_t v8 = &this[2].__m_.__opaque[16];
  int v9 = v77;
  unint64_t v10 = (((v7 + 2654435769u) >> 2) + ((v7 + 2654435769u) << 6) + v77 + 2654435769) ^ (v7 + 2654435769u);
  unint64_t v11 = *(void *)&this[2].__m_.__opaque[24];
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v2 = (((v7 + 2654435769u) >> 2) + ((v7 + 2654435769u) << 6) + v77 + 2654435769) ^ (v7 + 2654435769u);
      if (v10 >= v11) {
        unint64_t v2 = v10 % v11;
      }
    }
    else
    {
      unint64_t v2 = v10 & (v11 - 1);
    }
    unint64_t v13 = *(void ***)(*(void *)v8 + 8 * v2);
    if (v13)
    {
      uint64_t v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        uint64_t v74 = a2;
        char v15 = HIBYTE(v76);
        if (v76 >= 0) {
          uint64_t v16 = (void *)HIBYTE(v76);
        }
        else {
          uint64_t v16 = __p[1];
        }
        if (v76 >= 0) {
          unint64_t v17 = __p;
        }
        else {
          unint64_t v17 = (void **)__p[0];
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = *((void *)v14 + 1);
            if (v23 != v10)
            {
              if ((v23 & (v11 - 1)) != v2) {
                goto LABEL_57;
              }
              goto LABEL_42;
            }
            uint64_t v24 = v14[39];
            if ((v24 & 0x80u) == 0) {
              uint64_t v25 = (void *)v14[39];
            }
            else {
              uint64_t v25 = (void *)*((void *)v14 + 3);
            }
            if (v25 == v16)
            {
              uint64_t v26 = (const void **)(v14 + 16);
              if ((v24 & 0x80) != 0)
              {
                if (memcmp(*v26, v17, *((void *)v14 + 3))) {
                  goto LABEL_42;
                }
              }
              else if (v14[39])
              {
                uint64_t v27 = v17;
                while (*(unsigned __int8 *)v26 == *(unsigned __int8 *)v27)
                {
                  uint64_t v26 = (const void **)((char *)v26 + 1);
                  uint64_t v27 = (void **)((char *)v27 + 1);
                  if (!--v24) {
                    goto LABEL_55;
                  }
                }
                goto LABEL_42;
              }
LABEL_55:
              if (*((unsigned __int16 *)v14 + 20) == v9) {
                goto LABEL_56;
              }
            }
LABEL_42:
            uint64_t v14 = *(unsigned __int8 **)v14;
            if (!v14) {
              goto LABEL_57;
            }
          }
        }
        while (1)
        {
          unint64_t v18 = *((void *)v14 + 1);
          if (v18 == v10)
          {
            uint64_t v19 = v14[39];
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = (void *)v14[39];
            }
            else {
              uint64_t v20 = (void *)*((void *)v14 + 3);
            }
            if (v20 == v16)
            {
              uint64_t v21 = (const void **)(v14 + 16);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v17, *((void *)v14 + 3)))
                {
LABEL_39:
                  if (*((unsigned __int16 *)v14 + 20) == v9)
                  {
LABEL_56:
                    a2 = v74;
                    uint64_t v8 = &this[2].__m_.__opaque[16];
                    goto LABEL_97;
                  }
                }
              }
              else
              {
                if (!v14[39]) {
                  goto LABEL_39;
                }
                uint64_t v22 = v17;
                while (*(unsigned __int8 *)v21 == *(unsigned __int8 *)v22)
                {
                  uint64_t v21 = (const void **)((char *)v21 + 1);
                  uint64_t v22 = (void **)((char *)v22 + 1);
                  if (!--v19) {
                    goto LABEL_39;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v11) {
              v18 %= v11;
            }
            if (v18 != v2)
            {
LABEL_57:
              a2 = v74;
              uint64_t v8 = &this[2].__m_.__opaque[16];
              break;
            }
          }
          uint64_t v14 = *(unsigned __int8 **)v14;
          if (!v14) {
            goto LABEL_57;
          }
        }
      }
    }
  }
  uint64_t v14 = (unsigned __int8 *)operator new(0x90uLL);
  uint64_t v28 = &this[2].__m_.__opaque[32];
  v80[0] = v14;
  v80[1] = (char *)this + 168;
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = v10;
  *((_OWORD *)v14 + 1) = *(_OWORD *)__p;
  *((void *)v14 + 4) = v76;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v76 = 0;
  *((_WORD *)v14 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *((_OWORD *)v14 + 3) = 0u;
  *((_OWORD *)v14 + 4) = 0u;
  *((_OWORD *)v14 + 5) = 0u;
  *((_OWORD *)v14 + 6) = 0u;
  *((void *)v14 + 7) = &unk_26C682A70;
  *((void *)v14 + 1std::__fs::filesystem::__rename(__from, __to, 0) = v14 + 56;
  *((void *)v14 + 11) = &unk_26C682AF0;
  *((void *)v14 + 17) = 0;
  *((void *)v14 + 16) = 0;
  *((void *)v14 + 14) = v14 + 88;
  *((void *)v14 + 15) = v14 + 128;
  char v81 = 1;
  float v29 = (float)(unint64_t)(*(void *)&this[2].__m_.__opaque[40] + 1);
  float v30 = *(float *)&this[2].__m_.__opaque[48];
  if (v11 && (float)(v30 * (float)v11) >= v29) {
    goto LABEL_86;
  }
  BOOL v31 = 1;
  if (v11 >= 3) {
    BOOL v31 = (v11 & (v11 - 1)) != 0;
  }
  unint64_t v32 = v31 | (2 * v11);
  unint64_t v33 = vcvtps_u32_f32(v29 / v30);
  if (v32 <= v33) {
    size_t prime = v33;
  }
  else {
    size_t prime = v32;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v11 = *(void *)&this[2].__m_.__opaque[24];
  }
  if (prime > v11) {
    goto LABEL_70;
  }
  if (prime < v11)
  {
    unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)&this[2].__m_.__opaque[40] / *(float *)&this[2].__m_.__opaque[48]);
    if (v11 < 3 || (uint8x8_t v36 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
    {
      unint64_t v35 = std::__next_prime(v35);
    }
    else
    {
      uint64_t v37 = 1 << -(char)__clz(v35 - 1);
      if (v35 >= 2) {
        unint64_t v35 = v37;
      }
    }
    if (prime <= v35) {
      size_t prime = v35;
    }
    if (prime < v11) {
LABEL_70:
    }
      sub_21573BDA8((uint64_t)v8, prime);
  }
  unint64_t v11 = *(void *)&this[2].__m_.__opaque[24];
  unint64_t v38 = v11 - 1;
  if ((v11 & (v11 - 1)) != 0)
  {
    if (v10 >= v11)
    {
      unint64_t v2 = v10 % v11;
      uint64_t v39 = *(void *)v8;
      uint64_t v40 = *(void **)(*(void *)v8 + 8 * (v10 % v11));
      if (!v40) {
        goto LABEL_89;
      }
LABEL_87:
      *(void *)uint64_t v14 = *v40;
LABEL_95:
      *uint64_t v40 = v14;
      goto LABEL_96;
    }
    unint64_t v2 = v10;
LABEL_86:
    uint64_t v39 = *(void *)v8;
    uint64_t v40 = *(void **)(*(void *)v8 + 8 * v2);
    if (!v40) {
      goto LABEL_89;
    }
    goto LABEL_87;
  }
  unint64_t v2 = v38 & v10;
  uint64_t v39 = *(void *)v8;
  uint64_t v40 = *(void **)(*(void *)v8 + 8 * (v38 & v10));
  if (v40) {
    goto LABEL_87;
  }
LABEL_89:
  *(void *)uint64_t v14 = *(void *)v28;
  *(void *)uint64_t v28 = v14;
  *(void *)(v39 + 8 * v2) = v28;
  if (*(void *)v14)
  {
    unint64_t v41 = *(void *)(*(void *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v41 >= v11) {
        v41 %= v11;
      }
    }
    else
    {
      v41 &= v11 - 1;
    }
    uint64_t v40 = (void *)(*(void *)v8 + 8 * v41);
    goto LABEL_95;
  }
LABEL_96:
  ++*(void *)&this[2].__m_.__opaque[40];
  char v15 = HIBYTE(v76);
LABEL_97:
  if (v15 < 0)
  {
    operator delete(__p[0]);
    BOOL v42 = (unsigned __int8 *)*((void *)v14 + 15);
    size_t v43 = v14 + 128;
    if (v42 == v14 + 128) {
      goto LABEL_135;
    }
    while (1)
    {
LABEL_103:
      uint64_t v44 = (*(uint64_t (**)(void))(**((void **)v42 + 4) + 16))(*((void *)v42 + 4));
      uint64_t v45 = v44;
      if (*(char *)(v44 + 23) < 0)
      {
        sub_215738B0C(__p, *(void **)v44, *(void *)(v44 + 8));
      }
      else
      {
        long long v46 = *(_OWORD *)v44;
        uint64_t v76 = *(void *)(v44 + 16);
        *(_OWORD *)std::__fs::filesystem::path __p = v46;
      }
      unsigned __int16 v77 = *(_WORD *)(v45 + 24);
      uint64_t v47 = (*(uint64_t (**)(void))(**((void **)v42 + 4) + 16))(*((void *)v42 + 4));
      LOBYTE(v80[0]) = 2;
      uint64_t v48 = *((void *)v14 + 14);
      if (!v48) {
        sub_21573D7DC();
      }
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v48 + 48))(v48, v47, v80);
      size_t v49 = sub_215CFB60C((uint64_t **)&this[3], (const void **)__p, (uint64_t)__p);
      uint64_t v50 = (uint64_t *)v49[8];
      if (v50)
      {
        uint64_t v51 = v49 + 8;
        uint64_t v52 = v49[8];
        do
        {
          unsigned int v53 = *(unsigned __int16 *)(v52 + 32);
          BOOL v54 = v53 >= v77;
          if (v53 >= v77) {
            unint64_t v55 = (uint64_t *)v52;
          }
          else {
            unint64_t v55 = (uint64_t *)(v52 + 8);
          }
          if (v54) {
            uint64_t v51 = (uint64_t *)v52;
          }
          uint64_t v52 = *v55;
        }
        while (*v55);
        if (v51 != v49 + 8 && v77 >= *((unsigned __int16 *)v51 + 16))
        {
          uint64_t v56 = (uint64_t *)v51[1];
          uint64_t v57 = v51;
          if (v56)
          {
            do
            {
              uint64_t v58 = v56;
              uint64_t v56 = (uint64_t *)*v56;
            }
            while (v56);
          }
          else
          {
            do
            {
              uint64_t v58 = (uint64_t *)v57[2];
              BOOL v59 = *v58 == (void)v57;
              uint64_t v57 = v58;
            }
            while (!v59);
          }
          if ((uint64_t *)v49[7] == v51) {
            v49[7] = (uint64_t)v58;
          }
          --v49[9];
          sub_21573B1FC(v50, v51);
          operator delete(v51);
        }
      }
      if (SHIBYTE(v76) < 0)
      {
        operator delete(__p[0]);
        uint64_t v60 = (unsigned __int8 *)*((void *)v42 + 1);
        if (v60)
        {
          do
          {
LABEL_130:
            unint64_t v61 = v60;
            uint64_t v60 = *(unsigned __int8 **)v60;
          }
          while (v60);
          goto LABEL_102;
        }
      }
      else
      {
        uint64_t v60 = (unsigned __int8 *)*((void *)v42 + 1);
        if (v60) {
          goto LABEL_130;
        }
      }
      do
      {
        unint64_t v61 = (unsigned __int8 *)*((void *)v42 + 2);
        BOOL v59 = *(void *)v61 == (void)v42;
        BOOL v42 = v61;
      }
      while (!v59);
LABEL_102:
      BOOL v42 = v61;
      if (v61 == v43) {
        goto LABEL_135;
      }
    }
  }
  BOOL v42 = (unsigned __int8 *)*((void *)v14 + 15);
  size_t v43 = v14 + 128;
  if (v42 != v14 + 128) {
    goto LABEL_103;
  }
LABEL_135:
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(__p, a2);
  unint64_t v62 = sub_215CFB7B0(v8, (uint64_t)__p);
  if (v62)
  {
    uint64_t v63 = v62;
    int8x8_t v64 = *(int8x8_t *)&this[2].__m_.__opaque[24];
    unint64_t v65 = v62[1];
    uint8x8_t v66 = (uint8x8_t)vcnt_s8(v64);
    v66.i16[0] = vaddlv_u8(v66);
    if (v66.u32[0] > 1uLL)
    {
      if (v65 >= *(void *)&v64) {
        v65 %= *(void *)&v64;
      }
    }
    else
    {
      v65 &= *(void *)&v64 - 1;
    }
    unint64_t v67 = *(uint64_t **)(*(void *)v8 + 8 * v65);
    do
    {
      unint64_t v68 = v67;
      unint64_t v67 = (uint64_t *)*v67;
    }
    while (v67 != v62);
    if (v68 == (uint64_t *)&this[2].__m_.__opaque[32]) {
      goto LABEL_153;
    }
    unint64_t v69 = v68[1];
    if (v66.u32[0] > 1uLL)
    {
      if (v69 >= *(void *)&v64) {
        v69 %= *(void *)&v64;
      }
    }
    else
    {
      v69 &= *(void *)&v64 - 1;
    }
    if (v69 != v65)
    {
LABEL_153:
      if (!*v62) {
        goto LABEL_154;
      }
      unint64_t v70 = *(void *)(*v62 + 8);
      if (v66.u32[0] > 1uLL)
      {
        if (v70 >= *(void *)&v64) {
          v70 %= *(void *)&v64;
        }
      }
      else
      {
        v70 &= *(void *)&v64 - 1;
      }
      if (v70 != v65) {
LABEL_154:
      }
        *(void *)(*(void *)v8 + 8 * v65) = 0;
    }
    uint64_t v71 = *v62;
    if (*v62)
    {
      unint64_t v72 = *(void *)(v71 + 8);
      if (v66.u32[0] > 1uLL)
      {
        if (v72 >= *(void *)&v64) {
          v72 %= *(void *)&v64;
        }
      }
      else
      {
        v72 &= *(void *)&v64 - 1;
      }
      if (v72 != v65)
      {
        *(void *)(*(void *)v8 + 8 * v72) = v68;
        uint64_t v71 = *v62;
      }
    }
    uint64_t *v68 = v71;
    *unint64_t v62 = 0;
    --*(void *)&this[2].__m_.__opaque[40];
    sub_215CFB14C((uint64_t)(v62 + 2));
    operator delete(v63);
  }
  if (SHIBYTE(v76) < 0) {
    operator delete(__p[0]);
  }
  int v73 = v79;
  if (v79)
  {
    if (!atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
}

void sub_215CF881C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_215733368((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_215CF8878(std::mutex *this, uint64_t a2, void *a3, int a4, unsigned __int8 *a5, unsigned __int8 a6)
{
  sub_215CF7B68(&v66, this, 0);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(v64, a2);
  unint64_t v41 = sub_215CFB7B0(&this[2].__m_.__opaque[16], (uint64_t)v64);
  if (v41)
  {
    uint64_t v57 = 1;
    uint64_t v56 = &unk_26C6831F8;
    uint64_t v58 = &unk_26C683340;
    sub_215CFCED0(a3, 0, &v59);
    *(void *)&long long v60 = 0;
    *((void *)&v60 + 1) = v59.n128_u64[1] - v59.n128_u64[0];
    *(_OWORD *)unint64_t v61 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    v53[0] = 0;
    int v54 = 0;
    char v55 = 0;
    sub_215CFB9F0(&v56, (uint64_t)v53);
    unint64_t v11 = (uint64_t *)v41[15];
    if (v11 != v41 + 16)
    {
      uint64_t v12 = 0;
      uint64_t v13 = a6;
      do
      {
        if (v13)
        {
          uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v11[4] + 16))(v11[4]);
          uint64_t v15 = v14;
          uint64_t v16 = *(unsigned __int8 *)(v14 + 23);
          if ((v16 & 0x80u) == 0) {
            uint64_t v17 = *(unsigned __int8 *)(v14 + 23);
          }
          else {
            uint64_t v17 = *(void *)(v14 + 8);
          }
          uint64_t v18 = a5[23];
          int v19 = (char)v18;
          if ((v18 & 0x80u) != 0) {
            uint64_t v18 = *((void *)a5 + 1);
          }
          if (v17 != v18) {
            goto LABEL_48;
          }
          if (v19 >= 0) {
            uint64_t v20 = a5;
          }
          else {
            uint64_t v20 = *(unsigned __int8 **)a5;
          }
          if ((v16 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v14, v20, *(void *)(v14 + 8))) {
              goto LABEL_48;
            }
          }
          else if (*(unsigned char *)(v14 + 23))
          {
            uint64_t v21 = (unsigned __int8 *)v14;
            while (*v21 == *v20)
            {
              ++v21;
              ++v20;
              if (!--v16) {
                goto LABEL_22;
              }
            }
            goto LABEL_48;
          }
LABEL_22:
          if (*(unsigned __int16 *)(v15 + 24) != *((unsigned __int16 *)a5 + 12)) {
            goto LABEL_48;
          }
        }
        if (v12 == v41[17] - 1)
        {
          uint64_t v22 = v11[8];
          if (!v22) {
            sub_21573D7DC();
          }
          (*(void (**)(uint64_t, void **, void **))(*(void *)v22 + 48))(v22, v64, &v56);
        }
        else
        {
          v42[0] = &unk_26C6831F8;
          v42[1] = v57;
          v42[2] = &unk_26C683340;
          uint64_t v44 = 0;
          uint64_t v45 = 0;
          size_t v43 = 0;
          uint64_t v23 = (const void *)v59.n128_u64[0];
          size_t v24 = v59.n128_u64[1] - v59.n128_u64[0];
          if (v59.n128_u64[1] != v59.n128_u64[0])
          {
            if ((v24 & 0x8000000000000000) != 0) {
              sub_2157C3CEC();
            }
            size_t v43 = operator new(v59.n128_u64[1] - v59.n128_u64[0]);
            uint64_t v44 = v43;
            uint64_t v25 = (char *)v43 + v24;
            uint64_t v45 = (char *)v43 + v24;
            memcpy(v43, v23, v24);
            uint64_t v44 = v25;
          }
          long long v46 = v60;
          uint64_t v48 = 0;
          size_t v49 = 0;
          uint64_t v47 = 0;
          uint64_t v26 = v61[0];
          int64_t v27 = (char *)v61[1] - (char *)v61[0];
          if (v61[1] != v61[0])
          {
            if (v27 < 0) {
              sub_2157E81A4();
            }
            uint64_t v47 = operator new((char *)v61[1] - (char *)v61[0]);
            uint64_t v48 = v47;
            uint64_t v28 = (char *)v47 + 8 * (v27 >> 3);
            size_t v49 = v28;
            memcpy(v47, v26, v27);
            uint64_t v48 = v28;
          }
          std::__fs::filesystem::path __p = 0;
          uint64_t v51 = 0;
          uint64_t v52 = 0;
          float v29 = (const void *)*((void *)&v62 + 1);
          int64_t v30 = v63 - *((void *)&v62 + 1);
          if ((void)v63 != *((void *)&v62 + 1))
          {
            if (v30 < 0) {
              sub_215CFB3BC();
            }
            std::__fs::filesystem::path __p = operator new(v63 - *((void *)&v62 + 1));
            uint64_t v51 = __p;
            BOOL v31 = (char *)__p + 8 * (v30 >> 3);
            uint64_t v52 = v31;
            memcpy(__p, v29, v30);
            uint64_t v51 = v31;
          }
          uint64_t v32 = v11[8];
          if (!v32) {
            sub_21573D7DC();
          }
          (*(void (**)(uint64_t, void **, void *))(*(void *)v32 + 48))(v32, v64, v42);
          if (__p)
          {
            uint64_t v51 = __p;
            operator delete(__p);
          }
          if (v47)
          {
            uint64_t v48 = v47;
            operator delete(v47);
          }
          if (v43)
          {
            uint64_t v44 = v43;
            operator delete(v43);
          }
        }
        if (a4 == 2)
        {
          unint64_t v33 = (const void *)v11[4];
          if (v33) {
            uint64_t v34 = (char *)__dynamic_cast(v33, (const struct __class_type_info *)&unk_26C682958, (const struct __class_type_info *)&unk_26C682968, 0);
          }
          else {
            uint64_t v34 = 0;
          }
          std::mutex::lock((std::mutex *)(v34 + 8));
          v34[120] = 1;
          std::condition_variable::notify_all((std::condition_variable *)(v34 + 72));
          std::mutex::unlock((std::mutex *)(v34 + 8));
        }
        if (v13) {
          break;
        }
LABEL_48:
        unint64_t v35 = (uint64_t *)v11[1];
        if (v35)
        {
          do
          {
            uint8x8_t v36 = v35;
            unint64_t v35 = (uint64_t *)*v35;
          }
          while (v35);
        }
        else
        {
          do
          {
            uint8x8_t v36 = (uint64_t *)v11[2];
            BOOL v37 = *v36 == (void)v11;
            unint64_t v11 = v36;
          }
          while (!v37);
        }
        ++v12;
        unint64_t v11 = v36;
      }
      while (v36 != v41 + 16);
    }
    if (*((void *)&v62 + 1))
    {
      *(void *)&long long v63 = *((void *)&v62 + 1);
      operator delete(*((void **)&v62 + 1));
    }
    if (v61[0])
    {
      v61[1] = v61[0];
      operator delete(v61[0]);
    }
    if (v59.n128_u64[0])
    {
      v59.n128_u64[1] = v59.n128_u64[0];
      operator delete((void *)v59.n128_u64[0]);
    }
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  unint64_t v38 = v67;
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  return 1;
}

void sub_215CF8E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_215D024B8(&a32);
  if (*(char *)(v32 - 113) < 0) {
    operator delete(*(void **)(v32 - 136));
  }
  sub_215733368(v32 - 104);
  _Unwind_Resume(a1);
}

uint64_t sub_215CF8EFC(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    return a1;
  }
  else
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
}

void sub_215CF8F90(std::mutex *this, unint64_t a2)
{
  sub_215CF7B68(&v34, this, 3);
  uint64_t v4 = (*(uint64_t (**)(unint64_t))(*(void *)a2 + 16))(a2);
  uint64_t v5 = v4;
  if (*(char *)(v4 + 23) < 0)
  {
    sub_215738B0C(__p, *(void **)v4, *(void *)(v4 + 8));
  }
  else
  {
    long long v6 = *(_OWORD *)v4;
    uint64_t v32 = *(void *)(v4 + 16);
    *(_OWORD *)std::__fs::filesystem::path __p = v6;
  }
  unsigned __int16 v33 = *(_WORD *)(v5 + 24);
  unint64_t v7 = sub_215CFB60C((uint64_t **)&this[3], (const void **)__p, (uint64_t)__p);
  uint64_t v8 = (uint64_t *)v7[8];
  if (v8)
  {
    int v9 = v7 + 8;
    uint64_t v10 = v7[8];
    do
    {
      unsigned int v11 = *(unsigned __int16 *)(v10 + 32);
      BOOL v12 = v11 >= v33;
      if (v11 >= v33) {
        uint64_t v13 = (uint64_t *)v10;
      }
      else {
        uint64_t v13 = (uint64_t *)(v10 + 8);
      }
      if (v12) {
        int v9 = (uint64_t *)v10;
      }
      uint64_t v10 = *v13;
    }
    while (*v13);
    if (v9 != v7 + 8 && v33 >= *((unsigned __int16 *)v9 + 16))
    {
      uint64_t v14 = (uint64_t *)v9[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        uint64_t v16 = v9;
        do
        {
          uint64_t v15 = (uint64_t *)v16[2];
          BOOL v17 = *v15 == (void)v16;
          uint64_t v16 = v15;
        }
        while (!v17);
      }
      if ((uint64_t *)v7[7] == v9) {
        v7[7] = (uint64_t)v15;
      }
      --v7[9];
      sub_21573B1FC(v8, v9);
      operator delete(v9);
    }
  }
  for (uint64_t i = *(void **)&this[2].__m_.__opaque[32]; i; uint64_t i = (void *)*i)
  {
    int v19 = (void *)i[16];
    if (v19)
    {
      uint64_t v20 = i + 16;
      do
      {
        unint64_t v21 = v19[4];
        BOOL v22 = v21 >= a2;
        if (v21 >= a2) {
          uint64_t v23 = v19;
        }
        else {
          uint64_t v23 = v19 + 1;
        }
        if (v22) {
          uint64_t v20 = v19;
        }
        int v19 = (void *)*v23;
      }
      while (*v23);
      if (v20 != i + 16 && v20[4] <= a2)
      {
        char v36 = 2;
        uint64_t v24 = i[14];
        if (!v24) {
          sub_21573D7DC();
        }
        (*(void (**)(uint64_t, void **, char *))(*(void *)v24 + 48))(v24, __p, &v36);
        uint64_t v25 = (uint64_t *)v20[1];
        uint64_t v26 = v20;
        if (v25)
        {
          do
          {
            int64_t v27 = v25;
            uint64_t v25 = (uint64_t *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            int64_t v27 = (uint64_t *)v26[2];
            BOOL v17 = *v27 == (void)v26;
            uint64_t v26 = v27;
          }
          while (!v17);
        }
        if ((uint64_t *)i[15] == v20) {
          i[15] = v27;
        }
        uint64_t v28 = (uint64_t *)i[16];
        --i[17];
        sub_21573B1FC(v28, v20);
        float v29 = (uint64_t *)v20[8];
        if (v29 == v20 + 5)
        {
          (*(void (**)(uint64_t *))(v20[5] + 32))(v20 + 5);
        }
        else if (v29)
        {
          (*(void (**)(uint64_t *))(*v29 + 40))(v29);
        }
        operator delete(v20);
      }
    }
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  int64_t v30 = v35;
  if (v35)
  {
    if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_215CF92AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_215733368((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_215CF92EC(std::mutex *this, uint64_t a2, void *a3)
{
  sub_215CF7B68(&v21, this, 1);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  unint64_t v7 = sub_215CFB7B0(&this[2].__m_.__opaque[16], v6);
  if (v7)
  {
    uint64_t v8 = v7;
    v14[1] = 1;
    v14[0] = &unk_26C6831F8;
    v14[2] = &unk_26C683340;
    sub_215CFCED0(a3, 0, &v15);
    uint64_t v16 = 0;
    unint64_t v17 = v15.n128_u64[1] - v15.n128_u64[0];
    *(_OWORD *)uint64_t v18 = 0u;
    *(_OWORD *)std::__fs::filesystem::path __p = 0u;
    long long v20 = 0u;
    sub_215CFB9F0(v14, (uint64_t)v13);
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    uint64_t v10 = v8[10];
    if (!v10) {
      sub_21573D7DC();
    }
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v10 + 48))(v10, v9, v14);
    if (__p[1])
    {
      *(void **)&long long v20 = __p[1];
      operator delete(__p[1]);
    }
    if (v18[0])
    {
      v18[1] = v18[0];
      operator delete(v18[0]);
    }
    if (v15.n128_u64[0])
    {
      v15.n128_u64[1] = v15.n128_u64[0];
      operator delete((void *)v15.n128_u64[0]);
    }
  }
  unsigned int v11 = v22;
  if (!v22 || atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return 1;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return 1;
}

void sub_215CF94E4(_Unwind_Exception *a1)
{
  sub_215733368(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_215CF94FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215D024B8((uint64_t *)va);
  sub_215733368(v3 - 48);
  _Unwind_Resume(a1);
}

std::string::size_type sub_215CF9518(std::string::size_type a1, int a2, std::string *a3, long long *a4, std::mutex *this)
{
  int v7 = a2;
  uint64_t v99 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C682990;
  if (*((unsigned char *)a4 + 24))
  {
    if ((*((char *)a4 + 23) & 0x80000000) == 0)
    {
      long long v9 = *a4;
      *(void *)(a1 + 24) = *((void *)a4 + 2);
      *(_OWORD *)(a1 + 8) = v9;
      *(_WORD *)(a1 + 32) = a2;
      *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = this;
      uint64_t v10 = (std::string::__raw *)&a3[1];
      CFDataRef data = (std::string *)a3[1].__r_.__value_.__l.__data_;
      if (!data) {
        goto LABEL_9;
      }
LABEL_6:
      if (data == a3)
      {
        unint64_t v79 = (std::string *)v78;
        (*(void (**)(std::string *, void *))(a3->__r_.__value_.__r.__words[0] + 24))(a3, v78);
      }
      else
      {
        unint64_t v79 = data;
        v10->__words[0] = 0;
      }
      goto LABEL_11;
    }
    sub_215738B0C((unsigned char *)(a1 + 8), *(void **)a4, *((void *)a4 + 1));
    *(_WORD *)(a1 + 32) = v7;
    *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = this;
    uint64_t v10 = (std::string::__raw *)&a3[1];
    CFDataRef data = (std::string *)a3[1].__r_.__value_.__l.__data_;
    if (data) {
      goto LABEL_6;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 31) = 9;
    strcpy((char *)(a1 + 8), "localhost");
    *(_WORD *)(a1 + 32) = a2;
    *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = this;
    uint64_t v10 = (std::string::__raw *)&a3[1];
    CFDataRef data = (std::string *)a3[1].__r_.__value_.__l.__data_;
    if (data) {
      goto LABEL_6;
    }
  }
LABEL_9:
  unint64_t v79 = 0;
LABEL_11:
  std::string::size_type size = (std::string::size_type *)a3[2].__r_.__value_.__l.__size_;
  if (size)
  {
    if (size == &a3[1].__r_.__value_.__r.__words[1])
    {
      char v81 = v80;
      (*(void (**)(std::string::size_type *, void *))(*size + 24))(size, v80);
    }
    else
    {
      char v81 = (void *)a3[2].__r_.__value_.__l.__size_;
      a3[2].__r_.__value_.__l.__size_ = 0;
    }
  }
  else
  {
    char v81 = 0;
  }
  sub_215CF7B68(&v74, this, 3);
  (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(void *)a1 + 16))(&__p, a1);
  uint64_t v13 = sub_215CFB7B0(&this[2].__m_.__opaque[16], (uint64_t)&__p);
  if (v13) {
    goto LABEL_17;
  }
  v82.__r_.__value_.__r.__words[0] = a1;
  p_std::string::size_type size = (unint64_t)&v82.__r_.__value_.__l.__size_;
  if (v79)
  {
    if (v79 == (std::string *)v78)
    {
      uint64_t v83 = (std::string *)&v82.__r_.__value_.__r.__words[1];
      (*(void (**)(void *, std::string::size_type *))(v78[0] + 24))(v78, &v82.__r_.__value_.__l.__size_);
    }
    else
    {
      uint64_t v83 = v79;
      unint64_t v79 = 0;
    }
  }
  else
  {
    uint64_t v83 = 0;
  }
  if (v81)
  {
    if (v81 == v80)
    {
      uint64_t v85 = v84;
      (*(void (**)(void *, void *))(v80[0] + 24))(v80, v84);
    }
    else
    {
      uint64_t v85 = v81;
      char v81 = 0;
    }
  }
  else
  {
    uint64_t v85 = 0;
  }
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  long long v86 = &v87;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    sub_215738B0C(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = __p;
  }
  unsigned __int16 v90 = v73;
  std::string::size_type v91 = v82.__r_.__value_.__r.__words[0];
  if (v83)
  {
    if (v83 == (std::string *)&v82.__r_.__value_.__r.__words[1])
    {
      unint64_t v93 = (std::string::__raw *)v92;
      (*(void (**)(std::string::size_type *))(v82.__r_.__value_.__l.__size_ + 24))(&v82.__r_.__value_.__l.__size_);
    }
    else
    {
      unint64_t v93 = (std::string::__raw *)v83;
      uint64_t v83 = 0;
    }
  }
  else
  {
    unint64_t v93 = 0;
  }
  if (v85)
  {
    if (v85 == v84)
    {
      unint64_t v95 = v94;
      (*(void (**)(void *))(v84[0] + 24))(v84);
    }
    else
    {
      unint64_t v95 = v85;
      uint64_t v85 = 0;
    }
  }
  else
  {
    unint64_t v95 = 0;
  }
  unint64_t v96 = v86;
  uint64_t v97 = v87;
  uint64_t v98 = v88;
  if (v88)
  {
    v87[2] = &v97;
    long long v86 = &v87;
    uint64_t v87 = 0;
    uint64_t v88 = 0;
  }
  else
  {
    unint64_t v96 = &v97;
  }
  uint64_t v71 = &this[2].__m_.__opaque[16];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_dst = &__dst;
  }
  else {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v20 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v20 = __dst.__r_.__value_.__l.__size_;
  }
  unint64_t v21 = sub_21573A6BC((uint64_t)v76, (uint64_t *)p_dst, v20);
  int v22 = v90;
  unint64_t v23 = (((v21 + 2654435769u) >> 2) + ((v21 + 2654435769u) << 6) + v90 + 2654435769) ^ (v21 + 2654435769u);
  unint64_t v24 = *(void *)&this[2].__m_.__opaque[24];
  int v70 = v7;
  if (v24)
  {
    uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      p_std::string::size_type size = (((v21 + 2654435769u) >> 2) + ((v21 + 2654435769u) << 6) + v90 + 2654435769) ^ (v21 + 2654435769u);
      if (v23 >= v24) {
        p_std::string::size_type size = v23 % v24;
      }
    }
    else
    {
      p_std::string::size_type size = v23 & (v24 - 1);
    }
    uint64_t v26 = *(uint64_t ***)(*(void *)v71 + 8 * p_size);
    if (v26)
    {
      int64_t v27 = *v26;
      if (*v26)
      {
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v28 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v28 = __dst.__r_.__value_.__l.__size_;
        }
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          float v29 = &__dst;
        }
        else {
          float v29 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        if (v25.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v35 = v27[1];
            if (v35 != v23)
            {
              if ((v35 & (v24 - 1)) != p_size) {
                goto LABEL_114;
              }
              goto LABEL_99;
            }
            uint64_t v36 = *((unsigned __int8 *)v27 + 39);
            if ((v36 & 0x80u) == 0) {
              uint64_t v37 = *((unsigned __int8 *)v27 + 39);
            }
            else {
              uint64_t v37 = v27[3];
            }
            if (v37 == v28)
            {
              unint64_t v38 = (const void **)(v27 + 2);
              if ((v36 & 0x80) != 0)
              {
                if (memcmp(*v38, v29, v27[3])) {
                  goto LABEL_99;
                }
              }
              else if (*((unsigned char *)v27 + 39))
              {
                uint64_t v39 = v29;
                while (*(unsigned __int8 *)v38 == v39->__r_.__value_.__s.__data_[0])
                {
                  unint64_t v38 = (const void **)((char *)v38 + 1);
                  uint64_t v39 = (std::string *)((char *)v39 + 1);
                  if (!--v36) {
                    goto LABEL_112;
                  }
                }
                goto LABEL_99;
              }
LABEL_112:
              if (*((unsigned __int16 *)v27 + 20) == v22) {
                goto LABEL_167;
              }
            }
LABEL_99:
            int64_t v27 = (uint64_t *)*v27;
            if (!v27) {
              goto LABEL_114;
            }
          }
        }
        do
        {
          unint64_t v30 = v27[1];
          if (v30 == v23)
          {
            uint64_t v31 = *((unsigned __int8 *)v27 + 39);
            if ((v31 & 0x80u) == 0) {
              uint64_t v32 = *((unsigned __int8 *)v27 + 39);
            }
            else {
              uint64_t v32 = v27[3];
            }
            if (v32 != v28) {
              goto LABEL_81;
            }
            unsigned __int16 v33 = (const void **)(v27 + 2);
            if ((v31 & 0x80) != 0)
            {
              if (memcmp(*v33, v29, v27[3])) {
                goto LABEL_81;
              }
            }
            else if (*((unsigned char *)v27 + 39))
            {
              uint64_t v34 = v29;
              while (*(unsigned __int8 *)v33 == v34->__r_.__value_.__s.__data_[0])
              {
                unsigned __int16 v33 = (const void **)((char *)v33 + 1);
                uint64_t v34 = (std::string *)((char *)v34 + 1);
                if (!--v31) {
                  goto LABEL_96;
                }
              }
              goto LABEL_81;
            }
LABEL_96:
            if (*((unsigned __int16 *)v27 + 20) == v22) {
              goto LABEL_167;
            }
          }
          else
          {
            if (v30 >= v24) {
              v30 %= v24;
            }
            if (v30 != p_size) {
              break;
            }
          }
LABEL_81:
          int64_t v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
    }
  }
LABEL_114:
  uint64_t v40 = operator new(0x90uLL);
  unint64_t v41 = v40;
  long long v42 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  std::string::size_type v43 = v91;
  v40[4] = *((void *)&__dst.__r_.__value_.__l + 2);
  uint64_t v44 = &this[2].__m_.__opaque[32];
  v76[0] = v40;
  v76[1] = (char *)this + 168;
  *uint64_t v40 = 0;
  v40[1] = v23;
  *((_OWORD *)v40 + 1) = v42;
  memset(&__dst, 0, sizeof(__dst));
  *((_WORD *)v40 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v22;
  v40[6] = v43;
  if (v93)
  {
    if (v93 == (std::string::__raw *)v92)
    {
      v40[10] = v40 + 7;
      (*(void (**)(void))(v92[0] + 24))();
    }
    else
    {
      v40[10] = v93;
      unint64_t v93 = 0;
    }
  }
  else
  {
    v40[10] = 0;
  }
  if (v95)
  {
    if (v95 == v94)
    {
      v41[14] = v41 + 11;
      (*(void (**)(void))(v94[0] + 24))();
    }
    else
    {
      v41[14] = v95;
      unint64_t v95 = 0;
    }
  }
  else
  {
    v41[14] = 0;
  }
  long long v46 = v96;
  uint64_t v45 = v97;
  v41[16] = v97;
  uint64_t v47 = v41 + 16;
  v41[15] = v46;
  uint64_t v48 = v98;
  v41[17] = v98;
  if (v48)
  {
    v45[2] = v47;
    unint64_t v96 = &v97;
    uint64_t v97 = 0;
    uint64_t v98 = 0;
  }
  else
  {
    v41[15] = v47;
  }
  char v77 = 1;
  float v49 = (float)(unint64_t)(*(void *)&this[2].__m_.__opaque[40] + 1);
  float v50 = *(float *)&this[2].__m_.__opaque[48];
  if (v24 && (float)(v50 * (float)v24) >= v49) {
    goto LABEL_156;
  }
  BOOL v51 = v24 < 3 || (v24 & (v24 - 1)) != 0;
  unint64_t v52 = v51 | (2 * v24);
  unint64_t v53 = vcvtps_u32_f32(v49 / v50);
  if (v52 <= v53) {
    size_t prime = v53;
  }
  else {
    size_t prime = v52;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
  }
  int8x8_t v55 = *(int8x8_t *)&this[2].__m_.__opaque[24];
  if (prime > *(void *)&v55) {
    goto LABEL_140;
  }
  if (prime < *(void *)&v55)
  {
    unint64_t v56 = vcvtps_u32_f32((float)*(unint64_t *)&this[2].__m_.__opaque[40] / *(float *)&this[2].__m_.__opaque[48]);
    if (*(void *)&v55 < 3uLL || (uint8x8_t v57 = (uint8x8_t)vcnt_s8(v55), v57.i16[0] = vaddlv_u8(v57), v57.u32[0] > 1uLL))
    {
      unint64_t v56 = std::__next_prime(v56);
    }
    else
    {
      uint64_t v58 = 1 << -(char)__clz(v56 - 1);
      if (v56 >= 2) {
        unint64_t v56 = v58;
      }
    }
    if (prime <= v56) {
      size_t prime = v56;
    }
    if (prime < *(void *)&v55) {
LABEL_140:
    }
      sub_21573BDA8((uint64_t)v71, prime);
  }
  unint64_t v24 = *(void *)&this[2].__m_.__opaque[24];
  unint64_t v59 = v24 - 1;
  if ((v24 & (v24 - 1)) != 0)
  {
    if (v23 >= v24)
    {
      p_std::string::size_type size = v23 % v24;
      long long v60 = &this[2].__m_.__opaque[16];
      uint64_t v61 = *(void *)v71;
      long long v62 = *(void **)(*(void *)v71 + 8 * (v23 % v24));
      if (!v62) {
        goto LABEL_159;
      }
LABEL_157:
      *unint64_t v41 = *v62;
LABEL_165:
      *long long v62 = v41;
      goto LABEL_166;
    }
    p_std::string::size_type size = v23;
LABEL_156:
    long long v60 = &this[2].__m_.__opaque[16];
    uint64_t v61 = *(void *)v71;
    long long v62 = *(void **)(*(void *)v71 + 8 * p_size);
    if (!v62) {
      goto LABEL_159;
    }
    goto LABEL_157;
  }
  p_std::string::size_type size = v59 & v23;
  long long v60 = &this[2].__m_.__opaque[16];
  uint64_t v61 = *(void *)v71;
  long long v62 = *(void **)(*(void *)v71 + 8 * (v59 & v23));
  if (v62) {
    goto LABEL_157;
  }
LABEL_159:
  *unint64_t v41 = *(void *)v44;
  *(void *)uint64_t v44 = v41;
  *(void *)(v61 + 8 * p_size) = v44;
  if (*v41)
  {
    unint64_t v63 = *(void *)(*v41 + 8);
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v63 >= v24) {
        v63 %= v24;
      }
    }
    else
    {
      v63 &= v24 - 1;
    }
    long long v62 = (void *)(*(void *)v60 + 8 * v63);
    goto LABEL_165;
  }
LABEL_166:
  ++*(void *)&this[2].__m_.__opaque[40];
LABEL_167:
  sub_215CFB2F0(v97);
  if (v95 == v94)
  {
    (*(void (**)(void *))(v94[0] + 32))(v94);
    int v7 = v70;
    int8x8_t v64 = v93;
    if (v93 != (std::string::__raw *)v92) {
      goto LABEL_171;
    }
LABEL_181:
    (*(void (**)(void *))(v92[0] + 32))(v92);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_174;
    }
    goto LABEL_182;
  }
  int v7 = v70;
  if (v95) {
    (*(void (**)(void))(*v95 + 40))();
  }
  int8x8_t v64 = v93;
  if (v93 == (std::string::__raw *)v92) {
    goto LABEL_181;
  }
LABEL_171:
  if (v64) {
    (*(void (**)(std::string::__raw *))(v64->__words[0] + 40))(v64);
  }
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_174:
    sub_215CFB2F0(v87);
    char v65 = v85;
    if (v85 != v84) {
      goto LABEL_175;
    }
    goto LABEL_183;
  }
LABEL_182:
  operator delete(__dst.__r_.__value_.__l.__data_);
  sub_215CFB2F0(v87);
  char v65 = v85;
  if (v85 != v84)
  {
LABEL_175:
    if (v65) {
      (*(void (**)(void *))(*v65 + 40))(v65);
    }
    uint64_t v66 = v83;
    if (v83 != (std::string *)&v82.__r_.__value_.__r.__words[1]) {
      goto LABEL_178;
    }
LABEL_184:
    (*(void (**)(std::string::size_type *))(v82.__r_.__value_.__l.__size_ + 32))(&v82.__r_.__value_.__l.__size_);
    goto LABEL_17;
  }
LABEL_183:
  (*(void (**)(void *))(v84[0] + 32))(v84);
  uint64_t v66 = v83;
  if (v83 == (std::string *)&v82.__r_.__value_.__r.__words[1]) {
    goto LABEL_184;
  }
LABEL_178:
  if (v66) {
    (*(void (**)(std::string *))(v66->__r_.__value_.__r.__words[0] + 40))(v66);
  }
LABEL_17:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = v75;
  if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    __n128 v15 = v81;
    if (v81 != v80)
    {
LABEL_22:
      if (v15) {
        (*(void (**)(void *))(*v15 + 40))(v15);
      }
      uint64_t v16 = v79;
      if (v79 != (std::string *)v78) {
        goto LABEL_25;
      }
LABEL_32:
      (*(void (**)(void *))(v78[0] + 32))(v78);
      goto LABEL_33;
    }
  }
  else
  {
    __n128 v15 = v81;
    if (v81 != v80) {
      goto LABEL_22;
    }
  }
  (*(void (**)(void *))(v80[0] + 32))(v80);
  uint64_t v16 = v79;
  if (v79 == (std::string *)v78) {
    goto LABEL_32;
  }
LABEL_25:
  if (v16) {
    (*(void (**)(std::string *))(v16->__r_.__value_.__r.__words[0] + 40))(v16);
  }
LABEL_33:
  if (v13)
  {
    std::to_string(&v82, v7);
    sub_215AC8CC8("Failed to start server on port ", &v82, &__dst);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v82.__r_.__value_.__l.__data_);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    unint64_t v68 = &exception->__vftable;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v69 = &__dst;
    }
    else {
      unint64_t v69 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    std::logic_error::logic_error(exception, (const char *)v69);
    void *v68 = MEMORY[0x263F8C3A0] + 16;
    __cxa_throw(v68, (struct type_info *)off_26425A320, MEMORY[0x263F8C080]);
  }
  return a1;
}

void sub_215CFA248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215CFA340(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_215CFA394(uint64_t a1)
{
  sub_215CF7F5C(*(std::mutex **)(a1 + 40), a1);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x2166C4D20);
}

char *sub_215CFA3F8@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result;
  if (result[31] < 0)
  {
    double result = (char *)sub_215738B0C((unsigned char *)a2, *((void **)result + 1), *((void *)result + 2));
    *(_WORD *)(a2 + 24) = *((_WORD *)v2 + 16);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(result + 8);
    *(void *)(a2 + 16) = *((void *)result + 3);
    *(_WORD *)(a2 + 24) = *((_WORD *)result + 16);
  }
  return result;
}

uint64_t sub_215CFA460(uint64_t a1, void *a2, int a3)
{
  uint64_t v5 = *(std::mutex **)(a1 + 40);
  if (a3) {
    int v6 = 3;
  }
  else {
    int v6 = 2;
  }
  sub_215CF8878(v5, a1, a2, v6, 0, 0);
  return 1;
}

uint64_t sub_215CFA4A0(uint64_t a1, unsigned __int8 *a2, void *a3, int a4)
{
  int v6 = *(std::mutex **)(a1 + 40);
  if (a4) {
    int v7 = 3;
  }
  else {
    int v7 = 2;
  }
  sub_215CF8878(v6, a1, a3, v7, a2, 1u);
  return 1;
}

std::string::size_type sub_215CFA4D8(std::string::size_type a1, long long *a2, int a3, int a4, void *a5, uint64_t a6, std::mutex *this)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C6829C8;
  *(void *)(a1 + 8) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 72) = 1018212795;
  *(void *)(a1 + 64) = 0;
  std::string::size_type v12 = a1 + 128;
  *(_OWORD *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 105) = 0u;
  if (*((char *)a2 + 23) < 0)
  {
    sub_215738B0C((unsigned char *)v12, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v13 = *a2;
    *(void *)(v12 + 16) = *((void *)a2 + 2);
    *(_OWORD *)std::string::size_type v12 = v13;
  }
  __int16 v14 = *((_WORD *)a2 + 12);
  *(unsigned char *)(a1 + 16std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  __n128 v15 = (std::string *)(a1 + 160);
  *(_WORD *)(a1 + 152) = v14;
  *(unsigned char *)(a1 + 183) = 0;
  *(_WORD *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = this;
  uint64_t v16 = (void *)a5[3];
  if (v16)
  {
    if (v16 == a5)
    {
      unint64_t v69 = (std::string *)v68;
      (*(void (**)(void *, void *))(*a5 + 24))(a5, v68);
    }
    else
    {
      unint64_t v69 = (std::string *)a5[3];
      a5[3] = 0;
    }
  }
  else
  {
    unint64_t v69 = 0;
  }
  __dst.__r_.__value_.__s.__data_[0] = 0;
  char v60 = 0;
  if (*(unsigned char *)(a6 + 24))
  {
    if (*(char *)(a6 + 23) < 0) {
      sub_215738B0C(&__dst, *(void **)a6, *(void *)(a6 + 8));
    }
    else {
      std::string __dst = *(std::string *)a6;
    }
    char v60 = 1;
  }
  sub_215CF7B68(&v65, this, 3);
  uint64_t v17 = (*(uint64_t (**)(std::string::size_type))(*(void *)a1 + 24))(a1);
  uint64_t v18 = sub_215CFB7B0(&this[2].__m_.__opaque[16], v17);
  if (!v18) {
    goto LABEL_30;
  }
  int v19 = v18;
  unint64_t v21 = (uint64_t **)(v18 + 16);
  std::string::size_type v20 = (uint64_t *)v18[16];
  if (v20)
  {
    int v22 = v18 + 16;
    unint64_t v23 = (void *)v18[16];
    do
    {
      std::string::size_type v24 = v23[4];
      BOOL v25 = v24 >= a1;
      if (v24 >= a1) {
        uint64_t v26 = v23;
      }
      else {
        uint64_t v26 = v23 + 1;
      }
      if (v25) {
        int v22 = v23;
      }
      unint64_t v23 = (void *)*v26;
    }
    while (*v26);
    if (v22 != (uint64_t *)v21 && v22[4] <= a1)
    {
LABEL_30:
      v61.__r_.__value_.__s.__data_[0] = 0;
      unsigned __int8 v63 = 0;
      float v29 = v66;
      if (!v66) {
        goto LABEL_108;
      }
      goto LABEL_106;
    }
  }
  v70.__r_.__value_.__r.__words[0] = a1;
  if (!v69)
  {
    unint64_t v72 = 0;
    std::string::size_type v27 = a1;
    std::string::size_type v28 = (uint64_t **)(v18 + 16);
    if (v20) {
      goto LABEL_37;
    }
    goto LABEL_41;
  }
  if (v69 != (std::string *)v68)
  {
    unint64_t v72 = v69;
    unint64_t v69 = 0;
    std::string::size_type v27 = a1;
    std::string::size_type v28 = (uint64_t **)(v18 + 16);
    if (v20) {
      goto LABEL_37;
    }
    goto LABEL_41;
  }
  unint64_t v72 = (std::string *)&v70.__r_.__value_.__r.__words[1];
  (*(void (**)(void *, std::string::size_type *))(v68[0] + 24))(v68, &v70.__r_.__value_.__l.__size_);
  std::string::size_type v27 = v70.__r_.__value_.__r.__words[0];
  std::string::size_type v20 = *v21;
  std::string::size_type v28 = v21;
  if (!*v21)
  {
LABEL_41:
    uint64_t v31 = (uint64_t *)operator new(0x48uLL);
    uint64_t v32 = v31;
    v31[4] = v27;
    if (v72)
    {
      if (v72 == (std::string *)&v70.__r_.__value_.__r.__words[1])
      {
        v31[8] = (uint64_t)(v31 + 5);
        (*(void (**)(std::string::size_type *))(v70.__r_.__value_.__l.__size_ + 24))(&v70.__r_.__value_.__l.__size_);
      }
      else
      {
        v31[8] = (uint64_t)v72;
        unint64_t v72 = 0;
      }
    }
    else
    {
      v31[8] = 0;
    }
    uint64_t *v32 = 0;
    v32[1] = 0;
    v32[2] = (uint64_t)v28;
    *unint64_t v21 = v32;
    uint64_t v33 = *(void *)v19[15];
    if (v33)
    {
      v19[15] = v33;
      uint64_t v32 = *v21;
    }
    sub_21573B048((uint64_t *)v19[16], v32);
    ++v19[17];
    goto LABEL_49;
  }
  while (1)
  {
LABEL_37:
    while (1)
    {
      std::string::size_type v28 = (uint64_t **)v20;
      std::string::size_type v30 = v20[4];
      if (v30 <= v27) {
        break;
      }
      std::string::size_type v20 = *v28;
      unint64_t v21 = v28;
      if (!*v28) {
        goto LABEL_41;
      }
    }
    if (v30 >= v27) {
      break;
    }
    std::string::size_type v20 = v28[1];
    if (!v20)
    {
      unint64_t v21 = v28 + 1;
      goto LABEL_41;
    }
  }
LABEL_49:
  if (v72 != (std::string *)&v70.__r_.__value_.__r.__words[1])
  {
    if (v72) {
      (*(void (**)(void))(v72->__r_.__value_.__r.__words[0] + 40))();
    }
    if (v60) {
      goto LABEL_53;
    }
LABEL_56:
    *((unsigned char *)&v70.__r_.__value_.__s + 23) = 9;
    strcpy((char *)&v70, "localhost");
    goto LABEL_58;
  }
  (*(void (**)(std::string::size_type *))(v70.__r_.__value_.__l.__size_ + 32))(&v70.__r_.__value_.__l.__size_);
  if (!v60) {
    goto LABEL_56;
  }
LABEL_53:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    sub_215738B0C(&v70, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  }
  else {
    std::string v70 = __dst;
  }
LABEL_58:
  std::string::size_type size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
  if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v70.__r_.__value_.__l.__size_;
  }
  if (size != 9) {
    goto LABEL_67;
  }
  uint64_t v35 = (std::string *)v70.__r_.__value_.__r.__words[0];
  if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v35 = &v70;
  }
  std::string::size_type v36 = v35->__r_.__value_.__r.__words[0];
  int v37 = v35->__r_.__value_.__s.__data_[8];
  if (v36 == 0x736F686C61636F6CLL && v37 == 116)
  {
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 9;
    strcpy((char *)&__p, "127.0.0.1");
    if ((*((unsigned char *)&v70.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_70:
    }
      operator delete(v70.__r_.__value_.__l.__data_);
  }
  else
  {
LABEL_67:
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      std::string __p = v70;
      goto LABEL_71;
    }
    sub_215738B0C(&__p, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
    if ((*((unsigned char *)&v70.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_70;
    }
  }
LABEL_71:
  uint64_t v39 = sub_215CFB60C((uint64_t **)&this[3], (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  uint64_t v40 = v39;
  long long v42 = v39 + 8;
  uint64_t v41 = v39[8];
  if (v41)
  {
    for (unsigned __int16 i = -15536; ; ++i)
    {
      uint64_t v44 = v39 + 8;
      uint64_t v45 = v39[8];
      do
      {
        unsigned int v46 = *(unsigned __int16 *)(v45 + 32);
        BOOL v47 = v46 >= i;
        if (v46 >= i) {
          uint64_t v48 = (uint64_t *)v45;
        }
        else {
          uint64_t v48 = (uint64_t *)(v45 + 8);
        }
        if (v47) {
          uint64_t v44 = (uint64_t *)v45;
        }
        uint64_t v45 = *v48;
      }
      while (*v48);
      if (v44 == v42 || *((unsigned __int16 *)v44 + 16) > i) {
        break;
      }
    }
  }
  else
  {
    unsigned __int16 i = -15536;
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string v70 = __p;
    unsigned __int16 v71 = i;
    float v49 = v39 + 8;
    if (v41) {
      goto LABEL_91;
    }
    goto LABEL_95;
  }
  sub_215738B0C(&v70, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  uint64_t v41 = *v42;
  unsigned __int16 v71 = i;
  float v49 = v42;
  if (!v41)
  {
LABEL_95:
    BOOL v51 = operator new(0x30uLL);
    v51[16] = i;
    *((void *)v51 + 5) = a1;
    *(void *)BOOL v51 = 0;
    *((void *)v51 + 1) = 0;
    *((void *)v51 + 2) = v49;
    uint64_t *v42 = (uint64_t)v51;
    uint64_t v52 = *(void *)v40[7];
    if (v52)
    {
      v40[7] = v52;
      BOOL v51 = (_WORD *)*v42;
    }
    sub_21573B048((uint64_t *)v40[8], (uint64_t *)v51);
    ++v40[9];
    goto LABEL_98;
  }
  while (1)
  {
LABEL_91:
    while (1)
    {
      float v49 = (uint64_t *)v41;
      unsigned int v50 = *(unsigned __int16 *)(v41 + 32);
      if (v50 <= i) {
        break;
      }
      uint64_t v41 = *v49;
      long long v42 = v49;
      if (!*v49) {
        goto LABEL_95;
      }
    }
    if (v50 >= i) {
      break;
    }
    uint64_t v41 = v49[1];
    if (!v41)
    {
      long long v42 = v49 + 1;
      goto LABEL_95;
    }
  }
LABEL_98:
  uint64_t v53 = (*(uint64_t (**)(std::string::size_type))(*(void *)a1 + 16))(a1);
  char v67 = 1;
  uint64_t v54 = v19[14];
  if (!v54) {
    sub_21573D7DC();
  }
  (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v54 + 48))(v54, v53, &v67);
  if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string v61 = v70;
    unsigned __int16 v62 = v71;
    unsigned __int8 v63 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_101;
    }
LABEL_105:
    float v29 = v66;
    if (!v66) {
      goto LABEL_108;
    }
    goto LABEL_106;
  }
  sub_215738B0C(&v61, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
  unsigned __int16 v62 = v71;
  unsigned __int8 v63 = 1;
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v70.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_105;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_105;
  }
LABEL_101:
  operator delete(__p.__r_.__value_.__l.__data_);
  float v29 = v66;
  if (!v66) {
    goto LABEL_108;
  }
LABEL_106:
  if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
LABEL_108:
  if (v60 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (v69 == (std::string *)v68)
  {
    (*(void (**)(void *))(v68[0] + 32))(v68);
  }
  else if (v69)
  {
    (*(void (**)(void))(v69->__r_.__value_.__r.__words[0] + 40))();
  }
  if (!v63)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215CF6A34("Client failed to connect to server at '");
  }
  if (v15 == &v61)
  {
    *(_WORD *)(a1 + 184) = v62;
LABEL_130:
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    return a1;
  }
  if (*(char *)(a1 + 183) < 0)
  {
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int8x8_t v55 = &v61;
    }
    else {
      int8x8_t v55 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v56 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v56 = v61.__r_.__value_.__l.__size_;
    }
    sub_21573ABD0((void **)(a1 + 160), v55, v56);
  }
  else if ((*((unsigned char *)&v61.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    sub_21573AB08((void *)(a1 + 160), v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v61.__r_.__value_.__l.__data_;
    *(void *)(a1 + 176) = *((void *)&v61.__r_.__value_.__l + 2);
  }
  int v57 = v63;
  *(_WORD *)(a1 + 184) = v62;
  if (v57) {
    goto LABEL_130;
  }
  return a1;
}

void sub_215CFADF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::condition_variable *a11, std::mutex *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_215CFAF44(unint64_t a1)
{
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    if ((*(char *)(a1 + 151) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    operator delete(*(void **)(a1 + 128));
    goto LABEL_3;
  }
  if (*(char *)(a1 + 151) < 0) {
    goto LABEL_5;
  }
LABEL_3:
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 72));
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  return a1;
}

void sub_215CFAFB4(unint64_t a1)
{
  sub_215CF8F90(*(std::mutex **)(a1 + 192), a1);
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    if ((*(char *)(a1 + 151) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*(char *)(a1 + 151) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 128));
LABEL_3:
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 72));
  std::mutex::~mutex((std::mutex *)(a1 + 8));

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215CFB044(uint64_t a1)
{
  return a1 + 160;
}

uint64_t sub_215CFB04C(uint64_t a1)
{
  return a1 + 128;
}

uint64_t sub_215CFB054(uint64_t a1, void *a2)
{
  return 1;
}

uint64_t sub_215CFB07C(const void *a1)
{
  if (a1) {
    uint64_t v1 = (char *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_26C682958, (const struct __class_type_info *)&unk_26C682968, 0);
  }
  else {
    uint64_t v1 = 0;
  }
  m = (std::mutex *)(v1 + 8);
  v5.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v1 + 8);
  v5.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v1 + 8));
  if (v1[120])
  {
    v1[120] = 0;
LABEL_9:
    std::mutex::unlock(m);
    return 1;
  }
  do
    std::condition_variable::wait((std::condition_variable *)(v1 + 72), &v5);
  while (!v1[120]);
  BOOL owns = v5.__owns_;
  v1[120] = 0;
  if (owns)
  {
    m = v5.__m_;
    goto LABEL_9;
  }
  return 1;
}

void sub_215CFB14C(uint64_t a1)
{
  sub_215CFB2F0(*(void **)(a1 + 112));
  uint64_t v2 = a1 + 40;
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3 == a1 + 72)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 72) + 32))(a1 + 72);
    uint64_t v4 = *(void *)(a1 + 64);
    if (v4 != v2) {
      goto LABEL_5;
    }
LABEL_10:
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 40);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_11;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4 == v2) {
    goto LABEL_10;
  }
LABEL_5:
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  if (*(char *)(a1 + 23) < 0)
  {
LABEL_11:
    std::unique_lock<std::mutex> v5 = *(void **)a1;
    operator delete(v5);
  }
}

void sub_215CFB270(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C682A20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215CFB290(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C682A20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215CFB2E4(uint64_t a1)
{
}

void sub_215CFB2F0(void *a1)
{
  if (a1)
  {
    sub_215CFB2F0(*a1);
    sub_215CFB2F0(a1[1]);
    uint64_t v2 = (void *)a1[8];
    if (v2 == a1 + 5)
    {
      (*(void (**)(void *))(a1[5] + 32))(a1 + 5);
      uint64_t v3 = a1;
    }
    else
    {
      if (v2) {
        (*(void (**)(void *))(*v2 + 40))(v2);
      }
      uint64_t v3 = a1;
    }
    operator delete(v3);
  }
}

void sub_215CFB3BC()
{
}

uint64_t sub_215CFB3D4(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_215CFB14C((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
  return a1;
}

void sub_215CFB420()
{
}

void *sub_215CFB434()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26C682A70;
  return result;
}

void sub_215CFB46C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C682A70;
}

uint64_t sub_215CFB498(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit3net15ServerCallbacks13data_receivedMUlDpOT_E_E") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N4cv3d3kit3net15ServerCallbacks13data_receivedMUlDpOT_E_E" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit3net15ServerCallbacks13data_receivedMUlDpOT_E_E")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit3net15ServerCallbacks13data_receivedMUlDpOT_E_E" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215CFB508()
{
  return &unk_26C682AD0;
}

void sub_215CFB518()
{
}

void *sub_215CFB52C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26C682AF0;
  return result;
}

void sub_215CFB564(uint64_t a1, void *a2)
{
  *a2 = &unk_26C682AF0;
}

uint64_t sub_215CFB590(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit3net15ServerCallbacks18connection_changedMUlDpOT_E_E") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N4cv3d3kit3net15ServerCallbacks18connection_changedMUlDpOT_E_E" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit3net15ServerCallbacks18connection_changedMUlDpOT_E_E")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit3net15ServerCallbacks18connection_changedMUlDpOT_E_E" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215CFB600()
{
  return &unk_26C682B50;
}

uint64_t *sub_215CFB60C(uint64_t **a1, const void **a2, uint64_t a3)
{
  int v6 = a1 + 1;
  std::unique_lock<std::mutex> v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *a2;
    }
    if (v7 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    while (1)
    {
      uint64_t v10 = (uint64_t **)v5;
      long long v13 = (const void *)v5[4];
      unsigned int v11 = v5 + 4;
      std::string::size_type v12 = v13;
      int v14 = *((char *)v11 + 23);
      if (v14 >= 0) {
        __n128 v15 = v11;
      }
      else {
        __n128 v15 = v12;
      }
      if (v14 >= 0) {
        size_t v16 = *((unsigned __int8 *)v11 + 23);
      }
      else {
        size_t v16 = v11[1];
      }
      if (v16 >= v9) {
        size_t v17 = v9;
      }
      else {
        size_t v17 = v16;
      }
      int v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0) {
          goto LABEL_8;
        }
LABEL_22:
        int v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0) {
            return (uint64_t *)v10;
          }
        }
        else if (v16 >= v9)
        {
          return (uint64_t *)v10;
        }
        std::unique_lock<std::mutex> v5 = v10[1];
        if (!v5)
        {
          int v6 = v10 + 1;
LABEL_28:
          std::string::size_type v20 = (uint64_t *)operator new(0x50uLL);
          unint64_t v21 = v20 + 4;
          if (*(char *)(a3 + 23) < 0) {
            goto LABEL_31;
          }
LABEL_29:
          *(_OWORD *)unint64_t v21 = *(_OWORD *)a3;
          v21[2] = *(void *)(a3 + 16);
          goto LABEL_32;
        }
      }
      else
      {
        if (v9 >= v16) {
          goto LABEL_22;
        }
LABEL_8:
        std::unique_lock<std::mutex> v5 = *v10;
        int v6 = v10;
        if (!*v10) {
          goto LABEL_28;
        }
      }
    }
  }
  uint64_t v10 = a1 + 1;
  std::string::size_type v20 = (uint64_t *)operator new(0x50uLL);
  unint64_t v21 = v20 + 4;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0) {
    goto LABEL_29;
  }
LABEL_31:
  sub_215738B0C(v21, *(void **)a3, *(void *)(a3 + 8));
LABEL_32:
  v20[9] = 0;
  v20[8] = 0;
  v20[7] = (uint64_t)(v20 + 8);
  *std::string::size_type v20 = 0;
  v20[1] = 0;
  v20[2] = (uint64_t)v10;
  *int v6 = v20;
  int v22 = (uint64_t *)**a1;
  unint64_t v23 = v20;
  if (v22)
  {
    *a1 = v22;
    unint64_t v23 = *v6;
  }
  sub_21573B048(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v20;
}

void sub_215CFB79C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_215CFB7B0(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_21573A6BC((uint64_t)&v28, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  uint64_t v8 = *((unsigned __int16 *)v2 + 12);
  unint64_t v9 = (((v6 + 2654435769u) >> 2) + ((v6 + 2654435769u) << 6) + v8 + 2654435769) ^ (v6 + 2654435769u);
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v7);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v11 = (((v6 + 2654435769u) >> 2) + ((v6 + 2654435769u) << 6) + v8 + 2654435769) ^ (v6 + 2654435769u);
    if (v9 >= *(void *)&v7) {
      unint64_t v11 = v9 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v11 = v9 & (*(void *)&v7 - 1);
  }
  std::string::size_type v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  long long v13 = *v12;
  if (*v12)
  {
    char v14 = v2[23];
    if (v14 >= 0) {
      uint64_t v15 = v2[23];
    }
    else {
      uint64_t v15 = *((void *)v2 + 1);
    }
    if (v14 < 0) {
      uint64_t v2 = *(unsigned char **)v2;
    }
    if (v10.u32[0] < 2uLL)
    {
      uint64_t v16 = *(void *)&v7 - 1;
      while (1)
      {
        uint64_t v22 = v13[1];
        if (v22 != v9)
        {
          if ((v22 & v16) != v11) {
            return 0;
          }
          goto LABEL_37;
        }
        uint64_t v23 = *((unsigned __int8 *)v13 + 39);
        if ((v23 & 0x80u) == 0) {
          uint64_t v24 = *((unsigned __int8 *)v13 + 39);
        }
        else {
          uint64_t v24 = v13[3];
        }
        if (v24 == v15)
        {
          BOOL v25 = (const void **)(v13 + 2);
          if ((v23 & 0x80) != 0)
          {
            if (memcmp(*v25, v2, v13[3])) {
              goto LABEL_37;
            }
          }
          else if (*((unsigned char *)v13 + 39))
          {
            uint64_t v26 = v2;
            while (*(unsigned __int8 *)v25 == *v26)
            {
              BOOL v25 = (const void **)((char *)v25 + 1);
              ++v26;
              if (!--v23) {
                goto LABEL_50;
              }
            }
            goto LABEL_37;
          }
LABEL_50:
          if (*((unsigned __int16 *)v13 + 20) == v8) {
            return v13;
          }
        }
LABEL_37:
        long long v13 = (uint64_t *)*v13;
        if (!v13) {
          return v13;
        }
      }
    }
    do
    {
      unint64_t v17 = v13[1];
      if (v17 == v9)
      {
        uint64_t v18 = *((unsigned __int8 *)v13 + 39);
        if ((v18 & 0x80u) == 0) {
          uint64_t v19 = *((unsigned __int8 *)v13 + 39);
        }
        else {
          uint64_t v19 = v13[3];
        }
        if (v19 != v15) {
          goto LABEL_19;
        }
        std::string::size_type v20 = (const void **)(v13 + 2);
        if ((v18 & 0x80) != 0)
        {
          if (memcmp(*v20, v2, v13[3])) {
            goto LABEL_19;
          }
        }
        else if (*((unsigned char *)v13 + 39))
        {
          unint64_t v21 = v2;
          while (*(unsigned __int8 *)v20 == *v21)
          {
            std::string::size_type v20 = (const void **)((char *)v20 + 1);
            ++v21;
            if (!--v18) {
              goto LABEL_34;
            }
          }
          goto LABEL_19;
        }
LABEL_34:
        if (*((unsigned __int16 *)v13 + 20) == v8) {
          return v13;
        }
      }
      else
      {
        if (v17 >= *(void *)&v7) {
          v17 %= *(void *)&v7;
        }
        if (v17 != v11) {
          return 0;
        }
      }
LABEL_19:
      long long v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

void *sub_215CFB9F0(void *result, uint64_t a2)
{
  unint64_t v3 = result[6];
  unint64_t v2 = result[7];
  unint64_t v4 = v2 - v3;
  if (v2 < v3) {
    unint64_t v4 = 0;
  }
  if (v4 <= 3) {
    goto LABEL_10;
  }
  uint64_t v5 = result[3];
  unint64_t v6 = v3 + 4;
  result[6] = v6;
  if (v2 <= v6) {
    goto LABEL_10;
  }
  *(unsigned char *)a2 = *(unsigned char *)(v5 + v6);
  unint64_t v7 = result[7];
  unint64_t v8 = result[6] + 1;
  result[6] = v8;
  BOOL v9 = v7 >= v8;
  unint64_t v10 = v7 - v8;
  if (!v9) {
    unint64_t v10 = 0;
  }
  if (v10 <= 3
    || (*(_DWORD *)(a2 + 4) = *(_DWORD *)(result[3] + v8),
        unint64_t v11 = result[7],
        unint64_t v12 = result[6] + 4,
        result[6] = v12,
        v11 <= v12))
  {
LABEL_10:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result[3] + v12);
  ++result[6];
  return result;
}

void sub_215CFBB1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215CFBB30(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215CFBB44(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215CFBB58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215CFBB6C(uint64_t a1)
{
  *(void *)a1 = &unk_26C682B70;
  *(_DWORD *)(a1 + 8) = -1;
  *(unsigned char *)(a1 + 39) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(unsigned char *)(a1 + 71) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a1 + 88) = 1018212795;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 850045863;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 16std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 208) = 1018212795;
  *(_OWORD *)(a1 + 185) = 0u;
  *(void *)(a1 + 264) = 850045863;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(void *)(a1 + 32std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a1 + 352) = 0;
  sub_215D094B0();
}

void sub_215CFBD14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215D09E80((uint64_t *)va);
  sub_215AF7578((void *)(v5 + 120));
  std::mutex::~mutex(v6);
  std::thread::~thread((std::thread *)(v5 + 48));
  std::condition_variable::~condition_variable((std::condition_variable *)v5);
  std::mutex::~mutex(v4);
  std::condition_variable::~condition_variable(v3);
  if (*(char *)(v2 + 71) < 0)
  {
    operator delete(*(void **)(v2 + 48));
    if ((*(char *)(v2 + 39) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v2 + 39) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v2 + 16));
  _Unwind_Resume(a1);
}

uint64_t sub_215CFBD94(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 264);
  std::mutex::lock((std::mutex *)(a1 + 264));
  atomic_store(0, (unsigned __int8 *)(a1 + 81));
  int v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 1)
  {
    if (shutdown(*(_DWORD *)(a1 + 8), 2) < 0) {
      __error();
    }
    close(v3);
  }
  (*(void (**)(void))(**(void **)(a1 + 368) + 24))(*(void *)(a1 + 368));
  if (*(void *)(a1 + 256)) {
    std::thread::join((std::thread *)(a1 + 256));
  }
  std::condition_variable::notify_one((std::condition_variable *)(a1 + 488));
  *(_DWORD *)(a1 + 8) = -1;
  std::mutex::unlock(v2);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 488));
  unint64_t v4 = *(void ***)(a1 + 448);
  uint64_t v5 = *(void ***)(a1 + 456);
  if (v5 == v4)
  {
    uint64_t v5 = *(void ***)(a1 + 448);
    *(void *)(a1 + 48std::__fs::filesystem::__rename(__from, __to, 0) = 0;
    unint64_t v14 = 0;
  }
  else
  {
    unint64_t v6 = *(void *)(a1 + 472);
    unint64_t v7 = &v4[v6 / 0x24];
    unint64_t v8 = (char *)*v7 + 112 * (v6 % 0x24);
    unint64_t v9 = (unint64_t)v4[(*(void *)(a1 + 480) + v6) / 0x24] + 112 * ((*(void *)(a1 + 480) + v6) % 0x24);
    if (v8 != (char *)v9)
    {
      do
      {
        unint64_t v10 = (void *)*((void *)v8 + 11);
        if (v10)
        {
          *((void *)v8 + 12) = v10;
          operator delete(v10);
        }
        unint64_t v11 = (void *)*((void *)v8 + 8);
        if (v11)
        {
          *((void *)v8 + 9) = v11;
          operator delete(v11);
        }
        unint64_t v12 = (void *)*((void *)v8 + 3);
        if (v12)
        {
          *((void *)v8 + 4) = v12;
          operator delete(v12);
        }
        v8 += 112;
        if (v8 - (unsigned char *)*v7 == 4032)
        {
          long long v13 = (char *)v7[1];
          ++v7;
          unint64_t v8 = v13;
        }
      }
      while (v8 != (char *)v9);
      unint64_t v4 = *(void ***)(a1 + 448);
      uint64_t v5 = *(void ***)(a1 + 456);
    }
    *(void *)(a1 + 48std::__fs::filesystem::__rename(__from, __to, 0) = 0;
    unint64_t v14 = (char *)v5 - (char *)v4;
    if ((unint64_t)((char *)v5 - (char *)v4) >= 0x11)
    {
      do
      {
        operator delete(*v4);
        uint64_t v5 = *(void ***)(a1 + 456);
        unint64_t v4 = (void **)(*(void *)(a1 + 448) + 8);
        *(void *)(a1 + 448) = v4;
        unint64_t v14 = (char *)v5 - (char *)v4;
      }
      while ((unint64_t)((char *)v5 - (char *)v4) > 0x10);
    }
  }
  unint64_t v15 = v14 >> 3;
  if (v15 == 1)
  {
    uint64_t v16 = 18;
    goto LABEL_27;
  }
  if (v15 == 2)
  {
    uint64_t v16 = 36;
LABEL_27:
    *(void *)(a1 + 472) = v16;
  }
  if (v4 != v5)
  {
    do
    {
      unint64_t v17 = *v4++;
      operator delete(v17);
    }
    while (v4 != v5);
    uint64_t v19 = *(void *)(a1 + 448);
    uint64_t v18 = *(void *)(a1 + 456);
    if (v18 != v19) {
      *(void *)(a1 + 456) = v18 + ((v19 - v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  std::string::size_type v20 = *(void **)(a1 + 440);
  if (v20) {
    operator delete(v20);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 376));
  uint64_t v21 = *(void *)(a1 + 368);
  *(void *)(a1 + 368) = 0;
  if (v21)
  {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    uint64_t v22 = *(void *)(a1 + 368);
    *(void *)(a1 + 368) = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
  }
  uint64_t v23 = *(void *)(a1 + 352);
  if (v23 == a1 + 328)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 328) + 32))(a1 + 328);
  }
  else if (v23)
  {
    (*(void (**)(uint64_t))(*(void *)v23 + 40))(v23);
  }
  std::mutex::~mutex(v2);
  std::thread::~thread((std::thread *)(a1 + 256));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 208));
  std::mutex::~mutex((std::mutex *)(a1 + 136));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
      return a1;
    }
LABEL_45:
    operator delete(*(void **)(a1 + 16));
    return a1;
  }
  if (*(char *)(a1 + 39) < 0) {
    goto LABEL_45;
  }
  return a1;
}

void sub_215CFC10C(void *a1)
{
  std::mutex::unlock(v1);
  sub_215731D80(a1);
}

void sub_215CFC124(uint64_t a1)
{
  sub_215CFBD94(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215CFC15C(unsigned int a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  char v12 = 1;
  int v2 = socket(2, 1, 0);
  int v11 = v2;
  if (v2 < 1)
  {
    unsigned __int8 v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    int v3 = v2;
    unint64_t v4 = operator new(0x20uLL);
    void *v4 = &unk_26C682BF0;
    v4[1] = &v12;
    void v4[2] = &v11;
    unint64_t v15 = v4;
    int v10 = 1;
    if (setsockopt(v3, 0xFFFF, 4, &v10, 4u) < 0
      || (int v9 = 1, setsockopt(v11, 0xFFFF, 4130, &v9, 4u) < 0)
      || (*(void *)&v13.sa_len = 512,
          *(void *)&v13.sa_data[6] = 0,
          *(_WORD *)v13.sa_CFDataRef data = __rev16(a1),
          bind(v11, &v13, 0x10u) < 0)
      || listen(v11, 128) < 0)
    {
      unsigned __int8 v5 = 0;
      unsigned int v6 = 0;
      uint64_t v7 = 0;
    }
    else
    {
      char v12 = 0;
      unsigned __int8 v5 = v11;
      unsigned int v6 = v11 & 0xFFFFFF00;
      uint64_t v7 = 0x100000000;
    }
    if (!v15) {
      sub_21573D7DC();
    }
    (*(void (**)(void *))(*v15 + 48))(v15);
    if (v15 == v14)
    {
      (*(void (**)(void *))(v14[0] + 32))(v14);
    }
    else if (v15)
    {
      (*(void (**)(void))(*v15 + 40))();
    }
  }
  return v7 & 0x100000000 | v6 & 0xFFFFFF00 | v5;
}

void sub_215CFC398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_215CFDA8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215CFC3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_215CFDA8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215CFC3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_215CFDA8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215CFC3D8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_215731D80(exception_object);
}

uint64_t sub_215CFC3F0(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_215CFC3F8(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_215CFC400(uint64_t a1, int a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*(int *)(a1 + 8) > 0) {
    return 0;
  }
  socklen_t v17 = 16;
  int v4 = accept(a2, &v19, &v17);
  if (v4 < 0) {
    return 0;
  }
  inet_ntop(2, &v19.sa_data[2], __s, 0x10u);
  unsigned int v5 = *(unsigned __int16 *)v19.sa_data;
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v12 = v6 | 7;
    }
    uint64_t v13 = v12 + 1;
    unint64_t v8 = (long long *)operator new(v12 + 1);
    *((void *)&v14 + 1) = v7;
    unint64_t v15 = v13 | 0x8000000000000000;
    *(void *)&long long v14 = v8;
LABEL_15:
    memcpy(v8, __s, v7);
    uint64_t v9 = a1 + 16;
    unsigned int v10 = bswap32(v5) >> 16;
    *((unsigned char *)v8 + v7) = 0;
    if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_16:
    operator delete(*(void **)v9);
    goto LABEL_9;
  }
  HIBYTE(v15) = v6;
  unint64_t v8 = &v14;
  if (v6) {
    goto LABEL_15;
  }
  uint64_t v9 = a1 + 16;
  unsigned int v10 = bswap32(*(unsigned __int16 *)v19.sa_data) >> 16;
  LOBYTE(v14) = 0;
  if (*(char *)(a1 + 39) < 0) {
    goto LABEL_16;
  }
LABEL_9:
  *(_OWORD *)uint64_t v9 = v14;
  *(void *)(v9 + 16) = v15;
  *(_WORD *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v10;
  *(_DWORD *)(a1 + 8) = v4;
  sub_215CFC5DC(&v14, v4);
  int v11 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*v11);
  }
  *(_OWORD *)int v11 = v14;
  *(void *)(a1 + 64) = v15;
  *(_WORD *)(a1 + 72) = v16;
  uint64_t result = 1;
  *(unsigned char *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 1;
  return result;
}

unint64_t sub_215CFC5DC(_WORD *a1, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *(void *)&v9.sa_len = 0;
  *(void *)&v9.sa_data[6] = 0;
  socklen_t v8 = 16;
  unint64_t result = getsockname(a2, &v9, &v8);
  if ((result & 0x80000000) != 0)
  {
    *((unsigned char *)a1 + 23) = 0;
    *(unsigned char *)a1 = 0;
    a1[12] = 0;
    return result;
  }
  inet_ntop(2, &v9.sa_data[2], __s, 0x10u);
  unint64_t result = strlen(__s);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  size_t v4 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    unsigned int v5 = operator new(v6 + 1);
    *((void *)a1 + 1) = v4;
    *((void *)a1 + 2) = v7 | 0x8000000000000000;
    *(void *)a1 = v5;
  }
  else
  {
    *((unsigned char *)a1 + 23) = result;
    unsigned int v5 = a1;
    if (!result) {
      goto LABEL_11;
    }
  }
  unint64_t result = (unint64_t)memcpy(v5, __s, v4);
LABEL_11:
  *((unsigned char *)v5 + v4) = 0;
  a1[12] = bswap32(*(unsigned __int16 *)v9.sa_data) >> 16;
  return result;
}

uint64_t sub_215CFC718(uint64_t a1, long long *a2, uint64_t a3, char a4)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  if (*(int *)(a1 + 8) > 0) {
    return 0;
  }
  int v9 = *((unsigned __int16 *)a2 + 12);
  char v40 = 1;
  int v10 = socket(2, 1, 0);
  int v39 = v10;
  if (v10 < 0) {
    return 0;
  }
  int v11 = v10;
  uint64_t v12 = operator new(0x20uLL);
  void *v12 = &unk_26C682C70;
  v12[1] = &v40;
  v12[2] = &v39;
  unsigned int v46 = v12;
  int v38 = 1;
  if (setsockopt(v11, 0xFFFF, 4, &v38, 4u) < 0) {
    goto LABEL_10;
  }
  int v37 = 1;
  if (setsockopt(v39, 0xFFFF, 4130, &v37, 4u) < 0) {
    goto LABEL_10;
  }
  memset(&v36.ai_addrlen, 0, 32);
  v36.ai_flags = 0;
  uint64_t v35 = 0;
  *(void *)&v36.ai_family = 0x100000002;
  v36.ai_protocol = 6;
  *(void *)std::string __str = 0;
  uint64_t v44 = 0;
  snprintf(__str, 0x10uLL, "%d", v9);
  uint64_t v13 = *((char *)a2 + 23) >= 0 ? (const char *)a2 : *(const char **)a2;
  if (getaddrinfo(v13, __str, &v36, &v35))
  {
LABEL_10:
    uint64_t v14 = 0;
    unsigned __int8 v15 = 0;
    unsigned int v16 = 0;
    goto LABEL_11;
  }
  v41[0] = &unk_26C682CF0;
  v41[1] = &v35;
  v41[2] = 0;
  long long v42 = v41;
  uint64_t v20 = v35;
  if (a4)
  {
    int v21 = fcntl(v39, 3, 0);
    if (v21 < 0 || fcntl(v39, 4, v21 | 4u) < 0) {
      goto LABEL_52;
    }
    if (connect(v39, v20->ai_addr, v20->ai_addrlen) < 0)
    {
      if (*__error() != 36) {
        goto LABEL_52;
      }
      int v28 = (int)(*(double *)&a3 * 1000.0);
      v34.tv_sec = v28 / 1000;
      v34.tv_usec = 1000 * (v28 % 1000);
      memset(&v33, 0, sizeof(v33));
      int v29 = v39;
      if (__darwin_check_fd_set_overflow(v39, &v33, 0)) {
        *(__int32_t *)((char *)v33.fds_bits + (((unint64_t)v29 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v29;
      }
      int v30 = select(v39 + 1, 0, &v33, 0, &v34);
      if (v30 < 0)
      {
        __error();
        goto LABEL_52;
      }
      if (!v30) {
        goto LABEL_52;
      }
      socklen_t v31 = 4;
      int v32 = 0;
      unsigned __int8 v15 = 0;
      uint64_t v14 = 0;
      if (getsockopt(v39, 0xFFFF, 4103, &v32, &v31) < 0)
      {
        unsigned int v16 = 0;
        std::string::size_type v27 = v42;
        if (v42) {
          goto LABEL_54;
        }
LABEL_42:
        sub_21573D7DC();
      }
      unsigned int v16 = 0;
      if (v32)
      {
LABEL_53:
        std::string::size_type v27 = v42;
        if (v42) {
          goto LABEL_54;
        }
        goto LABEL_42;
      }
    }
    int v22 = fcntl(v39, 3, 0);
    if ((v22 & 0x80000000) == 0)
    {
      int v23 = fcntl(v39, 4, v22 & 0xFFFFFFFB);
      goto LABEL_40;
    }
LABEL_52:
    uint64_t v14 = 0;
    unsigned __int8 v15 = 0;
    unsigned int v16 = 0;
    goto LABEL_53;
  }
  int v23 = connect(v39, v35->ai_addr, v35->ai_addrlen);
LABEL_40:
  if (v23 < 0) {
    goto LABEL_52;
  }
  char v40 = 0;
  unsigned __int8 v15 = v39;
  unsigned int v16 = v39 & 0xFFFFFF00;
  uint64_t v14 = 0x100000000;
  std::string::size_type v27 = v42;
  if (!v42) {
    goto LABEL_42;
  }
LABEL_54:
  (*(void (**)(void *))(*v27 + 48))(v27);
  if (v42 == v41)
  {
    (*(void (**)(void *))(v41[0] + 32))(v41);
  }
  else if (v42)
  {
    (*(void (**)(void))(*v42 + 40))();
  }
LABEL_11:
  if (!v46) {
    sub_21573D7DC();
  }
  (*(void (**)(void *))(*v46 + 48))(v46);
  if (v46 == v45)
  {
    (*(void (**)(void *))(v45[0] + 32))(v45);
    if ((v14 & 0x100000000) != 0) {
      goto LABEL_18;
    }
    return 0;
  }
  if (v46) {
    (*(void (**)(void))(*v46 + 40))();
  }
  if ((v14 & 0x100000000) == 0) {
    return 0;
  }
LABEL_18:
  *(_DWORD *)(a1 + 8) = v16 & 0xFFFFFF00 | v15;
  socklen_t v17 = (void **)(a1 + 16);
  if ((long long *)(a1 + 16) != a2)
  {
    char v18 = *((unsigned char *)a2 + 23);
    if (*(char *)(a1 + 39) < 0)
    {
      if (v18 >= 0) {
        uint64_t v24 = a2;
      }
      else {
        uint64_t v24 = *(long long **)a2;
      }
      if (v18 >= 0) {
        size_t v25 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v25 = *((void *)a2 + 1);
      }
      sub_21573ABD0(v17, v24, v25);
    }
    else if ((*((unsigned char *)a2 + 23) & 0x80) != 0)
    {
      sub_21573AB08(v17, *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v19 = *a2;
      *(void *)(a1 + 32) = *((void *)a2 + 2);
      *(_OWORD *)socklen_t v17 = v19;
    }
  }
  *(_WORD *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = *((_WORD *)a2 + 12);
  sub_215CFC5DC(&v33, *(_DWORD *)(a1 + 8));
  uint64_t v26 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*v26);
  }
  *(_OWORD *)uint64_t v26 = *(_OWORD *)v33.fds_bits;
  *(void *)(a1 + 64) = *(void *)&v33.fds_bits[4];
  *(_WORD *)(a1 + 72) = v33.fds_bits[6];
  *(unsigned char *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  return 1;
}

void sub_215CFCCA4(_Unwind_Exception *a1)
{
  sub_215CFDA8C((void *)(v1 - 152));
  sub_215CFDA8C((void *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_215CFCCD0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_215731D80(exception_object);
}

uint64_t sub_215CFCD2C(uint64_t a1, uint64_t a2, char a3)
{
  if ((*(_DWORD *)(a1 + 8) & 0x80000000) != 0) {
    return 0;
  }
  uint64_t v7 = (void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 24);
  if (!v6)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v6 = *(void *)(a2 + 24);
    if (!v6)
    {
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
      abort();
    }
  }
  int v8 = *(void *)(a2 + 32) - v6 - 10;
  uint64_t v9 = 1;
  *(_DWORD *)uint64_t v6 = 1;
  *(unsigned char *)(v6 + 4) = 10;
  *(_DWORD *)(v6 + 5) = v8;
  *(unsigned char *)(v6 + 9) = a3;
  int v11 = *(char **)(a2 + 24);
  int v10 = *(unsigned char **)(a2 + 32);
  void *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  unint64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    unint64_t v13 = 0;
    int v14 = *(_DWORD *)(a1 + 8);
    while (1)
    {
      ssize_t v15 = send(v14, &v11[v13], v12 - v13, 0);
      if (v15 < 0) {
        break;
      }
      v13 += v15;
      if (v13 >= v12)
      {
        uint64_t v9 = 1;
        goto LABEL_10;
      }
    }
    __error();
    uint64_t v9 = 0;
    if (v11) {
      goto LABEL_14;
    }
    return v9;
  }
LABEL_10:
  if (!v11) {
    return v9;
  }
LABEL_14:
  operator delete(v11);
  return v9;
}

void sub_215CFCEB4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_215CFCED0@<Q0>(void *a1@<X0>, char a2@<W1>, __n128 *a3@<X8>)
{
  uint64_t v7 = a1 + 3;
  uint64_t v6 = a1[3];
  if (!v6)
  {
    if (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      uint64_t v6 = a1[3];
      if (v6) {
        goto LABEL_4;
      }
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
    }
    abort();
  }
LABEL_4:
  int v8 = a1[4] - v6 - 10;
  *(_DWORD *)uint64_t v6 = 1;
  *(unsigned char *)(v6 + 4) = 10;
  *(_DWORD *)(v6 + 5) = v8;
  *(unsigned char *)(v6 + 9) = a2;
  __n128 result = *(__n128 *)(a1 + 3);
  *a3 = result;
  a3[1].n128_u64[0] = a1[5];
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = 0;
  return result;
}

uint64_t sub_215CFCFC8(uint64_t a1, void *a2)
{
  void v12[3] = *MEMORY[0x263EF8340];
  if ((*(_DWORD *)(a1 + 8) & 0x80000000) == 0)
  {
    int v3 = (void *)a2[3];
    if (v3)
    {
      if (v3 == a2)
      {
        p_lk = &__lk;
        (*(void (**)(void *, std::unique_lock<std::mutex> *))(*a2 + 24))(a2, &__lk);
      }
      else
      {
        p_lk = (std::unique_lock<std::mutex> *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
      }
    }
    else
    {
      p_lk = 0;
    }
    size_t v4 = (std::unique_lock<std::mutex> *)(a1 + 328);
    if ((std::unique_lock<std::mutex> *)(a1 + 328) != &__lk)
    {
      unsigned int v5 = p_lk;
      uint64_t v6 = *(std::unique_lock<std::mutex> **)(a1 + 352);
      if (p_lk == &__lk)
      {
        if (v6 == v4)
        {
          (*(void (**)(std::unique_lock<std::mutex> *, void *))&__lk.__m_->__m_.__opaque[16])(&__lk, v12);
          (*(void (**)(std::unique_lock<std::mutex> *))&p_lk->__m_->__m_.__opaque[24])(p_lk);
          p_lk = 0;
          (*(void (**)(void, std::unique_lock<std::mutex> *))(**(void **)(a1 + 352) + 24))(*(void *)(a1 + 352), &__lk);
          (*(void (**)(void))(**(void **)(a1 + 352) + 32))(*(void *)(a1 + 352));
          *(void *)(a1 + 352) = 0;
          p_lk = &__lk;
          (*(void (**)(void *, uint64_t))(v12[0] + 24))(v12, a1 + 328);
          (*(void (**)(void *))(v12[0] + 32))(v12);
          *(void *)(a1 + 352) = v4;
          uint64_t v7 = p_lk;
          if (p_lk == &__lk) {
            goto LABEL_11;
          }
        }
        else
        {
          (*(void (**)(std::unique_lock<std::mutex> *, uint64_t))&__lk.__m_->__m_.__opaque[16])(&__lk, a1 + 328);
          (*(void (**)(std::unique_lock<std::mutex> *))&p_lk->__m_->__m_.__opaque[24])(p_lk);
          p_lk = *(std::unique_lock<std::mutex> **)(a1 + 352);
          int v8 = p_lk;
          *(void *)(a1 + 352) = v4;
          uint64_t v7 = v8;
          if (v8 == &__lk) {
            goto LABEL_11;
          }
        }
        goto LABEL_17;
      }
      if (v6 != v4)
      {
        p_lk = *(std::unique_lock<std::mutex> **)(a1 + 352);
        *(void *)(a1 + 352) = v5;
        uint64_t v7 = v6;
        if (v6 == &__lk)
        {
LABEL_11:
          (*(void (**)(std::unique_lock<std::mutex> *))&__lk.__m_->__m_.__opaque[24])(&__lk);
          goto LABEL_19;
        }
LABEL_17:
        if (v7) {
          (*(void (**)(std::unique_lock<std::mutex> *))&v7->__m_->__m_.__opaque[32])(v7);
        }
LABEL_19:
        operator new();
      }
      (*(void (**)(uint64_t, std::unique_lock<std::mutex> *))&v4->__m_->__m_.__opaque[16])(a1 + 328, &__lk);
      (*(void (**)(void))(**(void **)(a1 + 352) + 32))(*(void *)(a1 + 352));
      *(void *)(a1 + 352) = p_lk;
      p_lk = &__lk;
    }
    uint64_t v7 = p_lk;
    if (p_lk == &__lk) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
  return 0;
}

void sub_215CFD5A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215CFD610(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  v43.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 376);
  v43.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 376));
  if (a4)
  {
    v8.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    double v9 = *(double *)&a3 * 1000000000.0 + (double)v8.__d_.__rep_;
    double v10 = -9.22337204e18;
    if (v9 > -9.22337204e18) {
      double v10 = *(double *)&a3 * 1000000000.0 + (double)v8.__d_.__rep_;
    }
    if (v9 < 9.22337204e18) {
      uint64_t v11 = (uint64_t)v10;
    }
    else {
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    while (1)
    {
      if (*(void *)(a1 + 480)) {
        goto LABEL_47;
      }
      unsigned __int8 v12 = atomic_load((unsigned __int8 *)(a1 + 81));
      if ((v12 & 1) == 0) {
        goto LABEL_47;
      }
      v13.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (v9 == (double)v13.__d_.__rep_) {
        int v14 = 0;
      }
      else {
        int v14 = -127;
      }
      if (v9 > (double)v13.__d_.__rep_) {
        int v14 = 1;
      }
      if (v9 < (double)v13.__d_.__rep_) {
        int v14 = -1;
      }
      if (v14 != -127 && (char)v14 < 1)
      {
LABEL_42:
        if (!*(void *)(a1 + 480)) {
          atomic_load((unsigned __int8 *)(a1 + 81));
        }
        goto LABEL_47;
      }
      v16.__d_.__rep_ = v11 - std::chrono::steady_clock::now().__d_.__rep_;
      if (v16.__d_.__rep_ >= 1) {
        break;
      }
LABEL_33:
      v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (v9 == (double)v20.__d_.__rep_) {
        int v21 = 0;
      }
      else {
        int v21 = -127;
      }
      if (v9 < (double)v20.__d_.__rep_) {
        int v21 = 1;
      }
      if (v9 > (double)v20.__d_.__rep_) {
        int v21 = -1;
      }
      if (v21 == -127 || (v21 & 0x80) == 0) {
        goto LABEL_42;
      }
    }
    std::chrono::steady_clock::now();
    v17.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v17.__d_.__rep_)
    {
      if (v17.__d_.__rep_ < 1)
      {
        if ((unint64_t)v17.__d_.__rep_ < 0xFFDF3B645A1CAC09)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v18 = 0x8000000000000000;
          goto LABEL_31;
        }
      }
      else if ((unint64_t)v17.__d_.__rep_ > 0x20C49BA5E353F7)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v18 = 0x7FFFFFFFFFFFFFFFLL;
        if ((v16.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFFFLL) {
          goto LABEL_31;
        }
LABEL_30:
        v19.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_32:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 488), &v43, v19);
        std::chrono::steady_clock::now();
        goto LABEL_33;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v18 = 1000 * v17.__d_.__rep_;
      if (1000 * v17.__d_.__rep_ > (v16.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL)) {
        goto LABEL_30;
      }
    }
    else
    {
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v18 = 0;
    }
LABEL_31:
    v19.__d_.__rep_ = v18 + v16.__d_.__rep_;
    goto LABEL_32;
  }
  while (!*(void *)(a1 + 480))
  {
    unsigned __int8 v22 = atomic_load((unsigned __int8 *)(a1 + 81));
    if ((v22 & 1) == 0) {
      break;
    }
    std::condition_variable::wait((std::condition_variable *)(a1 + 488), &v43);
  }
LABEL_47:
  if (*(void *)(a1 + 480) && (unsigned __int8 v23 = atomic_load((unsigned __int8 *)(a1 + 81)), (v23 & 1) != 0))
  {
    unint64_t v26 = *(void *)(a1 + 472);
    uint64_t v27 = *(void *)(*(void *)(a1 + 448) + 8 * (v26 / 0x24));
    unint64_t v28 = v26 % 0x24;
    uint64_t v29 = v27 + 112 * (v26 % 0x24);
    int v30 = *(void **)(a2 + 24);
    *(void *)(a2 + 8) = *(void *)(v29 + 8);
    uint64_t v31 = v29 + 24;
    if (v30)
    {
      *(void *)(a2 + 32) = v30;
      operator delete(v30);
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
    }
    *(_OWORD *)(a2 + 24) = *(_OWORD *)v31;
    uint64_t v32 = v27 + 112 * v28;
    *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = *(void *)(v32 + 40);
    *(void *)uint64_t v31 = 0;
    *(void *)(v31 + 8) = 0;
    *(void *)(v31 + 16) = 0;
    fd_set v33 = *(void **)(a2 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(v32 + 48);
    uint64_t v34 = v32 + 64;
    if (v33)
    {
      *(void *)(a2 + 72) = v33;
      operator delete(v33);
      *(void *)(a2 + 64) = 0;
      *(void *)(a2 + 72) = 0;
      *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 0;
    }
    *(_OWORD *)(a2 + 64) = *(_OWORD *)v34;
    *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = *(void *)(v27 + 112 * v28 + 80);
    *(void *)uint64_t v34 = 0;
    *(void *)(v34 + 8) = 0;
    *(void *)(v34 + 16) = 0;
    uint64_t v35 = *(void **)(a2 + 88);
    if (v35)
    {
      *(void *)(a2 + 96) = v35;
      operator delete(v35);
      *(void *)(a2 + 88) = 0;
      *(void *)(a2 + 96) = 0;
      *(void *)(a2 + 104) = 0;
    }
    uint64_t v36 = v27 + 112 * v28;
    *(_OWORD *)(a2 + 88) = *(_OWORD *)(v36 + 88);
    *(void *)(a2 + 104) = *(void *)(v36 + 104);
    *(void *)(v36 + 88) = 0;
    *(void *)(v36 + 96) = 0;
    *(void *)(v36 + 104) = 0;
    int v37 = (void *)(*(void *)(*(void *)(a1 + 448) + 8 * (*(void *)(a1 + 472) / 0x24uLL))
                   + 112 * (*(void *)(a1 + 472) % 0x24uLL));
    int v38 = (void *)v37[11];
    if (v38)
    {
      v37[12] = v38;
      operator delete(v38);
    }
    int v39 = (void *)v37[8];
    if (v39)
    {
      v37[9] = v39;
      operator delete(v39);
    }
    char v40 = (int64x2_t *)(a1 + 472);
    uint64_t v41 = (void *)v37[3];
    if (v41)
    {
      v37[4] = v41;
      operator delete(v41);
    }
    int64x2_t v42 = vaddq_s64(*v40, (int64x2_t)xmmword_215EF6610);
    *char v40 = v42;
    if (v42.i64[0] >= 0x48uLL)
    {
      operator delete(**(void ***)(a1 + 448));
      *(void *)(a1 + 448) += 8;
      *(void *)(a1 + 472) -= 36;
    }
    uint64_t v24 = 1;
    if (v43.__owns_) {
      goto LABEL_50;
    }
  }
  else
  {
    uint64_t v24 = 0;
    if (v43.__owns_) {
LABEL_50:
    }
      std::mutex::unlock(v43.__m_);
  }
  return v24;
}

void *sub_215CFDA10(void *a1)
{
  int v2 = (void *)*a1;
  *a1 = 0;
  if (v2)
  {
    int v3 = (void *)v2[13];
    if (v3)
    {
      v2[14] = v3;
      operator delete(v3);
    }
    size_t v4 = (void *)v2[10];
    if (v4)
    {
      v2[11] = v4;
      operator delete(v4);
    }
    unsigned int v5 = (void *)v2[5];
    if (v5)
    {
      v2[6] = v5;
      operator delete(v5);
    }
    MEMORY[0x2166C4D20](v2, 0x1090C401F76F622);
  }
  return a1;
}

void *sub_215CFDA8C(void *a1)
{
  uint64_t v2 = a1[3];
  if (!v2) {
    sub_21573D7DC();
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  int v3 = (void *)a1[3];
  if (v3 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v3) {
      (*(void (**)(void *))(*v3 + 40))(v3);
    }
    return a1;
  }
}

void sub_215CFDB58()
{
}

__n128 sub_215CFDB6C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C682BF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_215CFDBC0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C682BF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_215CFDBF8(uint64_t result)
{
  if (**(unsigned char **)(result + 8)) {
    return close(**(_DWORD **)(result + 16));
  }
  return result;
}

uint64_t sub_215CFDC14(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3kit3net15SocketInterface18CreateServerSocketEtEUlvE_JEEEEE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3kit3net15SocketInterface18CreateServe"
                                "rSocketEtEUlvE_JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3kit3net15SocketInterface18CreateServerSocketEtEUlvE_JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3kit3net15SocketInterface18CreateServerSocketEtEUlvE_JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215CFDC84()
{
  return &unk_26C682C50;
}

void sub_215CFDC94()
{
}

__n128 sub_215CFDCA8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C682C70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_215CFDCFC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C682C70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_215CFDD34(uint64_t result)
{
  if (**(unsigned char **)(result + 8)) {
    return close(**(_DWORD **)(result + 16));
  }
  return result;
}

uint64_t sub_215CFDD50(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3kit3net15SocketInterface17StartClientSocketERKNS"
                     "3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEtNS3_8optionalINS3_6chrono8durationIdNS3"
                     "_5ratioILl1ELl1EEEEEEEEUlvE_JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3kit3net15SocketInterface17StartClient"
                                "SocketERKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEtNS3_8optionalINS3"
                                "_6chrono8durationIdNS3_5ratioILl1ELl1EEEEEEEEUlvE_JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3kit3net15SocketInterface17StartClientSocketERKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEtNS3_8optionalINS3_6chrono8durationIdNS3_5ratioILl1ELl1EEEEEEEEUlvE_JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3kit3net15SocketInterface17StartClientSocketERKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEtNS3_8optionalINS3_6chrono8durationIdNS3_5ratioILl1ELl1EEEEEEEEUlvE_JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215CFDDC0()
{
  return &unk_26C682CD0;
}

void sub_215CFDDD0()
{
}

__n128 sub_215CFDDE4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C682CF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_215CFDE30(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C682CF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_215CFDE60(uint64_t a1)
{
}

uint64_t sub_215CFDE6C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3kit3net15SocketInterface17StartClientSocketERKNS"
                     "3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEtNS3_8optionalINS3_6chrono8durationIdNS3"
                     "_5ratioILl1ELl1EEEEEEEEUlvE0_JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3kit3net15SocketInterface17StartClient"
                                "SocketERKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEtNS3_8optionalINS3"
                                "_6chrono8durationIdNS3_5ratioILl1ELl1EEEEEEEEUlvE0_JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3kit3net15SocketInterface17StartClientSocketERKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEtNS3_8optionalINS3_6chrono8durationIdNS3_5ratioILl1ELl1EEEEEEEEUlvE0_JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3kit3net15SocketInterface17StartClientSocketERKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEtNS3_8optionalINS3_6chrono8durationIdNS3_5ratioILl1ELl1EEEEEEEEUlvE0_JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215CFDEDC()
{
  return &unk_26C682D50;
}

uint64_t sub_215CFDEE8(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = a1 + 32;
    uint64_t v4 = *(void *)(a1 + 56);
    if (v4 != a1 + 32)
    {
LABEL_4:
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
      }
      if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
        return a1;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v3 = a1 + 32;
    uint64_t v4 = *(void *)(a1 + 56);
    if (v4 != a1 + 32) {
      goto LABEL_4;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return a1;
  }
LABEL_10:
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_215CFDFEC(uint64_t a1)
{
  *(void *)a1 = &unk_26C682D70;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = a1 + 40;
    uint64_t v4 = *(void *)(a1 + 64);
    if (v4 != a1 + 40)
    {
LABEL_4:
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
      }
      if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
        return a1;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v3 = a1 + 40;
    uint64_t v4 = *(void *)(a1 + 64);
    if (v4 != a1 + 40) {
      goto LABEL_4;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    return a1;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_215CFE10C(uint64_t a1)
{
  *(void *)a1 = &unk_26C682D70;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = a1 + 40;
    uint64_t v4 = *(void *)(a1 + 64);
    if (v4 != a1 + 40)
    {
LABEL_4:
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
      }
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      {
LABEL_7:
        JUMPOUT(0x2166C4D20);
      }
LABEL_12:
      operator delete(*(void **)(a1 + 8));
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = a1 + 40;
    uint64_t v4 = *(void *)(a1 + 64);
    if (v4 != a1 + 40) {
      goto LABEL_4;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    goto LABEL_7;
  }
  goto LABEL_12;
}

char *sub_215CFE240(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  uint64_t v2 = (char *)operator new(0x58uLL);
  *(void *)uint64_t v2 = &unk_26C682D70;
  sub_215CFE5D8(v2 + 8, v1);
  return v2;
}

void sub_215CFE294(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_215CFE2A8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C682D70;
  return sub_215CFE5D8((char *)(a2 + 8), (long long *)(a1 + 8));
}

void sub_215CFE2D4(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = a1 + 40;
    uint64_t v4 = *(void *)(a1 + 64);
    if (v4 != a1 + 40) {
      goto LABEL_4;
    }
LABEL_9:
    (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  uint64_t v3 = a1 + 40;
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4 == a1 + 40) {
    goto LABEL_9;
  }
LABEL_4:
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  if (*(char *)(a1 + 31) < 0)
  {
LABEL_10:
    unsigned int v5 = *(void **)(a1 + 8);
    operator delete(v5);
  }
}

void sub_215CFE3DC(char *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)__p + 10);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = __p + 40;
    uint64_t v4 = (char *)*((void *)__p + 8);
    if (v4 != __p + 40)
    {
LABEL_4:
      if (v4) {
        (*(void (**)(char *))(*(void *)v4 + 40))(v4);
      }
      if ((__p[31] & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v3 = __p + 40;
    uint64_t v4 = (char *)*((void *)__p + 8);
    if (v4 != __p + 40) {
      goto LABEL_4;
    }
  }
  (*(void (**)(char *))(*(void *)v3 + 32))(v3);
  if ((__p[31] & 0x80000000) == 0)
  {
LABEL_7:
    unsigned int v5 = __p;
    goto LABEL_9;
  }
LABEL_12:
  operator delete(*((void **)__p + 1));
  unsigned int v5 = __p;

LABEL_9:
  operator delete(v5);
}

uint64_t sub_215CFE500(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (!v2) {
    sub_21573D7DC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 48))(v2, a1 + 8, *(void *)(a1 + 72) + 16);
}

uint64_t sub_215CFE55C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d3kit3net24SocketNetworkConnectionTINS1_15SocketInterfaceEE18ReceivePacketsLoopEvENKUlNSt3__"
                     "110shared_ptrINS1_13LoadedPayloadEEEE_clES8_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d3kit3net24SocketNetworkConnectionTINS1_15SocketInterfaceEE18ReceivePacketsLoopEv"
                                "ENKUlNSt3__110shared_ptrINS1_13LoadedPayloadEEEE_clES8_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d3kit3net24SocketNetworkConnectionTINS1_15SocketInterfaceEE18ReceivePacketsLoopEvENKUlNSt3__110shared_ptrINS1_13LoadedPayloadEEEE_clES8_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d3kit3net24SocketNetworkConnectionTINS1_15SocketInterfaceEE18ReceivePacketsLoopEvENKUlNSt3__110shared_ptrINS1_13LoadedPayloadEEEE_clES8_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215CFE5CC()
{
  return &unk_26C682DD0;
}

char *sub_215CFE5D8(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_215738B0C(__dst, *(void **)a2, *((void *)a2 + 1));
    *((_WORD *)__dst + 12) = *((_WORD *)a2 + 12);
    uint64_t v5 = *((void *)a2 + 7);
    if (!v5)
    {
LABEL_7:
      *((void *)__dst + 7) = v5;
      goto LABEL_9;
    }
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
    *((_WORD *)__dst + 12) = *((_WORD *)a2 + 12);
    uint64_t v5 = *((void *)a2 + 7);
    if (!v5) {
      goto LABEL_7;
    }
  }
  if ((long long *)v5 != a2 + 2)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    goto LABEL_7;
  }
  *((void *)__dst + 7) = __dst + 32;
  (*(void (**)(void))(**((void **)a2 + 7) + 24))(*((void *)a2 + 7));
LABEL_9:
  uint64_t v6 = *((void *)a2 + 9);
  *((void *)__dst + 8) = *((void *)a2 + 8);
  *((void *)__dst + 9) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return __dst;
}

void sub_215CFE6C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_215CFE6E4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  long long v4 = *(char **)(a1 + 16);
  uint64_t v6 = (v4 - v5) >> 3;
  int64_t v7 = v4 - v5;
  std::chrono::steady_clock::time_point v8 = v5;
  if (v4 == v5) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = 36 * v6 - 1;
  }
  unint64_t v10 = *(void *)(a1 + 32);
  if (v9 != *(void *)(a1 + 40) + v10) {
    goto LABEL_98;
  }
  BOOL v11 = v10 >= 0x24;
  unint64_t v12 = v10 - 36;
  if (v11)
  {
    *(void *)(a1 + 32) = v12;
    std::chrono::steady_clock::time_point v13 = v5 + 8;
    uint64_t v14 = *(void *)v5;
    *(void *)(a1 + 8) = v5 + 8;
    if (v4 != *(char **)(a1 + 24))
    {
LABEL_95:
      *(void *)long long v4 = v14;
      goto LABEL_96;
    }
    ssize_t v15 = *(char **)a1;
    if ((unint64_t)v13 > *(void *)a1)
    {
      uint64_t v16 = (uint64_t)&v13[-*(void *)a1] >> 3;
      if (v16 >= -1) {
        uint64_t v17 = v16 + 1;
      }
      else {
        uint64_t v17 = v16 + 2;
      }
      uint64_t v18 = v17 >> 1;
      uint64_t v19 = -v18;
      std::chrono::steady_clock::time_point v20 = &v13[-8 * v18];
      int64_t v21 = v4 - v13;
      if (v4 != v13)
      {
        memmove(&v13[-8 * v18], v13, v4 - v13);
        long long v4 = *(char **)(a1 + 8);
      }
      unsigned __int8 v22 = &v4[8 * v19];
      long long v4 = &v20[v21];
      *(void *)(a1 + 8) = v22;
      *(void *)(a1 + 16) = &v20[v21];
      goto LABEL_95;
    }
    unint64_t v36 = (v4 - v15) >> 2;
    if (v4 == v15) {
      unint64_t v36 = 1;
    }
    if (v36 >> 61) {
      goto LABEL_116;
    }
    unint64_t v37 = v36 >> 2;
    uint64_t v38 = 8 * v36;
    int v39 = (char *)operator new(8 * v36);
    char v40 = &v39[8 * v37];
    int64_t v42 = v4 - v13;
    BOOL v41 = v4 == v13;
    long long v4 = v40;
    if (!v41)
    {
      long long v4 = &v40[v42 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v43 = v42 - 8;
      if ((unint64_t)(v42 - 8) < 0x38)
      {
        uint64_t v44 = &v39[8 * v37];
        do
        {
LABEL_92:
          uint64_t v102 = *(void *)v13;
          v13 += 8;
          *(void *)uint64_t v44 = v102;
          v44 += 8;
        }
        while (v44 != v4);
        goto LABEL_93;
      }
      unint64_t v95 = &v39[8 * v37];
      uint64_t v44 = v95;
      if ((unint64_t)(v95 - v13) < 0x20) {
        goto LABEL_92;
      }
      uint64_t v96 = (v43 >> 3) + 1;
      uint64_t v97 = 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v44 = &v40[v97];
      v13 += v97;
      uint64_t v98 = (long long *)(v5 + 24);
      uint64_t v99 = v95 + 16;
      uint64_t v100 = v96 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v101 = *v98;
        *(v99 - 1) = *(v98 - 1);
        _OWORD *v99 = v101;
        v98 += 2;
        v99 += 2;
        v100 -= 4;
      }
      while (v100);
      if (v96 != (v96 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_92;
      }
    }
LABEL_93:
    *(void *)a1 = v39;
    *(void *)(a1 + 8) = v40;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = &v39[v38];
    if (v15)
    {
      operator delete(v15);
      long long v4 = *(char **)(a1 + 16);
    }
    goto LABEL_95;
  }
  unsigned __int8 v23 = *(char **)(a1 + 24);
  uint64_t v24 = *(char **)a1;
  uint64_t v25 = (uint64_t)&v23[-*(void *)a1];
  if (v6 >= (unint64_t)(v25 >> 3))
  {
    uint64_t v124 = v4 - v5;
    uint64_t v28 = v25 >> 2;
    if (v23 == v24) {
      unint64_t v29 = 1;
    }
    else {
      unint64_t v29 = v28;
    }
    if (!(v29 >> 61))
    {
      int v30 = (char *)operator new(8 * v29);
      uint64_t v31 = operator new(0xFC0uLL);
      uint64_t v32 = &v30[8 * v6];
      fd_set v33 = &v30[8 * v29];
      if (v6 == v29)
      {
        uint64_t v34 = v31;
        if (v124 < 1)
        {
          if (v4 == v5) {
            unint64_t v46 = 1;
          }
          else {
            unint64_t v46 = v124 >> 2;
          }
          if (v46 >> 61) {
            sub_215738AD8();
          }
          uint64_t v32 = (char *)operator new(8 * v46);
          fd_set v33 = &v32[8 * v46];
          operator delete(v30);
          std::chrono::steady_clock::time_point v8 = *(char **)(a1 + 8);
          long long v4 = *(char **)(a1 + 16);
          int v30 = v32;
        }
        else
        {
          unint64_t v35 = v6 + 2;
          if (v6 >= -1) {
            unint64_t v35 = v6 + 1;
          }
          v32 -= 8 * (v35 >> 1);
        }
        uint64_t v31 = v34;
      }
      *(void *)uint64_t v32 = v31;
      uint64_t v47 = v32 + 8;
      if (v4 == v8)
      {
        uint64_t v48 = v32;
        float v49 = v32 + 8;
      }
      else
      {
        do
        {
          if (v32 == v30)
          {
            if (v47 >= v33)
            {
              if (v33 == v32) {
                unint64_t v55 = 1;
              }
              else {
                unint64_t v55 = (v33 - v32) >> 2;
              }
              if (v55 >> 61) {
                sub_215738AD8();
              }
              size_t v56 = (char *)operator new(8 * v55);
              int v30 = v56;
              unint64_t v57 = (v55 + 3) >> 2;
              BOOL v51 = &v56[8 * v57];
              float v49 = v51;
              int64_t v58 = v47 - v32;
              if (v47 != v32)
              {
                float v49 = &v51[v58 & 0xFFFFFFFFFFFFFFF8];
                unint64_t v59 = v58 - 8;
                char v60 = &v56[8 * v57];
                std::string v61 = v32;
                if (v59 < 0x38) {
                  goto LABEL_120;
                }
                uint64_t v62 = 8 * v57;
                char v60 = &v56[8 * v57];
                std::string v61 = v32;
                if ((unint64_t)(v60 - v32) < 0x20) {
                  goto LABEL_120;
                }
                uint64_t v63 = (v59 >> 3) + 1;
                uint64_t v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
                char v60 = &v51[v64];
                std::string v61 = &v32[v64];
                uint64_t v65 = (long long *)(v32 + 16);
                uint64_t v66 = &v56[v62 + 16];
                uint64_t v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v68 = *v65;
                  *((_OWORD *)v66 - 1) = *(v65 - 1);
                  *(_OWORD *)uint64_t v66 = v68;
                  v65 += 2;
                  v66 += 32;
                  v67 -= 4;
                }
                while (v67);
                if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_120:
                  do
                  {
                    uint64_t v69 = *(void *)v61;
                    v61 += 8;
                    *(void *)char v60 = v69;
                    v60 += 8;
                  }
                  while (v60 != v49);
                }
              }
              fd_set v33 = &v56[8 * v55];
              operator delete(v32);
            }
            else
            {
              uint64_t v53 = (v33 - v47) >> 3;
              if (v53 >= -1) {
                unint64_t v54 = v53 + 1;
              }
              else {
                unint64_t v54 = v53 + 2;
              }
              float v49 = &v47[8 * (v54 >> 1)];
              BOOL v51 = &v32[8 * (v54 >> 1)];
              if (v47 == v32)
              {
                int v30 = v47;
              }
              else
              {
                memmove(&v32[8 * (v54 >> 1)], v32, v47 - v32);
                int v30 = v32;
              }
            }
          }
          else
          {
            BOOL v51 = v32;
            float v49 = v47;
          }
          uint64_t v52 = *((void *)v4 - 1);
          v4 -= 8;
          *((void *)v51 - 1) = v52;
          uint64_t v48 = v51 - 8;
          uint64_t v47 = v49;
          uint64_t v32 = v48;
        }
        while (v4 != *(char **)(a1 + 8));
      }
      unsigned int v50 = *(char **)a1;
      *(void *)a1 = v30;
      *(void *)(a1 + 8) = v48;
      long long v4 = v49;
      *(void *)(a1 + 16) = v49;
      *(void *)(a1 + 24) = v33;
      if (v50)
      {
        operator delete(v50);
        long long v4 = *(char **)(a1 + 16);
      }
      goto LABEL_97;
    }
    goto LABEL_116;
  }
  unint64_t v26 = operator new(0xFC0uLL);
  uint64_t v27 = v26;
  if (v23 == v4)
  {
    if (v5 == v24)
    {
      unint64_t v70 = (v23 - v5) >> 2;
      if (v4 == v5) {
        unint64_t v70 = 1;
      }
      if (v70 >> 61) {
        goto LABEL_116;
      }
      unint64_t v71 = (v70 + 3) >> 2;
      uint64_t v72 = 8 * v70;
      uint64_t v73 = (char *)operator new(8 * v70);
      uint64_t v45 = &v73[8 * v71];
      uint64_t v74 = v45;
      if (v4 != v5)
      {
        uint64_t v74 = &v45[8 * v6];
        uint64_t v75 = &v73[8 * v71];
        uint64_t v76 = v5;
        if ((unint64_t)(v7 - 8) < 0x38) {
          goto LABEL_121;
        }
        char v77 = &v73[8 * v71];
        uint64_t v75 = v77;
        uint64_t v76 = v5;
        if ((unint64_t)(v77 - v5) < 0x20) {
          goto LABEL_121;
        }
        unint64_t v78 = ((unint64_t)(v7 - 8) >> 3) + 1;
        uint64_t v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v75 = &v45[v79];
        uint64_t v76 = &v5[v79];
        uint64_t v80 = (long long *)(v5 + 16);
        char v81 = v77 + 16;
        uint64_t v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v83 = *v80;
          *(v81 - 1) = *(v80 - 1);
          *char v81 = v83;
          v80 += 2;
          v81 += 2;
          v82 -= 4;
        }
        while (v82);
        if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_121:
          do
          {
            uint64_t v84 = *(void *)v76;
            v76 += 8;
            *(void *)uint64_t v75 = v84;
            v75 += 8;
          }
          while (v75 != v74);
        }
      }
      *(void *)a1 = v73;
      *(void *)(a1 + 8) = v45;
      *(void *)(a1 + 16) = v74;
      *(void *)(a1 + 24) = &v73[v72];
      if (v5)
      {
        operator delete(v5);
        uint64_t v45 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v45 = v5;
    }
    *((void *)v45 - 1) = v27;
    uint64_t v85 = *(char **)(a1 + 8);
    long long v86 = *(char **)(a1 + 16);
    *(void *)(a1 + 8) = v85 - 8;
    uint64_t v87 = *((void *)v85 - 1);
    *(void *)(a1 + 8) = v85;
    if (v86 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)long long v86 = v87;
      goto LABEL_96;
    }
    uint64_t v88 = *(char **)a1;
    if ((unint64_t)v85 > *(void *)a1)
    {
      uint64_t v89 = (uint64_t)&v85[-*(void *)a1] >> 3;
      if (v89 >= -1) {
        uint64_t v90 = v89 + 1;
      }
      else {
        uint64_t v90 = v89 + 2;
      }
      uint64_t v91 = v90 >> 1;
      uint64_t v92 = -v91;
      unint64_t v93 = &v85[-8 * v91];
      int64_t v94 = v86 - v85;
      if (v86 != v85)
      {
        memmove(&v85[-8 * v91], v85, v86 - v85);
        uint64_t v85 = *(char **)(a1 + 8);
      }
      *(void *)(a1 + 8) = &v85[8 * v92];
      *(void *)(a1 + 16) = &v93[v94];
      *(void *)&v93[v94] = v87;
      goto LABEL_96;
    }
    unint64_t v107 = (v86 - v88) >> 2;
    if (v86 == v88) {
      unint64_t v107 = 1;
    }
    if (!(v107 >> 61))
    {
      unint64_t v108 = v107 >> 2;
      uint64_t v109 = 8 * v107;
      uint64_t v110 = (char *)operator new(8 * v107);
      uint8x16_t v111 = &v110[8 * v108];
      int64_t v112 = v86 - v85;
      BOOL v41 = v86 == v85;
      long long v86 = v111;
      if (v41) {
        goto LABEL_113;
      }
      long long v86 = &v111[v112 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v113 = v112 - 8;
      if ((unint64_t)(v112 - 8) >= 0x38)
      {
        uint64_t v115 = &v110[8 * v108];
        uint64_t v114 = v115;
        if ((unint64_t)(v115 - v85) >= 0x20)
        {
          uint64_t v116 = (v113 >> 3) + 1;
          uint64_t v117 = 8 * (v116 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v114 = &v111[v117];
          uint16x8_t v118 = &v85[v117];
          uint64_t v119 = (long long *)(v85 + 16);
          long long v120 = v115 + 16;
          uint64_t v121 = v116 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v122 = *v119;
            *(v120 - 1) = *(v119 - 1);
            *long long v120 = v122;
            v119 += 2;
            v120 += 2;
            v121 -= 4;
          }
          while (v121);
          uint64_t v85 = v118;
          if (v116 == (v116 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_113:
            *(void *)a1 = v110;
            *(void *)(a1 + 8) = v111;
            *(void *)(a1 + 16) = v86;
            *(void *)(a1 + 24) = &v110[v109];
            if (v88)
            {
              operator delete(v88);
              long long v86 = *(char **)(a1 + 16);
            }
            goto LABEL_80;
          }
        }
      }
      else
      {
        uint64_t v114 = &v110[8 * v108];
      }
      do
      {
        uint64_t v123 = *(void *)v85;
        v85 += 8;
        *(void *)uint64_t v114 = v123;
        v114 += 8;
      }
      while (v114 != v86);
      goto LABEL_113;
    }
LABEL_116:
    sub_215738AD8();
  }
  *(void *)long long v4 = v26;
LABEL_96:
  long long v4 = (char *)(*(void *)(a1 + 16) + 8);
  *(void *)(a1 + 16) = v4;
LABEL_97:
  std::chrono::steady_clock::time_point v8 = *(char **)(a1 + 8);
LABEL_98:
  if (v4 == v8)
  {
    unint64_t v104 = 0;
  }
  else
  {
    unint64_t v103 = *(void *)(a1 + 40) + *(void *)(a1 + 32);
    unint64_t v104 = *(void *)&v8[8 * (v103 / 0x24)] + 112 * (v103 % 0x24);
  }
  *(void *)unint64_t v104 = &unk_26C6851C8;
  uint64_t v105 = *(void *)(a2 + 8);
  *(void *)unint64_t v104 = &unk_26C6831F8;
  *(void *)(v104 + 8) = v105;
  *(void *)(v104 + 16) = &unk_26C683340;
  *(void *)(v104 + 24) = 0;
  *(void *)(v104 + 32) = 0;
  *(void *)(v104 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(_OWORD *)(v104 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(v104 + 4std::__fs::filesystem::__rename(__from, __to, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(v104 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(v104 + 72) = 0;
  *(void *)(v104 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(v104 + 64) = 0;
  *(_OWORD *)(v104 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(v104 + 8std::__fs::filesystem::__rename(__from, __to, 0) = *(void *)(a2 + 80);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(v104 + 88) = 0;
  *(void *)(v104 + 96) = 0;
  *(void *)(v104 + 104) = 0;
  __n128 result = *(__n128 *)(a2 + 88);
  *(__n128 *)(v104 + 88) = result;
  *(void *)(v104 + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  ++*(void *)(a1 + 40);
  return result;
}

void sub_215CFEE98(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_215CFEEB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_215CFEEC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_215CFEEE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215CFEEF8(uint64_t a1)
{
  *(void *)a1 = &unk_26C682DF0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = a1 + 40;
    uint64_t v4 = *(void *)(a1 + 64);
    if (v4 != a1 + 40)
    {
LABEL_4:
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
      }
      if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
        return a1;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v3 = a1 + 40;
    uint64_t v4 = *(void *)(a1 + 64);
    if (v4 != a1 + 40) {
      goto LABEL_4;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    return a1;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_215CFF018(uint64_t a1)
{
  *(void *)a1 = &unk_26C682DF0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = a1 + 40;
    uint64_t v4 = *(void *)(a1 + 64);
    if (v4 != a1 + 40)
    {
LABEL_4:
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
      }
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      {
LABEL_7:
        JUMPOUT(0x2166C4D20);
      }
LABEL_12:
      operator delete(*(void **)(a1 + 8));
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = a1 + 40;
    uint64_t v4 = *(void *)(a1 + 64);
    if (v4 != a1 + 40) {
      goto LABEL_4;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    goto LABEL_7;
  }
  goto LABEL_12;
}

char *sub_215CFF14C(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  uint64_t v2 = (char *)operator new(0x58uLL);
  *(void *)uint64_t v2 = &unk_26C682DF0;
  sub_215CFF4E4(v2 + 8, v1);
  return v2;
}

void sub_215CFF1A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_215CFF1B4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C682DF0;
  return sub_215CFF4E4((char *)(a2 + 8), (long long *)(a1 + 8));
}

void sub_215CFF1E0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = a1 + 40;
    uint64_t v4 = *(void *)(a1 + 64);
    if (v4 != a1 + 40) {
      goto LABEL_4;
    }
LABEL_9:
    (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  uint64_t v3 = a1 + 40;
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4 == a1 + 40) {
    goto LABEL_9;
  }
LABEL_4:
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  if (*(char *)(a1 + 31) < 0)
  {
LABEL_10:
    uint64_t v5 = *(void **)(a1 + 8);
    operator delete(v5);
  }
}

void sub_215CFF2E8(char *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)__p + 10);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = __p + 40;
    uint64_t v4 = (char *)*((void *)__p + 8);
    if (v4 != __p + 40)
    {
LABEL_4:
      if (v4) {
        (*(void (**)(char *))(*(void *)v4 + 40))(v4);
      }
      if ((__p[31] & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v3 = __p + 40;
    uint64_t v4 = (char *)*((void *)__p + 8);
    if (v4 != __p + 40) {
      goto LABEL_4;
    }
  }
  (*(void (**)(char *))(*(void *)v3 + 32))(v3);
  if ((__p[31] & 0x80000000) == 0)
  {
LABEL_7:
    uint64_t v5 = __p;
    goto LABEL_9;
  }
LABEL_12:
  operator delete(*((void **)__p + 1));
  uint64_t v5 = __p;

LABEL_9:
  operator delete(v5);
}

uint64_t sub_215CFF40C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (!v2) {
    sub_21573D7DC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 48))(v2, a1 + 8, *(void *)(a1 + 72) + 16);
}

uint64_t sub_215CFF468(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d3kit3net24SocketNetworkConnectionTINS1_15SocketInterfaceEE18ReceivePacketsLoopEvENKUlNSt3__"
                     "110shared_ptrINS1_13LoadedPayloadEEEE_clES8_EUlvE0_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d3kit3net24SocketNetworkConnectionTINS1_15SocketInterfaceEE18ReceivePacketsLoopEv"
                                "ENKUlNSt3__110shared_ptrINS1_13LoadedPayloadEEEE_clES8_EUlvE0_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d3kit3net24SocketNetworkConnectionTINS1_15SocketInterfaceEE18ReceivePacketsLoopEvENKUlNSt3__110shared_ptrINS1_13LoadedPayloadEEEE_clES8_EUlvE0_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d3kit3net24SocketNetworkConnectionTINS1_15SocketInterfaceEE18ReceivePacketsLoopEvENKUlNSt3__110shared_ptrINS1_13LoadedPayloadEEEE_clES8_EUlvE0_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215CFF4D8()
{
  return &unk_26C682E50;
}

char *sub_215CFF4E4(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_215738B0C(__dst, *(void **)a2, *((void *)a2 + 1));
    *((_WORD *)__dst + 12) = *((_WORD *)a2 + 12);
    uint64_t v5 = *((void *)a2 + 7);
    if (!v5)
    {
LABEL_7:
      *((void *)__dst + 7) = v5;
      goto LABEL_9;
    }
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
    *((_WORD *)__dst + 12) = *((_WORD *)a2 + 12);
    uint64_t v5 = *((void *)a2 + 7);
    if (!v5) {
      goto LABEL_7;
    }
  }
  if ((long long *)v5 != a2 + 2)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    goto LABEL_7;
  }
  *((void *)__dst + 7) = __dst + 32;
  (*(void (**)(void))(**((void **)a2 + 7) + 24))(*((void *)a2 + 7));
LABEL_9:
  uint64_t v6 = *((void *)a2 + 9);
  *((void *)__dst + 8) = *((void *)a2 + 8);
  *((void *)__dst + 9) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return __dst;
}

void sub_215CFF5D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_215CFF5F0()
{
}

unint64_t *sub_215CFF60C(unint64_t *result, void *__dst)
{
  uint64_t v2 = result;
  unint64_t v3 = result[5];
  uint64_t v4 = v3 + 1;
  unint64_t v5 = result[3];
  if (v3 + 1 <= v5)
  {
    BOOL v6 = v5 >= v3;
    int64_t v7 = v5 - v3;
    if (!v6) {
      int64_t v7 = 0;
    }
    unint64_t v8 = result[4];
    if ((uint64_t)v5 < v7) {
      int64_t v7 = result[3];
    }
    uint64_t v9 = (const void *)(v8 + v5 - v7);
    uint64_t v10 = v8 + v5 - (void)v9;
    if (v10 >= 1) {
      size_t v11 = 1;
    }
    else {
      size_t v11 = v10;
    }
    if (v11)
    {
      __n128 result = (unint64_t *)memmove(__dst, v9, v11);
      uint64_t v4 = v2[5] + 1;
    }
    v2[5] = v4;
  }
  else
  {
    *((unsigned char *)result + 16) = 1;
  }
  return result;
}

unint64_t *sub_215CFF69C(unint64_t *result, void *__dst)
{
  uint64_t v2 = result;
  unint64_t v3 = result[5];
  uint64_t v4 = v3 + 1;
  unint64_t v5 = result[3];
  if (v3 + 1 <= v5)
  {
    BOOL v6 = v5 >= v3;
    int64_t v7 = v5 - v3;
    if (!v6) {
      int64_t v7 = 0;
    }
    unint64_t v8 = result[4];
    if ((uint64_t)v5 < v7) {
      int64_t v7 = result[3];
    }
    uint64_t v9 = (const void *)(v8 + v5 - v7);
    uint64_t v10 = v8 + v5 - (void)v9;
    if (v10 >= 1) {
      size_t v11 = 1;
    }
    else {
      size_t v11 = v10;
    }
    if (v11)
    {
      __n128 result = (unint64_t *)memmove(__dst, v9, v11);
      uint64_t v4 = v2[5] + 1;
    }
    v2[5] = v4;
  }
  else
  {
    *((unsigned char *)result + 16) = 1;
  }
  return result;
}

unint64_t *sub_215CFF72C(unint64_t *result, void *__dst)
{
  uint64_t v2 = result;
  unint64_t v3 = result[5];
  uint64_t v4 = v3 + 2;
  unint64_t v5 = result[3];
  if (v3 + 2 <= v5)
  {
    BOOL v6 = v5 >= v3;
    int64_t v7 = v5 - v3;
    if (!v6) {
      int64_t v7 = 0;
    }
    unint64_t v8 = result[4];
    if ((uint64_t)v5 < v7) {
      int64_t v7 = result[3];
    }
    uint64_t v9 = (const void *)(v8 + v5 - v7);
    uint64_t v10 = v8 + v5 - (void)v9;
    if (v10 >= 2) {
      size_t v11 = 2;
    }
    else {
      size_t v11 = v10;
    }
    if (v11)
    {
      __n128 result = (unint64_t *)memmove(__dst, v9, v11);
      uint64_t v4 = v2[5] + 2;
    }
    v2[5] = v4;
  }
  else
  {
    *((unsigned char *)result + 16) = 1;
  }
  return result;
}

unint64_t *sub_215CFF7C0(unint64_t *result, void *__dst)
{
  uint64_t v2 = result;
  unint64_t v3 = result[5];
  uint64_t v4 = v3 + 4;
  unint64_t v5 = result[3];
  if (v3 + 4 <= v5)
  {
    BOOL v6 = v5 >= v3;
    int64_t v7 = v5 - v3;
    if (!v6) {
      int64_t v7 = 0;
    }
    unint64_t v8 = result[4];
    if ((uint64_t)v5 < v7) {
      int64_t v7 = result[3];
    }
    uint64_t v9 = (const void *)(v8 + v5 - v7);
    uint64_t v10 = v8 + v5 - (void)v9;
    if (v10 >= 4) {
      size_t v11 = 4;
    }
    else {
      size_t v11 = v10;
    }
    if (v11)
    {
      __n128 result = (unint64_t *)memmove(__dst, v9, v11);
      uint64_t v4 = v2[5] + 4;
    }
    v2[5] = v4;
  }
  else
  {
    *((unsigned char *)result + 16) = 1;
  }
  return result;
}

unint64_t *sub_215CFF854(unint64_t *result, void *__dst)
{
  uint64_t v2 = result;
  unint64_t v3 = result[5];
  uint64_t v4 = v3 + 8;
  unint64_t v5 = result[3];
  if (v3 + 8 <= v5)
  {
    BOOL v6 = v5 >= v3;
    int64_t v7 = v5 - v3;
    if (!v6) {
      int64_t v7 = 0;
    }
    unint64_t v8 = result[4];
    if ((uint64_t)v5 < v7) {
      int64_t v7 = result[3];
    }
    uint64_t v9 = (const void *)(v8 + v5 - v7);
    uint64_t v10 = v8 + v5 - (void)v9;
    if (v10 >= 8) {
      size_t v11 = 8;
    }
    else {
      size_t v11 = v10;
    }
    if (v11)
    {
      __n128 result = (unint64_t *)memmove(__dst, v9, v11);
      uint64_t v4 = v2[5] + 8;
    }
    v2[5] = v4;
  }
  else
  {
    *((unsigned char *)result + 16) = 1;
  }
  return result;
}

unint64_t *sub_215CFF8E8(unint64_t *result, void *__dst)
{
  uint64_t v2 = result;
  unint64_t v3 = result[5];
  uint64_t v4 = v3 + 8;
  unint64_t v5 = result[3];
  if (v3 + 8 <= v5)
  {
    BOOL v6 = v5 >= v3;
    int64_t v7 = v5 - v3;
    if (!v6) {
      int64_t v7 = 0;
    }
    unint64_t v8 = result[4];
    if ((uint64_t)v5 < v7) {
      int64_t v7 = result[3];
    }
    uint64_t v9 = (const void *)(v8 + v5 - v7);
    uint64_t v10 = v8 + v5 - (void)v9;
    if (v10 >= 8) {
      size_t v11 = 8;
    }
    else {
      size_t v11 = v10;
    }
    if (v11)
    {
      __n128 result = (unint64_t *)memmove(__dst, v9, v11);
      uint64_t v4 = v2[5] + 8;
    }
    v2[5] = v4;
  }
  else
  {
    *((unsigned char *)result + 16) = 1;
  }
  return result;
}

unint64_t *sub_215CFF97C(unint64_t *result, void *__dst)
{
  uint64_t v2 = result;
  unint64_t v3 = result[5];
  uint64_t v4 = v3 + 1;
  unint64_t v5 = result[3];
  if (v3 + 1 <= v5)
  {
    BOOL v6 = v5 >= v3;
    int64_t v7 = v5 - v3;
    if (!v6) {
      int64_t v7 = 0;
    }
    unint64_t v8 = result[4];
    if ((uint64_t)v5 < v7) {
      int64_t v7 = result[3];
    }
    uint64_t v9 = (const void *)(v8 + v5 - v7);
    uint64_t v10 = v8 + v5 - (void)v9;
    if (v10 >= 1) {
      size_t v11 = 1;
    }
    else {
      size_t v11 = v10;
    }
    if (v11)
    {
      __n128 result = (unint64_t *)memmove(__dst, v9, v11);
      uint64_t v4 = v2[5] + 1;
    }
    v2[5] = v4;
  }
  else
  {
    *((unsigned char *)result + 16) = 1;
  }
  return result;
}

unint64_t *sub_215CFFA0C(unint64_t *result, void *__dst)
{
  uint64_t v2 = result;
  unint64_t v3 = result[5];
  uint64_t v4 = v3 + 1;
  unint64_t v5 = result[3];
  if (v3 + 1 <= v5)
  {
    BOOL v6 = v5 >= v3;
    int64_t v7 = v5 - v3;
    if (!v6) {
      int64_t v7 = 0;
    }
    unint64_t v8 = result[4];
    if ((uint64_t)v5 < v7) {
      int64_t v7 = result[3];
    }
    uint64_t v9 = (const void *)(v8 + v5 - v7);
    uint64_t v10 = v8 + v5 - (void)v9;
    if (v10 >= 1) {
      size_t v11 = 1;
    }
    else {
      size_t v11 = v10;
    }
    if (v11)
    {
      __n128 result = (unint64_t *)memmove(__dst, v9, v11);
      uint64_t v4 = v2[5] + 1;
    }
    v2[5] = v4;
  }
  else
  {
    *((unsigned char *)result + 16) = 1;
  }
  return result;
}

unint64_t *sub_215CFFA9C(unint64_t *result, void *__dst)
{
  uint64_t v2 = result;
  unint64_t v3 = result[5];
  uint64_t v4 = v3 + 2;
  unint64_t v5 = result[3];
  if (v3 + 2 <= v5)
  {
    BOOL v6 = v5 >= v3;
    int64_t v7 = v5 - v3;
    if (!v6) {
      int64_t v7 = 0;
    }
    unint64_t v8 = result[4];
    if ((uint64_t)v5 < v7) {
      int64_t v7 = result[3];
    }
    uint64_t v9 = (const void *)(v8 + v5 - v7);
    uint64_t v10 = v8 + v5 - (void)v9;
    if (v10 >= 2) {
      size_t v11 = 2;
    }
    else {
      size_t v11 = v10;
    }
    if (v11)
    {
      __n128 result = (unint64_t *)memmove(__dst, v9, v11);
      uint64_t v4 = v2[5] + 2;
    }
    v2[5] = v4;
  }
  else
  {
    *((unsigned char *)result + 16) = 1;
  }
  return result;
}

unint64_t *sub_215CFFB30(unint64_t *result, void *__dst)
{
  uint64_t v2 = result;
  unint64_t v3 = result[5];
  uint64_t v4 = v3 + 4;
  unint64_t v5 = result[3];
  if (v3 + 4 <= v5)
  {
    BOOL v6 = v5 >= v3;
    int64_t v7 = v5 - v3;
    if (!v6) {
      int64_t v7 = 0;
    }
    unint64_t v8 = result[4];
    if ((uint64_t)v5 < v7) {
      int64_t v7 = result[3];
    }
    uint64_t v9 = (const void *)(v8 + v5 - v7);
    uint64_t v10 = v8 + v5 - (void)v9;
    if (v10 >= 4) {
      size_t v11 = 4;
    }
    else {
      size_t v11 = v10;
    }
    if (v11)
    {
      __n128 result = (unint64_t *)memmove(__dst, v9, v11);
      uint64_t v4 = v2[5] + 4;
    }
    v2[5] = v4;
  }
  else
  {
    *((unsigned char *)result + 16) = 1;
  }
  return result;
}

unint64_t *sub_215CFFBC4(unint64_t *result, void *__dst)
{
  uint64_t v2 = result;
  unint64_t v3 = result[5];
  uint64_t v4 = v3 + 8;
  unint64_t v5 = result[3];
  if (v3 + 8 <= v5)
  {
    BOOL v6 = v5 >= v3;
    int64_t v7 = v5 - v3;
    if (!v6) {
      int64_t v7 = 0;
    }
    unint64_t v8 = result[4];
    if ((uint64_t)v5 < v7) {
      int64_t v7 = result[3];
    }
    uint64_t v9 = (const void *)(v8 + v5 - v7);
    uint64_t v10 = v8 + v5 - (void)v9;
    if (v10 >= 8) {
      size_t v11 = 8;
    }
    else {
      size_t v11 = v10;
    }
    if (v11)
    {
      __n128 result = (unint64_t *)memmove(__dst, v9, v11);
      uint64_t v4 = v2[5] + 8;
    }
    v2[5] = v4;
  }
  else
  {
    *((unsigned char *)result + 16) = 1;
  }
  return result;
}

unint64_t *sub_215CFFC58(unint64_t *result, void *__dst)
{
  uint64_t v2 = result;
  unint64_t v3 = result[5];
  uint64_t v4 = v3 + 8;
  unint64_t v5 = result[3];
  if (v3 + 8 <= v5)
  {
    BOOL v6 = v5 >= v3;
    int64_t v7 = v5 - v3;
    if (!v6) {
      int64_t v7 = 0;
    }
    unint64_t v8 = result[4];
    if ((uint64_t)v5 < v7) {
      int64_t v7 = result[3];
    }
    uint64_t v9 = (const void *)(v8 + v5 - v7);
    uint64_t v10 = v8 + v5 - (void)v9;
    if (v10 >= 8) {
      size_t v11 = 8;
    }
    else {
      size_t v11 = v10;
    }
    if (v11)
    {
      __n128 result = (unint64_t *)memmove(__dst, v9, v11);
      uint64_t v4 = v2[5] + 8;
    }
    v2[5] = v4;
  }
  else
  {
    *((unsigned char *)result + 16) = 1;
  }
  return result;
}

unint64_t *sub_215CFFCEC(unint64_t *result, void *__dst)
{
  uint64_t v2 = result;
  unint64_t v3 = result[5];
  uint64_t v4 = v3 + 4;
  unint64_t v5 = result[3];
  if (v3 + 4 <= v5)
  {
    BOOL v6 = v5 >= v3;
    int64_t v7 = v5 - v3;
    if (!v6) {
      int64_t v7 = 0;
    }
    unint64_t v8 = result[4];
    if ((uint64_t)v5 < v7) {
      int64_t v7 = result[3];
    }
    uint64_t v9 = (const void *)(v8 + v5 - v7);
    uint64_t v10 = v8 + v5 - (void)v9;
    if (v10 >= 4) {
      size_t v11 = 4;
    }
    else {
      size_t v11 = v10;
    }
    if (v11)
    {
      __n128 result = (unint64_t *)memmove(__dst, v9, v11);
      uint64_t v4 = v2[5] + 4;
    }
    v2[5] = v4;
  }
  else
  {
    *((unsigned char *)result + 16) = 1;
  }
  return result;
}

unint64_t *sub_215CFFD80(unint64_t *result, void *__dst)
{
  uint64_t v2 = result;
  unint64_t v3 = result[5];
  uint64_t v4 = v3 + 8;
  unint64_t v5 = result[3];
  if (v3 + 8 <= v5)
  {
    BOOL v6 = v5 >= v3;
    int64_t v7 = v5 - v3;
    if (!v6) {
      int64_t v7 = 0;
    }
    unint64_t v8 = result[4];
    if ((uint64_t)v5 < v7) {
      int64_t v7 = result[3];
    }
    uint64_t v9 = (const void *)(v8 + v5 - v7);
    uint64_t v10 = v8 + v5 - (void)v9;
    if (v10 >= 8) {
      size_t v11 = 8;
    }
    else {
      size_t v11 = v10;
    }
    if (v11)
    {
      __n128 result = (unint64_t *)memmove(__dst, v9, v11);
      uint64_t v4 = v2[5] + 8;
    }
    v2[5] = v4;
  }
  else
  {
    *((unsigned char *)result + 16) = 1;
  }
  return result;
}

unint64_t *sub_215CFFE14(unint64_t *result, void *__dst)
{
  uint64_t v2 = result;
  unint64_t v3 = result[5];
  uint64_t v4 = v3 + 24;
  unint64_t v5 = result[3];
  if (v3 + 24 <= v5)
  {
    BOOL v6 = v5 >= v3;
    int64_t v7 = v5 - v3;
    if (!v6) {
      int64_t v7 = 0;
    }
    unint64_t v8 = result[4];
    if ((uint64_t)v5 < v7) {
      int64_t v7 = result[3];
    }
    uint64_t v9 = (const void *)(v8 + v5 - v7);
    uint64_t v10 = v8 + v5 - (void)v9;
    if (v10 >= 24) {
      size_t v11 = 24;
    }
    else {
      size_t v11 = v10;
    }
    if (v11)
    {
      __n128 result = (unint64_t *)memmove(__dst, v9, v11);
      uint64_t v4 = v2[5] + 24;
    }
    v2[5] = v4;
  }
  else
  {
    *((unsigned char *)result + 16) = 1;
  }
  return result;
}

void *sub_215CFFEA8(void *result, uint64_t a2, char *__dst)
{
  if (a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t)result;
    unint64_t v6 = result[5];
    do
    {
      unint64_t v7 = v6 + 1;
      unint64_t v8 = *(void *)(v5 + 24);
      if (v6 + 1 > v8)
      {
        *(unsigned char *)(v5 + 16) = 1;
      }
      else
      {
        BOOL v9 = v8 >= v6;
        uint64_t v10 = v8 - v6;
        if (!v9) {
          uint64_t v10 = 0;
        }
        if ((uint64_t)v8 < v10) {
          uint64_t v10 = *(void *)(v5 + 24);
        }
        if (v10 >= 1) {
          size_t v11 = 1;
        }
        else {
          size_t v11 = v10;
        }
        if (v11)
        {
          __n128 result = memmove(__dst, (const void *)(*(void *)(v5 + 32) + v8 - v10), v11);
          unint64_t v6 = *(void *)(v5 + 40) + 1;
          *(void *)(v5 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v6;
        }
        else
        {
          unint64_t v6 = v7;
          *(void *)(v5 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v7;
        }
      }
      ++__dst;
      --v4;
    }
    while (v4);
  }
  return result;
}

void *sub_215CFFF60(void *result, uint64_t a2, char *__dst)
{
  if (a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t)result;
    unint64_t v6 = result[5];
    do
    {
      unint64_t v7 = v6 + 1;
      unint64_t v8 = *(void *)(v5 + 24);
      if (v6 + 1 > v8)
      {
        *(unsigned char *)(v5 + 16) = 1;
      }
      else
      {
        BOOL v9 = v8 >= v6;
        uint64_t v10 = v8 - v6;
        if (!v9) {
          uint64_t v10 = 0;
        }
        if ((uint64_t)v8 < v10) {
          uint64_t v10 = *(void *)(v5 + 24);
        }
        if (v10 >= 1) {
          size_t v11 = 1;
        }
        else {
          size_t v11 = v10;
        }
        if (v11)
        {
          __n128 result = memmove(__dst, (const void *)(*(void *)(v5 + 32) + v8 - v10), v11);
          unint64_t v6 = *(void *)(v5 + 40) + 1;
          *(void *)(v5 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v6;
        }
        else
        {
          unint64_t v6 = v7;
          *(void *)(v5 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v7;
        }
      }
      ++__dst;
      --v4;
    }
    while (v4);
  }
  return result;
}

void *sub_215D00018(void *result, uint64_t a2, char *__dst)
{
  if (a2)
  {
    uint64_t v4 = (uint64_t)result;
    unint64_t v5 = result[5];
    uint64_t v6 = 2 * a2;
    do
    {
      unint64_t v7 = v5 + 2;
      unint64_t v8 = *(void *)(v4 + 24);
      if (v5 + 2 > v8)
      {
        *(unsigned char *)(v4 + 16) = 1;
      }
      else
      {
        BOOL v9 = v8 >= v5;
        uint64_t v10 = v8 - v5;
        if (!v9) {
          uint64_t v10 = 0;
        }
        if ((uint64_t)v8 < v10) {
          uint64_t v10 = *(void *)(v4 + 24);
        }
        if (v10 >= 2) {
          size_t v11 = 2;
        }
        else {
          size_t v11 = v10;
        }
        if (v11)
        {
          __n128 result = memmove(__dst, (const void *)(*(void *)(v4 + 32) + v8 - v10), v11);
          unint64_t v5 = *(void *)(v4 + 40) + 2;
          *(void *)(v4 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
        }
        else
        {
          unint64_t v5 = v7;
          *(void *)(v4 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v7;
        }
      }
      __dst += 2;
      v6 -= 2;
    }
    while (v6);
  }
  return result;
}

void *sub_215D000DC(void *result, uint64_t a2, char *__dst)
{
  if (a2)
  {
    uint64_t v4 = (uint64_t)result;
    unint64_t v5 = result[5];
    uint64_t v6 = 4 * a2;
    do
    {
      unint64_t v7 = v5 + 4;
      unint64_t v8 = *(void *)(v4 + 24);
      if (v5 + 4 > v8)
      {
        *(unsigned char *)(v4 + 16) = 1;
      }
      else
      {
        BOOL v9 = v8 >= v5;
        uint64_t v10 = v8 - v5;
        if (!v9) {
          uint64_t v10 = 0;
        }
        if ((uint64_t)v8 < v10) {
          uint64_t v10 = *(void *)(v4 + 24);
        }
        if (v10 >= 4) {
          size_t v11 = 4;
        }
        else {
          size_t v11 = v10;
        }
        if (v11)
        {
          __n128 result = memmove(__dst, (const void *)(*(void *)(v4 + 32) + v8 - v10), v11);
          unint64_t v5 = *(void *)(v4 + 40) + 4;
          *(void *)(v4 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
        }
        else
        {
          unint64_t v5 = v7;
          *(void *)(v4 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v7;
        }
      }
      __dst += 4;
      v6 -= 4;
    }
    while (v6);
  }
  return result;
}

void *sub_215D001A0(void *result, uint64_t a2, char *__dst)
{
  if (a2)
  {
    uint64_t v4 = (uint64_t)result;
    unint64_t v5 = result[5];
    uint64_t v6 = 8 * a2;
    do
    {
      unint64_t v7 = v5 + 8;
      unint64_t v8 = *(void *)(v4 + 24);
      if (v5 + 8 > v8)
      {
        *(unsigned char *)(v4 + 16) = 1;
      }
      else
      {
        BOOL v9 = v8 >= v5;
        uint64_t v10 = v8 - v5;
        if (!v9) {
          uint64_t v10 = 0;
        }
        if ((uint64_t)v8 < v10) {
          uint64_t v10 = *(void *)(v4 + 24);
        }
        if (v10 >= 8) {
          size_t v11 = 8;
        }
        else {
          size_t v11 = v10;
        }
        if (v11)
        {
          __n128 result = memmove(__dst, (const void *)(*(void *)(v4 + 32) + v8 - v10), v11);
          unint64_t v5 = *(void *)(v4 + 40) + 8;
          *(void *)(v4 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
        }
        else
        {
          unint64_t v5 = v7;
          *(void *)(v4 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v7;
        }
      }
      __dst += 8;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

void *sub_215D00264(void *result, uint64_t a2, char *__dst)
{
  if (a2)
  {
    uint64_t v4 = (uint64_t)result;
    unint64_t v5 = result[5];
    uint64_t v6 = 8 * a2;
    do
    {
      unint64_t v7 = v5 + 8;
      unint64_t v8 = *(void *)(v4 + 24);
      if (v5 + 8 > v8)
      {
        *(unsigned char *)(v4 + 16) = 1;
      }
      else
      {
        BOOL v9 = v8 >= v5;
        uint64_t v10 = v8 - v5;
        if (!v9) {
          uint64_t v10 = 0;
        }
        if ((uint64_t)v8 < v10) {
          uint64_t v10 = *(void *)(v4 + 24);
        }
        if (v10 >= 8) {
          size_t v11 = 8;
        }
        else {
          size_t v11 = v10;
        }
        if (v11)
        {
          __n128 result = memmove(__dst, (const void *)(*(void *)(v4 + 32) + v8 - v10), v11);
          unint64_t v5 = *(void *)(v4 + 40) + 8;
          *(void *)(v4 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
        }
        else
        {
          unint64_t v5 = v7;
          *(void *)(v4 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v7;
        }
      }
      __dst += 8;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

void *sub_215D00328(void *result, uint64_t a2, char *__dst)
{
  if (a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t)result;
    unint64_t v6 = result[5];
    do
    {
      unint64_t v7 = v6 + 1;
      unint64_t v8 = *(void *)(v5 + 24);
      if (v6 + 1 > v8)
      {
        *(unsigned char *)(v5 + 16) = 1;
      }
      else
      {
        BOOL v9 = v8 >= v6;
        uint64_t v10 = v8 - v6;
        if (!v9) {
          uint64_t v10 = 0;
        }
        if ((uint64_t)v8 < v10) {
          uint64_t v10 = *(void *)(v5 + 24);
        }
        if (v10 >= 1) {
          size_t v11 = 1;
        }
        else {
          size_t v11 = v10;
        }
        if (v11)
        {
          __n128 result = memmove(__dst, (const void *)(*(void *)(v5 + 32) + v8 - v10), v11);
          unint64_t v6 = *(void *)(v5 + 40) + 1;
          *(void *)(v5 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v6;
        }
        else
        {
          unint64_t v6 = v7;
          *(void *)(v5 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v7;
        }
      }
      ++__dst;
      --v4;
    }
    while (v4);
  }
  return result;
}

void *sub_215D003E0(void *result, uint64_t a2, char *__dst)
{
  if (a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t)result;
    unint64_t v6 = result[5];
    do
    {
      unint64_t v7 = v6 + 1;
      unint64_t v8 = *(void *)(v5 + 24);
      if (v6 + 1 > v8)
      {
        *(unsigned char *)(v5 + 16) = 1;
      }
      else
      {
        BOOL v9 = v8 >= v6;
        uint64_t v10 = v8 - v6;
        if (!v9) {
          uint64_t v10 = 0;
        }
        if ((uint64_t)v8 < v10) {
          uint64_t v10 = *(void *)(v5 + 24);
        }
        if (v10 >= 1) {
          size_t v11 = 1;
        }
        else {
          size_t v11 = v10;
        }
        if (v11)
        {
          __n128 result = memmove(__dst, (const void *)(*(void *)(v5 + 32) + v8 - v10), v11);
          unint64_t v6 = *(void *)(v5 + 40) + 1;
          *(void *)(v5 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v6;
        }
        else
        {
          unint64_t v6 = v7;
          *(void *)(v5 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v7;
        }
      }
      ++__dst;
      --v4;
    }
    while (v4);
  }
  return result;
}

void *sub_215D00498(void *result, uint64_t a2, char *__dst)
{
  if (a2)
  {
    uint64_t v4 = (uint64_t)result;
    unint64_t v5 = result[5];
    uint64_t v6 = 2 * a2;
    do
    {
      unint64_t v7 = v5 + 2;
      unint64_t v8 = *(void *)(v4 + 24);
      if (v5 + 2 > v8)
      {
        *(unsigned char *)(v4 + 16) = 1;
      }
      else
      {
        BOOL v9 = v8 >= v5;
        uint64_t v10 = v8 - v5;
        if (!v9) {
          uint64_t v10 = 0;
        }
        if ((uint64_t)v8 < v10) {
          uint64_t v10 = *(void *)(v4 + 24);
        }
        if (v10 >= 2) {
          size_t v11 = 2;
        }
        else {
          size_t v11 = v10;
        }
        if (v11)
        {
          __n128 result = memmove(__dst, (const void *)(*(void *)(v4 + 32) + v8 - v10), v11);
          unint64_t v5 = *(void *)(v4 + 40) + 2;
          *(void *)(v4 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
        }
        else
        {
          unint64_t v5 = v7;
          *(void *)(v4 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v7;
        }
      }
      __dst += 2;
      v6 -= 2;
    }
    while (v6);
  }
  return result;
}

void *sub_215D0055C(void *result, uint64_t a2, char *__dst)
{
  if (a2)
  {
    uint64_t v4 = (uint64_t)result;
    unint64_t v5 = result[5];
    uint64_t v6 = 4 * a2;
    do
    {
      unint64_t v7 = v5 + 4;
      unint64_t v8 = *(void *)(v4 + 24);
      if (v5 + 4 > v8)
      {
        *(unsigned char *)(v4 + 16) = 1;
      }
      else
      {
        BOOL v9 = v8 >= v5;
        uint64_t v10 = v8 - v5;
        if (!v9) {
          uint64_t v10 = 0;
        }
        if ((uint64_t)v8 < v10) {
          uint64_t v10 = *(void *)(v4 + 24);
        }
        if (v10 >= 4) {
          size_t v11 = 4;
        }
        else {
          size_t v11 = v10;
        }
        if (v11)
        {
          __n128 result = memmove(__dst, (const void *)(*(void *)(v4 + 32) + v8 - v10), v11);
          unint64_t v5 = *(void *)(v4 + 40) + 4;
          *(void *)(v4 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
        }
        else
        {
          unint64_t v5 = v7;
          *(void *)(v4 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v7;
        }
      }
      __dst += 4;
      v6 -= 4;
    }
    while (v6);
  }
  return result;
}

void *sub_215D00620(void *result, uint64_t a2, char *__dst)
{
  if (a2)
  {
    uint64_t v4 = (uint64_t)result;
    unint64_t v5 = result[5];
    uint64_t v6 = 8 * a2;
    do
    {
      unint64_t v7 = v5 + 8;
      unint64_t v8 = *(void *)(v4 + 24);
      if (v5 + 8 > v8)
      {
        *(unsigned char *)(v4 + 16) = 1;
      }
      else
      {
        BOOL v9 = v8 >= v5;
        uint64_t v10 = v8 - v5;
        if (!v9) {
          uint64_t v10 = 0;
        }
        if ((uint64_t)v8 < v10) {
          uint64_t v10 = *(void *)(v4 + 24);
        }
        if (v10 >= 8) {
          size_t v11 = 8;
        }
        else {
          size_t v11 = v10;
        }
        if (v11)
        {
          __n128 result = memmove(__dst, (const void *)(*(void *)(v4 + 32) + v8 - v10), v11);
          unint64_t v5 = *(void *)(v4 + 40) + 8;
          *(void *)(v4 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
        }
        else
        {
          unint64_t v5 = v7;
          *(void *)(v4 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v7;
        }
      }
      __dst += 8;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

void *sub_215D006E4(void *result, uint64_t a2, char *__dst)
{
  if (a2)
  {
    uint64_t v4 = (uint64_t)result;
    unint64_t v5 = result[5];
    uint64_t v6 = 8 * a2;
    do
    {
      unint64_t v7 = v5 + 8;
      unint64_t v8 = *(void *)(v4 + 24);
      if (v5 + 8 > v8)
      {
        *(unsigned char *)(v4 + 16) = 1;
      }
      else
      {
        BOOL v9 = v8 >= v5;
        uint64_t v10 = v8 - v5;
        if (!v9) {
          uint64_t v10 = 0;
        }
        if ((uint64_t)v8 < v10) {
          uint64_t v10 = *(void *)(v4 + 24);
        }
        if (v10 >= 8) {
          size_t v11 = 8;
        }
        else {
          size_t v11 = v10;
        }
        if (v11)
        {
          __n128 result = memmove(__dst, (const void *)(*(void *)(v4 + 32) + v8 - v10), v11);
          unint64_t v5 = *(void *)(v4 + 40) + 8;
          *(void *)(v4 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
        }
        else
        {
          unint64_t v5 = v7;
          *(void *)(v4 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v7;
        }
      }
      __dst += 8;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

void *sub_215D007A8(void *result, uint64_t a2, char *__dst)
{
  if (a2)
  {
    uint64_t v4 = (uint64_t)result;
    unint64_t v5 = result[5];
    uint64_t v6 = 4 * a2;
    do
    {
      unint64_t v7 = v5 + 4;
      unint64_t v8 = *(void *)(v4 + 24);
      if (v5 + 4 > v8)
      {
        *(unsigned char *)(v4 + 16) = 1;
      }
      else
      {
        BOOL v9 = v8 >= v5;
        uint64_t v10 = v8 - v5;
        if (!v9) {
          uint64_t v10 = 0;
        }
        if ((uint64_t)v8 < v10) {
          uint64_t v10 = *(void *)(v4 + 24);
        }
        if (v10 >= 4) {
          size_t v11 = 4;
        }
        else {
          size_t v11 = v10;
        }
        if (v11)
        {
          __n128 result = memmove(__dst, (const void *)(*(void *)(v4 + 32) + v8 - v10), v11);
          unint64_t v5 = *(void *)(v4 + 40) + 4;
          *(void *)(v4 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
        }
        else
        {
          unint64_t v5 = v7;
          *(void *)(v4 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v7;
        }
      }
      __dst += 4;
      v6 -= 4;
    }
    while (v6);
  }
  return result;
}

void *sub_215D0086C(void *result, uint64_t a2, char *__dst)
{
  if (a2)
  {
    uint64_t v4 = (uint64_t)result;
    unint64_t v5 = result[5];
    uint64_t v6 = 8 * a2;
    do
    {
      unint64_t v7 = v5 + 8;
      unint64_t v8 = *(void *)(v4 + 24);
      if (v5 + 8 > v8)
      {
        *(unsigned char *)(v4 + 16) = 1;
      }
      else
      {
        BOOL v9 = v8 >= v5;
        uint64_t v10 = v8 - v5;
        if (!v9) {
          uint64_t v10 = 0;
        }
        if ((uint64_t)v8 < v10) {
          uint64_t v10 = *(void *)(v4 + 24);
        }
        if (v10 >= 8) {
          size_t v11 = 8;
        }
        else {
          size_t v11 = v10;
        }
        if (v11)
        {
          __n128 result = memmove(__dst, (const void *)(*(void *)(v4 + 32) + v8 - v10), v11);
          unint64_t v5 = *(void *)(v4 + 40) + 8;
          *(void *)(v4 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
        }
        else
        {
          unint64_t v5 = v7;
          *(void *)(v4 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v7;
        }
      }
      __dst += 8;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

void *sub_215D00930(void *result, uint64_t a2, char *__dst)
{
  if (a2)
  {
    uint64_t v4 = (uint64_t)result;
    unint64_t v5 = result[5];
    uint64_t v6 = 24 * a2;
    do
    {
      unint64_t v7 = v5 + 24;
      unint64_t v8 = *(void *)(v4 + 24);
      if (v5 + 24 > v8)
      {
        *(unsigned char *)(v4 + 16) = 1;
      }
      else
      {
        BOOL v9 = v8 >= v5;
        uint64_t v10 = v8 - v5;
        if (!v9) {
          uint64_t v10 = 0;
        }
        if ((uint64_t)v8 < v10) {
          uint64_t v10 = *(void *)(v4 + 24);
        }
        if (v10 >= 24) {
          size_t v11 = 24;
        }
        else {
          size_t v11 = v10;
        }
        if (v11)
        {
          __n128 result = memmove(__dst, (const void *)(*(void *)(v4 + 32) + v8 - v10), v11);
          unint64_t v5 = *(void *)(v4 + 40) + 24;
          *(void *)(v4 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
        }
        else
        {
          unint64_t v5 = v7;
          *(void *)(v4 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v7;
        }
      }
      __dst += 24;
      v6 -= 24;
    }
    while (v6);
  }
  return result;
}

void sub_215D009F8()
{
}

void sub_215D00A48(const void **a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = std::__thread_local_data();
  unint64_t v3 = *a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  LODWORD(v5) = 0;
  sub_2158B25D8(__p, "Receive packets from ");
  sub_215CF7738();
}

void sub_215D01D40(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_215731D80(a1);
  }
  _Unwind_Resume(a1);
}

void sub_215D01DB8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D01DF0(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 24);
  if (v1)
  {
    uint64_t v2 = (void *)v1[13];
    if (v2)
    {
      v1[14] = v2;
      operator delete(v2);
    }
    unint64_t v3 = (void *)v1[10];
    if (v3)
    {
      void v1[11] = v3;
      operator delete(v3);
    }
    uint64_t v4 = (void *)v1[5];
    if (v4)
    {
      v1[6] = v4;
      operator delete(v4);
    }
    JUMPOUT(0x2166C4D20);
  }
  return result;
}

uint64_t sub_215D01E74(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3net13LoadedPayloadEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3net13LoadedPayloadEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3net13LoadedPayloadEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3net13LoadedPayloadEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void *sub_215D01EE8(void *a1)
{
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_215D01F2C(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void sub_215D01F6C(void *a1)
{
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x2166C4D20);
}

void sub_215D01FD0(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x2166C4D20);
}

void sub_215D02034(void *a1)
{
  uint64_t v2 = (char *)a1[3];
  unint64_t v3 = (char *)a1[4];
  uint64_t v4 = v3 - v2 - 10;
  uint64_t v6 = (uint64_t *)a1[7];
  unint64_t v5 = a1[8];
  unint64_t v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *uint64_t v6 = v4;
    uint64_t v8 = (uint64_t)(v6 + 1);
    goto LABEL_22;
  }
  BOOL v9 = (uint64_t *)a1[6];
  int64_t v10 = (char *)v6 - (char *)v9;
  uint64_t v11 = v6 - v9;
  unint64_t v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 61) {
    sub_215CFB3BC();
  }
  uint64_t v13 = v5 - (void)v9;
  if (v13 >> 2 > v12) {
    unint64_t v12 = v13 >> 2;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v12;
  }
  if (v14)
  {
    if (v14 >> 61) {
      sub_215738AD8();
    }
    ssize_t v15 = operator new(8 * v14);
    int64_t v10 = (char *)v6 - (char *)v9;
    uint64_t v16 = (uint64_t *)&v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *uint64_t v16 = v4;
    uint64_t v8 = (uint64_t)(v16 + 1);
    int64_t v18 = (char *)v6 - (char *)v9;
    if (v6 == v9) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  ssize_t v15 = 0;
  uint64_t v16 = (uint64_t *)(8 * v11);
  uint64_t v17 = 0;
  *(void *)(8 * v11) = v4;
  uint64_t v8 = 8 * v11 + 8;
  int64_t v18 = (char *)v6 - (char *)v9;
  if (v6 != v9)
  {
LABEL_14:
    unint64_t v19 = v18 - 8;
    if (v19 < 0x58) {
      goto LABEL_60;
    }
    if ((unint64_t)((char *)v6 - v15 - v10) < 0x20) {
      goto LABEL_60;
    }
    uint64_t v20 = (v19 >> 3) + 1;
    uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = &v6[v21 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v16 = (uint64_t *)((char *)v16 - v21);
    unsigned __int8 v22 = &v15[8 * v11 - 16];
    unsigned __int8 v23 = v6 - 2;
    uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      _OWORD *v22 = v25;
      v22 -= 2;
      v23 -= 4;
      v24 -= 4;
    }
    while (v24);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_60:
      do
      {
        uint64_t v26 = *--v7;
        *--uint64_t v16 = v26;
      }
      while (v7 != v9);
    }
  }
LABEL_20:
  a1[6] = v16;
  a1[7] = v8;
  a1[8] = v17;
  if (v9)
  {
    operator delete(v9);
    uint64_t v2 = (char *)a1[3];
    unint64_t v3 = (char *)a1[4];
  }
LABEL_22:
  a1[7] = v8;
  int64_t v27 = v3 - v2;
  unint64_t v28 = v3 - v2 + 8;
  if ((unint64_t)(v3 - v2) > 0xFFFFFFFFFFFFFFF7)
  {
    a1[4] = v3 + 8;
    return;
  }
  uint64_t v29 = a1[5];
  if ((unint64_t)(v29 - (void)v3) >= 8)
  {
    *(void *)unint64_t v3 = 0;
    a1[4] = v3 + 8;
    return;
  }
  if ((v28 & 0x8000000000000000) != 0) {
    sub_2157C3CEC();
  }
  unint64_t v30 = v29 - (void)v2;
  uint64_t v31 = 2 * v30;
  if (2 * v30 <= v28) {
    uint64_t v31 = v3 - v2 + 8;
  }
  if (v30 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v32 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v32 = v31;
  }
  fd_set v33 = (char *)operator new(v32);
  uint64_t v34 = &v33[v27];
  *(void *)&v33[v27] = 0;
  unint64_t v35 = v3 - v2;
  if (v3 != v2)
  {
    if (v35 < 8 || (unint64_t)(v2 - v33) < 0x20)
    {
      unint64_t v36 = v3;
      goto LABEL_34;
    }
    if (v35 >= 0x20)
    {
      unint64_t v39 = v35 & 0xFFFFFFFFFFFFFFE0;
      char v40 = &v33[v27 - 16];
      BOOL v41 = v3 - 16;
      unint64_t v42 = v35 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v43 = *(_OWORD *)v41;
        *((_OWORD *)v40 - 1) = *((_OWORD *)v41 - 1);
        *(_OWORD *)char v40 = v43;
        v40 -= 32;
        v41 -= 32;
        v42 -= 32;
      }
      while (v42);
      if (v35 == v39) {
        goto LABEL_36;
      }
      if ((v35 & 0x18) == 0)
      {
        v34 -= v39;
        unint64_t v36 = &v3[-v39];
LABEL_34:
        unint64_t v37 = v34 - 1;
        do
        {
          char v38 = *--v36;
          *v37-- = v38;
        }
        while (v36 != v2);
LABEL_36:
        uint64_t v34 = v33;
        goto LABEL_37;
      }
    }
    else
    {
      unint64_t v39 = 0;
    }
    unint64_t v36 = &v3[-(v35 & 0xFFFFFFFFFFFFFFF8)];
    v34 -= v35 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v44 = v27 - v39 - 8;
    uint64_t v45 = &v3[-v39 - 8];
    unint64_t v46 = v39 - (v35 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v47 = *(void *)v45;
      v45 -= 8;
      *(void *)&v33[v44] = v47;
      v44 -= 8;
      v46 += 8;
    }
    while (v46);
    if (v35 == (v35 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_36;
    }
    goto LABEL_34;
  }
LABEL_37:
  a1[3] = v34;
  a1[4] = &v33[v28];
  a1[5] = &v33[v32];
  if (v2)
  {
    operator delete(v2);
  }
}

void sub_215D02368(uint64_t a1)
{
}

void *sub_215D02370(void *result)
{
  uint64_t v1 = *(void *)(result[7] - 8) + result[3];
  *(void *)(v1 + 1std::__fs::filesystem::__rename(__from, __to, 0) = result[4] - v1 - 18;
  result[7] -= 8;
  return result;
}

void *sub_215D0239C(void *result)
{
  uint64_t v1 = *(void *)(result[5] - 8) + result[1];
  *(void *)(v1 + 1std::__fs::filesystem::__rename(__from, __to, 0) = result[2] - v1 - 18;
  result[5] -= 8;
  return result;
}

char *sub_215D023C8(uint64_t a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  uint64_t __src = v4;
  uint64_t v5 = a1 + 24;
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v11, 8);
  if (v2[23] < 0)
  {
    int64_t v6 = *((void *)v2 + 1);
    if (*(void *)v2) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = v6 == 0;
    }
    if (v7)
    {
      uint64_t v2 = *(char **)v2;
    }
    else
    {
      BOOL v8 = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
      uint64_t v2 = 0;
      if (v8) {
        abort();
      }
    }
  }
  else
  {
    int64_t v6 = v2[23];
  }
  return sub_215D04A50(v5, *(char **)(a1 + 32), v2, &v2[v6], v6);
}

void *sub_215D024B8(void *a1)
{
  uint64_t v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_215D0250C(void *a1)
{
  uint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
}

void sub_215D0255C(void *a1)
{
  uint64_t v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }

  JUMPOUT(0x2166C4D20);
}

void sub_215D025D0(void *a1)
{
  uint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }

  JUMPOUT(0x2166C4D20);
}

void sub_215D02644(void *a1)
{
  unint64_t v3 = (char *)a1[12];
  unint64_t v2 = a1[13];
  uint64_t v4 = v3;
  if ((unint64_t)v3 >= v2)
  {
    int64_t v6 = (char *)a1[11];
    uint64_t v7 = (v3 - v6) >> 3;
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 61) {
      sub_215CFB3BC();
    }
    uint64_t v9 = v2 - (void)v6;
    if (v9 >> 2 > v8) {
      unint64_t v8 = v9 >> 2;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 61) {
        goto LABEL_48;
      }
      uint64_t v11 = operator new(8 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    unint64_t v12 = &v11[8 * v7];
    uint64_t v13 = &v11[8 * v10];
    void *v12 = a1[6];
    uint64_t v5 = v12 + 1;
    if (v3 != v6)
    {
      unint64_t v14 = v3 - v6 - 8;
      if (v14 < 0x58) {
        goto LABEL_53;
      }
      if ((unint64_t)(v6 - v11) < 0x20) {
        goto LABEL_53;
      }
      uint64_t v15 = (v14 >> 3) + 1;
      uint64_t v16 = 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v4 = &v3[-v16];
      unint64_t v12 = (void *)((char *)v12 - v16);
      uint64_t v17 = &v11[8 * v7 - 16];
      int64_t v18 = v3 - 16;
      uint64_t v19 = v15 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v20 = *(_OWORD *)v18;
        *(v17 - 1) = *((_OWORD *)v18 - 1);
        _OWORD *v17 = v20;
        v17 -= 2;
        v18 -= 32;
        v19 -= 4;
      }
      while (v19);
      if (v15 != (v15 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_53:
        do
        {
          uint64_t v21 = *((void *)v4 - 1);
          v4 -= 8;
          *--unint64_t v12 = v21;
        }
        while (v4 != v6);
      }
    }
    a1[11] = v12;
    a1[12] = v5;
    a1[13] = v13;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(void *)unint64_t v3 = a1[6];
    uint64_t v5 = v3 + 8;
  }
  a1[12] = v5;
  unint64_t v22 = a1[6];
  unint64_t v23 = a1[7];
  BOOL v24 = v23 >= v22;
  unint64_t v25 = v23 - v22;
  if (!v24) {
    unint64_t v25 = 0;
  }
  if (v25 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  uint64_t v26 = *(void *)(a1[3] + v22);
  a1[6] = v22 + 8;
  unint64_t v28 = (char *)a1[9];
  unint64_t v27 = a1[10];
  if ((unint64_t)v28 < v27)
  {
    *(void *)unint64_t v28 = v26;
    uint64_t v29 = (uint64_t)(v28 + 8);
    goto LABEL_46;
  }
  unint64_t v30 = (char *)a1[8];
  uint64_t v31 = (v28 - v30) >> 3;
  unint64_t v32 = v31 + 1;
  if ((unint64_t)(v31 + 1) >> 61) {
    sub_2157E81A4();
  }
  uint64_t v33 = v27 - (void)v30;
  if (v33 >> 2 > v32) {
    unint64_t v32 = v33 >> 2;
  }
  if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v34 = v32;
  }
  if (!v34)
  {
    unint64_t v35 = 0;
    unint64_t v36 = (void *)(8 * v31);
    unint64_t v37 = 0;
    *(void *)(8 * v31) = v26;
    uint64_t v29 = 8 * v31 + 8;
    int64_t v38 = v28 - v30;
    if (v28 == v30) {
      goto LABEL_44;
    }
LABEL_38:
    unint64_t v39 = v38 - 8;
    if (v39 < 0x58) {
      goto LABEL_54;
    }
    if ((unint64_t)(v30 - v35) < 0x20) {
      goto LABEL_54;
    }
    uint64_t v40 = (v39 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v42 = &v28[-v41];
    unint64_t v36 = (void *)((char *)v36 - v41);
    long long v43 = &v35[8 * v31 - 16];
    uint64_t v44 = v28 - 16;
    uint64_t v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v46 = *(_OWORD *)v44;
      *(v43 - 1) = *((_OWORD *)v44 - 1);
      _OWORD *v43 = v46;
      v43 -= 2;
      v44 -= 32;
      v45 -= 4;
    }
    while (v45);
    unint64_t v28 = v42;
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_54:
      do
      {
        uint64_t v47 = *((void *)v28 - 1);
        v28 -= 8;
        *--unint64_t v36 = v47;
      }
      while (v28 != v30);
    }
    goto LABEL_44;
  }
  if (v34 >> 61) {
LABEL_48:
  }
    sub_215738AD8();
  unint64_t v35 = operator new(8 * v34);
  unint64_t v36 = &v35[8 * v31];
  unint64_t v37 = &v35[8 * v34];
  *unint64_t v36 = v26;
  uint64_t v29 = (uint64_t)(v36 + 1);
  int64_t v38 = v28 - v30;
  if (v28 != v30) {
    goto LABEL_38;
  }
LABEL_44:
  a1[8] = v36;
  a1[9] = v29;
  a1[10] = v37;
  if (v30) {
    operator delete(v30);
  }
LABEL_46:
  a1[9] = v29;
}

void sub_215D02934(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215D02948(uint64_t a1)
{
}

void *sub_215D02950(void *result)
{
  uint64_t v1 = result[12];
  uint64_t v2 = result[9];
  result[6] = *(void *)(v1 - 8) + *(void *)(v2 - 8) + 8;
  result[9] = v2 - 8;
  result[12] = v1 - 8;
  return result;
}

void *sub_215D02978(void *result)
{
  uint64_t v1 = result[10];
  uint64_t v2 = result[7];
  result[4] = *(void *)(v1 - 8) + *(void *)(v2 - 8) + 8;
  result[7] = v2 - 8;
  result[10] = v1 - 8;
  return result;
}

double sub_215D029A0(void *a1, uint64_t a2)
{
  unint64_t v3 = a1[6];
  unint64_t v2 = a1[7];
  unint64_t v4 = v2 - v3;
  if (v2 < v3) {
    unint64_t v4 = 0;
  }
  if (v4 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    goto LABEL_27;
  }
  uint64_t v6 = a1[3];
  unint64_t v7 = *(void *)(v6 + v3);
  unint64_t v8 = v3 + 8;
  a1[6] = v3 + 8;
  if (!v7) {
    return result;
  }
  BOOL v9 = v2 >= v8;
  unint64_t v10 = v2 - v8;
  if (!v9) {
    unint64_t v10 = 0;
  }
  if (v10 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read string");
LABEL_27:
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  unint64_t v12 = (char *)(v6 + v8);
  if (v7 <= 0x16)
  {
    HIBYTE(v26) = v7;
    uint64_t v13 = &v25;
LABEL_15:
    uint64_t v16 = v12;
    uint64_t v17 = v13;
    do
    {
LABEL_16:
      char v18 = *v16++;
      *(unsigned char *)uint64_t v17 = v18;
      uint64_t v17 = (long long *)((char *)v17 + 1);
    }
    while (v16 != &v12[v7]);
    goto LABEL_17;
  }
  uint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v7 | 7) != 0x17) {
    uint64_t v14 = v7 | 7;
  }
  uint64_t v15 = v14 + 1;
  uint64_t v13 = (long long *)operator new(v14 + 1);
  *((void *)&v25 + 1) = v7;
  unint64_t v26 = v15 | 0x8000000000000000;
  *(void *)&long long v25 = v13;
  if (v7 < 0x20 || (unint64_t)v13 + -v6 - v3 - 8 < 0x20) {
    goto LABEL_15;
  }
  uint64_t v16 = &v12[v7 & 0xFFFFFFFFFFFFFFE0];
  uint64_t v17 = (long long *)((char *)v13 + (v7 & 0xFFFFFFFFFFFFFFE0));
  long long v20 = v13 + 1;
  uint64_t v21 = (long long *)(v3 + v6 + 24);
  unint64_t v22 = v7 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v23 = *v21;
    *(v20 - 1) = *(v21 - 1);
    *long long v20 = v23;
    v20 += 2;
    v21 += 2;
    v22 -= 32;
  }
  while (v22);
  if (v7 != (v7 & 0x7FFFFFFFFFFFFFE0)) {
    goto LABEL_16;
  }
LABEL_17:
  *(unsigned char *)uint64_t v17 = 0;
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v25;
  *(_OWORD *)a2 = v25;
  *(void *)(a2 + 16) = v26;
  a1[6] += v7;
  return result;
}

void sub_215D02B78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215D02B8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D02BA4(void *result)
{
  uint64_t v1 = result[12];
  uint64_t v2 = result[9];
  result[6] = *(void *)(v1 - 8) + *(void *)(v2 - 8) + 8;
  result[9] = v2 - 8;
  result[12] = v1 - 8;
  return result;
}

void *sub_215D02BCC(void *result, unsigned char *a2)
{
  unint64_t v2 = result[6];
  if (result[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *a2 = *(unsigned char *)(result[3] + v2);
  ++result[6];
  return result;
}

void sub_215D02C44(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D02C58(void *result, unsigned char *a2)
{
  unint64_t v2 = result[6];
  if (result[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *a2 = *(unsigned char *)(result[3] + v2);
  ++result[6];
  return result;
}

void sub_215D02CD0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D02CE4(void *result, _WORD *a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *a2 = *(_WORD *)(result[3] + v2);
  result[6] += 2;
  return result;
}

void sub_215D02D64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D02D78(void *result, _DWORD *a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *a2 = *(_DWORD *)(result[3] + v2);
  result[6] += 4;
  return result;
}

void sub_215D02DF8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D02E0C(void *result, void *a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *a2 = *(void *)(result[3] + v2);
  result[6] += 8;
  return result;
}

void sub_215D02E8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D02EA0(void *result, void *a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *a2 = *(void *)(result[3] + v2);
  result[6] += 8;
  return result;
}

void sub_215D02F20(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D02F34(void *result, unsigned char *a2)
{
  unint64_t v2 = result[6];
  if (result[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *a2 = *(unsigned char *)(result[3] + v2);
  ++result[6];
  return result;
}

void sub_215D02FAC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D02FC0(void *result, unsigned char *a2)
{
  unint64_t v2 = result[6];
  if (result[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *a2 = *(unsigned char *)(result[3] + v2);
  ++result[6];
  return result;
}

void sub_215D03038(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D0304C(void *result, _WORD *a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *a2 = *(_WORD *)(result[3] + v2);
  result[6] += 2;
  return result;
}

void sub_215D030CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D030E0(void *result, _DWORD *a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *a2 = *(_DWORD *)(result[3] + v2);
  result[6] += 4;
  return result;
}

void sub_215D03160(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D03174(void *result, void *a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *a2 = *(void *)(result[3] + v2);
  result[6] += 8;
  return result;
}

void sub_215D031F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D03208(void *result, void *a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *a2 = *(void *)(result[3] + v2);
  result[6] += 8;
  return result;
}

void sub_215D03288(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D0329C(void *result, _DWORD *a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *a2 = *(_DWORD *)(result[3] + v2);
  result[6] += 4;
  return result;
}

void sub_215D0331C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D03330(void *result, void *a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *a2 = *(void *)(result[3] + v2);
  result[6] += 8;
  return result;
}

void sub_215D033B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D033C8(void *a1, size_t __n, void *__dst)
{
  unint64_t v3 = a1[6];
  unint64_t v4 = a1[7];
  BOOL v5 = v4 >= v3;
  size_t v6 = v4 - v3;
  if (!v5) {
    size_t v6 = 0;
  }
  if (v6 < __n)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  double result = memcpy(__dst, (const void *)(a1[3] + v3), __n);
  a1[6] += __n;
  return result;
}

void sub_215D03458(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D0346C(void *a1, size_t __n, void *__dst)
{
  unint64_t v3 = a1[6];
  unint64_t v4 = a1[7];
  BOOL v5 = v4 >= v3;
  size_t v6 = v4 - v3;
  if (!v5) {
    size_t v6 = 0;
  }
  if (v6 < __n)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  double result = memcpy(__dst, (const void *)(a1[3] + v3), __n);
  a1[6] += __n;
  return result;
}

void sub_215D034FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D03510(void *a1, uint64_t a2, void *__dst)
{
  size_t v3 = 2 * a2;
  unint64_t v4 = a1[6];
  unint64_t v5 = a1[7];
  BOOL v6 = v5 >= v4;
  size_t v7 = v5 - v4;
  if (!v6) {
    size_t v7 = 0;
  }
  if (v7 < v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  double result = memcpy(__dst, (const void *)(a1[3] + v4), v3);
  a1[6] += v3;
  return result;
}

void sub_215D035A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D035B4(void *a1, uint64_t a2, void *__dst)
{
  size_t v3 = 4 * a2;
  unint64_t v4 = a1[6];
  unint64_t v5 = a1[7];
  BOOL v6 = v5 >= v4;
  size_t v7 = v5 - v4;
  if (!v6) {
    size_t v7 = 0;
  }
  if (v7 < v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  double result = memcpy(__dst, (const void *)(a1[3] + v4), v3);
  a1[6] += v3;
  return result;
}

void sub_215D03644(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D03658(void *a1, uint64_t a2, void *__dst)
{
  size_t v3 = 8 * a2;
  unint64_t v4 = a1[6];
  unint64_t v5 = a1[7];
  BOOL v6 = v5 >= v4;
  size_t v7 = v5 - v4;
  if (!v6) {
    size_t v7 = 0;
  }
  if (v7 < v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  double result = memcpy(__dst, (const void *)(a1[3] + v4), v3);
  a1[6] += v3;
  return result;
}

void sub_215D036E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D036FC(void *a1, uint64_t a2, void *__dst)
{
  size_t v3 = 8 * a2;
  unint64_t v4 = a1[6];
  unint64_t v5 = a1[7];
  BOOL v6 = v5 >= v4;
  size_t v7 = v5 - v4;
  if (!v6) {
    size_t v7 = 0;
  }
  if (v7 < v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  double result = memcpy(__dst, (const void *)(a1[3] + v4), v3);
  a1[6] += v3;
  return result;
}

void sub_215D0378C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D037A0(void *a1, size_t __n, void *__dst)
{
  unint64_t v3 = a1[6];
  unint64_t v4 = a1[7];
  BOOL v5 = v4 >= v3;
  size_t v6 = v4 - v3;
  if (!v5) {
    size_t v6 = 0;
  }
  if (v6 < __n)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  double result = memcpy(__dst, (const void *)(a1[3] + v3), __n);
  a1[6] += __n;
  return result;
}

void sub_215D03830(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D03844(void *a1, size_t __n, void *__dst)
{
  unint64_t v3 = a1[6];
  unint64_t v4 = a1[7];
  BOOL v5 = v4 >= v3;
  size_t v6 = v4 - v3;
  if (!v5) {
    size_t v6 = 0;
  }
  if (v6 < __n)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  double result = memcpy(__dst, (const void *)(a1[3] + v3), __n);
  a1[6] += __n;
  return result;
}

void sub_215D038D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D038E8(void *a1, uint64_t a2, void *__dst)
{
  size_t v3 = 2 * a2;
  unint64_t v4 = a1[6];
  unint64_t v5 = a1[7];
  BOOL v6 = v5 >= v4;
  size_t v7 = v5 - v4;
  if (!v6) {
    size_t v7 = 0;
  }
  if (v7 < v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  double result = memcpy(__dst, (const void *)(a1[3] + v4), v3);
  a1[6] += v3;
  return result;
}

void sub_215D03978(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D0398C(void *a1, uint64_t a2, void *__dst)
{
  size_t v3 = 4 * a2;
  unint64_t v4 = a1[6];
  unint64_t v5 = a1[7];
  BOOL v6 = v5 >= v4;
  size_t v7 = v5 - v4;
  if (!v6) {
    size_t v7 = 0;
  }
  if (v7 < v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  double result = memcpy(__dst, (const void *)(a1[3] + v4), v3);
  a1[6] += v3;
  return result;
}

void sub_215D03A1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D03A30(void *a1, uint64_t a2, void *__dst)
{
  size_t v3 = 8 * a2;
  unint64_t v4 = a1[6];
  unint64_t v5 = a1[7];
  BOOL v6 = v5 >= v4;
  size_t v7 = v5 - v4;
  if (!v6) {
    size_t v7 = 0;
  }
  if (v7 < v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  double result = memcpy(__dst, (const void *)(a1[3] + v4), v3);
  a1[6] += v3;
  return result;
}

void sub_215D03AC0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D03AD4(void *a1, uint64_t a2, void *__dst)
{
  size_t v3 = 8 * a2;
  unint64_t v4 = a1[6];
  unint64_t v5 = a1[7];
  BOOL v6 = v5 >= v4;
  size_t v7 = v5 - v4;
  if (!v6) {
    size_t v7 = 0;
  }
  if (v7 < v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  double result = memcpy(__dst, (const void *)(a1[3] + v4), v3);
  a1[6] += v3;
  return result;
}

void sub_215D03B64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D03B78(void *a1, uint64_t a2, void *__dst)
{
  size_t v3 = 4 * a2;
  unint64_t v4 = a1[6];
  unint64_t v5 = a1[7];
  BOOL v6 = v5 >= v4;
  size_t v7 = v5 - v4;
  if (!v6) {
    size_t v7 = 0;
  }
  if (v7 < v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  double result = memcpy(__dst, (const void *)(a1[3] + v4), v3);
  a1[6] += v3;
  return result;
}

void sub_215D03C08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D03C1C(void *a1, uint64_t a2, void *__dst)
{
  size_t v3 = 8 * a2;
  unint64_t v4 = a1[6];
  unint64_t v5 = a1[7];
  BOOL v6 = v5 >= v4;
  size_t v7 = v5 - v4;
  if (!v6) {
    size_t v7 = 0;
  }
  if (v7 < v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  double result = memcpy(__dst, (const void *)(a1[3] + v4), v3);
  a1[6] += v3;
  return result;
}

void sub_215D03CAC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215D03CC0(void *a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v5 = 24 * a2;
    do
    {
      sub_215D029A0(a1, a3);
      a3 += 24;
      v5 -= 24;
    }
    while (v5);
  }
}

void *sub_215D03D14(void *a1, uint64_t a2)
{
  size_t v2 = *(void *)a2;
  unint64_t v3 = a1[6];
  unint64_t v4 = a1[7];
  BOOL v5 = v4 >= v3;
  size_t v6 = v4 - v3;
  if (!v5) {
    size_t v6 = 0;
  }
  if (v6 < v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read binary blob");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  double result = memcpy(*(void **)(a2 + 8), (const void *)(a1[3] + v3), v2);
  a1[6] += v2;
  return result;
}

void sub_215D03DA4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215D03DC4(void *result)
{
  uint64_t v1 = *(void *)(result[7] - 8) + result[3];
  *(void *)(v1 + 1std::__fs::filesystem::__rename(__from, __to, 0) = result[4] - v1 - 18;
  result[7] -= 8;
  return result;
}

char *sub_215D03DF0(uint64_t a1, char *__src)
{
  return sub_215D04A50(a1 + 24, *(char **)(a1 + 32), __src, __src + 1, 1);
}

char *sub_215D03E0C(uint64_t a1, char *__src)
{
  return sub_215D04A50(a1 + 24, *(char **)(a1 + 32), __src, __src + 1, 1);
}

char *sub_215D03E28(uint64_t a1, char *__src)
{
  return sub_215D04A50(a1 + 24, *(char **)(a1 + 32), __src, __src + 2, 2);
}

char *sub_215D03E44(uint64_t a1, char *__src)
{
  return sub_215D04A50(a1 + 24, *(char **)(a1 + 32), __src, __src + 4, 4);
}

char *sub_215D03E60(uint64_t a1, char *__src)
{
  return sub_215D04A50(a1 + 24, *(char **)(a1 + 32), __src, __src + 8, 8);
}

char *sub_215D03E7C(uint64_t a1, char *__src)
{
  return sub_215D04A50(a1 + 24, *(char **)(a1 + 32), __src, __src + 8, 8);
}

char *sub_215D03E98(uint64_t a1, char *__src)
{
  return sub_215D04A50(a1 + 24, *(char **)(a1 + 32), __src, __src + 1, 1);
}

char *sub_215D03EB4(uint64_t a1, char *__src)
{
  return sub_215D04A50(a1 + 24, *(char **)(a1 + 32), __src, __src + 1, 1);
}

char *sub_215D03ED0(uint64_t a1, char *__src)
{
  return sub_215D04A50(a1 + 24, *(char **)(a1 + 32), __src, __src + 2, 2);
}

char *sub_215D03EEC(uint64_t a1, char *__src)
{
  return sub_215D04A50(a1 + 24, *(char **)(a1 + 32), __src, __src + 4, 4);
}

char *sub_215D03F08(uint64_t a1, char *__src)
{
  return sub_215D04A50(a1 + 24, *(char **)(a1 + 32), __src, __src + 8, 8);
}

char *sub_215D03F24(uint64_t a1, char *__src)
{
  return sub_215D04A50(a1 + 24, *(char **)(a1 + 32), __src, __src + 8, 8);
}

char *sub_215D03F40(uint64_t a1, char *__src)
{
  return sub_215D04A50(a1 + 24, *(char **)(a1 + 32), __src, __src + 4, 4);
}

char *sub_215D03F5C(uint64_t a1, char *__src)
{
  return sub_215D04A50(a1 + 24, *(char **)(a1 + 32), __src, __src + 8, 8);
}

char *sub_215D03F78(uint64_t a1, char *a2)
{
  size_t v2 = a2;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  uint64_t __src = v4;
  uint64_t v5 = a1 + 24;
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v11, 8);
  if (v2[23] < 0)
  {
    int64_t v6 = *((void *)v2 + 1);
    if (*(void *)v2) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = v6 == 0;
    }
    if (v7)
    {
      size_t v2 = *(char **)v2;
    }
    else
    {
      BOOL v8 = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
      size_t v2 = 0;
      if (v8) {
        abort();
      }
    }
  }
  else
  {
    int64_t v6 = v2[23];
  }
  return sub_215D04A50(v5, *(char **)(a1 + 32), v2, &v2[v6], v6);
}

char *sub_215D04068(uint64_t a1, int64_t a2, char *__src)
{
  if (!__src
    && a2
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  int64_t v6 = *(char **)(a1 + 32);

  return sub_215D04A50(a1 + 24, v6, __src, &__src[a2], a2);
}

char *sub_215D04104(uint64_t a1, int64_t a2, char *__src)
{
  if (!__src
    && a2
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  int64_t v6 = *(char **)(a1 + 32);

  return sub_215D04A50(a1 + 24, v6, __src, &__src[a2], a2);
}

char *sub_215D041A0(uint64_t a1, uint64_t a2, char *__src)
{
  int64_t v5 = 2 * a2;
  if (!__src
    && v5
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  int64_t v6 = *(char **)(a1 + 32);

  return sub_215D04A50(a1 + 24, v6, __src, &__src[v5], v5);
}

char *sub_215D0423C(uint64_t a1, uint64_t a2, char *__src)
{
  int64_t v5 = 4 * a2;
  if (!__src
    && v5
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  int64_t v6 = *(char **)(a1 + 32);

  return sub_215D04A50(a1 + 24, v6, __src, &__src[v5], v5);
}

char *sub_215D042D8(uint64_t a1, uint64_t a2, char *__src)
{
  int64_t v5 = 8 * a2;
  if (!__src
    && v5
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  int64_t v6 = *(char **)(a1 + 32);

  return sub_215D04A50(a1 + 24, v6, __src, &__src[v5], v5);
}

char *sub_215D04374(uint64_t a1, uint64_t a2, char *__src)
{
  int64_t v5 = 8 * a2;
  if (!__src
    && v5
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  int64_t v6 = *(char **)(a1 + 32);

  return sub_215D04A50(a1 + 24, v6, __src, &__src[v5], v5);
}

char *sub_215D04410(uint64_t a1, int64_t a2, char *__src)
{
  if (!__src
    && a2
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  int64_t v6 = *(char **)(a1 + 32);

  return sub_215D04A50(a1 + 24, v6, __src, &__src[a2], a2);
}

char *sub_215D044AC(uint64_t a1, int64_t a2, char *__src)
{
  if (!__src
    && a2
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  int64_t v6 = *(char **)(a1 + 32);

  return sub_215D04A50(a1 + 24, v6, __src, &__src[a2], a2);
}

char *sub_215D04548(uint64_t a1, uint64_t a2, char *__src)
{
  int64_t v5 = 2 * a2;
  if (!__src
    && v5
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  int64_t v6 = *(char **)(a1 + 32);

  return sub_215D04A50(a1 + 24, v6, __src, &__src[v5], v5);
}

char *sub_215D045E4(uint64_t a1, uint64_t a2, char *__src)
{
  int64_t v5 = 4 * a2;
  if (!__src
    && v5
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  int64_t v6 = *(char **)(a1 + 32);

  return sub_215D04A50(a1 + 24, v6, __src, &__src[v5], v5);
}

char *sub_215D04680(uint64_t a1, uint64_t a2, char *__src)
{
  int64_t v5 = 8 * a2;
  if (!__src
    && v5
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  int64_t v6 = *(char **)(a1 + 32);

  return sub_215D04A50(a1 + 24, v6, __src, &__src[v5], v5);
}

char *sub_215D0471C(uint64_t a1, uint64_t a2, char *__src)
{
  int64_t v5 = 8 * a2;
  if (!__src
    && v5
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  int64_t v6 = *(char **)(a1 + 32);

  return sub_215D04A50(a1 + 24, v6, __src, &__src[v5], v5);
}

char *sub_215D047B8(uint64_t a1, uint64_t a2, char *__src)
{
  int64_t v5 = 4 * a2;
  if (!__src
    && v5
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  int64_t v6 = *(char **)(a1 + 32);

  return sub_215D04A50(a1 + 24, v6, __src, &__src[v5], v5);
}

char *sub_215D04854(uint64_t a1, uint64_t a2, char *__src)
{
  int64_t v5 = 8 * a2;
  if (!__src
    && v5
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  int64_t v6 = *(char **)(a1 + 32);

  return sub_215D04A50(a1 + 24, v6, __src, &__src[v5], v5);
}

char *sub_215D048F0(char *result, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = (uint64_t)(result + 24);
    uint64_t v6 = 24 * a2;
    do
    {
      uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
      if ((v9 & 0x80u) != 0) {
        uint64_t v9 = *(void *)(a3 + 8);
      }
      uint64_t __src = v9;
      sub_215D04A50(v5, *((char **)v4 + 4), (char *)&__src, (char *)&v13, 8);
      if (*(char *)(a3 + 23) < 0)
      {
        BOOL v8 = *(char **)a3;
        int64_t v7 = *(void *)(a3 + 8);
        if (*(void *)a3) {
          BOOL v10 = 1;
        }
        else {
          BOOL v10 = v7 == 0;
        }
        if (!v10)
        {
          BOOL v11 = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
          BOOL v8 = 0;
          if (v11) {
            abort();
          }
        }
      }
      else
      {
        int64_t v7 = *(unsigned __int8 *)(a3 + 23);
        BOOL v8 = (char *)a3;
      }
      double result = sub_215D04A50(v5, *((char **)v4 + 4), v8, &v8[v7], v7);
      a3 += 24;
      v6 -= 24;
    }
    while (v6);
  }
  return result;
}

char *sub_215D04A18(uint64_t a1, uint64_t a2)
{
  return sub_215D04A50(a1 + 24, *(char **)(a1 + 32), *(char **)(a2 + 8), (char *)(*(void *)(a2 + 8) + *(void *)a2), *(void *)a2);
}

char *sub_215D04A30(uint64_t a1, uint64_t a2)
{
  return sub_215D04A50(a1 + 24, *(char **)(a1 + 32), *(char **)(a2 + 8), (char *)(*(void *)(a2 + 8) + *(void *)a2), *(void *)a2);
}

char *sub_215D04A50(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  BOOL v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    BOOL v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      sub_2157C3CEC();
    }
    uint64_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15) {
      uint64_t v16 = operator new(v15);
    }
    else {
      uint64_t v16 = 0;
    }
    long long v25 = &v13[(void)v16];
    memcpy(&v13[(void)v16], __src, a5);
    unint64_t v26 = v5 - v11;
    unint64_t v27 = &v13[(void)v16];
    if (v11 == v5) {
      goto LABEL_47;
    }
    unint64_t v28 = v5;
    uint64_t v29 = v25;
    if (v26 >= 8)
    {
      unint64_t v28 = v5;
      uint64_t v29 = v25;
      if ((unint64_t)(v11 - (unsigned char *)v16) >= 0x20)
      {
        if (v26 < 0x20)
        {
          unint64_t v30 = 0;
          goto LABEL_39;
        }
        unint64_t v30 = v26 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v37 = v5 - 16;
        int64_t v38 = (char *)v16 + v5 - 16 - v11;
        unint64_t v39 = v26 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v40 = *(_OWORD *)v37;
          *((_OWORD *)v38 - 1) = *((_OWORD *)v37 - 1);
          *(_OWORD *)int64_t v38 = v40;
          v38 -= 32;
          v37 -= 32;
          v39 -= 32;
        }
        while (v39);
        if (v26 == v30) {
          goto LABEL_46;
        }
        if ((v26 & 0x18) != 0)
        {
LABEL_39:
          unint64_t v28 = &v5[-(v26 & 0xFFFFFFFFFFFFFFF8)];
          uint64_t v29 = &v25[-(v26 & 0xFFFFFFFFFFFFFFF8)];
          uint64_t v41 = &v5[-v30 - 8];
          unint64_t v42 = (char *)v16 + v41 - v11;
          unint64_t v43 = v30 - (v26 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v44 = *(void *)v41;
            v41 -= 8;
            *v42-- = v44;
            v43 += 8;
          }
          while (v43);
          if (v26 == (v26 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_46;
          }
          goto LABEL_44;
        }
        uint64_t v29 = &v25[-v30];
        unint64_t v28 = &v5[-v30];
      }
    }
LABEL_44:
    uint64_t v45 = v29 - 1;
    do
    {
      char v46 = *--v28;
      *v45-- = v46;
    }
    while (v28 != v11);
LABEL_46:
    BOOL v10 = *(char **)(a1 + 8);
    unint64_t v27 = (char *)v16;
LABEL_47:
    uint64_t v47 = &v25[a5];
    uint64_t v48 = (char *)v16 + v15;
    if (v10 != v5) {
      memmove(v47, v5, v10 - v5);
    }
    float v49 = *(char **)a1;
    *(void *)a1 = v27;
    *(void *)(a1 + 8) = &v47[v10 - v5];
    *(void *)(a1 + 16) = v48;
    if (v49) {
      operator delete(v49);
    }
    return v25;
  }
  uint64_t v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    char v18 = &__src[a5];
    long long v20 = *(char **)(a1 + 8);
    uint64_t v21 = &__dst[a5];
    unint64_t v22 = &v10[-a5];
    long long v23 = v20;
    if ((unint64_t)v10 < a5) {
      goto LABEL_31;
    }
    goto LABEL_18;
  }
  char v18 = &__src[v17];
  int64_t v19 = a4 - &__src[v17];
  if (a4 != &__src[v17]) {
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  }
  long long v20 = &v10[v19];
  *(void *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
  {
    uint64_t v21 = &v5[a5];
    unint64_t v22 = &v20[-a5];
    long long v23 = &v10[v19];
    if (&v20[-a5] >= v10) {
      goto LABEL_31;
    }
LABEL_18:
    unint64_t v24 = &v10[a5] - v20;
    if (v24 >= 0x20)
    {
      long long v23 = v20;
      if ((unint64_t)a5 >= 0x20)
      {
        uint64_t v31 = &v22[v24 & 0xFFFFFFFFFFFFFFE0];
        long long v23 = &v20[v24 & 0xFFFFFFFFFFFFFFE0];
        unint64_t v32 = v20 + 16;
        uint64_t v33 = (long long *)(v22 + 16);
        unint64_t v34 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v35 = *v33;
          *(v32 - 1) = *(v33 - 1);
          _OWORD *v32 = v35;
          v32 += 2;
          v33 += 2;
          v34 -= 32;
        }
        while (v34);
        unint64_t v22 = v31;
        if (v24 == (v24 & 0xFFFFFFFFFFFFFFE0)) {
          goto LABEL_31;
        }
      }
    }
    else
    {
      long long v23 = v20;
    }
    do
    {
      char v36 = *v22++;
      *v23++ = v36;
    }
    while (v22 != v10);
LABEL_31:
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(v21, v5, v20 - v21);
    }
    if (v18 != __src) {
      memmove(v5, __src, v18 - __src);
    }
  }
  return v5;
}

void *sub_215D04D60(uint64_t a1, void **a2, uint64_t *a3)
{
  unint64_t v3 = *a2;
  if (*a3 > 0)
  {
    sub_215731D94(v3, (uint64_t)"{", 1);
    uint64_t v6 = (unsigned __int8 *)a3[1];
    std::to_string(&v14, *v6);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t v7 = &v14;
    }
    else {
      int64_t v7 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v14.__r_.__value_.__l.__size_;
    }
    sub_215731D94(*a2, (uint64_t)v7, size);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v14.__r_.__value_.__l.__data_);
      uint64_t v9 = (unsigned __int8 *)(a3[1] + *a3);
      BOOL v10 = v6 + 1;
      if (v10 == v9) {
        return sub_215731D94(*a2, (uint64_t)"}", 1);
      }
    }
    else
    {
      uint64_t v9 = (unsigned __int8 *)(a3[1] + *a3);
      BOOL v10 = v6 + 1;
      if (v10 == v9) {
        return sub_215731D94(*a2, (uint64_t)"}", 1);
      }
    }
    do
    {
      sub_215731D94(*a2, (uint64_t)",", 1);
      std::to_string(&v14, *v10);
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v12 = &v14;
      }
      else {
        uint64_t v12 = (std::string *)v14.__r_.__value_.__r.__words[0];
      }
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v13 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v13 = v14.__r_.__value_.__l.__size_;
      }
      sub_215731D94(*a2, (uint64_t)v12, v13);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
      ++v10;
    }
    while (v10 != v9);
    return sub_215731D94(*a2, (uint64_t)"}", 1);
  }

  return sub_215731D94(v3, (uint64_t)"{}", 2);
}

void sub_215D04EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::thread *sub_215D04F00(std::thread *this)
{
  atomic_store(0, (unsigned __int8 *)&this[4]);
  int t = (int)this[1].__t_;
  if ((t & 0x80000000) == 0)
  {
    if (shutdown((int)this[1].__t_, 2) < 0) {
      __error();
    }
    close(t);
  }
  if (this[2].__t_) {
    std::thread::join(this + 2);
  }
  if (this[3].__t_) {
    std::thread::join(this + 3);
  }
  std::mutex::lock((std::mutex *)&this[5]);
  for (unsigned __int16 i = this[13].__t_; this[14].__t_ != i; unsigned __int16 i = (_opaque_pthread_t *)sub_215D05814((uint64_t)this, i))
    ;
  std::mutex::unlock((std::mutex *)&this[5]);
  uint64_t v4 = this + 16;
  uint64_t v5 = (std::thread *)this[23].__t_;
  if (v5 == &this[20])
  {
    (*(void (**)(std::thread *))&this[20].__t_->__opaque[16])(this + 20);
    std::__libcpp_thread_t v6 = this[19].__t_;
    if (v6 != (std::__libcpp_thread_t)v4) {
      goto LABEL_16;
    }
LABEL_21:
    (*(void (**)(std::thread *))&v4->__t_->__opaque[16])(this + 16);
    int64_t v7 = this[13].__t_;
    if (!v7) {
      goto LABEL_29;
    }
    goto LABEL_22;
  }
  if (v5) {
    (*(void (**)(std::thread *))&v5->__t_->__opaque[24])(v5);
  }
  std::__libcpp_thread_t v6 = this[19].__t_;
  if (v6 == (std::__libcpp_thread_t)v4) {
    goto LABEL_21;
  }
LABEL_16:
  if (v6) {
    (*(void (**)(std::__libcpp_thread_t))(v6->__sig + 40))(v6);
  }
  int64_t v7 = this[13].__t_;
  if (v7)
  {
LABEL_22:
    std::__libcpp_thread_t v8 = this[14].__t_;
    std::__libcpp_thread_t v9 = v7;
    if (v8 != v7)
    {
      do
      {
        uint64_t v11 = *(void *)&v8[-1].__opaque[8168];
        std::__libcpp_thread_t v8 = (std::__libcpp_thread_t)((char *)v8 - 8);
        uint64_t v10 = v11;
        v8->__sig = 0;
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
      }
      while (v8 != v7);
      std::__libcpp_thread_t v9 = this[13].__t_;
    }
    this[14].__t_ = v7;
    operator delete(v9);
  }
LABEL_29:
  std::mutex::~mutex((std::mutex *)&this[5]);
  std::thread::~thread(this + 3);
  std::thread::~thread(this + 2);
  return this;
}

void sub_215D05114(void *a1)
{
  std::mutex::unlock(v1);
  sub_215731D80(a1);
}

void sub_215D0512C(std::thread *a1)
{
  sub_215D04F00(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D05164(uint64_t a1, unsigned __int16 *a2)
{
  int v5 = 0;
  sub_21576B850(v4, "Failed to start server on port ");
  std::to_string(&v6, *a2);
  v7[0] = v4;
  v7[1] = &v6;
  v7[2] = v4;
  v7[3] = &v6;
  v7[4] = &v6;
  if (v5 == -1) {
    sub_215742D4C();
  }
  std::__libcpp_thread_t v8 = v7;
  ((void (*)(void **, _DWORD *))off_26C683528[v5])(&v8, v4);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (v5 == -1) {
    sub_215742D4C();
  }
  v7[0] = &v6;
  uint64_t result = ((uint64_t (*)(void *, _DWORD *))off_26C683540[v5])(v7, v4);
  if (v5 != -1) {
    return ((uint64_t (*)(void *, _DWORD *))off_26C683510[v5])(v7, v4);
  }
  return result;
}

void sub_215D05268(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D05284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_215742CF0((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x215D05274);
}

uint64_t sub_215D052A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 23) = 9;
  strcpy((char *)a2, "localhost");
  *(_WORD *)(a2 + 24) = *(_WORD *)(result + 12);
  return result;
}

uint64_t sub_215D052D4(uint64_t a1, void *a2, int a3)
{
  if (a3) {
    unsigned int v3 = 3;
  }
  else {
    unsigned int v3 = 2;
  }
  sub_215D05304(a1, a2, v3, 0, 0);
  return 1;
}

void sub_215D05304(uint64_t a1, void *a2, unsigned int a3, unsigned __int8 *a4, char a5)
{
  long long v35 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  uint64_t v10 = *(uint64_t **)(a1 + 104);
  std::__libcpp_thread_t v9 = *(uint64_t **)(a1 + 112);
  if (v10 != v9)
  {
    char v36 = a2 + 6;
    unint64_t v37 = a2 + 3;
    if (a5)
    {
      while (1)
      {
        uint64_t v11 = (*(uint64_t (**)(void))(*(void *)*v10 + 24))();
        uint64_t v12 = v11;
        uint64_t v13 = *(unsigned __int8 *)(v11 + 23);
        if ((v13 & 0x80u) == 0) {
          uint64_t v14 = *(unsigned __int8 *)(v11 + 23);
        }
        else {
          uint64_t v14 = *(void *)(v11 + 8);
        }
        uint64_t v15 = a4[23];
        int v16 = (char)v15;
        if ((v15 & 0x80u) != 0) {
          uint64_t v15 = *((void *)a4 + 1);
        }
        if (v14 != v15) {
          goto LABEL_25;
        }
        if (v16 >= 0) {
          uint64_t v17 = a4;
        }
        else {
          uint64_t v17 = *(unsigned __int8 **)a4;
        }
        if ((v13 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v11, v17, *(void *)(v11 + 8))) {
            goto LABEL_19;
          }
LABEL_25:
          if (++v10 == *(uint64_t **)(a1 + 112)) {
            goto LABEL_28;
          }
        }
        else
        {
          if (*(unsigned char *)(v11 + 23))
          {
            char v18 = (unsigned __int8 *)v11;
            while (*v18 == *v17)
            {
              ++v18;
              ++v17;
              if (!--v13) {
                goto LABEL_19;
              }
            }
            goto LABEL_25;
          }
LABEL_19:
          if (*(unsigned __int16 *)(v12 + 24) != *((unsigned __int16 *)a4 + 12)) {
            goto LABEL_25;
          }
          uint64_t v19 = *v10;
          uint64_t v20 = a2[1];
          unint64_t v39 = &unk_26C683078;
          uint64_t v40 = v20;
          uint64_t v41 = &unk_26C6831C8;
          *(_OWORD *)unint64_t v42 = *(_OWORD *)(a2 + 3);
          unint64_t v43 = (char *)a2[5];
          a2[4] = 0;
          a2[5] = 0;
          void *v37 = 0;
          *(_OWORD *)std::string __p = *((_OWORD *)a2 + 3);
          uint64_t v45 = (char *)a2[8];
          a2[7] = 0;
          a2[8] = 0;
          *char v36 = 0;
          char v21 = (*(uint64_t (**)(uint64_t, void **, void))(*(void *)v19 + 48))(v19, &v39, a3);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (v42[0])
          {
            v42[1] = v42[0];
            operator delete(v42[0]);
          }
          if (v21) {
            goto LABEL_25;
          }
          uint64_t v10 = sub_215D05814(a1, v10);
          if (v10 == *(uint64_t **)(a1 + 112)) {
            goto LABEL_28;
          }
        }
      }
    }
    unint64_t v22 = *(uint64_t **)(a1 + 104);
    do
    {
      uint64_t v24 = *v22++;
      uint64_t v23 = v24;
      uint64_t v25 = a2[1];
      unint64_t v39 = &unk_26C683078;
      uint64_t v40 = v25;
      uint64_t v41 = &unk_26C6831C8;
      if (v22 == v9)
      {
        *(_OWORD *)unint64_t v42 = *(_OWORD *)(a2 + 3);
        unint64_t v43 = (char *)a2[5];
        a2[4] = 0;
        a2[5] = 0;
        void *v37 = 0;
        *(_OWORD *)std::string __p = *((_OWORD *)a2 + 3);
        uint64_t v45 = (char *)a2[8];
        a2[7] = 0;
        a2[8] = 0;
        *char v36 = 0;
      }
      else
      {
        v42[0] = 0;
        v42[1] = 0;
        unint64_t v43 = 0;
        unint64_t v27 = (unsigned char *)a2[3];
        unint64_t v26 = (unsigned char *)a2[4];
        size_t v28 = v26 - v27;
        if (v26 != v27)
        {
          if ((v28 & 0x8000000000000000) != 0) {
            sub_2157C3CEC();
          }
          v42[0] = operator new(v26 - v27);
          v42[1] = v42[0];
          uint64_t v29 = (char *)v42[0] + v28;
          unint64_t v43 = (char *)v42[0] + v28;
          memcpy(v42[0], v27, v28);
          v42[1] = v29;
        }
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v45 = 0;
        uint64_t v31 = (unsigned char *)a2[6];
        unint64_t v30 = (unsigned char *)a2[7];
        int64_t v32 = v30 - v31;
        if (v30 != v31)
        {
          if (v32 < 0) {
            sub_215CFB3BC();
          }
          __p[0] = operator new(v30 - v31);
          __p[1] = __p[0];
          uint64_t v33 = (char *)__p[0] + 8 * (v32 >> 3);
          uint64_t v45 = v33;
          memcpy(__p[0], v31, v32);
          __p[1] = v33;
        }
      }
      char v34 = (*(uint64_t (**)(uint64_t, void **, void))(*(void *)v23 + 48))(v23, &v39, a3);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v42[0])
      {
        v42[1] = v42[0];
        operator delete(v42[0]);
      }
      if ((v34 & 1) == 0) {
        unint64_t v22 = sub_215D05814(a1, v10);
      }
      std::__libcpp_thread_t v9 = *(uint64_t **)(a1 + 112);
      uint64_t v10 = v22;
    }
    while (v22 != v9);
  }
LABEL_28:
  std::mutex::unlock(v35);
}

void sub_215D056FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
}

void sub_215D05710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
}

void sub_215D057C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
}

uint64_t sub_215D057D8(uint64_t a1, unsigned __int8 *a2, void *a3, int a4)
{
  if (a4) {
    unsigned int v5 = 3;
  }
  else {
    unsigned int v5 = 2;
  }
  sub_215D05304(a1, a3, v5, a2, 1);
  return 1;
}

void *sub_215D05814(uint64_t a1, void *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
  char v13 = 2;
  uint64_t v5 = *(void *)(a1 + 184);
  if (!v5) {
    sub_21573D7DC();
  }
  (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v5 + 48))(v5, v4, &v13);
  std::string v6 = a2 + 1;
  int64_t v7 = *(void **)(a1 + 112);
  if (a2 + 1 == v7)
  {
    std::__libcpp_thread_t v8 = a2;
  }
  else
  {
    do
    {
      uint64_t v9 = *(v6 - 1);
      *(v6 - 1) = *v6;
      *std::string v6 = 0;
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      ++v6;
    }
    while (v6 != v7);
    std::__libcpp_thread_t v8 = v6 - 1;
    std::string v6 = *(void **)(a1 + 112);
  }
  while (v6 != v8)
  {
    uint64_t v11 = *--v6;
    uint64_t v10 = v11;
    *std::string v6 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  *(void *)(a1 + 112) = v8;
  return a2;
}

void sub_215D05954(void *a1, uint64_t a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *a1 = &unk_26C683430;
  uint64_t v4 = (void *)a3[3];
  if (v4)
  {
    if (v4 == a3)
    {
      int64_t v7 = v6;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v6);
    }
    else
    {
      int64_t v7 = (void *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    int64_t v7 = 0;
  }
  uint64_t v5 = (void *)a3[7];
  if (v5)
  {
    if (v5 == a3 + 4)
    {
      uint64_t v9 = v8;
      (*(void (**)(void *, void *))(*v5 + 24))(v5, v8);
    }
    else
    {
      uint64_t v9 = (void *)a3[7];
      a3[7] = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  operator new();
}

void sub_215D05FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215D0610C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(void))(a1 + 16))();
  }
  return a1;
}

void sub_215D06148(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(void))(a1 + 16))();
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D061A4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 8);
  *(unsigned char *)(a2 + 23) = 9;
  strcpy((char *)a2, "localhost");
  *(_WORD *)(a2 + 24) = *(_WORD *)(v2 + 12);
  return result;
}

uint64_t sub_215D061D4(uint64_t a1, void *a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (a3) {
    unsigned int v4 = 3;
  }
  else {
    unsigned int v4 = 2;
  }
  sub_215D05304(v3, a2, v4, 0, 0);
  return 1;
}

uint64_t sub_215D06208(uint64_t a1, unsigned __int8 *a2, void *a3, int a4)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (a4) {
    unsigned int v6 = 3;
  }
  else {
    unsigned int v6 = 2;
  }
  sub_215D05304(v5, a3, v6, a2, 1);
  return 1;
}

void sub_215D06248()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_215D064D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215D06524(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2)
  {
    sub_215CF7F5C(*(std::mutex **)(v2 + 40), v2);
    if (*(char *)(v2 + 31) < 0) {
      operator delete(*(void **)(v2 + 8));
    }
    MEMORY[0x2166C4D20](v2, 0x10B3C408108F89CLL);
  }
  return a1;
}

void sub_215D0658C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v1)
  {
    sub_215CF7F5C(*(std::mutex **)(v1 + 40), v1);
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    MEMORY[0x2166C4D20](v1, 0x10B3C408108F89CLL);
  }

  JUMPOUT(0x2166C4D20);
}

void *sub_215D06614@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = result[1];
  if (*(char *)(v3 + 31) < 0)
  {
    uint64_t result = sub_215738B0C((unsigned char *)a2, *(void **)(v3 + 8), *(void *)(v3 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(v3 + 8);
    *(void *)(a2 + 16) = *(void *)(v3 + 24);
    *(_OWORD *)a2 = v4;
  }
  *(_WORD *)(a2 + 24) = *(_WORD *)(v3 + 32);
  return result;
}

uint64_t sub_215D0667C(uint64_t a1, void *a2, int a3)
{
  if (a3) {
    int v3 = 3;
  }
  else {
    int v3 = 2;
  }
  sub_215CF8878(*(std::mutex **)(*(void *)(a1 + 8) + 40), *(void *)(a1 + 8), a2, v3, 0, 0);
  return 1;
}

uint64_t sub_215D066BC(uint64_t a1, unsigned __int8 *a2, void *a3, int a4)
{
  if (a4) {
    int v4 = 3;
  }
  else {
    int v4 = 2;
  }
  sub_215CF8878(*(std::mutex **)(*(void *)(a1 + 8) + 40), *(void *)(a1 + 8), a3, v4, a2, 1u);
  return 1;
}

std::thread *sub_215D066F4(std::thread *result)
{
  if (result)
  {
    sub_215D04F00(result);
    JUMPOUT(0x2166C4D20);
  }
  return result;
}

uint64_t sub_215D06734(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = std::__thread_local_data();
  int v3 = *(const void **)a1;
  *(void *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = *(void *)(a1 + 8);
  LODWORD(v17) = 0;
  sub_2158C2354(v16, "New client on port ");
  std::to_string(&v14, *(unsigned __int16 *)(v4 + 12));
  v11[0] = v16;
  v11[1] = &v14;
  v11[2] = v16;
  _OWORD v11[3] = &v14;
  v11[4] = &v14;
  if (v17 == -1) {
    sub_215742D4C();
  }
  uint64_t v15 = v11;
  ((void (*)(void **, _DWORD *))off_26C683528[v17])(&v15, v16);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (v17 == -1) {
    sub_215742D4C();
  }
  v11[0] = &v14;
  ((void (*)(void **__return_ptr, void *, _DWORD *))off_26C683540[v17])(__p, v11, v16);
  if (v17 != -1) {
    ((void (*)(void *, _DWORD *))off_26C683510[v17])(v11, v16);
  }
  if (v13 >= 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  pthread_setname_np((const char *)v5);
  if (v13 < 0)
  {
    operator delete(__p[0]);
    unsigned __int8 v7 = atomic_load((unsigned __int8 *)(v4 + 32));
    if ((v7 & 1) == 0) {
      goto LABEL_15;
    }
LABEL_14:
    operator new();
  }
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v4 + 32));
  if (v6) {
    goto LABEL_14;
  }
LABEL_15:
  std::__libcpp_thread_t v8 = *(const void **)a1;
  *(void *)a1 = 0;
  if (v8)
  {
    uint64_t v9 = MEMORY[0x2166C4640]();
    MEMORY[0x2166C4D20](v9, 0x20C4093837F09);
  }
  MEMORY[0x2166C4D20](a1, 0x20C40A4A59CD2);
  return 0;
}

void sub_215D06DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215D06EFC(uint64_t a1)
{
  uint64_t v2 = std::__thread_local_data();
  int v3 = *(const void **)a1;
  *(void *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = *(void *)(a1 + 8);
  int v37 = 0;
  sub_2158D723C(v36, "KeepAlive on port ");
  std::to_string(&v38, *(unsigned __int16 *)(v4 + 12));
  __ns.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v36;
  uint64_t v26 = (uint64_t)&v38;
  unint64_t v27 = v36;
  size_t v28 = &v38;
  uint64_t v29 = &v38;
  if (v37 == -1) {
    sub_215742D4C();
  }
  p_ns = &__ns;
  ((void (*)(std::chrono::nanoseconds **, _DWORD *))off_26C683528[v37])(&p_ns, v36);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (v37 == -1) {
    sub_215742D4C();
  }
  __ns.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)&v38;
  ((void (*)(void **__return_ptr, std::chrono::nanoseconds *, _DWORD *))off_26C683540[v37])(__p, &__ns, v36);
  if (v37 != -1) {
    ((void (*)(std::chrono::nanoseconds *, _DWORD *))off_26C683510[v37])(&__ns, v36);
  }
  if (v35 >= 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  pthread_setname_np((const char *)v5);
  if (v35 < 0)
  {
    operator delete(__p[0]);
    unsigned __int8 v7 = atomic_load((unsigned __int8 *)(v4 + 32));
    if ((v7 & 1) == 0) {
      goto LABEL_35;
    }
  }
  else
  {
    unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v4 + 32));
    if ((v6 & 1) == 0) {
      goto LABEL_35;
    }
  }
  std::__libcpp_thread_t v8 = (std::mutex *)(v4 + 40);
  do
  {
    std::mutex::lock(v8);
    uint64_t v9 = *(void **)(v4 + 104);
    if (v9 != *(void **)(v4 + 112))
    {
      do
      {
        while (1)
        {
          uint64_t v10 = *v9;
          __ns.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)&unk_26C683078;
          uint64_t v26 = 1;
          unint64_t v27 = &unk_26C6831C8;
          uint64_t v11 = operator new(0xAuLL);
          v11[4] = 0;
          *(void *)uint64_t v11 = 0;
          size_t v28 = v11;
          uint64_t v29 = v11 + 5;
          unint64_t v30 = (char *)(v11 + 5);
          int64_t v32 = 0;
          uint64_t v33 = 0;
          uint64_t v31 = 0;
          char v12 = (*(uint64_t (**)(uint64_t, std::chrono::nanoseconds *, uint64_t))(*(void *)v10 + 48))(v10, &__ns, 1);
          if (v31)
          {
            int64_t v32 = v31;
            operator delete(v31);
          }
          if (v28)
          {
            uint64_t v29 = v28;
            operator delete(v28);
          }
          if ((v12 & 1) == 0) {
            break;
          }
          if (++v9 == *(void **)(v4 + 112)) {
            goto LABEL_34;
          }
        }
        uint64_t v13 = (*(uint64_t (**)(void))(*(void *)*v9 + 24))();
        LOBYTE(__ns.__rep_) = 2;
        uint64_t v14 = *(void *)(v4 + 184);
        if (!v14) {
          sub_21573D7DC();
        }
        (*(void (**)(uint64_t, uint64_t, std::chrono::nanoseconds *))(*(void *)v14 + 48))(v14, v13, &__ns);
        uint64_t v15 = v9 + 1;
        int v16 = *(void **)(v4 + 112);
        if (v9 + 1 == v16)
        {
          uint64_t v17 = v9;
        }
        else
        {
          do
          {
            uint64_t v18 = *(v15 - 1);
            *(v15 - 1) = *v15;
            *uint64_t v15 = 0;
            if (v18) {
              (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
            }
            ++v15;
          }
          while (v15 != v16);
          uint64_t v17 = v15 - 1;
          uint64_t v15 = *(void **)(v4 + 112);
        }
        while (v15 != v17)
        {
          uint64_t v20 = *--v15;
          uint64_t v19 = v20;
          *uint64_t v15 = 0;
          if (v20) {
            (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
          }
        }
        *(void *)(v4 + 112) = v17;
      }
      while (v9 != v17);
    }
LABEL_34:
    std::__libcpp_thread_t v8 = (std::mutex *)(v4 + 40);
    std::mutex::unlock((std::mutex *)(v4 + 40));
    __ns.__rep_ = 100000000;
    std::this_thread::sleep_for (&__ns);
    unsigned __int8 v21 = atomic_load((unsigned __int8 *)(v4 + 32));
  }
  while ((v21 & 1) != 0);
LABEL_35:
  unint64_t v22 = *(const void **)a1;
  *(void *)a1 = 0;
  if (v22)
  {
    uint64_t v23 = MEMORY[0x2166C4640]();
    MEMORY[0x2166C4D20](v23, 0x20C4093837F09);
  }
  MEMORY[0x2166C4D20](a1, 0x20C40A4A59CD2);
  return 0;
}

void sub_215D07308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a28 < 0)
  {
    operator delete(__p);
    sub_215B209B4(&a11);
    _Unwind_Resume(a1);
  }
  sub_215B209B4(&a11);
  _Unwind_Resume(a1);
}

void sub_215D073E4()
{
}

uint64_t sub_215D073F8()
{
  return std::__fs::filesystem::_FilesystemClock::now().__d_.__rep_;
}

uint64_t sub_215D07414()
{
  return std::__fs::filesystem::_FilesystemClock::now().__d_.__rep_;
}

void sub_215D07430()
{
}

unint64_t sub_215D07444()
{
  uint64_t v0 = mach_continuous_time();
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890888, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267890888))
  {
    mach_timebase_info(&info);
    LODWORD(v2) = info.numer;
    LODWORD(v3) = info.denom;
    *(double *)&qword_267890880 = (double)v2 / (double)v3;
    __cxa_guard_release(&qword_267890888);
  }
  return llround(*(double *)&qword_267890880 * (double)v0);
}

void sub_215D074D4(_Unwind_Exception *a1)
{
}

unint64_t sub_215D074EC()
{
  uint64_t v0 = mach_continuous_time();
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890888, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267890888))
  {
    mach_timebase_info(&info);
    LODWORD(v2) = info.numer;
    LODWORD(v3) = info.denom;
    *(double *)&qword_267890880 = (double)v2 / (double)v3;
    __cxa_guard_release(&qword_267890888);
  }
  return llround(*(double *)&qword_267890880 * (double)v0);
}

void sub_215D07578(_Unwind_Exception *a1)
{
}

uint64_t *sub_215D07590(uint64_t *a1, unsigned char *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890540, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267890540))
  {
    sub_215D0781C();
  }
  uint64_t v23 = 0;
  size_t v24 = 0;
  uint64_t v25 = 0;
  sub_215A9B3F0(a1, (uint64_t)&v23);
  uint64_t v4 = qword_267890550;
  if (!qword_267890550) {
    goto LABEL_43;
  }
  int v5 = SHIBYTE(v25);
  unsigned __int8 v6 = v23;
  if (v25 >= 0) {
    unsigned __int8 v7 = &v23;
  }
  else {
    unsigned __int8 v7 = (void **)v23;
  }
  if (v25 >= 0) {
    size_t v8 = HIBYTE(v25);
  }
  else {
    size_t v8 = v24;
  }
  uint64_t v9 = &qword_267890550;
  do
  {
    while (1)
    {
      int v10 = *(char *)(v4 + 55);
      uint64_t v11 = v10 >= 0 ? (const void *)(v4 + 32) : *(const void **)(v4 + 32);
      size_t v12 = v10 >= 0 ? *(unsigned __int8 *)(v4 + 55) : *(void *)(v4 + 40);
      size_t v13 = v8 >= v12 ? v12 : v8;
      int v14 = memcmp(v11, v7, v13);
      if (v14) {
        break;
      }
      if (v12 < v8) {
        goto LABEL_12;
      }
LABEL_10:
      uint64_t v9 = (uint64_t *)v4;
      uint64_t v4 = *(void *)v4;
      if (!v4) {
        goto LABEL_27;
      }
    }
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_10;
    }
LABEL_12:
    uint64_t v4 = *(void *)(v4 + 8);
  }
  while (v4);
LABEL_27:
  if (v9 == &qword_267890550) {
    goto LABEL_43;
  }
  int v15 = *((char *)v9 + 55);
  if (v15 >= 0) {
    int v16 = v9 + 4;
  }
  else {
    int v16 = (const void *)v9[4];
  }
  if (v15 >= 0) {
    size_t v17 = *((unsigned __int8 *)v9 + 55);
  }
  else {
    size_t v17 = v9[5];
  }
  if (v17 >= v8) {
    size_t v18 = v8;
  }
  else {
    size_t v18 = v17;
  }
  int v19 = memcmp(v7, v16, v18);
  if (v19)
  {
    if ((v19 & 0x80000000) == 0) {
      goto LABEL_39;
    }
LABEL_43:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::logic_error::logic_error(exception, &v22);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A320, MEMORY[0x263F8C080]);
  }
  if (v8 < v17) {
    goto LABEL_43;
  }
LABEL_39:
  *a2 = *((unsigned char *)v9 + 56);
  if (v5 < 0) {
    operator delete(v6);
  }
  return a1;
}

void sub_215D077B4(_Unwind_Exception *a1)
{
}

void sub_215D077CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D0781C()
{
  qword_267890550 = 0;
  qword_267890558 = 0;
  qword_267890548 = (uint64_t)&qword_267890550;
  sub_2159A4F58();
}

void sub_215D07B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215D07BBC(uint64_t a1)
{
  return a1;
}

void sub_215D07BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  char v3 = *(unsigned char *)(a2 + 8);
  int v5 = 0;
  sub_215D07D28((uint64_t)&v6, (uint64_t)v4, &v2);
}

void sub_215D07CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D07D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D07D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D07D28(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v9 = a2;
  p_p = (std::string *)"{";
  uint64_t v11 = a2;
  size_t v12 = (std::string *)"{";
  size_t v13 = (std::string *)"{";
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 != -1)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v9;
    ((void (*)(std::string *))off_26C683638[v3])(&__p);
    sub_215ACEEB4(a3, &__p);
    uint64_t v9 = a2;
    p_p = &__p;
    uint64_t v11 = a2;
    size_t v12 = &__p;
    size_t v13 = &__p;
    uint64_t v6 = *(unsigned int *)(a2 + 24);
    if (v6 == -1) {
      sub_215742D4C();
    }
    int v14 = &v9;
    ((void (*)(uint64_t **, uint64_t))off_26C683668[v6])(&v14, a2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v9 = a2;
    p_p = (std::string *)",";
    uint64_t v11 = a2;
    size_t v12 = (std::string *)",";
    size_t v13 = (std::string *)",";
    uint64_t v7 = *(unsigned int *)(a2 + 24);
    if (v7 != -1)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v9;
      ((void (*)(std::string *, uint64_t))off_26C683638[v7])(&__p, a2);
      sub_2159A4F58();
    }
  }
  sub_215742D4C();
}

void sub_215D07E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D07E9C()
{
}

void sub_215D07F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  MEMORY[0x2166C4D20](v10, 0x1020C4014B85259);
  _Unwind_Resume(a1);
}

void sub_215D07FF0()
{
}

void sub_215D080E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  MEMORY[0x2166C4D20](v10, 0x1020C4014B85259);
  _Unwind_Resume(a1);
}

void sub_215D08154(uint64_t *a1, uint64_t a2)
{
  if (*((_DWORD *)a1 + 6))
  {
    uint64_t v4 = *a1;
    if (*a1)
    {
LABEL_5:
      int v5 = *(void (**)(void))(*(void *)v4 + 40);
      v5();
      return;
    }
    if (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Concurrency/src/Channel/NodeTaskScheduler.cpp", 78, (uint64_t)"work_queue_", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      uint64_t v4 = *a1;
      goto LABEL_5;
    }
LABEL_15:
    abort();
  }
  uint64_t v6 = (std::recursive_mutex *)a1[4];
  if (!v6)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Concurrency/src/Channel/NodeTaskScheduler.cpp", 74, (uint64_t)"mtx_", 4, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      goto LABEL_15;
    }
    uint64_t v6 = (std::recursive_mutex *)a1[4];
  }
  std::recursive_mutex::lock(v6);
  uint64_t v7 = *(void *)(a2 + 24);
  if (!v7) {
    sub_21573D7DC();
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 48))(v7);

  std::recursive_mutex::unlock(v6);
}

void sub_215D082B0(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_215D082C4(uint64_t *a1)
{
  if (*((_DWORD *)a1 + 6) == 1)
  {
    uint64_t v2 = *a1;
    if (*a1)
    {
LABEL_5:
      uint64_t v3 = *(void (**)(void))(**(void **)(v2 + 8) + 24);
      v3();
      return;
    }
    if (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Concurrency/src/Channel/NodeTaskScheduler.cpp", 86, (uint64_t)"work_queue_", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      uint64_t v2 = *a1;
      goto LABEL_5;
    }
LABEL_14:
    abort();
  }
  uint64_t v4 = (std::recursive_mutex *)a1[4];
  if (!v4)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Concurrency/src/Channel/NodeTaskScheduler.cpp", 89, (uint64_t)"mtx_", 4, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      goto LABEL_14;
    }
    uint64_t v4 = (std::recursive_mutex *)a1[4];
  }
  std::recursive_mutex::lock(v4);

  std::recursive_mutex::unlock(v4);
}

uint64_t sub_215D083E0(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t *a6)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = *a6;
  uint64_t v6 = a6[1];
  *(void *)(result + 16) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 24) = a5;
  if (a5 != 1) {
    operator new();
  }
  switch(a4)
  {
    case 0:
      sub_215D086C4((uint64_t)&v7, a2, 0, 4294967286, *a6, 1, a3, SBYTE4(a3));
    case 1:
      sub_215D086C4((uint64_t)&v7, a2, 0, 4294967285, *a6, 1, a3, SBYTE4(a3));
    case 2:
      sub_215D086C4((uint64_t)&v7, a2, 1, 0xFFFFFFFFLL, *a6, *a6 != 0, a3, SBYTE4(a3));
    case 3:
      sub_215D086C4((uint64_t)&v7, a2, 2, 0xFFFFFFFFLL, *a6, *a6 != 0, a3, SBYTE4(a3));
    case 4:
      sub_215D086C4((uint64_t)&v7, a2, 3, 0xFFFFFFFFLL, *a6, *a6 != 0, a3, SBYTE4(a3));
    case 5:
      sub_215D086C4((uint64_t)&v7, a2, 4, 0xFFFFFFFFLL, *a6, *a6 != 0, a3, SBYTE4(a3));
    default:
      return result;
  }
}

void sub_215D08604(_Unwind_Exception *a1)
{
  sub_215D0867C(v3);
  sub_215733368(v2);
  sub_215ABEC10(v1);
  _Unwind_Resume(a1);
}

std::recursive_mutex **sub_215D0867C(std::recursive_mutex **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::recursive_mutex::~recursive_mutex(v2);
    MEMORY[0x2166C4D20]();
  }
  return a1;
}

void sub_215D086C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, char a8)
{
  if (a8) {
    sub_215D09754();
  }
  if (a6) {
    sub_215D094B0();
  }
  sub_215D094B0();
}

void sub_215D088BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x2166C4D20](v9, 0xA1C40BD48D6D6);
  sub_215D09E80(&a9);
  _Unwind_Resume(a1);
}

void sub_215D08918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_215D0892C(uint64_t *a1)
{
  uint64_t v2 = (std::recursive_mutex *)a1[4];
  a1[4] = 0;
  if (v2)
  {
    std::recursive_mutex::~recursive_mutex(v2);
    MEMORY[0x2166C4D20]();
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = *a1;
    *a1 = 0;
    if (!v4) {
      return a1;
    }
  }
  else
  {
    uint64_t v4 = *a1;
    *a1 = 0;
    if (!v4) {
      return a1;
    }
  }
  uint64_t v5 = *(void *)(v4 + 8);
  *(void *)(v4 + 8) = 0;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    uint64_t v6 = *(void *)(v4 + 8);
    *(void *)(v4 + 8) = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  MEMORY[0x2166C4D20](v4, 0xA1C40BD48D6D6);
  return a1;
}

uint64_t sub_215D08A50(uint64_t result, const char **a2)
{
  uint64_t v2 = *a2;
  if (*a2 != a2[1])
  {
    uint64_t v3 = result;
    uint64_t v4 = result + 8;
    std::string v22 = (uint64_t *)(result + 16);
    int v5 = v2[23];
    if (v2[32])
    {
      uint64_t v6 = *a2;
      if (v5 < 0) {
        uint64_t v6 = *(const char **)v2;
      }
      size_t v7 = strlen(v6);
      if (v7 <= 0x7FFFFFFFFFFFFFF7)
      {
        size_t v8 = v7;
        if (v7 >= 0x17)
        {
          uint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v7 | 7) != 0x17) {
            uint64_t v14 = v7 | 7;
          }
          uint64_t v15 = v14 + 1;
          p_dsint t = (const void **)operator new(v14 + 1);
          size_t v24 = v8;
          unint64_t v25 = v15 | 0x8000000000000000;
          std::string __dst = p_dst;
        }
        else
        {
          HIBYTE(v25) = v7;
          p_dsint t = (const void **)&__dst;
          if (!v7)
          {
LABEL_19:
            *((unsigned char *)p_dst + v8) = 0;
            if (v22 == sub_215837FE8(v4, (const void **)&__dst))
            {
              int v16 = operator new(0x20uLL);
              v16[1] = 0;
              v16[2] = 0;
              *int v16 = &unk_26C6836A8;
              uint64_t v17 = *(void *)(v3 + 40);
              uint64_t v26 = *(void *)(v3 + 32);
              uint64_t v27 = v17;
              if (v17) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
              }
              sub_215D07FF0();
            }
            sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Concurrency/src/Channel/NodeTaskSchedulerPool.cpp", 70, (uint64_t)"", 0, (uint64_t)"Named scheduler already exists.", 31, (void (*)(void **))sub_215E1ABD8);
            abort();
          }
        }
        memmove(p_dst, v6, v8);
        goto LABEL_19;
      }
LABEL_32:
      sub_215731CD8();
    }
    uint64_t v10 = *a2;
    if (v5 < 0) {
      uint64_t v10 = *(const char **)v2;
    }
    size_t v11 = strlen(v10);
    if (v11 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_32;
    }
    size_t v12 = v11;
    if (v11 >= 0x17)
    {
      uint64_t v18 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v18 = v11 | 7;
      }
      uint64_t v19 = v18 + 1;
      size_t v13 = (const void **)operator new(v18 + 1);
      size_t v24 = v12;
      unint64_t v25 = v19 | 0x8000000000000000;
      std::string __dst = v13;
    }
    else
    {
      HIBYTE(v25) = v11;
      size_t v13 = (const void **)&__dst;
      if (!v11)
      {
LABEL_27:
        *((unsigned char *)v13 + v12) = 0;
        if (v22 == sub_215837FE8(v4, (const void **)&__dst))
        {
          uint64_t v20 = operator new(0x20uLL);
          v20[1] = 0;
          v20[2] = 0;
          *uint64_t v20 = &unk_26C6836A8;
          uint64_t v21 = *(void *)(v3 + 40);
          uint64_t v26 = *(void *)(v3 + 32);
          uint64_t v27 = v21;
          if (v21) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
          }
          sub_215D07E9C();
        }
        sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Concurrency/src/Channel/NodeTaskSchedulerPool.cpp", 56, (uint64_t)"", 0, (uint64_t)"Named scheduler already exists.", 31, (void (*)(void **))sub_215E1ABD8);
        abort();
      }
    }
    memmove(v13, v10, v12);
    goto LABEL_27;
  }
  return result;
}

void sub_215D08F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D090B0()
{
}

void sub_215D091AC(_Unwind_Exception *a1)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  MEMORY[0x2166C4D20](v2, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t *sub_215D09214(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      size_t v8 = a2;
    }
    else {
      size_t v8 = *a2;
    }
    if (v7 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    while (1)
    {
      uint64_t v10 = (uint64_t **)v5;
      size_t v13 = (const void *)v5[4];
      size_t v11 = v5 + 4;
      size_t v12 = v13;
      int v14 = *((char *)v11 + 23);
      if (v14 >= 0) {
        uint64_t v15 = v11;
      }
      else {
        uint64_t v15 = v12;
      }
      if (v14 >= 0) {
        size_t v16 = *((unsigned __int8 *)v11 + 23);
      }
      else {
        size_t v16 = v11[1];
      }
      if (v16 >= v9) {
        size_t v17 = v9;
      }
      else {
        size_t v17 = v16;
      }
      int v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0) {
          goto LABEL_8;
        }
LABEL_22:
        int v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0) {
            return (uint64_t *)v10;
          }
        }
        else if (v16 >= v9)
        {
          return (uint64_t *)v10;
        }
        int v5 = v10[1];
        if (!v5)
        {
          uint64_t v6 = v10 + 1;
LABEL_28:
          uint64_t v20 = (uint64_t *)operator new(0x48uLL);
          uint64_t v21 = v20 + 4;
          if (*(char *)(a3 + 23) < 0) {
            goto LABEL_31;
          }
LABEL_29:
          *(_OWORD *)uint64_t v21 = *(_OWORD *)a3;
          v21[2] = *(void *)(a3 + 16);
          goto LABEL_32;
        }
      }
      else
      {
        if (v9 >= v16) {
          goto LABEL_22;
        }
LABEL_8:
        int v5 = *v10;
        uint64_t v6 = v10;
        if (!*v10) {
          goto LABEL_28;
        }
      }
    }
  }
  uint64_t v10 = a1 + 1;
  uint64_t v20 = (uint64_t *)operator new(0x48uLL);
  uint64_t v21 = v20 + 4;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0) {
    goto LABEL_29;
  }
LABEL_31:
  sub_215738B0C(v21, *(void **)a3, *(void *)(a3 + 8));
LABEL_32:
  v20[7] = 0;
  v20[8] = 0;
  *uint64_t v20 = 0;
  v20[1] = 0;
  v20[2] = (uint64_t)v10;
  *uint64_t v6 = v20;
  std::string v22 = (uint64_t *)**a1;
  uint64_t v23 = v20;
  if (v22)
  {
    *a1 = v22;
    uint64_t v23 = *v6;
  }
  sub_21573B048(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v20;
}

void sub_215D09398(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_215D093AC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6836A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D093CC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6836A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t *sub_215D09420(uint64_t a1)
{
  uint64_t result = *(uint64_t **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (result)
  {
    sub_215D0892C(result);
    JUMPOUT(0x2166C4D20);
  }
  return result;
}

void sub_215D09478(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215D094B0()
{
}

void sub_215D096D4(_Unwind_Exception *a1)
{
  sub_215D0970C(v1);
  _Unwind_Resume(a1);
}

void sub_215D096E8(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x10B3C40CBD3A495);
  _Unwind_Resume(a1);
}

uint64_t *sub_215D0970C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = sub_215D099B0(v2);
    MEMORY[0x2166C4D20](v3, 0x10B3C40CBD3A495);
  }
  return a1;
}

void sub_215D09754()
{
}

void sub_215D09978(_Unwind_Exception *a1)
{
  sub_215D0970C(v1);
  _Unwind_Resume(a1);
}

void sub_215D0998C(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x10B3C40CBD3A495);
  _Unwind_Resume(a1);
}

uint64_t sub_215D099B0(uint64_t a1)
{
  if (dispatch_group_wait(*(dispatch_group_t *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL)
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Dispatch/src/DispatchQueue.cpp", 90, (uint64_t)"error == 0", 10, (uint64_t)"dispatch_group_wait failed", 26, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    (*(void (**)(void))(a1 + 56))();
  }
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3) {
    (*(void (**)(void))(a1 + 40))();
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

intptr_t sub_215D09A7C(uint64_t a1)
{
  intptr_t result = dispatch_group_wait(*(dispatch_group_t *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL);
  if (result)
  {
    intptr_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Dispatch/src/DispatchQueue.cpp", 90, (uint64_t)"error == 0", 10, (uint64_t)"dispatch_group_wait failed", 26, (void (*)(void **))sub_215E1ABD8);
    if (result) {
      abort();
    }
  }
  return result;
}

void sub_215D09AE4(uint64_t a1)
{
  sub_215D099B0(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D09B1C(uint64_t a1)
{
  uint64_t result = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

void *sub_215D09B38(uint64_t a1, void *a2)
{
  return sub_215D0A888(*(dispatch_queue_t *)(a1 + 32), a2);
}

void sub_215D09B40()
{
}

void sub_215D09B54(uint64_t a1, void *a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = operator new(0x40uLL);
  v3[1] = 0;
  v3[2] = 0;
  *uint64_t v3 = &unk_26C683878;
  v3[3] = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)a2[4];
  if (v4)
  {
    if (v4 == a2 + 1)
    {
      v3[7] = v3 + 4;
      (*(void (**)(void *))(*v4 + 24))(v4);
    }
    else
    {
      v3[7] = v4;
      a2[4] = 0;
    }
  }
  else
  {
    v3[7] = 0;
  }
  atomic_fetch_add_explicit(v3 + 1, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(v3 + 1, 1uLL, memory_order_relaxed);
  v5[0] = &unk_26C6838C8;
  v5[1] = v3 + 3;
  v5[2] = v3;
  v5[3] = v5;
  sub_215D0AC0C();
}

void sub_215D09DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215D09DE4(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26C683830;
  a1[1] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    uint64_t v3 = a1[1];
    a1[1] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  return a1;
}

void *sub_215D09E80(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    a1[1] = 0;
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    uint64_t v2 = a1[1];
  }
  *a1 = &unk_26C683830;
  a1[1] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    uint64_t v3 = a1[1];
    a1[1] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  return a1;
}

void sub_215D09F4C(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    a1[1] = 0;
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    uint64_t v2 = a1[1];
  }
  *a1 = &unk_26C683830;
  a1[1] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    uint64_t v3 = a1[1];
    a1[1] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D0A038(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t sub_215D0A060(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

uint64_t sub_215D0A088(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t sub_215D0A0B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

uint64_t sub_215D0A0D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))();
}

void sub_215D0A100(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26C683830;
  a1[1] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    uint64_t v3 = a1[1];
    a1[1] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }

  JUMPOUT(0x2166C4D20);
}

void sub_215D0A1BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C683878;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D0A1DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C683878;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215D0A230(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2 == v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  else
  {
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    }
  }
  JUMPOUT(0x2166C4B90);
}

void *sub_215D0A2E8(void *result)
{
  uint64_t v1 = result;
  *uint64_t result = &unk_26C6838C8;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215D0A380(void *a1)
{
  *a1 = &unk_26C6838C8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

void *sub_215D0A428(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_26C6838C8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_215D0A484(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26C6838C8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_215D0A4BC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_215D0A538(void *__p)
{
  uint64_t v1 = __p;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    std::string __p = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(__p);
}

void sub_215D0A5D4(uint64_t a1)
{
  uint64_t v1 = *(std::promise<void> **)(a1 + 8);
  state = v1[4].__state_;
  if (!state) {
    sub_21573D7DC();
  }
  ((void (*)(std::__assoc_sub_state *))state->__vftable[1].__on_zero_shared)(state);
  std::promise<void>::set_value(v1);
}

void sub_215D0A638(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  v15.__ptr_ = v16;
  std::promise<void>::set_exception(v14, v15);
  std::exception_ptr::~exception_ptr(v16);
  __cxa_end_catch();
}

void sub_215D0A66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

uint64_t sub_215D0A688(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3esn6thread6detail24GenericDispatchQueueImpl17DispatchAsyncImplEONS1_12PackagedTaskINSt3__18"
                     "functionIFvvEEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3esn6thread6detail24GenericDispatchQueueImpl17DispatchAsyncImplEONS1_12PackagedTa"
                                "skINSt3__18functionIFvvEEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3esn6thread6detail24GenericDispatchQueueImpl17DispatchAsyncImplEONS1_12PackagedTaskINSt3__18functionIFvvEEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3esn6thread6detail24GenericDispatchQueueImpl17DispatchAsyncImplEONS1_12PackagedTaskINSt3__18functionIFvvEEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215D0A6F8()
{
  return &unk_26C683928;
}

dispatch_queue_attr_t sub_215D0A704(int a1, unsigned int a2, int a3)
{
  if (a1)
  {
    sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Dispatch/src/DispatchQueueTypeUtil.cpp", 81, (uint64_t)"", 0, (uint64_t)"queue_type has unexpected value.", 32, (void (*)(void **))sub_215E1ABD8);
    abort();
  }
  if (a2 > 5)
  {
    dispatch_qos_class_t v3 = QOS_CLASS_DEFAULT;
  }
  else
  {
    dispatch_qos_class_t v3 = *(_DWORD *)&asc_215EF741C[4 * a2];
  }
  return dispatch_queue_attr_make_with_qos_class(0, v3, a3);
}

void sub_215D0A7A0(dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
}

void sub_215D0A7AC(dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
}

uint64_t sub_215D0A7B8(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 24);
    if (!v1) {
      sub_21573D7DC();
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1);
  }
  else
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Dispatch/src/GrandCentralDispatchUtil.cpp", 83, (uint64_t)"context != nullptr", 18, (uint64_t)"Context may not be nullptr", 26, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    if (!MEMORY[0x18]) {
      sub_21573D7DC();
    }
    return (*(uint64_t (**)(void))(*MEMORY[0x18] + 48))(MEMORY[0x18]);
  }
}

void *sub_215D0A888(dispatch_queue_t queue, void *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  dispatch_qos_class_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      uint64_t v6 = context;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, context);
    }
    else
    {
      uint64_t v6 = (void *)a2[3];
      a2[3] = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (!v6
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Dispatch/src/GrandCentralDispatchUtil.cpp", 63, (uint64_t)"_f", 2, (uint64_t)"Function should contain valid target", 36, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  dispatch_sync_f(queue, context, (dispatch_function_t)sub_215D0A7B8);
  uint64_t result = v6;
  if (v6 == context) {
    return (void *)(*(uint64_t (**)(void *))(context[0] + 32))(context);
  }
  if (v6) {
    return (void *)(*(uint64_t (**)(void))(*v6 + 40))();
  }
  return result;
}

void sub_215D0AA10(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_215731D80(a1);
  }
  _Unwind_Resume(a1);
}

void sub_215D0AA20(void *a1)
{
  if (a1
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Dispatch/src/GrandCentralDispatchUtil.cpp", 94, (uint64_t)"context", 7, (uint64_t)"Context may not be nullptr", 26, (void (*)(void **))sub_215E1ABD8))
  {
    uint64_t v2 = a1[3];
    if (v2)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
      dispatch_qos_class_t v3 = (void *)a1[3];
      if (v3 == a1)
      {
        (*(void (**)(void *))(*a1 + 32))(a1);
      }
      else if (v3)
      {
        (*(void (**)(void *))(*v3 + 40))(v3);
      }
      JUMPOUT(0x2166C4D20);
    }
    sub_21573D7DC();
  }
  abort();
}

void sub_215D0AB4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215D0AB64((void **)va);
  _Unwind_Resume(a1);
}

void **sub_215D0AB64(void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    dispatch_qos_class_t v3 = (void *)v2[3];
    if (v3 == v2)
    {
      (*(void (**)(void *))(*v2 + 32))(v2);
    }
    else if (v3)
    {
      (*(void (**)(void *))(*v3 + 40))(v3);
    }
    MEMORY[0x2166C4D20](v2, 0x1020C40A5B76CDFLL);
  }
  return a1;
}

void sub_215D0AC0C()
{
}

void sub_215D0AD30(const char *a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, int a5@<W4>, OS_os_workgroup *a6@<X5>, NSObject **a7@<X8>)
{
  size_t v11 = sub_215D0A704(a2, a3, a4);
  if (a5)
  {
    size_t v12 = dispatch_queue_create(a1, 0);
    size_t v13 = sub_215D0AEBC(a1);
    dispatch_workloop_set_qos_class_floor();
    if (a6) {
      dispatch_workloop_set_os_workgroup(v13, a6);
    }
    dispatch_activate(v13);
    dispatch_set_target_queue(v12, v13);
    dispatch_release(v13);
  }
  else
  {
    size_t v12 = dispatch_queue_create(a1, v11);
  }
  *a7 = v12;
  a7[1] = sub_215D0A7A0;
}

void sub_215D0AE20(const char *a1@<X0>, OS_os_workgroup *a2@<X3>, NSObject **a3@<X8>)
{
  uint64_t v6 = dispatch_queue_create(a1, 0);
  uint64_t v7 = sub_215D0AEBC(a1);
  dispatch_workloop_set_scheduler_priority();
  if (a2) {
    dispatch_workloop_set_os_workgroup(v7, a2);
  }
  dispatch_activate(v7);
  dispatch_set_target_queue(v6, v7);
  dispatch_release(v7);
  *a3 = v6;
  a3[1] = sub_215D0A7A0;
}

dispatch_workloop_t sub_215D0AEBC(const char *a1)
{
  size_t v2 = strlen(a1);
  if (v2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  std::string::size_type v3 = v2;
  if (v2 >= 0x17)
  {
    uint64_t v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v5 = v2 | 7;
    }
    uint64_t v6 = v5 + 1;
    p_dsint t = (std::string *)operator new(v5 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v6 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v2;
  p_dsint t = &__dst;
  if (v2) {
LABEL_8:
  }
    memcpy(p_dst, a1, v3);
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  uint64_t v7 = std::string::append(&__dst, ".workloop", 9uLL);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  int64_t v14 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (v14 >= 0) {
    size_t v9 = __p;
  }
  else {
    size_t v9 = (void **)__p[0];
  }
  dispatch_workloop_t result = dispatch_workloop_create_inactive((const char *)v9);
  dispatch_workloop_t v11 = result;
  if (SHIBYTE(v14) < 0)
  {
    operator delete(__p[0]);
    return v11;
  }
  return result;
}

void sub_215D0AFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215D0B004(void *a1, uint64_t *a2)
{
  v9[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  v8[1] = *a2;
  v8[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  v8[0] = sub_215D0C830;
  if (v8 == a1)
  {
    uint64_t v6 = sub_215D0C830;
LABEL_10:
    v6(0, v8, 0, 0, 0);
    return a1;
  }
  uint64_t v5 = (void (*)(uint64_t, void *, void *, void, void))*a1;
  if (!*a1)
  {
    a1[1] = v3;
    a1[2] = v4;
    *a1 = sub_215D0C830;
    return a1;
  }
  v9[0] = 0;
  v9[1] = 0;
  v5(2, a1, v9, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v8[0])(2, v8, a1, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v9[0])(2, v9, v8, 0, 0);
  if (v9[0]) {
    ((void (*)(void, void *, void, void, void))v9[0])(0, v9, 0, 0, 0);
  }
  uint64_t v6 = (void *(*)(unsigned int, void *, void *, uint64_t, void *))v8[0];
  if (v8[0]) {
    goto LABEL_10;
  }
  return a1;
}

void sub_215D0B160(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_215731D80(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_215D0B178(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (char *)operator new(0x38uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_26C683948;
  *(_OWORD *)(v4 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(void *)a1 = v4 + 24;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v5 = (char *)operator new(0x30uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)uint64_t v5 = &unk_26C6839F8;
  *(_OWORD *)(v5 + 24) = *(_OWORD *)a2;
  *((void *)v5 + 5) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v10 = v5 + 24;
  dispatch_workloop_t v11 = (std::__shared_weak_count *)v5;
  sub_215D0B334(*(void **)a1, (uint64_t *)&v10);
  uint64_t v6 = *((void *)v5 + 3);
  uint64_t v7 = *((void *)v5 + 4);
  if (!v6
    && v7
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  *(void *)(a1 + 16) = v7 - v6;
  *(void *)(a1 + 24) = v6;
  long long v8 = v11;
  if (!v11 || atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_215D0B300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215733368((uint64_t)&a9);
  sub_215733368(v9);
  _Unwind_Resume(a1);
}

void sub_215D0B320(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void *sub_215D0B334(void *a1, uint64_t *a2)
{
  v9[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  v8[1] = *a2;
  v8[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  v8[0] = sub_215D0CA68;
  if (v8 == a1)
  {
    uint64_t v6 = sub_215D0CA68;
LABEL_10:
    v6(0, v8, 0, 0, 0);
    return a1;
  }
  uint64_t v5 = (void (*)(uint64_t, void *, void *, void, void))*a1;
  if (!*a1)
  {
    a1[1] = v3;
    a1[2] = v4;
    *a1 = sub_215D0CA68;
    return a1;
  }
  v9[0] = 0;
  v9[1] = 0;
  v5(2, a1, v9, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v8[0])(2, v8, a1, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v9[0])(2, v9, v8, 0, 0);
  if (v9[0]) {
    ((void (*)(void, void *, void, void, void))v9[0])(0, v9, 0, 0, 0);
  }
  uint64_t v6 = (void *(*)(unsigned int, void *, void *, uint64_t, void *))v8[0];
  if (v8[0]) {
    goto LABEL_10;
  }
  return a1;
}

void sub_215D0B490(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_215731D80(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_215D0B4A8(void *a1, uint64_t *a2)
{
  v9[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  v8[1] = *a2;
  v8[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  v8[0] = sub_215D0CCA0;
  if (v8 == a1)
  {
    uint64_t v6 = sub_215D0CCA0;
LABEL_10:
    v6(0, v8, 0, 0, 0);
    return a1;
  }
  uint64_t v5 = (void (*)(uint64_t, void *, void *, void, void))*a1;
  if (!*a1)
  {
    a1[1] = v3;
    a1[2] = v4;
    *a1 = sub_215D0CCA0;
    return a1;
  }
  v9[0] = 0;
  v9[1] = 0;
  v5(2, a1, v9, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v8[0])(2, v8, a1, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v9[0])(2, v9, v8, 0, 0);
  if (v9[0]) {
    ((void (*)(void, void *, void, void, void))v9[0])(0, v9, 0, 0, 0);
  }
  uint64_t v6 = (void *(*)(unsigned int, void *, void *, uint64_t, void *))v8[0];
  if (v8[0]) {
    goto LABEL_10;
  }
  return a1;
}

void sub_215D0B604(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_215731D80(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_215D0B61C(void *a1, uint64_t *a2)
{
  v9[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  v8[1] = *a2;
  v8[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  v8[0] = sub_215D0CED8;
  if (v8 == a1)
  {
    uint64_t v6 = sub_215D0CED8;
LABEL_10:
    v6(0, v8, 0, 0, 0);
    return a1;
  }
  uint64_t v5 = (void (*)(uint64_t, void *, void *, void, void))*a1;
  if (!*a1)
  {
    a1[1] = v3;
    a1[2] = v4;
    *a1 = sub_215D0CED8;
    return a1;
  }
  v9[0] = 0;
  v9[1] = 0;
  v5(2, a1, v9, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v8[0])(2, v8, a1, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v9[0])(2, v9, v8, 0, 0);
  if (v9[0]) {
    ((void (*)(void, void *, void, void, void))v9[0])(0, v9, 0, 0, 0);
  }
  uint64_t v6 = (void *(*)(unsigned int, void *, void *, uint64_t, void *))v8[0];
  if (v8[0]) {
    goto LABEL_10;
  }
  return a1;
}

void sub_215D0B778(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_215731D80(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_215D0B790(void *a1, uint64_t *a2)
{
  v9[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  v8[1] = *a2;
  v8[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  v8[0] = sub_215D0D110;
  if (v8 == a1)
  {
    uint64_t v6 = sub_215D0D110;
LABEL_10:
    v6(0, v8, 0, 0, 0);
    return a1;
  }
  uint64_t v5 = (void (*)(uint64_t, void *, void *, void, void))*a1;
  if (!*a1)
  {
    a1[1] = v3;
    a1[2] = v4;
    *a1 = sub_215D0D110;
    return a1;
  }
  v9[0] = 0;
  v9[1] = 0;
  v5(2, a1, v9, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v8[0])(2, v8, a1, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v9[0])(2, v9, v8, 0, 0);
  if (v9[0]) {
    ((void (*)(void, void *, void, void, void))v9[0])(0, v9, 0, 0, 0);
  }
  uint64_t v6 = (void *(*)(unsigned int, void *, void *, uint64_t, void *))v8[0];
  if (v8[0]) {
    goto LABEL_10;
  }
  return a1;
}

void sub_215D0B8EC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_215731D80(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_215D0B904(void *a1, uint64_t *a2)
{
  v9[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  v8[1] = *a2;
  v8[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  v8[0] = sub_215D0D348;
  if (v8 == a1)
  {
    uint64_t v6 = sub_215D0D348;
LABEL_10:
    v6(0, v8, 0, 0, 0);
    return a1;
  }
  uint64_t v5 = (void (*)(uint64_t, void *, void *, void, void))*a1;
  if (!*a1)
  {
    a1[1] = v3;
    a1[2] = v4;
    *a1 = sub_215D0D348;
    return a1;
  }
  v9[0] = 0;
  v9[1] = 0;
  v5(2, a1, v9, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v8[0])(2, v8, a1, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v9[0])(2, v9, v8, 0, 0);
  if (v9[0]) {
    ((void (*)(void, void *, void, void, void))v9[0])(0, v9, 0, 0, 0);
  }
  uint64_t v6 = (void *(*)(unsigned int, void *, void *, uint64_t, void *))v8[0];
  if (v8[0]) {
    goto LABEL_10;
  }
  return a1;
}

void sub_215D0BA60(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_215731D80(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_215D0BA78(void *a1, uint64_t *a2)
{
  v9[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  v8[1] = *a2;
  v8[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  v8[0] = sub_215D0D580;
  if (v8 == a1)
  {
    uint64_t v6 = sub_215D0D580;
LABEL_10:
    v6(0, v8, 0, 0, 0);
    return a1;
  }
  uint64_t v5 = (void (*)(uint64_t, void *, void *, void, void))*a1;
  if (!*a1)
  {
    a1[1] = v3;
    a1[2] = v4;
    *a1 = sub_215D0D580;
    return a1;
  }
  v9[0] = 0;
  v9[1] = 0;
  v5(2, a1, v9, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v8[0])(2, v8, a1, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v9[0])(2, v9, v8, 0, 0);
  if (v9[0]) {
    ((void (*)(void, void *, void, void, void))v9[0])(0, v9, 0, 0, 0);
  }
  uint64_t v6 = (void *(*)(unsigned int, void *, void *, uint64_t, void *))v8[0];
  if (v8[0]) {
    goto LABEL_10;
  }
  return a1;
}

void sub_215D0BBD4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_215731D80(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_215D0BBEC(void *a1, uint64_t *a2)
{
  v9[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  v8[1] = *a2;
  v8[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  v8[0] = sub_215D0D7B8;
  if (v8 == a1)
  {
    uint64_t v6 = sub_215D0D7B8;
LABEL_10:
    v6(0, v8, 0, 0, 0);
    return a1;
  }
  uint64_t v5 = (void (*)(uint64_t, void *, void *, void, void))*a1;
  if (!*a1)
  {
    a1[1] = v3;
    a1[2] = v4;
    *a1 = sub_215D0D7B8;
    return a1;
  }
  v9[0] = 0;
  v9[1] = 0;
  v5(2, a1, v9, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v8[0])(2, v8, a1, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v9[0])(2, v9, v8, 0, 0);
  if (v9[0]) {
    ((void (*)(void, void *, void, void, void))v9[0])(0, v9, 0, 0, 0);
  }
  uint64_t v6 = (void *(*)(unsigned int, void *, void *, uint64_t, void *))v8[0];
  if (v8[0]) {
    goto LABEL_10;
  }
  return a1;
}

void sub_215D0BD48(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_215731D80(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_215D0BD60(void *a1, uint64_t *a2)
{
  v9[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  v8[1] = *a2;
  v8[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  v8[0] = sub_215D0D9F0;
  if (v8 == a1)
  {
    uint64_t v6 = sub_215D0D9F0;
LABEL_10:
    v6(0, v8, 0, 0, 0);
    return a1;
  }
  uint64_t v5 = (void (*)(uint64_t, void *, void *, void, void))*a1;
  if (!*a1)
  {
    a1[1] = v3;
    a1[2] = v4;
    *a1 = sub_215D0D9F0;
    return a1;
  }
  v9[0] = 0;
  v9[1] = 0;
  v5(2, a1, v9, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v8[0])(2, v8, a1, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v9[0])(2, v9, v8, 0, 0);
  if (v9[0]) {
    ((void (*)(void, void *, void, void, void))v9[0])(0, v9, 0, 0, 0);
  }
  uint64_t v6 = (void *(*)(unsigned int, void *, void *, uint64_t, void *))v8[0];
  if (v8[0]) {
    goto LABEL_10;
  }
  return a1;
}

void sub_215D0BEBC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_215731D80(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_215D0BED4(void *a1, uint64_t *a2)
{
  v9[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  v8[1] = *a2;
  v8[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  v8[0] = sub_215D0DC28;
  if (v8 == a1)
  {
    uint64_t v6 = sub_215D0DC28;
LABEL_10:
    v6(0, v8, 0, 0, 0);
    return a1;
  }
  uint64_t v5 = (void (*)(uint64_t, void *, void *, void, void))*a1;
  if (!*a1)
  {
    a1[1] = v3;
    a1[2] = v4;
    *a1 = sub_215D0DC28;
    return a1;
  }
  v9[0] = 0;
  v9[1] = 0;
  v5(2, a1, v9, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v8[0])(2, v8, a1, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v9[0])(2, v9, v8, 0, 0);
  if (v9[0]) {
    ((void (*)(void, void *, void, void, void))v9[0])(0, v9, 0, 0, 0);
  }
  uint64_t v6 = (void *(*)(unsigned int, void *, void *, uint64_t, void *))v8[0];
  if (v8[0]) {
    goto LABEL_10;
  }
  return a1;
}

void sub_215D0C030(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_215731D80(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_215D0C048(void *a1, void (**a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  long long v8 = (char *)operator new(0x38uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)long long v8 = &unk_26C683948;
  *(_OWORD *)(v8 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *a1 = v8 + 24;
  a1[1] = v8;
  a1[2] = 0;
  a1[3] = 0;
  sub_2158281D0((void *)v8 + 3, a2);
  if (!a4
    && a3
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  a1[2] = a3;
  a1[3] = a4;
  return a1;
}

void sub_215D0C11C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void *sub_215D0C170(void *a1, void (**a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  long long v8 = (char *)operator new(0x38uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)long long v8 = &unk_26C683948;
  *(_OWORD *)(v8 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *a1 = v8 + 24;
  a1[1] = v8;
  a1[2] = 0;
  a1[3] = 0;
  sub_2158281D0((void *)v8 + 3, a2);
  if (!a4
    && a3
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  a1[2] = a3;
  a1[3] = a4;
  return a1;
}

void sub_215D0C244(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void *sub_215D0C298(void *a1, uint64_t a2)
{
  LOBYTE(v25[0]) = 123;
  uint64_t v3 = sub_215731D94(a1, (uint64_t)v25, 1);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v5) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215D0DDD0((uint64_t)v25);
  uint64_t v7 = v25[0];
  *(_DWORD *)((char *)&v25[1] + *(void *)(v25[0] - 24)) = *(_DWORD *)((unsigned char *)&v25[1] + *(void *)(v25[0] - 24)) & 0xFFFFFFB5 | 8;
  long long v8 = (char *)v25 + *(void *)(v7 - 24);
  if (*((_DWORD *)v8 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(v7 - 24)));
    uint64_t v9 = std::locale::use_facet(&v35, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 32);
    std::locale::~locale(&v35);
    *((_DWORD *)v8 + 36) = 48;
    if (!v5) {
      goto LABEL_14;
    }
  }
  else
  {
    *((_DWORD *)v8 + 36) = 48;
    if (!v5) {
      goto LABEL_14;
    }
  }
  for (uint64_t i = v5 - 1; ; --i)
  {
    *(void *)((char *)v26 + *(void *)(v25[0] - 24)) = 2;
    std::ostream::operator<<();
    if (!i) {
      break;
    }
    *(void *)((char *)v26 + *(void *)(v25[0] - 24)) = 1;
    LOBYTE(v35.__locale_) = 32;
    sub_215731D94(v25, (uint64_t)&v35, 1);
    ++v4;
  }
LABEL_14:
  if ((v33 & 0x10) != 0)
  {
    unint64_t v13 = v32;
    if (v32 < v29)
    {
      unint64_t v32 = v29;
      unint64_t v13 = v29;
    }
    int64_t v14 = v28;
    size_t v11 = v13 - (void)v28;
    if (v13 - (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_39;
    }
  }
  else
  {
    if ((v33 & 8) == 0)
    {
      size_t v11 = 0;
      HIBYTE(v24) = 0;
      p_dsint t = (void **)&__dst;
      goto LABEL_27;
    }
    int64_t v14 = (const void *)v26[0];
    size_t v11 = v27 - v26[0];
    if ((unint64_t)(v27 - v26[0]) >= 0x7FFFFFFFFFFFFFF8) {
LABEL_39:
    }
      sub_215731CD8();
  }
  if (v11 >= 0x17)
  {
    uint64_t v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v15 = v11 | 7;
    }
    uint64_t v16 = v15 + 1;
    p_dsint t = (void **)operator new(v15 + 1);
    size_t v23 = v11;
    int64_t v24 = v16 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_26;
  }
  HIBYTE(v24) = v11;
  p_dsint t = (void **)&__dst;
  if (v11) {
LABEL_26:
  }
    memmove(p_dst, v14, v11);
LABEL_27:
  *((unsigned char *)p_dst + v11) = 0;
  v25[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v25 + *(void *)(v25[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v25[1] = MEMORY[0x263F8C318] + 16;
  if (v31 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2166C4BF0](&v34);
  if (v24 >= 0) {
    size_t v17 = (void **)&__dst;
  }
  else {
    size_t v17 = __dst;
  }
  if (v24 >= 0) {
    uint64_t v18 = HIBYTE(v24);
  }
  else {
    uint64_t v18 = v23;
  }
  int v19 = sub_215731D94(v3, (uint64_t)v17, v18);
  LOBYTE(v25[0]) = 125;
  uint64_t v20 = sub_215731D94(v19, (uint64_t)v25, 1);
  if (SHIBYTE(v24) < 0) {
    operator delete(__dst);
  }
  return v20;
}

void sub_215D0C6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void sub_215D0C6F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C683948;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D0C710(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C683948;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D0C764(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void, uint64_t, void, void, void))(result + 24);
  if (v1) {
    return v1(0, result + 24, 0, 0, 0);
  }
  return result;
}

void sub_215D0C7A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C683998;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D0C7C0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C683998;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215D0C814(uint64_t a1)
{
  size_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void *sub_215D0C830(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  dispatch_workloop_t result = &unk_26C6839D8;
  switch(v5)
  {
    case 1:
      uint64_t v9 = a2[2];
      a3[1] = a2[1];
      a3[2] = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      dispatch_workloop_t result = 0;
      *a3 = sub_215D0C830;
      return result;
    case 2:
      dispatch_workloop_t result = 0;
      *(_OWORD *)(a3 + 1) = *(_OWORD *)(a2 + 1);
      a2[1] = 0;
      a2[2] = 0;
      *a3 = sub_215D0C830;
      *a2 = 0;
      return result;
    case 3:
      if (a4)
      {
        uint64_t v10 = *(void *)(a4 + 8);
        if (v10 != 0x8000000215EF74E6)
        {
          if (((v10 & 0x8000000215EF74E6 & 0x8000000000000000) != 0) == __OFSUB__(v10, 0x8000000215EF74E6)) {
            return 0;
          }
          if (strcmp((const char *)(v10 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000215EF74E6 & 0x7FFFFFFFFFFFFFFFLL)))
          {
            return 0;
          }
        }
      }
      else if (a5 != &unk_215EF751C)
      {
        return 0;
      }
      return a2 + 1;
    case 4:
      return result;
    default:
      long long v8 = (std::__shared_weak_count *)a2[2];
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      dispatch_workloop_t result = 0;
      *a2 = 0;
      return result;
  }
}

void sub_215D0C9D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6839F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D0C9F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6839F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215D0CA4C(uint64_t a1)
{
  size_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void *sub_215D0CA68(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  dispatch_workloop_t result = &unk_26C683A38;
  switch(v5)
  {
    case 1:
      uint64_t v9 = a2[2];
      a3[1] = a2[1];
      a3[2] = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      dispatch_workloop_t result = 0;
      *a3 = sub_215D0CA68;
      return result;
    case 2:
      dispatch_workloop_t result = 0;
      *(_OWORD *)(a3 + 1) = *(_OWORD *)(a2 + 1);
      a2[1] = 0;
      a2[2] = 0;
      *a3 = sub_215D0CA68;
      *a2 = 0;
      return result;
    case 3:
      if (a4)
      {
        uint64_t v10 = *(void *)(a4 + 8);
        if (v10 != 0x8000000215EF756ALL)
        {
          if (((v10 & 0x8000000215EF756ALL & 0x8000000000000000) != 0) == __OFSUB__(v10, 0x8000000215EF756ALL)) {
            return 0;
          }
          if (strcmp((const char *)(v10 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000215EF756ALL & 0x7FFFFFFFFFFFFFFFLL)))
          {
            return 0;
          }
        }
      }
      else if (a5 != &unk_215EF75A0)
      {
        return 0;
      }
      return a2 + 1;
    case 4:
      return result;
    default:
      long long v8 = (std::__shared_weak_count *)a2[2];
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      dispatch_workloop_t result = 0;
      *a2 = 0;
      return result;
  }
}

void sub_215D0CC10(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C683A58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D0CC30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C683A58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215D0CC84(uint64_t a1)
{
  size_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void *sub_215D0CCA0(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  dispatch_workloop_t result = &unk_26C683A98;
  switch(v5)
  {
    case 1:
      uint64_t v9 = a2[2];
      a3[1] = a2[1];
      a3[2] = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      dispatch_workloop_t result = 0;
      *a3 = sub_215D0CCA0;
      return result;
    case 2:
      dispatch_workloop_t result = 0;
      *(_OWORD *)(a3 + 1) = *(_OWORD *)(a2 + 1);
      a2[1] = 0;
      a2[2] = 0;
      *a3 = sub_215D0CCA0;
      *a2 = 0;
      return result;
    case 3:
      if (a4)
      {
        uint64_t v10 = *(void *)(a4 + 8);
        if (v10 != 0x8000000215EF75EELL)
        {
          if (((v10 & 0x8000000215EF75EELL & 0x8000000000000000) != 0) == __OFSUB__(v10, 0x8000000215EF75EELL)) {
            return 0;
          }
          if (strcmp((const char *)(v10 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000215EF75EELL & 0x7FFFFFFFFFFFFFFFLL)))
          {
            return 0;
          }
        }
      }
      else if (a5 != &unk_215EF7624)
      {
        return 0;
      }
      return a2 + 1;
    case 4:
      return result;
    default:
      long long v8 = (std::__shared_weak_count *)a2[2];
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      dispatch_workloop_t result = 0;
      *a2 = 0;
      return result;
  }
}

void sub_215D0CE48(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C683AB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D0CE68(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C683AB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215D0CEBC(uint64_t a1)
{
  size_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void *sub_215D0CED8(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  dispatch_workloop_t result = &unk_26C683AF8;
  switch(v5)
  {
    case 1:
      uint64_t v9 = a2[2];
      a3[1] = a2[1];
      a3[2] = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      dispatch_workloop_t result = 0;
      *a3 = sub_215D0CED8;
      return result;
    case 2:
      dispatch_workloop_t result = 0;
      *(_OWORD *)(a3 + 1) = *(_OWORD *)(a2 + 1);
      a2[1] = 0;
      a2[2] = 0;
      *a3 = sub_215D0CED8;
      *a2 = 0;
      return result;
    case 3:
      if (a4)
      {
        uint64_t v10 = *(void *)(a4 + 8);
        if (v10 != 0x8000000215EF7672)
        {
          if (((v10 & 0x8000000215EF7672 & 0x8000000000000000) != 0) == __OFSUB__(v10, 0x8000000215EF7672)) {
            return 0;
          }
          if (strcmp((const char *)(v10 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000215EF7672 & 0x7FFFFFFFFFFFFFFFLL)))
          {
            return 0;
          }
        }
      }
      else if (a5 != &unk_215EF76A8)
      {
        return 0;
      }
      return a2 + 1;
    case 4:
      return result;
    default:
      long long v8 = (std::__shared_weak_count *)a2[2];
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      dispatch_workloop_t result = 0;
      *a2 = 0;
      return result;
  }
}

void sub_215D0D080(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C683B18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D0D0A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C683B18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215D0D0F4(uint64_t a1)
{
  size_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void *sub_215D0D110(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  dispatch_workloop_t result = &unk_26C683B58;
  switch(v5)
  {
    case 1:
      uint64_t v9 = a2[2];
      a3[1] = a2[1];
      a3[2] = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      dispatch_workloop_t result = 0;
      *a3 = sub_215D0D110;
      return result;
    case 2:
      dispatch_workloop_t result = 0;
      *(_OWORD *)(a3 + 1) = *(_OWORD *)(a2 + 1);
      a2[1] = 0;
      a2[2] = 0;
      *a3 = sub_215D0D110;
      *a2 = 0;
      return result;
    case 3:
      if (a4)
      {
        uint64_t v10 = *(void *)(a4 + 8);
        if (v10 != 0x8000000215EF76F6)
        {
          if (((v10 & 0x8000000215EF76F6 & 0x8000000000000000) != 0) == __OFSUB__(v10, 0x8000000215EF76F6)) {
            return 0;
          }
          if (strcmp((const char *)(v10 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000215EF76F6 & 0x7FFFFFFFFFFFFFFFLL)))
          {
            return 0;
          }
        }
      }
      else if (a5 != &unk_215EF772C)
      {
        return 0;
      }
      return a2 + 1;
    case 4:
      return result;
    default:
      long long v8 = (std::__shared_weak_count *)a2[2];
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      dispatch_workloop_t result = 0;
      *a2 = 0;
      return result;
  }
}

void sub_215D0D2B8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C683B78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D0D2D8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C683B78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215D0D32C(uint64_t a1)
{
  size_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void *sub_215D0D348(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  dispatch_workloop_t result = &unk_26C683BB8;
  switch(v5)
  {
    case 1:
      uint64_t v9 = a2[2];
      a3[1] = a2[1];
      a3[2] = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      dispatch_workloop_t result = 0;
      *a3 = sub_215D0D348;
      return result;
    case 2:
      dispatch_workloop_t result = 0;
      *(_OWORD *)(a3 + 1) = *(_OWORD *)(a2 + 1);
      a2[1] = 0;
      a2[2] = 0;
      *a3 = sub_215D0D348;
      *a2 = 0;
      return result;
    case 3:
      if (a4)
      {
        uint64_t v10 = *(void *)(a4 + 8);
        if (v10 != 0x8000000215EF777ALL)
        {
          if (((v10 & 0x8000000215EF777ALL & 0x8000000000000000) != 0) == __OFSUB__(v10, 0x8000000215EF777ALL)) {
            return 0;
          }
          if (strcmp((const char *)(v10 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000215EF777ALL & 0x7FFFFFFFFFFFFFFFLL)))
          {
            return 0;
          }
        }
      }
      else if (a5 != &unk_215EF77B0)
      {
        return 0;
      }
      return a2 + 1;
    case 4:
      return result;
    default:
      long long v8 = (std::__shared_weak_count *)a2[2];
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      dispatch_workloop_t result = 0;
      *a2 = 0;
      return result;
  }
}

void sub_215D0D4F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C683BD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D0D510(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C683BD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215D0D564(uint64_t a1)
{
  size_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void *sub_215D0D580(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  dispatch_workloop_t result = &unk_26C683C18;
  switch(v5)
  {
    case 1:
      uint64_t v9 = a2[2];
      a3[1] = a2[1];
      a3[2] = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      dispatch_workloop_t result = 0;
      *a3 = sub_215D0D580;
      return result;
    case 2:
      dispatch_workloop_t result = 0;
      *(_OWORD *)(a3 + 1) = *(_OWORD *)(a2 + 1);
      a2[1] = 0;
      a2[2] = 0;
      *a3 = sub_215D0D580;
      *a2 = 0;
      return result;
    case 3:
      if (a4)
      {
        uint64_t v10 = *(void *)(a4 + 8);
        if (v10 != 0x8000000215EF77FELL)
        {
          if (((v10 & 0x8000000215EF77FELL & 0x8000000000000000) != 0) == __OFSUB__(v10, 0x8000000215EF77FELL)) {
            return 0;
          }
          if (strcmp((const char *)(v10 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000215EF77FELL & 0x7FFFFFFFFFFFFFFFLL)))
          {
            return 0;
          }
        }
      }
      else if (a5 != &unk_215EF7834)
      {
        return 0;
      }
      return a2 + 1;
    case 4:
      return result;
    default:
      long long v8 = (std::__shared_weak_count *)a2[2];
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      dispatch_workloop_t result = 0;
      *a2 = 0;
      return result;
  }
}

void sub_215D0D728(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C683C38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D0D748(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C683C38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215D0D79C(uint64_t a1)
{
  size_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void *sub_215D0D7B8(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  dispatch_workloop_t result = &unk_26C683C78;
  switch(v5)
  {
    case 1:
      uint64_t v9 = a2[2];
      a3[1] = a2[1];
      a3[2] = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      dispatch_workloop_t result = 0;
      *a3 = sub_215D0D7B8;
      return result;
    case 2:
      dispatch_workloop_t result = 0;
      *(_OWORD *)(a3 + 1) = *(_OWORD *)(a2 + 1);
      a2[1] = 0;
      a2[2] = 0;
      *a3 = sub_215D0D7B8;
      *a2 = 0;
      return result;
    case 3:
      if (a4)
      {
        uint64_t v10 = *(void *)(a4 + 8);
        if (v10 != 0x8000000215EF7882)
        {
          if (((v10 & 0x8000000215EF7882 & 0x8000000000000000) != 0) == __OFSUB__(v10, 0x8000000215EF7882)) {
            return 0;
          }
          if (strcmp((const char *)(v10 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000215EF7882 & 0x7FFFFFFFFFFFFFFFLL)))
          {
            return 0;
          }
        }
      }
      else if (a5 != &unk_215EF78B8)
      {
        return 0;
      }
      return a2 + 1;
    case 4:
      return result;
    default:
      long long v8 = (std::__shared_weak_count *)a2[2];
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      dispatch_workloop_t result = 0;
      *a2 = 0;
      return result;
  }
}

void sub_215D0D960(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C683C98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D0D980(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C683C98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215D0D9D4(uint64_t a1)
{
  size_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void *sub_215D0D9F0(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  dispatch_workloop_t result = &unk_26C683CD8;
  switch(v5)
  {
    case 1:
      uint64_t v9 = a2[2];
      a3[1] = a2[1];
      a3[2] = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      dispatch_workloop_t result = 0;
      *a3 = sub_215D0D9F0;
      return result;
    case 2:
      dispatch_workloop_t result = 0;
      *(_OWORD *)(a3 + 1) = *(_OWORD *)(a2 + 1);
      a2[1] = 0;
      a2[2] = 0;
      *a3 = sub_215D0D9F0;
      *a2 = 0;
      return result;
    case 3:
      if (a4)
      {
        uint64_t v10 = *(void *)(a4 + 8);
        if (v10 != 0x8000000215EF7906)
        {
          if (((v10 & 0x8000000215EF7906 & 0x8000000000000000) != 0) == __OFSUB__(v10, 0x8000000215EF7906)) {
            return 0;
          }
          if (strcmp((const char *)(v10 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000215EF7906 & 0x7FFFFFFFFFFFFFFFLL)))
          {
            return 0;
          }
        }
      }
      else if (a5 != &unk_215EF793C)
      {
        return 0;
      }
      return a2 + 1;
    case 4:
      return result;
    default:
      long long v8 = (std::__shared_weak_count *)a2[2];
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      dispatch_workloop_t result = 0;
      *a2 = 0;
      return result;
  }
}

void sub_215D0DB98(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C683CF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D0DBB8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C683CF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215D0DC0C(uint64_t a1)
{
  size_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void *sub_215D0DC28(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  dispatch_workloop_t result = &unk_26C683D38;
  switch(v5)
  {
    case 1:
      uint64_t v9 = a2[2];
      a3[1] = a2[1];
      a3[2] = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      dispatch_workloop_t result = 0;
      *a3 = sub_215D0DC28;
      return result;
    case 2:
      dispatch_workloop_t result = 0;
      *(_OWORD *)(a3 + 1) = *(_OWORD *)(a2 + 1);
      a2[1] = 0;
      a2[2] = 0;
      *a3 = sub_215D0DC28;
      *a2 = 0;
      return result;
    case 3:
      if (a4)
      {
        uint64_t v10 = *(void *)(a4 + 8);
        if (v10 != 0x8000000215EF798ALL)
        {
          if (((v10 & 0x8000000215EF798ALL & 0x8000000000000000) != 0) == __OFSUB__(v10, 0x8000000215EF798ALL)) {
            return 0;
          }
          if (strcmp((const char *)(v10 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000215EF798ALL & 0x7FFFFFFFFFFFFFFFLL)))
          {
            return 0;
          }
        }
      }
      else if (a5 != &unk_215EF79C0)
      {
        return 0;
      }
      return a2 + 1;
    case 4:
      return result;
    default:
      long long v8 = (std::__shared_weak_count *)a2[2];
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      dispatch_workloop_t result = 0;
      *a2 = 0;
      return result;
  }
}

uint64_t sub_215D0DDD0(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_215D0DF40(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x2166C4BF0](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215D0DF74(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2166C4BF0](a1 + 112);
  return a1;
}

uint64_t sub_215D0E078(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if ((*(unsigned char *)(*(void *)a1 + 56) & 3) != 0
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return a1;
}

void sub_215D0E0FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215D0E150(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(void *)(*(void *)a1 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return a1;
}

void sub_215D0E1F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215D0E244()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_215D0E488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_215D0E520(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x2166C4D20](v2, 0x20C40960023A9);
  }
  return a1;
}

void sub_215D0E57C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D0E5B4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    uint64_t v2 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x2166C4D20);
  }
  return result;
}

uint64_t sub_215D0E618(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj2EEELm2EEENS_9allocatorIS8_EEEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj2EEELm2EEENS_9all"
                                "ocatorIS8_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj2EEELm2EEENS_9allocatorIS8_EEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj2EEELm2EEENS_9allocatorIS8_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void *sub_215D0E68C(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  dispatch_workloop_t result = &unk_26C683D98;
  switch(v5)
  {
    case 1:
      uint64_t v9 = a2[2];
      a3[1] = a2[1];
      a3[2] = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      dispatch_workloop_t result = 0;
      *a3 = sub_215D0E68C;
      return result;
    case 2:
      dispatch_workloop_t result = 0;
      *(_OWORD *)(a3 + 1) = *(_OWORD *)(a2 + 1);
      a2[1] = 0;
      a2[2] = 0;
      *a3 = sub_215D0E68C;
      *a2 = 0;
      return result;
    case 3:
      if (a4)
      {
        unint64_t v10 = *(void *)(a4 + 8);
        if ((char *)v10 != "NSt3__110shared_ptrINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj2EEELm2EEENS_9allocatorIS8_EEEEEE")
        {
          if (((v10 & (unint64_t)"NSt3__110shared_ptrINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj2EEELm2EEENS"
                                         "_9allocatorIS8_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v10, "NSt3__110shared_ptrINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj2EEELm2EEENS_9allocatorIS8_EEEEEE"))return 0;
          if (strcmp((const char *)(v10 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj2EEELm2EEENS_9allocatorIS8_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
          {
            return 0;
          }
        }
      }
      else if (a5 != &unk_215EF7B28)
      {
        return 0;
      }
      return a2 + 1;
    case 4:
      return result;
    default:
      long long v8 = (std::__shared_weak_count *)a2[2];
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      dispatch_workloop_t result = 0;
      *a2 = 0;
      return result;
  }
}

void sub_215D0E824()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_215D0EA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D0EB20(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D0EB58(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    uint64_t v2 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x2166C4D20);
  }
  return result;
}

uint64_t sub_215D0EBBC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj3EEELm2EEENS_9allocatorIS8_EEEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj3EEELm2EEENS_9all"
                                "ocatorIS8_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj3EEELm2EEENS_9allocatorIS8_EEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj3EEELm2EEENS_9allocatorIS8_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void *sub_215D0EC30(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  dispatch_workloop_t result = &unk_26C683DF8;
  switch(v5)
  {
    case 1:
      uint64_t v9 = a2[2];
      a3[1] = a2[1];
      a3[2] = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      dispatch_workloop_t result = 0;
      *a3 = sub_215D0EC30;
      return result;
    case 2:
      dispatch_workloop_t result = 0;
      *(_OWORD *)(a3 + 1) = *(_OWORD *)(a2 + 1);
      a2[1] = 0;
      a2[2] = 0;
      *a3 = sub_215D0EC30;
      *a2 = 0;
      return result;
    case 3:
      if (a4)
      {
        unint64_t v10 = *(void *)(a4 + 8);
        if ((char *)v10 != "NSt3__110shared_ptrINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj3EEELm2EEENS_9allocatorIS8_EEEEEE")
        {
          if (((v10 & (unint64_t)"NSt3__110shared_ptrINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj3EEELm2EEENS"
                                         "_9allocatorIS8_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v10, "NSt3__110shared_ptrINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj3EEELm2EEENS_9allocatorIS8_EEEEEE"))return 0;
          if (strcmp((const char *)(v10 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj3EEELm2EEENS_9allocatorIS8_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
          {
            return 0;
          }
        }
      }
      else if (a5 != &unk_215EF7C90)
      {
        return 0;
      }
      return a2 + 1;
    case 4:
      return result;
    default:
      long long v8 = (std::__shared_weak_count *)a2[2];
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      dispatch_workloop_t result = 0;
      *a2 = 0;
      return result;
  }
}

void *sub_215D0EDC8(int a1, unsigned __int8 **a2, void **a3)
{
  switch(a1)
  {
    case 0:
      unint64_t v4 = sub_215D15FDC(a2);
      unint64_t v5 = v4;
      uint64_t v7 = v6;
      if (!v6 && v4 >= 4)
      {
        if (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          long long v8 = *a3;
          goto LABEL_46;
        }
LABEL_100:
        abort();
      }
      long long v8 = *a3;
      if (v4 > 3)
      {
LABEL_46:
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215D0FD08(v8, v7);
        sub_215731D94(v8, (uint64_t)",", 1);
        sub_215D0FD08(v8, v7 + 2);
        sub_215731D94(v8, (uint64_t)"}", 1);
        if (v5 >> 2 != 1)
        {
          uint64_t v45 = &v7[4 * (v5 >> 2)];
          char v46 = v7 + 4;
          do
          {
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215731D94(v8, (uint64_t)"{", 1);
            sub_215D0FD08(v8, v46);
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215D0FD08(v8, v46 + 2);
            sub_215731D94(v8, (uint64_t)"}", 1);
            v46 += 4;
          }
          while (v46 != v45);
        }
LABEL_97:
        uint64_t v63 = "}";
        uint64_t v64 = v8;
        uint64_t v65 = 1;
        return sub_215731D94(v64, (uint64_t)v63, v65);
      }
      goto LABEL_91;
    case 1:
      unint64_t v9 = sub_215D160E4(a2);
      unint64_t v10 = v9;
      size_t v12 = v11;
      if (!v11 && v9 >= 4)
      {
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_100;
        }
        long long v8 = *a3;
LABEL_51:
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215D0FFF8(v8, v12);
        sub_215731D94(v8, (uint64_t)",", 1);
        sub_215D0FFF8(v8, v12 + 2);
        sub_215731D94(v8, (uint64_t)"}", 1);
        if (v10 >> 2 != 1)
        {
          uint64_t v47 = &v12[4 * (v10 >> 2)];
          uint64_t v48 = v12 + 4;
          do
          {
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215731D94(v8, (uint64_t)"{", 1);
            sub_215D0FFF8(v8, v48);
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215D0FFF8(v8, v48 + 2);
            sub_215731D94(v8, (uint64_t)"}", 1);
            v48 += 4;
          }
          while (v48 != v47);
        }
        goto LABEL_97;
      }
      long long v8 = *a3;
      if (v9 > 3) {
        goto LABEL_51;
      }
      goto LABEL_91;
    case 2:
      unint64_t v13 = sub_215D161EC(a2);
      unint64_t v14 = v13;
      uint64_t v16 = v15;
      if (!v15 && v13 >= 4)
      {
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_100;
        }
        long long v8 = *a3;
LABEL_56:
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215B65F80(v8, v16);
        sub_215731D94(v8, (uint64_t)",", 1);
        sub_215B65F80(v8, v16 + 2);
        sub_215731D94(v8, (uint64_t)"}", 1);
        if (v14 >> 2 != 1)
        {
          float v49 = &v16[4 * (v14 >> 2)];
          unsigned int v50 = v16 + 4;
          do
          {
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215731D94(v8, (uint64_t)"{", 1);
            sub_215B65F80(v8, v50);
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215B65F80(v8, v50 + 2);
            sub_215731D94(v8, (uint64_t)"}", 1);
            v50 += 4;
          }
          while (v50 != v49);
        }
        goto LABEL_97;
      }
      long long v8 = *a3;
      if (v13 > 3) {
        goto LABEL_56;
      }
      goto LABEL_91;
    case 3:
      unint64_t v17 = sub_215D162F4(a2);
      unint64_t v18 = v17;
      uint64_t v20 = v19;
      if (!v19 && v17 >= 4)
      {
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_100;
        }
        long long v8 = *a3;
LABEL_61:
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215D102E8(v8, v20);
        sub_215731D94(v8, (uint64_t)",", 1);
        sub_215D102E8(v8, v20 + 2);
        sub_215731D94(v8, (uint64_t)"}", 1);
        if (v18 >> 2 != 1)
        {
          BOOL v51 = &v20[4 * (v18 >> 2)];
          uint64_t v52 = v20 + 4;
          do
          {
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215731D94(v8, (uint64_t)"{", 1);
            sub_215D102E8(v8, v52);
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215D102E8(v8, v52 + 2);
            sub_215731D94(v8, (uint64_t)"}", 1);
            v52 += 4;
          }
          while (v52 != v51);
        }
        goto LABEL_97;
      }
      long long v8 = *a3;
      if (v17 > 3) {
        goto LABEL_61;
      }
      goto LABEL_91;
    case 5:
      unint64_t v21 = sub_215D15F58(a2);
      unint64_t v22 = v21;
      int64_t v24 = v23;
      if (!v23 && v21 >= 4)
      {
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_100;
        }
        long long v8 = *a3;
LABEL_66:
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215D105D8(v8, v24);
        sub_215731D94(v8, (uint64_t)",", 1);
        sub_215D105D8(v8, v24 + 2);
        sub_215731D94(v8, (uint64_t)"}", 1);
        if (v22 >> 2 != 1)
        {
          uint64_t v53 = &v24[4 * (v22 >> 2)];
          unint64_t v54 = v24 + 4;
          do
          {
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215731D94(v8, (uint64_t)"{", 1);
            sub_215D105D8(v8, v54);
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215D105D8(v8, v54 + 2);
            sub_215731D94(v8, (uint64_t)"}", 1);
            v54 += 4;
          }
          while (v54 != v53);
        }
        goto LABEL_97;
      }
      long long v8 = *a3;
      if (v21 > 3) {
        goto LABEL_66;
      }
      goto LABEL_91;
    case 6:
      unint64_t v25 = sub_215D16060(a2);
      unint64_t v26 = v25;
      size_t v28 = v27;
      if (!v27 && v25 >= 4)
      {
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_100;
        }
        long long v8 = *a3;
LABEL_71:
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215D108C8(v8, v28);
        sub_215731D94(v8, (uint64_t)",", 1);
        sub_215D108C8(v8, v28 + 2);
        sub_215731D94(v8, (uint64_t)"}", 1);
        if (v26 >> 2 != 1)
        {
          unint64_t v55 = &v28[4 * (v26 >> 2)];
          size_t v56 = v28 + 4;
          do
          {
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215731D94(v8, (uint64_t)"{", 1);
            sub_215D108C8(v8, v56);
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215D108C8(v8, v56 + 2);
            sub_215731D94(v8, (uint64_t)"}", 1);
            v56 += 4;
          }
          while (v56 != v55);
        }
        goto LABEL_97;
      }
      long long v8 = *a3;
      if (v25 > 3) {
        goto LABEL_71;
      }
      goto LABEL_91;
    case 7:
      unint64_t v29 = sub_215D16168(a2);
      unint64_t v30 = v29;
      unint64_t v32 = v31;
      if (!v31 && v29 >= 4)
      {
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_100;
        }
        long long v8 = *a3;
LABEL_76:
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215D10BB8(v8, v32);
        sub_215731D94(v8, (uint64_t)",", 1);
        sub_215D10BB8(v8, v32 + 2);
        sub_215731D94(v8, (uint64_t)"}", 1);
        if (v30 >> 2 != 1)
        {
          unint64_t v57 = &v32[4 * (v30 >> 2)];
          int64_t v58 = v32 + 4;
          do
          {
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215731D94(v8, (uint64_t)"{", 1);
            sub_215D10BB8(v8, v58);
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215D10BB8(v8, v58 + 2);
            sub_215731D94(v8, (uint64_t)"}", 1);
            v58 += 4;
          }
          while (v58 != v57);
        }
        goto LABEL_97;
      }
      long long v8 = *a3;
      if (v29 > 3) {
        goto LABEL_76;
      }
      goto LABEL_91;
    case 8:
      unint64_t v33 = sub_215D16270(a2);
      unint64_t v34 = v33;
      char v36 = v35;
      if (!v35 && v33 >= 4)
      {
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_100;
        }
        long long v8 = *a3;
LABEL_81:
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215D10EA8(v8, v36);
        sub_215731D94(v8, (uint64_t)",", 1);
        sub_215D10EA8(v8, v36 + 2);
        sub_215731D94(v8, (uint64_t)"}", 1);
        if (v34 >> 2 != 1)
        {
          unint64_t v59 = &v36[4 * (v34 >> 2)];
          char v60 = v36 + 4;
          do
          {
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215731D94(v8, (uint64_t)"{", 1);
            sub_215D10EA8(v8, v60);
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215D10EA8(v8, v60 + 2);
            sub_215731D94(v8, (uint64_t)"}", 1);
            v60 += 4;
          }
          while (v60 != v59);
        }
        goto LABEL_97;
      }
      long long v8 = *a3;
      if (v33 > 3) {
        goto LABEL_81;
      }
      goto LABEL_91;
    case 11:
      unint64_t v37 = sub_215D16378(a2);
      unint64_t v38 = v37;
      uint64_t v40 = v39;
      if (!v39 && v37 >= 4)
      {
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_100;
        }
        long long v8 = *a3;
LABEL_86:
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215D11198(v8, v40);
        sub_215731D94(v8, (uint64_t)",", 1);
        sub_215D11198(v8, v40 + 2);
        sub_215731D94(v8, (uint64_t)"}", 1);
        if (v38 >> 2 != 1)
        {
          std::string v61 = &v40[4 * (v38 >> 2)];
          uint64_t v62 = v40 + 4;
          do
          {
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215731D94(v8, (uint64_t)"{", 1);
            sub_215D11198(v8, v62);
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215D11198(v8, v62 + 2);
            sub_215731D94(v8, (uint64_t)"}", 1);
            v62 += 4;
          }
          while (v62 != v61);
        }
        goto LABEL_97;
      }
      long long v8 = *a3;
      if (v37 > 3) {
        goto LABEL_86;
      }
      goto LABEL_91;
    case 12:
      unint64_t v41 = sub_215D163FC(a2);
      unint64_t v42 = v41;
      uint64_t v44 = v43;
      if (!v43 && v41 >= 4)
      {
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_100;
        }
        long long v8 = *a3;
LABEL_94:
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215D112C8(v8, v44);
        sub_215731D94(v8, (uint64_t)",", 1);
        sub_215D112C8(v8, v44 + 2);
        sub_215731D94(v8, (uint64_t)"}", 1);
        if (v42 >> 2 != 1)
        {
          uint64_t v67 = &v44[4 * (v42 >> 2)];
          long long v68 = v44 + 4;
          do
          {
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215731D94(v8, (uint64_t)"{", 1);
            sub_215D112C8(v8, v68);
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215D112C8(v8, v68 + 2);
            sub_215731D94(v8, (uint64_t)"}", 1);
            v68 += 4;
          }
          while (v68 != v67);
        }
        goto LABEL_97;
      }
      long long v8 = *a3;
      if (v41 > 3) {
        goto LABEL_94;
      }
LABEL_91:
      uint64_t v63 = "{}";
      uint64_t v64 = v8;
      uint64_t v65 = 2;
      return sub_215731D94(v64, (uint64_t)v63, v65);
    default:
      sub_215E097D8(a1);
  }
}

void *sub_215D0FD08(void *a1, unsigned __int8 *a2)
{
  int v10 = 0;
  sub_215D0FE38((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1) {
    sub_215742D4C();
  }
  size_t v12 = &v11;
  ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C683E50[v10])(__p, &v12, v9);
  if (v10 != -1) {
    ((void (*)(char **, unsigned char *))off_26C683E08[v10])(&v12, v9);
  }
  if ((v8 & 0x80u) == 0) {
    unint64_t v3 = __p;
  }
  else {
    unint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  dispatch_workloop_t result = sub_215731D94(a1, (uint64_t)v3, v4);
  uint64_t v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_215D0FDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D0FE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D0FE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215D0FE38(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v12 = a2;
  unint64_t v13 = (std::string *)"{";
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"{";
  uint64_t v16 = (std::string *)"{";
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 == -1) {
    goto LABEL_11;
  }
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *))off_26C683E20[v3])(&v11);
  std::to_string(&v11, *a3);
  uint64_t v12 = a2;
  unint64_t v13 = &v11;
  uint64_t v14 = a2;
  uint64_t v15 = &v11;
  uint64_t v16 = &v11;
  uint64_t v6 = *(unsigned int *)(a2 + 24);
  if (v6 == -1) {
    sub_215742D4C();
  }
  unint64_t v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v6])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = a2;
  unint64_t v13 = (std::string *)",";
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)",";
  uint64_t v16 = (std::string *)",";
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  if (v7 == -1) {
    goto LABEL_11;
  }
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, uint64_t))off_26C683E20[v7])(&v11, a2);
  std::to_string(&v11, a3[1]);
  uint64_t v12 = a2;
  unint64_t v13 = &v11;
  uint64_t v14 = a2;
  uint64_t v15 = &v11;
  uint64_t v16 = &v11;
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if (v8 == -1) {
    sub_215742D4C();
  }
  unint64_t v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v8])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = a2;
  unint64_t v13 = (std::string *)"}";
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"}";
  uint64_t v16 = (std::string *)"}";
  uint64_t v9 = *(unsigned int *)(a2 + 24);
  if (v9 == -1) {
LABEL_11:
  }
    sub_215742D4C();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  return ((uint64_t (*)(std::string *, uint64_t))off_26C683E20[v9])(&v11, a2);
}

void sub_215D0FFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215D0FFF8(void *a1, unsigned __int16 *a2)
{
  int v10 = 0;
  sub_215D10128((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1) {
    sub_215742D4C();
  }
  uint64_t v12 = &v11;
  ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C683E50[v10])(__p, &v12, v9);
  if (v10 != -1) {
    ((void (*)(char **, unsigned char *))off_26C683E08[v10])(&v12, v9);
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  dispatch_workloop_t result = sub_215731D94(a1, (uint64_t)v3, v4);
  uint64_t v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_215D100E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D10100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D10114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215D10128(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v12 = a2;
  unint64_t v13 = (std::string *)"{";
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"{";
  uint64_t v16 = (std::string *)"{";
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 == -1) {
    goto LABEL_11;
  }
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *))off_26C683E20[v3])(&v11);
  std::to_string(&v11, *a3);
  uint64_t v12 = a2;
  unint64_t v13 = &v11;
  uint64_t v14 = a2;
  uint64_t v15 = &v11;
  uint64_t v16 = &v11;
  uint64_t v6 = *(unsigned int *)(a2 + 24);
  if (v6 == -1) {
    sub_215742D4C();
  }
  unint64_t v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v6])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = a2;
  unint64_t v13 = (std::string *)",";
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)",";
  uint64_t v16 = (std::string *)",";
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  if (v7 == -1) {
    goto LABEL_11;
  }
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, uint64_t))off_26C683E20[v7])(&v11, a2);
  std::to_string(&v11, a3[1]);
  uint64_t v12 = a2;
  unint64_t v13 = &v11;
  uint64_t v14 = a2;
  uint64_t v15 = &v11;
  uint64_t v16 = &v11;
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if (v8 == -1) {
    sub_215742D4C();
  }
  unint64_t v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v8])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = a2;
  unint64_t v13 = (std::string *)"}";
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"}";
  uint64_t v16 = (std::string *)"}";
  uint64_t v9 = *(unsigned int *)(a2 + 24);
  if (v9 == -1) {
LABEL_11:
  }
    sub_215742D4C();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  return ((uint64_t (*)(std::string *, uint64_t))off_26C683E20[v9])(&v11, a2);
}

void sub_215D102C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215D102E8(void *a1, unint64_t *a2)
{
  int v10 = 0;
  sub_215D10418((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1) {
    sub_215742D4C();
  }
  uint64_t v12 = &v11;
  ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C683E50[v10])(__p, &v12, v9);
  if (v10 != -1) {
    ((void (*)(char **, unsigned char *))off_26C683E08[v10])(&v12, v9);
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  dispatch_workloop_t result = sub_215731D94(a1, (uint64_t)v3, v4);
  uint64_t v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_215D103D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D103F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D10404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215D10418(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v12 = a2;
  unint64_t v13 = (std::string *)"{";
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"{";
  uint64_t v16 = (std::string *)"{";
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 == -1) {
    goto LABEL_11;
  }
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *))off_26C683E20[v3])(&v11);
  std::to_string(&v11, *a3);
  uint64_t v12 = a2;
  unint64_t v13 = &v11;
  uint64_t v14 = a2;
  uint64_t v15 = &v11;
  uint64_t v16 = &v11;
  uint64_t v6 = *(unsigned int *)(a2 + 24);
  if (v6 == -1) {
    sub_215742D4C();
  }
  unint64_t v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v6])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = a2;
  unint64_t v13 = (std::string *)",";
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)",";
  uint64_t v16 = (std::string *)",";
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  if (v7 == -1) {
    goto LABEL_11;
  }
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, uint64_t))off_26C683E20[v7])(&v11, a2);
  std::to_string(&v11, a3[1]);
  uint64_t v12 = a2;
  unint64_t v13 = &v11;
  uint64_t v14 = a2;
  uint64_t v15 = &v11;
  uint64_t v16 = &v11;
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if (v8 == -1) {
    sub_215742D4C();
  }
  unint64_t v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v8])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = a2;
  unint64_t v13 = (std::string *)"}";
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"}";
  uint64_t v16 = (std::string *)"}";
  uint64_t v9 = *(unsigned int *)(a2 + 24);
  if (v9 == -1) {
LABEL_11:
  }
    sub_215742D4C();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  return ((uint64_t (*)(std::string *, uint64_t))off_26C683E20[v9])(&v11, a2);
}

void sub_215D105B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215D105D8(void *a1, char *a2)
{
  int v10 = 0;
  sub_215D10708((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1) {
    sub_215742D4C();
  }
  uint64_t v12 = &v11;
  ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C683E50[v10])(__p, &v12, v9);
  if (v10 != -1) {
    ((void (*)(char **, unsigned char *))off_26C683E08[v10])(&v12, v9);
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  dispatch_workloop_t result = sub_215731D94(a1, (uint64_t)v3, v4);
  uint64_t v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_215D106C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D106E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D106F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215D10708(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v12 = a2;
  unint64_t v13 = (std::string *)"{";
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"{";
  uint64_t v16 = (std::string *)"{";
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 == -1) {
    goto LABEL_11;
  }
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *))off_26C683E20[v3])(&v11);
  std::to_string(&v11, *a3);
  uint64_t v12 = a2;
  unint64_t v13 = &v11;
  uint64_t v14 = a2;
  uint64_t v15 = &v11;
  uint64_t v16 = &v11;
  uint64_t v6 = *(unsigned int *)(a2 + 24);
  if (v6 == -1) {
    sub_215742D4C();
  }
  unint64_t v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v6])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = a2;
  unint64_t v13 = (std::string *)",";
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)",";
  uint64_t v16 = (std::string *)",";
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  if (v7 == -1) {
    goto LABEL_11;
  }
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, uint64_t))off_26C683E20[v7])(&v11, a2);
  std::to_string(&v11, a3[1]);
  uint64_t v12 = a2;
  unint64_t v13 = &v11;
  uint64_t v14 = a2;
  uint64_t v15 = &v11;
  uint64_t v16 = &v11;
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if (v8 == -1) {
    sub_215742D4C();
  }
  unint64_t v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v8])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = a2;
  unint64_t v13 = (std::string *)"}";
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"}";
  uint64_t v16 = (std::string *)"}";
  uint64_t v9 = *(unsigned int *)(a2 + 24);
  if (v9 == -1) {
LABEL_11:
  }
    sub_215742D4C();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  return ((uint64_t (*)(std::string *, uint64_t))off_26C683E20[v9])(&v11, a2);
}

void sub_215D108A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215D108C8(void *a1, __int16 *a2)
{
  int v10 = 0;
  sub_215D109F8((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1) {
    sub_215742D4C();
  }
  uint64_t v12 = &v11;
  ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C683E50[v10])(__p, &v12, v9);
  if (v10 != -1) {
    ((void (*)(char **, unsigned char *))off_26C683E08[v10])(&v12, v9);
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  dispatch_workloop_t result = sub_215731D94(a1, (uint64_t)v3, v4);
  uint64_t v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_215D109B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D109D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D109E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215D109F8(uint64_t a1, uint64_t a2, __int16 *a3)
{
  uint64_t v12 = a2;
  unint64_t v13 = (std::string *)"{";
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"{";
  uint64_t v16 = (std::string *)"{";
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 == -1) {
    goto LABEL_11;
  }
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *))off_26C683E20[v3])(&v11);
  std::to_string(&v11, *a3);
  uint64_t v12 = a2;
  unint64_t v13 = &v11;
  uint64_t v14 = a2;
  uint64_t v15 = &v11;
  uint64_t v16 = &v11;
  uint64_t v6 = *(unsigned int *)(a2 + 24);
  if (v6 == -1) {
    sub_215742D4C();
  }
  unint64_t v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v6])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = a2;
  unint64_t v13 = (std::string *)",";
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)",";
  uint64_t v16 = (std::string *)",";
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  if (v7 == -1) {
    goto LABEL_11;
  }
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, uint64_t))off_26C683E20[v7])(&v11, a2);
  std::to_string(&v11, a3[1]);
  uint64_t v12 = a2;
  unint64_t v13 = &v11;
  uint64_t v14 = a2;
  uint64_t v15 = &v11;
  uint64_t v16 = &v11;
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if (v8 == -1) {
    sub_215742D4C();
  }
  unint64_t v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v8])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = a2;
  unint64_t v13 = (std::string *)"}";
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"}";
  uint64_t v16 = (std::string *)"}";
  uint64_t v9 = *(unsigned int *)(a2 + 24);
  if (v9 == -1) {
LABEL_11:
  }
    sub_215742D4C();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  return ((uint64_t (*)(std::string *, uint64_t))off_26C683E20[v9])(&v11, a2);
}

void sub_215D10B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215D10BB8(void *a1, int *a2)
{
  int v10 = 0;
  sub_215D10CE8((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1) {
    sub_215742D4C();
  }
  uint64_t v12 = &v11;
  ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C683E50[v10])(__p, &v12, v9);
  if (v10 != -1) {
    ((void (*)(char **, unsigned char *))off_26C683E08[v10])(&v12, v9);
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  dispatch_workloop_t result = sub_215731D94(a1, (uint64_t)v3, v4);
  uint64_t v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_215D10CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D10CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D10CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215D10CE8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v12 = a2;
  unint64_t v13 = (std::string *)"{";
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"{";
  uint64_t v16 = (std::string *)"{";
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 == -1) {
    goto LABEL_11;
  }
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *))off_26C683E20[v3])(&v11);
  std::to_string(&v11, *a3);
  uint64_t v12 = a2;
  unint64_t v13 = &v11;
  uint64_t v14 = a2;
  uint64_t v15 = &v11;
  uint64_t v16 = &v11;
  uint64_t v6 = *(unsigned int *)(a2 + 24);
  if (v6 == -1) {
    sub_215742D4C();
  }
  unint64_t v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v6])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = a2;
  unint64_t v13 = (std::string *)",";
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)",";
  uint64_t v16 = (std::string *)",";
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  if (v7 == -1) {
    goto LABEL_11;
  }
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, uint64_t))off_26C683E20[v7])(&v11, a2);
  std::to_string(&v11, a3[1]);
  uint64_t v12 = a2;
  unint64_t v13 = &v11;
  uint64_t v14 = a2;
  uint64_t v15 = &v11;
  uint64_t v16 = &v11;
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if (v8 == -1) {
    sub_215742D4C();
  }
  unint64_t v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v8])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = a2;
  unint64_t v13 = (std::string *)"}";
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"}";
  uint64_t v16 = (std::string *)"}";
  uint64_t v9 = *(unsigned int *)(a2 + 24);
  if (v9 == -1) {
LABEL_11:
  }
    sub_215742D4C();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  return ((uint64_t (*)(std::string *, uint64_t))off_26C683E20[v9])(&v11, a2);
}

void sub_215D10E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215D10EA8(void *a1, uint64_t *a2)
{
  int v10 = 0;
  sub_215D10FD8((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1) {
    sub_215742D4C();
  }
  uint64_t v12 = &v11;
  ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C683E50[v10])(__p, &v12, v9);
  if (v10 != -1) {
    ((void (*)(char **, unsigned char *))off_26C683E08[v10])(&v12, v9);
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  dispatch_workloop_t result = sub_215731D94(a1, (uint64_t)v3, v4);
  uint64_t v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_215D10F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D10FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D10FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215D10FD8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v12 = a2;
  unint64_t v13 = (std::string *)"{";
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"{";
  uint64_t v16 = (std::string *)"{";
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 == -1) {
    goto LABEL_11;
  }
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *))off_26C683E20[v3])(&v11);
  std::to_string(&v11, *a3);
  uint64_t v12 = a2;
  unint64_t v13 = &v11;
  uint64_t v14 = a2;
  uint64_t v15 = &v11;
  uint64_t v16 = &v11;
  uint64_t v6 = *(unsigned int *)(a2 + 24);
  if (v6 == -1) {
    sub_215742D4C();
  }
  unint64_t v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v6])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = a2;
  unint64_t v13 = (std::string *)",";
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)",";
  uint64_t v16 = (std::string *)",";
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  if (v7 == -1) {
    goto LABEL_11;
  }
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, uint64_t))off_26C683E20[v7])(&v11, a2);
  std::to_string(&v11, a3[1]);
  uint64_t v12 = a2;
  unint64_t v13 = &v11;
  uint64_t v14 = a2;
  uint64_t v15 = &v11;
  uint64_t v16 = &v11;
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if (v8 == -1) {
    sub_215742D4C();
  }
  unint64_t v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v8])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = a2;
  unint64_t v13 = (std::string *)"}";
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"}";
  uint64_t v16 = (std::string *)"}";
  uint64_t v9 = *(unsigned int *)(a2 + 24);
  if (v9 == -1) {
LABEL_11:
  }
    sub_215742D4C();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  return ((uint64_t (*)(std::string *, uint64_t))off_26C683E20[v9])(&v11, a2);
}

void sub_215D11174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215D11198(void *a1, float *a2)
{
  int v10 = 0;
  sub_2159CA4F4((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1) {
    sub_215742D4C();
  }
  uint64_t v12 = &v11;
  ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C683E50[v10])(__p, &v12, v9);
  if (v10 != -1) {
    ((void (*)(char **, unsigned char *))off_26C683E08[v10])(&v12, v9);
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  dispatch_workloop_t result = sub_215731D94(a1, (uint64_t)v3, v4);
  uint64_t v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_215D11284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D112A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D112B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_215D112C8(void *a1, double *a2)
{
  int v10 = 0;
  sub_215D113F8((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1) {
    sub_215742D4C();
  }
  uint64_t v12 = &v11;
  ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C683E50[v10])(__p, &v12, v9);
  if (v10 != -1) {
    ((void (*)(char **, unsigned char *))off_26C683E08[v10])(&v12, v9);
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  dispatch_workloop_t result = sub_215731D94(a1, (uint64_t)v3, v4);
  uint64_t v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_215D113B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D113D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D113E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215D113F8(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v9 = a2;
  int v10 = "{";
  uint64_t v11 = a2;
  uint64_t v12 = "{";
  unint64_t v13 = "{";
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 == -1) {
    goto LABEL_5;
  }
  uint64_t v14 = &v9;
  ((void (*)(uint64_t **))off_26C683E20[v3])(&v14);
  sub_2157CFFD4((uint64_t)&v9, a2, a3);
  uint64_t v9 = a2;
  int v10 = ",";
  uint64_t v11 = a2;
  uint64_t v12 = ",";
  unint64_t v13 = ",";
  uint64_t v6 = *(unsigned int *)(a2 + 24);
  if (v6 == -1) {
    goto LABEL_5;
  }
  uint64_t v14 = &v9;
  ((void (*)(uint64_t **, uint64_t))off_26C683E20[v6])(&v14, a2);
  sub_2157CFFD4((uint64_t)&v9, a2, a3 + 1);
  uint64_t v9 = a2;
  int v10 = "}";
  uint64_t v11 = a2;
  uint64_t v12 = "}";
  unint64_t v13 = "}";
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  if (v7 == -1) {
LABEL_5:
  }
    sub_215742D4C();
  uint64_t v14 = &v9;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C683E20[v7])(&v14, a2);
}

void *sub_215D11500(int a1, unsigned __int8 **a2, void **a3)
{
  switch(a1)
  {
    case 0:
      unint64_t v4 = sub_215D15FDC(a2);
      unint64_t v5 = v4;
      uint64_t v7 = v6;
      if (!v6 && v4 >= 6)
      {
        if (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          unsigned __int8 v8 = *a3;
          goto LABEL_46;
        }
LABEL_100:
        abort();
      }
      unsigned __int8 v8 = *a3;
      if (v4 > 5)
      {
LABEL_46:
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215D12508(v8, v7);
        sub_215731D94(v8, (uint64_t)",", 1);
        sub_215D12508(v8, v7 + 3);
        sub_215731D94(v8, (uint64_t)"}", 1);
        if (v5 - 6 >= 6)
        {
          uint64_t v45 = &v7[6 * (v5 / 6)];
          char v46 = v7 + 6;
          do
          {
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215731D94(v8, (uint64_t)"{", 1);
            sub_215D12508(v8, v46);
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215D12508(v8, v46 + 3);
            sub_215731D94(v8, (uint64_t)"}", 1);
            v46 += 6;
          }
          while (v46 != v45);
        }
LABEL_97:
        uint64_t v63 = "}";
        uint64_t v64 = v8;
        uint64_t v65 = 1;
        return sub_215731D94(v64, (uint64_t)v63, v65);
      }
      goto LABEL_91;
    case 1:
      unint64_t v9 = sub_215D160E4(a2);
      unint64_t v10 = v9;
      uint64_t v12 = v11;
      if (!v11 && v9 >= 6)
      {
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_100;
        }
        unsigned __int8 v8 = *a3;
LABEL_51:
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215D1287C(v8, v12);
        sub_215731D94(v8, (uint64_t)",", 1);
        sub_215D1287C(v8, v12 + 3);
        sub_215731D94(v8, (uint64_t)"}", 1);
        if (v10 - 6 >= 6)
        {
          uint64_t v47 = &v12[6 * (v10 / 6)];
          uint64_t v48 = v12 + 6;
          do
          {
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215731D94(v8, (uint64_t)"{", 1);
            sub_215D1287C(v8, v48);
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215D1287C(v8, v48 + 3);
            sub_215731D94(v8, (uint64_t)"}", 1);
            v48 += 6;
          }
          while (v48 != v47);
        }
        goto LABEL_97;
      }
      unsigned __int8 v8 = *a3;
      if (v9 > 5) {
        goto LABEL_51;
      }
      goto LABEL_91;
    case 2:
      unint64_t v13 = sub_215D161EC(a2);
      unint64_t v14 = v13;
      uint64_t v16 = v15;
      if (!v15 && v13 >= 6)
      {
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_100;
        }
        unsigned __int8 v8 = *a3;
LABEL_56:
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215D12BF0(v8, v16);
        sub_215731D94(v8, (uint64_t)",", 1);
        sub_215D12BF0(v8, v16 + 3);
        sub_215731D94(v8, (uint64_t)"}", 1);
        if (v14 - 6 >= 6)
        {
          float v49 = &v16[6 * (v14 / 6)];
          unsigned int v50 = v16 + 6;
          do
          {
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215731D94(v8, (uint64_t)"{", 1);
            sub_215D12BF0(v8, v50);
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215D12BF0(v8, v50 + 3);
            sub_215731D94(v8, (uint64_t)"}", 1);
            v50 += 6;
          }
          while (v50 != v49);
        }
        goto LABEL_97;
      }
      unsigned __int8 v8 = *a3;
      if (v13 > 5) {
        goto LABEL_56;
      }
      goto LABEL_91;
    case 3:
      unint64_t v17 = sub_215D162F4(a2);
      unint64_t v18 = v17;
      uint64_t v20 = v19;
      if (!v19 && v17 >= 6)
      {
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_100;
        }
        unsigned __int8 v8 = *a3;
LABEL_61:
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215D12D20(v8, v20);
        sub_215731D94(v8, (uint64_t)",", 1);
        sub_215D12D20(v8, v20 + 3);
        sub_215731D94(v8, (uint64_t)"}", 1);
        if (v18 - 6 >= 6)
        {
          BOOL v51 = &v20[6 * (v18 / 6)];
          uint64_t v52 = v20 + 6;
          do
          {
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215731D94(v8, (uint64_t)"{", 1);
            sub_215D12D20(v8, v52);
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215D12D20(v8, v52 + 3);
            sub_215731D94(v8, (uint64_t)"}", 1);
            v52 += 6;
          }
          while (v52 != v51);
        }
        goto LABEL_97;
      }
      unsigned __int8 v8 = *a3;
      if (v17 > 5) {
        goto LABEL_61;
      }
      goto LABEL_91;
    case 5:
      unint64_t v21 = sub_215D15F58(a2);
      unint64_t v22 = v21;
      int64_t v24 = v23;
      if (!v23 && v21 >= 6)
      {
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_100;
        }
        unsigned __int8 v8 = *a3;
LABEL_66:
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215D13094(v8, v24);
        sub_215731D94(v8, (uint64_t)",", 1);
        sub_215D13094(v8, v24 + 3);
        sub_215731D94(v8, (uint64_t)"}", 1);
        if (v22 - 6 >= 6)
        {
          uint64_t v53 = &v24[6 * (v22 / 6)];
          unint64_t v54 = v24 + 6;
          do
          {
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215731D94(v8, (uint64_t)"{", 1);
            sub_215D13094(v8, v54);
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215D13094(v8, v54 + 3);
            sub_215731D94(v8, (uint64_t)"}", 1);
            v54 += 6;
          }
          while (v54 != v53);
        }
        goto LABEL_97;
      }
      unsigned __int8 v8 = *a3;
      if (v21 > 5) {
        goto LABEL_66;
      }
      goto LABEL_91;
    case 6:
      unint64_t v25 = sub_215D16060(a2);
      unint64_t v26 = v25;
      size_t v28 = v27;
      if (!v27 && v25 >= 6)
      {
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_100;
        }
        unsigned __int8 v8 = *a3;
LABEL_71:
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215D13408(v8, v28);
        sub_215731D94(v8, (uint64_t)",", 1);
        sub_215D13408(v8, v28 + 3);
        sub_215731D94(v8, (uint64_t)"}", 1);
        if (v26 - 6 >= 6)
        {
          unint64_t v55 = &v28[6 * (v26 / 6)];
          size_t v56 = v28 + 6;
          do
          {
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215731D94(v8, (uint64_t)"{", 1);
            sub_215D13408(v8, v56);
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215D13408(v8, v56 + 3);
            sub_215731D94(v8, (uint64_t)"}", 1);
            v56 += 6;
          }
          while (v56 != v55);
        }
        goto LABEL_97;
      }
      unsigned __int8 v8 = *a3;
      if (v25 > 5) {
        goto LABEL_71;
      }
      goto LABEL_91;
    case 7:
      unint64_t v29 = sub_215D16168(a2);
      unint64_t v30 = v29;
      unint64_t v32 = v31;
      if (!v31 && v29 >= 6)
      {
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_100;
        }
        unsigned __int8 v8 = *a3;
LABEL_76:
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215D1377C(v8, v32);
        sub_215731D94(v8, (uint64_t)",", 1);
        sub_215D1377C(v8, v32 + 3);
        sub_215731D94(v8, (uint64_t)"}", 1);
        if (v30 - 6 >= 6)
        {
          unint64_t v57 = &v32[6 * (v30 / 6)];
          int64_t v58 = v32 + 6;
          do
          {
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215731D94(v8, (uint64_t)"{", 1);
            sub_215D1377C(v8, v58);
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215D1377C(v8, v58 + 3);
            sub_215731D94(v8, (uint64_t)"}", 1);
            v58 += 6;
          }
          while (v58 != v57);
        }
        goto LABEL_97;
      }
      unsigned __int8 v8 = *a3;
      if (v29 > 5) {
        goto LABEL_76;
      }
      goto LABEL_91;
    case 8:
      unint64_t v33 = sub_215D16270(a2);
      unint64_t v34 = v33;
      char v36 = v35;
      if (!v35 && v33 >= 6)
      {
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_100;
        }
        unsigned __int8 v8 = *a3;
LABEL_81:
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215D13AF0(v8, v36);
        sub_215731D94(v8, (uint64_t)",", 1);
        sub_215D13AF0(v8, v36 + 3);
        sub_215731D94(v8, (uint64_t)"}", 1);
        if (v34 - 6 >= 6)
        {
          unint64_t v59 = &v36[6 * (v34 / 6)];
          char v60 = v36 + 6;
          do
          {
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215731D94(v8, (uint64_t)"{", 1);
            sub_215D13AF0(v8, v60);
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215D13AF0(v8, v60 + 3);
            sub_215731D94(v8, (uint64_t)"}", 1);
            v60 += 6;
          }
          while (v60 != v59);
        }
        goto LABEL_97;
      }
      unsigned __int8 v8 = *a3;
      if (v33 > 5) {
        goto LABEL_81;
      }
      goto LABEL_91;
    case 11:
      unint64_t v37 = sub_215D16378(a2);
      unint64_t v38 = v37;
      uint64_t v40 = v39;
      if (!v39 && v37 >= 6)
      {
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_100;
        }
        unsigned __int8 v8 = *a3;
LABEL_86:
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215D13E64(v8, v40);
        sub_215731D94(v8, (uint64_t)",", 1);
        sub_215D13E64(v8, v40 + 3);
        sub_215731D94(v8, (uint64_t)"}", 1);
        if (v38 - 6 >= 6)
        {
          std::string v61 = &v40[6 * (v38 / 6)];
          uint64_t v62 = v40 + 6;
          do
          {
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215731D94(v8, (uint64_t)"{", 1);
            sub_215D13E64(v8, v62);
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215D13E64(v8, v62 + 3);
            sub_215731D94(v8, (uint64_t)"}", 1);
            v62 += 6;
          }
          while (v62 != v61);
        }
        goto LABEL_97;
      }
      unsigned __int8 v8 = *a3;
      if (v37 > 5) {
        goto LABEL_86;
      }
      goto LABEL_91;
    case 12:
      unint64_t v41 = sub_215D163FC(a2);
      unint64_t v42 = v41;
      uint64_t v44 = v43;
      if (!v43 && v41 >= 6)
      {
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_100;
        }
        unsigned __int8 v8 = *a3;
LABEL_94:
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215731D94(v8, (uint64_t)"{", 1);
        sub_215D13F94(v8, v44);
        sub_215731D94(v8, (uint64_t)",", 1);
        sub_215D13F94(v8, v44 + 3);
        sub_215731D94(v8, (uint64_t)"}", 1);
        if (v42 - 6 >= 6)
        {
          uint64_t v67 = &v44[6 * (v42 / 6)];
          long long v68 = v44 + 6;
          do
          {
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215731D94(v8, (uint64_t)"{", 1);
            sub_215D13F94(v8, v68);
            sub_215731D94(v8, (uint64_t)",", 1);
            sub_215D13F94(v8, v68 + 3);
            sub_215731D94(v8, (uint64_t)"}", 1);
            v68 += 6;
          }
          while (v68 != v67);
        }
        goto LABEL_97;
      }
      unsigned __int8 v8 = *a3;
      if (v41 > 5) {
        goto LABEL_94;
      }
LABEL_91:
      uint64_t v63 = "{}";
      uint64_t v64 = v8;
      uint64_t v65 = 2;
      return sub_215731D94(v64, (uint64_t)v63, v65);
    default:
      sub_215E097D8(a1);
  }
}

void *sub_215D12508(void *a1, unsigned __int8 *a2)
{
  int v10 = 0;
  sub_215D12638((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1) {
    sub_215742D4C();
  }
  uint64_t v12 = &v11;
  ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C683E50[v10])(__p, &v12, v9);
  if (v10 != -1) {
    ((void (*)(char **, unsigned char *))off_26C683E08[v10])(&v12, v9);
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  dispatch_workloop_t result = sub_215731D94(a1, (uint64_t)v3, v4);
  uint64_t v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_215D125F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D12610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D12624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215D12638(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"{";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)"{";
  unint64_t v18 = (std::string *)"{";
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 == -1) {
    goto LABEL_15;
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *))off_26C683E20[v3])(&v13);
  std::to_string(&v13, *a3);
  uint64_t v14 = a2;
  uint64_t v15 = &v13;
  uint64_t v16 = a2;
  unint64_t v17 = &v13;
  unint64_t v18 = &v13;
  uint64_t v6 = *(unsigned int *)(a2 + 24);
  if (v6 == -1) {
    sub_215742D4C();
  }
  int v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v6])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)",";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)",";
  unint64_t v18 = (std::string *)",";
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  if (v7 == -1) {
    goto LABEL_15;
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_26C683E20[v7])(&v13, a2);
  std::to_string(&v13, a3[1]);
  uint64_t v14 = a2;
  uint64_t v15 = &v13;
  uint64_t v16 = a2;
  unint64_t v17 = &v13;
  unint64_t v18 = &v13;
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if (v8 == -1) {
    goto LABEL_16;
  }
  int v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v8])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)",";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)",";
  unint64_t v18 = (std::string *)",";
  uint64_t v9 = *(unsigned int *)(a2 + 24);
  if (v9 == -1) {
LABEL_15:
  }
    sub_215742D4C();
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_26C683E20[v9])(&v13, a2);
  std::to_string(&v13, a3[2]);
  uint64_t v14 = a2;
  uint64_t v15 = &v13;
  uint64_t v16 = a2;
  unint64_t v17 = &v13;
  unint64_t v18 = &v13;
  uint64_t v10 = *(unsigned int *)(a2 + 24);
  if (v10 == -1) {
LABEL_16:
  }
    sub_215742D4C();
  int v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v10])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"}";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)"}";
  unint64_t v18 = (std::string *)"}";
  uint64_t v11 = *(unsigned int *)(a2 + 24);
  if (v11 == -1) {
    goto LABEL_15;
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  return ((uint64_t (*)(std::string *, uint64_t))off_26C683E20[v11])(&v13, a2);
}

void sub_215D12858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215D1287C(void *a1, unsigned __int16 *a2)
{
  int v10 = 0;
  sub_215D129AC((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1) {
    sub_215742D4C();
  }
  uint64_t v12 = &v11;
  ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C683E50[v10])(__p, &v12, v9);
  if (v10 != -1) {
    ((void (*)(char **, unsigned char *))off_26C683E08[v10])(&v12, v9);
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  dispatch_workloop_t result = sub_215731D94(a1, (uint64_t)v3, v4);
  uint64_t v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_215D12968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D12984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D12998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215D129AC(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"{";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)"{";
  unint64_t v18 = (std::string *)"{";
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 == -1) {
    goto LABEL_15;
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *))off_26C683E20[v3])(&v13);
  std::to_string(&v13, *a3);
  uint64_t v14 = a2;
  uint64_t v15 = &v13;
  uint64_t v16 = a2;
  unint64_t v17 = &v13;
  unint64_t v18 = &v13;
  uint64_t v6 = *(unsigned int *)(a2 + 24);
  if (v6 == -1) {
    sub_215742D4C();
  }
  int v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v6])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)",";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)",";
  unint64_t v18 = (std::string *)",";
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  if (v7 == -1) {
    goto LABEL_15;
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_26C683E20[v7])(&v13, a2);
  std::to_string(&v13, a3[1]);
  uint64_t v14 = a2;
  uint64_t v15 = &v13;
  uint64_t v16 = a2;
  unint64_t v17 = &v13;
  unint64_t v18 = &v13;
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if (v8 == -1) {
    goto LABEL_16;
  }
  int v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v8])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)",";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)",";
  unint64_t v18 = (std::string *)",";
  uint64_t v9 = *(unsigned int *)(a2 + 24);
  if (v9 == -1) {
LABEL_15:
  }
    sub_215742D4C();
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_26C683E20[v9])(&v13, a2);
  std::to_string(&v13, a3[2]);
  uint64_t v14 = a2;
  uint64_t v15 = &v13;
  uint64_t v16 = a2;
  unint64_t v17 = &v13;
  unint64_t v18 = &v13;
  uint64_t v10 = *(unsigned int *)(a2 + 24);
  if (v10 == -1) {
LABEL_16:
  }
    sub_215742D4C();
  int v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v10])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"}";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)"}";
  unint64_t v18 = (std::string *)"}";
  uint64_t v11 = *(unsigned int *)(a2 + 24);
  if (v11 == -1) {
    goto LABEL_15;
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  return ((uint64_t (*)(std::string *, uint64_t))off_26C683E20[v11])(&v13, a2);
}

void sub_215D12BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215D12BF0(void *a1, unsigned int *a2)
{
  int v10 = 0;
  sub_2159CA2B0((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1) {
    sub_215742D4C();
  }
  uint64_t v12 = &v11;
  ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C683E50[v10])(__p, &v12, v9);
  if (v10 != -1) {
    ((void (*)(char **, unsigned char *))off_26C683E08[v10])(&v12, v9);
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  dispatch_workloop_t result = sub_215731D94(a1, (uint64_t)v3, v4);
  uint64_t v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_215D12CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D12CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D12D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_215D12D20(void *a1, unint64_t *a2)
{
  int v10 = 0;
  sub_215D12E50((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1) {
    sub_215742D4C();
  }
  uint64_t v12 = &v11;
  ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C683E50[v10])(__p, &v12, v9);
  if (v10 != -1) {
    ((void (*)(char **, unsigned char *))off_26C683E08[v10])(&v12, v9);
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  dispatch_workloop_t result = sub_215731D94(a1, (uint64_t)v3, v4);
  uint64_t v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_215D12E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D12E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D12E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215D12E50(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"{";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)"{";
  unint64_t v18 = (std::string *)"{";
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 == -1) {
    goto LABEL_15;
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *))off_26C683E20[v3])(&v13);
  std::to_string(&v13, *a3);
  uint64_t v14 = a2;
  uint64_t v15 = &v13;
  uint64_t v16 = a2;
  unint64_t v17 = &v13;
  unint64_t v18 = &v13;
  uint64_t v6 = *(unsigned int *)(a2 + 24);
  if (v6 == -1) {
    sub_215742D4C();
  }
  int v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v6])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)",";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)",";
  unint64_t v18 = (std::string *)",";
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  if (v7 == -1) {
    goto LABEL_15;
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_26C683E20[v7])(&v13, a2);
  std::to_string(&v13, a3[1]);
  uint64_t v14 = a2;
  uint64_t v15 = &v13;
  uint64_t v16 = a2;
  unint64_t v17 = &v13;
  unint64_t v18 = &v13;
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if (v8 == -1) {
    goto LABEL_16;
  }
  int v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v8])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)",";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)",";
  unint64_t v18 = (std::string *)",";
  uint64_t v9 = *(unsigned int *)(a2 + 24);
  if (v9 == -1) {
LABEL_15:
  }
    sub_215742D4C();
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_26C683E20[v9])(&v13, a2);
  std::to_string(&v13, a3[2]);
  uint64_t v14 = a2;
  uint64_t v15 = &v13;
  uint64_t v16 = a2;
  unint64_t v17 = &v13;
  unint64_t v18 = &v13;
  uint64_t v10 = *(unsigned int *)(a2 + 24);
  if (v10 == -1) {
LABEL_16:
  }
    sub_215742D4C();
  int v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v10])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"}";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)"}";
  unint64_t v18 = (std::string *)"}";
  uint64_t v11 = *(unsigned int *)(a2 + 24);
  if (v11 == -1) {
    goto LABEL_15;
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  return ((uint64_t (*)(std::string *, uint64_t))off_26C683E20[v11])(&v13, a2);
}

void sub_215D13070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215D13094(void *a1, char *a2)
{
  int v10 = 0;
  sub_215D131C4((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1) {
    sub_215742D4C();
  }
  uint64_t v12 = &v11;
  ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C683E50[v10])(__p, &v12, v9);
  if (v10 != -1) {
    ((void (*)(char **, unsigned char *))off_26C683E08[v10])(&v12, v9);
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  dispatch_workloop_t result = sub_215731D94(a1, (uint64_t)v3, v4);
  uint64_t v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_215D13180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D1319C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D131B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215D131C4(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"{";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)"{";
  unint64_t v18 = (std::string *)"{";
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 == -1) {
    goto LABEL_15;
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *))off_26C683E20[v3])(&v13);
  std::to_string(&v13, *a3);
  uint64_t v14 = a2;
  uint64_t v15 = &v13;
  uint64_t v16 = a2;
  unint64_t v17 = &v13;
  unint64_t v18 = &v13;
  uint64_t v6 = *(unsigned int *)(a2 + 24);
  if (v6 == -1) {
    sub_215742D4C();
  }
  int v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v6])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)",";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)",";
  unint64_t v18 = (std::string *)",";
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  if (v7 == -1) {
    goto LABEL_15;
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_26C683E20[v7])(&v13, a2);
  std::to_string(&v13, a3[1]);
  uint64_t v14 = a2;
  uint64_t v15 = &v13;
  uint64_t v16 = a2;
  unint64_t v17 = &v13;
  unint64_t v18 = &v13;
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if (v8 == -1) {
    goto LABEL_16;
  }
  int v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v8])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)",";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)",";
  unint64_t v18 = (std::string *)",";
  uint64_t v9 = *(unsigned int *)(a2 + 24);
  if (v9 == -1) {
LABEL_15:
  }
    sub_215742D4C();
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_26C683E20[v9])(&v13, a2);
  std::to_string(&v13, a3[2]);
  uint64_t v14 = a2;
  uint64_t v15 = &v13;
  uint64_t v16 = a2;
  unint64_t v17 = &v13;
  unint64_t v18 = &v13;
  uint64_t v10 = *(unsigned int *)(a2 + 24);
  if (v10 == -1) {
LABEL_16:
  }
    sub_215742D4C();
  int v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v10])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"}";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)"}";
  unint64_t v18 = (std::string *)"}";
  uint64_t v11 = *(unsigned int *)(a2 + 24);
  if (v11 == -1) {
    goto LABEL_15;
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  return ((uint64_t (*)(std::string *, uint64_t))off_26C683E20[v11])(&v13, a2);
}

void sub_215D133E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215D13408(void *a1, __int16 *a2)
{
  int v10 = 0;
  sub_215D13538((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1) {
    sub_215742D4C();
  }
  uint64_t v12 = &v11;
  ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C683E50[v10])(__p, &v12, v9);
  if (v10 != -1) {
    ((void (*)(char **, unsigned char *))off_26C683E08[v10])(&v12, v9);
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  dispatch_workloop_t result = sub_215731D94(a1, (uint64_t)v3, v4);
  uint64_t v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_215D134F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D13510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D13524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215D13538(uint64_t a1, uint64_t a2, __int16 *a3)
{
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"{";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)"{";
  unint64_t v18 = (std::string *)"{";
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 == -1) {
    goto LABEL_15;
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *))off_26C683E20[v3])(&v13);
  std::to_string(&v13, *a3);
  uint64_t v14 = a2;
  uint64_t v15 = &v13;
  uint64_t v16 = a2;
  unint64_t v17 = &v13;
  unint64_t v18 = &v13;
  uint64_t v6 = *(unsigned int *)(a2 + 24);
  if (v6 == -1) {
    sub_215742D4C();
  }
  int v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v6])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)",";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)",";
  unint64_t v18 = (std::string *)",";
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  if (v7 == -1) {
    goto LABEL_15;
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_26C683E20[v7])(&v13, a2);
  std::to_string(&v13, a3[1]);
  uint64_t v14 = a2;
  uint64_t v15 = &v13;
  uint64_t v16 = a2;
  unint64_t v17 = &v13;
  unint64_t v18 = &v13;
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if (v8 == -1) {
    goto LABEL_16;
  }
  int v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v8])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)",";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)",";
  unint64_t v18 = (std::string *)",";
  uint64_t v9 = *(unsigned int *)(a2 + 24);
  if (v9 == -1) {
LABEL_15:
  }
    sub_215742D4C();
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_26C683E20[v9])(&v13, a2);
  std::to_string(&v13, a3[2]);
  uint64_t v14 = a2;
  uint64_t v15 = &v13;
  uint64_t v16 = a2;
  unint64_t v17 = &v13;
  unint64_t v18 = &v13;
  uint64_t v10 = *(unsigned int *)(a2 + 24);
  if (v10 == -1) {
LABEL_16:
  }
    sub_215742D4C();
  int v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v10])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"}";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)"}";
  unint64_t v18 = (std::string *)"}";
  uint64_t v11 = *(unsigned int *)(a2 + 24);
  if (v11 == -1) {
    goto LABEL_15;
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  return ((uint64_t (*)(std::string *, uint64_t))off_26C683E20[v11])(&v13, a2);
}

void sub_215D13758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215D1377C(void *a1, int *a2)
{
  int v10 = 0;
  sub_215D138AC((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1) {
    sub_215742D4C();
  }
  uint64_t v12 = &v11;
  ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C683E50[v10])(__p, &v12, v9);
  if (v10 != -1) {
    ((void (*)(char **, unsigned char *))off_26C683E08[v10])(&v12, v9);
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  dispatch_workloop_t result = sub_215731D94(a1, (uint64_t)v3, v4);
  uint64_t v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_215D13868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D13884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D13898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215D138AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"{";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)"{";
  unint64_t v18 = (std::string *)"{";
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 == -1) {
    goto LABEL_15;
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *))off_26C683E20[v3])(&v13);
  std::to_string(&v13, *a3);
  uint64_t v14 = a2;
  uint64_t v15 = &v13;
  uint64_t v16 = a2;
  unint64_t v17 = &v13;
  unint64_t v18 = &v13;
  uint64_t v6 = *(unsigned int *)(a2 + 24);
  if (v6 == -1) {
    sub_215742D4C();
  }
  int v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v6])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)",";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)",";
  unint64_t v18 = (std::string *)",";
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  if (v7 == -1) {
    goto LABEL_15;
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_26C683E20[v7])(&v13, a2);
  std::to_string(&v13, a3[1]);
  uint64_t v14 = a2;
  uint64_t v15 = &v13;
  uint64_t v16 = a2;
  unint64_t v17 = &v13;
  unint64_t v18 = &v13;
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if (v8 == -1) {
    goto LABEL_16;
  }
  int v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v8])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)",";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)",";
  unint64_t v18 = (std::string *)",";
  uint64_t v9 = *(unsigned int *)(a2 + 24);
  if (v9 == -1) {
LABEL_15:
  }
    sub_215742D4C();
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_26C683E20[v9])(&v13, a2);
  std::to_string(&v13, a3[2]);
  uint64_t v14 = a2;
  uint64_t v15 = &v13;
  uint64_t v16 = a2;
  unint64_t v17 = &v13;
  unint64_t v18 = &v13;
  uint64_t v10 = *(unsigned int *)(a2 + 24);
  if (v10 == -1) {
LABEL_16:
  }
    sub_215742D4C();
  int v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v10])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"}";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)"}";
  unint64_t v18 = (std::string *)"}";
  uint64_t v11 = *(unsigned int *)(a2 + 24);
  if (v11 == -1) {
    goto LABEL_15;
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  return ((uint64_t (*)(std::string *, uint64_t))off_26C683E20[v11])(&v13, a2);
}

void sub_215D13ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215D13AF0(void *a1, uint64_t *a2)
{
  int v10 = 0;
  sub_215D13C20((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1) {
    sub_215742D4C();
  }
  uint64_t v12 = &v11;
  ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C683E50[v10])(__p, &v12, v9);
  if (v10 != -1) {
    ((void (*)(char **, unsigned char *))off_26C683E08[v10])(&v12, v9);
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  dispatch_workloop_t result = sub_215731D94(a1, (uint64_t)v3, v4);
  uint64_t v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_215D13BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D13BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D13C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215D13C20(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"{";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)"{";
  unint64_t v18 = (std::string *)"{";
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 == -1) {
    goto LABEL_15;
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *))off_26C683E20[v3])(&v13);
  std::to_string(&v13, *a3);
  uint64_t v14 = a2;
  uint64_t v15 = &v13;
  uint64_t v16 = a2;
  unint64_t v17 = &v13;
  unint64_t v18 = &v13;
  uint64_t v6 = *(unsigned int *)(a2 + 24);
  if (v6 == -1) {
    sub_215742D4C();
  }
  int v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v6])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)",";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)",";
  unint64_t v18 = (std::string *)",";
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  if (v7 == -1) {
    goto LABEL_15;
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_26C683E20[v7])(&v13, a2);
  std::to_string(&v13, a3[1]);
  uint64_t v14 = a2;
  uint64_t v15 = &v13;
  uint64_t v16 = a2;
  unint64_t v17 = &v13;
  unint64_t v18 = &v13;
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if (v8 == -1) {
    goto LABEL_16;
  }
  int v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v8])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)",";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)",";
  unint64_t v18 = (std::string *)",";
  uint64_t v9 = *(unsigned int *)(a2 + 24);
  if (v9 == -1) {
LABEL_15:
  }
    sub_215742D4C();
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_26C683E20[v9])(&v13, a2);
  std::to_string(&v13, a3[2]);
  uint64_t v14 = a2;
  uint64_t v15 = &v13;
  uint64_t v16 = a2;
  unint64_t v17 = &v13;
  unint64_t v18 = &v13;
  uint64_t v10 = *(unsigned int *)(a2 + 24);
  if (v10 == -1) {
LABEL_16:
  }
    sub_215742D4C();
  int v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_26C683E38[v10])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = a2;
  uint64_t v15 = (std::string *)"}";
  uint64_t v16 = a2;
  unint64_t v17 = (std::string *)"}";
  unint64_t v18 = (std::string *)"}";
  uint64_t v11 = *(unsigned int *)(a2 + 24);
  if (v11 == -1) {
    goto LABEL_15;
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  return ((uint64_t (*)(std::string *, uint64_t))off_26C683E20[v11])(&v13, a2);
}

void sub_215D13E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215D13E64(void *a1, float *a2)
{
  int v10 = 0;
  sub_2159CA15C((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1) {
    sub_215742D4C();
  }
  uint64_t v12 = &v11;
  ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C683E50[v10])(__p, &v12, v9);
  if (v10 != -1) {
    ((void (*)(char **, unsigned char *))off_26C683E08[v10])(&v12, v9);
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  dispatch_workloop_t result = sub_215731D94(a1, (uint64_t)v3, v4);
  uint64_t v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_215D13F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D13F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D13F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_215D13F94(void *a1, double *a2)
{
  int v10 = 0;
  sub_215B29B28((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1) {
    sub_215742D4C();
  }
  uint64_t v12 = &v11;
  ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C683E50[v10])(__p, &v12, v9);
  if (v10 != -1) {
    ((void (*)(char **, unsigned char *))off_26C683E08[v10])(&v12, v9);
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  dispatch_workloop_t result = sub_215731D94(a1, (uint64_t)v3, v4);
  uint64_t v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_215D14080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D1409C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D140B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_215D140C4(void *a1, char a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(0x58uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_26C683E78;
  *(_OWORD *)(v6 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  a1[1] = v6;
  *(_OWORD *)(v6 + 24) = 0u;
  v6 += 24;
  *a1 = v6;
  *uint64_t v6 = a2;
  uint64_t v7 = (char *)operator new(0x30uLL);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)uint64_t v7 = &unk_26C683998;
  *(_OWORD *)(v7 + 24) = *(_OWORD *)a3;
  *((void *)v7 + 5) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unsigned __int8 v8 = (void *)(*a1 + 8);
  uint64_t v15 = v7 + 24;
  uint64_t v16 = (std::__shared_weak_count *)v7;
  sub_215D0B004(v8, (uint64_t *)&v15);
  uint64_t v10 = *((void *)v7 + 3);
  uint64_t v9 = *((void *)v7 + 4);
  uint64_t v11 = v9 - v10;
  uint64_t v12 = *a1;
  *(void *)(*a1 + 56) = v9 - v10;
  if (v9 && !v10)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v12 = *a1;
  }
  *(void *)(v12 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(void *)(v12 + 48) = v10;
  std::string v13 = v16;
  if (!v16 || atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return a1;
}

void sub_215D14268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215733368((uint64_t)&a9);
  sub_215733368(v9);
  _Unwind_Resume(a1);
}

void sub_215D14288(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void *sub_215D1429C(void *a1, char a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(0x58uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_26C683E78;
  *(_OWORD *)(v6 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  a1[1] = v6;
  *(_OWORD *)(v6 + 24) = 0u;
  v6 += 24;
  *a1 = v6;
  *uint64_t v6 = a2;
  uint64_t v7 = (char *)operator new(0x30uLL);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)uint64_t v7 = &unk_26C6839F8;
  *(_OWORD *)(v7 + 24) = *(_OWORD *)a3;
  *((void *)v7 + 5) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unsigned __int8 v8 = (void *)(*a1 + 8);
  uint64_t v15 = v7 + 24;
  uint64_t v16 = (std::__shared_weak_count *)v7;
  sub_215D0B334(v8, (uint64_t *)&v15);
  uint64_t v10 = *((void *)v7 + 3);
  uint64_t v9 = *((void *)v7 + 4);
  uint64_t v11 = v9 - v10;
  uint64_t v12 = *a1;
  *(void *)(*a1 + 56) = v9 - v10;
  if (v9 && !v10)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v12 = *a1;
  }
  *(void *)(v12 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(void *)(v12 + 48) = v10;
  std::string v13 = v16;
  if (!v16 || atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return a1;
}

void sub_215D14440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215733368((uint64_t)&a9);
  sub_215733368(v9);
  _Unwind_Resume(a1);
}

void sub_215D14460(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void *sub_215D14474(void *a1, char a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(0x58uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_26C683E78;
  *(_OWORD *)(v6 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  a1[1] = v6;
  *(_OWORD *)(v6 + 24) = 0u;
  v6 += 24;
  *a1 = v6;
  *uint64_t v6 = a2;
  uint64_t v7 = (char *)operator new(0x30uLL);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)uint64_t v7 = &unk_26C683A58;
  *(_OWORD *)(v7 + 24) = *(_OWORD *)a3;
  *((void *)v7 + 5) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unsigned __int8 v8 = (void *)(*a1 + 8);
  uint64_t v15 = v7 + 24;
  uint64_t v16 = (std::__shared_weak_count *)v7;
  sub_215D0B4A8(v8, (uint64_t *)&v15);
  uint64_t v10 = *((void *)v7 + 3);
  uint64_t v9 = *((void *)v7 + 4);
  uint64_t v11 = v9 - v10;
  uint64_t v12 = *a1;
  *(void *)(*a1 + 56) = (v9 - v10) >> 1;
  if (v9 && !v10)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v12 = *a1;
  }
  *(void *)(v12 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(void *)(v12 + 48) = v10;
  std::string v13 = v16;
  if (!v16 || atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return a1;
}

void sub_215D1461C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215733368((uint64_t)&a9);
  sub_215733368(v9);
  _Unwind_Resume(a1);
}

void sub_215D1463C(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void *sub_215D14650(void *a1, char a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(0x58uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_26C683E78;
  *(_OWORD *)(v6 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  a1[1] = v6;
  *(_OWORD *)(v6 + 24) = 0u;
  v6 += 24;
  *a1 = v6;
  *uint64_t v6 = a2;
  uint64_t v7 = (char *)operator new(0x30uLL);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)uint64_t v7 = &unk_26C683AB8;
  *(_OWORD *)(v7 + 24) = *(_OWORD *)a3;
  *((void *)v7 + 5) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unsigned __int8 v8 = (void *)(*a1 + 8);
  uint64_t v15 = v7 + 24;
  uint64_t v16 = (std::__shared_weak_count *)v7;
  sub_215D0B61C(v8, (uint64_t *)&v15);
  uint64_t v10 = *((void *)v7 + 3);
  uint64_t v9 = *((void *)v7 + 4);
  uint64_t v11 = v9 - v10;
  uint64_t v12 = *a1;
  *(void *)(*a1 + 56) = (v9 - v10) >> 1;
  if (v9 && !v10)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v12 = *a1;
  }
  *(void *)(v12 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(void *)(v12 + 48) = v10;
  std::string v13 = v16;
  if (!v16 || atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return a1;
}

void sub_215D147F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215733368((uint64_t)&a9);
  sub_215733368(v9);
  _Unwind_Resume(a1);
}

void sub_215D14818(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void *sub_215D1482C(void *a1, char a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(0x58uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_26C683E78;
  *(_OWORD *)(v6 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  a1[1] = v6;
  *(_OWORD *)(v6 + 24) = 0u;
  v6 += 24;
  *a1 = v6;
  *uint64_t v6 = a2;
  uint64_t v7 = (char *)operator new(0x30uLL);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)uint64_t v7 = &unk_26C683B18;
  *(_OWORD *)(v7 + 24) = *(_OWORD *)a3;
  *((void *)v7 + 5) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unsigned __int8 v8 = (void *)(*a1 + 8);
  uint64_t v15 = v7 + 24;
  uint64_t v16 = (std::__shared_weak_count *)v7;
  sub_215D0B790(v8, (uint64_t *)&v15);
  uint64_t v10 = *((void *)v7 + 3);
  uint64_t v9 = *((void *)v7 + 4);
  uint64_t v11 = v9 - v10;
  uint64_t v12 = *a1;
  *(void *)(*a1 + 56) = (v9 - v10) >> 2;
  if (v9 && !v10)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v12 = *a1;
  }
  *(void *)(v12 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(void *)(v12 + 48) = v10;
  std::string v13 = v16;
  if (!v16 || atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return a1;
}

void sub_215D149D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215733368((uint64_t)&a9);
  sub_215733368(v9);
  _Unwind_Resume(a1);
}

void sub_215D149F4(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void *sub_215D14A08(void *a1, char a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(0x58uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_26C683E78;
  *(_OWORD *)(v6 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  a1[1] = v6;
  *(_OWORD *)(v6 + 24) = 0u;
  v6 += 24;
  *a1 = v6;
  *uint64_t v6 = a2;
  uint64_t v7 = (char *)operator new(0x30uLL);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)uint64_t v7 = &unk_26C683B78;
  *(_OWORD *)(v7 + 24) = *(_OWORD *)a3;
  *((void *)v7 + 5) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unsigned __int8 v8 = (void *)(*a1 + 8);
  uint64_t v15 = v7 + 24;
  uint64_t v16 = (std::__shared_weak_count *)v7;
  sub_215D0B904(v8, (uint64_t *)&v15);
  uint64_t v10 = *((void *)v7 + 3);
  uint64_t v9 = *((void *)v7 + 4);
  uint64_t v11 = v9 - v10;
  uint64_t v12 = *a1;
  *(void *)(*a1 + 56) = (v9 - v10) >> 2;
  if (v9 && !v10)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v12 = *a1;
  }
  *(void *)(v12 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(void *)(v12 + 48) = v10;
  std::string v13 = v16;
  if (!v16 || atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return a1;
}

void sub_215D14BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215733368((uint64_t)&a9);
  sub_215733368(v9);
  _Unwind_Resume(a1);
}

void sub_215D14BD0(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void *sub_215D14BE4(void *a1, char a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(0x58uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_26C683E78;
  *(_OWORD *)(v6 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  a1[1] = v6;
  *(_OWORD *)(v6 + 24) = 0u;
  v6 += 24;
  *a1 = v6;
  *uint64_t v6 = a2;
  uint64_t v7 = (char *)operator new(0x30uLL);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)uint64_t v7 = &unk_26C683BD8;
  *(_OWORD *)(v7 + 24) = *(_OWORD *)a3;
  *((void *)v7 + 5) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unsigned __int8 v8 = (void *)(*a1 + 8);
  uint64_t v15 = v7 + 24;
  uint64_t v16 = (std::__shared_weak_count *)v7;
  sub_215D0BA78(v8, (uint64_t *)&v15);
  uint64_t v10 = *((void *)v7 + 3);
  uint64_t v9 = *((void *)v7 + 4);
  uint64_t v11 = v9 - v10;
  uint64_t v12 = *a1;
  *(void *)(*a1 + 56) = (v9 - v10) >> 3;
  if (v9 && !v10)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v12 = *a1;
  }
  *(void *)(v12 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(void *)(v12 + 48) = v10;
  std::string v13 = v16;
  if (!v16 || atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return a1;
}

void sub_215D14D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215733368((uint64_t)&a9);
  sub_215733368(v9);
  _Unwind_Resume(a1);
}

void sub_215D14DAC(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void *sub_215D14DC0(void *a1, char a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(0x58uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_26C683E78;
  *(_OWORD *)(v6 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  a1[1] = v6;
  *(_OWORD *)(v6 + 24) = 0u;
  v6 += 24;
  *a1 = v6;
  *uint64_t v6 = a2;
  uint64_t v7 = (char *)operator new(0x30uLL);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)uint64_t v7 = &unk_26C683C38;
  *(_OWORD *)(v7 + 24) = *(_OWORD *)a3;
  *((void *)v7 + 5) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unsigned __int8 v8 = (void *)(*a1 + 8);
  uint64_t v15 = v7 + 24;
  uint64_t v16 = (std::__shared_weak_count *)v7;
  sub_215D0BBEC(v8, (uint64_t *)&v15);
  uint64_t v10 = *((void *)v7 + 3);
  uint64_t v9 = *((void *)v7 + 4);
  uint64_t v11 = v9 - v10;
  uint64_t v12 = *a1;
  *(void *)(*a1 + 56) = (v9 - v10) >> 3;
  if (v9 && !v10)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v12 = *a1;
  }
  *(void *)(v12 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(void *)(v12 + 48) = v10;
  std::string v13 = v16;
  if (!v16 || atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return a1;
}

void sub_215D14F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215733368((uint64_t)&a9);
  sub_215733368(v9);
  _Unwind_Resume(a1);
}

void sub_215D14F88(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void *sub_215D14F9C(void *a1, char a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(0x58uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_26C683E78;
  *(_OWORD *)(v6 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  a1[1] = v6;
  *(_OWORD *)(v6 + 24) = 0u;
  v6 += 24;
  *a1 = v6;
  *uint64_t v6 = a2;
  uint64_t v7 = (char *)operator new(0x30uLL);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)uint64_t v7 = &unk_26C683C98;
  *(_OWORD *)(v7 + 24) = *(_OWORD *)a3;
  *((void *)v7 + 5) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unsigned __int8 v8 = (void *)(*a1 + 8);
  uint64_t v15 = v7 + 24;
  uint64_t v16 = (std::__shared_weak_count *)v7;
  sub_215D0BD60(v8, (uint64_t *)&v15);
  uint64_t v10 = *((void *)v7 + 3);
  uint64_t v9 = *((void *)v7 + 4);
  uint64_t v11 = v9 - v10;
  uint64_t v12 = *a1;
  *(void *)(*a1 + 56) = (v9 - v10) >> 2;
  if (v9 && !v10)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v12 = *a1;
  }
  *(void *)(v12 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(void *)(v12 + 48) = v10;
  std::string v13 = v16;
  if (!v16 || atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return a1;
}

void sub_215D15144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215733368((uint64_t)&a9);
  sub_215733368(v9);
  _Unwind_Resume(a1);
}

void sub_215D15164(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void *sub_215D15178(void *a1, char a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(0x58uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_26C683E78;
  *(_OWORD *)(v6 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  a1[1] = v6;
  *(_OWORD *)(v6 + 24) = 0u;
  v6 += 24;
  *a1 = v6;
  *uint64_t v6 = a2;
  uint64_t v7 = (char *)operator new(0x30uLL);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)uint64_t v7 = &unk_26C683CF8;
  *(_OWORD *)(v7 + 24) = *(_OWORD *)a3;
  *((void *)v7 + 5) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unsigned __int8 v8 = (void *)(*a1 + 8);
  uint64_t v15 = v7 + 24;
  uint64_t v16 = (std::__shared_weak_count *)v7;
  sub_215D0BED4(v8, (uint64_t *)&v15);
  uint64_t v10 = *((void *)v7 + 3);
  uint64_t v9 = *((void *)v7 + 4);
  uint64_t v11 = v9 - v10;
  uint64_t v12 = *a1;
  *(void *)(*a1 + 56) = (v9 - v10) >> 3;
  if (v9 && !v10)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v12 = *a1;
  }
  *(void *)(v12 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(void *)(v12 + 48) = v10;
  std::string v13 = v16;
  if (!v16 || atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return a1;
}

void sub_215D15320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215733368((uint64_t)&a9);
  sub_215733368(v9);
  _Unwind_Resume(a1);
}

void sub_215D15340(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void *sub_215D15354(void *a1, char a2, void (**a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_26C683E78;
  *(_OWORD *)(v10 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  a1[1] = v10;
  uint64_t v11 = v10 + 32;
  *(_OWORD *)(v10 + 24) = 0u;
  v10 += 24;
  *a1 = v10;
  *uint64_t v10 = a2;
  sub_2158281D0(v11, a3);
  uint64_t v12 = *a1;
  *(void *)(*a1 + 56) = a4;
  if (!a5 && a4)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v12 = *a1;
  }
  *(void *)(v12 + 4std::__fs::filesystem::__rename(__from, __to, 0) = a4;
  *(void *)(v12 + 48) = a5;
  return a1;
}

void sub_215D1544C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void *sub_215D154A0(void *a1, char a2, void (**a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_26C683E78;
  *(_OWORD *)(v10 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  a1[1] = v10;
  uint64_t v11 = v10 + 32;
  *(_OWORD *)(v10 + 24) = 0u;
  v10 += 24;
  *a1 = v10;
  *uint64_t v10 = a2;
  sub_2158281D0(v11, a3);
  uint64_t v12 = *a1;
  *(void *)(*a1 + 56) = a4;
  if (!a5 && a4)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v12 = *a1;
  }
  *(void *)(v12 + 4std::__fs::filesystem::__rename(__from, __to, 0) = a4;
  *(void *)(v12 + 48) = a5;
  return a1;
}

void sub_215D15598(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void *sub_215D155EC(void *a1, char a2, void (**a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_26C683E78;
  *(_OWORD *)(v10 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  a1[1] = v10;
  uint64_t v11 = v10 + 32;
  *(_OWORD *)(v10 + 24) = 0u;
  v10 += 24;
  *a1 = v10;
  *uint64_t v10 = a2;
  sub_2158281D0(v11, a3);
  uint64_t v12 = *a1;
  *(void *)(*a1 + 56) = a4;
  uint64_t v13 = 2 * a4;
  if (!a5 && v13)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v12 = *a1;
  }
  *(void *)(v12 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v13;
  *(void *)(v12 + 48) = a5;
  return a1;
}

void sub_215D156E8(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void *sub_215D156FC(void *a1, char a2, void (**a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_26C683E78;
  *(_OWORD *)(v10 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  a1[1] = v10;
  uint64_t v11 = v10 + 32;
  *(_OWORD *)(v10 + 24) = 0u;
  v10 += 24;
  *a1 = v10;
  *uint64_t v10 = a2;
  sub_2158281D0(v11, a3);
  uint64_t v12 = *a1;
  *(void *)(*a1 + 56) = a4;
  uint64_t v13 = 2 * a4;
  if (!a5 && v13)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v12 = *a1;
  }
  *(void *)(v12 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v13;
  *(void *)(v12 + 48) = a5;
  return a1;
}

void sub_215D157F8(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void *sub_215D1580C(void *a1, char a2, void (**a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_26C683E78;
  *(_OWORD *)(v10 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  a1[1] = v10;
  uint64_t v11 = v10 + 32;
  *(_OWORD *)(v10 + 24) = 0u;
  v10 += 24;
  *a1 = v10;
  *uint64_t v10 = a2;
  sub_2158281D0(v11, a3);
  uint64_t v12 = *a1;
  *(void *)(*a1 + 56) = a4;
  uint64_t v13 = 4 * a4;
  if (!a5 && v13)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v12 = *a1;
  }
  *(void *)(v12 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v13;
  *(void *)(v12 + 48) = a5;
  return a1;
}

void sub_215D15908(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void *sub_215D1591C(void *a1, char a2, void (**a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_26C683E78;
  *(_OWORD *)(v10 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  a1[1] = v10;
  uint64_t v11 = v10 + 32;
  *(_OWORD *)(v10 + 24) = 0u;
  v10 += 24;
  *a1 = v10;
  *uint64_t v10 = a2;
  sub_2158281D0(v11, a3);
  uint64_t v12 = *a1;
  *(void *)(*a1 + 56) = a4;
  uint64_t v13 = 4 * a4;
  if (!a5 && v13)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v12 = *a1;
  }
  *(void *)(v12 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v13;
  *(void *)(v12 + 48) = a5;
  return a1;
}

void sub_215D15A18(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void *sub_215D15A2C(void *a1, char a2, void (**a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_26C683E78;
  *(_OWORD *)(v10 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  a1[1] = v10;
  uint64_t v11 = v10 + 32;
  *(_OWORD *)(v10 + 24) = 0u;
  v10 += 24;
  *a1 = v10;
  *uint64_t v10 = a2;
  sub_2158281D0(v11, a3);
  uint64_t v12 = *a1;
  *(void *)(*a1 + 56) = a4;
  uint64_t v13 = 8 * a4;
  if (!a5 && v13)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v12 = *a1;
  }
  *(void *)(v12 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v13;
  *(void *)(v12 + 48) = a5;
  return a1;
}

void sub_215D15B28(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void *sub_215D15B3C(void *a1, char a2, void (**a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_26C683E78;
  *(_OWORD *)(v10 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  a1[1] = v10;
  uint64_t v11 = v10 + 32;
  *(_OWORD *)(v10 + 24) = 0u;
  v10 += 24;
  *a1 = v10;
  *uint64_t v10 = a2;
  sub_2158281D0(v11, a3);
  uint64_t v12 = *a1;
  *(void *)(*a1 + 56) = a4;
  uint64_t v13 = 8 * a4;
  if (!a5 && v13)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v12 = *a1;
  }
  *(void *)(v12 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v13;
  *(void *)(v12 + 48) = a5;
  return a1;
}

void sub_215D15C38(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void *sub_215D15C4C(void *a1, char a2, void (**a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_26C683E78;
  *(_OWORD *)(v10 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  a1[1] = v10;
  uint64_t v11 = v10 + 32;
  *(_OWORD *)(v10 + 24) = 0u;
  v10 += 24;
  *a1 = v10;
  *uint64_t v10 = a2;
  sub_2158281D0(v11, a3);
  uint64_t v12 = *a1;
  *(void *)(*a1 + 56) = a4;
  uint64_t v13 = 4 * a4;
  if (!a5 && v13)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v12 = *a1;
  }
  *(void *)(v12 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v13;
  *(void *)(v12 + 48) = a5;
  return a1;
}

void sub_215D15D48(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void *sub_215D15D5C(void *a1, char a2, void (**a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_26C683E78;
  *(_OWORD *)(v10 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  a1[1] = v10;
  uint64_t v11 = v10 + 32;
  *(_OWORD *)(v10 + 24) = 0u;
  v10 += 24;
  *a1 = v10;
  *uint64_t v10 = a2;
  sub_2158281D0(v11, a3);
  uint64_t v12 = *a1;
  *(void *)(*a1 + 56) = a4;
  uint64_t v13 = 8 * a4;
  if (!a5 && v13)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v12 = *a1;
  }
  *(void *)(v12 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v13;
  *(void *)(v12 + 48) = a5;
  return a1;
}

void sub_215D15E58(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 **sub_215D15E6C(unsigned __int8 **result, int a2)
{
  char v2 = a2;
  if (**result != a2)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215D16480();
  }
  return result;
}

void sub_215D15F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_215D15F58(unsigned __int8 **a1)
{
  sub_215D15E6C(a1, 5);
  uint64_t v2 = *((void *)*a1 + 5);
  if (*((void *)*a1 + 6)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = v2 == 0;
  }
  if (!v3
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return v2;
}

uint64_t sub_215D15FDC(unsigned __int8 **a1)
{
  sub_215D15E6C(a1, 0);
  uint64_t v2 = *((void *)*a1 + 5);
  if (*((void *)*a1 + 6)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = v2 == 0;
  }
  if (!v3
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return v2;
}

unint64_t sub_215D16060(unsigned __int8 **a1)
{
  sub_215D15E6C(a1, 6);
  unint64_t v2 = *((void *)*a1 + 5);
  if (*((void *)*a1 + 6)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = v2 >= 2;
  }
  if (v3
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return v2 >> 1;
}

unint64_t sub_215D160E4(unsigned __int8 **a1)
{
  sub_215D15E6C(a1, 1);
  unint64_t v2 = *((void *)*a1 + 5);
  if (*((void *)*a1 + 6)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = v2 >= 2;
  }
  if (v3
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return v2 >> 1;
}

unint64_t sub_215D16168(unsigned __int8 **a1)
{
  sub_215D15E6C(a1, 7);
  unint64_t v2 = *((void *)*a1 + 5);
  if (*((void *)*a1 + 6)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = v2 >= 4;
  }
  if (v3
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return v2 >> 2;
}

unint64_t sub_215D161EC(unsigned __int8 **a1)
{
  sub_215D15E6C(a1, 2);
  unint64_t v2 = *((void *)*a1 + 5);
  if (*((void *)*a1 + 6)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = v2 >= 4;
  }
  if (v3
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return v2 >> 2;
}

unint64_t sub_215D16270(unsigned __int8 **a1)
{
  sub_215D15E6C(a1, 8);
  unint64_t v2 = *((void *)*a1 + 5);
  if (*((void *)*a1 + 6)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = v2 >= 8;
  }
  if (v3
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return v2 >> 3;
}

unint64_t sub_215D162F4(unsigned __int8 **a1)
{
  sub_215D15E6C(a1, 3);
  unint64_t v2 = *((void *)*a1 + 5);
  if (*((void *)*a1 + 6)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = v2 >= 8;
  }
  if (v3
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return v2 >> 3;
}

unint64_t sub_215D16378(unsigned __int8 **a1)
{
  sub_215D15E6C(a1, 11);
  unint64_t v2 = *((void *)*a1 + 5);
  if (*((void *)*a1 + 6)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = v2 >= 4;
  }
  if (v3
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return v2 >> 2;
}

unint64_t sub_215D163FC(unsigned __int8 **a1)
{
  sub_215D15E6C(a1, 12);
  unint64_t v2 = *((void *)*a1 + 5);
  if (*((void *)*a1 + 6)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = v2 >= 8;
  }
  if (v3
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return v2 >> 3;
}

void sub_215D16480()
{
  v0[6] = 0;
  sub_2158C2354(v0, "Span of value type ");
  sub_2157E3DE8();
}

void sub_215D16598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D165AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D165C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D165D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D165E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_215D165FC(void *a1, unsigned __int8 **a2)
{
  uint64_t v4 = sub_215731D94(a1, (uint64_t)"{", 1);
  v96.__r_.__value_.__s.__data_[0] = **a2;
  unint64_t v5 = sub_215E099DC(v4, &v96);
  sub_215731D94(v5, (uint64_t)",", 1);
  switch(**a2)
  {
    case 0u:
      sub_215D15E6C(a2, 0);
      std::string::size_type v7 = *((void *)*a2 + 5);
      std::string::size_type v6 = *((void *)*a2 + 6);
      if (v6) {
        BOOL v8 = 1;
      }
      else {
        BOOL v8 = v7 == 0;
      }
      if (!v8
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_218;
      }
      v96.__r_.__value_.__r.__words[0] = v7;
      v96.__r_.__value_.__l.__size_ = v6;
      int64_t v94 = a1;
      sub_215D04D60((uint64_t)&v95, &v94, (uint64_t *)&v96);
      return sub_215731D94(a1, (uint64_t)"}", 1);
    case 1u:
      sub_215D15E6C(a2, 1);
      unint64_t v10 = *((void *)*a2 + 5);
      uint64_t v9 = (unsigned __int16 *)*((void *)*a2 + 6);
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v10 >= 2;
      }
      if (v11)
      {
        if (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
LABEL_83:
          sub_215731D94(a1, (uint64_t)"{", 1);
          std::to_string(&v96, *v9);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v45 = &v96;
          }
          else {
            uint64_t v45 = (std::string *)v96.__r_.__value_.__r.__words[0];
          }
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v96.__r_.__value_.__l.__size_;
          }
          sub_215731D94(a1, (uint64_t)v45, size);
          unint64_t v47 = v10 >> 1;
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v96.__r_.__value_.__l.__data_);
          }
          if (v47 != 1)
          {
            uint64_t v48 = v9 + 1;
            uint64_t v49 = 2 * v47 - 2;
            do
            {
              sub_215731D94(a1, (uint64_t)",", 1);
              std::to_string(&v96, *v48);
              if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unsigned int v50 = &v96;
              }
              else {
                unsigned int v50 = (std::string *)v96.__r_.__value_.__r.__words[0];
              }
              if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v51 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v51 = v96.__r_.__value_.__l.__size_;
              }
              sub_215731D94(a1, (uint64_t)v50, v51);
              if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v96.__r_.__value_.__l.__data_);
              }
              ++v48;
              v49 -= 2;
            }
            while (v49);
          }
LABEL_192:
          unint64_t v42 = "}";
          unint64_t v43 = a1;
LABEL_205:
          uint64_t v44 = 1;
          goto LABEL_206;
        }
LABEL_218:
        abort();
      }
      if (v10 > 1) {
        goto LABEL_83;
      }
LABEL_81:
      unint64_t v42 = "{}";
      unint64_t v43 = a1;
      uint64_t v44 = 2;
LABEL_206:
      sub_215731D94(v43, (uint64_t)v42, v44);
      return sub_215731D94(a1, (uint64_t)"}", 1);
    case 2u:
      sub_215D15E6C(a2, 2);
      unint64_t v13 = *((void *)*a2 + 5);
      uint64_t v12 = (unsigned int *)*((void *)*a2 + 6);
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13 >= 4;
      }
      if (v14)
      {
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_218;
        }
      }
      else if (v13 <= 3)
      {
        goto LABEL_81;
      }
      sub_215731D94(a1, (uint64_t)"{", 1);
      std::to_string(&v96, *v12);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v52 = &v96;
      }
      else {
        uint64_t v52 = (std::string *)v96.__r_.__value_.__r.__words[0];
      }
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v53 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v53 = v96.__r_.__value_.__l.__size_;
      }
      sub_215731D94(a1, (uint64_t)v52, v53);
      unint64_t v54 = v13 >> 2;
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v96.__r_.__value_.__l.__data_);
      }
      if (v54 != 1)
      {
        unint64_t v55 = v12 + 1;
        uint64_t v56 = 4 * v54 - 4;
        do
        {
          sub_215731D94(a1, (uint64_t)",", 1);
          std::to_string(&v96, *v55);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v57 = &v96;
          }
          else {
            unint64_t v57 = (std::string *)v96.__r_.__value_.__r.__words[0];
          }
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v58 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v58 = v96.__r_.__value_.__l.__size_;
          }
          sub_215731D94(a1, (uint64_t)v57, v58);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v96.__r_.__value_.__l.__data_);
          }
          ++v55;
          v56 -= 4;
        }
        while (v56);
      }
      goto LABEL_192;
    case 3u:
      sub_215D15E6C(a2, 3);
      unint64_t v16 = *((void *)*a2 + 5);
      int v15 = (unint64_t *)*((void *)*a2 + 6);
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v16 >= 8;
      }
      if (v17)
      {
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_218;
        }
      }
      else if (v16 <= 7)
      {
        goto LABEL_81;
      }
      sub_215731D94(a1, (uint64_t)"{", 1);
      std::to_string(&v96, *v15);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v59 = &v96;
      }
      else {
        unint64_t v59 = (std::string *)v96.__r_.__value_.__r.__words[0];
      }
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v60 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v60 = v96.__r_.__value_.__l.__size_;
      }
      sub_215731D94(a1, (uint64_t)v59, v60);
      unint64_t v61 = v16 >> 3;
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v96.__r_.__value_.__l.__data_);
      }
      if (v61 != 1)
      {
        uint64_t v62 = v15 + 1;
        uint64_t v63 = 8 * v61 - 8;
        do
        {
          sub_215731D94(a1, (uint64_t)",", 1);
          std::to_string(&v96, *v62);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v64 = &v96;
          }
          else {
            uint64_t v64 = (std::string *)v96.__r_.__value_.__r.__words[0];
          }
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v65 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v65 = v96.__r_.__value_.__l.__size_;
          }
          sub_215731D94(a1, (uint64_t)v64, v65);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v96.__r_.__value_.__l.__data_);
          }
          ++v62;
          v63 -= 8;
        }
        while (v63);
      }
      goto LABEL_192;
    case 5u:
      sub_215D15E6C(a2, 5);
      uint64_t v19 = *((void *)*a2 + 5);
      unint64_t v18 = (char *)*((void *)*a2 + 6);
      if (v18) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v19 == 0;
      }
      if (!v20
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_218;
      }
      if (v19 <= 0) {
        goto LABEL_81;
      }
      sub_215731D94(a1, (uint64_t)"{", 1);
      std::to_string(&v96, *v18);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v21 = &v96;
      }
      else {
        unint64_t v21 = (std::string *)v96.__r_.__value_.__r.__words[0];
      }
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v22 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v22 = v96.__r_.__value_.__l.__size_;
      }
      sub_215731D94(a1, (uint64_t)v21, v22);
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v96.__r_.__value_.__l.__data_);
      }
      uint64_t v23 = v19 - 1;
      if (v23)
      {
        int64_t v24 = v18 + 1;
        do
        {
          sub_215731D94(a1, (uint64_t)",", 1);
          std::to_string(&v96, *v24);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v25 = &v96;
          }
          else {
            unint64_t v25 = (std::string *)v96.__r_.__value_.__r.__words[0];
          }
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v26 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v26 = v96.__r_.__value_.__l.__size_;
          }
          sub_215731D94(a1, (uint64_t)v25, v26);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v96.__r_.__value_.__l.__data_);
          }
          ++v24;
          --v23;
        }
        while (v23);
      }
      goto LABEL_192;
    case 6u:
      sub_215D15E6C(a2, 6);
      unint64_t v28 = *((void *)*a2 + 5);
      uint64_t v27 = (__int16 *)*((void *)*a2 + 6);
      if (v27) {
        BOOL v29 = 0;
      }
      else {
        BOOL v29 = v28 >= 2;
      }
      if (v29)
      {
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_218;
        }
      }
      else if (v28 <= 1)
      {
        goto LABEL_81;
      }
      sub_215731D94(a1, (uint64_t)"{", 1);
      std::to_string(&v96, *v27);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v66 = &v96;
      }
      else {
        uint64_t v66 = (std::string *)v96.__r_.__value_.__r.__words[0];
      }
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v67 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v67 = v96.__r_.__value_.__l.__size_;
      }
      sub_215731D94(a1, (uint64_t)v66, v67);
      unint64_t v68 = v28 >> 1;
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v96.__r_.__value_.__l.__data_);
      }
      if (v68 != 1)
      {
        uint64_t v69 = v27 + 1;
        uint64_t v70 = 2 * v68 - 2;
        do
        {
          sub_215731D94(a1, (uint64_t)",", 1);
          std::to_string(&v96, *v69);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v71 = &v96;
          }
          else {
            unint64_t v71 = (std::string *)v96.__r_.__value_.__r.__words[0];
          }
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v72 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v72 = v96.__r_.__value_.__l.__size_;
          }
          sub_215731D94(a1, (uint64_t)v71, v72);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v96.__r_.__value_.__l.__data_);
          }
          ++v69;
          v70 -= 2;
        }
        while (v70);
      }
      goto LABEL_192;
    case 7u:
      sub_215D15E6C(a2, 7);
      unint64_t v31 = *((void *)*a2 + 5);
      unint64_t v30 = (int *)*((void *)*a2 + 6);
      if (v30) {
        BOOL v32 = 0;
      }
      else {
        BOOL v32 = v31 >= 4;
      }
      if (v32)
      {
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_218;
        }
      }
      else if (v31 <= 3)
      {
        goto LABEL_81;
      }
      sub_215731D94(a1, (uint64_t)"{", 1);
      std::to_string(&v96, *v30);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v73 = &v96;
      }
      else {
        uint64_t v73 = (std::string *)v96.__r_.__value_.__r.__words[0];
      }
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v74 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v74 = v96.__r_.__value_.__l.__size_;
      }
      sub_215731D94(a1, (uint64_t)v73, v74);
      unint64_t v75 = v31 >> 2;
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v96.__r_.__value_.__l.__data_);
      }
      if (v75 != 1)
      {
        uint64_t v76 = v30 + 1;
        uint64_t v77 = 4 * v75 - 4;
        do
        {
          sub_215731D94(a1, (uint64_t)",", 1);
          std::to_string(&v96, *v76);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v78 = &v96;
          }
          else {
            unint64_t v78 = (std::string *)v96.__r_.__value_.__r.__words[0];
          }
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v79 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v79 = v96.__r_.__value_.__l.__size_;
          }
          sub_215731D94(a1, (uint64_t)v78, v79);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v96.__r_.__value_.__l.__data_);
          }
          ++v76;
          v77 -= 4;
        }
        while (v77);
      }
      goto LABEL_192;
    case 8u:
      sub_215D15E6C(a2, 8);
      unint64_t v34 = *((void *)*a2 + 5);
      unint64_t v33 = (uint64_t *)*((void *)*a2 + 6);
      if (v33) {
        BOOL v35 = 0;
      }
      else {
        BOOL v35 = v34 >= 8;
      }
      if (v35)
      {
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_218;
        }
      }
      else if (v34 <= 7)
      {
        goto LABEL_81;
      }
      sub_215731D94(a1, (uint64_t)"{", 1);
      std::to_string(&v96, *v33);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v80 = &v96;
      }
      else {
        uint64_t v80 = (std::string *)v96.__r_.__value_.__r.__words[0];
      }
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v81 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v81 = v96.__r_.__value_.__l.__size_;
      }
      sub_215731D94(a1, (uint64_t)v80, v81);
      unint64_t v82 = v34 >> 3;
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v96.__r_.__value_.__l.__data_);
      }
      if (v82 != 1)
      {
        uint64_t v90 = v33 + 1;
        uint64_t v91 = 8 * v82 - 8;
        do
        {
          sub_215731D94(a1, (uint64_t)",", 1);
          std::to_string(&v96, *v90);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v92 = &v96;
          }
          else {
            uint64_t v92 = (std::string *)v96.__r_.__value_.__r.__words[0];
          }
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v93 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v93 = v96.__r_.__value_.__l.__size_;
          }
          sub_215731D94(a1, (uint64_t)v92, v93);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v96.__r_.__value_.__l.__data_);
          }
          ++v90;
          v91 -= 8;
        }
        while (v91);
      }
      goto LABEL_192;
    case 0xBu:
      sub_215D15E6C(a2, 11);
      unint64_t v37 = *((void *)*a2 + 5);
      char v36 = (float *)*((void *)*a2 + 6);
      if (v36) {
        BOOL v38 = 0;
      }
      else {
        BOOL v38 = v37 >= 4;
      }
      if (v38)
      {
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_218;
        }
        v96.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
      }
      else
      {
        v96.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
        if (v37 <= 3) {
          goto LABEL_81;
        }
      }
      unint64_t v83 = v37 >> 2;
      sub_215731D94(a1, (uint64_t)"{", 1);
      sub_2159CA5FC((uint64_t)&v94, &v96, v36);
      if (v83 != 1)
      {
        uint64_t v84 = v36 + 1;
        uint64_t v85 = 4 * v83 - 4;
        do
        {
          sub_215731D94(v96.__r_.__value_.__l.__data_, (uint64_t)",", 1);
          sub_2159CA5FC((uint64_t)&v94, &v96, v84++);
          v85 -= 4;
        }
        while (v85);
      }
      goto LABEL_204;
    case 0xCu:
      sub_215D15E6C(a2, 12);
      unint64_t v40 = *((void *)*a2 + 5);
      unint64_t v39 = (double *)*((void *)*a2 + 6);
      if (v39) {
        BOOL v41 = 0;
      }
      else {
        BOOL v41 = v40 >= 8;
      }
      if (v41)
      {
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_218;
        }
        v96.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
      }
      else
      {
        v96.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
        if (v40 <= 7) {
          goto LABEL_81;
        }
      }
      unint64_t v86 = v40 >> 3;
      sub_215731D94(a1, (uint64_t)"{", 1);
      sub_215D179A8((uint64_t)&v94, &v96, v39);
      if (v86 != 1)
      {
        uint64_t v87 = v39 + 1;
        uint64_t v88 = 8 * v86 - 8;
        do
        {
          sub_215731D94(v96.__r_.__value_.__l.__data_, (uint64_t)",", 1);
          sub_215D179A8((uint64_t)&v94, &v96, v87++);
          v88 -= 8;
        }
        while (v88);
      }
LABEL_204:
      unint64_t v43 = (void *)v96.__r_.__value_.__r.__words[0];
      unint64_t v42 = "}";
      goto LABEL_205;
    default:
      sub_215E097D8(**a2);
  }
}

void sub_215D171E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_215D17264(int a1, uint64_t a2)
{
  switch(a1)
  {
    case 0:
      uint64_t v26 = *(void *)(a2 + 8);
      size_t v27 = *(void *)(v26 + 40);
      unint64_t v28 = *(const void **)(v26 + 48);
      if (v28) {
        BOOL v29 = 1;
      }
      else {
        BOOL v29 = v27 == 0;
      }
      if (!v29
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_120;
      }
      uint64_t v30 = *(void *)(a2 + 16);
      uint64_t v32 = *(void *)(v30 + 40);
      unint64_t v31 = *(const void **)(v30 + 48);
      BOOL v33 = v31 || v32 == 0;
      if (!v33
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_120;
      }
      if (v27 != v32) {
        return 0;
      }
      goto LABEL_68;
    case 1:
    case 6:
      uint64_t v3 = *(void *)(a2 + 8);
      unint64_t v5 = *(void *)(v3 + 40);
      uint64_t v4 = *(const void **)(v3 + 48);
      if (v4) {
        BOOL v6 = 0;
      }
      else {
        BOOL v6 = v5 >= 2;
      }
      if (v6
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_120;
      }
      uint64_t v7 = *(void *)(a2 + 16);
      unint64_t v9 = *(void *)(v7 + 40);
      BOOL v8 = *(const void **)(v7 + 48);
      BOOL v10 = !v8 && v9 >= 2;
      if (v10
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_120;
      }
      size_t v11 = v5 & 0xFFFFFFFFFFFFFFFELL;
      if ((v5 & 0xFFFFFFFFFFFFFFFELL) == (v9 & 0xFFFFFFFFFFFFFFFELL)) {
        goto LABEL_43;
      }
      return 0;
    case 2:
    case 7:
      uint64_t v12 = *(void *)(a2 + 8);
      unint64_t v13 = *(void *)(v12 + 40);
      uint64_t v4 = *(const void **)(v12 + 48);
      if (v4) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13 >= 4;
      }
      if (v14
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_120;
      }
      uint64_t v15 = *(void *)(a2 + 16);
      unint64_t v16 = *(void *)(v15 + 40);
      BOOL v8 = *(const void **)(v15 + 48);
      BOOL v17 = !v8 && v16 >= 4;
      if (v17
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_120;
      }
      size_t v11 = v13 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v13 & 0xFFFFFFFFFFFFFFFCLL) == (v16 & 0xFFFFFFFFFFFFFFFCLL)) {
        goto LABEL_43;
      }
      return 0;
    case 3:
    case 8:
      uint64_t v18 = *(void *)(a2 + 8);
      unint64_t v19 = *(void *)(v18 + 40);
      uint64_t v4 = *(const void **)(v18 + 48);
      if (v4) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = v19 >= 8;
      }
      if (v20
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_120;
      }
      uint64_t v21 = *(void *)(a2 + 16);
      unint64_t v22 = *(void *)(v21 + 40);
      BOOL v8 = *(const void **)(v21 + 48);
      BOOL v23 = !v8 && v22 >= 8;
      if (v23
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_120;
      }
      size_t v11 = v19 & 0xFFFFFFFFFFFFFFF8;
      if ((v19 & 0xFFFFFFFFFFFFFFF8) != (v22 & 0xFFFFFFFFFFFFFFF8)) {
        return 0;
      }
LABEL_43:
      int64_t v24 = v4;
      unint64_t v25 = v8;
      return memcmp(v24, v25, v11) == 0;
    case 5:
      uint64_t v34 = *(void *)(a2 + 8);
      size_t v27 = *(void *)(v34 + 40);
      unint64_t v28 = *(const void **)(v34 + 48);
      if (v28) {
        BOOL v35 = 1;
      }
      else {
        BOOL v35 = v27 == 0;
      }
      if (!v35
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_120;
      }
      uint64_t v36 = *(void *)(a2 + 16);
      uint64_t v37 = *(void *)(v36 + 40);
      unint64_t v31 = *(const void **)(v36 + 48);
      BOOL v38 = v31 || v37 == 0;
      if (!v38
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_120;
      }
      if (v27 != v37) {
        return 0;
      }
LABEL_68:
      int64_t v24 = v28;
      unint64_t v25 = v31;
      size_t v11 = v27;
      return memcmp(v24, v25, v11) == 0;
    case 11:
      uint64_t v40 = *(void *)(a2 + 8);
      unint64_t v42 = *(void *)(v40 + 40);
      BOOL v41 = *(float **)(v40 + 48);
      if (v41) {
        BOOL v43 = 0;
      }
      else {
        BOOL v43 = v42 >= 4;
      }
      if (v43
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_120;
      }
      uint64_t v44 = *(void *)(a2 + 16);
      unint64_t v46 = *(void *)(v44 + 40);
      uint64_t v45 = *(float **)(v44 + 48);
      BOOL v47 = !v45 && v46 >= 4;
      if (v47
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_120;
      }
      unint64_t v48 = v42 >> 2;
      unint64_t v49 = v46 >> 2;
      if (v42 >> 2 != v46 >> 2) {
        return 0;
      }
      if (v42 < 4)
      {
        unsigned int v50 = v45;
        std::string::size_type v51 = v41;
LABEL_85:
        uint64_t v52 = &v41[v48];
        std::string::size_type v53 = &v45[v49];
        return v51 == v52 && v50 == v53;
      }
      uint64_t v66 = 4 * v48 - 4;
      uint64_t v67 = 4 * v49 - 4;
      std::string::size_type v51 = v41;
      unsigned int v50 = v45;
      while (*v51 == *v50)
      {
        ++v51;
        ++v50;
        if (v66)
        {
          v66 -= 4;
          uint64_t v68 = v67;
          v67 -= 4;
          if (v68) {
            continue;
          }
        }
        goto LABEL_85;
      }
      return 0;
    case 12:
      uint64_t v54 = *(void *)(a2 + 8);
      unint64_t v56 = *(void *)(v54 + 40);
      unint64_t v55 = *(float **)(v54 + 48);
      if (v55) {
        BOOL v57 = 0;
      }
      else {
        BOOL v57 = v56 >= 8;
      }
      if (v57
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| ((uint64_t v58 = *(void *)(a2 + 16), v60 = *(void *)(v58 + 40), (v59 = *(float **)(v58 + 48)) == 0)? (v61 = v60 >= 8): (v61 = 0), v61&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
      {
LABEL_120:
        abort();
      }
      unint64_t v62 = v56 >> 3;
      unint64_t v63 = v60 >> 3;
      if (v56 >> 3 != v60 >> 3) {
        return 0;
      }
      if (v56 >= 8)
      {
        uint64_t v69 = 8 * v62 - 8;
        uint64_t v70 = 8 * v63 - 8;
        std::string::size_type v51 = v55;
        unsigned int v50 = v59;
        do
        {
          if (*(double *)v51 != *(double *)v50) {
            return 0;
          }
          v51 += 2;
          v50 += 2;
          if (!v69) {
            break;
          }
          v69 -= 8;
          uint64_t v71 = v70;
          v70 -= 8;
        }
        while (v71);
      }
      else
      {
        unsigned int v50 = v59;
        std::string::size_type v51 = v55;
      }
      uint64_t v52 = &v55[2 * v62];
      std::string::size_type v53 = &v59[2 * v63];
      return v51 == v52 && v50 == v53;
    default:
      sub_215E097D8(a1);
  }
}

void sub_215D178F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C683E78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D17918(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C683E78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D1796C(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void, uint64_t, void, void, void))(result + 32);
  if (v1) {
    return v1(0, result + 32, 0, 0, 0);
  }
  return result;
}

void sub_215D179A8(uint64_t a1, void **a2, double *a3)
{
  std::to_string(&v23, *a3);
  unint64_t v5 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v6 = &v23;
  }
  else {
    BOOL v6 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v23.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = size;
  do
  {
    if (!v8)
    {
      uint64_t v8 = -1;
      if ((*((unsigned char *)&v23.__r_.__value_.__s + 23) & 0x80) != 0) {
        goto LABEL_14;
      }
LABEL_11:
      if (v8 != HIBYTE(v23.__r_.__value_.__r.__words[2]) - 1)
      {
        unint64_t v5 = &v23;
        goto LABEL_16;
      }
LABEL_15:
      sub_215731D94(*a2, (uint64_t)v6, size);
LABEL_48:
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
      goto LABEL_51;
    }
    int v9 = v6->__r_.__value_.__s.__data_[--v8];
  }
  while (v9 == 48);
  if ((*((unsigned char *)&v23.__r_.__value_.__s + 23) & 0x80) == 0) {
    goto LABEL_11;
  }
LABEL_14:
  if (v8 == v23.__r_.__value_.__l.__size_ - 1) {
    goto LABEL_15;
  }
LABEL_16:
  if (strtod((const char *)v5, 0) != *a3)
  {
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v6 = &v23;
    }
    else {
      BOOL v6 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v23.__r_.__value_.__l.__size_;
    }
    goto LABEL_15;
  }
  std::string::size_type v10 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v11 = &v23;
  }
  else {
    size_t v11 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v10 = v23.__r_.__value_.__l.__size_;
  }
  uint64_t v12 = 1;
  if (v11->__r_.__value_.__s.__data_[v8] == 46) {
    uint64_t v12 = 2;
  }
  size_t v13 = v12 + v8;
  if (v10 >= v13) {
    size_t v14 = v13;
  }
  else {
    size_t v14 = v10;
  }
  if (v14 >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    p_p = operator new(v16 + 1);
    size_t v21 = v14;
    int64_t v22 = v17 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_40;
  }
  HIBYTE(v22) = v14;
  p_p = &__p;
  if (v14) {
LABEL_40:
  }
    memmove(p_p, v11, v14);
  *((unsigned char *)p_p + v14) = 0;
  if (v22 >= 0) {
    uint64_t v18 = &__p;
  }
  else {
    uint64_t v18 = __p;
  }
  if (v22 >= 0) {
    uint64_t v19 = HIBYTE(v22);
  }
  else {
    uint64_t v19 = v21;
  }
  sub_215731D94(*a2, (uint64_t)v18, v19);
  if ((SHIBYTE(v22) & 0x80000000) == 0) {
    goto LABEL_48;
  }
  operator delete(__p);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return;
  }
LABEL_51:
  operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_215D17BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_215D17C18(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if ((*(unsigned char *)(*(void *)a1 + 56) & 1) != 0
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return a1;
}

void sub_215D17C98(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215D17CEC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (0xAAAAAAAAAAAAAAABLL * *(void *)(*(void *)a1 + 56) >= 0x5555555555555556
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return a1;
}

void sub_215D17D84(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215D17DD8()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_215D18018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D180B4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D180EC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    unint64_t v2 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x2166C4D20);
  }
  return result;
}

uint64_t sub_215D18150(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteINS_6vectorIN4cv3d3esn4math6VectorIiLj2EEENS_9allocatorIS6_EEEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteINS_6vectorIN4cv3d3esn4math6VectorIiLj2EEENS_9allocatorIS6_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteINS_6vectorIN4cv3d3esn4math6VectorIiLj2EEENS_9allocatorIS6_EEEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteINS_6vectorIN4cv3d3esn4math6VectorIiLj2EEENS_9allocatorIS6_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

void *sub_215D181C4(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  dispatch_workloop_t result = &unk_26C683F50;
  switch(v5)
  {
    case 1:
      uint64_t v9 = a2[2];
      a3[1] = a2[1];
      a3[2] = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      dispatch_workloop_t result = 0;
      *a3 = sub_215D181C4;
      return result;
    case 2:
      dispatch_workloop_t result = 0;
      *(_OWORD *)(a3 + 1) = *(_OWORD *)(a2 + 1);
      a2[1] = 0;
      a2[2] = 0;
      *a3 = sub_215D181C4;
      *a2 = 0;
      return result;
    case 3:
      if (a4)
      {
        unint64_t v10 = *(void *)(a4 + 8);
        if ((char *)v10 != "NSt3__110shared_ptrINS_6vectorIN4cv3d3esn4math6VectorIiLj2EEENS_9allocatorIS6_EEEEEE")
        {
          if (((v10 & (unint64_t)"NSt3__110shared_ptrINS_6vectorIN4cv3d3esn4math6VectorIiLj2EEENS_9allocatorIS6_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v10, "NSt3__110shared_ptrINS_6vectorIN4cv3d3esn4math6VectorIiLj2EEENS_9allocatorIS6_EEEEEE"))return 0; {
          if (strcmp((const char *)(v10 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrINS_6vectorIN4cv3d3esn4math6VectorIiLj2EEENS_9allocatorIS6_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
          }
          {
            return 0;
          }
        }
      }
      else if (a5 != &unk_215EF7E1C)
      {
        return 0;
      }
      return a2 + 1;
    case 4:
      return result;
    default:
      uint64_t v8 = (std::__shared_weak_count *)a2[2];
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      dispatch_workloop_t result = 0;
      *a2 = 0;
      return result;
  }
}

void sub_215D1835C()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_215D185B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D18650(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D18688(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    unint64_t v2 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x2166C4D20);
  }
  return result;
}

uint64_t sub_215D186EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteINS_6vectorIN4cv3d3esn4math6VectorIiLj3EEENS_9allocatorIS6_EEEEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteINS_6vectorIN4cv3d3esn4math6VectorIiLj3EEENS_9allocatorIS6_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteINS_6vectorIN4cv3d3esn4math6VectorIiLj3EEENS_9allocatorIS6_EEEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteINS_6vectorIN4cv3d3esn4math6VectorIiLj3EEENS_9allocatorIS6_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

void *sub_215D18760(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  dispatch_workloop_t result = &unk_26C683FB0;
  switch(v5)
  {
    case 1:
      uint64_t v9 = a2[2];
      a3[1] = a2[1];
      a3[2] = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      dispatch_workloop_t result = 0;
      *a3 = sub_215D18760;
      return result;
    case 2:
      dispatch_workloop_t result = 0;
      *(_OWORD *)(a3 + 1) = *(_OWORD *)(a2 + 1);
      a2[1] = 0;
      a2[2] = 0;
      *a3 = sub_215D18760;
      *a2 = 0;
      return result;
    case 3:
      if (a4)
      {
        unint64_t v10 = *(void *)(a4 + 8);
        if ((char *)v10 != "NSt3__110shared_ptrINS_6vectorIN4cv3d3esn4math6VectorIiLj3EEENS_9allocatorIS6_EEEEEE")
        {
          if (((v10 & (unint64_t)"NSt3__110shared_ptrINS_6vectorIN4cv3d3esn4math6VectorIiLj3EEENS_9allocatorIS6_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v10, "NSt3__110shared_ptrINS_6vectorIN4cv3d3esn4math6VectorIiLj3EEENS_9allocatorIS6_EEEEEE"))return 0; {
          if (strcmp((const char *)(v10 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrINS_6vectorIN4cv3d3esn4math6VectorIiLj3EEENS_9allocatorIS6_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
          }
          {
            return 0;
          }
        }
      }
      else if (a5 != &unk_215EF7F54)
      {
        return 0;
      }
      return a2 + 1;
    case 4:
      return result;
    default:
      uint64_t v8 = (std::__shared_weak_count *)a2[2];
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      dispatch_workloop_t result = 0;
      *a2 = 0;
      return result;
  }
}

void *sub_215D188F8(int a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  switch(a1)
  {
    case 0:
      dispatch_workloop_t result = sub_215D18A78((uint64_t)v4);
      break;
    case 1:
      dispatch_workloop_t result = sub_215D18BCC((uint64_t)v4);
      break;
    case 2:
      dispatch_workloop_t result = sub_215D18D20((uint64_t)v4);
      break;
    case 3:
      dispatch_workloop_t result = sub_215D18E74((uint64_t)v4);
      break;
    case 5:
      dispatch_workloop_t result = sub_215D18FC8((uint64_t)v4);
      break;
    case 6:
      dispatch_workloop_t result = sub_215D1911C((uint64_t)v4);
      break;
    case 7:
      dispatch_workloop_t result = sub_215D19270((uint64_t)v4);
      break;
    case 8:
      dispatch_workloop_t result = sub_215D193C4((uint64_t)v4);
      break;
    case 11:
      dispatch_workloop_t result = sub_215D19518((uint64_t)v4);
      break;
    case 12:
      dispatch_workloop_t result = sub_215D1966C((uint64_t)v4);
      break;
    default:
      sub_215E097D8(a1);
  }
  return result;
}

void *sub_215D18A78(uint64_t a1)
{
  unint64_t v2 = sub_215D15FDC(*(unsigned __int8 ***)a1);
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v2 >= 2;
  }
  if (v6)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v8 = **(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v7 = *(void ***)(a1 + 8);
    uint64_t v8 = *v7;
    if (v2 <= 1)
    {
      uint64_t v9 = "{}";
      unint64_t v10 = *v7;
      uint64_t v11 = 2;
      return sub_215731D94(v10, (uint64_t)v9, v11);
    }
  }
  unint64_t v13 = v3 >> 1;
  sub_215731D94(v8, (uint64_t)"{", 1);
  sub_215D0FD08(v8, v5);
  if (v13 != 1)
  {
    size_t v14 = v5 + 2;
    uint64_t v15 = 2 * v13 - 2;
    do
    {
      sub_215731D94(v8, (uint64_t)",", 1);
      sub_215D0FD08(v8, v14);
      v14 += 2;
      v15 -= 2;
    }
    while (v15);
  }
  uint64_t v9 = "}";
  unint64_t v10 = v8;
  uint64_t v11 = 1;

  return sub_215731D94(v10, (uint64_t)v9, v11);
}

void *sub_215D18BCC(uint64_t a1)
{
  unint64_t v2 = sub_215D160E4(*(unsigned __int8 ***)a1);
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v2 >= 2;
  }
  if (v6)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v8 = **(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v7 = *(void ***)(a1 + 8);
    uint64_t v8 = *v7;
    if (v2 <= 1)
    {
      uint64_t v9 = "{}";
      unint64_t v10 = *v7;
      uint64_t v11 = 2;
      return sub_215731D94(v10, (uint64_t)v9, v11);
    }
  }
  unint64_t v13 = v3 >> 1;
  sub_215731D94(v8, (uint64_t)"{", 1);
  sub_215D0FFF8(v8, v5);
  if (v13 != 1)
  {
    size_t v14 = v5 + 2;
    uint64_t v15 = 4 * v13 - 4;
    do
    {
      sub_215731D94(v8, (uint64_t)",", 1);
      sub_215D0FFF8(v8, v14);
      v14 += 2;
      v15 -= 4;
    }
    while (v15);
  }
  uint64_t v9 = "}";
  unint64_t v10 = v8;
  uint64_t v11 = 1;

  return sub_215731D94(v10, (uint64_t)v9, v11);
}

void *sub_215D18D20(uint64_t a1)
{
  unint64_t v2 = sub_215D161EC(*(unsigned __int8 ***)a1);
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v2 >= 2;
  }
  if (v6)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v8 = **(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v7 = *(void ***)(a1 + 8);
    uint64_t v8 = *v7;
    if (v2 <= 1)
    {
      uint64_t v9 = "{}";
      unint64_t v10 = *v7;
      uint64_t v11 = 2;
      return sub_215731D94(v10, (uint64_t)v9, v11);
    }
  }
  unint64_t v13 = v3 >> 1;
  sub_215731D94(v8, (uint64_t)"{", 1);
  sub_215B65F80(v8, v5);
  if (v13 != 1)
  {
    size_t v14 = v5 + 2;
    uint64_t v15 = 8 * v13 - 8;
    do
    {
      sub_215731D94(v8, (uint64_t)",", 1);
      sub_215B65F80(v8, v14);
      v14 += 2;
      v15 -= 8;
    }
    while (v15);
  }
  uint64_t v9 = "}";
  unint64_t v10 = v8;
  uint64_t v11 = 1;

  return sub_215731D94(v10, (uint64_t)v9, v11);
}

void *sub_215D18E74(uint64_t a1)
{
  unint64_t v2 = sub_215D162F4(*(unsigned __int8 ***)a1);
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v2 >= 2;
  }
  if (v6)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v8 = **(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v7 = *(void ***)(a1 + 8);
    uint64_t v8 = *v7;
    if (v2 <= 1)
    {
      uint64_t v9 = "{}";
      unint64_t v10 = *v7;
      uint64_t v11 = 2;
      return sub_215731D94(v10, (uint64_t)v9, v11);
    }
  }
  unint64_t v13 = v3 >> 1;
  sub_215731D94(v8, (uint64_t)"{", 1);
  sub_215D102E8(v8, v5);
  if (v13 != 1)
  {
    size_t v14 = v5 + 2;
    uint64_t v15 = 16 * v13 - 16;
    do
    {
      sub_215731D94(v8, (uint64_t)",", 1);
      sub_215D102E8(v8, v14);
      v14 += 2;
      v15 -= 16;
    }
    while (v15);
  }
  uint64_t v9 = "}";
  unint64_t v10 = v8;
  uint64_t v11 = 1;

  return sub_215731D94(v10, (uint64_t)v9, v11);
}

void *sub_215D18FC8(uint64_t a1)
{
  unint64_t v2 = sub_215D15F58(*(unsigned __int8 ***)a1);
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v2 >= 2;
  }
  if (v6)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v8 = **(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v7 = *(void ***)(a1 + 8);
    uint64_t v8 = *v7;
    if (v2 <= 1)
    {
      uint64_t v9 = "{}";
      unint64_t v10 = *v7;
      uint64_t v11 = 2;
      return sub_215731D94(v10, (uint64_t)v9, v11);
    }
  }
  unint64_t v13 = v3 >> 1;
  sub_215731D94(v8, (uint64_t)"{", 1);
  sub_215D105D8(v8, v5);
  if (v13 != 1)
  {
    size_t v14 = v5 + 2;
    uint64_t v15 = 2 * v13 - 2;
    do
    {
      sub_215731D94(v8, (uint64_t)",", 1);
      sub_215D105D8(v8, v14);
      v14 += 2;
      v15 -= 2;
    }
    while (v15);
  }
  uint64_t v9 = "}";
  unint64_t v10 = v8;
  uint64_t v11 = 1;

  return sub_215731D94(v10, (uint64_t)v9, v11);
}

void *sub_215D1911C(uint64_t a1)
{
  unint64_t v2 = sub_215D16060(*(unsigned __int8 ***)a1);
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v2 >= 2;
  }
  if (v6)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v8 = **(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v7 = *(void ***)(a1 + 8);
    uint64_t v8 = *v7;
    if (v2 <= 1)
    {
      uint64_t v9 = "{}";
      unint64_t v10 = *v7;
      uint64_t v11 = 2;
      return sub_215731D94(v10, (uint64_t)v9, v11);
    }
  }
  unint64_t v13 = v3 >> 1;
  sub_215731D94(v8, (uint64_t)"{", 1);
  sub_215D108C8(v8, v5);
  if (v13 != 1)
  {
    size_t v14 = v5 + 2;
    uint64_t v15 = 4 * v13 - 4;
    do
    {
      sub_215731D94(v8, (uint64_t)",", 1);
      sub_215D108C8(v8, v14);
      v14 += 2;
      v15 -= 4;
    }
    while (v15);
  }
  uint64_t v9 = "}";
  unint64_t v10 = v8;
  uint64_t v11 = 1;

  return sub_215731D94(v10, (uint64_t)v9, v11);
}

void *sub_215D19270(uint64_t a1)
{
  unint64_t v2 = sub_215D16168(*(unsigned __int8 ***)a1);
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v2 >= 2;
  }
  if (v6)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v8 = **(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v7 = *(void ***)(a1 + 8);
    uint64_t v8 = *v7;
    if (v2 <= 1)
    {
      uint64_t v9 = "{}";
      unint64_t v10 = *v7;
      uint64_t v11 = 2;
      return sub_215731D94(v10, (uint64_t)v9, v11);
    }
  }
  unint64_t v13 = v3 >> 1;
  sub_215731D94(v8, (uint64_t)"{", 1);
  sub_215D10BB8(v8, v5);
  if (v13 != 1)
  {
    size_t v14 = v5 + 2;
    uint64_t v15 = 8 * v13 - 8;
    do
    {
      sub_215731D94(v8, (uint64_t)",", 1);
      sub_215D10BB8(v8, v14);
      v14 += 2;
      v15 -= 8;
    }
    while (v15);
  }
  uint64_t v9 = "}";
  unint64_t v10 = v8;
  uint64_t v11 = 1;

  return sub_215731D94(v10, (uint64_t)v9, v11);
}

void *sub_215D193C4(uint64_t a1)
{
  unint64_t v2 = sub_215D16270(*(unsigned __int8 ***)a1);
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v2 >= 2;
  }
  if (v6)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v8 = **(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v7 = *(void ***)(a1 + 8);
    uint64_t v8 = *v7;
    if (v2 <= 1)
    {
      uint64_t v9 = "{}";
      unint64_t v10 = *v7;
      uint64_t v11 = 2;
      return sub_215731D94(v10, (uint64_t)v9, v11);
    }
  }
  unint64_t v13 = v3 >> 1;
  sub_215731D94(v8, (uint64_t)"{", 1);
  sub_215D10EA8(v8, v5);
  if (v13 != 1)
  {
    size_t v14 = v5 + 2;
    uint64_t v15 = 16 * v13 - 16;
    do
    {
      sub_215731D94(v8, (uint64_t)",", 1);
      sub_215D10EA8(v8, v14);
      v14 += 2;
      v15 -= 16;
    }
    while (v15);
  }
  uint64_t v9 = "}";
  unint64_t v10 = v8;
  uint64_t v11 = 1;

  return sub_215731D94(v10, (uint64_t)v9, v11);
}

void *sub_215D19518(uint64_t a1)
{
  unint64_t v2 = sub_215D16378(*(unsigned __int8 ***)a1);
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v2 >= 2;
  }
  if (v6)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v8 = **(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v7 = *(void ***)(a1 + 8);
    uint64_t v8 = *v7;
    if (v2 <= 1)
    {
      uint64_t v9 = "{}";
      unint64_t v10 = *v7;
      uint64_t v11 = 2;
      return sub_215731D94(v10, (uint64_t)v9, v11);
    }
  }
  unint64_t v13 = v3 >> 1;
  sub_215731D94(v8, (uint64_t)"{", 1);
  sub_215D11198(v8, v5);
  if (v13 != 1)
  {
    size_t v14 = v5 + 2;
    uint64_t v15 = 8 * v13 - 8;
    do
    {
      sub_215731D94(v8, (uint64_t)",", 1);
      sub_215D11198(v8, v14);
      v14 += 2;
      v15 -= 8;
    }
    while (v15);
  }
  uint64_t v9 = "}";
  unint64_t v10 = v8;
  uint64_t v11 = 1;

  return sub_215731D94(v10, (uint64_t)v9, v11);
}

void *sub_215D1966C(uint64_t a1)
{
  unint64_t v2 = sub_215D163FC(*(unsigned __int8 ***)a1);
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v2 >= 2;
  }
  if (v6)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v8 = **(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v7 = *(void ***)(a1 + 8);
    uint64_t v8 = *v7;
    if (v2 <= 1)
    {
      uint64_t v9 = "{}";
      unint64_t v10 = *v7;
      uint64_t v11 = 2;
      return sub_215731D94(v10, (uint64_t)v9, v11);
    }
  }
  unint64_t v13 = v3 >> 1;
  sub_215731D94(v8, (uint64_t)"{", 1);
  sub_215D112C8(v8, v5);
  if (v13 != 1)
  {
    size_t v14 = v5 + 2;
    uint64_t v15 = 16 * v13 - 16;
    do
    {
      sub_215731D94(v8, (uint64_t)",", 1);
      sub_215D112C8(v8, v14);
      v14 += 2;
      v15 -= 16;
    }
    while (v15);
  }
  uint64_t v9 = "}";
  unint64_t v10 = v8;
  uint64_t v11 = 1;

  return sub_215731D94(v10, (uint64_t)v9, v11);
}

void *sub_215D197C0(int a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  switch(a1)
  {
    case 0:
      dispatch_workloop_t result = sub_215D19940((uint64_t)v4);
      break;
    case 1:
      dispatch_workloop_t result = sub_215D19AA4((uint64_t)v4);
      break;
    case 2:
      dispatch_workloop_t result = sub_215D19C0C((uint64_t)v4);
      break;
    case 3:
      dispatch_workloop_t result = sub_215D19D74((uint64_t)v4);
      break;
    case 5:
      dispatch_workloop_t result = sub_215D19EDC((uint64_t)v4);
      break;
    case 6:
      dispatch_workloop_t result = sub_215D1A040((uint64_t)v4);
      break;
    case 7:
      dispatch_workloop_t result = sub_215D1A1A8((uint64_t)v4);
      break;
    case 8:
      dispatch_workloop_t result = sub_215D1A310((uint64_t)v4);
      break;
    case 11:
      dispatch_workloop_t result = sub_215D1A478((uint64_t)v4);
      break;
    case 12:
      dispatch_workloop_t result = sub_215D1A5E0((uint64_t)v4);
      break;
    default:
      sub_215E097D8(a1);
  }
  return result;
}

void *sub_215D19940(uint64_t a1)
{
  unint64_t v2 = sub_215D15FDC(*(unsigned __int8 ***)a1);
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v2 >= 3;
  }
  if (v6)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v8 = **(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v7 = *(void ***)(a1 + 8);
    uint64_t v8 = *v7;
    if (v2 <= 2)
    {
      uint64_t v9 = "{}";
      unint64_t v10 = *v7;
      uint64_t v11 = 2;
      return sub_215731D94(v10, (uint64_t)v9, v11);
    }
  }
  sub_215731D94(v8, (uint64_t)"{", 1);
  sub_215D12508(v8, v5);
  if (v3 - 3 >= 3)
  {
    unint64_t v13 = v5 + 3;
    unint64_t v14 = 3 * (v3 / 3) - 3;
    do
    {
      sub_215731D94(v8, (uint64_t)",", 1);
      sub_215D12508(v8, v13);
      v13 += 3;
      v14 -= 3;
    }
    while (v14);
  }
  uint64_t v9 = "}";
  unint64_t v10 = v8;
  uint64_t v11 = 1;

  return sub_215731D94(v10, (uint64_t)v9, v11);
}

void *sub_215D19AA4(uint64_t a1)
{
  unint64_t v2 = sub_215D160E4(*(unsigned __int8 ***)a1);
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v2 >= 3;
  }
  if (v6)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v8 = **(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v7 = *(void ***)(a1 + 8);
    uint64_t v8 = *v7;
    if (v2 <= 2)
    {
      uint64_t v9 = "{}";
      unint64_t v10 = *v7;
      uint64_t v11 = 2;
      return sub_215731D94(v10, (uint64_t)v9, v11);
    }
  }
  sub_215731D94(v8, (uint64_t)"{", 1);
  sub_215D1287C(v8, v5);
  if (v3 - 3 >= 3)
  {
    unint64_t v13 = v5 + 3;
    unint64_t v14 = 6 * (v3 / 3) - 6;
    do
    {
      sub_215731D94(v8, (uint64_t)",", 1);
      sub_215D1287C(v8, v13);
      v13 += 3;
      v14 -= 6;
    }
    while (v14);
  }
  uint64_t v9 = "}";
  unint64_t v10 = v8;
  uint64_t v11 = 1;

  return sub_215731D94(v10, (uint64_t)v9, v11);
}

void *sub_215D19C0C(uint64_t a1)
{
  unint64_t v2 = sub_215D161EC(*(unsigned __int8 ***)a1);
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v2 >= 3;
  }
  if (v6)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v8 = **(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v7 = *(void ***)(a1 + 8);
    uint64_t v8 = *v7;
    if (v2 <= 2)
    {
      uint64_t v9 = "{}";
      unint64_t v10 = *v7;
      uint64_t v11 = 2;
      return sub_215731D94(v10, (uint64_t)v9, v11);
    }
  }
  sub_215731D94(v8, (uint64_t)"{", 1);
  sub_215D12BF0(v8, v5);
  if (v3 - 3 >= 3)
  {
    unint64_t v13 = v5 + 3;
    unint64_t v14 = 12 * (v3 / 3) - 12;
    do
    {
      sub_215731D94(v8, (uint64_t)",", 1);
      sub_215D12BF0(v8, v13);
      v13 += 3;
      v14 -= 12;
    }
    while (v14);
  }
  uint64_t v9 = "}";
  unint64_t v10 = v8;
  uint64_t v11 = 1;

  return sub_215731D94(v10, (uint64_t)v9, v11);
}

void *sub_215D19D74(uint64_t a1)
{
  unint64_t v2 = sub_215D162F4(*(unsigned __int8 ***)a1);
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v2 >= 3;
  }
  if (v6)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v8 = **(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v7 = *(void ***)(a1 + 8);
    uint64_t v8 = *v7;
    if (v2 <= 2)
    {
      uint64_t v9 = "{}";
      unint64_t v10 = *v7;
      uint64_t v11 = 2;
      return sub_215731D94(v10, (uint64_t)v9, v11);
    }
  }
  sub_215731D94(v8, (uint64_t)"{", 1);
  sub_215D12D20(v8, v5);
  if (v3 - 3 >= 3)
  {
    unint64_t v13 = v5 + 3;
    unint64_t v14 = 24 * (v3 / 3) - 24;
    do
    {
      sub_215731D94(v8, (uint64_t)",", 1);
      sub_215D12D20(v8, v13);
      v13 += 3;
      v14 -= 24;
    }
    while (v14);
  }
  uint64_t v9 = "}";
  unint64_t v10 = v8;
  uint64_t v11 = 1;

  return sub_215731D94(v10, (uint64_t)v9, v11);
}

void *sub_215D19EDC(uint64_t a1)
{
  unint64_t v2 = sub_215D15F58(*(unsigned __int8 ***)a1);
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v2 >= 3;
  }
  if (v6)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v8 = **(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v7 = *(void ***)(a1 + 8);
    uint64_t v8 = *v7;
    if (v2 <= 2)
    {
      uint64_t v9 = "{}";
      unint64_t v10 = *v7;
      uint64_t v11 = 2;
      return sub_215731D94(v10, (uint64_t)v9, v11);
    }
  }
  sub_215731D94(v8, (uint64_t)"{", 1);
  sub_215D13094(v8, v5);
  if (v3 - 3 >= 3)
  {
    unint64_t v13 = v5 + 3;
    unint64_t v14 = 3 * (v3 / 3) - 3;
    do
    {
      sub_215731D94(v8, (uint64_t)",", 1);
      sub_215D13094(v8, v13);
      v13 += 3;
      v14 -= 3;
    }
    while (v14);
  }
  uint64_t v9 = "}";
  unint64_t v10 = v8;
  uint64_t v11 = 1;

  return sub_215731D94(v10, (uint64_t)v9, v11);
}

void *sub_215D1A040(uint64_t a1)
{
  unint64_t v2 = sub_215D16060(*(unsigned __int8 ***)a1);
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v2 >= 3;
  }
  if (v6)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v8 = **(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v7 = *(void ***)(a1 + 8);
    uint64_t v8 = *v7;
    if (v2 <= 2)
    {
      uint64_t v9 = "{}";
      unint64_t v10 = *v7;
      uint64_t v11 = 2;
      return sub_215731D94(v10, (uint64_t)v9, v11);
    }
  }
  sub_215731D94(v8, (uint64_t)"{", 1);
  sub_215D13408(v8, v5);
  if (v3 - 3 >= 3)
  {
    unint64_t v13 = v5 + 3;
    unint64_t v14 = 6 * (v3 / 3) - 6;
    do
    {
      sub_215731D94(v8, (uint64_t)",", 1);
      sub_215D13408(v8, v13);
      v13 += 3;
      v14 -= 6;
    }
    while (v14);
  }
  uint64_t v9 = "}";
  unint64_t v10 = v8;
  uint64_t v11 = 1;

  return sub_215731D94(v10, (uint64_t)v9, v11);
}

void *sub_215D1A1A8(uint64_t a1)
{
  unint64_t v2 = sub_215D16168(*(unsigned __int8 ***)a1);
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v2 >= 3;
  }
  if (v6)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v8 = **(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v7 = *(void ***)(a1 + 8);
    uint64_t v8 = *v7;
    if (v2 <= 2)
    {
      uint64_t v9 = "{}";
      unint64_t v10 = *v7;
      uint64_t v11 = 2;
      return sub_215731D94(v10, (uint64_t)v9, v11);
    }
  }
  sub_215731D94(v8, (uint64_t)"{", 1);
  sub_215D1377C(v8, v5);
  if (v3 - 3 >= 3)
  {
    unint64_t v13 = v5 + 3;
    unint64_t v14 = 12 * (v3 / 3) - 12;
    do
    {
      sub_215731D94(v8, (uint64_t)",", 1);
      sub_215D1377C(v8, v13);
      v13 += 3;
      v14 -= 12;
    }
    while (v14);
  }
  uint64_t v9 = "}";
  unint64_t v10 = v8;
  uint64_t v11 = 1;

  return sub_215731D94(v10, (uint64_t)v9, v11);
}

void *sub_215D1A310(uint64_t a1)
{
  unint64_t v2 = sub_215D16270(*(unsigned __int8 ***)a1);
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v2 >= 3;
  }
  if (v6)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v8 = **(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v7 = *(void ***)(a1 + 8);
    uint64_t v8 = *v7;
    if (v2 <= 2)
    {
      uint64_t v9 = "{}";
      unint64_t v10 = *v7;
      uint64_t v11 = 2;
      return sub_215731D94(v10, (uint64_t)v9, v11);
    }
  }
  sub_215731D94(v8, (uint64_t)"{", 1);
  sub_215D13AF0(v8, v5);
  if (v3 - 3 >= 3)
  {
    unint64_t v13 = v5 + 3;
    unint64_t v14 = 24 * (v3 / 3) - 24;
    do
    {
      sub_215731D94(v8, (uint64_t)",", 1);
      sub_215D13AF0(v8, v13);
      v13 += 3;
      v14 -= 24;
    }
    while (v14);
  }
  uint64_t v9 = "}";
  unint64_t v10 = v8;
  uint64_t v11 = 1;

  return sub_215731D94(v10, (uint64_t)v9, v11);
}

void *sub_215D1A478(uint64_t a1)
{
  unint64_t v2 = sub_215D16378(*(unsigned __int8 ***)a1);
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v2 >= 3;
  }
  if (v6)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v8 = **(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v7 = *(void ***)(a1 + 8);
    uint64_t v8 = *v7;
    if (v2 <= 2)
    {
      uint64_t v9 = "{}";
      unint64_t v10 = *v7;
      uint64_t v11 = 2;
      return sub_215731D94(v10, (uint64_t)v9, v11);
    }
  }
  sub_215731D94(v8, (uint64_t)"{", 1);
  sub_215D13E64(v8, v5);
  if (v3 - 3 >= 3)
  {
    unint64_t v13 = v5 + 3;
    unint64_t v14 = 12 * (v3 / 3) - 12;
    do
    {
      sub_215731D94(v8, (uint64_t)",", 1);
      sub_215D13E64(v8, v13);
      v13 += 3;
      v14 -= 12;
    }
    while (v14);
  }
  uint64_t v9 = "}";
  unint64_t v10 = v8;
  uint64_t v11 = 1;

  return sub_215731D94(v10, (uint64_t)v9, v11);
}

void *sub_215D1A5E0(uint64_t a1)
{
  unint64_t v2 = sub_215D163FC(*(unsigned __int8 ***)a1);
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v2 >= 3;
  }
  if (v6)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v8 = **(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v7 = *(void ***)(a1 + 8);
    uint64_t v8 = *v7;
    if (v2 <= 2)
    {
      uint64_t v9 = "{}";
      unint64_t v10 = *v7;
      uint64_t v11 = 2;
      return sub_215731D94(v10, (uint64_t)v9, v11);
    }
  }
  sub_215731D94(v8, (uint64_t)"{", 1);
  sub_215D13F94(v8, v5);
  if (v3 - 3 >= 3)
  {
    unint64_t v13 = v5 + 3;
    unint64_t v14 = 24 * (v3 / 3) - 24;
    do
    {
      sub_215731D94(v8, (uint64_t)",", 1);
      sub_215D13F94(v8, v13);
      v13 += 3;
      v14 -= 24;
    }
    while (v14);
  }
  uint64_t v9 = "}";
  unint64_t v10 = v8;
  uint64_t v11 = 1;

  return sub_215731D94(v10, (uint64_t)v9, v11);
}

uint64_t sub_215D1A748(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  int v5 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8));
  int v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 24))(*(void *)(a2 + 8));
  int v7 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 32))(*(void *)(a2 + 8));
  BOOL v8 = v5 == 1 && v6 == 1;
  char v9 = !v8;
  if (v8 && v7 == 11)
  {
    *(_DWORD *)a1 = 0;
    unint64_t v10 = *(const void **)(a2 + 8);
    if (!v10
      || (uint64_t v11 = __dynamic_cast(v10, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A120, 0), (v12 = v11) == 0))
    {
      unint64_t v13 = sub_2157D1088();
      sub_215D23BE0(a2, (const char *)v13, (uint64_t)"trying to cast camera");
    }
    long long v65 = v11[1];
    *(void *)&long long v66 = *((void *)v11 + 11);
    unint64_t v14 = (char *)operator new(0x78uLL);
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)unint64_t v14 = &unk_26C684408;
    uint64_t v15 = *((void *)v12 + 11);
    long long v16 = v12[1];
    *((void *)v14 + 4) = &unk_26C65A188;
    *(_OWORD *)(v14 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v16;
    *(_OWORD *)(v14 + 56) = v12[2];
    long long v17 = v12[3];
    long long v18 = v12[4];
    *((_DWORD *)v14 + 26) = *((_DWORD *)v12 + 20);
    *(_OWORD *)(v14 + 88) = v18;
    *(_OWORD *)(v14 + 72) = v17;
    *((void *)v14 + 14) = v15;
    *((void *)v14 + 3) = &unk_26C65A0D8;
    *((void *)&v66 + 1) = v14 + 24;
    uint64_t v67 = (std::__shared_weak_count *)v14;
    sub_215D1B178(v4, (uint64_t)&v65);
    goto LABEL_14;
  }
  if (v7 != 12) {
    char v9 = 1;
  }
  if ((v9 & 1) == 0)
  {
    *(_DWORD *)a1 = 1;
    unint64_t v31 = *(const void **)(a2 + 8);
    if (!v31
      || (uint64_t v32 = __dynamic_cast(v31, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A240, 0), (v33 = v32) == 0))
    {
      uint64_t v34 = sub_2157D358C();
      sub_215D23BE0(a2, (const char *)v34, (uint64_t)"trying to cast camera");
    }
    long long v35 = v32[2];
    long long v65 = v32[1];
    long long v66 = v35;
    uint64_t v67 = (std::__shared_weak_count *)*((void *)v32 + 19);
    uint64_t v36 = (char *)operator new(0xB8uLL);
    *((void *)v36 + 1) = 0;
    *((void *)v36 + 2) = 0;
    *(void *)uint64_t v36 = &unk_26C6844A8;
    uint64_t v37 = *((void *)v33 + 19);
    *((void *)v36 + 4) = &unk_26C659958;
    *(_OWORD *)(v36 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v33[1];
    *(_OWORD *)(v36 + 56) = v33[2];
    long long v38 = v33[3];
    *(_OWORD *)(v36 + 88) = v33[4];
    *(_OWORD *)(v36 + 72) = v38;
    long long v39 = v33[6];
    long long v40 = v33[7];
    long long v41 = v33[8];
    *((void *)v36 + 21) = *((void *)v33 + 18);
    *(_OWORD *)(v36 + 152) = v41;
    *(_OWORD *)(v36 + 136) = v40;
    *(_OWORD *)(v36 + 12std::__fs::filesystem::__rename(__from, __to, 0) = v39;
    *(_OWORD *)(v36 + 104) = v33[5];
    *((void *)v36 + 22) = v37;
    *((void *)v36 + 3) = &unk_26C659C48;
    uint64_t v68 = v36 + 24;
    uint64_t v69 = (std::__shared_weak_count *)v36;
    sub_215D1B2F8(v4, (uint64_t)&v65);
LABEL_36:
    uint64_t v19 = v69;
    if (!v69) {
      return a1;
    }
    goto LABEL_37;
  }
  if (v5) {
    BOOL v20 = 0;
  }
  else {
    BOOL v20 = v6 == 1;
  }
  char v21 = !v20;
  if (v20 && v7 == 11)
  {
    *(_DWORD *)a1 = 10;
    int64_t v22 = *(const void **)(a2 + 8);
    if (!v22
      || (std::string v23 = __dynamic_cast(v22, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A270, 0), (v24 = v23) == 0))
    {
      unint64_t v25 = sub_2157CEE7C();
      sub_215D23BE0(a2, (const char *)v25, (uint64_t)"trying to cast camera");
    }
    long long v65 = v23[1];
    *(void *)&long long v66 = *((void *)v23 + 11);
    uint64_t v26 = (char *)operator new(0x78uLL);
    *((void *)v26 + 1) = 0;
    *((void *)v26 + 2) = 0;
    *(void *)uint64_t v26 = &unk_26C684458;
    uint64_t v27 = *((void *)v24 + 11);
    long long v28 = v24[1];
    *((void *)v26 + 4) = &unk_26C65A188;
    *(_OWORD *)(v26 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v28;
    *(_OWORD *)(v26 + 56) = v24[2];
    long long v29 = v24[3];
    long long v30 = v24[4];
    *((_DWORD *)v26 + 26) = *((_DWORD *)v24 + 20);
    *(_OWORD *)(v26 + 88) = v30;
    *(_OWORD *)(v26 + 72) = v29;
    *((void *)v26 + 14) = v27;
    *((void *)v26 + 3) = &unk_26C659DE8;
    *((void *)&v66 + 1) = v26 + 24;
    uint64_t v67 = (std::__shared_weak_count *)v26;
    sub_215D1B478(v4, (uint64_t)&v65);
LABEL_14:
    uint64_t v19 = v67;
    if (!v67) {
      return a1;
    }
    goto LABEL_37;
  }
  if (v7 != 12) {
    char v21 = 1;
  }
  if ((v21 & 1) == 0)
  {
    *(_DWORD *)a1 = 11;
    unint64_t v48 = *(const void **)(a2 + 8);
    if (!v48
      || (v49 = __dynamic_cast(v48, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A2A0, 0), (unsigned int v50 = v49) == 0))
    {
      std::string::size_type v51 = sub_2157D2FF0();
      sub_215D23BE0(a2, (const char *)v51, (uint64_t)"trying to cast camera");
    }
    long long v52 = v49[2];
    long long v65 = v49[1];
    long long v66 = v52;
    uint64_t v67 = (std::__shared_weak_count *)*((void *)v49 + 19);
    std::string::size_type v53 = (char *)operator new(0xB8uLL);
    *((void *)v53 + 1) = 0;
    *((void *)v53 + 2) = 0;
    *(void *)std::string::size_type v53 = &unk_26C6844F8;
    uint64_t v54 = *((void *)v50 + 19);
    *((void *)v53 + 4) = &unk_26C659958;
    *(_OWORD *)(v53 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v50[1];
    *(_OWORD *)(v53 + 56) = v50[2];
    long long v55 = v50[3];
    *(_OWORD *)(v53 + 88) = v50[4];
    *(_OWORD *)(v53 + 72) = v55;
    long long v56 = v50[6];
    long long v57 = v50[7];
    long long v58 = v50[8];
    *((void *)v53 + 21) = *((void *)v50 + 18);
    *(_OWORD *)(v53 + 152) = v58;
    *(_OWORD *)(v53 + 136) = v57;
    *(_OWORD *)(v53 + 12std::__fs::filesystem::__rename(__from, __to, 0) = v56;
    *(_OWORD *)(v53 + 104) = v50[5];
    *((void *)v53 + 22) = v54;
    *((void *)v53 + 3) = &unk_26C659A48;
    uint64_t v68 = v53 + 24;
    uint64_t v69 = (std::__shared_weak_count *)v53;
    sub_215D1B5F8(v4, (uint64_t)&v65);
    goto LABEL_36;
  }
  BOOL v43 = v5 == 1 && v6 == 2;
  char v44 = !v43;
  if (v43 && v7 == 11)
  {
    *(_DWORD *)a1 = 100;
    uint64_t v45 = *(const void **)(a2 + 8);
    if (!v45
      || (unint64_t v46 = __dynamic_cast(v45, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A2D0, 0)) == 0)
    {
      BOOL v47 = sub_2157D3F1C();
      sub_215D23BE0(a2, (const char *)v47, (uint64_t)"trying to cast camera");
    }
    sub_215D20788((uint64_t)&v65, (uint64_t)v46);
    sub_215D1B778(v4, (uint64_t)&v65);
    uint64_t v19 = v70;
    if (v70)
    {
LABEL_37:
      if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  else
  {
    if (v7 != 12) {
      char v44 = 1;
    }
    if (v44)
    {
      if (v5) {
        BOOL v59 = 0;
      }
      else {
        BOOL v59 = v6 == 2;
      }
      char v60 = !v59;
      if (v59 && v7 == 11)
      {
        *(_DWORD *)a1 = 110;
        BOOL v61 = sub_215D1BB1C(a2);
        sub_215D20A54((uint64_t)&v65, (uint64_t)v61);
        sub_215D1BBC0(v4, (uint64_t)&v65);
        sub_215D20300((uint64_t)&v65);
      }
      else
      {
        if (v7 != 12) {
          char v60 = 1;
        }
        if (v60)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
          __cxa_throw(exception, (struct type_info *)off_26425A320, MEMORY[0x263F8C080]);
        }
        *(_DWORD *)a1 = 111;
        unint64_t v63 = sub_215D1BD40(a2);
        sub_215D212CC((uint64_t)&v65, (uint64_t)v63);
        sub_215D1BDE4(v4, (uint64_t)&v65);
        sub_215D205D0((uint64_t)&v65);
      }
    }
    else
    {
      *(_DWORD *)a1 = 101;
      unint64_t v62 = sub_215D1B8F8(a2);
      sub_215D20E5C((uint64_t)&v65, (uint64_t)v62);
      sub_215D1B99C(v4, (uint64_t)&v65);
      sub_215D205D0((uint64_t)&v65);
    }
  }
  return a1;
}

void sub_215D1AF8C(_Unwind_Exception *a1)
{
  sub_2157C3E24(v1);
  _Unwind_Resume(a1);
}

void sub_215D1AFA0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  sub_2157C3E24(v1);
  _Unwind_Resume(a1);
}

void sub_215D1AFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215D205D0((uint64_t)&a9);
  sub_2157C3E24(v9);
  _Unwind_Resume(a1);
}

void sub_215D1AFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215D20300((uint64_t)&a9);
  sub_2157C3E24(v9);
  _Unwind_Resume(a1);
}

void sub_215D1AFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215D205D0((uint64_t)&a9);
  sub_2157C3E24(v9);
  _Unwind_Resume(a1);
}

void sub_215D1B010(_Unwind_Exception *a1)
{
  sub_2157C3E24(v1);
  _Unwind_Resume(a1);
}

void sub_215D1B024(_Unwind_Exception *a1)
{
  sub_2157C3E24(v1);
  _Unwind_Resume(a1);
}

void sub_215D1B038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215D20300((uint64_t)&a9);
  sub_2157C3E24(v9);
  _Unwind_Resume(a1);
}

void sub_215D1B054(_Unwind_Exception *a1)
{
  sub_2157C3E24(v1);
  _Unwind_Resume(a1);
}

void sub_215D1B068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215D22374((uint64_t)&a9);
  sub_2157C3E24(v9);
  _Unwind_Resume(a1);
}

void sub_215D1B084(_Unwind_Exception *a1)
{
  sub_2157C3E24(v1);
  _Unwind_Resume(a1);
}

void sub_215D1B098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215CE954C((uint64_t)&a9);
  sub_2157C3E24(v9);
  _Unwind_Resume(a1);
}

void sub_215D1B0B4(_Unwind_Exception *a1)
{
  sub_2157C3E24(v1);
  _Unwind_Resume(a1);
}

void sub_215D1B0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215D22374((uint64_t)&a9);
  sub_2157C3E24(v9);
  _Unwind_Resume(a1);
}

void sub_215D1B0E4(_Unwind_Exception *a1)
{
  sub_2157C3E24(v1);
  _Unwind_Resume(a1);
}

void sub_215D1B0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215CE954C((uint64_t)&a9);
  sub_2157C3E24(v9);
  _Unwind_Resume(a1);
}

void sub_215D1B114(_Unwind_Exception *a1)
{
  sub_2157C3E24(v1);
  _Unwind_Resume(a1);
}

void sub_215D1B128(_Unwind_Exception *a1)
{
  sub_2157C3E24(v1);
  _Unwind_Resume(a1);
}

void sub_215D1B13C(_Unwind_Exception *a1)
{
  sub_2157C3E24(v1);
  _Unwind_Resume(a1);
}

void sub_215D1B150(_Unwind_Exception *a1)
{
  sub_2157C3E24(v1);
  _Unwind_Resume(a1);
}

void sub_215D1B164(_Unwind_Exception *a1)
{
  sub_2157C3E24(v1);
  _Unwind_Resume(a1);
}

void *sub_215D1B178(void *a1, uint64_t a2)
{
  v9[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (char *)operator new(0x28uLL);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *((void *)v4 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  v8[0] = sub_215D1F3B0;
  v8[1] = v4;
  if (v8 == a1)
  {
    int v6 = sub_215D1F3B0;
LABEL_8:
    v6(0, v8, 0, 0, 0);
    return a1;
  }
  int v5 = (void (*)(uint64_t, void *, void *, void, void))*a1;
  if (!*a1)
  {
    *a1 = sub_215D1F3B0;
    a1[1] = v4;
    return a1;
  }
  v9[0] = 0;
  v9[1] = 0;
  v5(2, a1, v9, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v8[0])(2, v8, a1, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v9[0])(2, v9, v8, 0, 0);
  if (v9[0]) {
    ((void (*)(void, void *, void, void, void))v9[0])(0, v9, 0, 0, 0);
  }
  int v6 = (void *(*)(unsigned int, void *, void *, uint64_t, void *))v8[0];
  if (v8[0]) {
    goto LABEL_8;
  }
  return a1;
}

void sub_215D1B2E0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_215731D80(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_215D1B2F8(void *a1, uint64_t a2)
{
  v10[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = operator new(0x38uLL);
  long long v5 = *(_OWORD *)(a2 + 16);
  _OWORD *v4 = *(_OWORD *)a2;
  v4[1] = v5;
  *((void *)v4 + 4) = *(void *)(a2 + 32);
  *(_OWORD *)((char *)v4 + 4std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(a2 + 40);
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 48) = 0;
  v9[0] = sub_215D1F584;
  v9[1] = v4;
  if (v9 == a1)
  {
    int v7 = sub_215D1F584;
LABEL_8:
    v7(0, v9, 0, 0, 0);
    return a1;
  }
  int v6 = (void (*)(uint64_t, void *, void *, void, void))*a1;
  if (!*a1)
  {
    *a1 = sub_215D1F584;
    a1[1] = v4;
    return a1;
  }
  v10[0] = 0;
  v10[1] = 0;
  v6(2, a1, v10, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v9[0])(2, v9, a1, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v10[0])(2, v10, v9, 0, 0);
  if (v10[0]) {
    ((void (*)(void, void *, void, void, void))v10[0])(0, v10, 0, 0, 0);
  }
  int v7 = (void *(*)(unsigned int, void *, void *, uint64_t, void *))v9[0];
  if (v9[0]) {
    goto LABEL_8;
  }
  return a1;
}

void sub_215D1B460(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_215731D80(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_215D1B478(void *a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (char *)operator new(0x28uLL);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *((void *)v4 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  v8[0] = sub_215D1F758;
  v8[1] = v4;
  if (v8 == a1)
  {
    int v6 = sub_215D1F758;
LABEL_8:
    v6(0, v8, 0, 0, 0);
    return a1;
  }
  long long v5 = (void (*)(uint64_t, void *, void *, void, void))*a1;
  if (!*a1)
  {
    *a1 = sub_215D1F758;
    a1[1] = v4;
    return a1;
  }
  v9[0] = 0;
  v9[1] = 0;
  v5(2, a1, v9, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v8[0])(2, v8, a1, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v9[0])(2, v9, v8, 0, 0);
  if (v9[0]) {
    ((void (*)(void, void *, void, void, void))v9[0])(0, v9, 0, 0, 0);
  }
  int v6 = (void *(*)(unsigned int, void *, void *, uint64_t, void *))v8[0];
  if (v8[0]) {
    goto LABEL_8;
  }
  return a1;
}

void sub_215D1B5E0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_215731D80(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_215D1B5F8(void *a1, uint64_t a2)
{
  v10[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = operator new(0x38uLL);
  long long v5 = *(_OWORD *)(a2 + 16);
  _OWORD *v4 = *(_OWORD *)a2;
  v4[1] = v5;
  *((void *)v4 + 4) = *(void *)(a2 + 32);
  *(_OWORD *)((char *)v4 + 4std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(a2 + 40);
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 48) = 0;
  v9[0] = sub_215D1F92C;
  v9[1] = v4;
  if (v9 == a1)
  {
    int v7 = sub_215D1F92C;
LABEL_8:
    v7(0, v9, 0, 0, 0);
    return a1;
  }
  int v6 = (void (*)(uint64_t, void *, void *, void, void))*a1;
  if (!*a1)
  {
    *a1 = sub_215D1F92C;
    a1[1] = v4;
    return a1;
  }
  v10[0] = 0;
  v10[1] = 0;
  v6(2, a1, v10, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v9[0])(2, v9, a1, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v10[0])(2, v10, v9, 0, 0);
  if (v10[0]) {
    ((void (*)(void, void *, void, void, void))v10[0])(0, v10, 0, 0, 0);
  }
  int v7 = (void *(*)(unsigned int, void *, void *, uint64_t, void *))v9[0];
  if (v9[0]) {
    goto LABEL_8;
  }
  return a1;
}

void sub_215D1B760(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_215731D80(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_215D1B778(void *a1, uint64_t a2)
{
  v10[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = operator new(0x40uLL);
  long long v5 = *(_OWORD *)(a2 + 16);
  _OWORD *v4 = *(_OWORD *)a2;
  v4[1] = v5;
  *(_OWORD *)((char *)v4 + 28) = *(_OWORD *)(a2 + 28);
  v4[3] = *(_OWORD *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  v9[0] = sub_215D1FB00;
  v9[1] = v4;
  if (v9 == a1)
  {
    int v7 = sub_215D1FB00;
LABEL_8:
    v7(0, v9, 0, 0, 0);
    return a1;
  }
  int v6 = (void (*)(uint64_t, void *, void *, void, void))*a1;
  if (!*a1)
  {
    *a1 = sub_215D1FB00;
    a1[1] = v4;
    return a1;
  }
  v10[0] = 0;
  v10[1] = 0;
  v6(2, a1, v10, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v9[0])(2, v9, a1, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v10[0])(2, v10, v9, 0, 0);
  if (v10[0]) {
    ((void (*)(void, void *, void, void, void))v10[0])(0, v10, 0, 0, 0);
  }
  int v7 = (void *(*)(unsigned int, void *, void *, uint64_t, void *))v9[0];
  if (v9[0]) {
    goto LABEL_8;
  }
  return a1;
}

void sub_215D1B8E0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_215731D80(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_215D1B8F8(uint64_t a1)
{
  unint64_t v2 = *(const void **)(a1 + 8);
  if (!v2
    || (dispatch_workloop_t result = __dynamic_cast(v2, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A300, 0)) == 0)
  {
    uint64_t v4 = sub_2157D65FC();
    sub_215D23BE0(a1, (const char *)v4, (uint64_t)"trying to cast camera");
  }
  return result;
}

uint64_t sub_215D1B988()
{
  return 0;
}

void *sub_215D1B99C(void *a1, uint64_t a2)
{
  void v12[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = operator new(0x60uLL);
  long long v5 = *(_OWORD *)(a2 + 48);
  void v4[2] = *(_OWORD *)(a2 + 32);
  v4[3] = v5;
  long long v6 = *(_OWORD *)(a2 + 16);
  _OWORD *v4 = *(_OWORD *)a2;
  v4[1] = v6;
  long long v7 = *(_OWORD *)(a2 + 80);
  v4[4] = *(_OWORD *)(a2 + 64);
  v4[5] = v7;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 88) = 0;
  v11[0] = sub_215D1FCD4;
  v11[1] = v4;
  if (v11 == a1)
  {
    char v9 = sub_215D1FCD4;
LABEL_8:
    v9(0, v11, 0, 0, 0);
    return a1;
  }
  BOOL v8 = (void (*)(uint64_t, void *, void *, void, void))*a1;
  if (!*a1)
  {
    *a1 = sub_215D1FCD4;
    a1[1] = v4;
    return a1;
  }
  v12[0] = 0;
  v12[1] = 0;
  v8(2, a1, v12, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v11[0])(2, v11, a1, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v12[0])(2, v12, v11, 0, 0);
  if (v12[0]) {
    ((void (*)(void, void *, void, void, void))v12[0])(0, v12, 0, 0, 0);
  }
  char v9 = (void *(*)(unsigned int, void *, void *, uint64_t, void *))v11[0];
  if (v11[0]) {
    goto LABEL_8;
  }
  return a1;
}

void sub_215D1BB04(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_215731D80(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_215D1BB1C(uint64_t a1)
{
  unint64_t v2 = *(const void **)(a1 + 8);
  if (!v2
    || (dispatch_workloop_t result = __dynamic_cast(v2, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A330, 0)) == 0)
  {
    uint64_t v4 = sub_2157D3B28();
    sub_215D23BE0(a1, (const char *)v4, (uint64_t)"trying to cast camera");
  }
  return result;
}

uint64_t sub_215D1BBAC()
{
  return 0;
}

void *sub_215D1BBC0(void *a1, uint64_t a2)
{
  v10[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = operator new(0x40uLL);
  long long v5 = *(_OWORD *)(a2 + 16);
  _OWORD *v4 = *(_OWORD *)a2;
  v4[1] = v5;
  *(_OWORD *)((char *)v4 + 28) = *(_OWORD *)(a2 + 28);
  v4[3] = *(_OWORD *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  v9[0] = sub_215D1FEA8;
  v9[1] = v4;
  if (v9 == a1)
  {
    long long v7 = sub_215D1FEA8;
LABEL_8:
    v7(0, v9, 0, 0, 0);
    return a1;
  }
  long long v6 = (void (*)(uint64_t, void *, void *, void, void))*a1;
  if (!*a1)
  {
    *a1 = sub_215D1FEA8;
    a1[1] = v4;
    return a1;
  }
  v10[0] = 0;
  v10[1] = 0;
  v6(2, a1, v10, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v9[0])(2, v9, a1, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v10[0])(2, v10, v9, 0, 0);
  if (v10[0]) {
    ((void (*)(void, void *, void, void, void))v10[0])(0, v10, 0, 0, 0);
  }
  long long v7 = (void *(*)(unsigned int, void *, void *, uint64_t, void *))v9[0];
  if (v9[0]) {
    goto LABEL_8;
  }
  return a1;
}

void sub_215D1BD28(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_215731D80(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_215D1BD40(uint64_t a1)
{
  unint64_t v2 = *(const void **)(a1 + 8);
  if (!v2
    || (dispatch_workloop_t result = __dynamic_cast(v2, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A360, 0)) == 0)
  {
    uint64_t v4 = sub_2157D6074();
    sub_215D23BE0(a1, (const char *)v4, (uint64_t)"trying to cast camera");
  }
  return result;
}

uint64_t sub_215D1BDD0()
{
  return 0;
}

void *sub_215D1BDE4(void *a1, uint64_t a2)
{
  void v12[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = operator new(0x60uLL);
  long long v5 = *(_OWORD *)(a2 + 48);
  void v4[2] = *(_OWORD *)(a2 + 32);
  v4[3] = v5;
  long long v6 = *(_OWORD *)(a2 + 16);
  _OWORD *v4 = *(_OWORD *)a2;
  v4[1] = v6;
  long long v7 = *(_OWORD *)(a2 + 80);
  v4[4] = *(_OWORD *)(a2 + 64);
  v4[5] = v7;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 88) = 0;
  v11[0] = sub_215D2007C;
  v11[1] = v4;
  if (v11 == a1)
  {
    char v9 = sub_215D2007C;
LABEL_8:
    v9(0, v11, 0, 0, 0);
    return a1;
  }
  BOOL v8 = (void (*)(uint64_t, void *, void *, void, void))*a1;
  if (!*a1)
  {
    *a1 = sub_215D2007C;
    a1[1] = v4;
    return a1;
  }
  v12[0] = 0;
  v12[1] = 0;
  v8(2, a1, v12, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v11[0])(2, v11, a1, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v12[0])(2, v12, v11, 0, 0);
  if (v12[0]) {
    ((void (*)(void, void *, void, void, void))v12[0])(0, v12, 0, 0, 0);
  }
  char v9 = (void *(*)(unsigned int, void *, void *, uint64_t, void *))v11[0];
  if (v11[0]) {
    goto LABEL_8;
  }
  return a1;
}

void sub_215D1BF4C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_215731D80(a1);
  }
  _Unwind_Resume(a1);
}

void sub_215D1BF64(int *a1@<X0>, void *a2@<X8>)
{
  int v5 = *a1;
  if (!v3 & v2)
  {
    switch(v5)
    {
      case 'e':
        uint64_t v45 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a1 + 1);
        if (!v45) {
          goto LABEL_33;
        }
        uint64_t v46 = v45(3, a1 + 2, 0, &unk_26C676770, &unk_215ED3AB8);
        if (!v46) {
          goto LABEL_33;
        }
        uint64_t v47 = sub_215D204B8(v46);
        char v9 = (char *)operator new(0xF8uLL);
        *((void *)v9 + 2) = 0;
        *((void *)v9 + 1) = 0;
        unint64_t v10 = (atomic_ullong *)(v9 + 8);
        *(void *)char v9 = &unk_26C659D98;
        uint64_t v11 = v9 + 24;
        *((void *)v9 + 4) = &unk_26C659B18;
        *(_OWORD *)(v9 + 4std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v47 + 16);
        *(_OWORD *)(v9 + 56) = *(_OWORD *)(v47 + 32);
        uint64_t v48 = *(void *)(v47 + 80);
        long long v49 = *(_OWORD *)(v47 + 64);
        *(_OWORD *)(v9 + 72) = *(_OWORD *)(v47 + 48);
        *((void *)v9 + 13) = v48;
        *(_OWORD *)(v9 + 88) = v49;
        uint64_t v50 = *(void *)(v47 + 88);
        *((_DWORD *)v9 + 3std::__fs::filesystem::__rename(__from, __to, 0) = *(_DWORD *)(v47 + 96);
        *((void *)v9 + 14) = v50;
        long long v51 = *(_OWORD *)(v47 + 120);
        *((_OWORD *)v9 + 8) = *(_OWORD *)(v47 + 104);
        *((_OWORD *)v9 + 9) = v51;
        *((_OWORD *)v9 + 1std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v47 + 136);
        long long v52 = *(_OWORD *)(v47 + 168);
        long long v53 = *(_OWORD *)(v47 + 184);
        long long v54 = *(_OWORD *)(v47 + 152);
        *((void *)v9 + 28) = *(void *)(v47 + 200);
        *((_OWORD *)v9 + 12) = v52;
        *((_OWORD *)v9 + 13) = v53;
        *((_OWORD *)v9 + 11) = v54;
        *((_WORD *)v9 + 116) = *(_WORD *)(v47 + 208);
        *((void *)v9 + 3std::__fs::filesystem::__rename(__from, __to, 0) = *(void *)(v47 + 216);
        uint64_t v15 = &unk_26C659D18;
        break;
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
LABEL_34:
        __break(1u);
LABEL_35:
        JUMPOUT(0);
      case 'n':
        uint64_t v69 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a1 + 1);
        if (!v69) {
          goto LABEL_33;
        }
        uint64_t v70 = v69(3, a1 + 2, 0, &unk_26C6767C0, &unk_215ED3B90);
        if (!v70) {
          goto LABEL_33;
        }
        uint64_t v71 = sub_215D20250(v70);
        char v9 = (char *)operator new(0x98uLL);
        *((void *)v9 + 1) = 0;
        unint64_t v10 = (atomic_ullong *)(v9 + 8);
        *((void *)v9 + 2) = 0;
        *(void *)char v9 = &unk_26C659F58;
        uint64_t v11 = v9 + 24;
        *((void *)v9 + 4) = &unk_26C659E78;
        *((void *)v9 + 5) = *(void *)(v71 + 16);
        *((void *)v9 + 6) = *(void *)(v71 + 24);
        long long v72 = *(_OWORD *)(v71 + 32);
        *((_DWORD *)v9 + 18) = *(_DWORD *)(v71 + 48);
        *(_OWORD *)(v9 + 56) = v72;
        *(void *)(v9 + 76) = *(void *)(v71 + 52);
        *(_OWORD *)(v9 + 84) = *(_OWORD *)(v71 + 60);
        long long v73 = *(_OWORD *)(v71 + 92);
        int v74 = *(_DWORD *)(v71 + 108);
        *(_OWORD *)(v9 + 10std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v71 + 76);
        *((_DWORD *)v9 + 33) = v74;
        *(_OWORD *)(v9 + 116) = v73;
        *((_WORD *)v9 + 68) = *(_WORD *)(v71 + 112);
        *((void *)v9 + 18) = *(void *)(v71 + 120);
        uint64_t v15 = &unk_26C659ED8;
        break;
      case 'o':
        char v21 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a1 + 1);
        if (!v21) {
          goto LABEL_33;
        }
        uint64_t v22 = v21(3, a1 + 2, 0, &unk_26C676810, &unk_215ED3C68);
        if (!v22) {
          goto LABEL_33;
        }
        uint64_t v23 = sub_215D204B8(v22);
        char v9 = (char *)operator new(0xF8uLL);
        *((void *)v9 + 2) = 0;
        *((void *)v9 + 1) = 0;
        unint64_t v10 = (atomic_ullong *)(v9 + 8);
        *(void *)char v9 = &unk_26C659BF8;
        uint64_t v11 = v9 + 24;
        *((void *)v9 + 4) = &unk_26C659B18;
        *(_OWORD *)(v9 + 4std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v23 + 16);
        *(_OWORD *)(v9 + 56) = *(_OWORD *)(v23 + 32);
        uint64_t v24 = *(void *)(v23 + 80);
        long long v25 = *(_OWORD *)(v23 + 64);
        *(_OWORD *)(v9 + 72) = *(_OWORD *)(v23 + 48);
        *((void *)v9 + 13) = v24;
        *(_OWORD *)(v9 + 88) = v25;
        uint64_t v26 = *(void *)(v23 + 88);
        *((_DWORD *)v9 + 3std::__fs::filesystem::__rename(__from, __to, 0) = *(_DWORD *)(v23 + 96);
        *((void *)v9 + 14) = v26;
        long long v27 = *(_OWORD *)(v23 + 120);
        *((_OWORD *)v9 + 8) = *(_OWORD *)(v23 + 104);
        *((_OWORD *)v9 + 9) = v27;
        *((_OWORD *)v9 + 1std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v23 + 136);
        long long v28 = *(_OWORD *)(v23 + 168);
        long long v29 = *(_OWORD *)(v23 + 184);
        long long v30 = *(_OWORD *)(v23 + 152);
        *((void *)v9 + 28) = *(void *)(v23 + 200);
        *((_OWORD *)v9 + 12) = v28;
        *((_OWORD *)v9 + 13) = v29;
        *((_OWORD *)v9 + 11) = v30;
        *((_WORD *)v9 + 116) = *(_WORD *)(v23 + 208);
        *((void *)v9 + 3std::__fs::filesystem::__rename(__from, __to, 0) = *(void *)(v23 + 216);
        uint64_t v15 = &unk_26C659B78;
        break;
      default:
        long long v6 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a1 + 1);
        if (!v6 || (uint64_t v7 = v6(3, a1 + 2, 0, &unk_26C676720, &unk_215ED39E0)) == 0) {
LABEL_33:
        }
          sub_215A0E034();
        uint64_t v8 = sub_215D20250(v7);
        char v9 = (char *)operator new(0x98uLL);
        *((void *)v9 + 1) = 0;
        unint64_t v10 = (atomic_ullong *)(v9 + 8);
        *((void *)v9 + 2) = 0;
        *(void *)char v9 = &unk_26C65A028;
        uint64_t v11 = v9 + 24;
        *((void *)v9 + 4) = &unk_26C659E78;
        *((void *)v9 + 5) = *(void *)(v8 + 16);
        *((void *)v9 + 6) = *(void *)(v8 + 24);
        long long v12 = *(_OWORD *)(v8 + 32);
        *((_DWORD *)v9 + 18) = *(_DWORD *)(v8 + 48);
        *(_OWORD *)(v9 + 56) = v12;
        *(void *)(v9 + 76) = *(void *)(v8 + 52);
        *(_OWORD *)(v9 + 84) = *(_OWORD *)(v8 + 60);
        long long v13 = *(_OWORD *)(v8 + 92);
        int v14 = *(_DWORD *)(v8 + 108);
        *(_OWORD *)(v9 + 10std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v8 + 76);
        *((_DWORD *)v9 + 33) = v14;
        *(_OWORD *)(v9 + 116) = v13;
        *((_WORD *)v9 + 68) = *(_WORD *)(v8 + 112);
        *((void *)v9 + 18) = *(void *)(v8 + 120);
        uint64_t v15 = &unk_26C659FA8;
        break;
    }
  }
  else
  {
    switch(v5)
    {
      case 0:
        long long v16 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a1 + 1);
        if (!v16) {
          goto LABEL_33;
        }
        long long v17 = (float32x2_t *)v16(3, a1 + 2, 0, &unk_26C6765E0, &unk_215ED368C);
        if (!v17) {
          goto LABEL_33;
        }
        uint64_t v18 = sub_215D22318(v17);
        char v9 = (char *)operator new(0x78uLL);
        *((void *)v9 + 2) = 0;
        *((void *)v9 + 1) = 0;
        unint64_t v10 = (atomic_ullong *)(v9 + 8);
        *(void *)char v9 = &unk_26C65A1E8;
        uint64_t v11 = v9 + 24;
        *((void *)v9 + 4) = &unk_26C65A188;
        *((void *)v9 + 5) = *(void *)(v18 + 16);
        *((void *)v9 + 6) = *(void *)(v18 + 24);
        *(_OWORD *)(v9 + 56) = *(_OWORD *)(v18 + 32);
        int v19 = *(_DWORD *)(v18 + 80);
        long long v20 = *(_OWORD *)(v18 + 64);
        *(_OWORD *)(v9 + 72) = *(_OWORD *)(v18 + 48);
        *((_DWORD *)v9 + 26) = v19;
        *(_OWORD *)(v9 + 88) = v20;
        *((void *)v9 + 14) = *(void *)(v18 + 88);
        uint64_t v15 = &unk_26C65A0D8;
        break;
      case 1:
        long long v55 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a1 + 1);
        if (!v55) {
          goto LABEL_33;
        }
        uint64_t v56 = v55(3, a1 + 2, 0, &unk_26C676630, &unk_215ED3760);
        if (!v56) {
          goto LABEL_33;
        }
        double v57 = *(double *)v56;
        double v58 = *(double *)(v56 + 8);
        double v59 = *(double *)(v56 + 16);
        double v60 = *(double *)(v56 + 24);
        double v61 = 1.0 / *(double *)v56;
        uint64_t v62 = *(void *)(v56 + 32);
        uint64_t v63 = *(void *)(v56 + 40);
        *(void *)(v63 + 16) = *(void *)v56;
        *(double *)(v63 + 24) = v58;
        *(double *)(v63 + 32) = v59;
        *(double *)(v63 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v60;
        *(double *)(v63 + 48) = v61;
        *(double *)(v63 + 56) = 1.0 / v58;
        *(double *)(v63 + 64) = -(v59 * v61);
        *(double *)(v63 + 72) = -(v60 * (1.0 / v58));
        *(double *)(v63 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v57;
        *(void *)(v63 + 96) = 0;
        *(void *)(v63 + 104) = 0;
        *(void *)(v63 + 88) = 0;
        *(double *)(v63 + 112) = v58;
        *(void *)(v63 + 12std::__fs::filesystem::__rename(__from, __to, 0) = 0;
        *(double *)(v63 + 128) = v59;
        *(double *)(v63 + 136) = v60;
        *(void *)(v63 + 144) = 0x3FF0000000000000;
        *(void *)(v63 + 152) = v62;
        uint64_t v64 = *(void *)(v56 + 40);
        char v9 = (char *)operator new(0xB8uLL);
        *((void *)v9 + 2) = 0;
        *((void *)v9 + 1) = 0;
        unint64_t v10 = (atomic_ullong *)(v9 + 8);
        *(void *)char v9 = &unk_26C659CC8;
        uint64_t v11 = v9 + 24;
        *((void *)v9 + 4) = &unk_26C659958;
        *(_OWORD *)(v9 + 4std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v64 + 16);
        *(_OWORD *)(v9 + 56) = *(_OWORD *)(v64 + 32);
        long long v65 = *(_OWORD *)(v64 + 64);
        *(_OWORD *)(v9 + 72) = *(_OWORD *)(v64 + 48);
        *(_OWORD *)(v9 + 88) = v65;
        *(_OWORD *)(v9 + 104) = *(_OWORD *)(v64 + 80);
        long long v67 = *(_OWORD *)(v64 + 112);
        long long v66 = *(_OWORD *)(v64 + 128);
        uint64_t v68 = *(void *)(v64 + 144);
        *(_OWORD *)(v9 + 12std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v64 + 96);
        *((void *)v9 + 21) = v68;
        *(_OWORD *)(v9 + 152) = v66;
        *(_OWORD *)(v9 + 136) = v67;
        *((void *)v9 + 22) = *(void *)(v64 + 152);
        uint64_t v15 = &unk_26C659C48;
        break;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        goto LABEL_34;
      case 10:
        unint64_t v75 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a1 + 1);
        if (!v75) {
          goto LABEL_33;
        }
        uint64_t v76 = (float32x2_t *)v75(3, a1 + 2, 0, &unk_26C676680, &unk_215ED3834);
        if (!v76) {
          goto LABEL_33;
        }
        uint64_t v77 = sub_215D22318(v76);
        char v9 = (char *)operator new(0x78uLL);
        *((void *)v9 + 2) = 0;
        *((void *)v9 + 1) = 0;
        unint64_t v10 = (atomic_ullong *)(v9 + 8);
        *(void *)char v9 = &unk_26C659E28;
        uint64_t v11 = v9 + 24;
        *((void *)v9 + 4) = &unk_26C65A188;
        *((void *)v9 + 5) = *(void *)(v77 + 16);
        *((void *)v9 + 6) = *(void *)(v77 + 24);
        *(_OWORD *)(v9 + 56) = *(_OWORD *)(v77 + 32);
        int v78 = *(_DWORD *)(v77 + 80);
        long long v79 = *(_OWORD *)(v77 + 64);
        *(_OWORD *)(v9 + 72) = *(_OWORD *)(v77 + 48);
        *((_DWORD *)v9 + 26) = v78;
        *(_OWORD *)(v9 + 88) = v79;
        *((void *)v9 + 14) = *(void *)(v77 + 88);
        uint64_t v15 = &unk_26C659DE8;
        break;
      case 11:
        unint64_t v31 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a1 + 1);
        if (!v31) {
          goto LABEL_33;
        }
        uint64_t v32 = v31(3, a1 + 2, 0, &unk_26C6766D0, &unk_215ED3908);
        if (!v32) {
          goto LABEL_33;
        }
        double v33 = *(double *)v32;
        double v34 = *(double *)(v32 + 8);
        double v35 = *(double *)(v32 + 16);
        double v36 = *(double *)(v32 + 24);
        double v37 = 1.0 / *(double *)v32;
        uint64_t v38 = *(void *)(v32 + 32);
        uint64_t v39 = *(void *)(v32 + 40);
        *(void *)(v39 + 16) = *(void *)v32;
        *(double *)(v39 + 24) = v34;
        *(double *)(v39 + 32) = v35;
        *(double *)(v39 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v36;
        *(double *)(v39 + 48) = v37;
        *(double *)(v39 + 56) = 1.0 / v34;
        *(double *)(v39 + 64) = -(v35 * v37);
        *(double *)(v39 + 72) = -(v36 * (1.0 / v34));
        *(double *)(v39 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v33;
        *(void *)(v39 + 96) = 0;
        *(void *)(v39 + 104) = 0;
        *(void *)(v39 + 88) = 0;
        *(double *)(v39 + 112) = v34;
        *(void *)(v39 + 12std::__fs::filesystem::__rename(__from, __to, 0) = 0;
        *(double *)(v39 + 128) = v35;
        *(double *)(v39 + 136) = v36;
        *(void *)(v39 + 144) = 0x3FF0000000000000;
        *(void *)(v39 + 152) = v38;
        uint64_t v40 = *(void *)(v32 + 40);
        char v9 = (char *)operator new(0xB8uLL);
        *((void *)v9 + 2) = 0;
        *((void *)v9 + 1) = 0;
        unint64_t v10 = (atomic_ullong *)(v9 + 8);
        *(void *)char v9 = &unk_26C659AC8;
        uint64_t v11 = v9 + 24;
        *((void *)v9 + 4) = &unk_26C659958;
        *(_OWORD *)(v9 + 4std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v40 + 16);
        *(_OWORD *)(v9 + 56) = *(_OWORD *)(v40 + 32);
        long long v41 = *(_OWORD *)(v40 + 64);
        *(_OWORD *)(v9 + 72) = *(_OWORD *)(v40 + 48);
        *(_OWORD *)(v9 + 88) = v41;
        *(_OWORD *)(v9 + 104) = *(_OWORD *)(v40 + 80);
        long long v43 = *(_OWORD *)(v40 + 112);
        long long v42 = *(_OWORD *)(v40 + 128);
        uint64_t v44 = *(void *)(v40 + 144);
        *(_OWORD *)(v9 + 12std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v40 + 96);
        *((void *)v9 + 21) = v44;
        *(_OWORD *)(v9 + 152) = v42;
        *(_OWORD *)(v9 + 136) = v43;
        *((void *)v9 + 22) = *(void *)(v40 + 152);
        uint64_t v15 = &unk_26C659A48;
        break;
      default:
        goto LABEL_35;
    }
  }
  *((void *)v9 + 3) = v15;
  *a2 = &unk_26C684548;
  a2[1] = v11;
  a2[2] = v9;
  atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(v10, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v80 = (std::__shared_weak_count *)v9;
    (*(void (**)(char *))(*(void *)v9 + 16))(v9);
    std::__shared_weak_count::__release_weak(v80);
  }
}

void sub_215D1C910(int *a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *a1;
  if (!(!v2 & v1))
  {
    switch(v4)
    {
      case 0:
        long long v18 = 0uLL;
        *(void *)int v19 = 0;
        uint64_t v7 = (char *)operator new(0x78uLL);
        *((void *)v7 + 1) = 0;
        *((void *)v7 + 2) = 0;
        *(void *)uint64_t v7 = &unk_26C684408;
        *((void *)v7 + 5) = 0;
        *((void *)v7 + 6) = 0;
        int32x4_t v8 = vdupq_n_s32(0x7FC00000u);
        *((void *)v7 + 4) = &unk_26C65A188;
        *(int32x4_t *)(v7 + 56) = v8;
        *(int32x4_t *)(v7 + 72) = v8;
        *(int32x4_t *)(v7 + 88) = v8;
        *((_DWORD *)v7 + 26) = 2143289344;
        *((void *)v7 + 14) = 0;
        *((void *)v7 + 3) = &unk_26C65A0D8;
        *(void *)&v19[8] = v7 + 24;
        *(void *)&v19[16] = v7;
        sub_215D1B178((void *)a1 + 1, (uint64_t)&v18);
        goto LABEL_9;
      case 1:
        long long v18 = 0u;
        memset(v19, 0, 24);
        char v9 = (char *)operator new(0xB8uLL);
        *((void *)v9 + 1) = 0;
        *((void *)v9 + 2) = 0;
        *(void *)char v9 = &unk_26C6844A8;
        long long v23 = 0u;
        *((void *)v9 + 5) = 0;
        *((void *)v9 + 6) = 0;
        *((void *)v9 + 4) = &unk_26C659958;
        *(_OWORD *)(v9 + 56) = v23;
        int64x2_t v10 = vdupq_n_s64(0x7FF8000000000000uLL);
        *(int64x2_t *)(v9 + 72) = v10;
        *(int64x2_t *)(v9 + 88) = v10;
        *(int64x2_t *)(v9 + 104) = v10;
        *(int64x2_t *)(v9 + 12std::__fs::filesystem::__rename(__from, __to, 0) = v10;
        *(int64x2_t *)(v9 + 136) = v10;
        *(int64x2_t *)(v9 + 152) = v10;
        *((void *)v9 + 21) = 0x7FF8000000000000;
        *((void *)v9 + 22) = 0;
        *((void *)v9 + 3) = &unk_26C659C48;
        *(void *)&v19[24] = v9 + 24;
        long long v20 = (std::__shared_weak_count *)v9;
        sub_215D1B2F8((void *)a1 + 1, (uint64_t)&v18);
        goto LABEL_12;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        return;
      case 10:
        long long v18 = 0uLL;
        *(void *)int v19 = 0;
        uint64_t v11 = (char *)operator new(0x78uLL);
        *((void *)v11 + 1) = 0;
        *((void *)v11 + 2) = 0;
        *(void *)uint64_t v11 = &unk_26C684458;
        *((void *)v11 + 5) = 0;
        *((void *)v11 + 6) = 0;
        int32x4_t v12 = vdupq_n_s32(0x7FC00000u);
        *((void *)v11 + 4) = &unk_26C65A188;
        *(int32x4_t *)(v11 + 56) = v12;
        *(int32x4_t *)(v11 + 72) = v12;
        *(int32x4_t *)(v11 + 88) = v12;
        *((_DWORD *)v11 + 26) = 2143289344;
        *((void *)v11 + 14) = 0;
        *((void *)v11 + 3) = &unk_26C659DE8;
        *(void *)&v19[8] = v11 + 24;
        *(void *)&v19[16] = v11;
        sub_215D1B478((void *)a1 + 1, (uint64_t)&v18);
LABEL_9:
        long long v13 = *(std::__shared_weak_count **)&v19[16];
        if (!*(void *)&v19[16]) {
          return;
        }
        goto LABEL_20;
      case 11:
        long long v18 = 0u;
        memset(v19, 0, 24);
        int v14 = (char *)operator new(0xB8uLL);
        *((void *)v14 + 1) = 0;
        *((void *)v14 + 2) = 0;
        *(void *)int v14 = &unk_26C6844F8;
        long long v23 = 0u;
        *((void *)v14 + 5) = 0;
        *((void *)v14 + 6) = 0;
        *((void *)v14 + 4) = &unk_26C659958;
        *(_OWORD *)(v14 + 56) = v23;
        int64x2_t v15 = vdupq_n_s64(0x7FF8000000000000uLL);
        *(int64x2_t *)(v14 + 72) = v15;
        *(int64x2_t *)(v14 + 88) = v15;
        *(int64x2_t *)(v14 + 104) = v15;
        *(int64x2_t *)(v14 + 12std::__fs::filesystem::__rename(__from, __to, 0) = v15;
        *(int64x2_t *)(v14 + 136) = v15;
        *(int64x2_t *)(v14 + 152) = v15;
        *((void *)v14 + 21) = 0x7FF8000000000000;
        *((void *)v14 + 22) = 0;
        *((void *)v14 + 3) = &unk_26C659A48;
        *(void *)&v19[24] = v14 + 24;
        long long v20 = (std::__shared_weak_count *)v14;
        sub_215D1B5F8((void *)a1 + 1, (uint64_t)&v18);
LABEL_12:
        long long v13 = v20;
        if (!v20) {
          return;
        }
        goto LABEL_20;
      default:
        JUMPOUT(0);
    }
  }
  switch(v4)
  {
    case 'd':
      long long v18 = 0u;
      memset(v19, 0, 28);
      int v5 = (char *)operator new(0x98uLL);
      *((void *)v5 + 1) = 0;
      *((void *)v5 + 2) = 0;
      *(void *)int v5 = &unk_26C684140;
      long long v23 = 0u;
      *((void *)v5 + 5) = 0;
      *((void *)v5 + 6) = 0;
      *((void *)v5 + 4) = &unk_26C659E78;
      *((_DWORD *)v5 + 18) = 0;
      *(_OWORD *)(v5 + 56) = v23;
      *(void *)(v5 + 76) = 0xA3727C5ACLL;
      int32x4_t v6 = vdupq_n_s32(0x7FC00000u);
      *(int32x4_t *)(v5 + 84) = v6;
      *(int32x4_t *)(v5 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v6;
      *(int32x4_t *)(v5 + 116) = v6;
      *((_DWORD *)v5 + 33) = 2143289344;
      *((_WORD *)v5 + 68) = 257;
      *((void *)v5 + 18) = 0;
      *((void *)v5 + 3) = &unk_26C659FA8;
      long long v20 = (std::__shared_weak_count *)(v5 + 24);
      char v21 = (std::__shared_weak_count *)v5;
      sub_215D1B778((void *)a1 + 1, (uint64_t)&v18);
      goto LABEL_16;
    case 'e':
      sub_215D20D20((uint64_t)&v18);
      sub_215D1B99C((void *)a1 + 1, (uint64_t)&v18);
      goto LABEL_19;
    case 'n':
      long long v18 = 0u;
      memset(v19, 0, 28);
      long long v16 = (char *)operator new(0x98uLL);
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = 0;
      *(void *)long long v16 = &unk_26C684190;
      long long v23 = 0u;
      *((void *)v16 + 5) = 0;
      *((void *)v16 + 6) = 0;
      *((void *)v16 + 4) = &unk_26C659E78;
      *((_DWORD *)v16 + 18) = 0;
      *(_OWORD *)(v16 + 56) = v23;
      *(void *)(v16 + 76) = 0xA3727C5ACLL;
      int32x4_t v17 = vdupq_n_s32(0x7FC00000u);
      *(int32x4_t *)(v16 + 84) = v17;
      *(int32x4_t *)(v16 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v17;
      *(int32x4_t *)(v16 + 116) = v17;
      *((_DWORD *)v16 + 33) = 2143289344;
      *((_WORD *)v16 + 68) = 257;
      *((void *)v16 + 18) = 0;
      *((void *)v16 + 3) = &unk_26C659ED8;
      long long v20 = (std::__shared_weak_count *)(v16 + 24);
      char v21 = (std::__shared_weak_count *)v16;
      sub_215D1BBC0((void *)a1 + 1, (uint64_t)&v18);
LABEL_16:
      long long v13 = v21;
      if (!v21) {
        return;
      }
      goto LABEL_20;
    case 'o':
      sub_215D21190((uint64_t)&v18);
      sub_215D1BDE4((void *)a1 + 1, (uint64_t)&v18);
LABEL_19:
      long long v13 = v22;
      if (v22)
      {
LABEL_20:
        if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      break;
    default:
      return;
  }
}

void sub_215D1CEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D1CEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D1CED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D1CEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D1CF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D1CF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D1CF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D1CF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215D1CFB4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  int v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  int v5 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8));
  int v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 24))(*(void *)(a2 + 8));
  int v7 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 32))(*(void *)(a2 + 8));
  BOOL v8 = v5 == 1 && v6 == 1;
  char v9 = !v8;
  if (v8 && v7 == 11)
  {
    *(_DWORD *)a1 = 0;
    int64x2_t v10 = *(const void **)(a2 + 8);
    if (!v10
      || (uint64_t v11 = __dynamic_cast(v10, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A120, 0), (v12 = v11) == 0))
    {
      long long v13 = sub_2157D1088();
      sub_215D23BE0(a2, (const char *)v13, (uint64_t)"trying to cast camera");
    }
    long long v65 = v11[1];
    *(void *)&long long v66 = *((void *)v11 + 11);
    int v14 = (char *)operator new(0x78uLL);
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)int v14 = &unk_26C684408;
    uint64_t v15 = *((void *)v12 + 11);
    long long v16 = v12[1];
    *((void *)v14 + 4) = &unk_26C65A188;
    *(_OWORD *)(v14 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v16;
    *(_OWORD *)(v14 + 56) = v12[2];
    long long v17 = v12[3];
    long long v18 = v12[4];
    *((_DWORD *)v14 + 26) = *((_DWORD *)v12 + 20);
    *(_OWORD *)(v14 + 88) = v18;
    *(_OWORD *)(v14 + 72) = v17;
    *((void *)v14 + 14) = v15;
    *((void *)v14 + 3) = &unk_26C65A0D8;
    *((void *)&v66 + 1) = v14 + 24;
    long long v67 = (std::__shared_weak_count *)v14;
    sub_215D1B178(v4, (uint64_t)&v65);
    goto LABEL_14;
  }
  if (v7 != 12) {
    char v9 = 1;
  }
  if ((v9 & 1) == 0)
  {
    *(_DWORD *)a1 = 1;
    unint64_t v31 = *(const void **)(a2 + 8);
    if (!v31
      || (uint64_t v32 = __dynamic_cast(v31, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A240, 0), (v33 = v32) == 0))
    {
      double v34 = sub_2157D358C();
      sub_215D23BE0(a2, (const char *)v34, (uint64_t)"trying to cast camera");
    }
    long long v35 = v32[2];
    long long v65 = v32[1];
    long long v66 = v35;
    long long v67 = (std::__shared_weak_count *)*((void *)v32 + 19);
    double v36 = (char *)operator new(0xB8uLL);
    *((void *)v36 + 1) = 0;
    *((void *)v36 + 2) = 0;
    *(void *)double v36 = &unk_26C6844A8;
    uint64_t v37 = *((void *)v33 + 19);
    *((void *)v36 + 4) = &unk_26C659958;
    *(_OWORD *)(v36 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v33[1];
    *(_OWORD *)(v36 + 56) = v33[2];
    long long v38 = v33[3];
    *(_OWORD *)(v36 + 88) = v33[4];
    *(_OWORD *)(v36 + 72) = v38;
    long long v39 = v33[6];
    long long v40 = v33[7];
    long long v41 = v33[8];
    *((void *)v36 + 21) = *((void *)v33 + 18);
    *(_OWORD *)(v36 + 152) = v41;
    *(_OWORD *)(v36 + 136) = v40;
    *(_OWORD *)(v36 + 12std::__fs::filesystem::__rename(__from, __to, 0) = v39;
    *(_OWORD *)(v36 + 104) = v33[5];
    *((void *)v36 + 22) = v37;
    *((void *)v36 + 3) = &unk_26C659C48;
    uint64_t v68 = v36 + 24;
    uint64_t v69 = (std::__shared_weak_count *)v36;
    sub_215D1B2F8(v4, (uint64_t)&v65);
LABEL_36:
    int v19 = v69;
    if (!v69) {
      return a1;
    }
    goto LABEL_37;
  }
  if (v5) {
    BOOL v20 = 0;
  }
  else {
    BOOL v20 = v6 == 1;
  }
  char v21 = !v20;
  if (v20 && v7 == 11)
  {
    *(_DWORD *)a1 = 10;
    uint64_t v22 = *(const void **)(a2 + 8);
    if (!v22
      || (long long v23 = __dynamic_cast(v22, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A270, 0), (v24 = v23) == 0))
    {
      long long v25 = sub_2157CEE7C();
      sub_215D23BE0(a2, (const char *)v25, (uint64_t)"trying to cast camera");
    }
    long long v65 = v23[1];
    *(void *)&long long v66 = *((void *)v23 + 11);
    uint64_t v26 = (char *)operator new(0x78uLL);
    *((void *)v26 + 1) = 0;
    *((void *)v26 + 2) = 0;
    *(void *)uint64_t v26 = &unk_26C684458;
    uint64_t v27 = *((void *)v24 + 11);
    long long v28 = v24[1];
    *((void *)v26 + 4) = &unk_26C65A188;
    *(_OWORD *)(v26 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v28;
    *(_OWORD *)(v26 + 56) = v24[2];
    long long v29 = v24[3];
    long long v30 = v24[4];
    *((_DWORD *)v26 + 26) = *((_DWORD *)v24 + 20);
    *(_OWORD *)(v26 + 88) = v30;
    *(_OWORD *)(v26 + 72) = v29;
    *((void *)v26 + 14) = v27;
    *((void *)v26 + 3) = &unk_26C659DE8;
    *((void *)&v66 + 1) = v26 + 24;
    long long v67 = (std::__shared_weak_count *)v26;
    sub_215D1B478(v4, (uint64_t)&v65);
LABEL_14:
    int v19 = v67;
    if (!v67) {
      return a1;
    }
    goto LABEL_37;
  }
  if (v7 != 12) {
    char v21 = 1;
  }
  if ((v21 & 1) == 0)
  {
    *(_DWORD *)a1 = 11;
    uint64_t v48 = *(const void **)(a2 + 8);
    if (!v48
      || (v49 = __dynamic_cast(v48, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A2A0, 0), (uint64_t v50 = v49) == 0))
    {
      long long v51 = sub_2157D2FF0();
      sub_215D23BE0(a2, (const char *)v51, (uint64_t)"trying to cast camera");
    }
    long long v52 = v49[2];
    long long v65 = v49[1];
    long long v66 = v52;
    long long v67 = (std::__shared_weak_count *)*((void *)v49 + 19);
    long long v53 = (char *)operator new(0xB8uLL);
    *((void *)v53 + 1) = 0;
    *((void *)v53 + 2) = 0;
    *(void *)long long v53 = &unk_26C6844F8;
    uint64_t v54 = *((void *)v50 + 19);
    *((void *)v53 + 4) = &unk_26C659958;
    *(_OWORD *)(v53 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v50[1];
    *(_OWORD *)(v53 + 56) = v50[2];
    long long v55 = v50[3];
    *(_OWORD *)(v53 + 88) = v50[4];
    *(_OWORD *)(v53 + 72) = v55;
    long long v56 = v50[6];
    long long v57 = v50[7];
    long long v58 = v50[8];
    *((void *)v53 + 21) = *((void *)v50 + 18);
    *(_OWORD *)(v53 + 152) = v58;
    *(_OWORD *)(v53 + 136) = v57;
    *(_OWORD *)(v53 + 12std::__fs::filesystem::__rename(__from, __to, 0) = v56;
    *(_OWORD *)(v53 + 104) = v50[5];
    *((void *)v53 + 22) = v54;
    *((void *)v53 + 3) = &unk_26C659A48;
    uint64_t v68 = v53 + 24;
    uint64_t v69 = (std::__shared_weak_count *)v53;
    sub_215D1B5F8(v4, (uint64_t)&v65);
    goto LABEL_36;
  }
  BOOL v43 = v5 == 1 && v6 == 2;
  char v44 = !v43;
  if (v43 && v7 == 11)
  {
    *(_DWORD *)a1 = 100;
    uint64_t v45 = *(const void **)(a2 + 8);
    if (!v45
      || (uint64_t v46 = __dynamic_cast(v45, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A2D0, 0)) == 0)
    {
      uint64_t v47 = sub_2157D3F1C();
      sub_215D23BE0(a2, (const char *)v47, (uint64_t)"trying to cast camera");
    }
    sub_215D20788((uint64_t)&v65, (uint64_t)v46);
    sub_215D1B778(v4, (uint64_t)&v65);
    int v19 = v70;
    if (v70)
    {
LABEL_37:
      if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  else
  {
    if (v7 != 12) {
      char v44 = 1;
    }
    if (v44)
    {
      if (v5) {
        BOOL v59 = 0;
      }
      else {
        BOOL v59 = v6 == 2;
      }
      char v60 = !v59;
      if (v59 && v7 == 11)
      {
        *(_DWORD *)a1 = 110;
        double v61 = sub_215D1BB1C(a2);
        sub_215D20A54((uint64_t)&v65, (uint64_t)v61);
        sub_215D1BBC0(v4, (uint64_t)&v65);
        sub_215D20300((uint64_t)&v65);
      }
      else
      {
        if (v7 != 12) {
          char v60 = 1;
        }
        if (v60)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
          __cxa_throw(exception, (struct type_info *)off_26425A320, MEMORY[0x263F8C080]);
        }
        *(_DWORD *)a1 = 111;
        uint64_t v63 = sub_215D1BD40(a2);
        sub_215D212CC((uint64_t)&v65, (uint64_t)v63);
        sub_215D1BDE4(v4, (uint64_t)&v65);
        sub_215D205D0((uint64_t)&v65);
      }
    }
    else
    {
      *(_DWORD *)a1 = 101;
      uint64_t v62 = sub_215D1B8F8(a2);
      sub_215D20E5C((uint64_t)&v65, (uint64_t)v62);
      sub_215D1B99C(v4, (uint64_t)&v65);
      sub_215D205D0((uint64_t)&v65);
    }
  }
  return a1;
}

void sub_215D1D7F8(_Unwind_Exception *a1)
{
  sub_2157C3E24(v1);
  _Unwind_Resume(a1);
}

void sub_215D1D80C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  sub_2157C3E24(v1);
  _Unwind_Resume(a1);
}

void sub_215D1D828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215D205D0((uint64_t)&a9);
  sub_2157C3E24(v9);
  _Unwind_Resume(a1);
}

void sub_215D1D844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215D20300((uint64_t)&a9);
  sub_2157C3E24(v9);
  _Unwind_Resume(a1);
}

void sub_215D1D860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215D205D0((uint64_t)&a9);
  sub_2157C3E24(v9);
  _Unwind_Resume(a1);
}

void sub_215D1D87C(_Unwind_Exception *a1)
{
  sub_2157C3E24(v1);
  _Unwind_Resume(a1);
}

void sub_215D1D890(_Unwind_Exception *a1)
{
  sub_2157C3E24(v1);
  _Unwind_Resume(a1);
}

void sub_215D1D8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215D20300((uint64_t)&a9);
  sub_2157C3E24(v9);
  _Unwind_Resume(a1);
}

void sub_215D1D8C0(_Unwind_Exception *a1)
{
  sub_2157C3E24(v1);
  _Unwind_Resume(a1);
}

void sub_215D1D8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215D22374((uint64_t)&a9);
  sub_2157C3E24(v9);
  _Unwind_Resume(a1);
}

void sub_215D1D8F0(_Unwind_Exception *a1)
{
  sub_2157C3E24(v1);
  _Unwind_Resume(a1);
}

void sub_215D1D904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215CE954C((uint64_t)&a9);
  sub_2157C3E24(v9);
  _Unwind_Resume(a1);
}

void sub_215D1D920(_Unwind_Exception *a1)
{
  sub_2157C3E24(v1);
  _Unwind_Resume(a1);
}

void sub_215D1D934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215D22374((uint64_t)&a9);
  sub_2157C3E24(v9);
  _Unwind_Resume(a1);
}

void sub_215D1D950(_Unwind_Exception *a1)
{
  sub_2157C3E24(v1);
  _Unwind_Resume(a1);
}

void sub_215D1D964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215CE954C((uint64_t)&a9);
  sub_2157C3E24(v9);
  _Unwind_Resume(a1);
}

void sub_215D1D980(_Unwind_Exception *a1)
{
  sub_2157C3E24(v1);
  _Unwind_Resume(a1);
}

void sub_215D1D994(_Unwind_Exception *a1)
{
  sub_2157C3E24(v1);
  _Unwind_Resume(a1);
}

void sub_215D1D9A8(_Unwind_Exception *a1)
{
  sub_2157C3E24(v1);
  _Unwind_Resume(a1);
}

void sub_215D1D9BC(_Unwind_Exception *a1)
{
  sub_2157C3E24(v1);
  _Unwind_Resume(a1);
}

void sub_215D1D9D0(_Unwind_Exception *a1)
{
  sub_2157C3E24(v1);
  _Unwind_Resume(a1);
}

void sub_215D1D9E4(int *a1@<X0>, void *a2@<X8>)
{
  int v5 = *a1;
  if (!v3 & v2)
  {
    switch(v5)
    {
      case 'e':
        uint64_t v45 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a1 + 1);
        if (!v45) {
          goto LABEL_33;
        }
        uint64_t v46 = v45(3, a1 + 2, 0, &unk_26C676770, &unk_215ED3AB8);
        if (!v46) {
          goto LABEL_33;
        }
        uint64_t v47 = sub_215D204B8(v46);
        char v9 = (char *)operator new(0xF8uLL);
        *((void *)v9 + 2) = 0;
        *((void *)v9 + 1) = 0;
        int64x2_t v10 = (atomic_ullong *)(v9 + 8);
        *(void *)char v9 = &unk_26C659D98;
        uint64_t v11 = v9 + 24;
        *((void *)v9 + 4) = &unk_26C659B18;
        *(_OWORD *)(v9 + 4std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v47 + 16);
        *(_OWORD *)(v9 + 56) = *(_OWORD *)(v47 + 32);
        uint64_t v48 = *(void *)(v47 + 80);
        long long v49 = *(_OWORD *)(v47 + 64);
        *(_OWORD *)(v9 + 72) = *(_OWORD *)(v47 + 48);
        *((void *)v9 + 13) = v48;
        *(_OWORD *)(v9 + 88) = v49;
        uint64_t v50 = *(void *)(v47 + 88);
        *((_DWORD *)v9 + 3std::__fs::filesystem::__rename(__from, __to, 0) = *(_DWORD *)(v47 + 96);
        *((void *)v9 + 14) = v50;
        long long v51 = *(_OWORD *)(v47 + 120);
        *((_OWORD *)v9 + 8) = *(_OWORD *)(v47 + 104);
        *((_OWORD *)v9 + 9) = v51;
        *((_OWORD *)v9 + 1std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v47 + 136);
        long long v52 = *(_OWORD *)(v47 + 168);
        long long v53 = *(_OWORD *)(v47 + 184);
        long long v54 = *(_OWORD *)(v47 + 152);
        *((void *)v9 + 28) = *(void *)(v47 + 200);
        *((_OWORD *)v9 + 12) = v52;
        *((_OWORD *)v9 + 13) = v53;
        *((_OWORD *)v9 + 11) = v54;
        *((_WORD *)v9 + 116) = *(_WORD *)(v47 + 208);
        *((void *)v9 + 3std::__fs::filesystem::__rename(__from, __to, 0) = *(void *)(v47 + 216);
        uint64_t v15 = &unk_26C659D18;
        break;
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
LABEL_34:
        __break(1u);
LABEL_35:
        JUMPOUT(0);
      case 'n':
        uint64_t v69 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a1 + 1);
        if (!v69) {
          goto LABEL_33;
        }
        uint64_t v70 = v69(3, a1 + 2, 0, &unk_26C6767C0, &unk_215ED3B90);
        if (!v70) {
          goto LABEL_33;
        }
        uint64_t v71 = sub_215D20250(v70);
        char v9 = (char *)operator new(0x98uLL);
        *((void *)v9 + 1) = 0;
        int64x2_t v10 = (atomic_ullong *)(v9 + 8);
        *((void *)v9 + 2) = 0;
        *(void *)char v9 = &unk_26C659F58;
        uint64_t v11 = v9 + 24;
        *((void *)v9 + 4) = &unk_26C659E78;
        *((void *)v9 + 5) = *(void *)(v71 + 16);
        *((void *)v9 + 6) = *(void *)(v71 + 24);
        long long v72 = *(_OWORD *)(v71 + 32);
        *((_DWORD *)v9 + 18) = *(_DWORD *)(v71 + 48);
        *(_OWORD *)(v9 + 56) = v72;
        *(void *)(v9 + 76) = *(void *)(v71 + 52);
        *(_OWORD *)(v9 + 84) = *(_OWORD *)(v71 + 60);
        long long v73 = *(_OWORD *)(v71 + 92);
        int v74 = *(_DWORD *)(v71 + 108);
        *(_OWORD *)(v9 + 10std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v71 + 76);
        *((_DWORD *)v9 + 33) = v74;
        *(_OWORD *)(v9 + 116) = v73;
        *((_WORD *)v9 + 68) = *(_WORD *)(v71 + 112);
        *((void *)v9 + 18) = *(void *)(v71 + 120);
        uint64_t v15 = &unk_26C659ED8;
        break;
      case 'o':
        char v21 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a1 + 1);
        if (!v21) {
          goto LABEL_33;
        }
        uint64_t v22 = v21(3, a1 + 2, 0, &unk_26C676810, &unk_215ED3C68);
        if (!v22) {
          goto LABEL_33;
        }
        uint64_t v23 = sub_215D204B8(v22);
        char v9 = (char *)operator new(0xF8uLL);
        *((void *)v9 + 2) = 0;
        *((void *)v9 + 1) = 0;
        int64x2_t v10 = (atomic_ullong *)(v9 + 8);
        *(void *)char v9 = &unk_26C659BF8;
        uint64_t v11 = v9 + 24;
        *((void *)v9 + 4) = &unk_26C659B18;
        *(_OWORD *)(v9 + 4std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v23 + 16);
        *(_OWORD *)(v9 + 56) = *(_OWORD *)(v23 + 32);
        uint64_t v24 = *(void *)(v23 + 80);
        long long v25 = *(_OWORD *)(v23 + 64);
        *(_OWORD *)(v9 + 72) = *(_OWORD *)(v23 + 48);
        *((void *)v9 + 13) = v24;
        *(_OWORD *)(v9 + 88) = v25;
        uint64_t v26 = *(void *)(v23 + 88);
        *((_DWORD *)v9 + 3std::__fs::filesystem::__rename(__from, __to, 0) = *(_DWORD *)(v23 + 96);
        *((void *)v9 + 14) = v26;
        long long v27 = *(_OWORD *)(v23 + 120);
        *((_OWORD *)v9 + 8) = *(_OWORD *)(v23 + 104);
        *((_OWORD *)v9 + 9) = v27;
        *((_OWORD *)v9 + 1std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v23 + 136);
        long long v28 = *(_OWORD *)(v23 + 168);
        long long v29 = *(_OWORD *)(v23 + 184);
        long long v30 = *(_OWORD *)(v23 + 152);
        *((void *)v9 + 28) = *(void *)(v23 + 200);
        *((_OWORD *)v9 + 12) = v28;
        *((_OWORD *)v9 + 13) = v29;
        *((_OWORD *)v9 + 11) = v30;
        *((_WORD *)v9 + 116) = *(_WORD *)(v23 + 208);
        *((void *)v9 + 3std::__fs::filesystem::__rename(__from, __to, 0) = *(void *)(v23 + 216);
        uint64_t v15 = &unk_26C659B78;
        break;
      default:
        int v6 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a1 + 1);
        if (!v6 || (uint64_t v7 = v6(3, a1 + 2, 0, &unk_26C676720, &unk_215ED39E0)) == 0) {
LABEL_33:
        }
          sub_215A0E034();
        uint64_t v8 = sub_215D20250(v7);
        char v9 = (char *)operator new(0x98uLL);
        *((void *)v9 + 1) = 0;
        int64x2_t v10 = (atomic_ullong *)(v9 + 8);
        *((void *)v9 + 2) = 0;
        *(void *)char v9 = &unk_26C65A028;
        uint64_t v11 = v9 + 24;
        *((void *)v9 + 4) = &unk_26C659E78;
        *((void *)v9 + 5) = *(void *)(v8 + 16);
        *((void *)v9 + 6) = *(void *)(v8 + 24);
        long long v12 = *(_OWORD *)(v8 + 32);
        *((_DWORD *)v9 + 18) = *(_DWORD *)(v8 + 48);
        *(_OWORD *)(v9 + 56) = v12;
        *(void *)(v9 + 76) = *(void *)(v8 + 52);
        *(_OWORD *)(v9 + 84) = *(_OWORD *)(v8 + 60);
        long long v13 = *(_OWORD *)(v8 + 92);
        int v14 = *(_DWORD *)(v8 + 108);
        *(_OWORD *)(v9 + 10std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v8 + 76);
        *((_DWORD *)v9 + 33) = v14;
        *(_OWORD *)(v9 + 116) = v13;
        *((_WORD *)v9 + 68) = *(_WORD *)(v8 + 112);
        *((void *)v9 + 18) = *(void *)(v8 + 120);
        uint64_t v15 = &unk_26C659FA8;
        break;
    }
  }
  else
  {
    switch(v5)
    {
      case 0:
        long long v16 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a1 + 1);
        if (!v16) {
          goto LABEL_33;
        }
        long long v17 = (float32x2_t *)v16(3, a1 + 2, 0, &unk_26C6765E0, &unk_215ED368C);
        if (!v17) {
          goto LABEL_33;
        }
        uint64_t v18 = sub_215D22318(v17);
        char v9 = (char *)operator new(0x78uLL);
        *((void *)v9 + 2) = 0;
        *((void *)v9 + 1) = 0;
        int64x2_t v10 = (atomic_ullong *)(v9 + 8);
        *(void *)char v9 = &unk_26C65A1E8;
        uint64_t v11 = v9 + 24;
        *((void *)v9 + 4) = &unk_26C65A188;
        *((void *)v9 + 5) = *(void *)(v18 + 16);
        *((void *)v9 + 6) = *(void *)(v18 + 24);
        *(_OWORD *)(v9 + 56) = *(_OWORD *)(v18 + 32);
        int v19 = *(_DWORD *)(v18 + 80);
        long long v20 = *(_OWORD *)(v18 + 64);
        *(_OWORD *)(v9 + 72) = *(_OWORD *)(v18 + 48);
        *((_DWORD *)v9 + 26) = v19;
        *(_OWORD *)(v9 + 88) = v20;
        *((void *)v9 + 14) = *(void *)(v18 + 88);
        uint64_t v15 = &unk_26C65A0D8;
        break;
      case 1:
        long long v55 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a1 + 1);
        if (!v55) {
          goto LABEL_33;
        }
        uint64_t v56 = v55(3, a1 + 2, 0, &unk_26C676630, &unk_215ED3760);
        if (!v56) {
          goto LABEL_33;
        }
        double v57 = *(double *)v56;
        double v58 = *(double *)(v56 + 8);
        double v59 = *(double *)(v56 + 16);
        double v60 = *(double *)(v56 + 24);
        double v61 = 1.0 / *(double *)v56;
        uint64_t v62 = *(void *)(v56 + 32);
        uint64_t v63 = *(void *)(v56 + 40);
        *(void *)(v63 + 16) = *(void *)v56;
        *(double *)(v63 + 24) = v58;
        *(double *)(v63 + 32) = v59;
        *(double *)(v63 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v60;
        *(double *)(v63 + 48) = v61;
        *(double *)(v63 + 56) = 1.0 / v58;
        *(double *)(v63 + 64) = -(v59 * v61);
        *(double *)(v63 + 72) = -(v60 * (1.0 / v58));
        *(double *)(v63 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v57;
        *(void *)(v63 + 96) = 0;
        *(void *)(v63 + 104) = 0;
        *(void *)(v63 + 88) = 0;
        *(double *)(v63 + 112) = v58;
        *(void *)(v63 + 12std::__fs::filesystem::__rename(__from, __to, 0) = 0;
        *(double *)(v63 + 128) = v59;
        *(double *)(v63 + 136) = v60;
        *(void *)(v63 + 144) = 0x3FF0000000000000;
        *(void *)(v63 + 152) = v62;
        uint64_t v64 = *(void *)(v56 + 40);
        char v9 = (char *)operator new(0xB8uLL);
        *((void *)v9 + 2) = 0;
        *((void *)v9 + 1) = 0;
        int64x2_t v10 = (atomic_ullong *)(v9 + 8);
        *(void *)char v9 = &unk_26C659CC8;
        uint64_t v11 = v9 + 24;
        *((void *)v9 + 4) = &unk_26C659958;
        *(_OWORD *)(v9 + 4std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v64 + 16);
        *(_OWORD *)(v9 + 56) = *(_OWORD *)(v64 + 32);
        long long v65 = *(_OWORD *)(v64 + 64);
        *(_OWORD *)(v9 + 72) = *(_OWORD *)(v64 + 48);
        *(_OWORD *)(v9 + 88) = v65;
        *(_OWORD *)(v9 + 104) = *(_OWORD *)(v64 + 80);
        long long v67 = *(_OWORD *)(v64 + 112);
        long long v66 = *(_OWORD *)(v64 + 128);
        uint64_t v68 = *(void *)(v64 + 144);
        *(_OWORD *)(v9 + 12std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v64 + 96);
        *((void *)v9 + 21) = v68;
        *(_OWORD *)(v9 + 152) = v66;
        *(_OWORD *)(v9 + 136) = v67;
        *((void *)v9 + 22) = *(void *)(v64 + 152);
        uint64_t v15 = &unk_26C659C48;
        break;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        goto LABEL_34;
      case 10:
        unint64_t v75 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a1 + 1);
        if (!v75) {
          goto LABEL_33;
        }
        uint64_t v76 = (float32x2_t *)v75(3, a1 + 2, 0, &unk_26C676680, &unk_215ED3834);
        if (!v76) {
          goto LABEL_33;
        }
        uint64_t v77 = sub_215D22318(v76);
        char v9 = (char *)operator new(0x78uLL);
        *((void *)v9 + 2) = 0;
        *((void *)v9 + 1) = 0;
        int64x2_t v10 = (atomic_ullong *)(v9 + 8);
        *(void *)char v9 = &unk_26C659E28;
        uint64_t v11 = v9 + 24;
        *((void *)v9 + 4) = &unk_26C65A188;
        *((void *)v9 + 5) = *(void *)(v77 + 16);
        *((void *)v9 + 6) = *(void *)(v77 + 24);
        *(_OWORD *)(v9 + 56) = *(_OWORD *)(v77 + 32);
        int v78 = *(_DWORD *)(v77 + 80);
        long long v79 = *(_OWORD *)(v77 + 64);
        *(_OWORD *)(v9 + 72) = *(_OWORD *)(v77 + 48);
        *((_DWORD *)v9 + 26) = v78;
        *(_OWORD *)(v9 + 88) = v79;
        *((void *)v9 + 14) = *(void *)(v77 + 88);
        uint64_t v15 = &unk_26C659DE8;
        break;
      case 11:
        unint64_t v31 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a1 + 1);
        if (!v31) {
          goto LABEL_33;
        }
        uint64_t v32 = v31(3, a1 + 2, 0, &unk_26C6766D0, &unk_215ED3908);
        if (!v32) {
          goto LABEL_33;
        }
        double v33 = *(double *)v32;
        double v34 = *(double *)(v32 + 8);
        double v35 = *(double *)(v32 + 16);
        double v36 = *(double *)(v32 + 24);
        double v37 = 1.0 / *(double *)v32;
        uint64_t v38 = *(void *)(v32 + 32);
        uint64_t v39 = *(void *)(v32 + 40);
        *(void *)(v39 + 16) = *(void *)v32;
        *(double *)(v39 + 24) = v34;
        *(double *)(v39 + 32) = v35;
        *(double *)(v39 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v36;
        *(double *)(v39 + 48) = v37;
        *(double *)(v39 + 56) = 1.0 / v34;
        *(double *)(v39 + 64) = -(v35 * v37);
        *(double *)(v39 + 72) = -(v36 * (1.0 / v34));
        *(double *)(v39 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v33;
        *(void *)(v39 + 96) = 0;
        *(void *)(v39 + 104) = 0;
        *(void *)(v39 + 88) = 0;
        *(double *)(v39 + 112) = v34;
        *(void *)(v39 + 12std::__fs::filesystem::__rename(__from, __to, 0) = 0;
        *(double *)(v39 + 128) = v35;
        *(double *)(v39 + 136) = v36;
        *(void *)(v39 + 144) = 0x3FF0000000000000;
        *(void *)(v39 + 152) = v38;
        uint64_t v40 = *(void *)(v32 + 40);
        char v9 = (char *)operator new(0xB8uLL);
        *((void *)v9 + 2) = 0;
        *((void *)v9 + 1) = 0;
        int64x2_t v10 = (atomic_ullong *)(v9 + 8);
        *(void *)char v9 = &unk_26C659AC8;
        uint64_t v11 = v9 + 24;
        *((void *)v9 + 4) = &unk_26C659958;
        *(_OWORD *)(v9 + 4std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v40 + 16);
        *(_OWORD *)(v9 + 56) = *(_OWORD *)(v40 + 32);
        long long v41 = *(_OWORD *)(v40 + 64);
        *(_OWORD *)(v9 + 72) = *(_OWORD *)(v40 + 48);
        *(_OWORD *)(v9 + 88) = v41;
        *(_OWORD *)(v9 + 104) = *(_OWORD *)(v40 + 80);
        long long v43 = *(_OWORD *)(v40 + 112);
        long long v42 = *(_OWORD *)(v40 + 128);
        uint64_t v44 = *(void *)(v40 + 144);
        *(_OWORD *)(v9 + 12std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v40 + 96);
        *((void *)v9 + 21) = v44;
        *(_OWORD *)(v9 + 152) = v42;
        *(_OWORD *)(v9 + 136) = v43;
        *((void *)v9 + 22) = *(void *)(v40 + 152);
        uint64_t v15 = &unk_26C659A48;
        break;
      default:
        goto LABEL_35;
    }
  }
  *((void *)v9 + 3) = v15;
  *a2 = &unk_26C684548;
  a2[1] = v11;
  a2[2] = v9;
  atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(v10, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v80 = (std::__shared_weak_count *)v9;
    (*(void (**)(char *))(*(void *)v9 + 16))(v9);
    std::__shared_weak_count::__release_weak(v80);
  }
}

BOOL sub_215D1E390(int *a1, int *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  sub_215D1D9E4(a1, v9);
  sub_215D1D9E4(a2, v7);
  BOOL v3 = sub_215D232DC((uint64_t)v9, (uint64_t)v7);
  v7[0] = &unk_26C684548;
  int v4 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  v9[0] = &unk_26C684548;
  int v5 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v3;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return v3;
}

void sub_215D1E4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_215D1E508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215D2319C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215D1E51C(int *a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *a1;
  if (!(!v2 & v1))
  {
    switch(v4)
    {
      case 0:
        long long v18 = 0uLL;
        *(void *)int v19 = 0;
        uint64_t v7 = (char *)operator new(0x78uLL);
        *((void *)v7 + 1) = 0;
        *((void *)v7 + 2) = 0;
        *(void *)uint64_t v7 = &unk_26C684408;
        *((void *)v7 + 5) = 0;
        *((void *)v7 + 6) = 0;
        int32x4_t v8 = vdupq_n_s32(0x7FC00000u);
        *((void *)v7 + 4) = &unk_26C65A188;
        *(int32x4_t *)(v7 + 56) = v8;
        *(int32x4_t *)(v7 + 72) = v8;
        *(int32x4_t *)(v7 + 88) = v8;
        *((_DWORD *)v7 + 26) = 2143289344;
        *((void *)v7 + 14) = 0;
        *((void *)v7 + 3) = &unk_26C65A0D8;
        *(void *)&v19[8] = v7 + 24;
        *(void *)&v19[16] = v7;
        sub_215D1B178((void *)a1 + 1, (uint64_t)&v18);
        goto LABEL_9;
      case 1:
        long long v18 = 0u;
        memset(v19, 0, 24);
        char v9 = (char *)operator new(0xB8uLL);
        *((void *)v9 + 1) = 0;
        *((void *)v9 + 2) = 0;
        *(void *)char v9 = &unk_26C6844A8;
        long long v23 = 0u;
        *((void *)v9 + 5) = 0;
        *((void *)v9 + 6) = 0;
        *((void *)v9 + 4) = &unk_26C659958;
        *(_OWORD *)(v9 + 56) = v23;
        int64x2_t v10 = vdupq_n_s64(0x7FF8000000000000uLL);
        *(int64x2_t *)(v9 + 72) = v10;
        *(int64x2_t *)(v9 + 88) = v10;
        *(int64x2_t *)(v9 + 104) = v10;
        *(int64x2_t *)(v9 + 12std::__fs::filesystem::__rename(__from, __to, 0) = v10;
        *(int64x2_t *)(v9 + 136) = v10;
        *(int64x2_t *)(v9 + 152) = v10;
        *((void *)v9 + 21) = 0x7FF8000000000000;
        *((void *)v9 + 22) = 0;
        *((void *)v9 + 3) = &unk_26C659C48;
        *(void *)&v19[24] = v9 + 24;
        long long v20 = (std::__shared_weak_count *)v9;
        sub_215D1B2F8((void *)a1 + 1, (uint64_t)&v18);
        goto LABEL_12;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        return;
      case 10:
        long long v18 = 0uLL;
        *(void *)int v19 = 0;
        uint64_t v11 = (char *)operator new(0x78uLL);
        *((void *)v11 + 1) = 0;
        *((void *)v11 + 2) = 0;
        *(void *)uint64_t v11 = &unk_26C684458;
        *((void *)v11 + 5) = 0;
        *((void *)v11 + 6) = 0;
        int32x4_t v12 = vdupq_n_s32(0x7FC00000u);
        *((void *)v11 + 4) = &unk_26C65A188;
        *(int32x4_t *)(v11 + 56) = v12;
        *(int32x4_t *)(v11 + 72) = v12;
        *(int32x4_t *)(v11 + 88) = v12;
        *((_DWORD *)v11 + 26) = 2143289344;
        *((void *)v11 + 14) = 0;
        *((void *)v11 + 3) = &unk_26C659DE8;
        *(void *)&v19[8] = v11 + 24;
        *(void *)&v19[16] = v11;
        sub_215D1B478((void *)a1 + 1, (uint64_t)&v18);
LABEL_9:
        long long v13 = *(std::__shared_weak_count **)&v19[16];
        if (!*(void *)&v19[16]) {
          return;
        }
        goto LABEL_20;
      case 11:
        long long v18 = 0u;
        memset(v19, 0, 24);
        int v14 = (char *)operator new(0xB8uLL);
        *((void *)v14 + 1) = 0;
        *((void *)v14 + 2) = 0;
        *(void *)int v14 = &unk_26C6844F8;
        long long v23 = 0u;
        *((void *)v14 + 5) = 0;
        *((void *)v14 + 6) = 0;
        *((void *)v14 + 4) = &unk_26C659958;
        *(_OWORD *)(v14 + 56) = v23;
        int64x2_t v15 = vdupq_n_s64(0x7FF8000000000000uLL);
        *(int64x2_t *)(v14 + 72) = v15;
        *(int64x2_t *)(v14 + 88) = v15;
        *(int64x2_t *)(v14 + 104) = v15;
        *(int64x2_t *)(v14 + 12std::__fs::filesystem::__rename(__from, __to, 0) = v15;
        *(int64x2_t *)(v14 + 136) = v15;
        *(int64x2_t *)(v14 + 152) = v15;
        *((void *)v14 + 21) = 0x7FF8000000000000;
        *((void *)v14 + 22) = 0;
        *((void *)v14 + 3) = &unk_26C659A48;
        *(void *)&v19[24] = v14 + 24;
        long long v20 = (std::__shared_weak_count *)v14;
        sub_215D1B5F8((void *)a1 + 1, (uint64_t)&v18);
LABEL_12:
        long long v13 = v20;
        if (!v20) {
          return;
        }
        goto LABEL_20;
      default:
        JUMPOUT(0);
    }
  }
  switch(v4)
  {
    case 'd':
      long long v18 = 0u;
      memset(v19, 0, 28);
      int v5 = (char *)operator new(0x98uLL);
      *((void *)v5 + 1) = 0;
      *((void *)v5 + 2) = 0;
      *(void *)int v5 = &unk_26C684140;
      long long v23 = 0u;
      *((void *)v5 + 5) = 0;
      *((void *)v5 + 6) = 0;
      *((void *)v5 + 4) = &unk_26C659E78;
      *((_DWORD *)v5 + 18) = 0;
      *(_OWORD *)(v5 + 56) = v23;
      *(void *)(v5 + 76) = 0xA3727C5ACLL;
      int32x4_t v6 = vdupq_n_s32(0x7FC00000u);
      *(int32x4_t *)(v5 + 84) = v6;
      *(int32x4_t *)(v5 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v6;
      *(int32x4_t *)(v5 + 116) = v6;
      *((_DWORD *)v5 + 33) = 2143289344;
      *((_WORD *)v5 + 68) = 257;
      *((void *)v5 + 18) = 0;
      *((void *)v5 + 3) = &unk_26C659FA8;
      long long v20 = (std::__shared_weak_count *)(v5 + 24);
      char v21 = (std::__shared_weak_count *)v5;
      sub_215D1B778((void *)a1 + 1, (uint64_t)&v18);
      goto LABEL_16;
    case 'e':
      sub_215D20D20((uint64_t)&v18);
      sub_215D1B99C((void *)a1 + 1, (uint64_t)&v18);
      goto LABEL_19;
    case 'n':
      long long v18 = 0u;
      memset(v19, 0, 28);
      long long v16 = (char *)operator new(0x98uLL);
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = 0;
      *(void *)long long v16 = &unk_26C684190;
      long long v23 = 0u;
      *((void *)v16 + 5) = 0;
      *((void *)v16 + 6) = 0;
      *((void *)v16 + 4) = &unk_26C659E78;
      *((_DWORD *)v16 + 18) = 0;
      *(_OWORD *)(v16 + 56) = v23;
      *(void *)(v16 + 76) = 0xA3727C5ACLL;
      int32x4_t v17 = vdupq_n_s32(0x7FC00000u);
      *(int32x4_t *)(v16 + 84) = v17;
      *(int32x4_t *)(v16 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v17;
      *(int32x4_t *)(v16 + 116) = v17;
      *((_DWORD *)v16 + 33) = 2143289344;
      *((_WORD *)v16 + 68) = 257;
      *((void *)v16 + 18) = 0;
      *((void *)v16 + 3) = &unk_26C659ED8;
      long long v20 = (std::__shared_weak_count *)(v16 + 24);
      char v21 = (std::__shared_weak_count *)v16;
      sub_215D1BBC0((void *)a1 + 1, (uint64_t)&v18);
LABEL_16:
      long long v13 = v21;
      if (!v21) {
        return;
      }
      goto LABEL_20;
    case 'o':
      sub_215D21190((uint64_t)&v18);
      sub_215D1BDE4((void *)a1 + 1, (uint64_t)&v18);
LABEL_19:
      long long v13 = v22;
      if (v22)
      {
LABEL_20:
        if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      break;
    default:
      return;
  }
}

void sub_215D1EABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D1EAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D1EAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D1EAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D1EB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D1EB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D1EB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D1EB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_215D1EBC0(void *a1, int *a2)
{
  int v4 = *a2;
  if (!(!v3 & v2))
  {
    switch(v4)
    {
      case 0:
        int v5 = "CenterPinholeF";
        uint64_t v6 = 14;
        return sub_215731D94(a1, (uint64_t)v5, v6);
      case 1:
        int v5 = "CenterPinholeD";
        uint64_t v6 = 14;
        return sub_215731D94(a1, (uint64_t)v5, v6);
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        goto LABEL_11;
      case 10:
        int v5 = "CornerPinholeF";
        uint64_t v6 = 14;
        return sub_215731D94(a1, (uint64_t)v5, v6);
      case 11:
        int v5 = "CornerPinholeD";
        uint64_t v6 = 14;
        return sub_215731D94(a1, (uint64_t)v5, v6);
      default:
        JUMPOUT(0);
    }
  }
  switch(v4)
  {
    case 'd':
      int v5 = "CenterHeikkilaF";
      uint64_t v6 = 15;
      break;
    case 'e':
      int v5 = "CenterHeikkilaD";
      uint64_t v6 = 15;
      break;
    case 'n':
      int v5 = "CornerHeikkilaF";
      uint64_t v6 = 15;
      break;
    case 'o':
      int v5 = "CornerHeikkilaD";
      uint64_t v6 = 15;
      break;
    default:
LABEL_11:
      int v5 = "invalid camera type";
      uint64_t v6 = 19;
      break;
  }
  return sub_215731D94(a1, (uint64_t)v5, v6);
}

uint64_t *sub_215D1ED08(uint64_t *a1, _DWORD *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890560, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267890560))
  {
    sub_215D1EFC8();
  }
  uint64_t v24 = 0;
  size_t v25 = 0;
  uint64_t v26 = 0;
  sub_215A9B3F0(a1, (uint64_t)&v24);
  uint64_t v4 = qword_267890570;
  if (!qword_267890570) {
    goto LABEL_41;
  }
  int v5 = SHIBYTE(v26);
  uint64_t v6 = v24;
  if (v26 >= 0) {
    uint64_t v7 = &v24;
  }
  else {
    uint64_t v7 = (void **)v24;
  }
  if (v26 >= 0) {
    size_t v8 = HIBYTE(v26);
  }
  else {
    size_t v8 = v25;
  }
  char v9 = &qword_267890570;
  do
  {
    while (1)
    {
      int v10 = *(char *)(v4 + 55);
      uint64_t v11 = v10 >= 0 ? (const void *)(v4 + 32) : *(const void **)(v4 + 32);
      size_t v12 = v10 >= 0 ? *(unsigned __int8 *)(v4 + 55) : *(void *)(v4 + 40);
      size_t v13 = v8 >= v12 ? v12 : v8;
      int v14 = memcmp(v11, v7, v13);
      if (v14) {
        break;
      }
      if (v12 >= v8) {
        goto LABEL_24;
      }
LABEL_10:
      uint64_t v4 = *(void *)(v4 + 8);
      if (!v4) {
        goto LABEL_25;
      }
    }
    if (v14 < 0) {
      goto LABEL_10;
    }
LABEL_24:
    char v9 = (uint64_t *)v4;
    uint64_t v4 = *(void *)v4;
  }
  while (v4);
LABEL_25:
  if (v9 == &qword_267890570) {
    goto LABEL_41;
  }
  int v15 = *((char *)v9 + 55);
  if (v15 >= 0) {
    long long v16 = v9 + 4;
  }
  else {
    long long v16 = (const void *)v9[4];
  }
  if (v15 >= 0) {
    size_t v17 = *((unsigned __int8 *)v9 + 55);
  }
  else {
    size_t v17 = v9[5];
  }
  if (v17 >= v8) {
    size_t v18 = v8;
  }
  else {
    size_t v18 = v17;
  }
  int v19 = memcmp(v7, v16, v18);
  if (v19)
  {
    if ((v19 & 0x80000000) == 0) {
      goto LABEL_37;
    }
LABEL_41:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    sub_215AEDCD0(", expected [Center|Corner][Pinhole|Heikkila][F|D]", &v22, &v23);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A320, MEMORY[0x263F8C080]);
  }
  if (v8 < v17) {
    goto LABEL_41;
  }
LABEL_37:
  *a2 = *((_DWORD *)v9 + 14);
  if (v5 < 0) {
    operator delete(v6);
  }
  return a1;
}

void sub_215D1EF38(_Unwind_Exception *a1)
{
}

void sub_215D1EF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v28 & 1) == 0)
    {
LABEL_8:
      if (a27 < 0) {
        operator delete(a22);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void sub_215D1EFC8()
{
  qword_267890570 = 0;
  qword_267890578 = 0;
  qword_267890568 = (uint64_t)&qword_267890570;
  sub_215A0DC50();
}

void sub_215D1F318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,int a21)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215D1F384(uint64_t a1)
{
  return a1;
}

void *sub_215D1F3B0(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  dispatch_workloop_t result = &unk_26C6765E0;
  switch(v5)
  {
    case 1:
      size_t v12 = (float32x2_t *)a2[1];
      size_t v13 = operator new(0x28uLL);
      sub_215D223F0(v13, v12);
      dispatch_workloop_t result = 0;
      *a3 = sub_215D1F3B0;
      a3[1] = v13;
      return result;
    case 2:
      dispatch_workloop_t result = 0;
      uint64_t v14 = a2[1];
      *a3 = sub_215D1F3B0;
      a3[1] = v14;
      *a2 = 0;
      return result;
    case 3:
      if (a4)
      {
        unint64_t v11 = *(void *)(a4 + 8);
        if ((char *)v11 != "N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE")
        {
          if (((v11 & (unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v11, "N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE")) {
            return 0;
          }
          if (strcmp((const char *)(v11 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL)))
          {
            return 0;
          }
        }
      }
      else if (a5 != &unk_215ED368C)
      {
        return 0;
      }
      return (void *)a2[1];
    case 4:
      return result;
    default:
      char v9 = (void *)a2[1];
      int v10 = (std::__shared_weak_count *)v9[4];
      if (v10)
      {
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      operator delete(v9);
      dispatch_workloop_t result = 0;
      *a2 = 0;
      return result;
  }
}

void sub_215D1F55C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_215D1F584(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  dispatch_workloop_t result = &unk_26C676630;
  switch(v5)
  {
    case 1:
      uint64_t v12 = a2[1];
      size_t v13 = operator new(0x38uLL);
      sub_215D22650((uint64_t)v13, v12);
      dispatch_workloop_t result = 0;
      *a3 = sub_215D1F584;
      a3[1] = v13;
      return result;
    case 2:
      dispatch_workloop_t result = 0;
      uint64_t v14 = a2[1];
      *a3 = sub_215D1F584;
      a3[1] = v14;
      *a2 = 0;
      return result;
    case 3:
      if (a4)
      {
        unint64_t v11 = *(void *)(a4 + 8);
        if ((char *)v11 != "N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE")
        {
          if (((v11 & (unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v11, "N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE")) {
            return 0;
          }
          if (strcmp((const char *)(v11 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL)))
          {
            return 0;
          }
        }
      }
      else if (a5 != &unk_215ED3760)
      {
        return 0;
      }
      return (void *)a2[1];
    case 4:
      return result;
    default:
      char v9 = (void *)a2[1];
      int v10 = (std::__shared_weak_count *)v9[6];
      if (v10)
      {
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      operator delete(v9);
      dispatch_workloop_t result = 0;
      *a2 = 0;
      return result;
  }
}

void sub_215D1F730(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_215D1F758(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  dispatch_workloop_t result = &unk_26C676680;
  switch(v5)
  {
    case 1:
      uint64_t v12 = (float32x2_t *)a2[1];
      size_t v13 = operator new(0x28uLL);
      sub_215D22520(v13, v12);
      dispatch_workloop_t result = 0;
      *a3 = sub_215D1F758;
      a3[1] = v13;
      return result;
    case 2:
      dispatch_workloop_t result = 0;
      uint64_t v14 = a2[1];
      *a3 = sub_215D1F758;
      a3[1] = v14;
      *a2 = 0;
      return result;
    case 3:
      if (a4)
      {
        unint64_t v11 = *(void *)(a4 + 8);
        if ((char *)v11 != "N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE")
        {
          if (((v11 & (unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v11, "N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE")) {
            return 0;
          }
          if (strcmp((const char *)(v11 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL)))
          {
            return 0;
          }
        }
      }
      else if (a5 != &unk_215ED3834)
      {
        return 0;
      }
      return (void *)a2[1];
    case 4:
      return result;
    default:
      char v9 = (void *)a2[1];
      int v10 = (std::__shared_weak_count *)v9[4];
      if (v10)
      {
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      operator delete(v9);
      dispatch_workloop_t result = 0;
      *a2 = 0;
      return result;
  }
}

void sub_215D1F904(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_215D1F92C(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  dispatch_workloop_t result = &unk_26C6766D0;
  switch(v5)
  {
    case 1:
      uint64_t v12 = a2[1];
      size_t v13 = operator new(0x38uLL);
      sub_215D227DC((uint64_t)v13, v12);
      dispatch_workloop_t result = 0;
      *a3 = sub_215D1F92C;
      a3[1] = v13;
      return result;
    case 2:
      dispatch_workloop_t result = 0;
      uint64_t v14 = a2[1];
      *a3 = sub_215D1F92C;
      a3[1] = v14;
      *a2 = 0;
      return result;
    case 3:
      if (a4)
      {
        unint64_t v11 = *(void *)(a4 + 8);
        if ((char *)v11 != "N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE")
        {
          if (((v11 & (unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v11, "N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE")) {
            return 0;
          }
          if (strcmp((const char *)(v11 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL)))
          {
            return 0;
          }
        }
      }
      else if (a5 != &unk_215ED3908)
      {
        return 0;
      }
      return (void *)a2[1];
    case 4:
      return result;
    default:
      char v9 = (void *)a2[1];
      int v10 = (std::__shared_weak_count *)v9[6];
      if (v10)
      {
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      operator delete(v9);
      dispatch_workloop_t result = 0;
      *a2 = 0;
      return result;
  }
}

void sub_215D1FAD8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_215D1FB00(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  dispatch_workloop_t result = &unk_26C676720;
  switch(v5)
  {
    case 1:
      uint64_t v12 = a2[1];
      size_t v13 = operator new(0x40uLL);
      sub_215D20890((uint64_t)v13, v12);
      dispatch_workloop_t result = 0;
      *a3 = sub_215D1FB00;
      a3[1] = v13;
      return result;
    case 2:
      dispatch_workloop_t result = 0;
      uint64_t v14 = a2[1];
      *a3 = sub_215D1FB00;
      a3[1] = v14;
      *a2 = 0;
      return result;
    case 3:
      if (a4)
      {
        unint64_t v11 = *(void *)(a4 + 8);
        if ((char *)v11 != "N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE")
        {
          if (((v11 & (unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v11, "N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE")) {
            return 0;
          }
          if (strcmp((const char *)(v11 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL)))
          {
            return 0;
          }
        }
      }
      else if (a5 != &unk_215ED39E0)
      {
        return 0;
      }
      return (void *)a2[1];
    case 4:
      return result;
    default:
      char v9 = (void *)a2[1];
      int v10 = (std::__shared_weak_count *)v9[7];
      if (v10)
      {
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      operator delete(v9);
      dispatch_workloop_t result = 0;
      *a2 = 0;
      return result;
  }
}

void sub_215D1FCAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_215D1FCD4(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  dispatch_workloop_t result = &unk_26C676770;
  switch(v5)
  {
    case 1:
      uint64_t v12 = a2[1];
      size_t v13 = operator new(0x60uLL);
      sub_215D20F7C((uint64_t)v13, v12);
      dispatch_workloop_t result = 0;
      *a3 = sub_215D1FCD4;
      a3[1] = v13;
      return result;
    case 2:
      dispatch_workloop_t result = 0;
      uint64_t v14 = a2[1];
      *a3 = sub_215D1FCD4;
      a3[1] = v14;
      *a2 = 0;
      return result;
    case 3:
      if (a4)
      {
        unint64_t v11 = *(void *)(a4 + 8);
        if ((char *)v11 != "N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE")
        {
          if (((v11 & (unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v11, "N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE")) {
            return 0;
          }
          if (strcmp((const char *)(v11 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL)))
          {
            return 0;
          }
        }
      }
      else if (a5 != &unk_215ED3AB8)
      {
        return 0;
      }
      return (void *)a2[1];
    case 4:
      return result;
    default:
      char v9 = (void *)a2[1];
      int v10 = (std::__shared_weak_count *)v9[11];
      if (v10)
      {
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      operator delete(v9);
      dispatch_workloop_t result = 0;
      *a2 = 0;
      return result;
  }
}

void sub_215D1FE80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_215D1FEA8(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  dispatch_workloop_t result = &unk_26C6767C0;
  switch(v5)
  {
    case 1:
      uint64_t v12 = a2[1];
      size_t v13 = operator new(0x40uLL);
      sub_215D20B5C((uint64_t)v13, v12);
      dispatch_workloop_t result = 0;
      *a3 = sub_215D1FEA8;
      a3[1] = v13;
      return result;
    case 2:
      dispatch_workloop_t result = 0;
      uint64_t v14 = a2[1];
      *a3 = sub_215D1FEA8;
      a3[1] = v14;
      *a2 = 0;
      return result;
    case 3:
      if (a4)
      {
        unint64_t v11 = *(void *)(a4 + 8);
        if ((char *)v11 != "N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE")
        {
          if (((v11 & (unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v11, "N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE")) {
            return 0;
          }
          if (strcmp((const char *)(v11 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL)))
          {
            return 0;
          }
        }
      }
      else if (a5 != &unk_215ED3B90)
      {
        return 0;
      }
      return (void *)a2[1];
    case 4:
      return result;
    default:
      char v9 = (void *)a2[1];
      int v10 = (std::__shared_weak_count *)v9[7];
      if (v10)
      {
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      operator delete(v9);
      dispatch_workloop_t result = 0;
      *a2 = 0;
      return result;
  }
}

void sub_215D20054(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_215D2007C(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  dispatch_workloop_t result = &unk_26C676810;
  switch(v5)
  {
    case 1:
      uint64_t v12 = a2[1];
      size_t v13 = operator new(0x60uLL);
      sub_215D213EC((uint64_t)v13, v12);
      dispatch_workloop_t result = 0;
      *a3 = sub_215D2007C;
      a3[1] = v13;
      return result;
    case 2:
      dispatch_workloop_t result = 0;
      uint64_t v14 = a2[1];
      *a3 = sub_215D2007C;
      a3[1] = v14;
      *a2 = 0;
      return result;
    case 3:
      if (a4)
      {
        unint64_t v11 = *(void *)(a4 + 8);
        if ((char *)v11 != "N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE")
        {
          if (((v11 & (unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v11, "N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE")) {
            return 0;
          }
          if (strcmp((const char *)(v11 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL)))
          {
            return 0;
          }
        }
      }
      else if (a5 != &unk_215ED3C68)
      {
        return 0;
      }
      return (void *)a2[1];
    case 4:
      return result;
    default:
      char v9 = (void *)a2[1];
      int v10 = (std::__shared_weak_count *)v9[11];
      if (v10)
      {
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      operator delete(v9);
      dispatch_workloop_t result = 0;
      *a2 = 0;
      return result;
  }
}

void sub_215D20228(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215D20250(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  float v2 = *(float *)(a1 + 24);
  float v3 = *(float *)(a1 + 28);
  float v4 = *(float *)(a1 + 32);
  __int16 v5 = v2 == 0.0;
  if (v3 != 0.0) {
    __int16 v5 = 0;
  }
  *(void *)&long long v6 = *(void *)a1;
  float32x2_t v7 = *(float32x2_t *)(a1 + 8);
  if (v4 != 0.0) {
    __int16 v5 = 0;
  }
  uint64_t v8 = *(void *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 48);
  *(_DWORD *)(v9 + 92) = DWORD1(v6);
  __asm { FMOV            V5.2S, #1.0 }
  float32x2_t v15 = vdiv_f32(_D5, *(float32x2_t *)&v6);
  *(_DWORD *)(v9 + 76) = v6;
  *((float32x2_t *)&v6 + 1) = v7;
  *(_OWORD *)(v9 + 16) = v6;
  *(void *)(v9 + 32) = v1;
  *(float *)(v9 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v2;
  *(float *)(v9 + 44) = v3;
  *(float *)(v9 + 48) = v4;
  *(void *)(v9 + 52) = 0xA3727C5ACLL;
  *(float32x2_t *)(v9 + 6std::__fs::filesystem::__rename(__from, __to, 0) = v15;
  *(float32x2_t *)(v9 + 68) = vmul_f32(v15, vneg_f32(v7));
  *(void *)(v9 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(_DWORD *)(v9 + 88) = 0;
  *(_DWORD *)(v9 + 96) = 0;
  *(float32x2_t *)(v9 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v7;
  *(_DWORD *)(v9 + 108) = 1065353216;
  *(_WORD *)(v9 + 112) = v5 | ((v4 == 0.0) << 8);
  *(void *)(v9 + 12std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  return *(void *)(a1 + 48);
}

uint64_t sub_215D20300(uint64_t result)
{
  uint64_t v1 = result;
  float v2 = *(std::__shared_weak_count **)(result + 56);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_215D2037C(uint64_t a1)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  float v2 = (char *)operator new(0xF8uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)float v2 = &unk_26C6840A0;
  *(_OWORD *)(v2 + 56) = 0u;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0;
  *((void *)v2 + 4) = &unk_26C659B18;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *((void *)v2 + 13) = 0;
  *((void *)v2 + 14) = 0x3EE4F8B588E368F1;
  *((_DWORD *)v2 + 3std::__fs::filesystem::__rename(__from, __to, 0) = 10;
  int64x2_t v3 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)v2 + 8) = v3;
  *((int64x2_t *)v2 + 9) = v3;
  *((int64x2_t *)v2 + 1std::__fs::filesystem::__rename(__from, __to, 0) = v3;
  *((int64x2_t *)v2 + 11) = v3;
  *((int64x2_t *)v2 + 12) = v3;
  *((int64x2_t *)v2 + 13) = v3;
  *((void *)v2 + 28) = 0x7FF8000000000000;
  *((_WORD *)v2 + 116) = 257;
  *((void *)v2 + 3std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *((void *)v2 + 3) = &unk_26C659D18;
  *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v2 + 24;
  *(void *)(a1 + 88) = v2;
  return a1;
}

uint64_t sub_215D204B8(uint64_t a1)
{
  double v1 = *(double *)a1;
  double v2 = *(double *)(a1 + 8);
  double v3 = *(double *)(a1 + 16);
  double v4 = *(double *)(a1 + 24);
  long long v5 = *(_OWORD *)(a1 + 32);
  double v6 = *(double *)(a1 + 48);
  double v7 = *(double *)(a1 + 56);
  double v8 = *(double *)(a1 + 64);
  double v9 = 1.0 / *(double *)a1;
  __int16 v10 = v6 == 0.0;
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 80);
  *(void *)(v12 + 16) = *(void *)a1;
  *(double *)(v12 + 24) = v2;
  if (v7 != 0.0) {
    __int16 v10 = 0;
  }
  *(double *)(v12 + 32) = v3;
  *(double *)(v12 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v4;
  *(_OWORD *)(v12 + 48) = v5;
  *(double *)(v12 + 64) = v6;
  *(double *)(v12 + 72) = v7;
  *(double *)(v12 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  if (v8 != 0.0) {
    __int16 v10 = 0;
  }
  *(void *)(v12 + 88) = 0x3EE4F8B588E368F1;
  *(_DWORD *)(v12 + 96) = 10;
  *(double *)(v12 + 104) = v9;
  *(double *)(v12 + 112) = 1.0 / v2;
  *(double *)(v12 + 12std::__fs::filesystem::__rename(__from, __to, 0) = -(v3 * v9);
  *(double *)(v12 + 128) = -(v4 * (1.0 / v2));
  *(double *)(v12 + 136) = v1;
  *(void *)(v12 + 16std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(_OWORD *)(v12 + 144) = 0uLL;
  *(double *)(v12 + 168) = v2;
  *(void *)(v12 + 176) = 0;
  *(double *)(v12 + 184) = v3;
  *(double *)(v12 + 192) = v4;
  *(void *)(v12 + 20std::__fs::filesystem::__rename(__from, __to, 0) = 0x3FF0000000000000;
  *(_WORD *)(v12 + 208) = v10 | ((v8 == 0.0) << 8);
  *(void *)(v12 + 216) = v11;
  return *(void *)(a1 + 80);
}

uint64_t sub_215D205D0(uint64_t result)
{
  uint64_t v1 = result;
  double v2 = *(std::__shared_weak_count **)(result + 88);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_215D2064C(uint64_t a1)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  double v2 = (char *)operator new(0xF8uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)double v2 = &unk_26C6840F0;
  *(_OWORD *)(v2 + 56) = 0u;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0;
  *((void *)v2 + 4) = &unk_26C659B18;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *((void *)v2 + 13) = 0;
  *((void *)v2 + 14) = 0x3EE4F8B588E368F1;
  *((_DWORD *)v2 + 3std::__fs::filesystem::__rename(__from, __to, 0) = 10;
  int64x2_t v3 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)v2 + 8) = v3;
  *((int64x2_t *)v2 + 9) = v3;
  *((int64x2_t *)v2 + 1std::__fs::filesystem::__rename(__from, __to, 0) = v3;
  *((int64x2_t *)v2 + 11) = v3;
  *((int64x2_t *)v2 + 12) = v3;
  *((int64x2_t *)v2 + 13) = v3;
  *((void *)v2 + 28) = 0x7FF8000000000000;
  *((_WORD *)v2 + 116) = 257;
  *((void *)v2 + 3std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *((void *)v2 + 3) = &unk_26C659B78;
  *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v2 + 24;
  *(void *)(a1 + 88) = v2;
  return a1;
}

uint64_t sub_215D20788(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 36) = *(void *)(a2 + 120);
  long long v5 = (char *)operator new(0x98uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)long long v5 = &unk_26C684140;
  uint64_t v6 = *(void *)(a2 + 52);
  __int16 v7 = *(_WORD *)(a2 + 112);
  uint64_t v8 = *(void *)(a2 + 120);
  *((void *)v5 + 4) = &unk_26C659E78;
  long long v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 4std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 56) = v9;
  *((_DWORD *)v5 + 18) = *(_DWORD *)(a2 + 48);
  *(void *)(v5 + 76) = v6;
  *(_OWORD *)(v5 + 84) = *(_OWORD *)(a2 + 60);
  long long v10 = *(_OWORD *)(a2 + 76);
  long long v11 = *(_OWORD *)(a2 + 92);
  *((_DWORD *)v5 + 33) = *(_DWORD *)(a2 + 108);
  *(_OWORD *)(v5 + 116) = v11;
  *(_OWORD *)(v5 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v10;
  *((_WORD *)v5 + 68) = v7;
  *((void *)v5 + 18) = v8;
  *((void *)v5 + 3) = &unk_26C659FA8;
  *(void *)(a1 + 48) = v5 + 24;
  *(void *)(a1 + 56) = v5;
  return a1;
}

uint64_t sub_215D20890(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  float v4 = *(float *)(a2 + 24);
  float v5 = *(float *)(a2 + 28);
  float v6 = *(float *)(a2 + 32);
  __int16 v7 = v4 == 0.0;
  if (v5 != 0.0) {
    __int16 v7 = 0;
  }
  if (v6 != 0.0) {
    __int16 v7 = 0;
  }
  uint64_t v8 = *(void *)(a2 + 36);
  uint64_t v9 = *(void *)(a2 + 48);
  float32x2_t v10 = *(float32x2_t *)a2;
  float32x2_t v11 = *(float32x2_t *)(a2 + 8);
  __asm { FMOV            V5.2S, #1.0 }
  float32x2_t v17 = vdiv_f32(_D5, *(float32x2_t *)a2);
  int32x2_t v18 = vzip1_s32(*(int32x2_t *)a2, (int32x2_t)v11);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  *(int8x16_t *)(v9 + 16) = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32(*(int32x2_t *)a2, (int32x2_t)v11), 0x20uLL), v19);
  *(void *)(v9 + 32) = v3;
  *(float *)(v9 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v4;
  *(float *)(v9 + 44) = v5;
  *(float *)(v9 + 48) = v6;
  *(void *)(v9 + 52) = 0xA3727C5ACLL;
  *(float32x2_t *)(v9 + 6std::__fs::filesystem::__rename(__from, __to, 0) = v17;
  *(float32x2_t *)(v9 + 68) = vmul_f32(v17, vneg_f32(v11));
  *(_DWORD *)(v9 + 76) = v10.i32[0];
  *(void *)(v9 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(_DWORD *)(v9 + 92) = v10.i32[1];
  *(_DWORD *)(v9 + 88) = 0;
  *(_DWORD *)(v9 + 96) = 0;
  *(float32x2_t *)(v9 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(_DWORD *)(v9 + 108) = 1065353216;
  *(_WORD *)(v9 + 112) = v7 | ((v6 == 0.0) << 8);
  *(void *)(v9 + 12std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  uint64_t v20 = *(void *)(a2 + 48);
  *(void *)a1 = *(void *)(v20 + 16);
  *(void *)(a1 + 8) = *(void *)(v20 + 24);
  long long v21 = *(_OWORD *)(v20 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v20 + 48);
  *(_OWORD *)(a1 + 16) = v21;
  *(void *)(a1 + 36) = *(void *)(v20 + 120);
  std::string v22 = (char *)operator new(0x98uLL);
  *((void *)v22 + 1) = 0;
  *((void *)v22 + 2) = 0;
  *(void *)std::string v22 = &unk_26C684140;
  uint64_t v23 = *(void *)(v20 + 52);
  __int16 v24 = *(_WORD *)(v20 + 112);
  uint64_t v25 = *(void *)(v20 + 120);
  long long v26 = *(_OWORD *)(v20 + 16);
  *((void *)v22 + 4) = &unk_26C659E78;
  *(_OWORD *)(v22 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v26;
  int v27 = *(_DWORD *)(v20 + 48);
  *(_OWORD *)(v22 + 56) = *(_OWORD *)(v20 + 32);
  *((_DWORD *)v22 + 18) = v27;
  *(void *)(v22 + 76) = v23;
  *(_OWORD *)(v22 + 84) = *(_OWORD *)(v20 + 60);
  long long v28 = *(_OWORD *)(v20 + 92);
  LODWORD(v23) = *(_DWORD *)(v20 + 108);
  *(_OWORD *)(v22 + 10std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v20 + 76);
  *((_DWORD *)v22 + 33) = v23;
  *(_OWORD *)(v22 + 116) = v28;
  *((_WORD *)v22 + 68) = v24;
  *((void *)v22 + 18) = v25;
  *((void *)v22 + 3) = &unk_26C659FA8;
  *(void *)(a1 + 48) = v22 + 24;
  *(void *)(a1 + 56) = v22;
  return a1;
}

uint64_t sub_215D20A54(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 36) = *(void *)(a2 + 120);
  float v5 = (char *)operator new(0x98uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)float v5 = &unk_26C684190;
  uint64_t v6 = *(void *)(a2 + 52);
  __int16 v7 = *(_WORD *)(a2 + 112);
  uint64_t v8 = *(void *)(a2 + 120);
  *((void *)v5 + 4) = &unk_26C659E78;
  long long v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 4std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 56) = v9;
  *((_DWORD *)v5 + 18) = *(_DWORD *)(a2 + 48);
  *(void *)(v5 + 76) = v6;
  *(_OWORD *)(v5 + 84) = *(_OWORD *)(a2 + 60);
  long long v10 = *(_OWORD *)(a2 + 76);
  long long v11 = *(_OWORD *)(a2 + 92);
  *((_DWORD *)v5 + 33) = *(_DWORD *)(a2 + 108);
  *(_OWORD *)(v5 + 116) = v11;
  *(_OWORD *)(v5 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v10;
  *((_WORD *)v5 + 68) = v7;
  *((void *)v5 + 18) = v8;
  *((void *)v5 + 3) = &unk_26C659ED8;
  *(void *)(a1 + 48) = v5 + 24;
  *(void *)(a1 + 56) = v5;
  return a1;
}

uint64_t sub_215D20B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  float v4 = *(float *)(a2 + 24);
  float v5 = *(float *)(a2 + 28);
  float v6 = *(float *)(a2 + 32);
  __int16 v7 = v4 == 0.0;
  if (v5 != 0.0) {
    __int16 v7 = 0;
  }
  if (v6 != 0.0) {
    __int16 v7 = 0;
  }
  uint64_t v8 = *(void *)(a2 + 36);
  uint64_t v9 = *(void *)(a2 + 48);
  float32x2_t v10 = *(float32x2_t *)a2;
  float32x2_t v11 = *(float32x2_t *)(a2 + 8);
  __asm { FMOV            V5.2S, #1.0 }
  float32x2_t v17 = vdiv_f32(_D5, *(float32x2_t *)a2);
  int32x2_t v18 = vzip1_s32(*(int32x2_t *)a2, (int32x2_t)v11);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  *(int8x16_t *)(v9 + 16) = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32(*(int32x2_t *)a2, (int32x2_t)v11), 0x20uLL), v19);
  *(void *)(v9 + 32) = v3;
  *(float *)(v9 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v4;
  *(float *)(v9 + 44) = v5;
  *(float *)(v9 + 48) = v6;
  *(void *)(v9 + 52) = 0xA3727C5ACLL;
  *(float32x2_t *)(v9 + 6std::__fs::filesystem::__rename(__from, __to, 0) = v17;
  *(float32x2_t *)(v9 + 68) = vmul_f32(v17, vneg_f32(v11));
  *(_DWORD *)(v9 + 76) = v10.i32[0];
  *(void *)(v9 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(_DWORD *)(v9 + 92) = v10.i32[1];
  *(_DWORD *)(v9 + 88) = 0;
  *(_DWORD *)(v9 + 96) = 0;
  *(float32x2_t *)(v9 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(_DWORD *)(v9 + 108) = 1065353216;
  *(_WORD *)(v9 + 112) = v7 | ((v6 == 0.0) << 8);
  *(void *)(v9 + 12std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  uint64_t v20 = *(void *)(a2 + 48);
  *(void *)a1 = *(void *)(v20 + 16);
  *(void *)(a1 + 8) = *(void *)(v20 + 24);
  long long v21 = *(_OWORD *)(v20 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v20 + 48);
  *(_OWORD *)(a1 + 16) = v21;
  *(void *)(a1 + 36) = *(void *)(v20 + 120);
  std::string v22 = (char *)operator new(0x98uLL);
  *((void *)v22 + 1) = 0;
  *((void *)v22 + 2) = 0;
  *(void *)std::string v22 = &unk_26C684190;
  uint64_t v23 = *(void *)(v20 + 52);
  __int16 v24 = *(_WORD *)(v20 + 112);
  uint64_t v25 = *(void *)(v20 + 120);
  long long v26 = *(_OWORD *)(v20 + 16);
  *((void *)v22 + 4) = &unk_26C659E78;
  *(_OWORD *)(v22 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v26;
  int v27 = *(_DWORD *)(v20 + 48);
  *(_OWORD *)(v22 + 56) = *(_OWORD *)(v20 + 32);
  *((_DWORD *)v22 + 18) = v27;
  *(void *)(v22 + 76) = v23;
  *(_OWORD *)(v22 + 84) = *(_OWORD *)(v20 + 60);
  long long v28 = *(_OWORD *)(v20 + 92);
  LODWORD(v23) = *(_DWORD *)(v20 + 108);
  *(_OWORD *)(v22 + 10std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v20 + 76);
  *((_DWORD *)v22 + 33) = v23;
  *(_OWORD *)(v22 + 116) = v28;
  *((_WORD *)v22 + 68) = v24;
  *((void *)v22 + 18) = v25;
  *((void *)v22 + 3) = &unk_26C659ED8;
  *(void *)(a1 + 48) = v22 + 24;
  *(void *)(a1 + 56) = v22;
  return a1;
}

uint64_t sub_215D20D20(uint64_t a1)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  double v2 = (char *)operator new(0xF8uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)double v2 = &unk_26C6841E0;
  *(_OWORD *)(v2 + 56) = 0u;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0;
  *((void *)v2 + 4) = &unk_26C659B18;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *((void *)v2 + 13) = 0;
  *((void *)v2 + 14) = 0x3EE4F8B588E368F1;
  *((_DWORD *)v2 + 3std::__fs::filesystem::__rename(__from, __to, 0) = 10;
  int64x2_t v3 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)v2 + 8) = v3;
  *((int64x2_t *)v2 + 9) = v3;
  *((int64x2_t *)v2 + 1std::__fs::filesystem::__rename(__from, __to, 0) = v3;
  *((int64x2_t *)v2 + 11) = v3;
  *((int64x2_t *)v2 + 12) = v3;
  *((int64x2_t *)v2 + 13) = v3;
  *((void *)v2 + 28) = 0x7FF8000000000000;
  *((_WORD *)v2 + 116) = 257;
  *((void *)v2 + 3std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *((void *)v2 + 3) = &unk_26C659D18;
  *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v2 + 24;
  *(void *)(a1 + 88) = v2;
  return a1;
}

uint64_t sub_215D20E5C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 216);
  float v6 = (char *)operator new(0xF8uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)float v6 = &unk_26C6841E0;
  __int16 v7 = *(_WORD *)(a2 + 208);
  uint64_t v8 = *(void *)(a2 + 216);
  *((void *)v6 + 4) = &unk_26C659B18;
  long long v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 4std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 56) = v9;
  long long v10 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 72) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 88) = v10;
  *((_DWORD *)v6 + 3std::__fs::filesystem::__rename(__from, __to, 0) = *(_DWORD *)(a2 + 96);
  uint64_t v11 = *(void *)(a2 + 88);
  *((void *)v6 + 13) = *(void *)(a2 + 80);
  *((void *)v6 + 14) = v11;
  long long v12 = *(_OWORD *)(a2 + 120);
  *((_OWORD *)v6 + 8) = *(_OWORD *)(a2 + 104);
  *((_OWORD *)v6 + 9) = v12;
  long long v13 = *(_OWORD *)(a2 + 152);
  long long v14 = *(_OWORD *)(a2 + 184);
  *((_OWORD *)v6 + 12) = *(_OWORD *)(a2 + 168);
  *((_OWORD *)v6 + 13) = v14;
  *((void *)v6 + 28) = *(void *)(a2 + 200);
  *((_OWORD *)v6 + 1std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(a2 + 136);
  *((_OWORD *)v6 + 11) = v13;
  *((_WORD *)v6 + 116) = v7;
  *((void *)v6 + 3std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *((void *)v6 + 3) = &unk_26C659D18;
  *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v6 + 24;
  *(void *)(a1 + 88) = v6;
  return a1;
}

uint64_t sub_215D20F7C(uint64_t a1, uint64_t a2)
{
  double v3 = *(double *)a2;
  double v4 = *(double *)(a2 + 8);
  double v5 = *(double *)(a2 + 16);
  double v6 = *(double *)(a2 + 24);
  long long v7 = *(_OWORD *)(a2 + 32);
  double v8 = *(double *)(a2 + 48);
  double v9 = *(double *)(a2 + 56);
  double v10 = *(double *)(a2 + 64);
  __int16 v11 = v8 == 0.0;
  if (v9 != 0.0) {
    __int16 v11 = 0;
  }
  if (v10 != 0.0) {
    __int16 v11 = 0;
  }
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a2 + 80);
  *(double *)(v13 + 16) = v3;
  *(double *)(v13 + 24) = v4;
  *(double *)(v13 + 32) = v5;
  *(double *)(v13 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v6;
  *(_OWORD *)(v13 + 48) = v7;
  *(double *)(v13 + 64) = v8;
  *(double *)(v13 + 72) = v9;
  *(double *)(v13 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v10;
  *(void *)(v13 + 88) = 0x3EE4F8B588E368F1;
  *(_DWORD *)(v13 + 96) = 10;
  *(double *)(v13 + 104) = 1.0 / v3;
  *(double *)(v13 + 112) = 1.0 / v4;
  *(double *)(v13 + 12std::__fs::filesystem::__rename(__from, __to, 0) = -(v5 * (1.0 / v3));
  *(double *)(v13 + 128) = -(v6 * (1.0 / v4));
  *(double *)(v13 + 136) = v3;
  *(void *)(v13 + 152) = 0;
  *(void *)(v13 + 16std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(v13 + 144) = 0;
  *(double *)(v13 + 168) = v4;
  *(void *)(v13 + 176) = 0;
  *(double *)(v13 + 184) = v5;
  *(double *)(v13 + 192) = v6;
  *(void *)(v13 + 20std::__fs::filesystem::__rename(__from, __to, 0) = 0x3FF0000000000000;
  *(_WORD *)(v13 + 208) = v11 | ((v10 == 0.0) << 8);
  *(void *)(v13 + 216) = v12;
  uint64_t v14 = *(void *)(a2 + 80);
  *(_OWORD *)a1 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v14 + 32);
  long long v15 = *(_OWORD *)(v14 + 48);
  long long v16 = *(_OWORD *)(v14 + 64);
  *(void *)(a1 + 64) = *(void *)(v14 + 80);
  *(_OWORD *)(a1 + 32) = v15;
  *(_OWORD *)(a1 + 48) = v16;
  *(void *)(a1 + 72) = *(void *)(v14 + 216);
  float32x2_t v17 = (char *)operator new(0xF8uLL);
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = 0;
  *(void *)float32x2_t v17 = &unk_26C6841E0;
  __int16 v18 = *(_WORD *)(v14 + 208);
  uint64_t v19 = *(void *)(v14 + 216);
  *((void *)v17 + 4) = &unk_26C659B18;
  *(_OWORD *)(v17 + 4std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v14 + 16);
  *(_OWORD *)(v17 + 56) = *(_OWORD *)(v14 + 32);
  uint64_t v20 = *(void *)(v14 + 80);
  long long v21 = *(_OWORD *)(v14 + 64);
  *(_OWORD *)(v17 + 72) = *(_OWORD *)(v14 + 48);
  *((void *)v17 + 13) = v20;
  *(_OWORD *)(v17 + 88) = v21;
  uint64_t v22 = *(void *)(v14 + 88);
  *((_DWORD *)v17 + 3std::__fs::filesystem::__rename(__from, __to, 0) = *(_DWORD *)(v14 + 96);
  *((void *)v17 + 14) = v22;
  long long v23 = *(_OWORD *)(v14 + 120);
  *((_OWORD *)v17 + 8) = *(_OWORD *)(v14 + 104);
  *((_OWORD *)v17 + 9) = v23;
  *((_OWORD *)v17 + 1std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v14 + 136);
  long long v24 = *(_OWORD *)(v14 + 152);
  long long v25 = *(_OWORD *)(v14 + 168);
  long long v26 = *(_OWORD *)(v14 + 184);
  *((void *)v17 + 28) = *(void *)(v14 + 200);
  *((_OWORD *)v17 + 12) = v25;
  *((_OWORD *)v17 + 13) = v26;
  *((_OWORD *)v17 + 11) = v24;
  *((_WORD *)v17 + 116) = v18;
  *((void *)v17 + 3std::__fs::filesystem::__rename(__from, __to, 0) = v19;
  *((void *)v17 + 3) = &unk_26C659D18;
  *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v17 + 24;
  *(void *)(a1 + 88) = v17;
  return a1;
}

uint64_t sub_215D21190(uint64_t a1)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  double v2 = (char *)operator new(0xF8uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)double v2 = &unk_26C684230;
  *(_OWORD *)(v2 + 56) = 0u;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0;
  *((void *)v2 + 4) = &unk_26C659B18;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *((void *)v2 + 13) = 0;
  *((void *)v2 + 14) = 0x3EE4F8B588E368F1;
  *((_DWORD *)v2 + 3std::__fs::filesystem::__rename(__from, __to, 0) = 10;
  int64x2_t v3 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)v2 + 8) = v3;
  *((int64x2_t *)v2 + 9) = v3;
  *((int64x2_t *)v2 + 1std::__fs::filesystem::__rename(__from, __to, 0) = v3;
  *((int64x2_t *)v2 + 11) = v3;
  *((int64x2_t *)v2 + 12) = v3;
  *((int64x2_t *)v2 + 13) = v3;
  *((void *)v2 + 28) = 0x7FF8000000000000;
  *((_WORD *)v2 + 116) = 257;
  *((void *)v2 + 3std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *((void *)v2 + 3) = &unk_26C659B78;
  *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v2 + 24;
  *(void *)(a1 + 88) = v2;
  return a1;
}

uint64_t sub_215D212CC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 216);
  double v6 = (char *)operator new(0xF8uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)double v6 = &unk_26C684230;
  __int16 v7 = *(_WORD *)(a2 + 208);
  uint64_t v8 = *(void *)(a2 + 216);
  *((void *)v6 + 4) = &unk_26C659B18;
  long long v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 4std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 56) = v9;
  long long v10 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 72) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 88) = v10;
  *((_DWORD *)v6 + 3std::__fs::filesystem::__rename(__from, __to, 0) = *(_DWORD *)(a2 + 96);
  uint64_t v11 = *(void *)(a2 + 88);
  *((void *)v6 + 13) = *(void *)(a2 + 80);
  *((void *)v6 + 14) = v11;
  long long v12 = *(_OWORD *)(a2 + 120);
  *((_OWORD *)v6 + 8) = *(_OWORD *)(a2 + 104);
  *((_OWORD *)v6 + 9) = v12;
  long long v13 = *(_OWORD *)(a2 + 152);
  long long v14 = *(_OWORD *)(a2 + 184);
  *((_OWORD *)v6 + 12) = *(_OWORD *)(a2 + 168);
  *((_OWORD *)v6 + 13) = v14;
  *((void *)v6 + 28) = *(void *)(a2 + 200);
  *((_OWORD *)v6 + 1std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(a2 + 136);
  *((_OWORD *)v6 + 11) = v13;
  *((_WORD *)v6 + 116) = v7;
  *((void *)v6 + 3std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *((void *)v6 + 3) = &unk_26C659B78;
  *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v6 + 24;
  *(void *)(a1 + 88) = v6;
  return a1;
}

uint64_t sub_215D213EC(uint64_t a1, uint64_t a2)
{
  double v3 = *(double *)a2;
  double v4 = *(double *)(a2 + 8);
  double v5 = *(double *)(a2 + 16);
  double v6 = *(double *)(a2 + 24);
  long long v7 = *(_OWORD *)(a2 + 32);
  double v8 = *(double *)(a2 + 48);
  double v9 = *(double *)(a2 + 56);
  double v10 = *(double *)(a2 + 64);
  __int16 v11 = v8 == 0.0;
  if (v9 != 0.0) {
    __int16 v11 = 0;
  }
  if (v10 != 0.0) {
    __int16 v11 = 0;
  }
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a2 + 80);
  *(double *)(v13 + 16) = v3;
  *(double *)(v13 + 24) = v4;
  *(double *)(v13 + 32) = v5;
  *(double *)(v13 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v6;
  *(_OWORD *)(v13 + 48) = v7;
  *(double *)(v13 + 64) = v8;
  *(double *)(v13 + 72) = v9;
  *(double *)(v13 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v10;
  *(void *)(v13 + 88) = 0x3EE4F8B588E368F1;
  *(_DWORD *)(v13 + 96) = 10;
  *(double *)(v13 + 104) = 1.0 / v3;
  *(double *)(v13 + 112) = 1.0 / v4;
  *(double *)(v13 + 12std::__fs::filesystem::__rename(__from, __to, 0) = -(v5 * (1.0 / v3));
  *(double *)(v13 + 128) = -(v6 * (1.0 / v4));
  *(double *)(v13 + 136) = v3;
  *(void *)(v13 + 152) = 0;
  *(void *)(v13 + 16std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(v13 + 144) = 0;
  *(double *)(v13 + 168) = v4;
  *(void *)(v13 + 176) = 0;
  *(double *)(v13 + 184) = v5;
  *(double *)(v13 + 192) = v6;
  *(void *)(v13 + 20std::__fs::filesystem::__rename(__from, __to, 0) = 0x3FF0000000000000;
  *(_WORD *)(v13 + 208) = v11 | ((v10 == 0.0) << 8);
  *(void *)(v13 + 216) = v12;
  uint64_t v14 = *(void *)(a2 + 80);
  *(_OWORD *)a1 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v14 + 32);
  long long v15 = *(_OWORD *)(v14 + 48);
  long long v16 = *(_OWORD *)(v14 + 64);
  *(void *)(a1 + 64) = *(void *)(v14 + 80);
  *(_OWORD *)(a1 + 32) = v15;
  *(_OWORD *)(a1 + 48) = v16;
  *(void *)(a1 + 72) = *(void *)(v14 + 216);
  float32x2_t v17 = (char *)operator new(0xF8uLL);
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = 0;
  *(void *)float32x2_t v17 = &unk_26C684230;
  __int16 v18 = *(_WORD *)(v14 + 208);
  uint64_t v19 = *(void *)(v14 + 216);
  *((void *)v17 + 4) = &unk_26C659B18;
  *(_OWORD *)(v17 + 4std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v14 + 16);
  *(_OWORD *)(v17 + 56) = *(_OWORD *)(v14 + 32);
  uint64_t v20 = *(void *)(v14 + 80);
  long long v21 = *(_OWORD *)(v14 + 64);
  *(_OWORD *)(v17 + 72) = *(_OWORD *)(v14 + 48);
  *((void *)v17 + 13) = v20;
  *(_OWORD *)(v17 + 88) = v21;
  uint64_t v22 = *(void *)(v14 + 88);
  *((_DWORD *)v17 + 3std::__fs::filesystem::__rename(__from, __to, 0) = *(_DWORD *)(v14 + 96);
  *((void *)v17 + 14) = v22;
  long long v23 = *(_OWORD *)(v14 + 120);
  *((_OWORD *)v17 + 8) = *(_OWORD *)(v14 + 104);
  *((_OWORD *)v17 + 9) = v23;
  *((_OWORD *)v17 + 1std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v14 + 136);
  long long v24 = *(_OWORD *)(v14 + 152);
  long long v25 = *(_OWORD *)(v14 + 168);
  long long v26 = *(_OWORD *)(v14 + 184);
  *((void *)v17 + 28) = *(void *)(v14 + 200);
  *((_OWORD *)v17 + 12) = v25;
  *((_OWORD *)v17 + 13) = v26;
  *((_OWORD *)v17 + 11) = v24;
  *((_WORD *)v17 + 116) = v18;
  *((void *)v17 + 3std::__fs::filesystem::__rename(__from, __to, 0) = v19;
  *((void *)v17 + 3) = &unk_26C659B78;
  *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v17 + 24;
  *(void *)(a1 + 88) = v17;
  return a1;
}

void *sub_215D21600(void *a1, uint64_t a2)
{
  sub_215731D94(a1, (uint64_t)"{Model: ", 8);
  sub_215731D94(a1, (uint64_t)"{fx,fy: ", 8);
  uint64_t v8 = *(void *)(a2 + 16);
  sub_215D11198(a1, (float *)&v8);
  sub_215731D94(a1, (uint64_t)", cx,cy: ", 9);
  uint64_t v7 = *(void *)(a2 + 24);
  sub_215D11198(a1, (float *)&v7);
  sub_215731D94(a1, (uint64_t)", k1,k2,p1,p2,k3: ", 18);
  long long v5 = *(_OWORD *)(a2 + 32);
  int v6 = *(_DWORD *)(a2 + 48);
  sub_215D21D00(a1, (float *)&v5);
  sub_215731D94(a1, (uint64_t)"}", 1);
  sub_215731D94(a1, (uint64_t)", Size: ", 8);
  sub_2158D6F30(a1, (unsigned int *)(a2 + 120));
  sub_215731D94(a1, (uint64_t)"}", 1);
  return a1;
}

void *sub_215D21710(void *a1, uint64_t a2)
{
  sub_215731D94(a1, (uint64_t)"{Model: ", 8);
  sub_215731D94(a1, (uint64_t)"{fx,fy: ", 8);
  long long v9 = *(_OWORD *)(a2 + 16);
  sub_215D112C8(a1, (double *)&v9);
  sub_215731D94(a1, (uint64_t)", cx,cy: ", 9);
  long long v8 = *(_OWORD *)(a2 + 32);
  sub_215D112C8(a1, (double *)&v8);
  sub_215731D94(a1, (uint64_t)", k1,k2,p1,p2,k3: ", 18);
  long long v4 = *(_OWORD *)(a2 + 64);
  v6[0] = *(_OWORD *)(a2 + 48);
  v6[1] = v4;
  uint64_t v7 = *(void *)(a2 + 80);
  sub_215D2200C(a1, (double *)v6);
  sub_215731D94(a1, (uint64_t)"}", 1);
  sub_215731D94(a1, (uint64_t)", Size: ", 8);
  sub_2158D6F30(a1, (unsigned int *)(a2 + 216));
  sub_215731D94(a1, (uint64_t)"}", 1);
  return a1;
}

void sub_215D21820(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684000;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D21840(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684000;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D21894(uint64_t result)
{
  *(void *)(result + 24) = &unk_26C659FE8;
  return result;
}

void sub_215D218BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684050;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D218DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684050;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D21930(uint64_t result)
{
  *(void *)(result + 24) = &unk_26C659F18;
  return result;
}

void sub_215D21958(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6840A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D21978(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6840A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D219CC(uint64_t result)
{
  *(void *)(result + 24) = &unk_26C659D58;
  return result;
}

void sub_215D219F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6840F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D21A14(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6840F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D21A68(uint64_t result)
{
  *(void *)(result + 24) = &unk_26C659BB8;
  return result;
}

void sub_215D21A90(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684140;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D21AB0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684140;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D21B04(uint64_t result)
{
  *(void *)(result + 24) = &unk_26C659FE8;
  return result;
}

void sub_215D21B2C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684190;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D21B4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684190;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D21BA0(uint64_t result)
{
  *(void *)(result + 24) = &unk_26C659F18;
  return result;
}

void sub_215D21BC8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6841E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D21BE8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6841E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D21C3C(uint64_t result)
{
  *(void *)(result + 24) = &unk_26C659D58;
  return result;
}

void sub_215D21C64(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684230;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D21C84(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684230;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D21CD8(uint64_t result)
{
  *(void *)(result + 24) = &unk_26C659BB8;
  return result;
}

void *sub_215D21D00(void *a1, float *a2)
{
  int v10 = 0;
  sub_215D21E30((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1) {
    sub_215742D4C();
  }
  uint64_t v12 = &v11;
  ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C6842A0[v10])(__p, &v12, v9);
  if (v10 != -1) {
    ((void (*)(char **, unsigned char *))off_26C684270[v10])(&v12, v9);
  }
  if ((v8 & 0x80u) == 0) {
    double v3 = __p;
  }
  else {
    double v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  dispatch_workloop_t result = sub_215731D94(a1, (uint64_t)v3, v4);
  int v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_215D21DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D21E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D21E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215D21E30(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v12 = a2;
  uint64_t v13 = "{";
  uint64_t v14 = a2;
  long long v15 = "{";
  long long v16 = "{";
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 == -1) {
    goto LABEL_8;
  }
  float32x2_t v17 = &v12;
  ((void (*)(uint64_t **))off_26C684288[v3])(&v17);
  sub_2157D208C((uint64_t)&v12, a2, a3);
  uint64_t v12 = a2;
  uint64_t v13 = ",";
  uint64_t v14 = a2;
  long long v15 = ",";
  long long v16 = ",";
  uint64_t v6 = *(unsigned int *)(a2 + 24);
  if (v6 == -1) {
    goto LABEL_8;
  }
  float32x2_t v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_26C684288[v6])(&v17, a2);
  sub_2157D208C((uint64_t)&v12, a2, a3 + 1);
  uint64_t v12 = a2;
  uint64_t v13 = ",";
  uint64_t v14 = a2;
  long long v15 = ",";
  long long v16 = ",";
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  if (v7 == -1) {
    goto LABEL_8;
  }
  float32x2_t v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_26C684288[v7])(&v17, a2);
  sub_2157D208C((uint64_t)&v12, a2, a3 + 2);
  uint64_t v12 = a2;
  uint64_t v13 = ",";
  uint64_t v14 = a2;
  long long v15 = ",";
  long long v16 = ",";
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if (v8 == -1) {
    goto LABEL_8;
  }
  float32x2_t v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_26C684288[v8])(&v17, a2);
  sub_2157D208C((uint64_t)&v12, a2, a3 + 3);
  uint64_t v12 = a2;
  uint64_t v13 = ",";
  uint64_t v14 = a2;
  long long v15 = ",";
  long long v16 = ",";
  uint64_t v9 = *(unsigned int *)(a2 + 24);
  if (v9 == -1) {
    goto LABEL_8;
  }
  float32x2_t v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_26C684288[v9])(&v17, a2);
  sub_2157D208C((uint64_t)&v12, a2, a3 + 4);
  uint64_t v12 = a2;
  uint64_t v13 = "}";
  uint64_t v14 = a2;
  long long v15 = "}";
  long long v16 = "}";
  uint64_t v10 = *(unsigned int *)(a2 + 24);
  if (v10 == -1) {
LABEL_8:
  }
    sub_215742D4C();
  float32x2_t v17 = &v12;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C684288[v10])(&v17, a2);
}

void *sub_215D2200C(void *a1, double *a2)
{
  int v10 = 0;
  sub_215D2213C((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1) {
    sub_215742D4C();
  }
  uint64_t v12 = &v11;
  ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C6842A0[v10])(__p, &v12, v9);
  if (v10 != -1) {
    ((void (*)(char **, unsigned char *))off_26C684270[v10])(&v12, v9);
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  dispatch_workloop_t result = sub_215731D94(a1, (uint64_t)v3, v4);
  uint64_t v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_215D220F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D22114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D22128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215D2213C(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v12 = a2;
  uint64_t v13 = "{";
  uint64_t v14 = a2;
  long long v15 = "{";
  long long v16 = "{";
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 == -1) {
    goto LABEL_8;
  }
  float32x2_t v17 = &v12;
  ((void (*)(uint64_t **))off_26C684288[v3])(&v17);
  sub_2157CFFD4((uint64_t)&v12, a2, a3);
  uint64_t v12 = a2;
  uint64_t v13 = ",";
  uint64_t v14 = a2;
  long long v15 = ",";
  long long v16 = ",";
  uint64_t v6 = *(unsigned int *)(a2 + 24);
  if (v6 == -1) {
    goto LABEL_8;
  }
  float32x2_t v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_26C684288[v6])(&v17, a2);
  sub_2157CFFD4((uint64_t)&v12, a2, a3 + 1);
  uint64_t v12 = a2;
  uint64_t v13 = ",";
  uint64_t v14 = a2;
  long long v15 = ",";
  long long v16 = ",";
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  if (v7 == -1) {
    goto LABEL_8;
  }
  float32x2_t v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_26C684288[v7])(&v17, a2);
  sub_2157CFFD4((uint64_t)&v12, a2, a3 + 2);
  uint64_t v12 = a2;
  uint64_t v13 = ",";
  uint64_t v14 = a2;
  long long v15 = ",";
  long long v16 = ",";
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if (v8 == -1) {
    goto LABEL_8;
  }
  float32x2_t v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_26C684288[v8])(&v17, a2);
  sub_2157CFFD4((uint64_t)&v12, a2, a3 + 3);
  uint64_t v12 = a2;
  uint64_t v13 = ",";
  uint64_t v14 = a2;
  long long v15 = ",";
  long long v16 = ",";
  uint64_t v9 = *(unsigned int *)(a2 + 24);
  if (v9 == -1) {
    goto LABEL_8;
  }
  float32x2_t v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_26C684288[v9])(&v17, a2);
  sub_2157CFFD4((uint64_t)&v12, a2, a3 + 4);
  uint64_t v12 = a2;
  uint64_t v13 = "}";
  uint64_t v14 = a2;
  long long v15 = "}";
  long long v16 = "}";
  uint64_t v10 = *(unsigned int *)(a2 + 24);
  if (v10 == -1) {
LABEL_8:
  }
    sub_215742D4C();
  float32x2_t v17 = &v12;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C684288[v10])(&v17, a2);
}

uint64_t sub_215D22318(float32x2_t *a1)
{
  *(float32x2_t *)&long long v1 = *a1;
  float32x2_t v2 = a1[1];
  __asm { FMOV            V2.2S, #1.0 }
  float32x2_t v8 = vdiv_f32(_D2, *a1);
  float32x2_t v9 = a1[2];
  float32x2_t v10 = a1[3];
  *(_DWORD *)(*(void *)&v10 + 48) = *a1;
  *(_DWORD *)(*(void *)&v10 + 64) = DWORD1(v1);
  *((float32x2_t *)&v1 + 1) = v2;
  *(_OWORD *)(*(void *)&v10 + 16) = v1;
  *(float32x2_t *)(*(void *)&v10 + 32) = v8;
  *(float32x2_t *)(*(void *)&v10 + 4std::__fs::filesystem::__rename(__from, __to, 0) = vmul_f32(v8, vneg_f32(v2));
  *(void *)(*(void *)&v10 + 56) = 0;
  *(_DWORD *)(*(void *)&v10 + 52) = 0;
  *(_DWORD *)(*(void *)&v10 + 68) = 0;
  *(float32x2_t *)(*(void *)&v10 + 72) = v2;
  *(_DWORD *)(*(void *)&v10 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 1065353216;
  *(float32x2_t *)(*(void *)&v10 + 88) = v9;
  return (uint64_t)a1[3];
}

uint64_t sub_215D22374(uint64_t result)
{
  uint64_t v1 = result;
  float32x2_t v2 = *(std::__shared_weak_count **)(result + 48);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void *sub_215D223F0(void *a1, float32x2_t *a2)
{
  float32x2_t v3 = *a2;
  float32x2_t v4 = a2[1];
  __asm { FMOV            V2.2S, #1.0 }
  float32x2_t v10 = vdiv_f32(_D2, *a2);
  float32x2_t v11 = a2[2];
  float32x2_t v12 = a2[3];
  *(_DWORD *)(*(void *)&v12 + 64) = HIDWORD(*(unint64_t *)a2);
  *(float32x2_t *)&long long v13 = v3;
  *((float32x2_t *)&v13 + 1) = v4;
  *(_DWORD *)(*(void *)&v12 + 48) = v3.i32[0];
  *(_OWORD *)(*(void *)&v12 + 16) = v13;
  *(float32x2_t *)(*(void *)&v12 + 32) = v10;
  *(float32x2_t *)(*(void *)&v12 + 4std::__fs::filesystem::__rename(__from, __to, 0) = vmul_f32(v10, vneg_f32(v4));
  *(void *)(*(void *)&v12 + 56) = 0;
  *(_DWORD *)(*(void *)&v12 + 52) = 0;
  *(_DWORD *)(*(void *)&v12 + 68) = 0;
  *(float32x2_t *)(*(void *)&v12 + 72) = v4;
  *(_DWORD *)(*(void *)&v12 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 1065353216;
  *(float32x2_t *)(*(void *)&v12 + 88) = v11;
  float32x2_t v14 = a2[3];
  *a1 = *(void *)(*(void *)&v14 + 16);
  a1[1] = *(void *)(*(void *)&v14 + 24);
  a1[2] = *(void *)(*(void *)&v14 + 88);
  long long v15 = (char *)operator new(0x78uLL);
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = 0;
  *(void *)long long v15 = &unk_26C684408;
  uint64_t v16 = *(void *)(*(void *)&v14 + 88);
  long long v17 = *(_OWORD *)(*(void *)&v14 + 16);
  *((void *)v15 + 4) = &unk_26C65A188;
  *(_OWORD *)(v15 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v17;
  *(_OWORD *)(v15 + 56) = *(_OWORD *)(*(void *)&v14 + 32);
  int v18 = *(_DWORD *)(*(void *)&v14 + 80);
  long long v19 = *(_OWORD *)(*(void *)&v14 + 64);
  *(_OWORD *)(v15 + 72) = *(_OWORD *)(*(void *)&v14 + 48);
  *((_DWORD *)v15 + 26) = v18;
  *(_OWORD *)(v15 + 88) = v19;
  *((void *)v15 + 14) = v16;
  *((void *)v15 + 3) = &unk_26C65A0D8;
  a1[3] = v15 + 24;
  a1[4] = v15;
  return a1;
}

void *sub_215D22520(void *a1, float32x2_t *a2)
{
  float32x2_t v3 = *a2;
  float32x2_t v4 = a2[1];
  __asm { FMOV            V2.2S, #1.0 }
  float32x2_t v10 = vdiv_f32(_D2, *a2);
  float32x2_t v11 = a2[2];
  float32x2_t v12 = a2[3];
  *(_DWORD *)(*(void *)&v12 + 64) = HIDWORD(*(unint64_t *)a2);
  *(float32x2_t *)&long long v13 = v3;
  *((float32x2_t *)&v13 + 1) = v4;
  *(_DWORD *)(*(void *)&v12 + 48) = v3.i32[0];
  *(_OWORD *)(*(void *)&v12 + 16) = v13;
  *(float32x2_t *)(*(void *)&v12 + 32) = v10;
  *(float32x2_t *)(*(void *)&v12 + 4std::__fs::filesystem::__rename(__from, __to, 0) = vmul_f32(v10, vneg_f32(v4));
  *(void *)(*(void *)&v12 + 56) = 0;
  *(_DWORD *)(*(void *)&v12 + 52) = 0;
  *(_DWORD *)(*(void *)&v12 + 68) = 0;
  *(float32x2_t *)(*(void *)&v12 + 72) = v4;
  *(_DWORD *)(*(void *)&v12 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 1065353216;
  *(float32x2_t *)(*(void *)&v12 + 88) = v11;
  float32x2_t v14 = a2[3];
  *a1 = *(void *)(*(void *)&v14 + 16);
  a1[1] = *(void *)(*(void *)&v14 + 24);
  a1[2] = *(void *)(*(void *)&v14 + 88);
  long long v15 = (char *)operator new(0x78uLL);
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = 0;
  *(void *)long long v15 = &unk_26C684458;
  uint64_t v16 = *(void *)(*(void *)&v14 + 88);
  long long v17 = *(_OWORD *)(*(void *)&v14 + 16);
  *((void *)v15 + 4) = &unk_26C65A188;
  *(_OWORD *)(v15 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v17;
  *(_OWORD *)(v15 + 56) = *(_OWORD *)(*(void *)&v14 + 32);
  int v18 = *(_DWORD *)(*(void *)&v14 + 80);
  long long v19 = *(_OWORD *)(*(void *)&v14 + 64);
  *(_OWORD *)(v15 + 72) = *(_OWORD *)(*(void *)&v14 + 48);
  *((_DWORD *)v15 + 26) = v18;
  *(_OWORD *)(v15 + 88) = v19;
  *((void *)v15 + 14) = v16;
  *((void *)v15 + 3) = &unk_26C659DE8;
  a1[3] = v15 + 24;
  a1[4] = v15;
  return a1;
}

uint64_t sub_215D22650(uint64_t a1, uint64_t a2)
{
  double v3 = *(double *)a2;
  double v4 = *(double *)(a2 + 8);
  double v5 = *(double *)(a2 + 16);
  double v6 = *(double *)(a2 + 24);
  double v7 = 1.0 / *(double *)a2;
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  *(void *)(v9 + 16) = *(void *)a2;
  *(double *)(v9 + 24) = v4;
  *(double *)(v9 + 32) = v5;
  *(double *)(v9 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v6;
  *(double *)(v9 + 48) = v7;
  *(double *)(v9 + 56) = 1.0 / v4;
  *(double *)(v9 + 64) = -(v5 * v7);
  *(double *)(v9 + 72) = -(v6 * (1.0 / v4));
  *(double *)(v9 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v3;
  *(_OWORD *)(v9 + 88) = 0uLL;
  *(void *)(v9 + 104) = 0;
  *(double *)(v9 + 112) = v4;
  *(void *)(v9 + 12std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(double *)(v9 + 128) = v5;
  *(double *)(v9 + 136) = v6;
  *(void *)(v9 + 144) = 0x3FF0000000000000;
  *(void *)(v9 + 152) = v8;
  uint64_t v10 = *(void *)(a2 + 40);
  *(_OWORD *)a1 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v10 + 32);
  *(void *)(a1 + 32) = *(void *)(v10 + 152);
  float32x2_t v11 = (char *)operator new(0xB8uLL);
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(void *)float32x2_t v11 = &unk_26C6844A8;
  uint64_t v12 = *(void *)(v10 + 152);
  *((void *)v11 + 4) = &unk_26C659958;
  *(_OWORD *)(v11 + 4std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v10 + 16);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(v10 + 32);
  long long v13 = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v11 + 72) = *(_OWORD *)(v10 + 48);
  *(_OWORD *)(v11 + 88) = v13;
  *(_OWORD *)(v11 + 104) = *(_OWORD *)(v10 + 80);
  long long v14 = *(_OWORD *)(v10 + 96);
  long long v15 = *(_OWORD *)(v10 + 112);
  uint64_t v16 = *(void *)(v10 + 144);
  *(_OWORD *)(v11 + 152) = *(_OWORD *)(v10 + 128);
  *(_OWORD *)(v11 + 136) = v15;
  *(_OWORD *)(v11 + 12std::__fs::filesystem::__rename(__from, __to, 0) = v14;
  *((void *)v11 + 21) = v16;
  *((void *)v11 + 22) = v12;
  *((void *)v11 + 3) = &unk_26C659C48;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v11 + 24;
  *(void *)(a1 + 48) = v11;
  return a1;
}

uint64_t sub_215D227DC(uint64_t a1, uint64_t a2)
{
  double v3 = *(double *)a2;
  double v4 = *(double *)(a2 + 8);
  double v5 = *(double *)(a2 + 16);
  double v6 = *(double *)(a2 + 24);
  double v7 = 1.0 / *(double *)a2;
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  *(void *)(v9 + 16) = *(void *)a2;
  *(double *)(v9 + 24) = v4;
  *(double *)(v9 + 32) = v5;
  *(double *)(v9 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v6;
  *(double *)(v9 + 48) = v7;
  *(double *)(v9 + 56) = 1.0 / v4;
  *(double *)(v9 + 64) = -(v5 * v7);
  *(double *)(v9 + 72) = -(v6 * (1.0 / v4));
  *(double *)(v9 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v3;
  *(_OWORD *)(v9 + 88) = 0uLL;
  *(void *)(v9 + 104) = 0;
  *(double *)(v9 + 112) = v4;
  *(void *)(v9 + 12std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(double *)(v9 + 128) = v5;
  *(double *)(v9 + 136) = v6;
  *(void *)(v9 + 144) = 0x3FF0000000000000;
  *(void *)(v9 + 152) = v8;
  uint64_t v10 = *(void *)(a2 + 40);
  *(_OWORD *)a1 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v10 + 32);
  *(void *)(a1 + 32) = *(void *)(v10 + 152);
  float32x2_t v11 = (char *)operator new(0xB8uLL);
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(void *)float32x2_t v11 = &unk_26C6844F8;
  uint64_t v12 = *(void *)(v10 + 152);
  *((void *)v11 + 4) = &unk_26C659958;
  *(_OWORD *)(v11 + 4std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)(v10 + 16);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(v10 + 32);
  long long v13 = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v11 + 72) = *(_OWORD *)(v10 + 48);
  *(_OWORD *)(v11 + 88) = v13;
  *(_OWORD *)(v11 + 104) = *(_OWORD *)(v10 + 80);
  long long v14 = *(_OWORD *)(v10 + 96);
  long long v15 = *(_OWORD *)(v10 + 112);
  uint64_t v16 = *(void *)(v10 + 144);
  *(_OWORD *)(v11 + 152) = *(_OWORD *)(v10 + 128);
  *(_OWORD *)(v11 + 136) = v15;
  *(_OWORD *)(v11 + 12std::__fs::filesystem::__rename(__from, __to, 0) = v14;
  *((void *)v11 + 21) = v16;
  *((void *)v11 + 22) = v12;
  *((void *)v11 + 3) = &unk_26C659A48;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v11 + 24;
  *(void *)(a1 + 48) = v11;
  return a1;
}

void *sub_215D22968(void *a1, uint64_t a2)
{
  sub_215731D94(a1, (uint64_t)"{Model: ", 8);
  sub_215731D94(a1, (uint64_t)"{fx,fy: ", 8);
  uint64_t v6 = *(void *)(a2 + 16);
  sub_215D11198(a1, (float *)&v6);
  sub_215731D94(a1, (uint64_t)", cx,cy: ", 9);
  uint64_t v5 = *(void *)(a2 + 24);
  sub_215D11198(a1, (float *)&v5);
  sub_215731D94(a1, (uint64_t)"}", 1);
  sub_215731D94(a1, (uint64_t)", Size: ", 8);
  sub_2158D6F30(a1, (unsigned int *)(a2 + 88));
  sub_215731D94(a1, (uint64_t)"}", 1);
  return a1;
}

void *sub_215D22A48(void *a1, uint64_t a2)
{
  sub_215731D94(a1, (uint64_t)"{Model: ", 8);
  sub_215731D94(a1, (uint64_t)"{fx,fy: ", 8);
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_215D112C8(a1, (double *)&v6);
  sub_215731D94(a1, (uint64_t)", cx,cy: ", 9);
  long long v5 = *(_OWORD *)(a2 + 32);
  sub_215D112C8(a1, (double *)&v5);
  sub_215731D94(a1, (uint64_t)"}", 1);
  sub_215731D94(a1, (uint64_t)", Size: ", 8);
  sub_2158D6F30(a1, (unsigned int *)(a2 + 152));
  sub_215731D94(a1, (uint64_t)"}", 1);
  return a1;
}

void sub_215D22B28(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6842C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D22B48(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6842C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D22B9C(uint64_t result)
{
  *(void *)(result + 24) = &unk_26C65A148;
  return result;
}

void sub_215D22BC4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D22BE4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684318;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D22C38(uint64_t result)
{
  *(void *)(result + 24) = &unk_26C659918;
  return result;
}

void sub_215D22C60(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D22C80(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684368;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D22CD4(uint64_t result)
{
  *(void *)(result + 24) = &unk_26C659C88;
  return result;
}

void sub_215D22CFC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6843B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D22D1C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6843B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D22D70(uint64_t result)
{
  *(void *)(result + 24) = &unk_26C659A88;
  return result;
}

void sub_215D22D98(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D22DB8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684408;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D22E0C(uint64_t result)
{
  *(void *)(result + 24) = &unk_26C65A148;
  return result;
}

void sub_215D22E34(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D22E54(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684458;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D22EA8(uint64_t result)
{
  *(void *)(result + 24) = &unk_26C659918;
  return result;
}

void sub_215D22ED0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6844A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D22EF0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6844A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D22F44(uint64_t result)
{
  *(void *)(result + 24) = &unk_26C659C88;
  return result;
}

void sub_215D22F6C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6844F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215D22F8C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6844F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D22FE0(uint64_t result)
{
  *(void *)(result + 24) = &unk_26C659A88;
  return result;
}

void *sub_215D23008(void *a1)
{
  int32x4_t v5 = vdupq_n_s32(0x7FC00000u);
  float32x2_t v2 = (char *)operator new(0x78uLL);
  *(_OWORD *)(v2 + 8) = 0u;
  *(void *)float32x2_t v2 = &unk_26C65A1E8;
  *(_OWORD *)(v2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(int32x4_t *)(v2 + 56) = v5;
  *((void *)v2 + 4) = &unk_26C65A188;
  *(int32x4_t *)(v2 + 72) = v5;
  *(int32x4_t *)(v2 + 88) = v5;
  *((_DWORD *)v2 + 26) = 2143289344;
  *((void *)v2 + 14) = 0;
  *((void *)v2 + 3) = &unk_26C65A0D8;
  *a1 = &unk_26C684548;
  a1[1] = v2 + 24;
  a1[2] = v2;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v2 + 1, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add((atomic_ullong *volatile)v2 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    double v4 = (std::__shared_weak_count *)v2;
    (*(void (**)(char *))(*(void *)v2 + 16))(v2);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void *sub_215D2319C(void *result)
{
  uint64_t v1 = result;
  *dispatch_workloop_t result = &unk_26C684548;
  float32x2_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215D23234(void *a1)
{
  *a1 = &unk_26C684548;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

BOOL sub_215D232DC(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  if (v4 != (*(unsigned int (**)(void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8))) {
    return 0;
  }
  int v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8));
  if (v5 != (*(unsigned int (**)(void))(**(void **)(a2 + 8) + 24))(*(void *)(a2 + 8))) {
    return 0;
  }
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  if (v6 != (*(unsigned int (**)(void))(**(void **)(a2 + 8) + 32))(*(void *)(a2 + 8))) {
    return 0;
  }
  BOOL v54 = 0;
  int v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  int v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8));
  int v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  BOOL v11 = v7 == 1 && v8 == 1;
  if (v11 && v9 == 11)
  {
    long long v19 = *(const void **)(a1 + 8);
    if (!v19) {
      return v54;
    }
    uint64_t v20 = (float *)__dynamic_cast(v19, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A120, 0);
    if (!v20) {
      return v54;
    }
    long long v21 = v20;
    uint64_t v22 = *(const void **)(a2 + 8);
    if (!v22
      || (long long v23 = (float *)__dynamic_cast(v22, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A120, 0)) == 0)
    {
      uint64_t v50 = sub_2157D1088();
      sub_215D23BE0(a2, (const char *)v50, (uint64_t)"trying to cast camera");
    }
    if (v21[4] != v23[4]
      || v21[5] != v23[5]
      || v21[6] != v23[6]
      || v21[7] != v23[7]
      || *((_DWORD *)v21 + 22) != *((_DWORD *)v23 + 22))
    {
      return 0;
    }
    return *((_DWORD *)v21 + 23) == *((_DWORD *)v23 + 23);
  }
  if (v9 != 12) {
    BOOL v11 = 0;
  }
  if (v11)
  {
    long long v13 = *(const void **)(a1 + 8);
    if (!v13) {
      return v54;
    }
    long long v14 = (double *)__dynamic_cast(v13, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A240, 0);
    if (!v14) {
      return v54;
    }
    long long v15 = v14;
    uint64_t v16 = *(const void **)(a2 + 8);
    if (!v16
      || (long long v17 = (double *)__dynamic_cast(v16, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A240, 0)) == 0)
    {
      long long v51 = sub_2157D358C();
      sub_215D23BE0(a2, (const char *)v51, (uint64_t)"trying to cast camera");
    }
LABEL_21:
    if (v15[2] == v17[2]
      && v15[3] == v17[3]
      && v15[4] == v17[4]
      && v15[5] == v17[5]
      && *((_DWORD *)v15 + 38) == *((_DWORD *)v17 + 38))
    {
      return *((_DWORD *)v15 + 39) == *((_DWORD *)v17 + 39);
    }
    return 0;
  }
  if (v7) {
    BOOL v24 = 0;
  }
  else {
    BOOL v24 = v8 == 1;
  }
  int v25 = v24;
  if (v25 == 1 && v9 == 11)
  {
    unint64_t v31 = *(const void **)(a1 + 8);
    if (!v31) {
      return v54;
    }
    uint64_t v32 = (float *)__dynamic_cast(v31, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A270, 0);
    if (!v32) {
      return v54;
    }
    long long v21 = v32;
    double v33 = *(const void **)(a2 + 8);
    if (!v33
      || (long long v23 = (float *)__dynamic_cast(v33, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A270, 0)) == 0)
    {
      long long v52 = sub_2157CEE7C();
      sub_215D23BE0(a2, (const char *)v52, (uint64_t)"trying to cast camera");
    }
    if (v21[4] != v23[4]
      || v21[5] != v23[5]
      || v21[6] != v23[6]
      || v21[7] != v23[7]
      || *((_DWORD *)v21 + 22) != *((_DWORD *)v23 + 22))
    {
      return 0;
    }
    return *((_DWORD *)v21 + 23) == *((_DWORD *)v23 + 23);
  }
  if (v9 != 12) {
    int v25 = 0;
  }
  if (v25 == 1)
  {
    int v27 = *(const void **)(a1 + 8);
    if (!v27) {
      return v54;
    }
    long long v28 = (double *)__dynamic_cast(v27, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A2A0, 0);
    if (!v28) {
      return v54;
    }
    long long v15 = v28;
    long long v29 = *(const void **)(a2 + 8);
    if (!v29
      || (long long v17 = (double *)__dynamic_cast(v29, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A2A0, 0)) == 0)
    {
      long long v30 = sub_2157D2FF0();
      sub_215D23BE0(a2, (const char *)v30, (uint64_t)"trying to cast camera");
    }
    goto LABEL_21;
  }
  BOOL v35 = v7 == 1 && v8 == 2;
  if (!v35 || v9 != 11)
  {
    if (v9 != 12) {
      BOOL v35 = 0;
    }
    if (v35)
    {
      unint64_t v37 = sub_215D24EF0(*(const void **)(a1 + 8));
      sub_215D24D6C(&v54, a2, v37, v38);
    }
    else
    {
      if (v7) {
        BOOL v44 = 0;
      }
      else {
        BOOL v44 = v8 == 2;
      }
      int v45 = v44;
      if (v44 && v9 == 11)
      {
        unint64_t v46 = sub_215D250FC(*(const void **)(a1 + 8));
        sub_215D24F78(&v54, a2, v46, v47);
      }
      else
      {
        if (v9 != 12) {
          int v45 = 0;
        }
        if (v45 == 1)
        {
          unint64_t v48 = sub_215D25308(*(const void **)(a1 + 8));
          sub_215D25184(&v54, a2, v48, v49);
        }
      }
    }
    return v54;
  }
  uint64_t v39 = *(const void **)(a1 + 8);
  if (v39)
  {
    uint64_t v40 = (float *)__dynamic_cast(v39, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A2D0, 0);
    if (v40)
    {
      long long v41 = v40;
      long long v42 = *(const void **)(a2 + 8);
      if (!v42
        || (long long v43 = (float *)__dynamic_cast(v42, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A2D0, 0)) == 0)
      {
        long long v53 = sub_2157D3F1C();
        sub_215D23BE0(a2, (const char *)v53, (uint64_t)"trying to cast camera");
      }
      if (v41[4] == v43[4]
        && v41[5] == v43[5]
        && v41[6] == v43[6]
        && v41[7] == v43[7]
        && v41[8] == v43[8]
        && v41[9] == v43[9]
        && v41[10] == v43[10]
        && v41[11] == v43[11]
        && v41[12] == v43[12]
        && v41[13] == v43[13]
        && *((_DWORD *)v41 + 14) == *((_DWORD *)v43 + 14)
        && *((_DWORD *)v41 + 30) == *((_DWORD *)v43 + 30))
      {
        return *((_DWORD *)v41 + 31) == *((_DWORD *)v43 + 31);
      }
      return 0;
    }
  }
  return v54;
}

uint64_t sub_215D23B68(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t sub_215D23B90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

uint64_t sub_215D23BB8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

void sub_215D23BE0(uint64_t a1, const char *a2, uint64_t a3)
{
  __cxa_allocate_exception(0x10uLL);
  uint64_t v5 = a3;
  int v7 = 0;
  sub_2158F65AC(v6, "Invalid argument ");
  int v8 = v6;
  int v9 = a2;
  uint64_t v10 = v6;
  BOOL v11 = a2;
  uint64_t v12 = a2;
  if (v7 == -1) {
    sub_215742D4C();
  }
  long long v13 = &v8;
  ((void (*)(void **, _DWORD *))off_26C6845C0[v7])(&v13, v6);
  int v8 = v6;
  int v9 = " ";
  uint64_t v10 = v6;
  BOOL v11 = " ";
  uint64_t v12 = " ";
  if (v7 == -1) {
    sub_215742D4C();
  }
  long long v13 = &v8;
  ((void (*)(void **, _DWORD *))off_26C6845D8[v7])(&v13, v6);
  if (a3)
  {
    int v8 = v6;
    int v9 = (const char *)&v5;
    uint64_t v10 = v6;
    BOOL v11 = (const char *)&v5;
    uint64_t v12 = (const char *)&v5;
    if (v7 != -1)
    {
      long long v13 = &v8;
      ((void (*)(void **, _DWORD *))off_26C6845F0[v7])(&v13, v6);
LABEL_11:
      int v8 = v6;
      int v9 = " ";
      uint64_t v10 = v6;
      BOOL v11 = " ";
      uint64_t v12 = " ";
      if (v7 == -1) {
        sub_215742D4C();
      }
      long long v13 = &v8;
      ((void (*)(void **, _DWORD *))off_26C6845D8[v7])(&v13, v6);
      sub_2157D6D48();
    }
  }
  else
  {
    int v8 = v6;
    int v9 = "nullptr";
    uint64_t v10 = v6;
    BOOL v11 = "nullptr";
    uint64_t v12 = "nullptr";
    if (v7 != -1)
    {
      long long v13 = &v8;
      ((void (*)(void **, _DWORD *))off_26C6845A8[v7])(&v13, v6);
      goto LABEL_11;
    }
  }
  sub_215742D4C();
}

void sub_215D23E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void *sub_215D23EA4(void *a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8));
  int v5 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 24))(*(void *)(a2 + 8));
  int v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 32))(*(void *)(a2 + 8));
  BOOL v8 = v4 == 1 && v5 == 1;
  if (v8 && v6 == 11)
  {
    BOOL v11 = *(const void **)(a2 + 8);
    if (v11
      && __dynamic_cast(v11, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A120, 0))
    {
      sub_215731D94(a1, (uint64_t)"Camera{Type: ", 13);
      sub_215731D94(a1, (uint64_t)"Center", 6);
      sub_215731D94(a1, (uint64_t)"Pinhole", 7);
      int v40 = 0;
      sub_2157D4C1C();
    }
    goto LABEL_73;
  }
  if (v6 != 12) {
    BOOL v8 = 0;
  }
  if (v8)
  {
    uint64_t v10 = *(const void **)(a2 + 8);
    if (v10
      && __dynamic_cast(v10, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A240, 0))
    {
      sub_215731D94(a1, (uint64_t)"Camera{Type: ", 13);
      sub_215731D94(a1, (uint64_t)"Center", 6);
      sub_215731D94(a1, (uint64_t)"Pinhole", 7);
      int v40 = 0;
      sub_2157D4C1C();
    }
    goto LABEL_73;
  }
  if (v4) {
    BOOL v12 = 0;
  }
  else {
    BOOL v12 = v5 == 1;
  }
  int v13 = v12;
  if (v13 == 1 && v6 == 11)
  {
    uint64_t v16 = *(const void **)(a2 + 8);
    if (v16
      && __dynamic_cast(v16, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A270, 0))
    {
      sub_215731D94(a1, (uint64_t)"Camera{Type: ", 13);
      sub_215731D94(a1, (uint64_t)"Corner", 6);
      sub_215731D94(a1, (uint64_t)"Pinhole", 7);
      int v40 = 0;
      sub_2157D4C1C();
    }
    goto LABEL_73;
  }
  if (v6 != 12) {
    int v13 = 0;
  }
  if (v13 == 1)
  {
    long long v15 = *(const void **)(a2 + 8);
    if (v15
      && __dynamic_cast(v15, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A2A0, 0))
    {
      sub_215731D94(a1, (uint64_t)"Camera{Type: ", 13);
      sub_215731D94(a1, (uint64_t)"Corner", 6);
      sub_215731D94(a1, (uint64_t)"Pinhole", 7);
      int v40 = 0;
      sub_2157D4C1C();
    }
    goto LABEL_73;
  }
  BOOL v18 = v4 == 1 && v5 == 2;
  if (v18 && v6 == 11)
  {
    uint64_t v22 = *(const void **)(a2 + 8);
    if (v22
      && __dynamic_cast(v22, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A2D0, 0))
    {
      sub_215731D94(a1, (uint64_t)"Camera{Type: ", 13);
      sub_215731D94(a1, (uint64_t)"Center", 6);
      sub_215731D94(a1, (uint64_t)"Heikkila", 8);
      int v40 = 0;
      sub_2157D4C1C();
    }
    goto LABEL_73;
  }
  if (v6 != 12) {
    BOOL v18 = 0;
  }
  if (v18)
  {
    unint64_t v20 = sub_215D24EF0(*(const void **)(a2 + 8));
    if (sub_215D25390(a1, v20, v21)) {
      return a1;
    }
    goto LABEL_73;
  }
  if (v4) {
    BOOL v23 = 0;
  }
  else {
    BOOL v23 = v5 == 2;
  }
  int v24 = v23;
  if (v24 == 1 && v6 == 11)
  {
    unint64_t v28 = sub_215D250FC(*(const void **)(a2 + 8));
    if (sub_215D2562C(a1, v28, v29)) {
      return a1;
    }
    goto LABEL_73;
  }
  if (v6 != 12) {
    int v24 = 0;
  }
  if (v24 != 1 || (unint64_t v26 = sub_215D25308(*(const void **)(a2 + 8)), (sub_215D258C8(a1, v26, v27) & 1) == 0))
  {
LABEL_73:
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
    sub_215731D94(a1, (uint64_t)"Camera{Type: ", 13);
    if ((*(unsigned int (**)(void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8)) == 1) {
      long long v30 = "Center";
    }
    else {
      long long v30 = "Corner";
    }
    sub_215731D94(a1, (uint64_t)v30, 6);
    sub_215731D94(a1, (uint64_t)",", 1);
    unsigned int v31 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 24))(*(void *)(a2 + 8));
    sub_215731D94(a1, (uint64_t)(&off_26425AC60)[2 * v31], (uint64_t)(&off_26425AC60)[2 * v31 + 1]);
    sub_215731D94(a1, (uint64_t)",", 1);
    if ((*(unsigned int (**)(void))(**(void **)(a2 + 8) + 32))(*(void *)(a2 + 8)) == 11) {
      uint64_t v32 = "f32";
    }
    else {
      uint64_t v32 = "f64";
    }
    sub_215731D94(a1, (uint64_t)v32, 3);
    sub_215731D94(a1, (uint64_t)",", 1);
    double v33 = *(void **)(a2 + 8);
    double v34 = *(std::__shared_weak_count **)(a2 + 16);
    std::string __p = v33;
    uint64_t v39 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    double v36 = v33;
    sub_2157DBD10((uint64_t)&v41, &v37, &v36);
    sub_215731D94(v37.__r_.__value_.__l.__data_, (uint64_t)"}", 1);
    if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  return a1;
}

void sub_215D24B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,int a28)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a10);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t sub_215D24D44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

BOOL *sub_215D24D6C(BOOL *result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    int v5 = result;
    int v6 = *(const void **)(a2 + 8);
    if (!v6
      || (dispatch_workloop_t result = (BOOL *)__dynamic_cast(v6, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A300, 0)) == 0)
    {
      int v9 = sub_2157D65FC();
      sub_215D23BE0(a2, (const char *)v9, (uint64_t)"trying to cast camera");
    }
    BOOL v8 = *(double *)(a3 + 16) == *((double *)result + 2)
      && *(double *)(a3 + 24) == *((double *)result + 3)
      && *(double *)(a3 + 32) == *((double *)result + 4)
      && *(double *)(a3 + 40) == *((double *)result + 5)
      && *(double *)(a3 + 48) == *((double *)result + 6)
      && *(double *)(a3 + 56) == *((double *)result + 7)
      && *(double *)(a3 + 64) == *((double *)result + 8)
      && *(double *)(a3 + 72) == *((double *)result + 9)
      && *(double *)(a3 + 80) == *((double *)result + 10)
      && *(double *)(a3 + 88) == *((double *)result + 11)
      && *(_DWORD *)(a3 + 96) == *((_DWORD *)result + 24)
      && *(_DWORD *)(a3 + 216) == *((_DWORD *)result + 54)
      && *(_DWORD *)(a3 + 220) == *((_DWORD *)result + 55);
    *int v5 = v8;
  }
  return result;
}

unint64_t sub_215D24EF0(const void *a1)
{
  if (!a1) {
    return 0;
  }
  unint64_t v1 = (unint64_t)__dynamic_cast(a1, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A300, 0);
  unint64_t v2 = v1 & 0xFFFFFFFFFFFFFF00;
  uint64_t v3 = v1;
  if (!v1)
  {
    unint64_t v2 = 0;
    uint64_t v3 = 0;
  }
  return v3 | v2;
}

BOOL *sub_215D24F78(BOOL *result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    int v5 = result;
    int v6 = *(const void **)(a2 + 8);
    if (!v6
      || (dispatch_workloop_t result = (BOOL *)__dynamic_cast(v6, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A330, 0)) == 0)
    {
      int v9 = sub_2157D3B28();
      sub_215D23BE0(a2, (const char *)v9, (uint64_t)"trying to cast camera");
    }
    BOOL v8 = *(float *)(a3 + 16) == *((float *)result + 4)
      && *(float *)(a3 + 20) == *((float *)result + 5)
      && *(float *)(a3 + 24) == *((float *)result + 6)
      && *(float *)(a3 + 28) == *((float *)result + 7)
      && *(float *)(a3 + 32) == *((float *)result + 8)
      && *(float *)(a3 + 36) == *((float *)result + 9)
      && *(float *)(a3 + 40) == *((float *)result + 10)
      && *(float *)(a3 + 44) == *((float *)result + 11)
      && *(float *)(a3 + 48) == *((float *)result + 12)
      && *(float *)(a3 + 52) == *((float *)result + 13)
      && *(_DWORD *)(a3 + 56) == *((_DWORD *)result + 14)
      && *(_DWORD *)(a3 + 120) == *((_DWORD *)result + 30)
      && *(_DWORD *)(a3 + 124) == *((_DWORD *)result + 31);
    *int v5 = v8;
  }
  return result;
}

unint64_t sub_215D250FC(const void *a1)
{
  if (!a1) {
    return 0;
  }
  unint64_t v1 = (unint64_t)__dynamic_cast(a1, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A330, 0);
  unint64_t v2 = v1 & 0xFFFFFFFFFFFFFF00;
  uint64_t v3 = v1;
  if (!v1)
  {
    unint64_t v2 = 0;
    uint64_t v3 = 0;
  }
  return v3 | v2;
}

BOOL *sub_215D25184(BOOL *result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    int v5 = result;
    int v6 = *(const void **)(a2 + 8);
    if (!v6
      || (dispatch_workloop_t result = (BOOL *)__dynamic_cast(v6, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A360, 0)) == 0)
    {
      int v9 = sub_2157D6074();
      sub_215D23BE0(a2, (const char *)v9, (uint64_t)"trying to cast camera");
    }
    BOOL v8 = *(double *)(a3 + 16) == *((double *)result + 2)
      && *(double *)(a3 + 24) == *((double *)result + 3)
      && *(double *)(a3 + 32) == *((double *)result + 4)
      && *(double *)(a3 + 40) == *((double *)result + 5)
      && *(double *)(a3 + 48) == *((double *)result + 6)
      && *(double *)(a3 + 56) == *((double *)result + 7)
      && *(double *)(a3 + 64) == *((double *)result + 8)
      && *(double *)(a3 + 72) == *((double *)result + 9)
      && *(double *)(a3 + 80) == *((double *)result + 10)
      && *(double *)(a3 + 88) == *((double *)result + 11)
      && *(_DWORD *)(a3 + 96) == *((_DWORD *)result + 24)
      && *(_DWORD *)(a3 + 216) == *((_DWORD *)result + 54)
      && *(_DWORD *)(a3 + 220) == *((_DWORD *)result + 55);
    *int v5 = v8;
  }
  return result;
}

unint64_t sub_215D25308(const void *a1)
{
  if (!a1) {
    return 0;
  }
  unint64_t v1 = (unint64_t)__dynamic_cast(a1, (const struct __class_type_info *)&unk_26C684620, (const struct __class_type_info *)&unk_26C65A360, 0);
  unint64_t v2 = v1 & 0xFFFFFFFFFFFFFF00;
  uint64_t v3 = v1;
  if (!v1)
  {
    unint64_t v2 = 0;
    uint64_t v3 = 0;
  }
  return v3 | v2;
}

uint64_t sub_215D25390(void *a1, uint64_t a2, char a3)
{
  if (a3)
  {
    sub_215731D94(a1, (uint64_t)"Camera{Type: ", 13);
    sub_215731D94(a1, (uint64_t)"Center", 6);
    sub_215731D94(a1, (uint64_t)"Heikkila", 8);
    sub_2157D4C1C();
  }
  return 0;
}

void sub_215D25590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,int a28)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a10);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t sub_215D2562C(void *a1, uint64_t a2, char a3)
{
  if (a3)
  {
    sub_215731D94(a1, (uint64_t)"Camera{Type: ", 13);
    sub_215731D94(a1, (uint64_t)"Corner", 6);
    sub_215731D94(a1, (uint64_t)"Heikkila", 8);
    sub_2157D4C1C();
  }
  return 0;
}

void sub_215D2582C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,int a28)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a10);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t sub_215D258C8(void *a1, uint64_t a2, char a3)
{
  if (a3)
  {
    sub_215731D94(a1, (uint64_t)"Camera{Type: ", 13);
    sub_215731D94(a1, (uint64_t)"Corner", 6);
    sub_215731D94(a1, (uint64_t)"Heikkila", 8);
    sub_2157D4C1C();
  }
  return 0;
}

void sub_215D25AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,int a28)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a10);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t sub_215D25B64@<X0>(unsigned int *a1@<X0>, unsigned char *a2@<X8>)
{
  sub_2157328B8((uint64_t)v20);
  int v4 = (char *)v21 + *(void *)(v21[0] - 24);
  int v5 = *((_DWORD *)v4 + 2);
  uint64_t v6 = *((void *)v4 + 3);
  *((void *)v4 + 3) = 0;
  v31[0] = 91;
  sub_215731D94(v21, (uint64_t)v31, 1);
  unsigned int v7 = *a1;
  if (*a1)
  {
    unsigned int v8 = 0;
    if (v6) {
      uint64_t v9 = (int)v6;
    }
    else {
      uint64_t v9 = 4;
    }
    do
    {
      if (a1[1])
      {
        unsigned int v10 = 0;
        do
        {
          *(void *)((char *)v22 + *(void *)(v21[0] - 24)) = v9;
          std::ostream::operator<<();
          unsigned int v11 = a1[1];
          if (v10 != v11 - 1)
          {
            v31[0] = 44;
            sub_215731D94(v21, (uint64_t)v31, 1);
            unsigned int v11 = a1[1];
          }
          ++v10;
        }
        while (v10 < v11);
        unsigned int v7 = *a1;
      }
      if (v8 != v7 - 1)
      {
        sub_215731D94(v21, (uint64_t)";\n ", 3);
        unsigned int v7 = *a1;
      }
      ++v8;
    }
    while (v8 < v7);
  }
  sub_215731D94(v21, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)&v21[1] + *(void *)(v21[0] - 24)) = v5;
  if ((v29 & 0x10) != 0)
  {
    unint64_t v13 = v28;
    if (v28 < v25)
    {
      unint64_t v28 = v25;
      unint64_t v13 = v25;
    }
    long long v14 = v24;
    size_t v12 = v13 - (void)v24;
    if (v13 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_31;
    }
  }
  else
  {
    if ((v29 & 8) == 0)
    {
      size_t v12 = 0;
      a2[23] = 0;
      goto LABEL_27;
    }
    long long v14 = (const void *)v22[0];
    size_t v12 = v23 - v22[0];
    if ((unint64_t)(v23 - v22[0]) >= 0x7FFFFFFFFFFFFFF8) {
LABEL_31:
    }
      sub_215731CD8();
  }
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    int v17 = operator new(v15 + 1);
    *((void *)a2 + 1) = v12;
    *((void *)a2 + 2) = v16 | 0x8000000000000000;
    *(void *)a2 = v17;
    a2 = v17;
    goto LABEL_26;
  }
  a2[23] = v12;
  if (v12) {
LABEL_26:
  }
    memmove(a2, v14, v12);
LABEL_27:
  a2[v12] = 0;
  v20[0] = *MEMORY[0x263F8C2B8];
  uint64_t v18 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v20 + *(void *)(v20[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v21[0] = v18;
  v21[1] = MEMORY[0x263F8C318] + 16;
  if (v27 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2166C4BF0](&v30);
}

void sub_215D25EE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2157351A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D25EF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2157351A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D25F0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2157351A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215D25F20@<X0>(unsigned int *a1@<X0>, void *a2@<X8>)
{
  sub_2157328B8((uint64_t)v46);
  int v4 = (char *)&v48[-1] + *(void *)(v47 - 24);
  int v45 = *((_DWORD *)v4 + 2);
  size_t v6 = *((void *)v4 + 2);
  int64_t v5 = *((void *)v4 + 3);
  if (v5)
  {
    if (v5 <= (uint64_t)(v6 + 2)) {
      size_t v7 = v6 + 2;
    }
    else {
      size_t v7 = v5;
    }
    double v8 = __exp10((double)-(uint64_t)v6);
    size_t v9 = v7 + ~v6;
    size_t v10 = v9 - 1;
    if (v9 - 1 > 0x7FFFFFFFFFFFFFF7) {
      sub_215731CD8();
    }
    double v11 = v8;
    if (v10 >= 0x17)
    {
      uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v13 = v10 | 7;
      }
      uint64_t v14 = v13 + 1;
      p_b = (std::string *)operator new(v13 + 1);
      __b.__r_.__value_.__l.__size_ = v9 - 1;
      __b.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((unsigned char *)&__b.__r_.__value_.__s + 23) = v9 - 1;
      p_b = &__b;
      if (v9 == 1)
      {
        LODWORD(v9) = 1;
        goto LABEL_14;
      }
    }
  }
  else
  {
    double v11 = __exp10((double)-(uint64_t)v6);
    size_t v10 = 3;
    *((unsigned char *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v9) = 4;
  }
  memset(p_b, 32, v10);
LABEL_14:
  p_b->__r_.__value_.__s.__data_[v10] = 0;
  uint64_t v15 = std::string::append(&__b, "0 ", 2uLL);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_215731CD8();
  }
  if (v6 >= 0x17)
  {
    uint64_t v18 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v18 = v6 | 7;
    }
    uint64_t v19 = v18 + 1;
    int v17 = (void **)operator new(v18 + 1);
    size_t v59 = v6;
    int64_t v60 = v19 | 0x8000000000000000;
    double v58 = v17;
    goto LABEL_21;
  }
  HIBYTE(v6std::__fs::filesystem::__rename(__from, __to, 0) = v6;
  int v17 = (void **)&v58;
  if (v6) {
LABEL_21:
  }
    memset(v17, 32, v6);
  *((unsigned char *)v17 + v6) = 0;
  if (v60 >= 0) {
    unint64_t v20 = (const std::string::value_type *)&v58;
  }
  else {
    unint64_t v20 = (const std::string::value_type *)v58;
  }
  if (v60 >= 0) {
    std::string::size_type v21 = HIBYTE(v60);
  }
  else {
    std::string::size_type v21 = v59;
  }
  uint64_t v22 = std::string::append(&v62, v20, v21);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  int64_t v64 = v22->__r_.__value_.__r.__words[2];
  long long v63 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
LABEL_59:
    operator delete(v62.__r_.__value_.__l.__data_);
    std::string __dst = a2;
    if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
LABEL_60:
    operator delete(__b.__r_.__value_.__l.__data_);
    goto LABEL_31;
  }
  operator delete(v58);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_59;
  }
LABEL_30:
  std::string __dst = a2;
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_60;
  }
LABEL_31:
  *(void *)((char *)v49 + *(void *)(v47 - 24)) = 0;
  v62.__r_.__value_.__s.__data_[0] = 91;
  sub_215731D94(&v47, (uint64_t)&v62, 1);
  unsigned int v24 = *a1;
  if (!*a1) {
    goto LABEL_54;
  }
  int v25 = 0;
  uint64_t v26 = (int)v9 + (int)v6 + 1;
  while (2)
  {
    if (!a1[1]) {
      goto LABEL_52;
    }
    unsigned int v27 = 0;
    do
    {
      float v28 = *(float *)(*((void *)a1 + 2) + 4 * (v25 + a1[2] * v27));
      uint64_t v29 = v47;
      uint64_t v30 = (char *)&v48[-1] + *(void *)(v47 - 24);
      if (v30[9])
      {
        if (v28 != 0.0)
        {
          *((void *)v30 + 3) = v26;
          *(_DWORD *)((char *)v48 + *(void *)(v29 - 24)) |= 0x400u;
          *(void *)((char *)&v48[1] + *(void *)(v29 - 24)) = (int)v6 - 3;
          std::ostream::operator<<();
          goto LABEL_49;
        }
      }
      else if (fabs(v28) >= v11)
      {
        *((void *)v30 + 3) = v26;
        *(_DWORD *)((char *)v48 + *(void *)(v29 - 24)) = *(_DWORD *)((unsigned char *)v48 + *(void *)(v29 - 24)) & 0xFFFFFEFB | 4;
        *(_DWORD *)((char *)v48 + *(void *)(v29 - 24)) |= 0x400u;
        *(void *)((char *)&v48[1] + *(void *)(v29 - 24)) = (int)v6;
        std::ostream::operator<<();
        goto LABEL_49;
      }
      if (v64 >= 0) {
        unsigned int v31 = &v63;
      }
      else {
        unsigned int v31 = (long long *)v63;
      }
      if (v64 >= 0) {
        uint64_t v32 = HIBYTE(v64);
      }
      else {
        uint64_t v32 = *((void *)&v63 + 1);
      }
      sub_215731D94(&v47, (uint64_t)v31, v32);
LABEL_49:
      unsigned int v33 = a1[1];
      if (v27 != v33 - 1)
      {
        v62.__r_.__value_.__s.__data_[0] = 44;
        sub_215731D94(&v47, (uint64_t)&v62, 1);
        unsigned int v33 = a1[1];
      }
      ++v27;
    }
    while (v27 < v33);
    unsigned int v24 = *a1;
LABEL_52:
    if (v25 != v24 - 1)
    {
      sub_215731D94(&v47, (uint64_t)";\n ", 3);
      unsigned int v24 = *a1;
    }
    if (++v25 < v24) {
      continue;
    }
    break;
  }
LABEL_54:
  sub_215731D94(&v47, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)v48 + *(void *)(v47 - 24)) = v45;
  double v34 = __dst;
  if (SHIBYTE(v64) < 0)
  {
    operator delete((void *)v63);
    char v35 = v56;
    if ((v56 & 0x10) != 0) {
      goto LABEL_62;
    }
LABEL_56:
    if ((v35 & 8) == 0)
    {
      size_t v36 = 0;
      *((unsigned char *)__dst + 23) = 0;
      goto LABEL_72;
    }
    char v38 = (const void *)v49[0];
    size_t v36 = v50 - v49[0];
    if ((unint64_t)(v50 - v49[0]) <= 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_65;
    }
LABEL_76:
    sub_215731CD8();
  }
  char v35 = v56;
  if ((v56 & 0x10) == 0) {
    goto LABEL_56;
  }
LABEL_62:
  unint64_t v37 = v55;
  if (v55 < v52)
  {
    unint64_t v55 = v52;
    unint64_t v37 = v52;
  }
  char v38 = v51;
  size_t v36 = v37 - (void)v51;
  if (v37 - (unint64_t)v51 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_76;
  }
LABEL_65:
  if (v36 >= 0x17)
  {
    uint64_t v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17) {
      uint64_t v39 = v36 | 7;
    }
    uint64_t v40 = v39 + 1;
    uint64_t v41 = operator new(v39 + 1);
    __dst[1] = v36;
    __dst[2] = v40 | 0x8000000000000000;
    *std::string __dst = v41;
    double v34 = v41;
    goto LABEL_71;
  }
  *((unsigned char *)__dst + 23) = v36;
  if (v36) {
LABEL_71:
  }
    memmove(v34, v38, v36);
LABEL_72:
  *((unsigned char *)v34 + v36) = 0;
  v46[0] = *MEMORY[0x263F8C2B8];
  uint64_t v42 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v46 + *(void *)(v46[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v47 = v42;
  v48[0] = MEMORY[0x263F8C318] + 16;
  if (v54 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2166C4BF0](&v57);
}

void sub_215D265B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (*(char *)(v4 - 121) < 0) {
    operator delete(*(void **)(v4 - 144));
  }
  sub_2157351A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215D26678@<X0>(unsigned int *a1@<X0>, void *a2@<X8>)
{
  sub_2157328B8((uint64_t)v46);
  uint64_t v4 = (char *)&v48[-1] + *(void *)(v47 - 24);
  int v45 = *((_DWORD *)v4 + 2);
  size_t v6 = *((void *)v4 + 2);
  int64_t v5 = *((void *)v4 + 3);
  if (v5)
  {
    if (v5 <= (uint64_t)(v6 + 2)) {
      size_t v7 = v6 + 2;
    }
    else {
      size_t v7 = v5;
    }
    double v8 = __exp10((double)-(uint64_t)v6);
    size_t v9 = v7 + ~v6;
    size_t v10 = v9 - 1;
    if (v9 - 1 > 0x7FFFFFFFFFFFFFF7) {
      sub_215731CD8();
    }
    double v11 = v8;
    if (v10 >= 0x17)
    {
      uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v13 = v10 | 7;
      }
      uint64_t v14 = v13 + 1;
      p_b = (std::string *)operator new(v13 + 1);
      __b.__r_.__value_.__l.__size_ = v9 - 1;
      __b.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((unsigned char *)&__b.__r_.__value_.__s + 23) = v9 - 1;
      p_b = &__b;
      if (v9 == 1)
      {
        LODWORD(v9) = 1;
        goto LABEL_14;
      }
    }
  }
  else
  {
    double v11 = __exp10((double)-(uint64_t)v6);
    size_t v10 = 3;
    *((unsigned char *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v9) = 4;
  }
  memset(p_b, 32, v10);
LABEL_14:
  p_b->__r_.__value_.__s.__data_[v10] = 0;
  uint64_t v15 = std::string::append(&__b, "0 ", 2uLL);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_215731CD8();
  }
  if (v6 >= 0x17)
  {
    uint64_t v18 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v18 = v6 | 7;
    }
    uint64_t v19 = v18 + 1;
    int v17 = (void **)operator new(v18 + 1);
    size_t v59 = v6;
    int64_t v60 = v19 | 0x8000000000000000;
    double v58 = v17;
    goto LABEL_21;
  }
  HIBYTE(v6std::__fs::filesystem::__rename(__from, __to, 0) = v6;
  int v17 = (void **)&v58;
  if (v6) {
LABEL_21:
  }
    memset(v17, 32, v6);
  *((unsigned char *)v17 + v6) = 0;
  if (v60 >= 0) {
    unint64_t v20 = (const std::string::value_type *)&v58;
  }
  else {
    unint64_t v20 = (const std::string::value_type *)v58;
  }
  if (v60 >= 0) {
    std::string::size_type v21 = HIBYTE(v60);
  }
  else {
    std::string::size_type v21 = v59;
  }
  uint64_t v22 = std::string::append(&v62, v20, v21);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  int64_t v64 = v22->__r_.__value_.__r.__words[2];
  long long v63 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
LABEL_59:
    operator delete(v62.__r_.__value_.__l.__data_);
    std::string __dst = a2;
    if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
LABEL_60:
    operator delete(__b.__r_.__value_.__l.__data_);
    goto LABEL_31;
  }
  operator delete(v58);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_59;
  }
LABEL_30:
  std::string __dst = a2;
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_60;
  }
LABEL_31:
  *(void *)((char *)v49 + *(void *)(v47 - 24)) = 0;
  v62.__r_.__value_.__s.__data_[0] = 91;
  sub_215731D94(&v47, (uint64_t)&v62, 1);
  unsigned int v24 = *a1;
  if (!*a1) {
    goto LABEL_54;
  }
  int v25 = 0;
  uint64_t v26 = (int)v9 + (int)v6 + 1;
  while (2)
  {
    if (!a1[1]) {
      goto LABEL_52;
    }
    unsigned int v27 = 0;
    do
    {
      double v28 = *(double *)(*((void *)a1 + 2) + 8 * (v25 + a1[2] * v27));
      uint64_t v29 = v47;
      uint64_t v30 = (char *)&v48[-1] + *(void *)(v47 - 24);
      if (v30[9])
      {
        if (v28 != 0.0)
        {
          *((void *)v30 + 3) = v26;
          *(_DWORD *)((char *)v48 + *(void *)(v29 - 24)) |= 0x400u;
          *(void *)((char *)&v48[1] + *(void *)(v29 - 24)) = (int)v6 - 3;
          std::ostream::operator<<();
          goto LABEL_49;
        }
      }
      else if (fabs(v28) >= v11)
      {
        *((void *)v30 + 3) = v26;
        *(_DWORD *)((char *)v48 + *(void *)(v29 - 24)) = *(_DWORD *)((unsigned char *)v48 + *(void *)(v29 - 24)) & 0xFFFFFEFB | 4;
        *(_DWORD *)((char *)v48 + *(void *)(v29 - 24)) |= 0x400u;
        *(void *)((char *)&v48[1] + *(void *)(v29 - 24)) = (int)v6;
        std::ostream::operator<<();
        goto LABEL_49;
      }
      if (v64 >= 0) {
        unsigned int v31 = &v63;
      }
      else {
        unsigned int v31 = (long long *)v63;
      }
      if (v64 >= 0) {
        uint64_t v32 = HIBYTE(v64);
      }
      else {
        uint64_t v32 = *((void *)&v63 + 1);
      }
      sub_215731D94(&v47, (uint64_t)v31, v32);
LABEL_49:
      unsigned int v33 = a1[1];
      if (v27 != v33 - 1)
      {
        v62.__r_.__value_.__s.__data_[0] = 44;
        sub_215731D94(&v47, (uint64_t)&v62, 1);
        unsigned int v33 = a1[1];
      }
      ++v27;
    }
    while (v27 < v33);
    unsigned int v24 = *a1;
LABEL_52:
    if (v25 != v24 - 1)
    {
      sub_215731D94(&v47, (uint64_t)";\n ", 3);
      unsigned int v24 = *a1;
    }
    if (++v25 < v24) {
      continue;
    }
    break;
  }
LABEL_54:
  sub_215731D94(&v47, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)v48 + *(void *)(v47 - 24)) = v45;
  double v34 = __dst;
  if (SHIBYTE(v64) < 0)
  {
    operator delete((void *)v63);
    char v35 = v56;
    if ((v56 & 0x10) != 0) {
      goto LABEL_62;
    }
LABEL_56:
    if ((v35 & 8) == 0)
    {
      size_t v36 = 0;
      *((unsigned char *)__dst + 23) = 0;
      goto LABEL_72;
    }
    char v38 = (const void *)v49[0];
    size_t v36 = v50 - v49[0];
    if ((unint64_t)(v50 - v49[0]) <= 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_65;
    }
LABEL_76:
    sub_215731CD8();
  }
  char v35 = v56;
  if ((v56 & 0x10) == 0) {
    goto LABEL_56;
  }
LABEL_62:
  unint64_t v37 = v55;
  if (v55 < v52)
  {
    unint64_t v55 = v52;
    unint64_t v37 = v52;
  }
  char v38 = v51;
  size_t v36 = v37 - (void)v51;
  if (v37 - (unint64_t)v51 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_76;
  }
LABEL_65:
  if (v36 >= 0x17)
  {
    uint64_t v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17) {
      uint64_t v39 = v36 | 7;
    }
    uint64_t v40 = v39 + 1;
    uint64_t v41 = operator new(v39 + 1);
    __dst[1] = v36;
    __dst[2] = v40 | 0x8000000000000000;
    *std::string __dst = v41;
    double v34 = v41;
    goto LABEL_71;
  }
  *((unsigned char *)__dst + 23) = v36;
  if (v36) {
LABEL_71:
  }
    memmove(v34, v38, v36);
LABEL_72:
  *((unsigned char *)v34 + v36) = 0;
  v46[0] = *MEMORY[0x263F8C2B8];
  uint64_t v42 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v46 + *(void *)(v46[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v47 = v42;
  v48[0] = MEMORY[0x263F8C318] + 16;
  if (v54 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2166C4BF0](&v57);
}

void sub_215D26D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (*(char *)(v4 - 121) < 0) {
    operator delete(*(void **)(v4 - 144));
  }
  sub_2157351A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_215D26DCC(uint64_t a1, uint64_t a2)
{
  sub_215DD24E4(a2, (uint64_t)&v13);
  long long v7 = v13;
  uint64_t v8 = v14;
  uint64_t v9 = v15;
  size_t v10 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = v17;
  size_t v12 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v4 = v19;
  int64_t v5 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v6 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((void)v7) {
    BOOL v2 = (void)v4 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (((void)v7 != 0) == ((void)v4 == 0)) {
      goto LABEL_17;
    }
  }
  else if (*((void *)&v7 + 1) != *((void *)&v4 + 1))
  {
LABEL_17:
    sub_215DD220C((uint64_t)&v7);
  }
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return sub_215D2C878(&v13);
}

void sub_215D27B90()
{
}

void sub_215D27BA0(_Unwind_Exception *a1)
{
  sub_215733368(&v6);
  sub_215733368(&v2);
  sub_215D27C20(&v3);
  sub_215D27C20(&v4);
  sub_215D2C878(&v5);
  _Unwind_Resume(a1);
}

uint64_t sub_215D27C20(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v3) {
      return a1;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v3) {
      return a1;
    }
  }
  if (atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void *sub_215D27CF0(uint64_t a1, uint64_t a2)
{
  sub_215DD24E4(a2, (uint64_t)&v13);
  long long v7 = v13;
  uint64_t v8 = v14;
  uint64_t v9 = v15;
  size_t v10 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = v17;
  size_t v12 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v4 = v19;
  uint64_t v5 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((void)v7) {
    BOOL v2 = (void)v4 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (((void)v7 != 0) == ((void)v4 == 0)) {
      goto LABEL_17;
    }
  }
  else if (*((void *)&v7 + 1) != *((void *)&v4 + 1))
  {
LABEL_17:
    sub_215DD220C((uint64_t)&v7);
  }
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return sub_215D2C878(&v13);
}

void sub_215D28AB4()
{
}

void sub_215D28AC4(_Unwind_Exception *a1)
{
  sub_215733368(&v6);
  sub_215733368(&v2);
  sub_215D27C20(&v3);
  sub_215D27C20(&v4);
  sub_215D2C878(&v5);
  _Unwind_Resume(a1);
}

char *sub_215D28B44(char *result)
{
  int v1 = *result;
  if (*result)
  {
    if (v1 == 6)
    {
      value[0] = 0;
      sub_215D2FEDC(result, value);
      uint64_t v2 = value[0];
      LOBYTE(__p[0]) = 3;
      uint64_t v3 = operator new(8uLL);
      __p[1] = v3;
      *uint64_t v3 = v2;
      size_t v10 = v3 + 1;
      uint64_t v11 = v3 + 1;
      sub_215DD976C((uint64_t)value, (unsigned __int8 *)__p);
      long long v12 = *(_OWORD *)value;
      sub_215A33D98((uint64_t)&v13, (uint64_t)&v12);
    }
    if ((v1 - 5) <= 1)
    {
      value[0] = 0;
      sub_215D30030(result, value);
      uint64_t v4 = value[0];
      LOBYTE(__p[0]) = 8;
      uint64_t v5 = operator new(8uLL);
      __p[1] = v5;
      *uint64_t v5 = v4;
      size_t v10 = v5 + 1;
      uint64_t v11 = v5 + 1;
      sub_215DD976C((uint64_t)value, (unsigned __int8 *)__p);
      long long v12 = *(_OWORD *)value;
      sub_215A33D98((uint64_t)&v13, (uint64_t)&v12);
    }
    switch(*result)
    {
      case 1:
        __p[1] = 0;
        size_t v10 = 0;
        __p[0] = &__p[1];
        sub_215DD8470();
      case 2:
        CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
        sub_215DD0FA4((int)__p, Mutable, 0);
      case 3:
        __p[0] = 0;
        __p[1] = 0;
        size_t v10 = 0;
        sub_215D3040C((void **)result, (uint64_t)__p);
        sub_215DD0B64((uint64_t)__p);
      case 4:
        LOBYTE(v13) = 0;
        sub_215D302F8(result, &v13);
        LOBYTE(v12) = v13;
        sub_215DD0A48();
      case 7:
        value[0] = 0;
        sub_215D30184((uint64_t *)result, (double *)value);
        long long v7 = value[0];
        LOBYTE(__p[0]) = 12;
        uint64_t v8 = operator new(8uLL);
        __p[1] = v8;
        *uint64_t v8 = v7;
        size_t v10 = v8 + 1;
        uint64_t v11 = v8 + 1;
        sub_215DD976C((uint64_t)value, (unsigned __int8 *)__p);
        long long v12 = *(_OWORD *)value;
        sub_215A33D98((uint64_t)&v13, (uint64_t)&v12);
      default:
        return result;
    }
  }
  return result;
}

void sub_215D29284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D29298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_215D29350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void sub_215D29370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_215D293A0(char *result)
{
  int v1 = *result;
  if (*result)
  {
    if (v1 == 6)
    {
      value[0] = 0;
      sub_215D306DC(result, value);
      uint64_t v2 = value[0];
      LOBYTE(__p[0]) = 3;
      uint64_t v3 = operator new(8uLL);
      __p[1] = v3;
      *uint64_t v3 = v2;
      size_t v10 = v3 + 1;
      uint64_t v11 = v3 + 1;
      sub_215DD976C((uint64_t)value, (unsigned __int8 *)__p);
      long long v12 = *(_OWORD *)value;
      sub_215A33D98((uint64_t)&v13, (uint64_t)&v12);
    }
    if ((v1 - 5) <= 1)
    {
      value[0] = 0;
      sub_215D30830(result, value);
      uint64_t v4 = value[0];
      LOBYTE(__p[0]) = 8;
      uint64_t v5 = operator new(8uLL);
      __p[1] = v5;
      *uint64_t v5 = v4;
      size_t v10 = v5 + 1;
      uint64_t v11 = v5 + 1;
      sub_215DD976C((uint64_t)value, (unsigned __int8 *)__p);
      long long v12 = *(_OWORD *)value;
      sub_215A33D98((uint64_t)&v13, (uint64_t)&v12);
    }
    switch(*result)
    {
      case 1:
        __p[1] = 0;
        size_t v10 = 0;
        __p[0] = &__p[1];
        sub_215DD8470();
      case 2:
        CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
        sub_215DD0FA4((int)__p, Mutable, 0);
      case 3:
        __p[0] = 0;
        __p[1] = 0;
        size_t v10 = 0;
        sub_215D30C0C((void **)result, (uint64_t)__p);
        sub_215DD0B64((uint64_t)__p);
      case 4:
        LOBYTE(v13) = 0;
        sub_215D30AF8(result, &v13);
        LOBYTE(v12) = v13;
        sub_215DD0A48();
      case 7:
        value[0] = 0;
        sub_215D30984((uint64_t *)result, (double *)value);
        long long v7 = value[0];
        LOBYTE(__p[0]) = 12;
        uint64_t v8 = operator new(8uLL);
        __p[1] = v8;
        *uint64_t v8 = v7;
        size_t v10 = v8 + 1;
        uint64_t v11 = v8 + 1;
        sub_215DD976C((uint64_t)value, (unsigned __int8 *)__p);
        long long v12 = *(_OWORD *)value;
        sub_215A33D98((uint64_t)&v13, (uint64_t)&v12);
      default:
        return result;
    }
  }
  return result;
}

void sub_215D29AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D29B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_215D29BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void sub_215D29BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215D29C10(uint64_t result)
{
  if (*(unsigned char *)result == 1)
  {
    uint64_t v1 = *(void *)(result + 8);
    if (*(void *)(v1 + 16))
    {
      v11[0] = (unsigned __int8 *)result;
      long long v12 = xmmword_215EF87F0;
      v11[1] = *(unsigned __int8 **)v1;
      long long v10 = xmmword_215EF87F0;
      v9[0] = (unsigned __int8 *)result;
      v9[1] = (unsigned __int8 *)(v1 + 8);
      dispatch_workloop_t result = sub_215D31030(v11, v9);
      if ((result & 1) == 0)
      {
        uint64_t v2 = sub_215D30DC4((uint64_t)v11);
        if (*(char *)(v2 + 23) < 0)
        {
          sub_215738B0C(__p, *(void **)v2, *(void *)(v2 + 8));
        }
        else
        {
          long long v3 = *(_OWORD *)v2;
          uint64_t v8 = *(void *)(v2 + 16);
          *(_OWORD *)std::string __p = v3;
        }
        uint64_t v4 = sub_215D3138C((uint64_t)v11);
        uint64_t v5 = 0;
        uint64_t v6 = 0;
        sub_215D28B44(v4);
        sub_215DD0B64((uint64_t)__p);
      }
    }
  }
  return result;
}

void sub_215D29E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_215D29E60(uint64_t result)
{
  if (*(unsigned char *)result == 1)
  {
    uint64_t v1 = *(unsigned __int8 ***)(result + 8);
    uint64_t v2 = *v1;
    if (*v1 != v1[1])
    {
      long long v14 = xmmword_215EF87F0;
      v13[0] = (unsigned __int8 *)result;
      v13[1] = v2;
      long long v12 = xmmword_215EF87F0;
      long long v3 = v1[1];
      v11[0] = (unsigned __int8 *)result;
      v11[1] = v3;
      dispatch_workloop_t result = sub_215D315D8(v13, v11);
      if ((result & 1) == 0)
      {
        uint64_t v4 = sub_215D31508((uint64_t)v13);
        if (*(char *)(v4 + 23) < 0)
        {
          sub_215738B0C(__p, *(void **)v4, *(void *)(v4 + 8));
        }
        else
        {
          long long v5 = *(_OWORD *)v4;
          uint64_t v10 = *(void *)(v4 + 16);
          *(_OWORD *)std::string __p = v5;
        }
        uint64_t v6 = sub_215D316E4((uint64_t)v13);
        uint64_t v7 = 0;
        uint64_t v8 = 0;
        sub_215D293A0(v6);
        sub_215DD0B64((uint64_t)__p);
      }
    }
  }
  return result;
}

void sub_215D2A048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_215D2A088(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  v1[0] = 0;
  uint64_t v2 = 0;
  sub_215D31860((uint64_t)v1, a1);
}

void sub_215D2A188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  sub_215CE9D14(v12, a12);
  _Unwind_Resume(a1);
}

void sub_215D2A1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CE9D14((uint64_t *)(v10 + 8), a10);
  _Unwind_Resume(a1);
}

uint64_t sub_215D2A1BC(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 2)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      uint64_t v10 = (char *)sub_215D2DC9C((char *)a1);
      sub_215732BF4(&v11, v10);
      sub_215AC8CC8("cannot use operator[] with a numeric argument with ", &v11, &v12);
      sub_215D2DB00(305, (uint64_t)&v12, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
    }
    uint64_t v4 = *(uint64_t **)(a1 + 8);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    unint64_t v7 = (v6 - *v4) >> 4;
    if (v7 > a2) {
      return v5 + 16 * a2;
    }
  }
  else
  {
    *(unsigned char *)a1 = 2;
    uint64_t v4 = (uint64_t *)operator new(0x18uLL);
    uint64_t v5 = 0;
    v4[1] = 0;
    void v4[2] = 0;
    uint64_t *v4 = 0;
    *(void *)(a1 + 8) = v4;
    uint64_t v6 = v4[1];
    unint64_t v7 = v6 >> 4;
    if (v6 >> 4 > a2) {
      return v5 + 16 * a2;
    }
  }
  v12.__r_.__value_.__s.__data_[0] = 0;
  v12.__r_.__value_.__l.__size_ = 0;
  sub_215D32804(v4, (unsigned __int8 *)v6, a2 - v7 + 1, (unsigned __int8 *)&v12);
  sub_215CE9D14((uint64_t *)&v12.__r_.__value_.__l.__size_, v12.__r_.__value_.__s.__data_[0]);
  return **(void **)(a1 + 8) + 16 * a2;
}

void sub_215D2A30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  sub_215CE9D14(v12, a12);
  _Unwind_Resume(a1);
}

void sub_215D2A324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void sub_215D2A384(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  v1[0] = 0;
  uint64_t v2 = 0;
  sub_215D323C8((uint64_t)v1, a1);
}

void sub_215D2A484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  sub_215CEB204(v12, a12);
  _Unwind_Resume(a1);
}

void sub_215D2A4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CEB204((void ***)(v10 + 8), a10);
  _Unwind_Resume(a1);
}

uint64_t sub_215D2A4B8(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 2)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      uint64_t v10 = (char *)sub_215D2DC9C((char *)a1);
      sub_215732BF4(&v11, v10);
      sub_215AC8CC8("cannot use operator[] with a numeric argument with ", &v11, &v12);
      sub_215D2DB00(305, (uint64_t)&v12, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
    }
    uint64_t v4 = *(void ****)(a1 + 8);
    uint64_t v5 = *v4;
    uint64_t v6 = (unsigned __int8 *)v4[1];
    unint64_t v7 = (v6 - (unsigned __int8 *)*v4) >> 4;
    if (v7 > a2) {
      return (uint64_t)&v5[2 * a2];
    }
  }
  else
  {
    *(unsigned char *)a1 = 2;
    uint64_t v4 = (void ***)operator new(0x18uLL);
    uint64_t v5 = 0;
    v4[1] = 0;
    void v4[2] = 0;
    uint64_t *v4 = 0;
    *(void *)(a1 + 8) = v4;
    uint64_t v6 = (unsigned __int8 *)v4[1];
    unint64_t v7 = (uint64_t)v6 >> 4;
    if ((uint64_t)v6 >> 4 > a2) {
      return (uint64_t)&v5[2 * a2];
    }
  }
  v12.__r_.__value_.__s.__data_[0] = 0;
  v12.__r_.__value_.__l.__size_ = 0;
  sub_215D32B54(v4, v6, a2 - v7 + 1, (unsigned __int8 *)&v12);
  sub_215CEB204((void ***)&v12.__r_.__value_.__l.__size_, v12.__r_.__value_.__s.__data_[0]);
  return **(void **)(a1 + 8) + 16 * a2;
}

void sub_215D2A608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  sub_215CEB204(v12, a12);
  _Unwind_Resume(a1);
}

void sub_215D2A620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

CFTypeID sub_215D2A680@<X0>(const void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    goto LABEL_19;
  }
  CFTypeID TypeID = CFNumberGetTypeID();
  CFTypeID result = CFGetTypeID(v3);
  if (result == TypeID)
  {
    *(_WORD *)a2 = 0;
    goto LABEL_8;
  }
  unint64_t v7 = *a1;
  if (!*a1) {
    goto LABEL_19;
  }
  CFTypeID v8 = CFStringGetTypeID();
  CFTypeID result = CFGetTypeID(v7);
  if (result != v8)
  {
    uint64_t v9 = *a1;
    if (*a1)
    {
      CFTypeID v10 = CFBooleanGetTypeID();
      CFTypeID result = CFGetTypeID(v9);
      if (result == v10)
      {
        __int16 v11 = 2;
LABEL_18:
        *(_WORD *)a2 = v11;
        goto LABEL_8;
      }
      std::string v12 = *a1;
      if (*a1)
      {
        CFTypeID v13 = CFArrayGetTypeID();
        CFTypeID result = CFGetTypeID(v12);
        if (result == v13)
        {
          __int16 v11 = 3;
          goto LABEL_18;
        }
        long long v14 = *a1;
        if (*a1)
        {
          CFTypeID v15 = CFDictionaryGetTypeID();
          CFTypeID result = CFGetTypeID(v14);
          if (result == v15)
          {
            __int16 v11 = 4;
            goto LABEL_18;
          }
          long long v16 = *a1;
LABEL_20:
          CFTypeID v17 = CFGetTypeID(v16);
          sub_215DD9A94(v17);
        }
      }
    }
LABEL_19:
    long long v16 = 0;
    goto LABEL_20;
  }
  *(_WORD *)a2 = 1;
LABEL_8:
  *(unsigned char *)(a2 + 12std::__fs::filesystem::__rename(__from, __to, 0) = 1;
  return result;
}

void sub_215D2A9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  operator delete(v16);
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_215D2AA0C(uint64_t a1, uint64_t a2)
{
  sub_215A345F8((uint64_t)&v2, a2);
}

void sub_215D2AACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_215D2AAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215D2AAFC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890860, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890860))
  {
    return 5;
  }
  qword_267890838 = CFBooleanGetTypeID();
  qword_267890840 = CFStringGetTypeID();
  qword_267890848 = CFNumberGetTypeID();
  qword_267890850 = CFArrayGetTypeID();
  qword_267890858 = CFDictionaryGetTypeID();
  __cxa_guard_release(&qword_267890860);
  return 5;
}

void sub_215D2ABA4(_Unwind_Exception *a1)
{
}

void sub_215D2ABBC()
{
  long long v0 = xmmword_215EF8800;
  strcpy((char *)operator new(0x78uLL), "Dictionary cannot be serialized. It must only hold Boolean, Number, String, Array or Dictionary values, but contains ");
  int v1 = 1;
  operator new();
}

void sub_215D2AE50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x2166C4D20](v2, 0x10B2C40EED050F3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D2AE7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D2AE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_215742CF0((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_215742CF0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_215D2AEE4(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

void sub_215D2AF78(uint64_t *a1)
{
  uint64_t v2 = (a1[1] - *a1) >> 3;
  long long v14 = 0uLL;
  CFTypeID v13 = 0;
  sub_215D2C9E4((uint64_t)&v13, 0xAAAAAAAAAAAAAAABLL * v2);
  if (*a1 != a1[1]) {
    sub_215DD0B64(*a1);
  }
  uint64_t v3 = (uint64_t *)v13;
  uint64_t v12 = v14;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[4] - a1[3]) >> 3);
  long long v14 = 0uLL;
  CFTypeID v13 = 0;
  sub_215D2C9E4((uint64_t)&v13, v4);
  uint64_t v5 = a1[3];
  for (uint64_t i = a1[4]; v5 != i; v5 += 24)
  {
    uint64_t v7 = *(void *)(v5 + 8);
    uint64_t v15 = v7;
    CFTypeID v8 = *(std::__shared_weak_count **)(v5 + 16);
    long long v16 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v14;
    if ((unint64_t)v14 < *((void *)&v14 + 1))
    {
      *(void *)long long v14 = v7;
      *(void *)(v9 + 8) = v16;
      *(void *)&long long v14 = v9 + 16;
    }
    else
    {
      CFTypeID v10 = sub_215D2CBC0(&v13, (uint64_t)&v15);
      __int16 v11 = v16;
      *(void *)&long long v14 = v10;
      if (v16)
      {
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
  sub_215DD1790((void **)((v12 - (uint64_t)v3) >> 4), v3, (void **)((uint64_t)(v14 - (void)v13) >> 4), (uint64_t *)v13, (const __CFAllocator *)*MEMORY[0x263EFFB08], MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
}

void sub_215D2B370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  unint64_t v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_2157361F0((void **)va);
  sub_2157361F0((void **)va1);
  _Unwind_Resume(a1);
}

void sub_215D2B38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void *);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_2157361F0((void **)va1);
  sub_2157361F0((void **)va);
  _Unwind_Resume(a1);
}

void sub_215D2B3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_2157361F0((void **)va);
  _Unwind_Resume(a1);
}

void sub_215D2B4A4(uint64_t a1, uint64_t a2)
{
}

void sub_215D2B588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_215733368((uint64_t)&a10);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      sub_215733368(v17);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    sub_215733368((uint64_t)&a10);
    if (!v19) {
      goto LABEL_6;
    }
  }
  __cxa_free_exception(v18);
  sub_215733368(v17);
  _Unwind_Resume(a1);
}

_OWORD *sub_215D2B5FC(_OWORD *a1, uint64_t a2)
{
  unint64_t v4 = (char **)a1 + 3;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  CFDictionaryRef v6 = *(CFDictionaryRef *)a2;
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 8);
  if (v5
    && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v6) {
      goto LABEL_4;
    }
  }
  else if (v6)
  {
LABEL_4:
    Counint t = CFDictionaryGetCount(*(CFDictionaryRef *)a2);
    goto LABEL_7;
  }
  Counint t = 0;
LABEL_7:
  sub_215742B04((uint64_t)a1, Count);
  sub_215A2D74C(v4, Count);
  sub_215DD24E4(a2, (uint64_t)&v19);
  long long v13 = v19;
  uint64_t v14 = v20;
  uint64_t v15 = v21;
  long long v16 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = v23;
  uint64_t v18 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v10 = v25;
  uint64_t v11 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = v27;
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((void)v13) {
    BOOL v8 = (void)v10 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (((void)v13 != 0) == ((void)v10 == 0)) {
      goto LABEL_23;
    }
  }
  else if (*((void *)&v13 + 1) != *((void *)&v10 + 1))
  {
LABEL_23:
    sub_215DD220C((uint64_t)&v13);
  }
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  sub_215D2C878(&v19);
  return a1;
}

void sub_215D2BAF8(_Unwind_Exception *a1)
{
  sub_215986E24(v2);
  sub_2157352DC(v1);
  _Unwind_Resume(a1);
}

void sub_215D2BB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  *(void *)(v32 + 8) = v34;
  sub_215D2AEE4((uint64_t)&__p);
  sub_215D27C20((uint64_t)&a24);
  sub_215D27C20((uint64_t)&a32);
  sub_215D2C878((void *)(v35 - 176));
  sub_215986E24(v33);
  sub_2157352DC((void **)v32);
  _Unwind_Resume(a1);
}

void sub_215D2BBA4(uint64_t *a1)
{
  uint64_t v2 = (a1[1] - *a1) >> 3;
  long long v14 = 0uLL;
  long long v13 = 0;
  sub_215D2C9E4((uint64_t)&v13, 0xAAAAAAAAAAAAAAABLL * v2);
  if (*a1 != a1[1]) {
    sub_215DD0B64(*a1);
  }
  uint64_t v3 = (uint64_t *)v13;
  uint64_t v12 = v14;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[4] - a1[3]) >> 3);
  long long v14 = 0uLL;
  long long v13 = 0;
  sub_215D2C9E4((uint64_t)&v13, v4);
  uint64_t v5 = a1[3];
  for (uint64_t i = a1[4]; v5 != i; v5 += 24)
  {
    uint64_t v7 = *(void *)(v5 + 8);
    uint64_t v15 = v7;
    BOOL v8 = *(std::__shared_weak_count **)(v5 + 16);
    long long v16 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v14;
    if ((unint64_t)v14 < *((void *)&v14 + 1))
    {
      *(void *)long long v14 = v7;
      *(void *)(v9 + 8) = v16;
      *(void *)&long long v14 = v9 + 16;
    }
    else
    {
      long long v10 = sub_215D2CBC0(&v13, (uint64_t)&v15);
      uint64_t v11 = v16;
      *(void *)&long long v14 = v10;
      if (v16)
      {
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
  sub_215DD1790((void **)((v12 - (uint64_t)v3) >> 4), v3, (void **)((uint64_t)(v14 - (void)v13) >> 4), (uint64_t *)v13, (const __CFAllocator *)*MEMORY[0x263EFFB08], MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
}

void sub_215D2BF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  unint64_t v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_2157361F0((void **)va);
  sub_2157361F0((void **)va1);
  _Unwind_Resume(a1);
}

void sub_215D2BFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void *);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_2157361F0((void **)va1);
  sub_2157361F0((void **)va);
  _Unwind_Resume(a1);
}

void sub_215D2BFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_2157361F0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215D2C0D0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  *(unsigned char *)a5 = 0;
  int v8 = *(char *)(a1 + 23);
  uint64_t v9 = *(void *)(a1 + 8);
  if (v8 >= 0) {
    uint64_t v10 = a1;
  }
  else {
    uint64_t v10 = *(void *)a1;
  }
  *(void *)(a5 + 8) = 0;
  if (v8 >= 0) {
    uint64_t v11 = v8;
  }
  else {
    uint64_t v11 = v9;
  }
  uint64_t v12 = a2[3];
  if (!v12) {
    goto LABEL_10;
  }
  if ((void *)v12 != a2)
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
LABEL_10:
    uint64_t v15 = (void *)v12;
    goto LABEL_12;
  }
  uint64_t v15 = v14;
  (*(void (**)(void *, void *))(*a2 + 24))(a2, v14);
LABEL_12:
  sub_215D32EA4(v10, v10 + v11, v14, a3, a4, (uint64_t)v16);
  sub_215D33010((uint64_t)v16, 1, (unsigned __int8 *)a5);
  if (v21 < 0) {
    operator delete(__p);
  }
  if (v18)
  {
    long long v19 = v18;
    operator delete(v18);
  }
  if (v17 != v16)
  {
    if (v17) {
      (*(void (**)(void))(*v17 + 40))();
    }
    uint64_t result = (uint64_t)v15;
    if (v15 != v14) {
      goto LABEL_20;
    }
    return (*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  (*(void (**)(void *))(v16[0] + 32))(v16);
  uint64_t result = (uint64_t)v15;
  if (v15 == v14) {
    return (*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
LABEL_20:
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_215D2C2FC(_Unwind_Exception *a1)
{
  sub_215CE9D14(v2, *v1);
  _Unwind_Resume(a1);
}

void sub_215D2C314(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_215D33624((uint64_t)va1);
  sub_215D2C344((uint64_t *)va);
  sub_215CE9D14(v3, *v2);
  _Unwind_Resume(a1);
}

void *sub_215D2C344(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_215D2C3D4()
{
  v1[0] = 0;
  v1[1] = 0;
  long long v0 = v1;
  sub_215DD8470();
}

void sub_215D2C4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D2C4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D2C4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
}

void sub_215D2C4E0()
{
  v1[0] = 0;
  v1[1] = 0;
  long long v0 = v1;
  sub_215DD8470();
}

void sub_215D2C5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D2C5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D2C5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
}

uint64_t *sub_215D2C5EC(uint64_t *a1, _WORD *a2)
{
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  sub_215A9B3F0(a1, (uint64_t)&v22);
  uint64_t v4 = HIBYTE(v24);
  int v5 = SHIBYTE(v24);
  uint64_t v6 = v22;
  if (v24 >= 0)
  {
    uint64_t v7 = &v22;
  }
  else
  {
    uint64_t v4 = v23;
    uint64_t v7 = (void **)v22;
  }
  switch(v4)
  {
    case 4:
      if (*(_DWORD *)v7 != 1819242306) {
        goto LABEL_27;
      }
      uint64_t v8 = &off_26425ACB0;
      break;
    case 5:
      int v13 = *(_DWORD *)v7;
      int v14 = *((unsigned __int8 *)v7 + 4);
      if (v13 != 1634890305 || v14 != 121) {
        goto LABEL_27;
      }
      uint64_t v8 = &off_26425ACC0;
      break;
    case 6:
      if (*(_DWORD *)v7 == 1651340622 && *((_WORD *)v7 + 2) == 29285)
      {
        uint64_t v8 = &off_26425AC90;
      }
      else
      {
        int v10 = *(_DWORD *)v7;
        int v11 = *((unsigned __int16 *)v7 + 2);
        if (v10 != 1769108563 || v11 != 26478) {
          goto LABEL_27;
        }
        uint64_t v8 = &off_26425ACA0;
      }
      break;
    case 10:
      long long v16 = *v7;
      int v17 = *((unsigned __int16 *)v7 + 4);
      if (v16 != (void *)0x616E6F6974636944 || v17 != 31090) {
        goto LABEL_27;
      }
      uint64_t v8 = &off_26425ACD0;
      break;
    default:
LABEL_27:
      uint64_t v8 = off_26425ACE0;
      break;
  }
  if ((char *)v8 - (char *)&off_26425AC90 == 80)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::logic_error::logic_error(exception, &v21);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A320, MEMORY[0x263F8C080]);
  }
  *a2 = (unint64_t)((char *)v8 - (char *)&off_26425AC90) >> 4;
  if (v5 < 0) {
    operator delete(v6);
  }
  return a1;
}

void sub_215D2C80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      if (a20 < 0) {
        operator delete(a15);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void *sub_215D2C878(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[13];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[11];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[11];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    int v5 = (std::__shared_weak_count *)a1[4];
    if (!v5) {
      return a1;
    }
  }
  else
  {
    int v5 = (std::__shared_weak_count *)a1[4];
    if (!v5) {
      return a1;
    }
  }
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_215D2C9E4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    if (a2 >> 60) {
      sub_215D2CB08();
    }
    uint64_t v4 = *(char **)(a1 + 8);
    uint64_t v5 = 16 * a2;
    uint64_t v6 = (char *)operator new(16 * a2);
    uint64_t v7 = &v6[v5];
    uint64_t v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
    }
    else
    {
      uint64_t v9 = &v6[v4 - v2];
      do
      {
        long long v10 = *((_OWORD *)v4 - 1);
        v4 -= 16;
        *((_OWORD *)v9 - 1) = v10;
        v9 -= 16;
        *(void *)uint64_t v4 = 0;
        *((void *)v4 + 1) = 0;
      }
      while (v4 != v2);
      uint64_t v2 = *(char **)a1;
      int v11 = *(char **)(a1 + 8);
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v8;
      for (*(void *)(a1 + 16) = v7; v11 != v2; v11 -= 16)
      {
        uint64_t v12 = (std::__shared_weak_count *)*((void *)v11 - 1);
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    if (v2)
    {
      operator delete(v2);
    }
  }
}

void sub_215D2CB08()
{
}

void sub_215D2CB20(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  operator new();
}

void sub_215D2CB94(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215D2CBAC(_Unwind_Exception *a1)
{
}

char *sub_215D2CBC0(char **a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    sub_215D2CB08();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 3 > v4) {
    unint64_t v4 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 60) {
      sub_215738AD8();
    }
    uint64_t v8 = (char *)operator new(16 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = &v8[16 * v3];
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  long long v10 = v9 + 16;
  int v11 = &v8[16 * v7];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v12 = *a1;
  int v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v11;
  }
  else
  {
    do
    {
      long long v14 = *((_OWORD *)v13 - 1);
      v13 -= 16;
      *((_OWORD *)v9 - 1) = v14;
      v9 -= 16;
      *(void *)int v13 = 0;
      *((void *)v13 + 1) = 0;
    }
    while (v13 != v12);
    int v13 = *a1;
    uint64_t v15 = a1[1];
    *a1 = v9;
    a1[1] = v10;
    for (a1[2] = v11; v15 != v13; v15 -= 16)
    {
      long long v16 = (std::__shared_weak_count *)*((void *)v15 - 1);
      if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  if (v13) {
    operator delete(v13);
  }
  return v10;
}

uint64_t sub_215D2CD18(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    int v5 = *(unsigned __int8 *)(i - 16);
    uint64_t v4 = i - 16;
    *(void *)(a1 + 16) = v4;
    sub_215CE9D14((uint64_t *)(v4 + 8), v5);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t **sub_215D2CD70(uint64_t a1, const void **a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      unint64_t v7 = (char *)sub_215D2DC9C((char *)a1);
      sub_215732BF4(&v8, v7);
      sub_215AC8CC8("cannot use operator[] with a string argument with ", &v8, &v9);
      sub_215D2DB00(305, (uint64_t)&v9, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
    }
    uint64_t v4 = *(uint64_t ***)(a1 + 8);
  }
  else
  {
    *(unsigned char *)a1 = 1;
    uint64_t v4 = (uint64_t **)operator new(0x18uLL);
    void v4[2] = 0;
    v4[1] = 0;
    char *v4 = (uint64_t *)(v4 + 1);
    *(void *)(a1 + 8) = v4;
  }
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  return sub_215D2DD18(v4, a2, (uint64_t)&unk_215ED5989, (long long **)&v9) + 7;
}

void sub_215D2CE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void sub_215D2CED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_215A345F8((uint64_t)v3, a3);
}

void sub_215D2D890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,void *__p,uint64_t a32)
{
  sub_215CE9D14(v32, a10);
  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
    sub_215733368((uint64_t)&a26);
    sub_215733368((uint64_t)&a24);
    _Unwind_Resume(a1);
  }
  sub_215733368((uint64_t)&a26);
  sub_215733368((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_215D2D99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned __int8 a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  sub_215CE9D14(v33, a19);
  if (a33)
  {
    if (a32 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_215D2DA04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D2DA18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17)
{
  sub_215CE9D14(v17, a17);
  JUMPOUT(0x215D2DA28);
}

void sub_215D2DA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D2DA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
}

void sub_215D2DA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D2DA74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D2DA88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_215733368((uint64_t)va1);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D2DAA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D2DB00(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v13 = 10;
  strcpy((char *)__p, "type_error");
  sub_215D2E030((const void **)__p, a1, &v14);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  std::string v9 = std::string::append(&v14, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p[0]);
LABEL_9:
  if (v16 >= 0) {
    int v11 = v15;
  }
  else {
    int v11 = (void **)v15[0];
  }
  *(void *)a3 = &unk_26C684698;
  *(_DWORD *)(a3 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a3 + 16), (const char *)v11);
  *(void *)a3 = &unk_26C6846D8;
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_215D2DC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::exception::~exception(v26);
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

const char *sub_215D2DC9C(char *a1)
{
  unint64_t v1 = *a1;
  if (v1 > 9) {
    return "number";
  }
  else {
    return off_26425ACE0[v1];
  }
}

void sub_215D2DCC4(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26C684698;
  std::runtime_error::~runtime_error(a1 + 1);

  std::exception::~exception(a1);
}

uint64_t **sub_215D2DD18(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      std::string v9 = a2;
    }
    else {
      std::string v9 = *a2;
    }
    if (v8 >= 0) {
      size_t v10 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v10 = (size_t)a2[1];
    }
    while (1)
    {
      int v11 = (uint64_t **)v6;
      std::string v14 = (const void *)v6[4];
      uint64_t v12 = v6 + 4;
      char v13 = v14;
      int v15 = *((char *)v12 + 23);
      if (v15 >= 0) {
        int64_t v16 = v12;
      }
      else {
        int64_t v16 = v13;
      }
      if (v15 >= 0) {
        size_t v17 = *((unsigned __int8 *)v12 + 23);
      }
      else {
        size_t v17 = v12[1];
      }
      if (v17 >= v10) {
        size_t v18 = v10;
      }
      else {
        size_t v18 = v17;
      }
      int v19 = memcmp(v9, v16, v18);
      if (v19)
      {
        if (v19 < 0) {
          goto LABEL_8;
        }
LABEL_22:
        int v20 = memcmp(v16, v9, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0) {
            return v11;
          }
        }
        else if (v17 >= v10)
        {
          return v11;
        }
        int v6 = v11[1];
        if (!v6)
        {
          uint64_t v7 = v11 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v10 >= v17) {
          goto LABEL_22;
        }
LABEL_8:
        int v6 = *v11;
        uint64_t v7 = v11;
        if (!*v11) {
          goto LABEL_29;
        }
      }
    }
  }
  int v11 = a1 + 1;
LABEL_29:
  int v21 = (char *)operator new(0x48uLL);
  uint64_t v22 = v21 + 32;
  uint64_t v23 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_215738B0C(v22, *(void **)v23, *((void *)v23 + 1));
  }
  else
  {
    long long v24 = *v23;
    *((void *)v21 + 6) = *((void *)v23 + 2);
    *(_OWORD *)uint64_t v22 = v24;
  }
  v21[56] = 0;
  *((void *)v21 + 8) = 0;
  *(void *)int v21 = 0;
  *((void *)v21 + 1) = 0;
  *((void *)v21 + 2) = v11;
  const std::string::value_type *v7 = (uint64_t *)v21;
  long long v25 = (uint64_t *)**a1;
  uint64_t v26 = (uint64_t *)v21;
  if (v25)
  {
    *a1 = v25;
    uint64_t v26 = *v7;
  }
  sub_21573B048(a1[1], v26);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v21;
}

void sub_215D2DE98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_215D2DEAC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      sub_215CE9D14((uint64_t *)(v2 + 64), *(unsigned __int8 *)(v2 + 56));
      if (*(char *)(v2 + 55) < 0) {
        operator delete(*(void **)(v2 + 32));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

unsigned char *sub_215D2DF08(unsigned char *result, int a2)
{
  uint64_t v2 = result;
  switch(a2)
  {
    case 1:
      uint64_t v3 = operator new(0x18uLL);
      v3[2] = 0;
      v3[1] = 0;
      *uint64_t v3 = v3 + 1;
      *uint64_t v2 = v3;
      uint64_t result = v2;
      break;
    case 2:
      uint64_t v4 = operator new(0x18uLL);
      v4[1] = 0;
      void v4[2] = 0;
      void *v4 = 0;
      *uint64_t v2 = v4;
      uint64_t result = v2;
      break;
    case 3:
      uint64_t v5 = operator new(0x18uLL);
      v5[23] = 0;
      *uint64_t v5 = 0;
      *uint64_t v2 = v5;
      uint64_t result = v2;
      break;
    case 4:
      *uint64_t result = 0;
      break;
    case 8:
      int v6 = operator new(0x20uLL);
      v6[1] = 0;
      _OWORD v6[2] = 0;
      *int v6 = 0;
      *((_WORD *)v6 + 12) = 0;
      *uint64_t v2 = v6;
      uint64_t result = v2;
      break;
    default:
      *(void *)uint64_t result = 0;
      break;
  }
  return result;
}

void sub_215D2E030(const void **a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  int v4 = *((char *)a1 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  unint64_t v6 = v5 + 16;
  if (v5 + 16 >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  if (v6 >= 0x17)
  {
    uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v10 = v6 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v12 = operator new(v10 + 1);
    std::string v9 = (std::string::value_type *)(v12 + 1);
    v22.__r_.__value_.__l.__size_ = v5 + 16;
    v22.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    v22.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    _OWORD *v12 = *(_OWORD *)"[json.exception.";
  }
  else
  {
    std::string v9 = &v22.__r_.__value_.__s.__data_[16];
    v22.__r_.__value_.__r.__words[2] = 0;
    *((unsigned char *)&v22.__r_.__value_.__s + 23) = v5 + 16;
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)"[json.exception.";
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    char v13 = a1;
  }
  else {
    char v13 = *a1;
  }
  memmove(v9, v13, v5);
LABEL_15:
  v9[v5] = 0;
  std::string v14 = std::string::append(&v22, ".", 1uLL);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v21, a2);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v16 = &v21;
  }
  else {
    int64_t v16 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v21.__r_.__value_.__l.__size_;
  }
  size_t v18 = std::string::append(&v23, (const std::string::value_type *)v16, size);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  int v20 = std::string::append(&v24, "] ", 2uLL);
  *a3 = *v20;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v24.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_23:
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_28;
    }
  }
  else if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(v21.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_24:
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_29:
    operator delete(v22.__r_.__value_.__l.__data_);
    return;
  }
LABEL_28:
  operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_29;
  }
}

void sub_215D2E22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a28 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a23);
  if ((a21 & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

const char *sub_215D2E2C8(const std::runtime_error *a1)
{
  return std::runtime_error::what(a1 + 1);
}

void sub_215D2E2D0(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26C684698;
  std::runtime_error::~runtime_error(a1 + 1);

  std::exception::~exception(a1);
}

void sub_215D2E324(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26C684698;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215D2E38C(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26C684698;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);

  JUMPOUT(0x2166C4D20);
}

char *sub_215D2E3F4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      int v8 = (char *)sub_215D2DC9C((char *)a1);
      sub_215732BF4(&v9, v8);
      sub_215AC8CC8("cannot use operator[] with a string argument with ", &v9, &v10);
      sub_215D2DB00(305, (uint64_t)&v10, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
    }
    int v4 = *(uint64_t **)(a1 + 8);
  }
  else
  {
    *(unsigned char *)a1 = 1;
    int v4 = (uint64_t *)operator new(0x18uLL);
    v4[1] = 0;
    void v4[2] = 0;
    uint64_t *v4 = 0;
    *(void *)(a1 + 8) = v4;
  }
  v10.__r_.__value_.__s.__data_[0] = 0;
  v10.__r_.__value_.__l.__size_ = 0;
  size_t v5 = sub_215D2F1B8(v4, a2, (unsigned __int8 *)&v10) + 24;
  sub_215CEB204((void ***)&v10.__r_.__value_.__l.__size_, v10.__r_.__value_.__s.__data_[0]);
  return v5;
}

void sub_215D2E4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  char v13 = v12;
  sub_215CEB204(v13, a12);
  _Unwind_Resume(a1);
}

void sub_215D2E518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if (v21)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void sub_215D2E588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_215A345F8((uint64_t)v3, a3);
}

void sub_215D2EF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,void *__p,uint64_t a32)
{
  sub_215CEB204(v32, a10);
  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
    sub_215733368((uint64_t)&a26);
    sub_215733368((uint64_t)&a24);
    _Unwind_Resume(a1);
  }
  sub_215733368((uint64_t)&a26);
  sub_215733368((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_215D2F054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned __int8 a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  sub_215CEB204(v33, a19);
  if (a33)
  {
    if (a32 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_215D2F0BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D2F0D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17)
{
  sub_215CEB204(v17, a17);
  JUMPOUT(0x215D2F0E0);
}

void sub_215D2F0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D2F0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
}

void sub_215D2F118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D2F12C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D2F140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_215733368((uint64_t)va1);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D2F15C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_215D2F1B8(uint64_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  if (*a1 != v6)
  {
    char v8 = *(unsigned char *)(a2 + 23);
    if (v8 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    if (v8 >= 0) {
      std::string v10 = (unsigned __int8 *)a2;
    }
    else {
      std::string v10 = *(unsigned __int8 **)a2;
    }
    do
    {
      uint64_t v11 = *(unsigned __int8 *)(v7 + 23);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = *(unsigned __int8 *)(v7 + 23);
      }
      else {
        uint64_t v12 = *(void *)(v7 + 8);
      }
      if (v12 == v9)
      {
        if ((v11 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v7, v10, *(void *)(v7 + 8))) {
            return (char *)v7;
          }
        }
        else
        {
          if (!*(unsigned char *)(v7 + 23)) {
            return (char *)v7;
          }
          uint64_t v13 = 0;
          while (*(unsigned __int8 *)(v7 + v13) == v10[v13])
          {
            if (v11 == ++v13) {
              return (char *)v7;
            }
          }
        }
      }
      v7 += 40;
    }
    while (v7 != v6);
  }
  if (v6 >= a1[2])
  {
    long long v15 = sub_215D2F31C(a1, a2, a3);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_215738B0C((unsigned char *)v6, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v14 = *(_OWORD *)a2;
      *(void *)(v6 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v6 = v14;
    }
    sub_215D2F4F0(v6 + 24, a3);
    long long v15 = (char *)(v6 + 40);
    a1[1] = v6 + 40;
  }
  a1[1] = (uint64_t)v15;
  return v15 - 40;
}

void sub_215D2F2F4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_215D2F2FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

char *sub_215D2F31C(uint64_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    sub_215CEA45C();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v5) {
    unint64_t v5 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v8 = 0x666666666666666;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x666666666666666) {
      sub_215738AD8();
    }
    uint64_t v9 = operator new(40 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  std::string v10 = &v9[40 * v4];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_215738B0C(&v9[40 * v4], *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string v10 = *(_OWORD *)a2;
    *((void *)v10 + 2) = *(void *)(a2 + 16);
  }
  sub_215D2F4F0((uint64_t)&v9[40 * v4 + 24], a3);
  sub_215D2FB3C((uint64_t)(a1 + 2), a1[1], (long long *)a1[1], *a1, (long long *)*a1, (uint64_t)&v9[40 * v4], (uint64_t)&v9[40 * v4]);
  uint64_t v11 = (void ***)*a1;
  uint64_t v12 = (void ***)a1[1];
  *a1 = v13;
  a1[1] = (uint64_t)(v10 + 40);
  a1[2] = (uint64_t)&v9[40 * v8];
  while (v12 != v11)
  {
    sub_215CEB204(v12 - 1, *((unsigned __int8 *)v12 - 16));
    if (*((char *)v12 - 17) < 0) {
      operator delete(*(v12 - 5));
    }
    v12 -= 5;
  }
  if (v11) {
    operator delete(v11);
  }
  return v10 + 40;
}

void sub_215D2F4B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0)
  {
    operator delete(*(void **)v2);
    sub_215D2FAC8((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_215D2FAC8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215D2F4F0(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  *(unsigned char *)a1 = v3;
  *(void *)(a1 + 8) = 0;
  switch(v3)
  {
    case 1:
      long long v14 = (long long **)*((void *)a2 + 1);
      unint64_t v4 = operator new(0x18uLL);
      v4[1] = 0;
      void v4[2] = 0;
      void *v4 = 0;
      sub_215D2F6F0(v4, *v14, v14[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)v14[1] - (char *)*v14) >> 3));
      goto LABEL_13;
    case 2:
      long long v15 = (uint64_t *)*((void *)a2 + 1);
      unint64_t v4 = operator new(0x18uLL);
      v4[1] = 0;
      void v4[2] = 0;
      void *v4 = 0;
      sub_215D2F8BC(v4, *v15, v15[1], (v15[1] - *v15) >> 4);
      goto LABEL_13;
    case 3:
      unint64_t v5 = (long long *)*((void *)a2 + 1);
      unint64_t v6 = operator new(0x18uLL);
      unint64_t v4 = v6;
      if (*((char *)v5 + 23) < 0)
      {
        sub_215738B0C(v6, *(void **)v5, *((void *)v5 + 1));
      }
      else
      {
        long long v7 = *v5;
        *((void *)v6 + 2) = *((void *)v5 + 2);
        *unint64_t v6 = v7;
      }
      goto LABEL_13;
    case 4:
      unint64_t v4 = (void *)a2[8];
      goto LABEL_13;
    case 5:
    case 6:
    case 7:
      unint64_t v4 = (void *)*((void *)a2 + 1);
      goto LABEL_13;
    case 8:
      uint64_t v8 = *((void *)a2 + 1);
      unint64_t v4 = operator new(0x20uLL);
      v4[1] = 0;
      void v4[2] = 0;
      void *v4 = 0;
      std::string v10 = *(const void **)v8;
      uint64_t v9 = *(void *)(v8 + 8);
      size_t v11 = v9 - *(void *)v8;
      if (v9 != *(void *)v8)
      {
        if ((v11 & 0x8000000000000000) != 0) {
          sub_2157C3CEC();
        }
        uint64_t v12 = (char *)operator new(v9 - *(void *)v8);
        void *v4 = v12;
        uint64_t v13 = &v12[v11];
        void v4[2] = &v12[v11];
        memcpy(v12, v10, v11);
        v4[1] = v13;
      }
      *((_WORD *)v4 + 12) = *(_WORD *)(v8 + 24);
LABEL_13:
      *(void *)(a1 + 8) = v4;
      break;
    default:
      return a1;
  }
  return a1;
}

void sub_215D2F670(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_215D2F684(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_215D2F698(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_215D2F6AC(_Unwind_Exception *a1)
{
  int v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    operator delete(v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_215D2F6F0(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v5 = result;
    if (a4 >= 0x666666666666667) {
      sub_215CEA45C();
    }
    uint64_t result = operator new(40 * a4);
    *unint64_t v5 = result;
    v5[1] = result;
    v5[2] = &result[5 * a4];
    std::string v10 = result;
    if (a2 == a3)
    {
      uint64_t v8 = result;
    }
    else
    {
      uint64_t v8 = result;
      do
      {
        if (*((char *)a2 + 23) < 0)
        {
          sub_215738B0C(v8, *(void **)a2, *((void *)a2 + 1));
        }
        else
        {
          long long v9 = *a2;
          v8[2] = *((void *)a2 + 2);
          *(_OWORD *)uint64_t v8 = v9;
        }
        uint64_t result = (void *)sub_215D2F4F0(v8 + 3, (char *)a2 + 24);
        a2 = (long long *)((char *)a2 + 40);
        uint64_t v8 = v10 + 5;
        v10 += 5;
      }
      while (a2 != a3);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_215D2F800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_215D2F814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_215D2F84C((uint64_t)&a11);
  *(void *)(v11 + 8) = v12;
  sub_215CEB160(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_215D2F84C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      sub_215CEB204((void ***)(v3 - 8), *(unsigned __int8 *)(v3 - 16));
      if (*(char *)(v3 - 17) < 0) {
        operator delete(*(void **)(v3 - 40));
      }
      v3 -= 40;
    }
  }
  return a1;
}

void *sub_215D2F8BC(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v5 = result;
    if (a4 >> 60) {
      sub_215CEA45C();
    }
    uint64_t result = operator new(16 * a4);
    *unint64_t v5 = result;
    v5[1] = result;
    v5[2] = &result[2 * a4];
    for (uint64_t i = result; a2 != a3; i += 2)
    {
      sub_215D2F4F0(result, a2);
      a2 += 16;
      uint64_t result = i + 2;
    }
    v5[1] = result;
  }
  return result;
}

void sub_215D2F98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_215D2F9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_215D2FA60((uint64_t)&a11);
  *(void *)(v11 + 8) = v12;
  sub_215D2F9C0(&a9);
  _Unwind_Resume(a1);
}

void ***sub_215D2F9C0(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (void ***)**result;
    if (v3)
    {
      uint64_t v4 = (void ***)v2[1];
      unint64_t v5 = **result;
      if (v4 != v3)
      {
        unint64_t v6 = v4 - 1;
        do
        {
          long long v7 = v6 - 1;
          sub_215CEB204(v6, *((unsigned __int8 *)v6 - 8));
          v6 -= 2;
        }
        while (v7 != v3);
        unint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_215D2FA60(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void *****)(a1 + 16);
    uint64_t v3 = **(void *****)(a1 + 8);
    if (v2 != v3)
    {
      uint64_t v4 = v2 - 1;
      do
      {
        unint64_t v5 = v4 - 1;
        sub_215CEB204(v4, *((unsigned __int8 *)v4 - 8));
        v4 -= 2;
      }
      while (v5 != v3);
    }
  }
  return a1;
}

uint64_t sub_215D2FAC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    sub_215CEB204((void ***)(i - 8), *(unsigned __int8 *)(i - 16));
    if (*(char *)(i - 17) < 0) {
      operator delete(*(void **)(i - 40));
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_215D2FB3C(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v13 = a6;
  uint64_t v14 = a7;
  if (a3 != a5)
  {
    long long v9 = (void **)a3;
    do
    {
      std::string v10 = (long long *)(v9 - 5);
      if (*((char *)v9 - 17) < 0)
      {
        sub_215738B0C((unsigned char *)(v7 - 40), *(v9 - 5), (unint64_t)*(v9 - 4));
      }
      else
      {
        long long v11 = *v10;
        *(void *)(v7 - 24) = *(v9 - 3);
        *(_OWORD *)(v7 - 4std::__fs::filesystem::__rename(__from, __to, 0) = v11;
      }
      sub_215D2F4F0(v7 - 16, (unsigned __int8 *)v9 - 16);
      uint64_t v7 = v14 - 40;
      v14 -= 40;
      v9 -= 5;
    }
    while (v10 != a5);
    return v13;
  }
  return a6;
}

void sub_215D2FC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D2FC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 - 17) < 0) {
    operator delete(*v10);
  }
  sub_215D2FC3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_215D2FC3C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      sub_215CEB204((void ***)(v3 + 32), *(unsigned __int8 *)(v3 + 24));
      if (*(char *)(v3 + 23) < 0) {
        operator delete(*(void **)v3);
      }
      v3 += 40;
    }
  }
  return a1;
}

uint64_t sub_215D2FCAC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    unint64_t v5 = (char *)sub_215D2DC9C((char *)a1);
    sub_215732BF4(&v6, v5);
    sub_215AC8CC8("cannot use operator[] with a numeric argument with ", &v6, &v7);
    sub_215D2DB00(305, (uint64_t)&v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
  }
  return **(void **)(a1 + 8) + 16 * a2;
}

void sub_215D2FD64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void sub_215D2FDC4(uint64_t a1, const void *a2, uint64_t a3)
{
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  sub_215A2E08C(&v3, a2);
}

void sub_215D2FEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_215D2FEDC(char *a1, void *a2)
{
  int v3 = *a1;
  if (v3 == 5) {
    goto LABEL_4;
  }
  if (v3 != 7)
  {
    if (v3 != 6)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      std::string v6 = (char *)sub_215D2DC9C(a1);
      sub_215732BF4(&v7, v6);
      sub_215AC8CC8("type must be number, but is ", &v7, &v8);
      sub_215D2DB00(302, (uint64_t)&v8, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
    }
LABEL_4:
    *a2 = *((void *)a1 + 1);
    return result;
  }
  double result = *((double *)a1 + 1);
  *a2 = (unint64_t)result;
  return result;
}

void sub_215D2FFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if (v21)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

double sub_215D30030(char *a1, void *a2)
{
  int v3 = *a1;
  if (v3 == 5) {
    goto LABEL_4;
  }
  if (v3 != 7)
  {
    if (v3 != 6)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      std::string v6 = (char *)sub_215D2DC9C(a1);
      sub_215732BF4(&v7, v6);
      sub_215AC8CC8("type must be number, but is ", &v7, &v8);
      sub_215D2DB00(302, (uint64_t)&v8, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
    }
LABEL_4:
    *a2 = *((void *)a1 + 1);
    return result;
  }
  double result = *((double *)a1 + 1);
  *a2 = (uint64_t)result;
  return result;
}

void sub_215D30114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if (v21)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

double sub_215D30184(uint64_t *a1, double *a2)
{
  int v3 = *(unsigned __int8 *)a1;
  switch(v3)
  {
    case 5:
      double result = (double)a1[1];
      *a2 = result;
      break;
    case 7:
      double result = *((double *)a1 + 1);
      *a2 = result;
      break;
    case 6:
      double result = (double)(unint64_t)a1[1];
      *a2 = result;
      break;
    default:
      exception = __cxa_allocate_exception(0x20uLL);
      std::string v6 = (char *)sub_215D2DC9C((char *)a1);
      sub_215732BF4(&v7, v6);
      sub_215AC8CC8("type must be number, but is ", &v7, &v8);
      sub_215D2DB00(302, (uint64_t)&v8, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
  }
  return result;
}

void sub_215D30288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if (v21)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

char *sub_215D302F8(char *result, unsigned char *a2)
{
  uint64_t v2 = result;
  if (*result != 4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v4 = (char *)sub_215D2DC9C(v2);
    sub_215732BF4(&v5, v4);
    sub_215AC8CC8("type must be BOOLean, but is ", &v5, &v6);
    sub_215D2DB00(302, (uint64_t)&v6, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
  }
  *a2 = result[8];
  return result;
}

void sub_215D303AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void **sub_215D3040C(void **result, uint64_t a2)
{
  uint64_t v2 = (char *)result;
  if (*(unsigned char *)result != 3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v12 = (char *)sub_215D2DC9C(v2);
    sub_215732BF4(&v13, v12);
    sub_215AC8CC8("type must be string, but is ", &v13, &v14);
    sub_215D2DB00(302, (uint64_t)&v14, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
  }
  int v3 = (unsigned __int8 *)result[1];
  if (v3 != (unsigned __int8 *)a2)
  {
    unsigned __int8 v4 = v3[23];
    if (*(char *)(a2 + 23) < 0)
    {
      if ((v4 & 0x80u) == 0) {
        std::string v6 = result[1];
      }
      else {
        std::string v6 = *(void **)v3;
      }
      if ((v4 & 0x80u) == 0) {
        size_t v7 = v3[23];
      }
      else {
        size_t v7 = *((void *)v3 + 1);
      }
      return sub_21573ABD0((void **)a2, v6, v7);
    }
    else if ((v3[23] & 0x80) != 0)
    {
      size_t v8 = *((void *)v3 + 1);
      std::string v10 = *(void **)v3;
      return (void **)sub_21573AB08((void *)a2, v10, v8);
    }
    else
    {
      long long v5 = *(_OWORD *)v3;
      *(void *)(a2 + 16) = *((void *)v3 + 2);
      *(_OWORD *)a2 = v5;
    }
  }
  return result;
}

void sub_215D30554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if (v21)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_215D305C4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    long long v5 = (char *)sub_215D2DC9C((char *)a1);
    sub_215732BF4(&v6, v5);
    sub_215AC8CC8("cannot use operator[] with a numeric argument with ", &v6, &v7);
    sub_215D2DB00(305, (uint64_t)&v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
  }
  return **(void **)(a1 + 8) + 16 * a2;
}

void sub_215D3067C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

double sub_215D306DC(char *a1, void *a2)
{
  int v3 = *a1;
  if (v3 == 5) {
    goto LABEL_4;
  }
  if (v3 != 7)
  {
    if (v3 != 6)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      std::string v6 = (char *)sub_215D2DC9C(a1);
      sub_215732BF4(&v7, v6);
      sub_215AC8CC8("type must be number, but is ", &v7, &v8);
      sub_215D2DB00(302, (uint64_t)&v8, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
    }
LABEL_4:
    *a2 = *((void *)a1 + 1);
    return result;
  }
  double result = *((double *)a1 + 1);
  *a2 = (unint64_t)result;
  return result;
}

void sub_215D307C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if (v21)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

double sub_215D30830(char *a1, void *a2)
{
  int v3 = *a1;
  if (v3 == 5) {
    goto LABEL_4;
  }
  if (v3 != 7)
  {
    if (v3 != 6)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      std::string v6 = (char *)sub_215D2DC9C(a1);
      sub_215732BF4(&v7, v6);
      sub_215AC8CC8("type must be number, but is ", &v7, &v8);
      sub_215D2DB00(302, (uint64_t)&v8, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
    }
LABEL_4:
    *a2 = *((void *)a1 + 1);
    return result;
  }
  double result = *((double *)a1 + 1);
  *a2 = (uint64_t)result;
  return result;
}

void sub_215D30914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if (v21)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

double sub_215D30984(uint64_t *a1, double *a2)
{
  int v3 = *(unsigned __int8 *)a1;
  switch(v3)
  {
    case 5:
      double result = (double)a1[1];
      *a2 = result;
      break;
    case 7:
      double result = *((double *)a1 + 1);
      *a2 = result;
      break;
    case 6:
      double result = (double)(unint64_t)a1[1];
      *a2 = result;
      break;
    default:
      exception = __cxa_allocate_exception(0x20uLL);
      std::string v6 = (char *)sub_215D2DC9C((char *)a1);
      sub_215732BF4(&v7, v6);
      sub_215AC8CC8("type must be number, but is ", &v7, &v8);
      sub_215D2DB00(302, (uint64_t)&v8, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
  }
  return result;
}

void sub_215D30A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if (v21)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

char *sub_215D30AF8(char *result, unsigned char *a2)
{
  uint64_t v2 = result;
  if (*result != 4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    unsigned __int8 v4 = (char *)sub_215D2DC9C(v2);
    sub_215732BF4(&v5, v4);
    sub_215AC8CC8("type must be BOOLean, but is ", &v5, &v6);
    sub_215D2DB00(302, (uint64_t)&v6, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
  }
  *a2 = result[8];
  return result;
}

void sub_215D30BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void **sub_215D30C0C(void **result, uint64_t a2)
{
  uint64_t v2 = (char *)result;
  if (*(unsigned char *)result != 3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v12 = (char *)sub_215D2DC9C(v2);
    sub_215732BF4(&v13, v12);
    sub_215AC8CC8("type must be string, but is ", &v13, &v14);
    sub_215D2DB00(302, (uint64_t)&v14, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
  }
  int v3 = (unsigned __int8 *)result[1];
  if (v3 != (unsigned __int8 *)a2)
  {
    unsigned __int8 v4 = v3[23];
    if (*(char *)(a2 + 23) < 0)
    {
      if ((v4 & 0x80u) == 0) {
        std::string v6 = result[1];
      }
      else {
        std::string v6 = *(void **)v3;
      }
      if ((v4 & 0x80u) == 0) {
        size_t v7 = v3[23];
      }
      else {
        size_t v7 = *((void *)v3 + 1);
      }
      return sub_21573ABD0((void **)a2, v6, v7);
    }
    else if ((v3[23] & 0x80) != 0)
    {
      size_t v8 = *((void *)v3 + 1);
      std::string v10 = *(void **)v3;
      return (void **)sub_21573AB08((void *)a2, v10, v8);
    }
    else
    {
      long long v5 = *(_OWORD *)v3;
      *(void *)(a2 + 16) = *((void *)v3 + 2);
      *(_OWORD *)a2 = v5;
    }
  }
  return result;
}

void sub_215D30D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if (v21)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_215D30DC4(uint64_t a1)
{
  if (**(unsigned char **)a1 != 1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_215732BF4(v3, "cannot use key() for non-object iterators");
    sub_215D3113C(207, (uint64_t)v3, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C684708, (void (*)(void *))sub_215D312D0);
  }
  return *(void *)(a1 + 8) + 32;
}

void sub_215D30E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_215D30E98(uint64_t a1, void *key, uint64_t a3)
{
  CFDictionaryRef v7 = *(CFDictionaryRef *)a1;
  std::string v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6
    && (atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7) {
      return;
    }
  }
  else if (!v7)
  {
    return;
  }
  if (!CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key)) {
    sub_215A345F8((uint64_t)&value, a3);
  }
}

void sub_215D3101C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_215D31030(unsigned __int8 **a1, unsigned __int8 **a2)
{
  if (*a1 != *a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_215732BF4(v7, "cannot compare iterators of different containers");
    sub_215D3113C(212, (uint64_t)v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C684708, (void (*)(void *))sub_215D312D0);
  }
  int v2 = **a1;
  if (v2 == 2)
  {
    int v3 = a1[2];
    unsigned __int8 v4 = a2[2];
  }
  else if (v2 == 1)
  {
    int v3 = a1[1];
    unsigned __int8 v4 = a2[1];
  }
  else
  {
    int v3 = a1[3];
    unsigned __int8 v4 = a2[3];
  }
  return v3 == v4;
}

void sub_215D31100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if (v16)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

void sub_215D3113C(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v13 = 16;
  strcpy(__p, "invalid_iterator");
  sub_215D2E030((const void **)__p, a1, &v14);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    CFDictionaryRef v7 = (const std::string::value_type *)a2;
  }
  else {
    CFDictionaryRef v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  uint64_t v9 = std::string::append(&v14, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)__p);
LABEL_9:
  if (v16 >= 0) {
    long long v11 = v15;
  }
  else {
    long long v11 = (void **)v15[0];
  }
  *(void *)a3 = &unk_26C684698;
  *(_DWORD *)(a3 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a3 + 16), (const char *)v11);
  *(void *)a3 = &unk_26C684730;
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_215D31280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::exception::~exception(v26);
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_215D312D0(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26C684698;
  std::runtime_error::~runtime_error(a1 + 1);

  std::exception::~exception(a1);
}

void sub_215D31324(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26C684698;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);

  JUMPOUT(0x2166C4D20);
}

unsigned char *sub_215D3138C(uint64_t a1)
{
  double result = *(unsigned char **)a1;
  int v3 = *result;
  if (v3 == 1) {
    return (unsigned char *)(*(void *)(a1 + 8) + 56);
  }
  if (v3 == 2) {
    return *(unsigned char **)(a1 + 16);
  }
  if (!*result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_215732BF4(v6, "cannot get value");
    sub_215D3113C(214, (uint64_t)v6, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C684708, (void (*)(void *))sub_215D312D0);
  }
  if (*(void *)(a1 + 24))
  {
    unsigned __int8 v4 = __cxa_allocate_exception(0x20uLL);
    sub_215732BF4(v6, "cannot get value");
    sub_215D3113C(214, (uint64_t)v6, (uint64_t)v4);
    __cxa_throw(v4, (struct type_info *)&unk_26C684708, (void (*)(void *))sub_215D312D0);
  }
  return result;
}

void sub_215D314C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215D31508(uint64_t a1)
{
  if (**(unsigned char **)a1 != 1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_215732BF4(v3, "cannot use key() for non-object iterators");
    sub_215D3113C(207, (uint64_t)v3, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C684708, (void (*)(void *))sub_215D312D0);
  }
  return *(void *)(a1 + 8);
}

void sub_215D315A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

BOOL sub_215D315D8(unsigned __int8 **a1, unsigned __int8 **a2)
{
  if (*a1 != *a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_215732BF4(v7, "cannot compare iterators of different containers");
    sub_215D3113C(212, (uint64_t)v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C684708, (void (*)(void *))sub_215D312D0);
  }
  int v2 = **a1;
  if (v2 == 2)
  {
    int v3 = a1[2];
    unsigned __int8 v4 = a2[2];
  }
  else if (v2 == 1)
  {
    int v3 = a1[1];
    unsigned __int8 v4 = a2[1];
  }
  else
  {
    int v3 = a1[3];
    unsigned __int8 v4 = a2[3];
  }
  return v3 == v4;
}

void sub_215D316A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if (v16)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

unsigned char *sub_215D316E4(uint64_t a1)
{
  double result = *(unsigned char **)a1;
  int v3 = *result;
  if (v3 == 1) {
    return (unsigned char *)(*(void *)(a1 + 8) + 24);
  }
  if (v3 == 2) {
    return *(unsigned char **)(a1 + 16);
  }
  if (!*result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_215732BF4(v6, "cannot get value");
    sub_215D3113C(214, (uint64_t)v6, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C684708, (void (*)(void *))sub_215D312D0);
  }
  if (*(void *)(a1 + 24))
  {
    unsigned __int8 v4 = __cxa_allocate_exception(0x20uLL);
    sub_215732BF4(v6, "cannot get value");
    sub_215D3113C(214, (uint64_t)v6, (uint64_t)v4);
    __cxa_throw(v4, (struct type_info *)&unk_26C684708, (void (*)(void *))sub_215D312D0);
  }
  return result;
}

void sub_215D3181C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D31860(uint64_t a1, uint64_t a2)
{
  sub_21575FC70((uint64_t)&v2, a2);
}

void sub_215D318F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215D31948(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  uint64_t v8 = a2;
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a3)
  {
    uint64_t v9 = (unsigned char **)(a2 + 16);
    uint64_t v10 = 32 * a3;
    while (1)
    {
      long long v11 = *v9;
      if (**v9 != 2
        || *(void *)(*((void *)v11 + 1) + 8) - **((void **)v11 + 1) != 32
        || *(unsigned char *)sub_215D2FCAC((uint64_t)v11, 0) != 3)
      {
        break;
      }
      v9 += 4;
      v10 -= 32;
      if (!v10) {
        goto LABEL_7;
      }
    }
    int v12 = 0;
    if ((a4 & 1) == 0)
    {
LABEL_47:
      if (a5 == 2) {
        int v38 = 0;
      }
      else {
        int v38 = v12;
      }
      if (a5 != 1) {
        LOBYTE(v12) = 1;
      }
      if ((v12 & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        sub_215732BF4(&v53, "cannot create object from initializer list");
        sub_215D2DB00(301, (uint64_t)&v53, (uint64_t)exception);
        __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
      }
      uint64_t v13 = v8 + 32 * a3;
      if (!v38) {
        goto LABEL_54;
      }
      goto LABEL_9;
    }
  }
  else
  {
LABEL_7:
    int v12 = 1;
    if ((a4 & 1) == 0) {
      goto LABEL_47;
    }
  }
  uint64_t v13 = v8 + 32 * a3;
  if (v12)
  {
LABEL_9:
    *(unsigned char *)a1 = 1;
    std::string v14 = operator new(0x18uLL);
    v14[2] = 0;
    v14[1] = 0;
    void *v14 = v14 + 1;
    *(void *)(a1 + 8) = v14;
    if (!a3) {
      return a1;
    }
    uint64_t v51 = v13;
LABEL_13:
    uint64_t v15 = *(void *)(v8 + 16);
    if (*(unsigned char *)(v8 + 24))
    {
      LOBYTE(v53) = *(unsigned char *)v15;
      uint64_t v16 = *(void *)(v15 + 8);
      v54[0] = v16;
      *(unsigned char *)uint64_t v15 = 0;
      *(void *)(v15 + 8) = 0;
    }
    else
    {
      sub_215D31DE4((uint64_t)&v53, (unsigned __int8 *)v15);
      uint64_t v16 = v54[0];
    }
    size_t v17 = *(uint64_t ***)(a1 + 8);
    uint64_t v18 = *(void *)v16;
    long long v19 = *(const void ***)(*(void *)v16 + 8);
    int v21 = (uint64_t *)(v17 + 1);
    int v20 = v17[1];
    if (!v20)
    {
      long long v25 = (uint64_t *)(v17 + 1);
      goto LABEL_44;
    }
    int v22 = *((char *)v19 + 23);
    if (v22 >= 0) {
      std::string v23 = v19;
    }
    else {
      std::string v23 = *v19;
    }
    if (v22 >= 0) {
      size_t v24 = *((unsigned __int8 *)v19 + 23);
    }
    else {
      size_t v24 = (size_t)v19[1];
    }
    while (1)
    {
      long long v25 = v20;
      double v28 = (const void *)v20[4];
      uint64_t v26 = v20 + 4;
      unsigned int v27 = v28;
      int v29 = *((char *)v26 + 23);
      if (v29 >= 0) {
        uint64_t v30 = v26;
      }
      else {
        uint64_t v30 = v27;
      }
      if (v29 >= 0) {
        size_t v31 = *((unsigned __int8 *)v26 + 23);
      }
      else {
        size_t v31 = v26[1];
      }
      if (v31 >= v24) {
        size_t v32 = v24;
      }
      else {
        size_t v32 = v31;
      }
      int v33 = memcmp(v23, v30, v32);
      if (v33)
      {
        if (v33 < 0) {
          goto LABEL_23;
        }
LABEL_37:
        int v34 = memcmp(v30, v23, v32);
        if (v34)
        {
          if ((v34 & 0x80000000) == 0) {
            goto LABEL_12;
          }
        }
        else if (v31 >= v24)
        {
          goto LABEL_12;
        }
        int v20 = (uint64_t *)v25[1];
        if (!v20)
        {
          int v21 = v25 + 1;
LABEL_44:
          uint64_t v35 = operator new(0x48uLL);
          long long v36 = *(_OWORD *)v19;
          v35[6] = v19[2];
          *((_OWORD *)v35 + 2) = v36;
          v19[1] = 0;
          v19[2] = 0;
          *long long v19 = 0;
          *((unsigned char *)v35 + 56) = *(unsigned char *)(v18 + 16);
          v35[8] = *(void *)(v18 + 24);
          *(unsigned char *)(v18 + 16) = 0;
          *(void *)(v18 + 24) = 0;
          void *v35 = 0;
          v35[1] = 0;
          v35[2] = v25;
          *int v21 = (uint64_t)v35;
          unint64_t v37 = (uint64_t *)**v17;
          if (v37)
          {
            uint64_t *v17 = v37;
            uint64_t v35 = (void *)*v21;
          }
          sub_21573B048(v17[1], v35);
          v17[2] = (uint64_t *)((char *)v17[2] + 1);
LABEL_12:
          sub_215CE9D14(v54, v53);
          v8 += 32;
          if (v8 == v51) {
            return a1;
          }
          goto LABEL_13;
        }
      }
      else
      {
        if (v24 >= v31) {
          goto LABEL_37;
        }
LABEL_23:
        int v20 = (uint64_t *)*v25;
        int v21 = v25;
        if (!*v25) {
          goto LABEL_44;
        }
      }
    }
  }
LABEL_54:
  *(unsigned char *)a1 = 2;
  uint64_t v39 = operator new(0x18uLL);
  v39[1] = 0;
  v39[2] = 0;
  *uint64_t v39 = 0;
  v54[2] = (uint64_t)v39;
  char v55 = 0;
  uint64_t v40 = v13 - v8;
  if (v13 != v8)
  {
    if (v40 < 0) {
      sub_215CEA45C();
    }
    uint64_t v41 = (char *)operator new((unint64_t)v40 >> 1);
    *uint64_t v39 = v41;
    v39[1] = v41;
    v39[2] = &v41[16 * (v40 >> 5)];
    if (a3)
    {
      uint64_t v42 = 0;
      uint64_t v43 = 32 * a3;
      BOOL v44 = (unsigned char *)(v8 + 24);
      do
      {
        uint64_t v48 = *((void *)v44 - 1);
        if (*v44)
        {
          unsigned __int8 v45 = *(unsigned char *)v48;
          uint64_t v46 = *(void *)(v48 + 8);
          *(unsigned char *)uint64_t v48 = 0;
          *(void *)(v48 + 8) = 0;
        }
        else
        {
          sub_215D31DE4((uint64_t)&v53, (unsigned __int8 *)v48);
          unsigned __int8 v45 = v53;
          uint64_t v46 = v54[0];
        }
        uint64_t v47 = (unsigned __int8 *)&v41[v42];
        unsigned __int8 *v47 = v45;
        *((void *)v47 + 1) = v46;
        LOBYTE(v53) = 0;
        v54[0] = 0;
        sub_215CE9D14(v54, 0);
        v42 += 16;
        v44 += 32;
        v43 -= 32;
      }
      while (v43);
      v41 += v42;
    }
    v39[1] = v41;
  }
  *(void *)(a1 + 8) = v39;
  return a1;
}

void sub_215D31D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215D32268((void ***)va);
  operator delete(v7);
  _Unwind_Resume(a1);
}

void sub_215D31D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  for (; v9; v9 -= 16)
    sub_215CE9D14((uint64_t *)(v8 + v9 - 8), *(unsigned __int8 *)(v8 + v9 - 16));
  v7[1] = v8;
  sub_215D32268((void ***)va);
  operator delete(v7);
  _Unwind_Resume(a1);
}

void sub_215D31D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, unsigned __int8 a12)
{
}

void sub_215D31DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t sub_215D31DE4(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  *(unsigned char *)a1 = v3;
  *(void *)(a1 + 8) = 0;
  switch(v3)
  {
    case 1:
      std::string v14 = (const void ***)*((void *)a2 + 1);
      unsigned __int8 v4 = operator new(0x18uLL);
      v4[1] = 0;
      void v4[2] = 0;
      void *v4 = v4 + 1;
      size_t v17 = *v14;
      uint64_t v15 = v14 + 1;
      uint64_t v16 = v17;
      if (v17 != (const void **)v15)
      {
        do
        {
          sub_215D32038((uint64_t **)v4, v4 + 1, v16 + 4, (uint64_t)(v16 + 4));
          int v18 = (const void **)v16[1];
          if (v18)
          {
            do
            {
              long long v19 = (const void ***)v18;
              int v18 = (const void **)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              long long v19 = (const void ***)v16[2];
              BOOL v20 = *v19 == v16;
              uint64_t v16 = (const void **)v19;
            }
            while (!v20);
          }
          uint64_t v16 = (const void **)v19;
        }
        while (v19 != v15);
      }
      goto LABEL_21;
    case 2:
      int v21 = (uint64_t *)*((void *)a2 + 1);
      unsigned __int8 v4 = operator new(0x18uLL);
      v4[1] = 0;
      void v4[2] = 0;
      void *v4 = 0;
      sub_215D32164(v4, *v21, v21[1], (v21[1] - *v21) >> 4);
      goto LABEL_21;
    case 3:
      long long v5 = (long long *)*((void *)a2 + 1);
      int v6 = operator new(0x18uLL);
      unsigned __int8 v4 = v6;
      if (*((char *)v5 + 23) < 0)
      {
        sub_215738B0C(v6, *(void **)v5, *((void *)v5 + 1));
      }
      else
      {
        long long v7 = *v5;
        *((void *)v6 + 2) = *((void *)v5 + 2);
        *int v6 = v7;
      }
      goto LABEL_21;
    case 4:
      unsigned __int8 v4 = (void *)a2[8];
      goto LABEL_21;
    case 5:
    case 6:
    case 7:
      unsigned __int8 v4 = (void *)*((void *)a2 + 1);
      goto LABEL_21;
    case 8:
      uint64_t v8 = *((void *)a2 + 1);
      unsigned __int8 v4 = operator new(0x20uLL);
      v4[1] = 0;
      void v4[2] = 0;
      void *v4 = 0;
      uint64_t v10 = *(const void **)v8;
      uint64_t v9 = *(void *)(v8 + 8);
      size_t v11 = v9 - *(void *)v8;
      if (v9 != *(void *)v8)
      {
        if ((v11 & 0x8000000000000000) != 0) {
          sub_2157C3CEC();
        }
        int v12 = (char *)operator new(v9 - *(void *)v8);
        void *v4 = v12;
        uint64_t v13 = &v12[v11];
        void v4[2] = &v12[v11];
        memcpy(v12, v10, v11);
        v4[1] = v13;
      }
      *((_WORD *)v4 + 12) = *(_WORD *)(v8 + 24);
LABEL_21:
      *(void *)(a1 + 8) = v4;
      break;
    default:
      return a1;
  }
  return a1;
}

void sub_215D31FAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_215D31FC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_215D31FD4(_Unwind_Exception *a1)
{
  int v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    operator delete(v3);
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_215D32038(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  int v6 = sub_2157B76C4(a1, a2, &v15, &v14, a3);
  long long v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    uint64_t v9 = (uint64_t *)operator new(0x48uLL);
    long long v7 = v9;
    if (*(char *)(a4 + 23) < 0)
    {
      sub_215738B0C((unsigned char *)v9 + 32, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *((_OWORD *)v9 + 2) = *(_OWORD *)a4;
      v9[6] = *(void *)(a4 + 16);
    }
    sub_215D31DE4(v7 + 7, a4 + 24);
    uint64_t v10 = v15;
    uint64_t *v7 = 0;
    v7[1] = 0;
    void v7[2] = (uint64_t)v10;
    *uint64_t v8 = (uint64_t)v7;
    size_t v11 = (uint64_t *)**a1;
    int v12 = v7;
    if (v11)
    {
      *a1 = v11;
      int v12 = (uint64_t *)*v8;
    }
    sub_21573B048(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_215D3212C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215D2DEAC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215D32140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v3);
  }
  sub_215D2DEAC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_215D32164(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = result;
    if (a4 >> 60) {
      sub_215CEA45C();
    }
    double result = operator new(16 * a4);
    *long long v5 = result;
    v5[1] = result;
    v5[2] = &result[2 * a4];
    for (uint64_t i = result; a2 != a3; i += 2)
    {
      sub_215D31DE4(result, a2);
      a2 += 16;
      double result = i + 2;
    }
    v5[1] = result;
  }
  return result;
}

void sub_215D32234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_215D32248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_215D32308((uint64_t)&a11);
  *(void *)(v11 + 8) = v12;
  sub_215D32268(&a9);
  _Unwind_Resume(a1);
}

void ***sub_215D32268(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    int v3 = (uint64_t *)**result;
    if (v3)
    {
      unsigned __int8 v4 = (uint64_t *)v2[1];
      long long v5 = **result;
      if (v4 != v3)
      {
        int v6 = v4 - 1;
        do
        {
          long long v7 = v6 - 1;
          sub_215CE9D14(v6, *((unsigned __int8 *)v6 - 8));
          v6 -= 2;
        }
        while (v7 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_215D32308(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(uint64_t ***)(a1 + 16);
    int v3 = **(uint64_t ***)(a1 + 8);
    if (v2 != v3)
    {
      unsigned __int8 v4 = v2 - 1;
      do
      {
        long long v5 = v4 - 1;
        sub_215CE9D14(v4, *((unsigned __int8 *)v4 - 8));
        v4 -= 2;
      }
      while (v5 != v3);
    }
  }
  return a1;
}

uint64_t sub_215D32370(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    int v5 = *(unsigned __int8 *)(i - 16);
    uint64_t v4 = i - 16;
    *(void *)(a1 + 16) = v4;
    sub_215CEB204((void ***)(v4 + 8), v5);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_215D323C8(uint64_t a1, uint64_t a2)
{
  sub_21575FC70((uint64_t)&v2, a2);
}

void sub_215D3245C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215D324B0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a3)
  {
    uint64_t v10 = (unsigned char **)(a2 + 16);
    uint64_t v11 = 32 * a3;
    while (1)
    {
      uint64_t v12 = *v10;
      if (**v10 != 2
        || *(void *)(*((void *)v12 + 1) + 8) - **((void **)v12 + 1) != 32
        || *(unsigned char *)sub_215D305C4((uint64_t)v12, 0) != 3)
      {
        break;
      }
      v10 += 4;
      v11 -= 32;
      if (!v11) {
        goto LABEL_7;
      }
    }
    int v13 = 0;
    if ((a4 & 1) == 0)
    {
LABEL_17:
      if (a5 == 2) {
        int v19 = 0;
      }
      else {
        int v19 = v13;
      }
      if (a5 != 1) {
        LOBYTE(v13) = 1;
      }
      if ((v13 & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        sub_215732BF4(&v32, "cannot create object from initializer list");
        sub_215D2DB00(301, (uint64_t)&v32, (uint64_t)exception);
        __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
      }
      if (!v19) {
        goto LABEL_24;
      }
LABEL_9:
      *(unsigned char *)a1 = 1;
      std::string v14 = operator new(0x18uLL);
      v14[1] = 0;
      v14[2] = 0;
      void *v14 = 0;
      *(void *)(a1 + 8) = v14;
      if (a3)
      {
        uint64_t v15 = 32 * a3;
        uint64_t v16 = (unsigned char *)(a2 + 24);
        do
        {
          uint64_t v17 = *((void *)v16 - 1);
          if (*v16)
          {
            LOBYTE(v32) = *(unsigned char *)v17;
            int v18 = *(void ***)(v17 + 8);
            v33[0] = v18;
            *(unsigned char *)uint64_t v17 = 0;
            *(void *)(v17 + 8) = 0;
          }
          else
          {
            sub_215D2F4F0((uint64_t)&v32, (unsigned __int8 *)v17);
            int v18 = v33[0];
          }
          sub_215D2F1B8(*(uint64_t **)(a1 + 8), *((void *)*v18 + 1), (unsigned __int8 *)*v18 + 16);
          sub_215CEB204(v33, v32);
          v16 += 32;
          v15 -= 32;
        }
        while (v15);
      }
      return a1;
    }
  }
  else
  {
LABEL_7:
    int v13 = 1;
    if ((a4 & 1) == 0) {
      goto LABEL_17;
    }
  }
  if (v13) {
    goto LABEL_9;
  }
LABEL_24:
  *(unsigned char *)a1 = 2;
  BOOL v20 = (void **)operator new(0x18uLL);
  v20[1] = 0;
  void v20[2] = 0;
  *BOOL v20 = 0;
  v33[2] = v20;
  char v34 = 0;
  uint64_t v21 = 32 * a3;
  if (a2 + 32 * a3 != a2)
  {
    if (v21 < 0) {
      sub_215CEA45C();
    }
    int v22 = (char *)operator new((unint64_t)v21 >> 1);
    *BOOL v20 = v22;
    v20[1] = v22;
    void v20[2] = &v22[16 * (v21 >> 5)];
    if (a3)
    {
      uint64_t v23 = 0;
      uint64_t v24 = 32 * a3;
      long long v25 = (unsigned char *)(a2 + 24);
      do
      {
        uint64_t v29 = *((void *)v25 - 1);
        if (*v25)
        {
          unsigned __int8 v26 = *(unsigned char *)v29;
          unsigned int v27 = *(void ***)(v29 + 8);
          *(unsigned char *)uint64_t v29 = 0;
          *(void *)(v29 + 8) = 0;
        }
        else
        {
          sub_215D2F4F0((uint64_t)&v32, (unsigned __int8 *)v29);
          unsigned __int8 v26 = v32;
          unsigned int v27 = v33[0];
        }
        double v28 = (unsigned __int8 *)&v22[v23];
        *double v28 = v26;
        *((void *)v28 + 1) = v27;
        LOBYTE(v32) = 0;
        v33[0] = 0;
        sub_215CEB204(v33, 0);
        v23 += 16;
        v25 += 32;
        v24 -= 32;
      }
      while (v24);
      v22 += v23;
    }
    v20[1] = v22;
  }
  *(void *)(a1 + 8) = v20;
  return a1;
}

void sub_215D3275C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215D2F9C0((void ***)va);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_215D32778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  for (; v7; v7 -= 16)
    sub_215CEB204((void ***)(v6 + v7 - 8), *(unsigned __int8 *)(v6 + v7 - 16));
  v5[1] = v6;
  sub_215D2F9C0((void ***)va);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_215D327B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CEB204(v10, a10);
  _Unwind_Resume(a1);
}

void sub_215D327CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t sub_215D32804(uint64_t *a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *a4)
{
  uint64_t v4 = a2;
  if (!a3) {
    return (uint64_t)v4;
  }
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[1];
  if (a3 <= (uint64_t)(v8 - v9) >> 4)
  {
    unint64_t v15 = (uint64_t)(v9 - (void)a2) >> 4;
    uint64_t v16 = 16 * a3;
    unint64_t v17 = a1[1];
    unint64_t v18 = a3;
    if (a3 <= v15)
    {
LABEL_17:
      uint64_t v21 = &v4[v16];
      unint64_t v22 = v17 - v16;
      uint64_t v23 = v17;
      if (v17 - v16 < v9)
      {
        uint64_t v23 = v17;
        do
        {
          *(unsigned char *)uint64_t v23 = *(unsigned char *)v22;
          *(void *)(v23 + 8) = *(void *)(v22 + 8);
          *(unsigned char *)unint64_t v22 = 0;
          *(void *)(v22 + 8) = 0;
          v23 += 16;
          v22 += 16;
        }
        while (v22 < v9);
      }
      a1[1] = v23;
      if ((unsigned __int8 *)v17 != v21)
      {
        uint64_t v24 = (void *)(v17 - 8);
        uint64_t v25 = 16 * ((uint64_t)(v17 - (void)v21) >> 4);
        do
        {
          unsigned __int8 v26 = &v4[v25];
          unsigned __int8 v27 = v4[v25 - 16];
          uint64_t v28 = *(void *)&v4[v25 - 8];
          *(v26 - 16) = 0;
          *((void *)v26 - 1) = 0;
          int v29 = *((unsigned __int8 *)v24 - 8);
          *((unsigned char *)v24 - 8) = v27;
          LOBYTE(v49) = v29;
          uint64_t v30 = *v24;
          *uint64_t v24 = v28;
          v24 -= 2;
          v50[0] = v30;
          sub_215CE9D14(v50, v29);
          v25 -= 16;
        }
        while (v25);
      }
      if (v4 <= a4)
      {
        if (a1[1] <= (unint64_t)a4) {
          unint64_t v31 = 0;
        }
        else {
          unint64_t v31 = a3;
        }
        a4 += 16 * v31;
      }
      uint64_t v32 = v4;
      do
      {
        sub_215D31DE4((uint64_t)&v49, a4);
        int v33 = *v32;
        unsigned __int8 *v32 = v49;
        LOBYTE(v49) = v33;
        uint64_t v34 = *((void *)v32 + 1);
        *((void *)v32 + 1) = v50[0];
        v50[0] = v34;
        sub_215CE9D14(v50, v33);
        v32 += 16;
        --v18;
      }
      while (v18);
      return (uint64_t)v4;
    }
    uint64_t v19 = 0;
    unint64_t v17 = v9 + 16 * (a3 - v15);
    uint64_t v48 = (uint64_t)(v9 - (void)a2) >> 4;
    unint64_t v20 = v16 - 16 * v15;
    do
    {
      sub_215D31DE4(v9 + v19, a4);
      v19 += 16;
    }
    while (v20 != v19);
    a1[1] = v17;
    if ((unsigned __int8 *)v9 != v4)
    {
      unint64_t v18 = v48;
      goto LABEL_17;
    }
    return (uint64_t)v4;
  }
  uint64_t v10 = (unsigned char *)*a1;
  unint64_t v11 = a3 + ((uint64_t)(v9 - *a1) >> 4);
  if (v11 >> 60) {
    sub_215CEA45C();
  }
  uint64_t v12 = v8 - (void)v10;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  unint64_t v52 = a1 + 2;
  if (v13)
  {
    if (v13 >> 60) {
      sub_215738AD8();
    }
    std::string v14 = (char *)operator new(16 * v13);
  }
  else
  {
    std::string v14 = 0;
  }
  uint64_t v36 = (uint64_t)&v14[16 * ((v4 - v10) >> 4)];
  char v49 = v14;
  v50[0] = v36;
  v50[1] = v36;
  uint64_t v51 = &v14[16 * v13];
  uint64_t v37 = 16 * a3;
  uint64_t v38 = v36 + v37;
  do
  {
    sub_215D31DE4(v36, a4);
    v36 += 16;
    v37 -= 16;
  }
  while (v37);
  uint64_t v35 = v50[0];
  uint64_t v39 = *a1;
  uint64_t v40 = v50[0];
  if ((unsigned __int8 *)*a1 != v4)
  {
    uint64_t v41 = v4;
    uint64_t v40 = v50[0];
    do
    {
      char v42 = *(v41 - 16);
      v41 -= 16;
      *(unsigned char *)(v40 - 16) = v42;
      v40 -= 16;
      *(void *)(v40 + 8) = *((void *)v41 + 1);
      *uint64_t v41 = 0;
      *((void *)v41 + 1) = 0;
    }
    while (v41 != (unsigned __int8 *)v39);
  }
  v50[0] = v40;
  uint64_t v43 = (unsigned __int8 *)a1[1];
  if (v43 != v4)
  {
    do
    {
      *(unsigned char *)uint64_t v38 = *v4;
      *(void *)(v38 + 8) = *((void *)v4 + 1);
      unsigned __int8 *v4 = 0;
      *((void *)v4 + 1) = 0;
      v38 += 16;
      v4 += 16;
    }
    while (v4 != v43);
    uint64_t v40 = v50[0];
    uint64_t v4 = (unsigned __int8 *)a1[1];
  }
  BOOL v44 = (uint64_t *)*a1;
  *a1 = v40;
  a1[1] = v38;
  a1[2] = (uint64_t)v51;
  if (v4 != (unsigned __int8 *)v44)
  {
    unsigned __int8 v45 = (uint64_t *)(v4 - 8);
    do
    {
      uint64_t v46 = v45 - 1;
      sub_215CE9D14(v45, *((unsigned __int8 *)v45 - 8));
      v45 -= 2;
    }
    while (v46 != v44);
  }
  if (v44) {
    operator delete(v44);
  }
  return v35;
}

void sub_215D32B34(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_215D32B3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215D2CD18((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_215D32B54(void ***a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *a4)
{
  uint64_t v4 = a2;
  if (!a3) {
    return (void **)v4;
  }
  uint64_t v8 = a1[2];
  unint64_t v9 = (unint64_t)a1[1];
  if (a3 <= (uint64_t)((uint64_t)v8 - v9) >> 4)
  {
    unint64_t v15 = (uint64_t)(v9 - (void)a2) >> 4;
    uint64_t v16 = 16 * a3;
    unint64_t v17 = a1[1];
    unint64_t v18 = a3;
    if (a3 <= v15)
    {
LABEL_17:
      uint64_t v21 = &v4[v16];
      unint64_t v22 = (unint64_t)&v17[v16 / 0xFFFFFFFFFFFFFFF8];
      uint64_t v23 = v17;
      if ((unint64_t)&v17[v16 / 0xFFFFFFFFFFFFFFF8] < v9)
      {
        uint64_t v23 = v17;
        do
        {
          *(unsigned char *)uint64_t v23 = *(unsigned char *)v22;
          v23[1] = *(void **)(v22 + 8);
          *(unsigned char *)unint64_t v22 = 0;
          *(void *)(v22 + 8) = 0;
          v23 += 2;
          v22 += 16;
        }
        while (v22 < v9);
      }
      a1[1] = v23;
      if (v17 != (void **)v21)
      {
        uint64_t v24 = (void ***)(v17 - 1);
        uint64_t v25 = 16 * (((char *)v17 - (char *)v21) >> 4);
        do
        {
          unsigned __int8 v26 = &v4[v25];
          unsigned __int8 v27 = v4[v25 - 16];
          uint64_t v28 = *(void ***)&v4[v25 - 8];
          *(v26 - 16) = 0;
          *((void *)v26 - 1) = 0;
          int v29 = *((unsigned __int8 *)v24 - 8);
          *((unsigned char *)v24 - 8) = v27;
          LOBYTE(v49) = v29;
          uint64_t v30 = *v24;
          *uint64_t v24 = v28;
          v24 -= 2;
          v50[0] = v30;
          sub_215CEB204(v50, v29);
          v25 -= 16;
        }
        while (v25);
      }
      if (v4 <= a4)
      {
        if (a1[1] <= (void **)a4) {
          unint64_t v31 = 0;
        }
        else {
          unint64_t v31 = a3;
        }
        a4 += 16 * v31;
      }
      uint64_t v32 = v4;
      do
      {
        sub_215D2F4F0((uint64_t)&v49, a4);
        int v33 = *v32;
        unsigned __int8 *v32 = v49;
        LOBYTE(v49) = v33;
        uint64_t v34 = (void **)*((void *)v32 + 1);
        *((void ***)v32 + 1) = v50[0];
        v50[0] = v34;
        sub_215CEB204(v50, v33);
        v32 += 16;
        --v18;
      }
      while (v18);
      return (void **)v4;
    }
    uint64_t v19 = 0;
    unint64_t v17 = (void **)(v9 + 16 * (a3 - v15));
    uint64_t v48 = (uint64_t)(v9 - (void)a2) >> 4;
    unint64_t v20 = v16 - 16 * v15;
    do
    {
      sub_215D2F4F0(v9 + v19, a4);
      v19 += 16;
    }
    while (v20 != v19);
    a1[1] = v17;
    if ((unsigned __int8 *)v9 != v4)
    {
      unint64_t v18 = v48;
      goto LABEL_17;
    }
    return (void **)v4;
  }
  uint64_t v10 = *a1;
  unint64_t v11 = a3 + ((uint64_t)(v9 - (void)*a1) >> 4);
  if (v11 >> 60) {
    sub_215CEA45C();
  }
  uint64_t v12 = (char *)v8 - (char *)v10;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  unint64_t v52 = a1 + 2;
  if (v13)
  {
    if (v13 >> 60) {
      sub_215738AD8();
    }
    std::string v14 = (char *)operator new(16 * v13);
  }
  else
  {
    std::string v14 = 0;
  }
  uint64_t v36 = (void **)&v14[16 * ((v4 - (unsigned __int8 *)v10) >> 4)];
  char v49 = v14;
  v50[0] = v36;
  v50[1] = v36;
  uint64_t v51 = (void **)&v14[16 * v13];
  uint64_t v37 = 2 * a3;
  uint64_t v38 = &v36[v37];
  do
  {
    sub_215D2F4F0((uint64_t)v36, a4);
    v36 += 2;
    v37 -= 2;
  }
  while (v37 * 8);
  uint64_t v35 = v50[0];
  uint64_t v39 = *a1;
  uint64_t v40 = v50[0];
  if (*a1 != (void **)v4)
  {
    uint64_t v41 = v4;
    uint64_t v40 = v50[0];
    do
    {
      char v42 = *(v41 - 16);
      v41 -= 16;
      *((unsigned char *)v40 - 16) = v42;
      v40 -= 2;
      v40[1] = (void *)*((void *)v41 + 1);
      *uint64_t v41 = 0;
      *((void *)v41 + 1) = 0;
    }
    while (v41 != (unsigned __int8 *)v39);
  }
  v50[0] = v40;
  uint64_t v43 = (unsigned __int8 *)a1[1];
  if (v43 != v4)
  {
    do
    {
      *(unsigned char *)uint64_t v38 = *v4;
      v38[1] = (void *)*((void *)v4 + 1);
      unsigned __int8 *v4 = 0;
      *((void *)v4 + 1) = 0;
      v38 += 2;
      v4 += 16;
    }
    while (v4 != v43);
    uint64_t v40 = v50[0];
    uint64_t v4 = (unsigned __int8 *)a1[1];
  }
  BOOL v44 = *a1;
  *a1 = v40;
  a1[1] = v38;
  a1[2] = v51;
  if (v4 != (unsigned __int8 *)v44)
  {
    unsigned __int8 v45 = (void ***)(v4 - 8);
    do
    {
      uint64_t v46 = v45 - 1;
      sub_215CEB204(v45, *((unsigned __int8 *)v45 - 8));
      v45 -= 2;
    }
    while (v46 != (void ***)v44);
  }
  if (v44) {
    operator delete(v44);
  }
  return v35;
}

void sub_215D32E84(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_215D32E8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215D32370((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215D32EA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  *(void *)&long long v11 = a1;
  *((void *)&v11 + 1) = a2;
  unint64_t v9 = (void *)a3[3];
  if (v9)
  {
    if (v9 == a3)
    {
      unint64_t v13 = v12;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v12);
    }
    else
    {
      unint64_t v13 = (void *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    unint64_t v13 = 0;
  }
  sub_215D336E0(a6, &v11, (uint64_t)v12, a4, a5);
  uint64_t result = (uint64_t)v13;
  if (v13 == v12) {
    return (*(uint64_t (**)(void *))(v12[0] + 32))(v12);
  }
  if (v13) {
    return (*(uint64_t (**)(void))(*v13 + 40))();
  }
  return result;
}

void sub_215D32FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D33010(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    if (v6 == a1)
    {
      uint64_t v35 = v34;
      (*(void (**)(uint64_t, void *))(*(void *)a1 + 24))(a1, v34);
    }
    else
    {
      uint64_t v35 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    }
    sub_215D39184((uint64_t)&v36, (uint64_t)a3, (uint64_t)v34, *(unsigned char *)(a1 + 184));
    if (v35 == v34)
    {
      (*(void (**)(void *))(v34[0] + 32))(v34);
    }
    else if (v35)
    {
      (*(void (**)(void))(*v35 + 40))();
    }
    sub_215D360D4(a1, (uint64_t)&v36);
    if (a2)
    {
      int v11 = sub_215D33870(a1 + 40);
      *(_DWORD *)(a1 + 32) = v11;
      if (v11 != 15)
      {
        sub_215D36DD4(a1 + 40, &v33);
        long long v29 = *(_OWORD *)(a1 + 72);
        uint64_t v30 = *(void *)(a1 + 88);
        char v26 = 5;
        strcpy((char *)v25, "value");
        sub_215D37238(a1, 0xFu, (const void **)v25, (uint64_t)__p);
        sub_215D36EC8(101, (uint64_t *)&v29, (uint64_t)__p, (uint64_t)&v31);
        char v41 = 1;
        if (v42)
        {
          exception = __cxa_allocate_exception(0x28uLL);
          unint64_t v17 = (void *)sub_215D3BA88((uint64_t)exception, (uint64_t)&v31);
          __cxa_throw(v17, (struct type_info *)&unk_26C684770, (void (*)(void *))sub_215D37928);
        }
        v31.__vftable = (std::exception_vtbl *)&unk_26C684698;
        std::runtime_error::~runtime_error(&v32);
        std::exception::~exception(&v31);
        if (v28 < 0)
        {
          operator delete(__p[0]);
          if ((v26 & 0x80000000) == 0)
          {
LABEL_24:
            if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_25;
            }
LABEL_29:
            operator delete(v33.__r_.__value_.__l.__data_);
            if (v41) {
              goto LABEL_26;
            }
            goto LABEL_30;
          }
        }
        else if ((v26 & 0x80000000) == 0)
        {
          goto LABEL_24;
        }
        operator delete(v25[0]);
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_29;
        }
      }
    }
LABEL_25:
    if (v41)
    {
LABEL_26:
      uint64_t v12 = &v24;
      int v13 = *a3;
      *a3 = 9;
      char v23 = v13;
      uint64_t v14 = *((void *)a3 + 1);
      *((void *)a3 + 1) = 0;
      uint64_t v24 = v14;
      goto LABEL_32;
    }
LABEL_30:
    if (*a3 != 9)
    {
LABEL_33:
      sub_215D3BD50((uint64_t)&v36);
      return;
    }
    uint64_t v12 = &v22;
    *a3 = 0;
    char v21 = 9;
    uint64_t v15 = *((void *)a3 + 1);
    *((void *)a3 + 1) = 0;
    uint64_t v22 = v15;
    int v13 = 9;
LABEL_32:
    sub_215CE9D14(v12, v13);
    goto LABEL_33;
  }
  char v7 = *(unsigned char *)(a1 + 184);
  uint64_t v36 = a3;
  long long v37 = 0u;
  long long v38 = 0u;
  char v39 = 0;
  char v40 = v7;
  sub_215D3797C(a1, &v36);
  if (!a2) {
    goto LABEL_10;
  }
  int v8 = sub_215D33870(a1 + 40);
  *(_DWORD *)(a1 + 32) = v8;
  if (v8 == 15) {
    goto LABEL_10;
  }
  sub_215D36DD4(a1 + 40, &v33);
  long long v29 = *(_OWORD *)(a1 + 72);
  uint64_t v30 = *(void *)(a1 + 88);
  char v26 = 5;
  strcpy((char *)v25, "value");
  sub_215D37238(a1, 0xFu, (const void **)v25, (uint64_t)__p);
  sub_215D36EC8(101, (uint64_t *)&v29, (uint64_t)__p, (uint64_t)&v31);
  char v39 = 1;
  if (v40)
  {
    unint64_t v18 = __cxa_allocate_exception(0x28uLL);
    uint64_t v19 = (void *)sub_215D3BA88((uint64_t)v18, (uint64_t)&v31);
    __cxa_throw(v19, (struct type_info *)&unk_26C684770, (void (*)(void *))sub_215D37928);
  }
  v31.__vftable = (std::exception_vtbl *)&unk_26C684698;
  std::runtime_error::~runtime_error(&v32);
  std::exception::~exception(&v31);
  if ((v28 & 0x80000000) == 0)
  {
    if ((v26 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }
  operator delete(__p[0]);
  if (v26 < 0)
  {
LABEL_36:
    operator delete(v25[0]);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_37;
    }
LABEL_10:
    if (!v39) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_9:
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_10;
  }
LABEL_37:
  operator delete(v33.__r_.__value_.__l.__data_);
  if (v39)
  {
LABEL_11:
    int v9 = *a3;
    *a3 = 9;
    uint64_t v10 = *((void *)a3 + 1);
    *((void *)a3 + 1) = 0;
    uint64_t v20 = v10;
    sub_215CE9D14(&v20, v9);
  }
LABEL_12:
  if ((void)v37)
  {
    *((void *)&v37 + 1) = v37;
    operator delete((void *)v37);
  }
}

void sub_215D334BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::runtime_error a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  sub_215D37928(&a31);
  if (a26 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a40 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_4:
    char v42 = *(void **)(v40 - 200);
    if (v42)
    {
LABEL_10:
      *(void *)(v40 - 192) = v42;
      operator delete(v42);
      _Unwind_Resume(a1);
    }
LABEL_9:
    _Unwind_Resume(a1);
  }
LABEL_8:
  operator delete(a35);
  char v42 = *(void **)(v40 - 200);
  if (v42) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void sub_215D335FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
}

void sub_215D33610(_Unwind_Exception *a1)
{
  sub_215D3BD50(v1 - 208);
  _Unwind_Resume(a1);
}

uint64_t sub_215D33624(uint64_t a1)
{
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
    uint64_t v2 = *(void **)(a1 + 96);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 120));
  uint64_t v2 = *(void **)(a1 + 96);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
LABEL_4:
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3 == a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
}

uint64_t sub_215D336E0(uint64_t a1, _OWORD *a2, uint64_t a3, char a4, char a5)
{
  uint64_t v9 = *(void *)(a3 + 24);
  if (v9)
  {
    if (v9 == a3)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = *a2;
  *(unsigned char *)(a1 + 56) = a5;
  *(_DWORD *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = -1;
  *(unsigned char *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = "";
  *(void *)(a1 + 16std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 152) = 0;
  uint64_t v10 = localeconv();
  if (v10->decimal_point) {
    int v11 = *v10->decimal_point;
  }
  else {
    int v11 = 46;
  }
  *(_DWORD *)(a1 + 176) = v11;
  *(unsigned char *)(a1 + 184) = a4;
  *(_DWORD *)(a1 + 32) = sub_215D33870(a1 + 40);
  return a1;
}

void sub_215D33800(_Unwind_Exception *a1)
{
  sub_215D33820(v2);
  sub_215D2C344(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215D33820(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    uint64_t v2 = *(void **)(a1 + 56);
    if (!v2) {
      return a1;
    }
    goto LABEL_3;
  }
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_215D33870(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  if (sub_215D35CD0(a1) == 239)
  {
    if (sub_215D35CD0(a1) == 187 && sub_215D35CD0(a1) == 191) {
      goto LABEL_12;
    }
    uint64_t v2 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
LABEL_6:
    *(void *)(a1 + 104) = v2;
    return 14;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 40);
    *(unsigned char *)(a1 + 24) = 1;
    --*(void *)(a1 + 32);
    if (v4 || (uint64_t v3 = (void *)(a1 + 48), (v4 = *(void *)(a1 + 48)) != 0)) {
      *uint64_t v3 = v4 - 1;
    }
    if (*(_DWORD *)(a1 + 20) != -1) {
      --*(void *)(a1 + 64);
    }
LABEL_12:
    while (1)
    {
      sub_215D33D24(a1);
      if (!*(unsigned char *)(a1 + 16) || *(_DWORD *)(a1 + 20) != 47) {
        break;
      }
      if (!sub_215D33FFC(a1)) {
        return 14;
      }
    }
    uint64_t result = 8;
    switch(*(_DWORD *)(a1 + 20))
    {
      case 0xFFFFFFFF:
      case 0:
        uint64_t result = 15;
        break;
      case 0x22:
        uint64_t result = sub_215D34120(a1);
        break;
      case 0x2C:
        uint64_t result = 13;
        break;
      case 0x2D:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
        uint64_t result = sub_215D355F8(a1);
        break;
      case 0x3A:
        uint64_t result = 12;
        break;
      case 0x5B:
        return result;
      case 0x5D:
        uint64_t result = 10;
        break;
      case 0x66:
        if (sub_215D35CD0(a1) != 97
          || sub_215D35CD0(a1) != 108
          || sub_215D35CD0(a1) != 115
          || sub_215D35CD0(a1) != 101)
        {
          goto LABEL_42;
        }
        uint64_t result = 2;
        break;
      case 0x6E:
        if (sub_215D35CD0(a1) != 117
          || sub_215D35CD0(a1) != 108
          || sub_215D35CD0(a1) != 108)
        {
          goto LABEL_42;
        }
        uint64_t result = 3;
        break;
      case 0x74:
        if (sub_215D35CD0(a1) != 114
          || sub_215D35CD0(a1) != 117
          || sub_215D35CD0(a1) != 101)
        {
          goto LABEL_42;
        }
        uint64_t result = 1;
        break;
      case 0x7B:
        uint64_t result = 9;
        break;
      case 0x7D:
        uint64_t result = 11;
        break;
      default:
LABEL_42:
        uint64_t v2 = "invalid literal";
        goto LABEL_6;
    }
  }
  return result;
}

void sub_215D33D24(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 56);
  int64x2_t v3 = vdupq_n_s64(1uLL);
  int64x2_t v30 = v3;
  while (2)
  {
    *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), v3);
    if (*(unsigned char *)(a1 + 24))
    {
      *(unsigned char *)(a1 + 24) = 0;
      int v5 = *(_DWORD *)(a1 + 20);
      if (v5 == -1) {
        return;
      }
LABEL_8:
      uint64_t v9 = *(unsigned char **)(a1 + 64);
      unint64_t v8 = *(void *)(a1 + 72);
      if ((unint64_t)v9 < v8)
      {
        *uint64_t v9 = v5;
        *(void *)(a1 + 64) = v9 + 1;
        unsigned int v10 = *(_DWORD *)(a1 + 20) - 9;
        if (v10 > 0x17) {
          return;
        }
LABEL_40:
        switch(v10)
        {
          case 0u:
          case 4u:
          case 0x17u:
            continue;
          case 1u:
            uint64_t v4 = *(void *)(a1 + 48) + 1;
            *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
            *(void *)(a1 + 48) = v4;
            continue;
          default:
            return;
        }
      }
      int v11 = (unsigned char *)*v2;
      unint64_t v12 = (unint64_t)&v9[-*v2];
      unint64_t v13 = v12 + 1;
      if ((uint64_t)(v12 + 1) < 0) {
        sub_215738AC0();
      }
      unint64_t v14 = v8 - (void)v11;
      if (2 * v14 > v13) {
        unint64_t v13 = 2 * v14;
      }
      if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v15 = v13;
      }
      if (v15)
      {
        uint64_t v16 = (char *)operator new(v15);
        unint64_t v17 = &v16[v12];
        v16[v12] = v5;
        uint64_t v18 = (uint64_t)&v16[v12 + 1];
        if (v9 == v11) {
          goto LABEL_37;
        }
      }
      else
      {
        uint64_t v16 = 0;
        unint64_t v17 = &v9[-*v2];
        *(unsigned char *)unint64_t v12 = v5;
        uint64_t v18 = v12 + 1;
        if (v9 == v11)
        {
LABEL_37:
          *(void *)(a1 + 56) = v17;
          *(void *)(a1 + 64) = v18;
          *(void *)(a1 + 72) = &v16[v15];
          if (v9) {
            operator delete(v9);
          }
          int64x2_t v3 = v30;
          *(void *)(a1 + 64) = v18;
          unsigned int v10 = *(_DWORD *)(a1 + 20) - 9;
          goto LABEL_40;
        }
      }
      if (v12 >= 8 && (unint64_t)(v11 - v16) >= 0x20)
      {
        if (v12 < 0x20)
        {
          unint64_t v19 = 0;
          goto LABEL_29;
        }
        unint64_t v19 = v12 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v20 = &v16[v12 - 16];
        char v21 = (long long *)(v9 - 16);
        unint64_t v22 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v23 = *v21;
          *((_OWORD *)v20 - 1) = *(v21 - 1);
          *(_OWORD *)uint64_t v20 = v23;
          v20 -= 32;
          v21 -= 2;
          v22 -= 32;
        }
        while (v22);
        if (v12 == v19) {
          goto LABEL_36;
        }
        if ((v12 & 0x18) != 0)
        {
LABEL_29:
          v17 -= v12 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v24 = &v16[&v9[-v19] - v11 - 8];
          uint64_t v25 = (uint64_t *)&v9[-v19 - 8];
          unint64_t v26 = v19 - (v12 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v27 = *v25--;
            *(void *)uint64_t v24 = v27;
            v24 -= 8;
            v26 += 8;
          }
          while (v26);
          v9 -= v12 & 0xFFFFFFFFFFFFFFF8;
          if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_36;
          }
          goto LABEL_34;
        }
        v17 -= v19;
        v9 -= v19;
      }
LABEL_34:
      char v28 = v17 - 1;
      do
      {
        char v29 = *--v9;
        *v28-- = v29;
      }
      while (v9 != v11);
LABEL_36:
      uint64_t v9 = (unsigned char *)*v2;
      unint64_t v17 = v16;
      goto LABEL_37;
    }
    break;
  }
  uint64_t v6 = *(unsigned char **)a1;
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = -1;
  }
  else
  {
    int v7 = *v6;
    LOBYTE(v5) = *v6;
    *(void *)a1 = v6 + 1;
    *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v7;
    if (v7 != -1) {
      goto LABEL_8;
    }
  }
}

uint64_t sub_215D33FFC(uint64_t a1)
{
  int v2 = sub_215D35CD0(a1);
  if (v2 == 42)
  {
    int v5 = (uint64_t *)(a1 + 48);
    do
    {
      while (1)
      {
        int v6 = sub_215D35CD0(a1);
        if (v6 != 42) {
          break;
        }
        if (sub_215D35CD0(a1) == 47) {
          return 1;
        }
        *(unsigned char *)(a1 + 24) = 1;
        uint64_t v7 = *(void *)(a1 + 40);
        --*(void *)(a1 + 32);
        unint64_t v8 = (void *)(a1 + 40);
        if (v7 || (v7 = *v5, unint64_t v8 = (void *)(a1 + 48), *v5)) {
          *unint64_t v8 = v7 - 1;
        }
        if (*(_DWORD *)(a1 + 20) != -1) {
          --*(void *)(a1 + 64);
        }
      }
    }
    while ((v6 + 1) >= 2);
    uint64_t result = 0;
    *(void *)(a1 + 104) = "invalid comment; missing closing '*/'";
  }
  else if (v2 == 47)
  {
    do
    {
      do
        unsigned int v3 = sub_215D35CD0(a1) + 1;
      while (v3 >= 0xF);
    }
    while (((0x4803u >> v3) & 1) == 0);
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(void *)(a1 + 104) = "invalid comment; expecting '/' or '*' after '/'";
  }
  return result;
}

uint64_t sub_215D34120(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
  {
    **(unsigned char **)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 0;
    *(void *)(a1 + 88) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 0;
    *(unsigned char *)(a1 + 103) = 0;
  }
  int v2 = (void *)(a1 + 56);
  unsigned int v3 = *(unsigned char **)(a1 + 56);
  *(void *)(a1 + 64) = v3;
  int v4 = *(_DWORD *)(a1 + 20);
  unint64_t v5 = *(void *)(a1 + 72);
  if ((unint64_t)v3 >= v5)
  {
    unint64_t v7 = v5 - (void)v3;
    uint64_t v8 = 2 * v7;
    if (2 * v7 <= 1) {
      uint64_t v8 = 1;
    }
    if (v7 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v9 = v8;
    }
    unsigned int v10 = operator new(v9);
    *unsigned int v10 = v4;
    int v6 = v10 + 1;
    *(void *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = v10 + 1;
    *(void *)(a1 + 72) = &v10[v9];
    if (v3) {
      operator delete(v3);
    }
  }
  else
  {
    *unsigned int v3 = v4;
    int v6 = v3 + 1;
  }
  int v11 = (void **)(a1 + 80);
  *(void *)(a1 + 64) = v6;
  int64x2_t v141 = vdupq_n_s64(1uLL);
  while (2)
  {
    *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), v141);
    if (*(unsigned char *)(a1 + 24))
    {
      *(unsigned char *)(a1 + 24) = 0;
      int v15 = *(_DWORD *)(a1 + 20);
      if (v15 == -1) {
        goto LABEL_253;
      }
    }
    else
    {
      uint64_t v16 = *(unsigned char **)a1;
      if (*(void *)a1 == *(void *)(a1 + 8))
      {
        *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = -1;
LABEL_253:
        uint64_t v40 = "invalid string: missing closing quote";
        goto LABEL_251;
      }
      int v17 = *v16;
      LOBYTE(v15) = *v16;
      *(void *)a1 = v16 + 1;
      *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v17;
      if (v17 == -1) {
        goto LABEL_253;
      }
    }
    unint64_t v19 = *(unsigned char **)(a1 + 64);
    unint64_t v18 = *(void *)(a1 + 72);
    if ((unint64_t)v19 >= v18)
    {
      char v21 = (unsigned char *)*v2;
      unint64_t v22 = (unint64_t)&v19[-*v2];
      unint64_t v23 = v22 + 1;
      if ((uint64_t)(v22 + 1) < 0) {
        goto LABEL_286;
      }
      unint64_t v24 = v18 - (void)v21;
      if (2 * v24 > v23) {
        unint64_t v23 = 2 * v24;
      }
      if (v24 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v25 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v25 = v23;
      }
      if (v25)
      {
        unint64_t v26 = (char *)operator new(v25);
        uint64_t v27 = &v26[v22];
        v26[v22] = v15;
        uint64_t v20 = (uint64_t)&v26[v22 + 1];
        if (v19 == v21)
        {
LABEL_49:
          *(void *)(a1 + 56) = v27;
          *(void *)(a1 + 64) = v20;
          *(void *)(a1 + 72) = &v26[v25];
          if (v19) {
            operator delete(v19);
          }
          goto LABEL_51;
        }
      }
      else
      {
        unint64_t v26 = 0;
        uint64_t v27 = &v19[-*v2];
        *(unsigned char *)unint64_t v22 = v15;
        uint64_t v20 = v22 + 1;
        if (v19 == v21) {
          goto LABEL_49;
        }
      }
      if (v22 >= 8 && (unint64_t)(v21 - v26) >= 0x20)
      {
        if (v22 < 0x20)
        {
          unint64_t v28 = 0;
          goto LABEL_41;
        }
        unint64_t v28 = v22 & 0xFFFFFFFFFFFFFFE0;
        char v29 = &v26[v22 - 16];
        int64x2_t v30 = (long long *)(v19 - 16);
        unint64_t v31 = v22 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v32 = *v30;
          *((_OWORD *)v29 - 1) = *(v30 - 1);
          *(_OWORD *)char v29 = v32;
          v29 -= 32;
          v30 -= 2;
          v31 -= 32;
        }
        while (v31);
        if (v22 == v28) {
          goto LABEL_48;
        }
        if ((v22 & 0x18) != 0)
        {
LABEL_41:
          v27 -= v22 & 0xFFFFFFFFFFFFFFF8;
          std::string v33 = &v26[&v19[-v28] - v21 - 8];
          uint64_t v34 = (uint64_t *)&v19[-v28 - 8];
          unint64_t v35 = v28 - (v22 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v36 = *v34--;
            *(void *)std::string v33 = v36;
            v33 -= 8;
            v35 += 8;
          }
          while (v35);
          v19 -= v22 & 0xFFFFFFFFFFFFFFF8;
          if (v22 == (v22 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_48;
          }
          goto LABEL_46;
        }
        v27 -= v28;
        v19 -= v28;
      }
LABEL_46:
      long long v37 = v27 - 1;
      do
      {
        char v38 = *--v19;
        *v37-- = v38;
      }
      while (v19 != v21);
LABEL_48:
      unint64_t v19 = (unsigned char *)*v2;
      uint64_t v27 = v26;
      goto LABEL_49;
    }
    *unint64_t v19 = v15;
    uint64_t v20 = (uint64_t)(v19 + 1);
LABEL_51:
    *(void *)(a1 + 64) = v20;
    int v39 = *(_DWORD *)(a1 + 20);
    if (v39 == 10)
    {
      uint64_t v138 = *(void *)(a1 + 48) + 1;
      *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
      *(void *)(a1 + 48) = v138;
      uint64_t v40 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
      goto LABEL_251;
    }
    uint64_t v40 = "invalid string: missing closing quote";
    switch(v39)
    {
      case -1:
        goto LABEL_251;
      case 0:
        uint64_t v40 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
        goto LABEL_251;
      case 1:
        uint64_t v40 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
        goto LABEL_251;
      case 2:
        uint64_t v40 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
        goto LABEL_251;
      case 3:
        uint64_t v40 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
        goto LABEL_251;
      case 4:
        uint64_t v40 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
        goto LABEL_251;
      case 5:
        uint64_t v40 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
        goto LABEL_251;
      case 6:
        uint64_t v40 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
        goto LABEL_251;
      case 7:
        uint64_t v40 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
        goto LABEL_251;
      case 8:
        uint64_t v40 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
        goto LABEL_251;
      case 9:
        uint64_t v40 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
        goto LABEL_251;
      case 11:
        uint64_t v40 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
        goto LABEL_251;
      case 12:
        uint64_t v40 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
        goto LABEL_251;
      case 13:
        uint64_t v40 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
        goto LABEL_251;
      case 14:
        uint64_t v40 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
        goto LABEL_251;
      case 15:
        uint64_t v40 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
        goto LABEL_251;
      case 16:
        uint64_t v40 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
        goto LABEL_251;
      case 17:
        uint64_t v40 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
        goto LABEL_251;
      case 18:
        uint64_t v40 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
        goto LABEL_251;
      case 19:
        uint64_t v40 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
        goto LABEL_251;
      case 20:
        uint64_t v40 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
        goto LABEL_251;
      case 21:
        uint64_t v40 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
        goto LABEL_251;
      case 22:
        uint64_t v40 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
        goto LABEL_251;
      case 23:
        uint64_t v40 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
        goto LABEL_251;
      case 24:
        uint64_t v40 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
        goto LABEL_251;
      case 25:
        uint64_t v40 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
        goto LABEL_251;
      case 26:
        uint64_t v40 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
        goto LABEL_251;
      case 27:
        uint64_t v40 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
        goto LABEL_251;
      case 28:
        uint64_t v40 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
        goto LABEL_251;
      case 29:
        uint64_t v40 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
        goto LABEL_251;
      case 30:
        uint64_t v40 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
        goto LABEL_251;
      case 31:
        uint64_t v40 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
        goto LABEL_251;
      case 32:
      case 33:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
        goto LABEL_217;
      case 34:
        return 4;
      case 92:
        int v80 = sub_215D35CD0(a1);
        uint64_t v40 = "invalid string: forbidden character after backslash";
        switch(v80)
        {
          case '""':
            std::string::push_back((std::string *)(a1 + 80), 34);
            continue;
          case '/':
            std::string::push_back((std::string *)(a1 + 80), 47);
            continue;
          case '\\':
            std::string::push_back((std::string *)(a1 + 80), 92);
            continue;
          case 'b':
            std::string::push_back((std::string *)(a1 + 80), 8);
            continue;
          case 'f':
            std::string::push_back((std::string *)(a1 + 80), 12);
            continue;
          case 'n':
            std::string::push_back((std::string *)(a1 + 80), 10);
            continue;
          case 'r':
            std::string::push_back((std::string *)(a1 + 80), 13);
            continue;
          case 't':
            std::string::push_back((std::string *)(a1 + 80), 9);
            continue;
          case 'u':
            unsigned int v91 = sub_215D35F24(a1);
            if (v91 == -1) {
              goto LABEL_287;
            }
            unsigned int v92 = v91;
            if ((v91 & 0xFFFFFC00) == 0xD800)
            {
              if (sub_215D35CD0(a1) != 92 || sub_215D35CD0(a1) != 117)
              {
LABEL_288:
                uint64_t v40 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
                goto LABEL_251;
              }
              unsigned int v93 = sub_215D35F24(a1);
              if (v93 == -1)
              {
LABEL_287:
                uint64_t v40 = "invalid string: '\\u' must be followed by 4 hex digits";
                goto LABEL_251;
              }
              if (v93 >> 10 != 55) {
                goto LABEL_288;
              }
              unsigned int v92 = v93 + (v92 << 10) - 56613888;
LABEL_147:
              std::string::push_back((std::string *)(a1 + 80), (v92 >> 18) | 0xF0);
              std::string::push_back((std::string *)(a1 + 80), (v92 >> 12) & 0x3F | 0x80);
              goto LABEL_148;
            }
            if ((v91 & 0xFFFFFC00) == 0xDC00)
            {
              uint64_t v40 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
              goto LABEL_251;
            }
            if ((int)v91 <= 127)
            {
              std::string::value_type v79 = v91;
LABEL_111:
              std::string::push_back((std::string *)(a1 + 80), v79);
              continue;
            }
            if (v91 <= 0x7FF)
            {
              std::string::push_back((std::string *)(a1 + 80), (v91 >> 6) | 0xC0);
              std::string::value_type v79 = v92 & 0x3F | 0x80;
              goto LABEL_111;
            }
            if (HIWORD(v91)) {
              goto LABEL_147;
            }
            std::string::push_back((std::string *)(a1 + 80), (v91 >> 12) | 0xE0);
LABEL_148:
            std::string::push_back((std::string *)(a1 + 80), (v92 >> 6) & 0x3F | 0x80);
            std::string::push_back((std::string *)(a1 + 80), v92 & 0x3F | 0x80);
            break;
          default:
            goto LABEL_251;
        }
        continue;
      case 194:
      case 195:
      case 196:
      case 197:
      case 198:
      case 199:
      case 200:
      case 201:
      case 202:
      case 203:
      case 204:
      case 205:
      case 206:
      case 207:
      case 208:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
      case 217:
      case 218:
      case 219:
      case 220:
      case 221:
      case 222:
      case 223:
        std::string::push_back((std::string *)(a1 + 80), v39);
        *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          int v41 = *(_DWORD *)(a1 + 20);
          if (v41 == -1) {
            goto LABEL_250;
          }
        }
        else
        {
          uint64_t v43 = *(unsigned char **)a1;
          if (*(void *)a1 == *(void *)(a1 + 8))
          {
            *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = -1;
            goto LABEL_250;
          }
          int v44 = *v43;
          LOBYTE(v41) = *v43;
          *(void *)a1 = v43 + 1;
          *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v44;
          if (v44 == -1) {
            goto LABEL_250;
          }
        }
        uint64_t v46 = *(unsigned char **)(a1 + 64);
        unint64_t v45 = *(void *)(a1 + 72);
        if ((unint64_t)v46 < v45)
        {
          unsigned char *v46 = v41;
          uint64_t v47 = (uint64_t)(v46 + 1);
          goto LABEL_132;
        }
        uint64_t v48 = (unsigned char *)*v2;
        unint64_t v49 = (unint64_t)&v46[-*v2];
        unint64_t v50 = v49 + 1;
        if ((uint64_t)(v49 + 1) < 0) {
          goto LABEL_286;
        }
        unint64_t v51 = v45 - (void)v48;
        if (2 * v51 > v50) {
          unint64_t v50 = 2 * v51;
        }
        if (v51 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v52 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v52 = v50;
        }
        if (v52)
        {
          uint64_t v53 = (char *)operator new(v52);
          char v54 = &v53[v49];
          v53[v49] = v41;
          uint64_t v47 = (uint64_t)&v53[v49 + 1];
          if (v46 == v48) {
            goto LABEL_130;
          }
        }
        else
        {
          uint64_t v53 = 0;
          char v54 = &v46[-*v2];
          *(unsigned char *)unint64_t v49 = v41;
          uint64_t v47 = v49 + 1;
          if (v46 == v48) {
            goto LABEL_130;
          }
        }
        if (v49 < 8 || (unint64_t)(v48 - v53) < 0x20) {
          goto LABEL_127;
        }
        if (v49 >= 0x20)
        {
          unint64_t v55 = v49 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v70 = &v53[v49 - 16];
          uint64_t v71 = (long long *)(v46 - 16);
          unint64_t v72 = v49 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v73 = *v71;
            *((_OWORD *)v70 - 1) = *(v71 - 1);
            *(_OWORD *)uint64_t v70 = v73;
            v70 -= 32;
            v71 -= 2;
            v72 -= 32;
          }
          while (v72);
          if (v49 == v55) {
            goto LABEL_129;
          }
          if ((v49 & 0x18) == 0)
          {
            v54 -= v55;
            v46 -= v55;
LABEL_127:
            uint64_t v89 = v54 - 1;
            do
            {
              char v90 = *--v46;
              *v89-- = v90;
            }
            while (v46 != v48);
            goto LABEL_129;
          }
        }
        else
        {
          unint64_t v55 = 0;
        }
        v54 -= v49 & 0xFFFFFFFFFFFFFFF8;
        int v74 = &v53[&v46[-v55] - v48 - 8];
        unint64_t v75 = (uint64_t *)&v46[-v55 - 8];
        unint64_t v76 = v55 - (v49 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v77 = *v75--;
          *(void *)int v74 = v77;
          v74 -= 8;
          v76 += 8;
        }
        while (v76);
        v46 -= v49 & 0xFFFFFFFFFFFFFFF8;
        if (v49 != (v49 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_127;
        }
LABEL_129:
        uint64_t v46 = (unsigned char *)*v2;
        char v54 = v53;
LABEL_130:
        *(void *)(a1 + 56) = v54;
        *(void *)(a1 + 64) = v47;
        *(void *)(a1 + 72) = &v53[v52];
        if (v46) {
          operator delete(v46);
        }
LABEL_132:
        *(void *)(a1 + 64) = v47;
        int v39 = *(_DWORD *)(a1 + 20);
        if (v39 == 10) {
          goto LABEL_249;
        }
        goto LABEL_216;
      case 224:
        std::string::push_back((std::string *)(a1 + 80), -32);
        sub_215D35CD0(a1);
        int v78 = *(_DWORD *)(a1 + 20);
        if ((v78 - 192) < 0xFFFFFFE0) {
          goto LABEL_250;
        }
        goto LABEL_109;
      case 225:
      case 226:
      case 227:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
      case 238:
      case 239:
        std::string::push_back((std::string *)(a1 + 80), v39);
        *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          int v42 = *(_DWORD *)(a1 + 20);
          if (v42 == -1) {
            goto LABEL_250;
          }
        }
        else
        {
          int v56 = *(unsigned char **)a1;
          if (*(void *)a1 == *(void *)(a1 + 8))
          {
            *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = -1;
            goto LABEL_250;
          }
          int v57 = *v56;
          LOBYTE(v42) = *v56;
          *(void *)a1 = v56 + 1;
          *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v57;
          if (v57 == -1) {
            goto LABEL_250;
          }
        }
        size_t v59 = *(unsigned char **)(a1 + 64);
        unint64_t v58 = *(void *)(a1 + 72);
        if ((unint64_t)v59 < v58)
        {
          unsigned char *v59 = v42;
          uint64_t v60 = (uint64_t)(v59 + 1);
          goto LABEL_156;
        }
        double v61 = (unsigned char *)*v2;
        unint64_t v62 = (unint64_t)&v59[-*v2];
        unint64_t v63 = v62 + 1;
        if ((uint64_t)(v62 + 1) < 0) {
          goto LABEL_286;
        }
        unint64_t v64 = v58 - (void)v61;
        if (2 * v64 > v63) {
          unint64_t v63 = 2 * v64;
        }
        if (v64 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v65 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v65 = v63;
        }
        if (v65)
        {
          long long v66 = (char *)operator new(v65);
          long long v67 = &v66[v62];
          v66[v62] = v42;
          uint64_t v60 = (uint64_t)&v66[v62 + 1];
          if (v59 == v61) {
            goto LABEL_154;
          }
        }
        else
        {
          long long v66 = 0;
          long long v67 = &v59[-*v2];
          *(unsigned char *)unint64_t v62 = v42;
          uint64_t v60 = v62 + 1;
          if (v59 == v61) {
            goto LABEL_154;
          }
        }
        if (v62 < 8 || (unint64_t)(v61 - v66) < 0x20) {
          goto LABEL_151;
        }
        if (v62 >= 0x20)
        {
          unint64_t v69 = v62 & 0xFFFFFFFFFFFFFFE0;
          std::string::size_type v81 = &v66[v62 - 16];
          unint64_t v82 = (long long *)(v59 - 16);
          unint64_t v83 = v62 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v84 = *v82;
            *((_OWORD *)v81 - 1) = *(v82 - 1);
            *(_OWORD *)std::string::size_type v81 = v84;
            v81 -= 32;
            v82 -= 2;
            v83 -= 32;
          }
          while (v83);
          if (v62 == v69) {
            goto LABEL_153;
          }
          if ((v62 & 0x18) == 0)
          {
            v67 -= v69;
            v59 -= v69;
LABEL_151:
            int64_t v94 = v67 - 1;
            do
            {
              char v95 = *--v59;
              *v94-- = v95;
            }
            while (v59 != v61);
            goto LABEL_153;
          }
        }
        else
        {
          unint64_t v69 = 0;
        }
        v67 -= v62 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v85 = &v66[&v59[-v69] - v61 - 8];
        unint64_t v86 = (uint64_t *)&v59[-v69 - 8];
        unint64_t v87 = v69 - (v62 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v88 = *v86--;
          *(void *)uint64_t v85 = v88;
          v85 -= 8;
          v87 += 8;
        }
        while (v87);
        v59 -= v62 & 0xFFFFFFFFFFFFFFF8;
        if (v62 != (v62 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_151;
        }
LABEL_153:
        size_t v59 = (unsigned char *)*v2;
        long long v67 = v66;
LABEL_154:
        *(void *)(a1 + 56) = v67;
        *(void *)(a1 + 64) = v60;
        *(void *)(a1 + 72) = &v66[v65];
        if (v59) {
          operator delete(v59);
        }
LABEL_156:
        *(void *)(a1 + 64) = v60;
        int v96 = *(_DWORD *)(a1 + 20);
        if (v96 == 10) {
          goto LABEL_249;
        }
        if ((v96 - 192) < 0xFFFFFFC0) {
          goto LABEL_250;
        }
        int v97 = *(char *)(a1 + 103);
        if ((v97 & 0x80000000) == 0)
        {
          if (*(unsigned char *)(a1 + 103) != 22)
          {
            size_t v98 = *(unsigned __int8 *)(a1 + 103);
            *(unsigned char *)(a1 + 103) = (v97 + 1) & 0x7F;
            unint64_t v103 = (char *)(a1 + 80);
            goto LABEL_180;
          }
          size_t v98 = 22;
          uint64_t v99 = (void *)(a1 + 80);
LABEL_164:
          if (v98 + 1 > 2 * v98) {
            unint64_t v102 = v98 + 1;
          }
          else {
            unint64_t v102 = 2 * v98;
          }
          if (v102 < 0x17)
          {
            size_t v101 = 23;
            goto LABEL_169;
          }
          uint64_t v104 = (v102 & 0x7FFFFFFFFFFFFFF8) + 8;
          uint64_t v105 = v102 | 7;
          if (v105 == 23) {
            uint64_t v105 = v104;
          }
          size_t v101 = v105 + 1;
          unint64_t v103 = (char *)operator new(v105 + 1);
          if (v98)
          {
LABEL_175:
            memmove(v103, v99, v98);
            if (v98 != 22) {
              goto LABEL_176;
            }
LABEL_177:
            *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v103;
            *(void *)(a1 + 96) = v101 | 0x8000000000000000;
            goto LABEL_179;
          }
LABEL_176:
          operator delete(v99);
          goto LABEL_177;
        }
        uint64_t v100 = *(void *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
        size_t v98 = v100 - 1;
        if (*(void *)(a1 + 88) == v100 - 1)
        {
          if (v100 == 0x7FFFFFFFFFFFFFF8) {
            goto LABEL_290;
          }
          uint64_t v99 = *v11;
          size_t v101 = 0x7FFFFFFFFFFFFFF7;
          if (v98 < 0x3FFFFFFFFFFFFFF3) {
            goto LABEL_164;
          }
LABEL_169:
          unint64_t v103 = (char *)operator new(v101);
          if (v98) {
            goto LABEL_175;
          }
          goto LABEL_176;
        }
        unint64_t v103 = (char *)*v11;
        size_t v98 = *(void *)(a1 + 88);
LABEL_179:
        *(void *)(a1 + 88) = v98 + 1;
LABEL_180:
        unint64_t v106 = &v103[v98];
        *unint64_t v106 = v96;
        v106[1] = 0;
        *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          int v107 = *(_DWORD *)(a1 + 20);
          if (v107 == -1) {
            goto LABEL_250;
          }
        }
        else
        {
          unint64_t v108 = *(unsigned char **)a1;
          if (*(void *)a1 == *(void *)(a1 + 8))
          {
            *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = -1;
            goto LABEL_250;
          }
          int v109 = *v108;
          LOBYTE(v107) = *v108;
          *(void *)a1 = v108 + 1;
          *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v109;
          if (v109 == -1) {
            goto LABEL_250;
          }
        }
        uint8x16_t v111 = *(unsigned char **)(a1 + 64);
        unint64_t v110 = *(void *)(a1 + 72);
        if ((unint64_t)v111 < v110)
        {
          *uint8x16_t v111 = v107;
          uint64_t v112 = (uint64_t)(v111 + 1);
          goto LABEL_215;
        }
        unint64_t v113 = (unsigned char *)*v2;
        unint64_t v114 = (unint64_t)&v111[-*v2];
        unint64_t v115 = v114 + 1;
        if ((uint64_t)(v114 + 1) < 0) {
LABEL_286:
        }
          sub_215738AC0();
        unint64_t v116 = v110 - (void)v113;
        if (2 * v116 > v115) {
          unint64_t v115 = 2 * v116;
        }
        if (v116 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v117 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v117 = v115;
        }
        if (v117)
        {
          uint16x8_t v118 = (char *)operator new(v117);
          uint64_t v119 = &v118[v114];
          v118[v114] = v107;
          uint64_t v112 = (uint64_t)&v118[v114 + 1];
          if (v111 == v113) {
            goto LABEL_213;
          }
        }
        else
        {
          uint16x8_t v118 = 0;
          uint64_t v119 = &v111[-*v2];
          *(unsigned char *)unint64_t v114 = v107;
          uint64_t v112 = v114 + 1;
          if (v111 == v113) {
            goto LABEL_213;
          }
        }
        if (v114 < 8 || (unint64_t)(v113 - v118) < 0x20) {
          goto LABEL_210;
        }
        if (v114 >= 0x20)
        {
          unint64_t v120 = v114 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v121 = &v118[v114 - 16];
          long long v122 = (long long *)(v111 - 16);
          unint64_t v123 = v114 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v124 = *v122;
            *((_OWORD *)v121 - 1) = *(v122 - 1);
            *(_OWORD *)uint64_t v121 = v124;
            v121 -= 32;
            v122 -= 2;
            v123 -= 32;
          }
          while (v123);
          if (v114 == v120) {
            goto LABEL_212;
          }
          if ((v114 & 0x18) == 0)
          {
            v119 -= v120;
            v111 -= v120;
LABEL_210:
            uint64_t v129 = v119 - 1;
            do
            {
              char v130 = *--v111;
              *v129-- = v130;
            }
            while (v111 != v113);
            goto LABEL_212;
          }
        }
        else
        {
          unint64_t v120 = 0;
        }
        v119 -= v114 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v125 = &v118[&v111[-v120] - v113 - 8];
        uint64_t v126 = (uint64_t *)&v111[-v120 - 8];
        unint64_t v127 = v120 - (v114 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v128 = *v126--;
          *(void *)unint64_t v125 = v128;
          v125 -= 8;
          v127 += 8;
        }
        while (v127);
        v111 -= v114 & 0xFFFFFFFFFFFFFFF8;
        if (v114 != (v114 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_210;
        }
LABEL_212:
        uint8x16_t v111 = (unsigned char *)*v2;
        uint64_t v119 = v118;
LABEL_213:
        *(void *)(a1 + 56) = v119;
        *(void *)(a1 + 64) = v112;
        *(void *)(a1 + 72) = &v118[v117];
        if (v111) {
          operator delete(v111);
        }
LABEL_215:
        *(void *)(a1 + 64) = v112;
        int v39 = *(_DWORD *)(a1 + 20);
        if (v39 != 10)
        {
LABEL_216:
          if ((v39 - 192) < 0xFFFFFFC0) {
            goto LABEL_250;
          }
LABEL_217:
          int v131 = *(char *)(a1 + 103);
          if ((v131 & 0x80000000) == 0)
          {
            if (*(unsigned char *)(a1 + 103) != 22)
            {
              size_t v12 = *(unsigned __int8 *)(a1 + 103);
              *(unsigned char *)(a1 + 103) = (v131 + 1) & 0x7F;
              unint64_t v13 = (char *)(a1 + 80);
              goto LABEL_15;
            }
            size_t v12 = 22;
            uint64_t v132 = (void *)(a1 + 80);
LABEL_223:
            if (v12 + 1 > 2 * v12) {
              unint64_t v135 = v12 + 1;
            }
            else {
              unint64_t v135 = 2 * v12;
            }
            uint64_t v136 = (v135 & 0x7FFFFFFFFFFFFFF8) + 8;
            if ((v135 | 7) != 0x17) {
              uint64_t v136 = v135 | 7;
            }
            if (v135 >= 0x17) {
              size_t v134 = v136 + 1;
            }
            else {
              size_t v134 = 23;
            }
LABEL_231:
            uint64_t v137 = (char *)operator new(v134);
            unint64_t v13 = v137;
            if (!v12 || (memmove(v137, v132, v12), v12 != 22)) {
              operator delete(v132);
            }
            *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v13;
            *(void *)(a1 + 96) = v134 | 0x8000000000000000;
            goto LABEL_236;
          }
          uint64_t v133 = *(void *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
          size_t v12 = v133 - 1;
          if (*(void *)(a1 + 88) == v133 - 1)
          {
            if (v133 == 0x7FFFFFFFFFFFFFF8) {
LABEL_290:
            }
              sub_215731CD8();
            uint64_t v132 = *v11;
            size_t v134 = 0x7FFFFFFFFFFFFFF7;
            if (v12 >= 0x3FFFFFFFFFFFFFF3) {
              goto LABEL_231;
            }
            goto LABEL_223;
          }
          unint64_t v13 = (char *)*v11;
          size_t v12 = *(void *)(a1 + 88);
LABEL_236:
          *(void *)(a1 + 88) = v12 + 1;
LABEL_15:
          unint64_t v14 = &v13[v12];
          char *v14 = v39;
          v14[1] = 0;
          continue;
        }
LABEL_249:
        uint64_t v139 = *(void *)(a1 + 48) + 1;
        *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
        *(void *)(a1 + 48) = v139;
LABEL_250:
        uint64_t v40 = "invalid string: ill-formed UTF-8 byte";
LABEL_251:
        *(void *)(a1 + 104) = v40;
        return 14;
      case 237:
        std::string::push_back((std::string *)(a1 + 80), -19);
        sub_215D35CD0(a1);
        int v78 = *(_DWORD *)(a1 + 20);
        if ((v78 - 160) < 0xFFFFFFE0) {
          goto LABEL_250;
        }
        goto LABEL_109;
      case 240:
        std::string::push_back((std::string *)(a1 + 80), -16);
        sub_215D35CD0(a1);
        int v68 = *(_DWORD *)(a1 + 20);
        if ((v68 - 192) < 0xFFFFFFD0) {
          goto LABEL_250;
        }
        goto LABEL_108;
      case 241:
      case 242:
      case 243:
        std::string::push_back((std::string *)(a1 + 80), v39);
        sub_215D35CD0(a1);
        int v68 = *(_DWORD *)(a1 + 20);
        if ((v68 - 192) < 0xFFFFFFC0) {
          goto LABEL_250;
        }
        goto LABEL_108;
      case 244:
        std::string::push_back((std::string *)(a1 + 80), -12);
        sub_215D35CD0(a1);
        int v68 = *(_DWORD *)(a1 + 20);
        if ((v68 - 144) < 0xFFFFFFF0) {
          goto LABEL_250;
        }
LABEL_108:
        std::string::push_back((std::string *)(a1 + 80), v68);
        sub_215D35CD0(a1);
        int v78 = *(_DWORD *)(a1 + 20);
        if ((v78 - 192) < 0xFFFFFFC0) {
          goto LABEL_250;
        }
LABEL_109:
        std::string::push_back((std::string *)(a1 + 80), v78);
        sub_215D35CD0(a1);
        if ((*(_DWORD *)(a1 + 20) - 192) < 0xFFFFFFC0) {
          goto LABEL_250;
        }
        std::string::value_type v79 = *(_DWORD *)(a1 + 20);
        goto LABEL_111;
      default:
        goto LABEL_250;
    }
  }
}

uint64_t sub_215D355F8(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
  {
    **(unsigned char **)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 0;
    *(void *)(a1 + 88) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 0;
    *(unsigned char *)(a1 + 103) = 0;
  }
  unsigned int v3 = (void *)(a1 + 56);
  int v2 = *(unsigned char **)(a1 + 56);
  *(void *)(a1 + 64) = v2;
  int v4 = *(_DWORD *)(a1 + 20);
  unint64_t v5 = *(void *)(a1 + 72);
  if ((unint64_t)v2 >= v5)
  {
    unint64_t v7 = v5 - (void)v2;
    uint64_t v8 = 2 * v7;
    if (2 * v7 <= 1) {
      uint64_t v8 = 1;
    }
    if (v7 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v9 = v8;
    }
    unsigned int v10 = operator new(v9);
    *unsigned int v10 = v4;
    int v6 = v10 + 1;
    *(void *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = v10 + 1;
    *(void *)(a1 + 72) = &v10[v9];
    if (v2) {
      operator delete(v2);
    }
  }
  else
  {
    *int v2 = v4;
    int v6 = v2 + 1;
  }
  int v11 = (const char *)(a1 + 80);
  *(void *)(a1 + 64) = v6;
  int v12 = *(_DWORD *)(a1 + 20);
  int v13 = 5;
  if ((v12 - 49) >= 9)
  {
    if (v12 != 48)
    {
      if (v12 == 45) {
        std::string::push_back((std::string *)(a1 + 80), 45);
      }
      int v50 = sub_215D35CD0(a1);
      if ((v50 - 49) < 9)
      {
        int v12 = *(_DWORD *)(a1 + 20);
        int v14 = 6;
        goto LABEL_15;
      }
      if (v50 != 48)
      {
        size_t v52 = "invalid number; expected digit after '-'";
        goto LABEL_128;
      }
      int v12 = *(_DWORD *)(a1 + 20);
      int v13 = 6;
    }
    std::string::push_back((std::string *)(a1 + 80), v12);
    int v53 = sub_215D35CD0(a1);
    if (v53 == 46)
    {
LABEL_80:
      std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 136));
      if (sub_215D35CD0(a1) - 48 > 9)
      {
        size_t v52 = "invalid number; expected digit after '.'";
        goto LABEL_128;
      }
      do
      {
        std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 20));
        int v49 = sub_215D35CD0(a1);
      }
      while ((v49 - 48) < 0xA);
      if (v49 != 101 && v49 != 69) {
        goto LABEL_103;
      }
    }
    else if (v53 != 69 && v53 != 101)
    {
      goto LABEL_104;
    }
    int v42 = *(_DWORD *)(a1 + 20);
LABEL_101:
    std::string::push_back((std::string *)(a1 + 80), v42);
    int v54 = sub_215D35CD0(a1);
    if ((v54 - 48) < 0xA) {
      goto LABEL_102;
    }
    if (v54 == 43 || v54 == 45)
    {
      std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 20));
      if (sub_215D35CD0(a1) - 48 < 0xA)
      {
        do
LABEL_102:
          std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 20));
        while (sub_215D35CD0(a1) - 48 < 0xA);
LABEL_103:
        int v13 = 7;
        goto LABEL_104;
      }
      size_t v52 = "invalid number; expected digit after exponent sign";
    }
    else
    {
      size_t v52 = "invalid number; expected '+', '-', or digit after exponent";
    }
LABEL_128:
    *(void *)(a1 + 104) = v52;
    return 14;
  }
  int v14 = 5;
LABEL_15:
  int v62 = v14;
  std::string::push_back((std::string *)(a1 + 80), v12);
  int64x2_t v63 = vdupq_n_s64(1uLL);
  while (1)
  {
    *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), v63);
    if (*(unsigned char *)(a1 + 24))
    {
      *(unsigned char *)(a1 + 24) = 0;
      int v18 = *(_DWORD *)(a1 + 20);
      if (v18 == -1) {
        goto LABEL_76;
      }
    }
    else
    {
      unint64_t v19 = *(unsigned char **)a1;
      if (*(void *)a1 == *(void *)(a1 + 8))
      {
        *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = -1;
LABEL_76:
        int v13 = v62;
        goto LABEL_104;
      }
      int v20 = *v19;
      LOBYTE(v18) = *v19;
      *(void *)a1 = v19 + 1;
      *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v20;
      if (v20 == -1) {
        goto LABEL_76;
      }
    }
    unint64_t v22 = *(unsigned char **)(a1 + 64);
    unint64_t v21 = *(void *)(a1 + 72);
    if ((unint64_t)v22 < v21)
    {
      unsigned char *v22 = v18;
      uint64_t v23 = (uint64_t)(v22 + 1);
      goto LABEL_53;
    }
    unint64_t v24 = (unsigned char *)*v3;
    unint64_t v25 = (unint64_t)&v22[-*v3];
    unint64_t v26 = v25 + 1;
    if ((uint64_t)(v25 + 1) < 0) {
      sub_215738AC0();
    }
    unint64_t v27 = v21 - (void)v24;
    if (2 * v27 > v26) {
      unint64_t v26 = 2 * v27;
    }
    if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v28 = v26;
    }
    if (!v28)
    {
      char v29 = 0;
      int64x2_t v30 = &v22[-*v3];
      *(unsigned char *)unint64_t v25 = v18;
      uint64_t v23 = v25 + 1;
      if (v22 == v24) {
        goto LABEL_51;
      }
LABEL_35:
      if (v25 >= 8 && (unint64_t)(v24 - v29) >= 0x20)
      {
        if (v25 < 0x20)
        {
          unint64_t v31 = 0;
          goto LABEL_43;
        }
        unint64_t v31 = v25 & 0xFFFFFFFFFFFFFFE0;
        long long v32 = &v29[v25 - 16];
        std::string v33 = (long long *)(v22 - 16);
        unint64_t v34 = v25 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v35 = *v33;
          *((_OWORD *)v32 - 1) = *(v33 - 1);
          *(_OWORD *)long long v32 = v35;
          v32 -= 32;
          v33 -= 2;
          v34 -= 32;
        }
        while (v34);
        if (v25 == v31) {
          goto LABEL_50;
        }
        if ((v25 & 0x18) != 0)
        {
LABEL_43:
          v30 -= v25 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v36 = &v29[&v22[-v31] - v24 - 8];
          long long v37 = (uint64_t *)&v22[-v31 - 8];
          unint64_t v38 = v31 - (v25 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v39 = *v37--;
            *(void *)uint64_t v36 = v39;
            v36 -= 8;
            v38 += 8;
          }
          while (v38);
          v22 -= v25 & 0xFFFFFFFFFFFFFFF8;
          if (v25 == (v25 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_50;
          }
          goto LABEL_48;
        }
        v30 -= v31;
        v22 -= v31;
      }
LABEL_48:
      uint64_t v40 = v30 - 1;
      do
      {
        char v41 = *--v22;
        *v40-- = v41;
      }
      while (v22 != v24);
LABEL_50:
      unint64_t v22 = (unsigned char *)*v3;
      int64x2_t v30 = v29;
      goto LABEL_51;
    }
    char v29 = (char *)operator new(v28);
    int64x2_t v30 = &v29[v25];
    v29[v25] = v18;
    uint64_t v23 = (uint64_t)&v29[v25 + 1];
    if (v22 != v24) {
      goto LABEL_35;
    }
LABEL_51:
    *(void *)(a1 + 56) = v30;
    *(void *)(a1 + 64) = v23;
    *(void *)(a1 + 72) = &v29[v28];
    if (v22) {
      operator delete(v22);
    }
LABEL_53:
    *(void *)(a1 + 64) = v23;
    int v42 = *(_DWORD *)(a1 + 20);
    if ((v42 - 48) >= 0xA) {
      break;
    }
    int v43 = *(char *)(a1 + 103);
    if (v43 < 0)
    {
      uint64_t v45 = *(void *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
      size_t v15 = v45 - 1;
      if (*(void *)(a1 + 88) != v45 - 1)
      {
        uint64_t v16 = *(char **)v11;
        size_t v15 = *(void *)(a1 + 88);
        goto LABEL_73;
      }
      if (v45 == 0x7FFFFFFFFFFFFFF8) {
        sub_215731CD8();
      }
      int v44 = *(char **)v11;
      if (v15 > 0x3FFFFFFFFFFFFFF2)
      {
        size_t v48 = 0x7FFFFFFFFFFFFFF7;
        uint64_t v16 = (char *)operator new(0x7FFFFFFFFFFFFFF7uLL);
        goto LABEL_69;
      }
    }
    else
    {
      if (*(unsigned char *)(a1 + 103) != 22)
      {
        size_t v15 = *(unsigned __int8 *)(a1 + 103);
        *(unsigned char *)(a1 + 103) = (v43 + 1) & 0x7F;
        uint64_t v16 = (char *)(a1 + 80);
        goto LABEL_17;
      }
      int v44 = (char *)(a1 + 80);
      size_t v15 = 22;
    }
    if (v15 + 1 > 2 * v15) {
      unint64_t v46 = v15 + 1;
    }
    else {
      unint64_t v46 = 2 * v15;
    }
    uint64_t v47 = (v46 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17) {
      uint64_t v47 = v46 | 7;
    }
    if (v46 >= 0x17) {
      size_t v48 = v47 + 1;
    }
    else {
      size_t v48 = 23;
    }
    uint64_t v16 = (char *)operator new(v48);
    if (!v15)
    {
LABEL_70:
      operator delete(v44);
      goto LABEL_71;
    }
LABEL_69:
    memmove(v16, v44, v15);
    if (v15 != 22) {
      goto LABEL_70;
    }
LABEL_71:
    *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v16;
    *(void *)(a1 + 96) = v48 | 0x8000000000000000;
LABEL_73:
    *(void *)(a1 + 88) = v15 + 1;
LABEL_17:
    int v17 = &v16[v15];
    char *v17 = v42;
    v17[1] = 0;
  }
  if (v42 > 68)
  {
    int v13 = v62;
    if (v42 != 69 && v42 != 101) {
      goto LABEL_104;
    }
    goto LABEL_101;
  }
  int v13 = v62;
  if (v42 == 10)
  {
    uint64_t v51 = *(void *)(a1 + 48) + 1;
    *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
    *(void *)(a1 + 48) = v51;
  }
  else if (v42 == 46)
  {
    goto LABEL_80;
  }
LABEL_104:
  unint64_t v55 = (void *)(a1 + 40);
  uint64_t v56 = *(void *)(a1 + 40);
  *(unsigned char *)(a1 + 24) = 1;
  --*(void *)(a1 + 32);
  if (v56 || (unint64_t v55 = (void *)(a1 + 48), (v56 = *(void *)(a1 + 48)) != 0)) {
    void *v55 = v56 - 1;
  }
  if (*(_DWORD *)(a1 + 20) != -1) {
    --*(void *)(a1 + 64);
  }
  __endptr = 0;
  *__error() = 0;
  if (v13 == 6)
  {
    uint64_t v60 = (const char *)(a1 + 80);
    if (*(char *)(a1 + 103) < 0) {
      uint64_t v60 = *(const char **)v11;
    }
    uint64_t v61 = strtoll(v60, &__endptr, 10);
    if (*__error()) {
      goto LABEL_118;
    }
    *(void *)(a1 + 112) = v61;
    return 6;
  }
  else
  {
    if (v13 == 5)
    {
      int v57 = (const char *)(a1 + 80);
      if (*(char *)(a1 + 103) < 0) {
        int v57 = *(const char **)v11;
      }
      unint64_t v58 = strtoull(v57, &__endptr, 10);
      if (!*__error())
      {
        *(void *)(a1 + 12std::__fs::filesystem::__rename(__from, __to, 0) = v58;
        return 5;
      }
    }
LABEL_118:
    if (*(char *)(a1 + 103) < 0) {
      int v11 = *(const char **)v11;
    }
    *(double *)(a1 + 128) = strtod(v11, &__endptr);
    return 7;
  }
}

uint64_t sub_215D35CD0(uint64_t a1)
{
  *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
  if (*(unsigned char *)(a1 + 24))
  {
    *(unsigned char *)(a1 + 24) = 0;
    int v2 = *(_DWORD *)(a1 + 20);
    if (v2 != -1) {
      goto LABEL_3;
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v16 = *(unsigned char **)a1;
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = -1;
    return 0xFFFFFFFFLL;
  }
  int v17 = *v16;
  LOBYTE(v2) = *v16;
  *(void *)a1 = v16 + 1;
  *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v17;
  if (v17 == -1) {
    return 0xFFFFFFFFLL;
  }
LABEL_3:
  int v4 = *(unsigned char **)(a1 + 64);
  unint64_t v3 = *(void *)(a1 + 72);
  if ((unint64_t)v4 < v3)
  {
    unsigned char *v4 = v2;
    uint64_t v5 = (uint64_t)(v4 + 1);
    goto LABEL_36;
  }
  int v6 = (unsigned char **)(a1 + 56);
  unint64_t v7 = *(unsigned char **)(a1 + 56);
  unint64_t v8 = v4 - v7;
  uint64_t v9 = v4 - v7 + 1;
  if (v9 < 0) {
    sub_215738AC0();
  }
  unint64_t v10 = v3 - (void)v7;
  if (2 * v10 > v9) {
    uint64_t v9 = 2 * v10;
  }
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v11 = v9;
  }
  if (v11)
  {
    int v12 = operator new(v11);
    int v13 = &v12[v8];
    int v14 = &v12[v11];
    v12[v8] = v2;
    uint64_t v5 = (uint64_t)&v12[v8 + 1];
    if (v4 != v7)
    {
LABEL_13:
      if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20) {
        goto LABEL_32;
      }
      if (v8 >= 0x20)
      {
        unint64_t v15 = v8 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v19 = (long long *)(v4 - 16);
        int v20 = &v12[v4 - 16 - v7];
        unint64_t v21 = v8 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v22 = *v19;
          *(v20 - 1) = *(v19 - 1);
          *int v20 = v22;
          v20 -= 2;
          v19 -= 2;
          v21 -= 32;
        }
        while (v21);
        if (v8 == v15)
        {
LABEL_34:
          int v4 = *v6;
          *(void *)(a1 + 56) = v12;
          *(void *)(a1 + 64) = v5;
          *(void *)(a1 + 72) = v14;
          if (!v4) {
            goto LABEL_36;
          }
          goto LABEL_35;
        }
        if ((v8 & 0x18) == 0)
        {
          v13 -= v15;
          v4 -= v15;
          goto LABEL_32;
        }
      }
      else
      {
        unint64_t v15 = 0;
      }
      v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v23 = &v4[-v15 - 8];
      unint64_t v24 = &v12[v23 - v7];
      unint64_t v25 = v15 - (v8 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v26 = *(void *)v23;
        v23 -= 8;
        *v24-- = v26;
        v25 += 8;
      }
      while (v25);
      v4 -= v8 & 0xFFFFFFFFFFFFFFF8;
      if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_34;
      }
LABEL_32:
      unint64_t v27 = v13 - 1;
      do
      {
        char v28 = *--v4;
        *v27-- = v28;
      }
      while (v4 != v7);
      goto LABEL_34;
    }
  }
  else
  {
    int v12 = 0;
    int v13 = (char *)(v4 - v7);
    int v14 = 0;
    *(unsigned char *)unint64_t v8 = v2;
    uint64_t v5 = v8 + 1;
    if (v4 != v7) {
      goto LABEL_13;
    }
  }
  *(void *)(a1 + 56) = v13;
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v14;
  if (v4) {
LABEL_35:
  }
    operator delete(v4);
LABEL_36:
  *(void *)(a1 + 64) = v5;
  uint64_t result = *(unsigned int *)(a1 + 20);
  if (result == 10)
  {
    uint64_t v29 = *(void *)(a1 + 48) + 1;
    *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
    *(void *)(a1 + 48) = v29;
  }
  return result;
}

uint64_t sub_215D35F24(uint64_t a1)
{
  sub_215D35CD0(a1);
  int v2 = *(_DWORD *)(a1 + 20);
  int v3 = v2 - 48;
  if ((v2 - 48) < 0xA)
  {
LABEL_4:
    sub_215D35CD0(a1);
    int v4 = *(_DWORD *)(a1 + 20);
    int v5 = v4 - 48;
    if ((v4 - 48) < 0xA) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  if ((v2 - 65) <= 5)
  {
    int v3 = v2 - 55;
    goto LABEL_4;
  }
  if ((v2 - 97) > 5) {
    return 0xFFFFFFFFLL;
  }
  int v3 = v2 - 87;
  sub_215D35CD0(a1);
  int v4 = *(_DWORD *)(a1 + 20);
  int v5 = v4 - 48;
  if ((v4 - 48) < 0xA)
  {
LABEL_5:
    sub_215D35CD0(a1);
    int v6 = *(_DWORD *)(a1 + 20);
    int v7 = v6 - 48;
    if ((v6 - 48) < 0xA) {
      goto LABEL_6;
    }
LABEL_12:
    if ((v6 - 65) < 6)
    {
      int v7 = v6 - 55;
      sub_215D35CD0(a1);
      int v8 = *(_DWORD *)(a1 + 20);
      int v9 = v8 - 48;
      if ((v8 - 48) < 0xA) {
        return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
      }
      goto LABEL_20;
    }
    if ((v6 - 97) > 5) {
      return 0xFFFFFFFFLL;
    }
    int v7 = v6 - 87;
    sub_215D35CD0(a1);
    int v8 = *(_DWORD *)(a1 + 20);
    int v9 = v8 - 48;
    if ((v8 - 48) >= 0xA) {
      goto LABEL_20;
    }
    return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
  }
LABEL_10:
  if ((v4 - 65) >= 6)
  {
    if ((v4 - 97) > 5) {
      return 0xFFFFFFFFLL;
    }
    int v5 = v4 - 87;
    sub_215D35CD0(a1);
    int v6 = *(_DWORD *)(a1 + 20);
    int v7 = v6 - 48;
    if ((v6 - 48) >= 0xA) {
      goto LABEL_12;
    }
  }
  else
  {
    int v5 = v4 - 55;
    sub_215D35CD0(a1);
    int v6 = *(_DWORD *)(a1 + 20);
    int v7 = v6 - 48;
    if ((v6 - 48) >= 0xA) {
      goto LABEL_12;
    }
  }
LABEL_6:
  sub_215D35CD0(a1);
  int v8 = *(_DWORD *)(a1 + 20);
  int v9 = v8 - 48;
  if ((v8 - 48) < 0xA) {
    return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
  }
LABEL_20:
  if ((v8 - 65) < 6)
  {
    int v9 = v8 - 55;
    return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
  }
  if ((v8 - 97) <= 5)
  {
    int v9 = v8 - 87;
    return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_215D360D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 120;
  uint64_t v5 = a1 + 40;
  size_t v52 = 0;
  unint64_t v53 = 0;
  uint64_t v54 = 0;
  int v6 = (unsigned __int8 *)(a2 + 136);
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v49.__vftable) = 1;
        sub_215D3AFA8((unsigned __int8 **)a2, (unsigned __int8 *)&v49, 0);
        goto LABEL_19;
      case 2:
        LOBYTE(v49.__vftable) = 0;
        sub_215D3AFA8((unsigned __int8 **)a2, (unsigned __int8 *)&v49, 0);
        goto LABEL_19;
      case 3:
        v49.__vftable = 0;
        sub_215D3B1C8((unsigned __int8 **)a2, (uint64_t)&v49, 0);
        goto LABEL_19;
      case 4:
        sub_215D3B5FC((unsigned __int8 **)a2, v4, 0);
        goto LABEL_19;
      case 5:
        v49.__vftable = *(std::runtime_error_vtbl **)(a1 + 160);
        sub_215D3B868((unsigned __int8 **)a2, (uint64_t *)&v49, 0);
        goto LABEL_19;
      case 6:
        v49.__vftable = *(std::runtime_error_vtbl **)(a1 + 152);
        sub_215D3B3E0((unsigned __int8 **)a2, (uint64_t *)&v49, 0);
        goto LABEL_19;
      case 7:
        if ((*(void *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v49.__vftable = *(std::runtime_error_vtbl **)(a1 + 168);
          sub_215D3AD88((unsigned __int8 **)a2, (uint64_t *)&v49, 0);
          goto LABEL_19;
        }
        uint64_t v43 = *(void *)(a1 + 72);
        sub_215D36DD4(v5, &v51);
        sub_215D36DD4(v5, &v46);
        sub_215AC8CC8("number overflow parsing '", &v46, &__p);
        sub_215AEDCD0("'", &__p, &v48);
        sub_215D3A1E4(406, (uint64_t)&v48, (uint64_t)&v49);
        uint64_t v34 = sub_215D3A184(a2, v43, (uint64_t)&v51, (uint64_t)&v49);
        sub_215D3A384(&v49);
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
        goto LABEL_83;
      case 8:
        if (!sub_215D39CB4(a2, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_74;
        }
        int v7 = sub_215D33870(v5);
        *(_DWORD *)(a1 + 32) = v7;
        if (v7 == 10)
        {
          char v8 = sub_215D3A034(a2);
          goto LABEL_13;
        }
        unint64_t v28 = v53;
        if (v53 == v54 << 6)
        {
          if ((uint64_t)(v53 + 1) < 0) {
            sub_215D2CB08();
          }
          unint64_t v29 = v54 << 7;
          if (v54 << 7 <= (v53 & 0xFFFFFFFFFFFFFFC0) + 64) {
            unint64_t v29 = (v53 & 0xFFFFFFFFFFFFFFC0) + 64;
          }
          if (v53 <= 0x3FFFFFFFFFFFFFFELL) {
            unint64_t v30 = v29;
          }
          else {
            unint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
          }
          sub_215D39348((uint64_t)&v52, v30);
          unint64_t v28 = v53;
        }
        unint64_t v53 = v28 + 1;
        *(void *)&v52[(v28 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v28;
        continue;
      case 9:
        if ((sub_215D3945C(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0) {
          goto LABEL_74;
        }
        int v9 = sub_215D33870(v5);
        *(_DWORD *)(a1 + 32) = v9;
        if (v9 != 11)
        {
          if (v9 != 4) {
            goto LABEL_80;
          }
          if (!sub_215D39A7C(a2, v4)) {
            goto LABEL_74;
          }
          int v31 = sub_215D33870(v5);
          *(_DWORD *)(a1 + 32) = v31;
          if (v31 != 12) {
            goto LABEL_81;
          }
          unint64_t v32 = v53;
          if (v53 == v54 << 6)
          {
            if ((uint64_t)(v53 + 1) < 0) {
              sub_215D2CB08();
            }
            if (v53 > 0x3FFFFFFFFFFFFFFELL)
            {
              unint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else if (v54 << 7 <= (v53 & 0xFFFFFFFFFFFFFFC0) + 64)
            {
              unint64_t v33 = (v53 & 0xFFFFFFFFFFFFFFC0) + 64;
            }
            else
            {
              unint64_t v33 = v54 << 7;
            }
            sub_215D39348((uint64_t)&v52, v33);
            unint64_t v32 = v53;
          }
          unint64_t v53 = v32 + 1;
          *(void *)&v52[(v32 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v32);
          *(_DWORD *)(a1 + 32) = sub_215D33870(v5);
          continue;
        }
        char v8 = sub_215D397D8(a2);
LABEL_13:
        if ((v8 & 1) == 0)
        {
LABEL_74:
          uint64_t v34 = 0;
          goto LABEL_65;
        }
LABEL_19:
        unint64_t v10 = v53;
        if (!v53)
        {
LABEL_64:
          uint64_t v34 = 1;
          goto LABEL_65;
        }
        while (2)
        {
          if ((*(void *)&v52[((v10 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v10 - 1)))
          {
            int v11 = sub_215D33870(v5);
            *(_DWORD *)(a1 + 32) = v11;
            if (v11 == 13) {
              goto LABEL_42;
            }
            if (v11 != 10)
            {
              uint64_t v38 = *(void *)(a1 + 72);
              sub_215D36DD4(v5, &v51);
              std::string v48 = *(std::string *)(a1 + 72);
              sub_215732BF4(&v46, "array");
              sub_215D37238(a1, 0xAu, (const void **)&v46.__r_.__value_.__l.__data_, (uint64_t)&__p);
              sub_215D36EC8(101, (uint64_t *)&v48, (uint64_t)&__p, (uint64_t)&v49);
              uint64_t v39 = sub_215D36D74(a2, v38, (uint64_t)&v51, (uint64_t)&v49);
              goto LABEL_82;
            }
            uint64_t v12 = *(void *)(a2 + 16);
            uint64_t v14 = *(void *)(v12 - 8);
            uint64_t v13 = v12 - 8;
            if (v14)
            {
              LODWORD(v51.__r_.__value_.__l.__data_) = ((*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3) - 1;
              v48.__r_.__value_.__s.__data_[0] = 3;
              uint64_t v15 = *(void *)(a2 + 120);
              if (!v15) {
                sub_21573D7DC();
              }
              if ((*(uint64_t (**)(uint64_t, std::string *, std::string *))(*(void *)v15 + 48))(v15, &v51, &v48))
              {
                *(void *)(a2 + 16) -= 8;
                goto LABEL_32;
              }
              sub_215D31DE4((uint64_t)&v49, v6);
              int v17 = *(unsigned __int8 **)(*(void *)(a2 + 16) - 8);
              int v18 = *v17;
              unsigned __int8 *v17 = v49.__vftable;
              LOBYTE(v49.__vftable) = v18;
              unint64_t v19 = (const char *)*((void *)v17 + 1);
              *((void *)v17 + 1) = v49.__imp_.__imp_;
              v49.__imp_.__imp_ = v19;
              sub_215CE9D14((uint64_t *)&v49.__imp_, v18);
              uint64_t v21 = *(void *)(a2 + 8);
              uint64_t v20 = *(void *)(a2 + 16);
              *(void *)(a2 + 16) = v20 - 8;
              --*(void *)(a2 + 40);
              if (v21 != v20 - 8)
              {
                uint64_t v22 = *(void *)(v20 - 16);
                if (*(unsigned char *)v22 == 2)
                {
                  uint64_t v23 = *(void *)(v22 + 8);
                  uint64_t v24 = *(void *)(v23 + 8);
                  int v25 = *(unsigned __int8 *)(v24 - 16);
                  v24 -= 16;
                  sub_215CE9D14((uint64_t *)(v24 + 8), v25);
                  *(void *)(v23 + 8) = v24;
                }
              }
            }
            else
            {
              *(void *)(a2 + 16) = v13;
LABEL_32:
              --*(void *)(a2 + 40);
            }
LABEL_33:
            unint64_t v10 = v53 - 1;
            unint64_t v53 = v10;
            if (!v10) {
              goto LABEL_64;
            }
            continue;
          }
          break;
        }
        int v16 = sub_215D33870(v5);
        *(_DWORD *)(a1 + 32) = v16;
        if (v16 != 13)
        {
          if (v16 != 11)
          {
            uint64_t v40 = *(void *)(a1 + 72);
            sub_215D36DD4(v5, &v51);
            std::string v48 = *(std::string *)(a1 + 72);
            sub_215732BF4(&v46, "object");
            sub_215D37238(a1, 0xBu, (const void **)&v46.__r_.__value_.__l.__data_, (uint64_t)&__p);
            sub_215D36EC8(101, (uint64_t *)&v48, (uint64_t)&__p, (uint64_t)&v49);
            uint64_t v39 = sub_215D36D74(a2, v40, (uint64_t)&v51, (uint64_t)&v49);
            goto LABEL_82;
          }
          if ((sub_215D397D8(a2) & 1) == 0) {
            goto LABEL_74;
          }
          goto LABEL_33;
        }
        int v26 = sub_215D33870(v5);
        *(_DWORD *)(a1 + 32) = v26;
        if (v26 != 4)
        {
LABEL_80:
          uint64_t v41 = *(void *)(a1 + 72);
          sub_215D36DD4(v5, &v51);
          std::string v48 = *(std::string *)(a1 + 72);
          sub_215732BF4(&v46, "object key");
          sub_215D37238(a1, 4u, (const void **)&v46.__r_.__value_.__l.__data_, (uint64_t)&__p);
          sub_215D36EC8(101, (uint64_t *)&v48, (uint64_t)&__p, (uint64_t)&v49);
          uint64_t v39 = sub_215D36D74(a2, v41, (uint64_t)&v51, (uint64_t)&v49);
          goto LABEL_82;
        }
        if (!sub_215D39A7C(a2, v4)) {
          goto LABEL_74;
        }
        int v27 = sub_215D33870(v5);
        *(_DWORD *)(a1 + 32) = v27;
        if (v27 == 12)
        {
LABEL_42:
          *(_DWORD *)(a1 + 32) = sub_215D33870(v5);
          continue;
        }
LABEL_81:
        uint64_t v42 = *(void *)(a1 + 72);
        sub_215D36DD4(v5, &v51);
        std::string v48 = *(std::string *)(a1 + 72);
        sub_215732BF4(&v46, "object separator");
        sub_215D37238(a1, 0xCu, (const void **)&v46.__r_.__value_.__l.__data_, (uint64_t)&__p);
        sub_215D36EC8(101, (uint64_t *)&v48, (uint64_t)&__p, (uint64_t)&v49);
        uint64_t v39 = sub_215D36D74(a2, v42, (uint64_t)&v51, (uint64_t)&v49);
LABEL_82:
        uint64_t v34 = v39;
        sub_215D37928(&v49);
LABEL_83:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_88;
          }
LABEL_85:
          if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
LABEL_89:
          }
            operator delete(v51.__r_.__value_.__l.__data_);
        }
        else
        {
          if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_85;
          }
LABEL_88:
          operator delete(v46.__r_.__value_.__l.__data_);
          if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_89;
          }
        }
LABEL_65:
        if (v52) {
          operator delete(v52);
        }
        return v34;
      case 0xE:
        sub_215D36DD4(v5, &v51);
        std::string v48 = *(std::string *)(a1 + 72);
        *((unsigned char *)&v46.__r_.__value_.__s + 23) = 5;
        strcpy((char *)&v46, "value");
        sub_215D37238(a1, 0, (const void **)&v46.__r_.__value_.__l.__data_, (uint64_t)&__p);
        sub_215D36EC8(101, (uint64_t *)&v48, (uint64_t)&__p, (uint64_t)&v49);
        *(unsigned char *)(a2 + 88) = 1;
        if (*(unsigned char *)(a2 + 128))
        {
          exception = __cxa_allocate_exception(0x28uLL);
          long long v37 = (void *)sub_215D3BA88((uint64_t)exception, (uint64_t)&v49);
          __cxa_throw(v37, (struct type_info *)&unk_26C684770, (void (*)(void *))sub_215D37928);
        }
        goto LABEL_71;
      default:
        sub_215D36DD4(v5, &v51);
        std::string v48 = *(std::string *)(a1 + 72);
        *((unsigned char *)&v46.__r_.__value_.__s + 23) = 5;
        strcpy((char *)&v46, "value");
        sub_215D37238(a1, 0x10u, (const void **)&v46.__r_.__value_.__l.__data_, (uint64_t)&__p);
        sub_215D36EC8(101, (uint64_t *)&v48, (uint64_t)&__p, (uint64_t)&v49);
        *(unsigned char *)(a2 + 88) = 1;
        if (*(unsigned char *)(a2 + 128))
        {
          int v44 = __cxa_allocate_exception(0x28uLL);
          uint64_t v45 = (void *)sub_215D3BA88((uint64_t)v44, (uint64_t)&v49);
          __cxa_throw(v45, (struct type_info *)&unk_26C684770, (void (*)(void *))sub_215D37928);
        }
LABEL_71:
        v49.__vftable = (std::runtime_error_vtbl *)&unk_26C684698;
        std::runtime_error::~runtime_error(&v50);
        std::exception::~exception(&v49);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_73:
            if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_74;
            }
            goto LABEL_77;
          }
        }
        else if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_73;
        }
        operator delete(v46.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_74;
        }
LABEL_77:
        operator delete(v51.__r_.__value_.__l.__data_);
        goto LABEL_74;
    }
  }
}

void sub_215D36B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::runtime_error a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  sub_215D37928(&a28);
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
LABEL_3:
    if (a37 < 0) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  operator delete(a9);
  if (a37 < 0)
  {
LABEL_4:
    operator delete(a32);
    uint64_t v39 = *(void **)(v37 - 112);
    if (v39)
    {
LABEL_10:
      operator delete(v39);
      _Unwind_Resume(a1);
    }
LABEL_9:
    _Unwind_Resume(a1);
  }
LABEL_8:
  uint64_t v39 = *(void **)(v37 - 112);
  if (v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

uint64_t sub_215D36D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + 88) = 1;
  if (*(unsigned char *)(a1 + 128))
  {
    exception = __cxa_allocate_exception(0x28uLL);
    int v7 = (void *)sub_215D3BA88((uint64_t)exception, a4);
    __cxa_throw(v7, (struct type_info *)&unk_26C684770, (void (*)(void *))sub_215D37928);
  }
  return 0;
}

void sub_215D36DD4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  int v3 = *(unsigned __int8 **)(a1 + 56);
  for (uint64_t i = *(unsigned __int8 **)(a1 + 64); v3 != i; ++v3)
  {
    unsigned int v5 = *v3;
    if (v5 > 0x1F)
    {
      std::string::push_back(a2, v5);
    }
    else
    {
      char v8 = 0;
      *(void *)std::string __str = 0;
      snprintf(__str, 9uLL, "<U+%.4X>", v5);
      size_t v6 = strlen(__str);
      std::string::append(a2, __str, v6);
    }
  }
}

void sub_215D36EA8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D36EC8(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v25 = 11;
  strcpy((char *)v24, "parse_error");
  sub_215D2E030(v24, a1, &v26);
  char v8 = std::string::append(&v26, "parse error", 0xBuLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  sub_215D3BB6C((uint64_t)a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v12 = std::string::append(&v27, (const std::string::value_type *)p_p, size);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  uint64_t v14 = std::string::append(&v28, ": ", 2uLL);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  int v16 = *(char *)(a3 + 23);
  if (v16 >= 0) {
    int v17 = (const std::string::value_type *)a3;
  }
  else {
    int v17 = *(const std::string::value_type **)a3;
  }
  if (v16 >= 0) {
    std::string::size_type v18 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v18 = *(void *)(a3 + 8);
  }
  unint64_t v19 = std::string::append(&v29, v17, v18);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  int64_t v31 = v19->__r_.__value_.__r.__words[2];
  long long v30 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v29.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_26;
    }
  }
  else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v28.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
LABEL_28:
    operator delete(v26.__r_.__value_.__l.__data_);
    if ((v25 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_29;
  }
LABEL_27:
  operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_28;
  }
LABEL_18:
  if ((v25 & 0x80000000) == 0) {
    goto LABEL_19;
  }
LABEL_29:
  operator delete((void *)v24[0]);
LABEL_19:
  uint64_t v21 = *a2;
  if (v31 >= 0) {
    uint64_t v22 = (const char *)&v30;
  }
  else {
    uint64_t v22 = (const char *)v30;
  }
  *(void *)a4 = &unk_26C684698;
  *(_DWORD *)(a4 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a4 + 16), v22);
  *(void *)a4 = &unk_26C684798;
  *(void *)(a4 + 32) = v21;
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)v30);
  }
}

void sub_215D37134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  std::exception::~exception(v40);
  if (*(char *)(v41 - 57) < 0) {
    operator delete(*(void **)(v41 - 80));
  }
  _Unwind_Resume(a1);
}

void sub_215D37238(uint64_t a1@<X0>, unsigned int a2@<W1>, const void **a3@<X2>, uint64_t a4@<X8>)
{
  *(unsigned char *)(a4 + 23) = 13;
  strcpy((char *)a4, "syntax error ");
  int v7 = *((char *)a3 + 23);
  if (v7 >= 0) {
    size_t v8 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v8 = (size_t)a3[1];
  }
  if (v8)
  {
    unint64_t v9 = v8 + 14;
    if (v8 + 14 > 0x7FFFFFFFFFFFFFF7) {
      sub_215731CD8();
    }
    if (v9 > 0x16)
    {
      uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v12 = v9 | 7;
      }
      uint64_t v13 = v12 + 1;
      int v11 = (char *)operator new(v12 + 1);
      v61.__r_.__value_.__l.__size_ = v8 + 14;
      v61.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    }
    else
    {
      memset(&v61, 0, sizeof(v61));
      int v11 = (char *)&v61;
      *((unsigned char *)&v61.__r_.__value_.__s + 23) = v8 + 14;
    }
    qmemcpy(v11, "while parsing ", 14);
    uint64_t v14 = v11 + 14;
    if (v7 >= 0) {
      long long v15 = a3;
    }
    else {
      long long v15 = *a3;
    }
    memmove(v11 + 14, v15, v8);
    v14[v8] = 0;
    int v16 = std::string::append(&v61, " ", 1uLL);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    int64_t v63 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (v63 >= 0) {
      std::string::size_type v18 = __p;
    }
    else {
      std::string::size_type v18 = (void **)__p[0];
    }
    if (v63 >= 0) {
      std::string::size_type v19 = HIBYTE(v63);
    }
    else {
      std::string::size_type v19 = (std::string::size_type)__p[1];
    }
    std::string::append((std::string *)a4, (const std::string::value_type *)v18, v19);
    if (SHIBYTE(v63) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_22;
      }
    }
    else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v61.__r_.__value_.__l.__data_);
  }
LABEL_22:
  std::string::append((std::string *)a4, "- ", 2uLL);
  uint64_t v20 = *(int *)(a1 + 32);
  if (v20 != 14)
  {
    if (v20 > 0x10) {
      char v25 = "unknown token";
    }
    else {
      char v25 = off_26425AD30[v20];
    }
    size_t v26 = strlen(v25);
    if (v26 > 0x7FFFFFFFFFFFFFF7) {
      sub_215731CD8();
    }
    std::string::size_type v27 = v26;
    if (v26 >= 0x17)
    {
      uint64_t v41 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17) {
        uint64_t v41 = v26 | 7;
      }
      uint64_t v42 = v41 + 1;
      std::string v28 = operator new(v41 + 1);
      v61.__r_.__value_.__l.__size_ = v27;
      v61.__r_.__value_.__r.__words[2] = v42 | 0x8000000000000000;
      v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
    }
    else
    {
      *((unsigned char *)&v61.__r_.__value_.__s + 23) = v26;
      std::string v28 = &v61;
      if (!v26) {
        goto LABEL_60;
      }
    }
    memcpy(v28, v25, v27);
LABEL_60:
    *((unsigned char *)v28 + v27) = 0;
    uint64_t v43 = std::string::insert(&v61, 0, "unexpected ", 0xBuLL);
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    int64_t v63 = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    if (v63 >= 0) {
      uint64_t v45 = __p;
    }
    else {
      uint64_t v45 = (void **)__p[0];
    }
    if (v63 >= 0) {
      std::string::size_type v46 = HIBYTE(v63);
    }
    else {
      std::string::size_type v46 = (std::string::size_type)__p[1];
    }
    std::string::append((std::string *)a4, (const std::string::value_type *)v45, v46);
    if (SHIBYTE(v63) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_79;
      }
    }
    else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_79;
    }
    uint64_t v47 = (void *)v61.__r_.__value_.__r.__words[0];
    goto LABEL_78;
  }
  uint64_t v21 = *(const char **)(a1 + 144);
  size_t v22 = strlen(v21);
  if (v22 > 0x7FFFFFFFFFFFFFF7) {
    sub_215731CD8();
  }
  std::string::size_type v23 = v22;
  if (v22 >= 0x17)
  {
    uint64_t v29 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17) {
      uint64_t v29 = v22 | 7;
    }
    uint64_t v30 = v29 + 1;
    p_dsint t = (std::string *)operator new(v29 + 1);
    __dst.__r_.__value_.__l.__size_ = v23;
    __dst.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_37;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v22;
  p_dsint t = &__dst;
  if (v22) {
LABEL_37:
  }
    memmove(p_dst, v21, v23);
  p_dst->__r_.__value_.__s.__data_[v23] = 0;
  int64_t v31 = std::string::append(&__dst, "; last read: '", 0xEuLL);
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  sub_215D36DD4(a1 + 40, &v58);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v33 = &v58;
  }
  else {
    unint64_t v33 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v58.__r_.__value_.__l.__size_;
  }
  long long v35 = std::string::append(&v60, (const std::string::value_type *)v33, size);
  long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  uint64_t v37 = std::string::append(&v61, "'", 1uLL);
  long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  int64_t v63 = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (v63 >= 0) {
    uint64_t v39 = __p;
  }
  else {
    uint64_t v39 = (void **)__p[0];
  }
  if (v63 >= 0) {
    std::string::size_type v40 = HIBYTE(v63);
  }
  else {
    std::string::size_type v40 = (std::string::size_type)__p[1];
  }
  std::string::append((std::string *)a4, (const std::string::value_type *)v39, v40);
  if (SHIBYTE(v63) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_52:
      if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_53;
      }
      goto LABEL_75;
    }
  }
  else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_52;
  }
  operator delete(v61.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_53:
    if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_54;
    }
LABEL_76:
    operator delete(v60.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_79;
    }
    goto LABEL_77;
  }
LABEL_75:
  operator delete(v58.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_76;
  }
LABEL_54:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_79;
  }
LABEL_77:
  uint64_t v47 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_78:
  operator delete(v47);
LABEL_79:
  if (!a2) {
    return;
  }
  if (a2 > 0x10) {
    std::string v48 = "unknown token";
  }
  else {
    std::string v48 = off_26425ADB8[a2 - 1];
  }
  size_t v49 = strlen(v48);
  if (v49 > 0x7FFFFFFFFFFFFFF7) {
    sub_215731CD8();
  }
  std::string::size_type v50 = v49;
  if (v49 >= 0x17)
  {
    uint64_t v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17) {
      uint64_t v52 = v49 | 7;
    }
    uint64_t v53 = v52 + 1;
    std::string v51 = operator new(v52 + 1);
    v61.__r_.__value_.__l.__size_ = v50;
    v61.__r_.__value_.__r.__words[2] = v53 | 0x8000000000000000;
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
    goto LABEL_90;
  }
  *((unsigned char *)&v61.__r_.__value_.__s + 23) = v49;
  std::string v51 = &v61;
  if (v49) {
LABEL_90:
  }
    memcpy(v51, v48, v50);
  *((unsigned char *)v51 + v5std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v54 = std::string::insert(&v61, 0, "; expected ", 0xBuLL);
  long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  int64_t v63 = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (v63 >= 0) {
    uint64_t v56 = __p;
  }
  else {
    uint64_t v56 = (void **)__p[0];
  }
  if (v63 >= 0) {
    std::string::size_type v57 = HIBYTE(v63);
  }
  else {
    std::string::size_type v57 = (std::string::size_type)__p[1];
  }
  std::string::append((std::string *)a4, (const std::string::value_type *)v56, v57);
  if ((SHIBYTE(v63) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_101:
    operator delete(v61.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_101;
  }
}

void sub_215D37800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
  {
    operator delete(__p);
    if (a33 < 0)
    {
LABEL_5:
      operator delete(a28);
      if (a14 < 0)
      {
LABEL_8:
        operator delete(a9);
        if ((a26 & 0x80000000) == 0) {
          goto LABEL_9;
        }
        goto LABEL_12;
      }
LABEL_11:
      if ((a26 & 0x80000000) == 0)
      {
LABEL_9:
        if ((a20 & 0x80000000) == 0)
        {
LABEL_14:
          if (*(char *)(v40 + 23) < 0) {
            operator delete(*(void **)v40);
          }
          _Unwind_Resume(a1);
        }
LABEL_13:
        operator delete(a15);
        goto LABEL_14;
      }
LABEL_12:
      operator delete(a21);
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  else if (a33 < 0)
  {
    goto LABEL_5;
  }
  if (a14 < 0) {
    goto LABEL_8;
  }
  goto LABEL_11;
}

void sub_215D37928(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26C684698;
  std::runtime_error::~runtime_error(a1 + 1);

  std::exception::~exception(a1);
}

uint64_t sub_215D3797C(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v187 = a1 + 120;
  uint64_t v3 = a1 + 40;
  uint64_t v195 = 0;
  unint64_t v196 = 0;
  uint64_t v197 = 0;
  unint64_t v186 = (uint64_t **)(a2 + 1);
  unsigned int v4 = *(_DWORD *)(a1 + 32) - 1;
  if (v4 > 0xD)
  {
LABEL_2:
    sub_215D36DD4(v3, &v194);
    std::string v191 = *(std::string *)(a1 + 72);
    *((unsigned char *)&v189.__r_.__value_.__s + 23) = 5;
    strcpy((char *)&v189, "value");
    sub_215D37238(a1, 0x10u, (const void **)&v189.__r_.__value_.__l.__data_, (uint64_t)&__p);
    sub_215D36EC8(101, (uint64_t *)&v191, (uint64_t)&__p, (uint64_t)&v192);
    *((unsigned char *)a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 1;
    if (*((unsigned char *)a2 + 41))
    {
      exception = __cxa_allocate_exception(0x28uLL);
      size_t v6 = (void *)sub_215D3BA88((uint64_t)exception, (uint64_t)&v192);
      __cxa_throw(v6, (struct type_info *)&unk_26C684770, (void (*)(void *))sub_215D37928);
    }
LABEL_269:
    v192.__vftable = (std::runtime_error_vtbl *)&unk_26C684698;
    std::runtime_error::~runtime_error(&v193);
    std::exception::~exception(&v192);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v189.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_271:
        if ((SHIBYTE(v194.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_272:
          uint64_t v176 = 0;
          goto LABEL_265;
        }
LABEL_275:
        operator delete(v194.__r_.__value_.__l.__data_);
        goto LABEL_272;
      }
    }
    else if ((SHIBYTE(v189.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_271;
    }
    operator delete(v189.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v194.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_272;
    }
    goto LABEL_275;
  }
  while (2)
  {
    switch(v4)
    {
      case 0u:
        v191.__r_.__value_.__s.__data_[0] = 1;
        uint64_t v40 = a2[2];
        if (a2[1] == v40)
        {
          unint64_t v82 = *a2;
          int v80 = **a2;
          unsigned __int8 *v82 = 4;
          LOBYTE(v192.__vftable) = v80;
          unint64_t v83 = (const char *)*((void *)v82 + 1);
          *((void *)v82 + 1) = 1;
          goto LABEL_93;
        }
        uint64_t v41 = *((void *)v40 - 1);
        if (*(unsigned char *)v41 != 2)
        {
          char v90 = a2[4];
          int v80 = *v90;
          *char v90 = 4;
          v194.__r_.__value_.__s.__data_[0] = v80;
          std::string::size_type v91 = *((void *)v90 + 1);
          *((void *)v90 + 1) = 1;
          goto LABEL_102;
        }
        uint64_t v38 = *(void *)(v41 + 8);
        unint64_t v42 = *(void *)(v38 + 8);
        if (v42 >= *(void *)(v38 + 16)) {
          goto LABEL_213;
        }
        *(unsigned char *)unint64_t v42 = 4;
        *(void *)(v42 + 8) = 1;
        *(void *)(v38 + 8) = v42 + 16;
        goto LABEL_105;
      case 1u:
        v191.__r_.__value_.__s.__data_[0] = 0;
        uint64_t v43 = a2[2];
        if (a2[1] == v43)
        {
          uint64_t v84 = (uint64_t)*a2;
          int v80 = **a2;
          **a2 = 4;
          goto LABEL_89;
        }
        uint64_t v44 = *((void *)v43 - 1);
        if (*(unsigned char *)v44 != 2)
        {
          unsigned int v92 = a2[4];
          int v80 = *v92;
          *unsigned int v92 = 4;
          goto LABEL_98;
        }
        uint64_t v38 = *(void *)(v44 + 8);
        unint64_t v45 = *(void *)(v38 + 8);
        if (v45 < *(void *)(v38 + 16))
        {
          *(unsigned char *)unint64_t v45 = 4;
          *(void *)(v45 + 8) = 0;
          *(void *)(v38 + 8) = v45 + 16;
          goto LABEL_105;
        }
LABEL_213:
        uint64_t v156 = sub_215D3C398((void **)v38, (unsigned __int8 *)&v191);
        goto LABEL_218;
      case 2u:
        v191.__r_.__value_.__r.__words[0] = 0;
        std::string v51 = a2[2];
        if (a2[1] == v51)
        {
          uint64_t v84 = (uint64_t)*a2;
          int v80 = **a2;
          **a2 = 0;
LABEL_89:
          LOBYTE(v192.__vftable) = v80;
          unint64_t v83 = *(const char **)(v84 + 8);
          *(void *)(v84 + 8) = 0;
          goto LABEL_93;
        }
        uint64_t v52 = *((void *)v51 - 1);
        if (*(unsigned char *)v52 != 2)
        {
          unsigned int v92 = a2[4];
          int v80 = *v92;
          *unsigned int v92 = 0;
LABEL_98:
          v194.__r_.__value_.__s.__data_[0] = v80;
          std::string::size_type v91 = *((void *)v92 + 1);
          *((void *)v92 + 1) = 0;
          goto LABEL_102;
        }
        uint64_t v38 = *(void *)(v52 + 8);
        unint64_t v53 = *(void *)(v38 + 8);
        if (v53 < *(void *)(v38 + 16))
        {
          *(unsigned char *)unint64_t v53 = 0;
          *(void *)(v53 + 8) = 0;
          *(void *)(v38 + 8) = v53 + 16;
          goto LABEL_105;
        }
        uint64_t v156 = sub_215D3C4C0((void **)v38);
        goto LABEL_218;
      case 3u:
        sub_215D3C704(a2, v187);
        goto LABEL_105;
      case 4u:
        std::string::size_type v35 = *(void *)(a1 + 160);
        v191.__r_.__value_.__r.__words[0] = v35;
        std::string v58 = a2[2];
        if (a2[1] == v58)
        {
          std::string::value_type v79 = *a2;
          int v80 = **a2;
          char v81 = 6;
          goto LABEL_91;
        }
        uint64_t v59 = *((void *)v58 - 1);
        if (*(unsigned char *)v59 != 2)
        {
          uint64_t v88 = (char *)a2[4];
          int v80 = *v88;
          char v89 = 6;
          goto LABEL_100;
        }
        uint64_t v38 = *(void *)(v59 + 8);
        unint64_t v60 = *(void *)(v38 + 8);
        if (v60 < *(void *)(v38 + 16))
        {
          *(unsigned char *)unint64_t v60 = 6;
          *(void *)(v60 + 8) = v35;
          *(void *)(v38 + 8) = v60 + 16;
          goto LABEL_105;
        }
        uint64_t v156 = sub_215D3CAFC((void **)v38, (uint64_t *)&v191);
        goto LABEL_218;
      case 5u:
        std::string::size_type v35 = *(void *)(a1 + 152);
        v191.__r_.__value_.__r.__words[0] = v35;
        long long v36 = a2[2];
        if (a2[1] == v36)
        {
          std::string::value_type v79 = *a2;
          int v80 = **a2;
          char v81 = 5;
LABEL_91:
          unsigned __int8 *v79 = v81;
          LOBYTE(v192.__vftable) = v80;
          uint64_t v85 = (const char *)*((void *)v79 + 1);
          *((void *)v79 + 1) = v35;
          v192.__imp_.__imp_ = v85;
          p_imp = (uint64_t *)&v192.__imp_;
          goto LABEL_104;
        }
        uint64_t v37 = *((void *)v36 - 1);
        if (*(unsigned char *)v37 != 2)
        {
          uint64_t v88 = (char *)a2[4];
          int v80 = *v88;
          char v89 = 5;
LABEL_100:
          *uint64_t v88 = v89;
          v194.__r_.__value_.__s.__data_[0] = v80;
          std::string::size_type v93 = *((void *)v88 + 1);
          *((void *)v88 + 1) = v35;
          v194.__r_.__value_.__l.__size_ = v93;
          goto LABEL_103;
        }
        uint64_t v38 = *(void *)(v37 + 8);
        unint64_t v39 = *(void *)(v38 + 8);
        if (v39 < *(void *)(v38 + 16))
        {
          *(unsigned char *)unint64_t v39 = 5;
          *(void *)(v39 + 8) = v35;
          *(void *)(v38 + 8) = v39 + 16;
          goto LABEL_105;
        }
        uint64_t v156 = sub_215D3C5DC((void **)v38, (uint64_t *)&v191);
        goto LABEL_218;
      case 6u:
        uint64_t v54 = *(void *)(a1 + 168);
        if ((v54 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          uint64_t v183 = *(void *)(a1 + 72);
          sub_215D36DD4(v3, &v194);
          sub_215D36DD4(v3, &v189);
          sub_215AC8CC8("number overflow parsing '", &v189, &__p);
          sub_215AEDCD0("'", &__p, &v191);
          sub_215D3A1E4(406, (uint64_t)&v191, (uint64_t)&v192);
          uint64_t v176 = sub_215D3BE14((uint64_t)a2, v183, (uint64_t)&v194, (uint64_t)&v192);
          sub_215D3A384(&v192);
          if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v191.__r_.__value_.__l.__data_);
          }
          goto LABEL_280;
        }
        v191.__r_.__value_.__r.__words[0] = *(void *)(a1 + 168);
        long long v55 = a2[2];
        if (a2[1] == v55)
        {
          unint64_t v87 = *a2;
          int v80 = **a2;
          unsigned __int8 *v87 = 7;
          LOBYTE(v192.__vftable) = v80;
          unint64_t v83 = (const char *)*((void *)v87 + 1);
          *((void *)v87 + 1) = v54;
LABEL_93:
          v192.__imp_.__imp_ = v83;
          p_imp = (uint64_t *)&v192.__imp_;
        }
        else
        {
          uint64_t v56 = *((void *)v55 - 1);
          if (*(unsigned char *)v56 == 2)
          {
            uint64_t v38 = *(void *)(v56 + 8);
            unint64_t v57 = *(void *)(v38 + 8);
            if (v57 >= *(void *)(v38 + 16))
            {
              uint64_t v156 = sub_215D3C270((void **)v38, (uint64_t *)&v191);
LABEL_218:
              *(void *)(v38 + 8) = v156;
            }
            else
            {
              *(unsigned char *)unint64_t v57 = 7;
              *(void *)(v57 + 8) = v54;
              *(void *)(v38 + 8) = v57 + 16;
            }
            goto LABEL_105;
          }
          int64_t v94 = a2[4];
          int v80 = *v94;
          *int64_t v94 = 7;
          v194.__r_.__value_.__s.__data_[0] = v80;
          std::string::size_type v91 = *((void *)v94 + 1);
          *((void *)v94 + 1) = v54;
LABEL_102:
          v194.__r_.__value_.__l.__size_ = v91;
LABEL_103:
          p_imp = (uint64_t *)&v194.__r_.__value_.__l.__size_;
        }
LABEL_104:
        sub_215CE9D14(p_imp, v80);
LABEL_105:
        unint64_t v95 = v196;
        if (!v196)
        {
LABEL_264:
          uint64_t v176 = 1;
          goto LABEL_265;
        }
        while (1)
        {
          if ((*(void *)&v195[((v95 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v95 - 1)))
          {
            int v96 = sub_215D33870(v3);
            *(_DWORD *)(a1 + 32) = v96;
            if (v96 == 13) {
              goto LABEL_4;
            }
            if (v96 != 10)
            {
              uint64_t v178 = *(void *)(a1 + 72);
              sub_215D36DD4(v3, &v194);
              std::string v191 = *(std::string *)(a1 + 72);
              sub_215732BF4(&v189, "array");
              sub_215D37238(a1, 0xAu, (const void **)&v189.__r_.__value_.__l.__data_, (uint64_t)&__p);
              sub_215D36EC8(101, (uint64_t *)&v191, (uint64_t)&__p, (uint64_t)&v192);
              uint64_t v179 = sub_215D39124((uint64_t)a2, v178, (uint64_t)&v194, (uint64_t)&v192);
              goto LABEL_279;
            }
            goto LABEL_112;
          }
          int v97 = sub_215D33870(v3);
          *(_DWORD *)(a1 + 32) = v97;
          if (v97 == 13) {
            break;
          }
          if (v97 != 11)
          {
            uint64_t v180 = *(void *)(a1 + 72);
            sub_215D36DD4(v3, &v194);
            std::string v191 = *(std::string *)(a1 + 72);
            sub_215732BF4(&v189, "object");
            sub_215D37238(a1, 0xBu, (const void **)&v189.__r_.__value_.__l.__data_, (uint64_t)&__p);
            sub_215D36EC8(101, (uint64_t *)&v191, (uint64_t)&__p, (uint64_t)&v192);
            uint64_t v179 = sub_215D39124((uint64_t)a2, v180, (uint64_t)&v194, (uint64_t)&v192);
            goto LABEL_279;
          }
LABEL_112:
          a2[2] -= 8;
          unint64_t v95 = v196 - 1;
          unint64_t v196 = v95;
          if (!v95) {
            goto LABEL_264;
          }
        }
        int v98 = sub_215D33870(v3);
        uint64_t v99 = v3;
        *(_DWORD *)(a1 + 32) = v98;
        if (v98 != 4) {
          goto LABEL_277;
        }
        uint64_t v100 = *(uint64_t ***)(*((void *)a2[2] - 1) + 8);
        unint64_t v102 = (char **)(v100 + 1);
        size_t v101 = v100[1];
        unint64_t v103 = (char **)(v100 + 1);
        uint64_t v104 = (uint64_t *)(v100 + 1);
        if (v101)
        {
          char v105 = *(unsigned char *)(a1 + 143);
          if (v105 >= 0) {
            unint64_t v106 = (const void *)v187;
          }
          else {
            unint64_t v106 = *(const void **)(a1 + 120);
          }
          if (v105 >= 0) {
            size_t v107 = *(unsigned __int8 *)(a1 + 143);
          }
          else {
            size_t v107 = *(void *)(a1 + 128);
          }
          while (1)
          {
            uint64_t v104 = v101;
            unint64_t v110 = (const void *)v101[4];
            unint64_t v108 = v101 + 4;
            int v109 = v110;
            int v111 = *((char *)v108 + 23);
            if (v111 >= 0) {
              uint64_t v112 = v108;
            }
            else {
              uint64_t v112 = v109;
            }
            if (v111 >= 0) {
              size_t v113 = *((unsigned __int8 *)v108 + 23);
            }
            else {
              size_t v113 = v108[1];
            }
            if (v113 >= v107) {
              size_t v114 = v107;
            }
            else {
              size_t v114 = v113;
            }
            int v115 = memcmp(v106, v112, v114);
            if (v115)
            {
              if (v115 < 0) {
                goto LABEL_122;
              }
LABEL_136:
              int v116 = memcmp(v112, v106, v114);
              if (v116)
              {
                if ((v116 & 0x80000000) == 0) {
                  goto LABEL_164;
                }
              }
              else if (v113 >= v107)
              {
LABEL_164:
                size_t v117 = (char *)v104;
                uint64_t v3 = v99;
                goto LABEL_171;
              }
              size_t v101 = (uint64_t *)v104[1];
              if (!v101)
              {
                unint64_t v103 = (char **)(v104 + 1);
                break;
              }
            }
            else
            {
              if (v107 >= v113) {
                goto LABEL_136;
              }
LABEL_122:
              size_t v101 = (uint64_t *)*v104;
              unint64_t v103 = (char **)v104;
              if (!*v104) {
                break;
              }
            }
          }
        }
        size_t v117 = (char *)operator new(0x48uLL);
        uint64_t v3 = v99;
        uint16x8_t v118 = v117 + 32;
        if (*(char *)(a1 + 143) < 0)
        {
          sub_215738B0C(v118, *(void **)(a1 + 120), *(void *)(a1 + 128));
        }
        else
        {
          *(_OWORD *)uint16x8_t v118 = *(_OWORD *)v187;
          *((void *)v117 + 6) = *(void *)(v187 + 16);
        }
        v117[56] = 0;
        *((void *)v117 + 8) = 0;
        *(void *)size_t v117 = 0;
        *((void *)v117 + 1) = 0;
        *((void *)v117 + 2) = v104;
        *unint64_t v103 = v117;
        uint64_t v119 = (uint64_t *)**v100;
        unint64_t v120 = v117;
        if (v119)
        {
          *uint64_t v100 = v119;
          unint64_t v120 = *v103;
        }
        uint64_t v121 = *v102;
        BOOL v122 = v120 == *v102;
        v120[24] = v122;
        if (!v122)
        {
          do
          {
            uint64_t v123 = *((void *)v120 + 2);
            if (*(unsigned char *)(v123 + 24)) {
              break;
            }
            long long v124 = *(char **)(v123 + 16);
            uint64_t v125 = *(void *)v124;
            if (*(void *)v124 == v123)
            {
              uint64_t v128 = *((void *)v124 + 1);
              if (!v128 || (v129 = *(unsigned __int8 *)(v128 + 24), uint64_t v126 = (unsigned char *)(v128 + 24), v129))
              {
                if (*(char **)v123 == v120)
                {
                  *(unsigned char *)(v123 + 24) = 1;
                  v124[24] = 0;
                  uint64_t v132 = *(void *)(v123 + 8);
                  *(void *)long long v124 = v132;
                  if (v132) {
                    goto LABEL_162;
                  }
                }
                else
                {
                  char v130 = *(uint64_t **)(v123 + 8);
                  uint64_t v131 = *v130;
                  *(void *)(v123 + 8) = *v130;
                  if (v131)
                  {
                    *(void *)(v131 + 16) = v123;
                    long long v124 = *(char **)(v123 + 16);
                  }
                  v130[2] = (uint64_t)v124;
                  *(void *)(*(void *)(v123 + 16) + 8 * (**(void **)(v123 + 16) != v123)) = v130;
                  *char v130 = v123;
                  *(void *)(v123 + 16) = v130;
                  long long v124 = (char *)v130[2];
                  uint64_t v123 = *(void *)v124;
                  *((unsigned char *)v130 + 24) = 1;
                  v124[24] = 0;
                  uint64_t v132 = *(void *)(v123 + 8);
                  *(void *)long long v124 = v132;
                  if (v132) {
LABEL_162:
                  }
                    *(void *)(v132 + 16) = v124;
                }
                *(void *)(v123 + 16) = *((void *)v124 + 2);
                *(void *)(*((void *)v124 + 2) + 8 * (**((void **)v124 + 2) != (void)v124)) = v123;
                *(void *)(v123 + 8) = v124;
LABEL_169:
                *((void *)v124 + 2) = v123;
                break;
              }
            }
            else if (!v125 || (v127 = *(unsigned __int8 *)(v125 + 24), uint64_t v126 = (unsigned char *)(v125 + 24), v127))
            {
              if (*(char **)v123 == v120)
              {
                uint64_t v155 = *((void *)v120 + 1);
                *(void *)uint64_t v123 = v155;
                if (v155)
                {
                  *(void *)(v155 + 16) = v123;
                  long long v124 = *(char **)(v123 + 16);
                }
                *((void *)v120 + 2) = v124;
                *(void *)(*(void *)(v123 + 16) + 8 * (**(void **)(v123 + 16) != v123)) = v120;
                *((void *)v120 + 1) = v123;
                *(void *)(v123 + 16) = v120;
                long long v124 = (char *)*((void *)v120 + 2);
                v120[24] = 1;
                v124[24] = 0;
                uint64_t v123 = *((void *)v124 + 1);
                uint64_t v133 = *(char **)v123;
                *((void *)v124 + 1) = *(void *)v123;
                if (v133) {
LABEL_167:
                }
                  *((void *)v133 + 2) = v124;
              }
              else
              {
                *(unsigned char *)(v123 + 24) = 1;
                v124[24] = 0;
                uint64_t v123 = *((void *)v124 + 1);
                uint64_t v133 = *(char **)v123;
                *((void *)v124 + 1) = *(void *)v123;
                if (v133) {
                  goto LABEL_167;
                }
              }
              *(void *)(v123 + 16) = *((void *)v124 + 2);
              *(void *)(*((void *)v124 + 2) + 8 * (**((void **)v124 + 2) != (void)v124)) = v123;
              *(void *)uint64_t v123 = v124;
              goto LABEL_169;
            }
            *(unsigned char *)(v123 + 24) = 1;
            unint64_t v120 = v124;
            v124[24] = v124 == v121;
            *uint64_t v126 = 1;
          }
          while (v124 != v121);
        }
        v100[2] = (uint64_t *)((char *)v100[2] + 1);
LABEL_171:
        a2[4] = (unsigned __int8 *)(v117 + 56);
        int v134 = sub_215D33870(v3);
        *(_DWORD *)(a1 + 32) = v134;
        if (v134 != 12) {
          goto LABEL_278;
        }
LABEL_4:
        int v7 = sub_215D33870(v3);
LABEL_5:
        *(_DWORD *)(a1 + 32) = v7;
        unsigned int v4 = v7 - 1;
        continue;
      case 7u:
        LOBYTE(v192.__vftable) = 2;
        uint64_t v8 = sub_215D3BE74(a2, (unsigned __int8 *)&v192);
        uint64_t v9 = v8;
        int v11 = (uint64_t *)a2[2];
        unint64_t v10 = a2[3];
        if (v11 < (uint64_t *)v10)
        {
          uint64_t *v11 = v8;
          uint64_t v12 = (uint64_t)(v11 + 1);
          goto LABEL_29;
        }
        uint64_t v13 = *v186;
        uint64_t v14 = (char *)v11 - (char *)*v186;
        uint64_t v15 = v14 >> 3;
        unint64_t v16 = (v14 >> 3) + 1;
        if (v16 >> 61) {
          goto LABEL_291;
        }
        uint64_t v17 = v10 - (unsigned __int8 *)v13;
        if (v17 >> 2 > v16) {
          unint64_t v16 = v17 >> 2;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          if (v18 >> 61) {
            goto LABEL_292;
          }
          std::string::size_type v19 = operator new(8 * v18);
          uint64_t v20 = &v19[8 * v15];
          *(void *)uint64_t v20 = v9;
          uint64_t v12 = (uint64_t)(v20 + 8);
          uint64_t v21 = (char *)((char *)v11 - (char *)v13);
          if (v11 == v13)
          {
LABEL_27:
            a2[1] = v20;
            a2[2] = (unsigned __int8 *)v12;
            a2[3] = &v19[8 * v18];
            if (!v11) {
              goto LABEL_29;
            }
LABEL_28:
            operator delete(v11);
            goto LABEL_29;
          }
        }
        else
        {
          std::string::size_type v19 = 0;
          uint64_t v20 = (unsigned __int8 *)(8 * v15);
          *(void *)(8 * v15) = v9;
          uint64_t v12 = 8 * v15 + 8;
          uint64_t v21 = (char *)((char *)v11 - (char *)v13);
          if (v11 == v13) {
            goto LABEL_27;
          }
        }
        unint64_t v22 = (unint64_t)(v21 - 8);
        if (v22 < 0x58) {
          goto LABEL_298;
        }
        if ((unint64_t)((char *)v11 - v19 - v14) < 0x20) {
          goto LABEL_298;
        }
        uint64_t v23 = (v22 >> 3) + 1;
        uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
        char v25 = &v11[v24 / 0xFFFFFFFFFFFFFFF8];
        v20 -= v24;
        size_t v26 = &v19[8 * v15 - 16];
        std::string::size_type v27 = v11 - 2;
        uint64_t v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *(_OWORD *)v27;
          *(v26 - 1) = *((_OWORD *)v27 - 1);
          *size_t v26 = v29;
          v26 -= 2;
          v27 -= 4;
          v28 -= 4;
        }
        while (v28);
        int v11 = v25;
        if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_298:
          do
          {
            uint64_t v30 = *--v11;
            *((void *)v20 - 1) = v30;
            v20 -= 8;
          }
          while (v11 != v13);
        }
        int v11 = *v186;
        a2[1] = v20;
        a2[2] = (unsigned __int8 *)v12;
        a2[3] = &v19[8 * v18];
        if (v11) {
          goto LABEL_28;
        }
LABEL_29:
        a2[2] = (unsigned __int8 *)v12;
        int v31 = sub_215D33870(v3);
        *(_DWORD *)(a1 + 32) = v31;
        if (v31 == 10) {
          goto LABEL_177;
        }
        unint64_t v32 = v196;
        if (v196 == v197 << 6)
        {
          if ((uint64_t)(v196 + 1) < 0) {
            sub_215D2CB08();
          }
          unint64_t v33 = v197 << 7;
          if (v197 << 7 <= (v196 & 0xFFFFFFFFFFFFFFC0) + 64) {
            unint64_t v33 = (v196 & 0xFFFFFFFFFFFFFFC0) + 64;
          }
          if (v196 <= 0x3FFFFFFFFFFFFFFELL) {
            unint64_t v34 = v33;
          }
          else {
            unint64_t v34 = 0x7FFFFFFFFFFFFFFFLL;
          }
          sub_215D39348((uint64_t)&v195, v34);
          unint64_t v32 = v196;
        }
        unint64_t v196 = v32 + 1;
        *(void *)&v195[(v32 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v32;
        unsigned int v4 = *(_DWORD *)(a1 + 32) - 1;
        if (v4 > 0xD) {
          goto LABEL_2;
        }
        continue;
      case 8u:
        LOBYTE(v192.__vftable) = 1;
        uint64_t v46 = sub_215D3BE74(a2, (unsigned __int8 *)&v192);
        uint64_t v47 = v46;
        size_t v49 = (uint64_t *)a2[2];
        std::string v48 = a2[3];
        if (v49 < (uint64_t *)v48)
        {
          uint64_t *v49 = v46;
          uint64_t v50 = (uint64_t)(v49 + 1);
          goto LABEL_176;
        }
        std::string v61 = *v186;
        uint64_t v62 = (char *)v49 - (char *)*v186;
        uint64_t v63 = v62 >> 3;
        unint64_t v64 = (v62 >> 3) + 1;
        if (v64 >> 61) {
LABEL_291:
        }
          sub_215D2CB08();
        uint64_t v65 = v48 - (unsigned __int8 *)v61;
        if (v65 >> 2 > v64) {
          unint64_t v64 = v65 >> 2;
        }
        if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v66 = v64;
        }
        if (v66)
        {
          if (v66 >> 61) {
LABEL_292:
          }
            sub_215738AD8();
          long long v67 = operator new(8 * v66);
          int v68 = &v67[8 * v63];
          *(void *)int v68 = v47;
          uint64_t v50 = (uint64_t)(v68 + 8);
          unint64_t v69 = (char *)((char *)v49 - (char *)v61);
          if (v49 == v61)
          {
LABEL_174:
            a2[1] = v68;
            a2[2] = (unsigned __int8 *)v50;
            a2[3] = &v67[8 * v66];
            if (!v49) {
              goto LABEL_176;
            }
LABEL_175:
            operator delete(v49);
            goto LABEL_176;
          }
        }
        else
        {
          long long v67 = 0;
          int v68 = (unsigned __int8 *)(8 * v63);
          *(void *)(8 * v63) = v47;
          uint64_t v50 = 8 * v63 + 8;
          unint64_t v69 = (char *)((char *)v49 - (char *)v61);
          if (v49 == v61) {
            goto LABEL_174;
          }
        }
        unint64_t v70 = (unint64_t)(v69 - 8);
        if (v70 < 0x58) {
          goto LABEL_299;
        }
        if ((unint64_t)((char *)v49 - v67 - v62) < 0x20) {
          goto LABEL_299;
        }
        uint64_t v71 = (v70 >> 3) + 1;
        uint64_t v72 = 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
        long long v73 = &v49[v72 / 0xFFFFFFFFFFFFFFF8];
        v68 -= v72;
        int v74 = &v67[8 * v63 - 16];
        unint64_t v75 = v49 - 2;
        uint64_t v76 = v71 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v77 = *(_OWORD *)v75;
          *(v74 - 1) = *((_OWORD *)v75 - 1);
          *int v74 = v77;
          v74 -= 2;
          v75 -= 4;
          v76 -= 4;
        }
        while (v76);
        size_t v49 = v73;
        if (v71 != (v71 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_299:
          do
          {
            uint64_t v78 = *--v49;
            *((void *)v68 - 1) = v78;
            v68 -= 8;
          }
          while (v49 != v61);
        }
        size_t v49 = *v186;
        a2[1] = v68;
        a2[2] = (unsigned __int8 *)v50;
        a2[3] = &v67[8 * v66];
        if (v49) {
          goto LABEL_175;
        }
LABEL_176:
        a2[2] = (unsigned __int8 *)v50;
        int v135 = sub_215D33870(v3);
        *(_DWORD *)(a1 + 32) = v135;
        if (v135 == 11)
        {
LABEL_177:
          a2[2] -= 8;
          goto LABEL_105;
        }
        if (v135 != 4)
        {
LABEL_277:
          uint64_t v181 = *(void *)(a1 + 72);
          sub_215D36DD4(v3, &v194);
          std::string v191 = *(std::string *)(a1 + 72);
          sub_215732BF4(&v189, "object key");
          sub_215D37238(a1, 4u, (const void **)&v189.__r_.__value_.__l.__data_, (uint64_t)&__p);
          sub_215D36EC8(101, (uint64_t *)&v191, (uint64_t)&__p, (uint64_t)&v192);
          uint64_t v179 = sub_215D39124((uint64_t)a2, v181, (uint64_t)&v194, (uint64_t)&v192);
          goto LABEL_279;
        }
        uint64_t v136 = *(uint64_t ***)(*((void *)a2[2] - 1) + 8);
        uint64_t v138 = (char **)(v136 + 1);
        uint64_t v137 = v136[1];
        uint64_t v139 = (char **)(v136 + 1);
        uint64_t v140 = (uint64_t *)(v136 + 1);
        if (v137)
        {
          char v141 = *(unsigned char *)(a1 + 143);
          if (v141 >= 0) {
            int v142 = (const void *)v187;
          }
          else {
            int v142 = *(const void **)(a1 + 120);
          }
          if (v141 >= 0) {
            size_t v143 = *(unsigned __int8 *)(a1 + 143);
          }
          else {
            size_t v143 = *(void *)(a1 + 128);
          }
          while (1)
          {
            uint64_t v140 = v137;
            unint64_t v146 = (const void *)v137[4];
            v144 = v137 + 4;
            size_t v145 = v146;
            int v147 = *((char *)v144 + 23);
            if (v147 >= 0) {
              unint64_t v148 = v144;
            }
            else {
              unint64_t v148 = v145;
            }
            if (v147 >= 0) {
              size_t v149 = *((unsigned __int8 *)v144 + 23);
            }
            else {
              size_t v149 = v144[1];
            }
            if (v149 >= v143) {
              size_t v150 = v143;
            }
            else {
              size_t v150 = v149;
            }
            int v151 = memcmp(v142, v148, v150);
            if (v151)
            {
              if (v151 < 0) {
                goto LABEL_186;
              }
LABEL_200:
              int v152 = memcmp(v148, v142, v150);
              if (v152)
              {
                if ((v152 & 0x80000000) == 0) {
                  goto LABEL_239;
                }
              }
              else if (v149 >= v143)
              {
LABEL_239:
                int v153 = (char *)v140;
                goto LABEL_248;
              }
              uint64_t v137 = (uint64_t *)v140[1];
              if (!v137)
              {
                uint64_t v139 = (char **)(v140 + 1);
                break;
              }
            }
            else
            {
              if (v143 >= v149) {
                goto LABEL_200;
              }
LABEL_186:
              uint64_t v137 = (uint64_t *)*v140;
              uint64_t v139 = (char **)v140;
              if (!*v140) {
                break;
              }
            }
          }
        }
        int v153 = (char *)operator new(0x48uLL);
        v154 = v153 + 32;
        if (*(char *)(a1 + 143) < 0)
        {
          sub_215738B0C(v154, *(void **)(a1 + 120), *(void *)(a1 + 128));
        }
        else
        {
          *(_OWORD *)v154 = *(_OWORD *)v187;
          *((void *)v153 + 6) = *(void *)(v187 + 16);
        }
        v153[56] = 0;
        *((void *)v153 + 8) = 0;
        *(void *)int v153 = 0;
        *((void *)v153 + 1) = 0;
        *((void *)v153 + 2) = v140;
        unsigned __int8 *v139 = v153;
        unint64_t v157 = (uint64_t *)**v136;
        uint64_t v158 = v153;
        if (v157)
        {
          *uint64_t v136 = v157;
          uint64_t v158 = *v139;
        }
        std::string::size_type v159 = *v138;
        BOOL v122 = v158 == *v138;
        v158[24] = v122;
        if (!v122)
        {
          do
          {
            uint64_t v160 = *((void *)v158 + 2);
            if (*(unsigned char *)(v160 + 24)) {
              break;
            }
            v161 = *(char **)(v160 + 16);
            uint64_t v162 = *(void *)v161;
            if (*(void *)v161 == v160)
            {
              uint64_t v165 = *((void *)v161 + 1);
              if (!v165 || (int v166 = *(unsigned __int8 *)(v165 + 24), v163 = (unsigned char *)(v165 + 24), v166))
              {
                if (*(char **)v160 == v158)
                {
                  *(unsigned char *)(v160 + 24) = 1;
                  v161[24] = 0;
                  uint64_t v169 = *(void *)(v160 + 8);
                  *(void *)v161 = v169;
                  if (v169) {
                    goto LABEL_237;
                  }
                }
                else
                {
                  std::string::size_type v167 = *(uint64_t **)(v160 + 8);
                  uint64_t v168 = *v167;
                  *(void *)(v160 + 8) = *v167;
                  if (v168)
                  {
                    *(void *)(v168 + 16) = v160;
                    v161 = *(char **)(v160 + 16);
                  }
                  v167[2] = (uint64_t)v161;
                  *(void *)(*(void *)(v160 + 16) + 8 * (**(void **)(v160 + 16) != v160)) = v167;
                  *std::string::size_type v167 = v160;
                  *(void *)(v160 + 16) = v167;
                  v161 = (char *)v167[2];
                  uint64_t v160 = *(void *)v161;
                  *((unsigned char *)v167 + 24) = 1;
                  v161[24] = 0;
                  uint64_t v169 = *(void *)(v160 + 8);
                  *(void *)v161 = v169;
                  if (v169) {
LABEL_237:
                  }
                    *(void *)(v169 + 16) = v161;
                }
                *(void *)(v160 + 16) = *((void *)v161 + 2);
                *(void *)(*((void *)v161 + 2) + 8 * (**((void **)v161 + 2) != (void)v161)) = v160;
                *(void *)(v160 + 8) = v161;
LABEL_246:
                *((void *)v161 + 2) = v160;
                break;
              }
            }
            else if (!v162 || (int v164 = *(unsigned __int8 *)(v162 + 24), v163 = (unsigned char *)(v162 + 24), v164))
            {
              if (*(char **)v160 == v158)
              {
                uint64_t v175 = *((void *)v158 + 1);
                *(void *)uint64_t v160 = v175;
                if (v175)
                {
                  *(void *)(v175 + 16) = v160;
                  v161 = *(char **)(v160 + 16);
                }
                *((void *)v158 + 2) = v161;
                *(void *)(*(void *)(v160 + 16) + 8 * (**(void **)(v160 + 16) != v160)) = v158;
                *((void *)v158 + 1) = v160;
                *(void *)(v160 + 16) = v158;
                v161 = (char *)*((void *)v158 + 2);
                v158[24] = 1;
                v161[24] = 0;
                uint64_t v160 = *((void *)v161 + 1);
                unint64_t v170 = *(char **)v160;
                *((void *)v161 + 1) = *(void *)v160;
                if (v170) {
LABEL_244:
                }
                  *((void *)v170 + 2) = v161;
              }
              else
              {
                *(unsigned char *)(v160 + 24) = 1;
                v161[24] = 0;
                uint64_t v160 = *((void *)v161 + 1);
                unint64_t v170 = *(char **)v160;
                *((void *)v161 + 1) = *(void *)v160;
                if (v170) {
                  goto LABEL_244;
                }
              }
              *(void *)(v160 + 16) = *((void *)v161 + 2);
              *(void *)(*((void *)v161 + 2) + 8 * (**((void **)v161 + 2) != (void)v161)) = v160;
              *(void *)uint64_t v160 = v161;
              goto LABEL_246;
            }
            *(unsigned char *)(v160 + 24) = 1;
            uint64_t v158 = v161;
            v161[24] = v161 == v159;
            unsigned char *v163 = 1;
          }
          while (v161 != v159);
        }
        v136[2] = (uint64_t *)((char *)v136[2] + 1);
LABEL_248:
        a2[4] = (unsigned __int8 *)(v153 + 56);
        int v171 = sub_215D33870(v3);
        *(_DWORD *)(a1 + 32) = v171;
        if (v171 == 12)
        {
          unint64_t v172 = v196;
          if (v196 == v197 << 6)
          {
            if ((uint64_t)(v196 + 1) < 0) {
              sub_215D2CB08();
            }
            unint64_t v173 = v197 << 7;
            if (v197 << 7 <= (v196 & 0xFFFFFFFFFFFFFFC0) + 64) {
              unint64_t v173 = (v196 & 0xFFFFFFFFFFFFFFC0) + 64;
            }
            if (v196 <= 0x3FFFFFFFFFFFFFFELL) {
              unint64_t v174 = v173;
            }
            else {
              unint64_t v174 = 0x7FFFFFFFFFFFFFFFLL;
            }
            sub_215D39348((uint64_t)&v195, v174);
            unint64_t v172 = v196;
          }
          unint64_t v196 = v172 + 1;
          *(void *)&v195[(v172 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v172);
          int v7 = sub_215D33870(v3);
          goto LABEL_5;
        }
LABEL_278:
        uint64_t v182 = *(void *)(a1 + 72);
        sub_215D36DD4(v3, &v194);
        std::string v191 = *(std::string *)(a1 + 72);
        sub_215732BF4(&v189, "object separator");
        sub_215D37238(a1, 0xCu, (const void **)&v189.__r_.__value_.__l.__data_, (uint64_t)&__p);
        sub_215D36EC8(101, (uint64_t *)&v191, (uint64_t)&__p, (uint64_t)&v192);
        uint64_t v179 = sub_215D39124((uint64_t)a2, v182, (uint64_t)&v194, (uint64_t)&v192);
LABEL_279:
        uint64_t v176 = v179;
        sub_215D37928(&v192);
LABEL_280:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v189.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_282:
            if ((SHIBYTE(v194.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_265;
            }
            goto LABEL_286;
          }
        }
        else if ((SHIBYTE(v189.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_282;
        }
        operator delete(v189.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v194.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_265;
        }
LABEL_286:
        operator delete(v194.__r_.__value_.__l.__data_);
LABEL_265:
        if (v195) {
          operator delete(v195);
        }
        return v176;
      case 0xDu:
        sub_215D36DD4(v3, &v194);
        std::string v191 = *(std::string *)(a1 + 72);
        *((unsigned char *)&v189.__r_.__value_.__s + 23) = 5;
        strcpy((char *)&v189, "value");
        sub_215D37238(a1, 0, (const void **)&v189.__r_.__value_.__l.__data_, (uint64_t)&__p);
        sub_215D36EC8(101, (uint64_t *)&v191, (uint64_t)&__p, (uint64_t)&v192);
        *((unsigned char *)a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 1;
        if (*((unsigned char *)a2 + 41))
        {
          uint64_t v184 = __cxa_allocate_exception(0x28uLL);
          unint64_t v185 = (void *)sub_215D3BA88((uint64_t)v184, (uint64_t)&v192);
          __cxa_throw(v185, (struct type_info *)&unk_26C684770, (void (*)(void *))sub_215D37928);
        }
        goto LABEL_269;
      default:
        goto LABEL_2;
    }
  }
}

void sub_215D38EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,std::runtime_error a34)
{
  sub_215D37928(&a34);
  if (a26 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    if (*(char *)(v34 - 113) < 0) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  operator delete(a15);
  if (*(char *)(v34 - 113) < 0)
  {
LABEL_4:
    operator delete(*(void **)(v34 - 136));
    long long v36 = *(void **)(v34 - 112);
    if (v36)
    {
LABEL_10:
      operator delete(v36);
      _Unwind_Resume(a1);
    }
LABEL_9:
    _Unwind_Resume(a1);
  }
LABEL_8:
  long long v36 = *(void **)(v34 - 112);
  if (v36) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

uint64_t sub_215D39124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 1;
  if (*(unsigned char *)(a1 + 41))
  {
    exception = __cxa_allocate_exception(0x28uLL);
    int v7 = (void *)sub_215D3BA88((uint64_t)exception, a4);
    __cxa_throw(v7, (struct type_info *)&unk_26C684770, (void (*)(void *))sub_215D37928);
  }
  return 0;
}

uint64_t sub_215D39184(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v6 = a1 + 32;
  uint64_t v7 = a1 + 96;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  uint64_t v8 = *(void *)(a3 + 24);
  if (!v8) {
    goto LABEL_4;
  }
  if (v8 != a3)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
LABEL_4:
    *(void *)(a1 + 12std::__fs::filesystem::__rename(__from, __to, 0) = v8;
    goto LABEL_6;
  }
  *(void *)(a1 + 12std::__fs::filesystem::__rename(__from, __to, 0) = v7;
  (*(void (**)(void, uint64_t))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24), v7);
LABEL_6:
  *(void *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 128) = a4;
  *(unsigned char *)(a1 + 136) = 9;
  unint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  if (v9 == v10 << 6)
  {
    if ((uint64_t)(v9 + 1) < 0) {
      sub_215D2CB08();
    }
    unint64_t v11 = v10 << 7;
    if (v11 <= (v9 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v9 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v12 = v11;
    }
    else {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_215D39348(v6, v12);
    unint64_t v9 = *(void *)(a1 + 40);
  }
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v9 + 1;
  *(void *)(*(void *)(a1 + 32) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
  return a1;
}

void sub_215D392E0(_Unwind_Exception *exception_object)
{
  unsigned int v5 = *(void **)(v1 + 56);
  if (v5)
  {
    operator delete(v5);
    uint64_t v6 = *v2;
    if (!*v2)
    {
LABEL_3:
      uint64_t v7 = *v3;
      if (!*v3) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v6 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  operator delete(v6);
  uint64_t v7 = *v3;
  if (!*v3) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  *(void *)(v1 + 16) = v7;
  operator delete(v7);
  _Unwind_Resume(exception_object);
}

void sub_215D39348(uint64_t a1, unint64_t a2)
{
  if (a2 > *(void *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      sub_215D2CB08();
    }
    unint64_t v3 = ((a2 - 1) >> 6) + 1;
    unsigned int v4 = (uint64_t *)operator new(8 * v3);
    unsigned int v5 = *(void **)a1;
    unint64_t v6 = *(void *)(a1 + 8);
    int v7 = v6 & 0x3F;
    unint64_t v8 = (v6 - 1) >> 6;
    if (v6 < 0x41) {
      unint64_t v8 = 0;
    }
    v4[v8] = 0;
    if (v6 > 0x3F || (v6 & 0x3F) != 0)
    {
      int v9 = 0;
      int v10 = 0;
      unint64_t v11 = &v5[v6 >> 6];
      unint64_t v12 = v4;
      uint64_t v13 = v5;
      do
      {
        uint64_t v14 = 1 << v9;
        if ((*v13 >> v10)) {
          uint64_t v15 = *v12 | v14;
        }
        else {
          uint64_t v15 = *v12 & ~v14;
        }
        uint64_t *v12 = v15;
        v13 += v10 == 63;
        if (v10 == 63) {
          int v10 = 0;
        }
        else {
          ++v10;
        }
        v12 += v9 == 63;
        if (v9 == 63) {
          int v9 = 0;
        }
        else {
          ++v9;
        }
      }
      while (v10 != v7 || v13 != v11);
    }
    *(void *)a1 = v4;
    *(void *)(a1 + 16) = v3;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t sub_215D3945C(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = (char **)(a1 + 8);
  LODWORD(v45.__r_.__value_.__l.__data_) = (*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3;
  v44.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v4 = *(void *)(a1 + 120);
  if (!v4) {
    sub_21573D7DC();
  }
  int v6 = (*(uint64_t (**)(uint64_t, std::string *, std::string *, uint64_t))(*(void *)v4 + 48))(v4, &v45, &v44, a1 + 136);
  unint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  if (v7 == v8 << 6)
  {
    if ((uint64_t)(v7 + 1) < 0) {
      sub_215D2CB08();
    }
    unint64_t v9 = v8 << 7;
    if (v9 <= (v7 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v7 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v10 = v9;
    }
    else {
      unint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_215D39348(a1 + 32, v10);
    unint64_t v7 = *(void *)(a1 + 40);
  }
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v7 + 1;
  uint64_t v11 = *(void *)(a1 + 32);
  unint64_t v12 = v7 >> 6;
  uint64_t v13 = 1 << v7;
  if (v6) {
    uint64_t v14 = *(void *)(v11 + 8 * v12) | v13;
  }
  else {
    uint64_t v14 = *(void *)(v11 + 8 * v12) & ~v13;
  }
  *(void *)(v11 + 8 * v12) = v14;
  v45.__r_.__value_.__s.__data_[0] = 1;
  sub_215D3A3D8((unsigned __int8 **)a1, (char *)&v45, 1);
  uint64_t v16 = v15;
  unint64_t v18 = *(char **)(a1 + 16);
  unint64_t v17 = *(void *)(a1 + 24);
  if ((unint64_t)v18 < v17)
  {
    *(void *)unint64_t v18 = v15;
    uint64_t v19 = (uint64_t)(v18 + 8);
    goto LABEL_35;
  }
  uint64_t v20 = *v3;
  uint64_t v21 = v18 - *v3;
  uint64_t v22 = v21 >> 3;
  unint64_t v23 = (v21 >> 3) + 1;
  if (v23 >> 61) {
    sub_215D2CB08();
  }
  uint64_t v24 = v17 - (void)v20;
  if (v24 >> 2 > v23) {
    unint64_t v23 = v24 >> 2;
  }
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v25 = v23;
  }
  if (v25)
  {
    if (v25 >> 61) {
      sub_215738AD8();
    }
    size_t v26 = operator new(8 * v25);
    std::string::size_type v27 = &v26[8 * v22];
    uint64_t v28 = &v26[8 * v25];
    *std::string::size_type v27 = v16;
    uint64_t v19 = (uint64_t)(v27 + 1);
    long long v29 = (char *)(v18 - v20);
    if (v18 == v20) {
      goto LABEL_33;
    }
    goto LABEL_26;
  }
  size_t v26 = 0;
  std::string::size_type v27 = (void *)(8 * v22);
  uint64_t v28 = 0;
  *(void *)(8 * v22) = v15;
  uint64_t v19 = 8 * v22 + 8;
  long long v29 = (char *)(v18 - v20);
  if (v18 != v20)
  {
LABEL_26:
    unint64_t v30 = (unint64_t)(v29 - 8);
    if (v30 < 0x58) {
      goto LABEL_49;
    }
    if ((unint64_t)(v18 - v26 - v21) < 0x20) {
      goto LABEL_49;
    }
    uint64_t v31 = (v30 >> 3) + 1;
    uint64_t v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v33 = &v18[-v32];
    std::string::size_type v27 = (void *)((char *)v27 - v32);
    uint64_t v34 = &v26[8 * v22 - 16];
    std::string::size_type v35 = v18 - 16;
    uint64_t v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *uint64_t v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    unint64_t v18 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_49:
      do
      {
        uint64_t v38 = *((void *)v18 - 1);
        v18 -= 8;
        *--std::string::size_type v27 = v38;
      }
      while (v18 != v20);
    }
    unint64_t v18 = *v3;
  }
LABEL_33:
  *(void *)(a1 + 8) = v27;
  *(void *)(a1 + 16) = v19;
  *(void *)(a1 + 24) = v28;
  if (v18) {
    operator delete(v18);
  }
LABEL_35:
  *(void *)(a1 + 16) = v19;
  if (a2 != -1)
  {
    unint64_t v39 = *(char **)(v19 - 8);
    if (v39)
    {
      unint64_t v40 = *v39;
      if (v40 > 2) {
        unint64_t v41 = 1;
      }
      else {
        unint64_t v41 = qword_215EF8898[v40];
      }
      if (v41 < a2)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        std::to_string(&v44, a2);
        sub_215AC8CC8("excessive object size: ", &v44, &v45);
        sub_215D3A1E4(408, (uint64_t)&v45, (uint64_t)exception);
        __cxa_throw(exception, (struct type_info *)&unk_26C6846F0, (void (*)(void *))sub_215D3A384);
      }
    }
  }
  return 1;
}

void sub_215D39778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t sub_215D397D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(void *)(v2 - 8))
  {
    LODWORD(v28) = ((unint64_t)(v2 - *(void *)(a1 + 8)) >> 3) - 1;
    LOBYTE(v24) = 1;
    uint64_t v3 = *(void *)(a1 + 120);
    if (!v3) {
      sub_21573D7DC();
    }
    if (((*(uint64_t (**)(uint64_t, unsigned __int8 **, unsigned __int8 **))(*(void *)v3 + 48))(v3, &v28, &v24) & 1) == 0)
    {
      sub_215D31DE4((uint64_t)v31, (unsigned __int8 *)(a1 + 136));
      uint64_t v4 = *(unsigned __int8 **)(*(void *)(a1 + 16) - 8);
      int v5 = *v4;
      unsigned __int8 *v4 = v31[0];
      v31[0] = v5;
      uint64_t v6 = *((void *)v4 + 1);
      *((void *)v4 + 1) = v32;
      uint64_t v32 = v6;
      sub_215CE9D14(&v32, v5);
    }
  }
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v9 = v7 - 8;
  *(void *)(a1 + 16) = v7 - 8;
  --*(void *)(a1 + 40);
  if (v8 != v7 - 8)
  {
    unint64_t v10 = *(unsigned __int8 **)(v7 - 16);
    if (v10)
    {
      int v11 = *v10;
      if ((v11 - 1) <= 1)
      {
        uint64_t v28 = *(unsigned __int8 **)(v7 - 16);
        long long v29 = 0uLL;
        unint64_t v30 = 0x8000000000000000;
        if (v11 == 2)
        {
          *((void *)&v29 + 1) = **((void **)v10 + 1);
        }
        else if (v11 == 1)
        {
          *(void *)&long long v29 = **((void **)v10 + 1);
        }
        else
        {
          unint64_t v30 = 0;
        }
        while (1)
        {
          unint64_t v12 = *(unsigned __int8 **)(v9 - 8);
          uint64_t v25 = 0;
          uint64_t v26 = 0;
          uint64_t v24 = v12;
          unint64_t v27 = 0x8000000000000000;
          int v13 = *v12;
          if (v13 == 2)
          {
            uint64_t v26 = *(void *)(*((void *)v12 + 1) + 8);
            if (sub_215D3ABA4(&v28, &v24)) {
              return 1;
            }
          }
          else if (v13 == 1)
          {
            uint64_t v25 = *((void *)v12 + 1) + 8;
            if (sub_215D3ABA4(&v28, &v24)) {
              return 1;
            }
          }
          else
          {
            unint64_t v27 = 1;
            if (sub_215D3ABA4(&v28, &v24)) {
              return 1;
            }
          }
          if (*sub_215D3A6B8(&v28) == 9) {
            break;
          }
          int v14 = *v28;
          if (v14 == 2)
          {
            *((void *)&v29 + 1) += 16;
            uint64_t v9 = *(void *)(a1 + 16);
          }
          else if (v14 == 1)
          {
            uint64_t v15 = (void *)v29;
            uint64_t v16 = *(void **)(v29 + 8);
            if (v16)
            {
              do
              {
                unint64_t v17 = v16;
                uint64_t v16 = (void *)*v16;
              }
              while (v16);
            }
            else
            {
              do
              {
                unint64_t v17 = (void *)v15[2];
                BOOL v18 = *v17 == (void)v15;
                uint64_t v15 = v17;
              }
              while (!v18);
            }
            *(void *)&long long v29 = v17;
            uint64_t v9 = *(void *)(a1 + 16);
          }
          else
          {
            ++v30;
            uint64_t v9 = *(void *)(a1 + 16);
          }
        }
        uint64_t v19 = *(unsigned __int8 **)(*(void *)(a1 + 16) - 8);
        int v21 = v28;
        long long v22 = v29;
        unint64_t v23 = v30;
        sub_215D3A7BC(v19, &v21, &v24);
      }
    }
  }
  return 1;
}

uint64_t sub_215D39A7C(uint64_t a1, uint64_t a2)
{
  v23[0] = 3;
  uint64_t v4 = operator new(0x18uLL);
  uint64_t v5 = (uint64_t)v4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_215738B0C(v4, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
    void v4[2] = *(void *)(a2 + 16);
  }
  uint64_t v24 = v5;
  LODWORD(v26) = (*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3;
  char v25 = 4;
  uint64_t v6 = *(void *)(a1 + 120);
  if (!v6) {
    sub_21573D7DC();
  }
  char v7 = (*(uint64_t (**)(uint64_t, long long **, char *, unsigned __int8 *))(*(void *)v6 + 48))(v6, &v26, &v25, v23);
  unint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);
  if (v8 == v9 << 6)
  {
    if ((uint64_t)(v8 + 1) < 0) {
      sub_215D2CB08();
    }
    unint64_t v10 = v9 << 7;
    if (v10 <= (v8 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v8 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_215D39348(a1 + 56, v11);
    unint64_t v8 = *(void *)(a1 + 64);
  }
  *(void *)(a1 + 64) = v8 + 1;
  uint64_t v12 = *(void *)(a1 + 56);
  unint64_t v13 = v8 >> 6;
  uint64_t v14 = 1 << v8;
  uint64_t v15 = 8 * v13;
  if (v7)
  {
    *(void *)(v12 + v15) |= v14;
    if (*(void *)(*(void *)(a1 + 16) - 8))
    {
      sub_215D31DE4((uint64_t)v21, (unsigned __int8 *)(a1 + 136));
      uint64_t v16 = *(uint64_t ***)(*(void *)(*(void *)(a1 + 16) - 8) + 8);
      uint64_t v26 = (long long *)a2;
      unint64_t v17 = sub_215D2DD18(v16, (const void **)a2, (uint64_t)&unk_215ED5989, &v26);
      int v18 = *((unsigned __int8 *)v17 + 56);
      v17 += 7;
      *(unsigned char *)unint64_t v17 = v21[0];
      v21[0] = v18;
      uint64_t v19 = (uint64_t)v17[1];
      v17[1] = v22;
      long long v22 = (uint64_t *)v19;
      *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v17;
      sub_215CE9D14((uint64_t *)&v22, v18);
    }
  }
  else
  {
    *(void *)(v12 + v15) &= ~v14;
  }
  sub_215CE9D14(&v24, v23[0]);
  return 1;
}

void sub_215D39C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, unsigned __int8 a11)
{
  sub_215CE9D14(&a10, a9);
  sub_215CE9D14(v11, a11);
  _Unwind_Resume(a1);
}

void sub_215D39C88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_215D39C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  sub_215CE9D14(v11, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_215D39CB4(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (char **)(a1 + 8);
  LODWORD(v45.__r_.__value_.__l.__data_) = (*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3;
  v44.__r_.__value_.__s.__data_[0] = 2;
  uint64_t v4 = *(void *)(a1 + 120);
  if (!v4) {
    sub_21573D7DC();
  }
  int v6 = (*(uint64_t (**)(uint64_t, std::string *, std::string *, uint64_t))(*(void *)v4 + 48))(v4, &v45, &v44, a1 + 136);
  unint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  if (v7 == v8 << 6)
  {
    if ((uint64_t)(v7 + 1) < 0) {
      sub_215D2CB08();
    }
    unint64_t v9 = v8 << 7;
    if (v9 <= (v7 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v7 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v10 = v9;
    }
    else {
      unint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_215D39348(a1 + 32, v10);
    unint64_t v7 = *(void *)(a1 + 40);
  }
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v7 + 1;
  uint64_t v11 = *(void *)(a1 + 32);
  unint64_t v12 = v7 >> 6;
  uint64_t v13 = 1 << v7;
  if (v6) {
    uint64_t v14 = *(void *)(v11 + 8 * v12) | v13;
  }
  else {
    uint64_t v14 = *(void *)(v11 + 8 * v12) & ~v13;
  }
  *(void *)(v11 + 8 * v12) = v14;
  v45.__r_.__value_.__s.__data_[0] = 2;
  sub_215D3A3D8((unsigned __int8 **)a1, (char *)&v45, 1);
  uint64_t v16 = v15;
  int v18 = *(char **)(a1 + 16);
  unint64_t v17 = *(void *)(a1 + 24);
  if ((unint64_t)v18 < v17)
  {
    *(void *)int v18 = v15;
    uint64_t v19 = (uint64_t)(v18 + 8);
    goto LABEL_35;
  }
  uint64_t v20 = *v3;
  uint64_t v21 = v18 - *v3;
  uint64_t v22 = v21 >> 3;
  unint64_t v23 = (v21 >> 3) + 1;
  if (v23 >> 61) {
    sub_215D2CB08();
  }
  uint64_t v24 = v17 - (void)v20;
  if (v24 >> 2 > v23) {
    unint64_t v23 = v24 >> 2;
  }
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v25 = v23;
  }
  if (v25)
  {
    if (v25 >> 61) {
      sub_215738AD8();
    }
    uint64_t v26 = operator new(8 * v25);
    unint64_t v27 = &v26[8 * v22];
    uint64_t v28 = &v26[8 * v25];
    *unint64_t v27 = v16;
    uint64_t v19 = (uint64_t)(v27 + 1);
    long long v29 = (char *)(v18 - v20);
    if (v18 == v20) {
      goto LABEL_33;
    }
    goto LABEL_26;
  }
  uint64_t v26 = 0;
  unint64_t v27 = (void *)(8 * v22);
  uint64_t v28 = 0;
  *(void *)(8 * v22) = v15;
  uint64_t v19 = 8 * v22 + 8;
  long long v29 = (char *)(v18 - v20);
  if (v18 != v20)
  {
LABEL_26:
    unint64_t v30 = (unint64_t)(v29 - 8);
    if (v30 < 0x58) {
      goto LABEL_49;
    }
    if ((unint64_t)(v18 - &v26[v21]) < 0x20) {
      goto LABEL_49;
    }
    uint64_t v31 = (v30 >> 3) + 1;
    uint64_t v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v33 = &v18[-v32];
    unint64_t v27 = (void *)((char *)v27 - v32);
    uint64_t v34 = &v26[8 * v22 - 16];
    std::string::size_type v35 = v18 - 16;
    uint64_t v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *uint64_t v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    int v18 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_49:
      do
      {
        uint64_t v38 = *((void *)v18 - 1);
        v18 -= 8;
        *--unint64_t v27 = v38;
      }
      while (v18 != v20);
    }
    int v18 = *v3;
  }
LABEL_33:
  *(void *)(a1 + 8) = v27;
  *(void *)(a1 + 16) = v19;
  *(void *)(a1 + 24) = v28;
  if (v18) {
    operator delete(v18);
  }
LABEL_35:
  *(void *)(a1 + 16) = v19;
  if (a2 != -1)
  {
    unint64_t v39 = *(char **)(v19 - 8);
    if (v39)
    {
      unint64_t v40 = *v39;
      if (v40 > 2) {
        unint64_t v41 = 1;
      }
      else {
        unint64_t v41 = qword_215EF8898[v40];
      }
      if (v41 < a2)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        std::to_string(&v44, a2);
        sub_215AC8CC8("excessive array size: ", &v44, &v45);
        sub_215D3A1E4(408, (uint64_t)&v45, (uint64_t)exception);
        __cxa_throw(exception, (struct type_info *)&unk_26C6846F0, (void (*)(void *))sub_215D3A384);
      }
    }
  }
  return 1;
}

void sub_215D39FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t sub_215D3A034(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v2 - 8);
  uint64_t v3 = v2 - 8;
  if (!v4)
  {
    *(void *)(a1 + 16) = v3;
    goto LABEL_6;
  }
  int v19 = ((*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3) - 1;
  char v18 = 3;
  uint64_t v5 = *(void *)(a1 + 120);
  if (!v5) {
    sub_21573D7DC();
  }
  if ((*(uint64_t (**)(uint64_t, int *, char *))(*(void *)v5 + 48))(v5, &v19, &v18))
  {
    *(void *)(a1 + 16) -= 8;
LABEL_6:
    --*(void *)(a1 + 40);
    return 1;
  }
  sub_215D31DE4((uint64_t)v16, (unsigned __int8 *)(a1 + 136));
  unint64_t v7 = *(unsigned __int8 **)(*(void *)(a1 + 16) - 8);
  int v8 = *v7;
  unsigned __int8 *v7 = v16[0];
  v16[0] = v8;
  uint64_t v9 = *((void *)v7 + 1);
  *((void *)v7 + 1) = v17;
  uint64_t v17 = v9;
  sub_215CE9D14(&v17, v8);
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10 - 8;
  --*(void *)(a1 + 40);
  if (v11 == v10 - 8) {
    return 1;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if (*(unsigned char *)v12 != 2) {
    return 1;
  }
  uint64_t v13 = *(void *)(v12 + 8);
  uint64_t v14 = *(void *)(v13 + 8);
  int v15 = *(unsigned __int8 *)(v14 - 16);
  v14 -= 16;
  sub_215CE9D14((uint64_t *)(v14 + 8), v15);
  *(void *)(v13 + 8) = v14;
  return 1;
}

uint64_t sub_215D3A184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + 88) = 1;
  if (*(unsigned char *)(a1 + 128))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    unint64_t v7 = (void *)sub_215D3ACB0((uint64_t)exception, a4);
    __cxa_throw(v7, (struct type_info *)&unk_26C6846F0, (void (*)(void *))sub_215D3A384);
  }
  return 0;
}

void sub_215D3A1E4(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v13 = 12;
  strcpy((char *)__p, "out_of_range");
  sub_215D2E030((const void **)__p, a1, &v14);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    unint64_t v7 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  uint64_t v9 = std::string::append(&v14, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)int v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p[0]);
LABEL_9:
  if (v16 >= 0) {
    uint64_t v11 = v15;
  }
  else {
    uint64_t v11 = (void **)v15[0];
  }
  *(void *)a3 = &unk_26C684698;
  *(_DWORD *)(a3 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a3 + 16), (const char *)v11);
  *(void *)a3 = &unk_26C684758;
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_215D3A334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::exception::~exception(v26);
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_215D3A384(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26C684698;
  std::runtime_error::~runtime_error(a1 + 1);

  std::exception::~exception(a1);
}

uint64_t sub_215D3A3D8(unsigned __int8 **a1, char *a2, char a3)
{
  if ((*(void *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((unsigned char *)a1 + 40) - 1)))
  {
    v32[0] = *a2;
    switch(v32[0])
    {
      case 1:
        uint64_t v24 = operator new(0x18uLL);
        v24[2] = 0;
        v24[1] = 0;
        *uint64_t v24 = v24 + 1;
        unint64_t v33 = v24;
        break;
      case 2:
        unint64_t v25 = operator new(0x18uLL);
        v25[1] = 0;
        v25[2] = 0;
        *unint64_t v25 = 0;
        unint64_t v33 = v25;
        break;
      case 3:
        uint64_t v26 = operator new(0x18uLL);
        v26[23] = 0;
        *uint64_t v26 = 0;
        unint64_t v33 = v26;
        break;
      case 4:
        LOBYTE(v33) = 0;
        break;
      case 8:
        unint64_t v27 = operator new(0x20uLL);
        v27[1] = 0;
        v27[2] = 0;
        *unint64_t v27 = 0;
        *((_WORD *)v27 + 12) = 0;
        unint64_t v33 = v27;
        break;
      default:
        unint64_t v33 = 0;
        break;
    }
    if (a3) {
      goto LABEL_7;
    }
    int v35 = (unint64_t)(a1[2] - a1[1]) >> 3;
    char v34 = 5;
    uint64_t v5 = a1[15];
    if (!v5) {
      sub_21573D7DC();
    }
    if ((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(void *)v5 + 48))(v5, &v35, &v34, v32))
    {
LABEL_7:
      int v6 = a1[2];
      if (a1[1] == v6)
      {
        unsigned __int8 v12 = v32[0];
        uint64_t v13 = (uint64_t)v33;
        v32[0] = 0;
        unint64_t v33 = 0;
        uint64_t v14 = (uint64_t)*a1;
        int v15 = **a1;
        *(unsigned char *)uint64_t v14 = v12;
        char v30 = v15;
        uint64_t v16 = *(void *)(v14 + 8);
        *(void *)(v14 + 8) = v13;
        uint64_t v31 = v16;
        sub_215CE9D14(&v31, v15);
LABEL_24:
        uint64_t v11 = 1;
        goto LABEL_25;
      }
      uint64_t v7 = *((void *)v6 - 1);
      if (v7)
      {
        if (*(unsigned char *)v7 == 2)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          unint64_t v9 = *(void *)(v8 + 8);
          if (v9 >= *(void *)(v8 + 16))
          {
            long long v10 = sub_215CEA474((void **)v8, v32);
          }
          else
          {
            *(unsigned char *)unint64_t v9 = v32[0];
            *(void *)(v9 + 8) = v33;
            v32[0] = 0;
            unint64_t v33 = 0;
            long long v10 = (char *)(v9 + 16);
          }
          *(void *)(v8 + 8) = v10;
          goto LABEL_24;
        }
        unint64_t v17 = (unint64_t)(a1[8] - 1);
        unint64_t v18 = *(void *)&a1[7][(v17 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v17;
        if ((v18 >> v17))
        {
          unsigned __int8 v19 = v32[0];
          uint64_t v20 = (uint64_t)v33;
          v32[0] = 0;
          unint64_t v33 = 0;
          int v21 = a1[10];
          int v22 = *v21;
          *int v21 = v19;
          uint64_t v23 = *((void *)v21 + 1);
          *((void *)v21 + 1) = v20;
          uint64_t v29 = v23;
          sub_215CE9D14(&v29, v22);
          goto LABEL_24;
        }
      }
    }
    uint64_t v11 = 0;
LABEL_25:
    sub_215CE9D14((uint64_t *)&v33, v32[0]);
    return v11;
  }
  return 0;
}

void sub_215D3A67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  sub_215CE9D14(v14, a14);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_215D3A6B8(unsigned __int8 **a1)
{
  uint64_t result = *a1;
  int v3 = *result;
  if (v3 == 2) {
    return a1[2];
  }
  if (v3 == 1) {
    return a1[1] + 56;
  }
  if (a1[3])
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_215732BF4(v5, "cannot get value");
    sub_215D3113C(214, (uint64_t)v5, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C684708, (void (*)(void *))sub_215D312D0);
  }
  return result;
}

void sub_215D3A780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if (v16)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

void sub_215D3A7BC(unsigned __int8 *a1@<X0>, unsigned __int8 **a2@<X1>, unsigned __int8 **a3@<X8>)
{
  if (*a2 != a1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_215732BF4(&v34, "iterator does not fit current value");
    sub_215D3113C(202, (uint64_t)&v34, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C684708, (void (*)(void *))sub_215D312D0);
  }
  a3[1] = 0;
  uint64_t v5 = a3 + 1;
  *a3 = a1;
  a3[2] = 0;
  a3[3] = (unsigned __int8 *)0x8000000000000000;
  int v6 = *a1;
  if (v6 == 2)
  {
    uint64_t v11 = *((void *)a1 + 1);
    unsigned __int8 v12 = *(unsigned __int8 **)(v11 + 8);
    a3[2] = v12;
    uint64_t v13 = a2[2];
    uint64_t v14 = v13 + 16;
    if (v13 + 16 == v12)
    {
      unsigned __int8 v19 = (uint64_t *)a2[2];
      if (v12 == v13)
      {
LABEL_28:
        *(void *)(v11 + 8) = v19;
        a3[2] = v13;
        return;
      }
    }
    else
    {
      do
      {
        unsigned __int8 v15 = *v14;
        uint64_t v16 = *((void *)v14 + 1);
        unsigned __int8 *v14 = 0;
        *((void *)v14 + 1) = 0;
        int v17 = *(v14 - 16);
        *(v14 - 16) = v15;
        v34.__r_.__value_.__s.__data_[0] = v17;
        std::string::size_type v18 = *((void *)v14 - 1);
        *((void *)v14 - 1) = v16;
        v34.__r_.__value_.__l.__size_ = v18;
        sub_215CE9D14((uint64_t *)&v34.__r_.__value_.__l.__size_, v17);
        v14 += 16;
      }
      while (v14 != v12);
      unsigned __int8 v12 = *(unsigned __int8 **)(v11 + 8);
      unsigned __int8 v19 = (uint64_t *)(v14 - 16);
      if (v12 == (unsigned __int8 *)v19) {
        goto LABEL_28;
      }
    }
    uint64_t v26 = (uint64_t *)(v12 - 8);
    do
    {
      unint64_t v27 = v26 - 1;
      sub_215CE9D14(v26, *((unsigned __int8 *)v26 - 8));
      v26 -= 2;
    }
    while (v27 != v19);
    goto LABEL_28;
  }
  if (v6 != 1)
  {
    a3[3] = (unsigned __int8 *)1;
    if ((v6 - 3) > 5)
    {
      uint64_t v31 = __cxa_allocate_exception(0x20uLL);
      uint64_t v32 = (char *)sub_215D2DC9C((char *)a1);
      sub_215732BF4(&v33, v32);
      sub_215AC8CC8("cannot use erase() with ", &v33, &v34);
      sub_215D2DB00(307, (uint64_t)&v34, (uint64_t)v31);
      __cxa_throw(v31, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
    }
    if (a2[3])
    {
      char v30 = __cxa_allocate_exception(0x20uLL);
      sub_215732BF4(&v34, "iterator out of range");
      sub_215D3113C(205, (uint64_t)&v34, (uint64_t)v30);
      __cxa_throw(v30, (struct type_info *)&unk_26C684708, (void (*)(void *))sub_215D312D0);
    }
    if (v6 == 8)
    {
      int v21 = (void **)(a1 + 8);
      uint64_t v20 = (void **)*((void *)a1 + 1);
      uint64_t v28 = *v20;
      if (*v20)
      {
        v20[1] = v28;
        int v22 = v28;
        goto LABEL_31;
      }
    }
    else
    {
      if (v6 != 3)
      {
LABEL_33:
        *a1 = 0;
        return;
      }
      int v21 = (void **)(a1 + 8);
      uint64_t v20 = (void **)*((void *)a1 + 1);
      if (*((char *)v20 + 23) < 0)
      {
        int v22 = *v20;
LABEL_31:
        operator delete(v22);
        uint64_t v20 = (void **)*v21;
      }
    }
    operator delete(v20);
    *int v21 = 0;
    goto LABEL_33;
  }
  uint64_t v7 = (unsigned __int8 **)*((void *)a1 + 1);
  *uint64_t v5 = (unsigned __int8 *)(v7 + 1);
  uint64_t v8 = a2[1];
  unint64_t v9 = (unsigned __int8 *)*((void *)v8 + 1);
  if (v9)
  {
    do
    {
      long long v10 = v9;
      unint64_t v9 = *(unsigned __int8 **)v9;
    }
    while (v9);
  }
  else
  {
    uint64_t v23 = a2[1];
    do
    {
      long long v10 = (unsigned __int8 *)*((void *)v23 + 2);
      BOOL v24 = *(void *)v10 == (void)v23;
      uint64_t v23 = v10;
    }
    while (!v24);
  }
  if (*v7 == v8) {
    const std::string::value_type *v7 = v10;
  }
  unint64_t v25 = (uint64_t *)v7[1];
  --v7[2];
  sub_21573B1FC(v25, (uint64_t *)v8);
  sub_215CE9D14((uint64_t *)v8 + 8, v8[56]);
  if ((char)v8[55] < 0) {
    operator delete(*((void **)v8 + 4));
  }
  operator delete(v8);
  *uint64_t v5 = v10;
}

void sub_215D3AB20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (v21) {
    __cxa_free_exception(v20);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_215D3ABA4(unsigned __int8 **a1, unsigned __int8 **a2)
{
  if (*a1 != *a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_215732BF4(v7, "cannot compare iterators of different containers");
    sub_215D3113C(212, (uint64_t)v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C684708, (void (*)(void *))sub_215D312D0);
  }
  int v2 = **a1;
  if (v2 == 2)
  {
    int v3 = a1[2];
    uint64_t v4 = a2[2];
  }
  else if (v2 == 1)
  {
    int v3 = a1[1];
    uint64_t v4 = a2[1];
  }
  else
  {
    int v3 = a1[3];
    uint64_t v4 = a2[3];
  }
  return v3 == v4;
}

void sub_215D3AC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if (v16)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_215D3ACB0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C684698;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const std::runtime_error *)(a2 + 16));
  *(void *)a1 = &unk_26C684758;
  return a1;
}

void sub_215D3AD20(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26C684698;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D3AD88(unsigned __int8 **a1, uint64_t *a2, char a3)
{
  if ((*(void *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((unsigned char *)a1 + 40) - 1)))
  {
    uint64_t v4 = *a2;
    v28[0] = 7;
    uint64_t v29 = v4;
    if (a3) {
      goto LABEL_5;
    }
    int v31 = (unint64_t)(a1[2] - a1[1]) >> 3;
    char v30 = 5;
    uint64_t v5 = a1[15];
    if (!v5) {
      sub_21573D7DC();
    }
    if ((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(void *)v5 + 48))(v5, &v31, &v30, v28))
    {
LABEL_5:
      int v6 = a1[2];
      if (a1[1] == v6)
      {
        unsigned __int8 v12 = v28[0];
        uint64_t v13 = v29;
        v28[0] = 0;
        uint64_t v29 = 0;
        uint64_t v14 = (uint64_t)*a1;
        int v15 = **a1;
        *(unsigned char *)uint64_t v14 = v12;
        char v26 = v15;
        uint64_t v16 = *(void *)(v14 + 8);
        *(void *)(v14 + 8) = v13;
        uint64_t v27 = v16;
        sub_215CE9D14(&v27, v15);
LABEL_17:
        uint64_t v11 = 1;
        goto LABEL_18;
      }
      uint64_t v7 = *((void *)v6 - 1);
      if (v7)
      {
        if (*(unsigned char *)v7 == 2)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          unint64_t v9 = *(void *)(v8 + 8);
          if (v9 >= *(void *)(v8 + 16))
          {
            long long v10 = sub_215CEA474((void **)v8, v28);
          }
          else
          {
            *(unsigned char *)unint64_t v9 = v28[0];
            *(void *)(v9 + 8) = v29;
            v28[0] = 0;
            uint64_t v29 = 0;
            long long v10 = (char *)(v9 + 16);
          }
          *(void *)(v8 + 8) = v10;
          goto LABEL_17;
        }
        unint64_t v17 = (unint64_t)(a1[8] - 1);
        unint64_t v18 = *(void *)&a1[7][(v17 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v17;
        if ((v18 >> v17))
        {
          unsigned __int8 v19 = v28[0];
          uint64_t v20 = v29;
          v28[0] = 0;
          uint64_t v29 = 0;
          char v21 = a1[10];
          int v22 = *v21;
          *char v21 = v19;
          uint64_t v23 = *((void *)v21 + 1);
          *((void *)v21 + 1) = v20;
          uint64_t v25 = v23;
          sub_215CE9D14(&v25, v22);
          goto LABEL_17;
        }
      }
    }
    uint64_t v11 = 0;
LABEL_18:
    sub_215CE9D14(&v29, v28[0]);
    return v11;
  }
  return 0;
}

void sub_215D3AF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  sub_215CE9D14(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_215D3AFA8(unsigned __int8 **a1, unsigned __int8 *a2, char a3)
{
  if ((*(void *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((unsigned char *)a1 + 40) - 1)))
  {
    uint64_t v4 = *a2;
    v28[0] = 4;
    uint64_t v29 = v4;
    if (a3) {
      goto LABEL_5;
    }
    int v31 = (unint64_t)(a1[2] - a1[1]) >> 3;
    char v30 = 5;
    uint64_t v5 = a1[15];
    if (!v5) {
      sub_21573D7DC();
    }
    if ((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(void *)v5 + 48))(v5, &v31, &v30, v28))
    {
LABEL_5:
      int v6 = a1[2];
      if (a1[1] == v6)
      {
        unsigned __int8 v12 = v28[0];
        uint64_t v13 = v29;
        v28[0] = 0;
        uint64_t v29 = 0;
        uint64_t v14 = (uint64_t)*a1;
        int v15 = **a1;
        *(unsigned char *)uint64_t v14 = v12;
        char v26 = v15;
        uint64_t v16 = *(void *)(v14 + 8);
        *(void *)(v14 + 8) = v13;
        uint64_t v27 = v16;
        sub_215CE9D14(&v27, v15);
LABEL_17:
        uint64_t v11 = 1;
        goto LABEL_18;
      }
      uint64_t v7 = *((void *)v6 - 1);
      if (v7)
      {
        if (*(unsigned char *)v7 == 2)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          unint64_t v9 = *(void *)(v8 + 8);
          if (v9 >= *(void *)(v8 + 16))
          {
            long long v10 = sub_215CEA474((void **)v8, v28);
          }
          else
          {
            *(unsigned char *)unint64_t v9 = v28[0];
            *(void *)(v9 + 8) = v29;
            v28[0] = 0;
            uint64_t v29 = 0;
            long long v10 = (char *)(v9 + 16);
          }
          *(void *)(v8 + 8) = v10;
          goto LABEL_17;
        }
        unint64_t v17 = (unint64_t)(a1[8] - 1);
        unint64_t v18 = *(void *)&a1[7][(v17 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v17;
        if ((v18 >> v17))
        {
          unsigned __int8 v19 = v28[0];
          uint64_t v20 = v29;
          v28[0] = 0;
          uint64_t v29 = 0;
          char v21 = a1[10];
          int v22 = *v21;
          *char v21 = v19;
          uint64_t v23 = *((void *)v21 + 1);
          *((void *)v21 + 1) = v20;
          uint64_t v25 = v23;
          sub_215CE9D14(&v25, v22);
          goto LABEL_17;
        }
      }
    }
    uint64_t v11 = 0;
LABEL_18:
    sub_215CE9D14(&v29, v28[0]);
    return v11;
  }
  return 0;
}

void sub_215D3B1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  sub_215CE9D14(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_215D3B1C8(unsigned __int8 **a1, uint64_t a2, char a3)
{
  if ((*(void *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((unsigned char *)a1 + 40) - 1)))
  {
    v27[0] = 0;
    uint64_t v28 = 0;
    if (a3) {
      goto LABEL_5;
    }
    int v30 = (unint64_t)(a1[2] - a1[1]) >> 3;
    char v29 = 5;
    uint64_t v4 = a1[15];
    if (!v4) {
      sub_21573D7DC();
    }
    if ((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(void *)v4 + 48))(v4, &v30, &v29, v27))
    {
LABEL_5:
      uint64_t v5 = a1[2];
      if (a1[1] == v5)
      {
        unsigned __int8 v11 = v27[0];
        uint64_t v12 = v28;
        v27[0] = 0;
        uint64_t v28 = 0;
        uint64_t v13 = (uint64_t)*a1;
        int v14 = **a1;
        *(unsigned char *)uint64_t v13 = v11;
        char v25 = v14;
        uint64_t v15 = *(void *)(v13 + 8);
        *(void *)(v13 + 8) = v12;
        uint64_t v26 = v15;
        sub_215CE9D14(&v26, v14);
LABEL_17:
        uint64_t v10 = 1;
        goto LABEL_18;
      }
      uint64_t v6 = *((void *)v5 - 1);
      if (v6)
      {
        if (*(unsigned char *)v6 == 2)
        {
          uint64_t v7 = *(void *)(v6 + 8);
          unint64_t v8 = *(void *)(v7 + 8);
          if (v8 >= *(void *)(v7 + 16))
          {
            unint64_t v9 = sub_215CEA474((void **)v7, v27);
          }
          else
          {
            *(unsigned char *)unint64_t v8 = v27[0];
            *(void *)(v8 + 8) = v28;
            v27[0] = 0;
            uint64_t v28 = 0;
            unint64_t v9 = (char *)(v8 + 16);
          }
          *(void *)(v7 + 8) = v9;
          goto LABEL_17;
        }
        unint64_t v16 = (unint64_t)(a1[8] - 1);
        unint64_t v17 = *(void *)&a1[7][(v16 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v16;
        if ((v17 >> v16))
        {
          unsigned __int8 v18 = v27[0];
          uint64_t v19 = v28;
          v27[0] = 0;
          uint64_t v28 = 0;
          uint64_t v20 = a1[10];
          int v21 = *v20;
          *uint64_t v20 = v18;
          uint64_t v22 = *((void *)v20 + 1);
          *((void *)v20 + 1) = v19;
          uint64_t v24 = v22;
          sub_215CE9D14(&v24, v21);
          goto LABEL_17;
        }
      }
    }
    uint64_t v10 = 0;
LABEL_18:
    sub_215CE9D14(&v28, v27[0]);
    return v10;
  }
  return 0;
}

void sub_215D3B3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  sub_215CE9D14(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_215D3B3E0(unsigned __int8 **a1, uint64_t *a2, char a3)
{
  if ((*(void *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((unsigned char *)a1 + 40) - 1)))
  {
    uint64_t v4 = *a2;
    v28[0] = 5;
    uint64_t v29 = v4;
    if (a3) {
      goto LABEL_5;
    }
    int v31 = (unint64_t)(a1[2] - a1[1]) >> 3;
    char v30 = 5;
    uint64_t v5 = a1[15];
    if (!v5) {
      sub_21573D7DC();
    }
    if ((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(void *)v5 + 48))(v5, &v31, &v30, v28))
    {
LABEL_5:
      uint64_t v6 = a1[2];
      if (a1[1] == v6)
      {
        unsigned __int8 v12 = v28[0];
        uint64_t v13 = v29;
        v28[0] = 0;
        uint64_t v29 = 0;
        uint64_t v14 = (uint64_t)*a1;
        int v15 = **a1;
        *(unsigned char *)uint64_t v14 = v12;
        char v26 = v15;
        uint64_t v16 = *(void *)(v14 + 8);
        *(void *)(v14 + 8) = v13;
        uint64_t v27 = v16;
        sub_215CE9D14(&v27, v15);
LABEL_17:
        uint64_t v11 = 1;
        goto LABEL_18;
      }
      uint64_t v7 = *((void *)v6 - 1);
      if (v7)
      {
        if (*(unsigned char *)v7 == 2)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          unint64_t v9 = *(void *)(v8 + 8);
          if (v9 >= *(void *)(v8 + 16))
          {
            uint64_t v10 = sub_215CEA474((void **)v8, v28);
          }
          else
          {
            *(unsigned char *)unint64_t v9 = v28[0];
            *(void *)(v9 + 8) = v29;
            v28[0] = 0;
            uint64_t v29 = 0;
            uint64_t v10 = (char *)(v9 + 16);
          }
          *(void *)(v8 + 8) = v10;
          goto LABEL_17;
        }
        unint64_t v17 = (unint64_t)(a1[8] - 1);
        unint64_t v18 = *(void *)&a1[7][(v17 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v17;
        if ((v18 >> v17))
        {
          unsigned __int8 v19 = v28[0];
          uint64_t v20 = v29;
          v28[0] = 0;
          uint64_t v29 = 0;
          int v21 = a1[10];
          int v22 = *v21;
          *int v21 = v19;
          uint64_t v23 = *((void *)v21 + 1);
          *((void *)v21 + 1) = v20;
          uint64_t v25 = v23;
          sub_215CE9D14(&v25, v22);
          goto LABEL_17;
        }
      }
    }
    uint64_t v11 = 0;
LABEL_18:
    sub_215CE9D14(&v29, v28[0]);
    return v11;
  }
  return 0;
}

void sub_215D3B5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  sub_215CE9D14(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_215D3B5FC(unsigned __int8 **a1, uint64_t a2, char a3)
{
  if ((*(void *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((unsigned char *)a1 + 40) - 1)))
  {
    v31[0] = 3;
    uint64_t v6 = operator new(0x18uLL);
    uint64_t v7 = (uint64_t)v6;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_215738B0C(v6, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)uint64_t v6 = *(_OWORD *)a2;
      _OWORD v6[2] = *(void *)(a2 + 16);
    }
    uint64_t v32 = v7;
    if (a3) {
      goto LABEL_9;
    }
    int v34 = (unint64_t)(a1[2] - a1[1]) >> 3;
    char v33 = 5;
    unint64_t v9 = a1[15];
    if (!v9) {
      sub_21573D7DC();
    }
    if ((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(void *)v9 + 48))(v9, &v34, &v33, v31))
    {
LABEL_9:
      uint64_t v10 = a1[2];
      if (a1[1] == v10)
      {
        unsigned __int8 v15 = v31[0];
        uint64_t v16 = v32;
        v31[0] = 0;
        uint64_t v32 = 0;
        uint64_t v17 = (uint64_t)*a1;
        int v18 = **a1;
        *(unsigned char *)uint64_t v17 = v15;
        char v29 = v18;
        uint64_t v19 = *(void *)(v17 + 8);
        *(void *)(v17 + 8) = v16;
        uint64_t v30 = v19;
        sub_215CE9D14(&v30, v18);
LABEL_20:
        uint64_t v8 = 1;
        goto LABEL_21;
      }
      uint64_t v11 = *((void *)v10 - 1);
      if (v11)
      {
        if (*(unsigned char *)v11 == 2)
        {
          uint64_t v12 = *(void *)(v11 + 8);
          unint64_t v13 = *(void *)(v12 + 8);
          if (v13 >= *(void *)(v12 + 16))
          {
            uint64_t v14 = sub_215CEA474((void **)v12, v31);
          }
          else
          {
            *(unsigned char *)unint64_t v13 = v31[0];
            *(void *)(v13 + 8) = v32;
            v31[0] = 0;
            uint64_t v32 = 0;
            uint64_t v14 = (char *)(v13 + 16);
          }
          *(void *)(v12 + 8) = v14;
          goto LABEL_20;
        }
        unint64_t v20 = (unint64_t)(a1[8] - 1);
        unint64_t v21 = *(void *)&a1[7][(v20 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v20;
        if ((v21 >> v20))
        {
          unsigned __int8 v22 = v31[0];
          uint64_t v23 = v32;
          v31[0] = 0;
          uint64_t v32 = 0;
          uint64_t v24 = a1[10];
          int v25 = *v24;
          *uint64_t v24 = v22;
          uint64_t v26 = *((void *)v24 + 1);
          *((void *)v24 + 1) = v23;
          uint64_t v28 = v26;
          sub_215CE9D14(&v28, v25);
          goto LABEL_20;
        }
      }
    }
    uint64_t v8 = 0;
LABEL_21:
    sub_215CE9D14(&v32, v31[0]);
    return v8;
  }
  return 0;
}

void sub_215D3B83C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_215D3B850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  sub_215CE9D14(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_215D3B868(unsigned __int8 **a1, uint64_t *a2, char a3)
{
  if ((*(void *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((unsigned char *)a1 + 40) - 1)))
  {
    uint64_t v4 = *a2;
    v28[0] = 6;
    uint64_t v29 = v4;
    if (a3) {
      goto LABEL_5;
    }
    int v31 = (unint64_t)(a1[2] - a1[1]) >> 3;
    char v30 = 5;
    uint64_t v5 = a1[15];
    if (!v5) {
      sub_21573D7DC();
    }
    if ((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(void *)v5 + 48))(v5, &v31, &v30, v28))
    {
LABEL_5:
      uint64_t v6 = a1[2];
      if (a1[1] == v6)
      {
        unsigned __int8 v12 = v28[0];
        uint64_t v13 = v29;
        v28[0] = 0;
        uint64_t v29 = 0;
        uint64_t v14 = (uint64_t)*a1;
        int v15 = **a1;
        *(unsigned char *)uint64_t v14 = v12;
        char v26 = v15;
        uint64_t v16 = *(void *)(v14 + 8);
        *(void *)(v14 + 8) = v13;
        uint64_t v27 = v16;
        sub_215CE9D14(&v27, v15);
LABEL_17:
        uint64_t v11 = 1;
        goto LABEL_18;
      }
      uint64_t v7 = *((void *)v6 - 1);
      if (v7)
      {
        if (*(unsigned char *)v7 == 2)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          unint64_t v9 = *(void *)(v8 + 8);
          if (v9 >= *(void *)(v8 + 16))
          {
            uint64_t v10 = sub_215CEA474((void **)v8, v28);
          }
          else
          {
            *(unsigned char *)unint64_t v9 = v28[0];
            *(void *)(v9 + 8) = v29;
            v28[0] = 0;
            uint64_t v29 = 0;
            uint64_t v10 = (char *)(v9 + 16);
          }
          *(void *)(v8 + 8) = v10;
          goto LABEL_17;
        }
        unint64_t v17 = (unint64_t)(a1[8] - 1);
        unint64_t v18 = *(void *)&a1[7][(v17 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v17;
        if ((v18 >> v17))
        {
          unsigned __int8 v19 = v28[0];
          uint64_t v20 = v29;
          v28[0] = 0;
          uint64_t v29 = 0;
          unint64_t v21 = a1[10];
          int v22 = *v21;
          *unint64_t v21 = v19;
          uint64_t v23 = *((void *)v21 + 1);
          *((void *)v21 + 1) = v20;
          uint64_t v25 = v23;
          sub_215CE9D14(&v25, v22);
          goto LABEL_17;
        }
      }
    }
    uint64_t v11 = 0;
LABEL_18:
    sub_215CE9D14(&v29, v28[0]);
    return v11;
  }
  return 0;
}

void sub_215D3BA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  sub_215CE9D14(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_215D3BA88(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C684698;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const std::runtime_error *)(a2 + 16));
  *(void *)a1 = &unk_26C684798;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

void sub_215D3BB04(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26C684698;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215D3BB6C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v12, *(void *)(a1 + 16) + 1);
  uint64_t v4 = std::string::insert(&v12, 0, " at line ", 9uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  uint64_t v6 = std::string::append(&v13, ", column ", 9uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *(void *)(a1 + 8));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v10 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v12.__r_.__value_.__l.__data_);
    return;
  }
LABEL_14:
  operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_15;
  }
}

void sub_215D3BCB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v26 - 25) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v26 - 25) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v26 - 48));
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_215D3BD50(uint64_t a1)
{
  sub_215CE9D14((uint64_t *)(a1 + 144), *(unsigned __int8 *)(a1 + 136));
  uint64_t v2 = *(void *)(a1 + 120);
  if (v2 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
    int v3 = *(void **)(a1 + 56);
    if (v3) {
LABEL_5:
    }
      operator delete(v3);
  }
  else
  {
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    }
    int v3 = *(void **)(a1 + 56);
    if (v3) {
      goto LABEL_5;
    }
  }
  uint64_t v4 = *(void **)(a1 + 32);
  if (v4) {
    operator delete(v4);
  }
  long long v5 = *(void **)(a1 + 8);
  if (v5)
  {
    *(void *)(a1 + 16) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_215D3BE14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 1;
  if (*(unsigned char *)(a1 + 41))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    long long v7 = (void *)sub_215D3ACB0((uint64_t)exception, a4);
    __cxa_throw(v7, (struct type_info *)&unk_26C6846F0, (void (*)(void *))sub_215D3A384);
  }
  return 0;
}

uint64_t sub_215D3BE74(unsigned __int8 **a1, unsigned __int8 *a2)
{
  int v3 = a1[2];
  if (a1[1] == v3)
  {
    unint64_t v9 = 0;
    unsigned __int8 v10 = *a2;
    switch(*a2)
    {
      case 1u:
        unint64_t v9 = operator new(0x18uLL);
        void v9[2] = 0;
        v9[1] = 0;
        *unint64_t v9 = v9 + 1;
        break;
      case 2u:
        unint64_t v9 = operator new(0x18uLL);
        v9[1] = 0;
        void v9[2] = 0;
        *unint64_t v9 = 0;
        break;
      case 3u:
        unint64_t v9 = operator new(0x18uLL);
        *((unsigned char *)v9 + 23) = 0;
        *(unsigned char *)unint64_t v9 = 0;
        break;
      case 4u:
        LOBYTE(v22) = 0;
        unint64_t v9 = v22;
        break;
      case 8u:
        unint64_t v9 = operator new(0x20uLL);
        v9[1] = 0;
        void v9[2] = 0;
        *unint64_t v9 = 0;
        *((_WORD *)v9 + 12) = 0;
        break;
      default:
        break;
    }
    uint64_t v14 = (uint64_t)*a1;
    int v15 = **a1;
    *(unsigned char *)uint64_t v14 = v10;
    char v21 = v15;
    uint64_t v16 = *(void *)(v14 + 8);
    *(void *)(v14 + 8) = v9;
    int v22 = (void *)v16;
    sub_215CE9D14((uint64_t *)&v22, v15);
    return (uint64_t)*a1;
  }
  else
  {
    uint64_t v4 = *((void *)v3 - 1);
    if (*(unsigned char *)v4 == 2)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      uint64_t v6 = *(unsigned char **)(v5 + 8);
      if ((unint64_t)v6 >= *(void *)(v5 + 16))
      {
        uint64_t v8 = sub_215D3C10C((void **)v5, a2);
      }
      else
      {
        int v7 = *a2;
        *uint64_t v6 = v7;
        sub_215D2DF08(v6 + 8, v7);
        uint64_t v8 = v6 + 16;
        *(void *)(v5 + 8) = v6 + 16;
      }
      *(void *)(v5 + 8) = v8;
      return *(void *)(*(void *)(*((void *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      uint64_t v11 = 0;
      unsigned __int8 v12 = *a2;
      switch(*a2)
      {
        case 1u:
          uint64_t v11 = operator new(0x18uLL);
          v11[2] = 0;
          v11[1] = 0;
          void *v11 = v11 + 1;
          break;
        case 2u:
          uint64_t v11 = operator new(0x18uLL);
          v11[1] = 0;
          v11[2] = 0;
          void *v11 = 0;
          break;
        case 3u:
          uint64_t v11 = operator new(0x18uLL);
          *((unsigned char *)v11 + 23) = 0;
          *(unsigned char *)uint64_t v11 = 0;
          break;
        case 4u:
          LOBYTE(v2std::__fs::filesystem::__rename(__from, __to, 0) = 0;
          uint64_t v11 = v20;
          break;
        case 8u:
          uint64_t v11 = operator new(0x20uLL);
          v11[1] = 0;
          v11[2] = 0;
          void *v11 = 0;
          *((_WORD *)v11 + 12) = 0;
          break;
        default:
          break;
      }
      unint64_t v17 = a1[4];
      int v18 = *v17;
      unsigned __int8 *v17 = v12;
      uint64_t v19 = *((void *)v17 + 1);
      *((void *)v17 + 1) = v11;
      uint64_t v20 = (void *)v19;
      sub_215CE9D14((uint64_t *)&v20, v18);
      return (uint64_t)a1[4];
    }
  }
}

char *sub_215D3C10C(void **a1, unsigned __int8 *a2)
{
  uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    sub_215CEA45C();
  }
  uint64_t v6 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v6 >> 3 > v4) {
    unint64_t v4 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 60) {
      sub_215738AD8();
    }
    uint64_t v8 = (char *)operator new(16 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v19 = &v8[16 * v3];
  uint64_t v20 = &v8[16 * v7];
  int v9 = *a2;
  *uint64_t v19 = v9;
  sub_215D2DF08(v19 + 8, v9);
  unsigned __int8 v10 = v19;
  uint64_t v11 = v19 + 16;
  unsigned __int8 v12 = (uint64_t *)*a1;
  std::string v13 = (uint64_t *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v19;
    a1[1] = v11;
    a1[2] = v20;
    if (!v13) {
      return v19 + 16;
    }
    goto LABEL_17;
  }
  do
  {
    char v14 = *((unsigned char *)v13 - 16);
    v13 -= 2;
    *(v10 - 16) = v14;
    v10 -= 16;
    *((void *)v10 + 1) = v13[1];
    *(unsigned char *)std::string v13 = 0;
    v13[1] = 0;
  }
  while (v13 != v12);
  std::string v13 = (uint64_t *)*a1;
  int v15 = (uint64_t *)a1[1];
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v20;
  if (v15 != v13)
  {
    uint64_t v16 = v15 - 1;
    do
    {
      unint64_t v17 = v16 - 1;
      sub_215CE9D14(v16, *((unsigned __int8 *)v16 - 8));
      v16 -= 2;
    }
    while (v17 != v13);
  }
  if (v13) {
LABEL_17:
  }
    operator delete(v13);
  return v19 + 16;
}

void sub_215D3C25C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215D2CD18((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_215D3C270(void **a1, uint64_t *a2)
{
  unint64_t v4 = (uint64_t *)*a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v5 = ((char *)v3 - (unsigned char *)*a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    sub_215CEA45C();
  }
  uint64_t v7 = (unsigned char *)a1[2] - (unsigned char *)v4;
  if (v7 >> 3 > v6) {
    unint64_t v6 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v6 >> 60) {
    sub_215738AD8();
  }
  uint64_t v9 = 16 * v6;
  unsigned __int8 v10 = (char *)operator new(16 * v6);
  uint64_t v11 = &v10[16 * v5];
  unsigned __int8 v12 = &v10[v9];
  uint64_t v13 = *a2;
  char *v11 = 7;
  *((void *)v11 + 1) = v13;
  char v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3) {
      return v14;
    }
    goto LABEL_13;
  }
  do
  {
    char v15 = *((unsigned char *)v3 - 16);
    v3 -= 2;
    *(v11 - 16) = v15;
    v11 -= 16;
    *((void *)v11 + 1) = v3[1];
    *(unsigned char *)uint64_t v3 = 0;
    v3[1] = 0;
  }
  while (v3 != v4);
  uint64_t v3 = (uint64_t *)*a1;
  uint64_t v16 = (uint64_t *)a1[1];
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v12;
  if (v16 != v3)
  {
    unint64_t v17 = v16 - 1;
    do
    {
      int v18 = v17 - 1;
      sub_215CE9D14(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3) {
LABEL_13:
  }
    operator delete(v3);
  return v14;
}

char *sub_215D3C398(void **a1, unsigned __int8 *a2)
{
  unint64_t v4 = (uint64_t *)*a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v5 = ((char *)v3 - (unsigned char *)*a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    sub_215CEA45C();
  }
  uint64_t v7 = (unsigned char *)a1[2] - (unsigned char *)v4;
  if (v7 >> 3 > v6) {
    unint64_t v6 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v6 >> 60) {
    sub_215738AD8();
  }
  uint64_t v9 = 16 * v6;
  unsigned __int8 v10 = (char *)operator new(16 * v6);
  uint64_t v11 = &v10[16 * v5];
  unsigned __int8 v12 = &v10[v9];
  uint64_t v13 = *a2;
  char *v11 = 4;
  *((void *)v11 + 1) = v13;
  char v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3) {
      return v14;
    }
    goto LABEL_13;
  }
  do
  {
    char v15 = *((unsigned char *)v3 - 16);
    v3 -= 2;
    *(v11 - 16) = v15;
    v11 -= 16;
    *((void *)v11 + 1) = v3[1];
    *(unsigned char *)uint64_t v3 = 0;
    v3[1] = 0;
  }
  while (v3 != v4);
  uint64_t v3 = (uint64_t *)*a1;
  uint64_t v16 = (uint64_t *)a1[1];
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v12;
  if (v16 != v3)
  {
    unint64_t v17 = v16 - 1;
    do
    {
      int v18 = v17 - 1;
      sub_215CE9D14(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3) {
LABEL_13:
  }
    operator delete(v3);
  return v14;
}

char *sub_215D3C4C0(void **a1)
{
  uint64_t v3 = (uint64_t *)*a1;
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v4 = ((char *)v2 - (unsigned char *)*a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_215CEA45C();
  }
  uint64_t v6 = (unsigned char *)a1[2] - (unsigned char *)v3;
  if (v6 >> 3 > v5) {
    unint64_t v5 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v5 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v5 >> 60) {
    sub_215738AD8();
  }
  uint64_t v7 = 16 * v5;
  uint64_t v8 = (char *)operator new(16 * v5);
  uint64_t v9 = &v8[16 * v4];
  unsigned __int8 v10 = &v8[v7];
  *uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  uint64_t v11 = v9 + 16;
  if (v2 == v3)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v2) {
      return v11;
    }
    goto LABEL_13;
  }
  do
  {
    char v12 = *((unsigned char *)v2 - 16);
    v2 -= 2;
    *(v9 - 16) = v12;
    v9 -= 16;
    *((void *)v9 + 1) = v2[1];
    *(unsigned char *)uint64_t v2 = 0;
    v2[1] = 0;
  }
  while (v2 != v3);
  uint64_t v2 = (uint64_t *)*a1;
  uint64_t v13 = (uint64_t *)a1[1];
  *a1 = v9;
  a1[1] = v11;
  a1[2] = v10;
  if (v13 != v2)
  {
    char v14 = v13 - 1;
    do
    {
      char v15 = v14 - 1;
      sub_215CE9D14(v14, *((unsigned __int8 *)v14 - 8));
      v14 -= 2;
    }
    while (v15 != v2);
  }
  if (v2) {
LABEL_13:
  }
    operator delete(v2);
  return v11;
}

char *sub_215D3C5DC(void **a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)*a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v5 = ((char *)v3 - (unsigned char *)*a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    sub_215CEA45C();
  }
  uint64_t v7 = (unsigned char *)a1[2] - (unsigned char *)v4;
  if (v7 >> 3 > v6) {
    unint64_t v6 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v6 >> 60) {
    sub_215738AD8();
  }
  uint64_t v9 = 16 * v6;
  unsigned __int8 v10 = (char *)operator new(16 * v6);
  uint64_t v11 = &v10[16 * v5];
  char v12 = &v10[v9];
  uint64_t v13 = *a2;
  char *v11 = 5;
  *((void *)v11 + 1) = v13;
  char v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3) {
      return v14;
    }
    goto LABEL_13;
  }
  do
  {
    char v15 = *((unsigned char *)v3 - 16);
    v3 -= 2;
    *(v11 - 16) = v15;
    v11 -= 16;
    *((void *)v11 + 1) = v3[1];
    *(unsigned char *)uint64_t v3 = 0;
    v3[1] = 0;
  }
  while (v3 != v4);
  uint64_t v3 = (uint64_t *)*a1;
  uint64_t v16 = (uint64_t *)a1[1];
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v12;
  if (v16 != v3)
  {
    unint64_t v17 = v16 - 1;
    do
    {
      int v18 = v17 - 1;
      sub_215CE9D14(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3) {
LABEL_13:
  }
    operator delete(v3);
  return v14;
}

uint64_t sub_215D3C704(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  if (a1[1] == v4)
  {
    unsigned __int8 v10 = operator new(0x18uLL);
    uint64_t v11 = v10;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_215738B0C(v10, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)unsigned __int8 v10 = *(_OWORD *)a2;
      void v10[2] = *(void *)(a2 + 16);
    }
    uint64_t v15 = (uint64_t)*a1;
    int v16 = **a1;
    *(unsigned char *)uint64_t v15 = 3;
    char v23 = v16;
    uint64_t v17 = *(void *)(v15 + 8);
    *(void *)(v15 + 8) = v11;
    uint64_t v24 = v17;
    sub_215CE9D14(&v24, v16);
    return (uint64_t)*a1;
  }
  else
  {
    uint64_t v5 = *((void *)v4 - 1);
    if (*(unsigned char *)v5 == 2)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      unint64_t v7 = *(void *)(v6 + 8);
      if (v7 >= *(void *)(v6 + 16))
      {
        char v14 = sub_215D3C920(v6, a2);
      }
      else
      {
        *(void *)(v7 + 8) = 0;
        *(unsigned char *)unint64_t v7 = 3;
        uint64_t v8 = operator new(0x18uLL);
        uint64_t v9 = v8;
        if (*(char *)(a2 + 23) < 0)
        {
          sub_215738B0C(v8, *(void **)a2, *(void *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
          v8[2] = *(void *)(a2 + 16);
        }
        *(void *)(v7 + 8) = v9;
        char v14 = (char *)(v7 + 16);
        *(void *)(v6 + 8) = v7 + 16;
      }
      *(void *)(v6 + 8) = v14;
      return *(void *)(*(void *)(*((void *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      char v12 = operator new(0x18uLL);
      uint64_t v13 = v12;
      if (*(char *)(a2 + 23) < 0)
      {
        sub_215738B0C(v12, *(void **)a2, *(void *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)char v12 = *(_OWORD *)a2;
        v12[2] = *(void *)(a2 + 16);
      }
      uint64_t v19 = a1[4];
      int v20 = *v19;
      *uint64_t v19 = 3;
      uint64_t v21 = *((void *)v19 + 1);
      *((void *)v19 + 1) = v13;
      uint64_t v22 = v21;
      sub_215CE9D14(&v22, v20);
      return (uint64_t)a1[4];
    }
  }
}

void sub_215D3C8D8(_Unwind_Exception *a1)
{
  operator delete(v2);
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(a1);
}

void sub_215D3C8F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_215D3C904(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_215D3C918(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_215D3C920(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t **)a1;
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = ((uint64_t)v4 - *(void *)a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    sub_215CEA45C();
  }
  uint64_t v8 = *(void *)(a1 + 16) - (void)v3;
  if (v8 >> 3 > v6) {
    unint64_t v6 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 60) {
      sub_215738AD8();
    }
    unsigned __int8 v10 = (char *)operator new(16 * v9);
  }
  else
  {
    unsigned __int8 v10 = 0;
  }
  uint64_t v11 = &v10[16 * v5];
  char v12 = &v10[16 * v9];
  *((void *)&v22 + 1) = v12;
  *((void *)v11 + 1) = 0;
  uint64_t v13 = v11 + 8;
  char *v11 = 3;
  char v14 = operator new(0x18uLL);
  uint64_t v15 = v14;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_215738B0C(v14, *(void **)a2, *(void *)(a2 + 8));
    uint64_t v3 = *(uint64_t **)a1;
    uint64_t v4 = *(uint64_t **)(a1 + 8);
    *uint64_t v13 = v15;
    int v16 = v11 + 16;
    *(void *)&long long v22 = v11 + 16;
    if (v4 == v3) {
      goto LABEL_22;
    }
  }
  else
  {
    *(_OWORD *)char v14 = *(_OWORD *)a2;
    v14[2] = *(void *)(a2 + 16);
    *uint64_t v13 = v14;
    int v16 = v11 + 16;
    *(void *)&long long v22 = v11 + 16;
    if (v4 == v3)
    {
LABEL_22:
      *(void *)a1 = v11;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v12;
      if (!v3) {
        return v16;
      }
      goto LABEL_20;
    }
  }
  do
  {
    char v17 = *((unsigned char *)v4 - 16);
    v4 -= 2;
    *(v11 - 16) = v17;
    v11 -= 16;
    *((void *)v11 + 1) = v4[1];
    *(unsigned char *)uint64_t v4 = 0;
    v4[1] = 0;
  }
  while (v4 != v3);
  uint64_t v3 = *(uint64_t **)a1;
  int v18 = *(uint64_t **)(a1 + 8);
  *(void *)a1 = v11;
  *(_OWORD *)(a1 + 8) = v22;
  int v16 = (char *)v22;
  if (v18 != v3)
  {
    uint64_t v19 = v18 - 1;
    do
    {
      int v20 = v19 - 1;
      sub_215CE9D14(v19, *((unsigned __int8 *)v19 - 8));
      v19 -= 2;
    }
    while (v20 != v3);
  }
  if (v3) {
LABEL_20:
  }
    operator delete(v3);
  return v16;
}

void sub_215D3CACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  operator delete(v10);
  sub_215D2CD18((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_215D3CAE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215D2CD18((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_215D3CAFC(void **a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)*a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v5 = ((char *)v3 - (unsigned char *)*a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    sub_215CEA45C();
  }
  uint64_t v7 = (unsigned char *)a1[2] - (unsigned char *)v4;
  if (v7 >> 3 > v6) {
    unint64_t v6 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v6 >> 60) {
    sub_215738AD8();
  }
  uint64_t v9 = 16 * v6;
  unsigned __int8 v10 = (char *)operator new(16 * v6);
  uint64_t v11 = &v10[16 * v5];
  char v12 = &v10[v9];
  uint64_t v13 = *a2;
  char *v11 = 6;
  *((void *)v11 + 1) = v13;
  char v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3) {
      return v14;
    }
    goto LABEL_13;
  }
  do
  {
    char v15 = *((unsigned char *)v3 - 16);
    v3 -= 2;
    *(v11 - 16) = v15;
    v11 -= 16;
    *((void *)v11 + 1) = v3[1];
    *(unsigned char *)uint64_t v3 = 0;
    v3[1] = 0;
  }
  while (v3 != v4);
  uint64_t v3 = (uint64_t *)*a1;
  int v16 = (uint64_t *)a1[1];
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v12;
  if (v16 != v3)
  {
    char v17 = v16 - 1;
    do
    {
      int v18 = v17 - 1;
      sub_215CE9D14(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3) {
LABEL_13:
  }
    operator delete(v3);
  return v14;
}

#error "215D3CC24: too big function (funcsize=0)"

void sub_215D4D0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v6 = *(void *)(v4 - 104);
  *(void *)(v4 - 104) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(v4 - 96);
  *(void *)(v4 - 96) = 0;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    sub_2159156A8((uint64_t)va);
    sub_2159156A8((uint64_t)va1);
    _Unwind_Resume(a1);
  }
  sub_2159156A8((uint64_t)va);
  sub_2159156A8((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_215D4E9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215924B30((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4E9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215923A50((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4E9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21591FB6C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4E9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_2159156A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215913488((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_2159124FC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21590F758((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21590D8E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_2159098B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215908928((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215926D10((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215925C70((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215922AC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215921BD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215920C4C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21591EA2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21591D98C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21591C84C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21591A7E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215918968((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215916748((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215914568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215910684((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21590E7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21590C954((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21590B874((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_2159079FC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215906AD4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215905BE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215904CC0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215903DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215902DB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215901DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215900DC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21591B76C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_2159198F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215917888((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4EC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215911610((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4ECAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_21590A7A0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D4ECC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_2158FFD9C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215D4ED78(_DWORD *a1, _DWORD *a2)
{
  if ((a1[6] != a2[6] || a1[7] != a2[7])
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/Algorithm.cpp", 80, (uint64_t)"from.Size() == to.Size()", 24, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_8;
  }
  uint64_t v4 = a1[12];
  if (v4 != a2[12])
  {
    if (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/Algorithm.cpp", 81, (uint64_t)"from.RuntimeFormat() == to.RuntimeFormat()", 42, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      uint64_t v4 = a1[12];
      goto LABEL_7;
    }
LABEL_8:
    abort();
  }
LABEL_7:
  uint64_t v6 = a2;
  return sub_215D4EE64(v4, &v6, a1);
}

#error "215D4EE64: too big function (funcsize=0)"

void sub_215D62F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  uint64_t v28 = *(void *)(v26 - 136);
  *(void *)(v26 - 136) = 0;
  if (v28)
  {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
    uint64_t v29 = a26;
    if (!a26) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v29 = a26;
    if (!a26) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
LABEL_7:
  if (a16)
  {
    if (!atomic_fetch_add(&a16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215D639C0()
{
  long long v0 = sub_215BBFBCC();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215D63A3C()
{
  long long v0 = sub_215BC03EC();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215D63AB8()
{
  long long v0 = sub_215BC0A48();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215D63B34()
{
  long long v0 = sub_215BC10A4();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215D63BB0()
{
  long long v0 = sub_215BC18C4();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215D63C2C()
{
  long long v0 = sub_215BC20E4();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215D63CA8()
{
  long long v0 = sub_215BC2904();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215D63D24()
{
  long long v0 = sub_215BC3124();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215D63DA0()
{
  long long v0 = sub_215BC3944();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215D63E1C()
{
  long long v0 = sub_215BC4164();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215D63E98()
{
  long long v0 = sub_215BC4984();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215D63F14()
{
  long long v0 = sub_215BC51A4();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215D63F90()
{
  long long v0 = sub_215BC5800();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215D6400C()
{
  long long v0 = sub_215BC6020();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215D64088()
{
  long long v0 = sub_215BC6840();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215D64104()
{
  long long v0 = sub_215BC7060();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215D64180()
{
  long long v0 = sub_215BC9AC0();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215D641FC()
{
  long long v0 = sub_215BCA2E0();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215D64278()
{
  long long v0 = sub_215BCAB00();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215D642F4()
{
  long long v0 = sub_215BCD668();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215D64370()
{
  long long v0 = sub_215BCDE88();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215D643EC()
{
  long long v0 = sub_215BCE6A8();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

void sub_215D64468(int a1@<W0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  switch(a1)
  {
    case 1:
      uint64_t v4 = **a2;
      uint64_t v5 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v4) {
        sub_215BA1F3C(a2[1]);
      }
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 24))(&v536);
      uint64_t v7 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v7;
      if (v7) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 1);
      uint64_t v164 = *(void *)(v538 + 16);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(void *)&v530[16] = v164;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      *(void *)&v530[24] = *(void *)v530;
      *(_OWORD *)&v530[32] = *(_OWORD *)&v530[8];
      uint64_t v165 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v166 = v165;
      if ((v165 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v166 = 0;
      }
      __int16 v167 = v165 & 0xFF00;
      if ((v165 & 0xFF0000) == 0) {
        __int16 v167 = 0;
      }
      LOWORD(v531) = v167 & 0xFF00 | v166;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v168 = v536;
      uint64_t v536 = 0;
      if (v168) {
        (*(void (**)(uint64_t))(*(void *)v168 + 8))(v168);
      }
      *(void *)a3 = &unk_26C665E60;
      uint64_t v169 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 2, (uint64_t)&v530[32], 2, (uint64_t)&v530[40], 1);
      uint64_t v170 = v529 | 0x100000000;
      __int16 v171 = v531;
      if (!BYTE4(v529)) {
        uint64_t v170 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v169;
      uint64_t v172 = v536;
      *(void *)(a3 + 24) = v170;
      *(void *)(a3 + 32) = v172;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      *(_DWORD *)(a3 + 56) = 1;
      goto LABEL_723;
    case 2:
      uint64_t v8 = **a2;
      uint64_t v9 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v8) {
        sub_215BAA614(a2[1]);
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 24))(v8);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v10 + 24))(&v536);
      uint64_t v11 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v11;
      if (v11) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 2);
      uint64_t v174 = *(void *)(v538 + 16);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(void *)&v530[16] = v174;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      *(void *)&v530[24] = *(void *)v530;
      *(_OWORD *)&v530[32] = *(_OWORD *)&v530[8];
      uint64_t v175 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v176 = v175;
      if ((v175 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v176 = 0;
      }
      __int16 v177 = v175 & 0xFF00;
      if ((v175 & 0xFF0000) == 0) {
        __int16 v177 = 0;
      }
      LOWORD(v531) = v177 & 0xFF00 | v176;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v178 = v536;
      uint64_t v536 = 0;
      if (v178) {
        (*(void (**)(uint64_t))(*(void *)v178 + 8))(v178);
      }
      *(void *)a3 = &unk_26C665E60;
      uint64_t v179 = v527;
      uint64_t v180 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      int v181 = BYTE4(v529);
      int v182 = 2;
      sub_215DC93A4((uint64_t)&v536, 2, (uint64_t)&v530[32], 2, (uint64_t)&v530[40], 2);
      __int16 v183 = v531;
      uint64_t v184 = (2 * v529);
      goto LABEL_290;
    case 3:
      uint64_t v12 = **a2;
      uint64_t v13 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v12) {
        sub_215CE54A8(a2[1]);
      }
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 24))(v12);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v14 + 24))(&v536);
      uint64_t v15 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v15;
      if (v15) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 3);
      uint64_t v185 = *(void *)(v538 + 16);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(void *)&v530[16] = v185;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      *(void *)&v530[24] = *(void *)v530;
      *(_OWORD *)&v530[32] = *(_OWORD *)&v530[8];
      uint64_t v186 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v187 = v186;
      if ((v186 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v187 = 0;
      }
      __int16 v188 = v186 & 0xFF00;
      if ((v186 & 0xFF0000) == 0) {
        __int16 v188 = 0;
      }
      LOWORD(v531) = v188 & 0xFF00 | v187;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v189 = v536;
      uint64_t v536 = 0;
      if (v189) {
        (*(void (**)(uint64_t))(*(void *)v189 + 8))(v189);
      }
      *(void *)a3 = &unk_26C665E60;
      v190 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 2, (uint64_t)&v530[32], 2, (uint64_t)&v530[40], 2);
      __int16 v183 = v531;
      uint64_t v191 = (2 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v191 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v190;
      uint64_t v192 = v536;
      *(void *)(a3 + 24) = v191;
      *(void *)(a3 + 32) = v192;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 3;
      goto LABEL_764;
    case 4:
      uint64_t v16 = **a2;
      uint64_t v17 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v16) {
        sub_215CE5744(a2[1]);
      }
      uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 24))(v16);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v18 + 24))(&v536);
      uint64_t v19 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v19;
      if (v19) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 4);
      uint64_t v194 = *(void *)(v538 + 16);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(void *)&v530[16] = v194;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      *(void *)&v530[24] = *(void *)v530;
      *(_OWORD *)&v530[32] = *(_OWORD *)&v530[8];
      uint64_t v195 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v196 = v195;
      if ((v195 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v196 = 0;
      }
      __int16 v197 = v195 & 0xFF00;
      if ((v195 & 0xFF0000) == 0) {
        __int16 v197 = 0;
      }
      LOWORD(v531) = v197 & 0xFF00 | v196;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v198 = v536;
      uint64_t v536 = 0;
      if (v198) {
        (*(void (**)(uint64_t))(*(void *)v198 + 8))(v198);
      }
      *(void *)a3 = &unk_26C665E60;
      uint64_t v179 = v527;
      uint64_t v180 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      int v181 = BYTE4(v529);
      int v182 = 4;
      sub_215DC93A4((uint64_t)&v536, 2, (uint64_t)&v530[32], 2, (uint64_t)&v530[40], 4);
      __int16 v183 = v531;
      uint64_t v184 = (4 * v529);
LABEL_290:
      uint64_t v199 = v184 | 0x100000000;
      if (!v181) {
        uint64_t v199 = 0;
      }
      *(void *)(a3 + 8) = v179;
      *(void *)(a3 + 16) = v180;
      uint64_t v200 = v536;
      *(void *)(a3 + 24) = v199;
      *(void *)(a3 + 32) = v200;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      *(_DWORD *)(a3 + 56) = v182;
      goto LABEL_765;
    case 5:
      uint64_t v20 = **a2;
      uint64_t v21 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v21;
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v20) {
        sub_215D6D12C((uint64_t)&v527, a2[1]);
      }
      uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 24))(v20);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v22 + 24))(&v536);
      uint64_t v23 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v23;
      if (v23) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 5);
      long long v202 = *(_OWORD *)(v538 + 16);
      long long v201 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v202;
      *(_OWORD *)&v530[32] = v201;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v203 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v204 = v203;
      if ((v203 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v204 = 0;
      }
      __int16 v205 = v203 & 0xFF00;
      if ((v203 & 0xFF0000) == 0) {
        __int16 v205 = 0;
      }
      __int16 v535 = v205 & 0xFF00 | v204;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v206 = v536;
      uint64_t v536 = 0;
      if (v206) {
        (*(void (**)(uint64_t))(*(void *)v206 + 8))(v206);
      }
      *(void *)a3 = &unk_26C665E60;
      unint64_t v207 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 1);
      uint64_t v208 = v529 | 0x100000000;
      __int16 v171 = v535;
      if (!BYTE4(v529)) {
        uint64_t v208 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v207;
      uint64_t v209 = v536;
      *(void *)(a3 + 24) = v208;
      *(void *)(a3 + 32) = v209;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v210 = 5;
      goto LABEL_722;
    case 6:
      uint64_t v24 = **a2;
      uint64_t v25 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v25;
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v24) {
        sub_215D6D3EC((uint64_t)&v527, a2[1]);
      }
      uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 24))(v24);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v26 + 24))(&v536);
      uint64_t v27 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v27;
      if (v27) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 6);
      long long v212 = *(_OWORD *)(v538 + 16);
      long long v211 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v212;
      *(_OWORD *)&v530[32] = v211;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v213 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v214 = v213;
      if ((v213 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v214 = 0;
      }
      __int16 v215 = v213 & 0xFF00;
      if ((v213 & 0xFF0000) == 0) {
        __int16 v215 = 0;
      }
      __int16 v535 = v215 & 0xFF00 | v214;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v216 = v536;
      uint64_t v536 = 0;
      if (v216) {
        (*(void (**)(uint64_t))(*(void *)v216 + 8))(v216);
      }
      *(void *)a3 = &unk_26C665E60;
      unint64_t v217 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 2);
      __int16 v183 = v535;
      uint64_t v218 = (2 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v218 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v217;
      uint64_t v219 = v536;
      *(void *)(a3 + 24) = v218;
      *(void *)(a3 + 32) = v219;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 6;
      goto LABEL_764;
    case 7:
      uint64_t v28 = **a2;
      uint64_t v29 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v29;
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v28) {
        sub_215D6D710((uint64_t)&v527, a2[1]);
      }
      uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 24))(v28);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v30 + 24))(&v536);
      uint64_t v31 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v31;
      if (v31) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 7);
      long long v221 = *(_OWORD *)(v538 + 16);
      long long v220 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v221;
      *(_OWORD *)&v530[32] = v220;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v222 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v223 = v222;
      if ((v222 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v223 = 0;
      }
      __int16 v224 = v222 & 0xFF00;
      if ((v222 & 0xFF0000) == 0) {
        __int16 v224 = 0;
      }
      __int16 v535 = v224 & 0xFF00 | v223;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v225 = v536;
      uint64_t v536 = 0;
      if (v225) {
        (*(void (**)(uint64_t))(*(void *)v225 + 8))(v225);
      }
      *(void *)a3 = &unk_26C665E60;
      unint64_t v226 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 2);
      __int16 v183 = v535;
      uint64_t v227 = (2 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v227 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v226;
      uint64_t v228 = v536;
      *(void *)(a3 + 24) = v227;
      *(void *)(a3 + 32) = v228;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 7;
      goto LABEL_764;
    case 8:
      uint64_t v32 = **a2;
      char v33 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v33;
      if (v33) {
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v32) {
        sub_215D6D9CC((uint64_t)&v527, a2[1]);
      }
      uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 24))(v32);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v34 + 24))(&v536);
      uint64_t v35 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v35;
      if (v35) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 8);
      long long v230 = *(_OWORD *)(v538 + 16);
      long long v229 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v230;
      *(_OWORD *)&v530[32] = v229;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v231 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v232 = v231;
      if ((v231 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v232 = 0;
      }
      __int16 v233 = v231 & 0xFF00;
      if ((v231 & 0xFF0000) == 0) {
        __int16 v233 = 0;
      }
      __int16 v535 = v233 & 0xFF00 | v232;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v234 = v536;
      uint64_t v536 = 0;
      if (v234) {
        (*(void (**)(uint64_t))(*(void *)v234 + 8))(v234);
      }
      *(void *)a3 = &unk_26C665E60;
      unint64_t v235 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 4);
      __int16 v183 = v535;
      uint64_t v236 = (4 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v236 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v235;
      uint64_t v237 = v536;
      *(void *)(a3 + 24) = v236;
      *(void *)(a3 + 32) = v237;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 8;
      goto LABEL_764;
    case 9:
      uint64_t v36 = **a2;
      long long v37 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v37;
      if (v37) {
        atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v36) {
        sub_215D6DCF0((uint64_t)&v527, a2[1]);
      }
      uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 24))(v36);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v38 + 24))(&v536);
      uint64_t v39 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v39;
      if (v39) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 9);
      long long v239 = *(_OWORD *)(v538 + 16);
      long long v238 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v239;
      *(_OWORD *)&v530[32] = v238;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v240 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v241 = v240;
      if ((v240 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v241 = 0;
      }
      __int16 v242 = v240 & 0xFF00;
      if ((v240 & 0xFF0000) == 0) {
        __int16 v242 = 0;
      }
      __int16 v535 = v242 & 0xFF00 | v241;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v243 = v536;
      uint64_t v536 = 0;
      if (v243) {
        (*(void (**)(uint64_t))(*(void *)v243 + 8))(v243);
      }
      *(void *)a3 = &unk_26C665E60;
      uint64_t v244 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 1);
      uint64_t v245 = v529 | 0x100000000;
      __int16 v171 = v535;
      if (!BYTE4(v529)) {
        uint64_t v245 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v244;
      uint64_t v246 = v536;
      *(void *)(a3 + 24) = v245;
      *(void *)(a3 + 32) = v246;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v210 = 9;
      goto LABEL_722;
    case 10:
      uint64_t v40 = **a2;
      unint64_t v41 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v41;
      if (v41) {
        atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v40) {
        sub_215D6DFB0((uint64_t)&v527, a2[1]);
      }
      uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 24))(v40);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v42 + 24))(&v536);
      uint64_t v43 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v43;
      if (v43) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 10);
      long long v248 = *(_OWORD *)(v538 + 16);
      long long v247 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v248;
      *(_OWORD *)&v530[32] = v247;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v249 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v250 = v249;
      if ((v249 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v250 = 0;
      }
      __int16 v251 = v249 & 0xFF00;
      if ((v249 & 0xFF0000) == 0) {
        __int16 v251 = 0;
      }
      __int16 v535 = v251 & 0xFF00 | v250;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v252 = v536;
      uint64_t v536 = 0;
      if (v252) {
        (*(void (**)(uint64_t))(*(void *)v252 + 8))(v252);
      }
      *(void *)a3 = &unk_26C665E60;
      std::string::size_type v253 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 2);
      __int16 v183 = v535;
      uint64_t v254 = (2 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v254 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v253;
      uint64_t v255 = v536;
      *(void *)(a3 + 24) = v254;
      *(void *)(a3 + 32) = v255;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 10;
      goto LABEL_764;
    case 11:
      uint64_t v44 = **a2;
      std::string v45 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v45;
      if (v45) {
        atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v44) {
        sub_215D6E2D4((uint64_t)&v527, a2[1]);
      }
      uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)v44 + 24))(v44);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v46 + 24))(&v536);
      uint64_t v47 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v47;
      if (v47) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 11);
      long long v257 = *(_OWORD *)(v538 + 16);
      long long v256 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v257;
      *(_OWORD *)&v530[32] = v256;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v258 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v259 = v258;
      if ((v258 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v259 = 0;
      }
      __int16 v260 = v258 & 0xFF00;
      if ((v258 & 0xFF0000) == 0) {
        __int16 v260 = 0;
      }
      __int16 v535 = v260 & 0xFF00 | v259;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v261 = v536;
      uint64_t v536 = 0;
      if (v261) {
        (*(void (**)(uint64_t))(*(void *)v261 + 8))(v261);
      }
      *(void *)a3 = &unk_26C665E60;
      v262 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 2);
      __int16 v183 = v535;
      uint64_t v263 = (2 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v263 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v262;
      uint64_t v264 = v536;
      *(void *)(a3 + 24) = v263;
      *(void *)(a3 + 32) = v264;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 11;
      goto LABEL_764;
    case 12:
      uint64_t v48 = **a2;
      size_t v49 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v49;
      if (v49) {
        atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v48) {
        sub_215D6E590((uint64_t)&v527, a2[1]);
      }
      uint64_t v50 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 24))(v48);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v50 + 24))(&v536);
      uint64_t v51 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v51;
      if (v51) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 12);
      long long v266 = *(_OWORD *)(v538 + 16);
      long long v265 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v266;
      *(_OWORD *)&v530[32] = v265;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v267 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v268 = v267;
      if ((v267 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v268 = 0;
      }
      __int16 v269 = v267 & 0xFF00;
      if ((v267 & 0xFF0000) == 0) {
        __int16 v269 = 0;
      }
      __int16 v535 = v269 & 0xFF00 | v268;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v270 = v536;
      uint64_t v536 = 0;
      if (v270) {
        (*(void (**)(uint64_t))(*(void *)v270 + 8))(v270);
      }
      *(void *)a3 = &unk_26C665E60;
      char v271 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 4);
      __int16 v183 = v535;
      uint64_t v272 = (4 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v272 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v271;
      uint64_t v273 = v536;
      *(void *)(a3 + 24) = v272;
      *(void *)(a3 + 32) = v273;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 12;
      goto LABEL_764;
    case 13:
      uint64_t v52 = **a2;
      unint64_t v53 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v53;
      if (v53) {
        atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v52) {
        sub_215D6E8B4((uint64_t)&v527, a2[1]);
      }
      uint64_t v54 = (*(uint64_t (**)(uint64_t))(*(void *)v52 + 24))(v52);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v54 + 24))(&v536);
      uint64_t v55 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v55;
      if (v55) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 13);
      long long v275 = *(_OWORD *)(v538 + 16);
      long long v274 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v275;
      *(_OWORD *)&v530[32] = v274;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v276 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v277 = v276;
      if ((v276 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v277 = 0;
      }
      __int16 v278 = v276 & 0xFF00;
      if ((v276 & 0xFF0000) == 0) {
        __int16 v278 = 0;
      }
      __int16 v535 = v278 & 0xFF00 | v277;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v279 = v536;
      uint64_t v536 = 0;
      if (v279) {
        (*(void (**)(uint64_t))(*(void *)v279 + 8))(v279);
      }
      *(void *)a3 = &unk_26C665E60;
      v280 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 1);
      uint64_t v281 = v529 | 0x100000000;
      __int16 v171 = v535;
      if (!BYTE4(v529)) {
        uint64_t v281 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v280;
      uint64_t v282 = v536;
      *(void *)(a3 + 24) = v281;
      *(void *)(a3 + 32) = v282;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v210 = 13;
      goto LABEL_722;
    case 14:
      uint64_t v56 = **a2;
      unint64_t v57 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v57;
      if (v57) {
        atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v56) {
        sub_215D6EB74((uint64_t)&v527, a2[1]);
      }
      uint64_t v58 = (*(uint64_t (**)(uint64_t))(*(void *)v56 + 24))(v56);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v58 + 24))(&v536);
      uint64_t v59 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v59;
      if (v59) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 14);
      long long v284 = *(_OWORD *)(v538 + 16);
      long long v283 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v284;
      *(_OWORD *)&v530[32] = v283;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v285 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v286 = v285;
      if ((v285 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v286 = 0;
      }
      __int16 v287 = v285 & 0xFF00;
      if ((v285 & 0xFF0000) == 0) {
        __int16 v287 = 0;
      }
      __int16 v535 = v287 & 0xFF00 | v286;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v288 = v536;
      uint64_t v536 = 0;
      if (v288) {
        (*(void (**)(uint64_t))(*(void *)v288 + 8))(v288);
      }
      *(void *)a3 = &unk_26C665E60;
      v289 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 2);
      __int16 v183 = v535;
      uint64_t v290 = (2 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v290 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v289;
      uint64_t v291 = v536;
      *(void *)(a3 + 24) = v290;
      *(void *)(a3 + 32) = v291;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 14;
      goto LABEL_764;
    case 15:
      uint64_t v60 = **a2;
      std::string v61 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v61;
      if (v61) {
        atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v60) {
        sub_215D6EE98((uint64_t)&v527, a2[1]);
      }
      uint64_t v62 = (*(uint64_t (**)(uint64_t))(*(void *)v60 + 24))(v60);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v62 + 24))(&v536);
      uint64_t v63 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v63;
      if (v63) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 15);
      long long v293 = *(_OWORD *)(v538 + 16);
      long long v292 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v293;
      *(_OWORD *)&v530[32] = v292;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v294 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v295 = v294;
      if ((v294 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v295 = 0;
      }
      __int16 v296 = v294 & 0xFF00;
      if ((v294 & 0xFF0000) == 0) {
        __int16 v296 = 0;
      }
      __int16 v535 = v296 & 0xFF00 | v295;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v297 = v536;
      uint64_t v536 = 0;
      if (v297) {
        (*(void (**)(uint64_t))(*(void *)v297 + 8))(v297);
      }
      *(void *)a3 = &unk_26C665E60;
      unint64_t v298 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 2);
      __int16 v183 = v535;
      uint64_t v299 = (2 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v299 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v298;
      uint64_t v300 = v536;
      *(void *)(a3 + 24) = v299;
      *(void *)(a3 + 32) = v300;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 15;
      goto LABEL_764;
    case 16:
      uint64_t v64 = **a2;
      uint64_t v65 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v65;
      if (v65) {
        atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v64) {
        sub_215D6F154((uint64_t)&v527, a2[1]);
      }
      uint64_t v66 = (*(uint64_t (**)(uint64_t))(*(void *)v64 + 24))(v64);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v66 + 24))(&v536);
      uint64_t v67 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v67;
      if (v67) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 16);
      long long v302 = *(_OWORD *)(v538 + 16);
      long long v301 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v302;
      *(_OWORD *)&v530[32] = v301;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v303 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v304 = v303;
      if ((v303 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v304 = 0;
      }
      __int16 v305 = v303 & 0xFF00;
      if ((v303 & 0xFF0000) == 0) {
        __int16 v305 = 0;
      }
      __int16 v535 = v305 & 0xFF00 | v304;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v306 = v536;
      uint64_t v536 = 0;
      if (v306) {
        (*(void (**)(uint64_t))(*(void *)v306 + 8))(v306);
      }
      *(void *)a3 = &unk_26C665E60;
      v307 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 4);
      __int16 v183 = v535;
      uint64_t v308 = (4 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v308 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v307;
      uint64_t v309 = v536;
      *(void *)(a3 + 24) = v308;
      *(void *)(a3 + 32) = v309;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 16;
      goto LABEL_764;
    case 17:
      uint64_t v68 = **a2;
      unint64_t v69 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v69;
      if (v69) {
        atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v68) {
        sub_215D6F478((uint64_t)&v527, a2[1]);
      }
      uint64_t v70 = (*(uint64_t (**)(uint64_t))(*(void *)v68 + 24))(v68);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v70 + 24))(&v536);
      uint64_t v71 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v71;
      if (v71) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 17);
      long long v311 = *(_OWORD *)(v538 + 16);
      long long v310 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v311;
      *(_OWORD *)&v530[32] = v310;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v312 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v313 = v312;
      if ((v312 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v313 = 0;
      }
      __int16 v314 = v312 & 0xFF00;
      if ((v312 & 0xFF0000) == 0) {
        __int16 v314 = 0;
      }
      __int16 v535 = v314 & 0xFF00 | v313;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v315 = v536;
      uint64_t v536 = 0;
      if (v315) {
        (*(void (**)(uint64_t))(*(void *)v315 + 8))(v315);
      }
      *(void *)a3 = &unk_26C665E60;
      int v316 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 1);
      uint64_t v317 = v529 | 0x100000000;
      __int16 v171 = v535;
      if (!BYTE4(v529)) {
        uint64_t v317 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v316;
      uint64_t v318 = v536;
      *(void *)(a3 + 24) = v317;
      *(void *)(a3 + 32) = v318;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v210 = 17;
      goto LABEL_722;
    case 18:
      uint64_t v72 = **a2;
      long long v73 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v73;
      if (v73) {
        atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v72) {
        sub_215D6F738((uint64_t)&v527, a2[1]);
      }
      uint64_t v74 = (*(uint64_t (**)(uint64_t))(*(void *)v72 + 24))(v72);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v74 + 24))(&v536);
      uint64_t v75 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v75;
      if (v75) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 18);
      long long v320 = *(_OWORD *)(v538 + 16);
      long long v319 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v320;
      *(_OWORD *)&v530[32] = v319;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v321 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v322 = v321;
      if ((v321 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v322 = 0;
      }
      __int16 v323 = v321 & 0xFF00;
      if ((v321 & 0xFF0000) == 0) {
        __int16 v323 = 0;
      }
      __int16 v535 = v323 & 0xFF00 | v322;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v324 = v536;
      uint64_t v536 = 0;
      if (v324) {
        (*(void (**)(uint64_t))(*(void *)v324 + 8))(v324);
      }
      *(void *)a3 = &unk_26C665E60;
      unsigned __int8 v325 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 2);
      __int16 v183 = v535;
      uint64_t v326 = (2 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v326 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v325;
      uint64_t v327 = v536;
      *(void *)(a3 + 24) = v326;
      *(void *)(a3 + 32) = v327;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 18;
      goto LABEL_764;
    case 19:
      uint64_t v76 = **a2;
      long long v77 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v77;
      if (v77) {
        atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v76) {
        sub_215D6FA5C((uint64_t)&v527, a2[1]);
      }
      uint64_t v78 = (*(uint64_t (**)(uint64_t))(*(void *)v76 + 24))(v76);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v78 + 24))(&v536);
      uint64_t v79 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v79;
      if (v79) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 19);
      long long v329 = *(_OWORD *)(v538 + 16);
      long long v328 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v329;
      *(_OWORD *)&v530[32] = v328;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v330 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v331 = v330;
      if ((v330 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v331 = 0;
      }
      __int16 v332 = v330 & 0xFF00;
      if ((v330 & 0xFF0000) == 0) {
        __int16 v332 = 0;
      }
      __int16 v535 = v332 & 0xFF00 | v331;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v333 = v536;
      uint64_t v536 = 0;
      if (v333) {
        (*(void (**)(uint64_t))(*(void *)v333 + 8))(v333);
      }
      *(void *)a3 = &unk_26C665E60;
      int v334 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 2);
      __int16 v183 = v535;
      uint64_t v335 = (2 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v335 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v334;
      uint64_t v336 = v536;
      *(void *)(a3 + 24) = v335;
      *(void *)(a3 + 32) = v336;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 19;
      goto LABEL_764;
    case 20:
      uint64_t v80 = **a2;
      char v81 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v81;
      if (v81) {
        atomic_fetch_add_explicit(&v81->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v80) {
        sub_215D6FD18((uint64_t)&v527, a2[1]);
      }
      uint64_t v82 = (*(uint64_t (**)(uint64_t))(*(void *)v80 + 24))(v80);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v82 + 24))(&v536);
      uint64_t v83 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v83;
      if (v83) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 20);
      long long v338 = *(_OWORD *)(v538 + 16);
      long long v337 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v338;
      *(_OWORD *)&v530[32] = v337;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v339 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v340 = v339;
      if ((v339 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v340 = 0;
      }
      __int16 v341 = v339 & 0xFF00;
      if ((v339 & 0xFF0000) == 0) {
        __int16 v341 = 0;
      }
      __int16 v535 = v341 & 0xFF00 | v340;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v342 = v536;
      uint64_t v536 = 0;
      if (v342) {
        (*(void (**)(uint64_t))(*(void *)v342 + 8))(v342);
      }
      *(void *)a3 = &unk_26C665E60;
      uint64_t v343 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 4);
      __int16 v183 = v535;
      uint64_t v344 = (4 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v344 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v343;
      uint64_t v345 = v536;
      *(void *)(a3 + 24) = v344;
      *(void *)(a3 + 32) = v345;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 20;
      goto LABEL_764;
    case 21:
      uint64_t v84 = **a2;
      uint64_t v85 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v85;
      if (v85) {
        atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v84) {
        sub_215BA21DC(a2[1]);
      }
      uint64_t v86 = (*(uint64_t (**)(uint64_t))(*(void *)v84 + 24))(v84);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v86 + 24))(&v536);
      uint64_t v87 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v87;
      if (v87) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 21);
      long long v347 = *(_OWORD *)(v538 + 16);
      long long v346 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v347;
      *(_OWORD *)&v530[32] = v346;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v348 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v349 = v348;
      if ((v348 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v349 = 0;
      }
      __int16 v350 = v348 & 0xFF00;
      if ((v348 & 0xFF0000) == 0) {
        __int16 v350 = 0;
      }
      __int16 v535 = v350 & 0xFF00 | v349;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v351 = v536;
      uint64_t v536 = 0;
      if (v351) {
        (*(void (**)(uint64_t))(*(void *)v351 + 8))(v351);
      }
      *(void *)a3 = &unk_26C665E60;
      v352 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 1);
      uint64_t v353 = v529 | 0x100000000;
      __int16 v171 = v535;
      if (!BYTE4(v529)) {
        uint64_t v353 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v352;
      uint64_t v354 = v536;
      *(void *)(a3 + 24) = v353;
      *(void *)(a3 + 32) = v354;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v210 = 21;
      goto LABEL_722;
    case 22:
      uint64_t v88 = **a2;
      char v89 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v89;
      if (v89) {
        atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v88) {
        sub_215CE59E4(a2[1]);
      }
      uint64_t v90 = (*(uint64_t (**)(uint64_t))(*(void *)v88 + 24))(v88);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v90 + 24))(&v536);
      uint64_t v91 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v91;
      if (v91) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 22);
      long long v356 = *(_OWORD *)(v538 + 16);
      long long v355 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v356;
      *(_OWORD *)&v530[32] = v355;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v357 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v358 = v357;
      if ((v357 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v358 = 0;
      }
      __int16 v359 = v357 & 0xFF00;
      if ((v357 & 0xFF0000) == 0) {
        __int16 v359 = 0;
      }
      __int16 v535 = v359 & 0xFF00 | v358;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v360 = v536;
      uint64_t v536 = 0;
      if (v360) {
        (*(void (**)(uint64_t))(*(void *)v360 + 8))(v360);
      }
      *(void *)a3 = &unk_26C665E60;
      v361 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 2);
      __int16 v183 = v535;
      uint64_t v362 = (2 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v362 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v361;
      uint64_t v363 = v536;
      *(void *)(a3 + 24) = v362;
      *(void *)(a3 + 32) = v363;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 22;
      goto LABEL_764;
    case 23:
      uint64_t v92 = **a2;
      std::string::size_type v93 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v93;
      if (v93) {
        atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v92) {
        sub_215CE5D0C(a2[1]);
      }
      uint64_t v94 = (*(uint64_t (**)(uint64_t))(*(void *)v92 + 24))(v92);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v94 + 24))(&v536);
      uint64_t v95 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v95;
      if (v95) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 23);
      long long v365 = *(_OWORD *)(v538 + 16);
      long long v364 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v365;
      *(_OWORD *)&v530[32] = v364;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v366 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v367 = v366;
      if ((v366 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v367 = 0;
      }
      __int16 v368 = v366 & 0xFF00;
      if ((v366 & 0xFF0000) == 0) {
        __int16 v368 = 0;
      }
      __int16 v535 = v368 & 0xFF00 | v367;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v369 = v536;
      uint64_t v536 = 0;
      if (v369) {
        (*(void (**)(uint64_t))(*(void *)v369 + 8))(v369);
      }
      *(void *)a3 = &unk_26C665E60;
      v370 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 2);
      __int16 v183 = v535;
      uint64_t v371 = (2 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v371 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v370;
      uint64_t v372 = v536;
      *(void *)(a3 + 24) = v371;
      *(void *)(a3 + 32) = v372;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 23;
      goto LABEL_764;
    case 24:
      uint64_t v96 = **a2;
      int v97 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v97;
      if (v97) {
        atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v96) {
        sub_215CE5FCC(a2[1]);
      }
      uint64_t v98 = (*(uint64_t (**)(uint64_t))(*(void *)v96 + 24))(v96);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v98 + 24))(&v536);
      uint64_t v99 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v99;
      if (v99) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 24);
      long long v374 = *(_OWORD *)(v538 + 16);
      long long v373 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v374;
      *(_OWORD *)&v530[32] = v373;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v375 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v376 = v375;
      if ((v375 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v376 = 0;
      }
      __int16 v377 = v375 & 0xFF00;
      if ((v375 & 0xFF0000) == 0) {
        __int16 v377 = 0;
      }
      __int16 v535 = v377 & 0xFF00 | v376;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v378 = v536;
      uint64_t v536 = 0;
      if (v378) {
        (*(void (**)(uint64_t))(*(void *)v378 + 8))(v378);
      }
      *(void *)a3 = &unk_26C665E60;
      v379 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 4);
      __int16 v183 = v535;
      uint64_t v380 = (4 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v380 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v379;
      uint64_t v381 = v536;
      *(void *)(a3 + 24) = v380;
      *(void *)(a3 + 32) = v381;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 24;
      goto LABEL_764;
    case 25:
      uint64_t v100 = **a2;
      size_t v101 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v101;
      if (v101) {
        atomic_fetch_add_explicit(&v101->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v100) {
        sub_215CE62F4(a2[1]);
      }
      uint64_t v102 = (*(uint64_t (**)(uint64_t))(*(void *)v100 + 24))(v100);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v102 + 24))(&v536);
      uint64_t v103 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v103;
      if (v103) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 25);
      long long v383 = *(_OWORD *)(v538 + 16);
      long long v382 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v383;
      *(_OWORD *)&v530[32] = v382;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v384 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v385 = v384;
      if ((v384 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v385 = 0;
      }
      __int16 v386 = v384 & 0xFF00;
      if ((v384 & 0xFF0000) == 0) {
        __int16 v386 = 0;
      }
      __int16 v535 = v386 & 0xFF00 | v385;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v387 = v536;
      uint64_t v536 = 0;
      if (v387) {
        (*(void (**)(uint64_t))(*(void *)v387 + 8))(v387);
      }
      *(void *)a3 = &unk_26C665E60;
      v388 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 1);
      uint64_t v389 = v529 | 0x100000000;
      __int16 v171 = v535;
      if (!BYTE4(v529)) {
        uint64_t v389 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v388;
      uint64_t v390 = v536;
      *(void *)(a3 + 24) = v389;
      *(void *)(a3 + 32) = v390;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v210 = 25;
      goto LABEL_722;
    case 26:
      uint64_t v104 = **a2;
      char v105 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v105;
      if (v105) {
        atomic_fetch_add_explicit(&v105->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v104) {
        sub_215D7003C((uint64_t)&v527, a2[1]);
      }
      uint64_t v106 = (*(uint64_t (**)(uint64_t))(*(void *)v104 + 24))(v104);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v106 + 24))(&v536);
      uint64_t v107 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v107;
      if (v107) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 26);
      long long v392 = *(_OWORD *)(v538 + 16);
      long long v391 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v392;
      *(_OWORD *)&v530[32] = v391;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v393 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v394 = v393;
      if ((v393 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v394 = 0;
      }
      __int16 v395 = v393 & 0xFF00;
      if ((v393 & 0xFF0000) == 0) {
        __int16 v395 = 0;
      }
      __int16 v535 = v395 & 0xFF00 | v394;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v396 = v536;
      uint64_t v536 = 0;
      if (v396) {
        (*(void (**)(uint64_t))(*(void *)v396 + 8))(v396);
      }
      *(void *)a3 = &unk_26C665E60;
      v397 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 2);
      __int16 v183 = v535;
      uint64_t v398 = (2 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v398 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v397;
      uint64_t v399 = v536;
      *(void *)(a3 + 24) = v398;
      *(void *)(a3 + 32) = v399;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 26;
      goto LABEL_764;
    case 27:
      uint64_t v108 = **a2;
      int v109 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v109;
      if (v109) {
        atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v108) {
        sub_215D70360((uint64_t)&v527, a2[1]);
      }
      uint64_t v110 = (*(uint64_t (**)(uint64_t))(*(void *)v108 + 24))(v108);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v110 + 24))(&v536);
      uint64_t v111 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v111;
      if (v111) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 27);
      long long v401 = *(_OWORD *)(v538 + 16);
      long long v400 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v401;
      *(_OWORD *)&v530[32] = v400;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v402 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v403 = v402;
      if ((v402 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v403 = 0;
      }
      __int16 v404 = v402 & 0xFF00;
      if ((v402 & 0xFF0000) == 0) {
        __int16 v404 = 0;
      }
      __int16 v535 = v404 & 0xFF00 | v403;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v405 = v536;
      uint64_t v536 = 0;
      if (v405) {
        (*(void (**)(uint64_t))(*(void *)v405 + 8))(v405);
      }
      *(void *)a3 = &unk_26C665E60;
      v406 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 2);
      __int16 v183 = v535;
      uint64_t v407 = (2 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v407 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v406;
      uint64_t v408 = v536;
      *(void *)(a3 + 24) = v407;
      *(void *)(a3 + 32) = v408;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 27;
      goto LABEL_764;
    case 28:
      uint64_t v112 = **a2;
      size_t v113 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v113;
      if (v113) {
        atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v112) {
        sub_215D7061C((uint64_t)&v527, a2[1]);
      }
      uint64_t v114 = (*(uint64_t (**)(uint64_t))(*(void *)v112 + 24))(v112);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v114 + 24))(&v536);
      uint64_t v115 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v115;
      if (v115) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 28);
      long long v410 = *(_OWORD *)(v538 + 16);
      long long v409 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v410;
      *(_OWORD *)&v530[32] = v409;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v411 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v412 = v411;
      if ((v411 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v412 = 0;
      }
      __int16 v413 = v411 & 0xFF00;
      if ((v411 & 0xFF0000) == 0) {
        __int16 v413 = 0;
      }
      __int16 v535 = v413 & 0xFF00 | v412;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v414 = v536;
      uint64_t v536 = 0;
      if (v414) {
        (*(void (**)(uint64_t))(*(void *)v414 + 8))(v414);
      }
      *(void *)a3 = &unk_26C665E60;
      v415 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 4);
      __int16 v183 = v535;
      uint64_t v416 = (4 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v416 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v415;
      uint64_t v417 = v536;
      *(void *)(a3 + 24) = v416;
      *(void *)(a3 + 32) = v417;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 28;
      goto LABEL_764;
    case 29:
      uint64_t v116 = **a2;
      size_t v117 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v117;
      if (v117) {
        atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v116) {
        sub_215CE65B8(a2[1]);
      }
      uint64_t v118 = (*(uint64_t (**)(uint64_t))(*(void *)v116 + 24))(v116);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v118 + 24))(&v536);
      uint64_t v119 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v119;
      if (v119) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 29);
      long long v419 = *(_OWORD *)(v538 + 16);
      long long v418 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v419;
      *(_OWORD *)&v530[32] = v418;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v420 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v421 = v420;
      if ((v420 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v421 = 0;
      }
      __int16 v422 = v420 & 0xFF00;
      if ((v420 & 0xFF0000) == 0) {
        __int16 v422 = 0;
      }
      __int16 v535 = v422 & 0xFF00 | v421;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v423 = v536;
      uint64_t v536 = 0;
      if (v423) {
        (*(void (**)(uint64_t))(*(void *)v423 + 8))(v423);
      }
      *(void *)a3 = &unk_26C665E60;
      v424 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 1);
      uint64_t v425 = v529 | 0x100000000;
      __int16 v171 = v535;
      if (!BYTE4(v529)) {
        uint64_t v425 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v424;
      uint64_t v426 = v536;
      *(void *)(a3 + 24) = v425;
      *(void *)(a3 + 32) = v426;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v210 = 29;
      goto LABEL_722;
    case 30:
      uint64_t v120 = **a2;
      uint64_t v121 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v121;
      if (v121) {
        atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v120) {
        sub_215CE687C(a2[1]);
      }
      uint64_t v122 = (*(uint64_t (**)(uint64_t))(*(void *)v120 + 24))(v120);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v122 + 24))(&v536);
      uint64_t v123 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v123;
      if (v123) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 30);
      long long v428 = *(_OWORD *)(v538 + 16);
      long long v427 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v428;
      *(_OWORD *)&v530[32] = v427;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v429 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v430 = v429;
      if ((v429 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v430 = 0;
      }
      __int16 v431 = v429 & 0xFF00;
      if ((v429 & 0xFF0000) == 0) {
        __int16 v431 = 0;
      }
      __int16 v535 = v431 & 0xFF00 | v430;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v432 = v536;
      uint64_t v536 = 0;
      if (v432) {
        (*(void (**)(uint64_t))(*(void *)v432 + 8))(v432);
      }
      *(void *)a3 = &unk_26C665E60;
      v433 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 2);
      __int16 v183 = v535;
      uint64_t v434 = (2 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v434 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v433;
      uint64_t v435 = v536;
      *(void *)(a3 + 24) = v434;
      *(void *)(a3 + 32) = v435;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 30;
      goto LABEL_764;
    case 31:
      uint64_t v124 = **a2;
      uint64_t v125 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v125;
      if (v125) {
        atomic_fetch_add_explicit(&v125->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v124) {
        sub_215CE6BA4(a2[1]);
      }
      uint64_t v126 = (*(uint64_t (**)(uint64_t))(*(void *)v124 + 24))(v124);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v126 + 24))(&v536);
      uint64_t v127 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v127;
      if (v127) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 31);
      long long v437 = *(_OWORD *)(v538 + 16);
      long long v436 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v437;
      *(_OWORD *)&v530[32] = v436;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v438 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v439 = v438;
      if ((v438 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v439 = 0;
      }
      __int16 v440 = v438 & 0xFF00;
      if ((v438 & 0xFF0000) == 0) {
        __int16 v440 = 0;
      }
      __int16 v535 = v440 & 0xFF00 | v439;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v441 = v536;
      uint64_t v536 = 0;
      if (v441) {
        (*(void (**)(uint64_t))(*(void *)v441 + 8))(v441);
      }
      *(void *)a3 = &unk_26C665E60;
      v442 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 2);
      __int16 v183 = v535;
      uint64_t v443 = (2 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v443 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v442;
      uint64_t v444 = v536;
      *(void *)(a3 + 24) = v443;
      *(void *)(a3 + 32) = v444;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 31;
      goto LABEL_764;
    case 32:
      uint64_t v128 = **a2;
      int v129 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v129;
      if (v129) {
        atomic_fetch_add_explicit(&v129->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v128) {
        sub_215CE6E64(a2[1]);
      }
      uint64_t v130 = (*(uint64_t (**)(uint64_t))(*(void *)v128 + 24))(v128);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v130 + 24))(&v536);
      uint64_t v131 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v131;
      if (v131) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 32);
      long long v446 = *(_OWORD *)(v538 + 16);
      long long v445 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v446;
      *(_OWORD *)&v530[32] = v445;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v447 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v448 = v447;
      if ((v447 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v448 = 0;
      }
      __int16 v449 = v447 & 0xFF00;
      if ((v447 & 0xFF0000) == 0) {
        __int16 v449 = 0;
      }
      __int16 v535 = v449 & 0xFF00 | v448;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v450 = v536;
      uint64_t v536 = 0;
      if (v450) {
        (*(void (**)(uint64_t))(*(void *)v450 + 8))(v450);
      }
      *(void *)a3 = &unk_26C665E60;
      v451 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 4);
      __int16 v183 = v535;
      uint64_t v452 = (4 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v452 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v451;
      uint64_t v453 = v536;
      *(void *)(a3 + 24) = v452;
      *(void *)(a3 + 32) = v453;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 32;
      goto LABEL_764;
    case 33:
      uint64_t v132 = **a2;
      uint64_t v133 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v133;
      if (v133) {
        atomic_fetch_add_explicit(&v133->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v132) {
        sub_215CE718C(a2[1]);
      }
      uint64_t v134 = (*(uint64_t (**)(uint64_t))(*(void *)v132 + 24))(v132);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v134 + 24))(&v536);
      uint64_t v135 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v135;
      if (v135) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 33);
      long long v455 = *(_OWORD *)(v538 + 16);
      long long v454 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v455;
      *(_OWORD *)&v530[32] = v454;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v456 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v457 = v456;
      if ((v456 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v457 = 0;
      }
      __int16 v458 = v456 & 0xFF00;
      if ((v456 & 0xFF0000) == 0) {
        __int16 v458 = 0;
      }
      __int16 v535 = v458 & 0xFF00 | v457;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v459 = v536;
      uint64_t v536 = 0;
      if (v459) {
        (*(void (**)(uint64_t))(*(void *)v459 + 8))(v459);
      }
      *(void *)a3 = &unk_26C665E60;
      v460 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 1);
      uint64_t v461 = v529 | 0x100000000;
      __int16 v171 = v535;
      if (!BYTE4(v529)) {
        uint64_t v461 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v460;
      uint64_t v462 = v536;
      *(void *)(a3 + 24) = v461;
      *(void *)(a3 + 32) = v462;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v210 = 33;
      goto LABEL_722;
    case 34:
      uint64_t v136 = **a2;
      uint64_t v137 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v137;
      if (v137) {
        atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v136) {
        sub_215D70940((uint64_t)&v527, a2[1]);
      }
      uint64_t v138 = (*(uint64_t (**)(uint64_t))(*(void *)v136 + 24))(v136);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v138 + 24))(&v536);
      uint64_t v139 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v139;
      if (v139) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 34);
      long long v464 = *(_OWORD *)(v538 + 16);
      long long v463 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v464;
      *(_OWORD *)&v530[32] = v463;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v465 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v466 = v465;
      if ((v465 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v466 = 0;
      }
      __int16 v467 = v465 & 0xFF00;
      if ((v465 & 0xFF0000) == 0) {
        __int16 v467 = 0;
      }
      __int16 v535 = v467 & 0xFF00 | v466;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v468 = v536;
      uint64_t v536 = 0;
      if (v468) {
        (*(void (**)(uint64_t))(*(void *)v468 + 8))(v468);
      }
      *(void *)a3 = &unk_26C665E60;
      v469 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 2);
      __int16 v183 = v535;
      uint64_t v470 = (2 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v470 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v469;
      uint64_t v471 = v536;
      *(void *)(a3 + 24) = v470;
      *(void *)(a3 + 32) = v471;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 34;
      goto LABEL_764;
    case 35:
      uint64_t v140 = **a2;
      char v141 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v141;
      if (v141) {
        atomic_fetch_add_explicit(&v141->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v140) {
        sub_215D70C64((uint64_t)&v527, a2[1]);
      }
      uint64_t v142 = (*(uint64_t (**)(uint64_t))(*(void *)v140 + 24))(v140);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v142 + 24))(&v536);
      uint64_t v143 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v143;
      if (v143) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 35);
      long long v473 = *(_OWORD *)(v538 + 16);
      long long v472 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v473;
      *(_OWORD *)&v530[32] = v472;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v474 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v475 = v474;
      if ((v474 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v475 = 0;
      }
      __int16 v476 = v474 & 0xFF00;
      if ((v474 & 0xFF0000) == 0) {
        __int16 v476 = 0;
      }
      __int16 v535 = v476 & 0xFF00 | v475;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v477 = v536;
      uint64_t v536 = 0;
      if (v477) {
        (*(void (**)(uint64_t))(*(void *)v477 + 8))(v477);
      }
      *(void *)a3 = &unk_26C665E60;
      v478 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 2);
      __int16 v183 = v535;
      uint64_t v479 = (2 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v479 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v478;
      uint64_t v480 = v536;
      *(void *)(a3 + 24) = v479;
      *(void *)(a3 + 32) = v480;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 35;
      goto LABEL_764;
    case 36:
      uint64_t v144 = **a2;
      size_t v145 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v145;
      if (v145) {
        atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v144) {
        sub_215D70F20((uint64_t)&v527, a2[1]);
      }
      uint64_t v146 = (*(uint64_t (**)(uint64_t))(*(void *)v144 + 24))(v144);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v146 + 24))(&v536);
      uint64_t v147 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v147;
      if (v147) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 36);
      long long v482 = *(_OWORD *)(v538 + 16);
      long long v481 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v482;
      *(_OWORD *)&v530[32] = v481;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v483 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v484 = v483;
      if ((v483 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v484 = 0;
      }
      __int16 v485 = v483 & 0xFF00;
      if ((v483 & 0xFF0000) == 0) {
        __int16 v485 = 0;
      }
      __int16 v535 = v485 & 0xFF00 | v484;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v486 = v536;
      uint64_t v536 = 0;
      if (v486) {
        (*(void (**)(uint64_t))(*(void *)v486 + 8))(v486);
      }
      *(void *)a3 = &unk_26C665E60;
      v487 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 4);
      __int16 v183 = v535;
      uint64_t v488 = (4 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v488 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v487;
      uint64_t v489 = v536;
      *(void *)(a3 + 24) = v488;
      *(void *)(a3 + 32) = v489;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 36;
      goto LABEL_764;
    case 37:
      uint64_t v148 = **a2;
      size_t v149 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v149;
      if (v149) {
        atomic_fetch_add_explicit(&v149->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v148) {
        sub_215CE7450(a2[1]);
      }
      uint64_t v150 = (*(uint64_t (**)(uint64_t))(*(void *)v148 + 24))(v148);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v150 + 24))(&v536);
      uint64_t v151 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v151;
      if (v151) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 37);
      long long v491 = *(_OWORD *)(v538 + 16);
      long long v490 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v491;
      *(_OWORD *)&v530[32] = v490;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v492 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v493 = v492;
      if ((v492 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v493 = 0;
      }
      __int16 v494 = v492 & 0xFF00;
      if ((v492 & 0xFF0000) == 0) {
        __int16 v494 = 0;
      }
      __int16 v535 = v494 & 0xFF00 | v493;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v495 = v536;
      uint64_t v536 = 0;
      if (v495) {
        (*(void (**)(uint64_t))(*(void *)v495 + 8))(v495);
      }
      *(void *)a3 = &unk_26C665E60;
      v496 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 1);
      uint64_t v497 = v529 | 0x100000000;
      __int16 v171 = v535;
      if (!BYTE4(v529)) {
        uint64_t v497 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v496;
      uint64_t v498 = v536;
      *(void *)(a3 + 24) = v497;
      *(void *)(a3 + 32) = v498;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v210 = 37;
LABEL_722:
      *(_DWORD *)(a3 + 56) = v210;
LABEL_723:
      *(_WORD *)(a3 + 6std::__fs::filesystem::__rename(__from, __to, 0) = v171;
      if (!v173) {
        goto LABEL_768;
      }
      goto LABEL_766;
    case 38:
      uint64_t v152 = **a2;
      int v153 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v153;
      if (v153) {
        atomic_fetch_add_explicit(&v153->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v152) {
        sub_215CE7714(a2[1]);
      }
      uint64_t v154 = (*(uint64_t (**)(uint64_t))(*(void *)v152 + 24))(v152);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v154 + 24))(&v536);
      uint64_t v155 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v155;
      if (v155) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 38);
      long long v500 = *(_OWORD *)(v538 + 16);
      long long v499 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v500;
      *(_OWORD *)&v530[32] = v499;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v501 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v502 = v501;
      if ((v501 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v502 = 0;
      }
      __int16 v503 = v501 & 0xFF00;
      if ((v501 & 0xFF0000) == 0) {
        __int16 v503 = 0;
      }
      __int16 v535 = v503 & 0xFF00 | v502;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v504 = v536;
      uint64_t v536 = 0;
      if (v504) {
        (*(void (**)(uint64_t))(*(void *)v504 + 8))(v504);
      }
      *(void *)a3 = &unk_26C665E60;
      v505 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 2);
      __int16 v183 = v535;
      uint64_t v506 = (2 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v506 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v505;
      uint64_t v507 = v536;
      *(void *)(a3 + 24) = v506;
      *(void *)(a3 + 32) = v507;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 38;
      goto LABEL_764;
    case 39:
      uint64_t v156 = **a2;
      unint64_t v157 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v157;
      if (v157) {
        atomic_fetch_add_explicit(&v157->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v156) {
        sub_215CE7A3C(a2[1]);
      }
      uint64_t v158 = (*(uint64_t (**)(uint64_t))(*(void *)v156 + 24))(v156);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v158 + 24))(&v536);
      uint64_t v159 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v159;
      if (v159) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 39);
      long long v509 = *(_OWORD *)(v538 + 16);
      long long v508 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v509;
      *(_OWORD *)&v530[32] = v508;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v510 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v511 = v510;
      if ((v510 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v511 = 0;
      }
      __int16 v512 = v510 & 0xFF00;
      if ((v510 & 0xFF0000) == 0) {
        __int16 v512 = 0;
      }
      __int16 v535 = v512 & 0xFF00 | v511;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v513 = v536;
      uint64_t v536 = 0;
      if (v513) {
        (*(void (**)(uint64_t))(*(void *)v513 + 8))(v513);
      }
      *(void *)a3 = &unk_26C665E60;
      v514 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 2);
      __int16 v183 = v535;
      uint64_t v515 = (2 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v515 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v514;
      uint64_t v516 = v536;
      *(void *)(a3 + 24) = v515;
      *(void *)(a3 + 32) = v516;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 39;
      goto LABEL_764;
    case 40:
      uint64_t v160 = **a2;
      v161 = (std::__shared_weak_count *)(*a2)[1];
      v526 = v161;
      if (v161) {
        atomic_fetch_add_explicit(&v161->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v160) {
        sub_215CE7CFC(a2[1]);
      }
      uint64_t v162 = (*(uint64_t (**)(uint64_t))(*(void *)v160 + 24))(v160);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v162 + 24))(&v536);
      uint64_t v163 = v536;
      uint64_t v536 = 0;
      uint64_t v540 = v163;
      if (v163) {
        operator new();
      }
      uint64_t v541 = 0;
      uint64_t v527 = 0;
      v528 = 0;
      uint64_t v529 = 0;
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(MEMORY[0] + 64))(&v538, 0, 40);
      long long v518 = *(_OWORD *)(v538 + 16);
      long long v517 = *(_OWORD *)(v538 + 32);
      *(_OWORD *)v530 = *(_OWORD *)v538;
      *(_OWORD *)&v530[16] = v518;
      *(_OWORD *)&v530[32] = v517;
      uint64_t v538 = 0;
      MEMORY[0x2166C4D20]();
      uint64_t v531 = *(void *)v530;
      long long v532 = *(_OWORD *)&v530[8];
      long long v533 = *(_OWORD *)&v530[24];
      uint64_t v534 = *(void *)&v530[40];
      uint64_t v519 = (*(uint64_t (**)(void))(MEMORY[0] + 104))(0);
      unsigned __int8 v520 = v519;
      if ((v519 & 0xFFFFFF) <= 0x10000) {
        unsigned __int8 v520 = 0;
      }
      __int16 v521 = v519 & 0xFF00;
      if ((v519 & 0xFF0000) == 0) {
        __int16 v521 = 0;
      }
      __int16 v535 = v521 & 0xFF00 | v520;
      if (!atomic_fetch_add((atomic_ullong *volatile)8, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(MEMORY[0] + 16))(0);
        std::__shared_weak_count::__release_weak(0);
      }
      uint64_t v522 = v536;
      uint64_t v536 = 0;
      if (v522) {
        (*(void (**)(uint64_t))(*(void *)v522 + 8))(v522);
      }
      *(void *)a3 = &unk_26C665E60;
      v523 = v528;
      if (v528) {
        atomic_fetch_add_explicit(&v528->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v538 = v527;
      v539 = v528;
      uint64_t v540 = 0;
      uint64_t v541 = 0;
      sub_215DC93A4((uint64_t)&v536, 3, (uint64_t)&v532, 3, (uint64_t)&v532 + 12, 4);
      __int16 v183 = v535;
      uint64_t v524 = (4 * v529) | 0x100000000;
      if (!BYTE4(v529)) {
        uint64_t v524 = 0;
      }
      *(void *)(a3 + 8) = v527;
      *(void *)(a3 + 16) = v523;
      uint64_t v525 = v536;
      *(void *)(a3 + 24) = v524;
      *(void *)(a3 + 32) = v525;
      *(_DWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v537;
      unint64_t v173 = v528;
      *(void *)(a3 + 48) = *(void *)v530;
      int v193 = 40;
LABEL_764:
      *(_DWORD *)(a3 + 56) = v193;
LABEL_765:
      *(_WORD *)(a3 + 6std::__fs::filesystem::__rename(__from, __to, 0) = v183;
      if (v173)
      {
LABEL_766:
        if (!atomic_fetch_add(&v173->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
          std::__shared_weak_count::__release_weak(v173);
        }
      }
LABEL_768:
      if (v526)
      {
        if (!atomic_fetch_add(&v526->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v526->__on_zero_shared)(v526);
          std::__shared_weak_count::__release_weak(v526);
        }
      }
      return;
    default:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_215E1ABD8);
      abort();
  }
}

void sub_215D6C1D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  uint64_t v5 = *(void *)(v3 - 112);
  *(void *)(v3 - 112) = 0;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    sub_215733368((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6C688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6C6B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6C6E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6C70C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6C738(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6C764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6C790(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6C7BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6C7E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6C814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6C840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6C86C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6C898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6C8C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6C8F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6C91C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6C948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6C974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6C9A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6C9CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6C9F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CA24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CA50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CA7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CAA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CAD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CB00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CB2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CB58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CB84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CBB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CBDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CC08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CC34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CC60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CC8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CCB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CCE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CD10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CD3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v3 - 96);
  sub_215733368(v3 - 80);
  sub_215733368(v2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CD68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CD7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CD90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CDA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CDB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CDCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CDE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CDF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CE08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CE1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CE30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CE44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CE58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CE6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CE80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CE94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CEA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CEBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CED0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CEE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CEF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CF0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CF20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CF34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CF48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CF5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CF70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CF84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CF98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CFAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CFC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CFD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CFE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6CFFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6D010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6D024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6D038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6D04C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6D060(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6D074(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6D12C(uint64_t a1, _DWORD *a2)
{
  v2[14] = &unk_26C66CA90;
  sub_215D93938(a2, (uint64_t)v2);
  operator new();
}

void sub_215D6D38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215D6D3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D6D3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D6D3EC(uint64_t a1, _DWORD *a2)
{
  uint64_t v11 = &unk_26C66CD08;
  sub_215DAB130((uint64_t)v12, a2);
  long long v3 = v12[0];
  long long v4 = v12[1];
  uint64_t v2 = &unk_26C663CE0;
  long long v5 = v12[2];
  uint64_t v6 = v13;
  long long v7 = v14;
  uint64_t v8 = v15;
  uint64_t v10 = v17;
  long long v9 = v16;
  operator new();
}

void sub_215D6D6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215D6D6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D6D6F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D6D710(uint64_t a1, _DWORD *a2)
{
  v2[14] = &unk_26C66CF80;
  sub_215D94178(a2, (uint64_t)v2);
  operator new();
}

void sub_215D6D970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_2159066C4(&a9);
  _Unwind_Resume(a1);
}

void sub_215D6D9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D6D9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215D7F440((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6D9CC(uint64_t a1, _DWORD *a2)
{
  uint64_t v11 = &unk_26C66D1F8;
  sub_215DAB2F0((uint64_t)v12, a2);
  long long v3 = v12[0];
  long long v4 = v12[1];
  uint64_t v2 = &unk_26C663DE0;
  long long v5 = v12[2];
  uint64_t v6 = v13;
  long long v7 = v14;
  uint64_t v8 = v15;
  uint64_t v10 = v17;
  long long v9 = v16;
  operator new();
}

void sub_215D6DC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215D6DCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D6DCD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D6DCF0(uint64_t a1, _DWORD *a2)
{
  v2[14] = &unk_26C66D470;
  sub_215D949B4(a2, (uint64_t)v2);
  operator new();
}

void sub_215D6DF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215D6DF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D6DF98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D6DFB0(uint64_t a1, _DWORD *a2)
{
  uint64_t v11 = &unk_26C66D6E8;
  sub_215DAB4B4((uint64_t)v12, a2);
  long long v3 = v12[0];
  long long v4 = v12[1];
  uint64_t v2 = &unk_26C663EE0;
  long long v5 = v12[2];
  uint64_t v6 = v13;
  long long v7 = v14;
  uint64_t v8 = v15;
  uint64_t v10 = v17;
  long long v9 = v16;
  operator new();
}

void sub_215D6E274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215D6E2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D6E2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D6E2D4(uint64_t a1, _DWORD *a2)
{
  v2[14] = &unk_26C66D960;
  sub_215D951E8(a2, (uint64_t)v2);
  operator new();
}

void sub_215D6E534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_21590A390(&a9);
  _Unwind_Resume(a1);
}

void sub_215D6E568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D6E57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215D81984((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6E590(uint64_t a1, _DWORD *a2)
{
  uint64_t v11 = &unk_26C66DBD8;
  sub_215DAB66C((uint64_t)v12, a2);
  long long v3 = v12[0];
  long long v4 = v12[1];
  uint64_t v2 = &unk_26C663FE0;
  long long v5 = v12[2];
  uint64_t v6 = v13;
  long long v7 = v14;
  uint64_t v8 = v15;
  uint64_t v10 = v17;
  long long v9 = v16;
  operator new();
}

void sub_215D6E854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215D6E888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D6E89C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D6E8B4(uint64_t a1, _DWORD *a2)
{
  v2[14] = &unk_26C66DE50;
  sub_215D95A1C(a2, (uint64_t)v2);
  operator new();
}

void sub_215D6EB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215D6EB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D6EB5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D6EB74(uint64_t a1, _DWORD *a2)
{
  uint64_t v11 = &unk_26C66E0C8;
  sub_215DAB824((uint64_t)v12, a2);
  long long v3 = v12[0];
  long long v4 = v12[1];
  uint64_t v2 = &unk_26C6640E0;
  long long v5 = v12[2];
  uint64_t v6 = v13;
  long long v7 = v14;
  uint64_t v8 = v15;
  uint64_t v10 = v17;
  long long v9 = v16;
  operator new();
}

void sub_215D6EE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215D6EE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D6EE80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D6EE98(uint64_t a1, _DWORD *a2)
{
  v2[14] = &unk_26C66E340;
  sub_215D96268(a2, (uint64_t)v2);
  operator new();
}

void sub_215D6F0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_21590E3BC(&a9);
  _Unwind_Resume(a1);
}

void sub_215D6F12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D6F140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215D83E30((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6F154(uint64_t a1, _DWORD *a2)
{
  uint64_t v11 = &unk_26C66E5B8;
  sub_215DAB9E4((uint64_t)v12, a2);
  long long v3 = v12[0];
  long long v4 = v12[1];
  uint64_t v2 = &unk_26C6641E0;
  long long v5 = v12[2];
  uint64_t v6 = v13;
  long long v7 = v14;
  uint64_t v8 = v15;
  uint64_t v10 = v17;
  long long v9 = v16;
  operator new();
}

void sub_215D6F418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215D6F44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D6F460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D6F478(uint64_t a1, _DWORD *a2)
{
  v2[14] = &unk_26C66E830;
  sub_215D96AA4(a2, (uint64_t)v2);
  operator new();
}

void sub_215D6F6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215D6F70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D6F720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D6F738(uint64_t a1, _DWORD *a2)
{
  uint64_t v11 = &unk_26C66EAA8;
  sub_215DAB4B4((uint64_t)v12, a2);
  long long v3 = v12[0];
  long long v4 = v12[1];
  uint64_t v2 = &unk_26C6642E0;
  long long v5 = v12[2];
  uint64_t v6 = v13;
  long long v7 = v14;
  uint64_t v8 = v15;
  uint64_t v10 = v17;
  long long v9 = v16;
  operator new();
}

void sub_215D6F9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215D6FA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D6FA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D6FA5C(uint64_t a1, _DWORD *a2)
{
  v2[14] = &unk_26C66ED20;
  sub_215D972D8(a2, (uint64_t)v2);
  operator new();
}

void sub_215D6FCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_2159120EC(&a9);
  _Unwind_Resume(a1);
}

void sub_215D6FCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D6FD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215D863C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D6FD18(uint64_t a1, _DWORD *a2)
{
  uint64_t v11 = &unk_26C66EF98;
  sub_215DAB66C((uint64_t)v12, a2);
  long long v3 = v12[0];
  long long v4 = v12[1];
  uint64_t v2 = &unk_26C6643E0;
  long long v5 = v12[2];
  uint64_t v6 = v13;
  long long v7 = v14;
  uint64_t v8 = v15;
  uint64_t v10 = v17;
  long long v9 = v16;
  operator new();
}

void sub_215D6FFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215D70010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D70024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D7003C(uint64_t a1, _DWORD *a2)
{
  uint64_t v11 = &unk_26C66FE68;
  sub_215DAB824((uint64_t)v12, a2);
  long long v3 = v12[0];
  long long v4 = v12[1];
  uint64_t v2 = &unk_26C6646E0;
  long long v5 = v12[2];
  uint64_t v6 = v13;
  long long v7 = v14;
  uint64_t v8 = v15;
  uint64_t v10 = v17;
  long long v9 = v16;
  operator new();
}

void sub_215D70300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215D70334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D70348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D70360(uint64_t a1, _DWORD *a2)
{
  v2[14] = &unk_26C6700E0;
  sub_215D993B8(a2, (uint64_t)v2);
  operator new();
}

void sub_215D705C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_21591A3D0(&a9);
  _Unwind_Resume(a1);
}

void sub_215D705F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D70608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215D8AF08((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D7061C(uint64_t a1, _DWORD *a2)
{
  uint64_t v11 = &unk_26C670358;
  sub_215DAB9E4((uint64_t)v12, a2);
  long long v3 = v12[0];
  long long v4 = v12[1];
  uint64_t v2 = &unk_26C6647E0;
  long long v5 = v12[2];
  uint64_t v6 = v13;
  long long v7 = v14;
  uint64_t v8 = v15;
  uint64_t v10 = v17;
  long long v9 = v16;
  operator new();
}

void sub_215D708E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215D70914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D70928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D70940(uint64_t a1, _DWORD *a2)
{
  uint64_t v11 = &unk_26C671228;
  sub_215DAB824((uint64_t)v12, a2);
  long long v3 = v12[0];
  long long v4 = v12[1];
  uint64_t v2 = &unk_26C664AE0;
  long long v5 = v12[2];
  uint64_t v6 = v13;
  long long v7 = v14;
  uint64_t v8 = v15;
  uint64_t v10 = v17;
  long long v9 = v16;
  operator new();
}

void sub_215D70C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215D70C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D70C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D70C64(uint64_t a1, _DWORD *a2)
{
  v2[14] = &unk_26C6714A0;
  sub_215D9B4D8(a2, (uint64_t)v2);
  operator new();
}

void sub_215D70EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_2159226B4(&a9);
  _Unwind_Resume(a1);
}

void sub_215D70EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D70F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215D8F648((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215D70F20(uint64_t a1, _DWORD *a2)
{
  uint64_t v11 = &unk_26C671718;
  sub_215DAB9E4((uint64_t)v12, a2);
  long long v3 = v12[0];
  long long v4 = v12[1];
  uint64_t v2 = &unk_26C664BE0;
  long long v5 = v12[2];
  uint64_t v6 = v13;
  long long v7 = v14;
  uint64_t v8 = v15;
  uint64_t v10 = v17;
  long long v9 = v16;
  operator new();
}

void sub_215D711E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215D71218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215D7122C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D71244(int a1, _DWORD **a2)
{
  switch(a1)
  {
    case 1:
      uint64_t v2 = *a2;
      LOBYTE(v57) = 0;
      uint64_t v64 = &unk_26C66BFF0;
      uint64_t v58 = &unk_26C66AE18;
      if (v2[1]) {
        BOOL v3 = *v2 == 0;
      }
      else {
        BOOL v3 = 1;
      }
      unint64_t v4 = *(void *)v2;
      if (v3) {
        unint64_t v4 = 0;
      }
      unint64_t v5 = v4 << 32;
      if (!HIDWORD(v4)) {
        unint64_t v5 = 0;
      }
      if (v4) {
        BOOL v6 = HIDWORD(v4) == 0;
      }
      else {
        BOOL v6 = 1;
      }
      *(void *)uint64_t v59 = v4;
      *(void *)&v59[8] = v5 | (v4 != 0);
      v59[16] = 0;
      v59[24] = 0;
      uint64_t v70 = *(void **)&v59[8];
      if (v6) {
        unint64_t v4 = 0;
      }
      unint64_t v63 = v4;
      if ((HIDWORD(v5) & (HIDWORD(v5) - 1)) != 0) {
        uint64_t v7 = 1;
      }
      else {
        uint64_t v7 = HIDWORD(v5);
      }
      sub_215DA3CC4((size_t *)&v60, &v63, &v70, 1, (uint64_t)&v57, 1, v7);
      uint64_t v65 = &unk_26C663A60;
      v66[0] = *(_OWORD *)v59;
      *(_OWORD *)((char *)v66 + 12) = *(_OWORD *)&v59[12];
      long long v67 = v60;
      uint64_t v68 = v61;
      long long v69 = v62;
      operator new();
    case 2:
      uint64_t v8 = *a2;
      LOWORD(v57) = 0;
      uint64_t v64 = &unk_26C66C230;
      uint64_t v58 = &unk_26C66C328;
      if (v8[1]) {
        BOOL v9 = *v8 == 0;
      }
      else {
        BOOL v9 = 1;
      }
      unint64_t v10 = *(void *)v8;
      if (v9) {
        unint64_t v10 = 0;
      }
      unint64_t v11 = v10 << 32;
      if (!HIDWORD(v10)) {
        unint64_t v11 = 0;
      }
      if (v10) {
        BOOL v12 = HIDWORD(v10) == 0;
      }
      else {
        BOOL v12 = 1;
      }
      *(void *)uint64_t v59 = v10;
      *(void *)&v59[8] = v11 | (v10 != 0);
      v59[16] = 0;
      v59[24] = 0;
      uint64_t v70 = *(void **)&v59[8];
      if (v12) {
        unint64_t v10 = 0;
      }
      unint64_t v63 = v10;
      if (((v11 >> 31) & ((v11 >> 31) - 1)) != 0) {
        uint64_t v13 = 2;
      }
      else {
        uint64_t v13 = v11 >> 31;
      }
      sub_215DA906C((unint64_t *)&v60, &v63, (unint64_t *)&v70, 1, &v57, 1, v13);
      uint64_t v65 = &unk_26C663AE0;
      v66[0] = *(_OWORD *)v59;
      *(_OWORD *)((char *)v66 + 12) = *(_OWORD *)&v59[12];
      long long v67 = v60;
      uint64_t v68 = v61;
      long long v69 = v62;
      operator new();
    case 3:
      long long v14 = *a2;
      uint64_t v64 = &unk_26C66C4A8;
      *(void *)uint64_t v59 = &unk_26C66C5A0;
      sub_215D931C8(v14, word_215EF88C8, (uint64_t)&v65);
      operator new();
    case 4:
      uint64_t v15 = *a2;
      int v57 = 0;
      uint64_t v64 = &unk_26C66C720;
      uint64_t v58 = &unk_26C66C818;
      if (v15[1]) {
        BOOL v16 = *v15 == 0;
      }
      else {
        BOOL v16 = 1;
      }
      unint64_t v17 = *(void *)v15;
      if (v16) {
        unint64_t v17 = 0;
      }
      unint64_t v18 = v17 << 32;
      if (!HIDWORD(v17)) {
        unint64_t v18 = 0;
      }
      if (v17) {
        BOOL v19 = HIDWORD(v17) == 0;
      }
      else {
        BOOL v19 = 1;
      }
      *(void *)uint64_t v59 = v17;
      *(void *)&v59[8] = v18 | (v17 != 0);
      v59[16] = 0;
      v59[24] = 0;
      uint64_t v70 = *(void **)&v59[8];
      if (v19) {
        unint64_t v17 = 0;
      }
      unint64_t v63 = v17;
      if (((v18 >> 30) & ((v18 >> 30) - 1)) != 0) {
        uint64_t v20 = 4;
      }
      else {
        uint64_t v20 = v18 >> 30;
      }
      sub_215DA9608((unint64_t *)&v60, &v63, (unint64_t *)&v70, 1, &v57, 1, v20);
      uint64_t v65 = &unk_26C663BE0;
      v66[0] = *(_OWORD *)v59;
      *(_OWORD *)((char *)v66 + 12) = *(_OWORD *)&v59[12];
      long long v67 = v60;
      uint64_t v68 = v61;
      long long v69 = v62;
      operator new();
    case 5:
      uint64_t v21 = *a2;
      LOBYTE(v63) = 0;
      uint64_t v64 = &unk_26C66C998;
      *(void *)uint64_t v59 = &unk_26C66CA90;
      sub_215D937A8(v21, &v63, (uint64_t)&v65);
      operator new();
    case 6:
      uint64_t v22 = *a2;
      LOWORD(v63) = 0;
      uint64_t v64 = &unk_26C66CC10;
      *(void *)uint64_t v59 = &unk_26C66CD08;
      sub_215D93CD8(v22, (const __int16 *)&v63, (uint64_t)&v65);
      operator new();
    case 7:
      uint64_t v23 = *a2;
      uint64_t v64 = &unk_26C66CE88;
      *(void *)uint64_t v59 = &unk_26C66CF80;
      sub_215D93FE4(v23, word_215EF88C8, (uint64_t)&v65);
      operator new();
    case 8:
      uint64_t v24 = *a2;
      LODWORD(v63) = 0;
      uint64_t v64 = &unk_26C66D100;
      *(void *)uint64_t v59 = &unk_26C66D1F8;
      sub_215D944DC(v24, (const float *)&v63, (uint64_t)&v65);
      operator new();
    case 9:
      uint64_t v25 = *a2;
      LOBYTE(v63) = 0;
      uint64_t v64 = &unk_26C66D378;
      *(void *)uint64_t v59 = &unk_26C66D470;
      sub_215D9482C(v25, &v63, (uint64_t)&v65);
      operator new();
    case 10:
      uint64_t v26 = *a2;
      LOWORD(v63) = 0;
      uint64_t v64 = &unk_26C66D5F0;
      *(void *)uint64_t v59 = &unk_26C66D6E8;
      sub_215D94D4C(v26, (const __int16 *)&v63, (uint64_t)&v65);
      operator new();
    case 11:
      uint64_t v27 = *a2;
      uint64_t v64 = &unk_26C66D868;
      *(void *)uint64_t v59 = &unk_26C66D960;
      sub_215D95058(v27, word_215EF88C8, (uint64_t)&v65);
      operator new();
    case 12:
      uint64_t v28 = *a2;
      LODWORD(v63) = 0;
      uint64_t v64 = &unk_26C66DAE0;
      *(void *)uint64_t v59 = &unk_26C66DBD8;
      sub_215D95544(v28, (const float *)&v63, (uint64_t)&v65);
      operator new();
    case 13:
      uint64_t v29 = *a2;
      LOBYTE(v63) = 0;
      uint64_t v64 = &unk_26C66DD58;
      *(void *)uint64_t v59 = &unk_26C66DE50;
      sub_215D9588C(v29, &v63, (uint64_t)&v65);
      operator new();
    case 14:
      uint64_t v30 = *a2;
      LOWORD(v63) = 0;
      uint64_t v64 = &unk_26C66DFD0;
      *(void *)uint64_t v59 = &unk_26C66E0C8;
      sub_215D95DBC(v30, (const __int16 *)&v63, (uint64_t)&v65);
      operator new();
    case 15:
      uint64_t v31 = *a2;
      uint64_t v64 = &unk_26C66E248;
      *(void *)uint64_t v59 = &unk_26C66E340;
      sub_215D960D0(v31, word_215EF88C8, (uint64_t)&v65);
      operator new();
    case 16:
      uint64_t v32 = *a2;
      LODWORD(v63) = 0;
      uint64_t v64 = &unk_26C66E4C0;
      *(void *)uint64_t v59 = &unk_26C66E5B8;
      sub_215D965D0(v32, (const float *)&v63, (uint64_t)&v65);
      operator new();
    case 17:
      char v33 = *a2;
      LOBYTE(v63) = 0;
      uint64_t v64 = &unk_26C66E738;
      *(void *)uint64_t v59 = &unk_26C66E830;
      sub_215D9691C(v33, &v63, (uint64_t)&v65);
      operator new();
    case 18:
      uint64_t v34 = *a2;
      LOWORD(v63) = 0;
      uint64_t v64 = &unk_26C66E9B0;
      *(void *)uint64_t v59 = &unk_26C66EAA8;
      sub_215D96E3C(v34, (const __int16 *)&v63, (uint64_t)&v65);
      operator new();
    case 19:
      uint64_t v35 = *a2;
      uint64_t v64 = &unk_26C66EC28;
      *(void *)uint64_t v59 = &unk_26C66ED20;
      sub_215D97148(v35, word_215EF88C8, (uint64_t)&v65);
      operator new();
    case 20:
      uint64_t v36 = *a2;
      LODWORD(v63) = 0;
      uint64_t v64 = &unk_26C66EEA0;
      *(void *)uint64_t v59 = &unk_26C66EF98;
      sub_215D97634(v36, (const float *)&v63, (uint64_t)&v65);
      operator new();
    case 21:
      long long v37 = *a2;
      LOBYTE(v63) = 0;
      uint64_t v64 = &unk_26C66F118;
      *(void *)uint64_t v59 = &unk_26C66F210;
      sub_215D9797C(v37, &v63, (uint64_t)&v65);
      operator new();
    case 22:
      uint64_t v38 = *a2;
      LOWORD(v63) = 0;
      uint64_t v64 = &unk_26C66F390;
      *(void *)uint64_t v59 = &unk_26C66F488;
      sub_215D97E9C(v38, (const __int16 *)&v63, (uint64_t)&v65);
      operator new();
    case 23:
      uint64_t v39 = *a2;
      uint64_t v64 = &unk_26C66F608;
      *(void *)uint64_t v59 = &unk_26C66F700;
      sub_215D981A8(v39, word_215EF88C8, (uint64_t)&v65);
      operator new();
    case 24:
      uint64_t v40 = *a2;
      LODWORD(v63) = 0;
      uint64_t v64 = &unk_26C66F880;
      *(void *)uint64_t v59 = &unk_26C66F978;
      sub_215D98694(v40, (const float *)&v63, (uint64_t)&v65);
      operator new();
    case 25:
      unint64_t v41 = *a2;
      LOBYTE(v63) = 0;
      uint64_t v64 = &unk_26C66FAF8;
      *(void *)uint64_t v59 = &unk_26C66FBF0;
      sub_215D989DC(v41, &v63, (uint64_t)&v65);
      operator new();
    case 26:
      uint64_t v42 = *a2;
      LOWORD(v63) = 0;
      uint64_t v64 = &unk_26C66FD70;
      *(void *)uint64_t v59 = &unk_26C66FE68;
      sub_215D98F0C(v42, (const __int16 *)&v63, (uint64_t)&v65);
      operator new();
    case 27:
      uint64_t v43 = *a2;
      uint64_t v64 = &unk_26C66FFE8;
      *(void *)uint64_t v59 = &unk_26C6700E0;
      sub_215D99220(v43, word_215EF88C8, (uint64_t)&v65);
      operator new();
    case 28:
      uint64_t v44 = *a2;
      LODWORD(v63) = 0;
      uint64_t v64 = &unk_26C670260;
      *(void *)uint64_t v59 = &unk_26C670358;
      sub_215D99720(v44, (const float *)&v63, (uint64_t)&v65);
      operator new();
    case 29:
      std::string v45 = *a2;
      LOBYTE(v63) = 0;
      uint64_t v64 = &unk_26C6704D8;
      *(void *)uint64_t v59 = &unk_26C6705D0;
      sub_215D99A6C(v45, &v63, (uint64_t)&v65);
      operator new();
    case 30:
      uint64_t v46 = *a2;
      LOWORD(v63) = 0;
      uint64_t v64 = &unk_26C670750;
      *(void *)uint64_t v59 = &unk_26C670848;
      sub_215D99F9C(v46, (const __int16 *)&v63, (uint64_t)&v65);
      operator new();
    case 31:
      uint64_t v47 = *a2;
      uint64_t v64 = &unk_26C6709C8;
      *(void *)uint64_t v59 = &unk_26C670AC0;
      sub_215D9A2B0(v47, word_215EF88C8, (uint64_t)&v65);
      operator new();
    case 32:
      uint64_t v48 = *a2;
      LODWORD(v63) = 0;
      uint64_t v64 = &unk_26C670C40;
      *(void *)uint64_t v59 = &unk_26C670D38;
      sub_215D9A7B0(v48, (const float *)&v63, (uint64_t)&v65);
      operator new();
    case 33:
      size_t v49 = *a2;
      LOBYTE(v63) = 0;
      uint64_t v64 = &unk_26C670EB8;
      *(void *)uint64_t v59 = &unk_26C670FB0;
      sub_215D9AAFC(v49, &v63, (uint64_t)&v65);
      operator new();
    case 34:
      uint64_t v50 = *a2;
      LOWORD(v63) = 0;
      uint64_t v64 = &unk_26C671130;
      *(void *)uint64_t v59 = &unk_26C671228;
      sub_215D9B02C(v50, (const __int16 *)&v63, (uint64_t)&v65);
      operator new();
    case 35:
      uint64_t v51 = *a2;
      uint64_t v64 = &unk_26C6713A8;
      *(void *)uint64_t v59 = &unk_26C6714A0;
      sub_215D9B340(v51, word_215EF88C8, (uint64_t)&v65);
      operator new();
    case 36:
      uint64_t v52 = *a2;
      LODWORD(v63) = 0;
      uint64_t v64 = &unk_26C671620;
      *(void *)uint64_t v59 = &unk_26C671718;
      sub_215D9B840(v52, (const float *)&v63, (uint64_t)&v65);
      operator new();
    case 37:
      unint64_t v53 = *a2;
      LOBYTE(v63) = 0;
      uint64_t v64 = &unk_26C671898;
      *(void *)uint64_t v59 = &unk_26C671990;
      sub_215D9BB8C(v53, &v63, (uint64_t)&v65);
      operator new();
    case 38:
      uint64_t v54 = *a2;
      LOWORD(v63) = 0;
      uint64_t v64 = &unk_26C671B10;
      *(void *)uint64_t v59 = &unk_26C671C08;
      sub_215D9C0BC(v54, (const __int16 *)&v63, (uint64_t)&v65);
      operator new();
    case 39:
      uint64_t v55 = *a2;
      uint64_t v64 = &unk_26C671D88;
      *(void *)uint64_t v59 = &unk_26C671E80;
      sub_215D9C3D0(v55, word_215EF88C8, (uint64_t)&v65);
      operator new();
    case 40:
      uint64_t v56 = *a2;
      LODWORD(v63) = 0;
      uint64_t v64 = &unk_26C672000;
      *(void *)uint64_t v59 = &unk_26C6720F8;
      sub_215D9C8D0(v56, (const float *)&v63, (uint64_t)&v65);
      operator new();
    default:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_215E1ABD8);
      abort();
  }
}

void sub_215D78D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D78D54(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D78D78(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D78D9C(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D78DB0(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)(v1 + 208);
  if (v3) {
    free(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_215D78DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D78DEC(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215926900((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D78E10(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215926900((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D78E34(_Unwind_Exception *a1)
{
  sub_215926900((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D78E48(_Unwind_Exception *a1)
{
  sub_215D919E8(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_215D78E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D78E80(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D78EA4(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D78EC8(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D78EDC()
{
  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D78EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D78F10(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D78F34(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D78F58(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D78F6C()
{
  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D78F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D78FA0(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D78FC4(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D78FE8(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D78FFC()
{
  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D7900C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D79030(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_2159226B4((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79054(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_2159226B4((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79078(_Unwind_Exception *a1)
{
  sub_2159226B4((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D7908C(_Unwind_Exception *a1)
{
  sub_215D8F648(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_215D790A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D790C4(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D790E8(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D7910C(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79120()
{
  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D79130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D79154(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79178(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D7919C(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D791B0()
{
  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D791C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D791E4(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79208(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D7922C(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79240()
{
  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D79250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D79274(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_21591E61C((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79298(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_21591E61C((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D792BC(_Unwind_Exception *a1)
{
  sub_21591E61C((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D792D0(_Unwind_Exception *a1)
{
  sub_215D8D2A8(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_215D792E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D79308(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D7932C(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79350(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79364()
{
  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D79374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D79398(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D793BC(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D793E0(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D793F4()
{
  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D79404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D79428(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D7944C(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79470(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79484()
{
  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D79494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D794B8(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_21591A3D0((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D794DC(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_21591A3D0((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79500(_Unwind_Exception *a1)
{
  sub_21591A3D0((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79514(_Unwind_Exception *a1)
{
  sub_215D8AF08(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_215D79528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D7954C(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79570(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79594(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D795A8()
{
  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D795B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D795DC(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79600(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79624(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79638()
{
  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D79648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D7966C(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79690(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D796B4(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D796C8()
{
  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D796D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D796FC(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215916338((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79720(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215916338((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79744(_Unwind_Exception *a1)
{
  sub_215916338((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79758(_Unwind_Exception *a1)
{
  sub_215D88A5C(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_215D7976C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D79790(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D797B4(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D797D8(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D797EC()
{
  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D797FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D79820(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79844(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79868(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D7987C()
{
  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D7988C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D798B0(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D798D4(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D798F8(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D7990C()
{
  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D7991C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D79940(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_2159120EC((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79964(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_2159120EC((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79988(_Unwind_Exception *a1)
{
  sub_2159120EC((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D7999C(_Unwind_Exception *a1)
{
  sub_215D863C0(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_215D799B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D799D4(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D799F8(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79A1C(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79A30()
{
  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D79A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D79A64(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79A88(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79AAC(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79AC0()
{
  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D79AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D79AF4(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79B18(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79B3C(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79B50()
{
  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D79B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D79B84(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_21590E3BC((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79BA8(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_21590E3BC((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79BCC(_Unwind_Exception *a1)
{
  sub_21590E3BC((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79BE0(_Unwind_Exception *a1)
{
  sub_215D83E30(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_215D79BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D79C18(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79C3C(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79C60(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79C74()
{
  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D79C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D79CA8(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79CCC(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79CF0(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79D04()
{
  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D79D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D79D38(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79D5C(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79D80(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79D94()
{
  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D79DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D79DC8(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_21590A390((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79DEC(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_21590A390((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79E10(_Unwind_Exception *a1)
{
  sub_21590A390((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79E24(_Unwind_Exception *a1)
{
  sub_215D81984(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_215D79E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D79E5C(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79E80(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79EA4(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79EB8()
{
  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D79EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D79EEC(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79F10(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79F34(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79F48()
{
  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D79F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D79F7C(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79FA0(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79FC4(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D79FD8()
{
  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D79FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D7A00C(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_2159066C4((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D7A030(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_2159066C4((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D7A054(_Unwind_Exception *a1)
{
  sub_2159066C4((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D7A068(_Unwind_Exception *a1)
{
  sub_215D7F440(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_215D7A07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D7A0A0(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D7A0C4(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D7A0E8(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D7A0FC()
{
  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D7A10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D7A130(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D7A154(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_215904884((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D7A178(_Unwind_Exception *a1)
{
  sub_215904884((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D7A18C()
{
  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D7A19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D7A1C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v2);
  sub_215733368(v3 - 208);
  sub_2159009A0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215D7A1E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v2);
  sub_215733368(v3 - 208);
  sub_2159009A0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215D7A208(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159009A0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215D7A21C()
{
  if (!*(void *)(v0 + 184)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D7A22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D7A250(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_2159029A8((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D7A274(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  sub_215733368(v2 - 208);
  sub_2159029A8((uint64_t *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_215D7A298(_Unwind_Exception *a1)
{
  sub_2159029A8((uint64_t *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_215D7A2AC(_Unwind_Exception *a1)
{
  sub_215D7D7C4(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_215D7A2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D7A2E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v2);
  sub_215733368(v3 - 208);
  sub_2159009A0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215D7A308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v2);
  sub_215733368(v3 - 208);
  sub_2159009A0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215D7A32C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159009A0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215D7A340()
{
  if (!*(void *)(v0 + 184)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D7A350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  sub_215733368(v5 - 208);
  sub_215733368(v4);
  _Unwind_Resume(a1);
}

void sub_215D7A374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v2);
  sub_215733368(v3 - 208);
  sub_2159009A0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215D7A398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368(v2);
  sub_215733368(v3 - 208);
  sub_2159009A0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215D7A3BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159009A0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215D7A3D0()
{
  if (!*(void *)(v0 + 184)) {
    JUMPOUT(0x215D78DC0);
  }
  JUMPOUT(0x215D78DBCLL);
}

void sub_215D7A484(int a1, _DWORD **a2)
{
  switch(a1)
  {
    case 1:
      sub_215BA1F3C(*a2);
    case 2:
      sub_215BAA614(*a2);
    case 3:
      sub_215CE54A8(*a2);
    case 4:
      sub_215CE5744(*a2);
    case 5:
      sub_215D6D12C((uint64_t)&v2, *a2);
    case 6:
      sub_215D6D3EC((uint64_t)&v2, *a2);
    case 7:
      sub_215D6D710((uint64_t)&v2, *a2);
    case 8:
      sub_215D6D9CC((uint64_t)&v2, *a2);
    case 9:
      sub_215D6DCF0((uint64_t)&v2, *a2);
    case 10:
      sub_215D6DFB0((uint64_t)&v2, *a2);
    case 11:
      sub_215D6E2D4((uint64_t)&v2, *a2);
    case 12:
      sub_215D6E590((uint64_t)&v2, *a2);
    case 13:
      sub_215D6E8B4((uint64_t)&v2, *a2);
    case 14:
      sub_215D6EB74((uint64_t)&v2, *a2);
    case 15:
      sub_215D6EE98((uint64_t)&v2, *a2);
    case 16:
      sub_215D6F154((uint64_t)&v2, *a2);
    case 17:
      sub_215D6F478((uint64_t)&v2, *a2);
    case 18:
      sub_215D6F738((uint64_t)&v2, *a2);
    case 19:
      sub_215D6FA5C((uint64_t)&v2, *a2);
    case 20:
      sub_215D6FD18((uint64_t)&v2, *a2);
    case 21:
      sub_215BA21DC(*a2);
    case 22:
      sub_215CE59E4(*a2);
    case 23:
      sub_215CE5D0C(*a2);
    case 24:
      sub_215CE5FCC(*a2);
    case 25:
      sub_215CE62F4(*a2);
    case 26:
      sub_215D7003C((uint64_t)&v2, *a2);
    case 27:
      sub_215D70360((uint64_t)&v2, *a2);
    case 28:
      sub_215D7061C((uint64_t)&v2, *a2);
    case 29:
      sub_215CE65B8(*a2);
    case 30:
      sub_215CE687C(*a2);
    case 31:
      sub_215CE6BA4(*a2);
    case 32:
      sub_215CE6E64(*a2);
    case 33:
      sub_215CE718C(*a2);
    case 34:
      sub_215D70940((uint64_t)&v2, *a2);
    case 35:
      sub_215D70C64((uint64_t)&v2, *a2);
    case 36:
      sub_215D70F20((uint64_t)&v2, *a2);
    case 37:
      sub_215CE7450(*a2);
    case 38:
      sub_215CE7714(*a2);
    case 39:
      sub_215CE7A3C(*a2);
    case 40:
      sub_215CE7CFC(*a2);
    default:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_215E1ABD8);
      abort();
  }
}

void sub_215D7C4C0(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C4E4(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C508(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C52C(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C550(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C574(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C598(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C5BC(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C5E0(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C604(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C628(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C64C(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C670(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C694(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C6B8(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C6DC(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C700(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C724(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C748(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C76C(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C790(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C7B4(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C7D8(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C7FC(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C820(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C844(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C868(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C88C(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C8B0(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C8D4(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C8F8(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C91C(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C940(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C964(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C988(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C9AC(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C9D0(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7C9F4(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7CA18(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7CA3C(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215D7CB04(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t sub_215D7CC08(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_215D7CC3C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 48) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t (***sub_215D7CC90())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D7CD0C()
{
}

void sub_215D7CD90(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C406A8758A4);
  _Unwind_Resume(a1);
}

void sub_215D7CDB4(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C664E50, 0);
  if (v5)
  {
    BOOL v6 = (_OWORD *)(a1 + 8);
    uint64_t v7 = (long long *)(v5 + 8);
    if (*(void *)(a1 + 48)
      && *(_DWORD *)v7 == *(_DWORD *)v6
      && *((_DWORD *)v5 + 3) == *(_DWORD *)(a1 + 12)
      && *((_DWORD *)v5 + 4) == *(_DWORD *)(a1 + 16)
      && *((_DWORD *)v5 + 5) == *(_DWORD *)(a1 + 20))
    {
      *(void *)BOOL v19 = v5 + 8;
      *(void *)&v19[8] = a1 + 8;
      sub_2158A09D8((size_t *)v19);
    }
    else
    {
      long long v8 = *v7;
      *(_OWORD *)&v19[12] = *(_OWORD *)(v5 + 20);
      *(_OWORD *)BOOL v19 = v8;
      sub_21584EF24((uint64_t)v20, (uint64_t)(v5 + 40));
      *BOOL v6 = *(_OWORD *)v19;
      *(_OWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)&v19[12];
      *(_OWORD *)(a1 + 64) = v21;
      *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v20[0];
      BOOL v9 = *(void **)(a1 + 48);
      if (v9) {
        free(v9);
      }
      uint64_t v10 = v20[2];
      *(void *)(a1 + 48) = v20[1];
      *(void *)(a1 + 56) = v10;
    }
  }
  else
  {
    (*(void (**)(void *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v17, lpsrc, 1);
    uint64_t v11 = *(void *)(v17[0] + 16);
    *(_OWORD *)BOOL v19 = *(_OWORD *)v17[0];
    *(void *)&v19[16] = v11;
    v17[0] = 0;
    MEMORY[0x2166C4D20]();
    uint64_t v12 = *(void *)(a1 + 48);
    if (*(_DWORD *)(a1 + 12)) {
      BOOL v13 = *(_DWORD *)(a1 + 8) == 0;
    }
    else {
      BOOL v13 = 1;
    }
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v15 = *(void *)(a1 + 16);
    if (v13) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = v14;
    }
    if (HIDWORD(v16) * HIDWORD(v15) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    v17[0] = v12;
    v17[1] = v16;
    v17[2] = v15;
    v18[0] = (size_t)v19;
    v18[1] = (size_t)v17;
    sub_21584F0C8(v18);
  }
}

uint64_t sub_215D7CFDC(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void sub_215D7CFE4(uint64_t a1, int a2)
{
  if (a2 == 1
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 12)) {
      BOOL v3 = *(_DWORD *)(a1 + 8) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    if (v3) {
      int v6 = 0;
    }
    else {
      int v6 = HIDWORD(v4);
    }
    if (v6 * HIDWORD(v5) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D7D0E4(uint64_t a1, int a2)
{
  if (a2 == 1
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 12)) {
      BOOL v3 = *(_DWORD *)(a1 + 8) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    if (v3) {
      int v6 = 0;
    }
    else {
      int v6 = HIDWORD(v4);
    }
    if (v6 * HIDWORD(v5) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D7D1E4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_215D7D218(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 48) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t (***sub_215D7D26C())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D7D2E8()
{
}

void sub_215D7D36C(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C406A8758A4);
  _Unwind_Resume(a1);
}

void sub_215D7D390(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C664E68, 0);
  if (v5)
  {
    int v6 = (_OWORD *)(a1 + 8);
    uint64_t v7 = (long long *)(v5 + 8);
    if (*(void *)(a1 + 48)
      && *(_DWORD *)v7 == *(_DWORD *)v6
      && *((_DWORD *)v5 + 3) == *(_DWORD *)(a1 + 12)
      && *((_DWORD *)v5 + 4) == *(_DWORD *)(a1 + 16)
      && *((_DWORD *)v5 + 5) == *(_DWORD *)(a1 + 20))
    {
      uint64_t v8 = (uint64_t)(v5 + 8);
      sub_2158A0F4C(v8, a1 + 8);
    }
    else
    {
      long long v9 = *v7;
      *(_OWORD *)&v19[12] = *(_OWORD *)(v5 + 20);
      *(_OWORD *)BOOL v19 = v9;
      sub_21584FABC((uint64_t)v20, (uint64_t)(v5 + 40));
      *int v6 = *(_OWORD *)v19;
      *(_OWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)&v19[12];
      *(_OWORD *)(a1 + 64) = v21;
      *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v20[0];
      uint64_t v10 = *(void **)(a1 + 48);
      if (v10) {
        free(v10);
      }
      uint64_t v11 = v20[2];
      *(void *)(a1 + 48) = v20[1];
      *(void *)(a1 + 56) = v11;
    }
  }
  else
  {
    (*(void (**)(void *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v18, lpsrc, 2);
    uint64_t v12 = *(void *)(v18[0] + 16);
    *(_OWORD *)BOOL v19 = *(_OWORD *)v18[0];
    *(void *)&v19[16] = v12;
    v18[0] = 0;
    MEMORY[0x2166C4D20]();
    uint64_t v13 = *(void *)(a1 + 48);
    if (*(_DWORD *)(a1 + 12)) {
      BOOL v14 = *(_DWORD *)(a1 + 8) == 0;
    }
    else {
      BOOL v14 = 1;
    }
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v16 = *(void *)(a1 + 16);
    if (v14) {
      uint64_t v17 = 0;
    }
    else {
      uint64_t v17 = v15;
    }
    if (HIDWORD(v17) * HIDWORD(v16) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    v18[0] = v13;
    v18[1] = v17;
    size_t v18[2] = v16;
    sub_21584FC70((uint64_t *)v19, (uint64_t)v18);
  }
}

uint64_t sub_215D7D5BC(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void sub_215D7D5C4(uint64_t a1, int a2)
{
  if (a2 == 2
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 12)) {
      BOOL v3 = *(_DWORD *)(a1 + 8) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    if (v3) {
      int v6 = 0;
    }
    else {
      int v6 = HIDWORD(v4);
    }
    if (v6 * HIDWORD(v5) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D7D6C4(uint64_t a1, int a2)
{
  if (a2 == 2
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 12)) {
      BOOL v3 = *(_DWORD *)(a1 + 8) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    if (v3) {
      int v6 = 0;
    }
    else {
      int v6 = HIDWORD(v4);
    }
    if (v6 * HIDWORD(v5) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D7D7C4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 68) || *(_DWORD *)(a1 + 64) == 0;
    int v4 = v3 ? 0 : *(_DWORD *)(a1 + 68);
    if (v4 * (*(void *)(a1 + 72) >> 33) != -1) {
      goto LABEL_11;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 48);
    if (v2) {
LABEL_11:
    }
      free(v2);
  }
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_215D7D86C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 68) || *(_DWORD *)(a1 + 64) == 0;
    int v4 = v3 ? 0 : *(_DWORD *)(a1 + 68);
    if (v4 * (*(void *)(a1 + 72) >> 33) != -1) {
      goto LABEL_11;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 48);
    if (v2) {
LABEL_11:
    }
      free(v2);
  }
  *(void *)(a1 + 48) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t (***sub_215D7D934())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D7D9B0()
{
}

void sub_215D7DA34(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C406A8758A4);
  _Unwind_Resume(a1);
}

double sub_215D7DA58(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C664E80, 0);
  if (v5)
  {
    sub_2158A18A8(a1 + 8, v5 + 2);
  }
  else
  {
    (*(void (**)(void *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v13, lpsrc, 3);
    uint64_t v7 = *(void *)(v13[0] + 16);
    long long v14 = *(_OWORD *)v13[0];
    uint64_t v15 = v7;
    v13[0] = 0;
    MEMORY[0x2166C4D20]();
    uint64_t v8 = *(void *)(a1 + 48);
    if (*(_DWORD *)(a1 + 12)) {
      BOOL v9 = *(_DWORD *)(a1 + 8) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    uint64_t v10 = *(void *)(a1 + 8);
    uint64_t v11 = *(void *)(a1 + 16);
    if (v9) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = v10;
    }
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    v13[0] = v8;
    v13[1] = v12;
    v13[2] = v11;
    v16[0] = (uint64_t)&v14;
    v16[1] = (uint64_t)v13;
    *(void *)&double result = sub_2158A12BC(v16);
  }
  return result;
}

uint64_t sub_215D7DBD4(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void sub_215D7DBDC(uint64_t a1, int a2)
{
  if (a2 == 3
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 12)) {
      BOOL v3 = *(_DWORD *)(a1 + 8) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    if (v3) {
      int v6 = 0;
    }
    else {
      int v6 = HIDWORD(v4);
    }
    if (v6 * HIDWORD(v5) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D7DCDC(uint64_t a1, int a2)
{
  if (a2 == 3
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 12)) {
      BOOL v3 = *(_DWORD *)(a1 + 8) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    if (v3) {
      int v6 = 0;
    }
    else {
      int v6 = HIDWORD(v4);
    }
    if (v6 * HIDWORD(v5) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D7DDDC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_215D7DE10(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 48) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t (***sub_215D7DE64())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D7DEE0()
{
}

void sub_215D7DF64(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C406A8758A4);
  _Unwind_Resume(a1);
}

float sub_215D7DF88(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C664E98, 0);
  if (v5)
  {
    int v6 = (_OWORD *)(a1 + 8);
    uint64_t v7 = (long long *)(v5 + 8);
    if (*(void *)(a1 + 48)
      && *(_DWORD *)v7 == *(_DWORD *)v6
      && *((_DWORD *)v5 + 3) == *(_DWORD *)(a1 + 12)
      && *((_DWORD *)v5 + 4) == *(_DWORD *)(a1 + 16)
      && *((_DWORD *)v5 + 5) == *(_DWORD *)(a1 + 20))
    {
      uint64_t v8 = (unsigned int *)(v5 + 8);
      return sub_2158A2184(v8, a1 + 8);
    }
    else
    {
      long long v10 = *v7;
      *(_OWORD *)&v20[12] = *(_OWORD *)(v5 + 20);
      *(_OWORD *)uint64_t v20 = v10;
      sub_215850F98((uint64_t)v21, (uint64_t)(v5 + 40));
      *int v6 = *(_OWORD *)v20;
      *(_OWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)&v20[12];
      float result = v22[0];
      *(_OWORD *)(a1 + 64) = *(_OWORD *)v22;
      *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v21[0];
      uint64_t v11 = *(void **)(a1 + 48);
      if (v11) {
        free(v11);
      }
      uint64_t v12 = v21[2];
      *(void *)(a1 + 48) = v21[1];
      *(void *)(a1 + 56) = v12;
    }
  }
  else
  {
    (*(void (**)(void *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v19, lpsrc, 4);
    uint64_t v13 = *(void *)(v19[0] + 16);
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v19[0];
    *(void *)&v20[16] = v13;
    v19[0] = 0;
    MEMORY[0x2166C4D20]();
    uint64_t v14 = *(void *)(a1 + 48);
    if (*(_DWORD *)(a1 + 12)) {
      BOOL v15 = *(_DWORD *)(a1 + 8) == 0;
    }
    else {
      BOOL v15 = 1;
    }
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v17 = *(void *)(a1 + 16);
    if (v15) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = v16;
    }
    if (HIDWORD(v18) * HIDWORD(v17) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    v19[0] = v14;
    v19[1] = v18;
    v19[2] = v17;
    return sub_21585114C((uint64_t)v20, (uint64_t)v19);
  }
  return result;
}

uint64_t sub_215D7E1B4(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void sub_215D7E1BC(uint64_t a1, int a2)
{
  if (a2 == 4
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 12)) {
      BOOL v3 = *(_DWORD *)(a1 + 8) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    if (v3) {
      int v6 = 0;
    }
    else {
      int v6 = HIDWORD(v4);
    }
    if (v6 * HIDWORD(v5) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D7E2BC(uint64_t a1, int a2)
{
  if (a2 == 4
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 12)) {
      BOOL v3 = *(_DWORD *)(a1 + 8) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    if (v3) {
      int v6 = 0;
    }
    else {
      int v6 = HIDWORD(v4);
    }
    if (v6 * HIDWORD(v5) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D7E3BC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D7E3F0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D7E444(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C663C60;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)BOOL v19 = 2;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)BOOL v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  uint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  long long v10 = (size_t *)(a1 + 64);
  *(void *)BOOL v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if ((v9 & (v9 - 1)) != 0) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = v9;
  }
  sub_215DA9874(v10, (unsigned int *)&v17, (uint64_t)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D7E580())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D7E5FC()
{
}

void sub_215D7E690(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

size_t *sub_215D7E6B4(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C664EB0, 0);
  if (v5)
  {
    return (size_t *)sub_2158A2B00(a1 + 8, (long long *)(v5 + 8));
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v24, lpsrc, 5);
    uint64_t v7 = v24;
    long long v9 = *(_OWORD *)(v24 + 16);
    long long v8 = *(_OWORD *)(v24 + 32);
    v22[0] = *(_OWORD *)v24;
    v22[1] = v9;
    void v22[2] = v8;
    *(void *)&long long v24 = 0;
    MEMORY[0x2166C4D20](v7, 0xC400A2AC0F1, v10, v11, v12, v13);
    uint64_t v14 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v15 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v15 = 1;
    }
    unint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 40);
    if (v15) {
      unint64_t v16 = 0;
    }
    LODWORD(v24) = 2;
    *(void *)((char *)&v24 + 4) = v16;
    unint64_t v18 = v16;
    uint64_t v19 = v24;
    unint64_t v20 = HIDWORD(v16);
    LODWORD(v24) = 1;
    *(void *)((char *)&v24 + 4) = v17;
    uint64_t v21 = v24;
    if (HIDWORD(v17) * HIDWORD(v16) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v24 = v14;
    *((void *)&v24 + 1) = v19;
    int v25 = v20;
    uint64_t v26 = v21;
    int v27 = HIDWORD(v17);
    unint64_t v28 = v18;
    uint64_t v29 = v17;
    v23[0] = (size_t)v22;
    v23[1] = (size_t)&v24;
    return sub_2158A24F4(v23);
  }
}

uint64_t sub_215D7E8DC(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D7E8E4(uint64_t a1, int a2)
{
  if (a2 == 5
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D7EA70(uint64_t a1, int a2)
{
  if (a2 == 5
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D7EBFC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D7EC30(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D7EC84(uint64_t a1, uint64_t a2, const __int16 *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C663CE0;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)uint64_t v19 = 2;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)uint64_t v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)uint64_t v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0) {
    uint64_t v15 = 2;
  }
  else {
    uint64_t v15 = 2 * v9;
  }
  sub_215DA9D40(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D7EDC4())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D7EE40()
{
}

void sub_215D7EED4(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

uint64_t *sub_215D7EEF8(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C664EC8, 0);
  if (v5)
  {
    return (uint64_t *)sub_2158A3340(a1 + 8, (long long *)(v5 + 8));
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v24, lpsrc, 6);
    uint64_t v7 = v24;
    long long v9 = *(_OWORD *)(v24 + 16);
    long long v8 = *(_OWORD *)(v24 + 32);
    v22[0] = *(_OWORD *)v24;
    v22[1] = v9;
    void v22[2] = v8;
    *(void *)&long long v24 = 0;
    MEMORY[0x2166C4D20](v7, 0xC400A2AC0F1, v10, v11, v12, v13);
    uint64_t v14 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v15 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v15 = 1;
    }
    unint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 40);
    if (v15) {
      unint64_t v16 = 0;
    }
    LODWORD(v24) = 2;
    *(void *)((char *)&v24 + 4) = v16;
    unint64_t v18 = v16;
    uint64_t v19 = v24;
    unint64_t v20 = HIDWORD(v16);
    LODWORD(v24) = 1;
    *(void *)((char *)&v24 + 4) = v17;
    uint64_t v21 = v24;
    if (HIDWORD(v17) * HIDWORD(v16) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v24 = v14;
    *((void *)&v24 + 1) = v19;
    int v25 = v20;
    uint64_t v26 = v21;
    int v27 = HIDWORD(v17);
    unint64_t v28 = v18;
    uint64_t v29 = v17;
    v23[0] = (uint64_t)v22;
    v23[1] = (uint64_t)&v24;
    return sub_2158A307C(v23);
  }
}

uint64_t sub_215D7F120(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D7F128(uint64_t a1, int a2)
{
  if (a2 == 6
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D7F2B4(uint64_t a1, int a2)
{
  if (a2 == 6
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D7F440(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_215D7F4F0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D7F5A0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D7F670(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C663D60;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)uint64_t v19 = 2;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)uint64_t v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)uint64_t v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0) {
    uint64_t v15 = 2;
  }
  else {
    uint64_t v15 = 2 * v9;
  }
  sub_215DAA448(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D7F7B0())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D7F82C()
{
}

void sub_215D7F8C0(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_215D7F8E4(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C664EE0, 0);
  if (v5)
  {
    sub_2158A4630(a1 + 8, (long long *)(v5 + 8));
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v24, lpsrc, 7);
    uint64_t v7 = v24;
    long long v9 = *(_OWORD *)(v24 + 16);
    long long v8 = *(_OWORD *)(v24 + 32);
    v22[0] = *(_OWORD *)v24;
    v22[1] = v9;
    void v22[2] = v8;
    *(void *)&long long v24 = 0;
    MEMORY[0x2166C4D20](v7, 0xC400A2AC0F1, v10, v11, v12, v13);
    uint64_t v14 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v15 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v15 = 1;
    }
    unint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 40);
    if (v15) {
      unint64_t v16 = 0;
    }
    LODWORD(v24) = 2;
    *(void *)((char *)&v24 + 4) = v16;
    unint64_t v18 = v16;
    uint64_t v19 = v24;
    unint64_t v20 = HIDWORD(v16);
    LODWORD(v24) = 1;
    *(void *)((char *)&v24 + 4) = v17;
    uint64_t v21 = v24;
    if (HIDWORD(v17) * HIDWORD(v16) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v24 = v14;
    *((void *)&v24 + 1) = v19;
    int v25 = v20;
    uint64_t v26 = v21;
    int v27 = HIDWORD(v17);
    unint64_t v28 = v18;
    uint64_t v29 = v17;
    v23[0] = (uint64_t)v22;
    v23[1] = (uint64_t)&v24;
    *(void *)&double result = sub_2158A3B98(v23);
  }
  return result;
}

uint64_t sub_215D7FB0C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D7FB14(uint64_t a1, int a2)
{
  if (a2 == 7
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D7FCA0(uint64_t a1, int a2)
{
  if (a2 == 7
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D7FE2C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D7FE60(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D7FEB4(uint64_t a1, uint64_t a2, const float *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C663DE0;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)uint64_t v19 = 2;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)uint64_t v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)uint64_t v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((4 * v9) & (4 * v9 - 1)) != 0) {
    uint64_t v15 = 4;
  }
  else {
    uint64_t v15 = 4 * v9;
  }
  sub_215DAAA28(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D7FFF8())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D80074()
{
}

void sub_215D80108(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_215D8012C(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C664EF8, 0);
  if (v5)
  {
    sub_2158A4F94(a1 + 8, (long long *)(v5 + 8));
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v24, lpsrc, 8);
    uint64_t v7 = v24;
    long long v9 = *(_OWORD *)(v24 + 16);
    long long v8 = *(_OWORD *)(v24 + 32);
    v22[0] = *(_OWORD *)v24;
    v22[1] = v9;
    void v22[2] = v8;
    *(void *)&long long v24 = 0;
    MEMORY[0x2166C4D20](v7, 0xC400A2AC0F1, v10, v11, v12, v13);
    uint64_t v14 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v15 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v15 = 1;
    }
    unint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 40);
    if (v15) {
      unint64_t v16 = 0;
    }
    LODWORD(v24) = 2;
    *(void *)((char *)&v24 + 4) = v16;
    unint64_t v18 = v16;
    uint64_t v19 = v24;
    unint64_t v20 = HIDWORD(v16);
    LODWORD(v24) = 1;
    *(void *)((char *)&v24 + 4) = v17;
    uint64_t v21 = v24;
    if (HIDWORD(v17) * HIDWORD(v16) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v24 = v14;
    *((void *)&v24 + 1) = v19;
    int v25 = v20;
    uint64_t v26 = v21;
    int v27 = HIDWORD(v17);
    unint64_t v28 = v18;
    uint64_t v29 = v17;
    v23[0] = (uint64_t)v22;
    v23[1] = (uint64_t)&v24;
    return sub_2158A4CE8(v23);
  }
  return result;
}

uint64_t sub_215D80354(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D8035C(uint64_t a1, int a2)
{
  if (a2 == 8
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D804E8(uint64_t a1, int a2)
{
  if (a2 == 8
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D80674(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D806A8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D806FC(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C663E60;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)uint64_t v19 = 3;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)uint64_t v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  uint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = (size_t *)(a1 + 64);
  *(void *)uint64_t v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if ((v9 & (v9 - 1)) != 0) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = v9;
  }
  sub_215DA9874(v10, (unsigned int *)&v17, (uint64_t)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D80838())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D808B4()
{
}

void sub_215D80948(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

uint64_t sub_215D8096C(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C664F10, 0);
  if (v5)
  {
    return sub_2158A5A6C(a1 + 8, (uint64_t)v5 + 8);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v33, lpsrc, 9);
    long long v8 = *(_OWORD *)(v33 + 16);
    long long v7 = *(_OWORD *)(v33 + 32);
    long long v29 = *(_OWORD *)v33;
    long long v30 = v8;
    long long v31 = v7;
    *(void *)&long long v33 = 0;
    uint64_t result = MEMORY[0x2166C4D20]();
    uint64_t v9 = *(unsigned char **)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    unint64_t v11 = *(void *)(a1 + 32);
    unint64_t v12 = *(void *)(a1 + 40);
    if (v10) {
      unint64_t v11 = 0;
    }
    LODWORD(v33) = 3;
    *(void *)((char *)&v33 + 4) = v11;
    unint64_t v13 = v11;
    uint64_t v14 = v33;
    unint64_t v15 = HIDWORD(v11);
    LODWORD(v33) = 1;
    *(void *)((char *)&v33 + 4) = v12;
    unint64_t v16 = v33;
    unint64_t v17 = HIDWORD(v12);
    if (HIDWORD(v12) * HIDWORD(v11) == -1)
    {
      uint64_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8);
      if (result) {
        abort();
      }
    }
    *(void *)&long long v33 = v9;
    *((void *)&v33 + 1) = v14;
    int v34 = v15;
    unint64_t v35 = v16;
    int v36 = HIDWORD(v12);
    unint64_t v37 = v13;
    unint64_t v38 = v12;
    v32[0] = (size_t)&v29;
    v32[1] = (size_t)&v33;
    if (v16 == 1 && DWORD1(v30) == 1)
    {
      return (uint64_t)sub_2158A2610(v32);
    }
    else if (DWORD2(v29) && HIDWORD(v29) && v30)
    {
      unint64_t v18 = HIDWORD(v16);
      int v19 = HIDWORD(v29) - 1;
      uint64_t v20 = DWORD2(v30);
      uint64_t v21 = (unsigned char *)v29;
      int v22 = v30 - 1;
      if (v30 != 1)
      {
        uint64_t v23 = HIDWORD(v30);
        if (HIDWORD(v29) == 1)
        {
          do
          {
            *uint64_t v9 = *v21;
            v9[1] = v21[1];
            void v9[2] = v21[2];
            v21 += v23;
            v9 += v17;
            --v22;
          }
          while (v22);
        }
        else
        {
          int v24 = 0;
          uint64_t v25 = (uint64_t)(v9 + 2);
          uint64_t v26 = (unsigned char *)(v29 + 2);
          do
          {
            int v27 = v26;
            uint64_t result = v25;
            int v28 = v19;
            do
            {
              *(unsigned char *)(result - 2) = *(v27 - 2);
              *(unsigned char *)(result - 1) = *(v27 - 1);
              *(unsigned char *)uint64_t result = *v27;
              result += v18;
              v27 += v20;
              --v28;
            }
            while (v28);
            *(unsigned char *)(result - 2) = *(v27 - 2);
            *(unsigned char *)(result - 1) = *(v27 - 1);
            *(unsigned char *)uint64_t result = *v27;
            v21 += v23;
            v9 += v17;
            ++v24;
            v25 += v17;
            v26 += v23;
          }
          while (v24 != v22);
        }
      }
      for (; v19; --v19)
      {
        *uint64_t v9 = *v21;
        v9[1] = v21[1];
        void v9[2] = v21[2];
        v21 += v20;
        v9 += v18;
      }
      *uint64_t v9 = *v21;
      v9[1] = v21[1];
      void v9[2] = v21[2];
    }
  }
  return result;
}

uint64_t sub_215D80CC8(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D80CD0(uint64_t a1, int a2)
{
  if (a2 == 9
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D80E5C(uint64_t a1, int a2)
{
  if (a2 == 9
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D80FE8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D8101C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D81070(uint64_t a1, uint64_t a2, const __int16 *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C663EE0;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)int v19 = 3;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)int v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)int v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0) {
    uint64_t v15 = 2;
  }
  else {
    uint64_t v15 = 2 * v9;
  }
  sub_215DA9D40(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D811B4())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D81230()
{
}

void sub_215D812C4(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

uint64_t sub_215D812E8(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C664F28, 0);
  if (v5)
  {
    return sub_2158A5F84(a1 + 8, (uint64_t)v5 + 8);
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v34, lpsrc, 10);
  long long v8 = *(_OWORD *)(v34 + 16);
  long long v7 = *(_OWORD *)(v34 + 32);
  long long v30 = *(_OWORD *)v34;
  long long v31 = v8;
  long long v32 = v7;
  *(void *)&long long v34 = 0;
  uint64_t result = MEMORY[0x2166C4D20]();
  unint64_t v9 = *(_WORD **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36)) {
    BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  unint64_t v11 = *(void *)(a1 + 32);
  unint64_t v12 = *(void *)(a1 + 40);
  if (v10) {
    unint64_t v11 = 0;
  }
  LODWORD(v34) = 3;
  *(void *)((char *)&v34 + 4) = v11;
  unint64_t v13 = v11;
  uint64_t v14 = v34;
  unint64_t v15 = HIDWORD(v11);
  LODWORD(v34) = 1;
  *(void *)((char *)&v34 + 4) = v12;
  unint64_t v16 = v34;
  unint64_t v17 = HIDWORD(v12);
  if (HIDWORD(v12) * HIDWORD(v11) == -1)
  {
    uint64_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8);
    if (result) {
      abort();
    }
  }
  *(void *)&long long v34 = v9;
  *((void *)&v34 + 1) = v14;
  int v35 = v15;
  unint64_t v36 = v16;
  int v37 = HIDWORD(v12);
  unint64_t v38 = v13;
  unint64_t v39 = v12;
  v33[0] = (uint64_t)&v30;
  v33[1] = (uint64_t)&v34;
  if (v16 == 1 && DWORD1(v31) == 1) {
    return (uint64_t)sub_2158530CC(v33);
  }
  if (DWORD2(v30) && HIDWORD(v30) && v31)
  {
    unint64_t v18 = HIDWORD(v16);
    int v19 = HIDWORD(v30) - 1;
    uint64_t v20 = DWORD2(v31);
    uint64_t v21 = (_WORD *)v30;
    int v22 = v31 - 1;
    if (v31 != 1)
    {
      uint64_t v23 = HIDWORD(v31);
      if (HIDWORD(v30) == 1)
      {
        do
        {
          *unint64_t v9 = *v21;
          v9[1] = v21[1];
          void v9[2] = v21[2];
          v21 += v23;
          v9 += v17;
          --v22;
        }
        while (v22);
LABEL_29:
        *unint64_t v9 = *v21;
        v9[1] = v21[1];
        void v9[2] = v21[2];
        return result;
      }
      int v24 = 0;
      uint64_t v25 = v9 + 2;
      uint64_t result = v30 + 4;
      do
      {
        uint64_t v26 = (_WORD *)result;
        int v27 = v25;
        int v28 = v19;
        do
        {
          *(v27 - 2) = *(v26 - 2);
          *(v27 - 1) = *(v26 - 1);
          *int v27 = *v26;
          v27 += v18;
          v26 += v20;
          --v28;
        }
        while (v28);
        *(v27 - 2) = *(v26 - 2);
        *(v27 - 1) = *(v26 - 1);
        *int v27 = *v26;
        v21 += v23;
        v9 += v17;
        ++v24;
        v25 += v17;
        result += 2 * v23;
      }
      while (v24 != v22);
    }
    if (v19)
    {
      uint64_t v29 = 2 * v18;
      do
      {
        *unint64_t v9 = *v21;
        v9[1] = v21[1];
        void v9[2] = v21[2];
        v21 += v20;
        unint64_t v9 = (_WORD *)((char *)v9 + v29);
        --v19;
      }
      while (v19);
    }
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_215D81664(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D8166C(uint64_t a1, int a2)
{
  if (a2 == 10
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D817F8(uint64_t a1, int a2)
{
  if (a2 == 10
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D81984(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_215D81A34(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D81AE4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D81BB4(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C663F60;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)int v19 = 3;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)int v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)int v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0) {
    uint64_t v15 = 2;
  }
  else {
    uint64_t v15 = 2 * v9;
  }
  sub_215DAA448(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D81CF8())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D81D74()
{
}

void sub_215D81E08(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_215D81E2C(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C664F40, 0);
  if (v5)
  {
    sub_2158A6580(a1 + 8, (long long *)(v5 + 8));
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v24, lpsrc, 11);
    uint64_t v7 = v24;
    long long v9 = *(_OWORD *)(v24 + 16);
    long long v8 = *(_OWORD *)(v24 + 32);
    v22[0] = *(_OWORD *)v24;
    v22[1] = v9;
    void v22[2] = v8;
    *(void *)&long long v24 = 0;
    MEMORY[0x2166C4D20](v7, 0xC400A2AC0F1, v10, v11, v12, v13);
    uint64_t v14 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v15 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v15 = 1;
    }
    unint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 40);
    if (v15) {
      unint64_t v16 = 0;
    }
    LODWORD(v24) = 3;
    *(void *)((char *)&v24 + 4) = v16;
    unint64_t v18 = v16;
    uint64_t v19 = v24;
    unint64_t v20 = HIDWORD(v16);
    LODWORD(v24) = 1;
    *(void *)((char *)&v24 + 4) = v17;
    uint64_t v21 = v24;
    if (HIDWORD(v17) * HIDWORD(v16) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v24 = v14;
    *((void *)&v24 + 1) = v19;
    int v25 = v20;
    uint64_t v26 = v21;
    int v27 = HIDWORD(v17);
    unint64_t v28 = v18;
    uint64_t v29 = v17;
    v23[0] = v22;
    v23[1] = &v24;
    return sub_2158A6204(v23);
  }
  return result;
}

uint64_t sub_215D82054(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D8205C(uint64_t a1, int a2)
{
  if (a2 == 11
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D821E8(uint64_t a1, int a2)
{
  if (a2 == 11
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D82374(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D823A8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D823FC(uint64_t a1, uint64_t a2, const float *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C663FE0;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)uint64_t v19 = 3;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)uint64_t v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)uint64_t v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((4 * v9) & (4 * v9 - 1)) != 0) {
    uint64_t v15 = 4;
  }
  else {
    uint64_t v15 = 4 * v9;
  }
  sub_215DAAA28(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D82540())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D825BC()
{
}

void sub_215D82650(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_215D82674(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C664F58, 0);
  if (v5)
  {
    sub_2158A6C78(a1 + 8, (uint64_t)v5 + 8);
    return result;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v35, lpsrc, 12);
  long long v8 = *(_OWORD *)(v35 + 16);
  long long v7 = *(_OWORD *)(v35 + 32);
  long long v31 = *(_OWORD *)v35;
  long long v32 = v8;
  long long v33 = v7;
  *(void *)&long long v35 = 0;
  MEMORY[0x2166C4D20]();
  unint64_t v9 = *(float **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36)) {
    BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  unint64_t v11 = *(void *)(a1 + 32);
  unint64_t v12 = *(void *)(a1 + 40);
  if (v10) {
    unint64_t v11 = 0;
  }
  LODWORD(v35) = 3;
  *(void *)((char *)&v35 + 4) = v11;
  unint64_t v13 = v11;
  uint64_t v14 = v35;
  unint64_t v15 = HIDWORD(v11);
  LODWORD(v35) = 1;
  *(void *)((char *)&v35 + 4) = v12;
  unint64_t v16 = v35;
  unint64_t v17 = HIDWORD(v12);
  if (HIDWORD(v12) * HIDWORD(v11) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  *(void *)&long long v35 = v9;
  *((void *)&v35 + 1) = v14;
  int v36 = v15;
  unint64_t v37 = v16;
  int v38 = HIDWORD(v12);
  unint64_t v39 = v13;
  unint64_t v40 = v12;
  v34[0] = (uint64_t)&v31;
  v34[1] = (uint64_t)&v35;
  if (v16 == 1 && DWORD1(v32) == 1)
  {
    sub_215854ED0(v34);
    return result;
  }
  if (DWORD2(v31) && HIDWORD(v31) && v32)
  {
    unint64_t v18 = HIDWORD(v16);
    int v19 = HIDWORD(v31) - 1;
    uint64_t v20 = DWORD2(v32);
    uint64_t v21 = (float *)v31;
    int v22 = v32 - 1;
    if (v32 != 1)
    {
      uint64_t v23 = HIDWORD(v32);
      if (HIDWORD(v31) == 1)
      {
        do
        {
          *unint64_t v9 = *v21;
          v9[1] = v21[1];
          void v9[2] = v21[2];
          v21 += v23;
          v9 += v17;
          --v22;
        }
        while (v22);
LABEL_29:
        *unint64_t v9 = *v21;
        v9[1] = v21[1];
        float result = v21[2];
        void v9[2] = result;
        return result;
      }
      int v24 = 0;
      int v25 = v9 + 2;
      uint64_t v26 = (_DWORD *)(v31 + 8);
      do
      {
        int v27 = v26;
        unint64_t v28 = v25;
        int v29 = v19;
        do
        {
          *(v28 - 2) = *(v27 - 2);
          *(v28 - 1) = *(v27 - 1);
          *unint64_t v28 = *v27;
          v28 += v18;
          v27 += v20;
          --v29;
        }
        while (v29);
        *(v28 - 2) = *(v27 - 2);
        *(v28 - 1) = *(v27 - 1);
        *unint64_t v28 = *v27;
        v21 += v23;
        v9 += v17;
        ++v24;
        v25 += v17;
        v26 += v23;
      }
      while (v24 != v22);
    }
    if (v19)
    {
      uint64_t v30 = 4 * v18;
      do
      {
        *unint64_t v9 = *v21;
        v9[1] = v21[1];
        void v9[2] = v21[2];
        v21 += v20;
        unint64_t v9 = (float *)((char *)v9 + v30);
        --v19;
      }
      while (v19);
    }
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_215D829F0(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D829F8(uint64_t a1, int a2)
{
  if (a2 == 12
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D82B84(uint64_t a1, int a2)
{
  if (a2 == 12
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D82D10(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D82D44(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D82D98(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C664060;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)int v19 = 4;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)int v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  uint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  BOOL v10 = (size_t *)(a1 + 64);
  *(void *)int v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if ((v9 & (v9 - 1)) != 0) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = v9;
  }
  sub_215DA9874(v10, (unsigned int *)&v17, (uint64_t)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D82ED4())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D82F50()
{
}

void sub_215D82FE4(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_215D83008(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C664F70, 0);
  if (v5)
  {
    sub_2158A71B0(a1 + 8, (uint64_t)v5 + 8);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v23, lpsrc, 13);
    uint64_t v6 = v23;
    long long v8 = *(_OWORD *)(v23 + 16);
    long long v7 = *(_OWORD *)(v23 + 32);
    long long v17 = *(_OWORD *)v23;
    long long v18 = v8;
    long long v19 = v7;
    *(void *)&long long v23 = 0;
    MEMORY[0x2166C4D20](v6);
    uint64_t v9 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    unint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    if (v10) {
      unint64_t v11 = 0;
    }
    LODWORD(v23) = 4;
    *(void *)((char *)&v23 + 4) = v11;
    unint64_t v13 = v11;
    uint64_t v14 = v23;
    unint64_t v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(void *)((char *)&v23 + 4) = v12;
    uint64_t v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v23 = v9;
    *((void *)&v23 + 1) = v14;
    int v24 = v15;
    uint64_t v25 = v16;
    int v26 = HIDWORD(v12);
    unint64_t v27 = v13;
    uint64_t v28 = v12;
    v20[0] = (size_t)&v17;
    v20[1] = (size_t)&v23;
    if (v16 == 1 && DWORD1(v18) == 1)
    {
      sub_2158A2610(v20);
    }
    else
    {
      char v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17) && v18)
      {
        int v22 = &v21;
        sub_2158A6EF0((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
      }
    }
  }
}

uint64_t sub_215D8327C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D83284(uint64_t a1, int a2)
{
  if (a2 == 13
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D83410(uint64_t a1, int a2)
{
  if (a2 == 13
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D8359C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D835D0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D83624(uint64_t a1, uint64_t a2, const __int16 *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C6640E0;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)long long v19 = 4;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)long long v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)long long v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0) {
    uint64_t v15 = 2;
  }
  else {
    uint64_t v15 = 2 * v9;
  }
  sub_215DA9D40(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D83768())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D837E4()
{
}

void sub_215D83878(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_215D8389C(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C664F88, 0);
  if (v5)
  {
    sub_2158A7718(a1 + 8, (uint64_t)v5 + 8);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v23, lpsrc, 14);
    uint64_t v6 = v23;
    long long v8 = *(_OWORD *)(v23 + 16);
    long long v7 = *(_OWORD *)(v23 + 32);
    long long v17 = *(_OWORD *)v23;
    long long v18 = v8;
    long long v19 = v7;
    *(void *)&long long v23 = 0;
    MEMORY[0x2166C4D20](v6);
    uint64_t v9 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    unint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    if (v10) {
      unint64_t v11 = 0;
    }
    LODWORD(v23) = 4;
    *(void *)((char *)&v23 + 4) = v11;
    unint64_t v13 = v11;
    uint64_t v14 = v23;
    unint64_t v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(void *)((char *)&v23 + 4) = v12;
    uint64_t v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v23 = v9;
    *((void *)&v23 + 1) = v14;
    int v24 = v15;
    uint64_t v25 = v16;
    int v26 = HIDWORD(v12);
    unint64_t v27 = v13;
    uint64_t v28 = v12;
    v20[0] = (uint64_t)&v17;
    v20[1] = (uint64_t)&v23;
    if (v16 == 1 && DWORD1(v18) == 1)
    {
      sub_2158530CC(v20);
    }
    else
    {
      char v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17) && v18)
      {
        int v22 = &v21;
        sub_2158A7430((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
      }
    }
  }
}

uint64_t sub_215D83B10(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D83B18(uint64_t a1, int a2)
{
  if (a2 == 14
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D83CA4(uint64_t a1, int a2)
{
  if (a2 == 14
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D83E30(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_215D83EE0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D83F90(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D84060(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C664160;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)long long v19 = 4;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)long long v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)long long v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0) {
    uint64_t v15 = 2;
  }
  else {
    uint64_t v15 = 2 * v9;
  }
  sub_215DAA448(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D841A4())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D84220()
{
}

void sub_215D842B4(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_215D842D8(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C664FA0, 0);
  if (v5)
  {
    sub_2158A7D64(a1 + 8, (long long *)(v5 + 8));
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v24, lpsrc, 15);
    uint64_t v7 = v24;
    long long v9 = *(_OWORD *)(v24 + 16);
    long long v8 = *(_OWORD *)(v24 + 32);
    v22[0] = *(_OWORD *)v24;
    v22[1] = v9;
    void v22[2] = v8;
    *(void *)&long long v24 = 0;
    MEMORY[0x2166C4D20](v7, 0xC400A2AC0F1, v10, v11, v12, v13);
    uint64_t v14 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v15 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v15 = 1;
    }
    unint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 40);
    if (v15) {
      unint64_t v16 = 0;
    }
    LODWORD(v24) = 4;
    *(void *)((char *)&v24 + 4) = v16;
    unint64_t v18 = v16;
    uint64_t v19 = v24;
    unint64_t v20 = HIDWORD(v16);
    LODWORD(v24) = 1;
    *(void *)((char *)&v24 + 4) = v17;
    uint64_t v21 = v24;
    if (HIDWORD(v17) * HIDWORD(v16) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v24 = v14;
    *((void *)&v24 + 1) = v19;
    int v25 = v20;
    uint64_t v26 = v21;
    int v27 = HIDWORD(v17);
    unint64_t v28 = v18;
    uint64_t v29 = v17;
    v23[0] = v22;
    v23[1] = &v24;
    return sub_2158A79C0(v23);
  }
  return result;
}

uint64_t sub_215D84500(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D84508(uint64_t a1, int a2)
{
  if (a2 == 15
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D84694(uint64_t a1, int a2)
{
  if (a2 == 15
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D84820(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D84854(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D848A8(uint64_t a1, uint64_t a2, const float *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C6641E0;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)uint64_t v19 = 4;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)uint64_t v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)uint64_t v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((4 * v9) & (4 * v9 - 1)) != 0) {
    uint64_t v15 = 4;
  }
  else {
    uint64_t v15 = 4 * v9;
  }
  sub_215DAAA28(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D849E8())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D84A64()
{
}

void sub_215D84AF8(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_215D84B1C(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C664FB8, 0);
  if (v5)
  {
    sub_2158A84AC(a1 + 8, (uint64_t)v5 + 8);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v24, lpsrc, 16);
    uint64_t v7 = v24;
    long long v9 = *(_OWORD *)(v24 + 16);
    long long v8 = *(_OWORD *)(v24 + 32);
    long long v18 = *(_OWORD *)v24;
    long long v19 = v9;
    long long v20 = v8;
    *(void *)&long long v24 = 0;
    MEMORY[0x2166C4D20](v7);
    uint64_t v10 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v11 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v11 = 1;
    }
    unint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    if (v11) {
      unint64_t v12 = 0;
    }
    LODWORD(v24) = 4;
    *(void *)((char *)&v24 + 4) = v12;
    unint64_t v14 = v12;
    uint64_t v15 = v24;
    unint64_t v16 = HIDWORD(v12);
    LODWORD(v24) = 1;
    *(void *)((char *)&v24 + 4) = v13;
    uint64_t v17 = v24;
    if (HIDWORD(v13) * HIDWORD(v12) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v24 = v10;
    *((void *)&v24 + 1) = v15;
    int v25 = v16;
    uint64_t v26 = v17;
    int v27 = HIDWORD(v13);
    unint64_t v28 = v14;
    uint64_t v29 = v13;
    v21[0] = (uint64_t)&v18;
    v21[1] = (uint64_t)&v24;
    if (v17 == 1 && DWORD1(v19) == 1)
    {
      sub_215854ED0(v21);
    }
    else
    {
      char v22 = 0;
      if (DWORD2(v18) && HIDWORD(v18) && v19)
      {
        long long v23 = &v22;
        return sub_2158A81CC((uint64_t)&v23, (uint64_t)&v18, (uint64_t)&v24);
      }
    }
  }
  return result;
}

uint64_t sub_215D84D90(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D84D98(uint64_t a1, int a2)
{
  if (a2 == 16
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D84F24(uint64_t a1, int a2)
{
  if (a2 == 16
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D850B0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D850E4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D85138(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C664260;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)long long v19 = 3;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)long long v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  uint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = (size_t *)(a1 + 64);
  *(void *)long long v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if ((v9 & (v9 - 1)) != 0) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = v9;
  }
  sub_215DA9874(v10, (unsigned int *)&v17, (uint64_t)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D85274())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D852F0()
{
}

void sub_215D85384(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

uint64_t sub_215D853A8(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C664FD0, 0);
  if (v5)
  {
    return sub_2158A5A6C(a1 + 8, (uint64_t)v5 + 8);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v33, lpsrc, 17);
    long long v8 = *(_OWORD *)(v33 + 16);
    long long v7 = *(_OWORD *)(v33 + 32);
    long long v29 = *(_OWORD *)v33;
    long long v30 = v8;
    long long v31 = v7;
    *(void *)&long long v33 = 0;
    uint64_t result = MEMORY[0x2166C4D20]();
    uint64_t v9 = *(unsigned char **)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    unint64_t v11 = *(void *)(a1 + 32);
    unint64_t v12 = *(void *)(a1 + 40);
    if (v10) {
      unint64_t v11 = 0;
    }
    LODWORD(v33) = 3;
    *(void *)((char *)&v33 + 4) = v11;
    unint64_t v13 = v11;
    uint64_t v14 = v33;
    unint64_t v15 = HIDWORD(v11);
    LODWORD(v33) = 1;
    *(void *)((char *)&v33 + 4) = v12;
    unint64_t v16 = v33;
    unint64_t v17 = HIDWORD(v12);
    if (HIDWORD(v12) * HIDWORD(v11) == -1)
    {
      uint64_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8);
      if (result) {
        abort();
      }
    }
    *(void *)&long long v33 = v9;
    *((void *)&v33 + 1) = v14;
    int v34 = v15;
    unint64_t v35 = v16;
    int v36 = HIDWORD(v12);
    unint64_t v37 = v13;
    unint64_t v38 = v12;
    v32[0] = (size_t)&v29;
    v32[1] = (size_t)&v33;
    if (v16 == 1 && DWORD1(v30) == 1)
    {
      return (uint64_t)sub_2158A2610(v32);
    }
    else if (DWORD2(v29) && HIDWORD(v29) && v30)
    {
      unint64_t v18 = HIDWORD(v16);
      int v19 = HIDWORD(v29) - 1;
      uint64_t v20 = DWORD2(v30);
      uint64_t v21 = (unsigned char *)v29;
      int v22 = v30 - 1;
      if (v30 != 1)
      {
        uint64_t v23 = HIDWORD(v30);
        if (HIDWORD(v29) == 1)
        {
          do
          {
            *uint64_t v9 = *v21;
            v9[1] = v21[1];
            void v9[2] = v21[2];
            v21 += v23;
            v9 += v17;
            --v22;
          }
          while (v22);
        }
        else
        {
          int v24 = 0;
          uint64_t v25 = (uint64_t)(v9 + 2);
          uint64_t v26 = (unsigned char *)(v29 + 2);
          do
          {
            int v27 = v26;
            uint64_t result = v25;
            int v28 = v19;
            do
            {
              *(unsigned char *)(result - 2) = *(v27 - 2);
              *(unsigned char *)(result - 1) = *(v27 - 1);
              *(unsigned char *)uint64_t result = *v27;
              result += v18;
              v27 += v20;
              --v28;
            }
            while (v28);
            *(unsigned char *)(result - 2) = *(v27 - 2);
            *(unsigned char *)(result - 1) = *(v27 - 1);
            *(unsigned char *)uint64_t result = *v27;
            v21 += v23;
            v9 += v17;
            ++v24;
            v25 += v17;
            v26 += v23;
          }
          while (v24 != v22);
        }
      }
      for (; v19; --v19)
      {
        *uint64_t v9 = *v21;
        v9[1] = v21[1];
        void v9[2] = v21[2];
        v21 += v20;
        v9 += v18;
      }
      *uint64_t v9 = *v21;
      v9[1] = v21[1];
      void v9[2] = v21[2];
    }
  }
  return result;
}

uint64_t sub_215D85704(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D8570C(uint64_t a1, int a2)
{
  if (a2 == 17
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D85898(uint64_t a1, int a2)
{
  if (a2 == 17
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D85A24(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D85A58(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D85AAC(uint64_t a1, uint64_t a2, const __int16 *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C6642E0;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)int v19 = 3;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)int v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)int v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0) {
    uint64_t v15 = 2;
  }
  else {
    uint64_t v15 = 2 * v9;
  }
  sub_215DA9D40(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D85BF0())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D85C6C()
{
}

void sub_215D85D00(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

uint64_t sub_215D85D24(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C664FE8, 0);
  if (v5)
  {
    return sub_2158A5F84(a1 + 8, (uint64_t)v5 + 8);
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v34, lpsrc, 18);
  long long v8 = *(_OWORD *)(v34 + 16);
  long long v7 = *(_OWORD *)(v34 + 32);
  long long v30 = *(_OWORD *)v34;
  long long v31 = v8;
  long long v32 = v7;
  *(void *)&long long v34 = 0;
  uint64_t result = MEMORY[0x2166C4D20]();
  unint64_t v9 = *(_WORD **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36)) {
    BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  unint64_t v11 = *(void *)(a1 + 32);
  unint64_t v12 = *(void *)(a1 + 40);
  if (v10) {
    unint64_t v11 = 0;
  }
  LODWORD(v34) = 3;
  *(void *)((char *)&v34 + 4) = v11;
  unint64_t v13 = v11;
  uint64_t v14 = v34;
  unint64_t v15 = HIDWORD(v11);
  LODWORD(v34) = 1;
  *(void *)((char *)&v34 + 4) = v12;
  unint64_t v16 = v34;
  unint64_t v17 = HIDWORD(v12);
  if (HIDWORD(v12) * HIDWORD(v11) == -1)
  {
    uint64_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8);
    if (result) {
      abort();
    }
  }
  *(void *)&long long v34 = v9;
  *((void *)&v34 + 1) = v14;
  int v35 = v15;
  unint64_t v36 = v16;
  int v37 = HIDWORD(v12);
  unint64_t v38 = v13;
  unint64_t v39 = v12;
  v33[0] = (uint64_t)&v30;
  v33[1] = (uint64_t)&v34;
  if (v16 == 1 && DWORD1(v31) == 1) {
    return (uint64_t)sub_2158530CC(v33);
  }
  if (DWORD2(v30) && HIDWORD(v30) && v31)
  {
    unint64_t v18 = HIDWORD(v16);
    int v19 = HIDWORD(v30) - 1;
    uint64_t v20 = DWORD2(v31);
    uint64_t v21 = (_WORD *)v30;
    int v22 = v31 - 1;
    if (v31 != 1)
    {
      uint64_t v23 = HIDWORD(v31);
      if (HIDWORD(v30) == 1)
      {
        do
        {
          *unint64_t v9 = *v21;
          v9[1] = v21[1];
          void v9[2] = v21[2];
          v21 += v23;
          v9 += v17;
          --v22;
        }
        while (v22);
LABEL_29:
        *unint64_t v9 = *v21;
        v9[1] = v21[1];
        void v9[2] = v21[2];
        return result;
      }
      int v24 = 0;
      uint64_t v25 = v9 + 2;
      uint64_t result = v30 + 4;
      do
      {
        uint64_t v26 = (_WORD *)result;
        int v27 = v25;
        int v28 = v19;
        do
        {
          *(v27 - 2) = *(v26 - 2);
          *(v27 - 1) = *(v26 - 1);
          *int v27 = *v26;
          v27 += v18;
          v26 += v20;
          --v28;
        }
        while (v28);
        *(v27 - 2) = *(v26 - 2);
        *(v27 - 1) = *(v26 - 1);
        *int v27 = *v26;
        v21 += v23;
        v9 += v17;
        ++v24;
        v25 += v17;
        result += 2 * v23;
      }
      while (v24 != v22);
    }
    if (v19)
    {
      uint64_t v29 = 2 * v18;
      do
      {
        *unint64_t v9 = *v21;
        v9[1] = v21[1];
        void v9[2] = v21[2];
        v21 += v20;
        unint64_t v9 = (_WORD *)((char *)v9 + v29);
        --v19;
      }
      while (v19);
    }
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_215D860A0(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D860A8(uint64_t a1, int a2)
{
  if (a2 == 18
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D86234(uint64_t a1, int a2)
{
  if (a2 == 18
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D863C0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_215D86470(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D86520(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D865F0(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C664360;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)int v19 = 3;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)int v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)int v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0) {
    uint64_t v15 = 2;
  }
  else {
    uint64_t v15 = 2 * v9;
  }
  sub_215DAA448(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D86734())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D867B0()
{
}

void sub_215D86844(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_215D86868(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C665000, 0);
  if (v5)
  {
    sub_2158A6580(a1 + 8, (long long *)(v5 + 8));
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v24, lpsrc, 19);
    uint64_t v7 = v24;
    long long v9 = *(_OWORD *)(v24 + 16);
    long long v8 = *(_OWORD *)(v24 + 32);
    v22[0] = *(_OWORD *)v24;
    v22[1] = v9;
    void v22[2] = v8;
    *(void *)&long long v24 = 0;
    MEMORY[0x2166C4D20](v7, 0xC400A2AC0F1, v10, v11, v12, v13);
    uint64_t v14 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v15 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v15 = 1;
    }
    unint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 40);
    if (v15) {
      unint64_t v16 = 0;
    }
    LODWORD(v24) = 3;
    *(void *)((char *)&v24 + 4) = v16;
    unint64_t v18 = v16;
    uint64_t v19 = v24;
    unint64_t v20 = HIDWORD(v16);
    LODWORD(v24) = 1;
    *(void *)((char *)&v24 + 4) = v17;
    uint64_t v21 = v24;
    if (HIDWORD(v17) * HIDWORD(v16) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v24 = v14;
    *((void *)&v24 + 1) = v19;
    int v25 = v20;
    uint64_t v26 = v21;
    int v27 = HIDWORD(v17);
    unint64_t v28 = v18;
    uint64_t v29 = v17;
    v23[0] = v22;
    v23[1] = &v24;
    return sub_2158A6204(v23);
  }
  return result;
}

uint64_t sub_215D86A90(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D86A98(uint64_t a1, int a2)
{
  if (a2 == 19
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D86C24(uint64_t a1, int a2)
{
  if (a2 == 19
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D86DB0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D86DE4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D86E38(uint64_t a1, uint64_t a2, const float *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C6643E0;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)uint64_t v19 = 3;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)uint64_t v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)uint64_t v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((4 * v9) & (4 * v9 - 1)) != 0) {
    uint64_t v15 = 4;
  }
  else {
    uint64_t v15 = 4 * v9;
  }
  sub_215DAAA28(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D86F7C())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D86FF8()
{
}

void sub_215D8708C(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_215D870B0(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C665018, 0);
  if (v5)
  {
    sub_2158A6C78(a1 + 8, (uint64_t)v5 + 8);
    return result;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v35, lpsrc, 20);
  long long v8 = *(_OWORD *)(v35 + 16);
  long long v7 = *(_OWORD *)(v35 + 32);
  long long v31 = *(_OWORD *)v35;
  long long v32 = v8;
  long long v33 = v7;
  *(void *)&long long v35 = 0;
  MEMORY[0x2166C4D20]();
  unint64_t v9 = *(float **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36)) {
    BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  unint64_t v11 = *(void *)(a1 + 32);
  unint64_t v12 = *(void *)(a1 + 40);
  if (v10) {
    unint64_t v11 = 0;
  }
  LODWORD(v35) = 3;
  *(void *)((char *)&v35 + 4) = v11;
  unint64_t v13 = v11;
  uint64_t v14 = v35;
  unint64_t v15 = HIDWORD(v11);
  LODWORD(v35) = 1;
  *(void *)((char *)&v35 + 4) = v12;
  unint64_t v16 = v35;
  unint64_t v17 = HIDWORD(v12);
  if (HIDWORD(v12) * HIDWORD(v11) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  *(void *)&long long v35 = v9;
  *((void *)&v35 + 1) = v14;
  int v36 = v15;
  unint64_t v37 = v16;
  int v38 = HIDWORD(v12);
  unint64_t v39 = v13;
  unint64_t v40 = v12;
  v34[0] = (uint64_t)&v31;
  v34[1] = (uint64_t)&v35;
  if (v16 == 1 && DWORD1(v32) == 1)
  {
    sub_215854ED0(v34);
    return result;
  }
  if (DWORD2(v31) && HIDWORD(v31) && v32)
  {
    unint64_t v18 = HIDWORD(v16);
    int v19 = HIDWORD(v31) - 1;
    uint64_t v20 = DWORD2(v32);
    uint64_t v21 = (float *)v31;
    int v22 = v32 - 1;
    if (v32 != 1)
    {
      uint64_t v23 = HIDWORD(v32);
      if (HIDWORD(v31) == 1)
      {
        do
        {
          *unint64_t v9 = *v21;
          v9[1] = v21[1];
          void v9[2] = v21[2];
          v21 += v23;
          v9 += v17;
          --v22;
        }
        while (v22);
LABEL_29:
        *unint64_t v9 = *v21;
        v9[1] = v21[1];
        float result = v21[2];
        void v9[2] = result;
        return result;
      }
      int v24 = 0;
      int v25 = v9 + 2;
      uint64_t v26 = (_DWORD *)(v31 + 8);
      do
      {
        int v27 = v26;
        unint64_t v28 = v25;
        int v29 = v19;
        do
        {
          *(v28 - 2) = *(v27 - 2);
          *(v28 - 1) = *(v27 - 1);
          *unint64_t v28 = *v27;
          v28 += v18;
          v27 += v20;
          --v29;
        }
        while (v29);
        *(v28 - 2) = *(v27 - 2);
        *(v28 - 1) = *(v27 - 1);
        *unint64_t v28 = *v27;
        v21 += v23;
        v9 += v17;
        ++v24;
        v25 += v17;
        v26 += v23;
      }
      while (v24 != v22);
    }
    if (v19)
    {
      uint64_t v30 = 4 * v18;
      do
      {
        *unint64_t v9 = *v21;
        v9[1] = v21[1];
        void v9[2] = v21[2];
        v21 += v20;
        unint64_t v9 = (float *)((char *)v9 + v30);
        --v19;
      }
      while (v19);
    }
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_215D8742C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D87434(uint64_t a1, int a2)
{
  if (a2 == 20
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D875C0(uint64_t a1, int a2)
{
  if (a2 == 20
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D8774C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D87780(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D877D4(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C664460;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)int v19 = 3;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)int v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  uint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  BOOL v10 = (size_t *)(a1 + 64);
  *(void *)int v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if ((v9 & (v9 - 1)) != 0) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = v9;
  }
  sub_215DA9874(v10, (unsigned int *)&v17, (uint64_t)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D87910())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D8798C()
{
}

void sub_215D87A20(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

uint64_t sub_215D87A44(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C665030, 0);
  if (v5)
  {
    return sub_2158A5A6C(a1 + 8, (uint64_t)v5 + 8);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v33, lpsrc, 21);
    long long v8 = *(_OWORD *)(v33 + 16);
    long long v7 = *(_OWORD *)(v33 + 32);
    long long v29 = *(_OWORD *)v33;
    long long v30 = v8;
    long long v31 = v7;
    *(void *)&long long v33 = 0;
    uint64_t result = MEMORY[0x2166C4D20]();
    uint64_t v9 = *(unsigned char **)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    unint64_t v11 = *(void *)(a1 + 32);
    unint64_t v12 = *(void *)(a1 + 40);
    if (v10) {
      unint64_t v11 = 0;
    }
    LODWORD(v33) = 3;
    *(void *)((char *)&v33 + 4) = v11;
    unint64_t v13 = v11;
    uint64_t v14 = v33;
    unint64_t v15 = HIDWORD(v11);
    LODWORD(v33) = 1;
    *(void *)((char *)&v33 + 4) = v12;
    unint64_t v16 = v33;
    unint64_t v17 = HIDWORD(v12);
    if (HIDWORD(v12) * HIDWORD(v11) == -1)
    {
      uint64_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8);
      if (result) {
        abort();
      }
    }
    *(void *)&long long v33 = v9;
    *((void *)&v33 + 1) = v14;
    int v34 = v15;
    unint64_t v35 = v16;
    int v36 = HIDWORD(v12);
    unint64_t v37 = v13;
    unint64_t v38 = v12;
    v32[0] = (size_t)&v29;
    v32[1] = (size_t)&v33;
    if (v16 == 1 && DWORD1(v30) == 1)
    {
      return (uint64_t)sub_2158A2610(v32);
    }
    else if (DWORD2(v29) && HIDWORD(v29) && v30)
    {
      unint64_t v18 = HIDWORD(v16);
      int v19 = HIDWORD(v29) - 1;
      uint64_t v20 = DWORD2(v30);
      uint64_t v21 = (unsigned char *)v29;
      int v22 = v30 - 1;
      if (v30 != 1)
      {
        uint64_t v23 = HIDWORD(v30);
        if (HIDWORD(v29) == 1)
        {
          do
          {
            *uint64_t v9 = *v21;
            v9[1] = v21[1];
            void v9[2] = v21[2];
            v21 += v23;
            v9 += v17;
            --v22;
          }
          while (v22);
        }
        else
        {
          int v24 = 0;
          uint64_t v25 = (uint64_t)(v9 + 2);
          uint64_t v26 = (unsigned char *)(v29 + 2);
          do
          {
            int v27 = v26;
            uint64_t result = v25;
            int v28 = v19;
            do
            {
              *(unsigned char *)(result - 2) = *(v27 - 2);
              *(unsigned char *)(result - 1) = *(v27 - 1);
              *(unsigned char *)uint64_t result = *v27;
              result += v18;
              v27 += v20;
              --v28;
            }
            while (v28);
            *(unsigned char *)(result - 2) = *(v27 - 2);
            *(unsigned char *)(result - 1) = *(v27 - 1);
            *(unsigned char *)uint64_t result = *v27;
            v21 += v23;
            v9 += v17;
            ++v24;
            v25 += v17;
            v26 += v23;
          }
          while (v24 != v22);
        }
      }
      for (; v19; --v19)
      {
        *uint64_t v9 = *v21;
        v9[1] = v21[1];
        void v9[2] = v21[2];
        v21 += v20;
        v9 += v18;
      }
      *uint64_t v9 = *v21;
      v9[1] = v21[1];
      void v9[2] = v21[2];
    }
  }
  return result;
}

uint64_t sub_215D87DA0(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D87DA8(uint64_t a1, int a2)
{
  if (a2 == 21
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D87F34(uint64_t a1, int a2)
{
  if (a2 == 21
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D880C0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D880F4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D88148(uint64_t a1, uint64_t a2, const __int16 *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C6644E0;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)int v19 = 3;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)int v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)int v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0) {
    uint64_t v15 = 2;
  }
  else {
    uint64_t v15 = 2 * v9;
  }
  sub_215DA9D40(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D8828C())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D88308()
{
}

void sub_215D8839C(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

uint64_t sub_215D883C0(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C665048, 0);
  if (v5)
  {
    return sub_2158A5F84(a1 + 8, (uint64_t)v5 + 8);
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v34, lpsrc, 22);
  long long v8 = *(_OWORD *)(v34 + 16);
  long long v7 = *(_OWORD *)(v34 + 32);
  long long v30 = *(_OWORD *)v34;
  long long v31 = v8;
  long long v32 = v7;
  *(void *)&long long v34 = 0;
  uint64_t result = MEMORY[0x2166C4D20]();
  unint64_t v9 = *(_WORD **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36)) {
    BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  unint64_t v11 = *(void *)(a1 + 32);
  unint64_t v12 = *(void *)(a1 + 40);
  if (v10) {
    unint64_t v11 = 0;
  }
  LODWORD(v34) = 3;
  *(void *)((char *)&v34 + 4) = v11;
  unint64_t v13 = v11;
  uint64_t v14 = v34;
  unint64_t v15 = HIDWORD(v11);
  LODWORD(v34) = 1;
  *(void *)((char *)&v34 + 4) = v12;
  unint64_t v16 = v34;
  unint64_t v17 = HIDWORD(v12);
  if (HIDWORD(v12) * HIDWORD(v11) == -1)
  {
    uint64_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8);
    if (result) {
      abort();
    }
  }
  *(void *)&long long v34 = v9;
  *((void *)&v34 + 1) = v14;
  int v35 = v15;
  unint64_t v36 = v16;
  int v37 = HIDWORD(v12);
  unint64_t v38 = v13;
  unint64_t v39 = v12;
  v33[0] = (uint64_t)&v30;
  v33[1] = (uint64_t)&v34;
  if (v16 == 1 && DWORD1(v31) == 1) {
    return (uint64_t)sub_2158530CC(v33);
  }
  if (DWORD2(v30) && HIDWORD(v30) && v31)
  {
    unint64_t v18 = HIDWORD(v16);
    int v19 = HIDWORD(v30) - 1;
    uint64_t v20 = DWORD2(v31);
    uint64_t v21 = (_WORD *)v30;
    int v22 = v31 - 1;
    if (v31 != 1)
    {
      uint64_t v23 = HIDWORD(v31);
      if (HIDWORD(v30) == 1)
      {
        do
        {
          *unint64_t v9 = *v21;
          v9[1] = v21[1];
          void v9[2] = v21[2];
          v21 += v23;
          v9 += v17;
          --v22;
        }
        while (v22);
LABEL_29:
        *unint64_t v9 = *v21;
        v9[1] = v21[1];
        void v9[2] = v21[2];
        return result;
      }
      int v24 = 0;
      uint64_t v25 = v9 + 2;
      uint64_t result = v30 + 4;
      do
      {
        uint64_t v26 = (_WORD *)result;
        int v27 = v25;
        int v28 = v19;
        do
        {
          *(v27 - 2) = *(v26 - 2);
          *(v27 - 1) = *(v26 - 1);
          *int v27 = *v26;
          v27 += v18;
          v26 += v20;
          --v28;
        }
        while (v28);
        *(v27 - 2) = *(v26 - 2);
        *(v27 - 1) = *(v26 - 1);
        *int v27 = *v26;
        v21 += v23;
        v9 += v17;
        ++v24;
        v25 += v17;
        result += 2 * v23;
      }
      while (v24 != v22);
    }
    if (v19)
    {
      uint64_t v29 = 2 * v18;
      do
      {
        *unint64_t v9 = *v21;
        v9[1] = v21[1];
        void v9[2] = v21[2];
        v21 += v20;
        unint64_t v9 = (_WORD *)((char *)v9 + v29);
        --v19;
      }
      while (v19);
    }
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_215D8873C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D88744(uint64_t a1, int a2)
{
  if (a2 == 22
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D888D0(uint64_t a1, int a2)
{
  if (a2 == 22
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D88A5C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_215D88B0C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D88BBC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D88C8C(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C664560;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)int v19 = 3;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)int v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)int v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0) {
    uint64_t v15 = 2;
  }
  else {
    uint64_t v15 = 2 * v9;
  }
  sub_215DAA448(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D88DD0())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D88E4C()
{
}

void sub_215D88EE0(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_215D88F04(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C665060, 0);
  if (v5)
  {
    sub_2158A6580(a1 + 8, (long long *)(v5 + 8));
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v24, lpsrc, 23);
    uint64_t v7 = v24;
    long long v9 = *(_OWORD *)(v24 + 16);
    long long v8 = *(_OWORD *)(v24 + 32);
    v22[0] = *(_OWORD *)v24;
    v22[1] = v9;
    void v22[2] = v8;
    *(void *)&long long v24 = 0;
    MEMORY[0x2166C4D20](v7, 0xC400A2AC0F1, v10, v11, v12, v13);
    uint64_t v14 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v15 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v15 = 1;
    }
    unint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 40);
    if (v15) {
      unint64_t v16 = 0;
    }
    LODWORD(v24) = 3;
    *(void *)((char *)&v24 + 4) = v16;
    unint64_t v18 = v16;
    uint64_t v19 = v24;
    unint64_t v20 = HIDWORD(v16);
    LODWORD(v24) = 1;
    *(void *)((char *)&v24 + 4) = v17;
    uint64_t v21 = v24;
    if (HIDWORD(v17) * HIDWORD(v16) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v24 = v14;
    *((void *)&v24 + 1) = v19;
    int v25 = v20;
    uint64_t v26 = v21;
    int v27 = HIDWORD(v17);
    unint64_t v28 = v18;
    uint64_t v29 = v17;
    v23[0] = v22;
    v23[1] = &v24;
    return sub_2158A6204(v23);
  }
  return result;
}

uint64_t sub_215D8912C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D89134(uint64_t a1, int a2)
{
  if (a2 == 23
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D892C0(uint64_t a1, int a2)
{
  if (a2 == 23
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D8944C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D89480(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D894D4(uint64_t a1, uint64_t a2, const float *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C6645E0;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)uint64_t v19 = 3;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)uint64_t v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)uint64_t v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((4 * v9) & (4 * v9 - 1)) != 0) {
    uint64_t v15 = 4;
  }
  else {
    uint64_t v15 = 4 * v9;
  }
  sub_215DAAA28(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D89618())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D89694()
{
}

void sub_215D89728(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_215D8974C(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C665078, 0);
  if (v5)
  {
    sub_2158A6C78(a1 + 8, (uint64_t)v5 + 8);
    return result;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v35, lpsrc, 24);
  long long v8 = *(_OWORD *)(v35 + 16);
  long long v7 = *(_OWORD *)(v35 + 32);
  long long v31 = *(_OWORD *)v35;
  long long v32 = v8;
  long long v33 = v7;
  *(void *)&long long v35 = 0;
  MEMORY[0x2166C4D20]();
  unint64_t v9 = *(float **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36)) {
    BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  unint64_t v11 = *(void *)(a1 + 32);
  unint64_t v12 = *(void *)(a1 + 40);
  if (v10) {
    unint64_t v11 = 0;
  }
  LODWORD(v35) = 3;
  *(void *)((char *)&v35 + 4) = v11;
  unint64_t v13 = v11;
  uint64_t v14 = v35;
  unint64_t v15 = HIDWORD(v11);
  LODWORD(v35) = 1;
  *(void *)((char *)&v35 + 4) = v12;
  unint64_t v16 = v35;
  unint64_t v17 = HIDWORD(v12);
  if (HIDWORD(v12) * HIDWORD(v11) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  *(void *)&long long v35 = v9;
  *((void *)&v35 + 1) = v14;
  int v36 = v15;
  unint64_t v37 = v16;
  int v38 = HIDWORD(v12);
  unint64_t v39 = v13;
  unint64_t v40 = v12;
  v34[0] = (uint64_t)&v31;
  v34[1] = (uint64_t)&v35;
  if (v16 == 1 && DWORD1(v32) == 1)
  {
    sub_215854ED0(v34);
    return result;
  }
  if (DWORD2(v31) && HIDWORD(v31) && v32)
  {
    unint64_t v18 = HIDWORD(v16);
    int v19 = HIDWORD(v31) - 1;
    uint64_t v20 = DWORD2(v32);
    uint64_t v21 = (float *)v31;
    int v22 = v32 - 1;
    if (v32 != 1)
    {
      uint64_t v23 = HIDWORD(v32);
      if (HIDWORD(v31) == 1)
      {
        do
        {
          *unint64_t v9 = *v21;
          v9[1] = v21[1];
          void v9[2] = v21[2];
          v21 += v23;
          v9 += v17;
          --v22;
        }
        while (v22);
LABEL_29:
        *unint64_t v9 = *v21;
        v9[1] = v21[1];
        float result = v21[2];
        void v9[2] = result;
        return result;
      }
      int v24 = 0;
      int v25 = v9 + 2;
      uint64_t v26 = (_DWORD *)(v31 + 8);
      do
      {
        int v27 = v26;
        unint64_t v28 = v25;
        int v29 = v19;
        do
        {
          *(v28 - 2) = *(v27 - 2);
          *(v28 - 1) = *(v27 - 1);
          *unint64_t v28 = *v27;
          v28 += v18;
          v27 += v20;
          --v29;
        }
        while (v29);
        *(v28 - 2) = *(v27 - 2);
        *(v28 - 1) = *(v27 - 1);
        *unint64_t v28 = *v27;
        v21 += v23;
        v9 += v17;
        ++v24;
        v25 += v17;
        v26 += v23;
      }
      while (v24 != v22);
    }
    if (v19)
    {
      uint64_t v30 = 4 * v18;
      do
      {
        *unint64_t v9 = *v21;
        v9[1] = v21[1];
        void v9[2] = v21[2];
        v21 += v20;
        unint64_t v9 = (float *)((char *)v9 + v30);
        --v19;
      }
      while (v19);
    }
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_215D89AC8(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D89AD0(uint64_t a1, int a2)
{
  if (a2 == 24
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D89C5C(uint64_t a1, int a2)
{
  if (a2 == 24
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D89DE8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D89E1C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D89E70(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C664660;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)int v19 = 4;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)int v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  uint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  BOOL v10 = (size_t *)(a1 + 64);
  *(void *)int v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if ((v9 & (v9 - 1)) != 0) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = v9;
  }
  sub_215DA9874(v10, (unsigned int *)&v17, (uint64_t)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D89FAC())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D8A028()
{
}

void sub_215D8A0BC(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_215D8A0E0(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C665090, 0);
  if (v5)
  {
    sub_2158A71B0(a1 + 8, (uint64_t)v5 + 8);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v23, lpsrc, 25);
    uint64_t v6 = v23;
    long long v8 = *(_OWORD *)(v23 + 16);
    long long v7 = *(_OWORD *)(v23 + 32);
    long long v17 = *(_OWORD *)v23;
    long long v18 = v8;
    long long v19 = v7;
    *(void *)&long long v23 = 0;
    MEMORY[0x2166C4D20](v6);
    uint64_t v9 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    unint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    if (v10) {
      unint64_t v11 = 0;
    }
    LODWORD(v23) = 4;
    *(void *)((char *)&v23 + 4) = v11;
    unint64_t v13 = v11;
    uint64_t v14 = v23;
    unint64_t v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(void *)((char *)&v23 + 4) = v12;
    uint64_t v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v23 = v9;
    *((void *)&v23 + 1) = v14;
    int v24 = v15;
    uint64_t v25 = v16;
    int v26 = HIDWORD(v12);
    unint64_t v27 = v13;
    uint64_t v28 = v12;
    v20[0] = (size_t)&v17;
    v20[1] = (size_t)&v23;
    if (v16 == 1 && DWORD1(v18) == 1)
    {
      sub_2158A2610(v20);
    }
    else
    {
      char v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17) && v18)
      {
        int v22 = &v21;
        sub_2158A6EF0((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
      }
    }
  }
}

uint64_t sub_215D8A354(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D8A35C(uint64_t a1, int a2)
{
  if (a2 == 25
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D8A4E8(uint64_t a1, int a2)
{
  if (a2 == 25
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D8A674(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D8A6A8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D8A6FC(uint64_t a1, uint64_t a2, const __int16 *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C6646E0;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)long long v19 = 4;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)long long v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)long long v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0) {
    uint64_t v15 = 2;
  }
  else {
    uint64_t v15 = 2 * v9;
  }
  sub_215DA9D40(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D8A840())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D8A8BC()
{
}

void sub_215D8A950(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_215D8A974(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C6650A8, 0);
  if (v5)
  {
    sub_2158A7718(a1 + 8, (uint64_t)v5 + 8);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v23, lpsrc, 26);
    uint64_t v6 = v23;
    long long v8 = *(_OWORD *)(v23 + 16);
    long long v7 = *(_OWORD *)(v23 + 32);
    long long v17 = *(_OWORD *)v23;
    long long v18 = v8;
    long long v19 = v7;
    *(void *)&long long v23 = 0;
    MEMORY[0x2166C4D20](v6);
    uint64_t v9 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    unint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    if (v10) {
      unint64_t v11 = 0;
    }
    LODWORD(v23) = 4;
    *(void *)((char *)&v23 + 4) = v11;
    unint64_t v13 = v11;
    uint64_t v14 = v23;
    unint64_t v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(void *)((char *)&v23 + 4) = v12;
    uint64_t v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v23 = v9;
    *((void *)&v23 + 1) = v14;
    int v24 = v15;
    uint64_t v25 = v16;
    int v26 = HIDWORD(v12);
    unint64_t v27 = v13;
    uint64_t v28 = v12;
    v20[0] = (uint64_t)&v17;
    v20[1] = (uint64_t)&v23;
    if (v16 == 1 && DWORD1(v18) == 1)
    {
      sub_2158530CC(v20);
    }
    else
    {
      char v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17) && v18)
      {
        int v22 = &v21;
        sub_2158A7430((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
      }
    }
  }
}

uint64_t sub_215D8ABE8(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D8ABF0(uint64_t a1, int a2)
{
  if (a2 == 26
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D8AD7C(uint64_t a1, int a2)
{
  if (a2 == 26
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D8AF08(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_215D8AFB8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D8B068(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D8B138(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C664760;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)long long v19 = 4;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)long long v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)long long v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0) {
    uint64_t v15 = 2;
  }
  else {
    uint64_t v15 = 2 * v9;
  }
  sub_215DAA448(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D8B27C())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D8B2F8()
{
}

void sub_215D8B38C(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_215D8B3B0(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C6650C0, 0);
  if (v5)
  {
    sub_2158A7D64(a1 + 8, (long long *)(v5 + 8));
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v24, lpsrc, 27);
    uint64_t v7 = v24;
    long long v9 = *(_OWORD *)(v24 + 16);
    long long v8 = *(_OWORD *)(v24 + 32);
    v22[0] = *(_OWORD *)v24;
    v22[1] = v9;
    void v22[2] = v8;
    *(void *)&long long v24 = 0;
    MEMORY[0x2166C4D20](v7, 0xC400A2AC0F1, v10, v11, v12, v13);
    uint64_t v14 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v15 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v15 = 1;
    }
    unint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 40);
    if (v15) {
      unint64_t v16 = 0;
    }
    LODWORD(v24) = 4;
    *(void *)((char *)&v24 + 4) = v16;
    unint64_t v18 = v16;
    uint64_t v19 = v24;
    unint64_t v20 = HIDWORD(v16);
    LODWORD(v24) = 1;
    *(void *)((char *)&v24 + 4) = v17;
    uint64_t v21 = v24;
    if (HIDWORD(v17) * HIDWORD(v16) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v24 = v14;
    *((void *)&v24 + 1) = v19;
    int v25 = v20;
    uint64_t v26 = v21;
    int v27 = HIDWORD(v17);
    unint64_t v28 = v18;
    uint64_t v29 = v17;
    v23[0] = v22;
    v23[1] = &v24;
    return sub_2158A79C0(v23);
  }
  return result;
}

uint64_t sub_215D8B5D8(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D8B5E0(uint64_t a1, int a2)
{
  if (a2 == 27
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D8B76C(uint64_t a1, int a2)
{
  if (a2 == 27
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D8B8F8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D8B92C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D8B980(uint64_t a1, uint64_t a2, const float *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C6647E0;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)uint64_t v19 = 4;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)uint64_t v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)uint64_t v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((4 * v9) & (4 * v9 - 1)) != 0) {
    uint64_t v15 = 4;
  }
  else {
    uint64_t v15 = 4 * v9;
  }
  sub_215DAAA28(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D8BAC0())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D8BB3C()
{
}

void sub_215D8BBD0(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_215D8BBF4(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C6650D8, 0);
  if (v5)
  {
    sub_2158A84AC(a1 + 8, (uint64_t)v5 + 8);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v24, lpsrc, 28);
    uint64_t v7 = v24;
    long long v9 = *(_OWORD *)(v24 + 16);
    long long v8 = *(_OWORD *)(v24 + 32);
    long long v18 = *(_OWORD *)v24;
    long long v19 = v9;
    long long v20 = v8;
    *(void *)&long long v24 = 0;
    MEMORY[0x2166C4D20](v7);
    uint64_t v10 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v11 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v11 = 1;
    }
    unint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    if (v11) {
      unint64_t v12 = 0;
    }
    LODWORD(v24) = 4;
    *(void *)((char *)&v24 + 4) = v12;
    unint64_t v14 = v12;
    uint64_t v15 = v24;
    unint64_t v16 = HIDWORD(v12);
    LODWORD(v24) = 1;
    *(void *)((char *)&v24 + 4) = v13;
    uint64_t v17 = v24;
    if (HIDWORD(v13) * HIDWORD(v12) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v24 = v10;
    *((void *)&v24 + 1) = v15;
    int v25 = v16;
    uint64_t v26 = v17;
    int v27 = HIDWORD(v13);
    unint64_t v28 = v14;
    uint64_t v29 = v13;
    v21[0] = (uint64_t)&v18;
    v21[1] = (uint64_t)&v24;
    if (v17 == 1 && DWORD1(v19) == 1)
    {
      sub_215854ED0(v21);
    }
    else
    {
      char v22 = 0;
      if (DWORD2(v18) && HIDWORD(v18) && v19)
      {
        long long v23 = &v22;
        return sub_2158A81CC((uint64_t)&v23, (uint64_t)&v18, (uint64_t)&v24);
      }
    }
  }
  return result;
}

uint64_t sub_215D8BE68(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D8BE70(uint64_t a1, int a2)
{
  if (a2 == 28
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D8BFFC(uint64_t a1, int a2)
{
  if (a2 == 28
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D8C188(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D8C1BC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D8C210(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C664860;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)long long v19 = 4;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)long long v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  uint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = (size_t *)(a1 + 64);
  *(void *)long long v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if ((v9 & (v9 - 1)) != 0) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = v9;
  }
  sub_215DA9874(v10, (unsigned int *)&v17, (uint64_t)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D8C34C())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D8C3C8()
{
}

void sub_215D8C45C(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_215D8C480(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C6650F0, 0);
  if (v5)
  {
    sub_2158A71B0(a1 + 8, (uint64_t)v5 + 8);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v23, lpsrc, 29);
    uint64_t v6 = v23;
    long long v8 = *(_OWORD *)(v23 + 16);
    long long v7 = *(_OWORD *)(v23 + 32);
    long long v17 = *(_OWORD *)v23;
    long long v18 = v8;
    long long v19 = v7;
    *(void *)&long long v23 = 0;
    MEMORY[0x2166C4D20](v6);
    uint64_t v9 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    unint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    if (v10) {
      unint64_t v11 = 0;
    }
    LODWORD(v23) = 4;
    *(void *)((char *)&v23 + 4) = v11;
    unint64_t v13 = v11;
    uint64_t v14 = v23;
    unint64_t v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(void *)((char *)&v23 + 4) = v12;
    uint64_t v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v23 = v9;
    *((void *)&v23 + 1) = v14;
    int v24 = v15;
    uint64_t v25 = v16;
    int v26 = HIDWORD(v12);
    unint64_t v27 = v13;
    uint64_t v28 = v12;
    v20[0] = (size_t)&v17;
    v20[1] = (size_t)&v23;
    if (v16 == 1 && DWORD1(v18) == 1)
    {
      sub_2158A2610(v20);
    }
    else
    {
      char v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17) && v18)
      {
        char v22 = &v21;
        sub_2158A6EF0((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
      }
    }
  }
}

uint64_t sub_215D8C6F4(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D8C6FC(uint64_t a1, int a2)
{
  if (a2 == 29
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D8C888(uint64_t a1, int a2)
{
  if (a2 == 29
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D8CA14(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D8CA48(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D8CA9C(uint64_t a1, uint64_t a2, const __int16 *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C6648E0;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)long long v19 = 4;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)long long v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)long long v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0) {
    uint64_t v15 = 2;
  }
  else {
    uint64_t v15 = 2 * v9;
  }
  sub_215DA9D40(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D8CBE0())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D8CC5C()
{
}

void sub_215D8CCF0(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_215D8CD14(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C665108, 0);
  if (v5)
  {
    sub_2158A7718(a1 + 8, (uint64_t)v5 + 8);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v23, lpsrc, 30);
    uint64_t v6 = v23;
    long long v8 = *(_OWORD *)(v23 + 16);
    long long v7 = *(_OWORD *)(v23 + 32);
    long long v17 = *(_OWORD *)v23;
    long long v18 = v8;
    long long v19 = v7;
    *(void *)&long long v23 = 0;
    MEMORY[0x2166C4D20](v6);
    uint64_t v9 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    unint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    if (v10) {
      unint64_t v11 = 0;
    }
    LODWORD(v23) = 4;
    *(void *)((char *)&v23 + 4) = v11;
    unint64_t v13 = v11;
    uint64_t v14 = v23;
    unint64_t v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(void *)((char *)&v23 + 4) = v12;
    uint64_t v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v23 = v9;
    *((void *)&v23 + 1) = v14;
    int v24 = v15;
    uint64_t v25 = v16;
    int v26 = HIDWORD(v12);
    unint64_t v27 = v13;
    uint64_t v28 = v12;
    v20[0] = (uint64_t)&v17;
    v20[1] = (uint64_t)&v23;
    if (v16 == 1 && DWORD1(v18) == 1)
    {
      sub_2158530CC(v20);
    }
    else
    {
      char v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17) && v18)
      {
        char v22 = &v21;
        sub_2158A7430((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
      }
    }
  }
}

uint64_t sub_215D8CF88(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D8CF90(uint64_t a1, int a2)
{
  if (a2 == 30
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D8D11C(uint64_t a1, int a2)
{
  if (a2 == 30
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D8D2A8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_215D8D358(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D8D408(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D8D4D8(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C664960;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)long long v19 = 4;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)long long v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)long long v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0) {
    uint64_t v15 = 2;
  }
  else {
    uint64_t v15 = 2 * v9;
  }
  sub_215DAA448(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D8D61C())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D8D698()
{
}

void sub_215D8D72C(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_215D8D750(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C665120, 0);
  if (v5)
  {
    sub_2158A7D64(a1 + 8, (long long *)(v5 + 8));
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v24, lpsrc, 31);
    uint64_t v7 = v24;
    long long v9 = *(_OWORD *)(v24 + 16);
    long long v8 = *(_OWORD *)(v24 + 32);
    v22[0] = *(_OWORD *)v24;
    v22[1] = v9;
    void v22[2] = v8;
    *(void *)&long long v24 = 0;
    MEMORY[0x2166C4D20](v7, 0xC400A2AC0F1, v10, v11, v12, v13);
    uint64_t v14 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v15 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v15 = 1;
    }
    unint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 40);
    if (v15) {
      unint64_t v16 = 0;
    }
    LODWORD(v24) = 4;
    *(void *)((char *)&v24 + 4) = v16;
    unint64_t v18 = v16;
    uint64_t v19 = v24;
    unint64_t v20 = HIDWORD(v16);
    LODWORD(v24) = 1;
    *(void *)((char *)&v24 + 4) = v17;
    uint64_t v21 = v24;
    if (HIDWORD(v17) * HIDWORD(v16) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v24 = v14;
    *((void *)&v24 + 1) = v19;
    int v25 = v20;
    uint64_t v26 = v21;
    int v27 = HIDWORD(v17);
    unint64_t v28 = v18;
    uint64_t v29 = v17;
    v23[0] = v22;
    v23[1] = &v24;
    return sub_2158A79C0(v23);
  }
  return result;
}

uint64_t sub_215D8D978(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D8D980(uint64_t a1, int a2)
{
  if (a2 == 31
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D8DB0C(uint64_t a1, int a2)
{
  if (a2 == 31
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D8DC98(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D8DCCC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D8DD20(uint64_t a1, uint64_t a2, const float *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C6649E0;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)uint64_t v19 = 4;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)uint64_t v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)uint64_t v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((4 * v9) & (4 * v9 - 1)) != 0) {
    uint64_t v15 = 4;
  }
  else {
    uint64_t v15 = 4 * v9;
  }
  sub_215DAAA28(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D8DE60())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D8DEDC()
{
}

void sub_215D8DF70(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_215D8DF94(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C665138, 0);
  if (v5)
  {
    sub_2158A84AC(a1 + 8, (uint64_t)v5 + 8);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v24, lpsrc, 32);
    uint64_t v7 = v24;
    long long v9 = *(_OWORD *)(v24 + 16);
    long long v8 = *(_OWORD *)(v24 + 32);
    long long v18 = *(_OWORD *)v24;
    long long v19 = v9;
    long long v20 = v8;
    *(void *)&long long v24 = 0;
    MEMORY[0x2166C4D20](v7);
    uint64_t v10 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v11 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v11 = 1;
    }
    unint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    if (v11) {
      unint64_t v12 = 0;
    }
    LODWORD(v24) = 4;
    *(void *)((char *)&v24 + 4) = v12;
    unint64_t v14 = v12;
    uint64_t v15 = v24;
    unint64_t v16 = HIDWORD(v12);
    LODWORD(v24) = 1;
    *(void *)((char *)&v24 + 4) = v13;
    uint64_t v17 = v24;
    if (HIDWORD(v13) * HIDWORD(v12) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v24 = v10;
    *((void *)&v24 + 1) = v15;
    int v25 = v16;
    uint64_t v26 = v17;
    int v27 = HIDWORD(v13);
    unint64_t v28 = v14;
    uint64_t v29 = v13;
    v21[0] = (uint64_t)&v18;
    v21[1] = (uint64_t)&v24;
    if (v17 == 1 && DWORD1(v19) == 1)
    {
      sub_215854ED0(v21);
    }
    else
    {
      char v22 = 0;
      if (DWORD2(v18) && HIDWORD(v18) && v19)
      {
        long long v23 = &v22;
        return sub_2158A81CC((uint64_t)&v23, (uint64_t)&v18, (uint64_t)&v24);
      }
    }
  }
  return result;
}

uint64_t sub_215D8E208(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D8E210(uint64_t a1, int a2)
{
  if (a2 == 32
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D8E39C(uint64_t a1, int a2)
{
  if (a2 == 32
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D8E528(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D8E55C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D8E5B0(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C664A60;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)long long v19 = 4;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)long long v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  uint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = (size_t *)(a1 + 64);
  *(void *)long long v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if ((v9 & (v9 - 1)) != 0) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = v9;
  }
  sub_215DA9874(v10, (unsigned int *)&v17, (uint64_t)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D8E6EC())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D8E768()
{
}

void sub_215D8E7FC(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_215D8E820(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C665150, 0);
  if (v5)
  {
    sub_2158A71B0(a1 + 8, (uint64_t)v5 + 8);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v23, lpsrc, 33);
    uint64_t v6 = v23;
    long long v8 = *(_OWORD *)(v23 + 16);
    long long v7 = *(_OWORD *)(v23 + 32);
    long long v17 = *(_OWORD *)v23;
    long long v18 = v8;
    long long v19 = v7;
    *(void *)&long long v23 = 0;
    MEMORY[0x2166C4D20](v6);
    uint64_t v9 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    unint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    if (v10) {
      unint64_t v11 = 0;
    }
    LODWORD(v23) = 4;
    *(void *)((char *)&v23 + 4) = v11;
    unint64_t v13 = v11;
    uint64_t v14 = v23;
    unint64_t v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(void *)((char *)&v23 + 4) = v12;
    uint64_t v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v23 = v9;
    *((void *)&v23 + 1) = v14;
    int v24 = v15;
    uint64_t v25 = v16;
    int v26 = HIDWORD(v12);
    unint64_t v27 = v13;
    uint64_t v28 = v12;
    v20[0] = (size_t)&v17;
    v20[1] = (size_t)&v23;
    if (v16 == 1 && DWORD1(v18) == 1)
    {
      sub_2158A2610(v20);
    }
    else
    {
      char v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17) && v18)
      {
        char v22 = &v21;
        sub_2158A6EF0((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
      }
    }
  }
}

uint64_t sub_215D8EA94(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D8EA9C(uint64_t a1, int a2)
{
  if (a2 == 33
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D8EC28(uint64_t a1, int a2)
{
  if (a2 == 33
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D8EDB4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D8EDE8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D8EE3C(uint64_t a1, uint64_t a2, const __int16 *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C664AE0;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)long long v19 = 4;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)long long v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)long long v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0) {
    uint64_t v15 = 2;
  }
  else {
    uint64_t v15 = 2 * v9;
  }
  sub_215DA9D40(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D8EF80())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D8EFFC()
{
}

void sub_215D8F090(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_215D8F0B4(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C665168, 0);
  if (v5)
  {
    sub_2158A7718(a1 + 8, (uint64_t)v5 + 8);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v23, lpsrc, 34);
    uint64_t v6 = v23;
    long long v8 = *(_OWORD *)(v23 + 16);
    long long v7 = *(_OWORD *)(v23 + 32);
    long long v17 = *(_OWORD *)v23;
    long long v18 = v8;
    long long v19 = v7;
    *(void *)&long long v23 = 0;
    MEMORY[0x2166C4D20](v6);
    uint64_t v9 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    unint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    if (v10) {
      unint64_t v11 = 0;
    }
    LODWORD(v23) = 4;
    *(void *)((char *)&v23 + 4) = v11;
    unint64_t v13 = v11;
    uint64_t v14 = v23;
    unint64_t v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(void *)((char *)&v23 + 4) = v12;
    uint64_t v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v23 = v9;
    *((void *)&v23 + 1) = v14;
    int v24 = v15;
    uint64_t v25 = v16;
    int v26 = HIDWORD(v12);
    unint64_t v27 = v13;
    uint64_t v28 = v12;
    v20[0] = (uint64_t)&v17;
    v20[1] = (uint64_t)&v23;
    if (v16 == 1 && DWORD1(v18) == 1)
    {
      sub_2158530CC(v20);
    }
    else
    {
      char v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17) && v18)
      {
        char v22 = &v21;
        sub_2158A7430((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
      }
    }
  }
}

uint64_t sub_215D8F328(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D8F330(uint64_t a1, int a2)
{
  if (a2 == 34
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D8F4BC(uint64_t a1, int a2)
{
  if (a2 == 34
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D8F648(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_215D8F6F8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D8F7A8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D8F878(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C664B60;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)long long v19 = 4;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)long long v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)long long v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0) {
    uint64_t v15 = 2;
  }
  else {
    uint64_t v15 = 2 * v9;
  }
  sub_215DAA448(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D8F9BC())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D8FA38()
{
}

void sub_215D8FACC(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_215D8FAF0(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C665180, 0);
  if (v5)
  {
    sub_2158A7D64(a1 + 8, (long long *)(v5 + 8));
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v24, lpsrc, 35);
    uint64_t v7 = v24;
    long long v9 = *(_OWORD *)(v24 + 16);
    long long v8 = *(_OWORD *)(v24 + 32);
    v22[0] = *(_OWORD *)v24;
    v22[1] = v9;
    void v22[2] = v8;
    *(void *)&long long v24 = 0;
    MEMORY[0x2166C4D20](v7, 0xC400A2AC0F1, v10, v11, v12, v13);
    uint64_t v14 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v15 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v15 = 1;
    }
    unint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 40);
    if (v15) {
      unint64_t v16 = 0;
    }
    LODWORD(v24) = 4;
    *(void *)((char *)&v24 + 4) = v16;
    unint64_t v18 = v16;
    uint64_t v19 = v24;
    unint64_t v20 = HIDWORD(v16);
    LODWORD(v24) = 1;
    *(void *)((char *)&v24 + 4) = v17;
    uint64_t v21 = v24;
    if (HIDWORD(v17) * HIDWORD(v16) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v24 = v14;
    *((void *)&v24 + 1) = v19;
    int v25 = v20;
    uint64_t v26 = v21;
    int v27 = HIDWORD(v17);
    unint64_t v28 = v18;
    uint64_t v29 = v17;
    v23[0] = v22;
    v23[1] = &v24;
    return sub_2158A79C0(v23);
  }
  return result;
}

uint64_t sub_215D8FD18(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D8FD20(uint64_t a1, int a2)
{
  if (a2 == 35
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D8FEAC(uint64_t a1, int a2)
{
  if (a2 == 35
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D90038(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D9006C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D900C0(uint64_t a1, uint64_t a2, const float *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C664BE0;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)uint64_t v19 = 4;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)uint64_t v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)uint64_t v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((4 * v9) & (4 * v9 - 1)) != 0) {
    uint64_t v15 = 4;
  }
  else {
    uint64_t v15 = 4 * v9;
  }
  sub_215DAAA28(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D90200())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D9027C()
{
}

void sub_215D90310(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_215D90334(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C665198, 0);
  if (v5)
  {
    sub_2158A84AC(a1 + 8, (uint64_t)v5 + 8);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v24, lpsrc, 36);
    uint64_t v7 = v24;
    long long v9 = *(_OWORD *)(v24 + 16);
    long long v8 = *(_OWORD *)(v24 + 32);
    long long v18 = *(_OWORD *)v24;
    long long v19 = v9;
    long long v20 = v8;
    *(void *)&long long v24 = 0;
    MEMORY[0x2166C4D20](v7);
    uint64_t v10 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v11 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v11 = 1;
    }
    unint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    if (v11) {
      unint64_t v12 = 0;
    }
    LODWORD(v24) = 4;
    *(void *)((char *)&v24 + 4) = v12;
    unint64_t v14 = v12;
    uint64_t v15 = v24;
    unint64_t v16 = HIDWORD(v12);
    LODWORD(v24) = 1;
    *(void *)((char *)&v24 + 4) = v13;
    uint64_t v17 = v24;
    if (HIDWORD(v13) * HIDWORD(v12) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v24 = v10;
    *((void *)&v24 + 1) = v15;
    int v25 = v16;
    uint64_t v26 = v17;
    int v27 = HIDWORD(v13);
    unint64_t v28 = v14;
    uint64_t v29 = v13;
    v21[0] = (uint64_t)&v18;
    v21[1] = (uint64_t)&v24;
    if (v17 == 1 && DWORD1(v19) == 1)
    {
      sub_215854ED0(v21);
    }
    else
    {
      char v22 = 0;
      if (DWORD2(v18) && HIDWORD(v18) && v19)
      {
        long long v23 = &v22;
        return sub_2158A81CC((uint64_t)&v23, (uint64_t)&v18, (uint64_t)&v24);
      }
    }
  }
  return result;
}

uint64_t sub_215D905A8(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D905B0(uint64_t a1, int a2)
{
  if (a2 == 36
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D9073C(uint64_t a1, int a2)
{
  if (a2 == 36
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D908C8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D908FC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D90950(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C664C60;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)long long v19 = 4;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)long long v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  uint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = (size_t *)(a1 + 64);
  *(void *)long long v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if ((v9 & (v9 - 1)) != 0) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = v9;
  }
  sub_215DA9874(v10, (unsigned int *)&v17, (uint64_t)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D90A8C())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D90B08()
{
}

void sub_215D90B9C(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_215D90BC0(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C6651B0, 0);
  if (v5)
  {
    sub_2158A71B0(a1 + 8, (uint64_t)v5 + 8);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v23, lpsrc, 37);
    uint64_t v6 = v23;
    long long v8 = *(_OWORD *)(v23 + 16);
    long long v7 = *(_OWORD *)(v23 + 32);
    long long v17 = *(_OWORD *)v23;
    long long v18 = v8;
    long long v19 = v7;
    *(void *)&long long v23 = 0;
    MEMORY[0x2166C4D20](v6);
    uint64_t v9 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    unint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    if (v10) {
      unint64_t v11 = 0;
    }
    LODWORD(v23) = 4;
    *(void *)((char *)&v23 + 4) = v11;
    unint64_t v13 = v11;
    uint64_t v14 = v23;
    unint64_t v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(void *)((char *)&v23 + 4) = v12;
    uint64_t v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v23 = v9;
    *((void *)&v23 + 1) = v14;
    int v24 = v15;
    uint64_t v25 = v16;
    int v26 = HIDWORD(v12);
    unint64_t v27 = v13;
    uint64_t v28 = v12;
    v20[0] = (size_t)&v17;
    v20[1] = (size_t)&v23;
    if (v16 == 1 && DWORD1(v18) == 1)
    {
      sub_2158A2610(v20);
    }
    else
    {
      char v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17) && v18)
      {
        char v22 = &v21;
        sub_2158A6EF0((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
      }
    }
  }
}

uint64_t sub_215D90E34(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D90E3C(uint64_t a1, int a2)
{
  if (a2 == 37
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D90FC8(uint64_t a1, int a2)
{
  if (a2 == 37
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D91154(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D91188(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D911DC(uint64_t a1, uint64_t a2, const __int16 *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C664CE0;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)long long v19 = 4;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)long long v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)long long v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0) {
    uint64_t v15 = 2;
  }
  else {
    uint64_t v15 = 2 * v9;
  }
  sub_215DA9D40(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D91320())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D9139C()
{
}

void sub_215D91430(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_215D91454(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C6651C8, 0);
  if (v5)
  {
    sub_2158A7718(a1 + 8, (uint64_t)v5 + 8);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v23, lpsrc, 38);
    uint64_t v6 = v23;
    long long v8 = *(_OWORD *)(v23 + 16);
    long long v7 = *(_OWORD *)(v23 + 32);
    long long v17 = *(_OWORD *)v23;
    long long v18 = v8;
    long long v19 = v7;
    *(void *)&long long v23 = 0;
    MEMORY[0x2166C4D20](v6);
    uint64_t v9 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v10 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    unint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    if (v10) {
      unint64_t v11 = 0;
    }
    LODWORD(v23) = 4;
    *(void *)((char *)&v23 + 4) = v11;
    unint64_t v13 = v11;
    uint64_t v14 = v23;
    unint64_t v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(void *)((char *)&v23 + 4) = v12;
    uint64_t v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v23 = v9;
    *((void *)&v23 + 1) = v14;
    int v24 = v15;
    uint64_t v25 = v16;
    int v26 = HIDWORD(v12);
    unint64_t v27 = v13;
    uint64_t v28 = v12;
    v20[0] = (uint64_t)&v17;
    v20[1] = (uint64_t)&v23;
    if (v16 == 1 && DWORD1(v18) == 1)
    {
      sub_2158530CC(v20);
    }
    else
    {
      char v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17) && v18)
      {
        char v22 = &v21;
        sub_2158A7430((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
      }
    }
  }
}

uint64_t sub_215D916C8(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D916D0(uint64_t a1, int a2)
{
  if (a2 == 38
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D9185C(uint64_t a1, int a2)
{
  if (a2 == 38
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D919E8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_215D91A98(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D91B48(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D91C18(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C664D60;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)long long v19 = 4;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)long long v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)long long v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((2 * v9) & (2 * v9 - 1)) != 0) {
    uint64_t v15 = 2;
  }
  else {
    uint64_t v15 = 2 * v9;
  }
  sub_215DAA448(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D91D5C())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D91DD8()
{
}

void sub_215D91E6C(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_215D91E90(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C6651E0, 0);
  if (v5)
  {
    sub_2158A7D64(a1 + 8, (long long *)(v5 + 8));
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v24, lpsrc, 39);
    uint64_t v7 = v24;
    long long v9 = *(_OWORD *)(v24 + 16);
    long long v8 = *(_OWORD *)(v24 + 32);
    v22[0] = *(_OWORD *)v24;
    v22[1] = v9;
    void v22[2] = v8;
    *(void *)&long long v24 = 0;
    MEMORY[0x2166C4D20](v7, 0xC400A2AC0F1, v10, v11, v12, v13);
    uint64_t v14 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v15 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v15 = 1;
    }
    unint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 40);
    if (v15) {
      unint64_t v16 = 0;
    }
    LODWORD(v24) = 4;
    *(void *)((char *)&v24 + 4) = v16;
    unint64_t v18 = v16;
    uint64_t v19 = v24;
    unint64_t v20 = HIDWORD(v16);
    LODWORD(v24) = 1;
    *(void *)((char *)&v24 + 4) = v17;
    uint64_t v21 = v24;
    if (HIDWORD(v17) * HIDWORD(v16) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v24 = v14;
    *((void *)&v24 + 1) = v19;
    int v25 = v20;
    uint64_t v26 = v21;
    int v27 = HIDWORD(v17);
    unint64_t v28 = v18;
    uint64_t v29 = v17;
    v23[0] = v22;
    v23[1] = &v24;
    return sub_2158A79C0(v23);
  }
  return result;
}

uint64_t sub_215D920B8(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D920C0(uint64_t a1, int a2)
{
  if (a2 == 39
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D9224C(uint64_t a1, int a2)
{
  if (a2 == 39
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

uint64_t sub_215D923D8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_215D9240C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2) {
    free(v2);
  }
  *(void *)(a1 + 72) = 0;

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215D92460(uint64_t a1, uint64_t a2, const float *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C664DE0;
  if (*(_DWORD *)(a2 + 28)) {
    BOOL v4 = *(_DWORD *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4) {
    uint64_t v6 = 0;
  }
  *(void *)&v19[4] = v6;
  *(_DWORD *)uint64_t v19 = 4;
  unint64_t v7 = *(void *)v19;
  *(_DWORD *)uint64_t v19 = 1;
  *(_DWORD *)&v19[4] = v5;
  uint64_t v8 = *(void *)v19;
  unint64_t v9 = HIDWORD(v5);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = HIDWORD(v6);
  *(void *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(_DWORD *)(a1 + 28) = HIDWORD(v5);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  uint64_t v10 = a1 + 64;
  *(void *)uint64_t v19 = v8;
  *(_DWORD *)&v19[8] = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v6) == 0;
  if (v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v17 = v13;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v6);
  }
  int v18 = v14;
  if (((4 * v9) & (4 * v9 - 1)) != 0) {
    uint64_t v15 = 4;
  }
  else {
    uint64_t v15 = 4 * v9;
  }
  sub_215DAAA28(v10, (unsigned int *)&v17, (uint64_t *)v19, 1, a3, 1, v15);
  return a1;
}

uint64_t (***sub_215D925A0())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890580))
  {
    return &off_26ACF2448;
  }
  __cxa_atexit((void (*)(void *))nullsub_366, &off_26ACF2448, &dword_21572C000);
  __cxa_guard_release(&qword_267890580);
  return &off_26ACF2448;
}

void sub_215D9261C()
{
}

void sub_215D926B0(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_215D926D4(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C6651F8, 0);
  if (v5)
  {
    sub_2158A84AC(a1 + 8, (uint64_t)v5 + 8);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v24, lpsrc, 40);
    uint64_t v7 = v24;
    long long v9 = *(_OWORD *)(v24 + 16);
    long long v8 = *(_OWORD *)(v24 + 32);
    long long v18 = *(_OWORD *)v24;
    long long v19 = v9;
    long long v20 = v8;
    *(void *)&long long v24 = 0;
    MEMORY[0x2166C4D20](v7);
    uint64_t v10 = *(void *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v11 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v11 = 1;
    }
    unint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    if (v11) {
      unint64_t v12 = 0;
    }
    LODWORD(v24) = 4;
    *(void *)((char *)&v24 + 4) = v12;
    unint64_t v14 = v12;
    uint64_t v15 = v24;
    unint64_t v16 = HIDWORD(v12);
    LODWORD(v24) = 1;
    *(void *)((char *)&v24 + 4) = v13;
    uint64_t v17 = v24;
    if (HIDWORD(v13) * HIDWORD(v12) == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    *(void *)&long long v24 = v10;
    *((void *)&v24 + 1) = v15;
    int v25 = v16;
    uint64_t v26 = v17;
    int v27 = HIDWORD(v13);
    unint64_t v28 = v14;
    uint64_t v29 = v13;
    v21[0] = (uint64_t)&v18;
    v21[1] = (uint64_t)&v24;
    if (v17 == 1 && DWORD1(v19) == 1)
    {
      sub_215854ED0(v21);
    }
    else
    {
      char v22 = 0;
      if (DWORD2(v18) && HIDWORD(v18) && v19)
      {
        long long v23 = &v22;
        return sub_2158A81CC((uint64_t)&v23, (uint64_t)&v18, (uint64_t)&v24);
      }
    }
  }
  return result;
}

uint64_t sub_215D92948(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void sub_215D92950(uint64_t a1, int a2)
{
  if (a2 == 40
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D92ADC(uint64_t a1, int a2)
{
  if (a2 == 40
    || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    if (*(_DWORD *)(a1 + 36)) {
      BOOL v3 = *(_DWORD *)(a1 + 32) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v3) {
      HIDWORD(v4) = 0;
    }
    if (HIDWORD(v5) * HIDWORD(v4) != -1
      || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      operator new();
    }
  }
  abort();
}

void sub_215D92C68(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  if (*((_DWORD *)a1 + 1)) {
    BOOL v3 = *(_DWORD *)a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = a1[1];
  if (v3) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = *a1;
  }
  if (v5) {
    BOOL v6 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = v5;
  }
  uint64_t v8 = (HIDWORD(v7) * HIDWORD(v4));
  if ((HIDWORD(v4) & (HIDWORD(v4) - 1)) != 0) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = HIDWORD(v4) - 1;
  }
  unint64_t v10 = v9 | (v9 >> 1) | ((v9 | (v9 >> 1)) >> 2);
  unint64_t v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
  unint64_t v12 = v11 | (v11 >> 16) | ((v11 | (v11 >> 16)) >> 32);
  if (v12 + 1 > 8) {
    size_t v13 = v12 + 1;
  }
  else {
    size_t v13 = 8;
  }
  if (v8)
  {
    memptr = 0;
    int v14 = malloc_type_posix_memalign(&memptr, v13, (HIDWORD(v7) * HIDWORD(v4)), 0x1F88E90uLL);
    if (v14) {
      sub_215E0D744(v14, v13, (HIDWORD(v7) * HIDWORD(v4)));
    }
    uint64_t v15 = memptr;
  }
  else
  {
    uint64_t v15 = 0;
  }
  *(void *)a2 = &unk_26C663A60;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(void *)(a2 + 48) = v15;
  *(void *)(a2 + 56) = v13;
  *(void *)(a2 + 64) = v7;
  *(void *)(a2 + 72) = v4;
}

void sub_215D92D74(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  if (a1[1]) {
    BOOL v3 = *a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = *(void *)a1;
  }
  if (HIDWORD(v4)) {
    unint64_t v5 = v4 << 32;
  }
  else {
    unint64_t v5 = 0;
  }
  if (v4) {
    BOOL v6 = HIDWORD(v4) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = v4;
  }
  uint64_t v8 = (HIDWORD(v7) * HIDWORD(v5));
  if ((HIDWORD(v5) & (HIDWORD(v5) - 1)) != 0) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = HIDWORD(v5) - 1;
  }
  unint64_t v10 = v9 | (v9 >> 1) | ((v9 | (v9 >> 1)) >> 2);
  unint64_t v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
  unint64_t v12 = v11 | (v11 >> 16) | ((v11 | (v11 >> 16)) >> 32);
  if (v12 + 1 > 8) {
    size_t v13 = v12 + 1;
  }
  else {
    size_t v13 = 8;
  }
  if (v8)
  {
    memptr = 0;
    int v14 = malloc_type_posix_memalign(&memptr, v13, (HIDWORD(v7) * HIDWORD(v5)), 0x1F88E90uLL);
    if (v14) {
      sub_215E0D744(v14, v13, (HIDWORD(v7) * HIDWORD(v5)));
    }
    uint64_t v15 = memptr;
  }
  else
  {
    uint64_t v15 = 0;
  }
  *(void *)a2 = &unk_26C663A60;
  *(void *)(a2 + 8) = v4;
  uint64_t v16 = v5 | (v4 != 0);
  *(void *)(a2 + 16) = v16;
  *(unsigned char *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v8;
  *(void *)(a2 + 48) = v15;
  *(void *)(a2 + 56) = v13;
  *(void *)(a2 + 64) = v7;
  *(void *)(a2 + 72) = v16;
}

void sub_215D92EA0(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  if (*((_DWORD *)a1 + 1)) {
    BOOL v3 = *(_DWORD *)a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = a1[1];
  if (v3) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = *a1;
  }
  if (v5) {
    BOOL v6 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = v5;
  }
  uint64_t v8 = (v4 >> 31) & 0x1FFFFFFFELL;
  uint64_t v9 = HIDWORD(v7) * v8;
  if ((v8 & (v8 - 1)) != 0) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = v8 - 1;
  }
  unint64_t v11 = v10 | (v10 >> 1) | ((v10 | (v10 >> 1)) >> 2);
  unint64_t v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
  unint64_t v13 = v12 | (v12 >> 16) | ((v12 | (v12 >> 16)) >> 32);
  if (v13 + 1 > 8) {
    size_t v14 = v13 + 1;
  }
  else {
    size_t v14 = 8;
  }
  unint64_t v15 = v9 & 0x1FFFFFFFELL;
  if ((v9 & 0x1FFFFFFFELL) != 0)
  {
    memptr = 0;
    int v16 = malloc_type_posix_memalign(&memptr, v14, v9 & 0x1FFFFFFFELL, 0x1F88E90uLL);
    if (v16) {
      sub_215E0D744(v16, v14, v15);
    }
    uint64_t v17 = memptr;
  }
  else
  {
    uint64_t v17 = 0;
  }
  *(void *)a2 = &unk_26C663AE0;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v15;
  *(void *)(a2 + 48) = v17;
  *(void *)(a2 + 56) = v14;
  *(void *)(a2 + 64) = v7;
  *(void *)(a2 + 72) = (2 * v4) & 0xFFFFFFFEFFFFFFFELL;
}

void sub_215D92FBC(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  if (a1[1]) {
    BOOL v3 = *a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = *(void *)a1;
  }
  if (HIDWORD(v4)) {
    unint64_t v5 = v4 << 32;
  }
  else {
    unint64_t v5 = 0;
  }
  if (v4) {
    BOOL v6 = HIDWORD(v4) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = v4;
  }
  unint64_t v8 = HIDWORD(v7) * (v5 >> 31);
  if (((v5 >> 31) & ((v5 >> 31) - 1)) != 0) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = (v5 >> 31) - 1;
  }
  unint64_t v10 = v9 | (v9 >> 1) | ((v9 | (v9 >> 1)) >> 2);
  unint64_t v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
  unint64_t v12 = v11 | (v11 >> 16) | ((v11 | (v11 >> 16)) >> 32);
  if (v12 + 1 > 8) {
    size_t v13 = v12 + 1;
  }
  else {
    size_t v13 = 8;
  }
  unint64_t v14 = v8 & 0x1FFFFFFFELL;
  if ((v8 & 0x1FFFFFFFELL) != 0)
  {
    memptr = 0;
    int v15 = malloc_type_posix_memalign(&memptr, v13, v8 & 0x1FFFFFFFELL, 0x1F88E90uLL);
    if (v15) {
      sub_215E0D744(v15, v13, v14);
    }
    int v16 = memptr;
  }
  else
  {
    int v16 = 0;
  }
  *(void *)a2 = &unk_26C663AE0;
  *(void *)(a2 + 8) = v4;
  uint64_t v17 = v5 | (v4 != 0);
  *(void *)(a2 + 16) = v17;
  *(unsigned char *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v14;
  *(void *)(a2 + 48) = v16;
  *(void *)(a2 + 56) = v13;
  *(void *)(a2 + 64) = v7;
  *(void *)(a2 + 72) = 2 * v17;
}

double sub_215D930F0@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  if (*((_DWORD *)a1 + 1)) {
    BOOL v3 = *(_DWORD *)a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  if (v3) {
    unint64_t v5 = 0;
  }
  *(void *)unint64_t v10 = v5;
  *(void *)&v10[8] = a1[1];
  v10[16] = 0;
  v10[24] = 0;
  if (v5) {
    BOOL v6 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    unint64_t v5 = 0;
  }
  unint64_t v14 = v5;
  unint64_t v15 = v4;
  uint64_t v7 = (v4 >> 31) & 0x1FFFFFFFELL;
  if ((v7 & (v7 - 1)) != 0) {
    uint64_t v8 = 2;
  }
  else {
    uint64_t v8 = v7;
  }
  sub_215DA92D8((unint64_t *)&v11, &v14, &v15, 1, 0, 0, v8);
  *(void *)a2 = &unk_26C663B60;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v10;
  *(_OWORD *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)&v10[12];
  *(_OWORD *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(void *)(a2 + 56) = v12;
  double result = *(double *)&v13;
  *(_OWORD *)(a2 + 64) = v13;
  return result;
}

double sub_215D931C8@<D0>(_DWORD *a1@<X1>, _WORD *a2@<X2>, uint64_t a3@<X8>)
{
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  unint64_t v6 = v5 << 32;
  if (!HIDWORD(v5)) {
    unint64_t v6 = 0;
  }
  BOOL v7 = v5 != 0;
  if (v5) {
    BOOL v8 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  *(void *)long long v11 = v5;
  *(void *)&v11[8] = v6 | v7;
  v11[16] = 0;
  v11[24] = 0;
  if (v8) {
    unint64_t v5 = 0;
  }
  unint64_t v15 = v5;
  uint64_t v16 = v6 | v7;
  if (((v6 >> 31) & ((v6 >> 31) - 1)) != 0) {
    uint64_t v9 = 2;
  }
  else {
    uint64_t v9 = v6 >> 31;
  }
  sub_215DA92D8((unint64_t *)&v12, &v15, (unint64_t *)&v16, 1, a2, 1, v9);
  *(void *)a3 = &unk_26C663B60;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v11;
  *(_OWORD *)(a3 + 2std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)&v11[12];
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v12;
  *(void *)(a3 + 56) = v13;
  double result = *(double *)&v14;
  *(_OWORD *)(a3 + 64) = v14;
  return result;
}

double sub_215D932B0@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  if (a1[1]) {
    BOOL v3 = *a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)a1;
  if (v3) {
    unint64_t v4 = 0;
  }
  unint64_t v5 = v4 << 32;
  if (!HIDWORD(v4)) {
    unint64_t v5 = 0;
  }
  BOOL v6 = v4 != 0;
  if (v4) {
    BOOL v7 = HIDWORD(v4) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  *(void *)unint64_t v10 = v4;
  *(void *)&v10[8] = v5 | v6;
  v10[16] = 0;
  v10[24] = 0;
  if (v7) {
    unint64_t v4 = 0;
  }
  unint64_t v14 = v4;
  uint64_t v15 = v5 | v6;
  if (((v5 >> 31) & ((v5 >> 31) - 1)) != 0) {
    uint64_t v8 = 2;
  }
  else {
    uint64_t v8 = v5 >> 31;
  }
  sub_215DA92D8((unint64_t *)&v11, &v14, (unint64_t *)&v15, 1, 0, 0, v8);
  *(void *)a2 = &unk_26C663B60;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v10;
  *(_OWORD *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = *(_OWORD *)&v10[12];
  *(_OWORD *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(void *)(a2 + 56) = v12;
  double result = *(double *)&v13;
  *(_OWORD *)(a2 + 64) = v13;
  return result;
}

void sub_215D93398(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  if (*((_DWORD *)a1 + 1)) {
    BOOL v3 = *(_DWORD *)a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = a1[1];
  if (v3) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = *a1;
  }
  if (v5) {
    BOOL v6 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = v5;
  }
  uint64_t v8 = (v4 >> 30) & 0x3FFFFFFFCLL;
  unint64_t v9 = v8 - 1;
  uint64_t v10 = HIDWORD(v7) * v8;
  BOOL v3 = (v8 & (v8 - 1)) == 0;
  unint64_t v11 = 3;
  if (v3) {
    unint64_t v11 = v9;
  }
  unint64_t v12 = v11 | (v11 >> 1) | ((v11 | (v11 >> 1)) >> 2);
  unint64_t v13 = v12 | (v12 >> 4) | ((v12 | (v12 >> 4)) >> 8);
  unint64_t v14 = v13 | (v13 >> 16) | ((v13 | (v13 >> 16)) >> 32);
  if (v14 + 1 > 8) {
    size_t v15 = v14 + 1;
  }
  else {
    size_t v15 = 8;
  }
  unint64_t v16 = v10 & 0x3FFFFFFFCLL;
  if ((v10 & 0x3FFFFFFFCLL) != 0)
  {
    memptr = 0;
    int v17 = malloc_type_posix_memalign(&memptr, v15, v10 & 0x3FFFFFFFCLL, 0x1F88E90uLL);
    if (v17) {
      sub_215E0D744(v17, v15, v16);
    }
    long long v18 = memptr;
  }
  else
  {
    long long v18 = 0;
  }
  *(void *)a2 = &unk_26C663BE0;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v16;
  *(void *)(a2 + 48) = v18;
  *(void *)(a2 + 56) = v15;
  *(void *)(a2 + 64) = v7;
  *(void *)(a2 + 72) = (4 * v4) & 0xFFFFFFFCFFFFFFFCLL;
}

void sub_215D934B8(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  if (a1[1]) {
    BOOL v3 = *a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = *(void *)a1;
  }
  if (HIDWORD(v4)) {
    unint64_t v5 = v4 << 32;
  }
  else {
    unint64_t v5 = 0;
  }
  if (v4) {
    BOOL v6 = HIDWORD(v4) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = v4;
  }
  unint64_t v8 = HIDWORD(v7) * (v5 >> 30);
  unint64_t v9 = 3;
  if (((v5 >> 30) & ((v5 >> 30) - 1)) == 0) {
    unint64_t v9 = (v5 >> 30) - 1;
  }
  unint64_t v10 = v9 | (v9 >> 1) | ((v9 | (v9 >> 1)) >> 2);
  unint64_t v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
  unint64_t v12 = v11 | (v11 >> 16) | ((v11 | (v11 >> 16)) >> 32);
  if (v12 + 1 > 8) {
    size_t v13 = v12 + 1;
  }
  else {
    size_t v13 = 8;
  }
  unint64_t v14 = v8 & 0x3FFFFFFFCLL;
  if ((v8 & 0x3FFFFFFFCLL) != 0)
  {
    memptr = 0;
    int v15 = malloc_type_posix_memalign(&memptr, v13, v8 & 0x3FFFFFFFCLL, 0x1F88E90uLL);
    if (v15) {
      sub_215E0D744(v15, v13, v14);
    }
    unint64_t v16 = memptr;
  }
  else
  {
    unint64_t v16 = 0;
  }
  *(void *)a2 = &unk_26C663BE0;
  *(void *)(a2 + 8) = v4;
  uint64_t v17 = v5 | (v4 != 0);
  *(void *)(a2 + 16) = v17;
  *(unsigned char *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v14;
  *(void *)(a2 + 48) = v16;
  *(void *)(a2 + 56) = v13;
  *(void *)(a2 + 64) = v7;
  *(void *)(a2 + 72) = 4 * v17;
}

void sub_215D935F0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 2;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  unint64_t v15 = v10 - 1;
  uint64_t v16 = (v14 * HIDWORD(v5));
  if ((v10 & (v10 - 1)) != 0) {
    unint64_t v15 = 0;
  }
  unint64_t v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  unint64_t v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8) {
    size_t v20 = v19 + 1;
  }
  else {
    size_t v20 = 8;
  }
  if (v16)
  {
    int v24 = v13;
    *(void *)memptr = 0;
    int v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v21) {
      sub_215E0D744(v21, v20, (v14 * HIDWORD(v5)));
    }
    uint64_t v22 = *(void *)memptr;
    int v13 = v24;
  }
  else
  {
    uint64_t v22 = 0;
  }
  *(void *)a2 = &unk_26C663C60;
  *(void *)(a2 + 8) = v7;
  if (v13) {
    unint64_t v23 = 0;
  }
  else {
    unint64_t v23 = v7;
  }
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = v16;
  *(void *)(a2 + 72) = v22;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v20;
  *(void *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 108) = HIDWORD(v5);
}

double sub_215D937A8@<D0>(_DWORD *a1@<X1>, unsigned char *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)int v24 = 2;
  *(void *)&v24[4] = v5;
  uint64_t v6 = 2 * (v5 != 0);
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v9 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
  *(_DWORD *)int v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)int v24 = __PAIR64__(v5, 2);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 2) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 2);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if ((v7 & (v7 - 1)) != 0) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v7;
  }
  unint64_t v15 = sub_215DA9874(v27, (unsigned int *)&v20, (uint64_t)&v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C663C60;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  size_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  size_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_215D93938(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v3 = *a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)a1;
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 2;
  *(void *)&memptr[4] = v4;
  unint64_t v5 = v4;
  uint64_t v6 = 2 * (v4 != 0);
  unsigned int v7 = v6 * v4;
  if (HIDWORD(v5)) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = 0;
  }
  unint64_t v9 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v8 >> 1) << 33);
  unint64_t v10 = __PAIR64__(*(unsigned int *)&memptr[4], 2);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v9;
  uint64_t v11 = *(void *)memptr;
  if (__PAIR64__(v5, 2) >> 32) {
    BOOL v12 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v12 = 1;
  }
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v5);
  }
  unint64_t v15 = v8 - 1;
  uint64_t v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0) {
    unint64_t v15 = 0;
  }
  unint64_t v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  unint64_t v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8) {
    size_t v20 = v19 + 1;
  }
  else {
    size_t v20 = 8;
  }
  if (v16)
  {
    int v24 = v13;
    *(void *)memptr = 0;
    int v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21) {
      sub_215E0D744(v21, v20, (v14 * v8));
    }
    uint64_t v22 = *(void *)memptr;
    int v13 = v24;
  }
  else
  {
    uint64_t v22 = 0;
  }
  *(void *)a2 = &unk_26C663C60;
  *(void *)(a2 + 8) = v10;
  if (v13) {
    unint64_t v23 = 0;
  }
  else {
    unint64_t v23 = v10;
  }
  *(_DWORD *)(a2 + 16) = HIDWORD(v5);
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(void *)(a2 + 32) = v5;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = v16;
  *(void *)(a2 + 72) = v22;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v20;
  *(void *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

void sub_215D93B0C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 2;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  if (((2 * v10) & (2 * v10 - 1)) != 0) {
    unint64_t v15 = 1;
  }
  else {
    unint64_t v15 = 2 * v10 - 1;
  }
  unint64_t v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  unint64_t v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8) {
    size_t v19 = v18 + 1;
  }
  else {
    size_t v19 = 8;
  }
  if (v14 * HIDWORD(v5))
  {
    int v23 = v13;
    *(void *)memptr = 0;
    int v20 = malloc_type_posix_memalign((void **)memptr, v19, 2 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20) {
      sub_215E0D744(v20, v19, 2 * (v14 * HIDWORD(v5)));
    }
    uint64_t v21 = *(void *)memptr;
    int v13 = v23;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (v13) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = v7;
  }
  *(void *)a2 = &unk_26C663CE0;
  *(void *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = 2 * (v14 * HIDWORD(v5));
  *(void *)(a2 + 72) = v21;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v19;
  *(void *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = (2 * v9) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a2 + 108) = 2 * HIDWORD(v5);
}

double sub_215D93CD8@<D0>(_DWORD *a1@<X1>, const __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)int v24 = 2;
  *(void *)&v24[4] = v5;
  uint64_t v6 = 2 * (v5 != 0);
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v9 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
  *(_DWORD *)int v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)int v24 = __PAIR64__(v5, 2);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 2) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 2);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0) {
    uint64_t v14 = 2;
  }
  else {
    uint64_t v14 = 2 * v7;
  }
  unint64_t v15 = (uint64_t *)sub_215DA9D40((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C663CE0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_215D93E6C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  unint64_t v4 = *(void *)(a1 + 32);
  if (v3) {
    uint64_t v5 = 0;
  }
  *(void *)&v23[4] = v5;
  unint64_t v6 = HIDWORD(v4);
  *(_DWORD *)int v23 = 2;
  unint64_t v7 = *(void *)v23;
  *(_DWORD *)int v23 = 1;
  *(_DWORD *)&v23[4] = v4;
  uint64_t v8 = *(void *)v23;
  *(void *)int v23 = v7;
  *(void *)&v23[12] = v8;
  *(_DWORD *)&v23[20] = HIDWORD(v4);
  *(void *)&v23[24] = v5;
  *(void *)&long long v24 = v4;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  uint64_t v21 = v8;
  int v22 = HIDWORD(v4);
  if (HIDWORD(v7)) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  BOOL v10 = v9 || HIDWORD(v5) == 0;
  if (v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = v7;
  }
  unint64_t v19 = v11;
  if (v10) {
    int v12 = 0;
  }
  else {
    int v12 = HIDWORD(v5);
  }
  int v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0) {
    uint64_t v13 = 2;
  }
  else {
    uint64_t v13 = 2 * v6;
  }
  uint64_t v14 = (uint64_t *)sub_215DAA448((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  long long v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(void *)a2 = &unk_26C663D60;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v24;
  uint64_t v16 = *v14;
  *(void *)(a2 + 56) = v25;
  *(void *)(a2 + 64) = v16;
  uint64_t v17 = v26[2];
  *(void *)(a2 + 72) = v26[1];
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v17;
  *(void *)(a2 + 104) = v28;
  double result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

double sub_215D93FE4@<D0>(_DWORD *a1@<X1>, _WORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)long long v24 = 2;
  *(void *)&v24[4] = v5;
  uint64_t v6 = 2 * (v5 != 0);
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v9 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
  *(_DWORD *)long long v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)long long v24 = __PAIR64__(v5, 2);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 2) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 2);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0) {
    uint64_t v14 = 2;
  }
  else {
    uint64_t v14 = 2 * v7;
  }
  long long v15 = (uint64_t *)sub_215DAA448((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C663D60;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_215D94178@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v3 = *a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)a1;
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)int v23 = 2;
  *(void *)&v23[4] = v4;
  uint64_t v5 = 2 * (v4 != 0);
  LODWORD(v6) = v5 * v4;
  unint64_t v7 = HIDWORD(v4);
  if (HIDWORD(v4)) {
    unint64_t v6 = v6;
  }
  else {
    unint64_t v6 = 0;
  }
  unint64_t v8 = v5 & 0x1FFFFFFFFLL | ((unint64_t)(v6 >> 1) << 33);
  *(_DWORD *)int v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  uint64_t v9 = *(void *)v23;
  *(void *)int v23 = __PAIR64__(v4, 2);
  *(_DWORD *)&unsigned __int8 v23[8] = HIDWORD(v4);
  *(void *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(void *)&v23[24] = v4;
  *(void *)&long long v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  uint64_t v21 = v9;
  int v22 = v6;
  if (__PAIR64__(v4, 2) >> 32) {
    BOOL v10 = HIDWORD(v4) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = __PAIR64__(v4, 2);
  }
  unint64_t v19 = v11;
  if (v10) {
    int v12 = 0;
  }
  else {
    int v12 = v7;
  }
  int v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0) {
    uint64_t v13 = 2;
  }
  else {
    uint64_t v13 = 2 * v6;
  }
  uint64_t v14 = (uint64_t *)sub_215DAA448((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  long long v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(void *)a2 = &unk_26C663D60;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v24;
  uint64_t v16 = *v14;
  *(void *)(a2 + 56) = v25;
  *(void *)(a2 + 64) = v16;
  uint64_t v17 = v26[2];
  *(void *)(a2 + 72) = v26[1];
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v17;
  *(void *)(a2 + 104) = v28;
  double result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

void sub_215D9430C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 2;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  unint64_t v15 = 3;
  if (((4 * v10) & (4 * v10 - 1)) == 0) {
    unint64_t v15 = 4 * v10 - 1;
  }
  unint64_t v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  unint64_t v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8) {
    size_t v19 = v18 + 1;
  }
  else {
    size_t v19 = 8;
  }
  if (v14 * HIDWORD(v5))
  {
    int v23 = v13;
    *(void *)memptr = 0;
    int v20 = malloc_type_posix_memalign((void **)memptr, v19, 4 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20) {
      sub_215E0D744(v20, v19, 4 * (v14 * HIDWORD(v5)));
    }
    uint64_t v21 = *(void *)memptr;
    int v13 = v23;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (v13) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = v7;
  }
  *(void *)a2 = &unk_26C663DE0;
  *(void *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = 4 * (v14 * HIDWORD(v5));
  *(void *)(a2 + 72) = v21;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v19;
  *(void *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a2 + 108) = 4 * HIDWORD(v5);
}

double sub_215D944DC@<D0>(_DWORD *a1@<X1>, const float *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)long long v24 = 2;
  *(void *)&v24[4] = v5;
  uint64_t v6 = 2 * (v5 != 0);
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v9 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
  *(_DWORD *)long long v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)long long v24 = __PAIR64__(v5, 2);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 2) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 2);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((4 * v7) & (4 * v7 - 1)) != 0) {
    uint64_t v14 = 4;
  }
  else {
    uint64_t v14 = 4 * v7;
  }
  unint64_t v15 = (uint64_t *)sub_215DAAA28((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C663DE0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_215D94674(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 3;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  unint64_t v15 = v10 - 1;
  uint64_t v16 = (v14 * HIDWORD(v5));
  if ((v10 & (v10 - 1)) != 0) {
    unint64_t v15 = 0;
  }
  unint64_t v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  unint64_t v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8) {
    size_t v20 = v19 + 1;
  }
  else {
    size_t v20 = 8;
  }
  if (v16)
  {
    int v24 = v13;
    *(void *)memptr = 0;
    int v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v21) {
      sub_215E0D744(v21, v20, (v14 * HIDWORD(v5)));
    }
    uint64_t v22 = *(void *)memptr;
    int v13 = v24;
  }
  else
  {
    uint64_t v22 = 0;
  }
  *(void *)a2 = &unk_26C663E60;
  *(void *)(a2 + 8) = v7;
  if (v13) {
    unint64_t v23 = 0;
  }
  else {
    unint64_t v23 = v7;
  }
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = v16;
  *(void *)(a2 + 72) = v22;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v20;
  *(void *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 108) = HIDWORD(v5);
}

double sub_215D9482C@<D0>(_DWORD *a1@<X1>, unsigned char *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)int v24 = 3;
  *(void *)&v24[4] = v5;
  if (v5) {
    uint64_t v6 = 3;
  }
  else {
    uint64_t v6 = 0;
  }
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v9 = v6 | (v7 << 32);
  *(_DWORD *)int v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)int v24 = __PAIR64__(v5, 3);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 3) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 3);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if ((v7 & (v7 - 1)) != 0) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v7;
  }
  unint64_t v15 = sub_215DA9874(v27, (unsigned int *)&v20, (uint64_t)&v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C663E60;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  size_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  size_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_215D949B4(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v3 = *a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v4 = *(void *)a1;
  if (v3) {
    uint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 3;
  *(void *)&memptr[4] = v4;
  uint64_t v5 = v4;
  if (v4) {
    uint64_t v6 = 3;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = HIDWORD(*(void *)&memptr[4]);
  if (HIDWORD(*(void *)&memptr[4])) {
    uint64_t v8 = (v6 * *(_DWORD *)&memptr[4]);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = v6 | (v8 << 32);
  unint64_t v10 = __PAIR64__(*(unsigned int *)&memptr[4], 3);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v9;
  uint64_t v11 = *(void *)memptr;
  if (__PAIR64__(v5, 3) >> 32) {
    BOOL v12 = v7 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = v7;
  }
  unint64_t v15 = v8 - 1;
  uint64_t v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0) {
    unint64_t v15 = 0;
  }
  unint64_t v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  unint64_t v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8) {
    size_t v20 = v19 + 1;
  }
  else {
    size_t v20 = 8;
  }
  if (v16)
  {
    int v24 = v13;
    *(void *)memptr = 0;
    int v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21) {
      sub_215E0D744(v21, v20, (v14 * v8));
    }
    uint64_t v22 = *(void *)memptr;
    int v13 = v24;
  }
  else
  {
    uint64_t v22 = 0;
  }
  *(void *)a2 = &unk_26C663E60;
  *(void *)(a2 + 8) = v10;
  if (v13) {
    unint64_t v23 = 0;
  }
  else {
    unint64_t v23 = v10;
  }
  *(_DWORD *)(a2 + 16) = v7;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(void *)(a2 + 32) = v5;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = v16;
  *(void *)(a2 + 72) = v22;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v20;
  *(void *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

void sub_215D94B80(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 3;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  if (((2 * v10) & (2 * v10 - 1)) != 0) {
    unint64_t v15 = 1;
  }
  else {
    unint64_t v15 = 2 * v10 - 1;
  }
  unint64_t v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  unint64_t v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8) {
    size_t v19 = v18 + 1;
  }
  else {
    size_t v19 = 8;
  }
  if (v14 * HIDWORD(v5))
  {
    int v23 = v13;
    *(void *)memptr = 0;
    int v20 = malloc_type_posix_memalign((void **)memptr, v19, 2 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20) {
      sub_215E0D744(v20, v19, 2 * (v14 * HIDWORD(v5)));
    }
    uint64_t v21 = *(void *)memptr;
    int v13 = v23;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (v13) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = v7;
  }
  *(void *)a2 = &unk_26C663EE0;
  *(void *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = 2 * (v14 * HIDWORD(v5));
  *(void *)(a2 + 72) = v21;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v19;
  *(void *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = (2 * v9) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a2 + 108) = 2 * HIDWORD(v5);
}

double sub_215D94D4C@<D0>(_DWORD *a1@<X1>, const __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)int v24 = 3;
  *(void *)&v24[4] = v5;
  if (v5) {
    uint64_t v6 = 3;
  }
  else {
    uint64_t v6 = 0;
  }
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v9 = v6 | (v7 << 32);
  *(_DWORD *)int v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)int v24 = __PAIR64__(v5, 3);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 3) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 3);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0) {
    uint64_t v14 = 2;
  }
  else {
    uint64_t v14 = 2 * v7;
  }
  unint64_t v15 = (uint64_t *)sub_215DA9D40((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C663EE0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_215D94EDC@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  unint64_t v4 = *(void *)(a1 + 32);
  if (v3) {
    uint64_t v5 = 0;
  }
  *(void *)&v23[4] = v5;
  unint64_t v6 = HIDWORD(v4);
  *(_DWORD *)int v23 = 3;
  unint64_t v7 = *(void *)v23;
  *(_DWORD *)int v23 = 1;
  *(_DWORD *)&v23[4] = v4;
  uint64_t v8 = *(void *)v23;
  *(void *)int v23 = v7;
  *(void *)&v23[12] = v8;
  *(_DWORD *)&v23[20] = HIDWORD(v4);
  *(void *)&v23[24] = v5;
  *(void *)&long long v24 = v4;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  uint64_t v21 = v8;
  int v22 = HIDWORD(v4);
  if (HIDWORD(v7)) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  BOOL v10 = v9 || HIDWORD(v5) == 0;
  if (v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = v7;
  }
  unint64_t v19 = v11;
  if (v10) {
    int v12 = 0;
  }
  else {
    int v12 = HIDWORD(v5);
  }
  int v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0) {
    uint64_t v13 = 2;
  }
  else {
    uint64_t v13 = 2 * v6;
  }
  uint64_t v14 = (uint64_t *)sub_215DAA448((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  long long v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(void *)a2 = &unk_26C663F60;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v24;
  uint64_t v16 = *v14;
  *(void *)(a2 + 56) = v25;
  *(void *)(a2 + 64) = v16;
  uint64_t v17 = v26[2];
  *(void *)(a2 + 72) = v26[1];
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v17;
  *(void *)(a2 + 104) = v28;
  double result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

double sub_215D95058@<D0>(_DWORD *a1@<X1>, _WORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)long long v24 = 3;
  *(void *)&v24[4] = v5;
  if (v5) {
    uint64_t v6 = 3;
  }
  else {
    uint64_t v6 = 0;
  }
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v9 = v6 | (v7 << 32);
  *(_DWORD *)long long v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)long long v24 = __PAIR64__(v5, 3);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 3) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 3);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0) {
    uint64_t v14 = 2;
  }
  else {
    uint64_t v14 = 2 * v7;
  }
  long long v15 = (uint64_t *)sub_215DAA448((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C663F60;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_215D951E8@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v3 = *a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)a1;
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)int v23 = 3;
  *(void *)&v23[4] = v4;
  if (v4) {
    uint64_t v5 = 3;
  }
  else {
    uint64_t v5 = 0;
  }
  LODWORD(v6) = v5 * v4;
  unint64_t v7 = HIDWORD(v4);
  if (HIDWORD(v4)) {
    uint64_t v6 = v6;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v8 = v5 | (v6 << 32);
  *(_DWORD *)int v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  uint64_t v9 = *(void *)v23;
  *(void *)int v23 = __PAIR64__(v4, 3);
  *(_DWORD *)&unsigned __int8 v23[8] = HIDWORD(v4);
  *(void *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(void *)&v23[24] = v4;
  *(void *)&long long v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  uint64_t v21 = v9;
  int v22 = v6;
  if (__PAIR64__(v4, 3) >> 32) {
    BOOL v10 = HIDWORD(v4) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = __PAIR64__(v4, 3);
  }
  unint64_t v19 = v11;
  if (v10) {
    int v12 = 0;
  }
  else {
    int v12 = v7;
  }
  int v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0) {
    uint64_t v13 = 2;
  }
  else {
    uint64_t v13 = 2 * v6;
  }
  uint64_t v14 = (uint64_t *)sub_215DAA448((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  long long v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(void *)a2 = &unk_26C663F60;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v24;
  uint64_t v16 = *v14;
  *(void *)(a2 + 56) = v25;
  *(void *)(a2 + 64) = v16;
  uint64_t v17 = v26[2];
  *(void *)(a2 + 72) = v26[1];
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v17;
  *(void *)(a2 + 104) = v28;
  double result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

void sub_215D95378(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 3;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  if (((4 * v10) & (4 * v10 - 1)) != 0) {
    unint64_t v15 = 3;
  }
  else {
    unint64_t v15 = 4 * v10 - 1;
  }
  unint64_t v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  unint64_t v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8) {
    size_t v19 = v18 + 1;
  }
  else {
    size_t v19 = 8;
  }
  if (v14 * HIDWORD(v5))
  {
    int v23 = v13;
    *(void *)memptr = 0;
    int v20 = malloc_type_posix_memalign((void **)memptr, v19, 4 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20) {
      sub_215E0D744(v20, v19, 4 * (v14 * HIDWORD(v5)));
    }
    uint64_t v21 = *(void *)memptr;
    int v13 = v23;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (v13) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = v7;
  }
  *(void *)a2 = &unk_26C663FE0;
  *(void *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = 4 * (v14 * HIDWORD(v5));
  *(void *)(a2 + 72) = v21;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v19;
  *(void *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a2 + 108) = 4 * HIDWORD(v5);
}

double sub_215D95544@<D0>(_DWORD *a1@<X1>, const float *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)long long v24 = 3;
  *(void *)&v24[4] = v5;
  if (v5) {
    uint64_t v6 = 3;
  }
  else {
    uint64_t v6 = 0;
  }
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v9 = v6 | (v7 << 32);
  *(_DWORD *)long long v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)long long v24 = __PAIR64__(v5, 3);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 3) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 3);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((4 * v7) & (4 * v7 - 1)) != 0) {
    uint64_t v14 = 4;
  }
  else {
    uint64_t v14 = 4 * v7;
  }
  unint64_t v15 = (uint64_t *)sub_215DAAA28((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C663FE0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_215D956D4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 4;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  unint64_t v15 = v10 - 1;
  uint64_t v16 = (v14 * HIDWORD(v5));
  if ((v10 & (v10 - 1)) != 0) {
    unint64_t v15 = 0;
  }
  unint64_t v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  unint64_t v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8) {
    size_t v20 = v19 + 1;
  }
  else {
    size_t v20 = 8;
  }
  if (v16)
  {
    int v24 = v13;
    *(void *)memptr = 0;
    int v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v21) {
      sub_215E0D744(v21, v20, (v14 * HIDWORD(v5)));
    }
    uint64_t v22 = *(void *)memptr;
    int v13 = v24;
  }
  else
  {
    uint64_t v22 = 0;
  }
  *(void *)a2 = &unk_26C664060;
  *(void *)(a2 + 8) = v7;
  if (v13) {
    unint64_t v23 = 0;
  }
  else {
    unint64_t v23 = v7;
  }
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = v16;
  *(void *)(a2 + 72) = v22;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v20;
  *(void *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 108) = HIDWORD(v5);
}

double sub_215D9588C@<D0>(_DWORD *a1@<X1>, unsigned char *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)int v24 = 4;
  *(void *)&v24[4] = v5;
  uint64_t v6 = 4 * (v5 != 0);
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)int v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)int v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 4) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 4);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if ((v7 & (v7 - 1)) != 0) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v7;
  }
  unint64_t v15 = sub_215DA9874(v27, (unsigned int *)&v20, (uint64_t)&v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C664060;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  size_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  size_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_215D95A1C(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v3 = *a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)a1;
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 4;
  *(void *)&memptr[4] = v4;
  unint64_t v5 = v4;
  uint64_t v6 = 4 * (v4 != 0);
  unsigned int v7 = v6 * v4;
  if (HIDWORD(v5)) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = 0;
  }
  unint64_t v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v8 >> 2) << 34);
  unint64_t v10 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v9;
  uint64_t v11 = *(void *)memptr;
  if (__PAIR64__(v5, 4) >> 32) {
    BOOL v12 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v12 = 1;
  }
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v5);
  }
  unint64_t v15 = v8 - 1;
  uint64_t v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0) {
    unint64_t v15 = 0;
  }
  unint64_t v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  unint64_t v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8) {
    size_t v20 = v19 + 1;
  }
  else {
    size_t v20 = 8;
  }
  if (v16)
  {
    int v24 = v13;
    *(void *)memptr = 0;
    int v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21) {
      sub_215E0D744(v21, v20, (v14 * v8));
    }
    uint64_t v22 = *(void *)memptr;
    int v13 = v24;
  }
  else
  {
    uint64_t v22 = 0;
  }
  *(void *)a2 = &unk_26C664060;
  *(void *)(a2 + 8) = v10;
  if (v13) {
    unint64_t v23 = 0;
  }
  else {
    unint64_t v23 = v10;
  }
  *(_DWORD *)(a2 + 16) = HIDWORD(v5);
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(void *)(a2 + 32) = v5;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = v16;
  *(void *)(a2 + 72) = v22;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v20;
  *(void *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

void sub_215D95BF0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 4;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  if (((2 * v10) & (2 * v10 - 1)) != 0) {
    unint64_t v15 = 1;
  }
  else {
    unint64_t v15 = 2 * v10 - 1;
  }
  unint64_t v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  unint64_t v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8) {
    size_t v19 = v18 + 1;
  }
  else {
    size_t v19 = 8;
  }
  if (v14 * HIDWORD(v5))
  {
    int v23 = v13;
    *(void *)memptr = 0;
    int v20 = malloc_type_posix_memalign((void **)memptr, v19, 2 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20) {
      sub_215E0D744(v20, v19, 2 * (v14 * HIDWORD(v5)));
    }
    uint64_t v21 = *(void *)memptr;
    int v13 = v23;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (v13) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = v7;
  }
  *(void *)a2 = &unk_26C6640E0;
  *(void *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = 2 * (v14 * HIDWORD(v5));
  *(void *)(a2 + 72) = v21;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v19;
  *(void *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = (2 * v9) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a2 + 108) = 2 * HIDWORD(v5);
}

double sub_215D95DBC@<D0>(_DWORD *a1@<X1>, const __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)int v24 = 4;
  *(void *)&v24[4] = v5;
  uint64_t v6 = 4 * (v5 != 0);
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)int v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)int v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 4) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 4);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0) {
    uint64_t v14 = 2;
  }
  else {
    uint64_t v14 = 2 * v7;
  }
  unint64_t v15 = (uint64_t *)sub_215DA9D40((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C6640E0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_215D95F54@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  unint64_t v4 = *(void *)(a1 + 32);
  if (v3) {
    uint64_t v5 = 0;
  }
  *(void *)&v23[4] = v5;
  unint64_t v6 = HIDWORD(v4);
  *(_DWORD *)int v23 = 4;
  unint64_t v7 = *(void *)v23;
  *(_DWORD *)int v23 = 1;
  *(_DWORD *)&v23[4] = v4;
  uint64_t v8 = *(void *)v23;
  *(void *)int v23 = v7;
  *(void *)&v23[12] = v8;
  *(_DWORD *)&v23[20] = HIDWORD(v4);
  *(void *)&v23[24] = v5;
  *(void *)&long long v24 = v4;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  uint64_t v21 = v8;
  int v22 = HIDWORD(v4);
  if (HIDWORD(v7)) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  BOOL v10 = v9 || HIDWORD(v5) == 0;
  if (v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = v7;
  }
  unint64_t v19 = v11;
  if (v10) {
    int v12 = 0;
  }
  else {
    int v12 = HIDWORD(v5);
  }
  int v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0) {
    uint64_t v13 = 2;
  }
  else {
    uint64_t v13 = 2 * v6;
  }
  uint64_t v14 = (uint64_t *)sub_215DAA448((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  long long v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(void *)a2 = &unk_26C664160;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v24;
  uint64_t v16 = *v14;
  *(void *)(a2 + 56) = v25;
  *(void *)(a2 + 64) = v16;
  uint64_t v17 = v26[2];
  *(void *)(a2 + 72) = v26[1];
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v17;
  *(void *)(a2 + 104) = v28;
  double result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

double sub_215D960D0@<D0>(_DWORD *a1@<X1>, _WORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)long long v24 = 4;
  *(void *)&v24[4] = v5;
  uint64_t v6 = 4 * (v5 != 0);
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)long long v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)long long v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 4) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 4);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0) {
    uint64_t v14 = 2;
  }
  else {
    uint64_t v14 = 2 * v7;
  }
  long long v15 = (uint64_t *)sub_215DAA448((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C664160;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_215D96268@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v3 = *a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)a1;
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)int v23 = 4;
  *(void *)&v23[4] = v4;
  uint64_t v5 = 4 * (v4 != 0);
  LODWORD(v6) = v5 * v4;
  unint64_t v7 = HIDWORD(v4);
  if (HIDWORD(v4)) {
    unint64_t v6 = v6;
  }
  else {
    unint64_t v6 = 0;
  }
  unint64_t v8 = v5 & 0x3FFFFFFFFLL | ((unint64_t)(v6 >> 2) << 34);
  *(_DWORD *)int v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  uint64_t v9 = *(void *)v23;
  *(void *)int v23 = __PAIR64__(v4, 4);
  *(_DWORD *)&unsigned __int8 v23[8] = HIDWORD(v4);
  *(void *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(void *)&v23[24] = v4;
  *(void *)&long long v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  uint64_t v21 = v9;
  int v22 = v6;
  if (__PAIR64__(v4, 4) >> 32) {
    BOOL v10 = HIDWORD(v4) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = __PAIR64__(v4, 4);
  }
  unint64_t v19 = v11;
  if (v10) {
    int v12 = 0;
  }
  else {
    int v12 = v7;
  }
  int v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0) {
    uint64_t v13 = 2;
  }
  else {
    uint64_t v13 = 2 * v6;
  }
  uint64_t v14 = (uint64_t *)sub_215DAA448((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  long long v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(void *)a2 = &unk_26C664160;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v24;
  uint64_t v16 = *v14;
  *(void *)(a2 + 56) = v25;
  *(void *)(a2 + 64) = v16;
  uint64_t v17 = v26[2];
  *(void *)(a2 + 72) = v26[1];
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v17;
  *(void *)(a2 + 104) = v28;
  double result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

void sub_215D96400(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 4;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  unint64_t v15 = 3;
  if (((4 * v10) & (4 * v10 - 1)) == 0) {
    unint64_t v15 = 4 * v10 - 1;
  }
  unint64_t v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  unint64_t v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8) {
    size_t v19 = v18 + 1;
  }
  else {
    size_t v19 = 8;
  }
  if (v14 * HIDWORD(v5))
  {
    int v23 = v13;
    *(void *)memptr = 0;
    int v20 = malloc_type_posix_memalign((void **)memptr, v19, 4 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20) {
      sub_215E0D744(v20, v19, 4 * (v14 * HIDWORD(v5)));
    }
    uint64_t v21 = *(void *)memptr;
    int v13 = v23;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (v13) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = v7;
  }
  *(void *)a2 = &unk_26C6641E0;
  *(void *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = 4 * (v14 * HIDWORD(v5));
  *(void *)(a2 + 72) = v21;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v19;
  *(void *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a2 + 108) = 4 * HIDWORD(v5);
}

double sub_215D965D0@<D0>(_DWORD *a1@<X1>, const float *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)long long v24 = 4;
  *(void *)&v24[4] = v5;
  uint64_t v6 = 4 * (v5 != 0);
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)long long v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)long long v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 4) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 4);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((4 * v7) & (4 * v7 - 1)) != 0) {
    uint64_t v14 = 4;
  }
  else {
    uint64_t v14 = 4 * v7;
  }
  unint64_t v15 = (uint64_t *)sub_215DAAA28((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C6641E0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_215D96764(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 3;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  unint64_t v15 = v10 - 1;
  uint64_t v16 = (v14 * HIDWORD(v5));
  if ((v10 & (v10 - 1)) != 0) {
    unint64_t v15 = 0;
  }
  unint64_t v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  unint64_t v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8) {
    size_t v20 = v19 + 1;
  }
  else {
    size_t v20 = 8;
  }
  if (v16)
  {
    int v24 = v13;
    *(void *)memptr = 0;
    int v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v21) {
      sub_215E0D744(v21, v20, (v14 * HIDWORD(v5)));
    }
    uint64_t v22 = *(void *)memptr;
    int v13 = v24;
  }
  else
  {
    uint64_t v22 = 0;
  }
  *(void *)a2 = &unk_26C664260;
  *(void *)(a2 + 8) = v7;
  if (v13) {
    unint64_t v23 = 0;
  }
  else {
    unint64_t v23 = v7;
  }
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = v16;
  *(void *)(a2 + 72) = v22;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v20;
  *(void *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 108) = HIDWORD(v5);
}

double sub_215D9691C@<D0>(_DWORD *a1@<X1>, unsigned char *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)int v24 = 3;
  *(void *)&v24[4] = v5;
  if (v5) {
    uint64_t v6 = 3;
  }
  else {
    uint64_t v6 = 0;
  }
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v9 = v6 | (v7 << 32);
  *(_DWORD *)int v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)int v24 = __PAIR64__(v5, 3);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 3) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 3);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if ((v7 & (v7 - 1)) != 0) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v7;
  }
  unint64_t v15 = sub_215DA9874(v27, (unsigned int *)&v20, (uint64_t)&v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C664260;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  size_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  size_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_215D96AA4(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v3 = *a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v4 = *(void *)a1;
  if (v3) {
    uint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 3;
  *(void *)&memptr[4] = v4;
  uint64_t v5 = v4;
  if (v4) {
    uint64_t v6 = 3;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = HIDWORD(*(void *)&memptr[4]);
  if (HIDWORD(*(void *)&memptr[4])) {
    uint64_t v8 = (v6 * *(_DWORD *)&memptr[4]);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = v6 | (v8 << 32);
  unint64_t v10 = __PAIR64__(*(unsigned int *)&memptr[4], 3);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v9;
  uint64_t v11 = *(void *)memptr;
  if (__PAIR64__(v5, 3) >> 32) {
    BOOL v12 = v7 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = v7;
  }
  unint64_t v15 = v8 - 1;
  uint64_t v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0) {
    unint64_t v15 = 0;
  }
  unint64_t v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  unint64_t v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8) {
    size_t v20 = v19 + 1;
  }
  else {
    size_t v20 = 8;
  }
  if (v16)
  {
    int v24 = v13;
    *(void *)memptr = 0;
    int v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21) {
      sub_215E0D744(v21, v20, (v14 * v8));
    }
    uint64_t v22 = *(void *)memptr;
    int v13 = v24;
  }
  else
  {
    uint64_t v22 = 0;
  }
  *(void *)a2 = &unk_26C664260;
  *(void *)(a2 + 8) = v10;
  if (v13) {
    unint64_t v23 = 0;
  }
  else {
    unint64_t v23 = v10;
  }
  *(_DWORD *)(a2 + 16) = v7;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(void *)(a2 + 32) = v5;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = v16;
  *(void *)(a2 + 72) = v22;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v20;
  *(void *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

void sub_215D96C70(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 3;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  if (((2 * v10) & (2 * v10 - 1)) != 0) {
    unint64_t v15 = 1;
  }
  else {
    unint64_t v15 = 2 * v10 - 1;
  }
  unint64_t v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  unint64_t v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8) {
    size_t v19 = v18 + 1;
  }
  else {
    size_t v19 = 8;
  }
  if (v14 * HIDWORD(v5))
  {
    int v23 = v13;
    *(void *)memptr = 0;
    int v20 = malloc_type_posix_memalign((void **)memptr, v19, 2 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20) {
      sub_215E0D744(v20, v19, 2 * (v14 * HIDWORD(v5)));
    }
    uint64_t v21 = *(void *)memptr;
    int v13 = v23;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (v13) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = v7;
  }
  *(void *)a2 = &unk_26C6642E0;
  *(void *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = 2 * (v14 * HIDWORD(v5));
  *(void *)(a2 + 72) = v21;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v19;
  *(void *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = (2 * v9) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a2 + 108) = 2 * HIDWORD(v5);
}

double sub_215D96E3C@<D0>(_DWORD *a1@<X1>, const __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)int v24 = 3;
  *(void *)&v24[4] = v5;
  if (v5) {
    uint64_t v6 = 3;
  }
  else {
    uint64_t v6 = 0;
  }
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v9 = v6 | (v7 << 32);
  *(_DWORD *)int v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)int v24 = __PAIR64__(v5, 3);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 3) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 3);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0) {
    uint64_t v14 = 2;
  }
  else {
    uint64_t v14 = 2 * v7;
  }
  unint64_t v15 = (uint64_t *)sub_215DA9D40((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C6642E0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_215D96FCC@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  unint64_t v4 = *(void *)(a1 + 32);
  if (v3) {
    uint64_t v5 = 0;
  }
  *(void *)&v23[4] = v5;
  unint64_t v6 = HIDWORD(v4);
  *(_DWORD *)int v23 = 3;
  unint64_t v7 = *(void *)v23;
  *(_DWORD *)int v23 = 1;
  *(_DWORD *)&v23[4] = v4;
  uint64_t v8 = *(void *)v23;
  *(void *)int v23 = v7;
  *(void *)&v23[12] = v8;
  *(_DWORD *)&v23[20] = HIDWORD(v4);
  *(void *)&v23[24] = v5;
  *(void *)&long long v24 = v4;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  uint64_t v21 = v8;
  int v22 = HIDWORD(v4);
  if (HIDWORD(v7)) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  BOOL v10 = v9 || HIDWORD(v5) == 0;
  if (v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = v7;
  }
  unint64_t v19 = v11;
  if (v10) {
    int v12 = 0;
  }
  else {
    int v12 = HIDWORD(v5);
  }
  int v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0) {
    uint64_t v13 = 2;
  }
  else {
    uint64_t v13 = 2 * v6;
  }
  uint64_t v14 = (uint64_t *)sub_215DAA448((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  long long v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(void *)a2 = &unk_26C664360;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v24;
  uint64_t v16 = *v14;
  *(void *)(a2 + 56) = v25;
  *(void *)(a2 + 64) = v16;
  uint64_t v17 = v26[2];
  *(void *)(a2 + 72) = v26[1];
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v17;
  *(void *)(a2 + 104) = v28;
  double result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

double sub_215D97148@<D0>(_DWORD *a1@<X1>, _WORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)long long v24 = 3;
  *(void *)&v24[4] = v5;
  if (v5) {
    uint64_t v6 = 3;
  }
  else {
    uint64_t v6 = 0;
  }
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v9 = v6 | (v7 << 32);
  *(_DWORD *)long long v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)long long v24 = __PAIR64__(v5, 3);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 3) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 3);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0) {
    uint64_t v14 = 2;
  }
  else {
    uint64_t v14 = 2 * v7;
  }
  long long v15 = (uint64_t *)sub_215DAA448((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C664360;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_215D972D8@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v3 = *a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)a1;
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)int v23 = 3;
  *(void *)&v23[4] = v4;
  if (v4) {
    uint64_t v5 = 3;
  }
  else {
    uint64_t v5 = 0;
  }
  LODWORD(v6) = v5 * v4;
  unint64_t v7 = HIDWORD(v4);
  if (HIDWORD(v4)) {
    uint64_t v6 = v6;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v8 = v5 | (v6 << 32);
  *(_DWORD *)int v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  uint64_t v9 = *(void *)v23;
  *(void *)int v23 = __PAIR64__(v4, 3);
  *(_DWORD *)&unsigned __int8 v23[8] = HIDWORD(v4);
  *(void *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(void *)&v23[24] = v4;
  *(void *)&long long v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  uint64_t v21 = v9;
  int v22 = v6;
  if (__PAIR64__(v4, 3) >> 32) {
    BOOL v10 = HIDWORD(v4) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = __PAIR64__(v4, 3);
  }
  unint64_t v19 = v11;
  if (v10) {
    int v12 = 0;
  }
  else {
    int v12 = v7;
  }
  int v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0) {
    uint64_t v13 = 2;
  }
  else {
    uint64_t v13 = 2 * v6;
  }
  uint64_t v14 = (uint64_t *)sub_215DAA448((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  long long v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(void *)a2 = &unk_26C664360;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v24;
  uint64_t v16 = *v14;
  *(void *)(a2 + 56) = v25;
  *(void *)(a2 + 64) = v16;
  uint64_t v17 = v26[2];
  *(void *)(a2 + 72) = v26[1];
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v17;
  *(void *)(a2 + 104) = v28;
  double result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

void sub_215D97468(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 3;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  if (((4 * v10) & (4 * v10 - 1)) != 0) {
    unint64_t v15 = 3;
  }
  else {
    unint64_t v15 = 4 * v10 - 1;
  }
  unint64_t v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  unint64_t v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8) {
    size_t v19 = v18 + 1;
  }
  else {
    size_t v19 = 8;
  }
  if (v14 * HIDWORD(v5))
  {
    int v23 = v13;
    *(void *)memptr = 0;
    int v20 = malloc_type_posix_memalign((void **)memptr, v19, 4 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20) {
      sub_215E0D744(v20, v19, 4 * (v14 * HIDWORD(v5)));
    }
    uint64_t v21 = *(void *)memptr;
    int v13 = v23;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (v13) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = v7;
  }
  *(void *)a2 = &unk_26C6643E0;
  *(void *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = 4 * (v14 * HIDWORD(v5));
  *(void *)(a2 + 72) = v21;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v19;
  *(void *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a2 + 108) = 4 * HIDWORD(v5);
}

double sub_215D97634@<D0>(_DWORD *a1@<X1>, const float *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)long long v24 = 3;
  *(void *)&v24[4] = v5;
  if (v5) {
    uint64_t v6 = 3;
  }
  else {
    uint64_t v6 = 0;
  }
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v9 = v6 | (v7 << 32);
  *(_DWORD *)long long v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)long long v24 = __PAIR64__(v5, 3);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 3) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 3);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((4 * v7) & (4 * v7 - 1)) != 0) {
    uint64_t v14 = 4;
  }
  else {
    uint64_t v14 = 4 * v7;
  }
  unint64_t v15 = (uint64_t *)sub_215DAAA28((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C6643E0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_215D977C4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 3;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  unint64_t v15 = v10 - 1;
  uint64_t v16 = (v14 * HIDWORD(v5));
  if ((v10 & (v10 - 1)) != 0) {
    unint64_t v15 = 0;
  }
  unint64_t v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  unint64_t v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8) {
    size_t v20 = v19 + 1;
  }
  else {
    size_t v20 = 8;
  }
  if (v16)
  {
    int v24 = v13;
    *(void *)memptr = 0;
    int v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v21) {
      sub_215E0D744(v21, v20, (v14 * HIDWORD(v5)));
    }
    uint64_t v22 = *(void *)memptr;
    int v13 = v24;
  }
  else
  {
    uint64_t v22 = 0;
  }
  *(void *)a2 = &unk_26C664460;
  *(void *)(a2 + 8) = v7;
  if (v13) {
    unint64_t v23 = 0;
  }
  else {
    unint64_t v23 = v7;
  }
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = v16;
  *(void *)(a2 + 72) = v22;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v20;
  *(void *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 108) = HIDWORD(v5);
}

double sub_215D9797C@<D0>(_DWORD *a1@<X1>, unsigned char *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)int v24 = 3;
  *(void *)&v24[4] = v5;
  if (v5) {
    uint64_t v6 = 3;
  }
  else {
    uint64_t v6 = 0;
  }
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v9 = v6 | (v7 << 32);
  *(_DWORD *)int v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)int v24 = __PAIR64__(v5, 3);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 3) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 3);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if ((v7 & (v7 - 1)) != 0) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v7;
  }
  unint64_t v15 = sub_215DA9874(v27, (unsigned int *)&v20, (uint64_t)&v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C664460;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  size_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  size_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_215D97B04(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v3 = *a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v4 = *(void *)a1;
  if (v3) {
    uint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 3;
  *(void *)&memptr[4] = v4;
  uint64_t v5 = v4;
  if (v4) {
    uint64_t v6 = 3;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = HIDWORD(*(void *)&memptr[4]);
  if (HIDWORD(*(void *)&memptr[4])) {
    uint64_t v8 = (v6 * *(_DWORD *)&memptr[4]);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = v6 | (v8 << 32);
  unint64_t v10 = __PAIR64__(*(unsigned int *)&memptr[4], 3);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v9;
  uint64_t v11 = *(void *)memptr;
  if (__PAIR64__(v5, 3) >> 32) {
    BOOL v12 = v7 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = v7;
  }
  unint64_t v15 = v8 - 1;
  uint64_t v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0) {
    unint64_t v15 = 0;
  }
  unint64_t v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  unint64_t v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8) {
    size_t v20 = v19 + 1;
  }
  else {
    size_t v20 = 8;
  }
  if (v16)
  {
    int v24 = v13;
    *(void *)memptr = 0;
    int v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21) {
      sub_215E0D744(v21, v20, (v14 * v8));
    }
    uint64_t v22 = *(void *)memptr;
    int v13 = v24;
  }
  else
  {
    uint64_t v22 = 0;
  }
  *(void *)a2 = &unk_26C664460;
  *(void *)(a2 + 8) = v10;
  if (v13) {
    unint64_t v23 = 0;
  }
  else {
    unint64_t v23 = v10;
  }
  *(_DWORD *)(a2 + 16) = v7;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(void *)(a2 + 32) = v5;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = v16;
  *(void *)(a2 + 72) = v22;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v20;
  *(void *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

void sub_215D97CD0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 3;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  if (((2 * v10) & (2 * v10 - 1)) != 0) {
    unint64_t v15 = 1;
  }
  else {
    unint64_t v15 = 2 * v10 - 1;
  }
  unint64_t v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  unint64_t v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8) {
    size_t v19 = v18 + 1;
  }
  else {
    size_t v19 = 8;
  }
  if (v14 * HIDWORD(v5))
  {
    int v23 = v13;
    *(void *)memptr = 0;
    int v20 = malloc_type_posix_memalign((void **)memptr, v19, 2 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20) {
      sub_215E0D744(v20, v19, 2 * (v14 * HIDWORD(v5)));
    }
    uint64_t v21 = *(void *)memptr;
    int v13 = v23;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (v13) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = v7;
  }
  *(void *)a2 = &unk_26C6644E0;
  *(void *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = 2 * (v14 * HIDWORD(v5));
  *(void *)(a2 + 72) = v21;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v19;
  *(void *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = (2 * v9) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a2 + 108) = 2 * HIDWORD(v5);
}

double sub_215D97E9C@<D0>(_DWORD *a1@<X1>, const __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)int v24 = 3;
  *(void *)&v24[4] = v5;
  if (v5) {
    uint64_t v6 = 3;
  }
  else {
    uint64_t v6 = 0;
  }
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v9 = v6 | (v7 << 32);
  *(_DWORD *)int v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)int v24 = __PAIR64__(v5, 3);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 3) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 3);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0) {
    uint64_t v14 = 2;
  }
  else {
    uint64_t v14 = 2 * v7;
  }
  unint64_t v15 = (uint64_t *)sub_215DA9D40((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C6644E0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_215D9802C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  unint64_t v4 = *(void *)(a1 + 32);
  if (v3) {
    uint64_t v5 = 0;
  }
  *(void *)&v23[4] = v5;
  unint64_t v6 = HIDWORD(v4);
  *(_DWORD *)int v23 = 3;
  unint64_t v7 = *(void *)v23;
  *(_DWORD *)int v23 = 1;
  *(_DWORD *)&v23[4] = v4;
  uint64_t v8 = *(void *)v23;
  *(void *)int v23 = v7;
  *(void *)&v23[12] = v8;
  *(_DWORD *)&v23[20] = HIDWORD(v4);
  *(void *)&v23[24] = v5;
  *(void *)&long long v24 = v4;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  uint64_t v21 = v8;
  int v22 = HIDWORD(v4);
  if (HIDWORD(v7)) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  BOOL v10 = v9 || HIDWORD(v5) == 0;
  if (v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = v7;
  }
  unint64_t v19 = v11;
  if (v10) {
    int v12 = 0;
  }
  else {
    int v12 = HIDWORD(v5);
  }
  int v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0) {
    uint64_t v13 = 2;
  }
  else {
    uint64_t v13 = 2 * v6;
  }
  uint64_t v14 = (uint64_t *)sub_215DAA448((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  long long v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(void *)a2 = &unk_26C664560;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v24;
  uint64_t v16 = *v14;
  *(void *)(a2 + 56) = v25;
  *(void *)(a2 + 64) = v16;
  uint64_t v17 = v26[2];
  *(void *)(a2 + 72) = v26[1];
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v17;
  *(void *)(a2 + 104) = v28;
  double result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

double sub_215D981A8@<D0>(_DWORD *a1@<X1>, _WORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)long long v24 = 3;
  *(void *)&v24[4] = v5;
  if (v5) {
    uint64_t v6 = 3;
  }
  else {
    uint64_t v6 = 0;
  }
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v9 = v6 | (v7 << 32);
  *(_DWORD *)long long v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)long long v24 = __PAIR64__(v5, 3);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 3) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 3);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0) {
    uint64_t v14 = 2;
  }
  else {
    uint64_t v14 = 2 * v7;
  }
  long long v15 = (uint64_t *)sub_215DAA448((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C664560;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_215D98338@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v3 = *a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)a1;
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)int v23 = 3;
  *(void *)&v23[4] = v4;
  if (v4) {
    uint64_t v5 = 3;
  }
  else {
    uint64_t v5 = 0;
  }
  LODWORD(v6) = v5 * v4;
  unint64_t v7 = HIDWORD(v4);
  if (HIDWORD(v4)) {
    uint64_t v6 = v6;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v8 = v5 | (v6 << 32);
  *(_DWORD *)int v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  uint64_t v9 = *(void *)v23;
  *(void *)int v23 = __PAIR64__(v4, 3);
  *(_DWORD *)&unsigned __int8 v23[8] = HIDWORD(v4);
  *(void *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(void *)&v23[24] = v4;
  *(void *)&long long v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  uint64_t v21 = v9;
  int v22 = v6;
  if (__PAIR64__(v4, 3) >> 32) {
    BOOL v10 = HIDWORD(v4) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = __PAIR64__(v4, 3);
  }
  unint64_t v19 = v11;
  if (v10) {
    int v12 = 0;
  }
  else {
    int v12 = v7;
  }
  int v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0) {
    uint64_t v13 = 2;
  }
  else {
    uint64_t v13 = 2 * v6;
  }
  uint64_t v14 = (uint64_t *)sub_215DAA448((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  long long v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(void *)a2 = &unk_26C664560;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v24;
  uint64_t v16 = *v14;
  *(void *)(a2 + 56) = v25;
  *(void *)(a2 + 64) = v16;
  uint64_t v17 = v26[2];
  *(void *)(a2 + 72) = v26[1];
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v17;
  *(void *)(a2 + 104) = v28;
  double result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

void sub_215D984C8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 3;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  if (((4 * v10) & (4 * v10 - 1)) != 0) {
    unint64_t v15 = 3;
  }
  else {
    unint64_t v15 = 4 * v10 - 1;
  }
  unint64_t v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  unint64_t v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8) {
    size_t v19 = v18 + 1;
  }
  else {
    size_t v19 = 8;
  }
  if (v14 * HIDWORD(v5))
  {
    int v23 = v13;
    *(void *)memptr = 0;
    int v20 = malloc_type_posix_memalign((void **)memptr, v19, 4 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20) {
      sub_215E0D744(v20, v19, 4 * (v14 * HIDWORD(v5)));
    }
    uint64_t v21 = *(void *)memptr;
    int v13 = v23;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (v13) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = v7;
  }
  *(void *)a2 = &unk_26C6645E0;
  *(void *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = 4 * (v14 * HIDWORD(v5));
  *(void *)(a2 + 72) = v21;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v19;
  *(void *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a2 + 108) = 4 * HIDWORD(v5);
}

double sub_215D98694@<D0>(_DWORD *a1@<X1>, const float *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)long long v24 = 3;
  *(void *)&v24[4] = v5;
  if (v5) {
    uint64_t v6 = 3;
  }
  else {
    uint64_t v6 = 0;
  }
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v9 = v6 | (v7 << 32);
  *(_DWORD *)long long v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)long long v24 = __PAIR64__(v5, 3);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 3) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 3);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((4 * v7) & (4 * v7 - 1)) != 0) {
    uint64_t v14 = 4;
  }
  else {
    uint64_t v14 = 4 * v7;
  }
  unint64_t v15 = (uint64_t *)sub_215DAAA28((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C6645E0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_215D98824(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 4;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  unint64_t v15 = v10 - 1;
  uint64_t v16 = (v14 * HIDWORD(v5));
  if ((v10 & (v10 - 1)) != 0) {
    unint64_t v15 = 0;
  }
  unint64_t v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  unint64_t v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8) {
    size_t v20 = v19 + 1;
  }
  else {
    size_t v20 = 8;
  }
  if (v16)
  {
    int v24 = v13;
    *(void *)memptr = 0;
    int v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v21) {
      sub_215E0D744(v21, v20, (v14 * HIDWORD(v5)));
    }
    uint64_t v22 = *(void *)memptr;
    int v13 = v24;
  }
  else
  {
    uint64_t v22 = 0;
  }
  *(void *)a2 = &unk_26C664660;
  *(void *)(a2 + 8) = v7;
  if (v13) {
    unint64_t v23 = 0;
  }
  else {
    unint64_t v23 = v7;
  }
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = v16;
  *(void *)(a2 + 72) = v22;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v20;
  *(void *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 108) = HIDWORD(v5);
}

double sub_215D989DC@<D0>(_DWORD *a1@<X1>, unsigned char *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)int v24 = 4;
  *(void *)&v24[4] = v5;
  uint64_t v6 = 4 * (v5 != 0);
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)int v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)int v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 4) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 4);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if ((v7 & (v7 - 1)) != 0) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v7;
  }
  unint64_t v15 = sub_215DA9874(v27, (unsigned int *)&v20, (uint64_t)&v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C664660;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  size_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  size_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_215D98B6C(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v3 = *a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)a1;
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 4;
  *(void *)&memptr[4] = v4;
  unint64_t v5 = v4;
  uint64_t v6 = 4 * (v4 != 0);
  unsigned int v7 = v6 * v4;
  if (HIDWORD(v5)) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = 0;
  }
  unint64_t v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v8 >> 2) << 34);
  unint64_t v10 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v9;
  uint64_t v11 = *(void *)memptr;
  if (__PAIR64__(v5, 4) >> 32) {
    BOOL v12 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v12 = 1;
  }
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v5);
  }
  unint64_t v15 = v8 - 1;
  uint64_t v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0) {
    unint64_t v15 = 0;
  }
  unint64_t v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  unint64_t v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8) {
    size_t v20 = v19 + 1;
  }
  else {
    size_t v20 = 8;
  }
  if (v16)
  {
    int v24 = v13;
    *(void *)memptr = 0;
    int v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21) {
      sub_215E0D744(v21, v20, (v14 * v8));
    }
    uint64_t v22 = *(void *)memptr;
    int v13 = v24;
  }
  else
  {
    uint64_t v22 = 0;
  }
  *(void *)a2 = &unk_26C664660;
  *(void *)(a2 + 8) = v10;
  if (v13) {
    unint64_t v23 = 0;
  }
  else {
    unint64_t v23 = v10;
  }
  *(_DWORD *)(a2 + 16) = HIDWORD(v5);
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(void *)(a2 + 32) = v5;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = v16;
  *(void *)(a2 + 72) = v22;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v20;
  *(void *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

void sub_215D98D40(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 4;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  if (((2 * v10) & (2 * v10 - 1)) != 0) {
    unint64_t v15 = 1;
  }
  else {
    unint64_t v15 = 2 * v10 - 1;
  }
  unint64_t v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  unint64_t v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8) {
    size_t v19 = v18 + 1;
  }
  else {
    size_t v19 = 8;
  }
  if (v14 * HIDWORD(v5))
  {
    int v23 = v13;
    *(void *)memptr = 0;
    int v20 = malloc_type_posix_memalign((void **)memptr, v19, 2 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20) {
      sub_215E0D744(v20, v19, 2 * (v14 * HIDWORD(v5)));
    }
    uint64_t v21 = *(void *)memptr;
    int v13 = v23;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (v13) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = v7;
  }
  *(void *)a2 = &unk_26C6646E0;
  *(void *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = 2 * (v14 * HIDWORD(v5));
  *(void *)(a2 + 72) = v21;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v19;
  *(void *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = (2 * v9) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a2 + 108) = 2 * HIDWORD(v5);
}

double sub_215D98F0C@<D0>(_DWORD *a1@<X1>, const __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)int v24 = 4;
  *(void *)&v24[4] = v5;
  uint64_t v6 = 4 * (v5 != 0);
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)int v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)int v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 4) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 4);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0) {
    uint64_t v14 = 2;
  }
  else {
    uint64_t v14 = 2 * v7;
  }
  unint64_t v15 = (uint64_t *)sub_215DA9D40((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C6646E0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_215D990A4@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  unint64_t v4 = *(void *)(a1 + 32);
  if (v3) {
    uint64_t v5 = 0;
  }
  *(void *)&v23[4] = v5;
  unint64_t v6 = HIDWORD(v4);
  *(_DWORD *)int v23 = 4;
  unint64_t v7 = *(void *)v23;
  *(_DWORD *)int v23 = 1;
  *(_DWORD *)&v23[4] = v4;
  uint64_t v8 = *(void *)v23;
  *(void *)int v23 = v7;
  *(void *)&v23[12] = v8;
  *(_DWORD *)&v23[20] = HIDWORD(v4);
  *(void *)&v23[24] = v5;
  *(void *)&long long v24 = v4;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  uint64_t v21 = v8;
  int v22 = HIDWORD(v4);
  if (HIDWORD(v7)) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  BOOL v10 = v9 || HIDWORD(v5) == 0;
  if (v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = v7;
  }
  unint64_t v19 = v11;
  if (v10) {
    int v12 = 0;
  }
  else {
    int v12 = HIDWORD(v5);
  }
  int v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0) {
    uint64_t v13 = 2;
  }
  else {
    uint64_t v13 = 2 * v6;
  }
  uint64_t v14 = (uint64_t *)sub_215DAA448((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  long long v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(void *)a2 = &unk_26C664760;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v24;
  uint64_t v16 = *v14;
  *(void *)(a2 + 56) = v25;
  *(void *)(a2 + 64) = v16;
  uint64_t v17 = v26[2];
  *(void *)(a2 + 72) = v26[1];
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v17;
  *(void *)(a2 + 104) = v28;
  double result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

double sub_215D99220@<D0>(_DWORD *a1@<X1>, _WORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)long long v24 = 4;
  *(void *)&v24[4] = v5;
  uint64_t v6 = 4 * (v5 != 0);
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)long long v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)long long v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 4) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 4);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0) {
    uint64_t v14 = 2;
  }
  else {
    uint64_t v14 = 2 * v7;
  }
  long long v15 = (uint64_t *)sub_215DAA448((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C664760;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_215D993B8@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v3 = *a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)a1;
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)int v23 = 4;
  *(void *)&v23[4] = v4;
  uint64_t v5 = 4 * (v4 != 0);
  LODWORD(v6) = v5 * v4;
  unint64_t v7 = HIDWORD(v4);
  if (HIDWORD(v4)) {
    unint64_t v6 = v6;
  }
  else {
    unint64_t v6 = 0;
  }
  unint64_t v8 = v5 & 0x3FFFFFFFFLL | ((unint64_t)(v6 >> 2) << 34);
  *(_DWORD *)int v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  uint64_t v9 = *(void *)v23;
  *(void *)int v23 = __PAIR64__(v4, 4);
  *(_DWORD *)&unsigned __int8 v23[8] = HIDWORD(v4);
  *(void *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(void *)&v23[24] = v4;
  *(void *)&long long v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  uint64_t v21 = v9;
  int v22 = v6;
  if (__PAIR64__(v4, 4) >> 32) {
    BOOL v10 = HIDWORD(v4) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = __PAIR64__(v4, 4);
  }
  unint64_t v19 = v11;
  if (v10) {
    int v12 = 0;
  }
  else {
    int v12 = v7;
  }
  int v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0) {
    uint64_t v13 = 2;
  }
  else {
    uint64_t v13 = 2 * v6;
  }
  uint64_t v14 = (uint64_t *)sub_215DAA448((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  long long v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(void *)a2 = &unk_26C664760;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v24;
  uint64_t v16 = *v14;
  *(void *)(a2 + 56) = v25;
  *(void *)(a2 + 64) = v16;
  uint64_t v17 = v26[2];
  *(void *)(a2 + 72) = v26[1];
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v17;
  *(void *)(a2 + 104) = v28;
  double result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

void sub_215D99550(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 4;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  unint64_t v15 = 3;
  if (((4 * v10) & (4 * v10 - 1)) == 0) {
    unint64_t v15 = 4 * v10 - 1;
  }
  unint64_t v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  unint64_t v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8) {
    size_t v19 = v18 + 1;
  }
  else {
    size_t v19 = 8;
  }
  if (v14 * HIDWORD(v5))
  {
    int v23 = v13;
    *(void *)memptr = 0;
    int v20 = malloc_type_posix_memalign((void **)memptr, v19, 4 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20) {
      sub_215E0D744(v20, v19, 4 * (v14 * HIDWORD(v5)));
    }
    uint64_t v21 = *(void *)memptr;
    int v13 = v23;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (v13) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = v7;
  }
  *(void *)a2 = &unk_26C6647E0;
  *(void *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = 4 * (v14 * HIDWORD(v5));
  *(void *)(a2 + 72) = v21;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v19;
  *(void *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a2 + 108) = 4 * HIDWORD(v5);
}

double sub_215D99720@<D0>(_DWORD *a1@<X1>, const float *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)long long v24 = 4;
  *(void *)&v24[4] = v5;
  uint64_t v6 = 4 * (v5 != 0);
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)long long v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)long long v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 4) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 4);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((4 * v7) & (4 * v7 - 1)) != 0) {
    uint64_t v14 = 4;
  }
  else {
    uint64_t v14 = 4 * v7;
  }
  unint64_t v15 = (uint64_t *)sub_215DAAA28((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C6647E0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_215D998B4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 4;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  unint64_t v15 = v10 - 1;
  uint64_t v16 = (v14 * HIDWORD(v5));
  if ((v10 & (v10 - 1)) != 0) {
    unint64_t v15 = 0;
  }
  unint64_t v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  unint64_t v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8) {
    size_t v20 = v19 + 1;
  }
  else {
    size_t v20 = 8;
  }
  if (v16)
  {
    int v24 = v13;
    *(void *)memptr = 0;
    int v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v21) {
      sub_215E0D744(v21, v20, (v14 * HIDWORD(v5)));
    }
    uint64_t v22 = *(void *)memptr;
    int v13 = v24;
  }
  else
  {
    uint64_t v22 = 0;
  }
  *(void *)a2 = &unk_26C664860;
  *(void *)(a2 + 8) = v7;
  if (v13) {
    unint64_t v23 = 0;
  }
  else {
    unint64_t v23 = v7;
  }
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = v16;
  *(void *)(a2 + 72) = v22;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v20;
  *(void *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 108) = HIDWORD(v5);
}

double sub_215D99A6C@<D0>(_DWORD *a1@<X1>, unsigned char *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)int v24 = 4;
  *(void *)&v24[4] = v5;
  uint64_t v6 = 4 * (v5 != 0);
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)int v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)int v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 4) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 4);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if ((v7 & (v7 - 1)) != 0) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v7;
  }
  unint64_t v15 = sub_215DA9874(v27, (unsigned int *)&v20, (uint64_t)&v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C664860;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  size_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  size_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_215D99BFC(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v3 = *a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)a1;
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 4;
  *(void *)&memptr[4] = v4;
  unint64_t v5 = v4;
  uint64_t v6 = 4 * (v4 != 0);
  unsigned int v7 = v6 * v4;
  if (HIDWORD(v5)) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = 0;
  }
  unint64_t v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v8 >> 2) << 34);
  unint64_t v10 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v9;
  uint64_t v11 = *(void *)memptr;
  if (__PAIR64__(v5, 4) >> 32) {
    BOOL v12 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v12 = 1;
  }
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v5);
  }
  unint64_t v15 = v8 - 1;
  uint64_t v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0) {
    unint64_t v15 = 0;
  }
  unint64_t v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  unint64_t v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8) {
    size_t v20 = v19 + 1;
  }
  else {
    size_t v20 = 8;
  }
  if (v16)
  {
    int v24 = v13;
    *(void *)memptr = 0;
    int v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21) {
      sub_215E0D744(v21, v20, (v14 * v8));
    }
    uint64_t v22 = *(void *)memptr;
    int v13 = v24;
  }
  else
  {
    uint64_t v22 = 0;
  }
  *(void *)a2 = &unk_26C664860;
  *(void *)(a2 + 8) = v10;
  if (v13) {
    unint64_t v23 = 0;
  }
  else {
    unint64_t v23 = v10;
  }
  *(_DWORD *)(a2 + 16) = HIDWORD(v5);
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(void *)(a2 + 32) = v5;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = v16;
  *(void *)(a2 + 72) = v22;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v20;
  *(void *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

void sub_215D99DD0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 4;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  if (((2 * v10) & (2 * v10 - 1)) != 0) {
    unint64_t v15 = 1;
  }
  else {
    unint64_t v15 = 2 * v10 - 1;
  }
  unint64_t v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  unint64_t v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8) {
    size_t v19 = v18 + 1;
  }
  else {
    size_t v19 = 8;
  }
  if (v14 * HIDWORD(v5))
  {
    int v23 = v13;
    *(void *)memptr = 0;
    int v20 = malloc_type_posix_memalign((void **)memptr, v19, 2 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20) {
      sub_215E0D744(v20, v19, 2 * (v14 * HIDWORD(v5)));
    }
    uint64_t v21 = *(void *)memptr;
    int v13 = v23;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (v13) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = v7;
  }
  *(void *)a2 = &unk_26C6648E0;
  *(void *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = 2 * (v14 * HIDWORD(v5));
  *(void *)(a2 + 72) = v21;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v19;
  *(void *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = (2 * v9) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a2 + 108) = 2 * HIDWORD(v5);
}

double sub_215D99F9C@<D0>(_DWORD *a1@<X1>, const __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)int v24 = 4;
  *(void *)&v24[4] = v5;
  uint64_t v6 = 4 * (v5 != 0);
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)int v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)int v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 4) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 4);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0) {
    uint64_t v14 = 2;
  }
  else {
    uint64_t v14 = 2 * v7;
  }
  unint64_t v15 = (uint64_t *)sub_215DA9D40((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C6648E0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_215D9A134@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  unint64_t v4 = *(void *)(a1 + 32);
  if (v3) {
    uint64_t v5 = 0;
  }
  *(void *)&v23[4] = v5;
  unint64_t v6 = HIDWORD(v4);
  *(_DWORD *)int v23 = 4;
  unint64_t v7 = *(void *)v23;
  *(_DWORD *)int v23 = 1;
  *(_DWORD *)&v23[4] = v4;
  uint64_t v8 = *(void *)v23;
  *(void *)int v23 = v7;
  *(void *)&v23[12] = v8;
  *(_DWORD *)&v23[20] = HIDWORD(v4);
  *(void *)&v23[24] = v5;
  *(void *)&long long v24 = v4;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  uint64_t v21 = v8;
  int v22 = HIDWORD(v4);
  if (HIDWORD(v7)) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  BOOL v10 = v9 || HIDWORD(v5) == 0;
  if (v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = v7;
  }
  unint64_t v19 = v11;
  if (v10) {
    int v12 = 0;
  }
  else {
    int v12 = HIDWORD(v5);
  }
  int v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0) {
    uint64_t v13 = 2;
  }
  else {
    uint64_t v13 = 2 * v6;
  }
  uint64_t v14 = (uint64_t *)sub_215DAA448((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  long long v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(void *)a2 = &unk_26C664960;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v24;
  uint64_t v16 = *v14;
  *(void *)(a2 + 56) = v25;
  *(void *)(a2 + 64) = v16;
  uint64_t v17 = v26[2];
  *(void *)(a2 + 72) = v26[1];
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v17;
  *(void *)(a2 + 104) = v28;
  double result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

double sub_215D9A2B0@<D0>(_DWORD *a1@<X1>, _WORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)long long v24 = 4;
  *(void *)&v24[4] = v5;
  uint64_t v6 = 4 * (v5 != 0);
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)long long v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)long long v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 4) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 4);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0) {
    uint64_t v14 = 2;
  }
  else {
    uint64_t v14 = 2 * v7;
  }
  long long v15 = (uint64_t *)sub_215DAA448((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C664960;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_215D9A448@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v3 = *a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)a1;
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)int v23 = 4;
  *(void *)&v23[4] = v4;
  uint64_t v5 = 4 * (v4 != 0);
  LODWORD(v6) = v5 * v4;
  unint64_t v7 = HIDWORD(v4);
  if (HIDWORD(v4)) {
    unint64_t v6 = v6;
  }
  else {
    unint64_t v6 = 0;
  }
  unint64_t v8 = v5 & 0x3FFFFFFFFLL | ((unint64_t)(v6 >> 2) << 34);
  *(_DWORD *)int v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  uint64_t v9 = *(void *)v23;
  *(void *)int v23 = __PAIR64__(v4, 4);
  *(_DWORD *)&unsigned __int8 v23[8] = HIDWORD(v4);
  *(void *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(void *)&v23[24] = v4;
  *(void *)&long long v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  uint64_t v21 = v9;
  int v22 = v6;
  if (__PAIR64__(v4, 4) >> 32) {
    BOOL v10 = HIDWORD(v4) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = __PAIR64__(v4, 4);
  }
  unint64_t v19 = v11;
  if (v10) {
    int v12 = 0;
  }
  else {
    int v12 = v7;
  }
  int v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0) {
    uint64_t v13 = 2;
  }
  else {
    uint64_t v13 = 2 * v6;
  }
  uint64_t v14 = (uint64_t *)sub_215DAA448((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  long long v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(void *)a2 = &unk_26C664960;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v24;
  uint64_t v16 = *v14;
  *(void *)(a2 + 56) = v25;
  *(void *)(a2 + 64) = v16;
  uint64_t v17 = v26[2];
  *(void *)(a2 + 72) = v26[1];
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v17;
  *(void *)(a2 + 104) = v28;
  double result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

void sub_215D9A5E0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 4;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  unint64_t v15 = 3;
  if (((4 * v10) & (4 * v10 - 1)) == 0) {
    unint64_t v15 = 4 * v10 - 1;
  }
  unint64_t v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  unint64_t v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8) {
    size_t v19 = v18 + 1;
  }
  else {
    size_t v19 = 8;
  }
  if (v14 * HIDWORD(v5))
  {
    int v23 = v13;
    *(void *)memptr = 0;
    int v20 = malloc_type_posix_memalign((void **)memptr, v19, 4 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20) {
      sub_215E0D744(v20, v19, 4 * (v14 * HIDWORD(v5)));
    }
    uint64_t v21 = *(void *)memptr;
    int v13 = v23;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (v13) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = v7;
  }
  *(void *)a2 = &unk_26C6649E0;
  *(void *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = 4 * (v14 * HIDWORD(v5));
  *(void *)(a2 + 72) = v21;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v19;
  *(void *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a2 + 108) = 4 * HIDWORD(v5);
}

double sub_215D9A7B0@<D0>(_DWORD *a1@<X1>, const float *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)long long v24 = 4;
  *(void *)&v24[4] = v5;
  uint64_t v6 = 4 * (v5 != 0);
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)long long v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)long long v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 4) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 4);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((4 * v7) & (4 * v7 - 1)) != 0) {
    uint64_t v14 = 4;
  }
  else {
    uint64_t v14 = 4 * v7;
  }
  unint64_t v15 = (uint64_t *)sub_215DAAA28((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C6649E0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_215D9A944(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 4;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  unint64_t v15 = v10 - 1;
  uint64_t v16 = (v14 * HIDWORD(v5));
  if ((v10 & (v10 - 1)) != 0) {
    unint64_t v15 = 0;
  }
  unint64_t v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  unint64_t v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8) {
    size_t v20 = v19 + 1;
  }
  else {
    size_t v20 = 8;
  }
  if (v16)
  {
    int v24 = v13;
    *(void *)memptr = 0;
    int v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v21) {
      sub_215E0D744(v21, v20, (v14 * HIDWORD(v5)));
    }
    uint64_t v22 = *(void *)memptr;
    int v13 = v24;
  }
  else
  {
    uint64_t v22 = 0;
  }
  *(void *)a2 = &unk_26C664A60;
  *(void *)(a2 + 8) = v7;
  if (v13) {
    unint64_t v23 = 0;
  }
  else {
    unint64_t v23 = v7;
  }
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = v16;
  *(void *)(a2 + 72) = v22;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v20;
  *(void *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 108) = HIDWORD(v5);
}

double sub_215D9AAFC@<D0>(_DWORD *a1@<X1>, unsigned char *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)int v24 = 4;
  *(void *)&v24[4] = v5;
  uint64_t v6 = 4 * (v5 != 0);
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)int v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)int v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 4) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 4);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if ((v7 & (v7 - 1)) != 0) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v7;
  }
  unint64_t v15 = sub_215DA9874(v27, (unsigned int *)&v20, (uint64_t)&v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C664A60;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  size_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  size_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_215D9AC8C(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v3 = *a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)a1;
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 4;
  *(void *)&memptr[4] = v4;
  unint64_t v5 = v4;
  uint64_t v6 = 4 * (v4 != 0);
  unsigned int v7 = v6 * v4;
  if (HIDWORD(v5)) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = 0;
  }
  unint64_t v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v8 >> 2) << 34);
  unint64_t v10 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v9;
  uint64_t v11 = *(void *)memptr;
  if (__PAIR64__(v5, 4) >> 32) {
    BOOL v12 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v12 = 1;
  }
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v5);
  }
  unint64_t v15 = v8 - 1;
  uint64_t v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0) {
    unint64_t v15 = 0;
  }
  unint64_t v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  unint64_t v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8) {
    size_t v20 = v19 + 1;
  }
  else {
    size_t v20 = 8;
  }
  if (v16)
  {
    int v24 = v13;
    *(void *)memptr = 0;
    int v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21) {
      sub_215E0D744(v21, v20, (v14 * v8));
    }
    uint64_t v22 = *(void *)memptr;
    int v13 = v24;
  }
  else
  {
    uint64_t v22 = 0;
  }
  *(void *)a2 = &unk_26C664A60;
  *(void *)(a2 + 8) = v10;
  if (v13) {
    unint64_t v23 = 0;
  }
  else {
    unint64_t v23 = v10;
  }
  *(_DWORD *)(a2 + 16) = HIDWORD(v5);
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(void *)(a2 + 32) = v5;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = v16;
  *(void *)(a2 + 72) = v22;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v20;
  *(void *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

void sub_215D9AE60(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 4;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  if (((2 * v10) & (2 * v10 - 1)) != 0) {
    unint64_t v15 = 1;
  }
  else {
    unint64_t v15 = 2 * v10 - 1;
  }
  unint64_t v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  unint64_t v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8) {
    size_t v19 = v18 + 1;
  }
  else {
    size_t v19 = 8;
  }
  if (v14 * HIDWORD(v5))
  {
    int v23 = v13;
    *(void *)memptr = 0;
    int v20 = malloc_type_posix_memalign((void **)memptr, v19, 2 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20) {
      sub_215E0D744(v20, v19, 2 * (v14 * HIDWORD(v5)));
    }
    uint64_t v21 = *(void *)memptr;
    int v13 = v23;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (v13) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = v7;
  }
  *(void *)a2 = &unk_26C664AE0;
  *(void *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = 2 * (v14 * HIDWORD(v5));
  *(void *)(a2 + 72) = v21;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v19;
  *(void *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = (2 * v9) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a2 + 108) = 2 * HIDWORD(v5);
}

double sub_215D9B02C@<D0>(_DWORD *a1@<X1>, const __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)int v24 = 4;
  *(void *)&v24[4] = v5;
  uint64_t v6 = 4 * (v5 != 0);
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)int v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)int v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 4) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 4);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0) {
    uint64_t v14 = 2;
  }
  else {
    uint64_t v14 = 2 * v7;
  }
  unint64_t v15 = (uint64_t *)sub_215DA9D40((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C664AE0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_215D9B1C4@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  unint64_t v4 = *(void *)(a1 + 32);
  if (v3) {
    uint64_t v5 = 0;
  }
  *(void *)&v23[4] = v5;
  unint64_t v6 = HIDWORD(v4);
  *(_DWORD *)int v23 = 4;
  unint64_t v7 = *(void *)v23;
  *(_DWORD *)int v23 = 1;
  *(_DWORD *)&v23[4] = v4;
  uint64_t v8 = *(void *)v23;
  *(void *)int v23 = v7;
  *(void *)&v23[12] = v8;
  *(_DWORD *)&v23[20] = HIDWORD(v4);
  *(void *)&v23[24] = v5;
  *(void *)&long long v24 = v4;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  uint64_t v21 = v8;
  int v22 = HIDWORD(v4);
  if (HIDWORD(v7)) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  BOOL v10 = v9 || HIDWORD(v5) == 0;
  if (v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = v7;
  }
  unint64_t v19 = v11;
  if (v10) {
    int v12 = 0;
  }
  else {
    int v12 = HIDWORD(v5);
  }
  int v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0) {
    uint64_t v13 = 2;
  }
  else {
    uint64_t v13 = 2 * v6;
  }
  uint64_t v14 = (uint64_t *)sub_215DAA448((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  long long v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(void *)a2 = &unk_26C664B60;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v24;
  uint64_t v16 = *v14;
  *(void *)(a2 + 56) = v25;
  *(void *)(a2 + 64) = v16;
  uint64_t v17 = v26[2];
  *(void *)(a2 + 72) = v26[1];
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v17;
  *(void *)(a2 + 104) = v28;
  double result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

double sub_215D9B340@<D0>(_DWORD *a1@<X1>, _WORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)long long v24 = 4;
  *(void *)&v24[4] = v5;
  uint64_t v6 = 4 * (v5 != 0);
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)long long v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)long long v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 4) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 4);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0) {
    uint64_t v14 = 2;
  }
  else {
    uint64_t v14 = 2 * v7;
  }
  long long v15 = (uint64_t *)sub_215DAA448((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C664B60;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_215D9B4D8@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v3 = *a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)a1;
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)int v23 = 4;
  *(void *)&v23[4] = v4;
  uint64_t v5 = 4 * (v4 != 0);
  LODWORD(v6) = v5 * v4;
  unint64_t v7 = HIDWORD(v4);
  if (HIDWORD(v4)) {
    unint64_t v6 = v6;
  }
  else {
    unint64_t v6 = 0;
  }
  unint64_t v8 = v5 & 0x3FFFFFFFFLL | ((unint64_t)(v6 >> 2) << 34);
  *(_DWORD *)int v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  uint64_t v9 = *(void *)v23;
  *(void *)int v23 = __PAIR64__(v4, 4);
  *(_DWORD *)&unsigned __int8 v23[8] = HIDWORD(v4);
  *(void *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(void *)&v23[24] = v4;
  *(void *)&long long v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  uint64_t v21 = v9;
  int v22 = v6;
  if (__PAIR64__(v4, 4) >> 32) {
    BOOL v10 = HIDWORD(v4) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = __PAIR64__(v4, 4);
  }
  unint64_t v19 = v11;
  if (v10) {
    int v12 = 0;
  }
  else {
    int v12 = v7;
  }
  int v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0) {
    uint64_t v13 = 2;
  }
  else {
    uint64_t v13 = 2 * v6;
  }
  uint64_t v14 = (uint64_t *)sub_215DAA448((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  long long v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(void *)a2 = &unk_26C664B60;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v24;
  uint64_t v16 = *v14;
  *(void *)(a2 + 56) = v25;
  *(void *)(a2 + 64) = v16;
  uint64_t v17 = v26[2];
  *(void *)(a2 + 72) = v26[1];
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v17;
  *(void *)(a2 + 104) = v28;
  double result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

void sub_215D9B670(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 4;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  unint64_t v15 = 3;
  if (((4 * v10) & (4 * v10 - 1)) == 0) {
    unint64_t v15 = 4 * v10 - 1;
  }
  unint64_t v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  unint64_t v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8) {
    size_t v19 = v18 + 1;
  }
  else {
    size_t v19 = 8;
  }
  if (v14 * HIDWORD(v5))
  {
    int v23 = v13;
    *(void *)memptr = 0;
    int v20 = malloc_type_posix_memalign((void **)memptr, v19, 4 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20) {
      sub_215E0D744(v20, v19, 4 * (v14 * HIDWORD(v5)));
    }
    uint64_t v21 = *(void *)memptr;
    int v13 = v23;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (v13) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = v7;
  }
  *(void *)a2 = &unk_26C664BE0;
  *(void *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = 4 * (v14 * HIDWORD(v5));
  *(void *)(a2 + 72) = v21;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v19;
  *(void *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a2 + 108) = 4 * HIDWORD(v5);
}

double sub_215D9B840@<D0>(_DWORD *a1@<X1>, const float *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)long long v24 = 4;
  *(void *)&v24[4] = v5;
  uint64_t v6 = 4 * (v5 != 0);
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)long long v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)long long v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 4) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 4);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((4 * v7) & (4 * v7 - 1)) != 0) {
    uint64_t v14 = 4;
  }
  else {
    uint64_t v14 = 4 * v7;
  }
  unint64_t v15 = (uint64_t *)sub_215DAAA28((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C664BE0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_215D9B9D4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 4;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  unint64_t v15 = v10 - 1;
  uint64_t v16 = (v14 * HIDWORD(v5));
  if ((v10 & (v10 - 1)) != 0) {
    unint64_t v15 = 0;
  }
  unint64_t v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  unint64_t v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8) {
    size_t v20 = v19 + 1;
  }
  else {
    size_t v20 = 8;
  }
  if (v16)
  {
    int v24 = v13;
    *(void *)memptr = 0;
    int v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v21) {
      sub_215E0D744(v21, v20, (v14 * HIDWORD(v5)));
    }
    uint64_t v22 = *(void *)memptr;
    int v13 = v24;
  }
  else
  {
    uint64_t v22 = 0;
  }
  *(void *)a2 = &unk_26C664C60;
  *(void *)(a2 + 8) = v7;
  if (v13) {
    unint64_t v23 = 0;
  }
  else {
    unint64_t v23 = v7;
  }
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = v16;
  *(void *)(a2 + 72) = v22;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v20;
  *(void *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 108) = HIDWORD(v5);
}

double sub_215D9BB8C@<D0>(_DWORD *a1@<X1>, unsigned char *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)int v24 = 4;
  *(void *)&v24[4] = v5;
  uint64_t v6 = 4 * (v5 != 0);
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)int v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)int v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 4) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 4);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if ((v7 & (v7 - 1)) != 0) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v7;
  }
  unint64_t v15 = sub_215DA9874(v27, (unsigned int *)&v20, (uint64_t)&v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C664C60;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  size_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  size_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

void sub_215D9BD1C(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v3 = *a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)a1;
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 4;
  *(void *)&memptr[4] = v4;
  unint64_t v5 = v4;
  uint64_t v6 = 4 * (v4 != 0);
  unsigned int v7 = v6 * v4;
  if (HIDWORD(v5)) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = 0;
  }
  unint64_t v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v8 >> 2) << 34);
  unint64_t v10 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v9;
  uint64_t v11 = *(void *)memptr;
  if (__PAIR64__(v5, 4) >> 32) {
    BOOL v12 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v12 = 1;
  }
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v5);
  }
  unint64_t v15 = v8 - 1;
  uint64_t v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0) {
    unint64_t v15 = 0;
  }
  unint64_t v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  unint64_t v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8) {
    size_t v20 = v19 + 1;
  }
  else {
    size_t v20 = 8;
  }
  if (v16)
  {
    int v24 = v13;
    *(void *)memptr = 0;
    int v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21) {
      sub_215E0D744(v21, v20, (v14 * v8));
    }
    uint64_t v22 = *(void *)memptr;
    int v13 = v24;
  }
  else
  {
    uint64_t v22 = 0;
  }
  *(void *)a2 = &unk_26C664C60;
  *(void *)(a2 + 8) = v10;
  if (v13) {
    unint64_t v23 = 0;
  }
  else {
    unint64_t v23 = v10;
  }
  *(_DWORD *)(a2 + 16) = HIDWORD(v5);
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(void *)(a2 + 32) = v5;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = v16;
  *(void *)(a2 + 72) = v22;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v20;
  *(void *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

void sub_215D9BEF0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 4;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  if (((2 * v10) & (2 * v10 - 1)) != 0) {
    unint64_t v15 = 1;
  }
  else {
    unint64_t v15 = 2 * v10 - 1;
  }
  unint64_t v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  unint64_t v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8) {
    size_t v19 = v18 + 1;
  }
  else {
    size_t v19 = 8;
  }
  if (v14 * HIDWORD(v5))
  {
    int v23 = v13;
    *(void *)memptr = 0;
    int v20 = malloc_type_posix_memalign((void **)memptr, v19, 2 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20) {
      sub_215E0D744(v20, v19, 2 * (v14 * HIDWORD(v5)));
    }
    uint64_t v21 = *(void *)memptr;
    int v13 = v23;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (v13) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = v7;
  }
  *(void *)a2 = &unk_26C664CE0;
  *(void *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = 2 * (v14 * HIDWORD(v5));
  *(void *)(a2 + 72) = v21;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v19;
  *(void *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = (2 * v9) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a2 + 108) = 2 * HIDWORD(v5);
}

double sub_215D9C0BC@<D0>(_DWORD *a1@<X1>, const __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)int v24 = 4;
  *(void *)&v24[4] = v5;
  uint64_t v6 = 4 * (v5 != 0);
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)int v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)int v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 4) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 4);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0) {
    uint64_t v14 = 2;
  }
  else {
    uint64_t v14 = 2 * v7;
  }
  unint64_t v15 = (uint64_t *)sub_215DA9D40((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C664CE0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_215D9C254@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  unint64_t v4 = *(void *)(a1 + 32);
  if (v3) {
    uint64_t v5 = 0;
  }
  *(void *)&v23[4] = v5;
  unint64_t v6 = HIDWORD(v4);
  *(_DWORD *)int v23 = 4;
  unint64_t v7 = *(void *)v23;
  *(_DWORD *)int v23 = 1;
  *(_DWORD *)&v23[4] = v4;
  uint64_t v8 = *(void *)v23;
  *(void *)int v23 = v7;
  *(void *)&v23[12] = v8;
  *(_DWORD *)&v23[20] = HIDWORD(v4);
  *(void *)&v23[24] = v5;
  *(void *)&long long v24 = v4;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  uint64_t v21 = v8;
  int v22 = HIDWORD(v4);
  if (HIDWORD(v7)) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  BOOL v10 = v9 || HIDWORD(v5) == 0;
  if (v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = v7;
  }
  unint64_t v19 = v11;
  if (v10) {
    int v12 = 0;
  }
  else {
    int v12 = HIDWORD(v5);
  }
  int v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0) {
    uint64_t v13 = 2;
  }
  else {
    uint64_t v13 = 2 * v6;
  }
  uint64_t v14 = (uint64_t *)sub_215DAA448((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  long long v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(void *)a2 = &unk_26C664D60;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v24;
  uint64_t v16 = *v14;
  *(void *)(a2 + 56) = v25;
  *(void *)(a2 + 64) = v16;
  uint64_t v17 = v26[2];
  *(void *)(a2 + 72) = v26[1];
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v17;
  *(void *)(a2 + 104) = v28;
  double result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

double sub_215D9C3D0@<D0>(_DWORD *a1@<X1>, _WORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)long long v24 = 4;
  *(void *)&v24[4] = v5;
  uint64_t v6 = 4 * (v5 != 0);
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)long long v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)long long v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 4) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 4);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((2 * v7) & (2 * v7 - 1)) != 0) {
    uint64_t v14 = 2;
  }
  else {
    uint64_t v14 = 2 * v7;
  }
  long long v15 = (uint64_t *)sub_215DAA448((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C664D60;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

double sub_215D9C568@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v3 = *a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)a1;
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)int v23 = 4;
  *(void *)&v23[4] = v4;
  uint64_t v5 = 4 * (v4 != 0);
  LODWORD(v6) = v5 * v4;
  unint64_t v7 = HIDWORD(v4);
  if (HIDWORD(v4)) {
    unint64_t v6 = v6;
  }
  else {
    unint64_t v6 = 0;
  }
  unint64_t v8 = v5 & 0x3FFFFFFFFLL | ((unint64_t)(v6 >> 2) << 34);
  *(_DWORD *)int v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  uint64_t v9 = *(void *)v23;
  *(void *)int v23 = __PAIR64__(v4, 4);
  *(_DWORD *)&unsigned __int8 v23[8] = HIDWORD(v4);
  *(void *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(void *)&v23[24] = v4;
  *(void *)&long long v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  uint64_t v21 = v9;
  int v22 = v6;
  if (__PAIR64__(v4, 4) >> 32) {
    BOOL v10 = HIDWORD(v4) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = __PAIR64__(v4, 4);
  }
  unint64_t v19 = v11;
  if (v10) {
    int v12 = 0;
  }
  else {
    int v12 = v7;
  }
  int v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0) {
    uint64_t v13 = 2;
  }
  else {
    uint64_t v13 = 2 * v6;
  }
  uint64_t v14 = (uint64_t *)sub_215DAA448((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  long long v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(void *)a2 = &unk_26C664D60;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v24;
  uint64_t v16 = *v14;
  *(void *)(a2 + 56) = v25;
  *(void *)(a2 + 64) = v16;
  uint64_t v17 = v26[2];
  *(void *)(a2 + 72) = v26[1];
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v17;
  *(void *)(a2 + 104) = v28;
  double result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

void sub_215D9C700(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 28)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 4;
  *(void *)&memptr[4] = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)memptr;
  unint64_t v8 = HIDWORD(v4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v5;
  uint64_t v9 = *(void *)memptr;
  unint64_t v10 = HIDWORD(v5);
  if (HIDWORD(v7)) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || HIDWORD(v4) == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = HIDWORD(v4);
  }
  unint64_t v15 = 3;
  if (((4 * v10) & (4 * v10 - 1)) == 0) {
    unint64_t v15 = 4 * v10 - 1;
  }
  unint64_t v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  unint64_t v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8) {
    size_t v19 = v18 + 1;
  }
  else {
    size_t v19 = 8;
  }
  if (v14 * HIDWORD(v5))
  {
    int v23 = v13;
    *(void *)memptr = 0;
    int v20 = malloc_type_posix_memalign((void **)memptr, v19, 4 * (v14 * HIDWORD(v5)), 0x1F88E90uLL);
    if (v20) {
      sub_215E0D744(v20, v19, 4 * (v14 * HIDWORD(v5)));
    }
    uint64_t v21 = *(void *)memptr;
    int v13 = v23;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (v13) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = v7;
  }
  *(void *)a2 = &unk_26C664DE0;
  *(void *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v9;
  *(_DWORD *)(a2 + 28) = HIDWORD(v5);
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 6std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a2 + 64) = 4 * (v14 * HIDWORD(v5));
  *(void *)(a2 + 72) = v21;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v19;
  *(void *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 96) = v14;
  *(void *)(a2 + 10std::__fs::filesystem::__rename(__from, __to, 0) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a2 + 108) = 4 * HIDWORD(v5);
}

double sub_215D9C8D0@<D0>(_DWORD *a1@<X1>, const float *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a1[1]) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a1;
  if (v4) {
    unint64_t v5 = 0;
  }
  *(_DWORD *)long long v24 = 4;
  *(void *)&v24[4] = v5;
  uint64_t v6 = 4 * (v5 != 0);
  LODWORD(v7) = v6 * v5;
  unint64_t v8 = HIDWORD(v5);
  if (HIDWORD(v5)) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
  *(_DWORD *)long long v24 = 1;
  *(_DWORD *)&v24[4] = v9;
  uint64_t v10 = *(void *)v24;
  *(void *)long long v24 = __PAIR64__(v5, 4);
  *(_DWORD *)&v24[8] = HIDWORD(v5);
  *(void *)&v24[12] = v10;
  *(_DWORD *)&v24[20] = v7;
  *(void *)&v24[24] = v5;
  *(void *)&long long v25 = v9;
  BYTE8(v25) = 0;
  BYTE4(v26) = 0;
  uint64_t v22 = v10;
  int v23 = v7;
  if (__PAIR64__(v5, 4) >> 32) {
    BOOL v11 = HIDWORD(v5) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = __PAIR64__(v5, 4);
  }
  unint64_t v20 = v12;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v8;
  }
  int v21 = v13;
  if (((4 * v7) & (4 * v7 - 1)) != 0) {
    uint64_t v14 = 4;
  }
  else {
    uint64_t v14 = 4 * v7;
  }
  unint64_t v15 = (uint64_t *)sub_215DAAA28((uint64_t)v27, (unsigned int *)&v20, &v22, 1, a2, 1, v14);
  long long v16 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v24;
  *(void *)a3 = &unk_26C664DE0;
  *(_OWORD *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v25;
  uint64_t v17 = *v15;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v17;
  uint64_t v18 = v27[2];
  *(void *)(a3 + 72) = v27[1];
  *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v18;
  *(void *)(a3 + 104) = v29;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 88) = v28;
  return result;
}

uint64_t sub_215D9CA64(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 28) || *(_DWORD *)(a1 + 24) == 0;
    int v4 = v3 ? 0 : *(_DWORD *)(a1 + 28);
    if (v4 * (*(void *)(a1 + 32) >> 33) != -1) {
      goto LABEL_11;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 8);
    if (v2) {
LABEL_11:
    }
      free(v2);
  }
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_215D9CB0C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    BOOL v3 = !*(_DWORD *)(a1 + 32) || *(_DWORD *)(a1 + 28) == 0;
    BOOL v4 = v3 || *(_DWORD *)(a1 + 24) == 0;
    int v5 = v4 ? 0 : *(_DWORD *)(a1 + 32);
    if (v5 * (*(_DWORD *)(a1 + 44) >> 1) != -1) {
      goto LABEL_14;
    }
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void **)(a1 + 8);
    if (v2) {
LABEL_14:
    }
      free(v2);
  }
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_215D9CBBC(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a1)
  {
    case 1:
      uint64_t v4 = *(void *)(a2 + 8);
      v544 = &unk_26C66C138;
      sub_215BA777C(v4, (uint64_t)&v545);
      uint64_t v5 = v545;
      if (v545)
      {
        uint64_t v6 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          uint64_t v5 = v545;
          unint64_t v7 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v5 + 32))(&v566, v5);
        uint64_t v8 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        int v473 = 1;
        sub_215DC93A4((uint64_t)&v568, 2, (uint64_t)&v547, 2, (uint64_t)v548, 1);
        goto LABEL_600;
      }
      v552 = &unk_26C66BFF0;
      sub_215900340((uint64_t)&v544, (uint64_t)&v553);
      uint64_t v203 = v553;
      long long v202 = v554;
      if (v554) {
        atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v566 = v203;
      v567 = v202;
      uint64_t v568 = 0;
      uint64_t v569 = 0;
      int v204 = v556;
      uint64_t v205 = v555;
      sub_215DC93A4((uint64_t)&v564, 2, (uint64_t)&v558, 2, (uint64_t)&v559, 1);
      uint64_t v206 = v205 | 0x100000000;
      __int16 v207 = v560;
      if (!v204) {
        uint64_t v206 = 0;
      }
      *(void *)a3 = v203;
      *(void *)(a3 + 8) = v202;
      uint64_t v208 = v564;
      *(void *)(a3 + 16) = v206;
      *(void *)(a3 + 24) = v208;
      *(_DWORD *)(a3 + 32) = v565;
      uint64_t v209 = v554;
      *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
      *(_DWORD *)(a3 + 48) = 1;
      *(_WORD *)(a3 + 52) = v207;
      if (!v209) {
        goto LABEL_664;
      }
      goto LABEL_593;
    case 2:
      uint64_t v9 = *(void *)(a2 + 8);
      v544 = &unk_26C66C3B0;
      sub_215BA8040(v9, (uint64_t)&v545);
      uint64_t v10 = v545;
      if (v545)
      {
        BOOL v11 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
          uint64_t v10 = v545;
          unint64_t v12 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v10 + 32))(&v566, v10);
        uint64_t v8 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        int v473 = 2;
        sub_215DC93A4((uint64_t)&v568, 2, (uint64_t)&v547, 2, (uint64_t)v548, 2);
        goto LABEL_600;
      }
      v552 = &unk_26C66C230;
      sub_215901368((uint64_t)&v544, (uint64_t)&v553);
      int v210 = v553;
      long long v211 = v554;
      if (v554) {
        atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v566 = v210;
      v567 = v211;
      uint64_t v568 = 0;
      uint64_t v569 = 0;
      int v212 = v556;
      unsigned int v213 = v555;
      int v214 = 2;
      sub_215DC93A4((uint64_t)&v564, 2, (uint64_t)&v558, 2, (uint64_t)&v559, 2);
      __int16 v215 = v560;
      uint64_t v216 = 2 * v213;
      goto LABEL_380;
    case 3:
      uint64_t v13 = *(void *)(a2 + 8);
      v544 = &unk_26C66C628;
      sub_215C43800(v13, (uint64_t)&v545);
      uint64_t v14 = v545;
      if (v545)
      {
        unint64_t v15 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
          uint64_t v14 = v545;
          long long v16 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v14 + 32))(&v566, v14);
        uint64_t v17 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 2, (uint64_t)&v547, 2, (uint64_t)v548, 2);
        __int16 v474 = v550;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v475 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v475;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v17;
        *(_DWORD *)(a3 + 48) = 3;
        *(_WORD *)(a3 + 52) = v474;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C66C4A8;
        sub_215902350((uint64_t)&v544, (uint64_t)&v553);
        unint64_t v217 = v553;
        uint64_t v218 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v217;
        v567 = v218;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v219 = v556;
        unsigned int v220 = v555;
        sub_215DC93A4((uint64_t)&v564, 2, (uint64_t)&v558, 2, (uint64_t)&v559, 2);
        __int16 v221 = v560;
        uint64_t v222 = (2 * v220) | 0x100000000;
        if (!v219) {
          uint64_t v222 = 0;
        }
        *(void *)a3 = v217;
        *(void *)(a3 + 8) = v218;
        uint64_t v223 = v564;
        *(void *)(a3 + 16) = v222;
        *(void *)(a3 + 24) = v223;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 3;
        *(_WORD *)(a3 + 52) = v221;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 4:
      uint64_t v18 = *(void *)(a2 + 8);
      v544 = &unk_26C66C8A0;
      sub_215C43DFC(v18, (uint64_t)&v545);
      uint64_t v19 = v545;
      if (v545)
      {
        unint64_t v20 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
          uint64_t v19 = v545;
          int v21 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v19 + 32))(&v566, v19);
        uint64_t v8 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        int v473 = 4;
        sub_215DC93A4((uint64_t)&v568, 2, (uint64_t)&v547, 2, (uint64_t)v548, 4);
LABEL_600:
        __int16 v477 = v550;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v478 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v478;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v8;
        *(_DWORD *)(a3 + 48) = v473;
        *(_WORD *)(a3 + 52) = v477;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C66C720;
        sub_21590335C((uint64_t)&v544, (uint64_t)&v553);
        int v210 = v553;
        long long v211 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v210;
        v567 = v211;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v212 = v556;
        unsigned int v224 = v555;
        int v214 = 4;
        sub_215DC93A4((uint64_t)&v564, 2, (uint64_t)&v558, 2, (uint64_t)&v559, 4);
        __int16 v215 = v560;
        uint64_t v216 = 4 * v224;
LABEL_380:
        uint64_t v225 = v216 | 0x100000000;
        if (!v212) {
          uint64_t v225 = 0;
        }
        *(void *)a3 = v210;
        *(void *)(a3 + 8) = v211;
        uint64_t v226 = v564;
        *(void *)(a3 + 16) = v225;
        *(void *)(a3 + 24) = v226;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = v214;
        *(_WORD *)(a3 + 52) = v215;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 5:
      uint64_t v22 = *(void *)(a2 + 8);
      v544 = &unk_26C66CB18;
      sub_215C443F8(v22, (uint64_t)&v545);
      uint64_t v23 = v545;
      if (v545)
      {
        long long v24 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
          uint64_t v23 = v545;
          long long v25 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v23 + 32))(&v566, v23);
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 1);
        __int16 v479 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v480 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v480;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v26;
        *(_DWORD *)(a3 + 48) = 5;
        *(_WORD *)(a3 + 52) = v479;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C66C998;
        sub_2159041F4((uint64_t)&v544, (uint64_t)&v553);
        uint64_t v228 = v553;
        uint64_t v227 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v228;
        v567 = v227;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v229 = v556;
        uint64_t v230 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 1);
        uint64_t v231 = v230 | 0x100000000;
        __int16 v232 = v563;
        if (!v229) {
          uint64_t v231 = 0;
        }
        *(void *)a3 = v228;
        *(void *)(a3 + 8) = v227;
        uint64_t v233 = v564;
        *(void *)(a3 + 16) = v231;
        *(void *)(a3 + 24) = v233;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 5;
        *(_WORD *)(a3 + 52) = v232;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 6:
      uint64_t v27 = *(void *)(a2 + 8);
      v544 = &unk_26C66CD90;
      sub_215C44A74(v27, (uint64_t)&v545);
      uint64_t v28 = v545;
      if (v545)
      {
        uint64_t v29 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
          uint64_t v28 = v545;
          uint64_t v30 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v28 + 32))(&v566, v28);
        uint64_t v31 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 2);
        __int16 v481 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v482 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v482;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v31;
        *(_DWORD *)(a3 + 48) = 6;
        *(_WORD *)(a3 + 52) = v481;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C66CC10;
        sub_215905114((uint64_t)&v544, (uint64_t)&v553);
        uint64_t v234 = v553;
        unint64_t v235 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v234;
        v567 = v235;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v236 = v556;
        unsigned int v237 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 2);
        __int16 v238 = v563;
        uint64_t v239 = (2 * v237) | 0x100000000;
        if (!v236) {
          uint64_t v239 = 0;
        }
        *(void *)a3 = v234;
        *(void *)(a3 + 8) = v235;
        uint64_t v240 = v564;
        *(void *)(a3 + 16) = v239;
        *(void *)(a3 + 24) = v240;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 6;
        *(_WORD *)(a3 + 52) = v238;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 7:
      uint64_t v32 = *(void *)(a2 + 8);
      v544 = &unk_26C66D008;
      sub_215C450F4(v32, (uint64_t)&v545);
      uint64_t v33 = v545;
      if (v545)
      {
        long long v34 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
          uint64_t v33 = v545;
          long long v35 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v33 + 32))(&v566, v33);
        uint64_t v36 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 2);
        __int16 v483 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v484 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v484;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v36;
        *(_DWORD *)(a3 + 48) = 7;
        *(_WORD *)(a3 + 52) = v483;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C66CE88;
        sub_21590603C((uint64_t)&v544, (uint64_t)&v553);
        unsigned __int8 v241 = v553;
        __int16 v242 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v241;
        v567 = v242;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v243 = v556;
        unsigned int v244 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 2);
        __int16 v245 = v563;
        uint64_t v246 = (2 * v244) | 0x100000000;
        if (!v243) {
          uint64_t v246 = 0;
        }
        *(void *)a3 = v241;
        *(void *)(a3 + 8) = v242;
        uint64_t v247 = v564;
        *(void *)(a3 + 16) = v246;
        *(void *)(a3 + 24) = v247;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 7;
        *(_WORD *)(a3 + 52) = v245;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 8:
      uint64_t v37 = *(void *)(a2 + 8);
      v544 = &unk_26C66D280;
      sub_215C45774(v37, (uint64_t)&v545);
      uint64_t v38 = v545;
      if (v545)
      {
        unint64_t v39 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
          uint64_t v38 = v545;
          unint64_t v40 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v38 + 32))(&v566, v38);
        uint64_t v41 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 4);
        __int16 v485 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v486 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v486;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v41;
        *(_DWORD *)(a3 + 48) = 8;
        *(_WORD *)(a3 + 52) = v485;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C66D100;
        sub_215906F28((uint64_t)&v544, (uint64_t)&v553);
        long long v248 = v553;
        uint64_t v249 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v248;
        v567 = v249;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v250 = v556;
        unsigned int v251 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 4);
        __int16 v252 = v563;
        uint64_t v253 = (4 * v251) | 0x100000000;
        if (!v250) {
          uint64_t v253 = 0;
        }
        *(void *)a3 = v248;
        *(void *)(a3 + 8) = v249;
        uint64_t v254 = v564;
        *(void *)(a3 + 16) = v253;
        *(void *)(a3 + 24) = v254;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 8;
        *(_WORD *)(a3 + 52) = v252;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 9:
      uint64_t v42 = *(void *)(a2 + 8);
      v544 = &unk_26C66D4F8;
      sub_215C45DF4(v42, (uint64_t)&v545);
      uint64_t v43 = v545;
      if (v545)
      {
        uint64_t v44 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
          uint64_t v43 = v545;
          std::string v45 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v43 + 32))(&v566, v43);
        uint64_t v46 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 1);
        __int16 v487 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v488 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v488;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v46;
        *(_DWORD *)(a3 + 48) = 9;
        *(_WORD *)(a3 + 52) = v487;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C66D378;
        sub_215907E50((uint64_t)&v544, (uint64_t)&v553);
        long long v256 = v553;
        uint64_t v255 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v256;
        v567 = v255;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v257 = v556;
        uint64_t v258 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 1);
        uint64_t v259 = v258 | 0x100000000;
        __int16 v260 = v563;
        if (!v257) {
          uint64_t v259 = 0;
        }
        *(void *)a3 = v256;
        *(void *)(a3 + 8) = v255;
        uint64_t v261 = v564;
        *(void *)(a3 + 16) = v259;
        *(void *)(a3 + 24) = v261;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 9;
        *(_WORD *)(a3 + 52) = v260;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 10:
      uint64_t v47 = *(void *)(a2 + 8);
      v544 = &unk_26C66D770;
      sub_215C46470(v47, (uint64_t)&v545);
      uint64_t v48 = v545;
      if (v545)
      {
        size_t v49 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
          uint64_t v48 = v545;
          uint64_t v50 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v48 + 32))(&v566, v48);
        uint64_t v51 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 2);
        __int16 v489 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v490 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v490;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v51;
        *(_DWORD *)(a3 + 48) = 10;
        *(_WORD *)(a3 + 52) = v489;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C66D5F0;
        sub_215908D7C((uint64_t)&v544, (uint64_t)&v553);
        v262 = v553;
        uint64_t v263 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v262;
        v567 = v263;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v264 = v556;
        unsigned int v265 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 2);
        __int16 v266 = v563;
        uint64_t v267 = (2 * v265) | 0x100000000;
        if (!v264) {
          uint64_t v267 = 0;
        }
        *(void *)a3 = v262;
        *(void *)(a3 + 8) = v263;
        uint64_t v268 = v564;
        *(void *)(a3 + 16) = v267;
        *(void *)(a3 + 24) = v268;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 10;
        *(_WORD *)(a3 + 52) = v266;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 11:
      uint64_t v52 = *(void *)(a2 + 8);
      v544 = &unk_26C66D9E8;
      sub_215C46AF0(v52, (uint64_t)&v545);
      uint64_t v53 = v545;
      if (v545)
      {
        uint64_t v54 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
          uint64_t v53 = v545;
          uint64_t v55 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v53 + 32))(&v566, v53);
        uint64_t v56 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 2);
        __int16 v491 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v492 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v492;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v56;
        *(_DWORD *)(a3 + 48) = 11;
        *(_WORD *)(a3 + 52) = v491;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C66D868;
        sub_215909D08((uint64_t)&v544, (uint64_t)&v553);
        __int16 v269 = v553;
        uint64_t v270 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v269;
        v567 = v270;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v271 = v556;
        unsigned int v272 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 2);
        __int16 v273 = v563;
        uint64_t v274 = (2 * v272) | 0x100000000;
        if (!v271) {
          uint64_t v274 = 0;
        }
        *(void *)a3 = v269;
        *(void *)(a3 + 8) = v270;
        uint64_t v275 = v564;
        *(void *)(a3 + 16) = v274;
        *(void *)(a3 + 24) = v275;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 11;
        *(_WORD *)(a3 + 52) = v273;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 12:
      uint64_t v57 = *(void *)(a2 + 8);
      v544 = &unk_26C66DC60;
      sub_215C47170(v57, (uint64_t)&v545);
      uint64_t v58 = v545;
      if (v545)
      {
        uint64_t v59 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
          uint64_t v58 = v545;
          long long v60 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v58 + 32))(&v566, v58);
        uint64_t v61 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 4);
        __int16 v493 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v494 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v494;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v61;
        *(_DWORD *)(a3 + 48) = 12;
        *(_WORD *)(a3 + 52) = v493;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C66DAE0;
        sub_21590ABF4((uint64_t)&v544, (uint64_t)&v553);
        uint64_t v276 = v553;
        unsigned __int8 v277 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v276;
        v567 = v277;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v278 = v556;
        unsigned int v279 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 4);
        __int16 v280 = v563;
        uint64_t v281 = (4 * v279) | 0x100000000;
        if (!v278) {
          uint64_t v281 = 0;
        }
        *(void *)a3 = v276;
        *(void *)(a3 + 8) = v277;
        uint64_t v282 = v564;
        *(void *)(a3 + 16) = v281;
        *(void *)(a3 + 24) = v282;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 12;
        *(_WORD *)(a3 + 52) = v280;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 13:
      uint64_t v62 = *(void *)(a2 + 8);
      v544 = &unk_26C66DED8;
      sub_215C477F0(v62, (uint64_t)&v545);
      uint64_t v63 = v545;
      if (v545)
      {
        uint64_t v64 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
          uint64_t v63 = v545;
          uint64_t v65 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v65);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v63 + 32))(&v566, v63);
        uint64_t v66 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 1);
        __int16 v495 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v496 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v496;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v66;
        *(_DWORD *)(a3 + 48) = 13;
        *(_WORD *)(a3 + 52) = v495;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C66DD58;
        sub_21590BE7C((uint64_t)&v544, (uint64_t)&v553);
        long long v284 = v553;
        long long v283 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v284;
        v567 = v283;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v285 = v556;
        uint64_t v286 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 1);
        uint64_t v287 = v286 | 0x100000000;
        __int16 v288 = v563;
        if (!v285) {
          uint64_t v287 = 0;
        }
        *(void *)a3 = v284;
        *(void *)(a3 + 8) = v283;
        uint64_t v289 = v564;
        *(void *)(a3 + 16) = v287;
        *(void *)(a3 + 24) = v289;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 13;
        *(_WORD *)(a3 + 52) = v288;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 14:
      uint64_t v67 = *(void *)(a2 + 8);
      v544 = &unk_26C66E150;
      sub_215C47E6C(v67, (uint64_t)&v545);
      uint64_t v68 = v545;
      if (v545)
      {
        long long v69 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
          uint64_t v68 = v545;
          uint64_t v70 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v68 + 32))(&v566, v68);
        uint64_t v71 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 2);
        __int16 v497 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v498 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v498;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v71;
        *(_DWORD *)(a3 + 48) = 14;
        *(_WORD *)(a3 + 52) = v497;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C66DFD0;
        sub_21590CDA8((uint64_t)&v544, (uint64_t)&v553);
        uint64_t v290 = v553;
        uint64_t v291 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v290;
        v567 = v291;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v292 = v556;
        unsigned int v293 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 2);
        __int16 v294 = v563;
        uint64_t v295 = (2 * v293) | 0x100000000;
        if (!v292) {
          uint64_t v295 = 0;
        }
        *(void *)a3 = v290;
        *(void *)(a3 + 8) = v291;
        uint64_t v296 = v564;
        *(void *)(a3 + 16) = v295;
        *(void *)(a3 + 24) = v296;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 14;
        *(_WORD *)(a3 + 52) = v294;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 15:
      uint64_t v72 = *(void *)(a2 + 8);
      v544 = &unk_26C66E3C8;
      sub_215C484EC(v72, (uint64_t)&v545);
      uint64_t v73 = v545;
      if (v545)
      {
        uint64_t v74 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
          uint64_t v73 = v545;
          uint64_t v75 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
              std::__shared_weak_count::__release_weak(v75);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v73 + 32))(&v566, v73);
        uint64_t v76 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 2);
        __int16 v499 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v500 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v500;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v76;
        *(_DWORD *)(a3 + 48) = 15;
        *(_WORD *)(a3 + 52) = v499;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C66E248;
        sub_21590DD34((uint64_t)&v544, (uint64_t)&v553);
        uint64_t v297 = v553;
        unint64_t v298 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v297;
        v567 = v298;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v299 = v556;
        unsigned int v300 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 2);
        __int16 v301 = v563;
        uint64_t v302 = (2 * v300) | 0x100000000;
        if (!v299) {
          uint64_t v302 = 0;
        }
        *(void *)a3 = v297;
        *(void *)(a3 + 8) = v298;
        uint64_t v303 = v564;
        *(void *)(a3 + 16) = v302;
        *(void *)(a3 + 24) = v303;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 15;
        *(_WORD *)(a3 + 52) = v301;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 16:
      uint64_t v77 = *(void *)(a2 + 8);
      v544 = &unk_26C66E640;
      sub_215C48B6C(v77, (uint64_t)&v545);
      uint64_t v78 = v545;
      if (v545)
      {
        uint64_t v79 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
          uint64_t v78 = v545;
          uint64_t v80 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v78 + 32))(&v566, v78);
        uint64_t v81 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 4);
        __int16 v501 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v502 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v502;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v81;
        *(_DWORD *)(a3 + 48) = 16;
        *(_WORD *)(a3 + 52) = v501;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C66E4C0;
        sub_21590EC20((uint64_t)&v544, (uint64_t)&v553);
        unsigned __int8 v304 = v553;
        __int16 v305 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v304;
        v567 = v305;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v306 = v556;
        unsigned int v307 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 4);
        __int16 v308 = v563;
        uint64_t v309 = (4 * v307) | 0x100000000;
        if (!v306) {
          uint64_t v309 = 0;
        }
        *(void *)a3 = v304;
        *(void *)(a3 + 8) = v305;
        uint64_t v310 = v564;
        *(void *)(a3 + 16) = v309;
        *(void *)(a3 + 24) = v310;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 16;
        *(_WORD *)(a3 + 52) = v308;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 17:
      uint64_t v82 = *(void *)(a2 + 8);
      v544 = &unk_26C66E8B8;
      sub_215C491EC(v82, (uint64_t)&v545);
      uint64_t v83 = v545;
      if (v545)
      {
        uint64_t v84 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
          uint64_t v83 = v545;
          uint64_t v85 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
              std::__shared_weak_count::__release_weak(v85);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v83 + 32))(&v566, v83);
        uint64_t v86 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 1);
        __int16 v503 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v504 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v504;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v86;
        *(_DWORD *)(a3 + 48) = 17;
        *(_WORD *)(a3 + 52) = v503;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C66E738;
        sub_21590FBAC((uint64_t)&v544, (uint64_t)&v553);
        uint64_t v312 = v553;
        long long v311 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v312;
        v567 = v311;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v313 = v556;
        uint64_t v314 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 1);
        uint64_t v315 = v314 | 0x100000000;
        __int16 v316 = v563;
        if (!v313) {
          uint64_t v315 = 0;
        }
        *(void *)a3 = v312;
        *(void *)(a3 + 8) = v311;
        uint64_t v317 = v564;
        *(void *)(a3 + 16) = v315;
        *(void *)(a3 + 24) = v317;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 17;
        *(_WORD *)(a3 + 52) = v316;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 18:
      uint64_t v87 = *(void *)(a2 + 8);
      v544 = &unk_26C66EB30;
      sub_215C49868(v87, (uint64_t)&v545);
      uint64_t v88 = v545;
      if (v545)
      {
        char v89 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
          uint64_t v88 = v545;
          uint64_t v90 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
              std::__shared_weak_count::__release_weak(v90);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v88 + 32))(&v566, v88);
        uint64_t v91 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 2);
        __int16 v505 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v506 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v506;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v91;
        *(_DWORD *)(a3 + 48) = 18;
        *(_WORD *)(a3 + 52) = v505;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C66E9B0;
        sub_215910AD8((uint64_t)&v544, (uint64_t)&v553);
        uint64_t v318 = v553;
        long long v319 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v318;
        v567 = v319;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v320 = v556;
        unsigned int v321 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 2);
        __int16 v322 = v563;
        uint64_t v323 = (2 * v321) | 0x100000000;
        if (!v320) {
          uint64_t v323 = 0;
        }
        *(void *)a3 = v318;
        *(void *)(a3 + 8) = v319;
        uint64_t v324 = v564;
        *(void *)(a3 + 16) = v323;
        *(void *)(a3 + 24) = v324;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 18;
        *(_WORD *)(a3 + 52) = v322;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 19:
      uint64_t v92 = *(void *)(a2 + 8);
      v544 = &unk_26C66EDA8;
      sub_215C49EE8(v92, (uint64_t)&v545);
      uint64_t v93 = v545;
      if (v545)
      {
        uint64_t v94 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
          uint64_t v93 = v545;
          uint64_t v95 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v95->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v93 + 32))(&v566, v93);
        uint64_t v96 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 2);
        __int16 v507 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v508 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v508;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v96;
        *(_DWORD *)(a3 + 48) = 19;
        *(_WORD *)(a3 + 52) = v507;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C66EC28;
        sub_215911A64((uint64_t)&v544, (uint64_t)&v553);
        unsigned __int8 v325 = v553;
        uint64_t v326 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v325;
        v567 = v326;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v327 = v556;
        unsigned int v328 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 2);
        __int16 v329 = v563;
        uint64_t v330 = (2 * v328) | 0x100000000;
        if (!v327) {
          uint64_t v330 = 0;
        }
        *(void *)a3 = v325;
        *(void *)(a3 + 8) = v326;
        uint64_t v331 = v564;
        *(void *)(a3 + 16) = v330;
        *(void *)(a3 + 24) = v331;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 19;
        *(_WORD *)(a3 + 52) = v329;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 20:
      uint64_t v97 = *(void *)(a2 + 8);
      v544 = &unk_26C66F020;
      sub_215C4A568(v97, (uint64_t)&v545);
      uint64_t v98 = v545;
      if (v545)
      {
        uint64_t v99 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v99->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
          uint64_t v98 = v545;
          uint64_t v100 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v100->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v98 + 32))(&v566, v98);
        uint64_t v101 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 4);
        __int16 v509 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v510 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v510;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v101;
        *(_DWORD *)(a3 + 48) = 20;
        *(_WORD *)(a3 + 52) = v509;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C66EEA0;
        sub_215912950((uint64_t)&v544, (uint64_t)&v553);
        __int16 v332 = v553;
        uint64_t v333 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v332;
        v567 = v333;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v334 = v556;
        unsigned int v335 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 4);
        __int16 v336 = v563;
        uint64_t v337 = (4 * v335) | 0x100000000;
        if (!v334) {
          uint64_t v337 = 0;
        }
        *(void *)a3 = v332;
        *(void *)(a3 + 8) = v333;
        uint64_t v338 = v564;
        *(void *)(a3 + 16) = v337;
        *(void *)(a3 + 24) = v338;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 20;
        *(_WORD *)(a3 + 52) = v336;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 21:
      uint64_t v102 = *(void *)(a2 + 8);
      v544 = &unk_26C66F298;
      sub_215BA863C(v102, (uint64_t)&v545);
      uint64_t v103 = v545;
      if (v545)
      {
        uint64_t v104 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v104->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
          uint64_t v103 = v545;
          char v105 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v105->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
              std::__shared_weak_count::__release_weak(v105);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v103 + 32))(&v566, v103);
        uint64_t v106 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 1);
        __int16 v542 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v543 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v543;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v106;
        *(_DWORD *)(a3 + 48) = 21;
        *(_WORD *)(a3 + 52) = v542;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C66F118;
        sub_215913A90((uint64_t)&v544, (uint64_t)&v553);
        unsigned __int8 v340 = v553;
        uint64_t v339 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v340;
        v567 = v339;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v341 = v556;
        uint64_t v342 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 1);
        uint64_t v343 = v342 | 0x100000000;
        __int16 v344 = v563;
        if (!v341) {
          uint64_t v343 = 0;
        }
        *(void *)a3 = v340;
        *(void *)(a3 + 8) = v339;
        uint64_t v345 = v564;
        *(void *)(a3 + 16) = v343;
        *(void *)(a3 + 24) = v345;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 21;
        *(_WORD *)(a3 + 52) = v344;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 22:
      uint64_t v107 = *(void *)(a2 + 8);
      v544 = &unk_26C66F510;
      sub_215C4ABE8(v107, (uint64_t)&v545);
      uint64_t v108 = v545;
      if (v545)
      {
        int v109 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v109->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
            std::__shared_weak_count::__release_weak(v109);
          }
          uint64_t v108 = v545;
          uint64_t v110 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v110->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
              std::__shared_weak_count::__release_weak(v110);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v108 + 32))(&v566, v108);
        uint64_t v111 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 2);
        __int16 v511 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v512 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v512;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v111;
        *(_DWORD *)(a3 + 48) = 22;
        *(_WORD *)(a3 + 52) = v511;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C66F390;
        sub_215914B70((uint64_t)&v544, (uint64_t)&v553);
        long long v346 = v553;
        long long v347 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v346;
        v567 = v347;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v348 = v556;
        unsigned int v349 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 2);
        __int16 v350 = v563;
        uint64_t v351 = (2 * v349) | 0x100000000;
        if (!v348) {
          uint64_t v351 = 0;
        }
        *(void *)a3 = v346;
        *(void *)(a3 + 8) = v347;
        uint64_t v352 = v564;
        *(void *)(a3 + 16) = v351;
        *(void *)(a3 + 24) = v352;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 22;
        *(_WORD *)(a3 + 52) = v350;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 23:
      uint64_t v112 = *(void *)(a2 + 8);
      v544 = &unk_26C66F788;
      sub_215C4B268(v112, (uint64_t)&v545);
      uint64_t v113 = v545;
      if (v545)
      {
        uint64_t v114 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
            std::__shared_weak_count::__release_weak(v114);
          }
          uint64_t v113 = v545;
          uint64_t v115 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v115->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
              std::__shared_weak_count::__release_weak(v115);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v113 + 32))(&v566, v113);
        uint64_t v116 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 2);
        __int16 v513 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v514 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v514;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v116;
        *(_DWORD *)(a3 + 48) = 23;
        *(_WORD *)(a3 + 52) = v513;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C66F608;
        sub_215915CB0((uint64_t)&v544, (uint64_t)&v553);
        uint64_t v353 = v553;
        uint64_t v354 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v353;
        v567 = v354;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v355 = v556;
        unsigned int v356 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 2);
        __int16 v357 = v563;
        uint64_t v358 = (2 * v356) | 0x100000000;
        if (!v355) {
          uint64_t v358 = 0;
        }
        *(void *)a3 = v353;
        *(void *)(a3 + 8) = v354;
        uint64_t v359 = v564;
        *(void *)(a3 + 16) = v358;
        *(void *)(a3 + 24) = v359;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 23;
        *(_WORD *)(a3 + 52) = v357;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 24:
      uint64_t v117 = *(void *)(a2 + 8);
      v544 = &unk_26C66FA00;
      sub_215C4B8E8(v117, (uint64_t)&v545);
      uint64_t v118 = v545;
      if (v545)
      {
        uint64_t v119 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v119->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
            std::__shared_weak_count::__release_weak(v119);
          }
          uint64_t v118 = v545;
          uint64_t v120 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v120->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
              std::__shared_weak_count::__release_weak(v120);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v118 + 32))(&v566, v118);
        uint64_t v121 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 4);
        __int16 v515 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v516 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v516;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v121;
        *(_DWORD *)(a3 + 48) = 24;
        *(_WORD *)(a3 + 52) = v515;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C66F880;
        sub_215916D50((uint64_t)&v544, (uint64_t)&v553);
        uint64_t v360 = v553;
        v361 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v360;
        v567 = v361;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v362 = v556;
        unsigned int v363 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 4);
        __int16 v364 = v563;
        uint64_t v365 = (4 * v363) | 0x100000000;
        if (!v362) {
          uint64_t v365 = 0;
        }
        *(void *)a3 = v360;
        *(void *)(a3 + 8) = v361;
        uint64_t v366 = v564;
        *(void *)(a3 + 16) = v365;
        *(void *)(a3 + 24) = v366;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 24;
        *(_WORD *)(a3 + 52) = v364;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 25:
      uint64_t v122 = *(void *)(a2 + 8);
      v544 = &unk_26C66FC78;
      sub_215C4BF68(v122, (uint64_t)&v545);
      uint64_t v123 = v545;
      if (v545)
      {
        uint64_t v124 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v124->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v124);
          }
          uint64_t v123 = v545;
          uint64_t v125 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v125->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
              std::__shared_weak_count::__release_weak(v125);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v123 + 32))(&v566, v123);
        uint64_t v126 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 1);
        __int16 v517 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v518 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v518;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v126;
        *(_DWORD *)(a3 + 48) = 25;
        *(_WORD *)(a3 + 52) = v517;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C66FAF8;
        sub_215917E90((uint64_t)&v544, (uint64_t)&v553);
        __int16 v368 = v553;
        unsigned __int8 v367 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v368;
        v567 = v367;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v369 = v556;
        uint64_t v370 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 1);
        uint64_t v371 = v370 | 0x100000000;
        __int16 v372 = v563;
        if (!v369) {
          uint64_t v371 = 0;
        }
        *(void *)a3 = v368;
        *(void *)(a3 + 8) = v367;
        uint64_t v373 = v564;
        *(void *)(a3 + 16) = v371;
        *(void *)(a3 + 24) = v373;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 25;
        *(_WORD *)(a3 + 52) = v372;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 26:
      uint64_t v127 = *(void *)(a2 + 8);
      v544 = &unk_26C66FEF0;
      sub_215C4C5E4(v127, (uint64_t)&v545);
      uint64_t v128 = v545;
      if (v545)
      {
        int v129 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v129->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
            std::__shared_weak_count::__release_weak(v129);
          }
          uint64_t v128 = v545;
          uint64_t v130 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v130->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
              std::__shared_weak_count::__release_weak(v130);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v128 + 32))(&v566, v128);
        uint64_t v131 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 2);
        __int16 v519 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v520 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v520;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v131;
        *(_DWORD *)(a3 + 48) = 26;
        *(_WORD *)(a3 + 52) = v519;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C66FD70;
        sub_215918DBC((uint64_t)&v544, (uint64_t)&v553);
        long long v374 = v553;
        uint64_t v375 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v374;
        v567 = v375;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v376 = v556;
        unsigned int v377 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 2);
        __int16 v378 = v563;
        uint64_t v379 = (2 * v377) | 0x100000000;
        if (!v376) {
          uint64_t v379 = 0;
        }
        *(void *)a3 = v374;
        *(void *)(a3 + 8) = v375;
        uint64_t v380 = v564;
        *(void *)(a3 + 16) = v379;
        *(void *)(a3 + 24) = v380;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 26;
        *(_WORD *)(a3 + 52) = v378;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 27:
      uint64_t v132 = *(void *)(a2 + 8);
      v544 = &unk_26C670168;
      sub_215C4CC64(v132, (uint64_t)&v545);
      uint64_t v133 = v545;
      if (v545)
      {
        uint64_t v134 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v134->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
            std::__shared_weak_count::__release_weak(v134);
          }
          uint64_t v133 = v545;
          uint64_t v135 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v135->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
              std::__shared_weak_count::__release_weak(v135);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v133 + 32))(&v566, v133);
        uint64_t v136 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 2);
        __int16 v521 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v522 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v522;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v136;
        *(_DWORD *)(a3 + 48) = 27;
        *(_WORD *)(a3 + 52) = v521;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C66FFE8;
        sub_215919D48((uint64_t)&v544, (uint64_t)&v553);
        uint64_t v381 = v553;
        long long v382 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v381;
        v567 = v382;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v383 = v556;
        unsigned int v384 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 2);
        __int16 v385 = v563;
        uint64_t v386 = (2 * v384) | 0x100000000;
        if (!v383) {
          uint64_t v386 = 0;
        }
        *(void *)a3 = v381;
        *(void *)(a3 + 8) = v382;
        uint64_t v387 = v564;
        *(void *)(a3 + 16) = v386;
        *(void *)(a3 + 24) = v387;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 27;
        *(_WORD *)(a3 + 52) = v385;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 28:
      uint64_t v137 = *(void *)(a2 + 8);
      v544 = &unk_26C6703E0;
      sub_215C4D2E4(v137, (uint64_t)&v545);
      uint64_t v138 = v545;
      if (v545)
      {
        uint64_t v139 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v139->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
            std::__shared_weak_count::__release_weak(v139);
          }
          uint64_t v138 = v545;
          uint64_t v140 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v140->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
              std::__shared_weak_count::__release_weak(v140);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v138 + 32))(&v566, v138);
        uint64_t v141 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 4);
        __int16 v523 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v524 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v524;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v141;
        *(_DWORD *)(a3 + 48) = 28;
        *(_WORD *)(a3 + 52) = v523;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C670260;
        sub_21591AC34((uint64_t)&v544, (uint64_t)&v553);
        v388 = v553;
        uint64_t v389 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v388;
        v567 = v389;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v390 = v556;
        unsigned int v391 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 4);
        __int16 v392 = v563;
        uint64_t v393 = (4 * v391) | 0x100000000;
        if (!v390) {
          uint64_t v393 = 0;
        }
        *(void *)a3 = v388;
        *(void *)(a3 + 8) = v389;
        uint64_t v394 = v564;
        *(void *)(a3 + 16) = v393;
        *(void *)(a3 + 24) = v394;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 28;
        *(_WORD *)(a3 + 52) = v392;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 29:
      uint64_t v142 = *(void *)(a2 + 8);
      v544 = &unk_26C670658;
      sub_215C4D964(v142, (uint64_t)&v545);
      uint64_t v143 = v545;
      if (v545)
      {
        uint64_t v144 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v144->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
            std::__shared_weak_count::__release_weak(v144);
          }
          uint64_t v143 = v545;
          size_t v145 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v145->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
              std::__shared_weak_count::__release_weak(v145);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v143 + 32))(&v566, v143);
        uint64_t v146 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 1);
        __int16 v525 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v526 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v526;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v146;
        *(_DWORD *)(a3 + 48) = 29;
        *(_WORD *)(a3 + 52) = v525;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C6704D8;
        sub_21591BD74((uint64_t)&v544, (uint64_t)&v553);
        uint64_t v396 = v553;
        __int16 v395 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v396;
        v567 = v395;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v397 = v556;
        uint64_t v398 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 1);
        uint64_t v399 = v398 | 0x100000000;
        __int16 v400 = v563;
        if (!v397) {
          uint64_t v399 = 0;
        }
        *(void *)a3 = v396;
        *(void *)(a3 + 8) = v395;
        uint64_t v401 = v564;
        *(void *)(a3 + 16) = v399;
        *(void *)(a3 + 24) = v401;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 29;
        *(_WORD *)(a3 + 52) = v400;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 30:
      uint64_t v147 = *(void *)(a2 + 8);
      v544 = &unk_26C6708D0;
      sub_215C4DFE0(v147, (uint64_t)&v545);
      uint64_t v148 = v545;
      if (v545)
      {
        size_t v149 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v149->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
            std::__shared_weak_count::__release_weak(v149);
          }
          uint64_t v148 = v545;
          uint64_t v150 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v150->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
              std::__shared_weak_count::__release_weak(v150);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v148 + 32))(&v566, v148);
        uint64_t v151 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 2);
        __int16 v527 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v528 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v528;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v151;
        *(_DWORD *)(a3 + 48) = 30;
        *(_WORD *)(a3 + 52) = v527;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
          goto LABEL_663;
        }
      }
      else
      {
        v552 = &unk_26C670750;
        sub_21591CE54((uint64_t)&v544, (uint64_t)&v553);
        uint64_t v402 = v553;
        unsigned __int8 v403 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v402;
        v567 = v403;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v404 = v556;
        unsigned int v405 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 2);
        __int16 v406 = v563;
        uint64_t v407 = (2 * v405) | 0x100000000;
        if (!v404) {
          uint64_t v407 = 0;
        }
        *(void *)a3 = v402;
        *(void *)(a3 + 8) = v403;
        uint64_t v408 = v564;
        *(void *)(a3 + 16) = v407;
        *(void *)(a3 + 24) = v408;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        *(_DWORD *)(a3 + 48) = 30;
        *(_WORD *)(a3 + 52) = v406;
        if (v209) {
          goto LABEL_593;
        }
      }
      goto LABEL_664;
    case 31:
      uint64_t v152 = *(void *)(a2 + 8);
      v544 = &unk_26C670B48;
      sub_215C4E660(v152, (uint64_t)&v545);
      uint64_t v153 = v545;
      if (v545)
      {
        uint64_t v154 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v154->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
            std::__shared_weak_count::__release_weak(v154);
          }
          uint64_t v153 = v545;
          uint64_t v155 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v155->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
              std::__shared_weak_count::__release_weak(v155);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v153 + 32))(&v566, v153);
        uint64_t v156 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 2);
        __int16 v529 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v530 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v530;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v156;
        int v531 = 31;
        goto LABEL_662;
      }
      v552 = &unk_26C6709C8;
      sub_21591DF94((uint64_t)&v544, (uint64_t)&v553);
      long long v409 = v553;
      long long v410 = v554;
      if (v554) {
        atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v566 = v409;
      v567 = v410;
      uint64_t v568 = 0;
      uint64_t v569 = 0;
      int v411 = v556;
      unsigned int v412 = v555;
      sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 2);
      __int16 v413 = v563;
      uint64_t v414 = (2 * v412) | 0x100000000;
      if (!v411) {
        uint64_t v414 = 0;
      }
      *(void *)a3 = v409;
      *(void *)(a3 + 8) = v410;
      uint64_t v415 = v564;
      *(void *)(a3 + 16) = v414;
      *(void *)(a3 + 24) = v415;
      *(_DWORD *)(a3 + 32) = v565;
      uint64_t v209 = v554;
      *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
      int v416 = 31;
      goto LABEL_592;
    case 32:
      uint64_t v157 = *(void *)(a2 + 8);
      v544 = &unk_26C670DC0;
      sub_215C4ECE0(v157, (uint64_t)&v545);
      uint64_t v158 = v545;
      if (v545)
      {
        uint64_t v159 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v159->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
            std::__shared_weak_count::__release_weak(v159);
          }
          uint64_t v158 = v545;
          uint64_t v160 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v160->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
              std::__shared_weak_count::__release_weak(v160);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v158 + 32))(&v566, v158);
        uint64_t v161 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 4);
        __int16 v529 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v532 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v532;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v161;
        int v531 = 32;
        goto LABEL_662;
      }
      v552 = &unk_26C670C40;
      sub_21591F034((uint64_t)&v544, (uint64_t)&v553);
      uint64_t v417 = v553;
      long long v418 = v554;
      if (v554) {
        atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v566 = v417;
      v567 = v418;
      uint64_t v568 = 0;
      uint64_t v569 = 0;
      int v419 = v556;
      unsigned int v420 = v555;
      sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 4);
      __int16 v413 = v563;
      uint64_t v421 = (4 * v420) | 0x100000000;
      if (!v419) {
        uint64_t v421 = 0;
      }
      *(void *)a3 = v417;
      *(void *)(a3 + 8) = v418;
      uint64_t v422 = v564;
      *(void *)(a3 + 16) = v421;
      *(void *)(a3 + 24) = v422;
      *(_DWORD *)(a3 + 32) = v565;
      uint64_t v209 = v554;
      *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
      int v416 = 32;
      goto LABEL_592;
    case 33:
      uint64_t v162 = *(void *)(a2 + 8);
      v544 = &unk_26C671038;
      sub_215C4F360(v162, (uint64_t)&v545);
      uint64_t v163 = v545;
      if (v545)
      {
        uint64_t v164 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v164->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
            std::__shared_weak_count::__release_weak(v164);
          }
          uint64_t v163 = v545;
          uint64_t v165 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v165->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
              std::__shared_weak_count::__release_weak(v165);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v163 + 32))(&v566, v163);
        uint64_t v166 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 1);
        __int16 v529 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v533 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v533;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v166;
        int v531 = 33;
        goto LABEL_662;
      }
      v552 = &unk_26C670EB8;
      sub_215920174((uint64_t)&v544, (uint64_t)&v553);
      v424 = v553;
      uint64_t v423 = v554;
      if (v554) {
        atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v566 = v424;
      v567 = v423;
      uint64_t v568 = 0;
      uint64_t v569 = 0;
      int v425 = v556;
      uint64_t v426 = v555;
      sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 1);
      uint64_t v427 = v426 | 0x100000000;
      __int16 v428 = v563;
      if (!v425) {
        uint64_t v427 = 0;
      }
      *(void *)a3 = v424;
      *(void *)(a3 + 8) = v423;
      uint64_t v429 = v564;
      *(void *)(a3 + 16) = v427;
      *(void *)(a3 + 24) = v429;
      *(_DWORD *)(a3 + 32) = v565;
      uint64_t v209 = v554;
      *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
      int v430 = 33;
      goto LABEL_575;
    case 34:
      uint64_t v167 = *(void *)(a2 + 8);
      v544 = &unk_26C6712B0;
      sub_215C4F9DC(v167, (uint64_t)&v545);
      uint64_t v168 = v545;
      if (v545)
      {
        uint64_t v169 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v169->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
            std::__shared_weak_count::__release_weak(v169);
          }
          uint64_t v168 = v545;
          uint64_t v170 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v170->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
              std::__shared_weak_count::__release_weak(v170);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v168 + 32))(&v566, v168);
        uint64_t v171 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 2);
        __int16 v529 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v534 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v534;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v171;
        int v531 = 34;
        goto LABEL_662;
      }
      v552 = &unk_26C671130;
      sub_2159210A0((uint64_t)&v544, (uint64_t)&v553);
      __int16 v431 = v553;
      uint64_t v432 = v554;
      if (v554) {
        atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v566 = v431;
      v567 = v432;
      uint64_t v568 = 0;
      uint64_t v569 = 0;
      int v433 = v556;
      unsigned int v434 = v555;
      sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 2);
      __int16 v413 = v563;
      uint64_t v435 = (2 * v434) | 0x100000000;
      if (!v433) {
        uint64_t v435 = 0;
      }
      *(void *)a3 = v431;
      *(void *)(a3 + 8) = v432;
      uint64_t v436 = v564;
      *(void *)(a3 + 16) = v435;
      *(void *)(a3 + 24) = v436;
      *(_DWORD *)(a3 + 32) = v565;
      uint64_t v209 = v554;
      *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
      int v416 = 34;
      goto LABEL_592;
    case 35:
      uint64_t v172 = *(void *)(a2 + 8);
      v544 = &unk_26C671528;
      sub_215C5005C(v172, (uint64_t)&v545);
      uint64_t v173 = v545;
      if (v545)
      {
        uint64_t v174 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v174->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
            std::__shared_weak_count::__release_weak(v174);
          }
          uint64_t v173 = v545;
          uint64_t v175 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v175->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
              std::__shared_weak_count::__release_weak(v175);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v173 + 32))(&v566, v173);
        uint64_t v176 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 2);
        __int16 v529 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v535 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v535;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v176;
        int v531 = 35;
        goto LABEL_662;
      }
      v552 = &unk_26C6713A8;
      sub_21592202C((uint64_t)&v544, (uint64_t)&v553);
      long long v437 = v553;
      uint64_t v438 = v554;
      if (v554) {
        atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v566 = v437;
      v567 = v438;
      uint64_t v568 = 0;
      uint64_t v569 = 0;
      int v439 = v556;
      unsigned int v440 = v555;
      sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 2);
      __int16 v413 = v563;
      uint64_t v441 = (2 * v440) | 0x100000000;
      if (!v439) {
        uint64_t v441 = 0;
      }
      *(void *)a3 = v437;
      *(void *)(a3 + 8) = v438;
      uint64_t v442 = v564;
      *(void *)(a3 + 16) = v441;
      *(void *)(a3 + 24) = v442;
      *(_DWORD *)(a3 + 32) = v565;
      uint64_t v209 = v554;
      *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
      int v416 = 35;
      goto LABEL_592;
    case 36:
      uint64_t v177 = *(void *)(a2 + 8);
      v544 = &unk_26C6717A0;
      sub_215C506DC(v177, (uint64_t)&v545);
      uint64_t v178 = v545;
      if (v545)
      {
        uint64_t v179 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v179->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
            std::__shared_weak_count::__release_weak(v179);
          }
          uint64_t v178 = v545;
          uint64_t v180 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v180->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
              std::__shared_weak_count::__release_weak(v180);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v178 + 32))(&v566, v178);
        uint64_t v181 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 4);
        __int16 v529 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v536 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v536;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v181;
        int v531 = 36;
        goto LABEL_662;
      }
      v552 = &unk_26C671620;
      sub_215922F18((uint64_t)&v544, (uint64_t)&v553);
      uint64_t v443 = v553;
      uint64_t v444 = v554;
      if (v554) {
        atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v566 = v443;
      v567 = v444;
      uint64_t v568 = 0;
      uint64_t v569 = 0;
      int v445 = v556;
      unsigned int v446 = v555;
      sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 4);
      __int16 v413 = v563;
      uint64_t v447 = (4 * v446) | 0x100000000;
      if (!v445) {
        uint64_t v447 = 0;
      }
      *(void *)a3 = v443;
      *(void *)(a3 + 8) = v444;
      uint64_t v448 = v564;
      *(void *)(a3 + 16) = v447;
      *(void *)(a3 + 24) = v448;
      *(_DWORD *)(a3 + 32) = v565;
      uint64_t v209 = v554;
      *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
      int v416 = 36;
      goto LABEL_592;
    case 37:
      uint64_t v182 = *(void *)(a2 + 8);
      v544 = &unk_26C671A18;
      sub_215C50D5C(v182, (uint64_t)&v545);
      uint64_t v183 = v545;
      if (v545)
      {
        uint64_t v184 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v184->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
            std::__shared_weak_count::__release_weak(v184);
          }
          uint64_t v183 = v545;
          uint64_t v185 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v185->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
              std::__shared_weak_count::__release_weak(v185);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v183 + 32))(&v566, v183);
        uint64_t v186 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 1);
        __int16 v529 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v537 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v537;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v186;
        int v531 = 37;
        goto LABEL_662;
      }
      v552 = &unk_26C671898;
      sub_215924058((uint64_t)&v544, (uint64_t)&v553);
      uint64_t v450 = v553;
      __int16 v449 = v554;
      if (v554) {
        atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v566 = v450;
      v567 = v449;
      uint64_t v568 = 0;
      uint64_t v569 = 0;
      int v451 = v556;
      uint64_t v452 = v555;
      sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 1);
      uint64_t v453 = v452 | 0x100000000;
      __int16 v428 = v563;
      if (!v451) {
        uint64_t v453 = 0;
      }
      *(void *)a3 = v450;
      *(void *)(a3 + 8) = v449;
      uint64_t v454 = v564;
      *(void *)(a3 + 16) = v453;
      *(void *)(a3 + 24) = v454;
      *(_DWORD *)(a3 + 32) = v565;
      uint64_t v209 = v554;
      *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
      int v430 = 37;
LABEL_575:
      *(_DWORD *)(a3 + 48) = v430;
      *(_WORD *)(a3 + 52) = v428;
      if (!v209) {
        goto LABEL_664;
      }
      goto LABEL_593;
    case 38:
      uint64_t v187 = *(void *)(a2 + 8);
      v544 = &unk_26C671C90;
      sub_215C513D8(v187, (uint64_t)&v545);
      uint64_t v188 = v545;
      if (v545)
      {
        uint64_t v189 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v189->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
            std::__shared_weak_count::__release_weak(v189);
          }
          uint64_t v188 = v545;
          v190 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v190->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
              std::__shared_weak_count::__release_weak(v190);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v188 + 32))(&v566, v188);
        uint64_t v191 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 2);
        __int16 v529 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v538 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v538;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v191;
        int v531 = 38;
        goto LABEL_662;
      }
      v552 = &unk_26C671B10;
      sub_215925138((uint64_t)&v544, (uint64_t)&v553);
      long long v455 = v553;
      uint64_t v456 = v554;
      if (v554) {
        atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v566 = v455;
      v567 = v456;
      uint64_t v568 = 0;
      uint64_t v569 = 0;
      int v457 = v556;
      unsigned int v458 = v555;
      sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 2);
      __int16 v413 = v563;
      uint64_t v459 = (2 * v458) | 0x100000000;
      if (!v457) {
        uint64_t v459 = 0;
      }
      *(void *)a3 = v455;
      *(void *)(a3 + 8) = v456;
      uint64_t v460 = v564;
      *(void *)(a3 + 16) = v459;
      *(void *)(a3 + 24) = v460;
      *(_DWORD *)(a3 + 32) = v565;
      uint64_t v209 = v554;
      *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
      int v416 = 38;
      goto LABEL_592;
    case 39:
      uint64_t v192 = *(void *)(a2 + 8);
      v544 = &unk_26C671F08;
      sub_215C51A58(v192, (uint64_t)&v545);
      uint64_t v193 = v545;
      if (v545)
      {
        uint64_t v194 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v194->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
            std::__shared_weak_count::__release_weak(v194);
          }
          uint64_t v193 = v545;
          uint64_t v195 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v195->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
              std::__shared_weak_count::__release_weak(v195);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v193 + 32))(&v566, v193);
        uint64_t v196 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 2);
        __int16 v529 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v539 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v539;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v196;
        int v531 = 39;
        goto LABEL_662;
      }
      v552 = &unk_26C671D88;
      sub_215926278((uint64_t)&v544, (uint64_t)&v553);
      uint64_t v461 = v553;
      uint64_t v462 = v554;
      if (v554) {
        atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v566 = v461;
      v567 = v462;
      uint64_t v568 = 0;
      uint64_t v569 = 0;
      int v463 = v556;
      unsigned int v464 = v555;
      sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 2);
      __int16 v413 = v563;
      uint64_t v465 = (2 * v464) | 0x100000000;
      if (!v463) {
        uint64_t v465 = 0;
      }
      *(void *)a3 = v461;
      *(void *)(a3 + 8) = v462;
      uint64_t v466 = v564;
      *(void *)(a3 + 16) = v465;
      *(void *)(a3 + 24) = v466;
      *(_DWORD *)(a3 + 32) = v565;
      uint64_t v209 = v554;
      *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
      int v416 = 39;
      goto LABEL_592;
    case 40:
      uint64_t v197 = *(void *)(a2 + 8);
      v544 = &unk_26C672180;
      sub_215C520D8(v197, (uint64_t)&v545);
      uint64_t v198 = v545;
      if (v545)
      {
        uint64_t v199 = v546;
        if (v546)
        {
          atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v199->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
            std::__shared_weak_count::__release_weak(v199);
          }
          uint64_t v198 = v545;
          uint64_t v200 = v546;
          if (v546)
          {
            atomic_fetch_add_explicit(&v546->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v200->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
              std::__shared_weak_count::__release_weak(v200);
            }
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v198 + 32))(&v566, v198);
        uint64_t v201 = (*(uint64_t (**)(void *))(*(void *)v566 + 48))(v566);
        v552 = v566;
        if (v566) {
          operator new();
        }
        v553 = 0;
        v566 = 0;
        sub_215DC93A4((uint64_t)&v568, 3, (uint64_t)&v547, 3, (uint64_t)v549, 4);
        __int16 v529 = v551;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        uint64_t v540 = v568;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = v540;
        *(_DWORD *)(a3 + 32) = v569;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v201;
        int v531 = 40;
LABEL_662:
        *(_DWORD *)(a3 + 48) = v531;
        *(_WORD *)(a3 + 52) = v529;
        __int16 v476 = v566;
        v566 = 0;
        if (v476) {
LABEL_663:
        }
          (*(void (**)(void *))(*(void *)v476 + 8))(v476);
      }
      else
      {
        v552 = &unk_26C672000;
        sub_215927318((uint64_t)&v544, (uint64_t)&v553);
        __int16 v467 = v553;
        uint64_t v468 = v554;
        if (v554) {
          atomic_fetch_add_explicit(&v554->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v566 = v467;
        v567 = v468;
        uint64_t v568 = 0;
        uint64_t v569 = 0;
        int v469 = v556;
        unsigned int v470 = v555;
        sub_215DC93A4((uint64_t)&v564, 3, (uint64_t)v561, 3, (uint64_t)v562, 4);
        __int16 v413 = v563;
        uint64_t v471 = (4 * v470) | 0x100000000;
        if (!v469) {
          uint64_t v471 = 0;
        }
        *(void *)a3 = v467;
        *(void *)(a3 + 8) = v468;
        uint64_t v472 = v564;
        *(void *)(a3 + 16) = v471;
        *(void *)(a3 + 24) = v472;
        *(_DWORD *)(a3 + 32) = v565;
        uint64_t v209 = v554;
        *(void *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v557;
        int v416 = 40;
LABEL_592:
        *(_DWORD *)(a3 + 48) = v416;
        *(_WORD *)(a3 + 52) = v413;
        if (v209)
        {
LABEL_593:
          if (!atomic_fetch_add(&v209->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
            std::__shared_weak_count::__release_weak(v209);
          }
        }
      }
LABEL_664:
      uint64_t v541 = v546;
      if (v546)
      {
        if (!atomic_fetch_add(&v546->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v541->__on_zero_shared)(v541);
          std::__shared_weak_count::__release_weak(v541);
        }
      }
      return;
    default:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_215E1ABD8);
      abort();
  }
}

void sub_215DA32F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_215733368(v12 - 96);
  sub_215733368(v12 - 80);
  sub_215926C94((uint64_t)va);
  if (a5)
  {
    if (!atomic_fetch_add(&a5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  _Unwind_Resume(a1);
}

size_t *sub_215DA3CC4(size_t *a1, _DWORD *a2, void **a3, char a4, uint64_t a5, char a6, uint64_t a7)
{
  if (a4)
  {
    BOOL v11 = *a3;
    int v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    int v12 = a2[1];
    if (v12) {
      uint64_t v13 = v13;
    }
    else {
      uint64_t v13 = 0;
    }
    BOOL v11 = (void *)((*a2 != 0) | (unint64_t)(v13 << 32));
  }
  size_t v14 = (v12 * HIDWORD(v11));
  unint64_t v15 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  unint64_t v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
  unint64_t v17 = v16 | (v16 >> 16) | ((v16 | (v16 >> 16)) >> 32);
  if (v17 + 1 > 8) {
    size_t v18 = v17 + 1;
  }
  else {
    size_t v18 = 8;
  }
  *a1 = v14;
  a1[1] = 0;
  a1[2] = v18;
  if (v14)
  {
    memptr[0] = 0;
    int v19 = malloc_type_posix_memalign(memptr, v18, v14, 0x1F88E90uLL);
    if (v19) {
      sub_215E0D744(v19, a1[2], v14);
    }
    unint64_t v20 = memptr[0];
    a1[1] = (size_t)memptr[0];
    unint64_t v21 = *(void *)a2;
    a1[3] = *(void *)a2;
    a1[4] = (size_t)v11;
    if (v20 && a6)
    {
      if (v21) {
        BOOL v22 = HIDWORD(v21) == 0;
      }
      else {
        BOOL v22 = 1;
      }
      if (v22) {
        unint64_t v21 = 0;
      }
      memptr[0] = v20;
      memptr[1] = (void *)v21;
      memptr[2] = v11;
      if (HIDWORD(v21) * HIDWORD(v11) == -1
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      v25[0] = memptr;
      v25[1] = a5;
      sub_215B597A0(v25);
    }
  }
  else
  {
    a1[3] = *(void *)a2;
    a1[4] = (size_t)v11;
  }
  return a1;
}

void sub_215DA3E54(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)(v1 + 8);
  if (v3) {
    free(v3);
  }
  *(void *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

void sub_215DA3E74()
{
}

void sub_215DA3E88(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t v179 = *MEMORY[0x263EF8340];
  unint64_t v157 = a3;
  switch(a2)
  {
    case 1:
      LOBYTE(v158) = 0;
      if (HIDWORD(a3)) {
        BOOL v3 = a3 == 0;
      }
      else {
        BOOL v3 = 1;
      }
      if (v3) {
        unint64_t v4 = 0;
      }
      else {
        unint64_t v4 = a3;
      }
      unint64_t v5 = v4 << 32;
      if (!HIDWORD(v4)) {
        unint64_t v5 = 0;
      }
      BOOL v6 = v4 != 0;
      if (v4) {
        BOOL v7 = HIDWORD(v4) == 0;
      }
      else {
        BOOL v7 = 1;
      }
      *(void *)uint64_t v172 = v4;
      *(void *)&v172[8] = v5 | v6;
      v172[16] = 0;
      v172[24] = 0;
      uint64_t v162 = v5 | v6;
      if (v7) {
        unint64_t v4 = 0;
      }
      uint64_t v159 = &unk_26C66AE18;
      unint64_t v160 = v4;
      if ((HIDWORD(v5) & (HIDWORD(v5) - 1)) != 0) {
        uint64_t v8 = 1;
      }
      else {
        uint64_t v8 = HIDWORD(v5);
      }
      uint64_t v9 = sub_215DA3CC4((size_t *)&v173, &v160, (void **)&v162, 1, (uint64_t)&v158, 1, v8);
      uint64_t v164 = &unk_26C663A60;
      *(_OWORD *)uint64_t v165 = *(_OWORD *)v172;
      *(_OWORD *)&v165[12] = *(_OWORD *)&v172[12];
      *(void *)&long long v166 = *v9;
      *((void *)&v166 + 1) = *((void *)&v173 + 1);
      uint64_t v167 = v174;
      long long v168 = v175;
      operator new();
    case 2:
      LOWORD(v158) = 0;
      if (HIDWORD(a3)) {
        BOOL v94 = a3 == 0;
      }
      else {
        BOOL v94 = 1;
      }
      if (v94) {
        unint64_t v95 = 0;
      }
      else {
        unint64_t v95 = a3;
      }
      unint64_t v96 = v95 << 32;
      if (!HIDWORD(v95)) {
        unint64_t v96 = 0;
      }
      BOOL v97 = v95 != 0;
      if (v95) {
        BOOL v98 = HIDWORD(v95) == 0;
      }
      else {
        BOOL v98 = 1;
      }
      *(void *)uint64_t v172 = v95;
      *(void *)&v172[8] = v96 | v97;
      v172[16] = 0;
      v172[24] = 0;
      uint64_t v162 = v96 | v97;
      if (v98) {
        unint64_t v95 = 0;
      }
      uint64_t v159 = &unk_26C66C328;
      unint64_t v160 = v95;
      if (((v96 >> 31) & ((v96 >> 31) - 1)) != 0) {
        uint64_t v99 = 2;
      }
      else {
        uint64_t v99 = v96 >> 31;
      }
      uint64_t v100 = sub_215DA906C((unint64_t *)&v173, &v160, (unint64_t *)&v162, 1, &v158, 1, v99);
      uint64_t v164 = &unk_26C663AE0;
      *(_OWORD *)uint64_t v165 = *(_OWORD *)v172;
      *(_OWORD *)&v165[12] = *(_OWORD *)&v172[12];
      *(void *)&long long v166 = *v100;
      *((void *)&v166 + 1) = *((void *)&v173 + 1);
      uint64_t v167 = v174;
      long long v168 = v175;
      operator new();
    case 3:
      LOWORD(v158) = 0;
      if (HIDWORD(a3)) {
        BOOL v87 = a3 == 0;
      }
      else {
        BOOL v87 = 1;
      }
      if (v87) {
        unint64_t v88 = 0;
      }
      else {
        unint64_t v88 = a3;
      }
      unint64_t v89 = v88 << 32;
      if (!HIDWORD(v88)) {
        unint64_t v89 = 0;
      }
      BOOL v90 = v88 != 0;
      if (v88) {
        BOOL v91 = HIDWORD(v88) == 0;
      }
      else {
        BOOL v91 = 1;
      }
      *(void *)uint64_t v172 = v88;
      *(void *)&v172[8] = v89 | v90;
      v172[16] = 0;
      v172[24] = 0;
      uint64_t v162 = v89 | v90;
      if (v91) {
        unint64_t v88 = 0;
      }
      uint64_t v159 = &unk_26C66C5A0;
      unint64_t v160 = v88;
      if (((v89 >> 31) & ((v89 >> 31) - 1)) != 0) {
        uint64_t v92 = 2;
      }
      else {
        uint64_t v92 = v89 >> 31;
      }
      uint64_t v93 = sub_215DA92D8((unint64_t *)&v173, &v160, (unint64_t *)&v162, 1, &v158, 1, v92);
      uint64_t v164 = &unk_26C663B60;
      *(_OWORD *)uint64_t v165 = *(_OWORD *)v172;
      *(_OWORD *)&v165[12] = *(_OWORD *)&v172[12];
      *(void *)&long long v166 = *v93;
      *((void *)&v166 + 1) = *((void *)&v173 + 1);
      uint64_t v167 = v174;
      long long v168 = v175;
      operator new();
    case 4:
      int v158 = 0;
      if (HIDWORD(a3)) {
        BOOL v52 = a3 == 0;
      }
      else {
        BOOL v52 = 1;
      }
      if (v52) {
        unint64_t v53 = 0;
      }
      else {
        unint64_t v53 = a3;
      }
      unint64_t v54 = v53 << 32;
      if (!HIDWORD(v53)) {
        unint64_t v54 = 0;
      }
      BOOL v55 = v53 != 0;
      if (v53) {
        BOOL v56 = HIDWORD(v53) == 0;
      }
      else {
        BOOL v56 = 1;
      }
      *(void *)uint64_t v172 = v53;
      *(void *)&v172[8] = v54 | v55;
      v172[16] = 0;
      v172[24] = 0;
      uint64_t v162 = v54 | v55;
      if (v56) {
        unint64_t v53 = 0;
      }
      uint64_t v159 = &unk_26C66C818;
      unint64_t v160 = v53;
      if (((v54 >> 30) & ((v54 >> 30) - 1)) != 0) {
        uint64_t v57 = 4;
      }
      else {
        uint64_t v57 = v54 >> 30;
      }
      uint64_t v58 = sub_215DA9608((unint64_t *)&v173, &v160, (unint64_t *)&v162, 1, &v158, 1, v57);
      uint64_t v164 = &unk_26C663BE0;
      *(_OWORD *)uint64_t v165 = *(_OWORD *)v172;
      *(_OWORD *)&v165[12] = *(_OWORD *)&v172[12];
      *(void *)&long long v166 = *v58;
      *((void *)&v166 + 1) = *((void *)&v173 + 1);
      uint64_t v167 = v174;
      long long v168 = v175;
      operator new();
    case 5:
      uint64_t v159 = &unk_26C66CA90;
      LOBYTE(v158) = 0;
      if (HIDWORD(a3)) {
        BOOL v73 = a3 == 0;
      }
      else {
        BOOL v73 = 1;
      }
      if (v73) {
        unint64_t v74 = 0;
      }
      else {
        unint64_t v74 = a3;
      }
      *(void *)&v172[4] = v74;
      *(_DWORD *)uint64_t v172 = 2;
      uint64_t v75 = 2 * (v74 != 0);
      LODWORD(v76) = v75 * v74;
      unint64_t v77 = HIDWORD(v74);
      if (HIDWORD(v74)) {
        unint64_t v76 = v76;
      }
      else {
        unint64_t v76 = 0;
      }
      unint64_t v78 = v75 & 0x1FFFFFFFFLL | ((unint64_t)(v76 >> 1) << 33);
      *(_DWORD *)uint64_t v172 = 2;
      unint64_t v79 = *(void *)v172;
      *(_DWORD *)&v172[4] = v78;
      *(_DWORD *)uint64_t v172 = 1;
      *(_DWORD *)&v172[8] = HIDWORD(v74);
      *(void *)&v172[12] = *(void *)v172;
      *(_DWORD *)&v172[20] = v76;
      *(void *)uint64_t v172 = v79;
      *(void *)&v172[24] = v74;
      *(void *)&long long v173 = v78;
      BYTE8(v173) = 0;
      BYTE4(v174) = 0;
      uint64_t v162 = *(void *)&v172[12];
      int v163 = v76;
      if (HIDWORD(v79)) {
        BOOL v80 = v79 == 0;
      }
      else {
        BOOL v80 = 1;
      }
      BOOL v81 = v80 || HIDWORD(v74) == 0;
      if (v81) {
        unint64_t v82 = 0;
      }
      else {
        unint64_t v82 = v79;
      }
      unint64_t v160 = v82;
      if (v81) {
        int v83 = 0;
      }
      else {
        int v83 = v77;
      }
      int v161 = v83;
      if ((v76 & (v76 - 1)) != 0) {
        uint64_t v84 = 1;
      }
      else {
        uint64_t v84 = v76;
      }
      uint64_t v85 = sub_215DA9874((size_t *)&v175, (unsigned int *)&v160, (uint64_t)&v162, 1, &v158, 1, v84);
      *(_OWORD *)uint64_t v165 = *(_OWORD *)v172;
      uint64_t v164 = &unk_26C663C60;
      *(_OWORD *)&v165[16] = *(_OWORD *)&v172[16];
      long long v166 = v173;
      size_t v86 = *v85;
      uint64_t v167 = v174;
      *(void *)&long long v168 = v86;
      *((void *)&v168 + 1) = *((void *)&v175 + 1);
      uint64_t v169 = v176;
      uint64_t v171 = v178;
      long long v170 = v177;
      operator new();
    case 6:
      *(void *)uint64_t v172 = &unk_26C66CD08;
      LOWORD(v162) = 0;
      sub_215D93CD8(&v157, (const __int16 *)&v162, (uint64_t)&v164);
      operator new();
    case 7:
      *(void *)uint64_t v172 = &unk_26C66CF80;
      LOWORD(v162) = 0;
      sub_215D93FE4(&v157, &v162, (uint64_t)&v164);
      operator new();
    case 8:
      *(void *)uint64_t v172 = &unk_26C66D1F8;
      LODWORD(v162) = 0;
      sub_215D944DC(&v157, (const float *)&v162, (uint64_t)&v164);
      operator new();
    case 9:
      uint64_t v159 = &unk_26C66D470;
      LOBYTE(v158) = 0;
      if (HIDWORD(a3)) {
        BOOL v59 = a3 == 0;
      }
      else {
        BOOL v59 = 1;
      }
      if (v59) {
        unint64_t v60 = 0;
      }
      else {
        unint64_t v60 = a3;
      }
      *(void *)&v172[4] = v60;
      *(_DWORD *)uint64_t v172 = 3;
      if (v60) {
        uint64_t v61 = 3;
      }
      else {
        uint64_t v61 = 0;
      }
      LODWORD(v62) = v61 * *(_DWORD *)&v172[4];
      uint64_t v63 = HIDWORD(*(void *)&v172[4]);
      if (HIDWORD(*(void *)&v172[4])) {
        uint64_t v62 = v62;
      }
      else {
        uint64_t v62 = 0;
      }
      uint64_t v64 = v61 | (v62 << 32);
      *(_DWORD *)uint64_t v172 = 3;
      unint64_t v65 = *(void *)v172;
      *(_DWORD *)&v172[4] = v64;
      *(_DWORD *)uint64_t v172 = 1;
      *(_DWORD *)&v172[8] = v63;
      *(void *)&v172[12] = *(void *)v172;
      *(_DWORD *)&v172[20] = v62;
      *(void *)uint64_t v172 = v65;
      *(void *)&v172[24] = v60;
      *(void *)&long long v173 = v64;
      BYTE8(v173) = 0;
      BYTE4(v174) = 0;
      uint64_t v162 = *(void *)&v172[12];
      int v163 = v62;
      if (HIDWORD(v65)) {
        BOOL v66 = v65 == 0;
      }
      else {
        BOOL v66 = 1;
      }
      BOOL v67 = v66 || v63 == 0;
      if (v67) {
        unint64_t v68 = 0;
      }
      else {
        unint64_t v68 = v65;
      }
      unint64_t v160 = v68;
      if (v67) {
        int v69 = 0;
      }
      else {
        int v69 = v63;
      }
      int v161 = v69;
      if ((v62 & (v62 - 1)) != 0) {
        uint64_t v70 = 1;
      }
      else {
        uint64_t v70 = v62;
      }
      uint64_t v71 = sub_215DA9874((size_t *)&v175, (unsigned int *)&v160, (uint64_t)&v162, 1, &v158, 1, v70);
      *(_OWORD *)uint64_t v165 = *(_OWORD *)v172;
      uint64_t v164 = &unk_26C663E60;
      *(_OWORD *)&v165[16] = *(_OWORD *)&v172[16];
      long long v166 = v173;
      size_t v72 = *v71;
      uint64_t v167 = v174;
      *(void *)&long long v168 = v72;
      *((void *)&v168 + 1) = *((void *)&v175 + 1);
      uint64_t v169 = v176;
      uint64_t v171 = v178;
      long long v170 = v177;
      operator new();
    case 10:
      *(void *)uint64_t v172 = &unk_26C66D6E8;
      LOWORD(v162) = 0;
      sub_215D94D4C(&v157, (const __int16 *)&v162, (uint64_t)&v164);
      operator new();
    case 11:
      *(void *)uint64_t v172 = &unk_26C66D960;
      LOWORD(v162) = 0;
      sub_215D95058(&v157, &v162, (uint64_t)&v164);
      operator new();
    case 12:
      *(void *)uint64_t v172 = &unk_26C66DBD8;
      LODWORD(v162) = 0;
      sub_215D95544(&v157, (const float *)&v162, (uint64_t)&v164);
      operator new();
    case 13:
      uint64_t v159 = &unk_26C66DE50;
      LOBYTE(v158) = 0;
      if (HIDWORD(a3)) {
        BOOL v38 = a3 == 0;
      }
      else {
        BOOL v38 = 1;
      }
      if (v38) {
        unint64_t v39 = 0;
      }
      else {
        unint64_t v39 = a3;
      }
      *(void *)&v172[4] = v39;
      *(_DWORD *)uint64_t v172 = 4;
      uint64_t v40 = 4 * (v39 != 0);
      LODWORD(v41) = v40 * v39;
      unint64_t v42 = HIDWORD(v39);
      if (HIDWORD(v39)) {
        unint64_t v41 = v41;
      }
      else {
        unint64_t v41 = 0;
      }
      unint64_t v43 = v40 & 0x3FFFFFFFFLL | ((unint64_t)(v41 >> 2) << 34);
      *(_DWORD *)uint64_t v172 = 4;
      unint64_t v44 = *(void *)v172;
      *(_DWORD *)&v172[4] = v43;
      *(_DWORD *)uint64_t v172 = 1;
      *(_DWORD *)&v172[8] = HIDWORD(v39);
      *(void *)&v172[12] = *(void *)v172;
      *(_DWORD *)&v172[20] = v41;
      *(void *)uint64_t v172 = v44;
      *(void *)&v172[24] = v39;
      *(void *)&long long v173 = v43;
      BYTE8(v173) = 0;
      BYTE4(v174) = 0;
      uint64_t v162 = *(void *)&v172[12];
      int v163 = v41;
      if (HIDWORD(v44)) {
        BOOL v45 = v44 == 0;
      }
      else {
        BOOL v45 = 1;
      }
      BOOL v46 = v45 || HIDWORD(v39) == 0;
      if (v46) {
        unint64_t v47 = 0;
      }
      else {
        unint64_t v47 = v44;
      }
      unint64_t v160 = v47;
      if (v46) {
        int v48 = 0;
      }
      else {
        int v48 = v42;
      }
      int v161 = v48;
      if ((v41 & (v41 - 1)) != 0) {
        uint64_t v49 = 1;
      }
      else {
        uint64_t v49 = v41;
      }
      uint64_t v50 = sub_215DA9874((size_t *)&v175, (unsigned int *)&v160, (uint64_t)&v162, 1, &v158, 1, v49);
      *(_OWORD *)uint64_t v165 = *(_OWORD *)v172;
      uint64_t v164 = &unk_26C664060;
      *(_OWORD *)&v165[16] = *(_OWORD *)&v172[16];
      long long v166 = v173;
      size_t v51 = *v50;
      uint64_t v167 = v174;
      *(void *)&long long v168 = v51;
      *((void *)&v168 + 1) = *((void *)&v175 + 1);
      uint64_t v169 = v176;
      uint64_t v171 = v178;
      long long v170 = v177;
      operator new();
    case 14:
      *(void *)uint64_t v172 = &unk_26C66E0C8;
      LOWORD(v162) = 0;
      sub_215D95DBC(&v157, (const __int16 *)&v162, (uint64_t)&v164);
      operator new();
    case 15:
      *(void *)uint64_t v172 = &unk_26C66E340;
      LOWORD(v162) = 0;
      sub_215D960D0(&v157, &v162, (uint64_t)&v164);
      operator new();
    case 16:
      *(void *)uint64_t v172 = &unk_26C66E5B8;
      LODWORD(v162) = 0;
      sub_215D965D0(&v157, (const float *)&v162, (uint64_t)&v164);
      operator new();
    case 17:
      uint64_t v159 = &unk_26C66E830;
      LOBYTE(v158) = 0;
      if (HIDWORD(a3)) {
        BOOL v129 = a3 == 0;
      }
      else {
        BOOL v129 = 1;
      }
      if (v129) {
        unint64_t v130 = 0;
      }
      else {
        unint64_t v130 = a3;
      }
      *(void *)&v172[4] = v130;
      *(_DWORD *)uint64_t v172 = 3;
      if (v130) {
        uint64_t v131 = 3;
      }
      else {
        uint64_t v131 = 0;
      }
      LODWORD(v132) = v131 * *(_DWORD *)&v172[4];
      uint64_t v133 = HIDWORD(*(void *)&v172[4]);
      if (HIDWORD(*(void *)&v172[4])) {
        uint64_t v132 = v132;
      }
      else {
        uint64_t v132 = 0;
      }
      uint64_t v134 = v131 | (v132 << 32);
      *(_DWORD *)uint64_t v172 = 3;
      unint64_t v135 = *(void *)v172;
      *(_DWORD *)&v172[4] = v134;
      *(_DWORD *)uint64_t v172 = 1;
      *(_DWORD *)&v172[8] = v133;
      *(void *)&v172[12] = *(void *)v172;
      *(_DWORD *)&v172[20] = v132;
      *(void *)uint64_t v172 = v135;
      *(void *)&v172[24] = v130;
      *(void *)&long long v173 = v134;
      BYTE8(v173) = 0;
      BYTE4(v174) = 0;
      uint64_t v162 = *(void *)&v172[12];
      int v163 = v132;
      if (HIDWORD(v135)) {
        BOOL v136 = v135 == 0;
      }
      else {
        BOOL v136 = 1;
      }
      BOOL v137 = v136 || v133 == 0;
      if (v137) {
        unint64_t v138 = 0;
      }
      else {
        unint64_t v138 = v135;
      }
      unint64_t v160 = v138;
      if (v137) {
        int v139 = 0;
      }
      else {
        int v139 = v133;
      }
      int v161 = v139;
      if ((v132 & (v132 - 1)) != 0) {
        uint64_t v140 = 1;
      }
      else {
        uint64_t v140 = v132;
      }
      uint64_t v141 = sub_215DA9874((size_t *)&v175, (unsigned int *)&v160, (uint64_t)&v162, 1, &v158, 1, v140);
      *(_OWORD *)uint64_t v165 = *(_OWORD *)v172;
      uint64_t v164 = &unk_26C664260;
      *(_OWORD *)&v165[16] = *(_OWORD *)&v172[16];
      long long v166 = v173;
      size_t v142 = *v141;
      uint64_t v167 = v174;
      *(void *)&long long v168 = v142;
      *((void *)&v168 + 1) = *((void *)&v175 + 1);
      uint64_t v169 = v176;
      uint64_t v171 = v178;
      long long v170 = v177;
      operator new();
    case 18:
      *(void *)uint64_t v172 = &unk_26C66EAA8;
      LOWORD(v162) = 0;
      sub_215D96E3C(&v157, (const __int16 *)&v162, (uint64_t)&v164);
      operator new();
    case 19:
      *(void *)uint64_t v172 = &unk_26C66ED20;
      LOWORD(v162) = 0;
      sub_215D97148(&v157, &v162, (uint64_t)&v164);
      operator new();
    case 20:
      *(void *)uint64_t v172 = &unk_26C66EF98;
      LODWORD(v162) = 0;
      sub_215D97634(&v157, (const float *)&v162, (uint64_t)&v164);
      operator new();
    case 21:
      uint64_t v159 = &unk_26C66F210;
      LOBYTE(v158) = 0;
      if (HIDWORD(a3)) {
        BOOL v143 = a3 == 0;
      }
      else {
        BOOL v143 = 1;
      }
      if (v143) {
        unint64_t v144 = 0;
      }
      else {
        unint64_t v144 = a3;
      }
      *(void *)&v172[4] = v144;
      *(_DWORD *)uint64_t v172 = 3;
      if (v144) {
        uint64_t v145 = 3;
      }
      else {
        uint64_t v145 = 0;
      }
      LODWORD(v146) = v145 * *(_DWORD *)&v172[4];
      uint64_t v147 = HIDWORD(*(void *)&v172[4]);
      if (HIDWORD(*(void *)&v172[4])) {
        uint64_t v146 = v146;
      }
      else {
        uint64_t v146 = 0;
      }
      uint64_t v148 = v145 | (v146 << 32);
      *(_DWORD *)uint64_t v172 = 3;
      unint64_t v149 = *(void *)v172;
      *(_DWORD *)&v172[4] = v148;
      *(_DWORD *)uint64_t v172 = 1;
      *(_DWORD *)&v172[8] = v147;
      *(void *)&v172[12] = *(void *)v172;
      *(_DWORD *)&v172[20] = v146;
      *(void *)uint64_t v172 = v149;
      *(void *)&v172[24] = v144;
      *(void *)&long long v173 = v148;
      BYTE8(v173) = 0;
      BYTE4(v174) = 0;
      uint64_t v162 = *(void *)&v172[12];
      int v163 = v146;
      if (HIDWORD(v149)) {
        BOOL v150 = v149 == 0;
      }
      else {
        BOOL v150 = 1;
      }
      BOOL v151 = v150 || v147 == 0;
      if (v151) {
        unint64_t v152 = 0;
      }
      else {
        unint64_t v152 = v149;
      }
      unint64_t v160 = v152;
      if (v151) {
        int v153 = 0;
      }
      else {
        int v153 = v147;
      }
      int v161 = v153;
      if ((v146 & (v146 - 1)) != 0) {
        uint64_t v154 = 1;
      }
      else {
        uint64_t v154 = v146;
      }
      uint64_t v155 = sub_215DA9874((size_t *)&v175, (unsigned int *)&v160, (uint64_t)&v162, 1, &v158, 1, v154);
      *(_OWORD *)uint64_t v165 = *(_OWORD *)v172;
      uint64_t v164 = &unk_26C664460;
      *(_OWORD *)&v165[16] = *(_OWORD *)&v172[16];
      long long v166 = v173;
      size_t v156 = *v155;
      uint64_t v167 = v174;
      *(void *)&long long v168 = v156;
      *((void *)&v168 + 1) = *((void *)&v175 + 1);
      uint64_t v169 = v176;
      uint64_t v171 = v178;
      long long v170 = v177;
      operator new();
    case 22:
      *(void *)uint64_t v172 = &unk_26C66F488;
      LOWORD(v162) = 0;
      sub_215D97E9C(&v157, (const __int16 *)&v162, (uint64_t)&v164);
      operator new();
    case 23:
      *(void *)uint64_t v172 = &unk_26C66F700;
      LOWORD(v162) = 0;
      sub_215D981A8(&v157, &v162, (uint64_t)&v164);
      operator new();
    case 24:
      *(void *)uint64_t v172 = &unk_26C66F978;
      LODWORD(v162) = 0;
      sub_215D98694(&v157, (const float *)&v162, (uint64_t)&v164);
      operator new();
    case 25:
      uint64_t v159 = &unk_26C66FBF0;
      LOBYTE(v158) = 0;
      if (HIDWORD(a3)) {
        BOOL v10 = a3 == 0;
      }
      else {
        BOOL v10 = 1;
      }
      if (v10) {
        unint64_t v11 = 0;
      }
      else {
        unint64_t v11 = a3;
      }
      *(void *)&v172[4] = v11;
      *(_DWORD *)uint64_t v172 = 4;
      uint64_t v12 = 4 * (v11 != 0);
      LODWORD(v13) = v12 * v11;
      unint64_t v14 = HIDWORD(v11);
      if (HIDWORD(v11)) {
        unint64_t v13 = v13;
      }
      else {
        unint64_t v13 = 0;
      }
      unint64_t v15 = v12 & 0x3FFFFFFFFLL | ((unint64_t)(v13 >> 2) << 34);
      *(_DWORD *)uint64_t v172 = 4;
      unint64_t v16 = *(void *)v172;
      *(_DWORD *)&v172[4] = v15;
      *(_DWORD *)uint64_t v172 = 1;
      *(_DWORD *)&v172[8] = HIDWORD(v11);
      *(void *)&v172[12] = *(void *)v172;
      *(_DWORD *)&v172[20] = v13;
      *(void *)uint64_t v172 = v16;
      *(void *)&v172[24] = v11;
      *(void *)&long long v173 = v15;
      BYTE8(v173) = 0;
      BYTE4(v174) = 0;
      uint64_t v162 = *(void *)&v172[12];
      int v163 = v13;
      if (HIDWORD(v16)) {
        BOOL v17 = v16 == 0;
      }
      else {
        BOOL v17 = 1;
      }
      BOOL v18 = v17 || HIDWORD(v11) == 0;
      if (v18) {
        unint64_t v19 = 0;
      }
      else {
        unint64_t v19 = v16;
      }
      unint64_t v160 = v19;
      if (v18) {
        int v20 = 0;
      }
      else {
        int v20 = v14;
      }
      int v161 = v20;
      if ((v13 & (v13 - 1)) != 0) {
        uint64_t v21 = 1;
      }
      else {
        uint64_t v21 = v13;
      }
      BOOL v22 = sub_215DA9874((size_t *)&v175, (unsigned int *)&v160, (uint64_t)&v162, 1, &v158, 1, v21);
      *(_OWORD *)uint64_t v165 = *(_OWORD *)v172;
      uint64_t v164 = &unk_26C664660;
      *(_OWORD *)&v165[16] = *(_OWORD *)&v172[16];
      long long v166 = v173;
      size_t v23 = *v22;
      uint64_t v167 = v174;
      *(void *)&long long v168 = v23;
      *((void *)&v168 + 1) = *((void *)&v175 + 1);
      uint64_t v169 = v176;
      uint64_t v171 = v178;
      long long v170 = v177;
      operator new();
    case 26:
      *(void *)uint64_t v172 = &unk_26C66FE68;
      LOWORD(v162) = 0;
      sub_215D98F0C(&v157, (const __int16 *)&v162, (uint64_t)&v164);
      operator new();
    case 27:
      *(void *)uint64_t v172 = &unk_26C6700E0;
      LOWORD(v162) = 0;
      sub_215D99220(&v157, &v162, (uint64_t)&v164);
      operator new();
    case 28:
      *(void *)uint64_t v172 = &unk_26C670358;
      LODWORD(v162) = 0;
      sub_215D99720(&v157, (const float *)&v162, (uint64_t)&v164);
      operator new();
    case 29:
      uint64_t v159 = &unk_26C6705D0;
      LOBYTE(v158) = 0;
      if (HIDWORD(a3)) {
        BOOL v24 = a3 == 0;
      }
      else {
        BOOL v24 = 1;
      }
      if (v24) {
        unint64_t v25 = 0;
      }
      else {
        unint64_t v25 = a3;
      }
      *(void *)&v172[4] = v25;
      *(_DWORD *)uint64_t v172 = 4;
      uint64_t v26 = 4 * (v25 != 0);
      LODWORD(v27) = v26 * v25;
      unint64_t v28 = HIDWORD(v25);
      if (HIDWORD(v25)) {
        unint64_t v27 = v27;
      }
      else {
        unint64_t v27 = 0;
      }
      unint64_t v29 = v26 & 0x3FFFFFFFFLL | ((unint64_t)(v27 >> 2) << 34);
      *(_DWORD *)uint64_t v172 = 4;
      unint64_t v30 = *(void *)v172;
      *(_DWORD *)&v172[4] = v29;
      *(_DWORD *)uint64_t v172 = 1;
      *(_DWORD *)&v172[8] = HIDWORD(v25);
      *(void *)&v172[12] = *(void *)v172;
      *(_DWORD *)&v172[20] = v27;
      *(void *)uint64_t v172 = v30;
      *(void *)&v172[24] = v25;
      *(void *)&long long v173 = v29;
      BYTE8(v173) = 0;
      BYTE4(v174) = 0;
      uint64_t v162 = *(void *)&v172[12];
      int v163 = v27;
      if (HIDWORD(v30)) {
        BOOL v31 = v30 == 0;
      }
      else {
        BOOL v31 = 1;
      }
      BOOL v32 = v31 || HIDWORD(v25) == 0;
      if (v32) {
        unint64_t v33 = 0;
      }
      else {
        unint64_t v33 = v30;
      }
      unint64_t v160 = v33;
      if (v32) {
        int v34 = 0;
      }
      else {
        int v34 = v28;
      }
      int v161 = v34;
      if ((v27 & (v27 - 1)) != 0) {
        uint64_t v35 = 1;
      }
      else {
        uint64_t v35 = v27;
      }
      uint64_t v36 = sub_215DA9874((size_t *)&v175, (unsigned int *)&v160, (uint64_t)&v162, 1, &v158, 1, v35);
      *(_OWORD *)uint64_t v165 = *(_OWORD *)v172;
      uint64_t v164 = &unk_26C664860;
      *(_OWORD *)&v165[16] = *(_OWORD *)&v172[16];
      long long v166 = v173;
      size_t v37 = *v36;
      uint64_t v167 = v174;
      *(void *)&long long v168 = v37;
      *((void *)&v168 + 1) = *((void *)&v175 + 1);
      uint64_t v169 = v176;
      uint64_t v171 = v178;
      long long v170 = v177;
      operator new();
    case 30:
      *(void *)uint64_t v172 = &unk_26C670848;
      LOWORD(v162) = 0;
      sub_215D99F9C(&v157, (const __int16 *)&v162, (uint64_t)&v164);
      operator new();
    case 31:
      *(void *)uint64_t v172 = &unk_26C670AC0;
      LOWORD(v162) = 0;
      sub_215D9A2B0(&v157, &v162, (uint64_t)&v164);
      operator new();
    case 32:
      *(void *)uint64_t v172 = &unk_26C670D38;
      LODWORD(v162) = 0;
      sub_215D9A7B0(&v157, (const float *)&v162, (uint64_t)&v164);
      operator new();
    case 33:
      uint64_t v159 = &unk_26C670FB0;
      LOBYTE(v158) = 0;
      if (HIDWORD(a3)) {
        BOOL v115 = a3 == 0;
      }
      else {
        BOOL v115 = 1;
      }
      if (v115) {
        unint64_t v116 = 0;
      }
      else {
        unint64_t v116 = a3;
      }
      *(void *)&v172[4] = v116;
      *(_DWORD *)uint64_t v172 = 4;
      uint64_t v117 = 4 * (v116 != 0);
      LODWORD(v118) = v117 * v116;
      unint64_t v119 = HIDWORD(v116);
      if (HIDWORD(v116)) {
        unint64_t v118 = v118;
      }
      else {
        unint64_t v118 = 0;
      }
      unint64_t v120 = v117 & 0x3FFFFFFFFLL | ((unint64_t)(v118 >> 2) << 34);
      *(_DWORD *)uint64_t v172 = 4;
      unint64_t v121 = *(void *)v172;
      *(_DWORD *)&v172[4] = v120;
      *(_DWORD *)uint64_t v172 = 1;
      *(_DWORD *)&v172[8] = HIDWORD(v116);
      *(void *)&v172[12] = *(void *)v172;
      *(_DWORD *)&v172[20] = v118;
      *(void *)uint64_t v172 = v121;
      *(void *)&v172[24] = v116;
      *(void *)&long long v173 = v120;
      BYTE8(v173) = 0;
      BYTE4(v174) = 0;
      uint64_t v162 = *(void *)&v172[12];
      int v163 = v118;
      if (HIDWORD(v121)) {
        BOOL v122 = v121 == 0;
      }
      else {
        BOOL v122 = 1;
      }
      BOOL v123 = v122 || HIDWORD(v116) == 0;
      if (v123) {
        unint64_t v124 = 0;
      }
      else {
        unint64_t v124 = v121;
      }
      unint64_t v160 = v124;
      if (v123) {
        int v125 = 0;
      }
      else {
        int v125 = v119;
      }
      int v161 = v125;
      if ((v118 & (v118 - 1)) != 0) {
        uint64_t v126 = 1;
      }
      else {
        uint64_t v126 = v118;
      }
      uint64_t v127 = sub_215DA9874((size_t *)&v175, (unsigned int *)&v160, (uint64_t)&v162, 1, &v158, 1, v126);
      *(_OWORD *)uint64_t v165 = *(_OWORD *)v172;
      uint64_t v164 = &unk_26C664A60;
      *(_OWORD *)&v165[16] = *(_OWORD *)&v172[16];
      long long v166 = v173;
      size_t v128 = *v127;
      uint64_t v167 = v174;
      *(void *)&long long v168 = v128;
      *((void *)&v168 + 1) = *((void *)&v175 + 1);
      uint64_t v169 = v176;
      uint64_t v171 = v178;
      long long v170 = v177;
      operator new();
    case 34:
      *(void *)uint64_t v172 = &unk_26C671228;
      LOWORD(v162) = 0;
      sub_215D9B02C(&v157, (const __int16 *)&v162, (uint64_t)&v164);
      operator new();
    case 35:
      *(void *)uint64_t v172 = &unk_26C6714A0;
      LOWORD(v162) = 0;
      sub_215D9B340(&v157, &v162, (uint64_t)&v164);
      operator new();
    case 36:
      *(void *)uint64_t v172 = &unk_26C671718;
      LODWORD(v162) = 0;
      sub_215D9B840(&v157, (const float *)&v162, (uint64_t)&v164);
      operator new();
    case 37:
      uint64_t v159 = &unk_26C671990;
      LOBYTE(v158) = 0;
      if (HIDWORD(a3)) {
        BOOL v101 = a3 == 0;
      }
      else {
        BOOL v101 = 1;
      }
      if (v101) {
        unint64_t v102 = 0;
      }
      else {
        unint64_t v102 = a3;
      }
      *(void *)&v172[4] = v102;
      *(_DWORD *)uint64_t v172 = 4;
      uint64_t v103 = 4 * (v102 != 0);
      LODWORD(v104) = v103 * v102;
      unint64_t v105 = HIDWORD(v102);
      if (HIDWORD(v102)) {
        unint64_t v104 = v104;
      }
      else {
        unint64_t v104 = 0;
      }
      unint64_t v106 = v103 & 0x3FFFFFFFFLL | ((unint64_t)(v104 >> 2) << 34);
      *(_DWORD *)uint64_t v172 = 4;
      unint64_t v107 = *(void *)v172;
      *(_DWORD *)&v172[4] = v106;
      *(_DWORD *)uint64_t v172 = 1;
      *(_DWORD *)&v172[8] = HIDWORD(v102);
      *(void *)&v172[12] = *(void *)v172;
      *(_DWORD *)&v172[20] = v104;
      *(void *)uint64_t v172 = v107;
      *(void *)&v172[24] = v102;
      *(void *)&long long v173 = v106;
      BYTE8(v173) = 0;
      BYTE4(v174) = 0;
      uint64_t v162 = *(void *)&v172[12];
      int v163 = v104;
      if (HIDWORD(v107)) {
        BOOL v108 = v107 == 0;
      }
      else {
        BOOL v108 = 1;
      }
      BOOL v109 = v108 || HIDWORD(v102) == 0;
      if (v109) {
        unint64_t v110 = 0;
      }
      else {
        unint64_t v110 = v107;
      }
      unint64_t v160 = v110;
      if (v109) {
        int v111 = 0;
      }
      else {
        int v111 = v105;
      }
      int v161 = v111;
      if ((v104 & (v104 - 1)) != 0) {
        uint64_t v112 = 1;
      }
      else {
        uint64_t v112 = v104;
      }
      uint64_t v113 = sub_215DA9874((size_t *)&v175, (unsigned int *)&v160, (uint64_t)&v162, 1, &v158, 1, v112);
      *(_OWORD *)uint64_t v165 = *(_OWORD *)v172;
      uint64_t v164 = &unk_26C664C60;
      *(_OWORD *)&v165[16] = *(_OWORD *)&v172[16];
      long long v166 = v173;
      size_t v114 = *v113;
      uint64_t v167 = v174;
      *(void *)&long long v168 = v114;
      *((void *)&v168 + 1) = *((void *)&v175 + 1);
      uint64_t v169 = v176;
      uint64_t v171 = v178;
      long long v170 = v177;
      operator new();
    case 38:
      *(void *)uint64_t v172 = &unk_26C671C08;
      LOWORD(v162) = 0;
      sub_215D9C0BC(&v157, (const __int16 *)&v162, (uint64_t)&v164);
      operator new();
    case 39:
      *(void *)uint64_t v172 = &unk_26C671E80;
      LOWORD(v162) = 0;
      sub_215D9C3D0(&v157, &v162, (uint64_t)&v164);
      operator new();
    case 40:
      *(void *)uint64_t v172 = &unk_26C6720F8;
      LODWORD(v162) = 0;
      sub_215D9C8D0(&v157, (const float *)&v162, (uint64_t)&v164);
      operator new();
    default:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_215E1ABD8);
      abort();
  }
}

void sub_215DA5DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,int a26,void *a27,uint64_t a28,int a29,int a30,int a31,int a32,int a33,int a34)
{
  if (a27)
  {
    free(a27);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DA6570(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t v157 = *MEMORY[0x263EF8340];
  unint64_t v136 = a3;
  switch(a2)
  {
    case 1:
      *(void *)BOOL v150 = &unk_26C66AE18;
      sub_215D92D74(&v136, (uint64_t)&v142);
      operator new();
    case 2:
      *(void *)BOOL v150 = &unk_26C66C328;
      sub_215D92FBC(&v136, (uint64_t)&v142);
      operator new();
    case 3:
      if (HIDWORD(a3)) {
        BOOL v87 = a3 == 0;
      }
      else {
        BOOL v87 = 1;
      }
      if (v87) {
        unint64_t v88 = 0;
      }
      else {
        unint64_t v88 = a3;
      }
      unint64_t v89 = v88 << 32;
      if (!HIDWORD(v88)) {
        unint64_t v89 = 0;
      }
      BOOL v90 = v88 != 0;
      if (v88) {
        BOOL v91 = HIDWORD(v88) == 0;
      }
      else {
        BOOL v91 = 1;
      }
      *(void *)BOOL v150 = v88;
      *(void *)&v150[8] = v89 | v90;
      v150[16] = 0;
      v150[24] = 0;
      uint64_t v140 = (void *)(v89 | v90);
      if (v91) {
        unint64_t v88 = 0;
      }
      BOOL v137 = &unk_26C66C5A0;
      unint64_t v138 = v88;
      if (((v89 >> 31) & ((v89 >> 31) - 1)) != 0) {
        uint64_t v92 = 2;
      }
      else {
        uint64_t v92 = v89 >> 31;
      }
      uint64_t v93 = sub_215DA92D8((unint64_t *)&v151, &v138, (unint64_t *)&v140, 1, 0, 0, v92);
      size_t v142 = &unk_26C663B60;
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      *(_OWORD *)&v143[12] = *(_OWORD *)&v150[12];
      *(void *)&long long v144 = *v93;
      *((void *)&v144 + 1) = *((void *)&v151 + 1);
      uint64_t v145 = v152;
      long long v146 = v153;
      operator new();
    case 4:
      *(void *)BOOL v150 = &unk_26C66C818;
      sub_215D934B8(&v136, (uint64_t)&v142);
      operator new();
    case 5:
      *(void *)BOOL v150 = &unk_26C66CA90;
      sub_215D93938(&v136, (uint64_t)&v142);
      operator new();
    case 6:
      uint64_t v140 = &unk_26C66CD08;
      sub_215DAB130((uint64_t)v150, &v136);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C663CE0;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v145 = v152;
      long long v146 = v153;
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    case 7:
      BOOL v137 = &unk_26C66CF80;
      if (HIDWORD(a3)) {
        BOOL v31 = a3 == 0;
      }
      else {
        BOOL v31 = 1;
      }
      if (v31) {
        unint64_t v32 = 0;
      }
      else {
        unint64_t v32 = a3;
      }
      *(void *)&v150[4] = v32;
      *(_DWORD *)BOOL v150 = 2;
      uint64_t v33 = 2 * (v32 != 0);
      LODWORD(v34) = v33 * v32;
      unint64_t v35 = HIDWORD(v32);
      if (HIDWORD(v32)) {
        unint64_t v34 = v34;
      }
      else {
        unint64_t v34 = 0;
      }
      unint64_t v36 = v33 & 0x1FFFFFFFFLL | ((unint64_t)(v34 >> 1) << 33);
      *(_DWORD *)BOOL v150 = 2;
      *(void *)&v150[4] = v32;
      unint64_t v37 = *(void *)v150;
      *(_DWORD *)&v150[4] = v36;
      *(_DWORD *)BOOL v150 = 1;
      *(void *)&v150[12] = *(void *)v150;
      *(_DWORD *)&v150[20] = v34;
      *(void *)BOOL v150 = v37;
      *(void *)&v150[24] = v32;
      *(void *)&long long v151 = v36;
      BYTE8(v151) = 0;
      BYTE4(v152) = 0;
      uint64_t v140 = *(void **)&v150[12];
      int v141 = v34;
      if (HIDWORD(v37)) {
        BOOL v38 = v37 == 0;
      }
      else {
        BOOL v38 = 1;
      }
      BOOL v39 = v38 || HIDWORD(v32) == 0;
      if (v39) {
        unint64_t v40 = 0;
      }
      else {
        unint64_t v40 = v37;
      }
      unint64_t v138 = v40;
      if (v39) {
        int v41 = 0;
      }
      else {
        int v41 = v35;
      }
      int v139 = v41;
      if (((2 * v34) & (2 * v34 - 1)) != 0) {
        uint64_t v42 = 2;
      }
      else {
        uint64_t v42 = 2 * v34;
      }
      unint64_t v43 = (uint64_t *)sub_215DAA448((uint64_t)&v153, (unsigned int *)&v138, (uint64_t *)&v140, 1, 0, 0, v42);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C663D60;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v44 = *v43;
      uint64_t v145 = v152;
      *(void *)&long long v146 = v44;
      *((void *)&v146 + 1) = *((void *)&v153 + 1);
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    case 8:
      uint64_t v140 = &unk_26C66D1F8;
      sub_215DAB2F0((uint64_t)v150, &v136);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C663DE0;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v145 = v152;
      long long v146 = v153;
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    case 9:
      *(void *)BOOL v150 = &unk_26C66D470;
      sub_215D949B4(&v136, (uint64_t)&v142);
      operator new();
    case 10:
      uint64_t v140 = &unk_26C66D6E8;
      sub_215DAB4B4((uint64_t)v150, &v136);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C663EE0;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v145 = v152;
      long long v146 = v153;
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    case 11:
      BOOL v137 = &unk_26C66D960;
      if (HIDWORD(a3)) {
        BOOL v94 = a3 == 0;
      }
      else {
        BOOL v94 = 1;
      }
      if (v94) {
        unint64_t v95 = 0;
      }
      else {
        unint64_t v95 = a3;
      }
      *(void *)&v150[4] = v95;
      *(_DWORD *)BOOL v150 = 3;
      if (v95) {
        uint64_t v96 = 3;
      }
      else {
        uint64_t v96 = 0;
      }
      LODWORD(v97) = v96 * v95;
      unint64_t v98 = HIDWORD(v95);
      if (HIDWORD(v95)) {
        uint64_t v97 = v97;
      }
      else {
        uint64_t v97 = 0;
      }
      uint64_t v99 = v96 | (v97 << 32);
      *(_DWORD *)BOOL v150 = 3;
      *(void *)&v150[4] = v95;
      unint64_t v100 = *(void *)v150;
      *(_DWORD *)&v150[4] = v99;
      *(_DWORD *)BOOL v150 = 1;
      *(void *)&v150[12] = *(void *)v150;
      *(_DWORD *)&v150[20] = v97;
      *(void *)BOOL v150 = v100;
      *(void *)&v150[24] = v95;
      *(void *)&long long v151 = v99;
      BYTE8(v151) = 0;
      BYTE4(v152) = 0;
      uint64_t v140 = *(void **)&v150[12];
      int v141 = v97;
      if (HIDWORD(v100)) {
        BOOL v101 = v100 == 0;
      }
      else {
        BOOL v101 = 1;
      }
      BOOL v102 = v101 || HIDWORD(v95) == 0;
      if (v102) {
        unint64_t v103 = 0;
      }
      else {
        unint64_t v103 = v100;
      }
      unint64_t v138 = v103;
      if (v102) {
        int v104 = 0;
      }
      else {
        int v104 = v98;
      }
      int v139 = v104;
      if (((2 * v97) & (2 * v97 - 1)) != 0) {
        uint64_t v105 = 2;
      }
      else {
        uint64_t v105 = 2 * v97;
      }
      unint64_t v106 = (uint64_t *)sub_215DAA448((uint64_t)&v153, (unsigned int *)&v138, (uint64_t *)&v140, 1, 0, 0, v105);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C663F60;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v107 = *v106;
      uint64_t v145 = v152;
      *(void *)&long long v146 = v107;
      *((void *)&v146 + 1) = *((void *)&v153 + 1);
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    case 12:
      uint64_t v140 = &unk_26C66DBD8;
      sub_215DAB66C((uint64_t)v150, &v136);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C663FE0;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v145 = v152;
      long long v146 = v153;
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    case 13:
      *(void *)BOOL v150 = &unk_26C66DE50;
      sub_215D95A1C(&v136, (uint64_t)&v142);
      operator new();
    case 14:
      uint64_t v140 = &unk_26C66E0C8;
      sub_215DAB824((uint64_t)v150, &v136);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C6640E0;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v145 = v152;
      long long v146 = v153;
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    case 15:
      BOOL v137 = &unk_26C66E340;
      if (HIDWORD(a3)) {
        BOOL v108 = a3 == 0;
      }
      else {
        BOOL v108 = 1;
      }
      if (v108) {
        unint64_t v109 = 0;
      }
      else {
        unint64_t v109 = a3;
      }
      *(void *)&v150[4] = v109;
      *(_DWORD *)BOOL v150 = 4;
      uint64_t v110 = 4 * (v109 != 0);
      LODWORD(v111) = v110 * v109;
      unint64_t v112 = HIDWORD(v109);
      if (HIDWORD(v109)) {
        unint64_t v111 = v111;
      }
      else {
        unint64_t v111 = 0;
      }
      unint64_t v113 = v110 & 0x3FFFFFFFFLL | ((unint64_t)(v111 >> 2) << 34);
      *(_DWORD *)BOOL v150 = 4;
      *(void *)&v150[4] = v109;
      unint64_t v114 = *(void *)v150;
      *(_DWORD *)&v150[4] = v113;
      *(_DWORD *)BOOL v150 = 1;
      *(void *)&v150[12] = *(void *)v150;
      *(_DWORD *)&v150[20] = v111;
      *(void *)BOOL v150 = v114;
      *(void *)&v150[24] = v109;
      *(void *)&long long v151 = v113;
      BYTE8(v151) = 0;
      BYTE4(v152) = 0;
      uint64_t v140 = *(void **)&v150[12];
      int v141 = v111;
      if (HIDWORD(v114)) {
        BOOL v115 = v114 == 0;
      }
      else {
        BOOL v115 = 1;
      }
      BOOL v116 = v115 || HIDWORD(v109) == 0;
      if (v116) {
        unint64_t v117 = 0;
      }
      else {
        unint64_t v117 = v114;
      }
      unint64_t v138 = v117;
      if (v116) {
        int v118 = 0;
      }
      else {
        int v118 = v112;
      }
      int v139 = v118;
      if (((2 * v111) & (2 * v111 - 1)) != 0) {
        uint64_t v119 = 2;
      }
      else {
        uint64_t v119 = 2 * v111;
      }
      unint64_t v120 = (uint64_t *)sub_215DAA448((uint64_t)&v153, (unsigned int *)&v138, (uint64_t *)&v140, 1, 0, 0, v119);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C664160;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v121 = *v120;
      uint64_t v145 = v152;
      *(void *)&long long v146 = v121;
      *((void *)&v146 + 1) = *((void *)&v153 + 1);
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    case 16:
      uint64_t v140 = &unk_26C66E5B8;
      sub_215DAB9E4((uint64_t)v150, &v136);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C6641E0;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v145 = v152;
      long long v146 = v153;
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    case 17:
      *(void *)BOOL v150 = &unk_26C66E830;
      sub_215D96AA4(&v136, (uint64_t)&v142);
      operator new();
    case 18:
      uint64_t v140 = &unk_26C66EAA8;
      sub_215DAB4B4((uint64_t)v150, &v136);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C6642E0;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v145 = v152;
      long long v146 = v153;
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    case 19:
      BOOL v137 = &unk_26C66ED20;
      if (HIDWORD(a3)) {
        BOOL v17 = a3 == 0;
      }
      else {
        BOOL v17 = 1;
      }
      if (v17) {
        unint64_t v18 = 0;
      }
      else {
        unint64_t v18 = a3;
      }
      *(void *)&v150[4] = v18;
      *(_DWORD *)BOOL v150 = 3;
      if (v18) {
        uint64_t v19 = 3;
      }
      else {
        uint64_t v19 = 0;
      }
      LODWORD(v2std::__fs::filesystem::__rename(__from, __to, 0) = v19 * v18;
      unint64_t v21 = HIDWORD(v18);
      if (HIDWORD(v18)) {
        uint64_t v20 = v20;
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v22 = v19 | (v20 << 32);
      *(_DWORD *)BOOL v150 = 3;
      *(void *)&v150[4] = v18;
      unint64_t v23 = *(void *)v150;
      *(_DWORD *)&v150[4] = v22;
      *(_DWORD *)BOOL v150 = 1;
      *(void *)&v150[12] = *(void *)v150;
      *(_DWORD *)&v150[20] = v20;
      *(void *)BOOL v150 = v23;
      *(void *)&v150[24] = v18;
      *(void *)&long long v151 = v22;
      BYTE8(v151) = 0;
      BYTE4(v152) = 0;
      uint64_t v140 = *(void **)&v150[12];
      int v141 = v20;
      if (HIDWORD(v23)) {
        BOOL v24 = v23 == 0;
      }
      else {
        BOOL v24 = 1;
      }
      BOOL v25 = v24 || HIDWORD(v18) == 0;
      if (v25) {
        unint64_t v26 = 0;
      }
      else {
        unint64_t v26 = v23;
      }
      unint64_t v138 = v26;
      if (v25) {
        int v27 = 0;
      }
      else {
        int v27 = v21;
      }
      int v139 = v27;
      if (((2 * v20) & (2 * v20 - 1)) != 0) {
        uint64_t v28 = 2;
      }
      else {
        uint64_t v28 = 2 * v20;
      }
      unint64_t v29 = (uint64_t *)sub_215DAA448((uint64_t)&v153, (unsigned int *)&v138, (uint64_t *)&v140, 1, 0, 0, v28);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C664360;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v30 = *v29;
      uint64_t v145 = v152;
      *(void *)&long long v146 = v30;
      *((void *)&v146 + 1) = *((void *)&v153 + 1);
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    case 20:
      uint64_t v140 = &unk_26C66EF98;
      sub_215DAB66C((uint64_t)v150, &v136);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C6643E0;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v145 = v152;
      long long v146 = v153;
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    case 21:
      *(void *)BOOL v150 = &unk_26C66F210;
      sub_215D97B04(&v136, (uint64_t)&v142);
      operator new();
    case 22:
      uint64_t v140 = &unk_26C66F488;
      sub_215DAB4B4((uint64_t)v150, &v136);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C6644E0;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v145 = v152;
      long long v146 = v153;
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    case 23:
      BOOL v137 = &unk_26C66F700;
      if (HIDWORD(a3)) {
        BOOL v122 = a3 == 0;
      }
      else {
        BOOL v122 = 1;
      }
      if (v122) {
        unint64_t v123 = 0;
      }
      else {
        unint64_t v123 = a3;
      }
      *(void *)&v150[4] = v123;
      *(_DWORD *)BOOL v150 = 3;
      if (v123) {
        uint64_t v124 = 3;
      }
      else {
        uint64_t v124 = 0;
      }
      LODWORD(v125) = v124 * v123;
      unint64_t v126 = HIDWORD(v123);
      if (HIDWORD(v123)) {
        uint64_t v125 = v125;
      }
      else {
        uint64_t v125 = 0;
      }
      uint64_t v127 = v124 | (v125 << 32);
      *(_DWORD *)BOOL v150 = 3;
      *(void *)&v150[4] = v123;
      unint64_t v128 = *(void *)v150;
      *(_DWORD *)&v150[4] = v127;
      *(_DWORD *)BOOL v150 = 1;
      *(void *)&v150[12] = *(void *)v150;
      *(_DWORD *)&v150[20] = v125;
      *(void *)BOOL v150 = v128;
      *(void *)&v150[24] = v123;
      *(void *)&long long v151 = v127;
      BYTE8(v151) = 0;
      BYTE4(v152) = 0;
      uint64_t v140 = *(void **)&v150[12];
      int v141 = v125;
      if (HIDWORD(v128)) {
        BOOL v129 = v128 == 0;
      }
      else {
        BOOL v129 = 1;
      }
      BOOL v130 = v129 || HIDWORD(v123) == 0;
      if (v130) {
        unint64_t v131 = 0;
      }
      else {
        unint64_t v131 = v128;
      }
      unint64_t v138 = v131;
      if (v130) {
        int v132 = 0;
      }
      else {
        int v132 = v126;
      }
      int v139 = v132;
      if (((2 * v125) & (2 * v125 - 1)) != 0) {
        uint64_t v133 = 2;
      }
      else {
        uint64_t v133 = 2 * v125;
      }
      uint64_t v134 = (uint64_t *)sub_215DAA448((uint64_t)&v153, (unsigned int *)&v138, (uint64_t *)&v140, 1, 0, 0, v133);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C664560;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v135 = *v134;
      uint64_t v145 = v152;
      *(void *)&long long v146 = v135;
      *((void *)&v146 + 1) = *((void *)&v153 + 1);
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    case 24:
      uint64_t v140 = &unk_26C66F978;
      sub_215DAB66C((uint64_t)v150, &v136);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C6645E0;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v145 = v152;
      long long v146 = v153;
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    case 25:
      *(void *)BOOL v150 = &unk_26C66FBF0;
      sub_215D98B6C(&v136, (uint64_t)&v142);
      operator new();
    case 26:
      uint64_t v140 = &unk_26C66FE68;
      sub_215DAB824((uint64_t)v150, &v136);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C6646E0;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v145 = v152;
      long long v146 = v153;
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    case 27:
      BOOL v137 = &unk_26C6700E0;
      if (HIDWORD(a3)) {
        BOOL v3 = a3 == 0;
      }
      else {
        BOOL v3 = 1;
      }
      if (v3) {
        unint64_t v4 = 0;
      }
      else {
        unint64_t v4 = a3;
      }
      *(void *)&v150[4] = v4;
      *(_DWORD *)BOOL v150 = 4;
      uint64_t v5 = 4 * (v4 != 0);
      LODWORD(v6) = v5 * v4;
      unint64_t v7 = HIDWORD(v4);
      if (HIDWORD(v4)) {
        unint64_t v6 = v6;
      }
      else {
        unint64_t v6 = 0;
      }
      unint64_t v8 = v5 & 0x3FFFFFFFFLL | ((unint64_t)(v6 >> 2) << 34);
      *(_DWORD *)BOOL v150 = 4;
      *(void *)&v150[4] = v4;
      unint64_t v9 = *(void *)v150;
      *(_DWORD *)&v150[4] = v8;
      *(_DWORD *)BOOL v150 = 1;
      *(void *)&v150[12] = *(void *)v150;
      *(_DWORD *)&v150[20] = v6;
      *(void *)BOOL v150 = v9;
      *(void *)&v150[24] = v4;
      *(void *)&long long v151 = v8;
      BYTE8(v151) = 0;
      BYTE4(v152) = 0;
      uint64_t v140 = *(void **)&v150[12];
      int v141 = v6;
      if (HIDWORD(v9)) {
        BOOL v10 = v9 == 0;
      }
      else {
        BOOL v10 = 1;
      }
      BOOL v11 = v10 || HIDWORD(v4) == 0;
      if (v11) {
        unint64_t v12 = 0;
      }
      else {
        unint64_t v12 = v9;
      }
      unint64_t v138 = v12;
      if (v11) {
        int v13 = 0;
      }
      else {
        int v13 = v7;
      }
      int v139 = v13;
      if (((2 * v6) & (2 * v6 - 1)) != 0) {
        uint64_t v14 = 2;
      }
      else {
        uint64_t v14 = 2 * v6;
      }
      unint64_t v15 = (uint64_t *)sub_215DAA448((uint64_t)&v153, (unsigned int *)&v138, (uint64_t *)&v140, 1, 0, 0, v14);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C664760;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v16 = *v15;
      uint64_t v145 = v152;
      *(void *)&long long v146 = v16;
      *((void *)&v146 + 1) = *((void *)&v153 + 1);
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    case 28:
      uint64_t v140 = &unk_26C670358;
      sub_215DAB9E4((uint64_t)v150, &v136);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C6647E0;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v145 = v152;
      long long v146 = v153;
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    case 29:
      *(void *)BOOL v150 = &unk_26C6705D0;
      sub_215D99BFC(&v136, (uint64_t)&v142);
      operator new();
    case 30:
      uint64_t v140 = &unk_26C670848;
      sub_215DAB824((uint64_t)v150, &v136);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C6648E0;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v145 = v152;
      long long v146 = v153;
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    case 31:
      BOOL v137 = &unk_26C670AC0;
      if (HIDWORD(a3)) {
        BOOL v59 = a3 == 0;
      }
      else {
        BOOL v59 = 1;
      }
      if (v59) {
        unint64_t v60 = 0;
      }
      else {
        unint64_t v60 = a3;
      }
      *(void *)&v150[4] = v60;
      *(_DWORD *)BOOL v150 = 4;
      uint64_t v61 = 4 * (v60 != 0);
      LODWORD(v62) = v61 * v60;
      unint64_t v63 = HIDWORD(v60);
      if (HIDWORD(v60)) {
        unint64_t v62 = v62;
      }
      else {
        unint64_t v62 = 0;
      }
      unint64_t v64 = v61 & 0x3FFFFFFFFLL | ((unint64_t)(v62 >> 2) << 34);
      *(_DWORD *)BOOL v150 = 4;
      *(void *)&v150[4] = v60;
      unint64_t v65 = *(void *)v150;
      *(_DWORD *)&v150[4] = v64;
      *(_DWORD *)BOOL v150 = 1;
      *(void *)&v150[12] = *(void *)v150;
      *(_DWORD *)&v150[20] = v62;
      *(void *)BOOL v150 = v65;
      *(void *)&v150[24] = v60;
      *(void *)&long long v151 = v64;
      BYTE8(v151) = 0;
      BYTE4(v152) = 0;
      uint64_t v140 = *(void **)&v150[12];
      int v141 = v62;
      if (HIDWORD(v65)) {
        BOOL v66 = v65 == 0;
      }
      else {
        BOOL v66 = 1;
      }
      BOOL v67 = v66 || HIDWORD(v60) == 0;
      if (v67) {
        unint64_t v68 = 0;
      }
      else {
        unint64_t v68 = v65;
      }
      unint64_t v138 = v68;
      if (v67) {
        int v69 = 0;
      }
      else {
        int v69 = v63;
      }
      int v139 = v69;
      if (((2 * v62) & (2 * v62 - 1)) != 0) {
        uint64_t v70 = 2;
      }
      else {
        uint64_t v70 = 2 * v62;
      }
      uint64_t v71 = (uint64_t *)sub_215DAA448((uint64_t)&v153, (unsigned int *)&v138, (uint64_t *)&v140, 1, 0, 0, v70);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C664960;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v72 = *v71;
      uint64_t v145 = v152;
      *(void *)&long long v146 = v72;
      *((void *)&v146 + 1) = *((void *)&v153 + 1);
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    case 32:
      uint64_t v140 = &unk_26C670D38;
      sub_215DAB9E4((uint64_t)v150, &v136);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C6649E0;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v145 = v152;
      long long v146 = v153;
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    case 33:
      *(void *)BOOL v150 = &unk_26C670FB0;
      sub_215D9AC8C(&v136, (uint64_t)&v142);
      operator new();
    case 34:
      uint64_t v140 = &unk_26C671228;
      sub_215DAB824((uint64_t)v150, &v136);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C664AE0;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v145 = v152;
      long long v146 = v153;
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    case 35:
      BOOL v137 = &unk_26C6714A0;
      if (HIDWORD(a3)) {
        BOOL v73 = a3 == 0;
      }
      else {
        BOOL v73 = 1;
      }
      if (v73) {
        unint64_t v74 = 0;
      }
      else {
        unint64_t v74 = a3;
      }
      *(void *)&v150[4] = v74;
      *(_DWORD *)BOOL v150 = 4;
      uint64_t v75 = 4 * (v74 != 0);
      LODWORD(v76) = v75 * v74;
      unint64_t v77 = HIDWORD(v74);
      if (HIDWORD(v74)) {
        unint64_t v76 = v76;
      }
      else {
        unint64_t v76 = 0;
      }
      unint64_t v78 = v75 & 0x3FFFFFFFFLL | ((unint64_t)(v76 >> 2) << 34);
      *(_DWORD *)BOOL v150 = 4;
      *(void *)&v150[4] = v74;
      unint64_t v79 = *(void *)v150;
      *(_DWORD *)&v150[4] = v78;
      *(_DWORD *)BOOL v150 = 1;
      *(void *)&v150[12] = *(void *)v150;
      *(_DWORD *)&v150[20] = v76;
      *(void *)BOOL v150 = v79;
      *(void *)&v150[24] = v74;
      *(void *)&long long v151 = v78;
      BYTE8(v151) = 0;
      BYTE4(v152) = 0;
      uint64_t v140 = *(void **)&v150[12];
      int v141 = v76;
      if (HIDWORD(v79)) {
        BOOL v80 = v79 == 0;
      }
      else {
        BOOL v80 = 1;
      }
      BOOL v81 = v80 || HIDWORD(v74) == 0;
      if (v81) {
        unint64_t v82 = 0;
      }
      else {
        unint64_t v82 = v79;
      }
      unint64_t v138 = v82;
      if (v81) {
        int v83 = 0;
      }
      else {
        int v83 = v77;
      }
      int v139 = v83;
      if (((2 * v76) & (2 * v76 - 1)) != 0) {
        uint64_t v84 = 2;
      }
      else {
        uint64_t v84 = 2 * v76;
      }
      uint64_t v85 = (uint64_t *)sub_215DAA448((uint64_t)&v153, (unsigned int *)&v138, (uint64_t *)&v140, 1, 0, 0, v84);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C664B60;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v86 = *v85;
      uint64_t v145 = v152;
      *(void *)&long long v146 = v86;
      *((void *)&v146 + 1) = *((void *)&v153 + 1);
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    case 36:
      uint64_t v140 = &unk_26C671718;
      sub_215DAB9E4((uint64_t)v150, &v136);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C664BE0;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v145 = v152;
      long long v146 = v153;
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    case 37:
      *(void *)BOOL v150 = &unk_26C671990;
      sub_215D9BD1C(&v136, (uint64_t)&v142);
      operator new();
    case 38:
      uint64_t v140 = &unk_26C671C08;
      sub_215DAB824((uint64_t)v150, &v136);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C664CE0;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v145 = v152;
      long long v146 = v153;
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    case 39:
      BOOL v137 = &unk_26C671E80;
      if (HIDWORD(a3)) {
        BOOL v45 = a3 == 0;
      }
      else {
        BOOL v45 = 1;
      }
      if (v45) {
        unint64_t v46 = 0;
      }
      else {
        unint64_t v46 = a3;
      }
      *(void *)&v150[4] = v46;
      *(_DWORD *)BOOL v150 = 4;
      uint64_t v47 = 4 * (v46 != 0);
      LODWORD(v48) = v47 * v46;
      unint64_t v49 = HIDWORD(v46);
      if (HIDWORD(v46)) {
        unint64_t v48 = v48;
      }
      else {
        unint64_t v48 = 0;
      }
      unint64_t v50 = v47 & 0x3FFFFFFFFLL | ((unint64_t)(v48 >> 2) << 34);
      *(_DWORD *)BOOL v150 = 4;
      *(void *)&v150[4] = v46;
      unint64_t v51 = *(void *)v150;
      *(_DWORD *)&v150[4] = v50;
      *(_DWORD *)BOOL v150 = 1;
      *(void *)&v150[12] = *(void *)v150;
      *(_DWORD *)&v150[20] = v48;
      *(void *)BOOL v150 = v51;
      *(void *)&v150[24] = v46;
      *(void *)&long long v151 = v50;
      BYTE8(v151) = 0;
      BYTE4(v152) = 0;
      uint64_t v140 = *(void **)&v150[12];
      int v141 = v48;
      if (HIDWORD(v51)) {
        BOOL v52 = v51 == 0;
      }
      else {
        BOOL v52 = 1;
      }
      BOOL v53 = v52 || HIDWORD(v46) == 0;
      if (v53) {
        unint64_t v54 = 0;
      }
      else {
        unint64_t v54 = v51;
      }
      unint64_t v138 = v54;
      if (v53) {
        int v55 = 0;
      }
      else {
        int v55 = v49;
      }
      int v139 = v55;
      if (((2 * v48) & (2 * v48 - 1)) != 0) {
        uint64_t v56 = 2;
      }
      else {
        uint64_t v56 = 2 * v48;
      }
      uint64_t v57 = (uint64_t *)sub_215DAA448((uint64_t)&v153, (unsigned int *)&v138, (uint64_t *)&v140, 1, 0, 0, v56);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C664D60;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v58 = *v57;
      uint64_t v145 = v152;
      *(void *)&long long v146 = v58;
      *((void *)&v146 + 1) = *((void *)&v153 + 1);
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    case 40:
      uint64_t v140 = &unk_26C6720F8;
      sub_215DAB9E4((uint64_t)v150, &v136);
      *(_OWORD *)BOOL v143 = *(_OWORD *)v150;
      size_t v142 = &unk_26C664DE0;
      *(_OWORD *)&v143[16] = *(_OWORD *)&v150[16];
      long long v144 = v151;
      uint64_t v145 = v152;
      long long v146 = v153;
      uint64_t v147 = v154;
      uint64_t v149 = v156;
      long long v148 = v155;
      operator new();
    default:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_215E1ABD8);
      abort();
  }
}

void sub_215DA88B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,int a24,void *a25,uint64_t a26,int a27,int a28,int a29,int a30,int a31,int a32)
{
  if (a25)
  {
    free(a25);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *sub_215DA906C(unint64_t *a1, _DWORD *a2, unint64_t *a3, char a4, _WORD *a5, char a6, uint64_t a7)
{
  if (a4)
  {
    unint64_t v11 = *a3;
    int v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    int v12 = a2[1];
    if (v12) {
      uint64_t v13 = v13;
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v11 = (*a2 != 0) | (unint64_t)(v13 << 32);
  }
  unsigned int v14 = v12 * HIDWORD(v11);
  unint64_t v15 = 2 * v14;
  unint64_t v16 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  unint64_t v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  unint64_t v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8) {
    size_t v19 = v18 + 1;
  }
  else {
    size_t v19 = 8;
  }
  *a1 = v15;
  a1[1] = 0;
  a1[2] = v19;
  if (v14)
  {
    memptr[0] = 0;
    int v20 = malloc_type_posix_memalign(memptr, v19, 2 * v14, 0x1F88E90uLL);
    if (v20) {
      sub_215E0D744(v20, a1[2], v15);
    }
    unint64_t v21 = memptr[0];
    a1[1] = (unint64_t)memptr[0];
    unint64_t v22 = *(void *)a2;
    a1[3] = *(void *)a2;
    a1[4] = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
    if (v21 && a6)
    {
      if (v22) {
        BOOL v23 = HIDWORD(v22) == 0;
      }
      else {
        BOOL v23 = 1;
      }
      if (v23) {
        BOOL v24 = 0;
      }
      else {
        BOOL v24 = (void *)v22;
      }
      memptr[0] = v21;
      memptr[1] = v24;
      memptr[2] = (void *)(v11 & 0x7FFFFFFF7FFFFFFFLL);
      if (HIDWORD(v24) * ((v11 >> 31) >> 1) == -1
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      v36[0] = memptr;
      v36[1] = a5;
      uint64_t v25 = v11 & 0x7FFFFFFF;
      if (v25 == 1)
      {
        sub_215B59DDC((uint64_t)v36);
        return a1;
      }
      if (v24 && HIDWORD(v24))
      {
        int v26 = v24 - 1;
        int v27 = HIDWORD(v24) - 1;
        if (HIDWORD(v24) != 1)
        {
          uint64_t v28 = HIDWORD(v11) & 0x7FFFFFFF;
          if (v24 == 1)
          {
            do
            {
              *unint64_t v21 = *a5;
              v21 += v28;
              --v27;
            }
            while (v27);
LABEL_39:
            *unint64_t v21 = *a5;
            return a1;
          }
          int v29 = 0;
          uint64_t v30 = 2 * v28;
          do
          {
            BOOL v31 = v21;
            int v32 = v24 - 1;
            do
            {
              *BOOL v31 = *a5;
              v31 += v25;
              --v32;
            }
            while (v32);
            *BOOL v31 = *a5;
            unint64_t v21 = (_WORD *)((char *)v21 + v30);
            ++v29;
          }
          while (v29 != v27);
        }
        if (v24 != 1)
        {
          uint64_t v33 = 2 * v25;
          do
          {
            *unint64_t v21 = *a5;
            unint64_t v21 = (_WORD *)((char *)v21 + v33);
            --v26;
          }
          while (v26);
        }
        goto LABEL_39;
      }
    }
  }
  else
  {
    a1[3] = *(void *)a2;
    a1[4] = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
  }
  return a1;
}

void sub_215DA92BC(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)(v1 + 8);
  if (v3) {
    free(v3);
  }
  *(void *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

unint64_t *sub_215DA92D8(unint64_t *a1, _DWORD *a2, unint64_t *a3, char a4, _WORD *a5, char a6, uint64_t a7)
{
  if (a4)
  {
    unint64_t v11 = *a3;
    int v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    int v12 = a2[1];
    if (v12) {
      uint64_t v13 = v13;
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v11 = (*a2 != 0) | (unint64_t)(v13 << 32);
  }
  unsigned int v14 = v12 * HIDWORD(v11);
  unint64_t v15 = 2 * v14;
  unint64_t v16 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  unint64_t v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  unint64_t v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8) {
    size_t v19 = v18 + 1;
  }
  else {
    size_t v19 = 8;
  }
  *a1 = v15;
  a1[1] = 0;
  a1[2] = v19;
  if (v14)
  {
    memptr = 0;
    int v20 = malloc_type_posix_memalign(&memptr, v19, 2 * v14, 0x1F88E90uLL);
    if (v20) {
      sub_215E0D744(v20, a1[2], v15);
    }
    unint64_t v21 = memptr;
    a1[1] = (unint64_t)memptr;
    unint64_t v22 = *(void *)a2;
    a1[3] = *(void *)a2;
    a1[4] = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
    if (v21)
    {
      if (v22) {
        BOOL v23 = HIDWORD(v22) == 0;
      }
      else {
        BOOL v23 = 1;
      }
      if (v23) {
        unint64_t v24 = 0;
      }
      else {
        unint64_t v24 = v22;
      }
      unsigned int v25 = HIDWORD(v24) * ((v11 >> 31) >> 1);
      if (a6)
      {
        if (v25 == -1
          && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
        {
          abort();
        }
        if (v24 && HIDWORD(v24))
        {
          int v26 = v24 - 1;
          int v27 = HIDWORD(v24) - 1;
          if (HIDWORD(v24) != 1)
          {
            uint64_t v28 = HIDWORD(v11) & 0x7FFFFFFF;
            if (v24 == 1)
            {
              do
              {
                *unint64_t v21 = *a5;
                v21 += v28;
                --v27;
              }
              while (v27);
            }
            else
            {
              int v29 = 0;
              uint64_t v30 = 2 * v28;
              do
              {
                BOOL v31 = v21;
                int v32 = v24 - 1;
                do
                {
                  *BOOL v31 = *a5;
                  v31 += v11 & 0x7FFFFFFF;
                  --v32;
                }
                while (v32);
                *BOOL v31 = *a5;
                unint64_t v21 = (_WORD *)((char *)v21 + v30);
                ++v29;
              }
              while (v29 != v27);
            }
          }
          if (v24 != 1)
          {
            do
            {
              *unint64_t v21 = *a5;
              v21 += v11 & 0x7FFFFFFF;
              --v26;
            }
            while (v26);
          }
          *unint64_t v21 = *a5;
        }
      }
      else
      {
        if (v25 == -1
          && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
        {
          abort();
        }
        if (v24 && HIDWORD(v24))
        {
          int v33 = v24 - 1;
          int v34 = HIDWORD(v24) - 1;
          if (HIDWORD(v24) != 1)
          {
            uint64_t v35 = HIDWORD(v11) & 0x7FFFFFFF;
            if (v24 == 1)
            {
              do
              {
                *unint64_t v21 = 0;
                v21 += v35;
                --v34;
              }
              while (v34);
            }
            else
            {
              int v36 = 0;
              uint64_t v37 = 2 * v35;
              do
              {
                BOOL v38 = v21;
                int v39 = v24 - 1;
                do
                {
                  *BOOL v38 = 0;
                  v38 += v11 & 0x7FFFFFFF;
                  --v39;
                }
                while (v39);
                *BOOL v38 = 0;
                unint64_t v21 = (_WORD *)((char *)v21 + v37);
                ++v36;
              }
              while (v36 != v34);
            }
          }
          if (v24 != 1)
          {
            do
            {
              *unint64_t v21 = 0;
              v21 += v11 & 0x7FFFFFFF;
              --v33;
            }
            while (v33);
          }
          *unint64_t v21 = 0;
        }
      }
    }
  }
  else
  {
    a1[3] = *(void *)a2;
    a1[4] = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
  }
  return a1;
}

void sub_215DA95E0(_Unwind_Exception *a1)
{
  sub_215D9CA64(v1);
  _Unwind_Resume(a1);
}

void sub_215DA95F4(_Unwind_Exception *a1)
{
  sub_215D9CA64(v1);
  _Unwind_Resume(a1);
}

unint64_t *sub_215DA9608(unint64_t *a1, _DWORD *a2, unint64_t *a3, char a4, _DWORD *a5, char a6, uint64_t a7)
{
  if (a4)
  {
    unint64_t v11 = *a3;
    int v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    int v12 = a2[1];
    if (v12) {
      uint64_t v13 = v13;
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v11 = (*a2 != 0) | (unint64_t)(v13 << 32);
  }
  unsigned int v14 = v12 * HIDWORD(v11);
  unint64_t v15 = 4 * v14;
  unint64_t v16 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  unint64_t v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  unint64_t v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8) {
    size_t v19 = v18 + 1;
  }
  else {
    size_t v19 = 8;
  }
  *a1 = v15;
  a1[1] = 0;
  a1[2] = v19;
  if (v14)
  {
    memptr[0] = 0;
    int v20 = malloc_type_posix_memalign(memptr, v19, 4 * v14, 0x1F88E90uLL);
    if (v20) {
      sub_215E0D744(v20, a1[2], v15);
    }
    unint64_t v21 = memptr[0];
    a1[1] = (unint64_t)memptr[0];
    unint64_t v22 = *(void *)a2;
    a1[3] = *(void *)a2;
    a1[4] = (4 * v11) & 0xFFFFFFFCFFFFFFFCLL;
    if (v21 && a6)
    {
      if (v22) {
        BOOL v23 = HIDWORD(v22) == 0;
      }
      else {
        BOOL v23 = 1;
      }
      if (v23) {
        unint64_t v24 = 0;
      }
      else {
        unint64_t v24 = (void *)v22;
      }
      memptr[0] = v21;
      memptr[1] = v24;
      memptr[2] = (void *)(v11 & 0x3FFFFFFF3FFFFFFFLL);
      if (HIDWORD(v24) * ((v11 >> 30) >> 2) == -1
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      v36[0] = memptr;
      v36[1] = a5;
      uint64_t v25 = v11 & 0x3FFFFFFF;
      if (v25 == 1)
      {
        sub_215B5B8D8((uint64_t)v36);
        return a1;
      }
      if (v24 && HIDWORD(v24))
      {
        int v26 = v24 - 1;
        int v27 = HIDWORD(v24) - 1;
        if (HIDWORD(v24) != 1)
        {
          uint64_t v28 = HIDWORD(v11) & 0x3FFFFFFF;
          if (v24 == 1)
          {
            do
            {
              *unint64_t v21 = *a5;
              v21 += v28;
              --v27;
            }
            while (v27);
LABEL_39:
            *unint64_t v21 = *a5;
            return a1;
          }
          int v29 = 0;
          uint64_t v30 = 4 * v28;
          do
          {
            BOOL v31 = v21;
            int v32 = v24 - 1;
            do
            {
              *BOOL v31 = *a5;
              v31 += v25;
              --v32;
            }
            while (v32);
            *BOOL v31 = *a5;
            unint64_t v21 = (_DWORD *)((char *)v21 + v30);
            ++v29;
          }
          while (v29 != v27);
        }
        if (v24 != 1)
        {
          uint64_t v33 = 4 * v25;
          do
          {
            *unint64_t v21 = *a5;
            unint64_t v21 = (_DWORD *)((char *)v21 + v33);
            --v26;
          }
          while (v26);
        }
        goto LABEL_39;
      }
    }
  }
  else
  {
    a1[3] = *(void *)a2;
    a1[4] = (4 * v11) & 0xFFFFFFFCFFFFFFFCLL;
  }
  return a1;
}

void sub_215DA9858(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)(v1 + 8);
  if (v3) {
    free(v3);
  }
  *(void *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

size_t *sub_215DA9874(size_t *a1, unsigned int *a2, uint64_t a3, char a4, unsigned char *a5, char a6, uint64_t a7)
{
  BOOL v10 = a1;
  if (a4)
  {
    size_t v11 = *(void *)a3;
    unsigned int v12 = *(_DWORD *)(a3 + 8);
    unsigned int v13 = a2[2];
  }
  else
  {
    unsigned int v14 = *a2;
    unsigned int v15 = a2[1];
    if (v15) {
      uint64_t v16 = v14;
    }
    else {
      uint64_t v16 = 0;
    }
    int v17 = v15 * v14;
    unsigned int v13 = a2[2];
    if (v13) {
      unsigned int v12 = v17;
    }
    else {
      unsigned int v12 = 0;
    }
    size_t v11 = (*a2 != 0) | (unint64_t)(v16 << 32);
  }
  size_t v18 = v12 * v13;
  unint64_t v19 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  unint64_t v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
  unint64_t v21 = v20 | (v20 >> 16) | ((v20 | (v20 >> 16)) >> 32);
  if (v21 + 1 > 8) {
    size_t v22 = v21 + 1;
  }
  else {
    size_t v22 = 8;
  }
  *a1 = v18;
  a1[1] = 0;
  a1[2] = v22;
  if (v18)
  {
    memptr = 0;
    int v23 = malloc_type_posix_memalign(&memptr, v22, v18, 0x1F88E90uLL);
    if (v23) {
      sub_215E0D744(v23, v10[2], v18);
    }
    unint64_t v24 = memptr;
    v10[1] = (size_t)memptr;
  }
  else
  {
    unint64_t v24 = 0;
  }
  size_t v25 = *(void *)a2;
  *((_DWORD *)v10 + 8) = a2[2];
  v10[3] = v25;
  *(size_t *)((char *)v10 + 36) = v11;
  *((_DWORD *)v10 + 11) = v12;
  if (v24 && a6)
  {
    if (*((_DWORD *)v10 + 6)) {
      BOOL v26 = *((_DWORD *)v10 + 7) == 0;
    }
    else {
      BOOL v26 = 1;
    }
    BOOL v27 = v26 || *((_DWORD *)v10 + 8) == 0;
    char v28 = v27;
    if (v27) {
      size_t v29 = 0;
    }
    else {
      size_t v29 = v10[3];
    }
    if (v27) {
      int v30 = 0;
    }
    else {
      int v30 = *((_DWORD *)v10 + 8);
    }
    if (v30 * v12 == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    if (v11 == 1)
    {
      size_t v31 = HIDWORD(v11);
      if (v29 * v11 == HIDWORD(v11))
      {
        size_t v32 = (HIDWORD(v29) * v29);
        if (v12 == HIDWORD(v29) * HIDWORD(v11))
        {
          memset(v24, *a5, (v32 * v30));
          return v10;
        }
        if (v29) {
          BOOL v56 = HIDWORD(v29) == 0;
        }
        else {
          BOOL v56 = 1;
        }
        if (v56) {
          char v57 = 1;
        }
        else {
          char v57 = v28;
        }
        if ((v57 & 1) == 0)
        {
          for (int i = v30 - 1; i; --i)
          {
            memset(v24, *a5, (HIDWORD(v29) * v29));
            v24 += v12;
          }
LABEL_93:
          memset(v24, *a5, v32);
        }
      }
      else
      {
        size_t v47 = HIDWORD(v29);
        if (v29) {
          BOOL v48 = HIDWORD(v29) == 0;
        }
        else {
          BOOL v48 = 1;
        }
        if (v48) {
          char v49 = 1;
        }
        else {
          char v49 = v28;
        }
        if ((v49 & 1) == 0)
        {
          size_t v32 = v29;
          int v50 = HIDWORD(v29) - 1;
          int v51 = v30 - 1;
          BOOL v66 = v10;
          if (v30 != 1)
          {
            uint64_t v52 = v12;
            if (v47 == 1)
            {
              do
              {
                memset(v24, *a5, v32);
                v24 += v12;
                --v51;
              }
              while (v51);
            }
            else
            {
              int v53 = 0;
              do
              {
                int v54 = HIDWORD(v29) - 1;
                int v55 = v24;
                do
                {
                  memset(v55, *a5, v32);
                  v55 += v31;
                  --v54;
                }
                while (v54);
                memset(v55, *a5, v32);
                v24 += v52;
                ++v53;
              }
              while (v53 != v51);
            }
          }
          if (HIDWORD(v29) == 1)
          {
            BOOL v10 = v66;
          }
          else
          {
            BOOL v10 = v66;
            do
            {
              memset(v24, *a5, v32);
              v24 += v31;
              --v50;
            }
            while (v50);
          }
          goto LABEL_93;
        }
      }
    }
    else
    {
      if (HIDWORD(v29)) {
        BOOL v33 = v29 == 0;
      }
      else {
        BOOL v33 = 1;
      }
      if (v33) {
        char v34 = 1;
      }
      else {
        char v34 = v28;
      }
      if ((v34 & 1) == 0 && v29)
      {
        int v35 = v29 - 1;
        int v36 = HIDWORD(v29) - 1;
        size_t v37 = HIDWORD(v11);
        int v38 = v30 - 1;
        if (v30 != 1)
        {
          if (HIDWORD(v29) == 1)
          {
            if (v29 == 1)
            {
              do
              {
                *unint64_t v24 = *a5;
                v24 += v12;
                --v38;
              }
              while (v38);
            }
            else
            {
              int v59 = 0;
              do
              {
                int v60 = v29 - 1;
                uint64_t v61 = v24;
                do
                {
                  unsigned char *v61 = *a5;
                  v61 += v11;
                  --v60;
                }
                while (v60);
                unsigned char *v61 = *a5;
                v24 += v12;
                ++v59;
              }
              while (v59 != v38);
            }
          }
          else
          {
            int v39 = 0;
            if (v29 == 1)
            {
              do
              {
                int v45 = HIDWORD(v29) - 1;
                unint64_t v46 = v24;
                do
                {
                  unsigned char *v46 = *a5;
                  v46 += v37;
                  --v45;
                }
                while (v45);
                unsigned char *v46 = *a5;
                v24 += v12;
                ++v39;
              }
              while (v39 != v38);
            }
            else
            {
              do
              {
                int v40 = 0;
                int v41 = v24;
                do
                {
                  int v42 = v29 - 1;
                  unint64_t v43 = v41;
                  do
                  {
                    unsigned char *v43 = *a5;
                    v43 += v11;
                    --v42;
                  }
                  while (v42);
                  unsigned char *v43 = *a5;
                  v41 += v37;
                  ++v40;
                }
                while (v40 != v36);
                int v44 = v29 - 1;
                do
                {
                  *int v41 = *a5;
                  v41 += v11;
                  --v44;
                }
                while (v44);
                *int v41 = *a5;
                v24 += v12;
                ++v39;
              }
              while (v39 != v38);
            }
          }
        }
        if (HIDWORD(v29) != 1)
        {
          if (v29 == 1)
          {
            do
            {
              *unint64_t v24 = *a5;
              v24 += v37;
              --v36;
            }
            while (v36);
          }
          else
          {
            int v62 = 0;
            do
            {
              int v63 = v29 - 1;
              unint64_t v64 = v24;
              do
              {
                unsigned char *v64 = *a5;
                v64 += v11;
                --v63;
              }
              while (v63);
              unsigned char *v64 = *a5;
              v24 += v37;
              ++v62;
            }
            while (v62 != v36);
          }
        }
        if (v29 != 1)
        {
          do
          {
            *unint64_t v24 = *a5;
            v24 += v11;
            --v35;
          }
          while (v35);
        }
        *unint64_t v24 = *a5;
      }
    }
  }
  return v10;
}

void sub_215DA9D20(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)(v1 + 8);
  if (v3) {
    free(v3);
  }
  *(void *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_215DA9D40(uint64_t a1, unsigned int *a2, uint64_t *a3, char a4, const __int16 *a5, char a6, uint64_t a7)
{
  if (a4)
  {
    unint64_t v11 = *a3;
    int v12 = *((_DWORD *)a3 + 2);
    unsigned int v13 = a2[2];
  }
  else
  {
    unsigned int v14 = *a2;
    unsigned int v15 = a2[1];
    if (v15) {
      uint64_t v16 = v14;
    }
    else {
      uint64_t v16 = 0;
    }
    int v17 = v15 * v14;
    unsigned int v13 = a2[2];
    if (v13) {
      int v12 = v17;
    }
    else {
      int v12 = 0;
    }
    unint64_t v11 = (*a2 != 0) | (unint64_t)(v16 << 32);
  }
  unsigned int v18 = v12 * v13;
  unint64_t v19 = 2 * v18;
  unint64_t v20 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  unint64_t v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
  unint64_t v22 = v21 | (v21 >> 16) | ((v21 | (v21 >> 16)) >> 32);
  if (v22 + 1 > 8) {
    size_t v23 = v22 + 1;
  }
  else {
    size_t v23 = 8;
  }
  *(void *)a1 = v19;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v23;
  if (v18)
  {
    memptr = 0;
    int v24 = malloc_type_posix_memalign(&memptr, v23, 2 * v18, 0x1F88E90uLL);
    if (v24) {
      sub_215E0D744(v24, *(void *)(a1 + 16), v19);
    }
    size_t v25 = (__int16 *)memptr;
    *(void *)(a1 + 8) = memptr;
  }
  else
  {
    size_t v25 = 0;
  }
  uint64_t v26 = *(void *)a2;
  *(_DWORD *)(a1 + 32) = a2[2];
  *(void *)(a1 + 24) = v26;
  *(void *)(a1 + 36) = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a1 + 44) = 2 * v12;
  if (!v25 || !a6) {
    return a1;
  }
  uint64_t v27 = v12 & 0x7FFFFFFF;
  if (*(_DWORD *)(a1 + 24)) {
    BOOL v28 = *(_DWORD *)(a1 + 28) == 0;
  }
  else {
    BOOL v28 = 1;
  }
  BOOL v29 = v28 || *(_DWORD *)(a1 + 32) == 0;
  char v30 = v29;
  if (v29) {
    uint64_t v31 = 0;
  }
  else {
    uint64_t v31 = *(void *)(a1 + 24);
  }
  if (v29) {
    int v32 = 0;
  }
  else {
    int v32 = *(_DWORD *)(a1 + 32);
  }
  uint64_t v33 = (v32 * v27);
  if (v33 == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_141;
  }
  unint64_t v34 = v11 & 0x7FFFFFFF7FFFFFFFLL;
  uint64_t v35 = v11 & 0x7FFFFFFF;
  if (v35 != 1)
  {
    if (v31) {
      BOOL v40 = HIDWORD(v31) == 0;
    }
    else {
      BOOL v40 = 1;
    }
    if (v40) {
      char v41 = 1;
    }
    else {
      char v41 = v30;
    }
    if (v41) {
      return a1;
    }
    int v42 = v31 - 1;
    int v43 = HIDWORD(v31) - 1;
    unint64_t v44 = HIDWORD(v34);
    int v45 = v32 - 1;
    if (v32 != 1)
    {
      if (HIDWORD(v31) == 1)
      {
        if (v31 != 1)
        {
          int v77 = 0;
          do
          {
            unint64_t v78 = v25;
            int v79 = v31 - 1;
            do
            {
              *unint64_t v78 = *a5;
              v78 += v35;
              --v79;
            }
            while (v79);
            *unint64_t v78 = *a5;
            v25 += v27;
            ++v77;
          }
          while (v77 != v45);
LABEL_109:
          if (v31 != 1)
          {
            uint64_t v80 = 2 * v35;
            do
            {
              *size_t v25 = *a5;
              size_t v25 = (__int16 *)((char *)v25 + v80);
              --v42;
            }
            while (v42);
          }
          goto LABEL_130;
        }
        do
        {
          *size_t v25 = *a5;
          v25 += v27;
          --v45;
        }
        while (v45);
LABEL_130:
        *size_t v25 = *a5;
        return a1;
      }
      if (v31 == 1)
      {
        do
        {
          BOOL v81 = v25;
          int v82 = HIDWORD(v31) - 1;
          do
          {
            *BOOL v81 = *a5;
            v81 += v44;
            --v82;
          }
          while (v82);
          *BOOL v81 = *a5;
          v25 += v27;
          ++v42;
        }
        while (v42 != v45);
        do
        {
LABEL_116:
          *size_t v25 = *a5;
          v25 += v44;
          --v43;
        }
        while (v43);
        goto LABEL_130;
      }
      int v46 = 0;
      uint64_t v47 = 2 * v27;
      uint64_t v48 = v44;
      uint64_t v49 = 2 * v35;
      int v50 = &v25[v44];
      do
      {
        int v51 = 0;
        uint64_t v52 = v50;
        int v53 = v25;
        do
        {
          int v54 = v52;
          int v55 = v53;
          int v56 = v31 - 1;
          do
          {
            __int16 *v55 = *a5;
            int v55 = (__int16 *)((char *)v55 + v49);
            --v56;
          }
          while (v56);
          __int16 *v55 = *a5;
          int v53 = (__int16 *)((char *)v53 + v48 * 2);
          ++v51;
          uint64_t v52 = &v54[v48];
        }
        while (v51 != v43);
        int v57 = v31 - 1;
        do
        {
          __int16 *v54 = *a5;
          int v54 = (__int16 *)((char *)v54 + v49);
          --v57;
        }
        while (v57);
        __int16 *v54 = *a5;
        size_t v25 = (__int16 *)((char *)v25 + v47);
        ++v46;
        int v50 = (__int16 *)((char *)v50 + v47);
      }
      while (v46 != v45);
    }
    if (HIDWORD(v31) == 1) {
      goto LABEL_109;
    }
    if (v31 != 1)
    {
      int v58 = 0;
      uint64_t v59 = 2 * v44;
      do
      {
        int v60 = v25;
        int v61 = v31 - 1;
        do
        {
          __int16 *v60 = *a5;
          v60 += v35;
          --v61;
        }
        while (v61);
        __int16 *v60 = *a5;
        size_t v25 = (__int16 *)((char *)v25 + v59);
        ++v58;
      }
      while (v58 != v43);
      goto LABEL_109;
    }
    goto LABEL_116;
  }
  if (HIDWORD(v34) != v31)
  {
    char v94 = 0;
    uint64_t v93 = v31;
    v95[0] = &v94;
    v95[1] = &v93;
    v95[2] = a5;
    if (v31) {
      BOOL v62 = HIDWORD(v31) == 0;
    }
    else {
      BOOL v62 = 1;
    }
    if (v62) {
      char v63 = 1;
    }
    else {
      char v63 = v30;
    }
    if ((v63 & 1) == 0)
    {
      LODWORD(memptr) = 0;
      HIDWORD(memptr) = v31 - 1;
      int v97 = 1;
      int v98 = HIDWORD(v31) - 1;
      v102[0] = 0;
      v102[1] = 0;
      int v64 = v32 - 1;
      int v99 = (v11 & 0x7FFFFFFF7FFFFFFFLL) >> 32;
      int v100 = v32 - 1;
      int v101 = v12 & 0x7FFFFFFF;
      if (v32 != 1)
      {
        do
        {
          sub_215B59F78((uint64_t)&memptr, (uint64_t)v102, (uint64_t)v95, (unint64_t)v25);
          v25 += v12 & 0x7FFFFFFF;
          --v64;
        }
        while (v64);
      }
      sub_215B59F78((uint64_t)&memptr, (uint64_t)v102, (uint64_t)v95, (unint64_t)v25);
    }
    return a1;
  }
  uint64_t v36 = (HIDWORD(v31) * v31);
  if (v27 != v36)
  {
    if (v31) {
      BOOL v65 = HIDWORD(v31) == 0;
    }
    else {
      BOOL v65 = 1;
    }
    if (v65) {
      char v66 = 1;
    }
    else {
      char v66 = v30;
    }
    if (v66) {
      return a1;
    }
    if (v32 == 1)
    {
      if (!v36) {
        return a1;
      }
    }
    else
    {
      if (!v36) {
        return a1;
      }
      uint64_t v67 = 0;
      uint64_t v68 = 2 * v27;
      int v69 = v25;
      do
      {
        unint64_t v70 = (unint64_t)v69;
        if (!v69
          && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_141;
        }
        uint64_t v71 = (__int16 *)v70;
        uint64_t v72 = v36;
        if (v36 < 0x10) {
          goto LABEL_101;
        }
        if (v70 < (unint64_t)(a5 + 1))
        {
          uint64_t v71 = (__int16 *)v70;
          uint64_t v72 = v36;
          if ((__int16 *)((char *)&v25[v36] + v68 * v67) > a5) {
            goto LABEL_101;
          }
        }
        uint64_t v73 = 0;
        uint64_t v71 = (__int16 *)(v70 + 2 * (v36 & 0xFFFFFFF0));
        int16x8_t v74 = vld1q_dup_s16(a5);
        do
        {
          uint64_t v75 = (int16x8_t *)(v70 + v73);
          *uint64_t v75 = v74;
          v75[1] = v74;
          v73 += 32;
        }
        while (((2 * v36) & 0x1FFFFFFE0) != v73);
        uint64_t v72 = v36 & 0xF;
        if ((v36 & 0xFFFFFFF0) != v36)
        {
LABEL_101:
          unint64_t v76 = v72 + 1;
          do
          {
            *v71++ = *a5;
            --v76;
          }
          while (v76 > 1);
        }
        int v69 = (__int16 *)(v70 + v68);
        ++v67;
      }
      while (v67 != v32 - 1);
      size_t v25 = (__int16 *)(v70 + v68);
      if (!v70)
      {
        if (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          size_t v25 = 0;
          goto LABEL_122;
        }
LABEL_141:
        abort();
      }
    }
LABEL_122:
    unint64_t v83 = v36 - (v36 != 0) + 1;
    if (v83 >= 0x10 && (v25 >= a5 + 1 || &v25[v36] <= a5))
    {
      uint64_t v84 = &v25[v83 & 0xFFFFFFFFFFFFFFF0];
      v36 -= v83 & 0xFFFFFFFFFFFFFFF0;
      int16x8_t v90 = vld1q_dup_s16(a5);
      BOOL v91 = (int16x8_t *)(v25 + 8);
      unint64_t v92 = v83 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v91[-1] = v90;
        *BOOL v91 = v90;
        v91 += 2;
        v92 -= 16;
      }
      while (v92);
      if (v83 == (v83 & 0xFFFFFFFFFFFFFFF0)) {
        return a1;
      }
    }
    else
    {
      uint64_t v84 = v25;
    }
    unint64_t v85 = v36 + 1;
    do
    {
      *v84++ = *a5;
      --v85;
    }
    while (v85 > 1);
    return a1;
  }
  if (!v33) {
    return a1;
  }
  if (v33 < 0x10 || v25 < a5 + 1 && &v25[v33] > a5)
  {
    size_t v37 = v25;
    uint64_t v38 = (v32 * v27);
LABEL_44:
    unint64_t v39 = v38 + 1;
    do
    {
      *v37++ = *a5;
      --v39;
    }
    while (v39 > 1);
    return a1;
  }
  size_t v37 = &v25[v33 & 0xFFFFFFF0];
  uint64_t v38 = ((_BYTE)v32 * (_BYTE)v27) & 0xF;
  int16x8_t v87 = vld1q_dup_s16(a5);
  unint64_t v88 = (int16x8_t *)(v25 + 8);
  uint64_t v89 = v33 & 0xFFFFFFF0;
  do
  {
    v88[-1] = v87;
    *unint64_t v88 = v87;
    v88 += 2;
    v89 -= 16;
  }
  while (v89);
  if ((v33 & 0xFFFFFFF0) != v33) {
    goto LABEL_44;
  }
  return a1;
}

void sub_215DAA424(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)(v1 + 8);
  if (v3) {
    free(v3);
  }
  *(void *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_215DAA448(uint64_t a1, unsigned int *a2, uint64_t *a3, char a4, _WORD *a5, char a6, uint64_t a7)
{
  if (a4)
  {
    unint64_t v11 = *a3;
    int v12 = *((_DWORD *)a3 + 2);
    unsigned int v13 = a2[2];
  }
  else
  {
    unsigned int v14 = *a2;
    unsigned int v15 = a2[1];
    if (v15) {
      uint64_t v16 = v14;
    }
    else {
      uint64_t v16 = 0;
    }
    int v17 = v15 * v14;
    unsigned int v13 = a2[2];
    if (v13) {
      int v12 = v17;
    }
    else {
      int v12 = 0;
    }
    unint64_t v11 = (*a2 != 0) | (unint64_t)(v16 << 32);
  }
  unsigned int v18 = v12 * v13;
  unint64_t v19 = 2 * v18;
  unint64_t v20 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  unint64_t v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
  unint64_t v22 = v21 | (v21 >> 16) | ((v21 | (v21 >> 16)) >> 32);
  if (v22 + 1 > 8) {
    size_t v23 = v22 + 1;
  }
  else {
    size_t v23 = 8;
  }
  *(void *)a1 = v19;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v23;
  if (v18)
  {
    memptr = 0;
    int v24 = malloc_type_posix_memalign(&memptr, v23, 2 * v18, 0x1F88E90uLL);
    if (v24) {
      sub_215E0D744(v24, *(void *)(a1 + 16), v19);
    }
    size_t v25 = memptr;
    *(void *)(a1 + 8) = memptr;
  }
  else
  {
    size_t v25 = 0;
  }
  uint64_t v26 = *(void *)a2;
  *(_DWORD *)(a1 + 32) = a2[2];
  *(void *)(a1 + 24) = v26;
  *(void *)(a1 + 36) = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a1 + 44) = 2 * v12;
  if (v25)
  {
    uint64_t v27 = v12 & 0x7FFFFFFF;
    unint64_t v28 = v11 & 0x7FFFFFFF7FFFFFFFLL;
    if (*(_DWORD *)(a1 + 24)) {
      BOOL v29 = *(_DWORD *)(a1 + 28) == 0;
    }
    else {
      BOOL v29 = 1;
    }
    BOOL v30 = v29 || *(_DWORD *)(a1 + 32) == 0;
    char v31 = v30;
    if (v30) {
      unint64_t v32 = 0;
    }
    else {
      unint64_t v32 = *(void *)(a1 + 24);
    }
    if (v30) {
      int v33 = 0;
    }
    else {
      int v33 = *(_DWORD *)(a1 + 32);
    }
    int v34 = v33 * v27;
    if (a6)
    {
      if (v34 == -1
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      if (HIDWORD(v32)) {
        BOOL v35 = v32 == 0;
      }
      else {
        BOOL v35 = 1;
      }
      if (v35) {
        char v36 = 1;
      }
      else {
        char v36 = v31;
      }
      if ((v36 & 1) == 0 && v32)
      {
        int v37 = v32 - 1;
        int v38 = HIDWORD(v32) - 1;
        unint64_t v39 = HIDWORD(v28);
        int v40 = v33 - 1;
        if (v33 != 1)
        {
          uint64_t v41 = v11 & 0x7FFFFFFF;
          if (HIDWORD(v32) == 1)
          {
            if (v32 == 1)
            {
              do
              {
                *size_t v25 = *a5;
                v25 += v27;
                --v40;
              }
              while (v40);
            }
            else
            {
              int v77 = 0;
              uint64_t v78 = 2 * v41;
              do
              {
                int v79 = v25;
                int v80 = v32 - 1;
                do
                {
                  _WORD *v79 = *a5;
                  int v79 = (_WORD *)((char *)v79 + v78);
                  --v80;
                }
                while (v80);
                _WORD *v79 = *a5;
                v25 += v27;
                ++v77;
              }
              while (v77 != v40);
            }
          }
          else
          {
            int v42 = 0;
            uint64_t v43 = 2 * v27;
            uint64_t v44 = v39;
            if (v32 == 1)
            {
              do
              {
                int v54 = HIDWORD(v32) - 1;
                int v55 = v25;
                do
                {
                  _WORD *v55 = *a5;
                  int v55 = (_WORD *)((char *)v55 + v44 * 2);
                  --v54;
                }
                while (v54);
                _WORD *v55 = *a5;
                size_t v25 = (_WORD *)((char *)v25 + v43);
                ++v42;
              }
              while (v42 != v40);
            }
            else
            {
              uint64_t v45 = 2 * v41;
              int v46 = &v25[v44];
              do
              {
                int v47 = 0;
                uint64_t v48 = v46;
                uint64_t v49 = v25;
                do
                {
                  int v50 = v48;
                  int v51 = v49;
                  int v52 = v32 - 1;
                  do
                  {
                    *int v51 = *a5;
                    int v51 = (_WORD *)((char *)v51 + v45);
                    --v52;
                  }
                  while (v52);
                  *int v51 = *a5;
                  uint64_t v49 = (_WORD *)((char *)v49 + v44 * 2);
                  ++v47;
                  uint64_t v48 = &v50[v44];
                }
                while (v47 != v38);
                int v53 = v32 - 1;
                do
                {
                  *int v50 = *a5;
                  int v50 = (_WORD *)((char *)v50 + v45);
                  --v53;
                }
                while (v53);
                *int v50 = *a5;
                size_t v25 = (_WORD *)((char *)v25 + v43);
                ++v42;
                int v46 = (_WORD *)((char *)v46 + v43);
              }
              while (v42 != v40);
            }
          }
        }
        if (HIDWORD(v32) != 1)
        {
          if (v32 == 1)
          {
            uint64_t v89 = 2 * v39;
            do
            {
              *size_t v25 = *a5;
              size_t v25 = (_WORD *)((char *)v25 + v89);
              --v38;
            }
            while (v38);
          }
          else
          {
            int v85 = 0;
            uint64_t v86 = 2 * v39;
            do
            {
              int16x8_t v87 = v25;
              int v88 = v32 - 1;
              do
              {
                _WORD *v87 = *a5;
                v87 += v11 & 0x7FFFFFFF;
                --v88;
              }
              while (v88);
              _WORD *v87 = *a5;
              size_t v25 = (_WORD *)((char *)v25 + v86);
              ++v85;
            }
            while (v85 != v38);
          }
        }
        if (v32 != 1)
        {
          do
          {
            *size_t v25 = *a5;
            v25 += v11 & 0x7FFFFFFF;
            --v37;
          }
          while (v37);
        }
        *size_t v25 = *a5;
      }
    }
    else
    {
      if (v34 == -1
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      if (HIDWORD(v32)) {
        BOOL v56 = v32 == 0;
      }
      else {
        BOOL v56 = 1;
      }
      if (v56) {
        char v57 = 1;
      }
      else {
        char v57 = v31;
      }
      if ((v57 & 1) == 0 && v32)
      {
        int v58 = v32 - 1;
        int v59 = HIDWORD(v32) - 1;
        unint64_t v60 = HIDWORD(v28);
        int v61 = v33 - 1;
        if (v33 != 1)
        {
          uint64_t v62 = v11 & 0x7FFFFFFF;
          if (HIDWORD(v32) == 1)
          {
            if (v32 == 1)
            {
              do
              {
                *size_t v25 = 0;
                v25 += v27;
                --v61;
              }
              while (v61);
            }
            else
            {
              int v81 = 0;
              uint64_t v82 = 2 * v62;
              do
              {
                unint64_t v83 = v25;
                int v84 = v32 - 1;
                do
                {
                  *unint64_t v83 = 0;
                  unint64_t v83 = (_WORD *)((char *)v83 + v82);
                  --v84;
                }
                while (v84);
                *unint64_t v83 = 0;
                v25 += v27;
                ++v81;
              }
              while (v81 != v61);
            }
          }
          else
          {
            int v63 = 0;
            uint64_t v64 = 2 * v27;
            uint64_t v65 = v60;
            if (v32 == 1)
            {
              do
              {
                int v75 = HIDWORD(v32) - 1;
                unint64_t v76 = v25;
                do
                {
                  *unint64_t v76 = 0;
                  unint64_t v76 = (_WORD *)((char *)v76 + v65 * 2);
                  --v75;
                }
                while (v75);
                *unint64_t v76 = 0;
                size_t v25 = (_WORD *)((char *)v25 + v64);
                ++v63;
              }
              while (v63 != v61);
            }
            else
            {
              uint64_t v66 = 2 * v62;
              uint64_t v67 = &v25[v65];
              do
              {
                int v68 = 0;
                int v69 = v67;
                unint64_t v70 = v25;
                do
                {
                  uint64_t v71 = v69;
                  uint64_t v72 = v70;
                  int v73 = v32 - 1;
                  do
                  {
                    _WORD *v72 = 0;
                    uint64_t v72 = (_WORD *)((char *)v72 + v66);
                    --v73;
                  }
                  while (v73);
                  _WORD *v72 = 0;
                  unint64_t v70 = (_WORD *)((char *)v70 + v65 * 2);
                  ++v68;
                  int v69 = &v71[v65];
                }
                while (v68 != v59);
                int v74 = v32 - 1;
                do
                {
                  _WORD *v71 = 0;
                  uint64_t v71 = (_WORD *)((char *)v71 + v66);
                  --v74;
                }
                while (v74);
                _WORD *v71 = 0;
                size_t v25 = (_WORD *)((char *)v25 + v64);
                ++v63;
                uint64_t v67 = (_WORD *)((char *)v67 + v64);
              }
              while (v63 != v61);
            }
          }
        }
        if (HIDWORD(v32) != 1)
        {
          if (v32 == 1)
          {
            uint64_t v94 = 2 * v60;
            do
            {
              *size_t v25 = 0;
              size_t v25 = (_WORD *)((char *)v25 + v94);
              --v59;
            }
            while (v59);
          }
          else
          {
            int v90 = 0;
            uint64_t v91 = 2 * v60;
            do
            {
              unint64_t v92 = v25;
              int v93 = v32 - 1;
              do
              {
                *unint64_t v92 = 0;
                v92 += v11 & 0x7FFFFFFF;
                --v93;
              }
              while (v93);
              *unint64_t v92 = 0;
              size_t v25 = (_WORD *)((char *)v25 + v91);
              ++v90;
            }
            while (v90 != v59);
          }
        }
        if (v32 != 1)
        {
          do
          {
            *size_t v25 = 0;
            v25 += v11 & 0x7FFFFFFF;
            --v58;
          }
          while (v58);
        }
        *size_t v25 = 0;
      }
    }
  }
  return a1;
}

void sub_215DAAA00(_Unwind_Exception *a1)
{
  sub_215D9CB0C(v1);
  _Unwind_Resume(a1);
}

void sub_215DAAA14(_Unwind_Exception *a1)
{
  sub_215D9CB0C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215DAAA28(uint64_t a1, unsigned int *a2, uint64_t *a3, char a4, const float *a5, char a6, uint64_t a7)
{
  if (a4)
  {
    unint64_t v11 = *a3;
    int v12 = *((_DWORD *)a3 + 2);
    unsigned int v13 = a2[2];
  }
  else
  {
    unsigned int v14 = *a2;
    unsigned int v15 = a2[1];
    if (v15) {
      uint64_t v16 = v14;
    }
    else {
      uint64_t v16 = 0;
    }
    int v17 = v15 * v14;
    unsigned int v13 = a2[2];
    if (v13) {
      int v12 = v17;
    }
    else {
      int v12 = 0;
    }
    unint64_t v11 = (*a2 != 0) | (unint64_t)(v16 << 32);
  }
  unsigned int v18 = v12 * v13;
  unint64_t v19 = 4 * v18;
  unint64_t v20 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  unint64_t v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
  unint64_t v22 = v21 | (v21 >> 16) | ((v21 | (v21 >> 16)) >> 32);
  if (v22 + 1 > 8) {
    size_t v23 = v22 + 1;
  }
  else {
    size_t v23 = 8;
  }
  *(void *)a1 = v19;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v23;
  if (v18)
  {
    memptr = 0;
    int v24 = malloc_type_posix_memalign(&memptr, v23, 4 * v18, 0x1F88E90uLL);
    if (v24) {
      sub_215E0D744(v24, *(void *)(a1 + 16), v19);
    }
    size_t v25 = (float32x4_t *)memptr;
    *(void *)(a1 + 8) = memptr;
  }
  else
  {
    size_t v25 = 0;
  }
  uint64_t v26 = *(void *)a2;
  *(_DWORD *)(a1 + 32) = a2[2];
  *(void *)(a1 + 24) = v26;
  *(void *)(a1 + 36) = (4 * v11) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a1 + 44) = 4 * v12;
  if (!v25 || !a6) {
    return a1;
  }
  uint64_t v27 = v12 & 0x3FFFFFFF;
  if (*(_DWORD *)(a1 + 24)) {
    BOOL v28 = *(_DWORD *)(a1 + 28) == 0;
  }
  else {
    BOOL v28 = 1;
  }
  BOOL v29 = v28 || *(_DWORD *)(a1 + 32) == 0;
  char v30 = v29;
  if (v29) {
    uint64_t v31 = 0;
  }
  else {
    uint64_t v31 = *(void *)(a1 + 24);
  }
  if (v29) {
    int v32 = 0;
  }
  else {
    int v32 = *(_DWORD *)(a1 + 32);
  }
  uint64_t v33 = (v32 * v27);
  if (v33 == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_141;
  }
  unint64_t v34 = v11 & 0x3FFFFFFF3FFFFFFFLL;
  uint64_t v35 = v11 & 0x3FFFFFFF;
  if (v35 != 1)
  {
    if (v31) {
      BOOL v40 = HIDWORD(v31) == 0;
    }
    else {
      BOOL v40 = 1;
    }
    if (v40) {
      char v41 = 1;
    }
    else {
      char v41 = v30;
    }
    if (v41) {
      return a1;
    }
    int v42 = v31 - 1;
    int v43 = HIDWORD(v31) - 1;
    unint64_t v44 = HIDWORD(v34);
    int v45 = v32 - 1;
    if (v32 != 1)
    {
      if (HIDWORD(v31) == 1)
      {
        if (v31 != 1)
        {
          int v77 = 0;
          do
          {
            uint64_t v78 = v25;
            int v79 = v31 - 1;
            do
            {
              v78->f32[0] = *a5;
              uint64_t v78 = (float32x4_t *)((char *)v78 + 4 * v35);
              --v79;
            }
            while (v79);
            v78->f32[0] = *a5;
            size_t v25 = (float32x4_t *)((char *)v25 + 4 * v27);
            ++v77;
          }
          while (v77 != v45);
LABEL_109:
          if (v31 != 1)
          {
            uint64_t v80 = 4 * v35;
            do
            {
              v25->f32[0] = *a5;
              size_t v25 = (float32x4_t *)((char *)v25 + v80);
              --v42;
            }
            while (v42);
          }
          goto LABEL_130;
        }
        do
        {
          v25->f32[0] = *a5;
          size_t v25 = (float32x4_t *)((char *)v25 + 4 * v27);
          --v45;
        }
        while (v45);
LABEL_130:
        v25->f32[0] = *a5;
        return a1;
      }
      if (v31 == 1)
      {
        do
        {
          int v81 = v25;
          int v82 = HIDWORD(v31) - 1;
          do
          {
            v81->f32[0] = *a5;
            int v81 = (float32x4_t *)((char *)v81 + 4 * v44);
            --v82;
          }
          while (v82);
          v81->f32[0] = *a5;
          size_t v25 = (float32x4_t *)((char *)v25 + 4 * v27);
          ++v42;
        }
        while (v42 != v45);
        do
        {
LABEL_116:
          v25->f32[0] = *a5;
          size_t v25 = (float32x4_t *)((char *)v25 + 4 * v44);
          --v43;
        }
        while (v43);
        goto LABEL_130;
      }
      int v46 = 0;
      uint64_t v47 = 4 * v27;
      uint64_t v48 = v44;
      uint64_t v49 = 4 * v35;
      int v50 = &v25->i32[v44];
      do
      {
        int v51 = 0;
        int v52 = v50;
        int v53 = v25;
        do
        {
          int v54 = v52;
          int v55 = v53;
          int v56 = v31 - 1;
          do
          {
            v55->f32[0] = *a5;
            int v55 = (float32x4_t *)((char *)v55 + v49);
            --v56;
          }
          while (v56);
          v55->f32[0] = *a5;
          int v53 = (float32x4_t *)((char *)v53 + v48 * 4);
          ++v51;
          int v52 = &v54[v48];
        }
        while (v51 != v43);
        int v57 = v31 - 1;
        do
        {
          __int32 *v54 = *(_DWORD *)a5;
          int v54 = (__int32 *)((char *)v54 + v49);
          --v57;
        }
        while (v57);
        __int32 *v54 = *(_DWORD *)a5;
        size_t v25 = (float32x4_t *)((char *)v25 + v47);
        ++v46;
        int v50 = (__int32 *)((char *)v50 + v47);
      }
      while (v46 != v45);
    }
    if (HIDWORD(v31) == 1) {
      goto LABEL_109;
    }
    if (v31 != 1)
    {
      int v58 = 0;
      uint64_t v59 = 4 * v44;
      do
      {
        unint64_t v60 = v25;
        int v61 = v31 - 1;
        do
        {
          v60->f32[0] = *a5;
          unint64_t v60 = (float32x4_t *)((char *)v60 + 4 * v35);
          --v61;
        }
        while (v61);
        v60->f32[0] = *a5;
        size_t v25 = (float32x4_t *)((char *)v25 + v59);
        ++v58;
      }
      while (v58 != v43);
      goto LABEL_109;
    }
    goto LABEL_116;
  }
  if (HIDWORD(v34) != v31)
  {
    char v94 = 0;
    uint64_t v93 = v31;
    v95[0] = &v94;
    v95[1] = &v93;
    v95[2] = a5;
    if (v31) {
      BOOL v62 = HIDWORD(v31) == 0;
    }
    else {
      BOOL v62 = 1;
    }
    if (v62) {
      char v63 = 1;
    }
    else {
      char v63 = v30;
    }
    if ((v63 & 1) == 0)
    {
      LODWORD(memptr) = 0;
      HIDWORD(memptr) = v31 - 1;
      int v97 = 1;
      int v98 = HIDWORD(v31) - 1;
      v102[0] = 0;
      v102[1] = 0;
      int v64 = v32 - 1;
      int v99 = (v11 & 0x3FFFFFFF3FFFFFFFLL) >> 32;
      int v100 = v32 - 1;
      int v101 = v12 & 0x3FFFFFFF;
      if (v32 != 1)
      {
        do
        {
          sub_215B5BA74((uint64_t)&memptr, (uint64_t)v102, (uint64_t)v95, (unint64_t)v25);
          size_t v25 = (float32x4_t *)((char *)v25 + 4 * (v12 & 0x3FFFFFFF));
          --v64;
        }
        while (v64);
      }
      sub_215B5BA74((uint64_t)&memptr, (uint64_t)v102, (uint64_t)v95, (unint64_t)v25);
    }
    return a1;
  }
  uint64_t v36 = (HIDWORD(v31) * v31);
  if (v27 != v36)
  {
    if (v31) {
      BOOL v65 = HIDWORD(v31) == 0;
    }
    else {
      BOOL v65 = 1;
    }
    if (v65) {
      char v66 = 1;
    }
    else {
      char v66 = v30;
    }
    if (v66) {
      return a1;
    }
    if (v32 == 1)
    {
      if (!v36) {
        return a1;
      }
    }
    else
    {
      if (!v36) {
        return a1;
      }
      uint64_t v67 = 0;
      uint64_t v68 = 4 * v27;
      int v69 = v25;
      do
      {
        unint64_t v70 = (unint64_t)v69;
        if (!v69
          && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          goto LABEL_141;
        }
        uint64_t v71 = (_DWORD *)v70;
        uint64_t v72 = v36;
        if (v36 < 8) {
          goto LABEL_101;
        }
        if (v70 < (unint64_t)(a5 + 1))
        {
          uint64_t v71 = (_DWORD *)v70;
          uint64_t v72 = v36;
          if ((char *)&v25->f32[v36] + v68 * v67 > (char *)a5) {
            goto LABEL_101;
          }
        }
        uint64_t v73 = 0;
        uint64_t v71 = (_DWORD *)(v70 + 4 * (v36 & 0xFFFFFFF8));
        float32x4_t v74 = vld1q_dup_f32(a5);
        do
        {
          int v75 = (float32x4_t *)(v70 + v73);
          *int v75 = v74;
          v75[1] = v74;
          v73 += 32;
        }
        while (((4 * v36) & 0x3FFFFFFE0) != v73);
        uint64_t v72 = v36 & 7;
        if ((v36 & 0xFFFFFFF8) != v36)
        {
LABEL_101:
          unint64_t v76 = v72 + 1;
          do
          {
            *v71++ = *(_DWORD *)a5;
            --v76;
          }
          while (v76 > 1);
        }
        int v69 = (float32x4_t *)(v70 + v68);
        ++v67;
      }
      while (v67 != v32 - 1);
      size_t v25 = (float32x4_t *)(v70 + v68);
      if (!v70)
      {
        if (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          size_t v25 = 0;
          goto LABEL_122;
        }
LABEL_141:
        abort();
      }
    }
LABEL_122:
    unint64_t v83 = v36 - (v36 != 0) + 1;
    if (v83 >= 0x10 && (v25 >= (float32x4_t *)(a5 + 1) || &v25->f32[v36] <= a5))
    {
      int v84 = (float32x4_t *)((char *)v25 + 4 * (v83 & 0xFFFFFFFFFFFFFFF8));
      v36 -= v83 & 0xFFFFFFFFFFFFFFF8;
      float32x4_t v90 = vld1q_dup_f32(a5);
      uint64_t v91 = v25 + 1;
      unint64_t v92 = v83 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v91[-1] = v90;
        *uint64_t v91 = v90;
        v91 += 2;
        v92 -= 8;
      }
      while (v92);
      if (v83 == (v83 & 0xFFFFFFFFFFFFFFF8)) {
        return a1;
      }
    }
    else
    {
      int v84 = v25;
    }
    unint64_t v85 = v36 + 1;
    do
    {
      v84->f32[0] = *a5;
      int v84 = (float32x4_t *)((char *)v84 + 4);
      --v85;
    }
    while (v85 > 1);
    return a1;
  }
  if (!v33) {
    return a1;
  }
  if (v33 < 8 || v25 < (float32x4_t *)(a5 + 1) && &v25->f32[v33] > a5)
  {
    int v37 = v25;
    uint64_t v38 = (v32 * v27);
LABEL_44:
    unint64_t v39 = v38 + 1;
    do
    {
      v37->f32[0] = *a5;
      int v37 = (float32x4_t *)((char *)v37 + 4);
      --v39;
    }
    while (v39 > 1);
    return a1;
  }
  int v37 = (float32x4_t *)((char *)v25 + 4 * (v33 & 0xFFFFFFF8));
  uint64_t v38 = ((_BYTE)v32 * (_BYTE)v27) & 7;
  float32x4_t v87 = vld1q_dup_f32(a5);
  int v88 = v25 + 1;
  uint64_t v89 = v33 & 0xFFFFFFF8;
  do
  {
    v88[-1] = v87;
    *int v88 = v87;
    v88 += 2;
    v89 -= 8;
  }
  while (v89);
  if ((v33 & 0xFFFFFFF8) != v33) {
    goto LABEL_44;
  }
  return a1;
}

void sub_215DAB10C(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)(v1 + 8);
  if (v3) {
    free(v3);
  }
  *(void *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_215DAB130(uint64_t a1, _DWORD *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (a2[1]) {
    BOOL v3 = *a2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)a2;
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 2;
  *(void *)&memptr[4] = v4;
  uint64_t v5 = 2 * (v4 != 0);
  if (HIDWORD(v4)) {
    unint64_t v6 = (v5 * *(_DWORD *)&memptr[4]);
  }
  else {
    unint64_t v6 = 0;
  }
  unint64_t v7 = v5 & 0x1FFFFFFFFLL | ((unint64_t)(v6 >> 1) << 33);
  unint64_t v8 = __PAIR64__(*(unsigned int *)&memptr[4], 2);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v7;
  uint64_t v9 = *(void *)memptr;
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 8) = HIDWORD(v4);
  *(void *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v6;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(unsigned char *)(a1 + 52) = 0;
  if (HIDWORD(v8)) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  BOOL v11 = v10 || HIDWORD(v4) == 0;
  int v12 = v11;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = HIDWORD(v4);
  }
  uint64_t v14 = 2 * v6;
  if ((v14 & (v14 - 1)) != 0) {
    unint64_t v15 = 1;
  }
  else {
    unint64_t v15 = v14 - 1;
  }
  unint64_t v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  unint64_t v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8) {
    size_t v19 = v18 + 1;
  }
  else {
    size_t v19 = 8;
  }
  *(void *)(a1 + 56) = 2 * (v13 * v6);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = v19;
  if (v13 * v6)
  {
    *(void *)memptr = 0;
    int v20 = malloc_type_posix_memalign((void **)memptr, v19, 2 * (v13 * v6), 0x1F88E90uLL);
    if (v20) {
      sub_215E0D744(v20, *(void *)(a1 + 72), 2 * (v13 * v6));
    }
    *(void *)(a1 + 64) = *(void *)memptr;
  }
  if (v12) {
    unint64_t v21 = 0;
  }
  else {
    unint64_t v21 = v8;
  }
  *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v21;
  *(_DWORD *)(a1 + 88) = v13;
  *(void *)(a1 + 92) = (2 * v9) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a1 + 10std::__fs::filesystem::__rename(__from, __to, 0) = 2 * v6;
  return a1;
}

uint64_t sub_215DAB2F0(uint64_t a1, _DWORD *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (a2[1]) {
    BOOL v3 = *a2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)a2;
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 2;
  *(void *)&memptr[4] = v4;
  uint64_t v5 = 2 * (v4 != 0);
  if (HIDWORD(v4)) {
    unint64_t v6 = (v5 * *(_DWORD *)&memptr[4]);
  }
  else {
    unint64_t v6 = 0;
  }
  unint64_t v7 = v5 & 0x1FFFFFFFFLL | ((unint64_t)(v6 >> 1) << 33);
  unint64_t v8 = __PAIR64__(*(unsigned int *)&memptr[4], 2);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v7;
  uint64_t v9 = *(void *)memptr;
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 8) = HIDWORD(v4);
  *(void *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v6;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(unsigned char *)(a1 + 52) = 0;
  if (HIDWORD(v8)) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  BOOL v11 = v10 || HIDWORD(v4) == 0;
  int v12 = v11;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = HIDWORD(v4);
  }
  uint64_t v14 = 4 * v6;
  unint64_t v15 = v14 - 1;
  BOOL v3 = (v14 & (v14 - 1)) == 0;
  unint64_t v16 = 3;
  if (v3) {
    unint64_t v16 = v15;
  }
  unint64_t v17 = v16 | (v16 >> 1) | ((v16 | (v16 >> 1)) >> 2);
  unint64_t v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  unint64_t v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8) {
    size_t v20 = v19 + 1;
  }
  else {
    size_t v20 = 8;
  }
  *(void *)(a1 + 56) = 4 * (v13 * v6);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = v20;
  if (v13 * v6)
  {
    *(void *)memptr = 0;
    int v21 = malloc_type_posix_memalign((void **)memptr, v20, 4 * (v13 * v6), 0x1F88E90uLL);
    if (v21) {
      sub_215E0D744(v21, *(void *)(a1 + 72), 4 * (v13 * v6));
    }
    *(void *)(a1 + 64) = *(void *)memptr;
  }
  if (v12) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = v8;
  }
  *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v22;
  *(_DWORD *)(a1 + 88) = v13;
  *(void *)(a1 + 92) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a1 + 10std::__fs::filesystem::__rename(__from, __to, 0) = 4 * v6;
  return a1;
}

uint64_t sub_215DAB4B4(uint64_t a1, _DWORD *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (a2[1]) {
    BOOL v3 = *a2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v4 = *(void *)a2;
  if (v3) {
    uint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 3;
  *(void *)&memptr[4] = v4;
  if (v4) {
    uint64_t v5 = 3;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = HIDWORD(*(void *)&memptr[4]);
  if (HIDWORD(*(void *)&memptr[4])) {
    uint64_t v7 = (v5 * *(_DWORD *)&memptr[4]);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = v5 | (v7 << 32);
  unint64_t v9 = __PAIR64__(*(unsigned int *)&memptr[4], 3);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v8;
  uint64_t v10 = *(void *)memptr;
  *(void *)a1 = v9;
  *(_DWORD *)(a1 + 8) = v6;
  *(void *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v7;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(unsigned char *)(a1 + 52) = 0;
  if (HIDWORD(v9)) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || v6 == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = v6;
  }
  uint64_t v15 = 2 * v7;
  if ((v15 & (v15 - 1)) != 0) {
    unint64_t v16 = 1;
  }
  else {
    unint64_t v16 = v15 - 1;
  }
  unint64_t v17 = v16 | (v16 >> 1) | ((v16 | (v16 >> 1)) >> 2);
  unint64_t v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  unint64_t v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8) {
    size_t v20 = v19 + 1;
  }
  else {
    size_t v20 = 8;
  }
  *(void *)(a1 + 56) = 2 * (v14 * v7);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = v20;
  if (v14 * v7)
  {
    *(void *)memptr = 0;
    int v21 = malloc_type_posix_memalign((void **)memptr, v20, 2 * (v14 * v7), 0x1F88E90uLL);
    if (v21) {
      sub_215E0D744(v21, *(void *)(a1 + 72), 2 * (v14 * v7));
    }
    *(void *)(a1 + 64) = *(void *)memptr;
  }
  if (v13) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = v9;
  }
  *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v22;
  *(_DWORD *)(a1 + 88) = v14;
  *(void *)(a1 + 92) = (2 * v10) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a1 + 10std::__fs::filesystem::__rename(__from, __to, 0) = 2 * v7;
  return a1;
}

uint64_t sub_215DAB66C(uint64_t a1, _DWORD *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (a2[1]) {
    BOOL v3 = *a2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v4 = *(void *)a2;
  if (v3) {
    uint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 3;
  *(void *)&memptr[4] = v4;
  if (v4) {
    uint64_t v5 = 3;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = HIDWORD(*(void *)&memptr[4]);
  if (HIDWORD(*(void *)&memptr[4])) {
    uint64_t v7 = (v5 * *(_DWORD *)&memptr[4]);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = v5 | (v7 << 32);
  unint64_t v9 = __PAIR64__(*(unsigned int *)&memptr[4], 3);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v8;
  uint64_t v10 = *(void *)memptr;
  *(void *)a1 = __PAIR64__(v4, 3);
  *(_DWORD *)(a1 + 8) = v6;
  *(void *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v7;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(unsigned char *)(a1 + 52) = 0;
  if (__PAIR64__(v4, 3) >> 32) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = v11 || v6 == 0;
  int v13 = v12;
  if (v12) {
    int v14 = 0;
  }
  else {
    int v14 = v6;
  }
  uint64_t v15 = 4 * v7;
  if ((v15 & (v15 - 1)) != 0) {
    unint64_t v16 = 3;
  }
  else {
    unint64_t v16 = v15 - 1;
  }
  unint64_t v17 = v16 | (v16 >> 1) | ((v16 | (v16 >> 1)) >> 2);
  unint64_t v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  unint64_t v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8) {
    size_t v20 = v19 + 1;
  }
  else {
    size_t v20 = 8;
  }
  *(void *)(a1 + 56) = 4 * (v14 * v7);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = v20;
  if (v14 * v7)
  {
    *(void *)memptr = 0;
    int v21 = malloc_type_posix_memalign((void **)memptr, v20, 4 * (v14 * v7), 0x1F88E90uLL);
    if (v21) {
      sub_215E0D744(v21, *(void *)(a1 + 72), 4 * (v14 * v7));
    }
    *(void *)(a1 + 64) = *(void *)memptr;
  }
  if (v13) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = v9;
  }
  *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v22;
  *(_DWORD *)(a1 + 88) = v14;
  *(void *)(a1 + 92) = (4 * v10) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a1 + 10std::__fs::filesystem::__rename(__from, __to, 0) = 4 * v7;
  return a1;
}

uint64_t sub_215DAB824(uint64_t a1, _DWORD *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (a2[1]) {
    BOOL v3 = *a2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)a2;
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 4;
  *(void *)&memptr[4] = v4;
  uint64_t v5 = 4 * (v4 != 0);
  if (HIDWORD(v4)) {
    unint64_t v6 = (v5 * *(_DWORD *)&memptr[4]);
  }
  else {
    unint64_t v6 = 0;
  }
  unint64_t v7 = v5 & 0x3FFFFFFFFLL | ((unint64_t)(v6 >> 2) << 34);
  unint64_t v8 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v7;
  uint64_t v9 = *(void *)memptr;
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 8) = HIDWORD(v4);
  *(void *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v6;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(unsigned char *)(a1 + 52) = 0;
  if (HIDWORD(v8)) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  BOOL v11 = v10 || HIDWORD(v4) == 0;
  int v12 = v11;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = HIDWORD(v4);
  }
  uint64_t v14 = 2 * v6;
  if ((v14 & (v14 - 1)) != 0) {
    unint64_t v15 = 1;
  }
  else {
    unint64_t v15 = v14 - 1;
  }
  unint64_t v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  unint64_t v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  unint64_t v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8) {
    size_t v19 = v18 + 1;
  }
  else {
    size_t v19 = 8;
  }
  *(void *)(a1 + 56) = 2 * (v13 * v6);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = v19;
  if (v13 * v6)
  {
    *(void *)memptr = 0;
    int v20 = malloc_type_posix_memalign((void **)memptr, v19, 2 * (v13 * v6), 0x1F88E90uLL);
    if (v20) {
      sub_215E0D744(v20, *(void *)(a1 + 72), 2 * (v13 * v6));
    }
    *(void *)(a1 + 64) = *(void *)memptr;
  }
  if (v12) {
    unint64_t v21 = 0;
  }
  else {
    unint64_t v21 = v8;
  }
  *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v21;
  *(_DWORD *)(a1 + 88) = v13;
  *(void *)(a1 + 92) = (2 * v9) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a1 + 10std::__fs::filesystem::__rename(__from, __to, 0) = 2 * v6;
  return a1;
}

uint64_t sub_215DAB9E4(uint64_t a1, _DWORD *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (a2[1]) {
    BOOL v3 = *a2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  unint64_t v4 = *(void *)a2;
  if (v3) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)memptr = 4;
  *(void *)&memptr[4] = v4;
  uint64_t v5 = 4 * (v4 != 0);
  if (HIDWORD(v4)) {
    unint64_t v6 = (v5 * *(_DWORD *)&memptr[4]);
  }
  else {
    unint64_t v6 = 0;
  }
  unint64_t v7 = v5 & 0x3FFFFFFFFLL | ((unint64_t)(v6 >> 2) << 34);
  unint64_t v8 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(void *)&memptr[4] = v7;
  uint64_t v9 = *(void *)memptr;
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 8) = HIDWORD(v4);
  *(void *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v6;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(unsigned char *)(a1 + 52) = 0;
  if (HIDWORD(v8)) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  BOOL v11 = v10 || HIDWORD(v4) == 0;
  int v12 = v11;
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = HIDWORD(v4);
  }
  uint64_t v14 = 4 * v6;
  unint64_t v15 = v14 - 1;
  BOOL v3 = (v14 & (v14 - 1)) == 0;
  unint64_t v16 = 3;
  if (v3) {
    unint64_t v16 = v15;
  }
  unint64_t v17 = v16 | (v16 >> 1) | ((v16 | (v16 >> 1)) >> 2);
  unint64_t v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  unint64_t v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8) {
    size_t v20 = v19 + 1;
  }
  else {
    size_t v20 = 8;
  }
  *(void *)(a1 + 56) = 4 * (v13 * v6);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = v20;
  if (v13 * v6)
  {
    *(void *)memptr = 0;
    int v21 = malloc_type_posix_memalign((void **)memptr, v20, 4 * (v13 * v6), 0x1F88E90uLL);
    if (v21) {
      sub_215E0D744(v21, *(void *)(a1 + 72), 4 * (v13 * v6));
    }
    *(void *)(a1 + 64) = *(void *)memptr;
  }
  if (v12) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = v8;
  }
  *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v22;
  *(_DWORD *)(a1 + 88) = v13;
  *(void *)(a1 + 92) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a1 + 10std::__fs::filesystem::__rename(__from, __to, 0) = 4 * v6;
  return a1;
}

#error "215DABBA8: too big function (funcsize=0)"

void sub_215DC16C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  if (a29)
  {
    if (!atomic_fetch_add(&a29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a29->__on_zero_shared)(a29);
      std::__shared_weak_count::__release_weak(a29);
    }
  }
  _Unwind_Resume(a1);
}

double sub_215DC2D94(__int16 *a1, uint64_t a2)
{
  int v7 = 0;
  sub_215DC2E88((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1) {
    sub_215742D4C();
  }
  v9[0] = &v8;
  ((void (*)(long long *__return_ptr, void *, unsigned char *))off_26C684880[v7])(&v4, v9, v6);
  if (v7 != -1) {
    ((void (*)(void *, unsigned char *))off_26C684850[v7])(v9, v6);
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  return result;
}

void sub_215DC2E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_26C684850[a15])(v15 - 17, &a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DC2E88(uint64_t a1, uint64_t a2, __int16 *a3)
{
  _H0 = *a3;
  __asm { FCVT            S0, H0; __val }
  std::to_string(&v16, _S0);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v10 = &v16;
  }
  else {
    BOOL v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
  }
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v16.__r_.__value_.__l.__size_;
  }
  int v12 = (char *)&v10[-1].__r_.__value_.__r.__words[2] + 7;
  while (size)
  {
    int v13 = v12[size--];
    if (v13 != 48)
    {
      if ((*((unsigned char *)&v16.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_11;
      }
LABEL_14:
      if (size == v16.__r_.__value_.__l.__size_ - 1) {
        goto LABEL_15;
      }
LABEL_17:
      operator new();
    }
  }
  std::string::size_type size = -1;
  if ((*((unsigned char *)&v16.__r_.__value_.__s + 23) & 0x80) != 0) {
    goto LABEL_14;
  }
LABEL_11:
  if (size != HIBYTE(v16.__r_.__value_.__r.__words[2]) - 1) {
    goto LABEL_17;
  }
LABEL_15:
  v17[0] = a2;
  v17[1] = &v16;
  v17[2] = a2;
  void v17[3] = &v16;
  v17[4] = &v16;
  uint64_t v14 = *(unsigned int *)(a2 + 24);
  if (v14 == -1) {
    sub_215742D4C();
  }
  std::string __p = v17;
  ((void (*)(void **, uint64_t))off_26C684898[v14])(&__p, a2);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_215DC317C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DC31F4(uint64_t a1, long long *a2)
{
  sub_215DC32DC(**(uint64_t ***)a1, a2, **(unsigned __int8 **)(*(void *)a1 + 8));
  uint64_t v4 = *(void *)(a1 + 8);
  BOOL v3 = *(void **)(a1 + 16);
  uint64_t v5 = *(void *)(v4 + 32);
  unint64_t v6 = *(unsigned int **)v4;
  int v7 = *(_DWORD **)(v4 + 8);
  int v8 = **(_DWORD **)v4 + 1;
  **(_DWORD **)uint64_t v4 = v8;
  if (v8 == *v7)
  {
    int v9 = v6[1] + 1;
    *unint64_t v6 = 0;
    v6[1] = v9;
    if (v9 == v7[1]) {
      return;
    }
    uint64_t v10 = 1;
  }
  else
  {
    uint64_t v10 = 0;
  }
  size_t v11 = strlen(*(const char **)(**(void **)(v4 + 16) + 8 * v10));
  sub_215731D94(v3, *(void *)(**(void **)(v4 + 16) + 8 * v10), v11);
  int v12 = *(unsigned int **)v4;
  unsigned int v13 = **(_DWORD **)(v4 + 24);

  sub_215954574(v5, v3, v12, v10, v13);
}

void sub_215DC32DC(uint64_t *a1, long long *a2, unsigned int a3)
{
  int v12 = -1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_215738B0C(&__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long __dst = *a2;
    uint64_t v11 = *((void *)a2 + 2);
  }
  uint64_t v9 = v11;
  *(_OWORD *)std::string __p = __dst;
  uint64_t v5 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = a3;
  *(_DWORD *)((char *)a1 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)a1 + *(void *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x20;
  if (v9 >= 0) {
    unint64_t v6 = __p;
  }
  else {
    unint64_t v6 = (void **)__p[0];
  }
  if (v9 >= 0) {
    uint64_t v7 = HIBYTE(v9);
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_215731D94(a1, (uint64_t)v6, v7);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

void sub_215DC33F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DC340C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_215DC3428(float *a1, uint64_t a2)
{
  int v7 = 0;
  sub_2157D208C((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1) {
    sub_215742D4C();
  }
  v9[0] = &v8;
  ((void (*)(long long *__return_ptr, void *, unsigned char *))off_26C684880[v7])(&v4, v9, v6);
  if (v7 != -1) {
    ((void (*)(void *, unsigned char *))off_26C684850[v7])(v9, v6);
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  return result;
}

void sub_215DC34E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_26C684850[a15])(v15 - 17, &a12);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_215DC351C(unsigned char *result, unsigned int a2, unint64_t **a3, uint64_t a4)
{
  uint64_t v5 = a3;
  if (result)
  {
    int v6 = (int)result;
    int v7 = 0;
    char v8 = *a3;
    int v32 = (uint64_t **)(a3 + 1);
    do
    {
      char v13 = *(unsigned char *)(a4 + 23);
      if (v13 >= 0) {
        uint64_t v14 = *(unsigned __int8 *)(a4 + 23);
      }
      else {
        uint64_t v14 = *(void *)(a4 + 8);
      }
      if (v13 >= 0) {
        uint64_t v15 = (unsigned char *)a4;
      }
      else {
        uint64_t v15 = *(unsigned char **)a4;
      }
      if (v14 >= 1)
      {
        std::string v16 = &v15[v14];
        size_t v17 = v14;
        double result = v15;
        do
        {
          double result = memchr(result, 46, v17);
          if (!result) {
            break;
          }
          if (*result == 46)
          {
            if (result == v16) {
              break;
            }
            unint64_t v18 = result - v15;
            uint64_t v10 = (uint64_t **)v5;
            if (result - v15 != -1)
            {
              unint64_t v19 = (unsigned char *)*v8;
              if (*v8 <= v18) {
                unint64_t v19 = (unsigned char *)(result - v15);
              }
              *char v8 = (unint64_t)v19;
              uint64_t v20 = *(unsigned __int8 *)(a4 + 23);
              if ((v20 & 0x80u) != 0) {
                uint64_t v20 = *(void *)(a4 + 8);
              }
              uint64_t v14 = v20 + ~v18;
              uint64_t v10 = v32;
            }
            goto LABEL_4;
          }
          ++result;
          size_t v17 = v16 - result;
        }
        while (v16 - result >= 1);
      }
      uint64_t v10 = (uint64_t **)v5;
LABEL_4:
      uint64_t v11 = *v10;
      uint64_t v12 = *v11;
      if (*v11 <= (unint64_t)v14) {
        uint64_t v12 = v14;
      }
      uint64_t *v11 = v12;
      a4 += 24 * a2;
      ++v7;
    }
    while (v7 != v6);
  }
  char v21 = *(unsigned char *)(a4 + 23);
  if (v21 >= 0) {
    uint64_t v22 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v22 = *(void *)(a4 + 8);
  }
  if (v21 >= 0) {
    size_t v23 = (unsigned char *)a4;
  }
  else {
    size_t v23 = *(unsigned char **)a4;
  }
  if (v22 >= 1)
  {
    uint64_t v24 = &v23[v22];
    size_t v25 = v22;
    double result = v23;
    do
    {
      double result = memchr(result, 46, v25);
      if (!result) {
        break;
      }
      if (*result == 46)
      {
        if (result != v24)
        {
          unint64_t v26 = result - v23;
          if (result - v23 != -1)
          {
            BOOL v28 = *v5++;
            uint64_t v27 = v28;
            BOOL v29 = (unsigned char *)*v28;
            if (*v28 <= v26) {
              BOOL v29 = (unsigned char *)(result - v23);
            }
            *uint64_t v27 = (unint64_t)v29;
            uint64_t v30 = *(unsigned __int8 *)(a4 + 23);
            if ((v30 & 0x80u) != 0) {
              uint64_t v30 = *(void *)(a4 + 8);
            }
            uint64_t v22 = v30 + ~v26;
          }
        }
        break;
      }
      ++result;
      size_t v25 = v24 - result;
    }
    while (v24 - result >= 1);
  }
  unint64_t v31 = **v5;
  if (v31 <= v22) {
    unint64_t v31 = v22;
  }
  **uint64_t v5 = v31;
  return result;
}

void *sub_215DC3708(uint64_t a1, void **a2)
{
  double result = sub_215E0D5E0(**(uint64_t ***)a1, a2, **(unsigned __int8 **)(*(void *)a1 + 8), *(unsigned __int8 *)(*(void *)(*(void *)a1 + 8) + 8));
  uint64_t v5 = *(void *)(a1 + 8);
  long long v4 = *(void **)(a1 + 16);
  uint64_t v6 = *(void *)(v5 + 32);
  int v7 = *(unsigned int **)v5;
  char v8 = *(_DWORD **)(v5 + 8);
  int v9 = **(_DWORD **)v5 + 1;
  **(_DWORD **)uint64_t v5 = v9;
  if (v9 == *v8)
  {
    int v10 = v7[1] + 1;
    unsigned int *v7 = 0;
    v7[1] = v10;
    if (v10 == v8[1]) {
      return result;
    }
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v11 = 0;
  }
  size_t v12 = strlen(*(const char **)(**(void **)(v5 + 16) + 8 * v11));
  sub_215731D94(v4, *(void *)(**(void **)(v5 + 16) + 8 * v11), v12);
  char v13 = *(unsigned int **)v5;
  unsigned int v14 = **(_DWORD **)(v5 + 24);

  return sub_215954574(v6, v4, v13, v11, v14);
}

void sub_215DC37F4(uint64_t a1, unsigned __int8 *a2)
{
  BOOL v3 = **(uint64_t ***)a1;
  uint64_t v4 = **(unsigned __int8 **)(*(void *)a1 + 8);
  sub_215BAB6B4(a2);
  uint64_t v5 = *v3;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v7 = v19;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_215731D94(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  char v8 = *(void **)(a1 + 16);
  uint64_t v10 = *(void *)(v9 + 32);
  uint64_t v11 = *(unsigned int **)v9;
  size_t v12 = *(_DWORD **)(v9 + 8);
  int v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)uint64_t v9 = v13;
  if (v13 == *v12)
  {
    int v14 = v11[1] + 1;
    unsigned int *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      int v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2]) {
        return;
      }
      uint64_t v16 = 2;
    }
    else
    {
      uint64_t v16 = 1;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  size_t v17 = strlen(*(const char **)(**(void **)(v9 + 16) + 8 * v16));
  sub_215731D94(v8, *(void *)(**(void **)(v9 + 16) + 8 * v16), v17);
  sub_215BAD070(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_215DC3980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DC399C(uint64_t a1, unsigned __int16 *a2)
{
  BOOL v3 = **(uint64_t ***)a1;
  uint64_t v4 = **(unsigned __int8 **)(*(void *)a1 + 8);
  sub_215BAC604(a2);
  uint64_t v5 = *v3;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v7 = v19;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_215731D94(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  char v8 = *(void **)(a1 + 16);
  uint64_t v10 = *(void *)(v9 + 32);
  uint64_t v11 = *(unsigned int **)v9;
  size_t v12 = *(_DWORD **)(v9 + 8);
  int v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)uint64_t v9 = v13;
  if (v13 == *v12)
  {
    int v14 = v11[1] + 1;
    unsigned int *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      int v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2]) {
        return;
      }
      uint64_t v16 = 2;
    }
    else
    {
      uint64_t v16 = 1;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  size_t v17 = strlen(*(const char **)(**(void **)(v9 + 16) + 8 * v16));
  sub_215731D94(v8, *(void *)(**(void **)(v9 + 16) + 8 * v16), v17);
  sub_215BAD070(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_215DC3B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_215DC3B44(__int16 *a1, uint64_t a2)
{
  int v7 = 0;
  sub_215DC2E88((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1) {
    sub_215742D4C();
  }
  v9[0] = &v8;
  ((void (*)(long long *__return_ptr, void *, unsigned char *))off_26C684880[v7])(&v4, v9, v6);
  if (v7 != -1) {
    ((void (*)(void *, unsigned char *))off_26C684850[v7])(v9, v6);
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  return result;
}

void sub_215DC3C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_26C684850[a15])(v15 - 17, &a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DC3C38(uint64_t ****a1, long long **a2)
{
  long long v4 = *a1;
  sub_215DC32DC(***a1, *a2, *(unsigned __int8 *)(**a1)[1]);
  uint64_t v6 = v4[1];
  uint64_t v5 = v4[2];
  uint64_t v7 = (uint64_t)v6[4];
  char v8 = (unsigned int *)*v6;
  uint64_t v9 = v6[1];
  int v10 = *(_DWORD *)*v6 + 1;
  *(_DWORD *)*uint64_t v6 = v10;
  if (v10 == *(_DWORD *)v9)
  {
    int v11 = v8[1] + 1;
    *char v8 = 0;
    v8[1] = v11;
    if (v11 == *((_DWORD *)v9 + 1))
    {
      int v12 = v8[2] + 1;
      v8[1] = 0;
      v8[2] = v12;
      if (v12 == *((_DWORD *)v9 + 2)) {
        goto LABEL_8;
      }
      uint64_t v13 = 2;
    }
    else
    {
      uint64_t v13 = 1;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  size_t v14 = strlen(*(const char **)(*v6[2] + 8 * v13));
  sub_215731D94(v5, *(void *)(*v6[2] + 8 * v13), v14);
  sub_215BAD070(v7, v5, (unsigned int *)*v6, v13, *(_DWORD *)v6[3]);
LABEL_8:
  uint64_t v15 = *a1;
  sub_215DC32DC(**v15, (long long *)((char *)*a2 + 24), *(unsigned __int8 *)(*v15)[1]);
  size_t v17 = v15[1];
  uint64_t v16 = v15[2];
  uint64_t v18 = (uint64_t)v17[4];
  unsigned __int8 v19 = (unsigned int *)*v17;
  uint64_t v20 = v17[1];
  int v21 = *(_DWORD *)*v17 + 1;
  *(_DWORD *)void *v17 = v21;
  if (v21 == *(_DWORD *)v20)
  {
    int v22 = v19[1] + 1;
    *unsigned __int8 v19 = 0;
    v19[1] = v22;
    if (v22 == *((_DWORD *)v20 + 1))
    {
      int v23 = v19[2] + 1;
      v19[1] = 0;
      v19[2] = v23;
      if (v23 == *((_DWORD *)v20 + 2)) {
        return;
      }
      uint64_t v24 = 2;
    }
    else
    {
      uint64_t v24 = 1;
    }
  }
  else
  {
    uint64_t v24 = 0;
  }
  size_t v25 = strlen(*(const char **)(*v17[2] + 8 * v24));
  sub_215731D94(v16, *(void *)(*v17[2] + 8 * v24), v25);
  unint64_t v26 = (unsigned int *)*v17;
  unsigned int v27 = *(_DWORD *)v17[3];

  sub_215BAD070(v18, v16, v26, v24, v27);
}

double sub_215DC3E1C(float *a1, uint64_t a2)
{
  int v7 = 0;
  sub_2157D208C((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1) {
    sub_215742D4C();
  }
  v9[0] = &v8;
  ((void (*)(long long *__return_ptr, void *, unsigned char *))off_26C684880[v7])(&v4, v9, v6);
  if (v7 != -1) {
    ((void (*)(void *, unsigned char *))off_26C684850[v7])(v9, v6);
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  return result;
}

void sub_215DC3ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_26C684850[a15])(v15 - 17, &a12);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_215DC3F10(unsigned char *result, uint64_t a2)
{
  BOOL v3 = (uint64_t **)result;
  long long v4 = (unint64_t **)(result + 8);
  char v5 = *(unsigned char *)(a2 + 23);
  if (v5 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v5 >= 0) {
    int v7 = (unsigned char *)a2;
  }
  else {
    int v7 = *(unsigned char **)a2;
  }
  if (v6 >= 1)
  {
    char v8 = &v7[v6];
    size_t v9 = v6;
    double result = v7;
    do
    {
      double result = memchr(result, 46, v9);
      if (!result) {
        break;
      }
      if (*result == 46)
      {
        if (result == v8) {
          break;
        }
        unint64_t v19 = result - v7;
        int v10 = v3;
        if (result - v7 != -1)
        {
          uint64_t v20 = (unsigned char *)**v3;
          if ((unint64_t)v20 <= v19) {
            uint64_t v20 = (unsigned char *)(result - v7);
          }
          **BOOL v3 = (uint64_t)v20;
          uint64_t v21 = *(unsigned __int8 *)(a2 + 23);
          if ((v21 & 0x80u) != 0) {
            uint64_t v21 = *(void *)(a2 + 8);
          }
          uint64_t v6 = v21 + ~v19;
          int v10 = (uint64_t **)v4;
        }
        goto LABEL_13;
      }
      ++result;
      size_t v9 = v8 - result;
    }
    while (v8 - result >= 1);
  }
  int v10 = v3;
LABEL_13:
  int v11 = *v10;
  uint64_t v12 = *v11;
  if (*v11 <= (unint64_t)v6) {
    uint64_t v12 = v6;
  }
  uint64_t *v11 = v12;
  int v13 = *(char *)(a2 + 47);
  if (v13 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(a2 + 47);
  }
  else {
    uint64_t v14 = *(void *)(a2 + 32);
  }
  if (v13 >= 0) {
    uint64_t v15 = (unsigned char *)(a2 + 24);
  }
  else {
    uint64_t v15 = *(unsigned char **)(a2 + 24);
  }
  if (v14 >= 1)
  {
    uint64_t v16 = &v15[v14];
    size_t v17 = v14;
    double result = v15;
    do
    {
      double result = memchr(result, 46, v17);
      if (!result) {
        break;
      }
      if (*result == 46)
      {
        if (result == v16) {
          break;
        }
        unint64_t v22 = result - v15;
        if (result - v15 == -1) {
          break;
        }
        int v23 = (unsigned char *)**v3;
        if ((unint64_t)v23 <= v22) {
          int v23 = (unsigned char *)(result - v15);
        }
        **BOOL v3 = (uint64_t)v23;
        uint64_t v24 = *(unsigned __int8 *)(a2 + 47);
        if ((v24 & 0x80u) != 0) {
          uint64_t v24 = *(void *)(a2 + 32);
        }
        uint64_t v14 = v24 + ~v22;
        goto LABEL_27;
      }
      ++result;
      size_t v17 = v16 - result;
    }
    while (v16 - result >= 1);
  }
  long long v4 = (unint64_t **)v3;
LABEL_27:
  unint64_t v18 = **v4;
  if (v18 <= v14) {
    unint64_t v18 = v14;
  }
  *void *v4 = v18;
  return result;
}

void *sub_215DC40C0(uint64_t a1, void **a2)
{
  double result = sub_215E0D5E0(**(uint64_t ***)a1, a2, **(unsigned __int8 **)(*(void *)a1 + 8), *(unsigned __int8 *)(*(void *)(*(void *)a1 + 8) + 8));
  uint64_t v5 = *(void *)(a1 + 8);
  long long v4 = *(void **)(a1 + 16);
  uint64_t v6 = *(void *)(v5 + 32);
  int v7 = *(unsigned int **)v5;
  char v8 = *(_DWORD **)(v5 + 8);
  int v9 = **(_DWORD **)v5 + 1;
  **(_DWORD **)uint64_t v5 = v9;
  if (v9 == *v8)
  {
    int v10 = v7[1] + 1;
    unsigned int *v7 = 0;
    v7[1] = v10;
    if (v10 == v8[1])
    {
      int v11 = v7[2] + 1;
      v7[1] = 0;
      void v7[2] = v11;
      if (v11 == v8[2]) {
        return result;
      }
      uint64_t v12 = 2;
    }
    else
    {
      uint64_t v12 = 1;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  size_t v13 = strlen(*(const char **)(**(void **)(v5 + 16) + 8 * v12));
  sub_215731D94(v4, *(void *)(**(void **)(v5 + 16) + 8 * v12), v13);
  uint64_t v14 = *(unsigned int **)v5;
  unsigned int v15 = **(_DWORD **)(v5 + 24);

  return sub_215BAD070(v6, v4, v14, v12, v15);
}

void sub_215DC41CC(uint64_t a1, unsigned __int8 *a2)
{
  BOOL v3 = **(uint64_t ***)a1;
  uint64_t v4 = **(unsigned __int8 **)(*(void *)a1 + 8);
  sub_215BAB6B4(a2);
  uint64_t v5 = *v3;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v7 = v19;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_215731D94(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  char v8 = *(void **)(a1 + 16);
  uint64_t v10 = *(void *)(v9 + 32);
  int v11 = *(unsigned int **)v9;
  uint64_t v12 = *(_DWORD **)(v9 + 8);
  int v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)uint64_t v9 = v13;
  if (v13 == *v12)
  {
    int v14 = v11[1] + 1;
    unsigned int *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      int v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2]) {
        return;
      }
      uint64_t v16 = 2;
    }
    else
    {
      uint64_t v16 = 1;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  size_t v17 = strlen(*(const char **)(**(void **)(v9 + 16) + 8 * v16));
  sub_215731D94(v8, *(void *)(**(void **)(v9 + 16) + 8 * v16), v17);
  sub_215BAD070(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_215DC4358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DC4374(uint64_t a1, unsigned __int16 *a2)
{
  BOOL v3 = **(uint64_t ***)a1;
  uint64_t v4 = **(unsigned __int8 **)(*(void *)a1 + 8);
  sub_215BAC604(a2);
  uint64_t v5 = *v3;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v7 = v19;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_215731D94(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  char v8 = *(void **)(a1 + 16);
  uint64_t v10 = *(void *)(v9 + 32);
  int v11 = *(unsigned int **)v9;
  uint64_t v12 = *(_DWORD **)(v9 + 8);
  int v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)uint64_t v9 = v13;
  if (v13 == *v12)
  {
    int v14 = v11[1] + 1;
    unsigned int *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      int v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2]) {
        return;
      }
      uint64_t v16 = 2;
    }
    else
    {
      uint64_t v16 = 1;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  size_t v17 = strlen(*(const char **)(**(void **)(v9 + 16) + 8 * v16));
  sub_215731D94(v8, *(void *)(**(void **)(v9 + 16) + 8 * v16), v17);
  sub_215BAD070(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_215DC4500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_215DC451C(__int16 *a1, uint64_t a2)
{
  int v7 = 0;
  sub_215DC2E88((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1) {
    sub_215742D4C();
  }
  v9[0] = &v8;
  ((void (*)(long long *__return_ptr, void *, unsigned char *))off_26C684880[v7])(&v4, v9, v6);
  if (v7 != -1) {
    ((void (*)(void *, unsigned char *))off_26C684850[v7])(v9, v6);
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  return result;
}

void sub_215DC45D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_26C684850[a15])(v15 - 17, &a12);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_215DC4610(_DWORD *result, void *a2, unint64_t ***a3, uint64_t a4)
{
  if (result[5])
  {
    unsigned int v4 = 0;
    do
    {
      *a2 = a4;
      int v10 = result[3];
      int v11 = **a3;
      unint64_t v12 = *v11;
      if (v10)
      {
        uint64_t v13 = 24 * result[4];
        uint64_t v5 = a4;
        do
        {
          *a2 = v5;
          unint64_t v14 = *(unsigned __int8 *)(v5 + 23);
          if ((v14 & 0x80u) != 0) {
            unint64_t v14 = *(void *)(v5 + 8);
          }
          if (v12 <= v14) {
            unint64_t v12 = v14;
          }
          unint64_t *v11 = v12;
          unint64_t v15 = *(unsigned __int8 *)(v5 + 47);
          if ((v15 & 0x80u) != 0) {
            unint64_t v15 = *(void *)(v5 + 32);
          }
          if (v12 <= v15) {
            unint64_t v12 = v15;
          }
          unint64_t *v11 = v12;
          unint64_t v16 = *(unsigned __int8 *)(v5 + 71);
          if ((v16 & 0x80u) != 0) {
            unint64_t v16 = *(void *)(v5 + 56);
          }
          if (v12 <= v16) {
            unint64_t v12 = v16;
          }
          unint64_t *v11 = v12;
          v5 += v13;
          --v10;
        }
        while (v10);
      }
      else
      {
        uint64_t v5 = a4;
      }
      *a2 = v5;
      unint64_t v6 = *(unsigned __int8 *)(v5 + 23);
      if ((v6 & 0x80u) != 0) {
        unint64_t v6 = *(void *)(v5 + 8);
      }
      if (v12 > v6) {
        unint64_t v6 = v12;
      }
      unint64_t *v11 = v6;
      unint64_t v7 = *(unsigned __int8 *)(v5 + 47);
      if ((v7 & 0x80u) != 0) {
        unint64_t v7 = *(void *)(v5 + 32);
      }
      if (v6 <= v7) {
        unint64_t v6 = v7;
      }
      unint64_t *v11 = v6;
      unint64_t v8 = *(unsigned __int8 *)(v5 + 71);
      unint64_t v9 = *(void *)(v5 + 56);
      if ((v8 & 0x80u) == 0) {
        unint64_t v9 = v8;
      }
      if (v6 > v9) {
        unint64_t v9 = v6;
      }
      unint64_t *v11 = v9;
      a4 += 24 * result[6];
      ++v4;
    }
    while (v4 < result[5]);
  }
  *a2 = a4;
  int v17 = result[3];
  unint64_t v18 = **a3;
  unint64_t v19 = *v18;
  if (v17)
  {
    uint64_t v20 = 24 * result[4];
    do
    {
      *a2 = a4;
      unint64_t v21 = *(unsigned __int8 *)(a4 + 23);
      if ((v21 & 0x80u) != 0) {
        unint64_t v21 = *(void *)(a4 + 8);
      }
      if (v19 <= v21) {
        unint64_t v19 = v21;
      }
      *unint64_t v18 = v19;
      unint64_t v22 = *(unsigned __int8 *)(a4 + 47);
      if ((v22 & 0x80u) != 0) {
        unint64_t v22 = *(void *)(a4 + 32);
      }
      if (v19 <= v22) {
        unint64_t v19 = v22;
      }
      *unint64_t v18 = v19;
      unint64_t v23 = *(unsigned __int8 *)(a4 + 71);
      if ((v23 & 0x80u) != 0) {
        unint64_t v23 = *(void *)(a4 + 56);
      }
      if (v19 <= v23) {
        unint64_t v19 = v23;
      }
      *unint64_t v18 = v19;
      a4 += v20;
      --v17;
    }
    while (v17);
  }
  *a2 = a4;
  unint64_t v24 = *(unsigned __int8 *)(a4 + 23);
  if ((v24 & 0x80u) != 0) {
    unint64_t v24 = *(void *)(a4 + 8);
  }
  if (v19 > v24) {
    unint64_t v24 = v19;
  }
  *unint64_t v18 = v24;
  unint64_t v25 = *(unsigned __int8 *)(a4 + 47);
  if ((v25 & 0x80u) != 0) {
    unint64_t v25 = *(void *)(a4 + 32);
  }
  if (v24 <= v25) {
    unint64_t v24 = v25;
  }
  *unint64_t v18 = v24;
  unint64_t v26 = *(unsigned __int8 *)(a4 + 71);
  if ((v26 & 0x80u) != 0) {
    unint64_t v26 = *(void *)(a4 + 56);
  }
  if (v24 <= v26) {
    unint64_t v24 = v26;
  }
  *unint64_t v18 = v24;
  return result;
}

void sub_215DC4838(uint64_t ****a1, long long **a2)
{
  unsigned int v4 = *a1;
  sub_215DC32DC(***a1, *a2, *(unsigned __int8 *)(**a1)[1]);
  unint64_t v6 = v4[1];
  uint64_t v5 = v4[2];
  uint64_t v7 = (uint64_t)v6[4];
  unint64_t v8 = (unsigned int *)*v6;
  unint64_t v9 = v6[1];
  int v10 = *(_DWORD *)*v6 + 1;
  *(_DWORD *)*unint64_t v6 = v10;
  if (v10 == *(_DWORD *)v9)
  {
    int v11 = v8[1] + 1;
    *unint64_t v8 = 0;
    v8[1] = v11;
    if (v11 == *((_DWORD *)v9 + 1))
    {
      int v12 = v8[2] + 1;
      v8[1] = 0;
      v8[2] = v12;
      if (v12 == *((_DWORD *)v9 + 2)) {
        goto LABEL_8;
      }
      uint64_t v13 = 2;
    }
    else
    {
      uint64_t v13 = 1;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  size_t v14 = strlen(*(const char **)(*v6[2] + 8 * v13));
  sub_215731D94(v5, *(void *)(*v6[2] + 8 * v13), v14);
  sub_215BAD070(v7, v5, (unsigned int *)*v6, v13, *(_DWORD *)v6[3]);
LABEL_8:
  unint64_t v15 = *a1;
  sub_215DC32DC(***a1, (long long *)((char *)*a2 + 24), *(unsigned __int8 *)(**a1)[1]);
  int v17 = v15[1];
  unint64_t v16 = v15[2];
  uint64_t v18 = (uint64_t)v17[4];
  unint64_t v19 = (unsigned int *)*v17;
  uint64_t v20 = v17[1];
  int v21 = *(_DWORD *)*v17 + 1;
  *(_DWORD *)void *v17 = v21;
  if (v21 == *(_DWORD *)v20)
  {
    int v22 = v19[1] + 1;
    *unint64_t v19 = 0;
    v19[1] = v22;
    if (v22 == *((_DWORD *)v20 + 1))
    {
      int v23 = v19[2] + 1;
      v19[1] = 0;
      v19[2] = v23;
      if (v23 == *((_DWORD *)v20 + 2)) {
        goto LABEL_15;
      }
      uint64_t v24 = 2;
    }
    else
    {
      uint64_t v24 = 1;
    }
  }
  else
  {
    uint64_t v24 = 0;
  }
  size_t v25 = strlen(*(const char **)(*v17[2] + 8 * v24));
  sub_215731D94(v16, *(void *)(*v17[2] + 8 * v24), v25);
  sub_215BAD070(v18, v16, (unsigned int *)*v17, v24, *(_DWORD *)v17[3]);
LABEL_15:
  unint64_t v26 = *a1;
  sub_215DC32DC(**v26, *a2 + 3, *(unsigned __int8 *)(*v26)[1]);
  BOOL v28 = v26[1];
  unsigned int v27 = v26[2];
  uint64_t v29 = (uint64_t)v28[4];
  uint64_t v30 = (unsigned int *)*v28;
  unint64_t v31 = v28[1];
  int v32 = *(_DWORD *)*v28 + 1;
  *(_DWORD *)*BOOL v28 = v32;
  if (v32 == *(_DWORD *)v31)
  {
    int v33 = v30[1] + 1;
    unsigned int *v30 = 0;
    v30[1] = v33;
    if (v33 == *((_DWORD *)v31 + 1))
    {
      int v34 = v30[2] + 1;
      v30[1] = 0;
      v30[2] = v34;
      if (v34 == *((_DWORD *)v31 + 2)) {
        return;
      }
      uint64_t v35 = 2;
    }
    else
    {
      uint64_t v35 = 1;
    }
  }
  else
  {
    uint64_t v35 = 0;
  }
  size_t v36 = strlen(*(const char **)(*v28[2] + 8 * v35));
  sub_215731D94(v27, *(void *)(*v28[2] + 8 * v35), v36);
  int v37 = (unsigned int *)*v28;
  unsigned int v38 = *(_DWORD *)v28[3];

  sub_215BAD070(v29, v27, v37, v35, v38);
}

double sub_215DC4AE0(float *a1, uint64_t a2)
{
  int v7 = 0;
  sub_2157D208C((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1) {
    sub_215742D4C();
  }
  v9[0] = &v8;
  ((void (*)(long long *__return_ptr, void *, unsigned char *))off_26C684880[v7])(&v4, v9, v6);
  if (v7 != -1) {
    ((void (*)(void *, unsigned char *))off_26C684850[v7])(v9, v6);
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  return result;
}

void sub_215DC4B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_26C684850[a15])(v15 - 17, &a12);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_215DC4BD4(unsigned char *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12);
  int v3 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8)) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4 && v3 != 0)
  {
    unint64_t v6 = (unsigned char **)result;
    int v7 = v2 - 1;
    uint64_t v8 = *(unsigned int *)(a2 + 24);
    uint64_t v9 = *(void *)a2;
    int v10 = v3 - 1;
    if (v3 != 1)
    {
      uint64_t v11 = *(unsigned int *)(a2 + 28);
      if (v2 == 1)
      {
        uint64_t v16 = 24 * v11;
        do
        {
          sub_215954300(*v6, v9);
          v9 += v16;
          --v10;
        }
        while (v10);
      }
      else
      {
        int v12 = 0;
        uint64_t v13 = 24 * v11;
        do
        {
          uint64_t v14 = v9;
          int v15 = v7;
          do
          {
            sub_215954300(*v6, v14);
            v14 += 24 * v8;
            --v15;
          }
          while (v15);
          sub_215954300(*v6, v14);
          v9 += v13;
          ++v12;
        }
        while (v12 != v10);
      }
    }
    for (; v7; --v7)
    {
      sub_215954300(*v6, v9);
      v9 += 24 * v8;
    }
    int v17 = *v6;
    return sub_215954300(v17, v9);
  }
  return result;
}

uint64_t sub_215DC4D14(uint64_t result, uint64_t *a2, void **a3, unsigned char *a4)
{
  *a2 = (uint64_t)a4;
  if (*(_DWORD *)(result + 12))
  {
    unsigned int v4 = 0;
    do
    {
      *a2 = (uint64_t)a4;
      uint64_t v5 = (unsigned char **)*a3;
      unint64_t v6 = (unsigned char *)**a3;
      unsigned int v7 = *v6;
      if (v7 <= *a4) {
        LOBYTE(v7) = *a4;
      }
      *unint64_t v6 = v7;
      uint64_t v8 = v5[1];
      unsigned int v9 = *a4;
      if (v9 >= *v8) {
        LOBYTE(v9) = *v8;
      }
      *uint64_t v8 = v9;
      int v10 = (unsigned char **)*a3;
      uint64_t v11 = *a2;
      int v12 = (unsigned char *)**a3;
      unsigned int v13 = *v12;
      if (v13 <= *(unsigned __int8 *)(*a2 + 1)) {
        LOBYTE(v13) = *(unsigned char *)(*a2 + 1);
      }
      unsigned char *v12 = v13;
      uint64_t v14 = v10[1];
      unsigned int v15 = *(unsigned __int8 *)(v11 + 1);
      if (v15 >= *v14) {
        LOBYTE(v15) = *v14;
      }
      unsigned char *v14 = v15;
      uint64_t v16 = (unsigned char **)*a3;
      uint64_t v17 = *a2;
      uint64_t v18 = (unsigned char *)**a3;
      unsigned int v19 = *v18;
      if (v19 <= *(unsigned __int8 *)(*a2 + 2)) {
        LOBYTE(v19) = *(unsigned char *)(*a2 + 2);
      }
      *uint64_t v18 = v19;
      uint64_t v20 = v16[1];
      unsigned int v21 = *(unsigned __int8 *)(v17 + 2);
      if (v21 >= *v20) {
        LOBYTE(v21) = *v20;
      }
      *uint64_t v20 = v21;
      int v22 = (unsigned char **)*a3;
      uint64_t v23 = *a2;
      uint64_t v24 = (unsigned char *)**a3;
      unsigned int v25 = *v24;
      if (v25 <= *(unsigned __int8 *)(*a2 + 3)) {
        LOBYTE(v25) = *(unsigned char *)(*a2 + 3);
      }
      *uint64_t v24 = v25;
      unint64_t v26 = v22[1];
      unsigned int v27 = *(unsigned __int8 *)(v23 + 3);
      if (v27 >= *v26) {
        LOBYTE(v27) = *v26;
      }
      *unint64_t v26 = v27;
      a4 += *(unsigned int *)(result + 16);
      ++v4;
    }
    while (v4 < *(_DWORD *)(result + 12));
  }
  *a2 = (uint64_t)a4;
  BOOL v28 = (unsigned char **)*a3;
  uint64_t v29 = (unsigned char *)**a3;
  unsigned int v30 = *v29;
  if (v30 <= *a4) {
    LOBYTE(v3std::__fs::filesystem::__rename(__from, __to, 0) = *a4;
  }
  *uint64_t v29 = v30;
  unint64_t v31 = v28[1];
  unsigned int v32 = *a4;
  if (v32 >= *v31) {
    LOBYTE(v32) = *v31;
  }
  *unint64_t v31 = v32;
  int v33 = (unsigned char **)*a3;
  uint64_t v34 = *a2;
  uint64_t v35 = (unsigned char *)**a3;
  unsigned int v36 = *v35;
  if (v36 <= *(unsigned __int8 *)(*a2 + 1)) {
    LOBYTE(v36) = *(unsigned char *)(*a2 + 1);
  }
  unsigned char *v35 = v36;
  int v37 = v33[1];
  unsigned int v38 = *(unsigned __int8 *)(v34 + 1);
  if (v38 >= *v37) {
    LOBYTE(v38) = *v37;
  }
  unsigned char *v37 = v38;
  unint64_t v39 = (unsigned char **)*a3;
  uint64_t v40 = *a2;
  char v41 = (unsigned char *)**a3;
  unsigned int v42 = *v41;
  if (v42 <= *(unsigned __int8 *)(*a2 + 2)) {
    LOBYTE(v42) = *(unsigned char *)(*a2 + 2);
  }
  *char v41 = v42;
  int v43 = v39[1];
  unsigned int v44 = *(unsigned __int8 *)(v40 + 2);
  if (v44 >= *v43) {
    LOBYTE(v44) = *v43;
  }
  unsigned char *v43 = v44;
  int v45 = (unsigned char **)*a3;
  uint64_t v46 = *a2;
  uint64_t v47 = (unsigned char *)**a3;
  unsigned int v48 = *v47;
  if (v48 <= *(unsigned __int8 *)(*a2 + 3)) {
    LOBYTE(v48) = *(unsigned char *)(*a2 + 3);
  }
  unsigned char *v47 = v48;
  uint64_t v49 = v45[1];
  unsigned int v50 = *(unsigned __int8 *)(v46 + 3);
  if (v50 >= *v49) {
    LOBYTE(v5std::__fs::filesystem::__rename(__from, __to, 0) = *v49;
  }
  unsigned char *v49 = v50;
  return result;
}

void sub_215DC4EFC(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 *a4)
{
  unsigned int v4 = a4;
  *(void *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    unsigned int v8 = 0;
    do
    {
      *(void *)a2 = v4;
      sub_215DC4FE8(*a3, v4);
      sub_215DC4FE8(*a3, (unsigned __int8 *)(*(void *)a2 + 1));
      sub_215DC4FE8(*a3, (unsigned __int8 *)(*(void *)a2 + 2));
      sub_215DC4FE8(*a3, (unsigned __int8 *)(*(void *)a2 + 3));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(void *)a2 = v4;
  sub_215DC4FE8(*a3, v4);
  sub_215DC4FE8(*a3, (unsigned __int8 *)(*(void *)a2 + 1));
  sub_215DC4FE8(*a3, (unsigned __int8 *)(*(void *)a2 + 2));
  uint64_t v9 = *a3;
  int v10 = (unsigned __int8 *)(*(void *)a2 + 3);

  sub_215DC4FE8(v9, v10);
}

void sub_215DC4FE8(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = **(uint64_t ***)a1;
  uint64_t v4 = **(unsigned __int8 **)(*(void *)a1 + 8);
  sub_215BAB6B4(a2);
  uint64_t v5 = *v3;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0) {
    unint64_t v6 = __p;
  }
  else {
    unint64_t v6 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v7 = v19;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_215731D94(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  unsigned int v8 = *(void **)(a1 + 16);
  uint64_t v10 = *(void *)(v9 + 32);
  uint64_t v11 = *(unsigned int **)v9;
  int v12 = *(_DWORD **)(v9 + 8);
  int v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)uint64_t v9 = v13;
  if (v13 == *v12)
  {
    int v14 = v11[1] + 1;
    unsigned int *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      int v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2]) {
        return;
      }
      uint64_t v16 = 2;
    }
    else
    {
      uint64_t v16 = 1;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  size_t v17 = strlen(*(const char **)(**(void **)(v9 + 16) + 8 * v16));
  sub_215731D94(v8, *(void *)(**(void **)(v9 + 16) + 8 * v16), v17);
  sub_215BAD070(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_215DC5174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215DC5190(uint64_t result, void *a2, void **a3, unsigned __int16 *a4)
{
  *a2 = a4;
  int v4 = *(_DWORD *)(result + 12);
  unint64_t v6 = (_WORD *)**a3;
  uint64_t v5 = (_WORD *)(*a3)[1];
  if (v4)
  {
    uint64_t v7 = 2 * *(unsigned int *)(result + 16);
    do
    {
      *a2 = a4;
      unsigned int v8 = (unsigned __int16)*v6;
      if (v8 <= *a4) {
        LOWORD(v8) = *a4;
      }
      *unint64_t v6 = v8;
      unsigned int v9 = *a4;
      if (v9 >= (unsigned __int16)*v5) {
        LOWORD(v9) = *v5;
      }
      *uint64_t v5 = v9;
      unsigned int v10 = (unsigned __int16)*v6;
      if (v10 <= a4[1]) {
        LOWORD(v1std::__fs::filesystem::__rename(__from, __to, 0) = a4[1];
      }
      *unint64_t v6 = v10;
      unsigned int v11 = a4[1];
      if (v11 >= (unsigned __int16)*v5) {
        LOWORD(v11) = *v5;
      }
      *uint64_t v5 = v11;
      unsigned int v12 = (unsigned __int16)*v6;
      if (v12 <= a4[2]) {
        LOWORD(v12) = a4[2];
      }
      *unint64_t v6 = v12;
      unsigned int v13 = a4[2];
      if (v13 >= (unsigned __int16)*v5) {
        LOWORD(v13) = *v5;
      }
      *uint64_t v5 = v13;
      unsigned int v14 = (unsigned __int16)*v6;
      if (v14 <= a4[3]) {
        LOWORD(v14) = a4[3];
      }
      *unint64_t v6 = v14;
      unsigned int v15 = a4[3];
      if (v15 >= (unsigned __int16)*v5) {
        LOWORD(v15) = *v5;
      }
      *uint64_t v5 = v15;
      a4 = (unsigned __int16 *)((char *)a4 + v7);
      --v4;
    }
    while (v4);
  }
  *a2 = a4;
  unsigned int v16 = (unsigned __int16)*v6;
  if (v16 <= *a4) {
    LOWORD(v16) = *a4;
  }
  *unint64_t v6 = v16;
  unsigned int v17 = *a4;
  if (v17 >= (unsigned __int16)*v5) {
    LOWORD(v17) = *v5;
  }
  *uint64_t v5 = v17;
  unsigned int v18 = (unsigned __int16)*v6;
  if (v18 <= a4[1]) {
    LOWORD(v18) = a4[1];
  }
  *unint64_t v6 = v18;
  unsigned int v19 = a4[1];
  if (v19 >= (unsigned __int16)*v5) {
    LOWORD(v19) = *v5;
  }
  *uint64_t v5 = v19;
  unsigned int v20 = (unsigned __int16)*v6;
  if (v20 <= a4[2]) {
    LOWORD(v2std::__fs::filesystem::__rename(__from, __to, 0) = a4[2];
  }
  *unint64_t v6 = v20;
  unsigned int v21 = a4[2];
  if (v21 >= (unsigned __int16)*v5) {
    LOWORD(v21) = *v5;
  }
  *uint64_t v5 = v21;
  unsigned int v22 = (unsigned __int16)*v6;
  if (v22 <= a4[3]) {
    LOWORD(v22) = a4[3];
  }
  *unint64_t v6 = v22;
  unsigned int v23 = a4[3];
  if (v23 >= (unsigned __int16)*v5) {
    LOWORD(v23) = *v5;
  }
  *uint64_t v5 = v23;
  return result;
}

void sub_215DC5304(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int16 *a4)
{
  int v4 = a4;
  *(void *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    unsigned int v8 = 0;
    do
    {
      *(void *)a2 = v4;
      sub_215DC53F0(*a3, v4);
      sub_215DC53F0(*a3, (unsigned __int16 *)(*(void *)a2 + 2));
      sub_215DC53F0(*a3, (unsigned __int16 *)(*(void *)a2 + 4));
      sub_215DC53F0(*a3, (unsigned __int16 *)(*(void *)a2 + 6));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(void *)a2 = v4;
  sub_215DC53F0(*a3, v4);
  sub_215DC53F0(*a3, (unsigned __int16 *)(*(void *)a2 + 2));
  sub_215DC53F0(*a3, (unsigned __int16 *)(*(void *)a2 + 4));
  uint64_t v9 = *a3;
  unsigned int v10 = (unsigned __int16 *)(*(void *)a2 + 6);

  sub_215DC53F0(v9, v10);
}

void sub_215DC53F0(uint64_t a1, unsigned __int16 *a2)
{
  int v3 = **(uint64_t ***)a1;
  uint64_t v4 = **(unsigned __int8 **)(*(void *)a1 + 8);
  sub_215BAC604(a2);
  uint64_t v5 = *v3;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0) {
    unint64_t v6 = __p;
  }
  else {
    unint64_t v6 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v7 = v19;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_215731D94(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  unsigned int v8 = *(void **)(a1 + 16);
  uint64_t v10 = *(void *)(v9 + 32);
  unsigned int v11 = *(unsigned int **)v9;
  unsigned int v12 = *(_DWORD **)(v9 + 8);
  int v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)uint64_t v9 = v13;
  if (v13 == *v12)
  {
    int v14 = v11[1] + 1;
    unsigned int *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      int v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2]) {
        return;
      }
      uint64_t v16 = 2;
    }
    else
    {
      uint64_t v16 = 1;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  size_t v17 = strlen(*(const char **)(**(void **)(v9 + 16) + 8 * v16));
  sub_215731D94(v8, *(void *)(**(void **)(v9 + 16) + 8 * v16), v17);
  sub_215BAD070(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_215DC557C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_215DC5598(_DWORD *a1, __int16 **a2, __int16 *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  *a2 = a3;
  a2[2] = (__int16 *)a4;
  if (a1[5])
  {
    unsigned int v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (__int16 *)v4;
      sub_215DC56B4(v5, v4);
      sub_215DC56B4(*a2 + 1, (uint64_t)(a2[2] + 12));
      sub_215DC56B4(*a2 + 2, (uint64_t)(a2[2] + 24));
      sub_215DC56B4(*a2 + 3, (uint64_t)(a2[2] + 36));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (__int16 *)v4;
  sub_215DC56B4(v5, v4);
  sub_215DC56B4(*a2 + 1, (uint64_t)(a2[2] + 12));
  sub_215DC56B4(*a2 + 2, (uint64_t)(a2[2] + 24));
  uint64_t v9 = *a2 + 3;
  uint64_t v10 = (uint64_t)(a2[2] + 36);

  return sub_215DC56B4(v9, v10);
}

double sub_215DC56B4(__int16 *a1, uint64_t a2)
{
  int v7 = 0;
  sub_215DC2E88((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1) {
    sub_215742D4C();
  }
  v9[0] = &v8;
  ((void (*)(long long *__return_ptr, void *, unsigned char *))off_26C684880[v7])(&v4, v9, v6);
  if (v7 != -1) {
    ((void (*)(void *, unsigned char *))off_26C684850[v7])(v9, v6);
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  return result;
}

void sub_215DC5770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_26C684850[a15])(v15 - 17, &a12);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_215DC57A8(_DWORD *result, unint64_t **a2, uint64_t a3)
{
  int v3 = result[5];
  if (!v3)
  {
    int v4 = result[3];
    uint64_t v5 = *a2;
    unint64_t v7 = **a2;
    if (!v4) {
      goto LABEL_78;
    }
    goto LABEL_41;
  }
  int v4 = result[3];
  uint64_t v5 = *a2;
  uint64_t v6 = result[6];
  unint64_t v7 = **a2;
  if (v4)
  {
    int v8 = 0;
    uint64_t v9 = (unsigned __int8 *)(a3 + 95);
    uint64_t v10 = 24 * result[4];
    do
    {
      unsigned int v11 = v9;
      int v12 = v4;
      do
      {
        unint64_t v13 = *(v11 - 72);
        if ((v13 & 0x80u) != 0) {
          unint64_t v13 = *(void *)(v11 - 87);
        }
        if (v7 <= v13) {
          unint64_t v7 = v13;
        }
        *uint64_t v5 = v7;
        unint64_t v14 = *(v11 - 48);
        if ((v14 & 0x80u) != 0) {
          unint64_t v14 = *(void *)(v11 - 63);
        }
        if (v7 <= v14) {
          unint64_t v7 = v14;
        }
        *uint64_t v5 = v7;
        unint64_t v15 = *(v11 - 24);
        if ((v15 & 0x80u) != 0) {
          unint64_t v15 = *(void *)(v11 - 39);
        }
        if (v7 <= v15) {
          unint64_t v7 = v15;
        }
        *uint64_t v5 = v7;
        unint64_t v16 = *v11;
        if ((v16 & 0x80u) != 0) {
          unint64_t v16 = *(void *)(v11 - 15);
        }
        if (v7 <= v16) {
          unint64_t v7 = v16;
        }
        *uint64_t v5 = v7;
        v11 += v10;
        --v12;
      }
      while (v12);
      unint64_t v17 = *(v11 - 72);
      if ((v17 & 0x80u) != 0) {
        unint64_t v17 = *(void *)(v11 - 87);
      }
      if (v7 <= v17) {
        unint64_t v7 = v17;
      }
      *uint64_t v5 = v7;
      unint64_t v18 = *(v11 - 48);
      if ((v18 & 0x80u) != 0) {
        unint64_t v18 = *(void *)(v11 - 63);
      }
      if (v7 <= v18) {
        unint64_t v7 = v18;
      }
      *uint64_t v5 = v7;
      unint64_t v19 = *(v11 - 24);
      if ((v19 & 0x80u) != 0) {
        unint64_t v19 = *(void *)(v11 - 39);
      }
      if (v7 <= v19) {
        unint64_t v7 = v19;
      }
      *uint64_t v5 = v7;
      unint64_t v20 = *v11;
      unint64_t v21 = *(void *)(v11 - 15);
      if ((v20 & 0x80u) == 0) {
        unint64_t v21 = v20;
      }
      if (v7 <= v21) {
        unint64_t v7 = v21;
      }
      *uint64_t v5 = v7;
      a3 += 24 * v6;
      ++v8;
      v9 += 24 * v6;
    }
    while (v8 != v3);
LABEL_41:
    uint64_t v22 = 24 * result[4];
    do
    {
      unint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      if ((v23 & 0x80u) != 0) {
        unint64_t v23 = *(void *)(a3 + 8);
      }
      if (v7 <= v23) {
        unint64_t v7 = v23;
      }
      *uint64_t v5 = v7;
      unint64_t v24 = *(unsigned __int8 *)(a3 + 47);
      if ((v24 & 0x80u) != 0) {
        unint64_t v24 = *(void *)(a3 + 32);
      }
      if (v7 <= v24) {
        unint64_t v7 = v24;
      }
      *uint64_t v5 = v7;
      unint64_t v25 = *(unsigned __int8 *)(a3 + 71);
      if ((v25 & 0x80u) != 0) {
        unint64_t v25 = *(void *)(a3 + 56);
      }
      if (v7 <= v25) {
        unint64_t v7 = v25;
      }
      *uint64_t v5 = v7;
      unint64_t v26 = *(unsigned __int8 *)(a3 + 95);
      if ((v26 & 0x80u) != 0) {
        unint64_t v26 = *(void *)(a3 + 80);
      }
      if (v7 <= v26) {
        unint64_t v7 = v26;
      }
      *uint64_t v5 = v7;
      a3 += v22;
      --v4;
    }
    while (v4);
    goto LABEL_78;
  }
  uint64_t v27 = 24 * v6;
  do
  {
    unint64_t v28 = *(unsigned __int8 *)(a3 + 23);
    if ((v28 & 0x80u) != 0) {
      unint64_t v28 = *(void *)(a3 + 8);
    }
    if (v7 <= v28) {
      unint64_t v7 = v28;
    }
    *uint64_t v5 = v7;
    unint64_t v29 = *(unsigned __int8 *)(a3 + 47);
    if ((v29 & 0x80u) != 0) {
      unint64_t v29 = *(void *)(a3 + 32);
    }
    if (v7 <= v29) {
      unint64_t v7 = v29;
    }
    *uint64_t v5 = v7;
    unint64_t v30 = *(unsigned __int8 *)(a3 + 71);
    if ((v30 & 0x80u) != 0) {
      unint64_t v30 = *(void *)(a3 + 56);
    }
    if (v7 <= v30) {
      unint64_t v7 = v30;
    }
    *uint64_t v5 = v7;
    unint64_t v31 = *(unsigned __int8 *)(a3 + 95);
    if ((v31 & 0x80u) != 0) {
      unint64_t v31 = *(void *)(a3 + 80);
    }
    if (v7 <= v31) {
      unint64_t v7 = v31;
    }
    *uint64_t v5 = v7;
    a3 += v27;
    --v3;
  }
  while (v3);
LABEL_78:
  unint64_t v32 = *(unsigned __int8 *)(a3 + 23);
  if ((v32 & 0x80u) != 0) {
    unint64_t v32 = *(void *)(a3 + 8);
  }
  if (v7 > v32) {
    unint64_t v32 = v7;
  }
  *uint64_t v5 = v32;
  unint64_t v33 = *(unsigned __int8 *)(a3 + 47);
  if ((v33 & 0x80u) != 0) {
    unint64_t v33 = *(void *)(a3 + 32);
  }
  if (v32 <= v33) {
    unint64_t v32 = v33;
  }
  *uint64_t v5 = v32;
  unint64_t v34 = *(unsigned __int8 *)(a3 + 71);
  if ((v34 & 0x80u) != 0) {
    unint64_t v34 = *(void *)(a3 + 56);
  }
  if (v32 <= v34) {
    unint64_t v32 = v34;
  }
  *uint64_t v5 = v32;
  unint64_t v35 = *(unsigned __int8 *)(a3 + 95);
  if ((v35 & 0x80u) != 0) {
    unint64_t v35 = *(void *)(a3 + 80);
  }
  if (v32 <= v35) {
    unint64_t v32 = v35;
  }
  *uint64_t v5 = v32;
  return result;
}

void sub_215DC5AD8(uint64_t ****a1, long long **a2)
{
  int v4 = *a1;
  sub_215DC32DC(***a1, *a2, *(unsigned __int8 *)(**a1)[1]);
  uint64_t v6 = v4[1];
  uint64_t v5 = v4[2];
  uint64_t v7 = (uint64_t)v6[4];
  int v8 = (unsigned int *)*v6;
  uint64_t v9 = v6[1];
  int v10 = *(_DWORD *)*v6 + 1;
  *(_DWORD *)*uint64_t v6 = v10;
  if (v10 == *(_DWORD *)v9)
  {
    int v11 = v8[1] + 1;
    *int v8 = 0;
    v8[1] = v11;
    if (v11 == *((_DWORD *)v9 + 1))
    {
      int v12 = v8[2] + 1;
      v8[1] = 0;
      v8[2] = v12;
      if (v12 == *((_DWORD *)v9 + 2)) {
        goto LABEL_8;
      }
      uint64_t v13 = 2;
    }
    else
    {
      uint64_t v13 = 1;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  size_t v14 = strlen(*(const char **)(*v6[2] + 8 * v13));
  sub_215731D94(v5, *(void *)(*v6[2] + 8 * v13), v14);
  sub_215BAD070(v7, v5, (unsigned int *)*v6, v13, *(_DWORD *)v6[3]);
LABEL_8:
  unint64_t v15 = *a1;
  sub_215DC32DC(***a1, (long long *)((char *)*a2 + 24), *(unsigned __int8 *)(**a1)[1]);
  unint64_t v17 = v15[1];
  unint64_t v16 = v15[2];
  uint64_t v18 = (uint64_t)v17[4];
  unint64_t v19 = (unsigned int *)*v17;
  unint64_t v20 = v17[1];
  int v21 = *(_DWORD *)*v17 + 1;
  *(_DWORD *)unsigned char *v17 = v21;
  if (v21 == *(_DWORD *)v20)
  {
    int v22 = v19[1] + 1;
    *unint64_t v19 = 0;
    v19[1] = v22;
    if (v22 == *((_DWORD *)v20 + 1))
    {
      int v23 = v19[2] + 1;
      v19[1] = 0;
      v19[2] = v23;
      if (v23 == *((_DWORD *)v20 + 2)) {
        goto LABEL_15;
      }
      uint64_t v24 = 2;
    }
    else
    {
      uint64_t v24 = 1;
    }
  }
  else
  {
    uint64_t v24 = 0;
  }
  size_t v25 = strlen(*(const char **)(*v17[2] + 8 * v24));
  sub_215731D94(v16, *(void *)(*v17[2] + 8 * v24), v25);
  sub_215BAD070(v18, v16, (unsigned int *)*v17, v24, *(_DWORD *)v17[3]);
LABEL_15:
  unint64_t v26 = *a1;
  sub_215DC32DC(***a1, *a2 + 3, *(unsigned __int8 *)(**a1)[1]);
  unint64_t v28 = v26[1];
  uint64_t v27 = v26[2];
  uint64_t v29 = (uint64_t)v28[4];
  unint64_t v30 = (unsigned int *)*v28;
  unint64_t v31 = v28[1];
  int v32 = *(_DWORD *)*v28 + 1;
  *(_DWORD *)*unint64_t v28 = v32;
  if (v32 == *(_DWORD *)v31)
  {
    int v33 = v30[1] + 1;
    unsigned int *v30 = 0;
    v30[1] = v33;
    if (v33 == *((_DWORD *)v31 + 1))
    {
      int v34 = v30[2] + 1;
      v30[1] = 0;
      v30[2] = v34;
      if (v34 == *((_DWORD *)v31 + 2)) {
        goto LABEL_22;
      }
      uint64_t v35 = 2;
    }
    else
    {
      uint64_t v35 = 1;
    }
  }
  else
  {
    uint64_t v35 = 0;
  }
  size_t v36 = strlen(*(const char **)(*v28[2] + 8 * v35));
  sub_215731D94(v27, *(void *)(*v28[2] + 8 * v35), v36);
  sub_215BAD070(v29, v27, (unsigned int *)*v28, v35, *(_DWORD *)v28[3]);
LABEL_22:
  int v37 = *a1;
  sub_215DC32DC(**v37, (long long *)((char *)*a2 + 72), *(unsigned __int8 *)(*v37)[1]);
  unint64_t v39 = v37[1];
  unsigned int v38 = v37[2];
  uint64_t v40 = (uint64_t)v39[4];
  char v41 = (unsigned int *)*v39;
  unsigned int v42 = v39[1];
  int v43 = *(_DWORD *)*v39 + 1;
  *(_DWORD *)*unint64_t v39 = v43;
  if (v43 == *(_DWORD *)v42)
  {
    int v44 = v41[1] + 1;
    *char v41 = 0;
    v41[1] = v44;
    if (v44 == *((_DWORD *)v42 + 1))
    {
      int v45 = v41[2] + 1;
      v41[1] = 0;
      v41[2] = v45;
      if (v45 == *((_DWORD *)v42 + 2)) {
        return;
      }
      uint64_t v46 = 2;
    }
    else
    {
      uint64_t v46 = 1;
    }
  }
  else
  {
    uint64_t v46 = 0;
  }
  size_t v47 = strlen(*(const char **)(*v39[2] + 8 * v46));
  sub_215731D94(v38, *(void *)(*v39[2] + 8 * v46), v47);
  unsigned int v48 = (unsigned int *)*v39;
  unsigned int v49 = *(_DWORD *)v39[3];

  sub_215BAD070(v40, v38, v48, v46, v49);
}

double sub_215DC5E44(_DWORD *a1, float **a2, float *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  *a2 = a3;
  a2[2] = (float *)a4;
  if (a1[5])
  {
    unsigned int v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (float *)v4;
      sub_215DC5F60(v5, v4);
      sub_215DC5F60(*a2 + 1, (uint64_t)(a2[2] + 6));
      sub_215DC5F60(*a2 + 2, (uint64_t)(a2[2] + 12));
      sub_215DC5F60(*a2 + 3, (uint64_t)(a2[2] + 18));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (float *)v4;
  sub_215DC5F60(v5, v4);
  sub_215DC5F60(*a2 + 1, (uint64_t)(a2[2] + 6));
  sub_215DC5F60(*a2 + 2, (uint64_t)(a2[2] + 12));
  uint64_t v9 = *a2 + 3;
  uint64_t v10 = (uint64_t)(a2[2] + 18);

  return sub_215DC5F60(v9, v10);
}

double sub_215DC5F60(float *a1, uint64_t a2)
{
  int v7 = 0;
  sub_2157D208C((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1) {
    sub_215742D4C();
  }
  v9[0] = &v8;
  ((void (*)(long long *__return_ptr, void *, unsigned char *))off_26C684880[v7])(&v4, v9, v6);
  if (v7 != -1) {
    ((void (*)(void *, unsigned char *))off_26C684850[v7])(v9, v6);
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  return result;
}

void sub_215DC601C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_26C684850[a15])(v15 - 17, &a12);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_215DC6054(unsigned char *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12);
  int v3 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8)) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4 && v3 != 0)
  {
    uint64_t v6 = (unsigned char **)result;
    int v7 = v2 - 1;
    uint64_t v8 = *(unsigned int *)(a2 + 24);
    uint64_t v9 = *(void *)a2;
    int v10 = v3 - 1;
    if (v3 != 1)
    {
      uint64_t v11 = *(unsigned int *)(a2 + 28);
      if (v2 == 1)
      {
        uint64_t v16 = 24 * v11;
        do
        {
          sub_215DC6194(*v6, v9);
          v9 += v16;
          --v10;
        }
        while (v10);
      }
      else
      {
        int v12 = 0;
        uint64_t v13 = 24 * v11;
        do
        {
          uint64_t v14 = v9;
          int v15 = v7;
          do
          {
            sub_215DC6194(*v6, v14);
            v14 += 24 * v8;
            --v15;
          }
          while (v15);
          sub_215DC6194(*v6, v14);
          v9 += v13;
          ++v12;
        }
        while (v12 != v10);
      }
    }
    for (; v7; --v7)
    {
      sub_215DC6194(*v6, v9);
      v9 += 24 * v8;
    }
    unint64_t v17 = *v6;
    return sub_215DC6194(v17, v9);
  }
  return result;
}

unsigned char *sub_215DC6194(unsigned char *result, uint64_t a2)
{
  int v3 = (uint64_t **)result;
  BOOL v4 = (unint64_t **)(result + 8);
  char v5 = *(unsigned char *)(a2 + 23);
  if (v5 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v5 >= 0) {
    int v7 = (unsigned char *)a2;
  }
  else {
    int v7 = *(unsigned char **)a2;
  }
  if (v6 >= 1)
  {
    uint64_t v8 = &v7[v6];
    size_t v9 = v6;
    double result = v7;
    do
    {
      double result = memchr(result, 46, v9);
      if (!result) {
        break;
      }
      if (*result == 46)
      {
        if (result == v8) {
          break;
        }
        unint64_t v35 = result - v7;
        int v10 = v3;
        if (result - v7 != -1)
        {
          size_t v36 = (unsigned char *)**v3;
          if ((unint64_t)v36 <= v35) {
            size_t v36 = (unsigned char *)(result - v7);
          }
          **int v3 = (uint64_t)v36;
          uint64_t v37 = *(unsigned __int8 *)(a2 + 23);
          if ((v37 & 0x80u) != 0) {
            uint64_t v37 = *(void *)(a2 + 8);
          }
          uint64_t v6 = v37 + ~v35;
          int v10 = (uint64_t **)v4;
        }
        goto LABEL_13;
      }
      ++result;
      size_t v9 = v8 - result;
    }
    while (v8 - result >= 1);
  }
  int v10 = v3;
LABEL_13:
  uint64_t v11 = *v10;
  uint64_t v12 = *v11;
  if (*v11 <= (unint64_t)v6) {
    uint64_t v12 = v6;
  }
  uint64_t *v11 = v12;
  int v13 = *(char *)(a2 + 47);
  if (v13 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(a2 + 47);
  }
  else {
    uint64_t v14 = *(void *)(a2 + 32);
  }
  if (v13 >= 0) {
    int v15 = (unsigned char *)(a2 + 24);
  }
  else {
    int v15 = *(unsigned char **)(a2 + 24);
  }
  if (v14 >= 1)
  {
    uint64_t v16 = &v15[v14];
    size_t v17 = v14;
    double result = v15;
    do
    {
      double result = memchr(result, 46, v17);
      if (!result) {
        break;
      }
      if (*result == 46)
      {
        if (result == v16) {
          break;
        }
        unint64_t v38 = result - v15;
        uint64_t v18 = v3;
        if (result - v15 != -1)
        {
          unint64_t v39 = (unsigned char *)**v3;
          if ((unint64_t)v39 <= v38) {
            unint64_t v39 = (unsigned char *)(result - v15);
          }
          **int v3 = (uint64_t)v39;
          uint64_t v40 = *(unsigned __int8 *)(a2 + 47);
          if ((v40 & 0x80u) != 0) {
            uint64_t v40 = *(void *)(a2 + 32);
          }
          uint64_t v14 = v40 + ~v38;
          uint64_t v18 = (uint64_t **)v4;
        }
        goto LABEL_27;
      }
      ++result;
      size_t v17 = v16 - result;
    }
    while (v16 - result >= 1);
  }
  uint64_t v18 = v3;
LABEL_27:
  unint64_t v19 = *v18;
  uint64_t v20 = *v19;
  if (*v19 <= (unint64_t)v14) {
    uint64_t v20 = v14;
  }
  *unint64_t v19 = v20;
  int v21 = *(char *)(a2 + 71);
  if (v21 >= 0) {
    uint64_t v22 = *(unsigned __int8 *)(a2 + 71);
  }
  else {
    uint64_t v22 = *(void *)(a2 + 56);
  }
  if (v21 >= 0) {
    int v23 = (unsigned char *)(a2 + 48);
  }
  else {
    int v23 = *(unsigned char **)(a2 + 48);
  }
  if (v22 >= 1)
  {
    uint64_t v24 = &v23[v22];
    size_t v25 = v22;
    double result = v23;
    do
    {
      double result = memchr(result, 46, v25);
      if (!result) {
        break;
      }
      if (*result == 46)
      {
        if (result == v24) {
          break;
        }
        unint64_t v41 = result - v23;
        unint64_t v26 = v3;
        if (result - v23 != -1)
        {
          unsigned int v42 = (unsigned char *)**v3;
          if ((unint64_t)v42 <= v41) {
            unsigned int v42 = (unsigned char *)(result - v23);
          }
          **int v3 = (uint64_t)v42;
          uint64_t v43 = *(unsigned __int8 *)(a2 + 71);
          if ((v43 & 0x80u) != 0) {
            uint64_t v43 = *(void *)(a2 + 56);
          }
          uint64_t v22 = v43 + ~v41;
          unint64_t v26 = (uint64_t **)v4;
        }
        goto LABEL_41;
      }
      ++result;
      size_t v25 = v24 - result;
    }
    while (v24 - result >= 1);
  }
  unint64_t v26 = v3;
LABEL_41:
  uint64_t v27 = *v26;
  uint64_t v28 = *v27;
  if (*v27 <= (unint64_t)v22) {
    uint64_t v28 = v22;
  }
  *uint64_t v27 = v28;
  int v29 = *(char *)(a2 + 95);
  if (v29 >= 0) {
    uint64_t v30 = *(unsigned __int8 *)(a2 + 95);
  }
  else {
    uint64_t v30 = *(void *)(a2 + 80);
  }
  if (v29 >= 0) {
    unint64_t v31 = (unsigned char *)(a2 + 72);
  }
  else {
    unint64_t v31 = *(unsigned char **)(a2 + 72);
  }
  if (v30 >= 1)
  {
    int v32 = &v31[v30];
    size_t v33 = v30;
    double result = v31;
    do
    {
      double result = memchr(result, 46, v33);
      if (!result) {
        break;
      }
      if (*result == 46)
      {
        if (result == v32) {
          break;
        }
        unint64_t v44 = result - v31;
        if (result - v31 == -1) {
          break;
        }
        int v45 = (unsigned char *)**v3;
        if ((unint64_t)v45 <= v44) {
          int v45 = (unsigned char *)(result - v31);
        }
        **int v3 = (uint64_t)v45;
        uint64_t v46 = *(unsigned __int8 *)(a2 + 95);
        if ((v46 & 0x80u) != 0) {
          uint64_t v46 = *(void *)(a2 + 80);
        }
        uint64_t v30 = v46 + ~v44;
        goto LABEL_55;
      }
      ++result;
      size_t v33 = v32 - result;
    }
    while (v32 - result >= 1);
  }
  BOOL v4 = (unint64_t **)v3;
LABEL_55:
  unint64_t v34 = **v4;
  if (v34 <= v30) {
    unint64_t v34 = v30;
  }
  *unsigned __int16 *v4 = v34;
  return result;
}

void *sub_215DC64CC(uint64_t a1, uint64_t a2, uint64_t *a3, void **a4)
{
  BOOL v4 = a4;
  *(void *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    unsigned int v8 = 0;
    do
    {
      *(void *)a2 = v4;
      sub_215DC40C0(*a3, v4);
      sub_215DC40C0(*a3, (void **)(*(void *)a2 + 24));
      sub_215DC40C0(*a3, (void **)(*(void *)a2 + 48));
      sub_215DC40C0(*a3, (void **)(*(void *)a2 + 72));
      v4 += 3 * *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(void *)a2 = v4;
  sub_215DC40C0(*a3, v4);
  sub_215DC40C0(*a3, (void **)(*(void *)a2 + 24));
  sub_215DC40C0(*a3, (void **)(*(void *)a2 + 48));
  uint64_t v9 = *a3;
  int v10 = (void **)(*(void *)a2 + 72);

  return sub_215DC40C0(v9, v10);
}

void sub_215DC65BC(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = **(uint64_t ***)a1;
  uint64_t v4 = **(unsigned __int8 **)(*(void *)a1 + 8);
  sub_215BAB6B4(a2);
  uint64_t v5 = *v3;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v7 = v19;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_215731D94(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  unsigned int v8 = *(void **)(a1 + 16);
  uint64_t v10 = *(void *)(v9 + 32);
  uint64_t v11 = *(unsigned int **)v9;
  uint64_t v12 = *(_DWORD **)(v9 + 8);
  int v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)uint64_t v9 = v13;
  if (v13 == *v12)
  {
    int v14 = v11[1] + 1;
    unsigned int *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      int v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2]) {
        return;
      }
      uint64_t v16 = 2;
    }
    else
    {
      uint64_t v16 = 1;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  size_t v17 = strlen(*(const char **)(**(void **)(v9 + 16) + 8 * v16));
  sub_215731D94(v8, *(void *)(**(void **)(v9 + 16) + 8 * v16), v17);
  sub_215BAD070(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_215DC6748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DC6764(uint64_t a1, unsigned __int16 *a2)
{
  int v3 = **(uint64_t ***)a1;
  uint64_t v4 = **(unsigned __int8 **)(*(void *)a1 + 8);
  sub_215BAC604(a2);
  uint64_t v5 = *v3;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v7 = v19;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_215731D94(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  unsigned int v8 = *(void **)(a1 + 16);
  uint64_t v10 = *(void *)(v9 + 32);
  uint64_t v11 = *(unsigned int **)v9;
  uint64_t v12 = *(_DWORD **)(v9 + 8);
  int v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)uint64_t v9 = v13;
  if (v13 == *v12)
  {
    int v14 = v11[1] + 1;
    unsigned int *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      int v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2]) {
        return;
      }
      uint64_t v16 = 2;
    }
    else
    {
      uint64_t v16 = 1;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  size_t v17 = strlen(*(const char **)(**(void **)(v9 + 16) + 8 * v16));
  sub_215731D94(v8, *(void *)(**(void **)(v9 + 16) + 8 * v16), v17);
  sub_215BAD070(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_215DC68F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_215DC690C(__int16 *a1, uint64_t a2)
{
  int v7 = 0;
  sub_215DC2E88((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1) {
    sub_215742D4C();
  }
  v9[0] = &v8;
  ((void (*)(long long *__return_ptr, void *, unsigned char *))off_26C684880[v7])(&v4, v9, v6);
  if (v7 != -1) {
    ((void (*)(void *, unsigned char *))off_26C684850[v7])(v9, v6);
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  return result;
}

void sub_215DC69C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_26C684850[a15])(v15 - 17, &a12);
  }
  _Unwind_Resume(exception_object);
}

double sub_215DC6A00(float *a1, uint64_t a2)
{
  int v7 = 0;
  sub_2157D208C((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1) {
    sub_215742D4C();
  }
  v9[0] = &v8;
  ((void (*)(long long *__return_ptr, void *, unsigned char *))off_26C684880[v7])(&v4, v9, v6);
  if (v7 != -1) {
    ((void (*)(void *, unsigned char *))off_26C684850[v7])(v9, v6);
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  return result;
}

void sub_215DC6ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_26C684850[a15])(v15 - 17, &a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DC6AF4(uint64_t a1, unsigned __int16 *a2)
{
  int v3 = **(uint64_t ***)a1;
  uint64_t v4 = **(unsigned __int8 **)(*(void *)a1 + 8);
  sub_215BAC604(a2);
  uint64_t v5 = *v3;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v7 = v19;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_215731D94(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  char v8 = *(void **)(a1 + 16);
  uint64_t v10 = *(void *)(v9 + 32);
  uint64_t v11 = *(unsigned int **)v9;
  uint64_t v12 = *(_DWORD **)(v9 + 8);
  int v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)uint64_t v9 = v13;
  if (v13 == *v12)
  {
    int v14 = v11[1] + 1;
    unsigned int *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      int v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2]) {
        return;
      }
      uint64_t v16 = 2;
    }
    else
    {
      uint64_t v16 = 1;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  size_t v17 = strlen(*(const char **)(**(void **)(v9 + 16) + 8 * v16));
  sub_215731D94(v8, *(void *)(**(void **)(v9 + 16) + 8 * v16), v17);
  sub_215BAD070(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_215DC6C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_215DC6C9C(__int16 *a1, uint64_t a2)
{
  int v7 = 0;
  sub_215DC2E88((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1) {
    sub_215742D4C();
  }
  v9[0] = &v8;
  ((void (*)(long long *__return_ptr, void *, unsigned char *))off_26C684880[v7])(&v4, v9, v6);
  if (v7 != -1) {
    ((void (*)(void *, unsigned char *))off_26C684850[v7])(v9, v6);
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  return result;
}

void sub_215DC6D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_26C684850[a15])(v15 - 17, &a12);
  }
  _Unwind_Resume(exception_object);
}

double sub_215DC6D90(float *a1, uint64_t a2)
{
  int v7 = 0;
  sub_2157D208C((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1) {
    sub_215742D4C();
  }
  v9[0] = &v8;
  ((void (*)(long long *__return_ptr, void *, unsigned char *))off_26C684880[v7])(&v4, v9, v6);
  if (v7 != -1) {
    ((void (*)(void *, unsigned char *))off_26C684850[v7])(v9, v6);
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  return result;
}

void sub_215DC6E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_26C684850[a15])(v15 - 17, &a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DC6E84(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 *a4)
{
  long long v4 = a4;
  *(void *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    unsigned int v8 = 0;
    do
    {
      *(void *)a2 = v4;
      sub_215DC6F70(*a3, v4);
      sub_215DC6F70(*a3, (unsigned __int8 *)(*(void *)a2 + 1));
      sub_215DC6F70(*a3, (unsigned __int8 *)(*(void *)a2 + 2));
      sub_215DC6F70(*a3, (unsigned __int8 *)(*(void *)a2 + 3));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(void *)a2 = v4;
  sub_215DC6F70(*a3, v4);
  sub_215DC6F70(*a3, (unsigned __int8 *)(*(void *)a2 + 1));
  sub_215DC6F70(*a3, (unsigned __int8 *)(*(void *)a2 + 2));
  uint64_t v9 = *a3;
  uint64_t v10 = (unsigned __int8 *)(*(void *)a2 + 3);

  sub_215DC6F70(v9, v10);
}

void sub_215DC6F70(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = **(uint64_t ***)a1;
  uint64_t v4 = **(unsigned __int8 **)(*(void *)a1 + 8);
  sub_215BAB6B4(a2);
  uint64_t v5 = *v3;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v7 = v19;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_215731D94(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  unsigned int v8 = *(void **)(a1 + 16);
  uint64_t v10 = *(void *)(v9 + 32);
  uint64_t v11 = *(unsigned int **)v9;
  uint64_t v12 = *(_DWORD **)(v9 + 8);
  int v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)uint64_t v9 = v13;
  if (v13 == *v12)
  {
    int v14 = v11[1] + 1;
    unsigned int *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      int v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2]) {
        return;
      }
      uint64_t v16 = 2;
    }
    else
    {
      uint64_t v16 = 1;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  size_t v17 = strlen(*(const char **)(**(void **)(v9 + 16) + 8 * v16));
  sub_215731D94(v8, *(void *)(**(void **)(v9 + 16) + 8 * v16), v17);
  sub_215BAD070(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_215DC70FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DC7118(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int16 *a4)
{
  uint64_t v4 = a4;
  *(void *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    unsigned int v8 = 0;
    do
    {
      *(void *)a2 = v4;
      sub_215DC7204(*a3, v4);
      sub_215DC7204(*a3, (unsigned __int16 *)(*(void *)a2 + 2));
      sub_215DC7204(*a3, (unsigned __int16 *)(*(void *)a2 + 4));
      sub_215DC7204(*a3, (unsigned __int16 *)(*(void *)a2 + 6));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(void *)a2 = v4;
  sub_215DC7204(*a3, v4);
  sub_215DC7204(*a3, (unsigned __int16 *)(*(void *)a2 + 2));
  sub_215DC7204(*a3, (unsigned __int16 *)(*(void *)a2 + 4));
  uint64_t v9 = *a3;
  uint64_t v10 = (unsigned __int16 *)(*(void *)a2 + 6);

  sub_215DC7204(v9, v10);
}

void sub_215DC7204(uint64_t a1, unsigned __int16 *a2)
{
  int v3 = **(uint64_t ***)a1;
  uint64_t v4 = **(unsigned __int8 **)(*(void *)a1 + 8);
  sub_215BAC604(a2);
  uint64_t v5 = *v3;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v7 = v19;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_215731D94(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  unsigned int v8 = *(void **)(a1 + 16);
  uint64_t v10 = *(void *)(v9 + 32);
  uint64_t v11 = *(unsigned int **)v9;
  uint64_t v12 = *(_DWORD **)(v9 + 8);
  int v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)uint64_t v9 = v13;
  if (v13 == *v12)
  {
    int v14 = v11[1] + 1;
    unsigned int *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      int v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2]) {
        return;
      }
      uint64_t v16 = 2;
    }
    else
    {
      uint64_t v16 = 1;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  size_t v17 = strlen(*(const char **)(**(void **)(v9 + 16) + 8 * v16));
  sub_215731D94(v8, *(void *)(**(void **)(v9 + 16) + 8 * v16), v17);
  sub_215BAD070(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_215DC7390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_215DC73AC(_DWORD *a1, __int16 **a2, __int16 *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  *a2 = a3;
  a2[2] = (__int16 *)a4;
  if (a1[5])
  {
    unsigned int v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (__int16 *)v4;
      sub_215DC74C8(v5, v4);
      sub_215DC74C8(*a2 + 1, (uint64_t)(a2[2] + 12));
      sub_215DC74C8(*a2 + 2, (uint64_t)(a2[2] + 24));
      sub_215DC74C8(*a2 + 3, (uint64_t)(a2[2] + 36));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (__int16 *)v4;
  sub_215DC74C8(v5, v4);
  sub_215DC74C8(*a2 + 1, (uint64_t)(a2[2] + 12));
  sub_215DC74C8(*a2 + 2, (uint64_t)(a2[2] + 24));
  uint64_t v9 = *a2 + 3;
  uint64_t v10 = (uint64_t)(a2[2] + 36);

  return sub_215DC74C8(v9, v10);
}

double sub_215DC74C8(__int16 *a1, uint64_t a2)
{
  int v7 = 0;
  sub_215DC2E88((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1) {
    sub_215742D4C();
  }
  v9[0] = &v8;
  ((void (*)(long long *__return_ptr, void *, unsigned char *))off_26C684880[v7])(&v4, v9, v6);
  if (v7 != -1) {
    ((void (*)(void *, unsigned char *))off_26C684850[v7])(v9, v6);
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  return result;
}

void sub_215DC7584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_26C684850[a15])(v15 - 17, &a12);
  }
  _Unwind_Resume(exception_object);
}

double sub_215DC75BC(_DWORD *a1, float **a2, float *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  *a2 = a3;
  a2[2] = (float *)a4;
  if (a1[5])
  {
    unsigned int v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (float *)v4;
      sub_215DC76D8(v5, v4);
      sub_215DC76D8(*a2 + 1, (uint64_t)(a2[2] + 6));
      sub_215DC76D8(*a2 + 2, (uint64_t)(a2[2] + 12));
      sub_215DC76D8(*a2 + 3, (uint64_t)(a2[2] + 18));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (float *)v4;
  sub_215DC76D8(v5, v4);
  sub_215DC76D8(*a2 + 1, (uint64_t)(a2[2] + 6));
  sub_215DC76D8(*a2 + 2, (uint64_t)(a2[2] + 12));
  uint64_t v9 = *a2 + 3;
  uint64_t v10 = (uint64_t)(a2[2] + 18);

  return sub_215DC76D8(v9, v10);
}

double sub_215DC76D8(float *a1, uint64_t a2)
{
  int v7 = 0;
  sub_2157D208C((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1) {
    sub_215742D4C();
  }
  v9[0] = &v8;
  ((void (*)(long long *__return_ptr, void *, unsigned char *))off_26C684880[v7])(&v4, v9, v6);
  if (v7 != -1) {
    ((void (*)(void *, unsigned char *))off_26C684850[v7])(v9, v6);
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  return result;
}

void sub_215DC7794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_26C684850[a15])(v15 - 17, &a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DC77CC(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 *a4)
{
  long long v4 = a4;
  *(void *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    unsigned int v8 = 0;
    do
    {
      *(void *)a2 = v4;
      sub_215DC78B8(*a3, v4);
      sub_215DC78B8(*a3, (unsigned __int8 *)(*(void *)a2 + 1));
      sub_215DC78B8(*a3, (unsigned __int8 *)(*(void *)a2 + 2));
      sub_215DC78B8(*a3, (unsigned __int8 *)(*(void *)a2 + 3));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(void *)a2 = v4;
  sub_215DC78B8(*a3, v4);
  sub_215DC78B8(*a3, (unsigned __int8 *)(*(void *)a2 + 1));
  sub_215DC78B8(*a3, (unsigned __int8 *)(*(void *)a2 + 2));
  uint64_t v9 = *a3;
  uint64_t v10 = (unsigned __int8 *)(*(void *)a2 + 3);

  sub_215DC78B8(v9, v10);
}

void sub_215DC78B8(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = **(uint64_t ***)a1;
  uint64_t v4 = **(unsigned __int8 **)(*(void *)a1 + 8);
  sub_215BAB6B4(a2);
  uint64_t v5 = *v3;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v7 = v19;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_215731D94(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  unsigned int v8 = *(void **)(a1 + 16);
  uint64_t v10 = *(void *)(v9 + 32);
  uint64_t v11 = *(unsigned int **)v9;
  uint64_t v12 = *(_DWORD **)(v9 + 8);
  int v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)uint64_t v9 = v13;
  if (v13 == *v12)
  {
    int v14 = v11[1] + 1;
    unsigned int *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      int v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2]) {
        return;
      }
      uint64_t v16 = 2;
    }
    else
    {
      uint64_t v16 = 1;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  size_t v17 = strlen(*(const char **)(**(void **)(v9 + 16) + 8 * v16));
  sub_215731D94(v8, *(void *)(**(void **)(v9 + 16) + 8 * v16), v17);
  sub_215BAD070(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_215DC7A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DC7A60(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int16 *a4)
{
  uint64_t v4 = a4;
  *(void *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    unsigned int v8 = 0;
    do
    {
      *(void *)a2 = v4;
      sub_215DC7B4C(*a3, v4);
      sub_215DC7B4C(*a3, (unsigned __int16 *)(*(void *)a2 + 2));
      sub_215DC7B4C(*a3, (unsigned __int16 *)(*(void *)a2 + 4));
      sub_215DC7B4C(*a3, (unsigned __int16 *)(*(void *)a2 + 6));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(void *)a2 = v4;
  sub_215DC7B4C(*a3, v4);
  sub_215DC7B4C(*a3, (unsigned __int16 *)(*(void *)a2 + 2));
  sub_215DC7B4C(*a3, (unsigned __int16 *)(*(void *)a2 + 4));
  uint64_t v9 = *a3;
  uint64_t v10 = (unsigned __int16 *)(*(void *)a2 + 6);

  sub_215DC7B4C(v9, v10);
}

void sub_215DC7B4C(uint64_t a1, unsigned __int16 *a2)
{
  int v3 = **(uint64_t ***)a1;
  uint64_t v4 = **(unsigned __int8 **)(*(void *)a1 + 8);
  sub_215BAC604(a2);
  uint64_t v5 = *v3;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v7 = v19;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_215731D94(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  unsigned int v8 = *(void **)(a1 + 16);
  uint64_t v10 = *(void *)(v9 + 32);
  uint64_t v11 = *(unsigned int **)v9;
  uint64_t v12 = *(_DWORD **)(v9 + 8);
  int v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)uint64_t v9 = v13;
  if (v13 == *v12)
  {
    int v14 = v11[1] + 1;
    unsigned int *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      int v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2]) {
        return;
      }
      uint64_t v16 = 2;
    }
    else
    {
      uint64_t v16 = 1;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  size_t v17 = strlen(*(const char **)(**(void **)(v9 + 16) + 8 * v16));
  sub_215731D94(v8, *(void *)(**(void **)(v9 + 16) + 8 * v16), v17);
  sub_215BAD070(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_215DC7CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_215DC7CF4(_DWORD *a1, __int16 **a2, __int16 *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  *a2 = a3;
  a2[2] = (__int16 *)a4;
  if (a1[5])
  {
    unsigned int v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (__int16 *)v4;
      sub_215DC7E10(v5, v4);
      sub_215DC7E10(*a2 + 1, (uint64_t)(a2[2] + 12));
      sub_215DC7E10(*a2 + 2, (uint64_t)(a2[2] + 24));
      sub_215DC7E10(*a2 + 3, (uint64_t)(a2[2] + 36));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (__int16 *)v4;
  sub_215DC7E10(v5, v4);
  sub_215DC7E10(*a2 + 1, (uint64_t)(a2[2] + 12));
  sub_215DC7E10(*a2 + 2, (uint64_t)(a2[2] + 24));
  uint64_t v9 = *a2 + 3;
  uint64_t v10 = (uint64_t)(a2[2] + 36);

  return sub_215DC7E10(v9, v10);
}

double sub_215DC7E10(__int16 *a1, uint64_t a2)
{
  int v7 = 0;
  sub_215DC2E88((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1) {
    sub_215742D4C();
  }
  v9[0] = &v8;
  ((void (*)(long long *__return_ptr, void *, unsigned char *))off_26C684880[v7])(&v4, v9, v6);
  if (v7 != -1) {
    ((void (*)(void *, unsigned char *))off_26C684850[v7])(v9, v6);
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  return result;
}

void sub_215DC7ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_26C684850[a15])(v15 - 17, &a12);
  }
  _Unwind_Resume(exception_object);
}

double sub_215DC7F04(_DWORD *a1, float **a2, float *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  *a2 = a3;
  a2[2] = (float *)a4;
  if (a1[5])
  {
    unsigned int v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (float *)v4;
      sub_215DC8020(v5, v4);
      sub_215DC8020(*a2 + 1, (uint64_t)(a2[2] + 6));
      sub_215DC8020(*a2 + 2, (uint64_t)(a2[2] + 12));
      sub_215DC8020(*a2 + 3, (uint64_t)(a2[2] + 18));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (float *)v4;
  sub_215DC8020(v5, v4);
  sub_215DC8020(*a2 + 1, (uint64_t)(a2[2] + 6));
  sub_215DC8020(*a2 + 2, (uint64_t)(a2[2] + 12));
  uint64_t v9 = *a2 + 3;
  uint64_t v10 = (uint64_t)(a2[2] + 18);

  return sub_215DC8020(v9, v10);
}

double sub_215DC8020(float *a1, uint64_t a2)
{
  int v7 = 0;
  sub_2157D208C((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1) {
    sub_215742D4C();
  }
  v9[0] = &v8;
  ((void (*)(long long *__return_ptr, void *, unsigned char *))off_26C684880[v7])(&v4, v9, v6);
  if (v7 != -1) {
    ((void (*)(void *, unsigned char *))off_26C684850[v7])(v9, v6);
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  return result;
}

void sub_215DC80DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_26C684850[a15])(v15 - 17, &a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DC8114(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 *a4)
{
  long long v4 = a4;
  *(void *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    unsigned int v8 = 0;
    do
    {
      *(void *)a2 = v4;
      sub_215DC8200(*a3, v4);
      sub_215DC8200(*a3, (unsigned __int8 *)(*(void *)a2 + 1));
      sub_215DC8200(*a3, (unsigned __int8 *)(*(void *)a2 + 2));
      sub_215DC8200(*a3, (unsigned __int8 *)(*(void *)a2 + 3));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(void *)a2 = v4;
  sub_215DC8200(*a3, v4);
  sub_215DC8200(*a3, (unsigned __int8 *)(*(void *)a2 + 1));
  sub_215DC8200(*a3, (unsigned __int8 *)(*(void *)a2 + 2));
  uint64_t v9 = *a3;
  uint64_t v10 = (unsigned __int8 *)(*(void *)a2 + 3);

  sub_215DC8200(v9, v10);
}

void sub_215DC8200(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = **(uint64_t ***)a1;
  uint64_t v4 = **(unsigned __int8 **)(*(void *)a1 + 8);
  sub_215BAB6B4(a2);
  uint64_t v5 = *v3;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v7 = v19;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_215731D94(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  unsigned int v8 = *(void **)(a1 + 16);
  uint64_t v10 = *(void *)(v9 + 32);
  uint64_t v11 = *(unsigned int **)v9;
  uint64_t v12 = *(_DWORD **)(v9 + 8);
  int v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)uint64_t v9 = v13;
  if (v13 == *v12)
  {
    int v14 = v11[1] + 1;
    unsigned int *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      int v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2]) {
        return;
      }
      uint64_t v16 = 2;
    }
    else
    {
      uint64_t v16 = 1;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  size_t v17 = strlen(*(const char **)(**(void **)(v9 + 16) + 8 * v16));
  sub_215731D94(v8, *(void *)(**(void **)(v9 + 16) + 8 * v16), v17);
  sub_215BAD070(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_215DC838C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DC83A8(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int16 *a4)
{
  uint64_t v4 = a4;
  *(void *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    unsigned int v8 = 0;
    do
    {
      *(void *)a2 = v4;
      sub_215DC8494(*a3, v4);
      sub_215DC8494(*a3, (unsigned __int16 *)(*(void *)a2 + 2));
      sub_215DC8494(*a3, (unsigned __int16 *)(*(void *)a2 + 4));
      sub_215DC8494(*a3, (unsigned __int16 *)(*(void *)a2 + 6));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(void *)a2 = v4;
  sub_215DC8494(*a3, v4);
  sub_215DC8494(*a3, (unsigned __int16 *)(*(void *)a2 + 2));
  sub_215DC8494(*a3, (unsigned __int16 *)(*(void *)a2 + 4));
  uint64_t v9 = *a3;
  uint64_t v10 = (unsigned __int16 *)(*(void *)a2 + 6);

  sub_215DC8494(v9, v10);
}

void sub_215DC8494(uint64_t a1, unsigned __int16 *a2)
{
  int v3 = **(uint64_t ***)a1;
  uint64_t v4 = **(unsigned __int8 **)(*(void *)a1 + 8);
  sub_215BAC604(a2);
  uint64_t v5 = *v3;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v7 = v19;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_215731D94(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  unsigned int v8 = *(void **)(a1 + 16);
  uint64_t v10 = *(void *)(v9 + 32);
  uint64_t v11 = *(unsigned int **)v9;
  uint64_t v12 = *(_DWORD **)(v9 + 8);
  int v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)uint64_t v9 = v13;
  if (v13 == *v12)
  {
    int v14 = v11[1] + 1;
    unsigned int *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      int v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2]) {
        return;
      }
      uint64_t v16 = 2;
    }
    else
    {
      uint64_t v16 = 1;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  size_t v17 = strlen(*(const char **)(**(void **)(v9 + 16) + 8 * v16));
  sub_215731D94(v8, *(void *)(**(void **)(v9 + 16) + 8 * v16), v17);
  sub_215BAD070(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_215DC8620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_215DC863C(_DWORD *a1, __int16 **a2, __int16 *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  *a2 = a3;
  a2[2] = (__int16 *)a4;
  if (a1[5])
  {
    unsigned int v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (__int16 *)v4;
      sub_215DC8758(v5, v4);
      sub_215DC8758(*a2 + 1, (uint64_t)(a2[2] + 12));
      sub_215DC8758(*a2 + 2, (uint64_t)(a2[2] + 24));
      sub_215DC8758(*a2 + 3, (uint64_t)(a2[2] + 36));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (__int16 *)v4;
  sub_215DC8758(v5, v4);
  sub_215DC8758(*a2 + 1, (uint64_t)(a2[2] + 12));
  sub_215DC8758(*a2 + 2, (uint64_t)(a2[2] + 24));
  uint64_t v9 = *a2 + 3;
  uint64_t v10 = (uint64_t)(a2[2] + 36);

  return sub_215DC8758(v9, v10);
}

double sub_215DC8758(__int16 *a1, uint64_t a2)
{
  int v7 = 0;
  sub_215DC2E88((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1) {
    sub_215742D4C();
  }
  v9[0] = &v8;
  ((void (*)(long long *__return_ptr, void *, unsigned char *))off_26C684880[v7])(&v4, v9, v6);
  if (v7 != -1) {
    ((void (*)(void *, unsigned char *))off_26C684850[v7])(v9, v6);
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  return result;
}

void sub_215DC8814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_26C684850[a15])(v15 - 17, &a12);
  }
  _Unwind_Resume(exception_object);
}

double sub_215DC884C(_DWORD *a1, float **a2, float *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  *a2 = a3;
  a2[2] = (float *)a4;
  if (a1[5])
  {
    unsigned int v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (float *)v4;
      sub_215DC8968(v5, v4);
      sub_215DC8968(*a2 + 1, (uint64_t)(a2[2] + 6));
      sub_215DC8968(*a2 + 2, (uint64_t)(a2[2] + 12));
      sub_215DC8968(*a2 + 3, (uint64_t)(a2[2] + 18));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (float *)v4;
  sub_215DC8968(v5, v4);
  sub_215DC8968(*a2 + 1, (uint64_t)(a2[2] + 6));
  sub_215DC8968(*a2 + 2, (uint64_t)(a2[2] + 12));
  uint64_t v9 = *a2 + 3;
  uint64_t v10 = (uint64_t)(a2[2] + 18);

  return sub_215DC8968(v9, v10);
}

double sub_215DC8968(float *a1, uint64_t a2)
{
  int v7 = 0;
  sub_2157D208C((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1) {
    sub_215742D4C();
  }
  v9[0] = &v8;
  ((void (*)(long long *__return_ptr, void *, unsigned char *))off_26C684880[v7])(&v4, v9, v6);
  if (v7 != -1) {
    ((void (*)(void *, unsigned char *))off_26C684850[v7])(v9, v6);
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  return result;
}

void sub_215DC8A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_26C684850[a15])(v15 - 17, &a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DC8A5C(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 *a4)
{
  long long v4 = a4;
  *(void *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    unsigned int v8 = 0;
    do
    {
      *(void *)a2 = v4;
      sub_215DC8B48(*a3, v4);
      sub_215DC8B48(*a3, (unsigned __int8 *)(*(void *)a2 + 1));
      sub_215DC8B48(*a3, (unsigned __int8 *)(*(void *)a2 + 2));
      sub_215DC8B48(*a3, (unsigned __int8 *)(*(void *)a2 + 3));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(void *)a2 = v4;
  sub_215DC8B48(*a3, v4);
  sub_215DC8B48(*a3, (unsigned __int8 *)(*(void *)a2 + 1));
  sub_215DC8B48(*a3, (unsigned __int8 *)(*(void *)a2 + 2));
  uint64_t v9 = *a3;
  uint64_t v10 = (unsigned __int8 *)(*(void *)a2 + 3);

  sub_215DC8B48(v9, v10);
}

void sub_215DC8B48(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = **(uint64_t ***)a1;
  uint64_t v4 = **(unsigned __int8 **)(*(void *)a1 + 8);
  sub_215BAB6B4(a2);
  uint64_t v5 = *v3;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v7 = v19;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_215731D94(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  unsigned int v8 = *(void **)(a1 + 16);
  uint64_t v10 = *(void *)(v9 + 32);
  uint64_t v11 = *(unsigned int **)v9;
  uint64_t v12 = *(_DWORD **)(v9 + 8);
  int v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)uint64_t v9 = v13;
  if (v13 == *v12)
  {
    int v14 = v11[1] + 1;
    unsigned int *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      int v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2]) {
        return;
      }
      uint64_t v16 = 2;
    }
    else
    {
      uint64_t v16 = 1;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  size_t v17 = strlen(*(const char **)(**(void **)(v9 + 16) + 8 * v16));
  sub_215731D94(v8, *(void *)(**(void **)(v9 + 16) + 8 * v16), v17);
  sub_215BAD070(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_215DC8CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DC8CF0(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int16 *a4)
{
  uint64_t v4 = a4;
  *(void *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    unsigned int v8 = 0;
    do
    {
      *(void *)a2 = v4;
      sub_215DC8DDC(*a3, v4);
      sub_215DC8DDC(*a3, (unsigned __int16 *)(*(void *)a2 + 2));
      sub_215DC8DDC(*a3, (unsigned __int16 *)(*(void *)a2 + 4));
      sub_215DC8DDC(*a3, (unsigned __int16 *)(*(void *)a2 + 6));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(void *)a2 = v4;
  sub_215DC8DDC(*a3, v4);
  sub_215DC8DDC(*a3, (unsigned __int16 *)(*(void *)a2 + 2));
  sub_215DC8DDC(*a3, (unsigned __int16 *)(*(void *)a2 + 4));
  uint64_t v9 = *a3;
  uint64_t v10 = (unsigned __int16 *)(*(void *)a2 + 6);

  sub_215DC8DDC(v9, v10);
}

void sub_215DC8DDC(uint64_t a1, unsigned __int16 *a2)
{
  int v3 = **(uint64_t ***)a1;
  uint64_t v4 = **(unsigned __int8 **)(*(void *)a1 + 8);
  sub_215BAC604(a2);
  uint64_t v5 = *v3;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v7 = v19;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_215731D94(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  unsigned int v8 = *(void **)(a1 + 16);
  uint64_t v10 = *(void *)(v9 + 32);
  uint64_t v11 = *(unsigned int **)v9;
  uint64_t v12 = *(_DWORD **)(v9 + 8);
  int v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)uint64_t v9 = v13;
  if (v13 == *v12)
  {
    int v14 = v11[1] + 1;
    unsigned int *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      int v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2]) {
        return;
      }
      uint64_t v16 = 2;
    }
    else
    {
      uint64_t v16 = 1;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  size_t v17 = strlen(*(const char **)(**(void **)(v9 + 16) + 8 * v16));
  sub_215731D94(v8, *(void *)(**(void **)(v9 + 16) + 8 * v16), v17);
  sub_215BAD070(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_215DC8F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_215DC8F84(_DWORD *a1, __int16 **a2, __int16 *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  *a2 = a3;
  a2[2] = (__int16 *)a4;
  if (a1[5])
  {
    unsigned int v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (__int16 *)v4;
      sub_215DC90A0(v5, v4);
      sub_215DC90A0(*a2 + 1, (uint64_t)(a2[2] + 12));
      sub_215DC90A0(*a2 + 2, (uint64_t)(a2[2] + 24));
      sub_215DC90A0(*a2 + 3, (uint64_t)(a2[2] + 36));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (__int16 *)v4;
  sub_215DC90A0(v5, v4);
  sub_215DC90A0(*a2 + 1, (uint64_t)(a2[2] + 12));
  sub_215DC90A0(*a2 + 2, (uint64_t)(a2[2] + 24));
  uint64_t v9 = *a2 + 3;
  uint64_t v10 = (uint64_t)(a2[2] + 36);

  return sub_215DC90A0(v9, v10);
}

double sub_215DC90A0(__int16 *a1, uint64_t a2)
{
  int v7 = 0;
  sub_215DC2E88((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1) {
    sub_215742D4C();
  }
  v9[0] = &v8;
  ((void (*)(long long *__return_ptr, void *, unsigned char *))off_26C684880[v7])(&v4, v9, v6);
  if (v7 != -1) {
    ((void (*)(void *, unsigned char *))off_26C684850[v7])(v9, v6);
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  return result;
}

void sub_215DC915C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_26C684850[a15])(v15 - 17, &a12);
  }
  _Unwind_Resume(exception_object);
}

double sub_215DC9194(_DWORD *a1, float **a2, float *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  *a2 = a3;
  a2[2] = (float *)a4;
  if (a1[5])
  {
    unsigned int v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (float *)v4;
      sub_215DC92B0(v5, v4);
      sub_215DC92B0(*a2 + 1, (uint64_t)(a2[2] + 6));
      sub_215DC92B0(*a2 + 2, (uint64_t)(a2[2] + 12));
      sub_215DC92B0(*a2 + 3, (uint64_t)(a2[2] + 18));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (float *)v4;
  sub_215DC92B0(v5, v4);
  sub_215DC92B0(*a2 + 1, (uint64_t)(a2[2] + 6));
  sub_215DC92B0(*a2 + 2, (uint64_t)(a2[2] + 12));
  uint64_t v9 = *a2 + 3;
  uint64_t v10 = (uint64_t)(a2[2] + 18);

  return sub_215DC92B0(v9, v10);
}

double sub_215DC92B0(float *a1, uint64_t a2)
{
  int v7 = 0;
  sub_2157D208C((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1) {
    sub_215742D4C();
  }
  v9[0] = &v8;
  ((void (*)(long long *__return_ptr, void *, unsigned char *))off_26C684880[v7])(&v4, v9, v6);
  if (v7 != -1) {
    ((void (*)(void *, unsigned char *))off_26C684850[v7])(v9, v6);
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  return result;
}

void sub_215DC936C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_26C684850[a15])(v15 - 17, &a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215DC93A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  memcpy(&v12, (const void *)(a3 + 4 * a2 - 8), sizeof(v12));
  *(void *)a1 = v12;
  memcpy(&__dst, (const void *)(a5 + 4 * a4 - 4), sizeof(__dst));
  *(_DWORD *)(a1 + 8) = __dst * a6;
  if (a2 != a4
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/Size.cpp", 37, (uint64_t)"shape.size() == value_stride.size()", 35, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return a1;
}

void *sub_215DC9474(void *a1, uint64_t a2)
{
  int v3 = *(uint64_t **)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *a1 = &unk_26C684900;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    int v3 = (uint64_t *)a1[1];
  }
  *a1 = &unk_26C6848C0;
  if (v3)
  {
    uint64_t v6 = *v3;
    uint64_t v5 = (std::__shared_weak_count *)v3[1];
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6) {
          return a1;
        }
        goto LABEL_7;
      }
    }
    if (v6) {
LABEL_7:
    }
      sub_215DCFE08(a1[1]);
  }
  return a1;
}

void sub_215DC9560(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void *sub_215DC95B8(void *a1, uint64_t a2)
{
  int v3 = *(uint64_t **)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *a1 = &unk_26C684900;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    int v3 = (uint64_t *)a1[1];
  }
  *a1 = &unk_26C6848C0;
  if (v3)
  {
    uint64_t v6 = *v3;
    uint64_t v5 = (std::__shared_weak_count *)v3[1];
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6) {
          return a1;
        }
        goto LABEL_7;
      }
    }
    if (v6) {
LABEL_7:
    }
      sub_215DCFE08(a1[1]);
  }
  return a1;
}

void sub_215DC96A4(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215DC96FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v6) {
      sub_215DD0024(*(void *)(a1 + 8));
    }
  }
  long long v7 = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  char v8 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v7;
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void *sub_215DC97F8(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  if (v2)
  {
    uint64_t v4 = *v2;
    int v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
        if (!v4) {
          goto LABEL_6;
        }
        goto LABEL_5;
      }
    }
    if (v4) {
LABEL_5:
    }
      sub_215DD0024(a1[1]);
  }
LABEL_6:
  *a1 = &unk_26C684900;
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (!v5 || atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_215DC9910(void *a1)
{
  sub_215DC97F8(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215DC9948(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 249, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_6:
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v9 = v7;
  if (atomic_load_explicit((atomic_ullong *volatile)(v7 + 104), memory_order_acquire) != -1)
  {
    uint64_t v11 = &v9;
    uint64_t v10 = &v11;
    std::__call_once((std::once_flag::_State_type *)(v7 + 104), &v10, (void (__cdecl *)(void *))sub_215DCCB58);
  }
  return *(void *)(*(void *)(v7 + 112) + 8 * a2);
}

void *sub_215DC9A68(void *a1, uint64_t a2)
{
  int v3 = *(uint64_t **)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *a1 = &unk_26C684900;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    int v3 = (uint64_t *)a1[1];
  }
  *a1 = &unk_26C6848E0;
  if (v3)
  {
    uint64_t v6 = *v3;
    uint64_t v5 = (std::__shared_weak_count *)v3[1];
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6) {
          return a1;
        }
        goto LABEL_7;
      }
    }
    if (v6) {
LABEL_7:
    }
      sub_215DCFF18(a1[1]);
  }
  return a1;
}

void sub_215DC9B54(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void *sub_215DC9BAC(void *a1, uint64_t a2)
{
  int v3 = *(uint64_t **)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *a1 = &unk_26C684900;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    int v3 = (uint64_t *)a1[1];
  }
  *a1 = &unk_26C6848E0;
  if (v3)
  {
    uint64_t v6 = *v3;
    uint64_t v5 = (std::__shared_weak_count *)v3[1];
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6) {
          return a1;
        }
        goto LABEL_7;
      }
    }
    if (v6) {
LABEL_7:
    }
      sub_215DCFF18(a1[1]);
  }
  return a1;
}

void sub_215DC9C98(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215DC9CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v6) {
      sub_215DD0134(*(void *)(a1 + 8));
    }
  }
  long long v7 = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  char v8 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v7;
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void *sub_215DC9DEC(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  if (v2)
  {
    uint64_t v4 = *v2;
    int v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
        if (!v4) {
          goto LABEL_6;
        }
        goto LABEL_5;
      }
    }
    if (v4) {
LABEL_5:
    }
      sub_215DD0134(a1[1]);
  }
LABEL_6:
  *a1 = &unk_26C684900;
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (!v5 || atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_215DC9F04(void *a1)
{
  sub_215DC9DEC(a1);

  JUMPOUT(0x2166C4D20);
}

__IOSurface *sub_215DC9F3C@<X0>(IOSurfaceRef *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  if (result)
  {
    PlaneCounint t = IOSurfaceGetPlaneCount(result);
    if (PlaneCount <= 1) {
      unint64_t v6 = 1;
    }
    else {
      unint64_t v6 = PlaneCount;
    }
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    if (v6 >> 61) {
      sub_215738AC0();
    }
    long long v7 = (char *)operator new(8 * v6);
    *a2 = v7;
    a2[2] = &v7[8 * v6];
    bzero(v7, 8 * v6);
    size_t v8 = 0;
    a2[1] = &v7[8 * v6];
    do
    {
      double result = (__IOSurface *)IOSurfaceGetBaseAddressOfPlane(*a1, v8);
      *(void *)&v7[8 * v8++] = result;
    }
    while (v6 != v8);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

void sub_215DCA008(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DCA030(int a1, CFTypeRef cf, int a3)
{
  if (a3) {
    sub_215B62310(&v3, cf);
  }
  CFTypeRef v3 = cf;
  operator new();
}

void sub_215DCA2DC(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215DCA2F4(_Unwind_Exception *a1)
{
}

void sub_215DCA308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_215DCA324(_DWORD *a1, int a2)
{
  int v2 = a2;
  if (a1[1] * *a1) {
    sub_215DCD144();
  }
  v3[6] = 0;
  sub_2158B25D8(v3, "given IOSurface size ");
  sub_215B65D2C();
}

void sub_215DCAC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34)
{
  if (*(char *)(v34 - 113) < 0)
  {
    operator delete(*(void **)(v34 - 136));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DCAD70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

void *sub_215DCAD80(void *result)
{
  uint64_t v1 = result;
  *double result = &unk_26C684900;
  int v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215DCAE18(void *a1)
{
  *a1 = &unk_26C684900;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

size_t sub_215DCAEC0(uint64_t a1)
{
  int v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = *v2;
    CFTypeRef v3 = (std::__shared_weak_count *)v2[1];
    if (v3
      && (atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4) {
        goto LABEL_6;
      }
    }
    else if (v4)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 131, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_6:
  uint64_t v5 = *(__IOSurface ***)(a1 + 8);
  if (v5)
  {
    unint64_t v6 = *v5;
    long long v7 = (std::__shared_weak_count *)v5[1];
    if (v7
      && (atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      size_t v8 = v6;
    }
    else
    {
      size_t v8 = v6;
    }
  }
  else
  {
    size_t v8 = 0;
  }
  return IOSurfaceGetPlaneCount(v8);
}

size_t sub_215DCB044(uint64_t a1)
{
  int v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = *v2;
    CFTypeRef v3 = (std::__shared_weak_count *)v2[1];
    if (v3
      && (atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4) {
        goto LABEL_6;
      }
    }
    else if (v4)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 147, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_6:
  uint64_t v5 = *(__IOSurface ***)(a1 + 8);
  if (v5)
  {
    unint64_t v6 = *v5;
    long long v7 = (std::__shared_weak_count *)v5[1];
    if (v7
      && (atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      size_t v8 = v6;
    }
    else
    {
      size_t v8 = v6;
    }
  }
  else
  {
    size_t v8 = 0;
  }
  return IOSurfaceGetWidth(v8);
}

size_t sub_215DCB1C8(uint64_t a1, size_t planeIndex)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 152, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_6:
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    size_t v8 = *(__IOSurface **)v7;
    uint64_t v9 = *(std::__shared_weak_count **)(v7 + 8);
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    size_t v8 = 0;
  }

  return IOSurfaceGetWidthOfPlane(v8, planeIndex);
}

size_t sub_215DCB310(uint64_t a1)
{
  int v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = *v2;
    CFTypeRef v3 = (std::__shared_weak_count *)v2[1];
    if (v3
      && (atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4) {
        goto LABEL_6;
      }
    }
    else if (v4)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 157, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_6:
  uint64_t v5 = *(__IOSurface ***)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = *v5;
    uint64_t v7 = (std::__shared_weak_count *)v5[1];
    if (v7
      && (atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      size_t v8 = v6;
    }
    else
    {
      size_t v8 = v6;
    }
  }
  else
  {
    size_t v8 = 0;
  }
  return IOSurfaceGetHeight(v8);
}

size_t sub_215DCB494(uint64_t a1, size_t planeIndex)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 162, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_6:
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    size_t v8 = *(__IOSurface **)v7;
    uint64_t v9 = *(std::__shared_weak_count **)(v7 + 8);
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    size_t v8 = 0;
  }

  return IOSurfaceGetHeightOfPlane(v8, planeIndex);
}

size_t sub_215DCB5DC(uint64_t a1)
{
  int v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = *v2;
    CFTypeRef v3 = (std::__shared_weak_count *)v2[1];
    if (v3
      && (atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4) {
        goto LABEL_6;
      }
    }
    else if (v4)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 192, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_6:
  uint64_t v5 = *(__IOSurface ***)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = *v5;
    uint64_t v7 = (std::__shared_weak_count *)v5[1];
    if (v7
      && (atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      size_t v8 = v6;
    }
    else
    {
      size_t v8 = v6;
    }
  }
  else
  {
    size_t v8 = 0;
  }
  return IOSurfaceGetBytesPerElement(v8);
}

size_t sub_215DCB760(uint64_t a1, size_t planeIndex)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 197, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_6:
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    size_t v8 = *(__IOSurface **)v7;
    uint64_t v9 = *(std::__shared_weak_count **)(v7 + 8);
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    size_t v8 = 0;
  }

  return IOSurfaceGetBytesPerElementOfPlane(v8, planeIndex);
}

size_t sub_215DCB8A8(uint64_t a1)
{
  int v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = *v2;
    CFTypeRef v3 = (std::__shared_weak_count *)v2[1];
    if (v3
      && (atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4) {
        goto LABEL_6;
      }
    }
    else if (v4)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 202, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_6:
  uint64_t v5 = *(__IOSurface ***)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = *v5;
    uint64_t v7 = (std::__shared_weak_count *)v5[1];
    if (v7
      && (atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      size_t v8 = v6;
    }
    else
    {
      size_t v8 = v6;
    }
  }
  else
  {
    size_t v8 = 0;
  }
  return IOSurfaceGetBytesPerRow(v8);
}

size_t sub_215DCBA2C(uint64_t a1, size_t planeIndex)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 207, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_6:
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    size_t v8 = *(__IOSurface **)v7;
    uint64_t v9 = *(std::__shared_weak_count **)(v7 + 8);
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    size_t v8 = 0;
  }

  return IOSurfaceGetBytesPerRowOfPlane(v8, planeIndex);
}

uint64_t sub_215DCBB74(uint64_t a1)
{
  int v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = *v2;
    CFTypeRef v3 = (std::__shared_weak_count *)v2[1];
    if (v3
      && (atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4) {
        goto LABEL_6;
      }
    }
    else if (v4)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 212, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_6:
  uint64_t v5 = *(__IOSurface ***)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = *v5;
    uint64_t v7 = (std::__shared_weak_count *)v5[1];
    if (v7
      && (atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      size_t v8 = v6;
    }
    else
    {
      size_t v8 = v6;
    }
  }
  else
  {
    size_t v8 = 0;
  }
  return IOSurfaceGetPixelFormat(v8);
}

uint64_t sub_215DCBCF8(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 243, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_6:
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v9 = v7;
  if (atomic_load_explicit((atomic_ullong *volatile)(v7 + 104), memory_order_acquire) != -1)
  {
    uint64_t v11 = &v9;
    uint64_t v10 = &v11;
    std::__call_once((std::once_flag::_State_type *)(v7 + 104), &v10, (void (__cdecl *)(void *))sub_215DCCB58);
  }
  return *(void *)(*(void *)(v7 + 112) + 8 * a2);
}

void *sub_215DCBE18(void *a1, uint64_t a2)
{
  BOOL v62 = a1;
  sub_215731D94(a1, (uint64_t)"IOSurface<", 10);
  CFTypeRef v3 = *(uint64_t **)(a2 + 8);
  if (v3)
  {
    uint64_t v4 = *v3;
    uint64_t v5 = (std::__shared_weak_count *)v3[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      int v64 = 0;
      if (v4) {
LABEL_5:
      }
        operator new();
    }
    else
    {
      int v64 = 0;
      if (v4) {
        goto LABEL_5;
      }
    }
  }
  else
  {
    int v64 = 0;
  }
  sub_21574344C(v63, "nullptr");
  if (v64 == -1) {
    sub_215742D4C();
  }
  v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
  ((void (*)(void **__return_ptr, std::string *, void **))off_26C6849D8[v64])(__p, &v66, v63);
  if (v64 != -1) {
    ((void (*)(std::string *, void **))off_26C6849C0[v64])(&v66, v63);
  }
  if ((v61 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v61 & 0x80u) == 0) {
    uint64_t v7 = v61;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_215731D94(v62, (uint64_t)v6, v7);
  sub_215731D94(v62, (uint64_t)">{", 2);
  v63[0] = (void *)sub_215DCBCF8(a2, 0);
  sub_2157DBD10((uint64_t)&v66, &v62, v63);
  sub_215731D94(v62, (uint64_t)", ", 2);
  sub_215731D94(v62, (uint64_t)"size: ", 6);
  unsigned int v8 = sub_215DCB044(a2);
  uint64_t __dst = __PAIR64__(sub_215DCB310(a2), v8);
  sub_215B65F80(v62, (unsigned int *)&__dst);
  sub_215731D94(v62, (uint64_t)", ", 2);
  sub_215731D94(v62, (uint64_t)"format: ", 8);
  unsigned int v59 = sub_215DCBB74(a2);
  sub_215E0C4EC(v62, &v59);
  sub_215731D94(v62, (uint64_t)", ", 2);
  sub_215731D94(v62, (uint64_t)"element_size: ", 14);
  uint64_t v9 = *(uint64_t **)(a2 + 8);
  if (v9)
  {
    uint64_t v10 = *v9;
    uint64_t v11 = (std::__shared_weak_count *)v9[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v10) {
        goto LABEL_24;
      }
    }
    else if (v10)
    {
      goto LABEL_24;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 167, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_24:
  uint64_t v12 = *(void *)(a2 + 8);
  if (v12)
  {
    int v13 = *(__IOSurface **)v12;
    int v14 = *(std::__shared_weak_count **)(v12 + 8);
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    int v13 = 0;
  }
  Elementunsigned int Width = IOSurfaceGetElementWidth(v13);
  uint64_t v16 = *(uint64_t **)(a2 + 8);
  if (v16)
  {
    uint64_t v17 = *v16;
    uint64_t v18 = (std::__shared_weak_count *)v16[1];
    if (v18
      && (atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (v17) {
        goto LABEL_34;
      }
    }
    else if (v17)
    {
      goto LABEL_34;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 177, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_34:
  uint64_t v19 = *(void *)(a2 + 8);
  if (v19)
  {
    uint64_t v20 = *(__IOSurface **)v19;
    int v21 = *(std::__shared_weak_count **)(v19 + 8);
    if (v21)
    {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  ElementHeighint t = IOSurfaceGetElementHeight(v20);
  unsigned int v67 = ElementWidth;
  int v68 = ElementHeight;
  sub_215B65F80(v62, &v67);
  sub_215731D94(v62, (uint64_t)", ", 2);
  sub_215731D94(v62, (uint64_t)"bytes_per_element/row: ", 23);
  v58[0] = sub_215DCB5DC(a2);
  v58[1] = sub_215DCB8A8(a2);
  sub_215B65F80(v62, v58);
  sub_215731D94(v62, (uint64_t)", ", 2);
  sub_215731D94(v62, (uint64_t)"num_planes: ", 12);
  size_t v23 = sub_215DCAEC0(a2);
  std::to_string(&v66, v23);
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v24 = &v66;
  }
  else {
    uint64_t v24 = (std::string *)v66.__r_.__value_.__r.__words[0];
  }
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v66.__r_.__value_.__l.__size_;
  }
  sub_215731D94(v62, (uint64_t)v24, size);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v66.__r_.__value_.__l.__data_);
    if (((char)v61 & 0x80000000) == 0)
    {
LABEL_47:
      size_t v26 = sub_215DCAEC0(a2);
      if (!v26) {
        return sub_215731D94(a1, (uint64_t)"}", 1);
      }
      goto LABEL_51;
    }
  }
  else if (((char)v61 & 0x80000000) == 0)
  {
    goto LABEL_47;
  }
  operator delete(__p[0]);
  size_t v26 = sub_215DCAEC0(a2);
  if (v26)
  {
LABEL_51:
    size_t v27 = v26;
    for (unint64_t i = 0; v27 != i; ++i)
    {
      v63[0] = a1;
      sub_215731D94(a1, (uint64_t)", ", 2);
      sub_215731D94(v63[0], (uint64_t)"plane #", 7);
      std::to_string(&v66, i);
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v29 = &v66;
      }
      else {
        int v29 = (std::string *)v66.__r_.__value_.__r.__words[0];
      }
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v30 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v30 = v66.__r_.__value_.__l.__size_;
      }
      sub_215731D94(v63[0], (uint64_t)v29, v30);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      sub_215731D94(v63[0], (uint64_t)": {", 3);
      uint64_t __dst = sub_215DCBCF8(a2, i);
      sub_2157DBD10((uint64_t)&v66, v63, &__dst);
      sub_215731D94(v63[0], (uint64_t)", size: ", 8);
      unsigned int v31 = sub_215DCB1C8(a2, i);
      __p[0] = (void *)__PAIR64__(sub_215DCB494(a2, i), v31);
      sub_215B65F80(v63[0], (unsigned int *)__p);
      sub_215731D94(v63[0], (uint64_t)", ", 2);
      sub_215731D94(v63[0], (uint64_t)"element_size: ", 14);
      int v32 = *(uint64_t **)(a2 + 8);
      if (v32)
      {
        uint64_t v33 = *v32;
        uint64_t v34 = (std::__shared_weak_count *)v32[1];
        if (v34
          && (atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed),
              !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
          if (v33) {
            goto LABEL_66;
          }
        }
        else if (v33)
        {
          goto LABEL_66;
        }
      }
      if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 172, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_111;
      }
LABEL_66:
      uint64_t v35 = *(void *)(a2 + 8);
      if (v35)
      {
        size_t v36 = *(__IOSurface **)v35;
        uint64_t v37 = *(std::__shared_weak_count **)(v35 + 8);
        if (v37)
        {
          atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        unsigned int ElementWidthOfPlane = IOSurfaceGetElementWidthOfPlane(v36, i);
        unint64_t v39 = *(uint64_t **)(a2 + 8);
        if (!v39) {
          goto LABEL_76;
        }
      }
      else
      {
        unsigned int ElementWidthOfPlane = IOSurfaceGetElementWidthOfPlane(0, i);
        unint64_t v39 = *(uint64_t **)(a2 + 8);
        if (!v39) {
          goto LABEL_76;
        }
      }
      uint64_t v40 = *v39;
      unint64_t v41 = (std::__shared_weak_count *)v39[1];
      if (v41
        && (atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed),
            !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
        if (v40) {
          goto LABEL_77;
        }
      }
      else if (v40)
      {
        goto LABEL_77;
      }
LABEL_76:
      if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 182, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_111;
      }
LABEL_77:
      uint64_t v42 = *(void *)(a2 + 8);
      if (v42)
      {
        unint64_t v44 = *(__IOSurface **)v42;
        uint64_t v43 = *(std::__shared_weak_count **)(v42 + 8);
        if (v43)
        {
          atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
      }
      else
      {
        unint64_t v44 = 0;
      }
      int ElementHeightOfPlane = IOSurfaceGetElementHeightOfPlane(v44, i);
      unsigned int v67 = ElementWidthOfPlane;
      int v68 = ElementHeightOfPlane;
      sub_215B65F80(v63[0], &v67);
      sub_215731D94(v63[0], (uint64_t)", ", 2);
      sub_215731D94(v63[0], (uint64_t)"bytes_per_element/row: ", 23);
      unsigned int v46 = sub_215DCB760(a2, i);
      BOOL v62 = (void *)__PAIR64__(sub_215DCBA2C(a2, i), v46);
      sub_215B65F80(v63[0], (unsigned int *)&v62);
      sub_215731D94(v63[0], (uint64_t)", ", 2);
      sub_215731D94(v63[0], (uint64_t)"num_components: ", 16);
      size_t v47 = *(uint64_t **)(a2 + 8);
      if (!v47)
      {
LABEL_86:
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 187, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
LABEL_111:
          abort();
        }
        goto LABEL_87;
      }
      uint64_t v48 = *v47;
      unsigned int v49 = (std::__shared_weak_count *)v47[1];
      if (v49
        && (atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed),
            !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
        if (!v48) {
          goto LABEL_86;
        }
      }
      else if (!v48)
      {
        goto LABEL_86;
      }
LABEL_87:
      uint64_t v50 = *(void *)(a2 + 8);
      if (v50)
      {
        int v52 = *(__IOSurface **)v50;
        int v51 = *(std::__shared_weak_count **)(v50 + 8);
        if (v51)
        {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
      }
      else
      {
        int v52 = 0;
      }
      size_t NumberOfComponentsOfPlane = IOSurfaceGetNumberOfComponentsOfPlane(v52, i);
      std::to_string(&v66, NumberOfComponentsOfPlane);
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v54 = &v66;
      }
      else {
        int v54 = (std::string *)v66.__r_.__value_.__r.__words[0];
      }
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v55 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v55 = v66.__r_.__value_.__l.__size_;
      }
      sub_215731D94(v63[0], (uint64_t)v54, v55);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      sub_215731D94(v63[0], (uint64_t)"}", 1);
    }
  }
  return sub_215731D94(a1, (uint64_t)"}", 1);
}

void sub_215DCCA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  MEMORY[0x2166C4D20](v9, 0x10B2C40EED050F3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DCCA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a29 < 0)
  {
    operator delete(__p);
    sub_215742CF0((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  sub_215742CF0((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_215DCCB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DCCB38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    JUMPOUT(0x215DCCB4CLL);
  }
  JUMPOUT(0x215DCCB50);
}

double sub_215DCCB58(uint64_t ***a1)
{
  uint64_t v1 = ***a1;
  sub_215DC9F3C((IOSurfaceRef *)v1, &v4);
  int v2 = *(void **)(v1 + 112);
  if (v2)
  {
    *(void *)(v1 + 12std::__fs::filesystem::__rename(__from, __to, 0) = v2;
    operator delete(v2);
  }
  double result = *(double *)&v4;
  *(_OWORD *)(v1 + 112) = v4;
  *(void *)(v1 + 128) = v5;
  return result;
}

void sub_215DCCBB4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684968;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215DCCBD4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684968;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215DCCC28(uint64_t a1)
{
  int v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(void *)(a1 + 144) = v2;
    operator delete(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 64));
  CFTypeRef v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t sub_215DCCCC4(int a1, unsigned int a2)
{
  if (a1 <= 1278226487)
  {
    if (a1 > 875704421)
    {
      if (a1 > 875836533)
      {
        if (a1 != 875836534)
        {
          int v2 = 1094862674;
          uint64_t v3 = 0x4000000004;
          if (a2 >= 2) {
            uint64_t v4 = 0;
          }
          else {
            uint64_t v4 = 0x4000000004;
          }
          uint64_t v5 = v4 & 0x4000000000;
          int v6 = 1111970369;
          goto LABEL_72;
        }
      }
      else if (a1 != 875704422 && a1 != 875704438 && a1 != 875836518)
      {
        return 0;
      }
      long long v37 = xmmword_215EF8AA0;
      if (a2 <= 2) {
        return *((void *)&v37 + a2);
      }
      else {
        return 0;
      }
    }
    if (a1 <= 843264055)
    {
      if (a1 == 24)
      {
        uint64_t v35 = 0xC000000003;
        if (a2 >= 2) {
          uint64_t v35 = 0;
        }
        return v35 & 0xC0000000FFLL;
      }
      else
      {
        uint64_t v7 = 0x4000000004;
        if (a2 >= 2) {
          uint64_t v7 = 0;
        }
        uint64_t v8 = 0xC000000003;
        if (a2 >= 2) {
          uint64_t v8 = 0;
        }
        if (a1 == 842285639) {
          char v9 = v8;
        }
        else {
          char v9 = 0;
        }
        if (a1 == 842285639) {
          uint64_t v10 = v8 & 0xC000000000;
        }
        else {
          uint64_t v10 = 0;
        }
        if (a1 == 32)
        {
          uint64_t v11 = v7 & 0x4000000000;
        }
        else
        {
          LOBYTE(v7) = v9;
          uint64_t v11 = v10;
        }
        return v11 | v7;
      }
    }
    if (a1 != 843264056)
    {
      int v13 = 843264102;
      uint64_t v14 = 0x8000000008;
      if (a2 >= 2) {
        uint64_t v14 = 0;
      }
      uint64_t v15 = v14 & 0x8000000000;
      int v16 = 843264104;
      uint64_t v17 = 0x4000000004;
      if (a2 >= 2) {
        uint64_t v17 = 0;
      }
      uint64_t v18 = v17 & 0x4000000000;
      goto LABEL_54;
    }
LABEL_101:
    uint64_t v34 = 0x4000000002;
    goto LABEL_107;
  }
  if (a1 <= 1647392358)
  {
    if (a1 > 1380401728)
    {
      if (a1 == 1380401729)
      {
        uint64_t v36 = 0x4000000004;
        if (a2 >= 2) {
          uint64_t v36 = 0;
        }
        return v36 & 0x40000000FFLL;
      }
      int v13 = 1380410945;
      uint64_t v14 = 0x10000000010;
      if (a2 >= 2) {
        uint64_t v14 = 0;
      }
      uint64_t v15 = v14 & 0x10000000000;
      int v16 = 1380411457;
      goto LABEL_51;
    }
    if (a1 != 1278226488)
    {
      int v2 = 1278226534;
      if (a2 >= 2) {
        uint64_t v4 = 0;
      }
      else {
        uint64_t v4 = 0x4000000004;
      }
      uint64_t v5 = v4 & 0x4000000000;
      int v6 = 1278226536;
      uint64_t v3 = 0x4000000002;
      goto LABEL_72;
    }
    uint64_t v34 = 0x4000000001;
LABEL_107:
    if (a2 >= 2) {
      uint64_t v34 = 0;
    }
    return v34 & 0x40000000FFLL;
  }
  if (a1 <= 1717855599)
  {
    if (a1 != 1647392359)
    {
      int v13 = 1647589490;
      uint64_t v14 = 0xC000000006;
      if (a2 >= 2) {
        uint64_t v14 = 0;
      }
      uint64_t v15 = v14 & 0xC000000000;
      int v16 = 1647719521;
LABEL_51:
      uint64_t v17 = 0x8000000008;
      if (a2 >= 2) {
        uint64_t v17 = 0;
      }
      uint64_t v18 = v17 & 0x8000000000;
LABEL_54:
      BOOL v19 = a1 == v16;
      if (a1 == v16) {
        unsigned __int8 v20 = v17;
      }
      else {
        unsigned __int8 v20 = 0;
      }
      if (v19) {
        uint64_t v21 = v18;
      }
      else {
        uint64_t v21 = 0;
      }
      BOOL v22 = a1 == v13;
      if (a1 == v13) {
        unsigned __int8 v23 = v14;
      }
      else {
        unsigned __int8 v23 = v20;
      }
      if (v22) {
        uint64_t v24 = v15;
      }
      else {
        uint64_t v24 = v21;
      }
      return v24 | v23;
    }
    goto LABEL_101;
  }
  if (a1 <= 1751410031)
  {
    int v2 = 1717855600;
    uint64_t v3 = 0x4000000004;
    if (a2 >= 2) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = 0x4000000004;
    }
    uint64_t v5 = v4 & 0x4000000000;
    int v6 = 1717856627;
LABEL_72:
    if (a2 >= 2) {
      uint64_t v3 = 0;
    }
    if (a1 == v6)
    {
      uint64_t v25 = v3 & 0x4000000000;
    }
    else
    {
      LOBYTE(v3) = 0;
      uint64_t v25 = 0;
    }
    BOOL v26 = a1 == v2;
    if (a1 == v2) {
      unsigned __int8 v27 = v4;
    }
    else {
      unsigned __int8 v27 = v3;
    }
    if (v26) {
      uint64_t v28 = v5;
    }
    else {
      uint64_t v28 = v25;
    }
    return v28 | v27;
  }
  uint64_t v29 = 0x4000000002;
  if (a2 >= 2) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = 0x4000000002;
  }
  if (a2 >= 2) {
    uint64_t v29 = 0;
  }
  if (a1 == 1751411059)
  {
    uint64_t v31 = v29 & 0x4000000000;
  }
  else
  {
    LOBYTE(v29) = 0;
    uint64_t v31 = 0;
  }
  if (a1 == 1751410032) {
    unsigned __int8 v32 = v30;
  }
  else {
    unsigned __int8 v32 = v29;
  }
  if (a1 == 1751410032) {
    uint64_t v33 = v30 & 0x4000000000;
  }
  else {
    uint64_t v33 = v31;
  }
  return v33 | v32;
}

void sub_215DCD144()
{
  v1[3] = *MEMORY[0x263EF8340];
  v1[0] = 0;
  v1[1] = 0;
  value = v1;
  sub_215DD8470();
}

void sub_215DCE5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  __cxa_guard_abort(&qword_267890608);
  sub_215733368((uint64_t)va);
  sub_215733368(v7);
  _Unwind_Resume(a1);
}

void sub_215DCE620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  __cxa_guard_abort(&qword_2678905E8);
  sub_215733368((uint64_t)va);
  sub_215733368(v7);
  _Unwind_Resume(a1);
}

void sub_215DCE648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  __cxa_guard_abort(&qword_2678905C8);
  sub_215733368((uint64_t)va);
  sub_215733368(v7);
  _Unwind_Resume(a1);
}

void sub_215DCE670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  __cxa_guard_abort((__guard *)&dword_2678905A8);
  sub_215733368((uint64_t)va);
  sub_215733368(v7);
  _Unwind_Resume(a1);
}

void sub_215DCE698(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2678905F8);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215DCE6B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2678905D8);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215DCE6D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2678905B8);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215DCE6F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_267890598);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215DCE718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_215733368((uint64_t)&a13);
  sub_215733368((uint64_t)&a15);
  sub_215733368(v25);
  _Unwind_Resume(a1);
}

void sub_215DCE990()
{
}

void sub_215DCE998()
{
}

void sub_215DCE9A0()
{
}

void sub_215DCE9A8()
{
}

void sub_215DCE9B0()
{
}

void sub_215DCE9B8()
{
}

void sub_215DCE9C0()
{
}

void sub_215DCE9C8()
{
}

void sub_215DCE9D0()
{
}

void sub_215DCE9D8()
{
}

void sub_215DCE9E0()
{
}

void sub_215DCE9E8()
{
}

void sub_215DCE9F0()
{
}

void sub_215DCE9F8()
{
}

void sub_215DCEA00()
{
}

void sub_215DCEA08()
{
}

void sub_215DCEA10()
{
}

void sub_215DCEA18()
{
}

void sub_215DCEA20()
{
}

void sub_215DCEA28()
{
}

void sub_215DCEA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,char *a21)
{
  sub_21573AE84((uint64_t)&a20, a21);
  sub_215733368((uint64_t)&a15);
  sub_215733368(v21);
  _Unwind_Resume(a1);
}

void sub_215DCEA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215733368((uint64_t)va);
  sub_215733368(v7);
  _Unwind_Resume(a1);
}

void sub_215DCEA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215733368((uint64_t)va);
  sub_215733368(v7);
  _Unwind_Resume(a1);
}

void sub_215DCEA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215733368((uint64_t)va);
  sub_215733368(v7);
  _Unwind_Resume(a1);
}

void sub_215DCEAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215733368((uint64_t)va);
  sub_215733368(v7);
  _Unwind_Resume(a1);
}

void sub_215DCEAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215733368((uint64_t)va);
  sub_215733368(v7);
  _Unwind_Resume(a1);
}

void sub_215DCEAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215733368((uint64_t)va);
  sub_215733368(v7);
  _Unwind_Resume(a1);
}

void sub_215DCEB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215733368((uint64_t)va);
  sub_215733368(v7);
  _Unwind_Resume(a1);
}

void sub_215DCEB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215733368((uint64_t)va);
  sub_215733368(v7);
  _Unwind_Resume(a1);
}

void sub_215DCEB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215733368((uint64_t)va);
  sub_215733368(v7);
  _Unwind_Resume(a1);
}

void sub_215DCEB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215733368((uint64_t)va);
  sub_215733368(v7);
  _Unwind_Resume(a1);
}

void sub_215DCEB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215733368((uint64_t)va);
  sub_215733368(v7);
  _Unwind_Resume(a1);
}

void sub_215DCEB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215733368((uint64_t)va);
  sub_215733368(v7);
  _Unwind_Resume(a1);
}

void sub_215DCEBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,char *a21)
{
  sub_21573AE84((uint64_t)&a20, a21);
  sub_215733368(v21);
  _Unwind_Resume(a1);
}

void sub_215DCEBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_215733368((uint64_t)va);
  sub_215733368(v12);
  _Unwind_Resume(a1);
}

void sub_215DCEBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
  {
    operator delete(__p);
    sub_215733368(v25);
    _Unwind_Resume(a1);
  }
  sub_215733368(v25);
  _Unwind_Resume(a1);
}

void sub_215DCEC20(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215DCEC34(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215DCEC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,char *a21)
{
}

void sub_215DCEC60(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215DCEC88(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  CFDictionaryRef v5 = *(CFDictionaryRef *)a1;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4
    && (atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5) {
      goto LABEL_7;
    }
  }
  else if (!v5)
  {
    goto LABEL_7;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a1, @"IOSurfaceName", (const void **)&value))
  {
    sub_215DD0C9C((CFIndex)value, a2);
    return;
  }
LABEL_7:
  a2->__r_.__value_.__s.__data_[0] = 0;
  a2[1].__r_.__value_.__s.__data_[0] = 0;
}

uint64_t *sub_215DCED58(uint64_t *a1, uint64_t *a2)
{
  sub_215DCEDE4(a2, &__p);
  sub_215DCF8AC(a1, @"IOSurfaceName", (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_215DCEDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DCEDE4(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit(&byte_267890588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire((__guard *)&byte_267890588))
  {
    sub_215DCEF30();
  }
  uint64_t v4 = &xmmword_267890610;
  uint64_t v5 = byte_267890627;
  if (byte_267890627 < 0)
  {
    uint64_t v5 = *((void *)&xmmword_267890610 + 1);
    uint64_t v4 = (long long *)xmmword_267890610;
  }
  v8[0] = v4;
  v8[1] = v5;
  v8[2] = "; ";
  void v8[3] = 2;
  uint64_t v6 = *((unsigned __int8 *)a1 + 23);
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = (uint64_t *)*a1;
  }
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = a1[1];
  }
  void v8[4] = v7;
  v8[5] = v6;
  v8[6] = "; X/X";
  v8[7] = 5;
  sub_2157430CC((uint64_t)v8, (uint64_t)&v9, 0, 0, a2);
}

void sub_215DCEF14(_Unwind_Exception *a1)
{
}

void sub_215DCEF30()
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  sub_215DD0460(__p);
  sub_215DD0378((uint64_t)__p, (int)&v1);
}

void sub_215DCF43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if (a30 < 0) {
      goto LABEL_6;
    }
  }
  else if (a30 < 0)
  {
LABEL_6:
    operator delete(a25);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DCF568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (*(unsigned char *)(v15 - 80))
  {
    if (*(char *)(v15 - 81) < 0) {
      operator delete(*(void **)(v15 - 104));
    }
  }
  sub_215733368((uint64_t)&a15);
  sub_215733368((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_215DCF59C(uint64_t a1, int *a2)
{
  int v5 = 0;
  sub_21576B850(v4, "Unsupported pixel format value ");
  std::to_string(&v6, *a2);
  v7[0] = v4;
  v7[1] = &v6;
  void v7[2] = v4;
  void v7[3] = &v6;
  v7[4] = &v6;
  if (v5 == -1) {
    sub_215742D4C();
  }
  uint64_t v8 = v7;
  ((void (*)(void **, _DWORD *))off_26C684A50[v5])(&v8, v4);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (v5 == -1) {
    sub_215742D4C();
  }
  v7[0] = &v6;
  uint64_t result = ((uint64_t (*)(void *, _DWORD *))off_26C684A68[v5])(v7, v4);
  if (v5 != -1) {
    return ((uint64_t (*)(void *, _DWORD *))off_26C684A38[v5])(v7, v4);
  }
  return result;
}

void sub_215DCF6A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DCF6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_215742CF0((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x215DCF6ACLL);
}

void sub_215DCF6E0(uint64_t a1)
{
  sub_215B6115C((uint64_t)&v1, a1);
}

void ***sub_215DCF7D0(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      uint64_t v4 = (char *)v2[1];
      int v5 = **result;
      if (v4 != v3)
      {
        do
        {
          std::string v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
          if (v6)
          {
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v4 -= 16;
        }
        while (v4 != v3);
        int v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_215DCF8AC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4
    && (atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5) {
LABEL_4:
    }
      sub_215DD0B64(a3);
  }
  else if (v5)
  {
    goto LABEL_4;
  }
  return 0;
}

void sub_215DCFA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215DCFA34(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = (std::__shared_weak_count *)a1[1];
  if (v1
    && (atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
    if (v2)
    {
LABEL_4:
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
      sub_215DD0FA4((int)theArray, Mutable, 0);
    }
  }
  else if (v2)
  {
    goto LABEL_4;
  }
}

void sub_215DCFD50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215DCFD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12 && !atomic_fetch_add(&a12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
    std::__shared_weak_count::__release_weak(a12);
  }
  if (a14)
  {
    if (!atomic_fetch_add(&a14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215DCFE08(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 24) + 1;
  *(void *)(a1 + 24) = v3;
  IOSurfaceLockOptions v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      if (v3 && !*(void *)(a1 + 32))
      {
LABEL_5:
        uint64_t v5 = v2;
        goto LABEL_7;
      }
    }
    else if (v4 != 2 || *(void *)(a1 + 32))
    {
      goto LABEL_5;
    }
    IOSurfaceUnlock(*(IOSurfaceRef *)a1, v4, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = 0;
  }
  if (*(void *)(a1 + 32))
  {
    IOSurfaceLockOptions v6 = 2;
  }
  else
  {
    if (!*(void *)(a1 + 24)) {
      goto LABEL_5;
    }
    IOSurfaceLockOptions v6 = 1;
  }
  IOSurfaceLock(*(IOSurfaceRef *)a1, v6, (uint32_t *)(a1 + 20));
  *(_DWORD *)(a1 + 16) = v6;
  uint64_t v5 = v2;

LABEL_7:
  std::mutex::unlock(v5);
}

void sub_215DCFEF0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_215DCFF04(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_215DCFF18(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32) + 1;
  *(void *)(a1 + 32) = v3;
  IOSurfaceLockOptions v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      if (*(void *)(a1 + 24) && !v3) {
        goto LABEL_7;
      }
    }
    else if (v4 != 2 || v3 != 0)
    {
      goto LABEL_7;
    }
    IOSurfaceUnlock(*(IOSurfaceRef *)a1, v4, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = 0;
    uint64_t v3 = *(void *)(a1 + 32);
  }
  if (v3)
  {
    IOSurfaceLockOptions v7 = 2;
    goto LABEL_17;
  }
  if (!*(void *)(a1 + 24))
  {
LABEL_7:
    IOSurfaceLockOptions v6 = v2;
    goto LABEL_9;
  }
  IOSurfaceLockOptions v7 = 1;
LABEL_17:
  IOSurfaceLock(*(IOSurfaceRef *)a1, v7, (uint32_t *)(a1 + 20));
  *(_DWORD *)(a1 + 16) = v7;
  IOSurfaceLockOptions v6 = v2;

LABEL_9:
  std::mutex::unlock(v6);
}

void sub_215DCFFFC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_215DD0010(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_215DD0024(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 24) - 1;
  *(void *)(a1 + 24) = v3;
  IOSurfaceLockOptions v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      if (v3 && !*(void *)(a1 + 32))
      {
LABEL_5:
        uint64_t v5 = v2;
        goto LABEL_7;
      }
    }
    else if (v4 != 2 || *(void *)(a1 + 32))
    {
      goto LABEL_5;
    }
    IOSurfaceUnlock(*(IOSurfaceRef *)a1, v4, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = 0;
  }
  if (*(void *)(a1 + 32))
  {
    IOSurfaceLockOptions v6 = 2;
  }
  else
  {
    if (!*(void *)(a1 + 24)) {
      goto LABEL_5;
    }
    IOSurfaceLockOptions v6 = 1;
  }
  IOSurfaceLock(*(IOSurfaceRef *)a1, v6, (uint32_t *)(a1 + 20));
  *(_DWORD *)(a1 + 16) = v6;
  uint64_t v5 = v2;

LABEL_7:
  std::mutex::unlock(v5);
}

void sub_215DD010C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_215DD0120(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_215DD0134(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32) - 1;
  *(void *)(a1 + 32) = v3;
  IOSurfaceLockOptions v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      if (*(void *)(a1 + 24) && !v3) {
        goto LABEL_7;
      }
    }
    else if (v4 != 2 || v3 != 0)
    {
      goto LABEL_7;
    }
    IOSurfaceUnlock(*(IOSurfaceRef *)a1, v4, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = 0;
    uint64_t v3 = *(void *)(a1 + 32);
  }
  if (v3)
  {
    IOSurfaceLockOptions v7 = 2;
    goto LABEL_17;
  }
  if (!*(void *)(a1 + 24))
  {
LABEL_7:
    IOSurfaceLockOptions v6 = v2;
    goto LABEL_9;
  }
  IOSurfaceLockOptions v7 = 1;
LABEL_17:
  IOSurfaceLock(*(IOSurfaceRef *)a1, v7, (uint32_t *)(a1 + 20));
  *(_DWORD *)(a1 + 16) = v7;
  IOSurfaceLockOptions v6 = v2;

LABEL_9:
  std::mutex::unlock(v6);
}

void sub_215DD0218(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_215DD022C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_215DD0240(int a1, CFTypeRef cf, int a3)
{
  if (a3) {
    sub_215DD0574(&v3, cf);
  }
  CFTypeRef v3 = cf;
  operator new();
}

void sub_215DD034C(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215DD0364(_Unwind_Exception *a1)
{
}

void sub_215DD0378(uint64_t a1@<X0>, int a2@<W8>)
{
  CFBundleRef v5 = *(CFBundleRef *)a1;
  IOSurfaceLockOptions v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4
    && (atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5) {
      goto LABEL_7;
    }
  }
  else if (v5)
  {
    goto LABEL_7;
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/src/BundleRef.cpp", 54, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_7:
  CFURLRef v6 = CFBundleCopyExecutableURL(*(CFBundleRef *)a1);

  sub_215DD9E44(a2, v6, 0);
}

void sub_215DD0460(void *a1@<X8>)
{
  sub_215E0DB50((uint64_t)__p);
  if (v4) {
    sub_215DD9F7C((uint64_t)&bundleURL, (uint64_t)__p);
  }
  *a1 = 0;
  a1[1] = 0;
}

void sub_215DD0540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17)
  {
    if (a16 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215DD0574(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  operator new();
}

void sub_215DD05E8(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215DD0600(_Unwind_Exception *a1)
{
}

void sub_215DD0618(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215DD0650(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t sub_215DD0674(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP10__CFBundleEC1ES4_EUlS4_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP10__CFBundleEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP10__CFBundleEC1ES4_EUlS4_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP10__CFBundleEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void sub_215DD06E8(int *a1)
{
  uint64_t valuePtr = *a1;
  CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberNSIntegerType, &valuePtr);
  operator new();
}

void sub_215DD07DC(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215DD07F4(_Unwind_Exception *a1)
{
}

void sub_215DD0808(unsigned int *a1)
{
  uint64_t valuePtr = *a1;
  CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberNSIntegerType, &valuePtr);
  operator new();
}

void sub_215DD08FC(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215DD0914(_Unwind_Exception *a1)
{
}

void sub_215DD0928(uint64_t *a1)
{
  uint64_t valuePtr = *a1;
  CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberNSIntegerType, &valuePtr);
  operator new();
}

void sub_215DD0A1C(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215DD0A34(_Unwind_Exception *a1)
{
}

void sub_215DD0A48()
{
}

void sub_215DD0B38(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215DD0B50(_Unwind_Exception *a1)
{
}

void sub_215DD0B64(uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  if (v1 >= 0) {
    uint64_t v2 = (const UInt8 *)a1;
  }
  else {
    uint64_t v2 = *(const UInt8 **)a1;
  }
  if (v1 >= 0) {
    CFIndex v3 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    CFIndex v3 = *(void *)(a1 + 8);
  }
  CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x263EFFB08], v2, v3, 0x8000100u, 0);
  operator new();
}

void sub_215DD0C70(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215DD0C88(_Unwind_Exception *a1)
{
}

CFIndex sub_215DD0C9C@<X0>(CFIndex result@<X0>, std::string *a2@<X8>)
{
  if (!result) {
    goto LABEL_9;
  }
  CFStringRef v3 = (const __CFString *)result;
  CFTypeID TypeID = CFStringGetTypeID();
  uint64_t result = CFGetTypeID(v3);
  if (result != TypeID) {
    goto LABEL_9;
  }
  uint64_t result = CFStringGetLength(v3);
  if (result)
  {
    CFIndex v5 = result;
    CFIndex usedBufLen = 0;
    v10.location = 0;
    v10.length = result;
    uint64_t result = CFStringGetBytes(v3, v10, 0x8000100u, 0, 0, 0, 0, &usedBufLen);
    if (result > 0)
    {
      memset(&v8, 0, sizeof(v8));
      if (usedBufLen)
      {
        std::string::append(&v8, usedBufLen, 0);
        CFIndex v6 = usedBufLen;
        if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          IOSurfaceLockOptions v7 = &v8;
        }
        else {
          IOSurfaceLockOptions v7 = (std::string *)v8.__r_.__value_.__r.__words[0];
        }
      }
      else
      {
        CFIndex v6 = 0;
        IOSurfaceLockOptions v7 = &v8;
      }
      v11.location = 0;
      v11.length = v5;
      uint64_t result = CFStringGetBytes(v3, v11, 0x8000100u, 0, 0, (UInt8 *)v7, v6, 0);
      *a2 = v8;
      goto LABEL_13;
    }
LABEL_9:
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
    return result;
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
LABEL_13:
  a2[1].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

void sub_215DD0DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DD0E00(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215DD0E38(uint64_t a1)
{
  int v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t sub_215DD0E5C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK8__CFDataEC1ES5_EUlS5_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK8__CFDataEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK8__CFDataEC1ES5_EUlS5_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK8__CFDataEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void sub_215DD0ED4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215DD0F0C(uint64_t a1)
{
  int v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t sub_215DD0F30(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK11__CFBooleanEC1ES5_EUlS5_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK11__CFBooleanEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK11__CFBooleanEC1ES5_EUlS5_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK11__CFBooleanEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void sub_215DD0FA4(int a1, CFTypeRef cf, int a3)
{
  if (a3)
  {
    if (cf) {
      CFRetain(cf);
    }
    operator new();
  }
  operator new();
}

void sub_215DD10A0(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215DD10B4()
{
}

void sub_215DD10E0()
{
}

void sub_215DD10F4(int a1, CFTypeRef cf, int a3)
{
  if (a3) {
    sub_215B60FE8(&v3, cf);
  }
  CFTypeRef v3 = cf;
  operator new();
}

void sub_215DD1200(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215DD1218(_Unwind_Exception *a1)
{
}

void sub_215DD1230(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215DD1268(uint64_t a1)
{
  int v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t sub_215DD128C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP9__CFArrayEC1ES4_EUlS4_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP9__CFArrayEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP9__CFArrayEC1ES4_EUlS4_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP9__CFArrayEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void sub_215DD1300(int a1, CFTypeRef cf, int a3)
{
  if (a3) {
    sub_215DD16F0(&v3, cf);
  }
  CFTypeRef v3 = cf;
  operator new();
}

void sub_215DD140C(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215DD1424(_Unwind_Exception *a1)
{
}

void sub_215DD1438(uint64_t a1)
{
  int v1 = *(const void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  sub_215DD16F0(&v3, v1);
}

void sub_215DD1538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215DD154C(CFDataRef *a1)
{
  LODWORD(result) = CFDataGetLength(*a1);
  if ((result & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C686698;
    __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

void sub_215DD15B0(const UInt8 *a1, CFIndex a2)
{
  Defaulint t = CFAllocatorGetDefault();
  CFDataRef v5 = CFDataCreateWithBytesNoCopy(Default, a1, a2, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  operator new();
}

void sub_215DD16B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215DD16C4(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215DD16DC(_Unwind_Exception *a1)
{
}

void sub_215DD16F0(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  operator new();
}

void sub_215DD1764(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215DD177C(_Unwind_Exception *a1)
{
}

void sub_215DD1790(void **a1, uint64_t *a2, void **a3, uint64_t *a4, const __CFAllocator *a5, const CFDictionaryKeyCallBacks *a6, const CFDictionaryValueCallBacks *a7)
{
  int v13 = a1;
  if (a1 != a3
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/src/DictionaryRef.cpp", 99, (uint64_t)"keys.size() == values.size()", 28, (uint64_t)"Number of keys must match number of values", 42, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  values = 0;
  unsigned __int8 v20 = 0;
  uint64_t v21 = 0;
  if (v13)
  {
    if ((unint64_t)v13 >> 61) {
      sub_215738AC0();
    }
    values = (void **)operator new(8 * (void)v13);
    unsigned __int8 v20 = values;
    uint64_t v21 = &values[(void)v13];
    p_values = &values;
    uint64_t v14 = 16 * (void)v13;
    do
    {
      uint64_t v22 = *a2;
      sub_215DD34B0((void ***)&p_values, &v22);
      a2 += 2;
      v14 -= 16;
    }
    while (v14);
    uint64_t v15 = values;
    int v13 = v20;
    values = 0;
    unsigned __int8 v20 = 0;
    uint64_t v21 = 0;
    if (a3) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v15 = 0;
    values = 0;
    unsigned __int8 v20 = 0;
    uint64_t v21 = 0;
    if (a3)
    {
LABEL_8:
      if ((unint64_t)a3 >> 61) {
        sub_215738AC0();
      }
      values = (void **)operator new(8 * (void)a3);
      unsigned __int8 v20 = values;
      uint64_t v21 = &values[(void)a3];
      p_values = &values;
      uint64_t v16 = 16 * (void)a3;
      do
      {
        uint64_t v22 = *a4;
        sub_215DD34B0((void ***)&p_values, &v22);
        a4 += 2;
        v16 -= 16;
      }
      while (v16);
      uint64_t v17 = values;
LABEL_14:
      CFDictionaryRef v18 = CFDictionaryCreate(a5, (const void **)v15, (const void **)v17, v13 - v15, a6, a7);
      sub_215DD1B28((int)&values, v18, 0);
    }
  }
  uint64_t v17 = 0;
  goto LABEL_14;
}

void sub_215DD1A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void **sub_215DD1A58(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    char v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        while (1)
        {
          CFDataRef v5 = (std::__shared_weak_count *)*((void *)v3 - 1);
          if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
          if (*(v3 - 17) < 0) {
            break;
          }
          v3 -= 40;
          if (v3 == v2) {
            goto LABEL_10;
          }
        }
        operator delete(*((void **)v3 - 5));
        v3 -= 40;
      }
      while (v3 != v2);
LABEL_10:
      char v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_215DD1B28(int a1, CFTypeRef cf, int a3)
{
  if (a3) {
    sub_21575FD94(&v3, cf);
  }
  CFTypeRef v3 = cf;
  operator new();
}

void sub_215DD1C34(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215DD1C4C(_Unwind_Exception *a1)
{
}

void sub_215DD1C60(uint64_t a1, void **a2, unsigned __int8 a3, void **a4, unsigned __int8 a5)
{
  CFDictionaryRef v11 = *(CFDictionaryRef *)a1;
  CFRange v10 = *(std::__shared_weak_count **)(a1 + 8);
  if (v10
    && (atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v11) {
      return;
    }
  }
  else if (!v11)
  {
    return;
  }
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  std::string __p = 0;
  uint64_t v40 = 0;
  uint64_t v12 = a3;
  uint64_t v41 = 0;
  if (a3) {
    int v13 = &v42;
  }
  else {
    int v13 = 0;
  }
  uint64_t v14 = a5;
  if (a5) {
    p_p = &__p;
  }
  else {
    p_p = 0;
  }
  CFDictionaryRef v17 = *(CFDictionaryRef *)a1;
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 8);
  if (v16
    && (atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (v17) {
      goto LABEL_13;
    }
  }
  else if (v17)
  {
LABEL_13:
    Counint t = *(void *)a1;
    CFDictionaryRef v18 = *(std::__shared_weak_count **)(a1 + 8);
    if (v18
      && (atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!Count) {
        goto LABEL_17;
      }
    }
    else if (!Count)
    {
LABEL_17:
      if (v12)
      {
        unsigned __int8 v20 = (const void **)*v13;
        unint64_t v21 = ((unsigned char *)v13[1] - (unsigned char *)*v13) >> 3;
        if (Count <= v21)
        {
          if (Count < v21) {
            v13[1] = &v20[Count];
          }
        }
        else
        {
          sub_215DD6D50(v13, Count - v21);
          unsigned __int8 v20 = (const void **)*v13;
        }
      }
      else
      {
        unsigned __int8 v20 = 0;
      }
      if (v14)
      {
        uint64_t v22 = (const void **)*p_p;
        unint64_t v23 = ((unsigned char *)p_p[1] - (unsigned char *)*p_p) >> 3;
        if (Count <= v23)
        {
          if (Count < v23) {
            p_p[1] = &v22[Count];
          }
        }
        else
        {
          sub_215DD6D50(p_p, Count - v23);
          uint64_t v22 = (const void **)*p_p;
        }
      }
      else
      {
        uint64_t v22 = 0;
      }
      CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, v20, v22);
      goto LABEL_34;
    }
    Counint t = CFDictionaryGetCount(*(CFDictionaryRef *)a1);
    goto LABEL_17;
  }
LABEL_34:
  if (v12)
  {
    unsigned int v46 = 0;
    __n128 v45 = 0uLL;
    sub_215D2C9E4((uint64_t)&v45, (v43 - (unsigned char *)v42) >> 3);
    if (v42 != v43) {
      sub_215A2E08C(&v47, *(CFTypeRef *)v42);
    }
    __n128 v24 = v45;
    uint64_t v25 = v46;
    BOOL v26 = (char *)*a2;
    if (*a2)
    {
      __n128 v37 = v45;
      unsigned __int8 v27 = (char *)a2[1];
      uint64_t v28 = *a2;
      if (v27 != v26)
      {
        do
        {
          uint64_t v29 = (std::__shared_weak_count *)*((void *)v27 - 1);
          if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, __n128))v29->__on_zero_shared)(v29, v24);
            std::__shared_weak_count::__release_weak(v29);
          }
          v27 -= 16;
        }
        while (v27 != v26);
        uint64_t v28 = *a2;
      }
      a2[1] = v26;
      operator delete(v28);
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      __n128 v24 = v37;
    }
    *(__n128 *)a2 = v24;
    a2[2] = v25;
  }
  uint64_t v30 = __p;
  if (v14)
  {
    unsigned int v46 = 0;
    __n128 v45 = 0uLL;
    sub_215D2C9E4((uint64_t)&v45, (v40 - (unsigned char *)__p) >> 3);
    if (__p != v40) {
      sub_215A2E08C(&v47, *(CFTypeRef *)__p);
    }
    __n128 v31 = v45;
    unsigned __int8 v32 = v46;
    uint64_t v33 = (char *)*a4;
    if (*a4)
    {
      __n128 v38 = v45;
      uint64_t v34 = (char *)a4[1];
      uint64_t v35 = *a4;
      if (v34 != v33)
      {
        do
        {
          uint64_t v36 = (std::__shared_weak_count *)*((void *)v34 - 1);
          if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, __n128))v36->__on_zero_shared)(v36, v31);
            std::__shared_weak_count::__release_weak(v36);
          }
          v34 -= 16;
        }
        while (v34 != v33);
        uint64_t v35 = *a4;
      }
      a4[1] = v33;
      operator delete(v35);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      __n128 v31 = v38;
    }
    *(__n128 *)a4 = v31;
    a4[2] = v32;
    uint64_t v30 = __p;
  }
  if (v30)
  {
    uint64_t v40 = v30;
    operator delete(v30);
  }
  if (v42)
  {
    uint64_t v43 = v42;
    operator delete(v42);
  }
}

void sub_215DD2160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_2157361F0(&a17);
  if (__p)
  {
    operator delete(__p);
    unint64_t v23 = a14;
    if (!a14) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    unint64_t v23 = a14;
    if (!a14) {
      goto LABEL_3;
    }
  }
  operator delete(v23);
  _Unwind_Resume(a1);
}

void sub_215DD220C(uint64_t a1)
{
  uint64_t v2 = **(void **)(a1 + 24) + 24 * *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != v2)
  {
    char v4 = *(unsigned char *)(v2 + 23);
    if (*(char *)(v3 + 23) < 0)
    {
      if (v4 >= 0) {
        CFIndex v6 = (void *)v2;
      }
      else {
        CFIndex v6 = *(void **)v2;
      }
      if (v4 >= 0) {
        size_t v7 = *(unsigned __int8 *)(v2 + 23);
      }
      else {
        size_t v7 = *(void *)(v2 + 8);
      }
      sub_21573ABD0((void **)v3, v6, v7);
    }
    else if ((*(unsigned char *)(v2 + 23) & 0x80) != 0)
    {
      sub_21573AB08((void *)v3, *(void **)v2, *(void *)(v2 + 8));
    }
    else
    {
      long long v5 = *(_OWORD *)v2;
      *(void *)(v3 + 16) = *(void *)(v2 + 16);
      *(_OWORD *)uint64_t v3 = v5;
    }
  }
  sub_215A345F8((uint64_t)&v8, *(void *)(*(void *)(a1 + 24) + 24) + 16 * *(void *)(a1 + 8));
}

uint64_t sub_215DD2384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v13[0] = a2;
  v13[1] = a3;
  std::string __p = 0;
  CFDictionaryRef v11 = 0;
  uint64_t v12 = 0;
  sub_215DD1C60(a1, 0, 0, &__p, 1u);
  uint64_t v3 = (char *)__p;
  char v4 = v11;
  if (__p == v11)
  {
    uint64_t v5 = 1;
    if (!__p) {
      return v5;
    }
    goto LABEL_10;
  }
  uint64_t v5 = 1;
  while (1)
  {
    uint64_t v14 = v13;
    if (!sub_215DD6F04(&v14, (uint64_t)v3)) {
      break;
    }
    v3 += 16;
    if (v3 == v4) {
      goto LABEL_9;
    }
  }
  uint64_t v5 = 0;
LABEL_9:
  uint64_t v3 = (char *)__p;
  if (__p)
  {
LABEL_10:
    CFIndex v6 = v11;
    size_t v7 = v3;
    if (v11 != v3)
    {
      do
      {
        long long v8 = (std::__shared_weak_count *)*((void *)v6 - 1);
        if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        v6 -= 16;
      }
      while (v6 != v3);
      size_t v7 = __p;
    }
    CFDictionaryRef v11 = v3;
    operator delete(v7);
  }
  return v5;
}

void sub_215DD24BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_215DD24D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_215DD24E4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)float32x4_t v87 = a1;
  *(_OWORD *)&v87[8] = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  if (!a1) {
    goto LABEL_120;
  }
  CFDictionaryRef v4 = *(CFDictionaryRef *)a1;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5
    && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v4) {
      goto LABEL_28;
    }
  }
  else if (!v4)
  {
LABEL_28:
    *(void *)float32x4_t v87 = 0;
    goto LABEL_120;
  }
  if (!CFDictionaryGetCount(*(CFDictionaryRef *)a1)) {
    goto LABEL_28;
  }
  CFIndex v6 = (char *)operator new(0x48uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)CFIndex v6 = &unk_26C684C20;
  *(_OWORD *)(v6 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  size_t v7 = (std::__shared_weak_count *)*((void *)&v88 + 1);
  *(void *)&long long v88 = v6 + 24;
  *((void *)&v88 + 1) = v6;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  long long v8 = (char *)operator new(0x40uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)long long v8 = &unk_26C684BD0;
  *(_OWORD *)(v8 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0u;
  *((void *)v8 + 7) = 0;
  *(_OWORD *)(v8 + 24) = 0u;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v89 + 1);
  *(void *)&long long v89 = v8 + 24;
  *((void *)&v89 + 1) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  int v97 = 0;
  int v98 = 0;
  uint64_t v99 = 0;
  char v94 = 0;
  unint64_t v95 = 0;
  uint64_t v96 = 0;
  sub_215DD1C60(a1, (void **)&v97, 1u, (void **)&v94, 1u);
  CFRange v10 = v97;
  if (v97 == v98)
  {
    *(void *)float32x4_t v87 = 0;
    unint64_t v21 = v94;
    if (!v94) {
      goto LABEL_79;
    }
  }
  else
  {
    sub_215DD3628(&__p, (uint64_t *)&v97);
    unint64_t v101 = 0;
    long long v100 = 0uLL;
    sub_215742B04((uint64_t)&v100, ((char *)v93 - (unsigned char *)__p) >> 4);
    CFDictionaryRef v11 = (CFIndex *)__p;
    uint64_t v12 = v93;
    if (__p != v93)
    {
      do
      {
        while (1)
        {
          while (1)
          {
            sub_215DD0C9C(*v11, (std::string *)&v83);
            __n128 v102 = v83;
            unint64_t v103 = v84;
            uint64_t v14 = (__n128 *)*((void *)&v100 + 1);
            if (*((void *)&v100 + 1) >= v101) {
              break;
            }
            __n128 v13 = v102;
            *(void *)(*((void *)&v100 + 1) + 16) = v103;
            __n128 *v14 = v13;
            *((void *)&v100 + 1) = (char *)v14 + 24;
            v11 += 2;
            if (v11 == v12) {
              goto LABEL_21;
            }
          }
          *((void *)&v100 + 1) = sub_21573AD18((void **)&v100, (uint64_t)&v102);
          if (SHIBYTE(v103) < 0) {
            break;
          }
          v11 += 2;
          if (v11 == v12) {
            goto LABEL_21;
          }
        }
        operator delete((void *)v102.n128_u64[0]);
        v11 += 2;
      }
      while (v11 != v12);
    }
LABEL_21:
    long long v15 = v100;
    unint64_t v16 = v101;
    uint64_t v17 = v88;
    uint64_t v18 = *(void *)v88;
    if (*(void *)v88)
    {
      long long v82 = v100;
      uint64_t v19 = *(void *)(v88 + 8);
      unsigned __int8 v20 = *(void **)v88;
      if (v19 != v18)
      {
        do
        {
          if (*(char *)(v19 - 1) < 0) {
            operator delete(*(void **)(v19 - 24));
          }
          v19 -= 24;
        }
        while (v19 != v18);
        unsigned __int8 v20 = *(void **)v17;
      }
      *(void *)(v17 + 8) = v18;
      operator delete(v20);
      *(void *)uint64_t v17 = 0;
      *(void *)(v17 + 8) = 0;
      *(void *)(v17 + 16) = 0;
      long long v15 = v82;
    }
    *(_OWORD *)uint64_t v17 = v15;
    *(void *)(v17 + 16) = v16;
    uint64_t v22 = (CFIndex *)__p;
    if (__p)
    {
      unint64_t v23 = v93;
      __n128 v24 = __p;
      if (v93 != __p)
      {
        do
        {
          uint64_t v25 = (std::__shared_weak_count *)*(v23 - 1);
          if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
          v23 -= 2;
        }
        while (v23 != v22);
        __n128 v24 = __p;
      }
      uint64_t v93 = v22;
      operator delete(v24);
    }
    sub_215DD3628(&v90, (uint64_t *)&v94);
    *(void *)&long long v84 = 0;
    __n128 v83 = 0uLL;
    sub_215A3434C((uint64_t)&v83, ((char *)v91 - (unsigned char *)v90) >> 4);
    BOOL v26 = (unint64_t *)v90;
    unsigned __int8 v27 = v91;
    if (v90 != v91)
    {
      do
      {
        unint64_t v28 = *v26;
        unint64_t v29 = v26[1];
        v102.n128_u64[0] = *v26;
        v102.n128_u64[1] = v29;
        if (v29) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v30 = v83.n128_u64[1];
        if (v83.n128_u64[1] < (unint64_t)v84)
        {
          *(void *)v83.n128_u64[1] = v28;
          *(void *)(v30 + 8) = v102.n128_u64[1];
          v83.n128_u64[1] = v30 + 16;
        }
        else
        {
          __n128 v31 = sub_215A3471C((char **)&v83, (uint64_t)&v102);
          unsigned __int8 v32 = (std::__shared_weak_count *)v102.n128_u64[1];
          v83.n128_u64[1] = (unint64_t)v31;
          if (v102.n128_u64[1]
            && !atomic_fetch_add((atomic_ullong *volatile)(v102.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v26 += 2;
      }
      while (v26 != v27);
    }
    __n128 v33 = v83;
    uint64_t v34 = v84;
    uint64_t v35 = v88;
    uint64_t v36 = v88 + 24;
    uint64_t v37 = *(void *)(v88 + 24);
    if (v37)
    {
      __n128 v81 = v83;
      uint64_t v38 = *(void *)(v88 + 32);
      unint64_t v39 = *(void **)(v88 + 24);
      if (v38 != v37)
      {
        do
        {
          uint64_t v40 = *(std::__shared_weak_count **)(v38 - 8);
          if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, __n128))v40->__on_zero_shared)(v40, v33);
            std::__shared_weak_count::__release_weak(v40);
          }
          v38 -= 16;
        }
        while (v38 != v37);
        unint64_t v39 = *(void **)v36;
      }
      *(void *)(v35 + 32) = v37;
      operator delete(v39);
      *(void *)uint64_t v36 = 0;
      *(void *)(v36 + 8) = 0;
      *(void *)(v36 + 16) = 0;
      __n128 v33 = v81;
    }
    *(__n128 *)(v35 + 24) = v33;
    *(void *)(v35 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v34;
    uint64_t v41 = (unint64_t *)v90;
    if (v90)
    {
      uint64_t v42 = v91;
      uint64_t v43 = v90;
      if (v91 != v90)
      {
        do
        {
          uint64_t v44 = (std::__shared_weak_count *)*(v42 - 1);
          if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
          v42 -= 2;
        }
        while (v42 != v41);
        uint64_t v43 = v90;
      }
      uint64_t v91 = v41;
      operator delete(v43);
    }
    CFRange v10 = v97;
    *(void *)&v87[16] = (v98 - v97) >> 4;
    unint64_t v21 = v94;
    if (!v94) {
      goto LABEL_79;
    }
  }
  __n128 v45 = v95;
  unsigned int v46 = v21;
  if (v95 != v21)
  {
    do
    {
      long long v47 = (std::__shared_weak_count *)*((void *)v45 - 1);
      if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
      v45 -= 16;
    }
    while (v45 != v21);
    unsigned int v46 = v94;
  }
  unint64_t v95 = v21;
  operator delete(v46);
  CFRange v10 = v97;
LABEL_79:
  if (v10)
  {
    uint64_t v48 = v98;
    unsigned int v49 = v10;
    if (v98 != v10)
    {
      do
      {
        uint64_t v50 = (std::__shared_weak_count *)*((void *)v48 - 1);
        if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
        v48 -= 16;
      }
      while (v48 != v10);
      unsigned int v49 = v97;
    }
    int v98 = v10;
    operator delete(v49);
  }
  if (*(void *)v87)
  {
    uint64_t v51 = *(void *)v88;
    uint64_t v52 = *(void *)(v88 + 8);
    uint64_t v53 = *(void *)(v88 + 24);
    unint64_t v103 = 0;
    __n128 v102 = 0uLL;
    if (v51 != v52)
    {
      if ((unint64_t)(0x5555555555555555 * ((v51 - v52) >> 3)) < 0x666666666666667)
      {
        v102.n128_u64[0] = (unint64_t)operator new(0x5555555555555548 * ((v51 - v52) >> 3));
        v102.n128_u64[1] = v102.n128_u64[0];
        unint64_t v103 = v102.n128_u64[0] + 0x5555555555555548 * ((v51 - v52) >> 3);
        *(void *)&long long v100 = v102.n128_u64[0];
        int v97 = (char *)v102.n128_u64[0];
        v83.n128_u64[0] = (unint64_t)&v103;
        v83.n128_u64[1] = (unint64_t)&v97;
        *(void *)&long long v84 = &v100;
        BYTE8(v84) = 0;
        uint64_t v54 = v51 + 24;
        std::string::size_type v55 = (_OWORD *)v102.n128_u64[0];
        if (*(char *)(v54 - 1) < 0)
        {
          sub_215738B0C(v102.n128_u64[0], *(void **)(v54 - 24), *(void *)(v54 - 16));
        }
        else
        {
          long long v56 = *(_OWORD *)(v54 - 24);
          *(void *)(v102.n128_u64[0] + 16) = *(void *)(v54 - 8);
          _OWORD *v55 = v56;
        }
        sub_215A345F8((uint64_t)v55 + 24, v53);
      }
      sub_215738AC0();
    }
    sub_215DD3834(0, 0, 0, 1);
    unint64_t v57 = v102.n128_u64[0];
    if (v102.n128_u64[0] != v102.n128_u64[1])
    {
      uint64_t v58 = *(void *)v88;
      if (v102.n128_u64[0] != *(void *)v88)
      {
        char v59 = *(unsigned char *)(v102.n128_u64[0] + 23);
        if (*(char *)(v58 + 23) < 0)
        {
          if (v59 >= 0) {
            unsigned __int8 v61 = (void *)v102.n128_u64[0];
          }
          else {
            unsigned __int8 v61 = *(void **)v102.n128_u64[0];
          }
          if (v59 >= 0) {
            size_t v62 = *(unsigned __int8 *)(v102.n128_u64[0] + 23);
          }
          else {
            size_t v62 = *(void *)(v102.n128_u64[0] + 8);
          }
          sub_21573ABD0((void **)v58, v61, v62);
        }
        else if ((*(unsigned char *)(v102.n128_u64[0] + 23) & 0x80) != 0)
        {
          sub_21573AB08((void *)v58, *(void **)v102.n128_u64[0], *(void *)(v102.n128_u64[0] + 8));
        }
        else
        {
          long long v60 = *(_OWORD *)v102.n128_u64[0];
          *(void *)(v58 + 16) = *(void *)(v102.n128_u64[0] + 16);
          *(_OWORD *)uint64_t v58 = v60;
        }
      }
      sub_215A345F8((uint64_t)&v83, v57 + 24);
    }
    if (v102.n128_u64[0])
    {
      uint64_t v63 = v102.n128_i64[1];
      int v64 = (void *)v102.n128_u64[0];
      if (v102.n128_u64[1] != v102.n128_u64[0])
      {
        do
        {
          while (1)
          {
            BOOL v65 = *(std::__shared_weak_count **)(v63 - 8);
            if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v65);
            }
            if (*(char *)(v63 - 17) < 0) {
              break;
            }
            v63 -= 40;
            if (v63 == v57) {
              goto LABEL_118;
            }
          }
          operator delete(*(void **)(v63 - 40));
          v63 -= 40;
        }
        while (v63 != v57);
LABEL_118:
        int v64 = (void *)v102.n128_u64[0];
      }
      v102.n128_u64[1] = v57;
      operator delete(v64);
    }
  }
LABEL_120:
  uint64_t v86 = 0;
  long long v84 = 0u;
  long long v85 = 0u;
  __n128 v83 = 0u;
  CFDictionaryRef v66 = *(CFDictionaryRef *)a1;
  unsigned int v67 = *(std::__shared_weak_count **)(a1 + 8);
  if (v67
    && (atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v67);
    if (v66)
    {
LABEL_123:
      Counint t = CFDictionaryGetCount(*(CFDictionaryRef *)a1);
      unint64_t v70 = v83.n128_u64[1];
      unint64_t v69 = v83.n128_u64[0];
      uint64_t v72 = *((void *)&v84 + 1);
      CFIndex v71 = v84;
      uint64_t v73 = v85;
      if (!(void)v85) {
        goto LABEL_125;
      }
      goto LABEL_124;
    }
  }
  else if (v66)
  {
    goto LABEL_123;
  }
  Counint t = 0;
  unint64_t v70 = v83.n128_u64[1];
  unint64_t v69 = v83.n128_u64[0];
  uint64_t v72 = *((void *)&v84 + 1);
  CFIndex v71 = v84;
  uint64_t v73 = v85;
  if ((void)v85) {
LABEL_124:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v73 + 8), 1uLL, memory_order_relaxed);
LABEL_125:
  uint64_t v74 = *((void *)&v85 + 1);
  int v75 = v86;
  if (v86) {
    atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v76 = v70 + Count;
  *(_OWORD *)a2 = *(_OWORD *)v87;
  if ((uint64_t)(v70 + Count) >= v71 || v76 <= -1) {
    unint64_t v69 = 0;
  }
  *(void *)(a2 + 16) = *(void *)&v87[16];
  *(_OWORD *)(a2 + 24) = v88;
  long long v88 = 0uLL;
  *(_OWORD *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v89;
  long long v89 = 0uLL;
  *(void *)(a2 + 56) = v69;
  *(void *)(a2 + 64) = v76;
  *(void *)(a2 + 72) = v71;
  *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v72;
  *(void *)(a2 + 88) = v73;
  *(void *)(a2 + 96) = v74;
  *(void *)(a2 + 104) = v75;
  if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
    std::__shared_weak_count::__release_weak(v75);
  }
  uint64_t v78 = (std::__shared_weak_count *)v85;
  if ((void)v85 && !atomic_fetch_add((atomic_ullong *volatile)(v85 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
    std::__shared_weak_count::__release_weak(v78);
  }
  int v79 = (std::__shared_weak_count *)*((void *)&v89 + 1);
  if (*((void *)&v89 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v89 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
    std::__shared_weak_count::__release_weak(v79);
  }
  uint64_t v80 = (std::__shared_weak_count *)*((void *)&v88 + 1);
  if (*((void *)&v88 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v88 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
    std::__shared_weak_count::__release_weak(v80);
  }
}

void sub_215DD3128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_215DD1A58((void **)(v32 - 112));
  sub_215D27C20((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void ***sub_215DD34B0(void ***a1, void *a2)
{
  CFDictionaryRef v4 = *a1;
  CFIndex v6 = (char *)(*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  size_t v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v9 = (char *)*v4;
    uint64_t v10 = v6 - (unsigned char *)*v4;
    uint64_t v11 = v10 >> 3;
    unint64_t v12 = (v10 >> 3) + 1;
    if (v12 >> 61) {
      sub_215738AC0();
    }
    uint64_t v13 = v5 - (void)v9;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        sub_215738AD8();
      }
      long long v15 = operator new(8 * v14);
    }
    else
    {
      long long v15 = 0;
    }
    unint64_t v16 = &v15[8 * v11];
    *unint64_t v16 = *a2;
    long long v8 = v16 + 1;
    if (v6 != v9)
    {
      unint64_t v17 = v6 - v9 - 8;
      if (v17 < 0x58) {
        goto LABEL_28;
      }
      if ((unint64_t)(v6 - v15 - v10) < 0x20) {
        goto LABEL_28;
      }
      uint64_t v18 = (v17 >> 3) + 1;
      uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      size_t v7 = &v6[-v19];
      unint64_t v16 = (void *)((char *)v16 - v19);
      unsigned __int8 v20 = &v15[8 * v11 - 16];
      unint64_t v21 = (long long *)(v6 - 16);
      uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        *unsigned __int8 v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          uint64_t v24 = *((void *)v7 - 1);
          v7 -= 8;
          *--unint64_t v16 = v24;
        }
        while (v7 != v9);
      }
      size_t v7 = (char *)*v4;
    }
    char *v4 = v16;
    v4[1] = v8;
    void v4[2] = &v15[8 * v14];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(void *)CFIndex v6 = *a2;
    long long v8 = v6 + 8;
  }
  v4[1] = v8;
  return a1;
}

void *sub_215DD3628(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    if (v5 < 0) {
      sub_215D2CB08();
    }
    CFIndex v6 = (char *)operator new(v4 - *a2);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[16 * (v5 >> 4)];
    do
    {
      uint64_t v8 = v3 + v7;
      uint64_t v9 = &v6[v7];
      uint64_t v10 = *(void *)(v3 + v7 + 8);
      *(void *)uint64_t v9 = *(void *)(v3 + v7);
      *((void *)v9 + 1) = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      v7 += 16;
    }
    while (v8 + 16 != v4);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_215DD36DC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (char *)*v1;
  if (*v1)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        CFIndex v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6)
        {
          if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      uint64_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215DD3768(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = *(uint64_t **)(a1 + 8);
    uint64_t v3 = *(uint64_t **)(a1 + 16);
    uint64_t v5 = *v3;
    for (uint64_t i = *v4; v5 != i; v5 -= 40)
    {
      while (1)
      {
        uint64_t v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        if (*(char *)(v5 - 17) < 0) {
          break;
        }
        v5 -= 40;
        if (v5 == i) {
          return a1;
        }
      }
      operator delete(*(void **)(v5 - 40));
    }
  }
  return a1;
}

void sub_215DD3834(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v362 = *MEMORY[0x263EF8340];
LABEL_2:
  long long v346 = (const void **)(a2 - 40);
  unint64_t v349 = a2;
  unsigned __int8 v340 = (const void **)(a2 - 120);
  int v341 = (const void **)(a2 - 80);
  unint64_t n = a1;
  while (1)
  {
    a1 = n;
    uint64_t v10 = a2 - n;
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - n) >> 3);
    if (v5 || !v4)
    {
      switch(v11)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v143 = a2 - 40;
          int v144 = *(char *)(a2 - 17);
          if (v144 >= 0) {
            uint64_t v145 = (const void *)(a2 - 40);
          }
          else {
            uint64_t v145 = *(const void **)(a2 - 40);
          }
          if (v144 >= 0) {
            size_t v146 = *(unsigned __int8 *)(a2 - 17);
          }
          else {
            size_t v146 = *(void *)(a2 - 32);
          }
          int v147 = *(char *)(a1 + 23);
          if (v147 >= 0) {
            long long v148 = (const void *)a1;
          }
          else {
            long long v148 = *(const void **)a1;
          }
          if (v147 >= 0) {
            size_t v149 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            size_t v149 = *(void *)(a1 + 8);
          }
          if (v149 >= v146) {
            size_t v150 = v146;
          }
          else {
            size_t v150 = v149;
          }
          int v151 = memcmp(v145, v148, v150);
          if (v151)
          {
            unint64_t v152 = v349;
            if ((v151 & 0x80000000) == 0) {
              return;
            }
          }
          else if (v146 == v149)
          {
            unint64_t v152 = v349;
            if (*(void *)(v349 - 16) >= *(void *)(a1 + 24)) {
              return;
            }
          }
          else
          {
            unint64_t v152 = v349;
            if (v146 >= v149) {
              return;
            }
          }
          long long v333 = *(_OWORD *)a1;
          uint64_t v358 = *(std::__shared_weak_count **)(a1 + 16);
          *(_OWORD *)std::string __p = v333;
          long long v334 = *(_OWORD *)v143;
          *(void *)(a1 + 16) = *(void *)(v143 + 16);
          *(_OWORD *)a1 = v334;
          long long v335 = *(_OWORD *)__p;
          *(void *)(v143 + 16) = v358;
          *(_OWORD *)unint64_t v143 = v335;
          long long v336 = *(_OWORD *)(a1 + 24);
          *(void *)(a1 + 24) = 0;
          *(void *)(a1 + 32) = 0;
          long long v337 = *(_OWORD *)(v152 - 16);
          *(void *)(v152 - 16) = 0;
          *(void *)(v152 - 8) = 0;
          uint64_t v338 = *(std::__shared_weak_count **)(a1 + 32);
          *(_OWORD *)(a1 + 24) = v337;
          if (v338 && !atomic_fetch_add(&v338->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            long long v356 = v336;
            ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
            std::__shared_weak_count::__release_weak(v338);
            long long v336 = v356;
          }
          uint64_t v339 = *(std::__shared_weak_count **)(v349 - 8);
          *(_OWORD *)(v349 - 16) = v336;
          if (v339 && !atomic_fetch_add(&v339->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
            std::__shared_weak_count::__release_weak(v339);
          }
          break;
        case 3uLL:
          sub_215DD5788((const void **)a1, (const void **)(a1 + 40), v346);
          return;
        case 4uLL:
          sub_215DD62A0((long long *)a1, (long long *)(a1 + 40), (long long *)(a1 + 80), v346);
          return;
        case 5uLL:
          sub_215DD66A4(a1, a1 + 40, a1 + 80, (long long *)(a1 + 120), v346);
          return;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v10 <= 959)
    {
      if ((a4 & 1) == 0)
      {
        if (a1 == a2) {
          return;
        }
        unint64_t v303 = a1 + 40;
        if (a1 + 40 == a2) {
          return;
        }
        for (uint64_t i = (std::__shared_weak_count **)(a1 + 72); ; i += 5)
        {
          unint64_t v305 = a1;
          a1 = v303;
          int v306 = *(char *)(v305 + 63);
          unsigned int v307 = v306 >= 0 ? (const void *)v303 : *(const void **)(v305 + 40);
          unint64_t v308 = v306 >= 0 ? *(unsigned __int8 *)(v305 + 63) : *(void *)(v305 + 48);
          int v309 = *(char *)(v305 + 23);
          uint64_t v310 = v309 >= 0 ? (const void *)v305 : *(const void **)v305;
          unint64_t v311 = v309 >= 0 ? *(unsigned __int8 *)(v305 + 23) : *(void *)(v305 + 8);
          size_t v312 = v311 >= v308 ? v308 : v311;
          int v313 = memcmp(v307, v310, v312);
          if (!v313) {
            break;
          }
          if (v313 < 0) {
            goto LABEL_666;
          }
LABEL_644:
          unint64_t v303 = a1 + 40;
          if (a1 + 40 == v349) {
            return;
          }
        }
        BOOL v314 = v308 >= v311;
        if (v308 == v311) {
          BOOL v314 = *(void *)(v305 + 64) >= *(void *)(v305 + 24);
        }
        if (v314) {
          goto LABEL_644;
        }
LABEL_666:
        long long v315 = *(_OWORD *)a1;
        uint64_t v358 = *(std::__shared_weak_count **)(a1 + 16);
        *(_OWORD *)std::string __p = v315;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        long long v359 = *(_OWORD *)(v305 + 64);
        *(void *)(v305 + 64) = 0;
        *(void *)(v305 + 72) = 0;
        for (uint64_t j = i; ; j -= 5)
        {
          uint64_t v317 = (void **)(j - 4);
          if (*((char *)j - 9) < 0) {
            operator delete(*v317);
          }
          uint64_t v318 = (void **)(j - 9);
          *(_OWORD *)uint64_t v317 = *(_OWORD *)(j - 9);
          *(j - 2) = *(j - 7);
          *((unsigned char *)j - 49) = 0;
          *((unsigned char *)j - 72) = 0;
          long long v319 = *((_OWORD *)j - 3);
          *(j - 6) = 0;
          *(j - 5) = 0;
          int v320 = *j;
          *(_OWORD *)(j - 1) = v319;
          if (v320 && !atomic_fetch_add(&v320->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
            std::__shared_weak_count::__release_weak(v320);
          }
          if (SHIBYTE(v358) >= 0) {
            unsigned int v321 = __p;
          }
          else {
            unsigned int v321 = (void **)__p[0];
          }
          if (SHIBYTE(v358) >= 0) {
            __int16 v322 = (void *)HIBYTE(v358);
          }
          else {
            __int16 v322 = __p[1];
          }
          int v323 = *((char *)j - 89);
          if (v323 >= 0) {
            uint64_t v324 = j - 14;
          }
          else {
            uint64_t v324 = (std::__shared_weak_count **)*(j - 14);
          }
          if (v323 >= 0) {
            size_t v325 = *((unsigned __int8 *)j - 89);
          }
          else {
            size_t v325 = (size_t)*(j - 13);
          }
          if (v325 >= (unint64_t)v322) {
            size_t v326 = (size_t)v322;
          }
          else {
            size_t v326 = v325;
          }
          int v327 = memcmp(v321, v324, v326);
          if (v327)
          {
            if ((v327 & 0x80000000) == 0) {
              goto LABEL_694;
            }
          }
          else
          {
            BOOL v328 = (unint64_t)v322 >= v325;
            if (v322 == (void *)v325) {
              BOOL v328 = (unint64_t)v359 >= (unint64_t)*(j - 11);
            }
            if (v328)
            {
LABEL_694:
              if (*((char *)j - 49) < 0) {
                operator delete(*v318);
              }
              long long v329 = *(_OWORD *)__p;
              *(j - 7) = v358;
              *(_OWORD *)uint64_t v318 = v329;
              HIBYTE(v358) = 0;
              LOBYTE(__p[0]) = 0;
              long long v330 = v359;
              long long v359 = 0uLL;
              uint64_t v331 = *(j - 5);
              *((_OWORD *)j - 3) = v330;
              if (v331 && !atomic_fetch_add(&v331->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
                std::__shared_weak_count::__release_weak(v331);
              }
              __int16 v332 = (std::__shared_weak_count *)*((void *)&v359 + 1);
              if (*((void *)&v359 + 1)
                && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v359 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
                std::__shared_weak_count::__release_weak(v332);
              }
              if (SHIBYTE(v358) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_644;
            }
          }
        }
      }
      if (a1 == a2) {
        return;
      }
      long long v153 = (const void *)(a1 + 40);
      if (a1 + 40 == a2) {
        return;
      }
      uint64_t v154 = 0;
      unint64_t v155 = a1;
LABEL_350:
      uint64_t v156 = (const void **)v155;
      unint64_t v155 = (unint64_t)v153;
      int v157 = *((char *)v156 + 63);
      if (v157 >= 0) {
        int v158 = v153;
      }
      else {
        int v158 = v156[5];
      }
      if (v157 >= 0) {
        size_t v159 = *((unsigned __int8 *)v156 + 63);
      }
      else {
        size_t v159 = (size_t)v156[6];
      }
      int v160 = *((char *)v156 + 23);
      if (v160 >= 0) {
        int v161 = v156;
      }
      else {
        int v161 = *v156;
      }
      if (v160 >= 0) {
        size_t v162 = *((unsigned __int8 *)v156 + 23);
      }
      else {
        size_t v162 = (size_t)v156[1];
      }
      if (v162 >= v159) {
        size_t v163 = v159;
      }
      else {
        size_t v163 = v162;
      }
      int v164 = memcmp(v158, v161, v163);
      if (v164)
      {
        if ((v164 & 0x80000000) == 0) {
          goto LABEL_349;
        }
      }
      else
      {
        BOOL v165 = v159 >= v162;
        if (v159 == v162) {
          BOOL v165 = v156[8] >= v156[3];
        }
        if (v165) {
          goto LABEL_349;
        }
      }
      long long v166 = *(_OWORD *)v155;
      uint64_t v358 = *(std::__shared_weak_count **)(v155 + 16);
      *(_OWORD *)std::string __p = v166;
      *(void *)(v155 + 8) = 0;
      *(void *)(v155 + 16) = 0;
      *(void *)unint64_t v155 = 0;
      long long v359 = *((_OWORD *)v156 + 4);
      v156[8] = 0;
      v156[9] = 0;
      for (uint64_t k = v154; ; k -= 40)
      {
        uint64_t v168 = a1 + k;
        uint64_t v169 = (void **)(a1 + k + 40);
        if (*(char *)(a1 + k + 63) < 0) {
          operator delete(*v169);
        }
        *(_OWORD *)uint64_t v169 = *(_OWORD *)v168;
        *(void *)(a1 + k + 56) = *(void *)(v168 + 16);
        *(unsigned char *)(v168 + 23) = 0;
        *(unsigned char *)uint64_t v168 = 0;
        long long v170 = *(_OWORD *)(v168 + 24);
        *(void *)(v168 + 24) = 0;
        *(void *)(v168 + 32) = 0;
        uint64_t v171 = *(std::__shared_weak_count **)(v168 + 72);
        *(_OWORD *)(v168 + 64) = v170;
        if (v171 && !atomic_fetch_add(&v171->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
          std::__shared_weak_count::__release_weak(v171);
        }
        if (!k)
        {
          unint64_t v184 = a1;
          if (*(char *)(a1 + 23) < 0) {
            goto LABEL_401;
          }
          goto LABEL_402;
        }
        uint64_t v172 = a1 + k;
        if (SHIBYTE(v358) >= 0) {
          long long v173 = __p;
        }
        else {
          long long v173 = (void **)__p[0];
        }
        if (SHIBYTE(v358) >= 0) {
          uint64_t v174 = (void *)HIBYTE(v358);
        }
        else {
          uint64_t v174 = __p[1];
        }
        long long v177 = *(const void **)(v172 - 40);
        uint64_t v175 = v172 - 40;
        uint64_t v176 = v177;
        int v178 = *(char *)(v175 + 23);
        if (v178 >= 0) {
          uint64_t v179 = (const void *)v175;
        }
        else {
          uint64_t v179 = v176;
        }
        if (v178 >= 0) {
          size_t v180 = *(unsigned __int8 *)(v175 + 23);
        }
        else {
          size_t v180 = *(void *)(v175 + 8);
        }
        if (v180 >= (unint64_t)v174) {
          size_t v181 = (size_t)v174;
        }
        else {
          size_t v181 = v180;
        }
        int v182 = memcmp(v173, v179, v181);
        if (v182)
        {
          if ((v182 & 0x80000000) == 0) {
            goto LABEL_408;
          }
        }
        else
        {
          BOOL v183 = (unint64_t)v174 >= v180;
          if (v174 == (void *)v180) {
            BOOL v183 = (unint64_t)v359 >= *(void *)(a1 + k - 16);
          }
          if (v183)
          {
LABEL_408:
            unint64_t v184 = a1 + k;
            if (*(char *)(a1 + k + 23) < 0) {
LABEL_401:
            }
              operator delete(*(void **)v184);
LABEL_402:
            long long v185 = *(_OWORD *)__p;
            *(void *)(v184 + 16) = v358;
            *(_OWORD *)unint64_t v184 = v185;
            HIBYTE(v358) = 0;
            LOBYTE(__p[0]) = 0;
            long long v186 = v359;
            long long v359 = 0uLL;
            *(void *)(a1 + k + 24) = v186;
            uint64_t v187 = *(std::__shared_weak_count **)(v184 + 32);
            *(void *)(v184 + 32) = *((void *)&v186 + 1);
            if (v187 && !atomic_fetch_add(&v187->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
              std::__shared_weak_count::__release_weak(v187);
            }
            uint64_t v188 = (std::__shared_weak_count *)*((void *)&v359 + 1);
            if (*((void *)&v359 + 1)
              && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v359 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
              std::__shared_weak_count::__release_weak(v188);
            }
            if (SHIBYTE(v358) < 0) {
              operator delete(__p[0]);
            }
LABEL_349:
            long long v153 = (const void *)(v155 + 40);
            v154 += 40;
            if (v155 + 40 == v349) {
              return;
            }
            goto LABEL_350;
          }
        }
      }
    }
    if (!a3) {
      break;
    }
    unint64_t v12 = v11 >> 1;
    unint64_t v13 = a1 + 40 * (v11 >> 1);
    if ((unint64_t)v10 < 0x1401)
    {
      sub_215DD5788((const void **)v13, (const void **)a1, v346);
      uint64_t v344 = a3 - 1;
      if (a4) {
        goto LABEL_40;
      }
    }
    else
    {
      sub_215DD5788((const void **)a1, (const void **)v13, v346);
      uint64_t v14 = 40 * v12;
      sub_215DD5788((const void **)(a1 + 40), (const void **)(v14 + a1 - 40), v341);
      sub_215DD5788((const void **)(a1 + 80), (const void **)(a1 + 40 + v14), v340);
      sub_215DD5788((const void **)(v14 + a1 - 40), (const void **)v13, (const void **)(a1 + 40 + v14));
      long long v15 = *(_OWORD *)a1;
      uint64_t v358 = *(std::__shared_weak_count **)(a1 + 16);
      *(_OWORD *)std::string __p = v15;
      uint64_t v16 = *(void *)(v13 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v13;
      long long v17 = *(_OWORD *)(a1 + 24);
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = 0;
      uint64_t v18 = v358;
      *(_OWORD *)unint64_t v13 = *(_OWORD *)__p;
      *(void *)(a1 + 32) = 0;
      long long v19 = *(_OWORD *)(v13 + 24);
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0;
      *(void *)(v13 + 16) = v18;
      unsigned __int8 v20 = *(std::__shared_weak_count **)(a1 + 32);
      *(_OWORD *)(a1 + 24) = v19;
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        long long v351 = v17;
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        long long v17 = v351;
      }
      unint64_t v21 = *(std::__shared_weak_count **)(v13 + 32);
      *(_OWORD *)(v13 + 24) = v17;
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
        uint64_t v344 = a3 - 1;
        if (a4) {
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v344 = a3 - 1;
        if (a4) {
          goto LABEL_40;
        }
      }
    }
    int v22 = *(char *)(a1 - 17);
    if (v22 >= 0) {
      long long v23 = (const void *)(a1 - 40);
    }
    else {
      long long v23 = *(const void **)(a1 - 40);
    }
    if (v22 >= 0) {
      size_t v24 = *(unsigned __int8 *)(a1 - 17);
    }
    else {
      size_t v24 = *(void *)(a1 - 32);
    }
    int v25 = *(char *)(a1 + 23);
    if (v25 >= 0) {
      BOOL v26 = (const void *)a1;
    }
    else {
      BOOL v26 = *(const void **)a1;
    }
    if (v25 >= 0) {
      size_t v27 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      size_t v27 = *(void *)(a1 + 8);
    }
    if (v27 >= v24) {
      size_t v28 = v24;
    }
    else {
      size_t v28 = v27;
    }
    int v29 = memcmp(v23, v26, v28);
    if (v29)
    {
      if ((v29 & 0x80000000) == 0) {
        goto LABEL_173;
      }
LABEL_40:
      uint64_t v30 = 0;
      long long v31 = *(_OWORD *)a1;
      uint64_t v358 = *(std::__shared_weak_count **)(a1 + 16);
      *(_OWORD *)std::string __p = v31;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      long long v32 = *(_OWORD *)(a1 + 24);
      long long v359 = v32;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      if (SHIBYTE(v358) >= 0) {
        __n128 v33 = __p;
      }
      else {
        __n128 v33 = (void **)__p[0];
      }
      if (SHIBYTE(v358) >= 0) {
        uint64_t v34 = (void *)HIBYTE(v358);
      }
      else {
        uint64_t v34 = __p[1];
      }
      unint64_t v35 = v32;
      while (1)
      {
        int v36 = *(char *)(a1 + v30 + 63);
        uint64_t v37 = v36 >= 0 ? (const void *)(a1 + v30 + 40) : *(const void **)(a1 + v30 + 40);
        uint64_t v38 = v36 >= 0 ? (void *)*(unsigned __int8 *)(a1 + v30 + 63) : *(void **)(a1 + v30 + 48);
        size_t v39 = (size_t)(v34 >= v38 ? v38 : v34);
        int v40 = memcmp(v37, v33, v39);
        if (!v40) {
          break;
        }
        if ((v40 & 0x80000000) == 0) {
          goto LABEL_63;
        }
LABEL_48:
        v30 += 40;
      }
      BOOL v41 = v38 >= v34;
      if (v38 == v34) {
        BOOL v41 = *(void *)(a1 + v30 + 64) >= v35;
      }
      if (!v41) {
        goto LABEL_48;
      }
LABEL_63:
      unint64_t v42 = a1 + v30 + 40;
      m = v346;
      if (v30)
      {
        while (1)
        {
          int v44 = *((char *)m + 23);
          if (v44 >= 0) {
            __n128 v45 = m;
          }
          else {
            __n128 v45 = *m;
          }
          if (v44 >= 0) {
            size_t v46 = *((unsigned __int8 *)m + 23);
          }
          else {
            size_t v46 = (size_t)m[1];
          }
          if ((unint64_t)v34 >= v46) {
            size_t v47 = v46;
          }
          else {
            size_t v47 = (size_t)v34;
          }
          int v48 = memcmp(v45, v33, v47);
          if (v48)
          {
            if (v48 < 0) {
              goto LABEL_103;
            }
          }
          else
          {
            BOOL v49 = v46 >= (unint64_t)v34;
            if ((void *)v46 == v34) {
              BOOL v49 = (unint64_t)m[3] >= v35;
            }
            if (!v49) {
              goto LABEL_103;
            }
          }
          m -= 5;
        }
      }
      m = (const void **)v349;
      if (v42 < v349)
      {
        for (m = v346; ; m -= 5)
        {
          int v50 = *((char *)m + 23);
          if (v50 >= 0) {
            uint64_t v51 = m;
          }
          else {
            uint64_t v51 = *m;
          }
          if (v50 >= 0) {
            size_t v52 = *((unsigned __int8 *)m + 23);
          }
          else {
            size_t v52 = (size_t)m[1];
          }
          if ((unint64_t)v34 >= v52) {
            size_t v53 = v52;
          }
          else {
            size_t v53 = (size_t)v34;
          }
          int v54 = memcmp(v51, v33, v53);
          if (v54)
          {
            if (v42 >= (unint64_t)m || v54 < 0) {
              break;
            }
          }
          else if ((void *)v52 == v34)
          {
            if (v42 >= (unint64_t)m || (unint64_t)m[3] < v35) {
              break;
            }
          }
          else if (v42 >= (unint64_t)m || v52 < (unint64_t)v34)
          {
            break;
          }
        }
      }
LABEL_103:
      unint64_t n = v42;
      if (v42 < (unint64_t)m)
      {
        unint64_t v55 = (unint64_t)m;
        do
        {
          long long v56 = *(_OWORD *)n;
          uint64_t v361 = *(void *)(n + 16);
          long long v360 = v56;
          long long v57 = *(_OWORD *)v55;
          *(void *)(n + 16) = *(void *)(v55 + 16);
          *(_OWORD *)unint64_t n = v57;
          long long v58 = v360;
          *(void *)(v55 + 16) = v361;
          *(_OWORD *)unint64_t v55 = v58;
          long long v59 = *(_OWORD *)(n + 24);
          *(void *)(n + 24) = 0;
          *(void *)(n + 32) = 0;
          long long v60 = *(_OWORD *)(v55 + 24);
          *(void *)(v55 + 24) = 0;
          *(void *)(v55 + 32) = 0;
          unsigned __int8 v61 = *(std::__shared_weak_count **)(n + 32);
          *(_OWORD *)(n + 24) = v60;
          if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            long long v352 = v59;
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
            size_t v62 = *(std::__shared_weak_count **)(v55 + 32);
            *(_OWORD *)(v55 + 24) = v352;
            if (v62)
            {
LABEL_109:
              if (!atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                std::__shared_weak_count::__release_weak(v62);
              }
            }
          }
          else
          {
            size_t v62 = *(std::__shared_weak_count **)(v55 + 32);
            *(_OWORD *)(v55 + 24) = v59;
            if (v62) {
              goto LABEL_109;
            }
          }
          if (SHIBYTE(v358) >= 0) {
            uint64_t v63 = __p;
          }
          else {
            uint64_t v63 = (void **)__p[0];
          }
          if (SHIBYTE(v358) >= 0) {
            int v64 = (void *)HIBYTE(v358);
          }
          else {
            int v64 = __p[1];
          }
          unint64_t v65 = v359;
          do
          {
            while (1)
            {
              while (1)
              {
                n += 40;
                int v66 = *(char *)(n + 23);
                unsigned int v67 = v66 >= 0 ? (const void *)n : *(const void **)n;
                int v68 = v66 >= 0 ? (void *)*(unsigned __int8 *)(n + 23) : *(void **)(n + 8);
                size_t v69 = (size_t)(v64 >= v68 ? v68 : v64);
                int v70 = memcmp(v67, v63, v69);
                if (!v70) {
                  break;
                }
                if ((v70 & 0x80000000) == 0) {
                  goto LABEL_136;
                }
              }
              if (v68 != v64) {
                break;
              }
              if (*(void *)(n + 24) >= v65) {
                goto LABEL_136;
              }
            }
          }
          while (v68 < v64);
          do
          {
            while (1)
            {
LABEL_136:
              while (1)
              {
                v55 -= 40;
                int v71 = *(char *)(v55 + 23);
                uint64_t v72 = v71 >= 0 ? (const void *)v55 : *(const void **)v55;
                uint64_t v73 = v71 >= 0 ? (void *)*(unsigned __int8 *)(v55 + 23) : *(void **)(v55 + 8);
                size_t v74 = (size_t)(v64 >= v73 ? v73 : v64);
                int v75 = memcmp(v72, v63, v74);
                if (!v75) {
                  break;
                }
                if (v75 < 0) {
                  goto LABEL_105;
                }
              }
              if (v73 != v64) {
                break;
              }
              if (*(void *)(v55 + 24) < v65) {
                goto LABEL_105;
              }
            }
          }
          while (v73 >= v64);
LABEL_105:
          ;
        }
        while (n < v55);
      }
      uint64_t v76 = (void **)(n - 40);
      if (n - 40 != a1)
      {
        if (*(char *)(a1 + 23) < 0) {
          operator delete(*(void **)a1);
        }
        long long v77 = *(_OWORD *)v76;
        *(void *)(a1 + 16) = *(void *)(n - 24);
        *(_OWORD *)a1 = v77;
        *(unsigned char *)(n - 17) = 0;
        *(unsigned char *)(n - 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
        long long v78 = *(_OWORD *)(n - 16);
        *(void *)(n - 16) = 0;
        *(void *)(n - 8) = 0;
        int v79 = *(std::__shared_weak_count **)(a1 + 32);
        *(_OWORD *)(a1 + 24) = v78;
        if (v79)
        {
          if (!atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
            if ((*(char *)(n - 17) & 0x80000000) == 0) {
              goto LABEL_158;
            }
LABEL_157:
            operator delete(*v76);
            goto LABEL_158;
          }
        }
      }
      if (*(char *)(n - 17) < 0) {
        goto LABEL_157;
      }
LABEL_158:
      long long v80 = *(_OWORD *)__p;
      *(void *)(n - 24) = v358;
      *(_OWORD *)uint64_t v76 = v80;
      HIBYTE(v358) = 0;
      LOBYTE(__p[0]) = 0;
      long long v81 = v359;
      long long v359 = 0uLL;
      long long v82 = *(std::__shared_weak_count **)(n - 8);
      *(_OWORD *)(n - 16) = v81;
      if (v82 && !atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
        __n128 v83 = (std::__shared_weak_count *)*((void *)&v359 + 1);
        if (!*((void *)&v359 + 1)) {
          goto LABEL_164;
        }
      }
      else
      {
        __n128 v83 = (std::__shared_weak_count *)*((void *)&v359 + 1);
        if (!*((void *)&v359 + 1)) {
          goto LABEL_164;
        }
      }
      if (!atomic_fetch_add(&v83->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
LABEL_164:
      if (SHIBYTE(v358) < 0) {
        operator delete(__p[0]);
      }
      BOOL v4 = v42 >= (unint64_t)m;
      a2 = v349;
      a3 = v344;
      if (!v4) {
        goto LABEL_170;
      }
      BOOL v84 = sub_215DD5D54(a1, n - 40);
      if (sub_215DD5D54(n, v349))
      {
        a2 = n - 40;
        if (v84) {
          return;
        }
        goto LABEL_2;
      }
      if (!v84)
      {
LABEL_170:
        sub_215DD3834(a1, n - 40, v344, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      if (v24 != v27)
      {
        if (v24 >= v27) {
          goto LABEL_173;
        }
        goto LABEL_40;
      }
      if (*(void *)(a1 - 16) < *(void *)(a1 + 24)) {
        goto LABEL_40;
      }
LABEL_173:
      long long v85 = *(_OWORD *)a1;
      uint64_t v358 = *(std::__shared_weak_count **)(a1 + 16);
      *(_OWORD *)std::string __p = v85;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      long long v353 = *(_OWORD *)(a1 + 24);
      long long v359 = v353;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      if (SHIBYTE(v358) >= 0) {
        uint64_t v86 = __p;
      }
      else {
        uint64_t v86 = (void **)__p[0];
      }
      if (SHIBYTE(v358) >= 0) {
        float32x4_t v87 = (void *)HIBYTE(v358);
      }
      else {
        float32x4_t v87 = __p[1];
      }
      long long v88 = (void *)*(unsigned __int8 *)(v349 - 17);
      float32x4_t v90 = *(const void **)(v349 - 40);
      long long v89 = *(void **)(v349 - 32);
      if ((char)v88 >= 0) {
        uint64_t v91 = v346;
      }
      else {
        uint64_t v91 = *(const void ***)(v349 - 40);
      }
      if ((char)v88 >= 0) {
        size_t v92 = *(unsigned __int8 *)(v349 - 17);
      }
      else {
        size_t v92 = *(void *)(v349 - 32);
      }
      if (v92 >= (unint64_t)v87) {
        size_t v93 = (size_t)v87;
      }
      else {
        size_t v93 = v92;
      }
      char v94 = v86;
      int v95 = memcmp(v86, v91, v93);
      if (v95)
      {
        if (v95 < 0) {
          goto LABEL_212;
        }
      }
      else
      {
        BOOL v102 = (unint64_t)v87 >= v92;
        if (v87 == (void *)v92) {
          BOOL v102 = (unint64_t)v353 >= *(void *)(v349 - 16);
        }
        if (!v102)
        {
LABEL_212:
          for (unint64_t n = a1 + 40; ; n += 40)
          {
            int v103 = *(char *)(n + 23);
            if (v103 >= 0) {
              int v104 = (const void *)n;
            }
            else {
              int v104 = *(const void **)n;
            }
            if (v103 >= 0) {
              size_t v105 = *(unsigned __int8 *)(n + 23);
            }
            else {
              size_t v105 = *(void *)(n + 8);
            }
            if (v105 >= (unint64_t)v87) {
              size_t v106 = (size_t)v87;
            }
            else {
              size_t v106 = v105;
            }
            int v107 = memcmp(v94, v104, v106);
            if (v107)
            {
              if (v107 < 0) {
                goto LABEL_230;
              }
            }
            else
            {
              BOOL v108 = (unint64_t)v87 >= v105;
              if (v87 == (void *)v105) {
                BOOL v108 = (unint64_t)v353 >= *(void *)(n + 24);
              }
              if (!v108) {
                goto LABEL_230;
              }
            }
          }
        }
      }
      for (unint64_t n = a1 + 40; n < v349; n += 40)
      {
        int v96 = *(char *)(n + 23);
        if (v96 >= 0) {
          int v97 = (const void *)n;
        }
        else {
          int v97 = *(const void **)n;
        }
        if (v96 >= 0) {
          size_t v98 = *(unsigned __int8 *)(n + 23);
        }
        else {
          size_t v98 = *(void *)(n + 8);
        }
        if (v98 >= (unint64_t)v87) {
          size_t v99 = (size_t)v87;
        }
        else {
          size_t v99 = v98;
        }
        int v100 = memcmp(v94, v97, v99);
        if (v100)
        {
          if (v100 < 0) {
            break;
          }
        }
        else
        {
          BOOL v101 = (unint64_t)v87 >= v98;
          if (v87 == (void *)v98) {
            BOOL v101 = (unint64_t)v353 >= *(void *)(n + 24);
          }
          if (!v101) {
            break;
          }
        }
      }
LABEL_230:
      iuint64_t i = (_OWORD *)v349;
      if (n < v349)
      {
        for (iuint64_t i = v346; ; v89 = (void *)*((void *)ii + 1))
        {
          if ((char)v88 >= 0) {
            unint64_t v111 = ii;
          }
          else {
            unint64_t v111 = v90;
          }
          if ((char)v88 >= 0) {
            long long v89 = v88;
          }
          if (v89 >= v87) {
            size_t v112 = (size_t)v87;
          }
          else {
            size_t v112 = (size_t)v89;
          }
          int v113 = memcmp(v94, v111, v112);
          if (v113)
          {
            if ((v113 & 0x80000000) == 0) {
              break;
            }
          }
          else
          {
            BOOL v114 = v87 >= v89;
            if (v87 == v89) {
              BOOL v114 = (unint64_t)v353 >= *((void *)ii + 3);
            }
            if (v114) {
              break;
            }
          }
          uint64_t v110 = (const void *)*((void *)ii - 5);
          iuint64_t i = (_OWORD *)((char *)ii - 40);
          float32x4_t v90 = v110;
          long long v88 = (void *)*((unsigned __int8 *)ii + 23);
        }
      }
      if (n < (unint64_t)ii)
      {
        do
        {
          long long v123 = *(_OWORD *)n;
          uint64_t v361 = *(void *)(n + 16);
          long long v360 = v123;
          long long v124 = *ii;
          *(void *)(n + 16) = *((void *)ii + 2);
          *(_OWORD *)unint64_t n = v124;
          long long v125 = v360;
          *((void *)ii + 2) = v361;
          *iuint64_t i = v125;
          long long v126 = *(_OWORD *)(n + 24);
          *(void *)(n + 24) = 0;
          *(void *)(n + 32) = 0;
          long long v127 = *(_OWORD *)((char *)ii + 24);
          *((void *)ii + 3) = 0;
          *((void *)ii + 4) = 0;
          unint64_t v128 = *(std::__shared_weak_count **)(n + 32);
          *(_OWORD *)(n + 24) = v127;
          if (v128 && !atomic_fetch_add(&v128->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            long long v354 = v126;
            ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
            std::__shared_weak_count::__release_weak(v128);
            long long v126 = v354;
          }
          BOOL v129 = (std::__shared_weak_count *)*((void *)ii + 4);
          *(_OWORD *)((char *)ii + 24) = v126;
          if (v129 && !atomic_fetch_add(&v129->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
            std::__shared_weak_count::__release_weak(v129);
          }
          if (SHIBYTE(v358) >= 0) {
            BOOL v130 = __p;
          }
          else {
            BOOL v130 = (void **)__p[0];
          }
          if (SHIBYTE(v358) >= 0) {
            unint64_t v131 = (void *)HIBYTE(v358);
          }
          else {
            unint64_t v131 = __p[1];
          }
          unint64_t v132 = v359;
          do
          {
            while (1)
            {
              while (1)
              {
                n += 40;
                int v133 = *(char *)(n + 23);
                uint64_t v134 = v133 >= 0 ? (const void *)n : *(const void **)n;
                uint64_t v135 = v133 >= 0 ? (void *)*(unsigned __int8 *)(n + 23) : *(void **)(n + 8);
                size_t v136 = (size_t)(v135 >= v131 ? v131 : v135);
                int v137 = memcmp(v130, v134, v136);
                if (!v137) {
                  break;
                }
                if (v137 < 0) {
                  goto LABEL_297;
                }
              }
              if (v131 != v135) {
                break;
              }
              if (v132 < *(void *)(n + 24)) {
                goto LABEL_297;
              }
            }
          }
          while (v131 >= v135);
          do
          {
            while (1)
            {
LABEL_297:
              while (1)
              {
                iuint64_t i = (_OWORD *)((char *)ii - 40);
                int v138 = *((char *)ii + 23);
                int v139 = v138 >= 0 ? ii : *(_OWORD **)ii;
                uint64_t v140 = v138 >= 0 ? (void *)*((unsigned __int8 *)ii + 23) : (void *)*((void *)ii + 1);
                size_t v141 = (size_t)(v140 >= v131 ? v131 : v140);
                int v142 = memcmp(v130, v139, v141);
                if (!v142) {
                  break;
                }
                if ((v142 & 0x80000000) == 0) {
                  goto LABEL_266;
                }
              }
              if (v131 != v140) {
                break;
              }
              if (v132 >= *((void *)ii + 3)) {
                goto LABEL_266;
              }
            }
          }
          while (v131 < v140);
LABEL_266:
          a2 = v349;
        }
        while (n < (unint64_t)ii);
      }
      else
      {
        a2 = v349;
      }
      BOOL v115 = (void **)(n - 40);
      BOOL v4 = n - 40 >= a1;
      BOOL v5 = n - 40 == a1;
      if (n - 40 != a1)
      {
        if (*(char *)(a1 + 23) < 0) {
          operator delete(*(void **)a1);
        }
        long long v116 = *(_OWORD *)v115;
        *(void *)(a1 + 16) = *(void *)(n - 24);
        *(_OWORD *)a1 = v116;
        *(unsigned char *)(n - 17) = 0;
        *(unsigned char *)(n - 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
        long long v117 = *(_OWORD *)(n - 16);
        *(void *)(n - 16) = 0;
        *(void *)(n - 8) = 0;
        int v118 = *(std::__shared_weak_count **)(a1 + 32);
        *(_OWORD *)(a1 + 24) = v117;
        if (v118 && !atomic_fetch_add(&v118->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
      }
      if (*(char *)(n - 17) < 0) {
        operator delete(*v115);
      }
      long long v119 = *(_OWORD *)__p;
      *(void *)(n - 24) = v358;
      *(_OWORD *)BOOL v115 = v119;
      HIBYTE(v358) = 0;
      LOBYTE(__p[0]) = 0;
      long long v120 = v359;
      long long v359 = 0uLL;
      uint64_t v121 = *(std::__shared_weak_count **)(n - 8);
      *(_OWORD *)(n - 16) = v120;
      a3 = v344;
      if (v121 && !atomic_fetch_add(&v121->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
      BOOL v122 = (std::__shared_weak_count *)*((void *)&v359 + 1);
      if (*((void *)&v359 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v359 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
      if (SHIBYTE(v358) < 0) {
        operator delete(__p[0]);
      }
      a4 = 0;
    }
  }
  if (a1 == a2) {
    return;
  }
  int64_t v189 = (v11 - 2) >> 1;
  int64_t v190 = v189;
  do
  {
    int64_t v191 = v190;
    if (v189 < v190) {
      goto LABEL_415;
    }
    uint64_t v192 = (2 * v190) | 1;
    unint64_t v193 = a1 + 40 * v192;
    uint64_t v194 = 2 * v190 + 2;
    int64_t v347 = v190;
    if (v194 < (uint64_t)v11)
    {
      int v195 = *(char *)(v193 + 23);
      if (v195 >= 0) {
        uint64_t v196 = (const void *)(a1 + 40 * v192);
      }
      else {
        uint64_t v196 = *(const void **)v193;
      }
      if (v195 >= 0) {
        size_t v197 = *(unsigned __int8 *)(v193 + 23);
      }
      else {
        size_t v197 = *(void *)(v193 + 8);
      }
      int v198 = *(char *)(v193 + 63);
      if (v198 >= 0) {
        uint64_t v199 = (const void *)(v193 + 40);
      }
      else {
        uint64_t v199 = *(const void **)(v193 + 40);
      }
      if (v198 >= 0) {
        size_t v200 = *(unsigned __int8 *)(v193 + 63);
      }
      else {
        size_t v200 = *(void *)(v193 + 48);
      }
      if (v200 >= v197) {
        size_t v201 = v197;
      }
      else {
        size_t v201 = v200;
      }
      int v202 = memcmp(v196, v199, v201);
      if (v202)
      {
        int64_t v191 = v347;
        if ((v202 & 0x80000000) == 0) {
          goto LABEL_436;
        }
LABEL_435:
        v193 += 40;
        uint64_t v192 = v194;
        goto LABEL_436;
      }
      BOOL v242 = v197 >= v200;
      if (v197 == v200) {
        BOOL v242 = *(void *)(v193 + 24) >= *(void *)(v193 + 64);
      }
      int64_t v191 = v347;
      if (!v242) {
        goto LABEL_435;
      }
    }
LABEL_436:
    unint64_t v203 = a1 + 40 * v191;
    int v204 = *(char *)(v193 + 23);
    if (v204 >= 0) {
      uint64_t v205 = (const void *)v193;
    }
    else {
      uint64_t v205 = *(const void **)v193;
    }
    if (v204 >= 0) {
      size_t v206 = *(unsigned __int8 *)(v193 + 23);
    }
    else {
      size_t v206 = *(void *)(v193 + 8);
    }
    int v207 = *(char *)(v203 + 23);
    if (v207 >= 0) {
      uint64_t v208 = (const void *)(a1 + 40 * v191);
    }
    else {
      uint64_t v208 = *(const void **)v203;
    }
    if (v207 >= 0) {
      size_t v209 = *(unsigned __int8 *)(v203 + 23);
    }
    else {
      size_t v209 = *(void *)(v203 + 8);
    }
    if (v209 >= v206) {
      size_t v210 = v206;
    }
    else {
      size_t v210 = v209;
    }
    int v211 = memcmp(v205, v208, v210);
    if (v211)
    {
      a2 = v349;
      int64_t v189 = (v11 - 2) >> 1;
      int64_t v191 = v347;
      if (v211 < 0) {
        goto LABEL_415;
      }
LABEL_458:
      char v213 = 0;
      long long v214 = *(_OWORD *)v203;
      uint64_t v358 = *(std::__shared_weak_count **)(v203 + 16);
      *(_OWORD *)std::string __p = v214;
      *(void *)(v203 + 8) = 0;
      *(void *)(v203 + 16) = 0;
      *(void *)unint64_t v203 = 0;
      long long v359 = *(_OWORD *)(v203 + 24);
      *(void *)(v203 + 24) = 0;
      *(void *)(v203 + 32) = 0;
      while (1)
      {
        if (v213 < 0) {
          operator delete(*(void **)v203);
        }
        long long v223 = *(_OWORD *)v193;
        *(void *)(v203 + 16) = *(void *)(v193 + 16);
        *(_OWORD *)unint64_t v203 = v223;
        *(unsigned char *)(v193 + 23) = 0;
        *(unsigned char *)unint64_t v193 = 0;
        long long v224 = *(_OWORD *)(v193 + 24);
        *(void *)(v193 + 24) = 0;
        *(void *)(v193 + 32) = 0;
        uint64_t v225 = *(std::__shared_weak_count **)(v203 + 32);
        *(_OWORD *)(v203 + 24) = v224;
        if (v225 && !atomic_fetch_add(&v225->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
          std::__shared_weak_count::__release_weak(v225);
        }
        if (v189 < v192)
        {
LABEL_512:
          if (*(char *)(v193 + 23) < 0) {
            operator delete(*(void **)v193);
          }
          long long v238 = *(_OWORD *)__p;
          *(void *)(v193 + 16) = v358;
          *(_OWORD *)unint64_t v193 = v238;
          HIBYTE(v358) = 0;
          LOBYTE(__p[0]) = 0;
          long long v239 = v359;
          long long v359 = 0uLL;
          uint64_t v240 = *(std::__shared_weak_count **)(v193 + 32);
          *(_OWORD *)(v193 + 24) = v239;
          if (v240 && !atomic_fetch_add(&v240->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
            std::__shared_weak_count::__release_weak(v240);
          }
          unsigned __int8 v241 = (std::__shared_weak_count *)*((void *)&v359 + 1);
          if (*((void *)&v359 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v359 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
            std::__shared_weak_count::__release_weak(v241);
          }
          if (SHIBYTE(v358) < 0) {
            operator delete(__p[0]);
          }
          int64_t v191 = v347;
          a2 = v349;
          goto LABEL_415;
        }
        uint64_t v226 = 2 * v192;
        uint64_t v227 = (2 * v192) | 1;
        uint64_t v192 = v227;
        unint64_t v215 = a1 + 40 * v227;
        uint64_t v228 = v226 + 2;
        if (v226 + 2 < (uint64_t)v11)
        {
          int v229 = *(char *)(v215 + 23);
          if (v229 >= 0) {
            uint64_t v230 = (const void *)(a1 + 40 * v227);
          }
          else {
            uint64_t v230 = *(const void **)v215;
          }
          if (v229 >= 0) {
            size_t v231 = *(unsigned __int8 *)(v215 + 23);
          }
          else {
            size_t v231 = *(void *)(v215 + 8);
          }
          int v232 = *(char *)(v215 + 63);
          if (v232 >= 0) {
            uint64_t v233 = (const void *)(v215 + 40);
          }
          else {
            uint64_t v233 = *(const void **)(v215 + 40);
          }
          if (v232 >= 0) {
            size_t v234 = *(unsigned __int8 *)(v215 + 63);
          }
          else {
            size_t v234 = *(void *)(v215 + 48);
          }
          if (v234 >= v231) {
            size_t v235 = v231;
          }
          else {
            size_t v235 = v234;
          }
          int v236 = memcmp(v230, v233, v235);
          if (v236)
          {
            int64_t v189 = (v11 - 2) >> 1;
            if (v236 < 0) {
              goto LABEL_459;
            }
          }
          else
          {
            BOOL v237 = v231 >= v234;
            if (v231 == v234) {
              BOOL v237 = *(void *)(v215 + 24) >= *(void *)(v215 + 64);
            }
            int64_t v189 = (v11 - 2) >> 1;
            if (!v237)
            {
LABEL_459:
              v215 += 40;
              uint64_t v192 = v228;
            }
          }
        }
        int v216 = *(char *)(v215 + 23);
        if (v216 >= 0) {
          unint64_t v217 = (const void *)v215;
        }
        else {
          unint64_t v217 = *(const void **)v215;
        }
        if (v216 >= 0) {
          size_t v218 = *(unsigned __int8 *)(v215 + 23);
        }
        else {
          size_t v218 = *(void *)(v215 + 8);
        }
        if (SHIBYTE(v358) >= 0) {
          int v219 = __p;
        }
        else {
          int v219 = (void **)__p[0];
        }
        if (SHIBYTE(v358) >= 0) {
          unsigned int v220 = (void *)HIBYTE(v358);
        }
        else {
          unsigned int v220 = __p[1];
        }
        if ((unint64_t)v220 >= v218) {
          size_t v221 = v218;
        }
        else {
          size_t v221 = (size_t)v220;
        }
        int v222 = memcmp(v217, v219, v221);
        if (v222)
        {
          if (v222 < 0) {
            goto LABEL_512;
          }
        }
        else if ((void *)v218 == v220)
        {
          if (*(void *)(v215 + 24) < (unint64_t)v359) {
            goto LABEL_512;
          }
        }
        else if (v218 < (unint64_t)v220)
        {
          goto LABEL_512;
        }
        char v213 = *(unsigned char *)(v193 + 23);
        unint64_t v203 = v193;
        unint64_t v193 = v215;
      }
    }
    BOOL v212 = v206 >= v209;
    if (v206 == v209) {
      BOOL v212 = *(void *)(v193 + 24) >= *(void *)(v203 + 24);
    }
    a2 = v349;
    int64_t v189 = (v11 - 2) >> 1;
    int64_t v191 = v347;
    if (v212) {
      goto LABEL_458;
    }
LABEL_415:
    int64_t v190 = v191 - 1;
  }
  while (v191);
  int64_t v243 = v10 / 0x28uLL;
  while (2)
  {
    if (v243 < 2) {
      goto LABEL_529;
    }
    uint64_t v245 = 0;
    uint64_t v246 = *(void **)a1;
    *(void *)&long long v360 = *(void *)(a1 + 8);
    *(void *)((char *)&v360 + 7) = *(void *)(a1 + 15);
    char v355 = *(unsigned char *)(a1 + 23);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    uint64_t v348 = *(void *)(a1 + 24);
    unint64_t v350 = a2;
    uint64_t v343 = v246;
    uint64_t v345 = *(void *)(a1 + 32);
    unint64_t v247 = a1;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    while (2)
    {
      unint64_t v248 = v247;
      v247 += 40 * v245 + 40;
      uint64_t v249 = 2 * v245;
      uint64_t v245 = (2 * v245) | 1;
      uint64_t v250 = v249 + 2;
      if (v249 + 2 < v243)
      {
        int v251 = *(char *)(v247 + 23);
        if (v251 >= 0) {
          __int16 v252 = (const void *)v247;
        }
        else {
          __int16 v252 = *(const void **)v247;
        }
        if (v251 >= 0) {
          size_t v253 = *(unsigned __int8 *)(v247 + 23);
        }
        else {
          size_t v253 = *(void *)(v247 + 8);
        }
        int v254 = *(char *)(v247 + 63);
        if (v254 >= 0) {
          uint64_t v255 = (const void *)(v247 + 40);
        }
        else {
          uint64_t v255 = *(const void **)(v247 + 40);
        }
        if (v254 >= 0) {
          size_t v256 = *(unsigned __int8 *)(v247 + 63);
        }
        else {
          size_t v256 = *(void *)(v247 + 48);
        }
        if (v256 >= v253) {
          size_t v257 = v253;
        }
        else {
          size_t v257 = v256;
        }
        int v258 = memcmp(v252, v255, v257);
        if (v258)
        {
          if (v258 < 0) {
            goto LABEL_552;
          }
        }
        else
        {
          BOOL v263 = v253 >= v256;
          if (v253 == v256) {
            BOOL v263 = *(void *)(v247 + 24) >= *(void *)(v247 + 64);
          }
          if (!v263)
          {
LABEL_552:
            v247 += 40;
            uint64_t v245 = v250;
          }
        }
      }
      if (*(char *)(v248 + 23) < 0) {
        operator delete(*(void **)v248);
      }
      long long v259 = *(_OWORD *)v247;
      *(void *)(v248 + 16) = *(void *)(v247 + 16);
      *(_OWORD *)unint64_t v248 = v259;
      *(unsigned char *)(v247 + 23) = 0;
      *(unsigned char *)unint64_t v247 = 0;
      __int16 v260 = (void *)(v247 + 24);
      long long v261 = *(_OWORD *)(v247 + 24);
      *(void *)(v247 + 24) = 0;
      *(void *)(v247 + 32) = 0;
      v262 = *(std::__shared_weak_count **)(v248 + 32);
      *(_OWORD *)(v248 + 24) = v261;
      if (v262 && !atomic_fetch_add(&v262->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
        std::__shared_weak_count::__release_weak(v262);
      }
      if (v245 <= (uint64_t)((unint64_t)(v243 - 2) >> 1)) {
        continue;
      }
      break;
    }
    int v264 = (void **)(v350 - 40);
    int v265 = *(char *)(v247 + 23);
    if (v247 == v350 - 40)
    {
      if (v265 < 0) {
        operator delete(*(void **)v247);
      }
      *(void *)unint64_t v247 = v343;
      uint64_t v284 = *(void *)((char *)&v360 + 7);
      *(void *)(v247 + 8) = v360;
      *(void *)(v247 + 15) = v284;
      *(unsigned char *)(v247 + 23) = v355;
      int v285 = *(std::__shared_weak_count **)(v247 + 32);
      *(void *)(v247 + 24) = v348;
      *(void *)(v247 + 32) = v345;
      if (v285 && !atomic_fetch_add(&v285->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
        std::__shared_weak_count::__release_weak(v285);
      }
    }
    else
    {
      if (v265 < 0) {
        operator delete(*(void **)v247);
      }
      long long v266 = *(_OWORD *)v264;
      *(void *)(v247 + 16) = *(void *)(v350 - 24);
      *(_OWORD *)unint64_t v247 = v266;
      *(unsigned char *)(v350 - 17) = 0;
      *(unsigned char *)(v350 - 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
      long long v267 = *(_OWORD *)(v350 - 16);
      *(void *)(v350 - 16) = 0;
      *(void *)(v350 - 8) = 0;
      uint64_t v268 = *(std::__shared_weak_count **)(v247 + 32);
      *(_OWORD *)(v247 + 24) = v267;
      if (v268 && !atomic_fetch_add(&v268->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
        std::__shared_weak_count::__release_weak(v268);
        unint64_t v269 = v350;
        if (*(char *)(v350 - 17) < 0) {
LABEL_569:
        }
          operator delete(*v264);
      }
      else
      {
        unint64_t v269 = v350;
        if (*(char *)(v350 - 17) < 0) {
          goto LABEL_569;
        }
      }
      *(void *)(v269 - 4std::__fs::filesystem::__rename(__from, __to, 0) = v343;
      uint64_t v270 = v360;
      *(void *)(v269 - 25) = *(void *)((char *)&v360 + 7);
      *(void *)(v269 - 32) = v270;
      *(unsigned char *)(v269 - 17) = v355;
      unint64_t v271 = v269;
      unsigned int v272 = *(std::__shared_weak_count **)(v269 - 8);
      *(void *)(v271 - 16) = v348;
      *(void *)(v271 - 8) = v345;
      if (v272 && !atomic_fetch_add(&v272->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
        std::__shared_weak_count::__release_weak(v272);
        uint64_t v273 = v247 + 40 - a1;
        if (v273 < 41) {
          goto LABEL_528;
        }
LABEL_573:
        unint64_t v274 = (v273 / 0x28uLL - 2) >> 1;
        unint64_t v275 = a1 + 40 * v274;
        int v276 = *(char *)(v275 + 23);
        if (v276 >= 0) {
          unsigned __int8 v277 = (const void *)(a1 + 40 * v274);
        }
        else {
          unsigned __int8 v277 = *(const void **)v275;
        }
        if (v276 >= 0) {
          size_t v278 = *(unsigned __int8 *)(v275 + 23);
        }
        else {
          size_t v278 = *(void *)(v275 + 8);
        }
        int v279 = *(char *)(v247 + 23);
        if (v279 >= 0) {
          __int16 v280 = (const void *)v247;
        }
        else {
          __int16 v280 = *(const void **)v247;
        }
        if (v279 >= 0) {
          size_t v281 = *(unsigned __int8 *)(v247 + 23);
        }
        else {
          size_t v281 = *(void *)(v247 + 8);
        }
        if (v281 >= v278) {
          size_t v282 = v278;
        }
        else {
          size_t v282 = v281;
        }
        int v283 = memcmp(v277, v280, v282);
        if (v283)
        {
          if ((v283 & 0x80000000) == 0) {
            goto LABEL_528;
          }
        }
        else
        {
          BOOL v286 = v278 >= v281;
          if (v278 == v281) {
            BOOL v286 = *(void *)(v275 + 24) >= *v260;
          }
          if (v286) {
            goto LABEL_528;
          }
        }
        long long v287 = *(_OWORD *)v247;
        uint64_t v358 = *(std::__shared_weak_count **)(v247 + 16);
        *(_OWORD *)std::string __p = v287;
        *(void *)(v247 + 8) = 0;
        *(void *)(v247 + 16) = 0;
        *(void *)unint64_t v247 = 0;
        long long v359 = *(_OWORD *)(v247 + 24);
        void *v260 = 0;
        *(void *)(v247 + 32) = 0;
        while (1)
        {
          unint64_t v288 = v275;
          if (*(char *)(v247 + 23) < 0) {
            operator delete(*(void **)v247);
          }
          long long v289 = *(_OWORD *)v275;
          *(void *)(v247 + 16) = *(void *)(v275 + 16);
          *(_OWORD *)unint64_t v247 = v289;
          *(unsigned char *)(v275 + 23) = 0;
          *(unsigned char *)unint64_t v275 = 0;
          long long v290 = *(_OWORD *)(v275 + 24);
          *(void *)(v275 + 24) = 0;
          *(void *)(v275 + 32) = 0;
          uint64_t v291 = *(std::__shared_weak_count **)(v247 + 32);
          *(_OWORD *)(v247 + 24) = v290;
          if (v291 && !atomic_fetch_add(&v291->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
            std::__shared_weak_count::__release_weak(v291);
          }
          if (!v274) {
            break;
          }
          unint64_t v274 = (v274 - 1) >> 1;
          unint64_t v275 = a1 + 40 * v274;
          int v292 = *(char *)(v275 + 23);
          if (v292 >= 0) {
            unsigned int v293 = (const void *)(a1 + 40 * v274);
          }
          else {
            unsigned int v293 = *(const void **)v275;
          }
          if (v292 >= 0) {
            size_t v294 = *(unsigned __int8 *)(v275 + 23);
          }
          else {
            size_t v294 = *(void *)(v275 + 8);
          }
          if (SHIBYTE(v358) >= 0) {
            uint64_t v295 = __p;
          }
          else {
            uint64_t v295 = (void **)__p[0];
          }
          if (SHIBYTE(v358) >= 0) {
            uint64_t v296 = (void *)HIBYTE(v358);
          }
          else {
            uint64_t v296 = __p[1];
          }
          if ((unint64_t)v296 >= v294) {
            size_t v297 = v294;
          }
          else {
            size_t v297 = (size_t)v296;
          }
          int v298 = memcmp(v293, v295, v297);
          if (v298)
          {
            unint64_t v247 = v288;
            if ((v298 & 0x80000000) == 0) {
              break;
            }
          }
          else if ((void *)v294 == v296)
          {
            unint64_t v247 = v288;
            if (*(void *)(v275 + 24) >= (unint64_t)v359) {
              break;
            }
          }
          else
          {
            unint64_t v247 = v288;
            if (v294 >= (unint64_t)v296) {
              break;
            }
          }
        }
        if (*(char *)(v288 + 23) < 0) {
          operator delete(*(void **)v288);
        }
        long long v299 = *(_OWORD *)__p;
        *(void *)(v288 + 16) = v358;
        *(_OWORD *)unint64_t v288 = v299;
        HIBYTE(v358) = 0;
        LOBYTE(__p[0]) = 0;
        long long v300 = v359;
        long long v359 = 0uLL;
        __int16 v301 = *(std::__shared_weak_count **)(v288 + 32);
        *(_OWORD *)(v288 + 24) = v300;
        if (v301 && !atomic_fetch_add(&v301->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
          std::__shared_weak_count::__release_weak(v301);
        }
        uint64_t v302 = (std::__shared_weak_count *)*((void *)&v359 + 1);
        if (*((void *)&v359 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v359 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
          std::__shared_weak_count::__release_weak(v302);
        }
        if (SHIBYTE(v358) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        uint64_t v273 = v247 + 40 - a1;
        if (v273 >= 41) {
          goto LABEL_573;
        }
      }
    }
LABEL_528:
    a2 = v350;
LABEL_529:
    a2 -= 40;
    if ((unint64_t)v243-- > 2) {
      continue;
    }
    break;
  }
}

void sub_215DD5788(const void **a1, const void **a2, const void **a3)
{
  int v6 = *((char *)a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = *a2;
  }
  if (v6 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  int v9 = *((char *)a1 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a1;
  }
  else {
    uint64_t v10 = *a1;
  }
  if (v9 >= 0) {
    size_t v11 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v11 = (size_t)a1[1];
  }
  if (v11 >= v8) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v11;
  }
  int v13 = memcmp(v7, v10, v12);
  if (v13)
  {
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_18;
    }
LABEL_37:
    int v19 = *((char *)a3 + 23);
    if (v19 >= 0) {
      unsigned __int8 v20 = a3;
    }
    else {
      unsigned __int8 v20 = *a3;
    }
    if (v19 >= 0) {
      size_t v21 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v21 = (size_t)a3[1];
    }
    if (v8 >= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v8;
    }
    int v23 = memcmp(v20, v7, v22);
    if (v23)
    {
      if ((v23 & 0x80000000) == 0) {
        goto LABEL_48;
      }
LABEL_107:
      long long v56 = a1[2];
      long long v57 = *(_OWORD *)a1;
      long long v58 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v58;
      *(_OWORD *)a3 = v57;
      a3[2] = v56;
      long long v59 = *(_OWORD *)(a1 + 3);
      a1[3] = 0;
      a1[4] = 0;
      long long v60 = *(_OWORD *)(a3 + 3);
      a3[3] = 0;
      a3[4] = 0;
      unsigned __int8 v61 = (atomic_ullong *)a1[4];
      *(_OWORD *)(a1 + 3) = v60;
      if (!v61 || atomic_fetch_add(v61 + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_115:
        int v68 = (std::__shared_weak_count *)a3[4];
        *(_OWORD *)(a3 + 3) = v59;
        if (!v68) {
          return;
        }
LABEL_122:
        if (!atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
        return;
      }
      long long v77 = v59;
      (*(void (**)(atomic_ullong *))(*v61 + 16))(v61);
      size_t v62 = (std::__shared_weak_count *)v61;
LABEL_114:
      std::__shared_weak_count::__release_weak(v62);
      long long v59 = v77;
      goto LABEL_115;
    }
    if (v21 == v8)
    {
      if (a3[3] < a2[3]) {
        goto LABEL_107;
      }
    }
    else if (v21 < v8)
    {
      goto LABEL_107;
    }
LABEL_48:
    size_t v24 = a1[2];
    long long v25 = *(_OWORD *)a1;
    BOOL v26 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v26;
    *(_OWORD *)a2 = v25;
    a2[2] = v24;
    long long v27 = *(_OWORD *)(a1 + 3);
    a1[3] = 0;
    a1[4] = 0;
    size_t v28 = a2 + 3;
    long long v29 = *(_OWORD *)(a2 + 3);
    a2[3] = 0;
    a2[4] = 0;
    uint64_t v30 = (std::__shared_weak_count *)a1[4];
    *(_OWORD *)(a1 + 3) = v29;
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      long long v75 = v27;
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      long long v27 = v75;
    }
    long long v31 = (std::__shared_weak_count *)a2[4];
    *(_OWORD *)(a2 + 3) = v27;
    if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
    int v32 = *((char *)a3 + 23);
    if (v32 >= 0) {
      __n128 v33 = a3;
    }
    else {
      __n128 v33 = *a3;
    }
    if (v32 >= 0) {
      size_t v34 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v34 = (size_t)a3[1];
    }
    int v35 = *((char *)a2 + 23);
    if (v35 >= 0) {
      int v36 = a2;
    }
    else {
      int v36 = *a2;
    }
    if (v35 >= 0) {
      size_t v37 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v37 = (size_t)a2[1];
    }
    if (v37 >= v34) {
      size_t v38 = v34;
    }
    else {
      size_t v38 = v37;
    }
    int v39 = memcmp(v33, v36, v38);
    if (v39)
    {
      if ((v39 & 0x80000000) == 0) {
        return;
      }
    }
    else if (v34 == v37)
    {
      if ((unint64_t)a3[3] >= *v28) {
        return;
      }
    }
    else if (v34 >= v37)
    {
      return;
    }
    uint64_t v63 = a2[2];
    long long v64 = *(_OWORD *)a2;
    unint64_t v65 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v65;
    *(_OWORD *)a3 = v64;
    a3[2] = v63;
    long long v59 = *(_OWORD *)(a2 + 3);
    *size_t v28 = 0;
    a2[4] = 0;
    long long v66 = *(_OWORD *)(a3 + 3);
    a3[3] = 0;
    a3[4] = 0;
    unsigned int v67 = (atomic_ullong *)a2[4];
    *(_OWORD *)(a2 + 3) = v66;
    if (!v67 || atomic_fetch_add(v67 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_115;
    }
    long long v77 = v59;
    (*(void (**)(atomic_ullong *))(*v67 + 16))(v67);
    size_t v62 = (std::__shared_weak_count *)v67;
    goto LABEL_114;
  }
  if (v8 == v11)
  {
    if (a2[3] < a1[3]) {
      goto LABEL_37;
    }
  }
  else if (v8 < v11)
  {
    goto LABEL_37;
  }
LABEL_18:
  int v14 = *((char *)a3 + 23);
  if (v14 >= 0) {
    long long v15 = a3;
  }
  else {
    long long v15 = *a3;
  }
  if (v14 >= 0) {
    size_t v16 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v16 = (size_t)a3[1];
  }
  if (v8 >= v16) {
    size_t v17 = v16;
  }
  else {
    size_t v17 = v8;
  }
  int v18 = memcmp(v15, v7, v17);
  if (v18)
  {
    if ((v18 & 0x80000000) == 0) {
      return;
    }
  }
  else if (v16 == v8)
  {
    if (a3[3] >= a2[3]) {
      return;
    }
  }
  else if (v16 >= v8)
  {
    return;
  }
  int v40 = a2[2];
  long long v41 = *(_OWORD *)a2;
  unint64_t v42 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v42;
  *(_OWORD *)a3 = v41;
  a3[2] = v40;
  uint64_t v43 = a2 + 3;
  long long v44 = *(_OWORD *)(a2 + 3);
  a2[3] = 0;
  a2[4] = 0;
  long long v45 = *(_OWORD *)(a3 + 3);
  a3[3] = 0;
  a3[4] = 0;
  size_t v46 = (std::__shared_weak_count *)a2[4];
  *(_OWORD *)(a2 + 3) = v45;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v76 = v44;
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
    long long v44 = v76;
  }
  size_t v47 = (std::__shared_weak_count *)a3[4];
  *(_OWORD *)(a3 + 3) = v44;
  if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  int v48 = *((char *)a2 + 23);
  if (v48 >= 0) {
    BOOL v49 = a2;
  }
  else {
    BOOL v49 = *a2;
  }
  if (v48 >= 0) {
    size_t v50 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v50 = (size_t)a2[1];
  }
  int v51 = *((char *)a1 + 23);
  if (v51 >= 0) {
    size_t v52 = a1;
  }
  else {
    size_t v52 = *a1;
  }
  if (v51 >= 0) {
    size_t v53 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v53 = (size_t)a1[1];
  }
  if (v53 >= v50) {
    size_t v54 = v50;
  }
  else {
    size_t v54 = v53;
  }
  int v55 = memcmp(v49, v52, v54);
  if (v55)
  {
    if ((v55 & 0x80000000) == 0) {
      return;
    }
  }
  else if (v50 == v53)
  {
    if (*v43 >= (unint64_t)a1[3]) {
      return;
    }
  }
  else if (v50 >= v53)
  {
    return;
  }
  size_t v69 = a1[2];
  long long v70 = *(_OWORD *)a1;
  int v71 = a2[2];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v71;
  *(_OWORD *)a2 = v70;
  a2[2] = v69;
  long long v72 = *(_OWORD *)(a1 + 3);
  a1[3] = 0;
  a1[4] = 0;
  long long v73 = *(_OWORD *)(a2 + 3);
  void *v43 = 0;
  a2[4] = 0;
  size_t v74 = (std::__shared_weak_count *)a1[4];
  *(_OWORD *)(a1 + 3) = v73;
  if (v74 && !atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v78 = v72;
    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
    std::__shared_weak_count::__release_weak(v74);
    long long v72 = v78;
  }
  int v68 = (std::__shared_weak_count *)a2[4];
  *(_OWORD *)(a2 + 3) = v72;
  if (v68) {
    goto LABEL_122;
  }
}

BOOL sub_215DD5D54(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v3)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v5 = a2 - 40;
      int v6 = *(char *)(a2 - 17);
      if (v6 >= 0) {
        uint64_t v7 = (const void *)(a2 - 40);
      }
      else {
        uint64_t v7 = *(const void **)(a2 - 40);
      }
      if (v6 >= 0) {
        size_t v8 = *(unsigned __int8 *)(a2 - 17);
      }
      else {
        size_t v8 = *(void *)(a2 - 32);
      }
      int v9 = *(char *)(a1 + 23);
      if (v9 >= 0) {
        uint64_t v10 = (const void *)a1;
      }
      else {
        uint64_t v10 = *(const void **)a1;
      }
      if (v9 >= 0) {
        size_t v11 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v11 = *(void *)(a1 + 8);
      }
      if (v11 >= v8) {
        size_t v12 = v8;
      }
      else {
        size_t v12 = v11;
      }
      int v13 = memcmp(v7, v10, v12);
      if (v13)
      {
        if ((v13 & 0x80000000) == 0) {
          return 1;
        }
      }
      else
      {
        BOOL v50 = v8 >= v11;
        if (v8 == v11) {
          BOOL v50 = *(void *)(a2 - 16) >= *(void *)(a1 + 24);
        }
        if (v50) {
          return 1;
        }
      }
      uint64_t v51 = *(void *)(a1 + 16);
      long long v52 = *(_OWORD *)a1;
      uint64_t v53 = *(void *)(v5 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v5;
      *(void *)(a1 + 16) = v53;
      *(_OWORD *)uint64_t v5 = v52;
      *(void *)(v5 + 16) = v51;
      long long v54 = *(_OWORD *)(a1 + 24);
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      long long v55 = *(_OWORD *)(a2 - 16);
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      long long v56 = *(std::__shared_weak_count **)(a1 + 32);
      *(_OWORD *)(a1 + 24) = v55;
      if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        long long v58 = v54;
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
        long long v54 = v58;
      }
      long long v57 = *(std::__shared_weak_count **)(a2 - 8);
      *(_OWORD *)(a2 - 16) = v54;
      if (v57)
      {
        if (!atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      return 1;
    case 3uLL:
      sub_215DD5788((const void **)a1, (const void **)(a1 + 40), (const void **)(a2 - 40));
      return 1;
    case 4uLL:
      sub_215DD62A0((long long *)a1, (long long *)(a1 + 40), (long long *)(a1 + 80), (const void **)(a2 - 40));
      return 1;
    case 5uLL:
      sub_215DD66A4(a1, a1 + 40, a1 + 80, (long long *)(a1 + 120), (const void **)(a2 - 40));
      return 1;
    default:
      uint64_t v14 = a1 + 80;
      sub_215DD5788((const void **)a1, (const void **)(a1 + 40), (const void **)(a1 + 80));
      uint64_t v15 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while (1)
  {
    int v18 = *(char *)(v15 + 23);
    int v19 = v18 >= 0 ? (const void *)v15 : *(const void **)v15;
    unint64_t v20 = v18 >= 0 ? *(unsigned __int8 *)(v15 + 23) : *(void *)(v15 + 8);
    int v21 = *(char *)(v14 + 23);
    size_t v22 = v21 >= 0 ? (const void *)v14 : *(const void **)v14;
    unint64_t v23 = v21 >= 0 ? *(unsigned __int8 *)(v14 + 23) : *(void *)(v14 + 8);
    size_t v24 = v23 >= v20 ? v20 : v23;
    int v25 = memcmp(v19, v22, v24);
    if (!v25) {
      break;
    }
    if (v25 < 0) {
      goto LABEL_46;
    }
LABEL_24:
    uint64_t v14 = v15;
    v16 += 40;
    v15 += 40;
    if (v15 == a2) {
      return 1;
    }
  }
  BOOL v26 = v20 >= v23;
  if (v20 == v23) {
    BOOL v26 = *(void *)(v15 + 24) >= *(void *)(v14 + 24);
  }
  if (v26) {
    goto LABEL_24;
  }
LABEL_46:
  char v27 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)v15;
  uint64_t v61 = *(void *)(v15 + 16);
  *(void *)uint64_t v15 = 0;
  *(void *)(v15 + 8) = 0;
  long long v62 = *(_OWORD *)(v15 + 24);
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 24) = 0;
  uint64_t v28 = v16;
  *(void *)(v15 + 32) = 0;
  while (1)
  {
    uint64_t v29 = a1 + v28;
    uint64_t v30 = (void **)(a1 + v28 + 120);
    if (v27 < 0) {
      operator delete(*v30);
    }
    *(_OWORD *)uint64_t v30 = *(_OWORD *)(v29 + 80);
    *(void *)(a1 + v28 + 136) = *(void *)(v29 + 96);
    *(unsigned char *)(v29 + 103) = 0;
    *(unsigned char *)(v29 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 0;
    long long v31 = *(_OWORD *)(v29 + 104);
    *(void *)(v29 + 104) = 0;
    *(void *)(v29 + 112) = 0;
    int v32 = *(std::__shared_weak_count **)(v29 + 152);
    *(_OWORD *)(v29 + 144) = v31;
    if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
    if (v28 == -80)
    {
      uint64_t v45 = a1;
      if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
        goto LABEL_77;
      }
      goto LABEL_76;
    }
    uint64_t v33 = a1 + v28;
    size_t v34 = v61 >= 0 ? __p : (void **)__p[0];
    int v35 = v61 >= 0 ? (void *)HIBYTE(v61) : __p[1];
    uint64_t v38 = *(void *)(v33 + 40);
    uint64_t v36 = v33 + 40;
    uint64_t v37 = v38;
    int v39 = *(char *)(v36 + 23);
    int v40 = (const void *)(v39 >= 0 ? v36 : v37);
    long long v41 = v39 >= 0 ? (void *)*(unsigned __int8 *)(v36 + 23) : *(void **)(v36 + 8);
    size_t v42 = (size_t)(v41 >= v35 ? v35 : v41);
    int v43 = memcmp(v34, v40, v42);
    if (!v43) {
      break;
    }
    if ((v43 & 0x80000000) == 0) {
      goto LABEL_83;
    }
LABEL_48:
    char v27 = *(unsigned char *)(v29 + 103);
    v28 -= 40;
  }
  BOOL v44 = v35 >= v41;
  if (v35 == v41) {
    BOOL v44 = (unint64_t)v62 >= *(void *)(a1 + v28 + 64);
  }
  if (!v44) {
    goto LABEL_48;
  }
LABEL_83:
  uint64_t v45 = a1 + v28 + 80;
  if (*(char *)(a1 + v28 + 103) < 0) {
LABEL_76:
  }
    operator delete(*(void **)v45);
LABEL_77:
  *(_OWORD *)uint64_t v45 = *(_OWORD *)__p;
  uint64_t v46 = v62;
  *(void *)(v45 + 16) = v61;
  HIBYTE(v61) = 0;
  LOBYTE(__p[0]) = 0;
  uint64_t v47 = *((void *)&v62 + 1);
  long long v62 = 0uLL;
  *(void *)(a1 + v28 + 104) = v46;
  int v48 = *(std::__shared_weak_count **)(v45 + 32);
  *(void *)(v45 + 32) = v47;
  if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  BOOL v49 = (std::__shared_weak_count *)*((void *)&v62 + 1);
  if (*((void *)&v62 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v62 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
  if (SHIBYTE(v61) < 0)
  {
    operator delete(__p[0]);
    if (++v17 == 8) {
      return v15 + 40 == a2;
    }
    goto LABEL_24;
  }
  if (++v17 != 8) {
    goto LABEL_24;
  }
  return v15 + 40 == a2;
}

void sub_215DD62A0(long long *a1, long long *a2, long long *a3, const void **a4)
{
  sub_215DD5788((const void **)a1, (const void **)a2, (const void **)a3);
  int v8 = *((char *)a4 + 23);
  if (v8 >= 0) {
    int v9 = a4;
  }
  else {
    int v9 = *a4;
  }
  if (v8 >= 0) {
    size_t v10 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v10 = (size_t)a4[1];
  }
  int v11 = *((char *)a3 + 23);
  if (v11 >= 0) {
    size_t v12 = a3;
  }
  else {
    size_t v12 = *(const void **)a3;
  }
  if (v11 >= 0) {
    size_t v13 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v13 = *((void *)a3 + 1);
  }
  if (v13 >= v10) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v13;
  }
  int v15 = memcmp(v9, v12, v14);
  if (v15)
  {
    if ((v15 & 0x80000000) == 0) {
      return;
    }
  }
  else
  {
    BOOL v16 = v10 >= v13;
    if (v10 == v13) {
      BOOL v16 = (unint64_t)a4[3] >= *((void *)a3 + 3);
    }
    if (v16) {
      return;
    }
  }
  int v17 = (const void *)*((void *)a3 + 2);
  long long v18 = *a3;
  int v19 = a4[2];
  *a3 = *(_OWORD *)a4;
  *((void *)a3 + 2) = v19;
  *(_OWORD *)a4 = v18;
  a4[2] = v17;
  unint64_t v20 = (void *)a3 + 3;
  long long v21 = *(long long *)((char *)a3 + 24);
  *((void *)a3 + 3) = 0;
  *((void *)a3 + 4) = 0;
  long long v22 = *(_OWORD *)(a4 + 3);
  a4[3] = 0;
  a4[4] = 0;
  unint64_t v23 = (std::__shared_weak_count *)*((void *)a3 + 4);
  *(long long *)((char *)a3 + 24) = v22;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v58 = v21;
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    long long v21 = v58;
  }
  size_t v24 = (std::__shared_weak_count *)a4[4];
  *(_OWORD *)(a4 + 3) = v21;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  int v25 = *((char *)a3 + 23);
  if (v25 >= 0) {
    BOOL v26 = a3;
  }
  else {
    BOOL v26 = *(const void **)a3;
  }
  if (v25 >= 0) {
    size_t v27 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v27 = *((void *)a3 + 1);
  }
  int v28 = *((char *)a2 + 23);
  if (v28 >= 0) {
    uint64_t v29 = a2;
  }
  else {
    uint64_t v29 = *(const void **)a2;
  }
  if (v28 >= 0) {
    size_t v30 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v30 = *((void *)a2 + 1);
  }
  if (v30 >= v27) {
    size_t v31 = v27;
  }
  else {
    size_t v31 = v30;
  }
  int v32 = memcmp(v26, v29, v31);
  if (v32)
  {
    if ((v32 & 0x80000000) == 0) {
      return;
    }
  }
  else
  {
    BOOL v33 = v27 >= v30;
    if (v27 == v30) {
      BOOL v33 = *v20 >= *((void *)a2 + 3);
    }
    if (v33) {
      return;
    }
  }
  uint64_t v34 = *((void *)a2 + 2);
  long long v35 = *a2;
  uint64_t v36 = *((void *)a3 + 2);
  *a2 = *a3;
  *((void *)a2 + 2) = v36;
  *a3 = v35;
  *((void *)a3 + 2) = v34;
  uint64_t v37 = (void *)a2 + 3;
  long long v38 = *(long long *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  long long v39 = *(long long *)((char *)a3 + 24);
  *unint64_t v20 = 0;
  *((void *)a3 + 4) = 0;
  int v40 = (std::__shared_weak_count *)*((void *)a2 + 4);
  *(long long *)((char *)a2 + 24) = v39;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v59 = v38;
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
    long long v38 = v59;
  }
  long long v41 = (std::__shared_weak_count *)*((void *)a3 + 4);
  *(long long *)((char *)a3 + 24) = v38;
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  int v42 = *((char *)a2 + 23);
  if (v42 >= 0) {
    int v43 = a2;
  }
  else {
    int v43 = *(const void **)a2;
  }
  if (v42 >= 0) {
    size_t v44 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v44 = *((void *)a2 + 1);
  }
  int v45 = *((char *)a1 + 23);
  if (v45 >= 0) {
    uint64_t v46 = a1;
  }
  else {
    uint64_t v46 = *(const void **)a1;
  }
  if (v45 >= 0) {
    size_t v47 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v47 = *((void *)a1 + 1);
  }
  if (v47 >= v44) {
    size_t v48 = v44;
  }
  else {
    size_t v48 = v47;
  }
  int v49 = memcmp(v43, v46, v48);
  if (v49)
  {
    if ((v49 & 0x80000000) == 0) {
      return;
    }
    goto LABEL_76;
  }
  BOOL v50 = v44 >= v47;
  if (v44 == v47) {
    BOOL v50 = *v37 >= *((void *)a1 + 3);
  }
  if (!v50)
  {
LABEL_76:
    uint64_t v51 = *((void *)a1 + 2);
    long long v52 = *a1;
    uint64_t v53 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v53;
    *a2 = v52;
    *((void *)a2 + 2) = v51;
    long long v54 = *(long long *)((char *)a1 + 24);
    *((void *)a1 + 3) = 0;
    *((void *)a1 + 4) = 0;
    long long v55 = *(long long *)((char *)a2 + 24);
    void *v37 = 0;
    *((void *)a2 + 4) = 0;
    long long v56 = (std::__shared_weak_count *)*((void *)a1 + 4);
    *(long long *)((char *)a1 + 24) = v55;
    if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      long long v60 = v54;
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
      long long v54 = v60;
    }
    long long v57 = (std::__shared_weak_count *)*((void *)a2 + 4);
    *(long long *)((char *)a2 + 24) = v54;
    if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
}

void sub_215DD66A4(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, const void **a5)
{
  sub_215DD62A0((long long *)a1, (long long *)a2, (long long *)a3, (const void **)a4);
  int v10 = *((char *)a5 + 23);
  if (v10 >= 0) {
    int v11 = a5;
  }
  else {
    int v11 = *a5;
  }
  if (v10 >= 0) {
    size_t v12 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v12 = (size_t)a5[1];
  }
  int v13 = *((char *)a4 + 23);
  if (v13 >= 0) {
    size_t v14 = a4;
  }
  else {
    size_t v14 = *(long long **)a4;
  }
  if (v13 >= 0) {
    size_t v15 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v15 = *((void *)a4 + 1);
  }
  if (v15 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(v11, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0) {
      return;
    }
  }
  else
  {
    BOOL v18 = v12 >= v15;
    if (v12 == v15) {
      BOOL v18 = (unint64_t)a5[3] >= *((void *)a4 + 3);
    }
    if (v18) {
      return;
    }
  }
  int v19 = (const void *)*((void *)a4 + 2);
  long long v20 = *a4;
  long long v21 = a5[2];
  *a4 = *(_OWORD *)a5;
  *((void *)a4 + 2) = v21;
  *(_OWORD *)a5 = v20;
  a5[2] = v19;
  long long v22 = (void *)a4 + 3;
  long long v23 = *(long long *)((char *)a4 + 24);
  *((void *)a4 + 3) = 0;
  *((void *)a4 + 4) = 0;
  long long v24 = *(_OWORD *)(a5 + 3);
  a5[3] = 0;
  a5[4] = 0;
  int v25 = (std::__shared_weak_count *)*((void *)a4 + 4);
  *(long long *)((char *)a4 + 24) = v24;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v77 = v23;
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    long long v23 = v77;
  }
  BOOL v26 = (std::__shared_weak_count *)a5[4];
  *(_OWORD *)(a5 + 3) = v23;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  int v27 = *((char *)a4 + 23);
  if (v27 >= 0) {
    int v28 = a4;
  }
  else {
    int v28 = *(long long **)a4;
  }
  if (v27 >= 0) {
    size_t v29 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v29 = *((void *)a4 + 1);
  }
  int v30 = *(char *)(a3 + 23);
  if (v30 >= 0) {
    size_t v31 = (const void *)a3;
  }
  else {
    size_t v31 = *(const void **)a3;
  }
  if (v30 >= 0) {
    size_t v32 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v32 = *(void *)(a3 + 8);
  }
  if (v32 >= v29) {
    size_t v33 = v29;
  }
  else {
    size_t v33 = v32;
  }
  int v34 = memcmp(v28, v31, v33);
  if (v34)
  {
    if ((v34 & 0x80000000) == 0) {
      return;
    }
  }
  else
  {
    BOOL v35 = v29 >= v32;
    if (v29 == v32) {
      BOOL v35 = *v22 >= *(void *)(a3 + 24);
    }
    if (v35) {
      return;
    }
  }
  uint64_t v36 = *(void *)(a3 + 16);
  long long v37 = *(_OWORD *)a3;
  uint64_t v38 = *((void *)a4 + 2);
  *(_OWORD *)a3 = *a4;
  *(void *)(a3 + 16) = v38;
  *a4 = v37;
  *((void *)a4 + 2) = v36;
  long long v39 = (void *)(a3 + 24);
  long long v40 = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  long long v41 = *(long long *)((char *)a4 + 24);
  void *v22 = 0;
  *((void *)a4 + 4) = 0;
  int v42 = *(std::__shared_weak_count **)(a3 + 32);
  *(_OWORD *)(a3 + 24) = v41;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v78 = v40;
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    long long v40 = v78;
  }
  int v43 = (std::__shared_weak_count *)*((void *)a4 + 4);
  *(long long *)((char *)a4 + 24) = v40;
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
  int v44 = *(char *)(a3 + 23);
  if (v44 >= 0) {
    int v45 = (const void *)a3;
  }
  else {
    int v45 = *(const void **)a3;
  }
  if (v44 >= 0) {
    size_t v46 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v46 = *(void *)(a3 + 8);
  }
  int v47 = *(char *)(a2 + 23);
  if (v47 >= 0) {
    size_t v48 = (const void *)a2;
  }
  else {
    size_t v48 = *(const void **)a2;
  }
  if (v47 >= 0) {
    size_t v49 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v49 = *(void *)(a2 + 8);
  }
  if (v49 >= v46) {
    size_t v50 = v46;
  }
  else {
    size_t v50 = v49;
  }
  int v51 = memcmp(v45, v48, v50);
  if (v51)
  {
    if ((v51 & 0x80000000) == 0) {
      return;
    }
  }
  else
  {
    BOOL v52 = v46 >= v49;
    if (v46 == v49) {
      BOOL v52 = *v39 >= *(void *)(a2 + 24);
    }
    if (v52) {
      return;
    }
  }
  uint64_t v53 = *(void *)(a2 + 16);
  long long v54 = *(_OWORD *)a2;
  uint64_t v55 = *(void *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v55;
  *(_OWORD *)a3 = v54;
  *(void *)(a3 + 16) = v53;
  long long v56 = (void *)(a2 + 24);
  long long v57 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  long long v58 = *(_OWORD *)(a3 + 24);
  *long long v39 = 0;
  *(void *)(a3 + 32) = 0;
  long long v59 = *(std::__shared_weak_count **)(a2 + 32);
  *(_OWORD *)(a2 + 24) = v58;
  if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v79 = v57;
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
    long long v57 = v79;
  }
  long long v60 = *(std::__shared_weak_count **)(a3 + 32);
  *(_OWORD *)(a3 + 24) = v57;
  if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  int v61 = *(char *)(a2 + 23);
  if (v61 >= 0) {
    long long v62 = (const void *)a2;
  }
  else {
    long long v62 = *(const void **)a2;
  }
  if (v61 >= 0) {
    size_t v63 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v63 = *(void *)(a2 + 8);
  }
  int v64 = *(char *)(a1 + 23);
  if (v64 >= 0) {
    unint64_t v65 = (const void *)a1;
  }
  else {
    unint64_t v65 = *(const void **)a1;
  }
  if (v64 >= 0) {
    size_t v66 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v66 = *(void *)(a1 + 8);
  }
  if (v66 >= v63) {
    size_t v67 = v63;
  }
  else {
    size_t v67 = v66;
  }
  int v68 = memcmp(v62, v65, v67);
  if (v68)
  {
    if ((v68 & 0x80000000) == 0) {
      return;
    }
    goto LABEL_103;
  }
  BOOL v69 = v63 >= v66;
  if (v63 == v66) {
    BOOL v69 = *v56 >= *(void *)(a1 + 24);
  }
  if (!v69)
  {
LABEL_103:
    uint64_t v70 = *(void *)(a1 + 16);
    long long v71 = *(_OWORD *)a1;
    uint64_t v72 = *(void *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v72;
    *(_OWORD *)a2 = v71;
    *(void *)(a2 + 16) = v70;
    long long v73 = *(_OWORD *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    long long v74 = *(_OWORD *)(a2 + 24);
    void *v56 = 0;
    *(void *)(a2 + 32) = 0;
    long long v75 = *(std::__shared_weak_count **)(a1 + 32);
    *(_OWORD *)(a1 + 24) = v74;
    if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      long long v80 = v73;
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
      long long v73 = v80;
    }
    long long v76 = *(std::__shared_weak_count **)(a2 + 32);
    *(_OWORD *)(a2 + 24) = v73;
    if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
}

void sub_215DD6BEC(uint64_t a1, const void *a2)
{
  sub_21575FD94(&v2, a2);
}

void sub_215DD6D50(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  BOOL v4 = a1[2];
  int v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      int v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    uint64_t v7 = (char *)*a1;
    uint64_t v8 = v5 - (unsigned char *)*a1;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      sub_215738AC0();
    }
    uint64_t v11 = v4 - v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_215738AD8();
      }
      int v13 = operator new(8 * v12);
    }
    else
    {
      int v13 = 0;
    }
    size_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    size_t v16 = &v13[8 * v12];
    bzero(v14, v15);
    int v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_32;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_32;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      int v6 = &v5[-v20];
      v14 -= v20;
      long long v21 = &v13[8 * v9 - 16];
      long long v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *long long v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      int v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

uint64_t sub_215DD6F04(uint64_t **a1, uint64_t a2)
{
  CFTypeID v4 = CFGetTypeID(*(CFTypeRef *)a2);
  CFTypeID v5 = v4;
  uint64_t v7 = **a1;
  uint64_t v6 = (*a1)[1];
  if (!v7) {
    return 0;
  }
  uint64_t v8 = 8 * v7;
  uint64_t v9 = (void *)(*a1)[1];
  while (*v9 != v4)
  {
    ++v9;
    v8 -= 8;
    if (!v8)
    {
      uint64_t v9 = (void *)(v6 + 8 * v7);
      break;
    }
  }
  if (v7 == ((uint64_t)v9 - v6) >> 3) {
    return 0;
  }
  if (v4 == CFDictionaryGetTypeID())
  {
    CFTypeRef v11 = *(CFTypeRef *)a2;
    uint64_t v10 = *(void *)(a2 + 8);
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    if (v11)
    {
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (CFGetTypeID(v11) == TypeID)
      {
        CFRetain(v11);
        operator new();
      }
    }
    sub_215DD6BEC((uint64_t)v18, 0);
  }
  if (v5 == CFArrayGetTypeID())
  {
    CFTypeRef v13 = *(CFTypeRef *)a2;
    size_t v14 = *(std::__shared_weak_count **)(a2 + 8);
    v18[0] = *(void *)a2;
    v18[1] = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v13)
    {
      CFTypeID v15 = CFArrayGetTypeID();
      if (CFGetTypeID(v13) == v15)
      {
        CFRetain(v13);
        operator new();
      }
    }
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    if (CFArrayGetCount(0))
    {
      ValueAtIndex = CFArrayGetValueAtIndex(0, 0);
      sub_215A2E08C(v18, ValueAtIndex);
    }
  }
  return 1;
}

void sub_215DD745C(void *a1)
{
  __cxa_begin_catch(a1);
  CFRelease(v1);
  __cxa_rethrow();
}

void sub_215DD746C()
{
}

void sub_215DD7494(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  __cxa_end_catch();
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DD74A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DD74CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DD74E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_215733368((uint64_t)va1);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DD7510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_215733368((uint64_t)va);
  sub_215733368((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_215DD752C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215DD7540(uint64_t **a1, CFTypeRef *a2, const void *a3)
{
  v13[4] = a3;
  CFTypeID v5 = CFGetTypeID(*a2);
  CFTypeID v6 = v5;
  uint64_t v8 = **a1;
  uint64_t v7 = (*a1)[1];
  if (!v8) {
    return 0;
  }
  uint64_t v9 = 8 * v8;
  uint64_t v10 = (void *)(*a1)[1];
  while (*v10 != v5)
  {
    ++v10;
    v9 -= 8;
    if (!v9)
    {
      uint64_t v10 = (void *)(v7 + 8 * v8);
      break;
    }
  }
  if (v8 == ((uint64_t)v10 - v7) >> 3) {
    return 0;
  }
  if (v5 == CFDictionaryGetTypeID()) {
    sub_215A345F8((uint64_t)&cf, (uint64_t)a2);
  }
  if (v6 == CFArrayGetTypeID()) {
    sub_215A345F8((uint64_t)v13, (uint64_t)a2);
  }
  return 1;
}

void sub_215DD7A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DD7A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DD7A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DD7A78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_215733368((uint64_t)va1);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DD7A94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DD7AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_215733368((uint64_t)va);
  sub_215733368((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_215DD7AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DD7AD8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684BD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215DD7AF8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684BD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215DD7B4C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      return;
    }
  }
  else if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    return;
  }
  uint64_t v3 = *(void **)(a1 + 24);

  operator delete(v3);
}

void sub_215DD7BE8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684C20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215DD7C08(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684C20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215DD7C5C(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2)
  {
    uint64_t v3 = a1[7];
    CFTypeID v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      CFTypeID v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  uint64_t v6 = a1[3];
  if (v6)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = (void *)a1[3];
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0) {
          operator delete(*(void **)(v7 - 24));
        }
        v7 -= 24;
      }
      while (v7 != v6);
      uint64_t v8 = (void *)a1[3];
    }
    a1[4] = v6;
    operator delete(v8);
  }
}

void sub_215DD7D78()
{
}

void sub_215DD7FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_free_exception(v9);
  sub_215733368((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_215DD7FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215DD800C()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  sub_215DD10F4((int)theDict, Mutable, 0);
}

void sub_215DD837C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a10 && !atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  if (a12 && !atomic_fetch_add(&a12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
    std::__shared_weak_count::__release_weak(a12);
  }
  if (a14)
  {
    if (!atomic_fetch_add(&a14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215DD8470()
{
}

void sub_215DD86D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_free_exception(v9);
  sub_215733368((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_215DD86F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215DD8704(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 112))
  {
    if (*(unsigned char *)(a2 + 40))
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      uint64_t v3 = &v4;
      sub_215DD8470();
    }
    long long v2 = 0uLL;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v3 = &v4;
    sub_215DD8470();
  }
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v3 = &v4;
  sub_215DD8470();
}

void sub_215DD8A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
}

void sub_215DD8B3C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x215DD8B24);
}

void sub_215DD8B68()
{
  v1[0] = 0;
  v1[1] = 0;
  std::string __p = v1;
  sub_215DD8470();
}

void sub_215DD9108()
{
}

void sub_215DD9174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a10 && !atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  if (a16) {
    JUMPOUT(0x215DD91D8);
  }
  JUMPOUT(0x215DD925CLL);
}

void sub_215DD9220(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x215DD925CLL);
}

void sub_215DD9240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
}

void sub_215DD9258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14)
  {
    if (!atomic_fetch_add(&a14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215DD92B0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215DD92E8(uint64_t a1)
{
  int v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t sub_215DD930C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP9__CFErrorEC1ES4_EUlS4_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP9__CFErrorEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP9__CFErrorEC1ES4_EUlS4_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP9__CFErrorEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void *sub_215DD9380@<X0>(CFNumberRef *a1@<X0>, uint64_t a2@<X8>)
{
  switch(CFNumberGetType(*a1))
  {
    case kCFNumberSInt16Type:
    case kCFNumberShortType:
      CFNumberRef v16 = *a1;
      LOWORD(valuePtr) = 0;
      int Type = CFNumberGetType(v16);
      CFNumberGetValue(v16, (CFNumberType)Type, &valuePtr);
      LOWORD(v16) = valuePtr;
      *(unsigned char *)a2 = 6;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 8) = 0;
      unint64_t v18 = operator new(2uLL);
      *(void *)(a2 + 8) = v18;
      *unint64_t v18 = (_WORD)v16;
      BOOL result = v18 + 1;
      *(void *)(a2 + 16) = result;
      *(void *)(a2 + 24) = result;
      break;
    case kCFNumberSInt32Type:
    case kCFNumberIntType:
      CFNumberRef v19 = *a1;
      LODWORD(valuePtr) = 0;
      int v20 = CFNumberGetType(v19);
      CFNumberGetValue(v19, (CFNumberType)v20, &valuePtr);
      LODWORD(v19) = valuePtr;
      *(unsigned char *)a2 = 7;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 8) = 0;
      long long v21 = operator new(4uLL);
      *(void *)(a2 + 8) = v21;
      *long long v21 = v19;
      BOOL result = v21 + 1;
      *(void *)(a2 + 16) = result;
      *(void *)(a2 + 24) = result;
      break;
    case kCFNumberSInt64Type:
    case kCFNumberLongType:
    case kCFNumberLongLongType:
    case kCFNumberCFIndexType:
    case kCFNumberNSIntegerType:
      CFNumberRef v4 = *a1;
      uint64_t valuePtr = 0;
      int v5 = CFNumberGetType(v4);
      CFNumberGetValue(v4, (CFNumberType)v5, &valuePtr);
      uint64_t v6 = valuePtr;
      *(unsigned char *)a2 = 8;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 8) = 0;
      uint64_t v7 = operator new(8uLL);
      *(void *)(a2 + 8) = v7;
      void *v7 = v6;
      BOOL result = v7 + 1;
      *(void *)(a2 + 16) = result;
      *(void *)(a2 + 24) = result;
      break;
    case kCFNumberFloat32Type:
    case kCFNumberFloatType:
      CFNumberRef v22 = *a1;
      LODWORD(valuePtr) = 0;
      int v23 = CFNumberGetType(v22);
      CFNumberGetValue(v22, (CFNumberType)v23, &valuePtr);
      int v24 = valuePtr;
      *(unsigned char *)a2 = 11;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 8) = 0;
      uint64_t v25 = operator new(4uLL);
      *(void *)(a2 + 8) = v25;
      *uint64_t v25 = v24;
      BOOL result = v25 + 1;
      *(void *)(a2 + 16) = result;
      *(void *)(a2 + 24) = result;
      break;
    case kCFNumberFloat64Type:
    case kCFNumberDoubleType:
    case kCFNumberCGFloatType:
      CFNumberRef v9 = *a1;
      uint64_t valuePtr = 0;
      int v10 = CFNumberGetType(v9);
      CFNumberGetValue(v9, (CFNumberType)v10, &valuePtr);
      uint64_t v11 = valuePtr;
      *(unsigned char *)a2 = 12;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 8) = 0;
      unint64_t v12 = operator new(8uLL);
      *(void *)(a2 + 8) = v12;
      void *v12 = v11;
      BOOL result = v12 + 1;
      *(void *)(a2 + 16) = result;
      *(void *)(a2 + 24) = result;
      break;
    default:
      CFNumberRef v13 = *a1;
      LOBYTE(valuePtr) = 0;
      int v14 = CFNumberGetType(v13);
      CFNumberGetValue(v13, (CFNumberType)v14, &valuePtr);
      LOBYTE(v13) = valuePtr;
      *(unsigned char *)a2 = 5;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 8) = 0;
      CFTypeID v15 = operator new(1uLL);
      *(void *)(a2 + 8) = v15;
      *CFTypeID v15 = (_BYTE)v13;
      BOOL result = v15 + 1;
      *(void *)(a2 + 16) = result;
      *(void *)(a2 + 24) = result;
      break;
  }
  return result;
}

void sub_215DD9634(int a1, CFTypeRef cf, int a3)
{
  if (a3) {
    sub_215A2DAFC(&v3, cf);
  }
  CFTypeRef v3 = cf;
  operator new();
}

void sub_215DD9740(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215DD9758(_Unwind_Exception *a1)
{
}

void sub_215DD976C(uint64_t a1, unsigned __int8 *a2)
{
  switch(*a2)
  {
    case 1u:
      LOBYTE(__p[0]) = 6;
      unint64_t v12 = operator new(2uLL);
      __p[1] = v12;
      _WORD *v12 = 0x7FFF;
      unint64_t v18 = v12 + 1;
      CFNumberRef v19 = v12 + 1;
      int v13 = sub_215E0AEDC(a2, __p);
      if (__p[1])
      {
        unint64_t v18 = __p[1];
        operator delete(__p[1]);
      }
      int v5 = *(unsigned __int16 *)sub_215E0A66C((uint64_t)a2);
      if (v13 == 1) {
        goto LABEL_25;
      }
      goto LABEL_23;
    case 2u:
      LOBYTE(__p[0]) = 7;
      uint64_t v8 = operator new(4uLL);
      __p[1] = v8;
      *uint64_t v8 = 0x7FFFFFFF;
      unint64_t v18 = v8 + 1;
      CFNumberRef v19 = v8 + 1;
      int v9 = sub_215E0AEDC(a2, __p);
      if (__p[1])
      {
        unint64_t v18 = __p[1];
        operator delete(__p[1]);
      }
      uint64_t v10 = *(unsigned int *)sub_215E0A75C((uint64_t)a2);
      if (v9 == 1) {
        goto LABEL_30;
      }
      LODWORD(valuePtr) = v10;
      goto LABEL_26;
    case 3u:
      LOBYTE(__p[0]) = 8;
      int v14 = operator new(8uLL);
      __p[1] = v14;
      void *v14 = 0x7FFFFFFFFFFFFFFFLL;
      unint64_t v18 = v14 + 1;
      CFNumberRef v19 = v14 + 1;
      int v15 = sub_215E0AEDC(a2, __p);
      if (__p[1])
      {
        unint64_t v18 = __p[1];
        operator delete(__p[1]);
      }
      if (v15 == 1)
      {
        uint64_t v10 = -1;
      }
      else
      {
        uint64_t v11 = (uint64_t *)sub_215E0A84C((uint64_t)a2);
LABEL_29:
        uint64_t v10 = *v11;
      }
LABEL_30:
      uint64_t valuePtr = v10;
      CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFNumberType v7 = kCFNumberSInt64Type;
LABEL_31:
      CFNumberRef v16 = CFNumberCreate(v6, v7, &valuePtr);
      sub_215DD9634((int)__p, v16, 0);
    case 4u:
    case 9u:
    case 0xAu:
      __break(1u);
      return;
    case 5u:
      LOBYTE(v5) = *(unsigned char *)sub_215E0A93C((uint64_t)a2);
      goto LABEL_21;
    case 6u:
      LOWORD(v5) = *(_WORD *)sub_215E0AA2C((uint64_t)a2);
      goto LABEL_23;
    case 7u:
      int v5 = *(_DWORD *)sub_215E0AB1C((uint64_t)a2);
LABEL_25:
      LODWORD(valuePtr) = v5;
LABEL_26:
      CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFNumberType v7 = kCFNumberSInt32Type;
      goto LABEL_31;
    case 8u:
      uint64_t v11 = (uint64_t *)sub_215E0AC0C((uint64_t)a2);
      goto LABEL_29;
    case 0xBu:
      LODWORD(valuePtr) = *(_DWORD *)sub_215E0ACFC((uint64_t)a2);
      CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFNumberType v7 = kCFNumberFloat32Type;
      goto LABEL_31;
    case 0xCu:
      uint64_t valuePtr = *(void *)sub_215E0ADEC((uint64_t)a2);
      CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFNumberType v7 = kCFNumberFloat64Type;
      goto LABEL_31;
    default:
      LOBYTE(__p[0]) = 5;
      CFTypeRef v3 = operator new(1uLL);
      __p[1] = v3;
      *CFTypeRef v3 = 127;
      unint64_t v18 = v3 + 1;
      CFNumberRef v19 = v3 + 1;
      int v4 = sub_215E0AEDC(a2, __p);
      if (__p[1])
      {
        unint64_t v18 = __p[1];
        operator delete(__p[1]);
      }
      LOWORD(v5) = *(unsigned __int8 *)sub_215E0A408((uint64_t)a2);
      if (v4 == 1)
      {
LABEL_23:
        LOWORD(valuePtr) = v5;
        CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberType v7 = kCFNumberSInt16Type;
      }
      else
      {
LABEL_21:
        LOBYTE(valuePtr) = v5;
        CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFNumberType v7 = kCFNumberSInt8Type;
      }
      goto LABEL_31;
  }
}

void sub_215DD9A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DD9A94(CFTypeID a1)
{
  CFStringRef v1 = CFCopyTypeIDDescription(a1);
  sub_215CE8B74((int)&v2, v1, 0);
}

void sub_215DD9B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_215DD9B60(void *a1, CFTypeRef cf)
{
  CFTypeRef v9 = cf;
  if (cf)
  {
    v7[0] = (void *)CFCopyDescription(cf);
    operator new();
  }
  int v11 = 0;
  sub_215748F40((uint64_t)&v13, (uint64_t)&__p, &v9);
  if (v11 == -1) {
    sub_215742D4C();
  }
  int v13 = &v12;
  ((void (*)(void **__return_ptr, char **, void **))off_26C684D10[v11])(v7, &v13, &__p);
  if (v11 != -1) {
    ((void (*)(char **, void **))off_26C684CF8[v11])(&v13, &__p);
  }
  if ((v8 & 0x80u) == 0) {
    CFTypeRef v3 = v7;
  }
  else {
    CFTypeRef v3 = (void **)v7[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)v7[1];
  }
  int v5 = sub_215731D94(a1, (uint64_t)v3, v4);
  if ((char)v8 < 0) {
    operator delete(v7[0]);
  }
  return v5;
}

void sub_215DD9DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DD9DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DD9DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215DD9DDC(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215DD9DF4(_Unwind_Exception *a1)
{
}

void sub_215DD9E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DD9E18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19 && a18 < 0) {
    operator delete(__p);
  }
  sub_215733368((uint64_t)&a9);
  JUMPOUT(0x215DD9E3CLL);
}

void sub_215DD9E44(int a1, CFTypeRef cf, int a3)
{
  if (a3) {
    sub_215BA0E58(&v3, cf);
  }
  CFTypeRef v3 = cf;
  operator new();
}

void sub_215DD9F50(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215DD9F68(_Unwind_Exception *a1)
{
}

void sub_215DD9F7C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_215738B0C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  sub_215DD0B64((uint64_t)__p);
}

void sub_215DDA088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17 && !atomic_fetch_add(&a17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
    std::__shared_weak_count::__release_weak(a17);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DDA0F4(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  CFURLRef v3 = *(CFURLRef *)a1;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2
    && (atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (v3) {
      goto LABEL_7;
    }
  }
  else if (v3)
  {
    goto LABEL_7;
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/src/URLRef.cpp", 64, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
LABEL_11:
    abort();
  }
LABEL_7:
  CFURLRef v5 = *(CFURLRef *)a1;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4
    && (atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5) {
      goto LABEL_13;
    }
  }
  else if (v5)
  {
    goto LABEL_13;
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/src/URLRef.cpp", 58, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_11;
  }
LABEL_13:
  CFStringRef v6 = CFURLCopyScheme(*(CFURLRef *)a1);
  sub_215CE8B74((int)v7, v6, 0);
}

void sub_215DDA468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a18)
  {
    if (a17 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_215DDA4C0(__n128 *a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  __n128 v2 = *a1;
  sub_215E08A88(&v3, &v2, 16);
  return v3.n128_u64[0];
}

void sub_215DDA524(int a1, CFTypeRef cf, int a3)
{
  if (a3) {
    sub_2157534B4(&v3, cf);
  }
  CFTypeRef v3 = cf;
  operator new();
}

void sub_215DDA630(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215DDA648(_Unwind_Exception *a1)
{
}

const char *sub_215DDA65C()
{
  return "json parsing";
}

double sub_215DDA668@<D0>(int a1@<W1>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 'e':
      *(unsigned char *)(a2 + 23) = 12;
      strcpy((char *)a2, "syntax error");
      break;
    case 'f':
      CFTypeRef v3 = (char *)operator new(0x28uLL);
      *(void *)a2 = v3;
      *(_OWORD *)(a2 + 8) = xmmword_215ED4B00;
      *(void *)&long long v4 = *(void *)"to_unicode failed or surrogate error";
      strcpy(v3, "to_unicode failed or surrogate error");
      break;
    case 'g':
      CFURLRef v5 = (char *)operator new(0x28uLL);
      *(void *)a2 = v5;
      *(_OWORD *)(a2 + 8) = xmmword_215EF8EB0;
      CFStringRef v6 = "code points above 0x10FFFF are invalid";
      goto LABEL_6;
    case 'h':
      CFURLRef v5 = (char *)operator new(0x28uLL);
      *(void *)a2 = v5;
      *(_OWORD *)(a2 + 8) = xmmword_215EF8EB0;
      CFStringRef v6 = "json patch must be an array of objects";
LABEL_6:
      long long v4 = *(_OWORD *)v6;
      long long v7 = *((_OWORD *)v6 + 1);
      *(_OWORD *)CFURLRef v5 = *(_OWORD *)v6;
      *((_OWORD *)v5 + 1) = v7;
      *(void *)(v5 + 3std::__fs::filesystem::__rename(__from, __to, 0) = *(void *)(v6 + 30);
      v5[38] = 0;
      break;
    case 'i':
      uint64_t v8 = (char *)operator new(0x20uLL);
      *(void *)a2 = v8;
      *(_OWORD *)(a2 + 8) = xmmword_215ECEB00;
      *(void *)&long long v4 = *(void *)"invalid json patch value";
      strcpy(v8, "invalid json patch value");
      break;
    case 'j':
      *(unsigned char *)(a2 + 23) = 19;
      *(void *)&long long v4 = *(void *)"invalid array index";
      strcpy((char *)a2, "invalid array index");
      break;
    case 'k':
      *(unsigned char *)(a2 + 23) = 20;
      *(void *)&long long v4 = *(void *)"invalid json pointer";
      strcpy((char *)a2, "invalid json pointer");
      break;
    case 'l':
      CFTypeRef v9 = (char *)operator new(0x19uLL);
      *(void *)a2 = v9;
      *(_OWORD *)(a2 + 8) = xmmword_215E975B0;
      *(void *)&long long v4 = *(void *)"invalid escape sequence";
      strcpy(v9, "invalid escape sequence");
      break;
    case 'm':
      uint64_t v10 = (char *)operator new(0x20uLL);
      *(void *)a2 = v10;
      *(_OWORD *)(a2 + 8) = xmmword_215E9AB80;
      strcpy(v10, "array index must be a number");
      *(void *)&long long v4 = *(void *)"must be a number";
      break;
    case 'n':
      int v11 = (char *)operator new(0x20uLL);
      *(void *)a2 = v11;
      *(_OWORD *)(a2 + 8) = xmmword_215EB32C0;
      strcpy(v11, "unexpected end of byte vector");
      *(void *)&long long v4 = *(void *)"d of byte vector";
      break;
    case 'p':
      char v12 = (char *)operator new(0x30uLL);
      *(void *)a2 = v12;
      *(_OWORD *)(a2 + 8) = xmmword_215ECEAF0;
      strcpy(v12, "used unsupported features from different format");
      *(void *)&long long v4 = *(void *)"different format";
      break;
    case 'q':
      int v13 = (char *)operator new(0x30uLL);
      *(void *)a2 = v13;
      *(_OWORD *)(a2 + 8) = xmmword_215EE3190;
      strcpy(v13, "used unsupported key type (must be string)");
      *(void *)&long long v4 = *(void *)"(must be string)";
      break;
    default:
      *(unsigned char *)(a2 + 23) = 13;
      strcpy((char *)a2, "unknown error");
      break;
  }
  return *(double *)&v4;
}

void sub_215DDA9D4(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  v29[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = a1[2];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890628, memory_order_acquire) & 1) == 0)
  {
    int v17 = a1;
    int v16 = __cxa_guard_acquire(&qword_267890628);
    a1 = v17;
    if (v16)
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, off_26ACF2450, &dword_21572C000);
      __cxa_guard_release(&qword_267890628);
      a1 = v17;
    }
  }
  long long v4 = (char *)(*(uint64_t (**)(unsigned int *))(*(void *)a1 + 16))(a1);
  sub_2157CFEA8((uint64_t)&__p, v4);
  int v10 = v20;
  if (v20)
  {
    int v11 = __p;
    v29[0] = v19;
    *(void *)((char *)v29 + 7) = *(void *)((char *)&v19 + 7);
    char v5 = HIBYTE(v19);
    long long v19 = 0uLL;
    std::string __p = 0;
    int v12 = v26;
    if (v26)
    {
LABEL_4:
      int v13 = v21;
      v28[0] = v22;
      *(void *)((char *)v28 + 7) = *(void *)((char *)&v22 + 7);
      char v7 = HIBYTE(v22);
      long long v21 = 0;
      long long v22 = 0uLL;
      uint64_t v8 = v23;
      CFStringRef v6 = v24;
      v27[0] = v25;
      *(void *)((char *)v27 + 7) = *(void *)((char *)&v25 + 7);
      char v9 = HIBYTE(v25);
      int v24 = 0;
      long long v25 = 0uLL;
      goto LABEL_7;
    }
  }
  else
  {
    int v11 = 0;
    int v12 = v26;
    if (v26) {
      goto LABEL_4;
    }
  }
  int v13 = 0;
LABEL_7:
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = off_26ACF2450;
  *(unsigned char *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  *(unsigned char *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  if (v10)
  {
    uint64_t v14 = v29[0];
    *(void *)(a2 + 16) = v11;
    *(void *)(a2 + 24) = v14;
    *(void *)(a2 + 31) = *(void *)((char *)v29 + 7);
    *(unsigned char *)(a2 + 39) = v5;
    v29[0] = 0;
    *(void *)((char *)v29 + 7) = 0;
    *(unsigned char *)(a2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 1;
    int v11 = 0;
    char v5 = 0;
  }
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 104) = 0;
  if (v12)
  {
    uint64_t v15 = v28[0];
    *(void *)(a2 + 48) = v13;
    *(void *)(a2 + 56) = v15;
    *(void *)(a2 + 63) = *(void *)((char *)v28 + 7);
    *(unsigned char *)(a2 + 71) = v7;
    v28[0] = 0;
    *(void *)((char *)v28 + 7) = 0;
    *(void *)(a2 + 72) = v8;
    *(void *)(a2 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v6;
    *(void *)(a2 + 88) = v27[0];
    *(void *)(a2 + 95) = *(void *)((char *)v27 + 7);
    *(unsigned char *)(a2 + 103) = v9;
    v27[0] = 0;
    *(void *)((char *)v27 + 7) = 0;
    *(unsigned char *)(a2 + 104) = 1;
  }
  *(unsigned char *)(a2 + 112) = 1;
  if (v10 && v5 < 0)
  {
    operator delete(v11);
    int v12 = v26;
  }
  if (v12)
  {
    if ((SHIBYTE(v25) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v22) & 0x80000000) == 0) {
        goto LABEL_17;
      }
LABEL_22:
      operator delete(v21);
      if (!v20) {
        return;
      }
      goto LABEL_18;
    }
    operator delete(v24);
    if (SHIBYTE(v22) < 0) {
      goto LABEL_22;
    }
  }
LABEL_17:
  if (!v20) {
    return;
  }
LABEL_18:
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
}

void sub_215DDAC48(std::error_category *a1)
{
  std::error_category::~error_category(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215DDAC80(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a2 + 8))
  {
    DWORD2(v25) = 0;
    sub_215DDDDD8();
  }
  int v5 = *(_DWORD *)a2;
  if (*(unsigned char *)(a2 + 16))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    CFStringRef v6 = (std::__shared_weak_count *)operator new(0x28uLL);
    v6->__shared_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684DE0;
    v6->__shared_weak_owners_ = 0;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684E30;
    v6[1].__shared_owners_ = (uint64_t)a3;
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v23 = v6 + 1;
    int v24 = v6;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    char v7 = localeconv();
    size_t v29 = v7;
    thousands_sep = v7->thousands_sep;
    if (thousands_sep) {
      LOBYTE(thousands_sep) = *thousands_sep;
    }
    char v30 = (char)thousands_sep;
    decimal_poinint t = v7->decimal_point;
    if (v7->decimal_point) {
      LOBYTE(decimal_point) = *decimal_point;
    }
    char v31 = (char)decimal_point;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    char v64 = 32;
    int v10 = operator new(0x208uLL);
    std::string __p = v10;
    unint64_t v67 = 0x8000000000000208;
    uint64_t v66 = 512;
    *(void *)&long long v11 = 0x2020202020202020;
    *((void *)&v11 + 1) = 0x2020202020202020;
    *int v10 = v11;
    v10[1] = v11;
    void v10[2] = v11;
    v10[3] = v11;
    v10[4] = v11;
    void v10[5] = v11;
    v10[6] = v11;
    v10[7] = v11;
    v10[8] = v11;
    v10[9] = v11;
    v10[10] = v11;
    v10[11] = v11;
    v10[12] = v11;
    v10[13] = v11;
    v10[14] = v11;
    v10[15] = v11;
    v10[16] = v11;
    v10[17] = v11;
    v10[18] = v11;
    v10[19] = v11;
    v10[20] = v11;
    v10[21] = v11;
    v10[22] = v11;
    v10[23] = v11;
    v10[24] = v11;
    v10[25] = v11;
    v10[26] = v11;
    v10[27] = v11;
    unsigned char v10[28] = v11;
    v10[29] = v11;
    v10[30] = v11;
    v10[31] = v11;
    *((unsigned char *)v10 + 512) = 0;
    int v68 = 0;
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    sub_215DDE02C((uint64_t)&v23, (uint64_t)a1, v5 >= 0, v5 & ~(v5 >> 31), 0);
    goto LABEL_10;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v13 = (std::__shared_weak_count *)operator new(0x28uLL);
  v13->__shared_owners_ = 0;
  p_shared_owners = &v13->__shared_owners_;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684DE0;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684E30;
  v13[1].__shared_owners_ = (uint64_t)a3;
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v23 = v13 + 1;
  int v24 = v13;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v15 = localeconv();
  size_t v29 = v15;
  int v16 = v15->thousands_sep;
  if (v16) {
    LOBYTE(v16) = *v16;
  }
  char v30 = (char)v16;
  int v17 = v15->decimal_point;
  if (v15->decimal_point) {
    LOBYTE(v17) = *v17;
  }
  char v31 = (char)v17;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  char v64 = 32;
  unint64_t v18 = operator new(0x208uLL);
  std::string __p = v18;
  unint64_t v67 = 0x8000000000000208;
  uint64_t v66 = 512;
  *(void *)&long long v19 = 0x2020202020202020;
  *((void *)&v19 + 1) = 0x2020202020202020;
  *unint64_t v18 = v19;
  v18[1] = v19;
  void v18[2] = v19;
  void v18[3] = v19;
  v18[4] = v19;
  v18[5] = v19;
  v18[6] = v19;
  v18[7] = v19;
  v18[8] = v19;
  v18[9] = v19;
  v18[10] = v19;
  v18[11] = v19;
  v18[12] = v19;
  v18[13] = v19;
  v18[14] = v19;
  v18[15] = v19;
  v18[16] = v19;
  v18[17] = v19;
  v18[18] = v19;
  v18[19] = v19;
  v18[20] = v19;
  v18[21] = v19;
  v18[22] = v19;
  v18[23] = v19;
  v18[24] = v19;
  v18[25] = v19;
  v18[26] = v19;
  v18[27] = v19;
  v18[28] = v19;
  v18[29] = v19;
  v18[30] = v19;
  v18[31] = v19;
  *((unsigned char *)v18 + 512) = 0;
  int v68 = 0;
  BOOL v69 = v13 + 1;
  uint64_t v70 = v13;
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  char v71 = 32;
  unsigned __int8 v20 = operator new(0x208uLL);
  uint64_t v72 = v20;
  long long v73 = xmmword_215EF8EF0;
  *(void *)&long long v21 = 0x2020202020202020;
  *((void *)&v21 + 1) = 0x2020202020202020;
  *unsigned __int8 v20 = v21;
  v20[1] = v21;
  uint64_t v20[2] = v21;
  void v20[3] = v21;
  v20[4] = v21;
  v20[5] = v21;
  v20[6] = v21;
  v20[7] = v21;
  v20[8] = v21;
  v20[9] = v21;
  v20[10] = v21;
  v20[11] = v21;
  v20[12] = v21;
  v20[13] = v21;
  v20[14] = v21;
  v20[15] = v21;
  v20[16] = v21;
  v20[17] = v21;
  v20[18] = v21;
  v20[19] = v21;
  v20[20] = v21;
  v20[21] = v21;
  v20[22] = v21;
  v20[23] = v21;
  v20[24] = v21;
  v20[25] = v21;
  v20[26] = v21;
  v20[27] = v21;
  unsigned char v20[28] = v21;
  v20[29] = v21;
  v20[30] = v21;
  v20[31] = v21;
  *((unsigned char *)v20 + 512) = 0;
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_23;
    }
LABEL_29:
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    goto LABEL_23;
  }
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_29;
  }
LABEL_23:
  sub_215DE05EC((uint64_t)&v23, a1, v5 >= 0, v5 & ~(v5 >> 31), 0);
  if (SHIBYTE(v73) < 0) {
    operator delete(v72);
  }
  long long v22 = v70;
  if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_10:
  if (SHIBYTE(v67) < 0) {
    operator delete(__p);
  }
  int v12 = v24;
  if (v24)
  {
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_215DDB2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    operator delete((void *)STACK[0x2D0]);
  }
  long long v19 = (std::__shared_weak_count *)STACK[0x2C0];
  if (STACK[0x2C0] && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  if (SLOBYTE(STACK[0x2AF]) < 0) {
    operator delete((void *)STACK[0x298]);
  }
  if (a17 && !atomic_fetch_add(&a17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
    std::__shared_weak_count::__release_weak(a17);
  }
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  _Unwind_Resume(a1);
}

void sub_215DDB540(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a2 + 8)) {
    operator new();
  }
  int v5 = *(_DWORD *)a2;
  if (*(unsigned char *)(a2 + 16))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    CFStringRef v6 = (std::__shared_weak_count *)operator new(0x28uLL);
    v6->__shared_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684DE0;
    v6->__shared_weak_owners_ = 0;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684E30;
    v6[1].__shared_owners_ = (uint64_t)a3;
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v23 = v6 + 1;
    int v24 = v6;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    char v7 = localeconv();
    size_t v29 = v7;
    thousands_sep = v7->thousands_sep;
    if (thousands_sep) {
      LOBYTE(thousands_sep) = *thousands_sep;
    }
    char v30 = (char)thousands_sep;
    decimal_poinint t = v7->decimal_point;
    if (v7->decimal_point) {
      LOBYTE(decimal_point) = *decimal_point;
    }
    char v31 = (char)decimal_point;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    char v64 = 32;
    int v10 = operator new(0x208uLL);
    std::string __p = v10;
    unint64_t v67 = 0x8000000000000208;
    uint64_t v66 = 512;
    *(void *)&long long v11 = 0x2020202020202020;
    *((void *)&v11 + 1) = 0x2020202020202020;
    *int v10 = v11;
    v10[1] = v11;
    void v10[2] = v11;
    v10[3] = v11;
    v10[4] = v11;
    void v10[5] = v11;
    v10[6] = v11;
    v10[7] = v11;
    v10[8] = v11;
    v10[9] = v11;
    v10[10] = v11;
    v10[11] = v11;
    v10[12] = v11;
    v10[13] = v11;
    v10[14] = v11;
    v10[15] = v11;
    v10[16] = v11;
    v10[17] = v11;
    v10[18] = v11;
    v10[19] = v11;
    v10[20] = v11;
    v10[21] = v11;
    v10[22] = v11;
    v10[23] = v11;
    v10[24] = v11;
    v10[25] = v11;
    v10[26] = v11;
    v10[27] = v11;
    unsigned char v10[28] = v11;
    v10[29] = v11;
    v10[30] = v11;
    v10[31] = v11;
    *((unsigned char *)v10 + 512) = 0;
    int v68 = 0;
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    sub_215DE0D88((uint64_t)&v23, (uint64_t)a1, v5 >= 0, v5 & ~(v5 >> 31), 0);
    goto LABEL_10;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v13 = (std::__shared_weak_count *)operator new(0x28uLL);
  v13->__shared_owners_ = 0;
  p_shared_owners = &v13->__shared_owners_;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684DE0;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684E30;
  v13[1].__shared_owners_ = (uint64_t)a3;
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v23 = v13 + 1;
  int v24 = v13;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v15 = localeconv();
  size_t v29 = v15;
  int v16 = v15->thousands_sep;
  if (v16) {
    LOBYTE(v16) = *v16;
  }
  char v30 = (char)v16;
  uint64_t v17 = v15->decimal_point;
  if (v15->decimal_point) {
    LOBYTE(v17) = *v17;
  }
  char v31 = (char)v17;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  char v64 = 32;
  unint64_t v18 = operator new(0x208uLL);
  std::string __p = v18;
  unint64_t v67 = 0x8000000000000208;
  uint64_t v66 = 512;
  *(void *)&long long v19 = 0x2020202020202020;
  *((void *)&v19 + 1) = 0x2020202020202020;
  *unint64_t v18 = v19;
  v18[1] = v19;
  void v18[2] = v19;
  void v18[3] = v19;
  v18[4] = v19;
  v18[5] = v19;
  v18[6] = v19;
  v18[7] = v19;
  v18[8] = v19;
  v18[9] = v19;
  v18[10] = v19;
  v18[11] = v19;
  v18[12] = v19;
  v18[13] = v19;
  v18[14] = v19;
  v18[15] = v19;
  v18[16] = v19;
  v18[17] = v19;
  v18[18] = v19;
  v18[19] = v19;
  v18[20] = v19;
  v18[21] = v19;
  v18[22] = v19;
  v18[23] = v19;
  v18[24] = v19;
  v18[25] = v19;
  v18[26] = v19;
  v18[27] = v19;
  v18[28] = v19;
  v18[29] = v19;
  v18[30] = v19;
  v18[31] = v19;
  *((unsigned char *)v18 + 512) = 0;
  int v68 = 0;
  BOOL v69 = v13 + 1;
  uint64_t v70 = v13;
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  char v71 = 32;
  unsigned __int8 v20 = operator new(0x208uLL);
  uint64_t v72 = v20;
  long long v73 = xmmword_215EF8EF0;
  *(void *)&long long v21 = 0x2020202020202020;
  *((void *)&v21 + 1) = 0x2020202020202020;
  *unsigned __int8 v20 = v21;
  v20[1] = v21;
  uint64_t v20[2] = v21;
  void v20[3] = v21;
  v20[4] = v21;
  v20[5] = v21;
  v20[6] = v21;
  v20[7] = v21;
  v20[8] = v21;
  v20[9] = v21;
  v20[10] = v21;
  v20[11] = v21;
  v20[12] = v21;
  v20[13] = v21;
  v20[14] = v21;
  v20[15] = v21;
  v20[16] = v21;
  v20[17] = v21;
  v20[18] = v21;
  v20[19] = v21;
  v20[20] = v21;
  v20[21] = v21;
  v20[22] = v21;
  v20[23] = v21;
  v20[24] = v21;
  v20[25] = v21;
  v20[26] = v21;
  v20[27] = v21;
  unsigned char v20[28] = v21;
  v20[29] = v21;
  v20[30] = v21;
  v20[31] = v21;
  *((unsigned char *)v20 + 512) = 0;
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_22;
    }
LABEL_29:
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    goto LABEL_22;
  }
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_29;
  }
LABEL_22:
  sub_215DE2B1C((uint64_t)&v23, a1, v5 >= 0, v5 & ~(v5 >> 31), 0);
  if (SHIBYTE(v73) < 0) {
    operator delete(v72);
  }
  long long v22 = v70;
  if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_10:
  if (SHIBYTE(v67) < 0) {
    operator delete(__p);
  }
  int v12 = v24;
  if (v24)
  {
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_215DDBCF4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_215731D80(a1);
}

void sub_215DDBFDC(uint64_t a1)
{
  v2[4] = *MEMORY[0x263EF8340];
  v2[3] = 0;
  sub_215D2C0D0(a1, v2, 1, 0, (uint64_t)v1);
  operator new();
}

void sub_215DDC0F4(_Unwind_Exception *a1, uint64_t a2, unsigned __int8 a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  sub_215CE9D14((uint64_t *)va, a3);
  sub_215D2C344((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_215DDC118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215D2C344((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215DDC12C(uint64_t *a1)
{
  v2[4] = *MEMORY[0x263EF8340];
  v2[3] = 0;
  sub_215DDC27C(a1, v2, 1, 0, (uint64_t)v1);
  operator new();
}

void sub_215DDC244(_Unwind_Exception *a1, uint64_t a2, unsigned __int8 a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void **);
  sub_215CEB204((void ***)va, a3);
  sub_215DDC6A8((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_215DDC268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215DDC6A8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215DDC27C@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  *(unsigned char *)a5 = 0;
  int v8 = *((char *)a1 + 23);
  uint64_t v9 = a1[1];
  if (v8 >= 0) {
    int v10 = a1;
  }
  else {
    int v10 = (uint64_t *)*a1;
  }
  *(void *)(a5 + 8) = 0;
  if (v8 >= 0) {
    uint64_t v11 = v8;
  }
  else {
    uint64_t v11 = v9;
  }
  int v12 = (void *)a2[3];
  if (!v12)
  {
LABEL_10:
    unint64_t v18 = v12;
    if (v12) {
      goto LABEL_11;
    }
LABEL_14:
    long long v38 = 0;
    goto LABEL_16;
  }
  if (v12 != a2)
  {
    int v12 = (void *)(*(uint64_t (**)(void *))(*v12 + 16))(v12);
    goto LABEL_10;
  }
  unint64_t v18 = v17;
  (*(void (**)(void *, void *))(*a2 + 24))(a2, v17);
  int v12 = v18;
  if (!v18) {
    goto LABEL_14;
  }
LABEL_11:
  if (v12 == v17)
  {
    long long v38 = v37;
    (*(void (**)(void *, void *))(v17[0] + 24))(v17, v37);
  }
  else
  {
    long long v38 = v12;
    unint64_t v18 = 0;
  }
LABEL_16:
  uint64_t v13 = (uint64_t)v38;
  if (!v38)
  {
LABEL_19:
    unsigned __int8 v20 = (void *)v13;
    goto LABEL_21;
  }
  if (v38 != v37)
  {
    uint64_t v13 = (*(uint64_t (**)(void))(*v38 + 16))();
    goto LABEL_19;
  }
  unsigned __int8 v20 = v19;
  (*(void (**)(void *, void *))(v37[0] + 24))(v37, v19);
LABEL_21:
  int v21 = 0;
  v22[0] = v10;
  v22[1] = (char *)v10 + v11;
  char v23 = a4;
  int v24 = -1;
  char v25 = 0;
  long long v26 = 0u;
  *(_OWORD *)long long v27 = 0u;
  long long v28 = 0u;
  long long __p = 0u;
  uint64_t v30 = 0;
  char v31 = "";
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v32 = 0;
  uint64_t v14 = localeconv();
  if (v14->decimal_point) {
    int v15 = *v14->decimal_point;
  }
  else {
    int v15 = 46;
  }
  int v35 = v15;
  char v36 = a3;
  int v21 = sub_215DE5704((uint64_t)v22);
  if (v38 == v37)
  {
    (*(void (**)(void *))(v37[0] + 32))(v37);
  }
  else if (v38)
  {
    (*(void (**)(void))(*v38 + 40))();
  }
  sub_215DE327C((uint64_t)v19, (unsigned __int8 *)a5);
  if (SHIBYTE(v30) < 0) {
    operator delete((void *)__p);
  }
  if (v27[1])
  {
    *(void **)&long long v28 = v27[1];
    operator delete(v27[1]);
  }
  if (v20 != v19)
  {
    if (v20) {
      (*(void (**)(void))(*v20 + 40))();
    }
    uint64_t result = (uint64_t)v18;
    if (v18 != v17) {
      goto LABEL_36;
    }
    return (*(uint64_t (**)(void *))(v17[0] + 32))(v17);
  }
  (*(void (**)(void *))(v19[0] + 32))(v19);
  uint64_t result = (uint64_t)v18;
  if (v18 == v17) {
    return (*(uint64_t (**)(void *))(v17[0] + 32))(v17);
  }
LABEL_36:
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_215DDC63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215DDC6A8(void *a1)
{
  __n128 v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

unsigned __int8 **sub_215DDC738(uint64_t **a1)
{
  __n128 v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_215CE9D14(v2 + 1, *(unsigned __int8 *)v2);
    MEMORY[0x2166C4D20](v2, 0x1022C40B06DCE69);
  }
  return (unsigned __int8 **)a1;
}

void sub_215DDC78C(uint64_t *a1)
{
  v2[4] = *MEMORY[0x263EF8340];
  v2[3] = 0;
  sub_215DDC27C(a1, v2, 1, 0, (uint64_t)v1);
  operator new();
}

void sub_215DDC91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, long long a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,long long a23,char a24)
{
  if (a2)
  {
    sub_215DDC9D8((void ****)&a10);
    sub_215CEB204((void ***)&a23 + 1, a23);
    sub_215DDC6A8((void *)(v25 - 88));
    if (a2 == 2)
    {
      long long v28 = (unsigned int *)__cxa_begin_catch(exception_object);
      sub_215DDA9D4(v28, (uint64_t)&a10);
      a23 = a10;
      sub_215741BFC(&a24, &a11);
      sub_2158AAB90(v24, (uint64_t)&a23);
      sub_21573FF04((uint64_t)&a23);
      sub_21573FF04((uint64_t)&a10);
      __cxa_end_catch();
      JUMPOUT(0x215DDC8E8);
    }
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ****sub_215DDC9D8(void ****a1)
{
  __n128 v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_215CEB204(v2 + 1, *(unsigned __int8 *)v2);
    MEMORY[0x2166C4D20](v2, 0x1022C40B06DCE69);
  }
  return a1;
}

uint64_t sub_215DDCA2C(uint64_t *a1, uint64_t *a2)
{
  int v3 = *(unsigned __int8 *)a1;
  int v4 = *(unsigned __int8 *)a2;
  if (v3 != v4)
  {
    if (v3 == 5 && v4 == 7)
    {
      double v10 = (double)a1[1];
    }
    else
    {
      if (v3 == 7 && v4 == 5) {
        return *((double *)a1 + 1) == (double)a2[1];
      }
      if (v3 != 6 || v4 != 7)
      {
        if (v3 == 7 && v4 == 6)
        {
          return *((double *)a1 + 1) == (double)(unint64_t)a2[1];
        }
        else
        {
          if (v3 != 6 || v4 != 5)
          {
            uint64_t result = 0;
            if (v3 != 5 || v4 != 6) {
              return result;
            }
          }
          return a1[1] == a2[1];
        }
      }
      double v10 = (double)(unint64_t)a1[1];
    }
    return *((double *)a2 + 1) == v10;
  }
  uint64_t result = 1;
  switch(v3)
  {
    case 0:
      return result;
    case 1:
      uint64_t v11 = (void *)a1[1];
      int v12 = (void *)a2[1];
      if (v11[2] != v12[2]) {
        return 0;
      }
      int v15 = (void *)*v11;
      uint64_t v13 = v11 + 1;
      uint64_t v14 = v15;
      if (v15 == v13) {
        return result;
      }
      int v16 = (void *)*v12;
      break;
    case 2:
      long long v27 = (uint64_t *)a1[1];
      long long v28 = (uint64_t *)a2[1];
      uint64_t v29 = *v27;
      uint64_t v30 = v27[1];
      uint64_t v31 = *v28;
      if (v30 - *v27 != v28[1] - *v28) {
        return 0;
      }
      for (; v29 != v30; v31 += 16)
      {
        uint64_t result = sub_215DDCA2C(v29, v31);
        if (!result) {
          break;
        }
        v29 += 16;
      }
      return result;
    case 3:
      uint64_t v32 = (unsigned __int8 *)a1[1];
      uint64_t v33 = (unsigned __int8 **)a2[1];
      uint64_t v34 = v32[23];
      if ((v34 & 0x80u) == 0) {
        int v35 = (unsigned __int8 *)v32[23];
      }
      else {
        int v35 = (unsigned __int8 *)*((void *)v32 + 1);
      }
      char v36 = (unsigned __int8 *)*((unsigned __int8 *)v33 + 23);
      int v37 = (char)v36;
      if ((char)v36 < 0) {
        char v36 = v33[1];
      }
      if (v35 != v36) {
        return 0;
      }
      if (v37 >= 0) {
        long long v38 = (unsigned __int8 *)a2[1];
      }
      else {
        long long v38 = *v33;
      }
      if ((v34 & 0x80) != 0) {
        return memcmp(*(const void **)v32, v38, *((void *)v32 + 1)) == 0;
      }
      if (v32[23])
      {
        uint64_t v39 = v34 - 1;
        do
        {
          int v41 = *v32++;
          int v40 = v41;
          int v43 = *v38++;
          int v42 = v43;
          BOOL v45 = v39-- != 0;
          uint64_t result = v40 == v42;
        }
        while (v40 == v42 && v45);
      }
      return result;
    case 4:
      return *((unsigned __int8 *)a1 + 8) == *((unsigned __int8 *)a2 + 8);
    case 5:
    case 6:
      return a1[1] == a2[1];
    case 7:
      return *((double *)a1 + 1) == *((double *)a2 + 1);
    case 8:
      uint64_t v46 = a1[1];
      uint64_t v47 = a2[1];
      size_t v48 = *(void *)(v46 + 8) - *(void *)v46;
      if (v48 != *(void *)(v47 + 8) - *(void *)v47
        || memcmp(*(const void **)v46, *(const void **)v47, v48)
        || *(unsigned __int8 *)(v46 + 24) != *(unsigned __int8 *)(v47 + 24))
      {
        return 0;
      }
      return *(unsigned __int8 *)(v46 + 25) == *(unsigned __int8 *)(v47 + 25);
    default:
      return 0;
  }
  while (1)
  {
    uint64_t v17 = *((unsigned __int8 *)v14 + 55);
    if ((v17 & 0x80u) == 0) {
      uint64_t v18 = *((unsigned __int8 *)v14 + 55);
    }
    else {
      uint64_t v18 = v14[5];
    }
    uint64_t v19 = *((unsigned __int8 *)v16 + 55);
    int v20 = (char)v19;
    if ((v19 & 0x80u) != 0) {
      uint64_t v19 = v16[5];
    }
    if (v18 != v19) {
      return 0;
    }
    int v21 = (const void **)(v14 + 4);
    if (v20 >= 0) {
      long long v22 = (unsigned __int8 *)(v16 + 4);
    }
    else {
      long long v22 = (unsigned __int8 *)v16[4];
    }
    if ((v17 & 0x80) != 0)
    {
      if (memcmp(*v21, v22, v14[5])) {
        return 0;
      }
    }
    else if (*((unsigned char *)v14 + 55))
    {
      while (*(unsigned __int8 *)v21 == *v22)
      {
        int v21 = (const void **)((char *)v21 + 1);
        ++v22;
        if (!--v17) {
          goto LABEL_45;
        }
      }
      return 0;
    }
LABEL_45:
    uint64_t result = sub_215DDCA2C(v14 + 7, v16 + 7);
    if (result)
    {
      char v23 = (void *)v14[1];
      uint64_t v24 = v14;
      if (v23)
      {
        do
        {
          uint64_t v14 = v23;
          char v23 = (void *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)v24[2];
          BOOL v6 = *v14 == (void)v24;
          uint64_t v24 = v14;
        }
        while (!v6);
      }
      uint64_t v25 = (void *)v16[1];
      if (v25)
      {
        do
        {
          long long v26 = v25;
          uint64_t v25 = (void *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          long long v26 = (void *)v16[2];
          BOOL v6 = *v26 == (void)v16;
          int v16 = v26;
        }
        while (!v6);
      }
      uint64_t result = 1;
      int v16 = v26;
      if (v14 != v13) {
        continue;
      }
    }
    return result;
  }
}

uint64_t sub_215DDCDD8(uint64_t *a1, uint64_t *a2)
{
  int v3 = *(unsigned __int8 *)a1;
  int v4 = *(unsigned __int8 *)a2;
  if (v3 != v4)
  {
    if (v3 == 5 && v4 == 7)
    {
      double v9 = (double)a1[1];
    }
    else
    {
      if (v3 == 7 && v4 == 5) {
        return *((double *)a1 + 1) == (double)a2[1];
      }
      if (v3 != 6 || v4 != 7)
      {
        if (v3 == 7 && v4 == 6) {
          return *((double *)a1 + 1) == (double)(unint64_t)a2[1];
        }
        if (v3 == 6 && v4 == 5) {
          return a1[1] == a2[1];
        }
        uint64_t result = 0;
        if (v3 == 5 && v4 == 6) {
          return a1[1] == a2[1];
        }
        return result;
      }
      double v9 = (double)(unint64_t)a1[1];
    }
    return *((double *)a2 + 1) == v9;
  }
  uint64_t result = 1;
  switch(v3)
  {
    case 0:
      return result;
    case 1:
      double v10 = (uint64_t *)a1[1];
      uint64_t v11 = (unsigned __int8 ***)a2[1];
      uint64_t v13 = *v10;
      uint64_t v12 = v10[1];
      uint64_t v14 = *v11;
      if (v12 - *v10 != (char *)v11[1] - (char *)*v11) {
        return 0;
      }
      if (v13 == v12) {
        return result;
      }
      break;
    case 2:
      int v21 = (uint64_t *)a1[1];
      long long v22 = (uint64_t *)a2[1];
      uint64_t v23 = *v21;
      uint64_t v24 = v21[1];
      uint64_t v25 = *v22;
      if (v24 - *v21 != v22[1] - *v22) {
        return 0;
      }
      for (; v23 != v24; v25 += 16)
      {
        uint64_t result = sub_215DDCDD8(v23, v25);
        if (!result) {
          break;
        }
        v23 += 16;
      }
      return result;
    case 3:
      long long v26 = (unsigned __int8 *)a1[1];
      long long v27 = (unsigned __int8 **)a2[1];
      uint64_t v28 = v26[23];
      if ((v28 & 0x80u) == 0) {
        uint64_t v29 = (unsigned __int8 *)v26[23];
      }
      else {
        uint64_t v29 = (unsigned __int8 *)*((void *)v26 + 1);
      }
      uint64_t v30 = (unsigned __int8 *)*((unsigned __int8 *)v27 + 23);
      int v31 = (char)v30;
      if ((char)v30 < 0) {
        uint64_t v30 = v27[1];
      }
      if (v29 != v30) {
        return 0;
      }
      if (v31 >= 0) {
        uint64_t v32 = (unsigned __int8 *)a2[1];
      }
      else {
        uint64_t v32 = *v27;
      }
      if ((v28 & 0x80) != 0) {
        return memcmp(*(const void **)v26, v32, *((void *)v26 + 1)) == 0;
      }
      if (v26[23])
      {
        uint64_t v33 = v28 - 1;
        do
        {
          int v35 = *v26++;
          int v34 = v35;
          int v37 = *v32++;
          int v36 = v37;
          BOOL v39 = v33-- != 0;
          uint64_t result = v34 == v36;
        }
        while (v34 == v36 && v39);
      }
      return result;
    case 4:
      return *((unsigned __int8 *)a1 + 8) == *((unsigned __int8 *)a2 + 8);
    case 5:
    case 6:
      return a1[1] == a2[1];
    case 7:
      return *((double *)a1 + 1) == *((double *)a2 + 1);
    case 8:
      uint64_t v40 = a1[1];
      uint64_t v41 = a2[1];
      size_t v42 = *(void *)(v40 + 8) - *(void *)v40;
      if (v42 != *(void *)(v41 + 8) - *(void *)v41
        || memcmp(*(const void **)v40, *(const void **)v41, v42)
        || *(unsigned __int8 *)(v40 + 24) != *(unsigned __int8 *)(v41 + 24))
      {
        return 0;
      }
      return *(unsigned __int8 *)(v40 + 25) == *(unsigned __int8 *)(v41 + 25);
    default:
      return 0;
  }
  while (1)
  {
    uint64_t v15 = *(unsigned __int8 *)(v13 + 23);
    if ((v15 & 0x80u) == 0) {
      int v16 = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 23);
    }
    else {
      int v16 = *(unsigned __int8 **)(v13 + 8);
    }
    uint64_t v17 = (unsigned __int8 *)*((unsigned __int8 *)v14 + 23);
    int v18 = (char)v17;
    if ((char)v17 < 0) {
      uint64_t v17 = v14[1];
    }
    if (v16 != v17) {
      return 0;
    }
    if (v18 >= 0) {
      uint64_t v19 = (unsigned __int8 *)v14;
    }
    else {
      uint64_t v19 = *v14;
    }
    if ((v15 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v13, v19, *(void *)(v13 + 8))) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v13 + 23))
    {
      uint64_t v20 = 0;
      while (*(unsigned __int8 *)(v13 + v20) == v19[v20])
      {
        if (v15 == ++v20) {
          goto LABEL_42;
        }
      }
      return 0;
    }
LABEL_42:
    uint64_t result = sub_215DDCDD8(v13 + 24, v14 + 3);
    if (result)
    {
      v13 += 40;
      v14 += 5;
      uint64_t result = 1;
      if (v13 != v12) {
        continue;
      }
    }
    return result;
  }
}

uint64_t *sub_215DDD1B4(uint64_t a1, const void **a2)
{
  if (*(unsigned char *)a1 != 1)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x20uLL);
    int v5 = (char *)sub_215D2DC9C((char *)a1);
    sub_215732BF4(&v6, v5);
    sub_215AC8CC8("cannot use operator[] with a string argument with ", &v6, &v7);
    sub_215D2DB00(305, (uint64_t)&v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
  }
  return sub_215837FE8(*(void *)(a1 + 8), a2) + 7;
}

void sub_215DDD26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t sub_215DDD2CC(uint64_t a1, unsigned __int8 **a2)
{
  if (*(unsigned char *)a1 != 1)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v14 = (char *)sub_215D2DC9C((char *)a1);
    sub_215732BF4(&v15, v14);
    sub_215AC8CC8("cannot use operator[] with a string argument with ", &v15, &v16);
    sub_215D2DB00(305, (uint64_t)&v16, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
  }
  int v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3 == v5) {
    return v4 + 24;
  }
  char v6 = *((unsigned char *)a2 + 23);
  if (v6 >= 0) {
    std::string v7 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    std::string v7 = a2[1];
  }
  if (v6 >= 0) {
    int v8 = (unsigned __int8 *)a2;
  }
  else {
    int v8 = *a2;
  }
  do
  {
    uint64_t v9 = *(unsigned __int8 *)(v4 + 23);
    if ((v9 & 0x80u) == 0) {
      double v10 = (unsigned __int8 *)*(unsigned __int8 *)(v4 + 23);
    }
    else {
      double v10 = *(unsigned __int8 **)(v4 + 8);
    }
    if (v10 == v7)
    {
      if ((v9 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v4, v8, *(void *)(v4 + 8))) {
          return v4 + 24;
        }
      }
      else
      {
        if (!*(unsigned char *)(v4 + 23)) {
          return v4 + 24;
        }
        uint64_t v11 = 0;
        while (*(unsigned __int8 *)(v4 + v11) == v8[v11])
        {
          if (v9 == ++v11) {
            return v4 + 24;
          }
        }
      }
    }
    v4 += 40;
  }
  while (v4 != v5);
  return v5 + 24;
}

void sub_215DDD420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t *sub_215DDD480(uint64_t *a1, uint64_t a2)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  uint64_t v5 = (char *)a1 + *(void *)(*a1 - 24);
  uint64_t v6 = *((void *)v5 + 3);
  *((void *)v5 + 3) = 0;
  std::string v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7->__shared_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684E88;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684ED8;
  v7[1].__shared_owners_ = (uint64_t)a1;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  int v8 = (const std::ios_base *)((char *)a1 + *(void *)(v4 - 24));
  unsigned int fmtflags = v8[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(v8);
    double v10 = std::locale::use_facet(&v18, MEMORY[0x263F8C108]);
    unsigned int fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
    std::locale::~locale(&v18);
    v8[1].__fmtflags_ = fmtflags;
  }
  uint64_t v19 = v7 + 1;
  uint64_t v20 = v7;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v11 = localeconv();
  uint64_t v25 = v11;
  thousands_sep = v11->thousands_sep;
  if (thousands_sep)
  {
    char v26 = *thousands_sep;
    decimal_poinint t = v11->decimal_point;
    if (!v11->decimal_point) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v26 = 0;
  decimal_poinint t = v11->decimal_point;
  if (v11->decimal_point) {
LABEL_5:
  }
    LOBYTE(decimal_point) = *decimal_point;
LABEL_6:
  char v27 = (char)decimal_point;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  char v60 = fmtflags;
  uint64_t v14 = operator new(0x208uLL);
  long long __p = v14;
  unint64_t v63 = 0x8000000000000208;
  uint64_t v62 = 512;
  int8x16_t v15 = vdupq_n_s8(fmtflags);
  _OWORD *v14 = v15;
  v14[1] = v15;
  v14[2] = v15;
  void v14[3] = v15;
  v14[4] = v15;
  v14[5] = v15;
  v14[6] = v15;
  v14[7] = v15;
  v14[8] = v15;
  v14[9] = v15;
  v14[10] = v15;
  v14[11] = v15;
  v14[12] = v15;
  v14[13] = v15;
  v14[14] = v15;
  v14[15] = v15;
  v14[16] = v15;
  v14[17] = v15;
  v14[18] = v15;
  v14[19] = v15;
  v14[20] = v15;
  v14[21] = v15;
  v14[22] = v15;
  v14[23] = v15;
  v14[24] = v15;
  v14[25] = v15;
  v14[26] = v15;
  v14[27] = v15;
  v14[28] = v15;
  v14[29] = v15;
  v14[30] = v15;
  v14[31] = v15;
  *((unsigned char *)v14 + 512) = 0;
  int v64 = 0;
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  sub_215DDE02C((uint64_t)&v19, a2, v6 > 0, v6 & ~(v6 >> 63), 0);
  if (SHIBYTE(v63) < 0) {
    operator delete(__p);
  }
  std::string v16 = v20;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  return a1;
}

void sub_215DDD800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_215DDD81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, std::locale a13)
{
}

void sub_215DDD840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_215DDF704((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DDD854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!atomic_fetch_add(v12, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  sub_215733368((uint64_t)&a11);
  sub_215733368((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_215DDD8AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  uint64_t v5 = (char *)a1 + *(void *)(*a1 - 24);
  uint64_t v6 = *((void *)v5 + 3);
  *((void *)v5 + 3) = 0;
  std::string v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7->__shared_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684E88;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684ED8;
  v7[1].__shared_owners_ = (uint64_t)a1;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  int v8 = (const std::ios_base *)((char *)a1 + *(void *)(v4 - 24));
  unsigned int fmtflags = v8[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(v8);
    double v10 = std::locale::use_facet(&v18, MEMORY[0x263F8C108]);
    unsigned int fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
    std::locale::~locale(&v18);
    v8[1].__fmtflags_ = fmtflags;
  }
  uint64_t v19 = v7 + 1;
  uint64_t v20 = v7;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v11 = localeconv();
  uint64_t v25 = v11;
  thousands_sep = v11->thousands_sep;
  if (thousands_sep)
  {
    char v26 = *thousands_sep;
    decimal_poinint t = v11->decimal_point;
    if (!v11->decimal_point) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v26 = 0;
  decimal_poinint t = v11->decimal_point;
  if (v11->decimal_point) {
LABEL_5:
  }
    LOBYTE(decimal_point) = *decimal_point;
LABEL_6:
  char v27 = (char)decimal_point;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  char v60 = fmtflags;
  uint64_t v14 = operator new(0x208uLL);
  long long __p = v14;
  unint64_t v63 = 0x8000000000000208;
  uint64_t v62 = 512;
  int8x16_t v15 = vdupq_n_s8(fmtflags);
  _OWORD *v14 = v15;
  v14[1] = v15;
  v14[2] = v15;
  void v14[3] = v15;
  v14[4] = v15;
  v14[5] = v15;
  v14[6] = v15;
  v14[7] = v15;
  v14[8] = v15;
  v14[9] = v15;
  v14[10] = v15;
  v14[11] = v15;
  v14[12] = v15;
  v14[13] = v15;
  v14[14] = v15;
  v14[15] = v15;
  v14[16] = v15;
  v14[17] = v15;
  v14[18] = v15;
  v14[19] = v15;
  v14[20] = v15;
  v14[21] = v15;
  v14[22] = v15;
  v14[23] = v15;
  v14[24] = v15;
  v14[25] = v15;
  v14[26] = v15;
  v14[27] = v15;
  v14[28] = v15;
  v14[29] = v15;
  v14[30] = v15;
  v14[31] = v15;
  *((unsigned char *)v14 + 512) = 0;
  int v64 = 0;
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  sub_215DE0D88((uint64_t)&v19, a2, v6 > 0, v6 & ~(v6 >> 63), 0);
  if (SHIBYTE(v63) < 0) {
    operator delete(__p);
  }
  std::string v16 = v20;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  return a1;
}

void sub_215DDDC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_215DDDC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, std::locale a13)
{
}

void sub_215DDDC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_215DDF704((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DDDC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!atomic_fetch_add(v12, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  sub_215733368((uint64_t)&a11);
  sub_215733368((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned char *sub_215DDDCD8(unsigned char *result, int a2)
{
  __n128 v2 = result;
  *uint64_t result = a2;
  switch(a2)
  {
    case 1:
    case 2:
      int v3 = operator new(0x18uLL);
      v3[1] = 0;
      v3[2] = 0;
      *int v3 = 0;
      *((void *)v2 + 1) = v3;
      uint64_t result = v2;
      break;
    case 3:
      uint64_t v4 = operator new(0x18uLL);
      v4[23] = 0;
      unsigned char *v4 = 0;
      *((void *)v2 + 1) = v4;
      uint64_t result = v2;
      break;
    case 4:
      result[8] = 0;
      break;
    case 8:
      uint64_t v5 = operator new(0x20uLL);
      v5[1] = 0;
      v5[2] = 0;
      *uint64_t v5 = 0;
      *((_WORD *)v5 + 12) = 0;
      *((void *)v2 + 1) = v5;
      uint64_t result = v2;
      break;
    default:
      *((void *)result + 1) = 0;
      break;
  }
  return result;
}

void sub_215DDDDD8()
{
}

void sub_215DDDFC4(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_215DDDFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215DDE02C(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  int v8 = (void *)result;
  switch(*(unsigned char *)a2)
  {
    case 0:
      goto LABEL_35;
    case 1:
      uint64_t v9 = **(void **)result;
      if (!*(void *)(*(void *)(a2 + 8) + 16))
      {
        long long v48 = *(uint64_t (**)(void))(v9 + 8);
        goto LABEL_58;
      }
      if (!a3)
      {
        (*(void (**)(void))v9)();
        long long v49 = *(void **)(a2 + 8);
        long long v50 = (void *)*v49;
        if (v49[2] == 1)
        {
          long long v51 = (void *)*v49;
        }
        else
        {
          unint64_t v69 = 0;
          do
          {
            (**(void (***)(void, uint64_t))*v8)(*v8, 34);
            sub_215DDF85C((uint64_t)v8, v50 + 4);
            (*(void (**)(void, const char *, uint64_t))(*(void *)*v8 + 8))(*v8, "\":", 2);
            sub_215DDE02C(v8, v50 + 7, 0, a4, a5);
            (**(void (***)(void))*v8)();
            uint64_t v70 = (void *)v50[1];
            if (v70)
            {
              do
              {
                long long v51 = v70;
                uint64_t v70 = (void *)*v70;
              }
              while (v70);
            }
            else
            {
              do
              {
                long long v51 = (void *)v50[2];
                BOOL v71 = *v51 == (void)v50;
                long long v50 = v51;
              }
              while (!v71);
            }
            ++v69;
            long long v50 = v51;
          }
          while (v69 < *(void *)(*(void *)(a2 + 8) + 16) - 1);
        }
        (**(void (***)(void, uint64_t))*v8)(*v8, 34);
        sub_215DDF85C((uint64_t)v8, v51 + 4);
        (*(void (**)(void, const char *, uint64_t))(*(void *)*v8 + 8))(*v8, "\":", 2);
        sub_215DDE02C(v8, v51 + 7, 0, a4, a5);
        goto LABEL_186;
      }
      (*(void (**)(void))(v9 + 8))();
      unint64_t v10 = (a5 + a4);
      uint64_t v11 = v8 + 76;
      if (*((char *)v8 + 631) < 0)
      {
        unint64_t v12 = v8[77];
        if (v12 >= v10) {
          goto LABEL_6;
        }
LABEL_107:
        std::string::resize((std::string *)(v8 + 76), 2 * v12, 32);
        uint64_t v72 = *(void **)(a2 + 8);
        uint64_t v14 = (void *)*v72;
        if (v72[2] == 1) {
          goto LABEL_7;
        }
        goto LABEL_108;
      }
      unint64_t v12 = *((unsigned __int8 *)v8 + 631);
      if (v10 > v12) {
        goto LABEL_107;
      }
LABEL_6:
      uint64_t v13 = *(void **)(a2 + 8);
      uint64_t v14 = (void *)*v13;
      if (v13[2] == 1)
      {
LABEL_7:
        int8x16_t v15 = v14;
        goto LABEL_8;
      }
LABEL_108:
      unint64_t v73 = 0;
      do
      {
        uint64_t v74 = v8 + 76;
        if (*((char *)v8 + 631) < 0) {
          uint64_t v74 = (void *)*v11;
        }
        (*(void (**)(void, void *, void))(*(void *)*v8 + 8))(*v8, v74, (a5 + a4));
        (**(void (***)(void))*v8)();
        sub_215DDF85C((uint64_t)v8, v14 + 4);
        (*(void (**)(void, const char *, uint64_t))(*(void *)*v8 + 8))(*v8, "\": ", 3);
        sub_215DDE02C(v8, v14 + 7, 1, a4, (a5 + a4));
        (*(void (**)(void, const char *, uint64_t))(*(void *)*v8 + 8))(*v8, ",\n", 2);
        long long v75 = (void *)v14[1];
        if (v75)
        {
          do
          {
            int8x16_t v15 = v75;
            long long v75 = (void *)*v75;
          }
          while (v75);
        }
        else
        {
          do
          {
            int8x16_t v15 = (void *)v14[2];
            BOOL v71 = *v15 == (void)v14;
            uint64_t v14 = v15;
          }
          while (!v71);
        }
        ++v73;
        uint64_t v14 = v15;
      }
      while (v73 < *(void *)(*(void *)(a2 + 8) + 16) - 1);
LABEL_8:
      std::string v16 = v8 + 76;
      if (*((char *)v8 + 631) < 0) {
        std::string v16 = (void *)*v11;
      }
      (*(void (**)(void, void *, void))(*(void *)*v8 + 8))(*v8, v16, (a5 + a4));
      (**(void (***)(void))*v8)();
      sub_215DDF85C((uint64_t)v8, v15 + 4);
      (*(void (**)(void, const char *, uint64_t))(*(void *)*v8 + 8))(*v8, "\": ", 3);
      sub_215DDE02C(v8, v15 + 7, 1, a4, (a5 + a4));
      (**(void (***)(void))*v8)();
      uint64_t v17 = *(void (**)(void))(*(void *)*v8 + 8);
LABEL_185:
      v17();
LABEL_186:
      long long v24 = **(uint64_t (***)(void))*v8;
LABEL_187:
      return v24();
    case 2:
      uint64_t v18 = **(void **)result;
      if (**(void **)(a2 + 8) == *(void *)(*(void *)(a2 + 8) + 8))
      {
        long long v48 = *(uint64_t (**)(void))(v18 + 8);
LABEL_58:
        return v48();
      }
      if (!a3)
      {
        (*(void (**)(void))v18)();
        long long v52 = *(uint64_t **)(a2 + 8);
        uint64_t v53 = *v52;
        long long v54 = v8;
        if (*v52 != v52[1] - 16)
        {
          do
          {
            sub_215DDE02C(v54, v53, 0, a4, a5);
            (**(void (***)(void))*v8)();
            v53 += 16;
            long long v54 = v8;
          }
          while (v53 != *(void *)(*(void *)(a2 + 8) + 8) - 16);
        }
        sub_215DDE02C(v54, v53, 0, a4, a5);
        goto LABEL_125;
      }
      (*(void (**)(void))(v18 + 8))();
      unint64_t v19 = (a5 + a4);
      uint64_t v20 = v8 + 76;
      if (*((char *)v8 + 631) < 0)
      {
        unint64_t v21 = v8[77];
        if (v21 >= v19)
        {
LABEL_15:
          long long v22 = *(uint64_t **)(a2 + 8);
          uint64_t v23 = *v22;
          if (*v22 != v22[1] - 16) {
            goto LABEL_16;
          }
          goto LABEL_120;
        }
      }
      else
      {
        unint64_t v21 = *((unsigned __int8 *)v8 + 631);
        if (v19 <= v21) {
          goto LABEL_15;
        }
      }
      std::string::resize((std::string *)(v8 + 76), 2 * v21, 32);
      long long v76 = *(uint64_t **)(a2 + 8);
      uint64_t v23 = *v76;
      if (*v76 != v76[1] - 16)
      {
        do
        {
LABEL_16:
          (*(void (**)(void))(*(void *)*v8 + 8))();
          sub_215DDE02C(v8, v23, 1, a4, (a5 + a4));
          (*(void (**)(void, const char *, uint64_t))(*(void *)*v8 + 8))(*v8, ",\n", 2);
          v23 += 16;
        }
        while (v23 != *(void *)(*(void *)(a2 + 8) + 8) - 16);
      }
LABEL_120:
      long long v77 = v8 + 76;
      if (*((char *)v8 + 631) < 0) {
        long long v77 = (void *)*v20;
      }
      (*(void (**)(void, void *, void))(*(void *)*v8 + 8))(*v8, v77, (a5 + a4));
      sub_215DDE02C(v8, *(void *)(*(void *)(a2 + 8) + 8) - 16, 1, a4, (a5 + a4));
      (**(void (***)(void))*v8)();
      if (*((char *)v8 + 631) < 0) {
        uint64_t v20 = (void *)*v20;
      }
      (*(void (**)(void, void *, void))(*(void *)*v8 + 8))(*v8, v20, a5);
LABEL_125:
      long long v24 = **(uint64_t (***)(void))*v8;
      goto LABEL_187;
    case 3:
      (***(void (****)(void))result)();
      sub_215DDF85C((uint64_t)v8, *(uint64_t **)(a2 + 8));
      long long v24 = **(uint64_t (***)(void))*v8;
      goto LABEL_187;
    case 4:
      uint64_t v25 = *(uint64_t (****)(void))result;
      char v26 = *(uint64_t (**)(uint64_t (***)(void), char *, uint64_t))(*(void *)*v8 + 8);
      if (*(unsigned char *)(a2 + 8))
      {
        char v27 = "true";
        goto LABEL_36;
      }
      char v27 = "false";
      uint64_t v33 = 5;
      goto LABEL_200;
    case 5:
      unint64_t v28 = *(void *)(a2 + 8);
      if (!v28) {
        goto LABEL_42;
      }
      char v27 = (char *)(result + 16);
      if ((v28 & 0x8000000000000000) != 0)
      {
        *char v27 = 45;
        unint64_t v28 = -(uint64_t)v28;
        if (v28 >= 0xA)
        {
          int v59 = 4;
          unint64_t v78 = v28;
          do
          {
            if (v78 <= 0x63)
            {
              v59 -= 2;
              goto LABEL_192;
            }
            if (v78 <= 0x3E7)
            {
              --v59;
              goto LABEL_192;
            }
            if (v78 >> 4 < 0x271) {
              goto LABEL_192;
            }
            v59 += 4;
            BOOL v31 = v78 >= 0x186A0;
            v78 /= 0x2710uLL;
          }
          while (v31);
          v59 -= 3;
        }
        else
        {
          int v59 = 1;
        }
LABEL_192:
        unsigned int v29 = v59 + 1;
        goto LABEL_193;
      }
      if (v28 < 0xA) {
        goto LABEL_32;
      }
      unsigned int v29 = 4;
      unint64_t v30 = *(void *)(a2 + 8);
      while (1)
      {
        if (v30 <= 0x63)
        {
          v29 -= 2;
          goto LABEL_193;
        }
        if (v30 <= 0x3E7) {
          break;
        }
        if (v30 >> 4 < 0x271) {
          goto LABEL_193;
        }
        v29 += 4;
        BOOL v31 = v30 >= 0x186A0;
        v30 /= 0x2710uLL;
        if (!v31)
        {
          v29 -= 3;
          goto LABEL_193;
        }
      }
      --v29;
LABEL_193:
      uint64_t v33 = v29;
      long long v32 = &v27[v29];
      if (v28 < 0x64)
      {
        unint64_t v83 = v28;
      }
      else
      {
        do
        {
          unint64_t v83 = v28 / 0x64;
          *((_WORD *)v32 - 1) = *(_WORD *)&a00010203040506[2 * (v28 % 0x64)];
          v32 -= 2;
          unint64_t v96 = v28 >> 4;
          v28 /= 0x64uLL;
        }
        while (v96 > 0x270);
      }
      if (v83 >= 0xA) {
        goto LABEL_198;
      }
      goto LABEL_145;
    case 6:
      unint64_t v28 = *(void *)(a2 + 8);
      if (!v28)
      {
LABEL_42:
        long long v40 = ***(uint64_t (****)(void))result;
        goto LABEL_177;
      }
      char v27 = (char *)(result + 16);
      if (v28 < 0xA)
      {
LABEL_32:
        long long v32 = (char *)(result + 17);
        uint64_t v33 = 1;
        goto LABEL_146;
      }
      unsigned int v55 = 4;
      unint64_t v56 = *(void *)(a2 + 8);
      while (2)
      {
        if (v56 <= 0x63)
        {
          v55 -= 2;
        }
        else
        {
          if (v56 > 0x3E7)
          {
            if (v56 >> 4 < 0x271) {
              break;
            }
            v55 += 4;
            BOOL v31 = v56 >= 0x186A0;
            v56 /= 0x2710uLL;
            if (!v31)
            {
              v55 -= 3;
              break;
            }
            continue;
          }
          --v55;
        }
        break;
      }
      uint64_t v33 = v55;
      long long v32 = &v27[v55];
      if (v28 < 0x64)
      {
        unint64_t v83 = *(void *)(a2 + 8);
      }
      else
      {
        do
        {
          unint64_t v83 = v28 / 0x64;
          *((_WORD *)v32 - 1) = *(_WORD *)&a00010203040506[2 * (v28 % 0x64)];
          v32 -= 2;
          unint64_t v84 = v28 >> 4;
          v28 /= 0x64uLL;
        }
        while (v84 > 0x270);
      }
      if (v83 >= 0xA)
      {
LABEL_198:
        *((_WORD *)v32 - 1) = *(_WORD *)&a00010203040506[2 * v83];
      }
      else
      {
LABEL_145:
        LOBYTE(v28) = v83;
LABEL_146:
        *(v32 - 1) = v28 + 48;
      }
      uint64_t v25 = *(uint64_t (****)(void))result;
      char v26 = *(uint64_t (**)(uint64_t (***)(void), char *, uint64_t))(*(void *)*v8 + 8);
LABEL_200:
      return v26(v25, v27, v33);
    case 7:
      if ((*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
LABEL_35:
        uint64_t v25 = *(uint64_t (****)(void))result;
        char v26 = *(uint64_t (**)(uint64_t (***)(void), char *, uint64_t))(*(void *)*v8 + 8);
        char v27 = "null";
LABEL_36:
        uint64_t v33 = 4;
      }
      else
      {
        uint64_t v33 = (uint64_t)&sub_215DDFF28((char *)(result + 16), *(double *)(a2 + 8))[-result - 16];
        char v26 = *(uint64_t (**)(uint64_t (***)(void), char *, uint64_t))(*(void *)*v8 + 8);
        uint64_t v25 = (uint64_t (***)(void))*v8;
        char v27 = (char *)(v8 + 2);
      }
      goto LABEL_200;
    case 8:
      long long v34 = *(void (**)(void))(**(void **)result + 8);
      if (a3)
      {
        v34();
        unint64_t v35 = (a5 + a4);
        long long v36 = v8 + 76;
        if (*((char *)v8 + 631) < 0)
        {
          unint64_t v37 = v8[77];
          if (v37 >= v35)
          {
            long long v38 = (uint64_t (***)(void))*v8;
            goto LABEL_81;
          }
        }
        else
        {
          unint64_t v37 = *((unsigned __int8 *)v8 + 631);
          if (v35 <= v37)
          {
            long long v38 = (uint64_t (***)(void))*v8;
            long long v39 = v8 + 76;
            goto LABEL_82;
          }
        }
        std::string::resize((std::string *)(v8 + 76), 2 * v37, 32);
        long long v38 = (uint64_t (***)(void))*v8;
        long long v39 = v8 + 76;
        if ((*((char *)v8 + 631) & 0x80000000) == 0)
        {
LABEL_82:
          ((void (*)(uint64_t (***)(void), void *, unint64_t))(*v38)[1])(v38, v39, v35);
          (*(void (**)(void, const char *, uint64_t))(*(void *)*v8 + 8))(*v8, "\"bytes\": [", 10);
          uint64_t v60 = *(void *)(a2 + 8);
          uint64_t v62 = *(unsigned char **)v60;
          long long v61 = *(unsigned char **)(v60 + 8);
          if (v62 == v61) {
            goto LABEL_163;
          }
          if (v62 != v61 - 1)
          {
            while (1)
            {
              uint64_t v63 = *v62;
              if (*v62) {
                break;
              }
              (**(void (***)(void, uint64_t))*v8)(*v8, 48);
LABEL_86:
              (*(void (**)(void, const char *, uint64_t))(*(void *)*v8 + 8))(*v8, ", ", 2);
              if (++v62 == (unsigned char *)(*(void *)(*(void *)(a2 + 8) + 8) - 1)) {
                goto LABEL_95;
              }
            }
            if (v63 >= 0xA)
            {
              if (v63 < 0x64)
              {
                uint64_t v65 = &a00010203040506[2 * v63];
                *((unsigned char *)v8 + 17) = v65[1];
                char v66 = *v65;
                uint64_t v64 = 2;
LABEL_94:
                *((unsigned char *)v8 + 16) = v66;
                (*(void (**)(void, void *, uint64_t))(*(void *)*v8 + 8))(*v8, v8 + 2, v64);
                goto LABEL_86;
              }
              *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2 * (*v62 % 0x64u)];
              LODWORD(v63) = (41 * v63) >> 12;
              uint64_t v64 = 3;
            }
            else
            {
              uint64_t v64 = 1;
            }
            char v66 = v63 | 0x30;
            goto LABEL_94;
          }
LABEL_95:
          uint64_t v67 = *v62;
          if (!*v62)
          {
            (**(void (***)(void, uint64_t))*v8)(*v8, 48);
            goto LABEL_163;
          }
          if (v67 >= 0xA)
          {
            if (v67 < 0x64)
            {
              long long v81 = &a00010203040506[2 * v67];
              *((unsigned char *)v8 + 17) = v81[1];
              char v82 = *v81;
              uint64_t v68 = 2;
LABEL_162:
              *((unsigned char *)v8 + 16) = v82;
              (*(void (**)(void, void *, uint64_t))(*(void *)*v8 + 8))(*v8, v8 + 2, v68);
LABEL_163:
              (*(void (**)(void, const char *, uint64_t))(*(void *)*v8 + 8))(*v8, "],\n", 3);
              float32x4_t v90 = v8 + 76;
              if (*((char *)v8 + 631) < 0) {
                float32x4_t v90 = (void *)*v36;
              }
              (*(void (**)(void, void *, unint64_t))(*(void *)*v8 + 8))(*v8, v90, v35);
              (*(void (**)(void, const char *, uint64_t))(*(void *)*v8 + 8))(*v8, "\"subtype\": ", 11);
              uint64_t v91 = *(void *)(a2 + 8);
              if (!*(unsigned char *)(v91 + 25))
              {
                size_t v93 = *(void (**)(void))(*(void *)*v8 + 8);
LABEL_183:
                v93();
                goto LABEL_184;
              }
              uint64_t v92 = *(unsigned __int8 *)(v91 + 24);
              if (!v92)
              {
                (**(void (***)(void, uint64_t))*v8)(*v8, 48);
LABEL_184:
                (**(void (***)(void, uint64_t))*v8)(*v8, 10);
                uint64_t v17 = *(void (**)(void))(*(void *)*v8 + 8);
                goto LABEL_185;
              }
              if (v92 >= 0xA)
              {
                if (v92 < 0x64)
                {
                  char v94 = &a00010203040506[2 * v92];
                  *((unsigned char *)v8 + 17) = v94[1];
                  char v95 = *v94;
LABEL_182:
                  *((unsigned char *)v8 + 16) = v95;
                  size_t v93 = *(void (**)(void))(*(void *)*v8 + 8);
                  goto LABEL_183;
                }
                *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2
                                                                       * (v92
                                                                                         - 100
                                                                                         * ((41 * v92) >> 12))];
                LODWORD(v92) = (41 * v92) >> 12;
              }
              char v95 = v92 | 0x30;
              goto LABEL_182;
            }
            *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2 * (*v62 % 0x64u)];
            uint64_t v68 = 3;
            LODWORD(v67) = (41 * v67) >> 12;
          }
          else
          {
            uint64_t v68 = 1;
          }
          char v82 = v67 | 0x30;
          goto LABEL_162;
        }
LABEL_81:
        long long v39 = (void *)*v36;
        goto LABEL_82;
      }
      v34();
      uint64_t v41 = *(void *)(a2 + 8);
      long long v43 = *(unsigned char **)v41;
      long long v42 = *(unsigned char **)(v41 + 8);
      if (v43 == v42) {
        goto LABEL_152;
      }
      if (v43 != v42 - 1)
      {
        while (1)
        {
          uint64_t v44 = *v43;
          if (*v43) {
            break;
          }
          (**(void (***)(void, uint64_t))*v8)(*v8, 48);
LABEL_47:
          (**(void (***)(void, uint64_t))*v8)(*v8, 44);
          if (++v43 == (unsigned char *)(*(void *)(*(void *)(a2 + 8) + 8) - 1)) {
            goto LABEL_74;
          }
        }
        if (v44 >= 0xA)
        {
          if (v44 < 0x64)
          {
            long long v46 = &a00010203040506[2 * v44];
            *((unsigned char *)v8 + 17) = v46[1];
            char v47 = *v46;
            uint64_t v45 = 2;
LABEL_55:
            *((unsigned char *)v8 + 16) = v47;
            (*(void (**)(void, void *, uint64_t))(*(void *)*v8 + 8))(*v8, v8 + 2, v45);
            goto LABEL_47;
          }
          *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2 * (*v43 % 0x64u)];
          LODWORD(v44) = (41 * v44) >> 12;
          uint64_t v45 = 3;
        }
        else
        {
          uint64_t v45 = 1;
        }
        char v47 = v44 | 0x30;
        goto LABEL_55;
      }
LABEL_74:
      uint64_t v57 = *v43;
      if (!*v43)
      {
        (**(void (***)(void, uint64_t))*v8)(*v8, 48);
        goto LABEL_152;
      }
      if (v57 >= 0xA)
      {
        if (v57 < 0x64)
        {
          long long v79 = &a00010203040506[2 * v57];
          *((unsigned char *)v8 + 17) = v79[1];
          char v80 = *v79;
          uint64_t v58 = 2;
LABEL_151:
          *((unsigned char *)v8 + 16) = v80;
          (*(void (**)(void, void *, uint64_t))(*(void *)*v8 + 8))(*v8, v8 + 2, v58);
LABEL_152:
          (*(void (**)(void, const char *, uint64_t))(*(void *)*v8 + 8))(*v8, "],\"subtype\":", 12);
          uint64_t v85 = *(void *)(a2 + 8);
          if (!*(unsigned char *)(v85 + 25))
          {
            uint64_t v25 = (uint64_t (***)(void))*v8;
            char v26 = *(uint64_t (**)(uint64_t (***)(void), char *, uint64_t))(*(void *)*v8 + 8);
            char v27 = "null}";
            uint64_t v33 = 5;
            goto LABEL_200;
          }
          uint64_t v86 = *(unsigned __int8 *)(v85 + 24);
          if (!v86)
          {
            (**(void (***)(void, uint64_t))*v8)(*v8, 48);
            goto LABEL_176;
          }
          if (v86 >= 0xA)
          {
            if (v86 < 0x64)
            {
              long long v88 = &a00010203040506[2 * v86];
              *((unsigned char *)v8 + 17) = v88[1];
              char v89 = *v88;
              uint64_t v87 = 2;
LABEL_175:
              *((unsigned char *)v8 + 16) = v89;
              (*(void (**)(void, void *, uint64_t))(*(void *)*v8 + 8))(*v8, v8 + 2, v87);
LABEL_176:
              long long v40 = **(uint64_t (***)(void))*v8;
LABEL_177:
              return v40();
            }
            *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2
                                                                   * (v86
                                                                                     - 100
                                                                                     * ((41 * v86) >> 12))];
            uint64_t v87 = 3;
            LODWORD(v86) = (41 * v86) >> 12;
          }
          else
          {
            uint64_t v87 = 1;
          }
          char v89 = v86 | 0x30;
          goto LABEL_175;
        }
        *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2 * (*v43 % 0x64u)];
        uint64_t v58 = 3;
        LODWORD(v57) = (41 * v57) >> 12;
      }
      else
      {
        uint64_t v58 = 1;
      }
      char v80 = v57 | 0x30;
      goto LABEL_151;
    case 9:
      uint64_t v25 = *(uint64_t (****)(void))result;
      char v26 = *(uint64_t (**)(uint64_t (***)(void), char *, uint64_t))(*(void *)*v8 + 8);
      char v27 = "<discarded>";
      uint64_t v33 = 11;
      goto LABEL_200;
    default:
      return result;
  }
}

uint64_t sub_215DDF704(uint64_t a1)
{
  if (*(char *)(a1 + 631) < 0)
  {
    operator delete(*(void **)(a1 + 608));
    __n128 v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2) {
      return a1;
    }
  }
  else
  {
    __n128 v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2) {
      return a1;
    }
  }
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_215DDF798(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684DE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215DDF7B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684DE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215DDF80C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void sub_215DDF834(uint64_t a1, std::string::value_type a2)
{
}

std::string *sub_215DDF83C(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3)
{
  return std::string::append(*(std::string **)(a1 + 8), a2, a3);
}

void sub_215DDF848()
{
}

uint64_t sub_215DDF85C(uint64_t result, uint64_t *a2)
{
  LOBYTE(v2) = *((char *)a2 + 23) < 0;
  uint64_t v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = a2[1];
  }
  if (!v3) {
    return result;
  }
  uint64_t v5 = (void *)result;
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  uint64_t v12 = result + 90;
  do
  {
    if (v2) {
      int8x16_t v15 = (uint64_t *)*a2;
    }
    else {
      int8x16_t v15 = a2;
    }
    uint64_t v16 = *((unsigned __int8 *)v15 + v6);
    if (v10) {
      unsigned int v11 = *((unsigned char *)v15 + v6) & 0x3F | (v11 << 6);
    }
    else {
      unsigned int v11 = (0xFFu >> byte_215EF9520[v16]) & v16;
    }
    unsigned int v10 = byte_215EF9520[16 * v10 + 256 + byte_215EF9520[v16]];
    if (v10 != 1)
    {
      if (v10)
      {
        *(unsigned char *)(v12 + v9++) = *((unsigned char *)v15 + v6);
        ++v7;
        goto LABEL_6;
      }
      switch(v11)
      {
        case 8u:
          *(_WORD *)(v12 + v9) = 25180;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC) {
            break;
          }
          goto LABEL_23;
        case 9u:
          *(_WORD *)(v12 + v9) = 29788;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC) {
            break;
          }
          goto LABEL_23;
        case 0xAu:
          *(_WORD *)(v12 + v9) = 28252;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC) {
            break;
          }
          goto LABEL_23;
        case 0xBu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
        case 0x20u:
        case 0x21u:
          goto LABEL_30;
        case 0xCu:
          *(_WORD *)(v12 + v9) = 26204;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC) {
            break;
          }
          goto LABEL_23;
        case 0xDu:
          *(_WORD *)(v12 + v9) = 29276;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC) {
            break;
          }
          goto LABEL_23;
        case 0x22u:
          *(_WORD *)(v12 + v9) = 8796;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC) {
            break;
          }
          goto LABEL_23;
        default:
          if (v11 == 92)
          {
            *(_WORD *)(v12 + v9) = 23644;
            v9 += 2;
            if ((unint64_t)(v9 - 500) > 0xC) {
              goto LABEL_23;
            }
          }
          else
          {
LABEL_30:
            if (v11 > 0x1F)
            {
              *(unsigned char *)(v12 + v9++) = *((unsigned char *)v15 + v6);
              if ((unint64_t)(v9 - 500) > 0xC) {
                goto LABEL_23;
              }
            }
            else
            {
              uint64_t result = snprintf((char *)(v12 + v9), 7uLL, "\\u%04x", v11);
              v9 += 6;
              if ((unint64_t)(v9 - 500) > 0xC) {
                goto LABEL_23;
              }
            }
          }
          break;
      }
LABEL_34:
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v5 + 8))(*v5, v12, v9);
      unsigned int v10 = 0;
      uint64_t v9 = 0;
      uint64_t v8 = 0;
      uint64_t v7 = 0;
      goto LABEL_6;
    }
    int v17 = *((_DWORD *)v5 + 158);
    if ((v17 - 1) < 2)
    {
      v6 -= v7 != 0;
      if (v17 != 1)
      {
        unsigned int v10 = 0;
        uint64_t v7 = 0;
        uint64_t v9 = v8;
        goto LABEL_6;
      }
      uint64_t v9 = v8 + 3;
      uint64_t v18 = v12 + v8;
      *(_WORD *)uint64_t v18 = -16401;
      *(unsigned char *)(v18 + 2) = -67;
      if ((unint64_t)(v8 - 497) > 0xC)
      {
LABEL_23:
        unsigned int v10 = 0;
        uint64_t v7 = 0;
        uint64_t v8 = v9;
        goto LABEL_6;
      }
      goto LABEL_34;
    }
    if (!v17)
    {
      char v35 = 3;
      *(_DWORD *)std::string __str = 0;
      snprintf(__str, 3uLL, "%.2X", v16);
      exceptiounint64_t n = __cxa_allocate_exception(0x20uLL);
      std::to_string(&v28, v6);
      sub_215AC8CC8("invalid UTF-8 byte at index ", &v28, &v29);
      sub_215AEDCD0(": 0x", &v29, &v30);
      if (v35 >= 0) {
        long long v22 = __str;
      }
      else {
        long long v22 = *(char **)__str;
      }
      if (v35 >= 0) {
        std::string::size_type v23 = v35;
      }
      else {
        std::string::size_type v23 = v34;
      }
      long long v24 = std::string::append(&v30, v22, v23);
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      std::string::size_type v32 = v24->__r_.__value_.__r.__words[2];
      long long v31 = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      sub_215D2DB00(316, (uint64_t)&v31, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
    }
    unsigned int v10 = 1;
LABEL_6:
    ++v6;
    int v13 = *((char *)a2 + 23);
    unsigned int v2 = v13 >> 31;
    unint64_t v14 = a2[1];
    if (v13 >= 0) {
      unint64_t v14 = *((unsigned __int8 *)a2 + 23);
    }
  }
  while (v6 < v14);
  if (v10)
  {
    int v20 = *((_DWORD *)v5 + 158);
    switch(v20)
    {
      case 1:
        (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v5 + 8))(*v5, v12, v8);
        unint64_t v19 = *(uint64_t (**)(void))(*(void *)*v5 + 8);
        break;
      case 2:
        unint64_t v19 = *(uint64_t (**)(void))(*(void *)*v5 + 8);
        break;
      case 0:
        char v35 = 3;
        *(_DWORD *)std::string __str = 0;
        char v26 = (uint64_t *)*a2;
        if (v13 >= 0) {
          char v26 = a2;
        }
        snprintf(__str, 3uLL, "%.2X", *((unsigned __int8 *)v26 + v14 - 1));
        char v27 = __cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        sub_215D2DB00(316, (uint64_t)&v31, (uint64_t)v27);
        __cxa_throw(v27, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
      default:
        return result;
    }
LABEL_48:
    return v19();
  }
  if (v9)
  {
    unint64_t v19 = *(uint64_t (**)(void))(*(void *)*v5 + 8);
    goto LABEL_48;
  }
  return result;
}

void sub_215DDFDD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((v40 & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if (!v40)
  {
LABEL_7:
    if (a39 < 0) {
      operator delete(a34);
    }
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v39);
  goto LABEL_7;
}

char *sub_215DDFF28(char *__src, double a2)
{
  unsigned int v2 = __src;
  if ((*(void *)&a2 & 0x8000000000000000) != 0)
  {
    a2 = -a2;
    *uint64_t __src = 45;
    unsigned int v2 = __src + 1;
    if (a2 == 0.0) {
      goto LABEL_3;
    }
  }
  else if (a2 == 0.0)
  {
LABEL_3:
    *(_WORD *)unsigned int v2 = 11824;
    uint64_t result = v2 + 3;
    v2[2] = 48;
    return result;
  }
  uint64_t v4 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  uint64_t v5 = *(void *)&a2 >> 52;
  if (*(void *)&a2 >> 52)
  {
    uint64_t v6 = 2 * (v4 | 0x10000000000000);
    uint64_t v7 = (2 * (*(void *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000)) | 1;
    int v8 = v5 - 1076;
    if (*(void *)&a2 >> 53 && !v4)
    {
      char v9 = v5 - 53;
      uint64_t v10 = 0x3FFFFFFFFFFFFFLL;
      uint64_t v4 = 0x10000000000000;
      goto LABEL_12;
    }
    v4 |= 0x10000000000000uLL;
  }
  else
  {
    uint64_t v6 = 2 * v4;
    uint64_t v7 = (2 * (*(void *)&a2 & 0xFFFFFFFFFFFFFLL)) | 1;
    int v8 = -1075;
  }
  uint64_t v10 = v6 - 1;
  char v9 = v8;
LABEL_12:
  int v11 = -v8;
  int v12 = -4813693 - 78913 * v8;
  do
  {
    unint64_t v13 = v7;
    v7 *= 2;
    ++v11;
    v12 += 78913;
  }
  while ((v7 & 0x8000000000000000) == 0);
  do
  {
    unint64_t v14 = v4;
    v4 *= 2;
  }
  while ((v4 & 0x8000000000000000) == 0);
  unint64_t v15 = v10 << (v9 + v11);
  int v16 = v12 / 0x40000;
  if (v11 - 61 > 0) {
    ++v16;
  }
  int v17 = (char *)&unk_215EF9030 + 16 * ((int)((v16 + 307 + (((v16 + 307) >> 28) & 7)) << 16) >> 19);
  unint64_t v18 = *(void *)v17;
  unint64_t v19 = v17 + 8;
  unsigned int v20 = v4 & 0xFFFFFFFE;
  unint64_t v21 = v14 >> 31;
  uint64_t v22 = HIDWORD(*(void *)v17);
  unint64_t v23 = *(void *)v17 * (unint64_t)v20;
  unint64_t v24 = HIDWORD(*(void *)v17) * (unint64_t)v20;
  unint64_t v25 = HIDWORD(v24);
  unint64_t v26 = (*(void *)v17 * (v14 >> 31)) >> 32;
  unint64_t v27 = ((v24 & 0xFFFFFFFE)
       + HIDWORD(v23)
       + *(void *)v17 * (v14 >> 31)
       + 0x80000000) >> 32;
  unint64_t v28 = HIDWORD(v15);
  unint64_t v29 = HIDWORD(*(void *)v17) * (unint64_t)v15;
  unint64_t v30 = *(void *)v17 * (unint64_t)HIDWORD(v15);
  unint64_t v31 = HIDWORD(*(void *)v17) * (unint64_t)HIDWORD(v15);
  unint64_t v32 = HIDWORD(v29);
  unint64_t v33 = ((*(void *)v17 * (unint64_t)v15) >> 32)
      + v29
      + v30
      + 0x80000000;
  int v34 = v11 - *((_DWORD *)v17 + 2);
  char v35 = v34 - 64;
  unsigned int v36 = v7 & 0xFFFFFFFE;
  unint64_t v37 = v13 >> 31;
  unint64_t v38 = v18 * (unint64_t)v36;
  unint64_t v39 = HIDWORD(v18) * (unint64_t)v36;
  unint64_t v40 = v18 * (v13 >> 31);
  unint64_t v41 = HIDWORD(v18) * v37;
  unint64_t v42 = HIDWORD(v39);
  unint64_t v43 = HIDWORD(v40);
  unint64_t v44 = ((v39 & 0xFFFFFFFE) + HIDWORD(v38) + v40 + 0x80000000) >> 32;
  unint64_t v45 = v41 + HIDWORD(v39) + HIDWORD(v40) + v44 - 1;
  int v46 = -*((_DWORD *)v19 + 1);
  unint64_t v47 = v32 + HIDWORD(v30) + HIDWORD(v33);
  unint64_t v48 = ~v31 - v47 + v45;
  unint64_t v49 = v26 + v22 * (v14 >> 31) + v25 + v27;
  unint64_t v50 = v45 - v49;
  unint64_t v51 = 1 << v34;
  unint64_t v52 = v45 >> v34;
  uint64_t v53 = (1 << v34) - 1;
  unint64_t v54 = v45 & v53;
  if (v52 <= 0x3B9AC9FF)
  {
    if (v52 <= 0x5F5E0FF)
    {
      if (v52 <= 0x98967F)
      {
        if (v52 <= 0xF423F)
        {
          unsigned int v57 = v52 >> 5;
          if (v52 <= 9) {
            int v58 = 1;
          }
          else {
            int v58 = 10;
          }
          if (v52 <= 9) {
            int v59 = 1;
          }
          else {
            int v59 = 2;
          }
          if (v52 <= 0x63) {
            int v60 = v58;
          }
          else {
            int v60 = 100;
          }
          if (v52 <= 0x63) {
            unsigned int v56 = v59;
          }
          else {
            unsigned int v56 = 3;
          }
          if (v52 > 0x3E7)
          {
            int v60 = 1000;
            unsigned int v56 = 4;
          }
          if (v52 >> 4 > 0x270)
          {
            int v60 = 10000;
            unsigned int v56 = 5;
          }
          BOOL v61 = v57 > 0xC34;
          if (v57 > 0xC34) {
            unsigned int v55 = 100000;
          }
          else {
            unsigned int v55 = v60;
          }
          if (v61) {
            unsigned int v56 = 6;
          }
        }
        else
        {
          unsigned int v55 = 1000000;
          unsigned int v56 = 7;
        }
      }
      else
      {
        unsigned int v55 = 10000000;
        unsigned int v56 = 8;
      }
    }
    else
    {
      unsigned int v55 = 100000000;
      unsigned int v56 = 9;
    }
  }
  else
  {
    unsigned int v55 = 1000000000;
    unsigned int v56 = 10;
  }
  uint64_t v62 = 0;
  unint64_t v63 = v42 + v43 + v41;
  uint64_t v64 = v56;
  unint64_t v65 = ~v49 + v63 + v44;
  uint64_t v66 = v42 - v47 + v43 + v44 + v22 * (v37 - v28) - 2;
  uint64_t v67 = v54 - v42 - v43 - v44 + v25 + v26 + v27 + v22 * (v21 - v37) + 1;
  while (v62 != v64)
  {
    uint64_t v68 = v62;
    unsigned int v69 = v52 / v55;
    unint64_t v52 = v52 % v55;
    unsigned int v70 = v69 + 48;
    uint64_t v62 = v68 + 1;
    v2[v68] = v70;
    --v56;
    unint64_t v71 = v52 << v35;
    unint64_t v72 = (v52 << v35) + v54;
    if (v48 < v72)
    {
      v55 /= 0xAu;
    }
    else
    {
      v46 += v56;
      unint64_t v73 = (unint64_t)v55 << v35;
      if (v72 >= v50 || v48 - v72 < v73) {
        goto LABEL_71;
      }
      uint64_t v75 = 0;
      unint64_t v76 = v54 + v71 + v73;
      unint64_t v77 = v66 - v76;
      unint64_t v78 = v67 + v71 + v73;
      do
      {
        if (v76 >= v50 && v65 - v72 + v75 <= v78) {
          break;
        }
        v2[v68] = --v70;
        if (v76 >= v50) {
          break;
        }
        unint64_t v79 = v77 + v75;
        v75 -= v73;
        v76 += v73;
        v78 += v73;
      }
      while (v79 >= v73);
    }
    if (v48 >= v72) {
      goto LABEL_71;
    }
  }
  do
  {
    unint64_t v80 = v48;
    unint64_t v81 = v50;
    unint64_t v82 = (10 * v54) >> v35;
    unint64_t v54 = (10 * v54) & v53;
    int v83 = v82 + 48;
    v2[v64++] = v82 + 48;
    unint64_t v48 = 10 * v80;
    v50 *= 10;
    --v46;
  }
  while (10 * v80 < v54);
  if (v54 < v50 && 10 * v80 - v54 >= v51)
  {
    uint64_t v84 = 10 * v81;
    uint64_t v85 = -(uint64_t)v54;
    unint64_t v86 = 10 * v80 - v51;
    unint64_t v87 = v51 + v54;
    uint64_t v88 = -10 * v81;
    do
    {
      if (v87 >= v50 && v84 + v85 <= v88 + v87) {
        break;
      }
      v2[v64 - 1] = --v83;
      if (v87 >= v50) {
        break;
      }
      unint64_t v89 = v86 + v85;
      v85 -= v51;
      v87 += v51;
    }
    while (v89 >= v51);
  }
  LODWORD(v62) = v64;
LABEL_71:
  uint64_t v90 = v46 + (uint64_t)(int)v62;
  if ((v46 & 0x80000000) == 0 && (int)v90 <= 15)
  {
    memset(&v2[(int)v62], 48, v46);
    *(_WORD *)&v2[v90] = 12334;
    return &v2[v90 + 2];
  }
  if ((v90 - 16) >= 0xFFFFFFF1)
  {
    uint64_t v93 = v90;
    char v94 = &v2[v90];
    uint64_t v95 = (int)v62;
    memmove(v94 + 1, v94, (int)v62 - v93);
    *char v94 = 46;
    return &v2[v95 + 1];
  }
  if (v90 == 0 || v90 >= 0xFFFFFFFD)
  {
    size_t v91 = -(int)v90;
    uint64_t v92 = (int)v62;
    memmove(&v2[v91 + 2], v2, (int)v62);
    *(_WORD *)unsigned int v2 = 11824;
    memset(v2 + 2, 48, v91);
    return &v2[v92 + 2 + v91];
  }
  if (v62 == 1)
  {
    uint64_t v96 = 1;
  }
  else
  {
    uint64_t v97 = (int)v62;
    memmove(v2 + 2, v2 + 1, (int)v62 - 1);
    v2[1] = 46;
    uint64_t v96 = v97 + 1;
  }
  size_t v98 = &v2[v96];
  *size_t v98 = 101;
  unsigned int v99 = v90 - 1;
  if ((int)v90 >= 1) {
    char v100 = 43;
  }
  else {
    char v100 = 45;
  }
  if ((int)v90 - 1 < 0) {
    unsigned int v99 = 1 - v90;
  }
  v98[1] = v100;
  if (v99 > 9)
  {
    if (v99 > 0x63)
    {
      v98[2] = v99 / 0x64 + 48;
      unsigned __int8 v103 = v99 % 0x64;
      v98[3] = (v103 / 0xAu) | 0x30;
      v98[4] = (v103 % 0xAu) | 0x30;
      uint64_t v102 = 2;
      return &v98[v102 + 3];
    }
    v98[2] = v99 / 0xAu + 48;
    char v101 = (v99 % 0xAu) | 0x30;
  }
  else
  {
    v98[2] = 48;
    char v101 = v99 + 48;
  }
  v98[3] = v101;
  uint64_t v102 = 1;
  return &v98[v102 + 3];
}

uint64_t sub_215DE05EC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10 = *a2;
  if (v10 == 2)
  {
    uint64_t v22 = **(void **)(a1 + 640);
    if (**((void **)a2 + 1) != *(void *)(*((void *)a2 + 1) + 8))
    {
      (*(void (**)(void))v22)();
      unint64_t v23 = (uint64_t *)*((void *)a2 + 1);
      uint64_t v24 = *v23;
      uint64_t v25 = a1;
      if (*v23 != v23[1] - 16)
      {
        do
        {
          sub_215DE05EC(v25, v24, a3, a4, a5);
          (***(void (****)(void))(a1 + 640))();
          v24 += 16;
          uint64_t v25 = a1;
        }
        while (v24 != *(void *)(*((void *)a2 + 1) + 8) - 16);
      }
      sub_215DE05EC(v25, v24, a3, a4, a5);
      unint64_t v26 = ***(uint64_t (****)(void))(a1 + 640);
      goto LABEL_50;
    }
    unint64_t v28 = *(uint64_t (**)(void))(v22 + 8);
LABEL_27:
    return v28();
  }
  if (v10 == 1)
  {
    int v11 = **(void (****)(void))(a1 + 640);
    if (*(void *)(*((void *)a2 + 1) + 16))
    {
      if (!a3)
      {
        (*v11)();
        unint64_t v29 = (void *)*((void *)a2 + 1);
        unint64_t v30 = (void *)*v29;
        if (v29[2] < 2uLL)
        {
          unint64_t v33 = (void *)*v29;
        }
        else
        {
          unint64_t v31 = 1;
          do
          {
            (***(void (****)(void, uint64_t))(a1 + 640))(*(void *)(a1 + 640), 34);
            sub_215DDF85C(a1, v30 + 4);
            (*(void (**)(void, const char *, uint64_t))(**(void **)(a1 + 640) + 8))(*(void *)(a1 + 640), "\":", 2);
            sub_215DE05EC(a1, v30 + 7, 0, a4, a5);
            (***(void (****)(void))(a1 + 640))();
            unint64_t v32 = (void *)v30[1];
            if (v32)
            {
              do
              {
                unint64_t v33 = v32;
                unint64_t v32 = (void *)*v32;
              }
              while (v32);
            }
            else
            {
              do
              {
                unint64_t v33 = (void *)v30[2];
                BOOL v21 = *v33 == (void)v30;
                unint64_t v30 = v33;
              }
              while (!v21);
            }
            ++v31;
            unint64_t v30 = v33;
          }
          while (v31 < *(void *)(*((void *)a2 + 1) + 16));
        }
        (***(void (****)(void, uint64_t))(a1 + 640))(*(void *)(a1 + 640), 34);
        sub_215DDF85C(a1, v33 + 4);
        (*(void (**)(void, const char *, uint64_t))(**(void **)(a1 + 640) + 8))(*(void *)(a1 + 640), "\":", 2);
        sub_215DE05EC(a1, v33 + 7, 0, a4, a5);
LABEL_49:
        unint64_t v26 = ***(uint64_t (****)(void))(a1 + 640);
LABEL_50:
        return v26();
      }
      v11[1]();
      unint64_t v12 = (a5 + a4);
      unint64_t v13 = (uint64_t *)(a1 + 664);
      if (*(char *)(a1 + 687) < 0)
      {
        unint64_t v14 = *(void *)(a1 + 672);
        if (v14 >= v12)
        {
LABEL_7:
          unint64_t v15 = (void *)*((void *)a2 + 1);
          int v16 = (void *)*v15;
          if (v15[2] >= 2uLL) {
            goto LABEL_8;
          }
          goto LABEL_43;
        }
      }
      else
      {
        unint64_t v14 = *(unsigned __int8 *)(a1 + 687);
        if (v12 <= v14) {
          goto LABEL_7;
        }
      }
      std::string::resize((std::string *)(a1 + 664), 2 * v14, 32);
      int v34 = (void *)*((void *)a2 + 1);
      int v16 = (void *)*v34;
      if (v34[2] >= 2uLL)
      {
LABEL_8:
        unint64_t v17 = 1;
        do
        {
          unint64_t v18 = (void *)(a1 + 664);
          if (*(char *)(a1 + 687) < 0) {
            unint64_t v18 = (void *)*v13;
          }
          (*(void (**)(void, void *, void))(**(void **)(a1 + 640) + 8))(*(void *)(a1 + 640), v18, (a5 + a4));
          (***(void (****)(void))(a1 + 640))();
          sub_215DDF85C(a1, v16 + 4);
          (*(void (**)(void, const char *, uint64_t))(**(void **)(a1 + 640) + 8))(*(void *)(a1 + 640), "\": ", 3);
          sub_215DE05EC(a1, v16 + 7, 1, a4, (a5 + a4));
          (*(void (**)(void, const char *, uint64_t))(**(void **)(a1 + 640) + 8))(*(void *)(a1 + 640), ",\n", 2);
          unint64_t v19 = (void *)v16[1];
          if (v19)
          {
            do
            {
              unsigned int v20 = v19;
              unint64_t v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              unsigned int v20 = (void *)v16[2];
              BOOL v21 = *v20 == (void)v16;
              int v16 = v20;
            }
            while (!v21);
          }
          ++v17;
          int v16 = v20;
        }
        while (v17 < *(void *)(*((void *)a2 + 1) + 16));
        goto LABEL_44;
      }
LABEL_43:
      unsigned int v20 = v16;
LABEL_44:
      uint64_t v35 = a1 + 664;
      if (*(char *)(a1 + 687) < 0) {
        uint64_t v35 = *v13;
      }
      (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 640) + 8))(*(void *)(a1 + 640), v35, (a5 + a4));
      (***(void (****)(void))(a1 + 640))();
      sub_215DDF85C(a1, v20 + 4);
      (*(void (**)(void, const char *, uint64_t))(**(void **)(a1 + 640) + 8))(*(void *)(a1 + 640), "\": ", 3);
      sub_215DE05EC(a1, v20 + 7, 1, a4, (a5 + a4));
      (***(void (****)(void))(a1 + 640))();
      if (*(char *)(a1 + 687) < 0) {
        unint64_t v13 = (uint64_t *)*v13;
      }
      (*(void (**)(void, uint64_t *, void))(**(void **)(a1 + 640) + 8))(*(void *)(a1 + 640), v13, a5);
      goto LABEL_49;
    }
    unint64_t v28 = (uint64_t (*)(void))v11[1];
    goto LABEL_27;
  }

  return sub_215DDE02C(a1, (uint64_t)a2, a3, a4, a5);
}

uint64_t sub_215DE0D88(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  int v8 = (void ***)result;
  switch(*(unsigned char *)a2)
  {
    case 0:
      goto LABEL_34;
    case 1:
      uint64_t v9 = **(void **)result;
      if (**(void **)(a2 + 8) == *(void *)(*(void *)(a2 + 8) + 8))
      {
        unint64_t v45 = *(uint64_t (**)(void))(v9 + 8);
        goto LABEL_57;
      }
      if (a3)
      {
        (*(void (**)(void))(v9 + 8))();
        unint64_t v10 = (a5 + a4);
        if (*((char *)v8 + 631) < 0)
        {
          unint64_t v11 = (unint64_t)v8[77];
          if (v11 >= v10)
          {
LABEL_6:
            uint64_t v12 = *(void *)(a2 + 8);
            unint64_t v13 = *(uint64_t **)v12;
            if (*(void *)(v12 + 8) - *(void *)v12 != 40) {
              goto LABEL_7;
            }
            goto LABEL_98;
          }
        }
        else
        {
          unint64_t v11 = *((unsigned __int8 *)v8 + 631);
          if (v10 <= v11) {
            goto LABEL_6;
          }
        }
        std::string::resize((std::string *)(v8 + 76), 2 * v11, 32);
        uint64_t v68 = *(void *)(a2 + 8);
        unint64_t v13 = *(uint64_t **)v68;
        if (*(void *)(v68 + 8) - *(void *)v68 != 40)
        {
LABEL_7:
          unint64_t v14 = 0;
          do
          {
            ((void (*)(void))(**v8)[1])();
            ((void (*)(void))***v8)();
            sub_215DE2450((uint64_t)v8, v13);
            ((void (*)(void, const char *, uint64_t))(**v8)[1])(*v8, "\": ", 3);
            sub_215DE0D88(v8, v13 + 3, 1, a4, v10);
            ((void (*)(void, const char *, uint64_t))(**v8)[1])(*v8, ",\n", 2);
            ++v14;
            v13 += 5;
          }
          while (v14 < -1
                      - 0x3333333333333333
                      * ((uint64_t)(*(void *)(*(void *)(a2 + 8) + 8) - **(void **)(a2 + 8)) >> 3));
        }
LABEL_98:
        uint64_t v66 = v8 + 76;
        if (*((char *)v8 + 631) < 0) {
          uint64_t v66 = (void ***)v8[76];
        }
        ((void (*)(void, void ***, unint64_t))(**v8)[1])(*v8, v66, v10);
        ((void (*)(void))***v8)();
        sub_215DE2450((uint64_t)v8, v13);
        ((void (*)(void, const char *, uint64_t))(**v8)[1])(*v8, "\": ", 3);
        sub_215DE0D88(v8, v13 + 3, 1, a4, v10);
        ((void (*)(void))***v8)();
        uint64_t v67 = (void (*)(void))(**v8)[1];
        goto LABEL_171;
      }
      (*(void (**)(void))v9)();
      uint64_t v46 = *(void *)(a2 + 8);
      unint64_t v47 = *(uint64_t **)v46;
      if (*(void *)(v46 + 8) - *(void *)v46 != 40)
      {
        unint64_t v48 = 0;
        do
        {
          ((void (*)(void, uint64_t))***v8)(*v8, 34);
          sub_215DE2450((uint64_t)v8, v47);
          ((void (*)(void, const char *, uint64_t))(**v8)[1])(*v8, "\":", 2);
          sub_215DE0D88(v8, v47 + 3, 0, a4, a5);
          ((void (*)(void))***v8)();
          ++v48;
          v47 += 5;
        }
        while (v48 < -1
                    - 0x3333333333333333
                    * ((uint64_t)(*(void *)(*(void *)(a2 + 8) + 8) - **(void **)(a2 + 8)) >> 3));
      }
      ((void (*)(void, uint64_t))***v8)(*v8, 34);
      sub_215DE2450((uint64_t)v8, v47);
      ((void (*)(void, const char *, uint64_t))(**v8)[1])(*v8, "\":", 2);
      sub_215DE0D88(v8, v47 + 3, 0, a4, a5);
LABEL_172:
      BOOL v21 = (uint64_t (*)(void))***v8;
LABEL_173:
      return v21();
    case 2:
      unint64_t v15 = **(void (****)(void))result;
      if (**(void **)(a2 + 8) != *(void *)(*(void *)(a2 + 8) + 8))
      {
        if (!a3)
        {
          (*v15)();
          unint64_t v49 = *(uint64_t **)(a2 + 8);
          uint64_t v50 = *v49;
          unint64_t v51 = v8;
          if (*v49 != v49[1] - 16)
          {
            do
            {
              sub_215DE0D88(v51, v50, 0, a4, a5);
              ((void (*)(void))***v8)();
              v50 += 16;
              unint64_t v51 = v8;
            }
            while (v50 != *(void *)(*(void *)(a2 + 8) + 8) - 16);
          }
          sub_215DE0D88(v51, v50, 0, a4, a5);
          goto LABEL_111;
        }
        v15[1]();
        unint64_t v16 = (a5 + a4);
        unint64_t v17 = v8 + 76;
        if (*((char *)v8 + 631) < 0)
        {
          unint64_t v18 = (unint64_t)v8[77];
          if (v18 >= v16)
          {
LABEL_14:
            unint64_t v19 = *(uint64_t **)(a2 + 8);
            uint64_t v20 = *v19;
            if (*v19 != v19[1] - 16) {
              goto LABEL_15;
            }
            goto LABEL_106;
          }
        }
        else
        {
          unint64_t v18 = *((unsigned __int8 *)v8 + 631);
          if (v16 <= v18) {
            goto LABEL_14;
          }
        }
        std::string::resize((std::string *)(v8 + 76), 2 * v18, 32);
        unsigned int v69 = *(uint64_t **)(a2 + 8);
        uint64_t v20 = *v69;
        if (*v69 != v69[1] - 16)
        {
          do
          {
LABEL_15:
            ((void (*)(void))(**v8)[1])();
            sub_215DE0D88(v8, v20, 1, a4, (a5 + a4));
            ((void (*)(void, const char *, uint64_t))(**v8)[1])(*v8, ",\n", 2);
            v20 += 16;
          }
          while (v20 != *(void *)(*(void *)(a2 + 8) + 8) - 16);
        }
LABEL_106:
        unsigned int v70 = v8 + 76;
        if (*((char *)v8 + 631) < 0) {
          unsigned int v70 = (void ***)*v17;
        }
        ((void (*)(void, void ***, void))(**v8)[1])(*v8, v70, (a5 + a4));
        sub_215DE0D88(v8, *(void *)(*(void *)(a2 + 8) + 8) - 16, 1, a4, (a5 + a4));
        ((void (*)(void))***v8)();
        if (*((char *)v8 + 631) < 0) {
          unint64_t v17 = (void *)*v17;
        }
        ((void (*)(void, void *, void))(**v8)[1])(*v8, v17, a5);
LABEL_111:
        BOOL v21 = (uint64_t (*)(void))***v8;
        goto LABEL_173;
      }
      unint64_t v45 = (uint64_t (*)(void))v15[1];
LABEL_57:
      return v45();
    case 3:
      (***(void (****)(void))result)();
      sub_215DE2450((uint64_t)v8, *(uint64_t **)(a2 + 8));
      BOOL v21 = (uint64_t (*)(void))***v8;
      goto LABEL_173;
    case 4:
      uint64_t v22 = *(uint64_t (****)(void))result;
      unint64_t v23 = (uint64_t (*)(uint64_t (***)(void), char *, uint64_t))(**v8)[1];
      if (*(unsigned char *)(a2 + 8))
      {
        uint64_t v24 = "true";
        goto LABEL_35;
      }
      uint64_t v24 = "false";
      uint64_t v30 = 5;
      goto LABEL_186;
    case 5:
      unint64_t v25 = *(void *)(a2 + 8);
      if (!v25) {
        goto LABEL_41;
      }
      uint64_t v24 = (char *)(result + 16);
      if ((v25 & 0x8000000000000000) != 0)
      {
        *uint64_t v24 = 45;
        unint64_t v25 = -(uint64_t)v25;
        if (v25 >= 0xA)
        {
          int v56 = 4;
          unint64_t v71 = v25;
          do
          {
            if (v71 <= 0x63)
            {
              v56 -= 2;
              goto LABEL_178;
            }
            if (v71 <= 0x3E7)
            {
              --v56;
              goto LABEL_178;
            }
            if (v71 >> 4 < 0x271) {
              goto LABEL_178;
            }
            v56 += 4;
            BOOL v28 = v71 >= 0x186A0;
            v71 /= 0x2710uLL;
          }
          while (v28);
          v56 -= 3;
        }
        else
        {
          int v56 = 1;
        }
LABEL_178:
        unsigned int v26 = v56 + 1;
        goto LABEL_179;
      }
      if (v25 < 0xA) {
        goto LABEL_31;
      }
      unsigned int v26 = 4;
      unint64_t v27 = *(void *)(a2 + 8);
      while (1)
      {
        if (v27 <= 0x63)
        {
          v26 -= 2;
          goto LABEL_179;
        }
        if (v27 <= 0x3E7) {
          break;
        }
        if (v27 >> 4 < 0x271) {
          goto LABEL_179;
        }
        v26 += 4;
        BOOL v28 = v27 >= 0x186A0;
        v27 /= 0x2710uLL;
        if (!v28)
        {
          v26 -= 3;
          goto LABEL_179;
        }
      }
      --v26;
LABEL_179:
      uint64_t v30 = v26;
      unint64_t v29 = &v24[v26];
      if (v25 < 0x64)
      {
        unint64_t v76 = v25;
      }
      else
      {
        do
        {
          unint64_t v76 = v25 / 0x64;
          *((_WORD *)v29 - 1) = *(_WORD *)&a00010203040506[2 * (v25 % 0x64)];
          v29 -= 2;
          unint64_t v89 = v25 >> 4;
          v25 /= 0x64uLL;
        }
        while (v89 > 0x270);
      }
      if (v76 >= 0xA) {
        goto LABEL_184;
      }
      goto LABEL_131;
    case 6:
      unint64_t v25 = *(void *)(a2 + 8);
      if (!v25)
      {
LABEL_41:
        unint64_t v37 = ***(uint64_t (****)(void))result;
        goto LABEL_163;
      }
      uint64_t v24 = (char *)(result + 16);
      if (v25 < 0xA)
      {
LABEL_31:
        unint64_t v29 = (char *)(result + 17);
        uint64_t v30 = 1;
        goto LABEL_132;
      }
      unsigned int v52 = 4;
      unint64_t v53 = *(void *)(a2 + 8);
      while (2)
      {
        if (v53 <= 0x63)
        {
          v52 -= 2;
        }
        else
        {
          if (v53 > 0x3E7)
          {
            if (v53 >> 4 < 0x271) {
              break;
            }
            v52 += 4;
            BOOL v28 = v53 >= 0x186A0;
            v53 /= 0x2710uLL;
            if (!v28)
            {
              v52 -= 3;
              break;
            }
            continue;
          }
          --v52;
        }
        break;
      }
      uint64_t v30 = v52;
      unint64_t v29 = &v24[v52];
      if (v25 < 0x64)
      {
        unint64_t v76 = *(void *)(a2 + 8);
      }
      else
      {
        do
        {
          unint64_t v76 = v25 / 0x64;
          *((_WORD *)v29 - 1) = *(_WORD *)&a00010203040506[2 * (v25 % 0x64)];
          v29 -= 2;
          unint64_t v77 = v25 >> 4;
          v25 /= 0x64uLL;
        }
        while (v77 > 0x270);
      }
      if (v76 >= 0xA)
      {
LABEL_184:
        *((_WORD *)v29 - 1) = *(_WORD *)&a00010203040506[2 * v76];
      }
      else
      {
LABEL_131:
        LOBYTE(v25) = v76;
LABEL_132:
        *(v29 - 1) = v25 + 48;
      }
      uint64_t v22 = *(uint64_t (****)(void))result;
      unint64_t v23 = (uint64_t (*)(uint64_t (***)(void), char *, uint64_t))(**v8)[1];
LABEL_186:
      return v23(v22, v24, v30);
    case 7:
      if ((*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
LABEL_34:
        uint64_t v22 = *(uint64_t (****)(void))result;
        unint64_t v23 = (uint64_t (*)(uint64_t (***)(void), char *, uint64_t))(**v8)[1];
        uint64_t v24 = "null";
LABEL_35:
        uint64_t v30 = 4;
      }
      else
      {
        uint64_t v30 = (uint64_t)&sub_215DDFF28((char *)(result + 16), *(double *)(a2 + 8))[-result - 16];
        unint64_t v23 = (uint64_t (*)(uint64_t (***)(void), char *, uint64_t))(**v8)[1];
        uint64_t v22 = (uint64_t (***)(void))*v8;
        uint64_t v24 = (char *)(v8 + 2);
      }
      goto LABEL_186;
    case 8:
      unint64_t v31 = *(void (**)(void))(**(void **)result + 8);
      if (a3)
      {
        v31();
        unint64_t v32 = (a5 + a4);
        unint64_t v33 = v8 + 76;
        if (*((char *)v8 + 631) < 0)
        {
          unint64_t v34 = (unint64_t)v8[77];
          if (v34 >= v32)
          {
            uint64_t v35 = (uint64_t (***)(void))*v8;
            goto LABEL_81;
          }
        }
        else
        {
          unint64_t v34 = *((unsigned __int8 *)v8 + 631);
          if (v32 <= v34)
          {
            uint64_t v35 = (uint64_t (***)(void))*v8;
            unsigned int v36 = v8 + 76;
            goto LABEL_82;
          }
        }
        std::string::resize((std::string *)(v8 + 76), 2 * v34, 32);
        uint64_t v35 = (uint64_t (***)(void))*v8;
        unsigned int v36 = v8 + 76;
        if ((*((char *)v8 + 631) & 0x80000000) == 0)
        {
LABEL_82:
          ((void (*)(uint64_t (***)(void), void ***, unint64_t))(*v35)[1])(v35, v36, v32);
          ((void (*)(void, const char *, uint64_t))(**v8)[1])(*v8, "\"bytes\": [", 10);
          uint64_t v57 = *(void *)(a2 + 8);
          int v59 = *(unsigned char **)v57;
          int v58 = *(unsigned char **)(v57 + 8);
          if (v59 == v58) {
            goto LABEL_149;
          }
          if (v59 != v58 - 1)
          {
            while (1)
            {
              uint64_t v60 = *v59;
              if (*v59) {
                break;
              }
              ((void (*)(void, uint64_t))***v8)(*v8, 48);
LABEL_86:
              ((void (*)(void, const char *, uint64_t))(**v8)[1])(*v8, ", ", 2);
              if (++v59 == (unsigned char *)(*(void *)(*(void *)(a2 + 8) + 8) - 1)) {
                goto LABEL_95;
              }
            }
            if (v60 >= 0xA)
            {
              if (v60 < 0x64)
              {
                uint64_t v62 = &a00010203040506[2 * v60];
                *((unsigned char *)v8 + 17) = v62[1];
                char v63 = *v62;
                uint64_t v61 = 2;
LABEL_94:
                *((unsigned char *)v8 + 16) = v63;
                ((void (*)(void, void ***, uint64_t))(**v8)[1])(*v8, v8 + 2, v61);
                goto LABEL_86;
              }
              *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2 * (*v59 % 0x64u)];
              LODWORD(v6std::__fs::filesystem::__rename(__from, __to, 0) = (41 * v60) >> 12;
              uint64_t v61 = 3;
            }
            else
            {
              uint64_t v61 = 1;
            }
            char v63 = v60 | 0x30;
            goto LABEL_94;
          }
LABEL_95:
          uint64_t v64 = *v59;
          if (!*v59)
          {
            ((void (*)(void, uint64_t))***v8)(*v8, 48);
            goto LABEL_149;
          }
          if (v64 >= 0xA)
          {
            if (v64 < 0x64)
            {
              uint64_t v74 = &a00010203040506[2 * v64];
              *((unsigned char *)v8 + 17) = v74[1];
              char v75 = *v74;
              uint64_t v65 = 2;
LABEL_148:
              *((unsigned char *)v8 + 16) = v75;
              ((void (*)(void, void ***, uint64_t))(**v8)[1])(*v8, v8 + 2, v65);
LABEL_149:
              ((void (*)(void, const char *, uint64_t))(**v8)[1])(*v8, "],\n", 3);
              int v83 = v8 + 76;
              if (*((char *)v8 + 631) < 0) {
                int v83 = (void ***)*v33;
              }
              ((void (*)(void, void ***, unint64_t))(**v8)[1])(*v8, v83, v32);
              ((void (*)(void, const char *, uint64_t))(**v8)[1])(*v8, "\"subtype\": ", 11);
              uint64_t v84 = *(void *)(a2 + 8);
              if (!*(unsigned char *)(v84 + 25))
              {
                unint64_t v86 = (void (*)(void))(**v8)[1];
LABEL_169:
                v86();
LABEL_170:
                ((void (*)(void, uint64_t))***v8)(*v8, 10);
                uint64_t v67 = (void (*)(void))(**v8)[1];
LABEL_171:
                v67();
                goto LABEL_172;
              }
              uint64_t v85 = *(unsigned __int8 *)(v84 + 24);
              if (!v85)
              {
                ((void (*)(void, uint64_t))***v8)(*v8, 48);
                goto LABEL_170;
              }
              if (v85 >= 0xA)
              {
                if (v85 < 0x64)
                {
                  unint64_t v87 = &a00010203040506[2 * v85];
                  *((unsigned char *)v8 + 17) = v87[1];
                  char v88 = *v87;
LABEL_168:
                  *((unsigned char *)v8 + 16) = v88;
                  unint64_t v86 = (void (*)(void))(**v8)[1];
                  goto LABEL_169;
                }
                *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2
                                                                       * (v85
                                                                                         - 100
                                                                                         * ((41 * v85) >> 12))];
                LODWORD(v85) = (41 * v85) >> 12;
              }
              char v88 = v85 | 0x30;
              goto LABEL_168;
            }
            *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2 * (*v59 % 0x64u)];
            uint64_t v65 = 3;
            LODWORD(v64) = (41 * v64) >> 12;
          }
          else
          {
            uint64_t v65 = 1;
          }
          char v75 = v64 | 0x30;
          goto LABEL_148;
        }
LABEL_81:
        unsigned int v36 = (void ***)*v33;
        goto LABEL_82;
      }
      v31();
      uint64_t v38 = *(void *)(a2 + 8);
      unint64_t v40 = *(unsigned char **)v38;
      unint64_t v39 = *(unsigned char **)(v38 + 8);
      if (v40 == v39) {
        goto LABEL_138;
      }
      if (v40 != v39 - 1)
      {
        while (1)
        {
          uint64_t v41 = *v40;
          if (*v40) {
            break;
          }
          ((void (*)(void, uint64_t))***v8)(*v8, 48);
LABEL_46:
          ((void (*)(void, uint64_t))***v8)(*v8, 44);
          if (++v40 == (unsigned char *)(*(void *)(*(void *)(a2 + 8) + 8) - 1)) {
            goto LABEL_74;
          }
        }
        if (v41 >= 0xA)
        {
          if (v41 < 0x64)
          {
            unint64_t v43 = &a00010203040506[2 * v41];
            *((unsigned char *)v8 + 17) = v43[1];
            char v44 = *v43;
            uint64_t v42 = 2;
LABEL_54:
            *((unsigned char *)v8 + 16) = v44;
            ((void (*)(void, void ***, uint64_t))(**v8)[1])(*v8, v8 + 2, v42);
            goto LABEL_46;
          }
          *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2 * (*v40 % 0x64u)];
          LODWORD(v41) = (41 * v41) >> 12;
          uint64_t v42 = 3;
        }
        else
        {
          uint64_t v42 = 1;
        }
        char v44 = v41 | 0x30;
        goto LABEL_54;
      }
LABEL_74:
      uint64_t v54 = *v40;
      if (!*v40)
      {
        ((void (*)(void, uint64_t))***v8)(*v8, 48);
        goto LABEL_138;
      }
      if (v54 >= 0xA)
      {
        if (v54 < 0x64)
        {
          unint64_t v72 = &a00010203040506[2 * v54];
          *((unsigned char *)v8 + 17) = v72[1];
          char v73 = *v72;
          uint64_t v55 = 2;
          goto LABEL_137;
        }
        *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2 * (*v40 % 0x64u)];
        uint64_t v55 = 3;
        LODWORD(v54) = (41 * v54) >> 12;
      }
      else
      {
        uint64_t v55 = 1;
      }
      char v73 = v54 | 0x30;
LABEL_137:
      *((unsigned char *)v8 + 16) = v73;
      ((void (*)(void, void ***, uint64_t))(**v8)[1])(*v8, v8 + 2, v55);
LABEL_138:
      ((void (*)(void, const char *, uint64_t))(**v8)[1])(*v8, "],\"subtype\":", 12);
      uint64_t v78 = *(void *)(a2 + 8);
      if (!*(unsigned char *)(v78 + 25))
      {
        uint64_t v22 = (uint64_t (***)(void))*v8;
        unint64_t v23 = (uint64_t (*)(uint64_t (***)(void), char *, uint64_t))(**v8)[1];
        uint64_t v24 = "null}";
        uint64_t v30 = 5;
        goto LABEL_186;
      }
      uint64_t v79 = *(unsigned __int8 *)(v78 + 24);
      if (!v79)
      {
        ((void (*)(void, uint64_t))***v8)(*v8, 48);
        goto LABEL_162;
      }
      if (v79 >= 0xA)
      {
        if (v79 < 0x64)
        {
          unint64_t v81 = &a00010203040506[2 * v79];
          *((unsigned char *)v8 + 17) = v81[1];
          char v82 = *v81;
          uint64_t v80 = 2;
          goto LABEL_161;
        }
        *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2
                                                               * (v79
                                                                                 - 100
                                                                                 * ((41 * v79) >> 12))];
        uint64_t v80 = 3;
        LODWORD(v79) = (41 * v79) >> 12;
      }
      else
      {
        uint64_t v80 = 1;
      }
      char v82 = v79 | 0x30;
LABEL_161:
      *((unsigned char *)v8 + 16) = v82;
      ((void (*)(void, void ***, uint64_t))(**v8)[1])(*v8, v8 + 2, v80);
LABEL_162:
      unint64_t v37 = (uint64_t (*)(void))***v8;
LABEL_163:
      return v37();
    case 9:
      uint64_t v22 = *(uint64_t (****)(void))result;
      unint64_t v23 = (uint64_t (*)(uint64_t (***)(void), char *, uint64_t))(**v8)[1];
      uint64_t v24 = "<discarded>";
      uint64_t v30 = 11;
      goto LABEL_186;
    default:
      return result;
  }
}

uint64_t sub_215DE2450(uint64_t result, uint64_t *a2)
{
  LOBYTE(v2) = *((char *)a2 + 23) < 0;
  uint64_t v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = a2[1];
  }
  if (!v3) {
    return result;
  }
  uint64_t v5 = (void *)result;
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int v10 = 0;
  unsigned int v11 = 0;
  uint64_t v12 = result + 90;
  do
  {
    if (v2) {
      unint64_t v15 = (uint64_t *)*a2;
    }
    else {
      unint64_t v15 = a2;
    }
    uint64_t v16 = *((unsigned __int8 *)v15 + v6);
    if (v10) {
      unsigned int v11 = *((unsigned char *)v15 + v6) & 0x3F | (v11 << 6);
    }
    else {
      unsigned int v11 = (0xFFu >> byte_215EF9520[v16]) & v16;
    }
    int v10 = byte_215EF9520[16 * v10 + 256 + byte_215EF9520[v16]];
    if (v10 != 1)
    {
      if (v10)
      {
        *(unsigned char *)(v12 + v9++) = *((unsigned char *)v15 + v6);
        ++v7;
        goto LABEL_6;
      }
      switch(v11)
      {
        case 8u:
          *(_WORD *)(v12 + v9) = 25180;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC) {
            break;
          }
          goto LABEL_23;
        case 9u:
          *(_WORD *)(v12 + v9) = 29788;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC) {
            break;
          }
          goto LABEL_23;
        case 0xAu:
          *(_WORD *)(v12 + v9) = 28252;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC) {
            break;
          }
          goto LABEL_23;
        case 0xBu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
        case 0x20u:
        case 0x21u:
          goto LABEL_30;
        case 0xCu:
          *(_WORD *)(v12 + v9) = 26204;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC) {
            break;
          }
          goto LABEL_23;
        case 0xDu:
          *(_WORD *)(v12 + v9) = 29276;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC) {
            break;
          }
          goto LABEL_23;
        case 0x22u:
          *(_WORD *)(v12 + v9) = 8796;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC) {
            break;
          }
          goto LABEL_23;
        default:
          if (v11 == 92)
          {
            *(_WORD *)(v12 + v9) = 23644;
            v9 += 2;
            if ((unint64_t)(v9 - 500) > 0xC) {
              goto LABEL_23;
            }
          }
          else
          {
LABEL_30:
            if (v11 > 0x1F)
            {
              *(unsigned char *)(v12 + v9++) = *((unsigned char *)v15 + v6);
              if ((unint64_t)(v9 - 500) > 0xC) {
                goto LABEL_23;
              }
            }
            else
            {
              uint64_t result = snprintf((char *)(v12 + v9), 7uLL, "\\u%04x", v11);
              v9 += 6;
              if ((unint64_t)(v9 - 500) > 0xC) {
                goto LABEL_23;
              }
            }
          }
          break;
      }
LABEL_34:
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v5 + 8))(*v5, v12, v9);
      int v10 = 0;
      uint64_t v9 = 0;
      uint64_t v8 = 0;
      uint64_t v7 = 0;
      goto LABEL_6;
    }
    int v17 = *((_DWORD *)v5 + 158);
    if ((v17 - 1) < 2)
    {
      v6 -= v7 != 0;
      if (v17 != 1)
      {
        int v10 = 0;
        uint64_t v7 = 0;
        uint64_t v9 = v8;
        goto LABEL_6;
      }
      uint64_t v9 = v8 + 3;
      uint64_t v18 = v12 + v8;
      *(_WORD *)uint64_t v18 = -16401;
      *(unsigned char *)(v18 + 2) = -67;
      if ((unint64_t)(v8 - 497) > 0xC)
      {
LABEL_23:
        int v10 = 0;
        uint64_t v7 = 0;
        uint64_t v8 = v9;
        goto LABEL_6;
      }
      goto LABEL_34;
    }
    if (!v17)
    {
      char v35 = 3;
      *(_DWORD *)std::string __str = 0;
      snprintf(__str, 3uLL, "%.2X", v16);
      exceptiounint64_t n = __cxa_allocate_exception(0x20uLL);
      std::to_string(&v28, v6);
      sub_215AC8CC8("invalid UTF-8 byte at index ", &v28, &v29);
      sub_215AEDCD0(": 0x", &v29, &v30);
      if (v35 >= 0) {
        uint64_t v22 = __str;
      }
      else {
        uint64_t v22 = *(char **)__str;
      }
      if (v35 >= 0) {
        std::string::size_type v23 = v35;
      }
      else {
        std::string::size_type v23 = v34;
      }
      uint64_t v24 = std::string::append(&v30, v22, v23);
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      std::string::size_type v32 = v24->__r_.__value_.__r.__words[2];
      long long v31 = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      sub_215D2DB00(316, (uint64_t)&v31, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
    }
    int v10 = 1;
LABEL_6:
    ++v6;
    int v13 = *((char *)a2 + 23);
    unsigned int v2 = v13 >> 31;
    unint64_t v14 = a2[1];
    if (v13 >= 0) {
      unint64_t v14 = *((unsigned __int8 *)a2 + 23);
    }
  }
  while (v6 < v14);
  if (v10)
  {
    int v20 = *((_DWORD *)v5 + 158);
    switch(v20)
    {
      case 1:
        (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v5 + 8))(*v5, v12, v8);
        unint64_t v19 = *(uint64_t (**)(void))(*(void *)*v5 + 8);
        break;
      case 2:
        unint64_t v19 = *(uint64_t (**)(void))(*(void *)*v5 + 8);
        break;
      case 0:
        char v35 = 3;
        *(_DWORD *)std::string __str = 0;
        unsigned int v26 = (uint64_t *)*a2;
        if (v13 >= 0) {
          unsigned int v26 = a2;
        }
        snprintf(__str, 3uLL, "%.2X", *((unsigned __int8 *)v26 + v14 - 1));
        unint64_t v27 = __cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        sub_215D2DB00(316, (uint64_t)&v31, (uint64_t)v27);
        __cxa_throw(v27, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
      default:
        return result;
    }
LABEL_48:
    return v19();
  }
  if (v9)
  {
    unint64_t v19 = *(uint64_t (**)(void))(*(void *)*v5 + 8);
    goto LABEL_48;
  }
  return result;
}

void sub_215DE29C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((v40 & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if (!v40)
  {
LABEL_7:
    if (a39 < 0) {
      operator delete(a34);
    }
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v39);
  goto LABEL_7;
}

uint64_t sub_215DE2B1C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10 = *a2;
  if (v10 == 2)
  {
    uint64_t v18 = **(void **)(a1 + 640);
    if (**((void **)a2 + 1) != *(void *)(*((void *)a2 + 1) + 8))
    {
      (*(void (**)(void))v18)();
      unint64_t v19 = (uint64_t *)*((void *)a2 + 1);
      uint64_t v20 = *v19;
      uint64_t v21 = a1;
      if (*v19 != v19[1] - 16)
      {
        do
        {
          sub_215DE2B1C(v21, v20, a3, a4, a5);
          (***(void (****)(void))(a1 + 640))();
          v20 += 16;
          uint64_t v21 = a1;
        }
        while (v20 != *(void *)(*((void *)a2 + 1) + 8) - 16);
      }
      sub_215DE2B1C(v21, v20, a3, a4, a5);
      uint64_t v22 = ***(uint64_t (****)(void))(a1 + 640);
      goto LABEL_33;
    }
    uint64_t v24 = *(uint64_t (**)(void))(v18 + 8);
LABEL_20:
    return v24();
  }
  if (v10 == 1)
  {
    unsigned int v11 = **(void (****)(void))(a1 + 640);
    if (**((void **)a2 + 1) != *(void *)(*((void *)a2 + 1) + 8))
    {
      if (!a3)
      {
        (*v11)();
        uint64_t v25 = *((void *)a2 + 1);
        unsigned int v26 = *(uint64_t **)v25;
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v25 + 8) - *(void *)v25) >> 3) >= 2)
        {
          unint64_t v27 = 1;
          do
          {
            (***(void (****)(void, uint64_t))(a1 + 640))(*(void *)(a1 + 640), 34);
            sub_215DE2450(a1, v26);
            (*(void (**)(void, const char *, uint64_t))(**(void **)(a1 + 640) + 8))(*(void *)(a1 + 640), "\":", 2);
            sub_215DE2B1C(a1, v26 + 3, 0, a4, a5);
            (***(void (****)(void))(a1 + 640))();
            v26 += 5;
            ++v27;
          }
          while (v27 < 0xCCCCCCCCCCCCCCCDLL
                      * ((uint64_t)(*(void *)(*((void *)a2 + 1) + 8) - **((void **)a2 + 1)) >> 3));
        }
        (***(void (****)(void, uint64_t))(a1 + 640))(*(void *)(a1 + 640), 34);
        sub_215DE2450(a1, v26);
        (*(void (**)(void, const char *, uint64_t))(**(void **)(a1 + 640) + 8))(*(void *)(a1 + 640), "\":", 2);
        sub_215DE2B1C(a1, v26 + 3, 0, a4, a5);
        goto LABEL_32;
      }
      v11[1]();
      unint64_t v12 = (a5 + a4);
      int v13 = (void *)(a1 + 664);
      if (*(char *)(a1 + 687) < 0)
      {
        unint64_t v14 = *(void *)(a1 + 672);
        if (v14 >= v12) {
          goto LABEL_7;
        }
      }
      else
      {
        unint64_t v14 = *(unsigned __int8 *)(a1 + 687);
        if (v12 <= v14)
        {
LABEL_7:
          uint64_t v15 = *((void *)a2 + 1);
          uint64_t v16 = *(uint64_t **)v15;
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v15 + 8) - *(void *)v15) >> 3) >= 2)
          {
            unint64_t v17 = 1;
            do
            {
              (*(void (**)(void))(**(void **)(a1 + 640) + 8))(*(void *)(a1 + 640));
              (***(void (****)(void))(a1 + 640))();
              sub_215DE2450(a1, v16);
              (*(void (**)(void, const char *, uint64_t))(**(void **)(a1 + 640) + 8))(*(void *)(a1 + 640), "\": ", 3);
              sub_215DE2B1C(a1, v16 + 3, 1, a4, (a5 + a4));
              (*(void (**)(void, const char *, uint64_t))(**(void **)(a1 + 640) + 8))(*(void *)(a1 + 640), ",\n", 2);
              v16 += 5;
              ++v17;
            }
            while (v17 < 0xCCCCCCCCCCCCCCCDLL
                        * ((uint64_t)(*(void *)(*((void *)a2 + 1) + 8) - **((void **)a2 + 1)) >> 3));
          }
          std::string v28 = (void *)(a1 + 664);
          if (*(char *)(a1 + 687) < 0) {
            std::string v28 = (void *)*v13;
          }
          (*(void (**)(void, void *, void))(**(void **)(a1 + 640) + 8))(*(void *)(a1 + 640), v28, (a5 + a4));
          (***(void (****)(void))(a1 + 640))();
          sub_215DE2450(a1, v16);
          (*(void (**)(void, const char *, uint64_t))(**(void **)(a1 + 640) + 8))(*(void *)(a1 + 640), "\": ", 3);
          sub_215DE2B1C(a1, v16 + 3, 1, a4, (a5 + a4));
          (***(void (****)(void))(a1 + 640))();
          if (*(char *)(a1 + 687) < 0) {
            int v13 = (void *)*v13;
          }
          (*(void (**)(void, void *, void))(**(void **)(a1 + 640) + 8))(*(void *)(a1 + 640), v13, a5);
LABEL_32:
          uint64_t v22 = ***(uint64_t (****)(void))(a1 + 640);
LABEL_33:
          return v22();
        }
      }
      std::string::resize((std::string *)(a1 + 664), 2 * v14, 32);
      goto LABEL_7;
    }
    uint64_t v24 = (uint64_t (*)(void))v11[1];
    goto LABEL_20;
  }

  return sub_215DE0D88(a1, (uint64_t)a2, a3, a4, a5);
}

void sub_215DE327C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v298 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    if (v4 == a1)
    {
      size_t v282 = v281;
      (*(void (**)(uint64_t, void *))(*(void *)a1 + 24))(a1, v281);
      uint64_t v5 = v282;
    }
    else
    {
      uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
      size_t v282 = v5;
    }
    char v186 = *(unsigned char *)(a1 + 184);
    int v283 = a2;
    long long __p = 0u;
    long long v285 = 0u;
    long long v286 = 0u;
    long long v287 = 0u;
    long long v288 = 0u;
    char v289 = 0;
    if (v5)
    {
      if (v5 == v281)
      {
        uint64_t v291 = v290;
        (*(void (**)(void *, unsigned char *))(v281[0] + 24))(v281, v290);
LABEL_270:
        char v292 = v186;
        char v293 = 9;
        uint64_t v294 = 0;
        unint64_t v187 = v286;
        if ((void)v286 == *((void *)&v286 + 1) << 6)
        {
          if ((uint64_t)v286 + 1 < 0) {
            sub_215D2CB08();
          }
          unint64_t v188 = *((void *)&v286 + 1) << 7;
          if (*((void *)&v286 + 1) << 7 <= ((unint64_t)v286 & 0xFFFFFFFFFFFFFFC0) + 64) {
            unint64_t v188 = (v286 & 0xFFFFFFFFFFFFFFC0) + 64;
          }
          if ((unint64_t)v286 <= 0x3FFFFFFFFFFFFFFELL) {
            unint64_t v189 = v188;
          }
          else {
            unint64_t v189 = 0x7FFFFFFFFFFFFFFFLL;
          }
          sub_215D39348((uint64_t)&v285 + 8, v189);
          unint64_t v187 = v286;
        }
        *(void *)&long long v286 = v187 + 1;
        *(void *)(*((void *)&v285 + 1) + ((v187 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v187;
        if (v282 == v281)
        {
          (*(void (**)(void *))(v281[0] + 32))(v281);
        }
        else if (v282)
        {
          (*(void (**)(void))(*v282 + 40))();
        }
        sub_215DE79A8(a1, &v283);
        int v190 = sub_215DE5704(a1 + 40);
        *(_DWORD *)(a1 + 32) = v190;
        if (v190 != 15)
        {
          int64_t v191 = *(unsigned __int8 **)(a1 + 96);
          uint64_t v192 = *(unsigned __int8 **)(a1 + 104);
          memset(&v280, 0, sizeof(v280));
          for (; v191 != v192; ++v191)
          {
            unsigned int v193 = *v191;
            if (v193 > 0x1F)
            {
              std::string::push_back(&v280, v193);
            }
            else
            {
              LOBYTE(__str.__imp_.__imp_) = 0;
              __str.__vftable = 0;
              snprintf((char *)&__str, 9uLL, "<U+%.4X>", v193);
              size_t v194 = strlen((const char *)&__str);
              std::string::append(&v280, (const std::string::value_type *)&__str, v194);
            }
          }
          std::string v279 = *(std::string *)(a1 + 72);
          *((unsigned char *)&v277.__r_.__value_.__s + 23) = 5;
          strcpy((char *)&v277, "value");
          sub_215DE9798(&v278, a1, 0xFu, (const void **)&v277.__r_.__value_.__l.__data_);
          sub_215D36EC8(101, (uint64_t *)&v279, (uint64_t)&v278, (uint64_t)&__str);
          char v289 = 1;
          if (v292)
          {
            exceptiounint64_t n = __cxa_allocate_exception(0x28uLL);
            BOOL v263 = (void *)sub_215D3BA88((uint64_t)exception, (uint64_t)&__str);
            __cxa_throw(v263, (struct type_info *)&unk_26C684770, (void (*)(void *))sub_215D37928);
          }
          __str.__vftable = (std::runtime_error_vtbl *)&unk_26C684698;
          std::runtime_error::~runtime_error(&v296);
          std::exception::~exception(&__str);
          if ((SHIBYTE(v278.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if ((SHIBYTE(v280.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_292;
            }
LABEL_295:
            operator delete(v280.__r_.__value_.__l.__data_);
            if (v289) {
              goto LABEL_293;
            }
            goto LABEL_296;
          }
          operator delete(v278.__r_.__value_.__l.__data_);
          if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_295;
          }
        }
LABEL_292:
        if (v289)
        {
LABEL_293:
          int v195 = (void ***)&v275;
          int v196 = *a2;
          *a2 = 9;
          char v274 = v196;
          uint64_t v197 = *((void *)a2 + 1);
          *((void *)a2 + 1) = 0;
          uint64_t v275 = v197;
          goto LABEL_298;
        }
LABEL_296:
        if (*a2 != 9)
        {
LABEL_299:
          sub_215DEABF4((uint64_t)&v283);
          return;
        }
        int v195 = (void ***)&v273;
        *a2 = 0;
        char v272 = 9;
        uint64_t v198 = *((void *)a2 + 1);
        *((void *)a2 + 1) = 0;
        uint64_t v273 = v198;
        int v196 = 9;
LABEL_298:
        sub_215CEB204(v195, v196);
        goto LABEL_299;
      }
      uint64_t v5 = (void *)(*(uint64_t (**)(void *))(*v5 + 16))(v5);
    }
    uint64_t v291 = v5;
    goto LABEL_270;
  }
  char v6 = *(unsigned char *)(a1 + 184);
  int v283 = a2;
  uint64_t v7 = (_OWORD *)(a1 + 120);
  long long __p = 0u;
  long long v285 = 0u;
  LOBYTE(v286) = 0;
  BYTE1(v286) = v6;
  memset(&v280, 0, sizeof(v280));
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(__str.__vftable) = 1;
        sub_215DEB0A4(&v283, (unsigned __int8 *)&__str);
        goto LABEL_193;
      case 2:
        LOBYTE(__str.__vftable) = 0;
        sub_215DEB0A4(&v283, (unsigned __int8 *)&__str);
        goto LABEL_193;
      case 3:
        if ((void)__p == *((void *)&__p + 1))
        {
          unint64_t v72 = v283;
          int v70 = *v283;
          unsigned __int8 *v283 = 0;
          LOBYTE(__str.__vftable) = v70;
          char v73 = (const char *)*((void *)v72 + 1);
          *((void *)v72 + 1) = 0;
          goto LABEL_75;
        }
        uint64_t v17 = *(void *)(*((void *)&__p + 1) - 8);
        if (*(unsigned char *)v17 != 2)
        {
          uint64_t v80 = *((void *)&v285 + 1);
          int v70 = **((unsigned char **)&v285 + 1);
          **((unsigned char **)&v285 + 1) = 0;
          v279.__r_.__value_.__s.__data_[0] = v70;
          std::string::size_type v81 = *(void *)(v80 + 8);
          *(void *)(v80 + 8) = 0;
          goto LABEL_191;
        }
        unint64_t v14 = *(char ***)(v17 + 8);
        uint64_t v16 = (void ***)v14[1];
        unint64_t v18 = (unint64_t)v14[2];
        if ((unint64_t)v16 < v18)
        {
          *(unsigned char *)uint64_t v16 = 0;
          v16[1] = 0;
          v14[1] = (char *)(v16 + 2);
          goto LABEL_193;
        }
        BOOL v114 = (void ***)*v14;
        uint64_t v115 = ((char *)v16 - *v14) >> 4;
        unint64_t v116 = v115 + 1;
        if ((unint64_t)(v115 + 1) >> 60) {
          goto LABEL_460;
        }
        uint64_t v117 = v18 - (void)v114;
        if (v117 >> 3 > v116) {
          unint64_t v116 = v117 >> 3;
        }
        if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v118 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v118 = v116;
        }
        if (v118 >> 60) {
          goto LABEL_458;
        }
        long long v119 = (char *)operator new(16 * v118);
        int v107 = &v119[16 * v115];
        BOOL v108 = &v119[16 * v118];
        *int v107 = 0;
        *((void *)v107 + 1) = 0;
        unint64_t v109 = v107 + 16;
        if (v16 == v114) {
          goto LABEL_185;
        }
        do
        {
          char v120 = *((unsigned char *)v16 - 16);
          v16 -= 2;
          *(v107 - 16) = v120;
          v107 -= 16;
          *((void *)v107 + 1) = v16[1];
          *(unsigned char *)uint64_t v16 = 0;
          v16[1] = 0;
        }
        while (v16 != v114);
        uint64_t v16 = (void ***)*v14;
        uint64_t v121 = (void ***)v14[1];
        void *v14 = v107;
        v14[1] = v109;
        v14[2] = v108;
        if (v121 != v16)
        {
          BOOL v122 = v121 - 1;
          do
          {
            long long v123 = v122 - 1;
            sub_215CEB204(v122, *((unsigned __int8 *)v122 - 8));
            v122 -= 2;
          }
          while (v123 != v16);
        }
        goto LABEL_186;
      case 4:
        if ((void)__p == *((void *)&__p + 1))
        {
          uint64_t v74 = operator new(0x18uLL);
          char v75 = v74;
          if (*(char *)(a1 + 143) < 0)
          {
            sub_215738B0C(v74, *(void **)(a1 + 120), *(void *)(a1 + 128));
          }
          else
          {
            *(_OWORD *)uint64_t v74 = *v7;
            v74[2] = *(void *)(a1 + 136);
          }
          size_t v150 = v283;
          int v70 = *v283;
          unsigned __int8 *v283 = 3;
          v279.__r_.__value_.__s.__data_[0] = v70;
          std::string::size_type v81 = *((void *)v150 + 1);
          *((void *)v150 + 1) = v75;
          goto LABEL_191;
        }
        uint64_t v22 = *(void *)(*((void *)&__p + 1) - 8);
        if (*(unsigned char *)v22 != 2)
        {
          char v82 = operator new(0x18uLL);
          int v83 = v82;
          if (*(char *)(a1 + 143) < 0)
          {
            sub_215738B0C(v82, *(void **)(a1 + 120), *(void *)(a1 + 128));
          }
          else
          {
            *(_OWORD *)char v82 = *v7;
            v82[2] = *(void *)(a1 + 136);
          }
          uint64_t v168 = *((void *)&v285 + 1);
          int v70 = **((unsigned char **)&v285 + 1);
          **((unsigned char **)&v285 + 1) = 3;
          v278.__r_.__value_.__s.__data_[0] = v70;
          std::string::size_type v169 = *(void *)(v168 + 8);
          *(void *)(v168 + 8) = v83;
          v278.__r_.__value_.__l.__size_ = v169;
          p_std::string::size_type size = (void ***)&v278.__r_.__value_.__l.__size_;
          goto LABEL_192;
        }
        uint64_t v23 = *(void *)(v22 + 8);
        uint64_t v24 = *(void ****)(v23 + 8);
        unint64_t v25 = *(void *)(v23 + 16);
        if ((unint64_t)v24 < v25)
        {
          v24[1] = 0;
          *(unsigned char *)uint64_t v24 = 3;
          unsigned int v26 = (void **)operator new(0x18uLL);
          unint64_t v27 = v26;
          if (*(char *)(a1 + 143) < 0)
          {
            sub_215738B0C(v26, *(void **)(a1 + 120), *(void *)(a1 + 128));
          }
          else
          {
            *(_OWORD *)unsigned int v26 = *v7;
            void v26[2] = *(void **)(a1 + 136);
          }
          v24[1] = v27;
          *(void *)(v23 + 8) = v24 + 2;
          *(void *)(v23 + 8) = v24 + 2;
          goto LABEL_193;
        }
        long long v124 = *(void ****)v23;
        uint64_t v125 = ((uint64_t)v24 - *(void *)v23) >> 4;
        unint64_t v126 = v125 + 1;
        if ((unint64_t)(v125 + 1) >> 60) {
          goto LABEL_460;
        }
        uint64_t v127 = v25 - (void)v124;
        if (v127 >> 3 > v126) {
          unint64_t v126 = v127 >> 3;
        }
        if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v128 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v128 = v126;
        }
        uint64_t v297 = v23 + 16;
        if (v128)
        {
          if (v128 >> 60) {
            goto LABEL_458;
          }
          BOOL v129 = (std::runtime_error_vtbl *)operator new(16 * v128);
        }
        else
        {
          BOOL v129 = 0;
        }
        uint64_t v171 = (char *)v129 + 16 * v125;
        __str.__vftable = v129;
        __str.__imp_.__imp_ = v171;
        uint64_t v172 = (char *)v129 + 16 * v128;
        v296.__vftable = (std::runtime_error_vtbl *)v171;
        v296.__imp_.__imp_ = v172;
        *((void *)v171 + 1) = 0;
        long long v173 = v171 + 8;
        *uint64_t v171 = 3;
        uint64_t v174 = operator new(0x18uLL);
        uint64_t v175 = v174;
        if (*(char *)(a1 + 143) < 0)
        {
          sub_215738B0C(v174, *(void **)(a1 + 120), *(void *)(a1 + 128));
          long long v124 = *(void ****)v23;
          uint64_t v24 = *(void ****)(v23 + 8);
          *long long v173 = v175;
          uint64_t v176 = (std::runtime_error_vtbl *)(v171 + 16);
          v296.__vftable = (std::runtime_error_vtbl *)(v171 + 16);
          if (v24 == v124)
          {
LABEL_247:
            *(void *)uint64_t v23 = v171;
            *(void *)(v23 + 8) = v176;
            *(void *)(v23 + 16) = v172;
            goto LABEL_248;
          }
        }
        else
        {
          *(_OWORD *)uint64_t v174 = *v7;
          v174[2] = *(void *)(a1 + 136);
          *long long v173 = v174;
          uint64_t v176 = (std::runtime_error_vtbl *)(v171 + 16);
          v296.__vftable = (std::runtime_error_vtbl *)(v171 + 16);
          if (v24 == v124) {
            goto LABEL_247;
          }
        }
        do
        {
          char v177 = *((unsigned char *)v24 - 16);
          v24 -= 2;
          *(v171 - 16) = v177;
          v171 -= 16;
          *((void *)v171 + 1) = v24[1];
          *(unsigned char *)uint64_t v24 = 0;
          v24[1] = 0;
        }
        while (v24 != v124);
        long long v124 = *(void ****)v23;
        int v178 = *(void ****)(v23 + 8);
        std::runtime_error v179 = v296;
        *(void *)uint64_t v23 = v171;
        *(std::runtime_error *)(v23 + 8) = v179;
        uint64_t v176 = v179.__vftable;
        if (v178 != v124)
        {
          size_t v180 = v178 - 1;
          do
          {
            size_t v181 = v180 - 1;
            sub_215CEB204(v180, *((unsigned __int8 *)v180 - 8));
            v180 -= 2;
          }
          while (v181 != v124);
        }
LABEL_248:
        if (v124) {
          operator delete(v124);
        }
        *(void *)(v23 + 8) = v176;
        goto LABEL_193;
      case 5:
        unint64_t v12 = *(void ***)(a1 + 160);
        if ((void)__p == *((void *)&__p + 1))
        {
          unsigned int v69 = v283;
          int v70 = *v283;
          char v71 = 6;
LABEL_73:
          unsigned __int8 *v69 = v71;
          LOBYTE(__str.__vftable) = v70;
          char v73 = (const char *)*((void *)v69 + 1);
          *((void *)v69 + 1) = v12;
          goto LABEL_75;
        }
        uint64_t v31 = *(void *)(*((void *)&__p + 1) - 8);
        if (*(unsigned char *)v31 != 2)
        {
          uint64_t v78 = *((void *)&v285 + 1);
          int v70 = **((unsigned char **)&v285 + 1);
          char v79 = 6;
LABEL_81:
          *(unsigned char *)uint64_t v78 = v79;
          v279.__r_.__value_.__s.__data_[0] = v70;
          std::string::size_type v81 = *(void *)(v78 + 8);
          *(void *)(v78 + 8) = v12;
          goto LABEL_191;
        }
        unint64_t v14 = *(char ***)(v31 + 8);
        uint64_t v16 = (void ***)v14[1];
        unint64_t v32 = (unint64_t)v14[2];
        if ((unint64_t)v16 < v32)
        {
          *(unsigned char *)uint64_t v16 = 6;
          v16[1] = v12;
          v14[1] = (char *)(v16 + 2);
          goto LABEL_193;
        }
        BOOL v130 = (void ***)*v14;
        uint64_t v131 = ((char *)v16 - *v14) >> 4;
        unint64_t v132 = v131 + 1;
        if ((unint64_t)(v131 + 1) >> 60) {
LABEL_460:
        }
          sub_215CEA45C();
        uint64_t v133 = v32 - (void)v130;
        if (v133 >> 3 > v132) {
          unint64_t v132 = v133 >> 3;
        }
        if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v134 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v134 = v132;
        }
        if (v134 >> 60) {
LABEL_458:
        }
          sub_215738AD8();
        uint64_t v135 = (char *)operator new(16 * v134);
        int v107 = &v135[16 * v131];
        BOOL v108 = &v135[16 * v134];
        *int v107 = 6;
        *((void *)v107 + 1) = v12;
        unint64_t v109 = v107 + 16;
        if (v16 != v130)
        {
          do
          {
            char v136 = *((unsigned char *)v16 - 16);
            v16 -= 2;
            *(v107 - 16) = v136;
            v107 -= 16;
            *((void *)v107 + 1) = v16[1];
            *(unsigned char *)uint64_t v16 = 0;
            v16[1] = 0;
          }
          while (v16 != v130);
          uint64_t v16 = (void ***)*v14;
          int v137 = (void ***)v14[1];
          void *v14 = v107;
          v14[1] = v109;
          v14[2] = v108;
          if (v137 != v16)
          {
            int v138 = v137 - 1;
            do
            {
              int v139 = v138 - 1;
              sub_215CEB204(v138, *((unsigned __int8 *)v138 - 8));
              v138 -= 2;
            }
            while (v139 != v16);
          }
          goto LABEL_186;
        }
        goto LABEL_185;
      case 6:
        unint64_t v12 = *(void ***)(a1 + 152);
        if ((void)__p == *((void *)&__p + 1))
        {
          unsigned int v69 = v283;
          int v70 = *v283;
          char v71 = 5;
          goto LABEL_73;
        }
        uint64_t v13 = *(void *)(*((void *)&__p + 1) - 8);
        if (*(unsigned char *)v13 != 2)
        {
          uint64_t v78 = *((void *)&v285 + 1);
          int v70 = **((unsigned char **)&v285 + 1);
          char v79 = 5;
          goto LABEL_81;
        }
        unint64_t v14 = *(char ***)(v13 + 8);
        uint64_t v16 = (void ***)v14[1];
        unint64_t v15 = (unint64_t)v14[2];
        if ((unint64_t)v16 < v15)
        {
          *(unsigned char *)uint64_t v16 = 5;
          v16[1] = v12;
          v14[1] = (char *)(v16 + 2);
          goto LABEL_193;
        }
        char v101 = (void ***)*v14;
        uint64_t v102 = ((char *)v16 - *v14) >> 4;
        unint64_t v103 = v102 + 1;
        if ((unint64_t)(v102 + 1) >> 60) {
          goto LABEL_460;
        }
        uint64_t v104 = v15 - (void)v101;
        if (v104 >> 3 > v103) {
          unint64_t v103 = v104 >> 3;
        }
        if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v105 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v105 = v103;
        }
        if (v105 >> 60) {
          goto LABEL_458;
        }
        size_t v106 = (char *)operator new(16 * v105);
        int v107 = &v106[16 * v102];
        BOOL v108 = &v106[16 * v105];
        *int v107 = 5;
        *((void *)v107 + 1) = v12;
        unint64_t v109 = v107 + 16;
        if (v16 == v101) {
          goto LABEL_185;
        }
        do
        {
          char v110 = *((unsigned char *)v16 - 16);
          v16 -= 2;
          *(v107 - 16) = v110;
          v107 -= 16;
          *((void *)v107 + 1) = v16[1];
          *(unsigned char *)uint64_t v16 = 0;
          v16[1] = 0;
        }
        while (v16 != v101);
        uint64_t v16 = (void ***)*v14;
        unint64_t v111 = (void ***)v14[1];
        void *v14 = v107;
        v14[1] = v109;
        v14[2] = v108;
        if (v111 != v16)
        {
          size_t v112 = v111 - 1;
          do
          {
            int v113 = v112 - 1;
            sub_215CEB204(v112, *((unsigned __int8 *)v112 - 8));
            v112 -= 2;
          }
          while (v113 != v16);
        }
        goto LABEL_186;
      case 7:
        std::string v28 = *(void ***)(a1 + 168);
        if (((unint64_t)v28 & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000)
        {
          sub_215DE96A0(&v279, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          sub_215DE96A0(&v276, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          sub_215AC8CC8("number overflow parsing '", &v276, &v277);
          sub_215AEDCD0("'", &v277, &v278);
          sub_215D3A1E4(406, (uint64_t)&v278, (uint64_t)&__str);
          sub_215DEACB8((uint64_t)&v283, (uint64_t)&__str);
          sub_215D3A384(&__str);
          if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v278.__r_.__value_.__l.__data_);
          }
          goto LABEL_450;
        }
        if ((void)__p == *((void *)&__p + 1))
        {
          unint64_t v76 = v283;
          int v70 = *v283;
          unsigned __int8 *v283 = 7;
          LOBYTE(__str.__vftable) = v70;
          char v73 = (const char *)*((void *)v76 + 1);
          *((void *)v76 + 1) = v28;
LABEL_75:
          __str.__imp_.__imp_ = v73;
          p_std::string::size_type size = (void ***)&__str.__imp_;
LABEL_192:
          sub_215CEB204(p_size, v70);
          goto LABEL_193;
        }
        uint64_t v29 = *(void *)(*((void *)&__p + 1) - 8);
        if (*(unsigned char *)v29 != 2)
        {
          uint64_t v84 = *((void *)&v285 + 1);
          int v70 = **((unsigned char **)&v285 + 1);
          **((unsigned char **)&v285 + 1) = 7;
          v279.__r_.__value_.__s.__data_[0] = v70;
          std::string::size_type v81 = *(void *)(v84 + 8);
          *(void *)(v84 + 8) = v28;
LABEL_191:
          v279.__r_.__value_.__l.__size_ = v81;
          p_std::string::size_type size = (void ***)&v279.__r_.__value_.__l.__size_;
          goto LABEL_192;
        }
        unint64_t v14 = *(char ***)(v29 + 8);
        uint64_t v16 = (void ***)v14[1];
        unint64_t v30 = (unint64_t)v14[2];
        if ((unint64_t)v16 >= v30)
        {
          uint64_t v140 = (void ***)*v14;
          uint64_t v141 = ((char *)v16 - *v14) >> 4;
          unint64_t v142 = v141 + 1;
          if ((unint64_t)(v141 + 1) >> 60) {
            sub_215CEA45C();
          }
          uint64_t v143 = v30 - (void)v140;
          if (v143 >> 3 > v142) {
            unint64_t v142 = v143 >> 3;
          }
          if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v144 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v144 = v142;
          }
          if (v144 >> 60) {
            sub_215738AD8();
          }
          uint64_t v145 = (char *)operator new(16 * v144);
          int v107 = &v145[16 * v141];
          BOOL v108 = &v145[16 * v144];
          *int v107 = 7;
          *((void *)v107 + 1) = v28;
          unint64_t v109 = v107 + 16;
          if (v16 == v140)
          {
LABEL_185:
            void *v14 = v107;
            v14[1] = v109;
            v14[2] = v108;
          }
          else
          {
            do
            {
              char v146 = *((unsigned char *)v16 - 16);
              v16 -= 2;
              *(v107 - 16) = v146;
              v107 -= 16;
              *((void *)v107 + 1) = v16[1];
              *(unsigned char *)uint64_t v16 = 0;
              v16[1] = 0;
            }
            while (v16 != v140);
            uint64_t v16 = (void ***)*v14;
            int v147 = (void ***)v14[1];
            void *v14 = v107;
            v14[1] = v109;
            v14[2] = v108;
            if (v147 != v16)
            {
              long long v148 = v147 - 1;
              do
              {
                size_t v149 = v148 - 1;
                sub_215CEB204(v148, *((unsigned __int8 *)v148 - 8));
                v148 -= 2;
              }
              while (v149 != v16);
            }
          }
LABEL_186:
          if (v16) {
            operator delete(v16);
          }
          v14[1] = v109;
        }
        else
        {
          *(unsigned char *)uint64_t v16 = 7;
          v16[1] = v28;
          v14[1] = (char *)(v16 + 2);
        }
LABEL_193:
        std::string::size_type size = v280.__r_.__value_.__l.__size_;
        if (!v280.__r_.__value_.__l.__size_) {
          goto LABEL_426;
        }
        while (2)
        {
          if ((*(void *)(v280.__r_.__value_.__r.__words[0] + (((size - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (size - 1)))
          {
            int v152 = sub_215DE5704(a1 + 40);
            *(_DWORD *)(a1 + 32) = v152;
            if (v152 == 13) {
              goto LABEL_231;
            }
            if (v152 != 10)
            {
              sub_215DE96A0(&v279, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
              std::string v278 = *(std::string *)(a1 + 72);
              sub_215732BF4(&v276, "array");
              sub_215DE9798(&v277, a1, 0xAu, (const void **)&v276.__r_.__value_.__l.__data_);
              sub_215D36EC8(101, (uint64_t *)&v278, (uint64_t)&v277, (uint64_t)&__str);
              sub_215DE9F54((uint64_t)&v283, (uint64_t)&__str);
              goto LABEL_449;
            }
LABEL_200:
            *((void *)&__p + 1) -= 8;
            std::string::size_type size = --v280.__r_.__value_.__l.__size_;
            if (!v280.__r_.__value_.__l.__size_) {
              goto LABEL_426;
            }
            continue;
          }
          break;
        }
        int v153 = sub_215DE5704(a1 + 40);
        *(_DWORD *)(a1 + 32) = v153;
        if (v153 != 13)
        {
          if (v153 != 11)
          {
            sub_215DE96A0(&v279, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
            std::string v278 = *(std::string *)(a1 + 72);
            sub_215732BF4(&v276, "object");
            sub_215DE9798(&v277, a1, 0xBu, (const void **)&v276.__r_.__value_.__l.__data_);
            sub_215D36EC8(101, (uint64_t *)&v278, (uint64_t)&v277, (uint64_t)&__str);
            sub_215DE9F54((uint64_t)&v283, (uint64_t)&__str);
            goto LABEL_449;
          }
          goto LABEL_200;
        }
        int v154 = sub_215DE5704(a1 + 40);
        *(_DWORD *)(a1 + 32) = v154;
        if (v154 != 4)
        {
LABEL_447:
          sub_215DE96A0(&v279, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          std::string v278 = *(std::string *)(a1 + 72);
          sub_215732BF4(&v276, "object key");
          sub_215DE9798(&v277, a1, 4u, (const void **)&v276.__r_.__value_.__l.__data_);
          sub_215D36EC8(101, (uint64_t *)&v278, (uint64_t)&v277, (uint64_t)&__str);
          sub_215DE9F54((uint64_t)&v283, (uint64_t)&__str);
          goto LABEL_449;
        }
        unint64_t v155 = *(uint64_t **)(*(void *)(*((void *)&__p + 1) - 8) + 8);
        LOBYTE(__str.__vftable) = 0;
        __str.__imp_.__imp_ = 0;
        uint64_t v156 = *v155;
        unint64_t v157 = v155[1];
        if (*v155 != v157)
        {
          char v158 = *(unsigned char *)(a1 + 143);
          if (v158 >= 0) {
            uint64_t v159 = *(unsigned __int8 *)(a1 + 143);
          }
          else {
            uint64_t v159 = *(void *)(a1 + 128);
          }
          if (v158 >= 0) {
            int v160 = (unsigned __int8 *)(a1 + 120);
          }
          else {
            int v160 = *(unsigned __int8 **)(a1 + 120);
          }
          do
          {
            uint64_t v161 = *(unsigned __int8 *)(v156 + 23);
            if ((v161 & 0x80u) == 0) {
              uint64_t v162 = *(unsigned __int8 *)(v156 + 23);
            }
            else {
              uint64_t v162 = *(void *)(v156 + 8);
            }
            if (v162 == v159)
            {
              if ((v161 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v156, v160, *(void *)(v156 + 8))) {
                  goto LABEL_222;
                }
              }
              else
              {
                if (!*(unsigned char *)(v156 + 23))
                {
LABEL_222:
                  int v164 = 0;
                  goto LABEL_230;
                }
                uint64_t v163 = 0;
                while (*(unsigned __int8 *)(v156 + v163) == v160[v163])
                {
                  if (v161 == ++v163) {
                    goto LABEL_222;
                  }
                }
              }
            }
            v156 += 40;
          }
          while (v156 != v157);
        }
        if (v157 >= v155[2])
        {
          long long v166 = sub_215D2F31C(v155, a1 + 120, (unsigned __int8 *)&__str);
        }
        else
        {
          if (*(char *)(a1 + 143) < 0)
          {
            sub_215738B0C((unsigned char *)v157, *(void **)(a1 + 120), *(void *)(a1 + 128));
          }
          else
          {
            long long v165 = *v7;
            *(void *)(v157 + 16) = *(void *)(a1 + 136);
            *(_OWORD *)unint64_t v157 = v165;
          }
          sub_215D2F4F0(v157 + 24, (unsigned __int8 *)&__str);
          long long v166 = (char *)(v157 + 40);
          v155[1] = v157 + 40;
        }
        v155[1] = (uint64_t)v166;
        uint64_t v156 = (uint64_t)(v166 - 40);
        int v164 = LOBYTE(__str.__vftable);
LABEL_230:
        sub_215CEB204((void ***)&__str.__imp_, v164);
        *((void *)&v285 + 1) = v156 + 24;
        int v167 = sub_215DE5704(a1 + 40);
        *(_DWORD *)(a1 + 32) = v167;
        if (v167 != 12) {
          goto LABEL_448;
        }
LABEL_231:
        *(_DWORD *)(a1 + 32) = sub_215DE5704(a1 + 40);
        continue;
      case 8:
        uint64_t v8 = sub_215DEAD14(&v283, 2u);
        uint64_t v9 = v8;
        int v10 = (char *)*((void *)&__p + 1);
        if (*((void *)&__p + 1) < (unint64_t)v285)
        {
          **((void **)&__p + 1) = v8;
          uint64_t v11 = (uint64_t)(v10 + 8);
          goto LABEL_86;
        }
        unint64_t v33 = (unsigned char *)__p;
        uint64_t v34 = *((void *)&__p + 1) - __p;
        uint64_t v35 = (uint64_t)(*((void *)&__p + 1) - __p) >> 3;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 61) {
          goto LABEL_459;
        }
        uint64_t v37 = v285 - __p;
        if ((uint64_t)(v285 - __p) >> 2 > v36) {
          unint64_t v36 = v37 >> 2;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          if (v38 >> 61) {
            goto LABEL_458;
          }
          unint64_t v39 = operator new(8 * v38);
          int v40 = (uint64_t *)&v39[8 * v35];
          *int v40 = v9;
          uint64_t v11 = (uint64_t)(v40 + 1);
          uint64_t v41 = (char *)(v10 - v33);
          if (v10 == v33)
          {
LABEL_84:
            *(void *)&long long __p = v40;
            *(void *)&long long v285 = &v39[8 * v38];
            if (!v10) {
              goto LABEL_86;
            }
LABEL_85:
            operator delete(v10);
            goto LABEL_86;
          }
        }
        else
        {
          unint64_t v39 = 0;
          int v40 = (uint64_t *)(8 * v35);
          *(void *)(8 * v35) = v9;
          uint64_t v11 = 8 * v35 + 8;
          uint64_t v41 = (char *)(v10 - v33);
          if (v10 == v33) {
            goto LABEL_84;
          }
        }
        unint64_t v42 = (unint64_t)(v41 - 8);
        if (v42 < 0x58) {
          goto LABEL_475;
        }
        if ((unint64_t)(v10 - v39 - v34) < 0x20) {
          goto LABEL_475;
        }
        uint64_t v43 = (v42 >> 3) + 1;
        uint64_t v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v45 = &v10[-v44];
        int v40 = (uint64_t *)((char *)v40 - v44);
        uint64_t v46 = &v39[8 * v35 - 16];
        unint64_t v47 = v10 - 16;
        uint64_t v48 = v43 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v49 = *(_OWORD *)v47;
          *(v46 - 1) = *((_OWORD *)v47 - 1);
          _OWORD *v46 = v49;
          v46 -= 2;
          v47 -= 32;
          v48 -= 4;
        }
        while (v48);
        int v10 = v45;
        if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_475:
          do
          {
            uint64_t v50 = *((void *)v10 - 1);
            v10 -= 8;
            *--int v40 = v50;
          }
          while (v10 != v33);
        }
        int v10 = (char *)__p;
        *(void *)&long long __p = v40;
        *(void *)&long long v285 = &v39[8 * v38];
        if (v10) {
          goto LABEL_85;
        }
LABEL_86:
        *((void *)&__p + 1) = v11;
        int v85 = sub_215DE5704(a1 + 40);
        *(_DWORD *)(a1 + 32) = v85;
        if (v85 == 10) {
          goto LABEL_100;
        }
        std::string::size_type v86 = v280.__r_.__value_.__l.__size_;
        if (v280.__r_.__value_.__l.__size_ == v280.__r_.__value_.__r.__words[2] << 6)
        {
          if ((int64_t)(v280.__r_.__value_.__l.__size_ + 1) < 0) {
            sub_215D2CB08();
          }
          std::string::size_type v87 = v280.__r_.__value_.__r.__words[2] << 7;
          if (v280.__r_.__value_.__r.__words[2] << 7 <= (v280.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFC0) + 64) {
            std::string::size_type v87 = (v280.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFC0) + 64;
          }
          if (v280.__r_.__value_.__l.__size_ <= 0x3FFFFFFFFFFFFFFELL) {
            unint64_t v88 = v87;
          }
          else {
            unint64_t v88 = 0x7FFFFFFFFFFFFFFFLL;
          }
          sub_215D39348((uint64_t)&v280, v88);
          std::string::size_type v86 = v280.__r_.__value_.__l.__size_;
        }
        v280.__r_.__value_.__l.__size_ = v86 + 1;
        *(void *)(v280.__r_.__value_.__r.__words[0] + ((v86 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v86;
        continue;
      case 9:
        uint64_t v19 = sub_215DEAD14(&v283, 1u);
        uint64_t v20 = v19;
        uint64_t v21 = (char *)*((void *)&__p + 1);
        if (*((void *)&__p + 1) < (unint64_t)v285)
        {
          **((void **)&__p + 1) = v19;
          uint64_t v11 = (uint64_t)(v21 + 8);
          goto LABEL_99;
        }
        unint64_t v51 = (unsigned char *)__p;
        uint64_t v52 = *((void *)&__p + 1) - __p;
        uint64_t v53 = (uint64_t)(*((void *)&__p + 1) - __p) >> 3;
        unint64_t v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 61) {
LABEL_459:
        }
          sub_215DEAA08();
        uint64_t v55 = v285 - __p;
        if ((uint64_t)(v285 - __p) >> 2 > v54) {
          unint64_t v54 = v55 >> 2;
        }
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v56 = v54;
        }
        if (v56)
        {
          if (v56 >> 61) {
            goto LABEL_458;
          }
          uint64_t v57 = operator new(8 * v56);
          int v58 = (uint64_t *)&v57[8 * v53];
          uint64_t *v58 = v20;
          uint64_t v11 = (uint64_t)(v58 + 1);
          int v59 = (char *)(v21 - v51);
          if (v21 == v51)
          {
LABEL_97:
            *(void *)&long long __p = v58;
            *(void *)&long long v285 = &v57[8 * v56];
            if (!v21) {
              goto LABEL_99;
            }
LABEL_98:
            operator delete(v21);
            goto LABEL_99;
          }
        }
        else
        {
          uint64_t v57 = 0;
          int v58 = (uint64_t *)(8 * v53);
          *(void *)(8 * v53) = v20;
          uint64_t v11 = 8 * v53 + 8;
          int v59 = (char *)(v21 - v51);
          if (v21 == v51) {
            goto LABEL_97;
          }
        }
        unint64_t v60 = (unint64_t)(v59 - 8);
        if (v60 < 0x58) {
          goto LABEL_476;
        }
        if ((unint64_t)(v21 - v57 - v52) < 0x20) {
          goto LABEL_476;
        }
        uint64_t v61 = (v60 >> 3) + 1;
        uint64_t v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
        char v63 = &v21[-v62];
        int v58 = (uint64_t *)((char *)v58 - v62);
        uint64_t v64 = &v57[8 * v53 - 16];
        uint64_t v65 = v21 - 16;
        uint64_t v66 = v61 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v67 = *(_OWORD *)v65;
          *(v64 - 1) = *((_OWORD *)v65 - 1);
          _OWORD *v64 = v67;
          v64 -= 2;
          v65 -= 32;
          v66 -= 4;
        }
        while (v66);
        uint64_t v21 = v63;
        if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_476:
          do
          {
            uint64_t v68 = *((void *)v21 - 1);
            v21 -= 8;
            *--int v58 = v68;
          }
          while (v21 != v51);
        }
        uint64_t v21 = (char *)__p;
        *(void *)&long long __p = v58;
        *(void *)&long long v285 = &v57[8 * v56];
        if (v21) {
          goto LABEL_98;
        }
LABEL_99:
        *((void *)&__p + 1) = v11;
        int v89 = sub_215DE5704(a1 + 40);
        *(_DWORD *)(a1 + 32) = v89;
        if (v89 == 11)
        {
LABEL_100:
          *((void *)&__p + 1) = v11 - 8;
          goto LABEL_193;
        }
        if (v89 != 4) {
          goto LABEL_447;
        }
        uint64_t v90 = *(uint64_t **)(*(void *)(v11 - 8) + 8);
        LOBYTE(__str.__vftable) = 0;
        __str.__imp_.__imp_ = 0;
        uint64_t v91 = *v90;
        unint64_t v92 = v90[1];
        if (*v90 != v92)
        {
          char v93 = *(unsigned char *)(a1 + 143);
          if (v93 >= 0) {
            uint64_t v94 = *(unsigned __int8 *)(a1 + 143);
          }
          else {
            uint64_t v94 = *(void *)(a1 + 128);
          }
          if (v93 >= 0) {
            uint64_t v95 = (unsigned __int8 *)(a1 + 120);
          }
          else {
            uint64_t v95 = *(unsigned __int8 **)(a1 + 120);
          }
          do
          {
            uint64_t v96 = *(unsigned __int8 *)(v91 + 23);
            if ((v96 & 0x80u) == 0) {
              uint64_t v97 = *(unsigned __int8 *)(v91 + 23);
            }
            else {
              uint64_t v97 = *(void *)(v91 + 8);
            }
            if (v97 == v94)
            {
              if ((v96 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v91, v95, *(void *)(v91 + 8))) {
                  goto LABEL_120;
                }
              }
              else
              {
                if (!*(unsigned char *)(v91 + 23))
                {
LABEL_120:
                  int v99 = 0;
                  goto LABEL_254;
                }
                uint64_t v98 = 0;
                while (*(unsigned __int8 *)(v91 + v98) == v95[v98])
                {
                  if (v96 == ++v98) {
                    goto LABEL_120;
                  }
                }
              }
            }
            v91 += 40;
          }
          while (v91 != v92);
        }
        if (v92 >= v90[2])
        {
          long long v170 = sub_215D2F31C(v90, a1 + 120, (unsigned __int8 *)&__str);
        }
        else
        {
          if (*(char *)(a1 + 143) < 0)
          {
            sub_215738B0C((unsigned char *)v92, *(void **)(a1 + 120), *(void *)(a1 + 128));
          }
          else
          {
            long long v100 = *v7;
            *(void *)(v92 + 16) = *(void *)(a1 + 136);
            *(_OWORD *)unint64_t v92 = v100;
          }
          sub_215D2F4F0(v92 + 24, (unsigned __int8 *)&__str);
          long long v170 = (char *)(v92 + 40);
          v90[1] = v92 + 40;
        }
        v90[1] = (uint64_t)v170;
        uint64_t v91 = (uint64_t)(v170 - 40);
        int v99 = LOBYTE(__str.__vftable);
LABEL_254:
        sub_215CEB204((void ***)&__str.__imp_, v99);
        *((void *)&v285 + 1) = v91 + 24;
        int v182 = sub_215DE5704(a1 + 40);
        *(_DWORD *)(a1 + 32) = v182;
        if (v182 != 12)
        {
LABEL_448:
          sub_215DE96A0(&v279, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          std::string v278 = *(std::string *)(a1 + 72);
          sub_215732BF4(&v276, "object separator");
          sub_215DE9798(&v277, a1, 0xCu, (const void **)&v276.__r_.__value_.__l.__data_);
          sub_215D36EC8(101, (uint64_t *)&v278, (uint64_t)&v277, (uint64_t)&__str);
          sub_215DE9F54((uint64_t)&v283, (uint64_t)&__str);
LABEL_449:
          sub_215D37928(&__str);
LABEL_450:
          if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v277.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
          {
            size_t v253 = (void *)v276.__r_.__value_.__r.__words[0];
LABEL_423:
            operator delete(v253);
          }
          goto LABEL_424;
        }
        std::string::size_type v183 = v280.__r_.__value_.__l.__size_;
        if (v280.__r_.__value_.__l.__size_ == v280.__r_.__value_.__r.__words[2] << 6)
        {
          if ((int64_t)(v280.__r_.__value_.__l.__size_ + 1) < 0) {
            sub_215D2CB08();
          }
          std::string::size_type v184 = v280.__r_.__value_.__r.__words[2] << 7;
          if (v280.__r_.__value_.__r.__words[2] << 7 <= (v280.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFC0) + 64) {
            std::string::size_type v184 = (v280.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFC0) + 64;
          }
          if (v280.__r_.__value_.__l.__size_ <= 0x3FFFFFFFFFFFFFFELL) {
            unint64_t v185 = v184;
          }
          else {
            unint64_t v185 = 0x7FFFFFFFFFFFFFFFLL;
          }
          sub_215D39348((uint64_t)&v280, v185);
          std::string::size_type v183 = v280.__r_.__value_.__l.__size_;
        }
        v280.__r_.__value_.__l.__size_ = v183 + 1;
        *(void *)(v280.__r_.__value_.__r.__words[0] + ((v183 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v183);
        *(_DWORD *)(a1 + 32) = sub_215DE5704(a1 + 40);
        continue;
      case 0xE:
        size_t v200 = *(unsigned __int8 **)(a1 + 96);
        uint64_t v199 = *(unsigned __int8 **)(a1 + 104);
        memset(&v279, 0, sizeof(v279));
        if (v200 == v199) {
          goto LABEL_418;
        }
        unint64_t v269 = v199;
        while (1)
        {
          unsigned int v202 = *v200;
          if (v202 > 0x1F)
          {
            if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
            {
              size_t v212 = (v279.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if (v279.__r_.__value_.__l.__size_ == v212)
              {
                if ((v279.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
                  sub_215731CD8();
                }
                int v211 = (std::string *)v279.__r_.__value_.__r.__words[0];
                size_t v215 = 0x7FFFFFFFFFFFFFF7;
                if (v212 < 0x3FFFFFFFFFFFFFF3)
                {
LABEL_335:
                  if (v212 + 1 > 2 * v212) {
                    unint64_t v216 = v212 + 1;
                  }
                  else {
                    unint64_t v216 = 2 * v212;
                  }
                  uint64_t v217 = (v216 & 0x7FFFFFFFFFFFFFF8) + 8;
                  if ((v216 | 7) != 0x17) {
                    uint64_t v217 = v216 | 7;
                  }
                  if (v216 >= 0x17) {
                    size_t v215 = v217 + 1;
                  }
                  else {
                    size_t v215 = 23;
                  }
                }
                size_t v218 = (std::string *)operator new(v215);
                int v219 = v218;
                if (!v212 || (memmove(v218, v211, v212), v212 != 22)) {
                  operator delete(v211);
                }
                v279.__r_.__value_.__r.__words[0] = (std::string::size_type)v219;
                v279.__r_.__value_.__r.__words[2] = v215 | 0x8000000000000000;
              }
              else
              {
                size_t v212 = v279.__r_.__value_.__l.__size_;
                int v219 = (std::string *)v279.__r_.__value_.__r.__words[0];
              }
              v279.__r_.__value_.__l.__size_ = v212 + 1;
            }
            else
            {
              if (HIBYTE(v279.__r_.__value_.__r.__words[2]) == 22)
              {
                int v211 = &v279;
                size_t v212 = 22;
                goto LABEL_335;
              }
              size_t v212 = HIBYTE(v279.__r_.__value_.__r.__words[2]);
              *((unsigned char *)&v279.__r_.__value_.__s + 23) = (*((unsigned char *)&v279.__r_.__value_.__s + 23) + 1) & 0x7F;
              int v219 = &v279;
            }
            unsigned int v220 = (char *)v219 + v212;
            *unsigned int v220 = v202;
            v220[1] = 0;
            goto LABEL_304;
          }
          LOBYTE(__str.__imp_.__imp_) = 0;
          __str.__vftable = 0;
          snprintf((char *)&__str, 9uLL, "<U+%.4X>", v202);
          size_t v203 = strlen((const char *)&__str);
          size_t v204 = v203;
          if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v205 = 22;
          }
          else {
            std::string::size_type v205 = (v279.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          }
          if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v206 = HIBYTE(v279.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v206 = v279.__r_.__value_.__l.__size_;
          }
          if (v205 - v206 >= v203)
          {
            if (!v203) {
              goto LABEL_304;
            }
            if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v213 = &v279;
            }
            else {
              char v213 = (std::string *)v279.__r_.__value_.__r.__words[0];
            }
            memmove((char *)v213 + v206, &__str, v203);
            size_t v214 = v206 + v204;
            if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0) {
              v279.__r_.__value_.__l.__size_ = v206 + v204;
            }
            else {
              *((unsigned char *)&v279.__r_.__value_.__s + 23) = v214 & 0x7F;
            }
            size_t v201 = (char *)v213 + v214;
          }
          else
          {
            unint64_t v207 = v206 + v203;
            if (0x7FFFFFFFFFFFFFF6 - v205 < v206 + v203 - v205) {
              sub_215731CD8();
            }
            if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v208 = &v279;
            }
            else {
              uint64_t v208 = (std::string *)v279.__r_.__value_.__r.__words[0];
            }
            size_t v209 = 0x7FFFFFFFFFFFFFF7;
            if (v205 < 0x3FFFFFFFFFFFFFF3)
            {
              unint64_t v210 = 2 * v205;
              if (v207 > 2 * v205) {
                unint64_t v210 = v206 + v203;
              }
              if (v210 >= 0x17)
              {
                unint64_t v221 = (v210 & 0xFFFFFFFFFFFFFFF8) + 8;
                uint64_t v222 = v210 | 7;
                if (v222 == 23) {
                  uint64_t v222 = v221;
                }
                size_t v209 = v222 + 1;
              }
              else
              {
                size_t v209 = 23;
              }
            }
            long long v223 = operator new(v209);
            std::string::size_type v224 = (std::string::size_type)v223;
            if (v206) {
              memmove(v223, v208, v206);
            }
            memcpy((void *)(v224 + v206), &__str, v204);
            if (v205 != 22) {
              operator delete(v208);
            }
            v279.__r_.__value_.__l.__size_ = v206 + v204;
            v279.__r_.__value_.__r.__words[2] = v209 | 0x8000000000000000;
            v279.__r_.__value_.__r.__words[0] = v224;
            size_t v201 = (unsigned char *)(v224 + v207);
          }
          *size_t v201 = 0;
          uint64_t v199 = v269;
LABEL_304:
          if (++v200 == v199)
          {
LABEL_418:
            std::string v278 = *(std::string *)(a1 + 72);
            *((unsigned char *)&v276.__r_.__value_.__s + 23) = 5;
            strcpy((char *)&v276, "value");
            sub_215DE9798(&v277, a1, 0, (const void **)&v276.__r_.__value_.__l.__data_);
            sub_215D36EC8(101, (uint64_t *)&v278, (uint64_t)&v277, (uint64_t)&__str);
            LOBYTE(v286) = 1;
            if (BYTE1(v286))
            {
              int v251 = __cxa_allocate_exception(0x28uLL);
              __int16 v252 = (void *)sub_215D3BA88((uint64_t)v251, (uint64_t)&__str);
              __cxa_throw(v252, (struct type_info *)&unk_26C684770, (void (*)(void *))sub_215D37928);
            }
            goto LABEL_421;
          }
        }
      default:
        uint64_t v226 = *(unsigned __int8 **)(a1 + 96);
        uint64_t v225 = *(unsigned __int8 **)(a1 + 104);
        memset(&v279, 0, sizeof(v279));
        if (v226 == v225) {
          goto LABEL_420;
        }
        uint64_t v270 = v225;
        break;
    }
    break;
  }
  do
  {
    unsigned int v230 = *v226;
    if (v230 > 0x1F)
    {
      if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
      {
        size_t v227 = (v279.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v279.__r_.__value_.__l.__size_ != v227)
        {
          size_t v227 = v279.__r_.__value_.__l.__size_;
          uint64_t v228 = (std::string *)v279.__r_.__value_.__r.__words[0];
LABEL_407:
          v279.__r_.__value_.__l.__size_ = v227 + 1;
          goto LABEL_362;
        }
        if ((v279.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
          sub_215731CD8();
        }
        long long v239 = (std::string *)v279.__r_.__value_.__r.__words[0];
        size_t v243 = 0x7FFFFFFFFFFFFFF7;
        if (v227 >= 0x3FFFFFFFFFFFFFF3)
        {
LABEL_402:
          uint64_t v246 = (std::string *)operator new(v243);
          uint64_t v228 = v246;
          if (!v227 || (memmove(v246, v239, v227), v227 != 22)) {
            operator delete(v239);
          }
          v279.__r_.__value_.__r.__words[0] = (std::string::size_type)v228;
          v279.__r_.__value_.__r.__words[2] = v243 | 0x8000000000000000;
          goto LABEL_407;
        }
      }
      else
      {
        if (HIBYTE(v279.__r_.__value_.__r.__words[2]) != 22)
        {
          size_t v227 = HIBYTE(v279.__r_.__value_.__r.__words[2]);
          *((unsigned char *)&v279.__r_.__value_.__s + 23) = (*((unsigned char *)&v279.__r_.__value_.__s + 23) + 1) & 0x7F;
          uint64_t v228 = &v279;
LABEL_362:
          int v229 = (char *)v228 + v227;
          *int v229 = v230;
          v229[1] = 0;
          goto LABEL_363;
        }
        long long v239 = &v279;
        size_t v227 = 22;
      }
      if (v227 + 1 > 2 * v227) {
        unint64_t v244 = v227 + 1;
      }
      else {
        unint64_t v244 = 2 * v227;
      }
      uint64_t v245 = (v244 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v244 | 7) != 0x17) {
        uint64_t v245 = v244 | 7;
      }
      if (v244 >= 0x17) {
        size_t v243 = v245 + 1;
      }
      else {
        size_t v243 = 23;
      }
      goto LABEL_402;
    }
    LOBYTE(__str.__imp_.__imp_) = 0;
    __str.__vftable = 0;
    snprintf((char *)&__str, 9uLL, "<U+%.4X>", v230);
    size_t v231 = strlen((const char *)&__str);
    size_t v232 = v231;
    if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v233 = 22;
    }
    else {
      std::string::size_type v233 = (v279.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v234 = HIBYTE(v279.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v234 = v279.__r_.__value_.__l.__size_;
    }
    if (v233 - v234 >= v231)
    {
      if (!v231) {
        goto LABEL_363;
      }
      if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v240 = &v279;
      }
      else {
        uint64_t v240 = (std::string *)v279.__r_.__value_.__r.__words[0];
      }
      memmove((char *)v240 + v234, &__str, v231);
      size_t v241 = v234 + v232;
      if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0) {
        v279.__r_.__value_.__l.__size_ = v234 + v232;
      }
      else {
        *((unsigned char *)&v279.__r_.__value_.__s + 23) = v241 & 0x7F;
      }
      BOOL v242 = (char *)v240 + v241;
    }
    else
    {
      unint64_t v235 = v234 + v231;
      if (0x7FFFFFFFFFFFFFF6 - v233 < v234 + v231 - v233) {
        sub_215731CD8();
      }
      if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v236 = &v279;
      }
      else {
        int v236 = (std::string *)v279.__r_.__value_.__r.__words[0];
      }
      size_t v237 = 0x7FFFFFFFFFFFFFF7;
      if (v233 < 0x3FFFFFFFFFFFFFF3)
      {
        unint64_t v238 = 2 * v233;
        if (v235 > 2 * v233) {
          unint64_t v238 = v234 + v231;
        }
        if (v238 >= 0x17)
        {
          unint64_t v247 = (v238 & 0xFFFFFFFFFFFFFFF8) + 8;
          uint64_t v248 = v238 | 7;
          if (v248 == 23) {
            uint64_t v248 = v247;
          }
          size_t v237 = v248 + 1;
        }
        else
        {
          size_t v237 = 23;
        }
      }
      uint64_t v249 = operator new(v237);
      std::string::size_type v250 = (std::string::size_type)v249;
      if (v234) {
        memmove(v249, v236, v234);
      }
      memcpy((void *)(v250 + v234), &__str, v232);
      if (v233 != 22) {
        operator delete(v236);
      }
      v279.__r_.__value_.__l.__size_ = v234 + v232;
      v279.__r_.__value_.__r.__words[2] = v237 | 0x8000000000000000;
      v279.__r_.__value_.__r.__words[0] = v250;
      BOOL v242 = (unsigned char *)(v250 + v235);
    }
    *BOOL v242 = 0;
    uint64_t v225 = v270;
LABEL_363:
    ++v226;
  }
  while (v226 != v225);
LABEL_420:
  std::string v278 = *(std::string *)(a1 + 72);
  *((unsigned char *)&v276.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v276, "value");
  sub_215DE9798(&v277, a1, 0x10u, (const void **)&v276.__r_.__value_.__l.__data_);
  sub_215D36EC8(101, (uint64_t *)&v278, (uint64_t)&v277, (uint64_t)&__str);
  LOBYTE(v286) = 1;
  if (BYTE1(v286))
  {
    long long v266 = __cxa_allocate_exception(0x28uLL);
    long long v267 = (void *)sub_215D3BA88((uint64_t)v266, (uint64_t)&__str);
    __cxa_throw(v267, (struct type_info *)&unk_26C684770, (void (*)(void *))sub_215D37928);
  }
LABEL_421:
  __str.__vftable = (std::runtime_error_vtbl *)&unk_26C684698;
  std::runtime_error::~runtime_error(&v296);
  std::exception::~exception(&__str);
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
  {
    size_t v253 = (void *)v277.__r_.__value_.__r.__words[0];
    goto LABEL_423;
  }
LABEL_424:
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v279.__r_.__value_.__l.__data_);
  }
LABEL_426:
  if (v280.__r_.__value_.__r.__words[0]) {
    operator delete(v280.__r_.__value_.__l.__data_);
  }
  int v254 = sub_215DE5704(a1 + 40);
  *(_DWORD *)(a1 + 32) = v254;
  if (v254 == 15)
  {
    if (!(_BYTE)v286)
    {
      uint64_t v255 = (void *)__p;
      if ((void)__p) {
        goto LABEL_431;
      }
      return;
    }
  }
  else
  {
    size_t v256 = *(unsigned __int8 **)(a1 + 96);
    size_t v257 = *(unsigned __int8 **)(a1 + 104);
    memset(&v280, 0, sizeof(v280));
    for (; v256 != v257; ++v256)
    {
      unsigned int v258 = *v256;
      if (v258 > 0x1F)
      {
        std::string::push_back(&v280, v258);
      }
      else
      {
        LOBYTE(__str.__imp_.__imp_) = 0;
        __str.__vftable = 0;
        snprintf((char *)&__str, 9uLL, "<U+%.4X>", v258);
        size_t v259 = strlen((const char *)&__str);
        std::string::append(&v280, (const std::string::value_type *)&__str, v259);
      }
    }
    std::string v279 = *(std::string *)(a1 + 72);
    *((unsigned char *)&v277.__r_.__value_.__s + 23) = 5;
    strcpy((char *)&v277, "value");
    sub_215DE9798(&v278, a1, 0xFu, (const void **)&v277.__r_.__value_.__l.__data_);
    sub_215D36EC8(101, (uint64_t *)&v279, (uint64_t)&v278, (uint64_t)&__str);
    LOBYTE(v286) = 1;
    if (BYTE1(v286))
    {
      int v264 = __cxa_allocate_exception(0x28uLL);
      int v265 = (void *)sub_215D3BA88((uint64_t)v264, (uint64_t)&__str);
      __cxa_throw(v265, (struct type_info *)&unk_26C684770, (void (*)(void *))sub_215D37928);
    }
    __str.__vftable = (std::runtime_error_vtbl *)&unk_26C684698;
    std::runtime_error::~runtime_error(&v296);
    std::exception::~exception(&__str);
    if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v278.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v280.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_442;
      }
    }
    else if ((SHIBYTE(v280.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_442;
    }
    operator delete(v280.__r_.__value_.__l.__data_);
  }
LABEL_442:
  int v260 = *a2;
  *a2 = 9;
  long long v261 = (void **)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  unint64_t v271 = v261;
  sub_215CEB204(&v271, v260);
  uint64_t v255 = (void *)__p;
  if ((void)__p) {
LABEL_431:
  }
    operator delete(v255);
}

void sub_215DE5264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52)
{
  sub_215D37928((std::runtime_error *)(v52 - 160));
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a44) {
    operator delete(a44);
  }
  if (!a52) {
    _Unwind_Resume(a1);
  }
  operator delete(a52);
  _Unwind_Resume(a1);
}

uint64_t sub_215DE5648(uint64_t a1)
{
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
    unsigned int v2 = *(void **)(a1 + 96);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 120));
  unsigned int v2 = *(void **)(a1 + 96);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
LABEL_4:
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3 == a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
}

uint64_t sub_215DE5704(uint64_t a1)
{
  if (!*(void *)(a1 + 32))
  {
    if (sub_215D35CD0(a1) == 239)
    {
      if (sub_215D35CD0(a1) != 187 || sub_215D35CD0(a1) != 191)
      {
        unsigned int v2 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v3 = (void *)(a1 + 40);
      uint64_t v4 = *(void *)(a1 + 40);
      *(unsigned char *)(a1 + 24) = 1;
      --*(void *)(a1 + 32);
      if (v4 || (uint64_t v3 = (void *)(a1 + 48), (v4 = *(void *)(a1 + 48)) != 0)) {
        *uint64_t v3 = v4 - 1;
      }
      if (*(_DWORD *)(a1 + 20) != -1) {
        --*(void *)(a1 + 64);
      }
    }
  }
  sub_215DE76D0(a1);
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v5 = (uint64_t *)(a1 + 48);
    while (1)
    {
      if (*(_DWORD *)(a1 + 20) != 47) {
        goto LABEL_30;
      }
      int v6 = sub_215D35CD0(a1);
      if (v6 != 47) {
        break;
      }
      do
        int v10 = sub_215D35CD0(a1);
      while ((v10 + 1) > 0xE || ((1 << (v10 + 1)) & 0x4803) == 0);
LABEL_29:
      sub_215DE76D0(a1);
      if (!*(unsigned char *)(a1 + 16)) {
        goto LABEL_30;
      }
    }
    if (v6 == 42)
    {
      do
      {
        while (1)
        {
          int v7 = sub_215D35CD0(a1);
          if (v7 != 42) {
            break;
          }
          if (sub_215D35CD0(a1) == 47) {
            goto LABEL_29;
          }
          *(unsigned char *)(a1 + 24) = 1;
          uint64_t v8 = *(void *)(a1 + 40);
          --*(void *)(a1 + 32);
          uint64_t v9 = (void *)(a1 + 40);
          if (v8 || (uint64_t v8 = *v5, v9 = (void *)(a1 + 48), *v5)) {
            *uint64_t v9 = v8 - 1;
          }
          if (*(_DWORD *)(a1 + 20) != -1) {
            --*(void *)(a1 + 64);
          }
        }
      }
      while ((v7 + 1) >= 2);
      unsigned int v2 = "invalid comment; missing closing '*/'";
    }
    else
    {
      unsigned int v2 = "invalid comment; expecting '/' or '*' after '/'";
    }
LABEL_35:
    *(void *)(a1 + 104) = v2;
    return 14;
  }
LABEL_30:
  int v12 = *(_DWORD *)(a1 + 20);
  uint64_t result = 8;
  switch(v12)
  {
    case -1:
    case 0:
      return 15;
    case 34:
      if (*(char *)(a1 + 103) < 0)
      {
        **(unsigned char **)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 0;
        *(void *)(a1 + 88) = 0;
        int v64 = *(_DWORD *)(a1 + 20);
      }
      else
      {
        *(unsigned char *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 0;
        *(unsigned char *)(a1 + 103) = 0;
        LOBYTE(v64) = 34;
      }
      uint64_t v65 = (void *)(a1 + 56);
      uint64_t v66 = *(unsigned char **)(a1 + 56);
      *(void *)(a1 + 64) = v66;
      unint64_t v67 = *(void *)(a1 + 72);
      if ((unint64_t)v66 >= v67)
      {
        unint64_t v69 = v67 - (void)v66;
        uint64_t v70 = 2 * v69;
        if (2 * v69 <= 1) {
          uint64_t v70 = 1;
        }
        if (v69 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v71 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v71 = v70;
        }
        unint64_t v72 = operator new(v71);
        unsigned char *v72 = v64;
        uint64_t v68 = v72 + 1;
        *(void *)(a1 + 56) = v72;
        *(void *)(a1 + 64) = v72 + 1;
        *(void *)(a1 + 72) = &v72[v71];
        if (v66) {
          operator delete(v66);
        }
      }
      else
      {
        unsigned char *v66 = v64;
        uint64_t v68 = v66 + 1;
      }
      char v73 = (void **)(a1 + 80);
      *(void *)(a1 + 64) = v68;
      int64x2_t v209 = vdupq_n_s64(1uLL);
      while (2)
      {
        *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), v209);
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          int v77 = *(_DWORD *)(a1 + 20);
          if (v77 == -1) {
            goto LABEL_430;
          }
LABEL_166:
          std::string::size_type v81 = *(unsigned char **)(a1 + 64);
          unint64_t v80 = *(void *)(a1 + 72);
          if ((unint64_t)v81 < v80)
          {
            *std::string::size_type v81 = v77;
            uint64_t v82 = (uint64_t)(v81 + 1);
            goto LABEL_196;
          }
          int v83 = (unsigned char *)*v65;
          unint64_t v84 = (unint64_t)&v81[-*v65];
          unint64_t v85 = v84 + 1;
          if ((uint64_t)(v84 + 1) < 0) {
            goto LABEL_466;
          }
          unint64_t v86 = v80 - (void)v83;
          if (2 * v86 > v85) {
            unint64_t v85 = 2 * v86;
          }
          if (v86 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v87 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v87 = v85;
          }
          if (v87)
          {
            unint64_t v88 = (char *)operator new(v87);
            int v89 = &v88[v84];
            v88[v84] = v77;
            uint64_t v82 = (uint64_t)&v88[v84 + 1];
            if (v81 == v83)
            {
LABEL_194:
              *(void *)(a1 + 56) = v89;
              *(void *)(a1 + 64) = v82;
              *(void *)(a1 + 72) = &v88[v87];
              if (v81) {
                operator delete(v81);
              }
LABEL_196:
              *(void *)(a1 + 64) = v82;
              int v101 = *(_DWORD *)(a1 + 20);
              if (v101 == 10)
              {
                uint64_t v197 = *(void *)(a1 + 48) + 1;
                *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
                *(void *)(a1 + 48) = v197;
                unsigned int v2 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
                goto LABEL_35;
              }
              unsigned int v2 = "invalid string: missing closing quote";
              switch(v101)
              {
                case -1:
                  goto LABEL_35;
                case 0:
                  unsigned int v2 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
                  goto LABEL_35;
                case 1:
                  unsigned int v2 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
                  goto LABEL_35;
                case 2:
                  unsigned int v2 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
                  goto LABEL_35;
                case 3:
                  unsigned int v2 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
                  goto LABEL_35;
                case 4:
                  unsigned int v2 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
                  goto LABEL_35;
                case 5:
                  unsigned int v2 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
                  goto LABEL_35;
                case 6:
                  unsigned int v2 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
                  goto LABEL_35;
                case 7:
                  unsigned int v2 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
                  goto LABEL_35;
                case 8:
                  unsigned int v2 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
                  goto LABEL_35;
                case 9:
                  unsigned int v2 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
                  goto LABEL_35;
                case 11:
                  unsigned int v2 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
                  goto LABEL_35;
                case 12:
                  unsigned int v2 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
                  goto LABEL_35;
                case 13:
                  unsigned int v2 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
                  goto LABEL_35;
                case 14:
                  unsigned int v2 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
                  goto LABEL_35;
                case 15:
                  unsigned int v2 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
                  goto LABEL_35;
                case 16:
                  unsigned int v2 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
                  goto LABEL_35;
                case 17:
                  unsigned int v2 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
                  goto LABEL_35;
                case 18:
                  unsigned int v2 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
                  goto LABEL_35;
                case 19:
                  unsigned int v2 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
                  goto LABEL_35;
                case 20:
                  unsigned int v2 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
                  goto LABEL_35;
                case 21:
                  unsigned int v2 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
                  goto LABEL_35;
                case 22:
                  unsigned int v2 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
                  goto LABEL_35;
                case 23:
                  unsigned int v2 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
                  goto LABEL_35;
                case 24:
                  unsigned int v2 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
                  goto LABEL_35;
                case 25:
                  unsigned int v2 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
                  goto LABEL_35;
                case 26:
                  unsigned int v2 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
                  goto LABEL_35;
                case 27:
                  unsigned int v2 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
                  goto LABEL_35;
                case 28:
                  unsigned int v2 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
                  goto LABEL_35;
                case 29:
                  unsigned int v2 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
                  goto LABEL_35;
                case 30:
                  unsigned int v2 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
                  goto LABEL_35;
                case 31:
                  unsigned int v2 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
                  goto LABEL_35;
                case 32:
                case 33:
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 123:
                case 124:
                case 125:
                case 126:
                case 127:
                  goto LABEL_364;
                case 34:
                  return 4;
                case 92:
                  int v139 = sub_215D35CD0(a1);
                  unsigned int v2 = "invalid string: forbidden character after backslash";
                  switch(v139)
                  {
                    case '""':
                      std::string::push_back((std::string *)(a1 + 80), 34);
                      continue;
                    case '/':
                      std::string::push_back((std::string *)(a1 + 80), 47);
                      continue;
                    case '\\':
                      std::string::push_back((std::string *)(a1 + 80), 92);
                      continue;
                    case 'b':
                      std::string::push_back((std::string *)(a1 + 80), 8);
                      continue;
                    case 'f':
                      std::string::push_back((std::string *)(a1 + 80), 12);
                      continue;
                    case 'n':
                      std::string::push_back((std::string *)(a1 + 80), 10);
                      continue;
                    case 'r':
                      std::string::push_back((std::string *)(a1 + 80), 13);
                      continue;
                    case 't':
                      std::string::push_back((std::string *)(a1 + 80), 9);
                      continue;
                    case 'u':
                      unsigned int v150 = sub_215D35F24(a1);
                      if (v150 == -1) {
                        goto LABEL_467;
                      }
                      unsigned int v151 = v150;
                      if ((v150 & 0xFFFFFC00) == 0xD800)
                      {
                        if (sub_215D35CD0(a1) != 92 || sub_215D35CD0(a1) != 117) {
                          goto LABEL_468;
                        }
                        unsigned int v152 = sub_215D35F24(a1);
                        if (v152 == -1)
                        {
LABEL_467:
                          unsigned int v2 = "invalid string: '\\u' must be followed by 4 hex digits";
                          goto LABEL_35;
                        }
                        if (v152 >> 10 != 55)
                        {
LABEL_468:
                          unsigned int v2 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
                          goto LABEL_35;
                        }
                        unsigned int v151 = v152 + (v151 << 10) - 56613888;
                        goto LABEL_292;
                      }
                      if ((v150 & 0xFFFFFC00) == 0xDC00)
                      {
                        unsigned int v2 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
                        goto LABEL_35;
                      }
                      if ((int)v150 > 127)
                      {
                        if (v150 > 0x7FF)
                        {
                          if (!HIWORD(v150))
                          {
                            std::string::push_back((std::string *)(a1 + 80), (v150 >> 12) | 0xE0);
                            goto LABEL_293;
                          }
LABEL_292:
                          std::string::push_back((std::string *)(a1 + 80), (v151 >> 18) | 0xF0);
                          std::string::push_back((std::string *)(a1 + 80), (v151 >> 12) & 0x3F | 0x80);
LABEL_293:
                          std::string::push_back((std::string *)(a1 + 80), (v151 >> 6) & 0x3F | 0x80);
                          std::string::push_back((std::string *)(a1 + 80), v151 & 0x3F | 0x80);
                          continue;
                        }
                        std::string::push_back((std::string *)(a1 + 80), (v150 >> 6) | 0xC0);
                        std::string::value_type v138 = v151 & 0x3F | 0x80;
                      }
                      else
                      {
                        std::string::value_type v138 = v150;
                      }
LABEL_258:
                      std::string::push_back((std::string *)(a1 + 80), v138);
                      continue;
                    default:
                      goto LABEL_35;
                  }
                case 194:
                case 195:
                case 196:
                case 197:
                case 198:
                case 199:
                case 200:
                case 201:
                case 202:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 217:
                case 218:
                case 219:
                case 220:
                case 221:
                case 222:
                case 223:
                  std::string::push_back((std::string *)(a1 + 80), v101);
                  *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
                  if (*(unsigned char *)(a1 + 24))
                  {
                    *(unsigned char *)(a1 + 24) = 0;
                    int v102 = *(_DWORD *)(a1 + 20);
                  }
                  else
                  {
                    uint64_t v104 = *(unsigned __int8 **)a1;
                    if (*(void *)a1 == *(void *)(a1 + 8))
                    {
                      int v102 = -1;
                    }
                    else
                    {
                      int v102 = *v104;
                      *(void *)a1 = v104 + 1;
                    }
                    *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v102;
                  }
                  if (v102 == -1) {
                    goto LABEL_431;
                  }
                  size_t v106 = *(unsigned char **)(a1 + 64);
                  unint64_t v105 = *(void *)(a1 + 72);
                  if ((unint64_t)v106 < v105)
                  {
                    *size_t v106 = v102;
                    uint64_t v107 = (uint64_t)(v106 + 1);
                    goto LABEL_279;
                  }
                  BOOL v108 = (unsigned char *)*v65;
                  unint64_t v109 = (unint64_t)&v106[-*v65];
                  unint64_t v110 = v109 + 1;
                  if ((uint64_t)(v109 + 1) < 0) {
                    goto LABEL_466;
                  }
                  unint64_t v111 = v105 - (void)v108;
                  if (2 * v111 > v110) {
                    unint64_t v110 = 2 * v111;
                  }
                  if (v111 >= 0x3FFFFFFFFFFFFFFFLL) {
                    size_t v112 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    size_t v112 = v110;
                  }
                  if (v112) {
                    int v113 = (char *)operator new(v112);
                  }
                  else {
                    int v113 = 0;
                  }
                  BOOL v114 = &v113[v109];
                  v113[v109] = v102;
                  uint64_t v107 = (uint64_t)&v113[v109 + 1];
                  if (v106 == v108) {
                    goto LABEL_277;
                  }
                  if (v109 < 8 || (unint64_t)(v108 - v113) < 0x20) {
                    goto LABEL_274;
                  }
                  if (v109 >= 0x20)
                  {
                    unint64_t v115 = v109 & 0xFFFFFFFFFFFFFFE0;
                    BOOL v129 = &v113[v109 - 16];
                    BOOL v130 = (long long *)(v106 - 16);
                    unint64_t v131 = v109 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      long long v132 = *v130;
                      *((_OWORD *)v129 - 1) = *(v130 - 1);
                      *(_OWORD *)BOOL v129 = v132;
                      v129 -= 32;
                      v130 -= 2;
                      v131 -= 32;
                    }
                    while (v131);
                    if (v109 == v115) {
                      goto LABEL_276;
                    }
                    if ((v109 & 0x18) == 0)
                    {
                      v114 -= v115;
                      v106 -= v115;
LABEL_274:
                      long long v148 = v114 - 1;
                      do
                      {
                        char v149 = *--v106;
                        *v148-- = v149;
                      }
                      while (v106 != v108);
LABEL_276:
                      size_t v106 = (unsigned char *)*v65;
                      BOOL v114 = v113;
LABEL_277:
                      *(void *)(a1 + 56) = v114;
                      *(void *)(a1 + 64) = v107;
                      *(void *)(a1 + 72) = &v113[v112];
                      if (v106) {
                        operator delete(v106);
                      }
LABEL_279:
                      *(void *)(a1 + 64) = v107;
                      int v101 = *(_DWORD *)(a1 + 20);
                      if (v101 == 10) {
                        goto LABEL_428;
                      }
LABEL_363:
                      if ((v101 - 192) >= 0xFFFFFFC0)
                      {
LABEL_364:
                        int v190 = *(char *)(a1 + 103);
                        if ((v190 & 0x80000000) == 0)
                        {
                          if (*(unsigned char *)(a1 + 103) != 22)
                          {
                            size_t v74 = *(unsigned __int8 *)(a1 + 103);
                            *(unsigned char *)(a1 + 103) = (v190 + 1) & 0x7F;
                            char v75 = (char *)(a1 + 80);
LABEL_160:
                            unint64_t v76 = &v75[v74];
                            *unint64_t v76 = v101;
                            v76[1] = 0;
                            continue;
                          }
                          size_t v74 = 22;
                          int64_t v191 = (void *)(a1 + 80);
                          goto LABEL_370;
                        }
                        uint64_t v192 = *(void *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
                        size_t v74 = v192 - 1;
                        if (*(void *)(a1 + 88) != v192 - 1)
                        {
                          char v75 = (char *)*v73;
                          size_t v74 = *(void *)(a1 + 88);
LABEL_383:
                          *(void *)(a1 + 88) = v74 + 1;
                          goto LABEL_160;
                        }
                        if (v192 != 0x7FFFFFFFFFFFFFF8)
                        {
                          int64_t v191 = *v73;
                          size_t v193 = 0x7FFFFFFFFFFFFFF7;
                          if (v74 >= 0x3FFFFFFFFFFFFFF3)
                          {
LABEL_378:
                            int v196 = (char *)operator new(v193);
                            char v75 = v196;
                            if (!v74 || (memmove(v196, v191, v74), v74 != 22)) {
                              operator delete(v191);
                            }
                            *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v75;
                            *(void *)(a1 + 96) = v193 | 0x8000000000000000;
                            goto LABEL_383;
                          }
LABEL_370:
                          if (v74 + 1 > 2 * v74) {
                            unint64_t v194 = v74 + 1;
                          }
                          else {
                            unint64_t v194 = 2 * v74;
                          }
                          uint64_t v195 = (v194 & 0x7FFFFFFFFFFFFFF8) + 8;
                          if ((v194 | 7) != 0x17) {
                            uint64_t v195 = v194 | 7;
                          }
                          if (v194 >= 0x17) {
                            size_t v193 = v195 + 1;
                          }
                          else {
                            size_t v193 = 23;
                          }
                          goto LABEL_378;
                        }
LABEL_470:
                        sub_215731CD8();
                      }
LABEL_431:
                      unsigned int v2 = "invalid string: ill-formed UTF-8 byte";
                      goto LABEL_35;
                    }
                  }
                  else
                  {
                    unint64_t v115 = 0;
                  }
                  v114 -= v109 & 0xFFFFFFFFFFFFFFF8;
                  uint64_t v133 = &v113[&v106[-v115] - v108 - 8];
                  unint64_t v134 = (uint64_t *)&v106[-v115 - 8];
                  unint64_t v135 = v115 - (v109 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    uint64_t v136 = *v134--;
                    *(void *)uint64_t v133 = v136;
                    v133 -= 8;
                    v135 += 8;
                  }
                  while (v135);
                  v106 -= v109 & 0xFFFFFFFFFFFFFFF8;
                  if (v109 == (v109 & 0xFFFFFFFFFFFFFFF8)) {
                    goto LABEL_276;
                  }
                  goto LABEL_274;
                case 224:
                  std::string::push_back((std::string *)(a1 + 80), -32);
                  sub_215D35CD0(a1);
                  int v137 = *(_DWORD *)(a1 + 20);
                  if ((v137 - 192) < 0xFFFFFFE0) {
                    goto LABEL_431;
                  }
                  goto LABEL_256;
                case 225:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                case 236:
                case 238:
                case 239:
                  std::string::push_back((std::string *)(a1 + 80), v101);
                  *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
                  if (*(unsigned char *)(a1 + 24))
                  {
                    *(unsigned char *)(a1 + 24) = 0;
                    int v103 = *(_DWORD *)(a1 + 20);
                  }
                  else
                  {
                    unint64_t v116 = *(unsigned __int8 **)a1;
                    if (*(void *)a1 == *(void *)(a1 + 8))
                    {
                      int v103 = -1;
                    }
                    else
                    {
                      int v103 = *v116;
                      *(void *)a1 = v116 + 1;
                    }
                    *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v103;
                  }
                  if (v103 == -1) {
                    goto LABEL_431;
                  }
                  unint64_t v118 = *(unsigned char **)(a1 + 64);
                  unint64_t v117 = *(void *)(a1 + 72);
                  if ((unint64_t)v118 < v117)
                  {
                    *unint64_t v118 = v103;
                    uint64_t v119 = (uint64_t)(v118 + 1);
                    goto LABEL_303;
                  }
                  char v120 = (unsigned char *)*v65;
                  unint64_t v121 = (unint64_t)&v118[-*v65];
                  unint64_t v122 = v121 + 1;
                  if ((uint64_t)(v121 + 1) < 0) {
                    goto LABEL_466;
                  }
                  unint64_t v123 = v117 - (void)v120;
                  if (2 * v123 > v122) {
                    unint64_t v122 = 2 * v123;
                  }
                  if (v123 >= 0x3FFFFFFFFFFFFFFFLL) {
                    size_t v124 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    size_t v124 = v122;
                  }
                  if (v124) {
                    uint64_t v125 = (char *)operator new(v124);
                  }
                  else {
                    uint64_t v125 = 0;
                  }
                  uint64_t v127 = &v125[v121];
                  v125[v121] = v103;
                  uint64_t v119 = (uint64_t)&v125[v121 + 1];
                  if (v118 == v120) {
                    goto LABEL_301;
                  }
                  if (v121 < 8 || (unint64_t)(v120 - v125) < 0x20) {
                    goto LABEL_298;
                  }
                  if (v121 >= 0x20)
                  {
                    unint64_t v128 = v121 & 0xFFFFFFFFFFFFFFE0;
                    uint64_t v140 = &v125[v121 - 16];
                    uint64_t v141 = (long long *)(v118 - 16);
                    unint64_t v142 = v121 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      long long v143 = *v141;
                      *((_OWORD *)v140 - 1) = *(v141 - 1);
                      *(_OWORD *)uint64_t v140 = v143;
                      v140 -= 32;
                      v141 -= 2;
                      v142 -= 32;
                    }
                    while (v142);
                    if (v121 == v128) {
                      goto LABEL_300;
                    }
                    if ((v121 & 0x18) == 0)
                    {
                      v127 -= v128;
                      v118 -= v128;
LABEL_298:
                      int v153 = v127 - 1;
                      do
                      {
                        char v154 = *--v118;
                        *v153-- = v154;
                      }
                      while (v118 != v120);
LABEL_300:
                      unint64_t v118 = (unsigned char *)*v65;
                      uint64_t v127 = v125;
LABEL_301:
                      *(void *)(a1 + 56) = v127;
                      *(void *)(a1 + 64) = v119;
                      *(void *)(a1 + 72) = &v125[v124];
                      if (v118) {
                        operator delete(v118);
                      }
LABEL_303:
                      *(void *)(a1 + 64) = v119;
                      int v155 = *(_DWORD *)(a1 + 20);
                      if (v155 == 10) {
                        goto LABEL_428;
                      }
                      if ((v155 - 192) < 0xFFFFFFC0) {
                        goto LABEL_431;
                      }
                      int v156 = *(char *)(a1 + 103);
                      if (v156 < 0)
                      {
                        uint64_t v159 = *(void *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
                        size_t v157 = v159 - 1;
                        if (*(void *)(a1 + 88) != v159 - 1)
                        {
                          uint64_t v162 = (char *)*v73;
                          size_t v157 = *(void *)(a1 + 88);
LABEL_325:
                          *(void *)(a1 + 88) = v157 + 1;
LABEL_326:
                          long long v166 = &v162[v157];
                          *long long v166 = v155;
                          v166[1] = 0;
                          *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
                          if (*(unsigned char *)(a1 + 24))
                          {
                            *(unsigned char *)(a1 + 24) = 0;
                            int v167 = *(_DWORD *)(a1 + 20);
                          }
                          else
                          {
                            uint64_t v168 = *(unsigned __int8 **)a1;
                            if (*(void *)a1 == *(void *)(a1 + 8))
                            {
                              int v167 = -1;
                            }
                            else
                            {
                              int v167 = *v168;
                              *(void *)a1 = v168 + 1;
                            }
                            *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v167;
                          }
                          if (v167 == -1) {
                            goto LABEL_431;
                          }
                          long long v170 = *(unsigned char **)(a1 + 64);
                          unint64_t v169 = *(void *)(a1 + 72);
                          if ((unint64_t)v170 < v169)
                          {
                            *long long v170 = v167;
                            uint64_t v171 = (uint64_t)(v170 + 1);
                            goto LABEL_362;
                          }
                          uint64_t v172 = (unsigned char *)*v65;
                          unint64_t v173 = (unint64_t)&v170[-*v65];
                          unint64_t v174 = v173 + 1;
                          if ((uint64_t)(v173 + 1) >= 0)
                          {
                            unint64_t v175 = v169 - (void)v172;
                            if (2 * v175 > v174) {
                              unint64_t v174 = 2 * v175;
                            }
                            if (v175 >= 0x3FFFFFFFFFFFFFFFLL) {
                              size_t v176 = 0x7FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              size_t v176 = v174;
                            }
                            if (v176) {
                              char v177 = (char *)operator new(v176);
                            }
                            else {
                              char v177 = 0;
                            }
                            int v178 = &v177[v173];
                            v177[v173] = v167;
                            uint64_t v171 = (uint64_t)&v177[v173 + 1];
                            if (v170 == v172) {
                              goto LABEL_360;
                            }
                            if (v173 >= 8 && (unint64_t)(v172 - v177) >= 0x20)
                            {
                              if (v173 < 0x20)
                              {
                                unint64_t v179 = 0;
                                goto LABEL_352;
                              }
                              unint64_t v179 = v173 & 0xFFFFFFFFFFFFFFE0;
                              size_t v180 = &v177[v173 - 16];
                              size_t v181 = (long long *)(v170 - 16);
                              unint64_t v182 = v173 & 0xFFFFFFFFFFFFFFE0;
                              do
                              {
                                long long v183 = *v181;
                                *((_OWORD *)v180 - 1) = *(v181 - 1);
                                *(_OWORD *)size_t v180 = v183;
                                v180 -= 32;
                                v181 -= 2;
                                v182 -= 32;
                              }
                              while (v182);
                              if (v173 == v179) {
                                goto LABEL_359;
                              }
                              if ((v173 & 0x18) != 0)
                              {
LABEL_352:
                                v178 -= v173 & 0xFFFFFFFFFFFFFFF8;
                                std::string::size_type v184 = &v177[&v170[-v179] - v172 - 8];
                                unint64_t v185 = (uint64_t *)&v170[-v179 - 8];
                                unint64_t v186 = v179 - (v173 & 0xFFFFFFFFFFFFFFF8);
                                do
                                {
                                  uint64_t v187 = *v185--;
                                  *(void *)std::string::size_type v184 = v187;
                                  v184 -= 8;
                                  v186 += 8;
                                }
                                while (v186);
                                v170 -= v173 & 0xFFFFFFFFFFFFFFF8;
                                if (v173 == (v173 & 0xFFFFFFFFFFFFFFF8)) {
                                  goto LABEL_359;
                                }
                                goto LABEL_357;
                              }
                              v178 -= v179;
                              v170 -= v179;
                            }
LABEL_357:
                            unint64_t v188 = v178 - 1;
                            do
                            {
                              char v189 = *--v170;
                              *v188-- = v189;
                            }
                            while (v170 != v172);
LABEL_359:
                            long long v170 = (unsigned char *)*v65;
                            int v178 = v177;
LABEL_360:
                            *(void *)(a1 + 56) = v178;
                            *(void *)(a1 + 64) = v171;
                            *(void *)(a1 + 72) = &v177[v176];
                            if (v170) {
                              operator delete(v170);
                            }
LABEL_362:
                            *(void *)(a1 + 64) = v171;
                            int v101 = *(_DWORD *)(a1 + 20);
                            if (v101 != 10) {
                              goto LABEL_363;
                            }
LABEL_428:
                            uint64_t v206 = *(void *)(a1 + 48) + 1;
                            *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
                            *(void *)(a1 + 48) = v206;
                            unsigned int v2 = "invalid string: ill-formed UTF-8 byte";
                            goto LABEL_35;
                          }
LABEL_466:
                          sub_215738AC0();
                        }
                        if (v159 == 0x7FFFFFFFFFFFFFF8) {
                          goto LABEL_470;
                        }
                        char v158 = *v73;
                        size_t v160 = 0x7FFFFFFFFFFFFFF7;
                        if (v157 >= 0x3FFFFFFFFFFFFFF3)
                        {
LABEL_320:
                          long long v165 = (char *)operator new(v160);
                          uint64_t v162 = v165;
                          if (!v157 || (memmove(v165, v158, v157), v157 != 22)) {
                            operator delete(v158);
                          }
                          *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v162;
                          *(void *)(a1 + 96) = v160 | 0x8000000000000000;
                          goto LABEL_325;
                        }
                      }
                      else
                      {
                        if (*(unsigned char *)(a1 + 103) != 22)
                        {
                          size_t v157 = *(unsigned __int8 *)(a1 + 103);
                          *(unsigned char *)(a1 + 103) = (v156 + 1) & 0x7F;
                          uint64_t v162 = (char *)(a1 + 80);
                          goto LABEL_326;
                        }
                        size_t v157 = 22;
                        char v158 = (void *)(a1 + 80);
                      }
                      if (v157 + 1 > 2 * v157) {
                        unint64_t v161 = v157 + 1;
                      }
                      else {
                        unint64_t v161 = 2 * v157;
                      }
                      if (v161 >= 0x17)
                      {
                        uint64_t v163 = (v161 & 0x7FFFFFFFFFFFFFF8) + 8;
                        uint64_t v164 = v161 | 7;
                        if (v164 == 23) {
                          uint64_t v164 = v163;
                        }
                        size_t v160 = v164 + 1;
                      }
                      else
                      {
                        size_t v160 = 23;
                      }
                      goto LABEL_320;
                    }
                  }
                  else
                  {
                    unint64_t v128 = 0;
                  }
                  v127 -= v121 & 0xFFFFFFFFFFFFFFF8;
                  unint64_t v144 = &v125[&v118[-v128] - v120 - 8];
                  uint64_t v145 = (uint64_t *)&v118[-v128 - 8];
                  unint64_t v146 = v128 - (v121 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    uint64_t v147 = *v145--;
                    *(void *)unint64_t v144 = v147;
                    v144 -= 8;
                    v146 += 8;
                  }
                  while (v146);
                  v118 -= v121 & 0xFFFFFFFFFFFFFFF8;
                  if (v121 == (v121 & 0xFFFFFFFFFFFFFFF8)) {
                    goto LABEL_300;
                  }
                  goto LABEL_298;
                case 237:
                  std::string::push_back((std::string *)(a1 + 80), -19);
                  sub_215D35CD0(a1);
                  int v137 = *(_DWORD *)(a1 + 20);
                  if ((v137 - 160) < 0xFFFFFFE0) {
                    goto LABEL_431;
                  }
                  goto LABEL_256;
                case 240:
                  std::string::push_back((std::string *)(a1 + 80), -16);
                  sub_215D35CD0(a1);
                  int v126 = *(_DWORD *)(a1 + 20);
                  if ((v126 - 192) < 0xFFFFFFD0) {
                    goto LABEL_431;
                  }
                  goto LABEL_255;
                case 241:
                case 242:
                case 243:
                  std::string::push_back((std::string *)(a1 + 80), v101);
                  sub_215D35CD0(a1);
                  int v126 = *(_DWORD *)(a1 + 20);
                  if ((v126 - 192) < 0xFFFFFFC0) {
                    goto LABEL_431;
                  }
                  goto LABEL_255;
                case 244:
                  std::string::push_back((std::string *)(a1 + 80), -12);
                  sub_215D35CD0(a1);
                  int v126 = *(_DWORD *)(a1 + 20);
                  if ((v126 - 144) < 0xFFFFFFF0) {
                    goto LABEL_431;
                  }
LABEL_255:
                  std::string::push_back((std::string *)(a1 + 80), v126);
                  sub_215D35CD0(a1);
                  int v137 = *(_DWORD *)(a1 + 20);
                  if ((v137 - 192) < 0xFFFFFFC0) {
                    goto LABEL_431;
                  }
LABEL_256:
                  std::string::push_back((std::string *)(a1 + 80), v137);
                  sub_215D35CD0(a1);
                  if ((*(_DWORD *)(a1 + 20) - 192) < 0xFFFFFFC0) {
                    goto LABEL_431;
                  }
                  std::string::value_type v138 = *(_DWORD *)(a1 + 20);
                  goto LABEL_258;
                default:
                  goto LABEL_431;
              }
            }
          }
          else
          {
            unint64_t v88 = 0;
            int v89 = &v81[-*v65];
            *(unsigned char *)unint64_t v84 = v77;
            uint64_t v82 = v84 + 1;
            if (v81 == v83) {
              goto LABEL_194;
            }
          }
          if (v84 >= 8 && (unint64_t)(v83 - v88) >= 0x20)
          {
            if (v84 < 0x20)
            {
              unint64_t v90 = 0;
              goto LABEL_186;
            }
            unint64_t v90 = v84 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v91 = &v88[v84 - 16];
            unint64_t v92 = (long long *)(v81 - 16);
            unint64_t v93 = v84 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v94 = *v92;
              *((_OWORD *)v91 - 1) = *(v92 - 1);
              *(_OWORD *)uint64_t v91 = v94;
              v91 -= 32;
              v92 -= 2;
              v93 -= 32;
            }
            while (v93);
            if (v84 == v90) {
              goto LABEL_193;
            }
            if ((v84 & 0x18) != 0)
            {
LABEL_186:
              v89 -= v84 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v95 = &v88[&v81[-v90] - v83 - 8];
              uint64_t v96 = (uint64_t *)&v81[-v90 - 8];
              unint64_t v97 = v90 - (v84 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v98 = *v96--;
                *(void *)uint64_t v95 = v98;
                v95 -= 8;
                v97 += 8;
              }
              while (v97);
              v81 -= v84 & 0xFFFFFFFFFFFFFFF8;
              if (v84 == (v84 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_193;
              }
              goto LABEL_191;
            }
            v89 -= v90;
            v81 -= v90;
          }
LABEL_191:
          int v99 = v89 - 1;
          do
          {
            char v100 = *--v81;
            *v99-- = v100;
          }
          while (v81 != v83);
LABEL_193:
          std::string::size_type v81 = (unsigned char *)*v65;
          int v89 = v88;
          goto LABEL_194;
        }
        break;
      }
      uint64_t v78 = *(unsigned __int8 **)a1;
      if (*(void *)a1 == *(void *)(a1 + 8))
      {
        *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = -1;
      }
      else
      {
        int v79 = *v78;
        LOBYTE(v77) = *v78;
        *(void *)a1 = v78 + 1;
        *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v79;
        if (v79 != -1) {
          goto LABEL_166;
        }
      }
LABEL_430:
      unsigned int v2 = "invalid string: missing closing quote";
      goto LABEL_35;
    case 44:
      return 13;
    case 45:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      if (*(char *)(a1 + 103) < 0)
      {
        **(unsigned char **)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 0;
        *(void *)(a1 + 88) = 0;
        int v12 = *(_DWORD *)(a1 + 20);
        unint64_t v15 = (void *)(a1 + 56);
        unint64_t v14 = *(unsigned char **)(a1 + 56);
        *(void *)(a1 + 64) = v14;
        unint64_t v16 = *(void *)(a1 + 72);
        if ((unint64_t)v14 < v16) {
          goto LABEL_33;
        }
      }
      else
      {
        *(unsigned char *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 0;
        *(unsigned char *)(a1 + 103) = 0;
        unint64_t v15 = (void *)(a1 + 56);
        unint64_t v14 = *(unsigned char **)(a1 + 56);
        *(void *)(a1 + 64) = v14;
        unint64_t v16 = *(void *)(a1 + 72);
        if ((unint64_t)v14 < v16)
        {
LABEL_33:
          unsigned char *v14 = v12;
          uint64_t v17 = v14 + 1;
          goto LABEL_45;
        }
      }
      unint64_t v18 = v16 - (void)v14;
      uint64_t v19 = 2 * v18;
      if (2 * v18 <= 1) {
        uint64_t v19 = 1;
      }
      if (v18 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v20 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v20 = v19;
      }
      uint64_t v21 = operator new(v20);
      *uint64_t v21 = v12;
      uint64_t v17 = v21 + 1;
      *(void *)(a1 + 56) = v21;
      *(void *)(a1 + 64) = v21 + 1;
      *(void *)(a1 + 72) = &v21[v20];
      if (v14) {
        operator delete(v14);
      }
LABEL_45:
      uint64_t v22 = (const char *)(a1 + 80);
      *(void *)(a1 + 64) = v17;
      int v23 = *(_DWORD *)(a1 + 20);
      int v24 = 5;
      if ((v23 - 49) >= 9)
      {
        if (v23 != 48)
        {
          if (v23 == 45) {
            std::string::push_back((std::string *)(a1 + 80), 45);
          }
          int v62 = sub_215D35CD0(a1);
          if ((v62 - 49) < 9)
          {
            int v23 = *(_DWORD *)(a1 + 20);
            int v25 = 6;
            goto LABEL_47;
          }
          if (v62 != 48)
          {
            unsigned int v2 = "invalid number; expected digit after '-'";
            goto LABEL_35;
          }
          int v23 = *(_DWORD *)(a1 + 20);
          int v24 = 6;
        }
        std::string::push_back((std::string *)(a1 + 80), v23);
        int v198 = sub_215D35CD0(a1);
        if (v198 == 46)
        {
LABEL_111:
          std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 136));
          if (sub_215D35CD0(a1) - 48 > 9)
          {
            unsigned int v2 = "invalid number; expected digit after '.'";
            goto LABEL_35;
          }
          do
          {
            std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 20));
            int v61 = sub_215D35CD0(a1);
          }
          while ((v61 - 48) < 0xA);
          if (v61 != 101 && v61 != 69)
          {
LABEL_404:
            int v24 = 7;
            goto LABEL_405;
          }
        }
        else if (v198 != 69 && v198 != 101)
        {
          goto LABEL_405;
        }
        int v53 = *(_DWORD *)(a1 + 20);
LABEL_402:
        std::string::push_back((std::string *)(a1 + 80), v53);
        int v199 = sub_215D35CD0(a1);
        if ((v199 - 48) >= 0xA)
        {
          if (v199 != 43 && v199 != 45)
          {
            unsigned int v2 = "invalid number; expected '+', '-', or digit after exponent";
            goto LABEL_35;
          }
          std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 20));
          if (sub_215D35CD0(a1) - 48 >= 0xA)
          {
            unsigned int v2 = "invalid number; expected digit after exponent sign";
            goto LABEL_35;
          }
        }
        do
          std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 20));
        while (sub_215D35CD0(a1) - 48 < 0xA);
        goto LABEL_404;
      }
      int v25 = 5;
LABEL_47:
      int v207 = v25;
      std::string::push_back((std::string *)(a1 + 80), v23);
      int64x2_t v208 = vdupq_n_s64(1uLL);
      while (1)
      {
        *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), v208);
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          int v29 = *(_DWORD *)(a1 + 20);
          if (v29 == -1) {
            goto LABEL_107;
          }
        }
        else
        {
          unint64_t v30 = *(unsigned __int8 **)a1;
          if (*(void *)a1 == *(void *)(a1 + 8))
          {
            *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = -1;
LABEL_107:
            int v24 = v207;
            goto LABEL_405;
          }
          int v31 = *v30;
          LOBYTE(v29) = *v30;
          *(void *)a1 = v30 + 1;
          *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v31;
          if (v31 == -1) {
            goto LABEL_107;
          }
        }
        unint64_t v33 = *(unsigned char **)(a1 + 64);
        unint64_t v32 = *(void *)(a1 + 72);
        if ((unint64_t)v33 < v32)
        {
          unsigned char *v33 = v29;
          uint64_t v34 = (uint64_t)(v33 + 1);
          goto LABEL_85;
        }
        uint64_t v35 = (unsigned char *)*v15;
        unint64_t v36 = (unint64_t)&v33[-*v15];
        unint64_t v37 = v36 + 1;
        if ((uint64_t)(v36 + 1) < 0) {
          sub_215738AC0();
        }
        unint64_t v38 = v32 - (void)v35;
        if (2 * v38 > v37) {
          unint64_t v37 = 2 * v38;
        }
        if (v38 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v39 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v39 = v37;
        }
        if (!v39)
        {
          int v40 = 0;
          uint64_t v41 = &v33[-*v15];
          *(unsigned char *)unint64_t v36 = v29;
          uint64_t v34 = v36 + 1;
          if (v33 == v35) {
            goto LABEL_83;
          }
LABEL_67:
          if (v36 >= 8 && (unint64_t)(v35 - v40) >= 0x20)
          {
            if (v36 < 0x20)
            {
              unint64_t v42 = 0;
              goto LABEL_75;
            }
            unint64_t v42 = v36 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v43 = &v40[v36 - 16];
            uint64_t v44 = (long long *)(v33 - 16);
            unint64_t v45 = v36 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v46 = *v44;
              *((_OWORD *)v43 - 1) = *(v44 - 1);
              *(_OWORD *)uint64_t v43 = v46;
              v43 -= 32;
              v44 -= 2;
              v45 -= 32;
            }
            while (v45);
            if (v36 == v42) {
              goto LABEL_82;
            }
            if ((v36 & 0x18) != 0)
            {
LABEL_75:
              v41 -= v36 & 0xFFFFFFFFFFFFFFF8;
              unint64_t v47 = &v40[&v33[-v42] - v35 - 8];
              uint64_t v48 = (uint64_t *)&v33[-v42 - 8];
              unint64_t v49 = v42 - (v36 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v50 = *v48--;
                *(void *)unint64_t v47 = v50;
                v47 -= 8;
                v49 += 8;
              }
              while (v49);
              v33 -= v36 & 0xFFFFFFFFFFFFFFF8;
              if (v36 == (v36 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_82;
              }
              goto LABEL_80;
            }
            v41 -= v42;
            v33 -= v42;
          }
LABEL_80:
          unint64_t v51 = v41 - 1;
          do
          {
            char v52 = *--v33;
            *v51-- = v52;
          }
          while (v33 != v35);
LABEL_82:
          unint64_t v33 = (unsigned char *)*v15;
          uint64_t v41 = v40;
          goto LABEL_83;
        }
        int v40 = (char *)operator new(v39);
        uint64_t v41 = &v40[v36];
        v40[v36] = v29;
        uint64_t v34 = (uint64_t)&v40[v36 + 1];
        if (v33 != v35) {
          goto LABEL_67;
        }
LABEL_83:
        *(void *)(a1 + 56) = v41;
        *(void *)(a1 + 64) = v34;
        *(void *)(a1 + 72) = &v40[v39];
        if (v33) {
          operator delete(v33);
        }
LABEL_85:
        *(void *)(a1 + 64) = v34;
        int v53 = *(_DWORD *)(a1 + 20);
        if ((v53 - 48) >= 0xA) {
          break;
        }
        int v54 = *(char *)(a1 + 103);
        if ((v54 & 0x80000000) == 0)
        {
          if (*(unsigned char *)(a1 + 103) != 22)
          {
            size_t v26 = *(unsigned __int8 *)(a1 + 103);
            *(unsigned char *)(a1 + 103) = (v54 + 1) & 0x7F;
            unint64_t v27 = (char *)(a1 + 80);
            goto LABEL_49;
          }
          uint64_t v55 = (char *)(a1 + 80);
          size_t v26 = 22;
LABEL_92:
          if (v26 + 1 > 2 * v26) {
            unint64_t v58 = v26 + 1;
          }
          else {
            unint64_t v58 = 2 * v26;
          }
          uint64_t v59 = (v58 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v58 | 7) != 0x17) {
            uint64_t v59 = v58 | 7;
          }
          if (v58 >= 0x17) {
            size_t v57 = v59 + 1;
          }
          else {
            size_t v57 = 23;
          }
LABEL_100:
          unint64_t v60 = (char *)operator new(v57);
          unint64_t v27 = v60;
          if (!v26 || (memmove(v60, v55, v26), v26 != 22)) {
            operator delete(v55);
          }
          *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v27;
          *(void *)(a1 + 96) = v57 | 0x8000000000000000;
          goto LABEL_105;
        }
        uint64_t v56 = *(void *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
        size_t v26 = v56 - 1;
        if (*(void *)(a1 + 88) == v56 - 1)
        {
          if (v56 == 0x7FFFFFFFFFFFFFF8) {
            sub_215731CD8();
          }
          uint64_t v55 = *(char **)v22;
          size_t v57 = 0x7FFFFFFFFFFFFFF7;
          if (v26 < 0x3FFFFFFFFFFFFFF3) {
            goto LABEL_92;
          }
          goto LABEL_100;
        }
        unint64_t v27 = *(char **)v22;
        size_t v26 = *(void *)(a1 + 88);
LABEL_105:
        *(void *)(a1 + 88) = v26 + 1;
LABEL_49:
        std::string v28 = &v27[v26];
        *std::string v28 = v53;
        v28[1] = 0;
      }
      if (v53 > 68)
      {
        int v24 = v207;
        if (v53 != 69 && v53 != 101) {
          goto LABEL_405;
        }
        goto LABEL_402;
      }
      int v24 = v207;
      if (v53 == 10)
      {
        uint64_t v63 = *(void *)(a1 + 48) + 1;
        *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
        *(void *)(a1 + 48) = v63;
      }
      else if (v53 == 46)
      {
        goto LABEL_111;
      }
LABEL_405:
      size_t v200 = (void *)(a1 + 40);
      uint64_t v201 = *(void *)(a1 + 40);
      *(unsigned char *)(a1 + 24) = 1;
      --*(void *)(a1 + 32);
      if (v201 || (size_t v200 = (void *)(a1 + 48), (v201 = *(void *)(a1 + 48)) != 0)) {
        *size_t v200 = v201 - 1;
      }
      if (*(_DWORD *)(a1 + 20) != -1) {
        --*(void *)(a1 + 64);
      }
      __endptr = 0;
      *__error() = 0;
      if (v24 == 6)
      {
        size_t v204 = (const char *)(a1 + 80);
        if (*(char *)(a1 + 103) < 0) {
          size_t v204 = *(const char **)v22;
        }
        uint64_t v205 = strtoll(v204, &__endptr, 10);
        if (*__error()) {
          goto LABEL_419;
        }
        *(void *)(a1 + 112) = v205;
        return 6;
      }
      else
      {
        if (v24 == 5)
        {
          unsigned int v202 = (const char *)(a1 + 80);
          if (*(char *)(a1 + 103) < 0) {
            unsigned int v202 = *(const char **)v22;
          }
          unint64_t v203 = strtoull(v202, &__endptr, 10);
          if (!*__error())
          {
            *(void *)(a1 + 12std::__fs::filesystem::__rename(__from, __to, 0) = v203;
            return 5;
          }
        }
LABEL_419:
        if (*(char *)(a1 + 103) < 0) {
          uint64_t v22 = *(const char **)v22;
        }
        *(double *)(a1 + 128) = strtod(v22, &__endptr);
        return 7;
      }
    case 58:
      return 12;
    case 91:
      return result;
    case 93:
      return 10;
    case 102:
      if (sub_215D35CD0(a1) != 97
        || sub_215D35CD0(a1) != 108
        || sub_215D35CD0(a1) != 115
        || sub_215D35CD0(a1) != 101)
      {
        goto LABEL_147;
      }
      return 2;
    case 110:
      if (sub_215D35CD0(a1) != 117
        || sub_215D35CD0(a1) != 108
        || sub_215D35CD0(a1) != 108)
      {
        goto LABEL_147;
      }
      return 3;
    case 116:
      if (sub_215D35CD0(a1) != 114
        || sub_215D35CD0(a1) != 117
        || sub_215D35CD0(a1) != 101)
      {
        goto LABEL_147;
      }
      return 1;
    case 123:
      return 9;
    case 125:
      return 11;
    default:
LABEL_147:
      unsigned int v2 = "invalid literal";
      goto LABEL_35;
  }
}

void sub_215DE76D0(uint64_t a1)
{
  unsigned int v2 = (void *)(a1 + 56);
  int64x2_t v3 = vdupq_n_s64(1uLL);
  int64x2_t v30 = v3;
  while (2)
  {
    *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), v3);
    if (*(unsigned char *)(a1 + 24))
    {
      *(unsigned char *)(a1 + 24) = 0;
      int v5 = *(_DWORD *)(a1 + 20);
      if (v5 == -1) {
        return;
      }
LABEL_8:
      uint64_t v9 = *(unsigned char **)(a1 + 64);
      unint64_t v8 = *(void *)(a1 + 72);
      if ((unint64_t)v9 < v8)
      {
        *uint64_t v9 = v5;
        *(void *)(a1 + 64) = v9 + 1;
        unsigned int v10 = *(_DWORD *)(a1 + 20) - 9;
        if (v10 > 0x17) {
          return;
        }
LABEL_40:
        switch(v10)
        {
          case 0u:
          case 4u:
          case 0x17u:
            continue;
          case 1u:
            uint64_t v4 = *(void *)(a1 + 48) + 1;
            *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
            *(void *)(a1 + 48) = v4;
            continue;
          default:
            return;
        }
      }
      uint64_t v11 = (unsigned char *)*v2;
      unint64_t v12 = (unint64_t)&v9[-*v2];
      unint64_t v13 = v12 + 1;
      if ((uint64_t)(v12 + 1) < 0) {
        sub_215738AC0();
      }
      unint64_t v14 = v8 - (void)v11;
      if (2 * v14 > v13) {
        unint64_t v13 = 2 * v14;
      }
      if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v15 = v13;
      }
      if (v15)
      {
        unint64_t v16 = (char *)operator new(v15);
        uint64_t v17 = &v16[v12];
        v16[v12] = v5;
        uint64_t v18 = (uint64_t)&v16[v12 + 1];
        if (v9 == v11) {
          goto LABEL_37;
        }
      }
      else
      {
        unint64_t v16 = 0;
        uint64_t v17 = &v9[-*v2];
        *(unsigned char *)unint64_t v12 = v5;
        uint64_t v18 = v12 + 1;
        if (v9 == v11)
        {
LABEL_37:
          *(void *)(a1 + 56) = v17;
          *(void *)(a1 + 64) = v18;
          *(void *)(a1 + 72) = &v16[v15];
          if (v9) {
            operator delete(v9);
          }
          int64x2_t v3 = v30;
          *(void *)(a1 + 64) = v18;
          unsigned int v10 = *(_DWORD *)(a1 + 20) - 9;
          goto LABEL_40;
        }
      }
      if (v12 >= 8 && (unint64_t)(v11 - v16) >= 0x20)
      {
        if (v12 < 0x20)
        {
          unint64_t v19 = 0;
          goto LABEL_29;
        }
        unint64_t v19 = v12 & 0xFFFFFFFFFFFFFFE0;
        size_t v20 = &v16[v12 - 16];
        uint64_t v21 = (long long *)(v9 - 16);
        unint64_t v22 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v23 = *v21;
          *((_OWORD *)v20 - 1) = *(v21 - 1);
          *(_OWORD *)size_t v20 = v23;
          v20 -= 32;
          v21 -= 2;
          v22 -= 32;
        }
        while (v22);
        if (v12 == v19) {
          goto LABEL_36;
        }
        if ((v12 & 0x18) != 0)
        {
LABEL_29:
          v17 -= v12 & 0xFFFFFFFFFFFFFFF8;
          int v24 = &v16[&v9[-v19] - v11 - 8];
          int v25 = (uint64_t *)&v9[-v19 - 8];
          unint64_t v26 = v19 - (v12 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v27 = *v25--;
            *(void *)int v24 = v27;
            v24 -= 8;
            v26 += 8;
          }
          while (v26);
          v9 -= v12 & 0xFFFFFFFFFFFFFFF8;
          if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_36;
          }
          goto LABEL_34;
        }
        v17 -= v19;
        v9 -= v19;
      }
LABEL_34:
      std::string v28 = v17 - 1;
      do
      {
        char v29 = *--v9;
        *v28-- = v29;
      }
      while (v9 != v11);
LABEL_36:
      uint64_t v9 = (unsigned char *)*v2;
      uint64_t v17 = v16;
      goto LABEL_37;
    }
    break;
  }
  int v6 = *(unsigned char **)a1;
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = -1;
  }
  else
  {
    int v7 = *v6;
    LOBYTE(v5) = *v6;
    *(void *)a1 = v6 + 1;
    *(_DWORD *)(a1 + 2std::__fs::filesystem::__rename(__from, __to, 0) = v7;
    if (v7 != -1) {
      goto LABEL_8;
    }
  }
}

void sub_215DE79A8(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v223 = a1 + 120;
  uint64_t v4 = a1 + 40;
  uint64_t v235 = *MEMORY[0x263EF8340];
  unsigned int v230 = 0;
  unint64_t v231 = 0;
  unsigned int v220 = (void **)(a2 + 4);
  uint64_t v232 = 0;
  unint64_t v221 = (uint64_t **)(a2 + 1);
  uint64_t v222 = (unsigned __int8 *)(a2 + 17);
  while (2)
  {
    unsigned __int8 v5 = 0;
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        unsigned __int8 v5 = 1;
        goto LABEL_4;
      case 2:
LABEL_4:
        sub_215DEAA20(a2, v5);
        goto LABEL_110;
      case 3:
        if (((*(void *)&a2[4][((unint64_t)(a2[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((unsigned char *)a2 + 40) - 1)) & 1) == 0) {
          goto LABEL_110;
        }
        LOBYTE(__str.__vftable) = 0;
        __str.__imp_.__imp_ = 0;
        LODWORD(__p.__r_.__value_.__l.__data_) = (unint64_t)(a2[2] - a2[1]) >> 3;
        v226.__r_.__value_.__s.__data_[0] = 5;
        uint64_t v17 = a2[15];
        if (!v17) {
          sub_21573D7DC();
        }
        if (((*(uint64_t (**)(unsigned __int8 *, std::string *, std::string *, std::runtime_error *))(*(void *)v17 + 48))(v17, &__p, &v226, &__str) & 1) == 0)goto LABEL_109; {
        uint64_t v18 = a2[2];
        }
        if (a2[1] == v18) {
          goto LABEL_105;
        }
        uint64_t v19 = *((void *)v18 - 1);
        if (!v19) {
          goto LABEL_109;
        }
        if (*(unsigned char *)v19 != 2) {
          goto LABEL_106;
        }
        uint64_t v15 = *(void *)(v19 + 8);
        unint64_t v16 = *(void *)(v15 + 8);
        if (v16 >= *(void *)(v15 + 16)) {
          goto LABEL_216;
        }
        goto LABEL_104;
      case 4:
        if (((*(void *)&a2[4][((unint64_t)(a2[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((unsigned char *)a2 + 40) - 1)) & 1) == 0) {
          goto LABEL_110;
        }
        LOBYTE(__str.__vftable) = 3;
        int v25 = (char *)operator new(0x18uLL);
        unint64_t v26 = v25;
        if (*(char *)(a1 + 143) < 0)
        {
          sub_215738B0C(v25, *(void **)(a1 + 120), *(void *)(a1 + 128));
        }
        else
        {
          *(_OWORD *)int v25 = *(_OWORD *)v223;
          *((void *)v25 + 2) = *(void *)(v223 + 16);
        }
        __str.__imp_.__imp_ = v26;
        LODWORD(__p.__r_.__value_.__l.__data_) = (unint64_t)(a2[2] - a2[1]) >> 3;
        v226.__r_.__value_.__s.__data_[0] = 5;
        uint64_t v55 = a2[15];
        if (!v55) {
          sub_21573D7DC();
        }
        if (((*(uint64_t (**)(unsigned __int8 *, std::string *, std::string *, std::runtime_error *))(*(void *)v55 + 48))(v55, &__p, &v226, &__str) & 1) == 0)goto LABEL_109; {
        uint64_t v56 = a2[2];
        }
        if (a2[1] == v56) {
          goto LABEL_105;
        }
        uint64_t v57 = *((void *)v56 - 1);
        if (!v57) {
          goto LABEL_109;
        }
        if (*(unsigned char *)v57 != 2) {
          goto LABEL_106;
        }
        uint64_t v15 = *(void *)(v57 + 8);
        unint64_t v16 = *(void *)(v15 + 8);
        if (v16 < *(void *)(v15 + 16)) {
          goto LABEL_104;
        }
        goto LABEL_216;
      case 5:
        if (((*(void *)&a2[4][((unint64_t)(a2[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((unsigned char *)a2 + 40) - 1)) & 1) == 0) {
          goto LABEL_110;
        }
        int v31 = *(const char **)(a1 + 160);
        LOBYTE(__str.__vftable) = 6;
        __str.__imp_.__imp_ = v31;
        LODWORD(__p.__r_.__value_.__l.__data_) = (unint64_t)(a2[2] - a2[1]) >> 3;
        v226.__r_.__value_.__s.__data_[0] = 5;
        unint64_t v32 = a2[15];
        if (!v32) {
          sub_21573D7DC();
        }
        if (((*(uint64_t (**)(unsigned __int8 *, std::string *, std::string *, std::runtime_error *))(*(void *)v32 + 48))(v32, &__p, &v226, &__str) & 1) == 0)goto LABEL_109; {
        unint64_t v33 = a2[2];
        }
        if (a2[1] == v33) {
          goto LABEL_105;
        }
        uint64_t v34 = *((void *)v33 - 1);
        if (!v34) {
          goto LABEL_109;
        }
        if (*(unsigned char *)v34 != 2) {
          goto LABEL_106;
        }
        uint64_t v15 = *(void *)(v34 + 8);
        unint64_t v16 = *(void *)(v15 + 8);
        if (v16 >= *(void *)(v15 + 16)) {
          goto LABEL_216;
        }
        goto LABEL_104;
      case 6:
        if (((*(void *)&a2[4][((unint64_t)(a2[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((unsigned char *)a2 + 40) - 1)) & 1) == 0) {
          goto LABEL_110;
        }
        uint64_t v11 = *(const char **)(a1 + 152);
        LOBYTE(__str.__vftable) = 5;
        __str.__imp_.__imp_ = v11;
        LODWORD(__p.__r_.__value_.__l.__data_) = (unint64_t)(a2[2] - a2[1]) >> 3;
        v226.__r_.__value_.__s.__data_[0] = 5;
        unint64_t v12 = a2[15];
        if (!v12) {
          sub_21573D7DC();
        }
        if (((*(uint64_t (**)(unsigned __int8 *, std::string *, std::string *, std::runtime_error *))(*(void *)v12 + 48))(v12, &__p, &v226, &__str) & 1) == 0)goto LABEL_109; {
        unint64_t v13 = a2[2];
        }
        if (a2[1] == v13) {
          goto LABEL_105;
        }
        uint64_t v14 = *((void *)v13 - 1);
        if (!v14) {
          goto LABEL_109;
        }
        if (*(unsigned char *)v14 != 2) {
          goto LABEL_106;
        }
        uint64_t v15 = *(void *)(v14 + 8);
        unint64_t v16 = *(void *)(v15 + 8);
        if (v16 >= *(void *)(v15 + 16)) {
          goto LABEL_216;
        }
        goto LABEL_104;
      case 7:
        uint64_t v27 = *(const char **)(a1 + 168);
        if (((unint64_t)v27 & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000)
        {
          sub_215DE96A0(&v229, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          sub_215DE96A0(&v226, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          sub_215AC8CC8("number overflow parsing '", &v226, &__p);
          sub_215AEDCD0("'", &__p, &v228);
          sub_215D3A1E4(406, (uint64_t)&v228, (uint64_t)&__str);
          sub_215DEA758((uint64_t)a2, (uint64_t)&__str);
          sub_215D3A384(&__str);
          if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v228.__r_.__value_.__l.__data_);
          }
          goto LABEL_351;
        }
        if (((*(void *)&a2[4][((unint64_t)(a2[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((unsigned char *)a2 + 40) - 1)) & 1) == 0) {
          goto LABEL_110;
        }
        LOBYTE(__str.__vftable) = 7;
        __str.__imp_.__imp_ = v27;
        LODWORD(__p.__r_.__value_.__l.__data_) = (unint64_t)(a2[2] - a2[1]) >> 3;
        v226.__r_.__value_.__s.__data_[0] = 5;
        std::string v28 = a2[15];
        if (!v28) {
          sub_21573D7DC();
        }
        if (((*(uint64_t (**)(unsigned __int8 *, std::string *, std::string *, std::runtime_error *))(*(void *)v28 + 48))(v28, &__p, &v226, &__str) & 1) == 0)goto LABEL_109; {
        char v29 = a2[2];
        }
        if (a2[1] == v29)
        {
LABEL_105:
          unsigned __int8 v58 = __str.__vftable;
          imp = __str.__imp_.__imp_;
          LOBYTE(__str.__vftable) = 0;
          __str.__imp_.__imp_ = 0;
          unint64_t v60 = *a2;
          int v61 = **a2;
          unsigned __int8 *v60 = v58;
          v229.__r_.__value_.__s.__data_[0] = v61;
          std::string::size_type v62 = *((void *)v60 + 1);
          *((void *)v60 + 1) = imp;
          v229.__r_.__value_.__l.__size_ = v62;
          p_size_t size = (void ***)&v229.__r_.__value_.__l.__size_;
        }
        else
        {
          uint64_t v30 = *((void *)v29 - 1);
          if (!v30) {
            goto LABEL_109;
          }
          if (*(unsigned char *)v30 == 2)
          {
            uint64_t v15 = *(void *)(v30 + 8);
            unint64_t v16 = *(void *)(v15 + 8);
            if (v16 < *(void *)(v15 + 16))
            {
LABEL_104:
              *(unsigned char *)unint64_t v16 = __str.__vftable;
              *(void *)(v16 + 8) = __str.__imp_.__imp_;
              LOBYTE(__str.__vftable) = 0;
              __str.__imp_.__imp_ = 0;
              *(void *)(v15 + 8) = v16 + 16;
            }
            else
            {
LABEL_216:
              *(void *)(v15 + 8) = sub_215CEB95C((void **)v15, (char *)&__str);
            }
            goto LABEL_109;
          }
LABEL_106:
          unint64_t v64 = (unint64_t)(a2[8] - 1);
          unint64_t v65 = *(void *)&a2[7][(v64 >> 3) & 0x1FFFFFFFFFFFFFF8];
          a2[8] = (unsigned __int8 *)v64;
          if (((v65 >> v64) & 1) == 0)
          {
LABEL_109:
            sub_215CEB204((void ***)&__str.__imp_, LOBYTE(__str.__vftable));
            goto LABEL_110;
          }
          unsigned __int8 v66 = __str.__vftable;
          unint64_t v67 = __str.__imp_.__imp_;
          LOBYTE(__str.__vftable) = 0;
          __str.__imp_.__imp_ = 0;
          uint64_t v68 = a2[10];
          int v61 = *v68;
          unsigned __int8 *v68 = v66;
          v228.__r_.__value_.__s.__data_[0] = v61;
          std::string::size_type v69 = *((void *)v68 + 1);
          *((void *)v68 + 1) = v67;
          v228.__r_.__value_.__l.__size_ = v69;
          p_size_t size = (void ***)&v228.__r_.__value_.__l.__size_;
        }
        sub_215CEB204(p_size, v61);
        goto LABEL_109;
      case 8:
        LODWORD(__str.__vftable) = (unint64_t)(a2[2] - a2[1]) >> 3;
        v229.__r_.__value_.__s.__data_[0] = 2;
        int v6 = a2[15];
        if (!v6) {
          goto LABEL_360;
        }
        int v7 = (*(uint64_t (**)(unsigned __int8 *, std::runtime_error *, std::string *, unsigned __int8 *))(*(void *)v6 + 48))(v6, &__str, &v229, v222);
        unint64_t v9 = (unint64_t)a2[5];
        unint64_t v8 = a2[6];
        if (v9 != (void)v8 << 6) {
          goto LABEL_133;
        }
        if ((uint64_t)(v9 + 1) < 0) {
          goto LABEL_361;
        }
        if (v9 > 0x3FFFFFFFFFFFFFFELL)
        {
          unint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
          if (v9 >= 0x7FFFFFFFFFFFFFFFLL)
          {
            unint64_t v9 = -1;
            goto LABEL_133;
          }
          goto LABEL_60;
        }
        unint64_t v10 = (void)v8 << 7;
        if (v10 <= (v9 & 0xFFFFFFFFFFFFFFC0) + 64) {
          unint64_t v10 = (v9 & 0xFFFFFFFFFFFFFFC0) + 64;
        }
        if (v9 < v10)
        {
          if ((v10 & 0x8000000000000000) != 0) {
            goto LABEL_361;
          }
LABEL_60:
          unint64_t v35 = ((v10 - 1) >> 6) + 1;
          unint64_t v36 = (uint64_t *)operator new(8 * v35);
          unint64_t v37 = *v220;
          unint64_t v38 = (v9 - 1) >> 6;
          if (v9 < 0x41) {
            unint64_t v38 = 0;
          }
          v36[v38] = 0;
          if (v9 > 0x3F || (v9 & 0x3F) != 0)
          {
            int v39 = 0;
            int v40 = 0;
            uint64_t v41 = v36;
            unint64_t v42 = v37;
            do
            {
              uint64_t v43 = 1 << v39;
              if ((*v42 >> v40)) {
                uint64_t v44 = *v41 | v43;
              }
              else {
                uint64_t v44 = *v41 & ~v43;
              }
              *uint64_t v41 = v44;
              v42 += v40 == 63;
              if (v40 == 63) {
                int v40 = 0;
              }
              else {
                ++v40;
              }
              v41 += v39 == 63;
              if (v39 == 63) {
                int v39 = 0;
              }
              else {
                ++v39;
              }
            }
            while (v40 != (v9 & 0x3F) || v42 != &v37[v9 >> 6]);
          }
          a2[4] = (unsigned __int8 *)v36;
          a2[6] = (unsigned __int8 *)v35;
          if (v37)
          {
            operator delete(v37);
            unint64_t v9 = (unint64_t)a2[5];
          }
        }
LABEL_133:
        a2[5] = (unsigned __int8 *)(v9 + 1);
        unint64_t v88 = a2[4];
        unint64_t v89 = v9 >> 6;
        uint64_t v90 = 1 << v9;
        if (v7) {
          uint64_t v91 = *(void *)&v88[8 * v89] | v90;
        }
        else {
          uint64_t v91 = *(void *)&v88[8 * v89] & ~v90;
        }
        *(void *)&v88[8 * v89] = v91;
        uint64_t v92 = sub_215DEA7B4(a2, 2u);
        uint64_t v93 = v92;
        uint64_t v95 = (uint64_t *)a2[2];
        long long v94 = a2[3];
        if (v95 < (uint64_t *)v94)
        {
          uint64_t *v95 = v92;
          uint64_t v96 = (uint64_t)(v95 + 1);
          goto LABEL_158;
        }
        unint64_t v97 = *v221;
        uint64_t v98 = (char *)v95 - (char *)*v221;
        uint64_t v99 = v98 >> 3;
        unint64_t v100 = (v98 >> 3) + 1;
        if (v100 >> 61) {
          goto LABEL_362;
        }
        uint64_t v101 = v94 - (unsigned __int8 *)v97;
        if (v101 >> 2 > v100) {
          unint64_t v100 = v101 >> 2;
        }
        if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v102 = v100;
        }
        if (v102)
        {
          if (v102 >> 61) {
            goto LABEL_367;
          }
          int v103 = operator new(8 * v102);
          uint64_t v104 = &v103[8 * v99];
          *(void *)uint64_t v104 = v93;
          uint64_t v96 = (uint64_t)(v104 + 8);
          unint64_t v105 = (char *)((char *)v95 - (char *)v97);
          if (v95 == v97)
          {
LABEL_156:
            a2[1] = v104;
            a2[2] = (unsigned __int8 *)v96;
            a2[3] = &v103[8 * v102];
            if (!v95) {
              goto LABEL_158;
            }
LABEL_157:
            operator delete(v95);
            goto LABEL_158;
          }
        }
        else
        {
          int v103 = 0;
          uint64_t v104 = (unsigned __int8 *)(8 * v99);
          *(void *)(8 * v99) = v93;
          uint64_t v96 = 8 * v99 + 8;
          unint64_t v105 = (char *)((char *)v95 - (char *)v97);
          if (v95 == v97) {
            goto LABEL_156;
          }
        }
        unint64_t v106 = (unint64_t)(v105 - 8);
        if (v106 < 0x58) {
          goto LABEL_378;
        }
        if ((unint64_t)((char *)v95 - v103 - v98) < 0x20) {
          goto LABEL_378;
        }
        uint64_t v107 = (v106 >> 3) + 1;
        uint64_t v108 = 8 * (v107 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v109 = &v95[v108 / 0xFFFFFFFFFFFFFFF8];
        v104 -= v108;
        unint64_t v110 = &v103[8 * v99 - 16];
        unint64_t v111 = v95 - 2;
        uint64_t v112 = v107 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v113 = *(_OWORD *)v111;
          *(v110 - 1) = *((_OWORD *)v111 - 1);
          _OWORD *v110 = v113;
          v110 -= 2;
          v111 -= 4;
          v112 -= 4;
        }
        while (v112);
        uint64_t v95 = v109;
        if (v107 != (v107 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_378:
          do
          {
            uint64_t v114 = *--v95;
            *((void *)v104 - 1) = v114;
            v104 -= 8;
          }
          while (v95 != v97);
        }
        uint64_t v95 = *v221;
        a2[1] = v104;
        a2[2] = (unsigned __int8 *)v96;
        a2[3] = &v103[8 * v102];
        if (v95) {
          goto LABEL_157;
        }
LABEL_158:
        a2[2] = (unsigned __int8 *)v96;
        int v115 = sub_215DE5704(v4);
        *(_DWORD *)(a1 + 32) = v115;
        if (v115 == 10)
        {
          unint64_t v116 = a2[2];
          uint64_t v118 = *((void *)v116 - 1);
          unint64_t v117 = v116 - 8;
          if (v118)
          {
            LODWORD(v229.__r_.__value_.__l.__data_) = ((unint64_t)(a2[2] - a2[1]) >> 3) - 1;
            v228.__r_.__value_.__s.__data_[0] = 3;
            uint64_t v119 = a2[15];
            if (!v119) {
LABEL_360:
            }
              sub_21573D7DC();
            if (((*(uint64_t (**)(unsigned __int8 *, std::string *, std::string *))(*(void *)v119 + 48))(v119, &v229, &v228) & 1) == 0)
            {
              sub_215D2F4F0((uint64_t)&__str, v222);
              unint64_t v123 = (unsigned __int8 *)*((void *)a2[2] - 1);
              int v124 = *v123;
              *unint64_t v123 = __str.__vftable;
              LOBYTE(__str.__vftable) = v124;
              uint64_t v125 = (const char *)*((void *)v123 + 1);
              *((void *)v123 + 1) = __str.__imp_.__imp_;
              __str.__imp_.__imp_ = v125;
              sub_215CEB204((void ***)&__str.__imp_, v124);
              uint64_t v127 = a2[1];
              int v126 = a2[2];
              a2[2] = v126 - 8;
              --a2[5];
              if (v127 != v126 - 8)
              {
                uint64_t v128 = *((void *)v126 - 2);
                if (*(unsigned char *)v128 == 2)
                {
                  uint64_t v129 = *(void *)(v128 + 8);
                  uint64_t v130 = *(void *)(v129 + 8);
                  int v131 = *(unsigned __int8 *)(v130 - 16);
                  v130 -= 16;
                  sub_215CEB204((void ***)(v130 + 8), v131);
                  *(void *)(v129 + 8) = v130;
                }
              }
              goto LABEL_110;
            }
            a2[2] -= 8;
          }
          else
          {
            a2[2] = v117;
          }
          --a2[5];
LABEL_110:
          unint64_t v70 = v231;
          if (!v231) {
            goto LABEL_343;
          }
LABEL_111:
          if ((*(void *)((char *)v230 + (((v70 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v70 - 1)))
          {
            int v71 = sub_215DE5704(v4);
            *(_DWORD *)(a1 + 32) = v71;
            if (v71 == 13) {
              goto LABEL_131;
            }
            if (v71 != 10)
            {
              sub_215DE96A0(&v229, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
              std::string v228 = *(std::string *)(a1 + 72);
              sub_215732BF4(&v226, "array");
              sub_215DE9798(&__p, a1, 0xAu, (const void **)&v226.__r_.__value_.__l.__data_);
              sub_215D36EC8(101, (uint64_t *)&v228, (uint64_t)&__p, (uint64_t)&__str);
              sub_215DE9644((uint64_t)a2, (uint64_t)&__str);
              goto LABEL_350;
            }
            unint64_t v72 = a2[2];
            uint64_t v74 = *((void *)v72 - 1);
            char v73 = v72 - 8;
            if (v74)
            {
              LODWORD(v229.__r_.__value_.__l.__data_) = ((unint64_t)(a2[2] - a2[1]) >> 3) - 1;
              v228.__r_.__value_.__s.__data_[0] = 3;
              char v75 = a2[15];
              if (!v75) {
                sub_21573D7DC();
              }
              if ((*(uint64_t (**)(unsigned __int8 *, std::string *, std::string *))(*(void *)v75 + 48))(v75, &v229, &v228))
              {
                a2[2] -= 8;
                goto LABEL_122;
              }
              sub_215D2F4F0((uint64_t)&__str, v222);
              int v77 = (unsigned __int8 *)*((void *)a2[2] - 1);
              int v78 = *v77;
              unsigned __int8 *v77 = __str.__vftable;
              LOBYTE(__str.__vftable) = v78;
              int v79 = (const char *)*((void *)v77 + 1);
              *((void *)v77 + 1) = __str.__imp_.__imp_;
              __str.__imp_.__imp_ = v79;
              sub_215CEB204((void ***)&__str.__imp_, v78);
              std::string::size_type v81 = a2[1];
              unint64_t v80 = a2[2];
              a2[2] = v80 - 8;
              --a2[5];
              if (v81 != v80 - 8)
              {
                uint64_t v82 = *((void *)v80 - 2);
                if (*(unsigned char *)v82 == 2)
                {
                  uint64_t v83 = *(void *)(v82 + 8);
                  uint64_t v84 = *(void *)(v83 + 8);
                  int v85 = *(unsigned __int8 *)(v84 - 16);
                  v84 -= 16;
                  sub_215CEB204((void ***)(v84 + 8), v85);
                  *(void *)(v83 + 8) = v84;
                }
              }
            }
            else
            {
              a2[2] = v73;
LABEL_122:
              --a2[5];
            }
          }
          else
          {
            int v76 = sub_215DE5704(v4);
            *(_DWORD *)(a1 + 32) = v76;
            if (v76 == 13)
            {
              int v86 = sub_215DE5704(v4);
              *(_DWORD *)(a1 + 32) = v86;
              if (v86 == 4)
              {
                sub_215DEA50C((uint64_t)a2, v223);
                int v87 = sub_215DE5704(v4);
                *(_DWORD *)(a1 + 32) = v87;
                if (v87 == 12)
                {
LABEL_131:
                  *(_DWORD *)(a1 + 32) = sub_215DE5704(v4);
                  continue;
                }
LABEL_349:
                sub_215DE96A0(&v229, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
                std::string v228 = *(std::string *)(a1 + 72);
                sub_215732BF4(&v226, "object separator");
                sub_215DE9798(&__p, a1, 0xCu, (const void **)&v226.__r_.__value_.__l.__data_);
                sub_215D36EC8(101, (uint64_t *)&v228, (uint64_t)&__p, (uint64_t)&__str);
                sub_215DE9644((uint64_t)a2, (uint64_t)&__str);
LABEL_350:
                sub_215D37928(&__str);
LABEL_351:
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
                {
                  uint64_t v217 = (void *)v226.__r_.__value_.__r.__words[0];
LABEL_340:
                  operator delete(v217);
                }
                goto LABEL_341;
              }
LABEL_348:
              sub_215DE96A0(&v229, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
              std::string v228 = *(std::string *)(a1 + 72);
              sub_215732BF4(&v226, "object key");
              sub_215DE9798(&__p, a1, 4u, (const void **)&v226.__r_.__value_.__l.__data_);
              sub_215D36EC8(101, (uint64_t *)&v228, (uint64_t)&__p, (uint64_t)&__str);
              sub_215DE9644((uint64_t)a2, (uint64_t)&__str);
              goto LABEL_350;
            }
            if (v76 != 11)
            {
              sub_215DE96A0(&v229, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
              std::string v228 = *(std::string *)(a1 + 72);
              sub_215732BF4(&v226, "object");
              sub_215DE9798(&__p, a1, 0xBu, (const void **)&v226.__r_.__value_.__l.__data_);
              sub_215D36EC8(101, (uint64_t *)&v228, (uint64_t)&__p, (uint64_t)&__str);
              sub_215DE9644((uint64_t)a2, (uint64_t)&__str);
              goto LABEL_350;
            }
            sub_215DE9FB0((uint64_t)a2);
          }
          unint64_t v70 = --v231;
          if (!v231) {
            goto LABEL_343;
          }
          goto LABEL_111;
        }
        unint64_t v120 = v231;
        if (v231 == v232 << 6)
        {
          if ((uint64_t)(v231 + 1) < 0) {
            sub_215D2CB08();
          }
          unint64_t v121 = v232 << 7;
          if (v232 << 7 <= (v231 & 0xFFFFFFFFFFFFFFC0) + 64) {
            unint64_t v121 = (v231 & 0xFFFFFFFFFFFFFFC0) + 64;
          }
          if (v231 <= 0x3FFFFFFFFFFFFFFELL) {
            unint64_t v122 = v121;
          }
          else {
            unint64_t v122 = 0x7FFFFFFFFFFFFFFFLL;
          }
          sub_215D39348((uint64_t)&v230, v122);
          unint64_t v120 = v231;
        }
        unint64_t v231 = v120 + 1;
        *(void *)((char *)v230 + ((v120 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v120;
        continue;
      case 9:
        LODWORD(__str.__vftable) = (unint64_t)(a2[2] - a2[1]) >> 3;
        v229.__r_.__value_.__s.__data_[0] = 0;
        size_t v20 = a2[15];
        if (!v20) {
          goto LABEL_360;
        }
        int v21 = (*(uint64_t (**)(unsigned __int8 *, std::runtime_error *, std::string *, unsigned __int8 *))(*(void *)v20 + 48))(v20, &__str, &v229, v222);
        unint64_t v23 = (unint64_t)a2[5];
        unint64_t v22 = a2[6];
        if (v23 != (void)v22 << 6) {
          goto LABEL_178;
        }
        if ((uint64_t)(v23 + 1) < 0) {
          goto LABEL_361;
        }
        if (v23 > 0x3FFFFFFFFFFFFFFELL)
        {
          unint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
          if (v23 >= 0x7FFFFFFFFFFFFFFFLL)
          {
            unint64_t v23 = -1;
            goto LABEL_178;
          }
          goto LABEL_79;
        }
        unint64_t v24 = (void)v22 << 7;
        if (v24 <= (v23 & 0xFFFFFFFFFFFFFFC0) + 64) {
          unint64_t v24 = (v23 & 0xFFFFFFFFFFFFFFC0) + 64;
        }
        if (v23 < v24)
        {
          if ((v24 & 0x8000000000000000) != 0) {
LABEL_361:
          }
            sub_215D2CB08();
LABEL_79:
          unint64_t v45 = ((v24 - 1) >> 6) + 1;
          long long v46 = (uint64_t *)operator new(8 * v45);
          unint64_t v47 = *v220;
          unint64_t v48 = (v23 - 1) >> 6;
          if (v23 < 0x41) {
            unint64_t v48 = 0;
          }
          v46[v48] = 0;
          if (v23 > 0x3F || (v23 & 0x3F) != 0)
          {
            int v49 = 0;
            int v50 = 0;
            unint64_t v51 = v46;
            char v52 = v47;
            do
            {
              uint64_t v53 = 1 << v49;
              if ((*v52 >> v50)) {
                uint64_t v54 = *v51 | v53;
              }
              else {
                uint64_t v54 = *v51 & ~v53;
              }
              *unint64_t v51 = v54;
              v52 += v50 == 63;
              if (v50 == 63) {
                int v50 = 0;
              }
              else {
                ++v50;
              }
              v51 += v49 == 63;
              if (v49 == 63) {
                int v49 = 0;
              }
              else {
                ++v49;
              }
            }
            while (v50 != (v23 & 0x3F) || v52 != &v47[v23 >> 6]);
          }
          a2[4] = (unsigned __int8 *)v46;
          a2[6] = (unsigned __int8 *)v45;
          if (v47)
          {
            operator delete(v47);
            unint64_t v23 = (unint64_t)a2[5];
          }
        }
LABEL_178:
        a2[5] = (unsigned __int8 *)(v23 + 1);
        long long v132 = a2[4];
        unint64_t v133 = v23 >> 6;
        uint64_t v134 = 1 << v23;
        if (v21) {
          uint64_t v135 = *(void *)&v132[8 * v133] | v134;
        }
        else {
          uint64_t v135 = *(void *)&v132[8 * v133] & ~v134;
        }
        *(void *)&v132[8 * v133] = v135;
        uint64_t v136 = sub_215DEA7B4(a2, 1u);
        uint64_t v137 = v136;
        int v139 = (uint64_t *)a2[2];
        std::string::value_type v138 = a2[3];
        if (v139 < (uint64_t *)v138)
        {
          uint64_t *v139 = v136;
          uint64_t v140 = (uint64_t)(v139 + 1);
          goto LABEL_203;
        }
        uint64_t v141 = *v221;
        uint64_t v142 = (char *)v139 - (char *)*v221;
        uint64_t v143 = v142 >> 3;
        unint64_t v144 = (v142 >> 3) + 1;
        if (v144 >> 61) {
LABEL_362:
        }
          sub_215DEAA08();
        uint64_t v145 = v138 - (unsigned __int8 *)v141;
        if (v145 >> 2 > v144) {
          unint64_t v144 = v145 >> 2;
        }
        if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v146 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v146 = v144;
        }
        if (v146)
        {
          if (v146 >> 61) {
LABEL_367:
          }
            sub_215738AD8();
          uint64_t v147 = operator new(8 * v146);
          long long v148 = &v147[8 * v143];
          *(void *)long long v148 = v137;
          uint64_t v140 = (uint64_t)(v148 + 8);
          char v149 = (char *)((char *)v139 - (char *)v141);
          if (v139 == v141)
          {
LABEL_201:
            a2[1] = v148;
            a2[2] = (unsigned __int8 *)v140;
            a2[3] = &v147[8 * v146];
            if (!v139) {
              goto LABEL_203;
            }
LABEL_202:
            operator delete(v139);
            goto LABEL_203;
          }
        }
        else
        {
          uint64_t v147 = 0;
          long long v148 = (unsigned __int8 *)(8 * v143);
          *(void *)(8 * v143) = v137;
          uint64_t v140 = 8 * v143 + 8;
          char v149 = (char *)((char *)v139 - (char *)v141);
          if (v139 == v141) {
            goto LABEL_201;
          }
        }
        unint64_t v150 = (unint64_t)(v149 - 8);
        if (v150 < 0x58) {
          goto LABEL_379;
        }
        if ((unint64_t)((char *)v139 - v147 - v142) < 0x20) {
          goto LABEL_379;
        }
        uint64_t v151 = (v150 >> 3) + 1;
        uint64_t v152 = 8 * (v151 & 0x3FFFFFFFFFFFFFFCLL);
        int v153 = &v139[v152 / 0xFFFFFFFFFFFFFFF8];
        v148 -= v152;
        char v154 = &v147[8 * v143 - 16];
        int v155 = v139 - 2;
        uint64_t v156 = v151 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v157 = *(_OWORD *)v155;
          *(v154 - 1) = *((_OWORD *)v155 - 1);
          _OWORD *v154 = v157;
          v154 -= 2;
          v155 -= 4;
          v156 -= 4;
        }
        while (v156);
        int v139 = v153;
        if (v151 != (v151 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_379:
          do
          {
            uint64_t v158 = *--v139;
            *((void *)v148 - 1) = v158;
            v148 -= 8;
          }
          while (v139 != v141);
        }
        int v139 = *v221;
        a2[1] = v148;
        a2[2] = (unsigned __int8 *)v140;
        a2[3] = &v147[8 * v146];
        if (v139) {
          goto LABEL_202;
        }
LABEL_203:
        a2[2] = (unsigned __int8 *)v140;
        int v159 = sub_215DE5704(v4);
        *(_DWORD *)(a1 + 32) = v159;
        if (v159 == 11)
        {
          sub_215DE9FB0((uint64_t)a2);
          goto LABEL_110;
        }
        if (v159 != 4) {
          goto LABEL_348;
        }
        sub_215DEA50C((uint64_t)a2, v223);
        int v160 = sub_215DE5704(v4);
        *(_DWORD *)(a1 + 32) = v160;
        if (v160 != 12) {
          goto LABEL_349;
        }
        unint64_t v161 = v231;
        if (v231 == v232 << 6)
        {
          if ((uint64_t)(v231 + 1) < 0) {
            sub_215D2CB08();
          }
          if (v231 > 0x3FFFFFFFFFFFFFFELL)
          {
            unint64_t v162 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else if (v232 << 7 <= (v231 & 0xFFFFFFFFFFFFFFC0) + 64)
          {
            unint64_t v162 = (v231 & 0xFFFFFFFFFFFFFFC0) + 64;
          }
          else
          {
            unint64_t v162 = v232 << 7;
          }
          sub_215D39348((uint64_t)&v230, v162);
          unint64_t v161 = v231;
        }
        unint64_t v231 = v161 + 1;
        *(void *)((char *)v230 + ((v161 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v161);
        *(_DWORD *)(a1 + 32) = sub_215DE5704(v4);
        continue;
      case 0xE:
        uint64_t v164 = *(unsigned __int8 **)(a1 + 96);
        uint64_t v163 = *(unsigned __int8 **)(a1 + 104);
        memset(&v229, 0, sizeof(v229));
        if (v164 == v163) {
          goto LABEL_335;
        }
        std::string::size_type v224 = v163;
        while (1)
        {
          unsigned int v166 = *v164;
          if (v166 > 0x1F)
          {
            if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
            {
              size_t size = (v229.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if (v229.__r_.__value_.__l.__size_ == size)
              {
                if ((v229.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
                  sub_215731CD8();
                }
                unint64_t v175 = (std::string *)v229.__r_.__value_.__r.__words[0];
                size_t v179 = 0x7FFFFFFFFFFFFFF7;
                if (size < 0x3FFFFFFFFFFFFFF3)
                {
LABEL_252:
                  if (size + 1 > 2 * size) {
                    unint64_t v180 = size + 1;
                  }
                  else {
                    unint64_t v180 = 2 * size;
                  }
                  uint64_t v181 = (v180 & 0x7FFFFFFFFFFFFFF8) + 8;
                  if ((v180 | 7) != 0x17) {
                    uint64_t v181 = v180 | 7;
                  }
                  if (v180 >= 0x17) {
                    size_t v179 = v181 + 1;
                  }
                  else {
                    size_t v179 = 23;
                  }
                }
                unint64_t v182 = (std::string *)operator new(v179);
                long long v183 = v182;
                if (!size || (memmove(v182, v175, size), size != 22)) {
                  operator delete(v175);
                }
                v229.__r_.__value_.__r.__words[0] = (std::string::size_type)v183;
                v229.__r_.__value_.__r.__words[2] = v179 | 0x8000000000000000;
              }
              else
              {
                size_t size = v229.__r_.__value_.__l.__size_;
                long long v183 = (std::string *)v229.__r_.__value_.__r.__words[0];
              }
              v229.__r_.__value_.__l.__size_ = size + 1;
            }
            else
            {
              if (HIBYTE(v229.__r_.__value_.__r.__words[2]) == 22)
              {
                unint64_t v175 = &v229;
                size_t size = 22;
                goto LABEL_252;
              }
              size_t size = HIBYTE(v229.__r_.__value_.__r.__words[2]);
              *((unsigned char *)&v229.__r_.__value_.__s + 23) = (*((unsigned char *)&v229.__r_.__value_.__s + 23) + 1) & 0x7F;
              long long v183 = &v229;
            }
            std::string::size_type v184 = (char *)v183 + size;
            *std::string::size_type v184 = v166;
            v184[1] = 0;
            goto LABEL_221;
          }
          LOBYTE(__str.__imp_.__imp_) = 0;
          __str.__vftable = 0;
          snprintf((char *)&__str, 9uLL, "<U+%.4X>", v166);
          size_t v167 = strlen((const char *)&__str);
          size_t v168 = v167;
          if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v169 = 22;
          }
          else {
            std::string::size_type v169 = (v229.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          }
          if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v170 = HIBYTE(v229.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v170 = v229.__r_.__value_.__l.__size_;
          }
          if (v169 - v170 >= v167)
          {
            if (!v167) {
              goto LABEL_221;
            }
            if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v177 = &v229;
            }
            else {
              char v177 = (std::string *)v229.__r_.__value_.__r.__words[0];
            }
            memmove((char *)v177 + v170, &__str, v167);
            size_t v178 = v170 + v168;
            if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0) {
              v229.__r_.__value_.__l.__size_ = v170 + v168;
            }
            else {
              *((unsigned char *)&v229.__r_.__value_.__s + 23) = v178 & 0x7F;
            }
            long long v165 = (char *)v177 + v178;
          }
          else
          {
            unint64_t v171 = v170 + v167;
            if (0x7FFFFFFFFFFFFFF6 - v169 < v170 + v167 - v169) {
              sub_215731CD8();
            }
            if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v172 = &v229;
            }
            else {
              uint64_t v172 = (std::string *)v229.__r_.__value_.__r.__words[0];
            }
            size_t v173 = 0x7FFFFFFFFFFFFFF7;
            if (v169 < 0x3FFFFFFFFFFFFFF3)
            {
              unint64_t v174 = 2 * v169;
              if (v171 > 2 * v169) {
                unint64_t v174 = v170 + v167;
              }
              if (v174 >= 0x17)
              {
                unint64_t v185 = (v174 & 0xFFFFFFFFFFFFFFF8) + 8;
                uint64_t v186 = v174 | 7;
                if (v186 == 23) {
                  uint64_t v186 = v185;
                }
                size_t v173 = v186 + 1;
              }
              else
              {
                size_t v173 = 23;
              }
            }
            uint64_t v187 = operator new(v173);
            std::string::size_type v188 = (std::string::size_type)v187;
            if (v170) {
              memmove(v187, v172, v170);
            }
            memcpy((void *)(v188 + v170), &__str, v168);
            if (v169 != 22) {
              operator delete(v172);
            }
            v229.__r_.__value_.__l.__size_ = v170 + v168;
            v229.__r_.__value_.__r.__words[2] = v173 | 0x8000000000000000;
            v229.__r_.__value_.__r.__words[0] = v188;
            long long v165 = (unsigned char *)(v188 + v171);
          }
          *long long v165 = 0;
          uint64_t v163 = v224;
LABEL_221:
          if (++v164 == v163)
          {
LABEL_335:
            std::string v228 = *(std::string *)(a1 + 72);
            *((unsigned char *)&v226.__r_.__value_.__s + 23) = 5;
            strcpy((char *)&v226, "value");
            sub_215DE9798(&__p, a1, 0, (const void **)&v226.__r_.__value_.__l.__data_);
            sub_215D36EC8(101, (uint64_t *)&v228, (uint64_t)&__p, (uint64_t)&__str);
            *((unsigned char *)a2 + 88) = 1;
            if (*((unsigned char *)a2 + 128))
            {
              exceptiounint64_t n = __cxa_allocate_exception(0x28uLL);
              unint64_t v216 = (void *)sub_215D3BA88((uint64_t)exception, (uint64_t)&__str);
              __cxa_throw(v216, (struct type_info *)&unk_26C684770, (void (*)(void *))sub_215D37928);
            }
            goto LABEL_338;
          }
        }
      default:
        int v190 = *(unsigned __int8 **)(a1 + 96);
        char v189 = *(unsigned __int8 **)(a1 + 104);
        memset(&v229, 0, sizeof(v229));
        if (v190 == v189) {
          goto LABEL_337;
        }
        uint64_t v225 = v189;
        break;
    }
    break;
  }
  do
  {
    unsigned int v194 = *v190;
    if (v194 > 0x1F)
    {
      if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
      {
        size_t v191 = (v229.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v229.__r_.__value_.__l.__size_ != v191)
        {
          size_t v191 = v229.__r_.__value_.__l.__size_;
          uint64_t v192 = (std::string *)v229.__r_.__value_.__r.__words[0];
LABEL_324:
          v229.__r_.__value_.__l.__size_ = v191 + 1;
          goto LABEL_279;
        }
        if ((v229.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
          sub_215731CD8();
        }
        unint64_t v203 = (std::string *)v229.__r_.__value_.__r.__words[0];
        size_t v207 = 0x7FFFFFFFFFFFFFF7;
        if (v191 >= 0x3FFFFFFFFFFFFFF3)
        {
LABEL_319:
          unint64_t v210 = (std::string *)operator new(v207);
          uint64_t v192 = v210;
          if (!v191 || (memmove(v210, v203, v191), v191 != 22)) {
            operator delete(v203);
          }
          v229.__r_.__value_.__r.__words[0] = (std::string::size_type)v192;
          v229.__r_.__value_.__r.__words[2] = v207 | 0x8000000000000000;
          goto LABEL_324;
        }
      }
      else
      {
        if (HIBYTE(v229.__r_.__value_.__r.__words[2]) != 22)
        {
          size_t v191 = HIBYTE(v229.__r_.__value_.__r.__words[2]);
          *((unsigned char *)&v229.__r_.__value_.__s + 23) = (*((unsigned char *)&v229.__r_.__value_.__s + 23) + 1) & 0x7F;
          uint64_t v192 = &v229;
LABEL_279:
          size_t v193 = (char *)v192 + v191;
          *size_t v193 = v194;
          v193[1] = 0;
          goto LABEL_280;
        }
        unint64_t v203 = &v229;
        size_t v191 = 22;
      }
      if (v191 + 1 > 2 * v191) {
        unint64_t v208 = v191 + 1;
      }
      else {
        unint64_t v208 = 2 * v191;
      }
      uint64_t v209 = (v208 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v208 | 7) != 0x17) {
        uint64_t v209 = v208 | 7;
      }
      if (v208 >= 0x17) {
        size_t v207 = v209 + 1;
      }
      else {
        size_t v207 = 23;
      }
      goto LABEL_319;
    }
    LOBYTE(__str.__imp_.__imp_) = 0;
    __str.__vftable = 0;
    snprintf((char *)&__str, 9uLL, "<U+%.4X>", v194);
    size_t v195 = strlen((const char *)&__str);
    size_t v196 = v195;
    if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v197 = 22;
    }
    else {
      std::string::size_type v197 = (v229.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v198 = HIBYTE(v229.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v198 = v229.__r_.__value_.__l.__size_;
    }
    if (v197 - v198 >= v195)
    {
      if (!v195) {
        goto LABEL_280;
      }
      if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v204 = &v229;
      }
      else {
        size_t v204 = (std::string *)v229.__r_.__value_.__r.__words[0];
      }
      memmove((char *)v204 + v198, &__str, v195);
      size_t v205 = v198 + v196;
      if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0) {
        v229.__r_.__value_.__l.__size_ = v198 + v196;
      }
      else {
        *((unsigned char *)&v229.__r_.__value_.__s + 23) = v205 & 0x7F;
      }
      uint64_t v206 = (char *)v204 + v205;
    }
    else
    {
      unint64_t v199 = v198 + v195;
      if (0x7FFFFFFFFFFFFFF6 - v197 < v198 + v195 - v197) {
        sub_215731CD8();
      }
      if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v200 = &v229;
      }
      else {
        size_t v200 = (std::string *)v229.__r_.__value_.__r.__words[0];
      }
      size_t v201 = 0x7FFFFFFFFFFFFFF7;
      if (v197 < 0x3FFFFFFFFFFFFFF3)
      {
        unint64_t v202 = 2 * v197;
        if (v199 > 2 * v197) {
          unint64_t v202 = v198 + v195;
        }
        if (v202 >= 0x17)
        {
          unint64_t v211 = (v202 & 0xFFFFFFFFFFFFFFF8) + 8;
          uint64_t v212 = v202 | 7;
          if (v212 == 23) {
            uint64_t v212 = v211;
          }
          size_t v201 = v212 + 1;
        }
        else
        {
          size_t v201 = 23;
        }
      }
      char v213 = operator new(v201);
      std::string::size_type v214 = (std::string::size_type)v213;
      if (v198) {
        memmove(v213, v200, v198);
      }
      memcpy((void *)(v214 + v198), &__str, v196);
      if (v197 != 22) {
        operator delete(v200);
      }
      v229.__r_.__value_.__l.__size_ = v198 + v196;
      v229.__r_.__value_.__r.__words[2] = v201 | 0x8000000000000000;
      v229.__r_.__value_.__r.__words[0] = v214;
      uint64_t v206 = (unsigned char *)(v214 + v199);
    }
    *uint64_t v206 = 0;
    char v189 = v225;
LABEL_280:
    ++v190;
  }
  while (v190 != v189);
LABEL_337:
  std::string v228 = *(std::string *)(a1 + 72);
  *((unsigned char *)&v226.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v226, "value");
  sub_215DE9798(&__p, a1, 0x10u, (const void **)&v226.__r_.__value_.__l.__data_);
  sub_215D36EC8(101, (uint64_t *)&v228, (uint64_t)&__p, (uint64_t)&__str);
  *((unsigned char *)a2 + 88) = 1;
  if (*((unsigned char *)a2 + 128))
  {
    size_t v218 = __cxa_allocate_exception(0x28uLL);
    int v219 = (void *)sub_215D3BA88((uint64_t)v218, (uint64_t)&__str);
    __cxa_throw(v219, (struct type_info *)&unk_26C684770, (void (*)(void *))sub_215D37928);
  }
LABEL_338:
  __str.__vftable = (std::runtime_error_vtbl *)&unk_26C684698;
  std::runtime_error::~runtime_error(&v234);
  std::exception::~exception(&__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v217 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_340;
  }
LABEL_341:
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v229.__r_.__value_.__l.__data_);
  }
LABEL_343:
  if (v230) {
    operator delete(v230);
  }
}

void sub_215DE941C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41)
{
  sub_215D37928((std::runtime_error *)(v41 - 136));
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a40 < 0)
  {
    operator delete(a35);
    uint64_t v43 = a41;
    if (a41)
    {
LABEL_10:
      operator delete(v43);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v43 = a41;
    if (a41) {
      goto LABEL_10;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_215DE9644(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 88) = 1;
  if (*(unsigned char *)(result + 128))
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x28uLL);
    uint64_t v4 = (void *)sub_215D3BA88((uint64_t)exception, a2);
    __cxa_throw(v4, (struct type_info *)&unk_26C684770, (void (*)(void *))sub_215D37928);
  }
  return result;
}

void sub_215DE96A0(std::string *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
    {
      unsigned int v6 = *v4;
      if (v6 > 0x1F)
      {
        std::string::push_back(this, v6);
      }
      else
      {
        char v9 = 0;
        *(void *)std::runtime_error __str = 0;
        snprintf(__str, 9uLL, "<U+%.4X>", v6);
        size_t v7 = strlen(__str);
        std::string::append(this, __str, v7);
      }
      ++v4;
    }
    while (v4 != a3);
  }
}

void sub_215DE9778(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DE9798(std::string *this, uint64_t a2, unsigned int a3, const void **a4)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  *((unsigned char *)&this->__r_.__value_.__s + 23) = 13;
  strcpy((char *)this, "syntax error ");
  int v7 = *((char *)a4 + 23);
  if (v7 >= 0) {
    size_t v8 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v8 = (size_t)a4[1];
  }
  if (v8)
  {
    unint64_t v9 = v8 + 14;
    if (v8 + 14 > 0x7FFFFFFFFFFFFFF7) {
      sub_215731CD8();
    }
    if (v9 > 0x16)
    {
      uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v12 = v9 | 7;
      }
      uint64_t v13 = v12 + 1;
      uint64_t v11 = (char *)operator new(v12 + 1);
      v68.__r_.__value_.__l.__size_ = v8 + 14;
      v68.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    }
    else
    {
      memset(&v68, 0, sizeof(v68));
      uint64_t v11 = (char *)&v68;
      *((unsigned char *)&v68.__r_.__value_.__s + 23) = v8 + 14;
    }
    qmemcpy(v11, "while parsing ", 14);
    uint64_t v14 = v11 + 14;
    if (v7 >= 0) {
      uint64_t v15 = a4;
    }
    else {
      uint64_t v15 = *a4;
    }
    memmove(v11 + 14, v15, v8);
    v14[v8] = 0;
    unint64_t v16 = std::string::append(&v68, " ", 1uLL);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    int64_t v70 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (v70 >= 0) {
      uint64_t v18 = __p;
    }
    else {
      uint64_t v18 = (void **)__p[0];
    }
    if (v70 >= 0) {
      std::string::size_type v19 = HIBYTE(v70);
    }
    else {
      std::string::size_type v19 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v18, v19);
    if (SHIBYTE(v70) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_22;
      }
    }
    else if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v68.__r_.__value_.__l.__data_);
  }
LABEL_22:
  std::string::append(this, "- ", 2uLL);
  uint64_t v20 = *(int *)(a2 + 32);
  if (v20 != 14)
  {
    if (v20 > 0x10) {
      int v25 = "unknown token";
    }
    else {
      int v25 = (&off_26425B0C8)[v20];
    }
    size_t v26 = strlen(v25);
    if (v26 > 0x7FFFFFFFFFFFFFF7) {
      sub_215731CD8();
    }
    std::string::size_type v27 = v26;
    if (v26 >= 0x17)
    {
      uint64_t v40 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17) {
        uint64_t v40 = v26 | 7;
      }
      uint64_t v41 = v40 + 1;
      std::string v28 = operator new(v40 + 1);
      v68.__r_.__value_.__l.__size_ = v27;
      v68.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
    }
    else
    {
      *((unsigned char *)&v68.__r_.__value_.__s + 23) = v26;
      std::string v28 = &v68;
      if (!v26) {
        goto LABEL_49;
      }
    }
    memcpy(v28, v25, v27);
LABEL_49:
    *((unsigned char *)v28 + v27) = 0;
    unint64_t v42 = std::string::insert(&v68, 0, "unexpected ", 0xBuLL);
    long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    int64_t v70 = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    if (v70 >= 0) {
      uint64_t v44 = __p;
    }
    else {
      uint64_t v44 = (void **)__p[0];
    }
    if (v70 >= 0) {
      std::string::size_type v45 = HIBYTE(v70);
    }
    else {
      std::string::size_type v45 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v44, v45);
    if (SHIBYTE(v70) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_87;
      }
    }
    else if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_87;
    }
    uint64_t v54 = (void *)v68.__r_.__value_.__r.__words[0];
    goto LABEL_86;
  }
  int v21 = *(const char **)(a2 + 144);
  size_t v22 = strlen(v21);
  if (v22 > 0x7FFFFFFFFFFFFFF7) {
    sub_215731CD8();
  }
  std::string::size_type v23 = v22;
  if (v22 >= 0x17)
  {
    uint64_t v29 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17) {
      uint64_t v29 = v22 | 7;
    }
    uint64_t v30 = v29 + 1;
    p_dsint t = (std::string *)operator new(v29 + 1);
    __dst.__r_.__value_.__l.__size_ = v23;
    __dst.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_37;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v22;
  p_dsint t = &__dst;
  if (v22) {
LABEL_37:
  }
    memmove(p_dst, v21, v23);
  p_dst->__r_.__value_.__s.__data_[v23] = 0;
  int v31 = std::string::append(&__dst, "; last read: '", 0xEuLL);
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v67.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  unint64_t v33 = *(unsigned __int8 **)(a2 + 96);
  uint64_t v34 = *(unsigned __int8 **)(a2 + 104);
  memset(&v65, 0, sizeof(v65));
  if (v33 == v34)
  {
    std::string::size_type size = 0;
    std::string::size_type v39 = 0;
    unsigned int v37 = 0;
  }
  else
  {
    do
    {
      unsigned int v35 = *v33;
      if (v35 > 0x1F)
      {
        std::string::push_back(&v65, v35);
      }
      else
      {
        char v72 = 0;
        *(void *)std::runtime_error __str = 0;
        snprintf(__str, 9uLL, "<U+%.4X>", v35);
        size_t v36 = strlen(__str);
        std::string::append(&v65, __str, v36);
      }
      ++v33;
    }
    while (v33 != v34);
    unsigned int v37 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v65.__r_.__value_.__l.__size_;
    std::string::size_type v39 = v65.__r_.__value_.__r.__words[0];
  }
  if ((v37 & 0x80u) == 0) {
    long long v46 = &v65;
  }
  else {
    long long v46 = (std::string *)v39;
  }
  if ((v37 & 0x80u) == 0) {
    std::string::size_type v47 = v37;
  }
  else {
    std::string::size_type v47 = size;
  }
  unint64_t v48 = std::string::append(&v67, (const std::string::value_type *)v46, v47);
  long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v68.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  int v50 = std::string::append(&v68, "'", 1uLL);
  long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  int64_t v70 = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  if (v70 >= 0) {
    char v52 = __p;
  }
  else {
    char v52 = (void **)__p[0];
  }
  if (v70 >= 0) {
    std::string::size_type v53 = HIBYTE(v70);
  }
  else {
    std::string::size_type v53 = (std::string::size_type)__p[1];
  }
  std::string::append(this, (const std::string::value_type *)v52, v53);
  if (SHIBYTE(v70) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_75:
      if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_76;
      }
      goto LABEL_83;
    }
  }
  else if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_75;
  }
  operator delete(v68.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_76:
    if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_77;
    }
LABEL_84:
    operator delete(v67.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_87;
    }
    goto LABEL_85;
  }
LABEL_83:
  operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_84;
  }
LABEL_77:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_87;
  }
LABEL_85:
  uint64_t v54 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_86:
  operator delete(v54);
LABEL_87:
  if (!a3) {
    return;
  }
  if (a3 > 0x10) {
    uint64_t v55 = "unknown token";
  }
  else {
    uint64_t v55 = (&off_26425B150)[a3 - 1];
  }
  size_t v56 = strlen(v55);
  if (v56 > 0x7FFFFFFFFFFFFFF7) {
    sub_215731CD8();
  }
  std::string::size_type v57 = v56;
  if (v56 >= 0x17)
  {
    uint64_t v59 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v56 | 7) != 0x17) {
      uint64_t v59 = v56 | 7;
    }
    uint64_t v60 = v59 + 1;
    unsigned __int8 v58 = operator new(v59 + 1);
    v68.__r_.__value_.__l.__size_ = v57;
    v68.__r_.__value_.__r.__words[2] = v60 | 0x8000000000000000;
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
    goto LABEL_98;
  }
  *((unsigned char *)&v68.__r_.__value_.__s + 23) = v56;
  unsigned __int8 v58 = &v68;
  if (v56) {
LABEL_98:
  }
    memcpy(v58, v55, v57);
  *((unsigned char *)v58 + v57) = 0;
  int v61 = std::string::insert(&v68, 0, "; expected ", 0xBuLL);
  long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  int64_t v70 = v61->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  if (v70 >= 0) {
    uint64_t v63 = __p;
  }
  else {
    uint64_t v63 = (void **)__p[0];
  }
  if (v70 >= 0) {
    std::string::size_type v64 = HIBYTE(v70);
  }
  else {
    std::string::size_type v64 = (std::string::size_type)__p[1];
  }
  std::string::append(this, (const std::string::value_type *)v63, v64);
  if ((SHIBYTE(v70) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_109:
    operator delete(v68.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_109;
  }
}

void sub_215DE9E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
  {
    operator delete(__p);
    if (a35 < 0)
    {
LABEL_5:
      operator delete(a30);
      if (a16 < 0)
      {
LABEL_8:
        operator delete(a11);
        if ((a28 & 0x80000000) == 0) {
          goto LABEL_9;
        }
        goto LABEL_12;
      }
LABEL_11:
      if ((a28 & 0x80000000) == 0)
      {
LABEL_9:
        if ((a22 & 0x80000000) == 0)
        {
LABEL_14:
          if (*(char *)(v42 + 23) < 0) {
            operator delete(*(void **)v42);
          }
          _Unwind_Resume(a1);
        }
LABEL_13:
        operator delete(a17);
        goto LABEL_14;
      }
LABEL_12:
      operator delete(a23);
      if ((a22 & 0x80000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  else if (a35 < 0)
  {
    goto LABEL_5;
  }
  if (a16 < 0) {
    goto LABEL_8;
  }
  goto LABEL_11;
}

uint64_t sub_215DE9F54(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 4std::__fs::filesystem::__rename(__from, __to, 0) = 1;
  if (*(unsigned char *)(result + 41))
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x28uLL);
    uint64_t v4 = (void *)sub_215D3BA88((uint64_t)exception, a2);
    __cxa_throw(v4, (struct type_info *)&unk_26C684770, (void (*)(void *))sub_215D37928);
  }
  return result;
}

void sub_215DE9FB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(void *)(v2 - 8))
  {
    LODWORD(v41.__r_.__value_.__l.__data_) = ((unint64_t)(v2 - *(void *)(a1 + 8)) >> 3) - 1;
    v40.__r_.__value_.__s.__data_[0] = 1;
    uint64_t v3 = *(void *)(a1 + 120);
    if (!v3) {
      sub_21573D7DC();
    }
    if (((*(uint64_t (**)(uint64_t, std::string *, std::string *))(*(void *)v3 + 48))(v3, &v41, &v40) & 1) == 0)
    {
      sub_215D2F4F0((uint64_t)v38, (unsigned __int8 *)(a1 + 136));
      uint64_t v4 = *(unsigned __int8 **)(*(void *)(a1 + 16) - 8);
      int v5 = *v4;
      unsigned __int8 *v4 = v38[0];
      v38[0] = v5;
      unsigned int v6 = (void **)*((void *)v4 + 1);
      *((void *)v4 + 1) = v39;
      std::string::size_type v39 = v6;
      sub_215CEB204(&v39, v5);
    }
  }
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v7 - 8;
  --*(void *)(a1 + 40);
  if (v8 != v7 - 8)
  {
    unint64_t v9 = *(unsigned __int8 **)(v7 - 16);
    if (v9)
    {
      int v10 = *v9;
      if ((v10 - 1) <= 1)
      {
        if (v10 == 2)
        {
          uint64_t v12 = 0;
          uint64_t v11 = (void ***)**((void **)v9 + 1);
          goto LABEL_12;
        }
        if (v10 == 1)
        {
          uint64_t v11 = 0;
          uint64_t v12 = **((void **)v9 + 1);
LABEL_12:
          unint64_t v13 = 0x8000000000000000;
          goto LABEL_21;
        }
        uint64_t v11 = 0;
        unint64_t v13 = 0;
        uint64_t v12 = 0;
        while (1)
        {
LABEL_21:
          if (v10 == 1)
          {
            if (v12 == *(void *)(*((void *)v9 + 1) + 8)) {
              return;
            }
            uint64_t v14 = (void ***)(v12 + 24);
          }
          else if (v10 == 2)
          {
            uint64_t v14 = v11;
            if (v11 == *(void ****)(*((void *)v9 + 1) + 8)) {
              return;
            }
          }
          else
          {
            if (v13 == 1) {
              return;
            }
            uint64_t v14 = (void ***)v9;
            if (v13)
            {
              exceptiounint64_t n = __cxa_allocate_exception(0x20uLL);
              sub_215732BF4(&v41, "cannot get value");
              sub_215D3113C(214, (uint64_t)&v41, (uint64_t)exception);
              __cxa_throw(exception, (struct type_info *)&unk_26C684708, (void (*)(void *))sub_215D312D0);
            }
          }
          if (*(unsigned char *)v14 == 9) {
            break;
          }
          if (v10 == 1)
          {
            v12 += 40;
          }
          else if (v10 == 2)
          {
            v11 += 2;
          }
          else
          {
            ++v13;
          }
        }
        if (v10 != 2)
        {
          if (v10 == 1)
          {
            uint64_t v15 = *((void *)v9 + 1);
            uint64_t v16 = *(void *)(v15 + 8);
            for (uint64_t i = v12 + 40; ; i += 40)
            {
              uint64_t v18 = (void **)(i - 40);
              std::string::size_type v19 = (void ***)(i - 8);
              if (i == v16) {
                break;
              }
              sub_215CEB204(v19, *(unsigned __int8 *)(i - 16));
              if (*(char *)(i - 17) < 0) {
                operator delete(*v18);
              }
              if (*(char *)(i + 23) < 0)
              {
                sub_215738B0C((unsigned char *)(i - 40), *(void **)i, *(void *)(i + 8));
              }
              else
              {
                *(_OWORD *)uint64_t v18 = *(_OWORD *)i;
                *(void *)(i - 24) = *(void *)(i + 16);
              }
              *(unsigned char *)(i - 16) = *(unsigned char *)(i + 24);
              *(void *)(i - 8) = *(void *)(i + 32);
              *(unsigned char *)(i + 24) = 0;
              *(void *)(i + 32) = 0;
              uint64_t v16 = *(void *)(v15 + 8);
            }
            sub_215CEB204(v19, *(unsigned __int8 *)(i - 16));
            if (*(char *)(i - 17) < 0) {
              operator delete(*v18);
            }
            *(void *)(v15 + 8) = v18;
            return;
          }
          if ((v10 - 3) > 5)
          {
            uint64_t v34 = __cxa_allocate_exception(0x20uLL);
            unsigned int v35 = (char *)v9;
            size_t v36 = v34;
            unsigned int v37 = (char *)sub_215D2DC9C(v35);
            sub_215732BF4(&v40, v37);
            sub_215AC8CC8("cannot use erase() with ", &v40, &v41);
            sub_215D2DB00(307, (uint64_t)&v41, (uint64_t)v36);
            __cxa_throw(v36, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
          }
          if (v13)
          {
            unint64_t v33 = __cxa_allocate_exception(0x20uLL);
            sub_215732BF4(&v41, "iterator out of range");
            sub_215D3113C(205, (uint64_t)&v41, (uint64_t)v33);
            __cxa_throw(v33, (struct type_info *)&unk_26C684708, (void (*)(void *))sub_215D312D0);
          }
          if (v10 == 8)
          {
            uint64_t v29 = (void **)*((void *)v9 + 1);
            int v31 = *v29;
            if (*v29)
            {
              v29[1] = v31;
              uint64_t v30 = v31;
              goto LABEL_57;
            }
          }
          else
          {
            if (v10 != 3)
            {
LABEL_59:
              *unint64_t v9 = 0;
              return;
            }
            uint64_t v29 = (void **)*((void *)v9 + 1);
            if (*((char *)v29 + 23) < 0)
            {
              uint64_t v30 = *v29;
LABEL_57:
              operator delete(v30);
              uint64_t v29 = (void **)*((void *)v9 + 1);
            }
          }
          operator delete(v29);
          *((void *)v9 + 1) = 0;
          goto LABEL_59;
        }
        uint64_t v20 = *((void *)v9 + 1);
        int v21 = *(void ****)(v20 + 8);
        size_t v22 = v11 + 2;
        if (v11 + 2 != v21)
        {
          do
          {
            char v23 = *(unsigned char *)v22;
            unint64_t v24 = v22[1];
            *(unsigned char *)size_t v22 = 0;
            v22[1] = 0;
            int v25 = *((unsigned __int8 *)v22 - 16);
            *((unsigned char *)v22 - 16) = v23;
            v41.__r_.__value_.__s.__data_[0] = v25;
            std::string::size_type v26 = (std::string::size_type)*(v22 - 1);
            *(v22 - 1) = v24;
            v41.__r_.__value_.__l.__size_ = v26;
            sub_215CEB204((void ***)&v41.__r_.__value_.__l.__size_, v25);
            v22 += 2;
          }
          while (v22 != v21);
          int v21 = *(void ****)(v20 + 8);
          uint64_t v11 = v22 - 2;
        }
        if (v21 != v11)
        {
          std::string::size_type v27 = v21 - 1;
          do
          {
            std::string v28 = v27 - 1;
            sub_215CEB204(v27, *((unsigned __int8 *)v27 - 8));
            v27 -= 2;
          }
          while (v28 != v11);
        }
        *(void *)(v20 + 8) = v11;
      }
    }
  }
}

void sub_215DEA488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (v23) {
    __cxa_free_exception(v22);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DEA50C(uint64_t a1, uint64_t a2)
{
  v22[0] = 3;
  uint64_t v4 = (void **)operator new(0x18uLL);
  int v5 = v4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_215738B0C(v4, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
    void v4[2] = *(void **)(a2 + 16);
  }
  char v23 = v5;
  *(_DWORD *)int v25 = (*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3;
  char v24 = 4;
  uint64_t v6 = *(void *)(a1 + 120);
  if (!v6) {
    sub_21573D7DC();
  }
  char v7 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, char *, unsigned __int8 *))(*(void *)v6 + 48))(v6, v25, &v24, v22);
  unint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);
  if (v8 == v9 << 6)
  {
    if ((uint64_t)(v8 + 1) < 0) {
      sub_215D2CB08();
    }
    unint64_t v10 = v9 << 7;
    if (v10 <= (v8 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v8 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_215D39348(a1 + 56, v11);
    unint64_t v8 = *(void *)(a1 + 64);
  }
  *(void *)(a1 + 64) = v8 + 1;
  uint64_t v12 = *(void *)(a1 + 56);
  unint64_t v13 = v8 >> 6;
  uint64_t v14 = 1 << v8;
  uint64_t v15 = 8 * v13;
  if (v7)
  {
    *(void *)(v12 + v15) |= v14;
    if (*(void *)(*(void *)(a1 + 16) - 8))
    {
      sub_215D2F4F0((uint64_t)v20, (unsigned __int8 *)(a1 + 136));
      uint64_t v16 = *(uint64_t **)(*(void *)(*(void *)(a1 + 16) - 8) + 8);
      v25[0] = 0;
      std::string::size_type v26 = 0;
      long long v17 = sub_215D2F1B8(v16, a2, v25);
      sub_215CEB204(&v26, v25[0]);
      int v18 = v17[24];
      v17 += 24;
      char *v17 = v20[0];
      v20[0] = v18;
      std::string::size_type v19 = (void **)*((void *)v17 + 1);
      *((void *)v17 + 1) = v21;
      int v21 = v19;
      *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v17;
      sub_215CEB204(&v21, v18);
    }
  }
  else
  {
    *(void *)(v12 + v15) &= ~v14;
  }
  sub_215CEB204(&v23, v22[0]);
}

void sub_215DEA6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, void **a11, unsigned __int8 a12, uint64_t a13, uint64_t a14, unsigned __int8 a15)
{
  sub_215CEB204(v16, a15);
  sub_215CEB204(&a11, a10);
  sub_215CEB204(v15, a12);
  _Unwind_Resume(a1);
}

void sub_215DEA72C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_215DEA740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  sub_215CEB204(v12, a12);
  _Unwind_Resume(a1);
}

uint64_t sub_215DEA758(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 88) = 1;
  if (*(unsigned char *)(result + 128))
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v4 = (void *)sub_215D3ACB0((uint64_t)exception, a2);
    __cxa_throw(v4, (struct type_info *)&unk_26C6846F0, (void (*)(void *))sub_215D3A384);
  }
  return result;
}

uint64_t sub_215DEA7B4(unsigned __int8 **a1, unsigned __int8 a2)
{
  if (((*(void *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((unsigned char *)a1 + 40) - 1)) & 1) == 0) {
    return 0;
  }
  v25[0] = a2;
  switch(a2)
  {
    case 1u:
    case 2u:
      int v5 = operator new(0x18uLL);
      v5[1] = 0;
      v5[2] = 0;
      *int v5 = 0;
      goto LABEL_9;
    case 3u:
      int v5 = operator new(0x18uLL);
      *((unsigned char *)v5 + 23) = 0;
      *(unsigned char *)int v5 = 0;
      goto LABEL_9;
    case 4u:
      LOBYTE(v26) = 0;
      break;
    case 8u:
      int v5 = operator new(0x20uLL);
      v5[1] = 0;
      v5[2] = 0;
      *int v5 = 0;
      *((_WORD *)v5 + 12) = 0;
LABEL_9:
      std::string::size_type v26 = (void **)v5;
      break;
    default:
      std::string::size_type v26 = 0;
      break;
  }
  uint64_t v6 = a1[2];
  if (a1[1] == v6)
  {
    unint64_t v11 = v26;
    v25[0] = 0;
    std::string::size_type v26 = 0;
    uint64_t v12 = (uint64_t)*a1;
    int v13 = **a1;
    *(unsigned char *)uint64_t v12 = a2;
    char v23 = v13;
    uint64_t v14 = *(void ***)(v12 + 8);
    *(void *)(v12 + 8) = v11;
    char v24 = v14;
    sub_215CEB204(&v24, v13);
    uint64_t v15 = (uint64_t)*a1;
  }
  else
  {
    uint64_t v7 = *((void *)v6 - 1);
    if (!v7) {
      goto LABEL_18;
    }
    if (*(unsigned char *)v7 == 2)
    {
      uint64_t v8 = *(void *)(v7 + 8);
      unint64_t v9 = *(void *)(v8 + 8);
      if (v9 >= *(void *)(v8 + 16))
      {
        unint64_t v10 = sub_215CEB95C((void **)v8, v25);
      }
      else
      {
        *(unsigned char *)unint64_t v9 = a2;
        *(void *)(v9 + 8) = v26;
        v25[0] = 0;
        std::string::size_type v26 = 0;
        unint64_t v10 = (char *)(v9 + 16);
      }
      *(void *)(v8 + 8) = v10;
      uint64_t v15 = *(void *)(*(void *)(*((void *)a1[2] - 1) + 8) + 8) - 16;
      goto LABEL_21;
    }
    unint64_t v16 = (unint64_t)(a1[8] - 1);
    unint64_t v17 = *(void *)&a1[7][(v16 >> 3) & 0x1FFFFFFFFFFFFFF8];
    a1[8] = (unsigned __int8 *)v16;
    if ((v17 >> v16))
    {
      int v18 = v26;
      v25[0] = 0;
      std::string::size_type v26 = 0;
      std::string::size_type v19 = a1[10];
      int v20 = *v19;
      *std::string::size_type v19 = a2;
      int v21 = (void **)*((void *)v19 + 1);
      *((void *)v19 + 1) = v18;
      size_t v22 = v21;
      sub_215CEB204(&v22, v20);
      uint64_t v15 = (uint64_t)a1[10];
    }
    else
    {
LABEL_18:
      uint64_t v15 = 0;
    }
  }
LABEL_21:
  sub_215CEB204(&v26, v25[0]);
  return v15;
}

void sub_215DEA9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CEB204(v13, a13);
  _Unwind_Resume(a1);
}

void sub_215DEAA08()
{
}

void sub_215DEAA20(unsigned __int8 **a1, unsigned __int8 a2)
{
  if ((*(void *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((unsigned char *)a1 + 40) - 1)))
  {
    v23[0] = 4;
    unint64_t v24 = a2;
    int v26 = (unint64_t)(a1[2] - a1[1]) >> 3;
    char v25 = 5;
    uint64_t v3 = a1[15];
    if (!v3) {
      sub_21573D7DC();
    }
    if (((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(void *)v3 + 48))(v3, &v26, &v25, v23) & 1) == 0)goto LABEL_13; {
    uint64_t v4 = a1[2];
    }
    if (a1[1] == v4)
    {
      unsigned __int8 v8 = v23[0];
      unint64_t v9 = (void ***)&v22;
      unint64_t v10 = (void **)v24;
      v23[0] = 0;
      unint64_t v24 = 0;
      uint64_t v11 = (uint64_t)*a1;
      int v12 = **a1;
      *(unsigned char *)uint64_t v11 = v8;
      char v21 = v12;
      uint64_t v13 = *(void *)(v11 + 8);
      *(void *)(v11 + 8) = v10;
      uint64_t v22 = v13;
    }
    else
    {
      uint64_t v5 = *((void *)v4 - 1);
      if (!v5) {
        goto LABEL_13;
      }
      if (*(unsigned char *)v5 == 2)
      {
        uint64_t v6 = *(void *)(v5 + 8);
        unint64_t v7 = *(void *)(v6 + 8);
        if (v7 >= *(void *)(v6 + 16))
        {
          *(void *)(v6 + 8) = sub_215CEB95C((void **)v6, v23);
        }
        else
        {
          *(unsigned char *)unint64_t v7 = v23[0];
          *(void *)(v7 + 8) = v24;
          v23[0] = 0;
          unint64_t v24 = 0;
          *(void *)(v6 + 8) = v7 + 16;
        }
        goto LABEL_13;
      }
      unint64_t v14 = (unint64_t)(a1[8] - 1);
      unint64_t v15 = *(void *)&a1[7][(v14 >> 3) & 0x1FFFFFFFFFFFFFF8];
      a1[8] = (unsigned __int8 *)v14;
      if (((v15 >> v14) & 1) == 0)
      {
LABEL_13:
        sub_215CEB204((void ***)&v24, v23[0]);
        return;
      }
      unsigned __int8 v16 = v23[0];
      unint64_t v9 = (void ***)&v20;
      unint64_t v17 = (void **)v24;
      v23[0] = 0;
      unint64_t v24 = 0;
      int v18 = a1[10];
      int v12 = *v18;
      *int v18 = v16;
      uint64_t v19 = *((void *)v18 + 1);
      *((void *)v18 + 1) = v17;
      uint64_t v20 = v19;
    }
    sub_215CEB204(v9, v12);
    goto LABEL_13;
  }
}

void sub_215DEABDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  sub_215CEB204(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_215DEABF4(uint64_t a1)
{
  sub_215CEB204((void ***)(a1 + 144), *(unsigned __int8 *)(a1 + 136));
  uint64_t v2 = *(void *)(a1 + 120);
  if (v2 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
    uint64_t v3 = *(void **)(a1 + 56);
    if (v3) {
LABEL_5:
    }
      operator delete(v3);
  }
  else
  {
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    }
    uint64_t v3 = *(void **)(a1 + 56);
    if (v3) {
      goto LABEL_5;
    }
  }
  uint64_t v4 = *(void **)(a1 + 32);
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 8);
  if (v5)
  {
    *(void *)(a1 + 16) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_215DEACB8(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 4std::__fs::filesystem::__rename(__from, __to, 0) = 1;
  if (*(unsigned char *)(result + 41))
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v4 = (void *)sub_215D3ACB0((uint64_t)exception, a2);
    __cxa_throw(v4, (struct type_info *)&unk_26C6846F0, (void (*)(void *))sub_215D3A384);
  }
  return result;
}

uint64_t sub_215DEAD14(unsigned __int8 **a1, unsigned __int8 a2)
{
  uint64_t v4 = a1[2];
  if (a1[1] == v4)
  {
    unint64_t v10 = 0;
    switch(a2)
    {
      case 1u:
      case 2u:
        unint64_t v10 = (void **)operator new(0x18uLL);
        v10[1] = 0;
        void v10[2] = 0;
        *unint64_t v10 = 0;
        break;
      case 3u:
        unint64_t v10 = (void **)operator new(0x18uLL);
        *((unsigned char *)v10 + 23) = 0;
        *(unsigned char *)unint64_t v10 = 0;
        break;
      case 4u:
        LOBYTE(v33[0]) = 0;
        unint64_t v10 = v33[0];
        break;
      case 8u:
        unint64_t v10 = (void **)operator new(0x20uLL);
        v10[1] = 0;
        void v10[2] = 0;
        *unint64_t v10 = 0;
        *((_WORD *)v10 + 12) = 0;
        break;
      default:
        break;
    }
    uint64_t v17 = (uint64_t)*a1;
    int v18 = **a1;
    *(unsigned char *)uint64_t v17 = a2;
    char v32 = v18;
    uint64_t v19 = *(void ***)(v17 + 8);
    *(void *)(v17 + 8) = v10;
    v33[0] = v19;
    sub_215CEB204(v33, v18);
    return (uint64_t)*a1;
  }
  else
  {
    uint64_t v5 = *((void *)v4 - 1);
    if (*(unsigned char *)v5 == 2)
    {
      uint64_t v6 = *(void ***)(v5 + 8);
      unint64_t v7 = (char *)v6[1];
      unsigned __int8 v8 = (char *)v6[2];
      if (v7 >= v8)
      {
        uint64_t v12 = (v7 - (unsigned char *)*v6) >> 4;
        if ((unint64_t)(v12 + 1) >> 60) {
          sub_215CEA45C();
        }
        uint64_t v13 = v8 - (unsigned char *)*v6;
        uint64_t v14 = v13 >> 3;
        if (v13 >> 3 <= (unint64_t)(v12 + 1)) {
          uint64_t v14 = v12 + 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        unsigned int v37 = v6 + 2;
        if (v15)
        {
          if (v15 >> 60) {
            sub_215738AD8();
          }
          unsigned __int8 v16 = (void **)operator new(16 * v15);
        }
        else
        {
          unsigned __int8 v16 = 0;
        }
        v33[1] = v16;
        uint64_t v34 = &v16[2 * v12];
        unsigned int v35 = v34;
        size_t v36 = &v16[2 * v15];
        sub_215DDDCD8(v34, a2);
        char v21 = v34;
        unint64_t v9 = v34 + 2;
        uint64_t v22 = (void ***)*v6;
        char v23 = (void ***)v6[1];
        if (v23 == *v6)
        {
          *uint64_t v6 = v34;
          v6[1] = v9;
          _OWORD v6[2] = v36;
          if (!v23) {
            goto LABEL_30;
          }
        }
        else
        {
          do
          {
            char v24 = *((unsigned char *)v23 - 16);
            v23 -= 2;
            *((unsigned char *)v21 - 16) = v24;
            v21 -= 2;
            v21[1] = v23[1];
            *(unsigned char *)char v23 = 0;
            v23[1] = 0;
          }
          while (v23 != v22);
          char v23 = (void ***)*v6;
          char v25 = (void ***)v6[1];
          *uint64_t v6 = v21;
          v6[1] = v9;
          _OWORD v6[2] = v36;
          if (v25 != v23)
          {
            int v26 = v25 - 1;
            do
            {
              std::string::size_type v27 = v26 - 1;
              sub_215CEB204(v26, *((unsigned __int8 *)v26 - 8));
              v26 -= 2;
            }
            while (v27 != v23);
          }
          if (!v23) {
            goto LABEL_30;
          }
        }
        operator delete(v23);
      }
      else
      {
        sub_215DDDCD8(v6[1], a2);
        unint64_t v9 = v7 + 16;
        v6[1] = v7 + 16;
      }
LABEL_30:
      v6[1] = v9;
      return *(void *)(*(void *)(*((void *)a1[2] - 1) + 8) + 8) - 16;
    }
    uint64_t v11 = 0;
    switch(a2)
    {
      case 1u:
      case 2u:
        uint64_t v11 = (void **)operator new(0x18uLL);
        v11[1] = 0;
        v11[2] = 0;
        char *v11 = 0;
        break;
      case 3u:
        uint64_t v11 = (void **)operator new(0x18uLL);
        *((unsigned char *)v11 + 23) = 0;
        *(unsigned char *)uint64_t v11 = 0;
        break;
      case 4u:
        LOBYTE(v31) = 0;
        uint64_t v11 = v31;
        break;
      case 8u:
        uint64_t v11 = (void **)operator new(0x20uLL);
        v11[1] = 0;
        v11[2] = 0;
        char *v11 = 0;
        *((_WORD *)v11 + 12) = 0;
        break;
      default:
        break;
    }
    std::string v28 = a1[4];
    int v29 = *v28;
    *std::string v28 = a2;
    uint64_t v30 = (void **)*((void *)v28 + 1);
    *((void *)v28 + 1) = v11;
    int v31 = v30;
    sub_215CEB204(&v31, v29);
    return (uint64_t)a1[4];
  }
}

void sub_215DEB048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_215D32370((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DEB0A4(unsigned __int8 **a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[2];
  if (a1[1] == v2)
  {
    unint64_t v9 = (void ***)&v34;
    uint64_t v10 = *a2;
    uint64_t v11 = (uint64_t)*a1;
    int v12 = **a1;
    *(unsigned char *)uint64_t v11 = 4;
    char v33 = v12;
    uint64_t v13 = *(void *)(v11 + 8);
    *(void *)(v11 + 8) = v10;
    uint64_t v34 = v13;
LABEL_7:
    sub_215CEB204(v9, v12);
    return;
  }
  uint64_t v3 = *((void *)v2 - 1);
  if (*(unsigned char *)v3 != 2)
  {
    unint64_t v9 = (void ***)&v32;
    uint64_t v14 = *a2;
    unint64_t v15 = a1[4];
    int v12 = *v15;
    *unint64_t v15 = 4;
    uint64_t v16 = *((void *)v15 + 1);
    *((void *)v15 + 1) = v14;
    uint64_t v32 = v16;
    goto LABEL_7;
  }
  uint64_t v4 = *(char ***)(v3 + 8);
  uint64_t v6 = (void ***)v4[1];
  unint64_t v5 = (unint64_t)v4[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v17 = (void ***)*v4;
    uint64_t v18 = ((char *)v6 - *v4) >> 4;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 60) {
      sub_215CEA45C();
    }
    uint64_t v20 = v5 - (void)v17;
    if (v20 >> 3 > v19) {
      unint64_t v19 = v20 >> 3;
    }
    BOOL v21 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
    if (!v21) {
      unint64_t v22 = v19;
    }
    if (v22 >> 60) {
      sub_215738AD8();
    }
    uint64_t v23 = *a2;
    uint64_t v24 = 16 * v22;
    char v25 = (char *)operator new(16 * v22);
    int v26 = &v25[16 * v18];
    std::string::size_type v27 = &v25[v24];
    *int v26 = 4;
    *((void *)v26 + 1) = v23;
    unsigned __int8 v8 = v26 + 16;
    if (v6 == v17)
    {
      unsigned __int8 *v4 = v26;
      v4[1] = v8;
      void v4[2] = v27;
      if (!v6) {
        goto LABEL_21;
      }
    }
    else
    {
      do
      {
        char v28 = *((unsigned char *)v6 - 16);
        v6 -= 2;
        *(v26 - 16) = v28;
        v26 -= 16;
        *((void *)v26 + 1) = v6[1];
        *(unsigned char *)uint64_t v6 = 0;
        v6[1] = 0;
      }
      while (v6 != v17);
      uint64_t v6 = (void ***)*v4;
      int v29 = (void ***)v4[1];
      unsigned __int8 *v4 = v26;
      v4[1] = v8;
      void v4[2] = v27;
      if (v29 != v6)
      {
        uint64_t v30 = v29 - 1;
        do
        {
          int v31 = v30 - 1;
          sub_215CEB204(v30, *((unsigned __int8 *)v30 - 8));
          v30 -= 2;
        }
        while (v31 != v6);
      }
      if (!v6) {
        goto LABEL_21;
      }
    }
    operator delete(v6);
  }
  else
  {
    v6[1] = 0;
    unint64_t v7 = (void **)*a2;
    *(unsigned char *)uint64_t v6 = 4;
    v6[1] = v7;
    unsigned __int8 v8 = (char *)(v6 + 2);
  }
LABEL_21:
  v4[1] = v8;
}

void sub_215DEB28C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684E88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215DEB2AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C684E88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215DEB300(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

uint64_t sub_215DEB328(uint64_t a1)
{
  return MEMORY[0x270F98740](*(void *)(a1 + 8));
}

uint64_t sub_215DEB330()
{
  return std::ostream::write();
}

void sub_215DEB33C()
{
}

uint64_t sub_215DEB350(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    if (!*(unsigned char *)(a1 + 100)) {
      goto LABEL_47;
    }
    uint64_t v2 = *(unsigned int *)(a1 + 96);
    char v39 = 6;
    uint64_t v40 = v2;
    uint64_t v3 = *(void *)(a1 + 40);
    if (!*(unsigned char *)v3)
    {
      *(unsigned char *)uint64_t v3 = 1;
      uint64_t v4 = (char *)operator new(0x18uLL);
      *((void *)v4 + 1) = 0;
      unint64_t v5 = (uint64_t **)(v4 + 8);
      *((void *)v4 + 2) = 0;
      *(void *)uint64_t v4 = v4 + 8;
      *(void *)(v3 + 8) = v4;
      *((unsigned char *)&__s1.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&__s1, "version");
      uint64_t v6 = (uint64_t **)(v4 + 8);
      unint64_t v7 = (uint64_t **)(v4 + 8);
      goto LABEL_41;
    }
    if (*(unsigned char *)v3 != 1)
    {
      exceptiounint64_t n = __cxa_allocate_exception(0x20uLL);
      unsigned int v37 = (char *)sub_215D2DC9C((char *)v3);
      sub_215732BF4(&v41, v37);
      sub_215AC8CC8("cannot use operator[] with a string argument with ", &v41, &__s1);
      sub_215D2DB00(305, (uint64_t)&__s1, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
    }
    uint64_t v4 = *(char **)(v3 + 8);
    unint64_t v5 = (uint64_t **)(v4 + 8);
    uint64_t v13 = (uint64_t *)*((void *)v4 + 1);
    *((unsigned char *)&__s1.__r_.__value_.__s + 23) = 7;
    strcpy((char *)&__s1, "version");
    if (!v13)
    {
      uint64_t v6 = (uint64_t **)(v4 + 8);
      unint64_t v7 = (uint64_t **)(v4 + 8);
LABEL_41:
      uint64_t v24 = (char *)operator new(0x48uLL);
      *(std::string *)(v24 + 32) = __s1;
      memset(&__s1, 0, sizeof(__s1));
      v24[56] = 0;
      *((void *)v24 + 8) = 0;
      *(void *)uint64_t v24 = 0;
      *((void *)v24 + 1) = 0;
      *((void *)v24 + 2) = v7;
      *uint64_t v6 = (uint64_t *)v24;
      uint64_t v25 = **(void **)v4;
      int v26 = (uint64_t *)v24;
      if (v25)
      {
        *(void *)uint64_t v4 = v25;
        int v26 = *v6;
      }
      sub_21573B048(*v5, v26);
      ++*((void *)v4 + 2);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
LABEL_45:
      int v27 = v24[56];
      v24[56] = v39;
      char v39 = v27;
      uint64_t v28 = *((void *)v24 + 8);
      *((void *)v24 + 8) = v40;
      uint64_t v40 = v28;
      sub_215CE9D14(&v40, v27);
      if (*(unsigned char *)(a1 + 100)) {
        *(unsigned char *)(a1 + 10std::__fs::filesystem::__rename(__from, __to, 0) = 0;
      }
LABEL_47:
      std::string::size_type v29 = *(void *)(a1 + 80);
      if (v29 >= 0x7FFFFFFFFFFFFFF8) {
        sub_215731CD8();
      }
      uint64_t v30 = *(void *)(a1 + 40);
      int v31 = *(const void **)(a1 + 72);
      if (v29 >= 0x17)
      {
        uint64_t v33 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v29 | 7) != 0x17) {
          uint64_t v33 = v29 | 7;
        }
        uint64_t v34 = v33 + 1;
        p_s1 = (std::string *)operator new(v33 + 1);
        __s1.__r_.__value_.__l.__size_ = v29;
        __s1.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
        __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)p_s1;
      }
      else
      {
        *((unsigned char *)&__s1.__r_.__value_.__s + 23) = v29;
        p_s1 = &__s1;
        if (!v29)
        {
LABEL_55:
          p_s1->__r_.__value_.__s.__data_[v29] = 0;
          uint64_t v23 = sub_215D2CD70(v30, (const void **)&__s1.__r_.__value_.__l.__data_);
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s1.__r_.__value_.__l.__data_);
          }
          return (uint64_t)v23;
        }
      }
      memmove(p_s1, v31, v29);
      goto LABEL_55;
    }
    while (1)
    {
      unint64_t v7 = (uint64_t **)v13;
      uint64_t v16 = (const void *)v13[4];
      uint64_t v14 = v13 + 4;
      unint64_t v15 = v16;
      int v17 = *((char *)v14 + 23);
      if (v17 >= 0) {
        uint64_t v18 = v14;
      }
      else {
        uint64_t v18 = v15;
      }
      if (v17 >= 0) {
        unint64_t v19 = *((unsigned __int8 *)v14 + 23);
      }
      else {
        unint64_t v19 = v14[1];
      }
      if (v19 >= 7) {
        size_t v20 = 7;
      }
      else {
        size_t v20 = v19;
      }
      int v21 = memcmp(&__s1, v18, v20);
      if (v21)
      {
        if (v21 < 0) {
          goto LABEL_15;
        }
LABEL_29:
        int v22 = memcmp(v18, &__s1, v20);
        if (v22)
        {
          if ((v22 & 0x80000000) == 0) {
            goto LABEL_39;
          }
        }
        else if (v19 >= 7)
        {
LABEL_39:
          uint64_t v24 = (char *)v7;
          goto LABEL_45;
        }
        uint64_t v13 = v7[1];
        if (!v13)
        {
          uint64_t v6 = v7 + 1;
          goto LABEL_41;
        }
      }
      else
      {
        if (v19 <= 7) {
          goto LABEL_29;
        }
LABEL_15:
        uint64_t v13 = *v7;
        if (!*v7)
        {
          uint64_t v6 = v7;
          goto LABEL_41;
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 100))
  {
    uint64_t v38 = *(unsigned int *)(a1 + 96);
    unsigned __int8 v8 = (unsigned __int8 *)sub_215D2A1BC(*(void *)(a1 + 40), 0);
    int v9 = *v8;
    *unsigned __int8 v8 = 6;
    uint64_t v10 = *((void *)v8 + 1);
    *((void *)v8 + 1) = v38;
    uint64_t v38 = v10;
    sub_215CE9D14(&v38, v9);
    if (*(unsigned char *)(a1 + 100)) {
      *(unsigned char *)(a1 + 10std::__fs::filesystem::__rename(__from, __to, 0) = 0;
    }
  }
  uint64_t v11 = *(unsigned __int8 **)(a1 + 40);
  unint64_t v12 = *v11;
  if (*v11)
  {
    if (v12 == 1)
    {
      unint64_t v12 = *(void *)(*((void *)v11 + 1) + 16);
    }
    else if (v12 == 2)
    {
      unint64_t v12 = (uint64_t)(*(void *)(*((void *)v11 + 1) + 8) - **((void **)v11 + 1)) >> 4;
    }
    else
    {
      unint64_t v12 = 1;
    }
  }
  return sub_215D2A1BC((uint64_t)v11, v12);
}

void sub_215DEB768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_215CE9D14(v24, a9);
  _Unwind_Resume(a1);
}

uint64_t sub_215DEB804(uint64_t a1)
{
  uint64_t v3 = *(char **)(a1 + 56);
  unint64_t v2 = *(void *)(a1 + 64);
  uint64_t v4 = v3;
  if ((unint64_t)v3 >= v2)
  {
    uint64_t v6 = (void **)(a1 + 48);
    unint64_t v7 = *(char **)(a1 + 48);
    uint64_t v8 = (v3 - v7) >> 3;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      sub_215D2CB08();
    }
    uint64_t v10 = v2 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_215738AD8();
      }
      unint64_t v12 = (char *)operator new(8 * v11);
    }
    else
    {
      unint64_t v12 = 0;
    }
    uint64_t v13 = &v12[8 * v8];
    uint64_t v14 = &v12[8 * v11];
    *(void *)uint64_t v13 = *(void *)(a1 + 40);
    unint64_t v5 = v13 + 8;
    if (v3 != v7)
    {
      unint64_t v15 = v3 - v7 - 8;
      if (v15 < 0x58) {
        goto LABEL_30;
      }
      if ((unint64_t)(v7 - v12) < 0x20) {
        goto LABEL_30;
      }
      uint64_t v16 = (v15 >> 3) + 1;
      uint64_t v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v4 = &v3[-v17];
      v13 -= v17;
      uint64_t v18 = &v12[8 * v8 - 16];
      unint64_t v19 = (long long *)(v3 - 16);
      uint64_t v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v21 = *v19;
        *((_OWORD *)v18 - 1) = *(v19 - 1);
        *(_OWORD *)uint64_t v18 = v21;
        v18 -= 32;
        v19 -= 2;
        v20 -= 4;
      }
      while (v20);
      if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          uint64_t v22 = *((void *)v4 - 1);
          v4 -= 8;
          *((void *)v13 - 1) = v22;
          v13 -= 8;
        }
        while (v4 != v7);
      }
      uint64_t v4 = (char *)*v6;
    }
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = v5;
    *(void *)(a1 + 64) = v14;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    *(void *)uint64_t v3 = *(void *)(a1 + 40);
    unint64_t v5 = v3 + 8;
  }
  *(void *)(a1 + 56) = v5;
  uint64_t result = sub_215DEB350(a1);
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = result;
  if (*(unsigned char *)(a1 + 88)) {
    *(unsigned char *)(a1 + 88) = 0;
  }
  return result;
}

void sub_215DEB984(uint64_t a1, size_t *a2)
{
  size_t v4 = *a2;
  uint64_t v3 = (const void *)a2[1];
  if (*a2)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    unint64_t v5 = (char *)operator new(v4);
    uint64_t v6 = (unsigned __int8 *)&v5[v4];
    memcpy(v5, v3, v4);
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v5 = 0;
  }
  unint64_t v7 = operator new(0x18uLL);
  sub_215DF51C0(v7, (unsigned __int8 *)v5, v6);
  unint64_t v11 = v7;
  uint64_t v8 = (unsigned __int8 *)sub_215DEB350(a1);
  int v9 = *v8;
  *uint64_t v8 = 2;
  uint64_t v10 = *((void *)v8 + 1);
  *((void *)v8 + 1) = v11;
  unint64_t v11 = (void *)v10;
  sub_215CE9D14((uint64_t *)&v11, v9);
  if (v5) {
    operator delete(v5);
  }
}

void sub_215DEBA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CE9D14(v14, a13);
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void sub_215DEBAC0(void *a1, uint64_t *a2)
{
  *a1 = &unk_26C6851C8;
  uint64_t v2 = *a2;
  *a1 = &unk_26C684F20;
  a1[1] = v2;
  operator new();
}

uint64_t sub_215DEBB78(uint64_t a1)
{
  *(void *)a1 = &unk_26C684F20;
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(void))(a1 + 24))();
  }
  return a1;
}

uint64_t sub_215DEBBE0(uint64_t a1)
{
  *(void *)a1 = &unk_26C684F20;
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(void))(a1 + 24))();
  }
  return a1;
}

void sub_215DEBC48(uint64_t a1)
{
  *(void *)a1 = &unk_26C684F20;
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(void))(a1 + 24))();
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215DEBCD0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    if (*(unsigned char *)(a1 + 100))
    {
      uint64_t v2 = (void **)*(unsigned int *)(a1 + 96);
      char v24 = 6;
      uint64_t v25 = v2;
      uint64_t v3 = *(void *)(a1 + 40);
      if (*(unsigned char *)v3)
      {
        if (*(unsigned char *)v3 != 1)
        {
          exceptiounint64_t n = __cxa_allocate_exception(0x20uLL);
          uint64_t v22 = (char *)sub_215D2DC9C((char *)v3);
          sub_215732BF4(&v26, v22);
          sub_215AC8CC8("cannot use operator[] with a string argument with ", &v26, &__p);
          sub_215D2DB00(305, (uint64_t)&__p, (uint64_t)exception);
          __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
        }
        size_t v4 = *(uint64_t **)(v3 + 8);
      }
      else
      {
        *(unsigned char *)uint64_t v3 = 1;
        size_t v4 = (uint64_t *)operator new(0x18uLL);
        uint64_t *v4 = 0;
        v4[1] = 0;
        void v4[2] = 0;
        *(void *)(v3 + 8) = v4;
      }
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&__p, "version");
      v26.__r_.__value_.__s.__data_[0] = 0;
      v26.__r_.__value_.__l.__size_ = 0;
      uint64_t v10 = sub_215D2F1B8(v4, (uint64_t)&__p, (unsigned __int8 *)&v26);
      sub_215CEB204((void ***)&v26.__r_.__value_.__l.__size_, v26.__r_.__value_.__s.__data_[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      int v11 = v10[24];
      v10[24] = v24;
      char v24 = v11;
      unint64_t v12 = (void **)*((void *)v10 + 4);
      *((void *)v10 + 4) = v25;
      uint64_t v25 = v12;
      sub_215CEB204(&v25, v11);
      if (*(unsigned char *)(a1 + 100)) {
        *(unsigned char *)(a1 + 10std::__fs::filesystem::__rename(__from, __to, 0) = 0;
      }
    }
    std::string::size_type v13 = *(void *)(a1 + 80);
    if (v13 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    uint64_t v14 = *(void *)(a1 + 40);
    unint64_t v15 = *(const void **)(a1 + 72);
    if (v13 >= 0x17)
    {
      uint64_t v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17) {
        uint64_t v17 = v13 | 7;
      }
      uint64_t v18 = v17 + 1;
      p_p = (std::string *)operator new(v17 + 1);
      __p.__r_.__value_.__l.__size_ = v13;
      __p.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    }
    else
    {
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v13;
      p_p = &__p;
      if (!v13)
      {
LABEL_26:
        p_p->__r_.__value_.__s.__data_[v13] = 0;
        unint64_t v19 = sub_215D2E3F4(v14, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        return (uint64_t)v19;
      }
    }
    memmove(p_p, v15, v13);
    goto LABEL_26;
  }
  if (*(unsigned char *)(a1 + 100))
  {
    uint64_t v23 = (void **)*(unsigned int *)(a1 + 96);
    unint64_t v5 = (unsigned __int8 *)sub_215D2A4B8(*(void *)(a1 + 40), 0);
    int v6 = *v5;
    *unint64_t v5 = 6;
    unint64_t v7 = (void **)*((void *)v5 + 1);
    *((void *)v5 + 1) = v23;
    uint64_t v23 = v7;
    sub_215CEB204(&v23, v6);
    if (*(unsigned char *)(a1 + 100)) {
      *(unsigned char *)(a1 + 10std::__fs::filesystem::__rename(__from, __to, 0) = 0;
    }
  }
  uint64_t v8 = *(unsigned __int8 **)(a1 + 40);
  unint64_t v9 = *v8;
  if (*v8)
  {
    if (v9 == 1)
    {
      unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(*((void *)v8 + 1) + 8) - **((void **)v8 + 1)) >> 3);
    }
    else if (v9 == 2)
    {
      unint64_t v9 = (uint64_t)(*(void *)(*((void *)v8 + 1) + 8) - **((void **)v8 + 1)) >> 4;
    }
    else
    {
      unint64_t v9 = 1;
    }
  }
  return sub_215D2A4B8((uint64_t)v8, v9);
}

void sub_215DEBFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, unsigned __int8 a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_215CEB204(v24, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_215DEC088(uint64_t a1)
{
  uint64_t v3 = *(char **)(a1 + 56);
  unint64_t v2 = *(void *)(a1 + 64);
  size_t v4 = v3;
  if ((unint64_t)v3 >= v2)
  {
    int v6 = (void **)(a1 + 48);
    unint64_t v7 = *(char **)(a1 + 48);
    uint64_t v8 = (v3 - v7) >> 3;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      sub_215DEAA08();
    }
    uint64_t v10 = v2 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_215738AD8();
      }
      unint64_t v12 = (char *)operator new(8 * v11);
    }
    else
    {
      unint64_t v12 = 0;
    }
    std::string::size_type v13 = &v12[8 * v8];
    uint64_t v14 = &v12[8 * v11];
    *(void *)std::string::size_type v13 = *(void *)(a1 + 40);
    unint64_t v5 = v13 + 8;
    if (v3 != v7)
    {
      unint64_t v15 = v3 - v7 - 8;
      if (v15 < 0x58) {
        goto LABEL_30;
      }
      if ((unint64_t)(v7 - v12) < 0x20) {
        goto LABEL_30;
      }
      uint64_t v16 = (v15 >> 3) + 1;
      uint64_t v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
      size_t v4 = &v3[-v17];
      v13 -= v17;
      uint64_t v18 = &v12[8 * v8 - 16];
      unint64_t v19 = (long long *)(v3 - 16);
      uint64_t v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v21 = *v19;
        *((_OWORD *)v18 - 1) = *(v19 - 1);
        *(_OWORD *)uint64_t v18 = v21;
        v18 -= 32;
        v19 -= 2;
        v20 -= 4;
      }
      while (v20);
      if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          uint64_t v22 = *((void *)v4 - 1);
          v4 -= 8;
          *((void *)v13 - 1) = v22;
          v13 -= 8;
        }
        while (v4 != v7);
      }
      size_t v4 = (char *)*v6;
    }
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = v5;
    *(void *)(a1 + 64) = v14;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    *(void *)uint64_t v3 = *(void *)(a1 + 40);
    unint64_t v5 = v3 + 8;
  }
  *(void *)(a1 + 56) = v5;
  uint64_t result = sub_215DEBCD0(a1);
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = result;
  if (*(unsigned char *)(a1 + 88)) {
    *(unsigned char *)(a1 + 88) = 0;
  }
  return result;
}

void sub_215DEC208(uint64_t a1, size_t *a2)
{
  size_t v4 = *a2;
  uint64_t v3 = (const void *)a2[1];
  if (*a2)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    unint64_t v5 = (char *)operator new(v4);
    int v6 = (unsigned __int8 *)&v5[v4];
    memcpy(v5, v3, v4);
  }
  else
  {
    int v6 = 0;
    unint64_t v5 = 0;
  }
  unint64_t v7 = (void **)operator new(0x18uLL);
  sub_215DF5D1C(v7, (unsigned __int8 *)v5, v6);
  unint64_t v11 = v7;
  uint64_t v8 = (unsigned __int8 *)sub_215DEBCD0(a1);
  int v9 = *v8;
  *uint64_t v8 = 2;
  uint64_t v10 = (void **)*((void *)v8 + 1);
  *((void *)v8 + 1) = v11;
  unint64_t v11 = v10;
  sub_215CEB204(&v11, v9);
  if (v5) {
    operator delete(v5);
  }
}

void sub_215DEC2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CEB204(v14, a13);
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void sub_215DEC344(uint64_t a1, _DWORD *a2)
{
  if (*(unsigned char *)(a1 + 88)
    && *(void *)(a1 + 80) == 7
    && ((unint64_t v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == 1936876918)
      ? (BOOL v5 = v4 == 1852795251)
      : (BOOL v5 = 0),
        v5))
  {
    *(_DWORD *)(a1 + 96) = *a2;
    *(unsigned char *)(a1 + 10std::__fs::filesystem::__rename(__from, __to, 0) = 1;
    *(unsigned char *)(a1 + 88) = 0;
  }
  else
  {
    uint64_t v9 = *a2;
    int v6 = (unsigned __int8 *)sub_215DEB350(a1);
    int v7 = *v6;
    *int v6 = 6;
    uint64_t v8 = *((void *)v6 + 1);
    *((void *)v6 + 1) = v9;
    uint64_t v9 = v8;
    sub_215CE9D14(&v9, v7);
  }
}

void sub_215DEC40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CE9D14(v9, a9);
  _Unwind_Resume(a1);
}

void sub_215DEC424(uint64_t a1, float *a2)
{
  if (*(unsigned char *)(a1 + 32)) {
    BOOL v3 = (*(_DWORD *)a2 & 0x7FFFFFFFu) < 0x7F800000;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    double v11 = *a2;
    int v4 = (double *)sub_215DEB350(a1);
    int v5 = *(unsigned __int8 *)v4;
    *(unsigned char *)int v4 = 7;
    double v6 = v4[1];
    v4[1] = v11;
    double v11 = v6;
    sub_215CE9D14((uint64_t *)&v11, v5);
  }
  else
  {
    int v17 = 0;
    sub_2157D208C((uint64_t)&v19, (uint64_t)v16, a2);
    if (v17 == -1) {
      sub_215742D4C();
    }
    unint64_t v19 = &v18;
    ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C6851A0[v17])(__p, &v19, v16);
    if (v17 != -1) {
      ((void (*)(char **, unsigned char *))off_26C685188[v17])(&v19, v16);
    }
    unint64_t v15 = 0;
    char v14 = 3;
    int v7 = operator new(0x18uLL);
    *(_OWORD *)int v7 = *(_OWORD *)__p;
    void v7[2] = v13;
    __p[1] = 0;
    uint64_t v13 = 0;
    __p[0] = 0;
    unint64_t v15 = v7;
    uint64_t v8 = (unsigned __int8 *)sub_215DEB350(a1);
    int v9 = *v8;
    *uint64_t v8 = v14;
    char v14 = v9;
    uint64_t v10 = *((void *)v8 + 1);
    *((void *)v8 + 1) = v15;
    unint64_t v15 = (void *)v10;
    sub_215CE9D14((uint64_t *)&v15, v9);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_215DEC5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, unsigned __int8 a18)
{
  sub_215CE9D14(v18, a18);
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_215DEC5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DEC5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DEC608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CE9D14(v10, a10);
  _Unwind_Resume(a1);
}

void sub_215DEC620(uint64_t a1, double *a2)
{
  if (*(unsigned char *)(a1 + 32)) {
    BOOL v3 = (*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v11 = *(void *)a2;
    int v4 = (unsigned __int8 *)sub_215DEB350(a1);
    int v5 = *v4;
    unsigned __int8 *v4 = 7;
    uint64_t v6 = *((void *)v4 + 1);
    *((void *)v4 + 1) = v11;
    uint64_t v11 = v6;
    sub_215CE9D14(&v11, v5);
  }
  else
  {
    int v17 = 0;
    sub_2157CFFD4((uint64_t)&v19, (uint64_t)v16, a2);
    if (v17 == -1) {
      sub_215742D4C();
    }
    unint64_t v19 = &v18;
    ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C6851A0[v17])(__p, &v19, v16);
    if (v17 != -1) {
      ((void (*)(char **, unsigned char *))off_26C685188[v17])(&v19, v16);
    }
    unint64_t v15 = 0;
    char v14 = 3;
    int v7 = operator new(0x18uLL);
    *(_OWORD *)int v7 = *(_OWORD *)__p;
    void v7[2] = v13;
    __p[1] = 0;
    uint64_t v13 = 0;
    __p[0] = 0;
    unint64_t v15 = v7;
    uint64_t v8 = (unsigned __int8 *)sub_215DEB350(a1);
    int v9 = *v8;
    *uint64_t v8 = v14;
    char v14 = v9;
    uint64_t v10 = *((void *)v8 + 1);
    *((void *)v8 + 1) = v15;
    unint64_t v15 = (void *)v10;
    sub_215CE9D14((uint64_t *)&v15, v9);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_215DEC7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, unsigned __int8 a18)
{
  sub_215CE9D14(v18, a18);
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_215DEC7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DEC7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DEC800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CE9D14(v10, a10);
  _Unwind_Resume(a1);
}

void sub_215DEC818(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 88)
    || *(void *)(a1 + 80) != 7
    || ((v4 = *(int **)(a1 + 72), int v5 = *v4, v6 = *(int *)((char *)v4 + 3), v5 == 1936876918)
      ? (BOOL v7 = v6 == 1852795251)
      : (BOOL v7 = 0),
        !v7))
  {
    uint64_t v8 = operator new(0x18uLL);
    uint64_t v9 = (uint64_t)v8;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_215738B0C(v8, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
      v8[2] = *(void *)(a2 + 16);
    }
    uint64_t v13 = v9;
    uint64_t v10 = (unsigned __int8 *)sub_215DEB350(a1);
    int v11 = *v10;
    *uint64_t v10 = 3;
    uint64_t v12 = *((void *)v10 + 1);
    *((void *)v10 + 1) = v13;
    uint64_t v13 = v12;
    sub_215CE9D14(&v13, v11);
  }
}

void sub_215DEC900(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_215DEC914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CE9D14(v9, a9);
  _Unwind_Resume(a1);
}

void sub_215DEC92C(uint64_t a1, size_t *a2)
{
  size_t v4 = *a2;
  BOOL v3 = (const void *)a2[1];
  if (*a2)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    int v5 = (char *)operator new(v4);
    int v6 = &v5[v4];
    memcpy(v5, v3, v4);
  }
  else
  {
    int v6 = 0;
    int v5 = 0;
  }
  BOOL v7 = operator new(0x18uLL);
  sub_215DF50CC(v7, v5, v6);
  int v11 = v7;
  uint64_t v8 = (unsigned __int8 *)sub_215DEB350(a1);
  int v9 = *v8;
  *uint64_t v8 = 2;
  uint64_t v10 = *((void *)v8 + 1);
  *((void *)v8 + 1) = v11;
  int v11 = (void *)v10;
  sub_215CE9D14((uint64_t *)&v11, v9);
  if (v5) {
    operator delete(v5);
  }
}

void sub_215DECA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CE9D14(v14, a13);
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void sub_215DECA68(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(__int16 **)a2;
  size_t v4 = *(const void **)(a2 + 8);
  if (*(void *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    size_t v5 = 2 * (void)v3;
    int v6 = (char *)operator new(2 * (void)v3);
    BOOL v3 = (__int16 *)&v6[2 * (void)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    int v6 = 0;
  }
  BOOL v7 = operator new(0x18uLL);
  sub_215DF52B4(v7, (__int16 *)v6, v3);
  int v11 = v7;
  uint64_t v8 = (unsigned __int8 *)sub_215DEB350(a1);
  int v9 = *v8;
  *uint64_t v8 = 2;
  uint64_t v10 = *((void *)v8 + 1);
  *((void *)v8 + 1) = v11;
  int v11 = (void *)v10;
  sub_215CE9D14((uint64_t *)&v11, v9);
  if (v6) {
    operator delete(v6);
  }
}

void sub_215DECB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CE9D14(v14, a13);
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void sub_215DECBA4(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(unsigned __int16 **)a2;
  size_t v4 = *(const void **)(a2 + 8);
  if (*(void *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    size_t v5 = 2 * (void)v3;
    int v6 = (char *)operator new(2 * (void)v3);
    BOOL v3 = (unsigned __int16 *)&v6[2 * (void)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    int v6 = 0;
  }
  BOOL v7 = operator new(0x18uLL);
  sub_215DF53AC(v7, (unsigned __int16 *)v6, v3);
  int v11 = v7;
  uint64_t v8 = (unsigned __int8 *)sub_215DEB350(a1);
  int v9 = *v8;
  *uint64_t v8 = 2;
  uint64_t v10 = *((void *)v8 + 1);
  *((void *)v8 + 1) = v11;
  int v11 = (void *)v10;
  sub_215CE9D14((uint64_t *)&v11, v9);
  if (v6) {
    operator delete(v6);
  }
}

void sub_215DECC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CE9D14(v14, a13);
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void sub_215DECCE0(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(int **)a2;
  size_t v4 = *(const void **)(a2 + 8);
  if (*(void *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    size_t v5 = 4 * (void)v3;
    int v6 = (char *)operator new(4 * (void)v3);
    BOOL v3 = (int *)&v6[4 * (void)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    int v6 = 0;
  }
  BOOL v7 = operator new(0x18uLL);
  sub_215DF54A4(v7, (int *)v6, v3);
  int v11 = v7;
  uint64_t v8 = (unsigned __int8 *)sub_215DEB350(a1);
  int v9 = *v8;
  *uint64_t v8 = 2;
  uint64_t v10 = *((void *)v8 + 1);
  *((void *)v8 + 1) = v11;
  int v11 = (void *)v10;
  sub_215CE9D14((uint64_t *)&v11, v9);
  if (v6) {
    operator delete(v6);
  }
}

void sub_215DECDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CE9D14(v14, a13);
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void sub_215DECE1C(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(char **)a2;
  size_t v4 = *(const void **)(a2 + 8);
  if (*(void *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    size_t v5 = 4 * (void)v3;
    int v6 = (char *)operator new(4 * (void)v3);
    BOOL v3 = &v6[4 * (void)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    int v6 = 0;
  }
  BOOL v7 = operator new(0x18uLL);
  sub_215DF55A0(v7, v6, v3);
  int v11 = v7;
  uint64_t v8 = (unsigned __int8 *)sub_215DEB350(a1);
  int v9 = *v8;
  *uint64_t v8 = 2;
  uint64_t v10 = *((void *)v8 + 1);
  *((void *)v8 + 1) = v11;
  int v11 = (void *)v10;
  sub_215CE9D14((uint64_t *)&v11, v9);
  if (v6) {
    operator delete(v6);
  }
}

void sub_215DECF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CE9D14(v14, a13);
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void sub_215DECF58(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(char **)a2;
  size_t v4 = *(const void **)(a2 + 8);
  if (*(void *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    size_t v5 = 8 * (void)v3;
    int v6 = (char *)operator new(8 * (void)v3);
    BOOL v3 = &v6[8 * (void)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    int v6 = 0;
  }
  BOOL v7 = operator new(0x18uLL);
  sub_215DF569C(v7, v6, v3);
  int v11 = v7;
  uint64_t v8 = (unsigned __int8 *)sub_215DEB350(a1);
  int v9 = *v8;
  *uint64_t v8 = 2;
  uint64_t v10 = *((void *)v8 + 1);
  *((void *)v8 + 1) = v11;
  int v11 = (void *)v10;
  sub_215CE9D14((uint64_t *)&v11, v9);
  if (v6) {
    operator delete(v6);
  }
}

void sub_215DED044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CE9D14(v14, a13);
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void sub_215DED094(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(char **)a2;
  size_t v4 = *(const void **)(a2 + 8);
  if (*(void *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    size_t v5 = 8 * (void)v3;
    int v6 = (char *)operator new(8 * (void)v3);
    BOOL v3 = &v6[8 * (void)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    int v6 = 0;
  }
  BOOL v7 = operator new(0x18uLL);
  sub_215DF5798(v7, v6, v3);
  int v11 = v7;
  uint64_t v8 = (unsigned __int8 *)sub_215DEB350(a1);
  int v9 = *v8;
  *uint64_t v8 = 2;
  uint64_t v10 = *((void *)v8 + 1);
  *((void *)v8 + 1) = v11;
  int v11 = (void *)v10;
  sub_215CE9D14((uint64_t *)&v11, v9);
  if (v6) {
    operator delete(v6);
  }
}

void sub_215DED180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CE9D14(v14, a13);
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void sub_215DED1D0(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    size_t v4 = (unsigned __int8 *)sub_215DEB350(a1);
    if (*a2)
    {
      size_t v5 = (__int16 *)a2[1];
      uint64_t v6 = 2 * *a2;
      do
      {
        if ((~(unsigned __int16)*v5 & 0x7C00) != 0)
        {
          _H0 = *v5;
          __asm { FCVT            D0, H0 }
          LOBYTE(v64) = 7;
          v65[0] = _D0;
          sub_215DF5894((uint64_t)v4, (char *)&v64);
          sub_215CE9D14(v65, v64);
        }
        else
        {
          int v66 = 0;
          sub_215DC2E88((uint64_t)&v68, (uint64_t)&v64, v5);
          if (v66 == -1) {
            sub_215742D4C();
          }
          std::string v68 = &v67;
          ((void (*)(void **__return_ptr, char **, uint64_t *))off_26C6851A0[v66])(__p, &v68, &v64);
          if (v66 != -1) {
            ((void (*)(char **, uint64_t *))off_26C685188[v66])(&v68, &v64);
          }
          int v61 = 0;
          v60[0] = 3;
          uint64_t v12 = operator new(0x18uLL);
          *(_OWORD *)uint64_t v12 = *(_OWORD *)__p;
          v12[2] = v59;
          __p[1] = 0;
          uint64_t v59 = 0;
          __p[0] = 0;
          int v61 = v12;
          sub_215DF5894((uint64_t)v4, v60);
          sub_215CE9D14((uint64_t *)&v61, v60[0]);
          if (SHIBYTE(v59) < 0) {
            operator delete(__p[0]);
          }
        }
        ++v5;
        v6 -= 2;
      }
      while (v6);
    }
    else
    {
      uint64_t v20 = operator new(0x18uLL);
      v20[1] = 0;
      uint64_t v20[2] = 0;
      *uint64_t v20 = 0;
      int v21 = *v4;
      unsigned __int8 *v4 = 2;
      char v62 = v21;
      uint64_t v22 = *((void *)v4 + 1);
      *((void *)v4 + 1) = v20;
      uint64_t v63 = v22;
      sub_215CE9D14(&v63, v21);
    }
    return;
  }
  uint64_t v13 = (char *)*a2;
  unint64_t v14 = a2[1];
  v65[0] = 0;
  v65[1] = 0;
  uint64_t v64 = 0;
  if (!v13)
  {
    int v17 = 0;
    goto LABEL_27;
  }
  uint64_t v15 = 2 * (void)v13;
  if ((unint64_t)-((-2 * (uint64_t)v13) >> 1) >> 61) {
    sub_2157E81A4();
  }
  uint64_t v16 = (char *)operator new(-8 * ((-2 * (uint64_t)v13) >> 1));
  int v17 = v16;
  unint64_t v18 = (unint64_t)(v13 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v18 < 0x17)
  {
    unint64_t v19 = (__int16 *)v14;
    uint64_t v13 = v16;
    do
    {
LABEL_26:
      __int16 v50 = *v19++;
      _H0 = v50;
      __asm { FCVT            D0, H0 }
      *(void *)uint64_t v13 = _D0;
      v13 += 8;
    }
    while (v19 != (__int16 *)(v14 + v15));
    goto LABEL_27;
  }
  _CF = (unint64_t)v16 >= v14 + 2 * (void)(v13 + 0x7FFFFFFFFFFFFFFFLL) + 2
     || v14 >= (unint64_t)&v16[8 * (void)(v13 + 0x7FFFFFFFFFFFFFFFLL) + 8];
  unint64_t v19 = (__int16 *)v14;
  uint64_t v13 = v16;
  if (!_CF) {
    goto LABEL_26;
  }
  unint64_t v24 = v18 + 1;
  unint64_t v19 = (__int16 *)(v14 + 2 * (v24 & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = &v16[8 * (v24 & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v25 = v16 + 64;
  std::string v26 = (int8x16_t *)(v14 + 16);
  unint64_t v27 = v24 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    _Q1 = v26[-1];
    _D2 = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
    _H0 = WORD1(_D2);
    __asm
    {
      FCVT            D3, H0
      FCVT            D0, H2
    }
    *((void *)&_Q0 + 1) = _D3;
    LOWORD(_D3) = HIWORD(_D2);
    __asm { FCVT            D3, H3 }
    LOWORD(_D2) = WORD2(_D2);
    __asm { FCVT            D2, H2 }
    *((void *)&_Q2 + 1) = _D3;
    int8x16_t v35 = *v26;
    v26 += 2;
    _Q3 = v35;
    _H4 = _Q1.i16[1];
    __asm
    {
      FCVT            D4, H4
      FCVT            D5, H1
    }
    *((void *)&_Q5 + 1) = _D4;
    LOWORD(_D4) = _Q1.i16[3];
    __asm { FCVT            D4, H4 }
    _Q1.i16[0] = _Q1.i16[2];
    __asm { FCVT            D1, H1 }
    _Q1.i64[1] = _D4;
    _D4 = vextq_s8(_Q3, _Q3, 8uLL).u64[0];
    _H6 = WORD1(_D4);
    __asm
    {
      FCVT            D6, H6
      FCVT            D7, H4
    }
    *((void *)&_Q7 + 1) = _D6;
    LOWORD(_D6) = HIWORD(_D4);
    __asm { FCVT            D6, H6 }
    LOWORD(_D4) = WORD2(_D4);
    __asm { FCVT            D4, H4 }
    *((void *)&_Q4 + 1) = _D6;
    LOWORD(_D6) = v35.i16[1];
    __asm
    {
      FCVT            D6, H6
      FCVT            D16, H3
    }
    *((void *)&_Q16 + 1) = _D6;
    LOWORD(_D6) = v35.i16[3];
    __asm { FCVT            D6, H6 }
    _Q3.i16[0] = v35.i16[2];
    __asm { FCVT            D3, H3 }
    _Q3.i64[1] = _D6;
    *(v25 - 4) = _Q5;
    *(v25 - 3) = _Q1;
    *(v25 - 2) = _Q0;
    *(v25 - 1) = _Q2;
    *uint64_t v25 = _Q16;
    v25[1] = _Q3;
    void v25[2] = _Q7;
    void v25[3] = _Q4;
    v25 += 8;
    v27 -= 16;
  }
  while (v27);
  if (v24 != (v24 & 0xFFFFFFFFFFFFFFF0)) {
    goto LABEL_26;
  }
LABEL_27:
  std::string::size_type v53 = operator new(0x18uLL);
  sub_215DF5A38(v53, v17, v13);
  std::string::size_type v57 = v53;
  uint64_t v54 = (unsigned __int8 *)sub_215DEB350(a1);
  int v55 = *v54;
  unsigned __int8 *v54 = 2;
  uint64_t v56 = *((void *)v54 + 1);
  *((void *)v54 + 1) = v57;
  std::string::size_type v57 = (void *)v56;
  sub_215CE9D14((uint64_t *)&v57, v55);
  if (v17) {
    operator delete(v17);
  }
}

void sub_215DED598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  sub_215CE9D14(v24, a10);
  if (v23)
  {
    operator delete(v23);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_215DED668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DED67C(uint64_t a1, float **__sz)
{
  if (*(unsigned char *)(a1 + 32))
  {
    size_t v4 = (unsigned __int8 *)sub_215DEB350(a1);
    size_t v5 = *__sz;
    if (*__sz)
    {
      uint64_t v6 = __sz[1];
      uint64_t v7 = 4 * (void)v5;
      do
      {
        float v8 = *v6;
        if ((*(_DWORD *)v6 & 0x7FFFFFFFu) > 0x7F7FFFFF)
        {
          int v34 = 0;
          sub_2157D208C((uint64_t)&v36, (uint64_t)&v32, v6);
          if (v34 == -1) {
            sub_215742D4C();
          }
          size_t v36 = &v35;
          ((void (*)(void **__return_ptr, char **, uint64_t *))off_26C6851A0[v34])(__p, &v36, &v32);
          if (v34 != -1) {
            ((void (*)(char **, uint64_t *))off_26C685188[v34])(&v36, &v32);
          }
          std::string::size_type v29 = 0;
          v28[0] = 3;
          int v9 = operator new(0x18uLL);
          *(_OWORD *)int v9 = *(_OWORD *)__p;
          void v9[2] = v27;
          __p[1] = 0;
          uint64_t v27 = 0;
          __p[0] = 0;
          std::string::size_type v29 = v9;
          sub_215DF5894((uint64_t)v4, v28);
          sub_215CE9D14((uint64_t *)&v29, v28[0]);
          if (SHIBYTE(v27) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          LOBYTE(v32) = 7;
          *(double *)uint64_t v33 = v8;
          sub_215DF5894((uint64_t)v4, (char *)&v32);
          sub_215CE9D14(v33, v32);
        }
        ++v6;
        v7 -= 4;
      }
      while (v7);
    }
    else
    {
      unint64_t v14 = operator new(0x18uLL);
      v14[1] = 0;
      v14[2] = 0;
      void *v14 = 0;
      int v15 = *v4;
      unsigned __int8 *v4 = 2;
      char v30 = v15;
      uint64_t v16 = *((void *)v4 + 1);
      *((void *)v4 + 1) = v14;
      uint64_t v31 = v16;
      sub_215CE9D14(&v31, v15);
    }
  }
  else
  {
    int v11 = *__sz;
    uint64_t v10 = __sz[1];
    v33[0] = 0;
    v33[1] = 0;
    uint64_t v32 = 0;
    if (v11)
    {
      if (((unint64_t)v11 & 0x8000000000000000) != 0) {
        sub_2157E81A4();
      }
      size_t v12 = 4 * (void)v11;
      uint64_t v13 = (float *)operator new(4 * (void)v11);
      int v11 = &v13[(void)v11];
      memcpy(v13, v10, v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v25 = 0;
    int v17 = operator new(0x18uLL);
    void *v17 = 0;
    v17[1] = 0;
    v17[2] = 0;
    uint64_t v18 = (char *)v11 - (char *)v13;
    if (v11 != v13)
    {
      if ((unint64_t)v18 >= 0x3FFFFFFFFFFFFFFDLL) {
        sub_215CEA45C();
      }
      unint64_t v19 = (double *)operator new(4 * v18);
      void *v17 = v19;
      v17[1] = v19;
      v17[2] = &v19[2 * (v18 >> 2)];
      if (v13 != v11)
      {
        uint64_t v20 = v13;
        do
        {
          float v21 = *v20++;
          *(unsigned char *)unint64_t v19 = 7;
          v19[1] = v21;
          v19 += 2;
        }
        while (v20 != v11);
      }
      v17[1] = v19;
    }
    uint64_t v25 = v17;
    uint64_t v22 = (unsigned __int8 *)sub_215DEB350(a1);
    int v23 = *v22;
    unsigned __int8 *v22 = 2;
    uint64_t v24 = *((void *)v22 + 1);
    *((void *)v22 + 1) = v25;
    uint64_t v25 = (void *)v24;
    sub_215CE9D14((uint64_t *)&v25, v23);
    if (v13) {
      operator delete(v13);
    }
  }
}

void sub_215DED978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v25 = v24;
  sub_215CE9D14(v25, a10);
  if (v23)
  {
    operator delete(v23);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_215DEDAA0(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    size_t v4 = (unsigned __int8 *)sub_215DEB350(a1);
    if (*a2)
    {
      size_t v5 = (double *)a2[1];
      uint64_t v6 = 8 * *a2;
      do
      {
        double v7 = *v5;
        if ((*(void *)v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          LOBYTE(v27) = 7;
          *(double *)uint64_t v28 = v7;
          sub_215DF5894((uint64_t)v4, (char *)&v27);
          sub_215CE9D14(v28, v27);
        }
        else
        {
          int v29 = 0;
          sub_2157CFFD4((uint64_t)&v31, (uint64_t)&v27, v5);
          if (v29 == -1) {
            sub_215742D4C();
          }
          uint64_t v31 = &v30;
          ((void (*)(void **__return_ptr, char **, uint64_t *))off_26C6851A0[v29])(__p, &v31, &v27);
          if (v29 != -1) {
            ((void (*)(char **, uint64_t *))off_26C685188[v29])(&v31, &v27);
          }
          uint64_t v24 = 0;
          v23[0] = 3;
          float v8 = operator new(0x18uLL);
          *(_OWORD *)float v8 = *(_OWORD *)__p;
          v8[2] = v22;
          __p[1] = 0;
          uint64_t v22 = 0;
          __p[0] = 0;
          uint64_t v24 = v8;
          sub_215DF5894((uint64_t)v4, v23);
          sub_215CE9D14((uint64_t *)&v24, v23[0]);
          if (SHIBYTE(v22) < 0) {
            operator delete(__p[0]);
          }
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
    else
    {
      uint64_t v13 = operator new(0x18uLL);
      v13[1] = 0;
      void v13[2] = 0;
      *uint64_t v13 = 0;
      int v14 = *v4;
      unsigned __int8 *v4 = 2;
      char v25 = v14;
      uint64_t v15 = *((void *)v4 + 1);
      *((void *)v4 + 1) = v13;
      uint64_t v26 = v15;
      sub_215CE9D14(&v26, v14);
    }
  }
  else
  {
    int v9 = (char *)*a2;
    uint64_t v10 = (const void *)a2[1];
    v28[0] = 0;
    v28[1] = 0;
    uint64_t v27 = 0;
    if (v9)
    {
      if (((unint64_t)v9 & 0x8000000000000000) != 0) {
        sub_2157E81A4();
      }
      size_t v11 = 8 * (void)v9;
      size_t v12 = (char *)operator new(8 * (void)v9);
      int v9 = &v12[8 * (void)v9];
      memcpy(v12, v10, v11);
    }
    else
    {
      size_t v12 = 0;
    }
    uint64_t v16 = operator new(0x18uLL);
    sub_215DF5A38(v16, v12, v9);
    uint64_t v20 = v16;
    int v17 = (unsigned __int8 *)sub_215DEB350(a1);
    int v18 = *v17;
    unsigned __int8 *v17 = 2;
    uint64_t v19 = *((void *)v17 + 1);
    *((void *)v17 + 1) = v20;
    uint64_t v20 = (void *)v19;
    sub_215CE9D14((uint64_t *)&v20, v18);
    if (v12) {
      operator delete(v12);
    }
  }
}

void sub_215DEDD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  sub_215CE9D14(v24, a10);
  if (v23)
  {
    operator delete(v23);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_215DEDE10(uint64_t a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 + 24 * *a2;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  std::string __p = 0;
  sub_215DF2BEC((char *)&__p, v4, v5, v3);
  v25[0] = 0;
  char v24 = 2;
  uint64_t v6 = (char *)__p;
  double v7 = v22;
  float v8 = operator new(0x18uLL);
  *float v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  v25[1] = (uint64_t)v8;
  char v26 = 0;
  if (v7 != v6)
  {
    if ((0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3)) >> 60) {
      sub_215CEA45C();
    }
    int v9 = (char *)operator new(0xAAAAAAAAAAAAAAB0 * ((v7 - v6) >> 3));
    uint64_t v10 = 0;
    *float v8 = v9;
    v8[1] = v9;
    v8[2] = &v9[0xAAAAAAAAAAAAAAB0 * ((v7 - v6) >> 3)];
    do
    {
      size_t v12 = &v9[v10];
      *((void *)v12 + 1) = 0;
      char *v12 = 3;
      uint64_t v13 = operator new(0x18uLL);
      int v14 = v13;
      if (v6[23] < 0)
      {
        sub_215738B0C(v13, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v11 = *(_OWORD *)v6;
        void v13[2] = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v13 = v11;
      }
      *((void *)v12 + 1) = v14;
      v6 += 24;
      v10 += 16;
    }
    while (v6 != v7);
    v8[1] = &v9[v10];
  }
  v25[0] = (uint64_t)v8;
  uint64_t v15 = (unsigned __int8 *)sub_215DEB350(a1);
  int v16 = *v15;
  *uint64_t v15 = v24;
  char v24 = v16;
  uint64_t v17 = *((void *)v15 + 1);
  *((void *)v15 + 1) = v25[0];
  v25[0] = v17;
  sub_215CE9D14(v25, v16);
  int v18 = (void **)__p;
  if (__p)
  {
    uint64_t v19 = (void **)v22;
    uint64_t v20 = __p;
    if (v22 != __p)
    {
      do
      {
        if (*((char *)v19 - 1) < 0) {
          operator delete(*(v19 - 3));
        }
        v19 -= 3;
      }
      while (v19 != v18);
      uint64_t v20 = __p;
    }
    uint64_t v22 = (char *)v18;
    operator delete(v20);
  }
}

void sub_215DEDFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CE9D14(v13, a13);
  sub_2157352DC(&a10);
  _Unwind_Resume(a1);
}

void sub_215DEDFF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2157352DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215DEE008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_215D32268((void ***)va1);
  operator delete(v2);
  sub_2157352DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215DEE064(uint64_t a1, _DWORD *a2)
{
  if (*(unsigned char *)(a1 + 88)
    && *(void *)(a1 + 80) == 7
    && ((unint64_t v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == 1936876918)
      ? (BOOL v5 = v4 == 1852795251)
      : (BOOL v5 = 0),
        v5))
  {
    *(_DWORD *)(a1 + 96) = *a2;
    *(unsigned char *)(a1 + 10std::__fs::filesystem::__rename(__from, __to, 0) = 1;
    *(unsigned char *)(a1 + 88) = 0;
  }
  else
  {
    uint64_t v9 = (void **)*a2;
    uint64_t v6 = (unsigned __int8 *)sub_215DEBCD0(a1);
    int v7 = *v6;
    *uint64_t v6 = 6;
    uint64_t v8 = (void **)*((void *)v6 + 1);
    *((void *)v6 + 1) = v9;
    uint64_t v9 = v8;
    sub_215CEB204(&v9, v7);
  }
}

void sub_215DEE12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CEB204(v9, a9);
  _Unwind_Resume(a1);
}

void sub_215DEE144(uint64_t a1, float *a2)
{
  if (*(unsigned char *)(a1 + 32)) {
    BOOL v3 = (*(_DWORD *)a2 & 0x7FFFFFFFu) < 0x7F800000;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    double v11 = *a2;
    int v4 = (unsigned __int8 *)sub_215DEBCD0(a1);
    int v5 = *v4;
    unsigned __int8 *v4 = 7;
    uint64_t v6 = (void **)*((void *)v4 + 1);
    *((double *)v4 + 1) = v11;
    double v11 = *(double *)&v6;
    sub_215CEB204((void ***)&v11, v5);
  }
  else
  {
    int v17 = 0;
    sub_2157D208C((uint64_t)&v19, (uint64_t)v16, a2);
    if (v17 == -1) {
      sub_215742D4C();
    }
    uint64_t v19 = &v18;
    ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C6851A0[v17])(__p, &v19, v16);
    if (v17 != -1) {
      ((void (*)(char **, unsigned char *))off_26C685188[v17])(&v19, v16);
    }
    uint64_t v15 = 0;
    char v14 = 3;
    int v7 = (void **)operator new(0x18uLL);
    *(_OWORD *)int v7 = *(_OWORD *)__p;
    void v7[2] = v13;
    __p[1] = 0;
    uint64_t v13 = 0;
    __p[0] = 0;
    uint64_t v15 = v7;
    uint64_t v8 = (unsigned __int8 *)sub_215DEBCD0(a1);
    int v9 = *v8;
    *uint64_t v8 = v14;
    char v14 = v9;
    uint64_t v10 = (void **)*((void *)v8 + 1);
    *((void *)v8 + 1) = v15;
    uint64_t v15 = v10;
    sub_215CEB204(&v15, v9);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_215DEE2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, unsigned __int8 a18)
{
  sub_215CEB204(v18, a18);
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_215DEE300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DEE314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DEE328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CEB204(v10, a10);
  _Unwind_Resume(a1);
}

void sub_215DEE340(uint64_t a1, double *a2)
{
  if (*(unsigned char *)(a1 + 32)) {
    BOOL v3 = (*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    double v11 = *(void ***)a2;
    int v4 = (unsigned __int8 *)sub_215DEBCD0(a1);
    int v5 = *v4;
    unsigned __int8 *v4 = 7;
    uint64_t v6 = (void **)*((void *)v4 + 1);
    *((void *)v4 + 1) = v11;
    double v11 = v6;
    sub_215CEB204(&v11, v5);
  }
  else
  {
    int v17 = 0;
    sub_2157CFFD4((uint64_t)&v19, (uint64_t)v16, a2);
    if (v17 == -1) {
      sub_215742D4C();
    }
    uint64_t v19 = &v18;
    ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C6851A0[v17])(__p, &v19, v16);
    if (v17 != -1) {
      ((void (*)(char **, unsigned char *))off_26C685188[v17])(&v19, v16);
    }
    uint64_t v15 = 0;
    char v14 = 3;
    int v7 = (void **)operator new(0x18uLL);
    *(_OWORD *)int v7 = *(_OWORD *)__p;
    void v7[2] = v13;
    __p[1] = 0;
    uint64_t v13 = 0;
    __p[0] = 0;
    uint64_t v15 = v7;
    uint64_t v8 = (unsigned __int8 *)sub_215DEBCD0(a1);
    int v9 = *v8;
    *uint64_t v8 = v14;
    char v14 = v9;
    uint64_t v10 = (void **)*((void *)v8 + 1);
    *((void *)v8 + 1) = v15;
    uint64_t v15 = v10;
    sub_215CEB204(&v15, v9);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_215DEE4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, unsigned __int8 a18)
{
  sub_215CEB204(v18, a18);
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_215DEE4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DEE50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DEE520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CEB204(v10, a10);
  _Unwind_Resume(a1);
}

void sub_215DEE538(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 88)
    || *(void *)(a1 + 80) != 7
    || ((v4 = *(int **)(a1 + 72), int v5 = *v4, v6 = *(int *)((char *)v4 + 3), v5 == 1936876918)
      ? (BOOL v7 = v6 == 1852795251)
      : (BOOL v7 = 0),
        !v7))
  {
    uint64_t v8 = (void **)operator new(0x18uLL);
    int v9 = v8;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_215738B0C(v8, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
      v8[2] = *(void **)(a2 + 16);
    }
    uint64_t v13 = v9;
    uint64_t v10 = (unsigned __int8 *)sub_215DEBCD0(a1);
    int v11 = *v10;
    *uint64_t v10 = 3;
    size_t v12 = (void **)*((void *)v10 + 1);
    *((void *)v10 + 1) = v13;
    uint64_t v13 = v12;
    sub_215CEB204(&v13, v11);
  }
}

void sub_215DEE620(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_215DEE634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CEB204(v9, a9);
  _Unwind_Resume(a1);
}

void sub_215DEE64C(uint64_t a1, size_t *a2)
{
  size_t v4 = *a2;
  BOOL v3 = (const void *)a2[1];
  if (*a2)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      sub_215738AC0();
    }
    int v5 = (char *)operator new(v4);
    int v6 = &v5[v4];
    memcpy(v5, v3, v4);
  }
  else
  {
    int v6 = 0;
    int v5 = 0;
  }
  BOOL v7 = (void **)operator new(0x18uLL);
  sub_215DF5B34(v7, v5, v6);
  int v11 = v7;
  uint64_t v8 = (unsigned __int8 *)sub_215DEBCD0(a1);
  int v9 = *v8;
  *uint64_t v8 = 2;
  uint64_t v10 = (void **)*((void *)v8 + 1);
  *((void *)v8 + 1) = v11;
  int v11 = v10;
  sub_215CEB204(&v11, v9);
  if (v5) {
    operator delete(v5);
  }
}

void sub_215DEE738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CEB204(v14, a13);
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void sub_215DEE788(uint64_t a1, size_t *a2)
{
  size_t v4 = *a2;
  BOOL v3 = (const void *)a2[1];
  if (*a2)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    int v5 = (char *)operator new(v4);
    int v6 = &v5[v4];
    memcpy(v5, v3, v4);
  }
  else
  {
    int v6 = 0;
    int v5 = 0;
  }
  BOOL v7 = (void **)operator new(0x18uLL);
  sub_215DF5C28(v7, v5, v6);
  int v11 = v7;
  uint64_t v8 = (unsigned __int8 *)sub_215DEBCD0(a1);
  int v9 = *v8;
  *uint64_t v8 = 2;
  uint64_t v10 = (void **)*((void *)v8 + 1);
  *((void *)v8 + 1) = v11;
  int v11 = v10;
  sub_215CEB204(&v11, v9);
  if (v5) {
    operator delete(v5);
  }
}

void sub_215DEE874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CEB204(v14, a13);
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void sub_215DEE8C4(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(__int16 **)a2;
  size_t v4 = *(const void **)(a2 + 8);
  if (*(void *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    size_t v5 = 2 * (void)v3;
    int v6 = (char *)operator new(2 * (void)v3);
    BOOL v3 = (__int16 *)&v6[2 * (void)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    int v6 = 0;
  }
  BOOL v7 = (void **)operator new(0x18uLL);
  sub_215DF5E10(v7, (__int16 *)v6, v3);
  int v11 = v7;
  uint64_t v8 = (unsigned __int8 *)sub_215DEBCD0(a1);
  int v9 = *v8;
  *uint64_t v8 = 2;
  uint64_t v10 = (void **)*((void *)v8 + 1);
  *((void *)v8 + 1) = v11;
  int v11 = v10;
  sub_215CEB204(&v11, v9);
  if (v6) {
    operator delete(v6);
  }
}

void sub_215DEE9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CEB204(v14, a13);
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void sub_215DEEA00(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(unsigned __int16 **)a2;
  size_t v4 = *(const void **)(a2 + 8);
  if (*(void *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    size_t v5 = 2 * (void)v3;
    int v6 = (char *)operator new(2 * (void)v3);
    BOOL v3 = (unsigned __int16 *)&v6[2 * (void)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    int v6 = 0;
  }
  BOOL v7 = (void **)operator new(0x18uLL);
  sub_215DF5F08(v7, (unsigned __int16 *)v6, v3);
  int v11 = v7;
  uint64_t v8 = (unsigned __int8 *)sub_215DEBCD0(a1);
  int v9 = *v8;
  *uint64_t v8 = 2;
  uint64_t v10 = (void **)*((void *)v8 + 1);
  *((void *)v8 + 1) = v11;
  int v11 = v10;
  sub_215CEB204(&v11, v9);
  if (v6) {
    operator delete(v6);
  }
}

void sub_215DEEAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CEB204(v14, a13);
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void sub_215DEEB3C(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(int **)a2;
  size_t v4 = *(const void **)(a2 + 8);
  if (*(void *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    size_t v5 = 4 * (void)v3;
    int v6 = (char *)operator new(4 * (void)v3);
    BOOL v3 = (int *)&v6[4 * (void)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    int v6 = 0;
  }
  BOOL v7 = (void **)operator new(0x18uLL);
  sub_215DF6000(v7, (int *)v6, v3);
  int v11 = v7;
  uint64_t v8 = (unsigned __int8 *)sub_215DEBCD0(a1);
  int v9 = *v8;
  *uint64_t v8 = 2;
  uint64_t v10 = (void **)*((void *)v8 + 1);
  *((void *)v8 + 1) = v11;
  int v11 = v10;
  sub_215CEB204(&v11, v9);
  if (v6) {
    operator delete(v6);
  }
}

void sub_215DEEC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CEB204(v14, a13);
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void sub_215DEEC78(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(char **)a2;
  size_t v4 = *(const void **)(a2 + 8);
  if (*(void *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    size_t v5 = 4 * (void)v3;
    int v6 = (char *)operator new(4 * (void)v3);
    BOOL v3 = &v6[4 * (void)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    int v6 = 0;
  }
  BOOL v7 = (void **)operator new(0x18uLL);
  sub_215DF60FC(v7, v6, v3);
  int v11 = v7;
  uint64_t v8 = (unsigned __int8 *)sub_215DEBCD0(a1);
  int v9 = *v8;
  *uint64_t v8 = 2;
  uint64_t v10 = (void **)*((void *)v8 + 1);
  *((void *)v8 + 1) = v11;
  int v11 = v10;
  sub_215CEB204(&v11, v9);
  if (v6) {
    operator delete(v6);
  }
}

void sub_215DEED64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CEB204(v14, a13);
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void sub_215DEEDB4(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(char **)a2;
  size_t v4 = *(const void **)(a2 + 8);
  if (*(void *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0) {
      sub_215DF2BD4();
    }
    size_t v5 = 8 * (void)v3;
    int v6 = (char *)operator new(8 * (void)v3);
    BOOL v3 = &v6[8 * (void)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    int v6 = 0;
  }
  BOOL v7 = (void **)operator new(0x18uLL);
  sub_215DF61F8(v7, v6, v3);
  int v11 = v7;
  uint64_t v8 = (unsigned __int8 *)sub_215DEBCD0(a1);
  int v9 = *v8;
  *uint64_t v8 = 2;
  uint64_t v10 = (void **)*((void *)v8 + 1);
  *((void *)v8 + 1) = v11;
  int v11 = v10;
  sub_215CEB204(&v11, v9);
  if (v6) {
    operator delete(v6);
  }
}

void sub_215DEEEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CEB204(v14, a13);
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void sub_215DEEEF0(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(char **)a2;
  size_t v4 = *(const void **)(a2 + 8);
  if (*(void *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0) {
      sub_215CFB3BC();
    }
    size_t v5 = 8 * (void)v3;
    int v6 = (char *)operator new(8 * (void)v3);
    BOOL v3 = &v6[8 * (void)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    int v6 = 0;
  }
  BOOL v7 = (void **)operator new(0x18uLL);
  sub_215DF62F4(v7, v6, v3);
  int v11 = v7;
  uint64_t v8 = (unsigned __int8 *)sub_215DEBCD0(a1);
  int v9 = *v8;
  *uint64_t v8 = 2;
  uint64_t v10 = (void **)*((void *)v8 + 1);
  *((void *)v8 + 1) = v11;
  int v11 = v10;
  sub_215CEB204(&v11, v9);
  if (v6) {
    operator delete(v6);
  }
}

void sub_215DEEFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CEB204(v14, a13);
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void sub_215DEF02C(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(char **)a2;
  size_t v4 = *(const void **)(a2 + 8);
  if (*(void *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    size_t v5 = 8 * (void)v3;
    int v6 = (char *)operator new(8 * (void)v3);
    BOOL v3 = &v6[8 * (void)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    int v6 = 0;
  }
  BOOL v7 = (void **)operator new(0x18uLL);
  sub_215DF63F0(v7, v6, v3);
  int v11 = v7;
  uint64_t v8 = (unsigned __int8 *)sub_215DEBCD0(a1);
  int v9 = *v8;
  *uint64_t v8 = 2;
  uint64_t v10 = (void **)*((void *)v8 + 1);
  *((void *)v8 + 1) = v11;
  int v11 = v10;
  sub_215CEB204(&v11, v9);
  if (v6) {
    operator delete(v6);
  }
}

void sub_215DEF118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CEB204(v14, a13);
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void sub_215DEF168(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(char **)a2;
  size_t v4 = *(const void **)(a2 + 8);
  if (*(void *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    size_t v5 = 8 * (void)v3;
    int v6 = (char *)operator new(8 * (void)v3);
    BOOL v3 = &v6[8 * (void)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    int v6 = 0;
  }
  BOOL v7 = (void **)operator new(0x18uLL);
  sub_215DF64EC(v7, v6, v3);
  int v11 = v7;
  uint64_t v8 = (unsigned __int8 *)sub_215DEBCD0(a1);
  int v9 = *v8;
  *uint64_t v8 = 2;
  uint64_t v10 = (void **)*((void *)v8 + 1);
  *((void *)v8 + 1) = v11;
  int v11 = v10;
  sub_215CEB204(&v11, v9);
  if (v6) {
    operator delete(v6);
  }
}

void sub_215DEF254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CEB204(v14, a13);
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void sub_215DEF2A4(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    size_t v4 = (unsigned __int8 *)sub_215DEBCD0(a1);
    if (*a2)
    {
      size_t v5 = (__int16 *)a2[1];
      uint64_t v6 = 2 * *a2;
      do
      {
        if ((~(unsigned __int16)*v5 & 0x7C00) != 0)
        {
          _H0 = *v5;
          __asm { FCVT            D0, H0 }
          LOBYTE(v64) = 7;
          v65[0] = _D0;
          sub_215DF65E8((uint64_t)v4, (char *)&v64);
          sub_215CEB204(v65, v64);
        }
        else
        {
          int v66 = 0;
          sub_215DC2E88((uint64_t)&v68, (uint64_t)&v64, v5);
          if (v66 == -1) {
            sub_215742D4C();
          }
          std::string v68 = &v67;
          ((void (*)(void **__return_ptr, char **, uint64_t *))off_26C6851A0[v66])(__p, &v68, &v64);
          if (v66 != -1) {
            ((void (*)(char **, uint64_t *))off_26C685188[v66])(&v68, &v64);
          }
          int v61 = 0;
          v60[0] = 3;
          size_t v12 = (void **)operator new(0x18uLL);
          *(_OWORD *)size_t v12 = *(_OWORD *)__p;
          v12[2] = v59;
          __p[1] = 0;
          uint64_t v59 = 0;
          __p[0] = 0;
          int v61 = v12;
          sub_215DF65E8((uint64_t)v4, v60);
          sub_215CEB204(&v61, v60[0]);
          if (SHIBYTE(v59) < 0) {
            operator delete(__p[0]);
          }
        }
        ++v5;
        v6 -= 2;
      }
      while (v6);
    }
    else
    {
      uint64_t v20 = operator new(0x18uLL);
      v20[1] = 0;
      uint64_t v20[2] = 0;
      *uint64_t v20 = 0;
      int v21 = *v4;
      unsigned __int8 *v4 = 2;
      char v62 = v21;
      uint64_t v22 = (void **)*((void *)v4 + 1);
      *((void *)v4 + 1) = v20;
      uint64_t v63 = v22;
      sub_215CEB204(&v63, v21);
    }
    return;
  }
  uint64_t v13 = (char *)*a2;
  unint64_t v14 = a2[1];
  v65[0] = 0;
  v65[1] = 0;
  uint64_t v64 = 0;
  if (!v13)
  {
    int v17 = 0;
    goto LABEL_27;
  }
  uint64_t v15 = 2 * (void)v13;
  if ((unint64_t)-((-2 * (uint64_t)v13) >> 1) >> 61) {
    sub_2157E81A4();
  }
  int v16 = (char *)operator new(-8 * ((-2 * (uint64_t)v13) >> 1));
  int v17 = v16;
  unint64_t v18 = (unint64_t)(v13 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v18 < 0x17)
  {
    uint64_t v19 = (__int16 *)v14;
    uint64_t v13 = v16;
    do
    {
LABEL_26:
      __int16 v50 = *v19++;
      _H0 = v50;
      __asm { FCVT            D0, H0 }
      *(void *)uint64_t v13 = _D0;
      v13 += 8;
    }
    while (v19 != (__int16 *)(v14 + v15));
    goto LABEL_27;
  }
  _CF = (unint64_t)v16 >= v14 + 2 * (void)(v13 + 0x7FFFFFFFFFFFFFFFLL) + 2
     || v14 >= (unint64_t)&v16[8 * (void)(v13 + 0x7FFFFFFFFFFFFFFFLL) + 8];
  uint64_t v19 = (__int16 *)v14;
  uint64_t v13 = v16;
  if (!_CF) {
    goto LABEL_26;
  }
  unint64_t v24 = v18 + 1;
  uint64_t v19 = (__int16 *)(v14 + 2 * (v24 & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = &v16[8 * (v24 & 0xFFFFFFFFFFFFFFF0)];
  char v25 = v16 + 64;
  char v26 = (int8x16_t *)(v14 + 16);
  unint64_t v27 = v24 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    _Q1 = v26[-1];
    _D2 = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
    _H0 = WORD1(_D2);
    __asm
    {
      FCVT            D3, H0
      FCVT            D0, H2
    }
    *((void *)&_Q0 + 1) = _D3;
    LOWORD(_D3) = HIWORD(_D2);
    __asm { FCVT            D3, H3 }
    LOWORD(_D2) = WORD2(_D2);
    __asm { FCVT            D2, H2 }
    *((void *)&_Q2 + 1) = _D3;
    int8x16_t v35 = *v26;
    v26 += 2;
    _Q3 = v35;
    _H4 = _Q1.i16[1];
    __asm
    {
      FCVT            D4, H4
      FCVT            D5, H1
    }
    *((void *)&_Q5 + 1) = _D4;
    LOWORD(_D4) = _Q1.i16[3];
    __asm { FCVT            D4, H4 }
    _Q1.i16[0] = _Q1.i16[2];
    __asm { FCVT            D1, H1 }
    _Q1.i64[1] = _D4;
    _D4 = vextq_s8(_Q3, _Q3, 8uLL).u64[0];
    _H6 = WORD1(_D4);
    __asm
    {
      FCVT            D6, H6
      FCVT            D7, H4
    }
    *((void *)&_Q7 + 1) = _D6;
    LOWORD(_D6) = HIWORD(_D4);
    __asm { FCVT            D6, H6 }
    LOWORD(_D4) = WORD2(_D4);
    __asm { FCVT            D4, H4 }
    *((void *)&_Q4 + 1) = _D6;
    LOWORD(_D6) = v35.i16[1];
    __asm
    {
      FCVT            D6, H6
      FCVT            D16, H3
    }
    *((void *)&_Q16 + 1) = _D6;
    LOWORD(_D6) = v35.i16[3];
    __asm { FCVT            D6, H6 }
    _Q3.i16[0] = v35.i16[2];
    __asm { FCVT            D3, H3 }
    _Q3.i64[1] = _D6;
    *(v25 - 4) = _Q5;
    *(v25 - 3) = _Q1;
    *(v25 - 2) = _Q0;
    *(v25 - 1) = _Q2;
    *char v25 = _Q16;
    v25[1] = _Q3;
    uint64_t v25[2] = _Q7;
    void v25[3] = _Q4;
    v25 += 8;
    v27 -= 16;
  }
  while (v27);
  if (v24 != (v24 & 0xFFFFFFFFFFFFFFF0)) {
    goto LABEL_26;
  }
LABEL_27:
  std::string::size_type v53 = (void **)operator new(0x18uLL);
  sub_215DF678C(v53, v17, v13);
  std::string::size_type v57 = v53;
  uint64_t v54 = (unsigned __int8 *)sub_215DEBCD0(a1);
  int v55 = *v54;
  unsigned __int8 *v54 = 2;
  uint64_t v56 = (void **)*((void *)v54 + 1);
  *((void *)v54 + 1) = v57;
  std::string::size_type v57 = v56;
  sub_215CEB204(&v57, v55);
  if (v17) {
    operator delete(v17);
  }
}

void sub_215DEF66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  sub_215CEB204(v24, a10);
  if (v23)
  {
    operator delete(v23);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_215DEF73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DEF750(uint64_t a1, float **__sz)
{
  if (*(unsigned char *)(a1 + 32))
  {
    size_t v4 = (unsigned __int8 *)sub_215DEBCD0(a1);
    size_t v5 = *__sz;
    if (*__sz)
    {
      uint64_t v6 = __sz[1];
      uint64_t v7 = 4 * (void)v5;
      do
      {
        float v8 = *v6;
        if ((*(_DWORD *)v6 & 0x7FFFFFFFu) > 0x7F7FFFFF)
        {
          int v34 = 0;
          sub_2157D208C((uint64_t)&v36, (uint64_t)&v32, v6);
          if (v34 == -1) {
            sub_215742D4C();
          }
          size_t v36 = &v35;
          ((void (*)(void **__return_ptr, char **, uint64_t *))off_26C6851A0[v34])(__p, &v36, &v32);
          if (v34 != -1) {
            ((void (*)(char **, uint64_t *))off_26C685188[v34])(&v36, &v32);
          }
          int v29 = 0;
          v28[0] = 3;
          int v9 = (void **)operator new(0x18uLL);
          *(_OWORD *)int v9 = *(_OWORD *)__p;
          void v9[2] = v27;
          __p[1] = 0;
          unint64_t v27 = 0;
          __p[0] = 0;
          int v29 = v9;
          sub_215DF65E8((uint64_t)v4, v28);
          sub_215CEB204(&v29, v28[0]);
          if (SHIBYTE(v27) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          LOBYTE(v32) = 7;
          *(double *)uint64_t v33 = v8;
          sub_215DF65E8((uint64_t)v4, (char *)&v32);
          sub_215CEB204(v33, v32);
        }
        ++v6;
        v7 -= 4;
      }
      while (v7);
    }
    else
    {
      unint64_t v14 = operator new(0x18uLL);
      v14[1] = 0;
      v14[2] = 0;
      void *v14 = 0;
      int v15 = *v4;
      unsigned __int8 *v4 = 2;
      char v30 = v15;
      int v16 = (void **)*((void *)v4 + 1);
      *((void *)v4 + 1) = v14;
      uint64_t v31 = v16;
      sub_215CEB204(&v31, v15);
    }
  }
  else
  {
    int v11 = *__sz;
    uint64_t v10 = __sz[1];
    v33[0] = 0;
    v33[1] = 0;
    uint64_t v32 = 0;
    if (v11)
    {
      if (((unint64_t)v11 & 0x8000000000000000) != 0) {
        sub_2157E81A4();
      }
      size_t v12 = 4 * (void)v11;
      uint64_t v13 = (float *)operator new(4 * (void)v11);
      int v11 = &v13[(void)v11];
      memcpy(v13, v10, v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    char v25 = 0;
    int v17 = (void **)operator new(0x18uLL);
    char *v17 = 0;
    v17[1] = 0;
    v17[2] = 0;
    uint64_t v18 = (char *)v11 - (char *)v13;
    if (v11 != v13)
    {
      if ((unint64_t)v18 >= 0x3FFFFFFFFFFFFFFDLL) {
        sub_215CEA45C();
      }
      uint64_t v19 = (double *)operator new(4 * v18);
      char *v17 = v19;
      v17[1] = v19;
      v17[2] = &v19[2 * (v18 >> 2)];
      if (v13 != v11)
      {
        uint64_t v20 = v13;
        do
        {
          float v21 = *v20++;
          *(unsigned char *)uint64_t v19 = 7;
          v19[1] = v21;
          v19 += 2;
        }
        while (v20 != v11);
      }
      v17[1] = v19;
    }
    char v25 = v17;
    uint64_t v22 = (unsigned __int8 *)sub_215DEBCD0(a1);
    int v23 = *v22;
    unsigned __int8 *v22 = 2;
    unint64_t v24 = (void **)*((void *)v22 + 1);
    *((void *)v22 + 1) = v25;
    char v25 = v24;
    sub_215CEB204(&v25, v23);
    if (v13) {
      operator delete(v13);
    }
  }
}

void sub_215DEFA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  char v25 = v24;
  sub_215CEB204(v25, a10);
  if (v23)
  {
    operator delete(v23);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_215DEFB74(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    size_t v4 = (unsigned __int8 *)sub_215DEBCD0(a1);
    if (*a2)
    {
      size_t v5 = (double *)a2[1];
      uint64_t v6 = 8 * *a2;
      do
      {
        uint64_t v7 = *(void ***)v5;
        if ((*(void *)v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          LOBYTE(v27) = 7;
          v28[0] = v7;
          sub_215DF65E8((uint64_t)v4, (char *)&v27);
          sub_215CEB204(v28, v27);
        }
        else
        {
          int v29 = 0;
          sub_2157CFFD4((uint64_t)&v31, (uint64_t)&v27, v5);
          if (v29 == -1) {
            sub_215742D4C();
          }
          uint64_t v31 = &v30;
          ((void (*)(void **__return_ptr, char **, uint64_t *))off_26C6851A0[v29])(__p, &v31, &v27);
          if (v29 != -1) {
            ((void (*)(char **, uint64_t *))off_26C685188[v29])(&v31, &v27);
          }
          unint64_t v24 = 0;
          v23[0] = 3;
          float v8 = (void **)operator new(0x18uLL);
          *(_OWORD *)float v8 = *(_OWORD *)__p;
          v8[2] = v22;
          __p[1] = 0;
          uint64_t v22 = 0;
          __p[0] = 0;
          unint64_t v24 = v8;
          sub_215DF65E8((uint64_t)v4, v23);
          sub_215CEB204(&v24, v23[0]);
          if (SHIBYTE(v22) < 0) {
            operator delete(__p[0]);
          }
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
    else
    {
      uint64_t v13 = operator new(0x18uLL);
      v13[1] = 0;
      void v13[2] = 0;
      *uint64_t v13 = 0;
      int v14 = *v4;
      unsigned __int8 *v4 = 2;
      char v25 = v14;
      int v15 = (void **)*((void *)v4 + 1);
      *((void *)v4 + 1) = v13;
      char v26 = v15;
      sub_215CEB204(&v26, v14);
    }
  }
  else
  {
    int v9 = (char *)*a2;
    uint64_t v10 = (const void *)a2[1];
    v28[0] = 0;
    v28[1] = 0;
    uint64_t v27 = 0;
    if (v9)
    {
      if (((unint64_t)v9 & 0x8000000000000000) != 0) {
        sub_2157E81A4();
      }
      size_t v11 = 8 * (void)v9;
      size_t v12 = (char *)operator new(8 * (void)v9);
      int v9 = &v12[8 * (void)v9];
      memcpy(v12, v10, v11);
    }
    else
    {
      size_t v12 = 0;
    }
    int v16 = (void **)operator new(0x18uLL);
    sub_215DF678C(v16, v12, v9);
    uint64_t v20 = v16;
    int v17 = (unsigned __int8 *)sub_215DEBCD0(a1);
    int v18 = *v17;
    unsigned __int8 *v17 = 2;
    uint64_t v19 = (void **)*((void *)v17 + 1);
    *((void *)v17 + 1) = v20;
    uint64_t v20 = v19;
    sub_215CEB204(&v20, v18);
    if (v12) {
      operator delete(v12);
    }
  }
}

void sub_215DEFE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  sub_215CEB204(v24, a10);
  if (v23)
  {
    operator delete(v23);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_215DEFEE4(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  BOOL v3 = (unsigned char *)a2[1];
  unint64_t v17 = 0;
  unint64_t v18 = 0;
  std::string __p = 0;
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      sub_215D2CB08();
    }
    unint64_t v5 = (v4 - 1) >> 6;
    uint64_t v6 = operator new(8 * (v5 + 1));
    int v7 = 0;
    unint64_t v17 = v4;
    unint64_t v18 = v5 + 1;
    std::string __p = v6;
    if (v4 >= 0x41) {
      unint64_t v8 = (v4 - 1) >> 6;
    }
    else {
      unint64_t v8 = 0;
    }
    v6[v8] = 0;
    do
    {
      uint64_t v10 = 1 << v7;
      if (*v3) {
        uint64_t v9 = *v6 | v10;
      }
      else {
        uint64_t v9 = *v6 & ~v10;
      }
      *uint64_t v6 = v9;
      ++v3;
      v6 += v7 == 63;
      if (v7 == 63) {
        int v7 = 0;
      }
      else {
        ++v7;
      }
      --v4;
    }
    while (v4);
  }
  v14[0] = 0;
  int v15 = 0;
  sub_215DF6888((uint64_t)v14, (uint64_t)&__p);
  size_t v11 = (unsigned __int8 *)sub_215DEBCD0(a1);
  int v12 = *v11;
  unsigned __int8 *v11 = v14[0];
  v14[0] = v12;
  uint64_t v13 = (void **)*((void *)v11 + 1);
  *((void *)v11 + 1) = v15;
  int v15 = v13;
  sub_215CEB204(&v15, v12);
  if (__p) {
    operator delete(__p);
  }
}

void sub_215DF0008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, void *__p)
{
  sub_215CEB204(v12, a10);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_215DF0038(uint64_t a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 + 24 * *a2;
  int v16 = 0;
  uint64_t v17 = 0;
  std::string __p = 0;
  sub_215DF2BEC((char *)&__p, v4, v5, v3);
  uint64_t v19 = 0;
  char v18 = 2;
  uint64_t v6 = (long long *)__p;
  int v7 = v16;
  unint64_t v8 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  sub_215DF69CC(v8, v6, v7, 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 3));
  uint64_t v19 = (void **)v8;
  uint64_t v9 = (unsigned __int8 *)sub_215DEBCD0(a1);
  int v10 = *v9;
  *uint64_t v9 = v18;
  char v18 = v10;
  size_t v11 = (void **)*((void *)v9 + 1);
  *((void *)v9 + 1) = v19;
  uint64_t v19 = v11;
  sub_215CEB204(&v19, v10);
  int v12 = (long long *)__p;
  if (__p)
  {
    uint64_t v13 = v16;
    int v14 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*((void **)v13 - 3));
        }
        uint64_t v13 = (long long *)((char *)v13 - 24);
      }
      while (v13 != v12);
      int v14 = __p;
    }
    int v16 = v12;
    operator delete(v14);
  }
}

void sub_215DF0150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CEB204(v13, a13);
  sub_2157352DC(&a10);
  _Unwind_Resume(a1);
}

void sub_215DF0170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  operator delete(v10);
  sub_2157352DC(&a10);
  _Unwind_Resume(a1);
}

void sub_215DF018C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2157352DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215DF01A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = sub_215DF045C((void *)a1);
  ++*(void *)(a1 + 112);
  *(void *)(a1 + 32) = v3;
  uint64_t v5 = *(char **)(a1 + 48);
  unint64_t v4 = *(void *)(a1 + 56);
  uint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(void *)uint64_t v5 = v2;
    uint64_t v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  unint64_t v8 = *(char **)(a1 + 40);
  uint64_t v9 = (v5 - v8) >> 3;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61) {
    sub_215DF2BD4();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 2 > v10) {
    unint64_t v10 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 61) {
      goto LABEL_47;
    }
    uint64_t v13 = (char *)operator new(8 * v12);
    int v14 = &v13[8 * v9];
    int v15 = &v13[8 * v12];
    *(void *)int v14 = v2;
    uint64_t v7 = (uint64_t)(v14 + 8);
    int v16 = (char *)(v5 - v8);
    if (v5 == v8) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  uint64_t v13 = 0;
  int v14 = (char *)(8 * v9);
  int v15 = 0;
  *(void *)(8 * v9) = v2;
  uint64_t v7 = 8 * v9 + 8;
  int v16 = (char *)(v5 - v8);
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v17 = (unint64_t)(v16 - 8);
    if (v17 < 0x58) {
      goto LABEL_52;
    }
    if ((unint64_t)(v8 - v13) < 0x20) {
      goto LABEL_52;
    }
    uint64_t v18 = (v17 >> 3) + 1;
    uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v6 = &v5[-v19];
    v14 -= v19;
    uint64_t v20 = &v13[8 * v9 - 16];
    float v21 = (long long *)(v5 - 16);
    uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)uint64_t v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_52:
      do
      {
        uint64_t v24 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v14 - 1) = v24;
        v14 -= 8;
      }
      while (v6 != v8);
    }
    uint64_t v6 = *(char **)(a1 + 40);
  }
LABEL_21:
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v14;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v15;
  if (v6) {
    operator delete(v6);
  }
LABEL_23:
  *(void *)(a1 + 48) = v7;
  char v26 = *(char **)(a1 + 72);
  unint64_t v25 = *(void *)(a1 + 80);
  if ((unint64_t)v26 < v25)
  {
    *(void *)char v26 = *(void *)(a1 + 112);
    uint64_t v27 = v26 + 8;
    goto LABEL_44;
  }
  uint64_t v28 = *(char **)(a1 + 64);
  uint64_t v29 = (v26 - v28) >> 3;
  unint64_t v30 = v29 + 1;
  if ((unint64_t)(v29 + 1) >> 61) {
    sub_215CFB3BC();
  }
  uint64_t v31 = v25 - (void)v28;
  if (v31 >> 2 > v30) {
    unint64_t v30 = v31 >> 2;
  }
  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v32 = v30;
  }
  if (v32)
  {
    if (!(v32 >> 61))
    {
      uint64_t v33 = operator new(8 * v32);
      goto LABEL_35;
    }
LABEL_47:
    sub_215738AD8();
  }
  uint64_t v33 = 0;
LABEL_35:
  int v34 = &v33[8 * v29];
  char v35 = &v33[8 * v32];
  *int v34 = *(void *)(a1 + 112);
  uint64_t v27 = v34 + 1;
  if (v26 != v28)
  {
    unint64_t v36 = v26 - v28 - 8;
    if (v36 < 0x58) {
      goto LABEL_53;
    }
    if ((unint64_t)(v28 - v33) < 0x20) {
      goto LABEL_53;
    }
    uint64_t v37 = (v36 >> 3) + 1;
    uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
    char v39 = &v26[-v38];
    int v34 = (void *)((char *)v34 - v38);
    uint64_t v40 = &v33[8 * v29 - 16];
    std::string v41 = v26 - 16;
    uint64_t v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v43 = *(_OWORD *)v41;
      *(v40 - 1) = *((_OWORD *)v41 - 1);
      *uint64_t v40 = v43;
      v40 -= 2;
      v41 -= 32;
      v42 -= 4;
    }
    while (v42);
    char v26 = v39;
    if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_53:
      do
      {
        uint64_t v44 = *((void *)v26 - 1);
        v26 -= 8;
        *--int v34 = v44;
      }
      while (v26 != v28);
    }
  }
  *(void *)(a1 + 64) = v34;
  *(void *)(a1 + 72) = v27;
  *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v35;
  if (v28) {
    operator delete(v28);
  }
LABEL_44:
  *(void *)(a1 + 72) = v27;
  *(void *)(a1 + 112) = 0;
  if (*(unsigned char *)(a1 + 104)) {
    *(unsigned char *)(a1 + 104) = 0;
  }
}

uint64_t sub_215DF045C(void *a1)
{
  uint64_t v1 = (unsigned char *)a1[4];
  if (*v1 == 2)
  {
    uint64_t v2 = a1[14];
    uint64_t v3 = a1[4];
    return sub_215D2FCAC(v3, v2);
  }
  size_t v5 = a1[12];
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  uint64_t v6 = (const void *)a1[11];
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v7 = (const void **)operator new(v8 + 1);
    __dst[1] = (const void *)v5;
    unint64_t v12 = v9 | 0x8000000000000000;
    __dst[0] = v7;
  }
  else
  {
    HIBYTE(v12) = a1[12];
    uint64_t v7 = __dst;
    if (!v5) {
      goto LABEL_13;
    }
  }
  memmove(v7, v6, v5);
LABEL_13:
  *((unsigned char *)v7 + v5) = 0;
  unint64_t v10 = sub_215DDD1B4((uint64_t)v1, __dst);
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)__dst[0]);
  }
  return (uint64_t)v10;
}

void sub_215DF056C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF0588(unint64_t a1, uint64_t a2)
{
  std::string __p = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  sub_215DF331C(a1, (uint64_t)&__p);
  uint64_t v3 = __p;
  unint64_t v4 = v8;
  if (__p != v8)
  {
    size_t v5 = *(unsigned char **)(a2 + 8);
    do
    {
      if (*v3 >= 0x100uLL)
      {
        exceptiounint64_t n = __cxa_allocate_exception(8uLL);
        void *exception = &unk_26C686698;
        __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v3++;
    }
    while (v3 != v4);
    uint64_t v3 = __p;
  }
  if (v3)
  {
    uint64_t v8 = v3;
    operator delete(v3);
  }
}

void sub_215DF0640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF0660(void *a1, uint64_t *a2, unsigned __int8 *a3)
{
  sub_215D2F4F0((uint64_t)v6, a3);
  *a1 = &unk_26C6851C8;
  uint64_t v5 = *a2;
  *a1 = &unk_26C685060;
  a1[1] = v5;
  operator new();
}

void sub_215DF0754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CEB204((void ***)(v9 + 8), a9);
  _Unwind_Resume(a1);
}

uint64_t sub_215DF076C(uint64_t a1)
{
  *(void *)a1 = &unk_26C685060;
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 40);
  if (v3)
  {
    *(void *)(a1 + 48) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    (*(void (**)(void))(a1 + 24))();
  }
  return a1;
}

void sub_215DF07E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = sub_215DF0AA0((void *)a1);
  ++*(void *)(a1 + 112);
  *(void *)(a1 + 32) = v3;
  uint64_t v5 = *(char **)(a1 + 48);
  unint64_t v4 = *(void *)(a1 + 56);
  uint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(void *)uint64_t v5 = v2;
    uint64_t v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  uint64_t v8 = *(char **)(a1 + 40);
  uint64_t v9 = (v5 - v8) >> 3;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61) {
    sub_215DF2BD4();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 2 > v10) {
    unint64_t v10 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 61) {
      goto LABEL_47;
    }
    uint64_t v13 = (char *)operator new(8 * v12);
    int v14 = &v13[8 * v9];
    int v15 = &v13[8 * v12];
    *(void *)int v14 = v2;
    uint64_t v7 = (uint64_t)(v14 + 8);
    int v16 = (char *)(v5 - v8);
    if (v5 == v8) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  uint64_t v13 = 0;
  int v14 = (char *)(8 * v9);
  int v15 = 0;
  *(void *)(8 * v9) = v2;
  uint64_t v7 = 8 * v9 + 8;
  int v16 = (char *)(v5 - v8);
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v17 = (unint64_t)(v16 - 8);
    if (v17 < 0x58) {
      goto LABEL_52;
    }
    if ((unint64_t)(v8 - v13) < 0x20) {
      goto LABEL_52;
    }
    uint64_t v18 = (v17 >> 3) + 1;
    uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v6 = &v5[-v19];
    v14 -= v19;
    uint64_t v20 = &v13[8 * v9 - 16];
    float v21 = (long long *)(v5 - 16);
    uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)uint64_t v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_52:
      do
      {
        uint64_t v24 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v14 - 1) = v24;
        v14 -= 8;
      }
      while (v6 != v8);
    }
    uint64_t v6 = *(char **)(a1 + 40);
  }
LABEL_21:
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v14;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v15;
  if (v6) {
    operator delete(v6);
  }
LABEL_23:
  *(void *)(a1 + 48) = v7;
  char v26 = *(char **)(a1 + 72);
  unint64_t v25 = *(void *)(a1 + 80);
  if ((unint64_t)v26 < v25)
  {
    *(void *)char v26 = *(void *)(a1 + 112);
    uint64_t v27 = v26 + 8;
    goto LABEL_44;
  }
  uint64_t v28 = *(char **)(a1 + 64);
  uint64_t v29 = (v26 - v28) >> 3;
  unint64_t v30 = v29 + 1;
  if ((unint64_t)(v29 + 1) >> 61) {
    sub_215CFB3BC();
  }
  uint64_t v31 = v25 - (void)v28;
  if (v31 >> 2 > v30) {
    unint64_t v30 = v31 >> 2;
  }
  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v32 = v30;
  }
  if (v32)
  {
    if (!(v32 >> 61))
    {
      uint64_t v33 = operator new(8 * v32);
      goto LABEL_35;
    }
LABEL_47:
    sub_215738AD8();
  }
  uint64_t v33 = 0;
LABEL_35:
  int v34 = &v33[8 * v29];
  char v35 = &v33[8 * v32];
  *int v34 = *(void *)(a1 + 112);
  uint64_t v27 = v34 + 1;
  if (v26 != v28)
  {
    unint64_t v36 = v26 - v28 - 8;
    if (v36 < 0x58) {
      goto LABEL_53;
    }
    if ((unint64_t)(v28 - v33) < 0x20) {
      goto LABEL_53;
    }
    uint64_t v37 = (v36 >> 3) + 1;
    uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
    char v39 = &v26[-v38];
    int v34 = (void *)((char *)v34 - v38);
    uint64_t v40 = &v33[8 * v29 - 16];
    std::string v41 = v26 - 16;
    uint64_t v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v43 = *(_OWORD *)v41;
      *(v40 - 1) = *((_OWORD *)v41 - 1);
      *uint64_t v40 = v43;
      v40 -= 2;
      v41 -= 32;
      v42 -= 4;
    }
    while (v42);
    char v26 = v39;
    if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_53:
      do
      {
        uint64_t v44 = *((void *)v26 - 1);
        v26 -= 8;
        *--int v34 = v44;
      }
      while (v26 != v28);
    }
  }
  *(void *)(a1 + 64) = v34;
  *(void *)(a1 + 72) = v27;
  *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v35;
  if (v28) {
    operator delete(v28);
  }
LABEL_44:
  *(void *)(a1 + 72) = v27;
  *(void *)(a1 + 112) = 0;
  if (*(unsigned char *)(a1 + 104)) {
    *(unsigned char *)(a1 + 104) = 0;
  }
}

uint64_t sub_215DF0AA0(void *a1)
{
  uint64_t v1 = (unsigned char *)a1[4];
  if (*v1 == 2)
  {
    uint64_t v2 = a1[14];
    uint64_t v3 = a1[4];
    return sub_215D305C4(v3, v2);
  }
  size_t v5 = a1[12];
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  uint64_t v6 = (const void *)a1[11];
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v7 = (unsigned __int8 *)operator new(v8 + 1);
    __dst[1] = (unsigned __int8 *)v5;
    unint64_t v12 = v9 | 0x8000000000000000;
    __dst[0] = v7;
  }
  else
  {
    HIBYTE(v12) = a1[12];
    uint64_t v7 = (unsigned __int8 *)__dst;
    if (!v5) {
      goto LABEL_13;
    }
  }
  memmove(v7, v6, v5);
LABEL_13:
  v7[v5] = 0;
  uint64_t v10 = sub_215DDD2CC((uint64_t)v1, __dst);
  if (SHIBYTE(v12) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_215DF0BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF0BCC(unint64_t a1, uint64_t a2)
{
  std::string __p = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  sub_215DF4844(a1, (uint64_t)&__p);
  uint64_t v3 = __p;
  unint64_t v4 = v8;
  if (__p != v8)
  {
    size_t v5 = *(unsigned char **)(a2 + 8);
    do
    {
      if (*v3 >= 0x100uLL)
      {
        exceptiounint64_t n = __cxa_allocate_exception(8uLL);
        void *exception = &unk_26C686698;
        __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v3++;
    }
    while (v3 != v4);
    uint64_t v3 = __p;
  }
  if (v3)
  {
    uint64_t v8 = v3;
    operator delete(v3);
  }
}

void sub_215DF0C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF0CA4(void *a1, unsigned char *a2)
{
  unint64_t v4 = (char *)sub_215DF045C(a1);
  ++a1[14];
  uint64_t v6 = 0;
  sub_215D30030(v4, &v6);
  if (v6 != (char)v6)
  {
    exceptiounint64_t n = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C686698;
    __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_215DF0D3C(void *a1, unsigned char *a2)
{
  unint64_t v4 = (char *)sub_215DF045C(a1);
  ++a1[14];
  unint64_t v6 = 0;
  sub_215D2FEDC(v4, &v6);
  if (v6 >= 0x100)
  {
    exceptiounint64_t n = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C686698;
    __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_215DF0DD4(void *a1, _WORD *a2)
{
  unint64_t v4 = (char *)sub_215DF045C(a1);
  ++a1[14];
  uint64_t v6 = 0;
  sub_215D30030(v4, &v6);
  if (v6 != (__int16)v6)
  {
    exceptiounint64_t n = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C686698;
    __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_215DF0E6C(void *a1, _WORD *a2)
{
  unint64_t v4 = (char *)sub_215DF045C(a1);
  ++a1[14];
  unint64_t v6 = 0;
  sub_215D2FEDC(v4, &v6);
  if (v6 >= 0x10000)
  {
    exceptiounint64_t n = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C686698;
    __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_215DF0F04(void *a1, _DWORD *a2)
{
  unint64_t v4 = (char *)sub_215DF045C(a1);
  ++a1[14];
  uint64_t v6 = 0;
  sub_215D30030(v4, &v6);
  if (v6 != (int)v6)
  {
    exceptiounint64_t n = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C686698;
    __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_215DF0F9C(void *a1, _DWORD *a2)
{
  unint64_t v4 = (char *)sub_215DF045C(a1);
  ++a1[14];
  unint64_t v6 = 0;
  sub_215D2FEDC(v4, &v6);
  if (HIDWORD(v6))
  {
    exceptiounint64_t n = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C686698;
    __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_215DF1034(unint64_t a1, uint64_t a2)
{
  std::string __p = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  sub_215DF2D20(a1, (uint64_t)&__p);
  uint64_t v3 = __p;
  unint64_t v4 = v8;
  if (__p != v8)
  {
    size_t v5 = *(unsigned char **)(a2 + 8);
    do
    {
      if (*v3 != (char)*v3)
      {
        exceptiounint64_t n = __cxa_allocate_exception(8uLL);
        void *exception = &unk_26C686698;
        __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v3++;
    }
    while (v3 != v4);
    uint64_t v3 = __p;
  }
  if (v3)
  {
    uint64_t v8 = v3;
    operator delete(v3);
  }
}

void sub_215DF10EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF110C(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_215DF045C(a1);
  ++a1[14];

  sub_215DF0588(v4, a2);
}

void sub_215DF1154(unint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_215DF2D20(a1, (uint64_t)&v8);
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  if (v8 != v9)
  {
    size_t v5 = *(_WORD **)(a2 + 8);
    unint64_t v6 = v8;
    do
    {
      if (*v6 != (__int16)*v6)
      {
        exceptiounint64_t n = __cxa_allocate_exception(8uLL);
        void *exception = &unk_26C686698;
        __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v6++;
    }
    while (v6 != v4);
  }
  if (v3)
  {
    uint64_t v9 = v3;
    operator delete(v3);
  }
}

void sub_215DF120C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF122C(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_215DF045C(a1);
  ++a1[14];

  sub_215DF1274(v4, a2);
}

void sub_215DF1274(unint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_215DF331C(a1, (uint64_t)&v8);
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  if (v8 != v9)
  {
    size_t v5 = *(_WORD **)(a2 + 8);
    unint64_t v6 = v8;
    do
    {
      if (*v6 >= 0x10000uLL)
      {
        exceptiounint64_t n = __cxa_allocate_exception(8uLL);
        void *exception = &unk_26C686698;
        __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v6++;
    }
    while (v6 != v4);
  }
  if (v3)
  {
    uint64_t v9 = v3;
    operator delete(v3);
  }
}

void sub_215DF132C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF134C(unint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_215DF2D20(a1, (uint64_t)&v8);
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  if (v8 != v9)
  {
    size_t v5 = *(_DWORD **)(a2 + 8);
    unint64_t v6 = v8;
    do
    {
      if (*v6 != (int)*v6)
      {
        exceptiounint64_t n = __cxa_allocate_exception(8uLL);
        void *exception = &unk_26C686698;
        __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v6++;
    }
    while (v6 != v4);
  }
  if (v3)
  {
    uint64_t v9 = v3;
    operator delete(v3);
  }
}

void sub_215DF1404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF1424(unint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_215DF331C(a1, (uint64_t)&v8);
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  if (v8 != v9)
  {
    size_t v5 = *(_DWORD **)(a2 + 8);
    unint64_t v6 = v8;
    do
    {
      if (HIDWORD(*v6))
      {
        exceptiounint64_t n = __cxa_allocate_exception(8uLL);
        void *exception = &unk_26C686698;
        __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v6++;
    }
    while (v6 != v4);
  }
  if (v3)
  {
    uint64_t v9 = v3;
    operator delete(v3);
  }
}

void sub_215DF14DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF14FC(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_215DF045C(a1);
  ++a1[14];
  size_t v5 = *(__int16 **)(a2 + 8);

  sub_215DF1544(v4, v5);
}

void sub_215DF1544(unint64_t a1, __int16 *a2)
{
  if (*(unsigned char *)a1 == 2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 8);
    uint64_t v5 = *v3;
    unint64_t v4 = (unsigned __int8 *)v3[1];
    float v21 = (unsigned __int8 *)a1;
    uint64_t v22 = 0;
    uint64_t v23 = v5;
    unint64_t v24 = 0x8000000000000000;
    v20[0] = (unsigned __int8 *)a1;
    v20[1] = 0;
    uint64_t v20[2] = v4;
    for (void v20[3] = (unsigned __int8 *)0x8000000000000000; !sub_215D31030(&v21, v20); ++a2)
    {
      unint64_t v6 = (void **)sub_215D3138C((uint64_t)&v21);
      int v7 = *(unsigned __int8 *)v6;
      if ((v7 - 5) > 2)
      {
        if (v7 == 3)
        {
          memset(v25, 0, sizeof(v25));
          sub_215D3040C(v6, (uint64_t)v25);
          sub_215DF6B18();
        }
        __int16 v13 = 0x7FFF;
      }
      else
      {
        v25[0] = 0.0;
        sub_215D30184((uint64_t *)v6, v25);
        _S0 = v25[0];
        __asm { FCVT            H0, S0 }
        __int16 v13 = LOWORD(_S0);
      }
      *a2 = v13;
      int v14 = *v21;
      if (v14 == 2)
      {
        v23 += 16;
      }
      else if (v14 == 1)
      {
        int v15 = v22;
        int v16 = (void *)v22[1];
        if (v16)
        {
          do
          {
            unint64_t v17 = v16;
            int v16 = (void *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            unint64_t v17 = (void *)v15[2];
            _ZF = *v17 == (void)v15;
            int v15 = v17;
          }
          while (!_ZF);
        }
        uint64_t v22 = v17;
      }
      else
      {
        ++v24;
      }
    }
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    sub_215DF6DE0(a1, (uint64_t)__p);
    uint64_t v18 = __p[0];
    if (__p[0])
    {
      operator delete(v18);
    }
  }
}

void sub_215DF16D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF1708(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_215DF045C(a1);
  ++a1[14];
  uint64_t v5 = *(float **)(a2 + 8);

  sub_215DF1750(v4, v5);
}

void sub_215DF1750(unint64_t a1, float *a2)
{
  if (*(unsigned char *)a1 == 2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 8);
    uint64_t v5 = *v3;
    unint64_t v4 = (unsigned __int8 *)v3[1];
    int v15 = (unsigned __int8 *)a1;
    int v16 = 0;
    uint64_t v17 = v5;
    unint64_t v18 = 0x8000000000000000;
    v14[0] = (unsigned __int8 *)a1;
    v14[1] = 0;
    v14[2] = v4;
    for (void v14[3] = (unsigned __int8 *)0x8000000000000000; !sub_215D31030(&v15, v14); ++a2)
    {
      unint64_t v6 = (uint64_t *)sub_215D3138C((uint64_t)&v15);
      *a2 = sub_215DF6C1C(v6);
      int v7 = *v15;
      if (v7 == 2)
      {
        v17 += 16;
      }
      else if (v7 == 1)
      {
        uint64_t v8 = v16;
        uint64_t v9 = (void *)v16[1];
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (void *)v8[2];
            BOOL v11 = *v10 == (void)v8;
            uint64_t v8 = v10;
          }
          while (!v11);
        }
        int v16 = v10;
      }
      else
      {
        ++v18;
      }
    }
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    sub_215DF6DE0(a1, (uint64_t)__p);
    unint64_t v12 = __p[0];
    if (__p[0])
    {
      operator delete(v12);
    }
  }
}

void sub_215DF187C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF1894(unint64_t a1, double *a2)
{
  if (*(unsigned char *)a1 == 2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 8);
    uint64_t v5 = *v3;
    unint64_t v4 = (unsigned __int8 *)v3[1];
    int v15 = (unsigned __int8 *)a1;
    int v16 = 0;
    uint64_t v17 = v5;
    unint64_t v18 = 0x8000000000000000;
    v14[0] = (unsigned __int8 *)a1;
    v14[1] = 0;
    v14[2] = v4;
    for (void v14[3] = (unsigned __int8 *)0x8000000000000000; !sub_215D31030(&v15, v14); ++a2)
    {
      unint64_t v6 = (uint64_t *)sub_215D3138C((uint64_t)&v15);
      *a2 = sub_215DF6D00(v6);
      int v7 = *v15;
      if (v7 == 2)
      {
        v17 += 16;
      }
      else if (v7 == 1)
      {
        uint64_t v8 = v16;
        uint64_t v9 = (void *)v16[1];
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (void *)v8[2];
            BOOL v11 = *v10 == (void)v8;
            uint64_t v8 = v10;
          }
          while (!v11);
        }
        int v16 = v10;
      }
      else
      {
        ++v18;
      }
    }
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    sub_215DF6DE0(a1, (uint64_t)__p);
    unint64_t v12 = __p[0];
    if (__p[0])
    {
      operator delete(v12);
    }
  }
}

void sub_215DF19C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_215DF19D8(uint64_t a1, unsigned __int8 *a2, void **a3)
{
  long long v8 = 0uLL;
  uint64_t v9 = 0;
  sub_215DF3F0C(a2, (void **)&v8);
  unint64_t v4 = (void **)*a3;
  if (*a3)
  {
    uint64_t v5 = (void **)a3[1];
    unint64_t v6 = *a3;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 3;
      }
      while (v5 != v4);
      unint64_t v6 = *a3;
    }
    a3[1] = v4;
    operator delete(v6);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  double result = *(double *)&v8;
  *(_OWORD *)a3 = v8;
  a3[2] = v9;
  return result;
}

void sub_215DF1A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10)
{
  if (__p)
  {
    BOOL v11 = a10;
    unint64_t v12 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != __p);
      unint64_t v12 = __p;
    }
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF1AD0(void *a1, unsigned char *a2)
{
  unint64_t v4 = (char *)sub_215DF0AA0(a1);
  ++a1[14];
  uint64_t v6 = 0;
  sub_215D30830(v4, &v6);
  if (v6 != (char)v6)
  {
    exceptiounint64_t n = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C686698;
    __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_215DF1B68(void *a1, unsigned char *a2)
{
  unint64_t v4 = (char *)sub_215DF0AA0(a1);
  ++a1[14];
  unint64_t v6 = 0;
  sub_215D306DC(v4, &v6);
  if (v6 >= 0x100)
  {
    exceptiounint64_t n = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C686698;
    __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_215DF1C00(void *a1, _WORD *a2)
{
  unint64_t v4 = (char *)sub_215DF0AA0(a1);
  ++a1[14];
  uint64_t v6 = 0;
  sub_215D30830(v4, &v6);
  if (v6 != (__int16)v6)
  {
    exceptiounint64_t n = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C686698;
    __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_215DF1C98(void *a1, _WORD *a2)
{
  unint64_t v4 = (char *)sub_215DF0AA0(a1);
  ++a1[14];
  unint64_t v6 = 0;
  sub_215D306DC(v4, &v6);
  if (v6 >= 0x10000)
  {
    exceptiounint64_t n = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C686698;
    __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_215DF1D30(void *a1, _DWORD *a2)
{
  unint64_t v4 = (char *)sub_215DF0AA0(a1);
  ++a1[14];
  uint64_t v6 = 0;
  sub_215D30830(v4, &v6);
  if (v6 != (int)v6)
  {
    exceptiounint64_t n = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C686698;
    __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_215DF1DC8(void *a1, _DWORD *a2)
{
  unint64_t v4 = (char *)sub_215DF0AA0(a1);
  ++a1[14];
  unint64_t v6 = 0;
  sub_215D306DC(v4, &v6);
  if (HIDWORD(v6))
  {
    exceptiounint64_t n = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C686698;
    __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_215DF1E60(unint64_t a1, uint64_t a2)
{
  std::string __p = 0;
  long long v8 = 0;
  uint64_t v9 = 0;
  sub_215DF45EC(a1, (uint64_t)&__p);
  uint64_t v3 = __p;
  unint64_t v4 = v8;
  if (__p != v8)
  {
    uint64_t v5 = *(unsigned char **)(a2 + 8);
    do
    {
      if (*v3 != (char)*v3)
      {
        exceptiounint64_t n = __cxa_allocate_exception(8uLL);
        void *exception = &unk_26C686698;
        __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v3++;
    }
    while (v3 != v4);
    uint64_t v3 = __p;
  }
  if (v3)
  {
    long long v8 = v3;
    operator delete(v3);
  }
}

void sub_215DF1F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF1F38(unint64_t a1, uint64_t a2)
{
  std::string __p = 0;
  long long v8 = 0;
  uint64_t v9 = 0;
  sub_215DF45EC(a1, (uint64_t)&__p);
  uint64_t v3 = __p;
  unint64_t v4 = v8;
  if (__p != v8)
  {
    uint64_t v5 = *(unsigned char **)(a2 + 8);
    do
    {
      if (*v3 != (char)*v3)
      {
        exceptiounint64_t n = __cxa_allocate_exception(8uLL);
        void *exception = &unk_26C686698;
        __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v3++;
    }
    while (v3 != v4);
    uint64_t v3 = __p;
  }
  if (v3)
  {
    long long v8 = v3;
    operator delete(v3);
  }
}

void sub_215DF1FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF2010(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_215DF0AA0(a1);
  ++a1[14];

  sub_215DF0BCC(v4, a2);
}

void sub_215DF2058(unint64_t a1, uint64_t a2)
{
  long long v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_215DF45EC(a1, (uint64_t)&v8);
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  if (v8 != v9)
  {
    uint64_t v5 = *(_WORD **)(a2 + 8);
    unint64_t v6 = v8;
    do
    {
      if (*v6 != (__int16)*v6)
      {
        exceptiounint64_t n = __cxa_allocate_exception(8uLL);
        void *exception = &unk_26C686698;
        __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v6++;
    }
    while (v6 != v4);
  }
  if (v3)
  {
    uint64_t v9 = v3;
    operator delete(v3);
  }
}

void sub_215DF2110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF2130(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_215DF0AA0(a1);
  ++a1[14];

  sub_215DF2178(v4, a2);
}

void sub_215DF2178(unint64_t a1, uint64_t a2)
{
  long long v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_215DF4844(a1, (uint64_t)&v8);
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  if (v8 != v9)
  {
    uint64_t v5 = *(_WORD **)(a2 + 8);
    unint64_t v6 = v8;
    do
    {
      if (*v6 >= 0x10000uLL)
      {
        exceptiounint64_t n = __cxa_allocate_exception(8uLL);
        void *exception = &unk_26C686698;
        __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v6++;
    }
    while (v6 != v4);
  }
  if (v3)
  {
    uint64_t v9 = v3;
    operator delete(v3);
  }
}

void sub_215DF2230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF2250(unint64_t a1, uint64_t a2)
{
  long long v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_215DF45EC(a1, (uint64_t)&v8);
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  if (v8 != v9)
  {
    uint64_t v5 = *(_DWORD **)(a2 + 8);
    unint64_t v6 = v8;
    do
    {
      if (*v6 != (int)*v6)
      {
        exceptiounint64_t n = __cxa_allocate_exception(8uLL);
        void *exception = &unk_26C686698;
        __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v6++;
    }
    while (v6 != v4);
  }
  if (v3)
  {
    uint64_t v9 = v3;
    operator delete(v3);
  }
}

void sub_215DF2308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF2328(unint64_t a1, uint64_t a2)
{
  long long v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_215DF4844(a1, (uint64_t)&v8);
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  if (v8 != v9)
  {
    uint64_t v5 = *(_DWORD **)(a2 + 8);
    unint64_t v6 = v8;
    do
    {
      if (HIDWORD(*v6))
      {
        exceptiounint64_t n = __cxa_allocate_exception(8uLL);
        void *exception = &unk_26C686698;
        __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v6++;
    }
    while (v6 != v4);
  }
  if (v3)
  {
    uint64_t v9 = v3;
    operator delete(v3);
  }
}

void sub_215DF23E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF2400(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_215DF0AA0(a1);
  ++a1[14];
  uint64_t v5 = *(__int16 **)(a2 + 8);

  sub_215DF2448(v4, v5);
}

void sub_215DF2448(unint64_t a1, __int16 *a2)
{
  if (*(unsigned char *)a1 == 2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 8);
    uint64_t v5 = *v3;
    unint64_t v4 = (unsigned __int8 *)v3[1];
    unint64_t v18 = (unsigned __int8 *)a1;
    uint64_t v19 = 0;
    uint64_t v20 = v5;
    unint64_t v21 = 0x8000000000000000;
    v17[0] = (unsigned __int8 *)a1;
    v17[1] = 0;
    v17[2] = v4;
    for (void v17[3] = (unsigned __int8 *)0x8000000000000000; !sub_215D315D8(&v18, v17); ++a2)
    {
      unint64_t v6 = (void **)sub_215D316E4((uint64_t)&v18);
      int v7 = *(unsigned __int8 *)v6;
      if ((v7 - 5) > 2)
      {
        if (v7 == 3)
        {
          memset(v22, 0, sizeof(v22));
          sub_215D30C0C(v6, (uint64_t)v22);
          sub_215DF6B18();
        }
        __int16 v13 = 0x7FFF;
      }
      else
      {
        v22[0] = 0.0;
        sub_215D30984((uint64_t *)v6, v22);
        _S0 = v22[0];
        __asm { FCVT            H0, S0 }
        __int16 v13 = LOWORD(_S0);
      }
      *a2 = v13;
      int v14 = *v18;
      if (v14 == 2)
      {
        v20 += 16;
      }
      else if (v14 == 1)
      {
        v19 += 40;
      }
      else
      {
        ++v21;
      }
    }
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    sub_215DF75A0(a1, (uint64_t)__p);
    int v15 = __p[0];
    if (__p[0])
    {
      operator delete(v15);
    }
  }
}

void sub_215DF25B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF25E4(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_215DF0AA0(a1);
  ++a1[14];
  uint64_t v5 = *(float **)(a2 + 8);

  sub_215DF262C(v4, v5);
}

void sub_215DF262C(unint64_t a1, float *a2)
{
  if (*(unsigned char *)a1 == 2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 8);
    uint64_t v5 = *v3;
    unint64_t v4 = (unsigned __int8 *)v3[1];
    BOOL v11 = (unsigned __int8 *)a1;
    uint64_t v12 = 0;
    uint64_t v13 = v5;
    unint64_t v14 = 0x8000000000000000;
    v10[0] = (unsigned __int8 *)a1;
    v10[1] = 0;
    void v10[2] = v4;
    for (v10[3] = (unsigned __int8 *)0x8000000000000000; !sub_215D315D8(&v11, v10); ++a2)
    {
      unint64_t v6 = (uint64_t *)sub_215D316E4((uint64_t)&v11);
      *a2 = sub_215DF73DC(v6);
      int v7 = *v11;
      if (v7 == 2)
      {
        v13 += 16;
      }
      else if (v7 == 1)
      {
        v12 += 40;
      }
      else
      {
        ++v14;
      }
    }
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    sub_215DF75A0(a1, (uint64_t)__p);
    long long v8 = __p[0];
    if (__p[0])
    {
      operator delete(v8);
    }
  }
}

void sub_215DF2730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF2748(unint64_t a1, double *a2)
{
  if (*(unsigned char *)a1 == 2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 8);
    uint64_t v5 = *v3;
    unint64_t v4 = (unsigned __int8 *)v3[1];
    BOOL v11 = (unsigned __int8 *)a1;
    uint64_t v12 = 0;
    uint64_t v13 = v5;
    unint64_t v14 = 0x8000000000000000;
    v10[0] = (unsigned __int8 *)a1;
    v10[1] = 0;
    void v10[2] = v4;
    for (v10[3] = (unsigned __int8 *)0x8000000000000000; !sub_215D315D8(&v11, v10); ++a2)
    {
      unint64_t v6 = (uint64_t *)sub_215D316E4((uint64_t)&v11);
      *a2 = sub_215DF74C0(v6);
      int v7 = *v11;
      if (v7 == 2)
      {
        v13 += 16;
      }
      else if (v7 == 1)
      {
        v12 += 40;
      }
      else
      {
        ++v14;
      }
    }
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    sub_215DF75A0(a1, (uint64_t)__p);
    long long v8 = __p[0];
    if (__p[0])
    {
      operator delete(v8);
    }
  }
}

void sub_215DF284C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF2864(void *a1, uint64_t a2)
{
  unint64_t v4 = (unsigned __int8 *)sub_215DF0AA0(a1);
  ++a1[14];
  int v15 = 0;
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  sub_215DF4A9C(v4, (uint64_t)&v15);
  uint64_t v5 = v15;
  int v6 = v16 & 0x3F;
  if (v16 > 0x3F || v6 != 0)
  {
    int v8 = 0;
    int v9 = 0;
    uint64_t v10 = &v15[8 * (v16 >> 6)];
    BOOL v11 = *(unsigned char **)(a2 + 8);
    uint64_t v12 = v15;
    do
    {
      *v11++ = (*(void *)v12 >> v9) & 1;
      int v13 = v9 + 1;
      v12 += 8 * (v8 == 63);
      if (v8 == 63) {
        int v8 = 0;
      }
      else {
        int v8 = v13;
      }
      BOOL v14 = v12 == v10 && v6 == v8;
      int v9 = v8;
    }
    while (!v14);
  }
  if (v5) {
    operator delete(v5);
  }
}

void sub_215DF2918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF2930(void *a1, uint64_t a2)
{
  unint64_t v4 = (unsigned __int8 *)sub_215DF0AA0(a1);
  ++a1[14];
  std::string __p = 0;
  int v15 = 0;
  uint64_t v16 = 0;
  sub_215DF4D58(v4, &__p);
  uint64_t v5 = (size_t *)__p;
  int v6 = (size_t *)v15;
  if (__p != v15)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    do
    {
      if (v5 != (size_t *)v7)
      {
        signed __int8 v10 = *((unsigned char *)v5 + 23);
        if (*(char *)(v7 + 23) < 0)
        {
          if (v10 >= 0) {
            int v8 = v5;
          }
          else {
            int v8 = (void *)*v5;
          }
          if (v10 >= 0) {
            size_t v9 = *((unsigned __int8 *)v5 + 23);
          }
          else {
            size_t v9 = v5[1];
          }
          sub_21573ABD0((void **)v7, v8, v9);
        }
        else if ((*((unsigned char *)v5 + 23) & 0x80) != 0)
        {
          sub_21573AB08((void *)v7, (void *)*v5, v5[1]);
        }
        else
        {
          long long v11 = *(_OWORD *)v5;
          *(void *)(v7 + 16) = v5[2];
          *(_OWORD *)uint64_t v7 = v11;
        }
      }
      v5 += 3;
      v7 += 24;
    }
    while (v5 != v6);
    uint64_t v5 = (size_t *)__p;
  }
  if (v5)
  {
    uint64_t v12 = v15;
    int v13 = v5;
    if (v15 != (void **)v5)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != (void **)v5);
      int v13 = __p;
    }
    int v15 = (void **)v5;
    operator delete(v13);
  }
}

void sub_215DF2A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, void **a11)
{
  if (__p)
  {
    uint64_t v12 = a11;
    int v13 = __p;
    if (a11 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != __p);
      int v13 = __p;
    }
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

double sub_215DF2ADC(uint64_t a1, unsigned __int8 *a2, void **a3)
{
  long long v8 = 0uLL;
  size_t v9 = 0;
  sub_215DF4D58(a2, (void **)&v8);
  unint64_t v4 = (void **)*a3;
  if (*a3)
  {
    uint64_t v5 = (void **)a3[1];
    int v6 = *a3;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 3;
      }
      while (v5 != v4);
      int v6 = *a3;
    }
    a3[1] = v4;
    operator delete(v6);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  double result = *(double *)&v8;
  *(_OWORD *)a3 = v8;
  a3[2] = v9;
  return result;
}

void sub_215DF2B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10)
{
  if (__p)
  {
    long long v11 = a10;
    uint64_t v12 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != __p);
      uint64_t v12 = __p;
    }
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF2BD4()
{
}

char *sub_215DF2BEC(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      sub_215738AC0();
    }
    double result = (char *)operator new(24 * a4);
    long long v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    v5[2] = &result[24 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        double result = &v8[v9];
        uint64_t v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          double result = (char *)sub_215738B0C(result, *(void **)v10, *(void *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)double result = *(_OWORD *)v10;
          *((void *)result + 2) = *(void *)(v10 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_215DF2CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_215DF2CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0) {
      operator delete(*(void **)(v10 + v11 - 24));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_21573A27C(&a9);
  _Unwind_Resume(a1);
}

double sub_215DF2D20(unint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1 != 2)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x20uLL);
    unint64_t v18 = (char *)sub_215D2DC9C((char *)a1);
    sub_215732BF4(&v19, v18);
    sub_215AC8CC8("type must be array, but is ", &v19, &v21);
    sub_215D2DB00(302, (uint64_t)&v21, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
  }
  unint64_t v24 = 0;
  long long v23 = 0uLL;
  unint64_t v4 = *(std::string::size_type **)(a1 + 8);
  std::string::size_type v5 = v4[1];
  uint64_t v6 = v5 - *v4;
  if (v5 == *v4)
  {
    uint64_t v7 = 0;
    std::string::size_type v8 = v4[1];
  }
  else
  {
    if (v6 < 0) {
      sub_2157E81A4();
    }
    uint64_t v7 = (char *)operator new((unint64_t)v6 >> 1);
    *(void *)&long long v23 = v7;
    *((void *)&v23 + 1) = v7;
    unint64_t v24 = &v7[8 * (v6 >> 4)];
    std::string::size_type v8 = *v4;
    std::string::size_type v5 = v4[1];
  }
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = a1;
  v21.__r_.__value_.__r.__words[2] = v8;
  unint64_t v22 = 0x8000000000000000;
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = a1;
  v19.__r_.__value_.__r.__words[2] = v5;
  unint64_t v20 = 0x8000000000000000;
  while (!sub_215D31030((unsigned __int8 **)&v21, (unsigned __int8 **)&v19))
  {
    uint64_t v9 = sub_215D3138C((uint64_t)&v21);
    uint64_t v25 = 0;
    sub_215D30030(v9, &v25);
    uint64_t v7 = sub_215DF2FA8((void **)&v23, v7, &v25) + 8;
    int v10 = *v21.__r_.__value_.__l.__data_;
    if (v10 == 2)
    {
      v21.__r_.__value_.__r.__words[2] += 16;
    }
    else if (v10 == 1)
    {
      std::string::size_type size = v21.__r_.__value_.__l.__size_;
      uint64_t v12 = *(void **)(v21.__r_.__value_.__l.__size_ + 8);
      if (v12)
      {
        do
        {
          int v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          int v13 = *(void **)(size + 16);
          BOOL v14 = *v13 == size;
          std::string::size_type size = (std::string::size_type)v13;
        }
        while (!v14);
      }
      v21.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
    }
    else
    {
      ++v22;
    }
  }
  int v15 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v15;
    operator delete(v15);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  double result = *(double *)&v23;
  *(_OWORD *)a2 = v23;
  *(void *)(a2 + 16) = v24;
  return result;
}

void sub_215DF2F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF2F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v14);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

char *sub_215DF2FA8(void **a1, unsigned char *a2, void *a3)
{
  unint64_t v6 = (unint64_t)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)uint64_t v9 = *a3;
      a1[1] = v9 + 8;
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    int v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      uint64_t v17 = a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      unint64_t v15 = v14 + v6 + 8;
      if (v5 > v15) {
        unint64_t v15 = (unint64_t)a1[1];
      }
      unint64_t v16 = v15 + ~v6 - v14;
      if (v16 >= 0x58)
      {
        uint64_t v17 = a1[1];
        if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFF8) + 8 - v6] >= 0x20)
        {
          uint64_t v45 = (v16 >> 3) + 1;
          uint64_t v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
          int v13 = (uint64_t *)((char *)v13 + v46);
          uint64_t v17 = (void *)(v5 + v46);
          std::string::size_type v47 = (_OWORD *)(v5 + 16);
          unint64_t v48 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v50 = *v48;
            *(v47 - 1) = *(v48 - 1);
            _OWORD *v47 = v50;
            v47 += 2;
            v48 += 2;
            v49 -= 4;
          }
          while (v49);
          if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_49;
          }
        }
      }
      else
      {
        uint64_t v17 = a1[1];
      }
      do
      {
        uint64_t v51 = *v13++;
        *v17++ = v51;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_49:
    a1[1] = v17;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)uint64_t v9 = *a3;
    return v9;
  }
  unint64_t v18 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v18 >> 61) {
    sub_2157E81A4();
  }
  uint64_t v20 = v10 - v6;
  if (v20 >> 2 > v18) {
    unint64_t v18 = v20 >> 2;
  }
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v21 = v18;
  }
  if (v21)
  {
    if (v21 >> 61) {
      sub_215738AD8();
    }
    unint64_t v22 = (char *)operator new(8 * v21);
    long long v23 = &v22[8 * v8];
    unint64_t v24 = &v22[8 * v21];
    if (v8 != v21) {
      goto LABEL_24;
    }
  }
  else
  {
    unint64_t v22 = 0;
    long long v23 = (char *)(8 * v8);
    unint64_t v24 = 0;
    if (v8) {
      goto LABEL_24;
    }
  }
  if (v7 < 1)
  {
    if ((unsigned char *)v6 == a2) {
      unint64_t v44 = 1;
    }
    else {
      unint64_t v44 = v7 >> 2;
    }
    if (v44 >> 61) {
      sub_215738AD8();
    }
    long long v23 = (char *)operator new(8 * v44);
    unint64_t v24 = &v23[8 * v44];
    if (v22)
    {
      operator delete(v22);
      unint64_t v24 = &v23[8 * v44];
      char v26 = (char *)*a1;
      *(void *)long long v23 = *a3;
      uint64_t v27 = v23 + 8;
      uint64_t v28 = v23;
      if (v26 != v9) {
        goto LABEL_25;
      }
      goto LABEL_31;
    }
  }
  else
  {
    unint64_t v25 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v25 = v8 + 1;
    }
    v23 -= 8 * (v25 >> 1);
  }
LABEL_24:
  char v26 = (char *)v6;
  *(void *)long long v23 = *a3;
  uint64_t v27 = v23 + 8;
  uint64_t v28 = v23;
  if ((char *)v6 != v9)
  {
LABEL_25:
    uint64_t v29 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v30 = v29 - v26 - 8;
    uint64_t v31 = v9;
    uint64_t v28 = v23;
    if (v30 < 0x58) {
      goto LABEL_58;
    }
    uint64_t v31 = v9;
    uint64_t v28 = v23;
    if ((unint64_t)(v29 - v23) < 0x20) {
      goto LABEL_58;
    }
    uint64_t v32 = (v30 >> 3) + 1;
    uint64_t v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v31 = &v9[-v33];
    uint64_t v28 = &v23[-v33];
    int v34 = v23 - 16;
    char v35 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v37 = *v35;
      *((_OWORD *)v34 - 1) = *(v35 - 1);
      *(_OWORD *)int v34 = v37;
      v34 -= 32;
      v35 -= 2;
      v36 -= 4;
    }
    while (v36);
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        uint64_t v38 = *((void *)v31 - 1);
        v31 -= 8;
        *((void *)v28 - 1) = v38;
        v28 -= 8;
      }
      while (v31 != v26);
    }
  }
LABEL_31:
  char v39 = (char *)a1[1];
  int64_t v40 = v39 - v9;
  if (v39 != v9)
  {
    std::string v41 = v9;
    size_t v42 = v39 - v9;
    long long v43 = v24;
    memmove(v27, v41, v42);
    unint64_t v24 = v43;
    char v26 = (char *)*a1;
  }
  *a1 = v28;
  a1[1] = &v27[v40];
  a1[2] = v24;
  if (v26) {
    operator delete(v26);
  }
  return v23;
}

void sub_215DF3304(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_215DF331C(unint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1 != 2)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x20uLL);
    unint64_t v18 = (char *)sub_215D2DC9C((char *)a1);
    sub_215732BF4(&v19, v18);
    sub_215AC8CC8("type must be array, but is ", &v19, &v21);
    sub_215D2DB00(302, (uint64_t)&v21, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
  }
  unint64_t v24 = 0;
  long long v23 = 0uLL;
  unint64_t v4 = *(std::string::size_type **)(a1 + 8);
  std::string::size_type v5 = v4[1];
  uint64_t v6 = v5 - *v4;
  if (v5 == *v4)
  {
    uint64_t v7 = 0;
    std::string::size_type v8 = v4[1];
  }
  else
  {
    if (v6 < 0) {
      sub_2157E81A4();
    }
    uint64_t v7 = (char *)operator new((unint64_t)v6 >> 1);
    *(void *)&long long v23 = v7;
    *((void *)&v23 + 1) = v7;
    unint64_t v24 = &v7[8 * (v6 >> 4)];
    std::string::size_type v8 = *v4;
    std::string::size_type v5 = v4[1];
  }
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = a1;
  v21.__r_.__value_.__r.__words[2] = v8;
  unint64_t v22 = 0x8000000000000000;
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = a1;
  v19.__r_.__value_.__r.__words[2] = v5;
  unint64_t v20 = 0x8000000000000000;
  while (!sub_215D31030((unsigned __int8 **)&v21, (unsigned __int8 **)&v19))
  {
    uint64_t v9 = sub_215D3138C((uint64_t)&v21);
    uint64_t v25 = 0;
    sub_215D2FEDC(v9, &v25);
    uint64_t v7 = sub_215DF35A4((void **)&v23, v7, &v25) + 8;
    int v10 = *v21.__r_.__value_.__l.__data_;
    if (v10 == 2)
    {
      v21.__r_.__value_.__r.__words[2] += 16;
    }
    else if (v10 == 1)
    {
      std::string::size_type size = v21.__r_.__value_.__l.__size_;
      uint64_t v12 = *(void **)(v21.__r_.__value_.__l.__size_ + 8);
      if (v12)
      {
        do
        {
          int v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          int v13 = *(void **)(size + 16);
          BOOL v14 = *v13 == size;
          std::string::size_type size = (std::string::size_type)v13;
        }
        while (!v14);
      }
      v21.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
    }
    else
    {
      ++v22;
    }
  }
  unint64_t v15 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v15;
    operator delete(v15);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  double result = *(double *)&v23;
  *(_OWORD *)a2 = v23;
  *(void *)(a2 + 16) = v24;
  return result;
}

void sub_215DF3514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF356C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v14);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

char *sub_215DF35A4(void **a1, unsigned char *a2, void *a3)
{
  unint64_t v6 = (unint64_t)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)uint64_t v9 = *a3;
      a1[1] = v9 + 8;
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    int v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      uint64_t v17 = a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      unint64_t v15 = v14 + v6 + 8;
      if (v5 > v15) {
        unint64_t v15 = (unint64_t)a1[1];
      }
      unint64_t v16 = v15 + ~v6 - v14;
      if (v16 >= 0x58)
      {
        uint64_t v17 = a1[1];
        if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFF8) + 8 - v6] >= 0x20)
        {
          uint64_t v45 = (v16 >> 3) + 1;
          uint64_t v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
          int v13 = (uint64_t *)((char *)v13 + v46);
          uint64_t v17 = (void *)(v5 + v46);
          std::string::size_type v47 = (_OWORD *)(v5 + 16);
          unint64_t v48 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v50 = *v48;
            *(v47 - 1) = *(v48 - 1);
            _OWORD *v47 = v50;
            v47 += 2;
            v48 += 2;
            v49 -= 4;
          }
          while (v49);
          if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_49;
          }
        }
      }
      else
      {
        uint64_t v17 = a1[1];
      }
      do
      {
        uint64_t v51 = *v13++;
        *v17++ = v51;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_49:
    a1[1] = v17;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)uint64_t v9 = *a3;
    return v9;
  }
  unint64_t v18 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v18 >> 61) {
    sub_2157E81A4();
  }
  uint64_t v20 = v10 - v6;
  if (v20 >> 2 > v18) {
    unint64_t v18 = v20 >> 2;
  }
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v21 = v18;
  }
  if (v21)
  {
    if (v21 >> 61) {
      sub_215738AD8();
    }
    unint64_t v22 = (char *)operator new(8 * v21);
    long long v23 = &v22[8 * v8];
    unint64_t v24 = &v22[8 * v21];
    if (v8 != v21) {
      goto LABEL_24;
    }
  }
  else
  {
    unint64_t v22 = 0;
    long long v23 = (char *)(8 * v8);
    unint64_t v24 = 0;
    if (v8) {
      goto LABEL_24;
    }
  }
  if (v7 < 1)
  {
    if ((unsigned char *)v6 == a2) {
      unint64_t v44 = 1;
    }
    else {
      unint64_t v44 = v7 >> 2;
    }
    if (v44 >> 61) {
      sub_215738AD8();
    }
    long long v23 = (char *)operator new(8 * v44);
    unint64_t v24 = &v23[8 * v44];
    if (v22)
    {
      operator delete(v22);
      unint64_t v24 = &v23[8 * v44];
      char v26 = (char *)*a1;
      *(void *)long long v23 = *a3;
      uint64_t v27 = v23 + 8;
      uint64_t v28 = v23;
      if (v26 != v9) {
        goto LABEL_25;
      }
      goto LABEL_31;
    }
  }
  else
  {
    unint64_t v25 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v25 = v8 + 1;
    }
    v23 -= 8 * (v25 >> 1);
  }
LABEL_24:
  char v26 = (char *)v6;
  *(void *)long long v23 = *a3;
  uint64_t v27 = v23 + 8;
  uint64_t v28 = v23;
  if ((char *)v6 != v9)
  {
LABEL_25:
    uint64_t v29 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v30 = v29 - v26 - 8;
    uint64_t v31 = v9;
    uint64_t v28 = v23;
    if (v30 < 0x58) {
      goto LABEL_58;
    }
    uint64_t v31 = v9;
    uint64_t v28 = v23;
    if ((unint64_t)(v29 - v23) < 0x20) {
      goto LABEL_58;
    }
    uint64_t v32 = (v30 >> 3) + 1;
    uint64_t v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v31 = &v9[-v33];
    uint64_t v28 = &v23[-v33];
    int v34 = v23 - 16;
    char v35 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v37 = *v35;
      *((_OWORD *)v34 - 1) = *(v35 - 1);
      *(_OWORD *)int v34 = v37;
      v34 -= 32;
      v35 -= 2;
      v36 -= 4;
    }
    while (v36);
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        uint64_t v38 = *((void *)v31 - 1);
        v31 -= 8;
        *((void *)v28 - 1) = v38;
        v28 -= 8;
      }
      while (v31 != v26);
    }
  }
LABEL_31:
  char v39 = (char *)a1[1];
  int64_t v40 = v39 - v9;
  if (v39 != v9)
  {
    std::string v41 = v9;
    size_t v42 = v39 - v9;
    long long v43 = v24;
    memmove(v27, v41, v42);
    unint64_t v24 = v43;
    char v26 = (char *)*a1;
  }
  *a1 = v28;
  a1[1] = &v27[v40];
  a1[2] = v24;
  if (v26) {
    operator delete(v26);
  }
  return v23;
}

void sub_215DF3900(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF3918(uint64_t a1, void **a2, uint64_t a3, unsigned int a4, unsigned char *a5)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  unint64_t v10 = (unint64_t)a2[1];
  int64_t v11 = a2[2];
  unint64_t v12 = (void)v11 << 6;
  if (v10 < (void)v11 << 6)
  {
    int v13 = (char *)*a2;
    unint64_t v14 = (char *)*a2 + 8 * (v10 >> 6);
    unint64_t v15 = (unint64_t)a2[1] & 0x3F;
    char v16 = v10 + 1;
    a2[1] = (void *)(v10 + 1);
    uint64_t v17 = (unint64_t *)&v13[8 * ((v10 + 1) >> 6)];
    if ((v16 & 0x3F) == v15)
    {
      uint64_t v18 = a4;
      uint64_t v19 = v15 - a4 + 8 * ((void)v14 - a3);
      if (v19 >= 1)
      {
        if (v15)
        {
          if (v19 >= v15) {
            uint64_t v20 = v15;
          }
          else {
            uint64_t v20 = v15 - a4 + 8 * ((void)v14 - a3);
          }
          v19 -= v20;
          unint64_t v21 = (-1 << (v15 - v20)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v15);
          unint64_t *v17 = *v17 & ~v21 | *v14 & v21;
        }
        if (v19 >= 0) {
          uint64_t v22 = v19;
        }
        else {
          uint64_t v22 = v19 + 63;
        }
        uint64_t v23 = v22 >> 6;
        size_t v24 = 8 * (v22 >> 6);
        unint64_t v25 = &v17[v24 / 0xFFFFFFFFFFFFFFF8];
        char v26 = &v14[v24 / 0xFFFFFFFFFFFFFFF8];
        if ((unint64_t)(v19 + 63) >= 0x7F) {
          memmove(&v17[v24 / 0xFFFFFFFFFFFFFFF8], &v14[v24 / 0xFFFFFFFFFFFFFFF8], v24);
        }
        if (v19 - (v23 << 6) >= 1) {
          *(v25 - 1) = *(v25 - 1) & ~(-1 << (((_BYTE)v23 << 6) - v19)) | *(v26 - 1) & (-1 << (((_BYTE)v23 << 6) - v19));
        }
      }
      uint64_t v27 = (char *)*a2;
      uint64_t v28 = v18 + 8 * (a3 - (void)*a2);
      if (v28 >= 0) {
        goto LABEL_17;
      }
    }
    else
    {
      std::string __dst = v17;
      LODWORD(v57) = v16 & 0x3F;
      sub_215DF3D0C((uint64_t)&v58, a3, a4, v14, v15, (uint64_t)&__dst);
      uint64_t v27 = (char *)*a2;
      uint64_t v28 = a4 + 8 * (a3 - (void)*a2);
      if (v28 >= 0)
      {
LABEL_17:
        unint64_t v29 = (unint64_t)v28 >> 6;
LABEL_48:
        int v34 = &v27[8 * v29];
        LOBYTE(v38) = v28 & 0x3F;
        *(void *)a1 = v34;
        *(_DWORD *)(a1 + 8) = v28 & 0x3F;
        goto LABEL_52;
      }
    }
    uint64_t v50 = v28 - 63;
    if (v28 - 63 < 0) {
      uint64_t v50 = v28;
    }
    unint64_t v29 = v50 >> 6;
    goto LABEL_48;
  }
  std::string __dst = 0;
  long long v57 = 0uLL;
  if ((uint64_t)(v10 + 1) < 0) {
    sub_215D2CB08();
  }
  unint64_t v30 = (void)v11 << 7;
  unint64_t v31 = (v10 & 0xFFFFFFFFFFFFFFC0) + 64;
  if (v30 > v31) {
    unint64_t v31 = v30;
  }
  if (v12 <= 0x3FFFFFFFFFFFFFFELL) {
    unint64_t v32 = v31;
  }
  else {
    unint64_t v32 = 0x7FFFFFFFFFFFFFFFLL;
  }
  sub_215D39348((uint64_t)&__dst, v32);
  uint64_t v33 = *a2;
  *(void *)&long long v57 = (char *)a2[1] + 1;
  int v34 = (char *)__dst;
  uint64_t v35 = a4;
  uint64_t v36 = a4 + 8 * (a3 - (void)v33);
  if (v36 < 1) {
    goto LABEL_29;
  }
  unint64_t v37 = (unint64_t)v36 >> 6;
  if ((unint64_t)v36 >= 0x40) {
    memmove(__dst, v33, 8 * v37);
  }
  v34 += 8 * v37;
  if ((v36 & 0x3F) != 0)
  {
    *(void *)int v34 = *(void *)v34 & ~(0xFFFFFFFFFFFFFFFFLL >> -((a4 + 8 * (a3 - (_BYTE)v33)) & 0x3F)) | *((void *)v33 + v37) & (0xFFFFFFFFFFFFFFFFLL >> -((a4 + 8 * (a3 - (_BYTE)v33)) & 0x3F));
    int v38 = (a4 + 8 * (a3 - v33)) & 0x3F;
  }
  else
  {
LABEL_29:
    int v38 = 0;
  }
  *(void *)a1 = v34;
  *(_DWORD *)(a1 + 8) = v38;
  char v39 = (char *)*a2 + 8 * ((unint64_t)a2[1] >> 6);
  unint64_t v40 = (unint64_t)a2[1] & 0x3F;
  std::string v41 = (unint64_t *)((char *)__dst + 8 * ((unint64_t)v57 >> 6));
  if ((v57 & 0x3F) == v40)
  {
    uint64_t v42 = v40 - a4 + 8 * ((void)v39 - a3);
    if (v42 >= 1)
    {
      if (v40)
      {
        if (v42 >= v40) {
          uint64_t v43 = (unint64_t)a2[1] & 0x3F;
        }
        else {
          uint64_t v43 = v40 - v35 + 8 * ((void)v39 - a3);
        }
        v42 -= v43;
        unint64_t v44 = (-1 << (v40 - v43)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v40);
        *std::string v41 = *v41 & ~v44 | *v39 & v44;
      }
      if (v42 >= 0) {
        uint64_t v45 = v42;
      }
      else {
        uint64_t v45 = v42 + 63;
      }
      uint64_t v46 = v45 >> 6;
      size_t v47 = 8 * (v45 >> 6);
      unint64_t v48 = &v41[v47 / 0xFFFFFFFFFFFFFFF8];
      uint64_t v49 = &v39[v47 / 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v42 + 63) >= 0x7F) {
        memmove(&v41[v47 / 0xFFFFFFFFFFFFFFF8], &v39[v47 / 0xFFFFFFFFFFFFFFF8], v47);
      }
      if (v42 - (v46 << 6) >= 1) {
        *(v48 - 1) = *(v48 - 1) & ~(-1 << (((_BYTE)v46 << 6) - v42)) | *(v49 - 1) & (-1 << (((_BYTE)v46 << 6) - v42));
      }
    }
  }
  else
  {
    unsigned __int8 v58 = (char *)__dst + 8 * ((unint64_t)v57 >> 6);
    int v59 = v57 & 0x3F;
    sub_215DF3D0C((uint64_t)v55, a3, a4, v39, v40, (uint64_t)&v58);
  }
  uint64_t v51 = *a2;
  *a2 = __dst;
  std::string __dst = v51;
  long long v52 = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a2 + 1) = v57;
  long long v57 = v52;
  if (v51) {
    operator delete(v51);
  }
LABEL_52:
  uint64_t v53 = 1 << v38;
  if (*a5) {
    uint64_t v54 = *(void *)v34 | v53;
  }
  else {
    uint64_t v54 = *(void *)v34 & ~v53;
  }
  *(void *)int v34 = v54;
}

void sub_215DF3CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215DF3D0C(uint64_t result, uint64_t a2, unsigned int a3, void *a4, unsigned int a5, uint64_t a6)
{
  int64_t v6 = a5 - (unint64_t)a3 + 8 * ((void)a4 - a2);
  if (v6 <= 0)
  {
    int64_t v11 = *(unint64_t **)a6;
    LODWORD(v9) = *(_DWORD *)(a6 + 8);
LABEL_16:
    *(void *)double result = v11;
    *(_DWORD *)(result + 8) = v9;
    return result;
  }
  if (a5)
  {
    if (v6 >= (unint64_t)a5) {
      int64_t v7 = a5;
    }
    else {
      int64_t v7 = a5 - (unint64_t)a3 + 8 * ((void)a4 - a2);
    }
    v6 -= v7;
    unint64_t v8 = (-1 << (a5 - v7)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)a5) & *a4;
    unint64_t v9 = *(unsigned int *)(a6 + 8);
    if (v7 >= v9) {
      int64_t v10 = *(unsigned int *)(a6 + 8);
    }
    else {
      int64_t v10 = v7;
    }
    int64_t v11 = *(unint64_t **)a6;
    if (v10)
    {
      unint64_t v12 = v8 >> (a5 - v9);
      if (v9 > a5) {
        unint64_t v12 = v8 << (v9 - a5);
      }
      unint64_t *v11 = *v11 & ~((-1 << (v9 - v10)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v9)) | v12;
      LODWORD(v9) = ((_BYTE)v9 - (_BYTE)v10) & 0x3F;
      *(_DWORD *)(a6 + 8) = v9;
      v7 -= v10;
    }
    if (v7 >= 1)
    {
      uint64_t v13 = *--v11;
      *(void *)a6 = v11;
      LODWORD(v9) = -(int)v7 & 0x3F;
      *(_DWORD *)(a6 + 8) = v9;
      unint64_t *v11 = v13 & ~(-1 << -(char)v7) | (v8 << (v7 + v10 - a5 + (-(char)v7 & 0x3F)));
    }
  }
  else
  {
    LODWORD(v9) = *(_DWORD *)(a6 + 8);
    int64_t v11 = *(unint64_t **)a6;
  }
  char v14 = 64 - v9;
  unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
  if (v6 >= 64)
  {
    unint64_t v16 = *v11;
    do
    {
      unint64_t v17 = v6;
      unint64_t v19 = *--a4;
      unint64_t v18 = v19;
      unint64_t *v11 = (v19 >> v14) | v16 & ~v15;
      uint64_t v20 = *--v11;
      unint64_t v16 = v20 & v15 | (v18 << v9);
      unint64_t *v11 = v16;
      int64_t v6 = v17 - 64;
    }
    while (v17 > 0x7F);
    *(void *)a6 = v11;
  }
  if (v6 < 1) {
    goto LABEL_16;
  }
  unint64_t v21 = *(a4 - 1) & (-1 << -(char)v6);
  int64_t v22 = v6 >= (unint64_t)v9 ? v9 : v6;
  unint64_t *v11 = *v11 & ~((-1 << (v9 - v22)) & v15) | (v21 >> v14);
  LODWORD(v9) = ((_BYTE)v9 - (_BYTE)v22) & 0x3F;
  *(_DWORD *)(a6 + 8) = v9;
  if (v6 - v22 < 1) {
    goto LABEL_16;
  }
  uint64_t v24 = *(v11 - 1);
  uint64_t v23 = v11 - 1;
  *(void *)a6 = v23;
  *(_DWORD *)(a6 + 8) = (v22 - v6) & 0x3F;
  *uint64_t v23 = v24 & ~(-1 << (v22 - v6)) | (v21 << (v6 + ((v22 - v6) & 0x3F)));
  *(void *)double result = v23;
  *(_DWORD *)(result + 8) = (v22 - v6) & 0x3F;
  return result;
}

double sub_215DF3F0C(unsigned __int8 *a1, void **a2)
{
  if (*a1 != 2)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v20 = (char *)sub_215D2DC9C((char *)a1);
    sub_215732BF4(&v21, v20);
    sub_215AC8CC8("type must be array, but is ", (std::string *)&v21, &v24);
    sub_215D2DB00(302, (uint64_t)&v24, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
  }
  uint64_t v27 = 0;
  long long v26 = 0uLL;
  sub_215742B04((uint64_t)&v26, (uint64_t)(*(void *)(*((void *)a1 + 1) + 8) - **((void **)a1 + 1)) >> 4);
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = (unint64_t)a1;
  v24.__r_.__value_.__r.__words[2] = 0;
  unint64_t v25 = 0x8000000000000000;
  int v4 = *a1;
  if (*a1)
  {
    if (v4 == 2)
    {
      int64_t v6 = (std::string::size_type *)*((void *)a1 + 1);
      v24.__r_.__value_.__r.__words[2] = *v6;
      unint64_t v21 = a1;
      int64_t v22 = 0;
      *((void *)&v23 + 1) = 0x8000000000000000;
      *(void *)&long long v23 = v6[1];
      goto LABEL_10;
    }
    if (v4 == 1)
    {
      unint64_t v5 = (std::string::size_type *)*((void *)a1 + 1);
      v24.__r_.__value_.__l.__size_ = *v5;
      long long v23 = xmmword_215EF87F0;
      unint64_t v21 = a1;
      int64_t v22 = v5 + 1;
      goto LABEL_10;
    }
    unint64_t v25 = 0;
  }
  else
  {
    unint64_t v25 = 1;
  }
  unint64_t v21 = a1;
  int64_t v22 = 0;
  *(void *)&long long v23 = 0;
  *((void *)&v23 + 1) = 1;
LABEL_10:
  uint64_t v7 = *((void *)&v26 + 1);
  while (!sub_215D31030((unsigned __int8 **)&v24, &v21))
  {
    unint64_t v8 = (void **)sub_215D3138C((uint64_t)&v24);
    long long v28 = 0uLL;
    uint64_t v29 = 0;
    sub_215D3040C(v8, (uint64_t)&v28);
    uint64_t v9 = sub_215DF4250((uint64_t *)&v26, v7, &v28);
    if (SHIBYTE(v29) < 0)
    {
      operator delete((void *)v28);
      int v10 = *v24.__r_.__value_.__l.__data_;
      if (v10 != 2)
      {
LABEL_13:
        if (v10 == 1)
        {
          std::string::size_type size = v24.__r_.__value_.__l.__size_;
          unint64_t v12 = *(void **)(v24.__r_.__value_.__l.__size_ + 8);
          if (v12)
          {
            do
            {
              uint64_t v13 = v12;
              unint64_t v12 = (void *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              uint64_t v13 = *(void **)(size + 16);
              BOOL v14 = *v13 == size;
              std::string::size_type size = (std::string::size_type)v13;
            }
            while (!v14);
          }
          v24.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
        }
        else
        {
          ++v25;
        }
        goto LABEL_23;
      }
    }
    else
    {
      int v10 = *v24.__r_.__value_.__l.__data_;
      if (v10 != 2) {
        goto LABEL_13;
      }
    }
    v24.__r_.__value_.__r.__words[2] += 16;
LABEL_23:
    uint64_t v7 = v9 + 24;
  }
  unint64_t v15 = (void **)*a2;
  if (*a2)
  {
    unint64_t v16 = (void **)a2[1];
    unint64_t v17 = *a2;
    if (v16 != v15)
    {
      do
      {
        if (*((char *)v16 - 1) < 0) {
          operator delete(*(v16 - 3));
        }
        v16 -= 3;
      }
      while (v16 != v15);
      unint64_t v17 = *a2;
    }
    a2[1] = v15;
    operator delete(v17);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  double result = *(double *)&v26;
  *(_OWORD *)a2 = v26;
  a2[2] = v27;
  return result;
}

void sub_215DF41A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2157352DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215DF41E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if (v22)
    {
LABEL_8:
      __cxa_free_exception(v21);
      _Unwind_Resume(a1);
    }
  }
  else if (v22)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_215DF4250(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = v7 / 24;
  uint64_t v9 = *a1 + 24 * (v7 / 24);
  unint64_t v10 = a1[2];
  if (v5 >= v10)
  {
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v6) >> 3) + 1;
    if (v16 > 0xAAAAAAAAAAAAAAALL) {
      sub_215738AC0();
    }
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v6) >> 3);
    if (2 * v17 > v16) {
      unint64_t v16 = 2 * v17;
    }
    if (v17 >= 0x555555555555555) {
      unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 > 0xAAAAAAAAAAAAAAALL) {
        sub_215738AD8();
      }
      unint64_t v19 = (char *)operator new(24 * v18);
    }
    else
    {
      unint64_t v19 = 0;
    }
    unint64_t v21 = &v19[24 * v8];
    int v22 = &v19[24 * v18];
    if (v8 == v18)
    {
      if (v7 < 24)
      {
        if ((unint64_t)(v7 + 23) < 0x2F) {
          unint64_t v28 = 1;
        }
        else {
          unint64_t v28 = 2 * v8;
        }
        if (v28 > 0xAAAAAAAAAAAAAAALL) {
          sub_215738AD8();
        }
        uint64_t v29 = (char *)operator new(24 * v28);
        unint64_t v21 = &v29[24 * (v28 >> 2)];
        int v22 = &v29[24 * v28];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        uint64_t v23 = v8 + 2;
        if (v8 >= -1) {
          uint64_t v23 = v8 + 1;
        }
        v21 -= 24 * (v23 >> 1);
      }
    }
    *(_OWORD *)unint64_t v21 = *a3;
    *((void *)v21 + 2) = *((void *)a3 + 2);
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
    *(void *)a3 = 0;
    unint64_t v30 = v21 + 24;
    uint64_t v31 = *a1;
    unint64_t v32 = v21;
    if (*a1 != v9)
    {
      uint64_t v33 = v21;
      uint64_t v34 = v9;
      do
      {
        unint64_t v32 = v33 - 24;
        long long v35 = *(_OWORD *)(v34 - 24);
        *((void *)v33 - 1) = *(void *)(v34 - 8);
        *(_OWORD *)(v33 - 24) = v35;
        *(void *)(v34 - 16) = 0;
        *(void *)(v34 - 8) = 0;
        *(void *)(v34 - 24) = 0;
        v33 -= 24;
        v34 -= 24;
      }
      while (v34 != v31);
    }
    uint64_t v36 = a1[1];
    if (v36 != v9)
    {
      do
      {
        long long v37 = *(_OWORD *)v9;
        *((void *)v30 + 2) = *(void *)(v9 + 16);
        *(_OWORD *)unint64_t v30 = v37;
        v30 += 24;
        *(void *)(v9 + 8) = 0;
        *(void *)(v9 + 16) = 0;
        *(void *)uint64_t v9 = 0;
        v9 += 24;
      }
      while (v9 != v36);
      uint64_t v9 = a1[1];
    }
    uint64_t v38 = *a1;
    *a1 = (uint64_t)v32;
    a1[1] = (uint64_t)v30;
    a1[2] = (uint64_t)v22;
    if (v9 == v38)
    {
      if (!v9) {
        return (uint64_t)v21;
      }
    }
    else
    {
      do
      {
        if (*(char *)(v9 - 1) < 0) {
          operator delete(*(void **)(v9 - 24));
        }
        v9 -= 24;
      }
      while (v9 != v38);
      uint64_t v9 = v38;
      if (!v38) {
        return (uint64_t)v21;
      }
    }
    operator delete((void *)v9);
    return (uint64_t)v21;
  }
  if (v9 == v5)
  {
    long long v20 = *a3;
    *(void *)(v9 + 16) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v9 = v20;
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
    *(void *)a3 = 0;
    a1[1] = v9 + 24;
    return v9;
  }
  uint64_t v11 = v9 + 24;
  unint64_t v12 = v5 - 24;
  if (v5 >= 0x18)
  {
    unint64_t v13 = v5 - 24;
    uint64_t v14 = a1[1];
    do
    {
      long long v15 = *(_OWORD *)v13;
      *(void *)(v14 + 16) = *(void *)(v13 + 16);
      *(_OWORD *)uint64_t v14 = v15;
      v14 += 24;
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      *(void *)unint64_t v13 = 0;
      v13 += 24;
    }
    while (v13 < v5);
    a1[1] = v14;
    if (v5 == v11) {
      goto LABEL_29;
    }
LABEL_25:
    uint64_t v24 = 8 * ((uint64_t)(v5 - v11) >> 3);
    do
    {
      if (*(char *)(v12 + 23) < 0) {
        operator delete(*(void **)v12);
      }
      unint64_t v25 = (long long *)(v9 + v24 - 24);
      long long v26 = *v25;
      *(void *)(v12 + 16) = *(void *)(v9 + v24 - 8);
      *(_OWORD *)unint64_t v12 = v26;
      v12 -= 24;
      *(unsigned char *)(v9 + v24 - 1) = 0;
      *(unsigned char *)unint64_t v25 = 0;
      v24 -= 24;
    }
    while (v24);
    goto LABEL_29;
  }
  a1[1] = v5;
  if (v5 != v11) {
    goto LABEL_25;
  }
LABEL_29:
  if (*(char *)(v9 + 23) < 0) {
    operator delete(*(void **)v9);
  }
  long long v27 = *a3;
  *(void *)(v9 + 16) = *((void *)a3 + 2);
  *(_OWORD *)uint64_t v9 = v27;
  *((unsigned char *)a3 + 23) = 0;
  *(unsigned char *)a3 = 0;
  return v9;
}

void sub_215DF45D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215739038((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_215DF45EC(unint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1 != 2)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v14 = (char *)sub_215D2DC9C((char *)a1);
    sub_215732BF4(&v15, v14);
    sub_215AC8CC8("type must be array, but is ", &v15, &v17);
    sub_215D2DB00(302, (uint64_t)&v17, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
  }
  long long v20 = 0;
  long long v19 = 0uLL;
  int v4 = *(std::string::size_type **)(a1 + 8);
  std::string::size_type v6 = *v4;
  std::string::size_type v5 = v4[1];
  uint64_t v7 = v5 - *v4;
  if (v5 == *v4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    if (v7 < 0) {
      sub_2157E81A4();
    }
    uint64_t v8 = (char *)operator new((unint64_t)v7 >> 1);
    *(void *)&long long v19 = v8;
    *((void *)&v19 + 1) = v8;
    long long v20 = &v8[8 * (v7 >> 4)];
  }
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = a1;
  v17.__r_.__value_.__r.__words[2] = v6;
  unint64_t v18 = 0x8000000000000000;
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = a1;
  v15.__r_.__value_.__r.__words[2] = v5;
  unint64_t v16 = 0x8000000000000000;
  while (!sub_215D315D8((unsigned __int8 **)&v17, (unsigned __int8 **)&v15))
  {
    uint64_t v9 = sub_215D316E4((uint64_t)&v17);
    uint64_t v21 = 0;
    sub_215D30830(v9, &v21);
    uint64_t v8 = sub_215DF2FA8((void **)&v19, v8, &v21) + 8;
    int v10 = *v17.__r_.__value_.__l.__data_;
    if (v10 == 2)
    {
      v17.__r_.__value_.__r.__words[2] += 16;
    }
    else if (v10 == 1)
    {
      v17.__r_.__value_.__l.__size_ += 40;
    }
    else
    {
      ++v18;
    }
  }
  uint64_t v11 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v11;
    operator delete(v11);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  double result = *(double *)&v19;
  *(_OWORD *)a2 = v19;
  *(void *)(a2 + 16) = v20;
  return result;
}

void sub_215DF47B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF480C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v14);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

double sub_215DF4844(unint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1 != 2)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v14 = (char *)sub_215D2DC9C((char *)a1);
    sub_215732BF4(&v15, v14);
    sub_215AC8CC8("type must be array, but is ", &v15, &v17);
    sub_215D2DB00(302, (uint64_t)&v17, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
  }
  long long v20 = 0;
  long long v19 = 0uLL;
  int v4 = *(std::string::size_type **)(a1 + 8);
  std::string::size_type v6 = *v4;
  std::string::size_type v5 = v4[1];
  uint64_t v7 = v5 - *v4;
  if (v5 == *v4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    if (v7 < 0) {
      sub_2157E81A4();
    }
    uint64_t v8 = (char *)operator new((unint64_t)v7 >> 1);
    *(void *)&long long v19 = v8;
    *((void *)&v19 + 1) = v8;
    long long v20 = &v8[8 * (v7 >> 4)];
  }
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = a1;
  v17.__r_.__value_.__r.__words[2] = v6;
  unint64_t v18 = 0x8000000000000000;
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = a1;
  v15.__r_.__value_.__r.__words[2] = v5;
  unint64_t v16 = 0x8000000000000000;
  while (!sub_215D315D8((unsigned __int8 **)&v17, (unsigned __int8 **)&v15))
  {
    uint64_t v9 = sub_215D316E4((uint64_t)&v17);
    uint64_t v21 = 0;
    sub_215D306DC(v9, &v21);
    uint64_t v8 = sub_215DF35A4((void **)&v19, v8, &v21) + 8;
    int v10 = *v17.__r_.__value_.__l.__data_;
    if (v10 == 2)
    {
      v17.__r_.__value_.__r.__words[2] += 16;
    }
    else if (v10 == 1)
    {
      v17.__r_.__value_.__l.__size_ += 40;
    }
    else
    {
      ++v18;
    }
  }
  uint64_t v11 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v11;
    operator delete(v11);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  double result = *(double *)&v19;
  *(_OWORD *)a2 = v19;
  *(void *)(a2 + 16) = v20;
  return result;
}

void sub_215DF4A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF4A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v14);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

double sub_215DF4A9C(unsigned __int8 *a1, uint64_t a2)
{
  if (*a1 != 2)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v14 = (char *)sub_215D2DC9C((char *)a1);
    sub_215732BF4(&v15, v14);
    sub_215AC8CC8("type must be array, but is ", (std::string *)&v15, &v18);
    sub_215D2DB00(302, (uint64_t)&v18, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
  }
  long long v21 = 0uLL;
  long long v20 = 0;
  sub_215D39348((uint64_t)&v20, (uint64_t)(*(void *)(*((void *)a1 + 1) + 8) - **((void **)a1 + 1)) >> 4);
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = (unint64_t)a1;
  v18.__r_.__value_.__r.__words[2] = 0;
  unint64_t v19 = 0x8000000000000000;
  int v4 = *a1;
  if (!*a1)
  {
    unint64_t v19 = 1;
LABEL_9:
    std::string v15 = a1;
    std::string::size_type v16 = 0;
    *(void *)&long long v17 = 0;
    *((void *)&v17 + 1) = 1;
    goto LABEL_10;
  }
  if (v4 == 2)
  {
    uint64_t v7 = (std::string::size_type *)*((void *)a1 + 1);
    v18.__r_.__value_.__r.__words[2] = *v7;
    std::string v15 = a1;
    std::string::size_type v16 = 0;
    *((void *)&v17 + 1) = 0x8000000000000000;
    *(void *)&long long v17 = v7[1];
    goto LABEL_10;
  }
  if (v4 != 1)
  {
    unint64_t v19 = 0;
    goto LABEL_9;
  }
  std::string::size_type v5 = (std::string::size_type *)*((void *)a1 + 1);
  v18.__r_.__value_.__l.__size_ = *v5;
  long long v17 = xmmword_215EF87F0;
  std::string::size_type v6 = v5[1];
  std::string v15 = a1;
  std::string::size_type v16 = v6;
LABEL_10:
  uint64_t v8 = &v20[8 * ((unint64_t)v21 >> 6)];
  unsigned int v9 = v21 & 0x3F;
  while (!sub_215D315D8((unsigned __int8 **)&v18, &v15))
  {
    int v10 = sub_215D316E4((uint64_t)&v18);
    LOBYTE(v23) = 0;
    sub_215D30AF8(v10, &v23);
    char v22 = v23;
    sub_215DF3918((uint64_t)&v23, (void **)&v20, (uint64_t)v8, v9, &v22);
    uint64_t v8 = (char *)(v23 + 8 * (v24 == 63));
    if (v24 == 63) {
      unsigned int v9 = 0;
    }
    else {
      unsigned int v9 = v24 + 1;
    }
    int v11 = *v18.__r_.__value_.__l.__data_;
    if (v11 == 2)
    {
      v18.__r_.__value_.__r.__words[2] += 16;
    }
    else if (v11 == 1)
    {
      v18.__r_.__value_.__l.__size_ += 40;
    }
    else
    {
      ++v19;
    }
  }
  if (*(void *)a2)
  {
    operator delete(*(void **)a2);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  *(void *)a2 = v20;
  double result = *(double *)&v21;
  *(_OWORD *)(a2 + 8) = v21;
  return result;
}

void sub_215DF4CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF4D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v14);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

double sub_215DF4D58(unsigned __int8 *a1, void **a2)
{
  if (*a1 != 2)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x20uLL);
    long long v17 = (char *)sub_215D2DC9C((char *)a1);
    sub_215732BF4(&v18, v17);
    sub_215AC8CC8("type must be array, but is ", (std::string *)&v18, &v21);
    sub_215D2DB00(302, (uint64_t)&v21, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
  }
  int v24 = 0;
  long long v23 = 0uLL;
  sub_215742B04((uint64_t)&v23, (uint64_t)(*(void *)(*((void *)a1 + 1) + 8) - **((void **)a1 + 1)) >> 4);
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = (unint64_t)a1;
  v21.__r_.__value_.__r.__words[2] = 0;
  unint64_t v22 = 0x8000000000000000;
  int v4 = *a1;
  if (*a1)
  {
    if (v4 == 2)
    {
      uint64_t v7 = (std::string::size_type *)*((void *)a1 + 1);
      v21.__r_.__value_.__r.__words[2] = *v7;
      std::string v18 = a1;
      std::string::size_type v19 = 0;
      *((void *)&v20 + 1) = 0x8000000000000000;
      *(void *)&long long v20 = v7[1];
      goto LABEL_10;
    }
    if (v4 == 1)
    {
      std::string::size_type v5 = (std::string::size_type *)*((void *)a1 + 1);
      v21.__r_.__value_.__l.__size_ = *v5;
      long long v20 = xmmword_215EF87F0;
      std::string::size_type v6 = v5[1];
      std::string v18 = a1;
      std::string::size_type v19 = v6;
      goto LABEL_10;
    }
    unint64_t v22 = 0;
  }
  else
  {
    unint64_t v22 = 1;
  }
  std::string v18 = a1;
  std::string::size_type v19 = 0;
  *(void *)&long long v20 = 0;
  *((void *)&v20 + 1) = 1;
LABEL_10:
  uint64_t v8 = *((void *)&v23 + 1);
  while (!sub_215D315D8((unsigned __int8 **)&v21, &v18))
  {
    unsigned int v9 = (void **)sub_215D316E4((uint64_t)&v21);
    long long v25 = 0uLL;
    uint64_t v26 = 0;
    sub_215D30C0C(v9, (uint64_t)&v25);
    uint64_t v10 = sub_215DF4250((uint64_t *)&v23, v8, &v25);
    if (SHIBYTE(v26) < 0)
    {
      operator delete((void *)v25);
      int v11 = *v21.__r_.__value_.__l.__data_;
      if (v11 != 2)
      {
LABEL_13:
        if (v11 == 1) {
          v21.__r_.__value_.__l.__size_ += 40;
        }
        else {
          ++v22;
        }
        goto LABEL_18;
      }
    }
    else
    {
      int v11 = *v21.__r_.__value_.__l.__data_;
      if (v11 != 2) {
        goto LABEL_13;
      }
    }
    v21.__r_.__value_.__r.__words[2] += 16;
LABEL_18:
    uint64_t v8 = v10 + 24;
  }
  unint64_t v12 = (void **)*a2;
  if (*a2)
  {
    unint64_t v13 = (void **)a2[1];
    uint64_t v14 = *a2;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      uint64_t v14 = *a2;
    }
    a2[1] = v12;
    operator delete(v14);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  double result = *(double *)&v23;
  *(_OWORD *)a2 = v23;
  a2[2] = v24;
  return result;
}

void sub_215DF4FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2157352DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215DF5008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if (v22)
    {
LABEL_8:
      __cxa_free_exception(v21);
      _Unwind_Resume(a1);
    }
  }
  else if (v22)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void ***sub_215DF5078(void ***result)
{
  if (result)
  {
    sub_215CEB204(result + 1, *(unsigned __int8 *)result);
    JUMPOUT(0x2166C4D20);
  }
  return result;
}

void *sub_215DF50CC(void *a1, char *a2, char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    if (v4 >> 60) {
      sub_215CEA45C();
    }
    std::string::size_type v6 = a2;
    uint64_t v7 = operator new(16 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * v4]; v6 != a3; v7 += 2)
    {
      *(unsigned char *)uint64_t v7 = 0;
      v7[1] = 0;
      uint64_t v8 = *v6++;
      *(unsigned char *)uint64_t v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_215DF5170(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    unint64_t v4 = v1[1];
    std::string::size_type v5 = *v1;
    if (v4 != v3)
    {
      std::string::size_type v6 = v4 - 1;
      do
      {
        uint64_t v7 = v6 - 1;
        sub_215CE9D14(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      std::string::size_type v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215DF51C0(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    if (v4 >> 60) {
      sub_215CEA45C();
    }
    std::string::size_type v6 = a2;
    uint64_t v7 = operator new(16 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * v4]; v6 != a3; v7 += 2)
    {
      *(unsigned char *)uint64_t v7 = 0;
      v7[1] = 0;
      unsigned int v8 = *v6++;
      *(unsigned char *)uint64_t v7 = 6;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_215DF5264(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    unint64_t v4 = v1[1];
    std::string::size_type v5 = *v1;
    if (v4 != v3)
    {
      std::string::size_type v6 = v4 - 1;
      do
      {
        uint64_t v7 = v6 - 1;
        sub_215CE9D14(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      std::string::size_type v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215DF52B4(void *a1, __int16 *a2, __int16 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x1FFFFFFFFFFFFFFFLL) {
      sub_215CEA45C();
    }
    std::string::size_type v6 = a2;
    uint64_t v7 = operator new(8 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 1)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      uint64_t v8 = *v6++;
      *(unsigned char *)uint64_t v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_215DF535C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = v1[1];
    std::string::size_type v5 = *v1;
    if (v4 != v3)
    {
      std::string::size_type v6 = v4 - 1;
      do
      {
        uint64_t v7 = v6 - 1;
        sub_215CE9D14(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      std::string::size_type v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215DF53AC(void *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x1FFFFFFFFFFFFFFFLL) {
      sub_215CEA45C();
    }
    std::string::size_type v6 = a2;
    uint64_t v7 = operator new(8 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 1)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      unsigned int v8 = *v6++;
      *(unsigned char *)uint64_t v7 = 6;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_215DF5454(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = v1[1];
    std::string::size_type v5 = *v1;
    if (v4 != v3)
    {
      std::string::size_type v6 = v4 - 1;
      do
      {
        uint64_t v7 = v6 - 1;
        sub_215CE9D14(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      std::string::size_type v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215DF54A4(void *a1, int *a2, int *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x3FFFFFFFFFFFFFFDLL) {
      sub_215CEA45C();
    }
    std::string::size_type v6 = a2;
    uint64_t v7 = operator new(4 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 2)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      uint64_t v8 = *v6++;
      *(unsigned char *)uint64_t v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_215DF5550(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = v1[1];
    std::string::size_type v5 = *v1;
    if (v4 != v3)
    {
      std::string::size_type v6 = v4 - 1;
      do
      {
        uint64_t v7 = v6 - 1;
        sub_215CE9D14(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      std::string::size_type v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215DF55A0(void *a1, char *a2, char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x3FFFFFFFFFFFFFFDLL) {
      sub_215CEA45C();
    }
    std::string::size_type v6 = a2;
    uint64_t v7 = operator new(4 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 2)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      unsigned int v8 = *(_DWORD *)v6;
      v6 += 4;
      *(unsigned char *)uint64_t v7 = 6;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_215DF564C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = v1[1];
    std::string::size_type v5 = *v1;
    if (v4 != v3)
    {
      std::string::size_type v6 = v4 - 1;
      do
      {
        uint64_t v7 = v6 - 1;
        sub_215CE9D14(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      std::string::size_type v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215DF569C(void *a1, char *a2, char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFF9) {
      sub_215CEA45C();
    }
    std::string::size_type v6 = a2;
    uint64_t v7 = operator new(2 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 3)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      uint64_t v8 = *(void *)v6;
      v6 += 8;
      *(unsigned char *)uint64_t v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_215DF5748(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = v1[1];
    std::string::size_type v5 = *v1;
    if (v4 != v3)
    {
      std::string::size_type v6 = v4 - 1;
      do
      {
        uint64_t v7 = v6 - 1;
        sub_215CE9D14(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      std::string::size_type v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215DF5798(void *a1, char *a2, char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFF9) {
      sub_215CEA45C();
    }
    std::string::size_type v6 = a2;
    uint64_t v7 = operator new(2 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 3)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      uint64_t v8 = *(void *)v6;
      v6 += 8;
      *(unsigned char *)uint64_t v7 = 6;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_215DF5844(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = v1[1];
    std::string::size_type v5 = *v1;
    if (v4 != v3)
    {
      std::string::size_type v6 = v4 - 1;
      do
      {
        uint64_t v7 = v6 - 1;
        sub_215CE9D14(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      std::string::size_type v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

char *sub_215DF5894(uint64_t a1, char *a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 2)
    {
      exceptiounint64_t n = __cxa_allocate_exception(0x20uLL);
      uint64_t v8 = (char *)sub_215D2DC9C((char *)a1);
      sub_215732BF4(&v9, v8);
      sub_215AC8CC8("cannot use push_back() with ", &v9, &v10);
      sub_215D2DB00(308, (uint64_t)&v10, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
    }
    uint64_t v4 = *(void ***)(a1 + 8);
    std::string::size_type v5 = (char *)v4[1];
    if (v5 < v4[2]) {
      goto LABEL_3;
    }
  }
  else
  {
    *(unsigned char *)a1 = 2;
    uint64_t v4 = (void **)operator new(0x18uLL);
    v4[1] = 0;
    void v4[2] = 0;
    uint64_t *v4 = 0;
    *(void *)(a1 + 8) = v4;
    std::string::size_type v5 = (char *)v4[1];
    if (v5 < v4[2])
    {
LABEL_3:
      *std::string::size_type v5 = *a2;
      *((void *)v5 + 1) = *((void *)a2 + 1);
      *a2 = 0;
      *((void *)a2 + 1) = 0;
      double result = v5 + 16;
      v4[1] = v5 + 16;
      return result;
    }
  }
  double result = sub_215CEA474(v4, a2);
  v4[1] = result;
  return result;
}

void sub_215DF59C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if (v21)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void *sub_215DF5A38(void *a1, char *a2, char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFF9) {
      sub_215CEA45C();
    }
    std::string::size_type v6 = a2;
    uint64_t v7 = operator new(2 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 3)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      uint64_t v8 = *(void *)v6;
      v6 += 8;
      *(unsigned char *)uint64_t v7 = 7;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_215DF5AE4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = v1[1];
    std::string::size_type v5 = *v1;
    if (v4 != v3)
    {
      std::string::size_type v6 = v4 - 1;
      do
      {
        uint64_t v7 = v6 - 1;
        sub_215CE9D14(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      std::string::size_type v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215DF5B34(void *a1, char *a2, char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    if (v4 >> 60) {
      sub_215CEA45C();
    }
    std::string::size_type v6 = a2;
    uint64_t v7 = operator new(16 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * v4]; v6 != a3; v7 += 2)
    {
      *(unsigned char *)uint64_t v7 = 0;
      v7[1] = 0;
      uint64_t v8 = *v6++;
      *(unsigned char *)uint64_t v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_215DF5BD8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    unint64_t v4 = v1[1];
    std::string::size_type v5 = *v1;
    if (v4 != v3)
    {
      std::string::size_type v6 = v4 - 1;
      do
      {
        uint64_t v7 = v6 - 1;
        sub_215CEB204(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      std::string::size_type v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215DF5C28(void *a1, char *a2, char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    if (v4 >> 60) {
      sub_215CEA45C();
    }
    std::string::size_type v6 = a2;
    uint64_t v7 = operator new(16 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * v4]; v6 != a3; v7 += 2)
    {
      *(unsigned char *)uint64_t v7 = 0;
      v7[1] = 0;
      uint64_t v8 = *v6++;
      *(unsigned char *)uint64_t v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_215DF5CCC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    unint64_t v4 = v1[1];
    std::string::size_type v5 = *v1;
    if (v4 != v3)
    {
      std::string::size_type v6 = v4 - 1;
      do
      {
        uint64_t v7 = v6 - 1;
        sub_215CEB204(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      std::string::size_type v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215DF5D1C(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    if (v4 >> 60) {
      sub_215CEA45C();
    }
    std::string::size_type v6 = a2;
    uint64_t v7 = operator new(16 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * v4]; v6 != a3; v7 += 2)
    {
      *(unsigned char *)uint64_t v7 = 0;
      v7[1] = 0;
      unsigned int v8 = *v6++;
      *(unsigned char *)uint64_t v7 = 6;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_215DF5DC0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    unint64_t v4 = v1[1];
    std::string::size_type v5 = *v1;
    if (v4 != v3)
    {
      std::string::size_type v6 = v4 - 1;
      do
      {
        uint64_t v7 = v6 - 1;
        sub_215CEB204(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      std::string::size_type v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215DF5E10(void *a1, __int16 *a2, __int16 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x1FFFFFFFFFFFFFFFLL) {
      sub_215CEA45C();
    }
    std::string::size_type v6 = a2;
    uint64_t v7 = operator new(8 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 1)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      uint64_t v8 = *v6++;
      *(unsigned char *)uint64_t v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_215DF5EB8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = v1[1];
    std::string::size_type v5 = *v1;
    if (v4 != v3)
    {
      std::string::size_type v6 = v4 - 1;
      do
      {
        uint64_t v7 = v6 - 1;
        sub_215CEB204(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      std::string::size_type v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215DF5F08(void *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x1FFFFFFFFFFFFFFFLL) {
      sub_215CEA45C();
    }
    std::string::size_type v6 = a2;
    uint64_t v7 = operator new(8 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 1)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      unsigned int v8 = *v6++;
      *(unsigned char *)uint64_t v7 = 6;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_215DF5FB0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = v1[1];
    std::string::size_type v5 = *v1;
    if (v4 != v3)
    {
      std::string::size_type v6 = v4 - 1;
      do
      {
        uint64_t v7 = v6 - 1;
        sub_215CEB204(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      std::string::size_type v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215DF6000(void *a1, int *a2, int *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x3FFFFFFFFFFFFFFDLL) {
      sub_215CEA45C();
    }
    std::string::size_type v6 = a2;
    uint64_t v7 = operator new(4 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 2)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      uint64_t v8 = *v6++;
      *(unsigned char *)uint64_t v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_215DF60AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = v1[1];
    std::string::size_type v5 = *v1;
    if (v4 != v3)
    {
      std::string::size_type v6 = v4 - 1;
      do
      {
        uint64_t v7 = v6 - 1;
        sub_215CEB204(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      std::string::size_type v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215DF60FC(void *a1, char *a2, char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x3FFFFFFFFFFFFFFDLL) {
      sub_215CEA45C();
    }
    std::string::size_type v6 = a2;
    uint64_t v7 = operator new(4 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 2)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      unsigned int v8 = *(_DWORD *)v6;
      v6 += 4;
      *(unsigned char *)uint64_t v7 = 6;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_215DF61A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = v1[1];
    std::string::size_type v5 = *v1;
    if (v4 != v3)
    {
      std::string::size_type v6 = v4 - 1;
      do
      {
        uint64_t v7 = v6 - 1;
        sub_215CEB204(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      std::string::size_type v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215DF61F8(void *a1, char *a2, char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFF9) {
      sub_215CEA45C();
    }
    std::string::size_type v6 = a2;
    uint64_t v7 = operator new(2 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 3)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      uint64_t v8 = *(void *)v6;
      v6 += 8;
      *(unsigned char *)uint64_t v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_215DF62A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = v1[1];
    std::string::size_type v5 = *v1;
    if (v4 != v3)
    {
      std::string::size_type v6 = v4 - 1;
      do
      {
        uint64_t v7 = v6 - 1;
        sub_215CEB204(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      std::string::size_type v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215DF62F4(void *a1, char *a2, char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFF9) {
      sub_215CEA45C();
    }
    std::string::size_type v6 = a2;
    uint64_t v7 = operator new(2 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 3)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      uint64_t v8 = *(void *)v6;
      v6 += 8;
      *(unsigned char *)uint64_t v7 = 6;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_215DF63A0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = v1[1];
    std::string::size_type v5 = *v1;
    if (v4 != v3)
    {
      std::string::size_type v6 = v4 - 1;
      do
      {
        uint64_t v7 = v6 - 1;
        sub_215CEB204(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      std::string::size_type v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215DF63F0(void *a1, char *a2, char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFF9) {
      sub_215CEA45C();
    }
    std::string::size_type v6 = a2;
    uint64_t v7 = operator new(2 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 3)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      uint64_t v8 = *(void *)v6;
      v6 += 8;
      *(unsigned char *)uint64_t v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_215DF649C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = v1[1];
    std::string::size_type v5 = *v1;
    if (v4 != v3)
    {
      std::string::size_type v6 = v4 - 1;
      do
      {
        uint64_t v7 = v6 - 1;
        sub_215CEB204(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      std::string::size_type v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215DF64EC(void *a1, char *a2, char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFF9) {
      sub_215CEA45C();
    }
    std::string::size_type v6 = a2;
    uint64_t v7 = operator new(2 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 3)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      uint64_t v8 = *(void *)v6;
      v6 += 8;
      *(unsigned char *)uint64_t v7 = 6;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_215DF6598(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = v1[1];
    std::string::size_type v5 = *v1;
    if (v4 != v3)
    {
      std::string::size_type v6 = v4 - 1;
      do
      {
        uint64_t v7 = v6 - 1;
        sub_215CEB204(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      std::string::size_type v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

char *sub_215DF65E8(uint64_t a1, char *a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 2)
    {
      exceptiounint64_t n = __cxa_allocate_exception(0x20uLL);
      uint64_t v8 = (char *)sub_215D2DC9C((char *)a1);
      sub_215732BF4(&v9, v8);
      sub_215AC8CC8("cannot use push_back() with ", &v9, &v10);
      sub_215D2DB00(308, (uint64_t)&v10, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
    }
    uint64_t v4 = *(void ***)(a1 + 8);
    std::string::size_type v5 = (char *)v4[1];
    if (v5 < v4[2]) {
      goto LABEL_3;
    }
  }
  else
  {
    *(unsigned char *)a1 = 2;
    uint64_t v4 = (void **)operator new(0x18uLL);
    v4[1] = 0;
    void v4[2] = 0;
    uint64_t *v4 = 0;
    *(void *)(a1 + 8) = v4;
    std::string::size_type v5 = (char *)v4[1];
    if (v5 < v4[2])
    {
LABEL_3:
      *std::string::size_type v5 = *a2;
      *((void *)v5 + 1) = *((void *)a2 + 1);
      *a2 = 0;
      *((void *)a2 + 1) = 0;
      double result = v5 + 16;
      v4[1] = v5 + 16;
      return result;
    }
  }
  double result = sub_215CEB95C(v4, a2);
  v4[1] = result;
  return result;
}

void sub_215DF671C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if (v21)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void *sub_215DF678C(void *a1, char *a2, char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFF9) {
      sub_215CEA45C();
    }
    std::string::size_type v6 = a2;
    uint64_t v7 = operator new(2 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 3)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      uint64_t v8 = *(void *)v6;
      v6 += 8;
      *(unsigned char *)uint64_t v7 = 7;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_215DF6838(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = v1[1];
    std::string::size_type v5 = *v1;
    if (v4 != v3)
    {
      std::string::size_type v6 = v4 - 1;
      do
      {
        uint64_t v7 = v6 - 1;
        sub_215CEB204(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      std::string::size_type v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF6888(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 2;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0;
  void v4[2] = 0;
  void *v4 = 0;
  *(void *)(a1 + 8) = v4;
  sub_215CEB864((uint64_t)v4, *(void *)(a2 + 8));
  unint64_t v5 = *(void *)(a2 + 8);
  int v6 = v5 & 0x3F;
  if (v5 > 0x3F || v6 != 0)
  {
    int v8 = 0;
    int v9 = 0;
    std::string v10 = *(unint64_t **)a2;
    uint64_t v11 = *(void *)a2 + 8 * (v5 >> 6);
    do
    {
      unint64_t v12 = *v10;
      uint64_t v13 = *(void *)(a1 + 8);
      v17[0] = 4;
      std::string v18 = (void **)((v12 >> v9) & 1);
      unint64_t v14 = *(void *)(v13 + 8);
      if (v14 >= *(void *)(v13 + 16))
      {
        std::string::size_type v16 = sub_215CEB95C((void **)v13, v17);
        int v15 = v17[0];
      }
      else
      {
        int v15 = 0;
        *(unsigned char *)unint64_t v14 = 4;
        *(void *)(v14 + 8) = v18;
        v17[0] = 0;
        std::string v18 = 0;
        std::string::size_type v16 = (char *)(v14 + 16);
      }
      *(void *)(v13 + 8) = v16;
      sub_215CEB204(&v18, v15);
      v10 += v8 == 63;
      if (v8 == 63) {
        int v9 = 0;
      }
      else {
        ++v9;
      }
      int v8 = v9;
    }
    while (v10 != (unint64_t *)v11 || v6 != v9);
  }
}

void sub_215DF69B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CEB204(v9, a9);
  _Unwind_Resume(a1);
}

char *sub_215DF69CC(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v5 = result;
    if (a4 >> 60) {
      sub_215CEA45C();
    }
    double result = (char *)operator new(16 * a4);
    int v8 = result;
    *unint64_t v5 = result;
    v5[1] = result;
    v5[2] = &result[16 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v11 = &v8[v9];
        *((void *)v11 + 1) = 0;
        char *v11 = 3;
        double result = (char *)operator new(0x18uLL);
        unint64_t v12 = result;
        if (*((char *)a2 + 23) < 0)
        {
          double result = (char *)sub_215738B0C(result, *(void **)a2, *((void *)a2 + 1));
        }
        else
        {
          long long v10 = *a2;
          *((void *)result + 2) = *((void *)a2 + 2);
          *(_OWORD *)double result = v10;
        }
        *((void *)v11 + 1) = v12;
        a2 = (long long *)((char *)a2 + 24);
        v9 += 16;
      }
      while (a2 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_215DF6AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_215DF6AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  operator delete(v11);
  for (; v12; v12 -= 16)
    sub_215CEB204((void ***)(v10 + v12 - 8), *(unsigned __int8 *)(v10 + v12 - 16));
  *(void *)(v9 + 8) = v10;
  sub_215D2F9C0(&a9);
  _Unwind_Resume(a1);
}

void sub_215DF6B18()
{
}

void sub_215DF6BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v10 = a9;
  a9 = 0;
  if (v10)
  {
    sub_215E15464((uint64_t)&a9, v10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

float sub_215DF6C1C(uint64_t *a1)
{
  int v1 = *(unsigned __int8 *)a1;
  if ((v1 - 5) <= 2)
  {
    __str.__r_.__value_.__r.__words[0] = 0;
    sub_215D30184(a1, (double *)&__str);
    return *(double *)&__str.__r_.__value_.__l.__data_;
  }
  if (v1 != 3) {
    return NAN;
  }
  memset(&__str, 0, sizeof(__str));
  sub_215D3040C((void **)a1, (uint64_t)&__str);
  float v2 = std::stof(&__str, 0);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return v2;
  }
  operator delete(__str.__r_.__value_.__l.__data_);
  return v2;
}

void sub_215DF6CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_215DF6D00(uint64_t *a1)
{
  int v1 = *(unsigned __int8 *)a1;
  if ((v1 - 5) <= 2)
  {
    __str.__r_.__value_.__r.__words[0] = 0;
    sub_215D30184(a1, (double *)&__str);
    return *(double *)&__str.__r_.__value_.__l.__data_;
  }
  if (v1 != 3) {
    return NAN;
  }
  memset(&__str, 0, sizeof(__str));
  sub_215D3040C((void **)a1, (uint64_t)&__str);
  double v2 = std::stod(&__str, 0);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return v2;
  }
  operator delete(__str.__r_.__value_.__l.__data_);
  return v2;
}

void sub_215DF6DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_215DF6DE0(unint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1 != 2)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x20uLL);
    std::string v18 = (char *)sub_215D2DC9C((char *)a1);
    sub_215732BF4(&v19, v18);
    sub_215AC8CC8("type must be array, but is ", &v19, &v21);
    sub_215D2DB00(302, (uint64_t)&v21, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
  }
  int v24 = 0;
  long long v23 = 0uLL;
  uint64_t v4 = *(std::string::size_type **)(a1 + 8);
  std::string::size_type v5 = v4[1];
  uint64_t v6 = v5 - *v4;
  if (v5 == *v4)
  {
    uint64_t v7 = 0;
    std::string::size_type v8 = v4[1];
  }
  else
  {
    if (v6 < 0) {
      sub_2157E81A4();
    }
    uint64_t v7 = (char *)operator new((unint64_t)v6 >> 1);
    *(void *)&long long v23 = v7;
    *((void *)&v23 + 1) = v7;
    int v24 = &v7[8 * (v6 >> 4)];
    std::string::size_type v8 = *v4;
    std::string::size_type v5 = v4[1];
  }
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = a1;
  v21.__r_.__value_.__r.__words[2] = v8;
  unint64_t v22 = 0x8000000000000000;
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = a1;
  v19.__r_.__value_.__r.__words[2] = v5;
  unint64_t v20 = 0x8000000000000000;
  while (!sub_215D31030((unsigned __int8 **)&v21, (unsigned __int8 **)&v19))
  {
    uint64_t v9 = (uint64_t *)sub_215D3138C((uint64_t)&v21);
    uint64_t v25 = 0;
    sub_215D30184(v9, (double *)&v25);
    uint64_t v7 = sub_215DF7068((void **)&v23, v7, &v25) + 8;
    int v10 = *v21.__r_.__value_.__l.__data_;
    if (v10 == 2)
    {
      v21.__r_.__value_.__r.__words[2] += 16;
    }
    else if (v10 == 1)
    {
      std::string::size_type size = v21.__r_.__value_.__l.__size_;
      uint64_t v12 = *(void **)(v21.__r_.__value_.__l.__size_ + 8);
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = *(void **)(size + 16);
          BOOL v14 = *v13 == size;
          std::string::size_type size = (std::string::size_type)v13;
        }
        while (!v14);
      }
      v21.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
    }
    else
    {
      ++v22;
    }
  }
  int v15 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v15;
    operator delete(v15);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  double result = *(double *)&v23;
  *(_OWORD *)a2 = v23;
  *(void *)(a2 + 16) = v24;
  return result;
}

void sub_215DF6FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF7030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v14);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

char *sub_215DF7068(void **a1, unsigned char *a2, void *a3)
{
  unint64_t v6 = (unint64_t)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)uint64_t v9 = *a3;
      a1[1] = v9 + 8;
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    uint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      long long v17 = a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      unint64_t v15 = v14 + v6 + 8;
      if (v5 > v15) {
        unint64_t v15 = (unint64_t)a1[1];
      }
      unint64_t v16 = v15 + ~v6 - v14;
      if (v16 >= 0x58)
      {
        long long v17 = a1[1];
        if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFF8) + 8 - v6] >= 0x20)
        {
          uint64_t v45 = (v16 >> 3) + 1;
          uint64_t v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v13 = (uint64_t *)((char *)v13 + v46);
          long long v17 = (void *)(v5 + v46);
          size_t v47 = (_OWORD *)(v5 + 16);
          unint64_t v48 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v50 = *v48;
            *(v47 - 1) = *(v48 - 1);
            _OWORD *v47 = v50;
            v47 += 2;
            v48 += 2;
            v49 -= 4;
          }
          while (v49);
          if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_49;
          }
        }
      }
      else
      {
        long long v17 = a1[1];
      }
      do
      {
        uint64_t v51 = *v13++;
        *v17++ = v51;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_49:
    a1[1] = v17;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)uint64_t v9 = *a3;
    return v9;
  }
  unint64_t v18 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v18 >> 61) {
    sub_2157E81A4();
  }
  uint64_t v20 = v10 - v6;
  if (v20 >> 2 > v18) {
    unint64_t v18 = v20 >> 2;
  }
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v21 = v18;
  }
  if (v21)
  {
    if (v21 >> 61) {
      sub_215738AD8();
    }
    unint64_t v22 = (char *)operator new(8 * v21);
    long long v23 = &v22[8 * v8];
    int v24 = &v22[8 * v21];
    if (v8 != v21) {
      goto LABEL_24;
    }
  }
  else
  {
    unint64_t v22 = 0;
    long long v23 = (char *)(8 * v8);
    int v24 = 0;
    if (v8) {
      goto LABEL_24;
    }
  }
  if (v7 < 1)
  {
    if ((unsigned char *)v6 == a2) {
      unint64_t v44 = 1;
    }
    else {
      unint64_t v44 = v7 >> 2;
    }
    if (v44 >> 61) {
      sub_215738AD8();
    }
    long long v23 = (char *)operator new(8 * v44);
    int v24 = &v23[8 * v44];
    if (v22)
    {
      operator delete(v22);
      int v24 = &v23[8 * v44];
      uint64_t v26 = (char *)*a1;
      *(void *)long long v23 = *a3;
      long long v27 = v23 + 8;
      unint64_t v28 = v23;
      if (v26 != v9) {
        goto LABEL_25;
      }
      goto LABEL_31;
    }
  }
  else
  {
    unint64_t v25 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v25 = v8 + 1;
    }
    v23 -= 8 * (v25 >> 1);
  }
LABEL_24:
  uint64_t v26 = (char *)v6;
  *(void *)long long v23 = *a3;
  long long v27 = v23 + 8;
  unint64_t v28 = v23;
  if ((char *)v6 != v9)
  {
LABEL_25:
    uint64_t v29 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v30 = v29 - v26 - 8;
    uint64_t v31 = v9;
    unint64_t v28 = v23;
    if (v30 < 0x58) {
      goto LABEL_58;
    }
    uint64_t v31 = v9;
    unint64_t v28 = v23;
    if ((unint64_t)(v29 - v23) < 0x20) {
      goto LABEL_58;
    }
    uint64_t v32 = (v30 >> 3) + 1;
    uint64_t v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v31 = &v9[-v33];
    unint64_t v28 = &v23[-v33];
    uint64_t v34 = v23 - 16;
    long long v35 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v37 = *v35;
      *((_OWORD *)v34 - 1) = *(v35 - 1);
      *(_OWORD *)uint64_t v34 = v37;
      v34 -= 32;
      v35 -= 2;
      v36 -= 4;
    }
    while (v36);
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        uint64_t v38 = *((void *)v31 - 1);
        v31 -= 8;
        *((void *)v28 - 1) = v38;
        v28 -= 8;
      }
      while (v31 != v26);
    }
  }
LABEL_31:
  char v39 = (char *)a1[1];
  int64_t v40 = v39 - v9;
  if (v39 != v9)
  {
    std::string v41 = v9;
    size_t v42 = v39 - v9;
    uint64_t v43 = v24;
    memmove(v27, v41, v42);
    int v24 = v43;
    uint64_t v26 = (char *)*a1;
  }
  *a1 = v28;
  a1[1] = &v27[v40];
  a1[2] = v24;
  if (v26) {
    operator delete(v26);
  }
  return v23;
}

void sub_215DF73C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

float sub_215DF73DC(uint64_t *a1)
{
  int v1 = *(unsigned __int8 *)a1;
  if ((v1 - 5) <= 2)
  {
    __str.__r_.__value_.__r.__words[0] = 0;
    sub_215D30984(a1, (double *)&__str);
    return *(double *)&__str.__r_.__value_.__l.__data_;
  }
  if (v1 != 3) {
    return NAN;
  }
  memset(&__str, 0, sizeof(__str));
  sub_215D30C0C((void **)a1, (uint64_t)&__str);
  float v2 = std::stof(&__str, 0);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return v2;
  }
  operator delete(__str.__r_.__value_.__l.__data_);
  return v2;
}

void sub_215DF74A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_215DF74C0(uint64_t *a1)
{
  int v1 = *(unsigned __int8 *)a1;
  if ((v1 - 5) <= 2)
  {
    __str.__r_.__value_.__r.__words[0] = 0;
    sub_215D30984(a1, (double *)&__str);
    return *(double *)&__str.__r_.__value_.__l.__data_;
  }
  if (v1 != 3) {
    return NAN;
  }
  memset(&__str, 0, sizeof(__str));
  sub_215D30C0C((void **)a1, (uint64_t)&__str);
  double v2 = std::stod(&__str, 0);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return v2;
  }
  operator delete(__str.__r_.__value_.__l.__data_);
  return v2;
}

void sub_215DF7580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_215DF75A0(unint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1 != 2)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x20uLL);
    unint64_t v14 = (char *)sub_215D2DC9C((char *)a1);
    sub_215732BF4(&v15, v14);
    sub_215AC8CC8("type must be array, but is ", &v15, &v17);
    sub_215D2DB00(302, (uint64_t)&v17, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C6846B0, (void (*)(void *))sub_215D2DCC4);
  }
  uint64_t v20 = 0;
  long long v19 = 0uLL;
  uint64_t v4 = *(std::string::size_type **)(a1 + 8);
  std::string::size_type v6 = *v4;
  std::string::size_type v5 = v4[1];
  uint64_t v7 = v5 - *v4;
  if (v5 == *v4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    if (v7 < 0) {
      sub_2157E81A4();
    }
    uint64_t v8 = (char *)operator new((unint64_t)v7 >> 1);
    *(void *)&long long v19 = v8;
    *((void *)&v19 + 1) = v8;
    uint64_t v20 = &v8[8 * (v7 >> 4)];
  }
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = a1;
  v17.__r_.__value_.__r.__words[2] = v6;
  unint64_t v18 = 0x8000000000000000;
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = a1;
  v15.__r_.__value_.__r.__words[2] = v5;
  unint64_t v16 = 0x8000000000000000;
  while (!sub_215D315D8((unsigned __int8 **)&v17, (unsigned __int8 **)&v15))
  {
    uint64_t v9 = (uint64_t *)sub_215D316E4((uint64_t)&v17);
    uint64_t v21 = 0;
    sub_215D30984(v9, (double *)&v21);
    uint64_t v8 = sub_215DF7068((void **)&v19, v8, &v21) + 8;
    int v10 = *v17.__r_.__value_.__l.__data_;
    if (v10 == 2)
    {
      v17.__r_.__value_.__r.__words[2] += 16;
    }
    else if (v10 == 1)
    {
      v17.__r_.__value_.__l.__size_ += 40;
    }
    else
    {
      ++v18;
    }
  }
  int64_t v11 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v11;
    operator delete(v11);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  double result = *(double *)&v19;
  *(_OWORD *)a2 = v19;
  *(void *)(a2 + 16) = v20;
  return result;
}

void sub_215DF7768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF77C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v14);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void *sub_215DF77F8(void *a1, uint64_t *a2)
{
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v8 = *a2;
  int v9 = v3;
  sub_2158227C4((unsigned int *)&v8, &v10, ".", 1uLL, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  double result = sub_215731D94(a1, (uint64_t)p_p, size);
  uint64_t v7 = result;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    return v7;
  }
  return result;
}

void sub_215DF78A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_215DF78BC(uint64_t *a1, uint64_t a2)
{
  long long v14 = 0uLL;
  uint64_t v15 = 0;
  sub_215A9B3F0(a1, (uint64_t)&v14);
  sub_215734C64((uint64_t)v11, &v14, 24);
  char v10 = 0;
  MEMORY[0x2166C4400](v11, a2);
  if (std::istream::peek() != 46)
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_215DF7C98(&v9, (uint64_t *)&v14);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A320, MEMORY[0x263F8C080]);
  }
  sub_215DF7D3C(v11, &v10);
  MEMORY[0x2166C4400](v11, a2 + 4);
  if (std::istream::peek() != 46)
  {
    uint64_t v7 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_215DF7C98(&v9, (uint64_t *)&v14);
    std::logic_error::logic_error(v7, &v9);
    v7->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v7, (struct type_info *)off_26425A320, MEMORY[0x263F8C080]);
  }
  sub_215DF7D3C(v11, &v10);
  MEMORY[0x2166C4400](v11, a2 + 8);
  if ((*(_DWORD *)((unsigned char *)&v11[4] + *(void *)(v11[0] - 24)) & 3) != 2)
  {
    uint64_t v8 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_215DF7C98(&v9, (uint64_t *)&v14);
    std::logic_error::logic_error(v8, &v9);
    v8->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v8, (struct type_info *)off_26425A320, MEMORY[0x263F8C080]);
  }
  v11[0] = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v11[2] = v4;
  _OWORD v11[3] = MEMORY[0x263F8C318] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2166C4BF0](&v13);
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)v14);
  }
  return a1;
}

void sub_215DF7C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v17)
  {
LABEL_6:
    sub_2157351A4((uint64_t)&a16);
    if (*(char *)(v18 - 49) < 0) {
      operator delete(*(void **)(v18 - 72));
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void sub_215DF7C98(std::string *a1, uint64_t *a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  v4[1] = 26;
  uint64_t v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) == 0) {
    int v3 = a2;
  }
  else {
    int v3 = (uint64_t *)*a2;
  }
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = a2[1];
  }
  void v4[2] = v3;
  v4[3] = v2;
  v4[4] = "'. Expected pattern 'major.minor.revision'";
  v4[5] = 42;
  sub_2157430CC((uint64_t)v4, (uint64_t)&v5, 0, 0, a1);
}

void *sub_215DF7D3C(void *a1, unsigned char *a2)
{
  MEMORY[0x2166C43A0](&v8, a1, 0);
  if (v8)
  {
    uint64_t v4 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    uint64_t v5 = (unsigned char *)v4[3];
    if (v5 == (unsigned char *)v4[4])
    {
      LODWORD(v4) = (*(uint64_t (**)(void *))(*v4 + 80))(v4);
      if (v4 == -1)
      {
        int v6 = 6;
        goto LABEL_6;
      }
    }
    else
    {
      v4[3] = v5 + 1;
      LOBYTE(v4) = *v5;
    }
    int v6 = 0;
    *a2 = (_BYTE)v4;
LABEL_6:
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v6);
  }
  return a1;
}

void sub_215DF7E1C(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x215DF7DDCLL);
  }
  __cxa_rethrow();
}

void sub_215DF7E94(_Unwind_Exception *a1)
{
}

void sub_215DF7EB4()
{
}

void sub_215DF7ECC()
{
}

uint64_t sub_215DF7EE8()
{
  return std::ostream::write();
}

uint64_t sub_215DF7EF4()
{
  return std::ostream::write();
}

uint64_t sub_215DF7F00()
{
  return std::ostream::write();
}

uint64_t sub_215DF7F0C()
{
  return std::ostream::write();
}

uint64_t sub_215DF7F18()
{
  return std::ostream::write();
}

uint64_t sub_215DF7F24()
{
  return std::ostream::write();
}

uint64_t sub_215DF7F30()
{
  return std::ostream::write();
}

uint64_t sub_215DF7F3C()
{
  return std::ostream::write();
}

uint64_t sub_215DF7F48()
{
  return std::ostream::write();
}

uint64_t sub_215DF7F54()
{
  return std::ostream::write();
}

uint64_t sub_215DF7F60()
{
  return std::ostream::write();
}

uint64_t sub_215DF7F6C()
{
  return std::ostream::write();
}

uint64_t sub_215DF7F78()
{
  return std::ostream::write();
}

uint64_t sub_215DF7F84()
{
  return std::ostream::write();
}

uint64_t sub_215DF7F90()
{
  return std::ostream::write();
}

uint64_t sub_215DF8000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t result = std::ostream::write();
      ++a3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF8054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t result = std::ostream::write();
      ++a3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF80A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = 2 * a2;
    do
    {
      uint64_t result = std::ostream::write();
      a3 += 2;
      v4 -= 2;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF80FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = 4 * a2;
    do
    {
      uint64_t result = std::ostream::write();
      a3 += 4;
      v4 -= 4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF8150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = 8 * a2;
    do
    {
      uint64_t result = std::ostream::write();
      a3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF81A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = 8 * a2;
    do
    {
      uint64_t result = std::ostream::write();
      a3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF81F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t result = std::ostream::write();
      ++a3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF824C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t result = std::ostream::write();
      ++a3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF82A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = 2 * a2;
    do
    {
      uint64_t result = std::ostream::write();
      a3 += 2;
      v4 -= 2;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF82F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = 4 * a2;
    do
    {
      uint64_t result = std::ostream::write();
      a3 += 4;
      v4 -= 4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF8348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = 8 * a2;
    do
    {
      uint64_t result = std::ostream::write();
      a3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF839C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = 8 * a2;
    do
    {
      uint64_t result = std::ostream::write();
      a3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF83F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = 4 * a2;
    do
    {
      uint64_t result = std::ostream::write();
      a3 += 4;
      v4 -= 4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF8444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = 8 * a2;
    do
    {
      uint64_t result = std::ostream::write();
      a3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF8498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = 24 * a2;
    do
    {
      std::ostream::write();
      uint64_t result = std::ostream::write();
      a3 += 24;
      v4 -= 24;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF852C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  std::ostream::write();
  if (v4 < 0)
  {
    exceptiounint64_t n = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C686698;
    __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
  }
  return std::ostream::write();
}

uint64_t sub_215DF85C0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  std::ostream::write();
  if (v4 < 0)
  {
    exceptiounint64_t n = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C686698;
    __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
  }
  return std::ostream::write();
}

uint64_t sub_215DF8664()
{
  return std::istream::read();
}

uint64_t sub_215DF8670()
{
  return std::istream::read();
}

uint64_t sub_215DF867C()
{
  return std::istream::read();
}

uint64_t sub_215DF8688()
{
  return std::istream::read();
}

uint64_t sub_215DF8694()
{
  return std::istream::read();
}

uint64_t sub_215DF86A0()
{
  return std::istream::read();
}

uint64_t sub_215DF86AC()
{
  return std::istream::read();
}

uint64_t sub_215DF86B8()
{
  return std::istream::read();
}

uint64_t sub_215DF86C4()
{
  return std::istream::read();
}

uint64_t sub_215DF86D0()
{
  return std::istream::read();
}

uint64_t sub_215DF86DC()
{
  return std::istream::read();
}

uint64_t sub_215DF86E8()
{
  return std::istream::read();
}

uint64_t sub_215DF86F4()
{
  return std::istream::read();
}

uint64_t sub_215DF8700()
{
  return std::istream::read();
}

uint64_t sub_215DF870C(uint64_t a1, uint64_t a2)
{
  std::istream::read();
  if (*(char *)(a2 + 23) < 0)
  {
    int v3 = *(unsigned char **)a2;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)(a2 + 23) = 0;
    int v3 = (unsigned char *)a2;
  }
  *int v3 = 0;
  return std::istream::read();
}

uint64_t sub_215DF87BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t result = std::istream::read();
      ++a3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF8810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t result = std::istream::read();
      ++a3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF8864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = 2 * a2;
    do
    {
      uint64_t result = std::istream::read();
      a3 += 2;
      v4 -= 2;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF88B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = 4 * a2;
    do
    {
      uint64_t result = std::istream::read();
      a3 += 4;
      v4 -= 4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF890C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = 8 * a2;
    do
    {
      uint64_t result = std::istream::read();
      a3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF8960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = 8 * a2;
    do
    {
      uint64_t result = std::istream::read();
      a3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF89B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t result = std::istream::read();
      ++a3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF8A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t result = std::istream::read();
      ++a3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF8A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = 2 * a2;
    do
    {
      uint64_t result = std::istream::read();
      a3 += 2;
      v4 -= 2;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF8AB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = 4 * a2;
    do
    {
      uint64_t result = std::istream::read();
      a3 += 4;
      v4 -= 4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF8B04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = 8 * a2;
    do
    {
      uint64_t result = std::istream::read();
      a3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF8B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = 8 * a2;
    do
    {
      uint64_t result = std::istream::read();
      a3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF8BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = 4 * a2;
    do
    {
      uint64_t result = std::istream::read();
      a3 += 4;
      v4 -= 4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF8C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = 8 * a2;
    do
    {
      uint64_t result = std::istream::read();
      a3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF8C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = 24 * a2;
    do
    {
      std::istream::read();
      if (*(char *)(a3 + 23) < 0)
      {
        int v6 = *(unsigned char **)a3;
        *(void *)(a3 + 8) = 0;
      }
      else
      {
        *(unsigned char *)(a3 + 23) = 0;
        int v6 = (unsigned char *)a3;
      }
      *int v6 = 0;
      uint64_t result = std::istream::read();
      a3 += 24;
      v4 -= 24;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_215DF8D2C(uint64_t a1, unint64_t *a2)
{
  std::istream::read();
  unint64_t v3 = *a2;
  if (*a2)
  {
    int v7 = 0;
    sub_215806F18(v6, "Size mismatch between the input archive (");
    std::to_string(&v8, v3);
    v10.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    v10.__r_.__value_.__l.__size_ = (std::string::size_type)&v8;
    v10.__r_.__value_.__r.__words[2] = (std::string::size_type)v6;
    int64_t v11 = &v8;
    char v12 = &v8;
    if (v7 == -1) {
      sub_215742D4C();
    }
    std::string v9 = &v10;
    ((void (*)(std::string **, _DWORD *))off_26C685568[v7])(&v9, v6);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    v10.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    v10.__r_.__value_.__l.__size_ = (std::string::size_type)") and the input blob (";
    v10.__r_.__value_.__r.__words[2] = (std::string::size_type)v6;
    int64_t v11 = (std::string *)") and the input blob (";
    char v12 = (std::string *)") and the input blob (";
    if (v7 == -1) {
      sub_215742D4C();
    }
    v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
    ((void (*)(std::string *, _DWORD *))off_26C685580[v7])(&v8, v6);
    std::to_string(&v8, 0);
    v10.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    v10.__r_.__value_.__l.__size_ = (std::string::size_type)&v8;
    v10.__r_.__value_.__r.__words[2] = (std::string::size_type)v6;
    int64_t v11 = &v8;
    char v12 = &v8;
    if (v7 == -1) {
      sub_215742D4C();
    }
    std::string v9 = &v10;
    ((void (*)(std::string **, _DWORD *))off_26C685568[v7])(&v9, v6);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    v10.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    v10.__r_.__value_.__l.__size_ = (std::string::size_type)")";
    v10.__r_.__value_.__r.__words[2] = (std::string::size_type)v6;
    int64_t v11 = (std::string *)")";
    char v12 = (std::string *)")";
    if (v7 == -1) {
      sub_215742D4C();
    }
    v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
    ((void (*)(std::string *, _DWORD *))off_26C685598[v7])(&v8, v6);
    if (v7 == -1) {
      sub_215742D4C();
    }
    v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v9;
    ((void (*)(std::string *__return_ptr, std::string *, _DWORD *))off_26C6855B0[v7])(&v10, &v8, v6);
    if (v7 != -1) {
      ((void (*)(std::string *, _DWORD *))off_26C685550[v7])(&v8, v6);
    }
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &v10);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  return std::istream::read();
}

void sub_215DF8FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, int a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF9090(uint64_t a1, char *a2)
{
  if (*(void *)(a1 + 40))
  {
    uint64_t v4 = *(void **)(a1 + 24);
    LOBYTE(__p[0]) = *(unsigned char *)(a1 + 32);
    sub_215731D94(v4, (uint64_t)__p, 1);
  }
  uint64_t v5 = *(void **)(a1 + 24);
  sub_215DF9150(a2);
  if ((v9 & 0x80u) == 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v7 = v9;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_215731D94(v5, (uint64_t)v6, v7);
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  ++*(void *)(a1 + 40);
}

void sub_215DF9134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215DF9150(char *a1)
{
  int v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  v5[2] = v2;
  void v5[3] = &v4;
  v5[4] = &v4;
  int v6 = v5;
  ((void (*)(void **, unsigned char *))off_26C685990[0])(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (v3 == -1) {
    sub_215742D4C();
  }
  v5[0] = &v4;
  uint64_t result = ((uint64_t (*)(void *, unsigned char *))off_26C685960[v3])(v5, v2);
  if (v3 != -1) {
    return ((uint64_t (*)(void *, unsigned char *))off_26C685900[v3])(v5, v2);
  }
  return result;
}

void sub_215DF9240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DF9258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_215742CF0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_215DF927C(uint64_t a1, unsigned __int8 *a2)
{
  if (*(void *)(a1 + 40))
  {
    std::string v4 = *(void **)(a1 + 24);
    LOBYTE(__p[0]) = *(unsigned char *)(a1 + 32);
    sub_215731D94(v4, (uint64_t)__p, 1);
  }
  uint64_t v5 = *(void **)(a1 + 24);
  sub_215BAB6B4(a2);
  if ((v9 & 0x80u) == 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v7 = v9;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_215731D94(v5, (uint64_t)v6, v7);
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  ++*(void *)(a1 + 40);
}

void sub_215DF9320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF933C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 40))
  {
    std::string v4 = *(void **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 32);
    sub_215731D94(v4, (uint64_t)&__p, 1);
  }
  uint64_t v5 = *(void **)(a1 + 24);
  __p.__r_.__value_.__s.__data_[0] = 34;
  int v6 = sub_215731D94(v5, (uint64_t)&__p, 1);
  if (*(char *)(a2 + 23) < 0) {
    sub_215738B0C(&__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  sub_215E13B5C(&__p, "\"", 1, "\"\"", 2uLL, 0, 0, (uint64_t)v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v7 = v10;
  }
  else {
    uint64_t v7 = (void **)v10[0];
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v8 = v11;
  }
  else {
    uint64_t v8 = (uint64_t)v10[1];
  }
  unsigned __int8 v9 = sub_215731D94(v6, (uint64_t)v7, v8);
  __p.__r_.__value_.__s.__data_[0] = 34;
  sub_215731D94(v9, (uint64_t)&__p, 1);
  if ((char)v11 < 0) {
    operator delete(v10[0]);
  }
  ++*(void *)(a1 + 40);
}

void sub_215DF9464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF9494(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    std::string v4 = (unsigned __int8 *)a2[1];
    uint64_t v5 = *(void *)(a1 + 40);
    do
    {
      if (v5)
      {
        int v6 = *(void **)(a1 + 24);
        LOBYTE(__p[0]) = *(unsigned char *)(a1 + 32);
        sub_215731D94(v6, (uint64_t)__p, 1);
      }
      uint64_t v7 = *(void **)(a1 + 24);
      __p[0] = (void *)*v4;
      char v9 = 1;
      sub_215731D94(v7, (uint64_t)__p, 1);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v5 = *(void *)(a1 + 40) + 1;
      *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v5;
      ++v4;
      --v2;
    }
    while (v2);
  }
}

void sub_215DF9540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215DF955C(uint64_t result, void *a2)
{
  if (*a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = a2[1];
    uint64_t v4 = *(void *)(result + 40);
    uint64_t v5 = 2 * *a2;
    do
    {
      if (v4)
      {
        int v6 = *(void **)(v2 + 24);
        char v7 = *(unsigned char *)(v2 + 32);
        sub_215731D94(v6, (uint64_t)&v7, 1);
      }
      v3 += 2;
      uint64_t result = std::ostream::operator<<();
      uint64_t v4 = *(void *)(v2 + 40) + 1;
      *(void *)(v2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v4;
      v5 -= 2;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_215DF95E4(uint64_t result, void *a2)
{
  if (*a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = a2[1];
    uint64_t v4 = *(void *)(result + 40);
    uint64_t v5 = 4 * *a2;
    do
    {
      if (v4)
      {
        int v6 = *(void **)(v2 + 24);
        char v7 = *(unsigned char *)(v2 + 32);
        sub_215731D94(v6, (uint64_t)&v7, 1);
      }
      *(void *)(*(void *)(v2 + 24) + *(void *)(**(void **)(v2 + 24) - 24) + 16) = 9;
      v3 += 4;
      uint64_t result = std::ostream::operator<<();
      uint64_t v4 = *(void *)(v2 + 40) + 1;
      *(void *)(v2 + 4std::__fs::filesystem::__rename(__from, __to, 0) = v4;
      v5 -= 4;
    }
    while (v5);
  }
  return result;
}

void sub_215DF968C(uint64_t a1, std::string::size_type *a2)
{
  if (*(void *)(a1 + 40))
  {
    uint64_t v4 = *(void **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 32);
    sub_215731D94(v4, (uint64_t)&__p, 1);
  }
  std::string::size_type v5 = *a2;
  if (*a2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  int v6 = (const void *)a2[1];
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dsint t = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
  p_dsint t = &__dst;
  if (v5) {
LABEL_10:
  }
    memmove(p_dst, v6, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  std::string v10 = *(void **)(a1 + 24);
  __p.__r_.__value_.__s.__data_[0] = 34;
  unsigned __int8 v11 = sub_215731D94(v10, (uint64_t)&__p, 1);
  int v12 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    sub_215738B0C(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = __dst;
  }
  sub_215E13B5C(&__p, "\"", 1, "\"\"", 2uLL, 0, 0, (uint64_t)v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v13 = v16;
  }
  else {
    uint64_t v13 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v14 = v17;
  }
  else {
    uint64_t v14 = (uint64_t)v16[1];
  }
  uint64_t v15 = sub_215731D94(v11, (uint64_t)v13, v14);
  __p.__r_.__value_.__s.__data_[0] = 34;
  sub_215731D94(v15, (uint64_t)&__p, 1);
  if ((char)v17 < 0)
  {
    operator delete(v16[0]);
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_26:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_24;
  }
  if (v12 < 0) {
    goto LABEL_26;
  }
LABEL_24:
  ++*(void *)(a1 + 40);
}

void sub_215DF9848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (v26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF9898(uint64_t a1, std::string::size_type *a2)
{
  if (*(void *)(a1 + 40))
  {
    uint64_t v4 = *(void **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 32);
    sub_215731D94(v4, (uint64_t)&__p, 1);
  }
  std::string::size_type v5 = *a2;
  if (*a2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  int v6 = (const void *)a2[1];
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dsint t = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
  p_dsint t = &__dst;
  if (v5) {
LABEL_10:
  }
    memmove(p_dst, v6, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  std::string v10 = *(void **)(a1 + 24);
  __p.__r_.__value_.__s.__data_[0] = 34;
  unsigned __int8 v11 = sub_215731D94(v10, (uint64_t)&__p, 1);
  int v12 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    sub_215738B0C(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = __dst;
  }
  sub_215E13B5C(&__p, "\"", 1, "\"\"", 2uLL, 0, 0, (uint64_t)v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v13 = v16;
  }
  else {
    uint64_t v13 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v14 = v17;
  }
  else {
    uint64_t v14 = (uint64_t)v16[1];
  }
  uint64_t v15 = sub_215731D94(v11, (uint64_t)v13, v14);
  __p.__r_.__value_.__s.__data_[0] = 34;
  sub_215731D94(v15, (uint64_t)&__p, 1);
  if ((char)v17 < 0)
  {
    operator delete(v16[0]);
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_26:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_24;
  }
  if (v12 < 0) {
    goto LABEL_26;
  }
LABEL_24:
  ++*(void *)(a1 + 40);
}

void sub_215DF9A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (v26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DF9AA4(uint64_t a1, unsigned char *a2)
{
  ++*(void *)(a1 + 80);
  if (*(unsigned char *)(a1 + 128) && *(unsigned char *)(a1 + 131))
  {
    *(unsigned char *)(a1 + 132) = 1;
    return;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(unsigned char *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  int v4 = std::istream::peek();
  if (v4 != -1 && !sub_215DFD5D8(a1, v4))
  {
    sub_215DFD700(a1, (uint64_t)&v21);
    sub_215734C64((uint64_t)v14, &v21, 24);
    sub_215DF7D3C(v14, a2);
    if ((v17[*((void *)v14[0] - 3)] & 5) != 0) {
      *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
    }
    v14[0] = *(void **)MEMORY[0x263F8C2B8];
    uint64_t v13 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void **)((char *)v14 + *((void *)v14[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v15 = v13;
    uint64_t v16 = MEMORY[0x263F8C318] + 16;
    if (v19 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2166C4BF0](&v20);
    if (v22 < 0) {
      operator delete((void *)v21);
    }
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    std::string::size_type v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      std::string::size_type v5 = *(const char **)v5;
    }
    int v6 = LOBYTE(v14[0]);
    sub_215BA7658(v5, (uint64_t)v14);
    char v7 = (char *)HIBYTE(v15);
    if (v15 >= 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (void **)v14[0];
    }
    if (v15 < 0) {
      char v7 = (char *)v14[1];
    }
    if (v7)
    {
      uint64_t v9 = v7 - 1;
      do
      {
        int v10 = *(unsigned __int8 *)v8;
        uint64_t v8 = (void **)((char *)v8 + 1);
        BOOL v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0) {
        goto LABEL_23;
      }
    }
    else
    {
      BOOL v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(unsigned char *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
LABEL_26:
  ++*(void *)(a1 + 104);
}

void sub_215DF9D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2157351A4((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0) {
    operator delete(*(void **)(v9 - 72));
  }
  _Unwind_Resume(a1);
}

void sub_215DF9DC4(uint64_t a1, unsigned char *a2)
{
  ++*(void *)(a1 + 80);
  if (*(unsigned char *)(a1 + 128) && *(unsigned char *)(a1 + 131))
  {
    *(unsigned char *)(a1 + 132) = 1;
    return;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(unsigned char *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  int v4 = std::istream::peek();
  if (v4 != -1 && !sub_215DFD5D8(a1, v4))
  {
    sub_215DFD700(a1, (uint64_t)&__p);
    if ((v23 & 0x80u) == 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    uint64_t v14 = strtol(p_p, 0, 10);
    uint64_t v15 = 127;
    if (v14 < 127) {
      uint64_t v15 = v14;
    }
    if (v15 <= -128) {
      LODWORD(v15) = -128;
    }
    *a2 = v15;
    if (!v15)
    {
      uint64_t v16 = (v23 & 0x80u) == 0 ? &__p : (void **)__p;
      uint64_t v17 = (v23 & 0x80u) == 0 ? v23 : v22;
      if (v17)
      {
        uint64_t v18 = MEMORY[0x263EF8318];
        while (1)
        {
          unsigned int v19 = *(char *)v16;
          if (!((v19 & 0x80000000) != 0 ? __maskrune(v19, 0x500uLL) : *(_DWORD *)(v18 + 4 * v19 + 60) & 0x500)) {
            break;
          }
          uint64_t v16 = (void **)((char *)v16 + 1);
          if (!--v17) {
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
      }
    }
LABEL_35:
    if ((char)v23 < 0) {
      operator delete(__p);
    }
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(__p) = 0;
    std::istream::read();
    std::string::size_type v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      std::string::size_type v5 = *(const char **)v5;
    }
    int v6 = __p;
    sub_215BA7658(v5, (uint64_t)&__p);
    uint64_t v7 = v23;
    if ((v23 & 0x80u) == 0) {
      uint64_t v8 = (unsigned __int8 *)&__p;
    }
    else {
      uint64_t v8 = (unsigned __int8 *)__p;
    }
    if ((v23 & 0x80u) != 0) {
      uint64_t v7 = v22;
    }
    if (v7)
    {
      uint64_t v9 = v7 - 1;
      do
      {
        int v10 = *v8++;
        BOOL v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if (((char)v23 & 0x80000000) == 0) {
        goto LABEL_23;
      }
    }
    else
    {
      BOOL v11 = 0;
      if (((char)v23 & 0x80000000) == 0)
      {
LABEL_23:
        *(unsigned char *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(__p);
    goto LABEL_23;
  }
LABEL_24:
  *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
LABEL_26:
  ++*(void *)(a1 + 104);
}

void sub_215DFA000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DFA01C(uint64_t a1, unsigned char *a2)
{
  ++*(void *)(a1 + 80);
  if (*(unsigned char *)(a1 + 128) && *(unsigned char *)(a1 + 131))
  {
    *(unsigned char *)(a1 + 132) = 1;
    return;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(unsigned char *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  int v4 = std::istream::peek();
  if (v4 != -1 && !sub_215DFD5D8(a1, v4))
  {
    sub_215DFD700(a1, (uint64_t)&__p);
    if ((v23 & 0x80u) == 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    uint64_t v14 = strtol(p_p, 0, 10);
    uint64_t v15 = 255;
    if (v14 < 255) {
      uint64_t v15 = v14;
    }
    *a2 = v15 & ~(v15 >> 63);
    if (v15 <= 0)
    {
      uint64_t v16 = (v23 & 0x80u) == 0 ? &__p : (void **)__p;
      uint64_t v17 = (v23 & 0x80u) == 0 ? v23 : v22;
      if (v17)
      {
        uint64_t v18 = MEMORY[0x263EF8318];
        while (1)
        {
          unsigned int v19 = *(char *)v16;
          if (!((v19 & 0x80000000) != 0 ? __maskrune(v19, 0x500uLL) : *(_DWORD *)(v18 + 4 * v19 + 60) & 0x500)) {
            break;
          }
          uint64_t v16 = (void **)((char *)v16 + 1);
          if (!--v17) {
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
      }
    }
LABEL_33:
    if ((char)v23 < 0) {
      operator delete(__p);
    }
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(__p) = 0;
    std::istream::read();
    std::string::size_type v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      std::string::size_type v5 = *(const char **)v5;
    }
    int v6 = __p;
    sub_215BA7658(v5, (uint64_t)&__p);
    uint64_t v7 = v23;
    if ((v23 & 0x80u) == 0) {
      uint64_t v8 = (unsigned __int8 *)&__p;
    }
    else {
      uint64_t v8 = (unsigned __int8 *)__p;
    }
    if ((v23 & 0x80u) != 0) {
      uint64_t v7 = v22;
    }
    if (v7)
    {
      uint64_t v9 = v7 - 1;
      do
      {
        int v10 = *v8++;
        BOOL v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if (((char)v23 & 0x80000000) == 0) {
        goto LABEL_23;
      }
    }
    else
    {
      BOOL v11 = 0;
      if (((char)v23 & 0x80000000) == 0)
      {
LABEL_23:
        *(unsigned char *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(__p);
    goto LABEL_23;
  }
LABEL_24:
  *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
LABEL_26:
  ++*(void *)(a1 + 104);
}

void sub_215DFA258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DFA274(uint64_t a1, _WORD *a2)
{
  ++*(void *)(a1 + 80);
  if (*(unsigned char *)(a1 + 128) && *(unsigned char *)(a1 + 131))
  {
    *(unsigned char *)(a1 + 132) = 1;
    return;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(unsigned char *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  int v4 = std::istream::peek();
  if (v4 != -1 && !sub_215DFD5D8(a1, v4))
  {
    sub_215DFD700(a1, (uint64_t)&v21);
    sub_215734C64((uint64_t)v14, &v21, 24);
    MEMORY[0x2166C4430](v14, a2);
    if ((v17[*((void *)v14[0] - 3)] & 5) != 0) {
      *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
    }
    v14[0] = *(void **)MEMORY[0x263F8C2B8];
    uint64_t v13 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void **)((char *)v14 + *((void *)v14[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v15 = v13;
    uint64_t v16 = MEMORY[0x263F8C318] + 16;
    if (v19 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2166C4BF0](&v20);
    if (v22 < 0) {
      operator delete((void *)v21);
    }
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    std::string::size_type v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      std::string::size_type v5 = *(const char **)v5;
    }
    int v6 = LOBYTE(v14[0]);
    sub_215BA7658(v5, (uint64_t)v14);
    uint64_t v7 = (char *)HIBYTE(v15);
    if (v15 >= 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (void **)v14[0];
    }
    if (v15 < 0) {
      uint64_t v7 = (char *)v14[1];
    }
    if (v7)
    {
      uint64_t v9 = v7 - 1;
      do
      {
        int v10 = *(unsigned __int8 *)v8;
        uint64_t v8 = (void **)((char *)v8 + 1);
        BOOL v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0) {
        goto LABEL_23;
      }
    }
    else
    {
      BOOL v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(unsigned char *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
LABEL_26:
  ++*(void *)(a1 + 104);
}

void sub_215DFA568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2157351A4((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0) {
    operator delete(*(void **)(v9 - 72));
  }
  _Unwind_Resume(a1);
}

void sub_215DFA594(uint64_t a1, _WORD *a2)
{
  ++*(void *)(a1 + 80);
  if (*(unsigned char *)(a1 + 128) && *(unsigned char *)(a1 + 131))
  {
    *(unsigned char *)(a1 + 132) = 1;
    return;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(unsigned char *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  int v4 = std::istream::peek();
  if (v4 != -1 && !sub_215DFD5D8(a1, v4))
  {
    sub_215DFD700(a1, (uint64_t)&v21);
    sub_215734C64((uint64_t)v14, &v21, 24);
    MEMORY[0x2166C4440](v14, a2);
    if ((v17[*((void *)v14[0] - 3)] & 5) != 0) {
      *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
    }
    v14[0] = *(void **)MEMORY[0x263F8C2B8];
    uint64_t v13 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void **)((char *)v14 + *((void *)v14[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v15 = v13;
    uint64_t v16 = MEMORY[0x263F8C318] + 16;
    if (v19 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2166C4BF0](&v20);
    if (v22 < 0) {
      operator delete((void *)v21);
    }
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    std::string::size_type v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      std::string::size_type v5 = *(const char **)v5;
    }
    int v6 = LOBYTE(v14[0]);
    sub_215BA7658(v5, (uint64_t)v14);
    uint64_t v7 = (char *)HIBYTE(v15);
    if (v15 >= 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (void **)v14[0];
    }
    if (v15 < 0) {
      uint64_t v7 = (char *)v14[1];
    }
    if (v7)
    {
      uint64_t v9 = v7 - 1;
      do
      {
        int v10 = *(unsigned __int8 *)v8;
        uint64_t v8 = (void **)((char *)v8 + 1);
        BOOL v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0) {
        goto LABEL_23;
      }
    }
    else
    {
      BOOL v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(unsigned char *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
LABEL_26:
  ++*(void *)(a1 + 104);
}

void sub_215DFA888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2157351A4((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0) {
    operator delete(*(void **)(v9 - 72));
  }
  _Unwind_Resume(a1);
}

void sub_215DFA8B4(uint64_t a1, _DWORD *a2)
{
  ++*(void *)(a1 + 80);
  if (*(unsigned char *)(a1 + 128) && *(unsigned char *)(a1 + 131))
  {
    *(unsigned char *)(a1 + 132) = 1;
    return;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(unsigned char *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  int v4 = std::istream::peek();
  if (v4 != -1 && !sub_215DFD5D8(a1, v4))
  {
    sub_215DFD700(a1, (uint64_t)&v21);
    sub_215734C64((uint64_t)v14, &v21, 24);
    MEMORY[0x2166C43F0](v14, a2);
    if ((v17[*((void *)v14[0] - 3)] & 5) != 0) {
      *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
    }
    v14[0] = *(void **)MEMORY[0x263F8C2B8];
    uint64_t v13 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void **)((char *)v14 + *((void *)v14[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v15 = v13;
    uint64_t v16 = MEMORY[0x263F8C318] + 16;
    if (v19 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2166C4BF0](&v20);
    if (v22 < 0) {
      operator delete((void *)v21);
    }
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    std::string::size_type v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      std::string::size_type v5 = *(const char **)v5;
    }
    int v6 = LOBYTE(v14[0]);
    sub_215BA7658(v5, (uint64_t)v14);
    uint64_t v7 = (char *)HIBYTE(v15);
    if (v15 >= 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (void **)v14[0];
    }
    if (v15 < 0) {
      uint64_t v7 = (char *)v14[1];
    }
    if (v7)
    {
      uint64_t v9 = v7 - 1;
      do
      {
        int v10 = *(unsigned __int8 *)v8;
        uint64_t v8 = (void **)((char *)v8 + 1);
        BOOL v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0) {
        goto LABEL_23;
      }
    }
    else
    {
      BOOL v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(unsigned char *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
LABEL_26:
  ++*(void *)(a1 + 104);
}

void sub_215DFABA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2157351A4((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0) {
    operator delete(*(void **)(v9 - 72));
  }
  _Unwind_Resume(a1);
}

void sub_215DFABD4(uint64_t a1, _DWORD *a2)
{
  ++*(void *)(a1 + 80);
  if (*(unsigned char *)(a1 + 128) && *(unsigned char *)(a1 + 131))
  {
    *(unsigned char *)(a1 + 132) = 1;
    return;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(unsigned char *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  int v4 = std::istream::peek();
  if (v4 != -1 && !sub_215DFD5D8(a1, v4))
  {
    sub_215DFD700(a1, (uint64_t)&v21);
    sub_215734C64((uint64_t)v14, &v21, 24);
    MEMORY[0x2166C4400](v14, a2);
    if ((v17[*((void *)v14[0] - 3)] & 5) != 0) {
      *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
    }
    v14[0] = *(void **)MEMORY[0x263F8C2B8];
    uint64_t v13 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void **)((char *)v14 + *((void *)v14[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v15 = v13;
    uint64_t v16 = MEMORY[0x263F8C318] + 16;
    if (v19 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2166C4BF0](&v20);
    if (v22 < 0) {
      operator delete((void *)v21);
    }
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    std::string::size_type v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      std::string::size_type v5 = *(const char **)v5;
    }
    int v6 = LOBYTE(v14[0]);
    sub_215BA7658(v5, (uint64_t)v14);
    uint64_t v7 = (char *)HIBYTE(v15);
    if (v15 >= 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (void **)v14[0];
    }
    if (v15 < 0) {
      uint64_t v7 = (char *)v14[1];
    }
    if (v7)
    {
      uint64_t v9 = v7 - 1;
      do
      {
        int v10 = *(unsigned __int8 *)v8;
        uint64_t v8 = (void **)((char *)v8 + 1);
        BOOL v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0) {
        goto LABEL_23;
      }
    }
    else
    {
      BOOL v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(unsigned char *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
LABEL_26:
  ++*(void *)(a1 + 104);
}

void sub_215DFAEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2157351A4((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0) {
    operator delete(*(void **)(v9 - 72));
  }
  _Unwind_Resume(a1);
}

void sub_215DFAEF4(uint64_t a1, void *a2)
{
  ++*(void *)(a1 + 80);
  if (*(unsigned char *)(a1 + 128) && *(unsigned char *)(a1 + 131))
  {
    *(unsigned char *)(a1 + 132) = 1;
    return;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(unsigned char *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  int v4 = std::istream::peek();
  if (v4 != -1 && !sub_215DFD5D8(a1, v4))
  {
    sub_215DFD700(a1, (uint64_t)&v21);
    sub_215734C64((uint64_t)v14, &v21, 24);
    MEMORY[0x2166C4410](v14, a2);
    if ((v17[*((void *)v14[0] - 3)] & 5) != 0) {
      *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
    }
    v14[0] = *(void **)MEMORY[0x263F8C2B8];
    uint64_t v13 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void **)((char *)v14 + *((void *)v14[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v15 = v13;
    uint64_t v16 = MEMORY[0x263F8C318] + 16;
    if (v19 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2166C4BF0](&v20);
    if (v22 < 0) {
      operator delete((void *)v21);
    }
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    std::string::size_type v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      std::string::size_type v5 = *(const char **)v5;
    }
    int v6 = LOBYTE(v14[0]);
    sub_215BA7658(v5, (uint64_t)v14);
    uint64_t v7 = (char *)HIBYTE(v15);
    if (v15 >= 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (void **)v14[0];
    }
    if (v15 < 0) {
      uint64_t v7 = (char *)v14[1];
    }
    if (v7)
    {
      uint64_t v9 = v7 - 1;
      do
      {
        int v10 = *(unsigned __int8 *)v8;
        uint64_t v8 = (void **)((char *)v8 + 1);
        BOOL v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0) {
        goto LABEL_23;
      }
    }
    else
    {
      BOOL v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(unsigned char *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
LABEL_26:
  ++*(void *)(a1 + 104);
}

void sub_215DFB1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2157351A4((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0) {
    operator delete(*(void **)(v9 - 72));
  }
  _Unwind_Resume(a1);
}

void sub_215DFB214(uint64_t a1, void *a2)
{
  ++*(void *)(a1 + 80);
  if (*(unsigned char *)(a1 + 128) && *(unsigned char *)(a1 + 131))
  {
    *(unsigned char *)(a1 + 132) = 1;
    return;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(unsigned char *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  int v4 = std::istream::peek();
  if (v4 != -1 && !sub_215DFD5D8(a1, v4))
  {
    sub_215DFD700(a1, (uint64_t)&v21);
    sub_215734C64((uint64_t)v14, &v21, 24);
    MEMORY[0x2166C4420](v14, a2);
    if ((v17[*((void *)v14[0] - 3)] & 5) != 0) {
      *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
    }
    v14[0] = *(void **)MEMORY[0x263F8C2B8];
    uint64_t v13 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void **)((char *)v14 + *((void *)v14[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v15 = v13;
    uint64_t v16 = MEMORY[0x263F8C318] + 16;
    if (v19 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2166C4BF0](&v20);
    if (v22 < 0) {
      operator delete((void *)v21);
    }
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    std::string::size_type v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      std::string::size_type v5 = *(const char **)v5;
    }
    int v6 = LOBYTE(v14[0]);
    sub_215BA7658(v5, (uint64_t)v14);
    uint64_t v7 = (char *)HIBYTE(v15);
    if (v15 >= 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (void **)v14[0];
    }
    if (v15 < 0) {
      uint64_t v7 = (char *)v14[1];
    }
    if (v7)
    {
      uint64_t v9 = v7 - 1;
      do
      {
        int v10 = *(unsigned __int8 *)v8;
        uint64_t v8 = (void **)((char *)v8 + 1);
        BOOL v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0) {
        goto LABEL_23;
      }
    }
    else
    {
      BOOL v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(unsigned char *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
LABEL_26:
  ++*(void *)(a1 + 104);
}

void sub_215DFB508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2157351A4((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0) {
    operator delete(*(void **)(v9 - 72));
  }
  _Unwind_Resume(a1);
}

void sub_215DFB534(uint64_t a1, void *a2)
{
  ++*(void *)(a1 + 80);
  if (*(unsigned char *)(a1 + 128) && *(unsigned char *)(a1 + 131))
  {
    *(unsigned char *)(a1 + 132) = 1;
    return;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(unsigned char *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  int v4 = std::istream::peek();
  if (v4 != -1 && !sub_215DFD5D8(a1, v4))
  {
    sub_215DFD700(a1, (uint64_t)&v21);
    sub_215734C64((uint64_t)v14, &v21, 24);
    MEMORY[0x2166C4450](v14, a2);
    if ((v17[*((void *)v14[0] - 3)] & 5) != 0) {
      *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
    }
    v14[0] = *(void **)MEMORY[0x263F8C2B8];
    uint64_t v13 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void **)((char *)v14 + *((void *)v14[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v15 = v13;
    uint64_t v16 = MEMORY[0x263F8C318] + 16;
    if (v19 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2166C4BF0](&v20);
    if (v22 < 0) {
      operator delete((void *)v21);
    }
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    std::string::size_type v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      std::string::size_type v5 = *(const char **)v5;
    }
    int v6 = LOBYTE(v14[0]);
    sub_215BA7658(v5, (uint64_t)v14);
    uint64_t v7 = (char *)HIBYTE(v15);
    if (v15 >= 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (void **)v14[0];
    }
    if (v15 < 0) {
      uint64_t v7 = (char *)v14[1];
    }
    if (v7)
    {
      uint64_t v9 = v7 - 1;
      do
      {
        int v10 = *(unsigned __int8 *)v8;
        uint64_t v8 = (void **)((char *)v8 + 1);
        BOOL v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0) {
        goto LABEL_23;
      }
    }
    else
    {
      BOOL v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(unsigned char *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
LABEL_26:
  ++*(void *)(a1 + 104);
}

void sub_215DFB828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2157351A4((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0) {
    operator delete(*(void **)(v9 - 72));
  }
  _Unwind_Resume(a1);
}

void sub_215DFB854(uint64_t a1, void *a2)
{
  ++*(void *)(a1 + 80);
  if (*(unsigned char *)(a1 + 128) && *(unsigned char *)(a1 + 131))
  {
    *(unsigned char *)(a1 + 132) = 1;
    return;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(unsigned char *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  int v4 = std::istream::peek();
  if (v4 != -1 && !sub_215DFD5D8(a1, v4))
  {
    sub_215DFD700(a1, (uint64_t)&v21);
    sub_215734C64((uint64_t)v14, &v21, 24);
    MEMORY[0x2166C4460](v14, a2);
    if ((v17[*((void *)v14[0] - 3)] & 5) != 0) {
      *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
    }
    v14[0] = *(void **)MEMORY[0x263F8C2B8];
    uint64_t v13 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void **)((char *)v14 + *((void *)v14[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v15 = v13;
    uint64_t v16 = MEMORY[0x263F8C318] + 16;
    if (v19 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2166C4BF0](&v20);
    if (v22 < 0) {
      operator delete((void *)v21);
    }
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    std::string::size_type v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      std::string::size_type v5 = *(const char **)v5;
    }
    int v6 = LOBYTE(v14[0]);
    sub_215BA7658(v5, (uint64_t)v14);
    uint64_t v7 = (char *)HIBYTE(v15);
    if (v15 >= 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (void **)v14[0];
    }
    if (v15 < 0) {
      uint64_t v7 = (char *)v14[1];
    }
    if (v7)
    {
      uint64_t v9 = v7 - 1;
      do
      {
        int v10 = *(unsigned __int8 *)v8;
        uint64_t v8 = (void **)((char *)v8 + 1);
        BOOL v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0) {
        goto LABEL_23;
      }
    }
    else
    {
      BOOL v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(unsigned char *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
LABEL_26:
  ++*(void *)(a1 + 104);
}

void sub_215DFBB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2157351A4((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0) {
    operator delete(*(void **)(v9 - 72));
  }
  _Unwind_Resume(a1);
}

void sub_215DFBB74(uint64_t a1, _WORD *a2)
{
  ++*(void *)(a1 + 80);
  if (*(unsigned char *)(a1 + 128) && *(unsigned char *)(a1 + 131))
  {
    *(unsigned char *)(a1 + 132) = 1;
    return;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(unsigned char *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  int v4 = std::istream::peek();
  if (v4 != -1 && !sub_215DFD5D8(a1, v4))
  {
    sub_215DFD700(a1, (uint64_t)&v26);
    sub_215734C64((uint64_t)v19, &v26, 24);
    double v28 = 0.0;
    uint64_t v13 = (void *)MEMORY[0x2166C43D0](v19, &v28);
    if ((*((unsigned char *)v13 + *(void *)(*v13 - 24) + 32) & 5) == 0)
    {
      _S0 = v28;
      __asm { FCVT            H0, S0 }
      *a2 = LOWORD(_S0);
    }
    if ((v22[*((void *)v19[0] - 3)] & 5) != 0) {
      *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
    }
    v19[0] = *(void **)MEMORY[0x263F8C2B8];
    uint64_t v18 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void **)((char *)v19 + *((void *)v19[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v20 = v18;
    uint64_t v21 = MEMORY[0x263F8C318] + 16;
    if (v24 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2166C4BF0](&v25);
    if (v27 < 0) {
      operator delete((void *)v26);
    }
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v19[0]) = 0;
    std::istream::read();
    std::string::size_type v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      std::string::size_type v5 = *(const char **)v5;
    }
    int v6 = LOBYTE(v19[0]);
    sub_215BA7658(v5, (uint64_t)v19);
    uint64_t v7 = (char *)HIBYTE(v20);
    if (v20 >= 0) {
      uint64_t v8 = v19;
    }
    else {
      uint64_t v8 = (void **)v19[0];
    }
    if (v20 < 0) {
      uint64_t v7 = (char *)v19[1];
    }
    if (v7)
    {
      uint64_t v9 = v7 - 1;
      do
      {
        int v10 = *(unsigned __int8 *)v8;
        uint64_t v8 = (void **)((char *)v8 + 1);
        BOOL v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v20) & 0x80000000) == 0) {
        goto LABEL_23;
      }
    }
    else
    {
      BOOL v11 = 0;
      if ((SHIBYTE(v20) & 0x80000000) == 0)
      {
LABEL_23:
        *(unsigned char *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v19[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
LABEL_26:
  ++*(void *)(a1 + 104);
}

void sub_215DFBE9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2157351A4((uint64_t)va);
  if (*(char *)(v2 - 41) < 0) {
    operator delete(*(void **)(v2 - 64));
  }
  _Unwind_Resume(a1);
}

void sub_215DFBEC8(uint64_t a1, _DWORD *a2)
{
  ++*(void *)(a1 + 80);
  if (*(unsigned char *)(a1 + 128) && *(unsigned char *)(a1 + 131))
  {
    *(unsigned char *)(a1 + 132) = 1;
    return;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(unsigned char *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  int v4 = std::istream::peek();
  if (v4 != -1 && !sub_215DFD5D8(a1, v4))
  {
    sub_215DFD700(a1, (uint64_t)&v21);
    sub_215734C64((uint64_t)v14, &v21, 24);
    MEMORY[0x2166C43E0](v14, a2);
    if ((v17[*((void *)v14[0] - 3)] & 5) != 0) {
      *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
    }
    v14[0] = *(void **)MEMORY[0x263F8C2B8];
    uint64_t v13 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void **)((char *)v14 + *((void *)v14[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v15 = v13;
    uint64_t v16 = MEMORY[0x263F8C318] + 16;
    if (v19 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2166C4BF0](&v20);
    if (v22 < 0) {
      operator delete((void *)v21);
    }
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    std::string::size_type v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      std::string::size_type v5 = *(const char **)v5;
    }
    int v6 = LOBYTE(v14[0]);
    sub_215BA7658(v5, (uint64_t)v14);
    uint64_t v7 = (char *)HIBYTE(v15);
    if (v15 >= 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (void **)v14[0];
    }
    if (v15 < 0) {
      uint64_t v7 = (char *)v14[1];
    }
    if (v7)
    {
      uint64_t v9 = v7 - 1;
      do
      {
        int v10 = *(unsigned __int8 *)v8;
        uint64_t v8 = (void **)((char *)v8 + 1);
        BOOL v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0) {
        goto LABEL_23;
      }
    }
    else
    {
      BOOL v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(unsigned char *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
LABEL_26:
  ++*(void *)(a1 + 104);
}

void sub_215DFC1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2157351A4((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0) {
    operator delete(*(void **)(v9 - 72));
  }
  _Unwind_Resume(a1);
}

void sub_215DFC1E8(uint64_t a1, void *a2)
{
  ++*(void *)(a1 + 80);
  if (*(unsigned char *)(a1 + 128) && *(unsigned char *)(a1 + 131))
  {
    *(unsigned char *)(a1 + 132) = 1;
    return;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(unsigned char *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  int v4 = std::istream::peek();
  if (v4 != -1 && !sub_215DFD5D8(a1, v4))
  {
    sub_215DFD700(a1, (uint64_t)&v21);
    sub_215734C64((uint64_t)v14, &v21, 24);
    MEMORY[0x2166C43D0](v14, a2);
    if ((v17[*((void *)v14[0] - 3)] & 5) != 0) {
      *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
    }
    v14[0] = *(void **)MEMORY[0x263F8C2B8];
    uint64_t v13 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void **)((char *)v14 + *((void *)v14[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v15 = v13;
    uint64_t v16 = MEMORY[0x263F8C318] + 16;
    if (v19 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2166C4BF0](&v20);
    if (v22 < 0) {
      operator delete((void *)v21);
    }
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    std::string::size_type v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      std::string::size_type v5 = *(const char **)v5;
    }
    int v6 = LOBYTE(v14[0]);
    sub_215BA7658(v5, (uint64_t)v14);
    uint64_t v7 = (char *)HIBYTE(v15);
    if (v15 >= 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (void **)v14[0];
    }
    if (v15 < 0) {
      uint64_t v7 = (char *)v14[1];
    }
    if (v7)
    {
      uint64_t v9 = v7 - 1;
      do
      {
        int v10 = *(unsigned __int8 *)v8;
        uint64_t v8 = (void **)((char *)v8 + 1);
        BOOL v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0) {
        goto LABEL_23;
      }
    }
    else
    {
      BOOL v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(unsigned char *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
LABEL_26:
  ++*(void *)(a1 + 104);
}

void sub_215DFC4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2157351A4((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0) {
    operator delete(*(void **)(v9 - 72));
  }
  _Unwind_Resume(a1);
}

void sub_215DFC508(uint64_t a1, unsigned char *a2)
{
  ++*(void *)(a1 + 80);
  if (*(unsigned char *)(a1 + 128) && *(unsigned char *)(a1 + 131))
  {
    *(unsigned char *)(a1 + 132) = 1;
    return;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(unsigned char *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  int v4 = std::istream::peek();
  if (v4 != -1 && !sub_215DFD5D8(a1, v4))
  {
    p_p = &__p;
    sub_215DFD700(a1, (uint64_t)&__p);
    int v14 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type v15 = __p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    memset(&v27, 0, sizeof(v27));
    std::string::reserve(&v27, size);
    if (v14 < 0) {
      p_p = (std::string *)v15;
    }
    for (; size; --size)
    {
      std::string::value_type v17 = __tolower(p_p->__r_.__value_.__s.__data_[0]);
      std::string::push_back(&v27, v17);
      p_p = (std::string *)((char *)p_p + 1);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v18 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v18 = v27.__r_.__value_.__l.__size_;
    }
    if (v18)
    {
      if (v18 == 1)
      {
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v19 = &v27;
        }
        else {
          char v19 = (std::string *)v27.__r_.__value_.__r.__words[0];
        }
        if (v19->__r_.__value_.__s.__data_[0] == 48) {
          goto LABEL_68;
        }
      }
      else if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        char v19 = &v27;
      }
      else
      {
        char v19 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
      memset(&__p, 0, sizeof(__p));
      std::string::reserve(&__p, v18);
      do
      {
        std::string::value_type v20 = __tolower(v19->__r_.__value_.__s.__data_[0]);
        std::string::push_back(&__p, v20);
        char v19 = (std::string *)((char *)v19 + 1);
        --v18;
      }
      while (v18);
      std::string::size_type v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v21 = __p.__r_.__value_.__l.__size_;
      }
      if (v21 == 5)
      {
        char v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v22 = &__p;
        }
        unsigned int v23 = bswap32(v22->__r_.__value_.__l.__data_);
        if (v23 == 1717660787)
        {
          int v24 = v22->__r_.__value_.__s.__data_[4] - 101;
        }
        else if (v23 < 0x66616C73)
        {
          int v24 = -1;
        }
        else
        {
          int v24 = 1;
        }
        BOOL v25 = v24 == 0;
      }
      else
      {
        BOOL v25 = 0;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (!v25)
      {
        *a2 = 1;
        if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_26;
        }
        goto LABEL_71;
      }
    }
LABEL_68:
    *a2 = 0;
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_26;
    }
LABEL_71:
    operator delete(v27.__r_.__value_.__l.__data_);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    v27.__r_.__value_.__s.__data_[0] = 0;
    std::istream::read();
    std::string::size_type v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      std::string::size_type v5 = *(const char **)v5;
    }
    int v6 = v27.__r_.__value_.__s.__data_[0];
    sub_215BA7658(v5, (uint64_t)&v27);
    std::string::size_type v7 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = &v27;
    }
    else {
      uint64_t v8 = (std::string *)v27.__r_.__value_.__r.__words[0];
    }
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v7 = v27.__r_.__value_.__l.__size_;
    }
    if (v7)
    {
      std::string::size_type v9 = v7 - 1;
      do
      {
        int v10 = v8->__r_.__value_.__s.__data_[0];
        uint64_t v8 = (std::string *)((char *)v8 + 1);
        BOOL v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_23;
      }
    }
    else
    {
      BOOL v11 = 0;
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_23:
        *(unsigned char *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v27.__r_.__value_.__l.__data_);
    goto LABEL_23;
  }
LABEL_24:
  *(unsigned char *)(a1 + 13std::__fs::filesystem::__rename(__from, __to, 0) = 1;
LABEL_26:
  ++*(void *)(a1 + 104);
}

void sub_215DFC81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215DFC874(uint64_t a1, uint64_t *a2, uint64_t a3, __int16 a4, __int16 a5, __int16 a6)
{
  *(void *)a1 = &unk_26C6851C8;
  uint64_t v7 = *a2;
  *(void *)a1 = &unk_26C6855D8;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = &unk_26C685728;
  *(void *)(a1 + 24) = a3;
  if ((a4 & 0xFF00) != 0) {
    unsigned __int8 v8 = a4;
  }
  else {
    unsigned __int8 v8 = 44;
  }
  *(unsigned char *)(a1 + 32) = v8;
  if ((a5 & 0xFF00) != 0) {
    unsigned __int8 v9 = a5;
  }
  else {
    unsigned __int8 v9 = 10;
  }
  *(unsigned char *)(a1 + 33) = v9;
  if ((a6 & 0xFF00) != 0) {
    char v10 = a6;
  }
  else {
    char v10 = 124;
  }
  *(unsigned char *)(a1 + 34) = v10;
  *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a1 + 48) = 0;
  char v15 = 1;
  LOWORD(v14) = v8;
  char v13 = 1;
  LOWORD(__p) = v9;
  sub_215DFC9D4((char *)&v14, (char *)&__p, v10);
  if (v13 < 0)
  {
    operator delete(__p);
    if ((v15 & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((v15 & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v14);
  return a1;
}

void sub_215DFC998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *sub_215DFC9D4(char *a1, char *a2, uint64_t a3)
{
  unsigned __int8 v52 = a3;
  if (a1[23] < 0)
  {
    sub_215738B0C(__p, *(void **)a1, *((void *)a1 + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a1;
    uint64_t v51 = *((void *)a1 + 2);
  }
  unint64_t v6 = HIBYTE(v51);
  char v7 = HIBYTE(v51);
  unsigned __int8 v8 = __p[1];
  if (v51 >= 0) {
    unsigned __int8 v9 = __p;
  }
  else {
    unsigned __int8 v9 = (void **)__p[0];
  }
  if (v51 >= 0) {
    char v10 = (char *)HIBYTE(v51);
  }
  else {
    char v10 = (char *)__p[1];
  }
  if (v10)
  {
    do
    {
      sub_215DFE3B4(*(char *)v9, (uint64_t)"separator");
      unsigned __int8 v9 = (void **)((char *)v9 + 1);
      --v10;
    }
    while (v10);
    unint64_t v6 = HIBYTE(v51);
    unsigned __int8 v8 = __p[1];
    char v7 = HIBYTE(v51);
  }
  if (v7 < 0) {
    unint64_t v6 = (unint64_t)v8;
  }
  if (!v6)
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Must at least have one separator.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A320, MEMORY[0x263F8C080]);
  }
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if ((a2[23] & 0x80000000) == 0) {
      goto LABEL_18;
    }
  }
  else if ((a2[23] & 0x80000000) == 0)
  {
LABEL_18:
    *(_OWORD *)std::string __dst = *(_OWORD *)a2;
    uint64_t v49 = *((void *)a2 + 2);
    goto LABEL_21;
  }
  sub_215738B0C(__dst, *(void **)a2, *((void *)a2 + 1));
LABEL_21:
  unint64_t v11 = HIBYTE(v49);
  char v12 = HIBYTE(v49);
  char v13 = __dst[1];
  if (v49 >= 0) {
    int v14 = __dst;
  }
  else {
    int v14 = (void **)__dst[0];
  }
  if (v49 >= 0) {
    char v15 = (char *)HIBYTE(v49);
  }
  else {
    char v15 = (char *)__dst[1];
  }
  if (v15)
  {
    do
    {
      sub_215DFE3B4(*(char *)v14, (uint64_t)"separator");
      int v14 = (void **)((char *)v14 + 1);
      --v15;
    }
    while (v15);
    unint64_t v11 = HIBYTE(v49);
    char v13 = __dst[1];
    char v12 = HIBYTE(v49);
  }
  if (v12 < 0) {
    unint64_t v11 = (unint64_t)v13;
  }
  if (!v11)
  {
    uint64_t v43 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v43, "Must at least have one separator.");
    v43->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v43, (struct type_info *)off_26425A320, MEMORY[0x263F8C080]);
  }
  if (v12 < 0) {
    operator delete(__dst[0]);
  }
  sub_215DFE3B4(a3, (uint64_t)"field end marker");
  size_t v16 = a1[23];
  int __c = a3;
  if (a1[23] < 0)
  {
    std::string::value_type v17 = *(char **)a1;
    uint64_t v18 = *((void *)a1 + 1);
    size_t v19 = a2[23];
    if (!v18) {
      goto LABEL_50;
    }
  }
  else
  {
    std::string::value_type v17 = a1;
    uint64_t v18 = a1[23];
    size_t v19 = a2[23];
    if (!a1[23]) {
      goto LABEL_50;
    }
  }
  if ((v19 & 0x80u) == 0) {
    std::string::value_type v20 = a2;
  }
  else {
    std::string::value_type v20 = *(char **)a2;
  }
  if ((v19 & 0x80u) == 0) {
    size_t v21 = v19;
  }
  else {
    size_t v21 = *((void *)a2 + 1);
  }
  do
  {
    char v22 = *v17;
    unsigned int v23 = (char *)memchr(v20, *v17, v21);
    if (v23) {
      int v24 = v23;
    }
    else {
      int v24 = &v20[v21];
    }
    if (v24 - v20 != v21)
    {
      int64_t v40 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      LOBYTE(v53) = v22;
      sub_215DFEC04((uint64_t)&v47, (unsigned __int8 *)&v53);
      std::logic_error::logic_error(v40, &v47);
      v40->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(v40, (struct type_info *)off_26425A320, MEMORY[0x263F8C080]);
    }
    ++v17;
    --v18;
  }
  while (v18);
LABEL_50:
  if ((v19 & 0x80) == 0)
  {
    BOOL v25 = a2;
    size_t v26 = v19;
    std::string v27 = *(char **)a1;
    int v28 = (char)v16;
    if (v19) {
      goto LABEL_52;
    }
LABEL_65:
    if (v28 >= 0) {
      uint64_t v29 = a1;
    }
    else {
      uint64_t v29 = v27;
    }
    if (v28 >= 0) {
      size_t v30 = v16;
    }
    else {
      size_t v30 = *((void *)a1 + 1);
    }
    goto LABEL_71;
  }
  BOOL v25 = *(char **)a2;
  size_t v26 = *((void *)a2 + 1);
  std::string v27 = *(char **)a1;
  int v28 = (char)v16;
  if (!v26) {
    goto LABEL_65;
  }
LABEL_52:
  if (v28 >= 0) {
    uint64_t v29 = a1;
  }
  else {
    uint64_t v29 = v27;
  }
  if (v28 >= 0) {
    size_t v30 = v16;
  }
  else {
    size_t v30 = *((void *)a1 + 1);
  }
  do
  {
    char v31 = *v25;
    uint64_t v32 = (char *)memchr(v29, *v25, v30);
    if (v32) {
      uint64_t v33 = v32;
    }
    else {
      uint64_t v33 = &v29[v30];
    }
    if (v33 - v29 != v30)
    {
      std::string v41 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      LOBYTE(v53) = v31;
      sub_215DFEC04((uint64_t)&v47, (unsigned __int8 *)&v53);
      std::logic_error::logic_error(v41, &v47);
      v41->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(v41, (struct type_info *)off_26425A320, MEMORY[0x263F8C080]);
    }
    ++v25;
    --v26;
  }
  while (v26);
LABEL_71:
  uint64_t v34 = (char *)memchr(v29, __c, v30);
  if (v34) {
    long long v35 = v34;
  }
  else {
    long long v35 = &v29[v30];
  }
  if (v35 - v29 != v30)
  {
    unint64_t v44 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v53 = "field";
    sub_215DFEDA4((uint64_t)&v47, &v52, (const char *)&v53);
    std::logic_error::logic_error(v44, &v47);
    v44->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v44, (struct type_info *)off_26425A320, MEMORY[0x263F8C080]);
  }
  size_t v36 = *((void *)a2 + 1);
  if ((v19 & 0x80u) == 0)
  {
    size_t v37 = v19;
  }
  else
  {
    a2 = *(char **)a2;
    size_t v37 = v36;
  }
  uint64_t result = (char *)memchr(a2, __c, v37);
  if (result) {
    char v39 = result;
  }
  else {
    char v39 = &a2[v37];
  }
  if (v39 - a2 != v37)
  {
    uint64_t v45 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v53 = "row";
    sub_215DFEDA4((uint64_t)&v47, &v52, (const char *)&v53);
    std::logic_error::logic_error(v45, &v47);
    v45->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v45, (struct type_info *)off_26425A320, MEMORY[0x263F8C080]);
  }
  return result;
}

void sub_215DFCF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v29)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v28);
  _Unwind_Resume(exception_object);
}

void sub_215DFD060()
{
}

void sub_215DFD074()
{
}

void *sub_215DFD08C(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 34);
  if (*(void *)(a1 + 40))
  {
    uint64_t v3 = *(void **)(a1 + 24);
    char v6 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v3, (uint64_t)&v6, 1);
  }
  int v4 = *(void **)(a1 + 24);
  char v7 = v2;
  uint64_t result = sub_215731D94(v4, (uint64_t)&v7, 1);
  ++*(void *)(a1 + 40);
  return result;
}

void *sub_215DFD0F8(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 18);
  if (*(void *)(a1 + 24))
  {
    uint64_t v3 = *(void **)(a1 + 8);
    char v6 = *(unsigned char *)(a1 + 16);
    sub_215731D94(v3, (uint64_t)&v6, 1);
  }
  int v4 = *(void **)(a1 + 8);
  char v7 = v2;
  uint64_t result = sub_215731D94(v4, (uint64_t)&v7, 1);
  ++*(void *)(a1 + 24);
  return result;
}

uint64_t sub_215DFD164(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4, long long *a5, __int16 a6, char a7)
{
  *(void *)a1 = &unk_26C6851C8;
  uint64_t v11 = *a2;
  *(void *)a1 = &unk_26C685758;
  *(void *)(a1 + 8) = v11;
  *(void *)(a1 + 16) = a3;
  uint64_t v12 = a1 + 24;
  if (*((unsigned char *)a4 + 24))
  {
    if ((*((char *)a4 + 23) & 0x80000000) == 0)
    {
      long long v13 = *a4;
      *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = *((void *)a4 + 2);
      *(_OWORD *)uint64_t v12 = v13;
      uint64_t v14 = a1 + 48;
      if (!*((unsigned char *)a5 + 24)) {
        goto LABEL_9;
      }
LABEL_6:
      if (*((char *)a5 + 23) < 0)
      {
        sub_215738B0C((unsigned char *)v14, *(void **)a5, *((void *)a5 + 1));
      }
      else
      {
        long long v15 = *a5;
        *(void *)(v14 + 16) = *((void *)a5 + 2);
        *(_OWORD *)uint64_t v14 = v15;
      }
      goto LABEL_11;
    }
    sub_215738B0C((unsigned char *)(a1 + 24), *(void **)a4, *((void *)a4 + 1));
    uint64_t v14 = a1 + 48;
    if (*((unsigned char *)a5 + 24)) {
      goto LABEL_6;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 47) = 2;
    strcpy((char *)(a1 + 24), ",;");
    uint64_t v14 = a1 + 48;
    if (*((unsigned char *)a5 + 24)) {
      goto LABEL_6;
    }
  }
LABEL_9:
  *(unsigned char *)(a1 + 71) = 1;
  *(_WORD *)(a1 + 48) = 10;
LABEL_11:
  if ((a6 & 0xFF00) != 0) {
    char v16 = a6;
  }
  else {
    char v16 = 124;
  }
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 72) = v16;
  *(unsigned char *)(a1 + 73) = a7;
  *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 12std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 131) = 0;
  if (*(char *)(a1 + 47) < 0)
  {
    sub_215738B0C(__dst, *(void **)(a1 + 24), *(void *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)v12;
    uint64_t v21 = *(void *)(v12 + 16);
  }
  if (*(char *)(a1 + 71) < 0)
  {
    sub_215738B0C(__p, *(void **)(a1 + 48), *(void *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v14;
    uint64_t v19 = *(void *)(v14 + 16);
  }
  sub_215DFC9D4((char *)__dst, (char *)__p, *(char *)(a1 + 72));
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      return a1;
    }
LABEL_24:
    operator delete(__dst[0]);
    return a1;
  }
  if (SHIBYTE(v21) < 0) {
    goto LABEL_24;
  }
  return a1;
}

void sub_215DFD360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((*(char *)(v21 + 47) & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*v22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_215DFD414(uint64_t a1)
{
  *(void *)a1 = &unk_26C685758;
  if ((*(char *)(a1 + 159) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 71) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
    return a1;
  }
LABEL_7:
  operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_215DFD4A4(uint64_t a1)
{
  *(void *)a1 = &unk_26C685758;
  if ((*(char *)(a1 + 159) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 71) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
    return a1;
  }
LABEL_7:
  operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_215DFD534(uint64_t a1)
{
  *(void *)a1 = &unk_26C685758;
  if (*(char *)(a1 + 159) < 0)
  {
    operator delete(*(void **)(a1 + 136));
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      operator delete(*(void **)(a1 + 24));
LABEL_4:
      JUMPOUT(0x2166C4D20);
    }
  }
  else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 48));
  if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
    goto LABEL_4;
  }
  goto LABEL_9;
}

uint64_t sub_215DFD5D8(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3 = (const char *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    uint64_t v3 = *(const char **)v3;
  }
  int v4 = a2;
  sub_215BA7658(v3, (uint64_t)&v19);
  uint64_t v5 = v21;
  if ((v21 & 0x80u) == 0) {
    char v6 = (void **)&v19;
  }
  else {
    char v6 = v19;
  }
  if ((v21 & 0x80u) != 0) {
    uint64_t v5 = v20;
  }
  if (!v5)
  {
    BOOL v9 = 0;
    if (((char)v21 & 0x80000000) == 0) {
      goto LABEL_16;
    }
LABEL_20:
    operator delete(v19);
    if (v9) {
      return 1;
    }
    goto LABEL_21;
  }
  uint64_t v7 = v5 - 1;
  do
  {
    int v8 = *(unsigned __int8 *)v6;
    char v6 = (void **)((char *)v6 + 1);
    BOOL v9 = v8 == v4;
  }
  while (v8 != v4 && v7-- != 0);
  if ((char)v21 < 0) {
    goto LABEL_20;
  }
LABEL_16:
  if (v9) {
    return 1;
  }
LABEL_21:
  long long v13 = (const char *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    long long v13 = *(const char **)v13;
  }
  sub_215BA7658(v13, (uint64_t)&v19);
  uint64_t v14 = v21;
  if ((v21 & 0x80u) == 0) {
    long long v15 = (void **)&v19;
  }
  else {
    long long v15 = v19;
  }
  if ((v21 & 0x80u) != 0) {
    uint64_t v14 = v20;
  }
  if (v14)
  {
    uint64_t v16 = v14 - 1;
    do
    {
      int v17 = *(unsigned __int8 *)v15;
      long long v15 = (void **)((char *)v15 + 1);
      BOOL v11 = v17 == v4;
    }
    while (v17 != v4 && v16-- != 0);
    if (((char)v21 & 0x80000000) == 0) {
      return v11;
    }
  }
  else
  {
    BOOL v11 = 0;
    if (((char)v21 & 0x80000000) == 0) {
      return v11;
    }
  }
  operator delete(v19);
  return v11;
}

void sub_215DFD700(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = (std::string *)(a1 + 136);
  std::string::reserve((std::string *)(a1 + 136), 0x20uLL);
  if (*(char *)(a1 + 159) < 0)
  {
    uint64_t v5 = *(std::string **)(a1 + 136);
    *(void *)(a1 + 144) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 159) = 0;
    uint64_t v5 = v4;
  }
  v5->__r_.__value_.__s.__data_[0] = 0;
  LOBYTE(v13[0]) = 0;
  std::istream::read();
  if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) == 0)
  {
    while (!sub_215DFD5D8(a1, 0))
    {
      std::string::push_back(v4, 0);
      LOBYTE(v13[0]) = 0;
      std::istream::read();
      if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0) {
        goto LABEL_9;
      }
    }
    char v6 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      char v6 = *(const char **)v6;
    }
    sub_215BA7658(v6, (uint64_t)v13);
    unint64_t v7 = v14;
    if ((v14 & 0x80u) == 0) {
      int v8 = v13;
    }
    else {
      int v8 = (void **)v13[0];
    }
    if ((v14 & 0x80u) != 0) {
      unint64_t v7 = (unint64_t)v13[1];
    }
    if (v7)
    {
      BOOL v9 = (char *)(v7 - 1);
      do
      {
        int v10 = *(unsigned __int8 *)v8;
        int v8 = (void **)((char *)v8 + 1);
        BOOL v11 = v10 == 0;
        if (v10) {
          BOOL v12 = v9 == 0;
        }
        else {
          BOOL v12 = 1;
        }
        --v9;
      }
      while (!v12);
      if (((char)v14 & 0x80000000) == 0)
      {
LABEL_26:
        *(unsigned char *)(a1 + 131) = v11;
        if (*(char *)(a1 + 159) < 0) {
          goto LABEL_27;
        }
LABEL_10:
        *(_OWORD *)a2 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
        *(void *)(a2 + 16) = *((void *)&v4->__r_.__value_.__l + 2);
        return;
      }
    }
    else
    {
      BOOL v11 = 0;
      if (((char)v14 & 0x80000000) == 0) {
        goto LABEL_26;
      }
    }
    operator delete(v13[0]);
    *(unsigned char *)(a1 + 131) = v11;
    if (*(char *)(a1 + 159) < 0) {
      goto LABEL_27;
    }
    goto LABEL_10;
  }
LABEL_9:
  if ((*(char *)(a1 + 159) & 0x80000000) == 0) {
    goto LABEL_10;
  }
LABEL_27:
  sub_215738B0C((unsigned char *)a2, *(void **)(a1 + 136), *(void *)(a1 + 144));
}

void sub_215DFD91C(uint64_t a1, uint64_t a2)
{
  ++*(void *)(a1 + 80);
  if (*(unsigned char *)(a1 + 128) && *(unsigned char *)(a1 + 131))
  {
    *(unsigned char *)(a1 + 132) = 1;
    return;
  }
  sub_215DFD700(a1, (uint64_t)&__src);
  if ((char)v9 < 0)
  {
    size_t v4 = v8;
    if (v8 == *(void *)a2)
    {
      p_src = __src;
      if (!v8 || __src)
      {
        if (!v8)
        {
LABEL_15:
          operator delete(__src);
          goto LABEL_16;
        }
      }
      else
      {
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          abort();
        }
        p_src = 0;
      }
      goto LABEL_14;
    }
LABEL_17:
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "loaded binary data size does not match given data blob size");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  size_t v4 = v9;
  if (*(void *)a2 != v9) {
    goto LABEL_17;
  }
  if (!v9) {
    goto LABEL_16;
  }
  p_src = &__src;
LABEL_14:
  memmove(*(void **)(a2 + 8), p_src, v4);
  if ((char)v9 < 0) {
    goto LABEL_15;
  }
LABEL_16:
  ++*(void *)(a1 + 104);
}

void sub_215DFDA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_215DFDAB8(uint64_t a1)
{
  if (!*(void *)(a1 + 80))
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    uint64_t v3 = (const char **)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
    {
      sub_215BA7658(*v3, (uint64_t)v14);
      if ((v15 & 0x80000000) == 0) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_215BA7658((const char *)v3, (uint64_t)v14);
      if ((v15 & 0x80000000) == 0)
      {
LABEL_13:
        *(unsigned char *)(a1 + 131) = 1;
        *(unsigned char *)(a1 + 128) = 0;
        goto LABEL_14;
      }
    }
    operator delete(v14[0]);
    goto LABEL_13;
  }
  int v2 = *(unsigned __int8 *)(a1 + 131);
  *(unsigned char *)(a1 + 128) = 0;
  if (v2
    || (*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0
    && !*(unsigned char *)(a1 + 129))
  {
LABEL_14:
    int v4 = *(unsigned __int8 *)(a1 + 130);
    char v5 = 1;
    int v6 = 0;
    if (*(unsigned char *)(a1 + 130))
    {
      int v4 = 1;
      char v7 = 1;
      uint64_t v8 = *(void *)(a1 + 80);
      BOOL v9 = 1;
      if (!*(unsigned char *)(a1 + 96)) {
        goto LABEL_28;
      }
    }
    else
    {
      *(void *)(a1 + 112) = *(void *)(a1 + 104);
      *(unsigned char *)(a1 + 12std::__fs::filesystem::__rename(__from, __to, 0) = 1;
      char v7 = 1;
      char v5 = 0;
      uint64_t v8 = *(void *)(a1 + 80);
      BOOL v9 = 1;
      if (!*(unsigned char *)(a1 + 96)) {
        goto LABEL_28;
      }
    }
LABEL_18:
    BOOL v10 = *(void *)(a1 + 88) == v8;
    *(void *)(a1 + 88) = v8;
    *(unsigned char *)(a1 + 96) = 1;
    if (!*(unsigned char *)(a1 + 120)) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  do
  {
    if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0) {
      break;
    }
    sub_215DFD700(a1, (uint64_t)&__p);
    if (v13 < 0) {
      operator delete(__p);
    }
  }
  while (!*(unsigned char *)(a1 + 131));
  char v7 = 0;
  int v4 = *(unsigned char *)(a1 + 130) != 0;
  char v5 = 1;
  int v6 = 1;
  uint64_t v8 = *(void *)(a1 + 80);
  BOOL v9 = 1;
  if (*(unsigned char *)(a1 + 96)) {
    goto LABEL_18;
  }
LABEL_28:
  BOOL v10 = 1;
  *(void *)(a1 + 88) = v8;
  *(unsigned char *)(a1 + 96) = 1;
  if (*(unsigned char *)(a1 + 120)) {
LABEL_19:
  }
    BOOL v9 = *(void *)(a1 + 112) == v8;
LABEL_20:
  *(unsigned char *)(a1 + 133) = v7;
  *(unsigned char *)(a1 + 134) = v10;
  if (*(unsigned char *)(a1 + 73))
  {
    if ((v6 | (!v10 || !v9) | v4)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  return !*(unsigned char *)(a1 + 129) && *(unsigned char *)(a1 + 132) == 0;
}

void sub_215DFDCFC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  sub_215E10780(a1, &v5);
  v15[0] = "Exception while parsing row: ";
  v15[1] = 29;
  std::string::size_type size = HIBYTE(v5.__r_.__value_.__r.__words[2]);
  if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v4 = &v5;
  }
  else {
    int v4 = (std::string *)v5.__r_.__value_.__r.__words[0];
  }
  if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v5.__r_.__value_.__l.__size_;
  }
  v15[2] = v4;
  v15[3] = size;
  sub_2157430CC((uint64_t)v15, (uint64_t)&v16, 0, 0, &v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    sub_215738B0C(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  char v8 = 1;
  LOBYTE(v9) = 0;
  char v13 = 0;
  char v14 = 1;
  sub_2157CFBCC(5u, (long long *)&__p, a2);
  if (v14)
  {
    if (!v13) {
      goto LABEL_13;
    }
    if (v12 < 0)
    {
      operator delete(v11);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_13:
        if (!v8) {
          goto LABEL_16;
        }
LABEL_14:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_16;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v9);
    if (!v8) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
LABEL_16:
  if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_20:
    operator delete(v5.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_20;
  }
}

void sub_215DFDE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DFDEE0(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  unint64_t v34 = 0;
  if (a1[129])
  {
    *((unsigned char *)&v35.__r_.__value_.__s + 23) = 9;
    strcpy((char *)&v35, "early eof");
    uint64_t v3 = sub_21573AD18((void **)&v32, (uint64_t)&v35);
    goto LABEL_3;
  }
  if (a1[130]
    && (*((unsigned char *)&v35.__r_.__value_.__s + 23) = 16,
        strcpy((char *)&v35, "invalid field(s)"),
        uint64_t v33 = sub_21573AD18((void **)&v32, (uint64_t)&v35),
        SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(v35.__r_.__value_.__l.__data_);
    if (!a1[133])
    {
LABEL_8:
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
      *(_OWORD *)&v35.__r_.__value_.__r.__words[1] = xmmword_215ECEB00;
      strcpy(v35.__r_.__value_.__l.__data_, "did not reach end of row");
      std::string v5 = v33;
      if ((unint64_t)v33 >= v34)
      {
        uint64_t v33 = sub_21573AD18((void **)&v32, (uint64_t)&v35);
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v35.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v6 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
        *((void *)v33 + 2) = *((void *)&v35.__r_.__value_.__l + 2);
        *(_OWORD *)std::string v5 = v6;
        uint64_t v33 = v5 + 24;
      }
    }
  }
  else if (!a1[133])
  {
    goto LABEL_8;
  }
  if (a1[134]) {
    goto LABEL_17;
  }
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v35.__r_.__value_.__r.__words[1] = xmmword_215EAF320;
  strcpy(v35.__r_.__value_.__l.__data_, "inconsistent field count in row");
  char v7 = v33;
  if ((unint64_t)v33 < v34)
  {
    long long v8 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
    *((void *)v33 + 2) = *((void *)&v35.__r_.__value_.__l + 2);
    *(_OWORD *)char v7 = v8;
    uint64_t v33 = v7 + 24;
    goto LABEL_17;
  }
  uint64_t v3 = sub_21573AD18((void **)&v32, (uint64_t)&v35);
LABEL_3:
  uint64_t v33 = v3;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
LABEL_17:
  int v36 = 0;
  sub_21594B828(&v35, "Failure while parsing row: ");
  if (v36 == -1) {
    sub_215742D4C();
  }
  uint64_t v38 = &v37;
  ((void (*)(std::string *__return_ptr, char **, std::string *))off_26C685960[v36])(&v20, &v38, &v35);
  if (v36 != -1) {
    ((void (*)(char **, std::string *))off_26C685900[v36])(&v38, &v35);
  }
  sub_215742E98(v32, (uint64_t)v33, "; ", 2uLL, &v35, v9, v10);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v11 = &v35;
  }
  else {
    BOOL v11 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v35.__r_.__value_.__l.__size_;
  }
  char v13 = std::string::append(&v20, (const std::string::value_type *)v11, size);
  char v15 = (void *)v13->__r_.__value_.__r.__words[0];
  unint64_t v14 = v13->__r_.__value_.__l.__size_;
  v21[0] = v13->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v21 + 3) = *(_DWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + 3);
  int v16 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (v16 < 0)
  {
    sub_215738B0C(&__p, v15, v14);
  }
  else
  {
    *(void *)&long long __p = v15;
    *((void *)&__p + 1) = v14;
    *(_DWORD *)unsigned int v23 = v21[0];
    *(_DWORD *)&v23[3] = *(_DWORD *)((char *)v21 + 3);
    char v24 = v16;
  }
  char v25 = 1;
  LOBYTE(v26) = 0;
  char v30 = 0;
  char v31 = 1;
  sub_2157CFBCC(5u, &__p, a2);
  if (v31)
  {
    if (!v30) {
      goto LABEL_33;
    }
    if (v29 < 0)
    {
      operator delete(v28);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_33:
        if (!v25) {
          goto LABEL_36;
        }
LABEL_34:
        if (v24 < 0) {
          operator delete((void *)__p);
        }
        goto LABEL_36;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_33;
    }
    operator delete(v26);
    if (!v25) {
      goto LABEL_36;
    }
    goto LABEL_34;
  }
LABEL_36:
  if (v16 < 0)
  {
    operator delete(v15);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_38:
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_39;
      }
LABEL_43:
      operator delete(v20.__r_.__value_.__l.__data_);
      int v17 = (char *)v32;
      if (!v32) {
        return;
      }
      goto LABEL_44;
    }
  }
  else if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_38;
  }
  operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_43;
  }
LABEL_39:
  int v17 = (char *)v32;
  if (!v32) {
    return;
  }
LABEL_44:
  uint64_t v18 = v33;
  uint64_t v19 = v17;
  if (v33 != v17)
  {
    do
    {
      if (*(v18 - 1) < 0) {
        operator delete(*((void **)v18 - 3));
      }
      v18 -= 24;
    }
    while (v18 != v17);
    uint64_t v19 = (void *)v32;
  }
  uint64_t v33 = v17;
  operator delete(v19);
}

void sub_215DFE2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (*(char *)(v16 - 57) < 0)
  {
    operator delete(*(void **)(v16 - 80));
    sub_2157352DC((void **)(v16 - 104));
    _Unwind_Resume(a1);
  }
  sub_2157352DC((void **)(v16 - 104));
  _Unwind_Resume(a1);
}

uint64_t sub_215DFE3B4(uint64_t result, uint64_t a2)
{
  uint64_t v4 = a2;
  if (result == 34)
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_215DFE490((uint64_t)&v3, (const char *)&v4);
    std::logic_error::logic_error(exception, &v3);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A320, MEMORY[0x263F8C080]);
  }
  return result;
}

void sub_215DFE458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_215DFE490(uint64_t a1, const char *a2)
{
  int v5 = 0;
  sub_2157EC664(v4, "Invalid .csv ");
  if (*(void *)a2)
  {
    long long v6 = (void **)v4;
    char v7 = a2;
    long long v8 = v4;
    int64x2_t v9 = a2;
    int8x16_t v10 = a2;
    if (v5 != -1)
    {
      BOOL v11 = &v6;
      ((void (*)(void **, _DWORD *))off_26C685930[v5])(&v11, v4);
      goto LABEL_6;
    }
LABEL_11:
    sub_215742D4C();
  }
  long long v6 = (void **)v4;
  char v7 = "nullptr";
  long long v8 = v4;
  int64x2_t v9 = "nullptr";
  int8x16_t v10 = "nullptr";
  if (v5 == -1) {
    goto LABEL_11;
  }
  BOOL v11 = &v6;
  ((void (*)(void **, _DWORD *))off_26C685918[v5])(&v11, v4);
LABEL_6:
  long long v6 = (void **)v4;
  char v7 = "'\"'";
  long long v8 = v4;
  int64x2_t v9 = "'\"'";
  int8x16_t v10 = "'\"'";
  if (v5 == -1) {
    sub_215742D4C();
  }
  BOOL v11 = &v6;
  ((void (*)(void **, _DWORD *))off_26C685948[v5])(&v11, v4);
  if (v5 == -1) {
    sub_215742D4C();
  }
  long long v6 = &v11;
  uint64_t result = ((uint64_t (*)(void ***, _DWORD *))off_26C685960[v5])(&v6, v4);
  if (v5 != -1) {
    return ((uint64_t (*)(void ***, _DWORD *))off_26C685900[v5])(&v6, v4);
  }
  return result;
}

void sub_215DFE610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215DFE624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215DFE638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215DFE64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

size_t sub_215DFE660(void **a1)
{
  int v1 = (_DWORD *)**a1;
  int v2 = (const char *)(*a1)[1];
  uint64_t v3 = v1[6];
  if (v3 != -1) {
    ((void (*)(char *, _DWORD *))off_26C685900[v3])(&v9, v1);
  }
  v1[6] = -1;
  size_t result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v7 = result | 7;
    }
    uint64_t v8 = v7 + 1;
    long long v6 = operator new(v7 + 1);
    *((void *)v1 + 1) = v5;
    *((void *)v1 + 2) = v8 | 0x8000000000000000;
    *(void *)int v1 = v6;
  }
  else
  {
    *((unsigned char *)v1 + 23) = result;
    long long v6 = v1;
    if (!result) {
      goto LABEL_11;
    }
  }
  size_t result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((unsigned char *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_215DFE750(uint64_t *a1, uint64_t a2)
{
  v19[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  *(void *)((char *)v19 + 7) = *(void *)(a2 + 15);
  uint64_t v4 = *(void **)a2;
  v19[0] = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 23);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unint64_t v14 = v4;
  *(void *)int v15 = v19[0];
  *(void *)&v15[7] = *(void *)((char *)v19 + 7);
  char v16 = v5;
  memset(v19, 0, 15);
  long long v6 = __p;
  uint64_t v7 = *(const char **)(v2 + 24);
  size_t v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  char v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    long long v6 = operator new(v11 + 1);
    __p[1] = v9;
    unint64_t v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((unsigned char *)v9 + (void)v6) = 0;
    uint64_t v10 = *(unsigned int *)(v3 + 24);
    if (v10 == -1) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8) {
    goto LABEL_9;
  }
  LOBYTE(__p[0]) = 0;
  uint64_t v10 = *(unsigned int *)(v3 + 24);
  if (v10 != -1) {
LABEL_10:
  }
    ((void (*)(char *, uint64_t))off_26C685900[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_21573A150((void *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0) {
    goto LABEL_15;
  }
}

void sub_215DFE90C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DFE950(uint64_t a1, void **a2)
{
  uint64_t v3 = *(const void **)(*(void *)a1 + 32);
  char v5 = a2[1];
  uint64_t v4 = a2[2];
  if (v5 < (void *)v4)
  {
    size_t v6 = strlen(*(const char **)(*(void *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7) {
      sub_215731CD8();
    }
    size_t v7 = v6;
    if (v6 >= 0x17)
    {
      uint64_t v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17) {
        uint64_t v14 = v6 | 7;
      }
      uint64_t v15 = v14 + 1;
      size_t v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *char v5 = v8;
    }
    else
    {
      *((unsigned char *)v5 + 23) = v6;
      size_t v8 = v5;
      if (!v6) {
        goto LABEL_19;
      }
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((unsigned char *)v8 + v7) = 0;
    char v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (unsigned char *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_215738AC0();
  }
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a2) >> 3);
  uint64_t v11 = 2 * v10;
  if (2 * v10 <= v9 + 1) {
    uint64_t v11 = v9 + 1;
  }
  if (v10 >= 0x555555555555555) {
    unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v12 = v11;
  }
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
      sub_215738AD8();
    }
    char v13 = (char *)operator new(24 * v12);
  }
  else
  {
    char v13 = 0;
  }
  int v17 = &v13[24 * v9];
  size_t v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7) {
    sub_215731CD8();
  }
  size_t v19 = v18;
  if (v18 >= 0x17)
  {
    uint64_t v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v24 = v18 | 7;
    }
    uint64_t v25 = v24 + 1;
    std::string v20 = operator new(v24 + 1);
    *((void *)v17 + 1) = v19;
    *((void *)v17 + 2) = v25 | 0x8000000000000000;
    *(void *)int v17 = v20;
  }
  else
  {
    v17[23] = v18;
    std::string v20 = v17;
    if (!v18)
    {
      unsigned __int8 v21 = &v13[24 * v12];
      char *v17 = 0;
      char v16 = v17 + 24;
      char v22 = (void **)*a2;
      unsigned int v23 = (void **)a2[1];
      if (v23 == *a2) {
        goto LABEL_36;
      }
      do
      {
LABEL_30:
        long long v26 = *(_OWORD *)(v23 - 3);
        *((void *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      unsigned int v23 = (void **)*a2;
      char v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0) {
          operator delete(*(v27 - 3));
        }
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  unsigned __int8 v21 = &v13[24 * v12];
  *((unsigned char *)v20 + v19) = 0;
  char v16 = v17 + 24;
  char v22 = (void **)*a2;
  unsigned int v23 = (void **)a2[1];
  if (v23 != *a2) {
    goto LABEL_30;
  }
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23) {
    operator delete(v23);
  }
LABEL_39:
  a2[1] = v16;
}

void sub_215DFEBE4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_215DFEBFC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_215DFEC04(uint64_t a1, unsigned __int8 *a2)
{
  int v6 = 0;
  sub_21594B828(v5, "Cannot use same separator '");
  unsigned __int8 v3 = *a2;
  char v8 = 1;
  LOWORD(__p[0]) = v3;
  unint64_t v10 = (void **)v5;
  uint64_t v11 = __p;
  unint64_t v12 = v5;
  char v13 = __p;
  uint64_t v14 = __p;
  if (v6 == -1) {
    sub_215742D4C();
  }
  unint64_t v9 = &v10;
  ((void (*)(void ****, _DWORD *))off_26C685990[v6])(&v9, v5);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v10 = (void **)v5;
  uint64_t v11 = (void **)"' for fields and rows";
  unint64_t v12 = v5;
  char v13 = (void **)"' for fields and rows";
  uint64_t v14 = (void **)"' for fields and rows";
  if (v6 == -1) {
    sub_215742D4C();
  }
  __p[0] = &v10;
  ((void (*)(void **, _DWORD *))off_26C6859A8[v6])(__p, v5);
  if (v6 == -1) {
    sub_215742D4C();
  }
  unint64_t v10 = __p;
  uint64_t result = ((uint64_t (*)(void ***, _DWORD *))off_26C685960[v6])(&v10, v5);
  if (v6 != -1) {
    return ((uint64_t (*)(void ***, _DWORD *))off_26C685900[v6])(&v10, v5);
  }
  return result;
}

void sub_215DFED64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DFED80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_215742CF0((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x215DFED70);
}

uint64_t sub_215DFEDA4(uint64_t a1, unsigned __int8 *a2, const char *a3)
{
  int v8 = 0;
  sub_2158353B0(v7, "Cannot use field end marker '");
  unsigned __int8 v5 = *a2;
  char v10 = 1;
  LOWORD(__p[0]) = v5;
  unint64_t v12 = (void **)v7;
  char v13 = (const char *)__p;
  uint64_t v14 = v7;
  uint64_t v15 = (const char *)__p;
  char v16 = (const char *)__p;
  if (v8 == -1) {
    sub_215742D4C();
  }
  uint64_t v11 = &v12;
  ((void (*)(void ****, _DWORD *))off_26C685990[v8])(&v11, v7);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v12 = (void **)v7;
  char v13 = "' since it is also used as ";
  uint64_t v14 = v7;
  uint64_t v15 = "' since it is also used as ";
  char v16 = "' since it is also used as ";
  if (v8 == -1) {
    sub_215742D4C();
  }
  __p[0] = &v12;
  ((void (*)(void **, _DWORD *))off_26C685978[v8])(__p, v7);
  if (*(void *)a3)
  {
    unint64_t v12 = (void **)v7;
    char v13 = a3;
    uint64_t v14 = v7;
    uint64_t v15 = a3;
    char v16 = a3;
    if (v8 != -1)
    {
      __p[0] = &v12;
      ((void (*)(void **, _DWORD *))off_26C685930[v8])(__p, v7);
      goto LABEL_10;
    }
LABEL_17:
    sub_215742D4C();
  }
  unint64_t v12 = (void **)v7;
  char v13 = "nullptr";
  uint64_t v14 = v7;
  uint64_t v15 = "nullptr";
  char v16 = "nullptr";
  if (v8 == -1) {
    goto LABEL_17;
  }
  __p[0] = &v12;
  ((void (*)(void **, _DWORD *))off_26C685918[v8])(__p, v7);
LABEL_10:
  unint64_t v12 = (void **)v7;
  char v13 = " separator";
  uint64_t v14 = v7;
  uint64_t v15 = " separator";
  char v16 = " separator";
  if (v8 == -1) {
    sub_215742D4C();
  }
  __p[0] = &v12;
  ((void (*)(void **, _DWORD *))off_26C6859C0[v8])(__p, v7);
  if (v8 == -1) {
    sub_215742D4C();
  }
  unint64_t v12 = __p;
  uint64_t result = ((uint64_t (*)(void ***, _DWORD *))off_26C685960[v8])(&v12, v7);
  if (v8 != -1) {
    return ((uint64_t (*)(void ***, _DWORD *))off_26C685900[v8])(&v12, v7);
  }
  return result;
}

void sub_215DFEFE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215DFF00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_215742CF0((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x215DFEFFCLL);
}

unsigned char *sub_215DFF030(uint64_t a1, _WORD *a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v4 = (uint64_t *)(a1 + 16);
    return sub_215E058EC(&v4, (unsigned __int16)*a2);
  }
  else
  {
    unsigned int v3 = (unsigned __int16)*a2;
    if (v3 > 0x7F)
    {
      if (v3 > 0xFF)
      {
        char v5 = -51;
        __int16 v6 = __rev16(v3);
      }
      else
      {
        char v7 = -52;
        char v8 = v3;
      }
      return (unsigned char *)std::ostream::write();
    }
    else
    {
      char v9 = *a2;
      return (unsigned char *)std::ostream::write();
    }
  }
}

uint64_t sub_215DFF0F0(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *(void *)(result + 24);
  if (*(unsigned char *)(v2 + 40))
  {
    char v9 = (uint64_t *)(v2 + 16);
    uint64_t v3 = *a2;
    if (*a2)
    {
      uint64_t v4 = (char *)a2[1];
      do
      {
        char v5 = *v4++;
        uint64_t result = (uint64_t)sub_215E053CC(&v9, v5);
        --v3;
      }
      while (v3);
    }
  }
  else
  {
    uint64_t v6 = *a2;
    if (*a2)
    {
      char v7 = (char *)a2[1];
      do
      {
        while (1)
        {
          int v8 = *v7;
          if ((v8 & 0x80000000) == 0) {
            break;
          }
          char v10 = -52;
          char v11 = v8;
          uint64_t result = std::ostream::write();
          ++v7;
          if (!--v6) {
            return result;
          }
        }
        char v12 = *v7;
        uint64_t result = std::ostream::write();
        ++v7;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t sub_215DFF1B4(uint64_t result, void *a2)
{
  if (*(unsigned char *)(result + 40))
  {
    int v8 = (uint64_t *)(result + 16);
    if (*a2)
    {
      uint64_t v2 = (unsigned __int16 *)a2[1];
      uint64_t v3 = 2 * *a2;
      do
      {
        unsigned int v4 = *v2++;
        uint64_t result = (uint64_t)sub_215E058EC(&v8, v4);
        v3 -= 2;
      }
      while (v3);
    }
  }
  else if (*a2)
  {
    char v5 = (_WORD *)a2[1];
    uint64_t v6 = 2 * *a2;
    do
    {
      unsigned int v7 = (unsigned __int16)*v5;
      if (v7 <= 0x7F)
      {
        char v13 = *v5;
      }
      else if (v7 > 0xFF)
      {
        char v9 = -51;
        __int16 v10 = __rev16(v7);
      }
      else
      {
        char v11 = -52;
        char v12 = v7;
      }
      uint64_t result = std::ostream::write();
      ++v5;
      v6 -= 2;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_215DFF2A8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 24);
  if (*(unsigned char *)(v2 + 40))
  {
    int v8 = (uint64_t *)(v2 + 16);
    if (*a2)
    {
      uint64_t v3 = (unsigned int *)a2[1];
      uint64_t v4 = 4 * *a2;
      do
      {
        uint64_t result = (uint64_t)sub_215E06DFC((uint64_t)v9, &v8, v3++);
        v4 -= 4;
      }
      while (v4);
    }
  }
  else if (*a2)
  {
    char v5 = (unsigned int *)a2[1];
    uint64_t v6 = 4 * *a2;
    do
    {
      unsigned int v7 = *v5++;
      v9[1] = -54;
      unsigned int v10 = bswap32(v7);
      uint64_t result = std::ostream::write();
      v6 -= 4;
    }
    while (v6);
  }
  return result;
}

void sub_215DFF354(uint64_t a1, unsigned char *a2)
{
  sub_215E01B28(a1, (uint64_t)&v9);
  long long v12 = v9;
  uint64_t v13 = v10;
  *a2 = sub_215E07674((uint64_t)&v12);
  uint64_t v3 = v11;
  char v11 = 0;
  if (v3)
  {
    for (uint64_t i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      uint64_t v6 = (void (*)(uint64_t))*((void *)i - 2);
      uint64_t v5 = *((void *)i - 1);
      v6(v5);
    }
    free(i);
    unsigned int v7 = (void *)v3[3];
    if (v7)
    {
      do
      {
        int v8 = (void *)*v7;
        free(v7);
        unsigned int v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_215DFF3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215DFF408(uint64_t a1, unsigned char *a2)
{
  sub_215E01B28(a1, (uint64_t)&v9);
  long long v12 = v9;
  uint64_t v13 = v10;
  *a2 = sub_215E07674((uint64_t)&v12);
  uint64_t v3 = v11;
  char v11 = 0;
  if (v3)
  {
    for (uint64_t i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      uint64_t v6 = (void (*)(uint64_t))*((void *)i - 2);
      uint64_t v5 = *((void *)i - 1);
      v6(v5);
    }
    free(i);
    unsigned int v7 = (void *)v3[3];
    if (v7)
    {
      do
      {
        int v8 = (void *)*v7;
        free(v7);
        unsigned int v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_215DFF4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215DFF4BC(uint64_t a1, unsigned char *a2)
{
  sub_215E01B28(a1, (uint64_t)&v11);
  if (v11 != 2 || v12 >= 0x100)
  {
    exceptiounint64_t n = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&unk_26C685DC0;
    __cxa_throw(v10, (struct type_info *)&unk_26C6859D8, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v12;
  uint64_t v3 = v13;
  uint64_t v13 = 0;
  if (v3)
  {
    for (uint64_t i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      uint64_t v6 = (void (*)(uint64_t))*((void *)i - 2);
      uint64_t v5 = *((void *)i - 1);
      v6(v5);
    }
    free(i);
    unsigned int v7 = (void *)v3[3];
    if (v7)
    {
      do
      {
        int v8 = (void *)*v7;
        free(v7);
        unsigned int v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_215DFF5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215DFF5BC(uint64_t a1, _WORD *a2)
{
  sub_215E01B28(a1, (uint64_t)&v9);
  long long v12 = v9;
  uint64_t v13 = v10;
  *a2 = sub_215E076E4((uint64_t)&v12);
  uint64_t v3 = v11;
  int v11 = 0;
  if (v3)
  {
    for (uint64_t i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      uint64_t v6 = (void (*)(uint64_t))*((void *)i - 2);
      uint64_t v5 = *((void *)i - 1);
      v6(v5);
    }
    free(i);
    unsigned int v7 = (void *)v3[3];
    if (v7)
    {
      do
      {
        int v8 = (void *)*v7;
        free(v7);
        unsigned int v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_215DFF658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215DFF670(uint64_t a1, _WORD *a2)
{
  sub_215E01B28(a1, (uint64_t)&v11);
  if (v11 != 2 || v12 >= 0x10000)
  {
    exceptiounint64_t n = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&unk_26C685DC0;
    __cxa_throw(v10, (struct type_info *)&unk_26C6859D8, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v12;
  uint64_t v3 = v13;
  uint64_t v13 = 0;
  if (v3)
  {
    for (uint64_t i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      uint64_t v6 = (void (*)(uint64_t))*((void *)i - 2);
      uint64_t v5 = *((void *)i - 1);
      v6(v5);
    }
    free(i);
    unsigned int v7 = (void *)v3[3];
    if (v7)
    {
      do
      {
        int v8 = (void *)*v7;
        free(v7);
        unsigned int v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_215DFF758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215DFF770(uint64_t a1, _DWORD *a2)
{
  sub_215E01B28(a1, (uint64_t)&v9);
  long long v12 = v9;
  uint64_t v13 = v10;
  *a2 = sub_215E07758((uint64_t)&v12);
  uint64_t v3 = v11;
  int v11 = 0;
  if (v3)
  {
    for (uint64_t i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      uint64_t v6 = (void (*)(uint64_t))*((void *)i - 2);
      uint64_t v5 = *((void *)i - 1);
      v6(v5);
    }
    free(i);
    unsigned int v7 = (void *)v3[3];
    if (v7)
    {
      do
      {
        int v8 = (void *)*v7;
        free(v7);
        unsigned int v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_215DFF80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215DFF824(uint64_t a1, _DWORD *a2)
{
  sub_215E01B28(a1, (uint64_t)&v12);
  if (v12 != 2 || HIDWORD(v13) != 0)
  {
    exceptiounint64_t n = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    int v11 = std::bad_cast::bad_cast(exception);
    v11->__vftable = (std::bad_cast_vtbl *)&unk_26C685DC0;
    __cxa_throw(v11, (struct type_info *)&unk_26C6859D8, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v13;
  uint64_t v4 = v14;
  uint64_t v14 = 0;
  if (v4)
  {
    for (uint64_t i = (char *)v4[4]; i != (char *)v4[6]; i -= 16)
    {
      unsigned int v7 = (void (*)(uint64_t))*((void *)i - 2);
      uint64_t v6 = *((void *)i - 1);
      v7(v6);
    }
    free(i);
    int v8 = (void *)v4[3];
    if (v8)
    {
      do
      {
        long long v9 = (void *)*v8;
        free(v8);
        int v8 = v9;
      }
      while (v9);
    }
    free(v4);
  }
}

void sub_215DFF90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215DFF924(uint64_t a1, void *a2)
{
  sub_215E01B28(a1, (uint64_t)&v11);
  if (v11 != 3 && (v11 != 2 || v12 < 0))
  {
    exceptiounint64_t n = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&unk_26C685DC0;
    __cxa_throw(v10, (struct type_info *)&unk_26C6859D8, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v12;
  uint64_t v3 = v13;
  unint64_t v13 = 0;
  if (v3)
  {
    for (uint64_t i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      uint64_t v6 = (void (*)(uint64_t))*((void *)i - 2);
      uint64_t v5 = *((void *)i - 1);
      v6(v5);
    }
    free(i);
    unsigned int v7 = (void *)v3[3];
    if (v7)
    {
      do
      {
        int v8 = (void *)*v7;
        free(v7);
        unsigned int v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_215DFFA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215DFFA28(uint64_t a1, void *a2)
{
  sub_215E01B28(a1, (uint64_t)&v11);
  if (v11 != 2)
  {
    exceptiounint64_t n = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&unk_26C685DC0;
    __cxa_throw(v10, (struct type_info *)&unk_26C6859D8, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v3 = v13;
  *a2 = v12;
  unint64_t v13 = 0;
  if (v3)
  {
    for (uint64_t i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      uint64_t v6 = (void (*)(uint64_t))*((void *)i - 2);
      uint64_t v5 = *((void *)i - 1);
      v6(v5);
    }
    free(i);
    unsigned int v7 = (void *)v3[3];
    if (v7)
    {
      do
      {
        int v8 = (void *)*v7;
        free(v7);
        unsigned int v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_215DFFB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215DFFB20(uint64_t a1, void *a2)
{
  sub_215E01B28(a1, (uint64_t)&v11);
  if (v11 != 3 && (v11 != 2 || v12 < 0))
  {
    exceptiounint64_t n = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&unk_26C685DC0;
    __cxa_throw(v10, (struct type_info *)&unk_26C6859D8, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v12;
  uint64_t v3 = v13;
  unint64_t v13 = 0;
  if (v3)
  {
    for (uint64_t i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      uint64_t v6 = (void (*)(uint64_t))*((void *)i - 2);
      uint64_t v5 = *((void *)i - 1);
      v6(v5);
    }
    free(i);
    unsigned int v7 = (void *)v3[3];
    if (v7)
    {
      do
      {
        int v8 = (void *)*v7;
        free(v7);
        unsigned int v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_215DFFC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215DFFC24(uint64_t a1, void *a2)
{
  sub_215E01B28(a1, (uint64_t)&v11);
  if (v11 != 2)
  {
    exceptiounint64_t n = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&unk_26C685DC0;
    __cxa_throw(v10, (struct type_info *)&unk_26C6859D8, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v3 = v13;
  *a2 = v12;
  unint64_t v13 = 0;
  if (v3)
  {
    for (uint64_t i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      uint64_t v6 = (void (*)(uint64_t))*((void *)i - 2);
      uint64_t v5 = *((void *)i - 1);
      v6(v5);
    }
    free(i);
    unsigned int v7 = (void *)v3[3];
    if (v7)
    {
      do
      {
        int v8 = (void *)*v7;
        free(v7);
        unsigned int v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_215DFFD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215DFFD1C(uint64_t a1, float *a2)
{
  sub_215E01B28(a1, (uint64_t)&v12);
  if (v12 == 2)
  {
    *a2 = (float)(unint64_t)v13;
    uint64_t v4 = v14;
    uint64_t v14 = 0;
    if (!v4) {
      return;
    }
    goto LABEL_9;
  }
  if (v12 == 3)
  {
    *a2 = (float)v13;
    uint64_t v4 = v14;
    uint64_t v14 = 0;
    if (!v4) {
      return;
    }
    goto LABEL_9;
  }
  if (v12 != 4)
  {
    exceptiounint64_t n = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    int v11 = std::bad_cast::bad_cast(exception);
    v11->__vftable = (std::bad_cast_vtbl *)&unk_26C685DC0;
    __cxa_throw(v11, (struct type_info *)&unk_26C6859D8, (void (*)(void *))std::exception::~exception);
  }
  float v3 = *(double *)&v13;
  *a2 = v3;
  uint64_t v4 = v14;
  uint64_t v14 = 0;
  if (v4)
  {
LABEL_9:
    for (uint64_t i = (char *)v4[4]; i != (char *)v4[6]; i -= 16)
    {
      unsigned int v7 = (void (*)(uint64_t))*((void *)i - 2);
      uint64_t v6 = *((void *)i - 1);
      v7(v6);
    }
    free(i);
    int v8 = (void *)v4[3];
    if (v8)
    {
      do
      {
        long long v9 = (void *)*v8;
        free(v8);
        int v8 = v9;
      }
      while (v9);
    }
    free(v4);
  }
}

void sub_215DFFE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215DFFE68(uint64_t a1, double *a2)
{
  sub_215E01B28(a1, (uint64_t)&v11);
  if (v11 == 2)
  {
    *a2 = (double)(unint64_t)v12;
    float v3 = v13;
    uint64_t v13 = 0;
    if (!v3) {
      return;
    }
    goto LABEL_9;
  }
  if (v11 == 3)
  {
    *a2 = (double)v12;
    float v3 = v13;
    uint64_t v13 = 0;
    if (!v3) {
      return;
    }
    goto LABEL_9;
  }
  if (v11 != 4)
  {
    exceptiounint64_t n = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&unk_26C685DC0;
    __cxa_throw(v10, (struct type_info *)&unk_26C6859D8, (void (*)(void *))std::exception::~exception);
  }
  *(void *)a2 = v12;
  float v3 = v13;
  uint64_t v13 = 0;
  if (v3)
  {
LABEL_9:
    for (uint64_t i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      uint64_t v6 = (void (*)(uint64_t))*((void *)i - 2);
      uint64_t v5 = *((void *)i - 1);
      v6(v5);
    }
    free(i);
    unsigned int v7 = (void *)v3[3];
    if (v7)
    {
      do
      {
        int v8 = (void *)*v7;
        free(v7);
        unsigned int v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_215DFFF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215DFFFB0(uint64_t a1, unsigned char *a2)
{
  sub_215E01B28(a1, (uint64_t)&v11);
  if (v11 != 1)
  {
    exceptiounint64_t n = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&unk_26C685DC0;
    __cxa_throw(v10, (struct type_info *)&unk_26C6859D8, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v12;
  float v3 = v13;
  uint64_t v13 = 0;
  if (v3)
  {
    for (uint64_t i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      uint64_t v6 = (void (*)(uint64_t))*((void *)i - 2);
      uint64_t v5 = *((void *)i - 1);
      v6(v5);
    }
    free(i);
    unsigned int v7 = (void *)v3[3];
    if (v7)
    {
      do
      {
        int v8 = (void *)*v7;
        free(v7);
        unsigned int v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_215E00090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215E000A8(uint64_t a1, void **a2)
{
  sub_215E01B28(a1, (uint64_t)&v12);
  if (v12 != 8 && v12 != 5)
  {
    exceptiounint64_t n = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    int v11 = std::bad_cast::bad_cast(exception);
    v11->__vftable = (std::bad_cast_vtbl *)&unk_26C685DC0;
    __cxa_throw(v11, (struct type_info *)&unk_26C6859D8, (void (*)(void *))std::exception::~exception);
  }
  sub_215CF5764(a2, __src, __len);
  uint64_t v4 = v15;
  uint64_t v15 = 0;
  if (v4)
  {
    for (uint64_t i = (char *)v4[4]; i != (char *)v4[6]; i -= 16)
    {
      unsigned int v7 = (void (*)(uint64_t))*((void *)i - 2);
      uint64_t v6 = *((void *)i - 1);
      v7(v6);
    }
    free(i);
    int v8 = (void *)v4[3];
    if (v8)
    {
      do
      {
        long long v9 = (void *)*v8;
        free(v8);
        int v8 = v9;
      }
      while (v9);
    }
    free(v4);
  }
}

void sub_215E00194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_215E001AC(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = *a1;
  if ((unint64_t)(v4 - *a1) >= 9)
  {
    uint64_t result = (char *)a1[1];
  }
  else
  {
    if (v4) {
      size_t v6 = 2 * v4;
    }
    else {
      size_t v6 = 0x2000;
    }
    size_t v7 = v5 + 9;
    while (v6 < v7)
    {
      BOOL v8 = (uint64_t)v6 <= 0;
      v6 *= 2;
      if (v8)
      {
        size_t v6 = v7;
        break;
      }
    }
    uint64_t result = (char *)malloc_type_realloc((void *)a1[1], v6, 0xAD6A59EEuLL);
    if (!result)
    {
      exceptiounint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      int v12 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v12, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    a1[1] = (uint64_t)result;
    a1[2] = v6;
    uint64_t v5 = *a1;
  }
  uint64_t v10 = &result[v5];
  *uint64_t v10 = -49;
  *(void *)(v10 + 1) = bswap64(a2);
  *a1 += 9;
  return result;
}

void sub_215E0028C(uint64_t a1, uint64_t a2)
{
  sub_215E01B28(a1, (uint64_t)v12);
  if (v12[0] != 8)
  {
    exceptiounint64_t n = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    int v11 = std::bad_cast::bad_cast(exception);
    v11->__vftable = (std::bad_cast_vtbl *)&unk_26C685DC0;
    __cxa_throw(v11, (struct type_info *)&unk_26C6859D8, (void (*)(void *))std::exception::~exception);
  }
  int v3 = v12[2];
  uint64_t v4 = v14;
  *(void *)(a2 + 8) = v13;
  *(_DWORD *)a2 = v3;
  uint64_t v14 = 0;
  if (v4)
  {
    for (uint64_t i = (char *)v4[4]; i != (char *)v4[6]; i -= 16)
    {
      size_t v7 = (void (*)(uint64_t))*((void *)i - 2);
      uint64_t v6 = *((void *)i - 1);
      v7(v6);
    }
    free(i);
    BOOL v8 = (void *)v4[3];
    if (v8)
    {
      do
      {
        long long v9 = (void *)*v8;
        free(v8);
        BOOL v8 = v9;
      }
      while (v9);
    }
    free(v4);
  }
}

void sub_215E00370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::bad_cast *sub_215E00388(std::bad_cast *a1)
{
  uint64_t result = std::bad_cast::bad_cast(a1);
  result->__vftable = (std::bad_cast_vtbl *)&unk_26C685DC0;
  return result;
}

void *sub_215E003C0(void *a1)
{
  *a1 = &unk_26C685A00;
  uint64_t v2 = a1[3];
  a1[2] = &unk_26C685B50;
  a1[3] = 0;
  if (v2)
  {
    int v3 = *(void **)(v2 + 80);
    if (v3)
    {
      *(void *)(v2 + 88) = v3;
      operator delete(v3);
    }
    if (*(unsigned char *)(v2 + 72)) {
      free(*(void **)(v2 + 56));
    }
    if (*(unsigned char *)(v2 + 40)) {
      free(*(void **)(v2 + 24));
    }
    MEMORY[0x2166C4D20](v2, 0x1030C408C1A3048);
  }
  return a1;
}

void *sub_215E00470(void *a1)
{
  *a1 = &unk_26C685A00;
  uint64_t v2 = a1[3];
  a1[2] = &unk_26C685B50;
  a1[3] = 0;
  if (v2)
  {
    int v3 = *(void **)(v2 + 80);
    if (v3)
    {
      *(void *)(v2 + 88) = v3;
      operator delete(v3);
    }
    if (*(unsigned char *)(v2 + 72)) {
      free(*(void **)(v2 + 56));
    }
    if (*(unsigned char *)(v2 + 40)) {
      free(*(void **)(v2 + 24));
    }
    MEMORY[0x2166C4D20](v2, 0x1030C408C1A3048);
  }
  return a1;
}

void *sub_215E00520(void *result)
{
  *(result - 2) = &unk_26C685A00;
  uint64_t v1 = result[1];
  *uint64_t result = &unk_26C685B50;
  result[1] = 0;
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 80);
    if (v2)
    {
      *(void *)(v1 + 88) = v2;
      operator delete(v2);
    }
    if (*(unsigned char *)(v1 + 72)) {
      free(*(void **)(v1 + 56));
    }
    if (*(unsigned char *)(v1 + 40)) {
      free(*(void **)(v1 + 24));
    }
    return (void *)MEMORY[0x2166C4D20](v1, 0x1030C408C1A3048);
  }
  return result;
}

void sub_215E005C8(void *a1)
{
  *a1 = &unk_26C685A00;
  uint64_t v1 = a1[3];
  a1[2] = &unk_26C685B50;
  a1[3] = 0;
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 80);
    if (v2)
    {
      *(void *)(v1 + 88) = v2;
      operator delete(v2);
    }
    if (*(unsigned char *)(v1 + 72)) {
      free(*(void **)(v1 + 56));
    }
    if (*(unsigned char *)(v1 + 40)) {
      free(*(void **)(v1 + 24));
    }
    MEMORY[0x2166C4D20](v1, 0x1030C408C1A3048);
  }

  JUMPOUT(0x2166C4D20);
}

void sub_215E00698(void *a1)
{
  *(a1 - 2) = &unk_26C685A00;
  uint64_t v1 = a1[1];
  *a1 = &unk_26C685B50;
  a1[1] = 0;
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 80);
    if (v2)
    {
      *(void *)(v1 + 88) = v2;
      operator delete(v2);
    }
    if (*(unsigned char *)(v1 + 72)) {
      free(*(void **)(v1 + 56));
    }
    if (*(unsigned char *)(v1 + 40)) {
      free(*(void **)(v1 + 24));
    }
    MEMORY[0x2166C4D20](v1, 0x1030C408C1A3048);
  }

  JUMPOUT(0x2166C4D20);
}

char *sub_215E00764(uint64_t a1)
{
  return sub_215E0076C(*(void *)(a1 + 24));
}

char *sub_215E0076C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
LABEL_5:
    if (!*(unsigned char *)(a1 + 72)) {
      goto LABEL_6;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 16);
    BOOL v8 = *(char **)(a1 + 88);
    unint64_t v7 = *(void *)(a1 + 96);
    if ((unint64_t)v8 >= v7) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  uint64_t v2 = malloc_type_malloc(0x2000uLL, 0x3BE130FuLL);
  if (!v2) {
    goto LABEL_36;
  }
  int v3 = v2;
  if (*(unsigned char *)(a1 + 40))
  {
    free(*(void **)(a1 + 24));
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 32) = 0x2000;
    *(void *)(a1 + 16) = 0;
    goto LABEL_5;
  }
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v2;
  *(void *)(a1 + 32) = 0x2000;
  *(unsigned char *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 1;
  if (*(unsigned char *)(a1 + 72)) {
    goto LABEL_11;
  }
LABEL_6:
  uint64_t v4 = malloc_type_malloc(0x2000uLL, 0x3BE130FuLL);
  if (!v4)
  {
LABEL_36:
    exceptiounint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    char v30 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v30, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  uint64_t v5 = v4;
  if (!*(unsigned char *)(a1 + 72))
  {
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = v4;
    *(void *)(a1 + 64) = 0x2000;
    *(unsigned char *)(a1 + 72) = 1;
    uint64_t v6 = *(void *)(a1 + 16);
    BOOL v8 = *(char **)(a1 + 88);
    unint64_t v7 = *(void *)(a1 + 96);
    if ((unint64_t)v8 >= v7) {
      goto LABEL_14;
    }
LABEL_12:
    *(void *)BOOL v8 = v6;
    uint64_t v9 = (uint64_t)(v8 + 8);
    goto LABEL_33;
  }
  free(*(void **)(a1 + 56));
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = 0x2000;
  *(void *)(a1 + 48) = 0;
  uint64_t v6 = *(void *)(a1 + 16);
  BOOL v8 = *(char **)(a1 + 88);
  unint64_t v7 = *(void *)(a1 + 96);
  if ((unint64_t)v8 < v7) {
    goto LABEL_12;
  }
LABEL_14:
  uint64_t v10 = *(char **)(a1 + 80);
  uint64_t v11 = (v8 - v10) >> 3;
  unint64_t v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 61) {
    sub_215738AC0();
  }
  uint64_t v13 = v7 - (void)v10;
  if (v13 >> 2 > v12) {
    unint64_t v12 = v13 >> 2;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v12;
  }
  if (v14)
  {
    if (v14 >> 61) {
      sub_215738AD8();
    }
    uint64_t v15 = operator new(8 * v14);
    char v16 = &v15[8 * v11];
    int v17 = &v15[8 * v14];
    *char v16 = v6;
    uint64_t v9 = (uint64_t)(v16 + 1);
    int64_t v18 = v8 - v10;
    if (v8 == v10) {
      goto LABEL_31;
    }
    goto LABEL_25;
  }
  uint64_t v15 = 0;
  char v16 = (void *)(8 * v11);
  int v17 = 0;
  *(void *)(8 * v11) = v6;
  uint64_t v9 = 8 * v11 + 8;
  int64_t v18 = v8 - v10;
  if (v8 != v10)
  {
LABEL_25:
    unint64_t v19 = v18 - 8;
    if (v19 < 0x58) {
      goto LABEL_41;
    }
    if ((unint64_t)(v10 - v15) < 0x20) {
      goto LABEL_41;
    }
    uint64_t v20 = (v19 >> 3) + 1;
    uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    char v22 = &v8[-v21];
    char v16 = (void *)((char *)v16 - v21);
    unsigned int v23 = &v15[8 * v11 - 16];
    uint64_t v24 = v8 - 16;
    uint64_t v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *unsigned int v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    BOOL v8 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      do
      {
        uint64_t v27 = *((void *)v8 - 1);
        v8 -= 8;
        *--char v16 = v27;
      }
      while (v8 != v10);
    }
  }
LABEL_31:
  *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v16;
  *(void *)(a1 + 88) = v9;
  *(void *)(a1 + 96) = v17;
  if (v10) {
    operator delete(v10);
  }
LABEL_33:
  *(void *)(a1 + 88) = v9;

  return sub_215E001AC((uint64_t *)(a1 + 16), 0);
}

char *sub_215E009E8(uint64_t a1)
{
  return sub_215E0076C(*(void *)(a1 + 8));
}

void sub_215E009F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(*(void *)(v1 + 88) - 8);
  sub_215E001AC((uint64_t *)(v1 + 48), *(void *)(v1 + 16) - v2 - 9);
  size_t v3 = *(void *)(v1 + 48);
  if (v3) {
    memmove((void *)(*(void *)(v1 + 24) + v2), *(const void **)(v1 + 56), v3);
  }
  *(void *)(v1 + 48) = 0;
  uint64_t v4 = *(void *)(v1 + 80);
  uint64_t v5 = *(void *)(v1 + 88) - 8;
  *(void *)(v1 + 88) = v5;
  if (v4 == v5)
  {
    std::ostream::write();
    if (*(unsigned char *)(v1 + 40))
    {
      free(*(void **)(v1 + 24));
      *(unsigned char *)(v1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
    }
  }
}

void sub_215E00A88(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(*(void *)(v1 + 88) - 8);
  sub_215E001AC((uint64_t *)(v1 + 48), *(void *)(v1 + 16) - v2 - 9);
  size_t v3 = *(void *)(v1 + 48);
  if (v3) {
    memmove((void *)(*(void *)(v1 + 24) + v2), *(const void **)(v1 + 56), v3);
  }
  *(void *)(v1 + 48) = 0;
  uint64_t v4 = *(void *)(v1 + 80);
  uint64_t v5 = *(void *)(v1 + 88) - 8;
  *(void *)(v1 + 88) = v5;
  if (v4 == v5)
  {
    std::ostream::write();
    if (*(unsigned char *)(v1 + 40))
    {
      free(*(void **)(v1 + 24));
      *(unsigned char *)(v1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
    }
  }
}

void sub_215E00B20(void *a1, uint64_t *a2)
{
  *a1 = &unk_26C6851C8;
  uint64_t v2 = *a2;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *a1 = &unk_26C685B80;
  a1[1] = v2;
  a1[2] = &unk_26C685CC8;
  operator new();
}

void sub_215E00E08(_Unwind_Exception *a1)
{
  sub_215E01798(v3);
  MEMORY[0x2166C4D20](v2, 0x10F2C40853B94B7);
  void *v4 = &unk_26C685DE8;
  unint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 32) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void *sub_215E00EC4(void *a1)
{
  *a1 = &unk_26C685B80;
  a1[2] = &unk_26C685CC8;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2)
  {
    sub_215E01798((void *)(v2 + 8));
    MEMORY[0x2166C4D20](v2, 0x10F2C40853B94B7);
  }
  a1[2] = &unk_26C685DE8;
  size_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void *sub_215E00F84(void *a1)
{
  *a1 = &unk_26C685B80;
  a1[2] = &unk_26C685CC8;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2)
  {
    sub_215E01798((void *)(v2 + 8));
    MEMORY[0x2166C4D20](v2, 0x10F2C40853B94B7);
  }
  a1[2] = &unk_26C685DE8;
  size_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_215E01044(void *a1)
{
  *(a1 - 2) = &unk_26C685B80;
  *a1 = &unk_26C685CC8;
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2)
  {
    sub_215E01798((void *)(v2 + 8));
    MEMORY[0x2166C4D20](v2, 0x10F2C40853B94B7);
  }
  *a1 = &unk_26C685DE8;
  size_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void sub_215E010F8(void *a1)
{
  *a1 = &unk_26C685B80;
  a1[2] = &unk_26C685CC8;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2)
  {
    sub_215E01798((void *)(v2 + 8));
    MEMORY[0x2166C4D20](v2, 0x10F2C40853B94B7);
  }
  a1[2] = &unk_26C685DE8;
  size_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x2166C4D20);
}

void sub_215E011D8(void *a1)
{
  *(a1 - 2) = &unk_26C685B80;
  *a1 = &unk_26C685CC8;
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2)
  {
    sub_215E01798((void *)(v2 + 8));
    MEMORY[0x2166C4D20](v2, 0x10F2C40853B94B7);
  }
  *a1 = &unk_26C685DE8;
  size_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215E012B8(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 280);
}

uint64_t sub_215E012C4(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 32) + 280);
}

uint64_t sub_215E012D0(uint64_t result, unint64_t a2)
{
  size_t v3 = *(void **)(result + 48);
  uint64_t v4 = v3[11];
  if (v3[9] - v4 < a2)
  {
    do
    {
      sub_215E01854(v3, (uint64_t)"RefillBuffer", (const char *)&unk_215E96AD9);
      if (v3[33] >= 0x400uLL) {
        unint64_t v8 = 1024;
      }
      else {
        unint64_t v8 = v3[33];
      }
      if (v3[10] < v8) {
        sub_215E01500((uint64_t)(v3 + 1), v8);
      }
      uint64_t result = std::istream::read();
      uint64_t v5 = *(void *)(*v3 + 8);
      uint64_t v6 = v3[10];
      uint64_t v7 = v3[9] + v5;
      v3[9] = v7;
      v3[10] = v6 - v5;
      uint64_t v4 = v3[11];
    }
    while (v7 - v4 < a2);
  }
  v3[11] = v4 + a2;
  v3[35] += a2;
  return result;
}

uint64_t sub_215E013B8(uint64_t a1, unint64_t a2)
{
  return sub_215E012D0(a1 - 16, a2);
}

void *sub_215E013C0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  LODWORD(__n) = 0;
  uint64_t __src = 0;
  sub_215E0028C(v3, (uint64_t)&__n);
  size_t v4 = __n;
  if (*a2 != __n)
  {
    exceptiounint64_t n = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    uint64_t v9 = sub_215E00388(exception);
    __cxa_throw(v9, (struct type_info *)&unk_26C6859D8, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v5 = (void *)a2[1];
  uint64_t v6 = __src;

  return memcpy(v5, v6, v4);
}

void sub_215E01450(std::exception *a1)
{
  std::exception::~exception(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215E01490()
{
  return 1;
}

void *sub_215E01498(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_215E014E8(void *a1)
{
  if (atomic_fetch_add((atomic_uint *volatile)a1, 0xFFFFFFFF) == 1) {
    free(a1);
  }
}

void sub_215E01500(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 80);
  if (v3 == v4)
  {
    unsigned int v5 = atomic_load(*(unsigned int **)(a1 + 56));
    if (v5 == 1 && *(unsigned char *)(a1 + 232))
    {
      unint64_t v6 = *(void *)(a1 + 64) + *(void *)(a1 + 72) - 4;
      uint64_t v3 = 4;
      *(void *)(a1 + 64) = 4;
      *(void *)(a1 + 72) = v6;
      *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 4;
      if (v6 >= a2) {
        return;
      }
      goto LABEL_9;
    }
    uint64_t v4 = *(void *)(a1 + 80);
    uint64_t v3 = *(void *)(a1 + 64);
  }
  if (v4 == 4)
  {
    unint64_t v6 = *(void *)(a1 + 72);
LABEL_9:
    int64_t v7 = v3 + v6;
    unint64_t v8 = v3 + a2;
    while (1)
    {
      v7 *= 2;
      if (v7 >= v8) {
        break;
      }
      if (v7 <= 0)
      {
        int64_t v7 = v8;
        break;
      }
    }
    uint64_t v9 = malloc_type_realloc(*(void **)(a1 + 56), v7, 0x6311493AuLL);
    if (v9)
    {
      *(void *)(a1 + 56) = v9;
      *(void *)(a1 + 72) = v7 - *(void *)(a1 + 64);
      return;
    }
LABEL_32:
    exceptiounint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v27 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v27, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  size_t v10 = *(void *)(a1 + 96);
  size_t v11 = v3 - v4;
  unint64_t v12 = a2 + v3 - v4 + 4;
  while (v10 < v12)
  {
    BOOL v13 = (uint64_t)v10 <= 0;
    v10 *= 2;
    if (v13)
    {
      size_t v10 = v12;
      break;
    }
  }
  unint64_t v14 = malloc_type_malloc(v10, 0x355C421CuLL);
  if (!v14) {
    goto LABEL_32;
  }
  uint64_t v15 = v14;
  _DWORD *v14 = 1;
  memcpy(v14 + 1, (const void *)(*(void *)(a1 + 56) + *(void *)(a1 + 80)), v11);
  if (*(unsigned char *)(a1 + 232))
  {
    uint64_t v16 = *(void *)(a1 + 56);
    int v17 = **(void ***)(a1 + 104);
    int64_t v18 = (char *)v17[4];
    if (v18 == (char *)v17[5])
    {
      unint64_t v19 = (char *)v17[6];
      int64_t v21 = v18 - v19;
      BOOL v20 = v18 == v19;
      uint64_t v22 = (v18 - v19) >> 3;
      if (v20) {
        uint64_t v23 = 4;
      }
      else {
        uint64_t v23 = v22;
      }
      uint64_t v24 = (char *)malloc_type_realloc(v19, 16 * v23, 0x80040803F642BuLL);
      if (!v24)
      {
        int v28 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        char v29 = std::bad_alloc::bad_alloc(v28);
        __cxa_throw(v29, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
      }
      void v17[5] = &v24[16 * v23];
      v17[6] = v24;
      int64_t v18 = &v24[v21];
    }
    *(void *)int64_t v18 = sub_215E014E8;
    *((void *)v18 + 1) = v16;
    v17[4] = v18 + 16;
    *(unsigned char *)(a1 + 232) = 0;
  }
  else
  {
    uint64_t v25 = *(void **)(a1 + 56);
    if (atomic_fetch_add((atomic_uint *volatile)v25, 0xFFFFFFFF) == 1) {
      free(v25);
    }
  }
  *(void *)(a1 + 56) = v15;
  *(void *)(a1 + 64) = v11 + 4;
  *(void *)(a1 + 72) = v10 - (v11 + 4);
  *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 4;
}

void sub_215E0176C()
{
}

void sub_215E01784(_Unwind_Exception *a1)
{
}

void *sub_215E01798(void *a1)
{
  uint64_t v2 = (void *)a1[30];
  a1[30] = 0;
  if (v2)
  {
    for (uint64_t i = (char *)v2[4]; i != (char *)v2[6]; i -= 16)
    {
      unsigned int v5 = (void (*)(uint64_t))*((void *)i - 2);
      uint64_t v4 = *((void *)i - 1);
      v5(v4);
    }
    free(i);
    unint64_t v6 = (void *)v2[3];
    if (v6)
    {
      do
      {
        int64_t v7 = (void *)*v6;
        free(v6);
        unint64_t v6 = v7;
      }
      while (v7);
    }
    free(v2);
  }
  unint64_t v8 = (void *)a1[25];
  if (v8)
  {
    a1[26] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[7];
  if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1) {
    free(v9);
  }
  size_t v10 = (void *)a1[4];
  if (v10)
  {
    a1[5] = v10;
    operator delete(v10);
  }
  return a1;
}

void *sub_215E01854(void *result, uint64_t a2, const char *a3)
{
  uint64_t v7 = a2;
  unint64_t v6 = a3;
  if (*(_DWORD *)(*result + *(void *)(*(void *)*result - 24) + 32))
  {
    exceptiounint64_t n = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    sub_215E01944((uint64_t)&__msg, &v6, (const char *)&v7);
    *(void *)&__ec.__val_ = 1;
    __ec.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(exception, &__msg, &__ec);
    __cxa_throw(exception, MEMORY[0x263F8C1D0], MEMORY[0x263F8C140]);
  }
  return result;
}

void sub_215E0190C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t sub_215E01944(uint64_t a1, const char **a2, const char *a3)
{
  int v6 = 0;
  if (*a2) {
    sub_215743A68(v5, a2);
  }
  else {
    sub_21574344C(v5, "nullptr");
  }
  uint64_t v7 = (void **)v5;
  unint64_t v8 = "Input stream not in good state, in ";
  uint64_t v9 = v5;
  size_t v10 = "Input stream not in good state, in ";
  size_t v11 = "Input stream not in good state, in ";
  if (v6 == -1) {
    sub_215742D4C();
  }
  unint64_t v12 = &v7;
  ((void (*)(void **, _DWORD *))off_26C685E60[v6])(&v12, v5);
  if (*(void *)a3)
  {
    uint64_t v7 = (void **)v5;
    unint64_t v8 = a3;
    uint64_t v9 = v5;
    size_t v10 = a3;
    size_t v11 = a3;
    if (v6 != -1)
    {
      unint64_t v12 = &v7;
      ((void (*)(void **, _DWORD *))off_26C685E18[v6])(&v12, v5);
      goto LABEL_10;
    }
LABEL_15:
    sub_215742D4C();
  }
  uint64_t v7 = (void **)v5;
  unint64_t v8 = "nullptr";
  uint64_t v9 = v5;
  size_t v10 = "nullptr";
  size_t v11 = "nullptr";
  if (v6 == -1) {
    goto LABEL_15;
  }
  unint64_t v12 = &v7;
  ((void (*)(void **, _DWORD *))off_26C685E48[v6])(&v12, v5);
LABEL_10:
  if (v6 == -1) {
    sub_215742D4C();
  }
  uint64_t v7 = &v12;
  uint64_t result = ((uint64_t (*)(void ***, _DWORD *))off_26C685E78[v6])(&v7, v5);
  if (v6 != -1) {
    return ((uint64_t (*)(void ***, _DWORD *))off_26C685E30[v6])(&v7, v5);
  }
  return result;
}

void sub_215E01AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215E01AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215E01B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215E01B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215E01B28(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *(void *)(a1 + 88);
  unint64_t v5 = *(void *)(a1 + 72);
  unint64_t v6 = *(void *)(a1 + 96) - v4 + v5;
  size_t v281 = (uint64_t *)(a1 + 16);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v7 = (uint64_t *)(a1 + 216);
  uint64_t v275 = (void *)(a1 + 120);
  uint64_t v276 = a2;
  unint64_t v8 = (void **)(a1 + 40);
  uint64_t v9 = (uint64_t *)(a1 + 48);
  std::string v279 = (void *)(a1 + 8);
  uint64_t v280 = a1 + 184;
  std::string v277 = (uint64_t *)(a1 + 48);
  std::string v278 = (void **)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 64);
  size_t v11 = (unsigned __int8 *)(v10 + v4);
  *(void *)(a1 + 8) = v10;
  *(void *)(a1 + 16) = v10 + v4;
  if (v4 == v5) {
    goto LABEL_476;
  }
LABEL_2:
  char v12 = 0;
  BOOL v13 = 0;
  unint64_t v14 = (unsigned __int8 *)(v10 + v5);
  int v15 = *(_DWORD *)(a1 + 32);
  do
  {
LABEL_3:
    while (v15)
    {
      if ((v12 & 1) == 0)
      {
        BOOL v13 = v11;
        unint64_t v16 = *(void *)(a1 + 24);
        if (v14 - v11 < v16)
        {
LABEL_467:
          int v218 = 0;
          unint64_t v221 = &v13[-*v279];
          a2 = v276;
          *(void *)(a1 + 88) = v221;
          BOOL v219 = (unint64_t)v221 > v4;
          unsigned int v220 = &v221[-v4];
          if (!v219) {
            goto LABEL_479;
          }
          goto LABEL_478;
        }
        goto LABEL_20;
      }
LABEL_5:
      BOOL v13 = v11 + 1;
      *size_t v281 = (uint64_t)(v11 + 1);
      unint64_t v16 = *(void *)(a1 + 24);
      if (v14 - (v11 + 1) < v16) {
        goto LABEL_467;
      }
LABEL_20:
      size_t v11 = &v13[v16 - 1];
      *size_t v281 = (uint64_t)v11;
      switch(v15)
      {
        case 4:
          uint64_t v26 = *v13;
          *(void *)(a1 + 24) = v26;
          if (v26) {
            goto LABEL_159;
          }
          sub_215E04358((uint64_t)v275, v13, 0);
          uint64_t v20 = *v281 + 1;
          *size_t v281 = v20;
          uint64_t v27 = *v8;
          uint64_t v22 = *v9;
          if (*v8 == (void *)*v9) {
            goto LABEL_464;
          }
          while (2)
          {
            int v34 = *(_DWORD *)(v22 - 8);
            if (v34)
            {
              if (v34 == 2)
              {
                *(void *)(*v7 - 8) += 24;
                int v33 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v33;
                if (v33) {
                  goto LABEL_388;
                }
LABEL_39:
                uint64_t v22 = *v9 - 8;
                *uint64_t v9 = v22;
                *v7 -= 8;
                uint64_t v27 = *v8;
LABEL_40:
                if (v27 == (void *)v22) {
                  goto LABEL_463;
                }
                continue;
              }
              if (v34 != 1) {
                goto LABEL_40;
              }
              goto LABEL_446;
            }
            break;
          }
          *(void *)(*v7 - 8) += 24;
          int v35 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v35;
          if (!v35) {
            goto LABEL_39;
          }
          goto LABEL_318;
        case 5:
          unsigned int v93 = *(unsigned __int16 *)v13;
          uint64_t v94 = __rev16(v93);
          *(void *)(a1 + 24) = v94;
          if (v93) {
            goto LABEL_159;
          }
          sub_215E04358((uint64_t)v275, v13, v94);
          uint64_t v20 = *v281 + 1;
          *size_t v281 = v20;
          size_t v179 = *v8;
          uint64_t v22 = *v9;
          if (*v8 == (void *)*v9) {
            goto LABEL_464;
          }
          while (2)
          {
            int v181 = *(_DWORD *)(v22 - 8);
            if (v181)
            {
              if (v181 == 2)
              {
                *(void *)(*v7 - 8) += 24;
                int v180 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v180;
                if (v180) {
                  goto LABEL_388;
                }
LABEL_359:
                uint64_t v22 = *v9 - 8;
                *uint64_t v9 = v22;
                *v7 -= 8;
                size_t v179 = *v8;
LABEL_360:
                if (v179 == (void *)v22) {
                  goto LABEL_463;
                }
                continue;
              }
              if (v181 != 1) {
                goto LABEL_360;
              }
              goto LABEL_446;
            }
            break;
          }
          *(void *)(*v7 - 8) += 24;
          int v182 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v182;
          if (!v182) {
            goto LABEL_359;
          }
          goto LABEL_318;
        case 6:
          unsigned int v74 = *(_DWORD *)v13;
          uint64_t v75 = bswap32(*(_DWORD *)v13);
          *(void *)(a1 + 24) = v75;
          if (!v74)
          {
            sub_215E04358((uint64_t)v275, v13, v75);
            uint64_t v20 = *v281 + 1;
            *size_t v281 = v20;
            int v76 = *v8;
            uint64_t v22 = *v9;
            if (*v8 == (void *)*v9) {
              goto LABEL_464;
            }
            while (1)
            {
              int v78 = *(_DWORD *)(v22 - 8);
              if (!v78) {
                break;
              }
              if (v78 == 2)
              {
                *(void *)(*v7 - 8) += 24;
                int v77 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v77;
                if (v77) {
                  goto LABEL_388;
                }
LABEL_124:
                uint64_t v22 = *v9 - 8;
                *uint64_t v9 = v22;
                *v7 -= 8;
                int v76 = *v8;
                goto LABEL_125;
              }
              if (v78 == 1) {
                goto LABEL_446;
              }
LABEL_125:
              if (v76 == (void *)v22) {
                goto LABEL_463;
              }
            }
            *(void *)(*v7 - 8) += 24;
            int v79 = *(_DWORD *)(v22 - 4) - 1;
            *(_DWORD *)(v22 - 4) = v79;
            if (v79) {
              goto LABEL_318;
            }
            goto LABEL_124;
          }
LABEL_159:
          char v12 = 1;
          int v15 = 33;
          *(_DWORD *)(a1 + 32) = 33;
          size_t v11 = *(unsigned __int8 **)(a1 + 16);
          if (v11 == v14) {
            goto LABEL_473;
          }
          continue;
        case 7:
          uint64_t v57 = *v13;
          goto LABEL_173;
        case 8:
          uint64_t v57 = bswap32(*(unsigned __int16 *)v13) >> 16;
          goto LABEL_173;
        case 9:
          uint64_t v57 = bswap32(*(_DWORD *)v13);
LABEL_173:
          *(void *)(a1 + 24) = v57 + 1;
          char v12 = 1;
          int v15 = 34;
          *(_DWORD *)(a1 + 32) = 34;
          size_t v11 = *(unsigned __int8 **)(a1 + 16);
          if (v11 == v14) {
            goto LABEL_473;
          }
          continue;
        case 10:
          double v108 = COERCE_FLOAT(bswap32(*(_DWORD *)v13));
          uint64_t v109 = *(void *)(*v7 - 8);
          *(_DWORD *)uint64_t v109 = 4;
          *(double *)(v109 + 8) = v108;
          uint64_t v20 = *v281 + 1;
          *size_t v281 = v20;
          unint64_t v110 = *v8;
          uint64_t v22 = *v9;
          if (*v8 == (void *)*v9) {
            goto LABEL_464;
          }
          while (2)
          {
            int v112 = *(_DWORD *)(v22 - 8);
            if (v112)
            {
              if (v112 == 2)
              {
                *(void *)(*v7 - 8) += 24;
                int v111 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v111;
                if (v111) {
                  goto LABEL_388;
                }
LABEL_201:
                uint64_t v22 = *v9 - 8;
                *uint64_t v9 = v22;
                *v7 -= 8;
                unint64_t v110 = *v8;
              }
              else if (v112 == 1)
              {
                goto LABEL_446;
              }
              if (v110 == (void *)v22) {
                goto LABEL_463;
              }
              continue;
            }
            break;
          }
          *(void *)(*v7 - 8) += 24;
          int v113 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v113;
          if (!v113) {
            goto LABEL_201;
          }
          goto LABEL_318;
        case 11:
          unint64_t v87 = bswap64(*(void *)v13);
          uint64_t v88 = *(void *)(*v7 - 8);
          *(_DWORD *)uint64_t v88 = 4;
          *(void *)(v88 + 8) = v87;
          uint64_t v20 = *v281 + 1;
          *size_t v281 = v20;
          unint64_t v89 = *v8;
          uint64_t v22 = *v9;
          if (*v8 == (void *)*v9) {
            goto LABEL_464;
          }
          while (2)
          {
            int v91 = *(_DWORD *)(v22 - 8);
            if (v91)
            {
              if (v91 == 2)
              {
                *(void *)(*v7 - 8) += 24;
                int v90 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v90;
                if (v90) {
                  goto LABEL_388;
                }
LABEL_150:
                uint64_t v22 = *v9 - 8;
                *uint64_t v9 = v22;
                *v7 -= 8;
                unint64_t v89 = *v8;
              }
              else if (v91 == 1)
              {
                goto LABEL_446;
              }
              if (v89 == (void *)v22) {
                goto LABEL_463;
              }
              continue;
            }
            break;
          }
          *(void *)(*v7 - 8) += 24;
          int v92 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v92;
          if (!v92) {
            goto LABEL_150;
          }
          goto LABEL_318;
        case 12:
          uint64_t v123 = *v13;
          uint64_t v124 = *(void *)(*v7 - 8);
          *(_DWORD *)uint64_t v124 = 2;
          *(void *)(v124 + 8) = v123;
          uint64_t v20 = *v281 + 1;
          *size_t v281 = v20;
          uint64_t v125 = *v8;
          uint64_t v22 = *v9;
          if (*v8 == (void *)*v9) {
            goto LABEL_464;
          }
          while (2)
          {
            int v127 = *(_DWORD *)(v22 - 8);
            if (v127)
            {
              if (v127 == 2)
              {
                *(void *)(*v7 - 8) += 24;
                int v126 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v126;
                if (v126) {
                  goto LABEL_388;
                }
LABEL_226:
                uint64_t v22 = *v9 - 8;
                *uint64_t v9 = v22;
                *v7 -= 8;
                uint64_t v125 = *v8;
              }
              else if (v127 == 1)
              {
                goto LABEL_446;
              }
              if (v125 == (void *)v22) {
                goto LABEL_463;
              }
              continue;
            }
            break;
          }
          *(void *)(*v7 - 8) += 24;
          int v128 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v128;
          if (!v128) {
            goto LABEL_226;
          }
          goto LABEL_318;
        case 13:
          unsigned int v65 = bswap32(*(unsigned __int16 *)v13);
          uint64_t v66 = *(void *)(*v7 - 8);
          *(_DWORD *)uint64_t v66 = 2;
          *(void *)(v66 + 8) = HIWORD(v65);
          uint64_t v20 = *v281 + 1;
          *size_t v281 = v20;
          char v67 = *v8;
          uint64_t v22 = *v9;
          if (*v8 == (void *)*v9) {
            goto LABEL_464;
          }
          while (2)
          {
            int v69 = *(_DWORD *)(v22 - 8);
            if (v69)
            {
              if (v69 == 2)
              {
                *(void *)(*v7 - 8) += 24;
                int v68 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v68;
                if (v68) {
                  goto LABEL_388;
                }
LABEL_107:
                uint64_t v22 = *v9 - 8;
                *uint64_t v9 = v22;
                *v7 -= 8;
                char v67 = *v8;
LABEL_108:
                if (v67 == (void *)v22) {
                  goto LABEL_463;
                }
                continue;
              }
              if (v69 != 1) {
                goto LABEL_108;
              }
              goto LABEL_446;
            }
            break;
          }
          *(void *)(*v7 - 8) += 24;
          int v70 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v70;
          if (!v70) {
            goto LABEL_107;
          }
          goto LABEL_318;
        case 14:
          uint64_t v129 = bswap32(*(_DWORD *)v13);
          uint64_t v130 = *(void *)(*v7 - 8);
          *(_DWORD *)uint64_t v130 = 2;
          *(void *)(v130 + 8) = v129;
          uint64_t v20 = *v281 + 1;
          *size_t v281 = v20;
          int v131 = *v8;
          uint64_t v22 = *v9;
          if (*v8 == (void *)*v9) {
            goto LABEL_464;
          }
          while (2)
          {
            int v133 = *(_DWORD *)(v22 - 8);
            if (v133)
            {
              if (v133 == 2)
              {
                *(void *)(*v7 - 8) += 24;
                int v132 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v132;
                if (v132) {
                  goto LABEL_388;
                }
LABEL_237:
                uint64_t v22 = *v9 - 8;
                *uint64_t v9 = v22;
                *v7 -= 8;
                int v131 = *v8;
              }
              else if (v133 == 1)
              {
                goto LABEL_446;
              }
              if (v131 == (void *)v22) {
                goto LABEL_463;
              }
              continue;
            }
            break;
          }
          *(void *)(*v7 - 8) += 24;
          int v134 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v134;
          if (!v134) {
            goto LABEL_237;
          }
          goto LABEL_318;
        case 15:
          unint64_t v51 = bswap64(*(void *)v13);
          uint64_t v52 = *(void *)(*v7 - 8);
          *(_DWORD *)uint64_t v52 = 2;
          *(void *)(v52 + 8) = v51;
          uint64_t v20 = *v281 + 1;
          *size_t v281 = v20;
          uint64_t v53 = *v8;
          uint64_t v22 = *v9;
          if (*v8 == (void *)*v9) {
            goto LABEL_464;
          }
          while (2)
          {
            int v55 = *(_DWORD *)(v22 - 8);
            if (v55)
            {
              if (v55 == 2)
              {
                *(void *)(*v7 - 8) += 24;
                int v54 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v54;
                if (v54) {
                  goto LABEL_388;
                }
LABEL_81:
                uint64_t v22 = *v9 - 8;
                *uint64_t v9 = v22;
                *v7 -= 8;
                uint64_t v53 = *v8;
LABEL_82:
                if (v53 == (void *)v22) {
                  goto LABEL_463;
                }
                continue;
              }
              if (v55 != 1) {
                goto LABEL_82;
              }
              goto LABEL_446;
            }
            break;
          }
          *(void *)(*v7 - 8) += 24;
          int v56 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v56;
          if (!v56) {
            goto LABEL_81;
          }
          goto LABEL_318;
        case 16:
          uint64_t v58 = (char)*v13;
          uint64_t v59 = *(void *)(*v7 - 8);
          if ((int)v58 >= 0) {
            int v60 = 2;
          }
          else {
            int v60 = 3;
          }
          *(_DWORD *)uint64_t v59 = v60;
          *(void *)(v59 + 8) = v58;
          uint64_t v20 = *v281 + 1;
          *size_t v281 = v20;
          int v61 = *v8;
          uint64_t v22 = *v9;
          if (*v8 == (void *)*v9) {
            goto LABEL_464;
          }
          while (2)
          {
            int v63 = *(_DWORD *)(v22 - 8);
            if (v63)
            {
              if (v63 == 2)
              {
                *(void *)(*v7 - 8) += 24;
                int v62 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v62;
                if (v62) {
                  goto LABEL_388;
                }
LABEL_96:
                uint64_t v22 = *v9 - 8;
                *uint64_t v9 = v22;
                *v7 -= 8;
                int v61 = *v8;
LABEL_97:
                if (v61 == (void *)v22) {
                  goto LABEL_463;
                }
                continue;
              }
              if (v63 != 1) {
                goto LABEL_97;
              }
              goto LABEL_446;
            }
            break;
          }
          *(void *)(*v7 - 8) += 24;
          int v64 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v64;
          if (!v64) {
            goto LABEL_96;
          }
          goto LABEL_318;
        case 17:
          int v114 = bswap32(*(unsigned __int16 *)v13);
          int v115 = v114 >> 16;
          uint64_t v116 = SHIWORD(v114);
          uint64_t v117 = *(void *)(*v7 - 8);
          if (v115 >= 0) {
            int v118 = 2;
          }
          else {
            int v118 = 3;
          }
          *(_DWORD *)uint64_t v117 = v118;
          *(void *)(v117 + 8) = v116;
          uint64_t v20 = *v281 + 1;
          *size_t v281 = v20;
          uint64_t v119 = *v8;
          uint64_t v22 = *v9;
          if (*v8 == (void *)*v9) {
            goto LABEL_464;
          }
          while (2)
          {
            int v121 = *(_DWORD *)(v22 - 8);
            if (v121)
            {
              if (v121 == 2)
              {
                *(void *)(*v7 - 8) += 24;
                int v120 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v120;
                if (v120) {
                  goto LABEL_388;
                }
LABEL_215:
                uint64_t v22 = *v9 - 8;
                *uint64_t v9 = v22;
                *v7 -= 8;
                uint64_t v119 = *v8;
              }
              else if (v121 == 1)
              {
                goto LABEL_446;
              }
              if (v119 == (void *)v22) {
                goto LABEL_463;
              }
              continue;
            }
            break;
          }
          *(void *)(*v7 - 8) += 24;
          int v122 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v122;
          if (!v122) {
            goto LABEL_215;
          }
          goto LABEL_318;
        case 18:
          int v43 = bswap32(*(_DWORD *)v13);
          uint64_t v44 = v43;
          uint64_t v45 = *(void *)(*v7 - 8);
          if (v43 >= 0) {
            int v46 = 2;
          }
          else {
            int v46 = 3;
          }
          *(_DWORD *)uint64_t v45 = v46;
          *(void *)(v45 + 8) = v44;
          uint64_t v20 = *v281 + 1;
          *size_t v281 = v20;
          std::string v47 = *v8;
          uint64_t v22 = *v9;
          if (*v8 == (void *)*v9) {
            goto LABEL_464;
          }
          while (2)
          {
            int v49 = *(_DWORD *)(v22 - 8);
            if (v49)
            {
              if (v49 == 2)
              {
                *(void *)(*v7 - 8) += 24;
                int v48 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v48;
                if (v48) {
                  goto LABEL_388;
                }
LABEL_70:
                uint64_t v22 = *v9 - 8;
                *uint64_t v9 = v22;
                *v7 -= 8;
                std::string v47 = *v8;
LABEL_71:
                if (v47 == (void *)v22) {
                  goto LABEL_463;
                }
                continue;
              }
              if (v49 != 1) {
                goto LABEL_71;
              }
              goto LABEL_446;
            }
            break;
          }
          *(void *)(*v7 - 8) += 24;
          int v50 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v50;
          if (!v50) {
            goto LABEL_70;
          }
          goto LABEL_318;
        case 19:
          uint64_t v80 = bswap64(*(void *)v13);
          uint64_t v81 = *(void *)(*v7 - 8);
          if (v80 >= 0) {
            int v82 = 2;
          }
          else {
            int v82 = 3;
          }
          *(_DWORD *)uint64_t v81 = v82;
          *(void *)(v81 + 8) = v80;
          uint64_t v20 = *v281 + 1;
          *size_t v281 = v20;
          uint64_t v83 = *v8;
          uint64_t v22 = *v9;
          if (*v8 == (void *)*v9) {
            goto LABEL_464;
          }
          while (2)
          {
            int v85 = *(_DWORD *)(v22 - 8);
            if (v85)
            {
              if (v85 == 2)
              {
                *(void *)(*v7 - 8) += 24;
                int v84 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v84;
                if (v84) {
                  goto LABEL_388;
                }
LABEL_138:
                uint64_t v22 = *v9 - 8;
                *uint64_t v9 = v22;
                *v7 -= 8;
                uint64_t v83 = *v8;
              }
              else if (v85 == 1)
              {
LABEL_446:
                int v15 = 0;
                char v12 = 0;
                uint64_t v166 = *v7;
                goto LABEL_447;
              }
              if (v83 == (void *)v22) {
                goto LABEL_463;
              }
              continue;
            }
            break;
          }
          *(void *)(*v7 - 8) += 24;
          int v86 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v86;
          if (!v86) {
            goto LABEL_138;
          }
          goto LABEL_318;
        case 20:
          sub_215E041C0((uint64_t)v275, v13, 2u);
          uint64_t v20 = *v281 + 1;
          *size_t v281 = v20;
          char v39 = *v8;
          uint64_t v22 = *v9;
          if (*v8 == (void *)*v9) {
            goto LABEL_464;
          }
          while (2)
          {
            int v41 = *(_DWORD *)(v22 - 8);
            if (v41)
            {
              if (v41 == 2)
              {
                *(void *)(*v7 - 8) += 24;
                int v40 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v40;
                if (v40) {
                  goto LABEL_388;
                }
LABEL_56:
                uint64_t v22 = *v9 - 8;
                *uint64_t v9 = v22;
                *v7 -= 8;
                char v39 = *v8;
LABEL_57:
                if (v39 == (void *)v22) {
                  goto LABEL_463;
                }
                continue;
              }
              if (v41 != 1) {
                goto LABEL_57;
              }
              goto LABEL_446;
            }
            break;
          }
          *(void *)(*v7 - 8) += 24;
          int v42 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v42;
          if (!v42) {
            goto LABEL_56;
          }
          goto LABEL_318;
        case 21:
          sub_215E041C0((uint64_t)v275, v13, 3u);
          uint64_t v20 = *v281 + 1;
          *size_t v281 = v20;
          uint64_t v95 = *v8;
          uint64_t v22 = *v9;
          if (*v8 == (void *)*v9) {
            goto LABEL_464;
          }
          while (2)
          {
            int v97 = *(_DWORD *)(v22 - 8);
            if (v97)
            {
              if (v97 == 2)
              {
                *(void *)(*v7 - 8) += 24;
                int v96 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v96;
                if (v96) {
                  goto LABEL_388;
                }
LABEL_164:
                uint64_t v22 = *v9 - 8;
                *uint64_t v9 = v22;
                *v7 -= 8;
                uint64_t v95 = *v8;
              }
              else if (v97 == 1)
              {
                goto LABEL_446;
              }
              if (v95 == (void *)v22) {
                goto LABEL_463;
              }
              continue;
            }
            break;
          }
          *(void *)(*v7 - 8) += 24;
          int v98 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v98;
          if (!v98) {
            goto LABEL_164;
          }
          goto LABEL_318;
        case 22:
          sub_215E041C0((uint64_t)v275, v13, 5u);
          uint64_t v20 = *v281 + 1;
          *size_t v281 = v20;
          uint64_t v135 = *v8;
          uint64_t v22 = *v9;
          if (*v8 == (void *)*v9) {
            goto LABEL_464;
          }
          while (2)
          {
            int v137 = *(_DWORD *)(v22 - 8);
            if (v137)
            {
              if (v137 == 2)
              {
                *(void *)(*v7 - 8) += 24;
                int v136 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v136;
                if (v136) {
                  goto LABEL_388;
                }
LABEL_248:
                uint64_t v22 = *v9 - 8;
                *uint64_t v9 = v22;
                *v7 -= 8;
                uint64_t v135 = *v8;
              }
              else if (v137 == 1)
              {
                goto LABEL_446;
              }
              if (v135 == (void *)v22) {
                goto LABEL_463;
              }
              continue;
            }
            break;
          }
          *(void *)(*v7 - 8) += 24;
          int v138 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v138;
          if (!v138) {
            goto LABEL_248;
          }
          goto LABEL_318;
        case 23:
          sub_215E041C0((uint64_t)v275, v13, 9u);
          uint64_t v20 = *v281 + 1;
          *size_t v281 = v20;
          char v149 = *v8;
          uint64_t v22 = *v9;
          if (*v8 == (void *)*v9) {
            goto LABEL_464;
          }
          while (2)
          {
            int v151 = *(_DWORD *)(v22 - 8);
            if (v151)
            {
              if (v151 == 2)
              {
                *(void *)(*v7 - 8) += 24;
                int v150 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v150;
                if (v150) {
                  goto LABEL_388;
                }
LABEL_282:
                uint64_t v22 = *v9 - 8;
                *uint64_t v9 = v22;
                *v7 -= 8;
                char v149 = *v8;
              }
              else if (v151 == 1)
              {
                goto LABEL_446;
              }
              if (v149 == (void *)v22) {
                goto LABEL_463;
              }
              continue;
            }
            break;
          }
          *(void *)(*v7 - 8) += 24;
          int v152 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v152;
          if (!v152) {
            goto LABEL_282;
          }
          goto LABEL_318;
        case 24:
          sub_215E041C0((uint64_t)v275, v13, 0x11u);
          uint64_t v20 = *v281 + 1;
          *size_t v281 = v20;
          uint64_t v99 = *v8;
          uint64_t v22 = *v9;
          if (*v8 == (void *)*v9) {
            goto LABEL_464;
          }
          while (2)
          {
            int v101 = *(_DWORD *)(v22 - 8);
            if (v101)
            {
              if (v101 == 2)
              {
                *(void *)(*v7 - 8) += 24;
                int v100 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v100;
                if (v100) {
                  goto LABEL_388;
                }
LABEL_178:
                uint64_t v22 = *v9 - 8;
                *uint64_t v9 = v22;
                *v7 -= 8;
                uint64_t v99 = *v8;
              }
              else if (v101 == 1)
              {
                goto LABEL_446;
              }
              if (v99 == (void *)v22) {
                goto LABEL_463;
              }
              continue;
            }
            break;
          }
          *(void *)(*v7 - 8) += 24;
          int v102 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v102;
          if (!v102) {
            goto LABEL_178;
          }
          goto LABEL_318;
        case 25:
          uint64_t v103 = *v13;
          *(void *)(a1 + 24) = v103;
          if (v103) {
            goto LABEL_291;
          }
          sub_215E03FD8((uint64_t)v275, v13, 0);
          uint64_t v20 = *v281 + 1;
          *size_t v281 = v20;
          uint64_t v104 = *v8;
          uint64_t v22 = *v9;
          if (*v8 == (void *)*v9) {
            goto LABEL_464;
          }
          while (2)
          {
            int v106 = *(_DWORD *)(v22 - 8);
            if (v106)
            {
              if (v106 == 2)
              {
                *(void *)(*v7 - 8) += 24;
                int v105 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v105;
                if (v105) {
                  goto LABEL_388;
                }
LABEL_190:
                uint64_t v22 = *v9 - 8;
                *uint64_t v9 = v22;
                *v7 -= 8;
                uint64_t v104 = *v8;
              }
              else if (v106 == 1)
              {
                goto LABEL_446;
              }
              if (v104 == (void *)v22) {
                goto LABEL_463;
              }
              continue;
            }
            break;
          }
          *(void *)(*v7 - 8) += 24;
          int v107 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v107;
          if (!v107) {
            goto LABEL_190;
          }
          goto LABEL_318;
        case 26:
          unsigned int v143 = *(unsigned __int16 *)v13;
          uint64_t v144 = __rev16(v143);
          *(void *)(a1 + 24) = v144;
          if (v143) {
            goto LABEL_291;
          }
          sub_215E03FD8((uint64_t)v275, v13, v144);
          uint64_t v20 = *v281 + 1;
          *size_t v281 = v20;
          uint64_t v145 = *v8;
          uint64_t v22 = *v9;
          if (*v8 == (void *)*v9) {
            goto LABEL_464;
          }
          while (2)
          {
            int v147 = *(_DWORD *)(v22 - 8);
            if (v147)
            {
              if (v147 == 2)
              {
                *(void *)(*v7 - 8) += 24;
                int v146 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v146;
                if (v146) {
                  goto LABEL_388;
                }
LABEL_271:
                uint64_t v22 = *v9 - 8;
                *uint64_t v9 = v22;
                *v7 -= 8;
                uint64_t v145 = *v8;
              }
              else if (v147 == 1)
              {
                goto LABEL_446;
              }
              if (v145 == (void *)v22) {
                goto LABEL_463;
              }
              continue;
            }
            break;
          }
          *(void *)(*v7 - 8) += 24;
          int v148 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v148;
          if (!v148) {
            goto LABEL_271;
          }
          goto LABEL_318;
        case 27:
          unsigned int v153 = *(_DWORD *)v13;
          uint64_t v154 = bswap32(*(_DWORD *)v13);
          *(void *)(a1 + 24) = v154;
          if (!v153)
          {
            sub_215E03FD8((uint64_t)v275, v13, v154);
            uint64_t v20 = *v281 + 1;
            *size_t v281 = v20;
            long long v183 = *v8;
            uint64_t v22 = *v9;
            if (*v8 == (void *)*v9) {
              goto LABEL_464;
            }
            while (1)
            {
              int v185 = *(_DWORD *)(v22 - 8);
              if (!v185) {
                break;
              }
              if (v185 == 2)
              {
                *(void *)(*v7 - 8) += 24;
                int v184 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v184;
                if (v184) {
                  goto LABEL_388;
                }
LABEL_370:
                uint64_t v22 = *v9 - 8;
                *uint64_t v9 = v22;
                *v7 -= 8;
                long long v183 = *v8;
                goto LABEL_371;
              }
              if (v185 == 1) {
                goto LABEL_446;
              }
LABEL_371:
              if (v183 == (void *)v22) {
                goto LABEL_463;
              }
            }
            *(void *)(*v7 - 8) += 24;
            int v186 = *(_DWORD *)(v22 - 4) - 1;
            *(_DWORD *)(v22 - 4) = v186;
            if (v186) {
              goto LABEL_318;
            }
            goto LABEL_370;
          }
LABEL_291:
          char v12 = 1;
          int v15 = 32;
          *(_DWORD *)(a1 + 32) = 32;
          size_t v11 = *(unsigned __int8 **)(a1 + 16);
          if (v11 == v14) {
            goto LABEL_473;
          }
          continue;
        case 28:
          unsigned int v73 = *(unsigned __int16 *)v13;
          *size_t v281 = (uint64_t)&v13[v16];
          if (v73)
          {
            uint64_t v72 = __rev16(v73);
            sub_215E04564(v8, 0, v72);
            goto LABEL_119;
          }
          sub_215E046DC(v275, 0);
          uint64_t v166 = *v7 - 8;
          uint64_t *v7 = v166;
          unint64_t v175 = *v8;
          uint64_t v22 = *v9;
          while (1)
          {
            while (1)
            {
              if (v175 == (void *)v22) {
                goto LABEL_470;
              }
              int v177 = *(_DWORD *)(v22 - 8);
              if (v177) {
                break;
              }
              *(void *)(v166 - 8) += 24;
              int v178 = *(_DWORD *)(v22 - 4) - 1;
              *(_DWORD *)(v22 - 4) = v178;
              if (v178) {
                goto LABEL_318;
              }
LABEL_348:
              uint64_t v22 = *v9 - 8;
              *uint64_t v9 = v22;
              uint64_t v166 = *v7 - 8;
              uint64_t *v7 = v166;
              unint64_t v175 = *v8;
            }
            if (v177 == 2)
            {
              *(void *)(v166 - 8) += 24;
              int v176 = *(_DWORD *)(v22 - 4) - 1;
              *(_DWORD *)(v22 - 4) = v176;
              if (v176) {
                goto LABEL_388;
              }
              goto LABEL_348;
            }
            if (v177 == 1) {
              goto LABEL_462;
            }
          }
        case 29:
          unsigned int v71 = *(_DWORD *)v13;
          *size_t v281 = (uint64_t)&v13[v16];
          if (!v71)
          {
            sub_215E046DC(v275, 0);
            uint64_t v166 = *v7 - 8;
            uint64_t *v7 = v166;
            unint64_t v171 = *v8;
            uint64_t v22 = *v9;
            while (1)
            {
              while (1)
              {
                if (v171 == (void *)v22) {
                  goto LABEL_470;
                }
                int v173 = *(_DWORD *)(v22 - 8);
                if (v173) {
                  break;
                }
                *(void *)(v166 - 8) += 24;
                int v174 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v174;
                if (v174) {
                  goto LABEL_318;
                }
LABEL_338:
                uint64_t v22 = *v9 - 8;
                *uint64_t v9 = v22;
                uint64_t v166 = *v7 - 8;
                uint64_t *v7 = v166;
                unint64_t v171 = *v8;
              }
              if (v173 == 2)
              {
                *(void *)(v166 - 8) += 24;
                int v172 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v172;
                if (v172) {
                  goto LABEL_388;
                }
                goto LABEL_338;
              }
              if (v173 == 1) {
                goto LABEL_462;
              }
            }
          }
          uint64_t v72 = bswap32(v71);
          sub_215E04564(v8, 0, v72);
LABEL_119:
          sub_215E046DC(v275, v72);
LABEL_318:
          int v15 = 0;
          char v12 = 0;
          *(_DWORD *)(a1 + 32) = 0;
          size_t v11 = *(unsigned __int8 **)(a1 + 16);
          if (v11 == v14) {
            goto LABEL_473;
          }
          continue;
        case 30:
          unsigned int v163 = *(unsigned __int16 *)v13;
          *size_t v281 = (uint64_t)&v13[v16];
          if (v163)
          {
            uint64_t v38 = __rev16(v163);
            sub_215E04564(v8, 1u, v38);
            goto LABEL_317;
          }
          sub_215E04AD8(v275, 0);
          uint64_t v166 = *v7 - 8;
          uint64_t *v7 = v166;
          uint64_t v187 = *v8;
          uint64_t v22 = *v9;
          while (1)
          {
            while (1)
            {
              if (v187 == (void *)v22) {
                goto LABEL_470;
              }
              int v189 = *(_DWORD *)(v22 - 8);
              if (v189) {
                break;
              }
              *(void *)(v166 - 8) += 24;
              int v190 = *(_DWORD *)(v22 - 4) - 1;
              *(_DWORD *)(v22 - 4) = v190;
              if (v190) {
                goto LABEL_318;
              }
LABEL_380:
              uint64_t v22 = *v9 - 8;
              *uint64_t v9 = v22;
              uint64_t v166 = *v7 - 8;
              uint64_t *v7 = v166;
              uint64_t v187 = *v8;
            }
            if (v189 == 2)
            {
              *(void *)(v166 - 8) += 24;
              int v188 = *(_DWORD *)(v22 - 4) - 1;
              *(_DWORD *)(v22 - 4) = v188;
              if (v188) {
                goto LABEL_388;
              }
              goto LABEL_380;
            }
            if (v189 == 1) {
              goto LABEL_462;
            }
          }
        case 31:
          unsigned int v37 = *(_DWORD *)v13;
          *size_t v281 = (uint64_t)&v13[v16];
          if (v37)
          {
            uint64_t v38 = bswap32(v37);
            sub_215E04564(v8, 1u, v38);
LABEL_317:
            sub_215E04AD8(v275, v38);
            goto LABEL_318;
          }
          sub_215E04AD8(v275, 0);
          uint64_t v166 = *v7 - 8;
          uint64_t *v7 = v166;
          size_t v167 = *v8;
          uint64_t v22 = *v9;
          while (1)
          {
            while (1)
            {
              if (v167 == (void *)v22) {
                goto LABEL_470;
              }
              int v169 = *(_DWORD *)(v22 - 8);
              if (v169) {
                break;
              }
              *(void *)(v166 - 8) += 24;
              int v170 = *(_DWORD *)(v22 - 4) - 1;
              *(_DWORD *)(v22 - 4) = v170;
              if (v170) {
                goto LABEL_318;
              }
LABEL_328:
              uint64_t v22 = *v9 - 8;
              *uint64_t v9 = v22;
              uint64_t v166 = *v7 - 8;
              uint64_t *v7 = v166;
              size_t v167 = *v8;
            }
            if (v169 == 2)
            {
              *(void *)(v166 - 8) += 24;
              int v168 = *(_DWORD *)(v22 - 4) - 1;
              *(_DWORD *)(v22 - 4) = v168;
              if (v168) {
                goto LABEL_388;
              }
              goto LABEL_328;
            }
            if (v169 == 1) {
              goto LABEL_462;
            }
          }
        case 32:
          sub_215E03FD8((uint64_t)v275, v13, v16);
          uint64_t v20 = *v281 + 1;
          *size_t v281 = v20;
          int v155 = *v8;
          uint64_t v22 = *v9;
          if (*v8 == (void *)*v9) {
            goto LABEL_464;
          }
          while (2)
          {
            int v157 = *(_DWORD *)(v22 - 8);
            if (v157)
            {
              if (v157 == 2)
              {
                *(void *)(*v7 - 8) += 24;
                int v156 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v156;
                if (v156) {
                  goto LABEL_388;
                }
LABEL_296:
                uint64_t v22 = *v9 - 8;
                *uint64_t v9 = v22;
                *v7 -= 8;
                int v155 = *v8;
              }
              else if (v157 == 1)
              {
                goto LABEL_446;
              }
              if (v155 == (void *)v22) {
                goto LABEL_463;
              }
              continue;
            }
            break;
          }
          *(void *)(*v7 - 8) += 24;
          int v158 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v158;
          if (!v158) {
            goto LABEL_296;
          }
          goto LABEL_318;
        case 33:
          sub_215E04358((uint64_t)v275, v13, v16);
          uint64_t v20 = *v281 + 1;
          *size_t v281 = v20;
          int v159 = *v8;
          uint64_t v22 = *v9;
          if (*v8 == (void *)*v9) {
            goto LABEL_464;
          }
          while (2)
          {
            int v161 = *(_DWORD *)(v22 - 8);
            if (v161)
            {
              if (v161 == 2)
              {
                *(void *)(*v7 - 8) += 24;
                int v160 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v160;
                if (v160) {
                  goto LABEL_388;
                }
LABEL_307:
                uint64_t v22 = *v9 - 8;
                *uint64_t v9 = v22;
                *v7 -= 8;
                int v159 = *v8;
              }
              else if (v161 == 1)
              {
                goto LABEL_446;
              }
              if (v159 == (void *)v22) {
                goto LABEL_463;
              }
              continue;
            }
            break;
          }
          *(void *)(*v7 - 8) += 24;
          int v162 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v162;
          if (!v162) {
            goto LABEL_307;
          }
          goto LABEL_318;
        case 34:
          sub_215E041C0((uint64_t)v275, v13, v16);
          uint64_t v20 = *v281 + 1;
          *size_t v281 = v20;
          int v139 = *v8;
          uint64_t v22 = *v9;
          if (*v8 == (void *)*v9) {
            goto LABEL_464;
          }
          while (2)
          {
            int v141 = *(_DWORD *)(v22 - 8);
            if (!v141)
            {
              *(void *)(*v7 - 8) += 24;
              int v142 = *(_DWORD *)(v22 - 4) - 1;
              *(_DWORD *)(v22 - 4) = v142;
              if (v142) {
                goto LABEL_318;
              }
LABEL_259:
              uint64_t v22 = *v9 - 8;
              *uint64_t v9 = v22;
              *v7 -= 8;
              int v139 = *v8;
LABEL_260:
              if (v139 == (void *)v22) {
                goto LABEL_463;
              }
              continue;
            }
            break;
          }
          if (v141 != 2)
          {
            if (v141 == 1) {
              goto LABEL_446;
            }
            goto LABEL_260;
          }
          *(void *)(*v7 - 8) += 24;
          int v140 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v140;
          if (!v140) {
            goto LABEL_259;
          }
LABEL_388:
          int v15 = 0;
          char v12 = 0;
          *(_DWORD *)(v22 - 8) = 1;
          *(_DWORD *)(a1 + 32) = 0;
          size_t v11 = *(unsigned __int8 **)(a1 + 16);
          if (v11 == v14) {
            goto LABEL_473;
          }
          break;
        default:
          goto LABEL_536;
      }
    }
    uint64_t v17 = (char)*v11;
    uint64_t v18 = *v11;
    if ((v17 & 0x8000000000000000) == 0)
    {
      uint64_t v19 = *(void *)(*v7 - 8);
      *(_DWORD *)uint64_t v19 = 2;
      *(void *)(v19 + 8) = v18;
      uint64_t v20 = *v281 + 1;
      *size_t v281 = v20;
      int64_t v21 = *v8;
      uint64_t v22 = *v9;
      if (*v8 == (void *)*v9) {
        goto LABEL_464;
      }
      while (1)
      {
        int v24 = *(_DWORD *)(v22 - 8);
        if (!v24) {
          break;
        }
        if (v24 == 2)
        {
          *(void *)(*v7 - 8) += 24;
          int v23 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v23;
          if (v23) {
            goto LABEL_460;
          }
LABEL_11:
          uint64_t v22 = *v9 - 8;
          *uint64_t v9 = v22;
          *v7 -= 8;
          int64_t v21 = *v8;
          goto LABEL_12;
        }
        if (v24 == 1) {
          goto LABEL_446;
        }
LABEL_12:
        if (v21 == (void *)v22) {
          goto LABEL_463;
        }
      }
      *(void *)(*v7 - 8) += 24;
      int v25 = *(_DWORD *)(v22 - 4) - 1;
      *(_DWORD *)(v22 - 4) = v25;
      if (v25) {
        goto LABEL_318;
      }
      goto LABEL_11;
    }
    if (v17 >= 0xFFFFFFE0)
    {
      uint64_t v28 = *(void *)(*v7 - 8);
      *(_DWORD *)uint64_t v28 = 3;
      *(void *)(v28 + 8) = v17;
      uint64_t v20 = *v281 + 1;
      *size_t v281 = v20;
      char v29 = *v8;
      uint64_t v22 = *v9;
      if (*v8 == (void *)*v9) {
        goto LABEL_464;
      }
      while (1)
      {
        int v31 = *(_DWORD *)(v22 - 8);
        if (!v31) {
          break;
        }
        if (v31 == 2)
        {
          *(void *)(*v7 - 8) += 24;
          int v30 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v30;
          if (v30) {
            goto LABEL_460;
          }
LABEL_28:
          uint64_t v22 = *v9 - 8;
          *uint64_t v9 = v22;
          *v7 -= 8;
          char v29 = *v8;
          goto LABEL_29;
        }
        if (v31 == 1) {
          goto LABEL_446;
        }
LABEL_29:
        if (v29 == (void *)v22) {
          goto LABEL_463;
        }
      }
      *(void *)(*v7 - 8) += 24;
      int v32 = *(_DWORD *)(v22 - 4) - 1;
      *(_DWORD *)(v22 - 4) = v32;
      if (v32) {
        goto LABEL_318;
      }
      goto LABEL_28;
    }
    if (v18 >= 0xC4)
    {
      *(void *)(a1 + 24) = dword_215EF9BF8[(v18 - 196)];
      int v15 = *v11 & 0x1F;
LABEL_50:
      *(_DWORD *)(a1 + 32) = v15;
      goto LABEL_5;
    }
    if ((v18 & 0xE0) == 0xA0)
    {
      uint64_t v36 = v18 & 0x1F;
      *(void *)(a1 + 24) = v36;
      if (v36)
      {
        int v15 = 32;
        goto LABEL_50;
      }
      sub_215E03FD8((uint64_t)v275, v13, 0);
      uint64_t v20 = *v281 + 1;
      *size_t v281 = v20;
      size_t v191 = *v8;
      uint64_t v22 = *v9;
      if (*v8 == (void *)*v9)
      {
LABEL_464:
        unint64_t v217 = v20 - *v279;
        int v218 = 1;
        a2 = v276;
        *(void *)(a1 + 88) = v217;
        BOOL v219 = v217 > v4;
        unsigned int v220 = (unsigned __int8 *)(v217 - v4);
        if (!v219) {
          goto LABEL_479;
        }
        goto LABEL_478;
      }
      while (1)
      {
        int v193 = *(_DWORD *)(v22 - 8);
        if (!v193) {
          break;
        }
        if (v193 == 2)
        {
          *(void *)(*v7 - 8) += 24;
          int v192 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v192;
          if (v192) {
            goto LABEL_460;
          }
LABEL_393:
          uint64_t v22 = *v9 - 8;
          *uint64_t v9 = v22;
          *v7 -= 8;
          size_t v191 = *v8;
          goto LABEL_394;
        }
        if (v193 == 1) {
          goto LABEL_446;
        }
LABEL_394:
        if (v191 == (void *)v22) {
          goto LABEL_463;
        }
      }
      *(void *)(*v7 - 8) += 24;
      int v194 = *(_DWORD *)(v22 - 4) - 1;
      *(_DWORD *)(v22 - 4) = v194;
      if (v194) {
        goto LABEL_318;
      }
      goto LABEL_393;
    }
    if ((v17 & 0xFFFFFFF0) == 0xFFFFFF90)
    {
      *size_t v281 = (uint64_t)(v11 + 1);
      unsigned int v164 = v18 & 0xF;
      if ((v18 & 0xF) != 0)
      {
        sub_215E04564(v8, 0, v18 & 0xF);
        sub_215E046DC(v275, v164);
        goto LABEL_318;
      }
      sub_215E046DC(v275, 0);
      uint64_t v166 = *v7 - 8;
      uint64_t *v7 = v166;
      size_t v200 = *v8;
      uint64_t v22 = *v9;
      while (1)
      {
        while (1)
        {
          if (v200 == (void *)v22) {
            goto LABEL_470;
          }
          int v202 = *(_DWORD *)(v22 - 8);
          if (v202) {
            break;
          }
          *(void *)(v166 - 8) += 24;
          int v203 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v203;
          if (v203) {
            goto LABEL_318;
          }
LABEL_417:
          uint64_t v22 = *v9 - 8;
          *uint64_t v9 = v22;
          uint64_t v166 = *v7 - 8;
          uint64_t *v7 = v166;
          size_t v200 = *v8;
        }
        if (v202 == 2)
        {
          *(void *)(v166 - 8) += 24;
          int v201 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v201;
          if (v201) {
            goto LABEL_460;
          }
          goto LABEL_417;
        }
        if (v202 == 1) {
          goto LABEL_462;
        }
      }
    }
    if (v18 <= 0x8F)
    {
      *size_t v281 = (uint64_t)(v11 + 1);
      unsigned int v165 = v17 & 0xF;
      if ((v17 & 0xF) != 0)
      {
        sub_215E04564(v8, 1u, v17 & 0xF);
        sub_215E04AD8(v275, v165);
        goto LABEL_318;
      }
      sub_215E04AD8(v275, 0);
      uint64_t v166 = *v7 - 8;
      uint64_t *v7 = v166;
      size_t v204 = *v8;
      uint64_t v22 = *v9;
      while (1)
      {
        while (1)
        {
          if (v204 == (void *)v22)
          {
LABEL_470:
            unint64_t v222 = *v281 - *v279;
            int v218 = 1;
            a2 = v276;
            *(void *)(a1 + 88) = v222;
            BOOL v219 = v222 > v4;
            unsigned int v220 = (unsigned __int8 *)(v222 - v4);
            if (!v219) {
              goto LABEL_479;
            }
LABEL_478:
            *(void *)(a1 + 96) += v220;
            goto LABEL_479;
          }
          int v206 = *(_DWORD *)(v22 - 8);
          if (v206) {
            break;
          }
          *(void *)(v166 - 8) += 24;
          int v207 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v207;
          if (v207) {
            goto LABEL_318;
          }
LABEL_427:
          uint64_t v22 = *v9 - 8;
          *uint64_t v9 = v22;
          uint64_t v166 = *v7 - 8;
          uint64_t *v7 = v166;
          size_t v204 = *v8;
        }
        if (v206 == 2)
        {
          *(void *)(v166 - 8) += 24;
          int v205 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v205;
          if (v205) {
            goto LABEL_460;
          }
          goto LABEL_427;
        }
        if (v206 == 1) {
          goto LABEL_462;
        }
      }
    }
    if (v18 != 192)
    {
      if (v18 != 195)
      {
        if (v18 != 194)
        {
LABEL_536:
          *(void *)(a1 + 88) = &v11[-*(void *)(a1 + 8)];
          sub_215E0416C();
        }
        uint64_t v195 = *(void *)(*v7 - 8);
        *(_DWORD *)uint64_t v195 = 1;
        *(unsigned char *)(v195 + 8) = 0;
        uint64_t v20 = *v281 + 1;
        *size_t v281 = v20;
        size_t v196 = *v8;
        uint64_t v22 = *v9;
        if (*v8 == (void *)*v9) {
          goto LABEL_464;
        }
        while (1)
        {
          int v198 = *(_DWORD *)(v22 - 8);
          if (!v198) {
            break;
          }
          if (v198 == 2)
          {
            *(void *)(*v7 - 8) += 24;
            int v197 = *(_DWORD *)(v22 - 4) - 1;
            *(_DWORD *)(v22 - 4) = v197;
            if (v197) {
              goto LABEL_460;
            }
LABEL_407:
            uint64_t v22 = *v9 - 8;
            *uint64_t v9 = v22;
            *v7 -= 8;
            size_t v196 = *v8;
            goto LABEL_408;
          }
          if (v198 == 1) {
            goto LABEL_446;
          }
LABEL_408:
          if (v196 == (void *)v22) {
            goto LABEL_463;
          }
        }
        *(void *)(*v7 - 8) += 24;
        int v199 = *(_DWORD *)(v22 - 4) - 1;
        *(_DWORD *)(v22 - 4) = v199;
        if (v199) {
          goto LABEL_318;
        }
        goto LABEL_407;
      }
      uint64_t v208 = *(void *)(*v7 - 8);
      *(_DWORD *)uint64_t v208 = 1;
      *(unsigned char *)(v208 + 8) = 1;
      uint64_t v20 = *v281 + 1;
      *size_t v281 = v20;
      uint64_t v209 = *v8;
      uint64_t v22 = *v9;
      if (*v8 == (void *)*v9) {
        goto LABEL_464;
      }
      while (1)
      {
        int v211 = *(_DWORD *)(v22 - 8);
        if (!v211) {
          break;
        }
        if (v211 == 2)
        {
          *(void *)(*v7 - 8) += 24;
          int v210 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v210;
          if (v210) {
            goto LABEL_460;
          }
LABEL_438:
          uint64_t v22 = *v9 - 8;
          *uint64_t v9 = v22;
          *v7 -= 8;
          uint64_t v209 = *v8;
          goto LABEL_439;
        }
        if (v211 == 1) {
          goto LABEL_446;
        }
LABEL_439:
        if (v209 == (void *)v22) {
          goto LABEL_463;
        }
      }
      *(void *)(*v7 - 8) += 24;
      int v212 = *(_DWORD *)(v22 - 4) - 1;
      *(_DWORD *)(v22 - 4) = v212;
      if (v212) {
        goto LABEL_318;
      }
      goto LABEL_438;
    }
    uint64_t v166 = *v7;
    **(_DWORD **)(*v7 - 8) = 0;
    uint64_t v20 = (uint64_t)(v11 + 1);
    *size_t v281 = (uint64_t)(v11 + 1);
    char v213 = *v8;
    uint64_t v22 = *v9;
    if (*v8 == (void *)*v9) {
      goto LABEL_464;
    }
    while (1)
    {
      int v215 = *(_DWORD *)(v22 - 8);
      if (v215) {
        break;
      }
      *(void *)(v166 - 8) += 24;
      int v216 = *(_DWORD *)(v22 - 4) - 1;
      *(_DWORD *)(v22 - 4) = v216;
      if (v216) {
        goto LABEL_318;
      }
LABEL_452:
      uint64_t v22 = *v9 - 8;
      *uint64_t v9 = v22;
      uint64_t v166 = *v7 - 8;
      uint64_t *v7 = v166;
      char v213 = *v8;
LABEL_453:
      if (v213 == (void *)v22)
      {
LABEL_463:
        uint64_t v20 = *v281;
        goto LABEL_464;
      }
    }
    if (v215 == 2)
    {
      *(void *)(v166 - 8) += 24;
      int v214 = *(_DWORD *)(v22 - 4) - 1;
      *(_DWORD *)(v22 - 4) = v214;
      if (v214)
      {
LABEL_460:
        int v15 = 0;
        char v12 = 0;
        *(_DWORD *)(v22 - 8) = 1;
        *(_DWORD *)(a1 + 32) = 0;
        size_t v11 = *(unsigned __int8 **)(a1 + 16);
        if (v11 == v14) {
          break;
        }
        goto LABEL_3;
      }
      goto LABEL_452;
    }
    if (v215 != 1) {
      goto LABEL_453;
    }
LABEL_462:
    int v15 = 0;
    char v12 = 0;
LABEL_447:
    *(void *)(v166 - 8) += 24;
    *(_DWORD *)(v22 - 8) = 2;
    *(_DWORD *)(a1 + 32) = 0;
    size_t v11 = *(unsigned __int8 **)(a1 + 16);
  }
  while (v11 != v14);
LABEL_473:
  int v218 = 0;
  uint64_t v223 = &v14[-*v279];
  a2 = v276;
  *(void *)(a1 + 88) = v223;
  BOOL v219 = (unint64_t)v223 > v4;
  unsigned int v220 = &v223[-v4];
  if (v219) {
    goto LABEL_478;
  }
LABEL_479:
  while (!v218)
  {
    unsigned int v230 = *(void **)(a2 + 24);
    *(void *)(a2 + 24) = 0;
    if (v230)
    {
      for (uint64_t i = (char *)v230[4]; i != (char *)v230[6]; i -= 16)
      {
        std::string::size_type v233 = (void (*)(uint64_t))*((void *)i - 2);
        uint64_t v232 = *((void *)i - 1);
        v233(v232);
      }
      free(i);
      std::runtime_error v234 = (void *)v230[3];
      if (v234)
      {
        do
        {
          uint64_t v235 = (void *)*v234;
          free(v234);
          std::runtime_error v234 = v235;
        }
        while (v235);
      }
      free(v230);
    }
    *(_DWORD *)a2 = 0;
    sub_215E01854((void *)a1, (uint64_t)"RefillBuffer", (const char *)&unk_215E96AD9);
    if (*(void *)(a1 + 264) >= 0x400uLL) {
      unint64_t v265 = 1024;
    }
    else {
      unint64_t v265 = *(void *)(a1 + 264);
    }
    if (*(void *)(a1 + 80) < v265) {
      sub_215E01500((uint64_t)v279, v265);
    }
    std::istream::read();
    uint64_t v266 = *(void *)(*(void *)a1 + 8);
    unint64_t v5 = *(void *)(a1 + 72) + v266;
    uint64_t v267 = *(void *)(a1 + 80) - v266;
    *(void *)(a1 + 72) = v5;
    *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v267;
    unint64_t v4 = *(void *)(a1 + 88);
    unint64_t v6 = *(void *)(a1 + 96) + v5 - v4;
    uint64_t v9 = v277;
    unint64_t v8 = v278;
    uint64_t v10 = *(void *)(a1 + 64);
    size_t v11 = (unsigned __int8 *)(v10 + v4);
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v10 + v4;
    if (v4 != v5) {
      goto LABEL_2;
    }
LABEL_476:
    int v218 = 0;
    *(void *)(a1 + 88) = v5;
    BOOL v219 = v5 > v4;
    unsigned int v220 = (unsigned __int8 *)(v5 - v4);
    if (v219) {
      goto LABEL_478;
    }
  }
  std::string::size_type v224 = *(void **)(a1 + 248);
  uint64_t v225 = (void (**)(void *))v224[6];
  if (v225)
  {
    if (*(unsigned char *)(a1 + 240))
    {
      std::string v226 = *(atomic_uint **)(a1 + 64);
      size_t v227 = (void (**)(void *))v224[4];
      if (v227 == (void (**)(void *))v224[5])
      {
        unint64_t v236 = v6;
        int64_t v238 = (char *)v227 - (char *)v225;
        BOOL v237 = v227 == v225;
        uint64_t v239 = v227 - v225;
        if (v237) {
          uint64_t v240 = 4;
        }
        else {
          uint64_t v240 = v239;
        }
        size_t v241 = (char *)malloc_type_realloc(v225, 16 * v240, 0x80040803F642BuLL);
        if (!v241)
        {
          exceptiounint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          uint64_t v270 = std::bad_alloc::bad_alloc(exception);
          __cxa_throw(v270, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
        }
        v224[5] = &v241[16 * v240];
        v224[6] = v241;
        size_t v227 = (void (**)(void *))&v241[v238];
        *(void *)&v241[v238] = sub_215E014E8;
        std::string v228 = (atomic_uint **)&v241[v238 + 8];
        std::string v229 = *(atomic_uint **)(a1 + 64);
        unint64_t v6 = v236;
      }
      else
      {
        *size_t v227 = sub_215E014E8;
        std::string v228 = (atomic_uint **)(v227 + 1);
        std::string v229 = v226;
      }
      *std::string v228 = v226;
      v224[4] = v227 + 2;
      *(unsigned char *)(a1 + 24std::__fs::filesystem::__rename(__from, __to, 0) = 0;
      atomic_fetch_add(v229, 1u);
      a2 = v276;
    }
    BOOL v242 = malloc_type_malloc(0x38uLL, 0x2A498C84uLL);
    size_t v243 = v242;
    if (!v242)
    {
      uint64_t v273 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      char v274 = std::bad_alloc::bad_alloc(v273);
      __cxa_throw(v274, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    *BOOL v242 = 0x2000;
    unint64_t v244 = malloc_type_malloc(0x2008uLL, 0x1DB03DE0uLL);
    if (!v244)
    {
      unint64_t v271 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      char v272 = std::bad_alloc::bad_alloc(v271);
      __cxa_throw(v272, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    v243[3] = v244;
    *unint64_t v244 = 0;
    v243[1] = 0x2000;
    v243[2] = v244 + 1;
    v243[4] = 0;
    v243[5] = 0;
    v243[6] = 0;
    uint64_t v245 = *(void *)(a1 + 248);
    *(void *)(a1 + 232) = v243;
    *(void *)(a1 + 248) = v243;
    *(void *)(a1 + 256) = v243;
    uint64_t v246 = *(void **)(a2 + 24);
    *(void *)(a2 + 24) = v245;
    if (v246)
    {
      for (uint64_t j = (char *)v246[4]; j != (char *)v246[6]; j -= 16)
      {
        uint64_t v249 = (void (*)(uint64_t))*((void *)j - 2);
        uint64_t v248 = *((void *)j - 1);
        v249(v248);
      }
      free(j);
      std::string::size_type v250 = (void *)v246[3];
      if (v250)
      {
        do
        {
          int v251 = (void *)*v250;
          free(v250);
          std::string::size_type v250 = v251;
        }
        while (v251);
      }
      free(v246);
    }
  }
  *(_OWORD *)a2 = *(_OWORD *)v280;
  *(void *)(a2 + 16) = *(void *)(v280 + 16);
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = *(void *)(a1 + 40);
  __int16 v252 = *(void **)(a1 + 208);
  size_t v253 = *(unsigned char **)(a1 + 216);
  uint64_t v254 = v253 - (unsigned char *)v252;
  if (v253 != (unsigned char *)v252)
  {
    if ((unint64_t)v254 >= 9)
    {
      uint64_t *v7 = (uint64_t)(v252 + 1);
      *(_DWORD *)(a1 + 184) = 0;
      *__int16 v252 = v280;
      *(void *)(a1 + 96) = 0;
      goto LABEL_532;
    }
LABEL_520:
    *(_DWORD *)(a1 + 184) = 0;
    *__int16 v252 = v280;
    *(void *)(a1 + 96) = 0;
    goto LABEL_532;
  }
  uint64_t v255 = v254 >> 3;
  unint64_t v256 = 1 - (v254 >> 3);
  uint64_t v257 = *(void *)(a1 + 224);
  if (v256 > (v257 - (uint64_t)v253) >> 3)
  {
    unint64_t v258 = v6;
    uint64_t v259 = v257 - (void)v252;
    uint64_t v260 = v259 >> 2;
    if ((unint64_t)(v259 >> 2) <= 1) {
      uint64_t v260 = 1;
    }
    if ((unint64_t)v259 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v261 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v261 = v260;
    }
    if (v261 >> 61) {
      sub_215738AD8();
    }
    v262 = (char *)operator new(8 * v261);
    size_t v263 = 8 * v256;
    int v264 = &v262[8 * v255];
    bzero(v264, v263);
    *(void *)(a1 + 208) = v264;
    *(void *)(a1 + 216) = &v264[v263];
    *(void *)(a1 + 224) = &v262[8 * v261];
    unint64_t v6 = v258;
    if (v253) {
      operator delete(v253);
    }
    __int16 v252 = *(void **)(a1 + 208);
    goto LABEL_520;
  }
  if (v254 != 8)
  {
    bzero(*(void **)(a1 + 216), 8 * v256);
    v253 += 8 * v256;
  }
  uint64_t *v7 = (uint64_t)v253;
  uint64_t v268 = *(void **)(a1 + 208);
  *(_DWORD *)(a1 + 184) = 0;
  void *v268 = v280;
  *(void *)(a1 + 96) = 0;
LABEL_532:
  *(void *)(a1 + 280) += v6 + *(void *)(a1 + 88) - (*(void *)(a1 + 96) + *(void *)(a1 + 72));
}

void sub_215E03E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void sub_215E03EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void sub_215E03EC0(_Unwind_Exception *a1)
{
  sub_215E03F58(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215E03F58(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2)
  {
    for (uint64_t i = (char *)v2[4]; i != (char *)v2[6]; i -= 16)
    {
      unint64_t v5 = (void (*)(uint64_t))*((void *)i - 2);
      uint64_t v4 = *((void *)i - 1);
      v5(v4);
    }
    free(i);
    unint64_t v6 = (void *)v2[3];
    if (v6)
    {
      do
      {
        uint64_t v7 = (void *)*v6;
        free(v6);
        unint64_t v6 = v7;
      }
      while (v7);
    }
    free(v2);
  }
  return a1;
}

void *sub_215E03FD8(uint64_t a1, const void *a2, unsigned int a3)
{
  size_t v3 = a3;
  if (*(void *)(a1 + 32) < (unint64_t)a3)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_215E044EC(exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C685EC0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  uint64_t v7 = *(void *)(*(void *)(a1 + 96) - 8);
  *(_DWORD *)uint64_t v7 = 5;
  if (*(void *)a1
    && (uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void, void))a1)(5, a3, *(void *)(a1 + 8)),
        result))
  {
    *(void *)(v7 + 16) = a2;
    *(unsigned char *)(a1 + 12std::__fs::filesystem::__rename(__from, __to, 0) = 1;
  }
  else
  {
    uint64_t v9 = *(size_t **)(a1 + 112);
    unint64_t v11 = v9[1];
    size_t v10 = v9[2];
    char v12 = (char *)((v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    BOOL v13 = &v12[v3 - v10];
    BOOL v14 = v11 >= (unint64_t)v13;
    unint64_t v15 = v11 - (void)v13;
    if (v14)
    {
      v9[1] = v15;
      unsigned char v9[2] = (size_t)&v12[v3];
    }
    else
    {
      size_t v16 = v3 + 7;
      size_t v17 = *v9;
      while (v17 < v16)
      {
        BOOL v18 = (uint64_t)v17 <= 0;
        v17 *= 2;
        if (v18)
        {
          size_t v17 = v3 + 7;
          break;
        }
      }
      uint64_t v19 = malloc_type_malloc(v17 + 8, 0xB5DF8709uLL);
      if (!v19)
      {
        int64_t v21 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        uint64_t v22 = std::bad_alloc::bad_alloc(v21);
        __cxa_throw(v22, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
      }
      *uint64_t v19 = v9[3];
      v9[1] = v17 - v16;
      unsigned char v9[2] = (size_t)v19 + v16 + 8;
      v9[3] = (size_t)v19;
      char v12 = (char *)((unint64_t)(v19 + 1) & 0xFFFFFFFFFFFFFFF8);
    }
    uint64_t result = memcpy(v12, a2, v3);
    *(void *)(v7 + 16) = v12;
  }
  *(_DWORD *)(v7 + 8) = a3;
  return result;
}

void sub_215E04158(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215E0416C()
{
  exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  sub_215E04E5C(exception);
  __cxa_throw(exception, (struct type_info *)&unk_26C685FC0, (void (*)(void *))std::runtime_error::~runtime_error);
}

void sub_215E041AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215E041C0(uint64_t a1, const void *a2, unsigned int a3)
{
  size_t v3 = a3;
  if (*(void *)(a1 + 48) < (unint64_t)a3)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_215E04ED4(exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C686000, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  uint64_t v7 = *(void *)(*(void *)(a1 + 96) - 8);
  *(_DWORD *)uint64_t v7 = 9;
  if (*(void *)a1
    && (uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void, void))a1)(9, a3, *(void *)(a1 + 8)),
        result))
  {
    *(void *)(v7 + 16) = a2;
    *(unsigned char *)(a1 + 12std::__fs::filesystem::__rename(__from, __to, 0) = 1;
  }
  else
  {
    uint64_t v9 = *(size_t **)(a1 + 112);
    unint64_t v11 = v9[1];
    size_t v10 = v9[2];
    char v12 = (char *)((v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    BOOL v13 = &v12[v3 - v10];
    BOOL v14 = v11 >= (unint64_t)v13;
    unint64_t v15 = v11 - (void)v13;
    if (v14)
    {
      v9[1] = v15;
      unsigned char v9[2] = (size_t)&v12[v3];
    }
    else
    {
      size_t v16 = v3 + 7;
      size_t v17 = *v9;
      while (v17 < v16)
      {
        BOOL v18 = (uint64_t)v17 <= 0;
        v17 *= 2;
        if (v18)
        {
          size_t v17 = v3 + 7;
          break;
        }
      }
      uint64_t v19 = malloc_type_malloc(v17 + 8, 0xB5DF8709uLL);
      if (!v19)
      {
        int64_t v21 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        uint64_t v22 = std::bad_alloc::bad_alloc(v21);
        __cxa_throw(v22, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
      }
      *uint64_t v19 = v9[3];
      v9[1] = v17 - v16;
      unsigned char v9[2] = (size_t)v19 + v16 + 8;
      v9[3] = (size_t)v19;
      char v12 = (char *)((unint64_t)(v19 + 1) & 0xFFFFFFFFFFFFFFF8);
    }
    uint64_t result = memcpy(v12, a2, v3);
    *(void *)(v7 + 16) = v12;
  }
  *(_DWORD *)(v7 + 8) = a3 - 1;
  return result;
}

void sub_215E04344(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215E04358(uint64_t a1, const void *a2, unsigned int a3)
{
  size_t v3 = a3;
  if (*(void *)(a1 + 40) < (unint64_t)a3)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_215E04F4C(exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C686040, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  uint64_t v7 = *(void *)(*(void *)(a1 + 96) - 8);
  *(_DWORD *)uint64_t v7 = 8;
  if (*(void *)a1
    && (uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void, void))a1)(8, a3, *(void *)(a1 + 8)),
        result))
  {
    *(void *)(v7 + 16) = a2;
    *(unsigned char *)(a1 + 12std::__fs::filesystem::__rename(__from, __to, 0) = 1;
  }
  else
  {
    uint64_t v9 = *(size_t **)(a1 + 112);
    unint64_t v11 = v9[1];
    size_t v10 = v9[2];
    char v12 = (char *)((v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    BOOL v13 = &v12[v3 - v10];
    BOOL v14 = v11 >= (unint64_t)v13;
    unint64_t v15 = v11 - (void)v13;
    if (v14)
    {
      v9[1] = v15;
      unsigned char v9[2] = (size_t)&v12[v3];
    }
    else
    {
      size_t v16 = v3 + 7;
      size_t v17 = *v9;
      while (v17 < v16)
      {
        BOOL v18 = (uint64_t)v17 <= 0;
        v17 *= 2;
        if (v18)
        {
          size_t v17 = v3 + 7;
          break;
        }
      }
      uint64_t v19 = malloc_type_malloc(v17 + 8, 0xB5DF8709uLL);
      if (!v19)
      {
        int64_t v21 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        uint64_t v22 = std::bad_alloc::bad_alloc(v21);
        __cxa_throw(v22, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
      }
      *uint64_t v19 = v9[3];
      v9[1] = v17 - v16;
      unsigned char v9[2] = (size_t)v19 + v16 + 8;
      v9[3] = (size_t)v19;
      char v12 = (char *)((unint64_t)(v19 + 1) & 0xFFFFFFFFFFFFFFF8);
    }
    uint64_t result = memcpy(v12, a2, v3);
    *(void *)(v7 + 16) = v12;
  }
  *(_DWORD *)(v7 + 8) = a3;
  return result;
}

void sub_215E044D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_215E044EC(std::runtime_error *a1)
{
  uint64_t result = std::runtime_error::runtime_error(a1, "str size overflow");
  result->__vftable = (std::runtime_error_vtbl *)&unk_26C685EE8;
  return result;
}

void sub_215E0452C(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215E04564(void **a1, unsigned int a2, uint64_t a3)
{
  uint64_t v7 = (unint64_t *)a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  unint64_t v8 = (char *)v7;
  if ((unint64_t)v7 >= v6)
  {
    size_t v10 = (char *)*a1;
    uint64_t v11 = (char *)v7 - (unsigned char *)*a1;
    uint64_t v12 = v11 >> 3;
    unint64_t v13 = (v11 >> 3) + 1;
    if (v13 >> 61) {
      sub_215738AC0();
    }
    uint64_t v14 = v6 - (void)v10;
    if (v14 >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 61) {
        sub_215738AD8();
      }
      size_t v16 = operator new(8 * v15);
    }
    else
    {
      size_t v16 = 0;
    }
    size_t v17 = (unint64_t *)&v16[8 * v12];
    unint64_t *v17 = a2 | (unint64_t)(a3 << 32);
    uint64_t v9 = v17 + 1;
    if (v7 != (unint64_t *)v10)
    {
      unint64_t v18 = (char *)v7 - v10 - 8;
      if (v18 < 0x58) {
        goto LABEL_28;
      }
      if ((unint64_t)((char *)v7 - v16 - v11) < 0x20) {
        goto LABEL_28;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v8 = (char *)&v7[v20 / 0xFFFFFFFFFFFFFFF8];
      size_t v17 = (unint64_t *)((char *)v17 - v20);
      int64_t v21 = &v16[8 * v12 - 16];
      uint64_t v22 = (long long *)(v7 - 2);
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *int64_t v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          unint64_t v25 = *((void *)v8 - 1);
          v8 -= 8;
          *--size_t v17 = v25;
        }
        while (v8 != v10);
      }
      unint64_t v8 = (char *)*a1;
    }
    *a1 = v17;
    a1[1] = v9;
    a1[2] = &v16[8 * v15];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    unint64_t *v7 = a2 | (unint64_t)(a3 << 32);
    uint64_t v9 = v7 + 1;
  }
  a1[1] = v9;
}

void sub_215E046DC(void *a1, unsigned int a2)
{
  if (a1[2] < (unint64_t)a2)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_215E049E8(exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C685F00, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  uint64_t v3 = a1[12];
  if (a1[7] < (unint64_t)((v3 - a1[11]) >> 3))
  {
    char v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_215E04A28(v39);
    __cxa_throw(v39, (struct type_info *)&unk_26C685F18, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  uint64_t v4 = *(void *)(v3 - 8);
  *(_DWORD *)uint64_t v4 = 6;
  *(_DWORD *)(v4 + 8) = a2;
  if (!a2)
  {
    unint64_t v9 = 0;
    *(void *)(v4 + 16) = 0;
    unint64_t v18 = (unint64_t *)a1[12];
    unint64_t v17 = a1[13];
    if ((unint64_t)v18 >= v17) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  unint64_t v5 = (uint64_t *)a1[14];
  uint64_t v6 = 24 * a2;
  unint64_t v8 = v5[1];
  uint64_t v7 = v5[2];
  unint64_t v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = v9 - v7 + v6;
  BOOL v11 = v8 >= v10;
  uint64_t v12 = v8 - v10;
  if (v11)
  {
    v5[1] = v12;
    v5[2] = v9 + v6;
    *(void *)(v4 + 16) = v9;
    unint64_t v18 = (unint64_t *)a1[12];
    unint64_t v17 = a1[13];
    if ((unint64_t)v18 >= v17) {
      goto LABEL_16;
    }
LABEL_14:
    *unint64_t v18 = v9;
    uint64_t v19 = (uint64_t)(v18 + 1);
    goto LABEL_36;
  }
  unint64_t v13 = v6 | 7;
  uint64_t v14 = *v5;
  while (v14 < v13)
  {
    BOOL v15 = v14 <= 0;
    v14 *= 2;
    if (v15)
    {
      uint64_t v14 = v6 | 7;
      break;
    }
  }
  size_t v16 = malloc_type_malloc(v14 + 8, 0xB5DF8709uLL);
  if (!v16)
  {
    int v40 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    int v41 = std::bad_alloc::bad_alloc(v40);
    __cxa_throw(v41, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  *size_t v16 = v5[3];
  v5[1] = v14 - v13;
  v5[2] = (uint64_t)v16 + v13 + 8;
  void v5[3] = (uint64_t)v16;
  unint64_t v9 = (unint64_t)(v16 + 1) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v4 + 16) = v9;
  unint64_t v18 = (unint64_t *)a1[12];
  unint64_t v17 = a1[13];
  if ((unint64_t)v18 < v17) {
    goto LABEL_14;
  }
LABEL_16:
  uint64_t v20 = (char *)a1[11];
  uint64_t v21 = ((char *)v18 - v20) >> 3;
  unint64_t v22 = v21 + 1;
  if ((unint64_t)(v21 + 1) >> 61) {
    sub_215738AC0();
  }
  uint64_t v23 = v17 - (void)v20;
  if (v23 >> 2 > v22) {
    unint64_t v22 = v23 >> 2;
  }
  if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v24 = v22;
  }
  if (v24)
  {
    if (v24 >> 61) {
      sub_215738AD8();
    }
    unint64_t v25 = (char *)operator new(8 * v24);
    uint64_t v26 = (unint64_t *)&v25[8 * v21];
    uint64_t v27 = &v25[8 * v24];
    *uint64_t v26 = v9;
    uint64_t v19 = (uint64_t)(v26 + 1);
    uint64_t v28 = (char *)((char *)v18 - v20);
    if (v18 == (unint64_t *)v20) {
      goto LABEL_34;
    }
    goto LABEL_27;
  }
  unint64_t v25 = 0;
  uint64_t v26 = (unint64_t *)(8 * v21);
  uint64_t v27 = 0;
  *(void *)(8 * v21) = v9;
  uint64_t v19 = 8 * v21 + 8;
  uint64_t v28 = (char *)((char *)v18 - v20);
  if (v18 != (unint64_t *)v20)
  {
LABEL_27:
    unint64_t v29 = (unint64_t)(v28 - 8);
    if (v29 < 0x58) {
      goto LABEL_44;
    }
    if ((unint64_t)(v20 - v25) < 0x20) {
      goto LABEL_44;
    }
    uint64_t v30 = (v29 >> 3) + 1;
    uint64_t v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
    int v32 = &v18[v31 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v26 = (unint64_t *)((char *)v26 - v31);
    int v33 = &v25[8 * v21 - 16];
    int v34 = v18 - 2;
    uint64_t v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v36 = *(_OWORD *)v34;
      *((_OWORD *)v33 - 1) = *((_OWORD *)v34 - 1);
      *(_OWORD *)int v33 = v36;
      v33 -= 32;
      v34 -= 4;
      v35 -= 4;
    }
    while (v35);
    unint64_t v18 = v32;
    if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_44:
      do
      {
        unint64_t v37 = *--v18;
        *--uint64_t v26 = v37;
      }
      while (v18 != (unint64_t *)v20);
    }
    unint64_t v18 = (unint64_t *)a1[11];
  }
LABEL_34:
  a1[11] = v26;
  a1[12] = v19;
  a1[13] = v27;
  if (v18) {
    operator delete(v18);
  }
LABEL_36:
  a1[12] = v19;
}

void sub_215E049C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215E049D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_215E049E8(std::runtime_error *a1)
{
  uint64_t result = std::runtime_error::runtime_error(a1, "array size overflow");
  result->__vftable = (std::runtime_error_vtbl *)&unk_26C685F40;
  return result;
}

std::runtime_error *sub_215E04A28(std::runtime_error *a1)
{
  uint64_t result = std::runtime_error::runtime_error(a1, "depth size overflow");
  result->__vftable = (std::runtime_error_vtbl *)&unk_26C685F68;
  return result;
}

void sub_215E04A68(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215E04AA0(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215E04AD8(void *a1, unsigned int a2)
{
  if (a1[3] < (unint64_t)a2)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_215E04DE4(exception);
    __cxa_throw(exception, (struct type_info *)&unk_26C685F80, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  uint64_t v3 = a1[12];
  if (a1[7] < (unint64_t)((v3 - a1[11]) >> 3))
  {
    char v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_215E04A28(v39);
    __cxa_throw(v39, (struct type_info *)&unk_26C685F18, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  uint64_t v4 = *(void *)(v3 - 8);
  *(_DWORD *)uint64_t v4 = 7;
  *(_DWORD *)(v4 + 8) = a2;
  if (!a2)
  {
    unint64_t v9 = 0;
    *(void *)(v4 + 16) = 0;
    unint64_t v18 = (unint64_t *)a1[12];
    unint64_t v17 = a1[13];
    if ((unint64_t)v18 >= v17) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  unint64_t v5 = (uint64_t *)a1[14];
  uint64_t v6 = 48 * a2;
  unint64_t v8 = v5[1];
  uint64_t v7 = v5[2];
  unint64_t v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = v9 - v7 + v6;
  BOOL v11 = v8 >= v10;
  uint64_t v12 = v8 - v10;
  if (v11)
  {
    v5[1] = v12;
    v5[2] = v9 + v6;
    *(void *)(v4 + 16) = v9;
    unint64_t v18 = (unint64_t *)a1[12];
    unint64_t v17 = a1[13];
    if ((unint64_t)v18 >= v17) {
      goto LABEL_16;
    }
LABEL_14:
    *unint64_t v18 = v9;
    uint64_t v19 = (uint64_t)(v18 + 1);
    goto LABEL_36;
  }
  unint64_t v13 = v6 | 7;
  uint64_t v14 = *v5;
  while (v14 < v13)
  {
    BOOL v15 = v14 <= 0;
    v14 *= 2;
    if (v15)
    {
      uint64_t v14 = v6 | 7;
      break;
    }
  }
  size_t v16 = malloc_type_malloc(v14 + 8, 0xB5DF8709uLL);
  if (!v16)
  {
    int v40 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    int v41 = std::bad_alloc::bad_alloc(v40);
    __cxa_throw(v41, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  *size_t v16 = v5[3];
  v5[1] = v14 - v13;
  v5[2] = (uint64_t)v16 + v13 + 8;
  void v5[3] = (uint64_t)v16;
  unint64_t v9 = (unint64_t)(v16 + 1) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v4 + 16) = v9;
  unint64_t v18 = (unint64_t *)a1[12];
  unint64_t v17 = a1[13];
  if ((unint64_t)v18 < v17) {
    goto LABEL_14;
  }
LABEL_16:
  uint64_t v20 = (char *)a1[11];
  uint64_t v21 = ((char *)v18 - v20) >> 3;
  unint64_t v22 = v21 + 1;
  if ((unint64_t)(v21 + 1) >> 61) {
    sub_215738AC0();
  }
  uint64_t v23 = v17 - (void)v20;
  if (v23 >> 2 > v22) {
    unint64_t v22 = v23 >> 2;
  }
  if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v24 = v22;
  }
  if (v24)
  {
    if (v24 >> 61) {
      sub_215738AD8();
    }
    unint64_t v25 = (char *)operator new(8 * v24);
    uint64_t v26 = (unint64_t *)&v25[8 * v21];
    uint64_t v27 = &v25[8 * v24];
    *uint64_t v26 = v9;
    uint64_t v19 = (uint64_t)(v26 + 1);
    uint64_t v28 = (char *)((char *)v18 - v20);
    if (v18 == (unint64_t *)v20) {
      goto LABEL_34;
    }
    goto LABEL_27;
  }
  unint64_t v25 = 0;
  uint64_t v26 = (unint64_t *)(8 * v21);
  uint64_t v27 = 0;
  *(void *)(8 * v21) = v9;
  uint64_t v19 = 8 * v21 + 8;
  uint64_t v28 = (char *)((char *)v18 - v20);
  if (v18 != (unint64_t *)v20)
  {
LABEL_27:
    unint64_t v29 = (unint64_t)(v28 - 8);
    if (v29 < 0x58) {
      goto LABEL_44;
    }
    if ((unint64_t)(v20 - v25) < 0x20) {
      goto LABEL_44;
    }
    uint64_t v30 = (v29 >> 3) + 1;
    uint64_t v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
    int v32 = &v18[v31 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v26 = (unint64_t *)((char *)v26 - v31);
    int v33 = &v25[8 * v21 - 16];
    int v34 = v18 - 2;
    uint64_t v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v36 = *(_OWORD *)v34;
      *((_OWORD *)v33 - 1) = *((_OWORD *)v34 - 1);
      *(_OWORD *)int v33 = v36;
      v33 -= 32;
      v34 -= 4;
      v35 -= 4;
    }
    while (v35);
    unint64_t v18 = v32;
    if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_44:
      do
      {
        unint64_t v37 = *--v18;
        *--uint64_t v26 = v37;
      }
      while (v18 != (unint64_t *)v20);
    }
    unint64_t v18 = (unint64_t *)a1[11];
  }
LABEL_34:
  a1[11] = v26;
  a1[12] = v19;
  a1[13] = v27;
  if (v18) {
    operator delete(v18);
  }
LABEL_36:
  a1[12] = v19;
}

void sub_215E04DBC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215E04DD0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_215E04DE4(std::runtime_error *a1)
{
  uint64_t result = std::runtime_error::runtime_error(a1, "map size overflow");
  result->__vftable = (std::runtime_error_vtbl *)&unk_26C685FA8;
  return result;
}

void sub_215E04E24(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  JUMPOUT(0x2166C4D20);
}

std::runtime_error *sub_215E04E5C(std::runtime_error *a1)
{
  uint64_t result = std::runtime_error::runtime_error(a1, "parse error");
  result->__vftable = (std::runtime_error_vtbl *)&unk_26C685FE8;
  return result;
}

void sub_215E04E9C(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  JUMPOUT(0x2166C4D20);
}

std::runtime_error *sub_215E04ED4(std::runtime_error *a1)
{
  uint64_t result = std::runtime_error::runtime_error(a1, "ext size overflow");
  result->__vftable = (std::runtime_error_vtbl *)&unk_26C686028;
  return result;
}

void sub_215E04F14(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  JUMPOUT(0x2166C4D20);
}

std::runtime_error *sub_215E04F4C(std::runtime_error *a1)
{
  uint64_t result = std::runtime_error::runtime_error(a1, "bin size overflow");
  result->__vftable = (std::runtime_error_vtbl *)&unk_26C686068;
  return result;
}

void sub_215E04F8C(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t **sub_215E04FC4(uint64_t a1, uint64_t **a2, unsigned int *a3)
{
  unsigned int v5 = *a3;
  if (*a3 > 0xFF)
  {
    if (HIWORD(v5))
    {
      uint64_t v6 = *a2;
      uint64_t v20 = (*a2)[2];
      uint64_t v21 = **a2;
      if ((unint64_t)(v20 - v21) >= 5)
      {
        unint64_t v24 = (char *)v6[1];
      }
      else
      {
        if (v20) {
          size_t v22 = 2 * v20;
        }
        else {
          size_t v22 = 0x2000;
        }
        size_t v23 = v21 + 5;
        while (v22 < v23)
        {
          BOOL v11 = (uint64_t)v22 <= 0;
          v22 *= 2;
          if (v11)
          {
            size_t v22 = v23;
            break;
          }
        }
        unint64_t v24 = (char *)malloc_type_realloc((void *)v6[1], v22, 0xAD6A59EEuLL);
        if (!v24) {
          goto LABEL_55;
        }
        v6[1] = (uint64_t)v24;
        _OWORD v6[2] = v22;
        uint64_t v21 = *v6;
      }
      uint64_t v26 = &v24[v21];
      *uint64_t v26 = -58;
      *(_DWORD *)(v26 + 1) = bswap32(v5);
      uint64_t v19 = 5;
    }
    else
    {
      uint64_t v6 = *a2;
      uint64_t v13 = (*a2)[2];
      uint64_t v14 = **a2;
      if ((unint64_t)(v13 - v14) >= 3)
      {
        unint64_t v17 = (char *)v6[1];
      }
      else
      {
        if (v13) {
          size_t v15 = 2 * v13;
        }
        else {
          size_t v15 = 0x2000;
        }
        size_t v16 = v14 + 3;
        while (v15 < v16)
        {
          BOOL v11 = (uint64_t)v15 <= 0;
          v15 *= 2;
          if (v11)
          {
            size_t v15 = v16;
            break;
          }
        }
        unint64_t v17 = (char *)malloc_type_realloc((void *)v6[1], v15, 0xAD6A59EEuLL);
        if (!v17) {
          goto LABEL_55;
        }
        v6[1] = (uint64_t)v17;
        _OWORD v6[2] = v15;
        uint64_t v14 = *v6;
      }
      unint64_t v25 = &v17[v14];
      *unint64_t v25 = -59;
      *(_WORD *)(v25 + 1) = bswap32(v5) >> 16;
      uint64_t v19 = 3;
    }
  }
  else
  {
    uint64_t v6 = *a2;
    uint64_t v7 = (*a2)[2];
    uint64_t v8 = **a2;
    if ((unint64_t)(v7 - v8) >= 2)
    {
      uint64_t v12 = (char *)v6[1];
    }
    else
    {
      if (v7) {
        size_t v9 = 2 * v7;
      }
      else {
        size_t v9 = 0x2000;
      }
      size_t v10 = v8 + 2;
      while (v9 < v10)
      {
        BOOL v11 = (uint64_t)v9 <= 0;
        v9 *= 2;
        if (v11)
        {
          size_t v9 = v10;
          break;
        }
      }
      uint64_t v12 = (char *)malloc_type_realloc((void *)v6[1], v9, 0xAD6A59EEuLL);
      if (!v12) {
        goto LABEL_55;
      }
      v6[1] = (uint64_t)v12;
      _OWORD v6[2] = v9;
      uint64_t v8 = *v6;
    }
    unint64_t v18 = &v12[v8];
    *unint64_t v18 = -60;
    v18[1] = v5;
    uint64_t v19 = 2;
  }
  *v6 += v19;
  uint64_t v27 = (const void *)*((void *)a3 + 1);
  size_t v28 = *a3;
  unint64_t v29 = *a2;
  uint64_t v30 = (*a2)[2];
  uint64_t v31 = **a2;
  if (v30 - v31 >= v28)
  {
    int v34 = (char *)v29[1];
    goto LABEL_54;
  }
  if (v30) {
    size_t v32 = 2 * v30;
  }
  else {
    size_t v32 = 0x2000;
  }
  size_t v33 = v31 + v28;
  while (v32 < v33)
  {
    BOOL v11 = (uint64_t)v32 <= 0;
    v32 *= 2;
    if (v11)
    {
      size_t v32 = v33;
      break;
    }
  }
  int v34 = (char *)malloc_type_realloc((void *)v29[1], v32, 0xAD6A59EEuLL);
  if (!v34)
  {
LABEL_55:
    exceptiounint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unint64_t v37 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v37, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  v29[1] = (uint64_t)v34;
  v29[2] = v32;
  uint64_t v31 = *v29;
LABEL_54:
  memcpy(&v34[v31], v27, v28);
  *v29 += v28;
  return a2;
}

char *sub_215E05278(uint64_t **a1, int a2)
{
  char v2 = a2;
  uint64_t v3 = *a1;
  uint64_t v4 = (*a1)[2];
  uint64_t v5 = **a1;
  if (a2 > -33)
  {
    if (v4 == v5)
    {
      if (v4) {
        size_t v10 = 2 * v4;
      }
      else {
        size_t v10 = 0x2000;
      }
      while (v10 < v4 + 1)
      {
        BOOL v8 = (uint64_t)v10 <= 0;
        v10 *= 2;
        if (v8)
        {
          size_t v10 = v4 + 1;
          break;
        }
      }
      uint64_t result = (char *)malloc_type_realloc((void *)v3[1], v10, 0xAD6A59EEuLL);
      if (!result) {
        goto LABEL_28;
      }
      v3[1] = (uint64_t)result;
      v3[2] = v10;
      uint64_t v5 = *v3;
    }
    else
    {
      uint64_t result = (char *)v3[1];
    }
    uint64_t v12 = &result[v5];
    uint64_t v13 = 1;
    goto LABEL_27;
  }
  if ((unint64_t)(v4 - v5) >= 2)
  {
    uint64_t result = (char *)v3[1];
    goto LABEL_24;
  }
  if (v4) {
    size_t v6 = 2 * v4;
  }
  else {
    size_t v6 = 0x2000;
  }
  size_t v7 = v5 + 2;
  while (v6 < v7)
  {
    BOOL v8 = (uint64_t)v6 <= 0;
    v6 *= 2;
    if (v8)
    {
      size_t v6 = v7;
      break;
    }
  }
  uint64_t result = (char *)malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
  if (!result)
  {
LABEL_28:
    exceptiounint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    size_t v15 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v15, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  v3[1] = (uint64_t)result;
  v3[2] = v6;
  uint64_t v5 = *v3;
LABEL_24:
  BOOL v11 = &result[v5];
  char *v11 = -48;
  uint64_t v12 = v11 + 1;
  uint64_t v13 = 2;
LABEL_27:
  char *v12 = v2;
  *v3 += v13;
  return result;
}

char *sub_215E053CC(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (*a1)[2];
  uint64_t v5 = **a1;
  if (a2 < 0)
  {
    if ((unint64_t)(v4 - v5) >= 2)
    {
      uint64_t result = (char *)v3[1];
    }
    else
    {
      if (v4) {
        size_t v9 = 2 * v4;
      }
      else {
        size_t v9 = 0x2000;
      }
      size_t v10 = v5 + 2;
      while (v9 < v10)
      {
        BOOL v7 = (uint64_t)v9 <= 0;
        v9 *= 2;
        if (v7)
        {
          size_t v9 = v10;
          break;
        }
      }
      uint64_t result = (char *)malloc_type_realloc((void *)v3[1], v9, 0xAD6A59EEuLL);
      if (!result) {
        goto LABEL_28;
      }
      v3[1] = (uint64_t)result;
      v3[2] = v9;
      uint64_t v5 = *v3;
    }
    uint64_t v13 = &result[v5];
    *uint64_t v13 = -52;
    BOOL v11 = v13 + 1;
    uint64_t v12 = 2;
    goto LABEL_27;
  }
  if (v4 != v5)
  {
    uint64_t result = (char *)v3[1];
    goto LABEL_24;
  }
  if (v4) {
    size_t v6 = 2 * v4;
  }
  else {
    size_t v6 = 0x2000;
  }
  while (v6 < v4 + 1)
  {
    BOOL v7 = (uint64_t)v6 <= 0;
    v6 *= 2;
    if (v7)
    {
      size_t v6 = v4 + 1;
      break;
    }
  }
  uint64_t result = (char *)malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
  if (!result)
  {
LABEL_28:
    exceptiounint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    size_t v15 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v15, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  v3[1] = (uint64_t)result;
  v3[2] = v6;
  uint64_t v5 = *v3;
LABEL_24:
  BOOL v11 = &result[v5];
  uint64_t v12 = 1;
LABEL_27:
  char *v11 = a2;
  *v3 += v12;
  return result;
}

unsigned char *sub_215E0551C(uint64_t **a1, signed int a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (*a1)[2];
  uint64_t v5 = **a1;
  if (a2 <= -33)
  {
    unint64_t v6 = v4 - v5;
    if (a2 <= 0xFFFFFF7F)
    {
      if (v6 >= 3)
      {
        uint64_t result = (unsigned char *)v3[1];
        goto LABEL_49;
      }
      if (v4) {
        size_t v7 = 2 * v4;
      }
      else {
        size_t v7 = 0x2000;
      }
      size_t v8 = v5 + 3;
      while (v7 < v8)
      {
        BOOL v9 = (uint64_t)v7 <= 0;
        v7 *= 2;
        if (v9)
        {
          size_t v7 = v8;
          break;
        }
      }
      uint64_t result = malloc_type_realloc((void *)v3[1], v7, 0xAD6A59EEuLL);
      if (result)
      {
        v3[1] = (uint64_t)result;
        v3[2] = v7;
        uint64_t v5 = *v3;
LABEL_49:
        unsigned int v17 = bswap32(a2) >> 16;
        unint64_t v18 = &result[v5];
        char v19 = -47;
LABEL_70:
        *unint64_t v18 = v19;
        *(_WORD *)(v18 + 1) = v17;
        uint64_t v20 = 3;
        goto LABEL_71;
      }
LABEL_72:
      exceptiounint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v26 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v26, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    if (v6 >= 2)
    {
      uint64_t result = (unsigned char *)v3[1];
    }
    else
    {
      if (v4) {
        size_t v12 = 2 * v4;
      }
      else {
        size_t v12 = 0x2000;
      }
      size_t v13 = v5 + 2;
      while (v12 < v13)
      {
        BOOL v9 = (uint64_t)v12 <= 0;
        v12 *= 2;
        if (v9)
        {
          size_t v12 = v13;
          break;
        }
      }
      uint64_t result = malloc_type_realloc((void *)v3[1], v12, 0xAD6A59EEuLL);
      if (!result) {
        goto LABEL_72;
      }
      v3[1] = (uint64_t)result;
      v3[2] = v12;
      uint64_t v5 = *v3;
    }
    uint64_t v21 = &result[v5];
    char v22 = -48;
LABEL_67:
    *uint64_t v21 = v22;
    v21[1] = a2;
    uint64_t v20 = 2;
    goto LABEL_71;
  }
  if (a2 > 127)
  {
    unint64_t v14 = v4 - v5;
    if (a2 > 0xFF)
    {
      if (v14 >= 3)
      {
        uint64_t result = (unsigned char *)v3[1];
      }
      else
      {
        if (v4) {
          size_t v23 = 2 * v4;
        }
        else {
          size_t v23 = 0x2000;
        }
        size_t v24 = v5 + 3;
        while (v23 < v24)
        {
          BOOL v9 = (uint64_t)v23 <= 0;
          v23 *= 2;
          if (v9)
          {
            size_t v23 = v24;
            break;
          }
        }
        uint64_t result = malloc_type_realloc((void *)v3[1], v23, 0xAD6A59EEuLL);
        if (!result) {
          goto LABEL_72;
        }
        v3[1] = (uint64_t)result;
        v3[2] = v23;
        uint64_t v5 = *v3;
      }
      unsigned int v17 = bswap32(a2) >> 16;
      unint64_t v18 = &result[v5];
      char v19 = -51;
      goto LABEL_70;
    }
    if (v14 >= 2)
    {
      uint64_t result = (unsigned char *)v3[1];
    }
    else
    {
      if (v4) {
        size_t v15 = 2 * v4;
      }
      else {
        size_t v15 = 0x2000;
      }
      size_t v16 = v5 + 2;
      while (v15 < v16)
      {
        BOOL v9 = (uint64_t)v15 <= 0;
        v15 *= 2;
        if (v9)
        {
          size_t v15 = v16;
          break;
        }
      }
      uint64_t result = malloc_type_realloc((void *)v3[1], v15, 0xAD6A59EEuLL);
      if (!result) {
        goto LABEL_72;
      }
      v3[1] = (uint64_t)result;
      v3[2] = v15;
      uint64_t v5 = *v3;
    }
    uint64_t v21 = &result[v5];
    char v22 = -52;
    goto LABEL_67;
  }
  if (v4 == v5)
  {
    if (v4) {
      size_t v11 = 2 * v4;
    }
    else {
      size_t v11 = 0x2000;
    }
    while (v11 < v4 + 1)
    {
      BOOL v9 = (uint64_t)v11 <= 0;
      v11 *= 2;
      if (v9)
      {
        size_t v11 = v4 + 1;
        break;
      }
    }
    uint64_t result = malloc_type_realloc((void *)v3[1], v11, 0xAD6A59EEuLL);
    if (!result) {
      goto LABEL_72;
    }
    v3[1] = (uint64_t)result;
    v3[2] = v11;
    uint64_t v5 = *v3;
  }
  else
  {
    uint64_t result = (unsigned char *)v3[1];
  }
  result[v5] = a2;
  uint64_t v20 = 1;
LABEL_71:
  *v3 += v20;
  return result;
}

uint64_t sub_215E057EC()
{
  return std::ostream::write();
}

unsigned char *sub_215E058EC(uint64_t **a1, unsigned int a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (*a1)[2];
  uint64_t v5 = **a1;
  if (a2 > 0x7F)
  {
    unint64_t v9 = v4 - v5;
    if (a2 <= 0xFF)
    {
      if (v9 >= 2)
      {
        uint64_t result = (unsigned char *)v3[1];
      }
      else
      {
        if (v4) {
          size_t v10 = 2 * v4;
        }
        else {
          size_t v10 = 0x2000;
        }
        size_t v11 = v5 + 2;
        while (v10 < v11)
        {
          BOOL v7 = (uint64_t)v10 <= 0;
          v10 *= 2;
          if (v7)
          {
            size_t v10 = v11;
            break;
          }
        }
        uint64_t result = malloc_type_realloc((void *)v3[1], v10, 0xAD6A59EEuLL);
        if (!result) {
          goto LABEL_42;
        }
        v3[1] = (uint64_t)result;
        v3[2] = v10;
        uint64_t v5 = *v3;
      }
      size_t v15 = &result[v5];
      *size_t v15 = -52;
      v15[1] = a2;
      uint64_t v12 = 2;
      goto LABEL_41;
    }
    if (v9 >= 3)
    {
      uint64_t result = (unsigned char *)v3[1];
    }
    else
    {
      if (v4) {
        size_t v13 = 2 * v4;
      }
      else {
        size_t v13 = 0x2000;
      }
      size_t v14 = v5 + 3;
      while (v13 < v14)
      {
        BOOL v7 = (uint64_t)v13 <= 0;
        v13 *= 2;
        if (v7)
        {
          size_t v13 = v14;
          break;
        }
      }
      uint64_t result = malloc_type_realloc((void *)v3[1], v13, 0xAD6A59EEuLL);
      if (!result) {
        goto LABEL_42;
      }
      v3[1] = (uint64_t)result;
      v3[2] = v13;
      uint64_t v5 = *v3;
    }
    size_t v16 = &result[v5];
    *size_t v16 = -51;
    *(_WORD *)(v16 + 1) = __rev16(a2);
    uint64_t v12 = 3;
    goto LABEL_41;
  }
  if (v4 != v5)
  {
    uint64_t result = (unsigned char *)v3[1];
    goto LABEL_25;
  }
  if (v4) {
    size_t v6 = 2 * v4;
  }
  else {
    size_t v6 = 0x2000;
  }
  while (v6 < v4 + 1)
  {
    BOOL v7 = (uint64_t)v6 <= 0;
    v6 *= 2;
    if (v7)
    {
      size_t v6 = v4 + 1;
      break;
    }
  }
  uint64_t result = malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
  if (!result)
  {
LABEL_42:
    exceptiounint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unint64_t v18 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v18, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  v3[1] = (uint64_t)result;
  v3[2] = v6;
  uint64_t v5 = *v3;
LABEL_25:
  result[v5] = a2;
  uint64_t v12 = 1;
LABEL_41:
  *v3 += v12;
  return result;
}

unsigned char *sub_215E05AC4(uint64_t **a1, unsigned int a2)
{
  if ((int)a2 > -33)
  {
    if ((int)a2 <= 127)
    {
      uint64_t v3 = *a1;
      uint64_t v10 = (*a1)[2];
      uint64_t v11 = **a1;
      if (v10 == v11)
      {
        if (v10) {
          size_t v12 = 2 * v10;
        }
        else {
          size_t v12 = 0x2000;
        }
        while (v12 < v10 + 1)
        {
          BOOL v8 = (uint64_t)v12 <= 0;
          v12 *= 2;
          if (v8)
          {
            size_t v12 = v10 + 1;
            break;
          }
        }
        uint64_t result = malloc_type_realloc((void *)v3[1], v12, 0xAD6A59EEuLL);
        if (!result) {
          goto LABEL_101;
        }
        v3[1] = (uint64_t)result;
        v3[2] = v12;
        uint64_t v11 = *v3;
      }
      else
      {
        uint64_t result = (unsigned char *)v3[1];
      }
      result[v11] = a2;
      uint64_t v24 = 1;
      goto LABEL_98;
    }
    if (a2 > 0xFF)
    {
      if (HIWORD(a2))
      {
        uint64_t v3 = *a1;
        uint64_t v38 = (*a1)[2];
        uint64_t v39 = **a1;
        if ((unint64_t)(v38 - v39) >= 5)
        {
          uint64_t result = (unsigned char *)v3[1];
        }
        else
        {
          if (v38) {
            size_t v40 = 2 * v38;
          }
          else {
            size_t v40 = 0x2000;
          }
          size_t v41 = v39 + 5;
          while (v40 < v41)
          {
            BOOL v8 = (uint64_t)v40 <= 0;
            v40 *= 2;
            if (v8)
            {
              size_t v40 = v41;
              break;
            }
          }
          uint64_t result = malloc_type_realloc((void *)v3[1], v40, 0xAD6A59EEuLL);
          if (!result) {
            goto LABEL_101;
          }
          v3[1] = (uint64_t)result;
          v3[2] = v40;
          uint64_t v39 = *v3;
        }
        unsigned int v21 = bswap32(a2);
        char v22 = &result[v39];
        char v23 = -50;
        goto LABEL_51;
      }
      uint64_t v3 = *a1;
      uint64_t v29 = (*a1)[2];
      uint64_t v30 = **a1;
      if ((unint64_t)(v29 - v30) >= 3)
      {
        uint64_t result = (unsigned char *)v3[1];
      }
      else
      {
        if (v29) {
          size_t v31 = 2 * v29;
        }
        else {
          size_t v31 = 0x2000;
        }
        size_t v32 = v30 + 3;
        while (v31 < v32)
        {
          BOOL v8 = (uint64_t)v31 <= 0;
          v31 *= 2;
          if (v8)
          {
            size_t v31 = v32;
            break;
          }
        }
        uint64_t result = malloc_type_realloc((void *)v3[1], v31, 0xAD6A59EEuLL);
        if (!result) {
          goto LABEL_101;
        }
        v3[1] = (uint64_t)result;
        v3[2] = v31;
        uint64_t v30 = *v3;
      }
      unsigned int v33 = bswap32(a2) >> 16;
      int v34 = &result[v30];
      char v35 = -51;
LABEL_97:
      *int v34 = v35;
      *(_WORD *)(v34 + 1) = v33;
      uint64_t v24 = 3;
      goto LABEL_98;
    }
    uint64_t v3 = *a1;
    uint64_t v17 = (*a1)[2];
    uint64_t v18 = **a1;
    if ((unint64_t)(v17 - v18) >= 2)
    {
      uint64_t result = (unsigned char *)v3[1];
    }
    else
    {
      if (v17) {
        size_t v19 = 2 * v17;
      }
      else {
        size_t v19 = 0x2000;
      }
      size_t v20 = v18 + 2;
      while (v19 < v20)
      {
        BOOL v8 = (uint64_t)v19 <= 0;
        v19 *= 2;
        if (v8)
        {
          size_t v19 = v20;
          break;
        }
      }
      uint64_t result = malloc_type_realloc((void *)v3[1], v19, 0xAD6A59EEuLL);
      if (!result) {
        goto LABEL_101;
      }
      v3[1] = (uint64_t)result;
      v3[2] = v19;
      uint64_t v18 = *v3;
    }
    long long v36 = &result[v18];
    char v37 = -52;
LABEL_83:
    *long long v36 = v37;
    v36[1] = a2;
    uint64_t v24 = 2;
    goto LABEL_98;
  }
  if (a2 > 0xFFFF7FFF)
  {
    if (a2 <= 0xFFFFFF7F)
    {
      uint64_t v3 = *a1;
      uint64_t v13 = (*a1)[2];
      uint64_t v14 = **a1;
      if ((unint64_t)(v13 - v14) >= 3)
      {
        uint64_t result = (unsigned char *)v3[1];
      }
      else
      {
        if (v13) {
          size_t v15 = 2 * v13;
        }
        else {
          size_t v15 = 0x2000;
        }
        size_t v16 = v14 + 3;
        while (v15 < v16)
        {
          BOOL v8 = (uint64_t)v15 <= 0;
          v15 *= 2;
          if (v8)
          {
            size_t v15 = v16;
            break;
          }
        }
        uint64_t result = malloc_type_realloc((void *)v3[1], v15, 0xAD6A59EEuLL);
        if (!result) {
          goto LABEL_101;
        }
        v3[1] = (uint64_t)result;
        v3[2] = v15;
        uint64_t v14 = *v3;
      }
      unsigned int v33 = bswap32(a2) >> 16;
      int v34 = &result[v14];
      char v35 = -47;
      goto LABEL_97;
    }
    uint64_t v3 = *a1;
    uint64_t v25 = (*a1)[2];
    uint64_t v26 = **a1;
    if ((unint64_t)(v25 - v26) >= 2)
    {
      uint64_t result = (unsigned char *)v3[1];
    }
    else
    {
      if (v25) {
        size_t v27 = 2 * v25;
      }
      else {
        size_t v27 = 0x2000;
      }
      size_t v28 = v26 + 2;
      while (v27 < v28)
      {
        BOOL v8 = (uint64_t)v27 <= 0;
        v27 *= 2;
        if (v8)
        {
          size_t v27 = v28;
          break;
        }
      }
      uint64_t result = malloc_type_realloc((void *)v3[1], v27, 0xAD6A59EEuLL);
      if (!result) {
        goto LABEL_101;
      }
      v3[1] = (uint64_t)result;
      v3[2] = v27;
      uint64_t v26 = *v3;
    }
    long long v36 = &result[v26];
    char v37 = -48;
    goto LABEL_83;
  }
  uint64_t v3 = *a1;
  uint64_t v4 = (*a1)[2];
  uint64_t v5 = **a1;
  if ((unint64_t)(v4 - v5) >= 5)
  {
    uint64_t result = (unsigned char *)v3[1];
    goto LABEL_50;
  }
  if (v4) {
    size_t v6 = 2 * v4;
  }
  else {
    size_t v6 = 0x2000;
  }
  size_t v7 = v5 + 5;
  while (v6 < v7)
  {
    BOOL v8 = (uint64_t)v6 <= 0;
    v6 *= 2;
    if (v8)
    {
      size_t v6 = v7;
      break;
    }
  }
  uint64_t result = malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
  if (!result)
  {
LABEL_101:
    exceptiounint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    int v43 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v43, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  v3[1] = (uint64_t)result;
  v3[2] = v6;
  uint64_t v5 = *v3;
LABEL_50:
  unsigned int v21 = bswap32(a2);
  char v22 = &result[v5];
  char v23 = -46;
LABEL_51:
  char *v22 = v23;
  *(_DWORD *)(v22 + 1) = v21;
  uint64_t v24 = 5;
LABEL_98:
  *v3 += v24;
  return result;
}

uint64_t sub_215E05EEC()
{
  return std::ostream::write();
}

unsigned char *sub_215E05FEC(uint64_t **a1, unsigned int a2)
{
  if (a2 > 0xFF)
  {
    if (!HIWORD(a2))
    {
      uint64_t v3 = *a1;
      uint64_t v9 = (*a1)[2];
      uint64_t v10 = **a1;
      if ((unint64_t)(v9 - v10) >= 3)
      {
        uint64_t result = (unsigned char *)v3[1];
      }
      else
      {
        if (v9) {
          size_t v11 = 2 * v9;
        }
        else {
          size_t v11 = 0x2000;
        }
        size_t v12 = v10 + 3;
        while (v11 < v12)
        {
          BOOL v7 = (uint64_t)v11 <= 0;
          v11 *= 2;
          if (v7)
          {
            size_t v11 = v12;
            break;
          }
        }
        uint64_t result = malloc_type_realloc((void *)v3[1], v11, 0xAD6A59EEuLL);
        if (!result) {
          goto LABEL_56;
        }
        v3[1] = (uint64_t)result;
        v3[2] = v11;
        uint64_t v10 = *v3;
      }
      size_t v20 = &result[v10];
      *size_t v20 = -51;
      *(_WORD *)(v20 + 1) = bswap32(a2) >> 16;
      uint64_t v19 = 3;
      goto LABEL_55;
    }
    uint64_t v3 = *a1;
    uint64_t v15 = (*a1)[2];
    uint64_t v16 = **a1;
    if ((unint64_t)(v15 - v16) >= 5)
    {
      uint64_t result = (unsigned char *)v3[1];
    }
    else
    {
      if (v15) {
        size_t v17 = 2 * v15;
      }
      else {
        size_t v17 = 0x2000;
      }
      size_t v18 = v16 + 5;
      while (v17 < v18)
      {
        BOOL v7 = (uint64_t)v17 <= 0;
        v17 *= 2;
        if (v7)
        {
          size_t v17 = v18;
          break;
        }
      }
      uint64_t result = malloc_type_realloc((void *)v3[1], v17, 0xAD6A59EEuLL);
      if (!result) {
        goto LABEL_56;
      }
      v3[1] = (uint64_t)result;
      v3[2] = v17;
      uint64_t v16 = *v3;
    }
    char v22 = &result[v16];
    char *v22 = -50;
    *(_DWORD *)(v22 + 1) = bswap32(a2);
    uint64_t v19 = 5;
    goto LABEL_55;
  }
  uint64_t v3 = *a1;
  uint64_t v4 = (*a1)[2];
  uint64_t v5 = **a1;
  if (a2 > 0x7F)
  {
    if ((unint64_t)(v4 - v5) >= 2)
    {
      uint64_t result = (unsigned char *)v3[1];
    }
    else
    {
      if (v4) {
        size_t v13 = 2 * v4;
      }
      else {
        size_t v13 = 0x2000;
      }
      size_t v14 = v5 + 2;
      while (v13 < v14)
      {
        BOOL v7 = (uint64_t)v13 <= 0;
        v13 *= 2;
        if (v7)
        {
          size_t v13 = v14;
          break;
        }
      }
      uint64_t result = malloc_type_realloc((void *)v3[1], v13, 0xAD6A59EEuLL);
      if (!result) {
        goto LABEL_56;
      }
      v3[1] = (uint64_t)result;
      v3[2] = v13;
      uint64_t v5 = *v3;
    }
    unsigned int v21 = &result[v5];
    *unsigned int v21 = -52;
    v21[1] = a2;
    uint64_t v19 = 2;
    goto LABEL_55;
  }
  if (v4 != v5)
  {
    uint64_t result = (unsigned char *)v3[1];
    goto LABEL_48;
  }
  if (v4) {
    size_t v6 = 2 * v4;
  }
  else {
    size_t v6 = 0x2000;
  }
  while (v6 < v4 + 1)
  {
    BOOL v7 = (uint64_t)v6 <= 0;
    v6 *= 2;
    if (v7)
    {
      size_t v6 = v4 + 1;
      break;
    }
  }
  uint64_t result = malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
  if (!result)
  {
LABEL_56:
    exceptiounint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v24 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v24, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  v3[1] = (uint64_t)result;
  v3[2] = v6;
  uint64_t v5 = *v3;
LABEL_48:
  result[v5] = a2;
  uint64_t v19 = 1;
LABEL_55:
  *v3 += v19;
  return result;
}

uint64_t sub_215E0626C(uint64_t a1, uint64_t a2)
{
  return a2;
}

unsigned char *sub_215E06360(uint64_t **a1, unint64_t a2)
{
  if ((uint64_t)a2 <= -33)
  {
    if (a2 <= 0xFFFFFFFFFFFF7FFFLL)
    {
      if (a2 <= 0xFFFFFFFF7FFFFFFFLL)
      {
        uint64_t v3 = *a1;
        uint64_t v4 = (*a1)[2];
        uint64_t v5 = **a1;
        if ((unint64_t)(v4 - v5) >= 9)
        {
          uint64_t result = (unsigned char *)v3[1];
          goto LABEL_88;
        }
        if (v4) {
          size_t v6 = 2 * v4;
        }
        else {
          size_t v6 = 0x2000;
        }
        size_t v7 = v5 + 9;
        while (v6 < v7)
        {
          BOOL v8 = (uint64_t)v6 <= 0;
          v6 *= 2;
          if (v8)
          {
            size_t v6 = v7;
            break;
          }
        }
        uint64_t result = malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
        if (result)
        {
          v3[1] = (uint64_t)result;
          v3[2] = v6;
          uint64_t v5 = *v3;
LABEL_88:
          unint64_t v34 = bswap64(a2);
          char v35 = &result[v5];
          char v36 = -45;
LABEL_128:
          char *v35 = v36;
          *(void *)(v35 + 1) = v34;
          uint64_t v25 = 9;
          goto LABEL_129;
        }
LABEL_130:
        exceptiounint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        int v54 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v54, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
      }
      uint64_t v3 = *a1;
      uint64_t v21 = (*a1)[2];
      uint64_t v22 = **a1;
      if ((unint64_t)(v21 - v22) >= 5)
      {
        uint64_t result = (unsigned char *)v3[1];
      }
      else
      {
        if (v21) {
          size_t v23 = 2 * v21;
        }
        else {
          size_t v23 = 0x2000;
        }
        size_t v24 = v22 + 5;
        while (v23 < v24)
        {
          BOOL v8 = (uint64_t)v23 <= 0;
          v23 *= 2;
          if (v8)
          {
            size_t v23 = v24;
            break;
          }
        }
        uint64_t result = malloc_type_realloc((void *)v3[1], v23, 0xAD6A59EEuLL);
        if (!result) {
          goto LABEL_130;
        }
        v3[1] = (uint64_t)result;
        v3[2] = v23;
        uint64_t v22 = *v3;
      }
      unsigned int v44 = bswap32(a2);
      uint64_t v45 = &result[v22];
      char v46 = -46;
LABEL_122:
      *uint64_t v45 = v46;
      *(_DWORD *)(v45 + 1) = v44;
      uint64_t v25 = 5;
      goto LABEL_129;
    }
    if (a2 <= 0xFFFFFFFFFFFFFF7FLL)
    {
      uint64_t v3 = *a1;
      uint64_t v13 = (*a1)[2];
      uint64_t v14 = **a1;
      if ((unint64_t)(v13 - v14) >= 3)
      {
        uint64_t result = (unsigned char *)v3[1];
      }
      else
      {
        if (v13) {
          size_t v15 = 2 * v13;
        }
        else {
          size_t v15 = 0x2000;
        }
        size_t v16 = v14 + 3;
        while (v15 < v16)
        {
          BOOL v8 = (uint64_t)v15 <= 0;
          v15 *= 2;
          if (v8)
          {
            size_t v15 = v16;
            break;
          }
        }
        uint64_t result = malloc_type_realloc((void *)v3[1], v15, 0xAD6A59EEuLL);
        if (!result) {
          goto LABEL_130;
        }
        v3[1] = (uint64_t)result;
        v3[2] = v15;
        uint64_t v14 = *v3;
      }
      unsigned int v37 = bswap32(a2) >> 16;
      uint64_t v38 = &result[v14];
      char v39 = -47;
LABEL_125:
      *uint64_t v38 = v39;
      *(_WORD *)(v38 + 1) = v37;
      uint64_t v25 = 3;
      goto LABEL_129;
    }
    uint64_t v3 = *a1;
    uint64_t v26 = (*a1)[2];
    uint64_t v27 = **a1;
    if ((unint64_t)(v26 - v27) >= 2)
    {
      uint64_t result = (unsigned char *)v3[1];
    }
    else
    {
      if (v26) {
        size_t v28 = 2 * v26;
      }
      else {
        size_t v28 = 0x2000;
      }
      size_t v29 = v27 + 2;
      while (v28 < v29)
      {
        BOOL v8 = (uint64_t)v28 <= 0;
        v28 *= 2;
        if (v8)
        {
          size_t v28 = v29;
          break;
        }
      }
      uint64_t result = malloc_type_realloc((void *)v3[1], v28, 0xAD6A59EEuLL);
      if (!result) {
        goto LABEL_130;
      }
      v3[1] = (uint64_t)result;
      v3[2] = v28;
      uint64_t v27 = *v3;
    }
    std::string v47 = &result[v27];
    char v48 = -48;
LABEL_119:
    char *v47 = v48;
    v47[1] = a2;
    uint64_t v25 = 2;
    goto LABEL_129;
  }
  if ((uint64_t)a2 > 127)
  {
    if (a2 >> 16)
    {
      if (HIDWORD(a2))
      {
        uint64_t v3 = *a1;
        uint64_t v49 = (*a1)[2];
        uint64_t v50 = **a1;
        if ((unint64_t)(v49 - v50) >= 9)
        {
          uint64_t result = (unsigned char *)v3[1];
        }
        else
        {
          if (v49) {
            size_t v51 = 2 * v49;
          }
          else {
            size_t v51 = 0x2000;
          }
          size_t v52 = v50 + 9;
          while (v51 < v52)
          {
            BOOL v8 = (uint64_t)v51 <= 0;
            v51 *= 2;
            if (v8)
            {
              size_t v51 = v52;
              break;
            }
          }
          uint64_t result = malloc_type_realloc((void *)v3[1], v51, 0xAD6A59EEuLL);
          if (!result) {
            goto LABEL_130;
          }
          v3[1] = (uint64_t)result;
          v3[2] = v51;
          uint64_t v50 = *v3;
        }
        unint64_t v34 = bswap64(a2);
        char v35 = &result[v50];
        char v36 = -49;
        goto LABEL_128;
      }
      uint64_t v3 = *a1;
      uint64_t v30 = (*a1)[2];
      uint64_t v31 = **a1;
      if ((unint64_t)(v30 - v31) >= 5)
      {
        uint64_t result = (unsigned char *)v3[1];
      }
      else
      {
        if (v30) {
          size_t v32 = 2 * v30;
        }
        else {
          size_t v32 = 0x2000;
        }
        size_t v33 = v31 + 5;
        while (v32 < v33)
        {
          BOOL v8 = (uint64_t)v32 <= 0;
          v32 *= 2;
          if (v8)
          {
            size_t v32 = v33;
            break;
          }
        }
        uint64_t result = malloc_type_realloc((void *)v3[1], v32, 0xAD6A59EEuLL);
        if (!result) {
          goto LABEL_130;
        }
        v3[1] = (uint64_t)result;
        v3[2] = v32;
        uint64_t v31 = *v3;
      }
      unsigned int v44 = bswap32(a2);
      uint64_t v45 = &result[v31];
      char v46 = -50;
      goto LABEL_122;
    }
    if (a2 > 0xFF)
    {
      uint64_t v3 = *a1;
      uint64_t v40 = (*a1)[2];
      uint64_t v41 = **a1;
      if ((unint64_t)(v40 - v41) >= 3)
      {
        uint64_t result = (unsigned char *)v3[1];
      }
      else
      {
        if (v40) {
          size_t v42 = 2 * v40;
        }
        else {
          size_t v42 = 0x2000;
        }
        size_t v43 = v41 + 3;
        while (v42 < v43)
        {
          BOOL v8 = (uint64_t)v42 <= 0;
          v42 *= 2;
          if (v8)
          {
            size_t v42 = v43;
            break;
          }
        }
        uint64_t result = malloc_type_realloc((void *)v3[1], v42, 0xAD6A59EEuLL);
        if (!result) {
          goto LABEL_130;
        }
        v3[1] = (uint64_t)result;
        v3[2] = v42;
        uint64_t v41 = *v3;
      }
      unsigned int v37 = bswap32(a2) >> 16;
      uint64_t v38 = &result[v41];
      char v39 = -51;
      goto LABEL_125;
    }
    uint64_t v3 = *a1;
    uint64_t v17 = (*a1)[2];
    uint64_t v18 = **a1;
    if ((unint64_t)(v17 - v18) >= 2)
    {
      uint64_t result = (unsigned char *)v3[1];
    }
    else
    {
      if (v17) {
        size_t v19 = 2 * v17;
      }
      else {
        size_t v19 = 0x2000;
      }
      size_t v20 = v18 + 2;
      while (v19 < v20)
      {
        BOOL v8 = (uint64_t)v19 <= 0;
        v19 *= 2;
        if (v8)
        {
          size_t v19 = v20;
          break;
        }
      }
      uint64_t result = malloc_type_realloc((void *)v3[1], v19, 0xAD6A59EEuLL);
      if (!result) {
        goto LABEL_130;
      }
      v3[1] = (uint64_t)result;
      v3[2] = v19;
      uint64_t v18 = *v3;
    }
    std::string v47 = &result[v18];
    char v48 = -52;
    goto LABEL_119;
  }
  uint64_t v3 = *a1;
  uint64_t v10 = (*a1)[2];
  uint64_t v11 = **a1;
  if (v10 == v11)
  {
    if (v10) {
      size_t v12 = 2 * v10;
    }
    else {
      size_t v12 = 0x2000;
    }
    while (v12 < v10 + 1)
    {
      BOOL v8 = (uint64_t)v12 <= 0;
      v12 *= 2;
      if (v8)
      {
        size_t v12 = v10 + 1;
        break;
      }
    }
    uint64_t result = malloc_type_realloc((void *)v3[1], v12, 0xAD6A59EEuLL);
    if (!result) {
      goto LABEL_130;
    }
    v3[1] = (uint64_t)result;
    v3[2] = v12;
    uint64_t v11 = *v3;
  }
  else
  {
    uint64_t result = (unsigned char *)v3[1];
  }
  result[v11] = a2;
  uint64_t v25 = 1;
LABEL_129:
  *v3 += v25;
  return result;
}

uint64_t sub_215E068A8()
{
  return std::ostream::write();
}

unsigned char *sub_215E069EC(uint64_t **a1, unint64_t a2)
{
  if (a2 > 0xFF)
  {
    if (!(a2 >> 16))
    {
      uint64_t v3 = *a1;
      uint64_t v9 = (*a1)[2];
      uint64_t v10 = **a1;
      if ((unint64_t)(v9 - v10) >= 3)
      {
        uint64_t result = (unsigned char *)v3[1];
      }
      else
      {
        if (v9) {
          size_t v11 = 2 * v9;
        }
        else {
          size_t v11 = 0x2000;
        }
        size_t v12 = v10 + 3;
        while (v11 < v12)
        {
          BOOL v7 = (uint64_t)v11 <= 0;
          v11 *= 2;
          if (v7)
          {
            size_t v11 = v12;
            break;
          }
        }
        uint64_t result = malloc_type_realloc((void *)v3[1], v11, 0xAD6A59EEuLL);
        if (!result) {
          goto LABEL_70;
        }
        v3[1] = (uint64_t)result;
        v3[2] = v11;
        uint64_t v10 = *v3;
      }
      size_t v20 = &result[v10];
      *size_t v20 = -51;
      *(_WORD *)(v20 + 1) = bswap32(a2) >> 16;
      uint64_t v19 = 3;
      goto LABEL_69;
    }
    if (!HIDWORD(a2))
    {
      uint64_t v3 = *a1;
      uint64_t v15 = (*a1)[2];
      uint64_t v16 = **a1;
      if ((unint64_t)(v15 - v16) >= 5)
      {
        uint64_t result = (unsigned char *)v3[1];
      }
      else
      {
        if (v15) {
          size_t v17 = 2 * v15;
        }
        else {
          size_t v17 = 0x2000;
        }
        size_t v18 = v16 + 5;
        while (v17 < v18)
        {
          BOOL v7 = (uint64_t)v17 <= 0;
          v17 *= 2;
          if (v7)
          {
            size_t v17 = v18;
            break;
          }
        }
        uint64_t result = malloc_type_realloc((void *)v3[1], v17, 0xAD6A59EEuLL);
        if (!result) {
          goto LABEL_70;
        }
        v3[1] = (uint64_t)result;
        v3[2] = v17;
        uint64_t v16 = *v3;
      }
      uint64_t v26 = &result[v16];
      *uint64_t v26 = -50;
      *(_DWORD *)(v26 + 1) = bswap32(a2);
      uint64_t v19 = 5;
      goto LABEL_69;
    }
    uint64_t v3 = *a1;
    uint64_t v22 = (*a1)[2];
    uint64_t v23 = **a1;
    if ((unint64_t)(v22 - v23) >= 9)
    {
      uint64_t result = (unsigned char *)v3[1];
    }
    else
    {
      if (v22) {
        size_t v24 = 2 * v22;
      }
      else {
        size_t v24 = 0x2000;
      }
      size_t v25 = v23 + 9;
      while (v24 < v25)
      {
        BOOL v7 = (uint64_t)v24 <= 0;
        v24 *= 2;
        if (v7)
        {
          size_t v24 = v25;
          break;
        }
      }
      uint64_t result = malloc_type_realloc((void *)v3[1], v24, 0xAD6A59EEuLL);
      if (!result) {
        goto LABEL_70;
      }
      v3[1] = (uint64_t)result;
      v3[2] = v24;
      uint64_t v23 = *v3;
    }
    uint64_t v27 = &result[v23];
    *uint64_t v27 = -49;
    *(void *)(v27 + 1) = bswap64(a2);
    uint64_t v19 = 9;
    goto LABEL_69;
  }
  uint64_t v3 = *a1;
  uint64_t v4 = (*a1)[2];
  uint64_t v5 = **a1;
  if (a2 > 0x7F)
  {
    if ((unint64_t)(v4 - v5) >= 2)
    {
      uint64_t result = (unsigned char *)v3[1];
    }
    else
    {
      if (v4) {
        size_t v13 = 2 * v4;
      }
      else {
        size_t v13 = 0x2000;
      }
      size_t v14 = v5 + 2;
      while (v13 < v14)
      {
        BOOL v7 = (uint64_t)v13 <= 0;
        v13 *= 2;
        if (v7)
        {
          size_t v13 = v14;
          break;
        }
      }
      uint64_t result = malloc_type_realloc((void *)v3[1], v13, 0xAD6A59EEuLL);
      if (!result) {
        goto LABEL_70;
      }
      v3[1] = (uint64_t)result;
      v3[2] = v13;
      uint64_t v5 = *v3;
    }
    uint64_t v21 = &result[v5];
    *uint64_t v21 = -52;
    v21[1] = a2;
    uint64_t v19 = 2;
    goto LABEL_69;
  }
  if (v4 != v5)
  {
    uint64_t result = (unsigned char *)v3[1];
    goto LABEL_49;
  }
  if (v4) {
    size_t v6 = 2 * v4;
  }
  else {
    size_t v6 = 0x2000;
  }
  while (v6 < v4 + 1)
  {
    BOOL v7 = (uint64_t)v6 <= 0;
    v6 *= 2;
    if (v7)
    {
      size_t v6 = v4 + 1;
      break;
    }
  }
  uint64_t result = malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
  if (!result)
  {
LABEL_70:
    exceptiounint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    size_t v29 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v29, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  v3[1] = (uint64_t)result;
  v3[2] = v6;
  uint64_t v5 = *v3;
LABEL_49:
  result[v5] = a2;
  uint64_t v19 = 1;
LABEL_69:
  *v3 += v19;
  return result;
}

uint64_t sub_215E06D00()
{
  return std::ostream::write();
}

uint64_t **sub_215E06DFC(uint64_t a1, uint64_t **a2, unsigned int *a3)
{
  unsigned int v4 = *a3;
  uint64_t v5 = *a2;
  uint64_t v6 = (*a2)[2];
  uint64_t v7 = **a2;
  if ((unint64_t)(v6 - v7) >= 5)
  {
    size_t v11 = (char *)v5[1];
  }
  else
  {
    if (v6) {
      size_t v8 = 2 * v6;
    }
    else {
      size_t v8 = 0x2000;
    }
    size_t v9 = v7 + 5;
    while (v8 < v9)
    {
      BOOL v10 = (uint64_t)v8 <= 0;
      v8 *= 2;
      if (v10)
      {
        size_t v8 = v9;
        break;
      }
    }
    size_t v11 = (char *)malloc_type_realloc((void *)v5[1], v8, 0xAD6A59EEuLL);
    if (!v11)
    {
      exceptiounint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v15 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v15, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    v5[1] = (uint64_t)v11;
    v5[2] = v8;
    uint64_t v7 = *v5;
  }
  size_t v12 = &v11[v7];
  char *v12 = -54;
  *(_DWORD *)(v12 + 1) = bswap32(v4);
  *v5 += 5;
  return a2;
}

uint64_t **sub_215E06EE4(uint64_t a1, uint64_t **a2, unint64_t *a3)
{
  unint64_t v4 = *a3;
  uint64_t v5 = *a2;
  uint64_t v6 = (*a2)[2];
  uint64_t v7 = **a2;
  if ((unint64_t)(v6 - v7) >= 9)
  {
    size_t v11 = (char *)v5[1];
  }
  else
  {
    if (v6) {
      size_t v8 = 2 * v6;
    }
    else {
      size_t v8 = 0x2000;
    }
    size_t v9 = v7 + 9;
    while (v8 < v9)
    {
      BOOL v10 = (uint64_t)v8 <= 0;
      v8 *= 2;
      if (v10)
      {
        size_t v8 = v9;
        break;
      }
    }
    size_t v11 = (char *)malloc_type_realloc((void *)v5[1], v8, 0xAD6A59EEuLL);
    if (!v11)
    {
      exceptiounint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v15 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v15, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    v5[1] = (uint64_t)v11;
    v5[2] = v8;
    uint64_t v7 = *v5;
  }
  size_t v12 = &v11[v7];
  char *v12 = -53;
  *(void *)(v12 + 1) = bswap64(v4);
  *v5 += 9;
  return a2;
}

uint64_t **sub_215E06FCC(uint64_t a1, uint64_t **a2, unsigned char *a3)
{
  unint64_t v4 = *a2;
  uint64_t v5 = (*a2)[2];
  uint64_t v6 = **a2;
  if (!*a3)
  {
    if (v5 == v6)
    {
      if (v5) {
        size_t v9 = 2 * v5;
      }
      else {
        size_t v9 = 0x2000;
      }
      while (v9 < v5 + 1)
      {
        BOOL v8 = (uint64_t)v9 <= 0;
        v9 *= 2;
        if (v8)
        {
          size_t v9 = v5 + 1;
          break;
        }
      }
      BOOL v10 = malloc_type_realloc((void *)v4[1], v9, 0xAD6A59EEuLL);
      if (!v10) {
        goto LABEL_26;
      }
      v4[1] = (uint64_t)v10;
      void v4[2] = v9;
      uint64_t v6 = *v4;
    }
    else
    {
      BOOL v10 = (unsigned char *)v4[1];
    }
    char v11 = -62;
    goto LABEL_25;
  }
  if (v5 == v6)
  {
    if (v5) {
      size_t v7 = 2 * v5;
    }
    else {
      size_t v7 = 0x2000;
    }
    while (v7 < v5 + 1)
    {
      BOOL v8 = (uint64_t)v7 <= 0;
      v7 *= 2;
      if (v8)
      {
        size_t v7 = v5 + 1;
        break;
      }
    }
    BOOL v10 = malloc_type_realloc((void *)v4[1], v7, 0xAD6A59EEuLL);
    if (v10)
    {
      v4[1] = (uint64_t)v10;
      void v4[2] = v7;
      uint64_t v6 = *v4;
      char v11 = -61;
      goto LABEL_25;
    }
LABEL_26:
    exceptiounint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    size_t v14 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v14, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  BOOL v10 = (unsigned char *)v4[1];
  char v11 = -61;
LABEL_25:
  v10[v6] = v11;
  ++*v4;
  return a2;
}

uint64_t **sub_215E07110(uint64_t a1, uint64_t **a2, const void **a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    size_t v5 = (size_t)a3[1];
    if (HIDWORD(v5))
    {
      exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_215E074B4(exception);
      __cxa_throw(exception, (struct type_info *)&unk_26C686080, (void (*)(void *))std::runtime_error::~runtime_error);
    }
  }
  else
  {
    size_t v5 = *((unsigned __int8 *)a3 + 23);
  }
  if (v5 > 0x1F)
  {
    if (v5 > 0xFF)
    {
      if (WORD1(v5))
      {
        uint64_t v6 = *a2;
        uint64_t v24 = (*a2)[2];
        uint64_t v25 = **a2;
        if ((unint64_t)(v24 - v25) >= 5)
        {
          size_t v28 = (char *)v6[1];
        }
        else
        {
          if (v24) {
            size_t v26 = 2 * v24;
          }
          else {
            size_t v26 = 0x2000;
          }
          size_t v27 = v25 + 5;
          while (v26 < v27)
          {
            BOOL v10 = (uint64_t)v26 <= 0;
            v26 *= 2;
            if (v10)
            {
              size_t v26 = v27;
              break;
            }
          }
          size_t v28 = (char *)malloc_type_realloc((void *)v6[1], v26, 0xAD6A59EEuLL);
          if (!v28) {
            goto LABEL_74;
          }
          v6[1] = (uint64_t)v28;
          _OWORD v6[2] = v26;
          uint64_t v25 = *v6;
        }
        uint64_t v30 = &v28[v25];
        char *v30 = -37;
        *(_DWORD *)(v30 + 1) = bswap32(v5);
        uint64_t v17 = 5;
      }
      else
      {
        uint64_t v6 = *a2;
        uint64_t v18 = (*a2)[2];
        uint64_t v19 = **a2;
        if ((unint64_t)(v18 - v19) >= 3)
        {
          uint64_t v22 = (char *)v6[1];
        }
        else
        {
          if (v18) {
            size_t v20 = 2 * v18;
          }
          else {
            size_t v20 = 0x2000;
          }
          size_t v21 = v19 + 3;
          while (v20 < v21)
          {
            BOOL v10 = (uint64_t)v20 <= 0;
            v20 *= 2;
            if (v10)
            {
              size_t v20 = v21;
              break;
            }
          }
          uint64_t v22 = (char *)malloc_type_realloc((void *)v6[1], v20, 0xAD6A59EEuLL);
          if (!v22) {
            goto LABEL_74;
          }
          v6[1] = (uint64_t)v22;
          _OWORD v6[2] = v20;
          uint64_t v19 = *v6;
        }
        size_t v29 = &v22[v19];
        *size_t v29 = -38;
        *(_WORD *)(v29 + 1) = bswap32(v5) >> 16;
        uint64_t v17 = 3;
      }
    }
    else
    {
      uint64_t v6 = *a2;
      uint64_t v12 = (*a2)[2];
      uint64_t v13 = **a2;
      if ((unint64_t)(v12 - v13) >= 2)
      {
        uint64_t v16 = (char *)v6[1];
      }
      else
      {
        if (v12) {
          size_t v14 = 2 * v12;
        }
        else {
          size_t v14 = 0x2000;
        }
        size_t v15 = v13 + 2;
        while (v14 < v15)
        {
          BOOL v10 = (uint64_t)v14 <= 0;
          v14 *= 2;
          if (v10)
          {
            size_t v14 = v15;
            break;
          }
        }
        uint64_t v16 = (char *)malloc_type_realloc((void *)v6[1], v14, 0xAD6A59EEuLL);
        if (!v16) {
          goto LABEL_74;
        }
        v6[1] = (uint64_t)v16;
        _OWORD v6[2] = v14;
        uint64_t v13 = *v6;
      }
      uint64_t v23 = &v16[v13];
      *uint64_t v23 = -39;
      v23[1] = v5;
      uint64_t v17 = 2;
    }
  }
  else
  {
    uint64_t v6 = *a2;
    uint64_t v7 = (*a2)[2];
    uint64_t v8 = **a2;
    if (v7 == v8)
    {
      if (v7) {
        size_t v9 = 2 * v7;
      }
      else {
        size_t v9 = 0x2000;
      }
      while (v9 < v7 + 1)
      {
        BOOL v10 = (uint64_t)v9 <= 0;
        v9 *= 2;
        if (v10)
        {
          size_t v9 = v7 + 1;
          break;
        }
      }
      char v11 = malloc_type_realloc((void *)v6[1], v9, 0xAD6A59EEuLL);
      if (!v11) {
        goto LABEL_74;
      }
      v6[1] = (uint64_t)v11;
      _OWORD v6[2] = v9;
      uint64_t v8 = *v6;
    }
    else
    {
      char v11 = (unsigned char *)v6[1];
    }
    v11[v8] = v5 | 0xA0;
    uint64_t v17 = 1;
  }
  *v6 += v17;
  int v31 = *((char *)a3 + 23);
  size_t v32 = (const void **)*a3;
  size_t v33 = *a2;
  uint64_t v34 = (*a2)[2];
  uint64_t v35 = **a2;
  if (v34 - v35 < v5)
  {
    if (v34) {
      size_t v36 = 2 * v34;
    }
    else {
      size_t v36 = 0x2000;
    }
    size_t v37 = v35 + v5;
    while (v36 < v37)
    {
      BOOL v10 = (uint64_t)v36 <= 0;
      v36 *= 2;
      if (v10)
      {
        size_t v36 = v37;
        break;
      }
    }
    uint64_t v38 = (char *)malloc_type_realloc((void *)v33[1], v36, 0xAD6A59EEuLL);
    if (v38)
    {
      v33[1] = (uint64_t)v38;
      uint64_t v33[2] = v36;
      uint64_t v35 = *v33;
      goto LABEL_70;
    }
LABEL_74:
    uint64_t v41 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    size_t v42 = std::bad_alloc::bad_alloc(v41);
    __cxa_throw(v42, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  uint64_t v38 = (char *)v33[1];
LABEL_70:
  if (v31 >= 0) {
    char v39 = a3;
  }
  else {
    char v39 = v32;
  }
  memcpy(&v38[v35], v39, v5);
  *v33 += v5;
  return a2;
}

void sub_215E074A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_215E074B4(std::runtime_error *a1)
{
  uint64_t result = std::runtime_error::runtime_error(a1, "container size overflow");
  result->__vftable = (std::runtime_error_vtbl *)&unk_26C6860A8;
  return result;
}

void sub_215E074F4(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215E0752C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) < 0)
  {
    unint64_t v4 = *(void *)(a3 + 8);
    if (HIDWORD(v4))
    {
      exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_215E074B4(exception);
      __cxa_throw(exception, (struct type_info *)&unk_26C686080, (void (*)(void *))std::runtime_error::~runtime_error);
    }
  }
  std::ostream::write();
  std::ostream::write();
  return a2;
}

void sub_215E07660(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215E07674(uint64_t a1)
{
  if (*(_DWORD *)a1 == 3)
  {
    uint64_t v1 = *(void *)(a1 + 8);
    if (v1 <= -129) {
      goto LABEL_4;
    }
  }
  else if (*(_DWORD *)a1 != 2 || (uint64_t v1 = *(void *)(a1 + 8), (unint64_t)v1 >= 0x80))
  {
LABEL_4:
    exceptiounint64_t n = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    uint64_t v3 = sub_215E00388(exception);
    __cxa_throw(v3, (struct type_info *)&unk_26C6859D8, (void (*)(void *))std::exception::~exception);
  }
  return (char)v1;
}

uint64_t sub_215E076E4(uint64_t a1)
{
  if (*(_DWORD *)a1 == 3)
  {
    uint64_t v1 = *(void *)(a1 + 8);
    if (v1 <= -32769) {
      goto LABEL_4;
    }
  }
  else if (*(_DWORD *)a1 != 2 || (uint64_t v1 = *(void *)(a1 + 8), (unint64_t)v1 >= 0x8000))
  {
LABEL_4:
    exceptiounint64_t n = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    uint64_t v3 = sub_215E00388(exception);
    __cxa_throw(v3, (struct type_info *)&unk_26C6859D8, (void (*)(void *))std::exception::~exception);
  }
  return (__int16)v1;
}

int64_t sub_215E07758(uint64_t a1)
{
  if (*(_DWORD *)a1 == 3)
  {
    int64_t result = *(void *)(a1 + 8);
    if (result <= (uint64_t)0xFFFFFFFF7FFFFFFFLL) {
      goto LABEL_4;
    }
  }
  else if (*(_DWORD *)a1 != 2 || (int64_t result = *(void *)(a1 + 8), (unint64_t)result >> 31))
  {
LABEL_4:
    exceptiounint64_t n = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    uint64_t v3 = sub_215E00388(exception);
    __cxa_throw(v3, (struct type_info *)&unk_26C6859D8, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

void sub_215E077C8(std::string *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v16 = a3;
  unsigned int v17 = a2;
  sub_215E07920("Failed to load sample ", a1, (std::string *)". Minimum version required is ", &v17, (std::string *)" but current sample version is ", &v16, (std::string *)".");
  if (SHIBYTE(v6) < 0)
  {
    sub_215738B0C(__p, v5[0], (unint64_t)v5[1]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)v5;
    uint64_t v8 = v6;
  }
  char v9 = 1;
  LOBYTE(v1std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  char v14 = 0;
  char v15 = 1;
  sub_2157CFD48(a4, 5u, (long long *)__p);
  if (!v15) {
    goto LABEL_11;
  }
  if (v14)
  {
    if ((v13 & 0x80000000) == 0)
    {
      if ((v11 & 0x80000000) == 0) {
        goto LABEL_8;
      }
LABEL_14:
      operator delete(v10);
      if (!v9) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
    operator delete(v12);
    if (v11 < 0) {
      goto LABEL_14;
    }
  }
LABEL_8:
  if (!v9) {
    goto LABEL_11;
  }
LABEL_9:
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
LABEL_11:
  if (SHIBYTE(v6) < 0) {
    operator delete(v5[0]);
  }
}

void sub_215E078F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215E07920(char *__s, std::string *a2, std::string *a3, unsigned int *a4, std::string *a5, unsigned int *a6, std::string *a7)
{
  int v15 = 0;
  sub_2158C2970(v14, __s);
  uint64_t v18 = (std::string *)v14;
  uint64_t v19 = a2;
  size_t v20 = v14;
  size_t v21 = a2;
  uint64_t v22 = a2;
  if (v15 == -1) {
    sub_215742D4C();
  }
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_26C6860D8[v15])(&v16, v14);
  uint64_t v18 = (std::string *)v14;
  uint64_t v19 = a3;
  size_t v20 = v14;
  size_t v21 = a3;
  uint64_t v22 = a3;
  if (v15 == -1) {
    sub_215742D4C();
  }
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_26C6860F0[v15])(&v16, v14);
  std::to_string(&v16, *a4);
  uint64_t v18 = (std::string *)v14;
  uint64_t v19 = &v16;
  size_t v20 = v14;
  size_t v21 = &v16;
  uint64_t v22 = &v16;
  if (v15 == -1) {
    sub_215742D4C();
  }
  unsigned int v17 = &v18;
  ((void (*)(std::string ***, _DWORD *))off_26C686108[v15])(&v17, v14);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  uint64_t v18 = (std::string *)v14;
  uint64_t v19 = a5;
  size_t v20 = v14;
  size_t v21 = a5;
  uint64_t v22 = a5;
  if (v15 == -1) {
    sub_215742D4C();
  }
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_26C686120[v15])(&v16, v14);
  std::to_string(&v16, *a6);
  uint64_t v18 = (std::string *)v14;
  uint64_t v19 = &v16;
  size_t v20 = v14;
  size_t v21 = &v16;
  uint64_t v22 = &v16;
  if (v15 == -1) {
    sub_215742D4C();
  }
  unsigned int v17 = &v18;
  ((void (*)(std::string ***, _DWORD *))off_26C686108[v15])(&v17, v14);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  uint64_t v18 = (std::string *)v14;
  uint64_t v19 = a7;
  size_t v20 = v14;
  size_t v21 = a7;
  uint64_t v22 = a7;
  if (v15 == -1) {
    sub_215742D4C();
  }
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_26C686138[v15])(&v16, v14);
  if (v15 == -1) {
    sub_215742D4C();
  }
  uint64_t v18 = &v16;
  uint64_t result = ((uint64_t (*)(std::string **, _DWORD *))off_26C686150[v15])(&v18, v14);
  if (v15 != -1) {
    return ((uint64_t (*)(std::string **, _DWORD *))off_26C6860C0[v15])(&v18, v14);
  }
  return result;
}

void sub_215E07BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

void sub_215E07C10(std::string *a1, unsigned int a2, unsigned int a3)
{
  sub_215E077C8(a1, a2, a3, (uint64_t)v3);
  sub_21598E6D4((uint64_t)v3);
}

void sub_215E07C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  if ((_BYTE)a34)
  {
    if (a32)
    {
      if (a31 < 0) {
        operator delete(__p);
      }
      if (a24 < 0) {
        operator delete(a19);
      }
    }
    if (a18)
    {
      if (a17 < 0) {
        operator delete(a12);
      }
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215E07C8C(int **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  size_t v5 = (std::__shared_weak_count *)operator new(0x48uLL);
  v5->__shared_owners_ = 0;
  p_shared_owners = &v5->__shared_owners_;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6862A8;
  uint64_t v7 = sub_215E0814C(&v5[1].__vftable, v3, v4);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  *a2 = &unk_26C686198;
  a2[1] = v7;
  a2[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);

  std::__shared_weak_count::__release_weak(v5);
}

void sub_215E07DCC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_215E07DE4(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215E07E60(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215E07EEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t sub_215E07F14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

uint64_t sub_215E07F3C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t sub_215E07F64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

uint64_t sub_215E07F8C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))();
}

void sub_215E07FB4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C686240;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215E07FD4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C686240;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215E08028(uint64_t a1)
{
  char v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void sub_215E08044(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6862A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215E08064(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6862A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215E080B8(void *a1)
{
  char v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *sub_215E0814C(void *a1, int *a2, int *a3)
{
  *a1 = &unk_26C6862F8;
  uint64_t v6 = operator new(0x30uLL);
  void v6[3] = 0;
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *uint64_t v6 = &unk_26C686240;
  v6[4] = 0;
  v6[5] = 0;
  sub_215E088A0((uint64_t)(v6 + 3), a2, a3);
  a1[3] = 0;
  a1[1] = v6 + 3;
  a1[2] = v6;
  a1[4] = 0;
  a1[5] = 0;
  uint64_t v7 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    if (v7 < 0) {
      sub_2157E81A4();
    }
    uint64_t v8 = (char *)operator new((char *)a3 - (char *)a2);
    a1[3] = v8;
    a1[4] = v8;
    char v9 = &v8[4 * (v7 >> 2)];
    a1[5] = v9;
    if (a3 != a2) {
      memmove(v8, a2, (char *)a3 - (char *)a2);
    }
    a1[4] = v9;
  }
  return a1;
}

void sub_215E08250(_Unwind_Exception *a1)
{
  size_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 32) = v5;
    operator delete(v5);
  }
  sub_215733368(v2);
  _Unwind_Resume(a1);
}

void sub_215E08274(_Unwind_Exception *a1)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    v1[1].__shared_owners_ = (uint64_t)v4;
    operator delete(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void *sub_215E0829C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_215E08328(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215E083C4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_215E083D0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void sub_215E083DC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(unsigned int ***)(a1 + 8);
  size_t v5 = *v3;
  unint64_t v4 = v3[1];
  uint64_t v6 = (char *)v4 - (char *)*v3;
  if (v4 == *v3)
  {
    uint64_t v7 = 0;
    uint64_t v19 = 0;
    uint64_t v18 = 0;
  }
  else
  {
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFDLL) {
      sub_215CFB3BC();
    }
    uint64_t v7 = operator new(2 * v6);
    bzero(v7, 2 * v6);
    uint64_t v8 = v7;
    char v9 = v5;
    if ((unint64_t)(v6 - 4) < 0xC) {
      goto LABEL_14;
    }
    unint64_t v10 = ((unint64_t)(v6 - 4) >> 2) + 1;
    uint64_t v8 = (void *)v7 + (v10 & 0x7FFFFFFFFFFFFFFCLL);
    char v9 = &v5[v10 & 0x7FFFFFFFFFFFFFFCLL];
    char v11 = v5 + 2;
    uint64_t v12 = v7 + 1;
    uint64_t v13 = v10 & 0x7FFFFFFFFFFFFFFCLL;
    do
    {
      uint64_t v14 = *(v11 - 1);
      *(void *)&long long v15 = v14;
      *((void *)&v15 + 1) = HIDWORD(v14);
      long long v16 = v15;
      *(void *)&long long v15 = *v11;
      *((void *)&v15 + 1) = HIDWORD(*v11);
      *(v12 - 1) = v16;
      _OWORD *v12 = v15;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    if (v10 != (v10 & 0x7FFFFFFFFFFFFFFCLL))
    {
LABEL_14:
      do
      {
        unsigned int v17 = *v9++;
        *v8++ = v17;
      }
      while (v9 != v4);
    }
    uint64_t v18 = (char *)v7 + 8 * (v6 >> 2);
    uint64_t v19 = (char *)v7 + 2 * v6;
  }
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = v19;
  *(void *)(a2 + 16) = v18;
  *(unsigned char *)(a2 + 24) = 1;
}

void sub_215E08500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215E0851C()
{
  return 0;
}

void sub_215E08528(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  v12.__r_.__value_.__l.__size_ = 0;
  v12.__r_.__value_.__r.__words[2] = 0x700000000000000;
  strcpy((char *)&v12, "uint32:");
  int v14 = 0;
  if ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) <= 3)
  {
    sub_21576E734(v13, "{}");
    goto LABEL_16;
  }
  sub_2157491FC(v13, "{");
  unint64_t v4 = *(unsigned int **)(a1 + 24);
  std::to_string(&v15, *v4);
  long long v16 = (std::string *)v13;
  unsigned int v17 = &v15;
  uint64_t v18 = v13;
  uint64_t v19 = &v15;
  size_t v20 = &v15;
  if (v14 == -1) {
    sub_215742D4C();
  }
  size_t v21 = &v16;
  ((void (*)(std::string ***, _DWORD *))off_26C6861E8[v14])(&v21, v13);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    size_t v5 = *(unsigned int **)(a1 + 32);
    uint64_t v6 = v4 + 1;
    if (v6 != v5)
    {
LABEL_10:
      while (1)
      {
        long long v16 = (std::string *)v13;
        unsigned int v17 = (std::string *)",";
        uint64_t v18 = v13;
        uint64_t v19 = (std::string *)",";
        size_t v20 = (std::string *)",";
        if (v14 == -1) {
          break;
        }
        v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
        ((void (*)(std::string *, _DWORD *))off_26C686280[v14])(&v15, v13);
        std::to_string(&v15, *v6);
        long long v16 = (std::string *)v13;
        unsigned int v17 = &v15;
        uint64_t v18 = v13;
        uint64_t v19 = &v15;
        size_t v20 = &v15;
        if (v14 == -1) {
          sub_215742D4C();
        }
        size_t v21 = &v16;
        ((void (*)(std::string ***, _DWORD *))off_26C6861E8[v14])(&v21, v13);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v15.__r_.__value_.__l.__data_);
        }
        if (++v6 == v5) {
          goto LABEL_14;
        }
      }
LABEL_30:
      sub_215742D4C();
    }
  }
  else
  {
    size_t v5 = *(unsigned int **)(a1 + 32);
    uint64_t v6 = v4 + 1;
    if (v6 != v5) {
      goto LABEL_10;
    }
  }
LABEL_14:
  long long v16 = (std::string *)v13;
  unsigned int v17 = (std::string *)"}";
  uint64_t v18 = v13;
  uint64_t v19 = (std::string *)"}";
  size_t v20 = (std::string *)"}";
  if (v14 == -1) {
    goto LABEL_30;
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  ((void (*)(std::string *, _DWORD *))off_26C686280[v14])(&v15, v13);
LABEL_16:
  if (v14 == -1) {
    sub_215742D4C();
  }
  long long v16 = &v15;
  ((void (*)(void **__return_ptr, std::string **, _DWORD *))off_26C686218[v14])(__p, &v16, v13);
  if (v14 != -1) {
    ((void (*)(std::string **, _DWORD *))off_26C686200[v14])(&v16, v13);
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  if ((v11 & 0x80u) == 0) {
    std::string::size_type v8 = v11;
  }
  else {
    std::string::size_type v8 = (std::string::size_type)__p[1];
  }
  char v9 = std::string::append(&v12, (const std::string::value_type *)v7, v8);
  *a2 = *v9;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (((char)v11 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_29:
    operator delete(v12.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_29;
  }
}

void sub_215E08824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_215E088A0(uint64_t a1, int *a2, int *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    uint64_t v6 = *(char **)(a1 + 8);
    while (1)
    {
      int v8 = *v4;
      unint64_t v9 = *(void *)(a1 + 16);
      if ((unint64_t)v6 >= v9) {
        break;
      }
      *(_DWORD *)uint64_t v6 = v8;
      uint64_t v7 = (uint64_t)(v6 + 4);
LABEL_4:
      *(void *)(a1 + 8) = v7;
      ++v4;
      uint64_t v6 = (char *)v7;
      if (v4 == a3) {
        return;
      }
    }
    unint64_t v10 = *(char **)a1;
    uint64_t v11 = (uint64_t)&v6[-*(void *)a1];
    uint64_t v12 = v11 >> 2;
    unint64_t v13 = (v11 >> 2) + 1;
    if (v13 >> 62) {
      sub_2157E81A4();
    }
    uint64_t v14 = v9 - (void)v10;
    if (v14 >> 1 > v13) {
      unint64_t v13 = v14 >> 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 62) {
        sub_215738AD8();
      }
      long long v16 = operator new(4 * v15);
      unsigned int v17 = &v16[4 * v12];
      _DWORD *v17 = v8;
      uint64_t v7 = (uint64_t)(v17 + 1);
      int64_t v18 = v6 - v10;
      if (v6 == v10) {
        goto LABEL_29;
      }
    }
    else
    {
      long long v16 = 0;
      unsigned int v17 = (_DWORD *)(4 * v12);
      *(_DWORD *)(4 * v12) = v8;
      uint64_t v7 = 4 * v12 + 4;
      int64_t v18 = v6 - v10;
      if (v6 == v10) {
        goto LABEL_29;
      }
    }
    unint64_t v19 = v18 - 4;
    if (v19 >= 0xBC)
    {
      unint64_t v21 = (v6 - 4 - v10) & 0xFFFFFFFFFFFFFFFCLL;
      if (&v16[v11 - 4 - v21] > &v16[v11 - 4])
      {
        size_t v20 = v6;
      }
      else if (&v6[-v21 - 4] > v6 - 4)
      {
        size_t v20 = v6;
      }
      else if ((unint64_t)(v6 - v16 - v11) >= 0x20)
      {
        uint64_t v22 = (v19 >> 2) + 1;
        uint64_t v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
        size_t v20 = &v6[-v23];
        unsigned int v17 = (_DWORD *)((char *)v17 - v23);
        uint64_t v24 = &v16[4 * v12 - 16];
        uint64_t v25 = v6 - 16;
        uint64_t v26 = v22 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v27 = *(_OWORD *)v25;
          *(v24 - 1) = *((_OWORD *)v25 - 1);
          *uint64_t v24 = v27;
          v24 -= 2;
          v25 -= 32;
          v26 -= 8;
        }
        while (v26);
        if (v22 == (v22 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_29;
        }
      }
      else
      {
        size_t v20 = v6;
      }
    }
    else
    {
      size_t v20 = v6;
    }
    do
    {
      int v28 = *((_DWORD *)v20 - 1);
      v20 -= 4;
      *--unsigned int v17 = v28;
    }
    while (v20 != v10);
LABEL_29:
    *(void *)a1 = v17;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v16[4 * v15];
    if (v10) {
      operator delete(v10);
    }
    goto LABEL_4;
  }
}

__n128 sub_215E08A88(__n128 *a1, __n128 *a2, uint64_t a3)
{
  if (a3 != 16)
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21582FB60(exception, "requires a range of 16 bytes");
    __cxa_throw(exception, (struct type_info *)off_26425A320, MEMORY[0x263F8C080]);
  }
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void sub_215E08B00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215E08B14@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v4 = a1[2];
  unint64_t v5 = a1[3];
  unint64_t v6 = a1[4];
  unint64_t v7 = a1[5];
  unint64_t v8 = a1[6];
  unint64_t v9 = a1[7];
  unint64_t v10 = a1[8];
  unint64_t v11 = a1[9];
  unint64_t v12 = a1[10];
  unint64_t v13 = a1[11];
  unint64_t v14 = a1[12];
  unint64_t v15 = a1[13];
  unint64_t v16 = a1[14];
  unint64_t v17 = a1[15];
  a2[36] = 0;
  *a2 = a0123456789abcd[v2 >> 4];
  a2[1] = a0123456789abcd[v2 & 0xF];
  a2[2] = a0123456789abcd[v3 >> 4];
  a2[3] = a0123456789abcd[v3 & 0xF];
  a2[4] = a0123456789abcd[v4 >> 4];
  a2[5] = a0123456789abcd[v4 & 0xF];
  a2[6] = a0123456789abcd[v5 >> 4];
  a2[7] = a0123456789abcd[v5 & 0xF];
  uint64_t result = 45;
  a2[8] = 45;
  a2[9] = a0123456789abcd[v6 >> 4];
  a2[10] = a0123456789abcd[v6 & 0xF];
  a2[11] = a0123456789abcd[v7 >> 4];
  a2[12] = a0123456789abcd[v7 & 0xF];
  a2[13] = 45;
  a2[14] = a0123456789abcd[v8 >> 4];
  LOBYTE(v7) = a0123456789abcd[v9 >> 4];
  a2[15] = a0123456789abcd[v8 & 0xF];
  a2[16] = v7;
  a2[17] = a0123456789abcd[v9 & 0xF];
  a2[18] = 45;
  a2[19] = a0123456789abcd[v10 >> 4];
  a2[20] = a0123456789abcd[v10 & 0xF];
  a2[21] = a0123456789abcd[v11 >> 4];
  a2[22] = a0123456789abcd[v11 & 0xF];
  a2[23] = 45;
  LOBYTE(v11) = a0123456789abcd[v12 >> 4];
  LOBYTE(v12) = a0123456789abcd[v12 & 0xF];
  a2[24] = v11;
  a2[25] = v12;
  a2[26] = a0123456789abcd[v13 >> 4];
  LOBYTE(v12) = a0123456789abcd[v14 >> 4];
  a2[27] = a0123456789abcd[v13 & 0xF];
  a2[28] = v12;
  a2[29] = a0123456789abcd[v14 & 0xF];
  LOBYTE(v14) = a0123456789abcd[v15 >> 4];
  LOBYTE(v15) = a0123456789abcd[v15 & 0xF];
  a2[30] = v14;
  a2[31] = v15;
  a2[32] = a0123456789abcd[v16 >> 4];
  LOBYTE(v15) = a0123456789abcd[v17 >> 4];
  a2[33] = a0123456789abcd[v16 & 0xF];
  a2[34] = v15;
  a2[35] = a0123456789abcd[v17 & 0xF];
  return result;
}

unint64_t sub_215E08D00@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(result + 23);
  int v4 = (char)v3;
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(result + 8);
  }
  if (v3 != 36) {
    goto LABEL_209;
  }
  unint64_t v5 = (char *)result;
  if (v4 >= 0) {
    unint64_t v6 = (unsigned __int8 *)result;
  }
  else {
    unint64_t v6 = *(unsigned __int8 **)result;
  }
  if (!v6)
  {
    uint64_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
    if (result) {
      abort();
    }
  }
  if ((*v6 - 48) >= 0xAu)
  {
    unsigned int v7 = *v6 - 65;
    BOOL v8 = v7 > 0x25;
    uint64_t v9 = (1 << v7) & 0x3F0000003FLL;
    if (v8 || v9 == 0) {
      goto LABEL_209;
    }
  }
  if ((v6[1] - 48) >= 0xAu)
  {
    unsigned int v11 = v6[1] - 65;
    BOOL v8 = v11 > 0x25;
    uint64_t v12 = (1 << v11) & 0x3F0000003FLL;
    if (v8 || v12 == 0) {
      goto LABEL_209;
    }
  }
  if ((v6[2] - 48) >= 0xAu)
  {
    unsigned int v14 = v6[2] - 65;
    BOOL v8 = v14 > 0x25;
    uint64_t v15 = (1 << v14) & 0x3F0000003FLL;
    if (v8 || v15 == 0) {
      goto LABEL_209;
    }
  }
  if ((v6[3] - 48) >= 0xAu)
  {
    unsigned int v17 = v6[3] - 65;
    BOOL v8 = v17 > 0x25;
    uint64_t v18 = (1 << v17) & 0x3F0000003FLL;
    if (v8 || v18 == 0) {
      goto LABEL_209;
    }
  }
  if ((v6[4] - 48) >= 0xAu)
  {
    unsigned int v20 = v6[4] - 65;
    BOOL v8 = v20 > 0x25;
    uint64_t v21 = (1 << v20) & 0x3F0000003FLL;
    if (v8 || v21 == 0) {
      goto LABEL_209;
    }
  }
  if ((v6[5] - 48) >= 0xAu)
  {
    unsigned int v23 = v6[5] - 65;
    BOOL v8 = v23 > 0x25;
    uint64_t v24 = (1 << v23) & 0x3F0000003FLL;
    if (v8 || v24 == 0) {
      goto LABEL_209;
    }
  }
  if ((v6[6] - 48) >= 0xAu)
  {
    unsigned int v26 = v6[6] - 65;
    BOOL v8 = v26 > 0x25;
    uint64_t v27 = (1 << v26) & 0x3F0000003FLL;
    if (v8 || v27 == 0) {
      goto LABEL_209;
    }
  }
  if ((v6[7] - 48) >= 0xAu)
  {
    unsigned int v29 = v6[7] - 65;
    if (v29 > 0x25 || ((1 << v29) & 0x3F0000003FLL) == 0) {
      goto LABEL_209;
    }
  }
  uint64_t v30 = v5[23] >= 0 ? v5 : *(char **)v5;
  if (v30[8] != 45) {
    goto LABEL_209;
  }
  if ((v6[9] - 48) >= 0xAu)
  {
    unsigned int v31 = v6[9] - 65;
    if (v31 > 0x25 || ((1 << v31) & 0x3F0000003FLL) == 0) {
      goto LABEL_209;
    }
  }
  if ((v6[10] - 48) >= 0xAu)
  {
    unsigned int v32 = v6[10] - 65;
    if (v32 > 0x25 || ((1 << v32) & 0x3F0000003FLL) == 0) {
      goto LABEL_209;
    }
  }
  if ((v6[11] - 48) >= 0xAu)
  {
    unsigned int v33 = v6[11] - 65;
    if (v33 > 0x25 || ((1 << v33) & 0x3F0000003FLL) == 0) {
      goto LABEL_209;
    }
  }
  if ((v6[12] - 48) >= 0xAu)
  {
    unsigned int v34 = v6[12] - 65;
    if (v34 > 0x25 || ((1 << v34) & 0x3F0000003FLL) == 0) {
      goto LABEL_209;
    }
  }
  if (v30[13] != 45) {
    goto LABEL_209;
  }
  if ((v6[14] - 48) >= 0xAu)
  {
    unsigned int v35 = v6[14] - 65;
    if (v35 > 0x25 || ((1 << v35) & 0x3F0000003FLL) == 0) {
      goto LABEL_209;
    }
  }
  if ((v6[15] - 48) >= 0xAu)
  {
    unsigned int v36 = v6[15] - 65;
    if (v36 > 0x25 || ((1 << v36) & 0x3F0000003FLL) == 0) {
      goto LABEL_209;
    }
  }
  if ((v6[16] - 48) >= 0xAu)
  {
    unsigned int v37 = v6[16] - 65;
    if (v37 > 0x25 || ((1 << v37) & 0x3F0000003FLL) == 0) {
      goto LABEL_209;
    }
  }
  if ((v6[17] - 48) >= 0xAu)
  {
    unsigned int v38 = v6[17] - 65;
    if (v38 > 0x25 || ((1 << v38) & 0x3F0000003FLL) == 0) {
      goto LABEL_209;
    }
  }
  if (v30[18] != 45) {
    goto LABEL_209;
  }
  if ((v6[19] - 48) >= 0xAu)
  {
    unsigned int v39 = v6[19] - 65;
    if (v39 > 0x25 || ((1 << v39) & 0x3F0000003FLL) == 0) {
      goto LABEL_209;
    }
  }
  if ((v6[20] - 48) >= 0xAu)
  {
    unsigned int v40 = v6[20] - 65;
    if (v40 > 0x25 || ((1 << v40) & 0x3F0000003FLL) == 0) {
      goto LABEL_209;
    }
  }
  if ((v6[21] - 48) >= 0xAu)
  {
    unsigned int v41 = v6[21] - 65;
    if (v41 > 0x25 || ((1 << v41) & 0x3F0000003FLL) == 0) {
      goto LABEL_209;
    }
  }
  if ((v6[22] - 48) >= 0xAu)
  {
    unsigned int v42 = v6[22] - 65;
    if (v42 > 0x25 || ((1 << v42) & 0x3F0000003FLL) == 0) {
      goto LABEL_209;
    }
  }
  if (*(unsigned char *)(*(void *)v5 + 23) != 45) {
    goto LABEL_209;
  }
  if ((v6[24] - 48) >= 0xAu)
  {
    unsigned int v43 = v6[24] - 65;
    if (v43 > 0x25 || ((1 << v43) & 0x3F0000003FLL) == 0) {
      goto LABEL_209;
    }
  }
  if ((v6[25] - 48) >= 0xAu)
  {
    unsigned int v44 = v6[25] - 65;
    if (v44 > 0x25 || ((1 << v44) & 0x3F0000003FLL) == 0) {
      goto LABEL_209;
    }
  }
  if ((v6[26] - 48) >= 0xAu)
  {
    unsigned int v45 = v6[26] - 65;
    if (v45 > 0x25 || ((1 << v45) & 0x3F0000003FLL) == 0) {
      goto LABEL_209;
    }
  }
  if ((v6[27] - 48) >= 0xAu)
  {
    unsigned int v46 = v6[27] - 65;
    if (v46 > 0x25 || ((1 << v46) & 0x3F0000003FLL) == 0) {
      goto LABEL_209;
    }
  }
  if ((v6[28] - 48) >= 0xAu)
  {
    unsigned int v47 = v6[28] - 65;
    if (v47 > 0x25 || ((1 << v47) & 0x3F0000003FLL) == 0) {
      goto LABEL_209;
    }
  }
  if (((v6[29] - 48) < 0xAu || (unsigned int v48 = v6[29] - 65, v48 <= 0x25)
                                              && ((1 << v48) & 0x3F0000003FLL) != 0)
    && ((v6[30] - 48) < 0xAu || (unsigned int v49 = v6[30] - 65, v49 <= 0x25)
                                              && ((1 << v49) & 0x3F0000003FLL) != 0)
    && ((v6[31] - 48) < 0xAu || (unsigned int v50 = v6[31] - 65, v50 <= 0x25)
                                              && ((1 << v50) & 0x3F0000003FLL) != 0)
    && ((v6[32] - 48) < 0xAu || (unsigned int v51 = v6[32] - 65, v51 <= 0x25)
                                              && ((1 << v51) & 0x3F0000003FLL) != 0)
    && ((v6[33] - 48) < 0xAu || (unsigned int v52 = v6[33] - 65, v52 <= 0x25)
                                              && ((1 << v52) & 0x3F0000003FLL) != 0)
    && ((v6[34] - 48) < 0xAu || (unsigned int v53 = v6[34] - 65, v53 <= 0x25)
                                              && ((1 << v53) & 0x3F0000003FLL) != 0)
    && ((v6[35] - 48) < 0xAu || (unsigned int v54 = v6[35] - 65, v54 <= 0x25)
                                              && ((1 << v54) & 0x3F0000003FLL) != 0))
  {
    int v55 = *v30;
    if (v55 >= 58) {
      char v56 = 9;
    }
    else {
      char v56 = 0;
    }
    char v57 = v56 + v55;
    char v58 = v30[1];
    int v59 = v58;
    char v60 = v58 - 48;
    char v61 = (v58 & 0xDF) - 55;
    if (v59 < 58) {
      char v61 = v60;
    }
    uint64_t v62 = (v61 | (16 * v57));
    int v63 = v30[2];
    if (v63 >= 58) {
      char v64 = 9;
    }
    else {
      char v64 = 0;
    }
    char v65 = v64 + v63;
    char v66 = v30[3];
    int v67 = v66;
    char v68 = v66 - 48;
    char v69 = (v66 & 0xDF) - 55;
    if (v67 < 58) {
      char v69 = v68;
    }
    unint64_t v70 = v62 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)(v69 | (16 * v65)) << 8);
    int v71 = v30[4];
    if (v71 >= 58) {
      char v72 = 9;
    }
    else {
      char v72 = 0;
    }
    char v73 = v72 + v71;
    char v74 = v30[5];
    int v75 = v74;
    char v76 = v74 - 48;
    char v77 = (v74 & 0xDF) - 55;
    if (v75 < 58) {
      char v77 = v76;
    }
    unint64_t v78 = v70 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)(v77 | (16 * v73)) << 16);
    int v79 = v30[6];
    if (v79 >= 58) {
      char v80 = 9;
    }
    else {
      char v80 = 0;
    }
    char v81 = v80 + v79;
    char v82 = v30[7];
    int v83 = v82;
    char v84 = v82 - 48;
    char v85 = (v82 & 0xDF) - 55;
    if (v83 < 58) {
      char v85 = v84;
    }
    unint64_t v86 = v78 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)(v85 | (16 * v81)) << 24);
    int v87 = v30[9];
    if (v87 >= 58) {
      char v88 = 9;
    }
    else {
      char v88 = 0;
    }
    char v89 = v88 + v87;
    char v90 = v30[10];
    int v91 = v90;
    char v92 = v90 - 48;
    char v93 = (v90 & 0xDF) - 55;
    if (v91 < 58) {
      char v93 = v92;
    }
    uint64_t v94 = (v93 | (16 * v89));
    int v95 = v30[11];
    if (v95 >= 58) {
      char v96 = 9;
    }
    else {
      char v96 = 0;
    }
    char v97 = v96 + v95;
    char v98 = v30[12];
    int v99 = v98;
    char v100 = v98 - 48;
    char v101 = (v98 & 0xDF) - 55;
    if (v99 < 58) {
      char v101 = v100;
    }
    unsigned __int8 v102 = v101 | (16 * v97);
    unint64_t v103 = v86 | (v94 << 32);
    int v104 = v30[14];
    if (v104 >= 58) {
      char v105 = 9;
    }
    else {
      char v105 = 0;
    }
    char v106 = v105 + v104;
    char v107 = v30[15];
    int v108 = v107;
    char v109 = v107 - 48;
    char v110 = (v107 & 0xDF) - 55;
    if (v108 < 58) {
      char v110 = v109;
    }
    unsigned __int8 v111 = v110 | (16 * v106);
    int v112 = v30[16];
    if (v112 >= 58) {
      int v113 = 9;
    }
    else {
      int v113 = 0;
    }
    int v114 = v113 + v112;
    int v115 = v30[17];
    if (v115 >= 58) {
      int v116 = (v115 & 0xDF) - 55;
    }
    else {
      int v116 = v115 - 48;
    }
    int v117 = v30[19];
    if (v117 >= 58) {
      char v118 = 9;
    }
    else {
      char v118 = 0;
    }
    char v119 = v118 + v117;
    char v120 = v30[20];
    int v121 = v120;
    char v122 = v120 - 48;
    char v123 = (v120 & 0xDF) - 55;
    if (v121 < 58) {
      char v123 = v122;
    }
    uint64_t v124 = (v123 | (16 * v119));
    int v125 = v30[21];
    if (v125 >= 58) {
      char v126 = 9;
    }
    else {
      char v126 = 0;
    }
    char v127 = v126 + v125;
    char v128 = v30[22];
    int v129 = v128;
    char v130 = v128 - 48;
    char v131 = (v128 & 0xDF) - 55;
    if (v129 < 58) {
      char v131 = v130;
    }
    unint64_t v132 = v124 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)(v131 | (16 * v127)) << 8);
    int v133 = v30[24];
    if (v133 >= 58) {
      char v134 = 9;
    }
    else {
      char v134 = 0;
    }
    char v135 = v134 + v133;
    char v136 = v30[25];
    int v137 = v136;
    char v138 = v136 - 48;
    char v139 = (v136 & 0xDF) - 55;
    if (v137 < 58) {
      char v139 = v138;
    }
    unint64_t v140 = v132 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)(v139 | (16 * v135)) << 16);
    int v141 = v30[26];
    if (v141 >= 58) {
      char v142 = 9;
    }
    else {
      char v142 = 0;
    }
    char v143 = v142 + v141;
    char v144 = v30[27];
    int v145 = v144;
    char v146 = v144 - 48;
    char v147 = (v144 & 0xDF) - 55;
    if (v145 < 58) {
      char v147 = v146;
    }
    unint64_t v148 = v140 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)(v147 | (16 * v143)) << 24);
    int v149 = v30[28];
    if (v149 >= 58) {
      char v150 = 9;
    }
    else {
      char v150 = 0;
    }
    char v151 = v150 + v149;
    int v152 = v30[29];
    int v153 = (char)v152;
    unsigned int v154 = v152 - 48;
    LODWORD(result) = (v152 & 0xFFFFFFDF) - 55;
    if (v153 >= 58) {
      uint64_t result = result;
    }
    else {
      uint64_t result = v154;
    }
    int v155 = v30[30];
    if (v155 >= 58) {
      char v156 = 9;
    }
    else {
      char v156 = 0;
    }
    char v157 = v156 + v155;
    char v158 = v30[31];
    BOOL v8 = v158 < 58;
    int v159 = v30[32];
    char v160 = v30[33];
    char v161 = v158 - 48;
    char v162 = (v158 & 0xDF) - 55;
    if (v8) {
      char v162 = v161;
    }
    if (v159 >= 58) {
      char v163 = 9;
    }
    else {
      char v163 = 0;
    }
    char v164 = v163 + v159;
    BOOL v8 = v160 < 58;
    char v165 = v160 - 48;
    char v166 = (v160 & 0xDF) - 55;
    if (v8) {
      char v166 = v165;
    }
    int v167 = v30[34];
    if (v167 >= 58) {
      int v168 = 9;
    }
    else {
      int v168 = 0;
    }
    int v169 = v168 + v167;
    uint64_t v170 = v116 | (16 * v114);
    int v171 = v30[35];
    int v172 = v171 & 0xDF;
    BOOL v8 = v171 < 58;
    int v173 = v171 - 48;
    int v174 = v172 - 55;
    if (!v8) {
      int v173 = v174;
    }
    *(void *)a2 = v103 | ((unint64_t)v102 << 40) | ((unint64_t)v111 << 48) | (v170 << 56);
    *(void *)(a2 + 8) = v148 | ((unint64_t)(result | (16 * v151)) << 32) | ((unint64_t)(v162 | (16 * v157)) << 40) | ((unint64_t)(v166 | (16 * v164)) << 48) | ((unint64_t)(v173 | (16 * v169)) << 56);
    *(unsigned char *)(a2 + 16) = 1;
  }
  else
  {
LABEL_209:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
  return result;
}

void sub_215E097D8(int a1)
{
  exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  int v5 = 0;
  sub_2157FD010(v4, "Invalid ArithmeticType value '");
  std::to_string(&v6, a1);
  BOOL v8 = (std::string *)v4;
  uint64_t v9 = &v6;
  unint64_t v10 = v4;
  unsigned int v11 = &v6;
  uint64_t v12 = &v6;
  if (v5 == -1) {
    sub_215742D4C();
  }
  unsigned int v7 = &v8;
  ((void (*)(std::string ***, _DWORD *))off_26C686348[v5])(&v7, v4);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  BOOL v8 = (std::string *)v4;
  uint64_t v9 = (std::string *)"'";
  unint64_t v10 = v4;
  unsigned int v11 = (std::string *)"'";
  uint64_t v12 = (std::string *)"'";
  if (v5 == -1) {
    sub_215742D4C();
  }
  v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
  ((void (*)(std::string *, _DWORD *))off_26C686390[v5])(&v6, v4);
  if (v5 == -1) {
    sub_215742D4C();
  }
  BOOL v8 = &v6;
  ((void (*)(std::string *__return_ptr, std::string **, _DWORD *))off_26C686378[v5])(&v3, &v8, v4);
  if (v5 != -1) {
    ((void (*)(std::string **, _DWORD *))off_26C686360[v5])(&v8, v4);
  }
  std::logic_error::logic_error(exception, &v3);
  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  __cxa_throw(exception, (struct type_info *)off_26425A320, MEMORY[0x263F8C080]);
}

void sub_215E09978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void *sub_215E099DC(void *a1, unsigned char *a2)
{
  switch(*a2)
  {
    case 0:
      unint64_t v2 = "u8";
      uint64_t v3 = 2;
      break;
    case 1:
      unint64_t v2 = "u16";
      uint64_t v3 = 3;
      break;
    case 2:
      unint64_t v2 = "u32";
      uint64_t v3 = 3;
      break;
    case 3:
      unint64_t v2 = "u64";
      uint64_t v3 = 3;
      break;
    case 5:
      unint64_t v2 = "i8";
      uint64_t v3 = 2;
      break;
    case 6:
      unint64_t v2 = "i16";
      uint64_t v3 = 3;
      break;
    case 7:
      unint64_t v2 = "i32";
      uint64_t v3 = 3;
      break;
    case 8:
      unint64_t v2 = "i64";
      uint64_t v3 = 3;
      break;
    case 0xB:
      unint64_t v2 = "f32";
      uint64_t v3 = 3;
      break;
    case 0xC:
      unint64_t v2 = "f64";
      uint64_t v3 = 3;
      break;
    default:
      unint64_t v2 = "unknown arithmetic type";
      uint64_t v3 = 23;
      break;
  }
  return sub_215731D94(a1, (uint64_t)v2, v3);
}

uint64_t *sub_215E09AEC(uint64_t *a1, unsigned char *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890630, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267890630))
  {
    sub_215E09DAC();
  }
  uint64_t v24 = 0;
  size_t v25 = 0;
  uint64_t v26 = 0;
  sub_215A9B3F0(a1, (uint64_t)&v24);
  uint64_t v4 = qword_267890640;
  if (!qword_267890640) {
    goto LABEL_41;
  }
  int v5 = SHIBYTE(v26);
  std::string v6 = v24;
  if (v26 >= 0) {
    unsigned int v7 = &v24;
  }
  else {
    unsigned int v7 = (void **)v24;
  }
  if (v26 >= 0) {
    size_t v8 = HIBYTE(v26);
  }
  else {
    size_t v8 = v25;
  }
  uint64_t v9 = &qword_267890640;
  do
  {
    while (1)
    {
      int v10 = *(char *)(v4 + 55);
      unsigned int v11 = v10 >= 0 ? (const void *)(v4 + 32) : *(const void **)(v4 + 32);
      size_t v12 = v10 >= 0 ? *(unsigned __int8 *)(v4 + 55) : *(void *)(v4 + 40);
      size_t v13 = v8 >= v12 ? v12 : v8;
      int v14 = memcmp(v11, v7, v13);
      if (v14) {
        break;
      }
      if (v12 >= v8) {
        goto LABEL_24;
      }
LABEL_10:
      uint64_t v4 = *(void *)(v4 + 8);
      if (!v4) {
        goto LABEL_25;
      }
    }
    if (v14 < 0) {
      goto LABEL_10;
    }
LABEL_24:
    uint64_t v9 = (uint64_t *)v4;
    uint64_t v4 = *(void *)v4;
  }
  while (v4);
LABEL_25:
  if (v9 == &qword_267890640) {
    goto LABEL_41;
  }
  int v15 = *((char *)v9 + 55);
  if (v15 >= 0) {
    unint64_t v16 = v9 + 4;
  }
  else {
    unint64_t v16 = (const void *)v9[4];
  }
  if (v15 >= 0) {
    size_t v17 = *((unsigned __int8 *)v9 + 55);
  }
  else {
    size_t v17 = v9[5];
  }
  if (v17 >= v8) {
    size_t v18 = v8;
  }
  else {
    size_t v18 = v17;
  }
  int v19 = memcmp(v7, v16, v18);
  if (v19)
  {
    if ((v19 & 0x80000000) == 0) {
      goto LABEL_37;
    }
LABEL_41:
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    sub_215AEDCD0(", expected [u|i|f][{size}]", &v22, &v23);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A320, MEMORY[0x263F8C080]);
  }
  if (v8 < v17) {
    goto LABEL_41;
  }
LABEL_37:
  *a2 = *((unsigned char *)v9 + 56);
  if (v5 < 0) {
    operator delete(v6);
  }
  return a1;
}

void sub_215E09D1C(_Unwind_Exception *a1)
{
}

void sub_215E09D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v28 & 1) == 0)
    {
LABEL_8:
      if (a27 < 0) {
        operator delete(a22);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void sub_215E09DAC()
{
  qword_267890640 = 0;
  qword_267890648 = 0;
  qword_267890638 = (uint64_t)&qword_267890640;
  sub_2157E3DE8();
}

void sub_215E0A100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215E0A16C(uint64_t a1)
{
  return a1;
}

void sub_215E0A198(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  LOBYTE(__p[0]) = 0;
  char v12 = 0;
  if (*(unsigned char *)(a1 + 96))
  {
    char v5 = 0;
    if (*(unsigned char *)(a1 + 24))
    {
      *(_OWORD *)long long __p = *(_OWORD *)a1;
      uint64_t v4 = *(void *)(a1 + 16);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      char v5 = 1;
    }
    LOBYTE(v6) = 0;
    char v11 = 0;
    if (*(unsigned char *)(a1 + 88))
    {
      uint64_t v2 = *(void *)(a1 + 56);
      uint64_t v7 = *(void *)(a1 + 48);
      long long v6 = *(_OWORD *)(a1 + 32);
      *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 32) = 0;
      uint64_t v8 = v2;
      *(_OWORD *)uint64_t v9 = *(_OWORD *)(a1 + 64);
      uint64_t v10 = *(void *)(a1 + 80);
      *(void *)(a1 + 64) = 0;
      *(void *)(a1 + 72) = 0;
      *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 0;
      char v11 = 1;
    }
    char v12 = 1;
  }
  sub_2157CFBCC(0x16u, (long long *)__p, a2);
  if (v12)
  {
    if (!v11) {
      goto LABEL_11;
    }
    if (SHIBYTE(v10) < 0)
    {
      operator delete(v9[0]);
      if ((SHIBYTE(v7) & 0x80000000) == 0)
      {
LABEL_11:
        if (!v5) {
          return;
        }
        goto LABEL_12;
      }
    }
    else if ((SHIBYTE(v7) & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete((void *)v6);
    if (!v5) {
      return;
    }
LABEL_12:
    if (SHIBYTE(v4) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_215E0A2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215E0A2D0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  LOBYTE(__p[0]) = 0;
  char v12 = 0;
  if (*(unsigned char *)(a1 + 96))
  {
    char v5 = 0;
    if (*(unsigned char *)(a1 + 24))
    {
      *(_OWORD *)long long __p = *(_OWORD *)a1;
      uint64_t v4 = *(void *)(a1 + 16);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      char v5 = 1;
    }
    LOBYTE(v6) = 0;
    char v11 = 0;
    if (*(unsigned char *)(a1 + 88))
    {
      uint64_t v2 = *(void *)(a1 + 56);
      uint64_t v7 = *(void *)(a1 + 48);
      long long v6 = *(_OWORD *)(a1 + 32);
      *(void *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 32) = 0;
      uint64_t v8 = v2;
      *(_OWORD *)uint64_t v9 = *(_OWORD *)(a1 + 64);
      uint64_t v10 = *(void *)(a1 + 80);
      *(void *)(a1 + 64) = 0;
      *(void *)(a1 + 72) = 0;
      *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = 0;
      char v11 = 1;
    }
    char v12 = 1;
  }
  sub_2157CFBCC(0x66u, (long long *)__p, a2);
  if (v12)
  {
    if (!v11) {
      goto LABEL_11;
    }
    if (SHIBYTE(v10) < 0)
    {
      operator delete(v9[0]);
      if ((SHIBYTE(v7) & 0x80000000) == 0)
      {
LABEL_11:
        if (!v5) {
          return;
        }
        goto LABEL_12;
      }
    }
    else if ((SHIBYTE(v7) & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete((void *)v6);
    if (!v5) {
      return;
    }
LABEL_12:
    if (SHIBYTE(v4) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_215E0A3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215E0A408(uint64_t a1)
{
  char v2 = 0;
  if (*(unsigned char *)a1)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215E0A4F0();
  }
  return *(void *)(a1 + 8);
}

void sub_215E0A4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void sub_215E0A4F0()
{
  v0[6] = 0;
  sub_2157E52AC(v0, "Value of type ");
  sub_2157E3DE8();
}

void sub_215E0A608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215E0A61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215E0A630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215E0A644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215E0A658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215E0A66C(uint64_t a1)
{
  char v2 = 1;
  if (*(unsigned char *)a1 != 1)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215E0A4F0();
  }
  return *(void *)(a1 + 8);
}

void sub_215E0A724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_215E0A75C(uint64_t a1)
{
  char v2 = 2;
  if (*(unsigned char *)a1 != 2)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215E0A4F0();
  }
  return *(void *)(a1 + 8);
}

void sub_215E0A814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_215E0A84C(uint64_t a1)
{
  char v2 = 3;
  if (*(unsigned char *)a1 != 3)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215E0A4F0();
  }
  return *(void *)(a1 + 8);
}

void sub_215E0A904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_215E0A93C(uint64_t a1)
{
  char v2 = 5;
  if (*(unsigned char *)a1 != 5)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215E0A4F0();
  }
  return *(void *)(a1 + 8);
}

void sub_215E0A9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_215E0AA2C(uint64_t a1)
{
  char v2 = 6;
  if (*(unsigned char *)a1 != 6)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215E0A4F0();
  }
  return *(void *)(a1 + 8);
}

void sub_215E0AAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_215E0AB1C(uint64_t a1)
{
  char v2 = 7;
  if (*(unsigned char *)a1 != 7)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215E0A4F0();
  }
  return *(void *)(a1 + 8);
}

void sub_215E0ABD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_215E0AC0C(uint64_t a1)
{
  char v2 = 8;
  if (*(unsigned char *)a1 != 8)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215E0A4F0();
  }
  return *(void *)(a1 + 8);
}

void sub_215E0ACC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_215E0ACFC(uint64_t a1)
{
  char v2 = 11;
  if (*(unsigned char *)a1 != 11)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215E0A4F0();
  }
  return *(void *)(a1 + 8);
}

void sub_215E0ADB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_215E0ADEC(uint64_t a1)
{
  char v2 = 12;
  if (*(unsigned char *)a1 != 12)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215E0A4F0();
  }
  return *(void *)(a1 + 8);
}

void sub_215E0AEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_215E0AEDC(unsigned __int8 *a1, unsigned char *a2)
{
  int v3 = *a1;
  switch(v3)
  {
    case 0:
      sub_215E0A408((uint64_t)a1);
      char v5 = (unsigned __int8 *)sub_215E0A408((uint64_t)a1);
      int v6 = *a2;
      unint64_t v7 = *v5;
      switch(*a2)
      {
        case 0:
          goto LABEL_4;
        case 1:
          goto LABEL_40;
        case 2:
          goto LABEL_25;
        case 3:
          goto LABEL_22;
        case 5:
          goto LABEL_28;
        case 6:
          goto LABEL_29;
        case 7:
          goto LABEL_30;
        case 8:
          goto LABEL_33;
        case 0xB:
          goto LABEL_36;
        case 0xC:
          goto LABEL_37;
        default:
          goto LABEL_21;
      }
    case 1:
      sub_215E0A66C((uint64_t)a1);
      uint64_t v8 = (unsigned __int16 *)sub_215E0A66C((uint64_t)a1);
      int v6 = *a2;
      unint64_t v7 = *v8;
      switch(*a2)
      {
        case 0:
LABEL_4:
          sub_215E0A408((uint64_t)a2);
          unsigned int v9 = *(unsigned __int8 *)sub_215E0A408((uint64_t)a2);
          goto LABEL_55;
        case 1:
LABEL_40:
          sub_215E0A66C((uint64_t)a2);
          unsigned int v9 = *(unsigned __int16 *)sub_215E0A66C((uint64_t)a2);
          goto LABEL_55;
        case 2:
          goto LABEL_25;
        case 3:
          goto LABEL_22;
        case 5:
          goto LABEL_28;
        case 6:
          goto LABEL_29;
        case 7:
          goto LABEL_30;
        case 8:
          goto LABEL_33;
        case 0xB:
          goto LABEL_36;
        case 0xC:
          goto LABEL_37;
        default:
          goto LABEL_21;
      }
    case 2:
      sub_215E0A75C((uint64_t)a1);
      uint64_t v10 = (unsigned int *)sub_215E0A75C((uint64_t)a1);
      int v6 = *a2;
      unint64_t v7 = *v10;
      switch(*a2)
      {
        case 0:
          sub_215E0A408((uint64_t)a2);
          unsigned int v11 = *(unsigned __int8 *)sub_215E0A408((uint64_t)a2);
          goto LABEL_50;
        case 1:
          sub_215E0A66C((uint64_t)a2);
          unsigned int v11 = *(unsigned __int16 *)sub_215E0A66C((uint64_t)a2);
          goto LABEL_50;
        case 2:
          goto LABEL_45;
        case 3:
          goto LABEL_22;
        case 5:
          sub_215E0A93C((uint64_t)a2);
          unsigned int v11 = *(char *)sub_215E0A93C((uint64_t)a2);
          goto LABEL_50;
        case 6:
          sub_215E0AA2C((uint64_t)a2);
          unsigned int v11 = *(__int16 *)sub_215E0AA2C((uint64_t)a2);
LABEL_50:
          if (v7 < v11) {
            return 0xFFFFFFFFLL;
          }
          else {
            return v7 > v11;
          }
        case 7:
          sub_215E0AB1C((uint64_t)a2);
          unsigned int v36 = (unsigned int *)sub_215E0AB1C((uint64_t)a2);
          goto LABEL_54;
        case 8:
          goto LABEL_33;
        case 0xB:
LABEL_36:
          sub_215E0ACFC((uint64_t)a2);
          float v31 = *(float *)sub_215E0ACFC((uint64_t)a2);
          float v32 = (float)v7;
          goto LABEL_94;
        case 0xC:
LABEL_37:
          sub_215E0ADEC((uint64_t)a2);
          double v33 = *(double *)sub_215E0ADEC((uint64_t)a2);
          double v34 = (double)v7;
          goto LABEL_110;
        default:
          goto LABEL_21;
      }
    case 3:
      sub_215E0A84C((uint64_t)a1);
      char v12 = (uint64_t *)sub_215E0A84C((uint64_t)a1);
      int v6 = *a2;
      uint64_t v13 = *v12;
      switch(*a2)
      {
        case 0:
          sub_215E0A408((uint64_t)a2);
          unint64_t v14 = *(unsigned __int8 *)sub_215E0A408((uint64_t)a2);
          goto LABEL_63;
        case 1:
          sub_215E0A66C((uint64_t)a2);
          unint64_t v14 = *(unsigned __int16 *)sub_215E0A66C((uint64_t)a2);
          goto LABEL_63;
        case 2:
          sub_215E0A75C((uint64_t)a2);
          unint64_t v14 = *(unsigned int *)sub_215E0A75C((uint64_t)a2);
          goto LABEL_63;
        case 3:
          goto LABEL_46;
        case 5:
          sub_215E0A93C((uint64_t)a2);
          unint64_t v14 = *(char *)sub_215E0A93C((uint64_t)a2);
          goto LABEL_63;
        case 6:
          sub_215E0AA2C((uint64_t)a2);
          unint64_t v14 = *(__int16 *)sub_215E0AA2C((uint64_t)a2);
          goto LABEL_63;
        case 7:
          sub_215E0AB1C((uint64_t)a2);
          unint64_t v14 = *(int *)sub_215E0AB1C((uint64_t)a2);
LABEL_63:
          BOOL v38 = v13 >= v14;
          BOOL v39 = v13 > v14;
          if (v38) {
            return v39;
          }
          else {
            return 0xFFFFFFFFLL;
          }
        case 8:
          sub_215E0AC0C((uint64_t)a2);
          unsigned int v37 = (void *)sub_215E0AC0C((uint64_t)a2);
          goto LABEL_67;
        case 0xB:
          sub_215E0ACFC((uint64_t)a2);
          float v31 = *(float *)sub_215E0ACFC((uint64_t)a2);
          float v32 = (float)(unint64_t)v13;
          goto LABEL_94;
        case 0xC:
          sub_215E0ADEC((uint64_t)a2);
          double v33 = *(double *)sub_215E0ADEC((uint64_t)a2);
          double v34 = (double)(unint64_t)v13;
          goto LABEL_110;
        default:
          goto LABEL_21;
      }
    case 5:
      sub_215E0A93C((uint64_t)a1);
      int v15 = (char *)sub_215E0A93C((uint64_t)a1);
      int v6 = *a2;
      unint64_t v7 = *v15;
      switch(*a2)
      {
        case 0:
          goto LABEL_11;
        case 1:
          goto LABEL_41;
        case 2:
          goto LABEL_25;
        case 3:
          goto LABEL_22;
        case 5:
          goto LABEL_28;
        case 6:
          goto LABEL_29;
        case 7:
          goto LABEL_30;
        case 8:
          goto LABEL_42;
        case 0xB:
          goto LABEL_38;
        case 0xC:
          goto LABEL_39;
        default:
          goto LABEL_21;
      }
    case 6:
      sub_215E0AA2C((uint64_t)a1);
      unint64_t v16 = (__int16 *)sub_215E0AA2C((uint64_t)a1);
      int v6 = *a2;
      unint64_t v7 = *v16;
      switch(*a2)
      {
        case 0:
LABEL_11:
          sub_215E0A408((uint64_t)a2);
          int v17 = *(unsigned __int8 *)sub_215E0A408((uint64_t)a2);
          goto LABEL_79;
        case 1:
LABEL_41:
          sub_215E0A66C((uint64_t)a2);
          int v17 = *(unsigned __int16 *)sub_215E0A66C((uint64_t)a2);
          goto LABEL_79;
        case 2:
LABEL_25:
          sub_215E0A75C((uint64_t)a2);
          int v28 = (_DWORD *)sub_215E0A75C((uint64_t)a2);
          if (*v28 > v7) {
            return 0xFFFFFFFFLL;
          }
          else {
            return *v28 < v7;
          }
        case 3:
          goto LABEL_22;
        case 5:
LABEL_28:
          sub_215E0A93C((uint64_t)a2);
          int v17 = *(char *)sub_215E0A93C((uint64_t)a2);
          goto LABEL_79;
        case 6:
LABEL_29:
          sub_215E0AA2C((uint64_t)a2);
          int v17 = *(__int16 *)sub_215E0AA2C((uint64_t)a2);
          goto LABEL_79;
        case 7:
LABEL_30:
          sub_215E0AB1C((uint64_t)a2);
          unsigned int v29 = (_DWORD *)sub_215E0AB1C((uint64_t)a2);
          if (*v29 > (int)v7) {
            return 0xFFFFFFFFLL;
          }
          else {
            return *v29 < (int)v7;
          }
        case 8:
LABEL_42:
          sub_215E0AC0C((uint64_t)a2);
          unsigned int v35 = (void *)sub_215E0AC0C((uint64_t)a2);
          if (*v35 > (int)v7) {
            return 0xFFFFFFFFLL;
          }
          else {
            return *v35 < (int)v7;
          }
        case 0xB:
          goto LABEL_38;
        case 0xC:
          goto LABEL_39;
        default:
          goto LABEL_21;
      }
    case 7:
      sub_215E0AB1C((uint64_t)a1);
      size_t v18 = (int *)sub_215E0AB1C((uint64_t)a1);
      int v6 = *a2;
      unint64_t v7 = *v18;
      switch(*a2)
      {
        case 0:
          sub_215E0A408((uint64_t)a2);
          int v19 = *(unsigned __int8 *)sub_215E0A408((uint64_t)a2);
          goto LABEL_75;
        case 1:
          sub_215E0A66C((uint64_t)a2);
          int v19 = *(unsigned __int16 *)sub_215E0A66C((uint64_t)a2);
          goto LABEL_75;
        case 2:
LABEL_45:
          sub_215E0A75C((uint64_t)a2);
          unsigned int v36 = (unsigned int *)sub_215E0A75C((uint64_t)a2);
LABEL_54:
          unsigned int v9 = *v36;
LABEL_55:
          if (v7 < v9) {
            return 0xFFFFFFFFLL;
          }
          else {
            return v9 < v7;
          }
        case 3:
LABEL_22:
          sub_215E0A84C((uint64_t)a2);
          uint64_t v26 = (unint64_t *)sub_215E0A84C((uint64_t)a2);
          if (*v26 > v7) {
            return 0xFFFFFFFFLL;
          }
          else {
            return *v26 < v7;
          }
        case 5:
          sub_215E0A93C((uint64_t)a2);
          int v19 = *(char *)sub_215E0A93C((uint64_t)a2);
          goto LABEL_75;
        case 6:
          sub_215E0AA2C((uint64_t)a2);
          int v19 = *(__int16 *)sub_215E0AA2C((uint64_t)a2);
LABEL_75:
          if ((int)v7 < v19) {
            return 0xFFFFFFFFLL;
          }
          else {
            return (int)v7 > v19;
          }
        case 7:
          sub_215E0AB1C((uint64_t)a2);
          int v17 = *(_DWORD *)sub_215E0AB1C((uint64_t)a2);
LABEL_79:
          if ((int)v7 < v17) {
            return 0xFFFFFFFFLL;
          }
          else {
            return v17 < (int)v7;
          }
        case 8:
LABEL_33:
          sub_215E0AC0C((uint64_t)a2);
          uint64_t v30 = (void *)sub_215E0AC0C((uint64_t)a2);
          if (*v30 > (int64_t)v7) {
            return 0xFFFFFFFFLL;
          }
          else {
            return *v30 < (uint64_t)v7;
          }
        case 0xB:
LABEL_38:
          sub_215E0ACFC((uint64_t)a2);
          float v31 = *(float *)sub_215E0ACFC((uint64_t)a2);
          float v32 = (float)(int)v7;
          goto LABEL_94;
        case 0xC:
LABEL_39:
          sub_215E0ADEC((uint64_t)a2);
          double v33 = *(double *)sub_215E0ADEC((uint64_t)a2);
          double v34 = (double)(int)v7;
          goto LABEL_110;
        default:
          goto LABEL_21;
      }
    case 8:
      sub_215E0AC0C((uint64_t)a1);
      unsigned int v20 = (uint64_t *)sub_215E0AC0C((uint64_t)a1);
      int v6 = *a2;
      uint64_t v13 = *v20;
      switch(*a2)
      {
        case 0:
          sub_215E0A408((uint64_t)a2);
          uint64_t v21 = *(unsigned __int8 *)sub_215E0A408((uint64_t)a2);
          goto LABEL_87;
        case 1:
          sub_215E0A66C((uint64_t)a2);
          uint64_t v21 = *(unsigned __int16 *)sub_215E0A66C((uint64_t)a2);
          goto LABEL_87;
        case 2:
          sub_215E0A75C((uint64_t)a2);
          uint64_t v21 = *(unsigned int *)sub_215E0A75C((uint64_t)a2);
          goto LABEL_87;
        case 3:
LABEL_46:
          sub_215E0A84C((uint64_t)a2);
          unsigned int v37 = (void *)sub_215E0A84C((uint64_t)a2);
LABEL_67:
          if ((unint64_t)v13 < *v37) {
            return 0xFFFFFFFFLL;
          }
          else {
            return *v37 < (unint64_t)v13;
          }
        case 5:
          sub_215E0A93C((uint64_t)a2);
          uint64_t v21 = *(char *)sub_215E0A93C((uint64_t)a2);
          goto LABEL_87;
        case 6:
          sub_215E0AA2C((uint64_t)a2);
          uint64_t v21 = *(__int16 *)sub_215E0AA2C((uint64_t)a2);
          goto LABEL_87;
        case 7:
          sub_215E0AB1C((uint64_t)a2);
          uint64_t v21 = *(int *)sub_215E0AB1C((uint64_t)a2);
LABEL_87:
          BOOL v40 = v13 < v21;
          BOOL v41 = v13 > v21;
          if (v40) {
            return 0xFFFFFFFFLL;
          }
          else {
            return v41;
          }
        case 8:
          sub_215E0AC0C((uint64_t)a2);
          uint64_t v42 = *(void *)sub_215E0AC0C((uint64_t)a2);
          if (v13 < v42) {
            return 0xFFFFFFFFLL;
          }
          else {
            return v42 < v13;
          }
        case 0xB:
          sub_215E0ACFC((uint64_t)a2);
          float v31 = *(float *)sub_215E0ACFC((uint64_t)a2);
          float v32 = (float)v13;
LABEL_94:
          if (v31 > v32) {
            return 0xFFFFFFFFLL;
          }
          else {
            return v31 < v32;
          }
        case 0xC:
          sub_215E0ADEC((uint64_t)a2);
          double v33 = *(double *)sub_215E0ADEC((uint64_t)a2);
          double v34 = (double)v13;
          goto LABEL_110;
        default:
LABEL_21:
          sub_215E097D8(v6);
      }
    case 11:
      sub_215E0ACFC((uint64_t)a1);
      float v22 = *(float *)sub_215E0ACFC((uint64_t)a1);
      int v3 = *a2;
      switch(*a2)
      {
        case 0:
          sub_215E0A408((uint64_t)a2);
          LOBYTE(v23) = *(unsigned char *)sub_215E0A408((uint64_t)a2);
          goto LABEL_100;
        case 1:
          sub_215E0A66C((uint64_t)a2);
          LOWORD(v23) = *(_WORD *)sub_215E0A66C((uint64_t)a2);
          goto LABEL_100;
        case 2:
          sub_215E0A75C((uint64_t)a2);
          unsigned int v23 = *(_DWORD *)sub_215E0A75C((uint64_t)a2);
LABEL_100:
          float v43 = (float)v23;
          goto LABEL_106;
        case 3:
          sub_215E0A84C((uint64_t)a2);
          float v43 = (float)*(unint64_t *)sub_215E0A84C((uint64_t)a2);
          goto LABEL_106;
        case 5:
          sub_215E0A93C((uint64_t)a2);
          v44.i8[0] = *(unsigned char *)sub_215E0A93C((uint64_t)a2);
          float v43 = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v44)).i32[0];
          goto LABEL_106;
        case 6:
          sub_215E0AA2C((uint64_t)a2);
          v45.i16[0] = *(_WORD *)sub_215E0AA2C((uint64_t)a2);
          float v43 = (float)vmovl_s16(v45).i32[0];
          goto LABEL_106;
        case 7:
          sub_215E0AB1C((uint64_t)a2);
          float v43 = (float)*(int *)sub_215E0AB1C((uint64_t)a2);
          goto LABEL_106;
        case 8:
          sub_215E0AC0C((uint64_t)a2);
          float v43 = (float)*(uint64_t *)sub_215E0AC0C((uint64_t)a2);
LABEL_106:
          if (v22 < v43) {
            return 0xFFFFFFFFLL;
          }
          else {
            return v22 > v43;
          }
        case 0xB:
          sub_215E0ACFC((uint64_t)a2);
          float v50 = *(float *)sub_215E0ACFC((uint64_t)a2);
          if (v22 < v50) {
            return 0xFFFFFFFFLL;
          }
          else {
            return v50 < v22;
          }
        case 0xC:
          sub_215E0ADEC((uint64_t)a2);
          double v33 = *(double *)sub_215E0ADEC((uint64_t)a2);
          double v34 = v22;
LABEL_110:
          if (v33 > v34) {
            return 0xFFFFFFFFLL;
          }
          else {
            return v33 < v34;
          }
        default:
          goto LABEL_20;
      }
    case 12:
      sub_215E0ADEC((uint64_t)a1);
      double v24 = *(double *)sub_215E0ADEC((uint64_t)a1);
      int v3 = *a2;
      switch(*a2)
      {
        case 0:
          sub_215E0A408((uint64_t)a2);
          LOBYTE(v25) = *(unsigned char *)sub_215E0A408((uint64_t)a2);
          goto LABEL_116;
        case 1:
          sub_215E0A66C((uint64_t)a2);
          LOWORD(v25) = *(_WORD *)sub_215E0A66C((uint64_t)a2);
          goto LABEL_116;
        case 2:
          sub_215E0A75C((uint64_t)a2);
          LODWORD(v25) = *(_DWORD *)sub_215E0A75C((uint64_t)a2);
          goto LABEL_116;
        case 3:
          sub_215E0A84C((uint64_t)a2);
          unint64_t v25 = *(void *)sub_215E0A84C((uint64_t)a2);
LABEL_116:
          double v46 = (double)v25;
          goto LABEL_123;
        case 5:
          sub_215E0A93C((uint64_t)a2);
          double v46 = (double)*(char *)sub_215E0A93C((uint64_t)a2);
          goto LABEL_123;
        case 6:
          sub_215E0AA2C((uint64_t)a2);
          v47.i16[0] = *(_WORD *)sub_215E0AA2C((uint64_t)a2);
          uint64_t v48 = vmovl_s16(v47).i32[0];
          goto LABEL_120;
        case 7:
          sub_215E0AB1C((uint64_t)a2);
          uint64_t v48 = *(int *)sub_215E0AB1C((uint64_t)a2);
LABEL_120:
          double v46 = (double)v48;
          goto LABEL_123;
        case 8:
          sub_215E0AC0C((uint64_t)a2);
          double v46 = (double)*(uint64_t *)sub_215E0AC0C((uint64_t)a2);
          goto LABEL_123;
        case 0xB:
          sub_215E0ACFC((uint64_t)a2);
          double v46 = *(float *)sub_215E0ACFC((uint64_t)a2);
LABEL_123:
          if (v24 < v46) {
            return 0xFFFFFFFFLL;
          }
          else {
            return v24 > v46;
          }
        case 0xC:
          sub_215E0ADEC((uint64_t)a2);
          double v49 = *(double *)sub_215E0ADEC((uint64_t)a2);
          if (v24 < v49) {
            return 0xFFFFFFFFLL;
          }
          else {
            return v49 < v24;
          }
        default:
          goto LABEL_20;
      }
    default:
      break;
  }
LABEL_20:
  sub_215E097D8(v3);
}

void *sub_215E0BD1C(void *a1, std::string::value_type *a2)
{
  uint64_t v4 = sub_215731D94(a1, (uint64_t)"{", 1);
  v17.__r_.__value_.__s.__data_[0] = *a2;
  char v5 = sub_215E099DC(v4, &v17);
  sub_215731D94(v5, (uint64_t)",", 1);
  switch(*a2)
  {
    case 0:
      int v6 = (unsigned __int8 *)sub_215E0A408((uint64_t)a2);
      std::to_string(&v17, *v6);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v7 = &v17;
      }
      else {
        unint64_t v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
      }
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v17.__r_.__value_.__l.__size_;
      }
      goto LABEL_51;
    case 1:
      unsigned int v9 = (unsigned __int16 *)sub_215E0A66C((uint64_t)a2);
      std::to_string(&v17, *v9);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v7 = &v17;
      }
      else {
        unint64_t v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
      }
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v17.__r_.__value_.__l.__size_;
      }
      goto LABEL_51;
    case 2:
      uint64_t v10 = (unsigned int *)sub_215E0A75C((uint64_t)a2);
      std::to_string(&v17, *v10);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v7 = &v17;
      }
      else {
        unint64_t v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
      }
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v17.__r_.__value_.__l.__size_;
      }
      goto LABEL_51;
    case 3:
      unsigned int v11 = (unint64_t *)sub_215E0A84C((uint64_t)a2);
      std::to_string(&v17, *v11);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v7 = &v17;
      }
      else {
        unint64_t v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
      }
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v17.__r_.__value_.__l.__size_;
      }
      goto LABEL_51;
    case 5:
      int v15 = (char *)sub_215E0A93C((uint64_t)a2);
      std::to_string(&v17, *v15);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v7 = &v17;
      }
      else {
        unint64_t v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
      }
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v17.__r_.__value_.__l.__size_;
      }
      goto LABEL_51;
    case 6:
      char v12 = (__int16 *)sub_215E0AA2C((uint64_t)a2);
      std::to_string(&v17, *v12);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v7 = &v17;
      }
      else {
        unint64_t v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
      }
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v17.__r_.__value_.__l.__size_;
      }
      goto LABEL_51;
    case 7:
      uint64_t v13 = (int *)sub_215E0AB1C((uint64_t)a2);
      std::to_string(&v17, *v13);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v7 = &v17;
      }
      else {
        unint64_t v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
      }
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v17.__r_.__value_.__l.__size_;
      }
      goto LABEL_51;
    case 8:
      unint64_t v14 = (uint64_t *)sub_215E0AC0C((uint64_t)a2);
      std::to_string(&v17, *v14);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v7 = &v17;
      }
      else {
        unint64_t v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
      }
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v17.__r_.__value_.__l.__size_;
      }
LABEL_51:
      sub_215731D94(a1, (uint64_t)v7, size);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      break;
    case 11:
      LODWORD(v18) = *(_DWORD *)sub_215E0ACFC((uint64_t)a2);
      v17.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
      sub_2159CA5FC((uint64_t)&v19, &v17, (float *)&v18);
      break;
    case 12:
      double v18 = *(double *)sub_215E0ADEC((uint64_t)a2);
      v17.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
      sub_215D179A8((uint64_t)&v19, &v17, &v18);
      break;
    default:
      sub_215E097D8(*a2);
  }
  return sub_215731D94(a1, (uint64_t)"}", 1);
}

void sub_215E0C000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215E0C06C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  v39[19] = *MEMORY[0x263EF8340];
  sub_215D0DDD0((uint64_t)&v27);
  uint64_t v10 = v27;
  *(_DWORD *)((char *)&v27 + *(void *)(v27 - 24) + 8) = *(_DWORD *)((unsigned char *)&v27 + *(void *)(v27 - 24) + 8) & 0xFFFFFFB5 | 8;
  unsigned int v11 = (const std::ios_base *)((char *)&v27 + *(void *)(v10 - 24));
  if (v11[1].__fmtflags_ != -1)
  {
    v11[1].__fmtflags_ = 48;
    if (!a1) {
      goto LABEL_11;
    }
LABEL_5:
    int v13 = 0;
    for (uint64_t i = a1 - 1; ; --i)
    {
      v13 |= *(unsigned char *)(a2 + i) != 0;
      if (v13)
      {
        *(const void **)((char *)&v30 + *(void *)(v27 - 24)) = (const void *)2;
        std::ostream::operator<<();
        if (!i) {
          goto LABEL_12;
        }
      }
      else if (!i)
      {
        goto LABEL_11;
      }
    }
  }
  std::ios_base::getloc(v11);
  char v12 = std::locale::use_facet(&v26, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 32);
  std::locale::~locale(&v26);
  v11[1].__fmtflags_ = 48;
  if (a1) {
    goto LABEL_5;
  }
LABEL_11:
  *(const void **)((char *)&v30 + *(void *)(v27 - 24)) = (const void *)2;
  std::ostream::operator<<();
LABEL_12:
  if ((v38 & 0x10) != 0)
  {
    unint64_t v17 = v37;
    if (v37 < v34)
    {
      unint64_t v37 = v34;
      unint64_t v17 = v34;
    }
    double v18 = v33;
    size_t v15 = v17 - (void)v33;
    if (v17 - (unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_33;
    }
  }
  else
  {
    if ((v38 & 8) == 0)
    {
      size_t v15 = 0;
      HIBYTE(v25) = 0;
      unint64_t v16 = &v23;
      goto LABEL_25;
    }
    double v18 = v30;
    size_t v15 = v32 - (void)v30;
    if ((unint64_t)(v32 - (void)v30) >= 0x7FFFFFFFFFFFFFF8) {
LABEL_33:
    }
      sub_215731CD8();
  }
  if (v15 >= 0x17)
  {
    uint64_t v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v19 = v15 | 7;
    }
    uint64_t v20 = v19 + 1;
    unint64_t v16 = operator new(v19 + 1);
    size_t v24 = v15;
    int64_t v25 = v20 | 0x8000000000000000;
    unsigned int v23 = v16;
    goto LABEL_24;
  }
  HIBYTE(v25) = v15;
  unint64_t v16 = &v23;
  if (v15) {
LABEL_24:
  }
    memmove(v16, v18, v15);
LABEL_25:
  *((unsigned char *)v16 + v15) = 0;
  uint64_t v27 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&v27 + *(void *)(v27 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  uint64_t v28 = MEMORY[0x263F8C318] + 16;
  if (v36 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2166C4BF0](v39);
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  size_t v21 = HIBYTE(v25);
  float v22 = &v23;
  if (v25 < 0)
  {
    float v22 = v23;
    size_t v21 = v24;
  }
  unsigned int v29 = v22;
  uint64_t v30 = (const void *)v21;
  sub_2157430CC((uint64_t)&v27, (uint64_t)&v31, 0, 0, a5);
  if (SHIBYTE(v25) < 0) {
    operator delete(v23);
  }
}

void sub_215E0C458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215D0DF74((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215E0C46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215D0DF74((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215E0C480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, char a13)
{
}

void sub_215E0C49C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215E0C4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215D0DF74((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215E0C4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215D0DF74((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_215E0C4EC(void *a1, unsigned int *a2)
{
  sub_215E0C678();
  uint64_t v4 = qword_267890870;
  if (!qword_267890870) {
    goto LABEL_12;
  }
  unsigned int v5 = *a2;
  int v6 = &qword_267890870;
  do
  {
    unsigned int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      unsigned int v9 = (uint64_t *)v4;
    }
    else {
      unsigned int v9 = (uint64_t *)(v4 + 8);
    }
    if (v8) {
      int v6 = (uint64_t *)v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 != &qword_267890870 && v5 >= *((_DWORD *)v6 + 8))
  {
    sub_215E0C678();
    uint64_t v17 = v6[5];
    uint64_t v18 = v6[6];
    return sub_215731D94(a1, v17, v18);
  }
  else
  {
LABEL_12:
    sub_215E0C678();
    unsigned int v20 = *a2;
    uint64_t v10 = sub_215731D94(a1, (uint64_t)"Unknown pixel format '", 22);
    sub_215E0D490((uint64_t)&v21, (uint64_t)&v20, 0, 0, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    int v13 = sub_215731D94(v10, (uint64_t)p_p, size);
    sub_215731D94(v13, (uint64_t)"' (=", 4);
    unint64_t v14 = (void *)std::ostream::operator<<();
    uint64_t result = sub_215731D94(v14, (uint64_t)")", 1);
    unint64_t v16 = result;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      return v16;
    }
  }
  return result;
}

void sub_215E0C65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215E0C678()
{
  uint64_t v238 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890650, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_267890650))
    {
      LODWORD(v0[0]) = 1278226488;
      v0[1] = (uint64_t)"OneComponent8";
      v0[2] = 13;
      int v1 = 24;
      char v2 = "24RGB";
      uint64_t v3 = 5;
      int v4 = 32;
      unsigned int v5 = "32ARGB";
      uint64_t v6 = 6;
      int v7 = 1111970369;
      BOOL v8 = "32BGRA";
      uint64_t v9 = 6;
      int v10 = 1647719521;
      unsigned int v11 = "64ARGB";
      uint64_t v12 = 6;
      int v13 = 1647589490;
      unint64_t v14 = "48RGB";
      uint64_t v15 = 5;
      int v16 = 1647392359;
      uint64_t v17 = "16Gray";
      uint64_t v18 = 6;
      int v19 = 875704438;
      unsigned int v20 = "420YpCbCr8BiPlanarVideoRange";
      uint64_t v21 = 28;
      int v22 = 875704422;
      unsigned int v23 = "420YpCbCr8BiPlanarFullRange";
      uint64_t v24 = 27;
      int v25 = 875836534;
      std::locale v26 = "444YpCbCr8BiPlanarVideoRange";
      uint64_t v27 = 28;
      int v28 = 875836518;
      unsigned int v29 = "444YpCbCr8BiPlanarFullRange";
      uint64_t v30 = 27;
      int v31 = 843264056;
      uint64_t v32 = "TwoComponent8";
      uint64_t v33 = 13;
      int v34 = 1278226536;
      unsigned int v35 = "OneComponent16Half";
      uint64_t v36 = 18;
      int v37 = 1278226534;
      int v38 = "OneComponent32Float";
      uint64_t v39 = 19;
      int v40 = 843264104;
      BOOL v41 = "TwoComponent16Half";
      uint64_t v42 = 18;
      int v43 = 843264102;
      int8x8_t v44 = "TwoComponent32Float";
      uint64_t v45 = 19;
      int v46 = 1380411457;
      int16x4_t v47 = "64RGBAHalf";
      uint64_t v48 = 10;
      int v49 = 1380410945;
      float v50 = "128RGBAFloat";
      uint64_t v51 = 12;
      int v52 = 1751411059;
      unsigned int v53 = "DisparityFloat16";
      uint64_t v54 = 16;
      int v55 = 1717856627;
      char v56 = "DisparityFloat32";
      uint64_t v57 = 16;
      int v58 = 1751410032;
      int v59 = "DepthFloat16";
      uint64_t v60 = 12;
      int v61 = 1717855600;
      uint64_t v62 = "DepthFloat32";
      uint64_t v63 = 12;
      int v64 = 842285639;
      char v65 = "24BGR";
      uint64_t v66 = 5;
      int v67 = 1380401729;
      char v68 = "32RGBA";
      uint64_t v69 = 6;
      int v70 = 1094862674;
      int v71 = "32ABGR";
      uint64_t v72 = 6;
      int v73 = 1278226742;
      char v74 = "OneComponent16";
      uint64_t v75 = 14;
      int v76 = 843264310;
      char v77 = "TwoComponent16";
      uint64_t v78 = 14;
      int v79 = 1;
      char v80 = "1Monochrome";
      uint64_t v81 = 11;
      int v82 = 2;
      int v83 = "2Indexed";
      uint64_t v84 = 8;
      int v85 = 4;
      unint64_t v86 = "4Indexed";
      uint64_t v87 = 8;
      int v88 = 8;
      char v89 = "8Indexed";
      uint64_t v90 = 8;
      int v91 = 33;
      char v92 = "1IndexedGray_WhiteIsZero";
      uint64_t v93 = 24;
      int v94 = 34;
      int v95 = "2IndexedGray_WhiteIsZero";
      uint64_t v96 = 24;
      int v97 = 36;
      char v98 = "4IndexedGray_WhiteIsZero";
      uint64_t v99 = 24;
      int v100 = 40;
      char v101 = "8IndexedGray_WhiteIsZero";
      uint64_t v102 = 24;
      int v103 = 16;
      int v104 = "16BE555";
      uint64_t v105 = 7;
      int v106 = 1278555445;
      char v107 = "16LE555";
      uint64_t v108 = 7;
      int v109 = 892679473;
      char v110 = "16LE5551";
      uint64_t v111 = 8;
      int v112 = 1110783541;
      int v113 = "16BE565";
      uint64_t v114 = 7;
      int v115 = 1278555701;
      int v116 = "16LE565";
      uint64_t v117 = 7;
      int v118 = 1815491698;
      char v119 = "64RGBALE";
      uint64_t v120 = 8;
      int v121 = 1647522401;
      char v122 = "32AlphaGray";
      uint64_t v123 = 11;
      int v124 = 1378955371;
      int v125 = "30RGB";
      uint64_t v126 = 5;
      int v127 = 846624121;
      char v128 = "422YpCbCr8";
      uint64_t v129 = 10;
      int v130 = 1983131704;
      char v131 = "4444YpCbCrA8";
      uint64_t v132 = 12;
      int v133 = 1916022840;
      char v134 = "4444YpCbCrA8R";
      uint64_t v135 = 13;
      int v136 = 2033463352;
      int v137 = "4444AYpCbCr8";
      uint64_t v138 = 12;
      int v139 = 2033463606;
      unint64_t v140 = "4444AYpCbCr16";
      uint64_t v141 = 13;
      int v142 = 1983066168;
      char v143 = "444YpCbCr8";
      uint64_t v144 = 10;
      int v145 = 1983000886;
      char v146 = "422YpCbCr16";
      uint64_t v147 = 11;
      int v148 = 1983000880;
      int v149 = "422YpCbCr10";
      uint64_t v150 = 11;
      int v151 = 1983131952;
      int v152 = "444YpCbCr10";
      uint64_t v153 = 11;
      int v154 = 2033463856;
      int v155 = "420YpCbCr8Planar";
      uint64_t v156 = 16;
      int v157 = 1714696752;
      char v158 = "420YpCbCr8PlanarFullRange";
      uint64_t v159 = 25;
      int v160 = 1630697081;
      char v161 = "422YpCbCr_4A_8BiPlanar";
      uint64_t v162 = 22;
      int v163 = 875704950;
      char v164 = "422YpCbCr8BiPlanarVideoRange";
      uint64_t v165 = 28;
      int v166 = 875704934;
      int v167 = "422YpCbCr8BiPlanarFullRange";
      uint64_t v168 = 27;
      int v169 = 2037741171;
      uint64_t v170 = "422YpCbCr8_yuvs";
      uint64_t v171 = 15;
      int v172 = 2037741158;
      int v173 = "422YpCbCr8FullRange";
      uint64_t v174 = 19;
      int v175 = 1999843442;
      int v176 = "30RGBLEPackedWideGamut";
      uint64_t v177 = 22;
      int v178 = 1815162994;
      size_t v179 = "ARGB2101010LEPacked";
      uint64_t v180 = 19;
      int v181 = 1999908961;
      int v182 = "40ARGBLEWideGamut";
      uint64_t v183 = 17;
      int v184 = 1999908973;
      int v185 = "40ARGBLEWideGamutPremultiplied";
      uint64_t v186 = 30;
      int v187 = 1278226736;
      int v188 = "OneComponent10";
      uint64_t v189 = 14;
      int v190 = 1278226738;
      size_t v191 = "OneComponent12";
      uint64_t v192 = 14;
      int v193 = 1735549492;
      int v194 = "14Bayer_GRBG";
      uint64_t v195 = 12;
      int v196 = 1919379252;
      int v197 = "14Bayer_RGGB";
      uint64_t v198 = 12;
      int v199 = 1650943796;
      size_t v200 = "14Bayer_BGGR";
      uint64_t v201 = 12;
      int v202 = 1734505012;
      int v203 = "14Bayer_GBRG";
      uint64_t v204 = 12;
      int v205 = 1751411059;
      int v206 = "DisparityFloat16";
      uint64_t v207 = 16;
      int v208 = 1717856627;
      uint64_t v209 = "DisparityFloat32";
      uint64_t v210 = 16;
      int v211 = 2016686640;
      int v212 = "420YpCbCr10BiPlanarVideoRange";
      uint64_t v213 = 29;
      int v214 = 2016686642;
      int v215 = "422YpCbCr10BiPlanarVideoRange";
      uint64_t v216 = 29;
      int v217 = 2016687156;
      int v218 = "444YpCbCr10BiPlanarVideoRange";
      uint64_t v219 = 29;
      int v220 = 2019963440;
      unint64_t v221 = "420YpCbCr10BiPlanarFullRange";
      uint64_t v222 = 28;
      int v223 = 2019963442;
      std::string::size_type v224 = "422YpCbCr10BiPlanarFullRange";
      uint64_t v225 = 28;
      int v226 = 2019963956;
      size_t v227 = "444YpCbCr10BiPlanarFullRange";
      uint64_t v228 = 28;
      int v229 = 1982882104;
      unsigned int v230 = "420YpCbCr8VideoRange_8A_TriPlanar";
      uint64_t v231 = 33;
      int v232 = 1651519798;
      std::string::size_type v233 = "16VersatileBayer";
      uint64_t v234 = 16;
      int v235 = 1651521076;
      unint64_t v236 = "64RGBA_DownscaledProResRAW";
      uint64_t v237 = 26;
      sub_215E0D2F8(v0, 80);
      __cxa_atexit((void (*)(void *))sub_215E0D2CC, &qword_267890868, &dword_21572C000);
      __cxa_guard_release(&qword_267890650);
    }
  }
}

void sub_215E0CF30(_Unwind_Exception *a1)
{
}

uint64_t sub_215E0CF48()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890658, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267890658))
  {
    sub_215E0C678();
    sub_215E0CFE8();
    __cxa_atexit((void (*)(void *))sub_2157F68A8, &qword_267890660, &dword_21572C000);
    __cxa_guard_release(&qword_267890658);
  }
  return (*(void *)algn_267890668 - qword_267890660) >> 2;
}

void sub_215E0CFD0(_Unwind_Exception *a1)
{
}

void sub_215E0CFE8()
{
  uint64_t v0 = qword_267890878;
  std::locale v26 = 0;
  if (qword_267890878)
  {
    if ((unint64_t)qword_267890878 >> 62) {
      sub_215738AC0();
    }
    int v1 = operator new(4 * qword_267890878);
    unint64_t v2 = (unint64_t)&v1[v0];
    std::locale v26 = v1;
    uint64_t v3 = qword_267890868;
    if ((uint64_t *)qword_267890868 != &qword_267890870) {
      goto LABEL_4;
    }
LABEL_43:
    uint64_t v6 = (uint64_t)v1;
    goto LABEL_44;
  }
  unint64_t v2 = 0;
  int v1 = 0;
  uint64_t v3 = qword_267890868;
  if ((uint64_t *)qword_267890868 == &qword_267890870) {
    goto LABEL_43;
  }
LABEL_4:
  int v4 = v1;
  do
  {
    int v5 = *(_DWORD *)(v3 + 32);
    if ((unint64_t)v1 < v2)
    {
      *int v1 = v5;
      uint64_t v6 = (uint64_t)(v1 + 1);
      int v7 = *(uint64_t **)(v3 + 8);
      if (!v7) {
        goto LABEL_28;
      }
      goto LABEL_26;
    }
    uint64_t v8 = ((char *)v1 - v4) >> 2;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62) {
      sub_215738AC0();
    }
    if ((uint64_t)(v2 - (void)v4) >> 1 > v9) {
      unint64_t v9 = (uint64_t)(v2 - (void)v4) >> 1;
    }
    if (v2 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10)
    {
      if (v10 >> 62) {
        sub_215738AD8();
      }
      unsigned int v11 = operator new(4 * v10);
      uint64_t v12 = &v11[4 * v8];
      _DWORD *v12 = v5;
      uint64_t v6 = (uint64_t)(v12 + 1);
      int64_t v13 = (char *)v1 - v4;
      if (v1 == (_DWORD *)v4) {
        goto LABEL_23;
      }
    }
    else
    {
      unsigned int v11 = 0;
      uint64_t v12 = (_DWORD *)(4 * v8);
      *(_DWORD *)(4 * v8) = v5;
      uint64_t v6 = 4 * v8 + 4;
      int64_t v13 = (char *)v1 - v4;
      if (v1 == (_DWORD *)v4) {
        goto LABEL_23;
      }
    }
    unint64_t v14 = v13 - 4;
    if (v14 < 0xBC)
    {
      uint64_t v15 = v1;
      goto LABEL_22;
    }
    unint64_t v19 = ((char *)(v1 - 1) - v4) & 0xFFFFFFFFFFFFFFFCLL;
    if (&v11[(char *)v1 - v4 - 4 - v19] > &v11[(char *)v1 - v4 - 4])
    {
      uint64_t v15 = v1;
      do
      {
LABEL_22:
        int v16 = *--v15;
        *--uint64_t v12 = v16;
      }
      while (v15 != (_DWORD *)v4);
      goto LABEL_23;
    }
    if ((_DWORD *)((char *)v1 - v19 - 4) > v1 - 1)
    {
      uint64_t v15 = v1;
      goto LABEL_22;
    }
    if ((unint64_t)(v4 - v11) < 0x20)
    {
      uint64_t v15 = v1;
      goto LABEL_22;
    }
    uint64_t v20 = (v14 >> 2) + 1;
    uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v15 = &v1[v21 / 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v12 = (_DWORD *)((char *)v12 - v21);
    int v22 = &v11[4 * v8 - 16];
    unsigned int v23 = (long long *)(v1 - 4);
    uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v25 = *v23;
      *(v22 - 1) = *(v23 - 1);
      _OWORD *v22 = v25;
      v22 -= 2;
      v23 -= 2;
      v24 -= 8;
    }
    while (v24);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_22;
    }
LABEL_23:
    unint64_t v2 = (unint64_t)&v11[4 * v10];
    std::locale v26 = v12;
    if (v4) {
      operator delete(v4);
    }
    int v4 = v12;
    int v7 = *(uint64_t **)(v3 + 8);
    if (!v7)
    {
      do
      {
LABEL_28:
        uint64_t v17 = *(uint64_t **)(v3 + 16);
        BOOL v18 = *v17 == v3;
        uint64_t v3 = (uint64_t)v17;
      }
      while (!v18);
      goto LABEL_5;
    }
    do
    {
LABEL_26:
      uint64_t v17 = v7;
      int v7 = (uint64_t *)*v7;
    }
    while (v7);
LABEL_5:
    int v1 = (_DWORD *)v6;
    uint64_t v3 = (uint64_t)v17;
  }
  while (v17 != &qword_267890870);
  int v1 = v26;
LABEL_44:
  qword_267890660 = (uint64_t)v1;
  *(void *)algn_267890668 = v6;
  qword_267890670 = v2;
}

void sub_215E0D2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215E0D2CC(uint64_t a1)
{
  return a1;
}

uint64_t *sub_215E0D2F8(uint64_t *result, uint64_t a2)
{
  qword_267890878 = 0;
  qword_267890870 = 0;
  qword_267890868 = (uint64_t)&qword_267890870;
  if (a2)
  {
    unint64_t v2 = result;
    uint64_t v3 = 0;
    int v4 = &result[3 * a2];
LABEL_6:
    uint64_t v6 = &qword_267890870;
LABEL_10:
    if (v3)
    {
      unint64_t v10 = v6 + 1;
      if (v6[1]) {
        goto LABEL_24;
      }
    }
    else
    {
LABEL_20:
      unint64_t v10 = &qword_267890870;
      uint64_t v6 = &qword_267890870;
    }
LABEL_21:
    int64_t v13 = operator new(0x38uLL);
    long long v14 = *(_OWORD *)v2;
    _DWORD v13[6] = v2[2];
    *((_OWORD *)v13 + 2) = v14;
    *int64_t v13 = 0;
    v13[1] = 0;
    void v13[2] = v6;
    *unint64_t v10 = (uint64_t)v13;
    if (*(void *)qword_267890868)
    {
      qword_267890868 = *(void *)qword_267890868;
      int64_t v13 = (void *)*v10;
    }
    uint64_t result = sub_21573B048((uint64_t *)qword_267890870, v13);
    ++qword_267890878;
LABEL_24:
    while (1)
    {
      v2 += 3;
      if (v2 == v4) {
        break;
      }
      uint64_t v3 = qword_267890870;
      if ((uint64_t *)qword_267890868 == &qword_267890870) {
        goto LABEL_6;
      }
      uint64_t v5 = qword_267890870;
      if (qword_267890870)
      {
        do
        {
          uint64_t v6 = (uint64_t *)v5;
          uint64_t v5 = *(void *)(v5 + 8);
        }
        while (v5);
      }
      else
      {
        int v7 = &qword_267890870;
        do
        {
          uint64_t v6 = (uint64_t *)v7[2];
          BOOL v8 = *v6 == (void)v7;
          int v7 = v6;
        }
        while (v8);
      }
      unsigned int v9 = *(_DWORD *)v2;
      if (*((_DWORD *)v6 + 8) < *(_DWORD *)v2) {
        goto LABEL_10;
      }
      if (!qword_267890870) {
        goto LABEL_20;
      }
      uint64_t v11 = qword_267890870;
      while (1)
      {
        while (1)
        {
          uint64_t v6 = (uint64_t *)v11;
          unsigned int v12 = *(_DWORD *)(v11 + 32);
          if (v12 <= v9) {
            break;
          }
          uint64_t v11 = *v6;
          unint64_t v10 = v6;
          if (!*v6) {
            goto LABEL_21;
          }
        }
        if (v12 >= v9) {
          break;
        }
        uint64_t v11 = v6[1];
        if (!v11)
        {
          unint64_t v10 = v6 + 1;
          goto LABEL_21;
        }
      }
    }
  }
  return result;
}

void sub_215E0D47C(_Unwind_Exception *a1)
{
  sub_215ACFF54(v1);
  _Unwind_Resume(a1);
}

void sub_215E0D490(uint64_t a1@<X0>, uint64_t a2@<X2>, const std::string::value_type *a3@<X4>, std::string::size_type a4@<X5>, std::string *a5@<X8>)
{
  uint64_t v10 = a1 - a2;
  if (a1 == a2) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = a1 - a2;
  }
  if (v10 <= 1) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = a1 - a2;
  }
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a5, v11 + (v12 - 1) * a4);
  if (v10 >= 1)
  {
    unsigned int v14 = *(unsigned __int8 *)(a1 - 1);
    uint64_t v13 = a1 - 1;
    *(void *)__s = v14;
    char v17 = 1;
    std::string::append(a5, __s, 1uLL);
    if (v17 < 0)
    {
      operator delete(*(void **)__s);
      if ((unint64_t)v10 < 2) {
        return;
      }
    }
    else if ((unint64_t)v10 < 2)
    {
      return;
    }
    while (v13 != a2)
    {
      std::string::append(a5, a3, a4);
      unsigned int v15 = *(unsigned __int8 *)--v13;
      *(void *)__s = v15;
      char v17 = 1;
      std::string::append(a5, __s, 1uLL);
      if (v17 < 0) {
        operator delete(*(void **)__s);
      }
    }
  }
}

void sub_215E0D5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215E0D5E0(uint64_t *a1, void **a2, unsigned int a3, unsigned int a4)
{
  int v7 = *((char *)a2 + 23);
  if (v7 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  if (v8
    && (v7 >= 0 ? (uint64_t v10 = a2) : (uint64_t v10 = *a2),
        (v11 = memchr(v10, 46, v8), v12 = v11 - (unsigned char *)v10, v11) ? (BOOL v13 = v12 == -1) : (BOOL v13 = 1),
        !v13 ? (BOOL v14 = a4 > v12) : (BOOL v14 = 0),
        v14))
  {
    unint64_t v21 = a4 - v12;
    *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = v21;
    sub_215731D94(a1, (uint64_t)"", 0);
    unint64_t v16 = a3 - v21;
    uint64_t v15 = *a1;
  }
  else
  {
    uint64_t v15 = *a1;
    unint64_t v16 = a3;
  }
  *(uint64_t *)((char *)a1 + *(void *)(v15 - 24) + 24) = v16;
  *(_DWORD *)((char *)a1 + *(void *)(v15 - 24) + 8) = *(_DWORD *)((unsigned char *)a1 + *(void *)(v15 - 24) + 8) & 0xFFFFFF4F | 0x20;
  int v17 = *((char *)a2 + 23);
  if (v17 >= 0) {
    uint64_t v18 = (uint64_t)a2;
  }
  else {
    uint64_t v18 = (uint64_t)*a2;
  }
  if (v17 >= 0) {
    uint64_t v19 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v19 = (uint64_t)a2[1];
  }

  return sub_215731D94(a1, v18, v19);
}

void sub_215E0D744(int a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6 = "";
  if (a1 == 12) {
    uint64_t v6 = " (ENOMEM)";
  }
  unsigned int v9 = v6;
  int v12 = 0;
  sub_2157D02BC(v11, "posix_memalign failed to allocate ");
  std::to_string(&v13, a2);
  uint64_t v15 = (std::string *)v11;
  unint64_t v16 = &v13;
  int v17 = v11;
  uint64_t v18 = &v13;
  uint64_t v19 = &v13;
  if (v12 == -1) {
    sub_215742D4C();
  }
  BOOL v14 = &v15;
  ((void (*)(std::string ***, _DWORD *))off_26C686408[v12])(&v14, v11);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v15 = (std::string *)v11;
  unint64_t v16 = (std::string *)" bytes with alignment ";
  int v17 = v11;
  uint64_t v18 = (std::string *)" bytes with alignment ";
  uint64_t v19 = (std::string *)" bytes with alignment ";
  if (v12 == -1) {
    sub_215742D4C();
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  ((void (*)(std::string *, _DWORD *))off_26C686420[v12])(&v13, v11);
  std::to_string(&v13, a3);
  uint64_t v15 = (std::string *)v11;
  unint64_t v16 = &v13;
  int v17 = v11;
  uint64_t v18 = &v13;
  uint64_t v19 = &v13;
  if (v12 == -1) {
    sub_215742D4C();
  }
  BOOL v14 = &v15;
  ((void (*)(std::string ***, _DWORD *))off_26C686408[v12])(&v14, v11);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v15 = (std::string *)v11;
  unint64_t v16 = (std::string *)": error code ";
  int v17 = v11;
  uint64_t v18 = (std::string *)": error code ";
  uint64_t v19 = (std::string *)": error code ";
  if (v12 == -1) {
    sub_215742D4C();
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  ((void (*)(std::string *, _DWORD *))off_26C686438[v12])(&v13, v11);
  std::to_string(&v13, a1);
  uint64_t v15 = (std::string *)v11;
  unint64_t v16 = &v13;
  int v17 = v11;
  uint64_t v18 = &v13;
  uint64_t v19 = &v13;
  if (v12 == -1) {
    sub_215742D4C();
  }
  BOOL v14 = &v15;
  ((void (*)(std::string ***, _DWORD *))off_26C686408[v12])(&v14, v11);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v15 = (std::string *)v11;
  unint64_t v16 = (std::string *)&v9;
  int v17 = v11;
  uint64_t v18 = (std::string *)&v9;
  uint64_t v19 = (std::string *)&v9;
  if (v12 == -1) {
    sub_215742D4C();
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  ((void (*)(std::string *, _DWORD *))off_26C686450[v12])(&v13, v11);
  if (v12 == -1) {
    sub_215742D4C();
  }
  uint64_t v15 = &v13;
  ((void (*)(std::string *__return_ptr, std::string **, _DWORD *))off_26C686468[v12])(&v10, &v15, v11);
  if (v12 != -1) {
    ((void (*)(std::string **, _DWORD *))off_26C6863F0[v12])(&v15, v11);
  }
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v7 = &v10;
  }
  else {
    int v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
  }
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v10.__r_.__value_.__l.__size_;
  }
  sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/src/ArrayBuffer.cpp", 37, (uint64_t)"", 0, (uint64_t)v7, size, (void (*)(void **))sub_215E1ABD8);
  std::string::~string(&v10);
  abort();
}

void sub_215E0DA48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215E0DB0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16)
{
  if (a16 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_26C6863F0[a16])(v16 - 33, &a13);
  }
  JUMPOUT(0x215E0DB04);
}

void sub_215E0DB20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16)
{
  if (a16 != -1) {
    JUMPOUT(0x215E0DB30);
  }
  JUMPOUT(0x215E0DB04);
}

void sub_215E0DB50(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit(&byte_267890678, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire((__guard *)&byte_267890678))
  {
    sub_215E0DC58();
    __cxa_atexit((void (*)(void *))sub_215E0EC28, byte_267890688, &dword_21572C000);
    __cxa_guard_release((__guard *)&byte_267890678);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (byte_2678906A0)
  {
    if (byte_267890688[23] < 0)
    {
      sub_215738B0C((unsigned char *)a1, *(void **)byte_267890688, *(unint64_t *)&byte_267890688[8]);
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)byte_267890688;
      *(void *)(a1 + 16) = *(void *)&byte_267890688[16];
    }
    *(unsigned char *)(a1 + 24) = 1;
  }
}

void sub_215E0DC1C(_Unwind_Exception *a1)
{
}

void sub_215E0DC34(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215E0DC58()
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  if (!dladdr(&sub_215E0DB50, &__dst)) {
    goto LABEL_10;
  }
  memset(&__p, 0, sizeof(__p));
  uint64_t v0 = (char *)(__dst.dli_fname - 1);
  while (*++v0)
    ;
  sub_21577D738((unint64_t)&__p, (char *)__dst.dli_fname, v0);
  std::__fs::filesystem::__weakly_canonical(&v71, &__p, 0);
  std::__fs::filesystem::path v73 = v71;
  memset(&v71, 0, sizeof(v71));
  char v74 = 1;
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if (!v74)
    {
LABEL_10:
      byte_267890688[0] = 0;
      byte_2678906A0 = 0;
      return;
    }
  }
  std::__fs::filesystem::path::__string_view v2 = std::__fs::filesystem::path::__parent_path(&v73);
  if (v2.__size_ > 0x7FFFFFFFFFFFFFF7) {
    sub_215731CD8();
  }
  if (v2.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v4 = (v2.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v4 = v2.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v5 = v4 + 1;
    p_dsint t = (char *)operator new(v4 + 1);
    __dst.dli_fbase = (void *)v2.__size_;
    __dst.dli_sname = (const char *)(v5 | 0x8000000000000000);
    __dst.dli_fname = p_dst;
    goto LABEL_14;
  }
  HIBYTE(__dst.dli_sname) = v2.__size_;
  p_dsint t = (char *)&__dst;
  if (v2.__size_) {
LABEL_14:
  }
    memmove(p_dst, v2.__data_, v2.__size_);
  p_dst[v2.__size_] = 0;
  *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  __p.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  std::__fs::filesystem::path::__string_view v6 = std::__fs::filesystem::path::__extension(&__p);
  if (v6.__size_ > 0x7FFFFFFFFFFFFFF7) {
    sub_215731CD8();
  }
  if (v6.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v8 = (v6.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v8 = v6.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v9 = v8 + 1;
    int v7 = (char *)operator new(v8 + 1);
    __dst.dli_fbase = (void *)v6.__size_;
    __dst.dli_sname = (const char *)(v9 | 0x8000000000000000);
    __dst.dli_fname = v7;
    goto LABEL_22;
  }
  HIBYTE(__dst.dli_sname) = v6.__size_;
  int v7 = (char *)&__dst;
  if (v6.__size_) {
LABEL_22:
  }
    memmove(v7, v6.__data_, v6.__size_);
  v7[v6.__size_] = 0;
  *(_OWORD *)&v79.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  v79.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  memset(&__dst, 0, 24);
  sub_21577D738((unint64_t)&__dst, ".framework", "");
  if (SHIBYTE(__dst.dli_sname) >= 0) {
    v10.__data_ = (const std::string_view::value_type *)&__dst;
  }
  else {
    v10.__data_ = __dst.dli_fname;
  }
  if (SHIBYTE(__dst.dli_sname) >= 0) {
    v10.__size_ = HIBYTE(__dst.dli_sname);
  }
  else {
    v10.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)__dst.dli_fbase;
  }
  int v11 = std::__fs::filesystem::path::__compare(&v79, v10);
  if (SHIBYTE(__dst.dli_sname) < 0)
  {
    operator delete((void *)__dst.dli_fname);
    if ((SHIBYTE(v79.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_31:
      if (v11) {
        goto LABEL_32;
      }
LABEL_38:
      std::__fs::filesystem::path v71 = __p;
      unsigned __int8 v72 = 1;
      goto LABEL_92;
    }
  }
  else if ((SHIBYTE(v79.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v79.__pn_.__r_.__value_.__l.__data_);
  if (!v11) {
    goto LABEL_38;
  }
LABEL_32:
  std::__fs::filesystem::path::__string_view v12 = std::__fs::filesystem::path::__parent_path(&__p);
  if (v12.__size_ > 0x7FFFFFFFFFFFFFF7) {
    sub_215731CD8();
  }
  if (v12.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v14 = (v12.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v14 = v12.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v15 = v14 + 1;
    std::string v13 = (char *)operator new(v14 + 1);
    __dst.dli_fbase = (void *)v12.__size_;
    __dst.dli_sname = (const char *)(v15 | 0x8000000000000000);
    __dst.dli_fname = v13;
    goto LABEL_42;
  }
  HIBYTE(__dst.dli_sname) = v12.__size_;
  std::string v13 = (char *)&__dst;
  if (v12.__size_) {
LABEL_42:
  }
    memmove(v13, v12.__data_, v12.__size_);
  v13[v12.__size_] = 0;
  *(_OWORD *)&v79.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  v79.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  std::__fs::filesystem::path::__string_view v16 = std::__fs::filesystem::path::__filename(&v79);
  if (v16.__size_ > 0x7FFFFFFFFFFFFFF7) {
    sub_215731CD8();
  }
  if (v16.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v18 = (v16.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v18 = v16.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v19 = v18 + 1;
    int v17 = (char *)operator new(v18 + 1);
    __dst.dli_fbase = (void *)v16.__size_;
    __dst.dli_sname = (const char *)(v19 | 0x8000000000000000);
    __dst.dli_fname = v17;
    goto LABEL_50;
  }
  HIBYTE(__dst.dli_sname) = v16.__size_;
  int v17 = (char *)&__dst;
  if (v16.__size_) {
LABEL_50:
  }
    memmove(v17, v16.__data_, v16.__size_);
  v17[v16.__size_] = 0;
  *(_OWORD *)&v77.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  v77.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  memset(&__dst, 0, 24);
  sub_21577D738((unint64_t)&__dst, "Versions", "");
  if (SHIBYTE(__dst.dli_sname) >= 0) {
    v20.__data_ = (const std::string_view::value_type *)&__dst;
  }
  else {
    v20.__data_ = __dst.dli_fname;
  }
  if (SHIBYTE(__dst.dli_sname) >= 0) {
    v20.__size_ = HIBYTE(__dst.dli_sname);
  }
  else {
    v20.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)__dst.dli_fbase;
  }
  int v21 = std::__fs::filesystem::path::__compare(&v77, v20);
  int v22 = v21;
  if (SHIBYTE(__dst.dli_sname) < 0)
  {
    operator delete((void *)__dst.dli_fname);
    if (v22) {
      goto LABEL_88;
    }
  }
  else if (v21)
  {
    goto LABEL_88;
  }
  std::__fs::filesystem::path::__string_view v23 = std::__fs::filesystem::path::__parent_path(&v79);
  if (v23.__size_ > 0x7FFFFFFFFFFFFFF7) {
    sub_215731CD8();
  }
  if (v23.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v25 = (v23.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v25 = v23.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v26 = v25 + 1;
    uint64_t v24 = (char *)operator new(v25 + 1);
    __dst.dli_fbase = (void *)v23.__size_;
    __dst.dli_sname = (const char *)(v26 | 0x8000000000000000);
    __dst.dli_fname = v24;
    goto LABEL_68;
  }
  HIBYTE(__dst.dli_sname) = v23.__size_;
  uint64_t v24 = (char *)&__dst;
  if (v23.__size_) {
LABEL_68:
  }
    memmove(v24, v23.__data_, v23.__size_);
  v24[v23.__size_] = 0;
  *(_OWORD *)&v76.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  v76.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  std::__fs::filesystem::path::__string_view v27 = std::__fs::filesystem::path::__extension(&v76);
  if (v27.__size_ > 0x7FFFFFFFFFFFFFF7) {
    sub_215731CD8();
  }
  if (v27.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v29 = (v27.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v29 = v27.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v30 = v29 + 1;
    int v28 = (char *)operator new(v29 + 1);
    __dst.dli_fbase = (void *)v27.__size_;
    __dst.dli_sname = (const char *)(v30 | 0x8000000000000000);
    __dst.dli_fname = v28;
    goto LABEL_76;
  }
  HIBYTE(__dst.dli_sname) = v27.__size_;
  int v28 = (char *)&__dst;
  if (v27.__size_) {
LABEL_76:
  }
    memmove(v28, v27.__data_, v27.__size_);
  v28[v27.__size_] = 0;
  *(_OWORD *)&v75.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  v75.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  memset(&__dst, 0, 24);
  sub_21577D738((unint64_t)&__dst, ".framework", "");
  if (SHIBYTE(__dst.dli_sname) >= 0) {
    v31.__data_ = (const std::string_view::value_type *)&__dst;
  }
  else {
    v31.__data_ = __dst.dli_fname;
  }
  if (SHIBYTE(__dst.dli_sname) >= 0) {
    v31.__size_ = HIBYTE(__dst.dli_sname);
  }
  else {
    v31.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)__dst.dli_fbase;
  }
  int v32 = std::__fs::filesystem::path::__compare(&v75, v31);
  if (SHIBYTE(__dst.dli_sname) < 0)
  {
    operator delete((void *)__dst.dli_fname);
    if ((SHIBYTE(v75.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_85:
      if (v32) {
        goto LABEL_86;
      }
      goto LABEL_100;
    }
  }
  else if ((SHIBYTE(v75.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_85;
  }
  operator delete(v75.__pn_.__r_.__value_.__l.__data_);
  if (v32)
  {
LABEL_86:
    if (SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__pn_.__r_.__value_.__l.__data_);
    }
LABEL_88:
    v71.__pn_.__r_.__value_.__s.__data_[0] = 0;
    unsigned __int8 v72 = 0;
    if ((SHIBYTE(v77.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_89;
    }
    goto LABEL_101;
  }
LABEL_100:
  std::__fs::filesystem::path v71 = v76;
  unsigned __int8 v72 = 1;
  if ((SHIBYTE(v77.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_89:
    if ((SHIBYTE(v79.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_90;
    }
    goto LABEL_102;
  }
LABEL_101:
  operator delete(v77.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v79.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_90:
    if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_91;
    }
    goto LABEL_103;
  }
LABEL_102:
  operator delete(v79.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_91:
    if (!v72) {
      goto LABEL_104;
    }
    goto LABEL_92;
  }
LABEL_103:
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (!v72) {
    goto LABEL_104;
  }
LABEL_92:
  std::__fs::filesystem::__status(&v71, 0);
  if (!LOBYTE(__dst.dli_fname)
    || LOBYTE(__dst.dli_fname) == 255
    || (std::__fs::filesystem::__status(&v71, 0),
        __int16 v33 = WORD2(__dst.dli_fname),
        std::__fs::filesystem::__status(&v71, 0),
        LOBYTE(__dst.dli_fname) != 2)
    || (v33 & 0x100) == 0)
  {
LABEL_104:
    LODWORD(v77.__pn_.__r_.__value_.__l.__data_) = 1026;
    if (!_NSGetExecutablePath((char *)&__dst, (uint32_t *)&v77))
    {
      memset(&v79, 0, sizeof(v79));
      uint64_t v36 = &v81;
      while (*++v36)
        ;
      sub_21577D738((unint64_t)&v79, (char *)&__dst, v36);
      std::__fs::filesystem::path __p = v79;
      unsigned __int8 v70 = 1;
      goto LABEL_115;
    }
    size_t data_low = LODWORD(v77.__pn_.__r_.__value_.__l.__data_);
    if (LODWORD(v77.__pn_.__r_.__value_.__l.__data_))
    {
      unsigned int v35 = (char *)operator new(LODWORD(v77.__pn_.__r_.__value_.__l.__data_));
      bzero(v35, data_low);
    }
    else
    {
      unsigned int v35 = 0;
    }
    if (_NSGetExecutablePath(v35, (uint32_t *)&v77))
    {
      int v38 = 0;
      __p.__pn_.__r_.__value_.__s.__data_[0] = 0;
      unsigned __int8 v70 = 0;
      if (!v35) {
        goto LABEL_114;
      }
    }
    else
    {
      memset(&v79, 0, sizeof(v79));
      uint64_t v62 = v35 - 1;
      while (*++v62)
        ;
      sub_21577D738((unint64_t)&v79, v35, v62);
      std::__fs::filesystem::path __p = v79;
      int v38 = 1;
      unsigned __int8 v70 = 1;
      if (!v35)
      {
LABEL_114:
        if (!v38)
        {
          byte_267890688[0] = 0;
LABEL_209:
          byte_2678906A0 = v38;
          goto LABEL_210;
        }
LABEL_115:
        std::__fs::filesystem::path::__string_view v39 = std::__fs::filesystem::path::__parent_path(&__p);
        if (v39.__size_ > 0x7FFFFFFFFFFFFFF7) {
          sub_215731CD8();
        }
        if (v39.__size_ >= 0x17)
        {
          std::basic_string_view<_CharT, _Traits>::size_type v41 = (v39.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v39.__size_ | 7) != 0x17) {
            std::basic_string_view<_CharT, _Traits>::size_type v41 = v39.__size_ | 7;
          }
          std::basic_string_view<_CharT, _Traits>::size_type v42 = v41 + 1;
          int v40 = (char *)operator new(v41 + 1);
          __dst.dli_fbase = (void *)v39.__size_;
          __dst.dli_sname = (const char *)(v42 | 0x8000000000000000);
          __dst.dli_fname = v40;
        }
        else
        {
          HIBYTE(__dst.dli_sname) = v39.__size_;
          int v40 = (char *)&__dst;
          if (!v39.__size_)
          {
LABEL_123:
            v40[v39.__size_] = 0;
            dli_fname = (char *)__dst.dli_fname;
            v78[0] = __dst.dli_sname;
            *(_DWORD *)((char *)v78 + 3) = *(_DWORD *)((char *)&__dst.dli_sname + 3);
            int dli_sname_high = SHIBYTE(__dst.dli_sname);
            LOBYTE(__dst.dli_fname) = 0;
            LOBYTE(__dst.dli_saddr) = 0;
            if (SHIBYTE(__dst.dli_sname) < 0)
            {
              sub_215738B0C(&__dst, dli_fname, (unint64_t)__dst.dli_fbase);
            }
            else
            {
              __dst.dli_fname = dli_fname;
              LODWORD(__dst.dli_sname) = v78[0];
              *(_DWORD *)((char *)&__dst.dli_sname + 3) = *(_DWORD *)((char *)v78 + 3);
            }
            LOBYTE(__dst.dli_saddr) = 1;
            std::__fs::filesystem::path::__string_view v45 = std::__fs::filesystem::path::__extension((const std::__fs::filesystem::path *)&__dst);
            if (v45.__size_ > 0x7FFFFFFFFFFFFFF7) {
              sub_215731CD8();
            }
            char data = (char)v45.__data_;
            if (v45.__size_ >= 0x17)
            {
              std::basic_string_view<_CharT, _Traits>::size_type v48 = (v45.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v45.__size_ | 7) != 0x17) {
                std::basic_string_view<_CharT, _Traits>::size_type v48 = v45.__size_ | 7;
              }
              std::basic_string_view<_CharT, _Traits>::size_type v49 = v48 + 1;
              int16x4_t v47 = operator new(v48 + 1);
              v79.__pn_.__r_.__value_.__l.__size_ = v45.__size_;
              v79.__pn_.__r_.__value_.__r.__words[2] = v49 | 0x8000000000000000;
              v79.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
            }
            else
            {
              *((unsigned char *)&v79.__pn_.__r_.__value_.__s + 23) = v45.__size_;
              int16x4_t v47 = &v79;
              if (!v45.__size_)
              {
LABEL_134:
                v47[v45.__size_] = 0;
                std::__fs::filesystem::path v77 = v79;
                memset(&v76, 0, sizeof(v76));
                sub_21577D738((unint64_t)&v76, ".app", "");
                if ((v76.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v50.__data_ = (const std::string_view::value_type *)&v76;
                }
                else {
                  v50.__data_ = (const std::string_view::value_type *)v76.__pn_.__r_.__value_.__r.__words[0];
                }
                if ((v76.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v50.__size_ = HIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]);
                }
                else {
                  v50.__size_ = v76.__pn_.__r_.__value_.__l.__size_;
                }
                if (!std::__fs::filesystem::path::__compare(&v77, v50))
                {
                  BOOL v53 = 1;
                  if ((SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_164;
                  }
                  goto LABEL_146;
                }
                std::__fs::filesystem::path::__string_view v51 = std::__fs::filesystem::path::__extension((const std::__fs::filesystem::path *)&__dst);
                if (v51.__size_ > 0x7FFFFFFFFFFFFFF7) {
                  sub_215731CD8();
                }
                char data = (char)v51.__data_;
                if (v51.__size_ >= 0x17)
                {
                  std::basic_string_view<_CharT, _Traits>::size_type v57 = (v51.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v51.__size_ | 7) != 0x17) {
                    std::basic_string_view<_CharT, _Traits>::size_type v57 = v51.__size_ | 7;
                  }
                  std::basic_string_view<_CharT, _Traits>::size_type v58 = v57 + 1;
                  int v52 = operator new(v57 + 1);
                  v79.__pn_.__r_.__value_.__l.__size_ = v51.__size_;
                  v79.__pn_.__r_.__value_.__r.__words[2] = v58 | 0x8000000000000000;
                  v79.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
                }
                else
                {
                  *((unsigned char *)&v79.__pn_.__r_.__value_.__s + 23) = v51.__size_;
                  int v52 = &v79;
                  if (!v51.__size_)
                  {
LABEL_155:
                    v52[v51.__size_] = 0;
                    std::__fs::filesystem::path v75 = v79;
                    memset(&v79, 0, sizeof(v79));
                    sub_21577D738((unint64_t)&v79, ".bundle", "");
                    if ((v79.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      v59.__data_ = (const std::string_view::value_type *)&v79;
                    }
                    else {
                      v59.__data_ = (const std::string_view::value_type *)v79.__pn_.__r_.__value_.__r.__words[0];
                    }
                    if ((v79.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      v59.__size_ = HIBYTE(v79.__pn_.__r_.__value_.__r.__words[2]);
                    }
                    else {
                      v59.__size_ = v79.__pn_.__r_.__value_.__l.__size_;
                    }
                    BOOL v53 = std::__fs::filesystem::path::__compare(&v75, v59) == 0;
                    if (SHIBYTE(v79.__pn_.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(v79.__pn_.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v75.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_163:
                        if ((SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                          goto LABEL_164;
                        }
                        goto LABEL_146;
                      }
                    }
                    else if ((SHIBYTE(v75.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
                      goto LABEL_163;
                    }
                    operator delete(v75.__pn_.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_164:
                      if ((SHIBYTE(v77.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_165:
                        int dli_saddr_low = LOBYTE(__dst.dli_saddr);
                        if (v53)
                        {
LABEL_166:
                          if (dli_saddr_low)
                          {
                            char v56 = (char *)__dst.dli_fname;
                            *(void *)char v80 = __dst.dli_fbase;
                            *(void *)&v80[7] = *(void **)((char *)&__dst.dli_fbase + 7);
                            int v55 = 1;
                            char data = HIBYTE(__dst.dli_sname);
LABEL_168:
                            if ((dli_sname_high & 0x80000000) == 0) {
                              goto LABEL_169;
                            }
                            goto LABEL_176;
                          }
                          goto LABEL_174;
                        }
LABEL_148:
                        int v55 = 0;
                        char v56 = 0;
                        if (!dli_saddr_low) {
                          goto LABEL_175;
                        }
                        if ((SHIBYTE(__dst.dli_sname) & 0x80000000) == 0) {
                          goto LABEL_168;
                        }
                        operator delete((void *)__dst.dli_fname);
LABEL_174:
                        char v56 = 0;
                        int v55 = 0;
LABEL_175:
                        if ((dli_sname_high & 0x80000000) == 0)
                        {
LABEL_169:
                          int v60 = v72;
                          if (v72 == v55) {
                            goto LABEL_170;
                          }
                          goto LABEL_177;
                        }
LABEL_176:
                        operator delete(dli_fname);
                        int v60 = v72;
                        if (v72 == v55)
                        {
LABEL_170:
                          if (v60)
                          {
                            if (SHIBYTE(v71.__pn_.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v71.__pn_.__r_.__value_.__l.__data_);
                            }
                            v71.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
                            v71.__pn_.__r_.__value_.__l.__size_ = *(void *)v80;
                            *(std::string::size_type *)((char *)&v71.__pn_.__r_.__value_.__r.__words[1] + 7) = *(void *)&v80[7];
                            *((unsigned char *)&v71.__pn_.__r_.__value_.__s + 23) = data;
                            goto LABEL_186;
                          }
LABEL_181:
                          if (data < 0) {
                            int v61 = v55;
                          }
                          else {
                            int v61 = 0;
                          }
                          if (v61 == 1) {
                            operator delete(v56);
                          }
LABEL_186:
                          if (!v72) {
                            goto LABEL_199;
                          }
                          goto LABEL_197;
                        }
LABEL_177:
                        if (!v60)
                        {
                          v71.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
                          v71.__pn_.__r_.__value_.__l.__size_ = *(void *)v80;
                          *(std::string::size_type *)((char *)&v71.__pn_.__r_.__value_.__r.__words[1] + 7) = *(void *)&v80[7];
                          *((unsigned char *)&v71.__pn_.__r_.__value_.__s + 23) = data;
                          unsigned __int8 v72 = 1;
LABEL_197:
                          std::__fs::filesystem::__status(&v71, 0);
                          if (LOBYTE(__dst.dli_fname))
                          {
                            if (LOBYTE(__dst.dli_fname) != 255)
                            {
                              std::__fs::filesystem::__status(&v71, 0);
                              __int16 v68 = WORD2(__dst.dli_fname);
                              std::__fs::filesystem::__status(&v71, 0);
                              if (LOBYTE(__dst.dli_fname) == 2 && (v68 & 0x100) != 0)
                              {
                                byte_267890688[0] = 0;
                                byte_2678906A0 = 0;
                                if (!v72)
                                {
LABEL_210:
                                  if (v70 && SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
                                    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
                                  }
                                  if (v72 && SHIBYTE(v71.__pn_.__r_.__value_.__r.__words[2]) < 0) {
                                    operator delete(v71.__pn_.__r_.__value_.__l.__data_);
                                  }
                                  goto LABEL_216;
                                }
                                *(std::__fs::filesystem::path *)byte_267890688 = v71;
                                memset(&v71, 0, sizeof(v71));
                                goto LABEL_208;
                              }
                            }
                          }
LABEL_199:
                          std::__fs::filesystem::path::__string_view v64 = std::__fs::filesystem::path::__parent_path(&__p);
                          if (v64.__size_ > 0x7FFFFFFFFFFFFFF7) {
                            sub_215731CD8();
                          }
                          if (v64.__size_ >= 0x17)
                          {
                            std::basic_string_view<_CharT, _Traits>::size_type v66 = (v64.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v64.__size_ | 7) != 0x17) {
                              std::basic_string_view<_CharT, _Traits>::size_type v66 = v64.__size_ | 7;
                            }
                            std::basic_string_view<_CharT, _Traits>::size_type v67 = v66 + 1;
                            char v65 = (char *)operator new(v66 + 1);
                            __dst.dli_fbase = (void *)v64.__size_;
                            __dst.dli_sname = (const char *)(v67 | 0x8000000000000000);
                            __dst.dli_fname = v65;
                          }
                          else
                          {
                            HIBYTE(__dst.dli_sname) = v64.__size_;
                            char v65 = (char *)&__dst;
                            if (!v64.__size_) {
                              goto LABEL_207;
                            }
                          }
                          memmove(v65, v64.__data_, v64.__size_);
LABEL_207:
                          v65[v64.__size_] = 0;
                          *(_OWORD *)byte_267890688 = *(_OWORD *)&__dst.dli_fname;
                          *(void *)&byte_267890688[15] = *(void **)((char *)&__dst.dli_fbase + 7);
                          byte_267890688[23] = HIBYTE(__dst.dli_sname);
LABEL_208:
                          LOBYTE(v38) = 1;
                          goto LABEL_209;
                        }
                        if (SHIBYTE(v71.__pn_.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v71.__pn_.__r_.__value_.__l.__data_);
                        }
                        unsigned __int8 v72 = 0;
                        goto LABEL_181;
                      }
LABEL_147:
                      operator delete(v77.__pn_.__r_.__value_.__l.__data_);
                      int dli_saddr_low = LOBYTE(__dst.dli_saddr);
                      if (v53) {
                        goto LABEL_166;
                      }
                      goto LABEL_148;
                    }
LABEL_146:
                    operator delete(v76.__pn_.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v77.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                      goto LABEL_165;
                    }
                    goto LABEL_147;
                  }
                }
                memmove(v52, v51.__data_, v51.__size_);
                goto LABEL_155;
              }
            }
            memmove(v47, v45.__data_, v45.__size_);
            goto LABEL_134;
          }
        }
        memmove(v40, v39.__data_, v39.__size_);
        goto LABEL_123;
      }
    }
    operator delete(v35);
    int v38 = v70;
    goto LABEL_114;
  }
  byte_267890688[0] = 0;
  byte_2678906A0 = 0;
  if (v72)
  {
    *(std::__fs::filesystem::path *)byte_267890688 = v71;
    byte_2678906A0 = 1;
  }
LABEL_216:
  if (v74)
  {
    if (SHIBYTE(v73.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v73.__pn_.__r_.__value_.__l.__data_);
    }
  }
}

void sub_215E0E9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  if (v44) {
    operator delete(v44);
  }
  if (a19 && a18 < 0) {
    operator delete(exception_object);
  }
  if (a26)
  {
    if (a25 < 0)
    {
      operator delete(a20);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_215E0EC28(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 24))
  {
    if (*(char *)(result + 23) < 0)
    {
      operator delete(*(void **)result);
      return v1;
    }
  }
  return result;
}

void sub_215E0EC74(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    LOBYTE(xmmword_2678906A8) = 0;
    byte_2678906C0 = 0;
    return;
  }
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    uint64_t v13 = *(void *)(a1 + 16);
    *(_OWORD *)Dl_info __dst = *(_OWORD *)a1;
    if (v13 >= 0) {
      std::__fs::filesystem::path::__string_view v2 = __dst;
    }
    else {
      std::__fs::filesystem::path::__string_view v2 = (void **)__dst[0];
    }
LABEL_10:
    *(_OWORD *)std::__fs::filesystem::path __p = *(_OWORD *)a1;
    uint64_t v11 = *(void *)(a1 + 16);
    goto LABEL_11;
  }
  std::__fs::filesystem::path::__string_view v2 = __dst;
  sub_215738B0C(__dst, *(void **)a1, *(void *)(a1 + 8));
  if (v13 < 0) {
    std::__fs::filesystem::path::__string_view v2 = (void **)__dst[0];
  }
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    goto LABEL_10;
  }
  sub_215738B0C(__p, *(void **)a1, *(void *)(a1 + 8));
LABEL_11:
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (v11 >= 0) {
    CFIndex v4 = HIBYTE(v11);
  }
  else {
    CFIndex v4 = (CFIndex)__p[1];
  }
  CFStringRef v5 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x263EFFB08], (const UInt8 *)v2, v4, 0x8000100u, 0);
  CFStringRef v14 = v5;
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_16;
    }
LABEL_19:
    operator delete(__dst[0]);
    if (!v5) {
      goto LABEL_20;
    }
    goto LABEL_21;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v13) < 0) {
    goto LABEL_19;
  }
LABEL_16:
  if (!v5)
  {
LABEL_20:
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Apple/src/BundlePath.cpp", 66, (uint64_t)"cf_path_str", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
  }
LABEL_21:
  CFURLRef v6 = CFURLCreateWithFileSystemPath(v3, v5, kCFURLPOSIXPathStyle, 1u);
  __dst[0] = v6;
  if (!v6
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Apple/src/BundlePath.cpp", 70, (uint64_t)"cf_path_url", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  CFBundleRef v7 = CFBundleCreate(v3, v6);
  __p[0] = v7;
  if (!v7
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Apple/src/BundlePath.cpp", 73, (uint64_t)"cf_current_bundle", 17, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  CFStringRef ValueForInfoDictionaryKey = (const __CFString *)CFBundleGetValueForInfoDictionaryKey(v7, (CFStringRef)*MEMORY[0x263EFFB58]);
  CFStringRef v9 = ValueForInfoDictionaryKey;
  if (ValueForInfoDictionaryKey) {
    CFRetain(ValueForInfoDictionaryKey);
  }
  sub_215E1063C(v9, (std::string *)&xmmword_2678906A8);
  if (v9) {
    CFRelease(v9);
  }
  __p[0] = 0;
  if (v7) {
    CFRelease(v7);
  }
  __dst[0] = 0;
  if (v6) {
    CFRelease(v6);
  }
  CFStringRef v14 = 0;
  if (v5) {
    CFRelease(v5);
  }
}

void sub_215E0EF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215E0EFD4(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890680, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267890680))
  {
    sub_215E0DB50((uint64_t)__p);
    sub_215E0EC74((uint64_t)__p);
    if (v4 && v3 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))sub_215E0F138, &xmmword_2678906A8, &dword_21572C000);
    __cxa_guard_release(&qword_267890680);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (byte_2678906C0)
  {
    if (byte_2678906BF < 0)
    {
      sub_215738B0C((unsigned char *)a1, (void *)xmmword_2678906A8, *((unint64_t *)&xmmword_2678906A8 + 1));
    }
    else
    {
      *(_OWORD *)a1 = xmmword_2678906A8;
      *(void *)(a1 + 16) = unk_2678906B8;
    }
    *(unsigned char *)(a1 + 24) = 1;
  }
}

void sub_215E0F0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
    {
      operator delete(__p);
      __cxa_guard_abort(&qword_267890680);
      _Unwind_Resume(a1);
    }
  }
  __cxa_guard_abort(&qword_267890680);
  _Unwind_Resume(a1);
}

void sub_215E0F114(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215E0F138(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 24))
  {
    if (*(char *)(result + 23) < 0)
    {
      operator delete(*(void **)result);
      return v1;
    }
  }
  return result;
}

const void **sub_215E0F184(const void **a1)
{
  std::__fs::filesystem::path::__string_view v2 = *a1;
  *a1 = 0;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **sub_215E0F1BC(const void **a1)
{
  std::__fs::filesystem::path::__string_view v2 = *a1;
  *a1 = 0;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **sub_215E0F1F4(const void **a1)
{
  std::__fs::filesystem::path::__string_view v2 = *a1;
  *a1 = 0;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_215E0F230()
{
}

void sub_215E0F244(std::string *a1@<X8>)
{
  CFStringRef v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    CFStringRef v3 = v2;
    sub_215E1063C(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_215E0F2A0(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_215E0F2B8(std::string *a1@<X8>)
{
  CFStringRef v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    CFStringRef v3 = v2;
    sub_215E1063C(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_215E0F314(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_215E0F32C(std::string *a1@<X8>)
{
  CFStringRef v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    CFStringRef v3 = v2;
    sub_215E1063C(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_215E0F388(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_215E0F3A0(std::string *a1@<X8>)
{
  CFStringRef v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    CFStringRef v3 = v2;
    sub_215E1063C(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_215E0F3FC(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_215E0F414(std::string *a1@<X8>)
{
  CFStringRef v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    CFStringRef v3 = v2;
    sub_215E1063C(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_215E0F470(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_215E0F488(std::string *a1@<X8>)
{
  CFStringRef v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    CFStringRef v3 = v2;
    sub_215E1063C(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_215E0F4E4(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_215E0F4FC(std::string *a1@<X8>)
{
  CFStringRef v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    CFStringRef v3 = v2;
    sub_215E1063C(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_215E0F558(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_215E0F570(uint64_t a1@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  CFStringRef v2 = (const __CFString *)MGGetStringAnswer();
  CFStringRef v10 = v2;
  if (!v2)
  {
    std::string::value_type v4 = 0;
    goto LABEL_5;
  }
  CFStringRef v3 = v2;
  sub_215E1063C(v2, &v8);
  CFRelease(v3);
  std::string::value_type v4 = v9;
  if (!v9)
  {
LABEL_5:
    char v7 = 10;
    __int16 v6 = 28271;
    std::string::size_type v5 = 0x69746375646F7250;
    goto LABEL_6;
  }
  std::string::size_type v5 = v8.__r_.__value_.__r.__words[0];
  __int16 v6 = v8.__r_.__value_.__r.__words[1];
  std::string::value_type v4 = v8.__r_.__value_.__s.__data_[10];
  CFStringRef v10 = *(const __CFString **)((char *)&v8.__r_.__value_.__r.__words[1] + 3);
  int v11 = *(_DWORD *)((char *)&v8.__r_.__value_.__r.__words[2] + 3);
  char v7 = HIBYTE(v8.__r_.__value_.__r.__words[2]);
LABEL_6:
  *(void *)a1 = v5;
  *(_WORD *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 1std::__fs::filesystem::__rename(__from, __to, 0) = v4;
  *(void *)(a1 + 11) = v10;
  *(_DWORD *)(a1 + 19) = v11;
  *(unsigned char *)(a1 + 23) = v7;
  *(unsigned char *)(a1 + 24) = 1;
}

void sub_215E0F65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215E0F680()
{
  return MGGetSInt64Answer();
}

uint64_t sub_215E0F6A8()
{
  uint64_t v0 = (const void *)MGCopyAnswer();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = v0;
  CFRelease(v0);
  return (v1 == (const void *)*MEMORY[0x263EFFB40]) | 0x100u;
}

uint64_t sub_215E0F718()
{
  uint64_t v0 = (const void *)MGCopyAnswer();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = v0;
  CFRelease(v0);
  return (v1 == (const void *)*MEMORY[0x263EFFB40]) | 0x100u;
}

uint64_t sub_215E0F788()
{
  uint64_t v0 = (const void *)MGCopyAnswer();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = v0;
  CFRelease(v0);
  return (v1 == (const void *)*MEMORY[0x263EFFB40]) | 0x100u;
}

uint64_t sub_215E0F7F8()
{
  return MGGetSInt32Answer() | 0x100000000;
}

void sub_215E0F824(std::string *a1@<X8>)
{
  CFStringRef v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    CFStringRef v3 = v2;
    sub_215E1063C(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_215E0F880(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_215E0F898(uint64_t a1@<X8>)
{
  CFStringRef v2 = (const __CFString *)MGGetStringAnswer();
  *(void *)&long long v6 = v2;
  if (v2 && (CFStringRef v3 = v2, sub_215E1063C(v2, &__p), CFRelease(v3), v9))
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    sub_2157C6A10((char *)p_p, size, ":", 1, 0, (uint64_t)&v6);
    *(_OWORD *)a1 = v6;
    *(void *)(a1 + 16) = v7;
    *(unsigned char *)(a1 + 24) = 1;
    if (v9)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
}

void sub_215E0F96C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215E0F9A8()
{
  uint64_t v0 = (const void *)MGCopyAnswer();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = v0;
  CFRelease(v0);
  return (v1 == (const void *)*MEMORY[0x263EFFB40]) | 0x100u;
}

char *sub_215E0FA18(char *__dst, long long *a2, long long *a3, long long *a4, long long *a5, long long *a6, long long *a7)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_215738B0C(__dst, *(void **)a2, *((void *)a2 + 1));
    CFStringRef v14 = __dst + 24;
    if ((*((char *)a3 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v13 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)Dl_info __dst = v13;
    CFStringRef v14 = __dst + 24;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      long long v15 = *a3;
      *((void *)v14 + 2) = *((void *)a3 + 2);
      *(_OWORD *)CFStringRef v14 = v15;
      goto LABEL_6;
    }
  }
  sub_215738B0C(v14, *(void **)a3, *((void *)a3 + 1));
LABEL_6:
  if (*((char *)a4 + 23) < 0)
  {
    sub_215738B0C(__dst + 48, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v16 = *a4;
    *((void *)__dst + 8) = *((void *)a4 + 2);
    *((_OWORD *)__dst + 3) = v16;
  }
  if (*((char *)a5 + 23) < 0)
  {
    sub_215738B0C(__dst + 72, *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v17 = *a5;
    *((void *)__dst + 11) = *((void *)a5 + 2);
    *(_OWORD *)(__dst + 72) = v17;
  }
  if (*((char *)a6 + 23) < 0)
  {
    sub_215738B0C(__dst + 96, *(void **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v18 = *a6;
    *((void *)__dst + 14) = *((void *)a6 + 2);
    *((_OWORD *)__dst + 6) = v18;
  }
  std::basic_string_view<_CharT, _Traits>::size_type v19 = __dst + 120;
  if (*((char *)a7 + 23) < 0)
  {
    sub_215738B0C(v19, *(void **)a7, *((void *)a7 + 1));
  }
  else
  {
    long long v20 = *a7;
    *((void *)__dst + 17) = *((void *)a7 + 2);
    *(_OWORD *)std::basic_string_view<_CharT, _Traits>::size_type v19 = v20;
  }
  return __dst;
}

void sub_215E0FB74(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 119) < 0)
  {
    operator delete(*v5);
    if ((*(char *)(v1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 71) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v4);
  if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v1 + 47) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*v3);
  if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_215E0FC38(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 16))(&v27);
  if (v29)
  {
    long long v30 = v27;
    uint64_t v31 = v28;
    uint64_t v28 = 0;
    long long v27 = 0uLL;
  }
  else
  {
    HIBYTE(v31) = 13;
    strcpy((char *)&v30, "not_available");
  }
  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 24))(&v22, a1);
  if (v24)
  {
    long long v25 = v22;
    uint64_t v26 = v23;
    uint64_t v23 = 0;
    long long v22 = 0uLL;
  }
  else
  {
    HIBYTE(v26) = 13;
    strcpy((char *)&v25, "not_available");
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 32))(v17, a1);
  if (v19)
  {
    long long v20 = *(_OWORD *)v17;
    uint64_t v21 = v18;
    v17[1] = 0;
    uint64_t v18 = 0;
    v17[0] = 0;
  }
  else
  {
    HIBYTE(v21) = 13;
    strcpy((char *)&v20, "not_available");
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 40))(v12, a1);
  if (v14)
  {
    *(_OWORD *)long long v15 = *(_OWORD *)v12;
    uint64_t v16 = v13;
    v12[1] = 0;
    uint64_t v13 = 0;
    v12[0] = 0;
  }
  else
  {
    HIBYTE(v16) = 13;
    strcpy((char *)v15, "not_available");
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 56))(v7, a1);
  if (v9)
  {
    *(_OWORD *)CFStringRef v10 = *(_OWORD *)v7;
    uint64_t v11 = v8;
    v7[1] = 0;
    uint64_t v8 = 0;
    v7[0] = 0;
  }
  else
  {
    HIBYTE(v11) = 13;
    strcpy((char *)v10, "not_available");
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 64))(v2, a1);
  if (v4)
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v2;
    uint64_t v6 = v3;
    v2[1] = 0;
    uint64_t v3 = 0;
    v2[0] = 0;
  }
  else
  {
    HIBYTE(v6) = 13;
    strcpy((char *)__p, "not_available");
  }
  sub_215E0FA18(byte_2678906D0, &v30, &v25, &v20, (long long *)v15, (long long *)v10, (long long *)__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  if (v4 && SHIBYTE(v3) < 0) {
    operator delete(v2[0]);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
  if (v9 && SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
  if (v14 && SHIBYTE(v13) < 0) {
    operator delete(v12[0]);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)v20);
  }
  if (v19 && SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete((void *)v25);
  }
  if (v24 && SHIBYTE(v23) < 0) {
    operator delete((void *)v22);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)v30);
  }
  if (v29)
  {
    if (SHIBYTE(v28) < 0) {
      operator delete((void *)v27);
    }
  }
}

void sub_215E10034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,char a57)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 && a14 < 0) {
    operator delete(a9);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a29 && a28 < 0) {
    operator delete(a23);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  if (a43 && a42 < 0) {
    operator delete(a37);
  }
  if (*(char *)(v57 - 169) < 0) {
    operator delete(*(void **)(v57 - 192));
  }
  if (a57 && a56 < 0) {
    operator delete(a51);
  }
  if (*(char *)(v57 - 105) < 0) {
    operator delete(*(void **)(v57 - 128));
  }
  if (*(unsigned char *)(v57 - 136) && *(char *)(v57 - 137) < 0) {
    operator delete(*(void **)(v57 - 160));
  }
  if (*(char *)(v57 - 41) < 0) {
    operator delete(*(void **)(v57 - 64));
  }
  if (*(unsigned char *)(v57 - 72))
  {
    if (*(char *)(v57 - 73) < 0) {
      operator delete(*(void **)(v57 - 96));
    }
  }
  _Unwind_Resume(exception_object);
}

char *sub_215E10158()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678906C8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2678906C8))
  {
    return byte_2678906D0;
  }
  uint64_t v1 = &unk_26C6864A0;
  sub_215E0FC38((uint64_t)&v1);
  __cxa_atexit((void (*)(void *))sub_215E10228, byte_2678906D0, &dword_21572C000);
  __cxa_guard_release(&qword_2678906C8);
  return byte_2678906D0;
}

void sub_215E10210(_Unwind_Exception *a1)
{
}

uint64_t sub_215E10228(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_13;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return a1;
  }
LABEL_13:
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_215E102E4(uint64_t a1, const void ***a2, unsigned __int8 **a3)
{
  char v4 = *a2;
  std::string::size_type v5 = *a3;
  uint64_t v6 = *((unsigned __int8 *)*a2 + 23);
  size_t v7 = (size_t)(*a2)[1];
  if ((v6 & 0x80u) == 0) {
    uint64_t v8 = (const void *)*((unsigned __int8 *)*a2 + 23);
  }
  else {
    uint64_t v8 = (*a2)[1];
  }
  char v9 = (const void *)v5[23];
  int v10 = (char)v9;
  if ((char)v9 < 0) {
    char v9 = (const void *)*((void *)v5 + 1);
  }
  if (v8 != v9) {
    return 0;
  }
  uint64_t v12 = a2[1];
  uint64_t v13 = a3[1];
  if (v10 >= 0) {
    char v14 = v5;
  }
  else {
    char v14 = *(unsigned __int8 **)v5;
  }
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*v4, v14, v7)) {
      return 0;
    }
  }
  else if (v6)
  {
    while (*(unsigned __int8 *)v4 == *v14)
    {
      char v4 = (const void **)((char *)v4 + 1);
      ++v14;
      if (!--v6) {
        goto LABEL_18;
      }
    }
    return 0;
  }
LABEL_18:
  uint64_t v16 = *((unsigned __int8 *)v12 + 23);
  if ((v16 & 0x80u) == 0) {
    long long v17 = (const void *)*((unsigned __int8 *)v12 + 23);
  }
  else {
    long long v17 = v12[1];
  }
  uint64_t v18 = (const void *)v13[23];
  int v19 = (char)v18;
  if ((char)v18 < 0) {
    uint64_t v18 = (const void *)*((void *)v13 + 1);
  }
  if (v17 != v18) {
    return 0;
  }
  if (v19 >= 0) {
    long long v20 = v13;
  }
  else {
    long long v20 = *(unsigned __int8 **)v13;
  }
  if ((v16 & 0x80) != 0)
  {
    if (memcmp(*v12, v20, (size_t)v12[1])) {
      return 0;
    }
  }
  else if (*((unsigned char *)v12 + 23))
  {
    while (*(unsigned __int8 *)v12 == *v20)
    {
      uint64_t v12 = (const void **)((char *)v12 + 1);
      ++v20;
      if (!--v16) {
        goto LABEL_33;
      }
    }
    return 0;
  }
LABEL_33:
  uint64_t v21 = a2[2];
  long long v22 = (unsigned __int8 **)a3[2];
  uint64_t v23 = *((unsigned __int8 *)v21 + 23);
  if ((v23 & 0x80u) == 0) {
    char v24 = (unsigned __int8 *)*((unsigned __int8 *)v21 + 23);
  }
  else {
    char v24 = (unsigned __int8 *)v21[1];
  }
  long long v25 = (unsigned __int8 *)*((unsigned __int8 *)v22 + 23);
  int v26 = (char)v25;
  if ((char)v25 < 0) {
    long long v25 = v22[1];
  }
  if (v24 != v25) {
    return 0;
  }
  if (v26 >= 0) {
    long long v27 = a3[2];
  }
  else {
    long long v27 = *v22;
  }
  if ((v23 & 0x80) != 0)
  {
    if (memcmp(*v21, v27, (size_t)v21[1])) {
      return 0;
    }
  }
  else if (*((unsigned char *)v21 + 23))
  {
    while (*(unsigned __int8 *)v21 == *v27)
    {
      uint64_t v21 = (const void **)((char *)v21 + 1);
      ++v27;
      if (!--v23) {
        goto LABEL_48;
      }
    }
    return 0;
  }
LABEL_48:
  uint64_t v28 = a2[3];
  char v29 = (unsigned __int8 **)a3[3];
  uint64_t v30 = *((unsigned __int8 *)v28 + 23);
  if ((v30 & 0x80u) == 0) {
    uint64_t v31 = (unsigned __int8 *)*((unsigned __int8 *)v28 + 23);
  }
  else {
    uint64_t v31 = (unsigned __int8 *)v28[1];
  }
  int v32 = (unsigned __int8 *)*((unsigned __int8 *)v29 + 23);
  int v33 = (char)v32;
  if ((char)v32 < 0) {
    int v32 = v29[1];
  }
  if (v31 != v32) {
    return 0;
  }
  if (v33 >= 0) {
    int v34 = a3[3];
  }
  else {
    int v34 = *v29;
  }
  if ((v30 & 0x80) != 0)
  {
    if (memcmp(*v28, v34, (size_t)v28[1])) {
      return 0;
    }
  }
  else if (*((unsigned char *)v28 + 23))
  {
    while (*(unsigned __int8 *)v28 == *v34)
    {
      uint64_t v28 = (const void **)((char *)v28 + 1);
      ++v34;
      if (!--v30) {
        goto LABEL_63;
      }
    }
    return 0;
  }
LABEL_63:
  unsigned int v35 = a2[4];
  uint64_t v36 = (unsigned __int8 **)a3[4];
  uint64_t v37 = *((unsigned __int8 *)v35 + 23);
  if ((v37 & 0x80u) == 0) {
    int v38 = (unsigned __int8 *)*((unsigned __int8 *)v35 + 23);
  }
  else {
    int v38 = (unsigned __int8 *)v35[1];
  }
  std::__fs::filesystem::path::__string_view v39 = (unsigned __int8 *)*((unsigned __int8 *)v36 + 23);
  int v40 = (char)v39;
  if ((char)v39 < 0) {
    std::__fs::filesystem::path::__string_view v39 = v36[1];
  }
  if (v38 != v39) {
    return 0;
  }
  if (v40 >= 0) {
    std::basic_string_view<_CharT, _Traits>::size_type v41 = a3[4];
  }
  else {
    std::basic_string_view<_CharT, _Traits>::size_type v41 = *v36;
  }
  if ((v37 & 0x80) != 0)
  {
    if (!memcmp(*v35, v41, (size_t)v35[1])) {
      goto LABEL_78;
    }
    return 0;
  }
  if (*((unsigned char *)v35 + 23))
  {
    while (*(unsigned __int8 *)v35 == *v41)
    {
      unsigned int v35 = (const void **)((char *)v35 + 1);
      ++v41;
      if (!--v37) {
        goto LABEL_78;
      }
    }
    return 0;
  }
LABEL_78:
  std::basic_string_view<_CharT, _Traits>::size_type v42 = a2[5];
  int v43 = (unsigned __int8 **)a3[5];
  uint64_t v44 = *((unsigned __int8 *)v42 + 23);
  if ((v44 & 0x80u) == 0) {
    std::__fs::filesystem::path::__string_view v45 = (unsigned __int8 *)*((unsigned __int8 *)v42 + 23);
  }
  else {
    std::__fs::filesystem::path::__string_view v45 = (unsigned __int8 *)v42[1];
  }
  int v46 = (unsigned __int8 *)*((unsigned __int8 *)v43 + 23);
  int v47 = (char)v46;
  if ((char)v46 < 0) {
    int v46 = v43[1];
  }
  if (v45 != v46) {
    return 0;
  }
  if (v47 >= 0) {
    std::basic_string_view<_CharT, _Traits>::size_type v48 = a3[5];
  }
  else {
    std::basic_string_view<_CharT, _Traits>::size_type v48 = *v43;
  }
  if ((v44 & 0x80) != 0) {
    return memcmp(*v42, v48, (size_t)v42[1]) == 0;
  }
  if (!*((unsigned char *)v42 + 23)) {
    return 1;
  }
  uint64_t v49 = v44 - 1;
  do
  {
    int v51 = *(unsigned __int8 *)v42;
    std::basic_string_view<_CharT, _Traits>::size_type v42 = (const void **)((char *)v42 + 1);
    int v50 = v51;
    int v53 = *v48++;
    int v52 = v53;
    BOOL v55 = v49-- != 0;
    uint64_t result = v50 == v52;
  }
  while (v50 == v52 && v55);
  return result;
}

const __CFString *sub_215E1063C@<X0>(const __CFString *result@<X0>, std::string *a2@<X8>)
{
  if (!result) {
    goto LABEL_8;
  }
  CFStringRef v3 = result;
  uint64_t result = (const __CFString *)CFStringGetLength(result);
  if (result)
  {
    CFIndex v4 = (CFIndex)result;
    CFIndex usedBufLen = 0;
    v9.locatiounint64_t n = 0;
    v9.length = (CFIndex)result;
    uint64_t result = (const __CFString *)CFStringGetBytes(v3, v9, 0x8000100u, 0, 0, 0, 0, &usedBufLen);
    if ((uint64_t)result > 0)
    {
      memset(&v7, 0, sizeof(v7));
      if (usedBufLen)
      {
        std::string::append(&v7, usedBufLen, 0);
        CFIndex v5 = usedBufLen;
        if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v6 = &v7;
        }
        else {
          uint64_t v6 = (std::string *)v7.__r_.__value_.__r.__words[0];
        }
      }
      else
      {
        CFIndex v5 = 0;
        uint64_t v6 = &v7;
      }
      v10.locatiounint64_t n = 0;
      v10.length = v4;
      uint64_t result = (const __CFString *)CFStringGetBytes(v3, v10, 0x8000100u, 0, 0, (UInt8 *)v6, v5, 0);
      *a2 = v7;
      goto LABEL_12;
    }
LABEL_8:
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
    return result;
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
LABEL_12:
  a2[1].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

void sub_215E10764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215E10780(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a1 + 112))
  {
    v44[0] = (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
    LODWORD(v43.__r_.__value_.__l.__data_) = *(_DWORD *)a1;
    std::error_condition::message(&v32, (const std::error_condition *)a1);
    sub_215E136F0((uint64_t)a2, v44, (int *)&v43, &v32);
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    CFRange v9 = (void *)v32.__r_.__value_.__r.__words[0];
    goto LABEL_61;
  }
  v43.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  LODWORD(__dst) = *(_DWORD *)a1;
  std::error_condition::message(&v32, (const std::error_condition *)a1);
  sub_215E136F0((uint64_t)v30, (const char **)&v43.__r_.__value_.__l.__data_, (int *)&__dst, &v32);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  CFIndex v4 = (const char *)v31;
  CFIndex v5 = v30;
  if ((v31 & 0x80u) != 0)
  {
    CFIndex v5 = (void **)v30[0];
    CFIndex v4 = (const char *)v30[1];
  }
  v44[0] = (const char *)v5;
  v44[1] = v4;
  sub_2157328B8((uint64_t)&v32);
  if (*(unsigned char *)(a1 + 40))
  {
    sub_215731D94(&v32.__r_.__value_.__r.__words[2], (uint64_t)"detail", 6);
    sub_215731D94(&v32.__r_.__value_.__r.__words[2], (uint64_t)": ", 2);
    int v6 = *(char *)(a1 + 39);
    if (v6 >= 0) {
      uint64_t v7 = a1 + 16;
    }
    else {
      uint64_t v7 = *(void *)(a1 + 16);
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a1 + 39);
    }
    else {
      uint64_t v8 = *(void *)(a1 + 24);
    }
    sub_215731D94(&v32.__r_.__value_.__r.__words[2], v7, v8);
    if (!*(unsigned char *)(a1 + 104)) {
      goto LABEL_39;
    }
    sub_215731D94(&v32.__r_.__value_.__r.__words[2], (uint64_t)", ", 2);
  }
  else if (!*(unsigned char *)(a1 + 104))
  {
    goto LABEL_39;
  }
  sub_215731D94(&v32.__r_.__value_.__r.__words[2], (uint64_t)"location", 8);
  sub_215731D94(&v32.__r_.__value_.__r.__words[2], (uint64_t)": ", 2);
  sub_215731D94(&v32.__r_.__value_.__r.__words[2], (uint64_t)"{", 1);
  int v10 = *(char *)(a1 + 71);
  if (v10 >= 0) {
    uint64_t v11 = a1 + 48;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 48);
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 56);
  }
  sub_215731D94(&v32.__r_.__value_.__r.__words[2], v11, v12);
  sub_215731D94(&v32.__r_.__value_.__r.__words[2], (uint64_t)",", 1);
  std::to_string(&v43, *(void *)(a1 + 72));
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v13 = &v43;
  }
  else {
    uint64_t v13 = (std::string *)v43.__r_.__value_.__r.__words[0];
  }
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v43.__r_.__value_.__l.__size_;
  }
  sub_215731D94(&v32.__r_.__value_.__r.__words[2], (uint64_t)v13, size);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  sub_215731D94(&v32.__r_.__value_.__r.__words[2], (uint64_t)",", 1);
  int v15 = *(char *)(a1 + 103);
  if (v15 >= 0) {
    uint64_t v16 = a1 + 80;
  }
  else {
    uint64_t v16 = *(void *)(a1 + 80);
  }
  if (v15 >= 0) {
    uint64_t v17 = *(unsigned __int8 *)(a1 + 103);
  }
  else {
    uint64_t v17 = *(void *)(a1 + 88);
  }
  sub_215731D94(&v32.__r_.__value_.__r.__words[2], v16, v17);
  sub_215731D94(&v32.__r_.__value_.__r.__words[2], (uint64_t)"}", 1);
LABEL_39:
  if ((v41 & 0x10) != 0)
  {
    unint64_t v20 = v40;
    if (v40 < v37)
    {
      unint64_t v40 = v37;
      unint64_t v20 = v37;
    }
    uint64_t v21 = v36;
    size_t v18 = v20 - (void)v36;
    if (v20 - (unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_64;
    }
  }
  else
  {
    if ((v41 & 8) == 0)
    {
      size_t v18 = 0;
      HIBYTE(v29) = 0;
      p_dsint t = (void **)&__dst;
      goto LABEL_52;
    }
    uint64_t v21 = v34;
    size_t v18 = v35 - (void)v34;
    if ((unint64_t)(v35 - (void)v34) >= 0x7FFFFFFFFFFFFFF8) {
LABEL_64:
    }
      sub_215731CD8();
  }
  if (v18 >= 0x17)
  {
    uint64_t v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v22 = v18 | 7;
    }
    uint64_t v23 = v22 + 1;
    p_dsint t = (void **)operator new(v22 + 1);
    uint64_t v28 = (const char *)v18;
    int64_t v29 = v23 | 0x8000000000000000;
    Dl_info __dst = p_dst;
  }
  else
  {
    HIBYTE(v29) = v18;
    p_dsint t = (void **)&__dst;
    if (!v18) {
      goto LABEL_52;
    }
  }
  memmove(p_dst, v21, v18);
LABEL_52:
  *((unsigned char *)p_dst + v18) = 0;
  v32.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2B8];
  std::string::size_type v24 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(std::string::size_type *)((char *)v32.__r_.__value_.__r.__words + *(void *)(v32.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v32.__r_.__value_.__r.__words[2] = v24;
  uint64_t v33 = MEMORY[0x263F8C318] + 16;
  if (v39 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2166C4BF0](&v42);
  long long v25 = (const char *)HIBYTE(v29);
  int v26 = (const char *)&__dst;
  if (v29 < 0)
  {
    int v26 = (const char *)__dst;
    long long v25 = v28;
  }
  v44[2] = v26;
  v44[3] = v25;
  sub_2157430CC((uint64_t)v44, (uint64_t)&v45, "; ", 2uLL, a2);
  if (SHIBYTE(v29) < 0)
  {
    operator delete(__dst);
    if (((char)v31 & 0x80000000) == 0) {
      return;
    }
  }
  else if (((char)v31 & 0x80000000) == 0)
  {
    return;
  }
  CFRange v9 = v30[0];
LABEL_61:
  operator delete(v9);
}

void sub_215E10CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215E10D38(uint64_t a1, _OWORD *a2)
{
  sub_215E10780((uint64_t)a2, &v5);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_26C686558;
  *(_OWORD *)(a1 + 16) = *a2;
  sub_215741BFC((unsigned char *)(a1 + 32), a2 + 1);
  return a1;
}

void sub_215E10DC0(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_215E10DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215E10DF0(std::runtime_error *this)
{
  if (!LOBYTE(this[8].__vftable)) {
    goto LABEL_7;
  }
  if (!LOBYTE(this[7].__imp_.__imp_)) {
    goto LABEL_5;
  }
  if ((SHIBYTE(this[7].__vftable) & 0x80000000) == 0)
  {
    if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
  operator delete(this[6].__vftable);
  if (SHIBYTE(this[5].__vftable) < 0)
  {
LABEL_11:
    operator delete(this[4].__vftable);
    if (LOBYTE(this[3].__imp_.__imp_)) {
      goto LABEL_6;
    }
LABEL_7:
    CFStringRef v2 = this;
    goto LABEL_9;
  }
LABEL_5:
  if (!LOBYTE(this[3].__imp_.__imp_)) {
    goto LABEL_7;
  }
LABEL_6:
  if ((SHIBYTE(this[3].__vftable) & 0x80000000) == 0) {
    goto LABEL_7;
  }
  operator delete(this[2].__vftable);
  CFStringRef v2 = this;

LABEL_9:
  std::runtime_error::~runtime_error(v2);
}

void sub_215E10EA0(std::runtime_error *this)
{
  if (!LOBYTE(this[8].__vftable)) {
    goto LABEL_10;
  }
  if (LOBYTE(this[7].__imp_.__imp_))
  {
    if ((SHIBYTE(this[7].__vftable) & 0x80000000) == 0)
    {
      if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(this[4].__vftable);
      if (!LOBYTE(this[3].__imp_.__imp_)) {
        goto LABEL_10;
      }
      goto LABEL_6;
    }
    operator delete(this[6].__vftable);
    if (SHIBYTE(this[5].__vftable) < 0) {
      goto LABEL_9;
    }
  }
LABEL_5:
  if (!LOBYTE(this[3].__imp_.__imp_)) {
    goto LABEL_10;
  }
LABEL_6:
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[2].__vftable);
  }
LABEL_10:
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x2166C4D20);
}

const char *sub_215E10F44()
{
  return "cv3d";
}

double sub_215E10F50@<D0>(int a1@<W1>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 0:
      *(unsigned char *)(a2 + 23) = 8;
      strcpy((char *)a2, "no error");
      break;
    case 1:
      *(unsigned char *)(a2 + 23) = 9;
      strcpy((char *)a2, "exception");
      break;
    case 2:
      *(unsigned char *)(a2 + 23) = 13;
      strcpy((char *)a2, "runtime error");
      break;
    case 3:
      CFIndex v4 = (char *)operator new(0x20uLL);
      *(void *)a2 = v4;
      *(_OWORD *)(a2 + 8) = xmmword_215E9AB80;
      strcpy(v4, "caught unknown thrown object");
      double result = *(double *)"wn thrown object";
      break;
    default:
      *(unsigned char *)(a2 + 23) = 18;
      double result = *(double *)"unknown error code";
      strcpy((char *)a2, "unknown error code");
      break;
  }
  return result;
}

void sub_215E1109C(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  LOBYTE(__dst[0]) = 0;
  char v10 = 0;
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      sub_215738B0C(__dst, *(void **)a1, *(void *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)Dl_info __dst = *(_OWORD *)a1;
      uint64_t v9 = *(void *)(a1 + 16);
    }
    char v10 = 1;
  }
  sub_215741CB8((char *)&v11, (long long *)(a1 + 32));
  char v16 = 1;
  char v7 = 2;
  strcpy((char *)__p, ", ");
  sub_215E11210(a3, (uint64_t)__dst, a2, 1, (const std::string::value_type *)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v16)
  {
    if (!v15) {
      goto LABEL_12;
    }
    if (v14 < 0)
    {
      operator delete(v13);
      if ((v12 & 0x80000000) == 0)
      {
LABEL_12:
        if (!v10) {
          return;
        }
        goto LABEL_13;
      }
    }
    else if ((v12 & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(v11);
    if (!v10) {
      return;
    }
LABEL_13:
    if (SHIBYTE(v9) < 0) {
      operator delete(__dst[0]);
    }
  }
}

void sub_215E111C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a22)
  {
    if (a21 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215E11210(uint64_t a1, uint64_t a2, void **a3, int a4, const std::string::value_type *a5)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 96))
  {
    if (*(unsigned char *)(a2 + 24))
    {
      char v7 = (void *)*(unsigned __int8 *)(a2 + 23);
      if (*(char *)(a2 + 23) < 0)
      {
        if (*(void *)(a2 + 8))
        {
LABEL_5:
          if (a4)
          {
            if ((v7 & 0x80) != 0)
            {
              uint64_t v8 = *(void **)a2;
              char v7 = *(void **)(a2 + 8);
            }
            else
            {
              uint64_t v8 = (void *)a2;
            }
            BOOL v55 = v8;
            char v56 = v7;
            char v16 = (void *)*((unsigned __int8 *)a3 + 23);
            if ((char)v16 >= 0) {
              uint64_t v17 = a3;
            }
            else {
              uint64_t v17 = *a3;
            }
            if ((char)v16 < 0) {
              char v16 = a3[1];
            }
            uint64_t v57 = v17;
            std::basic_string_view<_CharT, _Traits>::size_type v58 = v16;
            if (a5[23] < 0)
            {
              long long v25 = a5;
              a5 = *(const std::string::value_type **)a5;
              std::string::size_type v18 = *((void *)v25 + 1);
            }
            else
            {
              std::string::size_type v18 = *((unsigned __int8 *)a5 + 23);
            }
            sub_2157430CC((uint64_t)&v55, (uint64_t)v59, a5, v18, &__p);
            *(void *)std::__fs::filesystem::path::__string_view v59 = __p.__r_.__value_.__l.__size_;
            std::string::size_type v26 = __p.__r_.__value_.__r.__words[0];
            *(void *)&v59[7] = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
            char v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            memset(&__p, 0, sizeof(__p));
            sub_215741CB8((char *)&v36, (long long *)(a2 + 32));
            uint64_t v28 = *(void *)v59;
            *(void *)a1 = v26;
            *(void *)(a1 + 8) = v28;
            *(void *)(a1 + 15) = *(void *)&v59[7];
            *(unsigned char *)(a1 + 23) = v27;
            *(unsigned char *)(a1 + 24) = 1;
            *(unsigned char *)(a1 + 32) = 0;
            *(unsigned char *)(a1 + 88) = 0;
            if (!v41) {
              goto LABEL_47;
            }
            uint64_t v29 = v38;
            *(void *)(a1 + 48) = v37;
            *(_OWORD *)(a1 + 32) = v36;
            long long v36 = 0uLL;
            *(void *)(a1 + 56) = v29;
            *(_OWORD *)(a1 + 64) = v39;
            *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v40;
            uint64_t v37 = 0;
            long long v39 = 0uLL;
            uint64_t v40 = 0;
            goto LABEL_46;
          }
          char v12 = (void *)*((unsigned __int8 *)a3 + 23);
          if ((char)v12 >= 0) {
            uint64_t v13 = a3;
          }
          else {
            uint64_t v13 = *a3;
          }
          if ((char)v12 < 0) {
            char v12 = a3[1];
          }
          BOOL v55 = v13;
          char v56 = v12;
          if ((v7 & 0x80) != 0)
          {
            int v19 = *(void **)(a2 + 8);
            uint64_t v57 = *(void **)a2;
            std::basic_string_view<_CharT, _Traits>::size_type v58 = v19;
            int v14 = a5[23];
            if ((v14 & 0x80000000) == 0) {
              goto LABEL_30;
            }
          }
          else
          {
            uint64_t v57 = (void *)a2;
            std::basic_string_view<_CharT, _Traits>::size_type v58 = v7;
            int v14 = a5[23];
            if ((v14 & 0x80000000) == 0)
            {
LABEL_30:
              std::string::size_type v15 = v14;
LABEL_41:
              sub_2157430CC((uint64_t)&v55, (uint64_t)v59, a5, v15, &__p);
              v54[0] = __p.__r_.__value_.__l.__size_;
              std::string::size_type v21 = __p.__r_.__value_.__r.__words[0];
              *(void *)((char *)v54 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
              char v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              memset(&__p, 0, sizeof(__p));
              sub_215741CB8((char *)&v30, (long long *)(a2 + 32));
              uint64_t v23 = v54[0];
              *(void *)a1 = v21;
              *(void *)(a1 + 8) = v23;
              *(void *)(a1 + 15) = *(void *)((char *)v54 + 7);
              *(unsigned char *)(a1 + 23) = v22;
              *(unsigned char *)(a1 + 24) = 1;
              *(unsigned char *)(a1 + 32) = 0;
              *(unsigned char *)(a1 + 88) = 0;
              if (!v35)
              {
LABEL_47:
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  return;
                }
                uint64_t v11 = (void *)__p.__r_.__value_.__r.__words[0];
                goto LABEL_49;
              }
              uint64_t v24 = v32;
              *(void *)(a1 + 48) = v31;
              *(_OWORD *)(a1 + 32) = v30;
              long long v30 = 0uLL;
              *(void *)(a1 + 56) = v24;
              *(_OWORD *)(a1 + 64) = v33;
              *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v34;
              uint64_t v31 = 0;
              long long v33 = 0uLL;
              uint64_t v34 = 0;
LABEL_46:
              *(unsigned char *)(a1 + 88) = 1;
              goto LABEL_47;
            }
          }
          unint64_t v20 = a5;
          a5 = *(const std::string::value_type **)a5;
          std::string::size_type v15 = *((void *)v20 + 1);
          goto LABEL_41;
        }
      }
      else if (*(unsigned char *)(a2 + 23))
      {
        goto LABEL_5;
      }
    }
    if (*((char *)a3 + 23) < 0)
    {
      sub_215738B0C(&__dst, *a3, (unint64_t)a3[1]);
    }
    else
    {
      long long __dst = *(_OWORD *)a3;
      int v50 = a3[2];
    }
    unsigned __int8 v51 = 1;
    sub_215741CB8((char *)&v43, (long long *)(a2 + 32));
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    int v9 = v51;
    if (v51)
    {
      *(_OWORD *)a1 = __dst;
      *(void *)(a1 + 16) = v50;
      int v50 = 0;
      long long __dst = 0uLL;
      *(unsigned char *)(a1 + 24) = 1;
    }
    *(unsigned char *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 88) = 0;
    if (v48)
    {
      uint64_t v10 = v45;
      *(void *)(a1 + 48) = v44;
      *(_OWORD *)(a1 + 32) = v43;
      long long v43 = 0uLL;
      *(void *)(a1 + 56) = v10;
      *(_OWORD *)(a1 + 64) = v46;
      *(void *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v47;
      uint64_t v44 = 0;
      long long v46 = 0uLL;
      uint64_t v47 = 0;
      *(unsigned char *)(a1 + 88) = 1;
    }
    if (v9 && SHIBYTE(v50) < 0)
    {
      uint64_t v11 = (void *)__dst;
LABEL_49:
      operator delete(v11);
    }
  }
  else
  {
    if (*((char *)a3 + 23) < 0)
    {
      sub_215738B0C(&v52, *a3, (unint64_t)a3[1]);
    }
    else
    {
      long long v52 = *(_OWORD *)a3;
      int v53 = a3[2];
    }
    *(_OWORD *)a1 = v52;
    *(void *)(a1 + 16) = v53;
    *(unsigned char *)(a1 + 24) = 1;
    *(unsigned char *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 88) = 0;
  }
}

void sub_215E115B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (v32 < 0) {
    operator delete(v31);
  }
  if (a31 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215E11614(char *a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  v45[2] = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *((void *)a1 + 1);
  LOBYTE(v18) = 0;
  char v20 = 0;
  LOBYTE(v21) = 0;
  char v25 = 0;
  sub_2158B2240(a1 + 16, (uint64_t)&v18, (uint64_t)v26);
  sub_215E1109C((uint64_t)v26, a2, (uint64_t)&__p);
  int v12 = v36;
  if (v36)
  {
    uint64_t v13 = __p;
    v45[0] = v35;
    *(void *)((char *)v45 + 7) = *(void *)((char *)&v35 + 7);
    char v7 = HIBYTE(v35);
    long long v35 = 0uLL;
    std::string __p = 0;
    int v14 = v42;
    if (v42) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v13 = 0;
    int v14 = v42;
    if (v42)
    {
LABEL_3:
      std::string::size_type v15 = v37;
      v44[0] = v38;
      *(void *)((char *)v44 + 7) = *(void *)((char *)&v38 + 7);
      char v9 = HIBYTE(v38);
      uint64_t v37 = 0;
      long long v38 = 0uLL;
      uint64_t v10 = v39;
      uint64_t v8 = v40;
      v43[0] = v41;
      *(void *)((char *)v43 + 7) = *(void *)((char *)&v41 + 7);
      char v11 = HIBYTE(v41);
      uint64_t v40 = 0;
      long long v41 = 0uLL;
      *(void *)a3 = v5;
      *(void *)(a3 + 8) = v6;
      *(unsigned char *)(a3 + 16) = 0;
      *(unsigned char *)(a3 + 112) = 0;
      *(unsigned char *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
      if (!v12) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  std::string::size_type v15 = 0;
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 112) = 0;
  *(unsigned char *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  if (v12)
  {
LABEL_4:
    uint64_t v16 = v45[0];
    *(void *)(a3 + 16) = v13;
    *(void *)(a3 + 24) = v16;
    *(void *)(a3 + 31) = *(void *)((char *)v45 + 7);
    *(unsigned char *)(a3 + 39) = v7;
    v45[0] = 0;
    *(void *)((char *)v45 + 7) = 0;
    *(unsigned char *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 1;
    uint64_t v13 = 0;
    char v7 = 0;
  }
LABEL_5:
  *(unsigned char *)(a3 + 48) = 0;
  *(unsigned char *)(a3 + 104) = 0;
  if (v14)
  {
    uint64_t v17 = v44[0];
    *(void *)(a3 + 48) = v15;
    *(void *)(a3 + 56) = v17;
    *(void *)(a3 + 63) = *(void *)((char *)v44 + 7);
    *(unsigned char *)(a3 + 71) = v9;
    v44[0] = 0;
    *(void *)((char *)v44 + 7) = 0;
    *(void *)(a3 + 72) = v10;
    *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v8;
    *(void *)(a3 + 88) = v43[0];
    *(void *)(a3 + 95) = *(void *)((char *)v43 + 7);
    *(unsigned char *)(a3 + 103) = v11;
    v43[0] = 0;
    *(void *)((char *)v43 + 7) = 0;
    *(unsigned char *)(a3 + 104) = 1;
  }
  *(unsigned char *)(a3 + 112) = 1;
  if (v12 && v7 < 0)
  {
    operator delete(v13);
    int v14 = v42;
  }
  if (v14)
  {
    if ((SHIBYTE(v41) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v38) & 0x80000000) == 0) {
        goto LABEL_13;
      }
LABEL_33:
      operator delete(v37);
      if (!v36) {
        goto LABEL_16;
      }
      goto LABEL_14;
    }
    operator delete(v40);
    if (SHIBYTE(v38) < 0) {
      goto LABEL_33;
    }
  }
LABEL_13:
  if (!v36) {
    goto LABEL_16;
  }
LABEL_14:
  if (SHIBYTE(v35) < 0) {
    operator delete(__p);
  }
LABEL_16:
  if (!v33) {
    goto LABEL_19;
  }
  if ((v32 & 0x80000000) == 0)
  {
    if ((v30 & 0x80000000) == 0) {
      goto LABEL_19;
    }
LABEL_36:
    operator delete(v29);
    if (!v28) {
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  operator delete(v31);
  if (v30 < 0) {
    goto LABEL_36;
  }
LABEL_19:
  if (!v28) {
    goto LABEL_22;
  }
LABEL_20:
  if (v27 < 0) {
    operator delete(v26[0]);
  }
LABEL_22:
  if (!v25) {
    goto LABEL_25;
  }
  if (v24 < 0)
  {
    operator delete(v23);
    if ((v22 & 0x80000000) == 0)
    {
LABEL_25:
      if (!v20) {
        return;
      }
      goto LABEL_26;
    }
  }
  else if ((v22 & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(v21);
  if (!v20) {
    return;
  }
LABEL_26:
  if (v19 < 0) {
    operator delete(v18);
  }
}

void sub_215E118E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  sub_2158B0CE8((uint64_t)va1);
  sub_2158B0CE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215E118FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2158B0CE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215E11910(char *a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v58[2] = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *((void *)a1 + 1);
  LOBYTE(v18) = 0;
  char v20 = 0;
  LOBYTE(v21) = 0;
  char v25 = 0;
  sub_2158B2240(a1 + 16, (uint64_t)&v18, (uint64_t)v26);
  LOBYTE(__dst) = 0;
  char v48 = 0;
  if (v28)
  {
    if (SHIBYTE(v27) < 0)
    {
      sub_215738B0C(&__dst, v26[0], (unint64_t)v26[1]);
    }
    else
    {
      long long __dst = *(_OWORD *)v26;
      uint64_t v47 = v27;
    }
    char v48 = 1;
  }
  LOBYTE(v49) = 0;
  char v54 = 0;
  if (v34)
  {
    if (SHIBYTE(v30) < 0)
    {
      sub_215738B0C(&v49, (void *)v29, *((unint64_t *)&v29 + 1));
    }
    else
    {
      long long v49 = v29;
      uint64_t v50 = v30;
    }
    uint64_t v51 = v31;
    if (SHIBYTE(v33) < 0)
    {
      sub_215738B0C(&v52, (void *)v32, *((unint64_t *)&v32 + 1));
    }
    else
    {
      long long v52 = v32;
      uint64_t v53 = v33;
    }
    char v54 = 1;
  }
  char v55 = 1;
  char v45 = 2;
  strcpy((char *)v44, ", ");
  sub_215E11210((uint64_t)&__p, (uint64_t)&__dst, a2, 0, (const std::string::value_type *)v44);
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  if (v55)
  {
    if (!v54) {
      goto LABEL_20;
    }
    if (SHIBYTE(v53) < 0)
    {
      operator delete((void *)v52);
      if ((SHIBYTE(v50) & 0x80000000) == 0)
      {
LABEL_20:
        if (!v48) {
          goto LABEL_23;
        }
LABEL_21:
        if (SHIBYTE(v47) < 0) {
          operator delete((void *)__dst);
        }
        goto LABEL_23;
      }
    }
    else if ((SHIBYTE(v50) & 0x80000000) == 0)
    {
      goto LABEL_20;
    }
    operator delete((void *)v49);
    if (!v48) {
      goto LABEL_23;
    }
    goto LABEL_21;
  }
LABEL_23:
  int v12 = v37;
  if (v37)
  {
    uint64_t v13 = __p;
    v58[0] = v36;
    *(void *)((char *)v58 + 7) = *(void *)((char *)&v36 + 7);
    char v7 = HIBYTE(v36);
    long long v36 = 0uLL;
    std::string __p = 0;
    int v14 = v43;
    if (v43) {
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v13 = 0;
    int v14 = v43;
    if (v43)
    {
LABEL_25:
      uint64_t v15 = v38;
      v57[0] = v39;
      *(void *)((char *)v57 + 7) = *(void *)((char *)&v39 + 7);
      char v9 = HIBYTE(v39);
      long long v38 = 0;
      long long v39 = 0uLL;
      uint64_t v10 = v40;
      uint64_t v8 = v41;
      v56[0] = v42;
      *(void *)((char *)v56 + 7) = *(void *)((char *)&v42 + 7);
      char v11 = HIBYTE(v42);
      long long v41 = 0;
      long long v42 = 0uLL;
      *(void *)a3 = v5;
      *(void *)(a3 + 8) = v6;
      *(unsigned char *)(a3 + 16) = 0;
      *(unsigned char *)(a3 + 112) = 0;
      *(unsigned char *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
      if (!v12) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
  }
  uint64_t v15 = 0;
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 112) = 0;
  *(unsigned char *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  if (v12)
  {
LABEL_26:
    uint64_t v16 = v58[0];
    *(void *)(a3 + 16) = v13;
    *(void *)(a3 + 24) = v16;
    *(void *)(a3 + 31) = *(void *)((char *)v58 + 7);
    *(unsigned char *)(a3 + 39) = v7;
    v58[0] = 0;
    *(void *)((char *)v58 + 7) = 0;
    *(unsigned char *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 1;
    uint64_t v13 = 0;
    char v7 = 0;
  }
LABEL_27:
  *(unsigned char *)(a3 + 48) = 0;
  *(unsigned char *)(a3 + 104) = 0;
  if (v14)
  {
    uint64_t v17 = v57[0];
    *(void *)(a3 + 48) = v15;
    *(void *)(a3 + 56) = v17;
    *(void *)(a3 + 63) = *(void *)((char *)v57 + 7);
    *(unsigned char *)(a3 + 71) = v9;
    v57[0] = 0;
    *(void *)((char *)v57 + 7) = 0;
    *(void *)(a3 + 72) = v10;
    *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v8;
    *(void *)(a3 + 88) = v56[0];
    *(void *)(a3 + 95) = *(void *)((char *)v56 + 7);
    *(unsigned char *)(a3 + 103) = v11;
    v56[0] = 0;
    *(void *)((char *)v56 + 7) = 0;
    *(unsigned char *)(a3 + 104) = 1;
  }
  *(unsigned char *)(a3 + 112) = 1;
  if (v12 && v7 < 0)
  {
    operator delete(v13);
    int v14 = v43;
  }
  if (v14)
  {
    if ((SHIBYTE(v42) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v39) & 0x80000000) == 0) {
        goto LABEL_35;
      }
LABEL_55:
      operator delete(v38);
      if (!v37) {
        goto LABEL_38;
      }
      goto LABEL_36;
    }
    operator delete(v41);
    if (SHIBYTE(v39) < 0) {
      goto LABEL_55;
    }
  }
LABEL_35:
  if (!v37) {
    goto LABEL_38;
  }
LABEL_36:
  if (SHIBYTE(v36) < 0) {
    operator delete(__p);
  }
LABEL_38:
  if (!v34) {
    goto LABEL_41;
  }
  if ((SHIBYTE(v33) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v30) & 0x80000000) == 0) {
      goto LABEL_41;
    }
LABEL_58:
    operator delete((void *)v29);
    if (!v28) {
      goto LABEL_44;
    }
    goto LABEL_42;
  }
  operator delete((void *)v32);
  if (SHIBYTE(v30) < 0) {
    goto LABEL_58;
  }
LABEL_41:
  if (!v28) {
    goto LABEL_44;
  }
LABEL_42:
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
LABEL_44:
  if (!v25) {
    goto LABEL_47;
  }
  if ((v24 & 0x80000000) == 0)
  {
    if ((v22 & 0x80000000) == 0) {
      goto LABEL_47;
    }
LABEL_61:
    operator delete(v21);
    if (!v20) {
      return;
    }
    goto LABEL_48;
  }
  operator delete(v23);
  if (v22 < 0) {
    goto LABEL_61;
  }
LABEL_47:
  if (!v20) {
    return;
  }
LABEL_48:
  if (v19 < 0) {
    operator delete(v18);
  }
}

void sub_215E11D3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  if (*(char *)(v3 - 169) < 0) {
    operator delete(*(void **)(v3 - 192));
  }
  sub_215741B98(v2);
  if (*(unsigned char *)(v3 - 200))
  {
    if (*(char *)(v3 - 201) < 0) {
      operator delete(*(void **)(v3 - 224));
    }
  }
  sub_2158B0CE8((uint64_t)va1);
  sub_2158B0CE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215E11DB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2158B0CE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215E11DCC(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890770, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267890770))
  {
    qword_267890768 = (uint64_t)std::generic_category();
    __cxa_guard_release(&qword_267890770);
  }
  if (*(void *)(a1 + 8) == qword_267890768)
  {
    int v2 = *(_DWORD *)a1;
    if (*(int *)a1 > 33)
    {
      if (v2 == 34)
      {
        exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_215E121A4(exception, a1);
        __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
      }
      if (v2 == 84)
      {
        CFIndex v4 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        sub_215E12294(v4, a1);
        __cxa_throw(v4, (struct type_info *)off_26425A318, MEMORY[0x263F8C078]);
      }
    }
    else
    {
      if (v2 == 22)
      {
        uint64_t v6 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_215E11FC4(v6, a1);
        __cxa_throw(v6, (struct type_info *)off_26425A320, MEMORY[0x263F8C080]);
      }
      if (v2 == 33)
      {
        uint64_t v3 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_215E120B4(v3, a1);
        __cxa_throw(v3, (struct type_info *)off_26425A2F8, MEMORY[0x263F8C058]);
      }
    }
  }
  uint64_t v5 = __cxa_allocate_exception(0x88uLL);
  sub_215E10D38((uint64_t)v5, (_OWORD *)a1);
  __cxa_throw(v5, (struct type_info *)&unk_26C6865B8, (void (*)(void *))sub_215E10DF0);
}

void sub_215E11F60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215E11F74(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215E11F88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215E11F9C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215E11FB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215E11FC4(std::logic_error *this, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 112)) {
    uint64_t v3 = (long long *)(a2 + 16);
  }
  else {
    uint64_t v3 = (long long *)&unk_215EF9F28;
  }
  if (*((unsigned char *)v3 + 24))
  {
    sub_215AEA430(v3);
    std::logic_error::logic_error(this, &v4);
    this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v4.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::logic_error::logic_error(this, "");
    this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  }
}

void sub_215E12098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215E120B4(std::logic_error *this, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 112)) {
    uint64_t v3 = (long long *)(a2 + 16);
  }
  else {
    uint64_t v3 = (long long *)&unk_215EF9F28;
  }
  if (*((unsigned char *)v3 + 24))
  {
    sub_215AEA430(v3);
    std::logic_error::logic_error(this, &v4);
    this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C380] + 16);
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v4.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::logic_error::logic_error(this, "");
    this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C380] + 16);
  }
}

void sub_215E12188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215E121A4(std::logic_error *this, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 112)) {
    uint64_t v3 = (long long *)(a2 + 16);
  }
  else {
    uint64_t v3 = (long long *)&unk_215EF9F28;
  }
  if (*((unsigned char *)v3 + 24))
  {
    sub_215AEA430(v3);
    std::logic_error::logic_error(this, &v4);
    this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v4.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::logic_error::logic_error(this, "");
    this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  }
}

void sub_215E12278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215E12294(std::runtime_error *this, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 112)) {
    uint64_t v3 = (long long *)(a2 + 16);
  }
  else {
    uint64_t v3 = (long long *)&unk_215EF9F28;
  }
  if (*((unsigned char *)v3 + 24))
  {
    sub_215AEA430(v3);
    std::runtime_error::runtime_error(this, &v4);
    this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x263F8C398] + 16);
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v4.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::runtime_error::runtime_error(this, "");
    this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x263F8C398] + 16);
  }
}

void sub_215E12368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215E12384(void **a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  v40[2] = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *((void *)a2 + 1);
  sub_215741BFC(__dst, a2 + 1);
  char v19 = 0;
  LOBYTE(v18) = 0;
  sub_215E11210((uint64_t)&__p, (uint64_t)__dst, a1, 0, (const std::string::value_type *)&v18);
  int v12 = v31;
  if (v31)
  {
    uint64_t v13 = __p;
    v40[0] = v30;
    *(void *)((char *)v40 + 7) = *(void *)((char *)&v30 + 7);
    char v7 = HIBYTE(v30);
    long long v30 = 0uLL;
    std::string __p = 0;
    int v14 = v37;
    if (v37) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v13 = 0;
    int v14 = v37;
    if (v37)
    {
LABEL_3:
      uint64_t v15 = v32;
      v39[0] = v33;
      *(void *)((char *)v39 + 7) = *(void *)((char *)&v33 + 7);
      char v9 = HIBYTE(v33);
      long long v32 = 0;
      long long v33 = 0uLL;
      uint64_t v10 = v34;
      uint64_t v8 = v35;
      v38[0] = v36;
      *(void *)((char *)v38 + 7) = *(void *)((char *)&v36 + 7);
      char v11 = HIBYTE(v36);
      long long v35 = 0;
      long long v36 = 0uLL;
      *(void *)a3 = v5;
      *(void *)(a3 + 8) = v6;
      *(unsigned char *)(a3 + 16) = 0;
      *(unsigned char *)(a3 + 112) = 0;
      *(unsigned char *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
      if (!v12) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  uint64_t v15 = 0;
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 112) = 0;
  *(unsigned char *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  if (v12)
  {
LABEL_4:
    uint64_t v16 = v40[0];
    *(void *)(a3 + 16) = v13;
    *(void *)(a3 + 24) = v16;
    *(void *)(a3 + 31) = *(void *)((char *)v40 + 7);
    *(unsigned char *)(a3 + 39) = v7;
    v40[0] = 0;
    *(void *)((char *)v40 + 7) = 0;
    *(unsigned char *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 1;
    uint64_t v13 = 0;
    char v7 = 0;
  }
LABEL_5:
  *(unsigned char *)(a3 + 48) = 0;
  *(unsigned char *)(a3 + 104) = 0;
  if (v14)
  {
    uint64_t v17 = v39[0];
    *(void *)(a3 + 48) = v15;
    *(void *)(a3 + 56) = v17;
    *(void *)(a3 + 63) = *(void *)((char *)v39 + 7);
    *(unsigned char *)(a3 + 71) = v9;
    v39[0] = 0;
    *(void *)((char *)v39 + 7) = 0;
    *(void *)(a3 + 72) = v10;
    *(void *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v8;
    *(void *)(a3 + 88) = v38[0];
    *(void *)(a3 + 95) = *(void *)((char *)v38 + 7);
    *(unsigned char *)(a3 + 103) = v11;
    v38[0] = 0;
    *(void *)((char *)v38 + 7) = 0;
    *(unsigned char *)(a3 + 104) = 1;
  }
  *(unsigned char *)(a3 + 112) = 1;
  if (v12 && v7 < 0)
  {
    operator delete(v13);
    int v14 = v37;
  }
  if (v14)
  {
    if ((SHIBYTE(v36) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v33) & 0x80000000) == 0) {
        goto LABEL_13;
      }
LABEL_30:
      operator delete(v32);
      if (!v31) {
        goto LABEL_16;
      }
      goto LABEL_14;
    }
    operator delete(v35);
    if (SHIBYTE(v33) < 0) {
      goto LABEL_30;
    }
  }
LABEL_13:
  if (!v31) {
    goto LABEL_16;
  }
LABEL_14:
  if (SHIBYTE(v30) < 0) {
    operator delete(__p);
  }
LABEL_16:
  if (v19 < 0) {
    operator delete(v18);
  }
  if (v28)
  {
    if (!v27) {
      goto LABEL_22;
    }
    if (v26 < 0)
    {
      operator delete(v25);
      if ((v24 & 0x80000000) == 0)
      {
LABEL_22:
        if (!v22) {
          return;
        }
        goto LABEL_23;
      }
    }
    else if ((v24 & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v23);
    if (!v22) {
      return;
    }
LABEL_23:
    if (v21 < 0) {
      operator delete(__dst[0]);
    }
  }
}

void sub_215E12610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_21573FE74((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_215E12638@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  *(unsigned char *)(a2 + 12std::__fs::filesystem::__rename(__from, __to, 0) = 1;
  return result;
}

void sub_215E1298C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_215E12B0C(unsigned int a1@<W0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  sub_215741BFC(v7, a2);
  sub_215E1393C((uint64_t)&v16, a1, (long long *)v7);
  *(_OWORD *)a3 = v16;
  *(unsigned char *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 112) = 0;
  if (v26)
  {
    *(unsigned char *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
    int v5 = v19;
    if (v19)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(void *)(a3 + 32) = v18;
      uint64_t v18 = 0;
      long long __p = 0uLL;
      *(unsigned char *)(a3 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 1;
    }
    *(unsigned char *)(a3 + 48) = 0;
    *(unsigned char *)(a3 + 104) = 0;
    if (v25)
    {
      uint64_t v6 = v22;
      *(void *)(a3 + 64) = v21;
      *(_OWORD *)(a3 + 48) = v20;
      long long v20 = 0uLL;
      *(void *)(a3 + 72) = v6;
      *(_OWORD *)(a3 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v23;
      *(void *)(a3 + 96) = v24;
      uint64_t v21 = 0;
      long long v23 = 0uLL;
      uint64_t v24 = 0;
      *(unsigned char *)(a3 + 104) = 1;
    }
    *(unsigned char *)(a3 + 112) = 1;
    if (v5 && SHIBYTE(v18) < 0) {
      operator delete((void *)__p);
    }
  }
  if (v15)
  {
    if (!v14) {
      goto LABEL_13;
    }
    if (v13 < 0)
    {
      operator delete(v12);
      if ((v11 & 0x80000000) == 0)
      {
LABEL_13:
        if (!v9) {
          return;
        }
        goto LABEL_14;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v10);
    if (!v9) {
      return;
    }
LABEL_14:
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
}

void sub_215E12C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215E12C88(uint64_t a1, unsigned int a2, void **a3)
{
  sub_2157CFEA8((uint64_t)__p, "");
  char v44 = 1;
  uint64_t v6 = sub_215E1393C((uint64_t)&__dst, a2, (long long *)__p);
  sub_215E10780(v6, &v55);
  if (!v54) {
    goto LABEL_8;
  }
  if (!v53) {
    goto LABEL_5;
  }
  if ((v52 & 0x80000000) == 0)
  {
    if ((v50 & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_49:
    operator delete(v49);
    if (!v48) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  operator delete(v51);
  if (v50 < 0) {
    goto LABEL_49;
  }
LABEL_5:
  if (!v48) {
    goto LABEL_8;
  }
LABEL_6:
  if (v47 < 0) {
    operator delete(v46);
  }
LABEL_8:
  if (!v44) {
    goto LABEL_15;
  }
  if (v43)
  {
    if ((v42 & 0x80000000) == 0)
    {
      if ((v40 & 0x80000000) == 0) {
        goto LABEL_12;
      }
LABEL_52:
      operator delete(v39);
      if (!v38) {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
    operator delete(v41);
    if (v40 < 0) {
      goto LABEL_52;
    }
  }
LABEL_12:
  if (!v38) {
    goto LABEL_15;
  }
LABEL_13:
  if (v37 < 0) {
    operator delete(__p[0]);
  }
LABEL_15:
  size_t v7 = *((unsigned __int8 *)a3 + 23);
  size_t v8 = (size_t)a3[1];
  if ((v7 & 0x80u) == 0) {
    int64_t v9 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    int64_t v9 = (int64_t)a3[1];
  }
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v55.__r_.__value_.__l.__size_;
  }
  if ((uint64_t)size <= v9)
  {
    char v11 = (void **)*a3;
    int v12 = (v7 & 0x80u) == 0 ? a3 : (void **)*a3;
    char v13 = (v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v55
        : (std::string *)v55.__r_.__value_.__r.__words[0];
    if (!memcmp(v12, v13, size))
    {
      if ((v7 & 0x80) != 0)
      {
        a3 = v11;
        if (v8 >= size)
        {
LABEL_41:
          if (v8 - size < v8) {
            v8 -= size;
          }
          if (v8 >= 0x7FFFFFFFFFFFFFF8) {
            sub_215731CD8();
          }
          if (v8 >= 0x17)
          {
            uint64_t v16 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v8 | 7) != 0x17) {
              uint64_t v16 = v8 | 7;
            }
            uint64_t v17 = v16 + 1;
            p_dsint t = (long long *)operator new(v16 + 1);
            *((void *)&__dst + 1) = v8;
            long long v46 = (void *)(v17 | 0x8000000000000000);
            *(void *)&long long __dst = p_dst;
          }
          else
          {
            HIBYTE(v46) = v8;
            p_dsint t = &__dst;
            if (!v8)
            {
              LOBYTE(__dst) = 0;
              if ((SHIBYTE(v46) & 0x80000000) == 0)
              {
LABEL_47:
                *(_OWORD *)char v27 = __dst;
                char v28 = v46;
                goto LABEL_62;
              }
LABEL_61:
              sub_215738B0C(v27, (void *)__dst, *((unint64_t *)&__dst + 1));
LABEL_62:
              char v29 = 1;
              LOBYTE(v3std::__fs::filesystem::__rename(__from, __to, 0) = 0;
              char v34 = 0;
              char v35 = 1;
              sub_215E12B0C(a2, (long long *)v27, a1);
              if (v35)
              {
                if (v34)
                {
                  if (v33 < 0) {
                    operator delete(v32);
                  }
                  if (v31 < 0) {
                    operator delete(v30);
                  }
                }
                if (v29 && SHIBYTE(v28) < 0) {
                  operator delete(v27[0]);
                }
              }
              if (SHIBYTE(v46) < 0)
              {
                char v14 = (void *)__dst;
LABEL_73:
                operator delete(v14);
                goto LABEL_74;
              }
              goto LABEL_74;
            }
          }
          memmove(p_dst, (char *)a3 + size, v8);
          *((unsigned char *)p_dst + v8) = 0;
          if ((SHIBYTE(v46) & 0x80000000) == 0) {
            goto LABEL_47;
          }
          goto LABEL_61;
        }
      }
      else
      {
        size_t v8 = v7;
        if (size <= v7) {
          goto LABEL_41;
        }
      }
      sub_215739EF4();
    }
  }
  if ((v7 & 0x80) != 0)
  {
    sub_215738B0C(&v18, *a3, v8);
  }
  else
  {
    long long v18 = *(_OWORD *)a3;
    unsigned __int8 v19 = a3[2];
  }
  char v20 = 1;
  LOBYTE(v21) = 0;
  char v25 = 0;
  char v26 = 1;
  sub_215E12B0C(a2, &v18, a1);
  if (v26)
  {
    if (!v25) {
      goto LABEL_36;
    }
    if (v24 < 0)
    {
      operator delete(v23);
      if ((v22 & 0x80000000) == 0)
      {
LABEL_36:
        if (!v20) {
          goto LABEL_74;
        }
        goto LABEL_37;
      }
    }
    else if ((v22 & 0x80000000) == 0)
    {
      goto LABEL_36;
    }
    operator delete(v21);
    if (v20)
    {
LABEL_37:
      if ((SHIBYTE(v19) & 0x80000000) == 0) {
        goto LABEL_74;
      }
      char v14 = (void *)v18;
      goto LABEL_73;
    }
  }
LABEL_74:
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
}

void sub_215E13020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (*(char *)(v23 - 185) < 0)
  {
    operator delete(*(void **)(v23 - 208));
    if ((*(char *)(v23 - 65) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v23 - 65) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v23 - 88));
  _Unwind_Resume(exception_object);
}

void sub_215E13098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_21573FF04(v36 - 208);
  sub_21573FE74((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_215E130B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

void sub_215E130C8(uint64_t a1, unsigned int a2, void **a3)
{
  sub_2157CFEA8((uint64_t)v36, "");
  char v44 = 1;
  uint64_t v6 = std::generic_category();
  sub_215741BFC(&v57, (long long *)v36);
  *(void *)&long long __dst = a2;
  *((void *)&__dst + 1) = v6;
  LOBYTE(__p) = 0;
  char v55 = 0;
  if (v66)
  {
    char v48 = 0;
    if (v59)
    {
      long long __p = v57;
      uint64_t v47 = v58;
      uint64_t v58 = 0;
      long long v57 = 0uLL;
      char v48 = 1;
    }
    LOBYTE(v49) = 0;
    char v54 = 0;
    if (v65)
    {
      uint64_t v50 = v61;
      long long v49 = v60;
      long long v60 = 0uLL;
      long long v52 = v63;
      uint64_t v51 = v62;
      uint64_t v53 = v64;
      uint64_t v61 = 0;
      long long v63 = 0uLL;
      uint64_t v64 = 0;
      char v54 = 1;
    }
    char v55 = 1;
    if (v59 && SHIBYTE(v58) < 0) {
      operator delete((void *)v57);
    }
  }
  sub_215E10780((uint64_t)&__dst, &v56);
  if (v55)
  {
    if (!v54) {
      goto LABEL_13;
    }
    if (SHIBYTE(v53) < 0)
    {
      operator delete((void *)v52);
      if ((SHIBYTE(v50) & 0x80000000) == 0)
      {
LABEL_13:
        if (!v48) {
          goto LABEL_16;
        }
LABEL_14:
        if (SHIBYTE(v47) < 0) {
          operator delete((void *)__p);
        }
        goto LABEL_16;
      }
    }
    else if ((SHIBYTE(v50) & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete((void *)v49);
    if (!v48) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
LABEL_16:
  if (!v44) {
    goto LABEL_23;
  }
  if (v43)
  {
    if ((v42 & 0x80000000) == 0)
    {
      if ((v40 & 0x80000000) == 0) {
        goto LABEL_20;
      }
LABEL_60:
      operator delete(v39);
      if (!v38) {
        goto LABEL_23;
      }
      goto LABEL_21;
    }
    operator delete(v41);
    if (v40 < 0) {
      goto LABEL_60;
    }
  }
LABEL_20:
  if (!v38) {
    goto LABEL_23;
  }
LABEL_21:
  if (v37 < 0) {
    operator delete(v36[0]);
  }
LABEL_23:
  size_t v7 = *((unsigned __int8 *)a3 + 23);
  size_t v8 = (size_t)a3[1];
  if ((v7 & 0x80u) == 0) {
    int64_t v9 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    int64_t v9 = (int64_t)a3[1];
  }
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v56.__r_.__value_.__l.__size_;
  }
  if ((uint64_t)size <= v9)
  {
    char v11 = (void **)*a3;
    int v12 = (v7 & 0x80u) == 0 ? a3 : (void **)*a3;
    char v13 = (v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v56
        : (std::string *)v56.__r_.__value_.__r.__words[0];
    if (!memcmp(v12, v13, size))
    {
      if ((v7 & 0x80) != 0)
      {
        a3 = v11;
        if (v8 >= size)
        {
LABEL_49:
          if (v8 - size < v8) {
            v8 -= size;
          }
          if (v8 >= 0x7FFFFFFFFFFFFFF8) {
            sub_215731CD8();
          }
          if (v8 >= 0x17)
          {
            uint64_t v16 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v8 | 7) != 0x17) {
              uint64_t v16 = v8 | 7;
            }
            uint64_t v17 = v16 + 1;
            p_dsint t = (long long *)operator new(v16 + 1);
            *((void *)&__dst + 1) = v8;
            *(void *)&long long __p = v17 | 0x8000000000000000;
            *(void *)&long long __dst = p_dst;
          }
          else
          {
            BYTE7(__p) = v8;
            p_dsint t = &__dst;
            if (!v8)
            {
              LOBYTE(__dst) = 0;
              if ((SBYTE7(__p) & 0x80000000) == 0)
              {
LABEL_55:
                *(_OWORD *)char v27 = __dst;
                uint64_t v28 = __p;
                goto LABEL_70;
              }
LABEL_69:
              sub_215738B0C(v27, (void *)__dst, *((unint64_t *)&__dst + 1));
LABEL_70:
              char v29 = 1;
              LOBYTE(v3std::__fs::filesystem::__rename(__from, __to, 0) = 0;
              char v34 = 0;
              char v35 = 1;
              sub_2157CFBCC(a2, (long long *)v27, a1);
              if (v35)
              {
                if (v34)
                {
                  if (v33 < 0) {
                    operator delete(v32);
                  }
                  if (v31 < 0) {
                    operator delete(v30);
                  }
                }
                if (v29 && SHIBYTE(v28) < 0) {
                  operator delete(v27[0]);
                }
              }
              if (SBYTE7(__p) < 0)
              {
                char v14 = (void *)__dst;
LABEL_81:
                operator delete(v14);
                goto LABEL_82;
              }
              goto LABEL_82;
            }
          }
          memmove(p_dst, (char *)a3 + size, v8);
          *((unsigned char *)p_dst + v8) = 0;
          if ((SBYTE7(__p) & 0x80000000) == 0) {
            goto LABEL_55;
          }
          goto LABEL_69;
        }
      }
      else
      {
        size_t v8 = v7;
        if (size <= v7) {
          goto LABEL_49;
        }
      }
      sub_215739EF4();
    }
  }
  if ((v7 & 0x80) != 0)
  {
    sub_215738B0C(&v18, *a3, v8);
  }
  else
  {
    long long v18 = *(_OWORD *)a3;
    unsigned __int8 v19 = a3[2];
  }
  char v20 = 1;
  LOBYTE(v21) = 0;
  char v25 = 0;
  char v26 = 1;
  sub_2157CFBCC(a2, &v18, a1);
  if (v26)
  {
    if (!v25) {
      goto LABEL_44;
    }
    if (v24 < 0)
    {
      operator delete(v23);
      if ((v22 & 0x80000000) == 0)
      {
LABEL_44:
        if (!v20) {
          goto LABEL_82;
        }
        goto LABEL_45;
      }
    }
    else if ((v22 & 0x80000000) == 0)
    {
      goto LABEL_44;
    }
    operator delete(v21);
    if (v20)
    {
LABEL_45:
      if ((SHIBYTE(v19) & 0x80000000) == 0) {
        goto LABEL_82;
      }
      char v14 = (void *)v18;
      goto LABEL_81;
    }
  }
LABEL_82:
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
}

void sub_215E1352C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v55 - 185) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v55 - 185) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v55 - 208));
  _Unwind_Resume(exception_object);
}

void sub_215E135A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
}

void sub_215E135C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_215E135D4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    sub_215738B0C(__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a1;
    uint64_t v4 = *(void *)(a1 + 16);
  }
  char v5 = 1;
  LOBYTE(v6) = 0;
  char v10 = 0;
  char v11 = 1;
  sub_215E12B0C(2u, (long long *)__p, a2);
  if (v11)
  {
    if (!v10) {
      goto LABEL_8;
    }
    if (v9 < 0)
    {
      operator delete(v8);
      if ((v7 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v5) {
          return;
        }
        goto LABEL_9;
      }
    }
    else if ((v7 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v6);
    if (!v5) {
      return;
    }
LABEL_9:
    if (SHIBYTE(v4) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_215E136A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215E136B8(std::error_category *a1)
{
  std::error_category::~error_category(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215E136F0(uint64_t a1, const char **a2, int *a3, std::string *a4)
{
  int v8 = 0;
  if (*a2) {
    sub_215743A68(v7, a2);
  }
  else {
    sub_21574344C(v7, "nullptr");
  }
  char v11 = (std::string *)v7;
  int v12 = (std::string *)" error ";
  char v13 = v7;
  char v14 = (std::string *)" error ";
  char v15 = (std::string *)" error ";
  if (v8 == -1) {
    sub_215742D4C();
  }
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  ((void (*)(std::string *, _DWORD *))off_26C686610[v8])(&v9, v7);
  std::to_string(&v9, *a3);
  char v11 = (std::string *)v7;
  int v12 = &v9;
  char v13 = v7;
  char v14 = &v9;
  char v15 = &v9;
  if (v8 == -1) {
    sub_215742D4C();
  }
  char v10 = &v11;
  ((void (*)(std::string ***, _DWORD *))off_26C686628[v8])(&v10, v7);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  char v11 = (std::string *)v7;
  int v12 = (std::string *)": ";
  char v13 = v7;
  char v14 = (std::string *)": ";
  char v15 = (std::string *)": ";
  if (v8 == -1) {
    sub_215742D4C();
  }
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  ((void (*)(std::string *, _DWORD *))off_26C686640[v8])(&v9, v7);
  char v11 = (std::string *)v7;
  int v12 = a4;
  char v13 = v7;
  char v14 = a4;
  char v15 = a4;
  if (v8 == -1) {
    sub_215742D4C();
  }
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  ((void (*)(std::string *, _DWORD *))off_26C686658[v8])(&v9, v7);
  if (v8 == -1) {
    sub_215742D4C();
  }
  char v11 = &v9;
  uint64_t result = ((uint64_t (*)(std::string **, _DWORD *))off_26C686670[v8])(&v11, v7);
  if (v8 != -1) {
    return ((uint64_t (*)(std::string **, _DWORD *))off_26C6865F8[v8])(&v11, v7);
  }
  return result;
}

void sub_215E138F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

uint64_t sub_215E1393C(uint64_t a1, unsigned int a2, long long *a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890760, memory_order_acquire) & 1) == 0)
  {
    char v10 = a3;
    unsigned int v9 = a2;
    int v8 = __cxa_guard_acquire(&qword_267890760);
    a2 = v9;
    a3 = v10;
    if (v8)
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_26ACF2458, &dword_21572C000);
      __cxa_guard_release(&qword_267890760);
      a2 = v9;
      a3 = v10;
    }
  }
  uint64_t v4 = a2;
  sub_215741BFC(__p, a3);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = &off_26ACF2458;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  if (v20)
  {
    *(unsigned char *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 0;
    int v5 = v13;
    if (v13)
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)__p;
      *(void *)(a1 + 32) = v12;
      __p[1] = 0;
      uint64_t v12 = 0;
      __p[0] = 0;
      *(unsigned char *)(a1 + 4std::__fs::filesystem::__rename(__from, __to, 0) = 1;
    }
    *(unsigned char *)(a1 + 48) = 0;
    *(unsigned char *)(a1 + 104) = 0;
    if (v19)
    {
      uint64_t v6 = v16;
      *(void *)(a1 + 64) = v15;
      *(_OWORD *)(a1 + 48) = v14;
      long long v14 = 0uLL;
      *(void *)(a1 + 72) = v6;
      *(_OWORD *)(a1 + 8std::__fs::filesystem::__rename(__from, __to, 0) = v17;
      *(void *)(a1 + 96) = v18;
      uint64_t v15 = 0;
      long long v17 = 0uLL;
      uint64_t v18 = 0;
      *(unsigned char *)(a1 + 104) = 1;
    }
    *(unsigned char *)(a1 + 112) = 1;
    if (v5 && SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_215E13AA0(std::exception *a1)
{
  std::exception::~exception(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215E13AD8(unsigned __int8 *a1@<X0>, std::string::size_type a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v3 = a2;
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a3, a2);
  for (; v3; --v3)
  {
    std::string::value_type v6 = __toupper(*a1);
    std::string::push_back(a3, v6);
    ++a1;
  }
}

void sub_215E13B3C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_215E13B5C@<Q0>(std::string *__s@<X0>, char *a2@<X1>, int64_t a3@<X2>, const std::string::value_type *a4@<X3>, std::string::size_type a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
  {
    int64_t size = __s->__r_.__value_.__l.__size_;
    if (size) {
      BOOL v18 = a3 == 0;
    }
    else {
      BOOL v18 = 1;
    }
    if (v18) {
      goto LABEL_24;
    }
    uint64_t v19 = a7 ? a6 : -1;
    uint64_t v38 = v19;
    long long v17 = (std::string *)__s->__r_.__value_.__r.__words[0];
    if (size < a3) {
      goto LABEL_24;
    }
  }
  else
  {
    int64_t size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
    if (*((unsigned char *)&__s->__r_.__value_.__s + 23)) {
      BOOL v15 = a3 == 0;
    }
    else {
      BOOL v15 = 1;
    }
    if (v15) {
      goto LABEL_24;
    }
    uint64_t v16 = a7 ? a6 : -1;
    uint64_t v38 = v16;
    long long v17 = __s;
    if (size < a3) {
      goto LABEL_24;
    }
  }
  char v20 = (char *)v17 + size;
  int v21 = *a2;
  char v22 = v17;
  do
  {
    int64_t v23 = size - a3;
    if (v23 == -1) {
      break;
    }
    char v24 = (char *)memchr(v22, v21, v23 + 1);
    if (!v24) {
      break;
    }
    char v25 = v24;
    if (!memcmp(v24, a2, a3))
    {
      if (v38)
      {
        if (v25 != v20)
        {
          std::string::size_type v27 = v25 - (char *)v17;
          if (v25 - (char *)v17 != -1)
          {
LABEL_28:
            std::string::replace(__s, v27, a3, a4, a5);
            if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
            {
              char v29 = (std::string *)__s->__r_.__value_.__r.__words[0];
              std::string::size_type v28 = __s->__r_.__value_.__l.__size_;
            }
            else
            {
              std::string::size_type v28 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
              char v29 = __s;
            }
            std::string::size_type v30 = v27 + a5;
            if (v28 >= v27 + a5)
            {
              char v31 = (char *)v29 + v30;
              long long v32 = (char *)v29 + v28;
              int64_t v33 = v28 - v30;
              if (v33 >= a3)
              {
                --v38;
                int v34 = *a2;
                while (1)
                {
                  int64_t v35 = v33 - a3;
                  if (v35 == -1) {
                    break;
                  }
                  uint64_t v36 = (char *)memchr(v31, v34, v35 + 1);
                  if (!v36) {
                    break;
                  }
                  char v37 = v36;
                  if (!memcmp(v36, a2, a3))
                  {
                    if (v38)
                    {
                      if (v37 != v32)
                      {
                        std::string::size_type v27 = v37 - (char *)v29;
                        if (v37 - (char *)v29 != -1) {
                          goto LABEL_28;
                        }
                      }
                    }
                    goto LABEL_24;
                  }
                  char v31 = v37 + 1;
                  int64_t v33 = v32 - (v37 + 1);
                  if (v33 < a3) {
                    goto LABEL_24;
                  }
                }
              }
            }
          }
        }
      }
      break;
    }
    char v22 = (std::string *)(v25 + 1);
    int64_t size = v20 - (v25 + 1);
  }
  while (size >= a3);
LABEL_24:
  __n128 result = *(__n128 *)&__s->__r_.__value_.__l.__data_;
  *(_OWORD *)a8 = *(_OWORD *)&__s->__r_.__value_.__l.__data_;
  *(void *)(a8 + 16) = *((void *)&__s->__r_.__value_.__l + 2);
  __s->__r_.__value_.__l.__size_ = 0;
  __s->__r_.__value_.__r.__words[2] = 0;
  __s->__r_.__value_.__r.__words[0] = 0;
  return result;
}

uint64_t sub_215E13D50@<X0>(char *__format@<X0>, std::string *a2@<X8>, ...)
{
  va_start(va, a2);
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t result = vsnprintf(__str, 0x100uLL, __format, va);
  if (result <= 0xFF)
  {
    size_t v11 = result;
    if (result >= 0x17)
    {
      uint64_t v12 = (result & 0xFFFFFFF8) + 8;
      if ((result | 7) != 0x17) {
        uint64_t v12 = result | 7;
      }
      uint64_t v13 = v12 + 1;
      long long v14 = (std::string *)operator new(v12 + 1);
      a2->__r_.__value_.__l.__size_ = v11;
      a2->__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
      a2 = v14;
    }
    else
    {
      *((unsigned char *)&a2->__r_.__value_.__s + 23) = result;
      if (!result) {
        goto LABEL_27;
      }
    }
    uint64_t result = (uint64_t)memcpy(a2, __str, v11);
LABEL_27:
    a2->__r_.__value_.__s.__data_[v11] = 0;
    return result;
  }
  unint64_t size = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  do
  {
    while (1)
    {
      unint64_t v6 = (int)result + 1;
      if ((size & 0x80) != 0)
      {
        unint64_t size = a2->__r_.__value_.__l.__size_;
        if (size < v6)
        {
LABEL_8:
          std::string::append(a2, v6 - size, 0);
          goto LABEL_11;
        }
        char v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
        a2->__r_.__value_.__l.__size_ = v6;
      }
      else
      {
        if (v6 > size) {
          goto LABEL_8;
        }
        *((unsigned char *)&a2->__r_.__value_.__s + 23) = v6 & 0x7F;
        char v7 = a2;
      }
      v7->__r_.__value_.__s.__data_[v6] = 0;
LABEL_11:
      va_copy(__str, va);
      int v8 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
      unsigned int v9 = v8 >= 0 ? (char *)a2 : (char *)a2->__r_.__value_.__r.__words[0];
      size_t v10 = v8 >= 0 ? HIBYTE(a2->__r_.__value_.__r.__words[2]) : a2->__r_.__value_.__l.__size_;
      uint64_t result = vsnprintf(v9, v10, __format, va);
      unint64_t size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (size > (int)result)
      {
        *((unsigned char *)&a2->__r_.__value_.__s + 23) = result & 0x7F;
        goto LABEL_29;
      }
    }
  }
  while (a2->__r_.__value_.__l.__size_ <= (int)result);
  a2->__r_.__value_.__l.__size_ = (int)result;
  a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
LABEL_29:
  a2->__r_.__value_.__s.__data_[(int)result] = 0;
  return result;
}

void sub_215E13F14(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_215E13F30(int a1, int a2, char *a3, std::string::size_type __requested_capacity, int a5)
{
  memset(&v33, 0, sizeof(v33));
  std::string::reserve(&v33, __requested_capacity);
  if (!__requested_capacity)
  {
LABEL_39:
    if (a5) {
      int v25 = 1;
    }
    else {
      int v25 = 16;
    }
    MEMORY[0x2166C4AE0](&v26);
    std::string::size_type v27 = std::locale::use_facet(&v26, MEMORY[0x263F8C108]);
    std::string::size_type v28 = std::locale::use_facet(&v26, MEMORY[0x263F8C130]);
    int v29 = v25;
    long long v30 = 0u;
    long long v31 = 0u;
    int v32 = 0;
    sub_215E155C4();
  }
  int v8 = &a3[__requested_capacity];
  while (1)
  {
    unsigned int v9 = a3;
    while (2)
    {
      switch(*v9)
      {
        case '$':
        case '(':
        case ')':
        case '*':
        case '+':
        case '.':
        case '/':
        case '?':
        case '[':
        case '\\':
        case ']':
        case '^':
        case '|':
          goto LABEL_9;
        default:
          if (++v9 != v8) {
            continue;
          }
          unsigned int v9 = v8;
LABEL_9:
          unint64_t v10 = v9 - a3;
          if ((unint64_t)(v9 - a3) >= 0x7FFFFFFFFFFFFFF8) {
            sub_215731CD8();
          }
          if (v10 > 0x16)
          {
            uint64_t v18 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v10 | 7) != 0x17) {
              uint64_t v18 = v10 | 7;
            }
            uint64_t v19 = v18 + 1;
            size_t v11 = operator new(v18 + 1);
            __p[1] = (void *)(v9 - a3);
            int64_t v35 = v19 | 0x8000000000000000;
            __p[0] = v11;
            if (a3 == v9)
            {
LABEL_21:
              uint64_t v13 = v11;
              goto LABEL_24;
            }
          }
          else
          {
            HIBYTE(v35) = (_BYTE)v9 - (_BYTE)a3;
            size_t v11 = __p;
            if (a3 == v9) {
              goto LABEL_21;
            }
          }
          if (v10 < 0x20 || (unint64_t)((char *)v11 - a3) < 0x20)
          {
            uint64_t v12 = a3;
            uint64_t v13 = v11;
            do
            {
LABEL_23:
              char v20 = *v12++;
              *v13++ = v20;
            }
            while (v12 != v9);
            goto LABEL_24;
          }
          uint64_t v12 = &a3[v10 & 0xFFFFFFFFFFFFFFE0];
          uint64_t v13 = (char *)v11 + (v10 & 0xFFFFFFFFFFFFFFE0);
          long long v14 = v11 + 1;
          BOOL v15 = (long long *)(a3 + 16);
          unint64_t v16 = v10 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v17 = *v15;
            *(v14 - 1) = *(v15 - 1);
            _OWORD *v14 = v17;
            v14 += 2;
            v15 += 2;
            v16 -= 32;
          }
          while (v16);
          if (v10 != (v10 & 0xFFFFFFFFFFFFFFE0)) {
            goto LABEL_23;
          }
LABEL_24:
          *uint64_t v13 = 0;
          if (v35 >= 0) {
            int v21 = __p;
          }
          else {
            int v21 = (void **)__p[0];
          }
          if (v35 >= 0) {
            std::string::size_type v22 = HIBYTE(v35);
          }
          else {
            std::string::size_type v22 = (std::string::size_type)__p[1];
          }
          std::string::append(&v33, (const std::string::value_type *)v21, v22);
          if (SHIBYTE(v35) < 0) {
            operator delete(__p[0]);
          }
          if (v9 == v8) {
            goto LABEL_39;
          }
          int v23 = *v9;
          char v24 = (int *)&unk_26425B200;
          if (v23 != 42) {
            char v24 = &dword_26425B218;
          }
          if (v23 == 63) {
            char v24 = (int *)&unk_26425B1E8;
          }
          if (v24 == &dword_26425B218)
          {
            std::string::push_back(&v33, 92);
            std::string::push_back(&v33, v23);
          }
          else
          {
            std::string::append(&v33, *((const std::string::value_type **)v24 + 1), *((void *)v24 + 2));
          }
          a3 = v9 + 1;
          if (v9 + 1 == v8) {
            goto LABEL_39;
          }
          break;
      }
      break;
    }
  }
}

void sub_215E142CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_215973ED4(&a10);
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_215E144B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_DWORD *)a1 + 8) = 1065353216;
  if (!a3) {
    return a1;
  }
  int v5 = a2;
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  int v8 = &a2[3 * a3];
  unsigned int v9 = a1 + 2;
  do
  {
    uint64_t v10 = *v5;
    uint64_t v11 = v5[1];
    unint64_t v12 = (v11 + 2654435769 + ((unint64_t)(*v5 + 2654435769) >> 2) + ((*v5 + 2654435769) << 6)) ^ (*v5 + 2654435769);
    if (v7)
    {
      uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
      v13.i16[0] = vaddlv_u8(v13);
      if (v13.u32[0] > 1uLL)
      {
        unint64_t v3 = (v11 + 2654435769 + ((unint64_t)(*v5 + 2654435769) >> 2) + ((*v5 + 2654435769) << 6)) ^ (*v5 + 2654435769);
        if (v12 >= v7) {
          unint64_t v3 = v12 % v7;
        }
      }
      else
      {
        unint64_t v3 = v12 & (v7 - 1);
      }
      long long v14 = *(void **)(*a1 + 8 * v3);
      if (v14)
      {
        BOOL v15 = (void *)*v14;
        if (v15)
        {
          if (v13.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v19 = v15[1];
              if (v19 == v12)
              {
                if (v15[2] == v10 && v15[3] == v11) {
                  goto LABEL_102;
                }
              }
              else if ((v19 & (v7 - 1)) != v3)
              {
                goto LABEL_29;
              }
              BOOL v15 = (void *)*v15;
              if (!v15) {
                goto LABEL_29;
              }
            }
          }
          do
          {
            unint64_t v17 = v15[1];
            if (v17 == v12)
            {
              if (v15[2] == v10 && v15[3] == v11) {
                goto LABEL_102;
              }
            }
            else
            {
              if (v17 >= v7) {
                v17 %= v7;
              }
              if (v17 != v3) {
                break;
              }
            }
            BOOL v15 = (void *)*v15;
          }
          while (v15);
        }
      }
    }
LABEL_29:
    char v20 = operator new(0x28uLL);
    *char v20 = 0;
    v20[1] = v12;
    long long v21 = *(_OWORD *)v5;
    v20[4] = v5[2];
    *((_OWORD *)v20 + 1) = v21;
    float v22 = (float)(unint64_t)(v6 + 1);
    float v23 = *((float *)a1 + 8);
    if (!v7 || (float)(v23 * (float)v7) < v22)
    {
      BOOL v26 = (v7 & (v7 - 1)) != 0;
      if (v7 < 3) {
        BOOL v26 = 1;
      }
      unint64_t v27 = v26 | (2 * v7);
      unint64_t v28 = vcvtps_u32_f32(v22 / v23);
      if (v27 <= v28) {
        size_t prime = v28;
      }
      else {
        size_t prime = v27;
      }
      if (prime == 1)
      {
        size_t prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        size_t prime = std::__next_prime(prime);
        unint64_t v7 = a1[1];
      }
      if (prime <= v7)
      {
        if (prime >= v7) {
          goto LABEL_79;
        }
        unint64_t v40 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
        if (v7 < 3 || (uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
        {
          unint64_t v40 = std::__next_prime(v40);
        }
        else
        {
          uint64_t v42 = 1 << -(char)__clz(v40 - 1);
          if (v40 >= 2) {
            unint64_t v40 = v42;
          }
        }
        if (prime <= v40) {
          size_t prime = v40;
        }
        if (prime >= v7)
        {
          unint64_t v7 = a1[1];
          uint64_t v45 = v7 - 1;
          if ((v7 & (v7 - 1)) == 0) {
            goto LABEL_80;
          }
LABEL_92:
          if (v12 >= v7)
          {
            unint64_t v3 = v12 % v7;
            uint64_t v24 = *a1;
            int v25 = *(void **)(*a1 + 8 * (v12 % v7));
            if (!v25) {
              goto LABEL_81;
            }
          }
          else
          {
            unint64_t v3 = v12;
            uint64_t v24 = *a1;
            int v25 = *(void **)(*a1 + 8 * v12);
            if (!v25) {
              goto LABEL_81;
            }
          }
LABEL_32:
          *char v20 = *v25;
LABEL_100:
          *int v25 = v20;
          goto LABEL_101;
        }
        if (!prime)
        {
          char v44 = (void *)*a1;
          *a1 = 0;
          if (v44) {
            operator delete(v44);
          }
          unint64_t v7 = 0;
          a1[1] = 0;
          uint64_t v45 = -1;
          goto LABEL_80;
        }
      }
      if (prime >> 61) {
        sub_215738AD8();
      }
      long long v30 = operator new(8 * prime);
      long long v31 = (void *)*a1;
      *a1 = (uint64_t)v30;
      if (v31) {
        operator delete(v31);
      }
      uint64_t v32 = 0;
      a1[1] = prime;
      do
        *(void *)(*a1 + 8 * v32++) = 0;
      while (prime != v32);
      std::string v33 = (void *)*v9;
      if (!*v9)
      {
LABEL_91:
        unint64_t v7 = prime;
        uint64_t v45 = prime - 1;
        if ((prime & (prime - 1)) != 0) {
          goto LABEL_92;
        }
LABEL_80:
        unint64_t v3 = v45 & v12;
        uint64_t v24 = *a1;
        int v25 = *(void **)(*a1 + 8 * (v45 & v12));
        if (!v25) {
          goto LABEL_81;
        }
        goto LABEL_32;
      }
      size_t v34 = v33[1];
      size_t v35 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        size_t v36 = v34 & v35;
        *(void *)(*a1 + 8 * v36) = v9;
        for (uint64_t i = (void *)*v33; *v33; uint64_t i = (void *)*v33)
        {
          size_t v38 = i[1] & v35;
          if (v38 == v36)
          {
            std::string v33 = i;
          }
          else if (*(void *)(*a1 + 8 * v38))
          {
            void *v33 = *i;
            uint64_t v39 = 8 * v38;
            *uint64_t i = **(void **)(*a1 + v39);
            **(void **)(*a1 + v39) = i;
          }
          else
          {
            *(void *)(*a1 + 8 * v38) = v33;
            std::string v33 = i;
            size_t v36 = v38;
          }
        }
        goto LABEL_91;
      }
      if (v34 < prime)
      {
        *(void *)(*a1 + 8 * v34) = v9;
        char v43 = (void *)*v33;
        if (*v33) {
          goto LABEL_86;
        }
        goto LABEL_78;
      }
      v34 %= prime;
      *(void *)(*a1 + 8 * v34) = v9;
      char v43 = (void *)*v33;
      if (!*v33)
      {
LABEL_78:
        unint64_t v7 = prime;
LABEL_79:
        uint64_t v45 = v7 - 1;
        if ((v7 & (v7 - 1)) != 0) {
          goto LABEL_92;
        }
        goto LABEL_80;
      }
      while (1)
      {
LABEL_86:
        size_t v48 = v43[1];
        if (v48 >= prime) {
          v48 %= prime;
        }
        if (v48 == v34) {
          goto LABEL_85;
        }
        if (*(void *)(*a1 + 8 * v48))
        {
          void *v33 = *v43;
          uint64_t v47 = 8 * v48;
          void *v43 = **(void **)(*a1 + v47);
          **(void **)(*a1 + v47) = v43;
          char v43 = v33;
LABEL_85:
          std::string v33 = v43;
          char v43 = (void *)*v43;
          if (!v43) {
            goto LABEL_91;
          }
        }
        else
        {
          *(void *)(*a1 + 8 * v48) = v33;
          std::string v33 = v43;
          char v43 = (void *)*v43;
          size_t v34 = v48;
          if (!v43) {
            goto LABEL_91;
          }
        }
      }
    }
    uint64_t v24 = *a1;
    int v25 = *(void **)(*a1 + 8 * v3);
    if (v25) {
      goto LABEL_32;
    }
LABEL_81:
    *char v20 = *v9;
    *unsigned int v9 = v20;
    *(void *)(v24 + 8 * v3) = v9;
    if (*v20)
    {
      unint64_t v46 = *(void *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v46 >= v7) {
          v46 %= v7;
        }
      }
      else
      {
        v46 &= v7 - 1;
      }
      int v25 = (void *)(*a1 + 8 * v46);
      goto LABEL_100;
    }
LABEL_101:
    uint64_t v6 = a1[3] + 1;
    a1[3] = v6;
LABEL_102:
    v5 += 3;
  }
  while (v5 != v8);
  return a1;
}

void sub_215E149C4(_Unwind_Exception *a1)
{
  operator delete(v2);
  int v5 = *v3;
  if (*v3)
  {
    do
    {
      uint64_t v6 = (void *)*v5;
      operator delete(v5);
      int v5 = v6;
    }
    while (v6);
  }
  unint64_t v7 = *v1;
  *uint64_t v1 = 0;
  if (v7) {
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_215E14A0C(uint64_t a1)
{
  int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_215E14A58(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890780, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267890780))
  {
    int64x2_t v43 = vdupq_n_s64(1uLL);
    char v44 = "seconds";
    long long v45 = xmmword_215EF9FC0;
    long long v47 = xmmword_215EF9FD0;
    unint64_t v46 = "minutes";
    size_t v48 = "hours";
    long long v49 = xmmword_215EF9FE0;
    long long v51 = xmmword_215EF9FF0;
    uint64_t v50 = "days";
    long long v52 = "weeks";
    long long v53 = xmmword_215EFA000;
    long long v55 = xmmword_215EFA010;
    char v54 = "months";
    std::string v56 = "years";
    sub_215E144B0(&qword_2678907B0, v43.i64, 7);
    __cxa_atexit((void (*)(void *))sub_215E14A0C, &qword_2678907B0, &dword_21572C000);
    __cxa_guard_release(&qword_267890780);
  }
  unint64_t v6 = a2 + ((unint64_t)(a1 + 2654435769) >> 2) + ((a1 + 2654435769) << 6);
  unint64_t v7 = (v6 + 2654435769u) ^ (a1 + 2654435769);
  if (qword_2678907B8)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)qword_2678907B8);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v9 = (v6 + 2654435769u) ^ (a1 + 2654435769);
      if (v7 >= qword_2678907B8) {
        unint64_t v9 = v7 % qword_2678907B8;
      }
    }
    else
    {
      unint64_t v9 = (qword_2678907B8 - 1) & v7;
    }
    uint64_t v10 = *(void **)(qword_2678907B0 + 8 * v9);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v11[1];
            if (v7 == v15)
            {
              if (v11[2] == a1 && v11[3] == a2) {
                goto LABEL_69;
              }
            }
            else if ((v15 & (qword_2678907B8 - 1)) != v9)
            {
              goto LABEL_28;
            }
            uint64_t v11 = (void *)*v11;
            if (!v11) {
              goto LABEL_28;
            }
          }
        }
        do
        {
          unint64_t v13 = v11[1];
          if (v7 == v13)
          {
            if (v11[2] == a1 && v11[3] == a2)
            {
LABEL_69:
              BOOL v26 = (const char *)v11[4];
              size_t v27 = strlen(v26);
              if (v27 > 0x7FFFFFFFFFFFFFF7) {
                sub_215731CD8();
              }
              size_t v28 = v27;
              if (v27 >= 0x17)
              {
                uint64_t v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v27 | 7) != 0x17) {
                  uint64_t v33 = v27 | 7;
                }
                uint64_t v34 = v33 + 1;
                size_t v35 = operator new(v33 + 1);
                a3[1] = v28;
                a3[2] = v34 | 0x8000000000000000;
                *a3 = v35;
                a3 = v35;
              }
              else
              {
                *((unsigned char *)a3 + 23) = v27;
                if (!v27)
                {
LABEL_81:
                  *((unsigned char *)a3 + v28) = 0;
                  return;
                }
              }
              memmove(a3, v26, v28);
              goto LABEL_81;
            }
          }
          else
          {
            if (v13 >= qword_2678907B8) {
              v13 %= (unint64_t)qword_2678907B8;
            }
            if (v13 != v9) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_28:
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890778, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267890778))
  {
    int64x2_t v43 = (int64x2_t)xmmword_215EFA020;
    char v44 = "atto";
    long long v45 = xmmword_215EFA030;
    long long v47 = xmmword_215EFA040;
    unint64_t v46 = "femto";
    size_t v48 = "pico";
    long long v49 = xmmword_215EFA050;
    long long v51 = xmmword_215EFA060;
    uint64_t v50 = "nano";
    long long v52 = "micro";
    long long v53 = xmmword_215EFA070;
    long long v55 = xmmword_215EFA080;
    char v54 = "milli";
    std::string v56 = "centi";
    long long v57 = xmmword_215EFA090;
    long long v59 = xmmword_215EFA0A0;
    uint64_t v58 = "deci";
    long long v60 = "deca";
    long long v61 = xmmword_215EFA0B0;
    long long v63 = xmmword_215EFA0C0;
    uint64_t v62 = "hecto";
    uint64_t v64 = "kilo";
    uint64_t v65 = 1000000;
    long long v68 = xmmword_215EFA0D0;
    uint64_t v66 = 1;
    std::basic_string_view<_CharT, _Traits>::size_type v67 = "mega";
    uint64_t v69 = "giga";
    uint64_t v70 = 1000000000000;
    uint64_t v71 = 1;
    long long v73 = xmmword_215EFA0E0;
    unsigned __int8 v72 = "tera";
    char v74 = "peta";
    uint64_t v75 = 1000000000000000000;
    uint64_t v76 = 1;
    std::__fs::filesystem::path v77 = "exa";
    sub_215E144B0(&qword_267890788, v43.i64, 16);
    __cxa_atexit((void (*)(void *))sub_215E14A0C, &qword_267890788, &dword_21572C000);
    __cxa_guard_release(&qword_267890778);
  }
  if (qword_267890790)
  {
    uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)qword_267890790);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      unint64_t v17 = v7;
      if (v7 >= qword_267890790) {
        unint64_t v17 = v7 % qword_267890790;
      }
    }
    else
    {
      unint64_t v17 = (qword_267890790 - 1) & v7;
    }
    uint64_t v18 = *(void **)(qword_267890788 + 8 * v17);
    if (v18)
    {
      uint64_t v19 = (void *)*v18;
      if (v19)
      {
        if (v16.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v19[1];
            if (v7 == v23)
            {
              if (v19[2] == a1 && v19[3] == a2) {
                goto LABEL_73;
              }
            }
            else if ((v23 & (qword_267890790 - 1)) != v17)
            {
              goto LABEL_55;
            }
            uint64_t v19 = (void *)*v19;
            if (!v19) {
              goto LABEL_55;
            }
          }
        }
        do
        {
          unint64_t v21 = v19[1];
          if (v7 == v21)
          {
            if (v19[2] == a1 && v19[3] == a2)
            {
LABEL_73:
              int v29 = (const char *)v19[4];
              size_t v30 = strlen(v29);
              if (v30 > 0x7FFFFFFFFFFFFFF7) {
                sub_215731CD8();
              }
              std::string::size_type v31 = v30;
              if (v30 >= 0x17)
              {
                uint64_t v36 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v30 | 7) != 0x17) {
                  uint64_t v36 = v30 | 7;
                }
                uint64_t v37 = v36 + 1;
                p_dsint t = operator new(v36 + 1);
                __dst.__r_.__value_.__l.__size_ = v31;
                __dst.__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
              }
              else
              {
                *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v30;
                p_dsint t = &__dst;
                if (!v30)
                {
LABEL_86:
                  p_dst[v31] = 0;
                  goto LABEL_66;
                }
              }
              memmove(p_dst, v29, v31);
              goto LABEL_86;
            }
          }
          else
          {
            if (v21 >= qword_267890790) {
              v21 %= (unint64_t)qword_267890790;
            }
            if (v21 != v17) {
              break;
            }
          }
          uint64_t v19 = (void *)*v19;
        }
        while (v19);
      }
    }
  }
LABEL_55:
  int v40 = 0;
  sub_21576B740(v39, "ratio<");
  std::to_string(&v41, a1);
  v43.i64[0] = (uint64_t)v39;
  v43.i64[1] = (uint64_t)&v41;
  char v44 = (const char *)v39;
  *(void *)&long long v45 = &v41;
  *((void *)&v45 + 1) = &v41;
  if (v40 == -1) {
    sub_215742D4C();
  }
  uint64_t v42 = &v43;
  ((void (*)(int64x2_t **, _DWORD *))off_26C6866E0[v40])(&v42, v39);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  v43.i64[0] = (uint64_t)v39;
  v43.i64[1] = (uint64_t)",";
  char v44 = (const char *)v39;
  *(void *)&long long v45 = ",";
  *((void *)&v45 + 1) = ",";
  if (v40 == -1) {
    sub_215742D4C();
  }
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
  ((void (*)(std::string *, _DWORD *))off_26C6866F8[v40])(&v41, v39);
  std::to_string(&v41, a2);
  v43.i64[0] = (uint64_t)v39;
  v43.i64[1] = (uint64_t)&v41;
  char v44 = (const char *)v39;
  *(void *)&long long v45 = &v41;
  *((void *)&v45 + 1) = &v41;
  if (v40 == -1) {
    sub_215742D4C();
  }
  uint64_t v42 = &v43;
  ((void (*)(int64x2_t **, _DWORD *))off_26C6866E0[v40])(&v42, v39);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  v43.i64[0] = (uint64_t)v39;
  v43.i64[1] = (uint64_t)">";
  char v44 = (const char *)v39;
  *(void *)&long long v45 = ">";
  *((void *)&v45 + 1) = ">";
  if (v40 == -1) {
    sub_215742D4C();
  }
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
  ((void (*)(std::string *, _DWORD *))off_26C6866F8[v40])(&v41, v39);
  if (v40 == -1) {
    sub_215742D4C();
  }
  v43.i64[0] = (uint64_t)&v41;
  ((void (*)(std::string *__return_ptr, int64x2_t *, _DWORD *))off_26C686710[v40])(&__dst, &v43, v39);
  if (v40 != -1) {
    ((void (*)(int64x2_t *, _DWORD *))off_26C6866C8[v40])(&v43, v39);
  }
LABEL_66:
  uint64_t v24 = std::string::append(&__dst, "seconds", 7uLL);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  a3[2] = *((void *)&v24->__r_.__value_.__l + 2);
  *(_OWORD *)a3 = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_215E152BC(_Unwind_Exception *a1)
{
}

void sub_215E152D4(_Unwind_Exception *a1)
{
}

void sub_215E152F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215E15334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215E15348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_215742CF0((uint64_t)&a13);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x215E15338);
}

uint64_t sub_215E1536C(uint64_t a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dsint t = (long long *)operator new(v7 + 1);
    *((void *)&__dst + 1) = v5;
    unint64_t v11 = v8 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v11) = v4;
  p_dsint t = &__dst;
  if (v4) {
LABEL_8:
  }
    memcpy(p_dst, __s, v5);
  *((unsigned char *)p_dst + v5) = 0;
  sub_215ADFAA8(a1, &__dst, 24);
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)__dst);
  }
  return a1;
}

void sub_215E15448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215E15464(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = MEMORY[0x263F8C2B8];
    uint64_t v4 = *MEMORY[0x263F8C2B8];
    *(void *)a2 = *MEMORY[0x263F8C2B8];
    uint64_t v5 = *(void *)(v3 + 72);
    *(void *)(a2 + *(void *)(v4 - 24)) = *(void *)(v3 + 64);
    *(void *)(a2 + 16) = v5;
    *(void *)(a2 + 24) = MEMORY[0x263F8C318] + 16;
    if (*(char *)(a2 + 111) < 0) {
      operator delete(*(void **)(a2 + 88));
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2166C4BF0](a2 + 128);
    JUMPOUT(0x2166C4D20);
  }
}

void sub_215E155C4()
{
}

void sub_215E15C08(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_215E15C6C(uint64_t a1, char *a2, char *a3)
{
  unint64_t v6 = a2;
  while (1)
  {
    uint64_t v7 = (unsigned __int8 *)v6;
    unint64_t v6 = sub_215E16298(a1, v6, a3);
    if (v7 == (unsigned __int8 *)v6) {
      break;
    }
LABEL_2:
    if (v6 == (char *)v7) {
      goto LABEL_6;
    }
  }
  uint64_t v8 = sub_215E1663C(a1, v7, (unsigned __int8 *)a3);
  if (v7 != v8)
  {
    unint64_t v6 = sub_215E16E80(a1, (char *)v8, a3);
    goto LABEL_2;
  }
LABEL_6:
  if (v7 == (unsigned __int8 *)a2) {
    operator new();
  }
  if (v7 == (unsigned __int8 *)a3) {
    return (unsigned __int8 *)a3;
  }
  if (*v7 == 124)
  {
    unint64_t v9 = v7 + 1;
    uint64_t v10 = (char *)(v7 + 1);
    while (1)
    {
      unint64_t v11 = (unsigned __int8 *)v10;
      uint64_t v10 = sub_215E16298(a1, v10, a3);
      if (v11 == (unsigned __int8 *)v10)
      {
        unint64_t v12 = sub_215E1663C(a1, v11, (unsigned __int8 *)a3);
        if (v11 == v12)
        {
LABEL_15:
          if (v11 == v9) {
            operator new();
          }
          operator new();
        }
        uint64_t v10 = sub_215E16E80(a1, (char *)v12, a3);
      }
      if (v10 == (char *)v11) {
        goto LABEL_15;
      }
    }
  }
  return v7;
}

unsigned __int8 *sub_215E15F34(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return a2;
  }
  if (*a2 == 94) {
    operator new();
  }
  if (a2 != a3)
  {
    while (v3 != a3)
    {
      unint64_t v6 = v3;
      uint64_t v7 = sub_215E18ED0(a1, v3, a3);
      if (v3 != v7)
      {
        uint64_t v3 = sub_215E191FC(a1, v7, a3);
        if (v6 != v3) {
          continue;
        }
      }
      if (v6 + 1 == a3 && *v6 == 36) {
        operator new();
      }
      sub_21597AB4C();
    }
  }
  return a3;
}

char *sub_215E160E8(uint64_t a1, char *a2, char *a3)
{
  unint64_t v6 = sub_215E194AC(a1, a2, a3);
  if (v6 == a2) {
    goto LABEL_12;
  }
  do
  {
    uint64_t v7 = v6;
    unint64_t v6 = sub_215E194AC(a1, v6, a3);
  }
  while (v7 != v6);
  if (v7 == a2) {
    goto LABEL_12;
  }
  if (v7 == a3) {
    return a3;
  }
  if (*v7 == 124)
  {
    uint64_t v8 = v7 + 1;
    unint64_t v9 = sub_215E194AC(a1, v7 + 1, a3);
    if (v7 + 1 != v9)
    {
      do
      {
        uint64_t v10 = v9;
        unint64_t v9 = sub_215E194AC(a1, v9, a3);
      }
      while (v10 != v9);
      if (v10 != v8) {
        operator new();
      }
    }
LABEL_12:
    sub_21597AB4C();
  }
  return v7;
}

char *sub_215E16298(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3)
  {
    int v6 = *a2;
    if (v6 > 91)
    {
      if (v6 == 92)
      {
        if (a2 + 1 != a3)
        {
          int v9 = a2[1];
          if (v9 == 66) {
            operator new();
          }
          if (v9 == 98) {
            operator new();
          }
        }
      }
      else if (v6 == 94)
      {
        operator new();
      }
    }
    else
    {
      if (v6 == 36) {
        operator new();
      }
      if (v6 == 40 && a2 + 1 != a3 && a2[1] == 63 && a2 + 2 != a3)
      {
        int v7 = a2[2];
        if (v7 == 33)
        {
          sub_215974808((uint64_t)v10);
          int v11 = *(_DWORD *)(a1 + 24);
          sub_215E155C4(v10, a2 + 3, a3);
          sub_215974878();
        }
        if (v7 == 61)
        {
          sub_215974808((uint64_t)v10);
          int v11 = *(_DWORD *)(a1 + 24);
          sub_215E155C4(v10, a2 + 3, a3);
          sub_215974878();
        }
      }
    }
  }
  return a2;
}

void sub_215E165EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_215E16600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_215E16614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_215E16628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *sub_215E1663C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v6 = a2;
  switch(*a2)
  {
    case '$':
    case ')':
    case ']':
    case '^':
    case '|':
    case '}':
      return v6;
    case '(':
      if (a2 + 1 == a3) {
        goto LABEL_45;
      }
      if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
      {
        ++*(_DWORD *)(a1 + 36);
        uint64_t v8 = (unsigned __int8 *)sub_215E15C6C(a1, a2 + 3, a3);
        if (v8 != a3 && *v8 == 41)
        {
          --*(_DWORD *)(a1 + 36);
          return v8 + 1;
        }
LABEL_45:
        sub_215974948();
      }
      if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
        operator new();
      }
      ++*(_DWORD *)(a1 + 36);
      unint64_t v12 = (unsigned __int8 *)sub_215E15C6C(a1, a2 + 1, a3);
      if (v12 == a3 || *v12 != 41) {
        goto LABEL_45;
      }
      if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
        operator new();
      }
      --*(_DWORD *)(a1 + 36);
      return v12 + 1;
    case '*':
    case '+':
    case '?':
    case '{':
      sub_2159761A4();
    case '.':
      operator new();
    case '[':
      return sub_215E17280(a1, a2, a3);
    case '\\':
      int v6 = a2;
      if (*a2 != 92) {
        return v6;
      }
      int v9 = a2 + 1;
      if (a2 + 1 == a3) {
        sub_2159762F4();
      }
      int v10 = *v9;
      unsigned int v11 = v10 - 48;
      if (v10 == 48) {
        sub_21597634C(a1);
      }
      if ((v10 - 49) <= 8)
      {
        unint64_t v13 = a2 + 2;
        if (a2 + 2 == a3) {
          goto LABEL_32;
        }
        do
        {
          int v14 = *v13;
          if ((v14 - 48) > 9) {
            break;
          }
          if (v11 >= 0x19999999) {
            goto LABEL_46;
          }
          ++v13;
          unsigned int v11 = v14 + 10 * v11 - 48;
        }
        while (v13 != a3);
        if (v11)
        {
LABEL_32:
          if (v11 <= *(_DWORD *)(a1 + 28)) {
            sub_215976590(a1);
          }
        }
LABEL_46:
        sub_215976538();
      }
      switch((char)v10)
      {
        case 'D':
          operator new();
        case 'S':
          operator new();
        case 'W':
          operator new();
        case 'd':
          operator new();
        case 's':
          operator new();
        case 'w':
          operator new();
        default:
          uint64_t v15 = sub_215E17DC0(a1, a2 + 1, a3, 0);
          if (v9 == v15) {
            int v6 = a2;
          }
          else {
            int v6 = v15;
          }
          break;
      }
      return v6;
    default:
      sub_21597634C(a1);
  }
}

void sub_215E16C10(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

char *sub_215E16E80(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v3 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v4 = *a2;
  if (v4 > 62)
  {
    if (v4 == 63)
    {
      unint64_t v17 = a2 + 1;
      if (v3) {
        BOOL v18 = 1;
      }
      else {
        BOOL v18 = v17 == a3;
      }
      if (!v18 && *v17 == 63) {
        sub_21597A140();
      }
      sub_21597A140();
    }
    uint64_t v5 = a2;
    if (v4 != 123) {
      return v5;
    }
    uint64_t v8 = a2 + 1;
    if (a2 + 1 != a3)
    {
      int v9 = *v8;
      if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38)
      {
        int v10 = v9 - 48;
        unsigned int v11 = a2 + 2;
        if (a2 + 2 == a3)
        {
LABEL_21:
          unsigned int v11 = a3;
        }
        else
        {
          while (1)
          {
            int v12 = *v11;
            if ((v12 & 0xF8) != 0x30 && (v12 & 0xFE) != 0x38) {
              break;
            }
            if (v10 >= 214748364) {
              goto LABEL_69;
            }
            int v10 = v12 + 10 * v10 - 48;
            if (++v11 == a3) {
              goto LABEL_21;
            }
          }
        }
        if (v11 != v8)
        {
          if (v11 == a3) {
            goto LABEL_70;
          }
          int v13 = *v11;
          if (v13 != 44)
          {
            if (v13 == 125)
            {
              int v14 = v11 + 1;
              if (!v3 && v14 != a3 && *v14 == 63) {
                sub_21597A140();
              }
              sub_21597A140();
            }
            goto LABEL_69;
          }
          uint64_t v19 = v11 + 1;
          if (v11 + 1 == a3) {
            goto LABEL_69;
          }
          int v20 = *v19;
          if (v20 == 125)
          {
            unint64_t v21 = v11 + 2;
            if (v3 || v21 == a3 || *v21 != 63) {
              goto LABEL_42;
            }
            goto LABEL_35;
          }
          if ((v20 & 0xF8) != 0x30 && (v20 & 0xFE) != 0x38) {
            goto LABEL_70;
          }
          int v22 = v20 - 48;
          uint64_t v23 = v11 + 2;
          if (v23 == a3)
          {
LABEL_58:
            uint64_t v23 = a3;
          }
          else
          {
            while (1)
            {
              int v24 = *v23;
              if ((v24 & 0xF8) != 0x30 && (v24 & 0xFE) != 0x38) {
                break;
              }
              if (v22 >= 214748364) {
                goto LABEL_69;
              }
              int v22 = v24 + 10 * v22 - 48;
              if (++v23 == a3) {
                goto LABEL_58;
              }
            }
          }
          if (v23 == v19 || v23 == a3 || *v23 != 125) {
LABEL_70:
          }
            sub_21597A328();
          if (v22 >= v10)
          {
            long long v25 = v23 + 1;
            if (!v3 && v25 != a3 && *v25 == 63) {
              sub_21597A140();
            }
            sub_21597A140();
          }
        }
      }
    }
LABEL_69:
    sub_21597A2D0();
  }
  if (v4 == 42)
  {
    uint64_t v15 = a2 + 1;
    if (v3) {
      BOOL v16 = 1;
    }
    else {
      BOOL v16 = v15 == a3;
    }
    if (v16 || *v15 != 63) {
      goto LABEL_42;
    }
LABEL_35:
    sub_21597A140();
  }
  uint64_t v5 = a2;
  if (v4 == 43)
  {
    int v6 = a2 + 1;
    if (!v3 && v6 != a3 && *v6 == 63) {
      goto LABEL_35;
    }
LABEL_42:
    sub_21597A140();
  }
  return v5;
}

unsigned char *sub_215E17280(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 != a3) {
      operator new();
    }
    sub_215978A0C();
  }
  return a2;
}

void sub_215E17C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_215E17DC0(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  int v4 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v5 = *a2;
  switch((char)v5)
  {
    case '0':
      if (!a4) {
        sub_21597634C(a1);
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(_WORD *)a4 = 0;
      return a2 + 1;
    case 'c':
      if (a2 + 1 == a3 || (char)a2[1] < 65) {
        goto LABEL_84;
      }
      unsigned int v7 = a2[1];
      if (v7 >= 0x5B && (v7 - 97) > 0x19u) {
        goto LABEL_84;
      }
      if (!a4) {
        sub_21597634C(a1);
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v7 & 0x1F;
      *((unsigned char *)a4 + 1) = 0;
      return a2 + 2;
    case 'f':
      if (!a4) {
        sub_21597634C(a1);
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(_WORD *)a4 = 12;
      return a2 + 1;
    case 'n':
      if (!a4) {
        sub_21597634C(a1);
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(_WORD *)a4 = 10;
      return a2 + 1;
    case 'r':
      if (!a4) {
        sub_21597634C(a1);
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(_WORD *)a4 = 13;
      return a2 + 1;
    case 't':
      if (!a4) {
        sub_21597634C(a1);
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(_WORD *)a4 = 9;
      return a2 + 1;
    case 'u':
      if (a2 + 1 != a3)
      {
        int v9 = a2[1];
        if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38 || (v9 | 0x20u) - 97 < 6)
        {
          int v4 = a2 + 2;
          if (a2 + 2 != a3)
          {
            int v10 = *v4;
            if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38 || (v10 | 0x20u) - 97 < 6) {
              goto LABEL_42;
            }
          }
        }
      }
      goto LABEL_84;
    case 'v':
      if (!a4) {
        goto LABEL_67;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(_WORD *)a4 = 11;
      return a2 + 1;
    case 'x':
LABEL_42:
      if (v4 + 1 == a3) {
        goto LABEL_84;
      }
      unsigned __int8 v11 = v4[1];
      char v12 = -48;
      if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38) {
        goto LABEL_47;
      }
      v11 |= 0x20u;
      if ((v11 - 97) >= 6u) {
        goto LABEL_84;
      }
      char v12 = -87;
LABEL_47:
      if (v4 + 2 == a3) {
        goto LABEL_84;
      }
      unsigned __int8 v13 = v4[2];
      char v14 = -48;
      if ((v13 & 0xF8) != 0x30 && (v13 & 0xFE) != 0x38)
      {
        v13 |= 0x20u;
        if ((v13 - 97) >= 6u) {
LABEL_84:
        }
          sub_2159762F4();
        char v14 = -87;
      }
      char v15 = v13 + 16 * (v11 + v12) + v14;
      if (!a4) {
        sub_21597634C(a1);
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v15;
      *((unsigned char *)a4 + 1) = 0;
      uint64_t result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95
        || ((char)v5 & 0x80000000) == 0 && (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 16) + 4 * v5) & 0x500) != 0)
      {
        goto LABEL_84;
      }
      if (!a4) {
LABEL_67:
      }
        sub_21597634C(a1);
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v5;
      *((unsigned char *)a4 + 1) = 0;
      return a2 + 1;
  }
  return result;
}

unsigned __int8 *sub_215E183C0(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    sub_2159762F4();
  }
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      uint64_t result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      uint64_t result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      sub_2159796B0(a5, 95);
      uint64_t result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + 8) = 1;
        a4 = *(void *)a4;
      }
      else
      {
        *(unsigned char *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      uint64_t result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      uint64_t result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      uint64_t result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      sub_21597714C(a5, 95);
      uint64_t result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        uint64_t result = sub_215E17DC0(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(void *)(a4 + 8) = 1;
          a4 = *(void *)a4;
        }
        else
        {
          *(unsigned char *)(a4 + 23) = 1;
        }
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 1) = 0;
        uint64_t result = a2 + 1;
      }
      break;
  }
  return result;
}

char *sub_215E1865C(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  if (a2 == a3) {
LABEL_70:
  }
    sub_2159762F4();
  char v4 = *a2;
  switch(*a2)
  {
    case '""':
    case '/':
    case '\\':
      if (!a4) {
        sub_21597634C(a1);
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v4;
      *((unsigned char *)a4 + 1) = 0;
      return a2 + 1;
    case 'a':
      if (!a4) {
        sub_21597634C(a1);
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(_WORD *)a4 = 7;
      return a2 + 1;
    case 'b':
      if (!a4) {
        sub_21597634C(a1);
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      return a2 + 1;
    case 'f':
      if (!a4) {
        sub_21597634C(a1);
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(_WORD *)a4 = 12;
      return a2 + 1;
    case 'n':
      if (!a4) {
        sub_21597634C(a1);
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(_WORD *)a4 = 10;
      return a2 + 1;
    case 'r':
      if (!a4) {
        sub_21597634C(a1);
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(_WORD *)a4 = 13;
      return a2 + 1;
    case 't':
      if (!a4) {
        sub_21597634C(a1);
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(_WORD *)a4 = 9;
      return a2 + 1;
    case 'v':
      if (!a4) {
        sub_21597634C(a1);
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(_WORD *)a4 = 11;
      return a2 + 1;
    default:
      if ((v4 & 0xF8) != 0x30) {
        goto LABEL_70;
      }
      char v5 = *a2 - 48;
      int v6 = a2 + 1;
      if (a2 + 1 == a3)
      {
        int v6 = a3;
LABEL_42:
        if (!a4) {
          goto LABEL_69;
        }
        goto LABEL_43;
      }
      if ((*v6 & 0xF8) != 0x30) {
        goto LABEL_42;
      }
      char v5 = *v6 + 8 * v5 - 48;
      if (a2 + 2 == a3)
      {
        int v6 = a3;
        if (!a4) {
          goto LABEL_69;
        }
      }
      else
      {
        char v7 = a2[2];
        int v8 = v7 & 0xF8;
        char v9 = v7 + 8 * v5 - 48;
        if (v8 == 48) {
          int v6 = a2 + 3;
        }
        else {
          int v6 = a2 + 2;
        }
        if (v8 == 48) {
          char v5 = v9;
        }
        if (!a4) {
LABEL_69:
        }
          sub_21597634C(a1);
      }
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v5;
      *((unsigned char *)a4 + 1) = 0;
      return v6;
  }
}

void sub_215E18BC0(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v4 = (unint64_t)&a4[-a3];
  if ((unint64_t)&a4[-a3] >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  if (v4 <= 0x16)
  {
    HIBYTE(v28) = (_BYTE)a4 - a3;
    char v9 = (char *)__s;
    if ((char *)a3 != a4) {
      goto LABEL_4;
    }
LABEL_13:
    int v10 = v9;
    goto LABEL_16;
  }
  uint64_t v16 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17) {
    uint64_t v16 = v4 | 7;
  }
  uint64_t v17 = v16 + 1;
  char v9 = (char *)operator new(v16 + 1);
  __s[1] = (char *)v4;
  int64_t v28 = v17 | 0x8000000000000000;
  __s[0] = v9;
  if ((char *)a3 == a4) {
    goto LABEL_13;
  }
LABEL_4:
  if (v4 < 0x20 || (unint64_t)&v9[-a3] < 0x20)
  {
    int v10 = v9;
    unsigned __int8 v11 = (char *)a3;
    do
    {
LABEL_15:
      char v18 = *v11++;
      *v10++ = v18;
    }
    while (v11 != a4);
    goto LABEL_16;
  }
  int v10 = &v9[v4 & 0xFFFFFFFFFFFFFFE0];
  unsigned __int8 v11 = (char *)(a3 + (v4 & 0xFFFFFFFFFFFFFFE0));
  char v12 = (long long *)(a3 + 16);
  unsigned __int8 v13 = v9 + 16;
  unint64_t v14 = v4 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v15 = *v12;
    *(v13 - 1) = *(v12 - 1);
    *unsigned __int8 v13 = v15;
    v12 += 2;
    v13 += 2;
    v14 -= 32;
  }
  while (v14);
  if (v4 != (v4 & 0xFFFFFFFFFFFFFFE0)) {
    goto LABEL_15;
  }
LABEL_16:
  *int v10 = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (SHIBYTE(v28) < 0)
  {
    if (!__s[1]) {
      goto LABEL_24;
    }
    uint64_t v19 = __s[0];
  }
  else
  {
    if (!HIBYTE(v28)) {
      return;
    }
    uint64_t v19 = (const char *)__s;
  }
  std::__get_collation_name(&v26, v19);
  *(_OWORD *)a1 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  unint64_t v20 = v26.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 16) = *((void *)&v26.__r_.__value_.__l + 2);
  unint64_t v21 = HIBYTE(v20);
  if ((v21 & 0x80u) != 0) {
    unint64_t v21 = *(void *)(a1 + 8);
  }
  if (v21) {
    goto LABEL_24;
  }
  if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
    if (HIBYTE(v28) >= 3u) {
      return;
    }
    goto LABEL_31;
  }
  if (__s[1] < (char *)3)
  {
LABEL_31:
    (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v26);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(std::string *)a1 = v26;
    if (*(char *)(a1 + 23) < 0)
    {
      uint64_t v23 = *(void *)(a1 + 8);
      if (v23 == 1 || v23 == 12)
      {
        if (__s != (char **)a1)
        {
          if (v28 >= 0) {
            int v24 = __s;
          }
          else {
            int v24 = (char **)__s[0];
          }
          if (v28 >= 0) {
            size_t v25 = HIBYTE(v28);
          }
          else {
            size_t v25 = (size_t)__s[1];
          }
          sub_21573ABD0((void **)a1, v24, v25);
        }
      }
      else
      {
        **(unsigned char **)a1 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
    else
    {
      int v22 = *(unsigned __int8 *)(a1 + 23);
      if (v22 == 1 || v22 == 12)
      {
        if (__s != (char **)a1)
        {
          if (SHIBYTE(v28) < 0)
          {
            sub_21573AB08((void *)a1, __s[0], (size_t)__s[1]);
          }
          else
          {
            *(_OWORD *)a1 = *(_OWORD *)__s;
            *(void *)(a1 + 16) = v28;
          }
        }
      }
      else
      {
        *(unsigned char *)a1 = 0;
        *(unsigned char *)(a1 + 23) = 0;
      }
    }
  }
LABEL_24:
  if (SHIBYTE(v28) < 0) {
    operator delete(__s[0]);
  }
}

void sub_215E18E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_215E18ED0(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    char v7 = a2 + 1;
    int v6 = *a2;
    if (a2 + 1 != a3 || v6 != 36)
    {
      if ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0) {
        sub_21597634C(a1);
      }
      if (v7 == a3 || v6 != 92)
      {
        if (v6 == 46) {
          operator new();
        }
      }
      else
      {
        unsigned int v12 = (char)*v7 - 36;
        if (v12 <= 0x3A && ((1 << v12) & 0x580000000000441) != 0) {
          sub_21597634C(a1);
        }
      }
    }
  }
  int v8 = sub_215E17280(a1, a2, a3);
  if (a2 != a3 && a2 == v8 && a2 + 1 != a3 && *a2 == 92)
  {
    int v9 = a2[1];
    if (v9 == 40)
    {
      int v10 = a2 + 2;
      if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
        operator new();
      }
      do
      {
        if (v10 == a3) {
          goto LABEL_37;
        }
        unsigned __int8 v13 = v10;
        unint64_t v14 = (unsigned __int8 *)sub_215E18ED0(a1, v10, a3);
        if (v10 == v14) {
          break;
        }
        int v10 = sub_215E191FC(a1, v14, a3);
      }
      while (v13 != v10);
      if (v13 + 1 == a3 || *v13 != 92 || v13[1] != 41) {
LABEL_37:
      }
        sub_215974948();
      int v8 = &v13[2 * (v13[1] == 41)];
      if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
        operator new();
      }
    }
    else if (((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38) && (v9 - 49) <= 8)
    {
      if ((v9 - 48) <= *(_DWORD *)(a1 + 28)) {
        sub_215976590(a1);
      }
      sub_215976538();
    }
  }
  return v8;
}

unsigned __int8 *sub_215E191FC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    int v3 = *a2;
    if (v3 == 42) {
      sub_21597A140();
    }
    unint64_t v4 = a3;
    if (a2 + 1 != a3 && v3 == 92 && a2[1] == 123)
    {
      char v5 = &a2[2 * (a2[1] == 123)];
      if (v5 == a3) {
        goto LABEL_45;
      }
      int v6 = *v5;
      if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38) {
        goto LABEL_45;
      }
      int v7 = v6 - 48;
      int v8 = v5 + 1;
      if (v5 + 1 == a3)
      {
LABEL_15:
        int v8 = a3;
      }
      else
      {
        while (1)
        {
          int v9 = *v8;
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38) {
            break;
          }
          if (v7 >= 214748364) {
            goto LABEL_45;
          }
          int v7 = v9 + 10 * v7 - 48;
          if (++v8 == a3) {
            goto LABEL_15;
          }
        }
      }
      if (v8 == v5) {
LABEL_45:
      }
        sub_21597A2D0();
      if (v8 == a3) {
LABEL_46:
      }
        sub_21597A328();
      int v10 = v8 + 1;
      int v11 = *v8;
      if (v11 != 44)
      {
        if (v10 != a3 && v11 == 92 && *v10 == 125) {
          sub_21597A140();
        }
        goto LABEL_46;
      }
      if (v10 == a3) {
        goto LABEL_46;
      }
      int v12 = *v10;
      if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
      {
        int v13 = v12 - 48;
        int v10 = v8 + 2;
        if (v8 + 2 == a3)
        {
LABEL_37:
          int v10 = a3;
          goto LABEL_40;
        }
        while (1)
        {
          int v12 = *v10;
          if ((v12 & 0xF8) != 0x30 && (v12 & 0xFE) != 0x38) {
            break;
          }
          if (v13 >= 214748364) {
            goto LABEL_45;
          }
          int v13 = v12 + 10 * v13 - 48;
          if (++v10 == a3) {
            goto LABEL_37;
          }
        }
      }
      else
      {
        int v13 = -1;
      }
      if (v10 == a3)
      {
        long long v15 = v10;
        int v10 = a3;
        unint64_t v4 = v15;
      }
      else if (v10 + 1 == a3 || v12 != 92)
      {
        unint64_t v4 = v10;
      }
      else
      {
        unint64_t v4 = &v10[2 * (v10[1] == 125)];
      }
LABEL_40:
      if (v10 != v4)
      {
        if (v13 == -1) {
          sub_21597A140();
        }
        if (v13 >= v7) {
          sub_21597A140();
        }
        goto LABEL_45;
      }
      goto LABEL_46;
    }
  }
  return a2;
}

char *sub_215E194AC(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3)
  {
    int v6 = *a2;
    switch(*a2)
    {
      case '$':
      case '(':
      case '*':
      case '+':
      case '.':
      case '?':
      case '[':
      case '\\':
      case '^':
      case '{':
      case '|':
        goto LABEL_3;
      case ')':
        if (!*(_DWORD *)(a1 + 36)) {
          goto LABEL_8;
        }
LABEL_3:
        int v7 = (unsigned __int8 *)(a2 + 1);
        if (a2 + 1 != a3 && v6 == 92)
        {
          switch(*v7)
          {
            case '$':
            case '(':
            case ')':
            case '*':
            case '+':
            case '.':
            case '?':
            case '[':
            case '\\':
            case '^':
            case '{':
            case '|':
            case '}':
              sub_21597634C(a1);
            default:
              if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
              {
                int v8 = sub_215E1865C(a1, a2 + 1, a3, 0);
              }
              else
              {
                int v9 = sub_21597ACDC(a1, *v7);
                uint64_t v10 = 2;
                if (!v9) {
                  uint64_t v10 = 0;
                }
                int v8 = &a2[v10];
              }
              if (v8 != a2) {
                goto LABEL_19;
              }
              int v6 = *a2;
              break;
          }
        }
        if (v6 == 46) {
          operator new();
        }
        return result;
      default:
LABEL_8:
        sub_21597634C(a1);
    }
  }
  int v8 = sub_215E17280(a1, a2, a3);
LABEL_19:
  if (v8 == a2 && v8 != a3)
  {
    int v11 = *a2;
    if (v11 == 36) {
      operator new();
    }
    if (v11 != 40)
    {
      if (v11 == 94) {
        operator new();
      }
      return a2;
    }
    if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
      operator new();
    }
    ++*(_DWORD *)(a1 + 36);
    int v12 = (char *)sub_215E160E8(a1, a2 + 1, a3);
    if (v12 == a3 || *v12 != 41) {
      sub_215974948();
    }
    if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
      operator new();
    }
    --*(_DWORD *)(a1 + 36);
    int v8 = v12 + 1;
  }
  if (v8 == a2) {
    return a2;
  }

  return sub_215E16E80(a1, v8, a3);
}

size_t sub_215E19B7C@<X0>(char *a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = strstr(a1, "T = ");
  if (v4)
  {
    char v5 = v4;
    size_t result = strlen(v4);
    size_t v7 = result - 5;
    if (result - 5 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v7 >= 0x17)
      {
        uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v7 | 7) != 0x17) {
          uint64_t v11 = v7 | 7;
        }
        uint64_t v12 = v11 + 1;
        int v13 = operator new(v11 + 1);
        a2[1] = v7;
        a2[2] = v12 | 0x8000000000000000;
        *a2 = v13;
        a2 = v13;
      }
      else
      {
        *((unsigned char *)a2 + 23) = v7;
        if (result == 5) {
          goto LABEL_15;
        }
      }
      size_t result = (size_t)memmove(a2, v5 + 4, v7);
LABEL_15:
      *((unsigned char *)a2 + v7) = 0;
      return result;
    }
LABEL_40:
    sub_215731CD8();
  }
  int v8 = strstr(a1, "= ");
  if (v8)
  {
    int v9 = v8;
    size_t result = strlen(v8);
    size_t v10 = result - 3;
    if (result - 3 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_40;
    }
    if (v10 >= 0x17)
    {
      uint64_t v17 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v17 = v10 | 7;
      }
      uint64_t v18 = v17 + 1;
      uint64_t v19 = operator new(v17 + 1);
      a2[1] = v10;
      a2[2] = v18 | 0x8000000000000000;
      *a2 = v19;
      a2 = v19;
    }
    else
    {
      *((unsigned char *)a2 + 23) = v10;
      if (result == 3) {
        goto LABEL_25;
      }
    }
    size_t result = (size_t)memmove(a2, v9 + 2, v10);
LABEL_25:
    *((unsigned char *)a2 + v1std::__fs::filesystem::__rename(__from, __to, 0) = 0;
    return result;
  }
  unint64_t v14 = strchr(a1, 61);
  if (v14)
  {
    long long v15 = v14;
    size_t result = strlen(v14);
    size_t v16 = result - 2;
    if (result - 2 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_40;
    }
    if (v16 >= 0x17)
    {
      uint64_t v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17) {
        uint64_t v21 = v16 | 7;
      }
      uint64_t v22 = v21 + 1;
      uint64_t v23 = operator new(v21 + 1);
      a2[1] = v16;
      a2[2] = v22 | 0x8000000000000000;
      *a2 = v23;
      a2 = v23;
    }
    else
    {
      *((unsigned char *)a2 + 23) = v16;
      if (result == 2) {
        goto LABEL_34;
      }
    }
    size_t result = (size_t)memmove(a2, v15 + 1, v16);
LABEL_34:
    *((unsigned char *)a2 + v16) = 0;
    return result;
  }
  size_t result = strlen(a1);
  if (result > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_40;
  }
  size_t v20 = result;
  if (result >= 0x17)
  {
    uint64_t v24 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v24 = result | 7;
    }
    uint64_t v25 = v24 + 1;
    std::string v26 = operator new(v24 + 1);
    a2[1] = v20;
    a2[2] = v25 | 0x8000000000000000;
    *a2 = v26;
    a2 = v26;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result) {
      goto LABEL_39;
    }
  }
  size_t result = (size_t)memcpy(a2, a1, v20);
LABEL_39:
  *((unsigned char *)a2 + v2std::__fs::filesystem::__rename(__from, __to, 0) = 0;
  return result;
}

void sub_215E19DF4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_215738B0C(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_215E19E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215E19EAC(void *a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>, int64x2_t a4@<Q3>, int8x16_t a5@<Q5>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  if (v7 == v8)
  {
    if (*((char *)a1 + 23) < 0)
    {
      int v13 = (void *)*a1;
      unint64_t v14 = a1[1];
      sub_215738B0C(a3, v13, v14);
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__r.__words[2] = a1[2];
    }
  }
  else
  {
    uint64_t v9 = *((unsigned __int8 *)a1 + 23);
    uint64_t v10 = a1[1];
    if ((v9 & 0x80u) != 0)
    {
      a1 = (void *)*a1;
      uint64_t v9 = v10;
    }
    v16[0] = a1;
    v16[1] = v9;
    uint64_t v16[2] = "<";
    void v16[3] = 1;
    sub_215742E98(v7, v8, ",", 1uLL, &__p, a4, a5);
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    v16[4] = p_p;
    std::exception_ptr v16[5] = size;
    _DWORD v16[6] = ">";
    v16[7] = 1;
    sub_2157430CC((uint64_t)v16, (uint64_t)&v17, 0, 0, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_215E1A010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215E1A038(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  memset(&v22, 0, sizeof(v22));
  int v3 = *(char *)(a1 + 23);
  if (v3 >= 0) {
    unint64_t v4 = (unsigned char *)a1;
  }
  else {
    unint64_t v4 = *(unsigned char **)a1;
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  if (v5)
  {
    char v6 = 0;
    int v7 = 0;
    int v8 = 0;
    int v9 = 0;
    char v10 = 1;
    uint64_t v11 = MEMORY[0x263EF8318];
    while (1)
    {
      unsigned int v13 = (char)*v4;
      if ((v13 & 0x80000000) == 0 && (*(_DWORD *)(v11 + 4 * v13 + 60) & 0x400) != 0) {
        break;
      }
      if (v13 == 76)
      {
        if (!v6) {
          goto LABEL_49;
        }
        std::string::push_back(&v22, 76);
        if (v8)
        {
          if (v7)
          {
            if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v14 = &v22;
            }
            else {
              unint64_t v14 = (std::string *)v22.__r_.__value_.__r.__words[0];
            }
            if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v22.__r_.__value_.__l.__size_;
            }
            goto LABEL_34;
          }
          int v8 = 1;
          int v7 = 1;
          char v6 = 1;
        }
        else
        {
          int v8 = 1;
          char v6 = 1;
        }
      }
      else
      {
        if (*v4 != 85)
        {
          if ((v13 & 0x80000000) != 0) {
            int v17 = __maskrune((char)*v4, 0x500uLL);
          }
          else {
            int v17 = *(_DWORD *)(v11 + 4 * v13 + 60) & 0x500;
          }
          if (v17)
          {
            if (v6)
            {
              if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v18 = &v22;
              }
              else {
                uint64_t v18 = (std::string *)v22.__r_.__value_.__r.__words[0];
              }
              if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v19 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v19 = v22.__r_.__value_.__l.__size_;
              }
              std::string::append(a2, (const std::string::value_type *)v18, v19);
              if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
              {
                v22.__r_.__value_.__l.__size_ = 0;
                size_t v20 = (std::string *)v22.__r_.__value_.__r.__words[0];
              }
              else
              {
                *((unsigned char *)&v22.__r_.__value_.__s + 23) = 0;
                size_t v20 = &v22;
              }
              int v9 = 0;
              int v8 = 0;
              int v7 = 0;
              char v6 = 0;
              char v10 = 0;
              v20->__r_.__value_.__s.__data_[0] = 0;
            }
            else
            {
LABEL_49:
              char v6 = 0;
              char v10 = 0;
            }
          }
          else
          {
            if (v6)
            {
              if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
              {
                v22.__r_.__value_.__l.__size_ = 0;
                uint64_t v21 = (std::string *)v22.__r_.__value_.__r.__words[0];
              }
              else
              {
                *((unsigned char *)&v22.__r_.__value_.__s + 23) = 0;
                uint64_t v21 = &v22;
              }
              int v9 = 0;
              int v8 = 0;
              int v7 = 0;
              char v6 = 0;
              v21->__r_.__value_.__s.__data_[0] = 0;
            }
            else
            {
              char v6 = 0;
            }
            char v10 = 1;
          }
LABEL_11:
          std::string::push_back(a2, v13);
          goto LABEL_12;
        }
        if (!v6) {
          goto LABEL_49;
        }
        std::string::push_back(&v22, 85);
        if (v9)
        {
          if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v14 = &v22;
          }
          else {
            unint64_t v14 = (std::string *)v22.__r_.__value_.__r.__words[0];
          }
          if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v22.__r_.__value_.__l.__size_;
          }
LABEL_34:
          std::string::append(a2, (const std::string::value_type *)v14, size);
          if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          {
            v22.__r_.__value_.__l.__size_ = 0;
            size_t v16 = (std::string *)v22.__r_.__value_.__r.__words[0];
          }
          else
          {
            *((unsigned char *)&v22.__r_.__value_.__s + 23) = 0;
            size_t v16 = &v22;
          }
          int v9 = 0;
          int v8 = 0;
          int v7 = 0;
          char v6 = 0;
          v16->__r_.__value_.__s.__data_[0] = 0;
          goto LABEL_12;
        }
        int v9 = 1;
        char v6 = 1;
      }
LABEL_12:
      ++v4;
      if (!--v5)
      {
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v22.__r_.__value_.__l.__data_);
        }
        return;
      }
    }
    BOOL v12 = (v10 & 1) == 0;
    char v10 = 0;
    if (!v12) {
      char v6 = 1;
    }
    goto LABEL_11;
  }
}

void sub_215E1A2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v15 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v15 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

BOOL sub_215E1A31C(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void **))
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678907D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678907D8))
  {
    __cxa_atexit((void (*)(void *))sub_215E1AD1C, &qword_2678907F8, &dword_21572C000);
    __cxa_guard_release(&qword_2678907D8);
  }
  if (!byte_267890820)
  {
    uint64_t v34 = a7;
    sub_2157328B8((uint64_t)v37);
    if (a4) {
      unsigned int v13 = "Assert: ";
    }
    else {
      unsigned int v13 = "Abort: ";
    }
    if (a4) {
      uint64_t v14 = 8;
    }
    else {
      uint64_t v14 = 7;
    }
    sub_215731D94(v38, (uint64_t)v13, v14);
    size_t v15 = strlen(a1);
    size_t v16 = sub_215731D94(v38, (uint64_t)a1, v15);
    sub_215731D94(v16, (uint64_t)":", 1);
    std::ostream::operator<<();
    if (a4)
    {
      int v17 = sub_215731D94(v38, (uint64_t)" : ", 3);
      sub_215731D94(v17, a3, a4);
    }
    if (a6)
    {
      uint64_t v18 = sub_215731D94(v38, (uint64_t)" : ", 3);
      sub_215731D94(v18, a5, a6);
    }
    sub_215731D94(v38, (uint64_t)"\n", 1);
    if ((v46 & 0x10) != 0)
    {
      unint64_t v21 = v45;
      if (v45 < v42)
      {
        unint64_t v45 = v42;
        unint64_t v21 = v42;
      }
      std::string v22 = v41;
      size_t v19 = v21 - (void)v41;
      if (v21 - (unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_45;
      }
    }
    else
    {
      if ((v46 & 8) == 0)
      {
        size_t v19 = 0;
        HIBYTE(v36) = 0;
        size_t v20 = __dst;
        goto LABEL_26;
      }
      std::string v22 = v39;
      size_t v19 = v40 - (void)v39;
      if ((unint64_t)(v40 - (void)v39) >= 0x7FFFFFFFFFFFFFF8) {
LABEL_45:
      }
        sub_215731CD8();
    }
    if (v19 >= 0x17)
    {
      uint64_t v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17) {
        uint64_t v23 = v19 | 7;
      }
      uint64_t v24 = v23 + 1;
      size_t v20 = (void **)operator new(v23 + 1);
      __dst[1] = (void *)v19;
      int64_t v36 = v24 | 0x8000000000000000;
      __dst[0] = v20;
    }
    else
    {
      HIBYTE(v36) = v19;
      size_t v20 = __dst;
      if (!v19) {
        goto LABEL_26;
      }
    }
    memmove(v20, v22, v19);
LABEL_26:
    *((unsigned char *)v20 + v19) = 0;
    v37[0] = *MEMORY[0x263F8C2B8];
    uint64_t v25 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void *)((char *)v37 + *(void *)(v37[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
    v38[0] = v25;
    v38[1] = MEMORY[0x263F8C318] + 16;
    if (v44 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2166C4BF0](&v47);
    if (v36 >= 0) {
      std::string v26 = __dst;
    }
    else {
      std::string v26 = (void **)__dst[0];
    }
    v34(v26);
    if (SHIBYTE(v36) < 0) {
      operator delete(__dst[0]);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678907D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678907D8))
  {
    __cxa_atexit((void (*)(void *))sub_215E1AD1C, &qword_2678907F8, &dword_21572C000);
    __cxa_guard_release(&qword_2678907D8);
  }
  if (byte_267890820) {
    BOOL v27 = byte_267890828 == 0;
  }
  else {
    BOOL v27 = 0;
  }
  if (!v27)
  {
    uint64_t v28 = qword_2678907F8;
    uint64_t v29 = qword_267890800;
    while (v28 != v29)
    {
      std::string::size_type v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v28;
      uint64_t v30 = *(void *)(v28 + 8);
      v28 += 16;
      v31(v30, a3, a4, a5, a6);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678907D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678907D8))
  {
    __cxa_atexit((void (*)(void *))sub_215E1AD1C, &qword_2678907F8, &dword_21572C000);
    __cxa_guard_release(&qword_2678907D8);
  }
  int v32 = byte_267890820;
  if (byte_267890820) {
    qword_267890810(*(void *)algn_267890818, a3, a4, a5, a6);
  }
  return v32 == 0;
}

void sub_215E1A7C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215E1A7F0(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678907F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678907F0))
  {
    __cxa_atexit(MEMORY[0x263F8C118], &stru_26788A5E8, &dword_21572C000);
    __cxa_guard_release(&qword_2678907F0);
  }
  std::mutex::lock(&stru_26788A5E8);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678907D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678907D8))
  {
    __cxa_atexit((void (*)(void *))sub_215E1AD1C, &qword_2678907F8, &dword_21572C000);
    __cxa_guard_release(&qword_2678907D8);
  }
  unint64_t v4 = (void *)qword_267890800;
  if (qword_267890800 < (unint64_t)qword_267890808)
  {
    *(void *)qword_267890800 = a1;
    v4[1] = a2;
    uint64_t v5 = (uint64_t)(v4 + 2);
    goto LABEL_16;
  }
  uint64_t v6 = qword_2678907F8;
  uint64_t v7 = (qword_267890800 - qword_2678907F8) >> 4;
  unint64_t v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) >> 60) {
    sub_215738AC0();
  }
  uint64_t v9 = qword_267890808 - qword_2678907F8;
  if ((qword_267890808 - qword_2678907F8) >> 3 > v8) {
    unint64_t v8 = v9 >> 3;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v8;
  }
  if (v10)
  {
    if (v10 >> 60) {
      sub_215738AD8();
    }
    uint64_t v11 = (char *)operator new(16 * v10);
    BOOL v12 = &v11[16 * v7];
    uint64_t v13 = (uint64_t)&v11[16 * v10];
    *(void *)BOOL v12 = a1;
    *((void *)v12 + 1) = a2;
    uint64_t v5 = (uint64_t)(v12 + 16);
    if (v4 == (void *)v6)
    {
LABEL_14:
      qword_2678907F8 = (uint64_t)v12;
      qword_267890800 = v5;
      qword_267890808 = v13;
      if (!v4) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
  }
  else
  {
    BOOL v12 = (char *)(16 * v7);
    uint64_t v13 = 0;
    *(void *)BOOL v12 = a1;
    *((void *)v12 + 1) = a2;
    uint64_t v5 = 16 * v7 + 16;
    if (v4 == (void *)v6) {
      goto LABEL_14;
    }
  }
  do
  {
    *((_OWORD *)v12 - 1) = *((_OWORD *)v4 - 1);
    v12 -= 16;
    v4 -= 2;
  }
  while (v4 != (void *)v6);
  unint64_t v4 = (void *)qword_2678907F8;
  qword_2678907F8 = (uint64_t)v12;
  qword_267890800 = v5;
  qword_267890808 = v13;
  if (!v4) {
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v4);
LABEL_16:
  qword_267890800 = v5;

  std::mutex::unlock(&stru_26788A5E8);
}

void sub_215E1AA04(_Unwind_Exception *a1)
{
}

void sub_215E1AA1C(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678907F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678907F0))
  {
    __cxa_atexit(MEMORY[0x263F8C118], &stru_26788A5E8, &dword_21572C000);
    __cxa_guard_release(&qword_2678907F0);
  }
  std::mutex::lock(&stru_26788A5E8);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678907D8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2678907D8))
  {
    int v3 = (void *)qword_2678907F8;
    uint64_t v2 = qword_267890800;
    if (qword_2678907F8 != qword_267890800) {
      goto LABEL_4;
    }
    goto LABEL_6;
  }
  __cxa_atexit((void (*)(void *))sub_215E1AD1C, &qword_2678907F8, &dword_21572C000);
  __cxa_guard_release(&qword_2678907D8);
  int v3 = (void *)qword_2678907F8;
  uint64_t v2 = qword_267890800;
  if (qword_2678907F8 == qword_267890800)
  {
LABEL_6:
    goto LABEL_8;
  }
LABEL_4:
  while (*v3 != a1)
  {
    v3 += 2;
    if (v3 == (void *)v2) {
      goto LABEL_6;
    }
  }
  if (v3 != (void *)v2)
  {
    unint64_t v4 = v3 + 2;
    if (v3 + 2 != (void *)v2)
    {
      do
      {
        if (*(void *)v4 != a1)
        {
          *(_OWORD *)int v3 = *v4;
          v3 += 2;
        }
        ++v4;
      }
      while (v4 != (_OWORD *)v2);
      uint64_t v2 = qword_267890800;
    }
  }
  if (v3 == (void *)v2) {
    goto LABEL_6;
  }
  qword_267890800 = (uint64_t)v3;

LABEL_8:
  std::mutex::unlock(&stru_26788A5E8);
}

uint64_t sub_215E1ABD8(char *a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_215E1AE30();
  size_t v3 = strlen(a1);
  sub_215CF5764((void **)v2 + 1, a1, v3);
  if (*((char *)v2 + 31) >= 0) {
    uint64_t v4 = (uint64_t)(v2 + 1);
  }
  else {
    uint64_t v4 = (uint64_t)v2[1];
  }
  qword_26788A630 = v4;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678907E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678907E8))
  {
    qword_2678907E0 = (uint64_t)os_log_create("cv3d", "");
    __cxa_guard_release(&qword_2678907E8);
  }
  uint64_t v5 = qword_2678907E0;
  if (os_log_type_enabled((os_log_t)qword_2678907E0, OS_LOG_TYPE_FAULT))
  {
    int v7 = 136315138;
    unint64_t v8 = a1;
    _os_log_impl(&dword_21572C000, v5, OS_LOG_TYPE_FAULT, "%s", (uint8_t *)&v7, 0xCu);
  }
  return fputs(a1, (FILE *)*MEMORY[0x263EF8348]);
}

uint64_t sub_215E1AD1C(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_215E1AD50(uint64_t result)
{
  uint64_t v1 = result;
  *(void *)size_t result = off_26C686738;
  qword_26788A630 = 0;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_215E1ADB8(uint64_t a1)
{
  *(void *)a1 = off_26C686738;
  qword_26788A630 = 0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t (***sub_215E1AE30())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890830, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267890830))
  {
    return &off_26ACF2460;
  }
  __cxa_atexit((void (*)(void *))sub_215E1AD50, &off_26ACF2460, &dword_21572C000);
  __cxa_guard_release(&qword_267890830);
  return &off_26ACF2460;
}

void sub_215E1AEAC(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void sub_215E1AF08(void **a1, char *a2, void **a3)
{
  uint64_t v5 = (char *)*a1;
  uint64_t v6 = a2;
  if (v5 != a2)
  {
    do
    {
      unint64_t v8 = (std::__shared_weak_count *)*((void *)v5 - 1);
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      v5 -= 16;
    }
    while (v5 != a2);
    uint64_t v6 = *a3;
  }
  *a1 = a2;

  operator delete(v6);
}

CFAllocatorRef CFAllocatorGetDefault(void)
{
  return (CFAllocatorRef)MEMORY[0x270EE42A8]();
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x270EE4300](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x270EE4320](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x270EE4348]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x270EE4360](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x270EE4528]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x270EE4530](BOOLean);
}

CFURLRef CFBundleCopyExecutableURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x270EE4550](bundle);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x270EE45B8](allocator, bundleURL);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x270EE4600]();
}

CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x270EE4610](bundle, key);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x270EE4788](cf);
}

CFStringRef CFCopyTypeIDDescription(CFTypeID type_id)
{
  return (CFStringRef)MEMORY[0x270EE47B0](type_id);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x270EE47F0](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x270EE4808](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x270EE4820](theData);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x270EE48F0](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x270EE4908](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4920](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x270EE4930](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x270EE4948]();
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x270EE4968](theDict, key, value);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x270EE4998](cf1, cf2);
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x270EE49C0](allocator, domain, code, userInfo);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x270EE4BE8](allocator, theType, valuePtr);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x270EE4C50](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x270EE4C58]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x270EE4C70](number, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x270EE50D0](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x270EE5170](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x270EE51D8](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x270EE5218]();
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x270EE5328](anURL, pathStyle);
}

CFStringRef CFURLCopyScheme(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x270EE5368](anURL);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x270EE53F0](allocator, filePath, pathStyle, isDirectory);
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x270EE5480](alloc, *(void *)&bytes.byte0, *(void *)&bytes.byte8);
}

CFTypeID CFUUIDGetTypeID(void)
{
  return MEMORY[0x270EE54A0]();
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1 = MEMORY[0x270EE54A8](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

CGColorSpaceRef CGColorSpaceCreateDeviceCMYK(void)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5C50]();
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5C60]();
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5C68]();
}

CGColorSpaceModel CGColorSpaceGetModel(CGColorSpaceRef space)
{
  return MEMORY[0x270EE5D08](space);
}

size_t CGColorSpaceGetNumberOfComponents(CGColorSpaceRef space)
{
  return MEMORY[0x270EE5D18](space);
}

CGDataConsumerRef CGDataConsumerCreate(void *info, const CGDataConsumerCallbacks *cbks)
{
  return (CGDataConsumerRef)MEMORY[0x270EE6290](info, cbks);
}

CFDataRef CGDataProviderCopyData(CGDataProviderRef provider)
{
  return (CFDataRef)MEMORY[0x270EE62B8](provider);
}

CGDataProviderRef CGDataProviderCreateSequential(void *info, const CGDataProviderSequentialCallbacks *callbacks)
{
  return (CGDataProviderRef)MEMORY[0x270EE62C8](info, callbacks);
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x270EE62D0](data);
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x270EE6738](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, *(void *)&bitmapInfo, provider);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

CGImageDestinationRef CGImageDestinationCreateWithDataConsumer(CGDataConsumerRef consumer, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x270EF4F30](consumer, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x270EF4F48](idst);
}

CGImageAlphaInfo CGImageGetAlphaInfo(CGImageRef image)
{
  return MEMORY[0x270EE6778](image);
}

CGBitmapInfo CGImageGetBitmapInfo(CGImageRef image)
{
  return MEMORY[0x270EE6780](image);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return MEMORY[0x270EE6790](image);
}

size_t CGImageGetBitsPerPixel(CGImageRef image)
{
  return MEMORY[0x270EE67A0](image);
}

CGImageByteOrderInfo CGImageGetByteOrderInfo(CGImageRef image)
{
  return MEMORY[0x270EE67B0](image);
}

size_t CGImageGetBytesPerRow(CGImageRef image)
{
  return MEMORY[0x270EE67C0](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x270EE67D8](image);
}

CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
{
  return (CGDataProviderRef)MEMORY[0x270EE67E8](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x270EE6800](image);
}

CGImagePixelFormatInfo CGImageGetPixelFormatInfo(CGImageRef image)
{
  return MEMORY[0x270EE6830](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x270EE6868](image);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x270EF5018](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithDataProvider(CGDataProviderRef provider, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x270EF5038](provider, options);
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x270EEA150](allocator, width, height, *(void *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *baseAddress, size_t bytesPerRow, CVPixelBufferReleaseBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x270EEA168](allocator, width, height, *(void *)&pixelFormatType, baseAddress, bytesPerRow, releaseCallback, releaseRefCon);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x270EEA1A0](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA1B0](pixelBuffer);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA1E8](pixelBuffer);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x270EEA200](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA218](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA220](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA240](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x270EEA260](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x270EEA330](pixelBuffer, unlockFlags);
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x270EF4C28](properties);
}

void *__cdecl IOSurfaceGetBaseAddressOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return (void *)MEMORY[0x270EF4C80](buffer, planeIndex);
}

size_t IOSurfaceGetBytesPerElement(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4CA0](buffer);
}

size_t IOSurfaceGetBytesPerElementOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x270EF4CA8](buffer, planeIndex);
}

size_t IOSurfaceGetBytesPerRow(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4CB0](buffer);
}

size_t IOSurfaceGetBytesPerRowOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x270EF4CC0](buffer, planeIndex);
}

size_t IOSurfaceGetElementHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4D10](buffer);
}

size_t IOSurfaceGetElementHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x270EF4D18](buffer, planeIndex);
}

size_t IOSurfaceGetElementWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4D20](buffer);
}

size_t IOSurfaceGetElementWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x270EF4D28](buffer, planeIndex);
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4D48](buffer);
}

size_t IOSurfaceGetHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x270EF4D58](buffer, planeIndex);
}

size_t IOSurfaceGetNumberOfComponentsOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x270EF4D70](buffer, planeIndex);
}

OSType IOSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4D80](buffer);
}

size_t IOSurfaceGetPlaneCount(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4D88](buffer);
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4DE0](buffer);
}

size_t IOSurfaceGetWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x270EF4DF0](buffer, planeIndex);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x270EF4E18](buffer, *(void *)&options, seed);
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x270EF4E88](buffer, *(void *)&options, seed);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x270F95F98]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x270F95FE8]();
}

uint64_t MGGetSInt64Answer()
{
  return MEMORY[0x270F95FF0]();
}

uint64_t MGGetStringAnswer()
{
  return MEMORY[0x270F95FF8]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_release(const void *aBlock)
{
}

int _NSGetExecutablePath(char *buf, uint32_t *bufsize)
{
  return MEMORY[0x270ED7D10](buf, bufsize);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

const char *__cdecl std::logic_error::what(const std::logic_error *this)
{
  return (const char *)MEMORY[0x270F981F8](this);
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return (const char *)MEMORY[0x270F98200](this);
}

std::string *__cdecl std::error_condition::message(std::string *__return_ptr retstr, const std::error_condition *this)
{
  return (std::string *)MEMORY[0x270F98270](retstr, this);
}

const std::__fs::filesystem::directory_entry *__cdecl std::__fs::filesystem::directory_iterator::__dereference(const std::__fs::filesystem::directory_iterator *this)
{
  return (const std::__fs::filesystem::directory_entry *)MEMORY[0x270F98278](this);
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__filename(const std::__fs::filesystem::path *this)
{
  uint64_t v1 = (const std::string_view::value_type *)MEMORY[0x270F98288](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__extension(const std::__fs::filesystem::path *this)
{
  uint64_t v1 = (const std::string_view::value_type *)MEMORY[0x270F98290](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__parent_path(const std::__fs::filesystem::path *this)
{
  uint64_t v1 = (const std::string_view::value_type *)MEMORY[0x270F98298](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__root_directory(const std::__fs::filesystem::path *this)
{
  uint64_t v1 = (const std::string_view::value_type *)MEMORY[0x270F982A0](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::path::lexically_relative(std::__fs::filesystem::path *__return_ptr retstr, const std::__fs::filesystem::path *this, const std::__fs::filesystem::path *__base)
{
  return (std::__fs::filesystem::path *)MEMORY[0x270F982B0](retstr, this, __base);
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__stem(const std::__fs::filesystem::path *this)
{
  uint64_t v1 = (const std::string_view::value_type *)MEMORY[0x270F982C8](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

int std::__fs::filesystem::path::__compare(const std::__fs::filesystem::path *this, std::__fs::filesystem::path::__string_view a2)
{
  return MEMORY[0x270F982D0](this, a2.__data_, a2.__size_);
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x270F982D8](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

const char *__cdecl std::exception::what(const std::exception *this)
{
  return (const char *)MEMORY[0x270F98310](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return (std::logic_error *)MEMORY[0x270F98338](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::logic_error *a2)
{
  return (std::logic_error *)MEMORY[0x270F98340](this, a2);
}

std::exception_ptr *__cdecl std::exception_ptr::exception_ptr(std::exception_ptr *this, const std::exception_ptr *a2)
{
  return (std::exception_ptr *)MEMORY[0x270F98398](this, a2);
}

void std::exception_ptr::~exception_ptr(std::exception_ptr *this)
{
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B0](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x270F983C8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B8](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x270F983D0](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983C0](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x270F983D8](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

{
  MEMORY[0x270F983E8](this);
}

void std::invalid_argument::~invalid_argument(std::invalid_argument *this)
{
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x270F98440](this, *(void *)&__ecode);
}

void std::this_thread::sleep_for (const std::chrono::nanoseconds *__ns)
{
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x270F984B0](this, __n, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984E8](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x270F98508](this, __pos, __n1, __s, __n2);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

void std::string::~string(std::string *this)
{
}

std::future_error *__cdecl std::future_error::future_error(std::future_error *this, std::error_code __ec)
{
  return (std::future_error *)MEMORY[0x270F985E0](this, *(void *)&__ec.__val_, __ec.__cat_);
}

void std::future_error::~future_error(std::future_error *this)
{
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x270F98650]();
}

uint64_t std::istream::peek()
{
  return MEMORY[0x270F98670]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x270F98678]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x270F98690]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x270F98698]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x270F986B0]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x270F986C8]();
}

{
  return MEMORY[0x270F986D0]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x270F986E0]();
}

{
  return MEMORY[0x270F986E8]();
}

{
  return MEMORY[0x270F986F0]();
}

{
  return MEMORY[0x270F986F8]();
}

{
  return MEMORY[0x270F98700]();
}

{
  return MEMORY[0x270F98708]();
}

{
  return MEMORY[0x270F98710]();
}

{
  return MEMORY[0x270F98718]();
}

{
  return MEMORY[0x270F98720]();
}

{
  return MEMORY[0x270F98728]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x270F98748]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x270F98750]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98768]();
}

{
  return MEMORY[0x270F98770]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F98778]();
}

{
  return MEMORY[0x270F98788]();
}

{
  return MEMORY[0x270F98790]();
}

{
  return MEMORY[0x270F987A0]();
}

{
  return MEMORY[0x270F987A8]();
}

{
  return MEMORY[0x270F987B0]();
}

{
  return MEMORY[0x270F987B8]();
}

{
  return MEMORY[0x270F987C0]();
}

{
  return MEMORY[0x270F987C8]();
}

{
  return MEMORY[0x270F987D0]();
}

{
  return MEMORY[0x270F987D8]();
}

{
  return MEMORY[0x270F987E0]();
}

std::random_device *__cdecl std::random_device::random_device(std::random_device *this, const std::string *__token)
{
  return (std::random_device *)MEMORY[0x270F98838](this, __token);
}

void std::random_device::~random_device(std::random_device *this)
{
}

std::random_device::result_type std::random_device::operator()(std::random_device *this)
{
  return MEMORY[0x270F98848](this);
}

void std::__shared_count::~__shared_count(std::__shared_count *this)
{
}

uint64_t std::ifstream::open()
{
  return MEMORY[0x270F98860]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x270F98870]();
}

uint64_t std::ofstream::open()
{
  return MEMORY[0x270F98878]();
}

void std::error_category::~error_category(std::error_category *this)
{
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x270F98890](__s, __icase);
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  return (std::__thread_struct *)MEMORY[0x270F98898](this);
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

const std::error_category *std::future_category(void)
{
  return (const std::error_category *)MEMORY[0x270F988E0]();
}

void std::recursive_mutex::lock(std::recursive_mutex *this)
{
}

void std::recursive_mutex::unlock(std::recursive_mutex *this)
{
}

std::recursive_mutex *__cdecl std::recursive_mutex::recursive_mutex(std::recursive_mutex *this)
{
  return (std::recursive_mutex *)MEMORY[0x270F98900](this);
}

void std::recursive_mutex::~recursive_mutex(std::recursive_mutex *this)
{
}

const std::error_category *std::generic_category(void)
{
  return (const std::error_category *)MEMORY[0x270F98918]();
}

void std::__assoc_sub_state::__sub_wait(std::__assoc_sub_state *this, std::unique_lock<std::mutex> *__lk)
{
}

void std::__assoc_sub_state::set_exception(std::__assoc_sub_state *this, std::exception_ptr __p)
{
}

void std::__assoc_sub_state::wait(std::__assoc_sub_state *this)
{
}

const std::error_category *std::iostream_category(void)
{
  return (const std::error_category *)MEMORY[0x270F98948]();
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
}

void std::condition_variable::notify_one(std::condition_variable *this)
{
}

void std::condition_variable::__do_timed_wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk, std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> a3)
{
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
}

void std::__shared_mutex_base::lock_shared(std::__shared_mutex_base *this)
{
}

void std::__shared_mutex_base::unlock_shared(std::__shared_mutex_base *this)
{
}

void std::__shared_mutex_base::lock(std::__shared_mutex_base *this)
{
}

void std::__shared_mutex_base::unlock(std::__shared_mutex_base *this)
{
}

std::__shared_mutex_base *__cdecl std::__shared_mutex_base::__shared_mutex_base(std::__shared_mutex_base *this)
{
  return (std::__shared_mutex_base *)MEMORY[0x270F989D8](this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x270F989E8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  return (std::__thread_specific_ptr<std::__thread_struct> *)MEMORY[0x270F989F8]();
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x270F98A00](retstr, __s);
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__absolute(std::__fs::filesystem::path *__return_ptr retstr, const std::__fs::filesystem::path *a2, std::error_code *__ec)
{
  return (std::__fs::filesystem::path *)MEMORY[0x270F98A38](retstr, a2, __ec);
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__canonical(std::__fs::filesystem::path *__return_ptr retstr, const std::__fs::filesystem::path *a2, std::error_code *__ec)
{
  return (std::__fs::filesystem::path *)MEMORY[0x270F98A40](retstr, a2, __ec);
}

BOOL std::__fs::filesystem::__copy_file(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::__fs::filesystem::copy_options __opt, std::error_code *__ec)
{
  return MEMORY[0x270F98A48](__from, __to, __opt, __ec);
}

uintmax_t std::__fs::filesystem::__file_size(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return MEMORY[0x270F98A50](a1, __ec);
}

BOOL std::__fs::filesystem::__equivalent(const std::__fs::filesystem::path *a1, const std::__fs::filesystem::path *a2, std::error_code *__ec)
{
  return MEMORY[0x270F98A58](a1, a2, __ec);
}

uintmax_t std::__fs::filesystem::__remove_all(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return MEMORY[0x270F98A60](a1, __ec);
}

BOOL std::__fs::filesystem::__fs_is_empty(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x270F98A68](__p, __ec);
}

void std::__fs::filesystem::__permissions(const std::__fs::filesystem::path *a1, std::__fs::filesystem::perms a2, std::__fs::filesystem::perm_options a3, std::error_code *a4)
{
}

void std::__fs::filesystem::__resize_file(const std::__fs::filesystem::path *a1, uintmax_t __size, std::error_code *a3)
{
}

void std::__fs::filesystem::__copy_symlink(const std::__fs::filesystem::path *__existing_symlink, const std::__fs::filesystem::path *__new_symlink, std::error_code *__ec)
{
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__current_path(std::__fs::filesystem::path *__return_ptr retstr, std::error_code *__ec)
{
  return (std::__fs::filesystem::path *)MEMORY[0x270F98A88](retstr, __ec);
}

void std::__fs::filesystem::__current_path(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__read_symlink(std::__fs::filesystem::path *__return_ptr retstr, const std::__fs::filesystem::path *a2, std::error_code *__ec)
{
  return (std::__fs::filesystem::path *)MEMORY[0x270F98A98](retstr, a2, __ec);
}

std::__fs::filesystem::_FilesystemClock::time_point std::__fs::filesystem::_FilesystemClock::now(void)
{
  uint64_t v0 = MEMORY[0x270F98AA0]();
  *((void *)&result.__d_.__rep_ + 1) = v1;
  *(void *)&result.__d_.__rep_ = v0;
  return result;
}

void std::__fs::filesystem::__create_symlink(const std::__fs::filesystem::path *__to, const std::__fs::filesystem::path *__new_symlink, std::error_code *__ec)
{
}

std::__fs::filesystem::file_status std::__fs::filesystem::__symlink_status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return (std::__fs::filesystem::file_status)MEMORY[0x270F98AB0](a1, __ec);
}

void std::__fs::filesystem::filesystem_error::~filesystem_error(std::__fs::filesystem::filesystem_error *this)
{
}

uintmax_t std::__fs::filesystem::__hard_link_count(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return MEMORY[0x270F98AC8](a1, __ec);
}

std::__fs::filesystem::file_time_type std::__fs::filesystem::__last_write_time(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  uint64_t v2 = MEMORY[0x270F98AD0](a1, __ec);
  *((void *)&result.__d_.__rep_ + 1) = v3;
  *(void *)&result.__d_.__rep_ = v2;
  return result;
}

BOOL std::__fs::filesystem::__create_directory(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  return MEMORY[0x270F98AD8](a1, a2);
}

BOOL std::__fs::filesystem::__create_directory(const std::__fs::filesystem::path *a1, const std::__fs::filesystem::path *__attributes, std::error_code *a3)
{
  return MEMORY[0x270F98AE0](a1, __attributes, a3);
}

void std::__fs::filesystem::__create_hard_link(const std::__fs::filesystem::path *__to, const std::__fs::filesystem::path *__new_hard_link, std::error_code *__ec)
{
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__weakly_canonical(std::__fs::filesystem::path *__return_ptr retstr, const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return (std::__fs::filesystem::path *)MEMORY[0x270F98AF0](retstr, __p, __ec);
}

std::__fs::filesystem::directory_iterator *__cdecl std::__fs::filesystem::directory_iterator::__increment(std::__fs::filesystem::directory_iterator *this, std::error_code *__ec)
{
  return (std::__fs::filesystem::directory_iterator *)MEMORY[0x270F98AF8](this, __ec);
}

std::__fs::filesystem::directory_iterator *__cdecl std::__fs::filesystem::directory_iterator::directory_iterator(std::__fs::filesystem::directory_iterator *this, const std::__fs::filesystem::path *a2, std::error_code *a3, std::__fs::filesystem::directory_options a4)
{
  return (std::__fs::filesystem::directory_iterator *)MEMORY[0x270F98B00](this, a2, a3, a4);
}

BOOL std::__fs::filesystem::__create_directories(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  return MEMORY[0x270F98B08](a1, a2);
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__temp_directory_path(std::__fs::filesystem::path *__return_ptr retstr, std::error_code *__ec)
{
  return (std::__fs::filesystem::path *)MEMORY[0x270F98B10](retstr, __ec);
}

void std::__fs::filesystem::__create_directory_symlink(const std::__fs::filesystem::path *__to, const std::__fs::filesystem::path *__new_symlink, std::error_code *__ec)
{
}

void std::__fs::filesystem::__copy(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::__fs::filesystem::copy_options __opt, std::error_code *__ec)
{
}

std::__fs::filesystem::space_info *__cdecl std::__fs::filesystem::__space(std::__fs::filesystem::space_info *__return_ptr retstr, const std::__fs::filesystem::path *a2, std::error_code *__ec)
{
  return (std::__fs::filesystem::space_info *)MEMORY[0x270F98B48](retstr, a2, __ec);
}

BOOL std::__fs::filesystem::__remove(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return MEMORY[0x270F98B50](a1, __ec);
}

void std::__fs::filesystem::__rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
}

std::__fs::filesystem::file_status std::__fs::filesystem::__status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return (std::__fs::filesystem::file_status)MEMORY[0x270F98B60](a1, __ec);
}

double std::stod(const std::string *__str, size_t *__idx)
{
  MEMORY[0x270F98B68](__str, __idx);
  return result;
}

float std::stof(const std::string *__str, size_t *__idx)
{
  MEMORY[0x270F98B70](__str, __idx);
  return result;
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

BOOL std::mutex::try_lock(std::mutex *this)
{
  return MEMORY[0x270F98BB0](this);
}

void std::mutex::~mutex(std::mutex *this)
{
}

uint64_t std::stoll(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x270F98BC0](__str, __idx, *(void *)&__base);
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x270F98C18]();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x270F98C28]();
}

time_t std::chrono::system_clock::to_time_t(const std::chrono::system_clock::time_point *__t)
{
  return MEMORY[0x270F98C30](__t);
}

void std::future<void>::~future(std::future<void> *this)
{
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x270F98C70](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x270F98C78](this);
}

void std::locale::~locale(std::locale *this)
{
}

const std::locale *__cdecl std::locale::operator=(std::locale *this, const std::locale *a2)
{
  return (const std::locale *)MEMORY[0x270F98C88](this, a2);
}

unint64_t std::stoull(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x270F98C90](__str, __idx, *(void *)&__base);
}

void std::thread::join(std::thread *this)
{
}

void std::thread::detach(std::thread *this)
{
}

void std::thread::~thread(std::thread *this)
{
}

std::future<void> std::promise<void>::get_future(std::promise<void> *this)
{
  return (std::future<void>)MEMORY[0x270F98CE0](this);
}

void std::promise<void>::set_exception(std::promise<void> *this, std::exception_ptr __p)
{
}

void std::promise<void>::set_value(std::promise<void> *this)
{
}

std::promise<void> *__cdecl std::promise<void>::promise(std::promise<void> *this)
{
  return (std::promise<void> *)MEMORY[0x270F98CF8](this);
}

void std::promise<void>::~promise(std::promise<void> *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::move(std::ios_base *this, std::ios_base *a2)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

std::ios_base::failure *__cdecl std::ios_base::failure::failure(std::ios_base::failure *this, const std::string *__msg, const std::error_code *__ec)
{
  return (std::ios_base::failure *)MEMORY[0x270F98D78](this, __msg, __ec);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return (std::string *)MEMORY[0x270F98DF8](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, float __val)
{
  return (std::string *)MEMORY[0x270F98E00](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x270F98E08](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x270F98E10](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E18](retstr, __val);
}

{
  return (std::string *)MEMORY[0x270F98E28](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E20](retstr, __val);
}

{
  return (std::string *)MEMORY[0x270F98E30](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x270F98E38]();
}

std::bad_cast *__cdecl std::bad_cast::bad_cast(std::bad_cast *this)
{
  return (std::bad_cast *)MEMORY[0x270F98E48](this);
}

void std::bad_cast::~bad_cast(std::bad_cast *this)
{
}

std::bad_alloc *__cdecl std::bad_alloc::bad_alloc(std::bad_alloc *this)
{
  return (std::bad_alloc *)MEMORY[0x270F98E58](this);
}

void std::exception::~exception(std::exception *this)
{
}

std::exception_ptr std::current_exception(void)
{
  return (std::exception_ptr)MEMORY[0x270F98E98]();
}

void std::rethrow_exception(std::exception_ptr a1)
{
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz, std::align_val_t a2)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x270ED7DA0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void *__cxa_get_exception_ptr(void *a1)
{
  return (void *)MEMORY[0x270F98F00](a1);
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int __darwin_check_fd_set_overflow(int a1, const void *a2, int a3)
{
  return MEMORY[0x270ED7DA8](*(void *)&a1, a2, *(void *)&a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x270F98F30](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

double __exp10(double a1)
{
  MEMORY[0x270ED7DC8](a1);
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x270ED7E28](*(void *)&a1, a2);
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x270ED7E88](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  MEMORY[0x270ED7E90](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F00](*(void *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F08](*(void *)&a1);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_log_pack_fill()
{
  return MEMORY[0x270ED80A0]();
}

uint64_t _os_log_pack_size()
{
  return MEMORY[0x270ED80A8]();
}

uint64_t _os_log_send_and_compose_impl()
{
  return MEMORY[0x270ED80B0]();
}

void abort(void)
{
}

int accept(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x270ED8478](*(void *)&a1, a2, a3);
}

long double acos(long double __x)
{
  MEMORY[0x270ED8588](__x);
  return result;
}

float acosf(float a1)
{
  MEMORY[0x270ED8598](a1);
  return result;
}

long double asin(long double __x)
{
  MEMORY[0x270ED8610](__x);
  return result;
}

float asinf(float a1)
{
  MEMORY[0x270ED8618](a1);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x270ED86E8](a1);
}

int bind(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x270ED8758](*(void *)&a1, a2, *(void *)&a3);
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x270ED8F18](*(void *)&a1);
}

int connect(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x270ED8F58](*(void *)&a1, a2, *(void *)&a3);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_group_async_f(dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x270ED9340]();
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x270ED9378](group, timeout);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x270ED9458](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
}

void dispatch_sync_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x270ED95D0](label);
}

void dispatch_workloop_set_os_workgroup(dispatch_workloop_t workloop, os_workgroup_t workgroup)
{
}

uint64_t dispatch_workloop_set_qos_class_floor()
{
  return MEMORY[0x270ED95F8]();
}

uint64_t dispatch_workloop_set_scheduler_priority()
{
  return MEMORY[0x270ED9600]();
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x270ED9610](a1, a2);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x270ED98D0](*(void *)&a1, *(void *)&a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x270ED9A20](a1, a2);
}

void free(void *a1)
{
}

void freeaddrinfo(addrinfo *a1)
{
}

int getaddrinfo(const char *a1, const char *a2, const addrinfo *a3, addrinfo **a4)
{
  return MEMORY[0x270ED9B98](a1, a2, a3, a4);
}

pid_t getpid(void)
{
  return MEMORY[0x270ED9CE0]();
}

int getsockname(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x270ED9D88](*(void *)&a1, a2, a3);
}

int getsockopt(int a1, int a2, int a3, void *a4, socklen_t *a5)
{
  return MEMORY[0x270ED9D90](*(void *)&a1, *(void *)&a2, *(void *)&a3, a4, a5);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return (const char *)MEMORY[0x270ED9EC0](*(void *)&a1, a2, a3, *(void *)&a4);
}

int listen(int a1, int a2)
{
  return MEMORY[0x270EDA078](*(void *)&a1, *(void *)&a2);
}

lconv *localeconv(void)
{
  return (lconv *)MEMORY[0x270EDA090]();
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x270EDA0A0](a1, a2);
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x270EDA158]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x270EDA288](info);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x270EDA398](memptr, alignment, size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3A0](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

int nanosleep(const timespec *__rqtp, timespec *__rmtp)
{
  return MEMORY[0x270EDA618](__rqtp, __rmtp);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

uint64_t os_log_pack_send()
{
  return MEMORY[0x270EDA9B0]();
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

void os_release(void *object)
{
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x270EDAEA0](a1, a2, a3, a4);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x270EDB010]();
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x270EDB038](a1);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x270EDB048](a1, a2);
}

ssize_t recv(int a1, void *a2, size_t a3, int a4)
{
  return MEMORY[0x270EDB190](*(void *)&a1, a2, a3, *(void *)&a4);
}

int sched_yield(void)
{
  return MEMORY[0x270EDB320]();
}

int select(int a1, fd_set *a2, fd_set *a3, fd_set *a4, timeval *a5)
{
  return MEMORY[0x270EDB328](*(void *)&a1, a2, a3, a4, a5);
}

ssize_t send(int a1, const void *a2, size_t a3, int a4)
{
  return MEMORY[0x270EDB3B0](*(void *)&a1, a2, a3, *(void *)&a4);
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return MEMORY[0x270EDB440](*(void *)&a1, *(void *)&a2, *(void *)&a3, a4, *(void *)&a5);
}

int shutdown(int a1, int a2)
{
  return MEMORY[0x270EDB480](*(void *)&a1, *(void *)&a2);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x270EDB520](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x270EDB560](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB5A8](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x270EDB5F0](a1, a2, a3, a4);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB680](__s, *(void *)&__c);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x270EDB6A0](__s1, __s2);
}

double strtod(const char *a1, char **a2)
{
  MEMORY[0x270EDB6A8](a1, a2);
  return result;
}

float strtof(const char *a1, char **a2)
{
  MEMORY[0x270EDB6B8](a1, a2);
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB6D8](__str, __endptr, *(void *)&__base);
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB6E8](__str, __endptr, *(void *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB718](__str, __endptr, *(void *)&__base);
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return MEMORY[0x270EDBA80](*(void *)&target_task, address, size, *(void *)&flags);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x270EDBA90](*(void *)&target_task, address, size);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x270EDBB18](__str, __size, __format, a4);
}