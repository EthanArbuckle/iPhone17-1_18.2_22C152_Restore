void sub_1C49CD0C4(CGRect *a1, CGPoint *a2, CGPoint *a3, CGPoint *a4, CGPoint *a5)
{
  double MinX;
  CGPoint v11;
  CGPoint v12;
  CGPoint v13;
  CGFloat y;
  double v15;
  CGPoint v16;
  CGPoint v17;
  CGPoint v18;
  CGFloat v19;
  double v20;
  CGPoint v21;
  CGPoint v22;
  CGPoint v23;
  CGFloat v24;
  double v25;
  CGSize size;
  CGPoint origin;
  CGSize v28;

  sub_1C49CD548(a1, a2, a3, a4);
  MinX = CGRectGetMinX(*(CGRect *)&a5->x);
  if (MinX < CGRectGetMinX(*(CGRect *)&a4->x))
  {
    v12 = *a4;
    v11 = a4[1];
    v13 = a5[1];
    *a4 = *a5;
    a4[1] = v13;
    *a5 = v12;
    a5[1] = v11;
    v11.x = a4->x;
    v12.x = a4->y;
    v13.x = a4[1].x;
    y = a4[1].y;
    v15 = CGRectGetMinX(*(CGRect *)((char *)&v12 - 8));
    if (v15 < CGRectGetMinX(*(CGRect *)&a3->x))
    {
      v17 = *a3;
      v16 = a3[1];
      v18 = a4[1];
      *a3 = *a4;
      a3[1] = v18;
      *a4 = v17;
      a4[1] = v16;
      v16.x = a3->x;
      v17.x = a3->y;
      v18.x = a3[1].x;
      v19 = a3[1].y;
      v20 = CGRectGetMinX(*(CGRect *)((char *)&v17 - 8));
      if (v20 < CGRectGetMinX(*(CGRect *)&a2->x))
      {
        v22 = *a2;
        v21 = a2[1];
        v23 = a3[1];
        *a2 = *a3;
        a2[1] = v23;
        *a3 = v22;
        a3[1] = v21;
        v21.x = a2->x;
        v22.x = a2->y;
        v23.x = a2[1].x;
        v24 = a2[1].y;
        v25 = CGRectGetMinX(*(CGRect *)((char *)&v22 - 8));
        if (v25 < CGRectGetMinX(*a1))
        {
          origin = a1->origin;
          size = a1->size;
          v28 = (CGSize)a2[1];
          a1->origin = *a2;
          a1->size = v28;
          *a2 = origin;
          a2[1] = (CGPoint)size;
        }
      }
    }
  }
}

void sub_1C49CD1E8(CGRect *a1, CGPoint *a2, CGPoint *a3)
{
  double MinX = CGRectGetMinX(*(CGRect *)&a2->x);
  double v7 = CGRectGetMinX(*a1);
  double v8 = CGRectGetMinX(*(CGRect *)&a3->x);
  double v9 = CGRectGetMinX(*(CGRect *)&a2->x);
  if (MinX >= v7)
  {
    if (v8 < v9)
    {
      CGPoint v14 = *a2;
      CGPoint v13 = a2[1];
      CGPoint v15 = a3[1];
      *a2 = *a3;
      a2[1] = v15;
      *a3 = v14;
      a3[1] = v13;
      v13.x = a2->x;
      v14.x = a2->y;
      v15.x = a2[1].x;
      CGFloat y = a2[1].y;
      double v17 = CGRectGetMinX(*(CGRect *)((char *)&v14 - 8));
      if (v17 < CGRectGetMinX(*a1))
      {
        CGPoint origin = a1->origin;
        CGSize size = a1->size;
        CGSize v20 = (CGSize)a2[1];
        a1->CGPoint origin = *a2;
        a1->CGSize size = v20;
        *a2 = origin;
        a2[1] = (CGPoint)size;
      }
    }
  }
  else
  {
    if (v8 >= v9)
    {
      CGPoint v22 = a1->origin;
      CGSize v21 = a1->size;
      CGSize v23 = (CGSize)a2[1];
      a1->CGPoint origin = *a2;
      a1->CGSize size = v23;
      *a2 = v22;
      a2[1] = (CGPoint)v21;
      v21.width = a3->x;
      v22.x = a3->y;
      v23.width = a3[1].x;
      CGFloat v24 = a3[1].y;
      double v25 = CGRectGetMinX(*(CGRect *)((char *)&v22 - 8));
      if (v25 >= CGRectGetMinX(*(CGRect *)&a2->x)) {
        return;
      }
      CGPoint v11 = *a2;
      CGSize v10 = (CGSize)a2[1];
      CGPoint v26 = a3[1];
      *a2 = *a3;
      a2[1] = v26;
    }
    else
    {
      CGPoint v11 = a1->origin;
      CGSize v10 = a1->size;
      CGSize v12 = (CGSize)a3[1];
      a1->CGPoint origin = *a3;
      a1->CGSize size = v12;
    }
    *a3 = v11;
    a3[1] = (CGPoint)v10;
  }
}

BOOL sub_1C49CD320(long long *a1, CGRect *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (long long *)&a2[-1];
      double MinX = CGRectGetMinX(a2[-1]);
      if (MinX < CGRectGetMinX(*(CGRect *)a1))
      {
        long long v9 = *a1;
        long long v8 = a1[1];
        long long v10 = v6[1];
        *a1 = *v6;
        a1[1] = v10;
        long long *v6 = v9;
        v6[1] = v8;
      }
      return 1;
    case 3:
      sub_1C49CD1E8((CGRect *)a1, (CGPoint *)a1 + 2, &a2[-1].origin);
      return 1;
    case 4:
      sub_1C49CD548((CGRect *)a1, (CGPoint *)a1 + 2, (CGPoint *)a1 + 4, &a2[-1].origin);
      return 1;
    case 5:
      sub_1C49CD0C4((CGRect *)a1, (CGPoint *)a1 + 2, (CGPoint *)a1 + 4, (CGPoint *)a1 + 6, &a2[-1].origin);
      return 1;
    default:
      CGPoint v11 = (CGRect *)(a1 + 4);
      sub_1C49CD1E8((CGRect *)a1, (CGPoint *)a1 + 2, (CGPoint *)a1 + 4);
      CGSize v12 = (CGRect *)(a1 + 6);
      if (a1 + 6 == (long long *)a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = CGRectGetMinX(*v12);
    if (v15 < CGRectGetMinX(*v11)) {
      break;
    }
LABEL_13:
    CGPoint v11 = v12;
    v13 += 32;
    if (++v12 == a2) {
      return 1;
    }
  }
  CGFloat x = v12->origin.x;
  CGFloat y = v12->origin.y;
  uint64_t v18 = v13;
  CGFloat width = v12->size.width;
  CGFloat height = v12->size.height;
  do
  {
    uint64_t v21 = (uint64_t)a1 + v18;
    long long v22 = *(long long *)((char *)a1 + v18 + 80);
    *(_OWORD *)(v21 + 96) = *(long long *)((char *)a1 + v18 + 64);
    *(_OWORD *)(v21 + 112) = v22;
    if (v18 == -64)
    {
      *(CGFloat *)a1 = x;
      *((CGFloat *)a1 + 1) = y;
      *((CGFloat *)a1 + 2) = width;
      *((CGFloat *)a1 + 3) = height;
      if (++v14 != 8) {
        goto LABEL_13;
      }
      return &v12[1] == a2;
    }
    v26.origin.CGFloat x = x;
    v26.origin.CGFloat y = y;
    v26.size.CGFloat width = width;
    v26.size.CGFloat height = height;
    double v23 = CGRectGetMinX(v26);
    v18 -= 32;
  }
  while (v23 < CGRectGetMinX(*(CGRect *)(v21 + 32)));
  uint64_t v24 = (uint64_t)a1 + v18;
  *(CGFloat *)(v24 + 96) = x;
  *(CGFloat *)(v24 + 104) = y;
  uint64_t v25 = (uint64_t)a1 + v18 + 96;
  *(CGFloat *)(v25 + 16) = width;
  *(CGFloat *)(v25 + 24) = height;
  if (++v14 != 8) {
    goto LABEL_13;
  }
  return &v12[1] == a2;
}

void sub_1C49CD548(CGRect *a1, CGPoint *a2, CGPoint *a3, CGPoint *a4)
{
  sub_1C49CD1E8(a1, a2, a3);
  double MinX = CGRectGetMinX(*(CGRect *)&a4->x);
  if (MinX < CGRectGetMinX(*(CGRect *)&a3->x))
  {
    CGPoint v10 = *a3;
    CGPoint v9 = a3[1];
    CGPoint v11 = a4[1];
    *a3 = *a4;
    a3[1] = v11;
    *a4 = v10;
    a4[1] = v9;
    v9.CGFloat x = a3->x;
    v10.CGFloat x = a3->y;
    v11.CGFloat x = a3[1].x;
    CGFloat y = a3[1].y;
    double v13 = CGRectGetMinX(*(CGRect *)((char *)&v10 - 8));
    if (v13 < CGRectGetMinX(*(CGRect *)&a2->x))
    {
      CGPoint v15 = *a2;
      CGPoint v14 = a2[1];
      CGPoint v16 = a3[1];
      *a2 = *a3;
      a2[1] = v16;
      *a3 = v15;
      a3[1] = v14;
      v14.CGFloat x = a2->x;
      v15.CGFloat x = a2->y;
      v16.CGFloat x = a2[1].x;
      CGFloat v17 = a2[1].y;
      double v18 = CGRectGetMinX(*(CGRect *)((char *)&v15 - 8));
      if (v18 < CGRectGetMinX(*a1))
      {
        CGPoint origin = a1->origin;
        CGSize size = a1->size;
        CGSize v21 = (CGSize)a2[1];
        a1->CGPoint origin = *a2;
        a1->CGSize size = v21;
        *a2 = origin;
        a2[1] = (CGPoint)size;
      }
    }
  }
}

void sub_1C49CF1AC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_setWithArray_(MEMORY[0x1E4F1CAD0], a2, (uint64_t)&unk_1F203D998, a4, a5, a6);
  double v7 = (void *)qword_1EA3C90F0;
  qword_1EA3C90F0 = v6;
}

uint64_t sub_1C49CFF60(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C49D00A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C49D00BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  uint64_t Script = uscript_getScript();
  long long v8 = objc_opt_class();
  uint64_t result = objc_msgSend_isSkippableScriptCode_(v8, v9, Script, v10, v11, v12);
  uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 8);
  int v15 = *(_DWORD *)(v14 + 24);
  if (v15 == -1) {
    int v16 = Script;
  }
  else {
    int v16 = *(_DWORD *)(v14 + 24);
  }
  if (!result) {
    int v16 = Script;
  }
  if (v15 == -1 || v16 == v15)
  {
    *(_DWORD *)(v14 + 24) = v16;
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == -1) {
LABEL_14:
    }
      *a5 = 1;
  }
  else
  {
    *(_DWORD *)(v14 + 24) = -1;
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == -1) {
      goto LABEL_14;
    }
  }
  return result;
}

void sub_1C49D086C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C49D0884(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C49D0894(uint64_t a1)
{
}

void sub_1C49D089C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_scriptCodeForCodepoint_(CHTextInputScriptSpec, a2, (uint64_t)a2, a4, a5, a6);
  double v7 = NSString;
  uint64_t ShortName = uscript_getShortName();
  objc_msgSend_stringWithUTF8String_(v7, v9, ShortName, v10, v11, v12);
  id v35 = (id)objc_claimAutoreleasedReturnValue();
  CGFloat v17 = objc_msgSend_objectForKey_(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v13, (uint64_t)v35, v14, v15, v16);

  if (v17)
  {
    long long v22 = NSNumber;
    double v23 = objc_msgSend_objectForKeyedSubscript_(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v18, (uint64_t)v35, v19, v20, v21);
    uint64_t v29 = objc_msgSend_unsignedLongValue(v23, v24, v25, v26, v27, v28);
    v34 = objc_msgSend_numberWithUnsignedLong_(v22, v30, v29 + 1, v31, v32, v33);
  }
  else
  {
    v34 = &unk_1F203E280;
  }
  objc_msgSend_setObject_forKey_(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v18, (uint64_t)v34, (uint64_t)v35, v20, v21);
}

uint64_t Segment::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  if (a1 != a2)
  {
    sub_1C494ACB0((void *)(a1 + 48), *(char **)(a2 + 48), *(char **)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3);
    sub_1C499DEE4((void *)(a1 + 72), *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
    sub_1C499DEE4((void *)(a1 + 96), *(char **)(a2 + 96), *(char **)(a2 + 104), (uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 2);
  }
  return a1;
}

double Segment::horizontalOverlap(double *a1, double *a2, int a3)
{
  double v3 = a2[2];
  double v4 = a1[2];
  if (v3 >= v4) {
    v5 = a1;
  }
  else {
    v5 = a2;
  }
  if (v3 >= v4) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = a1;
  }
  double v7 = v5[4];
  if (v6[4] < v7) {
    return *v6;
  }
  double result = v7 - (v6[2] - (double)a3);
  if (result < 0.0) {
    return 0.0;
  }
  return result;
}

double Segment::verticalOverlap(double *a1, double *a2)
{
  double v2 = a2[3];
  double v3 = a1[3];
  if (v2 >= v3) {
    double v4 = a1;
  }
  else {
    double v4 = a2;
  }
  if (v2 >= v3) {
    v5 = a2;
  }
  else {
    v5 = a1;
  }
  double v6 = v4[5];
  if (v5[5] < v6) {
    return v5[1];
  }
  double result = v6 - v5[3];
  if (result < 0.0) {
    return 0.0;
  }
  return result;
}

BOOL Segment::findIntersection(double *a1, double *a2)
{
  double v2 = a2[3];
  double v3 = a1[3];
  if (v2 >= v3) {
    double v4 = a1;
  }
  else {
    double v4 = a2;
  }
  if (v2 >= v3) {
    v5 = a2;
  }
  else {
    v5 = a1;
  }
  double v6 = v4[5];
  if (v5[5] >= v6)
  {
    double v7 = v6 - v5[3];
    if (v7 < 0.0) {
      double v7 = 0.0;
    }
  }
  else
  {
    double v7 = v5[1];
  }
  double v8 = a2[2];
  double v9 = a1[2];
  if (v8 >= v9) {
    uint64_t v10 = a1;
  }
  else {
    uint64_t v10 = a2;
  }
  if (v8 >= v9) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = a1;
  }
  double v12 = v10[4];
  if (v11[4] >= v12)
  {
    double v14 = v12 - (v11[2] + -5.0);
    if (v14 < 0.0) {
      double v14 = 0.0;
    }
    return v14 > 0.0 && v7 > 0.0;
  }
  else
  {
    return *v11 > 0.0 && v7 > 0.0;
  }
}

BOOL Segment::verticalSeperated(Segment *this, const Segment *a2)
{
  double v4 = 0;
  v5 = 0;
  double v6 = 0;
  double v7 = 0;
  double v8 = *((double *)this + 3);
  double v9 = *((double *)a2 + 3);
  if (v8 >= v9) {
    double v10 = *((double *)a2 + 3);
  }
  else {
    double v10 = *((double *)this + 3);
  }
  int v11 = (int)v10;
  double v12 = *((double *)this + 5);
  if (v12 <= *((double *)a2 + 5)) {
    double v12 = *((double *)a2 + 5);
  }
  unint64_t v13 = ((int)v12 - v11);
  uint64_t v14 = (int)v13 + 1;
  if (v13 != -1)
  {
    if ((int)v13 <= -2) {
      sub_1C494A220();
    }
    double v4 = (char *)operator new(4 * ((int)v13 + 1));
    memset_pattern16(v4, &unk_1C4C3A750, 4 * v14);
    v5 = operator new(4 * v14);
    memset_pattern16(v5, &unk_1C4C3A760, 4 * v14);
    double v6 = operator new(4 * v14);
    memset_pattern16(v6, &unk_1C4C3A750, 4 * v14);
    double v7 = (char *)operator new(4 * v14);
    memset_pattern16(v7, &unk_1C4C3A760, 4 * v14);
  }
  uint64_t v15 = *((void *)this + 9);
  uint64_t v16 = *((void *)this + 10) - v15;
  if (v16)
  {
    unint64_t v17 = v16 >> 2;
    uint64_t v18 = *((void *)this + 12);
    uint64_t v19 = (int)v8 - v11;
    if (v17 <= 1) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = v17;
    }
    if (v20 < 0x10)
    {
      unint64_t v21 = 0;
LABEL_15:
      unint64_t v22 = v20 - v21;
      double v23 = (int *)(v18 + 4 * v21);
      uint64_t v24 = (int *)(v15 + 4 * v21);
      uint64_t v25 = v21 + v19;
      uint64_t v26 = &v5[v25];
      uint64_t v27 = &v4[v25 * 4];
      do
      {
        int v28 = *v24++;
        *(_DWORD *)uint64_t v27 = v28;
        v27 += 4;
        int v29 = *v23++;
        *v26++ = v29;
        --v22;
      }
      while (v22);
      goto LABEL_17;
    }
    unint64_t v21 = 0;
    uint64_t v50 = v19;
    v51 = (char *)&v5[v19];
    v52 = &v4[4 * v19];
    if ((unint64_t)(v51 - v52) < 0x20) {
      goto LABEL_15;
    }
    if ((unint64_t)&v52[-v15] < 0x20) {
      goto LABEL_15;
    }
    if ((unint64_t)(v18 - (void)v52) < 0x20) {
      goto LABEL_15;
    }
    if ((unint64_t)&v51[-v15] < 0x20) {
      goto LABEL_15;
    }
    if ((unint64_t)&v51[-v18] < 0x20) {
      goto LABEL_15;
    }
    unint64_t v21 = v20 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v53 = v50 * 4 + 16;
    v54 = &v5[v50 + 4];
    v55 = (long long *)(v18 + 16);
    v56 = &v4[v53];
    v57 = (long long *)(v15 + 16);
    unint64_t v58 = v20 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      long long v59 = *v57;
      *((_OWORD *)v56 - 1) = *(v57 - 1);
      *(_OWORD *)v56 = v59;
      long long v60 = *v55;
      *(v54 - 1) = *(v55 - 1);
      _OWORD *v54 = v60;
      v54 += 2;
      v55 += 2;
      v56 += 32;
      v57 += 2;
      v58 -= 8;
    }
    while (v58);
    if (v20 != v21) {
      goto LABEL_15;
    }
  }
LABEL_17:
  uint64_t v30 = *((void *)a2 + 12);
  uint64_t v31 = *((void *)a2 + 13) - v30;
  if (!v31) {
    goto LABEL_24;
  }
  unint64_t v32 = v31 >> 2;
  uint64_t v33 = *((void *)a2 + 9);
  uint64_t v34 = (int)v9 - v11;
  if (v32 <= 1) {
    unint64_t v32 = 1;
  }
  if (v32 < 0x10)
  {
    unint64_t v35 = 0;
LABEL_22:
    unint64_t v36 = v32 - v35;
    v37 = (int *)(v30 + 4 * v35);
    v38 = (int *)(v33 + 4 * v35);
    uint64_t v39 = v35 + v34;
    v40 = &v7[v39 * 4];
    v41 = &v6[v39];
    do
    {
      int v42 = *v38++;
      *v41++ = v42;
      int v43 = *v37++;
      *(_DWORD *)v40 = v43;
      v40 += 4;
      --v36;
    }
    while (v36);
    goto LABEL_24;
  }
  unint64_t v35 = 0;
  uint64_t v61 = 4 * v34;
  v62 = &v7[4 * v34];
  v63 = (char *)&v6[v34];
  if ((unint64_t)(v62 - v63) < 0x20) {
    goto LABEL_22;
  }
  if ((unint64_t)&v63[-v33] < 0x20) {
    goto LABEL_22;
  }
  if ((unint64_t)(v30 - (void)v63) < 0x20) {
    goto LABEL_22;
  }
  if ((unint64_t)&v62[-v33] < 0x20) {
    goto LABEL_22;
  }
  if ((unint64_t)&v62[-v30] < 0x20) {
    goto LABEL_22;
  }
  unint64_t v35 = v32 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v64 = v61 + 16;
  v65 = &v7[v61 + 16];
  v66 = (long long *)(v30 + 16);
  v67 = (_OWORD *)((char *)v6 + v64);
  v68 = (long long *)(v33 + 16);
  unint64_t v69 = v32 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    long long v70 = *v68;
    *(v67 - 1) = *(v68 - 1);
    _OWORD *v67 = v70;
    long long v71 = *v66;
    *((_OWORD *)v65 - 1) = *(v66 - 1);
    *(_OWORD *)v65 = v71;
    v65 += 32;
    v66 += 2;
    v67 += 2;
    v68 += 2;
    v69 -= 8;
  }
  while (v69);
  if (v32 != v35) {
    goto LABEL_22;
  }
LABEL_24:
  if ((v13 & 0x80000000) != 0)
  {
    BOOL v48 = 1;
    if (!v7) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if (*v5 >= *v6)
  {
    BOOL v48 = 0;
    if (!v7) {
      goto LABEL_33;
    }
LABEL_32:
    operator delete(v7);
    goto LABEL_33;
  }
  unint64_t v44 = 0;
  do
  {
    unint64_t v45 = v44;
    if ((v13 + 1) - 1 == v44) {
      break;
    }
    int v46 = v5[v44 + 1];
    int v47 = v6[++v44];
  }
  while (v46 < v47);
  BOOL v48 = v45 >= v13;
  if (v7) {
    goto LABEL_32;
  }
LABEL_33:
  if (v6) {
    operator delete(v6);
  }
  if (v5) {
    operator delete(v5);
  }
  if (v4) {
    operator delete(v4);
  }
  return v48;
}

void sub_1C49D0F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  operator delete(v13);
  operator delete(v12);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void Segment::mergeBoundingBoxes(Segment *this@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)(a4 + 48) = 0u;
  double v6 = (char **)(a4 + 48);
  float64x2_t v7 = *((float64x2_t *)this + 2);
  float64x2_t v8 = a2[2];
  float64x2_t v9 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(a2[1], *((float64x2_t *)this + 1)), *((int8x16_t *)this + 1), (int8x16_t)a2[1]);
  *(void *)(a4 + 112) = 0;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  float64x2_t v10 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v7, v8), (int8x16_t)v7, (int8x16_t)v8);
  *(float64x2_t *)(a4 + 16) = v9;
  *(float64x2_t *)(a4 + 32) = v10;
  *(float64x2_t *)a4 = vsubq_f64(v10, v9);
  if ((Segment *)a4 == this)
  {
    uint64_t v15 = 0;
    unint64_t v13 = 0;
    unint64_t v11 = 0;
    double v12 = (uint64_t *)(a4 + 56);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    unint64_t v18 = 1;
  }
  else
  {
    sub_1C494ACB0(v6, *((char **)this + 6), *((char **)this + 7), (uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 3);
    unint64_t v13 = *(char **)(a4 + 56);
    unint64_t v11 = *(void *)(a4 + 64);
    double v12 = (uint64_t *)(a4 + 56);
    if ((unint64_t)v13 < v11)
    {
      *(void *)unint64_t v13 = a3;
      uint64_t v14 = (uint64_t)(v13 + 8);
      goto LABEL_27;
    }
    uint64_t v15 = *v6;
    uint64_t v16 = v13 - *v6;
    uint64_t v17 = v16 >> 3;
    unint64_t v18 = (v16 >> 3) + 1;
    if (v18 >> 61) {
      sub_1C494A220();
    }
  }
  uint64_t v19 = v11 - (void)v15;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      sub_1C4949AA8();
    }
    unint64_t v21 = operator new(8 * v20);
    unint64_t v22 = &v21[8 * v17];
    double v23 = &v21[8 * v20];
    *unint64_t v22 = a3;
    uint64_t v14 = (uint64_t)(v22 + 1);
    int64_t v24 = v13 - v15;
    if (v13 == v15) {
      goto LABEL_25;
    }
  }
  else
  {
    unint64_t v21 = 0;
    unint64_t v22 = (void *)(8 * v17);
    double v23 = 0;
    *(void *)(8 * v17) = a3;
    uint64_t v14 = 8 * v17 + 8;
    int64_t v24 = v13 - v15;
    if (v13 == v15) {
      goto LABEL_25;
    }
  }
  unint64_t v25 = v24 - 8;
  if (v25 < 0x58)
  {
    uint64_t v26 = v13;
    goto LABEL_24;
  }
  if ((unint64_t)(v13 - &v21[v16]) < 0x20)
  {
    uint64_t v26 = v13;
    do
    {
LABEL_24:
      uint64_t v33 = *((void *)v26 - 1);
      v26 -= 8;
      *--unint64_t v22 = v33;
    }
    while (v26 != v15);
    goto LABEL_25;
  }
  uint64_t v27 = (v25 >> 3) + 1;
  uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v26 = &v13[-v28];
  unint64_t v22 = (void *)((char *)v22 - v28);
  int v29 = &v21[8 * v17 - 16];
  uint64_t v30 = v13 - 16;
  uint64_t v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v32 = *(_OWORD *)v30;
    *(v29 - 1) = *((_OWORD *)v30 - 1);
    *int v29 = v32;
    v29 -= 2;
    v30 -= 32;
    v31 -= 4;
  }
  while (v31);
  if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_24;
  }
LABEL_25:
  *(void *)(a4 + 48) = v22;
  *(void *)(a4 + 56) = v14;
  *(void *)(a4 + 64) = v23;
  if (v15) {
    operator delete(v15);
  }
LABEL_27:
  *double v12 = v14;
}

void sub_1C49D11A0(_Unwind_Exception *a1)
{
  sub_1C49D11D0(v1);
  _Unwind_Resume(a1);
}

void Segment::Segment(Segment *this)
{
  *((void *)this + 14) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
}

{
  *((void *)this + 14) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
}

void *sub_1C49D11D0(void *a1)
{
  double v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  double v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  double v4 = (void *)a1[6];
  if (v4)
  {
    a1[7] = v4;
    operator delete(v4);
  }
  return a1;
}

void Segment::mergeIntoSegment(Segment *this, const Segment *a2)
{
  double v4 = *((double *)this + 2);
  double v5 = *((double *)this + 3);
  if (v4 >= *((double *)a2 + 2)) {
    double v4 = *((double *)a2 + 2);
  }
  *((double *)this + 2) = v4;
  double v6 = *((double *)a2 + 3);
  if (v5 < v6) {
    double v6 = v5;
  }
  *((double *)this + 3) = v6;
  double v7 = *((double *)a2 + 4);
  double v8 = *((double *)this + 5);
  if (*((double *)this + 4) > v7) {
    double v7 = *((double *)this + 4);
  }
  *((double *)this + 4) = v7;
  double v9 = *((double *)a2 + 5);
  if (v8 > v9) {
    double v9 = v8;
  }
  *((double *)this + 5) = v9;
  *(double *)this = v7 - v4;
  *((double *)this + 1) = v9 - v6;
  unint64_t v11 = (char *)*((void *)a2 + 6);
  float64x2_t v10 = (char *)*((void *)a2 + 7);
  uint64_t v12 = v10 - v11;
  if (v10 - v11 >= 1)
  {
    unint64_t v13 = *((void *)this + 6);
    uint64_t v14 = v12 >> 3;
    uint64_t v16 = (char *)*((void *)this + 7);
    uint64_t v15 = *((void *)this + 8);
    unint64_t v17 = (unint64_t)&v16[-v13];
    uint64_t v18 = (uint64_t)&v16[-v13] >> 3;
    uint64_t v19 = (char *)(v13 + ((unint64_t)&v16[-v13] & 0xFFFFFFFFFFFFFFF8));
    if (v12 >> 3 > (v15 - (uint64_t)v16) >> 3)
    {
      unint64_t v20 = v18 + v14;
      if ((unint64_t)(v18 + v14) >> 61) {
        sub_1C494A220();
      }
      uint64_t v21 = v15 - v13;
      if (v21 >> 2 > v20) {
        unint64_t v20 = v21 >> 2;
      }
      BOOL v22 = (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v22) {
        unint64_t v23 = v20;
      }
      unint64_t v145 = v23;
      if (v23)
      {
        if (v23 >> 61) {
          sub_1C4949AA8();
        }
        int64_t v24 = operator new(8 * v23);
        uint64_t v19 = (char *)(v13 + ((unint64_t)&v16[-v13] & 0xFFFFFFFFFFFFFFF8));
        uint64_t v18 = (uint64_t)&v16[-v13] >> 3;
        uint64_t v25 = (uint64_t)&v24[8 * v18];
        uint64_t v26 = (char *)(v25 + 8 * v14);
        unint64_t v27 = v12 - 8;
        if ((unint64_t)(v12 - 8) < 0x38) {
          goto LABEL_19;
        }
      }
      else
      {
        int64_t v24 = 0;
        uint64_t v25 = 8 * v18;
        uint64_t v26 = (char *)(8 * v18 + 8 * v14);
        unint64_t v27 = v12 - 8;
        if ((unint64_t)(v12 - 8) < 0x38)
        {
LABEL_19:
          uint64_t v28 = (char *)v25;
          goto LABEL_36;
        }
      }
      uint64_t v28 = (char *)v25;
      if ((unint64_t)(&v24[v17 & 0xFFFFFFFFFFFFFFF8] - v11) >= 0x20)
      {
        uint64_t v42 = (v27 >> 3) + 1;
        uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v28 = (char *)(v25 + v43);
        unint64_t v44 = &v11[v43];
        unint64_t v45 = (long long *)(v11 + 16);
        int v46 = &v24[8 * v18 + 16];
        uint64_t v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v48 = *v45;
          *(v46 - 1) = *(v45 - 1);
          *int v46 = v48;
          v45 += 2;
          v46 += 2;
          v47 -= 4;
        }
        while (v47);
        unint64_t v11 = v44;
        if (v42 == (v42 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_37:
          if ((char *)v13 != v16)
          {
            if (v17 - 8 >= 0x68)
            {
              uint64_t v50 = v19;
              if ((v17 & 0xFFFFFFFFFFFFFFF8) + v13 - (unint64_t)&v24[v17 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
              {
                unint64_t v51 = ((v17 - 8) >> 3) + 1;
                uint64_t v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
                uint64_t v50 = &v19[-v52];
                v25 -= v52;
                uint64_t v53 = 8 * v18 - 16;
                v54 = &v24[v53];
                v55 = (long long *)(v13 + v53);
                uint64_t v56 = v51 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v57 = *v55;
                  *(v54 - 1) = *(v55 - 1);
                  _OWORD *v54 = v57;
                  v54 -= 2;
                  v55 -= 2;
                  v56 -= 4;
                }
                while (v56);
                if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_45;
                }
              }
            }
            else
            {
              uint64_t v50 = v19;
            }
            do
            {
              uint64_t v58 = *((void *)v50 - 1);
              v50 -= 8;
              *(void *)(v25 - 8) = v58;
              v25 -= 8;
            }
            while (v50 != (char *)v13);
          }
LABEL_45:
          long long v59 = &v24[8 * v145];
          size_t v60 = v16 - v19;
          if (v60) {
            memmove(v26, v19, v60);
          }
          *((void *)this + 6) = v25;
          *((void *)this + 7) = &v26[v60];
          *((void *)this + 8) = v59;
          if (v13) {
            operator delete((void *)v13);
          }
          goto LABEL_58;
        }
      }
      do
      {
LABEL_36:
        uint64_t v49 = *(void *)v11;
        v11 += 8;
        *(void *)uint64_t v28 = v49;
        v28 += 8;
      }
      while (v28 != v26);
      goto LABEL_37;
    }
    uint64_t v29 = v16 - v19;
    uint64_t v30 = (v16 - v19) >> 3;
    if (v30 >= v14)
    {
      uint64_t v31 = &v11[8 * v14];
      uint64_t v33 = (char *)*((void *)this + 7);
    }
    else
    {
      uint64_t v31 = &v11[8 * v30];
      int64_t v32 = v10 - v31;
      if (v10 != v31)
      {
        v144 = &v11[8 * v30];
        memmove(*((void **)this + 7), v144, v10 - v31);
        uint64_t v18 = (uint64_t)&v16[-v13] >> 3;
        uint64_t v31 = v144;
        uint64_t v19 = (char *)(v13 + ((unint64_t)&v16[-v13] & 0xFFFFFFFFFFFFFFF8));
      }
      uint64_t v33 = &v16[v32];
      *((void *)this + 7) = &v16[v32];
      if (v29 < 1) {
        goto LABEL_58;
      }
    }
    uint64_t v34 = &v19[8 * v14];
    size_t v35 = v33 - v34;
    uint64_t v36 = (v33 - v34) >> 3;
    v37 = &v33[-8 * v14];
    v38 = v33;
    if (v37 < v16)
    {
      unint64_t v39 = (v17 & 0xFFFFFFFFFFFFFFF8) + v35;
      unint64_t v40 = v39 + v13 + 8;
      if ((unint64_t)v16 > v40) {
        unint64_t v40 = (unint64_t)v16;
      }
      unint64_t v41 = v40 + ~v13 - v39;
      if (v41 >= 0x58)
      {
        v38 = v33;
        if ((unint64_t)&v34[-(v17 & 0xFFFFFFFFFFFFFFF8) - v13] >= 0x20)
        {
          uint64_t v61 = (v41 >> 3) + 1;
          uint64_t v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
          v37 += v62;
          v38 = &v33[v62];
          v63 = v33 + 16;
          uint64_t v64 = (long long *)(8 * v36 + 8 * v18 + v13 + 16);
          uint64_t v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v66 = *v64;
            *(v63 - 1) = *(v64 - 1);
            _OWORD *v63 = v66;
            v63 += 2;
            v64 += 2;
            v65 -= 4;
          }
          while (v65);
          if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_54;
          }
        }
      }
      else
      {
        v38 = v33;
      }
      do
      {
        uint64_t v67 = *(void *)v37;
        v37 += 8;
        *(void *)v38 = v67;
        v38 += 8;
      }
      while (v37 < v16);
    }
LABEL_54:
    *((void *)this + 7) = v38;
    if (v33 != v34)
    {
      v68 = v19;
      memmove(&v33[-8 * v36], v19, v35);
      uint64_t v19 = v68;
    }
    if (v31 != v11) {
      memmove(v19, v11, v31 - v11);
    }
  }
LABEL_58:
  unint64_t v69 = 0;
  long long v70 = 0;
  long long v71 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  double v77 = *((double *)this + 3);
  int v78 = (int)*((double *)this + 5) - (int)v77;
  unsigned int v79 = v78 + 1;
  if (v78 != -1)
  {
    if (v78 <= -2) {
      sub_1C494A220();
    }
    size_t v80 = 4 * (v78 + 1);
    long long v70 = (int32x4_t *)operator new(v80);
    memset_pattern16(v70, &unk_1C4C3A750, v80);
    long long v71 = (int32x4_t *)operator new(v80);
    memset_pattern16(v71, &unk_1C4C3A760, v80);
    v72 = (int32x4_t *)operator new(v80);
    memset_pattern16(v72, &unk_1C4C3A750, v80);
    v73 = (int32x4_t *)operator new(v80);
    memset_pattern16(v73, &unk_1C4C3A760, v80);
    v74 = (int32x4_t *)operator new(v80);
    bzero(v74, v80);
    v75 = (int32x4_t *)operator new(v80);
    bzero(v75, v80);
    unint64_t v69 = &v74->i8[v80];
    v76 = &v75->i8[v80];
    unsigned int v79 = v78 + 1;
  }
  uint64_t v81 = *((void *)this + 9);
  uint64_t v82 = *((void *)this + 10) - v81;
  if (v82)
  {
    unint64_t v83 = v82 >> 2;
    uint64_t v84 = *((void *)this + 12);
    uint64_t v85 = (int)(v5 - v77);
    if (v83 <= 1) {
      unint64_t v86 = 1;
    }
    else {
      unint64_t v86 = v83;
    }
    if (v86 < 0x10)
    {
      unint64_t v87 = 0;
LABEL_67:
      unint64_t v88 = v86 - v87;
      v89 = (__int32 *)(v84 + 4 * v87);
      v90 = (__int32 *)(v81 + 4 * v87);
      uint64_t v91 = v87 + v85;
      v92 = &v71->i32[v91];
      v93 = &v70->i32[v91];
      do
      {
        __int32 v94 = *v90++;
        *v93++ = v94;
        __int32 v95 = *v89++;
        *v92++ = v95;
        --v88;
      }
      while (v88);
      goto LABEL_69;
    }
    unint64_t v87 = 0;
    uint64_t v113 = 4 * v85;
    v114 = &v71->i8[4 * v85];
    v115 = &v70->i8[4 * v85];
    if ((unint64_t)(v114 - v115) < 0x20) {
      goto LABEL_67;
    }
    if ((unint64_t)&v115[-v81] < 0x20) {
      goto LABEL_67;
    }
    if ((unint64_t)(v84 - (void)v115) < 0x20) {
      goto LABEL_67;
    }
    if ((unint64_t)&v114[-v81] < 0x20) {
      goto LABEL_67;
    }
    if ((unint64_t)&v114[-v84] < 0x20) {
      goto LABEL_67;
    }
    unint64_t v87 = v86 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v116 = v113 + 16;
    v117 = &v71[1].i8[v113];
    v118 = (long long *)(v84 + 16);
    v119 = &v70->i8[v116];
    v120 = (long long *)(v81 + 16);
    unint64_t v121 = v86 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      long long v122 = *v120;
      *((_OWORD *)v119 - 1) = *(v120 - 1);
      *(_OWORD *)v119 = v122;
      long long v123 = *v118;
      *((_OWORD *)v117 - 1) = *(v118 - 1);
      *(_OWORD *)v117 = v123;
      v117 += 32;
      v118 += 2;
      v119 += 32;
      v120 += 2;
      v121 -= 8;
    }
    while (v121);
    if (v86 != v87) {
      goto LABEL_67;
    }
  }
LABEL_69:
  uint64_t v96 = *((void *)a2 + 12);
  uint64_t v97 = *((void *)a2 + 13) - v96;
  if (!v97) {
    goto LABEL_76;
  }
  unint64_t v98 = v97 >> 2;
  uint64_t v99 = *((void *)a2 + 9);
  uint64_t v100 = (int)(*((double *)a2 + 3) - v77);
  if (v98 <= 1) {
    unint64_t v98 = 1;
  }
  if (v98 < 0x10)
  {
    unint64_t v101 = 0;
LABEL_74:
    unint64_t v102 = v98 - v101;
    v103 = (__int32 *)(v96 + 4 * v101);
    v104 = (__int32 *)(v99 + 4 * v101);
    uint64_t v105 = v101 + v100;
    v106 = &v73->i32[v105];
    v107 = &v72->i32[v105];
    do
    {
      __int32 v108 = *v104++;
      *v107++ = v108;
      __int32 v109 = *v103++;
      *v106++ = v109;
      --v102;
    }
    while (v102);
    goto LABEL_76;
  }
  unint64_t v101 = 0;
  uint64_t v124 = 4 * v100;
  v125 = &v73->i8[4 * v100];
  v126 = &v72->i8[4 * v100];
  if ((unint64_t)(v125 - v126) < 0x20) {
    goto LABEL_74;
  }
  if ((unint64_t)&v126[-v99] < 0x20) {
    goto LABEL_74;
  }
  if ((unint64_t)(v96 - (void)v126) < 0x20) {
    goto LABEL_74;
  }
  if ((unint64_t)&v125[-v99] < 0x20) {
    goto LABEL_74;
  }
  if ((unint64_t)&v125[-v96] < 0x20) {
    goto LABEL_74;
  }
  unint64_t v101 = v98 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v127 = v124 + 16;
  v128 = &v73[1].i8[v124];
  v129 = (long long *)(v96 + 16);
  v130 = &v72->i8[v127];
  v131 = (long long *)(v99 + 16);
  unint64_t v132 = v98 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    long long v133 = *v131;
    *((_OWORD *)v130 - 1) = *(v131 - 1);
    *(_OWORD *)v130 = v133;
    long long v134 = *v129;
    *((_OWORD *)v128 - 1) = *(v129 - 1);
    *(_OWORD *)v128 = v134;
    v128 += 32;
    v129 += 2;
    v130 += 32;
    v131 += 2;
    v132 -= 8;
  }
  while (v132);
  if (v98 != v101) {
    goto LABEL_74;
  }
LABEL_76:
  if (v78 < 0) {
    goto LABEL_84;
  }
  if (v79 >= 0x10)
  {
    uint64_t v110 = 0;
    if ((unint64_t)((char *)v75 - (char *)v74) >= 0x20
      && (unint64_t)((char *)v74 - (char *)v72) >= 0x20
      && (unint64_t)((char *)v74 - (char *)v70) >= 0x20
      && (unint64_t)((char *)v71 - (char *)v74) >= 0x20
      && (unint64_t)((char *)v73 - (char *)v74) >= 0x20
      && (unint64_t)((char *)v75 - (char *)v72) >= 0x20
      && (unint64_t)((char *)v75 - (char *)v70) >= 0x20
      && (unint64_t)((char *)v75 - (char *)v71) >= 0x20
      && (unint64_t)((char *)v75 - (char *)v73) >= 0x20)
    {
      uint64_t v110 = v79 & 0xFFFFFFF8;
      v135 = v70 + 1;
      v136 = v75 + 1;
      v137 = v72 + 1;
      v138 = v73 + 1;
      v139 = v74 + 1;
      v140 = v71 + 1;
      uint64_t v141 = v110;
      do
      {
        int32x4_t v142 = vminq_s32(*v137, *v135);
        v139[-1] = vminq_s32(v137[-1], v135[-1]);
        int32x4_t *v139 = v142;
        int32x4_t v143 = vmaxq_s32(*v140, *v138);
        v136[-1] = vmaxq_s32(v140[-1], v138[-1]);
        int32x4_t *v136 = v143;
        v135 += 2;
        v136 += 2;
        v137 += 2;
        v138 += 2;
        v139 += 2;
        v140 += 2;
        v141 -= 8;
      }
      while (v141);
      if (v110 == v79) {
        goto LABEL_84;
      }
    }
  }
  else
  {
    uint64_t v110 = 0;
  }
  do
  {
    __int32 v111 = v72->i32[v110];
    if (v111 >= v70->i32[v110]) {
      __int32 v111 = v70->i32[v110];
    }
    v74->i32[v110] = v111;
    __int32 v112 = v71->i32[v110];
    if (v112 <= v73->i32[v110]) {
      __int32 v112 = v73->i32[v110];
    }
    v75->i32[v110++] = v112;
  }
  while (v79 != v110);
LABEL_84:
  sub_1C499DEE4((void *)this + 9, v74->i8, v69, (v69 - (char *)v74) >> 2);
  sub_1C499DEE4((void *)this + 12, v75->i8, v76, (v76 - (char *)v75) >> 2);
  if (v75) {
    operator delete(v75);
  }
  if (v74) {
    operator delete(v74);
  }
  if (v73) {
    operator delete(v73);
  }
  if (v72) {
    operator delete(v72);
  }
  if (v71) {
    operator delete(v71);
  }
  if (v70)
  {
    operator delete(v70);
  }
}

void sub_1C49D1B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  operator delete(v17);
  if (v16)
  {
    operator delete(v16);
    if (v15)
    {
LABEL_8:
      operator delete(v15);
      if (v14)
      {
LABEL_9:
        operator delete(v14);
        if (!v13) {
          goto LABEL_11;
        }
        goto LABEL_10;
      }
LABEL_4:
      if (!v13) {
LABEL_11:
      }
        _Unwind_Resume(a1);
LABEL_10:
      operator delete(v13);
      goto LABEL_11;
    }
  }
  else if (v15)
  {
    goto LABEL_8;
  }
  if (v14) {
    goto LABEL_9;
  }
  goto LABEL_4;
}

BOOL Segment::sameSegment(Segment *this, const Segment *a2, int a3)
{
  double v3 = *(double *)a2;
  if (*(double *)a2 >= 1.0) {
    double v4 = *(double *)a2;
  }
  else {
    double v4 = 1.0;
  }
  if (*(double *)this >= 1.0) {
    double v5 = *(double *)this;
  }
  else {
    double v5 = 1.0;
  }
  double v6 = *((double *)a2 + 2);
  double v7 = *((double *)this + 2);
  if (v6 >= v7) {
    double v8 = this;
  }
  else {
    double v8 = a2;
  }
  if (v6 >= v7)
  {
    double v9 = a2;
  }
  else
  {
    double v3 = *(double *)this;
    double v9 = this;
  }
  double v10 = *((double *)v9 + 4);
  double v11 = *((double *)v8 + 4);
  double v12 = v3;
  if (v10 >= v11)
  {
    double v12 = v11 - (*((double *)v9 + 2) - (double)a3);
    if (v12 < 0.0) {
      double v12 = 0.0;
    }
  }
  if (v5 < v4) {
    double v4 = v5;
  }
  double v13 = v12 / v4;
  if (v13 > 0.4) {
    return 1;
  }
  double v15 = *((double *)a2 + 3);
  double v16 = *((double *)this + 3);
  if (v15 >= v16) {
    unint64_t v17 = this;
  }
  else {
    unint64_t v17 = a2;
  }
  if (v15 >= v16) {
    uint64_t v18 = (double *)a2;
  }
  else {
    uint64_t v18 = (double *)this;
  }
  double v19 = *((double *)v17 + 5);
  if (v18[5] >= v19)
  {
    double v20 = v19 - v18[3];
    if (v20 < 0.0) {
      double v20 = 0.0;
    }
    if (v10 < v11) {
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  double v20 = v18[1];
  if (v10 >= v11)
  {
LABEL_32:
    double v3 = v11 - (*((double *)v9 + 2) + -5.0);
    if (v3 < 0.0) {
      double v3 = 0.0;
    }
  }
LABEL_34:
  BOOL v21 = v13 > 0.2;
  if (v20 <= 0.0) {
    BOOL v21 = 0;
  }
  return v3 > 0.0 && v21;
}

void Segment::Segment(Segment *this, const Segment *a2)
{
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 6) = 0u;
  double v3 = (void *)((char *)this + 96);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((void *)this + 14) = 0;
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)this + 5) = *((void *)a2 + 5);
  if (this != a2)
  {
    sub_1C494ACB0((void *)this + 6, *((char **)a2 + 6), *((char **)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3);
    sub_1C499DEE4((void *)this + 9, *((char **)a2 + 9), *((char **)a2 + 10), (uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 2);
    sub_1C499DEE4(v3, *((char **)a2 + 12), *((char **)a2 + 13), (uint64_t)(*((void *)a2 + 13) - *((void *)a2 + 12)) >> 2);
  }
}

void sub_1C49D1DB4(_Unwind_Exception *exception_object)
{
  double v6 = *v3;
  if (*v3)
  {
    v1[13] = v6;
    operator delete(v6);
    double v7 = *v4;
    if (!*v4)
    {
LABEL_3:
      double v8 = *v2;
      if (!*v2) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    double v7 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[10] = v7;
  operator delete(v7);
  double v8 = *v2;
  if (!*v2) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  v1[7] = v8;
  operator delete(v8);
  _Unwind_Resume(exception_object);
}

void Segment::Segment(Segment *this, Segment *a2)
{
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 6) = 0u;
  double v3 = (void *)((char *)this + 96);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((void *)this + 14) = 0;
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)this + 5) = *((void *)a2 + 5);
  if (this != a2)
  {
    sub_1C494ACB0((void *)this + 6, *((char **)a2 + 6), *((char **)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3);
    sub_1C499DEE4((void *)this + 9, *((char **)a2 + 9), *((char **)a2 + 10), (uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 2);
    sub_1C499DEE4(v3, *((char **)a2 + 12), *((char **)a2 + 13), (uint64_t)(*((void *)a2 + 13) - *((void *)a2 + 12)) >> 2);
  }
}

void sub_1C49D1ED4(_Unwind_Exception *exception_object)
{
  double v6 = *v3;
  if (*v3)
  {
    v1[13] = v6;
    operator delete(v6);
    double v7 = *v4;
    if (!*v4)
    {
LABEL_3:
      double v8 = *v2;
      if (!*v2) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    double v7 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[10] = v7;
  operator delete(v7);
  double v8 = *v2;
  if (!*v2) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  v1[7] = v8;
  operator delete(v8);
  _Unwind_Resume(exception_object);
}

void Segment::Segment(Segment *this, CHDrawing *a2, uint64_t a3)
{
  double v5 = a2;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  unint64_t v98 = (char *)this + 96;
  uint64_t v99 = (char *)this + 72;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((void *)this + 14) = 0;
  double v6 = operator new(8uLL);
  void *v6 = a3;
  *((void *)this + 7) = v6 + 1;
  *((void *)this + 8) = v6 + 1;
  *((void *)this + 6) = v6;
  uint64_t v100 = this;
  double v7 = v5;
  uint64_t v15 = objc_msgSend_pointCountForStrokeIndex_(v7, v8, a3, v9, v10, v11);
  uint64_t v101 = a3;
  if (v15)
  {
    uint64_t v16 = 0;
    int v17 = 0x7FFFFFFF;
    int v18 = 0x80000000;
    int v19 = 0x80000000;
    int v20 = 0x7FFFFFFF;
    do
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(v7, v12, v101, v16, v13, v14);
      double v23 = (double)v20;
      if (v21 <= (double)v20) {
        double v23 = v21;
      }
      int v20 = (int)v23;
      double v24 = (double)v17;
      if (v22 <= (double)v17) {
        double v24 = v22;
      }
      int v17 = (int)v24;
      if (v21 < (double)v19) {
        double v21 = (double)v19;
      }
      int v19 = (int)v21;
      double v25 = (double)v18;
      if (v22 >= (double)v18) {
        double v25 = v22;
      }
      int v18 = (int)v25;
      ++v16;
    }
    while (v15 != v16);
    uint64_t v26 = this;
    *(double *)this = (double)(v19 - v20);
    if (v19 == v20)
    {
      *(void *)this = 0x3FF0000000000000;
      int v19 = v20 + 1;
    }
    *((double *)this + 1) = (double)(v18 - v17);
    a3 = v101;
    if (v18 == v17)
    {
      *((void *)this + 1) = 0x3FF0000000000000;
      int v18 = v17 + 1;
    }
  }
  else
  {
    __asm { FMOV            V0.2D, #1.0 }
    uint64_t v26 = this;
    *(_OWORD *)this = _Q0;
    int v20 = 0x7FFFFFFF;
    int v19 = 0x80000000;
    int v17 = 0x7FFFFFFF;
    int v18 = 0x80000000;
  }
  *((double *)v26 + 2) = (double)v20;
  *((double *)v26 + 3) = (double)v17;
  *((double *)v26 + 4) = (double)v19;
  *((double *)v26 + 5) = (double)v18;

  unint64_t v33 = (int)(*((double *)v26 + 5) - *((double *)v26 + 3) + 1.0);
  LODWORD(__p) = -1;
  uint64_t v34 = *((void *)v26 + 9);
  unint64_t v35 = (*((void *)v26 + 10) - v34) >> 2;
  if (v33 <= v35)
  {
    if (v33 < v35) {
      *((void *)v100 + 10) = v34 + 4 * v33;
    }
  }
  else
  {
    sub_1C49DA9B4((uint64_t)v99, v33 - v35, (const float *)&__p);
  }
  LODWORD(__p) = -1;
  uint64_t v36 = *((void *)v100 + 12);
  unint64_t v37 = (*((void *)v100 + 13) - v36) >> 2;
  v38 = (const char *)(v33 - v37);
  if (v33 <= v37)
  {
    if (v33 < v37) {
      *((void *)v100 + 13) = v36 + 4 * v33;
    }
  }
  else
  {
    sub_1C49DA9B4((uint64_t)v98, (unint64_t)v38, (const float *)&__p);
  }
  __p = 0;
  v103 = 0;
  unint64_t v104 = 0;
  objc_msgSend_pointForStrokeIndex_pointIndex_(v7, v38, a3, 0, v31, v32);
  double v44 = v43;
  double v46 = v45;
  for (unint64_t i = 1; ; ++i)
  {
    double v48 = v46;
    double v49 = v44;
    if (i >= objc_msgSend_pointCountForStrokeIndex_(v7, v39, a3, v40, v41, v42)) {
      break;
    }
    objc_msgSend_pointForStrokeIndex_pointIndex_(v7, v50, a3, i, v51, v52);
    double v44 = v53;
    double v46 = v54;
    v55 = (double *)__p;
    v103 = __p;
    double v56 = v53 - v49;
    double v57 = v54 - v48;
    if (vabdd_f64(v44, v49) > vabdd_f64(v46, v48))
    {
      if (v49 >= v44) {
        double v58 = v44;
      }
      else {
        double v58 = v49;
      }
      if (v49 >= v44) {
        double v59 = v49;
      }
      else {
        double v59 = v44;
      }
      if (v58 > v59) {
        continue;
      }
      size_t v60 = (char *)v104;
      uint64_t v61 = (double *)__p;
      double v62 = v57 / v56;
      while (1)
      {
        while (1)
        {
          double v63 = v48 + (v58 - v49) * v62;
          if (v61 >= (double *)v60) {
            break;
          }
          *uint64_t v61 = v58;
          v61[1] = v63;
          v61 += 2;
          double v58 = v58 + 1.0;
          if (v58 > v59) {
            goto LABEL_88;
          }
        }
        uint64_t v64 = ((char *)v61 - (char *)v55) >> 4;
        unint64_t v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 60) {
          goto LABEL_118;
        }
        if ((v60 - (char *)v55) >> 3 > v65) {
          unint64_t v65 = (v60 - (char *)v55) >> 3;
        }
        if ((unint64_t)(v60 - (char *)v55) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v66 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v66 = v65;
        }
        if (v66)
        {
          if (v66 >> 60) {
            goto LABEL_119;
          }
          uint64_t v67 = (char *)operator new(16 * v66);
          v68 = (double *)&v67[16 * v64];
          double *v68 = v58;
          v68[1] = v63;
          if (v61 == v55)
          {
LABEL_55:
            long long v70 = v68;
            size_t v60 = &v67[16 * v66];
            uint64_t v61 = v68 + 2;
            if (!v55) {
              goto LABEL_52;
            }
            goto LABEL_51;
          }
        }
        else
        {
          uint64_t v67 = 0;
          v68 = (double *)(16 * v64);
          double *v68 = v58;
          v68[1] = v63;
          if (v61 == v55) {
            goto LABEL_55;
          }
        }
        unint64_t v69 = v68;
        do
        {
          long long v70 = v69 - 2;
          *((_OWORD *)v69 - 1) = *((_OWORD *)v61 - 1);
          v61 -= 2;
          v69 -= 2;
        }
        while (v61 != v55);
        size_t v60 = &v67[16 * v66];
        uint64_t v61 = v68 + 2;
        if (!v55) {
          goto LABEL_52;
        }
LABEL_51:
        operator delete(v55);
LABEL_52:
        v55 = v70;
        double v58 = v58 + 1.0;
        if (v58 > v59) {
          goto LABEL_88;
        }
      }
    }
    if (v48 >= v46) {
      double v71 = v48;
    }
    else {
      double v71 = v46;
    }
    if (v57 != 0.0)
    {
      if (v48 >= v46) {
        double v73 = v46;
      }
      else {
        double v73 = v48;
      }
      if (v73 > v71) {
        continue;
      }
      size_t v60 = (char *)v104;
      uint64_t v61 = (double *)__p;
      double v74 = v56 / v57;
      while (1)
      {
        while (1)
        {
          double v75 = v49 + (v73 - v48) * v74;
          if (v61 >= (double *)v60) {
            break;
          }
          *uint64_t v61 = v75;
          v61[1] = v73;
          v61 += 2;
          double v73 = v73 + 1.0;
          if (v73 > v71) {
            goto LABEL_88;
          }
        }
        uint64_t v76 = ((char *)v61 - (char *)v55) >> 4;
        unint64_t v77 = v76 + 1;
        if ((unint64_t)(v76 + 1) >> 60)
        {
LABEL_118:
          v103 = v61;
          unint64_t v104 = (unint64_t)v60;
          __p = v55;
          sub_1C494A220();
        }
        if ((v60 - (char *)v55) >> 3 > v77) {
          unint64_t v77 = (v60 - (char *)v55) >> 3;
        }
        if ((unint64_t)(v60 - (char *)v55) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v78 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v78 = v77;
        }
        if (v78)
        {
          if (v78 >> 60)
          {
LABEL_119:
            v103 = v61;
            unint64_t v104 = (unint64_t)v60;
            __p = v55;
            goto LABEL_120;
          }
          unsigned int v79 = (char *)operator new(16 * v78);
          size_t v80 = (double *)&v79[16 * v76];
          *size_t v80 = v75;
          v80[1] = v73;
          if (v61 == v55)
          {
LABEL_86:
            uint64_t v82 = v80;
            size_t v60 = &v79[16 * v78];
            uint64_t v61 = v80 + 2;
            if (!v55) {
              goto LABEL_83;
            }
            goto LABEL_82;
          }
        }
        else
        {
          unsigned int v79 = 0;
          size_t v80 = (double *)(16 * v76);
          *size_t v80 = v75;
          v80[1] = v73;
          if (v61 == v55) {
            goto LABEL_86;
          }
        }
        uint64_t v81 = v80;
        do
        {
          uint64_t v82 = v81 - 2;
          *((_OWORD *)v81 - 1) = *((_OWORD *)v61 - 1);
          v61 -= 2;
          v81 -= 2;
        }
        while (v61 != v55);
        size_t v60 = &v79[16 * v78];
        uint64_t v61 = v80 + 2;
        if (!v55) {
          goto LABEL_83;
        }
LABEL_82:
        operator delete(v55);
LABEL_83:
        v55 = v82;
        double v73 = v73 + 1.0;
        if (v73 > v71)
        {
LABEL_88:
          v103 = v61;
          unint64_t v104 = (unint64_t)v60;
          __p = v55;
          uint64_t v72 = (char *)v61 - (char *)v55;
          _ZF = v61 == v55;
          a3 = v101;
          if (!_ZF) {
            goto LABEL_100;
          }
          goto LABEL_26;
        }
      }
    }
    if ((unint64_t)__p < v104)
    {
      *(double *)__p = v44;
      v55[1] = v46;
      v103 = v55 + 2;
      uint64_t v72 = 16;
      a3 = v101;
      goto LABEL_100;
    }
    unint64_t v83 = (uint64_t)(v104 - (void)__p) >> 3;
    if (v83 <= 1) {
      unint64_t v83 = 1;
    }
    if (v104 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v84 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v84 = v83;
    }
    if (v84 >> 60) {
LABEL_120:
    }
      sub_1C4949AA8();
    uint64_t v85 = (double *)operator new(16 * v84);
    *uint64_t v85 = v44;
    v85[1] = v46;
    __p = v85;
    unint64_t v104 = (unint64_t)&v85[2 * v84];
    if (v55) {
      operator delete(v55);
    }
    v55 = v85;
    v103 = v85 + 2;
    uint64_t v72 = 16;
    a3 = v101;
LABEL_100:
    unint64_t v86 = v72 >> 4;
    double v87 = *((double *)v100 + 3);
    uint64_t v88 = *((void *)v100 + 9);
    uint64_t v89 = *((void *)v100 + 12);
    if (v86 <= 1) {
      unint64_t v86 = 1;
    }
    v90 = v55 + 1;
    do
    {
      int v91 = (int)((double)(int)*v90 - v87);
      int v92 = (int)*(v90 - 1);
      uint64_t v93 = 4 * (v91 & ~(v91 >> 31));
      int v94 = *(_DWORD *)(v88 + v93);
      _ZF = v94 > v92 || v94 == -1;
      if (_ZF) {
        int v94 = (int)*(v90 - 1);
      }
      int v96 = *(_DWORD *)(v89 + v93);
      if (v96 >= v92 && v96 != -1) {
        int v92 = *(_DWORD *)(v89 + v93);
      }
      *(_DWORD *)(v88 + v93) = v94;
      *(_DWORD *)(v89 + v93) = v92;
      v90 += 2;
      --v86;
    }
    while (v86);
LABEL_26:
    ;
  }
  if (__p) {
    operator delete(__p);
  }
}

void sub_1C49D25A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, void **a13, void *a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18)
{
  int v20 = *a12;
  if (*a12)
  {
    a14[13] = v20;
    operator delete(v20);
    double v21 = *a13;
    if (!*a13)
    {
LABEL_3:
      double v22 = *a11;
      if (!*a11) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    double v21 = *a13;
    if (!*a13) {
      goto LABEL_3;
    }
  }
  a14[10] = v21;
  operator delete(v21);
  double v22 = *a11;
  if (!*a11)
  {
LABEL_4:

    _Unwind_Resume(a1);
  }
LABEL_7:
  a14[7] = v22;
  operator delete(v22);

  _Unwind_Resume(a1);
}

unint64_t sub_1C49D26D0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  v235 = 0;
  uint64_t v236 = 0;
  uint64_t v233 = 0;
  v234 = &v235;
  v232 = 0;
  double v6 = operator new(0x30uLL);
  void *v6 = 0;
  v6[1] = 0;
  v6[4] = 0;
  v6[5] = 0;
  v6[2] = &v235;
  v234 = v6;
  v235 = v6;
  *((unsigned char *)v6 + 24) = 1;
  uint64_t v236 = 1;
  double v7 = operator new(0x30uLL);
  v7[4] = 0;
  v7[5] = 0;
  *double v7 = 0;
  v7[1] = 0;
  v7[2] = &v232;
  v231 = v7;
  v232 = v7;
  sub_1C4949FD4(v7, v7);
  ++v233;
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  v229 = 0;
  uint64_t v230 = 0;
  v228 = &v229;
  uint64_t v10 = v8 - v9;
  if (!v10)
  {
    v209 = 0;
    unint64_t v11 = 0;
    goto LABEL_375;
  }
  uint64_t v218 = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  unint64_t v13 = v10 / 24;
  v221 = (void *)(a1 + 128);
  if (v13 <= 1) {
    unint64_t v13 = 1;
  }
  unint64_t v212 = v13;
  unint64_t v14 = 1;
  uint64_t v213 = a3;
  while (2)
  {
    uint64_t v15 = *(void *)(*a2 + 24 * v12 + 8) - *(void *)(*a2 + 24 * v12);
    if (!v15) {
      goto LABEL_5;
    }
    uint64_t v16 = 0;
    unint64_t v17 = v15 >> 4;
    uint64_t v215 = v12;
    unint64_t v216 = v17 - 1;
    if (v17 <= 1) {
      unint64_t v17 = 1;
    }
    unint64_t v214 = v17;
    do
    {
LABEL_11:
      int v18 = (unint64_t *)(*(void *)(*a2 + 24 * v12) + 16 * v16);
      unint64_t v20 = *v18;
      unint64_t v19 = v18[1];
      double v21 = v235;
      if (v235)
      {
        double v22 = &v235;
        double v23 = v235;
        do
        {
          double v24 = v23;
          double v25 = v22;
          unint64_t v26 = v23[4];
          if (v26 >= v20) {
            double v22 = (void **)v23;
          }
          else {
            ++v23;
          }
          double v23 = (void *)*v23;
        }
        while (v23);
        if (v22 != &v235)
        {
          if (v26 < v20) {
            double v24 = v25;
          }
          if (v20 >= v24[4])
          {
            do
            {
              while (1)
              {
                double v43 = v21;
                unint64_t v44 = v21[4];
                if (v20 < v44) {
                  break;
                }
                if (v44 >= v20)
                {
                  unint64_t v223 = v21[5];
                  unint64_t v64 = v14;
                  unint64_t v65 = v19 + 1;
                  unint64_t v66 = v235;
                  unint64_t v225 = v20;
                  goto LABEL_91;
                }
                double v21 = (void *)v21[1];
                if (!v21)
                {
                  double v45 = v43 + 1;
                  goto LABEL_279;
                }
              }
              double v21 = (void *)*v21;
            }
            while (*v43);
            double v45 = v43;
LABEL_279:
            v176 = operator new(0x30uLL);
            v176[4] = v20;
            v176[5] = 0;
            void *v176 = 0;
            v176[1] = 0;
            v176[2] = v43;
            *double v45 = v176;
            if (*v234)
            {
              v234 = (void *)*v234;
              v176 = (void *)*v45;
            }
            v177 = v235;
            *((unsigned char *)v176 + 24) = v176 == v235;
            if (v176 != v177)
            {
              do
              {
                uint64_t v178 = v176[2];
                if (*(unsigned char *)(v178 + 24)) {
                  break;
                }
                v179 = *(void **)(v178 + 16);
                uint64_t v180 = *v179;
                if (*v179 == v178)
                {
                  uint64_t v183 = v179[1];
                  if (!v183 || (int v184 = *(unsigned __int8 *)(v183 + 24), v181 = (unsigned char *)(v183 + 24), v184))
                  {
                    if (*(void **)v178 == v176)
                    {
                      *(unsigned char *)(v178 + 24) = 1;
                      *((unsigned char *)v179 + 24) = 0;
                      uint64_t v187 = *(void *)(v178 + 8);
                      void *v179 = v187;
                      if (v187) {
                        goto LABEL_295;
                      }
                    }
                    else
                    {
                      v185 = *(uint64_t **)(v178 + 8);
                      uint64_t v186 = *v185;
                      *(void *)(v178 + 8) = *v185;
                      if (v186)
                      {
                        *(void *)(v186 + 16) = v178;
                        v179 = *(void **)(v178 + 16);
                      }
                      v185[2] = (uint64_t)v179;
                      *(void *)(*(void *)(v178 + 16) + 8 * (**(void **)(v178 + 16) != v178)) = v185;
                      uint64_t *v185 = v178;
                      *(void *)(v178 + 16) = v185;
                      v179 = (void *)v185[2];
                      uint64_t v178 = *v179;
                      *((unsigned char *)v185 + 24) = 1;
                      *((unsigned char *)v179 + 24) = 0;
                      uint64_t v187 = *(void *)(v178 + 8);
                      void *v179 = v187;
                      if (v187) {
LABEL_295:
                      }
                        *(void *)(v187 + 16) = v179;
                    }
                    *(void *)(v178 + 16) = v179[2];
                    *(void *)(v179[2] + 8 * (*(void *)v179[2] != (void)v179)) = v178;
                    *(void *)(v178 + 8) = v179;
LABEL_352:
                    v179[2] = v178;
                    break;
                  }
                }
                else if (!v180 || (int v182 = *(unsigned __int8 *)(v180 + 24), v181 = (unsigned char *)(v180 + 24), v182))
                {
                  if (*(void **)v178 == v176)
                  {
                    uint64_t v207 = v176[1];
                    *(void *)uint64_t v178 = v207;
                    if (v207)
                    {
                      *(void *)(v207 + 16) = v178;
                      v179 = *(void **)(v178 + 16);
                    }
                    v176[2] = v179;
                    *(void *)(*(void *)(v178 + 16) + 8 * (**(void **)(v178 + 16) != v178)) = v176;
                    v176[1] = v178;
                    *(void *)(v178 + 16) = v176;
                    v179 = (void *)v176[2];
                    *((unsigned char *)v176 + 24) = 1;
                    *((unsigned char *)v179 + 24) = 0;
                    uint64_t v178 = v179[1];
                    v205 = *(void **)v178;
                    v179[1] = *(void *)v178;
                    if (v205) {
LABEL_350:
                    }
                      v205[2] = v179;
                  }
                  else
                  {
                    *(unsigned char *)(v178 + 24) = 1;
                    *((unsigned char *)v179 + 24) = 0;
                    uint64_t v178 = v179[1];
                    v205 = *(void **)v178;
                    v179[1] = *(void *)v178;
                    if (v205) {
                      goto LABEL_350;
                    }
                  }
                  *(void *)(v178 + 16) = v179[2];
                  *(void *)(v179[2] + 8 * (*(void *)v179[2] != (void)v179)) = v178;
                  *(void *)uint64_t v178 = v179;
                  goto LABEL_352;
                }
                *(unsigned char *)(v178 + 24) = 1;
                v176 = v179;
                *((unsigned char *)v179 + 24) = v179 == v177;
                unsigned char *v181 = 1;
              }
              while (v179 != v177);
            }
            unint64_t v223 = 0;
            unint64_t v66 = v235;
            ++v236;
            unint64_t v64 = v14;
            unint64_t v65 = v19 + 1;
            unint64_t v225 = v20;
            if (!v235) {
              goto LABEL_100;
            }
LABEL_91:
            v68 = &v235;
            unint64_t v69 = v66;
            do
            {
              long long v70 = v69;
              double v71 = v68;
              unint64_t v72 = v69[4];
              if (v72 >= v65) {
                v68 = (void **)v69;
              }
              else {
                ++v69;
              }
              unint64_t v69 = (void *)*v69;
            }
            while (v69);
            if (v68 != &v235)
            {
              if (v72 < v65) {
                long long v70 = v71;
              }
              if (v65 >= v70[4])
              {
                uint64_t v90 = v16;
                do
                {
                  while (1)
                  {
                    int v91 = v66;
                    unint64_t v92 = v66[4];
                    if (v65 < v92) {
                      break;
                    }
                    if (v92 >= v65)
                    {
                      unint64_t v219 = v64;
                      unint64_t v78 = v66[5];
                      uint64_t v16 = v90;
                      goto LABEL_171;
                    }
                    unint64_t v66 = (void *)v66[1];
                    if (!v66)
                    {
                      uint64_t v93 = v91 + 1;
                      goto LABEL_299;
                    }
                  }
                  unint64_t v66 = (void *)*v66;
                }
                while (*v91);
                uint64_t v93 = v91;
LABEL_299:
                v188 = operator new(0x30uLL);
                v188[4] = v65;
                v188[5] = 0;
                void *v188 = 0;
                v188[1] = 0;
                v188[2] = v91;
                void *v93 = v188;
                if (*v234)
                {
                  v234 = (void *)*v234;
                  v188 = (void *)*v93;
                }
                v189 = v235;
                *((unsigned char *)v188 + 24) = v188 == v235;
                uint64_t v16 = v90;
                if (v188 != v189)
                {
                  do
                  {
                    uint64_t v190 = v188[2];
                    if (*(unsigned char *)(v190 + 24)) {
                      break;
                    }
                    v191 = *(void **)(v190 + 16);
                    uint64_t v192 = *v191;
                    if (*v191 == v190)
                    {
                      uint64_t v195 = v191[1];
                      if (!v195 || (int v196 = *(unsigned __int8 *)(v195 + 24), v193 = (unsigned char *)(v195 + 24), v196))
                      {
                        if (*(void **)v190 == v188)
                        {
                          *(unsigned char *)(v190 + 24) = 1;
                          *((unsigned char *)v191 + 24) = 0;
                          uint64_t v199 = *(void *)(v190 + 8);
                          void *v191 = v199;
                          if (v199) {
                            goto LABEL_315;
                          }
                        }
                        else
                        {
                          v197 = *(uint64_t **)(v190 + 8);
                          uint64_t v198 = *v197;
                          *(void *)(v190 + 8) = *v197;
                          if (v198)
                          {
                            *(void *)(v198 + 16) = v190;
                            v191 = *(void **)(v190 + 16);
                          }
                          v197[2] = (uint64_t)v191;
                          *(void *)(*(void *)(v190 + 16) + 8 * (**(void **)(v190 + 16) != v190)) = v197;
                          uint64_t *v197 = v190;
                          *(void *)(v190 + 16) = v197;
                          v191 = (void *)v197[2];
                          uint64_t v190 = *v191;
                          *((unsigned char *)v197 + 24) = 1;
                          *((unsigned char *)v191 + 24) = 0;
                          uint64_t v199 = *(void *)(v190 + 8);
                          void *v191 = v199;
                          if (v199) {
LABEL_315:
                          }
                            *(void *)(v199 + 16) = v191;
                        }
                        *(void *)(v190 + 16) = v191[2];
                        *(void *)(v191[2] + 8 * (*(void *)v191[2] != (void)v191)) = v190;
                        *(void *)(v190 + 8) = v191;
LABEL_359:
                        v191[2] = v190;
                        break;
                      }
                    }
                    else if (!v192 || (int v194 = *(unsigned __int8 *)(v192 + 24), v193 = (unsigned char *)(v192 + 24), v194))
                    {
                      if (*(void **)v190 == v188)
                      {
                        uint64_t v208 = v188[1];
                        *(void *)uint64_t v190 = v208;
                        if (v208)
                        {
                          *(void *)(v208 + 16) = v190;
                          v191 = *(void **)(v190 + 16);
                        }
                        v188[2] = v191;
                        *(void *)(*(void *)(v190 + 16) + 8 * (**(void **)(v190 + 16) != v190)) = v188;
                        v188[1] = v190;
                        *(void *)(v190 + 16) = v188;
                        v191 = (void *)v188[2];
                        *((unsigned char *)v188 + 24) = 1;
                        *((unsigned char *)v191 + 24) = 0;
                        uint64_t v190 = v191[1];
                        v206 = *(void **)v190;
                        v191[1] = *(void *)v190;
                        if (v206) {
LABEL_357:
                        }
                          v206[2] = v191;
                      }
                      else
                      {
                        *(unsigned char *)(v190 + 24) = 1;
                        *((unsigned char *)v191 + 24) = 0;
                        uint64_t v190 = v191[1];
                        v206 = *(void **)v190;
                        v191[1] = *(void *)v190;
                        if (v206) {
                          goto LABEL_357;
                        }
                      }
                      *(void *)(v190 + 16) = v191[2];
                      *(void *)(v191[2] + 8 * (*(void *)v191[2] != (void)v191)) = v190;
                      *(void *)uint64_t v190 = v191;
                      goto LABEL_359;
                    }
                    *(unsigned char *)(v190 + 24) = 1;
                    v188 = v191;
                    *((unsigned char *)v191 + 24) = v191 == v189;
                    unsigned char *v193 = 1;
                  }
                  while (v191 != v189);
                }
                ++v236;
                unint64_t v219 = v64;
                unint64_t v78 = 0;
                goto LABEL_171;
              }
            }
            goto LABEL_100;
          }
        }
      }
      unint64_t v27 = operator new(0x30uLL);
      v27[4] = v20;
      v27[5] = v14;
      uint64_t v28 = &v235;
      uint64_t v29 = &v235;
      if (v21)
      {
        do
        {
          while (1)
          {
            uint64_t v29 = (void **)v21;
            unint64_t v32 = v21[4];
            if (v20 >= v32) {
              break;
            }
            double v21 = (void *)*v21;
            uint64_t v28 = v29;
            if (!*v29) {
              goto LABEL_22;
            }
          }
          if (v32 >= v20)
          {
            operator delete(v27);
            goto LABEL_58;
          }
          double v21 = (void *)v21[1];
        }
        while (v21);
        uint64_t v28 = v29 + 1;
        *unint64_t v27 = 0;
        v27[1] = 0;
        v27[2] = v29;
        v29[1] = v27;
        uint64_t v30 = (void *)*v234;
        if (*v234) {
          goto LABEL_23;
        }
      }
      else
      {
LABEL_22:
        *unint64_t v27 = 0;
        v27[1] = 0;
        v27[2] = v29;
        *uint64_t v28 = v27;
        uint64_t v30 = (void *)*v234;
        if (*v234)
        {
LABEL_23:
          v234 = v30;
          unint64_t v27 = (void *)*v28;
        }
      }
      uint64_t v31 = v235;
      *((unsigned char *)v27 + 24) = v27 == v235;
      if (v27 != v31)
      {
        do
        {
          uint64_t v33 = v27[2];
          if (*(unsigned char *)(v33 + 24)) {
            break;
          }
          uint64_t v34 = *(void **)(v33 + 16);
          uint64_t v35 = *v34;
          if (*v34 == v33)
          {
            uint64_t v38 = v34[1];
            if (!v38 || (v39 = *(unsigned __int8 *)(v38 + 24), uint64_t v36 = (unsigned char *)(v38 + 24), v39))
            {
              if (*(void **)v33 == v27)
              {
                *(unsigned char *)(v33 + 24) = 1;
                *((unsigned char *)v34 + 24) = 0;
                uint64_t v42 = *(void *)(v33 + 8);
                void *v34 = v42;
                if (v42) {
                  goto LABEL_44;
                }
              }
              else
              {
                uint64_t v40 = *(uint64_t **)(v33 + 8);
                uint64_t v41 = *v40;
                *(void *)(v33 + 8) = *v40;
                if (v41)
                {
                  *(void *)(v41 + 16) = v33;
                  uint64_t v34 = *(void **)(v33 + 16);
                }
                v40[2] = (uint64_t)v34;
                *(void *)(*(void *)(v33 + 16) + 8 * (**(void **)(v33 + 16) != v33)) = v40;
                uint64_t *v40 = v33;
                *(void *)(v33 + 16) = v40;
                uint64_t v34 = (void *)v40[2];
                uint64_t v33 = *v34;
                *((unsigned char *)v40 + 24) = 1;
                *((unsigned char *)v34 + 24) = 0;
                uint64_t v42 = *(void *)(v33 + 8);
                void *v34 = v42;
                if (v42) {
LABEL_44:
                }
                  *(void *)(v42 + 16) = v34;
              }
              *(void *)(v33 + 16) = v34[2];
              *(void *)(v34[2] + 8 * (*(void *)v34[2] != (void)v34)) = v33;
              *(void *)(v33 + 8) = v34;
LABEL_56:
              v34[2] = v33;
              break;
            }
          }
          else if (!v35 || (v37 = *(unsigned __int8 *)(v35 + 24), uint64_t v36 = (unsigned char *)(v35 + 24), v37))
          {
            if (*(void **)v33 == v27)
            {
              uint64_t v200 = v27[1];
              *(void *)uint64_t v33 = v200;
              if (v200)
              {
                *(void *)(v200 + 16) = v33;
                uint64_t v34 = *(void **)(v33 + 16);
              }
              v27[2] = v34;
              *(void *)(*(void *)(v33 + 16) + 8 * (**(void **)(v33 + 16) != v33)) = v27;
              v27[1] = v33;
              *(void *)(v33 + 16) = v27;
              uint64_t v34 = (void *)v27[2];
              *((unsigned char *)v27 + 24) = 1;
              *((unsigned char *)v34 + 24) = 0;
              uint64_t v33 = v34[1];
              double v46 = *(void **)v33;
              v34[1] = *(void *)v33;
              if (v46) {
LABEL_54:
              }
                v46[2] = v34;
            }
            else
            {
              *(unsigned char *)(v33 + 24) = 1;
              *((unsigned char *)v34 + 24) = 0;
              uint64_t v33 = v34[1];
              double v46 = *(void **)v33;
              v34[1] = *(void *)v33;
              if (v46) {
                goto LABEL_54;
              }
            }
            *(void *)(v33 + 16) = v34[2];
            *(void *)(v34[2] + 8 * (*(void *)v34[2] != (void)v34)) = v33;
            *(void *)uint64_t v33 = v34;
            goto LABEL_56;
          }
          *(unsigned char *)(v33 + 24) = 1;
          unint64_t v27 = v34;
          *((unsigned char *)v34 + 24) = v34 == v31;
          *uint64_t v36 = 1;
        }
        while (v34 != v31);
      }
      ++v236;
LABEL_58:
      uint64_t v47 = operator new(0x30uLL);
      v47[4] = v14;
      v47[5] = v20;
      double v48 = &v232;
      double v49 = &v232;
      uint64_t v50 = v232;
      if (v232)
      {
        while (1)
        {
          while (1)
          {
            double v48 = (void **)v50;
            unint64_t v53 = v50[4];
            if (v14 >= v53) {
              break;
            }
            uint64_t v50 = (void *)*v50;
            double v49 = v48;
            if (!*v48) {
              goto LABEL_59;
            }
          }
          if (v53 >= v14) {
            break;
          }
          uint64_t v50 = (void *)v50[1];
          if (!v50)
          {
            double v49 = v48 + 1;
            *uint64_t v47 = 0;
            v47[1] = 0;
            v47[2] = v48;
            v48[1] = v47;
            uint64_t v51 = (void *)*v231;
            if (*v231) {
              goto LABEL_60;
            }
            goto LABEL_61;
          }
        }
        operator delete(v47);
        unint64_t v64 = v14 + 1;
        unint64_t v223 = v14;
        unint64_t v65 = v19 + 1;
        unint64_t v66 = v235;
        unint64_t v225 = v20;
        if (v235) {
          goto LABEL_91;
        }
        goto LABEL_100;
      }
LABEL_59:
      *uint64_t v47 = 0;
      v47[1] = 0;
      v47[2] = v48;
      *double v49 = v47;
      uint64_t v51 = (void *)*v231;
      if (*v231)
      {
LABEL_60:
        v231 = v51;
        uint64_t v47 = (void *)*v49;
      }
LABEL_61:
      uint64_t v52 = v232;
      *((unsigned char *)v47 + 24) = v47 == v232;
      if (v47 != v52)
      {
        do
        {
          uint64_t v54 = v47[2];
          if (*(unsigned char *)(v54 + 24)) {
            break;
          }
          v55 = *(void **)(v54 + 16);
          uint64_t v56 = *v55;
          if (*v55 == v54)
          {
            uint64_t v59 = v55[1];
            if (!v59 || (int v60 = *(unsigned __int8 *)(v59 + 24), v57 = (unsigned char *)(v59 + 24), v60))
            {
              if (*(void **)v54 == v47)
              {
                *(unsigned char *)(v54 + 24) = 1;
                *((unsigned char *)v55 + 24) = 0;
                uint64_t v63 = *(void *)(v54 + 8);
                void *v55 = v63;
                if (v63) {
                  goto LABEL_81;
                }
              }
              else
              {
                uint64_t v61 = *(uint64_t **)(v54 + 8);
                uint64_t v62 = *v61;
                *(void *)(v54 + 8) = *v61;
                if (v62)
                {
                  *(void *)(v62 + 16) = v54;
                  v55 = *(void **)(v54 + 16);
                }
                v61[2] = (uint64_t)v55;
                *(void *)(*(void *)(v54 + 16) + 8 * (**(void **)(v54 + 16) != v54)) = v61;
                *uint64_t v61 = v54;
                *(void *)(v54 + 16) = v61;
                v55 = (void *)v61[2];
                uint64_t v54 = *v55;
                *((unsigned char *)v61 + 24) = 1;
                *((unsigned char *)v55 + 24) = 0;
                uint64_t v63 = *(void *)(v54 + 8);
                void *v55 = v63;
                if (v63) {
LABEL_81:
                }
                  *(void *)(v63 + 16) = v55;
              }
              *(void *)(v54 + 16) = v55[2];
              *(void *)(v55[2] + 8 * (*(void *)v55[2] != (void)v55)) = v54;
              *(void *)(v54 + 8) = v55;
LABEL_89:
              v55[2] = v54;
              break;
            }
          }
          else if (!v56 || (int v58 = *(unsigned __int8 *)(v56 + 24), v57 = (unsigned char *)(v56 + 24), v58))
          {
            if (*(void **)v54 == v47)
            {
              uint64_t v201 = v47[1];
              *(void *)uint64_t v54 = v201;
              if (v201)
              {
                *(void *)(v201 + 16) = v54;
                v55 = *(void **)(v54 + 16);
              }
              v47[2] = v55;
              *(void *)(*(void *)(v54 + 16) + 8 * (**(void **)(v54 + 16) != v54)) = v47;
              v47[1] = v54;
              *(void *)(v54 + 16) = v47;
              v55 = (void *)v47[2];
              *((unsigned char *)v47 + 24) = 1;
              *((unsigned char *)v55 + 24) = 0;
              uint64_t v54 = v55[1];
              uint64_t v67 = *(void **)v54;
              v55[1] = *(void *)v54;
              if (v67) {
LABEL_87:
              }
                v67[2] = v55;
            }
            else
            {
              *(unsigned char *)(v54 + 24) = 1;
              *((unsigned char *)v55 + 24) = 0;
              uint64_t v54 = v55[1];
              uint64_t v67 = *(void **)v54;
              v55[1] = *(void *)v54;
              if (v67) {
                goto LABEL_87;
              }
            }
            *(void *)(v54 + 16) = v55[2];
            *(void *)(v55[2] + 8 * (*(void *)v55[2] != (void)v55)) = v54;
            *(void *)uint64_t v54 = v55;
            goto LABEL_89;
          }
          *(unsigned char *)(v54 + 24) = 1;
          uint64_t v47 = v55;
          *((unsigned char *)v55 + 24) = v55 == v52;
          unsigned char *v57 = 1;
        }
        while (v55 != v52);
      }
      ++v233;
      unint64_t v64 = v14 + 1;
      unint64_t v223 = v14;
      unint64_t v65 = v19 + 1;
      unint64_t v66 = v235;
      unint64_t v225 = v20;
      if (v235) {
        goto LABEL_91;
      }
LABEL_100:
      double v73 = operator new(0x30uLL);
      v73[4] = v65;
      v73[5] = v64;
      double v74 = &v235;
      double v75 = &v235;
      if (v66)
      {
        do
        {
          while (1)
          {
            double v75 = (void **)v66;
            unint64_t v79 = v66[4];
            if (v65 >= v79) {
              break;
            }
            unint64_t v66 = (void *)*v66;
            double v74 = v75;
            if (!*v75) {
              goto LABEL_101;
            }
          }
          if (v79 >= v65)
          {
            operator delete(v73);
            unint64_t v78 = v64;
            goto LABEL_138;
          }
          unint64_t v66 = (void *)v66[1];
        }
        while (v66);
        double v74 = v75 + 1;
        void *v73 = 0;
        v73[1] = 0;
        v73[2] = v75;
        v75[1] = v73;
        uint64_t v76 = (void *)*v234;
        if (*v234) {
          goto LABEL_102;
        }
      }
      else
      {
LABEL_101:
        void *v73 = 0;
        v73[1] = 0;
        v73[2] = v75;
        void *v74 = v73;
        uint64_t v76 = (void *)*v234;
        if (*v234)
        {
LABEL_102:
          v234 = v76;
          double v73 = (void *)*v74;
        }
      }
      unint64_t v77 = v235;
      *((unsigned char *)v73 + 24) = v73 == v235;
      unint64_t v78 = v64;
      if (v73 != v77)
      {
        do
        {
          uint64_t v80 = v73[2];
          if (*(unsigned char *)(v80 + 24)) {
            break;
          }
          uint64_t v81 = *(void **)(v80 + 16);
          uint64_t v82 = *v81;
          if (*v81 == v80)
          {
            uint64_t v85 = v81[1];
            if (!v85 || (v86 = *(unsigned __int8 *)(v85 + 24), unint64_t v83 = (unsigned char *)(v85 + 24), v86))
            {
              if (*(void **)v80 == v73)
              {
                *(unsigned char *)(v80 + 24) = 1;
                *((unsigned char *)v81 + 24) = 0;
                uint64_t v89 = *(void *)(v80 + 8);
                *uint64_t v81 = v89;
                if (v89) {
                  goto LABEL_123;
                }
              }
              else
              {
                double v87 = *(uint64_t **)(v80 + 8);
                uint64_t v88 = *v87;
                *(void *)(v80 + 8) = *v87;
                if (v88)
                {
                  *(void *)(v88 + 16) = v80;
                  uint64_t v81 = *(void **)(v80 + 16);
                }
                v87[2] = (uint64_t)v81;
                *(void *)(*(void *)(v80 + 16) + 8 * (**(void **)(v80 + 16) != v80)) = v87;
                *double v87 = v80;
                *(void *)(v80 + 16) = v87;
                uint64_t v81 = (void *)v87[2];
                uint64_t v80 = *v81;
                *((unsigned char *)v87 + 24) = 1;
                *((unsigned char *)v81 + 24) = 0;
                uint64_t v89 = *(void *)(v80 + 8);
                *uint64_t v81 = v89;
                if (v89) {
LABEL_123:
                }
                  *(void *)(v89 + 16) = v81;
              }
              *(void *)(v80 + 16) = v81[2];
              *(void *)(v81[2] + 8 * (*(void *)v81[2] != (void)v81)) = v80;
              *(void *)(v80 + 8) = v81;
LABEL_136:
              v81[2] = v80;
              break;
            }
          }
          else if (!v82 || (v84 = *(unsigned __int8 *)(v82 + 24), unint64_t v83 = (unsigned char *)(v82 + 24), v84))
          {
            if (*(void **)v80 == v73)
            {
              uint64_t v202 = v73[1];
              *(void *)uint64_t v80 = v202;
              if (v202)
              {
                *(void *)(v202 + 16) = v80;
                uint64_t v81 = *(void **)(v80 + 16);
              }
              v73[2] = v81;
              *(void *)(*(void *)(v80 + 16) + 8 * (**(void **)(v80 + 16) != v80)) = v73;
              v73[1] = v80;
              *(void *)(v80 + 16) = v73;
              uint64_t v81 = (void *)v73[2];
              *((unsigned char *)v73 + 24) = 1;
              *((unsigned char *)v81 + 24) = 0;
              uint64_t v80 = v81[1];
              int v94 = *(void **)v80;
              v81[1] = *(void *)v80;
              if (v94) {
LABEL_134:
              }
                v94[2] = v81;
            }
            else
            {
              *(unsigned char *)(v80 + 24) = 1;
              *((unsigned char *)v81 + 24) = 0;
              uint64_t v80 = v81[1];
              int v94 = *(void **)v80;
              v81[1] = *(void *)v80;
              if (v94) {
                goto LABEL_134;
              }
            }
            *(void *)(v80 + 16) = v81[2];
            *(void *)(v81[2] + 8 * (*(void *)v81[2] != (void)v81)) = v80;
            *(void *)uint64_t v80 = v81;
            goto LABEL_136;
          }
          *(unsigned char *)(v80 + 24) = 1;
          double v73 = v81;
          *((unsigned char *)v81 + 24) = v81 == v77;
          *unint64_t v83 = 1;
        }
        while (v81 != v77);
      }
      ++v236;
LABEL_138:
      __int32 v95 = operator new(0x30uLL);
      v95[4] = v78;
      v95[5] = v65;
      int v96 = &v232;
      uint64_t v97 = &v232;
      unint64_t v98 = v232;
      if (v232)
      {
        do
        {
          while (1)
          {
            int v96 = (void **)v98;
            unint64_t v101 = v98[4];
            if (v78 >= v101) {
              break;
            }
            unint64_t v98 = (void *)*v98;
            uint64_t v97 = v96;
            if (!*v96) {
              goto LABEL_139;
            }
          }
          if (v101 >= v78)
          {
            operator delete(v95);
            goto LABEL_170;
          }
          unint64_t v98 = (void *)v98[1];
        }
        while (v98);
        uint64_t v97 = v96 + 1;
        *__int32 v95 = 0;
        v95[1] = 0;
        v95[2] = v96;
        v96[1] = v95;
        uint64_t v99 = (void *)*v231;
        if (*v231) {
          goto LABEL_140;
        }
      }
      else
      {
LABEL_139:
        *__int32 v95 = 0;
        v95[1] = 0;
        v95[2] = v96;
        *uint64_t v97 = v95;
        uint64_t v99 = (void *)*v231;
        if (*v231)
        {
LABEL_140:
          v231 = v99;
          __int32 v95 = (void *)*v97;
        }
      }
      uint64_t v100 = v232;
      *((unsigned char *)v95 + 24) = v95 == v232;
      if (v95 != v100)
      {
        do
        {
          uint64_t v102 = v95[2];
          if (*(unsigned char *)(v102 + 24)) {
            break;
          }
          v103 = *(void **)(v102 + 16);
          uint64_t v104 = *v103;
          if (*v103 == v102)
          {
            uint64_t v107 = v103[1];
            if (!v107 || (v108 = *(unsigned __int8 *)(v107 + 24), uint64_t v105 = (unsigned char *)(v107 + 24), v108))
            {
              if (*(void **)v102 == v95)
              {
                *(unsigned char *)(v102 + 24) = 1;
                *((unsigned char *)v103 + 24) = 0;
                uint64_t v111 = *(void *)(v102 + 8);
                void *v103 = v111;
                if (v111) {
                  goto LABEL_161;
                }
              }
              else
              {
                __int32 v109 = *(uint64_t **)(v102 + 8);
                uint64_t v110 = *v109;
                *(void *)(v102 + 8) = *v109;
                if (v110)
                {
                  *(void *)(v110 + 16) = v102;
                  v103 = *(void **)(v102 + 16);
                }
                v109[2] = (uint64_t)v103;
                *(void *)(*(void *)(v102 + 16) + 8 * (**(void **)(v102 + 16) != v102)) = v109;
                *__int32 v109 = v102;
                *(void *)(v102 + 16) = v109;
                v103 = (void *)v109[2];
                uint64_t v102 = *v103;
                *((unsigned char *)v109 + 24) = 1;
                *((unsigned char *)v103 + 24) = 0;
                uint64_t v111 = *(void *)(v102 + 8);
                void *v103 = v111;
                if (v111) {
LABEL_161:
                }
                  *(void *)(v111 + 16) = v103;
              }
              *(void *)(v102 + 16) = v103[2];
              *(void *)(v103[2] + 8 * (*(void *)v103[2] != (void)v103)) = v102;
              *(void *)(v102 + 8) = v103;
LABEL_168:
              v103[2] = v102;
              break;
            }
          }
          else if (!v104 || (v106 = *(unsigned __int8 *)(v104 + 24), uint64_t v105 = (unsigned char *)(v104 + 24), v106))
          {
            if (*(void **)v102 == v95)
            {
              uint64_t v203 = v95[1];
              *(void *)uint64_t v102 = v203;
              if (v203)
              {
                *(void *)(v203 + 16) = v102;
                v103 = *(void **)(v102 + 16);
              }
              v95[2] = v103;
              *(void *)(*(void *)(v102 + 16) + 8 * (**(void **)(v102 + 16) != v102)) = v95;
              v95[1] = v102;
              *(void *)(v102 + 16) = v95;
              v103 = (void *)v95[2];
              *((unsigned char *)v95 + 24) = 1;
              *((unsigned char *)v103 + 24) = 0;
              uint64_t v102 = v103[1];
              __int32 v112 = *(void **)v102;
              v103[1] = *(void *)v102;
              if (v112) {
LABEL_166:
              }
                v112[2] = v103;
            }
            else
            {
              *(unsigned char *)(v102 + 24) = 1;
              *((unsigned char *)v103 + 24) = 0;
              uint64_t v102 = v103[1];
              __int32 v112 = *(void **)v102;
              v103[1] = *(void *)v102;
              if (v112) {
                goto LABEL_166;
              }
            }
            *(void *)(v102 + 16) = v103[2];
            *(void *)(v103[2] + 8 * (*(void *)v103[2] != (void)v103)) = v102;
            *(void *)uint64_t v102 = v103;
            goto LABEL_168;
          }
          *(unsigned char *)(v102 + 24) = 1;
          __int32 v95 = v103;
          *((unsigned char *)v103 + 24) = v103 == v100;
          *uint64_t v105 = 1;
        }
        while (v103 != v100);
      }
      ++v233;
LABEL_170:
      unint64_t v219 = v78 + 1;
LABEL_171:
      size_t v113 = 0;
      BOOL v114 = 0;
      uint64_t v224 = v16;
      if (v11) {
        BOOL v115 = 0;
      }
      else {
        BOOL v115 = v16 == v216;
      }
      uint64_t v222 = v78;
      if (v115) {
        unint64_t v11 = v78;
      }
      unint64_t v220 = v11;
      HIBYTE(v227) = 0;
      LOBYTE(__p[0]) = 0;
      unint64_t v116 = 1;
      for (unint64_t i = v225; ; i /= 0xAuLL)
      {
        unsigned __int8 v118 = (i % 0xA) | 0x30;
        if (v116 >= 0x17)
        {
          uint64_t v120 = (v116 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v116 | 7) != 0x17) {
            uint64_t v120 = v116 | 7;
          }
          uint64_t v121 = v120 + 1;
          long long v122 = operator new(v120 + 1);
          *((void *)&v237 + 1) = v116;
          unint64_t v238 = v121 | 0x8000000000000000;
          *(void *)&long long v237 = v122;
          *long long v122 = v118;
          v119 = v122 + 1;
        }
        else
        {
          unint64_t v238 = 0;
          HIBYTE(v238) = v116;
          v119 = (char *)&v237 + 1;
          long long v237 = v118;
          if (!v113)
          {
            BYTE1(v237) = 0;
            if (!v114) {
              goto LABEL_181;
            }
LABEL_180:
            operator delete(__p[0]);
            goto LABEL_181;
          }
        }
        if (v114) {
          long long v123 = (void **)__p[0];
        }
        else {
          long long v123 = __p;
        }
        memmove(v119, v123, v113);
        v119[v113] = 0;
        if (v114) {
          goto LABEL_180;
        }
LABEL_181:
        *(_OWORD *)__p = v237;
        int64_t v227 = v238;
        if (i < 0xA) {
          break;
        }
        BOOL v114 = v227 < 0;
        if (v227 >= 0) {
          size_t v113 = HIBYTE(v227);
        }
        else {
          size_t v113 = (size_t)__p[1];
        }
        unint64_t v116 = v113 + 1;
        if (v113 + 1 > 0x7FFFFFFFFFFFFFF7) {
          sub_1C4949B7C();
        }
      }
      uint64_t v124 = sub_1C4999D30(v221, (uint64_t)__p);
      if (SHIBYTE(v227) < 0) {
        operator delete(__p[0]);
      }
      size_t v125 = 0;
      BOOL v126 = 0;
      HIBYTE(v227) = 0;
      LOBYTE(__p[0]) = 0;
      unint64_t v127 = 1;
      while (2)
      {
        unsigned __int8 v128 = (v19 % 0xA) | 0x30;
        if (v127 >= 0x17)
        {
          uint64_t v130 = (v127 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v127 | 7) != 0x17) {
            uint64_t v130 = v127 | 7;
          }
          uint64_t v131 = v130 + 1;
          unint64_t v132 = operator new(v130 + 1);
          *((void *)&v237 + 1) = v127;
          unint64_t v238 = v131 | 0x8000000000000000;
          *(void *)&long long v237 = v132;
          *unint64_t v132 = v128;
          v129 = v132 + 1;
        }
        else
        {
          unint64_t v238 = 0;
          HIBYTE(v238) = v127;
          v129 = (char *)&v237 + 1;
          long long v237 = v128;
          if (!v125)
          {
            BYTE1(v237) = 0;
            if (v126) {
              goto LABEL_201;
            }
            goto LABEL_202;
          }
        }
        if (v126) {
          long long v133 = (void **)__p[0];
        }
        else {
          long long v133 = __p;
        }
        memmove(v129, v133, v125);
        v129[v125] = 0;
        if (v126) {
LABEL_201:
        }
          operator delete(__p[0]);
LABEL_202:
        *(_OWORD *)__p = v237;
        int64_t v227 = v238;
        if (v19 >= 0xA)
        {
          BOOL v126 = v227 < 0;
          if (v227 >= 0) {
            size_t v125 = HIBYTE(v227);
          }
          else {
            size_t v125 = (size_t)__p[1];
          }
          unint64_t v127 = v125 + 1;
          v19 /= 0xAuLL;
          if (v125 + 1 > 0x7FFFFFFFFFFFFFF7) {
            sub_1C4949B7C();
          }
          continue;
        }
        break;
      }
      long long v134 = sub_1C4999D30(v221, (uint64_t)__p);
      if (SHIBYTE(v227) < 0) {
        operator delete(__p[0]);
      }
      unint64_t v135 = v222 + 10000 * v223;
      v136 = v229;
      unint64_t v11 = v220;
      if (v229)
      {
        v137 = &v229;
        do
        {
          v138 = v136;
          v139 = v137;
          unint64_t v140 = v136[4];
          uint64_t v141 = v136 + 1;
          if (v140 >= v135)
          {
            uint64_t v141 = v138;
            v137 = v138;
          }
          v136 = (void *)*v141;
        }
        while (v136);
        if (v137 != &v229)
        {
          if (v140 < v135) {
            v138 = v139;
          }
          if (v135 >= v138[4])
          {
            uint64_t v12 = v215;
            unint64_t v14 = v219;
            uint64_t v16 = v224 + 1;
            if (v224 + 1 == v214) {
              break;
            }
            goto LABEL_11;
          }
        }
      }
      unint64_t v142 = v65 - v225;
      v144 = *(unint64_t **)(v213 + 8);
      unint64_t v143 = *(void *)(v213 + 16);
      if ((unint64_t)v144 < v143)
      {
        unint64_t *v144 = v223;
        v144[1] = v222;
        v144[2] = (unint64_t)v124;
        v144[3] = (unint64_t)v134;
        v144[4] = 0;
        v144[6] = v142;
        v144[7] = v142;
        unint64_t v145 = (uint64_t *)(v144 + 9);
        v144[8] = v142;
        goto LABEL_241;
      }
      v146 = *(unint64_t **)v213;
      unint64_t v147 = 0x8E38E38E38E38E39 * (((uint64_t)v144 - *(void *)v213) >> 3);
      unint64_t v148 = v147 + 1;
      if (v147 + 1 > 0x38E38E38E38E38ELL) {
        sub_1C494A220();
      }
      unint64_t v149 = 0x8E38E38E38E38E39 * ((uint64_t)(v143 - (void)v146) >> 3);
      if (2 * v149 > v148) {
        unint64_t v148 = 2 * v149;
      }
      if (v149 >= 0x1C71C71C71C71C7) {
        unint64_t v150 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v150 = v148;
      }
      if (v150 > 0x38E38E38E38E38ELL) {
        sub_1C4949AA8();
      }
      v151 = (char *)operator new(72 * v150);
      v152 = (int64x2_t *)&v151[72 * v147];
      v152->i64[0] = v223;
      v152->i64[1] = v222;
      v152[1].i64[0] = (uint64_t)v124;
      v152[1].i64[1] = (uint64_t)v134;
      v152[2].i64[0] = 0;
      v152[3] = vdupq_n_s64(v142);
      v152[4].i64[0] = v142;
      if (v144 == v146)
      {
        v174 = &v151[72 * v150];
        unint64_t v145 = &v152[4].i64[1];
        *(void *)uint64_t v213 = v152;
        *(void *)(v213 + 8) = (char *)v152 + 72;
        *(void *)(v213 + 16) = v174;
        if (v146) {
          goto LABEL_240;
        }
      }
      else
      {
        uint64_t v153 = 0;
        do
        {
          v154 = &v152->i8[v153 * 8];
          *(_OWORD *)(v154 - 72) = *(_OWORD *)&v144[v153 - 9];
          *(_OWORD *)(v154 - 56) = *(_OWORD *)&v144[v153 - 7];
          *(_OWORD *)(v154 - 40) = *(_OWORD *)&v144[v153 - 5];
          *(_OWORD *)(v154 - 24) = *(_OWORD *)&v144[v153 - 3];
          *((void *)v154 - 1) = v144[v153 - 1];
          v153 -= 9;
        }
        while (&v144[v153] != v146);
        v155 = &v151[72 * v150];
        unint64_t v145 = &v152[4].i64[1];
        *(void *)uint64_t v213 = (char *)v152 + v153 * 8;
        *(void *)(v213 + 8) = (char *)v152 + 72;
        *(void *)(v213 + 16) = v155;
        if (v146) {
LABEL_240:
        }
          operator delete(v146);
      }
LABEL_241:
      *(void *)(v213 + 8) = v145;
      v156 = v229;
      v157 = &v229;
      v158 = &v229;
      uint64_t v159 = v224;
      if (v229)
      {
        while (1)
        {
          while (1)
          {
            v157 = v156;
            unint64_t v160 = v156[4];
            if (v135 >= v160) {
              break;
            }
            v156 = (void *)*v157;
            v158 = v157;
            if (!*v157) {
              goto LABEL_248;
            }
          }
          if (v160 >= v135) {
            break;
          }
          v156 = (void *)v157[1];
          if (!v156)
          {
            v158 = v157 + 1;
            goto LABEL_248;
          }
        }
        v161 = v157;
        uint64_t v12 = v215;
        unint64_t v14 = v219;
      }
      else
      {
LABEL_248:
        v161 = operator new(0x30uLL);
        v161[4] = v135;
        v161[5] = 0;
        void *v161 = 0;
        v161[1] = 0;
        v161[2] = v157;
        void *v158 = v161;
        v162 = v161;
        if (*v228)
        {
          v228 = (void *)*v228;
          v162 = (void *)*v158;
        }
        v163 = v229;
        BOOL v115 = v162 == v229;
        *((unsigned char *)v162 + 24) = v162 == v229;
        uint64_t v12 = v215;
        uint64_t v159 = v224;
        unint64_t v14 = v219;
        if (!v115)
        {
          do
          {
            uint64_t v164 = v162[2];
            if (*(unsigned char *)(v164 + 24)) {
              break;
            }
            v165 = *(uint64_t **)(v164 + 16);
            uint64_t v166 = *v165;
            if (*v165 == v164)
            {
              uint64_t v169 = v165[1];
              if (!v169 || (int v170 = *(unsigned __int8 *)(v169 + 24), v167 = (unsigned char *)(v169 + 24), v170))
              {
                if (*(void **)v164 == v162)
                {
                  *(unsigned char *)(v164 + 24) = 1;
                  *((unsigned char *)v165 + 24) = 0;
                  uint64_t v173 = *(void *)(v164 + 8);
                  uint64_t *v165 = v173;
                  if (v173) {
                    goto LABEL_265;
                  }
                }
                else
                {
                  v171 = *(uint64_t **)(v164 + 8);
                  uint64_t v172 = *v171;
                  *(void *)(v164 + 8) = *v171;
                  if (v172)
                  {
                    *(void *)(v172 + 16) = v164;
                    v165 = *(uint64_t **)(v164 + 16);
                  }
                  v171[2] = (uint64_t)v165;
                  *(void *)(*(void *)(v164 + 16) + 8 * (**(void **)(v164 + 16) != v164)) = v171;
                  uint64_t *v171 = v164;
                  *(void *)(v164 + 16) = v171;
                  v165 = (uint64_t *)v171[2];
                  uint64_t v164 = *v165;
                  *((unsigned char *)v171 + 24) = 1;
                  *((unsigned char *)v165 + 24) = 0;
                  uint64_t v173 = *(void *)(v164 + 8);
                  uint64_t *v165 = v173;
                  if (v173) {
LABEL_265:
                  }
                    *(void *)(v173 + 16) = v165;
                }
                *(void *)(v164 + 16) = v165[2];
                *(void *)(v165[2] + 8 * (*(void *)v165[2] != (void)v165)) = v164;
                *(void *)(v164 + 8) = v165;
LABEL_274:
                v165[2] = v164;
                break;
              }
            }
            else if (!v166 || (int v168 = *(unsigned __int8 *)(v166 + 24), v167 = (unsigned char *)(v166 + 24), v168))
            {
              if (*(void **)v164 == v162)
              {
                uint64_t v204 = v162[1];
                *(void *)uint64_t v164 = v204;
                if (v204)
                {
                  *(void *)(v204 + 16) = v164;
                  v165 = *(uint64_t **)(v164 + 16);
                }
                v162[2] = v165;
                *(void *)(*(void *)(v164 + 16) + 8 * (**(void **)(v164 + 16) != v164)) = v162;
                v162[1] = v164;
                *(void *)(v164 + 16) = v162;
                v165 = (uint64_t *)v162[2];
                *((unsigned char *)v162 + 24) = 1;
                *((unsigned char *)v165 + 24) = 0;
                uint64_t v164 = v165[1];
                v175 = *(void **)v164;
                v165[1] = *(void *)v164;
                if (v175) {
LABEL_272:
                }
                  v175[2] = v165;
              }
              else
              {
                *(unsigned char *)(v164 + 24) = 1;
                *((unsigned char *)v165 + 24) = 0;
                uint64_t v164 = v165[1];
                v175 = *(void **)v164;
                v165[1] = *(void *)v164;
                if (v175) {
                  goto LABEL_272;
                }
              }
              *(void *)(v164 + 16) = v165[2];
              *(void *)(v165[2] + 8 * (*(void *)v165[2] != (void)v165)) = v164;
              *(void *)uint64_t v164 = v165;
              goto LABEL_274;
            }
            *(unsigned char *)(v164 + 24) = 1;
            v162 = v165;
            *((unsigned char *)v165 + 24) = v165 == v163;
            unsigned char *v167 = 1;
          }
          while (v165 != v163);
        }
        ++v230;
      }
      v161[5] = v218++;
      uint64_t v16 = v159 + 1;
    }
    while (v16 != v214);
LABEL_5:
    if (++v12 != v212) {
      continue;
    }
    break;
  }
  v209 = v229;
LABEL_375:
  *a4 = v236;
  sub_1C4999C7C((uint64_t)&v228, v209);
  sub_1C4999C7C((uint64_t)&v231, v232);
  sub_1C4999C7C((uint64_t)&v234, v235);
  return v11;
}

void sub_1C49D3E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36)
{
  sub_1C4999C7C(v36 - 160, 0);
  sub_1C4999C7C(v36 - 136, *(void **)(v36 - 128));
  _Unwind_Resume(a1);
}

void spatialSegmentationNetworkFromDrawing(CHDrawing *a1@<X0>, uint64_t a2@<X8>)
{
  double v6 = a1;
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  double v9 = 0.0;
  for (unint64_t i = objc_msgSend_strokeCount(v6, v10, v11, v12, v13, v14);
        v8 < i;
        unint64_t i = objc_msgSend_strokeCount(v6, v23, v24, v25, v26, v27))
  {
    for (unint64_t j = 0; j < objc_msgSend_pointCountForStrokeIndex_(v6, v16, v8, v18, v19, v20); ++j)
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(v6, v23, v8, j, v26, v27);
      double v9 = v28;
      if (v7 + j)
      {
        double v22 = v28 - v3;
        double v3 = v3 + (v9 - v3) / (double)(v7 + j + 1);
        double v4 = v2 + v22 * (v9 - v3);
        double v2 = v4;
      }
      else
      {
        double v2 = 0.0;
        double v3 = v28;
      }
    }
    ++v8;
    v7 += j;
  }
  if (objc_msgSend_pointCount(v6, v16, v17, v18, v19, v20) == 1)
  {
    double v29 = v9 + 1.0;
    double v30 = v9 + -1.0;
    if (v7)
    {
      unint64_t v31 = v7 + 1;
      if (v7 == -1)
      {
        double v2 = 0.0;
        unint64_t v32 = 2;
        double v3 = v9 + -1.0;
        goto LABEL_22;
      }
      double v33 = v2 + (v29 - v3) * (v29 - (v3 + (v29 - v3) / (double)v31));
      v7 += 2;
      double v29 = v3 + (v29 - v3) / (double)v31;
    }
    else
    {
      double v33 = 0.0;
      unint64_t v7 = 2;
    }
    double v3 = v29 + (v30 - v29) / (double)v7;
    double v4 = v33 + (v30 - v29) * (v30 - v3);
    double v2 = v4;
  }
  if (v7 < 2)
  {
    double v29 = v9 + 1.0;
    double v30 = v9 + -1.0;
    unint64_t v32 = 2;
    if (!v7)
    {
      double v36 = 0.0;
      goto LABEL_25;
    }
  }
  else
  {
    double v34 = v4 / (double)(v7 - 1);
    if (v34 >= 0.0001)
    {
LABEL_26:
      double v35 = sqrt(v34);
      goto LABEL_27;
    }
    double v35 = 0.0;
    unint64_t v32 = v7 + 1;
    if (v7 == -1) {
      goto LABEL_27;
    }
    double v29 = v9 + 1.0;
    double v30 = v9 + -1.0;
  }
LABEL_22:
  double v35 = 0.0;
  if (v32 != -1)
  {
    double v36 = v2 + (v29 - v3) * (v29 - (v3 + (v29 - v3) / (double)v32));
    double v29 = v3 + (v29 - v3) / (double)v32++;
LABEL_25:
    double v34 = (v36 + (v30 - v29) * (v30 - (v29 + (v30 - v29) / (double)v32))) / (double)(v32 - 1);
    goto LABEL_26;
  }
LABEL_27:

  double v75 = 0;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  unint64_t v72 = 0;
  double v73 = 0;
  uint64_t v74 = 0;
  sub_1C49D4504(v6, &v75, &v72, v35 * 3.0);
  __p = 0;
  long long v70 = 0;
  uint64_t v71 = 0;
  sub_1C499A82C(a2);
  unint64_t v68 = 0;
  double v43 = (uint64_t **)(a2 + 64);
  uint64_t v42 = *(uint64_t **)(a2 + 64);
  if (v42)
  {
    unint64_t v44 = *(uint64_t **)(a2 + 64);
    do
    {
      double v45 = v44;
      unint64_t v44 = (uint64_t *)*v44;
    }
    while (v44);
    if (v45 != (uint64_t *)v43 && !v45[4])
    {
      double v46 = (uint64_t *)v45[1];
      if (v46)
      {
        do
        {
          uint64_t v47 = v46;
          double v46 = (uint64_t *)*v46;
        }
        while (v46);
      }
      else
      {
        double v48 = v45;
        do
        {
          uint64_t v47 = (uint64_t *)v48[2];
          BOOL v49 = *v47 == (void)v48;
          double v48 = v47;
        }
        while (!v49);
      }
      if (*(uint64_t **)(a2 + 56) == v45) {
        *(void *)(a2 + 56) = v47;
      }
      --*(void *)(a2 + 72);
      sub_1C49A0D30(v42, v45);
      operator delete(v45);
    }
  }
  *(unsigned char *)(*(void *)(a2 + 32) + 32) = 0;
  objc_msgSend_strokeCount(v6, v37, v38, v39, v40, v41, v68);
  unint64_t v50 = sub_1C49D26D0(a2, (uint64_t *)&v72, (uint64_t)&__p, (uint64_t *)&v68);
  uint64_t v51 = *(void *)(a2 + 32);
  unint64_t v52 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a2 + 40) - v51) >> 3);
  if (v68 > v52)
  {
    sub_1C499C97C((void **)(a2 + 32), v68 - v52);
    goto LABEL_44;
  }
  if (v68 >= v52)
  {
LABEL_44:
    unint64_t v53 = *v43;
    uint64_t v54 = (uint64_t **)(a2 + 64);
    if (*v43) {
      goto LABEL_49;
    }
    goto LABEL_53;
  }
  *(void *)(a2 + 40) = v51 + 40 * v68;
  unint64_t v53 = *v43;
  uint64_t v54 = (uint64_t **)(a2 + 64);
  if (!*v43)
  {
LABEL_53:
    uint64_t v56 = (uint64_t *)operator new(0x28uLL);
    v56[4] = v50;
    uint64_t *v56 = 0;
    v56[1] = 0;
    v56[2] = (uint64_t)v54;
    *double v43 = v56;
    uint64_t v57 = **(void **)(a2 + 56);
    if (v57)
    {
      *(void *)(a2 + 56) = v57;
      uint64_t v56 = *v43;
    }
    sub_1C4949FD4(*(uint64_t **)(a2 + 64), v56);
    ++*(void *)(a2 + 72);
    goto LABEL_56;
  }
  while (1)
  {
LABEL_49:
    while (1)
    {
      uint64_t v54 = (uint64_t **)v53;
      unint64_t v55 = v53[4];
      if (v55 <= v50) {
        break;
      }
      unint64_t v53 = *v54;
      double v43 = v54;
      if (!*v54) {
        goto LABEL_53;
      }
    }
    if (v55 >= v50) {
      break;
    }
    unint64_t v53 = v54[1];
    if (!v53)
    {
      double v43 = v54 + 1;
      goto LABEL_53;
    }
  }
LABEL_56:
  uint64_t v58 = *(void *)(a2 + 32);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a2 + 40) - v58) >> 3) >= v50) {
    *(unsigned char *)(v58 + 40 * v50 + 32) = 1;
  }
  sub_1C4B800AC(a2, (uint64_t)&__p);
  uint64_t v59 = __p;
  int v60 = v70;
  if (__p != v70)
  {
    uint64_t v61 = *(char **)(a2 + 88);
    do
    {
      if ((unint64_t)v61 < *(void *)(a2 + 96))
      {
        *(_OWORD *)uint64_t v61 = *v59;
        *((_OWORD *)v61 + 1) = v59[1];
        *((_OWORD *)v61 + 2) = v59[2];
        *((_OWORD *)v61 + 3) = v59[3];
        *((void *)v61 + 8) = *((void *)v59 + 8);
        v61 += 72;
      }
      else
      {
        uint64_t v61 = sub_1C499CBEC((char **)(a2 + 80), (uint64_t)v59);
      }
      *(void *)(a2 + 88) = v61;
      uint64_t v59 = (_OWORD *)((char *)v59 + 72);
    }
    while (v59 != v60);
  }
  Network::prepareNetwork((Network *)a2);
  if (__p)
  {
    long long v70 = __p;
    operator delete(__p);
  }
  uint64_t v62 = (char *)v72;
  if (v72)
  {
    uint64_t v63 = v73;
    unint64_t v64 = v72;
    if (v73 != v72)
    {
      unint64_t v65 = v73;
      do
      {
        uint64_t v67 = (void *)*((void *)v65 - 3);
        v65 -= 24;
        unint64_t v66 = v67;
        if (v67)
        {
          *((void *)v63 - 2) = v66;
          operator delete(v66);
        }
        uint64_t v63 = v65;
      }
      while (v65 != v62);
      unint64_t v64 = v72;
    }
    double v73 = v62;
    operator delete(v64);
  }
  if (v75)
  {
    uint64_t v76 = v75;
    operator delete(v75);
  }
}

void sub_1C49D4434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    sub_1C496B66C(&a13);
    uint64_t v19 = a16;
    if (!a16)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else
  {
    sub_1C496B66C(&a13);
    uint64_t v19 = a16;
    if (!a16) {
      goto LABEL_3;
    }
  }
  a17 = (uint64_t)v19;
  operator delete(v19);

  _Unwind_Resume(a1);
}

void sub_1C49D44C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49D44DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49D44F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49D4504(void *a1, void *a2, void *a3, double a4)
{
  v753 = 0;
  v754 = 0;
  unint64_t v755 = 0;
  v750 = 0;
  v751 = 0;
  unint64_t v752 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  v783 = 0;
  v784 = 0;
  unint64_t v785 = 0;
  v728 = a1;
  v765 = 0;
  v766 = 0;
  unint64_t v767 = 0;
  uint64_t v7 = 1;
  for (unint64_t i = objc_msgSend_strokeCount(v728, v8, v9, v10, v11, v12);
        v6 < i;
        unint64_t i = objc_msgSend_strokeCount(v728, v24, v25, v26, v27, v28))
  {
    Segment::Segment((Segment *)&v775, v728, v6);
    uint64_t v14 = v754;
    if ((unint64_t)v754 >= v755)
    {
      uint64_t v15 = sub_1C49D9C18((Segment **)&v753, (const Segment *)&v775);
    }
    else
    {
      Segment::Segment(v754, (const Segment *)&v775);
      uint64_t v15 = (Segment *)((char *)v14 + 120);
    }
    v754 = v15;
    long long v773 = 0u;
    memset(v774, 0, 24);
    long long v771 = 0u;
    long long v772 = 0u;
    float64x2_t v769 = 0u;
    float64x2_t v770 = 0u;
    float64x2_t v768 = 0u;
    v784 = (char *)v783;
    if (v751 == v750) {
      goto LABEL_27;
    }
    uint64_t v16 = -1 - 0x1111111111111111 * ((v751 - (Segment *)v750) >> 3);
    Segment::mergeBoundingBoxes((Segment *)((char *)v750 + 120 * v16), &v775, v6, (uint64_t)&v756);
    float64x2_t v768 = (float64x2_t)v756;
    float64x2_t v769 = v757;
    float64x2_t v770 = v758;
    sub_1C494ACB0(&v771, (char *)v759, v760, (v760 - (unsigned char *)v759) >> 3);
    sub_1C499DEE4((void *)&v772 + 1, (char *)v761, v762, (v762 - (unsigned char *)v761) >> 2);
    sub_1C499DEE4(v774, (char *)__p, v764, (v764 - (unsigned char *)__p) >> 2);
    if (__p)
    {
      v764 = (char *)__p;
      operator delete(__p);
    }
    if (v761)
    {
      v762 = (char *)v761;
      operator delete(v761);
    }
    if (v759)
    {
      v760 = (char *)v759;
      operator delete(v759);
    }
    float64x2_t v22 = v768;
    unint64_t v23 = objc_msgSend_strokeCount(v728, v17, v18, v19, v20, v21);
    BOOL v29 = v22.f64[1] <= a4 || v23 >= 5;
    double v30 = v29 ? a4 : v22.f64[1];
    double v31 = v30 + v30;
    BOOL v32 = v22.f64[0] <= v31 || v22.f64[0] <= *((double *)v750 + 15 * v16);
    if (!v32 || v22.f64[1] > v31)
    {
LABEL_27:
      double v34 = v751;
      if ((unint64_t)v751 >= v752)
      {
        double v35 = sub_1C49D9C18((Segment **)&v750, (const Segment *)&v775);
      }
      else
      {
        Segment::Segment(v751, (const Segment *)&v775);
        double v35 = (Segment *)((char *)v34 + 120);
      }
      v751 = v35;
      unint64_t v36 = v6 - 1;
      int v37 = (uint64_t *)v784;
      if ((unint64_t)v784 < v785)
      {
        *(void *)v784 = v36;
        v37[1] = v36;
        i64 = v37 + 2;
        goto LABEL_50;
      }
      uint64_t v39 = v783;
      int64_t v40 = (v784 - (char *)v783) >> 4;
      unint64_t v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 60) {
        sub_1C494A220();
      }
      uint64_t v42 = v785 - (void)v783;
      if ((uint64_t)(v785 - (void)v783) >> 3 > v41) {
        unint64_t v41 = v42 >> 3;
      }
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v43 = v41;
      }
      if (v43)
      {
        if (v43 >> 60) {
          sub_1C4949AA8();
        }
        unint64_t v44 = (char *)operator new(16 * v43);
        double v45 = (int64x2_t *)&v44[16 * v40];
        *double v45 = vdupq_n_s64(v36);
        i64 = v45[1].i64;
        if (v37 == v39)
        {
LABEL_48:
          v783 = (uint64_t *)v45;
          v784 = (char *)i64;
          unint64_t v785 = (unint64_t)&v44[16 * v43];
          if (v37) {
            goto LABEL_49;
          }
          goto LABEL_50;
        }
      }
      else
      {
        unint64_t v44 = 0;
        double v45 = (int64x2_t *)(16 * v40);
        BOOL v49 = (int64x2_t *)(16 * v40);
        *BOOL v49 = vdupq_n_s64(v36);
        i64 = v49[1].i64;
        if (v37 == v39) {
          goto LABEL_48;
        }
      }
      do
      {
        v45[-1] = *((int64x2_t *)v37 - 1);
        --v45;
        v37 -= 2;
      }
      while (v37 != v39);
      int v37 = v783;
      v783 = (uint64_t *)v45;
      v784 = (char *)i64;
      unint64_t v785 = (unint64_t)&v44[16 * v43];
      if (v37) {
LABEL_49:
      }
        operator delete(v37);
LABEL_50:
      v784 = (char *)i64;
      unint64_t v50 = v766;
      if ((unint64_t)v766 < v767)
      {
        *(void *)v766 = v36;
        *((void *)v50 + 1) = v36;
        v766 = (Segment *)((char *)v50 + 16);
        uint64_t v51 = v774[0];
        if (!v774[0]) {
          goto LABEL_53;
        }
LABEL_52:
        v774[1] = v51;
        operator delete(v51);
        goto LABEL_53;
      }
      unint64_t v52 = (Segment *)v765;
      int64_t v53 = (v766 - (Segment *)v765) >> 4;
      unint64_t v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 60) {
        sub_1C494A220();
      }
      uint64_t v55 = v767 - (void)v765;
      if ((uint64_t)(v767 - (void)v765) >> 3 > v54) {
        unint64_t v54 = v55 >> 3;
      }
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v56 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v56 = v54;
      }
      if (v56)
      {
        if (v56 >> 60) {
          sub_1C4949AA8();
        }
        uint64_t v57 = (char *)operator new(16 * v56);
        uint64_t v58 = (int64x2_t *)&v57[16 * v53];
        *uint64_t v58 = vdupq_n_s64(v36);
        uint64_t v59 = (Segment *)&v58[1];
        if (v50 == v52)
        {
LABEL_77:
          v765 = v58;
          unint64_t v767 = (unint64_t)&v57[16 * v56];
          if (v50) {
            goto LABEL_78;
          }
          goto LABEL_79;
        }
      }
      else
      {
        uint64_t v57 = 0;
        uint64_t v58 = (int64x2_t *)(16 * v53);
        *(int64x2_t *)(16 * v53) = vdupq_n_s64(v36);
        uint64_t v59 = (Segment *)(16 * v53 + 16);
        if (v50 == v52) {
          goto LABEL_77;
        }
      }
      do
      {
        v58[-1] = *((int64x2_t *)v50 - 1);
        --v58;
        unint64_t v50 = (Segment *)((char *)v50 - 16);
      }
      while (v50 != v52);
      unint64_t v50 = (Segment *)v765;
      v765 = v58;
      unint64_t v767 = (unint64_t)&v57[16 * v56];
      if (v50) {
LABEL_78:
      }
        operator delete(v50);
LABEL_79:
      v766 = v59;
      uint64_t v51 = v774[0];
      if (v774[0]) {
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    double v46 = (char *)v753;
    if (v5 > v6)
    {
      int v47 = 0;
      int v48 = 10000000;
      goto LABEL_105;
    }
    unint64_t v60 = v6 + 1 - v5;
    if (v60 < 2)
    {
      int v47 = 0;
      int v48 = 10000000;
      uint64_t v61 = v5;
LABEL_99:
      uint64_t v71 = (double *)((char *)v753 + 120 * v61 + 32);
      do
      {
        int v72 = (int)*(v71 - 2);
        double v73 = *v71;
        v71 += 15;
        int v74 = (int)v73;
        if (v48 >= v72) {
          int v48 = v72;
        }
        if (v47 <= v74) {
          int v47 = v74;
        }
        ++v61;
      }
      while (v7 != v61);
      goto LABEL_105;
    }
    int v47 = 0;
    int v62 = 0;
    uint64_t v61 = v5 + (v60 & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v63 = (v7 - v5) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v64 = (double *)((char *)v753 + 120 * v5 + 152);
    int v65 = 10000000;
    int v66 = 10000000;
    do
    {
      int v67 = (int)*(v64 - 17);
      int v68 = (int)*(v64 - 2);
      double v69 = *(v64 - 15);
      double v70 = *v64;
      v64 += 30;
      uint64_t v24 = (const char *)(int)v69;
      uint64_t v25 = (int)v70;
      if (v65 >= v67) {
        int v65 = v67;
      }
      if (v66 >= v68) {
        int v66 = v68;
      }
      if (v47 <= (int)v24) {
        int v47 = (int)v69;
      }
      if (v62 <= (int)v25) {
        int v62 = v25;
      }
      v63 -= 2;
    }
    while (v63);
    if (v47 <= v62) {
      int v47 = v62;
    }
    if (v65 >= v66) {
      int v48 = v66;
    }
    else {
      int v48 = v65;
    }
    if (v60 != (v60 & 0xFFFFFFFFFFFFFFFELL)) {
      goto LABEL_99;
    }
LABEL_105:
    double v75 = 0;
    long long v756 = 0uLL;
    v757.f64[0] = 0.0;
    unint64_t v76 = v47 - v48 + 1;
    if (v47 - v48 != -1)
    {
      if (v47 - v48 <= -2) {
        sub_1C494A220();
      }
      uint64_t v77 = operator new(8 * ((v76 - 1) >> 6) + 8);
      double v75 = v77;
      if (v76 >= 0x41) {
        unint64_t v78 = (v76 - 1) >> 6;
      }
      else {
        unint64_t v78 = 0;
      }
      *(void *)&v77[8 * v78] = 0;
      if (v76 >= 0x40) {
        bzero(v77, 8 * (v76 >> 6));
      }
      if ((v76 & 0x3F) != 0) {
        *(void *)&v75[8 * (v76 >> 6)] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v76 & 0x3F));
      }
    }
    if (v5 <= v6)
    {
      uint64_t v80 = v5;
      do
      {
        uint64_t v82 = (double *)&v46[120 * v80];
        int v83 = (int)v82[2];
        int v84 = (int)v82[4];
        if (v83 <= v84)
        {
          int v85 = v84 - v83 + 1;
          unint64_t v86 = v83 - (uint64_t)v48;
          do
          {
            *(void *)&v75[(v86 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v86;
            ++v86;
            --v85;
          }
          while (v85);
        }
        BOOL v81 = v80++ == v6;
      }
      while (!v81);
    }
    if (v76)
    {
      if (*v75)
      {
        unint64_t v87 = 1;
        while (v76 != v87)
        {
          unint64_t v88 = v87 + 1;
          uint64_t v89 = *(void *)&v75[(v87 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v87;
          ++v87;
          if ((v89 & 1) == 0)
          {
            unint64_t v90 = v88 - 1;
            goto LABEL_131;
          }
        }
        unint64_t v90 = v76;
LABEL_131:
        BOOL v79 = v90 < v76;
      }
      else
      {
        BOOL v79 = 1;
      }
      operator delete(v75);
      if (v79) {
        uint64_t v5 = v6;
      }
    }
    else if (v75)
    {
      operator delete(v75);
    }
    int v91 = v750;
    unint64_t v92 = (double *)((char *)v750 + 120 * v16);
    uint64_t v93 = v92 + 4;
    double v94 = *v92;
    if (v775.f64[0] >= 1.0) {
      double v95 = v775.f64[0];
    }
    else {
      double v95 = 1.0;
    }
    if (v94 >= 1.0) {
      double v96 = *v92;
    }
    else {
      double v96 = 1.0;
    }
    double v98 = v92[2];
    uint64_t v97 = v92 + 2;
    double v99 = v98;
    BOOL v100 = v776.f64[0] < v98;
    if (v776.f64[0] < v98)
    {
      unint64_t v101 = v93;
    }
    else
    {
      double v94 = v775.f64[0];
      unint64_t v101 = (double *)&v777;
    }
    double v102 = *v101;
    if (v100) {
      uint64_t v93 = (double *)&v777;
    }
    double v103 = *v93;
    if (v100) {
      double v104 = v99;
    }
    else {
      double v104 = v776.f64[0];
    }
    double v105 = v103 - v104;
    if (v105 < 0.0) {
      double v105 = 0.0;
    }
    if (v102 < v103) {
      double v105 = v94;
    }
    if (v96 < v95) {
      double v95 = v96;
    }
    double v106 = v105 / v95;
    if (v106 > 0.4)
    {
      if ((v16 & 0x80000000) != 0) {
        goto LABEL_27;
      }
      goto LABEL_182;
    }
    double v107 = v776.f64[1];
    int v108 = (double *)((char *)v750 + 120 * v16);
    double v109 = v108[3];
    uint64_t v110 = v108 + 5;
    if (v776.f64[1] >= v109) {
      uint64_t v111 = &v777.f64[1];
    }
    else {
      uint64_t v111 = v110;
    }
    if (v776.f64[1] < v109) {
      uint64_t v110 = &v777.f64[1];
    }
    if (*v111 >= *v110)
    {
      if (v776.f64[1] < v109) {
        double v107 = v109;
      }
      double v113 = *v110 - v107;
      if (v113 < 0.0) {
        double v113 = 0.0;
      }
      if (v102 >= v103)
      {
LABEL_172:
        if (v776.f64[0] >= v99) {
          uint64_t v97 = (double *)&v776;
        }
        double v94 = v103 - (*v97 + -5.0);
        if (v94 < 0.0) {
          double v94 = 0.0;
        }
      }
    }
    else
    {
      __int32 v112 = (double *)((char *)v750 + 120 * v16 + 8);
      if (v776.f64[1] >= v109) {
        __int32 v112 = &v775.f64[1];
      }
      double v113 = *v112;
      if (v102 >= v103) {
        goto LABEL_172;
      }
    }
    BOOL v114 = v106 > 0.2;
    if (v113 <= 0.0) {
      BOOL v114 = 0;
    }
    if (v94 <= 0.0) {
      BOOL v114 = 0;
    }
    if ((v16 & 0x80000000) != 0 || !v114) {
      goto LABEL_27;
    }
LABEL_182:
    uint64_t v115 = -1 - 0x1111111111111111 * ((v751 - (Segment *)v750) >> 3);
    unint64_t v116 = (float64x2_t *)((char *)v750 + 120 * v115);
    *unint64_t v116 = v768;
    v116[1] = v769;
    v116[2] = v770;
    if (v116 != &v768)
    {
      sub_1C494ACB0(&v91[15 * v115 + 6], (char *)v771, *((char **)&v771 + 1), (uint64_t)(*((void *)&v771 + 1) - v771) >> 3);
      sub_1C499DEE4(&v91[15 * v115 + 9], *((char **)&v772 + 1), (char *)v773, (uint64_t)(v773 - *((void *)&v772 + 1)) >> 2);
      sub_1C499DEE4(&v91[15 * v115 + 12], (char *)v774[0], (char *)v774[1], ((char *)v774[1] - (char *)v774[0]) >> 2);
    }
    uint64_t v117 = *(void *)v771;
    uint64_t v118 = v6 - 1;
    v119 = (uint64_t *)v784;
    if ((unint64_t)v784 < v785)
    {
      *(void *)v784 = v117;
      v119[1] = v118;
      uint64_t v120 = v119 + 2;
      goto LABEL_202;
    }
    uint64_t v121 = v783;
    int64_t v122 = (v784 - (char *)v783) >> 4;
    unint64_t v123 = v122 + 1;
    if ((unint64_t)(v122 + 1) >> 60) {
      sub_1C494A220();
    }
    uint64_t v124 = v785 - (void)v783;
    if ((uint64_t)(v785 - (void)v783) >> 3 > v123) {
      unint64_t v123 = v124 >> 3;
    }
    if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v125 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v125 = v123;
    }
    if (v125)
    {
      if (v125 >> 60) {
        sub_1C4949AA8();
      }
      BOOL v126 = (char *)operator new(16 * v125);
      unint64_t v127 = (uint64_t *)&v126[16 * v122];
      *unint64_t v127 = v117;
      v127[1] = v118;
      unsigned __int8 v128 = v127;
      if (v119 == v121)
      {
LABEL_200:
        uint64_t v120 = v127 + 2;
        v783 = v128;
        v784 = (char *)(v127 + 2);
        unint64_t v785 = (unint64_t)&v126[16 * v125];
        if (!v119) {
          goto LABEL_202;
        }
LABEL_201:
        operator delete(v119);
        goto LABEL_202;
      }
    }
    else
    {
      BOOL v126 = 0;
      unint64_t v127 = (uint64_t *)(16 * v122);
      *unint64_t v127 = v117;
      v127[1] = v118;
      unsigned __int8 v128 = (uint64_t *)(16 * v122);
      if (v119 == v121) {
        goto LABEL_200;
      }
    }
    do
    {
      *((_OWORD *)v128 - 1) = *((_OWORD *)v119 - 1);
      v128 -= 2;
      v119 -= 2;
    }
    while (v119 != v121);
    v119 = v783;
    uint64_t v120 = v127 + 2;
    v783 = v128;
    v784 = (char *)(v127 + 2);
    unint64_t v785 = (unint64_t)&v126[16 * v125];
    if (v119) {
      goto LABEL_201;
    }
LABEL_202:
    v784 = (char *)v120;
    v129 = v766;
    *((void *)v766 - 2) = v117;
    *((void *)v129 - 1) = v118;
    uint64_t v51 = v774[0];
    if (v774[0]) {
      goto LABEL_52;
    }
LABEL_53:
    if (*((void *)&v772 + 1))
    {
      *(void *)&long long v773 = *((void *)&v772 + 1);
      operator delete(*((void **)&v772 + 1));
    }
    if ((void)v771)
    {
      *((void *)&v771 + 1) = v771;
      operator delete((void *)v771);
    }
    if ((void)v781)
    {
      *((void *)&v781 + 1) = v781;
      operator delete((void *)v781);
    }
    if (*((void *)&v779 + 1))
    {
      *(void *)&long long v780 = *((void *)&v779 + 1);
      operator delete(*((void **)&v779 + 1));
    }
    if ((void)__dst)
    {
      *((void *)&__dst + 1) = __dst;
      operator delete((void *)__dst);
    }
    ++v6;
    ++v7;
  }
  if (v765) {
    operator delete(v765);
  }
  if (v783)
  {
    v784 = (char *)v783;
    operator delete(v783);
  }

  objc_msgSend_strokeCount(v728, v130, v131, v132, v133, v134);
  sub_1C49D8758(&v750, a3);
  v765 = 0;
  v766 = 0;
  unint64_t v767 = 0;
  if (v751 != v750)
  {
    unint64_t v140 = 0;
    int v141 = 0;
    unint64_t v142 = 0xEEEEEEEEEEEEEEEFLL * ((v751 - (Segment *)v750) >> 3);
    do
    {
      unint64_t v725 = v140;
      if (v142 > v141 + 10) {
        LODWORD(v142) = v141 + 10;
      }
      int v727 = v141;
      uint64_t v729 = v141;
      uint64_t v730 = (int)v142;
      while (1)
      {
        uint64_t v144 = v729;
        uint64_t v143 = v730;
        if (v730 <= v729) {
          break;
        }
        unint64_t v145 = 0;
        --v730;
        long long v756 = 0uLL;
        v757.f64[0] = 0.0;
        uint64_t v734 = v143;
        do
        {
          while (1)
          {
            while (1)
            {
              while (1)
              {
                v146 = (char *)v750 + 120 * v144;
                unint64_t v148 = (char *)*((void *)v146 + 6);
                unint64_t v147 = (char *)*((void *)v146 + 7);
                uint64_t v149 = v147 - v148;
                if (v147 - v148 >= 1) {
                  break;
                }
                if (++v144 >= v143) {
                  goto LABEL_272;
                }
              }
              uint64_t v150 = v149 >> 3;
              unint64_t v151 = v756;
              unint64_t v152 = (unint64_t)&v145[-v756];
              uint64_t v153 = (uint64_t)&v145[-v756] >> 3;
              v154 = (char *)(v756 + ((unint64_t)&v145[-v756] & 0xFFFFFFFFFFFFFFF8));
              if (v149 >> 3 <= (uint64_t)(*(void *)&v757.f64[0] - (void)v145) >> 3) {
                break;
              }
              unint64_t v155 = v153 + v150;
              if ((unint64_t)(v153 + v150) >> 61) {
                sub_1C494A220();
              }
              uint64_t v156 = *(void *)&v757.f64[0] - v756;
              if ((uint64_t)(*(void *)&v757.f64[0] - v756) >> 2 > v155) {
                unint64_t v155 = v156 >> 2;
              }
              BOOL v29 = (unint64_t)v156 >= 0x7FFFFFFFFFFFFFF8;
              unint64_t v157 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v29) {
                unint64_t v157 = v155;
              }
              *(void *)v731 = v157;
              if (v157)
              {
                if (v157 >> 61) {
                  sub_1C4949AA8();
                }
                uint64_t v158 = (uint64_t)&v145[-v756] >> 3;
                unint64_t v159 = v756 + ((unint64_t)&v145[-v756] & 0xFFFFFFFFFFFFFFF8);
                unint64_t v160 = operator new(8 * v157);
                v154 = (char *)v159;
                uint64_t v153 = v158;
                uint64_t v161 = (uint64_t)&v160[8 * v158];
                v162 = (char *)(v161 + 8 * v150);
                unint64_t v163 = v149 - 8;
                if ((unint64_t)(v149 - 8) < 0x38)
                {
LABEL_228:
                  uint64_t v164 = (char *)v161;
                  do
                  {
LABEL_247:
                    uint64_t v186 = *(void *)v148;
                    v148 += 8;
                    *(void *)uint64_t v164 = v186;
                    v164 += 8;
                  }
                  while (v164 != v162);
                  goto LABEL_248;
                }
              }
              else
              {
                unint64_t v160 = 0;
                uint64_t v161 = 8 * v153;
                v162 = (char *)(8 * v153 + 8 * v150);
                unint64_t v163 = v149 - 8;
                if ((unint64_t)(v149 - 8) < 0x38) {
                  goto LABEL_228;
                }
              }
              uint64_t v164 = (char *)v161;
              if ((unint64_t)(&v160[v152 & 0xFFFFFFFFFFFFFFF8] - v148) < 0x20) {
                goto LABEL_247;
              }
              uint64_t v179 = (v163 >> 3) + 1;
              uint64_t v180 = 8 * (v179 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v164 = (char *)(v161 + v180);
              v181 = &v148[v180];
              int v182 = (long long *)(v148 + 16);
              uint64_t v183 = &v160[8 * v153 + 16];
              uint64_t v184 = v179 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v185 = *v182;
                *(v183 - 1) = *(v182 - 1);
                *uint64_t v183 = v185;
                v182 += 2;
                v183 += 2;
                v184 -= 4;
              }
              while (v184);
              unint64_t v148 = v181;
              if (v179 != (v179 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_247;
              }
LABEL_248:
              if ((char *)v151 != v145)
              {
                if (v152 - 8 >= 0x68)
                {
                  uint64_t v187 = v154;
                  if (v151 + (v152 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v160[v152 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
                  {
                    unint64_t v188 = ((v152 - 8) >> 3) + 1;
                    uint64_t v189 = 8 * (v188 & 0x3FFFFFFFFFFFFFFCLL);
                    uint64_t v187 = &v154[-v189];
                    v161 -= v189;
                    uint64_t v190 = &v160[8 * v153 - 16];
                    v191 = (long long *)(v151 + 8 * v153 - 16);
                    uint64_t v192 = v188 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v193 = *v191;
                      *(v190 - 1) = *(v191 - 1);
                      *uint64_t v190 = v193;
                      v190 -= 2;
                      v191 -= 2;
                      v192 -= 4;
                    }
                    while (v192);
                    if (v188 == (v188 & 0x3FFFFFFFFFFFFFFCLL)) {
                      goto LABEL_256;
                    }
                  }
                }
                else
                {
                  uint64_t v187 = v154;
                }
                do
                {
                  uint64_t v194 = *((void *)v187 - 1);
                  v187 -= 8;
                  *(void *)(v161 - 8) = v194;
                  v161 -= 8;
                }
                while (v187 != (char *)v151);
              }
LABEL_256:
              size_t v195 = v145 - v154;
              if (v195) {
                memmove(v162, v154, v195);
              }
              *(void *)&long long v756 = v161;
              *((void *)&v756 + 1) = &v162[v195];
              *(void *)&v757.f64[0] = &v160[8 * *(void *)v731];
              if (v151) {
                operator delete((void *)v151);
              }
              uint64_t v143 = v734;
              ++v144;
              unint64_t v145 = &v162[v195];
              if (v144 >= v734) {
                goto LABEL_272;
              }
            }
            uint64_t v165 = v145 - v154;
            uint64_t v166 = (v145 - v154) >> 3;
            if (v166 >= v150)
            {
              v167 = &v148[8 * v150];
              int v170 = v145;
              break;
            }
            v167 = &v148[8 * v166];
            int64_t v168 = v147 - v167;
            if (v147 != v167)
            {
              *(void *)v732 = v756 + ((unint64_t)&v145[-v756] & 0xFFFFFFFFFFFFFFF8);
              uint64_t v169 = (uint64_t)&v145[-v756] >> 3;
              memmove(v145, &v148[8 * v166], v147 - v167);
              uint64_t v153 = v169;
              v154 = *(char **)v732;
            }
            int v170 = &v145[v168];
            *((void *)&v756 + 1) = &v145[v168];
            if (v165 >= 1) {
              break;
            }
            uint64_t v143 = v734;
            ++v144;
            v145 += v168;
            if (v144 >= v734) {
              goto LABEL_272;
            }
          }
          v171 = &v154[8 * v150];
          size_t v172 = v170 - v171;
          uint64_t v173 = (v170 - v171) >> 3;
          v174 = &v170[-8 * v150];
          v175 = v170;
          if (v174 >= v145) {
            goto LABEL_267;
          }
          unint64_t v176 = (v152 & 0xFFFFFFFFFFFFFFF8) + v172;
          unint64_t v177 = v151 + v176 + 8;
          if ((unint64_t)v145 > v177) {
            unint64_t v177 = (unint64_t)v145;
          }
          unint64_t v178 = v177 + ~v151 - v176;
          if (v178 < 0x58)
          {
            v175 = v170;
            do
            {
LABEL_266:
              uint64_t v202 = *(void *)v174;
              v174 += 8;
              *(void *)v175 = v202;
              v175 += 8;
            }
            while (v174 < v145);
            goto LABEL_267;
          }
          v175 = v170;
          if ((unint64_t)&v171[-(v152 & 0xFFFFFFFFFFFFFFF8) - v151] < 0x20) {
            goto LABEL_266;
          }
          uint64_t v196 = (v178 >> 3) + 1;
          uint64_t v197 = 8 * (v196 & 0x3FFFFFFFFFFFFFFCLL);
          v174 += v197;
          v175 = &v170[v197];
          uint64_t v198 = v170 + 16;
          uint64_t v199 = (long long *)(v151 + 8 * v173 + 8 * v153 + 16);
          uint64_t v200 = v196 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v201 = *v199;
            *(v198 - 1) = *(v199 - 1);
            *uint64_t v198 = v201;
            v198 += 2;
            v199 += 2;
            v200 -= 4;
          }
          while (v200);
          if (v196 != (v196 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_266;
          }
LABEL_267:
          *((void *)&v756 + 1) = v175;
          if (v170 != v171)
          {
            uint64_t v203 = v154;
            memmove(&v170[-8 * v173], v154, v172);
            v154 = v203;
          }
          if (v167 != v148) {
            memmove(v154, v148, v167 - v148);
          }
          uint64_t v143 = v734;
          ++v144;
          unint64_t v145 = v175;
        }
        while (v144 < v734);
LABEL_272:
        uint64_t v204 = v756;
        uint64_t v205 = *(void *)v756;
        v206 = (char *)v753;
        uint64_t v207 = (float64x2_t *)((char *)v753 + 120 * *(void *)v756);
        float64x2_t v775 = *v207;
        long long __dst = 0u;
        long long v779 = 0u;
        long long v780 = 0u;
        long long v781 = 0u;
        v782 = 0;
        float64x2_t v776 = v207[1];
        float64x2_t v777 = v207[2];
        if (&v775 != v207)
        {
          uint64_t v208 = (char *)v753 + 120 * v205;
          v210 = (unsigned char *)*((void *)v208 + 6);
          v209 = (unsigned char *)*((void *)v208 + 7);
          size_t v211 = v209 - v210;
          uint64_t v212 = (v209 - v210) >> 3;
          if (v209 == v210)
          {
            uint64_t v213 = 0;
          }
          else
          {
            if ((v211 & 0x8000000000000000) != 0) {
              sub_1C494A220();
            }
            uint64_t v213 = (char *)operator new(v209 - v210);
            *(void *)&long long __dst = v213;
            *((void *)&__dst + 1) = v213;
            *(void *)&long long v779 = &v213[8 * v212];
            memcpy(v213, v210, v211);
          }
          *((void *)&__dst + 1) = &v213[8 * v212];
          unint64_t v214 = &v206[120 * v205];
          unint64_t v216 = (unsigned char *)*((void *)v214 + 9);
          uint64_t v215 = (unsigned char *)*((void *)v214 + 10);
          size_t v217 = v215 - v216;
          uint64_t v218 = (v215 - v216) >> 2;
          if (v215 != v216)
          {
            if ((v217 & 0x8000000000000000) == 0)
            {
              unint64_t v219 = (char *)operator new(v215 - v216);
              *((void *)&v779 + 1) = v219;
              *(void *)&long long v780 = v219;
              *((void *)&v780 + 1) = &v219[4 * v218];
              memcpy(v219, v216, v217);
              goto LABEL_281;
            }
LABEL_959:
            sub_1C494A220();
          }
          unint64_t v219 = 0;
LABEL_281:
          *(void *)&long long v780 = &v219[4 * v218];
          unint64_t v220 = &v206[120 * v205];
          uint64_t v222 = (unsigned char *)*((void *)v220 + 12);
          v221 = (unsigned char *)*((void *)v220 + 13);
          size_t v223 = v221 - v222;
          uint64_t v224 = (v221 - v222) >> 2;
          if (v221 == v222)
          {
            unint64_t v225 = 0;
          }
          else
          {
            if ((v223 & 0x8000000000000000) != 0) {
              goto LABEL_959;
            }
            unint64_t v225 = (char *)operator new(v221 - v222);
            *(void *)&long long v781 = v225;
            *((void *)&v781 + 1) = v225;
            v782 = &v225[4 * v224];
            memcpy(v225, v222, v223);
          }
          *((void *)&v781 + 1) = &v225[4 * v224];
        }
        float64x2_t v768 = 0uLL;
        v769.f64[0] = 0.0;
        v226 = sub_1C49D9C18((Segment **)&v768, (const Segment *)&v775);
        *(void *)&v768.f64[1] = v226;
        if ((unint64_t)(*((void *)&v756 + 1) - v204) >= 9)
        {
          unint64_t v227 = (*((void *)&v756 + 1) - v204) >> 3;
          if (v227 <= 2) {
            unint64_t v227 = 2;
          }
          unint64_t v228 = v227 - 1;
          v229 = (uint64_t *)(v204 + 8);
          while (2)
          {
            while (1)
            {
              uint64_t v230 = *v229++;
              Segment::mergeIntoSegment((Segment *)&v775, (const Segment *)((char *)v753 + 120 * v230));
              float64_t v231 = v768.f64[1];
              if (*(void *)&v768.f64[1] < *(void *)&v769.f64[0]) {
                break;
              }
              v226 = sub_1C49D9C18((Segment **)&v768, (const Segment *)&v775);
              *(void *)&v768.f64[1] = v226;
              if (!--v228) {
                goto LABEL_339;
              }
            }
            **(_OWORD **)&v768.f64[1] = v775;
            *(_OWORD *)(*(void *)&v231 + 48) = 0u;
            *(_OWORD *)(*(void *)&v231 + 96) = 0u;
            *(_OWORD *)(*(void *)&v231 + 64) = 0u;
            *(_OWORD *)(*(void *)&v231 + 80) = 0u;
            *(void *)(*(void *)&v231 + 112) = 0;
            *(float64x2_t *)(*(void *)&v231 + 16) = v776;
            *(float64x2_t *)(*(void *)&v231 + 32) = v777;
            if (*(float64x2_t **)&v231 == &v775) {
              goto LABEL_338;
            }
            v232 = (const void *)__dst;
            size_t v233 = *((void *)&__dst + 1) - __dst;
            uint64_t v234 = (uint64_t)(*((void *)&__dst + 1) - __dst) >> 3;
            if (*((void *)&__dst + 1) == (void)__dst)
            {
              v235 = 0;
            }
            else
            {
              if ((v233 & 0x8000000000000000) != 0) {
                sub_1C494A220();
              }
              v235 = (char *)operator new(*((void *)&__dst + 1) - __dst);
              *(void *)(*(void *)&v231 + 48) = v235;
              *(void *)(*(void *)&v231 + 56) = v235;
              *(void *)(*(void *)&v231 + 64) = &v235[8 * v234];
              memcpy(v235, v232, v233);
              size_t v233 = *(void *)(*(void *)&v231 + 72);
            }
            *(void *)(*(void *)&v231 + 56) = &v235[8 * v234];
            uint64_t v236 = (char *)*((void *)&v779 + 1);
            long long v237 = (char *)v780;
            size_t v238 = v780 - *((void *)&v779 + 1);
            unint64_t v239 = (uint64_t)(v780 - *((void *)&v779 + 1)) >> 2;
            uint64_t v240 = *(void *)(*(void *)&v231 + 88);
            if (v239 <= (uint64_t)(v240 - v233) >> 2)
            {
              uint64_t v244 = *(void *)(*(void *)&v231 + 80);
              unint64_t v245 = (uint64_t)(v244 - v233) >> 2;
              if (v245 >= v239)
              {
                if ((void)v780 == *((void *)&v779 + 1)) {
                  goto LABEL_317;
                }
                v247 = (void *)v233;
                v246 = (char *)*((void *)&v779 + 1);
              }
              else
              {
                if (v244 != v233)
                {
                  memmove((void *)v233, *((const void **)&v779 + 1), v244 - v233);
                  size_t v233 = *(void *)(*(void *)&v231 + 80);
                }
                v246 = &v236[4 * v245];
                size_t v238 = v237 - v246;
                if (v237 == v246) {
                  goto LABEL_317;
                }
                v247 = (void *)v233;
              }
              memmove(v247, v246, v238);
              goto LABEL_317;
            }
            if (v233)
            {
              *(void *)(*(void *)&v231 + 80) = v233;
              operator delete((void *)v233);
              uint64_t v240 = 0;
              *(void *)(*(void *)&v231 + 72) = 0;
              *(void *)(*(void *)&v231 + 80) = 0;
              *(void *)(*(void *)&v231 + 88) = 0;
            }
            if ((v238 & 0x8000000000000000) != 0) {
              goto LABEL_955;
            }
            uint64_t v241 = v240 >> 1;
            if (v240 >> 1 <= v239) {
              uint64_t v241 = v239;
            }
            unint64_t v242 = (unint64_t)v240 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v241;
            if (v242 >> 62) {
LABEL_955:
            }
              sub_1C494A220();
            v243 = (char *)operator new(4 * v242);
            size_t v233 = (size_t)v243;
            *(void *)(*(void *)&v231 + 72) = v243;
            *(void *)(*(void *)&v231 + 80) = v243;
            *(void *)(*(void *)&v231 + 88) = &v243[4 * v242];
            if (v237 != v236) {
              memcpy(v243, v236, v238);
            }
LABEL_317:
            *(void *)(*(void *)&v231 + 80) = v233 + v238;
            long long v248 = v781;
            size_t v249 = *((void *)&v781 + 1) - v781;
            unint64_t v250 = (uint64_t)(*((void *)&v781 + 1) - v781) >> 2;
            uint64_t v251 = *(void *)(*(void *)&v231 + 112);
            v252 = *(char **)(*(void *)&v231 + 96);
            if (v250 > (v251 - (uint64_t)v252) >> 2)
            {
              if (v252)
              {
                *(void *)(*(void *)&v231 + 104) = v252;
                operator delete(v252);
                uint64_t v251 = 0;
                *(void *)(*(void *)&v231 + 96) = 0;
                *(void *)(*(void *)&v231 + 104) = 0;
                *(void *)(*(void *)&v231 + 112) = 0;
              }
              if ((v249 & 0x8000000000000000) != 0) {
                goto LABEL_955;
              }
              uint64_t v253 = v251 >> 1;
              if (v251 >> 1 <= v250) {
                uint64_t v253 = v250;
              }
              unint64_t v254 = (unint64_t)v251 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v253;
              if (v254 >> 62) {
                goto LABEL_955;
              }
              v255 = (char *)operator new(4 * v254);
              v252 = v255;
              *(void *)(*(void *)&v231 + 104) = v255;
              v256 = (char **)(*(void *)&v231 + 104);
              *(void *)(*(void *)&v231 + 96) = v255;
              *(void *)(*(void *)&v231 + 112) = &v255[4 * v254];
              if (*((void *)&v248 + 1) != (void)v248) {
                memcpy(v255, (const void *)v248, v249);
              }
LABEL_337:
              *v256 = &v252[v249];
LABEL_338:
              v226 = (Segment *)(*(void *)&v231 + 120);
              *(void *)&v768.f64[1] = *(void *)&v231 + 120;
              if (!--v228) {
                goto LABEL_339;
              }
              continue;
            }
            break;
          }
          v256 = (char **)(*(void *)&v231 + 104);
          v257 = *(unsigned char **)(*(void *)&v231 + 104);
          unint64_t v258 = (v257 - v252) >> 2;
          if (v258 >= v250)
          {
            if (*((void *)&v781 + 1) == (void)v781) {
              goto LABEL_337;
            }
            v261 = *(void **)(*(void *)&v231 + 96);
            v260 = (const void *)v781;
          }
          else
          {
            if (v257 != v252)
            {
              uint64_t v259 = (v257 - v252) >> 2;
              memmove(*(void **)(*(void *)&v231 + 96), (const void *)v781, v257 - v252);
              unint64_t v258 = v259;
              v252 = *v256;
            }
            v260 = (const void *)(v248 + 4 * v258);
            size_t v249 = *((void *)&v248 + 1) - (void)v260;
            if (*((const void **)&v248 + 1) == v260) {
              goto LABEL_337;
            }
            v261 = v252;
          }
          memmove(v261, v260, v249);
          goto LABEL_337;
        }
LABEL_339:
        uint64_t v262 = ((uint64_t)v226 - *(void *)&v768.f64[0]) / 120;
        uint64_t v263 = 120 * v262;
        uint64_t v264 = v262 - 1;
        while (1)
        {
          uint64_t v267 = v264;
          float64_t v268 = v768.f64[0];
          if (!v264) {
            break;
          }
          uint64_t v269 = *(void *)(v204 + 8 * v264);
          v270 = (double *)v753;
          v271 = (const Segment *)((char *)v753 + 120 * v269);
          uint64_t v272 = *(void *)&v768.f64[0] + v263;
          BOOL v273 = Segment::verticalSeperated((Segment *)(*(void *)&v768.f64[0] + v263 - 240), v271);
          double v274 = v270[15 * v269 + 2];
          double v275 = *(double *)(v272 - 224);
          if (v274 >= v275) {
            v276 = (const Segment *)(v272 - 240);
          }
          else {
            v276 = v271;
          }
          if (v274 >= v275) {
            v277 = (double *)v271;
          }
          else {
            v277 = (double *)(v272 - 240);
          }
          double v278 = *((double *)v276 + 4);
          if (v277[4] >= v278)
          {
            double v265 = v278 - (v277[2] + -5.0);
            if (v265 < 0.0) {
              double v265 = 0.0;
            }
          }
          else
          {
            double v265 = *v277;
          }
          BOOL v266 = v265 <= 35.0 && v273;
          v263 -= 120;
          uint64_t v264 = v267 - 1;
          if (v266)
          {
            float64_t v268 = v768.f64[0];
            break;
          }
        }
        if (v268 != 0.0)
        {
          float64_t v279 = v768.f64[1];
          float64_t v280 = v268;
          if (*(void *)&v768.f64[1] != *(void *)&v268)
          {
            do
            {
              v281 = *(void **)(*(void *)&v279 - 24);
              if (v281)
              {
                *(void *)(*(void *)&v279 - 16) = v281;
                operator delete(v281);
              }
              v282 = *(void **)(*(void *)&v279 - 48);
              if (v282)
              {
                *(void *)(*(void *)&v279 - 40) = v282;
                operator delete(v282);
              }
              v283 = *(void **)(*(void *)&v279 - 72);
              if (v283)
              {
                *(void *)(*(void *)&v279 - 64) = v283;
                operator delete(v283);
              }
              *(void *)&v279 -= 120;
            }
            while (*(void *)&v279 != *(void *)&v268);
            float64_t v280 = v768.f64[0];
          }
          v768.f64[1] = v268;
          operator delete(*(void **)&v280);
        }
        if ((void)v781)
        {
          *((void *)&v781 + 1) = v781;
          operator delete((void *)v781);
        }
        if (*((void *)&v779 + 1))
        {
          *(void *)&long long v780 = *((void *)&v779 + 1);
          operator delete(*((void **)&v779 + 1));
        }
        if ((void)__dst)
        {
          *((void *)&__dst + 1) = __dst;
          operator delete((void *)__dst);
        }
        if ((void)v756) {
          operator delete((void *)v756);
        }
        if (!v267)
        {
          int v284 = v734 - v727;
          goto LABEL_378;
        }
      }
      int v284 = 1;
      LODWORD(v730) = v727;
LABEL_378:
      Segment::Segment((Segment *)&v775, (const Segment *)((char *)v750 + 120 * v725));
      if ((int)v730 <= v727) {
        int v285 = v727;
      }
      else {
        int v285 = v730;
      }
      uint64_t v286 = v285;
      uint64_t v287 = 120 * (int)v729 + 120;
      uint64_t v288 = v286 - v729 + 1;
      while (--v288)
      {
        uint64_t v289 = v287 + 120;
        Segment::mergeIntoSegment((Segment *)&v775, (const Segment *)((char *)v750 + v287));
        uint64_t v287 = v289;
      }
      v290 = v766;
      if ((unint64_t)v766 >= v767)
      {
        v291 = sub_1C49D9C18((Segment **)&v765, (const Segment *)&v775);
      }
      else
      {
        Segment::Segment(v766, (const Segment *)&v775);
        v291 = (Segment *)((char *)v290 + 120);
      }
      v766 = v291;
      if ((void)v781)
      {
        *((void *)&v781 + 1) = v781;
        operator delete((void *)v781);
      }
      if (*((void *)&v779 + 1))
      {
        *(void *)&long long v780 = *((void *)&v779 + 1);
        operator delete(*((void **)&v779 + 1));
      }
      if ((void)__dst)
      {
        *((void *)&__dst + 1) = __dst;
        operator delete((void *)__dst);
      }
      int v141 = v284 + v727;
      unint64_t v140 = v284 + v727;
      unint64_t v142 = 0xEEEEEEEEEEEEEEEFLL * ((v751 - (Segment *)v750) >> 3);
    }
    while (v142 > v140);
  }
  objc_msgSend_strokeCount(v728, v135, v136, v137, v138, v139);
  sub_1C49D8758(&v765, a3);
  v747 = 0;
  v748 = 0;
  uint64_t v749 = 0;
  sub_1C49D8980((uint64_t *)&v750, (uint64_t)&v747, a4 * 0.0);
  d2s(0.0, v745);
  objc_msgSend_strokeCount(v728, v292, v293, v294, v295, v296);
  sub_1C49D8758(&v747, a3);
  if (v746 < 0) {
    operator delete(v745[0]);
  }
  v297 = (char *)v747;
  for (unint64_t j = v748; j != v297; j -= 120)
  {
    v299 = (void *)*((void *)j - 3);
    if (v299)
    {
      *((void *)j - 2) = v299;
      operator delete(v299);
    }
    v300 = (void *)*((void *)j - 6);
    if (v300)
    {
      *((void *)j - 5) = v300;
      operator delete(v300);
    }
    v301 = (void *)*((void *)j - 9);
    if (v301)
    {
      *((void *)j - 8) = v301;
      operator delete(v301);
    }
  }
  v748 = v297;
  sub_1C49D8980((uint64_t *)&v750, (uint64_t)&v747, a4 * 0.1);
  d2s(0.1, v745);
  objc_msgSend_strokeCount(v728, v302, v303, v304, v305, v306);
  sub_1C49D8758(&v747, a3);
  if (v746 < 0) {
    operator delete(v745[0]);
  }
  v307 = (char *)v747;
  for (k = v748; k != v307; k -= 120)
  {
    v309 = (void *)*((void *)k - 3);
    if (v309)
    {
      *((void *)k - 2) = v309;
      operator delete(v309);
    }
    v310 = (void *)*((void *)k - 6);
    if (v310)
    {
      *((void *)k - 5) = v310;
      operator delete(v310);
    }
    v311 = (void *)*((void *)k - 9);
    if (v311)
    {
      *((void *)k - 8) = v311;
      operator delete(v311);
    }
  }
  v748 = v307;
  sub_1C49D8980((uint64_t *)&v750, (uint64_t)&v747, a4 * 0.15);
  d2s(0.15, v745);
  objc_msgSend_strokeCount(v728, v312, v313, v314, v315, v316);
  sub_1C49D8758(&v747, a3);
  if (v746 < 0) {
    operator delete(v745[0]);
  }
  v317 = (char *)v747;
  for (m = v748; m != v317; m -= 120)
  {
    v319 = (void *)*((void *)m - 3);
    if (v319)
    {
      *((void *)m - 2) = v319;
      operator delete(v319);
    }
    v320 = (void *)*((void *)m - 6);
    if (v320)
    {
      *((void *)m - 5) = v320;
      operator delete(v320);
    }
    v321 = (void *)*((void *)m - 9);
    if (v321)
    {
      *((void *)m - 8) = v321;
      operator delete(v321);
    }
  }
  v748 = v317;
  sub_1C49D8980((uint64_t *)&v750, (uint64_t)&v747, a4 * 0.3);
  d2s(0.3, v745);
  objc_msgSend_strokeCount(v728, v322, v323, v324, v325, v326);
  sub_1C49D8758(&v747, a3);
  if (v746 < 0) {
    operator delete(v745[0]);
  }
  v327 = (char *)v747;
  for (n = v748; n != v327; n -= 120)
  {
    v329 = (void *)*((void *)n - 3);
    if (v329)
    {
      *((void *)n - 2) = v329;
      operator delete(v329);
    }
    v330 = (void *)*((void *)n - 6);
    if (v330)
    {
      *((void *)n - 5) = v330;
      operator delete(v330);
    }
    v331 = (void *)*((void *)n - 9);
    if (v331)
    {
      *((void *)n - 8) = v331;
      operator delete(v331);
    }
  }
  v748 = v327;
  sub_1C49D8980((uint64_t *)&v750, (uint64_t)&v747, a4 * 0.35);
  d2s(0.35, v745);
  objc_msgSend_strokeCount(v728, v332, v333, v334, v335, v336);
  sub_1C49D8758(&v747, a3);
  if (v746 < 0) {
    operator delete(v745[0]);
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((v751 - (Segment *)v750) >> 3) <= 1) {
    goto LABEL_473;
  }
  objc_msgSend_bounds(v728, v337, v338, v339, v340, v341);
  unint64_t v343 = (v751 - (Segment *)v750) / 120;
  if (v751 == v750)
  {
    double v346 = 0.0;
  }
  else
  {
    if (v343 <= 1) {
      unint64_t v344 = 1;
    }
    else {
      unint64_t v344 = (v751 - (Segment *)v750) / 120;
    }
    if (v344 >= 2)
    {
      unint64_t v345 = v344 & 0xFFFFFFFFFFFFFFFELL;
      double v346 = 0.0;
      unint64_t v347 = v344 & 0xFFFFFFFFFFFFFFFELL;
      v348 = (double *)v750;
      do
      {
        double v346 = v346 + *v348 + v348[15];
        v348 += 30;
        v347 -= 2;
      }
      while (v347);
      if (v344 == v345) {
        goto LABEL_452;
      }
    }
    else
    {
      unint64_t v345 = 0;
      double v346 = 0.0;
    }
    unint64_t v349 = v344 - v345;
    v350 = (double *)((char *)v750 + 120 * v345);
    do
    {
      double v351 = *v350;
      v350 += 15;
      double v346 = v346 + v351;
      --v349;
    }
    while (v349);
  }
LABEL_452:
  double v352 = (v342 - v346) / (double)v343 / a4;
  if (v352 > 0.3)
  {
    v353 = (char *)v747;
    for (iunint64_t i = v748; ii != v353; ii -= 120)
    {
      v355 = (void *)*((void *)ii - 3);
      if (v355)
      {
        *((void *)ii - 2) = v355;
        operator delete(v355);
      }
      v356 = (void *)*((void *)ii - 6);
      if (v356)
      {
        *((void *)ii - 5) = v356;
        operator delete(v356);
      }
      v357 = (void *)*((void *)ii - 9);
      if (v357)
      {
        *((void *)ii - 8) = v357;
        operator delete(v357);
      }
    }
    v748 = v353;
    sub_1C49D8980((uint64_t *)&v750, (uint64_t)&v747, a4 * 0.5);
    objc_msgSend_strokeCount(v728, v358, v359, v360, v361, v362);
    sub_1C49D8758(&v747, a3);
    v363 = (char *)v747;
    for (junint64_t j = v748; jj != v363; jj -= 120)
    {
      v365 = (void *)*((void *)jj - 3);
      if (v365)
      {
        *((void *)jj - 2) = v365;
        operator delete(v365);
      }
      v366 = (void *)*((void *)jj - 6);
      if (v366)
      {
        *((void *)jj - 5) = v366;
        operator delete(v366);
      }
      v367 = (void *)*((void *)jj - 9);
      if (v367)
      {
        *((void *)jj - 8) = v367;
        operator delete(v367);
      }
    }
    v748 = v363;
    sub_1C49D8980((uint64_t *)&v750, (uint64_t)&v747, v352 * a4);
    d2s(v352, &v743);
    objc_msgSend_strokeCount(v728, v368, v369, v370, v371, v372);
    sub_1C49D8758(&v747, a3);
    if (v744 < 0) {
      operator delete(v743);
    }
  }
LABEL_473:
  v740 = 0;
  v741 = 0;
  uint64_t v742 = 0;
  sub_1C49D9448((uint64_t *)&v750, (uint64_t)&v740, a4);
  objc_msgSend_strokeCount(v728, v373, v374, v375, v376, v377);
  sub_1C49D8758(&v740, a3);
  v378 = (char *)v740;
  for (kk = v741; kk != v378; kk -= 120)
  {
    v380 = (void *)*((void *)kk - 3);
    if (v380)
    {
      *((void *)kk - 2) = v380;
      operator delete(v380);
    }
    v381 = (void *)*((void *)kk - 6);
    if (v381)
    {
      *((void *)kk - 5) = v381;
      operator delete(v381);
    }
    v382 = (void *)*((void *)kk - 9);
    if (v382)
    {
      *((void *)kk - 8) = v382;
      operator delete(v382);
    }
  }
  v741 = v378;
  sub_1C49D9448((uint64_t *)&v747, (uint64_t)&v740, a4);
  objc_msgSend_strokeCount(v728, v383, v384, v385, v386, v387);
  sub_1C49D8758(&v740, a3);
  v388 = (char *)v740;
  for (mm = v741; mm != v388; mm -= 120)
  {
    v390 = (void *)*((void *)mm - 3);
    if (v390)
    {
      *((void *)mm - 2) = v390;
      operator delete(v390);
    }
    v391 = (void *)*((void *)mm - 6);
    if (v391)
    {
      *((void *)mm - 5) = v391;
      operator delete(v391);
    }
    v392 = (void *)*((void *)mm - 9);
    if (v392)
    {
      *((void *)mm - 8) = v392;
      operator delete(v392);
    }
  }
  v741 = v388;
  sub_1C49D9448((uint64_t *)&v765, (uint64_t)&v740, a4);
  objc_msgSend_strokeCount(v728, v393, v394, v395, v396, v397);
  sub_1C49D8758(&v740, a3);
  v398 = (char *)v740;
  for (nn = v741; nn != v398; nn -= 120)
  {
    v400 = (void *)*((void *)nn - 3);
    if (v400)
    {
      *((void *)nn - 2) = v400;
      operator delete(v400);
    }
    v401 = (void *)*((void *)nn - 6);
    if (v401)
    {
      *((void *)nn - 5) = v401;
      operator delete(v401);
    }
    v402 = (void *)*((void *)nn - 9);
    if (v402)
    {
      *((void *)nn - 8) = v402;
      operator delete(v402);
    }
  }
  v741 = v398;
  v737 = 0;
  v738 = 0;
  v739 = 0;
  v784 = 0;
  unint64_t v785 = 0;
  v783 = (uint64_t *)&v784;
  float64x2_t v757 = 0u;
  float64x2_t v758 = 0u;
  long long v756 = 0u;
  sub_1C49DA0D4((uint64_t)&v756);
  v403 = (void **)*((void *)&v756 + 1);
  v404 = *(void ***)&v757.f64[0];
  *(void *)(*(void *)(*((void *)&v756 + 1)
                        + (((*(void *)&v758.f64[0] + *(void *)&v758.f64[1]) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*(void *)&v758.f64[0] + *(void *)&v758.f64[1]) & 0x1FFLL)) = 0;
  BOOL v29 = __CFADD__(*(void *)&v758.f64[1], 1);
  *(void *)&float64_t v405 = ++*(void *)&v758.f64[1];
  if (v29) {
    goto LABEL_682;
  }
  while (2)
  {
    unint64_t v406 = *(void *)(*(void *)(*((void *)&v756 + 1)
                                 + (((unint64_t)(*(void *)&v758.f64[0] + *(void *)&v405 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * ((*(void *)&v758.f64[0] + *(void *)&v405 - 1) & 0x1FF));
    if (*(void *)&v757.f64[0] == *((void *)&v756 + 1)) {
      uint64_t v407 = 0;
    }
    else {
      uint64_t v407 = ((*(void *)&v757.f64[0] - *((void *)&v756 + 1)) << 6) - 1;
    }
    *(void *)&v758.f64[1] = *(void *)&v405 - 1;
    if ((unint64_t)(v407 - (*(void *)&v405 + *(void *)&v758.f64[0]) + 1) >= 0x400)
    {
      operator delete(*(void **)(*(void *)&v757.f64[0] - 8));
      *(void *)&v757.f64[0] -= 8;
    }
    v408 = v784;
    if (v784)
    {
      v409 = (uint64_t **)&v784;
      do
      {
        v410 = v408;
        v411 = v409;
        unint64_t v412 = *((void *)v408 + 4);
        v413 = (char **)(v408 + 8);
        if (v412 >= v406)
        {
          v413 = (char **)v410;
          v409 = (uint64_t **)v410;
        }
        v408 = *v413;
      }
      while (v408);
      if (v409 != (uint64_t **)&v784)
      {
        if (v412 < v406) {
          v410 = (char *)v411;
        }
        if (v406 >= *((void *)v410 + 4)) {
          goto LABEL_502;
        }
      }
    }
    v782 = 0;
    long long v780 = 0u;
    long long v781 = 0u;
    long long __dst = 0u;
    long long v779 = 0u;
    float64x2_t v776 = 0u;
    float64x2_t v777 = 0u;
    float64x2_t v775 = 0u;
    Segment::Segment((Segment *)&v768, (const Segment *)((char *)v765 + 120 * v406));
    uint64_t v414 = 0;
    int v415 = 0;
    double v416 = 100000.0;
    do
    {
      if (v414) {
        Segment::mergeIntoSegment((Segment *)&v768, (const Segment *)((char *)v765 + 120 * v414 + 120 * v406));
      }
      double v417 = vabdd_f64(v768.f64[0], a4);
      if (v417 < a4 * 0.5)
      {
        uint64_t v418 = **((void **)v765 + 15 * v406 + 6);
        uint64_t v419 = v414 + v406;
        uint64_t v420 = *(void *)(*((void *)v765 + 15 * v414 + 15 * v406 + 7) - 8);
        v421 = v738;
        if (v738 < v739)
        {
          *(void *)v738 = v418;
          *((void *)v738 + 1) = v420;
          v422 = v738 + 16;
LABEL_535:
          v738 = v422;
          unint64_t v430 = v419 + 1;
          if (v419 + 1 < 0xEEEEEEEEEEEEEEEFLL * ((v766 - (Segment *)v765) >> 3))
          {
            v431 = v784;
            if (!v784) {
              goto LABEL_545;
            }
            v432 = (uint64_t **)&v784;
            do
            {
              v433 = v431;
              v434 = v432;
              unint64_t v435 = *((void *)v431 + 4);
              v436 = (char **)(v431 + 8);
              if (v435 >= v430)
              {
                v436 = (char **)v433;
                v432 = (uint64_t **)v433;
              }
              v431 = *v436;
            }
            while (v431);
            if (v432 == (uint64_t **)&v784) {
              goto LABEL_545;
            }
            if (v435 < v430) {
              v433 = (char *)v434;
            }
            if (v430 < *((void *)v433 + 4))
            {
LABEL_545:
              uint64_t v437 = *((void *)&v756 + 1);
              uint64_t v438 = ((*(void *)&v757.f64[0] - *((void *)&v756 + 1)) << 6) - 1;
              if (*(void *)&v757.f64[0] == *((void *)&v756 + 1)) {
                uint64_t v438 = 0;
              }
              unint64_t v439 = *(void *)&v758.f64[1] + *(void *)&v758.f64[0];
              if (v438 == *(void *)&v758.f64[1] + *(void *)&v758.f64[0])
              {
                sub_1C49DA0D4((uint64_t)&v756);
                uint64_t v437 = *((void *)&v756 + 1);
                unint64_t v439 = *(void *)&v758.f64[1] + *(void *)&v758.f64[0];
              }
              *(void *)(*(void *)(v437 + ((v439 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v439 & 0x1FF)) = v430;
              ++*(void *)&v758.f64[1];
            }
          }
          goto LABEL_550;
        }
        uint64_t v423 = (v738 - v737) >> 4;
        unint64_t v424 = v423 + 1;
        if ((unint64_t)(v423 + 1) >> 60) {
          sub_1C494A220();
        }
        uint64_t v425 = v739 - v737;
        if ((v739 - v737) >> 3 > v424) {
          unint64_t v424 = v425 >> 3;
        }
        if ((unint64_t)v425 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v426 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v426 = v424;
        }
        if (v426)
        {
          if (v426 >> 60) {
            sub_1C4949AA8();
          }
          v427 = (char *)operator new(16 * v426);
          v428 = &v427[16 * v423];
          *(void *)v428 = v418;
          *((void *)v428 + 1) = v420;
          uint64_t v429 = (uint64_t)v428;
          if (v738 != v737)
          {
            do
            {
LABEL_532:
              *(_OWORD *)(v429 - 16) = *((_OWORD *)v421 - 1);
              v429 -= 16;
              v421 -= 16;
            }
            while (v421 != v737);
            v421 = v737;
            v422 = v428 + 16;
            v737 = (char *)v429;
            v739 = &v427[16 * v426];
            if (!v421) {
              goto LABEL_535;
            }
LABEL_534:
            operator delete(v421);
            goto LABEL_535;
          }
        }
        else
        {
          v427 = 0;
          v428 = (char *)(16 * v423);
          *(void *)v428 = v418;
          *((void *)v428 + 1) = v420;
          uint64_t v429 = 16 * v423;
          if (v738 != v737) {
            goto LABEL_532;
          }
        }
        v422 = v428 + 16;
        v737 = (char *)v429;
        v739 = &v427[16 * v426];
        if (!v738) {
          goto LABEL_535;
        }
        goto LABEL_534;
      }
LABEL_550:
      if (v417 < v416)
      {
        float64x2_t v775 = v768;
        float64x2_t v776 = v769;
        float64x2_t v777 = v770;
        long long v440 = v771;
        size_t v441 = *((void *)&v771 + 1) - v771;
        unint64_t v442 = (uint64_t)(*((void *)&v771 + 1) - v771) >> 3;
        uint64_t v443 = v779;
        v444 = (char *)__dst;
        if (v442 > (uint64_t)(v779 - __dst) >> 3)
        {
          if ((void)__dst)
          {
            *((void *)&__dst + 1) = __dst;
            operator delete((void *)__dst);
            uint64_t v443 = 0;
            long long __dst = 0uLL;
            *(void *)&long long v779 = 0;
          }
          if ((v441 & 0x8000000000000000) != 0) {
            goto LABEL_961;
          }
          uint64_t v445 = v443 >> 2;
          if (v443 >> 2 <= v442) {
            uint64_t v445 = v442;
          }
          unint64_t v446 = (unint64_t)v443 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v445;
          if (v446 >> 61) {
LABEL_961:
          }
            sub_1C494A220();
          v447 = (char *)operator new(8 * v446);
          v444 = v447;
          *(void *)&long long __dst = v447;
          *((void *)&__dst + 1) = v447;
          *(void *)&long long v779 = &v447[8 * v446];
          if (*((void *)&v440 + 1) != (void)v440) {
            memcpy(v447, (const void *)v440, v441);
          }
          goto LABEL_571;
        }
        unint64_t v448 = (uint64_t)(*((void *)&__dst + 1) - __dst) >> 3;
        if (v448 >= v442)
        {
          if (*((void *)&v771 + 1) == (void)v771) {
            goto LABEL_571;
          }
          v450 = (void *)__dst;
          v449 = (const void *)v771;
        }
        else
        {
          if (*((void *)&__dst + 1) != (void)__dst)
          {
            memmove((void *)__dst, (const void *)v771, *((void *)&__dst + 1) - __dst);
            v444 = (char *)*((void *)&__dst + 1);
          }
          v449 = (const void *)(v440 + 8 * v448);
          size_t v441 = *((void *)&v440 + 1) - (void)v449;
          if (*((const void **)&v440 + 1) == v449)
          {
LABEL_571:
            *((void *)&__dst + 1) = &v444[v441];
            v451 = (char *)*((void *)&v772 + 1);
            v452 = (char *)v773;
            size_t v453 = v773 - *((void *)&v772 + 1);
            unint64_t v454 = (uint64_t)(v773 - *((void *)&v772 + 1)) >> 2;
            uint64_t v455 = *((void *)&v780 + 1);
            v456 = (char *)*((void *)&v779 + 1);
            if (v454 > (uint64_t)(*((void *)&v780 + 1) - *((void *)&v779 + 1)) >> 2)
            {
              if (*((void *)&v779 + 1))
              {
                *(void *)&long long v780 = *((void *)&v779 + 1);
                operator delete(*((void **)&v779 + 1));
                uint64_t v455 = 0;
                *((void *)&v779 + 1) = 0;
                long long v780 = 0uLL;
              }
              if ((v453 & 0x8000000000000000) != 0) {
                goto LABEL_960;
              }
              uint64_t v457 = v455 >> 1;
              if (v455 >> 1 <= v454) {
                uint64_t v457 = v454;
              }
              unint64_t v458 = (unint64_t)v455 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v457;
              if (v458 >> 62) {
LABEL_960:
              }
                sub_1C494A220();
              v459 = (char *)operator new(4 * v458);
              v456 = v459;
              *((void *)&v779 + 1) = v459;
              *(void *)&long long v780 = v459;
              *((void *)&v780 + 1) = &v459[4 * v458];
              if (v452 != v451) {
                memcpy(v459, v451, v453);
              }
LABEL_591:
              *(void *)&long long v780 = &v456[v453];
              v463 = (char *)v774[0];
              v464 = (char *)v774[1];
              size_t v465 = (char *)v774[1] - (char *)v774[0];
              unint64_t v466 = ((char *)v774[1] - (char *)v774[0]) >> 2;
              uint64_t v467 = (uint64_t)v782;
              v468 = (char *)v781;
              if (v466 > (uint64_t)&v782[-v781] >> 2)
              {
                if ((void)v781)
                {
                  *((void *)&v781 + 1) = v781;
                  operator delete((void *)v781);
                  uint64_t v467 = 0;
                  long long v781 = 0uLL;
                  v782 = 0;
                }
                if ((v465 & 0x8000000000000000) != 0) {
                  goto LABEL_960;
                }
                uint64_t v469 = v467 >> 1;
                if (v467 >> 1 <= v466) {
                  uint64_t v469 = v466;
                }
                unint64_t v470 = (unint64_t)v467 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v469;
                if (v470 >> 62) {
                  goto LABEL_960;
                }
                v471 = (char *)operator new(4 * v470);
                v468 = v471;
                *(void *)&long long v781 = v471;
                *((void *)&v781 + 1) = v471;
                v782 = &v471[4 * v470];
                if (v464 != v463) {
                  memcpy(v471, v463, v465);
                }
                goto LABEL_611;
              }
              unint64_t v472 = (uint64_t)(*((void *)&v781 + 1) - v781) >> 2;
              if (v472 >= v466)
              {
                if (v774[1] == v774[0])
                {
LABEL_611:
                  *((void *)&v781 + 1) = &v468[v465];
                  int v415 = v414;
                  double v416 = v417;
                  goto LABEL_612;
                }
                v474 = (void *)v781;
                v473 = (char *)v774[0];
              }
              else
              {
                if (*((void *)&v781 + 1) != (void)v781)
                {
                  memmove((void *)v781, v774[0], *((void *)&v781 + 1) - v781);
                  v468 = (char *)*((void *)&v781 + 1);
                }
                v473 = &v463[4 * v472];
                size_t v465 = v464 - v473;
                if (v464 == v473) {
                  goto LABEL_611;
                }
                v474 = v468;
              }
              memmove(v474, v473, v465);
              goto LABEL_611;
            }
            unint64_t v460 = (uint64_t)(v780 - *((void *)&v779 + 1)) >> 2;
            if (v460 >= v454)
            {
              if ((void)v773 == *((void *)&v772 + 1)) {
                goto LABEL_591;
              }
              v462 = (void *)*((void *)&v779 + 1);
              v461 = (char *)*((void *)&v772 + 1);
            }
            else
            {
              if ((void)v780 != *((void *)&v779 + 1))
              {
                memmove(*((void **)&v779 + 1), *((const void **)&v772 + 1), v780 - *((void *)&v779 + 1));
                v456 = (char *)v780;
              }
              v461 = &v451[4 * v460];
              size_t v453 = v452 - v461;
              if (v452 == v461) {
                goto LABEL_591;
              }
              v462 = v456;
            }
            memmove(v462, v461, v453);
            goto LABEL_591;
          }
          v450 = v444;
        }
        memmove(v450, v449, v441);
        goto LABEL_571;
      }
LABEL_612:
      if (v414 == 7) {
        break;
      }
      ++v414;
    }
    while (v414 + v406 < 0xEEEEEEEEEEEEEEEFLL * ((v766 - (Segment *)v765) >> 3));
    v475 = v784;
    v476 = &v784;
    v477 = &v784;
    if (v784)
    {
      v478 = (uint64_t **)&v784;
      v479 = v784;
      do
      {
        v480 = v479;
        v481 = v478;
        unint64_t v482 = *((void *)v479 + 4);
        if (v482 >= v406) {
          v478 = (uint64_t **)v479;
        }
        else {
          v479 += 8;
        }
        v479 = *(char **)v479;
      }
      while (v479);
      if (v478 == (uint64_t **)&v784) {
        goto LABEL_631;
      }
      if (v482 < v406) {
        v480 = (char *)v481;
      }
      if (v406 < *((void *)v480 + 4))
      {
LABEL_631:
        while (1)
        {
          while (1)
          {
            v477 = (char **)v475;
            unint64_t v483 = *((void *)v475 + 4);
            if (v406 >= v483) {
              break;
            }
            v475 = *v477;
            v476 = v477;
            if (!*v477) {
              goto LABEL_634;
            }
          }
          if (v483 >= v406) {
            break;
          }
          v475 = v477[1];
          if (!v475)
          {
            v476 = v477 + 1;
            goto LABEL_634;
          }
        }
      }
    }
    else
    {
LABEL_634:
      v484 = (uint64_t *)operator new(0x28uLL);
      v484[4] = v406;
      uint64_t *v484 = 0;
      v484[1] = 0;
      v484[2] = (uint64_t)v477;
      *v476 = (char *)v484;
      if (*v783)
      {
        v783 = (uint64_t *)*v783;
        v484 = (uint64_t *)*v476;
      }
      sub_1C4949FD4((uint64_t *)v784, v484);
      ++v785;
    }
    uint64_t v485 = **((void **)v765 + 15 * v406 + 6);
    unint64_t v486 = v406 + v415;
    uint64_t v487 = *(void *)(*((void *)v765 + 15 * v486 + 7) - 8);
    v488 = v738;
    if (v738 >= v739)
    {
      uint64_t v490 = (v738 - v737) >> 4;
      unint64_t v491 = v490 + 1;
      if ((unint64_t)(v490 + 1) >> 60) {
        sub_1C494A220();
      }
      uint64_t v492 = v739 - v737;
      if ((v739 - v737) >> 3 > v491) {
        unint64_t v491 = v492 >> 3;
      }
      if ((unint64_t)v492 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v493 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v493 = v491;
      }
      if (v493)
      {
        if (v493 >> 60) {
          sub_1C4949AA8();
        }
        v494 = (char *)operator new(16 * v493);
        v495 = &v494[16 * v490];
        *(void *)v495 = v485;
        *((void *)v495 + 1) = v487;
        uint64_t v496 = (uint64_t)v495;
        if (v738 != v737)
        {
          do
          {
LABEL_648:
            *(_OWORD *)(v496 - 16) = *((_OWORD *)v488 - 1);
            v496 -= 16;
            v488 -= 16;
          }
          while (v488 != v737);
          v488 = v737;
          v489 = v495 + 16;
          v737 = (char *)v496;
          v739 = &v494[16 * v493];
          if (!v488) {
            goto LABEL_651;
          }
LABEL_650:
          operator delete(v488);
          goto LABEL_651;
        }
      }
      else
      {
        v494 = 0;
        v495 = (char *)(16 * v490);
        *(void *)v495 = v485;
        *((void *)v495 + 1) = v487;
        uint64_t v496 = 16 * v490;
        if (v738 != v737) {
          goto LABEL_648;
        }
      }
      v489 = v495 + 16;
      v737 = (char *)v496;
      v739 = &v494[16 * v493];
      if (!v738) {
        goto LABEL_651;
      }
      goto LABEL_650;
    }
    *(void *)v738 = v485;
    *((void *)v738 + 1) = v487;
    v489 = v738 + 16;
LABEL_651:
    v738 = v489;
    unint64_t v497 = v486 + 1;
    if (v497 < 0xEEEEEEEEEEEEEEEFLL * ((v766 - (Segment *)v765) >> 3))
    {
      v498 = v784;
      if (!v784) {
        goto LABEL_661;
      }
      v499 = (uint64_t **)&v784;
      do
      {
        v500 = v498;
        v501 = v499;
        unint64_t v502 = *((void *)v498 + 4);
        v503 = (char **)(v498 + 8);
        if (v502 >= v497)
        {
          v503 = (char **)v500;
          v499 = (uint64_t **)v500;
        }
        v498 = *v503;
      }
      while (v498);
      if (v499 == (uint64_t **)&v784) {
        goto LABEL_661;
      }
      if (v502 < v497) {
        v500 = (char *)v501;
      }
      if (v497 < *((void *)v500 + 4))
      {
LABEL_661:
        uint64_t v504 = *((void *)&v756 + 1);
        uint64_t v505 = ((*(void *)&v757.f64[0] - *((void *)&v756 + 1)) << 6) - 1;
        if (*(void *)&v757.f64[0] == *((void *)&v756 + 1)) {
          uint64_t v505 = 0;
        }
        unint64_t v506 = *(void *)&v758.f64[1] + *(void *)&v758.f64[0];
        if (v505 == *(void *)&v758.f64[1] + *(void *)&v758.f64[0])
        {
          sub_1C49DA0D4((uint64_t)&v756);
          uint64_t v504 = *((void *)&v756 + 1);
          unint64_t v506 = *(void *)&v758.f64[1] + *(void *)&v758.f64[0];
        }
        *(void *)(*(void *)(v504 + ((v506 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v506 & 0x1FF)) = v497;
        ++*(void *)&v758.f64[1];
      }
    }
    if (v774[0])
    {
      v774[1] = v774[0];
      operator delete(v774[0]);
    }
    if (*((void *)&v772 + 1))
    {
      *(void *)&long long v773 = *((void *)&v772 + 1);
      operator delete(*((void **)&v772 + 1));
    }
    if ((void)v771)
    {
      *((void *)&v771 + 1) = v771;
      operator delete((void *)v771);
    }
    if ((void)v781)
    {
      *((void *)&v781 + 1) = v781;
      operator delete((void *)v781);
    }
    if (*((void *)&v779 + 1))
    {
      *(void *)&long long v780 = *((void *)&v779 + 1);
      operator delete(*((void **)&v779 + 1));
    }
    if ((void)__dst)
    {
      *((void *)&__dst + 1) = __dst;
      operator delete((void *)__dst);
    }
LABEL_502:
    float64_t v405 = v758.f64[1];
    if (*(void *)&v758.f64[1]) {
      continue;
    }
    break;
  }
  v403 = (void **)*((void *)&v756 + 1);
  v404 = *(void ***)&v757.f64[0];
LABEL_682:
  v758.f64[1] = 0.0;
  unint64_t v507 = (char *)v404 - (char *)v403;
  if ((unint64_t)((char *)v404 - (char *)v403) >= 0x11)
  {
    do
    {
      operator delete(*v403);
      v404 = *(void ***)&v757.f64[0];
      v403 = (void **)(*((void *)&v756 + 1) + 8);
      *((void *)&v756 + 1) = v403;
      unint64_t v507 = *(void *)&v757.f64[0] - (void)v403;
    }
    while (*(void *)&v757.f64[0] - (void)v403 > 0x10uLL);
  }
  unint64_t v508 = v507 >> 3;
  if (v508 == 1)
  {
    uint64_t v509 = 256;
LABEL_688:
    *(void *)&v758.f64[0] = v509;
  }
  else if (v508 == 2)
  {
    uint64_t v509 = 512;
    goto LABEL_688;
  }
  if (v403 != v404)
  {
    do
    {
      v510 = *v403++;
      operator delete(v510);
    }
    while (v403 != v404);
    if (*(void *)&v757.f64[0] != *((void *)&v756 + 1)) {
      *(void *)&v757.f64[0] += (*((void *)&v756 + 1) - *(void *)&v757.f64[0] + 7) & 0xFFFFFFFFFFFFFFF8;
    }
  }
  if ((void)v756) {
    operator delete((void *)v756);
  }
  sub_1C4999C7C((uint64_t)&v783, v784);
  objc_msgSend_strokeCount(v728, v511, v512, v513, v514, v515);
  uint64_t v517 = *a3;
  v516 = (void *)a3[1];
  if ((unint64_t)v516 < a3[2])
  {
    void *v516 = 0;
    v516[1] = 0;
    v516[2] = 0;
    a3[1] = v516 + 3;
    a3[1] = v516 + 3;
    v518 = v737;
    if (v738 == v737) {
      goto LABEL_718;
    }
LABEL_699:
    unint64_t v519 = 0;
    unint64_t v520 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v516 - v517) >> 3);
    v521 = a3;
    while (2)
    {
      while (1)
      {
        long long v522 = *(_OWORD *)&v518[16 * v519];
        v523 = (char **)(*v521 + 24 * v520);
        v525 = v523 + 1;
        v524 = v523[1];
        unint64_t v526 = (unint64_t)v523[2];
        if ((unint64_t)v524 >= v526) {
          break;
        }
        *(_OWORD *)v524 = v522;
        void *v525 = v524 + 16;
        ++v519;
        v518 = v737;
        if (v519 >= (v738 - v737) >> 4) {
          goto LABEL_718;
        }
      }
      v527 = *v523;
      uint64_t v528 = (v524 - *v523) >> 4;
      unint64_t v529 = v528 + 1;
      if ((unint64_t)(v528 + 1) >> 60) {
        sub_1C494A220();
      }
      uint64_t v530 = v526 - (void)v527;
      if (v530 >> 3 > v529) {
        unint64_t v529 = v530 >> 3;
      }
      if ((unint64_t)v530 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v531 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v531 = v529;
      }
      if (v531)
      {
        *(_OWORD *)v735 = v522;
        if (v531 >> 60) {
          sub_1C4949AA8();
        }
        v532 = (char *)operator new(16 * v531);
        v533 = &v532[16 * v528];
        *(_OWORD *)v533 = *(_OWORD *)v735;
        v534 = v533 + 16;
        if (v524 == v527)
        {
LABEL_715:
          *v523 = v533;
          void *v525 = v534;
          v523[2] = &v532[16 * v531];
          if (v524) {
            operator delete(v524);
          }
          v521 = a3;
          void *v525 = v534;
          ++v519;
          v518 = v737;
          if (v519 >= (v738 - v737) >> 4) {
            goto LABEL_718;
          }
          continue;
        }
      }
      else
      {
        v532 = 0;
        v533 = (char *)(16 * v528);
        v535 = (_OWORD *)(16 * v528);
        _OWORD *v535 = v522;
        v534 = v535 + 1;
        if (v524 == v527) {
          goto LABEL_715;
        }
      }
      break;
    }
    do
    {
      *((_OWORD *)v533 - 1) = *((_OWORD *)v524 - 1);
      v533 -= 16;
      v524 -= 16;
    }
    while (v524 != v527);
    v524 = *v523;
    goto LABEL_715;
  }
  a3[1] = sub_1C49D9ED0((char **)a3, 0, 0);
  v518 = v737;
  if (v738 != v737) {
    goto LABEL_699;
  }
LABEL_718:
  v536 = v728;
  objc_msgSend_bounds(v536, v537, v538, v539, v540, v541);
  if (v547 >= a4 + a4
    && (unint64_t)objc_msgSend_pointCount(v536, v542, v543, v544, v545, v546) >= 0x19
    && ((unint64_t)objc_msgSend_strokeCount(v536, v548, v549, v550, v551, v552) > 2
     || (unint64_t)objc_msgSend_pointCount(v536, v582, v583, v584, v585, v586) >= 0x32))
  {

    goto LABEL_745;
  }

  int v563 = objc_msgSend_strokeCount(v536, v553, v554, v555, v556, v557);
  uint64_t v565 = *a3;
  v564 = (void *)a3[1];
  if ((unint64_t)v564 >= a3[2])
  {
    v566 = sub_1C49D9ED0((char **)a3, 0, 0);
  }
  else
  {
    void *v564 = 0;
    v564[1] = 0;
    v564[2] = 0;
    v566 = (char *)(v564 + 3);
    a3[1] = v564 + 3;
  }
  a3[1] = v566;
  uint64_t v568 = v563 - 1;
  v567 = (char **)(*a3 + 8 * (((uint64_t)v564 - v565) >> 3));
  v569 = (uint64_t *)(v567 + 1);
  v570 = v567[1];
  v572 = v567 + 2;
  unint64_t v571 = (unint64_t)v567[2];
  if ((unint64_t)v570 < v571)
  {
    *(void *)v570 = 0;
    *((void *)v570 + 1) = v568;
    uint64_t *v569 = (uint64_t)(v570 + 16);
    goto LABEL_745;
  }
  v573 = *v567;
  uint64_t v574 = (v570 - *v567) >> 4;
  unint64_t v575 = v574 + 1;
  if ((unint64_t)(v574 + 1) >> 60) {
    sub_1C494A220();
  }
  uint64_t v576 = v571 - (void)v573;
  if (v576 >> 3 > v575) {
    unint64_t v575 = v576 >> 3;
  }
  if ((unint64_t)v576 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v577 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v577 = v575;
  }
  if (v577)
  {
    if (v577 >> 60) {
      sub_1C4949AA8();
    }
    v578 = (char *)operator new(16 * v577);
    v579 = &v578[16 * v574];
    v580 = &v578[16 * v577];
    *(void *)v579 = 0;
    *((void *)v579 + 1) = v568;
    uint64_t v581 = (uint64_t)(v579 + 16);
    if (v570 == v573)
    {
LABEL_742:
      *v567 = v579;
      uint64_t *v569 = v581;
      *v572 = v580;
      if (v570) {
        goto LABEL_743;
      }
      goto LABEL_744;
    }
  }
  else
  {
    v579 = (char *)(16 * v574);
    v580 = 0;
    *(void *)v579 = 0;
    *((void *)v579 + 1) = v568;
    uint64_t v581 = 16 * v574 + 16;
    if (v570 == v573) {
      goto LABEL_742;
    }
  }
  do
  {
    *((_OWORD *)v579 - 1) = *((_OWORD *)v570 - 1);
    v579 -= 16;
    v570 -= 16;
  }
  while (v570 != v573);
  v570 = *v567;
  *v567 = v579;
  uint64_t *v569 = v581;
  *v572 = v580;
  if (v570) {
LABEL_743:
  }
    operator delete(v570);
LABEL_744:
  uint64_t *v569 = v581;
LABEL_745:
  float64x2_t v775 = 0uLL;
  v776.f64[0] = 0.0;
  float64x2_t v768 = 0uLL;
  v769.f64[0] = 0.0;
  objc_msgSend_strokeCount(v536, v558, v559, v560, v561, v562);
  v733 = v536;
  v587 = (char *)v750;
  v588 = a2;
  double v589 = 0.0;
  if (v751 != v750)
  {
    unint64_t v590 = 0;
    uint64_t v591 = 0;
    do
    {
      v593 = &v587[120 * v590];
      uint64_t v594 = v591 + ((uint64_t)(*((void *)v593 + 7) - *((void *)v593 + 6)) >> 3);
      uint64_t v595 = v594 - 1;
      double v596 = *(double *)v593;
      if (*((double *)v593 + 1) <= 0.0) {
        double v597 = 1.0;
      }
      else {
        double v597 = *((double *)v593 + 1);
      }
      if (*(void *)&v589 < *(void *)&v776.f64[0])
      {
        **(void **)&double v589 = v591;
        *(void *)(*(void *)&v589 + 8) = v595;
        *(void *)&v589 += 16;
        float v598 = v596 / v597;
        v775.f64[1] = v589;
        v600 = *(float **)&v768.f64[1];
        float64_t v599 = v769.f64[0];
        if (*(void *)&v768.f64[1] >= *(void *)&v769.f64[0]) {
          goto LABEL_769;
        }
        goto LABEL_747;
      }
      float64_t v601 = v775.f64[0];
      uint64_t v602 = (uint64_t)(*(void *)&v589 - *(void *)&v775.f64[0]) >> 4;
      unint64_t v603 = v602 + 1;
      if ((unint64_t)(v602 + 1) >> 60) {
        sub_1C494A220();
      }
      uint64_t v604 = *(void *)&v776.f64[0] - *(void *)&v775.f64[0];
      if ((uint64_t)(*(void *)&v776.f64[0] - *(void *)&v775.f64[0]) >> 3 > v603) {
        unint64_t v603 = v604 >> 3;
      }
      if ((unint64_t)v604 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v605 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v605 = v603;
      }
      if (v605)
      {
        if (v605 >> 60) {
          goto LABEL_968;
        }
        v606 = (char *)operator new(16 * v605);
        v607 = &v606[16 * v602];
        *(void *)v607 = v591;
        *((void *)v607 + 1) = v595;
        if (*(void *)&v589 == *(void *)&v601)
        {
LABEL_780:
          float64_t v609 = v589;
          *(void *)&double v589 = v607 + 16;
          *(void *)&v775.f64[0] = v607;
          *(void *)&v775.f64[1] = v607 + 16;
          *(void *)&v776.f64[0] = &v606[16 * v605];
          if (v609 != 0.0) {
            goto LABEL_767;
          }
          goto LABEL_768;
        }
      }
      else
      {
        v606 = 0;
        v607 = (char *)(16 * v602);
        *(void *)v607 = v591;
        *((void *)v607 + 1) = v595;
        if (*(void *)&v589 == *(void *)&v601) {
          goto LABEL_780;
        }
      }
      float64_t v608 = *(double *)&v607;
      do
      {
        *(_OWORD *)(*(void *)&v608 - 16) = *(_OWORD *)(*(void *)&v589 - 16);
        *(void *)&v608 -= 16;
        *(void *)&v589 -= 16;
      }
      while (*(void *)&v589 != *(void *)&v601);
      float64_t v609 = v775.f64[0];
      *(void *)&double v589 = v607 + 16;
      v775.f64[0] = v608;
      *(void *)&v775.f64[1] = v607 + 16;
      *(void *)&v776.f64[0] = &v606[16 * v605];
      if (v609 != 0.0) {
LABEL_767:
      }
        operator delete(*(void **)&v609);
LABEL_768:
      v588 = a2;
      float v598 = v596 / v597;
      v775.f64[1] = v589;
      v600 = *(float **)&v768.f64[1];
      float64_t v599 = v769.f64[0];
      if (*(void *)&v768.f64[1] >= *(void *)&v769.f64[0])
      {
LABEL_769:
        v610 = *(float **)&v768.f64[0];
        v611 = (char *)v600 - *(void *)&v768.f64[0];
        uint64_t v612 = ((uint64_t)v600 - *(void *)&v768.f64[0]) >> 2;
        unint64_t v613 = v612 + 1;
        if ((unint64_t)(v612 + 1) >> 62) {
          sub_1C494A220();
        }
        uint64_t v614 = *(void *)&v599 - *(void *)&v768.f64[0];
        if (v614 >> 1 > v613) {
          unint64_t v613 = v614 >> 1;
        }
        if ((unint64_t)v614 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v615 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v615 = v613;
        }
        if (v615)
        {
          if (v615 >> 62) {
LABEL_968:
          }
            sub_1C4949AA8();
          v616 = operator new(4 * v615);
          v617 = (float *)((char *)v616 + 4 * v612);
          float *v617 = v598;
          uint64_t v592 = (uint64_t)(v617 + 1);
          int64_t v618 = (char *)v600 - (char *)v610;
          if (v600 == v610) {
            goto LABEL_789;
          }
LABEL_783:
          unint64_t v619 = v618 - 4;
          if (v619 < 0x2C) {
            goto LABEL_988;
          }
          if ((unint64_t)((char *)v600 - &v611[(void)v616]) < 0x20) {
            goto LABEL_988;
          }
          uint64_t v620 = (v619 >> 2) + 1;
          uint64_t v621 = 4 * (v620 & 0x7FFFFFFFFFFFFFF8);
          v622 = &v600[v621 / 0xFFFFFFFFFFFFFFFCLL];
          v617 = (float *)((char *)v617 - v621);
          v623 = (char *)v616 + 4 * v612 - 16;
          v624 = v600 - 4;
          uint64_t v625 = v620 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v626 = *(_OWORD *)v624;
            *(v623 - 1) = *((_OWORD *)v624 - 1);
            _OWORD *v623 = v626;
            v623 -= 2;
            v624 -= 8;
            v625 -= 8;
          }
          while (v625);
          v600 = v622;
          if (v620 != (v620 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_988:
            do
            {
              int v627 = *((_DWORD *)v600-- - 1);
              *((_DWORD *)v617-- - 1) = v627;
            }
            while (v600 != v610);
          }
        }
        else
        {
          v616 = 0;
          v617 = (float *)(4 * v612);
          *(float *)(4 * v612) = v598;
          uint64_t v592 = 4 * v612 + 4;
          int64_t v618 = (char *)v600 - (char *)v610;
          if (v600 != v610) {
            goto LABEL_783;
          }
        }
LABEL_789:
        *(void *)&v768.f64[0] = v617;
        *(void *)&v769.f64[0] = (char *)v616 + 4 * v615;
        if (v610) {
          operator delete(v610);
        }
        v588 = a2;
        goto LABEL_748;
      }
LABEL_747:
      float *v600 = v598;
      uint64_t v592 = (uint64_t)(v600 + 1);
LABEL_748:
      *(void *)&v768.f64[1] = v592;
      ++v590;
      v587 = (char *)v750;
      uint64_t v591 = v594;
    }
    while (0xEEEEEEEEEEEEEEEFLL * ((v751 - (Segment *)v750) >> 3) > v590);
  }
  long long v756 = 0uLL;
  v757.f64[0] = 0.0;
  if (*(void *)&v589 == *(void *)&v775.f64[0]) {
    goto LABEL_855;
  }
  uint64_t v628 = 0;
  if ((unint64_t)((uint64_t)(*(void *)&v589 - *(void *)&v775.f64[0]) >> 4) <= 1) {
    uint64_t v629 = 1;
  }
  else {
    uint64_t v629 = (uint64_t)(*(void *)&v589 - *(void *)&v775.f64[0]) >> 4;
  }
  uint64_t v736 = v629;
  while (2)
  {
    while (2)
    {
      if (*(float *)(*(void *)&v768.f64[0] + 4 * v628) < 1.0
        || (v630 = (uint64_t *)(*(void *)&v775.f64[0] + 16 * v628), v632 = *v630, uint64_t v631 = v630[1], v631 - *v630 <= 1))
      {
        v633 = (_OWORD *)(*(void *)&v775.f64[0] + 16 * v628);
        v634 = (char *)*((void *)&v756 + 1);
        if (*((void *)&v756 + 1) < *(void *)&v757.f64[0])
        {
          **((_OWORD **)&v756 + 1) = *v633;
          *((void *)&v756 + 1) = v634 + 16;
          if (++v628 == v629) {
            goto LABEL_855;
          }
          continue;
        }
        v635 = (char *)v756;
        uint64_t v636 = (uint64_t)(*((void *)&v756 + 1) - v756) >> 4;
        unint64_t v637 = v636 + 1;
        if ((unint64_t)(v636 + 1) >> 60) {
          sub_1C494A220();
        }
        uint64_t v638 = *(void *)&v757.f64[0] - v756;
        if ((uint64_t)(*(void *)&v757.f64[0] - v756) >> 3 > v637) {
          unint64_t v637 = v638 >> 3;
        }
        if ((unint64_t)v638 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v639 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v639 = v637;
        }
        if (v639)
        {
          if (v639 >> 60) {
            sub_1C4949AA8();
          }
          v640 = (char *)operator new(16 * v639);
          v641 = &v640[16 * v636];
          *(_OWORD *)v641 = *v633;
          uint64_t v642 = (uint64_t)v641;
          if (v634 != v635)
          {
LABEL_810:
            uint64_t v629 = v736;
            do
            {
              *(_OWORD *)(v642 - 16) = *((_OWORD *)v634 - 1);
              v642 -= 16;
              v634 -= 16;
            }
            while (v634 != v635);
            v634 = (char *)v756;
            v643 = v641 + 16;
            *(void *)&long long v756 = v642;
            *(void *)&v757.f64[0] = &v640[16 * v639];
            if (v634) {
LABEL_813:
            }
              operator delete(v634);
LABEL_814:
            v588 = a2;
            *((void *)&v756 + 1) = v643;
            if (++v628 == v629) {
              goto LABEL_855;
            }
            continue;
          }
        }
        else
        {
          v640 = 0;
          v641 = (char *)(16 * v636);
          *(_OWORD *)(16 * v636) = *v633;
          uint64_t v642 = 16 * v636;
          if (v634 != v635) {
            goto LABEL_810;
          }
        }
        uint64_t v629 = v736;
        v643 = v641 + 16;
        *(void *)&long long v756 = v642;
        *(void *)&v757.f64[0] = &v640[16 * v639];
        if (v634) {
          goto LABEL_813;
        }
        goto LABEL_814;
      }
      break;
    }
    v783 = 0;
    v784 = 0;
    unint64_t v785 = 0;
    if (v631 < v632) {
      goto LABEL_854;
    }
    v644 = 0;
    v645 = 0;
    v646 = 0;
    while (2)
    {
      while (v646 < v645)
      {
        *v646++ = v632;
        v784 = (char *)v646;
        BOOL v81 = v632++ == v631;
        if (v81) {
          goto LABEL_852;
        }
      }
      uint64_t v647 = v646 - v644;
      unint64_t v648 = v647 + 1;
      if ((unint64_t)(v647 + 1) >> 61) {
        sub_1C494A220();
      }
      if (((char *)v645 - (char *)v644) >> 2 > v648) {
        unint64_t v648 = ((char *)v645 - (char *)v644) >> 2;
      }
      if ((unint64_t)((char *)v645 - (char *)v644) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v649 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v649 = v648;
      }
      if (!v649)
      {
        v650 = 0;
        v651 = (uint64_t *)(8 * v647);
        *(void *)(8 * v647) = v632;
        v652 = (uint64_t *)(8 * v647 + 8);
        int64_t v653 = (char *)v646 - (char *)v644;
        if (v646 == v644) {
          goto LABEL_834;
        }
LABEL_831:
        unint64_t v654 = v653 - 8;
        if (v654 >= 0x168)
        {
          unint64_t v657 = ((char *)(v646 - 1) - (char *)v644) & 0xFFFFFFFFFFFFFFF8;
          if (&v650[(char *)v646 - (char *)v644 - 8 - v657] > &v650[(char *)v646 - (char *)v644 - 8])
          {
            v655 = v646;
          }
          else if ((uint64_t *)((char *)v646 - v657 - 8) > v646 - 1)
          {
            v655 = v646;
          }
          else if ((unint64_t)((char *)v644 - v650) >= 0x20)
          {
            uint64_t v658 = (v654 >> 3) + 1;
            uint64_t v659 = 8 * (v658 & 0x3FFFFFFFFFFFFFFCLL);
            v655 = &v646[v659 / 0xFFFFFFFFFFFFFFF8];
            v651 = (uint64_t *)((char *)v651 - v659);
            v660 = &v650[8 * v647 - 16];
            v661 = v646 - 2;
            uint64_t v662 = v658 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v663 = *(_OWORD *)v661;
              *(v660 - 1) = *((_OWORD *)v661 - 1);
              _OWORD *v660 = v663;
              v660 -= 2;
              v661 -= 4;
              v662 -= 4;
            }
            while (v662);
            if (v658 == (v658 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_834;
            }
          }
          else
          {
            v655 = v646;
          }
        }
        else
        {
          v655 = v646;
        }
        do
        {
          uint64_t v656 = *--v655;
          *--v651 = v656;
        }
        while (v655 != v644);
        goto LABEL_834;
      }
      if (v649 >> 61) {
        sub_1C4949AA8();
      }
      v650 = operator new(8 * v649);
      v651 = (uint64_t *)&v650[8 * v647];
      uint64_t *v651 = v632;
      v652 = v651 + 1;
      int64_t v653 = (char *)v646 - (char *)v644;
      if (v646 != v644) {
        goto LABEL_831;
      }
LABEL_834:
      v645 = (uint64_t *)&v650[8 * v649];
      v783 = v651;
      v784 = (char *)v652;
      unint64_t v785 = (unint64_t)v645;
      if (v644) {
        operator delete(v644);
      }
      v644 = v651;
      v784 = (char *)v652;
      v646 = v652;
      BOOL v81 = v632++ == v631;
      if (!v81) {
        continue;
      }
      break;
    }
LABEL_852:
    uint64_t v629 = v736;
    if (v783) {
      operator delete(v783);
    }
LABEL_854:
    v588 = a2;
    if (++v628 != v629) {
      continue;
    }
    break;
  }
LABEL_855:
  v665 = (char *)v740;
  v664 = v741;
  if (v741 != v740)
  {
    unint64_t v666 = 0;
    v667 = (char *)v588[1];
    do
    {
      v669 = &v665[120 * v666];
      uint64_t v670 = *((void *)v669 + 6);
      uint64_t v671 = ((*((void *)v669 + 7) - v670) >> 3) - 1;
      unint64_t v672 = v588[2];
      if ((unint64_t)v667 < v672)
      {
        *(void *)v667 = *(void *)(v670 + 8 * v671);
        uint64_t v668 = (uint64_t)(v667 + 8);
      }
      else
      {
        v673 = (char *)*v588;
        uint64_t v674 = (uint64_t)&v667[-*v588];
        uint64_t v675 = v674 >> 3;
        unint64_t v676 = (v674 >> 3) + 1;
        if (v676 >> 61) {
          sub_1C494A220();
        }
        uint64_t v677 = v672 - (void)v673;
        if (v677 >> 2 > v676) {
          unint64_t v676 = v677 >> 2;
        }
        if ((unint64_t)v677 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v678 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v678 = v676;
        }
        if (v678)
        {
          if (v678 >> 61) {
            sub_1C4949AA8();
          }
          v679 = operator new(8 * v678);
          v680 = &v679[8 * v675];
          void *v680 = *(void *)(v670 + 8 * v671);
          uint64_t v668 = (uint64_t)(v680 + 1);
          int64_t v681 = v667 - v673;
          if (v667 != v673)
          {
LABEL_869:
            unint64_t v682 = v681 - 8;
            if (v682 < 0x168
              || (unint64_t v687 = (v667 - 8 - v673) & 0xFFFFFFFFFFFFFFF8, &v679[v674 - 8 - v687] > &v679[v674 - 8])
              || &v667[-v687 - 8] > v667 - 8
              || (unint64_t)(v667 - v679 - v674) < 0x20)
            {
              v683 = v667;
            }
            else
            {
              uint64_t v688 = (v682 >> 3) + 1;
              uint64_t v689 = 8 * (v688 & 0x3FFFFFFFFFFFFFFCLL);
              v683 = &v667[-v689];
              v680 = (void *)((char *)v680 - v689);
              v690 = &v679[8 * v675 - 16];
              v691 = v667 - 16;
              uint64_t v692 = v688 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v693 = *(_OWORD *)v691;
                *(v690 - 1) = *((_OWORD *)v691 - 1);
                _OWORD *v690 = v693;
                v690 -= 2;
                v691 -= 32;
                v692 -= 4;
              }
              while (v692);
              if (v688 == (v688 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_872:
                v685 = &v679[8 * v678];
                v588 = a2;
                *a2 = v680;
                a2[1] = v668;
                a2[2] = v685;
                if (!v673) {
                  goto LABEL_858;
                }
LABEL_876:
                operator delete(v673);
                v588 = a2;
                v665 = (char *)v740;
                v664 = v741;
                goto LABEL_858;
              }
            }
            do
            {
              uint64_t v684 = *((void *)v683 - 1);
              v683 -= 8;
              *--v680 = v684;
            }
            while (v683 != v673);
            goto LABEL_872;
          }
        }
        else
        {
          v679 = 0;
          v680 = (void *)(8 * v675);
          *(void *)(8 * v675) = *(void *)(v670 + 8 * v671);
          uint64_t v668 = 8 * v675 + 8;
          int64_t v681 = v667 - v673;
          if (v667 != v673) {
            goto LABEL_869;
          }
        }
        v686 = &v679[8 * v678];
        v588 = a2;
        *a2 = v680;
        a2[1] = v668;
        a2[2] = v686;
        if (v673) {
          goto LABEL_876;
        }
      }
LABEL_858:
      v588[1] = v668;
      ++v666;
      v667 = (char *)v668;
    }
    while (0xEEEEEEEEEEEEEEEFLL * ((v664 - v665) >> 3) > v666);
  }
  if ((void)v756) {
    operator delete((void *)v756);
  }
  if (*(void *)&v768.f64[0]) {
    operator delete(*(void **)&v768.f64[0]);
  }
  if (*(void *)&v775.f64[0]) {
    operator delete(*(void **)&v775.f64[0]);
  }
  if (v737) {
    operator delete(v737);
  }
  v694 = (char *)v740;
  if (v740)
  {
    v695 = v741;
    v696 = v740;
    if (v741 != v740)
    {
      do
      {
        v697 = (void *)*((void *)v695 - 3);
        if (v697)
        {
          *((void *)v695 - 2) = v697;
          operator delete(v697);
        }
        v698 = (void *)*((void *)v695 - 6);
        if (v698)
        {
          *((void *)v695 - 5) = v698;
          operator delete(v698);
        }
        v699 = (void *)*((void *)v695 - 9);
        if (v699)
        {
          *((void *)v695 - 8) = v699;
          operator delete(v699);
        }
        v695 -= 120;
      }
      while (v695 != v694);
      v696 = v740;
    }
    v741 = v694;
    operator delete(v696);
  }
  v700 = (char *)v747;
  if (v747)
  {
    v701 = v748;
    v702 = v747;
    if (v748 != v747)
    {
      do
      {
        v703 = (void *)*((void *)v701 - 3);
        if (v703)
        {
          *((void *)v701 - 2) = v703;
          operator delete(v703);
        }
        v704 = (void *)*((void *)v701 - 6);
        if (v704)
        {
          *((void *)v701 - 5) = v704;
          operator delete(v704);
        }
        v705 = (void *)*((void *)v701 - 9);
        if (v705)
        {
          *((void *)v701 - 8) = v705;
          operator delete(v705);
        }
        v701 -= 120;
      }
      while (v701 != v700);
      v702 = v747;
    }
    v748 = v700;
    operator delete(v702);
  }
  v706 = (Segment *)v765;
  if (v765)
  {
    v707 = v766;
    v708 = v765;
    if (v766 != v765)
    {
      do
      {
        v709 = (void *)*((void *)v707 - 3);
        if (v709)
        {
          *((void *)v707 - 2) = v709;
          operator delete(v709);
        }
        v710 = (void *)*((void *)v707 - 6);
        if (v710)
        {
          *((void *)v707 - 5) = v710;
          operator delete(v710);
        }
        v711 = (void *)*((void *)v707 - 9);
        if (v711)
        {
          *((void *)v707 - 8) = v711;
          operator delete(v711);
        }
        v707 = (Segment *)((char *)v707 - 120);
      }
      while (v707 != v706);
      v708 = v765;
    }
    v766 = v706;
    operator delete(v708);
  }
  v712 = (Segment *)v750;
  if (v750)
  {
    v713 = v751;
    v714 = v750;
    if (v751 != v750)
    {
      do
      {
        v715 = (void *)*((void *)v713 - 3);
        if (v715)
        {
          *((void *)v713 - 2) = v715;
          operator delete(v715);
        }
        v716 = (void *)*((void *)v713 - 6);
        if (v716)
        {
          *((void *)v713 - 5) = v716;
          operator delete(v716);
        }
        v717 = (void *)*((void *)v713 - 9);
        if (v717)
        {
          *((void *)v713 - 8) = v717;
          operator delete(v717);
        }
        v713 = (Segment *)((char *)v713 - 120);
      }
      while (v713 != v712);
      v714 = v750;
    }
    v751 = v712;
    operator delete(v714);
  }
  v718 = (Segment *)v753;
  if (v753)
  {
    v719 = v754;
    v720 = v753;
    if (v754 != v753)
    {
      do
      {
        v721 = (void *)*((void *)v719 - 3);
        if (v721)
        {
          *((void *)v719 - 2) = v721;
          operator delete(v721);
        }
        v722 = (void *)*((void *)v719 - 6);
        if (v722)
        {
          *((void *)v719 - 5) = v722;
          operator delete(v722);
        }
        v723 = (void *)*((void *)v719 - 9);
        if (v723)
        {
          *((void *)v719 - 8) = v723;
          operator delete(v723);
        }
        v719 = (Segment *)((char *)v719 - 120);
      }
      while (v719 != v718);
      v720 = v753;
    }
    v754 = v718;
    operator delete(v720);
  }
}

void sub_1C49D7B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1C49D9B84(&a29);
  sub_1C49D9B84(&a38);
  unint64_t v64 = a62;
  if (a62)
  {
    uint64_t v67 = a63;
    int v68 = a62;
    if ((void *)a63 != a62)
    {
      do
      {
        double v69 = *(void **)(v67 - 24);
        if (v69)
        {
          *(void *)(v67 - 16) = v69;
          operator delete(v69);
        }
        double v70 = *(void **)(v67 - 48);
        if (v70)
        {
          *(void *)(v67 - 40) = v70;
          operator delete(v70);
        }
        uint64_t v71 = *(void **)(v67 - 72);
        if (v71)
        {
          *(void *)(v67 - 64) = v71;
          operator delete(v71);
        }
        v67 -= 120;
      }
      while ((void *)v67 != v64);
      int v68 = a62;
    }
    a63 = (uint64_t)v64;
    operator delete(v68);
    int v65 = a41;
    if (!a41)
    {
LABEL_5:
      int v66 = a44;
      if (!a44) {
        goto LABEL_6;
      }
      goto LABEL_29;
    }
  }
  else
  {
    int v65 = a41;
    if (!a41) {
      goto LABEL_5;
    }
  }
  uint64_t v72 = a42;
  double v73 = v65;
  if ((void *)a42 != v65)
  {
    do
    {
      int v74 = *(void **)(v72 - 24);
      if (v74)
      {
        *(void *)(v72 - 16) = v74;
        operator delete(v74);
      }
      double v75 = *(void **)(v72 - 48);
      if (v75)
      {
        *(void *)(v72 - 40) = v75;
        operator delete(v75);
      }
      unint64_t v76 = *(void **)(v72 - 72);
      if (v76)
      {
        *(void *)(v72 - 64) = v76;
        operator delete(v76);
      }
      v72 -= 120;
    }
    while ((void *)v72 != v65);
    double v73 = a41;
  }
  a42 = (uint64_t)v65;
  operator delete(v73);
  int v66 = a44;
  if (!a44)
  {
LABEL_6:

    _Unwind_Resume(a1);
  }
LABEL_29:
  uint64_t v77 = a45;
  unint64_t v78 = v66;
  if ((void *)a45 != v66)
  {
    do
    {
      BOOL v79 = *(void **)(v77 - 24);
      if (v79)
      {
        *(void *)(v77 - 16) = v79;
        operator delete(v79);
      }
      uint64_t v80 = *(void **)(v77 - 48);
      if (v80)
      {
        *(void *)(v77 - 40) = v80;
        operator delete(v80);
      }
      BOOL v81 = *(void **)(v77 - 72);
      if (v81)
      {
        *(void *)(v77 - 64) = v81;
        operator delete(v81);
      }
      v77 -= 120;
    }
    while ((void *)v77 != v66);
    unint64_t v78 = a44;
  }
  a45 = (uint64_t)v66;
  operator delete(v78);

  _Unwind_Resume(a1);
}

void sub_1C49D8198(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = a1;
  double v94 = (Network *)a2;
  sub_1C499A82C(a2);
  uint64_t v9 = objc_msgSend_segments(v3, v4, v5, v6, v7, v8);
  unint64_t v97 = objc_msgSend_count(v9, v10, v11, v12, v13, v14);
  double v96 = v9;
  uint64_t v19 = operator new(0x18uLL);
  *uint64_t v19 = 0;
  v19[1] = 0;
  v19[2] = 0;
  double v103 = v19 + 3;
  double v104 = v19 + 3;
  double v102 = v19;
  id v95 = v3;
  if (v97)
  {
    for (uint64_t i = 0; i != v97; ++i)
    {
      uint64_t v21 = 0;
      unint64_t v22 = 0;
      unint64_t v23 = 0;
      do
      {
        uint64_t v24 = v21 + i;
        BOOL v25 = v21 + i >= v97 || v23 > 3;
        if (v25 || v22 > 4) {
          break;
        }
        uint64_t v28 = (void *)v19[1];
        unint64_t v27 = v19[2];
        if ((unint64_t)v28 < v27)
        {
          *uint64_t v28 = i;
          v28[1] = v24;
          BOOL v29 = v28 + 2;
          goto LABEL_33;
        }
        double v30 = (void *)*v19;
        uint64_t v31 = ((uint64_t)v28 - *v19) >> 4;
        unint64_t v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 60) {
          sub_1C494A220();
        }
        uint64_t v33 = v27 - (void)v30;
        if (v33 >> 3 > v32) {
          unint64_t v32 = v33 >> 3;
        }
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v32;
        }
        if (v34)
        {
          if (v34 >> 60) {
            sub_1C4949AA8();
          }
          double v35 = (char *)operator new(16 * v34);
          unint64_t v36 = &v35[16 * v31];
          *(void *)unint64_t v36 = i;
          *((void *)v36 + 1) = v24;
          uint64_t v37 = (uint64_t)v36;
          if (v28 == v30)
          {
LABEL_31:
            BOOL v29 = v36 + 16;
            *uint64_t v19 = v37;
            v19[1] = v36 + 16;
            v19[2] = &v35[16 * v34];
            if (!v28) {
              goto LABEL_33;
            }
LABEL_32:
            operator delete(v28);
            goto LABEL_33;
          }
        }
        else
        {
          double v35 = 0;
          unint64_t v36 = (char *)(16 * v31);
          *(void *)unint64_t v36 = i;
          *((void *)v36 + 1) = v24;
          uint64_t v37 = 16 * v31;
          if (v28 == v30) {
            goto LABEL_31;
          }
        }
        do
        {
          *(_OWORD *)(v37 - 16) = *((_OWORD *)v28 - 1);
          v37 -= 16;
          v28 -= 2;
        }
        while (v28 != v30);
        uint64_t v28 = (void *)*v19;
        BOOL v29 = v36 + 16;
        *uint64_t v19 = v37;
        v19[1] = v36 + 16;
        v19[2] = &v35[16 * v34];
        if (v28) {
          goto LABEL_32;
        }
LABEL_33:
        v19[1] = v29;
        uint64_t v38 = objc_msgSend_objectAtIndex_(v96, v15, v21 + i, v16, v17, v18);
        uint64_t v44 = objc_msgSend_strokeCount(v38, v39, v40, v41, v42, v43);
        unint64_t v50 = objc_msgSend_startCutPoint(v38, v45, v46, v47, v48, v49);
        if (objc_msgSend_isStartOfStroke(v50, v51, v52, v53, v54, v55))
        {
          uint64_t v61 = objc_msgSend_endCutPoint(v38, v56, v57, v58, v59, v60);
          char isEndOfStroke = objc_msgSend_isEndOfStroke(v61, v62, v63, v64, v65, v66);

          if (isEndOfStroke) {
            goto LABEL_7;
          }
        }
        else
        {
        }
        ++v22;
LABEL_7:
        id v3 = v95;
        v23 += v44;

        ++v21;
      }
      while (v21 != 4);
    }
  }
  __p = 0;
  BOOL v100 = 0;
  uint64_t v101 = 0;
  unint64_t v98 = 0;
  double v69 = (uint64_t **)((char *)v94 + 64);
  int v68 = (uint64_t *)*((void *)v94 + 8);
  if (v68)
  {
    double v70 = (uint64_t *)*((void *)v94 + 8);
    do
    {
      uint64_t v71 = v70;
      double v70 = (uint64_t *)*v70;
    }
    while (v70);
    if (v71 != (uint64_t *)v69 && !v71[4])
    {
      uint64_t v72 = (uint64_t *)v71[1];
      if (v72)
      {
        do
        {
          double v73 = v72;
          uint64_t v72 = (uint64_t *)*v72;
        }
        while (v72);
      }
      else
      {
        int v74 = v71;
        do
        {
          double v73 = (uint64_t *)v74[2];
          BOOL v75 = *v73 == (void)v74;
          int v74 = v73;
        }
        while (!v75);
      }
      if (*((uint64_t **)v94 + 7) == v71) {
        *((void *)v94 + 7) = v73;
      }
      --*((void *)v94 + 9);
      sub_1C49A0D30(v68, v71);
      operator delete(v71);
    }
  }
  *(unsigned char *)(*((void *)v94 + 4) + 32) = 0;
  unint64_t v76 = sub_1C49D26D0((uint64_t)v94, (uint64_t *)&v102, (uint64_t)&__p, (uint64_t *)&v98);
  uint64_t v77 = *((void *)v94 + 4);
  unint64_t v78 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)v94 + 5) - v77) >> 3);
  if (v98 <= v78)
  {
    if (v98 < v78)
    {
      *((void *)v94 + 5) = v77 + 40 * v98;
      BOOL v79 = *v69;
      uint64_t v80 = (uint64_t **)((char *)v94 + 64);
      if (*v69) {
        goto LABEL_58;
      }
      goto LABEL_62;
    }
  }
  else
  {
    sub_1C499C97C((void **)v94 + 4, v98 - v78);
  }
  BOOL v79 = *v69;
  uint64_t v80 = (uint64_t **)((char *)v94 + 64);
  if (!*v69)
  {
LABEL_62:
    uint64_t v82 = (uint64_t *)operator new(0x28uLL);
    v82[4] = v76;
    *uint64_t v82 = 0;
    v82[1] = 0;
    v82[2] = (uint64_t)v80;
    *double v69 = v82;
    uint64_t v83 = **((void **)v94 + 7);
    if (v83)
    {
      *((void *)v94 + 7) = v83;
      uint64_t v82 = *v69;
    }
    sub_1C4949FD4(*((uint64_t **)v94 + 8), v82);
    ++*((void *)v94 + 9);
    goto LABEL_65;
  }
  while (1)
  {
LABEL_58:
    while (1)
    {
      uint64_t v80 = (uint64_t **)v79;
      unint64_t v81 = v79[4];
      if (v81 <= v76) {
        break;
      }
      BOOL v79 = *v80;
      double v69 = v80;
      if (!*v80) {
        goto LABEL_62;
      }
    }
    if (v81 >= v76) {
      break;
    }
    BOOL v79 = v80[1];
    if (!v79)
    {
      double v69 = v80 + 1;
      goto LABEL_62;
    }
  }
LABEL_65:
  uint64_t v84 = *((void *)v94 + 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)v94 + 5) - v84) >> 3) >= v76) {
    *(unsigned char *)(v84 + 40 * v76 + 32) = 1;
  }
  sub_1C4B800AC((uint64_t)v94, (uint64_t)&__p);
  unint64_t v86 = __p;
  int v85 = v100;
  unint64_t v87 = v94;
  if (__p != v100)
  {
    unint64_t v88 = (char *)*((void *)v94 + 11);
    do
    {
      if ((unint64_t)v88 < *((void *)v87 + 12))
      {
        *(_OWORD *)unint64_t v88 = *v86;
        *((_OWORD *)v88 + 1) = v86[1];
        *((_OWORD *)v88 + 2) = v86[2];
        *((_OWORD *)v88 + 3) = v86[3];
        *((void *)v88 + 8) = *((void *)v86 + 8);
        v88 += 72;
      }
      else
      {
        unint64_t v88 = sub_1C499CBEC((char **)v94 + 10, (uint64_t)v86);
      }
      unint64_t v87 = v94;
      *((void *)v94 + 11) = v88;
      unint64_t v86 = (_OWORD *)((char *)v86 + 72);
    }
    while (v86 != v85);
  }
  Network::prepareNetwork(v87);
  if (__p)
  {
    BOOL v100 = __p;
    operator delete(__p);
  }

  uint64_t v89 = (char *)v102;
  if (v102)
  {
    unint64_t v90 = v103;
    if (v103 != v102)
    {
      int v91 = (char *)v103;
      do
      {
        uint64_t v93 = (void *)*((void *)v91 - 3);
        v91 -= 24;
        unint64_t v92 = v93;
        if (v93)
        {
          *(v90 - 2) = v92;
          operator delete(v92);
        }
        unint64_t v90 = v91;
      }
      while (v91 != v89);
    }
    operator delete(v89);
  }
}

void sub_1C49D86B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18)
{
  sub_1C496B66C(&a18);
  sub_1C4999ABC(a10);

  _Unwind_Resume(a1);
}

void sub_1C49D8758(void *a1, void *a2)
{
  double v2 = a2;
  id v3 = a1;
  uint64_t v5 = (char *)*a2;
  double v4 = (char *)a2[1];
  if ((unint64_t)v4 < a2[2])
  {
    *(void *)double v4 = 0;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    a2[1] = v4 + 24;
    uint64_t v6 = *a1;
    if (a1[1] == *a1) {
      return;
    }
    goto LABEL_5;
  }
  a2[1] = sub_1C49D9ED0((char **)a2, 0, 0);
  uint64_t v6 = *v3;
  if (v3[1] != *v3)
  {
LABEL_5:
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3);
    unint64_t v25 = v9;
    uint64_t v26 = v2;
    while (1)
    {
      uint64_t v11 = v8 + ((uint64_t)(*(void *)(v6 + 120 * v7 + 56) - *(void *)(v6 + 120 * v7 + 48)) >> 3);
      uint64_t v12 = v11 - 1;
      uint64_t v13 = (uint64_t *)(*v2 + 24 * v9);
      uint64_t v15 = v13 + 1;
      uint64_t v14 = (void *)v13[1];
      unint64_t v16 = v13[2];
      if ((unint64_t)v14 >= v16) {
        break;
      }
      *uint64_t v14 = v8;
      v14[1] = v12;
      uint64_t v10 = v14 + 2;
LABEL_7:
      *uint64_t v15 = v10;
      ++v7;
      uint64_t v6 = *v3;
      uint64_t v8 = v11;
      if (v7 >= 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v3[1] - *v3) >> 3)) {
        return;
      }
    }
    uint64_t v17 = v3;
    uint64_t v18 = (void *)*v13;
    uint64_t v19 = ((uint64_t)v14 - *v13) >> 4;
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 60) {
      sub_1C494A220();
    }
    uint64_t v21 = v16 - (void)v18;
    if (v21 >> 3 > v20) {
      unint64_t v20 = v21 >> 3;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
    }
    unint64_t v27 = v20;
    uint64_t v28 = v11;
    if (v20)
    {
      if (v20 >> 60) {
        sub_1C4949AA8();
      }
      unint64_t v22 = (char *)operator new(16 * v20);
      unint64_t v23 = &v22[16 * v19];
      *(void *)unint64_t v23 = v8;
      *((void *)v23 + 1) = v12;
      uint64_t v24 = (uint64_t)v23;
      id v3 = v17;
      if (v14 == v18) {
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v22 = 0;
      unint64_t v23 = (char *)(16 * v19);
      *(void *)unint64_t v23 = v8;
      *((void *)v23 + 1) = v12;
      uint64_t v24 = 16 * v19;
      id v3 = v17;
      if (v14 == v18)
      {
LABEL_21:
        double v2 = v26;
        *uint64_t v13 = v24;
        uint64_t v10 = v23 + 16;
        *uint64_t v15 = v23 + 16;
        v13[2] = (uint64_t)&v22[16 * v27];
        if (v14) {
          operator delete(v14);
        }
        unint64_t v9 = v25;
        uint64_t v11 = v28;
        goto LABEL_7;
      }
    }
    do
    {
      *(_OWORD *)(v24 - 16) = *((_OWORD *)v14 - 1);
      v24 -= 16;
      v14 -= 2;
    }
    while (v14 != v18);
    uint64_t v14 = (void *)*v13;
    goto LABEL_21;
  }
}

void sub_1C49D8980(uint64_t *a1, uint64_t a2, double a3)
{
  unint64_t v127 = 0;
  long long v125 = 0u;
  *(_OWORD *)BOOL v126 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)long long __dst = 0u;
  long long v121 = 0u;
  long long v122 = 0u;
  long long v120 = 0u;
  v119 = 0;
  long long v117 = 0u;
  *(_OWORD *)uint64_t v118 = 0u;
  *(_OWORD *)uint64_t v115 = 0u;
  *(_OWORD *)unint64_t v116 = 0u;
  long long v113 = 0u;
  long long v114 = 0u;
  long long v112 = 0u;
  uint64_t v3 = *a1;
  if (a1[1] == *a1) {
    goto LABEL_185;
  }
  uint64_t v5 = 0;
  double v6 = (double)(int)a3;
  while (2)
  {
    char v8 = 0;
    unint64_t v9 = (int)v5;
    uint64_t v10 = 120 * (int)v5;
    uint64_t v11 = (v5 << 32) + 0x100000000;
    do
    {
      uint64_t v110 = v11;
      uint64_t v111 = v9;
      uint64_t v12 = (const Segment *)(v3 + v10);
      if (v8)
      {
        Segment::mergeIntoSegment((Segment *)&v120, v12);
        Segment::mergeIntoSegment((Segment *)&v112, (const Segment *)(*a1 + v10));
        goto LABEL_134;
      }
      long long v120 = *(_OWORD *)v12;
      long long v121 = *((_OWORD *)v12 + 1);
      long long v122 = *((_OWORD *)v12 + 2);
      if (v12 != (const Segment *)&v120)
      {
        uint64_t v14 = *(char **)(v3 + v10 + 48);
        uint64_t v13 = *(unsigned char **)(v3 + v10 + 56);
        uint64_t v15 = v13 - v14;
        unint64_t v16 = (v13 - v14) >> 3;
        uint64_t v17 = (uint64_t)__dst[0];
        uint64_t v18 = (char *)__p[0];
        if (v16 <= ((char *)__dst[0] - (char *)__p[0]) >> 3)
        {
          unint64_t v22 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          if (v22 >= v16)
          {
            if (v13 != v14) {
              memmove(__p[0], *(const void **)(v3 + v10 + 48), v13 - v14);
            }
          }
          else
          {
            if (__p[1] != __p[0])
            {
              memmove(__p[0], *(const void **)(v3 + v10 + 48), (char *)__p[1] - (char *)__p[0]);
              uint64_t v18 = (char *)__p[1];
            }
            unint64_t v23 = &v14[8 * v22];
            uint64_t v15 = v13 - v23;
            if (v13 != v23) {
              memmove(v18, v23, v13 - v23);
            }
          }
        }
        else
        {
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
            uint64_t v17 = 0;
            __p[0] = 0;
            __p[1] = 0;
            __dst[0] = 0;
          }
          if (v15 < 0) {
            goto LABEL_197;
          }
          uint64_t v19 = v17 >> 2;
          if (v17 >> 2 <= v16) {
            uint64_t v19 = (v13 - v14) >> 3;
          }
          unint64_t v20 = (unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v19;
          if (v20 >> 61) {
LABEL_197:
          }
            sub_1C494A220();
          uint64_t v21 = (char *)operator new(8 * v20);
          uint64_t v18 = v21;
          __p[0] = v21;
          __p[1] = v21;
          __dst[0] = &v21[8 * v20];
          if (v13 != v14) {
            memcpy(v21, v14, v13 - v14);
          }
        }
        __p[1] = &v18[v15];
        unint64_t v25 = *(char **)(v3 + v10 + 72);
        uint64_t v24 = *(unsigned char **)(v3 + v10 + 80);
        uint64_t v26 = v24 - v25;
        unint64_t v27 = (v24 - v25) >> 2;
        uint64_t v28 = *((void *)&v125 + 1);
        BOOL v29 = (char *)__dst[1];
        if (v27 <= (uint64_t)(*((void *)&v125 + 1) - (unint64_t)__dst[1]) >> 2)
        {
          unint64_t v33 = (uint64_t)(v125 - (unint64_t)__dst[1]) >> 2;
          if (v33 >= v27)
          {
            if (v24 != v25) {
              memmove(__dst[1], *(const void **)(v3 + v10 + 72), v24 - v25);
            }
          }
          else
          {
            if ((void *)v125 != __dst[1])
            {
              memmove(__dst[1], *(const void **)(v3 + v10 + 72), v125 - (unint64_t)__dst[1]);
              BOOL v29 = (char *)v125;
            }
            unint64_t v34 = &v25[4 * v33];
            uint64_t v26 = v24 - v34;
            if (v24 != v34) {
              memmove(v29, v34, v24 - v34);
            }
          }
        }
        else
        {
          if (__dst[1])
          {
            *(void **)&long long v125 = __dst[1];
            operator delete(__dst[1]);
            uint64_t v28 = 0;
            __dst[1] = 0;
            long long v125 = 0uLL;
          }
          if (v26 < 0) {
            goto LABEL_196;
          }
          uint64_t v30 = v28 >> 1;
          if (v28 >> 1 <= v27) {
            uint64_t v30 = (v24 - v25) >> 2;
          }
          unint64_t v31 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v30;
          if (v31 >> 62) {
LABEL_196:
          }
            sub_1C494A220();
          unint64_t v32 = (char *)operator new(4 * v31);
          BOOL v29 = v32;
          __dst[1] = v32;
          *(void *)&long long v125 = v32;
          *((void *)&v125 + 1) = &v32[4 * v31];
          if (v24 != v25) {
            memcpy(v32, v25, v24 - v25);
          }
        }
        *(void *)&long long v125 = &v29[v26];
        unint64_t v36 = *(char **)(v3 + v10 + 96);
        double v35 = *(unsigned char **)(v3 + v10 + 104);
        size_t v37 = v35 - v36;
        unint64_t v38 = (v35 - v36) >> 2;
        uint64_t v39 = (uint64_t)v127;
        uint64_t v40 = (char *)v126[0];
        if (v38 > (v127 - (char *)v126[0]) >> 2)
        {
          if (v126[0])
          {
            v126[1] = v126[0];
            operator delete(v126[0]);
            uint64_t v39 = 0;
            v126[0] = 0;
            v126[1] = 0;
            unint64_t v127 = 0;
          }
          if ((v37 & 0x8000000000000000) != 0) {
            goto LABEL_196;
          }
          uint64_t v41 = v39 >> 1;
          if (v39 >> 1 <= v38) {
            uint64_t v41 = (v35 - v36) >> 2;
          }
          unint64_t v42 = (unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v41;
          if (v42 >> 62) {
            goto LABEL_196;
          }
          uint64_t v43 = (char *)operator new(4 * v42);
          uint64_t v40 = v43;
          v126[0] = v43;
          v126[1] = v43;
          unint64_t v127 = &v43[4 * v42];
          if (v35 != v36) {
            memcpy(v43, v36, v35 - v36);
          }
          goto LABEL_71;
        }
        unint64_t v44 = ((char *)v126[1] - (char *)v126[0]) >> 2;
        if (v44 >= v38)
        {
          if (v35 == v36)
          {
LABEL_71:
            v126[1] = &v40[v37];
            uint64_t v3 = *a1;
            goto LABEL_72;
          }
          uint64_t v46 = v126[0];
          double v45 = v36;
        }
        else
        {
          if (v126[1] != v126[0])
          {
            memmove(v126[0], v36, (char *)v126[1] - (char *)v126[0]);
            uint64_t v40 = (char *)v126[1];
          }
          double v45 = &v36[4 * v44];
          size_t v37 = v35 - v45;
          if (v35 == v45) {
            goto LABEL_71;
          }
          uint64_t v46 = v40;
        }
        memmove(v46, v45, v37);
        goto LABEL_71;
      }
LABEL_72:
      uint64_t v47 = v3 + v10;
      long long v112 = *(_OWORD *)(v3 + v10);
      long long v113 = *(_OWORD *)(v3 + v10 + 16);
      long long v114 = *(_OWORD *)(v3 + v10 + 32);
      if ((long long *)(v3 + v10) == &v112) {
        goto LABEL_134;
      }
      uint64_t v49 = *(char **)(v47 + 48);
      uint64_t v48 = *(unsigned char **)(v47 + 56);
      size_t v50 = v48 - v49;
      unint64_t v51 = (v48 - v49) >> 3;
      uint64_t v52 = (uint64_t)v116[0];
      uint64_t v53 = (char *)v115[0];
      if (v51 <= ((char *)v116[0] - (char *)v115[0]) >> 3)
      {
        unint64_t v57 = ((char *)v115[1] - (char *)v115[0]) >> 3;
        if (v57 >= v51)
        {
          if (v48 == v49) {
            goto LABEL_93;
          }
          uint64_t v59 = v115[0];
          uint64_t v58 = v49;
        }
        else
        {
          if (v115[1] != v115[0])
          {
            memmove(v115[0], v49, (char *)v115[1] - (char *)v115[0]);
            uint64_t v53 = (char *)v115[1];
          }
          uint64_t v58 = &v49[8 * v57];
          size_t v50 = v48 - v58;
          if (v48 == v58) {
            goto LABEL_93;
          }
          uint64_t v59 = v53;
        }
        memmove(v59, v58, v50);
        goto LABEL_93;
      }
      if (v115[0])
      {
        v115[1] = v115[0];
        operator delete(v115[0]);
        uint64_t v52 = 0;
        v115[0] = 0;
        v115[1] = 0;
        v116[0] = 0;
      }
      if ((v50 & 0x8000000000000000) != 0) {
        goto LABEL_197;
      }
      uint64_t v54 = v52 >> 2;
      if (v52 >> 2 <= v51) {
        uint64_t v54 = (v48 - v49) >> 3;
      }
      unint64_t v55 = (unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v54;
      if (v55 >> 61) {
        goto LABEL_197;
      }
      unint64_t v56 = (char *)operator new(8 * v55);
      uint64_t v53 = v56;
      v115[0] = v56;
      v115[1] = v56;
      v116[0] = &v56[8 * v55];
      if (v48 != v49) {
        memcpy(v56, v49, v48 - v49);
      }
LABEL_93:
      v115[1] = &v53[v50];
      uint64_t v61 = *(char **)(v3 + v10 + 72);
      uint64_t v60 = *(unsigned char **)(v3 + v10 + 80);
      uint64_t v62 = v60 - v61;
      unint64_t v63 = (v60 - v61) >> 2;
      uint64_t v64 = *((void *)&v117 + 1);
      uint64_t v65 = (char *)v116[1];
      if (v63 <= (uint64_t)(*((void *)&v117 + 1) - (unint64_t)v116[1]) >> 2)
      {
        unint64_t v69 = (uint64_t)(v117 - (unint64_t)v116[1]) >> 2;
        if (v69 >= v63)
        {
          if (v60 != v61) {
            memmove(v116[1], *(const void **)(v3 + v10 + 72), v60 - v61);
          }
        }
        else
        {
          if ((void *)v117 != v116[1])
          {
            memmove(v116[1], *(const void **)(v3 + v10 + 72), v117 - (unint64_t)v116[1]);
            uint64_t v65 = (char *)v117;
          }
          double v70 = &v61[4 * v69];
          uint64_t v62 = v60 - v70;
          if (v60 != v70) {
            memmove(v65, v70, v60 - v70);
          }
        }
      }
      else
      {
        if (v116[1])
        {
          *(void **)&long long v117 = v116[1];
          operator delete(v116[1]);
          uint64_t v64 = 0;
          v116[1] = 0;
          long long v117 = 0uLL;
        }
        if (v62 < 0) {
          goto LABEL_196;
        }
        uint64_t v66 = v64 >> 1;
        if (v64 >> 1 <= v63) {
          uint64_t v66 = (v60 - v61) >> 2;
        }
        unint64_t v67 = (unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v66;
        if (v67 >> 62) {
          goto LABEL_196;
        }
        int v68 = (char *)operator new(4 * v67);
        uint64_t v65 = v68;
        v116[1] = v68;
        *(void *)&long long v117 = v68;
        *((void *)&v117 + 1) = &v68[4 * v67];
        if (v60 != v61) {
          memcpy(v68, v61, v60 - v61);
        }
      }
      *(void *)&long long v117 = &v65[v62];
      uint64_t v72 = *(char **)(v3 + v10 + 96);
      uint64_t v71 = *(unsigned char **)(v3 + v10 + 104);
      size_t v73 = v71 - v72;
      unint64_t v74 = (v71 - v72) >> 2;
      uint64_t v75 = (uint64_t)v119;
      unint64_t v76 = (char *)v118[0];
      if (v74 > (v119 - (char *)v118[0]) >> 2)
      {
        if (v118[0])
        {
          v118[1] = v118[0];
          operator delete(v118[0]);
          uint64_t v75 = 0;
          v118[0] = 0;
          v118[1] = 0;
          v119 = 0;
        }
        if ((v73 & 0x8000000000000000) != 0) {
          goto LABEL_196;
        }
        uint64_t v77 = v75 >> 1;
        if (v75 >> 1 <= v74) {
          uint64_t v77 = (v71 - v72) >> 2;
        }
        unint64_t v78 = (unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v77;
        if (v78 >> 62) {
          goto LABEL_196;
        }
        BOOL v79 = (char *)operator new(4 * v78);
        unint64_t v76 = v79;
        v118[0] = v79;
        v118[1] = v79;
        v119 = &v79[4 * v78];
        if (v71 != v72) {
          memcpy(v79, v72, v71 - v72);
        }
        goto LABEL_133;
      }
      unint64_t v80 = ((char *)v118[1] - (char *)v118[0]) >> 2;
      if (v80 < v74)
      {
        if (v118[1] != v118[0])
        {
          memmove(v118[0], v72, (char *)v118[1] - (char *)v118[0]);
          unint64_t v76 = (char *)v118[1];
        }
        unint64_t v81 = &v72[4 * v80];
        size_t v73 = v71 - v81;
        if (v71 == v81) {
          goto LABEL_133;
        }
        uint64_t v82 = v76;
        goto LABEL_132;
      }
      if (v71 != v72)
      {
        uint64_t v82 = v118[0];
        unint64_t v81 = v72;
LABEL_132:
        memmove(v82, v81, v73);
      }
LABEL_133:
      v118[1] = &v76[v73];
LABEL_134:
      unint64_t v9 = v111 + 1;
      uint64_t v83 = *a1;
      if (0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3) <= v111 + 1) {
        goto LABEL_6;
      }
      uint64_t v84 = (double *)(v83 + v10);
      int v85 = (const Segment *)(v83 + v10 + 120);
      double v86 = *(double *)v85;
      if (*(double *)v85 >= 1.0) {
        double v87 = *(double *)(v83 + v10 + 120);
      }
      else {
        double v87 = 1.0;
      }
      if (*(double *)(v83 + v10) >= 1.0) {
        double v88 = *(double *)(v83 + v10);
      }
      else {
        double v88 = 1.0;
      }
      double v89 = v84[17];
      double v90 = v84[2];
      if (v89 >= v90) {
        uint64_t v91 = v83 + v10;
      }
      else {
        uint64_t v91 = v83 + v10 + 120;
      }
      if (v89 >= v90)
      {
        uint64_t v92 = v83 + v10 + 120;
      }
      else
      {
        double v86 = *(double *)(v83 + v10);
        uint64_t v92 = v83 + v10;
      }
      double v93 = *(double *)(v92 + 32);
      double v94 = *(double *)(v91 + 32);
      double v95 = v86;
      if (v93 >= v94)
      {
        double v95 = v94 - (*(double *)(v92 + 16) - v6);
        if (v95 < 0.0) {
          double v95 = 0.0;
        }
      }
      if (v88 < v87) {
        double v87 = v88;
      }
      double v96 = v95 / v87;
      if (v96 > 0.4)
      {
        char v8 = 1;
        goto LABEL_173;
      }
      uint64_t v97 = v83 + v10;
      double v98 = *(double *)(v97 + 144);
      double v99 = *(double *)(v97 + 24);
      if (v98 >= v99) {
        BOOL v100 = (const Segment *)v84;
      }
      else {
        BOOL v100 = v85;
      }
      if (v98 >= v99) {
        uint64_t v101 = (double *)v85;
      }
      else {
        uint64_t v101 = v84;
      }
      double v102 = *((double *)v100 + 5);
      if (v101[5] >= v102)
      {
        double v103 = v102 - v101[3];
        if (v103 < 0.0) {
          double v103 = 0.0;
        }
        if (v93 < v94) {
          goto LABEL_168;
        }
LABEL_166:
        double v86 = v94 - (*(double *)(v92 + 16) + -5.0);
        if (v86 < 0.0) {
          double v86 = 0.0;
        }
        goto LABEL_168;
      }
      double v103 = v101[1];
      if (v93 >= v94) {
        goto LABEL_166;
      }
LABEL_168:
      BOOL v104 = v96 > 0.2;
      if (v103 <= 0.0) {
        BOOL v104 = 0;
      }
      char v8 = v86 > 0.0 && v104;
LABEL_173:
      Segment::mergeIntoSegment((Segment *)&v112, v85);
      if (v111 < 1)
      {
LABEL_6:
        if ((v8 & 1) == 0) {
          break;
        }
        goto LABEL_7;
      }
      float v105 = *(double *)&v112 / (*((double *)&v112 + 1) + 1.0);
      BOOL v106 = v105 > 1.6 && (void *)((char *)__p[1] - (char *)__p[0]) >= (void *)9;
      char v107 = v106 ? 0 : v8;
      if ((v107 & 1) == 0) {
        break;
      }
LABEL_7:
      uint64_t v3 = *a1;
      v10 += 120;
      uint64_t v11 = v110 + 0x100000000;
      char v8 = 1;
    }
    while (0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3) > v9);
    unint64_t v108 = *(void *)(a2 + 8);
    if (v108 >= *(void *)(a2 + 16))
    {
      unint64_t v7 = sub_1C49D9C18((Segment **)a2, (const Segment *)&v120);
    }
    else
    {
      Segment::Segment(*(Segment **)(a2 + 8), (const Segment *)&v120);
      unint64_t v7 = (Segment *)(v108 + 120);
      *(void *)(a2 + 8) = v108 + 120;
    }
    uint64_t v5 = v111 + 1;
    *(void *)(a2 + 8) = v7;
    uint64_t v3 = *a1;
    if (0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3) > v110 >> 32) {
      continue;
    }
    break;
  }
  if (v118[0])
  {
    v118[1] = v118[0];
    operator delete(v118[0]);
  }
LABEL_185:
  if (v116[1])
  {
    *(void **)&long long v117 = v116[1];
    operator delete(v116[1]);
  }
  if (v115[0])
  {
    v115[1] = v115[0];
    operator delete(v115[0]);
  }
  if (v126[0])
  {
    v126[1] = v126[0];
    operator delete(v126[0]);
  }
  if (__dst[1])
  {
    *(void **)&long long v125 = __dst[1];
    operator delete(__dst[1]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1C49D9400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
}

void sub_1C49D9448(uint64_t *a1, uint64_t a2, double a3)
{
  uint64_t v3 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v6 = 0;
    int v7 = 0;
    while (1)
    {
      int v85 = 0;
      long long v83 = 0u;
      long long v84 = 0u;
      long long __p = 0u;
      long long v82 = 0u;
      memset(v80, 0, sizeof(v80));
      Segment::Segment((Segment *)&v70, (const Segment *)(v3 + 120 * v6));
      double v8 = vabdd_f64(v70, a3);
      double v9 = 100000.0;
      if (v8 >= 100000.0) {
        goto LABEL_26;
      }
      *(_OWORD *)((char *)v80 + 8) = v71;
      *(_OWORD *)((char *)&v80[1] + 8) = v72;
      *(double *)unint64_t v80 = v70;
      *((void *)&v80[2] + 1) = v73;
      uint64_t v11 = (char *)v74;
      uint64_t v10 = v75;
      size_t v12 = v75 - (unsigned char *)v74;
      unint64_t v13 = (v75 - (unsigned char *)v74) >> 3;
      uint64_t v14 = v82;
      uint64_t v15 = (char *)__p;
      if (v13 > (uint64_t)(v82 - __p) >> 3)
      {
        if ((void)__p)
        {
          *((void *)&__p + 1) = __p;
          operator delete((void *)__p);
          uint64_t v14 = 0;
          long long __p = 0uLL;
          *(void *)&long long v82 = 0;
        }
        if ((v12 & 0x8000000000000000) != 0) {
          goto LABEL_109;
        }
        uint64_t v16 = v14 >> 2;
        if (v14 >> 2 <= v13) {
          uint64_t v16 = v13;
        }
        unint64_t v17 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v16;
        if (v17 >> 61) {
LABEL_109:
        }
          sub_1C494A220();
        uint64_t v18 = (char *)operator new(8 * v17);
        uint64_t v15 = v18;
        *(void *)&long long __p = v18;
        *((void *)&__p + 1) = v18;
        *(void *)&long long v82 = &v18[8 * v17];
        if (v10 != v11) {
          memcpy(v18, v11, v12);
        }
        goto LABEL_25;
      }
      unint64_t v19 = (uint64_t)(*((void *)&__p + 1) - __p) >> 3;
      if (v19 < v13) {
        break;
      }
      if (v75 != v74)
      {
        uint64_t v21 = (void *)__p;
        unint64_t v20 = (char *)v74;
LABEL_24:
        memmove(v21, v20, v12);
      }
LABEL_25:
      *((void *)&__p + 1) = &v15[v12];
      sub_1C499DEE4((void *)&v82 + 1, (char *)v76, v77, (v77 - (unsigned char *)v76) >> 2);
      sub_1C499DEE4(&v84, (char *)v78, v79, (v79 - (unsigned char *)v78) >> 2);
      double v9 = v8;
LABEL_26:
      int v69 = v7;
      uint64_t v22 = v7;
      uint64_t v23 = *a1;
      if (0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3) > v7 + 1)
      {
        int v24 = 0;
        uint64_t v25 = 120 * v7 + 120;
        uint64_t v26 = 1;
        while (2)
        {
          Segment::mergeIntoSegment((Segment *)&v70, (const Segment *)(v23 + v25));
          double v27 = vabdd_f64(v70, a3);
          if (v27 >= v9) {
            goto LABEL_90;
          }
          *(_OWORD *)((char *)v80 + 8) = v71;
          *(_OWORD *)((char *)&v80[1] + 8) = v72;
          *(double *)unint64_t v80 = v70;
          *((void *)&v80[2] + 1) = v73;
          BOOL v29 = (char *)v74;
          uint64_t v28 = v75;
          size_t v30 = v75 - (unsigned char *)v74;
          unint64_t v31 = (v75 - (unsigned char *)v74) >> 3;
          uint64_t v32 = v82;
          unint64_t v33 = (char *)__p;
          if (v31 <= (uint64_t)(v82 - __p) >> 3)
          {
            unint64_t v37 = (uint64_t)(*((void *)&__p + 1) - __p) >> 3;
            if (v37 >= v31)
            {
              if (v75 == v74) {
                goto LABEL_49;
              }
              uint64_t v39 = (void *)__p;
              unint64_t v38 = (char *)v74;
            }
            else
            {
              if (*((void *)&__p + 1) != (void)__p)
              {
                memmove((void *)__p, v74, *((void *)&__p + 1) - __p);
                unint64_t v33 = (char *)*((void *)&__p + 1);
              }
              unint64_t v38 = &v29[8 * v37];
              size_t v30 = v28 - v38;
              if (v28 == v38) {
                goto LABEL_49;
              }
              uint64_t v39 = v33;
            }
            memmove(v39, v38, v30);
            goto LABEL_49;
          }
          if ((void)__p)
          {
            *((void *)&__p + 1) = __p;
            operator delete((void *)__p);
            uint64_t v32 = 0;
            long long __p = 0uLL;
            *(void *)&long long v82 = 0;
          }
          if ((v30 & 0x8000000000000000) != 0) {
            goto LABEL_109;
          }
          uint64_t v34 = v32 >> 2;
          if (v32 >> 2 <= v31) {
            uint64_t v34 = v31;
          }
          unint64_t v35 = (unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v34;
          if (v35 >> 61) {
            goto LABEL_109;
          }
          unint64_t v36 = (char *)operator new(8 * v35);
          unint64_t v33 = v36;
          *(void *)&long long __p = v36;
          *((void *)&__p + 1) = v36;
          *(void *)&long long v82 = &v36[8 * v35];
          if (v28 != v29) {
            memcpy(v36, v29, v30);
          }
LABEL_49:
          *((void *)&__p + 1) = &v33[v30];
          uint64_t v41 = (char *)v76;
          uint64_t v40 = v77;
          size_t v42 = v77 - (unsigned char *)v76;
          unint64_t v43 = (v77 - (unsigned char *)v76) >> 2;
          uint64_t v44 = *((void *)&v83 + 1);
          double v45 = (char *)*((void *)&v82 + 1);
          if (v43 <= (uint64_t)(*((void *)&v83 + 1) - *((void *)&v82 + 1)) >> 2)
          {
            unint64_t v49 = (uint64_t)(v83 - *((void *)&v82 + 1)) >> 2;
            if (v49 >= v43)
            {
              if (v77 == v76) {
                goto LABEL_69;
              }
              unint64_t v51 = (void *)*((void *)&v82 + 1);
              size_t v50 = (char *)v76;
            }
            else
            {
              if ((void)v83 != *((void *)&v82 + 1))
              {
                memmove(*((void **)&v82 + 1), v76, v83 - *((void *)&v82 + 1));
                double v45 = (char *)v83;
              }
              size_t v50 = &v41[4 * v49];
              size_t v42 = v40 - v50;
              if (v40 == v50) {
                goto LABEL_69;
              }
              unint64_t v51 = v45;
            }
            memmove(v51, v50, v42);
            goto LABEL_69;
          }
          if (*((void *)&v82 + 1))
          {
            *(void *)&long long v83 = *((void *)&v82 + 1);
            operator delete(*((void **)&v82 + 1));
            uint64_t v44 = 0;
            *((void *)&v82 + 1) = 0;
            long long v83 = 0uLL;
          }
          if ((v42 & 0x8000000000000000) != 0) {
            goto LABEL_110;
          }
          uint64_t v46 = v44 >> 1;
          if (v44 >> 1 <= v43) {
            uint64_t v46 = v43;
          }
          unint64_t v47 = (unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v46;
          if (v47 >> 62) {
LABEL_110:
          }
            sub_1C494A220();
          uint64_t v48 = (char *)operator new(4 * v47);
          double v45 = v48;
          *((void *)&v82 + 1) = v48;
          *(void *)&long long v83 = v48;
          *((void *)&v83 + 1) = &v48[4 * v47];
          if (v40 != v41) {
            memcpy(v48, v41, v42);
          }
LABEL_69:
          *(void *)&long long v83 = &v45[v42];
          uint64_t v53 = (char *)v78;
          uint64_t v52 = v79;
          size_t v54 = v79 - (unsigned char *)v78;
          unint64_t v55 = (v79 - (unsigned char *)v78) >> 2;
          uint64_t v56 = (uint64_t)v85;
          unint64_t v57 = (char *)v84;
          if (v55 > (uint64_t)&v85[-v84] >> 2)
          {
            if ((void)v84)
            {
              *((void *)&v84 + 1) = v84;
              operator delete((void *)v84);
              uint64_t v56 = 0;
              long long v84 = 0uLL;
              int v85 = 0;
            }
            if ((v54 & 0x8000000000000000) != 0) {
              goto LABEL_110;
            }
            uint64_t v58 = v56 >> 1;
            if (v56 >> 1 <= v55) {
              uint64_t v58 = v55;
            }
            unint64_t v59 = (unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v58;
            if (v59 >> 62) {
              goto LABEL_110;
            }
            uint64_t v60 = (char *)operator new(4 * v59);
            unint64_t v57 = v60;
            *(void *)&long long v84 = v60;
            *((void *)&v84 + 1) = v60;
            int v85 = &v60[4 * v59];
            if (v52 != v53) {
              memcpy(v60, v53, v54);
            }
LABEL_89:
            *((void *)&v84 + 1) = &v57[v54];
            int v24 = v26;
            double v9 = v27;
LABEL_90:
            if (v26 == 7 || (++v26, uint64_t v23 = *a1, v25 += 120, 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3) <= v22 + v26))
            {
              uint64_t v64 = a2;
              uint64_t v65 = *(Segment **)(a2 + 8);
              if ((unint64_t)v65 < *(void *)(a2 + 16)) {
                goto LABEL_93;
              }
LABEL_95:
              unint64_t v67 = sub_1C49D9C18((Segment **)v64, (const Segment *)v80);
              int v66 = v69;
              goto LABEL_96;
            }
            continue;
          }
          break;
        }
        unint64_t v61 = (uint64_t)(*((void *)&v84 + 1) - v84) >> 2;
        if (v61 >= v55)
        {
          if (v79 == v78) {
            goto LABEL_89;
          }
          unint64_t v63 = (void *)v84;
          uint64_t v62 = (char *)v78;
        }
        else
        {
          if (*((void *)&v84 + 1) != (void)v84)
          {
            memmove((void *)v84, v78, *((void *)&v84 + 1) - v84);
            unint64_t v57 = (char *)*((void *)&v84 + 1);
          }
          uint64_t v62 = &v53[4 * v61];
          size_t v54 = v52 - v62;
          if (v52 == v62) {
            goto LABEL_89;
          }
          unint64_t v63 = v57;
        }
        memmove(v63, v62, v54);
        goto LABEL_89;
      }
      int v24 = 0;
      uint64_t v64 = a2;
      uint64_t v65 = *(Segment **)(a2 + 8);
      if ((unint64_t)v65 >= *(void *)(a2 + 16)) {
        goto LABEL_95;
      }
LABEL_93:
      Segment::Segment(v65, (const Segment *)v80);
      int v66 = v69;
      unint64_t v67 = (Segment *)((char *)v65 + 120);
      *(void *)(v64 + 8) = (char *)v65 + 120;
LABEL_96:
      *(void *)(v64 + 8) = v67;
      if (v78)
      {
        BOOL v79 = (char *)v78;
        operator delete(v78);
      }
      if (v76)
      {
        uint64_t v77 = (char *)v76;
        operator delete(v76);
      }
      if (v74)
      {
        uint64_t v75 = (char *)v74;
        operator delete(v74);
      }
      if ((void)v84)
      {
        *((void *)&v84 + 1) = v84;
        operator delete((void *)v84);
      }
      if (*((void *)&v82 + 1))
      {
        *(void *)&long long v83 = *((void *)&v82 + 1);
        operator delete(*((void **)&v82 + 1));
      }
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      unint64_t v6 = v66 + v24 + 1;
      uint64_t v3 = *a1;
      int v7 = v66 + v24 + 1;
      if (0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3) <= v6) {
        return;
      }
    }
    if (*((void *)&__p + 1) != (void)__p)
    {
      memmove((void *)__p, v74, *((void *)&__p + 1) - __p);
      uint64_t v15 = (char *)*((void *)&__p + 1);
    }
    unint64_t v20 = &v11[8 * v19];
    size_t v12 = v10 - v20;
    if (v10 == v20) {
      goto LABEL_25;
    }
    uint64_t v21 = v15;
    goto LABEL_24;
  }
}

void sub_1C49D9B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void **sub_1C49D9B84(void **a1)
{
  double v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    double v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 3);
        if (v5)
        {
          *((void *)v3 - 2) = v5;
          operator delete(v5);
        }
        unint64_t v6 = (void *)*((void *)v3 - 6);
        if (v6)
        {
          *((void *)v3 - 5) = v6;
          operator delete(v6);
        }
        int v7 = (void *)*((void *)v3 - 9);
        if (v7)
        {
          *((void *)v3 - 8) = v7;
          operator delete(v7);
        }
        v3 -= 120;
      }
      while (v3 != v2);
      double v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

Segment *sub_1C49D9C18(Segment **a1, const Segment *a2)
{
  unint64_t v2 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x222222222222222) {
    sub_1C494A220();
  }
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 3);
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 3) >= 0x111111111111111) {
    unint64_t v6 = 0x222222222222222;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x222222222222222) {
      sub_1C4949AA8();
    }
    int v7 = (char *)operator new(120 * v6);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v18 = (Segment *)&v7[120 * v2];
  unint64_t v19 = (Segment *)&v7[120 * v6];
  Segment::Segment(v18, a2);
  double v8 = (Segment *)((char *)v18 + 120);
  uint64_t v10 = *a1;
  double v9 = a1[1];
  if (v9 == *a1)
  {
    *a1 = v18;
    a1[1] = v8;
    a1[2] = v19;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      Segment::Segment((Segment *)((char *)v18 + v11 - 120), (Segment *)((char *)v9 + v11 - 120));
      v11 -= 120;
    }
    while ((Segment *)((char *)v9 + v11) != v10);
    size_t v12 = *a1;
    double v9 = a1[1];
    unint64_t v13 = (Segment *)((char *)v18 + v11);
    double v8 = (Segment *)((char *)v18 + 120);
    *a1 = v13;
    a1[1] = (Segment *)((char *)v18 + 120);
    a1[2] = v19;
    if (v9 != v12)
    {
      do
      {
        uint64_t v14 = (void *)*((void *)v9 - 3);
        if (v14)
        {
          *((void *)v9 - 2) = v14;
          operator delete(v14);
        }
        uint64_t v15 = (void *)*((void *)v9 - 6);
        if (v15)
        {
          *((void *)v9 - 5) = v15;
          operator delete(v15);
        }
        uint64_t v16 = (void *)*((void *)v9 - 9);
        if (v16)
        {
          *((void *)v9 - 8) = v16;
          operator delete(v16);
        }
        double v9 = (Segment *)((char *)v9 - 120);
      }
      while (v9 != v12);
      double v9 = v12;
    }
  }
  if (v9) {
    operator delete(v9);
  }
  return v8;
}

void sub_1C49D9DCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C49D9E48((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C49D9DE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2)
  {
    uint64_t v5 = v3 + 104;
    do
    {
      unint64_t v6 = *(void **)(v5 + v2 - 8);
      if (v6)
      {
        *(void *)(v5 + v2) = v6;
        operator delete(v6);
      }
      int v7 = *(void **)(v5 + v2 - 32);
      if (v7)
      {
        *(void *)(v5 + v2 - 24) = v7;
        operator delete(v7);
      }
      double v8 = *(void **)(v5 + v2 - 56);
      if (v8)
      {
        *(void *)(v5 + v2 - 48) = v8;
        operator delete(v8);
      }
      v2 += 120;
    }
    while (v2);
  }
  sub_1C49D9E48((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1C49D9E48(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 120;
    double v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
    uint64_t v5 = *(void **)(i - 48);
    if (v5)
    {
      *(void *)(i - 40) = v5;
      operator delete(v5);
    }
    unint64_t v6 = *(void **)(i - 72);
    if (v6)
    {
      *(void *)(i - 64) = v6;
      operator delete(v6);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_1C49D9ED0(char **a1, const void *a2, uint64_t a3)
{
  double v4 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1C494A220();
  }
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555) {
    unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
      sub_1C4949AA8();
    }
    uint64_t v11 = (char *)operator new(24 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  size_t v12 = &v11[24 * v5];
  unint64_t v13 = &v11[24 * v10];
  *((void *)v12 + 1) = 0;
  *((void *)&v25 + 1) = v13;
  *((void *)v12 + 2) = 0;
  *(void *)size_t v12 = 0;
  int64_t v14 = a3 - (void)a2;
  if (v14)
  {
    if (v14 < 0) {
      sub_1C494A220();
    }
    uint64_t v15 = (char *)operator new(v14);
    *(void *)size_t v12 = v15;
    *((void *)v12 + 2) = &v15[16 * (v14 >> 4)];
    size_t v16 = v14 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v15, a2, v16);
    *((void *)v12 + 1) = &v15[v16];
  }
  unint64_t v17 = v12 + 24;
  *(void *)&long long v25 = v12 + 24;
  if (v3 == v4)
  {
    *a1 = v12;
    a1[1] = v17;
    a1[2] = v13;
  }
  else
  {
    do
    {
      uint64_t v18 = v12;
      *((void *)v12 - 2) = 0;
      *((void *)v12 - 1) = 0;
      long long v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v12 - 24) = v19;
      v12 -= 24;
      *((void *)v18 - 1) = *((void *)v3 + 2);
      *(void *)uint64_t v3 = 0;
      *((void *)v3 + 1) = 0;
      *((void *)v3 + 2) = 0;
    }
    while (v3 != v4);
    uint64_t v3 = *a1;
    unint64_t v20 = a1[1];
    *a1 = v12;
    *(_OWORD *)(a1 + 1) = v25;
    unint64_t v17 = (char *)v25;
    if (v20 != v3)
    {
      uint64_t v21 = v20;
      do
      {
        uint64_t v23 = (void *)*((void *)v21 - 3);
        v21 -= 24;
        uint64_t v22 = v23;
        if (v23)
        {
          *((void *)v20 - 2) = v22;
          operator delete(v22);
        }
        unint64_t v20 = v21;
      }
      while (v21 != v3);
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v17;
}

void sub_1C49DA0B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v5 = *v2;
  if (*v2)
  {
    *uint64_t v3 = v5;
    operator delete(v5);
  }
  sub_1C496CD14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C49DA0D4(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    unint64_t v6 = *(void **)(a1 + 8);
    unint64_t v5 = *(char **)(a1 + 16);
    int v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(void *)unint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    double v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v35 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v35 = 1;
      }
      if (!(v35 >> 61))
      {
        unint64_t v36 = v35 >> 2;
        uint64_t v37 = 8 * v35;
        unint64_t v38 = (char *)operator new(8 * v35);
        uint64_t v39 = &v38[8 * v36];
        uint64_t v40 = &v38[v37];
        int64_t v42 = v5 - v7;
        BOOL v41 = v5 == v7;
        unint64_t v5 = v39;
        if (!v41)
        {
          unint64_t v5 = &v39[v42 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v43 = v42 - 8;
          if ((unint64_t)(v42 - 8) >= 0x38)
          {
            uint64_t v73 = &v38[8 * v36];
            uint64_t v44 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              uint64_t v74 = (v43 >> 3) + 1;
              uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v44 = &v39[v75];
              v7 += v75;
              unint64_t v76 = (long long *)(v6 + 3);
              uint64_t v77 = v73 + 16;
              uint64_t v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *uint64_t v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            uint64_t v44 = &v38[8 * v36];
          }
          do
          {
            uint64_t v80 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v44 = v80;
            v44 += 8;
          }
          while (v44 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_1C4949AA8();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    uint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      int v7 = *(char **)(a1 + 8);
    }
    unint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      double v89 = operator new(0x1000uLL);
      sub_1C49DA688((char **)a1, &v89);
      return;
    }
    double v89 = operator new(0x1000uLL);
    sub_1C49DA818((void **)a1, &v89);
    double v45 = *(void **)(a1 + 8);
    unint64_t v5 = *(char **)(a1 + 16);
    int v7 = (char *)(v45 + 1);
    uint64_t v8 = *v45;
    *(void *)(a1 + 8) = v45 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_78;
    }
    double v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v46 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v46 = 1;
      }
      if (!(v46 >> 61))
      {
        unint64_t v47 = v46 >> 2;
        uint64_t v48 = 8 * v46;
        unint64_t v38 = (char *)operator new(8 * v46);
        uint64_t v39 = &v38[8 * v47];
        uint64_t v40 = &v38[v48];
        int64_t v49 = v5 - v7;
        BOOL v41 = v5 == v7;
        unint64_t v5 = v39;
        if (!v41)
        {
          unint64_t v5 = &v39[v49 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v50 = v49 - 8;
          if ((unint64_t)(v49 - 8) >= 0x38)
          {
            unint64_t v81 = &v38[8 * v47];
            unint64_t v51 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              uint64_t v82 = (v50 >> 3) + 1;
              uint64_t v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v51 = &v39[v83];
              v7 += v83;
              long long v84 = (long long *)(v45 + 3);
              int v85 = v81 + 16;
              uint64_t v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *int v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            unint64_t v51 = &v38[8 * v47];
          }
          do
          {
            uint64_t v88 = *(void *)v7;
            v7 += 8;
            *(void *)unint64_t v51 = v88;
            v51 += 8;
          }
          while (v51 != v5);
        }
LABEL_76:
        *(void *)a1 = v38;
        *(void *)(a1 + 8) = v39;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v40;
        if (v9)
        {
          operator delete(v9);
          unint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_87;
  }
  long long v25 = (char *)operator new(8 * v24);
  uint64_t v26 = operator new(0x1000uLL);
  double v27 = v26;
  uint64_t v28 = &v25[8 * v21];
  BOOL v29 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v52 = 1;
      }
      else {
        unint64_t v52 = v20 >> 2;
      }
      if (v52 >> 61) {
        sub_1C4949AA8();
      }
      uint64_t v28 = (char *)operator new(8 * v52);
      BOOL v29 = &v28[8 * v52];
      operator delete(v25);
      uint64_t v53 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      long long v25 = v28;
      *(void *)uint64_t v28 = v27;
      unint64_t v31 = v28 + 8;
      if (v18 == v53) {
        goto LABEL_24;
      }
      do
      {
LABEL_51:
        if (v28 == v25)
        {
          if (v31 >= v29)
          {
            if (v29 == v28) {
              unint64_t v58 = 1;
            }
            else {
              unint64_t v58 = (v29 - v28) >> 2;
            }
            if (v58 >> 61) {
              sub_1C4949AA8();
            }
            unint64_t v59 = (char *)operator new(8 * v58);
            long long v25 = v59;
            unint64_t v60 = (v58 + 3) >> 2;
            size_t v54 = &v59[8 * v60];
            unint64_t v33 = v54;
            int64_t v61 = v31 - v28;
            if (v31 != v28)
            {
              unint64_t v33 = &v54[v61 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v62 = v61 - 8;
              unint64_t v63 = &v59[8 * v60];
              uint64_t v64 = v28;
              if (v62 < 0x38) {
                goto LABEL_91;
              }
              uint64_t v65 = 8 * v60;
              unint64_t v63 = &v59[8 * v60];
              uint64_t v64 = v28;
              if ((unint64_t)(v63 - v28) < 0x20) {
                goto LABEL_91;
              }
              uint64_t v66 = (v62 >> 3) + 1;
              uint64_t v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v63 = &v54[v67];
              uint64_t v64 = &v28[v67];
              int v68 = (long long *)(v28 + 16);
              int v69 = &v59[v65 + 16];
              uint64_t v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v71 = *v68;
                *((_OWORD *)v69 - 1) = *(v68 - 1);
                *(_OWORD *)int v69 = v71;
                v68 += 2;
                v69 += 32;
                v70 -= 4;
              }
              while (v70);
              if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_91:
                do
                {
                  uint64_t v72 = *(void *)v64;
                  v64 += 8;
                  *(void *)unint64_t v63 = v72;
                  v63 += 8;
                }
                while (v63 != v33);
              }
            }
            BOOL v29 = &v59[8 * v58];
            operator delete(v28);
          }
          else
          {
            uint64_t v56 = (v29 - v31) >> 3;
            if (v56 >= -1) {
              unint64_t v57 = v56 + 1;
            }
            else {
              unint64_t v57 = v56 + 2;
            }
            unint64_t v33 = &v31[8 * (v57 >> 1)];
            size_t v54 = &v28[8 * (v57 >> 1)];
            if (v31 == v28)
            {
              long long v25 = v31;
            }
            else
            {
              memmove(&v28[8 * (v57 >> 1)], v28, v31 - v28);
              long long v25 = v28;
            }
          }
        }
        else
        {
          size_t v54 = v28;
          unint64_t v33 = v31;
        }
        uint64_t v55 = *(void *)(v18 - 8);
        v18 -= 8;
        *((void *)v54 - 1) = v55;
        uint64_t v32 = v54 - 8;
        unint64_t v31 = v33;
        uint64_t v28 = v32;
      }
      while (v18 != *(void *)(a1 + 8));
      goto LABEL_25;
    }
    unint64_t v30 = v21 + 2;
    if (v21 >= -1) {
      unint64_t v30 = v21 + 1;
    }
    v28 -= 8 * (v30 >> 1);
  }
  *(void *)uint64_t v28 = v26;
  unint64_t v31 = v28 + 8;
  if (v18 != v19) {
    goto LABEL_51;
  }
LABEL_24:
  uint64_t v32 = v28;
  unint64_t v33 = v31;
LABEL_25:
  uint64_t v34 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v32;
  *(void *)(a1 + 16) = v33;
  *(void *)(a1 + 24) = v29;
  if (v34)
  {
    operator delete(v34);
  }
}

void sub_1C49DA628(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C49DA644(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C49DA658(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C49DA670(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C49DA688(char **a1, void *a2)
{
  unint64_t v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_22;
  }
  unint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  if (v6 > *a1)
  {
    uint64_t v7 = (v6 - *a1) >> 3;
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    uint64_t v11 = &v6[-8 * v9];
    int64_t v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      unint64_t v4 = a1[1];
    }
    uint64_t v13 = &v4[8 * v10];
    unint64_t v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  unint64_t v14 = (v4 - v5) >> 2;
  if (v4 == v5) {
    unint64_t v14 = 1;
  }
  if (v14 >> 61) {
    sub_1C4949AA8();
  }
  unint64_t v15 = v14 >> 2;
  uint64_t v16 = 8 * v14;
  uint64_t v17 = (char *)operator new(8 * v14);
  uint64_t v18 = &v17[8 * v15];
  int64_t v20 = v4 - v6;
  BOOL v19 = v4 == v6;
  unint64_t v4 = v18;
  if (!v19)
  {
    unint64_t v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      uint64_t v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        uint64_t v31 = *(void *)v6;
        v6 += 8;
        *(void *)uint64_t v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    uint64_t v23 = &v17[8 * v15];
    uint64_t v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20) {
      goto LABEL_19;
    }
    uint64_t v24 = (v21 >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v22 = &v18[v25];
    uint64_t v26 = &v6[v25];
    double v27 = (long long *)(v6 + 16);
    uint64_t v28 = v23 + 16;
    uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *uint64_t v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    unint64_t v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_19;
    }
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    unint64_t v4 = a1[2];
  }
LABEL_22:
  *(void *)unint64_t v4 = *a2;
  a1[2] += 8;
}

void sub_1C49DA818(void **a1, void *a2)
{
  unint64_t v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    uint64_t v7 = a1[2];
    unint64_t v6 = a1[3];
    if (v7 >= v6)
    {
      uint64_t v13 = v6 - v4;
      BOOL v12 = v13 == 0;
      unint64_t v14 = v13 >> 2;
      if (v12) {
        unint64_t v14 = 1;
      }
      if (v14 >> 61) {
        sub_1C4949AA8();
      }
      unint64_t v15 = (v14 + 3) >> 2;
      uint64_t v16 = 8 * v14;
      uint64_t v17 = (char *)operator new(8 * v14);
      unint64_t v5 = &v17[8 * v15];
      uint64_t v18 = v5;
      uint64_t v19 = v7 - v4;
      if (v7 != v4)
      {
        uint64_t v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v20 = v19 - 8;
        unint64_t v21 = &v17[8 * v15];
        uint64_t v22 = v4;
        if (v20 < 0x38) {
          goto LABEL_27;
        }
        uint64_t v23 = &v17[8 * v15];
        unint64_t v21 = v23;
        uint64_t v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20) {
          goto LABEL_27;
        }
        uint64_t v24 = (v20 >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v21 = &v5[v25];
        uint64_t v22 = &v4[v25];
        uint64_t v26 = (long long *)(v4 + 16);
        double v27 = v23 + 16;
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *double v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            uint64_t v30 = *(void *)v22;
            v22 += 8;
            *(void *)unint64_t v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        unint64_t v5 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v8 = (v6 - v7) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v11 = &v7[8 * (v9 >> 1)];
      unint64_t v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        unint64_t v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    unint64_t v5 = (char *)a1[1];
  }
  *((void *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void sub_1C49DA9B4(uint64_t a1, unint64_t a2, const float *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = (_DWORD *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 2)
  {
    if (a2)
    {
      unint64_t v16 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 4 * a2 > (unint64_t)a3) {
        goto LABEL_45;
      }
      unint64_t v17 = v16 + 1;
      uint64_t v8 = (_DWORD *)(v7 + 4 * (v17 & 0x7FFFFFFFFFFFFFF8));
      float32x4_t v18 = vld1q_dup_f32(a3);
      uint64_t v19 = (float32x4_t *)(v7 + 16);
      uint64_t v20 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19[-1] = v18;
        *uint64_t v19 = v18;
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_45:
        do
          *v8++ = *(_DWORD *)a3;
        while (v8 != (_DWORD *)(v7 + 4 * a2));
      }
      uint64_t v8 = (_DWORD *)(v7 + 4 * a2);
    }
    *(void *)(a1 + 8) = v8;
  }
  else
  {
    uint64_t v9 = *(_DWORD **)a1;
    uint64_t v10 = v7 - *(void *)a1;
    uint64_t v11 = v10 >> 2;
    unint64_t v12 = (v10 >> 2) + a2;
    if (v12 >> 62) {
      sub_1C494A220();
    }
    uint64_t v13 = v6 - (void)v9;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 62) {
        sub_1C4949AA8();
      }
      unint64_t v15 = (char *)operator new(4 * v14);
    }
    else
    {
      unint64_t v15 = 0;
    }
    unint64_t v21 = (unint64_t)&v15[4 * v11];
    uint64_t v22 = (char *)(v21 + 4 * a2);
    unint64_t v23 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    uint64_t v24 = (char *)v21;
    if (v23 < 0x13) {
      goto LABEL_46;
    }
    if (v21 < (unint64_t)(a3 + 1))
    {
      uint64_t v24 = &v15[4 * v11];
      if (&v15[4 * a2 + v10] > (char *)a3) {
        goto LABEL_46;
      }
    }
    unint64_t v25 = v23 + 1;
    uint64_t v24 = (char *)(v21 + 4 * (v25 & 0x7FFFFFFFFFFFFFF8));
    float32x4_t v26 = vld1q_dup_f32(a3);
    double v27 = (float32x4_t *)&v15[4 * v11 + 16];
    uint64_t v28 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      *double v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_46:
      do
      {
        *(float *)uint64_t v24 = *a3;
        v24 += 4;
      }
      while (v24 != v22);
    }
    if ((_DWORD *)v7 != v9)
    {
      unint64_t v29 = v7 - (void)v9 - 4;
      if (v29 < 0x2C) {
        goto LABEL_47;
      }
      if (v7 - (unint64_t)&v15[v10] < 0x20) {
        goto LABEL_47;
      }
      uint64_t v30 = (v29 >> 2) + 1;
      uint64_t v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v8 = (_DWORD *)(v7 - v31);
      v21 -= v31;
      uint64_t v32 = &v15[4 * v11 - 16];
      unint64_t v33 = (long long *)(v7 - 16);
      uint64_t v34 = v30 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)uint64_t v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 8;
      }
      while (v34);
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_47:
        do
        {
          int v36 = *--v8;
          *(_DWORD *)(v21 - 4) = v36;
          v21 -= 4;
        }
        while (v8 != v9);
      }
    }
    *(void *)a1 = v21;
    *(void *)(a1 + 8) = v22;
    *(void *)(a1 + 16) = &v15[4 * v14];
    if (v9)
    {
      operator delete(v9);
    }
  }
}

id *sub_1C49DAC28(void *a1, void *a2, unint64_t a3, void *a4, NSUInteger a5, NSUInteger a6, const void *a7, uint64_t a8, NSUInteger a9, NSUInteger a10, NSUInteger a11, NSUInteger a12, char a13, NSUInteger a14, NSUInteger a15, int a16, int a17, int a18, void *a19, char a20,void *a21,void *a22)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  id v94 = a2;
  id v96 = a4;
  id v95 = a22;
  double v93 = a1;
  if (!a1)
  {
    uint64_t v72 = 0;
    goto LABEL_48;
  }
  NSUInteger v32 = a14;
  if (a11 != 0x7FFFFFFFFFFFFFFFLL && a11 + a12 > a3)
  {
    if (qword_1EA3CA000 == -1)
    {
      unint64_t v33 = (id)qword_1EA3C9F90[0];
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_FAULT))
      {
LABEL_7:

        goto LABEL_8;
      }
    }
    else
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      unint64_t v33 = (id)qword_1EA3C9F90[0];
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_FAULT)) {
        goto LABEL_7;
      }
    }
    v103.location = a11;
    v103.length = a12;
    NSStringFromRange(v103);
    long long v35 = v34 = a3;
    *(_DWORD *)buf = 138412546;
    double v99 = v35;
    __int16 v100 = 2048;
    unint64_t v101 = v34;
    _os_log_impl(&dword_1C492D000, v33, OS_LOG_TYPE_FAULT, "selectedTextRange %@ beyond text length %ld", buf, 0x16u);

    a3 = v34;
    NSUInteger v32 = a14;
    goto LABEL_7;
  }
LABEL_8:
  NSUInteger v36 = a15;
  if (v32 != 0x7FFFFFFFFFFFFFFFLL && v32 + a15 > a3)
  {
    if (qword_1EA3CA000 == -1)
    {
      uint64_t v37 = (id)qword_1EA3C9F90[0];
      if (!os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
      {
LABEL_13:

        goto LABEL_14;
      }
    }
    else
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      uint64_t v37 = (id)qword_1EA3C9F90[0];
      if (!os_log_type_enabled(v37, OS_LOG_TYPE_FAULT)) {
        goto LABEL_13;
      }
    }
    v104.location = v32;
    v104.length = a15;
    NSStringFromRange(v104);
    uint64_t v39 = v38 = a3;
    *(_DWORD *)buf = 138412546;
    double v99 = v39;
    __int16 v100 = 2048;
    unint64_t v101 = v38;
    _os_log_impl(&dword_1C492D000, v37, OS_LOG_TYPE_FAULT, "activePreviewRange %@ beyond text length %ld", buf, 0x16u);

    a3 = v38;
    goto LABEL_13;
  }
LABEL_14:
  if (a5 != 0x7FFFFFFFFFFFFFFFLL)
  {
    NSUInteger v40 = a5 + a6;
    if (a5 + a6 <= a3) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  if (qword_1EA3CA000 == -1)
  {
    unint64_t v43 = (id)qword_1EA3C9F90[0];
    if (!os_log_type_enabled(v43, OS_LOG_TYPE_FAULT)) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  unint64_t v43 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v43, OS_LOG_TYPE_FAULT))
  {
LABEL_21:
    v105.location = 0x7FFFFFFFFFFFFFFFLL;
    v105.length = a6;
    NSStringFromRange(v105);
    v45 = unint64_t v44 = a3;
    *(_DWORD *)buf = 138412290;
    double v99 = v45;
    _os_log_impl(&dword_1C492D000, v43, OS_LOG_TYPE_FAULT, "Invalid referenceSubstringRange %@", buf, 0xCu);

    a3 = v44;
  }
LABEL_22:

  NSUInteger v40 = a6 + 0x7FFFFFFFFFFFFFFFLL;
  if (a6 + 0x7FFFFFFFFFFFFFFFLL <= a3)
  {
LABEL_16:
    NSUInteger v41 = a9;
    if (a6 == objc_msgSend_length(v96, v27, v28, v29, v30, v31)) {
      goto LABEL_17;
    }
    goto LABEL_27;
  }
LABEL_23:
  if (qword_1EA3CA000 == -1)
  {
    unint64_t v46 = (id)qword_1EA3C9F90[0];
    if (!os_log_type_enabled(v46, OS_LOG_TYPE_FAULT)) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  unint64_t v46 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v46, OS_LOG_TYPE_FAULT))
  {
LABEL_25:
    v106.location = a5;
    v106.length = a6;
    NSStringFromRange(v106);
    NSUInteger v47 = v32;
    v49 = unint64_t v48 = a3;
    *(_DWORD *)buf = 138412546;
    double v99 = v49;
    __int16 v100 = 2048;
    unint64_t v101 = v48;
    _os_log_impl(&dword_1C492D000, v46, OS_LOG_TYPE_FAULT, "referenceSubstringRange %@ beyond text length %ld", buf, 0x16u);

    a3 = v48;
    NSUInteger v32 = v47;
    NSUInteger v36 = a15;
  }
LABEL_26:

  NSUInteger v41 = a9;
  if (a6 == objc_msgSend_length(v96, v50, v51, v52, v53, v54))
  {
LABEL_17:
    NSUInteger v42 = a10;
    if (v41 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_39;
    }
LABEL_31:
    if (v41 < a5 || v41 - a5 >= a6 || v41 + v42 > v40)
    {
      NSUInteger v66 = v41;
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v67 = (id)qword_1EA3C9FC0;
      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
      {
        v108.location = v66;
        v108.length = v42;
        NSStringFromRange(v108);
        int v69 = v68 = v36;
        v109.location = a5;
        v109.length = a6;
        uint64_t v70 = NSStringFromRange(v109);
        *(_DWORD *)buf = 138412546;
        double v99 = v69;
        __int16 v100 = 2112;
        unint64_t v101 = (unint64_t)v70;
        _os_log_impl(&dword_1C492D000, v67, OS_LOG_TYPE_ERROR, "The strokeCoveredTextRange %@ must be within the referenceSubstringRange %@", buf, 0x16u);

        NSUInteger v36 = v68;
      }

      NSUInteger v41 = v66;
    }
    goto LABEL_39;
  }
LABEL_27:
  NSUInteger v55 = v41;
  if (qword_1EA3CA000 == -1)
  {
    uint64_t v56 = (id)qword_1EA3C9F90[0];
    if (!os_log_type_enabled(v56, OS_LOG_TYPE_FAULT)) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  uint64_t v56 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v56, OS_LOG_TYPE_FAULT))
  {
LABEL_29:
    v107.location = a5;
    v107.length = a6;
    NSStringFromRange(v107);
    NSUInteger v57 = v36;
    v59 = NSUInteger v58 = a5;
    uint64_t v65 = objc_msgSend_length(v96, v60, v61, v62, v63, v64);
    *(_DWORD *)buf = 138412546;
    double v99 = v59;
    __int16 v100 = 2048;
    unint64_t v101 = v65;
    _os_log_impl(&dword_1C492D000, v56, OS_LOG_TYPE_FAULT, "Invalid referenceSubstringRange %@, length doesn't match string length %ld", buf, 0x16u);

    a5 = v58;
    NSUInteger v36 = v57;
  }
LABEL_30:

  NSUInteger v41 = v55;
  NSUInteger v42 = a10;
  if (v41 != 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_31;
  }
LABEL_39:
  v97.receiver = v93;
  v97.super_class = (Class)CHTextInputTargetContentInfo;
  long long v71 = (id *)objc_msgSendSuper2(&v97, sel_init);
  uint64_t v72 = v71;
  if (v71)
  {
    objc_storeStrong(v71 + 1, a2);
    v72[2] = (id)a3;
    uint64_t v78 = objc_msgSend_copy(v96, v73, v74, v75, v76, v77);
    id v79 = v72[3];
    v72[3] = (id)v78;

    v72[4] = (id)a5;
    v72[5] = (id)a6;
    v72[7] = (id)v41;
    v72[8] = (id)v42;
    v72[9] = (id)a11;
    v72[10] = (id)a12;
    *((unsigned char *)v72 + 88) = a13;
    v72[12] = (id)v32;
    v72[13] = (id)v36;
    *((_DWORD *)v72 + 28) = a16;
    *((_DWORD *)v72 + 29) = a17;
    *((_DWORD *)v72 + 30) = a18;
    v72[16] = a19;
    *((unsigned char *)v72 + 136) = a20;
    v72[18] = a21;
    uint64_t v85 = objc_msgSend_copy(v95, v80, v81, v82, v83, v84);
    id v86 = v72[19];
    v72[19] = (id)v85;

    if (a6)
    {
      if (!a7)
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        long long v87 = (id)qword_1EA3C9F90[0];
        if (os_log_type_enabled(v87, OS_LOG_TYPE_FAULT))
        {
          v110.location = a5;
          v110.length = a6;
          uint64_t v88 = NSStringFromRange(v110);
          *(_DWORD *)buf = 138412290;
          double v99 = v88;
          _os_log_impl(&dword_1C492D000, v87, OS_LOG_TYPE_FAULT, "charRectsInReferenceSubstring cannot be NULL for referenceSubstringRange: %@", buf, 0xCu);
        }
      }
      double v89 = malloc_type_calloc(a6, 0x20uLL, 0x1000040E0EAB150uLL);
      v72[6] = v89;
      memcpy(v89, a7, 32 * a6);
    }
  }
LABEL_48:

  return v72;
}

id sub_1C49DC0F4(uint64_t a1, void *a2)
{
  id v2 = a2;
  return v2;
}

void sub_1C49DC4B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"+-.:<=>acemnorsuvwxz~«»æœавгежзиклмнопстхчшъыьэюяє•←→", a4, a5, a6);
  unint64_t v7 = (void *)qword_1EA3C9100;
  qword_1EA3C9100 = v6;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], v8, @",;_gpqy¡¿çдруцщạẹọụỵ",
    v9,
    v10,
  uint64_t v12 = v11);
  uint64_t v13 = (void *)qword_1EA3C9108;
  qword_1EA3C9108 = v12;

  uint64_t v18 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], v14, @"!\"#&'*/0123456789?ABCDEFGHIJKLMNOPRSTUVWXYZ\\^bdfhiklt£¥ª°ºÀÁÂÃÄÆÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝßàáâãäèéêëìíîïñòóôõöùúûüĂăĐđĨĩŒŨũŸƠơƯưЁЄІЇАБВГЕЖЗИЙКЛМНОПРСТУФХЧШЪЫЬЭЮЯбйёіїҐґẢảẤấẦầẨẩẪẫẮắẰằẲẳẴẵẺẻẼẽẾếỀềỂểỄễỈỉỎỏỐốỒồỔổỖỗỚớỜờỞởỠỡỦủỨứỪừỬửỮữỲỶỸ₫€₴₽↑↓", v15, v16, v17);
  uint64_t v19 = (void *)qword_1EA3C9110;
  qword_1EA3C9110 = v18;
}

uint64_t sub_1C49DC6A8(void *a1, uint64_t a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  a3.n128_u64[0] = *MEMORY[0x1E4F1DB20];
  a4.n128_u64[0] = *(void *)(MEMORY[0x1E4F1DB20] + 8);
  a5.n128_u64[0] = *(void *)(MEMORY[0x1E4F1DB20] + 16);
  a6.n128_u64[0] = *(void *)(MEMORY[0x1E4F1DB20] + 24);
  if (a2 < 0) {
    goto LABEL_4;
  }
  if (a1[6] > a2)
  {
    uint64_t v6 = (unint64_t *)(*(void *)(a1[4] + 48) + 32 * a2);
    a3.n128_u64[0] = *v6;
    a4.n128_u64[0] = v6[1];
    a5.n128_u64[0] = v6[2];
    a6.n128_u64[0] = v6[3];
LABEL_4:
    uint64_t v7 = a1[5];
LABEL_6:
    uint64_t v8 = *(void *)(a1[4] + 32) + a2;
    return (*(uint64_t (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(v7 + 16))(v7, v8, a3, a4, a5, a6);
  }
  uint64_t v7 = a1[5];
  uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
  if (a2 != 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_6;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(v7 + 16))(v7, v8, a3, a4, a5, a6);
}

void sub_1C49DC87C(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  v5.size.CGFloat height = a5;
  v5.size.CGFloat width = a4;
  v5.origin.CGFloat y = a3;
  v5.origin.CGFloat x = a2;
  *(CGRect *)(*(void *)(*(void *)(a1 + 32) + 8) + 32) = CGRectUnion(*(CGRect *)(*(void *)(*(void *)(a1 + 32) + 8)+ 32), v5);
}

void sub_1C49DC9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C49DCAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C49DD4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *__p,uint64_t a26)
{
  _Unwind_Resume(a1);
}

void sub_1C49DD520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1C49DD53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1C49DD560()
{
  JUMPOUT(0x1C49DD584);
}

void sub_1C49DD580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C49DD788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49DDA44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49DDAE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49DDD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C49DDE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C49DDE90(uint64_t a1, void *a2)
{
  id v15 = a2;
  uint64_t v7 = objc_msgSend_objectForKeyedSubscript_(*(void **)(*(void *)(a1 + 32) + 8), v3, (uint64_t)v15, v4, v5, v6);
  uint64_t v13 = v7;
  if (v7)
  {
    objc_msgSend_floatValue(v7, v8, v9, v10, v11, v12);
    *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(double *)(*(void *)(*(void *)(a1 + 40) + 8)
                                                                            + 24)
                                                                + v14;
  }
}

void sub_1C49DDF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49DDF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49DE030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1C49DE054(void *a1, void *a2)
{
  id v15 = a2;
  uint64_t v7 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1[4] + 8), v3, (uint64_t)v15, v4, v5, v6);
  uint64_t v13 = v7;
  if (v7)
  {
    objc_msgSend_floatValue(v7, v8, v9, v10, v11, v12);
    *(double *)(*(void *)(a1[5] + 8) + 24) = *(double *)(*(void *)(a1[5] + 8) + 24) + v14;
    ++*(void *)(*(void *)(a1[6] + 8) + 24);
  }
}

void sub_1C49DE0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49DE104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49DE1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1C49DE210(uint64_t a1, void *a2)
{
  id v15 = a2;
  uint64_t v7 = objc_msgSend_objectForKeyedSubscript_(*(void **)(*(void *)(a1 + 32) + 16), v3, (uint64_t)v15, v4, v5, v6);
  uint64_t v13 = v7;
  if (v7)
  {
    objc_msgSend_floatValue(v7, v8, v9, v10, v11, v12);
    *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(double *)(*(void *)(*(void *)(a1 + 40) + 8)
                                                                            + 24)
                                                                + v14;
  }
}

void sub_1C49DE294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49DE2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49DE524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49DE590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49DE92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1C49DED44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49DED98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49DEDB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49DEDC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49DF0E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49DF0F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49DF174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49DF188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49DF1B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49DF1C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49DF1EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49DF200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49DF2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49DF2FC(uint64_t a1, void *a2, double a3, double a4)
{
  id v7 = a2;
  if (a1)
  {
    uint64_t v30 = (uint64_t)v7;
    sub_1C49DF400(a1, v7);
    uint64_t v8 = *(void **)(a1 + 8);
    *(float *)&double v9 = a3;
    id v15 = objc_msgSend_numberWithFloat_(NSNumber, v10, v11, v12, v13, v14, v9);
    objc_msgSend_setObject_forKey_(v8, v16, (uint64_t)v15, v30, v17, v18);

    uint64_t v19 = *(void **)(a1 + 16);
    *(float *)&double v20 = a4;
    float32x4_t v26 = objc_msgSend_numberWithFloat_(NSNumber, v21, v22, v23, v24, v25, v20);
    objc_msgSend_setObject_forKey_(v19, v27, (uint64_t)v26, v30, v28, v29);

    *(double *)(a1 + 24) = *(double *)(a1 + 24) + a3;
    id v7 = (id)v30;
  }
}

void sub_1C49DF3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49DF3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL sub_1C49DF400(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = v3;
  if (a1)
  {
    double v9 = objc_msgSend_objectForKey_(*(void **)(a1 + 8), v4, (uint64_t)v3, v5, v6, v7);
    id v15 = v9;
    BOOL v16 = v9 != 0;
    if (v9)
    {
      objc_msgSend_doubleValue(v9, v10, v11, v12, v13, v14);
      *(double *)(a1 + 24) = *(double *)(a1 + 24) - v17;
      objc_msgSend_removeObjectForKey_(*(void **)(a1 + 8), v18, (uint64_t)v8, v19, v20, v21);
      objc_msgSend_removeObjectForKey_(*(void **)(a1 + 16), v22, (uint64_t)v8, v23, v24, v25);
    }

    return v16;
  }
  else
  {

    return 0;
  }
}

void sub_1C49DF4A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49DF4B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49E005C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C49E02FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49E030C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49E09D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49E1BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  sub_1C49E24E4(&a43);
  _Unwind_Resume(a1);
}

void sub_1C49E212C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = objc_msgSend_cornerIndexes(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  IndeCGFloat x = objc_msgSend_firstIndex(v8, v9, v10, v11, v12, v13);

  if ((const char *)Index != a2)
  {
    uint64_t v20 = *(void **)(a1 + 32);
    uint64_t v21 = objc_msgSend_resampledDrawing(v20, v15, v16, v17, v18, v19);
    uint64_t v22 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    id v23 = v21;
    double v27 = v23;
    if (v20)
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(v23, v24, 0, v22, v25, v26);
      float64_t v39 = v29;
      float64_t v40 = v28;
      objc_msgSend_pointForStrokeIndex_pointIndex_(v27, v30, 0, (uint64_t)a2, v31, v32);
      v33.f64[0] = v40;
      v33.f64[1] = v39;
      v35.f64[1] = v34;
      *(float32x2_t *)&v35.f64[0] = vsub_f32(vcvt_f32_f64(v33), vcvt_f32_f64(v35));
      double v36 = sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&v35.f64[0], *(float32x2_t *)&v35.f64[0])));
    }
    else
    {
      double v36 = 0.0;
    }

    uint64_t v37 = *(void *)(*(void *)(a1 + 48) + 8);
    double v38 = *(double *)(v37 + 24);
    if (v38 <= v36) {
      double v38 = v36;
    }
    *(double *)(v37 + 24) = v38;
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  }
}

void sub_1C49E223C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49E2254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49E2264(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = objc_msgSend_resampledDrawing(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  objc_msgSend_pointForStrokeIndex_pointIndex_(v8, v9, 0, (uint64_t)a2, v10, v11);
  double v13 = v12;
  double v15 = v14;

  uint64_t v21 = objc_msgSend_cornerIndexes(*(void **)(a1 + 32), v16, v17, v18, v19, v20);
  IndeCGFloat x = objc_msgSend_firstIndex(v21, v22, v23, v24, v25, v26);

  if ((const char *)Index != a2)
  {
    float64x2_t v33 = objc_msgSend_resampledDrawing(*(void **)(a1 + 32), v28, v29, v30, v31, v32);
    objc_msgSend_pointForStrokeIndex_pointIndex_(v33, v34, 0, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), v35, v36);
    double v38 = v37;
    double v40 = v39;

    NSUInteger v41 = *(void **)(a1 + 32);
    NSUInteger v47 = objc_msgSend_resampledDrawing(v41, v42, v43, v44, v45, v46);
    uint64_t v48 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    id v49 = v47;
    uint64_t v53 = v49;
    if (v41)
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(v49, v50, 0, v48, v51, v52);
      float64_t v75 = v55;
      float64_t v76 = v54;
      objc_msgSend_pointForStrokeIndex_pointIndex_(v53, v56, 0, (uint64_t)a2, v57, v58);
      v59.f64[0] = v76;
      v59.f64[1] = v75;
      v61.f64[1] = v60;
      *(float32x2_t *)&v61.f64[0] = vsub_f32(vcvt_f32_f64(v59), vcvt_f32_f64(v61));
      double v62 = sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&v61.f64[0], *(float32x2_t *)&v61.f64[0])));

      if (v62 <= *(double *)(a1 + 64)) {
        goto LABEL_8;
      }
    }
    else
    {

      if (*(double *)(a1 + 64) >= 0.0) {
        goto LABEL_8;
      }
    }
    v63.f32[0] = v38 - v13;
    float32_t v64 = v40 - v15;
    v63.f32[1] = v64;
    float32x2_t v65 = vmul_f32(v63, v63);
    v65.i32[0] = vadd_f32(v65, (float32x2_t)vdup_lane_s32((int32x2_t)v65, 1)).u32[0];
    float32x2_t v66 = vrsqrte_f32((float32x2_t)v65.u32[0]);
    float32x2_t v67 = vmul_f32(v66, vrsqrts_f32((float32x2_t)v65.u32[0], vmul_f32(v66, v66)));
    float32x2_t v68 = vmul_n_f32(v63, vmul_f32(v67, vrsqrts_f32((float32x2_t)v65.u32[0], vmul_f32(v67, v67))).f32[0]);
    int v69 = *(float32x2_t **)(*(void *)(a1 + 56) + 8);
    float32x2_t v70 = v69[3];
    if (sqrtf(vaddv_f32(vmul_f32(v70, v70))) > 0.0 && acosf(vaddv_f32(vmul_f32(v68, v70))) > 1.57079633)
    {
      ++*(void *)(*(void *)(a1 + 32) + 40);
      objc_msgSend_addIndex_(*(void **)(a1 + 40), v71, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), v72, v73, v74);
      int v69 = *(float32x2_t **)(*(void *)(a1 + 56) + 8);
    }
    v69[3] = v68;
  }
LABEL_8:
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a2;
}

void sub_1C49E2494(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49E24AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49E24BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49E24CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void **sub_1C49E24E4(void **a1)
{
  id v2 = (char *)*a1;
  if (*a1)
  {
    id v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 24;
        sub_1C4999C7C((uint64_t)(v3 - 24), *((void **)v3 - 2));
        id v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

BOOL sub_1C49E2550(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  id v7 = a1;
  uint64_t v8 = v7;
  if (a2 != a3)
  {
    id v9 = v7;
    objc_msgSend_pointForStrokeIndex_pointIndex_(v9, v10, 0, a2, v11, v12);
    float64_t v43 = v14;
    float64_t v45 = v13;
    objc_msgSend_pointForStrokeIndex_pointIndex_(v9, v15, 0, a3, v16, v17);
    float64_t v41 = v19;
    float64_t v42 = v18;

    id v20 = v9;
    uint64_t v21 = v20;
    if (a2 < a3)
    {
      v22.f64[0] = v45;
      v22.f64[1] = v43;
      v23.f64[0] = v42;
      v23.f64[1] = v41;
      *(float32x2_t *)&v22.f64[0] = vsub_f32(vcvt_f32_f64(v22), vcvt_f32_f64(v23));
      double v24 = sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&v22.f64[0], *(float32x2_t *)&v22.f64[0])));
      double v25 = 0.0;
      do
      {
        id v26 = v21;
        objc_msgSend_pointForStrokeIndex_pointIndex_(v26, v27, 0, a2, v28, v29);
        float64_t v44 = v31;
        float64_t v46 = v30;
        objc_msgSend_pointForStrokeIndex_pointIndex_(v26, v32, 0, ++a2, v33, v34);
        v35.f64[0] = v46;
        v35.f64[1] = v44;
        v37.f64[1] = v36;
        *(float32x2_t *)&v37.f64[0] = vsub_f32(vcvt_f32_f64(v35), vcvt_f32_f64(v37));
        double v38 = sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&v37.f64[0], *(float32x2_t *)&v37.f64[0])));

        double v25 = v25 + v38;
      }
      while (a3 != a2);

      if (v25 >= 0.001)
      {
        BOOL v39 = v24 / v25 > a4;
        goto LABEL_8;
      }
    }
    else
    {
    }
  }
  BOOL v39 = 0;
LABEL_8:

  return v39;
}

void sub_1C49E26BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49E26D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49E26EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1C49E2704(void *result, void *a2)
{
  result[6] = a2[6];
  id v2 = a2 + 7;
  uint64_t v3 = a2[7];
  result[7] = v3;
  uint64_t v4 = result + 7;
  uint64_t v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[6] = v2;
    *id v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void sub_1C49E2740(uint64_t a1)
{
}

uint64_t sub_1C49E2750(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v10 = (uint64_t **)(v8 + 56);
  id v9 = *(uint64_t **)(v8 + 56);
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v11 = (uint64_t **)v9;
        uint64_t v12 = v9[4];
        if (v12 <= (uint64_t)a2) {
          break;
        }
        id v9 = *v11;
        uint64_t v10 = v11;
        if (!*v11) {
          goto LABEL_8;
        }
      }
      if (v12 >= (uint64_t)a2) {
        break;
      }
      id v9 = v11[1];
      if (!v9)
      {
        uint64_t v10 = v11 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v11 = (uint64_t **)(v8 + 56);
LABEL_8:
    double v13 = (uint64_t *)v11;
    uint64_t v11 = (uint64_t **)operator new(0x30uLL);
    v11[4] = (uint64_t *)a2;
    v11[5] = 0;
    *uint64_t v11 = 0;
    v11[1] = 0;
    v11[2] = v13;
    *uint64_t v10 = (uint64_t *)v11;
    uint64_t v14 = **(void **)(v8 + 48);
    double v15 = (uint64_t *)v11;
    if (v14)
    {
      *(void *)(v8 + 48) = v14;
      double v15 = *v10;
    }
    sub_1C4949FD4(*(uint64_t **)(v8 + 56), v15);
    ++*(void *)(v8 + 64);
  }
  uint64_t v16 = (uint64_t)v11[5];
  if (v16 == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v17 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
    {
      v19[0] = 0;
      _os_log_impl(&dword_1C492D000, v17, OS_LOG_TYPE_FAULT, "Could not find a point in the drawing to match that in the resampled drawing", (uint8_t *)v19, 2u);
    }
  }
  return objc_msgSend_addIndex_(*(void **)(a1 + 32), a2, v16, a4, a5, a6);
}

void sub_1C49E2994(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  if (*(void *)(a1 + 16))
  {
    uint64_t v6 = *(uint64_t **)a1;
    uint64_t v8 = (uint64_t **)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    id v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      uint64_t v10 = (uint64_t *)v9[2];
      if (v10)
      {
        uint64_t v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *uint64_t v10 = 0;
          while (1)
          {
            uint64_t v33 = (uint64_t *)v10[1];
            if (!v33) {
              break;
            }
            do
            {
              uint64_t v10 = v33;
              uint64_t v33 = (uint64_t *)*v33;
            }
            while (v33);
          }
        }
        else
        {
          for (v10[1] = 0; v11; uint64_t v11 = (uint64_t *)v10[1])
          {
            do
            {
              uint64_t v10 = v11;
              uint64_t v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        uint64_t v12 = v9;
        double v13 = v4;
        while (1)
        {
          id v9 = v10;
          uint64_t v14 = v13[4];
          v12[4] = v14;
          v12[5] = v13[5];
          double v15 = *v8;
          uint64_t v16 = (uint64_t **)(a1 + 8);
          uint64_t v17 = (uint64_t **)(a1 + 8);
          if (*v8) {
            break;
          }
LABEL_14:
          *uint64_t v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v16;
          *uint64_t v17 = v12;
          uint64_t v18 = **(void **)a1;
          if (v18) {
            goto LABEL_15;
          }
LABEL_16:
          sub_1C4949FD4(*(uint64_t **)(a1 + 8), v12);
          ++*(void *)(a1 + 16);
          if (v10)
          {
            uint64_t v10 = (uint64_t *)v10[2];
            if (v10)
            {
              uint64_t v21 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *uint64_t v10 = 0;
                while (1)
                {
                  float64x2_t v22 = (uint64_t *)v10[1];
                  if (!v22) {
                    break;
                  }
                  do
                  {
                    uint64_t v10 = v22;
                    float64x2_t v22 = (uint64_t *)*v22;
                  }
                  while (v22);
                }
              }
              else
              {
                for (v10[1] = 0; v21; uint64_t v21 = (uint64_t *)v10[1])
                {
                  do
                  {
                    uint64_t v10 = v21;
                    uint64_t v21 = (uint64_t *)*v21;
                  }
                  while (v21);
                }
              }
            }
          }
          else
          {
            uint64_t v10 = 0;
          }
          double v19 = (void *)v13[1];
          if (v19)
          {
            do
            {
              uint64_t v4 = v19;
              double v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              uint64_t v4 = (void *)v13[2];
              BOOL v20 = *v4 == (void)v13;
              double v13 = v4;
            }
            while (!v20);
          }
          if (v9)
          {
            uint64_t v12 = v9;
            double v13 = v4;
            if (v4 != a3) {
              continue;
            }
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            uint64_t v16 = (uint64_t **)v15;
            if (v14 >= v15[4]) {
              break;
            }
            double v15 = (uint64_t *)*v15;
            uint64_t v17 = v16;
            if (!*v16) {
              goto LABEL_14;
            }
          }
          double v15 = (uint64_t *)v15[1];
        }
        while (v15);
        uint64_t v17 = v16 + 1;
        *uint64_t v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v16;
        v16[1] = v12;
        uint64_t v18 = **(void **)a1;
        if (!v18) {
          goto LABEL_16;
        }
LABEL_15:
        *(void *)a1 = v18;
        uint64_t v12 = *v17;
        goto LABEL_16;
      }
LABEL_42:
      sub_1C4999C7C(a1, v9);
      if (v10)
      {
        for (uint64_t i = (uint64_t *)v10[2]; i; uint64_t i = (uint64_t *)i[2])
          uint64_t v10 = i;
        sub_1C4999C7C(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    double v24 = (uint64_t **)(a1 + 8);
    while (1)
    {
      double v25 = (uint64_t *)operator new(0x30uLL);
      id v26 = v25;
      *((_OWORD *)v25 + 2) = *((_OWORD *)v4 + 2);
      double v27 = *v24;
      uint64_t v28 = (uint64_t **)(a1 + 8);
      uint64_t v29 = (uint64_t **)(a1 + 8);
      if (*v24) {
        break;
      }
LABEL_54:
      *double v25 = 0;
      v25[1] = 0;
      v25[2] = (uint64_t)v28;
      *uint64_t v29 = v25;
      uint64_t v30 = **(void **)a1;
      if (v30) {
        goto LABEL_55;
      }
LABEL_56:
      sub_1C4949FD4(*(uint64_t **)(a1 + 8), v26);
      ++*(void *)(a1 + 16);
      double v31 = (void *)v4[1];
      if (v31)
      {
        do
        {
          uint64_t v32 = v31;
          double v31 = (void *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          uint64_t v32 = (void *)v4[2];
          BOOL v20 = *v32 == (void)v4;
          uint64_t v4 = v32;
        }
        while (!v20);
      }
      uint64_t v4 = v32;
      if (v32 == a3) {
        return;
      }
    }
    do
    {
      while (1)
      {
        uint64_t v28 = (uint64_t **)v27;
        if (v25[4] >= v27[4]) {
          break;
        }
        double v27 = (uint64_t *)*v27;
        uint64_t v29 = v28;
        if (!*v28) {
          goto LABEL_54;
        }
      }
      double v27 = (uint64_t *)v27[1];
    }
    while (v27);
    uint64_t v29 = v28 + 1;
    *double v25 = 0;
    v25[1] = 0;
    v25[2] = (uint64_t)v28;
    v28[1] = v25;
    uint64_t v30 = **(void **)a1;
    if (!v30) {
      goto LABEL_56;
    }
LABEL_55:
    *(void *)a1 = v30;
    id v26 = *v29;
    goto LABEL_56;
  }
}

void sub_1C49E344C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v3 - 248));
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C49E3488(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C49E349C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  _Block_object_dispose(&a48, 8);
  _Block_object_dispose(&a52, 8);
  _Block_object_dispose((const void *)(v52 - 248), 8);
  _Block_object_dispose((const void *)(v52 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1C49E34D8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1C49E34F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C49E3504(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C49E3514(uint64_t a1)
{
}

void sub_1C49E351C(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v4 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = objc_msgSend_description(v3, v5, v6, v7, v8, v9);
    int v13 = 138412290;
    uint64_t v14 = v10;
    _os_log_impl(&dword_1C492D000, v4, OS_LOG_TYPE_ERROR, "An XPC proxy service error occurred: %@", (uint8_t *)&v13, 0xCu);
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v3;
}

void sub_1C49E3624(void *a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = v7;
  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(a1[4] + 8) + 40), a2);
  }
  else if (v7)
  {
    objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), a3);
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v9 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = objc_msgSend_localizedDescription(v8, v10, v11, v12, v13, v14);
      int v16 = 138412290;
      uint64_t v17 = v15;
      _os_log_impl(&dword_1C492D000, v9, OS_LOG_TYPE_DEBUG, "Error during sketch recognition: %@", (uint8_t *)&v16, 0xCu);
    }
  }
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
}

void sub_1C49E3928(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = (void **)WeakRetained;
    objc_sync_enter(v3);
    objc_msgSend_invalidate(v3[7], v4, v5, v6, v7, v8);
    uint64_t v9 = v3[7];
    v3[7] = 0;

    objc_sync_exit(v3);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v10 = (id)qword_1EA3C9FB0;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1C492D000, v10, OS_LOG_TYPE_ERROR, "Remote connection to handwritingd was interrupted", v11, 2u);
  }
}

void sub_1C49E3A10(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C49E3A24()
{
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  v0 = (id)qword_1EA3C9FB0;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl(&dword_1C492D000, v0, OS_LOG_TYPE_ERROR, "Remote connection to handwritingd was invalidated", v1, 2u);
  }
}

void sub_1C49E3B40(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C49E3C68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49E4BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1C49E5250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

BOOL sub_1C49E52A8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_classification(a2, (const char *)a2, a3, a4, a5, a6) == *(void *)(a1 + 32);
}

void sub_1C49E5364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49E537C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49E553C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C49E59A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C49E5B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49E5B14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49E5B24(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  objc_msgSend_bounds(v4, v6, v7, v8, v9, v10);
  double v12 = v11;
  objc_msgSend_bounds(v4, v13, v14, v15, v16, v17);
  double v19 = v18;
  objc_msgSend_bounds(v5, v20, v21, v22, v23, v24);
  double v26 = v25;
  objc_msgSend_bounds(v5, v27, v28, v29, v30, v31);
  if (v12 * v19 <= v26 * v32) {
    uint64_t v33 = 1;
  }
  else {
    uint64_t v33 = -1;
  }

  return v33;
}

void sub_1C49E5BB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49E5BCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49E5BE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49E5BF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49E5DC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49E8A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,void *a30,void *a31,void *a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  _Unwind_Resume(a1);
}

void sub_1C49E9ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C49E9B6C(uint64_t a1, void *a2)
{
  id v25 = a2;
  uint64_t v8 = objc_msgSend_strokeClassificationsByStrokeIdentifier(*(void **)(a1 + 32), v3, v4, v5, v6, v7);
  uint64_t v13 = objc_msgSend_objectForKey_(v8, v9, (uint64_t)v25, v10, v11, v12);
  uint64_t v19 = objc_msgSend_integerValue(v13, v14, v15, v16, v17, v18);

  self;
  uint64_t v24 = 48;
  if (v19 == 5) {
    uint64_t v24 = 40;
  }
  objc_msgSend_addObject_(*(void **)(a1 + v24), v20, (uint64_t)v25, v21, v22, v23);
}

void sub_1C49E9C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49E9C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49E9C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49E9C58(uint64_t a1, void *a2)
{
  id v25 = a2;
  uint64_t v8 = objc_msgSend_strokeClassificationsByStrokeIdentifier(*(void **)(a1 + 32), v3, v4, v5, v6, v7);
  uint64_t v13 = objc_msgSend_objectForKey_(v8, v9, (uint64_t)v25, v10, v11, v12);
  uint64_t v19 = objc_msgSend_integerValue(v13, v14, v15, v16, v17, v18);

  self;
  uint64_t v24 = 48;
  if (v19 == 5) {
    uint64_t v24 = 40;
  }
  objc_msgSend_addObject_(*(void **)(a1 + v24), v20, (uint64_t)v25, v21, v22, v23);
}

void sub_1C49E9CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49E9D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49E9D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49E9D44(uint64_t a1, void *a2)
{
  id v47 = a2;
  uint64_t v8 = objc_msgSend_strokeClassificationsByStrokeIdentifier(*(void **)(a1 + 32), v3, v4, v5, v6, v7);
  uint64_t v13 = objc_msgSend_objectForKey_(v8, v9, (uint64_t)v47, v10, v11, v12);
  uint64_t v19 = objc_msgSend_integerValue(v13, v14, v15, v16, v17, v18);

  id v25 = objc_msgSend_strokeClassificationsByStrokeIdentifier(*(void **)(a1 + 40), v20, v21, v22, v23, v24);
  uint64_t v30 = objc_msgSend_objectForKey_(v25, v26, (uint64_t)v47, v27, v28, v29);
  uint64_t v36 = objc_msgSend_integerValue(v30, v31, v32, v33, v34, v35);

  self;
  self;
  BOOL v41 = v36 != 5;
  if (v36 == 5 && v19 != 5)
  {
    objc_msgSend_addObject_(*(void **)(a1 + 48), v37, (uint64_t)v47, v38, v39, v40);
    float64_t v46 = (void **)(a1 + 56);
LABEL_7:
    objc_msgSend_addObject_(*v46, v42, (uint64_t)v47, v43, v44, v45);
    goto LABEL_8;
  }
  if (v36 != 5 && v19 == 5)
  {
    objc_msgSend_addObject_(*(void **)(a1 + 64), v37, (uint64_t)v47, v38, v39, v40);
    float64_t v46 = (void **)(a1 + 72);
    goto LABEL_7;
  }
  if (v19 != 5) {
    BOOL v41 = 1;
  }
  if (!v41) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 1;
  }
LABEL_8:
}

void sub_1C49E9E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49E9E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49E9EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49E9EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49E9EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49E9EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49E9F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49E9F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49E9F38(uint64_t a1, void *a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  id v69 = a2;
  uint64_t v8 = objc_msgSend_classification(v69, v3, v4, v5, v6, v7);
  self;
  if (v8 == 5)
  {
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24)) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v50 = objc_msgSend_classification(v69, v9, v10, v11, v12, v13);
    self;
    if ((unint64_t)(v50 - 6) > 2)
    {
LABEL_20:
      uint64_t v67 = 0;
      goto LABEL_21;
    }
    if (objc_msgSend_count(*(void **)(a1 + 32), v51, v52, v53, v54, v55))
    {
      float64x2_t v61 = objc_msgSend_strokeIdentifiers(v69, v56, v57, v58, v59, v60);
      int v66 = objc_msgSend_intersectsSet_(v61, v62, *(void *)(a1 + 32), v63, v64, v65);

      if (v66)
      {
LABEL_3:
        objc_msgSend_addObject_(*(void **)(a1 + 40), v9, (uint64_t)v69, v11, v12, v13);
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        uint64_t v19 = objc_msgSend_strokeIdentifiers(v69, v14, v15, v16, v17, v18);
        uint64_t v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v20, (uint64_t)&v70, (uint64_t)v74, 16, v21);
        if (v27)
        {
          uint64_t v28 = *(void *)v71;
          do
          {
            for (uint64_t i = 0; i != v27; ++i)
            {
              if (*(void *)v71 != v28) {
                objc_enumerationMutation(v19);
              }
              uint64_t v30 = *(void *)(*((void *)&v70 + 1) + 8 * i);
              uint64_t v31 = objc_msgSend_removedStrokeIdentifiers(*(void **)(a1 + 48), v22, v23, v24, v25, v26);
              char v36 = objc_msgSend_containsObject_(v31, v32, v30, v33, v34, v35);

              if ((v36 & 1) == 0)
              {
                float64x2_t v37 = objc_msgSend_strokeClassificationsByStrokeIdentifier(*(void **)(a1 + 56), v22, v23, v24, v25, v26);
                float64_t v42 = objc_msgSend_objectForKey_(v37, v38, v30, v39, v40, v41);
                uint64_t v48 = objc_msgSend_integerValue(v42, v43, v44, v45, v46, v47);

                self;
                id v49 = (void **)(a1 + 64);
                if (v48 == 5 || (self, id v49 = (void **)(a1 + 72), (unint64_t)(v48 - 6) <= 2)) {
                  objc_msgSend_addObject_(*v49, v22, v30, v24, v25, v26);
                }
              }
            }
            uint64_t v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v22, (uint64_t)&v70, (uint64_t)v74, 16, v26);
          }
          while (v27);
        }

        goto LABEL_20;
      }
    }
  }
  uint64_t v67 = 1;
LABEL_21:

  return v67;
}

void sub_1C49EA198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1C49EA204(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v11 = objc_msgSend_strokeForIdentifier_inStrokeProvider_(CHStrokeUtilities, v4, (uint64_t)v3, *(void *)(a1 + 32), v5, v6);
  if (v11)
  {
    objc_msgSend_addObject_(*(void **)(a1 + 40), v7, (uint64_t)v11, v8, v9, v10);
  }
  else
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v12 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    {
      int v13 = 138412290;
      id v14 = v3;
      _os_log_impl(&dword_1C492D000, v12, OS_LOG_TYPE_FAULT, "Unexpected nil stroke in _handleNonTextStrokes, encoded stroke identifier is %@. Skipping", (uint8_t *)&v13, 0xCu);
    }
  }
}

void sub_1C49EA31C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49EA330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49EA344(uint64_t a1, void *a2)
{
  id v23 = a2;
  uint64_t v8 = objc_msgSend_strokeClassificationsByStrokeIdentifier(*(void **)(a1 + 32), v3, v4, v5, v6, v7);
  int v13 = objc_msgSend_objectForKeyedSubscript_(v8, v9, (uint64_t)v23, v10, v11, v12);
  int isEqualToNumber = objc_msgSend_isEqualToNumber_(v13, v14, *(void *)(a1 + 40), v15, v16, v17);

  if (isEqualToNumber) {
    objc_msgSend_addObject_(*(void **)(a1 + 48), v19, (uint64_t)v23, v20, v21, v22);
  }
}

void sub_1C49EA3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49EA3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49EA408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49EA41C(uint64_t a1, void *a2)
{
  id v23 = a2;
  uint64_t v8 = objc_msgSend_strokeClassificationsByStrokeIdentifier(*(void **)(a1 + 32), v3, v4, v5, v6, v7);
  int v13 = objc_msgSend_objectForKeyedSubscript_(v8, v9, (uint64_t)v23, v10, v11, v12);
  int isEqualToNumber = objc_msgSend_isEqualToNumber_(v13, v14, *(void *)(a1 + 40), v15, v16, v17);

  if (isEqualToNumber) {
    objc_msgSend_addObject_(*(void **)(a1 + 48), v19, (uint64_t)v23, v20, v21, v22);
  }
}

void sub_1C49EA4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49EA4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49EA4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49EA4F4(uint64_t a1, void *a2)
{
  id v36 = a2;
  uint64_t v8 = objc_msgSend_strokeClassificationsByStrokeIdentifier(*(void **)(a1 + 32), v3, v4, v5, v6, v7);
  int v13 = objc_msgSend_objectForKeyedSubscript_(v8, v9, (uint64_t)v36, v10, v11, v12);
  int isEqualToNumber = objc_msgSend_isEqualToNumber_(v13, v14, *(void *)(a1 + 40), v15, v16, v17);

  if (isEqualToNumber)
  {
    uint64_t v24 = (void **)(a1 + 48);
  }
  else
  {
    uint64_t v25 = objc_msgSend_strokeClassificationsByStrokeIdentifier(*(void **)(a1 + 56), v19, v20, v21, v22, v23);
    uint64_t v30 = objc_msgSend_objectForKeyedSubscript_(v25, v26, (uint64_t)v36, v27, v28, v29);
    int v35 = objc_msgSend_isEqualToNumber_(v30, v31, *(void *)(a1 + 40), v32, v33, v34);

    if (!v35) {
      goto LABEL_6;
    }
    uint64_t v24 = (void **)(a1 + 64);
  }
  objc_msgSend_addObject_(*v24, v19, (uint64_t)v36, v21, v22, v23);
LABEL_6:
}

void sub_1C49EA5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49EA600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49EA618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49EA62C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v10 = objc_msgSend_strokeIdentifierFromData_(*(void **)(a1 + 32), v6, a2, v7, v8, v9);
  uint64_t v15 = objc_msgSend_strokeIdentifierFromData_(*(void **)(a1 + 32), v11, (uint64_t)v5, v12, v13, v14);
  uint64_t v19 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(*(void **)(a1 + 32), v16, (uint64_t)v10, (uint64_t)v15, v17, v18);

  return v19;
}

void sub_1C49EA6AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49EA6CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49EA6DC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_strategyIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  uint64_t isEqualToString = objc_msgSend_isEqualToString_(v7, v8, *(void *)(a1 + 32), v9, v10, v11);

  return isEqualToString;
}

void sub_1C49EA720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49EA730(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_strategyIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  uint64_t isEqualToString = objc_msgSend_isEqualToString_(v7, v8, *(void *)(a1 + 32), v9, v10, v11);

  return isEqualToString;
}

void sub_1C49EA774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49EA784(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  objc_msgSend_groupingConfidence(v4, v6, v7, v8, v9, v10);
  double v12 = v11;
  objc_msgSend_groupingConfidence(v5, v13, v14, v15, v16, v17);
  if (v12 >= v23)
  {
    objc_msgSend_groupingConfidence(v4, v18, v19, v20, v21, v22);
    double v26 = v25;
    objc_msgSend_groupingConfidence(v5, v27, v28, v29, v30, v31);
    if (v26 > v32) {
      uint64_t v24 = -1;
    }
    else {
      uint64_t v24 = 0;
    }
  }
  else
  {
    uint64_t v24 = 1;
  }

  return v24;
}

void sub_1C49EA814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49EAC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49EAE1C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void **)(a1 + 32);
  double v12 = objc_msgSend_strokeIdentifier(a2, v7, v8, v9, v10, v11);
  uint64_t v18 = objc_msgSend_strokeIdentifier(v5, v13, v14, v15, v16, v17);
  uint64_t v22 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(v6, v19, (uint64_t)v12, (uint64_t)v18, v20, v21);

  return v22;
}

void sub_1C49EAE98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49EAEB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49EAEC8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  uint64_t v11 = *(void **)(a1 + 32);
  if (v11) {
    objc_msgSend_addPoint_(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  double v12 = a7 - *(double *)(a1 + 48);
  double v13 = a8 - *(double *)(a1 + 56);
  uint64_t v14 = *(void **)(a1 + 40);
  return objc_msgSend_addPoint_(v14, a2, a3, a4, a5, a6, v12, v13);
}

void sub_1C49EB180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C49EB298(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1C49EB298(a1, *a2);
    sub_1C49EB298(a1, a2[1]);
    id v4 = (void *)a2[7];
    if (v4)
    {
      id v5 = (void *)a2[8];
      uint64_t v6 = (void *)a2[7];
      if (v5 != v4)
      {
        do
        {
          uint64_t v7 = (void *)*(v5 - 3);
          if (v7)
          {
            do
            {
              uint64_t v8 = (void *)*v7;
              operator delete(v7);
              uint64_t v7 = v8;
            }
            while (v8);
          }
          uint64_t v10 = (void *)*(v5 - 5);
          v5 -= 5;
          uint64_t v9 = v10;
          void *v5 = 0;
          if (v10) {
            operator delete(v9);
          }
        }
        while (v5 != v4);
        uint64_t v6 = (void *)a2[7];
      }
      a2[8] = v4;
      operator delete(v6);
    }
    sub_1C4999C7C((uint64_t)(a2 + 4), (void *)a2[5]);
    operator delete(a2);
  }
}

void *sub_1C49EB368(void *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    uint64_t v6 = a2;
    uint64_t v7 = (void **)result;
    uint64_t v8 = result + 1;
    do
    {
      double result = sub_1C49EB478(v7, v8, v18, &v17, v6 + 4);
      if (*result)
      {
        uint64_t v9 = (void *)v6[1];
        if (v9) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v10 = (uint64_t **)result;
        sub_1C49EB7EC((uint64_t)v7, (uint64_t)(v6 + 4), (uint64_t)&v16);
        uint64_t v11 = v18[0];
        double v12 = v16;
        *uint64_t v16 = 0;
        v12[1] = 0;
        v12[2] = v11;
        *uint64_t v10 = v12;
        double v13 = (void *)**v7;
        if (v13)
        {
          *uint64_t v7 = v13;
          double v12 = *v10;
        }
        double result = sub_1C4949FD4(v7[1], v12);
        v7[2] = (void *)((char *)v7[2] + 1);
        uint64_t v9 = (void *)v6[1];
        if (v9)
        {
          do
          {
LABEL_10:
            uint64_t v14 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        uint64_t v14 = (void *)v6[2];
        BOOL v15 = *v14 == (void)v6;
        uint64_t v6 = v14;
      }
      while (!v15);
LABEL_3:
      uint64_t v6 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void *sub_1C49EB478(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  if (a1 + 1 != a2)
  {
    id v5 = a5 + 1;
    uint64_t v6 = (void *)*a5;
    uint64_t v7 = (void *)a2[4];
    uint64_t v8 = a2 + 5;
    if (v7 == a2 + 5)
    {
LABEL_24:
      if (v6 == v5)
      {
LABEL_41:
        *a3 = a2;
        *a4 = a2;
        return a4;
      }
      uint64_t v21 = (void *)*a5;
      while (v7 != v8)
      {
        unint64_t v22 = v7[4];
        unint64_t v23 = v21[4];
        if (v22 < v23) {
          break;
        }
        if (v23 >= v22)
        {
          uint64_t v24 = (void *)v7[1];
          double v25 = v7;
          if (v24)
          {
            do
            {
              uint64_t v7 = v24;
              uint64_t v24 = (void *)*v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              uint64_t v7 = (void *)v25[2];
              BOOL v15 = *v7 == (void)v25;
              double v25 = v7;
            }
            while (!v15);
          }
          double v26 = (void *)v21[1];
          if (v26)
          {
            do
            {
              uint64_t v27 = v26;
              double v26 = (void *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              uint64_t v27 = (void *)v21[2];
              BOOL v15 = *v27 == (void)v21;
              uint64_t v21 = v27;
            }
            while (!v15);
          }
          uint64_t v21 = v27;
          if (v27 != v5) {
            continue;
          }
        }
        goto LABEL_41;
      }
      uint64_t v29 = a2[1];
      if (v29)
      {
        uint64_t v30 = (void *)a2[1];
        do
        {
          uint64_t v31 = v30;
          uint64_t v30 = (void *)*v30;
        }
        while (v30);
      }
      else
      {
        uint64_t v41 = a2;
        do
        {
          uint64_t v31 = (void *)v41[2];
          BOOL v15 = *v31 == (void)v41;
          uint64_t v41 = v31;
        }
        while (!v15);
      }
      if (v31 != a1 + 1)
      {
        float64_t v42 = (void *)v31[4];
        if (v42 == v31 + 5) {
          return sub_1C49EB8C0((uint64_t)a1, a3, a5);
        }
        while (v6 != v5)
        {
          unint64_t v43 = v6[4];
          unint64_t v44 = v42[4];
          if (v43 < v44) {
            break;
          }
          if (v44 >= v43)
          {
            uint64_t v45 = (void *)v6[1];
            uint64_t v46 = v6;
            if (v45)
            {
              do
              {
                uint64_t v6 = v45;
                uint64_t v45 = (void *)*v45;
              }
              while (v45);
            }
            else
            {
              do
              {
                uint64_t v6 = (void *)v46[2];
                BOOL v15 = *v6 == (void)v46;
                uint64_t v46 = v6;
              }
              while (!v15);
            }
            uint64_t v47 = (void *)v42[1];
            if (v47)
            {
              do
              {
                uint64_t v48 = v47;
                uint64_t v47 = (void *)*v47;
              }
              while (v47);
            }
            else
            {
              do
              {
                uint64_t v48 = (void *)v42[2];
                BOOL v15 = *v48 == (void)v42;
                float64_t v42 = v48;
              }
              while (!v15);
            }
            float64_t v42 = v48;
            if (v48 != v31 + 5) {
              continue;
            }
          }
          return sub_1C49EB8C0((uint64_t)a1, a3, a5);
        }
      }
      if (v29)
      {
        *a3 = v31;
        return v31;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    uint64_t v9 = (void *)*a5;
    uint64_t v10 = (void *)a2[4];
    while (v9 != v5)
    {
      unint64_t v11 = v9[4];
      unint64_t v12 = v10[4];
      if (v11 < v12) {
        break;
      }
      if (v12 >= v11)
      {
        double v13 = (void *)v9[1];
        uint64_t v14 = v9;
        if (v13)
        {
          do
          {
            uint64_t v9 = v13;
            double v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            uint64_t v9 = (void *)v14[2];
            BOOL v15 = *v9 == (void)v14;
            uint64_t v14 = v9;
          }
          while (!v15);
        }
        uint64_t v16 = (void *)v10[1];
        if (v16)
        {
          do
          {
            uint64_t v17 = v16;
            uint64_t v16 = (void *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            uint64_t v17 = (void *)v10[2];
            BOOL v15 = *v17 == (void)v10;
            uint64_t v10 = v17;
          }
          while (!v15);
        }
        uint64_t v10 = v17;
        if (v17 != v8) {
          continue;
        }
      }
      goto LABEL_24;
    }
  }
  uint64_t v18 = *a2;
  if ((void *)*a1 != a2)
  {
    if (v18)
    {
      uint64_t v19 = (void *)*a2;
      do
      {
        uint64_t v20 = v19;
        uint64_t v19 = (void *)v19[1];
      }
      while (v19);
    }
    else
    {
      double v32 = a2;
      do
      {
        uint64_t v20 = (void *)v32[2];
        BOOL v15 = *v20 == (void)v32;
        double v32 = v20;
      }
      while (v15);
    }
    uint64_t v33 = (void *)*a5;
    if ((void *)*a5 != a5 + 1)
    {
      uint64_t v34 = (void *)v20[4];
      while (v34 != v20 + 5)
      {
        unint64_t v35 = v34[4];
        unint64_t v36 = v33[4];
        if (v35 < v36) {
          break;
        }
        if (v36 >= v35)
        {
          float64x2_t v37 = (void *)v34[1];
          uint64_t v38 = v34;
          if (v37)
          {
            do
            {
              uint64_t v34 = v37;
              float64x2_t v37 = (void *)*v37;
            }
            while (v37);
          }
          else
          {
            do
            {
              uint64_t v34 = (void *)v38[2];
              BOOL v15 = *v34 == (void)v38;
              uint64_t v38 = v34;
            }
            while (!v15);
          }
          uint64_t v39 = (void *)v33[1];
          if (v39)
          {
            do
            {
              uint64_t v40 = v39;
              uint64_t v39 = (void *)*v39;
            }
            while (v39);
          }
          else
          {
            do
            {
              uint64_t v40 = (void *)v33[2];
              BOOL v15 = *v40 == (void)v33;
              uint64_t v33 = v40;
            }
            while (!v15);
          }
          uint64_t v33 = v40;
          if (v40 != a5 + 1) {
            continue;
          }
        }
        return sub_1C49EB8C0((uint64_t)a1, a3, a5);
      }
      goto LABEL_43;
    }
    return sub_1C49EB8C0((uint64_t)a1, a3, a5);
  }
  uint64_t v20 = a2;
LABEL_43:
  if (v18)
  {
    *a3 = v20;
    return v20 + 1;
  }
  else
  {
    *a3 = a2;
    return a2;
  }
}

uint64_t sub_1C49EB7EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)(a3 + 8) = v5;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 0;
  v6[5] = 0;
  v6[4] = v6 + 5;
  v6[6] = 0;
  sub_1C499A568(v6 + 4, *(void **)a2, (void *)(a2 + 8));
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  uint64_t result = sub_1C49EBB24((uint64_t)(v6 + 7), *(void *)(a2 + 24), *(void *)(a2 + 32), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1C49EB894(_Unwind_Exception *a1)
{
  sub_1C4999C7C(v4, *(void **)(v2 + 40));
  void *v1 = 0;
  sub_1C49EC16C(v3, (void *)v2);
  _Unwind_Resume(a1);
}

void *sub_1C49EB8C0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    uint64_t v8 = (void *)*a3;
    uint64_t v6 = a3 + 1;
    uint64_t v7 = v8;
    if (v8 != v6)
    {
      do
      {
        while (1)
        {
          unint64_t v12 = v4;
          uint64_t v21 = (void *)v4[4];
          unint64_t v22 = v4 + 5;
          unint64_t v23 = v7;
          uint64_t v24 = v21;
          if (v21 != v22) {
            break;
          }
LABEL_25:
          double v25 = v7;
          while (v21 != v22)
          {
            unint64_t v26 = v21[4];
            unint64_t v27 = v25[4];
            if (v26 < v27) {
              break;
            }
            if (v27 >= v26)
            {
              uint64_t v28 = (void *)v21[1];
              uint64_t v29 = v21;
              if (v28)
              {
                do
                {
                  uint64_t v21 = v28;
                  uint64_t v28 = (void *)*v28;
                }
                while (v28);
              }
              else
              {
                do
                {
                  uint64_t v21 = (void *)v29[2];
                  BOOL v18 = *v21 == (void)v29;
                  uint64_t v29 = v21;
                }
                while (!v18);
              }
              uint64_t v30 = (void *)v25[1];
              if (v30)
              {
                do
                {
                  uint64_t v31 = v30;
                  uint64_t v30 = (void *)*v30;
                }
                while (v30);
              }
              else
              {
                do
                {
                  uint64_t v31 = (void *)v25[2];
                  BOOL v18 = *v31 == (void)v25;
                  double v25 = v31;
                }
                while (!v18);
              }
              double v25 = v31;
              if (v31 != v6) {
                continue;
              }
            }
            goto LABEL_59;
          }
          uint64_t result = v12 + 1;
          uint64_t v4 = (void *)v12[1];
          if (!v4) {
            goto LABEL_59;
          }
        }
        while (v23 != v6)
        {
          unint64_t v32 = v23[4];
          unint64_t v33 = v24[4];
          if (v32 < v33) {
            break;
          }
          if (v33 >= v32)
          {
            uint64_t v34 = (void *)v23[1];
            unint64_t v35 = v23;
            if (v34)
            {
              do
              {
                unint64_t v23 = v34;
                uint64_t v34 = (void *)*v34;
              }
              while (v34);
            }
            else
            {
              do
              {
                unint64_t v23 = (void *)v35[2];
                BOOL v18 = *v23 == (void)v35;
                unint64_t v35 = v23;
              }
              while (!v18);
            }
            unint64_t v36 = (void *)v24[1];
            if (v36)
            {
              do
              {
                float64x2_t v37 = v36;
                unint64_t v36 = (void *)*v36;
              }
              while (v36);
            }
            else
            {
              do
              {
                float64x2_t v37 = (void *)v24[2];
                BOOL v18 = *v37 == (void)v24;
                uint64_t v24 = v37;
              }
              while (!v18);
            }
            uint64_t v24 = v37;
            if (v37 != v22) {
              continue;
            }
          }
          goto LABEL_25;
        }
        uint64_t v4 = (void *)*v12;
        uint64_t result = v12;
      }
      while (*v12);
      goto LABEL_59;
    }
    uint64_t v9 = (void *)v4[4];
    uint64_t v10 = v4 + 5;
    if (v9 != v4 + 5)
    {
      unint64_t v11 = result;
      unint64_t v12 = v4;
      do
      {
        uint64_t result = v12;
        double v13 = v7;
        while (v13 != v6)
        {
          unint64_t v14 = v13[4];
          unint64_t v15 = v9[4];
          if (v14 < v15) {
            break;
          }
          if (v15 >= v14)
          {
            uint64_t v16 = (void *)v13[1];
            uint64_t v17 = v13;
            if (v16)
            {
              do
              {
                double v13 = v16;
                uint64_t v16 = (void *)*v16;
              }
              while (v16);
            }
            else
            {
              do
              {
                double v13 = (void *)v17[2];
                BOOL v18 = *v13 == (void)v17;
                uint64_t v17 = v13;
              }
              while (!v18);
            }
            uint64_t v19 = (void *)v9[1];
            if (v19)
            {
              do
              {
                uint64_t v20 = v19;
                uint64_t v19 = (void *)*v19;
              }
              while (v19);
            }
            else
            {
              do
              {
                uint64_t v20 = (void *)v9[2];
                BOOL v18 = *v20 == (void)v9;
                uint64_t v9 = v20;
              }
              while (!v18);
            }
            uint64_t v9 = v20;
            if (v20 != v10) {
              continue;
            }
          }
          uint64_t v38 = result;
          uint64_t result = v11;
          *a2 = v38;
          return result;
        }
        unint64_t v12 = (void *)*result;
        if (!*result) {
          goto LABEL_60;
        }
        uint64_t v9 = (void *)v12[4];
        uint64_t v10 = v12 + 5;
        unint64_t v11 = result;
      }
      while (v9 != v12 + 5);
LABEL_59:
      *a2 = v12;
      return result;
    }
    *a2 = v4;
  }
  else
  {
LABEL_60:
    *a2 = result;
  }
  return result;
}

uint64_t sub_1C49EBB24(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0x666666666666667) {
      sub_1C494A220();
    }
    uint64_t result = (uint64_t)operator new(40 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 40 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_1C49EBD04(v8 + v9, a2 + v9);
        v9 += 40;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_1C49EBBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1C49EBBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v12)
  {
    do
    {
      unint64_t v14 = (void *)*(v11 - 3);
      if (v14)
      {
        do
        {
          unint64_t v15 = (void *)*v14;
          operator delete(v14);
          unint64_t v14 = v15;
        }
        while (v15);
      }
      uint64_t v17 = (void *)*(v11 - 5);
      v11 -= 5;
      uint64_t v16 = v17;
      *unint64_t v11 = 0;
      if (v17) {
        operator delete(v16);
      }
    }
    while (v11 != v10);
  }
  *(void *)(v9 + 8) = v10;
  sub_1C49EBC4C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_1C49EBC4C(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = (void *)*(v4 - 3);
          if (v6)
          {
            do
            {
              uint64_t v7 = (void *)*v6;
              operator delete(v6);
              uint64_t v6 = v7;
            }
            while (v7);
          }
          uint64_t v9 = (void *)*(v4 - 5);
          v4 -= 5;
          uint64_t v8 = v9;
          *uint64_t v4 = 0;
          if (v9) {
            operator delete(v8);
          }
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_1C49EBD04(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_1C4949C24(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_1C49EBE48(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_1C49EBE20(_Unwind_Exception *a1)
{
  sub_1C498D2E0(v1);
  _Unwind_Resume(a1);
}

void sub_1C49EBE34(_Unwind_Exception *a1)
{
  sub_1C498D2E0(v1);
  _Unwind_Resume(a1);
}

void *sub_1C49EBE48(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  unint64_t v14 = operator new(0x20uLL);
  *unint64_t v14 = 0;
  v14[1] = v6;
  *((_OWORD *)v14 + 1) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    BOOL v18 = *(void **)(*(void *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *unint64_t v14 = *v18;
LABEL_61:
      *BOOL v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_37;
    }
    if (prime < v7)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v7) {
LABEL_37:
      }
        sub_1C4949C24(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v17 = *(void *)a1;
        BOOL v18 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v17 = *(void *)a1;
        BOOL v18 = *(void **)(*(void *)a1 + 8 * v6);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v26 & v6;
      uint64_t v17 = *(void *)a1;
      BOOL v18 = *(void **)(*(void *)a1 + 8 * (v26 & v6));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  *unint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v27 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7) {
        v27 %= v7;
      }
    }
    else
    {
      v27 &= v7 - 1;
    }
    BOOL v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1C49EC158(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C49EC16C(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v3 = (void *)__p[7];
    if (v3)
    {
      uint64_t v4 = (void *)__p[8];
      int8x8_t v5 = (void *)__p[7];
      if (v4 != v3)
      {
        do
        {
          unint64_t v6 = (void *)*(v4 - 3);
          if (v6)
          {
            do
            {
              unint64_t v7 = (void *)*v6;
              operator delete(v6);
              unint64_t v6 = v7;
            }
            while (v7);
          }
          uint64_t v9 = (void *)*(v4 - 5);
          v4 -= 5;
          uint8x8_t v8 = v9;
          *uint64_t v4 = 0;
          if (v9) {
            operator delete(v8);
          }
        }
        while (v4 != v3);
        int8x8_t v5 = (void *)__p[7];
      }
      __p[8] = v3;
      operator delete(v5);
    }
    sub_1C4999C7C((uint64_t)(__p + 4), (void *)__p[5]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_1C49EC288(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unint64_t v7 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend_invalidate(*((void **)WeakRetained + 1), v2, v3, v4, v5, v6);
    uint8x8_t v8 = (void *)v7[1];
    v7[1] = 0;
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v9 = (id)qword_1EA3C9FB0;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_1C492D000, v9, OS_LOG_TYPE_ERROR, "Remote connection to handwritingd was interrupted", v10, 2u);
  }
}

void sub_1C49EC344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49EC354()
{
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  v0 = (id)qword_1EA3C9FB0;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl(&dword_1C492D000, v0, OS_LOG_TYPE_ERROR, "Remote connection to handwritingd was invalidated", v1, 2u);
  }
}

void sub_1C49EC444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CHRemoteLineWrapper;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C49EC900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id location,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  objc_destroyWeak(v41);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1C49EC9C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49EC9DC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C49EC9EC(uint64_t a1)
{
}

void sub_1C49EC9F4(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v4 = (id)qword_1EA3C9FE8;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = objc_msgSend_description(v3, v5, v6, v7, v8, v9);
    int v13 = 138412290;
    unint64_t v14 = v10;
    _os_log_impl(&dword_1C492D000, v4, OS_LOG_TYPE_ERROR, "An XPC proxy service error occurred: %@", (uint8_t *)&v13, 0xCu);
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v3;
}

void sub_1C49ECAFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49ECB14(uint64_t a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = v7;
  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
  }
  else if (v7)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v9 = (id)qword_1EA3C9FE8;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = objc_msgSend_localizedDescription(v8, v10, v11, v12, v13, v14);
      int v16 = 138412290;
      uint64_t v17 = v15;
      _os_log_impl(&dword_1C492D000, v9, OS_LOG_TYPE_DEBUG, "Error during line wrapping analysis: %@", (uint8_t *)&v16, 0xCu);
    }
  }
}

void sub_1C49ECC5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49ECD08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49ECDA8()
{
  v0 = objc_alloc_init(CHTextInputProtoSettings);
  uint64_t v1 = (void *)qword_1EA3C9120;
  qword_1EA3C9120 = (uint64_t)v0;

  if (qword_1EA3C9130 != -1)
  {
    dispatch_once(&qword_1EA3C9130, &unk_1F20132D0);
  }
}

void sub_1C49ECE1C()
{
  id v0 = sub_1C492FA68();
  objc_msgSend_sharedSettings(v0, v1, v2, v3, v4, v5);
  id v62 = (id)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if ((objc_opt_respondsToSelector() & 1) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    objc_msgSend_autoLineBreakAreaWidthFactor(v62, v11, v12, v13, v14, v15);
    *(void *)(qword_1EA3C9120 + 32) = v49;
    if (objc_opt_respondsToSelector()) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  *(unsigned char *)(qword_1EA3C9120 + 8) = objc_msgSend_autoLineBreakEnabled(v62, v6, v7, v8, v9, v10);
  *(unsigned char *)(qword_1EA3C9120 + 9) = objc_msgSend_autoLineBreakRequireWeakCursor(v62, v22, v23, v24, v25, v26);
  objc_msgSend_autoLineBreakVerticalDistance(v62, v27, v28, v29, v30, v31);
  *(void *)(qword_1EA3C9120 + 16) = v32;
  objc_msgSend_autoLineBreakDualVerticalDistance(v62, v33, v34, v35, v36, v37);
  *(void *)(qword_1EA3C9120 + 24) = v38;
  *(unsigned char *)(qword_1EA3C9120 + 10) = objc_msgSend_lineBreakVerticalBarGestureEnabled(v62, v39, v40, v41, v42, v43);
  *(unsigned char *)(qword_1EA3C9120 + 11) = objc_msgSend_lineBreakVerticalBarUpToDelete(v62, v44, v45, v46, v47, v48);
  if (objc_opt_respondsToSelector()) {
    goto LABEL_6;
  }
LABEL_3:
  if (objc_opt_respondsToSelector())
  {
LABEL_4:
    objc_msgSend_subwordGestureEndingSpeedRange(v62, v16, v17, v18, v19, v20);
    goto LABEL_8;
  }
LABEL_7:
  uint64_t v21 = 0x3FE999999999999ALL;
LABEL_8:
  *(void *)(qword_1EA3C9120 + 40) = v21;
  if (objc_opt_respondsToSelector()) {
    objc_msgSend_subwordGestureSpeedThreshold(v62, v50, v51, v52, v53, v54);
  }
  else {
    uint64_t v55 = 0x4049000000000000;
  }
  *(void *)(qword_1EA3C9120 + 48) = v55;
  if (objc_opt_respondsToSelector())
  {
    *(unsigned char *)(qword_1EA3C9120 + 12) = objc_msgSend_preventLeftoverCharsInSubwordGestures(v62, v56, v57, v58, v59, v60);
    float64x2_t v61 = v62;
  }
  else
  {
    *(unsigned char *)(qword_1EA3C9120 + 12) = 0;
    float64x2_t v61 = v62;
  }
}

void sub_1C49ED100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C49ED118(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = objc_msgSend_isScribbleActive(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

Class sub_1C49ED19C(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!qword_1EA3C9140)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    v4[3] = sub_1C49ED2F0;
    v4[4] = &unk_1E64E1AA8;
    v4[5] = v4;
    long long v5 = xmmword_1E64E1EE8;
    uint64_t v6 = 0;
    qword_1EA3C9140 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!qword_1EA3C9140)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("PKTextInputSettings");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  qword_1EA3C9138 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1C49ED2F0()
{
  uint64_t result = _sl_dlopen();
  qword_1EA3C9140 = result;
  return result;
}

void sub_1C49ED6EC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v10 = (id)qword_1EA3C9FC8;
  uint64_t v11 = v10;
  os_signpost_id_t v12 = *(void *)(a1 + 40);
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v11, OS_SIGNPOST_INTERVAL_END, v12, "CHTextStrokeTransformationQuery", "", buf, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v13 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_1C492D000, v13, OS_LOG_TYPE_DEFAULT, "END \"CHTextStrokeTransformationQuery\"", v14, 2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void ChatBubbleRegressor::ChatBubbleRegressor(ChatBubbleRegressor *this, CHDrawing *a2, HTMLog *a3)
{
  long long v5 = a2;
  *(void *)this = &unk_1F2011C90;
  *((void *)this + 4) = 0;
  *((_OWORD *)this + 3) = 0u;
  uint64_t v6 = (void **)((char *)this + 72);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  objc_storeStrong((id *)this + 4, a2);
  float v13 = sub_1C49550B0(v5, (double **)this + 6, 15.0);
  uint64_t v15 = *((void *)this + 6);
  uint64_t v14 = (char *)*((void *)this + 7);
  unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v14[-v15] >> 3);
  if (v16 < 7) {
    ChatBubbleRegressor::provideAnAnswer(v7, v5, v9, v10, v11, v12);
  }
  float v17 = v13;
  uint64_t v18 = 0;
  unint64_t v19 = v16 - 3;
  double v20 = v13 * 1.5;
  unint64_t v21 = v16 - 4;
  unint64_t v22 = (double *)(v15 + 128);
  uint64_t v23 = 0xFFFFFFFFLL;
  do
  {
    if (v18 == v19) {
      break;
    }
    uint64_t v24 = (double *)(v15 + 40 * v18);
    double v25 = *v24;
    double v26 = v24[1];
    float v27 = v24[5] - *v24;
    float v28 = v24[6] - v26;
    float v29 = (float)(v28 * v28) + (float)(v27 * v27);
    float v30 = v28 / v29;
    if (v29 > 0.0)
    {
      float v31 = v27 / v29;
    }
    else
    {
      float v30 = v24[6] - v26;
      float v31 = v24[5] - *v24;
    }
    if (v16 - 1 > v18 + 3)
    {
      double v32 = sqrtf(v29);
      double v33 = v31;
      double v34 = v30;
      uint64_t v35 = v22;
      unint64_t v36 = v21;
      while (1)
      {
        float v37 = ((*v35 - v26) * v34 + (*(v35 - 1) - v25) * v33) * v32;
        BOOL v38 = v37 <= 0.0 || v20 <= v37;
        if (!v38) {
          break;
        }
        v35 += 5;
        if (!--v36) {
          goto LABEL_4;
        }
      }
      uint64_t v23 = v18;
    }
LABEL_4:
    ++v18;
    --v21;
    v22 += 5;
  }
  while ((v23 & 0x80000000) != 0);
  unsigned int v39 = v16 - 4;
  uint64_t v40 = -858993459 * ((uint64_t)&v14[-v15] >> 3);
  int v41 = v16 - 3;
  do
  {
    if ((int)v40 <= 3)
    {
      if ((int)v23 >= 3) {
        goto LABEL_32;
      }
      goto LABEL_40;
    }
    uint64_t v10 = v40 - 1;
    uint64_t v42 = (double *)(v15 + 40 * (v40 - 1));
    double v43 = *v42;
    double v44 = v42[1];
    uint64_t v45 = (double *)(v15 + 40 * (v40 - 2));
    float v46 = *v45 - *v42;
    float v47 = v45[1] - v44;
    float v48 = (float)(v47 * v47) + (float)(v46 * v46);
    if (v48 > 0.0)
    {
      float v46 = v46 / v48;
      float v47 = v47 / v48;
    }
    uint64_t v49 = (double *)(v15 + 8 + 40 * v39);
    uint64_t v40 = v10;
    double v50 = sqrtf(v48);
    double v51 = v46;
    double v52 = v47;
    int v53 = v41;
    do
    {
      float v54 = ((*v49 - v44) * v52 + (*(v49 - 1) - v43) * v51) * v50;
      if (v54 > 0.0 && v20 > v54) {
        goto LABEL_19;
      }
      --v53;
      v49 -= 5;
    }
    while (v53 > 0);
    uint64_t v10 = 0xFFFFFFFFLL;
LABEL_19:
    --v39;
    --v41;
  }
  while ((v10 & 0x80000000) != 0);
  if ((int)v23 > 2)
  {
    if (v19 <= v10 || v16 - v10 <= v23)
    {
LABEL_32:
      int v56 = 0;
      LODWORD(v10) = v16 - 1;
      goto LABEL_39;
    }
LABEL_38:
    LODWORD(v23) = 0;
    int v56 = v16 - 1;
LABEL_39:
    ChatBubbleRegressor::regressLollipop(this, v56, v23, v10);
  }
  if (v19 > v10) {
    goto LABEL_38;
  }
LABEL_40:
  unint64_t v57 = *((void *)this + 8);
  if ((unint64_t)v14 >= v57)
  {
    unint64_t v61 = v16 + 1;
    if (v16 + 1 > 0x666666666666666) {
      sub_1C494A220();
    }
    unint64_t v62 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v57 - v15) >> 3);
    if (2 * v62 > v61) {
      unint64_t v61 = 2 * v62;
    }
    if (v62 >= 0x333333333333333) {
      unint64_t v63 = 0x666666666666666;
    }
    else {
      unint64_t v63 = v61;
    }
    if (v63)
    {
      if (v63 > 0x666666666666666) {
        sub_1C4949AA8();
      }
      id v7 = (ChatBubbleRegressor *)operator new(40 * v63);
    }
    else
    {
      id v7 = 0;
    }
    uint64_t v64 = (char *)v7 + 8 * ((uint64_t)&v14[-v15] >> 3);
    long long v65 = *(_OWORD *)v15;
    long long v66 = *(_OWORD *)(v15 + 16);
    *((void *)v64 + 4) = *(void *)(v15 + 32);
    *(_OWORD *)uint64_t v64 = v65;
    *((_OWORD *)v64 + 1) = v66;
    uint64_t v60 = v64 + 40;
    if (v14 != (char *)v15)
    {
      do
      {
        long long v67 = *(_OWORD *)(v14 - 40);
        long long v68 = *(_OWORD *)(v14 - 24);
        *(void *)(v64 - 11) = *(void *)(v14 - 11);
        *(_OWORD *)(v64 - 24) = v68;
        *(_OWORD *)(v64 - 40) = v67;
        v64 -= 40;
        v14 -= 40;
      }
      while (v14 != (char *)v15);
      uint64_t v14 = (char *)*((void *)this + 6);
    }
    *((void *)this + 6) = v64;
    *((void *)this + 7) = v60;
    *((void *)this + 8) = (char *)v7 + 40 * v63;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    long long v58 = *(_OWORD *)v15;
    long long v59 = *(_OWORD *)(v15 + 16);
    *((void *)v14 + 4) = *(void *)(v15 + 32);
    *(_OWORD *)uint64_t v14 = v58;
    *((_OWORD *)v14 + 1) = v59;
    uint64_t v60 = v14 + 40;
  }
  *((void *)this + 7) = v60;
  id v69 = (double *)*((void *)this + 6);
  unint64_t v70 = 0xCCCCCCCCCCCCCCCDLL * ((v60 - (char *)v69) >> 3) - 1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v60 - (char *)v69) >> 3) == 1)
  {
    *((void *)this + 7) = v60 - 40;
  }
  else
  {
    uint64_t v71 = 0;
    double v74 = *v69;
    double v73 = v69[1];
    long long v72 = v69 + 6;
    float v75 = 0.0;
    float v76 = 0.0;
    float v77 = 0.0;
    do
    {
      *((_DWORD *)v72 - 7) = v71;
      double v79 = *((double *)v72 - 1);
      double v78 = *(double *)v72;
      float v80 = v74 * *(double *)v72 - v79 * v73;
      float v81 = v74 + v79;
      float v82 = v73 + *(double *)v72;
      float v75 = v75 + v80;
      float v76 = v76 + (float)(v81 * v80);
      v72 += 5;
      float v77 = v77 + (float)(v82 * v80);
      double v73 = v78;
      double v74 = v79;
      ++v71;
    }
    while (v70 != v71);
    *((void *)this + 7) = v60 - 40;
    if (v75 != 0.0)
    {
      float v83 = v75 * 3.0;
      double v84 = (float)(v76 / v83);
      double v85 = (float)(v77 / v83);
      v270.f64[0] = v84;
      v270.f64[1] = v85;
      objc_msgSend_bounds(v5, v8, v23, v10, v11, v12);
      BOOL v38 = v88 <= v84;
      double v90 = v88 + v89;
      if (v38 && v86 <= v85 && v90 >= v84 && v86 + v87 >= v85)
      {
        uint64_t v102 = (char *)*((void *)this + 6);
        unint64_t v101 = (unsigned char *)*((void *)this + 7);
        size_t v103 = v101 - v102;
        unint64_t v104 = 0xCCCCCCCCCCCCCCCDLL * ((v101 - v102) >> 3);
LABEL_84:
        BOOL v266 = 0;
        uint64_t v267 = 0;
        long long __p = 0;
        if (v101 != v102)
        {
          if (v104 > 0x666666666666666) {
            sub_1C494A220();
          }
          long long __p = operator new(v103);
          uint64_t v267 = (char *)__p + 40 * v104;
          memcpy(__p, v102, v103 - 3);
          BOOL v266 = v267;
        }
        sub_1C49558A8((unint64_t *)&__p, (uint64_t)&v268);
        long long v114 = *v6;
        if (*v6)
        {
          *((void *)this + 10) = v114;
          operator delete(v114);
          const char *v6 = 0;
          *((void *)this + 10) = 0;
          *((void *)this + 11) = 0;
        }
        uint64_t v115 = v268;
        *((void *)this + 9) = v268;
        unint64_t v116 = (double *)v269;
        *((_OWORD *)this + 5) = v269;
        long long v269 = 0uLL;
        float64_t v268 = 0;
        long long v117 = (ChatBubbleRegressor *)__p;
        if (__p)
        {
          BOOL v266 = __p;
          operator delete(__p);
          uint64_t v115 = (double *)*((void *)this + 9);
          uint64_t v118 = (double *)*((void *)this + 10);
        }
        else
        {
          uint64_t v118 = v116;
        }
        unint64_t v119 = 0xCCCCCCCCCCCCCCCDLL * (v118 - v115);
        if (v119 < 7) {
          ChatBubbleRegressor::provideAnAnswer(v117, v5, v110, v111, v112, v113);
        }
        if ((char *)v118 - (char *)v115 == 280)
        {
          unint64_t v119 = 7;
        }
        else
        {
          do
          {
            double v121 = *(v118 - 5);
            double v120 = *(v118 - 4);
            float v122 = v115[5] - v121;
            float v123 = v115[6] - v120;
            float v124 = (float)(v123 * v123) + (float)(v122 * v122);
            if (v124 > 0.0)
            {
              float v122 = v122 / v124;
              float v123 = v123 / v124;
            }
            float v125 = sqrtf(v124);
            double v126 = v115[1];
            float v127 = ((*v115 - v121) * v123 - (v126 - v120) * v122) * v125;
            float v128 = fabsf(v127);
            if (v119 - 1 < 2)
            {
              int v129 = 0;
            }
            else
            {
              int v129 = 0;
              uint64_t v130 = v115 + 6;
              uint64_t v131 = 2;
              double v132 = v115[1];
              double v133 = *v115;
              do
              {
                float v138 = v130[4] - v133;
                float v139 = v130[5] - v132;
                float v140 = (float)(v139 * v139) + (float)(v138 * v138);
                if (v140 > 0.0)
                {
                  float v138 = v138 / v140;
                  float v139 = v139 / v140;
                }
                double v134 = *(v130 - 1);
                double v135 = *v130;
                float v136 = ((v134 - v133) * v139 - (*v130 - v132) * v138) * sqrtf(v140);
                float v137 = fabsf(v136);
                if (v137 < v128) {
                  int v129 = v131 - 1;
                }
                ++v131;
                if (v137 < v128) {
                  float v128 = v137;
                }
                v130 += 5;
                double v132 = v135;
                double v133 = v134;
              }
              while (v119 != v131);
            }
            int v141 = &v115[5 * v119];
            double v143 = *(v141 - 10);
            double v142 = *(v141 - 9);
            float v144 = *v115 - v143;
            float v145 = v126 - v142;
            float v146 = (float)(v145 * v145) + (float)(v144 * v144);
            if (v146 > 0.0)
            {
              float v144 = v144 / v146;
              float v145 = v145 / v146;
            }
            float v147 = ((v121 - v143) * v145 - (v120 - v142) * v144) * sqrtf(v146);
            int v148 = v119 - 1;
            if (fabsf(v147) >= v128) {
              int v148 = v129;
            }
            uint64_t v149 = &v115[5 * v148];
            int64_t v150 = (char *)v118 - (char *)(v149 + 5);
            if (v118 != v149 + 5)
            {
              memmove(&v115[5 * v148], v149 + 5, v150 - 3);
              uint64_t v115 = (double *)*v6;
            }
            uint64_t v118 = (double *)((char *)v149 + v150);
            *((void *)this + 10) = (char *)v149 + v150;
            unint64_t v119 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v149 + v150 - (char *)v115) >> 3);
          }
          while (v119 > 7);
          if (v118 == v115)
          {
LABEL_168:
            int v154 = 0;
            goto LABEL_169;
          }
        }
        uint64_t v151 = 0;
        float v152 = v17 + v17;
        float v153 = -1.0;
        int v154 = -1;
        while (1)
        {
          unint64_t v163 = &v115[5 * v151];
          uint64_t v164 = *((int *)v163 + 5);
          if (v164)
          {
            uint64_t v166 = (double *)*((void *)this + 6);
            uint64_t v165 = *((void *)this + 7);
            unint64_t v167 = 0xCCCCCCCCCCCCCCCDLL * ((v165 - (uint64_t)v166) >> 3);
            if (v167 - 1 == v164)
            {
              double v168 = v166[1];
              double v169 = *(double *)(v165 - 40);
              double v170 = *(double *)(v165 - 32);
              float v171 = *v166 - v169;
              float v172 = v168 - v170;
              float v173 = sqrtf((float)(v172 * v172) + (float)(v171 * v171));
              if (v173 >= v17)
              {
                if (v173 >= v152)
                {
                  float v198 = v166[5] - *v166;
                  float v199 = v166[6] - v168;
                  uint64_t v200 = &v166[(v165 - (uint64_t)v166) >> 3];
                  double v201 = *(v200 - 10);
                  uint64_t v156 = v200 - 10;
                  *(double *)&uint64_t v202 = v201;
                  float v203 = v169 - v201;
                  uint64_t v204 = *((uint64_t *)v156 + 1);
                  float v205 = v170 - *(double *)&v204;
                  float v206 = (float)(v199 * v205) + (float)(v198 * v203);
                  float v207 = sqrtf((float)(v199 * v199) + (float)(v198 * v198));
                  float v208 = (float)(v205 * v205) + (float)(v203 * v203);
                  if ((float)(v206 / (float)(v207 * sqrtf(v208))) > 0.5)
                  {
                    if (v208 > 0.0)
                    {
                      float v203 = v203 / v208;
                      float v205 = v205 / v208;
                    }
                    if (v167 >= 4)
                    {
                      *(double *)&uint64_t v209 = v203;
                      double v210 = v205;
                      unint64_t v211 = v167 - 3;
                      if (v167 - 3 >= 9)
                      {
                        uint64_t v232 = v211 & 7;
                        if ((v211 & 7) == 0) {
                          uint64_t v232 = 8;
                        }
                        unint64_t v233 = v211 - v232;
                        float64x2_t v234 = (float64x2_t)vdupq_lane_s64(v202, 0);
                        float64x2_t v235 = (float64x2_t)vdupq_lane_s64(v204, 0);
                        uint64_t v212 = v233 + 3;
                        float64x2_t v236 = (float64x2_t)vdupq_lane_s64(v209, 0);
                        long long v237 = v166 + 26;
                        int32x4_t v238 = 0uLL;
                        int32x4_t v239 = 0uLL;
                        do
                        {
                          v240.f64[0] = *(v237 - 1);
                          v241.f64[0] = *v237;
                          v240.f64[1] = v237[4];
                          v242.f64[0] = *(v237 - 11);
                          v243.f64[0] = *(v237 - 10);
                          v242.f64[1] = *(v237 - 6);
                          v244.f64[0] = v237[19];
                          v245.f64[0] = v237[20];
                          v244.f64[1] = v237[24];
                          v246.f64[0] = v237[9];
                          v247.f64[0] = v237[10];
                          v246.f64[1] = v237[14];
                          v243.f64[1] = *(v237 - 5);
                          v241.f64[1] = v237[5];
                          v247.f64[1] = v237[15];
                          v245.f64[1] = v237[25];
                          int32x4_t v238 = vsubq_s32(v238, vcgtzq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(vmulq_n_f64(vsubq_f64(v243, v235), v210), v236, vsubq_f64(v242, v234))), vmlaq_f64(vmulq_n_f64(vsubq_f64(v241, v235), v210), v236, vsubq_f64(v240, v234)))));
                          int32x4_t v239 = vsubq_s32(v239, vcgtzq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(vmulq_n_f64(vsubq_f64(v247, v235), v210), v236, vsubq_f64(v246, v234))), vmlaq_f64(vmulq_n_f64(vsubq_f64(v245, v235), v210), v236, vsubq_f64(v244, v234)))));
                          v237 += 40;
                          v233 -= 8;
                        }
                        while (v233);
                        unsigned int v196 = vaddvq_s32(vaddq_s32(v239, v238));
                      }
                      else
                      {
                        unsigned int v196 = 0;
                        uint64_t v212 = 3;
                      }
                      unint64_t v248 = v167 - v212;
                      size_t v249 = &v166[5 * v212 + 1];
                      do
                      {
                        float v250 = (*v249 - *(double *)&v204) * v210 + (*(v249 - 1) - *(double *)&v202) * *(double *)&v209;
                        if (v250 > 0.0) {
                          ++v196;
                        }
                        v249 += 5;
                        --v248;
                      }
                      while (v248);
                      goto LABEL_166;
                    }
LABEL_146:
                    unsigned int v196 = 0;
LABEL_166:
                    BOOL v157 = v196 < 5;
                    unint64_t v155 = &v270;
                    goto LABEL_120;
                  }
LABEL_145:
                  BOOL v157 = 1;
                  unint64_t v155 = &v270;
                  goto LABEL_120;
                }
                unint64_t v155 = (float64x2_t *)&v166[((v165 - (uint64_t)v166) >> 3) - 10];
                uint64_t v156 = v166 + 5;
              }
              else
              {
                unint64_t v155 = (float64x2_t *)&v166[((v165 - (uint64_t)v166) >> 3) - 10];
                uint64_t v156 = v166 + 10;
              }
            }
            else
            {
              unint64_t v155 = (float64x2_t *)&v166[5 * (int)v164 - 5];
              uint64_t v156 = &v166[5 * (int)v164 + 5];
            }
          }
          else
          {
            v174 = (double *)*((void *)this + 6);
            uint64_t v175 = *((void *)this + 7);
            double v176 = *v174;
            double v177 = v174[1];
            double v179 = *(double *)(v175 - 40);
            double v178 = *(double *)(v175 - 32);
            float v180 = *v174 - v179;
            float v181 = v177 - v178;
            float v182 = sqrtf((float)(v181 * v181) + (float)(v180 * v180));
            if (v182 >= v17)
            {
              if (v182 >= v152)
              {
                uint64_t v156 = v174 + 5;
                uint64_t v183 = *((uint64_t *)v174 + 5);
                float v184 = *(double *)&v183 - v176;
                uint64_t v185 = *((uint64_t *)v174 + 6);
                float v186 = *(double *)&v185 - v177;
                float v187 = v179 - *(double *)(v175 - 80);
                float v188 = v178 - *(double *)(v175 - 72);
                if ((float)((float)((float)(v186 * v188) + (float)(v184 * v187))
                           / (float)(sqrtf((float)(v186 * v186) + (float)(v184 * v184))
                                   * sqrtf((float)(v188 * v188) + (float)(v187 * v187)))) > 0.5)
                {
                  float v189 = v176 - *(double *)&v183;
                  float v190 = v177 - *(double *)&v185;
                  float v191 = (float)(v190 * v190) + (float)(v189 * v189);
                  if (v191 > 0.0)
                  {
                    float v189 = v189 / v191;
                    float v190 = v190 / v191;
                  }
                  unint64_t v192 = 0xCCCCCCCCCCCCCCCDLL * ((v175 - (uint64_t)v174) >> 3);
                  if (v192 >= 4)
                  {
                    *(double *)&uint64_t v193 = v189;
                    double v194 = v190;
                    unint64_t v195 = v192 - 3;
                    if (v192 - 3 >= 9)
                    {
                      uint64_t v213 = v195 & 7;
                      if ((v195 & 7) == 0) {
                        uint64_t v213 = 8;
                      }
                      unint64_t v214 = v195 - v213;
                      float64x2_t v215 = (float64x2_t)vdupq_lane_s64(v183, 0);
                      float64x2_t v216 = (float64x2_t)vdupq_lane_s64(v185, 0);
                      uint64_t v197 = v214 + 3;
                      float64x2_t v217 = (float64x2_t)vdupq_lane_s64(v193, 0);
                      uint64_t v218 = v174 + 26;
                      int32x4_t v219 = 0uLL;
                      int32x4_t v220 = 0uLL;
                      do
                      {
                        v221.f64[0] = *(v218 - 1);
                        v222.f64[0] = *v218;
                        v221.f64[1] = v218[4];
                        v223.f64[0] = *(v218 - 11);
                        v224.f64[0] = *(v218 - 10);
                        v223.f64[1] = *(v218 - 6);
                        v225.f64[0] = v218[19];
                        v226.f64[0] = v218[20];
                        v225.f64[1] = v218[24];
                        v227.f64[0] = v218[9];
                        v228.f64[0] = v218[10];
                        v227.f64[1] = v218[14];
                        v224.f64[1] = *(v218 - 5);
                        v222.f64[1] = v218[5];
                        v228.f64[1] = v218[15];
                        v226.f64[1] = v218[25];
                        int32x4_t v219 = vsubq_s32(v219, vcgtzq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(vmulq_n_f64(vsubq_f64(v224, v216), v194), v217, vsubq_f64(v223, v215))), vmlaq_f64(vmulq_n_f64(vsubq_f64(v222, v216), v194), v217, vsubq_f64(v221, v215)))));
                        int32x4_t v220 = vsubq_s32(v220, vcgtzq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(vmulq_n_f64(vsubq_f64(v228, v216), v194), v217, vsubq_f64(v227, v215))), vmlaq_f64(vmulq_n_f64(vsubq_f64(v226, v216), v194), v217, vsubq_f64(v225, v215)))));
                        v218 += 40;
                        v214 -= 8;
                      }
                      while (v214);
                      unsigned int v196 = vaddvq_s32(vaddq_s32(v220, v219));
                    }
                    else
                    {
                      unsigned int v196 = 0;
                      uint64_t v197 = 3;
                    }
                    unint64_t v229 = v192 - v197;
                    uint64_t v230 = &v174[5 * v197 + 1];
                    do
                    {
                      float v231 = (*v230 - *(double *)&v185) * v194 + (*(v230 - 1) - *(double *)&v183) * *(double *)&v193;
                      if (v231 > 0.0) {
                        ++v196;
                      }
                      v230 += 5;
                      --v229;
                    }
                    while (v229);
                    goto LABEL_166;
                  }
                  goto LABEL_146;
                }
                goto LABEL_145;
              }
              unint64_t v155 = (float64x2_t *)(v175 - 40);
              uint64_t v156 = v174 + 5;
            }
            else
            {
              unint64_t v155 = (float64x2_t *)(v175 - 80);
              uint64_t v156 = v174 + 5;
            }
          }
          BOOL v157 = 1;
LABEL_120:
          double v158 = v163[1];
          float v159 = v155->f64[0] - *v163;
          float v160 = v155->f64[1] - v158;
          float v161 = *v156 - *v163;
          *(float *)&double v158 = v156[1] - v158;
          float v162 = (float)((float)(v160 * *(float *)&v158) + (float)(v159 * v161))
               / (float)(sqrtf((float)(v160 * v160) + (float)(v159 * v159))
                       * sqrtf((float)(*(float *)&v158 * *(float *)&v158) + (float)(v161 * v161)));
          if (v157 && v162 > v153)
          {
            float v153 = v162;
            int v154 = v151;
          }
          if (++v151 == v119)
          {
            if (v154 == -1) {
              goto LABEL_168;
            }
LABEL_169:
            uint64_t v251 = &v115[5 * v154];
            double v252 = *v251;
            double v253 = v251[1];
            float v254 = v270.f64[0] - *v251;
            float v255 = v270.f64[1] - v253;
            float v256 = (float)(v255 * v255) + (float)(v254 * v254);
            if (v256 > 0.0)
            {
              float v254 = v254 / v256;
              float v255 = v255 / v256;
            }
            v257 = (float64x2_t *)*((void *)this + 6);
            unint64_t v258 = (float64x2_t *)*((void *)this + 7);
            if (v257 != v258)
            {
              double v259 = v254;
              float32x2_t v260 = (float32x2_t)vdup_n_s32(0xE0AD78EC);
              float32x2_t v261 = (float32x2_t)vdup_n_s32(0x60AD78ECu);
              double v262 = v255;
              do
              {
                float64x2_t v263 = *v257;
                float v264 = (v257->f64[1] - v253) * v262 + (v257->f64[0] - v252) * v259;
                if (v264 > 0.75)
                {
                  float32x2_t v261 = vcvt_f32_f64(vminnmq_f64(v263, vcvtq_f64_f32(v261)));
                  float32x2_t v260 = vcvt_f32_f64(vmaxnmq_f64(v263, vcvtq_f64_f32(v260)));
                }
                v257 = (float64x2_t *)((char *)v257 + 40);
              }
              while (v257 != v258);
            }
            operator new();
          }
        }
      }
      uint64_t v102 = (char *)*((void *)this + 6);
      unint64_t v101 = (unsigned char *)*((void *)this + 7);
      size_t v103 = v101 - v102;
      uint64_t v94 = (v101 - v102) >> 3;
      unint64_t v104 = 0xCCCCCCCCCCCCCCCDLL * v94;
      unint64_t v95 = (0xCCCCCCCCCCCCCCCDLL * v94) >> 2;
      unint64_t v96 = (unint64_t)(0x6666666666666667 * v94) >> 2;
      unint64_t v97 = v96 - v95;
      if (v96 <= v95)
      {
        float64x2_t v98 = 0uLL;
        float v99 = 0.0;
      }
      else
      {
        if (v97 >= 2)
        {
          unint64_t v100 = v95 + (v97 & 0xFFFFFFFFFFFFFFFELL);
          NSRange v105 = &v102[40 * v95];
          float64x2_t v98 = 0uLL;
          float v99 = 0.0;
          unint64_t v106 = v97 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            float v99 = (float)(v99 + 1.0) + 1.0;
            float64x2_t v98 = vaddq_f64(vaddq_f64(v98, *(float64x2_t *)v105), *(float64x2_t *)(v105 + 40));
            v105 += 80;
            v106 -= 2;
          }
          while (v106);
          if (v97 == (v97 & 0xFFFFFFFFFFFFFFFELL)) {
            goto LABEL_83;
          }
        }
        else
        {
          float64x2_t v98 = 0uLL;
          float v99 = 0.0;
          unint64_t v100 = v95;
        }
        unint64_t v107 = v96 - v100;
        NSRange v108 = &v102[40 * v100];
        do
        {
          float64x2_t v109 = *(float64x2_t *)v108;
          v108 += 40;
          float64x2_t v98 = vaddq_f64(v98, v109);
          float v99 = v99 + 1.0;
          --v107;
        }
        while (v107);
      }
LABEL_83:
      float64x2_t v270 = vdivq_f64(v98, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v99), 0));
      goto LABEL_84;
    }
  }
  ChatBubbleRegressor::provideAnAnswer(v7, v5, v23, v10, v11, v12);
}

void sub_1C49EF53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  MEMORY[0x1C8786460](v16, 0x10A1C40547AA8FDLL);
  unint64_t v19 = *v17;
  if (*v17)
  {
    *(void *)(v13 + 80) = v19;
    operator delete(v19);
    double v20 = *v15;
    if (!*v15)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else
  {
    double v20 = *v15;
    if (!*v15) {
      goto LABEL_3;
    }
  }
  *(void *)(v13 + 56) = v20;
  operator delete(v20);

  _Unwind_Resume(a1);
}

void ChatBubbleRegressor::provideAnAnswer(ChatBubbleRegressor *this, CHDrawing *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void sub_1C49EF73C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8786460](v1, 0x10A1C40547AA8FDLL);
  _Unwind_Resume(a1);
}

void ChatBubbleRegressor::regressLollipop(ChatBubbleRegressor *this, int a2, int a3, int a4)
{
  if (a3 <= a4)
  {
    int v4 = a4 - a3 + 1;
    long long v5 = (_OWORD *)(*((void *)this + 6) + 40 * a3);
    float32x2_t v6 = (float32x2_t)vdup_n_s32(0xD01502F9);
    float32x2_t v7 = (float32x2_t)vdup_n_s32(0x501502F9u);
    do
    {
      float64x2_t v8 = *(float64x2_t *)v5;
      long long v5 = (_OWORD *)((char *)v5 + 40);
      float32x2_t v9 = vcvt_f32_f64(v8);
      float32x2_t v7 = vminnm_f32(v9, v7);
      float32x2_t v6 = vmaxnm_f32(v9, v6);
      --v4;
    }
    while (v4);
  }
  operator new();
}

void sub_1C49EF944(_Unwind_Exception *a1)
{
  MEMORY[0x1C8786460](v1, 0x10A1C40547AA8FDLL);
  _Unwind_Resume(a1);
}

void sub_1C49EFE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C49EFF2C(uint64_t a1, void *a2)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  float32x2_t v9 = objc_msgSend_strokeIndexes(v3, v4, v5, v6, v7, v8);
  IndeCGFloat x = objc_msgSend_lastIndex(v9, v10, v11, v12, v13, v14);
  unint64_t v21 = objc_msgSend_count(*(void **)(a1 + 32), v16, v17, v18, v19, v20);

  if (Index >= v21)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    double v33 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      unint64_t v57 = objc_msgSend_strokeIndexes(v3, v52, v53, v54, v55, v56);
      unint64_t v63 = objc_msgSend_description(v57, v58, v59, v60, v61, v62);
      uint64_t v69 = objc_msgSend_count(*(void **)(a1 + 32), v64, v65, v66, v67, v68);
      *(_DWORD *)unint64_t v70 = 138412546;
      *(void *)&v70[4] = v63;
      *(_WORD *)&v70[12] = 2048;
      *(void *)&v70[14] = v69;
      _os_log_impl(&dword_1C492D000, v33, OS_LOG_TYPE_ERROR, "AutoRefine result not created: Unable to access all strokes with indexes %@ from the strokes array with %ld elements", v70, 0x16u);
    }
  }
  else
  {
    float v27 = *(void **)(a1 + 32);
    float v28 = objc_msgSend_strokeIndexes(v3, v22, v23, v24, v25, v26);
    double v33 = objc_msgSend_objectsAtIndexes_(v27, v29, (uint64_t)v28, v30, v31, v32);

    double v34 = objc_opt_class();
    objc_msgSend_boundsForStrokes_(v34, v35, (uint64_t)v33, v36, v37, v38);
    *(void *)unint64_t v70 = v39;
    *(void *)&v70[8] = v40;
    *(void *)&v70[16] = v41;
    uint64_t v71 = v42;
    double v43 = *(void **)(a1 + 40);
    float v47 = objc_msgSend_valueWithBytes_objCType_(MEMORY[0x1E4F29238], v44, (uint64_t)v70, (uint64_t)"{CGRect={CGPoint=dd}{CGSize=dd}}", v45, v46);
    objc_msgSend_addObject_(v43, v48, (uint64_t)v47, v49, v50, v51);
  }
}

void sub_1C49F0108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F0170(uint64_t a1, void *a2, uint64_t a3)
{
  id v14 = a2;
  if ((objc_msgSend_strokeAttributes(v14, v5, v6, v7, v8, v9) & 4) != 0) {
    objc_msgSend_addIndex_(*(void **)(a1 + 32), v10, a3, v11, v12, v13);
  }
}

void sub_1C49F01CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49F067C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28)
{
  uint64_t v35 = v30;
  uint64_t v36 = v28;

  _Unwind_Resume(a1);
}

void sub_1C49F0924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F0C44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F0E90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C49F0EF0(void *a1, void *a2, void *a3)
{
  uint64_t v235 = *MEMORY[0x1E4F143B8];
  id v208 = a2;
  uint64_t v212 = a3;
  unint64_t v214 = a1;
  if (a1)
  {
    objc_msgSend_string(MEMORY[0x1E4F28E78], v5, v6, v7, v8, v9);
    id v210 = (id)objc_claimAutoreleasedReturnValue();
    long long v230 = 0u;
    long long v231 = 0u;
    long long v228 = 0u;
    long long v229 = 0u;
    objc_msgSend_locales(a1, v10, v11, v12, v13, v14);
    obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v202 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v15, (uint64_t)&v228, (uint64_t)v234, 16, v16);
    if (!v202) {
      goto LABEL_50;
    }
    uint64_t v203 = *(void *)v229;
    while (1)
    {
      for (uint64_t i = 0; i != v202; ++i)
      {
        if (*(void *)v229 != v203) {
          objc_enumerationMutation(obj);
        }
        float64x2_t v215 = *(void **)(*((void *)&v228 + 1) + 8 * i);
        uint64_t v204 = objc_msgSend_localeIdentifier(v215, v17, v18, v19, v20, v21);
        objc_msgSend_appendFormat_(v210, v22, @"== %@ ==\n", v23, v24, v25, v204);
        long long v226 = 0u;
        long long v227 = 0u;
        long long v224 = 0u;
        long long v225 = 0u;
        uint64_t v31 = objc_msgSend_strokeGroupingResult(v214, v26, v27, v28, v29, v30);
        objc_msgSend_strokeGroupsSortedBy_textGroupsOnly_(v31, v32, 0, 1, v33, v34);
        id v207 = (id)objc_claimAutoreleasedReturnValue();

        uint64_t v211 = objc_msgSend_countByEnumeratingWithState_objects_count_(v207, v35, (uint64_t)&v224, (uint64_t)v233, 16, v36);
        if (v211)
        {
          uint64_t v209 = *(void *)v225;
          do
          {
            uint64_t v217 = 0;
            do
            {
              if (*(void *)v225 != v209) {
                objc_enumerationMutation(v207);
              }
              uint64_t v42 = *(void **)(*((void *)&v224 + 1) + 8 * v217);
              uint64_t v43 = objc_msgSend_uniqueIdentifier(v42, v37, v38, v39, v40, v41);
              uint64_t v218 = objc_msgSend_recognitionResultForStrokeGroupIdentifier_(v214, v44, v43, v45, v46, v47);
              uint64_t v53 = objc_msgSend_uniqueIdentifier(v42, v48, v49, v50, v51, v52);
              float64x2_t v216 = objc_msgSend_textCorrectionResultForStrokeGroupIdentifier_(v214, v54, v53, v55, v56, v57);
              if (v218)
              {
                unint64_t v63 = objc_msgSend_recognitionResultsByLocale(v218, v58, v59, v60, v61, v62);
                uint64_t v68 = objc_msgSend_objectForKeyedSubscript_(v63, v64, (uint64_t)v215, v65, v66, v67);

                double v74 = objc_msgSend_errorsByLocale(v218, v69, v70, v71, v72, v73);
                int32x4_t v219 = objc_msgSend_objectForKeyedSubscript_(v74, v75, (uint64_t)v215, v76, v77, v78);
              }
              else
              {
                if (!v216)
                {
                  int32x4_t v219 = 0;
                  uint64_t v68 = 0;
                  goto LABEL_17;
                }
                double v79 = objc_msgSend_textCorrectionResult(v216, v58, v59, v60, v61, v62);
                uint64_t v68 = objc_msgSend_textResult(v79, v80, v81, v82, v83, v84);

                double v74 = objc_msgSend_textCorrectionResult(v216, v85, v86, v87, v88, v89);
                int32x4_t v219 = objc_msgSend_error(v74, v90, v91, v92, v93, v94);
              }

LABEL_17:
              unint64_t v100 = objc_msgSend_string(MEMORY[0x1E4F28E78], v58, v59, v60, v61, v62);
              if (!v212 || (v212[2](v212, v42, v215), (uint64_t v101 = objc_claimAutoreleasedReturnValue()) == 0))
              {
                uint64_t v102 = NSString;
                uint64_t v103 = objc_msgSend_uniqueIdentifier(v42, v95, v96, v97, v98, v99);
                uint64_t v101 = objc_msgSend_stringWithFormat_(v102, v104, @"GroupID %ld", v105, v106, v107, v103);
              }
              objc_msgSend_appendFormat_(v100, v95, @"%@: {\n  ", v97, v98, v99, v101);
              uint64_t v213 = (void *)v101;
              if (v68)
              {
                uint64_t v113 = objc_msgSend_transcriptionPaths(v68, v108, v109, v110, v111, v112);
                BOOL v119 = objc_msgSend_count(v113, v114, v115, v116, v117, v118) == 0;

                if (v119) {
                  objc_msgSend_appendFormat_(v100, v120, @"%@", v122, v123, v124, @"<NO RESULT>\n");
                }
                long long v222 = 0u;
                long long v223 = 0u;
                long long v220 = 0u;
                long long v221 = 0u;
                float v125 = objc_msgSend_transcriptionPaths(v68, v120, v121, v122, v123, v124);
                uint64_t v133 = objc_msgSend_countByEnumeratingWithState_objects_count_(v125, v126, (uint64_t)&v220, (uint64_t)v232, 16, v127);
                if (v133)
                {
                  uint64_t v134 = *(void *)v221;
                  do
                  {
                    for (uint64_t j = 0; j != v133; ++j)
                    {
                      if (*(void *)v221 != v134) {
                        objc_enumerationMutation(v125);
                      }
                      float v136 = *(void **)(*((void *)&v220 + 1) + 8 * j);
                      float v137 = objc_msgSend_transcriptionPaths(v68, v128, v129, v130, v131, v132);
                      double v143 = objc_msgSend_lastObject(v137, v138, v139, v140, v141, v142);

                      uint64_t v149 = objc_msgSend_length(v136, v144, v145, v146, v147, v148);
                      uint64_t v151 = objc_msgSend_transcriptionWithPath_columnRange_filterLowConfidence_(v68, v150, (uint64_t)v136, 0, v149, 0);
                      uint64_t v156 = (void *)v151;
                      BOOL v157 = @", ";
                      if (v136 == v143) {
                        BOOL v157 = @"\n";
                      }
                      objc_msgSend_appendFormat_(v100, v152, @"\"%@\"%@", v153, v154, v155, v151, v157);
                    }
                    uint64_t v133 = objc_msgSend_countByEnumeratingWithState_objects_count_(v125, v128, (uint64_t)&v220, (uint64_t)v232, 16, v132);
                  }
                  while (v133);
                }
              }
              else
              {
                if (!v219)
                {
                  objc_msgSend_appendFormat_(v100, v108, @"%@", v110, v111, v112, @"<NO RESULT>\n");
                  goto LABEL_36;
                }
                float v125 = objc_msgSend_localizedDescription(v219, v108, v109, v110, v111, v112);
                objc_msgSend_appendFormat_(v100, v158, @"<ERROR: %@>\n", v159, v160, v161, v125);
              }

LABEL_36:
              objc_msgSend_appendFormat_(v100, v162, @"},\n", v163, v164, v165);
              if (v68)
              {
                float v171 = objc_msgSend_transcriptionPaths(v68, v166, v167, v168, v169, v170);
                BOOL v177 = objc_msgSend_count(v171, v172, v173, v174, v175, v176) == 0;

                if (!v177)
                {
                  uint64_t v179 = objc_msgSend_recognizerGenerationIdentifier(v68, v166, v178, v168, v169, v170);
                  float v184 = @"Gen 1";
                  if (v179 == 2) {
                    float v184 = @"Gen 2";
                  }
                  objc_msgSend_appendFormat_(v100, v180, @"Recognizer Generation: %@\n", v181, v182, v183, v184);
                  uint64_t v185 = @"None";
                  objc_msgSend_languageFitnessForLocale_(v218, v186, (uint64_t)v215, v187, v188, v189);
                  if (v194 > -3.40282347e38)
                  {
                    objc_msgSend_stringWithFormat_(NSString, v190, @"(%.3f, %.3f)", v191, v192, v193, *(void *)&v194, v195);
                    uint64_t v185 = (__CFString *)objc_claimAutoreleasedReturnValue();
                  }
                  objc_msgSend_appendFormat_(v100, v190, @"Language Fitness: %@\n\n", v191, v192, v193, v185);
                }
              }
              objc_msgSend_appendString_(v210, v166, (uint64_t)v100, v168, v169, v170);
              objc_msgSend_addObject_(v208, v196, (uint64_t)v100, v197, v198, v199);

              ++v217;
            }
            while (v217 != v211);
            uint64_t v200 = objc_msgSend_countByEnumeratingWithState_objects_count_(v207, v37, (uint64_t)&v224, (uint64_t)v233, 16, v41);
            uint64_t v211 = v200;
          }
          while (v200);
        }
      }
      uint64_t v202 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v17, (uint64_t)&v228, (uint64_t)v234, 16, v21);
      if (!v202)
      {
LABEL_50:

        goto LABEL_51;
      }
    }
  }
  id v210 = 0;
LABEL_51:

  return v210;
}

void sub_1C49F159C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_1C49F17AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C49F17BC(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v6 = NSString;
  uint64_t v12 = objc_msgSend_uniqueIdentifier(v4, v7, v8, v9, v10, v11);
  uint64_t v18 = objc_msgSend_localeIdentifier(v5, v13, v14, v15, v16, v17);
  uint64_t v23 = objc_msgSend_stringWithFormat_(v6, v19, @"GroupID %ld, %@", v20, v21, v22, v12, v18);

  return v23;
}

void sub_1C49F1864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F187C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F1FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1C49F2194(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)a1[4];
  id v55 = v3;
  uint64_t v10 = objc_msgSend_strokeIndexes(v3, v5, v6, v7, v8, v9);
  objc_msgSend_addIndexes_(v4, v11, (uint64_t)v10, v12, v13, v14);

  uint64_t v20 = objc_msgSend_string(v55, v15, v16, v17, v18, v19);
  if (isSymbolStructural((NSString *)v20))
  {
  }
  else
  {
    uint64_t v26 = objc_msgSend_strokeIndexes(v55, v21, v22, v23, v24, v25);
    uint64_t v32 = objc_msgSend_count(v26, v27, v28, v29, v30, v31);

    if (!v32)
    {
      uint64_t v38 = objc_msgSend_string(v55, v33, v34, v35, v36, v37);
      if (objc_msgSend_isEqualToString_(v38, v39, @"=", v40, v41, v42))
      {

        uint64_t v48 = a1[5];
      }
      else
      {
        uint64_t v49 = objc_msgSend_string(v55, v43, v44, v45, v46, v47);
        int isEqualToString = objc_msgSend_isEqualToString_(v49, v50, @"\\hline", v51, v52, v53);

        if (isEqualToString) {
          uint64_t v48 = a1[5];
        }
        else {
          uint64_t v48 = a1[6];
        }
      }
      *(unsigned char *)(*(void *)(v48 + 8) + 24) = 1;
    }
  }
}

void sub_1C49F22B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49F22EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49F2304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49F231C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49F23AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F23C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F244C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F2460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F24EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F2500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F2690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F2A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C49F3268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C49F415C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,void *a22,uint64_t a23,void *a24,void *a25)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49F4458(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_isEquivalentToStrokeGroup_(a2, (const char *)a2, *(void *)(a1 + 32), a4, a5, a6);
}

void sub_1C49F44F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49F464C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F4688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F46A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F46BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F46D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F46E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F46F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F49E4(_Unwind_Exception *a1)
{
  uint64_t v9 = v7;

  _Unwind_Resume(a1);
}

void sub_1C49F4ADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F4DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49F4DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49F4E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49F55F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5D24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5D34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5D44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5D54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5D74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5D84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5D9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5DB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5DC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5DDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5DF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5E08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5E20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5E34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5E4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5E60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5EA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5EB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5EE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5EFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5F10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5F28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5F3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5F54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5F68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5F80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F5F94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F6094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F60B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F60CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F6358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C49F6624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F663C(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1C49F6654(uint64_t a1, const char *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_compare_(a3, a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C49F66B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F6750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F6770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F68F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F69E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F69F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F6A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F6AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F6AE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F6B64()
{
  id v0 = (void *)qword_1EA3C9148;
  qword_1EA3C9148 = (uint64_t)&unk_1F203D9E0;
}

void sub_1C49F6BEC()
{
  id v0 = (void *)qword_1EA3C9158;
  qword_1EA3C9158 = (uint64_t)&unk_1F203D9F8;
}

void sub_1C49F6C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49F6C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49F6DAC(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1C49F6EE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F6F18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F6F2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F6FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F7134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C49F7230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F7294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F72F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F7454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F7594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F7678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F7688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F76A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F7740(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C49F775C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

uint64_t sub_1C49F7774(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  id v4 = objc_opt_class();
  uint64_t v10 = objc_msgSend_integerValue(v3, v5, v6, v7, v8, v9);
  uint64_t isStrokeClassificationTextOrMath = objc_msgSend_isStrokeClassificationTextOrMath_(v4, v11, v10, v12, v13, v14);

  return isStrokeClassificationTextOrMath;
}

void sub_1C49F77C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F79C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F7B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49F7B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49F7EE0(_Unwind_Exception *a1)
{
  uint64_t v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1C49F81C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F8250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F8268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F827C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F84C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C49F86DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F86F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F8754(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F876C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F8784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F8798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F87B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F87CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F87E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F8B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,void *a37,void *a38,void *a39,void *a40,void *a41,void *a42)
{
  _Unwind_Resume(a1);
}

void sub_1C49F8C7C(void **a1, void *a2, void *a3)
{
  id v79 = a2;
  id v5 = a3;
  uint64_t v11 = objc_msgSend_strokeClassificationsByStrokeIdentifier(a1[4], v6, v7, v8, v9, v10);
  uint64_t v16 = objc_msgSend_objectForKey_(v11, v12, (uint64_t)v79, v13, v14, v15);

  uint64_t v22 = objc_msgSend_integerValue(v16, v17, v18, v19, v20, v21);
  uint64_t v28 = objc_msgSend_integerValue(v5, v23, v24, v25, v26, v27);
  uint64_t v29 = v28;
  if (!v16)
  {
    uint64_t v45 = objc_opt_class();
    int isStrokeClassificationTextOrMath = objc_msgSend_isStrokeClassificationTextOrMath_(v45, v46, v29, v47, v48, v49);
    uint64_t v44 = a1 + 6;
    if (isStrokeClassificationTextOrMath) {
      uint64_t v44 = a1 + 5;
    }
    goto LABEL_8;
  }
  if (v28 == v22) {
    goto LABEL_9;
  }
  uint64_t v30 = objc_opt_class();
  if (objc_msgSend_isStrokeClassificationTextOrMath_(v30, v31, v29, v32, v33, v34))
  {
    uint64_t v35 = objc_opt_class();
    if (objc_msgSend_isStrokeClassificationTextOrMath_(v35, v36, v22, v37, v38, v39))
    {
      uint64_t v44 = a1 + 7;
LABEL_8:
      objc_msgSend_addObject_(*v44, v40, (uint64_t)v79, v41, v42, v43);
      goto LABEL_9;
    }
  }
  uint64_t v51 = objc_opt_class();
  if ((objc_msgSend_isStrokeClassificationTextOrMath_(v51, v52, v22, v53, v54, v55) & 1) == 0)
  {
    uint64_t v56 = objc_opt_class();
    if ((objc_msgSend_isStrokeClassificationTextOrMath_(v56, v57, v29, v58, v59, v60) & 1) == 0)
    {
      uint64_t v44 = a1 + 8;
      goto LABEL_8;
    }
  }
  uint64_t v61 = objc_opt_class();
  if (objc_msgSend_isStrokeClassificationTextOrMath_(v61, v62, v29, v63, v64, v65))
  {
    objc_msgSend_addObject_(a1[5], v66, (uint64_t)v79, v67, v68, v69);
    uint64_t v44 = a1 + 9;
    goto LABEL_8;
  }
  uint64_t v70 = objc_opt_class();
  if (objc_msgSend_isStrokeClassificationTextOrMath_(v70, v71, v22, v72, v73, v74))
  {
    objc_msgSend_addObject_(a1[10], v75, (uint64_t)v79, v76, v77, v78);
    uint64_t v44 = a1 + 6;
    goto LABEL_8;
  }
LABEL_9:
}

void sub_1C49F8E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49F9300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C49F96CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F9C4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49F9FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C49FA188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FA198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FA1BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C49FA1D0(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1)
  {
    if (a2) {
      objc_msgSend_textStrokeGroups(a1, a2, a3, a4, a5, a6);
    }
    else {
    uint64_t v6 = objc_msgSend_strokeGroups(a1, a2, a3, a4, a5, a6);
    }
    uint64_t v12 = objc_msgSend_allObjects(v6, v7, v8, v9, v10, v11);
    uint64_t v17 = objc_msgSend_sortedArrayUsingComparator_(v12, v13, (uint64_t)&unk_1F2013570, v14, v15, v16);

    uint64_t v18 = (void *)v17;
  }
  else
  {
    uint64_t v18 = 0;
  }
  return v18;
}

void sub_1C49FA278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FA28C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49FA29C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  objc_msgSend_bounds(v4, v6, v7, v8, v9, v10);
  double MinY = CGRectGetMinY(v56);
  objc_msgSend_bounds(v4, v12, v13, v14, v15, v16);
  double MidY = CGRectGetMidY(v57);
  objc_msgSend_bounds(v4, v18, v19, v20, v21, v22);
  double MaxY = CGRectGetMaxY(v58);
  objc_msgSend_bounds(v4, v24, v25, v26, v27, v28);
  double MinX = CGRectGetMinX(v59);
  objc_msgSend_bounds(v5, v30, v31, v32, v33, v34);
  double v35 = CGRectGetMinY(v60);
  objc_msgSend_bounds(v5, v36, v37, v38, v39, v40);
  double v41 = CGRectGetMidY(v61);
  objc_msgSend_bounds(v5, v42, v43, v44, v45, v46);
  double v47 = CGRectGetMaxY(v62);
  objc_msgSend_bounds(v5, v48, v49, v50, v51, v52);
  double v53 = CGRectGetMinX(v63);
  uint64_t v54 = 1;
  if (MidY <= v47 && MinY <= v41)
  {
    uint64_t v54 = -1;
    if (v41 <= MaxY && v35 <= MidY)
    {
      if (MinX > v53) {
        uint64_t v54 = 1;
      }
      else {
        uint64_t v54 = -1;
      }
    }
  }

  return v54;
}

void sub_1C49FA3B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FA3C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FA3D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FA3EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FA400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FA414(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FA428(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FA43C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C49FA450(id a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v94 = (char)a2;
  id v6 = a1;
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    goto LABEL_65;
  }
  long long v98 = 0u;
  long long v99 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  uint64_t v7 = objc_msgSend_textStrokeGroups(a1, a2, a3, a4, a5, a6);
  uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v96, (uint64_t)v100, 16, v9);
  if (!v15)
  {

    uint64_t v59 = 0;
    uint64_t v61 = 0;
    uint64_t v18 = 0;
    uint64_t v17 = 0;
LABEL_27:
    uint64_t v60 = 0;
    uint64_t v16 = v59;
    uint64_t v59 = v61;
    goto LABEL_28;
  }
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = *(void *)v97;
  do
  {
    uint64_t v21 = 0;
    do
    {
      if (*(void *)v97 != v20) {
        objc_enumerationMutation(v7);
      }
      uint64_t v22 = *(void **)(*((void *)&v96 + 1) + 8 * v21);
      objc_msgSend_averageWritingOrientation(v22, v10, v11, v12, v13, v14);
      double v30 = atan2(v24, v23);
      double v31 = fabs(v30);
      if (v31 <= 0.785398163)
      {
        uint64_t v32 = objc_msgSend_strokeIdentifiers(v22, v25, v26, v27, v28, v29);
        v19 += objc_msgSend_count(v32, v38, v39, v40, v41, v42);
      }
      else if (v31 <= 2.35619449)
      {
        if (v30 >= 0.0)
        {
          uint64_t v32 = objc_msgSend_strokeIdentifiers(v22, v25, v26, v27, v28, v29);
          v18 += objc_msgSend_count(v32, v48, v49, v50, v51, v52);
        }
        else
        {
          uint64_t v32 = objc_msgSend_strokeIdentifiers(v22, v25, v26, v27, v28, v29);
          v17 += objc_msgSend_count(v32, v43, v44, v45, v46, v47);
        }
      }
      else
      {
        uint64_t v32 = objc_msgSend_strokeIdentifiers(v22, v25, v26, v27, v28, v29);
        v16 += objc_msgSend_count(v32, v33, v34, v35, v36, v37);
      }

      ++v21;
    }
    while (v15 != v21);
    uint64_t v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v96, (uint64_t)v100, 16, v14);
    uint64_t v15 = v53;
  }
  while (v53);

  if (v19 < 0) {
    uint64_t v59 = -1;
  }
  else {
    uint64_t v59 = v19;
  }
  if (v16 <= v59)
  {
    if (v16 < 0) {
      uint64_t v61 = -1;
    }
    else {
      uint64_t v61 = v16;
    }
    if (v19 < 0)
    {
      uint64_t v60 = 0;
      uint64_t v16 = v59;
      uint64_t v59 = -1;
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v60 = 1;
LABEL_28:
  if (v17 <= v59) {
    uint64_t v62 = v59;
  }
  else {
    uint64_t v62 = v17;
  }
  if (v16 < 0) {
    uint64_t v63 = -1;
  }
  else {
    uint64_t v63 = v16;
  }
  if (v16 >= 0) {
    uint64_t v59 = v62;
  }
  if (v17 <= v16)
  {
    uint64_t v64 = v63;
  }
  else
  {
    uint64_t v60 = 2;
    uint64_t v64 = v17;
  }
  if (v17 > v16) {
    uint64_t v59 = v16;
  }
  if (v18 <= v59) {
    uint64_t v65 = v59;
  }
  else {
    uint64_t v65 = v18;
  }
  if (v64 < 0) {
    uint64_t v66 = -1;
  }
  else {
    uint64_t v66 = v64;
  }
  if (v64 < 0) {
    uint64_t v65 = v59;
  }
  if (v18 <= v64) {
    uint64_t v67 = v60;
  }
  else {
    uint64_t v67 = 3;
  }
  if (v18 <= v64) {
    uint64_t v68 = v66;
  }
  else {
    uint64_t v68 = v18;
  }
  if (v18 <= v64) {
    uint64_t v69 = v65;
  }
  else {
    uint64_t v69 = v64;
  }
  if (v69 >= 1 && (double)v68 / (double)v69 < 1.2)
  {
    uint64_t v70 = (void *)MEMORY[0x1E4F1CA20];
    uint64_t v71 = objc_msgSend_preferredLanguages(MEMORY[0x1E4F1CA20], v54, v55, v56, v57, v58);
    uint64_t v77 = objc_msgSend_firstObject(v71, v72, v73, v74, v75, v76);
    objc_msgSend_lineDirectionForLanguage_(v70, v78, (uint64_t)v77, v79, v80, v81);

    uint64_t v67 = 0;
  }
  if (v94) {
    objc_msgSend_textStrokeGroups(v6, v54, v55, v56, v57, v58);
  }
  else {
  uint64_t v82 = objc_msgSend_strokeGroups(v6, v54, v55, v56, v57, v58);
  }
  uint64_t v88 = objc_msgSend_allObjects(v82, v83, v84, v85, v86, v87);
  v95[0] = MEMORY[0x1E4F143A8];
  v95[1] = 3221225472;
  v95[2] = sub_1C49FA854;
  v95[3] = &unk_1E64E2050;
  v95[4] = v67;
  objc_msgSend_sortedArrayUsingComparator_(v88, v89, (uint64_t)v95, v90, v91, v92);
  id v6 = (id)objc_claimAutoreleasedReturnValue();

LABEL_65:
  return v6;
}

void sub_1C49FA7DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49FA854(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v11 = a3;
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = 1;
  switch(v12)
  {
    case 3:
      goto LABEL_7;
    case 2:
      uint64_t v13 = -1;
LABEL_7:
      objc_msgSend_bounds(v5, v6, v7, v8, v9, v10);
      double MinX = CGRectGetMinX(v146);
      objc_msgSend_bounds(v5, v50, v51, v52, v53, v54);
      double MidX = CGRectGetMidX(v147);
      objc_msgSend_bounds(v5, v55, v56, v57, v58, v59);
      double MaxX = CGRectGetMaxX(v148);
      objc_msgSend_bounds(v11, v60, v61, v62, v63, v64);
      double MinY = CGRectGetMinX(v149);
      objc_msgSend_bounds(v11, v65, v66, v67, v68, v69);
      double MidY = CGRectGetMidX(v150);
      objc_msgSend_bounds(v11, v70, v71, v72, v73, v74);
      double MaxY = CGRectGetMaxX(v151);
      goto LABEL_8;
    case 1:
      uint64_t v13 = -1;
      break;
  }
  objc_msgSend_bounds(v5, v6, v7, v8, v9, v10);
  double MinX = CGRectGetMinY(v140);
  objc_msgSend_bounds(v5, v15, v16, v17, v18, v19);
  double MidX = CGRectGetMidY(v141);
  objc_msgSend_bounds(v5, v21, v22, v23, v24, v25);
  double MaxX = CGRectGetMaxY(v142);
  objc_msgSend_bounds(v11, v27, v28, v29, v30, v31);
  double MinY = CGRectGetMinY(v143);
  objc_msgSend_bounds(v11, v33, v34, v35, v36, v37);
  double MidY = CGRectGetMidY(v144);
  objc_msgSend_bounds(v11, v39, v40, v41, v42, v43);
  double MaxY = CGRectGetMaxY(v145);
LABEL_8:
  uint64_t v75 = 1;
  if (MidX <= MaxY && MinX <= MidY)
  {
    uint64_t v75 = -1;
    if (MidY <= MaxX && MinY <= MidX)
    {
      objc_msgSend_firstStrokeOrigin(v5, v44, v45, v46, v47, v48);
      double v77 = v76;
      objc_msgSend_firstStrokeOrigin(v5, v78, v79, v80, v81, v82);
      double v84 = v83;
      objc_msgSend_firstStrokeOrigin(v5, v85, v86, v87, v88, v89);
      double v91 = v90;
      objc_msgSend_firstStrokeOrigin(v5, v92, v93, v94, v95, v96);
      double v98 = v97;
      objc_msgSend_firstStrokeOrigin(v11, v99, v100, v101, v102, v103);
      double v105 = v104;
      objc_msgSend_firstStrokeOrigin(v11, v106, v107, v108, v109, v110);
      double v112 = v111;
      objc_msgSend_firstStrokeOrigin(v11, v113, v114, v115, v116, v117);
      double v119 = v118;
      objc_msgSend_firstStrokeOrigin(v11, v120, v121, v122, v123, v124);
      double v130 = (v91 * v98 + v77 * v84) * (double)v13;
      double v132 = (v119 * v131 + v105 * v112) * (double)v13;
      if (v130 >= v132)
      {
        if (v130 <= v132)
        {
          uint64_t v133 = objc_msgSend_uniqueIdentifier(v5, v125, v126, v127, v128, v129);
          if (v133 < objc_msgSend_uniqueIdentifier(v11, v134, v135, v136, v137, v138)) {
            uint64_t v75 = -1;
          }
          else {
            uint64_t v75 = 1;
          }
        }
        else
        {
          uint64_t v75 = 1;
        }
      }
    }
  }

  return v75;
}

void sub_1C49FAA74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FAA88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FAA9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FAAB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FAAC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FAAD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FAAEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FAB00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FAB14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FAB28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C49FAB3C(id a1, int a2)
{
  id v2 = a1;
  if (a1)
  {
    uint64_t v9 = objc_alloc_init(CHCTLD);
    if (a2) {
      objc_msgSend_textStrokeGroups(v2, v4, v5, v6, v7, v8);
    }
    else {
    uint64_t v10 = objc_msgSend_strokeGroups(v2, v4, v5, v6, v7, v8);
    }
    uint64_t v16 = objc_msgSend_allObjects(v10, v11, v12, v13, v14, v15);

    objc_msgSend_orderStrokeGroups_(v9, v17, (uint64_t)v16, v18, v19, v20);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

void sub_1C49FABEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FAC14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FAC24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FADB0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1C49FAE7C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C49FAE98(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1C49FB074(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C49FB430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C49FB530(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C49FB54C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

uint64_t sub_1C49FB564(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = objc_opt_class();
  uint64_t v9 = objc_msgSend_classification(v2, v4, v5, v6, v7, v8);
  uint64_t isStrokeClassificationTextOrMath = objc_msgSend_isStrokeClassificationTextOrMath_(v3, v10, v9, v11, v12, v13);

  return isStrokeClassificationTextOrMath;
}

void sub_1C49FB5B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FB654(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C49FB670(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

uint64_t sub_1C49FB688(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = objc_opt_class();
  uint64_t v9 = objc_msgSend_classification(v2, v4, v5, v6, v7, v8);
  uint64_t v14 = objc_msgSend_isStrokeClassificationTextOrMath_(v3, v10, v9, v11, v12, v13) ^ 1;

  return v14;
}

void sub_1C49FB6DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FC1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,void *a53,void *a54)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49FC3D0(void **a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v11 = objc_msgSend_objectForKeyedSubscript_(a1[4], v7, (uint64_t)v5, v8, v9, v10);
  objc_msgSend_ch_CGRectValue(v11, v12, v13, v14, v15, v16);
  double v145 = v18;
  double v146 = v17;
  CGFloat rect = v19;
  CGFloat v21 = v20;

  uint64_t v26 = objc_msgSend_objectForKeyedSubscript_(a1[5], v22, (uint64_t)v5, v23, v24, v25);
  objc_msgSend_doubleValue(v26, v27, v28, v29, v30, v31);
  double v139 = v32;

  uint64_t v37 = objc_msgSend_objectForKeyedSubscript_(a1[6], v33, (uint64_t)v5, v34, v35, v36);
  objc_msgSend_doubleValue(v37, v38, v39, v40, v41, v42);
  double v138 = v43;

  uint64_t v48 = objc_msgSend_objectForKeyedSubscript_(a1[4], v44, (uint64_t)v6, v45, v46, v47);
  objc_msgSend_ch_CGRectValue(v48, v49, v50, v51, v52, v53);
  CGFloat v142 = v55;
  CGFloat v143 = v54;
  double v57 = v56;
  double v59 = v58;

  uint64_t v64 = objc_msgSend_objectForKeyedSubscript_(a1[5], v60, (uint64_t)v6, v61, v62, v63);
  objc_msgSend_doubleValue(v64, v65, v66, v67, v68, v69);
  double v137 = v70;

  uint64_t v75 = objc_msgSend_objectForKeyedSubscript_(a1[6], v71, (uint64_t)v6, v72, v73, v74);
  objc_msgSend_doubleValue(v75, v76, v77, v78, v79, v80);
  double v136 = v81;

  id v82 = v5;
  id v83 = v6;
  self;
  uint64_t v89 = objc_msgSend_lastObject(v82, v84, v85, v86, v87, v88);
  objc_msgSend_bounds(v89, v90, v91, v92, v93, v94);
  CGFloat v96 = v95;
  CGFloat v98 = v97;
  CGFloat v100 = v99;
  CGFloat v102 = v101;

  uint64_t v108 = objc_msgSend_firstObject(v83, v103, v104, v105, v106, v107);
  objc_msgSend_bounds(v108, v109, v110, v111, v112, v113);
  double v141 = v114;

  v147.origin.CGFloat x = v96;
  v147.origin.CGFloat y = v98;
  v147.size.CGFloat width = v100;
  v147.size.CGFloat height = v102;
  double MaxX = CGRectGetMaxX(v147);
  v148.size.CGFloat width = v145;
  v148.origin.CGFloat x = v146;
  v148.origin.CGFloat y = v21;
  v148.size.CGFloat height = rect;
  double v115 = CGRectGetMaxX(v148);
  v149.origin.CGFloat x = v57;
  v149.origin.CGFloat y = v143;
  v149.size.CGFloat width = v59;
  v149.size.CGFloat height = v142;
  double v116 = CGRectGetMaxX(v149);
  v150.origin.CGFloat x = v57;
  v150.origin.CGFloat y = v143;
  v150.size.CGFloat width = v59;
  v150.size.CGFloat height = v142;
  double v117 = CGRectGetMaxX(v150);
  v151.size.CGFloat width = v145;
  v151.origin.CGFloat x = v146;
  v151.origin.CGFloat y = v21;
  v151.size.CGFloat height = rect;
  double v118 = CGRectGetMaxX(v151);
  CGFloat v119 = v21;
  uint64_t v125 = objc_msgSend_count(v83, v120, v121, v122, v123, v124);
  double v126 = v145 + 1.0e-10;
  double v127 = fmin(v115, v116) - fmax(v146, v57);
  double v128 = fmax(v127 / (v145 + 1.0e-10), v127 / (v59 + 1.0e-10));
  if (v125 != 1)
  {
    BOOL v129 = 0;
    if (v57 >= v146) {
      goto LABEL_7;
    }
LABEL_12:
    if (v128 > 0.33) {
      BOOL v129 = 1;
    }
    if (v128 <= 0.75) {
      goto LABEL_8;
    }
LABEL_15:
    unsigned int v131 = 1;
    goto LABEL_16;
  }
  BOOL v129 = (v59 + 1.0e-10) / v126 < 0.5;
  if (v127 <= 0.0) {
    BOOL v129 = 0;
  }
  if (v128 > 0.2) {
    BOOL v129 = 1;
  }
  if (v57 < v146) {
    goto LABEL_12;
  }
LABEL_7:
  BOOL v129 = 0;
  if (v128 > 0.75) {
    goto LABEL_15;
  }
LABEL_8:
  BOOL v130 = v117 > v118;
  if (v128 <= 0.5) {
    BOOL v130 = 0;
  }
  unsigned int v131 = v129 || v130;
LABEL_16:
  v152.origin.CGFloat x = v57;
  v152.size.CGFloat height = v142;
  v152.origin.CGFloat y = v143;
  v152.size.CGFloat width = v59;
  double MinY = CGRectGetMinY(v152);
  v153.size.CGFloat width = v145;
  v153.origin.CGFloat x = v146;
  v153.origin.CGFloat y = v119;
  v153.size.CGFloat height = rect;
  double MaxY = CGRectGetMaxY(v153);
  if ((v141 - MaxX) / v126 >= 0.35)
  {
    uint64_t v134 = 0;
  }
  else if (MinY - MaxY < (v138 + v139 + v137 + v136) * 0.5)
  {
    uint64_t v134 = v131;
  }
  else
  {
    uint64_t v134 = 0;
  }

  return v134;
}

void sub_1C49FC744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FC98C(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1C49FCA74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FCA94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FCBD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FCC10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FCC28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FCC3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FCEA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FCEB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FCF4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FCF60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FCFF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FD008(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FD60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  objc_sync_exit(v20);
  _Unwind_Resume(a1);
}

void sub_1C49FD878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FD890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FD8A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FD8B4(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1C49FD954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FD968(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1C49FD980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FDD14(_Unwind_Exception *a1)
{
  uint64_t v8 = v5;

  _Unwind_Resume(a1);
}

id sub_1C49FDDB4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v6 = objc_msgSend_localeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  return v6;
}

id sub_1C49FDDE4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v6 = objc_msgSend_localeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  return v6;
}

void sub_1C49FDF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C49FDF70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FDF80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FDF90(uint64_t a1, void *a2, void *a3)
{
  v31[2] = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  objc_msgSend_getValue_(v6, v7, (uint64_t)v29, v8, v9, v10);
  v30[0] = @"rawScore";
  uint64_t v16 = objc_msgSend_numberWithDouble_(NSNumber, v11, v12, v13, v14, v15, v29[0]);
  v30[1] = @"combinedScore";
  v31[0] = v16;
  uint64_t v22 = objc_msgSend_numberWithDouble_(NSNumber, v17, v18, v19, v20, v21, v29[1]);
  v31[1] = v22;
  uint64_t v25 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v23, (uint64_t)v31, (uint64_t)v30, 2, v24);
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v26, (uint64_t)v25, (uint64_t)v5, v27, v28);
}

void sub_1C49FE0A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FE5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C49FE72C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v11 = objc_msgSend_objectForKeyedSubscript_(v6, v7, @"rawScore", v8, v9, v10);
  objc_msgSend_doubleValue(v11, v12, v13, v14, v15, v16);
  uint64_t v18 = v17;

  uint64_t v23 = objc_msgSend_objectForKeyedSubscript_(v6, v19, @"combinedScore", v20, v21, v22);
  objc_msgSend_doubleValue(v23, v24, v25, v26, v27, v28);
  uint64_t v30 = v29;

  v38[0] = v18;
  v38[1] = v30;
  uint64_t v34 = objc_msgSend_value_withObjCType_(MEMORY[0x1E4F29238], v31, (uint64_t)v38, (uint64_t)"{?=dd}", v32, v33);
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v35, (uint64_t)v34, (uint64_t)v5, v36, v37);
}

void sub_1C49FE800(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FE848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FE85C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  objc_msgSend_doubleValue(v6, v7, v8, v9, v10, v11);
  v20[0] = v12;
  v20[1] = 0;
  uint64_t v16 = objc_msgSend_value_withObjCType_(MEMORY[0x1E4F29238], v13, (uint64_t)v20, (uint64_t)"{?=dd}", v14, v15);
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v17, (uint64_t)v16, (uint64_t)v5, v18, v19);
}

void sub_1C49FE8E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FE900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FE914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FEB40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FEBCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FEBE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FEBF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FEE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C49FF0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49FF104(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  uint64_t v11 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v7, a2, v8, v9, v10);
  uint64_t v17 = objc_msgSend_firstObject(v11, v12, v13, v14, v15, v16);
  uint64_t v22 = objc_msgSend_objectForKeyedSubscript_(v6, v18, (uint64_t)v17, v19, v20, v21);
  objc_msgSend_getValue_(v22, v23, (uint64_t)v51, v24, v25, v26);

  uint64_t v27 = *(void **)(a1 + 32);
  uint64_t v32 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v28, (uint64_t)v5, v29, v30, v31);
  uint64_t v38 = objc_msgSend_firstObject(v32, v33, v34, v35, v36, v37);
  double v43 = objc_msgSend_objectForKeyedSubscript_(v27, v39, (uint64_t)v38, v40, v41, v42);
  objc_msgSend_getValue_(v43, v44, (uint64_t)v50, v45, v46, v47);

  if (v51[0] - v50[0] <= 0.00499999989) {
    uint64_t v48 = v51[0] - v50[0] < -0.00499999989;
  }
  else {
    uint64_t v48 = -1;
  }

  return v48;
}

void sub_1C49FF220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FF23C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FF254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FF268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FF278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FF294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FF2AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FF2C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FF55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49FF5F0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v10 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v6, a2, v7, v8, v9);
  objc_msgSend_getValue_(v10, v11, (uint64_t)v28, v12, v13, v14);

  uint64_t v19 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v15, (uint64_t)v5, v16, v17, v18);
  objc_msgSend_getValue_(v19, v20, (uint64_t)v27, v21, v22, v23);

  float v24 = v28[0] - v27[0];
  if (v24 <= 0.005) {
    uint64_t v25 = v24 < -0.005;
  }
  else {
    uint64_t v25 = -1;
  }

  return v25;
}

void sub_1C49FF6C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FF6E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49FF6F8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v10 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v6, a2, v7, v8, v9);
  objc_msgSend_getValue_(v10, v11, (uint64_t)&v28, v12, v13, v14);

  uint64_t v19 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v15, (uint64_t)v5, v16, v17, v18);
  objc_msgSend_getValue_(v19, v20, (uint64_t)&v26, v21, v22, v23);

  if (v28 - v26 > 0.1) {
    goto LABEL_4;
  }
  if (v28 - v26 < -0.1)
  {
LABEL_6:
    uint64_t v24 = 1;
    goto LABEL_7;
  }
  if (v29 - v27 <= 0.00499999989)
  {
    if (v29 - v27 >= -0.00499999989)
    {
      uint64_t v24 = 0;
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_4:
  uint64_t v24 = -1;
LABEL_7:

  return v24;
}

void sub_1C49FF7E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FF7FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FF80C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FF820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C49FFAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49FFB70(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  self;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = sub_1C49FFC60;
  v13[3] = &unk_1E64E21A8;
  id v6 = v4;
  id v14 = v6;
  uint64_t v11 = objc_msgSend_indexOfObjectPassingTest_(v5, v7, (uint64_t)v13, v8, v9, v10);

  return v11;
}

void sub_1C49FFC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C49FFC4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C49FFC60(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_languageCode(a2, (const char *)a2, a3, a4, a5, a6);
  hasPrefiCGFloat x = objc_msgSend_hasPrefix_(v7, v8, *(void *)(a1 + 32), v9, v10, v11);

  return hasPrefix;
}

void sub_1C49FFCA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A00720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30)
{
  _Unwind_Resume(a1);
}

unint64_t sub_1C4A00984(uint64_t a1, const char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void **)(a1 + 32);
  uint64_t v8 = objc_msgSend_numberWithInt_(NSNumber, a2, (uint64_t)a2, a4, a5, a6);
  LODWORD(v7) = objc_msgSend_containsObject_(v7, v9, (uint64_t)v8, v10, v11, v12);

  return (a3 >> 29) & 1 | v7;
}

void sub_1C4A009E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4A009F4(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v51 = a3;
  id v50 = a4;
  self;
  objc_msgSend_array(MEMORY[0x1E4F1CA48], v7, v8, v9, v10, v11);
  id v49 = (id)objc_claimAutoreleasedReturnValue();
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  obuint64_t j = v6;
  uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v12, (uint64_t)&v59, (uint64_t)v63, 16, v13);
  if (v18)
  {
    uint64_t v19 = *(void *)v60;
    do
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        if (*(void *)v60 != v19) {
          objc_enumerationMutation(obj);
        }
        uint64_t v21 = *(void *)(*((void *)&v59 + 1) + 8 * i);
        uint64_t v22 = objc_msgSend_objectForKey_(v51, v14, v21, v15, v16, v17);
        uint64_t v55 = 0;
        double v56 = &v55;
        uint64_t v57 = 0x2020000000;
        char v58 = 0;
        double v28 = objc_msgSend_topTranscription(v22, v23, v24, v25, v26, v27);
        uint64_t v34 = objc_msgSend_topTranscription(v22, v29, v30, v31, v32, v33);
        uint64_t v40 = objc_msgSend_length(v34, v35, v36, v37, v38, v39);
        v52[0] = MEMORY[0x1E4F143A8];
        v52[1] = 3221225472;
        v52[2] = sub_1C4A00DEC;
        v52[3] = &unk_1E64E2218;
        double v54 = &v55;
        id v53 = v50;
        objc_msgSend_enumerateCodepointsInRange_usingBlock_(v28, v41, 0, v40, (uint64_t)v52, v42);

        if (*((unsigned char *)v56 + 24)) {
          objc_msgSend_addObject_(v49, v43, v21, v44, v45, v46);
        }

        _Block_object_dispose(&v55, 8);
      }
      uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v14, (uint64_t)&v59, (uint64_t)v63, 16, v17);
    }
    while (v18);
  }

  return v49;
}

void sub_1C4A00C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A00D00(uint64_t a1, int a2, unint64_t a3)
{
  if ((a2 & 0xFFFFFFFD) == 0x14) {
    return 1;
  }
  else {
    return (a3 >> 29) & 1;
  }
}

uint64_t sub_1C4A00D14(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v10 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v6, a2, v7, v8, v9);
  objc_msgSend_getValue_(v10, v11, (uint64_t)v28, v12, v13, v14);

  uint64_t v19 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v15, (uint64_t)v5, v16, v17, v18);
  objc_msgSend_getValue_(v19, v20, (uint64_t)&v26, v21, v22, v23);

  if (v29 <= v27) {
    uint64_t v24 = v29 < v27;
  }
  else {
    uint64_t v24 = -1;
  }

  return v24;
}

void sub_1C4A00DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A00DDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A00DEC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, unsigned char *a5, uint64_t a6)
{
  objc_msgSend_scriptCodeForCodepoint_(CHTextInputScriptSpec, a2, (uint64_t)a2, a4, (uint64_t)a5, a6);
  objc_msgSend_characterType_(CHCharacterSetRules, v9, (uint64_t)a2, v10, v11, v12);
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  *a5 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  return result;
}

void sub_1C4A00EE8(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4A00F0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A01A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A022AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4A02498()
{
}

void sub_1C4A024A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4A024C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4A024E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4A02500(uint64_t a1, void *a2)
{
  id v51 = a2;
  uint64_t v13 = objc_msgSend_string(v51, v3, v4, v5, v6, v7);
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v14 = NSString;
    uint64_t v15 = objc_msgSend_string(v51, v8, v9, v10, v11, v12);
    uint64_t v20 = objc_msgSend_stringWithFormat_(v14, v16, @"\\text{%@}", v17, v18, v19, v15);

    uint64_t v13 = (void *)v20;
  }
  uint64_t v21 = [CHTokenizedMathResultToken alloc];
  double v27 = objc_msgSend_strokeIndexes(v51, v22, v23, v24, v25, v26);
  objc_msgSend_recognitionScore(v51, v28, v29, v30, v31, v32);
  double v34 = v33;
  objc_msgSend_bounds(v51, v35, v36, v37, v38, v39);
  uint64_t v46 = objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v21, v40, (uint64_t)v13, (uint64_t)v27, 0x1000000, v41, v34, v42, v43, v44, v45);

  objc_msgSend_addObject_(*(void **)(a1 + 32), v47, (uint64_t)v46, v48, v49, v50);
}

void sub_1C4A02630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A027E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0289C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A028B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A02928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A029E0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4A02A0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A02B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A02B40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A02B54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A02BD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A02C38(uint64_t a1)
{
  sub_1C49EB298(*(void *)a1, *(void **)(a1 + 16));
  id v2 = *(void **)(a1 + 8);
  if (v2)
  {
    id v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        id v2 = v3;
        id v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_1C49EB298(*(void *)a1, v2);
  }
  return a1;
}

void sub_1C4A02C90(void **a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t v9 = (char *)*a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)*a1) >> 3) >= __sz)
  {
    uint64_t v16 = (char *)a1[1];
    if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v9) >> 3) >= __sz)
    {
      if (a2 == a3)
      {
        uint64_t v19 = (char *)*a1;
      }
      else
      {
        uint64_t v19 = (char *)*a1;
        do
        {
          if ((char *)v6 != v9)
          {
            *((_DWORD *)v9 + 8) = *(_DWORD *)(v6 + 32);
            sub_1C4A02FEC(v9, *(uint64_t **)(v6 + 16), 0);
          }
          v6 += 40;
          v9 += 40;
          v19 += 40;
        }
        while (v6 != a3);
        uint64_t v16 = (char *)a1[1];
      }
      while (v16 != v19)
      {
        double v28 = (void *)*((void *)v16 - 3);
        if (v28)
        {
          do
          {
            uint64_t v29 = (void *)*v28;
            operator delete(v28);
            double v28 = v29;
          }
          while (v29);
        }
        uint64_t v31 = (void *)*((void *)v16 - 5);
        v16 -= 40;
        uint64_t v30 = v31;
        *(void *)uint64_t v16 = 0;
        if (v31) {
          operator delete(v30);
        }
      }
      a1[1] = v19;
    }
    else
    {
      uint64_t v17 = a2 + 8 * ((v16 - v9) >> 3);
      if (v16 != v9)
      {
        uint64_t v18 = 8 * ((v16 - v9) >> 3);
        do
        {
          if ((char *)v6 != v9)
          {
            *((_DWORD *)v9 + 8) = *(_DWORD *)(v6 + 32);
            sub_1C4A02FEC(v9, *(uint64_t **)(v6 + 16), 0);
          }
          v6 += 40;
          v9 += 40;
          v18 -= 40;
        }
        while (v18);
        uint64_t v9 = (char *)a1[1];
      }
      uint64_t v26 = v9;
      if (v17 != a3)
      {
        uint64_t v27 = 0;
        do
        {
          sub_1C49EBD04((uint64_t)&v9[v27], v17 + v27);
          v27 += 40;
        }
        while (v17 + v27 != a3);
        uint64_t v26 = &v9[v27];
      }
      a1[1] = v26;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = (char *)a1[1];
      uint64_t v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          uint64_t v12 = (void *)*((void *)v10 - 3);
          if (v12)
          {
            do
            {
              uint64_t v13 = (void *)*v12;
              operator delete(v12);
              uint64_t v12 = v13;
            }
            while (v13);
          }
          uint64_t v15 = (void *)*((void *)v10 - 5);
          v10 -= 40;
          uint64_t v14 = v15;
          *(void *)uint64_t v10 = 0;
          if (v15) {
            operator delete(v14);
          }
        }
        while (v10 != v9);
        uint64_t v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x666666666666666) {
      goto LABEL_49;
    }
    unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    uint64_t v21 = 2 * v20;
    if (2 * v20 <= __sz) {
      uint64_t v21 = __sz;
    }
    unint64_t v22 = v20 >= 0x333333333333333 ? 0x666666666666666 : v21;
    if (v22 > 0x666666666666666) {
LABEL_49:
    }
      sub_1C494A220();
    uint64_t v23 = 40 * v22;
    uint64_t v24 = (char *)operator new(40 * v22);
    *a1 = v24;
    a1[1] = v24;
    a1[2] = &v24[v23];
    if (v6 != a3)
    {
      uint64_t v25 = 0;
      do
      {
        sub_1C49EBD04((uint64_t)&v24[v25], v6 + v25);
        v25 += 40;
      }
      while (v6 + v25 != a3);
      v24 += v25;
    }
    a1[1] = v24;
  }
}

void sub_1C4A02FEC(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_7;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  uint64_t v8 = a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *(void *)(v8 + 16) = a2[2];
      *(_DWORD *)(v8 + 24) = *((_DWORD *)a2 + 6);
      uint64_t v9 = *(void *)v8;
      sub_1C4A03120(a1, (uint64_t *)v8);
      a2 = (uint64_t *)*a2;
      uint64_t v8 = v9;
      if (!v9) {
        goto LABEL_7;
      }
    }
    do
    {
      uint64_t v11 = *(void *)v8;
      operator delete((void *)v8);
      uint64_t v8 = v11;
    }
    while (v11);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      uint64_t v10 = operator new(0x20uLL);
      *(void *)uint64_t v10 = 0;
      v10[1] = *((_OWORD *)a2 + 1);
      *((void *)v10 + 1) = *((void *)v10 + 2);
      sub_1C4A03120(a1, (uint64_t *)v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_1C4A030D8(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    id v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1C4A030F8(_Unwind_Exception *a1)
{
}

void sub_1C4A0310C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1C4A03120(void *a1, uint64_t *a2)
{
  uint64_t v5 = a2 + 2;
  unint64_t v4 = a2[2];
  *(v5 - 1) = v4;
  uint64_t v6 = sub_1C4A03248((uint64_t)a1, v4, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  unint64_t v8 = *(v5 - 1);
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v7) {
      v8 %= *(void *)&v7;
    }
  }
  else
  {
    v8 &= *(void *)&v7 - 1;
  }
  if (!v6)
  {
    *a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v8) = a1 + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v10 = *(void *)(*a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v7) {
        v10 %= *(void *)&v7;
      }
    }
    else
    {
      v10 &= *(void *)&v7 - 1;
    }
LABEL_18:
    *(void *)(*a1 + 8 * v10) = a2;
    goto LABEL_19;
  }
  *a2 = *v6;
  uint64_t *v6 = (uint64_t)a2;
  if (*a2)
  {
    unint64_t v10 = *(void *)(*a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v7) {
        v10 %= *(void *)&v7;
      }
    }
    else
    {
      v10 &= *(void *)&v7 - 1;
    }
    if (v10 != v8) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++a1[3];
  return a2;
}

void *sub_1C4A03248(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (v6 && (float)(v8 * (float)v6) >= v7)
  {
    unint64_t v9 = v6 - 1;
    if ((v6 & (v6 - 1)) == 0) {
      goto LABEL_4;
    }
    goto LABEL_36;
  }
  BOOL v16 = 1;
  if (v6 >= 3) {
    BOOL v16 = (v6 & (v6 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v6);
  unint64_t v18 = vcvtps_u32_f32(v7 / v8);
  if (v17 <= v18) {
    size_t prime = v18;
  }
  else {
    size_t prime = v17;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  if (prime > v6) {
    goto LABEL_22;
  }
  if (prime < v6)
  {
    size_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 >= 3)
    {
      uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] <= 1uLL)
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          size_t v20 = v22;
        }
        if (prime <= v20) {
          size_t prime = v20;
        }
        if (prime >= v6) {
          goto LABEL_35;
        }
LABEL_22:
        sub_1C4A034D4(a1, prime);
        goto LABEL_35;
      }
    }
    size_t v23 = std::__next_prime(v20);
    if (prime <= v23) {
      size_t prime = v23;
    }
    if (prime < v6) {
      goto LABEL_22;
    }
  }
LABEL_35:
  unint64_t v6 = *(void *)(a1 + 8);
  unint64_t v9 = v6 - 1;
  if ((v6 & (v6 - 1)) == 0)
  {
LABEL_4:
    unint64_t v10 = *(void **)(*(void *)a1 + 8 * (v9 & a2));
    if (v10)
    {
      char v11 = 0;
      uint64_t v12 = *a3;
      while (1)
      {
        uint64_t result = v10;
        unint64_t v10 = (void *)*v10;
        if (!v10) {
          break;
        }
        uint64_t v15 = v10[1];
        if ((v15 & v9) != (v9 & a2)) {
          break;
        }
        if (v15 == a2)
        {
          char v13 = v11 & (v10[2] != v12);
          v11 |= v10[2] == v12;
          if (v13) {
            return result;
          }
        }
        else if (v11)
        {
          return result;
        }
      }
      return result;
    }
    return 0;
  }
LABEL_36:
  unint64_t v24 = a2;
  if (v6 <= a2) {
    unint64_t v24 = a2 % v6;
  }
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v24);
  if (!v25) {
    return 0;
  }
  unsigned __int8 v26 = 0;
  uint64_t v27 = *a3;
  while (1)
  {
    uint64_t result = v25;
    uint64_t v25 = (void *)*v25;
    if (!v25) {
      break;
    }
    unint64_t v29 = v25[1];
    unint64_t v30 = v29;
    if (v29 >= v6) {
      unint64_t v30 = v29 % v6;
    }
    if (v30 != v24) {
      break;
    }
    if (v29 == a2)
    {
      int v28 = v26 & (v25[2] != v27);
      v26 |= v25[2] == v27;
      if (v28 == 1) {
        return result;
      }
    }
    else if ((v26 & 1) == 1)
    {
      return result;
    }
  }
  return result;
}

void sub_1C4A034D4(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_1C4949AA8();
    }
    unint64_t v4 = operator new(8 * a2);
    uint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v8 = a1 + 16;
    float v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v9 = v7[1];
      unint64_t v10 = a2 - 1;
      if ((a2 & (a2 - 1)) != 0)
      {
        if (v9 >= a2) {
          v9 %= a2;
        }
        *(void *)(*(void *)a1 + 8 * v9) = v8;
        while (1)
        {
          unint64_t v18 = (void *)*v7;
          if (!*v7) {
            break;
          }
          unint64_t v19 = v18[1];
          if (v19 >= a2) {
            v19 %= a2;
          }
          if (v19 == v9)
          {
            float v7 = (void *)*v7;
          }
          else
          {
            size_t v20 = (void *)*v7;
            if (*(void *)(*(void *)a1 + 8 * v19))
            {
              do
              {
                uint8x8_t v21 = v20;
                size_t v20 = (void *)*v20;
              }
              while (v20 && v18[2] == v20[2]);
              *float v7 = v20;
              uint64_t v22 = 8 * v19;
              *uint8x8_t v21 = **(void **)(*(void *)a1 + v22);
              **(void **)(*(void *)a1 + v22) = v18;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v19) = v7;
              float v7 = v18;
              unint64_t v9 = v19;
            }
          }
        }
      }
      else
      {
        uint64_t v11 = v9 & v10;
        *(void *)(*(void *)a1 + 8 * v11) = v8;
        while (1)
        {
          uint64_t v12 = (void *)*v7;
          if (!*v7) {
            break;
          }
          uint64_t v13 = v12[1] & v10;
          if (v13 == v11)
          {
            float v7 = (void *)*v7;
          }
          else
          {
            uint64_t v14 = (void *)*v7;
            if (*(void *)(*(void *)a1 + 8 * v13))
            {
              do
              {
                uint64_t v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14 && v12[2] == v14[2]);
              *float v7 = v14;
              uint64_t v16 = 8 * v13;
              *uint64_t v15 = **(void **)(*(void *)a1 + v16);
              **(void **)(*(void *)a1 + v16) = v12;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v13) = v7;
              float v7 = v12;
              uint64_t v11 = v13;
            }
          }
        }
      }
    }
  }
  else
  {
    unint64_t v17 = *(void **)a1;
    *(void *)a1 = 0;
    if (v17) {
      operator delete(v17);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void sub_1C4A03780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0379C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A03A88(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1C4A03C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A03C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A03CF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A03DD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A03EB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A04454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A04490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A044A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A044B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A04538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A045F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A04600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A046D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CHOSLogForCategory(int a1)
{
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  id v2 = (void *)qword_1EA3C9F90[a1];
  return v2;
}

void sub_1C4A047C8()
{
  os_log_t v0 = os_log_create("com.apple.corehandwriting", "General");
  uint64_t v1 = (void *)qword_1EA3C9F90[0];
  qword_1EA3C9F90[0] = (uint64_t)v0;

  os_log_t v2 = os_log_create("com.apple.corehandwriting", "Recognizer");
  id v3 = (void *)qword_1EA3C9F98;
  qword_1EA3C9F98 = (uint64_t)v2;

  os_log_t v4 = os_log_create("com.apple.corehandwriting", "RecognitionSession");
  uint64_t v5 = (void *)qword_1EA3C9FA0;
  qword_1EA3C9FA0 = (uint64_t)v4;

  os_log_t v6 = os_log_create("com.apple.corehandwriting", "StrokeGrouping");
  float v7 = (void *)qword_1EA3C9FA8;
  qword_1EA3C9FA8 = (uint64_t)v6;

  os_log_t v8 = os_log_create("com.apple.corehandwriting", "ClutterFiltering");
  unint64_t v9 = (void *)qword_1EA3C9FB8;
  qword_1EA3C9FB8 = (uint64_t)v8;

  os_log_t v10 = os_log_create("com.apple.corehandwriting", "RemoteRecognizer");
  uint64_t v11 = (void *)qword_1EA3C9FB0;
  qword_1EA3C9FB0 = (uint64_t)v10;

  os_log_t v12 = os_log_create("com.apple.corehandwriting", "TextCorrectionRecognizer");
  uint64_t v13 = (void *)qword_1EA3C9FC0;
  qword_1EA3C9FC0 = (uint64_t)v12;

  os_log_t v14 = os_log_create("com.apple.corehandwriting", "CoreHandwritingSignPosts");
  uint64_t v15 = (void *)qword_1EA3C9FC8;
  qword_1EA3C9FC8 = (uint64_t)v14;

  os_log_t v16 = os_log_create("com.apple.corehandwriting", "Synthesizer");
  unint64_t v17 = (void *)qword_1EA3C9FD8;
  qword_1EA3C9FD8 = (uint64_t)v16;

  os_log_t v18 = os_log_create("com.apple.corehandwriting", "TextTransform");
  unint64_t v19 = (void *)qword_1EA3C9FE0;
  qword_1EA3C9FE0 = (uint64_t)v18;

  os_log_t v20 = os_log_create("com.apple.corehandwriting", "LineWrapping");
  uint8x8_t v21 = (void *)qword_1EA3C9FE8;
  qword_1EA3C9FE8 = (uint64_t)v20;

  os_log_t v22 = os_log_create("com.apple.corehandwriting", "StrokeClassification");
  size_t v23 = (void *)qword_1EA3C9FF0;
  qword_1EA3C9FF0 = (uint64_t)v22;

  os_log_t v24 = os_log_create("com.apple.corehandwriting", "SessionTracker");
  uint64_t v25 = (void *)qword_1EA3C9FF8;
  qword_1EA3C9FF8 = (uint64_t)v24;
}

uint64_t castCHRemoteSynthesisOptionInventoryRequestTypeFromNSInteger(uint64_t a1)
{
  uint64_t v1 = 2;
  if (a1 < 2) {
    uint64_t v1 = a1;
  }
  return v1 & ~(v1 >> 63);
}

void sub_1C4A04BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25)
{
  uint64_t v31 = v26;
  uint64_t v32 = v25;

  _Unwind_Resume(a1);
}

void sub_1C4A04C98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A04EA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A04EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0503C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4A05488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_1C4A055CC()
{
  *(void *)(v1 - 128) = v0;
  JUMPOUT(0x1C4A0558CLL);
}

void sub_1C4A05898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A058C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A05AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,void *a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_1C4A05D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A05FEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4A06594(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = sub_1C4A06658;
  v13[3] = &unk_1E64E2270;
  void v13[4] = *(void *)(a1 + 32);
  os_log_t v6 = objc_msgSend_ch_descriptionWithSeparator_filterBlock_(a2, (const char *)a2, @", ", (uint64_t)v13, a5, a6);
  uint64_t v11 = objc_msgSend_stringWithFormat_(NSString, v7, @"  %@", v8, v9, v10, v6);

  return v11;
}

id sub_1C4A06658(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  uint64_t v9 = v3;
  if (v2)
  {
    uint64_t v10 = NSString;
    uint64_t v11 = objc_msgSend_string(v3, v4, v5, v6, v7, v8);
    os_log_t v16 = objc_msgSend_stringWithFormat_(v10, v12, @"[%p \"%@\"", v13, v14, v15, v9, v11);

    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v17 = v9;
      objc_msgSend_recognitionScore(v17, v18, v19, v20, v21, v22);
      uint64_t v24 = v23;
      objc_msgSend_combinedScore(v17, v25, v26, v27, v28, v29);
      uint64_t v31 = v30;
      objc_msgSend_modelScore(v17, v32, v33, v34, v35, v36);
      uint64_t v38 = v37;

      objc_msgSend_stringByAppendingFormat_(v16, v39, @" %.2f, %.2f, %.2f]", v40, v41, v42, v24, v31, v38);
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        uint64_t v53 = objc_msgSend_stringByAppendingString_(v16, v43, @"]", v45, v46, v47);
        goto LABEL_8;
      }
      objc_msgSend_score(v9, v43, v44, v45, v46, v47);
      objc_msgSend_stringByAppendingFormat_(v16, v48, @" %.2f]", v49, v50, v51, v52, v56);
    uint64_t v53 = };
LABEL_8:
    double v54 = (void *)v53;

    goto LABEL_9;
  }
  double v54 = 0;
LABEL_9:

  return v54;
}

void sub_1C4A06894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A068AC(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v30 = a2;
  uint64_t v12 = objc_msgSend_count(v30, v7, v8, v9, v10, v11);
  if (v12 == *(void *)(a1 + 56))
  {
    unint64_t v17 = *(void *)(a1 + 48);
    if (v17 >= v17 + v12)
    {
LABEL_6:
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3;
      *a4 = 1;
    }
    else
    {
      uint64_t v18 = 0;
      while (1)
      {
        uint64_t v19 = objc_msgSend_objectAtIndex_(v30, v13, v18, v14, v15, v16);
        uint64_t v24 = objc_msgSend_objectAtIndex_(*(void **)(a1 + 32), v20, v17 + v18, v21, v22, v23);
        int isEquivalentToToken = objc_msgSend_isEquivalentToToken_(v19, v25, (uint64_t)v24, v26, v27, v28);

        if (!isEquivalentToToken) {
          break;
        }
        ++v18;
        if (v17 + v18 >= *(void *)(a1 + 56) + *(void *)(a1 + 48)) {
          goto LABEL_6;
        }
      }
    }
  }
}

void sub_1C4A06A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A06A90(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = objc_msgSend_firstObject(a2, (const char *)a2, a3, (uint64_t)a4, a5, a6);
  int isEquivalentToToken = objc_msgSend_isEquivalentToToken_(v8, v9, *(void *)(a1 + 32), v10, v11, v12);

  if (isEquivalentToToken)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
}

uint64_t sub_1C4A07784(uint64_t a1, void *a2, void *a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  id v5 = a3;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v6, (uint64_t)&v39, (uint64_t)v44, 16, v7);
  double v14 = 0.0;
  double v15 = 0.0;
  if (v8)
  {
    uint64_t v16 = v8;
    uint64_t v17 = *(void *)v40;
    do
    {
      uint64_t v18 = 0;
      do
      {
        if (*(void *)v40 != v17) {
          objc_enumerationMutation(v4);
        }
        objc_msgSend_combinedScore(*(void **)(*((void *)&v39 + 1) + 8 * v18), v9, v10, v11, v12, v13);
        double v15 = v15 + v19;
        ++v18;
      }
      while (v16 != v18);
      uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v9, (uint64_t)&v39, (uint64_t)v44, 16, v13);
    }
    while (v16);
  }
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v20 = v5;
  uint64_t v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v21, (uint64_t)&v35, (uint64_t)v43, 16, v22);
  if (v23)
  {
    uint64_t v29 = v23;
    uint64_t v30 = *(void *)v36;
    double v14 = 0.0;
    do
    {
      uint64_t v31 = 0;
      do
      {
        if (*(void *)v36 != v30) {
          objc_enumerationMutation(v20);
        }
        objc_msgSend_combinedScore(*(void **)(*((void *)&v35 + 1) + 8 * v31), v24, v25, v26, v27, v28, (void)v35);
        double v14 = v14 + v32;
        ++v31;
      }
      while (v29 != v31);
      uint64_t v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v24, (uint64_t)&v35, (uint64_t)v43, 16, v28);
    }
    while (v29);
  }

  if (v15 < v14) {
    uint64_t v33 = -1;
  }
  else {
    uint64_t v33 = v15 > v14;
  }

  return v33;
}

uint64_t sub_1C4A0794C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  id v5 = a3;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v6, (uint64_t)&v39, (uint64_t)v44, 16, v7);
  double v14 = 0.0;
  double v15 = 0.0;
  if (v8)
  {
    uint64_t v16 = v8;
    uint64_t v17 = *(void *)v40;
    do
    {
      uint64_t v18 = 0;
      do
      {
        if (*(void *)v40 != v17) {
          objc_enumerationMutation(v4);
        }
        objc_msgSend_score(*(void **)(*((void *)&v39 + 1) + 8 * v18), v9, v10, v11, v12, v13);
        double v15 = v15 + v19;
        ++v18;
      }
      while (v16 != v18);
      uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v9, (uint64_t)&v39, (uint64_t)v44, 16, v13);
    }
    while (v16);
  }
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v20 = v5;
  uint64_t v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v21, (uint64_t)&v35, (uint64_t)v43, 16, v22);
  if (v23)
  {
    uint64_t v29 = v23;
    uint64_t v30 = *(void *)v36;
    double v14 = 0.0;
    do
    {
      uint64_t v31 = 0;
      do
      {
        if (*(void *)v36 != v30) {
          objc_enumerationMutation(v20);
        }
        objc_msgSend_score(*(void **)(*((void *)&v35 + 1) + 8 * v31), v24, v25, v26, v27, v28, (void)v35);
        double v14 = v14 + v32;
        ++v31;
      }
      while (v29 != v31);
      uint64_t v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v24, (uint64_t)&v35, (uint64_t)v43, 16, v28);
    }
    while (v29);
  }

  if (v15 < v14) {
    uint64_t v33 = -1;
  }
  else {
    uint64_t v33 = v15 > v14;
  }

  return v33;
}

void sub_1C4A07BA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A07C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A07FA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A080B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0835C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v7 = (id)qword_1EA3C9FC8;
  uint64_t v8 = v7;
  os_signpost_id_t v9 = *(void *)(a1 + 40);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    LOWORD(v24) = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v8, OS_SIGNPOST_INTERVAL_END, v9, "CHContextLookupQuery_atLocation", "", (uint8_t *)&v24, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v10 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v24) = 0;
    _os_log_impl(&dword_1C492D000, v10, OS_LOG_TYPE_DEFAULT, "END \"CHContextLookupQuery_atLocation\"", (uint8_t *)&v24, 2u);
  }

  if (qword_1EA3CA000 != -1)
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v11 = (id)qword_1EA3C9F90[0];
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v11 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
LABEL_12:
    uint64_t v17 = objc_msgSend_count(v5, v12, v13, v14, v15, v16);
    uint64_t v23 = objc_msgSend_length(v6, v18, v19, v20, v21, v22);
    int v24 = 134218240;
    uint64_t v25 = v17;
    __int16 v26 = 2048;
    uint64_t v27 = v23;
    _os_log_impl(&dword_1C492D000, v11, OS_LOG_TYPE_DEFAULT, "CHContextLookupQuery_atLocation returning nt strokes %ld, text transcription length %ld", (uint8_t *)&v24, 0x16u);
  }
LABEL_13:

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4A087DC(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v10 = (id)qword_1EA3C9FC8;
  uint64_t v11 = v10;
  os_signpost_id_t v12 = *(void *)(a1 + 40);
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    LOWORD(v45) = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v11, OS_SIGNPOST_INTERVAL_END, v12, "CHContextLookupQuery_withPath", "", (uint8_t *)&v45, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v13 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v45) = 0;
    _os_log_impl(&dword_1C492D000, v13, OS_LOG_TYPE_DEFAULT, "END \"CHContextLookupQuery_withPath\"", (uint8_t *)&v45, 2u);
  }

  uint64_t v14 = [CHContextualTextResults alloc];
  uint64_t v19 = objc_msgSend_initWithTextResults_(v14, v15, (uint64_t)v9, v16, v17, v18);

  if (qword_1EA3CA000 != -1)
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v20 = (id)qword_1EA3C9F90[0];
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v20 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
LABEL_12:
    uint64_t v26 = objc_msgSend_count(v7, v21, v22, v23, v24, v25);
    uint64_t v32 = objc_msgSend_count(v8, v27, v28, v29, v30, v31);
    long long v38 = objc_msgSend_textResults(v19, v33, v34, v35, v36, v37);
    uint64_t v44 = objc_msgSend_count(v38, v39, v40, v41, v42, v43);
    int v45 = 134218496;
    uint64_t v46 = v26;
    __int16 v47 = 2048;
    uint64_t v48 = v32;
    __int16 v49 = 2048;
    uint64_t v50 = v44;
    _os_log_impl(&dword_1C492D000, v20, OS_LOG_TYPE_DEFAULT, "CHContextLookupQuery_withPath returning coveredStrokes %ld, ntStrokes %ld, textResults %ld", (uint8_t *)&v45, 0x20u);
  }
LABEL_13:

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4A08CD8(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v10 = (id)qword_1EA3C9FC8;
  uint64_t v11 = v10;
  os_signpost_id_t v12 = *(void *)(a1 + 48);
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    LOWORD(v51) = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v11, OS_SIGNPOST_INTERVAL_END, v12, "CHContextLookupQuery_withSelectedStrokes", "", (uint8_t *)&v51, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v13 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v51) = 0;
    _os_log_impl(&dword_1C492D000, v13, OS_LOG_TYPE_DEFAULT, "END \"CHContextLookupQuery_withSelectedStrokes\"", (uint8_t *)&v51, 2u);
  }

  uint64_t v14 = [CHContextualTextResults alloc];
  uint64_t v19 = objc_msgSend_initWithTextResults_(v14, v15, (uint64_t)v9, v16, v17, v18);

  if (qword_1EA3CA000 != -1)
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v20 = (id)qword_1EA3C9F90[0];
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v20 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
LABEL_12:
    uint64_t v26 = objc_msgSend_count(*(void **)(a1 + 32), v21, v22, v23, v24, v25);
    uint64_t v32 = objc_msgSend_count(v7, v27, v28, v29, v30, v31);
    uint64_t v38 = objc_msgSend_count(v8, v33, v34, v35, v36, v37);
    uint64_t v44 = objc_msgSend_textResults(v19, v39, v40, v41, v42, v43);
    uint64_t v50 = objc_msgSend_count(v44, v45, v46, v47, v48, v49);
    int v51 = 134218752;
    uint64_t v52 = v26;
    __int16 v53 = 2048;
    uint64_t v54 = v32;
    __int16 v55 = 2048;
    uint64_t v56 = v38;
    __int16 v57 = 2048;
    uint64_t v58 = v50;
    _os_log_impl(&dword_1C492D000, v20, OS_LOG_TYPE_DEFAULT, "CHContextLookupQuery_withSelectedStrokes with %ld selected strokes returning coveredStrokes %ld, ntStrokes %ld, textResults %ld", (uint8_t *)&v51, 0x2Au);
  }
LABEL_13:

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1C4A091D4(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  id v77 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  os_signpost_id_t v12 = (id)qword_1EA3C9FC8;
  uint64_t v13 = v12;
  os_signpost_id_t v14 = *(void *)(a1 + 48);
  if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v13, OS_SIGNPOST_INTERVAL_END, v14, "CHContextLookupQuery_withPath", "", buf, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v15 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C492D000, v15, OS_LOG_TYPE_DEFAULT, "END \"CHContextLookupQuery_withPath\"", buf, 2u);
  }

  uint64_t v21 = objc_msgSend_recognitionSession(*(void **)(a1 + 32), v16, v17, v18, v19, v20);
  uint64_t v26 = objc_msgSend_structuredContextualTextResultsWithTextResults_(v21, v22, (uint64_t)v10, v23, v24, v25);

  uint64_t v32 = objc_msgSend_recognitionSession(*(void **)(a1 + 32), v27, v28, v29, v30, v31);
  uint64_t v37 = objc_msgSend_structuredContextualTextResultsWithTextResults_(v32, v33, (uint64_t)v11, v34, v35, v36);

  if (qword_1EA3CA000 != -1)
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v38 = (id)qword_1EA3C9F90[0];
    if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v38 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
LABEL_12:
    uint64_t v75 = objc_msgSend_count(v77, v39, v40, v41, v42, v43);
    uint64_t v76 = a1;
    id v49 = v9;
    uint64_t v50 = objc_msgSend_count(v9, v44, v45, v46, v47, v48);
    uint64_t v56 = objc_msgSend_count(v26, v51, v52, v53, v54, v55);
    uint64_t v62 = objc_msgSend_count(v10, v57, v58, v59, v60, v61);
    uint64_t v68 = objc_msgSend_count(v37, v63, v64, v65, v66, v67);
    uint64_t v74 = objc_msgSend_count(v11, v69, v70, v71, v72, v73);
    *(_DWORD *)buf = 134219264;
    uint64_t v79 = v75;
    __int16 v80 = 2048;
    uint64_t v81 = v50;
    id v9 = v49;
    a1 = v76;
    __int16 v82 = 2048;
    uint64_t v83 = v56;
    __int16 v84 = 2048;
    uint64_t v85 = v62;
    __int16 v86 = 2048;
    uint64_t v87 = v68;
    __int16 v88 = 2048;
    uint64_t v89 = v74;
    _os_log_impl(&dword_1C492D000, v38, OS_LOG_TYPE_DEFAULT, "CHContextLookupQuery_withPath returning coveredStrokes %ld, ntStrokes %ld, textResults %ld (%ld unstructured), surroundingResults %ld (%ld unstructured)", buf, 0x3Eu);
  }
LABEL_13:

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1C4A09764(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  id v82 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  os_signpost_id_t v12 = (id)qword_1EA3C9FC8;
  uint64_t v13 = v12;
  os_signpost_id_t v14 = *(void *)(a1 + 56);
  if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v13, OS_SIGNPOST_INTERVAL_END, v14, "CHContextLookupQuery_withSelectedStrokes", "", buf, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v15 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C492D000, v15, OS_LOG_TYPE_DEFAULT, "END \"CHContextLookupQuery_withSelectedStrokes\"", buf, 2u);
  }

  uint64_t v21 = objc_msgSend_recognitionSession(*(void **)(a1 + 32), v16, v17, v18, v19, v20);
  uint64_t v26 = objc_msgSend_structuredContextualTextResultsWithTextResults_(v21, v22, (uint64_t)v10, v23, v24, v25);

  uint64_t v32 = objc_msgSend_recognitionSession(*(void **)(a1 + 32), v27, v28, v29, v30, v31);
  uint64_t v37 = objc_msgSend_structuredContextualTextResultsWithTextResults_(v32, v33, (uint64_t)v11, v34, v35, v36);

  if (qword_1EA3CA000 != -1)
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v38 = (id)qword_1EA3C9F90[0];
    if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v38 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
LABEL_12:
    uint64_t v81 = objc_msgSend_count(*(void **)(a1 + 40), v39, v40, v41, v42, v43);
    uint64_t v80 = objc_msgSend_count(v82, v44, v45, v46, v47, v48);
    uint64_t v79 = objc_msgSend_count(v9, v49, v50, v51, v52, v53);
    uint64_t v59 = objc_msgSend_count(v26, v54, v55, v56, v57, v58);
    uint64_t v65 = objc_msgSend_count(v10, v60, v61, v62, v63, v64);
    uint64_t v71 = a1;
    uint64_t v72 = objc_msgSend_count(v37, v66, v67, v68, v69, v70);
    uint64_t v78 = objc_msgSend_count(v11, v73, v74, v75, v76, v77);
    *(_DWORD *)buf = 134219520;
    uint64_t v84 = v81;
    __int16 v85 = 2048;
    uint64_t v86 = v80;
    __int16 v87 = 2048;
    uint64_t v88 = v79;
    __int16 v89 = 2048;
    uint64_t v90 = v59;
    __int16 v91 = 2048;
    uint64_t v92 = v65;
    __int16 v93 = 2048;
    uint64_t v94 = v72;
    a1 = v71;
    __int16 v95 = 2048;
    uint64_t v96 = v78;
    _os_log_impl(&dword_1C492D000, v38, OS_LOG_TYPE_DEFAULT, "CHContextLookupQuery_withSelectedStrokes with %ld selected strokes returning coveredStrokes %ld, ntStrokes %ld, textResults %ld (%ld unstructured), surroundingResults %ld (%ld unstructured)", buf, 0x48u);
  }
LABEL_13:

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1C4A09C58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A09C84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0A104(_Unwind_Exception *a1)
{
  id v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1C4A0A36C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0A3FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0A51C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0A530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0A620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0ABAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0AF7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0B254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0B2B0()
{
}

void sub_1C4A0B2B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0B2CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0B2E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0B360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0B57C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0B8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0B99C()
{
}

void sub_1C4A0B9A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0B9C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4A0B9D4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v6 = objc_msgSend_localeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  return v6;
}

id sub_1C4A0BA04(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v6 = objc_msgSend_stringWithFormat_(NSString, a2, @"%p", a4, a5, a6, a2);
  return v6;
}

void sub_1C4A0BDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v24 = v23;

  _Unwind_Resume(a1);
}

__n128 sub_1C4A0BE1C(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1C4A0BE40(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1C4A0BE58(uint64_t a1, const void *a2, uint64_t a3)
{
  id v4 = 0;
  id v5 = 0;
  if (a3 >= 0) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = a3 + 3;
  }
  if ((unint64_t)(a3 + 3) >= 7)
  {
    if (a3 <= -4) {
      sub_1C494A220();
    }
    id v5 = (char *)operator new(v6 & 0xFFFFFFFFFFFFFFFCLL);
    id v4 = &v5[4 * (v6 >> 2)];
    memcpy(v5, a2, v6 & 0xFFFFFFFFFFFFFFFCLL);
  }
  id v8 = *(void **)(*(void *)(a1 + 32) + 8);
  id v9 = (void *)v8[6];
  if (v9)
  {
    v8[7] = v9;
    operator delete(v9);
    v8[6] = 0;
    v8[7] = 0;
    v8[8] = 0;
  }
  v8[6] = v5;
  v8[7] = v4;
  v8[8] = v4;
}

void sub_1C4A0BF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C4A0C0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  _Block_object_dispose(&a14, 8);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C4A0C134(uint64_t a1, void *a2, uint64_t a3)
{
  id v11 = a2;
  objc_msgSend_floatValue(v11, v5, v6, v7, v8, v9);
  *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48) + 4 * a3) = v10;
}

void sub_1C4A0C190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0C248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0C25C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0C8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A0C954()
{
  return 0;
}

void sub_1C4A0CA38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0CA64(_Unwind_Exception *a1)
{
  id v4 = v2;

  _Unwind_Resume(a1);
}

void sub_1C4A0CA80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0CA94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0CB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    operator delete(__p);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_1C4A0CD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v22 = a16;
    if (!a16)
    {
LABEL_3:
      uint64_t v23 = a19;
      if (!a19) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v22 = a16;
    if (!a16) {
      goto LABEL_3;
    }
  }
  operator delete(v22);
  uint64_t v23 = a19;
  if (!a19)
  {
LABEL_4:

    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v23);

  _Unwind_Resume(a1);
}

void sub_1C4A0CE28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0CE38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0CE48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0D040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v22 = a16;
    if (!a16)
    {
LABEL_3:
      uint64_t v23 = a19;
      if (!a19) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v22 = a16;
    if (!a16) {
      goto LABEL_3;
    }
  }
  operator delete(v22);
  uint64_t v23 = a19;
  if (!a19)
  {
LABEL_4:

    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v23);

  _Unwind_Resume(a1);
}

void sub_1C4A0D0D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0D0E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0D0F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0D21C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0D2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C4A0D394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0D58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0D70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0D724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0D81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C4A0D864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0D974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A0D9B8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C4A0DA20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0DC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0DD0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0DD20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0DF08(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C4A0E05C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], a2, a3, a4, a5, a6);
  uint64_t v11 = objc_msgSend_containerURLForSecurityApplicationGroupIdentifier_(v6, v7, @"group.com.apple.corehandwriting", v8, v9, v10);
  os_signpost_id_t v12 = (void *)qword_1EA3C9168;
  qword_1EA3C9168 = v11;

  if (!qword_1EA3C9168)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v13 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      int v14 = 138412290;
      uint64_t v15 = @"group.com.apple.corehandwriting";
      _os_log_impl(&dword_1C492D000, v13, OS_LOG_TYPE_FAULT, "NSURL for group container %@ not found", (uint8_t *)&v14, 0xCu);
    }
  }
}

void sub_1C4A0E174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0E264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0E27C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0E290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0E318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0E32C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0E3AC()
{
  uint64_t v0 = (void *)qword_1EA3C9178;
  qword_1EA3C9178 = @"0.0.8";
}

void sub_1C4A0E468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0E488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0E508(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_ch_mathCharSet(MEMORY[0x1E4F28B88], a2, a3, a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C9188;
  qword_1EA3C9188 = v6;
}

void sub_1C4A0E5D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0E7E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0E890(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4A0E8B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0E918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0E92C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0EFBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0F1E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0F6C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0F848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0F860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0F964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A0F984(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4A0F994(uint64_t a1)
{
}

void sub_1C4A0F99C(uint64_t a1)
{
}

uint64_t sub_1C4A0FA20(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  uint64_t v7 = objc_msgSend_styles(*(void **)(a1 + 32), a2, a3, a4, a5, a6, 0);
  uint64_t v13 = objc_msgSend_allValues(v7, v8, v9, v10, v11, v12);

  uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v35, (uint64_t)v39, 16, v15);
  if (v21)
  {
    uint64_t v22 = *(void *)v36;
    do
    {
      uint64_t v23 = 0;
      do
      {
        if (*(void *)v36 != v22) {
          objc_enumerationMutation(v13);
        }
        uint64_t v24 = *(void **)(*((void *)&v35 + 1) + 8 * v23);
        uint64_t v25 = objc_msgSend_currentSamplingTimestep(*(void **)(a1 + 32), v16, v17, v18, v19, v20);
        objc_msgSend_shiftTimestepsByOffset_(v24, v26, v25, v27, v28, v29);
        ++v23;
      }
      while (v21 != v23);
      uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v16, (uint64_t)&v35, (uint64_t)v39, 16, v20);
    }
    while (v21);
  }

  return objc_msgSend_setCurrentSamplingTimestep_(*(void **)(a1 + 32), v30, 0, v31, v32, v33);
}

void sub_1C4A0FB4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0FC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0FC28(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void **)(a1 + 32);
  objc_msgSend_transcription(*(void **)(a1 + 40), a2, a3, a4, a5, a6);
  id v38 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v13 = objc_msgSend_strokeIdentifiers(*(void **)(a1 + 40), v8, v9, v10, v11, v12);
  LODWORD(v7) = objc_msgSend_containsSampleWithTranscription_strokeIdentifiers_(v7, v14, (uint64_t)v38, (uint64_t)v13, v15, v16);

  if (v7)
  {
    objc_msgSend_styles(*(void **)(a1 + 32), v17, v18, v19, v20, v21);
    id v39 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v27 = objc_msgSend_strokeIdentifiers(*(void **)(a1 + 40), v22, v23, v24, v25, v26);
    uint64_t v32 = objc_msgSend_objectForKeyedSubscript_(v39, v28, (uint64_t)v27, v29, v30, v31);
    objc_msgSend_incrementSamplingCount(v32, v33, v34, v35, v36, v37);
  }
}

void sub_1C4A0FD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0FD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0FD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0FD4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0FD64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0FE84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0FE9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0FEB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0FEC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A0FEE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A105B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A10624(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_copy(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

void sub_1C4A106DC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_hasInventoryChanged(*(void **)(a1 + 32), a2, a3, a4, a5, a6))
  {
    objc_msgSend_removeStyleSamplesIfNeeded(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
    objc_msgSend_resetCurrentSamplingTimestep(*(void **)(a1 + 32), v12, v13, v14, v15, v16);
    if (objc_msgSend_save(*(void **)(a1 + 32), v17, v18, v19, v20, v21))
    {
      objc_msgSend_setHasInventoryChanged_(*(void **)(a1 + 32), v22, 0, v23, v24, v25);
      uint64_t v31 = objc_msgSend_now(MEMORY[0x1E4F1C9C8], v26, v27, v28, v29, v30);
      objc_msgSend_setLastSavedDate_(*(void **)(a1 + 32), v32, (uint64_t)v31, v33, v34, v35);

      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v36 = (id)qword_1EA3C9FD8;
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v42 = objc_msgSend_lastSavedDate(*(void **)(a1 + 32), v37, v38, v39, v40, v41);
        int v43 = 138412290;
        uint64_t v44 = v42;
        _os_log_impl(&dword_1C492D000, v36, OS_LOG_TYPE_DEBUG, "style inventory last saved on: %@)", (uint8_t *)&v43, 0xCu);
      }
    }
  }
}

void sub_1C4A10824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A10834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1093C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A1096C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_styles(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  objc_msgSend_objectForKeyedSubscript_(v7, v8, *(void *)(a1 + 40), v9, v10, v11);
  id v24 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v17 = v24;
  if (v24)
  {
    uint64_t v18 = *(void **)(a1 + 48);
    uint64_t v19 = objc_msgSend_transcription(v24, v12, v13, v14, v15, v16);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = objc_msgSend_isEqualToString_(v18, v20, (uint64_t)v19, v21, v22, v23);

    uint64_t v17 = v24;
  }
}

void sub_1C4A10A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A10A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A10A34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A10AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A10AFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A10B0C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_styles(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  uint64_t v13 = objc_msgSend_allValues(v7, v8, v9, v10, v11, v12);
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  void v20[2] = sub_1C4A10BF4;
  v20[3] = &unk_1E64E2488;
  id v14 = *(id *)(a1 + 40);
  uint64_t v15 = *(void *)(a1 + 32);
  id v21 = v14;
  uint64_t v22 = v15;
  objc_msgSend_enumerateObjectsUsingBlock_(v13, v16, (uint64_t)v20, v17, v18, v19);
}

void sub_1C4A10BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4A10BE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A10BF4(uint64_t a1, void *a2)
{
  id v18 = a2;
  uint64_t v8 = objc_msgSend_strokeIdentifiers(v18, v3, v4, v5, v6, v7);
  int v13 = objc_msgSend_intersectsSet_(v8, v9, *(void *)(a1 + 32), v10, v11, v12);

  if (v13) {
    objc_msgSend__unsafeRemoveSample_(*(void **)(a1 + 40), v14, (uint64_t)v18, v15, v16, v17);
  }
}

void sub_1C4A10C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A10C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A10D88(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_styles(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  objc_msgSend_removeAllObjects(v7, v8, v9, v10, v11, v12);

  id v18 = objc_msgSend_sampleCountByCharacter(*(void **)(a1 + 32), v13, v14, v15, v16, v17);
  objc_msgSend_removeAllObjects(v18, v19, v20, v21, v22, v23);

  uint64_t v29 = *(void **)(a1 + 32);
  return objc_msgSend_save(v29, v24, v25, v26, v27, v28);
}

void sub_1C4A10DEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A10DFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A11330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A114BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A114D4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend__unsafeAddSample_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a4, a5, a6);
}

void sub_1C4A11574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1158C(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v2 = *(id *)(a1 + 32);
  uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v12, (uint64_t)v16, 16, v4);
  if (v9)
  {
    uint64_t v10 = *(void *)v13;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v13 != v10) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend__unsafeAddSample_(*(void **)(a1 + 40), v5, *(void *)(*((void *)&v12 + 1) + 8 * v11++), v6, v7, v8, (void)v12);
      }
      while (v9 != v11);
      uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v12, (uint64_t)v16, 16, v8);
    }
    while (v9);
  }
}

void sub_1C4A11680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A11734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A1174C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend__unsafeRemoveSample_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a4, a5, a6);
}

void sub_1C4A11890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A118A4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4A118C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A118D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A119D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4A119F0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = (void *)MEMORY[0x1E4F1CAD0];
  objc_msgSend_sampleCountByCharacter(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  id v21 = (id)objc_claimAutoreleasedReturnValue();
  long long v13 = objc_msgSend_allKeys(v21, v8, v9, v10, v11, v12);
  uint64_t v18 = objc_msgSend_setWithArray_(v7, v14, (uint64_t)v13, v15, v16, v17);
  uint64_t v19 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = v18;
}

void sub_1C4A11A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A11A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A11C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A120A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4A122B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A126A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A126B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A126C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A126DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A126F0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4A1270C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A12720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A12734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A12744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A12844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C4A12874(void **a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_set(MEMORY[0x1E4F1CA80], a2, a3, a4, a5, a6);
  uint64_t v8 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v14 = objc_msgSend_tokenColumnCount(a1[4], v9, v10, v11, v12, v13);
  uint64_t v19 = objc_msgSend_arrayWithCapacity_(v8, v15, v14, v16, v17, v18);
  uint64_t v20 = a1[4];
  uint64_t v37 = MEMORY[0x1E4F143A8];
  uint64_t v38 = 3221225472;
  uint64_t v39 = sub_1C4A12A10;
  uint64_t v40 = &unk_1E64E24B0;
  id v41 = v20;
  id v21 = a1[5];
  uint64_t v22 = a1[6];
  id v42 = v21;
  int v43 = v22;
  id v23 = v7;
  id v44 = v23;
  id v45 = a1[7];
  id v24 = v19;
  id v46 = v24;
  objc_msgSend_enumerateTokensInTopTranscriptionPathWithBlock_(v41, v25, (uint64_t)&v37, v26, v27, v28);
  objc_msgSend_removeSamplesContainingStrokeIdentifiers_(a1[6], v29, (uint64_t)v23, v30, v31, v32, v37, v38, v39, v40);
  objc_msgSend_addSamplesWithArray_(a1[6], v33, (uint64_t)v24, v34, v35, v36);
}

void sub_1C4A129C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C4A12A00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A12A10(uint64_t a1, void *a2)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  int isSingleTokenResult = objc_msgSend_isSingleTokenResult(*(void **)(a1 + 32), v4, v5, v6, v7, v8);
  uint64_t v15 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v16 = *(void **)(a1 + 40);
  if (isSingleTokenResult)
  {
    uint64_t v22 = objc_msgSend_setWithArray_(MEMORY[0x1E4F1CAD0], v10, *(void *)(a1 + 40), v12, v13, v14);
  }
  else
  {
    id v23 = objc_msgSend_strokeIndexes(v3, v10, v11, v12, v13, v14);
    uint64_t v28 = objc_msgSend_objectsAtIndexes_(v16, v24, (uint64_t)v23, v25, v26, v27);
    uint64_t v22 = objc_msgSend_setWithArray_(v15, v29, (uint64_t)v28, v30, v31, v32);
  }
  uint64_t v33 = *(void **)(a1 + 48);
  uint64_t v34 = objc_msgSend_string(v3, v17, v18, v19, v20, v21);
  LODWORD(v33) = objc_msgSend_containsSampleWithTranscription_strokeIdentifiers_(v33, v35, (uint64_t)v34, (uint64_t)v22, v36, v37);

  if (v33)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    id v42 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v48 = objc_msgSend_string(v3, v43, v44, v45, v46, v47);
      int v95 = 138739971;
      uint64_t v96 = v48;
      _os_log_impl(&dword_1C492D000, v42, OS_LOG_TYPE_DEBUG, "Inventory data ingestion: token already in the inventory. token string: %{sensitive}@", (uint8_t *)&v95, 0xCu);
    }
    goto LABEL_20;
  }
  objc_msgSend_unionSet_(*(void **)(a1 + 56), v38, (uint64_t)v22, v39, v40, v41);
  if (objc_msgSend_shouldBypassGating(CHSynthesisStyleInventory, v49, v50, v51, v52, v53))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v58 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v64 = objc_msgSend_string(v3, v59, v60, v61, v62, v63);
      int v95 = 138739971;
      uint64_t v96 = v64;
      _os_log_impl(&dword_1C492D000, v58, OS_LOG_TYPE_DEBUG, "Inventory data ingestion: bypassing gating for text token: %{sensitive}@", (uint8_t *)&v95, 0xCu);
    }
    goto LABEL_16;
  }
  if (objc_msgSend_isTokenAcceptable_(*(void **)(a1 + 48), v54, (uint64_t)v3, v55, v56, v57))
  {
LABEL_16:
    int v70 = objc_msgSend_isSingleTokenResult(*(void **)(a1 + 32), v65, v66, v67, v68, v69);
    uint64_t v76 = *(void **)(a1 + 64);
    if (v70)
    {
      id v42 = v76;
    }
    else
    {
      id v82 = objc_msgSend_strokeIndexes(v3, v71, v72, v73, v74, v75);
      id v42 = objc_msgSend_drawingWithStrokesFromIndexSet_(v76, v83, (uint64_t)v82, v84, v85, v86);
    }
    __int16 v87 = objc_msgSend_string(v3, v77, v78, v79, v80, v81);
    uint64_t v90 = objc_msgSend_sampleWithTranscription_drawing_strokeIdentifiers_(CHSynthesisStyleSample, v88, (uint64_t)v87, (uint64_t)v42, (uint64_t)v22, v89);

    objc_msgSend_addObject_(*(void **)(a1 + 72), v91, (uint64_t)v90, v92, v93, v94);
LABEL_20:
  }
}

void sub_1C4A12D04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A12E08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A12E1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A12F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C4A12F48(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = objc_msgSend_preferredTranscription(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  if (objc_msgSend_isTrivialTextTranscriptionAvailableForLatex_(CHTokenizedMathResult, v8, (uint64_t)v7, v9, v10, v11))
  {
    uint64_t v16 = objc_msgSend_textTranscriptionForLatex_(CHTokenizedMathResult, v12, (uint64_t)v7, v13, v14, v15);
    uint64_t v21 = objc_msgSend_setWithArray_(MEMORY[0x1E4F1CAD0], v17, *(void *)(a1 + 40), v18, v19, v20);
    if (objc_msgSend_containsSampleWithTranscription_strokeIdentifiers_(*(void **)(a1 + 48), v22, (uint64_t)v16, (uint64_t)v21, v23, v24))
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v29 = (id)qword_1EA3C9FD8;
      if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_36;
      }
      int v71 = 138739971;
      uint64_t v72 = (uint64_t)v16;
      uint64_t v30 = "Inventory data ingestion: token already in the inventory. token string: %{sensitive}@";
      uint64_t v31 = v29;
      uint32_t v32 = 12;
    }
    else
    {
      objc_msgSend_removeSamplesContainingStrokeIdentifiers_(*(void **)(a1 + 48), v25, (uint64_t)v21, v26, v27, v28);
      int shouldBypassGating = objc_msgSend_shouldBypassGating(CHSynthesisStyleInventory, v33, v34, v35, v36, v37);
      if (shouldBypassGating)
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        uint64_t v44 = (id)qword_1EA3C9FD8;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
        {
          int v71 = 138739971;
          uint64_t v72 = (uint64_t)v16;
          _os_log_impl(&dword_1C492D000, v44, OS_LOG_TYPE_DEBUG, "Inventory data ingestion: bypassing gating for math token: %{sensitive}@", (uint8_t *)&v71, 0xCu);
        }
      }
      objc_msgSend_score(*(void **)(a1 + 32), v38, v39, v40, v41, v42);
      if (v50 >= 0.949999988) {
        char v51 = 1;
      }
      else {
        char v51 = shouldBypassGating;
      }
      if (v51)
      {
        if ((unint64_t)objc_msgSend_length(v16, v45, v46, v47, v48, v49) > 2) {
          char v54 = 1;
        }
        else {
          char v54 = shouldBypassGating;
        }
        if (v54)
        {
          uint64_t v29 = objc_msgSend_sampleWithTranscription_drawing_strokeIdentifiers_(CHSynthesisStyleSample, v52, (uint64_t)v16, *(void *)(a1 + 56), (uint64_t)v21, v53);
          objc_msgSend_addSample_(*(void **)(a1 + 48), v55, (uint64_t)v29, v56, v57, v58);
LABEL_36:

          goto LABEL_37;
        }
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        uint64_t v29 = (id)qword_1EA3C9FD8;
        if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_36;
        }
        uint64_t v70 = objc_msgSend_length(v16, v65, v66, v67, v68, v69);
        int v71 = 134218499;
        uint64_t v72 = v70;
        __int16 v73 = 2048;
        uint64_t v74 = 3;
        __int16 v75 = 2117;
        uint64_t v76 = v16;
        uint64_t v30 = "Inventory data ingestion: rejecting math token due to length (%ld) smaller than %ld. token string: %{sensitive}@";
      }
      else
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        uint64_t v29 = (id)qword_1EA3C9FD8;
        if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_36;
        }
        objc_msgSend_score(*(void **)(a1 + 32), v59, v60, v61, v62, v63);
        int v71 = 134218499;
        uint64_t v72 = v64;
        __int16 v73 = 2048;
        uint64_t v74 = 0x3FEE666660000000;
        __int16 v75 = 2117;
        uint64_t v76 = v16;
        uint64_t v30 = "Inventory data ingestion: rejecting math token due to recognition score (%2.2f) smaller than threshold %2."
              "2f. token string: %{sensitive}@";
      }
      uint64_t v31 = v29;
      uint32_t v32 = 32;
    }
    _os_log_impl(&dword_1C492D000, v31, OS_LOG_TYPE_DEBUG, v30, (uint8_t *)&v71, v32);
    goto LABEL_36;
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v16 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    int v71 = 138739971;
    uint64_t v72 = (uint64_t)v7;
    _os_log_impl(&dword_1C492D000, v16, OS_LOG_TYPE_DEBUG, "Inventory data ingestion: rejecting math token as it does not have trivial text transcription. token string: %{sensitive}@", (uint8_t *)&v71, 0xCu);
  }
LABEL_37:
}

void sub_1C4A13340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1343C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4A13454(uint64_t a1)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  id v2 = *(id *)(a1 + 32);
  uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v49, (uint64_t)v53, 16, v4);
  if (v10)
  {
    uint64_t v11 = *(void *)v50;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v50 != v11) {
          objc_enumerationMutation(v2);
        }
        uint64_t v13 = *(void **)(*((void *)&v49 + 1) + 8 * i);
        uint64_t v14 = *(void **)(a1 + 40);
        uint64_t v15 = objc_msgSend_transcription(v13, v5, v6, v7, v8, v9);
        uint64_t v21 = objc_msgSend_strokeIdentifiers(v13, v16, v17, v18, v19, v20);
        LODWORD(v14) = objc_msgSend_containsSampleWithTranscription_strokeIdentifiers_(v14, v22, (uint64_t)v15, (uint64_t)v21, v23, v24);

        if (v14)
        {
          uint64_t v25 = objc_msgSend_styles(*(void **)(a1 + 40), v5, v6, v7, v8, v9);
          uint64_t v31 = objc_msgSend_strokeIdentifiers(v13, v26, v27, v28, v29, v30);
          uint64_t v41 = objc_msgSend_objectForKeyedSubscript_(v25, v32, (uint64_t)v31, v33, v34, v35);
          if (v13)
          {
            objc_msgSend_embeddingVector(v13, v36, v37, v38, v39, v40);
          }
          else
          {
            long long __p = 0;
            uint64_t v47 = 0;
            uint64_t v48 = 0;
          }
          objc_msgSend_setEmbeddingVector_(v41, v36, (uint64_t)&__p, v38, v39, v40);
          if (__p)
          {
            uint64_t v47 = __p;
            operator delete(__p);
          }

          objc_msgSend_setHasInventoryChanged_(*(void **)(a1 + 40), v42, 1, v43, v44, v45);
        }
      }
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v49, (uint64_t)v53, 16, v9);
    }
    while (v10);
  }
}

void sub_1C4A13620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_1C4A13748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A13760(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v7 = objc_msgSend_styles(*(void **)(a1 + 32), a2, a3, a4, a5, a6, 0);
  uint64_t v13 = objc_msgSend_allValues(v7, v8, v9, v10, v11, v12);

  uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v38, (uint64_t)v44, 16, v15);
  if (v21)
  {
    uint64_t v22 = *(void *)v39;
    do
    {
      for (uint64_t i = 0; i != v21; ++i)
      {
        if (*(void *)v39 != v22) {
          objc_enumerationMutation(v13);
        }
        uint64_t v24 = *(void **)(*((void *)&v38 + 1) + 8 * i);
        if ((objc_msgSend_hasEmbeddingVector(v24, v16, v17, v18, v19, v20) & 1) == 0)
        {
          uint64_t v25 = *(void **)(a1 + 40);
          uint64_t v26 = objc_msgSend_copy(v24, v16, v17, v18, v19, v20);
          objc_msgSend_addObject_(v25, v27, (uint64_t)v26, v28, v29, v30);
        }
      }
      uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v16, (uint64_t)&v38, (uint64_t)v44, 16, v20);
    }
    while (v21);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v31 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v37 = objc_msgSend_count(*(void **)(a1 + 40), v32, v33, v34, v35, v36);
    *(_DWORD *)buf = 134217984;
    uint64_t v43 = v37;
    _os_log_impl(&dword_1C492D000, v31, OS_LOG_TYPE_DEBUG, "Inventory style samples without style embedding: %lu", buf, 0xCu);
  }
}

void sub_1C4A13924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A13AD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A13BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A13BD8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend__unsafeSamplesWithStylePrediction(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  id v29 = (id)objc_claimAutoreleasedReturnValue();
  unint64_t v12 = objc_msgSend_count(v29, v7, v8, v9, v10, v11);
  if (v12 >= objc_msgSend_minimumNumberOfSamplesWithStylePrediction(*(void **)(a1 + 32), v13, v14, v15, v16, v17)
    || (uint64_t v23 = objc_msgSend_count(v29, v18, v19, v20, v21, v22),
        v23 == objc_msgSend_countOfStyleSamples(*(void **)(a1 + 32), v24, v25, v26, v27, v28)))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

void sub_1C4A13C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A140CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1447C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  uint64_t v21 = v20;

  _Unwind_Resume(a1);
}

void sub_1C4A14518(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a1;
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  uint64_t v155 = 0;
  uint64_t v156 = 0;
  BOOL v157 = 0;
  long long v151 = 0u;
  long long v152 = 0u;
  long long v153 = 0u;
  long long v154 = 0u;
  uint64_t v7 = objc_msgSend__unsafeSamplesWithStylePrediction(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v151, (uint64_t)v163, 16, v9);
  uint64_t v150 = v6;
  uint64_t v15 = 0;
  if (v14)
  {
    uint64_t v148 = *(void *)v152;
    while (1)
    {
      uint64_t v16 = 0;
      uint64_t v145 = v14;
      do
      {
        if (*(void *)v152 != v148) {
          objc_enumerationMutation(v7);
        }
        uint64_t v17 = *(void **)(*((void *)&v151 + 1) + 8 * v16);
        objc_msgSend_cosineSimilarityToSample_(*(void **)(v6 + 40), v10, (uint64_t)v17, v11, v12, v13, v145);
        float v19 = v18;
        uint64_t v28 = objc_msgSend_remainingCharacterSetFromPromptCharacterSet_withSample_(CHSynthesisStyleInventory, v20, *(void *)(v6 + 48), (uint64_t)v17, v21, v22);
        if (v19 >= 0.55)
        {
          double v146 = objc_msgSend_transcription(v17, v23, v24, v25, v26, v27);
          BOOL v34 = (unint64_t)objc_msgSend_length(v146, v29, v30, v31, v32, v33) < *(void *)(v6 + 64);
          int v40 = objc_msgSend_count(*(void **)(v6 + 48), v35, v36, v37, v38, v39);
          int v46 = v40 - objc_msgSend_count(v28, v41, v42, v43, v44, v45);
          id v47 = v17;
          id v48 = v47;
          if (v15 >= (unsigned __int8 *)v157)
          {
            long long v52 = v7;
            uint64_t v53 = (unsigned __int8 *)v155;
            unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((v15 - (unsigned __int8 *)v155) >> 3);
            unint64_t v55 = v54 + 1;
            if (v54 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_1C494A220();
            }
            if (0x5555555555555556 * ((v157 - v155) >> 3) > v55) {
              unint64_t v55 = 0x5555555555555556 * ((v157 - v155) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v157 - v155) >> 3) >= 0x555555555555555) {
              unint64_t v56 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v56 = v55;
            }
            if (v56 > 0xAAAAAAAAAAAAAAALL) {
              sub_1C4949AA8();
            }
            uint64_t v57 = (char *)operator new(24 * v56);
            uint64_t v58 = (BOOL *)&v57[24 * v54];
            *uint64_t v58 = v34;
            *((_DWORD *)v58 + 1) = v46;
            *((float *)v58 + 2) = v19;
            *((void *)v58 + 2) = v48;
            long long v50 = (char *)(v58 + 24);
            if (v15 == v53)
            {
              uint64_t v155 = &v57[24 * v54];
              uint64_t v156 = (unsigned __int8 *)(v58 + 24);
              BOOL v157 = &v57[24 * v56];
              uint64_t v7 = v52;
              uint64_t v14 = v145;
              long long v51 = v146;
              if (!v53) {
                goto LABEL_23;
              }
            }
            else
            {
              uint64_t v59 = v15;
              uint64_t v7 = v52;
              do
              {
                uint64_t v60 = *((void *)v59 - 3);
                v59 -= 24;
                int v61 = *((_DWORD *)v59 + 2);
                *((void *)v58 - 3) = v60;
                v58 -= 24;
                *((_DWORD *)v58 + 2) = v61;
                uint64_t v62 = *((void *)v59 + 2);
                *((void *)v59 + 2) = 0;
                *((void *)v58 + 2) = v62;
              }
              while (v59 != v53);
              uint64_t v155 = (char *)v58;
              uint64_t v156 = (unsigned __int8 *)v50;
              BOOL v157 = &v57[24 * v56];
              uint64_t v14 = v145;
              do
              {

                v15 -= 24;
              }
              while (v15 != v53);
              long long v51 = v146;
              if (!v53) {
                goto LABEL_23;
              }
            }
            operator delete(v53);
          }
          else
          {
            *uint64_t v15 = v34;
            __int16 v49 = *(_WORD *)buf;
            v15[3] = buf[2];
            *(_WORD *)(v15 + 1) = v49;
            *((_DWORD *)v15 + 1) = v46;
            *((float *)v15 + 2) = v19;
            *((void *)v15 + 2) = v47;
            long long v50 = (char *)(v15 + 24);
            long long v51 = v146;
          }
LABEL_23:
          uint64_t v156 = (unsigned __int8 *)v50;

          uint64_t v15 = (unsigned __int8 *)v50;
        }

        ++v16;
        uint64_t v6 = v150;
      }
      while (v16 != v14);
      uint64_t v63 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v151, (uint64_t)v163, 16, v13);
      uint64_t v14 = v63;
      if (!v63)
      {
        uint64_t v64 = (unsigned __int8 *)v155;
        goto LABEL_31;
      }
    }
  }
  uint64_t v64 = 0;
LABEL_31:

  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v64) >> 3) >= 0xA) {
    uint64_t v65 = 10;
  }
  else {
    uint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v64) >> 3);
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v66 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218240;
    *(void *)&uint8_t buf[4] = 0xAAAAAAAAAAAAAAABLL * ((v15 - v64) >> 3);
    __int16 v161 = 2048;
    uint64_t v162 = v65;
    _os_log_impl(&dword_1C492D000, v66, OS_LOG_TYPE_DEBUG, "Style Sampling: nearestInventorySamplesToSample for input style sample: found %zu nearest samples, capping to %ld", buf, 0x16u);
  }

  if (v65)
  {
    int v71 = &v64[24 * v65];
    if (v65 != 1)
    {
      unint64_t v72 = (unint64_t)(v65 - 2) >> 1;
      unint64_t v73 = v72 + 1;
      uint64_t v74 = &v64[24 * v72];
      do
      {
        sub_1C4A1AB8C((uint64_t)v64, v65, v74);
        v74 -= 24;
        --v73;
      }
      while (v73);
    }
    if (v71 != v15)
    {
      for (uint64_t i = 24 * v65; &v64[i] != v15; i += 24)
      {
        uint64_t v76 = &v64[i];
        int v77 = *v64;
        if (v64[i]) {
          BOOL v78 = v77 == 0;
        }
        else {
          BOOL v78 = 1;
        }
        if (v78)
        {
          if (v64[i]) {
            BOOL v79 = v77 == 0;
          }
          else {
            BOOL v79 = 0;
          }
          if (!v79) {
            continue;
          }
        }
        else
        {
          int v80 = *((_DWORD *)v76 + 1);
          int v81 = *((_DWORD *)v64 + 1);
          if (v80 <= v81 && (v80 != v81 || *(float *)&v64[i + 8] <= *((float *)v64 + 2))) {
            continue;
          }
        }
        *(void *)buf = *(void *)v76;
        *(_DWORD *)&buf[8] = *((_DWORD *)v76 + 2);
        id v82 = &v64[i];
        uint64_t v83 = *(void *)&v64[i + 16];
        *((void *)v82 + 2) = 0;
        uint64_t v84 = *(void *)v64;
        *((_DWORD *)v76 + 2) = *((_DWORD *)v64 + 2);
        *(void *)uint64_t v76 = v84;
        uint64_t v85 = *((void *)v64 + 2);
        *((void *)v64 + 2) = 0;
        uint64_t v86 = *(void **)&v64[i + 16];
        *((void *)v82 + 2) = v85;

        *(void *)uint64_t v64 = *(void *)buf;
        *((_DWORD *)v64 + 2) = *(_DWORD *)&buf[8];
        __int16 v87 = (void *)*((void *)v64 + 2);
        *((void *)v64 + 2) = v83;

        sub_1C4A1AB8C((uint64_t)v64, v65, v64);
      }
    }
    if (v65 == 1)
    {
LABEL_62:
      uint64_t v64 = (unsigned __int8 *)v155;
      uint64_t v88 = 16;
      do
      {
        objc_msgSend_addObject_(*(void **)(v150 + 56), v67, *(void *)&v64[v88], v68, v69, v70, v145);
        v88 += 24;
        --v65;
      }
      while (v65);
      goto LABEL_64;
    }
    uint64_t v91 = v65;
LABEL_75:
    uint64_t v95 = 0;
    uint64_t v96 = v71;
    *(void *)buf = *(void *)v64;
    *(_DWORD *)&buf[8] = *((_DWORD *)v64 + 2);
    uint64_t v97 = (void *)*((void *)v64 + 2);
    *((void *)v64 + 2) = 0;
    CGFloat v98 = v64;
    while (1)
    {
      uint64_t v99 = v95 + 1;
      CGFloat v100 = &v98[24 * v95 + 24];
      uint64_t v101 = 2 * v95;
      uint64_t v95 = (2 * v95) | 1;
      uint64_t v102 = v101 + 2;
      if (v102 < v91)
      {
        int v103 = v100[24];
        if (*v100) {
          BOOL v104 = v103 == 0;
        }
        else {
          BOOL v104 = 1;
        }
        if (v104)
        {
          if (*v100) {
            BOOL v105 = v103 == 0;
          }
          else {
            BOOL v105 = 0;
          }
          if (!v105) {
            goto LABEL_89;
          }
        }
        else
        {
          int v106 = *(_DWORD *)&v98[24 * v99 + 4];
          int v107 = *((_DWORD *)v100 + 7);
          if (v106 <= v107 && (v106 != v107 || *(float *)&v98[24 * v99 + 8] <= *((float *)v100 + 8))) {
            goto LABEL_89;
          }
        }
        v100 += 24;
        uint64_t v95 = v102;
      }
LABEL_89:
      uint64_t v108 = *(void *)v100;
      *((_DWORD *)v98 + 2) = *((_DWORD *)v100 + 2);
      *(void *)CGFloat v98 = v108;
      uint64_t v109 = *((void *)v100 + 2);
      *((void *)v100 + 2) = 0;
      uint64_t v110 = (void *)*((void *)v98 + 2);
      *((void *)v98 + 2) = v109;

      CGFloat v98 = v100;
      if (v95 > (uint64_t)((unint64_t)(v91 - 2) >> 1))
      {
        v71 -= 24;
        if (v100 == v96 - 24)
        {
          uint64_t v92 = *(void *)buf;
          *((_DWORD *)v100 + 2) = *(_DWORD *)&buf[8];
          *(void *)CGFloat v100 = v92;
          uint64_t v93 = (void *)*((void *)v100 + 2);
          *((void *)v100 + 2) = v97;
        }
        else
        {
          uint64_t v111 = *(void *)v71;
          *((_DWORD *)v100 + 2) = *((_DWORD *)v96 - 4);
          *(void *)CGFloat v100 = v111;
          uint64_t v113 = *((void *)v96 - 1);
          uint64_t v112 = (void **)(v96 - 8);
          *uint64_t v112 = 0;
          double v114 = (void *)*((void *)v100 + 2);
          *((void *)v100 + 2) = v113;

          uint64_t v115 = *(void *)buf;
          *((_DWORD *)v71 + 2) = *(_DWORD *)&buf[8];
          *(void *)int v71 = v115;
          double v116 = *v112;
          *uint64_t v112 = v97;

          uint64_t v117 = v100 + 24 - v64;
          if (v117 >= 25)
          {
            unint64_t v118 = v117 / 0x18uLL - 2;
            unint64_t v119 = v118 >> 1;
            double v120 = &v64[24 * (v118 >> 1)];
            int v121 = *v100;
            if (*v120) {
              BOOL v122 = v121 == 0;
            }
            else {
              BOOL v122 = 1;
            }
            if (v122)
            {
              if (*v120) {
                BOOL v123 = v121 == 0;
              }
              else {
                BOOL v123 = 0;
              }
              if (v123)
              {
                int v149 = *((_DWORD *)v100 + 1);
                goto LABEL_108;
              }
            }
            else
            {
              int v124 = *(_DWORD *)&v64[24 * v119 + 4];
              int v149 = *((_DWORD *)v100 + 1);
              if (v124 > v149
                || v124 == v149
                && (int v149 = *(_DWORD *)&v64[24 * v119 + 4], *(float *)&v64[24 * v119 + 8] > *((float *)v100 + 2)))
              {
LABEL_108:
                unsigned __int8 v147 = *v100;
                __int16 v125 = *(_WORD *)(v100 + 1);
                unsigned __int8 v159 = v100[3];
                __int16 v158 = v125;
                float v126 = *((float *)v100 + 2);
                uint64_t v145 = *((void *)v100 + 2);
                *((void *)v100 + 2) = 0;
                uint64_t v127 = *(void *)v120;
                *((_DWORD *)v100 + 2) = *((_DWORD *)v120 + 2);
                *(void *)CGFloat v100 = v127;
                double v128 = &v64[24 * v119];
                uint64_t v129 = *((void *)v128 + 2);
                *((void *)v128 + 2) = 0;
                BOOL v130 = (void *)*((void *)v100 + 2);
                *((void *)v100 + 2) = v129;

                if (v118 >= 2)
                {
                  if (v147)
                  {
                    while (1)
                    {
                      unint64_t v134 = v119 - 1;
                      unint64_t v119 = (v119 - 1) >> 1;
                      unsigned int v131 = &v64[24 * v119];
                      if (!*v131) {
                        break;
                      }
                      int v135 = *(_DWORD *)&v64[24 * v119 + 4];
                      if (v135 <= v149 && (v135 != v149 || *(float *)&v64[24 * v119 + 8] <= v126)) {
                        break;
                      }
                      uint64_t v136 = *(void *)v131;
                      *((_DWORD *)v120 + 2) = *((_DWORD *)v131 + 2);
                      *(void *)double v120 = v136;
                      double v137 = &v64[24 * v119];
                      uint64_t v138 = *((void *)v137 + 2);
                      *((void *)v137 + 2) = 0;
                      double v139 = (void *)*((void *)v120 + 2);
                      *((void *)v120 + 2) = v138;

                      double v120 = &v64[24 * v119];
                      if (v134 <= 1) {
                        goto LABEL_110;
                      }
                    }
                  }
                  else
                  {
                    while (1)
                    {
                      unint64_t v140 = v119 - 1;
                      unint64_t v119 = (v119 - 1) >> 1;
                      unsigned int v131 = &v64[24 * v119];
                      if (!*v131) {
                        break;
                      }
                      uint64_t v141 = *(void *)v131;
                      *((_DWORD *)v120 + 2) = *((_DWORD *)v131 + 2);
                      *(void *)double v120 = v141;
                      CGFloat v142 = &v64[24 * v119];
                      uint64_t v143 = *((void *)v142 + 2);
                      *((void *)v142 + 2) = 0;
                      CGRect v144 = (void *)*((void *)v120 + 2);
                      *((void *)v120 + 2) = v143;

                      double v120 = &v64[24 * v119];
                      if (v140 < 2) {
                        goto LABEL_110;
                      }
                    }
                  }
                }
                unsigned int v131 = v120;
LABEL_110:
                unsigned __int8 *v131 = v147;
                __int16 v132 = v158;
                v131[3] = v159;
                *(_WORD *)(v131 + 1) = v132;
                *((_DWORD *)v131 + 1) = v149;
                *((float *)v131 + 2) = v126;
                uint64_t v133 = (void *)*((void *)v131 + 2);
                *((void *)v131 + 2) = v145;
              }
            }
          }
        }
        if (v91-- <= 2) {
          goto LABEL_62;
        }
        goto LABEL_75;
      }
    }
  }
LABEL_64:
  if (qword_1EA3CA000 == -1)
  {
    uint64_t v89 = (id)qword_1EA3C9FD8;
    if (!os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  uint64_t v89 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
  {
LABEL_66:
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C492D000, v89, OS_LOG_TYPE_DEBUG, "Style Sampling: nearestInventorySamplesToSample for input style sample: Completed", buf, 2u);
  }
LABEL_67:

  if (v64)
  {
    for (uint64_t j = v156; j != v64; j -= 24)

    operator delete(v64);
  }
}

void sub_1C4A14E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  sub_1C4A14EE8((void **)va);
  _Unwind_Resume(a1);
}

void **sub_1C4A14EE8(void **a1)
{
  id v2 = (id *)*a1;
  if (*a1)
  {
    id v3 = (id *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 3;

        id v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1C4A15250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  id v29 = v27;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A152DC(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  obuint64_t j = *(id *)(a1 + 32);
  uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v2, (uint64_t)&v40, (uint64_t)v44, 16, v3);
  if (v9)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)v41;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v41 != v12) {
          objc_enumerationMutation(obj);
        }
        uint64_t v14 = *(void **)(*((void *)&v40 + 1) + 8 * i);
        uint64_t v15 = (void *)MEMORY[0x1E4F1CA80];
        uint64_t v16 = objc_msgSend_characterCoverage(v14, v4, v5, v6, v7, v8);
        uint64_t v21 = objc_msgSend_setWithSet_(v15, v17, (uint64_t)v16, v18, v19, v20);

        objc_msgSend_intersectSet_(v21, v22, *(void *)(a1 + 40), v23, v24, v25);
        if (objc_msgSend_count(v21, v26, v27, v28, v29, v30) >= v10)
        {
          unint64_t v10 = objc_msgSend_count(v21, v31, v32, v33, v34, v35);
          id v36 = v14;

          uint64_t v11 = v36;
        }
      }
      uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v4, (uint64_t)&v40, (uint64_t)v44, 16, v8);
    }
    while (v9);
  }
  else
  {
    uint64_t v11 = 0;
  }

  uint64_t v37 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v38 = *(void **)(v37 + 40);
  *(void *)(v37 + 40) = v11;
}

void sub_1C4A1546C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1571C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A15798(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v204 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v208 = *MEMORY[0x1E4F143B8];
  while (v8 < objc_msgSend_count(*(void **)(a1 + 32), a2, a3, a4, a5, a6))
  {
    unint64_t v13 = v8;
    uint64_t v14 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v9, v8, v10, v11, v12);
    uint64_t v15 = (void *)MEMORY[0x1E4F1CA80];
    uint64_t v21 = objc_msgSend_characterCoverage(v14, v16, v17, v18, v19, v20);
    uint64_t v26 = objc_msgSend_setWithSet_(v15, v22, (uint64_t)v21, v23, v24, v25);

    objc_msgSend_intersectSet_(v26, v27, *(void *)(a1 + 40), v28, v29, v30);
    uint64_t v203 = v26;
    uint64_t v36 = objc_msgSend_count(v26, v31, v32, v33, v34, v35);
    long long v42 = objc_msgSend_transcription(v14, v37, v38, v39, v40, v41);
    long long v43 = v14;
    uint64_t v49 = objc_msgSend_length(v42, v44, v45, v46, v47, v48);
    uint64_t v50 = v49;
    if (v6 >= v204)
    {
      unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * (v6 - v7) + 1;
      if (v53 > 0xAAAAAAAAAAAAAAALL) {
        sub_1C494A220();
      }
      if (0x5555555555555556 * (v204 - v7) > v53) {
        unint64_t v53 = 0x5555555555555556 * (v204 - v7);
      }
      if (0xAAAAAAAAAAAAAAABLL * (v204 - v7) >= 0x555555555555555) {
        unint64_t v54 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v54 = v53;
      }
      if (v54)
      {
        if (v54 > 0xAAAAAAAAAAAAAAALL) {
          sub_1C4949AA8();
        }
        unint64_t v55 = (char *)operator new(24 * v54);
        unint64_t v56 = (uint64_t *)&v55[8 * (v6 - v7)];
        unint64_t v51 = v13;
        uint64_t *v56 = v13;
        v56[1] = v36;
        v56[2] = v50;
        if (v6 != v7) {
          goto LABEL_15;
        }
LABEL_109:
        uint64_t v7 = v56;
        uint64_t v204 = (uint64_t *)&v55[24 * v54];
        long long v52 = (char *)(v56 + 3);
        if (!v6) {
          goto LABEL_19;
        }
      }
      else
      {
        unint64_t v55 = 0;
        unint64_t v56 = (uint64_t *)(8 * (v6 - v7));
        unint64_t v51 = v13;
        uint64_t *v56 = v13;
        v56[1] = v36;
        v56[2] = v50;
        if (v6 == v7) {
          goto LABEL_109;
        }
LABEL_15:
        uint64_t v57 = v56;
        do
        {
          long long v58 = *(_OWORD *)(v6 - 3);
          *(v57 - 1) = *(v6 - 1);
          *(_OWORD *)(v57 - 3) = v58;
          v57 -= 3;
          v6 -= 3;
        }
        while (v6 != v7);
        uint64_t v6 = v7;
        uint64_t v7 = v57;
        uint64_t v204 = (uint64_t *)&v55[24 * v54];
        long long v52 = (char *)(v56 + 3);
        if (!v6) {
          goto LABEL_19;
        }
      }
      operator delete(v6);
      goto LABEL_19;
    }
    unint64_t v51 = v13;
    uint64_t *v6 = v13;
    v6[1] = v36;
    long long v52 = (char *)(v6 + 3);
    v6[2] = v49;
LABEL_19:
    uint64_t v59 = v52 - (char *)v7;
    if (v52 - (char *)v7 >= 25)
    {
      unint64_t v60 = v59 / 0x18uLL - 2;
      unint64_t v61 = v60 >> 1;
      uint64_t v62 = &v7[3 * (v60 >> 1)];
      unint64_t v63 = v62[1];
      unint64_t v64 = *((void *)v52 - 2);
      unint64_t v65 = *((void *)v52 - 1);
      if (v63 > v64
        || v63 == v64
        && ((unint64_t v77 = v62[2], v65 >= 3) ? (v78 = v77 >= v65) : (v78 = 0),
            v78 ? (int v79 = 0) : (int v79 = 1),
            v77 >= 3 ? (BOOL v80 = v79 == 0) : (BOOL v80 = 1),
            !v80))
      {
        uint64_t v66 = v52 - 24;
        uint64_t v67 = *((void *)v52 - 3);
        long long v68 = *(_OWORD *)v62;
        *((void *)v66 + 2) = v62[2];
        *(_OWORD *)uint64_t v66 = v68;
        if (v60 >= 2)
        {
          while (1)
          {
            unint64_t v71 = v61 - 1;
            unint64_t v61 = (v61 - 1) >> 1;
            uint64_t v69 = &v7[3 * v61];
            unint64_t v72 = v69[1];
            if (v72 <= v64)
            {
              if (v72 != v64) {
                break;
              }
              unint64_t v73 = v69[2];
              BOOL v74 = v65 >= 3 && v73 >= v65;
              BOOL v75 = !v74;
              if (v73 < 3 || !v75) {
                break;
              }
            }
            long long v70 = *(_OWORD *)v69;
            v62[2] = v69[2];
            *(_OWORD *)uint64_t v62 = v70;
            uint64_t v62 = &v7[3 * v61];
            if (v71 <= 1) {
              goto LABEL_23;
            }
          }
        }
        uint64_t v69 = v62;
LABEL_23:
        *uint64_t v69 = v67;
        v69[1] = v64;
        v69[2] = v65;
      }
    }

    unint64_t v81 = 0xAAAAAAAAAAAAAAABLL * (v59 >> 3);
    unint64_t v82 = *(void *)(a1 + 56);
    while (v81 > v82)
    {
      if (v59 >= 25)
      {
        uint64_t v84 = 0;
        long long v85 = *(_OWORD *)v7;
        uint64_t v207 = v7[2];
        *(_OWORD *)buf = v85;
        uint64_t v86 = v7;
        do
        {
          uint64_t v88 = v86;
          v86 += 3 * v84 + 3;
          uint64_t v89 = 2 * v84;
          uint64_t v84 = (2 * v84) | 1;
          uint64_t v90 = v89 + 2;
          if (v90 < (uint64_t)v81)
          {
            unint64_t v91 = v86[1];
            unint64_t v92 = v86[4];
            if (v91 > v92
              || v91 == v92
              && ((v93 = v86[2], unint64_t v94 = v86[5], v94 >= 3) ? (v95 = v93 >= v94) : (v95 = 0),
                  v95 ? (int v96 = 0) : (int v96 = 1),
                  v93 >= 3 ? (BOOL v97 = v96 == 0) : (BOOL v97 = 1),
                  !v97))
            {
              v86 += 3;
              uint64_t v84 = v90;
            }
          }
          long long v87 = *(_OWORD *)v86;
          v88[2] = v86[2];
          *(_OWORD *)uint64_t v88 = v87;
        }
        while (v84 <= (uint64_t)((v81 - 2) >> 1));
        CGFloat v98 = v52 - 24;
        if (v86 == (uint64_t *)(v52 - 24))
        {
          long long v83 = *(_OWORD *)buf;
          v86[2] = v207;
          *(_OWORD *)uint64_t v86 = v83;
        }
        else
        {
          long long v99 = *(_OWORD *)v98;
          v86[2] = *((void *)v52 - 1);
          *(_OWORD *)uint64_t v86 = v99;
          long long v100 = *(_OWORD *)buf;
          *((void *)v52 - 1) = v207;
          *(_OWORD *)CGFloat v98 = v100;
          uint64_t v101 = (char *)v86 - (char *)v7 + 24;
          if (v101 >= 25)
          {
            unint64_t v102 = v101 / 0x18uLL - 2;
            unint64_t v103 = v102 >> 1;
            BOOL v104 = &v7[3 * (v102 >> 1)];
            unint64_t v105 = v104[1];
            unint64_t v106 = v86[1];
            unint64_t v107 = v86[2];
            if (v105 > v106
              || v105 == v106
              && ((unint64_t v118 = v104[2], v107 >= 3) ? (v119 = v118 >= v107) : (v119 = 0),
                  v119 ? (int v120 = 0) : (int v120 = 1),
                  v118 >= 3 ? (BOOL v121 = v120 == 0) : (BOOL v121 = 1),
                  !v121))
            {
              uint64_t v108 = *v86;
              long long v109 = *(_OWORD *)v104;
              v86[2] = v104[2];
              *(_OWORD *)uint64_t v86 = v109;
              if (v102 >= 2)
              {
                while (1)
                {
                  unint64_t v112 = v103 - 1;
                  unint64_t v103 = (v103 - 1) >> 1;
                  uint64_t v110 = &v7[3 * v103];
                  unint64_t v113 = v110[1];
                  if (v113 <= v106)
                  {
                    if (v113 != v106) {
                      break;
                    }
                    unint64_t v114 = v110[2];
                    BOOL v115 = v107 >= 3 && v114 >= v107;
                    BOOL v116 = !v115;
                    if (v114 < 3 || !v116) {
                      break;
                    }
                  }
                  long long v111 = *(_OWORD *)v110;
                  v104[2] = v110[2];
                  *(_OWORD *)BOOL v104 = v111;
                  BOOL v104 = &v7[3 * v103];
                  if (v112 <= 1) {
                    goto LABEL_80;
                  }
                }
              }
              uint64_t v110 = v104;
LABEL_80:
              *uint64_t v110 = v108;
              v110[1] = v106;
              v110[2] = v107;
            }
          }
        }
        unint64_t v82 = *(void *)(a1 + 56);
      }
      v52 -= 24;
      uint64_t v59 = v52 - (char *)v7;
      unint64_t v81 = 0xAAAAAAAAAAAAAAABLL * ((v52 - (char *)v7) >> 3);
    }

    unint64_t v8 = v51 + 1;
    uint64_t v6 = (uint64_t *)v52;
  }
  if (v7 != v6)
  {
    id v122 = objc_alloc(MEMORY[0x1E4F1CA48]);
    uint64_t v127 = objc_msgSend_initWithCapacity_(v122, v123, 0xAAAAAAAAAAAAAAABLL * (v6 - v7), v124, v125, v126);
    uint64_t v128 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v129 = *(void **)(v128 + 40);
    *(void *)(v128 + 40) = v127;

    while (qword_1EA3CA000 == -1)
    {
      unsigned int v131 = (id)qword_1EA3C9FD8;
      if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_117;
      }
LABEL_118:

      int v149 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      long long v154 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v150, *v7, v151, v152, v153);
      unsigned __int8 v159 = objc_msgSend_normalizeStyleSample_(CHSynthesisStyleSample, v155, (uint64_t)v154, v156, v157, v158);
      objc_msgSend_addObject_(v149, v160, (uint64_t)v159, v161, v162, v163);

      if ((char *)v6 - (char *)v7 >= 25)
      {
        uint64_t v164 = 0;
        int64_t v165 = 0xAAAAAAAAAAAAAAABLL * (v6 - v7);
        long long v166 = *(_OWORD *)v7;
        uint64_t v207 = v7[2];
        *(_OWORD *)buf = v166;
        uint64_t v167 = v7;
        do
        {
          uint64_t v169 = v167;
          v167 += 3 * v164 + 3;
          uint64_t v170 = 2 * v164;
          uint64_t v164 = (2 * v164) | 1;
          int64_t v171 = v170 + 2;
          if (v171 < v165)
          {
            unint64_t v172 = v167[1];
            unint64_t v173 = v167[4];
            if (v172 > v173
              || v172 == v173
              && ((v174 = v167[2], v175 = v167[5], v175 >= 3) ? (BOOL v176 = v174 >= v175) : (BOOL v176 = 0),
                  v176 ? (int v177 = 0) : (int v177 = 1),
                  v174 >= 3 ? (BOOL v178 = v177 == 0) : (BOOL v178 = 1),
                  !v178))
            {
              v167 += 3;
              uint64_t v164 = v171;
            }
          }
          long long v168 = *(_OWORD *)v167;
          v169[2] = v167[2];
          *(_OWORD *)uint64_t v169 = v168;
        }
        while (v164 <= (uint64_t)((unint64_t)(v165 - 2) >> 1));
        uint64_t v179 = v6 - 3;
        if (v167 == v6 - 3)
        {
          long long v130 = *(_OWORD *)buf;
          v167[2] = v207;
          *(_OWORD *)uint64_t v167 = v130;
        }
        else
        {
          long long v180 = *(_OWORD *)v179;
          v167[2] = *(v6 - 1);
          *(_OWORD *)uint64_t v167 = v180;
          long long v181 = *(_OWORD *)buf;
          *(v6 - 1) = v207;
          *(_OWORD *)uint64_t v179 = v181;
          uint64_t v182 = (char *)v167 - (char *)v7 + 24;
          if (v182 >= 25)
          {
            unint64_t v183 = v182 / 0x18uLL - 2;
            unint64_t v184 = v183 >> 1;
            uint64_t v185 = &v7[3 * (v183 >> 1)];
            unint64_t v186 = v185[1];
            unint64_t v187 = v167[1];
            unint64_t v188 = v167[2];
            if (v186 > v187
              || v186 == v187
              && ((unint64_t v199 = v185[2], v188 >= 3) ? (v200 = v199 >= v188) : (v200 = 0),
                  v200 ? (int v201 = 0) : (int v201 = 1),
                  v199 >= 3 ? (BOOL v202 = v201 == 0) : (BOOL v202 = 1),
                  !v202))
            {
              uint64_t v189 = *v167;
              long long v190 = *(_OWORD *)v185;
              v167[2] = v185[2];
              *(_OWORD *)uint64_t v167 = v190;
              if (v183 >= 2)
              {
                while (1)
                {
                  unint64_t v193 = v184 - 1;
                  unint64_t v184 = (v184 - 1) >> 1;
                  uint64_t v191 = &v7[3 * v184];
                  unint64_t v194 = v191[1];
                  if (v194 <= v187)
                  {
                    if (v194 != v187) {
                      break;
                    }
                    unint64_t v195 = v191[2];
                    BOOL v196 = v188 >= 3 && v195 >= v188;
                    BOOL v197 = !v196;
                    if (v195 < 3 || !v197) {
                      break;
                    }
                  }
                  long long v192 = *(_OWORD *)v191;
                  v185[2] = v191[2];
                  *(_OWORD *)uint64_t v185 = v192;
                  uint64_t v185 = &v7[3 * v184];
                  if (v193 <= 1) {
                    goto LABEL_142;
                  }
                }
              }
              uint64_t v191 = v185;
LABEL_142:
              uint64_t *v191 = v189;
              v191[1] = v187;
              v191[2] = v188;
            }
          }
        }
      }
      v6 -= 3;
      if (v7 == v6) {
        goto LABEL_172;
      }
    }
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    unsigned int v131 = (id)qword_1EA3C9FD8;
    if (!os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_118;
    }
LABEL_117:
    uint64_t v136 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v132, *v7, v133, v134, v135);
    CGFloat v142 = objc_msgSend_transcription(v136, v137, v138, v139, v140, v141);
    uint64_t v148 = objc_msgSend_length(v142, v143, v144, v145, v146, v147);
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = v148;
    _os_log_impl(&dword_1C492D000, v131, OS_LOG_TYPE_DEFAULT, "Style Sampling: found style sample with length: %lu", buf, 0xCu);

    goto LABEL_118;
  }
LABEL_172:
  if (v7) {
    operator delete(v7);
  }
}

void sub_1C4A16040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10)
  {
    operator delete(v10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C4A16360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  uint64_t v23 = v22;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A163B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v183 = *MEMORY[0x1E4F143B8];
  uint64_t v179 = 0;
  long long v180 = 0;
  unint64_t v181 = 0;
  objc_msgSend__unsafeSamplesWithStylePrediction(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  long long v177 = 0u;
  long long v178 = 0u;
  long long v175 = 0u;
  long long v176 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v6, (uint64_t)&v175, (uint64_t)v182, 16, v7);
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)v176;
    uint64_t v172 = *(void *)v176;
    while (1)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        while (1)
        {
          if (*(void *)v176 != v10) {
            objc_enumerationMutation(obj);
          }
          uint64_t v14 = *(void **)(*((void *)&v175 + 1) + 8 * i);
          if ((unint64_t)v9 >= v181) {
            break;
          }
          *v9++ = v14;
          long long v180 = v9;
          if (++i == v8) {
            goto LABEL_44;
          }
        }
        uint64_t v15 = v179;
        uint64_t v16 = (char *)((char *)v9 - v179);
        uint64_t v17 = ((char *)v9 - v179) >> 3;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61) {
          sub_1C494A220();
        }
        uint64_t v19 = v181 - (void)v179;
        if ((uint64_t)(v181 - (void)v179) >> 2 > v18) {
          unint64_t v18 = v19 >> 2;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          if (v20 >> 61) {
            sub_1C4949AA8();
          }
          uint64_t v21 = (char *)operator new(8 * v20);
        }
        else
        {
          uint64_t v21 = 0;
        }
        uint64_t v22 = &v21[8 * v17];
        uint64_t v23 = &v21[8 * v20];
        *(void *)uint64_t v22 = v14;
        uint64_t v24 = (void **)(v22 + 8);
        if (v9 == (void **)v15)
        {
          uint64_t v179 = &v21[8 * v17];
          long long v180 = (void **)(v22 + 8);
          unint64_t v181 = (unint64_t)v23;
          uint64_t v10 = v172;
          if (v9) {
            goto LABEL_26;
          }
          goto LABEL_27;
        }
        unint64_t v25 = (char *)v9 - v15 - 8;
        if (v25 < 0x138)
        {
          uint64_t v26 = v9;
          goto LABEL_21;
        }
        int64_t v30 = (char *)(v9 - 1) - v15;
        if ((void **)((char *)v9 - (v30 & 0xFFFFFFFFFFFFFFF8) - 8) > v9 - 1)
        {
          uint64_t v26 = v9;
          do
          {
LABEL_21:
            uint64_t v27 = (uint64_t)*--v26;
            *uint64_t v26 = 0;
            *((void *)v22 - 1) = v27;
            v22 -= 8;
          }
          while (v26 != (void **)v15);
          goto LABEL_22;
        }
        if (&v16[(void)v21 - 8 - (v30 & 0xFFFFFFFFFFFFFFF8)] > &v16[(void)v21 - 8])
        {
          uint64_t v26 = v9;
          goto LABEL_21;
        }
        unint64_t v31 = v30 & 0xFFFFFFFFFFFFFFF8;
        if ((char *)v9 - v31 - 8 < v22 && &v16[(void)v21 - v31 - 8] < (char *)v9)
        {
          uint64_t v26 = v9;
          goto LABEL_21;
        }
        uint64_t v32 = (v25 >> 3) + 1;
        uint64_t v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
        v22 -= v33;
        uint64_t v26 = &v9[v33 / 0xFFFFFFFFFFFFFFF8];
        uint64_t v34 = v9 - 2;
        uint64_t v35 = &v21[8 * v17 - 16];
        uint64_t v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v38 = *((_OWORD *)v34 - 1);
          long long v37 = *(_OWORD *)v34;
          *((_OWORD *)v34 - 1) = 0uLL;
          *(_OWORD *)uint64_t v34 = 0uLL;
          *((_OWORD *)v35 - 1) = v38;
          *(_OWORD *)uint64_t v35 = v37;
          v34 -= 4;
          v35 -= 32;
          v36 -= 4;
        }
        while (v36);
        if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_21;
        }
LABEL_22:
        uint64_t v9 = (void **)v179;
        uint64_t v28 = v180;
        uint64_t v179 = v22;
        long long v180 = v24;
        unint64_t v181 = (unint64_t)v23;
        if (v28 == v9)
        {
          uint64_t v10 = v172;
          if (v9) {
            goto LABEL_26;
          }
        }
        else
        {
          uint64_t v10 = v172;
          do
          {
            uint64_t v29 = *--v28;
          }
          while (v28 != v9);
          if (v9) {
LABEL_26:
          }
            operator delete(v9);
        }
LABEL_27:
        uint64_t v9 = v24;
        long long v180 = v24;
      }
LABEL_44:
      uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v12, (uint64_t)&v175, (uint64_t)v182, 16, v13);
      if (!v8)
      {
        long long __p = (void **)v179;
        goto LABEL_47;
      }
    }
  }
  long long __p = 0;
  uint64_t v9 = 0;
LABEL_47:

  unint64_t v44 = v9 - __p;
  if (v44 >= 0xA) {
    unint64_t v44 = 10;
  }
  if (!v44)
  {

    if (!__p) {
      return;
    }
    goto LABEL_64;
  }
  uint64_t v170 = v44;
  if (v44 != 1)
  {
    unint64_t v45 = (v44 - 2) >> 1;
    unint64_t v46 = v45 + 1;
    uint64_t v47 = &__p[v45];
    do
    {
      sub_1C4A1AFD8((uint64_t)__p, v170, v47--);
      --v46;
    }
    while (v46);
  }
  uint64_t v48 = &__p[v170];
  for (uint64_t j = v48; v48 != v9; ++v48)
  {
    if (sub_1C4A1AF00(*v48, *__p))
    {
      uint64_t v69 = *v48;
      *uint64_t v48 = 0;
      long long v70 = *__p;
      void *__p = 0;
      unint64_t v71 = *v48;
      *uint64_t v48 = v70;

      unint64_t v72 = *__p;
      void *__p = v69;

      sub_1C4A1AFD8((uint64_t)__p, v170, __p);
    }
  }
  if (v170 != 1)
  {
    uint64_t v75 = v170;
    do
    {
      uint64_t v77 = 0;
      BOOL v78 = __p;
      uint64_t v167 = *__p;
      void *__p = 0;
      uint64_t v173 = v75;
      int64_t v79 = (unint64_t)(v75 - 2) >> 1;
      do
      {
        uint64_t v80 = (uint64_t)&v78[v77 + 1];
        uint64_t v81 = 2 * v77;
        uint64_t v77 = (2 * v77) | 1;
        uint64_t v82 = v81 + 2;
        if (v81 + 2 < v173)
        {
          long long v83 = *(void **)(v80 + 8);
          id v84 = *(id *)v80;
          id v85 = v83;
          uint64_t v91 = objc_msgSend_samplingCount(v84, v86, v87, v88, v89, v90);
          if (v91 == objc_msgSend_samplingCount(v85, v92, v93, v94, v95, v96))
          {
            unint64_t v102 = objc_msgSend_creationDate(v84, v97, v98, v99, v100, v101);
            uint64_t v108 = objc_msgSend_creationDate(v85, v103, v104, v105, v106, v107);
            BOOL v109 = v102 > v108;
          }
          else
          {
            uint64_t v110 = objc_msgSend_samplingCount(v84, v97, v98, v99, v100, v101);
            BOOL v109 = v110 > objc_msgSend_samplingCount(v85, v111, v112, v113, v114, v115);
          }

          if (v109)
          {
            v80 += 8;
            uint64_t v77 = v82;
          }
        }
        id v116 = *(id *)v80;
        *(void *)uint64_t v80 = 0;
        uint64_t v117 = *v78;
        *BOOL v78 = v116;

        BOOL v78 = (void **)v80;
      }
      while (v77 <= v79);
      unint64_t v118 = j - 1;
      if (v80 == (void)--j)
      {
        id v76 = *(id *)v80;
        *(void *)uint64_t v80 = v167;
      }
      else
      {
        int v120 = *v118;
        double *v118 = 0;
        id v121 = *(id *)v80;
        *(void *)uint64_t v80 = v120;

        id v122 = *j;
        *uint64_t j = v167;

        uint64_t v123 = v80 + 8 - (void)__p;
        if (v123 < 9) {
          goto LABEL_72;
        }
        unint64_t v124 = ((unint64_t)v123 >> 3) - 2;
        unint64_t v125 = v124 >> 1;
        uint64_t v126 = &__p[v124 >> 1];
        if (!sub_1C4A1AF00(*v126, *(void **)v80)) {
          goto LABEL_72;
        }
        id v127 = *(id *)v80;
        *(void *)uint64_t v80 = 0;
        uint64_t v128 = *v126;
        const char *v126 = 0;
        id v129 = *(id *)v80;
        *(void *)uint64_t v80 = v128;

        if (v124 >= 2)
        {
          do
          {
            unint64_t v131 = v125 - 1;
            unint64_t v125 = (v125 - 1) >> 1;
            long long v130 = &__p[v125];
            id v132 = *v130;
            id v133 = v127;
            uint64_t v139 = objc_msgSend_samplingCount(v132, v134, v135, v136, v137, v138);
            if (v139 == objc_msgSend_samplingCount(v133, v140, v141, v142, v143, v144))
            {
              uint64_t v150 = objc_msgSend_creationDate(v132, v145, v146, v147, v148, v149);
              uint64_t v156 = objc_msgSend_creationDate(v133, v151, v152, v153, v154, v155);
              BOOL v157 = v150 > v156;

              if (!v157) {
                goto LABEL_85;
              }
            }
            else
            {
              uint64_t v158 = objc_msgSend_samplingCount(v132, v145, v146, v147, v148, v149);
              BOOL v164 = v158 > objc_msgSend_samplingCount(v133, v159, v160, v161, v162, v163);

              if (!v164) {
                goto LABEL_85;
              }
            }
            id v165 = *v130;
            id *v130 = 0;
            long long v166 = *v126;
            const char *v126 = v165;

            uint64_t v126 = &__p[v125];
          }
          while (v131 > 1);
        }
        else
        {
LABEL_85:
          long long v130 = v126;
        }
        id v76 = *v130;
        id *v130 = v127;
      }

LABEL_72:
      uint64_t v75 = v173 - 1;
    }
    while (v173 > 2);
  }
  uint64_t v49 = 0;
  long long __p = (void **)v179;
  do
  {
    uint64_t v50 = objc_msgSend_transcription(__p[v49], v39, v40, v41, v42, v43);
    unint64_t v56 = objc_msgSend_length(v50, v51, v52, v53, v54, v55);
    uint64_t v62 = objc_msgSend_transcription(*(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v57, v58, v59, v60, v61);
    BOOL v68 = v56 > objc_msgSend_length(v62, v63, v64, v65, v66, v67);

    if (v68) {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), __p[v49]);
    }
    ++v49;
  }
  while (v170 != v49);

LABEL_64:
  for (k = v180; k != __p; --k)
  {
    BOOL v74 = *(k - 1);
  }
  long long v180 = __p;
  operator delete(__p);
}

void sub_1C4A16B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  sub_1C4A16BB8(&a26);
  _Unwind_Resume(a1);
}

void **sub_1C4A16BB8(void **a1)
{
  id v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 1);
        v3 -= 8;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1C4A17028(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A170C8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  unint64_t v87 = objc_msgSend__maxSamplesToStitch(CHSynthesisStyleInventory, a2, a3, a4, a5, a6);
  if (objc_msgSend_count(*(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v7, v8, v9, v10, v11))
  {
    objc_msgSend_nearestInventorySamplesToSample_prompt_maxStyleSampleLength_(*(void **)(a1 + 32), v12, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 72), v13);
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v14, (uint64_t)&v93, (uint64_t)v98, 16, v15);
    if (v21)
    {
      uint64_t v22 = *(void *)v94;
      while (2)
      {
        uint64_t v23 = 0;
        do
        {
          if (*(void *)v94 != v22) {
            objc_enumerationMutation(obj);
          }
          uint64_t v24 = objc_msgSend_transcription(*(void **)(*((void *)&v93 + 1) + 8 * v23), v16, v17, v18, v19, v20);
          BOOL v30 = (unint64_t)objc_msgSend_length(v24, v25, v26, v27, v28, v29) < *(void *)(a1 + 72);

          if (v30)
          {
            int v31 = 1;
            goto LABEL_12;
          }
          ++v23;
        }
        while (v21 != v23);
        uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v16, (uint64_t)&v93, (uint64_t)v98, 16, v20);
        if (v21) {
          continue;
        }
        break;
      }
    }
    int v31 = 0;
LABEL_12:

    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    id v86 = obj;
    uint64_t v34 = 0;
    uint64_t v40 = objc_msgSend_countByEnumeratingWithState_objects_count_(v86, v32, (uint64_t)&v89, (uint64_t)v97, 16, v33);
    if (v40)
    {
      uint64_t v41 = 0;
      uint64_t v42 = *(void *)v90;
LABEL_14:
      uint64_t v43 = 0;
      while (1)
      {
        if (*(void *)v90 != v42) {
          objc_enumerationMutation(v86);
        }
        unint64_t v44 = *(void **)(*((void *)&v89 + 1) + 8 * v43);
        if (!v31
          || (objc_msgSend_transcription(*(void **)(*((void *)&v89 + 1) + 8 * v43), v35, v36, v37, v38, v39),
              unint64_t v45 = objc_claimAutoreleasedReturnValue(),
              BOOL v51 = (unint64_t)(v41 + objc_msgSend_length(v45, v46, v47, v48, v49, v50) + 1) > *(void *)(a1 + 72),
              v45,
              !v51))
        {
          uint64_t v52 = objc_msgSend_remainingCharacterSetFromPromptCharacterSet_withSample_(CHSynthesisStyleInventory, v35, *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), (uint64_t)v44, v38, v39);

          uint64_t v34 = v52;
          unint64_t v58 = objc_msgSend_count(v52, v53, v54, v55, v56, v57);
          if (v58 < objc_msgSend_count(*(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v59, v60, v61, v62, v63))
          {
            objc_msgSend_addObject_(*(void **)(a1 + 56), v64, (uint64_t)v44, v66, v67, v68);
            objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v34);
            BOOL v74 = objc_msgSend_transcription(v44, v69, v70, v71, v72, v73);
            uint64_t v80 = objc_msgSend_length(v74, v75, v76, v77, v78, v79);

            v41 += v80;
          }
          if (!objc_msgSend_count(*(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v64, v65, v66, v67, v68)
            || objc_msgSend_count(*(void **)(a1 + 56), v81, v82, v83, v84, v85) >= v87)
          {
            break;
          }
        }
        if (v40 == ++v43)
        {
          uint64_t v40 = objc_msgSend_countByEnumeratingWithState_objects_count_(v86, v35, (uint64_t)&v89, (uint64_t)v97, 16, v39);
          if (v40) {
            goto LABEL_14;
          }
          break;
        }
      }
    }
  }
}

void sub_1C4A173C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A1742C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v8 = objc_msgSend_currentSamplingTimestep(v6, a2, a3, a4, a5, a6) + 1;
  return objc_msgSend_setCurrentSamplingTimestep_(v6, v7, v8, v9, v10, v11);
}

void sub_1C4A174F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A17910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A17C98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A17DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A17E10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A17E24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A17E34(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v204 = *MEMORY[0x1E4F143B8];
  if (!objc_msgSend_requestType(*(void **)(a1 + 32), a2, a3, a4, a5, a6))
  {
    uint64_t v12 = objc_msgSend_options(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
    char isFastPath = objc_msgSend_isFastPath(v12, v13, v14, v15, v16, v17);

    if ((isFastPath & 1) == 0)
    {
      uint64_t v24 = objc_msgSend_string(*(void **)(a1 + 32), v19, v20, v21, v22, v23);
      uint64_t v30 = objc_msgSend_length(v24, v25, v26, v27, v28, v29);

      if (!v30)
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        int v31 = (id)qword_1EA3C9F90[0];
        if (os_log_type_enabled(v31, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1C492D000, v31, OS_LOG_TYPE_FAULT, "Style Sampling: requesting style sample for generation of empty prompt!", buf, 2u);
        }
      }
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v32 = (id)qword_1EA3C9FD8;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v38 = objc_msgSend_string(*(void **)(a1 + 32), v33, v34, v35, v36, v37);
        uint64_t v44 = objc_msgSend_length(v38, v39, v40, v41, v42, v43);
        *(_DWORD *)buf = 134217984;
        uint64_t v195 = v44;
        _os_log_impl(&dword_1C492D000, v32, OS_LOG_TYPE_DEFAULT, "Style Sampling: request sent to the inventory to find a style sample for text prompt with length: %lu", buf, 0xCu);
      }
      long long v192 = objc_msgSend_styleDrawing(*(void **)(a1 + 40), v45, v46, v47, v48, v49);
      uint64_t v191 = objc_msgSend_styleContent(*(void **)(a1 + 40), v50, v51, v52, v53, v54);
      unint64_t v193 = 0;
      if (!v192 || !v191)
      {
LABEL_19:
        id v86 = objc_msgSend_string(*(void **)(a1 + 32), v55, v56, v57, v58, v59);
        uint64_t v91 = objc_msgSend_maxStyleSampleLengthForPrompt_(CHSynthesisStyleInventory, v87, (uint64_t)v86, v88, v89, v90);

        long long v92 = *(void **)(a1 + 48);
        uint64_t v98 = objc_msgSend_string(*(void **)(a1 + 32), v93, v94, v95, v96, v97);
        uint64_t v100 = objc_msgSend_styleSampleForInputSample_prompt_samplingAlgorithm_maxStyleSampleLength_(v92, v99, (uint64_t)v193, (uint64_t)v98, *(void *)(a1 + 56), v91);

        if (!v100)
        {
LABEL_24:

          return;
        }
        uint64_t v106 = objc_msgSend_drawing(v100, v101, v102, v103, v104, v105);
        objc_msgSend_setStyleDrawing_(*(void **)(a1 + 40), v107, (uint64_t)v106, v108, v109, v110);

        id v116 = objc_msgSend_transcription(v100, v111, v112, v113, v114, v115);
        objc_msgSend_setStyleContent_(*(void **)(a1 + 40), v117, (uint64_t)v116, v118, v119, v120);

        uint64_t v126 = objc_msgSend_string(*(void **)(a1 + 32), v121, v122, v123, v124, v125);
        unint64_t v131 = objc_msgSend_characterCoverageWithString_(CHSynthesisStyleSample, v127, (uint64_t)v126, v128, v129, v130);

        uint64_t v135 = objc_msgSend_remainingCharacterSetFromPromptCharacterSet_withSample_(CHSynthesisStyleInventory, v132, (uint64_t)v131, (uint64_t)v100, v133, v134);
        uint64_t v141 = objc_msgSend_count(v131, v136, v137, v138, v139, v140);
        uint64_t v147 = objc_msgSend_count(v135, v142, v143, v144, v145, v146);
        uint64_t v153 = objc_msgSend_count(v131, v148, v149, v150, v151, v152);
        if (qword_1EA3CA000 == -1)
        {
          uint64_t v154 = (id)qword_1EA3C9FD8;
          if (!os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT))
          {
LABEL_23:

            goto LABEL_24;
          }
        }
        else
        {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
          uint64_t v154 = (id)qword_1EA3C9FD8;
          if (!os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_23;
          }
        }
        long long v190 = objc_msgSend_transcription(v100, v155, v156, v157, v158, v159);
        uint64_t v189 = objc_msgSend_transcription(v100, v160, v161, v162, v163, v164);
        uint64_t v170 = objc_msgSend_length(v189, v165, v166, v167, v168, v169);
        long long v176 = objc_msgSend_string(*(void **)(a1 + 32), v171, v172, v173, v174, v175);
        uint64_t v182 = objc_msgSend_string(*(void **)(a1 + 32), v177, v178, v179, v180, v181);
        uint64_t v188 = objc_msgSend_length(v182, v183, v184, v185, v186, v187);
        *(_DWORD *)buf = 138740995;
        uint64_t v195 = (uint64_t)v190;
        __int16 v196 = 2048;
        uint64_t v197 = v170;
        __int16 v198 = 2048;
        double v199 = (double)(unint64_t)(v141 - v147) / (double)(unint64_t)v153 * 100.0;
        __int16 v200 = 2117;
        int v201 = v176;
        __int16 v202 = 2048;
        uint64_t v203 = v188;
        _os_log_impl(&dword_1C492D000, v154, OS_LOG_TYPE_DEFAULT, "Style Sampling: using style sample: %{sensitive}@ of length: %lu with character coverage percentage: %f for synthesis request with prompt: %{sensitive}@ of length: %lu", buf, 0x34u);

        goto LABEL_23;
      }
      uint64_t v60 = objc_msgSend_styleContent(*(void **)(a1 + 40), v55, v56, v57, v58, v59);
      uint64_t v66 = objc_msgSend_styleDrawing(*(void **)(a1 + 40), v61, v62, v63, v64, v65);
      uint64_t v72 = objc_msgSend_set(MEMORY[0x1E4F1CAD0], v67, v68, v69, v70, v71);
      unint64_t v193 = objc_msgSend_sampleWithTranscription_drawing_strokeIdentifiers_(CHSynthesisStyleSample, v73, (uint64_t)v60, (uint64_t)v66, (uint64_t)v72, v74);

      uint64_t v80 = objc_msgSend_stylePrediction(*(void **)(a1 + 40), v75, v76, v77, v78, v79);
      objc_msgSend_updateStyleEmbedding_(v193, v81, (uint64_t)v80, v82, v83, v84);

      if (qword_1EA3CA000 == -1)
      {
        uint64_t v85 = (id)qword_1EA3C9FD8;
        if (!os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
        {
LABEL_18:

          goto LABEL_19;
        }
      }
      else
      {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        uint64_t v85 = (id)qword_1EA3C9FD8;
        if (!os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_18;
        }
      }
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C492D000, v85, OS_LOG_TYPE_DEFAULT, "Style Sampling: input sample is part of the synthesis request", buf, 2u);
      goto LABEL_18;
    }
  }
}

void sub_1C4A1839C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A18590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A185A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = objc_msgSend_count(*(void **)(*(void *)(a1 + 32) + 32), a2, a3, a4, a5, a6);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1C4A186E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A1870C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1871C(uint64_t a1)
{
  id v112 = *(id *)(a1 + 32);
  uint64_t v7 = objc_msgSend_styles(*(void **)(a1 + 40), v2, v3, v4, v5, v6);
  uint64_t v13 = objc_msgSend_styles(v112, v8, v9, v10, v11, v12);
  isEqualToDictionarCGFloat y = objc_msgSend_isEqualToDictionary_(v7, v14, (uint64_t)v13, v15, v16, v17);

  if (!isEqualToDictionary) {
    goto LABEL_8;
  }
  uint64_t v24 = objc_msgSend_sampleCountByCharacter(*(void **)(a1 + 40), v19, v20, v21, v22, v23);
  uint64_t v30 = objc_msgSend_sampleCountByCharacter(v112, v25, v26, v27, v28, v29);
  int v35 = objc_msgSend_isEqualToDictionary_(v24, v31, (uint64_t)v30, v32, v33, v34);

  if (!v35) {
    goto LABEL_8;
  }
  uint64_t v41 = objc_msgSend_inventoryStorageURL(*(void **)(a1 + 40), v36, v37, v38, v39, v40);
  uint64_t v47 = objc_msgSend_inventoryStorageURL(v112, v42, v43, v44, v45, v46);
  int isEqual = objc_msgSend_isEqual_(v41, v48, (uint64_t)v47, v49, v50, v51);

  if (!isEqual) {
    goto LABEL_8;
  }
  uint64_t v58 = objc_msgSend_synthesisModelHash(*(void **)(a1 + 40), v53, v54, v55, v56, v57);
  uint64_t v64 = objc_msgSend_synthesisModelHash(v112, v59, v60, v61, v62, v63);
  int isEqualToString = objc_msgSend_isEqualToString_(v58, v65, (uint64_t)v64, v66, v67, v68);

  if (!isEqualToString) {
    goto LABEL_8;
  }
  uint64_t v75 = objc_msgSend_currentSamplingTimestep(*(void **)(a1 + 40), v70, v71, v72, v73, v74);
  if (v75 != objc_msgSend_currentSamplingTimestep(v112, v76, v77, v78, v79, v80)) {
    goto LABEL_8;
  }
  id v86 = objc_msgSend_fastPathCharacterStyles(*(void **)(a1 + 40), v81, v82, v83, v84, v85);
  long long v92 = objc_msgSend_fastPathCharacterStyles(v112, v87, v88, v89, v90, v91);
  int v97 = objc_msgSend_isEqualToDictionary_(v86, v93, (uint64_t)v92, v94, v95, v96);

  if (v97)
  {
    objc_msgSend_characterStyleTimestamp(*(void **)(a1 + 40), v98, v99, v100, v101, v102);
    double v104 = v103;
    objc_msgSend_characterStyleTimestamp(v112, v105, v106, v107, v108, v109);
    BOOL v111 = v104 == v110;
  }
  else
  {
LABEL_8:
    BOOL v111 = 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v111;
}

void sub_1C4A188EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A18978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A18990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A18AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A18B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A18B84(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = objc_msgSend_isEqualToString_(*(void **)(*(void *)(a1 + 32) + 16), a2, *(void *)(a1 + 40), a4, a5, a6);
  if ((result & 1) == 0)
  {
    uint64_t v12 = objc_msgSend_stringWithString_(NSString, v8, *(void *)(a1 + 40), v9, v10, v11);
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void **)(v13 + 16);
    *(void *)(v13 + 16) = v12;

    objc_msgSend_clearSamplesEmbeddingVector(*(void **)(a1 + 32), v15, v16, v17, v18, v19);
    uint64_t v24 = *(void **)(a1 + 32);
    return objc_msgSend_setHasInventoryChanged_(v24, v20, 1, v21, v22, v23);
  }
  return result;
}

void sub_1C4A18CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4A18D0C(uint64_t a1)
{
}

void sub_1C4A18DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double sub_1C4A18DE4(uint64_t a1)
{
  double result = *(double *)(*(void *)(a1 + 32) + 80);
  *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1C4A18EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A18F18(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 56);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_1C4A18F94;
  v8[3] = &unk_1E64E25A0;
  v8[4] = *(void *)(a1 + 40);
  return objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v6, a2, (uint64_t)v8, a4, a5, a6);
}

void sub_1C4A18F94(uint64_t a1, void *a2, void *a3)
{
  id v42 = a2;
  id v5 = a3;
  int CodepointInString = objc_msgSend_firstCodepointInString(v42, v6, v7, v8, v9, v10);
  uint64_t v17 = unicodeToNSString(CodepointInString, v12, v13, v14, v15, v16);
  uint64_t v22 = objc_msgSend_objectForKeyedSubscript_(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v18, (uint64_t)v17, v19, v20, v21);

  if (!v22)
  {
    id v27 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v28, (uint64_t)v27, (uint64_t)v17, v29, v30);
  }
  int v31 = objc_msgSend_objectForKeyedSubscript_(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v23, (uint64_t)v17, v24, v25, v26);
  uint64_t v37 = objc_msgSend_copy(v5, v32, v33, v34, v35, v36);
  objc_msgSend_addObject_(v31, v38, (uint64_t)v37, v39, v40, v41);
}

void sub_1C4A19094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A190C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A190E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A1916C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = objc_msgSend_removeAllObjects(*(void **)(*(void *)(a1 + 32) + 56), a2, a3, a4, a5, a6);
  *(void *)(*(void *)(a1 + 32) + 80) = 0;
  return result;
}

void sub_1C4A19280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C4A192A4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = unicodeToNSString(*(_DWORD *)(a1 + 64), a2, a3, a4, a5, a6);
  uint64_t v13 = v7;
  if (*(uint64_t *)(a1 + 56) >= 1)
  {
    uint64_t v14 = objc_msgSend_stringByAppendingFormat_(v7, v8, @" %d", v10, v11, v12, *(void *)(a1 + 56));

    uint64_t v13 = (void *)v14;
  }
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], v8, v9, v10, v11, v12);
  *(void *)(*(void *)(a1 + 32) + 80) = v15;
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v23 = objc_msgSend_set(MEMORY[0x1E4F1CAD0], v18, v19, v20, v21, v22);
  uint64_t v26 = objc_msgSend_sampleWithTranscription_drawing_strokeIdentifiers_(CHSynthesisStyleSample, v24, v16, v17, (uint64_t)v23, v25);
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(*(void *)(a1 + 32) + 56), v27, (uint64_t)v26, (uint64_t)v13, v28, v29);

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v30 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v32 = v13;
    _os_log_impl(&dword_1C492D000, v30, OS_LOG_TYPE_DEBUG, "Added personalized character for \"%@\"", buf, 0xCu);
  }

  *(unsigned char *)(*(void *)(a1 + 32) + 8) = 1;
}

void sub_1C4A19440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A19458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1946C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A197B4(uint64_t a1)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  id v2 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = objc_msgSend_countOfStyleSamples(*(void **)(a1 + 32), v3, v4, v5, v6, v7);
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 134218496;
    *(void *)&uint8_t buf[4] = v8;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v9;
    *(_WORD *)&buf[22] = 2048;
    uint64_t v102 = v10;
    _os_log_impl(&dword_1C492D000, v2, OS_LOG_TYPE_DEFAULT, "Inventory data ingestion: removing style samples if needed for inventory size: %lu, maximum size: %lu, minimum sample count by characters: %lu", buf, 0x20u);
  }

  if ((unint64_t)objc_msgSend_countOfStyleSamples(*(void **)(a1 + 32), v11, v12, v13, v14, v15) > *(void *)(a1 + 40))
  {
    uint64_t v21 = objc_msgSend_countOfStyleSamples(*(void **)(a1 + 32), v16, v17, v18, v19, v20);
    uint64_t v22 = *(void *)(a1 + 40);
    id v86 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v23, v24, v25, v26, v27);
    uint64_t v33 = objc_msgSend_styles(*(void **)(a1 + 32), v28, v29, v30, v31, v32);
    uint64_t v39 = objc_msgSend_allValues(v33, v34, v35, v36, v37, v38);
    v94[0] = MEMORY[0x1E4F143A8];
    v94[1] = 3221225472;
    v94[2] = sub_1C4A19D00;
    v94[3] = &unk_1E64E25F0;
    id v88 = v86;
    id v95 = v88;
    objc_msgSend_enumerateObjectsUsingBlock_(v39, v40, (uint64_t)v94, v41, v42, v43);

    uint64_t v49 = objc_msgSend_allKeys(v88, v44, v45, v46, v47, v48);
    uint64_t v54 = objc_msgSend_sortedArrayUsingComparator_(v49, v50, (uint64_t)&unk_1F2013650, v51, v52, v53);

    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x2020000000;
    uint64_t v102 = 0;
    long long v90 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    obuint64_t j = v54;
    uint64_t v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v55, (uint64_t)&v90, (uint64_t)v100, 16, v56);
    uint64_t v62 = v21 - v22;
    if (v61)
    {
      uint64_t v63 = *(void *)v91;
LABEL_8:
      uint64_t v64 = 0;
      while (1)
      {
        if (*(void *)v91 != v63) {
          objc_enumerationMutation(obj);
        }
        uint64_t v65 = objc_msgSend_objectForKeyedSubscript_(v88, v57, *(void *)(*((void *)&v90 + 1) + 8 * v64), v58, v59, v60);
        uint64_t v70 = objc_msgSend_sortedArrayUsingComparator_(v65, v66, (uint64_t)&unk_1F2013670, v67, v68, v69);
        v89[0] = MEMORY[0x1E4F143A8];
        v89[1] = 3221225472;
        v89[2] = sub_1C4A19EE8;
        v89[3] = &unk_1E64E2638;
        uint64_t v71 = *(void *)(a1 + 48);
        v89[4] = *(void *)(a1 + 32);
        v89[5] = buf;
        v89[6] = v71;
        v89[7] = v62;
        objc_msgSend_enumerateObjectsUsingBlock_(v70, v72, (uint64_t)v89, v73, v74, v75);
        BOOL v76 = *(void *)(*(void *)&buf[8] + 24) < v62;

        if (!v76) {
          break;
        }
        if (v61 == ++v64)
        {
          uint64_t v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v57, (uint64_t)&v90, (uint64_t)v100, 16, v60);
          if (v61) {
            goto LABEL_8;
          }
          break;
        }
      }
    }

    if (*(void *)(*(void *)&buf[8] + 24) > v62)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v77 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v77, OS_LOG_TYPE_FAULT))
      {
        uint64_t v78 = *(void *)(*(void *)&buf[8] + 24);
        *(_DWORD *)uint64_t v96 = 134218240;
        uint64_t v97 = v78;
        __int16 v98 = 2048;
        uint64_t v99 = v62;
        _os_log_impl(&dword_1C492D000, v77, OS_LOG_TYPE_FAULT, "Deleted more samples (%ld) than requested (%ld).", v96, 0x16u);
      }
    }
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v79 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v85 = objc_msgSend_countOfStyleSamples(*(void **)(a1 + 32), v80, v81, v82, v83, v84);
      *(_DWORD *)uint64_t v96 = 134217984;
      uint64_t v97 = v85;
      _os_log_impl(&dword_1C492D000, v79, OS_LOG_TYPE_DEFAULT, "Inventory data ingestion: Inventory size after removing samples: %ld", v96, 0xCu);
    }

    _Block_object_dispose(buf, 8);
  }
}

void sub_1C4A19C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  _Block_object_dispose((const void *)(v35 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1C4A19D00(uint64_t a1, void *a2)
{
  id v39 = a2;
  uint64_t v8 = objc_msgSend_creationTimestep(v39, v3, v4, v5, v6, v7);
  uint64_t v14 = objc_msgSend_samplingCount(v39, v9, v10, v11, v12, v13);
  uint64_t v19 = objc_msgSend_numberWithInteger_(NSNumber, v15, v14 + v8, v16, v17, v18);
  uint64_t v24 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v20, (uint64_t)v19, v21, v22, v23);

  if (!v24)
  {
    uint64_t v30 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v25, v26, v27, v28, v29);
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v31, (uint64_t)v30, (uint64_t)v19, v32, v33);
  }
  uint64_t v34 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v25, (uint64_t)v19, v27, v28, v29);
  objc_msgSend_addObject_(v34, v35, (uint64_t)v39, v36, v37, v38);
}

void sub_1C4A19DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A19DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A19E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A19E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A19E3C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_compare_(a2, (const char *)a2, a3, a4, a5, a6);
}

uint64_t sub_1C4A19E44(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v10 = objc_msgSend_creationDate(a2, v5, v6, v7, v8, v9);
  uint64_t v16 = objc_msgSend_creationDate(v4, v11, v12, v13, v14, v15);
  uint64_t v21 = objc_msgSend_compare_(v10, v17, (uint64_t)v16, v18, v19, v20);

  return v21;
}

void sub_1C4A19EB4(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4A19ED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A19EE8(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  uint64_t v7 = *(void **)(a1 + 32);
  id v21 = v6;
  uint64_t v13 = objc_msgSend_characterCoverage(v6, v8, v9, v10, v11, v12);
  LOBYTE(v7) = objc_msgSend__unsafeHasLowSampleCountForCharacters_minimumSampleCount_(v7, v14, (uint64_t)v13, *(void *)(a1 + 48), v15, v16);

  if ((v7 & 1) == 0)
  {
    objc_msgSend__unsafeRemoveSample_(*(void **)(a1 + 32), v17, (uint64_t)v21, v18, v19, v20);
    ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) >= *(void *)(a1 + 56)) {
    *a4 = 1;
  }
}

void sub_1C4A19FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A19FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1A074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A1A08C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v17 = objc_msgSend_setWithObjects_(MEMORY[0x1E4F1CAD0], a2, @"0", a4, a5, a6, @"1", @"2", @"3", @"4", @"5", @"6", @"7", @"8", @"9", 0);
  uint64_t v12 = objc_msgSend_characterCoverage(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = objc_msgSend_isSubsetOfSet_(v17, v13, (uint64_t)v12, v14, v15, v16);
}

void sub_1C4A1A16C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1A184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1A260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A1A278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A1A290(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v14[3] = 0;
  uint64_t v7 = objc_msgSend_characterCoverage(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = sub_1C4A1A380;
  v13[3] = &unk_1E64E2660;
  uint64_t v8 = *(void *)(a1 + 40);
  void v13[4] = v14;
  void v13[5] = v8;
  objc_msgSend_enumerateObjectsUsingBlock_(v7, v9, (uint64_t)v13, v10, v11, v12);

  _Block_object_dispose(v14, 8);
}

void sub_1C4A1A34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A1A368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A1A380(uint64_t a1, void *a2, unsigned char *a3)
{
  id v22 = a2;
  uint64_t v10 = objc_msgSend_lowercaseLetterCharacterSet(MEMORY[0x1E4F28B88], v5, v6, v7, v8, v9);
  uint64_t v15 = objc_msgSend_characterAtIndex_(v22, v11, 0, v12, v13, v14);
  int IsMember = objc_msgSend_characterIsMember_(v10, v16, v15, v17, v18, v19);

  if (IsMember)
  {
    ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    id v21 = v22;
    if (*(uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) < 10)
    {
LABEL_3:
      goto LABEL_5;
    }
  }
  else
  {
    id v21 = v22;
    if (*(uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) < 10) {
      goto LABEL_3;
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  *a3 = 1;
LABEL_5:
}

void sub_1C4A1A480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1A494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1A540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1A5A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1A73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1A7AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1A7BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1A860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1A878(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_styles(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = sub_1C4A1A930;
  v12[3] = &unk_1E64E2688;
  id v13 = *(id *)(a1 + 40);
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v7, v8, (uint64_t)v12, v9, v10, v11);
}

void sub_1C4A1A918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A1A930(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4A1AA50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A1AA60(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4A1AB8C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v3 = a2 - 2;
  if (a2 < 2) {
    return;
  }
  uint64_t v5 = v3 >> 1;
  if ((uint64_t)(v3 >> 1) < (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a3[-a1] >> 3))) {
    return;
  }
  uint64_t v7 = (0x5555555555555556 * ((uint64_t)&a3[-a1] >> 3)) | 1;
  uint64_t v8 = (uint64_t *)(a1 + 24 * v7);
  if (0x5555555555555556 * ((uint64_t)&a3[-a1] >> 3) + 2 < a2)
  {
    int v9 = *((unsigned __int8 *)v8 + 24);
    if (*(unsigned char *)v8) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      int v12 = *(_DWORD *)(a1 + 24 * v7 + 4);
      int v13 = *((_DWORD *)v8 + 7);
      if (v12 <= v13 && (v12 != v13 || *(float *)(a1 + 24 * v7 + 8) <= *((float *)v8 + 8))) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
    if (*(unsigned char *)v8) {
      BOOL v11 = v9 == 0;
    }
    else {
      BOOL v11 = 0;
    }
    if (v11)
    {
LABEL_15:
      v8 += 3;
      uint64_t v7 = 0x5555555555555556 * ((uint64_t)&a3[-a1] >> 3) + 2;
    }
  }
LABEL_16:
  char v14 = *a3;
  int v15 = *a3;
  if (*(unsigned char *)v8) {
    BOOL v16 = v15 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16)
  {
    if (*(unsigned char *)v8) {
      BOOL v17 = v15 == 0;
    }
    else {
      BOOL v17 = 0;
    }
    if (v17) {
      return;
    }
    int v18 = *((_DWORD *)a3 + 1);
  }
  else
  {
    int v19 = *((_DWORD *)v8 + 1);
    int v18 = *((_DWORD *)a3 + 1);
    if (v19 > v18) {
      return;
    }
    if (v19 == v18)
    {
      int v18 = *((_DWORD *)v8 + 1);
      if (*((float *)v8 + 2) > *((float *)a3 + 2)) {
        return;
      }
    }
  }
  __int16 v46 = *(_WORD *)(a3 + 1);
  unsigned __int8 v47 = a3[3];
  float v20 = *((float *)a3 + 2);
  uint64_t v21 = *((void *)a3 + 2);
  *((void *)a3 + 2) = 0;
  uint64_t v22 = *v8;
  *((_DWORD *)a3 + 2) = *((_DWORD *)v8 + 2);
  *(void *)a3 = v22;
  uint64_t v23 = v8[2];
  v8[2] = 0;
  uint64_t v24 = (void *)*((void *)a3 + 2);
  *((void *)a3 + 2) = v23;

  if (v5 < v7) {
    goto LABEL_77;
  }
  if (!v14)
  {
    uint64_t v25 = v8;
    while (1)
    {
      uint64_t v26 = 2 * v7;
      uint64_t v7 = (2 * v7) | 1;
      uint64_t v8 = (uint64_t *)(a1 + 24 * v7);
      if (v26 + 2 < a2)
      {
        int v27 = *((unsigned __int8 *)v8 + 24);
        if (*(unsigned char *)v8) {
          BOOL v28 = v27 == 0;
        }
        else {
          BOOL v28 = 1;
        }
        if (v28)
        {
          if (*(unsigned char *)v8) {
            BOOL v29 = v27 == 0;
          }
          else {
            BOOL v29 = 0;
          }
          if (!v29) {
            goto LABEL_45;
          }
        }
        else
        {
          int v30 = *(_DWORD *)(a1 + 24 * v7 + 4);
          int v31 = *((_DWORD *)v8 + 7);
          if (v30 <= v31 && (v30 != v31 || *(float *)(a1 + 24 * v7 + 8) <= *((float *)v8 + 8))) {
            goto LABEL_45;
          }
        }
        v8 += 3;
        uint64_t v7 = v26 + 2;
      }
LABEL_45:
      if (*(unsigned char *)v8) {
        goto LABEL_76;
      }
      uint64_t v32 = *v8;
      *((_DWORD *)v25 + 2) = *((_DWORD *)v8 + 2);
      *uint64_t v25 = v32;
      uint64_t v33 = v8[2];
      v8[2] = 0;
      uint64_t v34 = (void *)v25[2];
      v25[2] = v33;

      uint64_t v25 = v8;
      if (v5 < v7) {
        goto LABEL_77;
      }
    }
  }
  while (1)
  {
    uint64_t v25 = v8;
    uint64_t v38 = 2 * v7;
    uint64_t v7 = (2 * v7) | 1;
    uint64_t v8 = (uint64_t *)(a1 + 24 * v7);
    if (v38 + 2 < a2)
    {
      int v39 = *((unsigned __int8 *)v8 + 24);
      if (*(unsigned char *)v8) {
        BOOL v40 = v39 == 0;
      }
      else {
        BOOL v40 = 1;
      }
      if (v40)
      {
        if (*(unsigned char *)v8) {
          BOOL v41 = v39 == 0;
        }
        else {
          BOOL v41 = 0;
        }
        if (v41)
        {
LABEL_64:
          v8 += 3;
          uint64_t v7 = v38 + 2;
        }
      }
      else
      {
        int v42 = *(_DWORD *)(a1 + 24 * v7 + 4);
        int v43 = *((_DWORD *)v8 + 7);
        if (v42 > v43 || v42 == v43 && *(float *)(a1 + 24 * v7 + 8) > *((float *)v8 + 8)) {
          goto LABEL_64;
        }
      }
    }
    if (*(unsigned char *)v8)
    {
      int v44 = *((_DWORD *)v8 + 1);
      if (v44 > v18 || v44 == v18 && *((float *)v8 + 2) > v20) {
        break;
      }
    }
    uint64_t v35 = *v8;
    *((_DWORD *)v25 + 2) = *((_DWORD *)v8 + 2);
    *uint64_t v25 = v35;
    uint64_t v36 = v8[2];
    v8[2] = 0;
    uint64_t v37 = (void *)v25[2];
    v25[2] = v36;

    if (v5 < v7) {
      goto LABEL_77;
    }
  }
LABEL_76:
  uint64_t v8 = v25;
LABEL_77:
  *(unsigned char *)uint64_t v8 = v14;
  *((unsigned char *)v8 + 3) = v47;
  *(_WORD *)((char *)v8 + 1) = v46;
  *((_DWORD *)v8 + 1) = v18;
  *((float *)v8 + 2) = v20;
  uint64_t v45 = (void *)v8[2];
  v8[2] = v21;
}

BOOL sub_1C4A1AF00(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v10 = objc_msgSend_samplingCount(v3, v5, v6, v7, v8, v9);
  if (v10 == objc_msgSend_samplingCount(v4, v11, v12, v13, v14, v15))
  {
    uint64_t v21 = objc_msgSend_creationDate(v3, v16, v17, v18, v19, v20);
    int v27 = objc_msgSend_creationDate(v4, v22, v23, v24, v25, v26);
    BOOL v28 = v21 > v27;
  }
  else
  {
    uint64_t v29 = objc_msgSend_samplingCount(v3, v16, v17, v18, v19, v20);
    BOOL v28 = v29 > objc_msgSend_samplingCount(v4, v30, v31, v32, v33, v34);
  }

  return v28;
}

void sub_1C4A1AFAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1AFC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1AFD8(uint64_t a1, uint64_t a2, void **a3)
{
  unint64_t v3 = a2 - 2;
  if (a2 >= 2)
  {
    id v4 = a3;
    uint64_t v6 = v3 >> 1;
    if ((uint64_t)(v3 >> 1) >= ((uint64_t)a3 - a1) >> 3)
    {
      uint64_t v8 = ((uint64_t)a3 - a1) >> 2;
      uint64_t v9 = v8 | 1;
      uint64_t v10 = (void **)(a1 + 8 * (v8 | 1));
      uint64_t v11 = v8 + 2;
      if (v8 + 2 < a2 && sub_1C4A1AF00(*v10, v10[1]))
      {
        ++v10;
        uint64_t v9 = v11;
      }
      if (!sub_1C4A1AF00(*v10, *v4))
      {
        uint64_t v12 = *v4;
        *id v4 = 0;
        do
        {
          uint64_t v13 = v4;
          id v4 = v10;
          uint64_t v14 = *v10;
          *uint64_t v10 = 0;
          uint64_t v15 = *v13;
          *uint64_t v13 = v14;

          if (v6 < v9) {
            break;
          }
          uint64_t v16 = (2 * v9) | 1;
          uint64_t v10 = (void **)(a1 + 8 * v16);
          uint64_t v9 = 2 * v9 + 2;
          if (v9 >= a2)
          {
            uint64_t v9 = v16;
          }
          else if (sub_1C4A1AF00(*v10, v10[1]))
          {
            ++v10;
          }
          else
          {
            uint64_t v9 = v16;
          }
        }
        while (!sub_1C4A1AF00(*v10, v12));
        uint64_t v17 = *v4;
        *id v4 = v12;
      }
    }
  }
}

void sub_1C4A1B12C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1B13C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IOSurfaceRef CHCreateIOSurface(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v31[4] = *MEMORY[0x1E4F143B8];
  v30[0] = *MEMORY[0x1E4F2F2C0];
  uint64_t v9 = objc_msgSend_numberWithUnsignedLong_(NSNumber, a2, a1, a4, a5, a6);
  v31[0] = v9;
  v30[1] = *MEMORY[0x1E4F2F0E8];
  uint64_t v14 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v10, (uint64_t)a2, v11, v12, v13);
  v31[1] = v14;
  void v30[2] = *MEMORY[0x1E4F2EFD8];
  uint64_t v19 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v15, a3, v16, v17, v18);
  v31[2] = v19;
  v30[3] = *MEMORY[0x1E4F2EFE0];
  uint64_t v24 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v20, a4, v21, v22, v23);
  void v31[3] = v24;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v25, (uint64_t)v31, (uint64_t)v30, 4, v26);
  CFDictionaryRef v27 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

  IOSurfaceRef v28 = IOSurfaceCreate(v27);
  return v28;
}

void sub_1C4A1B2A0(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;

  _Unwind_Resume(a1);
}

id CHDebugIOSurfaceFP16Description(__IOSurface *a1)
{
  size_t Width = IOSurfaceGetWidth(a1);
  uint64_t v7 = objc_msgSend_arrayWithCapacity_(MEMORY[0x1E4F1CA48], v3, Width, v4, v5, v6);
  uint64_t v8 = malloc_type_calloc(Width, 4uLL, 0x100004052888210uLL);
  IOSurfaceLock(a1, 0, 0);
  src.data = IOSurfaceGetBaseAddress(a1);
  src.CGFloat height = 1;
  src.CGFloat width = Width;
  src.rowBytes = 2 * Width;
  v27.data = v8;
  v27.CGFloat height = 1;
  v27.CGFloat width = Width;
  v27.rowBytes = 4 * Width;
  vImageConvert_Planar16FtoPlanarF(&src, &v27, 0);
  for (; Width; --Width)
  {
    LODWORD(v14) = *v8;
    uint64_t v15 = objc_msgSend_numberWithFloat_(NSNumber, v9, v10, v11, v12, v13, v14);
    objc_msgSend_addObject_(v7, v16, (uint64_t)v15, v17, v18, v19);

    ++v8;
  }
  IOSurfaceUnlock(a1, 0, 0);
  uint64_t v25 = objc_msgSend_description(v7, v20, v21, v22, v23, v24);

  return v25;
}

void sub_1C4A1B410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1B420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1B430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1B444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CHConvertFloat16BufferToFloat32Buffer(void *a1, void *a2, vImagePixelCount a3, void *a4)
{
  src.data = a1;
  src.CGFloat height = 1;
  src.CGFloat width = a3;
  src.rowBytes = 2 * a3;
  v8.data = a2;
  v8.CGFloat height = 1;
  v8.CGFloat width = a3;
  v8.rowBytes = 4 * a3;
  id result = (id)vImageConvert_Planar16FtoPlanarF(&src, &v8, 0);
  if (a4)
  {
    if (result)
    {
      objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v6, @"com.apple.corehandwriting", -1005, 0, v7);
      id result = (id)objc_claimAutoreleasedReturnValue();
      *a4 = result;
    }
  }
  return result;
}

id CHDebugBufferFP32Description(_DWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a2;
  for (uint64_t i = objc_msgSend_arrayWithCapacity_(MEMORY[0x1E4F1CA48], a2, (uint64_t)a2, a4, a5, a6);
  {
    LODWORD(v14) = *a1;
    uint64_t v15 = objc_msgSend_numberWithFloat_(NSNumber, v8, v9, v10, v11, v12, v14);
    objc_msgSend_addObject_(i, v16, (uint64_t)v15, v17, v18, v19);

    ++a1;
  }
  uint64_t v20 = objc_msgSend_description(i, v8, v9, v10, v11, v12);

  return v20;
}

void sub_1C4A1B584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1B594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1B5A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CHConvertFloat32BufferToFloat16Buffer(void *a1, void *a2, vImagePixelCount a3, void *a4)
{
  src.data = a1;
  src.CGFloat height = 1;
  src.CGFloat width = a3;
  src.rowBytes = 4 * a3;
  v8.data = a2;
  v8.CGFloat height = 1;
  v8.CGFloat width = a3;
  v8.rowBytes = 2 * a3;
  id result = (id)vImageConvert_PlanarFtoPlanar16F(&src, &v8, 0);
  if (a4)
  {
    if (result)
    {
      objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v6, @"com.apple.corehandwriting", -1005, 0, v7);
      id result = (id)objc_claimAutoreleasedReturnValue();
      *a4 = result;
    }
  }
  return result;
}

void sub_1C4A1B63C()
{
  uint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.CoreHandwriting.StrokeGroupID", v2);
  uint64_t v1 = (void *)qword_1EA3C9198;
  qword_1EA3C9198 = (uint64_t)v0;
}

uint64_t sub_1C4A1B6A0(uint64_t result)
{
  uint64_t v1 = qword_1EA3C8FC8;
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = qword_1EA3C8FC8;
  qword_1EA3C8FC8 = v1 + 1;
  return result;
}

void sub_1C4A1B948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1BACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1BC48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1BC74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1BEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1C038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1C048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1C058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1C068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1C088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1C098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1C2E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1C550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v10;

  _Unwind_Resume(a1);
}

void sub_1C4A1C570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1C588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1C59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1C5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1C84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1CB50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1CBC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1CBD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1CBEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1CDAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1CDBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1CDD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1CE04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1CE18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1CF8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1CFA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1CFB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1CFD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1CFE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1CFFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1D010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1DA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (v34) {
    operator delete(v34);
  }

  _Unwind_Resume(a1);
}

void sub_1C4A1DC74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1DD7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1DD90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1DDAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1DDC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1E47C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  sub_1C4A16BB8((void **)va);
  _Unwind_Resume(a1);
}

double sub_1C4A1E4EC(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v8 = objc_msgSend_classification(v2, v3, v4, v5, v6, v7);
  int isStrokeClassificationTextOrMath = objc_msgSend_isStrokeClassificationTextOrMath_(CHStrokeUtilities, v9, v8, v10, v11, v12);
  objc_msgSend_bounds(v2, v14, v15, v16, v17, v18);
  double v20 = v19;
  double v22 = v21;
  double v24 = v23;
  objc_msgSend_normalizedSize(v2, v25, v26, v27, v28, v29);
  if (v35 <= 0.0)
  {
    double v36 = v22;
    double v37 = v24;
  }
  else
  {
    objc_msgSend_normalizedSize(v2, v30, v31, v32, v33, v34);
  }
  double v38 = v36 * 0.1;
  if (isStrokeClassificationTextOrMath) {
    double v38 = v37 * 1.5;
  }
  double v39 = v20 - v38 * 0.5;

  return v39;
}

void sub_1C4A1E5E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1E5F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1E600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1E610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1E700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1E718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1E95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1EB48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1EB58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1EB68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1EB78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1EB88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1EB98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1EBA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1EBB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1EBC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1EDE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1EF10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1F09C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1F0D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1F220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A1FCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_1C4A2001C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A200C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A200E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A20100(uint64_t a1)
{
  uint64_t v147 = *MEMORY[0x1E4F143B8];
  long long v134 = 0u;
  long long v135 = 0u;
  long long v136 = 0u;
  long long v137 = 0u;
  obuint64_t j = *(id *)(a1 + 32);
  uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v2, (uint64_t)&v134, (uint64_t)v145, 16, v3);
  if (v4)
  {
    uint64_t v118 = *(void *)v135;
    do
    {
      uint64_t v10 = 0;
      uint64_t v119 = v4;
      do
      {
        if (*(void *)v135 != v118) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void **)(*((void *)&v134 + 1) + 8 * v10);
        uint64_t v12 = NSNumber;
        uint64_t v13 = objc_msgSend_uniqueIdentifier(v11, v5, v6, v7, v8, v9);
        uint64_t v120 = objc_msgSend_numberWithInteger_(v12, v14, v13, v15, v16, v17);
        uint64_t v18 = *(void **)(a1 + 40);
        double v19 = *(void **)(a1 + 32);
        id v122 = *(id *)(a1 + 48);
        id v123 = v11;
        id v121 = v19;
        if (v18)
        {
          uint64_t v25 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v20, v21, v22, v23, v24);
          long long v142 = 0u;
          long long v143 = 0u;
          long long v140 = 0u;
          long long v141 = 0u;
          uint64_t v31 = objc_msgSend_strokeIdentifiers(v123, v26, v27, v28, v29, v30);
          uint64_t v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v32, (uint64_t)&v140, (uint64_t)v146, 16, v33);
          if (v39)
          {
            uint64_t v40 = *(void *)v141;
            do
            {
              for (uint64_t i = 0; i != v39; ++i)
              {
                if (*(void *)v141 != v40) {
                  objc_enumerationMutation(v31);
                }
                uint64_t v42 = *(void *)(*((void *)&v140 + 1) + 8 * i);
                int v43 = objc_msgSend_strokeProvider(v18, v34, v35, v36, v37, v38);
                uint64_t v48 = objc_msgSend_strokeIdentifierFromData_(v43, v44, v42, v45, v46, v47);

                objc_msgSend_addObject_(v25, v49, (uint64_t)v48, v50, v51, v52);
              }
              uint64_t v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v34, (uint64_t)&v140, (uint64_t)v146, 16, v38);
            }
            while (v39);
          }

          uint64_t v57 = objc_msgSend_queryItemStableIdentifierForStrokeGroup_(CHTextInputQuery, v53, (uint64_t)v123, v54, v55, v56);
          if (objc_opt_respondsToSelector())
          {
            uint64_t v63 = (void *)MEMORY[0x1E4F1CA48];
            uint64_t v64 = objc_msgSend_count(v121, v58, v59, v60, v61, v62);
            uint64_t v69 = objc_msgSend_arrayWithCapacity_(v63, v65, v64, v66, v67, v68);
            v138[0] = MEMORY[0x1E4F143A8];
            v138[1] = 3221225472;
            v138[2] = sub_1C4A20C64;
            v138[3] = &unk_1E64E2728;
            id v70 = v69;
            id v139 = v70;
            objc_msgSend_enumerateObjectsUsingBlock_(v121, v71, (uint64_t)v138, v72, v73, v74);
            uint64_t v77 = objc_msgSend_textInputTargetForItemStableIdentifier_strokeIdentifiers_simultaneousItemStableIdentifiers_(v122, v75, (uint64_t)v57, (uint64_t)v25, (uint64_t)v70, v76);
          }
          else
          {
            uint64_t v77 = objc_msgSend_textInputTargetForItemStableIdentifier_strokeIdentifiers_(v122, v58, (uint64_t)v57, (uint64_t)v25, v61, v62);
          }
        }
        else
        {
          uint64_t v77 = 0;
        }

        if (v77)
        {
          dispatch_group_enter(*(dispatch_group_t *)(a1 + 56));
          uint64_t v83 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v78, v79, v80, v81, v82);
          long long v132 = 0u;
          long long v133 = 0u;
          long long v130 = 0u;
          long long v131 = 0u;
          uint64_t v89 = objc_msgSend_strokeIdentifiers(v123, v84, v85, v86, v87, v88);
          uint64_t v97 = objc_msgSend_countByEnumeratingWithState_objects_count_(v89, v90, (uint64_t)&v130, (uint64_t)v144, 16, v91);
          if (v97)
          {
            uint64_t v98 = *(void *)v131;
            do
            {
              for (uint64_t j = 0; j != v97; ++j)
              {
                if (*(void *)v131 != v98) {
                  objc_enumerationMutation(v89);
                }
                uint64_t v100 = *(void *)(*((void *)&v130 + 1) + 8 * j);
                uint64_t v101 = objc_msgSend_strokeProvider(*(void **)(a1 + 40), v92, v93, v94, v95, v96);
                uint64_t v106 = objc_msgSend_strokeIdentifierFromData_(v101, v102, v100, v103, v104, v105);

                objc_msgSend_addObject_(v83, v107, (uint64_t)v106, v108, v109, v110);
              }
              uint64_t v97 = objc_msgSend_countByEnumeratingWithState_objects_count_(v89, v92, (uint64_t)&v130, (uint64_t)v144, 16, v96);
            }
            while (v97);
          }

          BOOL v111 = *(void **)(a1 + 48);
          v124[0] = MEMORY[0x1E4F143A8];
          v124[1] = 3221225472;
          v124[2] = sub_1C4A20730;
          v124[3] = &unk_1E64E26D8;
          id v112 = v77;
          id v125 = v112;
          id v113 = *(id *)(a1 + 64);
          uint64_t v114 = *(void *)(a1 + 72);
          id v126 = v113;
          uint64_t v129 = v114;
          id v127 = v120;
          id v128 = *(id *)(a1 + 56);
          objc_msgSend_fetchContentInfoForTextInputTarget_strokeIdentifiers_completion_(v111, v115, (uint64_t)v112, (uint64_t)v83, (uint64_t)v124, v116);
        }
        ++v10;
      }
      while (v10 != v119);
      uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v134, (uint64_t)v145, 16, v9);
    }
    while (v4);
  }
}

void sub_1C4A205FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1C4A20730(uint64_t a1, void *a2)
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v9 = v3;
  if (!v3)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    long long v92 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
    {
      uint64_t v98 = *(void *)(a1 + 32);
      int v111 = 138412290;
      uint64_t v112 = v98;
      _os_log_impl(&dword_1C492D000, v92, OS_LOG_TYPE_ERROR, "Received nil target content info for target %@", (uint8_t *)&v111, 0xCu);
    }
    goto LABEL_34;
  }
  uint64_t v10 = objc_msgSend_referenceSubstring(v3, v4, v5, v6, v7, v8);
  uint64_t v16 = objc_msgSend_length(v10, v11, v12, v13, v14, v15);
  objc_msgSend_referenceSubstringRange(v9, v17, v18, v19, v20, v21);
  uint64_t v23 = v22;

  BOOL v29 = v16 == v23;
  if (v16 != v23)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v30 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      uint64_t v36 = objc_msgSend_referenceSubstring(v9, v31, v32, v33, v34, v35);
      uint64_t v42 = objc_msgSend_length(v36, v37, v38, v39, v40, v41);
      objc_msgSend_referenceSubstringRange(v9, v43, v44, v45, v46, v47);
      int v111 = 134218240;
      uint64_t v112 = v42;
      __int16 v113 = 2048;
      uint64_t v114 = v48;
      _os_log_impl(&dword_1C492D000, v30, OS_LOG_TYPE_ERROR, "Target content info is invalid, ignoring. referenceSubstring.length %ld != referenceSubstringRange.length %ld", (uint8_t *)&v111, 0x16u);
    }
  }
  if (objc_msgSend_selectedTextRange(v9, v24, v25, v26, v27, v28) != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v54 = objc_msgSend_selectedTextRange(v9, v49, v50, v51, v52, v53);
    if ((unint64_t)&v59[v54] > objc_msgSend_textContentLength(v9, v59, v55, v56, v57, v58))
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v60 = (id)qword_1EA3C9FA0;
      if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      {
        v116.location = objc_msgSend_selectedTextRange(v9, v61, v62, v63, v64, v65);
        uint64_t v66 = NSStringFromRange(v116);
        uint64_t v72 = objc_msgSend_textContentLength(v9, v67, v68, v69, v70, v71);
        int v111 = 138412546;
        uint64_t v112 = (uint64_t)v66;
        __int16 v113 = 2048;
        uint64_t v114 = v72;
        _os_log_impl(&dword_1C492D000, v60, OS_LOG_TYPE_ERROR, "Target content info is invalid, ignoring. selectedTextRange %@ invalid for length %ld", (uint8_t *)&v111, 0x16u);
      }
      BOOL v29 = 0;
    }
  }
  if (objc_msgSend_strokeCoveredTextRange(v9, v49, v50, v51, v52, v53) != 0x7FFFFFFFFFFFFFFFLL)
  {
    NSUInteger v78 = objc_msgSend_strokeCoveredTextRange(v9, v73, v74, v75, v76, v77);
    NSUInteger v80 = (NSUInteger)v79;
    v120.location = objc_msgSend_referenceSubstringRange(v9, v79, v81, v82, v83, v84);
    v120.length = v85;
    v117.location = v78;
    v117.length = v80;
    length = (const char *)NSIntersectionRange(v117, v120).length;
    objc_msgSend_strokeCoveredTextRange(v9, length, v87, v88, v89, v90);
    if (length != v91)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      long long v92 = (id)qword_1EA3C9FA0;
      if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
      {
        v118.location = objc_msgSend_strokeCoveredTextRange(v9, v99, v100, v101, v102, v103);
        NSStringFromRange(v118);
        id v104 = (id)objc_claimAutoreleasedReturnValue();
        v119.location = objc_msgSend_referenceSubstringRange(v9, v105, v106, v107, v108, v109);
        uint64_t v110 = NSStringFromRange(v119);
        int v111 = 138412546;
        uint64_t v112 = (uint64_t)v104;
        __int16 v113 = 2112;
        uint64_t v114 = (uint64_t)v110;
        _os_log_impl(&dword_1C492D000, v92, OS_LOG_TYPE_ERROR, "Target content info is invalid, ignoring. strokeCoveredTextRange %@ is not in range of referenceSubstringRange %@", (uint8_t *)&v111, 0x16u);
      }
      goto LABEL_34;
    }
  }
  if (v29)
  {
    long long v92 = *(id *)(a1 + 40);
    objc_sync_enter(v92);
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v96 = (id)qword_1EA3C9FA0;
      if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
      {
        uint64_t v97 = *(void *)(a1 + 32);
        int v111 = 138412290;
        uint64_t v112 = v97;
        _os_log_impl(&dword_1C492D000, v96, OS_LOG_TYPE_ERROR, "Request for target content info timed out for target %@", (uint8_t *)&v111, 0xCu);
      }
    }
    else
    {
      objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 40), v93, (uint64_t)v9, *(void *)(a1 + 48), v94, v95);
    }
    objc_sync_exit(v92);
LABEL_34:
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_1C4A20BC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A20C64(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_queryItemStableIdentifierForStrokeGroup_(CHTextInputQuery, a2, (uint64_t)a2, a4, a5, a6);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(*(void **)(a1 + 32), v7, (uint64_t)v11, v8, v9, v10);
}

void sub_1C4A20CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderAppleStyle::CHFastPathCharacterHolderAppleStyle(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
  *(void *)a1 = &unk_1F2010E60;
  *(void *)(a1 + 40) = objc_msgSend_currentLocale(MEMORY[0x1E4F1CA20], a2, a3, a4, a5, a6);
  *(void *)(a1 + 48) = 0;
  uint64_t v7 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v8 = dispatch_queue_create("com.apple.CoreHandwriting.CHFPCharacterHolderAppleStyleQueue", v7);
  uint64_t v9 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v8;

  return a1;
}

void sub_1C4A20E08(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = &unk_1F2010E30;
  sub_1C4A23B3C(v2, *(void **)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderAppleStyle::reloadAllCharactersIfNeeded(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderAppleStyle *this)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  uint64_t v1 = *((void *)this + 6);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1C4A20EEC;
  v4[3] = &unk_1E64E2750;
  v4[4] = &v5;
  v4[5] = this;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1C4A20EEC(uint64_t a1)
{
  uint64_t v172 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(v2 + 24))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    return;
  }
  int v148 = *(_DWORD *)(v2 + 36);
  id v150 = *(id *)(v2 + 40);
  uint64_t v4 = CoreHandwriting::synthesis::fast_path::uncompressInventoryFromLZFSE((CoreHandwriting::synthesis::fast_path *)@"default_style_inventory_A.lzfse", v3);
  uint64_t v149 = v4;
  uint64_t v144 = v2;
  uint64_t v145 = a1;
  if (v4)
  {
    uint64_t v167 = 0;
    uint64_t v168 = 0;
    uint64_t v5 = &v167;
    uint64_t v166 = &v167;
    sub_1C4A21BF0((char **)&v164, v4, @"n", v148, v150);
    if (v165 != v164)
    {
      id v11 = objc_msgSend_copy(*(void **)v164, v6, v7, v8, v9, v10);
      objc_msgSend_bounds(v11, v12, v13, v14, v15, v16);
      double v18 = v17;

      uint64_t v24 = objc_msgSend_copy(*(void **)v164, v19, v20, v21, v22, v23);
      objc_msgSend_bounds(v24, v25, v26, v27, v28, v29);
      double v31 = v30;
      uint64_t v37 = objc_msgSend_copy(*(void **)v164, v32, v33, v34, v35, v36);
      objc_msgSend_bounds(v37, v38, v39, v40, v41, v42);
      double v44 = v43;

      uint64_t v45 = v149;
      objc_msgSend_objectForKey_(v149, v46, @"glyphs", v47, v48, v49);
      long long v162 = 0u;
      long long v163 = 0u;
      long long v160 = 0u;
      long long v143 = v161 = 0u;
      objc_msgSend_allKeys(v143, v50, v51, v52, v53, v54);
      obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v57 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v55, (uint64_t)&v160, (uint64_t)v171, 16, v56);
      if (!v57) {
        goto LABEL_83;
      }
      uint64_t v147 = *(void *)v161;
      float v58 = v18;
      float v59 = v31 + v44;
      *(double *)&uint64_t v60 = v31 + v44 - v18;
      float v61 = 1.0 / (float)(v59 - v58);
      double v62 = (float)(0.0 / v61);
      double v63 = (float)((float)(1.0 / v61) - v59);
      double v64 = v61;
      float64x2_t v154 = (float64x2_t)vdupq_lane_s64(v60, 0);
      while (1)
      {
        uint64_t v152 = v57;
        uint64_t v153 = 0;
        while (2)
        {
          if (*(void *)v161 != v147) {
            objc_enumerationMutation(obj);
          }
          uint64_t v151 = *(void **)(*((void *)&v160 + 1) + 8 * v153);
          sub_1C4A21BF0((char **)&__p, v45, v151, v148, v150);
          uint64_t v70 = (float32x2_t *)__p;
          uint64_t v155 = v158;
          if (__p == v158)
          {
LABEL_73:
            if (qword_1EA3CA000 != -1) {
              dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
            }
            uint64_t v129 = (id)qword_1EA3C9FD8;
            if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v170 = v151;
              _os_log_impl(&dword_1C492D000, v129, OS_LOG_TYPE_ERROR, "CHFastPathCharacterHolderAppleStyle Could not add glyph %@ to inventory", buf, 0xCu);
            }

            id v128 = (float32x2_t *)__p;
            goto LABEL_78;
          }
          do
          {
            id v71 = (id)objc_msgSend_copy(*(void **)v70, v65, v67, v68, v69, v66);
            objc_msgSend_bounds(v71, v72, v73, v74, v75, v76);
            uint64_t v156 = objc_msgSend_drawingTransformedWithTranslation_scaleFactor_(v71, v78, v79, v80, v81, v82, v62 - v77, v63, v64);

            float32x2_t v88 = v70[2];
            unsigned __int32 v89 = v70[1].u32[1];
            uint64_t v90 = v5;
            uint64_t v91 = v5;
            long long v92 = v167;
            if (v167)
            {
              while (1)
              {
                while (1)
                {
                  uint64_t v91 = (float32x2_t **)v92;
                  unsigned __int32 v93 = v92[4].u32[0];
                  if (v89 >= v93) {
                    break;
                  }
                  long long v92 = *v91;
                  uint64_t v90 = v91;
                  if (!*v91) {
                    goto LABEL_20;
                  }
                }
                if (v93 >= v89) {
                  break;
                }
                long long v92 = v91[1];
                if (!v92)
                {
                  uint64_t v90 = v91 + 1;
                  goto LABEL_20;
                }
              }
              uint64_t v94 = v91;
            }
            else
            {
LABEL_20:
              uint64_t v94 = operator new(0x40uLL);
              v94[8] = v89;
              *((void *)v94 + 6) = 0;
              *((void *)v94 + 7) = 0;
              *((void *)v94 + 5) = 0;
              *(void *)uint64_t v94 = 0;
              *((void *)v94 + 1) = 0;
              *((void *)v94 + 2) = v91;
              const char *v90 = (float32x2_t *)v94;
              uint64_t v95 = (float32x2_t *)v94;
              if (*v166)
              {
                uint64_t v166 = (float32x2_t **)*v166;
                uint64_t v95 = *v90;
              }
              uint64_t v96 = v167;
              BOOL v97 = v95 == v167;
              v95[3].i8[0] = v95 == v167;
              if (!v97)
              {
                do
                {
                  float32x2_t v98 = v95[2];
                  if (*(unsigned char *)(*(void *)&v98 + 24)) {
                    break;
                  }
                  uint64_t v99 = *(float32x2_t **)(*(void *)&v98 + 16);
                  float32x2_t v100 = *v99;
                  if (*v99 == *(void *)&v98)
                  {
                    float32x2_t v103 = v99[1];
                    if (!*(void *)&v103
                      || (int v104 = *(unsigned __int8 *)(*(void *)&v103 + 24),
                          uint64_t v101 = (unsigned char *)(*(void *)&v103 + 24),
                          v104))
                    {
                      if (**(float32x2_t ***)&v98 == v95)
                      {
                        *(unsigned char *)(*(void *)&v98 + 24) = 1;
                        v99[3].i8[0] = 0;
                        float32x2_t v107 = *(float32x2_t *)(*(void *)&v98 + 8);
                        *uint64_t v99 = v107;
                        if (v107) {
                          goto LABEL_37;
                        }
                      }
                      else
                      {
                        uint64_t v105 = *(float32x2_t **)(*(void *)&v98 + 8);
                        uint64_t v106 = (float32x2_t *)*v105;
                        *(float32x2_t *)(*(void *)&v98 + 8) = *v105;
                        if (v106)
                        {
                          v106[2] = v98;
                          uint64_t v99 = *(float32x2_t **)(*(void *)&v98 + 16);
                        }
                        v105[2] = (float32x2_t)v99;
                        *(void *)(*(void *)(*(void *)&v98 + 16)
                                  + 8 * (**(void **)(*(void *)&v98 + 16) != *(void *)&v98)) = v105;
                        *uint64_t v105 = v98;
                        *(void *)(*(void *)&v98 + 16) = v105;
                        uint64_t v99 = (float32x2_t *)v105[2];
                        float32x2_t v98 = *v99;
                        v105[3].i8[0] = 1;
                        v99[3].i8[0] = 0;
                        float32x2_t v107 = *(float32x2_t *)(*(void *)&v98 + 8);
                        *uint64_t v99 = v107;
                        if (v107) {
LABEL_37:
                        }
                          *(void *)(*(void *)&v107 + 16) = v99;
                      }
                      *(float32x2_t *)(*(void *)&v98 + 16) = v99[2];
                      *(float32x2_t *)(*(void *)&v99[2] + 8 * (**(void **)&v99[2] != (void)v99)) = v98;
                      *(void *)(*(void *)&v98 + 8) = v99;
LABEL_44:
                      v99[2] = v98;
                      break;
                    }
                  }
                  else if (!*(void *)&v100 {
                         || (int v102 = *(unsigned __int8 *)(*(void *)&v100 + 24),
                  }
                             uint64_t v101 = (unsigned char *)(*(void *)&v100 + 24),
                             v102))
                  {
                    if (**(float32x2_t ***)&v98 == v95)
                    {
                      float32x2_t v127 = v95[1];
                      **(float32x2_t **)&float32x2_t v98 = v127;
                      if (v127)
                      {
                        *(float32x2_t *)(*(void *)&v127 + 16) = v98;
                        uint64_t v99 = *(float32x2_t **)(*(void *)&v98 + 16);
                      }
                      v95[2] = (float32x2_t)v99;
                      *(void *)(*(void *)(*(void *)&v98 + 16)
                                + 8 * (**(void **)(*(void *)&v98 + 16) != *(void *)&v98)) = v95;
                      v95[1] = v98;
                      *(void *)(*(void *)&v98 + 16) = v95;
                      uint64_t v99 = (float32x2_t *)v95[2];
                      v95[3].i8[0] = 1;
                      v99[3].i8[0] = 0;
                      float32x2_t v98 = v99[1];
                      uint64_t v108 = **(float32x2_t ***)&v98;
                      v99[1] = **(float32x2_t **)&v98;
                      if (v108) {
LABEL_42:
                      }
                        v108[2] = (float32x2_t)v99;
                    }
                    else
                    {
                      *(unsigned char *)(*(void *)&v98 + 24) = 1;
                      v99[3].i8[0] = 0;
                      float32x2_t v98 = v99[1];
                      uint64_t v108 = **(float32x2_t ***)&v98;
                      v99[1] = **(float32x2_t **)&v98;
                      if (v108) {
                        goto LABEL_42;
                      }
                    }
                    *(float32x2_t *)(*(void *)&v98 + 16) = v99[2];
                    *(float32x2_t *)(*(void *)&v99[2] + 8 * (**(void **)&v99[2] != (void)v99)) = v98;
                    **(void **)&float32x2_t v98 = v99;
                    goto LABEL_44;
                  }
                  *(unsigned char *)(*(void *)&v98 + 24) = 1;
                  uint64_t v95 = v99;
                  v99[3].i8[0] = v99 == v96;
                  *uint64_t v101 = 1;
                }
                while (v99 != v96);
              }
              ++v168;
              unsigned __int32 v89 = v70[1].u32[1];
            }
            __int32 v109 = v70[1].i32[0];
            uint64_t v110 = objc_msgSend_copy(v156, v83, v84, v85, v86, v87);
            uint64_t v111 = v110;
            float32x2_t v112 = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(v88), v154));
            uint64_t v114 = (char *)*((void *)v94 + 6);
            unint64_t v113 = *((void *)v94 + 7);
            if ((unint64_t)v114 < v113)
            {
              *(void *)uint64_t v114 = v110;
              *((_DWORD *)v114 + 2) = v109;
              *((_DWORD *)v114 + 3) = v89;
              uint64_t v115 = (float32x2_t *)(v114 + 24);
              *((float32x2_t *)v114 + 2) = v112;
              goto LABEL_62;
            }
            NSRange v116 = (unsigned char *)*((void *)v94 + 5);
            unint64_t v117 = 0xAAAAAAAAAAAAAAABLL * ((v114 - v116) >> 3) + 1;
            if (v117 > 0xAAAAAAAAAAAAAAALL) {
              sub_1C4A23B24();
            }
            NSRange v118 = v5;
            unint64_t v119 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v113 - (void)v116) >> 3);
            if (2 * v119 > v117) {
              unint64_t v117 = 2 * v119;
            }
            if (v119 >= 0x555555555555555) {
              unint64_t v120 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v120 = v117;
            }
            if (v120 > 0xAAAAAAAAAAAAAAALL) {
              sub_1C4949AA8();
            }
            id v121 = (char *)operator new(24 * v120);
            id v122 = (float32x2_t *)&v121[8 * ((v114 - v116) >> 3)];
            *id v122 = (float32x2_t)v111;
            id v123 = &v121[24 * v120];
            v122[1].i32[0] = v109;
            v122[1].i32[1] = v89;
            v122[2] = v112;
            uint64_t v115 = v122 + 3;
            if (v114 == v116)
            {
              *((void *)v94 + 5) = v122;
              *((void *)v94 + 6) = v115;
              *((void *)v94 + 7) = v123;
              uint64_t v5 = v118;
              if (v114) {
                goto LABEL_61;
              }
            }
            else
            {
              uint64_t v5 = v118;
              do
              {
                float32x2_t v124 = *(float32x2_t *)(v114 - 24);
                v114 -= 24;
                *(void *)uint64_t v114 = 0;
                v122[-3] = v124;
                v122 -= 3;
                *(_OWORD *)v122[1].f32 = *(_OWORD *)(v114 + 8);
              }
              while (v114 != v116);
              uint64_t v114 = (char *)*((void *)v94 + 5);
              id v125 = (char *)*((void *)v94 + 6);
              *((void *)v94 + 5) = v122;
              *((void *)v94 + 6) = v115;
              *((void *)v94 + 7) = v123;
              while (v125 != v114)
              {
                id v126 = (void *)*((void *)v125 - 3);
                v125 -= 24;
              }
              if (v114) {
LABEL_61:
              }
                operator delete(v114);
            }
LABEL_62:
            *((void *)v94 + 6) = v115;

            v70 += 3;
          }
          while (v70 != v155);
          id v128 = (float32x2_t *)__p;
          if (v158 == __p) {
            goto LABEL_73;
          }
LABEL_78:
          uint64_t v130 = v152;
          if (v128)
          {
            long long v131 = v158;
            long long v132 = v128;
            if (v158 != v128)
            {
              do
              {
                long long v133 = (void *)v131[-3];
                v131 -= 3;
              }
              while (v131 != v128);
              long long v132 = __p;
              uint64_t v130 = v152;
            }
            uint64_t v158 = v128;
            operator delete(v132);
          }
          ++v153;
          uint64_t v45 = v149;
          if (v153 != v130) {
            continue;
          }
          break;
        }
        uint64_t v57 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v65, (uint64_t)&v160, (uint64_t)v171, 16, v66);
        if (!v57)
        {
LABEL_83:

          long long __p = v166;
          uint64_t v158 = v167;
          uint64_t v159 = v168;
          if (v168)
          {
            v167[2] = (float32x2_t)&v158;
            uint64_t v166 = v5;
            const char *v5 = 0;
            v5[1] = 0;
          }
          else
          {
            long long __p = &v158;
          }

          goto LABEL_97;
        }
      }
    }
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    long long v135 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int64_t v171 = 0;
      _os_log_impl(&dword_1C492D000, v135, OS_LOG_TYPE_ERROR, "CHFastPathCharacterHolderAppleStyle failed to load character 'n' for retrieving scale of the inventory.", v171, 2u);
    }

    uint64_t v158 = 0;
    uint64_t v159 = 0;
    long long __p = &v158;
LABEL_97:
    long long v136 = (char *)v164;
    if (v164)
    {
      long long v137 = v165;
      uint64_t v138 = v164;
      if (v165 != v164)
      {
        do
        {
          id v139 = (void *)*((void *)v137 - 3);
          v137 -= 24;
        }
        while (v137 != v136);
        uint64_t v138 = v164;
      }
      id v165 = v136;
      operator delete(v138);
    }
    sub_1C4A23B3C((uint64_t)&v166, v167);
  }
  else
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    long long v134 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v134, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int64_t v171 = 0;
      _os_log_impl(&dword_1C492D000, v134, OS_LOG_TYPE_ERROR, "CHFastPathCharacterHolderAppleStyle Failed to load inventory", v171, 2u);
    }

    uint64_t v158 = 0;
    uint64_t v159 = 0;
    long long __p = &v158;
  }

  float32x2_t v140 = (float32x2_t)(v144 + 16);
  sub_1C4A23B3C(v144 + 8, *(void **)(v144 + 16));
  *(void *)(v144 + 8) = __p;
  long long v141 = v158;
  *(void *)(v144 + 16) = v158;
  uint64_t v142 = v159;
  *(void *)(v144 + 24) = v159;
  if (v142)
  {
    v141[2] = v140;
    long long __p = &v158;
    uint64_t v158 = 0;
    uint64_t v159 = 0;
    long long v141 = 0;
  }
  else
  {
    *(float32x2_t *)(v144 + 8) = v140;
  }
  sub_1C4A23B3C((uint64_t)&__p, v141);
  *(unsigned char *)(*(void *)(*(void *)(v145 + 32) + 8) + 24) = *(void *)(v144 + 24) != 0;
}

void sub_1C4A21884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char *__p,char *a40,uint64_t a41,char a42,void *a43)
{
  if (__p)
  {
    double v44 = a40;
    uint64_t v45 = __p;
    if (a40 != __p)
    {
      do
      {
        uint64_t v46 = (void *)*((void *)v44 - 3);
        v44 -= 24;
      }
      while (v44 != __p);
      uint64_t v45 = __p;
    }
    operator delete(v45);
  }
  sub_1C4A23B3C((uint64_t)&a42, a43);

  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderAppleStyle::doAddCharacter()
{
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  dispatch_queue_t v0 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl(&dword_1C492D000, v0, OS_LOG_TYPE_ERROR, "CHFastPathCharacterHolderAppleStyle addCharacter not supported!", v1, 2u);
  }
}

void CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderAppleStyle::setLocale(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderAppleStyle *this, NSLocale *a2)
{
  id v3 = a2;
  uint64_t v4 = *((void *)this + 6);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1C4A21B04;
  v6[3] = &unk_1E64E1258;
  uint64_t v7 = v3;
  uint64_t v8 = this;
  uint64_t v5 = v3;
  dispatch_sync(v4, v6);
}

void sub_1C4A21B04(uint64_t a1)
{
}

uint64_t sub_1C4A21B10(uint64_t a1)
{
  *(void *)a1 = &unk_1F2010E30;
  sub_1C4A23B3C(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void sub_1C4A21B6C(uint64_t a1)
{
  *(void *)a1 = &unk_1F2010E30;
  sub_1C4A23B3C(a1 + 8, *(void **)(a1 + 16));
  JUMPOUT(0x1C8786460);
}

void sub_1C4A21BF0(char **a1, void *a2, void *a3, int a4, void *a5)
{
  uint64_t v248 = *MEMORY[0x1E4F143B8];
  id v8 = a2;
  id v9 = a3;
  id v10 = a5;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  long long v221 = v8;
  long long v226 = v9;
  int32x4_t v219 = v10;
  long long v220 = objc_msgSend_objectForKey_(v8, v11, @"glyphs", v12, v13, v14);
  uint64_t v19 = objc_msgSend_objectForKey_(v220, v15, (uint64_t)v9, v16, v17, v18);
  uint64_t v24 = v19;
  if (v19)
  {
    uint64_t v218 = v19;
    uint64_t v25 = objc_msgSend_objectForKey_(v19, v20, @"characters", v21, v22, v23);
    double v30 = objc_msgSend_objectAtIndexedSubscript_(v25, v26, 0, v27, v28, v29);

    uint64_t v35 = objc_msgSend_objectForKey_(v24, v31, @"advance", v32, v33, v34);

    if (v35)
    {
      uint64_t v40 = objc_msgSend_objectForKey_(v24, v36, @"advance", v37, v38, v39);
      objc_msgSend_floatValue(v40, v41, v42, v43, v44, v45);
      float v47 = v46;

      if (v30)
      {
LABEL_6:
        long long v225 = v30;
        id v57 = v24;
        id v58 = v10;
        uint64_t v237 = 0;
        int32x4_t v238 = &v237;
        uint64_t v239 = 0x3032000000;
        float64x2_t v240 = sub_1C4A238D8;
        float64x2_t v241 = sub_1C4A238E8;
        id v242 = 0;
        uint64_t v231 = 0;
        uint64_t v232 = &v231;
        uint64_t v233 = 0x3032000000;
        float64x2_t v234 = sub_1C4A238D8;
        uint64_t v235 = sub_1C4A238E8;
        id v236 = 0;
        double v63 = objc_msgSend_objectForKey_(v57, v59, @"locales", v60, v61, v62);
        BOOL v64 = v63 == 0;

        if (!v64)
        {
          uint64_t v70 = objc_msgSend_localeIdentifier(v58, v65, v66, v67, v68, v69);
          uint64_t v76 = objc_msgSend_regionCode(v58, v71, v72, v73, v74, v75);
          uint64_t v81 = objc_msgSend_objectForKeyedSubscript_(v57, v77, @"locales", v78, v79, v80);
          *(void *)buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&uint8_t buf[16] = sub_1C4A238F0;
          float64x2_t v244 = &unk_1E64E2778;
          id v82 = v70;
          *(void *)float64x2_t v245 = v82;
          *(void *)&v245[16] = &v237;
          *(void *)&v245[24] = &v231;
          id v83 = v76;
          *(void *)&v245[8] = v83;
          objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v81, v84, (uint64_t)buf, v85, v86, v87);
        }
        float32x2_t v88 = v238;
        if (!v238[5]) {
          float32x2_t v88 = v232;
        }
        id v217 = (id)v88[5];
        _Block_object_dispose(&v231, 8);

        _Block_object_dispose(&v237, 8);
        if (v217)
        {
          id v93 = v226;
          if ((objc_msgSend_isEqualToString_(v217, v89, (uint64_t)v226, v90, v91, v92) & 1) == 0)
          {
            if (qword_1EA3CA000 != -1) {
              dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
            }
            uint64_t v94 = (id)qword_1EA3C9FD8;
            if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412546;
              *(void *)&uint8_t buf[4] = v217;
              *(_WORD *)&unsigned char buf[12] = 2112;
              *(void *)&buf[14] = v226;
              _os_log_impl(&dword_1C492D000, v94, OS_LOG_TYPE_DEFAULT, "CHFastPathCharacterHolderAppleStyle: use localised glyph name %@ for glyph %@", buf, 0x16u);
            }

            id v93 = v217;
          }
        }
        else
        {
          id v93 = v226;
        }
        long long v226 = v93;
        sub_1C4A22890(v221, v93);
        long long v229 = 0u;
        long long v230 = 0u;
        long long v227 = 0u;
        long long v228 = 0u;
        obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v103 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v96, (uint64_t)&v227, (uint64_t)v247, 16, v97);
        if (v103)
        {
          uint64_t v104 = *(void *)v228;
          uint64_t v105 = &qword_1EA3CA000;
          do
          {
            uint64_t v106 = 0;
            uint64_t v222 = v103;
            do
            {
              if (*(void *)v228 != v104) {
                objc_enumerationMutation(obj);
              }
              float32x2_t v107 = *(void **)(*((void *)&v227 + 1) + 8 * v106);
              if (objc_msgSend_pointCount(v107, v98, v99, v100, v101, v102))
              {
                objc_msgSend_bounds(v107, v108, v109, v110, v111, v112);
                double v114 = v113;
                objc_msgSend_bounds(v107, v115, v116, v117, v118, v119);
                double v121 = v120;
                objc_msgSend_bounds(v107, v122, v123, v124, v125, v126);
                double v128 = v127;
                if (*v105 != -1) {
                  dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
                }
                double v129 = v47 - v121 - v128;
                uint64_t v130 = (id)qword_1EA3C9FD8;
                if (os_log_type_enabled(v130, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v136 = objc_msgSend_pointCount(v107, v131, v132, v133, v134, v135);
                  objc_msgSend_bounds(v107, v137, v138, v139, v140, v141);
                  uint64_t v143 = v142;
                  objc_msgSend_bounds(v107, v144, v145, v146, v147, v148);
                  CGFloat MaxY = CGRectGetMaxY(v249);
                  *(_DWORD *)buf = 138413826;
                  *(void *)&uint8_t buf[4] = v226;
                  *(_WORD *)&unsigned char buf[12] = 2112;
                  *(void *)&buf[14] = v225;
                  *(_WORD *)&buf[22] = 2048;
                  float64x2_t v244 = (void *)v136;
                  *(_WORD *)float64x2_t v245 = 2048;
                  *(void *)&v245[2] = v143;
                  *(_WORD *)&v245[10] = 2048;
                  *(CGFloat *)&v245[12] = MaxY;
                  *(_WORD *)&v245[20] = 2048;
                  *(double *)&v245[22] = v114;
                  *(_WORD *)&v245[30] = 2048;
                  double v246 = v129;
                  _os_log_impl(&dword_1C492D000, v130, OS_LOG_TYPE_DEBUG, "CHFastPathCharacterHolderAppleStyle glyph:%@ character:%@ drawing with %lu points, miny=%f, maxy=%f leftAdvance=%f rightAdvance=%f", buf, 0x48u);
                }

                int CodepointInString = objc_msgSend_firstCodepointInString(v225, v150, v151, v152, v153, v154);
                uint64_t v161 = objc_msgSend_copy(v107, v156, v157, v158, v159, v160);
                uint64_t v162 = v161;
                float v163 = v129;
                float v164 = v114;
                uint64_t v166 = (uint64_t *)a1[1];
                unint64_t v165 = (unint64_t)a1[2];
                if ((unint64_t)v166 >= v165)
                {
                  uint64_t v169 = v104;
                  uint64_t v170 = a1;
                  int64_t v171 = v105;
                  uint64_t v172 = v170;
                  uint64_t v173 = (uint64_t *)*v170;
                  unint64_t v174 = 0xAAAAAAAAAAAAAAABLL * (((char *)v166 - *v170) >> 3);
                  unint64_t v175 = v174 + 1;
                  if (v174 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    sub_1C4A23B24();
                  }
                  unint64_t v176 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v165 - (void)v173) >> 3);
                  if (2 * v176 > v175) {
                    unint64_t v175 = 2 * v176;
                  }
                  if (v176 >= 0x555555555555555) {
                    unint64_t v177 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v177 = v175;
                  }
                  if (v177 > 0xAAAAAAAAAAAAAAALL) {
                    sub_1C4949AA8();
                  }
                  uint64_t v178 = (char *)operator new(24 * v177);
                  uint64_t v179 = &v178[24 * v174];
                  *(void *)uint64_t v179 = v162;
                  *((_DWORD *)v179 + 2) = a4;
                  *((_DWORD *)v179 + 3) = CodepointInString;
                  uint64_t v180 = &v178[24 * v177];
                  *((float *)v179 + 4) = v164;
                  *((float *)v179 + 5) = v163;
                  uint64_t v167 = v179 + 24;
                  if (v166 == v173)
                  {
                    *uint64_t v172 = v179;
                    v172[1] = v167;
                    v172[2] = v180;
                    uint64_t v105 = v171;
                    a1 = v172;
                    uint64_t v104 = v169;
                    uint64_t v103 = v222;
                    if (!v166) {
                      goto LABEL_53;
                    }
                  }
                  else
                  {
                    uint64_t v181 = v166;
                    uint64_t v105 = v171;
                    do
                    {
                      uint64_t v182 = *(v181 - 3);
                      v181 -= 3;
                      uint64_t *v181 = 0;
                      *((void *)v179 - 3) = v182;
                      v179 -= 24;
                      *(_OWORD *)(v179 + 8) = *(_OWORD *)(v181 + 1);
                    }
                    while (v181 != v173);
                    a1 = v172;
                    *uint64_t v172 = v179;
                    v172[1] = v167;
                    v172[2] = v180;
                    uint64_t v104 = v169;
                    uint64_t v103 = v222;
                    do
                    {
                      uint64_t v183 = (void *)*(v166 - 3);
                      v166 -= 3;
                    }
                    while (v166 != v173);
                    uint64_t v166 = v173;
                    if (!v173) {
                      goto LABEL_53;
                    }
                  }
                  operator delete(v166);
                }
                else
                {
                  *uint64_t v166 = v161;
                  *((_DWORD *)v166 + 2) = a4;
                  *((_DWORD *)v166 + 3) = CodepointInString;
                  uint64_t v167 = (char *)(v166 + 3);
                  *((float *)v166 + 4) = v164;
                  *((float *)v166 + 5) = v163;
                }
LABEL_53:
                uint64_t v168 = 0;
                a1[1] = v167;
                goto LABEL_54;
              }
              if (*v105 != -1) {
                dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
              }
              uint64_t v168 = (id)qword_1EA3C9FD8;
              if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                *(void *)&uint8_t buf[4] = v226;
                _os_log_impl(&dword_1C492D000, v168, OS_LOG_TYPE_ERROR, "CHFastPathCharacterHolderAppleStyle: drawing for char %@. Skip it.", buf, 0xCu);
              }
LABEL_54:

              ++v106;
            }
            while (v106 != v103);
            uint64_t v184 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v98, (uint64_t)&v227, (uint64_t)v247, 16, v102);
            uint64_t v103 = v184;
          }
          while (v184);
        }

        if (*a1 == a1[1]
          && objc_msgSend_isEqualToString_(v226, v185, @"space", v186, v187, v188))
        {
          uint64_t v189 = objc_alloc_init(CHDrawing);
          int v195 = objc_msgSend_firstCodepointInString(v225, v190, v191, v192, v193, v194);
          uint64_t v201 = objc_msgSend_copy(v189, v196, v197, v198, v199, v200);
          uint64_t v202 = v201;
          uint64_t v204 = (uint64_t *)a1[1];
          unint64_t v203 = (unint64_t)a1[2];
          if ((unint64_t)v204 >= v203)
          {
            float v206 = (uint64_t *)*a1;
            unint64_t v207 = 0xAAAAAAAAAAAAAAABLL * (((char *)v204 - *a1) >> 3);
            unint64_t v208 = v207 + 1;
            if (v207 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_1C4A23B24();
            }
            unint64_t v209 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v203 - (void)v206) >> 3);
            if (2 * v209 > v208) {
              unint64_t v208 = 2 * v209;
            }
            if (v209 >= 0x555555555555555) {
              unint64_t v210 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v210 = v208;
            }
            if (v210 > 0xAAAAAAAAAAAAAAALL) {
              sub_1C4949AA8();
            }
            uint64_t v211 = (char *)operator new(24 * v210);
            uint64_t v212 = &v211[24 * v207];
            *(void *)uint64_t v212 = v202;
            *((_DWORD *)v212 + 2) = a4;
            *((_DWORD *)v212 + 3) = v195;
            uint64_t v213 = &v211[24 * v210];
            *((_DWORD *)v212 + 4) = 0;
            *((float *)v212 + 5) = v47;
            float v205 = v212 + 24;
            if (v204 == v206)
            {
              *a1 = v212;
              a1[1] = v205;
              a1[2] = v213;
            }
            else
            {
              unint64_t v214 = v204;
              do
              {
                uint64_t v215 = *(v214 - 3);
                v214 -= 3;
                *unint64_t v214 = 0;
                *((void *)v212 - 3) = v215;
                v212 -= 24;
                *(_OWORD *)(v212 + 8) = *(_OWORD *)(v214 + 1);
              }
              while (v214 != v206);
              *a1 = v212;
              a1[1] = v205;
              a1[2] = v213;
              do
              {
                float64x2_t v216 = (void *)*(v204 - 3);
                v204 -= 3;
              }
              while (v204 != v206);
              uint64_t v204 = v206;
            }
            if (v204) {
              operator delete(v204);
            }
          }
          else
          {
            *uint64_t v204 = v201;
            *((_DWORD *)v204 + 2) = a4;
            *((_DWORD *)v204 + 3) = v195;
            *((_DWORD *)v204 + 4) = 0;
            float v205 = (char *)(v204 + 3);
            *((float *)v204 + 5) = v47;
          }
          a1[1] = v205;
        }
        double v30 = v225;
        goto LABEL_85;
      }
      if (objc_msgSend_isEqualToString_(v9, v48, @".notdef", v49, v50, v51))
      {
        double v30 = unicodeToNSString(9633, v52, v53, v54, v55, v56);
        goto LABEL_6;
      }
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      double v30 = (id)qword_1EA3C9FD8;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v9;
        _os_log_impl(&dword_1C492D000, v30, OS_LOG_TYPE_DEFAULT, "CHFastPathCharacterHolderAppleStyle: empty characters field for glyph %@. Skip it", buf, 0xCu);
      }
    }
    else
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v95 = (id)qword_1EA3C9FD8;
      if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v9;
        _os_log_impl(&dword_1C492D000, v95, OS_LOG_TYPE_DEFAULT, "CHFastPathCharacterHolderAppleStyle: no advance for glyph %@. Skip it", buf, 0xCu);
      }
    }
LABEL_85:

    uint64_t v24 = v218;
  }
}

void sub_1C4A22698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23,void *a24)
{
  sub_1C4A22830(v25);
  _Unwind_Resume(a1);
}

void **sub_1C4A22830(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    id v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 3);
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

NSObject *sub_1C4A22890(void *a1, void *a2)
{
  uint64_t v368 = *MEMORY[0x1E4F143B8];
  id v306 = a1;
  id v307 = a2;
  id v3 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  v302 = objc_msgSend_objectForKey_(v306, v4, @"glyphs", v5, v6, v7);
  uint64_t v12 = objc_msgSend_objectForKey_(v302, v8, (uint64_t)v307, v9, v10, v11);
  v301 = v12;
  if (v12)
  {
    id v13 = v12;
    id v317 = v306;
    uint64_t v305 = v13;
    v310 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v18 = objc_msgSend_objectForKey_(v13, v14, @"components", v15, v16, v17);

    if (v18)
    {
      objc_msgSend_objectForKeyedSubscript_(v305, v19, @"components", v20, v21, v22);
      long long v349 = 0u;
      long long v350 = 0u;
      long long v347 = 0u;
      long long v348 = 0u;
      obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v300 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v23, (uint64_t)&v347, (uint64_t)v365, 16, v24);
      if (!v300) {
        goto LABEL_76;
      }
      uint64_t v304 = *(void *)v348;
      __asm { FMOV            V0.2D, #1.0 }
      CGSize v303 = _Q0;
      *(void *)&_Q0.CGFloat width = 138412290;
      CGSize v298 = _Q0;
      while (1)
      {
        uint64_t v311 = 0;
        do
        {
          if (*(void *)v348 != v304) {
            objc_enumerationMutation(obj);
          }
          uint64_t v35 = *(void **)(*((void *)&v347 + 1) + 8 * v311);
          if (objc_msgSend_count(v35, v25, v26, v27, v28, v29, v298) != 2)
          {
            if (qword_1EA3CA000 != -1) {
              dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
            }
            uint64_t v40 = (id)qword_1EA3C9F90[0];
            if (os_log_type_enabled(v40, OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1C492D000, v40, OS_LOG_TYPE_FAULT, "CHFastPathCharacterHolderAppleStyle: Expected exactly 2 elements in the component: GlyphName and AffineTransform", buf, 2u);
            }
          }
          uint64_t v313 = objc_msgSend_objectAtIndexedSubscript_(v35, v36, 0, v37, v38, v39);
          if (!v313)
          {
            if (qword_1EA3CA000 != -1) {
              dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
            }
            uint64_t v45 = (id)qword_1EA3C9F90[0];
            if (os_log_type_enabled(v45, OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1C492D000, v45, OS_LOG_TYPE_FAULT, "CHFastPathCharacterHolderAppleStyle: Component glyph name is nil", buf, 2u);
            }
          }
          float v46 = objc_msgSend_objectAtIndexedSubscript_(v35, v41, 1, v42, v43, v44);
          if (!v46)
          {
            if (qword_1EA3CA000 != -1) {
              dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
            }
            uint64_t v52 = (id)qword_1EA3C9F90[0];
            if (os_log_type_enabled(v52, OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1C492D000, v52, OS_LOG_TYPE_FAULT, "CHFastPathCharacterHolderAppleStyle: affine transform for component is nil", buf, 2u);
            }

            float v46 = 0;
          }
          v308 = v46;
          if (objc_msgSend_count(v46, v47, v48, v49, v50, v51) != 6)
          {
            if (qword_1EA3CA000 != -1) {
              dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
            }
            uint64_t v53 = (id)qword_1EA3C9F90[0];
            if (os_log_type_enabled(v53, OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1C492D000, v53, OS_LOG_TYPE_FAULT, "CHFastPathCharacterHolderAppleStyle: affine transform for component should has length 6", buf, 2u);
            }
          }
          sub_1C4A22890(v317, v313);
          id v309 = (id)objc_claimAutoreleasedReturnValue();
          id v315 = v308;
          id v58 = objc_msgSend_objectAtIndexedSubscript_(v315, v54, 0, v55, v56, v57);
          objc_msgSend_floatValue(v58, v59, v60, v61, v62, v63);
          if (v68 == 1.0)
          {
            uint64_t v69 = objc_msgSend_objectAtIndexedSubscript_(v315, v64, 0, v65, v66, v67);
            objc_msgSend_floatValue(v69, v70, v71, v72, v73, v74);
            if (v79 == 1.0)
            {
              uint64_t v80 = objc_msgSend_objectAtIndexedSubscript_(v315, v75, 0, v76, v77, v78);
              objc_msgSend_floatValue(v80, v81, v82, v83, v84, v85);
              if (v90 == 1.0)
              {
                uint64_t v91 = objc_msgSend_objectAtIndexedSubscript_(v315, v86, 0, v87, v88, v89);
                objc_msgSend_floatValue(v91, v92, v93, v94, v95, v96);
                BOOL v98 = v97 == 1.0;

                if (v98) {
                  goto LABEL_45;
                }
                goto LABEL_40;
              }
            }
          }

LABEL_40:
          if (qword_1EA3CA000 != -1) {
            dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
          }
          uint64_t v99 = (id)qword_1EA3C9F90[0];
          if (os_log_type_enabled(v99, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1C492D000, v99, OS_LOG_TYPE_FAULT, "CHFastPathCharacterHolderAppleStyle: unsupported componentTransform", buf, 2u);
          }

LABEL_45:
          id v328 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
          uint64_t v104 = objc_msgSend_objectAtIndexedSubscript_(v315, v100, 4, v101, v102, v103);
          objc_msgSend_floatValue(v104, v105, v106, v107, v108, v109);
          float v111 = v110;
          uint64_t v116 = objc_msgSend_objectAtIndexedSubscript_(v315, v112, 5, v113, v114, v115);
          objc_msgSend_floatValue(v116, v117, v118, v119, v120, v121);
          float v123 = v122;

          memset(&v357, 0, sizeof(v357));
          components.scale = v303;
          components.horizontalShear = 0.0;
          components.rotatiouint64_t n = 0.0;
          components.translation.dCGFloat x = v111;
          components.translation.dCGFloat y = (float)-v123;
          CGAffineTransformMakeWithComponents(&v357, &components);
          long long v354 = 0u;
          long long v355 = 0u;
          long long v352 = 0u;
          long long v353 = 0u;
          id v325 = v309;
          uint64_t v130 = objc_msgSend_countByEnumeratingWithState_objects_count_(v325, v124, (uint64_t)&v352, (uint64_t)buf, 16, v125);
          if (v130)
          {
            uint64_t v131 = *(void *)v353;
            do
            {
              for (uint64_t i = 0; i != v130; ++i)
              {
                if (*(void *)v353 != v131) {
                  objc_enumerationMutation(v325);
                }
                uint64_t v133 = *(void **)(*((void *)&v352 + 1) + 8 * i);
                CGAffineTransform v351 = v357;
                uint64_t v134 = objc_msgSend_newDrawingWithAffineTransform_(v133, v126, (uint64_t)&v351, v127, v128, v129);
                objc_msgSend_addObject_(v328, v135, (uint64_t)v134, v136, v137, v138);
              }
              uint64_t v130 = objc_msgSend_countByEnumeratingWithState_objects_count_(v325, v126, (uint64_t)&v352, (uint64_t)buf, 16, v129);
            }
            while (v130);
          }

          if (objc_msgSend_count(v328, v139, v140, v141, v142, v143))
          {
            if (objc_msgSend_count(v310, v144, v145, v146, v147, v148))
            {
              uint64_t v154 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
              long long v345 = 0u;
              long long v346 = 0u;
              long long v343 = 0u;
              long long v344 = 0u;
              v319 = v310;
              uint64_t v157 = objc_msgSend_countByEnumeratingWithState_objects_count_(v319, v155, (uint64_t)&v343, (uint64_t)v364, 16, v156);
              if (v157)
              {
                uint64_t v321 = *(void *)v344;
                do
                {
                  uint64_t v323 = v157;
                  for (uint64_t j = 0; j != v323; ++j)
                  {
                    if (*(void *)v344 != v321) {
                      objc_enumerationMutation(v319);
                    }
                    uint64_t v159 = *(void **)(*((void *)&v343 + 1) + 8 * j);
                    long long v339 = 0u;
                    long long v340 = 0u;
                    long long v341 = 0u;
                    long long v342 = 0u;
                    id v160 = v328;
                    uint64_t v168 = objc_msgSend_countByEnumeratingWithState_objects_count_(v160, v161, (uint64_t)&v339, (uint64_t)&v360, 16, v162);
                    if (v168)
                    {
                      uint64_t v169 = *(void *)v340;
                      do
                      {
                        for (uint64_t k = 0; k != v168; ++k)
                        {
                          if (*(void *)v340 != v169) {
                            objc_enumerationMutation(v160);
                          }
                          uint64_t v171 = *(void *)(*((void *)&v339 + 1) + 8 * k);
                          uint64_t v172 = objc_msgSend_copy(v159, v163, v164, v165, v166, v167);
                          objc_msgSend_appendDrawing_(v172, v173, v171, v174, v175, v176);
                          objc_msgSend_addObject_(v154, v177, (uint64_t)v172, v178, v179, v180);
                        }
                        uint64_t v168 = objc_msgSend_countByEnumeratingWithState_objects_count_(v160, v163, (uint64_t)&v339, (uint64_t)&v360, 16, v167);
                      }
                      while (v168);
                    }
                  }
                  uint64_t v157 = objc_msgSend_countByEnumeratingWithState_objects_count_(v319, v181, (uint64_t)&v343, (uint64_t)v364, 16, v182);
                }
                while (v157);
              }

              v310 = v154;
              uint64_t v183 = v319;
            }
            else
            {
              uint64_t v183 = v310;
              v310 = objc_msgSend_copy(v328, v149, v150, v151, v152, v153);
            }
          }
          else
          {
            if (qword_1EA3CA000 != -1) {
              dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
            }
            uint64_t v183 = (id)qword_1EA3C9FD8;
            if (os_log_type_enabled(v183, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = LODWORD(v298.width);
              v367 = v313;
              _os_log_impl(&dword_1C492D000, v183, OS_LOG_TYPE_ERROR, "CHFastPathCharacterHolderAppleStyle: No drawings for component %@", buf, 0xCu);
            }
          }

          ++v311;
        }
        while (v311 != v300);
        uint64_t v300 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v25, (uint64_t)&v347, (uint64_t)v365, 16, v29);
        if (!v300)
        {
LABEL_76:

          uint64_t v184 = v310;
          uint64_t v185 = v184;
          goto LABEL_79;
        }
      }
    }
    uint64_t v185 = v310;
LABEL_79:
    v322 = v185;

    id v187 = v305;
    v318 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v324 = v187;
    uint64_t v192 = objc_msgSend_objectForKey_(v187, v188, @"paths", v189, v190, v191);
    LOBYTE(v187) = v192 == 0;

    if ((v187 & 1) == 0)
    {
      uint64_t v197 = objc_msgSend_objectForKeyedSubscript_(v324, v193, @"paths", v194, v195, v196);
      long long v363 = 0u;
      long long v361 = 0u;
      long long v362 = 0u;
      long long v360 = 0u;
      id v316 = v197;
      uint64_t v312 = objc_msgSend_countByEnumeratingWithState_objects_count_(v316, v198, (uint64_t)&v360, (uint64_t)buf, 16, v199);
      if (v312)
      {
        uint64_t v314 = *(void *)v361;
        do
        {
          for (id m = 0; m != (id)v312; id m = (char *)m + 1)
          {
            if (*(void *)v361 != v314) {
              objc_enumerationMutation(v316);
            }
            uint64_t v200 = *(void **)(*((void *)&v360 + 1) + 8 * (void)m);
            uint64_t v201 = objc_alloc_init(CHDrawing);
            long long v354 = 0u;
            long long v355 = 0u;
            long long v352 = 0u;
            long long v353 = 0u;
            id v326 = v200;
            uint64_t v204 = objc_msgSend_countByEnumeratingWithState_objects_count_(v326, v202, (uint64_t)&v352, (uint64_t)v365, 16, v203);
            if (v204)
            {
              uint64_t v329 = *(void *)v353;
              do
              {
                for (uint64_t n = 0; n != v204; ++n)
                {
                  if (*(void *)v353 != v329) {
                    objc_enumerationMutation(v326);
                  }
                  float v206 = *(void **)(*((void *)&v352 + 1) + 8 * n);
                  long long v347 = 0u;
                  long long v348 = 0u;
                  long long v349 = 0u;
                  long long v350 = 0u;
                  id v207 = v206;
                  uint64_t v214 = objc_msgSend_countByEnumeratingWithState_objects_count_(v207, v208, (uint64_t)&v347, (uint64_t)v364, 16, v209);
                  if (v214)
                  {
                    uint64_t v215 = *(void *)v348;
                    do
                    {
                      for (iuint64_t i = 0; ii != v214; ++ii)
                      {
                        if (*(void *)v348 != v215) {
                          objc_enumerationMutation(v207);
                        }
                        id v217 = *(void **)(*((void *)&v347 + 1) + 8 * ii);
                        uint64_t v218 = objc_msgSend_objectAtIndex_(v217, v210, 0, v211, v212, v213);
                        objc_msgSend_floatValue(v218, v219, v220, v221, v222, v223);
                        float v225 = v224;

                        long long v230 = objc_msgSend_objectAtIndex_(v217, v226, 1, v227, v228, v229);
                        objc_msgSend_floatValue(v230, v231, v232, v233, v234, v235);
                        float v237 = v236;

                        objc_msgSend_addPoint_(v201, v238, v239, v240, v241, v242, v225, -v237);
                      }
                      uint64_t v214 = objc_msgSend_countByEnumeratingWithState_objects_count_(v207, v210, (uint64_t)&v347, (uint64_t)v364, 16, v213);
                    }
                    while (v214);
                  }

                  objc_msgSend_endStroke(v201, v243, v244, v245, v246, v247);
                }
                uint64_t v204 = objc_msgSend_countByEnumeratingWithState_objects_count_(v326, v248, (uint64_t)&v352, (uint64_t)v365, 16, v249);
              }
              while (v204);
            }

            objc_msgSend_addObject_(v318, v250, (uint64_t)v201, v251, v252, v253);
          }
          uint64_t v312 = objc_msgSend_countByEnumeratingWithState_objects_count_(v316, v254, (uint64_t)&v360, (uint64_t)buf, 16, v255);
        }
        while (v312);
      }
    }
    uint64_t v261 = objc_msgSend_count(v322, v256, v257, v258, v259, v260);
    uint64_t v267 = v318;
    if (v261)
    {
      uint64_t v268 = objc_msgSend_count(v318, v262, v263, v264, v265, v266);
      uint64_t v267 = v322;
      if (v268)
      {
        long long v337 = 0u;
        long long v338 = 0u;
        long long v335 = 0u;
        long long v336 = 0u;
        v327 = v322;
        uint64_t v271 = objc_msgSend_countByEnumeratingWithState_objects_count_(v327, v269, (uint64_t)&v335, (uint64_t)v359, 16, v270);
        if (v271)
        {
          uint64_t v330 = *(void *)v336;
          do
          {
            for (juint64_t j = 0; jj != v271; ++jj)
            {
              if (*(void *)v336 != v330) {
                objc_enumerationMutation(v327);
              }
              BOOL v273 = *(void **)(*((void *)&v335 + 1) + 8 * jj);
              long long v331 = 0u;
              long long v332 = 0u;
              long long v333 = 0u;
              long long v334 = 0u;
              double v274 = v318;
              uint64_t v282 = objc_msgSend_countByEnumeratingWithState_objects_count_(v274, v275, (uint64_t)&v331, (uint64_t)v358, 16, v276);
              if (v282)
              {
                uint64_t v283 = *(void *)v332;
                do
                {
                  for (kuint64_t k = 0; kk != v282; ++kk)
                  {
                    if (*(void *)v332 != v283) {
                      objc_enumerationMutation(v274);
                    }
                    uint64_t v285 = *(void *)(*((void *)&v331 + 1) + 8 * kk);
                    uint64_t v286 = objc_msgSend_copy(v273, v277, v278, v279, v280, v281);
                    objc_msgSend_appendDrawing_(v286, v287, v285, v288, v289, v290);
                    objc_msgSend_addObject_(v3, v291, (uint64_t)v286, v292, v293, v294);
                  }
                  uint64_t v282 = objc_msgSend_countByEnumeratingWithState_objects_count_(v274, v277, (uint64_t)&v331, (uint64_t)v358, 16, v281);
                }
                while (v282);
              }
            }
            uint64_t v271 = objc_msgSend_countByEnumeratingWithState_objects_count_(v327, v295, (uint64_t)&v335, (uint64_t)v359, 16, v296);
          }
          while (v271);
        }

        uint64_t v267 = v3;
      }
    }
    uint64_t v186 = v267;
  }
  else
  {
    uint64_t v186 = v3;
  }

  return v186;
}

void sub_1C4A235D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,uint64_t a30,void *a31,void *a32)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A238D8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4A238E8(uint64_t a1)
{
}

void sub_1C4A238F0(uint64_t *a1, void *a2, void *a3, unsigned char *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v8 = a2;
  id v9 = a3;
  if (objc_msgSend_containsObject_(v9, v10, a1[4], v11, v12, v13))
  {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a2);
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v18 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = *(void *)(*(void *)(a1[6] + 8) + 40);
      uint64_t v20 = a1[4];
      int v24 = 138412546;
      uint64_t v25 = v19;
      __int16 v26 = 2112;
      uint64_t v27 = v20;
      _os_log_impl(&dword_1C492D000, v18, OS_LOG_TYPE_DEFAULT, "CHFastPathCharacterHolderAppleStyle: localised version with glyph name %@ and locale %@ was found", (uint8_t *)&v24, 0x16u);
    }

    *a4 = 1;
  }
  else if (!*(void *)(*(void *)(a1[7] + 8) + 40) {
         && objc_msgSend_containsObject_(v9, v14, a1[5], v15, v16, v17))
  }
  {
    objc_storeStrong((id *)(*(void *)(a1[7] + 8) + 40), a2);
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v21 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = *(void *)(*(void *)(a1[7] + 8) + 40);
      uint64_t v23 = a1[5];
      int v24 = 138412546;
      uint64_t v25 = v22;
      __int16 v26 = 2112;
      uint64_t v27 = v23;
      _os_log_impl(&dword_1C492D000, v21, OS_LOG_TYPE_DEFAULT, "CHFastPathCharacterHolderAppleStyle: localised version with glyph name %@ and locale %@ was found", (uint8_t *)&v24, 0x16u);
    }
  }
}

void sub_1C4A23B0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A23B24()
{
}

void sub_1C4A23B3C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1C4A23B3C(a1, *a2);
    sub_1C4A23B3C(a1, a2[1]);
    uint64_t v4 = a2[5];
    if (v4)
    {
      uint64_t v5 = a2[6];
      uint64_t v6 = (void *)a2[5];
      if (v5 != v4)
      {
        do
        {
          uint64_t v7 = *(void **)(v5 - 24);
          v5 -= 24;
        }
        while (v5 != v4);
        uint64_t v6 = (void *)a2[5];
      }
      a2[6] = v4;
      operator delete(v6);
    }
    operator delete(a2);
  }
}

void sub_1C4A241F4(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1C4A242A8(int a1, id val)
{
}

void sub_1C4A242B0(id val)
{
  if (val)
  {
    objc_initWeak(&location, val);
    uint64_t v2 = (void *)*((void *)val + 7);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = sub_1C4A24780;
    v7[3] = &unk_1E64E27C8;
    v7[4] = val;
    objc_copyWeak(&v8, &location);
    objc_msgSend_queryTextReplacementsWithCallback_(v2, v3, (uint64_t)v7, v4, v5, v6);
    objc_destroyWeak(&v8);
    objc_destroyWeak(&location);
  }
}

void sub_1C4A24360(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1C4A244B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)CHInputContextLexiconManager;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C4A244E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 16);
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v4 = (id)qword_1EA3C9FB0;
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG);
  if (v3)
  {
    if (v5)
    {
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl(&dword_1C492D000, v4, OS_LOG_TYPE_DEBUG, "Removing contact update observer", v40, 2u);
    }

    id v6 = sub_1C4A25118();
    uint64_t v4 = objc_msgSend_sharedManager(v6, v7, v8, v9, v10, v11);
    objc_msgSend_removeContactObserver_(v4, v12, *(void *)(v2 + 16), v13, v14, v15);
  }
  else if (v5)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C492D000, v4, OS_LOG_TYPE_DEBUG, "No contact update observer to remove.", buf, 2u);
  }

  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(v16 + 24);
  if (qword_1EA3CA000 == -1)
  {
    uint64_t v18 = (id)qword_1EA3C9FB0;
    BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG);
    if (v17)
    {
LABEL_11:
      if (v19)
      {
        *(_WORD *)uint64_t v42 = 0;
        _os_log_impl(&dword_1C492D000, v18, OS_LOG_TYPE_DEBUG, "Removing named entity lexicon update observer", v42, 2u);
      }

      id v20 = sub_1C4A25118();
      uint64_t v18 = objc_msgSend_sharedManager(v20, v21, v22, v23, v24, v25);
      objc_msgSend_removeNamedEntitiesUpdateObserver_(v18, v26, *(void *)(v16 + 24), v27, v28, v29);
      goto LABEL_17;
    }
  }
  else
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v18 = (id)qword_1EA3C9FB0;
    BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG);
    if (v17) {
      goto LABEL_11;
    }
  }
  if (v19)
  {
    *(_WORD *)uint64_t v43 = 0;
    _os_log_impl(&dword_1C492D000, v18, OS_LOG_TYPE_DEBUG, "No named entity lexicon update observer to remove.", v43, 2u);
  }
LABEL_17:

  double v30 = *(void **)(a1 + 32);
  double v31 = (const void *)v30[12];
  if (v31)
  {
    CFRelease(v31);
    *(void *)(*(void *)(a1 + 32) + 96) = 0;
    double v30 = *(void **)(a1 + 32);
  }
  uint64_t v32 = (const void *)v30[10];
  if (v32)
  {
    CFRelease(v32);
    *(void *)(*(void *)(a1 + 32) + 80) = 0;
    double v30 = *(void **)(a1 + 32);
  }
  uint64_t v33 = (const void *)v30[13];
  if (v33)
  {
    CFRelease(v33);
    *(void *)(*(void *)(a1 + 32) + 104) = 0;
    double v30 = *(void **)(a1 + 32);
  }
  uint64_t v34 = (void *)v30[6];
  v30[6] = 0;

  uint64_t v35 = *(void *)(a1 + 32);
  uint64_t v36 = *(void **)(v35 + 56);
  *(void *)(v35 + 56) = 0;

  uint64_t v37 = *(void *)(a1 + 32);
  uint64_t v38 = *(void **)(v37 + 72);
  *(void *)(v37 + 72) = 0;

  uint64_t v39 = *(const void **)(*(void *)(a1 + 32) + 64);
  if (v39)
  {
    CFRelease(v39);
    *(void *)(*(void *)(a1 + 32) + 64) = 0;
  }
}

void sub_1C4A24748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A24758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A24768(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4A24780(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4A24844;
  block[3] = &unk_1E64E27A0;
  objc_copyWeak(&v10, (id *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 32);
  id v8 = v3;
  uint64_t v9 = v5;
  id v6 = v3;
  dispatch_async(v4, block);

  objc_destroyWeak(&v10);
}

void sub_1C4A24844(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (id *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    id v4 = *(id *)(a1 + 32);
    uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v27, (uint64_t)v31, 16, v6);
    if (v12)
    {
      uint64_t v13 = *(void *)v28;
      do
      {
        for (uint64_t i = 0; i != v12; ++i)
        {
          if (*(void *)v28 != v13) {
            objc_enumerationMutation(v4);
          }
          uint64_t v15 = *(void **)(*((void *)&v27 + 1) + 8 * i);
          objc_msgSend_shortcut(v15, v7, v8, v9, v10, v11, (void)v27);
          uint64_t v16 = (__CFString *)objc_claimAutoreleasedReturnValue();
          uint64_t v22 = objc_msgSend_phrase(v15, v17, v18, v19, v20, v21);
          objc_msgSend_setObject_forKey_(*(void **)(*(void *)(a1 + 40) + 48), v23, (uint64_t)v22, (uint64_t)v16, v24, v25);
          id v26 = objc_loadWeakRetained(v2);
          sub_1C4A249F8((uint64_t)v26, v16);
        }
        uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v27, (uint64_t)v31, 16, v11);
      }
      while (v12);
    }
  }
}

void sub_1C4A249AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A249F8(uint64_t a1, CFStringRef theString)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (!*(void *)(a1 + 96))
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      id v4 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1C492D000, v4, OS_LOG_TYPE_FAULT, "Transient lexicon must be non-nil", buf, 2u);
      }
    }
    if (CFStringGetLength(theString) >= 1)
    {
      sub_1C4A25C48(a1);
      objc_msgSend_splitStringIntoSubtokensForLexicon_minLength_(CHLanguageUtilities, v5, (uint64_t)theString, 3, v6, v7);
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      id v8 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v16, (uint64_t)v21, 16, v10);
      if (v11)
      {
        uint64_t v12 = *(void *)v17;
        do
        {
          for (uint64_t i = 0; i != v11; ++i)
          {
            if (*(void *)v17 != v12) {
              objc_enumerationMutation(v8);
            }
            sub_1C4A25C48(a1);
          }
          uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v14, (uint64_t)&v16, (uint64_t)v21, 16, v15);
        }
        while (v11);
      }
    }
  }
}

void sub_1C4A24BA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A24CBC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4A24CCC(uint64_t a1)
{
}

void sub_1C4A24CD4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_copy(*(void **)(*(void *)(a1 + 32) + 48), a2, a3, a4, a5, a6);
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

void sub_1C4A24E10(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_copy(*(void **)(*(void *)(a1 + 32) + 72), a2, a3, a4, a5, a6);
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

void sub_1C4A24E5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v11 = objc_msgSend_lexiconQueue(WeakRetained, v6, v7, v8, v9, v10);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = sub_1C4A24F54;
  v13[3] = &unk_1E64E27F0;
  id v14 = v3;
  id v12 = v3;
  objc_copyWeak(&v15, v4);
  dispatch_async(v11, v13);

  objc_destroyWeak(&v15);
}

void sub_1C4A24F40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A24F54(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_copy(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  uint64_t v8 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v10 = v7;
  if (WeakRetained)
  {
    LMVocabularyReset();
    LMVocabularySetLanguages();
    uint64_t v21 = MEMORY[0x1E4F143A8];
    uint64_t v22 = 3221225472;
    uint64_t v23 = sub_1C4A26164;
    uint64_t v24 = &unk_1E64E2890;
    id v25 = WeakRetained;
    objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v10, v11, (uint64_t)&v21, v12, v13, v14);
  }

  id v15 = objc_loadWeakRetained(v8);
  id v20 = v10;
  if (v15)
  {
    if (qword_1EA3C8F38 != -1) {
      dispatch_once(&qword_1EA3C8F38, &unk_1F2012BF0);
    }
    uint64_t v21 = MEMORY[0x1E4F143A8];
    uint64_t v22 = 3221225472;
    uint64_t v23 = sub_1C4A25EA4;
    uint64_t v24 = &unk_1E64E2890;
    id v25 = v15;
    objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v20, v16, (uint64_t)&v21, v17, v18, v19, v20);
  }
}

void sub_1C4A250D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A250E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A25100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4A25118()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  dispatch_queue_t v0 = (void *)qword_1EA3C91C0;
  uint64_t v7 = qword_1EA3C91C0;
  if (!qword_1EA3C91C0)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_1C4A26A54;
    v3[3] = &unk_1E64E1A88;
    v3[4] = &v4;
    sub_1C4A26A54((uint64_t)v3);
    dispatch_queue_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1C4A251E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A25500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A25540()
{
  MutableCopCGFloat y = (const void *)LXEntryCreateMutableCopy();
  LXEntryGetTokenID();
  LXEntryGetTimestamp();
  LXLexiconAddEntryWithTokenID();
  CFRelease(MutableCopy);
}

void sub_1C4A255BC(uint64_t a1)
{
  id v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v8 = objc_msgSend_lexiconQueue(WeakRetained, v3, v4, v5, v6, v7);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4A25684;
  block[3] = &unk_1E64E1E78;
  objc_copyWeak(&v10, v1);
  dispatch_async(v8, block);

  objc_destroyWeak(&v10);
}

void sub_1C4A25674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A25684(uint64_t a1)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    id v1 = (id)qword_1EA3C9FB0;
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C492D000, v1, OS_LOG_TYPE_DEBUG, "Updating named entity lexicons", buf, 2u);
    }

    id v2 = sub_1C4A25118();
    uint64_t v8 = objc_msgSend_sharedManager(v2, v3, v4, v5, v6, v7);
    uint64_t v13 = objc_msgSend_loadLexiconsUsingFilter_(v8, v9, 0, v10, v11, v12);

    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    id v14 = v13;
    uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v39, (uint64_t)buf, 16, v16);
    if (v22)
    {
      uint64_t v24 = *(void *)v40;
      *(void *)&long long v23 = 134217984;
      long long v37 = v23;
      do
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          if (*(void *)v40 != v24) {
            objc_enumerationMutation(v14);
          }
          id v26 = *(void **)(*((void *)&v39 + 1) + 8 * i);
          if (objc_msgSend_typeFlags(v26, v17, v18, v19, v20, v21, v37))
          {
            LexiconImplementatiouint64_t n = (const void *)objc_msgSend_getLexiconImplementation(v26, v17, v18, v19, v20, v21);
            CFTypeRef v28 = CFRetain(LexiconImplementation);
            char v34 = objc_msgSend_typeFlags(v26, v29, v30, v31, v32, v33);
            if (qword_1EA3CA000 != -1) {
              dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
            }
            uint64_t v35 = (id)qword_1EA3C9FB0;
            if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(v44) = v37;
              *(void *)((char *)&v44 + 4) = v28;
              _os_log_impl(&dword_1C492D000, v35, OS_LOG_TYPE_DEBUG, "Adding named entity lexicon %p", (uint8_t *)&v44, 0xCu);
            }

            RootCursor = (const void *)LXLexiconCreateRootCursor();
            *(void *)&long long v44 = MEMORY[0x1E4F143A8];
            *((void *)&v44 + 1) = 3221225472;
            uint64_t v45 = sub_1C4A259C0;
            float v46 = &unk_1E64E2868;
            BOOL v48 = (v34 & 4) != 0;
            id v47 = WeakRetained;
            LXCursorEnumerateEntriesRecursively();
            CFRelease(RootCursor);
            CFRelease(v28);
          }
        }
        uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v17, (uint64_t)&v39, (uint64_t)buf, 16, v21);
      }
      while (v22);
    }
  }
}

void sub_1C4A2596C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4A259C0(uint64_t a1)
{
  id v2 = (__CFString *)(id)LXEntryCopyString();
  uint64_t v8 = objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E4F28B88], v3, v4, v5, v6, v7);
  uint64_t v13 = objc_msgSend_rangeOfCharacterFromSet_(v2, v9, (uint64_t)v8, v10, v11, v12);

  if (*(unsigned char *)(a1 + 40) || v13 != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v19 = objc_msgSend_length(v2, v14, v15, v16, v17, v18);
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = sub_1C4A25C40;
    v24[3] = &unk_1E64E0E38;
    v24[4] = *(void *)(a1 + 32);
    objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v2, v20, 0, v19, 3, (uint64_t)v24);
    uint64_t v21 = *(void *)(a1 + 32);
    if (v21)
    {
      if (!*(void *)(v21 + 104))
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        uint64_t v22 = (id)qword_1EA3C9F90[0];
        if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1C492D000, v22, OS_LOG_TYPE_FAULT, "Transient phrase lexicon must be non-nil", buf, 2u);
        }
      }
      if (CFStringGetLength(v2) >= 1)
      {
        if (LXLexiconAdd())
        {
          LXLexiconIncrementUsageCount();
        }
        else
        {
          if (qword_1EA3CA000 != -1) {
            dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
          }
          long long v23 = (id)qword_1EA3C9F90[0];
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1C492D000, v23, OS_LOG_TYPE_ERROR, "A token ID should be assigned when adding to the phrase lexicon. Skipping phrase lexicon entry.", buf, 2u);
          }
        }
      }
    }
  }
  else
  {
    sub_1C4A249F8(*(void *)(a1 + 32), v2);
  }
  CFRelease(v2);
}

void sub_1C4A25BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A25BFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A25C0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A25C20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A25C30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A25C40(uint64_t a1, const __CFString *a2)
{
}

void sub_1C4A25C48(uint64_t a1)
{
  if (*(void *)(a1 + 96))
  {
    if (LXLexiconAdd())
    {
LABEL_3:
      LXLexiconIncrementUsageCount();
      LXLexiconSetUserBitfield();
      return;
    }
  }
  else
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    id v1 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v1, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C492D000, v1, OS_LOG_TYPE_FAULT, "Transient lexicon must be non-nil", buf, 2u);
    }

    if (LXLexiconAdd()) {
      goto LABEL_3;
    }
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  id v2 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl(&dword_1C492D000, v2, OS_LOG_TYPE_ERROR, "A token ID should be assigned when adding to the lexicon. Skipping lexicon entry.", v3, 2u);
  }
}

void sub_1C4A25DC0()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28E58]);
  uint64_t v6 = objc_msgSend_ch_katakanaCharacterSet(MEMORY[0x1E4F28B88], v1, v2, v3, v4, v5);
  objc_msgSend_formUnionWithCharacterSet_(v0, v7, (uint64_t)v6, v8, v9, v10);

  uint64_t v16 = objc_msgSend_ch_hiraganaCharacterSet(MEMORY[0x1E4F28B88], v11, v12, v13, v14, v15);
  objc_msgSend_formUnionWithCharacterSet_(v0, v17, (uint64_t)v16, v18, v19, v20);

  id v26 = objc_msgSend_ch_kanjiCharacterSet(MEMORY[0x1E4F28B88], v21, v22, v23, v24, v25);
  objc_msgSend_formUnionWithCharacterSet_(v0, v27, (uint64_t)v26, v28, v29, v30);

  uint64_t v31 = (void *)qword_1EA3C8F30;
  qword_1EA3C8F30 = (uint64_t)v0;
}

void sub_1C4A25E74(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1C4A25E94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A25EA4(uint64_t a1, uint64_t a2, void *a3)
{
  id v84 = a3;
  uint64_t v9 = objc_msgSend_firstName(v84, v4, v5, v6, v7, v8);
  uint64_t v20 = objc_msgSend_lastName(v84, v10, v11, v12, v13, v14);
  if (!(v9 | v20)) {
    goto LABEL_19;
  }
  uint64_t v21 = objc_msgSend_phoneticFirstName(v84, v15, v16, v17, v18, v19);
  long long v27 = objc_msgSend_lowercaseString(v21, v22, v23, v24, v25, v26);

  uint64_t v33 = objc_msgSend_phoneticLastName(v84, v28, v29, v30, v31, v32);
  long long v39 = objc_msgSend_lowercaseString(v33, v34, v35, v36, v37, v38);

  if (v9 && v20)
  {
    uint64_t v45 = objc_msgSend_rangeOfCharacterFromSet_((void *)v9, v40, qword_1EA3C8F30, v42, v43, v44);
    uint64_t v50 = objc_msgSend_rangeOfCharacterFromSet_((void *)v20, v46, qword_1EA3C8F30, v47, v48, v49);
    if (v45 != 0x7FFFFFFFFFFFFFFFLL && v50 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v51 = objc_msgSend_stringByAppendingString_((void *)v20, v40, v9, v42, v43, v44);
      if (objc_msgSend_length(v27, v52, v53, v54, v55, v56) && objc_msgSend_length(v39, v57, v58, v59, v60, v61))
      {
        uint64_t v62 = objc_msgSend_stringByAppendingString_(v39, v57, (uint64_t)v27, v59, v60, v61);
      }
      else
      {
        uint64_t v62 = objc_msgSend_null(MEMORY[0x1E4F1CA98], v57, v58, v59, v60, v61);
      }
      uint64_t v67 = (void *)v62;
      objc_msgSend_addObject_(*(void **)(*(void *)(a1 + 32) + 72), v63, (uint64_t)v51, v64, v65, v66);
      objc_msgSend_addObject_(*(void **)(*(void *)(a1 + 32) + 72), v68, (uint64_t)v67, v69, v70, v71);
    }
    goto LABEL_13;
  }
  if (v20)
  {
LABEL_13:
    if (objc_msgSend_length(v39, v40, v41, v42, v43, v44))
    {
      objc_msgSend_addObject_(*(void **)(*(void *)(a1 + 32) + 72), v40, v20, v42, v43, v44);
      objc_msgSend_addObject_(*(void **)(*(void *)(a1 + 32) + 72), v72, (uint64_t)v39, v73, v74, v75);
    }
  }
  if (v9 && objc_msgSend_length(v27, v40, v41, v42, v43, v44))
  {
    objc_msgSend_addObject_(*(void **)(*(void *)(a1 + 32) + 72), v76, v9, v77, v78, v79);
    objc_msgSend_addObject_(*(void **)(*(void *)(a1 + 32) + 72), v80, (uint64_t)v27, v81, v82, v83);
  }

LABEL_19:
}

void sub_1C4A26090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A26164(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  objc_msgSend_score(v4, v5, v6, v7, v8, v9);
  long double v11 = v10;
  CFIndex v12 = *(void *)(a1 + 32);
  objc_msgSend_firstName(v4, v13, v14, v15, v16, v17);
  uint64_t v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
  sub_1C4A26460(v12, v18, v11);

  CFIndex v19 = *(void *)(a1 + 32);
  objc_msgSend_middleName(v4, v20, v21, v22, v23, v24);
  uint64_t v25 = (__CFString *)objc_claimAutoreleasedReturnValue();
  sub_1C4A26460(v19, v25, v11);

  CFIndex v26 = *(void *)(a1 + 32);
  objc_msgSend_lastName(v4, v27, v28, v29, v30, v31);
  uint64_t v32 = (__CFString *)objc_claimAutoreleasedReturnValue();
  sub_1C4A26460(v26, v32, v11);

  CFIndex v33 = *(void *)(a1 + 32);
  objc_msgSend_nickname(v4, v34, v35, v36, v37, v38);
  long long v39 = (__CFString *)objc_claimAutoreleasedReturnValue();
  sub_1C4A26460(v33, v39, v11);

  uint64_t v40 = *(void *)(a1 + 32);
  objc_msgSend_organizationName(v4, v41, v42, v43, v44, v45);
  CFStringRef v46 = (const __CFString *)objc_claimAutoreleasedReturnValue();
  uint64_t v47 = (__CFString *)v46;
  if (v40 && v46 && CFStringGetLength(v46) >= 1)
  {
    sub_1C4A249F8(v40, v47);
    log10(v11);
    LMVocabularyAddLemma();
  }

  uint64_t v48 = *(void *)(a1 + 32);
  objc_msgSend_jobTitle(v4, v49, v50, v51, v52, v53);
  CFStringRef v54 = (const __CFString *)objc_claimAutoreleasedReturnValue();
  uint64_t v55 = (__CFString *)v54;
  if (v48 && v54 && CFStringGetLength(v54) >= 1)
  {
    sub_1C4A249F8(v48, v55);
    log10(v11);
    LMVocabularyAddLemma();
  }

  uint64_t v61 = objc_msgSend_relations(v4, v56, v57, v58, v59, v60);
  v77[0] = MEMORY[0x1E4F143A8];
  v77[1] = 3221225472;
  v77[2] = sub_1C4A26548;
  v77[3] = &unk_1E64E28B8;
  v77[4] = *(void *)(a1 + 32);
  *(long double *)&v77[5] = v11;
  objc_msgSend_enumerateObjectsUsingBlock_(v61, v62, (uint64_t)v77, v63, v64, v65);

  uint64_t v71 = objc_msgSend_cities(v4, v66, v67, v68, v69, v70);
  v76[0] = MEMORY[0x1E4F143A8];
  v76[1] = 3221225472;
  v76[2] = sub_1C4A265F4;
  v76[3] = &unk_1E64E28B8;
  v76[4] = *(void *)(a1 + 32);
  *(long double *)&v76[5] = v11;
  objc_msgSend_enumerateObjectsUsingBlock_(v71, v72, (uint64_t)v76, v73, v74, v75);
}

void sub_1C4A26410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A26450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFIndex sub_1C4A26460(CFIndex result, CFStringRef theString, long double a3)
{
  if (result)
  {
    if (theString)
    {
      uint64_t v5 = result;
      id result = CFStringGetLength(theString);
      if (result >= 1)
      {
        sub_1C4A249F8(v5, theString);
        log10(a3);
        id result = LMVocabularyAddLemma();
        if (result) {
          return LMVocabularyEnumerateInflectionsOfLemma();
        }
      }
    }
  }
  return result;
}

void sub_1C4A26548(uint64_t a1, void *a2)
{
  theString = a2;
  if (theString)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      long double v4 = *(double *)(a1 + 40);
      if (CFStringGetLength(theString) >= 1)
      {
        sub_1C4A249F8(v3, theString);
        log10(v4);
        LMVocabularyAddLemma();
      }
    }
  }
}

void sub_1C4A265E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A265F4(uint64_t a1, void *a2)
{
  theString = a2;
  if (theString)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      long double v4 = *(double *)(a1 + 40);
      if (CFStringGetLength(theString) >= 1)
      {
        sub_1C4A249F8(v3, theString);
        log10(v4);
        LMVocabularyAddLemma();
      }
    }
  }
}

void sub_1C4A2668C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A266A0(uint64_t a1, const __CFString *a2)
{
}

Class sub_1C4A2674C(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!qword_1EA3C91B0)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    v4[3] = sub_1C4A268A0;
    v4[4] = &unk_1E64E1AA8;
    v4[5] = v4;
    long long v5 = xmmword_1E64E2900;
    uint64_t v6 = 0;
    qword_1EA3C91B0 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!qword_1EA3C91B0)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("_KSTextReplacementClientStore");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  qword_1EA3C91A8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1C4A268A0()
{
  uint64_t result = _sl_dlopen();
  qword_1EA3C91B0 = result;
  return result;
}

void *sub_1C4A26914(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EA3C91B0)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = sub_1C4A268A0;
    v5[4] = &unk_1E64E1AA8;
    v5[5] = v5;
    long long v6 = xmmword_1E64E2900;
    uint64_t v7 = 0;
    qword_1EA3C91B0 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    uint64_t v2 = (void *)qword_1EA3C91B0;
    if (qword_1EA3C91B0)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)qword_1EA3C91B0;
LABEL_5:
  uint64_t result = dlsym(v2, "KSTextReplacementDidChangeNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EA3C91B8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1C4A26A54(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!qword_1EA3C91C8)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    v4[3] = sub_1C4A26BA8;
    v4[4] = &unk_1E64E1AA8;
    v4[5] = v4;
    long long v5 = xmmword_1E64E2918;
    uint64_t v6 = 0;
    qword_1EA3C91C8 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!qword_1EA3C91C8)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("_ICInputContextManager");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  qword_1EA3C91C0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1C4A26BA8()
{
  uint64_t result = _sl_dlopen();
  qword_1EA3C91C8 = result;
  return result;
}

void sub_1C4A278FC(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  id v5 = a1;
  uint64_t v6 = objc_alloc_init(CHDrawing);
  v93[0] = 0;
  v93[1] = v93;
  v93[2] = 0x2020000000;
  int v94 = 0;
  v90[0] = 0;
  v90[1] = v90;
  v90[2] = 0x4812000000;
  v90[3] = sub_1C4A27D54;
  v90[4] = sub_1C4A27D90;
  v90[5] = &unk_1C4CB5C62;
  v92[0] = 0;
  v92[1] = 0;
  uint64_t v91 = v92;
  uint64_t v7 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v13 = objc_msgSend_countCodepoints(v5, v8, v9, v10, v11, v12, v6);
  uint64_t v59 = objc_msgSend_arrayWithCapacity_(v7, v14, v13, v15, v16, v17);
  uint64_t v18 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v24 = objc_msgSend_countCodepoints(v5, v19, v20, v21, v22, v23);
  uint64_t v29 = objc_msgSend_arrayWithCapacity_(v18, v25, v24, v26, v27, v28);
  v88[0] = 0;
  v88[1] = v88;
  v88[2] = 0x2020000000;
  char v89 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = &v84;
  uint64_t v86 = 0x2020000000;
  uint64_t v87 = 0;
  uint64_t v80 = 0;
  uint64_t v81 = &v80;
  uint64_t v82 = 0x2020000000;
  uint64_t v83 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = &v71;
  uint64_t v73 = 0x4812000000;
  uint64_t v74 = sub_1C4A27DA0;
  uint64_t v75 = sub_1C4A27DC4;
  uint64_t v76 = &unk_1C4CB5C62;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  long long __p = 0;
  uint64_t v35 = objc_msgSend_length(v5, v30, v31, v32, v33, v34);
  v60[0] = MEMORY[0x1E4F143A8];
  v60[1] = 3221225472;
  v60[2] = sub_1C4A27DDC;
  v60[3] = &unk_1E64E2938;
  uint64_t v36 = v6;
  uint64_t v61 = v36;
  uint64_t v64 = &v84;
  uint64_t v65 = v88;
  uint64_t v70 = a2;
  id v37 = v59;
  id v62 = v37;
  uint64_t v66 = v90;
  uint64_t v67 = v93;
  uint64_t v68 = &v80;
  id v38 = v29;
  id v63 = v38;
  uint64_t v69 = &v71;
  objc_msgSend_enumerateCodepointsInRange_usingBlock_(v5, v39, 0, v35, (uint64_t)v60, v40);
  objc_msgSend_bounds(v36, v41, v42, v43, v44, v45);
  CGFloat MinX = CGRectGetMinX(v95);
  objc_msgSend_bounds(v36, v47, v48, v49, v50, v51);
  CGFloat MaxX = CGRectGetMaxX(v96);
  *(CGFloat *)(a3 + 8) = MinX;
  *(void *)(a3 + 16) = 0x4039000000000000;
  *(CGFloat *)(a3 + 24) = MaxX;
  *(void *)(a3 + 32) = 0x4039000000000000;
  *(CGFloat *)(a3 + 40) = MinX;
  *(void *)(a3 + 48) = 0x4034000000000000;
  *(CGFloat *)(a3 + 56) = MaxX;
  *(void *)(a3 + 64) = 0x4034000000000000;
  *(CGFloat *)(a3 + 72) = MinX;
  *(void *)(a3 + 80) = 0x4024000000000000;
  *(CGFloat *)(a3 + 88) = MaxX;
  *(void *)(a3 + 96) = 0x4024000000000000;
  *(CGFloat *)(a3 + 104) = MinX;
  *(void *)(a3 + 112) = 0x4014000000000000;
  *(CGFloat *)(a3 + 120) = MaxX;
  *(void *)(a3 + 128) = 0x4014000000000000;
  uint64_t v53 = v36;
  *(void *)a3 = v53;
  id v54 = v37;
  *(void *)(a3 + 136) = v54;
  id v55 = v38;
  uint64_t v56 = v85[3];
  *(void *)(a3 + 144) = v55;
  *(void *)(a3 + 152) = v56;
  *(void *)(a3 + 160) = v81[3];
  uint64_t v57 = v72;
  uint64_t v58 = v72[8];
  *(_OWORD *)(a3 + 168) = *((_OWORD *)v72 + 3);
  *(void *)(a3 + 184) = v58;
  v57[7] = 0;
  v57[8] = 0;
  v57[6] = 0;

  _Block_object_dispose(&v71, 8);
  if (__p)
  {
    uint64_t v78 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v80, 8);
  _Block_object_dispose(&v84, 8);
  _Block_object_dispose(v88, 8);

  _Block_object_dispose(v90, 8);
  sub_1C4999C7C((uint64_t)&v91, v92[0]);
  _Block_object_dispose(v93, 8);
}

void sub_1C4A27C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a26, 8);
  if (__p)
  {
    a33 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v41 - 240), 8);

  _Block_object_dispose((const void *)(v41 - 208), 8);
  sub_1C4999C7C(a10, *(void **)(v41 - 152));
  _Block_object_dispose((const void *)(v41 - 136), 8);

  _Unwind_Resume(a1);
}

void *sub_1C4A27D54(void *result, void *a2)
{
  result[6] = a2[6];
  uint64_t v2 = a2 + 7;
  uint64_t v3 = a2[7];
  result[7] = v3;
  long double v4 = result + 7;
  uint64_t v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[6] = v2;
    *uint64_t v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void sub_1C4A27D90(uint64_t a1)
{
}

__n128 sub_1C4A27DA0(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1C4A27DC4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1C4A27DDC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6 = a2;
  unint64_t v13 = objc_msgSend_strokeCount(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  uint64_t v14 = *(void *)(a1 + 104);
  uint64_t v245 = 0;
  uint64_t v246 = 0;
  long long __p = 0;
  uint64_t v17 = *(uint64_t **)(v14 + 8);
  uint64_t v15 = (uint64_t *)(v14 + 8);
  uint64_t v16 = v17;
  if (!v17) {
    goto LABEL_19;
  }
  float64x2_t v243 = (int8x16_t *)v253;
  uint64_t v18 = v15;
  CFIndex v19 = v16;
  do
  {
    unsigned int v20 = *((_DWORD *)v19 + 8);
    if (v20 <= v6)
    {
      if (v20 >= v6)
      {
        unsigned int v21 = v6;
        goto LABEL_9;
      }
      ++v19;
    }
    CFIndex v19 = (uint64_t *)*v19;
  }
  while (v19);
  unsigned int v21 = 9633;
  do
  {
LABEL_9:
    unsigned int v22 = *((_DWORD *)v16 + 8);
    _CF = v22 >= v21;
    if (v22 >= v21) {
      uint64_t v24 = (uint64_t **)v16;
    }
    else {
      uint64_t v24 = (uint64_t **)(v16 + 1);
    }
    if (_CF) {
      uint64_t v18 = v16;
    }
    uint64_t v16 = *v24;
  }
  while (*v24);
  if (v18 == v15 || v21 < *((_DWORD *)v18 + 8) || (uint64_t v25 = v18[5], v26 = v18[6], v25 == v26))
  {
LABEL_19:
    uint64_t v27 = 0;
    goto LABEL_20;
  }
  do
  {
    uint64_t v64 = (char *)__p;
    uint64_t v65 = v245;
    if (v245 == __p)
    {
      if (v245 >= v246) {
        goto LABEL_28;
      }
LABEL_44:
      *(void *)uint64_t v65 = *(id *)v25;
      *(_OWORD *)(v65 + 8) = *(_OWORD *)(v25 + 8);
      id v63 = v65 + 24;
LABEL_29:
      uint64_t v245 = v63;
      goto LABEL_30;
    }
    int v66 = *(_DWORD *)(v25 + 8);
    int v67 = *((_DWORD *)__p + 2);
    if (v66 <= v67)
    {
      if (v66 == v67)
      {
        if (v245 < v246) {
          goto LABEL_44;
        }
LABEL_28:
        id v63 = sub_1C4A28B1C(&__p, v25);
        goto LABEL_29;
      }
    }
    else
    {
      id v68 = *(id *)v25;
      id v69 = *(id *)v25;
      uint64_t v70 = *(void *)(v25 + 8);
      int v72 = *(_DWORD *)(v25 + 16);
      int v71 = *(_DWORD *)(v25 + 20);
      if (v246 == v64)
      {
        do
        {
          uint64_t v76 = (void *)*((void *)v65 - 3);
          v65 -= 24;
        }
        while (v65 != v64);
        uint64_t v245 = v64;
        operator delete(__p);
        long long __p = 0;
        uint64_t v245 = 0;
        uint64_t v246 = 0;
        uint64_t v77 = (char *)operator new(0x18uLL);
        long long __p = v77;
        uint64_t v245 = v77;
        uint64_t v73 = v77 + 24;
        uint64_t v246 = v77 + 24;
        *(void *)uint64_t v77 = v69;
        *((void *)v77 + 1) = v70;
        *((_DWORD *)v77 + 4) = v72;
        *((_DWORD *)v77 + 5) = v71;
      }
      else
      {
        uint64_t v73 = v64 + 24;
        objc_storeStrong((id *)v64, v68);
        *((void *)v64 + 1) = v70;
        *((_DWORD *)v64 + 4) = v72;
        *((_DWORD *)v64 + 5) = v71;
        for (uint64_t i = v245; i != v73; i -= 24)
        {
          uint64_t v75 = (void *)*((void *)i - 3);
        }
      }
      uint64_t v245 = v73;
    }
LABEL_30:
    v25 += 24;
  }
  while (v25 != v26);
  uint64_t v27 = (char *)__p;
  if (__p == v245)
  {
LABEL_20:
    uint64_t v28 = 0;
    ++*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24);
    if (!v27)
    {
LABEL_25:
      if (objc_msgSend_strokeCount(*(void **)(a1 + 32), v8, v9, v10, v11, v12, v243) > v13)
      {
        id v37 = *(void **)(a1 + 40);
        id v38 = unicodeToNSString(v6, v32, v33, v34, v35, v36);
        objc_msgSend_addObject_(v37, v39, (uint64_t)v38, v40, v41, v42);

        uint64_t v43 = *(void **)(a1 + 48);
        uint64_t v44 = (void *)MEMORY[0x1E4F28D60];
        uint64_t v50 = objc_msgSend_strokeCount(*(void **)(a1 + 32), v45, v46, v47, v48, v49);
        id v54 = objc_msgSend_indexSetWithIndexesInRange_(v44, v51, v13, v50 - v13, v52, v53);
        objc_msgSend_addObject_(v43, v55, (uint64_t)v54, v56, v57, v58);

        uint64_t v59 = *(void **)(*(void *)(a1 + 96) + 8);
        uint64_t v61 = (char *)v59[7];
        unint64_t v60 = v59[8];
        if ((unint64_t)v61 >= v60)
        {
          uint64_t v78 = (char *)v59[6];
          uint64_t v79 = (v61 - v78) >> 4;
          unint64_t v80 = v79 + 1;
          if ((unint64_t)(v79 + 1) >> 60) {
            sub_1C494A220();
          }
          uint64_t v81 = v60 - (void)v78;
          if (v81 >> 3 > v80) {
            unint64_t v80 = v81 >> 3;
          }
          if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v82 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v82 = v80;
          }
          if (v82)
          {
            if (v82 >> 60) {
              sub_1C4949AA8();
            }
            uint64_t v83 = (char *)operator new(16 * v82);
          }
          else
          {
            uint64_t v83 = 0;
          }
          uint64_t v116 = &v83[16 * v79];
          *(_DWORD *)uint64_t v116 = v6;
          *((void *)v116 + 1) = v28;
          id v62 = v116 + 16;
          if (v61 != v78)
          {
            do
            {
              *((_OWORD *)v116 - 1) = *((_OWORD *)v61 - 1);
              v116 -= 16;
              v61 -= 16;
            }
            while (v61 != v78);
            uint64_t v61 = (char *)v59[6];
          }
          v59[6] = v116;
          v59[7] = v62;
          v59[8] = &v83[16 * v82];
          if (v61) {
            operator delete(v61);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v61 = v6;
          *((void *)v61 + 1) = v28;
          id v62 = v61 + 16;
        }
        v59[7] = v62;
      }
      return;
    }
LABEL_21:
    uint64_t v29 = v245;
    uint64_t v30 = v27;
    if (v245 != v27)
    {
      do
      {
        uint64_t v31 = (void *)*((void *)v29 - 3);
        v29 -= 24;
      }
      while (v29 != v27);
      uint64_t v30 = __p;
    }
    uint64_t v245 = v27;
    operator delete(v30);
    goto LABEL_25;
  }
  if (*((_DWORD *)__p + 3) != 9633)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
    uint64_t v117 = *(void *)(*(void *)(a1 + 72) + 8);
    uint64_t v119 = (uint64_t *)(v117 + 56);
    uint64_t v118 = *(uint64_t **)(v117 + 56);
    if (v118)
    {
LABEL_76:
      uint64_t v120 = v119;
      uint64_t v121 = v118;
      do
      {
        unsigned int v122 = *((_DWORD *)v121 + 8);
        BOOL v123 = v122 >= v6;
        if (v122 >= v6) {
          uint64_t v124 = v121;
        }
        else {
          uint64_t v124 = v121 + 1;
        }
        if (v123) {
          uint64_t v120 = v121;
        }
        uint64_t v121 = (uint64_t *)*v124;
      }
      while (*v124);
      if (v120 != v119 && *((_DWORD *)v120 + 8) <= v6) {
        goto LABEL_98;
      }
    }
LABEL_86:
    int v125 = rand();
    uint64_t v127 = __p;
    uint64_t v126 = v245;
    uint64_t v128 = *(void *)(*(void *)(a1 + 72) + 8);
    uint64_t v130 = (uint64_t **)(v128 + 56);
    uint64_t v129 = *(uint64_t **)(v128 + 56);
    if (v129)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v131 = (uint64_t **)v129;
          unsigned int v132 = *((_DWORD *)v129 + 8);
          if (v132 <= v6) {
            break;
          }
          uint64_t v129 = *v131;
          uint64_t v130 = v131;
          if (!*v131) {
            goto LABEL_93;
          }
        }
        if (v132 >= v6) {
          break;
        }
        uint64_t v129 = v131[1];
        if (!v129)
        {
          uint64_t v130 = v131 + 1;
          goto LABEL_93;
        }
      }
      uint64_t v133 = v131;
    }
    else
    {
      uint64_t v131 = (uint64_t **)(v128 + 56);
LABEL_93:
      uint64_t v133 = operator new(0x30uLL);
      v133[8] = v6;
      *((void *)v133 + 5) = 0;
      *(void *)uint64_t v133 = 0;
      *((void *)v133 + 1) = 0;
      *((void *)v133 + 2) = v131;
      NSObject *v130 = (uint64_t *)v133;
      uint64_t v134 = **(void **)(v128 + 48);
      uint64_t v135 = (uint64_t *)v133;
      if (v134)
      {
        *(void *)(v128 + 48) = v134;
        uint64_t v135 = *v130;
      }
      sub_1C4949FD4(*(uint64_t **)(v128 + 56), v135);
      ++*(void *)(v128 + 64);
    }
    *((void *)v133 + 5) = v125 % (0xAAAAAAAAAAAAAAABLL * ((v126 - v127) >> 3));
    uint64_t v117 = *(void *)(*(void *)(a1 + 72) + 8);
    uint64_t v118 = *(uint64_t **)(v117 + 56);
LABEL_98:
    if (v118)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v137 = (uint64_t **)v118;
          unsigned int v138 = *((_DWORD *)v118 + 8);
          if (v138 <= v6) {
            break;
          }
          uint64_t v118 = *v137;
          uint64_t v136 = v137;
          if (!*v137) {
            goto LABEL_105;
          }
        }
        if (v138 >= v6) {
          break;
        }
        uint64_t v118 = v137[1];
        if (!v118)
        {
          uint64_t v136 = v137 + 1;
          goto LABEL_105;
        }
      }
      uint64_t v139 = v137;
    }
    else
    {
      uint64_t v136 = (uint64_t **)(v117 + 56);
      uint64_t v137 = (uint64_t **)(v117 + 56);
LABEL_105:
      uint64_t v139 = operator new(0x30uLL);
      v139[8] = v6;
      *((void *)v139 + 5) = 0;
      *(void *)uint64_t v139 = 0;
      *((void *)v139 + 1) = 0;
      *((void *)v139 + 2) = v137;
      char *v136 = (uint64_t *)v139;
      uint64_t v140 = **(void **)(v117 + 48);
      uint64_t v141 = (uint64_t *)v139;
      if (v140)
      {
        *(void *)(v117 + 48) = v140;
        uint64_t v141 = *v136;
      }
      sub_1C4949FD4(*(uint64_t **)(v117 + 56), v141);
      ++*(void *)(v117 + 64);
    }
    uint64_t v28 = *((void *)v139 + 5);
    float v142 = *(float *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
    uint64_t v143 = (float *)((char *)__p + 24 * v28);
    float v145 = v143[4];
    float v144 = v143[5];
    uint64_t v146 = objc_msgSend_copy(*(void **)v143, v8, v9, v10, v11, v12, v253);
    uint64_t v152 = objc_msgSend_strokeCount(v146, v147, v148, v149, v150, v151);
    double v153 = v142 + (float)(v145 * 10.0);

    if (v152)
    {
      float v154 = v153;
      CoreHandwriting::synthesis::fast_path::CHFastPathCharacter::getNormalizedDrawing((void **)v143, 10.0, 20.0, v154, v8, v9, v10, v11, v12);
      id v155 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend_bounds(v155, v156, v157, v158, v159, v160);
      double MidX = CGRectGetMidX(v256);
      objc_msgSend_bounds(v155, v162, v163, v164, v165, v166);
      CGFloat MidY = CGRectGetMidY(v257);
      uint64_t v173 = objc_msgSend_drawingTransformedWithTranslation_scaleFactor_(v155, v168, v169, v170, v171, v172, -MidX, -MidY, 0.100000001);
      __token[23] = 12;
      strcpy(__token, "/dev/urandom");
      std::random_device::random_device(&v255, (const std::string *)__token);
      if ((__token[23] & 0x80000000) != 0) {
        operator delete(*(void **)__token);
      }
      __int32 v174 = MEMORY[0x1C8786310](&v255);
      uint64_t v175 = 1;
      unsigned __int32 v176 = v174;
      do
      {
        unsigned __int32 v176 = v175 + 1812433253 * (v176 ^ (v176 >> 30));
        *(_DWORD *)&__token[4 * v175++] = v176;
      }
      while (v175 != 624);
      int8x16_t v177 = *(int8x16_t *)&__token[4];
      int8x16_t v178 = *(int8x16_t *)&__token[4];
      v178.i32[0] = v174;
      int8x16_t v179 = *(int8x16_t *)&__token[20];
      int8x16_t v181 = *v243;
      int8x16_t v180 = v243[1];
      uint64_t v254 = 8;
      *(_DWORD *)&__token[32] = v253[8] ^ ((v251 & 0x7FFFFFFE | *(_DWORD *)&__token[32] & 0x80000000) >> 1) ^ (v251 << 31 >> 31) & 0x9908B0DF;
      unsigned int v182 = ((*(_DWORD *)&__token[32] ^ (*(_DWORD *)&__token[32] >> 11)) << 7) & 0x9D2C5680 ^ *(_DWORD *)&__token[32] ^ (*(_DWORD *)&__token[32] >> 11);
      v178.i32[3] = *(_DWORD *)&__token[12];
      v183.i64[0] = 0x100000001;
      v183.i64[1] = 0x100000001;
      int8x16_t v184 = v179;
      v184.i32[0] = *(_DWORD *)&__token[16];
      v177.i32[2] = *(_DWORD *)&__token[4];
      int32x4_t v185 = (int32x4_t)vandq_s8(v177, (int8x16_t)xmmword_1C4C3A9F0);
      int8x16_t v186 = (int8x16_t)vdupq_n_s32(0x9908B0DF);
      int8x16_t v187 = veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8((int8x16_t)vuzp1q_s32(v185, vrev64q_s32(v185)), vandq_s8(v178, (int8x16_t)xmmword_1C4C3A9E0)), 1uLL), veorq_s8(v181, vbicq_s8(v186, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(*(int8x16_t *)&__token[4], v183)))));
      v178.i64[0] = vextq_s8(v187, v187, 8uLL).u64[0];
      *(int32x2_t *)v181.i8 = vzip1_s32(*(int32x2_t *)v187.i8, *(int32x2_t *)v178.i8);
      *(int8x8_t *)v181.i8 = veor_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)v181.i8, 0xBuLL), *(int8x8_t *)v181.i8);
      int8x8_t v188 = (int8x8_t)vdup_n_s32(0x9D2C5680);
      *(int32x2_t *)v178.i8 = vzip2_s32(*(int32x2_t *)v187.i8, *(int32x2_t *)v178.i8);
      *(int8x8_t *)v178.i8 = veor_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)v178.i8, 0xBuLL), *(int8x8_t *)v178.i8);
      v184.i32[3] = v179.i32[2];
      int32x4_t v189 = (int32x4_t)vandq_s8(v179, v183);
      v179.i32[2] = v179.i32[0];
      int32x4_t v190 = (int32x4_t)vandq_s8(v179, (int8x16_t)xmmword_1C4C3A9F0);
      int8x16_t v191 = veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8((int8x16_t)vuzp1q_s32(v190, vrev64q_s32(v190)), vandq_s8(v184, (int8x16_t)xmmword_1C4C3A9E0)), 1uLL), veorq_s8(v180, vbicq_s8(v186, (int8x16_t)vceqzq_s32(v189))));
      v190.i64[0] = vextq_s8(v191, v191, 8uLL).u64[0];
      *(int32x2_t *)v179.i8 = vzip1_s32(*(int32x2_t *)v191.i8, *(int32x2_t *)v190.i8);
      *(int8x8_t *)v179.i8 = veor_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)v179.i8, 0xBuLL), *(int8x8_t *)v179.i8);
      *(int8x8_t *)v180.i8 = vand_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v179.i8, 7uLL), v188);
      *(int8x16_t *)__tokeuint64_t n = v187;
      *(int8x16_t *)&__token[16] = v191;
      *(int32x2_t *)v191.i8 = vzip2_s32(*(int32x2_t *)v191.i8, *(int32x2_t *)v190.i8);
      *(int8x8_t *)v191.i8 = veor_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)v191.i8, 0xBuLL), *(int8x8_t *)v191.i8);
      *(int8x8_t *)v190.i8 = vand_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v191.i8, 7uLL), v188);
      unsigned int v192 = v253[9] ^ ((v252 & 0x7FFFFFFE | v251 & 0x80000000) >> 1);
      unsigned int v193 = v192 ^ (v252 << 31 >> 31) & 0x9908B0DF ^ ((v192 ^ (v252 << 31 >> 31) & 0x9908B0DF) >> 11);
      unsigned int v194 = (((v193 << 7) & 0x9D2C5680 ^ v193) << 15) & 0xEFC60000 ^ (v193 << 7) & 0x9D2C5680 ^ v193;
      float64x2_t v195 = (float64x2_t)vdupq_n_s64(0x41F0000000000000uLL);
      float64x2_t v196 = (float64x2_t)vdupq_n_s64(0x3BF0000000000000uLL);
      *(int8x8_t *)v181.i8 = veor_s8(vand_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v181.i8, 7uLL), v188), *(int8x8_t *)v181.i8);
      int8x8_t v197 = (int8x8_t)vdup_n_s32(0xEFC60000);
      *(int8x8_t *)v181.i8 = veor_s8(vand_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v181.i8, 0xFuLL), v197), *(int8x8_t *)v181.i8);
      *(int8x8_t *)v181.i8 = veor_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)v181.i8, 0x12uLL), *(int8x8_t *)v181.i8);
      v198.i64[0] = v181.u32[0];
      v198.i64[1] = v181.u32[1];
      float64x2_t v199 = vcvtq_f64_u64(v198);
      *(int8x8_t *)v178.i8 = veor_s8(vand_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v178.i8, 7uLL), v188), *(int8x8_t *)v178.i8);
      *(int8x8_t *)v178.i8 = veor_s8(vand_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v178.i8, 0xFuLL), v197), *(int8x8_t *)v178.i8);
      *(int8x8_t *)v178.i8 = veor_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)v178.i8, 0x12uLL), *(int8x8_t *)v178.i8);
      v198.i64[0] = v178.u32[0];
      v198.i64[1] = v178.u32[1];
      float64x2_t v200 = vmulq_f64(vmlaq_f64(v199, v195, vcvtq_f64_u64(v198)), v196);
      __asm
      {
        FMOV            V6.2D, #2.0
        FMOV            V17.2D, #-1.0
      }
      float64x2_t v206 = vmlaq_f64(_Q17, _Q6, v200);
      __asm { FMOV            V3.2D, #1.0 }
      memset(&v249, 0, sizeof(v249));
      *(int8x8_t *)v179.i8 = veor_s8(*(int8x8_t *)v180.i8, *(int8x8_t *)v179.i8);
      *(int8x8_t *)v179.i8 = veor_s8(vand_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v179.i8, 0xFuLL), v197), *(int8x8_t *)v179.i8);
      *(int8x8_t *)v179.i8 = veor_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)v179.i8, 0x12uLL), *(int8x8_t *)v179.i8);
      v198.i64[0] = v179.u32[0];
      v198.i64[1] = v179.u32[1];
      float64x2_t v208 = vcvtq_f64_u64(v198);
      *(int8x8_t *)v191.i8 = veor_s8(*(int8x8_t *)v190.i8, *(int8x8_t *)v191.i8);
      *(int8x8_t *)v191.i8 = veor_s8(vand_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v191.i8, 0xFuLL), v197), *(int8x8_t *)v191.i8);
      *(int8x8_t *)v191.i8 = veor_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)v191.i8, 0x12uLL), *(int8x8_t *)v191.i8);
      v198.i64[0] = v191.u32[0];
      v198.i64[1] = v191.u32[1];
      components.scale = (CGSize)vmlaq_f64(_Q3, (float64x2_t)vdupq_n_s64(0x3FB99999A0000000uLL), v206);
      *(float64x2_t *)&components.horizontalShear = vmulq_f64(vmlaq_f64(_Q17, _Q6, vmulq_f64(vmlaq_f64(v208, v195, vcvtq_f64_u64(v198)), v196)), (float64x2_t)vdupq_n_s64(0x3FA99999A0000000uLL));
      components.translation.dCGFloat x = 0.0;
      components.translation.dCGFloat y = (((double)((v182 << 15) & 0xEFC60000 ^ v182 ^ (((v182 << 15) & 0xEFC60000 ^ v182) >> 18))
                                  + (double)(v194 ^ (v194 >> 18)) * 4294967300.0)
                                 * 5.42101086e-20
                                 * 2.0
                                 + -1.0)
                                * 0.0599999987;
      CGAffineTransformMakeWithComponents(&v249, &components);
      if (v249.a < 0.0 || v249.d < 0.0)
      {
        uint64_t v232 = CHOSLogForCategory(9);
        if (os_log_type_enabled(v232, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf.a) = 0;
          _os_log_impl(&dword_1C492D000, v232, OS_LOG_TYPE_DEBUG, "applyRandomAffineTransform transformation is invalid.", (uint8_t *)&buf, 2u);
        }

        id v231 = v155;
      }
      else
      {
        CGAffineTransform buf = v249;
        uint64_t v213 = objc_msgSend_newDrawingWithAffineTransform_(v173, v209, (uint64_t)&buf, v210, v211, v212);

        objc_msgSend_bounds(v155, v214, v215, v216, v217, v218);
        double v219 = CGRectGetMidX(v258);
        objc_msgSend_bounds(v155, v220, v221, v222, v223, v224);
        CGFloat v225 = CGRectGetMidY(v259);
        objc_msgSend_drawingTransformedWithTranslation_scaleFactor_(v213, v226, v227, v228, v229, v230, v219 / 10.0, v225 / 10.0, 10.0);
        id v231 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v173 = v213;
      }
      std::random_device::~random_device(&v255);

      objc_msgSend_appendDrawing_(*(void **)(a1 + 32), v233, (uint64_t)v231, v234, v235, v236);
      objc_msgSend_bounds(v231, v237, v238, v239, v240, v241);
      double v153 = v153 + CGRectGetWidth(v260);
    }
    float v242 = v153 + (float)(v144 * 10.0);
    *(float *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = v242;
    uint64_t v27 = (char *)__p;
    if (!__p) {
      goto LABEL_25;
    }
    goto LABEL_21;
  }
  ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  uint64_t v84 = *(void *)(*(void *)(a1 + 64) + 8);
  if (!*(unsigned char *)(v84 + 24))
  {
    *(unsigned char *)(v84 + 24) = 1;
    uint64_t v117 = *(void *)(*(void *)(a1 + 72) + 8);
    uint64_t v119 = (uint64_t *)(v117 + 56);
    uint64_t v118 = *(uint64_t **)(v117 + 56);
    if (v118) {
      goto LABEL_76;
    }
    goto LABEL_86;
  }
  uint64_t v85 = objc_msgSend_lastObject(*(void **)(a1 + 40), v8, v9, v10, v11, v12, v253);

  if (v85)
  {
    uint64_t v91 = objc_msgSend_lastObject(*(void **)(a1 + 40), v86, v87, v88, v89, v90);
    float v97 = unicodeToNSString(v6, v92, v93, v94, v95, v96);
    uint64_t v102 = objc_msgSend_stringByAppendingString_(v91, v98, (uint64_t)v97, v99, v100, v101);

    objc_msgSend_removeLastObject(*(void **)(a1 + 40), v103, v104, v105, v106, v107);
    objc_msgSend_addObject_(*(void **)(a1 + 40), v108, (uint64_t)v102, v109, v110, v111);
  }
  uint64_t v112 = (char *)__p;
  if (__p)
  {
    uint64_t v113 = v245;
    uint64_t v114 = __p;
    if (v245 != __p)
    {
      do
      {
        uint64_t v115 = (void *)*((void *)v113 - 3);
        v113 -= 24;
      }
      while (v113 != v112);
      uint64_t v114 = __p;
    }
    uint64_t v245 = v112;
    operator delete(v114);
  }
}

void sub_1C4A289B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  sub_1C4A22830((void **)va);
  _Unwind_Resume(a1);
}

void sub_1C4A289CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  sub_1C4A22830((void **)va);
  _Unwind_Resume(a1);
}

void sub_1C4A289E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4A22830((void **)va);
  _Unwind_Resume(a1);
}

void sub_1C4A289F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  sub_1C4A22830((void **)va);
  _Unwind_Resume(a1);
}

void sub_1C4A28A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  std::random_device::~random_device((std::random_device *)(v38 - 132));

  sub_1C4A22830(&a10);
  _Unwind_Resume(a1);
}

void sub_1C4A28AD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A28AE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A28AF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4A22830((void **)va);
  _Unwind_Resume(a1);
}

void sub_1C4A28B08()
{
}

char *sub_1C4A28B1C(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1C4A23B24();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_1C4949AA8();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[24 * v3];
  uint64_t v9 = &v7[24 * v6];
  *(void *)uint64_t v8 = *(id *)a2;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v10 = v8 + 24;
  uint64_t v11 = (char *)*a1;
  uint64_t v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12) {
      return v10;
    }
    goto LABEL_16;
  }
  do
  {
    uint64_t v13 = *((void *)v12 - 3);
    v12 -= 24;
    *(void *)uint64_t v12 = 0;
    *((void *)v8 - 3) = v13;
    v8 -= 24;
    *(_OWORD *)(v8 + 8) = *(_OWORD *)(v12 + 8);
  }
  while (v12 != v11);
  uint64_t v12 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  while (v14 != v12)
  {
    uint64_t v15 = (void *)*((void *)v14 - 3);
    v14 -= 24;
  }
  if (v12) {
LABEL_16:
  }
    operator delete(v12);
  return v10;
}

void *CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder::getCharacterRepresentations@<X0>(char **this@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  __n128 result = (void *)(*((uint64_t (**)(char **))*this + 2))(this);
  uint64_t v9 = this[2];
  uint64_t v8 = (char *)(this + 2);
  uint64_t v7 = v9;
  if (!v9) {
    goto LABEL_12;
  }
  uint64_t v10 = (uint64_t *)v8;
  do
  {
    unsigned int v11 = *((_DWORD *)v7 + 8);
    BOOL v12 = v11 >= a2;
    if (v11 >= a2) {
      uint64_t v13 = (char **)v7;
    }
    else {
      uint64_t v13 = (char **)(v7 + 8);
    }
    if (v12) {
      uint64_t v10 = (uint64_t *)v7;
    }
    uint64_t v7 = *v13;
  }
  while (*v13);
  if (v10 != (uint64_t *)v8 && *((_DWORD *)v10 + 8) <= a2)
  {
    return sub_1C4A28F48(a3, v10 + 5);
  }
  else
  {
LABEL_12:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

void CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder::getSupportedCharactersInfo(CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder **this@<X0>, uint64_t *a2@<X8>)
{
  (*((void (**)(CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder **))*this + 2))(this);
  unsigned int v20 = 0;
  uint64_t v21 = 0;
  CFIndex v19 = &v20;
  unint64_t v4 = this[1];
  uint64_t v5 = (unsigned int *)&v20;
  if (v4 != (CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder *)(this + 2))
  {
    uint64_t v18 = a2;
    do
    {
      uint64_t v7 = *((void *)v4 + 5);
      uint64_t v6 = *((void *)v4 + 6);
      uint64_t v8 = &v20;
      uint64_t v9 = &v20;
      unsigned int v10 = *((_DWORD *)v4 + 8);
      if (v20)
      {
        unsigned int v11 = v20;
        while (1)
        {
          while (1)
          {
            uint64_t v9 = (uint64_t **)v11;
            unsigned int v12 = *((_DWORD *)v11 + 8);
            if (v10 >= v12) {
              break;
            }
            unsigned int v11 = *v9;
            uint64_t v8 = v9;
            if (!*v9) {
              goto LABEL_11;
            }
          }
          if (v12 >= v10) {
            break;
          }
          unsigned int v11 = v9[1];
          if (!v11)
          {
            uint64_t v8 = v9 + 1;
            goto LABEL_11;
          }
        }
        uint64_t v13 = v9;
      }
      else
      {
LABEL_11:
        uint64_t v13 = operator new(0x30uLL);
        v13[8] = v10;
        *((void *)v13 + 5) = 0;
        *(void *)uint64_t v13 = 0;
        *((void *)v13 + 1) = 0;
        *((void *)v13 + 2) = v9;
        *uint64_t v8 = (uint64_t *)v13;
        uint64_t v14 = (uint64_t *)v13;
        if (*v19)
        {
          CFIndex v19 = (uint64_t **)*v19;
          uint64_t v14 = *v8;
        }
        sub_1C4949FD4(v20, v14);
        ++v21;
      }
      *((void *)v13 + 5) = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3);
      uint64_t v15 = (CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder *)*((void *)v4 + 1);
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          uint64_t v15 = *(CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder *)*((void *)v4 + 2);
          BOOL v17 = *(void *)v16 == (void)v4;
          unint64_t v4 = v16;
        }
        while (!v17);
      }
      unint64_t v4 = v16;
    }
    while (v16 != (CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder *)(this + 2));
    a2 = v18;
    uint64_t v5 = (unsigned int *)v19;
  }
  a2[2] = 0;
  a2[1] = 0;
  *a2 = (uint64_t)(a2 + 1);
  sub_1C4A29058(a2, v5, (unsigned int *)&v20);
  sub_1C4999C7C((uint64_t)&v19, v20);
}

void sub_1C4A28EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
  sub_1C4999C7C(v11, *(void **)(v11 + 8));
  sub_1C4999C7C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_1C4A28F0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4999C7C((uint64_t)va, v2);
  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder::addCharacter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

void *sub_1C4A28F48(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  int64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    if (v6 >= 0xAAAAAAAAAAAAAABLL) {
      sub_1C4A23B24();
    }
    uint64_t v7 = (char *)operator new(v5);
    uint64_t v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[24 * v6];
    do
    {
      uint64_t v9 = v3 + v8;
      unsigned int v10 = &v7[v8];
      *(void *)unsigned int v10 = *(id *)(v3 + v8);
      *(_OWORD *)(v10 + 8) = *(_OWORD *)(v3 + v8 + 8);
      v8 += 24;
    }
    while (v9 + 24 != v4);
    a1[1] = &v7[v8];
  }
  return a1;
}

void sub_1C4A29018(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (char *)*v1;
  if (*v1)
  {
    uint64_t v4 = (char *)v1[1];
    int64_t v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        unint64_t v6 = (void *)*((void *)v4 - 3);
        v4 -= 24;
      }
      while (v4 != v3);
      int64_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1C4A29058(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    unint64_t v6 = a2;
    uint64_t v7 = result;
    uint64_t v8 = result + 1;
    do
    {
      __n128 result = sub_1C4A2916C(v7, v8, v18, &v17, v6 + 8);
      if (*result)
      {
        uint64_t v9 = (unsigned int *)*((void *)v6 + 1);
        if (v9) {
          goto LABEL_11;
        }
      }
      else
      {
        unsigned int v10 = result;
        uint64_t v11 = operator new(0x30uLL);
        v11[2] = *((_OWORD *)v6 + 2);
        unsigned int v12 = v18[0];
        *(void *)uint64_t v11 = 0;
        *((void *)v11 + 1) = 0;
        *((void *)v11 + 2) = v12;
        *unsigned int v10 = (uint64_t)v11;
        uint64_t v13 = *(void **)*v7;
        if (v13)
        {
          *uint64_t v7 = (uint64_t)v13;
          uint64_t v14 = (uint64_t *)*v10;
        }
        else
        {
          uint64_t v14 = (uint64_t *)v11;
        }
        __n128 result = sub_1C4949FD4((uint64_t *)v7[1], v14);
        ++v7[2];
        uint64_t v9 = (unsigned int *)*((void *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            uint64_t v15 = v9;
            uint64_t v9 = *(unsigned int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        uint64_t v15 = (unsigned int *)*((void *)v6 + 2);
        BOOL v16 = *(void *)v15 == (void)v6;
        unint64_t v6 = v15;
      }
      while (!v16);
LABEL_3:
      unint64_t v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

uint64_t *sub_1C4A2916C(void *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned int *a5)
{
  int64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unsigned int v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      unsigned int v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        unsigned int v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v14 = a2;
      do
      {
        unsigned int v10 = (uint64_t *)v14[2];
        BOOL v15 = *v10 == (void)v14;
        uint64_t v14 = v10;
      }
      while (v15);
    }
    unsigned int v16 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          CFIndex v19 = (uint64_t *)v18;
          unsigned int v20 = *(_DWORD *)(v18 + 32);
          if (v16 >= v20) {
            break;
          }
          uint64_t v18 = *v19;
          int64_t v5 = v19;
          if (!*v19) {
            goto LABEL_25;
          }
        }
        if (v20 >= v16) {
          break;
        }
        int64_t v5 = v19 + 1;
        uint64_t v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    uint64_t v11 = a2[1];
    if (v11)
    {
      unsigned int v12 = (uint64_t *)a2[1];
      do
      {
        uint64_t v13 = v12;
        unsigned int v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      uint64_t v21 = a2;
      do
      {
        uint64_t v13 = (uint64_t *)v21[2];
        BOOL v15 = *v13 == (void)v21;
        uint64_t v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((_DWORD *)v13 + 8))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      uint64_t v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            uint64_t v23 = (uint64_t *)v22;
            unsigned int v24 = *(_DWORD *)(v22 + 32);
            if (v6 >= v24) {
              break;
            }
            uint64_t v22 = *v23;
            int64_t v5 = v23;
            if (!*v23) {
              goto LABEL_41;
            }
          }
          if (v24 >= v6) {
            break;
          }
          int64_t v5 = v23 + 1;
          uint64_t v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

uint64_t CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderStyleInventory::CHFastPathCharacterHolderStyleInventory(uint64_t a1, int a2, int a3, void *a4)
{
  id v7 = a4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
  *(void *)a1 = &unk_1F2010EC0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v9 = v7;
  dispatch_queue_t v10 = dispatch_queue_create("com.apple.CoreHandwriting.CHFPCharacterHolderStyleInventoryQueue", v8);
  uint64_t v11 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v10;

  return a1;
}

{
  id v7;
  NSObject *v8;
  id v9;
  dispatch_queue_t v10;
  void *v11;

  id v7 = a4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
  *(void *)a1 = &unk_1F2010EC0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v9 = v7;
  dispatch_queue_t v10 = dispatch_queue_create("com.apple.CoreHandwriting.CHFPCharacterHolderStyleInventoryQueue", v8);
  uint64_t v11 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v10;

  return a1;
}

BOOL CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderStyleInventory::reloadAllCharactersIfNeeded(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderStyleInventory *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *((void *)this + 5);
  if (v6)
  {
    objc_msgSend_getLastCharacterStyleTimestamp(*((void **)this + 5), a2, a3, a4, a5, a6);
    uint64_t v8 = *((void *)this + 7);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = sub_1C4A2959C;
    v12[3] = &unk_1E64E2958;
    void v12[4] = this;
    v12[5] = v9;
    dispatch_sync(v8, v12);
    return v6 != 0;
  }
  else
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v11 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)CGAffineTransform buf = 0;
      _os_log_impl(&dword_1C492D000, v11, OS_LOG_TYPE_DEBUG, "CHFastPathCharacterHolderStyleInventory inventory is null", buf, 2u);
    }

    return 0;
  }
}

void sub_1C4A2959C(uint64_t a1)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  uint64_t v81 = *(void *)(a1 + 32);
  if (*(double *)(a1 + 40) > *(double *)(v81 + 48))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v2 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CGAffineTransform buf = 0;
      _os_log_impl(&dword_1C492D000, v2, OS_LOG_TYPE_DEFAULT, "CHFastPathCharacterHolderStyleInventory: need to reload inventory.", buf, 2u);
    }

    *(void *)(v81 + 48) = *(void *)(a1 + 40);
    uint64_t v8 = objc_msgSend_fastPathCharacterStylesWithVariations(*(void **)(v81 + 40), v3, v4, v5, v6, v7);
    uint64_t v9 = (void **)(v81 + 8);
    sub_1C4A23B3C(v81 + 8, *(void **)(v81 + 16));
    *(void *)(v81 + 8) = v81 + 16;
    *(void *)(v81 + 16) = 0;
    *(void *)(v81 + 24) = 0;
    unint64_t v80 = (uint64_t **)(v81 + 16);
    long long v90 = 0u;
    long long v91 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    obuint64_t j = v8;
    uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v10, (uint64_t)&v88, (uint64_t)v93, 16, v11);
    if (v16)
    {
      uint64_t v74 = *(void *)v89;
      do
      {
        uint64_t v17 = 0;
        uint64_t v75 = v16;
        do
        {
          if (*(void *)v89 != v74) {
            objc_enumerationMutation(obj);
          }
          uint64_t v18 = *(void **)(*((void *)&v88 + 1) + 8 * v17);
          uint64_t v73 = objc_msgSend_objectForKeyedSubscript_(obj, v12, (uint64_t)v18, v13, v14, v15);
          unsigned int CodepointInString = objc_msgSend_firstCodepointInString(v18, v19, v20, v21, v22, v23);
          uint64_t v77 = v17;
          long long v86 = 0u;
          long long v87 = 0u;
          long long v84 = 0u;
          long long v85 = 0u;
          id v78 = v73;
          uint64_t v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v78, v25, (uint64_t)&v84, (uint64_t)v92, 16, v26);
          if (v32)
          {
            uint64_t v79 = *(void *)v85;
            do
            {
              uint64_t v33 = 0;
              do
              {
                if (*(void *)v85 != v79) {
                  objc_enumerationMutation(v78);
                }
                uint64_t v34 = *(void **)(*((void *)&v84 + 1) + 8 * v33);
                uint64_t v35 = (uint64_t **)(v81 + 16);
                while (1)
                {
                  uint64_t v36 = *v35;
                  id v37 = v35;
                  if (!*v35) {
                    break;
                  }
                  while (1)
                  {
                    uint64_t v35 = (uint64_t **)v36;
                    unsigned int v38 = *((_DWORD *)v36 + 8);
                    if (CodepointInString < v38) {
                      break;
                    }
                    if (v38 >= CodepointInString)
                    {
                      long long v39 = v35;
                      goto LABEL_48;
                    }
                    uint64_t v36 = v35[1];
                    if (!v36)
                    {
                      id v37 = v35 + 1;
                      goto LABEL_22;
                    }
                  }
                }
LABEL_22:
                long long v39 = operator new(0x40uLL);
                v39[8] = CodepointInString;
                *((void *)v39 + 6) = 0;
                *((void *)v39 + 7) = 0;
                *((void *)v39 + 5) = 0;
                *(void *)long long v39 = 0;
                *((void *)v39 + 1) = 0;
                *((void *)v39 + 2) = v35;
                void *v37 = (uint64_t *)v39;
                uint64_t v40 = (void *)**v9;
                uint64_t v41 = (uint64_t *)v39;
                if (v40)
                {
                  *uint64_t v9 = v40;
                  uint64_t v41 = *v37;
                }
                uint64_t v42 = *v80;
                BOOL v43 = v41 == *v80;
                *((unsigned char *)v41 + 24) = v43;
                if (!v43)
                {
                  do
                  {
                    uint64_t v44 = v41[2];
                    if (*(unsigned char *)(v44 + 24)) {
                      break;
                    }
                    uint64_t v45 = *(uint64_t **)(v44 + 16);
                    uint64_t v46 = *v45;
                    if (*v45 == v44)
                    {
                      uint64_t v49 = v45[1];
                      if (!v49 || (v50 = *(unsigned __int8 *)(v49 + 24), uint64_t v47 = (unsigned char *)(v49 + 24), v50))
                      {
                        if (*(uint64_t **)v44 == v41)
                        {
                          *(unsigned char *)(v44 + 24) = 1;
                          *((unsigned char *)v45 + 24) = 0;
                          uint64_t v53 = *(void *)(v44 + 8);
                          *uint64_t v45 = v53;
                          if (v53) {
                            goto LABEL_39;
                          }
                        }
                        else
                        {
                          uint64_t v51 = *(uint64_t **)(v44 + 8);
                          uint64_t v52 = *v51;
                          *(void *)(v44 + 8) = *v51;
                          if (v52)
                          {
                            *(void *)(v52 + 16) = v44;
                            uint64_t v45 = *(uint64_t **)(v44 + 16);
                          }
                          double v51[2] = (uint64_t)v45;
                          *(void *)(*(void *)(v44 + 16) + 8 * (**(void **)(v44 + 16) != v44)) = v51;
                          uint64_t *v51 = v44;
                          *(void *)(v44 + 16) = v51;
                          uint64_t v45 = (uint64_t *)v51[2];
                          uint64_t v44 = *v45;
                          *((unsigned char *)v51 + 24) = 1;
                          *((unsigned char *)v45 + 24) = 0;
                          uint64_t v53 = *(void *)(v44 + 8);
                          *uint64_t v45 = v53;
                          if (v53) {
LABEL_39:
                          }
                            *(void *)(v53 + 16) = v45;
                        }
                        *(void *)(v44 + 16) = v45[2];
                        *(void *)(v45[2] + 8 * (*(void *)v45[2] != (void)v45)) = v44;
                        *(void *)(v44 + 8) = v45;
LABEL_46:
                        v45[2] = v44;
                        break;
                      }
                    }
                    else if (!v46 || (v48 = *(unsigned __int8 *)(v46 + 24), uint64_t v47 = (unsigned char *)(v46 + 24), v48))
                    {
                      if (*(uint64_t **)v44 == v41)
                      {
                        uint64_t v71 = v41[1];
                        *(void *)uint64_t v44 = v71;
                        if (v71)
                        {
                          *(void *)(v71 + 16) = v44;
                          uint64_t v45 = *(uint64_t **)(v44 + 16);
                        }
                        v41[2] = (uint64_t)v45;
                        *(void *)(*(void *)(v44 + 16) + 8 * (**(void **)(v44 + 16) != v44)) = v41;
                        v41[1] = v44;
                        *(void *)(v44 + 16) = v41;
                        uint64_t v45 = (uint64_t *)v41[2];
                        *((unsigned char *)v41 + 24) = 1;
                        *((unsigned char *)v45 + 24) = 0;
                        uint64_t v44 = v45[1];
                        id v54 = *(uint64_t **)v44;
                        v45[1] = *(void *)v44;
                        if (v54) {
LABEL_44:
                        }
                          v54[2] = (uint64_t)v45;
                      }
                      else
                      {
                        *(unsigned char *)(v44 + 24) = 1;
                        *((unsigned char *)v45 + 24) = 0;
                        uint64_t v44 = v45[1];
                        id v54 = *(uint64_t **)v44;
                        v45[1] = *(void *)v44;
                        if (v54) {
                          goto LABEL_44;
                        }
                      }
                      *(void *)(v44 + 16) = v45[2];
                      *(void *)(v45[2] + 8 * (*(void *)v45[2] != (void)v45)) = v44;
                      *(void *)uint64_t v44 = v45;
                      goto LABEL_46;
                    }
                    *(unsigned char *)(v44 + 24) = 1;
                    uint64_t v41 = v45;
                    *((unsigned char *)v45 + 24) = v45 == v42;
                    *uint64_t v47 = 1;
                  }
                  while (v45 != v42);
                }
                ++*(void *)(v81 + 24);
LABEL_48:
                objc_msgSend_drawing(v34, v27, v28, v29, v30, v31);
                id v55 = (CHDrawing *)objc_claimAutoreleasedReturnValue();
                CoreHandwriting::synthesis::fast_path::CHFastPathCharacter::CHFastPathCharacter((CoreHandwriting::synthesis::fast_path::CHFastPathCharacter *)buf, v55, *(_DWORD *)(v81 + 36), CodepointInString);
                unint64_t v57 = *((void *)v39 + 6);
                unint64_t v56 = *((void *)v39 + 7);
                if (v57 >= v56)
                {
                  uint64_t v60 = *((void *)v39 + 5);
                  unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - v60) >> 3) + 1;
                  if (v61 > 0xAAAAAAAAAAAAAAALL) {
                    sub_1C4A23B24();
                  }
                  unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - v60) >> 3);
                  if (2 * v62 > v61) {
                    unint64_t v61 = 2 * v62;
                  }
                  if (v62 >= 0x555555555555555) {
                    unint64_t v63 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v63 = v61;
                  }
                  if (v63)
                  {
                    if (v63 > 0xAAAAAAAAAAAAAAALL) {
                      sub_1C4949AA8();
                    }
                    uint64_t v64 = (char *)operator new(24 * v63);
                  }
                  else
                  {
                    uint64_t v64 = 0;
                  }
                  uint64_t v65 = &v64[8 * ((uint64_t)(v57 - v60) >> 3)];
                  int v66 = &v64[24 * v63];
                  id v67 = *(id *)buf;
                  *(void *)CGAffineTransform buf = 0;
                  *(void *)uint64_t v65 = v67;
                  *(_OWORD *)(v65 + 8) = v83;
                  uint64_t v59 = v65 + 24;
                  if (v57 == v60)
                  {
                    *((void *)v39 + 5) = v65;
                    *((void *)v39 + 6) = v59;
                    *((void *)v39 + 7) = v66;
                  }
                  else
                  {
                    do
                    {
                      uint64_t v68 = *(void *)(v57 - 24);
                      v57 -= 24;
                      *(void *)unint64_t v57 = 0;
                      *((void *)v65 - 3) = v68;
                      v65 -= 24;
                      *(_OWORD *)(v65 + 8) = *(_OWORD *)(v57 + 8);
                    }
                    while (v57 != v60);
                    unint64_t v57 = *((void *)v39 + 5);
                    uint64_t v69 = *((void *)v39 + 6);
                    *((void *)v39 + 5) = v65;
                    *((void *)v39 + 6) = v59;
                    *((void *)v39 + 7) = v66;
                    while (v69 != v57)
                    {
                      uint64_t v70 = *(void **)(v69 - 24);
                      v69 -= 24;
                    }
                  }
                  if (v57) {
                    operator delete((void *)v57);
                  }
                }
                else
                {
                  id v58 = *(id *)buf;
                  *(void *)CGAffineTransform buf = 0;
                  *(void *)unint64_t v57 = v58;
                  *(_OWORD *)(v57 + 8) = v83;
                  uint64_t v59 = (char *)(v57 + 24);
                }
                *((void *)v39 + 6) = v59;

                ++v33;
                uint64_t v9 = (void **)(v81 + 8);
              }
              while (v33 != v32);
              uint64_t v72 = objc_msgSend_countByEnumeratingWithState_objects_count_(v78, v27, (uint64_t)&v84, (uint64_t)v92, 16, v31);
              uint64_t v32 = v72;
            }
            while (v72);
          }

          uint64_t v17 = v77 + 1;
          uint64_t v9 = (void **)(v81 + 8);
        }
        while (v77 + 1 != v75);
        uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v12, (uint64_t)&v88, (uint64_t)v93, 16, v15);
      }
      while (v16);
    }
  }
}

void sub_1C4A29C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderStyleInventory::doAddCharacter(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderStyleInventory *this, const CoreHandwriting::synthesis::fast_path::CHFastPathCharacter *a2, int a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)this + 5);
  if (qword_1EA3CA000 == -1)
  {
    uint64_t v7 = (id)qword_1EA3C9FD8;
    uint64_t v8 = v7;
    if (v6)
    {
LABEL_3:
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = unicodeToNSString(*((_DWORD *)a2 + 3), v9, v10, v11, v12, v13);
        uint64_t v20 = objc_msgSend_copy(*(void **)a2, v15, v16, v17, v18, v19);
        int v34 = 138412802;
        uint64_t v35 = v14;
        __int16 v36 = 1024;
        int v37 = a3;
        __int16 v38 = 2112;
        long long v39 = v20;
        _os_log_impl(&dword_1C492D000, v8, OS_LOG_TYPE_DEFAULT, "CHFastPathCharacterHolderStyleInventory: add character %@, version %d, drawing %@ into inventory", (uint8_t *)&v34, 0x1Cu);
      }
      uint64_t v21 = (void *)*((void *)this + 5);
      uint64_t v8 = objc_msgSend_copy(*(void **)a2, v22, v23, v24, v25, v26);
      uint64_t v32 = unicodeToNSString(*((_DWORD *)a2 + 3), v27, v28, v29, v30, v31);
      objc_msgSend_addSampleOfSynthesizedCharacter_transcription_key_version_(v21, v33, (uint64_t)v8, (uint64_t)v32, *((unsigned int *)a2 + 3), a3);

      goto LABEL_9;
    }
  }
  else
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v7 = (id)qword_1EA3C9FD8;
    uint64_t v8 = v7;
    if (v6) {
      goto LABEL_3;
    }
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v34) = 0;
    _os_log_impl(&dword_1C492D000, v8, OS_LOG_TYPE_DEBUG, "CHFastPathCharacterHolderStyleInventory inventory is null", (uint8_t *)&v34, 2u);
  }
LABEL_9:
}

void sub_1C4A29E54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A29E68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A29E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A29E9C(uint64_t a1)
{
  *(void *)a1 = &unk_1F2010E30;
  sub_1C4A23B3C(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void sub_1C4A29EF8(uint64_t a1)
{
  *(void *)a1 = &unk_1F2010E30;
  sub_1C4A23B3C(a1 + 8, *(void **)(a1 + 16));
  JUMPOUT(0x1C8786460);
}

CoreHandwriting::synthesis::fast_path::CHFastPathCharacter *CoreHandwriting::synthesis::fast_path::CHFastPathCharacter::CHFastPathCharacter(CoreHandwriting::synthesis::fast_path::CHFastPathCharacter *this, CHDrawing *a2, int a3, int a4)
{
  uint64_t v7 = a2;
  *(void *)this = objc_msgSend_copy(v7, v8, v9, v10, v11, v12);
  *((_DWORD *)this + 2) = a3;
  *((_DWORD *)this + 3) = a4;
  *((void *)this + 2) = 0;
  if (objc_msgSend_characterAtIndex_(@".", v13, 0, v14, v15, v16) == a4
    || (int v21 = objc_msgSend_characterAtIndex_(@",", v17, 0, v18, v19, v20), v22 = 0.25, v21 == a4))
  {
    float v22 = 0.325;
  }
  *((float *)this + 4) = v22;
  *((float *)this + 5) = v22;

  return this;
}

{
  CHDrawing *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  float v22;

  uint64_t v7 = a2;
  *(void *)this = objc_msgSend_copy(v7, v8, v9, v10, v11, v12);
  *((_DWORD *)this + 2) = a3;
  *((_DWORD *)this + 3) = a4;
  *((void *)this + 2) = 0;
  if (objc_msgSend_characterAtIndex_(@".", v13, 0, v14, v15, v16) == a4
    || (int v21 = objc_msgSend_characterAtIndex_(@",", v17, 0, v18, v19, v20), v22 = 0.25, v21 == a4))
  {
    float v22 = 0.325;
  }
  *((float *)this + 4) = v22;
  *((float *)this + 5) = v22;

  return this;
}

void sub_1C4A2A008(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A2A018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A2A0CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A2A0E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::fast_path::CHFastPathCharacter::getNormalizedDrawing(void **this, float a2, float a3, float a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v12 = (id)objc_msgSend_copy(*this, a5, a6, a7, a8, a9);
  objc_msgSend_bounds(v12, v13, v14, v15, v16, v17);
  uint64_t v24 = objc_msgSend_drawingTransformedWithTranslation_scaleFactor_(v12, v19, v20, v21, v22, v23, (float)(a4 / (float)(a3 - a2)) - v18, (float)((float)(a3 / (float)(a3 - a2)) + -1.0), (float)(a3 - a2));

  return v24;
}

void sub_1C4A2A198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A2A1AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::fast_path::renormalizedDrawing(CoreHandwriting::synthesis::fast_path *this, const CHDrawing *a2, float a3, float a4, float a5, float a6, float a7)
{
  id v12 = this;
  objc_msgSend_bounds(v12, v13, v14, v15, v16, v17);
  uint64_t v24 = objc_msgSend_drawingTransformedWithTranslation_scaleFactor_(v12, v19, v20, v21, v22, v23, (float)(a5 / (float)((float)(a4 - a3) / (float)(a7 - a6))) - v18, (float)((float)(a4 / (float)((float)(a4 - a3) / (float)(a7 - a6))) - a7), (float)((float)(a4 - a3) / (float)(a7 - a6)));

  return v24;
}

void sub_1C4A2A264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A2A274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionTransliteration *CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionTransliteration::CHFastPathCharacterInventoryExtensionTransliteration(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionTransliteration *this)
{
  id v1 = this;
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F2010F30;
  *((void *)this + 2) = 0;
  uint64_t v103 = (uint64_t **)((char *)this + 16);
  *((void *)this + 1) = (char *)this + 16;
  uint64_t v2 = (void *)((char *)this + 8);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = (char *)this + 40;
  uint64_t v100 = (uint64_t **)((char *)this + 40);
  CoreHandwriting::synthesis::CHDiffusionSynthesisTransliterationCharacterExtensionMap(this);
  long long v107 = 0u;
  long long v108 = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v3, (uint64_t)&v105, (uint64_t)v109, 16, v4);
  uint64_t v101 = (void **)v2;
  uint64_t v102 = v1;
  if (v5)
  {
    uint64_t v6 = *(void *)v106;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v106 != v6) {
          objc_enumerationMutation(obj);
        }
        id v8 = *(id *)(*((void *)&v105 + 1) + 8 * v7);
        if (objc_msgSend_countCodepoints(v8, v9, v10, v11, v12, v13) == 1)
        {
          double v18 = objc_msgSend_objectForKeyedSubscript_(obj, v14, (uint64_t)v8, v15, v16, v17);
          BOOL v24 = objc_msgSend_countCodepoints(v18, v19, v20, v21, v22, v23) == 1;

          if (v24)
          {
            uint64_t v29 = objc_msgSend_objectForKeyedSubscript_(obj, v25, (uint64_t)v8, v26, v27, v28);
            int CodepointInString = objc_msgSend_firstCodepointInString(v29, v30, v31, v32, v33, v34);
            unsigned int v41 = objc_msgSend_firstCodepointInString(v8, v36, v37, v38, v39, v40);
            unsigned int v42 = v41;
            BOOL v43 = v103;
            while (1)
            {
              uint64_t v44 = *v43;
              uint64_t v45 = v43;
              if (!*v43) {
                break;
              }
              while (1)
              {
                BOOL v43 = (uint64_t **)v44;
                unsigned int v46 = *((_DWORD *)v44 + 7);
                if (v41 < v46) {
                  break;
                }
                if (v46 >= v41)
                {
                  uint64_t v47 = v43;
                  uint64_t v2 = v101;
                  id v1 = v102;
                  goto LABEL_40;
                }
                uint64_t v44 = v43[1];
                if (!v44)
                {
                  uint64_t v45 = v43 + 1;
                  goto LABEL_14;
                }
              }
            }
LABEL_14:
            uint64_t v47 = operator new(0x28uLL);
            v47[7] = v42;
            v47[8] = 0;
            *(void *)uint64_t v47 = 0;
            *((void *)v47 + 1) = 0;
            *((void *)v47 + 2) = v43;
            *uint64_t v45 = (uint64_t *)v47;
            uint64_t v2 = v101;
            int v48 = (void *)**v101;
            uint64_t v49 = (uint64_t *)v47;
            if (v48)
            {
              *uint64_t v101 = v48;
              uint64_t v49 = *v45;
            }
            id v1 = v102;
            int v50 = *v103;
            BOOL v51 = v49 == *v103;
            *((unsigned char *)v49 + 24) = v51;
            if (!v51)
            {
              do
              {
                uint64_t v52 = v49[2];
                if (*(unsigned char *)(v52 + 24)) {
                  break;
                }
                uint64_t v53 = *(uint64_t **)(v52 + 16);
                uint64_t v54 = *v53;
                if (*v53 == v52)
                {
                  uint64_t v57 = v53[1];
                  if (!v57 || (int v58 = *(unsigned __int8 *)(v57 + 24), v55 = (unsigned char *)(v57 + 24), v58))
                  {
                    if (*(uint64_t **)v52 == v49)
                    {
                      *(unsigned char *)(v52 + 24) = 1;
                      *((unsigned char *)v53 + 24) = 0;
                      uint64_t v61 = *(void *)(v52 + 8);
                      *uint64_t v53 = v61;
                      if (v61) {
                        goto LABEL_31;
                      }
                    }
                    else
                    {
                      uint64_t v59 = *(uint64_t **)(v52 + 8);
                      uint64_t v60 = *v59;
                      *(void *)(v52 + 8) = *v59;
                      if (v60)
                      {
                        *(void *)(v60 + 16) = v52;
                        uint64_t v53 = *(uint64_t **)(v52 + 16);
                      }
                      v59[2] = (uint64_t)v53;
                      *(void *)(*(void *)(v52 + 16) + 8 * (**(void **)(v52 + 16) != v52)) = v59;
                      *uint64_t v59 = v52;
                      *(void *)(v52 + 16) = v59;
                      uint64_t v53 = (uint64_t *)v59[2];
                      uint64_t v52 = *v53;
                      *((unsigned char *)v59 + 24) = 1;
                      *((unsigned char *)v53 + 24) = 0;
                      uint64_t v61 = *(void *)(v52 + 8);
                      *uint64_t v53 = v61;
                      if (v61) {
LABEL_31:
                      }
                        *(void *)(v61 + 16) = v53;
                    }
                    *(void *)(v52 + 16) = v53[2];
                    *(void *)(v53[2] + 8 * (*(void *)v53[2] != (void)v53)) = v52;
                    *(void *)(v52 + 8) = v53;
LABEL_38:
                    v53[2] = v52;
                    break;
                  }
                }
                else if (!v54 || (int v56 = *(unsigned __int8 *)(v54 + 24), v55 = (unsigned char *)(v54 + 24), v56))
                {
                  if (*(uint64_t **)v52 == v49)
                  {
                    uint64_t v65 = v49[1];
                    *(void *)uint64_t v52 = v65;
                    if (v65)
                    {
                      *(void *)(v65 + 16) = v52;
                      uint64_t v53 = *(uint64_t **)(v52 + 16);
                    }
                    v49[2] = (uint64_t)v53;
                    *(void *)(*(void *)(v52 + 16) + 8 * (**(void **)(v52 + 16) != v52)) = v49;
                    v49[1] = v52;
                    *(void *)(v52 + 16) = v49;
                    uint64_t v53 = (uint64_t *)v49[2];
                    *((unsigned char *)v49 + 24) = 1;
                    *((unsigned char *)v53 + 24) = 0;
                    uint64_t v52 = v53[1];
                    unint64_t v62 = *(uint64_t **)v52;
                    v53[1] = *(void *)v52;
                    if (v62) {
LABEL_36:
                    }
                      v62[2] = (uint64_t)v53;
                  }
                  else
                  {
                    *(unsigned char *)(v52 + 24) = 1;
                    *((unsigned char *)v53 + 24) = 0;
                    uint64_t v52 = v53[1];
                    unint64_t v62 = *(uint64_t **)v52;
                    v53[1] = *(void *)v52;
                    if (v62) {
                      goto LABEL_36;
                    }
                  }
                  *(void *)(v52 + 16) = v53[2];
                  *(void *)(v53[2] + 8 * (*(void *)v53[2] != (void)v53)) = v52;
                  *(void *)uint64_t v52 = v53;
                  goto LABEL_38;
                }
                *(unsigned char *)(v52 + 24) = 1;
                uint64_t v49 = v53;
                *((unsigned char *)v53 + 24) = v53 == v50;
                unsigned char *v55 = 1;
              }
              while (v53 != v50);
            }
            ++*((void *)v102 + 3);
LABEL_40:
            v47[8] = CodepointInString;
          }
        }

        ++v7;
      }
      while (v7 != v5);
      uint64_t v66 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v63, (uint64_t)&v105, (uint64_t)v109, 16, v64);
      uint64_t v5 = v66;
    }
    while (v66);
  }

  id v67 = (void *)*v2;
  if ((uint64_t **)*v2 != v103)
  {
    do
    {
      int v70 = *((_DWORD *)v67 + 7);
      unsigned int v69 = *((_DWORD *)v67 + 8);
      uint64_t v71 = v100;
      uint64_t v72 = v100;
      uint64_t v73 = *v100;
      if (*v100)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v72 = (uint64_t **)v73;
            unsigned int v74 = *((_DWORD *)v73 + 8);
            if (v74 <= v69) {
              break;
            }
            uint64_t v73 = *v72;
            uint64_t v71 = v72;
            if (!*v72) {
              goto LABEL_60;
            }
          }
          if (v74 >= v69) {
            break;
          }
          uint64_t v73 = v72[1];
          if (!v73)
          {
            uint64_t v71 = v72 + 1;
            goto LABEL_60;
          }
        }
        uint64_t v75 = v72;
        uint64_t v79 = (char *)v72[6];
        unint64_t v78 = (unint64_t)v72[7];
        if ((unint64_t)v79 >= v78)
        {
LABEL_65:
          uint64_t v81 = (char *)v75[5];
          uint64_t v82 = (v79 - v81) >> 2;
          unint64_t v83 = v82 + 1;
          if ((unint64_t)(v82 + 1) >> 62) {
            sub_1C494A220();
          }
          uint64_t v84 = v78 - (void)v81;
          if (v84 >> 1 > v83) {
            unint64_t v83 = v84 >> 1;
          }
          if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v85 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v85 = v83;
          }
          if (v85)
          {
            if (v85 >> 62) {
              sub_1C4949AA8();
            }
            long long v86 = operator new(4 * v85);
            long long v87 = &v86[4 * v82];
            *long long v87 = v70;
            uint64_t v80 = (uint64_t)(v87 + 1);
            int64_t v88 = v79 - v81;
            if (v79 != v81)
            {
LABEL_74:
              unint64_t v89 = v88 - 4;
              if (v89 < 0x2C)
              {
                id v1 = v102;
                goto LABEL_82;
              }
              id v1 = v102;
              if ((unint64_t)(v81 - v86) < 0x20) {
                goto LABEL_95;
              }
              uint64_t v90 = (v89 >> 2) + 1;
              uint64_t v91 = 4 * (v90 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v92 = &v79[-v91];
              long long v87 = (_DWORD *)((char *)v87 - v91);
              uint64_t v93 = &v86[4 * v82 - 16];
              uint64_t v94 = v79 - 16;
              uint64_t v95 = v90 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v96 = *(_OWORD *)v94;
                *(v93 - 1) = *((_OWORD *)v94 - 1);
                _OWORD *v93 = v96;
                v93 -= 2;
                v94 -= 32;
                v95 -= 8;
              }
              while (v95);
              uint64_t v79 = v92;
              if (v90 != (v90 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_95:
                do
                {
LABEL_82:
                  int v97 = *((_DWORD *)v79 - 1);
                  v79 -= 4;
                  *--long long v87 = v97;
                }
                while (v79 != v81);
              }
LABEL_83:
              v75[5] = v87;
              v75[6] = v80;
              v75[7] = &v86[4 * v85];
              if (v81) {
                operator delete(v81);
              }
              goto LABEL_85;
            }
          }
          else
          {
            long long v86 = 0;
            long long v87 = (_DWORD *)(4 * v82);
            *(_DWORD *)(4 * v82) = v70;
            uint64_t v80 = 4 * v82 + 4;
            int64_t v88 = v79 - v81;
            if (v79 != v81) {
              goto LABEL_74;
            }
          }
          id v1 = v102;
          goto LABEL_83;
        }
      }
      else
      {
LABEL_60:
        uint64_t v75 = operator new(0x40uLL);
        *((_DWORD *)v75 + 8) = v69;
        v75[6] = 0;
        v75[7] = 0;
        v75[5] = 0;
        void *v75 = 0;
        v75[1] = 0;
        v75[2] = v72;
        *uint64_t v71 = v75;
        id v1 = v102;
        uint64_t v76 = **((void **)v102 + 4);
        uint64_t v77 = v75;
        if (v76)
        {
          *((void *)v102 + 4) = v76;
          uint64_t v77 = *v71;
        }
        sub_1C4949FD4(*((uint64_t **)v102 + 5), v77);
        ++*((void *)v102 + 6);
        uint64_t v79 = (char *)v75[6];
        unint64_t v78 = v75[7];
        if ((unint64_t)v79 >= v78) {
          goto LABEL_65;
        }
      }
      *(_DWORD *)uint64_t v79 = v70;
      uint64_t v80 = (uint64_t)(v79 + 4);
LABEL_85:
      v75[6] = v80;
      BOOL v98 = (void *)v67[1];
      if (v98)
      {
        do
        {
          uint64_t v99 = (uint64_t **)v98;
          BOOL v98 = (void *)*v98;
        }
        while (v98);
      }
      else
      {
        do
        {
          uint64_t v99 = (uint64_t **)v67[2];
          BOOL v51 = *v99 == v67;
          id v67 = v99;
        }
        while (!v51);
      }
      id v67 = v99;
    }
    while (v99 != v103);
  }

  return v1;
}

void sub_1C4A2A8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void **a13, void *a14)
{
  sub_1C4A2C604(*a10);
  sub_1C4999C7C(v14, *a13);
  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionTransliteration::hasExtensionRulesToCharacter(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionTransliteration *this, unsigned int a2)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 2);
  if (!v2) {
    return 0;
  }
  while (1)
  {
    unsigned int v4 = *((_DWORD *)v2 + 7);
    if (v4 <= a2) {
      break;
    }
LABEL_3:
    uint64_t v2 = (uint64_t *)*v2;
    if (!v2) {
      return 0;
    }
  }
  if (v4 < a2)
  {
    ++v2;
    goto LABEL_3;
  }
  return 1;
}

_DWORD *CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionTransliteration::getCharactersWhichCanBeExtendedToCodepoint@<X0>(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionTransliteration *this@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  uint64_t v6 = *((void *)this + 2);
  __n128 result = (_DWORD *)((char *)this + 16);
  uint64_t v5 = v6;
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = (uint64_t)result;
  do
  {
    unsigned int v8 = *(_DWORD *)(v5 + 28);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = (uint64_t *)v5;
    }
    else {
      uint64_t v10 = (uint64_t *)(v5 + 8);
    }
    if (v9) {
      uint64_t v7 = v5;
    }
    uint64_t v5 = *v10;
  }
  while (*v10);
  if ((_DWORD *)v7 != result && *(_DWORD *)(v7 + 28) <= a2)
  {
    int v11 = *(_DWORD *)(v7 + 32);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    uint64_t v12 = operator new(4uLL);
    *a3 = v12;
    *uint64_t v12 = v11;
    __n128 result = v12 + 1;
    a3[1] = result;
    a3[2] = result;
  }
  else
  {
LABEL_12:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

void sub_1C4A2AA38(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unsigned int v4 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v5 = a3;
    uint64_t v7 = (void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6)
    {
      unsigned int v8 = 0;
      unsigned int v74 = v5;
      uint64_t v75 = a2[1];
LABEL_5:
      unsigned int v9 = *v4;
      uint64_t v10 = v7;
      do
      {
        unsigned int v11 = *(_DWORD *)(v6 + 32);
        BOOL v12 = v11 >= v9;
        if (v11 >= v9) {
          uint64_t v13 = (uint64_t *)v6;
        }
        else {
          uint64_t v13 = (uint64_t *)(v6 + 8);
        }
        if (v12) {
          uint64_t v10 = (void *)v6;
        }
        uint64_t v6 = *v13;
      }
      while (*v13);
      if (v10 != v7 && v9 >= *((_DWORD *)v10 + 8))
      {
        uint64_t v15 = (char *)v10[5];
        uint64_t v14 = (char *)v10[6];
        uint64_t v16 = v14 - v15;
        if (v14 - v15 >= 1)
        {
          uint64_t v17 = v16 >> 2;
          unint64_t v18 = *v5;
          uint64_t v19 = (uint64_t)&v8[-*v5];
          uint64_t v20 = v19 >> 2;
          uint64_t v21 = (char *)(*v5 + (v19 & 0xFFFFFFFFFFFFFFFCLL));
          uint64_t v22 = v5[2];
          if (v16 >> 2 > (v22 - (uint64_t)v8) >> 2)
          {
            unint64_t v23 = v20 + v17;
            if ((unint64_t)(v20 + v17) >> 62) {
              sub_1C494A220();
            }
            uint64_t v24 = v22 - v18;
            if (v24 >> 1 > v23) {
              unint64_t v23 = v24 >> 1;
            }
            BOOL v12 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v12) {
              unint64_t v25 = v23;
            }
            unint64_t v72 = v25;
            if (v25)
            {
              if (v25 >> 62) {
                sub_1C4949AA8();
              }
              unint64_t v26 = *v5 + (v19 & 0xFFFFFFFFFFFFFFFCLL);
              uint64_t v27 = operator new(4 * v25);
              uint64_t v21 = (char *)v26;
              uint64_t v20 = v19 >> 2;
              uint64_t v28 = (uint64_t)&v27[4 * (v19 >> 2)];
              uint64_t v29 = (char *)(v28 + 4 * v17);
              unint64_t v30 = v16 - 4;
              if ((unint64_t)(v16 - 4) < 0x1C) {
                goto LABEL_25;
              }
            }
            else
            {
              uint64_t v27 = 0;
              uint64_t v28 = 4 * v20;
              uint64_t v29 = (char *)(4 * v20 + 4 * v17);
              unint64_t v30 = v16 - 4;
              if ((unint64_t)(v16 - 4) < 0x1C)
              {
LABEL_25:
                uint64_t v31 = (char *)v28;
                goto LABEL_42;
              }
            }
            uint64_t v31 = (char *)v28;
            if ((unint64_t)(&v27[v19 & 0xFFFFFFFFFFFFFFFCLL] - v15) >= 0x20)
            {
              uint64_t v45 = (v30 >> 2) + 1;
              uint64_t v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v31 = (char *)(v28 + v46);
              uint64_t v47 = &v15[v46];
              int v48 = (long long *)(v15 + 16);
              uint64_t v49 = &v27[4 * v20 + 16];
              uint64_t v50 = v45 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v51 = *v48;
                *(v49 - 1) = *(v48 - 1);
                *uint64_t v49 = v51;
                v48 += 2;
                v49 += 2;
                v50 -= 8;
              }
              while (v50);
              uint64_t v15 = v47;
              if (v45 == (v45 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_43:
                if ((char *)v18 != v8)
                {
                  if ((unint64_t)(v19 - 4) >= 0x3C)
                  {
                    uint64_t v53 = v21;
                    if (v18 + (v19 & 0xFFFFFFFFFFFFFFFCLL) - (unint64_t)&v27[v19 & 0xFFFFFFFFFFFFFFFCLL] >= 0x20)
                    {
                      unint64_t v54 = ((unint64_t)(v19 - 4) >> 2) + 1;
                      uint64_t v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
                      uint64_t v53 = &v21[-v55];
                      v28 -= v55;
                      int v56 = &v27[4 * v20 - 16];
                      uint64_t v57 = (long long *)(v18 + 4 * v20 - 16);
                      uint64_t v58 = v54 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        long long v59 = *v57;
                        *(v56 - 1) = *(v57 - 1);
                        _OWORD *v56 = v59;
                        v56 -= 2;
                        v57 -= 2;
                        v58 -= 8;
                      }
                      while (v58);
                      if (v54 == (v54 & 0x7FFFFFFFFFFFFFF8)) {
                        goto LABEL_51;
                      }
                    }
                  }
                  else
                  {
                    uint64_t v53 = v21;
                  }
                  do
                  {
                    int v60 = *((_DWORD *)v53 - 1);
                    v53 -= 4;
                    *(_DWORD *)(v28 - 4) = v60;
                    v28 -= 4;
                  }
                  while (v53 != (char *)v18);
                }
LABEL_51:
                size_t v61 = v8 - v21;
                if (v61)
                {
                  unint64_t v62 = v27;
                  memmove(v29, v21, v61);
                  uint64_t v27 = v62;
                }
                unsigned int v8 = &v29[v61];
                uint64_t v5 = v74;
                uint64_t *v74 = v28;
                v74[1] = (uint64_t)v8;
                v74[2] = (uint64_t)&v27[4 * v72];
                if (v18) {
                  operator delete((void *)v18);
                }
                goto LABEL_65;
              }
            }
            do
            {
LABEL_42:
              int v52 = *(_DWORD *)v15;
              v15 += 4;
              *(_DWORD *)uint64_t v31 = v52;
              v31 += 4;
            }
            while (v31 != v29);
            goto LABEL_43;
          }
          uint64_t v32 = v8 - v21;
          uint64_t v33 = (v8 - v21) >> 2;
          if (v33 >= v17)
          {
            uint64_t v34 = &v15[4 * v17];
            __int16 v36 = v8;
          }
          else
          {
            uint64_t v34 = &v15[4 * v33];
            int64_t v35 = v14 - v34;
            if (v14 != v34)
            {
              uint64_t v71 = &v15[4 * v33];
              uint64_t v73 = v21;
              memmove(v8, v71, v14 - v34);
              uint64_t v20 = v19 >> 2;
              uint64_t v34 = v71;
              uint64_t v21 = v73;
            }
            __int16 v36 = &v8[v35];
            uint64_t v5 = v74;
            v74[1] = (uint64_t)v36;
            if (v32 < 1)
            {
              unsigned int v8 = v36;
LABEL_65:
              uint64_t v3 = v75;
              goto LABEL_66;
            }
          }
          uint64_t v37 = &v21[4 * v17];
          size_t v38 = v36 - v37;
          uint64_t v39 = (v36 - v37) >> 2;
          uint64_t v40 = &v36[-4 * v17];
          unsigned int v41 = v36;
          if (v40 < v8)
          {
            unint64_t v42 = (v19 & 0xFFFFFFFFFFFFFFFCLL) + v38;
            unint64_t v43 = v18 + v42 + 4;
            if ((unint64_t)v8 > v43) {
              unint64_t v43 = (unint64_t)v8;
            }
            unint64_t v44 = v43 + ~v18 - v42;
            if (v44 >= 0x2C)
            {
              unsigned int v41 = v36;
              if ((unint64_t)&v37[-(v19 & 0xFFFFFFFFFFFFFFFCLL) - v18] >= 0x20)
              {
                uint64_t v63 = (v44 >> 2) + 1;
                uint64_t v64 = 4 * (v63 & 0x7FFFFFFFFFFFFFF8);
                v40 += v64;
                unsigned int v41 = &v36[v64];
                uint64_t v65 = v36 + 16;
                uint64_t v66 = (long long *)(v18 + 4 * v39 + 4 * v20 + 16);
                uint64_t v67 = v63 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v68 = *v66;
                  *(v65 - 1) = *(v66 - 1);
                  _OWORD *v65 = v68;
                  v65 += 2;
                  v66 += 2;
                  v67 -= 8;
                }
                while (v67);
                if (v63 == (v63 & 0x7FFFFFFFFFFFFFF8)) {
                  goto LABEL_60;
                }
              }
            }
            else
            {
              unsigned int v41 = v36;
            }
            do
            {
              int v69 = *(_DWORD *)v40;
              v40 += 4;
              *(_DWORD *)unsigned int v41 = v69;
              v41 += 4;
            }
            while (v40 < v8);
          }
LABEL_60:
          v5[1] = (uint64_t)v41;
          if (v36 != v37)
          {
            int v70 = v21;
            memmove(&v36[-4 * v39], v21, v38);
            uint64_t v21 = v70;
          }
          if (v34 != v15) {
            memmove(v21, v15, v34 - v15);
          }
          unsigned int v8 = v41;
          goto LABEL_65;
        }
      }
LABEL_66:
      while (++v4 != v3)
      {
        uint64_t v6 = *v7;
        if (*v7) {
          goto LABEL_5;
        }
      }
    }
  }
}

void sub_1C4A2AE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (v11)
  {
    *(void *)(a11 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

__n128 CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionTransliteration::extend@<Q0>(const CoreHandwriting::synthesis::fast_path::CHFastPathCharacter *a1@<X3>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(id *)a1;
  __n128 result = *(__n128 *)((char *)a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionSuperscript *CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionSuperscript::CHFastPathCharacterInventoryExtensionSuperscript(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionSuperscript *this)
{
  uint64_t v2 = 0;
  *(void *)this = &unk_1F2010EF0;
  *((void *)this + 2) = 0;
  uint64_t v3 = (uint64_t **)((char *)this + 16);
  *((void *)this + 1) = (char *)this + 16;
  unsigned int v4 = (uint64_t ***)((char *)this + 8);
  *((void *)this + 3) = 0;
  *((void *)this + 5) = 0;
  uint64_t v5 = (uint64_t **)((char *)this + 40);
  *((void *)this + 4) = (char *)this + 40;
  uint64_t v28 = (void **)((char *)this + 32);
  *((void *)this + 6) = 0;
  do
  {
    uint64_t v6 = &aP_8[8 * v2];
    uint64_t v7 = *v3;
    unsigned int v8 = v3;
    unsigned int v9 = v3;
    if (*v3)
    {
      unsigned int v10 = *(_DWORD *)v6;
      while (1)
      {
        while (1)
        {
          unsigned int v9 = (uint64_t **)v7;
          unsigned int v11 = *((_DWORD *)v7 + 7);
          if (v10 >= v11) {
            break;
          }
          uint64_t v7 = *v9;
          unsigned int v8 = v9;
          if (!*v9) {
            goto LABEL_11;
          }
        }
        if (v11 >= v10) {
          break;
        }
        uint64_t v7 = v9[1];
        if (!v7)
        {
          unsigned int v8 = v9 + 1;
          goto LABEL_11;
        }
      }
    }
    else
    {
LABEL_11:
      BOOL v12 = (uint64_t *)operator new(0x28uLL);
      *(uint64_t *)((char *)v12 + 28) = *(void *)v6;
      *BOOL v12 = 0;
      v12[1] = 0;
      v12[2] = (uint64_t)v9;
      *unsigned int v8 = v12;
      uint64_t v13 = **v4;
      if (v13)
      {
        *unsigned int v4 = (uint64_t **)v13;
        BOOL v12 = *v8;
      }
      sub_1C4949FD4(*((uint64_t **)this + 2), v12);
      ++*((void *)this + 3);
    }
    ++v2;
  }
  while (v2 != 12);
  uint64_t v14 = (uint64_t *)*v4;
  if (*v4 != v3)
  {
    do
    {
      int v16 = *((_DWORD *)v14 + 7);
      unsigned int v17 = *((_DWORD *)v14 + 8);
      unint64_t v18 = v5;
      uint64_t v19 = v5;
      if (*v5)
      {
        uint64_t v20 = *v5;
        while (1)
        {
          while (1)
          {
            uint64_t v19 = (uint64_t **)v20;
            unsigned int v21 = *((_DWORD *)v20 + 7);
            if (v21 <= v17) {
              break;
            }
            uint64_t v20 = *v19;
            unint64_t v18 = v19;
            if (!*v19) {
              goto LABEL_23;
            }
          }
          if (v21 >= v17) {
            break;
          }
          uint64_t v20 = v19[1];
          if (!v20)
          {
            unint64_t v18 = v19 + 1;
            goto LABEL_23;
          }
        }
        *((_DWORD *)v19 + 8) = v16;
        unint64_t v25 = (uint64_t *)v14[1];
        if (v25)
        {
          do
          {
LABEL_28:
            unint64_t v26 = (uint64_t **)v25;
            unint64_t v25 = (uint64_t *)*v25;
          }
          while (v25);
          goto LABEL_15;
        }
      }
      else
      {
LABEL_23:
        uint64_t v22 = operator new(0x28uLL);
        v22[7] = v17;
        v22[8] = 0;
        *(void *)uint64_t v22 = 0;
        *((void *)v22 + 1) = 0;
        *((void *)v22 + 2) = v19;
        *unint64_t v18 = (uint64_t *)v22;
        unint64_t v23 = (void *)**v28;
        uint64_t v24 = (uint64_t *)v22;
        if (v23)
        {
          *uint64_t v28 = v23;
          uint64_t v24 = *v18;
        }
        sub_1C4949FD4(*((uint64_t **)this + 5), v24);
        ++*((void *)this + 6);
        v22[8] = v16;
        unint64_t v25 = (uint64_t *)v14[1];
        if (v25) {
          goto LABEL_28;
        }
      }
      do
      {
        unint64_t v26 = (uint64_t **)v14[2];
        BOOL v27 = *v26 == v14;
        uint64_t v14 = (uint64_t *)v26;
      }
      while (!v27);
LABEL_15:
      uint64_t v14 = (uint64_t *)v26;
    }
    while (v26 != v3);
  }
  return this;
}

void sub_1C4A2B12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1C4999C7C(a10, v10);
  sub_1C4999C7C(a9, *v11);
  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionSuperscript::hasExtensionRulesToCharacter(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionSuperscript *this, unsigned int a2)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 2);
  if (!v2) {
    return 0;
  }
  while (1)
  {
    unsigned int v4 = *((_DWORD *)v2 + 7);
    if (v4 <= a2) {
      break;
    }
LABEL_3:
    uint64_t v2 = (uint64_t *)*v2;
    if (!v2) {
      return 0;
    }
  }
  if (v4 < a2)
  {
    ++v2;
    goto LABEL_3;
  }
  return 1;
}

_DWORD *CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionSuperscript::getCharactersWhichCanBeExtendedToCodepoint@<X0>(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionSuperscript *this@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  uint64_t v6 = *((void *)this + 2);
  __n128 result = (_DWORD *)((char *)this + 16);
  uint64_t v5 = v6;
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = (uint64_t)result;
  do
  {
    unsigned int v8 = *(_DWORD *)(v5 + 28);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      unsigned int v10 = (uint64_t *)v5;
    }
    else {
      unsigned int v10 = (uint64_t *)(v5 + 8);
    }
    if (v9) {
      uint64_t v7 = v5;
    }
    uint64_t v5 = *v10;
  }
  while (*v10);
  if ((_DWORD *)v7 != result && *(_DWORD *)(v7 + 28) <= a2)
  {
    int v11 = *(_DWORD *)(v7 + 32);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    BOOL v12 = operator new(4uLL);
    *a3 = v12;
    *BOOL v12 = v11;
    __n128 result = v12 + 1;
    a3[1] = result;
    a3[2] = result;
  }
  else
  {
LABEL_12:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

void sub_1C4A2B228(uint64_t a1@<X0>, unsigned int **a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *a2;
  unsigned int v4 = a2[1];
  if (*a2 != v4)
  {
    uint64_t v5 = a3;
    uint64_t v7 = (void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6)
    {
      unsigned int v8 = 0;
      BOOL v9 = 0;
      unsigned int v10 = 0;
      uint64_t v33 = v5;
LABEL_4:
      unsigned int v11 = *v3;
      BOOL v12 = v7;
      do
      {
        unsigned int v13 = *(_DWORD *)(v6 + 28);
        BOOL v14 = v13 >= v11;
        if (v13 >= v11) {
          uint64_t v15 = (uint64_t *)v6;
        }
        else {
          uint64_t v15 = (uint64_t *)(v6 + 8);
        }
        if (v14) {
          BOOL v12 = (void *)v6;
        }
        uint64_t v6 = *v15;
      }
      while (*v15);
      if (v12 != v7 && v11 >= *((_DWORD *)v12 + 7))
      {
        if (v10 < v9)
        {
          *(_DWORD *)unsigned int v10 = *((_DWORD *)v12 + 8);
          uint64_t v16 = (uint64_t)(v10 + 4);
LABEL_31:
          v5[1] = (char *)v16;
          unsigned int v10 = (char *)v16;
          goto LABEL_32;
        }
        uint64_t v17 = (v10 - v8) >> 2;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62) {
          sub_1C494A220();
        }
        if ((v9 - v8) >> 1 > v18) {
          unint64_t v18 = (v9 - v8) >> 1;
        }
        if ((unint64_t)(v9 - v8) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v19)
        {
          if (v19 >> 62) {
            sub_1C4949AA8();
          }
          uint64_t v20 = operator new(4 * v19);
          unsigned int v21 = &v20[4 * v17];
          *(_DWORD *)unsigned int v21 = *((_DWORD *)v12 + 8);
          uint64_t v16 = (uint64_t)(v21 + 4);
          int64_t v22 = v10 - v8;
          if (v10 != v8)
          {
LABEL_25:
            unint64_t v23 = v22 - 4;
            if (v23 < 0xBC
              || (unint64_t v26 = (v10 - 4 - v8) & 0xFFFFFFFFFFFFFFFCLL, &v20[v10 - v8 - 4 - v26] > &v20[v10 - v8 - 4])
              || &v10[-v26 - 4] > v10 - 4
              || (unint64_t)(v8 - v20) < 0x20)
            {
              uint64_t v24 = v10;
              uint64_t v5 = v33;
            }
            else
            {
              uint64_t v27 = (v23 >> 2) + 1;
              uint64_t v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v24 = &v10[-v28];
              v21 -= v28;
              uint64_t v29 = &v20[4 * v17 - 16];
              unint64_t v30 = v10 - 16;
              uint64_t v31 = v27 & 0x7FFFFFFFFFFFFFF8;
              uint64_t v5 = v33;
              do
              {
                long long v32 = *(_OWORD *)v30;
                *(v29 - 1) = *((_OWORD *)v30 - 1);
                *uint64_t v29 = v32;
                v29 -= 2;
                v30 -= 32;
                v31 -= 8;
              }
              while (v31);
              if (v27 == (v27 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_28:
                BOOL v9 = &v20[4 * v19];
                uint64_t *v5 = v21;
                v5[1] = (char *)v16;
                v5[2] = v9;
                if (!v8)
                {
LABEL_30:
                  unsigned int v8 = v21;
                  goto LABEL_31;
                }
LABEL_29:
                operator delete(v8);
                goto LABEL_30;
              }
            }
            do
            {
              int v25 = *((_DWORD *)v24 - 1);
              v24 -= 4;
              *((_DWORD *)v21 - 1) = v25;
              v21 -= 4;
            }
            while (v24 != v8);
            goto LABEL_28;
          }
        }
        else
        {
          uint64_t v20 = 0;
          unsigned int v21 = (char *)(4 * v17);
          *(_DWORD *)(4 * v17) = *((_DWORD *)v12 + 8);
          uint64_t v16 = 4 * v17 + 4;
          int64_t v22 = v10 - v8;
          if (v10 != v8) {
            goto LABEL_25;
          }
        }
        uint64_t v5 = v33;
        BOOL v9 = &v20[4 * v19];
        *uint64_t v33 = v21;
        v33[1] = (char *)v16;
        v33[2] = v9;
        if (!v8) {
          goto LABEL_30;
        }
        goto LABEL_29;
      }
LABEL_32:
      while (++v3 != v4)
      {
        uint64_t v6 = *v7;
        if (*v7) {
          goto LABEL_4;
        }
      }
    }
  }
}

void sub_1C4A2B488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int v11 = *(void **)a10;
  if (*(void *)a10)
  {
    *(void *)(a10 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionSuperscript::extend(void **a1@<X3>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, float32x2_t *a6@<X8>)
{
  __int32 v8 = a3;
  id v10 = (id)objc_msgSend_copy(*a1, a2, a3, (uint64_t)a1, a4, a5);
  objc_msgSend_bounds(v10, v11, v12, v13, v14, v15);
  objc_msgSend_drawingTransformedWithTranslation_scaleFactor_(v10, v17, v18, v19, v20, v21, 0.0 - v16, -1.0, 0.5);
  id v28 = (id)objc_claimAutoreleasedReturnValue();

  float32x2_t v22 = (float32x2_t)a1[2];
  LODWORD(v10) = *((_DWORD *)a1 + 2);
  *a6 = (float32x2_t)objc_msgSend_copy(v28, v23, v24, v25, v26, v27);
  a6[1].i32[0] = (int)v10;
  a6[1].i32[1] = v8;
  a6[2] = vmul_f32(v22, (float32x2_t)0x3F0000003F000000);
}

void sub_1C4A2B564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A2B578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A2B58C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventory *CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventory::CHFastPathCharacterInventory(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventory *this)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  uint64_t v2 = (void *)((char *)this + 24);
  *(_OWORD *)this = 0u;
  uint64_t v3 = operator new(0x50uLL);
  v3[1] = 0;
  v3[2] = 0;
  *uint64_t v3 = &unk_1F2011060;
  unsigned int v4 = v3 + 3;
  CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionSuperscript::CHFastPathCharacterInventoryExtensionSuperscript((CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionSuperscript *)(v3 + 3));
  uint64_t v6 = (void *)*((void *)this + 4);
  unint64_t v5 = *((void *)this + 5);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v7 = (void *)*v2;
    uint64_t v8 = ((uint64_t)v6 - *v2) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      sub_1C494A220();
    }
    uint64_t v10 = v5 - (void)v7;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11 >> 60) {
      sub_1C4949AA8();
    }
    uint64_t v12 = (char *)operator new(16 * v11);
    uint64_t v13 = &v12[16 * v8];
    *(void *)uint64_t v13 = v4;
    *((void *)v13 + 1) = v3;
    uint64_t v14 = &v12[16 * v11];
    uint64_t v15 = v13 + 16;
    if (v6 == v7)
    {
      *((void *)this + 3) = v13;
      *((void *)this + 4) = v15;
      *((void *)this + 5) = v14;
    }
    else
    {
      do
      {
        long long v16 = *((_OWORD *)v6 - 1);
        v6 -= 2;
        *((_OWORD *)v13 - 1) = v16;
        v13 -= 16;
        void *v6 = 0;
        v6[1] = 0;
      }
      while (v6 != v7);
      uint64_t v6 = (void *)*((void *)this + 3);
      uint64_t v17 = (void *)*((void *)this + 4);
      *((void *)this + 3) = v13;
      *((void *)this + 4) = v15;
      for (*((void *)this + 5) = v14; v17 != v6; v17 -= 2)
      {
        uint64_t v18 = (std::__shared_weak_count *)*(v17 - 1);
        if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
    if (v6) {
      operator delete(v6);
    }
    *((void *)this + 4) = v15;
  }
  else
  {
    void *v6 = v4;
    v6[1] = v3;
    *((void *)this + 4) = v6 + 2;
  }
  uint64_t v19 = operator new(0x50uLL);
  v19[1] = 0;
  v19[2] = 0;
  *uint64_t v19 = &unk_1F2011098;
  uint64_t v20 = v19 + 3;
  CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionTransliteration::CHFastPathCharacterInventoryExtensionTransliteration((CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionTransliteration *)(v19 + 3));
  float32x2_t v22 = (void *)*((void *)this + 4);
  unint64_t v21 = *((void *)this + 5);
  if ((unint64_t)v22 >= v21)
  {
    unint64_t v23 = (void *)*v2;
    uint64_t v24 = ((uint64_t)v22 - *v2) >> 4;
    unint64_t v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 60) {
      sub_1C494A220();
    }
    uint64_t v26 = v21 - (void)v23;
    if (v26 >> 3 > v25) {
      unint64_t v25 = v26 >> 3;
    }
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v25;
    }
    if (v27 >> 60) {
      sub_1C4949AA8();
    }
    id v28 = (char *)operator new(16 * v27);
    uint64_t v29 = &v28[16 * v24];
    *(void *)uint64_t v29 = v20;
    *((void *)v29 + 1) = v19;
    unint64_t v30 = &v28[16 * v27];
    uint64_t v31 = v29 + 16;
    if (v22 == v23)
    {
      *((void *)this + 3) = v29;
      *((void *)this + 4) = v31;
      *((void *)this + 5) = v30;
    }
    else
    {
      do
      {
        long long v32 = *((_OWORD *)v22 - 1);
        v22 -= 2;
        *((_OWORD *)v29 - 1) = v32;
        v29 -= 16;
        *float32x2_t v22 = 0;
        v22[1] = 0;
      }
      while (v22 != v23);
      float32x2_t v22 = (void *)*((void *)this + 3);
      uint64_t v33 = (void *)*((void *)this + 4);
      *((void *)this + 3) = v29;
      *((void *)this + 4) = v31;
      for (*((void *)this + 5) = v30; v33 != v22; v33 -= 2)
      {
        uint64_t v34 = (std::__shared_weak_count *)*(v33 - 1);
        if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
    }
    if (v22) {
      operator delete(v22);
    }
    *((void *)this + 4) = v31;
  }
  else
  {
    *float32x2_t v22 = v20;
    v22[1] = v19;
    *((void *)this + 4) = v22 + 2;
  }
  return this;
}

void sub_1C4A2B95C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v5);
  sub_1C4A2BA6C(v2);
  sub_1C4A2BA6C(v1);
  _Unwind_Resume(a1);
}

void sub_1C4A2B9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1C4A2B9F0((uint64_t)&a9);
  sub_1C4A2BA6C(v10);
  sub_1C4A2BA6C(v9);
  _Unwind_Resume(a1);
}

void sub_1C4A2B9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1C4A2B9F0((uint64_t)&a9);
  sub_1C4A2BA6C(v10);
  sub_1C4A2BA6C(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A2B9F0(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void **sub_1C4A2BA6C(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unsigned int v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = (std::__shared_weak_count *)*((void *)v3 - 1);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      unsigned int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventory::collectFastPathCharactersFromHolders(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char **a4@<X8>)
{
  uint64_t v4 = a2;
  CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventory::lookupInAllHolders(a1, a2, a3, (uint64_t)a4);
  if (a4[1] != *a4) {
    return;
  }
  uint64_t v7 = *(void **)(a1 + 24);
  uint64_t v6 = *(void **)(a1 + 32);
  if (v7 == v6) {
    return;
  }
  uint64_t v31 = *(void **)(a1 + 32);
  while (2)
  {
    if (((*(uint64_t (**)(void, uint64_t))(*(void *)*v7 + 16))(*v7, v4) & 1) == 0) {
      goto LABEL_6;
    }
    (*(void (**)(void **__return_ptr))(*(void *)*v7 + 24))(&__p);
    uint64_t v8 = (unsigned int *)__p;
    uint64_t v34 = v41;
    if (__p == v41)
    {
      if (__p) {
        goto LABEL_42;
      }
      goto LABEL_5;
    }
    while (2)
    {
      int64_t v35 = v8;
      CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventory::lookupInAllHolders(a1, *v8, a3, (uint64_t)&v38);
      uint64_t v10 = v38;
      unint64_t v9 = v39;
      if (v38 == v39)
      {
        if (v38) {
          goto LABEL_38;
        }
        goto LABEL_12;
      }
      do
      {
        (*(void (**)(id *__return_ptr))(*(void *)*v7 + 40))(&v36);
        unint64_t v14 = (unint64_t)a4[1];
        unint64_t v13 = (unint64_t)a4[2];
        if (v14 < v13)
        {
          id v11 = v36;
          id v36 = 0;
          *(void *)unint64_t v14 = v11;
          *(_OWORD *)(v14 + 8) = v37;
          uint64_t v12 = (char *)(v14 + 24);
          goto LABEL_17;
        }
        uint64_t v15 = v4;
        long long v16 = *a4;
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)*a4) >> 3);
        unint64_t v18 = v17 + 1;
        if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_1C4A23B24();
        }
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (void)v16) >> 3);
        if (2 * v19 > v18) {
          unint64_t v18 = 2 * v19;
        }
        if (v19 >= 0x555555555555555) {
          unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          if (v20 > 0xAAAAAAAAAAAAAAALL) {
            sub_1C4949AA8();
          }
          unint64_t v21 = (char *)operator new(24 * v20);
        }
        else
        {
          unint64_t v21 = 0;
        }
        float32x2_t v22 = &v21[24 * v17];
        unint64_t v23 = &v21[24 * v20];
        id v24 = v36;
        id v36 = 0;
        *(void *)float32x2_t v22 = v24;
        *(_OWORD *)(v22 + 8) = v37;
        uint64_t v12 = v22 + 24;
        if ((char *)v14 == v16)
        {
          *a4 = v22;
          a4[1] = v12;
          a4[2] = v23;
          uint64_t v4 = v15;
          if (!v14) {
            goto LABEL_17;
          }
LABEL_36:
          operator delete((void *)v14);
          goto LABEL_17;
        }
        do
        {
          uint64_t v25 = *(void *)(v14 - 24);
          v14 -= 24;
          *(void *)unint64_t v14 = 0;
          *((void *)v22 - 3) = v25;
          v22 -= 24;
          *(_OWORD *)(v22 + 8) = *(_OWORD *)(v14 + 8);
        }
        while ((char *)v14 != v16);
        unint64_t v14 = (unint64_t)*a4;
        uint64_t v26 = a4[1];
        *a4 = v22;
        a4[1] = v12;
        a4[2] = v23;
        uint64_t v4 = v15;
        while (v26 != (char *)v14)
        {
          unint64_t v27 = (void *)*((void *)v26 - 3);
          v26 -= 24;
        }
        if (v14) {
          goto LABEL_36;
        }
LABEL_17:
        a4[1] = v12;

        v10 += 24;
      }
      while (v10 != v9);
      uint64_t v10 = v38;
      if (v38)
      {
LABEL_38:
        id v28 = v39;
        uint64_t v29 = v10;
        if (v39 != v10)
        {
          do
          {
            unint64_t v30 = (void *)*((void *)v28 - 3);
            v28 -= 24;
          }
          while (v28 != v10);
          uint64_t v29 = v38;
        }
        uint64_t v39 = v10;
        operator delete(v29);
      }
LABEL_12:
      uint64_t v8 = v35 + 1;
      if (v35 + 1 != v34) {
        continue;
      }
      break;
    }
    uint64_t v8 = (unsigned int *)__p;
    if (__p)
    {
LABEL_42:
      unsigned int v41 = v8;
      operator delete(v8);
    }
LABEL_5:
    uint64_t v6 = v31;
LABEL_6:
    v7 += 2;
    if (v7 != v6) {
      continue;
    }
    break;
  }
}

void sub_1C4A2BE5C(_Unwind_Exception *a1)
{
  sub_1C4A22830(v1);
  _Unwind_Resume(a1);
}

void sub_1C4A2BE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1C4A22830(v23);
  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventory::lookupInAllHolders(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v4 = *(void **)a1;
  unint64_t v5 = *(void **)(a1 + 8);
  if (*(void **)a1 != v5)
  {
    if (a3)
    {
      do
      {
        unint64_t v9 = (void *)*v4;
        if (*(_DWORD *)(*v4 + 32) == a3)
        {
          (*(void (**)(void))(*v9 + 16))(*v4);
          uint64_t v12 = v9[2];
          id v11 = v9 + 2;
          uint64_t v10 = v12;
          if (!v12) {
            goto LABEL_18;
          }
          unint64_t v13 = v11;
          do
          {
            unsigned int v14 = *(_DWORD *)(v10 + 32);
            BOOL v15 = v14 >= a2;
            if (v14 >= a2) {
              long long v16 = (uint64_t *)v10;
            }
            else {
              long long v16 = (uint64_t *)(v10 + 8);
            }
            if (v15) {
              unint64_t v13 = (void *)v10;
            }
            uint64_t v10 = *v16;
          }
          while (*v16);
          if (v13 != v11 && *((_DWORD *)v13 + 8) <= a2)
          {
            sub_1C4A28F48(&__p, v13 + 5);
            unint64_t v18 = __p;
            uint64_t v17 = (uint64_t)v38;
          }
          else
          {
LABEL_18:
            uint64_t v17 = 0;
            unint64_t v18 = 0;
            long long __p = 0;
            size_t v38 = 0;
            uint64_t v39 = 0;
          }
          sub_1C4A2C798((char **)a4, *(void *)(a4 + 8), (uint64_t)v18, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - (uint64_t)v18) >> 3));
          unint64_t v19 = (char *)__p;
          if (__p)
          {
            unint64_t v20 = v38;
            unint64_t v21 = __p;
            if (v38 != __p)
            {
              do
              {
                float32x2_t v22 = (void *)*((void *)v20 - 3);
                v20 -= 24;
              }
              while (v20 != v19);
              unint64_t v21 = __p;
            }
            size_t v38 = v19;
            operator delete(v21);
          }
        }
        v4 += 2;
      }
      while (v4 != v5);
    }
    else
    {
      do
      {
        uint64_t v23 = *v4;
        (*(void (**)(void))(*(void *)*v4 + 16))(*v4);
        uint64_t v26 = *(void *)(v23 + 16);
        uint64_t v25 = v23 + 16;
        uint64_t v24 = v26;
        if (!v26) {
          goto LABEL_38;
        }
        uint64_t v27 = v25;
        do
        {
          unsigned int v28 = *(_DWORD *)(v24 + 32);
          BOOL v29 = v28 >= a2;
          if (v28 >= a2) {
            unint64_t v30 = (uint64_t *)v24;
          }
          else {
            unint64_t v30 = (uint64_t *)(v24 + 8);
          }
          if (v29) {
            uint64_t v27 = v24;
          }
          uint64_t v24 = *v30;
        }
        while (*v30);
        if (v27 != v25 && *(_DWORD *)(v27 + 32) <= a2)
        {
          sub_1C4A28F48(&__p, (uint64_t *)(v27 + 40));
          long long v32 = __p;
          uint64_t v31 = (uint64_t)v38;
        }
        else
        {
LABEL_38:
          uint64_t v31 = 0;
          long long v32 = 0;
          long long __p = 0;
          size_t v38 = 0;
          uint64_t v39 = 0;
        }
        sub_1C4A2C798((char **)a4, *(void *)(a4 + 8), (uint64_t)v32, v31, 0xAAAAAAAAAAAAAAABLL * ((v31 - (uint64_t)v32) >> 3));
        uint64_t v33 = (char *)__p;
        if (__p)
        {
          uint64_t v34 = v38;
          int64_t v35 = __p;
          if (v38 != __p)
          {
            do
            {
              id v36 = (void *)*((void *)v34 - 3);
              v34 -= 24;
            }
            while (v34 != v33);
            int64_t v35 = __p;
          }
          size_t v38 = v33;
          operator delete(v35);
        }
        v4 += 2;
      }
      while (v4 != v5);
    }
  }
}

void sub_1C4A2C110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4A22830((void **)va);
  sub_1C4A22830(v2);
  _Unwind_Resume(a1);
}

void sub_1C4A2C130(_Unwind_Exception *a1)
{
  sub_1C4A22830(v1);
  _Unwind_Resume(a1);
}

void sub_1C4A2C144(_Unwind_Exception *a1)
{
  sub_1C4A22830(v1);
  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventory::getSupportedCharacters(CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder ****this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v4 = *this;
  unint64_t v5 = this[1];
  if (*this != v5)
  {
    do
    {
      CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder::getSupportedCharactersInfo(*v4, (uint64_t *)v30);
      uint64_t v6 = (void **)v30[0];
      if (v30[0] != &v30[1])
      {
        do
        {
          if (v6[5]) {
            sub_1C49A1980(a2, (unsigned int *)v6 + 8, (_DWORD *)v6 + 8);
          }
          uint64_t v7 = (void **)v6[1];
          if (v7)
          {
            do
            {
              uint64_t v8 = v7;
              uint64_t v7 = (void **)*v7;
            }
            while (v7);
          }
          else
          {
            do
            {
              uint64_t v8 = (void **)v6[2];
              BOOL v9 = *v8 == v6;
              uint64_t v6 = v8;
            }
            while (!v9);
          }
          uint64_t v6 = v8;
        }
        while (v8 != &v30[1]);
      }
      sub_1C4999C7C((uint64_t)v30, (void *)v30[1]);
      v4 += 2;
    }
    while (v4 != v5);
  }
  *(_OWORD *)unint64_t v30 = 0u;
  *(_OWORD *)uint64_t v31 = 0u;
  int v32 = 1065353216;
  uint64_t v10 = this[3];
  id v11 = this[4];
  if (v10 != v11)
  {
    do
    {
      uint64_t v12 = *v10;
      unint64_t v13 = *(uint64_t **)(a2 + 16);
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      long long __p = 0;
      if (v13)
      {
        size_t v14 = 0;
        unint64_t v15 = -1;
        long long v16 = v13;
        do
        {
          long long v16 = (void *)*v16;
          ++v15;
          v14 += 4;
        }
        while (v16);
        if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
          sub_1C494A220();
        }
        uint64_t v17 = (char *)operator new(v14);
        uint64_t v18 = 0;
        long long __p = v17;
        uint64_t v27 = &v17[v14];
        do
        {
          *(_DWORD *)&v17[v18] = *((_DWORD *)v13 + 4);
          unint64_t v13 = (uint64_t *)*v13;
          v18 += 4;
        }
        while (v13);
        uint64_t v26 = &v17[v18];
      }
      (*((void (**)(_DWORD **__return_ptr, CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder **, void **))*v12
       + 4))(&v28, v12, &__p);
      if (__p)
      {
        uint64_t v26 = (char *)__p;
        operator delete(__p);
      }
      unint64_t v19 = v28;
      unint64_t v20 = v29;
      if (v28 != v29)
      {
        do
        {
          LODWORD(__p) = 0;
          LODWORD(__p) = *v19;
          sub_1C49A1980((uint64_t)v30, (unsigned int *)&__p, &__p);
          ++v19;
        }
        while (v19 != v20);
        unint64_t v19 = v28;
      }
      if (v19)
      {
        BOOL v29 = v19;
        operator delete(v19);
      }
      v10 += 2;
    }
    while (v10 != v11);
    unint64_t v21 = (unsigned int *)v31[0];
    if (v31[0])
    {
      do
      {
        sub_1C49A1980(a2, v21 + 4, v21 + 4);
        unint64_t v21 = *(unsigned int **)v21;
      }
      while (v21);
      float32x2_t v22 = v31[0];
      if (v31[0])
      {
        do
        {
          uint64_t v23 = (void *)*v22;
          operator delete(v22);
          float32x2_t v22 = v23;
        }
        while (v23);
      }
    }
  }
  uint64_t v24 = v30[0];
  v30[0] = 0;
  if (v24) {
    operator delete(v24);
  }
}

void sub_1C4A2C3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1C498D2E0((uint64_t)va);
  sub_1C498D2E0(v7);
  _Unwind_Resume(a1);
}

void sub_1C4A2C3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16)
{
  if (__p)
  {
    operator delete(__p);
    sub_1C498D2E0((uint64_t)&a15);
    sub_1C498D2E0(v16);
    _Unwind_Resume(a1);
  }
  sub_1C498D2E0((uint64_t)&a15);
  sub_1C498D2E0(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A2C474(uint64_t a1)
{
  *(void *)a1 = &unk_1F2010F30;
  sub_1C4A2C604(*(void **)(a1 + 40));
  sub_1C4999C7C(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void sub_1C4A2C4C8(uint64_t a1)
{
  *(void *)a1 = &unk_1F2010F30;
  sub_1C4A2C604(*(void **)(a1 + 40));
  sub_1C4999C7C(a1 + 8, *(void **)(a1 + 16));
  JUMPOUT(0x1C8786460);
}

uint64_t sub_1C4A2C53C(uint64_t a1)
{
  *(void *)a1 = &unk_1F2010EF0;
  sub_1C4999C7C(a1 + 32, *(void **)(a1 + 40));
  sub_1C4999C7C(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void sub_1C4A2C590(uint64_t a1)
{
  *(void *)a1 = &unk_1F2010EF0;
  sub_1C4999C7C(a1 + 32, *(void **)(a1 + 40));
  sub_1C4999C7C(a1 + 8, *(void **)(a1 + 16));
  JUMPOUT(0x1C8786460);
}

void sub_1C4A2C604(void *a1)
{
  if (a1)
  {
    sub_1C4A2C604(*a1);
    sub_1C4A2C604(a1[1]);
    uint64_t v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

void sub_1C4A2C660(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2011060;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C4A2C680(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2011060;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8786460);
}

uint64_t sub_1C4A2C6D4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1C4A2C6FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2011098;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C4A2C71C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2011098;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8786460);
}

uint64_t sub_1C4A2C770(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1C4A2C798(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  uint64_t v6 = a3;
  uint64_t v8 = *a1;
  unint64_t v9 = (unint64_t)a1[1];
  uint64_t v10 = (a2 - (uint64_t)*a1) / 24;
  uint64_t v11 = (uint64_t)&(*a1)[24 * v10];
  uint64_t v12 = a1[2];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v12[-v9] >> 3)) < a5)
  {
    unint64_t v13 = a5 - 0x5555555555555555 * ((uint64_t)(v9 - (void)v8) >> 3);
    if (v13 > 0xAAAAAAAAAAAAAAALL) {
      sub_1C4A23B24();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v8) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 > 0xAAAAAAAAAAAAAAALL) {
        sub_1C4949AA8();
      }
      uint64_t v16 = (char *)operator new(24 * v15);
    }
    else
    {
      uint64_t v16 = 0;
    }
    uint64_t v33 = &v16[24 * v10];
    uint64_t v34 = &v33[24 * a5];
    int64_t v35 = v33;
    do
    {
      *(void *)int64_t v35 = *(id *)v6;
      *(_OWORD *)(v35 + 8) = *(_OWORD *)(v6 + 8);
      v35 += 24;
      v6 += 24;
    }
    while (v35 != v34);
    id v36 = *a1;
    if (*a1 != (char *)v11)
    {
      uint64_t v37 = v11;
      do
      {
        uint64_t v38 = *(void *)(v37 - 24);
        v37 -= 24;
        *(void *)uint64_t v37 = 0;
        *((void *)v33 - 3) = v38;
        v33 -= 24;
        *(_OWORD *)(v33 + 8) = *(_OWORD *)(v37 + 8);
      }
      while ((char *)v37 != v36);
    }
    uint64_t v39 = a1[1];
    if (v39 != (char *)v11)
    {
      do
      {
        id v40 = *(id *)v11;
        *(void *)uint64_t v11 = 0;
        *(void *)uint64_t v34 = v40;
        *(_OWORD *)(v34 + 8) = *(_OWORD *)(v11 + 8);
        v34 += 24;
        v11 += 24;
      }
      while ((char *)v11 != v39);
      uint64_t v11 = (uint64_t)a1[1];
    }
    unsigned int v41 = *a1;
    *a1 = v33;
    a1[1] = v34;
    a1[2] = &v16[24 * v15];
    while ((char *)v11 != v41)
    {
      unint64_t v42 = *(void **)(v11 - 24);
      v11 -= 24;
    }
    if (v41)
    {
      operator delete(v41);
    }
    return;
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v11) >> 3)) >= a5)
  {
    uint64_t v18 = a3 + 24 * a5;
    unint64_t v19 = a1[1];
    goto LABEL_19;
  }
  uint64_t v44 = (a2 - (uint64_t)*a1) / 24;
  unint64_t v43 = *a1;
  uint64_t v18 = a3 + 8 * ((uint64_t)(v9 - v11) >> 3);
  unint64_t v19 = a1[1];
  if (v18 != a4)
  {
    uint64_t v20 = a3 + 8 * ((uint64_t)(v9 - v11) >> 3);
    unint64_t v21 = a1[1];
    do
    {
      *(void *)unint64_t v21 = *(id *)v20;
      *(_OWORD *)(v21 + 8) = *(_OWORD *)(v20 + 8);
      v19 += 24;
      v20 += 24;
      v21 += 24;
    }
    while (v20 != a4);
  }
  a1[1] = v19;
  if ((uint64_t)(v9 - v11) >= 1)
  {
    uint64_t v8 = v43;
    uint64_t v10 = v44;
LABEL_19:
    uint64_t v22 = v11 + 24 * a5;
    uint64_t v23 = &v19[-24 * a5];
    uint64_t v24 = v19;
    if ((unint64_t)v23 < v9)
    {
      uint64_t v24 = v19;
      do
      {
        uint64_t v25 = *(void *)v23;
        *(void *)uint64_t v23 = 0;
        *(void *)uint64_t v24 = v25;
        *(_OWORD *)(v24 + 8) = *(_OWORD *)(v23 + 8);
        v24 += 24;
        v23 += 24;
      }
      while ((unint64_t)v23 < v9);
    }
    a1[1] = v24;
    if (v19 != (char *)v22)
    {
      uint64_t v26 = 0;
      unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v19[-v22] >> 3);
      unsigned int v28 = &v8[24 * v10 + 24 * v27];
      uint64_t v29 = -24 * v27;
      do
      {
        unint64_t v30 = &v19[v26];
        uint64_t v31 = *(void *)&v28[v26 - 24];
        *(void *)&v28[v26 - 24] = 0;
        int v32 = *(void **)&v19[v26 - 24];
        *(void *)&v19[v26 - 24] = v31;

        *((void *)v30 - 2) = *(void *)&v28[v26 - 16];
        *((_DWORD *)v30 - 2) = *(_DWORD *)&v28[v26 - 8];
        *((_DWORD *)v30 - 1) = *(_DWORD *)&v28[v26 - 4];
        v26 -= 24;
      }
      while (v29 != v26);
    }
    for (; v6 != v18; v11 += 24)
    {
      objc_storeStrong((id *)v11, *(id *)v6);
      *(void *)(v11 + 8) = *(void *)(v6 + 8);
      *(void *)(v11 + 16) = *(void *)(v6 + 16);
      v6 += 24;
    }
  }
}

void sub_1C4A2CB8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A2CBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CHSessionStateTracker;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C4A2CC14(void *a1)
{
  if (a1)
  {
    obuint64_t j = a1;
    objc_sync_enter(obj);
    objc_msgSend_setIdle(obj, v1, v2, v3, v4, v5);
    objc_msgSend_invalidate(obj[1], v6, v7, v8, v9, v10);
    uint64_t v11 = obj[1];
    obj[1] = 0;

    objc_sync_exit(obj);
  }
}

void sub_1C4A2CC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  _Unwind_Resume(a1);
}

void sub_1C4A2CCBC(void *a1, uint64_t a2)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v3 = a1;
    objc_sync_enter(v3);
    if (v3[2] == a2)
    {
LABEL_13:
      objc_sync_exit(v3);

      return;
    }
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v4 = (id)qword_1EA3C9FF8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = v3[2];
      *(_DWORD *)CGAffineTransform buf = 134218240;
      *(void *)&uint8_t buf[4] = v5;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = a2;
      _os_log_impl(&dword_1C492D000, v4, OS_LOG_TYPE_DEBUG, "CHSessionStateTracker updating state %li -> %li", buf, 0x16u);
    }

    v3[2] = a2;
    uint64_t v6 = v3;
    objc_sync_enter(v6);
    if (v6[1])
    {
LABEL_12:
      objc_sync_exit(v6);

      *(void *)CGAffineTransform buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x3032000000;
      uint64_t v66 = sub_1C4A2D340;
      uint64_t v67 = sub_1C4A2D350;
      id v68 = 0;
      uint64_t v46 = v6[1];
      v61[0] = MEMORY[0x1E4F143A8];
      v61[1] = 3221225472;
      v61[2] = sub_1C4A2D358;
      v61[3] = &unk_1E64E10C8;
      v61[4] = buf;
      long long v51 = objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(v46, v47, (uint64_t)v61, v48, v49, v50);
      int v56 = objc_msgSend_numberWithInteger_(NSNumber, v52, a2, v53, v54, v55);
      objc_msgSend_handleSessionStateUpdate_(v51, v57, (uint64_t)v56, v58, v59, v60);

      _Block_object_dispose(buf, 8);
      goto LABEL_13;
    }
    if (qword_1EA3CA000 == -1)
    {
      uint64_t v7 = (id)qword_1EA3C9FF8;
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
LABEL_11:

        id v8 = objc_alloc(MEMORY[0x1E4F29268]);
        uint64_t v12 = objc_msgSend_initWithMachServiceName_options_(v8, v9, @"com.apple.handwritingd.remoterecognition", 0, v10, v11);
        unint64_t v13 = v6[1];
        v6[1] = (void *)v12;

        uint64_t v18 = objc_msgSend_interfaceWithProtocol_(MEMORY[0x1E4F29280], v14, (uint64_t)&unk_1F2063C40, v15, v16, v17);
        unint64_t v19 = (void *)MEMORY[0x1E4F1CAD0];
        uint64_t v20 = objc_opt_class();
        uint64_t v25 = objc_msgSend_setWithObjects_(v19, v21, v20, v22, v23, v24, 0);
        objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(v18, v26, (uint64_t)v25, (uint64_t)sel_handleSessionStateUpdate_, 0, 0);
        objc_msgSend_setRemoteObjectInterface_(v6[1], v27, (uint64_t)v18, v28, v29, v30);
        objc_initWeak(&location, v6);
        uint64_t v31 = v6[1];
        *(void *)CGAffineTransform buf = MEMORY[0x1E4F143A8];
        *(void *)&uint8_t buf[8] = 3221225472;
        *(void *)&uint8_t buf[16] = sub_1C4A2D1DC;
        uint64_t v66 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E64E1E78;
        objc_copyWeak((id *)&v67, &location);
        objc_msgSend_setInterruptionHandler_(v31, v32, (uint64_t)buf, v33, v34, v35);
        id v36 = v6[1];
        v62[0] = MEMORY[0x1E4F143A8];
        v62[1] = 3221225472;
        v62[2] = sub_1C4A2D294;
        v62[3] = &unk_1E64E1E78;
        objc_copyWeak(&v63, &location);
        objc_msgSend_setInvalidationHandler_(v36, v37, (uint64_t)v62, v38, v39, v40);
        objc_msgSend_resume(v6[1], v41, v42, v43, v44, v45);
        objc_destroyWeak(&v63);
        objc_destroyWeak((id *)&v67);
        objc_destroyWeak(&location);

        goto LABEL_12;
      }
    }
    else
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      uint64_t v7 = (id)qword_1EA3C9FF8;
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_11;
      }
    }
    *(_WORD *)CGAffineTransform buf = 0;
    _os_log_impl(&dword_1C492D000, v7, OS_LOG_TYPE_DEBUG, "CHSessionStateTracker setting up connection", buf, 2u);
    goto LABEL_11;
  }
}

void sub_1C4A2D0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  objc_destroyWeak(v30);
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);

  objc_sync_exit(v26);
  objc_sync_exit(v26);

  _Unwind_Resume(a1);
}

void sub_1C4A2D1DC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  sub_1C4A2CC14(WeakRetained);

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v2 = (id)qword_1EA3C9FF8;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1C492D000, v2, OS_LOG_TYPE_DEBUG, "Interrupted tracker connection.", v3, 2u);
  }
}

void sub_1C4A2D284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A2D294(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    *((void *)WeakRetained + 2) = 0;
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v3 = (id)qword_1EA3C9FF8;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1C492D000, v3, OS_LOG_TYPE_DEBUG, "Invalidated tracker connection.", v4, 2u);
    }
  }
}

uint64_t sub_1C4A2D340(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4A2D350(uint64_t a1)
{
}

void sub_1C4A2D358(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v4 = (id)qword_1EA3C9FF8;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = objc_msgSend_description(v3, v5, v6, v7, v8, v9);
    int v13 = 138412290;
    unint64_t v14 = v10;
    _os_log_impl(&dword_1C492D000, v4, OS_LOG_TYPE_ERROR, "An XPC proxy service error occurred: %@", (uint8_t *)&v13, 0xCu);
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v3;
}

void sub_1C4A2D460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderLZFSE::CHFastPathCharacterHolderLZFSE(uint64_t a1, int a2, int a3)
{
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
  *(void *)a1 = &unk_1F2010E00;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 40) = @"unknown_default.lzfse";
  *(void *)(a1 + 48) = 0;
  uint64_t v4 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v5 = dispatch_queue_create("com.apple.CoreHandwriting.CHFPCharacterHolderLZFSEQueue", v4);
  uint64_t v6 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v5;

  return a1;
}

{
  NSObject *v4;
  dispatch_queue_t v5;
  void *v6;

  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
  *(void *)a1 = &unk_1F2010E00;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 40) = @"unknown_default.lzfse";
  *(void *)(a1 + 48) = 0;
  uint64_t v4 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v5 = dispatch_queue_create("com.apple.CoreHandwriting.CHFPCharacterHolderLZFSEQueue", v4);
  uint64_t v6 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v5;

  return a1;
}

uint64_t CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderLZFSE::reloadAllCharactersIfNeeded(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderLZFSE *this)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  uint64_t v1 = *((void *)this + 6);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1C4A2D77C;
  v4[3] = &unk_1E64E2750;
  v4[4] = &v5;
  v4[5] = this;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1C4A2D77C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(v2 + 24))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    return;
  }
  int v3 = *(_DWORD *)(v2 + 36);
  uint64_t v4 = (CoreHandwriting::synthesis::fast_path *)*(id *)(v2 + 40);
  CoreHandwriting::synthesis::fast_path::uncompressInventoryFromLZFSE(v4, v5);
  uint64_t v6 = (CoreHandwriting::synthesis *)objc_claimAutoreleasedReturnValue();
  uint64_t v7 = v6;
  if (!v6)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    id v36 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CGAffineTransform buf = 0;
      _os_log_impl(&dword_1C492D000, v36, OS_LOG_TYPE_ERROR, "CHFastPathCharacterHolderLZFSE Failed to load inventory", buf, 2u);
    }

    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v43 = &v44;
    goto LABEL_42;
  }
  *(void *)CGAffineTransform buf = 0;
  long long v51 = buf;
  uint64_t v52 = 0x4812000000;
  uint64_t v53 = sub_1C4A2F5B8;
  uint64_t v54 = sub_1C4A2F5F4;
  uint64_t v55 = &unk_1C4CB5C62;
  v57[0] = 0;
  v57[1] = 0;
  int v56 = v57;
  unsigned int v41 = v6;
  uint64_t v42 = v4;
  char v8 = CoreHandwriting::synthesis::CHDiffusionSynthesisStringWithAllSupportedCharactersByModel(v6);
  int v13 = objc_msgSend_stringByAppendingString_(v8, v9, @"×÷·", v10, v11, v12);

  uint64_t v40 = v13;
  uint64_t v19 = objc_msgSend_length(v13, v14, v15, v16, v17, v18);
  v46[0] = MEMORY[0x1E4F143A8];
  v46[1] = 3221225472;
  v46[2] = sub_1C4A2F604;
  v46[3] = &unk_1E64E2980;
  int v49 = v3;
  uint64_t v47 = v7;
  uint64_t v48 = buf;
  objc_msgSend_enumerateCodepointsInRange_usingBlock_(v13, v20, 0, v19, (uint64_t)v46, v21);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v43 = &v44;
  uint64_t v22 = (uint8_t *)*((void *)v51 + 6);
  uint64_t v23 = v51 + 56;
  if (v22 != v51 + 56)
  {
    while (1)
    {
      uint64_t v24 = (uint64_t ***)&v44;
      if (v43 != &v44)
      {
        uint64_t v25 = v44;
        uint64_t v26 = &v44;
        if (v44)
        {
          do
          {
            uint64_t v24 = (uint64_t ***)v25;
            uint64_t v25 = (uint64_t *)v25[1];
          }
          while (v25);
        }
        else
        {
          do
          {
            uint64_t v24 = (uint64_t ***)v26[2];
            BOOL v27 = *v24 == v26;
            uint64_t v26 = (uint64_t **)v24;
          }
          while (v27);
        }
        unsigned int v28 = *((_DWORD *)v22 + 8);
        if (*((_DWORD *)v24 + 8) >= v28) {
          break;
        }
      }
      if (v44) {
        uint64_t v29 = (uint64_t **)v24;
      }
      else {
        uint64_t v29 = &v44;
      }
      if (v44)
      {
        uint64_t v30 = (uint64_t **)(v24 + 1);
      }
      else
      {
        uint64_t v24 = &v43;
        uint64_t v30 = &v44;
      }
      if (!v24[1]) {
        goto LABEL_28;
      }
LABEL_31:
      uint64_t v34 = (uint8_t *)*((void *)v22 + 1);
      if (v34)
      {
        do
        {
          uint64_t v35 = v34;
          uint64_t v34 = *(uint8_t **)v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          uint64_t v35 = (uint8_t *)*((void *)v22 + 2);
          BOOL v27 = *(void *)v35 == (void)v22;
          uint64_t v22 = v35;
        }
        while (!v27);
      }
      uint64_t v22 = v35;
      if (v35 == v23) {
        goto LABEL_5;
      }
    }
    uint64_t v30 = &v44;
    uint64_t v29 = &v44;
    if (v44)
    {
      uint64_t v31 = v44;
      while (1)
      {
        while (1)
        {
          uint64_t v29 = (uint64_t **)v31;
          unsigned int v32 = *((_DWORD *)v31 + 8);
          if (v32 <= v28) {
            break;
          }
          uint64_t v31 = *v29;
          uint64_t v30 = v29;
          if (!*v29) {
            goto LABEL_28;
          }
        }
        if (v32 >= v28) {
          goto LABEL_31;
        }
        uint64_t v31 = v29[1];
        if (!v31)
        {
          uint64_t v30 = v29 + 1;
          break;
        }
      }
    }
LABEL_28:
    uint64_t v33 = operator new(0x40uLL);
    v33[8] = *((_DWORD *)v22 + 8);
    sub_1C4A28F48((void *)v33 + 5, (uint64_t *)v22 + 5);
    *(void *)uint64_t v33 = 0;
    *((void *)v33 + 1) = 0;
    *((void *)v33 + 2) = v29;
    id *v30 = (uint64_t *)v33;
    if (*v43)
    {
      uint64_t v43 = (uint64_t **)*v43;
      uint64_t v33 = *v30;
    }
    sub_1C4949FD4(v44, (uint64_t *)v33);
    ++v45;
    goto LABEL_31;
  }
LABEL_5:

  _Block_object_dispose(buf, 8);
  sub_1C4A23B3C((uint64_t)&v56, v57[0]);
  uint64_t v7 = v41;
  uint64_t v4 = v42;
LABEL_42:

  uint64_t v37 = v2 + 16;
  sub_1C4A23B3C(v2 + 8, *(void **)(v2 + 16));
  *(void *)(v2 + 8) = v43;
  uint64_t v38 = v44;
  *(void *)(v2 + 16) = v44;
  uint64_t v39 = v45;
  *(void *)(v2 + 24) = v45;
  if (v39)
  {
    void v38[2] = v37;
    uint64_t v43 = &v44;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v38 = 0;
  }
  else
  {
    *(void *)(v2 + 8) = v37;
  }
  sub_1C4A23B3C((uint64_t)&v43, v38);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(v2 + 24) != 0;
}

void sub_1C4A2DB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  _Block_object_dispose(&a23, 8);
  sub_1C4A23B3C(a10, a30);

  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderLZFSE::doAddCharacter(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderLZFSE *this, const CoreHandwriting::synthesis::fast_path::CHFastPathCharacter *a2)
{
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v2 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v3 = 0;
    _os_log_impl(&dword_1C492D000, v2, OS_LOG_TYPE_ERROR, "CHFastPathCharacterHolderLZFSE addCharacter not supported!", v3, 2u);
  }
}

void CoreHandwriting::synthesis::fast_path::createCHFastPathCharacterFromSegmentedData(CoreHandwriting::synthesis::fast_path *this@<X0>, NSDictionary *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v354 = *MEMORY[0x1E4F143B8];
  uint64_t v321 = this;
  uint64_t v330 = objc_alloc_init(CHDrawing);
  v320 = objc_msgSend_objectForKeyedSubscript_(v321, v4, @"segmentationStrokes", v5, v6, v7);
  id v326 = objc_msgSend_objectForKeyedSubscript_(v321, v8, @"data", v9, v10, v11);
  objc_msgSend_objectForKeyedSubscript_(v321, v12, @"unicodeCodePoints", v13, v14, v15);
  id v16 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v21 = objc_msgSend_stringWithFormat_(NSString, v17, @"0x%04x", v18, v19, v20, a2);
  uint64_t v26 = objc_msgSend_indexOfObject_(v16, v22, (uint64_t)v21, v23, v24, v25);

  if (v26 == 0x7FFFFFFFFFFFFFFFLL)
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 24) = 0;
    goto LABEL_153;
  }
  id v316 = v16;
  uint64_t v317 = v26;
  v327 = v321;
  objc_msgSend_objectForKey_(v327, v27, @"annotatedPrincipalLines", v28, v29, v30);
  long long v341 = 0;
  uint64_t v342 = 0;
  uint64_t v323 = v340 = &v341;
  if (v323)
  {
    uint64_t v31 = operator new(0x40uLL);
    uint64_t v36 = 0;
    *uint64_t v31 = @"toplinePoints";
    v31[2] = @"descenderlinePoints";
    *((_DWORD *)v31 + 2) = 0;
    v31[4] = @"baselinePoints";
    *((_DWORD *)v31 + 10) = 2;
    v31[6] = @"midlinePoints";
    *((_DWORD *)v31 + 14) = 3;
    long long __p = (id *)v31;
    *((_DWORD *)v31 + 6) = 1;
    do
    {
      uint64_t v37 = (uint64_t *)&__p[2 * v36];
      long long v334 = (int *)(v37 + 1);
      uint64_t v38 = objc_msgSend_objectForKey_(v323, v32, *v37, v33, v34, v35);
      memset(v353, 0, sizeof(v353));
      obuint64_t j = v38;
      uint64_t v45 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v39, (uint64_t)v353, (uint64_t)v348, 16, v40);
      if (v45)
      {
        uint64_t v332 = **(void **)&v353[1];
        do
        {
          uint64_t v46 = 0;
          do
          {
            if (**(void **)&v353[1] != v332) {
              objc_enumerationMutation(obj);
            }
            uint64_t v47 = *(void **)(*((void *)&v353[0] + 1) + 8 * v46);
            uint64_t v48 = objc_msgSend_objectAtIndexedSubscript_(v47, v41, 0, v42, v43, v44);
            int v54 = objc_msgSend_intValue(v48, v49, v50, v51, v52, v53);
            uint64_t v59 = objc_msgSend_objectAtIndexedSubscript_(v47, v55, 1, v56, v57, v58);
            int v65 = objc_msgSend_intValue(v59, v60, v61, v62, v63, v64);
            int v66 = v65;
            int v67 = *v334;
            id v68 = v341;
            uint64_t v69 = &v341;
LABEL_12:
            int v70 = v69;
            if (v68)
            {
              do
              {
                uint64_t v69 = (void **)v68;
                int v71 = *((_DWORD *)v68 + 7);
                if (v54 < v71)
                {
LABEL_11:
                  id v68 = *v69;
                  goto LABEL_12;
                }
                if (v54 == v71)
                {
                  int v72 = *((_DWORD *)v69 + 8);
                  if (v65 < v72) {
                    goto LABEL_11;
                  }
                  if (v65 == v72)
                  {
                    int v73 = *((_DWORD *)v69 + 9);
                    if (v67 < v73) {
                      goto LABEL_11;
                    }
                    if (v73 >= v67) {
                      goto LABEL_50;
                    }
                  }
                  else if (v72 >= v65)
                  {
                    goto LABEL_50;
                  }
                }
                else if (v71 >= v54)
                {
                  goto LABEL_50;
                }
                id v68 = v69[1];
              }
              while (v68);
              int v70 = v69 + 1;
            }
            unsigned int v74 = operator new(0x28uLL);
            *((_DWORD *)v74 + 7) = v54;
            *((_DWORD *)v74 + 8) = v66;
            *((_DWORD *)v74 + 9) = v67;
            void *v74 = 0;
            v74[1] = 0;
            v74[2] = v69;
            *int v70 = v74;
            if (*v340)
            {
              long long v340 = (void *)*v340;
              unsigned int v74 = (void *)*v70;
            }
            uint64_t v75 = v341;
            BOOL v76 = v74 == v341;
            *((unsigned char *)v74 + 24) = v74 == v341;
            if (!v76)
            {
              do
              {
                uint64_t v77 = v74[2];
                if (*(unsigned char *)(v77 + 24)) {
                  break;
                }
                unint64_t v78 = *(void **)(v77 + 16);
                uint64_t v79 = *v78;
                if (*v78 == v77)
                {
                  uint64_t v82 = v78[1];
                  if (!v82 || (v83 = *(unsigned __int8 *)(v82 + 24), uint64_t v80 = (unsigned char *)(v82 + 24), v83))
                  {
                    if (*(void **)v77 == v74)
                    {
                      *(unsigned char *)(v77 + 24) = 1;
                      *((unsigned char *)v78 + 24) = 0;
                      uint64_t v86 = *(void *)(v77 + 8);
                      *unint64_t v78 = v86;
                      if (v86) {
                        goto LABEL_42;
                      }
                    }
                    else
                    {
                      uint64_t v84 = *(uint64_t **)(v77 + 8);
                      uint64_t v85 = *v84;
                      *(void *)(v77 + 8) = *v84;
                      if (v85)
                      {
                        *(void *)(v85 + 16) = v77;
                        unint64_t v78 = *(void **)(v77 + 16);
                      }
                      v84[2] = (uint64_t)v78;
                      *(void *)(*(void *)(v77 + 16) + 8 * (**(void **)(v77 + 16) != v77)) = v84;
                      *uint64_t v84 = v77;
                      *(void *)(v77 + 16) = v84;
                      unint64_t v78 = (void *)v84[2];
                      uint64_t v77 = *v78;
                      *((unsigned char *)v84 + 24) = 1;
                      *((unsigned char *)v78 + 24) = 0;
                      uint64_t v86 = *(void *)(v77 + 8);
                      *unint64_t v78 = v86;
                      if (v86) {
LABEL_42:
                      }
                        *(void *)(v86 + 16) = v78;
                    }
                    *(void *)(v77 + 16) = v78[2];
                    *(void *)(v78[2] + 8 * (*(void *)v78[2] != (void)v78)) = v77;
                    *(void *)(v77 + 8) = v78;
LABEL_48:
                    v78[2] = v77;
                    break;
                  }
                }
                else if (!v79 || (v81 = *(unsigned __int8 *)(v79 + 24), uint64_t v80 = (unsigned char *)(v79 + 24), v81))
                {
                  if (*(void **)v77 == v74)
                  {
                    uint64_t v88 = v74[1];
                    *(void *)uint64_t v77 = v88;
                    if (v88)
                    {
                      *(void *)(v88 + 16) = v77;
                      unint64_t v78 = *(void **)(v77 + 16);
                    }
                    v74[2] = v78;
                    *(void *)(*(void *)(v77 + 16) + 8 * (**(void **)(v77 + 16) != v77)) = v74;
                    v74[1] = v77;
                    *(void *)(v77 + 16) = v74;
                    unint64_t v78 = (void *)v74[2];
                    *((unsigned char *)v74 + 24) = 1;
                    *((unsigned char *)v78 + 24) = 0;
                    uint64_t v77 = v78[1];
                    long long v87 = *(void **)v77;
                    v78[1] = *(void *)v77;
                    if (v87) {
LABEL_46:
                    }
                      v87[2] = v78;
                  }
                  else
                  {
                    *(unsigned char *)(v77 + 24) = 1;
                    *((unsigned char *)v78 + 24) = 0;
                    uint64_t v77 = v78[1];
                    long long v87 = *(void **)v77;
                    v78[1] = *(void *)v77;
                    if (v87) {
                      goto LABEL_46;
                    }
                  }
                  *(void *)(v77 + 16) = v78[2];
                  *(void *)(v78[2] + 8 * (*(void *)v78[2] != (void)v78)) = v77;
                  *(void *)uint64_t v77 = v78;
                  goto LABEL_48;
                }
                *(unsigned char *)(v77 + 24) = 1;
                unsigned int v74 = v78;
                *((unsigned char *)v78 + 24) = v78 == v75;
                *uint64_t v80 = 1;
              }
              while (v78 != v75);
            }
            ++v342;
LABEL_50:

            ++v46;
          }
          while (v46 != v45);
          uint64_t v89 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v41, (uint64_t)v353, (uint64_t)v348, 16, v44);
          uint64_t v45 = v89;
        }
        while (v89);
      }

      ++v36;
    }
    while (v36 != 4);

    operator delete(__p);
  }

  long long v336 = 0u;
  long long v337 = 0u;
  long long v338 = 0u;
  long long v339 = 0u;
  __pa = objc_msgSend_objectAtIndex_(v320, v90, v317, v91, v92, v93);
  uint64_t v96 = objc_msgSend_countByEnumeratingWithState_objects_count_(__pa, v94, (uint64_t)&v336, (uint64_t)v347, 16, v95);
  if (!v96)
  {
    int v333 = 0;
    int v102 = 0;
    int v335 = 0;
    int v103 = 0;
    float v104 = -1.0;
    float v105 = 0.0;
    float v106 = 3.4028e38;
    float v107 = 0.0;
    float v108 = 0.0;
    float v109 = 0.0;
    goto LABEL_132;
  }
  int v333 = 0;
  int v102 = 0;
  int v335 = 0;
  int v103 = 0;
  id obja = *(id *)v337;
  float v104 = -1.0;
  float v105 = 0.0;
  float v106 = 3.4028e38;
  float v107 = 0.0;
  float v108 = 0.0;
  float v109 = 0.0;
  do
  {
    uint64_t v331 = v96;
    for (uint64_t i = 0; i != v331; ++i)
    {
      if (*(id *)v337 != obja) {
        objc_enumerationMutation(__pa);
      }
      uint64_t v111 = *(void **)(*((void *)&v336 + 1) + 8 * i);
      uint64_t v112 = objc_msgSend_integerValue(v111, v97, v98, v99, v100, v101);
      uint64_t v117 = objc_msgSend_objectForKeyedSubscript_(v327, v113, @"annotatedCutPoints", v114, v115, v116);
      unsigned int v122 = objc_msgSend_objectAtIndex_(v117, v118, v112, v119, v120, v121);

      uint64_t v127 = objc_msgSend_objectAtIndexedSubscript_(v122, v123, 1, v124, v125, v126);
      int v133 = objc_msgSend_intValue(v127, v128, v129, v130, v131, v132);

      if ((int)objc_msgSend_intValue(v111, v134, v135, v136, v137, v138) < 1)
      {
        int v181 = 0;
      }
      else
      {
        uint64_t v143 = objc_msgSend_objectForKeyedSubscript_(v327, v139, @"annotatedCutPoints", v140, v141, v142);
        uint64_t v148 = objc_msgSend_objectAtIndex_(v143, v144, v112 - 1, v145, v146, v147);

        double v153 = objc_msgSend_objectAtIndexedSubscript_(v148, v149, 0, v150, v151, v152);
        int v159 = objc_msgSend_intValue(v153, v154, v155, v156, v157, v158);
        uint64_t v164 = objc_msgSend_objectAtIndexedSubscript_(v122, v160, 0, v161, v162, v163);
        BOOL v170 = v159 == objc_msgSend_intValue(v164, v165, v166, v167, v168, v169);

        if (v170)
        {
          uint64_t v175 = objc_msgSend_objectAtIndexedSubscript_(v148, v171, 1, v172, v173, v174);
          int v181 = objc_msgSend_intValue(v175, v176, v177, v178, v179, v180);
        }
        else
        {
          int v181 = 0;
        }
      }
      unsigned int v182 = objc_msgSend_objectAtIndexedSubscript_(v122, v139, 0, v140, v141, v142);
      int v188 = objc_msgSend_intValue(v182, v183, v184, v185, v186, v187);

      uint64x2_t v198 = objc_msgSend_objectAtIndex_(v326, v189, v188, v190, v191, v192);
      if (v181 > v133) {
        goto LABEL_128;
      }
      uint64_t v199 = v133;
      uint64_t v200 = v181;
      while (2)
      {
        uint64_t v201 = objc_msgSend_objectAtIndex_(v198, v193, v200, v195, v196, v197);
        float64x2_t v206 = objc_msgSend_objectAtIndexedSubscript_(v201, v202, 0, v203, v204, v205);
        objc_msgSend_floatValue(v206, v207, v208, v209, v210, v211);
        float v213 = v212;

        uint64_t v218 = objc_msgSend_objectAtIndexedSubscript_(v201, v214, 1, v215, v216, v217);
        objc_msgSend_floatValue(v218, v219, v220, v221, v222, v223);
        float v225 = v224;

        objc_msgSend_addPoint_(v330, v226, v227, v228, v229, v230, v213, v225);
        id v231 = v341;
        if (!v341) {
          goto LABEL_126;
        }
        uint64_t v232 = v341;
        while (1)
        {
          int v233 = *((_DWORD *)v232 + 7);
          if (v233 > v188) {
            goto LABEL_78;
          }
          if (v233 != v188)
          {
            if (v233 >= v188) {
              break;
            }
            goto LABEL_77;
          }
          int v234 = *((_DWORD *)v232 + 8);
          if (v234 > (int)v200) {
            goto LABEL_78;
          }
          if (v234 == v200)
          {
            int v235 = *((_DWORD *)v232 + 9);
            if (v235 > 0) {
              goto LABEL_78;
            }
            if ((v235 & 0x80000000) == 0) {
              break;
            }
            goto LABEL_77;
          }
          if (v234 >= (int)v200) {
            break;
          }
LABEL_77:
          ++v232;
LABEL_78:
          uint64_t v232 = (void *)*v232;
          if (!v232) {
            goto LABEL_88;
          }
        }
        int v103 = 1;
        float v109 = v225;
LABEL_88:
        uint64_t v236 = v341;
        while (2)
        {
          int v237 = *((_DWORD *)v236 + 7);
          if (v237 > v188) {
            goto LABEL_91;
          }
          if (v237 != v188)
          {
            if (v237 >= v188) {
              goto LABEL_100;
            }
            goto LABEL_90;
          }
          int v238 = *((_DWORD *)v236 + 8);
          if (v238 > (int)v200)
          {
LABEL_91:
            uint64_t v236 = (void *)*v236;
            if (!v236) {
              goto LABEL_101;
            }
            continue;
          }
          break;
        }
        if (v238 == v200)
        {
          int v239 = *((_DWORD *)v236 + 9);
          if (v239 <= 1)
          {
            if (v239 == 1) {
              goto LABEL_100;
            }
LABEL_90:
            ++v236;
          }
          goto LABEL_91;
        }
        if (v238 < (int)v200) {
          goto LABEL_90;
        }
LABEL_100:
        int v333 = 1;
        float v105 = v225;
LABEL_101:
        uint64_t v240 = v341;
        while (2)
        {
          int v241 = *((_DWORD *)v240 + 7);
          if (v241 > v188) {
            goto LABEL_104;
          }
          if (v241 != v188)
          {
            if (v241 >= v188) {
              goto LABEL_113;
            }
            goto LABEL_103;
          }
          int v242 = *((_DWORD *)v240 + 8);
          if (v242 > (int)v200)
          {
LABEL_104:
            uint64_t v240 = (void *)*v240;
            if (!v240) {
              goto LABEL_117;
            }
            continue;
          }
          break;
        }
        if (v242 == v200)
        {
          int v243 = *((_DWORD *)v240 + 9);
          if (v243 <= 2)
          {
            if (v243 == 2) {
              goto LABEL_113;
            }
LABEL_103:
            ++v240;
          }
          goto LABEL_104;
        }
        if (v242 < (int)v200) {
          goto LABEL_103;
        }
LABEL_113:
        int v102 = 1;
        float v108 = v225;
LABEL_117:
        while (2)
        {
          int v244 = *((_DWORD *)v231 + 7);
          if (v244 > v188) {
            goto LABEL_116;
          }
          if (v244 != v188)
          {
            if (v244 >= v188) {
              goto LABEL_125;
            }
            goto LABEL_115;
          }
          int v245 = *((_DWORD *)v231 + 8);
          if (v245 > (int)v200)
          {
LABEL_116:
            id v231 = (void *)*v231;
            if (!v231) {
              goto LABEL_126;
            }
            continue;
          }
          break;
        }
        if (v245 == v200)
        {
          int v246 = *((_DWORD *)v231 + 9);
          if (v246 <= 3)
          {
            if (v246 == 3) {
              goto LABEL_125;
            }
LABEL_115:
            ++v231;
          }
          goto LABEL_116;
        }
        if (v245 < (int)v200) {
          goto LABEL_115;
        }
LABEL_125:
        int v335 = 1;
        float v107 = v225;
LABEL_126:

        float v104 = fmaxf(v104, v225);
        float v106 = fminf(v106, v225);
        BOOL v76 = v200++ == v199;
        if (!v76) {
          continue;
        }
        break;
      }
LABEL_128:
      objc_msgSend_endStroke(v330, v193, v194, v195, v196, v197);
    }
    uint64_t v96 = objc_msgSend_countByEnumeratingWithState_objects_count_(__pa, v97, (uint64_t)&v336, (uint64_t)v347, 16, v101);
  }
  while (v96);
LABEL_132:

  *(_OWORD *)CGAffineTransform v351 = 0u;
  long long v352 = 0u;
  *(_OWORD *)long long v350 = 0u;
  *(_OWORD *)long long v348 = 0u;
  memset(v349, 0, sizeof(v349));
  if (objc_msgSend_characterAtIndex_(@".", v247, 0, v248, v249, v250) == a2)
  {
    std::random_device v255 = (double *)operator new(0x20uLL);
    double v256 = (float)(v106 + -8.0);
    CGRect v257 = v255 + 4;
    double *v255 = 0.0;
    v255[1] = v256;
    v255[2] = 1.0;
    v255[3] = v256;
    if (v350[0])
    {
      v350[1] = v350[0];
      operator delete(v350[0]);
    }
    goto LABEL_135;
  }
  if (objc_msgSend_characterAtIndex_(@",", v251, 0, v252, v253, v254) == a2)
  {
    uint64_t v264 = (double *)operator new(0x20uLL);
    double v265 = (float)(v106 + -8.0);
    *uint64_t v264 = 0.0;
    v264[1] = v265;
    v264[2] = 1.0;
    v264[3] = v265;
    if (v350[0])
    {
      v350[1] = v350[0];
      operator delete(v350[0]);
    }
    v350[0] = v264;
    v350[1] = v264 + 4;
    v351[0] = v264 + 4;
    CGRect v258 = (double *)operator new(0x20uLL);
    float v266 = -5.0;
    goto LABEL_140;
  }
  if (objc_msgSend_characterAtIndex_(@"I", v260, 0, v261, v262, v263) != a2)
  {
    if (objc_msgSend_characterAtIndex_(@"-", v283, 0, v284, v285, v286) == a2)
    {
      uint64_t v292 = (double *)operator new(0x20uLL);
      double v293 = (float)(v106 + -1.0);
      double *v292 = 0.0;
      v292[1] = v293;
      v292[2] = 1.0;
      v292[3] = v293;
      if (v350[0])
      {
        v350[1] = v350[0];
        operator delete(v350[0]);
      }
      v350[0] = v292;
      v350[1] = v292 + 4;
      v351[0] = v292 + 4;
      CGRect v258 = (double *)operator new(0x20uLL);
      float v266 = 10.0;
LABEL_140:
      double v259 = (float)(v104 + v266);
      goto LABEL_141;
    }
    if (objc_msgSend_characterAtIndex_(@"+", v288, 0, v289, v290, v291) == a2
      || objc_msgSend_characterAtIndex_(@"*", v294, 0, v295, v296, v297) == a2
      || objc_msgSend_characterAtIndex_(@"=", v298, 0, v299, v300, v301) == a2)
    {
      id v306 = (double *)operator new(0x20uLL);
      double v307 = (float)(v106 + -1.0);
      *id v306 = 0.0;
      v306[1] = v307;
      v306[2] = 1.0;
      v306[3] = v307;
      if (v350[0])
      {
        v350[1] = v350[0];
        operator delete(v350[0]);
      }
      v350[0] = v306;
      v350[1] = v306 + 4;
      v351[0] = v306 + 4;
      CGRect v258 = (double *)operator new(0x20uLL);
      float v266 = 6.0;
      goto LABEL_140;
    }
    if (objc_msgSend_characterAtIndex_(@"'", v302, 0, v303, v304, v305) == a2)
    {
      *(void *)&v353[0] = 0;
      *((double *)v353 + 1) = v104;
      *(void *)&v353[1] = 0x3FF0000000000000;
      *((double *)&v353[1] + 1) = v104;
      sub_1C4A2F81C(&v345, v353, 2uLL);
      if (v350[0])
      {
        v350[1] = v350[0];
        operator delete(v350[0]);
      }
      *(_OWORD *)long long v350 = v345;
      v351[0] = v346;
      *(void *)&v353[0] = 0;
      *((double *)v353 + 1) = (float)-(float)(v106 - (float)(v104 * 2.0));
      *(void *)&v353[1] = 0x3FF0000000000000;
      *((double *)&v353[1] + 1) = *((double *)v353 + 1);
      sub_1C4A2F81C(&v345, v353, 2uLL);
LABEL_177:
      if (v349[1])
      {
        v349[2] = v349[1];
        operator delete(v349[1]);
      }
      *(_OWORD *)&v349[1] = v345;
      v349[3] = v346;
      CGRect v258 = (double *)v345;
      goto LABEL_144;
    }
    if (v335 && v102)
    {
      *(void *)&v353[0] = 0;
      *((double *)v353 + 1) = v107;
      *(void *)&v353[1] = 0x3FF0000000000000;
      *((double *)&v353[1] + 1) = v107;
      sub_1C4A2F81C(&v345, v353, 2uLL);
      if (v350[0])
      {
        v350[1] = v350[0];
        operator delete(v350[0]);
      }
      *(_OWORD *)long long v350 = v345;
      v351[0] = v346;
      *(void *)&v353[0] = 0;
      *((double *)v353 + 1) = v108;
      *(void *)&v353[1] = 0x3FF0000000000000;
      *((double *)&v353[1] + 1) = v108;
      sub_1C4A2F81C(&v345, v353, 2uLL);
      goto LABEL_177;
    }
    long long v345 = 0uLL;
    long long v346 = 0;
    if (v103) {
      sub_1C4A2F8B0((char **)&v345, (unint64_t)LODWORD(v109) << 32);
    }
    if (v335) {
      sub_1C4A2F8B0((char **)&v345, ((unint64_t)LODWORD(v107) << 32) | 0x41A00000);
    }
    if (v102) {
      sub_1C4A2F8B0((char **)&v345, ((unint64_t)LODWORD(v108) << 32) | 0x42200000);
    }
    if (v333) {
      sub_1C4A2F8B0((char **)&v345, ((unint64_t)LODWORD(v105) << 32) | 0x42700000);
    }
    v308 = (float *)v345;
    if (*((void *)&v345 + 1) - (void)v345 >= 0x10uLL
      && (float v309 = *(float *)(v345 + 12), v310 = *(float *)(v345 + 4), vabds_f32(v309, v310) >= 0.0001))
    {
      float v311 = v309 - v310;
      float v312 = *(float *)(v345 + 8);
      float v313 = (float)(v312 - *(float *)v345) / v311;
      *(void *)&v353[0] = 0;
      if (v335)
      {
        *((double *)v353 + 1) = v107;
        *(void *)&v353[1] = 0x3FF0000000000000;
        *((double *)&v353[1] + 1) = v107;
      }
      else
      {
        *((double *)v353 + 1) = (float)(v309 + (float)((float)(20.0 - v312) / v313));
        *(void *)&v353[1] = 0x3FF0000000000000;
        *((double *)&v353[1] + 1) = *((double *)v353 + 1);
      }
      sub_1C4A2F81C(&v343, v353, 2uLL);
      if (v350[0])
      {
        v350[1] = v350[0];
        operator delete(v350[0]);
      }
      *(_OWORD *)long long v350 = v343;
      v351[0] = v344;
      if (v102)
      {
        *(void *)&v353[0] = 0;
        *((double *)v353 + 1) = v108;
        *(void *)&v353[1] = 0x3FF0000000000000;
        *((double *)&v353[1] + 1) = v108;
      }
      else
      {
        float v314 = v308[2];
        float v315 = v308[3];
        *(void *)&v353[0] = 0;
        *((double *)v353 + 1) = (float)(v315 + (float)((float)(40.0 - v314) / v313));
        *(void *)&v353[1] = 0x3FF0000000000000;
        *((double *)&v353[1] + 1) = *((double *)v353 + 1);
      }
      sub_1C4A2F81C(&v343, v353, 2uLL);
      if (v349[1])
      {
        v349[2] = v349[1];
        operator delete(v349[1]);
      }
      *(_OWORD *)&v349[1] = v343;
      v349[3] = v344;
    }
    else
    {
      *(void *)&v353[0] = 0;
      *((double *)v353 + 1) = v104;
      *(void *)&v353[1] = 0x3FF0000000000000;
      *((double *)&v353[1] + 1) = v104;
      sub_1C4A2F81C(&v343, v353, 2uLL);
      if (v349[1])
      {
        v349[2] = v349[1];
        operator delete(v349[1]);
      }
      *(_OWORD *)&v349[1] = v343;
      v349[3] = v344;
      *(void *)&v353[0] = 0;
      *((double *)v353 + 1) = v106;
      *(void *)&v353[1] = 0x3FF0000000000000;
      *((double *)&v353[1] + 1) = v106;
      sub_1C4A2F81C(&v343, v353, 2uLL);
      if (v350[0])
      {
        v350[1] = v350[0];
        operator delete(v350[0]);
      }
      *(_OWORD *)long long v350 = v343;
      v351[0] = v344;
      if (!v308) {
        goto LABEL_208;
      }
    }
    operator delete(v308);
LABEL_208:
    CGRect v258 = (double *)v349[1];
    goto LABEL_144;
  }
  std::random_device v255 = (double *)operator new(0x20uLL);
  double v287 = (float)(v106 + 4.0);
  CGRect v257 = v255 + 4;
  double *v255 = 0.0;
  v255[1] = v287;
  v255[2] = 1.0;
  v255[3] = v287;
  if (v350[0])
  {
    v350[1] = v350[0];
    operator delete(v350[0]);
  }
LABEL_135:
  v350[0] = v255;
  v350[1] = v257;
  v351[0] = v257;
  CGRect v258 = (double *)operator new(0x20uLL);
  double v259 = v104;
LABEL_141:
  *CGRect v258 = 0.0;
  v258[1] = v259;
  v258[2] = 1.0;
  v258[3] = v259;
  if (v349[1])
  {
    v349[2] = v349[1];
    operator delete(v349[1]);
  }
  v349[1] = v258;
  v349[2] = v258 + 4;
  v349[3] = v258 + 4;
LABEL_144:
  double v267 = *((double *)v350[0] + 1);
  double v268 = v258[1];
  long long v269 = v330;
  objc_msgSend_bounds(v269, v270, v271, v272, v273, v274);
  float v275 = v268;
  float v276 = v267;
  objc_msgSend_drawingTransformedWithTranslation_scaleFactor_(v269, v278, v279, v280, v281, v282, (float)(0.0 / (float)(1.0 / (float)(v275 - v276))) - v277, (float)((float)(1.0 / (float)(1.0 / (float)(v275 - v276))) - v275), (float)(1.0 / (float)(v275 - v276)));
  uint64_t v330 = (CHDrawing *)objc_claimAutoreleasedReturnValue();

  CoreHandwriting::synthesis::fast_path::CHFastPathCharacter::CHFastPathCharacter((CoreHandwriting::synthesis::fast_path::CHFastPathCharacter *)v353, v330, a3, (int)a2);
  *(void *)a4 = *(void *)&v353[0];
  *(_OWORD *)(a4 + 8) = *(_OWORD *)((char *)v353 + 8);
  *(unsigned char *)(a4 + 24) = 1;
  id v16 = v316;
  if (v351[1])
  {
    *(void **)&long long v352 = v351[1];
    operator delete(v351[1]);
  }
  if (v350[0])
  {
    v350[1] = v350[0];
    operator delete(v350[0]);
  }
  if (v349[1])
  {
    v349[2] = v349[1];
    operator delete(v349[1]);
  }
  if (v348[0])
  {
    v348[1] = v348[0];
    operator delete(v348[0]);
  }
  sub_1C49A1374(v341);
LABEL_153:
}

void sub_1C4A2EE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1C4A2F114((uint64_t)&a63);
  sub_1C49A1374(a37);

  _Unwind_Resume(a1);
}

uint64_t sub_1C4A2F114(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

id CoreHandwriting::synthesis::fast_path::uncompressInventoryFromLZFSE(CoreHandwriting::synthesis::fast_path *this, NSString *a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = this;
  char v8 = (const char *)objc_msgSend_UTF8String(v2, v3, v4, v5, v6, v7);
  if (pathForResource(v8, 0, (UInt8 *)__s))
  {
    size_t v9 = strlen(__s);
    if (v9 >= 0x7FFFFFFFFFFFFFF8) {
      sub_1C4949B7C();
    }
    size_t v13 = v9;
    if (v9 >= 0x17)
    {
      uint64_t v17 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v17 = v9 | 7;
      }
      uint64_t v18 = v17 + 1;
      uint64_t v14 = operator new(v17 + 1);
      size_t v47 = v13;
      int64_t v48 = v18 | 0x8000000000000000;
      *(void *)CGAffineTransform buf = v14;
    }
    else
    {
      HIBYTE(v48) = v9;
      uint64_t v14 = buf;
      if (!v9) {
        goto LABEL_15;
      }
    }
    memcpy(v14, __s, v13);
LABEL_15:
    *((unsigned char *)v14 + v13) = 0;
    if (v48 >= 0) {
      objc_msgSend_stringWithCString_encoding_(NSString, v10, (uint64_t)buf, 4, v11, v12);
    }
    else {
    uint64_t v19 = objc_msgSend_stringWithCString_encoding_(NSString, v10, *(uint64_t *)buf, 4, v11, v12);
    }
    objc_msgSend_dataWithContentsOfFile_(MEMORY[0x1E4F1C9B8], v20, (uint64_t)v19, v21, v22, v23);
    uint64_t v24 = (NSData *)objc_claimAutoreleasedReturnValue();
    uint64_t v25 = NSString;
    uint64_t v30 = objc_msgSend_stringByAppendingString_(v19, v26, @".size", v27, v28, v29);
    uint64_t v33 = objc_msgSend_stringWithContentsOfFile_encoding_error_(v25, v31, (uint64_t)v30, 4, 0, v32);

    uint64_t v39 = objc_msgSend_integerValue(v33, v34, v35, v36, v37, v38);
    uint64_t v42 = uncompressLZFSEData(v24, v39);
    if (v42)
    {
      id v16 = objc_msgSend_JSONObjectWithData_options_error_(MEMORY[0x1E4F28D90], v40, (uint64_t)v42, 1, 0, v41);
    }
    else
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v43 = (id)qword_1EA3C9FD8;
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v45 = 0;
        _os_log_impl(&dword_1C492D000, v43, OS_LOG_TYPE_ERROR, "uncompressInventoryFromLZFSE Failed to load inventory", v45, 2u);
      }

      id v16 = 0;
    }

    if (SHIBYTE(v48) < 0) {
      operator delete(*(void **)buf);
    }
    goto LABEL_27;
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v15 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)CGAffineTransform buf = 0;
    _os_log_impl(&dword_1C492D000, v15, OS_LOG_TYPE_ERROR, "uncompressInventoryFromLZFSE Could not find annotated synthesis style.", buf, 2u);
  }

  id v16 = 0;
LABEL_27:

  return v16;
}

void sub_1C4A2F468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v21 = v20;

  if (a16 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1C4A2F4E0(uint64_t a1)
{
  *(void *)a1 = &unk_1F2010E30;
  sub_1C4A23B3C(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void sub_1C4A2F53C(uint64_t a1)
{
  *(void *)a1 = &unk_1F2010E30;
  sub_1C4A23B3C(a1 + 8, *(void **)(a1 + 16));
  JUMPOUT(0x1C8786460);
}

void *sub_1C4A2F5B8(void *result, void *a2)
{
  result[6] = a2[6];
  uint64_t v2 = a2 + 7;
  uint64_t v3 = a2[7];
  result[7] = v3;
  uint64_t v4 = result + 7;
  uint64_t v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[6] = v2;
    *uint64_t v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void sub_1C4A2F5F4(uint64_t a1)
{
}

void sub_1C4A2F604(uint64_t a1, NSDictionary *a2)
{
  unsigned int v2 = a2;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CoreHandwriting::synthesis::fast_path::createCHFastPathCharacterFromSegmentedData(*(CoreHandwriting::synthesis::fast_path **)(a1 + 32), a2, *(_DWORD *)(a1 + 48), (uint64_t)&v16);
  if (!v18)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    size_t v13 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CGAffineTransform buf = 67109120;
      unsigned int v20 = v2;
      _os_log_impl(&dword_1C492D000, v13, OS_LOG_TYPE_ERROR, "CHFastPathCharacterHolderLZFSE Could not add codepoint %d to inventory", buf, 8u);
    }
    goto LABEL_20;
  }
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v6 = (uint64_t **)(v4 + 56);
  uint64_t v5 = *(uint64_t **)(v4 + 56);
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= v2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= v2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
    size_t v9 = v7;
    uint64_t v12 = v7[6];
    if (v12 < v7[7]) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(v4 + 56);
LABEL_9:
    size_t v9 = operator new(0x40uLL);
    *((_DWORD *)v9 + 8) = v2;
    *((void *)v9 + 6) = 0;
    *((void *)v9 + 7) = 0;
    *((void *)v9 + 5) = 0;
    *(void *)size_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v7;
    CoreHandwriting::synthesis *v6 = (uint64_t *)v9;
    uint64_t v10 = **(void **)(v4 + 48);
    uint64_t v11 = (uint64_t *)v9;
    if (v10)
    {
      *(void *)(v4 + 48) = v10;
      uint64_t v11 = *v6;
    }
    sub_1C4949FD4(*(uint64_t **)(v4 + 56), v11);
    ++*(void *)(v4 + 64);
    uint64_t v12 = (uint64_t *)*((void *)v9 + 6);
    if ((unint64_t)v12 < *((void *)v9 + 7))
    {
LABEL_12:
      size_t v13 = v16;
      *uint64_t v12 = (uint64_t)v13;
      *(_OWORD *)(v12 + 1) = v17;
      *((void *)v9 + 6) = v12 + 3;
      goto LABEL_20;
    }
  }
  uint64_t v14 = sub_1C4A28B1C((void **)v9 + 5, (uint64_t)&v16);
  int v15 = v18;
  *((void *)v9 + 6) = v14;
  if (!v15) {
    return;
  }
  size_t v13 = v16;
LABEL_20:
}

void sub_1C4A2F7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12) {

  }
  _Unwind_Resume(exception_object);
}

void *sub_1C4A2F81C(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 60) {
      sub_1C494A220();
    }
    size_t v5 = 16 * a3;
    uint64_t v6 = (char *)operator new(16 * a3);
    *a1 = v6;
    a1[1] = v6;
    uint64_t v7 = &v6[v5];
    a1[2] = &v6[v5];
    memmove(v6, a2, v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_1C4A2F894(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C4A2F8B0(char **a1, uint64_t a2)
{
  size_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  uint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(void *)size_t v5 = a2;
    uint64_t v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  unsigned int v8 = *a1;
  uint64_t v9 = v5 - *a1;
  uint64_t v10 = v9 >> 3;
  unint64_t v11 = (v9 >> 3) + 1;
  if (v11 >> 61) {
    sub_1C494A220();
  }
  uint64_t v12 = v4 - (void)v8;
  if (v12 >> 2 > v11) {
    unint64_t v11 = v12 >> 2;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 61) {
      sub_1C4949AA8();
    }
    uint64_t v14 = operator new(8 * v13);
    int v15 = &v14[8 * v10];
    id v16 = &v14[8 * v13];
    *(void *)int v15 = a2;
    uint64_t v7 = (uint64_t)(v15 + 8);
    long long v17 = (char *)(v5 - v8);
    if (v5 == v8) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  uint64_t v14 = 0;
  int v15 = (char *)(8 * v10);
  id v16 = 0;
  *(void *)(8 * v10) = a2;
  uint64_t v7 = 8 * v10 + 8;
  long long v17 = (char *)(v5 - v8);
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v5 - v14 - v9) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v19 = (v18 >> 3) + 1;
    uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v6 = &v5[-v20];
    v15 -= v20;
    uint64_t v21 = &v14[8 * v10 - 16];
    uint64_t v22 = v5 - 16;
    uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *uint64_t v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v25 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v15 - 1) = v25;
        v15 -= 8;
      }
      while (v6 != v8);
    }
    uint64_t v6 = *a1;
  }
LABEL_21:
  *a1 = v15;
  a1[1] = (char *)v7;
  a1[2] = v16;
  if (v6) {
    operator delete(v6);
  }
LABEL_23:
  a1[1] = (char *)v7;
}

void sub_1C4A2FC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C4A2FED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1C4A30110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C4A3032C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_1C4A30380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_1C4A31D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  _Unwind_Resume(a1);
}

id sub_1C4A32084(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_string(a2, (const char *)a2, a3, a4, a5, a6);
  return v6;
}

void sub_1C4A320B4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = NSNumber;
  uint64_t v7 = *(void **)(a1 + 32);
  *(float *)&double v8 = (float)(unint64_t)a2
                / (float)(unint64_t)objc_msgSend_length(*(void **)(a1 + 40), a2, a3, a4, a5, a6);
  objc_msgSend_numberWithFloat_(v6, v9, v10, v11, v12, v13, v8);
  id v18 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v7, v14, (uint64_t)v18, v15, v16, v17);
}

void sub_1C4A3212C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A32140(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v9 = objc_msgSend_substroke(*(void **)(a1 + 32), v4, v5, v6, v7, v8);
  uint64_t v15 = objc_msgSend_strokeIdentifier(v9, v10, v11, v12, v13, v14);
  uint64_t v20 = objc_msgSend_containsObject_(v3, v16, (uint64_t)v15, v17, v18, v19);

  return v20;
}

void sub_1C4A321AC(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4A321D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A321E0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void **)(a1 + 32);
  objc_msgSend_substroke(a2, (const char *)a2, a3, a4, a5, a6);
  id v17 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v12 = objc_msgSend_strokeIdentifier(v17, v7, v8, v9, v10, v11);
  objc_msgSend_addObject_(v6, v13, (uint64_t)v12, v14, v15, v16);
}

void sub_1C4A32248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A32260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A32274(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

uint64_t sub_1C4A32280(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_containsIndex_(a2, (const char *)a2, *(void *)(a1 + 32), a4, a5, a6);
}

void sub_1C4A325AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A32680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A32694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A32B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *__p,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C4A32DD0(double **a1, char **a2, int a3, int a4, uint64_t a5, uint64_t a6, double a7)
{
  if (a5)
  {
    uint64_t v13 = *(void **)(a5 + 8);
    unint64_t v12 = *(void *)(a5 + 16);
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = *(void **)a5;
      uint64_t v16 = ((uint64_t)v13 - *(void *)a5) >> 4;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 60) {
        sub_1C4A38810();
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 3 > v17) {
        unint64_t v17 = v18 >> 3;
      }
      BOOL v19 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0;
      unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
      if (!v19) {
        unint64_t v20 = v17;
      }
      if (v20 >> 60) {
        sub_1C4949AA8();
      }
      uint64_t v21 = 16 * v20;
      uint64_t v22 = (char *)operator new(16 * v20);
      uint64_t v23 = &v22[16 * v16];
      long long v24 = &v22[v21];
      *(void *)uint64_t v23 = a6;
      *((void *)v23 + 1) = 0;
      uint64_t v14 = v23 + 16;
      if (v13 == v15)
      {
        *(void *)a5 = v23;
        *(void *)(a5 + 8) = v14;
        *(void *)(a5 + 16) = v24;
        if (!v15) {
          goto LABEL_14;
        }
      }
      else
      {
        do
        {
          uint64_t v25 = v23 - 16;
          *((_OWORD *)v23 - 1) = *((_OWORD *)v13 - 1);
          v13 -= 2;
          v23 -= 16;
        }
        while (v13 != v15);
        *(void *)a5 = v25;
        *(void *)(a5 + 8) = v14;
        *(void *)(a5 + 16) = v24;
        if (!v15) {
          goto LABEL_14;
        }
      }
      operator delete(v15);
    }
    else
    {
      *uint64_t v13 = a6;
      v13[1] = 0;
      uint64_t v14 = v13 + 2;
    }
LABEL_14:
    *(void *)(a5 + 8) = v14;
  }
  uint64_t v27 = *a2;
  uint64_t v26 = a2[1];
  int64_t v28 = v26 - *a2;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if ((unint64_t)v28 <= 0x3F)
  {
    if (v26 != v27)
    {
      uint64_t v29 = (double *)operator new(v28);
      *a1 = v29;
      a1[1] = v29;
      uint64_t v30 = (char *)&v29[4 * (v28 >> 5)];
      a1[2] = (double *)v30;
      memcpy(v29, v27, v28 - 7);
      a1[1] = (double *)v30;
    }
    return;
  }
  int v129 = a3;
  uint64_t v31 = operator new(0x20uLL);
  uint64_t v32 = (double *)(v31 + 2);
  long long v33 = *((_OWORD *)v27 + 1);
  *uint64_t v31 = *(_OWORD *)v27;
  v31[1] = v33;
  a1[1] = (double *)(v31 + 2);
  a1[2] = (double *)(v31 + 2);
  *a1 = (double *)v31;
  double v34 = 0.0;
  if (v27 != v26)
  {
    uint64_t v35 = (float64x2_t *)(v27 + 32);
    if (v27 + 32 != v26)
    {
      float64x2_t v36 = *(float64x2_t *)v27;
      if ((unint64_t)(v28 - 64) >= 0x80)
      {
        unint64_t v37 = ((unint64_t)(v28 - 64) >> 5) + 1;
        uint64_t v38 = v37 & 3;
        if ((v37 & 3) == 0) {
          uint64_t v38 = 4;
        }
        unint64_t v39 = v37 - v38;
        v35 += 2 * v39;
        int8x16_t v40 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v36.f64[0], 0);
        uint64_t v41 = (int64x2_t *)(v27 + 96);
        do
        {
          i64 = (const double *)v41[-4].i64;
          float64x2x4_t v132 = vld4q_f64(i64);
          int64x2_t v43 = v41[2];
          int64x2_t v44 = *v41;
          v41 += 8;
          float64x2_t v45 = (float64x2_t)vzip1q_s64(v44, v43);
          float64x2_t v46 = (float64x2_t)vzip2q_s64(v44, v43);
          float64x2_t v47 = vsubq_f64((float64x2_t)vextq_s8(v40, (int8x16_t)v132.val[0], 8uLL), v132.val[0]);
          float64x2_t v48 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v132.val[0], (int8x16_t)v45, 8uLL), v45);
          float64x2_t v49 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v36, (int8x16_t)v132.val[1], 8uLL), v132.val[1]);
          v132.val[0] = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v132.val[1], (int8x16_t)v46, 8uLL), v46);
          float64x2_t v50 = vsqrtq_f64(vmlaq_f64(vmulq_f64(v49, v49), v47, v47));
          v132.val[0] = vsqrtq_f64(vmlaq_f64(vmulq_f64(v132.val[0], v132.val[0]), v48, v48));
          double v34 = v34 + v50.f64[0] + v50.f64[1] + v132.val[0].f64[0] + v132.val[0].f64[1];
          float64x2_t v36 = v46;
          int8x16_t v40 = (int8x16_t)v45;
          v39 -= 4;
        }
        while (v39);
        float64x2_t v36 = (float64x2_t)v43;
      }
      do
      {
        float64x2_t v51 = *v35;
        v35 += 2;
        float64x2_t v52 = vsubq_f64(v36, v51);
        double v34 = v34 + sqrt(vmlad_n_f64(COERCE_DOUBLE(*(void *)&vmulq_f64(v52, v52).f64[1]), v52.f64[0], v52.f64[0]));
        float64x2_t v36 = v51;
      }
      while (v35 != (float64x2_t *)v26);
    }
  }
  if (a4 >= 2)
  {
    unint64_t v53 = (unint64_t)(ceil(v34 / a7) + 1.0);
    unint64_t v54 = v53 % a4;
    if (v54) {
      a7 = v34 / (double)(~v54 + a4 + v53);
    }
  }
  if (v34 < a7)
  {
    uint64_t v55 = operator new(0x40uLL);
    long long v56 = *((_OWORD *)v26 - 1);
    v55[2] = *((_OWORD *)v26 - 2);
    v55[3] = v56;
    _OWORD *v55 = *v31;
    *(_OWORD *)((char *)v55 + 9) = *(_OWORD *)((char *)v31 + 9);
    uint64_t v57 = (double *)(v55 + 4);
    *a1 = (double *)v55;
    a1[1] = (double *)(v55 + 4);
    a1[2] = (double *)(v55 + 4);
    operator delete(v31);
    a1[1] = v57;
    if (!a5) {
      return;
    }
    uint64_t v58 = ((a2[1] - *a2) >> 5) - 1;
    uint64_t v60 = *(void **)(a5 + 8);
    unint64_t v59 = *(void *)(a5 + 16);
    if ((unint64_t)v60 < v59) {
      goto LABEL_118;
    }
    uint64_t v61 = *(void **)a5;
    uint64_t v62 = ((uint64_t)v60 - *(void *)a5) >> 4;
    unint64_t v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 60) {
      sub_1C4A38810();
    }
    uint64_t v64 = v59 - (void)v61;
    if (v64 >> 3 > v63) {
      unint64_t v63 = v64 >> 3;
    }
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v65 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v65 = v63;
    }
    if (v65 >> 60) {
      sub_1C4949AA8();
    }
    int v66 = (char *)operator new(16 * v65);
    int v67 = &v66[16 * v62];
    id v68 = &v66[16 * v65];
    *(void *)int v67 = a6;
    *((void *)v67 + 1) = v58;
    uint64_t v69 = v67 + 16;
    if (v60 != v61)
    {
      do
      {
        int v70 = v67 - 16;
        *((_OWORD *)v67 - 1) = *((_OWORD *)v60 - 1);
        v60 -= 2;
        v67 -= 16;
      }
      while (v60 != v61);
      goto LABEL_130;
    }
    goto LABEL_129;
  }
  int v71 = a3;
  unint64_t v130 = (a3 - 1);
  int v127 = a4;
  if (a3 >= 1 && vcvtpd_u64_f64(v34 / a7) > a3) {
    a7 = v34 / (double)(int)v130;
  }
  uint64_t v72 = 1;
  double v73 = 0.0;
  while (2)
  {
    uint64_t v75 = (double *)&v27[32 * v72];
    double v76 = *(v75 - 4);
    double v77 = *(v75 - 3);
    double v78 = *v75;
    uint64_t v79 = v75 + 1;
    double v80 = v75[1];
    double v74 = sqrt((v77 - v80) * (v77 - v80) + (v76 - *v75) * (v76 - *v75));
    double v73 = v73 + v74;
    if (v74 <= 0.0 || v73 < a7) {
      goto LABEL_49;
    }
    while (v71 < 1 || v130 > ((char *)v32 - (char *)*a1) >> 5)
    {
      double v82 = (a7 - (v73 - v74)) / v74;
      double v83 = v76 + v82 * (v78 - v76);
      double v84 = v77 + v82 * (v80 - v77);
      unint64_t v85 = (unint64_t)a1[2];
      if ((unint64_t)v32 < v85)
      {
        *uint64_t v32 = v83;
        v32[1] = v84;
        v32[2] = 0.0;
        *((unsigned char *)v32 + 24) = 0;
        v32 += 4;
        goto LABEL_70;
      }
      uint64_t v86 = *a1;
      uint64_t v87 = ((char *)v32 - (char *)*a1) >> 5;
      unint64_t v88 = v87 + 1;
      if ((unint64_t)(v87 + 1) >> 59) {
        sub_1C4A38810();
      }
      uint64_t v89 = v85 - (void)v86;
      if (v89 >> 4 > v88) {
        unint64_t v88 = v89 >> 4;
      }
      if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v90 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v90 = v88;
      }
      if (v90 >> 59) {
        sub_1C4949AA8();
      }
      uint64_t v91 = (char *)operator new(32 * v90);
      uint64_t v92 = (double *)&v91[32 * v87];
      double *v92 = v83;
      v92[1] = v84;
      v92[2] = 0.0;
      *((unsigned char *)v92 + 24) = 0;
      if (v32 == v86)
      {
        uint64_t v32 = v92 + 4;
        *a1 = v92;
        a1[1] = v92 + 4;
        a1[2] = (double *)&v91[32 * v90];
        if (v86) {
          goto LABEL_69;
        }
      }
      else
      {
        uint64_t v93 = &v91[32 * v87];
        do
        {
          long long v94 = *((_OWORD *)v32 - 2);
          uint64_t v95 = v93 - 32;
          *(_OWORD *)(v93 - 23) = *(_OWORD *)((char *)v32 - 23);
          *((_OWORD *)v93 - 2) = v94;
          v32 -= 4;
          v93 -= 32;
        }
        while (v32 != v86);
        uint64_t v32 = v92 + 4;
        *a1 = (double *)v95;
        a1[1] = v92 + 4;
        a1[2] = (double *)&v91[32 * v90];
        if (v86) {
LABEL_69:
        }
          operator delete(v86);
      }
LABEL_70:
      a1[1] = v32;
      if (!a5) {
        goto LABEL_86;
      }
      int v97 = *(void **)(a5 + 8);
      unint64_t v96 = *(void *)(a5 + 16);
      if ((unint64_t)v97 >= v96)
      {
        uint64_t v99 = *(void **)a5;
        uint64_t v100 = ((uint64_t)v97 - *(void *)a5) >> 4;
        unint64_t v101 = v100 + 1;
        if ((unint64_t)(v100 + 1) >> 60) {
          sub_1C4A38810();
        }
        uint64_t v102 = v96 - (void)v99;
        if (v102 >> 3 > v101) {
          unint64_t v101 = v102 >> 3;
        }
        if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v103 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v103 = v101;
        }
        if (v103 >> 60) {
          sub_1C4949AA8();
        }
        float v104 = (char *)operator new(16 * v103);
        float v105 = &v104[16 * v100];
        *(void *)float v105 = a6;
        *((void *)v105 + 1) = v72;
        if (v97 == v99)
        {
          int v71 = v129;
          uint64_t v98 = v105 + 16;
          *(void *)a5 = v105;
          *(void *)(a5 + 8) = v105 + 16;
          *(void *)(a5 + 16) = &v104[16 * v103];
          if (!v99) {
            goto LABEL_85;
          }
        }
        else
        {
          float v106 = &v104[16 * v100];
          int v71 = v129;
          do
          {
            float v107 = v106 - 16;
            *((_OWORD *)v106 - 1) = *((_OWORD *)v97 - 1);
            v97 -= 2;
            v106 -= 16;
          }
          while (v97 != v99);
          uint64_t v98 = v105 + 16;
          *(void *)a5 = v107;
          *(void *)(a5 + 8) = v105 + 16;
          *(void *)(a5 + 16) = &v104[16 * v103];
          if (!v99) {
            goto LABEL_85;
          }
        }
        operator delete(v99);
        uint64_t v32 = a1[1];
      }
      else
      {
        *int v97 = a6;
        v97[1] = v72;
        uint64_t v98 = v97 + 2;
      }
LABEL_85:
      *(void *)(a5 + 8) = v98;
LABEL_86:
      double v78 = *v75;
      double v76 = *(v32 - 4);
      double v77 = *(v32 - 3);
      double v80 = *v79;
      double v74 = sqrt((v77 - *v79) * (v77 - *v79) + (v76 - *v75) * (v76 - *v75));
      if (v74 >= a7)
      {
        double v73 = v74;
        if (v74 > 0.0) {
          continue;
        }
      }
      goto LABEL_48;
    }
    double v74 = v73;
LABEL_48:
    uint64_t v27 = *a2;
    uint64_t v26 = a2[1];
    double v73 = v74;
LABEL_49:
    if (++v72 < (unint64_t)((v26 - v27) >> 5)) {
      continue;
    }
    break;
  }
  if (v127 > 1 && !((((char *)v32 - (char *)*a1) >> 5) % (unint64_t)v127))
  {
    v32 -= 4;
    a1[1] = v32;
    if (a5) {
      *(void *)(a5 + 8) -= 16;
    }
  }
  float v108 = v26 - 32;
  unint64_t v109 = (unint64_t)a1[2];
  if ((unint64_t)v32 >= v109)
  {
    uint64_t v112 = *a1;
    uint64_t v113 = ((char *)v32 - (char *)*a1) >> 5;
    unint64_t v114 = v113 + 1;
    if ((unint64_t)(v113 + 1) >> 59) {
      sub_1C4A38810();
    }
    uint64_t v115 = v109 - (void)v112;
    if (v115 >> 4 > v114) {
      unint64_t v114 = v115 >> 4;
    }
    if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v116 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v116 = v114;
    }
    if (v116)
    {
      if (v116 >> 59) {
        sub_1C4949AA8();
      }
      uint64_t v117 = (char *)operator new(32 * v116);
    }
    else
    {
      uint64_t v117 = 0;
    }
    uint64_t v118 = &v117[32 * v113];
    long long v119 = *((_OWORD *)v108 + 1);
    *(_OWORD *)uint64_t v118 = *(_OWORD *)v108;
    *((_OWORD *)v118 + 1) = v119;
    uint64_t v111 = (double *)(v118 + 32);
    if (v32 != v112)
    {
      do
      {
        long long v120 = *((_OWORD *)v32 - 2);
        *(_OWORD *)(v118 - 23) = *(_OWORD *)((char *)v32 - 23);
        *((_OWORD *)v118 - 2) = v120;
        v118 -= 32;
        v32 -= 4;
      }
      while (v32 != v112);
      uint64_t v32 = v112;
    }
    *a1 = (double *)v118;
    a1[1] = v111;
    a1[2] = (double *)&v117[32 * v116];
    if (v32) {
      operator delete(v32);
    }
  }
  else
  {
    long long v110 = *((_OWORD *)v26 - 1);
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v108;
    *((_OWORD *)v32 + 1) = v110;
    uint64_t v111 = v32 + 4;
  }
  a1[1] = v111;
  if (!a5) {
    return;
  }
  uint64_t v58 = ((a2[1] - *a2) >> 5) - 1;
  uint64_t v60 = *(void **)(a5 + 8);
  unint64_t v121 = *(void *)(a5 + 16);
  if ((unint64_t)v60 < v121)
  {
LABEL_118:
    *uint64_t v60 = a6;
    v60[1] = v58;
    uint64_t v69 = v60 + 2;
    goto LABEL_132;
  }
  uint64_t v61 = *(void **)a5;
  uint64_t v122 = ((uint64_t)v60 - *(void *)a5) >> 4;
  unint64_t v123 = v122 + 1;
  if ((unint64_t)(v122 + 1) >> 60) {
    sub_1C4A38810();
  }
  uint64_t v124 = v121 - (void)v61;
  if (v124 >> 3 > v123) {
    unint64_t v123 = v124 >> 3;
  }
  if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v125 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v125 = v123;
  }
  if (v125 >> 60) {
    sub_1C4949AA8();
  }
  uint64_t v126 = (char *)operator new(16 * v125);
  int v67 = &v126[16 * v122];
  id v68 = &v126[16 * v125];
  *(void *)int v67 = a6;
  *((void *)v67 + 1) = v58;
  uint64_t v69 = v67 + 16;
  if (v60 == v61)
  {
LABEL_129:
    int v70 = v67;
    goto LABEL_130;
  }
  do
  {
    int v70 = v67 - 16;
    *((_OWORD *)v67 - 1) = *((_OWORD *)v60 - 1);
    v60 -= 2;
    v67 -= 16;
  }
  while (v60 != v61);
LABEL_130:
  *(void *)a5 = v70;
  *(void *)(a5 + 8) = v69;
  *(void *)(a5 + 16) = v68;
  if (v61) {
    operator delete(v61);
  }
LABEL_132:
  *(void *)(a5 + 8) = v69;
}

void sub_1C4A336CC(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float64x2_t CoreHandwriting::Rescaling::processInplace(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(float64x2_t ***)a2;
  id v3 = *(float64x2_t ***)(a2 + 8);
  while (v2 != v3)
  {
    unint64_t v4 = *v2;
    uint64_t v5 = v2[1];
    if (*v2 != v5)
    {
      float64x2_t v6 = *(float64x2_t *)(a1 + 8);
      do
      {
        *unint64_t v4 = vmulq_f64(v6, *v4);
        v4 += 2;
      }
      while (v4 != v5);
    }
    v2 += 3;
  }
  float64x2_t result = vmulq_f64(*(float64x2_t *)(a1 + 8), *(float64x2_t *)(a2 + 48));
  *(float64x2_t *)(a2 + 48) = result;
  return result;
}

void CoreHandwriting::LeftToRightByCenterStrokeReordering::processInplace(CoreHandwriting::LeftToRightByCenterStrokeReordering *this, void **a2, CoreHandwriting::InkMapping *a3)
{
  uint64_t v5 = (double **)*a2;
  float64x2_t v6 = (double **)a2[1];
  int v129 = 0;
  unint64_t v130 = 0;
  uint64_t v128 = 0;
  uint64_t v7 = v6 - v5;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * v7;
  unint64_t v9 = (0xAAAAAAAAAAAAAAABLL * v7) >> 61;
  size_t v10 = 0x5555555555555558 * v7;
  if (v6 == v5)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    goto LABEL_10;
  }
  if (v9) {
    sub_1C494A220();
  }
  uint64_t v11 = (int64x2_t *)operator new(0x5555555555555558 * v7);
  uint64_t v128 = v11;
  unint64_t v130 = &v11->i64[v8];
  bzero(v11, v10);
  unint64_t v12 = &v11->i64[v10 / 8];
  int v129 = &v11->i64[v10 / 8];
  if (v10 - 8 < 0x18)
  {
    uint64_t v13 = 0;
    uint64_t v14 = (uint64_t *)v11;
    do
LABEL_9:
      *v14++ = v13++;
    while (v14 != v12);
    goto LABEL_10;
  }
  unint64_t v15 = ((v10 - 8) >> 3) + 1;
  uint64_t v13 = v15 & 0x3FFFFFFFFFFFFFFCLL;
  uint64_t v14 = &v11->i64[v15 & 0x3FFFFFFFFFFFFFFCLL];
  int64x2_t v16 = (int64x2_t)xmmword_1C4C39B30;
  unint64_t v17 = v11 + 1;
  int64x2_t v18 = vdupq_n_s64(2uLL);
  int64x2_t v19 = vdupq_n_s64(4uLL);
  uint64_t v20 = v15 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v17[-1] = v16;
    *unint64_t v17 = vaddq_s64(v16, v18);
    int64x2_t v16 = vaddq_s64(v16, v19);
    v17 += 2;
    v20 -= 4;
  }
  while (v20);
  if (v15 != v13) {
    goto LABEL_9;
  }
LABEL_10:
  unint64_t v125 = 0;
  uint64_t v126 = 0;
  int v127 = 0;
  uint64_t v111 = a3;
  uint64_t v112 = a2;
  uint64_t v113 = v12;
  if (v6 == v5)
  {
    uint64_t v115 = v5;
    goto LABEL_55;
  }
  if (v9) {
    sub_1C494A220();
  }
  uint64_t v21 = (double *)operator new(v10);
  uint64_t v22 = v21;
  uint64_t v23 = &v21[v8];
  unint64_t v125 = v21;
  uint64_t v126 = (uint64_t)v21;
  int v127 = v23;
  uint64_t v115 = v5;
  if (v6 != v5)
  {
    long long v24 = v21;
    uint64_t v25 = v5;
    uint64_t v26 = v6;
    do
    {
      while (1)
      {
        uint64_t v27 = *v25;
        int64_t v28 = v25[1];
        if (*v25 != v28) {
          break;
        }
        double v33 = 0.0 * 0.5;
        if (v22 >= v23) {
          goto LABEL_27;
        }
LABEL_16:
        *v22++ = v33;
        uint64_t v126 = (uint64_t)v22;
        v25 += 3;
        float64x2_t v6 = v26;
        if (v25 == v26) {
          goto LABEL_55;
        }
      }
      double v29 = 1.79769313e308;
      double v30 = -1.79769313e308;
      do
      {
        double v31 = *v27;
        v27 += 4;
        double v32 = v31;
        if (v29 > v31) {
          double v29 = v32;
        }
        if (v30 < v32) {
          double v30 = v32;
        }
      }
      while (v27 != v28);
      double v33 = (v30 + v29) * 0.5;
      if (v22 < v23) {
        goto LABEL_16;
      }
LABEL_27:
      uint64_t v34 = v22 - v24;
      unint64_t v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 61) {
        sub_1C494A220();
      }
      if (((char *)v23 - (char *)v24) >> 2 > v35) {
        unint64_t v35 = ((char *)v23 - (char *)v24) >> 2;
      }
      if ((unint64_t)((char *)v23 - (char *)v24) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v36 = v35;
      }
      if (v36)
      {
        if (v36 >> 61) {
          sub_1C4949AA8();
        }
        unint64_t v37 = operator new(8 * v36);
        uint64_t v38 = (double *)&v37[8 * v34];
        double *v38 = v33;
        uint64_t v39 = (uint64_t)(v38 + 1);
        int64_t v40 = (char *)v22 - (char *)v24;
        if (v22 == v24) {
          goto LABEL_41;
        }
      }
      else
      {
        unint64_t v37 = 0;
        uint64_t v38 = (double *)(8 * v34);
        *(double *)(8 * v34) = v33;
        uint64_t v39 = 8 * v34 + 8;
        int64_t v40 = (char *)v22 - (char *)v24;
        if (v22 == v24) {
          goto LABEL_41;
        }
      }
      unint64_t v41 = v40 - 8;
      if (v41 >= 0x168)
      {
        unint64_t v44 = ((char *)(v22 - 1) - (char *)v24) & 0xFFFFFFFFFFFFFFF8;
        if (&v37[(char *)v22 - (char *)v24 - 8 - v44] > &v37[(char *)v22 - (char *)v24 - 8])
        {
          uint64_t v42 = v22;
        }
        else if ((double *)((char *)v22 - v44 - 8) > v22 - 1)
        {
          uint64_t v42 = v22;
        }
        else if ((unint64_t)((char *)v24 - v37) >= 0x20)
        {
          uint64_t v45 = (v41 >> 3) + 1;
          uint64_t v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v42 = &v22[v46 / 0xFFFFFFFFFFFFFFF8];
          uint64_t v38 = (double *)((char *)v38 - v46);
          float64x2_t v47 = &v37[8 * v34 - 16];
          float64x2_t v48 = v22 - 2;
          uint64_t v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v50 = *(_OWORD *)v48;
            *(v47 - 1) = *((_OWORD *)v48 - 1);
            *float64x2_t v47 = v50;
            v47 -= 2;
            v48 -= 4;
            v49 -= 4;
          }
          while (v49);
          if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_41;
          }
        }
        else
        {
          uint64_t v42 = v22;
        }
      }
      else
      {
        uint64_t v42 = v22;
      }
      do
      {
        uint64_t v43 = *((void *)v42-- - 1);
        *((void *)v38-- - 1) = v43;
      }
      while (v42 != v24);
LABEL_41:
      uint64_t v23 = (double *)&v37[8 * v36];
      unint64_t v125 = v38;
      int v127 = v23;
      if (v24) {
        operator delete(v24);
      }
      long long v24 = v38;
      uint64_t v126 = v39;
      v25 += 3;
      uint64_t v22 = (double *)v39;
      float64x2_t v6 = v26;
    }
    while (v25 != v26);
  }
LABEL_55:
  uint64_t v122 = &v125;
  unint64_t v51 = 126 - 2 * __clz(((char *)v113 - (char *)v11) >> 3);
  if (v6 == v115) {
    uint64_t v52 = 0;
  }
  else {
    uint64_t v52 = v51;
  }
  sub_1C4A3892C((uint64_t)v11, v113, (uint64_t **)&v122, v52, 1);
  uint64_t v122 = 0;
  unint64_t v123 = 0;
  unint64_t v124 = 0;
  sub_1C4A3401C((uint64_t)&v122, 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a2[1] - (unsigned char *)*a2) >> 3));
  if (v6 != v115)
  {
    unint64_t v53 = v123;
    do
    {
      uint64_t v54 = v11->i64[0];
      uint64_t v55 = *a2;
      uint64_t v56 = (uint64_t)*a2 + 24 * v11->i64[0];
      if ((unint64_t)v53 < v124)
      {
        *(void *)unint64_t v53 = 0;
        *((void *)v53 + 1) = 0;
        *((void *)v53 + 2) = 0;
        *(_OWORD *)unint64_t v53 = *(_OWORD *)v56;
        *((void *)v53 + 2) = v55[3 * v54 + 2];
        *(void *)uint64_t v56 = 0;
        *(void *)(v56 + 8) = 0;
        *(void *)(v56 + 16) = 0;
        v53 += 24;
      }
      else
      {
        unint64_t v53 = sub_1C4A397D8((char **)&v122, v56);
      }
      unint64_t v123 = v53;
      uint64_t v11 = (int64x2_t *)((char *)v11 + 8);
    }
    while (v11 != (int64x2_t *)v113);
  }
  if (&v122 != a2) {
    sub_1C4A39928((uint64_t)a2, (char **)v122, (uint64_t)v123, 0xAAAAAAAAAAAAAAABLL * ((v123 - (unsigned char *)v122) >> 3));
  }
  if (v111)
  {
    long long __p = 0;
    long long v120 = 0;
    uint64_t v121 = 0;
    uint64_t v57 = (char *)*a2;
    if (a2[1] != *a2)
    {
      unint64_t v58 = 0;
      while (1)
      {
        unint64_t v59 = &v57[24 * v58];
        uint64_t v61 = *(void *)v59;
        uint64_t v60 = *((void *)v59 + 1);
        unint64_t v114 = v58 + 1;
        unint64_t v116 = v58;
        uint64_t v62 = (char *)__p;
        unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((v120 - (unsigned char *)__p) >> 3);
        if (v63 <= v58)
        {
          sub_1C4B1C684((uint64_t)&__p, v114 - v63);
          uint64_t v62 = (char *)__p;
          unint64_t v58 = v116;
        }
        unint64_t v64 = v60 - v61;
        unint64_t v65 = (v60 - v61) >> 5;
        int v66 = &v62[24 * v58];
        int v67 = v66 + 16;
        id v68 = *(char **)v66;
        if (v65 > (uint64_t)(*((void *)v66 + 2) - *(void *)v66) >> 4)
        {
          if ((v64 & 0x8000000000000000) != 0) {
            sub_1C4A38810();
          }
          uint64_t v69 = &v62[24 * v58];
          uint64_t v72 = (char *)*((void *)v69 + 1);
          int v70 = (char **)(v69 + 8);
          int v71 = v72;
          double v73 = (char *)operator new(v64 >> 1);
          double v74 = &v73[(v72 - v68) & 0xFFFFFFFFFFFFFFF0];
          uint64_t v75 = v74;
          if (v72 != v68)
          {
            double v76 = &v73[(v71 - v68) & 0xFFFFFFFFFFFFFFF0];
            do
            {
              uint64_t v75 = v76 - 16;
              *((_OWORD *)v76 - 1) = *((_OWORD *)v71 - 1);
              v71 -= 16;
              v76 -= 16;
            }
            while (v71 != v68);
          }
          *(void *)int v66 = v75;
          *int v70 = v74;
          void *v67 = &v73[16 * v65];
          unint64_t v58 = v116;
          if (v68)
          {
            operator delete(v68);
            unint64_t v58 = v116;
          }
        }
        if (v60 != v61) {
          break;
        }
LABEL_69:
        uint64_t v57 = (char *)*v112;
        unint64_t v58 = v114;
        if (v114 >= 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v112[1] - (unsigned char *)*v112) >> 3)) {
          goto LABEL_101;
        }
      }
      uint64_t v77 = 0;
      double v78 = &v62[24 * v58];
      int v81 = (char *)*((void *)v78 + 1);
      uint64_t v79 = (char **)(v78 + 8);
      double v80 = v81;
      if (v65 <= 1) {
        uint64_t v82 = 1;
      }
      else {
        uint64_t v82 = v65;
      }
      double v83 = v128;
      while (1)
      {
        if ((unint64_t)v80 < *v67)
        {
          *(void *)double v80 = v83[v58];
          *((void *)v80 + 1) = v77;
          v80 += 16;
        }
        else
        {
          double v84 = *(char **)v66;
          uint64_t v85 = (uint64_t)&v80[-*(void *)v66] >> 4;
          unint64_t v86 = v85 + 1;
          if ((unint64_t)(v85 + 1) >> 60) {
            sub_1C4A38810();
          }
          uint64_t v87 = *v67 - (void)v84;
          if (v87 >> 3 > v86) {
            unint64_t v86 = v87 >> 3;
          }
          if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v88 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v88 = v86;
          }
          if (v88 >> 60) {
            sub_1C4949AA8();
          }
          uint64_t v89 = (char *)operator new(16 * v88);
          unint64_t v58 = v116;
          unint64_t v90 = &v89[16 * v85];
          *(void *)unint64_t v90 = v83[v116];
          *((void *)v90 + 1) = v77;
          if (v80 != v84)
          {
            uint64_t v91 = &v89[16 * v85];
            do
            {
              uint64_t v92 = v91 - 16;
              *((_OWORD *)v91 - 1) = *((_OWORD *)v80 - 1);
              v80 -= 16;
              v91 -= 16;
            }
            while (v80 != v84);
            *(void *)int v66 = v92;
            double v80 = v90 + 16;
            *uint64_t v79 = v90 + 16;
            void *v67 = &v89[16 * v88];
            if (!v84) {
              goto LABEL_85;
            }
LABEL_100:
            operator delete(v84);
            unint64_t v58 = v116;
            goto LABEL_85;
          }
          *(void *)int v66 = v90;
          double v80 = v90 + 16;
          *uint64_t v79 = v90 + 16;
          void *v67 = &v89[16 * v88];
          if (v84) {
            goto LABEL_100;
          }
        }
LABEL_85:
        *uint64_t v79 = v80;
        if (++v77 == v82) {
          goto LABEL_69;
        }
      }
    }
LABEL_101:
    CoreHandwriting::InkMapping::composeWith(v111, (const CoreHandwriting::InkMapping *)&__p, &v117);
    uint64_t v93 = *(char **)v111;
    if (*(void *)v111)
    {
      long long v94 = (char *)*((void *)v111 + 1);
      uint64_t v95 = *(char **)v111;
      if (v94 != v93)
      {
        unint64_t v96 = (char *)*((void *)v111 + 1);
        do
        {
          uint64_t v98 = (void *)*((void *)v96 - 3);
          v96 -= 24;
          int v97 = v98;
          if (v98)
          {
            *((void *)v94 - 2) = v97;
            operator delete(v97);
          }
          long long v94 = v96;
        }
        while (v96 != v93);
        uint64_t v95 = *(char **)v111;
      }
      *((void *)v111 + 1) = v93;
      operator delete(v95);
      *(void *)uint64_t v111 = 0;
      *((void *)v111 + 1) = 0;
      *((void *)v111 + 2) = 0;
    }
    *(_OWORD *)uint64_t v111 = v117;
    uint64_t v99 = (char *)__p;
    *((void *)v111 + 2) = v118;
    if (v99)
    {
      uint64_t v100 = v120;
      unint64_t v101 = v99;
      if (v120 != v99)
      {
        uint64_t v102 = v120;
        do
        {
          float v104 = (void *)*((void *)v102 - 3);
          v102 -= 24;
          unint64_t v103 = v104;
          if (v104)
          {
            *((void *)v100 - 2) = v103;
            operator delete(v103);
          }
          uint64_t v100 = v102;
        }
        while (v102 != v99);
        unint64_t v101 = __p;
      }
      long long v120 = v99;
      operator delete(v101);
    }
  }
  float v105 = (char *)v122;
  if (v122)
  {
    float v106 = v123;
    float v107 = v122;
    if (v123 != v122)
    {
      float v108 = v123;
      do
      {
        long long v110 = (void *)*((void *)v108 - 3);
        v108 -= 24;
        unint64_t v109 = v110;
        if (v110)
        {
          *((void *)v106 - 2) = v109;
          operator delete(v109);
        }
        float v106 = v108;
      }
      while (v108 != v105);
      float v107 = v122;
    }
    unint64_t v123 = v105;
    operator delete(v107);
  }
  if (v125)
  {
    uint64_t v126 = (uint64_t)v125;
    operator delete(v125);
  }
  if (v128) {
    operator delete(v128);
  }
}

void sub_1C4A33F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

void sub_1C4A3401C(uint64_t a1, unint64_t a2)
{
  unsigned int v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_1C4A38810();
    }
    unint64_t v4 = *(char **)(a1 + 8);
    uint64_t v5 = 24 * a2;
    float64x2_t v6 = (char *)operator new(24 * a2);
    uint64_t v7 = &v6[v5];
    unint64_t v8 = &v6[24 * ((v4 - v2) / 24)];
    if (v4 == v2)
    {
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
    }
    else
    {
      unint64_t v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        long long v10 = *(_OWORD *)(v4 - 24);
        v4 -= 24;
        *(_OWORD *)(v9 - 24) = v10;
        v9 -= 24;
        *((void *)v9 + 2) = *((void *)v4 + 2);
        *(void *)unint64_t v4 = 0;
        *((void *)v4 + 1) = 0;
        *((void *)v4 + 2) = 0;
      }
      while (v4 != v2);
      unsigned int v2 = *(char **)a1;
      uint64_t v11 = *(char **)(a1 + 8);
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
      if (v11 != v2)
      {
        unint64_t v12 = v11;
        do
        {
          uint64_t v14 = (void *)*((void *)v12 - 3);
          v12 -= 24;
          uint64_t v13 = v14;
          if (v14)
          {
            *((void *)v11 - 2) = v13;
            operator delete(v13);
          }
          uint64_t v11 = v12;
        }
        while (v12 != v2);
      }
    }
    if (v2)
    {
      operator delete(v2);
    }
  }
}

void CoreHandwriting::RightToLeftByHorizontalOverlapReordering::processInplace(CoreHandwriting::RightToLeftByHorizontalOverlapReordering *this, uint64_t **a2, CoreHandwriting::InkMapping *a3, int64x2_t a4)
{
  uint64_t v5 = *a2;
  float64x2_t v6 = a2[1];
  uint64_t v118 = 0;
  long long v119 = 0;
  long long v117 = 0;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 - v5);
  if (v6 == v5)
  {
    unint64_t v9 = 0;
    long long v10 = 0;
    goto LABEL_10;
  }
  if (v7 >> 61) {
    sub_1C494A220();
  }
  size_t v8 = 0x5555555555555558 * (v6 - v5);
  unint64_t v9 = (int64x2_t *)operator new(v8);
  long long v117 = v9;
  long long v119 = &v9->i64[v8 / 8];
  bzero(v9, v8);
  long long v10 = &v9->i8[v8];
  uint64_t v118 = &v9->i64[v8 / 8];
  if (v8 - 8 < 0x18)
  {
    uint64_t v11 = 0;
    unint64_t v12 = (char *)v9;
    do
    {
LABEL_9:
      *(void *)unint64_t v12 = v11;
      v12 += 8;
      ++v11;
    }
    while (v12 != v10);
    goto LABEL_10;
  }
  unint64_t v13 = ((v8 - 8) >> 3) + 1;
  uint64_t v11 = v13 & 0x3FFFFFFFFFFFFFFCLL;
  unint64_t v12 = &v9->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
  a4 = (int64x2_t)xmmword_1C4C39B30;
  uint64_t v14 = v9 + 1;
  int64x2_t v15 = vdupq_n_s64(2uLL);
  int64x2_t v16 = vdupq_n_s64(4uLL);
  uint64_t v17 = v13 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v14[-1] = a4;
    *uint64_t v14 = vaddq_s64(a4, v15);
    a4 = vaddq_s64(a4, v16);
    v14 += 2;
    v17 -= 4;
  }
  while (v17);
  if (v13 != v11) {
    goto LABEL_9;
  }
LABEL_10:
  unint64_t v114 = 0;
  uint64_t v115 = 0;
  unint64_t v116 = 0;
  if (v6 == v5)
  {
    uint64_t v102 = (CoreHandwriting::Ink *)a2;
    float v104 = v5;
    goto LABEL_49;
  }
  if (v7 >> 59) {
    sub_1C4A38810();
  }
  int64x2_t v18 = (double *)operator new(0x5555555555555560 * (v6 - v5));
  int64x2_t v19 = v18;
  uint64_t v20 = &v18[0xAAAAAAAAAAAAAACLL * (v6 - v5)];
  unint64_t v114 = v18;
  uint64_t v115 = v18;
  unint64_t v116 = v20;
  uint64_t v102 = (CoreHandwriting::Ink *)a2;
  float v104 = v5;
  if (v6 != v5)
  {
    uint64_t v21 = v18;
    for (uint64_t i = v104; i != v6; i += 3)
    {
      while (1)
      {
        uint64_t v23 = *i;
        uint64_t v24 = i[1];
        if (*i != v24) {
          break;
        }
        double v25 = 1.79769313e308;
        double v26 = -1.79769313e308;
        double v27 = -1.79769313e308;
        double v28 = 1.79769313e308;
        if (v19 >= v20) {
          goto LABEL_31;
        }
LABEL_16:
        *int64x2_t v19 = v28;
        v19[1] = v27;
        v19[2] = v25;
        v19[3] = v26;
        v19 += 4;
        uint64_t v115 = v19;
        i += 3;
        if (i == v6) {
          goto LABEL_49;
        }
      }
      double v25 = 1.79769313e308;
      double v26 = -1.79769313e308;
      double v27 = -1.79769313e308;
      double v28 = 1.79769313e308;
      do
      {
        a4.i64[0] = *(void *)v23;
        double v29 = *(double *)(v23 + 8);
        v23 += 32;
        if (v28 > *(double *)a4.i64) {
          double v28 = *(double *)a4.i64;
        }
        if (v27 < *(double *)a4.i64) {
          double v27 = *(double *)a4.i64;
        }
        if (v25 > v29) {
          double v25 = v29;
        }
        if (v26 < v29) {
          double v26 = v29;
        }
      }
      while (v23 != v24);
      if (v19 < v20) {
        goto LABEL_16;
      }
LABEL_31:
      uint64_t v30 = ((char *)v19 - (char *)v21) >> 5;
      unint64_t v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 59) {
        sub_1C4A38810();
      }
      if (((char *)v20 - (char *)v21) >> 4 > v31) {
        unint64_t v31 = ((char *)v20 - (char *)v21) >> 4;
      }
      if ((unint64_t)((char *)v20 - (char *)v21) >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v32 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v32 = v31;
      }
      if (v32)
      {
        if (v32 >> 59) {
          sub_1C4949AA8();
        }
        double v33 = (char *)operator new(32 * v32);
        uint64_t v34 = (double *)&v33[32 * v30];
        double *v34 = v28;
        v34[1] = v27;
        v34[2] = v25;
        v34[3] = v26;
        if (v19 == v21)
        {
LABEL_47:
          unint64_t v37 = v34;
          uint64_t v20 = (double *)&v33[32 * v32];
          int64x2_t v19 = v34 + 4;
          unint64_t v114 = v34;
          unint64_t v116 = v20;
          if (!v21) {
            goto LABEL_44;
          }
          goto LABEL_43;
        }
      }
      else
      {
        double v33 = 0;
        uint64_t v34 = (double *)(32 * v30);
        double *v34 = v28;
        v34[1] = v27;
        v34[2] = v25;
        v34[3] = v26;
        if (v19 == v21) {
          goto LABEL_47;
        }
      }
      unint64_t v35 = v34;
      do
      {
        a4 = *(int64x2_t *)(v19 - 4);
        long long v36 = *((_OWORD *)v19 - 1);
        unint64_t v37 = v35 - 4;
        *((int64x2_t *)v35 - 2) = a4;
        *((_OWORD *)v35 - 1) = v36;
        v19 -= 4;
        v35 -= 4;
      }
      while (v19 != v21);
      uint64_t v20 = (double *)&v33[32 * v32];
      int64x2_t v19 = v34 + 4;
      unint64_t v114 = v37;
      unint64_t v116 = v20;
      if (!v21) {
        goto LABEL_44;
      }
LABEL_43:
      operator delete(v21);
LABEL_44:
      uint64_t v21 = v37;
      uint64_t v115 = v19;
    }
  }
LABEL_49:
  uint64_t v111 = &v114;
  if (v10 - (char *)v9 < 1025)
  {
LABEL_53:
    sub_1C4A39CF0(v9->i8, v10, (uint64_t **)&v111, (v10 - (char *)v9) >> 3, 0, 0, (__n128)a4);
  }
  else
  {
    uint64_t v38 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v39 = (v10 - (char *)v9) >> 3;
    while (1)
    {
      int64_t v40 = (char *)operator new(8 * v39, v38);
      if (v40) {
        break;
      }
      BOOL v41 = v39 > 1;
      v39 >>= 1;
      if (!v41) {
        goto LABEL_53;
      }
    }
    uint64_t v42 = v40;
    sub_1C4A39CF0(v9->i8, v10, (uint64_t **)&v111, (v10 - (char *)v9) >> 3, v40, v39, (__n128)a4);
    operator delete(v42);
  }
  uint64_t v111 = 0;
  uint64_t v112 = 0;
  unint64_t v113 = 0;
  sub_1C4A3401C((uint64_t)&v111, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v102 + 1) - *(void *)v102) >> 3));
  if (v6 != v104)
  {
    uint64_t v43 = v112;
    do
    {
      uint64_t v44 = v9->i64[0];
      uint64_t v45 = *(char **)v102;
      uint64_t v46 = *(void *)v102 + 24 * v9->i64[0];
      if ((unint64_t)v43 < v113)
      {
        *(void *)uint64_t v43 = 0;
        *((void *)v43 + 1) = 0;
        *((void *)v43 + 2) = 0;
        *(_OWORD *)uint64_t v43 = *(_OWORD *)v46;
        *((void *)v43 + 2) = *(void *)&v45[24 * v44 + 16];
        *(void *)uint64_t v46 = 0;
        *(void *)(v46 + 8) = 0;
        *(void *)(v46 + 16) = 0;
        v43 += 24;
      }
      else
      {
        uint64_t v43 = sub_1C4A397D8((char **)&v111, v46);
      }
      uint64_t v112 = v43;
      unint64_t v9 = (int64x2_t *)((char *)v9 + 8);
    }
    while (v9 != (int64x2_t *)v10);
  }
  if (&v111 != (void **)v102) {
    sub_1C4A39928((uint64_t)v102, (char **)v111, (uint64_t)v112, 0xAAAAAAAAAAAAAAABLL * ((v112 - (unsigned char *)v111) >> 3));
  }
  if (a3)
  {
    long long __p = 0;
    unint64_t v109 = 0;
    uint64_t v110 = 0;
    float64x2_t v47 = *(char **)v102;
    if (*((void *)v102 + 1) != *(void *)v102)
    {
      unint64_t v48 = 0;
      while (1)
      {
        uint64_t v49 = &v47[24 * v48];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        unint64_t v103 = v48 + 1;
        unint64_t v105 = v48;
        uint64_t v52 = (char *)__p;
        unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((v109 - (unsigned char *)__p) >> 3);
        if (v53 <= v48)
        {
          sub_1C4B1C684((uint64_t)&__p, v103 - v53);
          uint64_t v52 = (char *)__p;
          unint64_t v48 = v105;
        }
        unint64_t v54 = v50 - v51;
        unint64_t v55 = (v50 - v51) >> 5;
        uint64_t v56 = &v52[24 * v48];
        uint64_t v57 = v56 + 16;
        unint64_t v58 = *(char **)v56;
        if (v55 > (uint64_t)(*((void *)v56 + 2) - *(void *)v56) >> 4)
        {
          if ((v54 & 0x8000000000000000) != 0) {
            sub_1C4A38810();
          }
          unint64_t v59 = &v52[24 * v48];
          uint64_t v62 = (char *)*((void *)v59 + 1);
          uint64_t v60 = (char **)(v59 + 8);
          uint64_t v61 = v62;
          unint64_t v63 = (char *)operator new(v54 >> 1);
          unint64_t v64 = &v63[(v62 - v58) & 0xFFFFFFFFFFFFFFF0];
          unint64_t v65 = v64;
          if (v62 != v58)
          {
            int v66 = &v63[(v61 - v58) & 0xFFFFFFFFFFFFFFF0];
            do
            {
              unint64_t v65 = v66 - 16;
              *((_OWORD *)v66 - 1) = *((_OWORD *)v61 - 1);
              v61 -= 16;
              v66 -= 16;
            }
            while (v61 != v58);
          }
          *(void *)uint64_t v56 = v65;
          *uint64_t v60 = v64;
          void *v57 = &v63[16 * v55];
          unint64_t v48 = v105;
          if (v58)
          {
            operator delete(v58);
            unint64_t v48 = v105;
          }
        }
        if (v50 != v51) {
          break;
        }
LABEL_66:
        float64x2_t v47 = *(char **)v102;
        unint64_t v48 = v103;
        if (v103 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v102 + 1) - *(void *)v102) >> 3)) {
          goto LABEL_98;
        }
      }
      uint64_t v67 = 0;
      id v68 = &v52[24 * v48];
      int v71 = (char *)*((void *)v68 + 1);
      uint64_t v69 = (char **)(v68 + 8);
      int v70 = v71;
      if (v55 <= 1) {
        uint64_t v72 = 1;
      }
      else {
        uint64_t v72 = v55;
      }
      double v73 = v117;
      while (1)
      {
        if ((unint64_t)v70 < *v57)
        {
          *(void *)int v70 = v73[v48];
          *((void *)v70 + 1) = v67;
          v70 += 16;
        }
        else
        {
          double v74 = *(char **)v56;
          uint64_t v75 = (uint64_t)&v70[-*(void *)v56] >> 4;
          unint64_t v76 = v75 + 1;
          if ((unint64_t)(v75 + 1) >> 60) {
            sub_1C4A38810();
          }
          uint64_t v77 = *v57 - (void)v74;
          if (v77 >> 3 > v76) {
            unint64_t v76 = v77 >> 3;
          }
          if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v78 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v78 = v76;
          }
          if (v78 >> 60) {
            sub_1C4949AA8();
          }
          uint64_t v79 = (char *)operator new(16 * v78);
          unint64_t v48 = v105;
          double v80 = &v79[16 * v75];
          *(void *)double v80 = v73[v105];
          *((void *)v80 + 1) = v67;
          if (v70 != v74)
          {
            int v81 = &v79[16 * v75];
            do
            {
              uint64_t v82 = v81 - 16;
              *((_OWORD *)v81 - 1) = *((_OWORD *)v70 - 1);
              v70 -= 16;
              v81 -= 16;
            }
            while (v70 != v74);
            *(void *)uint64_t v56 = v82;
            int v70 = v80 + 16;
            *uint64_t v69 = v80 + 16;
            void *v57 = &v79[16 * v78];
            if (!v74) {
              goto LABEL_82;
            }
LABEL_97:
            operator delete(v74);
            unint64_t v48 = v105;
            goto LABEL_82;
          }
          *(void *)uint64_t v56 = v80;
          int v70 = v80 + 16;
          *uint64_t v69 = v80 + 16;
          void *v57 = &v79[16 * v78];
          if (v74) {
            goto LABEL_97;
          }
        }
LABEL_82:
        *uint64_t v69 = v70;
        if (++v67 == v72) {
          goto LABEL_66;
        }
      }
    }
LABEL_98:
    CoreHandwriting::InkMapping::composeWith(a3, (const CoreHandwriting::InkMapping *)&__p, &v106);
    uint64_t v83 = *(void *)a3;
    if (*(void *)a3)
    {
      uint64_t v84 = *((void *)a3 + 1);
      uint64_t v85 = *(void **)a3;
      if (v84 != v83)
      {
        uint64_t v86 = *((void *)a3 + 1);
        do
        {
          unint64_t v88 = *(void **)(v86 - 24);
          v86 -= 24;
          uint64_t v87 = v88;
          if (v88)
          {
            *(void *)(v84 - 16) = v87;
            operator delete(v87);
          }
          uint64_t v84 = v86;
        }
        while (v86 != v83);
        uint64_t v85 = *(void **)a3;
      }
      *((void *)a3 + 1) = v83;
      operator delete(v85);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      *((void *)a3 + 2) = 0;
    }
    *(_OWORD *)a3 = v106;
    uint64_t v89 = (char *)__p;
    *((void *)a3 + 2) = v107;
    if (v89)
    {
      unint64_t v90 = v109;
      uint64_t v91 = v89;
      if (v109 != v89)
      {
        uint64_t v92 = v109;
        do
        {
          long long v94 = (void *)*((void *)v92 - 3);
          v92 -= 24;
          uint64_t v93 = v94;
          if (v94)
          {
            *((void *)v90 - 2) = v93;
            operator delete(v93);
          }
          unint64_t v90 = v92;
        }
        while (v92 != v89);
        uint64_t v91 = __p;
      }
      unint64_t v109 = v89;
      operator delete(v91);
    }
  }
  uint64_t v95 = (char *)v111;
  if (v111)
  {
    unint64_t v96 = v112;
    int v97 = v111;
    if (v112 != v111)
    {
      uint64_t v98 = v112;
      do
      {
        uint64_t v100 = (void *)*((void *)v98 - 3);
        v98 -= 24;
        uint64_t v99 = v100;
        if (v100)
        {
          *((void *)v96 - 2) = v99;
          operator delete(v99);
        }
        unint64_t v96 = v98;
      }
      while (v98 != v95);
      int v97 = v111;
    }
    uint64_t v112 = v95;
    operator delete(v97);
  }
  if (v114)
  {
    uint64_t v115 = v114;
    operator delete(v114);
  }
  if (v117) {
    operator delete(v117);
  }
}

void sub_1C4A34984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

void CoreHandwriting::LegacyStrokePadding::processInplace(CoreHandwriting::LegacyStrokePadding *this, char ***a2, CoreHandwriting::InkMapping *a3)
{
  unint64_t v4 = *a2;
  id v3 = a2[1];
  if (*a2 != v3 - 3)
  {
    LODWORD(v6) = *((_DWORD *)this + 2);
    do
    {
      unint64_t v7 = *v4;
      size_t v8 = v4[1];
      BOOL v10 = v4 == *a2;
      uint64_t v9 = v8 - *v4;
      uint64_t v11 = v9 >> 5;
      if (v4 == *a2) {
        unint64_t v12 = v11 + 1;
      }
      else {
        unint64_t v12 = v9 >> 5;
      }
      if (v12 % (int)v6)
      {
        do
        {
          unint64_t v13 = (unint64_t)v4[2];
          if ((unint64_t)v8 < v13)
          {
            *((void *)v8 + 2) = 0;
            *(_OWORD *)size_t v8 = 0uLL;
            v8[24] = 1;
            v8 += 32;
          }
          else
          {
            unint64_t v14 = v11 + 1;
            if ((unint64_t)(v11 + 1) >> 59) {
              sub_1C4A38810();
            }
            uint64_t v15 = v13 - (void)v7;
            if (v15 >> 4 > v14) {
              unint64_t v14 = v15 >> 4;
            }
            if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v16 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v16 = v14;
            }
            if (v16)
            {
              if (v16 >> 59) {
                sub_1C4949AA8();
              }
              uint64_t v17 = (char *)operator new(32 * v16);
            }
            else
            {
              uint64_t v17 = 0;
            }
            int64x2_t v18 = &v17[32 * v11];
            *(_OWORD *)int64x2_t v18 = 0uLL;
            *((void *)v18 + 2) = 0;
            v18[24] = 1;
            int64x2_t v19 = v18;
            if (v8 != v7)
            {
              do
              {
                long long v20 = *((_OWORD *)v8 - 2);
                *(_OWORD *)(v19 - 23) = *(_OWORD *)(v8 - 23);
                *((_OWORD *)v19 - 2) = v20;
                v19 -= 32;
                v8 -= 32;
              }
              while (v8 != v7);
              unint64_t v7 = *v4;
            }
            size_t v8 = v18 + 32;
            *unint64_t v4 = v19;
            v4[1] = v18 + 32;
            v4[2] = &v17[32 * v16];
            if (v7) {
              operator delete(v7);
            }
          }
          v4[1] = v8;
          unint64_t v7 = *v4;
          uint64_t v11 = (v8 - *v4) >> 5;
          unint64_t v6 = *((int *)this + 2);
        }
        while ((v11 + v10) % v6);
        id v3 = a2[1];
      }
      v4 += 3;
    }
    while (v4 != v3 - 3);
  }
}

void CoreHandwriting::SimpleStrokePadding::processInplace(CoreHandwriting::SimpleStrokePadding *this, char ***a2, CoreHandwriting::InkMapping *a3)
{
  unint64_t v4 = *a2;
  id v3 = a2[1];
  if (*a2 != v3)
  {
    LODWORD(v7) = *((_DWORD *)this + 2);
    do
    {
      size_t v8 = *v4;
      uint64_t v9 = v4[1];
      unint64_t v10 = (v9 - *v4) >> 5;
      if (v10 % (int)v7)
      {
        do
        {
          unint64_t v11 = (unint64_t)v4[2];
          if ((unint64_t)v9 < v11)
          {
            *((void *)v9 + 2) = 0;
            *(_OWORD *)uint64_t v9 = 0uLL;
            v9[24] = 1;
            v9 += 32;
          }
          else
          {
            unint64_t v12 = v10 + 1;
            if ((v10 + 1) >> 59) {
              sub_1C4A38810();
            }
            uint64_t v13 = v11 - (void)v8;
            if (v13 >> 4 > v12) {
              unint64_t v12 = v13 >> 4;
            }
            if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v14 = v12;
            }
            if (v14)
            {
              if (v14 >> 59) {
                sub_1C4949AA8();
              }
              uint64_t v15 = (char *)operator new(32 * v14);
            }
            else
            {
              uint64_t v15 = 0;
            }
            unint64_t v16 = &v15[32 * v10];
            *(_OWORD *)unint64_t v16 = 0uLL;
            *((void *)v16 + 2) = 0;
            v16[24] = 1;
            uint64_t v17 = v16;
            if (v9 != v8)
            {
              do
              {
                long long v18 = *((_OWORD *)v9 - 2);
                *(_OWORD *)(v17 - 23) = *(_OWORD *)(v9 - 23);
                *((_OWORD *)v17 - 2) = v18;
                v17 -= 32;
                v9 -= 32;
              }
              while (v9 != v8);
              size_t v8 = *v4;
            }
            uint64_t v9 = v16 + 32;
            *unint64_t v4 = v17;
            v4[1] = v16 + 32;
            v4[2] = &v15[32 * v14];
            if (v8) {
              operator delete(v8);
            }
          }
          v4[1] = v9;
          size_t v8 = *v4;
          unint64_t v10 = (v9 - *v4) >> 5;
          unint64_t v7 = *((int *)this + 2);
        }
        while (v10 % v7);
        id v3 = a2[1];
      }
      v4 += 3;
    }
    while (v4 != v3);
  }
}

void CoreHandwriting::InkPadding::processInplace(CoreHandwriting::InkPadding *this, CoreHandwriting::Ink *a2, CoreHandwriting::InkMapping *a3)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 == v4)
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v5 = v4 - v3 - 24;
    if (v5 >= 0x60)
    {
      unint64_t v7 = v5 / 0x18 + 1;
      uint64_t v8 = v7 & 3;
      if ((v7 & 3) == 0) {
        uint64_t v8 = 4;
      }
      unint64_t v9 = v7 - v8;
      uint64_t v10 = v3 + 24 * v9;
      int64x2_t v11 = 0uLL;
      int64x2_t v12 = 0uLL;
      do
      {
        uint64_t v13 = v3 + 96;
        float64x2x3_t v34 = vld3q_f64((const double *)v3);
        unint64_t v14 = (const double *)(v3 + 48);
        int64x2_t v11 = vsraq_n_s64(v11, vsubq_s64((int64x2_t)v34.val[1], (int64x2_t)v34.val[0]), 5uLL);
        float64x2x3_t v35 = vld3q_f64(v14);
        int64x2_t v12 = vsraq_n_s64(v12, vsubq_s64((int64x2_t)v35.val[1], (int64x2_t)v35.val[0]), 5uLL);
        uint64_t v3 = v13;
        v9 -= 4;
      }
      while (v9);
      unint64_t v6 = vaddvq_s64(vaddq_s64(v12, v11));
      uint64_t v3 = v10;
    }
    else
    {
      unint64_t v6 = 0;
    }
    do
    {
      double v15 = *(double *)v3;
      uint64_t v16 = *(void *)(v3 + 8);
      v3 += 24;
      v6 += (v16 - *(void *)&v15) >> 5;
    }
    while (v3 != v4);
  }
  unint64_t v17 = *((int *)this + 2);
  int v18 = v6 % v17;
  if (v18)
  {
    int v19 = v17 - v18;
    if ((int)v17 - v18 >= 1)
    {
      int v20 = 0;
      uint64_t v21 = (void **)(v4 - 24);
      uint64_t v22 = *(char **)(v4 - 16);
      do
      {
        unint64_t v24 = *(void *)(v4 - 8);
        if ((unint64_t)v22 < v24)
        {
          *((void *)v22 + 2) = 0;
          *(_OWORD *)uint64_t v22 = 0uLL;
          v22[24] = 1;
          uint64_t v23 = v22 + 32;
        }
        else
        {
          double v25 = (char *)*v21;
          uint64_t v26 = (v22 - (unsigned char *)*v21) >> 5;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 59) {
            sub_1C4A38810();
          }
          uint64_t v28 = v24 - (void)v25;
          if (v28 >> 4 > v27) {
            unint64_t v27 = v28 >> 4;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v29 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v27;
          }
          if (v29)
          {
            if (v29 >> 59) {
              sub_1C4949AA8();
            }
            uint64_t v30 = (char *)operator new(32 * v29);
          }
          else
          {
            uint64_t v30 = 0;
          }
          unint64_t v31 = &v30[32 * v26];
          *(_OWORD *)unint64_t v31 = 0uLL;
          *((void *)v31 + 2) = 0;
          v31[24] = 1;
          unint64_t v32 = v31;
          if (v22 != v25)
          {
            do
            {
              long long v33 = *((_OWORD *)v22 - 2);
              *(_OWORD *)(v32 - 23) = *(_OWORD *)(v22 - 23);
              *((_OWORD *)v32 - 2) = v33;
              v32 -= 32;
              v22 -= 32;
            }
            while (v22 != v25);
            uint64_t v22 = (char *)*v21;
          }
          uint64_t v23 = v31 + 32;
          *(void *)(v4 - 24) = v32;
          *(void *)(v4 - 16) = v31 + 32;
          *(void *)(v4 - 8) = &v30[32 * v29];
          if (v22) {
            operator delete(v22);
          }
        }
        *(void *)(v4 - 16) = v23;
        ++v20;
        uint64_t v22 = v23;
      }
      while (v20 < v19);
    }
  }
}

uint64_t CoreHandwriting::AnchorClipping::processInplace(uint64_t result, uint64_t a2)
{
  double v2 = *(double *)(result + 8);
  double v3 = -v2;
  double v4 = *(double *)(a2 + 48);
  double v5 = *(double *)(a2 + 56);
  if (v2 >= v4) {
    double v2 = *(double *)(a2 + 48);
  }
  if (v4 < v3) {
    double v2 = v3;
  }
  *(double *)(a2 + 48) = v2;
  double v6 = *(double *)(result + 8);
  if (v6 >= v5) {
    double v6 = v5;
  }
  if (v5 < v3) {
    double v6 = v3;
  }
  *(double *)(a2 + 56) = v6;
  return result;
}

void CoreHandwriting::SpatialResampling::processInplace(CoreHandwriting::SpatialResampling *this, CoreHandwriting::Ink *a2, CoreHandwriting::InkMapping *a3)
{
  long long __p = 0;
  long long v33 = 0;
  uint64_t v34 = 0;
  unint64_t v31 = 0;
  uint64_t v4 = *(void *)a2;
  if (*(void *)a2 == *((void *)a2 + 1))
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = 1;
    do
    {
      uint64_t v11 = v4 + v7;
      if (*(void *)(v4 + v7) != *(void *)(v4 + v7 + 8))
      {
        if (a3) {
          operator new();
        }
        sub_1C4A32DD0((double **)&v29, (char **)(v4 + v7), *((_DWORD *)this + 5), *((_DWORD *)this + 4), v9, v10 - 1, *((double *)this + 1));
        int64x2_t v12 = *(void **)v11;
        if (*(void *)v11)
        {
          *(void *)(v11 + 8) = v12;
          operator delete(v12);
          *(void *)uint64_t v11 = 0;
          *(void *)(v11 + 8) = 0;
          *(void *)(v11 + 16) = 0;
        }
        uint64_t v13 = v4 + v7;
        *(_OWORD *)uint64_t v13 = v29;
        *(void *)(v13 + 16) = v30;
        uint64_t v8 = v31;
        if (v31)
        {
          unint64_t v14 = (char *)__p;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v33 - (unsigned char *)__p) >> 3);
          if (v15 < v10)
          {
            sub_1C4B1C684((uint64_t)&__p, v10 - v15);
            unint64_t v14 = (char *)__p;
          }
          if (&v14[v7] != (char *)v8) {
            sub_1C4A3AF58((uint64_t)&v14[v7], *v8, v8[1], (v8[1] - *v8) >> 4);
          }
          uint64_t v9 = (uint64_t)v8;
        }
        else
        {
          uint64_t v9 = 0;
        }
      }
      v7 += 24;
      ++v10;
    }
    while (v4 + v7 != *((void *)a2 + 1));
  }
  if (a3)
  {
    CoreHandwriting::InkMapping::composeWith((CoreHandwriting::InkMapping *)&__p, a3, &v29);
    uint64_t v16 = *(void *)a3;
    if (*(void *)a3)
    {
      uint64_t v17 = *((void *)a3 + 1);
      int v18 = *(void **)a3;
      if (v17 != v16)
      {
        uint64_t v19 = *((void *)a3 + 1);
        do
        {
          uint64_t v21 = *(void **)(v19 - 24);
          v19 -= 24;
          int v20 = v21;
          if (v21)
          {
            *(void *)(v17 - 16) = v20;
            operator delete(v20);
          }
          uint64_t v17 = v19;
        }
        while (v19 != v16);
        int v18 = *(void **)a3;
      }
      *((void *)a3 + 1) = v16;
      operator delete(v18);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      *((void *)a3 + 2) = 0;
    }
    *(_OWORD *)a3 = v29;
    *((void *)a3 + 2) = v30;
  }
  unint64_t v31 = 0;
  if (v8)
  {
    uint64_t v22 = *v8;
    if (*v8)
    {
      v8[1] = v22;
      operator delete(v22);
    }
    MEMORY[0x1C8786460](v8, 0x20C40960023A9);
  }
  uint64_t v23 = (char *)__p;
  if (__p)
  {
    unint64_t v24 = v33;
    double v25 = __p;
    if (v33 != __p)
    {
      uint64_t v26 = v33;
      do
      {
        uint64_t v28 = (void *)*((void *)v26 - 3);
        v26 -= 24;
        unint64_t v27 = v28;
        if (v28)
        {
          *((void *)v24 - 2) = v27;
          operator delete(v27);
        }
        unint64_t v24 = v26;
      }
      while (v26 != v23);
      double v25 = __p;
    }
    long long v33 = v23;
    operator delete(v25);
  }
}

void sub_1C4A3527C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  sub_1C4A352A0((uint64_t *)va);
  sub_1C496B66C((void **)va1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1C4A352A0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    double v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x1C8786460](v2, 0x20C40960023A9);
  }
  return a1;
}

double CoreHandwriting::RescaleByAverageCharacterHeight::estimateAverageCharacterHeight(CoreHandwriting::RescaleByAverageCharacterHeight *this, uint64_t **a2)
{
  double v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2 == *a2) {
    return 0.0;
  }
  if ((0xAAAAAAAAAAAAAAABLL * (v2 - *a2)) >> 59) {
    sub_1C4A38810();
  }
  size_t v5 = 0xAAAAAAAAAAAAAACLL * (v2 - *a2);
  uint64_t v6 = (double *)operator new(v5 * 8);
  uint64_t v8 = &v6[v5];
  uint64_t v9 = (__n128 *)v6;
  do
  {
    uint64_t v10 = *v3;
    uint64_t v11 = v3[1];
    if (*v3 == v11) {
      goto LABEL_5;
    }
    double v12 = 1.79769313e308;
    double v13 = -1.79769313e308;
    double v14 = -1.79769313e308;
    double v15 = 1.79769313e308;
    do
    {
      v7.n128_u64[0] = *(void *)v10;
      double v16 = *(double *)(v10 + 8);
      v10 += 32;
      if (v15 > v7.n128_f64[0]) {
        double v15 = v7.n128_f64[0];
      }
      if (v14 < v7.n128_f64[0]) {
        double v14 = v7.n128_f64[0];
      }
      if (v12 > v16) {
        double v12 = v16;
      }
      if (v13 < v16) {
        double v13 = v16;
      }
    }
    while (v10 != v11);
    if (v9 < (__n128 *)v8)
    {
      v9->n128_f64[0] = v15;
      v9->n128_f64[1] = v14;
      v9[1].n128_f64[0] = v12;
      v9[1].n128_f64[1] = v13;
      v9 += 2;
      goto LABEL_5;
    }
    uint64_t v17 = ((char *)v9 - (char *)v6) >> 5;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 59) {
      sub_1C4A38810();
    }
    if (((char *)v8 - (char *)v6) >> 4 > v18) {
      unint64_t v18 = ((char *)v8 - (char *)v6) >> 4;
    }
    if ((unint64_t)((char *)v8 - (char *)v6) >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v19 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v18;
    }
    if (v19)
    {
      if (v19 >> 59) {
        sub_1C4949AA8();
      }
      int v20 = (char *)operator new(32 * v19);
      uint64_t v21 = (double *)&v20[32 * v17];
      *uint64_t v21 = v15;
      v21[1] = v14;
      v21[2] = v12;
      v21[3] = v13;
      if (v9 == (__n128 *)v6)
      {
LABEL_33:
        unint64_t v24 = v21;
        uint64_t v8 = (double *)&v20[32 * v19];
        uint64_t v9 = (__n128 *)(v21 + 4);
        if (!v6) {
          goto LABEL_31;
        }
        goto LABEL_30;
      }
    }
    else
    {
      int v20 = 0;
      uint64_t v21 = (double *)(32 * v17);
      *uint64_t v21 = v15;
      v21[1] = v14;
      v21[2] = v12;
      v21[3] = v13;
      if (v9 == (__n128 *)v6) {
        goto LABEL_33;
      }
    }
    uint64_t v22 = v21;
    do
    {
      __n128 v7 = v9[-2];
      __n128 v23 = v9[-1];
      unint64_t v24 = v22 - 4;
      *((__n128 *)v22 - 2) = v7;
      *((__n128 *)v22 - 1) = v23;
      v9 -= 2;
      v22 -= 4;
    }
    while (v9 != (__n128 *)v6);
    uint64_t v8 = (double *)&v20[32 * v19];
    uint64_t v9 = (__n128 *)(v21 + 4);
    if (!v6) {
      goto LABEL_31;
    }
LABEL_30:
    operator delete(v6);
LABEL_31:
    uint64_t v6 = v24;
LABEL_5:
    v3 += 3;
  }
  while (v3 != v2);
  unint64_t v25 = 126 - 2 * __clz(((char *)v9 - (char *)v6) >> 5);
  if (v9 == (__n128 *)v6) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = v25;
  }
  sub_1C4A3B210((unint64_t)v6, v9, v26, 1, v7);
  double v28 = v6[2];
  double v27 = v6[3];
  long long v29 = v6 + 4;
  if (v6 + 4 == (double *)v9)
  {
    unint64_t v30 = 0;
    double v40 = v27 - v28;
    double v33 = 0.0;
LABEL_68:
    double v44 = v40 + v33;
    ++v30;
    goto LABEL_69;
  }
  unint64_t v30 = 0;
  double v31 = *((double *)this + 2) * 0.5;
  double v32 = v6[1];
  double v33 = 0.0;
  double v34 = 1.79769313e308;
  double v35 = -1.79769313e308;
  do
  {
    while (1)
    {
      double v38 = v27 - v28;
      if (*v29 - v32 < 5.0 || v38 < v31) {
        break;
      }
      double v33 = v38 + v33;
      double v32 = v29[1];
      double v36 = v29[2];
      ++v30;
      double v35 = v27;
      double v34 = v28;
      double v37 = v29[3];
      v29 += 4;
      double v27 = v37;
      double v28 = v36;
      if (v29 == (double *)v9) {
        goto LABEL_55;
      }
    }
    if (v32 < v29[1]) {
      double v32 = v29[1];
    }
    if (v28 <= v29[2]) {
      double v36 = v28;
    }
    else {
      double v36 = v29[2];
    }
    if (v27 < v29[3]) {
      double v37 = v29[3];
    }
    else {
      double v37 = v27;
    }
    v29 += 4;
    double v27 = v37;
    double v28 = v36;
  }
  while (v29 != (double *)v9);
LABEL_55:
  double v40 = v37 - v36;
  if (v37 - v36 >= v31 || v30 == 0) {
    goto LABEL_68;
  }
  if (v36 <= v34) {
    double v42 = v36;
  }
  else {
    double v42 = v34;
  }
  if (v37 >= v35) {
    double v43 = v37;
  }
  else {
    double v43 = v35;
  }
  double v44 = v43 - v42 + v33 - (v35 - v34);
LABEL_69:
  double v45 = v44 / (double)v30;
  operator delete(v6);
  return v45;
}

void sub_1C4A3561C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

float64x2_t CoreHandwriting::RescaleByAverageCharacterHeight::processInplace(CoreHandwriting::RescaleByAverageCharacterHeight *this, CoreHandwriting::Ink *a2, CoreHandwriting::InkMapping *a3)
{
  double v5 = CoreHandwriting::RescaleByAverageCharacterHeight::estimateAverageCharacterHeight(this, (uint64_t **)a2);
  if (v5 <= *((double *)this + 2)) {
    double v5 = *((double *)this + 2);
  }
  double v6 = *((double *)this + 1) / v5;
  __n128 v7 = *(uint64_t **)a2;
  uint64_t v8 = (uint64_t *)*((void *)a2 + 1);
  if (*(uint64_t **)a2 != v8)
  {
    int64x2_t v9 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    double v10 = -1.79769313e308;
    uint64_t v11 = *(uint64_t **)a2;
    float64x2_t v12 = (float64x2_t)v9;
    do
    {
      double v14 = (float64x2_t *)*v11;
      double v15 = (float64x2_t *)v11[1];
      if ((float64x2_t *)*v11 == v15) {
        goto LABEL_5;
      }
      double v13 = -1.79769313e308;
      float64x2_t v16 = (float64x2_t)v9;
      do
      {
        float64x2_t v17 = *v14;
        v14 += 2;
        float64x2_t v16 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v16, v17), (int8x16_t)v17, (int8x16_t)v16);
        double v18 = v17.f64[1];
        if (v13 < v17.f64[1]) {
          double v13 = v18;
        }
      }
      while (v14 != v15);
      float64x2_t v12 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v12, v16), (int8x16_t)v16, (int8x16_t)v12);
      if (v10 >= v13) {
LABEL_5:
      }
        double v13 = v10;
      v11 += 3;
      double v10 = v13;
    }
    while (v11 != v8);
    if (v7 != v8)
    {
      unint64_t v19 = *(uint64_t **)a2;
      do
      {
        uint64_t v20 = *v19;
        uint64_t v21 = v19[1];
        while (v20 != v21)
        {
          if (!*(unsigned char *)(v20 + 24)) {
            *(float64x2_t *)uint64_t v20 = vsubq_f64(*(float64x2_t *)v20, v12);
          }
          v20 += 32;
        }
        v19 += 3;
      }
      while (v19 != v8);
      do
      {
        uint64_t v22 = *v7;
        uint64_t v23 = v7[1];
        while (v22 != v23)
        {
          if (!*(unsigned char *)(v22 + 24)) {
            *(float64x2_t *)uint64_t v22 = vmulq_n_f64(*(float64x2_t *)v22, v6);
          }
          v22 += 32;
        }
        v7 += 3;
      }
      while (v7 != v8);
    }
  }
  float64x2_t result = vmulq_n_f64(*((float64x2_t *)a2 + 3), v6);
  *((float64x2_t *)a2 + 3) = result;
  return result;
}

void sub_1C4A35784(uint64_t a1, long long **a2, uint64_t a3, uint64_t a4)
{
  long long v80 = 0u;
  long long v81 = 0u;
  *(_OWORD *)uint64_t v79 = 0u;
  uint64_t v8 = *a2;
  __n128 v7 = a2[1];
  sub_1C4A37F5C(v79);
  uint64_t v74 = a4;
  unint64_t v9 = ((char *)a2[1] - (char *)*a2) >> 5;
  uint64_t v10 = *((void *)&v81 + 1);
  uint64_t v11 = v81;
  float64x2_t v12 = (void **)v79[1];
  double v13 = (void **)v80;
  double v14 = (void *)(*(void *)((char *)v79[1] + ((((void)v81 + *((void *)&v81 + 1)) >> 5) & 0x7FFFFFFFFFFFFF8))
                 + 16 * (v81 + BYTE8(v81)));
  *double v14 = 0;
  v14[1] = (((char *)v7 - (char *)v8) >> 5) - 1;
  uint64_t v15 = v10 + 1;
  *((void *)&v81 + 1) = v10 + 1;
  long long __p = 0;
  unint64_t v77 = 0;
  uint64_t v78 = 0;
  sub_1C49B90FC((uint64_t)&__p, v9, 1uLL);
  while (v15)
  {
    uint64_t v17 = 32 * ((char *)v13 - (char *)v12) - 1;
    if (v13 == v12) {
      uint64_t v17 = 0;
    }
    uint64_t v18 = v15 + v11;
    --v15;
    unint64_t v19 = (uint64_t *)(*(char **)((char *)v12 + (((unint64_t)(v11 + v15) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * (v11 + v15));
    unint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    *((void *)&v81 + 1) = v15;
    if ((unint64_t)(v17 - v18 + 1) >= 0x200)
    {
      operator delete(*--v13);
      *(void *)&long long v80 = v13;
    }
    uint64_t v22 = (double *)&(*a2)[2 * v20];
    uint64_t v23 = (double *)&(*a2)[2 * v21];
    unint64_t v24 = v20 + 1;
    double v25 = 0.0;
    unint64_t v26 = v20;
    if (v20 + 1 < v21)
    {
      double v27 = v22 + 5;
      unint64_t v28 = v20 + 1;
      unint64_t v26 = v20;
      do
      {
        if ((*(void *)((char *)__p + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v28))
        {
          double v29 = *(v27 - 1);
          double v30 = *v27;
          double v31 = *v22;
          double v32 = v22[1];
          double v33 = v23[1];
          BOOL v34 = *v22 == *v23 && v32 == v33;
          if (v34 && v22[2] == v23[2])
          {
            double v35 = sqrt((v32 - v30) * (v32 - v30) + (v31 - v29) * (v31 - v29));
            if (v35 > v25) {
              goto LABEL_22;
            }
          }
          else
          {
            double v35 = fabs((*v23 - v31) * (v32 - v30) - (v31 - v29) * (v33 - v32));
            if (v35 > v25)
            {
LABEL_22:
              unint64_t v26 = v28;
              double v25 = v35;
            }
          }
        }
        ++v28;
        v27 += 4;
      }
      while (v21 != v28);
    }
    double v36 = v22[1];
    double v37 = v23[1];
    BOOL v38 = *v22 == *v23 && v36 == v37;
    if (v38 && *(double *)&(*a2)[2 * v20 + 1] == *(double *)&(*a2)[2 * v21 + 1])
    {
      if (v25 <= *(double *)(a1 + 8)) {
        goto LABEL_41;
      }
    }
    else if (v25 / sqrt((v36 - v37) * (v36 - v37) + (*v22 - *v23) * (*v22 - *v23)) <= *(double *)(a1 + 8))
    {
LABEL_41:
      if (v24 < v21)
      {
        double v45 = (char *)__p;
        do
        {
          *(void *)&v45[(v24 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v24);
          ++v24;
        }
        while (v21 != v24);
      }
      continue;
    }
    if (v13 == v12) {
      uint64_t v39 = 0;
    }
    else {
      uint64_t v39 = 32 * ((char *)v13 - (char *)v12) - 1;
    }
    unint64_t v40 = v15 + v11;
    if (v39 == v15 + v11)
    {
      sub_1C4A37F5C(v79);
      float64x2_t v12 = (void **)v79[1];
      double v13 = (void **)v80;
      uint64_t v15 = *((void *)&v81 + 1);
      uint64_t v11 = v81;
      unint64_t v40 = *((void *)&v81 + 1) + v81;
    }
    BOOL v41 = (unint64_t *)(*(char **)((char *)v12 + ((v40 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v40);
    unint64_t *v41 = v20;
    v41[1] = v26;
    uint64_t v42 = v15 + 1;
    *((void *)&v81 + 1) = v15 + 1;
    if (v13 == v12) {
      uint64_t v43 = 0;
    }
    else {
      uint64_t v43 = 32 * ((char *)v13 - (char *)v12) - 1;
    }
    unint64_t v44 = v42 + v11;
    if (v43 == v42 + v11)
    {
      sub_1C4A37F5C(v79);
      float64x2_t v12 = (void **)v79[1];
      double v13 = (void **)v80;
      uint64_t v42 = *((void *)&v81 + 1);
      uint64_t v11 = v81;
      unint64_t v44 = *((void *)&v81 + 1) + v81;
    }
    float64x2_t v16 = (unint64_t *)(*(char **)((char *)v12 + ((v44 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v44);
    *float64x2_t v16 = v26;
    v16[1] = v21;
    uint64_t v15 = v42 + 1;
    *((void *)&v81 + 1) = v42 + 1;
  }
  float64x2_t v47 = *a2;
  uint64_t v46 = a2[1];
  if (*a2 != v46)
  {
    int v48 = 0;
    uint64_t v49 = __p;
    uint64_t v50 = __p;
    while (1)
    {
      if (v48 == 63)
      {
        uint64_t v49 = v50 + 1;
        int v51 = 0;
      }
      else
      {
        int v51 = v48 + 1;
      }
      if (((*v50 >> v48) & 1) == 0) {
        break;
      }
      if (v48 == 63) {
        ++v50;
      }
      v47 += 2;
      int v48 = v51;
      if (v47 == v46) {
        goto LABEL_58;
      }
    }
    if (v47 != v46)
    {
      uint64_t v52 = v47 + 2;
      if (v47 + 2 == v46)
      {
        if (v47 == v46) {
          goto LABEL_58;
        }
LABEL_87:
        a2[1] = v47;
        if (!a3) {
          goto LABEL_88;
        }
        goto LABEL_59;
      }
      do
      {
        if (v51 == 63) {
          int v55 = 0;
        }
        else {
          int v55 = v51 + 1;
        }
        if ((*v49 >> v51))
        {
          long long v56 = *v52;
          *(long long *)((char *)v47 + 9) = *(long long *)((char *)v52 + 9);
          *float64x2_t v47 = v56;
          v47 += 2;
        }
        v49 += v51 == 63;
        v52 += 2;
        int v51 = v55;
      }
      while (v52 != v46);
      if (v47 != a2[1]) {
        goto LABEL_87;
      }
    }
  }
LABEL_58:
  if (!a3) {
    goto LABEL_88;
  }
LABEL_59:
  unint64_t v53 = v77;
  if (v77)
  {
    for (unint64_t i = 0; i < v53; ++i)
    {
      if (((*(void *)((char *)__p + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0) {
        continue;
      }
      unint64_t v59 = *(void **)(a3 + 8);
      unint64_t v58 = *(void *)(a3 + 16);
      if ((unint64_t)v59 < v58)
      {
        *unint64_t v59 = v74;
        v59[1] = i;
        uint64_t v57 = v59 + 2;
      }
      else
      {
        uint64_t v60 = *(void **)a3;
        uint64_t v61 = ((uint64_t)v59 - *(void *)a3) >> 4;
        unint64_t v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 60) {
          sub_1C4A38810();
        }
        uint64_t v63 = v58 - (void)v60;
        if (v63 >> 3 > v62) {
          unint64_t v62 = v63 >> 3;
        }
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v64 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v62;
        }
        if (v64 >> 60) {
          sub_1C4949AA8();
        }
        unint64_t v65 = (char *)operator new(16 * v64);
        int v66 = &v65[16 * v61];
        *(void *)int v66 = v74;
        *((void *)v66 + 1) = i;
        if (v59 != v60)
        {
          uint64_t v67 = &v65[16 * v61];
          do
          {
            id v68 = v67 - 16;
            *((_OWORD *)v67 - 1) = *((_OWORD *)v59 - 1);
            v59 -= 2;
            v67 -= 16;
          }
          while (v59 != v60);
          uint64_t v57 = v66 + 16;
          *(void *)a3 = v68;
          *(void *)(a3 + 8) = v66 + 16;
          *(void *)(a3 + 16) = &v65[16 * v64];
          if (!v60) {
            goto LABEL_68;
          }
LABEL_85:
          operator delete(v60);
          unint64_t v53 = v77;
          goto LABEL_68;
        }
        uint64_t v57 = v66 + 16;
        *(void *)a3 = v66;
        *(void *)(a3 + 8) = v66 + 16;
        *(void *)(a3 + 16) = &v65[16 * v64];
        if (v60) {
          goto LABEL_85;
        }
      }
LABEL_68:
      *(void *)(a3 + 8) = v57;
    }
  }
LABEL_88:
  if (__p) {
    operator delete(__p);
  }
  uint64_t v69 = (void **)v79[1];
  int v70 = (void **)v80;
  unint64_t v71 = v80 - (unint64_t)v79[1];
  if ((unint64_t)v80 - (unint64_t)v79[1] >= 0x11)
  {
    do
    {
      uint64_t v72 = *v69++;
      operator delete(v72);
      v71 -= 8;
    }
    while (v71 > 0x10);
  }
  while (v69 != v70)
  {
    double v73 = *v69++;
    operator delete(v73);
  }
  if (v79[0]) {
    operator delete(v79[0]);
  }
}

void sub_1C4A35D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1C4A38638((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void CoreHandwriting::RamerDouglasPeuckerResampling::processInplace(CoreHandwriting::RamerDouglasPeuckerResampling *this, long long ***a2, CoreHandwriting::InkMapping *a3)
{
  long long __p = 0;
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v22 = 0;
  uint64_t v4 = *a2;
  if (*a2 != a2[1])
  {
    if (a3) {
      operator new();
    }
    uint64_t v7 = 0;
    do
    {
      sub_1C4A35784((uint64_t)this, v4, 0, v7++);
      v4 += 3;
    }
    while (v4 != a2[1]);
  }
  if (a3)
  {
    CoreHandwriting::InkMapping::composeWith((CoreHandwriting::InkMapping *)&__p, a3, &v20);
    uint64_t v8 = *(void *)a3;
    if (*(void *)a3)
    {
      uint64_t v9 = *((void *)a3 + 1);
      uint64_t v10 = *(void **)a3;
      if (v9 != v8)
      {
        uint64_t v11 = *((void *)a3 + 1);
        do
        {
          double v13 = *(void **)(v11 - 24);
          v11 -= 24;
          float64x2_t v12 = v13;
          if (v13)
          {
            *(void *)(v9 - 16) = v12;
            operator delete(v12);
          }
          uint64_t v9 = v11;
        }
        while (v11 != v8);
        uint64_t v10 = *(void **)a3;
      }
      *((void *)a3 + 1) = v8;
      operator delete(v10);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      *((void *)a3 + 2) = 0;
    }
    *(_OWORD *)a3 = v20;
    *((void *)a3 + 2) = v21;
  }
  double v14 = (char *)__p;
  if (__p)
  {
    uint64_t v15 = v24;
    float64x2_t v16 = __p;
    if (v24 != __p)
    {
      uint64_t v17 = v24;
      do
      {
        unint64_t v19 = (void *)*((void *)v17 - 3);
        v17 -= 24;
        uint64_t v18 = v19;
        if (v19)
        {
          *((void *)v15 - 2) = v18;
          operator delete(v18);
        }
        uint64_t v15 = v17;
      }
      while (v17 != v14);
      float64x2_t v16 = __p;
    }
    unint64_t v24 = v14;
    operator delete(v16);
  }
}

void sub_1C4A35FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  sub_1C4A352A0((uint64_t *)va);
  sub_1C496B66C((void **)va1);
  _Unwind_Resume(a1);
}

void CoreHandwriting::StrokeDirectionReversal::processInplace(CoreHandwriting::StrokeDirectionReversal *this, CoreHandwriting::Ink *a2, CoreHandwriting::InkMapping *a3)
{
  *((void *)a2 + 4) = 0;
  double v3 = *(double ***)a2;
  uint64_t v4 = (double **)*((void *)a2 + 1);
  if (*(double ***)a2 != v4)
  {
    uint64_t v6 = (char *)a2 + 24;
    do
    {
      while (1)
      {
        uint64_t v7 = *v3;
        uint64_t v8 = v3[1];
        double v10 = *(v8 - 4);
        uint64_t v9 = v8 - 4;
        if (v10 - **v3 > 0.0) {
          break;
        }
        unint64_t v19 = *((void *)a2 + 4);
        uint64_t v20 = *((void *)a2 + 5);
        if (v19 == v20 << 6)
        {
          if ((uint64_t)(v19 + 1) < 0) {
LABEL_32:
          }
            sub_1C494A220();
          unint64_t v21 = v20 << 7;
          if (v21 <= (v19 & 0xFFFFFFFFFFFFFFC0) + 64) {
            unint64_t v21 = (v19 & 0xFFFFFFFFFFFFFFC0) + 64;
          }
          if (v19 <= 0x3FFFFFFFFFFFFFFELL) {
            unint64_t v22 = v21;
          }
          else {
            unint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
          }
          sub_1C49B61EC((uint64_t)v6, v22);
          unint64_t v19 = *((void *)a2 + 4);
        }
        *((void *)a2 + 4) = v19 + 1;
        *(void *)(*((void *)a2 + 3) + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v19);
        v3 += 3;
        if (v3 == v4) {
          return;
        }
      }
      if (v7 != v3[1] && v9 > v7)
      {
        float64x2_t v12 = v7 + 4;
        do
        {
          *(_OWORD *)uint64_t v23 = *((_OWORD *)v12 - 2);
          *(_OWORD *)&v23[16] = *((_OWORD *)v12 - 1);
          long long v13 = *(_OWORD *)((char *)v9 + 9);
          *((_OWORD *)v12 - 2) = *(_OWORD *)v9;
          *(_OWORD *)((char *)v12 - 23) = v13;
          *(_OWORD *)uint64_t v9 = *(_OWORD *)v23;
          *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)&v23[9];
          v9 -= 4;
          BOOL v14 = v12 >= v9;
          v12 += 4;
        }
        while (!v14);
      }
      unint64_t v15 = *((void *)a2 + 4);
      uint64_t v16 = *((void *)a2 + 5);
      if (v15 == v16 << 6)
      {
        if ((uint64_t)(v15 + 1) < 0) {
          goto LABEL_32;
        }
        unint64_t v17 = v16 << 7;
        if (v17 <= (v15 & 0xFFFFFFFFFFFFFFC0) + 64) {
          unint64_t v17 = (v15 & 0xFFFFFFFFFFFFFFC0) + 64;
        }
        if (v15 <= 0x3FFFFFFFFFFFFFFELL) {
          unint64_t v18 = v17;
        }
        else {
          unint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
        }
        sub_1C49B61EC((uint64_t)v6, v18);
        unint64_t v15 = *((void *)a2 + 4);
      }
      *((void *)a2 + 4) = v15 + 1;
      *(void *)(*((void *)a2 + 3) + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v3 += 3;
    }
    while (v3 != v4);
  }
}

void CoreHandwriting::SpatialResamplingToFixedNumberOfPoints::calcNumPointsPerStroke(const CoreHandwriting::Ink *a1@<X1>, unint64_t a2@<X2>, uint64_t **a3@<X8>)
{
  double v5 = a3;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v7 = *(void **)a1;
  uint64_t v6 = (void *)*((void *)a1 + 1);
  if (v6 != *(void **)a1)
  {
    uint64_t v8 = (uint64_t)v6 - *(void *)a1;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    if (v9 >> 61) {
      sub_1C494A220();
    }
    double v10 = (uint64_t *)operator new(0x5555555555555558 * (v8 >> 3));
    uint64_t *v5 = v10;
    v5[1] = v10;
    v5[2] = &v10[v9];
    uint64_t v11 = a2;
    while (1)
    {
      while (1)
      {
        uint64_t v13 = v7[1] - *v7 <= 0x20uLL ? 1 : 2;
        unint64_t v14 = (unint64_t)v5[2];
        if ((unint64_t)v10 >= v14) {
          break;
        }
        *v10++ = v13;
        uint64_t v12 = (uint64_t)v10;
        v5[1] = v10;
        v11 -= v13;
        v7 += 3;
        if (v7 == v6) {
          goto LABEL_36;
        }
      }
      unint64_t v15 = *v5;
      uint64_t v16 = (char *)v10 - (char *)*v5;
      uint64_t v17 = v16 >> 3;
      unint64_t v18 = (v16 >> 3) + 1;
      if (v18 >> 61) {
        sub_1C494A220();
      }
      uint64_t v19 = v14 - (void)v15;
      if (v19 >> 2 > v18) {
        unint64_t v18 = v19 >> 2;
      }
      unint64_t v20 = (unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v18;
      if (v20)
      {
        if (v20 >> 61) {
          sub_1C4949AA8();
        }
        unint64_t v21 = operator new(8 * v20);
        unint64_t v22 = (uint64_t *)&v21[8 * v17];
        *unint64_t v22 = v13;
        uint64_t v12 = (uint64_t)(v22 + 1);
        int64_t v23 = (char *)v10 - (char *)v15;
        if (v10 == v15)
        {
LABEL_26:
          double v5 = a3;
          *a3 = v22;
          a3[1] = (uint64_t *)v12;
          a3[2] = (uint64_t *)&v21[8 * v20];
          if (!v15) {
            goto LABEL_23;
          }
LABEL_22:
          operator delete(v15);
          goto LABEL_23;
        }
      }
      else
      {
        unint64_t v21 = 0;
        unint64_t v22 = (uint64_t *)(8 * v17);
        *(void *)(8 * v17) = v13;
        uint64_t v12 = 8 * v17 + 8;
        int64_t v23 = (char *)v10 - (char *)v15;
        if (v10 == v15) {
          goto LABEL_26;
        }
      }
      unint64_t v24 = v23 - 8;
      if (v24 < 0x168) {
        break;
      }
      unint64_t v27 = ((char *)(v10 - 1) - (char *)v15) & 0xFFFFFFFFFFFFFFF8;
      if (&v21[v16 - 8 - v27] > &v21[v16 - 8]
        || (uint64_t *)((char *)v10 - v27 - 8) > v10 - 1
        || (unint64_t)((char *)v10 - v21 - v16) < 0x20)
      {
        break;
      }
      uint64_t v28 = (v24 >> 3) + 1;
      uint64_t v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v25 = &v10[v29 / 0xFFFFFFFFFFFFFFF8];
      unint64_t v22 = (uint64_t *)((char *)v22 - v29);
      double v30 = &v21[8 * v17 - 16];
      double v31 = v10 - 2;
      uint64_t v32 = v28 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *(_OWORD *)v31;
        *(v30 - 1) = *((_OWORD *)v31 - 1);
        _OWORD *v30 = v33;
        v30 -= 2;
        v31 -= 4;
        v32 -= 4;
      }
      while (v32);
      double v5 = a3;
      if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_20;
      }
LABEL_21:
      uint64_t *v5 = v22;
      v5[1] = (uint64_t *)v12;
      v5[2] = (uint64_t *)&v21[8 * v20];
      if (v15) {
        goto LABEL_22;
      }
LABEL_23:
      v5[1] = (uint64_t *)v12;
      v11 -= v13;
      v7 += 3;
      double v10 = (uint64_t *)v12;
      if (v7 == v6) {
        goto LABEL_36;
      }
    }
    uint64_t v25 = v10;
    double v5 = a3;
    do
    {
LABEL_20:
      uint64_t v26 = *--v25;
      *--unint64_t v22 = v26;
    }
    while (v25 != v15);
    goto LABEL_21;
  }
  uint64_t v12 = 0;
  uint64_t v11 = a2;
LABEL_36:
  if (v11 >= 1)
  {
    BOOL v34 = *(char **)a1;
    double v35 = (char *)*((void *)a1 + 1);
    if (*(char **)a1 == v35)
    {
      unint64_t v60 = (v35 - v34) / 24;
      uint64_t v162 = 0;
    }
    else
    {
      double v36 = 0.0;
      double v37 = *(char **)a1;
      do
      {
        uint64_t v39 = *(_OWORD **)v37;
        BOOL v38 = (char *)*((void *)v37 + 1);
        double v40 = 0.0;
        if (*(char **)v37 != v38)
        {
          BOOL v41 = (float64x2_t *)(v39 + 2);
          if (v39 + 2 != (_OWORD *)v38)
          {
            float64x2_t v42 = *(float64x2_t *)v39;
            unint64_t v43 = v38 - (char *)v39 - 64;
            if (v43 >= 0x80)
            {
              uint64_t v44 = (v43 >> 5) + 1;
              uint64_t v45 = v44 & 3;
              if ((v44 & 3) == 0) {
                uint64_t v45 = 4;
              }
              uint64_t v46 = v44 - v45;
              v41 += 2 * v46;
              int8x16_t v47 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v42.f64[0], 0);
              int v48 = (int64x2_t *)(v39 + 6);
              do
              {
                i64 = (const double *)v48[-4].i64;
                float64x2x4_t v163 = vld4q_f64(i64);
                int64x2_t v50 = v48[2];
                int64x2_t v51 = *v48;
                v48 += 8;
                float64x2_t v52 = (float64x2_t)vzip1q_s64(v51, v50);
                float64x2_t v53 = (float64x2_t)vzip2q_s64(v51, v50);
                float64x2_t v54 = vsubq_f64((float64x2_t)vextq_s8(v47, (int8x16_t)v163.val[0], 8uLL), v163.val[0]);
                float64x2_t v55 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v163.val[0], (int8x16_t)v52, 8uLL), v52);
                float64x2_t v56 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v42, (int8x16_t)v163.val[1], 8uLL), v163.val[1]);
                v163.val[0] = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v163.val[1], (int8x16_t)v53, 8uLL), v53);
                float64x2_t v57 = vsqrtq_f64(vmlaq_f64(vmulq_f64(v56, v56), v54, v54));
                v163.val[0] = vsqrtq_f64(vmlaq_f64(vmulq_f64(v163.val[0], v163.val[0]), v55, v55));
                double v40 = v40 + v57.f64[0] + v57.f64[1] + v163.val[0].f64[0] + v163.val[0].f64[1];
                float64x2_t v42 = v53;
                int8x16_t v47 = (int8x16_t)v52;
                v46 -= 4;
              }
              while (v46);
              float64x2_t v42 = (float64x2_t)v50;
            }
            do
            {
              float64x2_t v58 = *v41;
              v41 += 2;
              float64x2_t v59 = vsubq_f64(v42, v58);
              double v40 = v40
                  + sqrt(vmlad_n_f64(COERCE_DOUBLE(*(void *)&vmulq_f64(v59, v59).f64[1]), v59.f64[0], v59.f64[0]));
              float64x2_t v42 = v58;
            }
            while (v41 != (float64x2_t *)v38);
          }
        }
        double v36 = v36 + v40;
        v37 += 24;
      }
      while (v37 != v35);
      uint64_t v162 = 0;
      unint64_t v60 = (v35 - v34) / 24;
      if (v35 != v34)
      {
        if (v60 >> 62) {
          sub_1C494A220();
        }
        uint64_t v61 = operator new(4 * v60);
        uint64_t v162 = v61;
        bzero(v61, 4 * v60);
        uint64_t v62 = 0;
        uint64_t v63 = (int32x4_t *)*a3;
        unint64_t v64 = v34;
        unint64_t v65 = a2;
        do
        {
          uint64_t v69 = *(_OWORD **)v64;
          id v68 = (char *)*((void *)v64 + 1);
          double v70 = 0.0;
          if (*(char **)v64 != v68)
          {
            unint64_t v71 = (float64x2_t *)(v69 + 2);
            if (v69 + 2 != (_OWORD *)v68)
            {
              float64x2_t v72 = *(float64x2_t *)v69;
              unint64_t v73 = v68 - (char *)v69 - 64;
              if (v73 >= 0x80)
              {
                uint64_t v74 = (v73 >> 5) + 1;
                uint64_t v75 = v74 & 3;
                if ((v74 & 3) == 0) {
                  uint64_t v75 = 4;
                }
                uint64_t v76 = v74 - v75;
                v71 += 2 * v76;
                int8x16_t v77 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v72.f64[0], 0);
                uint64_t v78 = (int64x2_t *)(v69 + 6);
                do
                {
                  uint64_t v79 = (const double *)v78[-4].i64;
                  float64x2x4_t v164 = vld4q_f64(v79);
                  int64x2_t v80 = v78[2];
                  int64x2_t v81 = *v78;
                  v78 += 8;
                  float64x2_t v82 = (float64x2_t)vzip1q_s64(v81, v80);
                  float64x2_t v83 = (float64x2_t)vzip2q_s64(v81, v80);
                  float64x2_t v84 = vsubq_f64((float64x2_t)vextq_s8(v77, (int8x16_t)v164.val[0], 8uLL), v164.val[0]);
                  float64x2_t v85 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v164.val[0], (int8x16_t)v82, 8uLL), v82);
                  float64x2_t v86 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v72, (int8x16_t)v164.val[1], 8uLL), v164.val[1]);
                  v164.val[0] = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v164.val[1], (int8x16_t)v83, 8uLL), v83);
                  float64x2_t v87 = vsqrtq_f64(vmlaq_f64(vmulq_f64(v86, v86), v84, v84));
                  v164.val[0] = vsqrtq_f64(vmlaq_f64(vmulq_f64(v164.val[0], v164.val[0]), v85, v85));
                  double v70 = v70 + v87.f64[0] + v87.f64[1] + v164.val[0].f64[0] + v164.val[0].f64[1];
                  float64x2_t v72 = v83;
                  int8x16_t v77 = (int8x16_t)v82;
                  v76 -= 4;
                }
                while (v76);
                float64x2_t v72 = (float64x2_t)v80;
              }
              do
              {
                float64x2_t v88 = *v71;
                v71 += 2;
                float64x2_t v89 = vsubq_f64(v72, v88);
                double v70 = v70
                    + sqrt(vmlad_n_f64(COERCE_DOUBLE(*(void *)&vmulq_f64(v89, v89).f64[1]), v89.f64[0], v89.f64[0]));
                float64x2_t v72 = v88;
              }
              while (v71 != (float64x2_t *)v68);
            }
          }
          float v66 = v70;
          *((float *)v61 + v62) = v66;
          double v67 = v70 * (double)v11 / v36;
          if (v36 <= 0.0) {
            double v67 = (double)(v11 / v60);
          }
          v63->i64[v62] = (unint64_t)(floor(v67) + (double)v63->u64[v62]);
          ++v62;
          v64 += 24;
        }
        while (v64 != v35);
LABEL_68:
        if (v63 == (int32x4_t *)v12)
        {
          int v91 = 0;
          goto LABEL_76;
        }
        unint64_t v90 = v12 - (void)v63 - 8;
        if (v90 >= 0x38)
        {
          uint64_t v93 = (v90 >> 3) + 1;
          uint64_t v92 = (int32x4_t *)((char *)v63 + 8 * (v93 & 0x3FFFFFFFFFFFFFF8));
          long long v94 = v63 + 2;
          int32x4_t v95 = 0uLL;
          uint64_t v96 = v93 & 0x3FFFFFFFFFFFFFF8;
          int32x4_t v97 = 0uLL;
          do
          {
            int32x4_t v99 = v94[-2];
            int32x4_t v98 = v94[-1];
            int32x4_t v101 = *v94;
            int32x4_t v100 = v94[1];
            v94 += 4;
            int32x4_t v95 = vaddq_s32(v95, vuzp1q_s32(v99, v98));
            int32x4_t v97 = vaddq_s32(v97, vuzp1q_s32(v101, v100));
            v96 -= 8;
          }
          while (v96);
          int v91 = vaddvq_s32(vaddq_s32(v97, v95));
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFF8))
          {
LABEL_76:
            unint64_t v103 = v65 - v91;
            if (v65 <= v91)
            {
LABEL_133:
              if (v61) {
                operator delete(v61);
              }
              return;
            }
            if (v34 == v35)
            {
              float v104 = 0;
              unint64_t v105 = 0;
              goto LABEL_86;
            }
            if (v60 >> 61) {
              sub_1C494A220();
            }
            float v104 = (int64x2_t *)operator new(8 * v60);
            bzero(v104, 8 * v60);
            unint64_t v105 = &v104->i64[v60];
            if (8 * v60 - 8 >= 0x18)
            {
              unint64_t v108 = ((8 * v60 - 8) >> 3) + 1;
              uint64_t v106 = v108 & 0x3FFFFFFFFFFFFFFCLL;
              uint64_t v107 = &v104->i64[v108 & 0x3FFFFFFFFFFFFFFCLL];
              int64x2_t v109 = (int64x2_t)xmmword_1C4C39B30;
              uint64_t v110 = v104 + 1;
              int64x2_t v111 = vdupq_n_s64(2uLL);
              int64x2_t v112 = vdupq_n_s64(4uLL);
              uint64_t v113 = v108 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v110[-1] = v109;
                *uint64_t v110 = vaddq_s64(v109, v111);
                int64x2_t v109 = vaddq_s64(v109, v112);
                v110 += 2;
                v113 -= 4;
              }
              while (v113);
              if (v108 == v106)
              {
LABEL_86:
                if (v103 >= ((char *)v105 - (char *)v104) >> 3) {
                  uint64_t v114 = ((char *)v105 - (char *)v104) >> 3;
                }
                else {
                  uint64_t v114 = v103;
                }
                if (!v114)
                {
LABEL_130:
                  if (v104) {
                    operator delete(v104);
                  }
                  uint64_t v61 = v162;
                  goto LABEL_133;
                }
                uint64_t v115 = &v104->i64[v114];
                uint64_t v116 = 8 * v114;
                uint64_t v117 = (8 * v114) >> 3;
                if (8 * v114 >= 9 && (unint64_t)v116 >= 0x10)
                {
                  int64_t v149 = (unint64_t)(v117 - 2) >> 1;
                  int64_t v150 = v149;
                  do
                  {
                    if (v149 >= v150)
                    {
                      uint64_t v151 = (2 * v150) | 1;
                      uint64_t v152 = &v104->i64[v151];
                      if (2 * v150 + 2 < v117 && *((float *)v61 + *v152) > *((float *)v61 + v152[1]))
                      {
                        ++v152;
                        uint64_t v151 = 2 * v150 + 2;
                      }
                      double v153 = &v104->i64[v150];
                      uint64_t v154 = *v152;
                      uint64_t v155 = *v153;
                      float v156 = *((float *)v61 + *v153);
                      if (*((float *)v61 + *v152) <= v156)
                      {
                        do
                        {
                          *double v153 = v154;
                          double v153 = v152;
                          if (v149 < v151) {
                            break;
                          }
                          uint64_t v157 = 2 * v151;
                          uint64_t v151 = (2 * v151) | 1;
                          uint64_t v152 = &v104->i64[v151];
                          uint64_t v158 = v157 + 2;
                          if (v158 < v117 && *((float *)v61 + *v152) > *((float *)v61 + v152[1]))
                          {
                            ++v152;
                            uint64_t v151 = v158;
                          }
                          uint64_t v154 = *v152;
                        }
                        while (*((float *)v61 + *v152) <= v156);
                        *double v153 = v155;
                      }
                    }
                    BOOL v133 = v150-- <= 0;
                  }
                  while (!v133);
                }
                if (v115 == v105)
                {
LABEL_113:
                  if (v116 > 8)
                  {
                    uint64_t v132 = v114 & 0x1FFFFFFFFFFFFFFFLL;
                    do
                    {
                      uint64_t v134 = 0;
                      uint64_t v135 = v104->i64[0];
                      uint64_t v136 = (uint64_t *)v104;
                      do
                      {
                        uint64_t v137 = v136;
                        v136 += v134 + 1;
                        uint64_t v138 = 2 * v134;
                        uint64_t v134 = (2 * v134) | 1;
                        uint64_t v139 = v138 + 2;
                        if (v139 < v132 && *((float *)v162 + *v136) > *((float *)v162 + v136[1]))
                        {
                          ++v136;
                          uint64_t v134 = v139;
                        }
                        uint64_t *v137 = *v136;
                      }
                      while (v134 <= (uint64_t)((unint64_t)(v132 - 2) >> 1));
                      if (v136 == --v115)
                      {
                        uint64_t *v136 = v135;
                      }
                      else
                      {
                        uint64_t *v136 = *v115;
                        uint64_t *v115 = v135;
                        uint64_t v140 = (char *)v136 - (char *)v104 + 8;
                        if (v140 >= 9)
                        {
                          unint64_t v141 = (((unint64_t)v140 >> 3) - 2) >> 1;
                          uint64_t v142 = &v104->i64[v141];
                          uint64_t v143 = *v142;
                          uint64_t v144 = *v136;
                          float v145 = *((float *)v162 + *v136);
                          if (*((float *)v162 + *v142) > v145)
                          {
                            do
                            {
                              uint64_t v146 = v142;
                              uint64_t *v136 = v143;
                              if (!v141) {
                                break;
                              }
                              unint64_t v141 = (v141 - 1) >> 1;
                              uint64_t v142 = &v104->i64[v141];
                              uint64_t v143 = *v142;
                              uint64_t v136 = v146;
                            }
                            while (*((float *)v162 + *v142) > v145);
                            uint64_t *v146 = v144;
                          }
                        }
                      }
                      BOOL v133 = v132-- <= 2;
                    }
                    while (!v133);
                  }
                  uint64_t v147 = (uint64_t *)v104;
                  do
                  {
                    uint64_t v148 = *v147++;
                    ++v63->i64[v148];
                    v116 -= 8;
                  }
                  while (v116);
                  goto LABEL_130;
                }
                if (v116 < 16)
                {
                  uint64_t v118 = v104->i64[0];
                  long long v119 = &v104->i64[v114];
                  do
                  {
                    uint64_t v120 = *v119;
                    if (*((float *)v61 + *v119) > *((float *)v61 + v118))
                    {
                      uint64_t *v119 = v118;
                      v104->i64[0] = v120;
                      uint64_t v118 = v120;
                    }
                    ++v119;
                  }
                  while (v119 != v105);
                  goto LABEL_113;
                }
                uint64_t v121 = &v104->i64[1];
                uint64_t v122 = v104 + 1;
                unint64_t v123 = &v104->i64[v114];
                while (1)
                {
                  uint64_t v124 = *v123;
                  float v125 = *((float *)v61 + *v123);
                  if (v125 > *((float *)v61 + v104->i64[0]))
                  {
                    *unint64_t v123 = v104->i64[0];
                    v104->i64[0] = v124;
                    if (v116 == 16 || *((float *)v61 + *v121) <= *((float *)v61 + v122->i64[0]))
                    {
                      uint64_t v126 = (int64x2_t *)&v104->u64[1];
                      uint64_t v127 = 1;
                      uint64_t v128 = *v121;
                      if (*((float *)v61 + *v121) <= v125)
                      {
LABEL_107:
                        int v129 = (uint64_t *)v104;
                        do
                        {
                          uint64_t *v129 = v128;
                          int v129 = (uint64_t *)v126;
                          if ((uint64_t)((unint64_t)(v117 - 2) >> 1) < v127) {
                            break;
                          }
                          uint64_t v130 = 2 * v127;
                          uint64_t v127 = (2 * v127) | 1;
                          uint64_t v126 = (int64x2_t *)((char *)v104 + 8 * v127);
                          uint64_t v131 = v130 + 2;
                          if (v131 < v117 && *((float *)v61 + v126->i64[0]) > *((float *)v61 + v126->i64[1]))
                          {
                            uint64_t v126 = (int64x2_t *)((char *)v126 + 8);
                            uint64_t v127 = v131;
                          }
                          uint64_t v128 = v126->i64[0];
                        }
                        while (*((float *)v61 + v126->i64[0]) <= v125);
                        uint64_t *v129 = v124;
                      }
                    }
                    else
                    {
                      uint64_t v126 = v104 + 1;
                      uint64_t v127 = 2;
                      uint64_t v128 = v122->i64[0];
                      if (*((float *)v61 + v122->i64[0]) <= v125) {
                        goto LABEL_107;
                      }
                    }
                  }
                  if (++v123 == v105) {
                    goto LABEL_113;
                  }
                }
              }
            }
            else
            {
              uint64_t v106 = 0;
              uint64_t v107 = (uint64_t *)v104;
            }
            do
              *v107++ = v106++;
            while (v107 != v105);
            goto LABEL_86;
          }
        }
        else
        {
          int v91 = 0;
          uint64_t v92 = v63;
        }
        do
        {
          int v102 = v92->i32[0];
          uint64_t v92 = (int32x4_t *)((char *)v92 + 8);
          v91 += v102;
        }
        while (v92 != (int32x4_t *)v12);
        goto LABEL_76;
      }
    }
    uint64_t v61 = 0;
    uint64_t v63 = (int32x4_t *)*a3;
    unint64_t v65 = a2;
    goto LABEL_68;
  }
}

void sub_1C4A36C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (v17) {
    operator delete(v17);
  }
  uint64_t v19 = *(void **)a12;
  if (*(void *)a12)
  {
    *(void *)(a12 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::SpatialResamplingToFixedNumberOfPoints::processInplace(CoreHandwriting::SpatialResamplingToFixedNumberOfPoints *this, CoreHandwriting::Ink *a2, CoreHandwriting::InkMapping *a3)
{
  float64x2_t v72 = 0;
  unint64_t v73 = 0;
  uint64_t v74 = 0;
  unint64_t v71 = 0;
  CoreHandwriting::SpatialResamplingToFixedNumberOfPoints::calcNumPointsPerStroke(a2, *((void *)this + 1), (uint64_t **)__p);
  uint64_t v5 = *(void *)a2;
  if (*(void *)a2 != *((void *)a2 + 1))
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    while (*(void *)v5 == *(void *)(v5 + 8))
    {
LABEL_4:
      v5 += 24;
      ++v8;
      if (v5 == *((void *)a2 + 1)) {
        goto LABEL_53;
      }
    }
    if (a3) {
      operator new();
    }
    unint64_t v9 = v7;
    unint64_t v10 = *((void *)__p[0] + v8);
    uint64_t v12 = *(float64x2_t **)v5;
    uint64_t v11 = *(float64x2_t **)(v5 + 8);
    uint64_t v13 = (char *)v11 - *(void *)v5;
    if (v10 >= 2 && v13 == (char *)32)
    {
      long long v68 = 0uLL;
      uint64_t v69 = 0;
      if (v10 >> 59) {
        sub_1C4A38810();
      }
      uint64_t v14 = 32 * v10;
      unint64_t v15 = (char *)operator new(32 * v10);
      uint64_t v16 = 0;
      *(void *)&long long v68 = v15;
      uint64_t v69 = &v15[v14];
      do
      {
        uint64_t v17 = &v15[v16];
        float64x2_t v18 = v12[1];
        *(float64x2_t *)uint64_t v17 = *v12;
        *((float64x2_t *)v17 + 1) = v18;
        v16 += 32;
      }
      while (v14 != v16);
      *((void *)&v68 + 1) = &v15[v14];
      if (v7)
      {
        unint64_t v20 = (uint64_t *)v7[1];
        unint64_t v19 = (unint64_t)v7[2];
        if ((unint64_t)v20 < v19)
        {
          *unint64_t v20 = v8;
          v20[1] = 0;
          v7[1] = (char *)(v20 + 2);
          unint64_t v21 = *(char **)v5;
          if (!*(void *)v5) {
            goto LABEL_29;
          }
          goto LABEL_28;
        }
        uint64_t v45 = (uint64_t *)*v7;
        uint64_t v46 = ((char *)v20 - *v7) >> 4;
        unint64_t v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 60) {
          sub_1C4A38810();
        }
        uint64_t v48 = v19 - (void)v45;
        if (v48 >> 3 > v47) {
          unint64_t v47 = v48 >> 3;
        }
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v49 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v47;
        }
        if (v49 >> 60) {
          sub_1C4949AA8();
        }
        int64x2_t v50 = (char *)operator new(16 * v49);
        int64x2_t v51 = (uint64_t *)&v50[16 * v46];
        uint64_t *v51 = v8;
        v51[1] = 0;
        if (v20 == v45)
        {
          float64x2_t v54 = v51 + 2;
          *unint64_t v9 = v51;
          v9[1] = v51 + 2;
          v9[2] = &v50[16 * v49];
          if (v45) {
LABEL_47:
          }
            operator delete(v45);
        }
        else
        {
          float64x2_t v52 = &v50[16 * v46];
          do
          {
            float64x2_t v53 = v52 - 16;
            *((_OWORD *)v52 - 1) = *((_OWORD *)v20 - 1);
            v20 -= 2;
            v52 -= 16;
          }
          while (v20 != v45);
          float64x2_t v54 = v51 + 2;
          *unint64_t v9 = v53;
          v9[1] = v51 + 2;
          v9[2] = &v50[16 * v49];
          if (v45) {
            goto LABEL_47;
          }
        }
        v9[1] = v54;
        unint64_t v21 = *(char **)v5;
        if (!*(void *)v5)
        {
LABEL_29:
          *(_OWORD *)uint64_t v5 = v68;
          *(void *)(v5 + 16) = v69;
          uint64_t v6 = v71;
          if (v71)
          {
            float64x2_t v42 = v72;
            unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((v73 - (unsigned char *)v72) >> 3);
            if (v8 + 1 > v43)
            {
              sub_1C4B1C684((uint64_t)&v72, v8 + 1 - v43);
              float64x2_t v42 = v72;
            }
            uint64_t v44 = (uint64_t)v42 + 24 * v8;
            if ((char **)v44 != v6) {
              sub_1C4A3AF58(v44, *v6, v6[1], (v6[1] - *v6) >> 4);
            }
            uint64_t v7 = v6;
          }
          else
          {
            uint64_t v7 = 0;
          }
          goto LABEL_4;
        }
LABEL_28:
        *(void *)(v5 + 8) = v21;
        operator delete(v21);
        *(void *)uint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        *(void *)(v5 + 16) = 0;
        goto LABEL_29;
      }
    }
    else
    {
      double v22 = 0.0;
      if (v12 != v11)
      {
        int64_t v23 = v12 + 2;
        if (&v12[2] != v11)
        {
          float64x2_t v24 = *v12;
          unint64_t v25 = (unint64_t)(v13 - 64);
          if (v25 >= 0x80)
          {
            uint64_t v26 = (v25 >> 5) + 1;
            uint64_t v27 = v26 & 3;
            if ((v26 & 3) == 0) {
              uint64_t v27 = 4;
            }
            uint64_t v28 = v26 - v27;
            v23 += 2 * v28;
            int8x16_t v29 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v24.f64[0], 0);
            double v30 = (int64x2_t *)&v12[6];
            do
            {
              i64 = (const double *)v30[-4].i64;
              float64x2x4_t v75 = vld4q_f64(i64);
              int64x2_t v32 = v30[2];
              int64x2_t v33 = *v30;
              v30 += 8;
              float64x2_t v34 = (float64x2_t)vzip1q_s64(v33, v32);
              float64x2_t v35 = (float64x2_t)vzip2q_s64(v33, v32);
              float64x2_t v36 = vsubq_f64((float64x2_t)vextq_s8(v29, (int8x16_t)v75.val[0], 8uLL), v75.val[0]);
              float64x2_t v37 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v75.val[0], (int8x16_t)v34, 8uLL), v34);
              float64x2_t v38 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v24, (int8x16_t)v75.val[1], 8uLL), v75.val[1]);
              v75.val[0] = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v75.val[1], (int8x16_t)v35, 8uLL), v35);
              float64x2_t v39 = vsqrtq_f64(vmlaq_f64(vmulq_f64(v38, v38), v36, v36));
              v75.val[0] = vsqrtq_f64(vmlaq_f64(vmulq_f64(v75.val[0], v75.val[0]), v37, v37));
              double v22 = v22 + v39.f64[0] + v39.f64[1] + v75.val[0].f64[0] + v75.val[0].f64[1];
              float64x2_t v24 = v35;
              int8x16_t v29 = (int8x16_t)v34;
              v28 -= 4;
            }
            while (v28);
            float64x2_t v24 = (float64x2_t)v32;
          }
          do
          {
            float64x2_t v40 = *v23;
            v23 += 2;
            float64x2_t v41 = vsubq_f64(v24, v40);
            double v22 = v22 + sqrt(vmlad_n_f64(COERCE_DOUBLE(*(void *)&vmulq_f64(v41, v41).f64[1]), v41.f64[0], v41.f64[0]));
            float64x2_t v24 = v40;
          }
          while (v23 != v11);
        }
      }
      sub_1C4A32DD0((double **)&v68, (char **)v5, v10, 1, (uint64_t)v7, v8, v22 / (double)(v10 - 1));
    }
    unint64_t v21 = *(char **)v5;
    if (!*(void *)v5) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  uint64_t v6 = 0;
LABEL_53:
  if (a3)
  {
    CoreHandwriting::InkMapping::composeWith((CoreHandwriting::InkMapping *)&v72, a3, &v68);
    uint64_t v55 = *(void *)a3;
    if (*(void *)a3)
    {
      uint64_t v56 = *((void *)a3 + 1);
      float64x2_t v57 = *(void **)a3;
      if (v56 != v55)
      {
        uint64_t v58 = *((void *)a3 + 1);
        do
        {
          unint64_t v60 = *(void **)(v58 - 24);
          v58 -= 24;
          float64x2_t v59 = v60;
          if (v60)
          {
            *(void *)(v56 - 16) = v59;
            operator delete(v59);
          }
          uint64_t v56 = v58;
        }
        while (v58 != v55);
        float64x2_t v57 = *(void **)a3;
      }
      *((void *)a3 + 1) = v55;
      operator delete(v57);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      *((void *)a3 + 2) = 0;
    }
    *(_OWORD *)a3 = v68;
    *((void *)a3 + 2) = v69;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  unint64_t v71 = 0;
  if (v6)
  {
    uint64_t v61 = *v6;
    if (*v6)
    {
      v6[1] = v61;
      operator delete(v61);
    }
    MEMORY[0x1C8786460](v6, 0x20C40960023A9);
  }
  uint64_t v62 = (char *)v72;
  if (v72)
  {
    uint64_t v63 = v73;
    unint64_t v64 = v72;
    if (v73 != v72)
    {
      unint64_t v65 = v73;
      do
      {
        double v67 = (void *)*((void *)v65 - 3);
        v65 -= 24;
        float v66 = v67;
        if (v67)
        {
          *((void *)v63 - 2) = v66;
          operator delete(v66);
        }
        uint64_t v63 = v65;
      }
      while (v65 != v62);
      unint64_t v64 = v72;
    }
    unint64_t v73 = v62;
    operator delete(v64);
  }
}

void sub_1C4A37254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  if (__p)
  {
    operator delete(__p);
    sub_1C4A352A0(&a15);
    sub_1C496B66C(&a16);
    _Unwind_Resume(a1);
  }
  sub_1C4A352A0(&a15);
  sub_1C496B66C(&a16);
  _Unwind_Resume(a1);
}

char *CoreHandwriting::PreprocessingManager::addStep(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  double v3 = *(void **)(a1 + 8);
  if ((unint64_t)v3 >= *(void *)(a1 + 16))
  {
    float64x2_t result = sub_1C4A3C28C((char **)a1, &v5);
  }
  else
  {
    *double v3 = a2;
    float64x2_t result = (char *)(v3 + 1);
  }
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t CoreHandwriting::PreprocessingManager::pyAddStep(void *a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 32))(&v7, a2);
  double v3 = (uint64_t *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    uint64_t v5 = sub_1C4A3C440(a1, &v7);
  }
  else
  {
    uint64_t v4 = v7;
    uint64_t v7 = 0;
    *double v3 = v4;
    uint64_t v5 = v3 + 1;
  }
  a1[1] = v5;
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1C4A37410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *CoreHandwriting::PreprocessingManager::process@<X0>(CoreHandwriting::PreprocessingManager *this@<X0>, const CoreHandwriting::Ink *a2@<X1>, CoreHandwriting::InkMapping *a3@<X2>, uint64_t a4@<X8>)
{
  sub_1C4A38700((void *)a4, (uint64_t *)a2);
  uint64_t result = sub_1C49C68B8((void *)(a4 + 24), (uint64_t)a2 + 24);
  long long v9 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a4 + 48) = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a4 + 64) = v9;
  uint64_t v11 = *(void **)this;
  for (unint64_t i = (void *)*((void *)this + 1); v11 != i; ++v11)
    uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, CoreHandwriting::InkMapping *))(*(void *)*v11 + 24))(*v11, a4, a3);
  return result;
}

void sub_1C4A374E4(_Unwind_Exception *exception_object)
{
  double v3 = (char *)*v1;
  if (*v1)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = *v1;
    if (v4 != v3)
    {
      uint64_t v6 = (char *)v1[1];
      do
      {
        uint64_t v8 = (void *)*((void *)v6 - 3);
        v6 -= 24;
        uint64_t v7 = v8;
        if (v8)
        {
          *((void *)v4 - 2) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      uint64_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C4A3753C(_Unwind_Exception *a1)
{
  sub_1C4A375C0(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::PreprocessingManager::processInplace(uint64_t result, uint64_t a2, uint64_t a3)
{
  double v3 = *(uint64_t **)result;
  uint64_t v4 = *(uint64_t **)(result + 8);
  if (*(uint64_t **)result != v4)
  {
    do
    {
      uint64_t v7 = *v3++;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 24))(v7, a2, a3);
    }
    while (v3 != v4);
  }
  return result;
}

void **sub_1C4A375C0(void **a1)
{
  uint64_t v2 = a1[3];
  if (v2) {
    operator delete(v2);
  }
  double v3 = (char *)*a1;
  if (*a1)
  {
    uint64_t v4 = (char *)a1[1];
    uint64_t v5 = *a1;
    if (v4 != v3)
    {
      uint64_t v6 = (char *)a1[1];
      do
      {
        uint64_t v8 = (void *)*((void *)v6 - 3);
        v6 -= 24;
        uint64_t v7 = v8;
        if (v8)
        {
          *((void *)v4 - 2) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      uint64_t v5 = *a1;
    }
    a1[1] = v3;
    operator delete(v5);
  }
  return a1;
}

CoreHandwriting::PreprocessingManager *CoreHandwriting::PreprocessingManager::PreprocessingManager(CoreHandwriting::PreprocessingManager *this, const PreprocessingManager *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  while (v3 != v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)v3 + 32))(&v10);
    uint64_t v5 = (uint64_t *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2))
    {
      uint64_t v7 = sub_1C4A3C440(this, &v10);
    }
    else
    {
      uint64_t v6 = v10;
      uint64_t v10 = 0;
      uint64_t *v5 = v6;
      uint64_t v7 = v5 + 1;
    }
    *((void *)this + 1) = v7;
    uint64_t v8 = v10;
    uint64_t v10 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    v3 += 8;
  }
  return this;
}

void sub_1C4A37720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
    sub_1C4A37778(v10);
    _Unwind_Resume(a1);
  }
  sub_1C4A37778(v10);
  _Unwind_Resume(a1);
}

void *sub_1C4A37778(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        *uint64_t v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t CoreHandwriting::PreprocessingManager::operator=(uint64_t a1, const PreprocessingManager *a2)
{
  CoreHandwriting::PreprocessingManager::PreprocessingManager((CoreHandwriting::PreprocessingManager *)__p, a2);
  long long v4 = *(_OWORD *)__p;
  uint64_t v5 = *(void *)&__p[16];
  *(void *)long long __p = *(void *)a1;
  uint64_t v3 = *(void **)__p;
  long long v6 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 16) = v5;
  *(_OWORD *)&__p[8] = v6;
  if (v3)
  {
    uint64_t v7 = (void *)v6;
    uint64_t v8 = v3;
    if ((void *)v6 != v3)
    {
      do
      {
        uint64_t v10 = *--v7;
        uint64_t v9 = v10;
        *uint64_t v7 = 0;
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
      }
      while (v7 != v3);
      uint64_t v8 = *(void **)__p;
    }
    *(void *)&__p[8] = v3;
    operator delete(v8);
  }
  return a1;
}

void sub_1C4A378CC()
{
}

uint64_t sub_1C4A378E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_1C4A38700((void *)a4, (uint64_t *)a2);
  sub_1C49C68B8((void *)(a4 + 24), a2 + 24);
  long long v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a4 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a4 + 64) = v8;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a4, a3);
}

void sub_1C4A37960(_Unwind_Exception *a1)
{
  sub_1C4A375C0(v1);
  _Unwind_Resume(a1);
}

void sub_1C4A37974(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (char *)*v1;
  if (*v1)
  {
    long long v4 = (char *)v1[1];
    uint64_t v5 = *v1;
    if (v4 != v3)
    {
      long long v6 = (char *)v1[1];
      do
      {
        long long v8 = (void *)*((void *)v6 - 3);
        v6 -= 24;
        uint64_t v7 = v8;
        if (v8)
        {
          *((void *)v4 - 2) = v7;
          operator delete(v7);
        }
        long long v4 = v6;
      }
      while (v6 != v3);
      uint64_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C4A379CC()
{
}

void sub_1C4A37A34()
{
}

void sub_1C4A37A48()
{
}

void sub_1C4A37AB0()
{
}

void sub_1C4A37AC4()
{
}

void sub_1C4A37B2C()
{
}

void sub_1C4A37B40()
{
}

void sub_1C4A37BA8()
{
}

void sub_1C4A37BBC()
{
}

void sub_1C4A37C24()
{
}

void sub_1C4A37C38()
{
}

void sub_1C4A37CA0()
{
}

void sub_1C4A37CB4()
{
}

void sub_1C4A37D1C()
{
}

void sub_1C4A37D30()
{
}

void sub_1C4A37D8C()
{
}

void sub_1C4A37DA0()
{
}

void sub_1C4A37DFC()
{
}

void sub_1C4A37E10()
{
}

void sub_1C4A37E6C()
{
}

void sub_1C4A37E80()
{
}

void sub_1C4A37EE8()
{
}

void sub_1C4A37EFC()
{
}

void sub_1C4A37F5C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    a1[4] = v4;
    long long v6 = (void *)a1[1];
    uint64_t v5 = (char *)a1[2];
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_94:
      *(void *)uint64_t v5 = v8;
      goto LABEL_95;
    }
    uint64_t v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      uint64_t v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1) {
        uint64_t v11 = v10 + 1;
      }
      else {
        uint64_t v11 = v10 + 2;
      }
      uint64_t v12 = v11 >> 1;
      uint64_t v13 = -v12;
      uint64_t v14 = &v7[-8 * v12];
      int64_t v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        uint64_t v7 = (char *)a1[1];
      }
      uint64_t v5 = &v14[v15];
      uint64_t v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    unint64_t v38 = (v5 - v9) >> 2;
    if (v5 == v9) {
      unint64_t v38 = 1;
    }
    if (v38 >> 61) {
      goto LABEL_111;
    }
    unint64_t v39 = v38 >> 2;
    uint64_t v40 = 8 * v38;
    float64x2_t v41 = (char *)operator new(8 * v38);
    float64x2_t v42 = &v41[8 * v39];
    int64_t v44 = v5 - v7;
    BOOL v43 = v5 == v7;
    uint64_t v5 = v42;
    if (!v43)
    {
      uint64_t v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        uint64_t v92 = &v41[8 * v39];
        uint64_t v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          uint64_t v93 = (v45 >> 3) + 1;
          uint64_t v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v46 = &v42[v94];
          v7 += v94;
          int32x4_t v95 = (long long *)(v6 + 3);
          uint64_t v96 = v92 + 16;
          uint64_t v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *uint64_t v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_91;
          }
        }
      }
      else
      {
        uint64_t v46 = &v41[8 * v39];
      }
      do
      {
        uint64_t v99 = *(void *)v7;
        v7 += 8;
        *(void *)uint64_t v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_91:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9) {
      goto LABEL_94;
    }
    int32x4_t v100 = v9;
LABEL_93:
    operator delete(v100);
    uint64_t v5 = (char *)a1[2];
    goto LABEL_94;
  }
  float64x2_t v18 = (char *)a1[2];
  uint64_t v17 = (char *)a1[3];
  unint64_t v20 = (char *)*a1;
  unint64_t v19 = (char *)a1[1];
  uint64_t v21 = v18 - v19;
  uint64_t v22 = (v18 - v19) >> 3;
  uint64_t v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    float64x2_t v24 = operator new(0x1000uLL);
    unint64_t v25 = v24;
    if (v17 != v18)
    {
      *(void *)float64x2_t v18 = v24;
LABEL_95:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      unint64_t v69 = (v17 - v19) >> 2;
      if (v18 == v19) {
        unint64_t v69 = 1;
      }
      if (v69 >> 61) {
        goto LABEL_111;
      }
      unint64_t v70 = (v69 + 3) >> 2;
      uint64_t v71 = 8 * v69;
      float64x2_t v72 = (char *)operator new(8 * v69);
      unint64_t v47 = &v72[8 * v70];
      unint64_t v73 = v47;
      if (v18 != v19)
      {
        unint64_t v73 = &v47[8 * v22];
        uint64_t v74 = &v72[8 * v70];
        float64x2x4_t v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38) {
          goto LABEL_115;
        }
        uint64_t v76 = &v72[8 * v70];
        uint64_t v74 = v76;
        float64x2x4_t v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20) {
          goto LABEL_115;
        }
        unint64_t v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v74 = &v47[v78];
        float64x2x4_t v75 = &v19[v78];
        uint64_t v79 = (long long *)(v19 + 16);
        int64x2_t v80 = v76 + 16;
        uint64_t v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *int64x2_t v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_115:
          do
          {
            uint64_t v83 = *(void *)v75;
            v75 += 8;
            *(void *)uint64_t v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        unint64_t v47 = (char *)a1[1];
      }
    }
    else
    {
      unint64_t v47 = v19;
    }
    *((void *)v47 - 1) = v25;
    float64x2_t v84 = (char *)a1[1];
    uint64_t v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    uint64_t v8 = *((void *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3]) {
      goto LABEL_94;
    }
    float64x2_t v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      uint64_t v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1) {
        uint64_t v87 = v86 + 1;
      }
      else {
        uint64_t v87 = v86 + 2;
      }
      uint64_t v88 = v87 >> 1;
      uint64_t v89 = -v88;
      unint64_t v90 = &v84[-8 * v88];
      int64_t v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        float64x2_t v84 = (char *)a1[1];
      }
      uint64_t v5 = &v90[v91];
      uint64_t v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_94;
    }
    unint64_t v101 = (v5 - v85) >> 2;
    if (v5 == v85) {
      unint64_t v101 = 1;
    }
    if (!(v101 >> 61))
    {
      unint64_t v102 = v101 >> 2;
      uint64_t v103 = 8 * v101;
      float v104 = (char *)operator new(8 * v101);
      unint64_t v105 = &v104[8 * v102];
      int64_t v106 = v5 - v84;
      BOOL v43 = v5 == v84;
      uint64_t v5 = v105;
      if (!v43)
      {
        uint64_t v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          int64x2_t v109 = &v104[8 * v102];
          unint64_t v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            uint64_t v110 = (v107 >> 3) + 1;
            uint64_t v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v108 = &v105[v111];
            int64x2_t v112 = &v84[v111];
            uint64_t v113 = (long long *)(v84 + 16);
            uint64_t v114 = v109 + 16;
            uint64_t v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              _OWORD *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            float64x2_t v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_108;
            }
          }
        }
        else
        {
          unint64_t v108 = &v104[8 * v102];
        }
        do
        {
          uint64_t v117 = *(void *)v84;
          v84 += 8;
          *(void *)unint64_t v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_108:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85) {
        goto LABEL_94;
      }
      int32x4_t v100 = v85;
      goto LABEL_93;
    }
LABEL_111:
    sub_1C4949AA8();
  }
  uint64_t v26 = v23 >> 2;
  if (v17 == v20) {
    unint64_t v27 = 1;
  }
  else {
    unint64_t v27 = v26;
  }
  if (v27 >> 61) {
    goto LABEL_111;
  }
  uint64_t v28 = (char *)operator new(8 * v27);
  int8x16_t v29 = operator new(0x1000uLL);
  double v30 = v29;
  double v31 = &v28[8 * v22];
  int64x2_t v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v21 >> 2;
      }
      if (v48 >> 61) {
        sub_1C4949AA8();
      }
      double v31 = (char *)operator new(8 * v48);
      int64x2_t v32 = &v31[8 * v48];
      operator delete(v28);
      unint64_t v49 = (char *)a1[1];
      float64x2_t v18 = (char *)a1[2];
      uint64_t v28 = v31;
      *(void *)double v31 = v30;
      float64x2_t v34 = v31 + 8;
      if (v18 == v49) {
        goto LABEL_25;
      }
      do
      {
LABEL_46:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31) {
              unint64_t v54 = 1;
            }
            else {
              unint64_t v54 = (v32 - v31) >> 2;
            }
            if (v54 >> 61) {
              sub_1C4949AA8();
            }
            uint64_t v55 = (char *)operator new(8 * v54);
            uint64_t v28 = v55;
            unint64_t v56 = (v54 + 3) >> 2;
            int64x2_t v50 = &v55[8 * v56];
            float64x2_t v36 = v50;
            int64_t v57 = v34 - v31;
            if (v34 != v31)
            {
              float64x2_t v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v58 = v57 - 8;
              float64x2_t v59 = &v55[8 * v56];
              unint64_t v60 = v31;
              if (v58 < 0x38) {
                goto LABEL_116;
              }
              uint64_t v61 = 8 * v56;
              float64x2_t v59 = &v55[8 * v56];
              unint64_t v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20) {
                goto LABEL_116;
              }
              uint64_t v62 = (v58 >> 3) + 1;
              uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              float64x2_t v59 = &v50[v63];
              unint64_t v60 = &v31[v63];
              unint64_t v64 = (long long *)(v31 + 16);
              unint64_t v65 = &v55[v61 + 16];
              uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)unint64_t v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_116:
                do
                {
                  uint64_t v68 = *(void *)v60;
                  v60 += 8;
                  *(void *)float64x2_t v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            int64x2_t v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            uint64_t v52 = (v32 - v34) >> 3;
            if (v52 >= -1) {
              unint64_t v53 = v52 + 1;
            }
            else {
              unint64_t v53 = v52 + 2;
            }
            float64x2_t v36 = &v34[8 * (v53 >> 1)];
            int64x2_t v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              uint64_t v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              uint64_t v28 = v31;
            }
          }
        }
        else
        {
          int64x2_t v50 = v31;
          float64x2_t v36 = v34;
        }
        uint64_t v51 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v50 - 1) = v51;
        float64x2_t v35 = v50 - 8;
        float64x2_t v34 = v36;
        double v31 = v35;
      }
      while (v18 != (char *)a1[1]);
      goto LABEL_26;
    }
    unint64_t v33 = v22 + 2;
    if (v22 >= -1) {
      unint64_t v33 = v22 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
  *(void *)double v31 = v29;
  float64x2_t v34 = v31 + 8;
  if (v18 != v19) {
    goto LABEL_46;
  }
LABEL_25:
  float64x2_t v35 = v31;
  float64x2_t v36 = v34;
LABEL_26:
  float64x2_t v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
  {
    operator delete(v37);
  }
}

void sub_1C4A385D8(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C4A385F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C4A38608(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C4A38620(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A38638(uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  BOOL v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 128;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 256;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_1C4A38700(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL) {
      sub_1C4A38810();
    }
    uint64_t v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_1C4A38828(v3, v4, v5, v8);
  }
  return a1;
}

void sub_1C4A387AC(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  uint64_t v4 = (char *)*v1;
  if (*v1)
  {
    uint64_t v5 = (char *)v1[1];
    int64_t v6 = *v1;
    if (v5 != v4)
    {
      unint64_t v7 = (char *)v1[1];
      do
      {
        uint64_t v9 = (void *)*((void *)v7 - 3);
        v7 -= 24;
        uint64_t v8 = v9;
        if (v9)
        {
          *((void *)v5 - 2) = v8;
          operator delete(v8);
        }
        uint64_t v5 = v7;
      }
      while (v7 != v4);
      int64_t v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C4A38810()
{
}

void *sub_1C4A38828(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      uint64_t v9 = *(const void **)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      uint64_t v10 = v8 - *(void *)v6;
      if (v8 != *(void *)v6)
      {
        if (v10 < 0) {
          sub_1C4A38810();
        }
        uint64_t v11 = (char *)operator new(v8 - *(void *)v6);
        *a4 = v11;
        a4[1] = v11;
        unint64_t v7 = &v11[32 * (v10 >> 5)];
        a4[2] = v7;
        memcpy(v11, v9, v10 - 7);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_1C4A388F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C4A38908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_1C49C6848((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A3892C(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t v11 = (uint64_t *)result;
LABEL_2:
  uint64_t v12 = v11;
  while (1)
  {
    uint64_t v11 = v12;
    uint64_t v13 = (char *)a2 - (char *)v12;
    unint64_t v14 = a2 - v12;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v89 = *(a2 - 1);
          uint64_t v90 = *v12;
          if (*(double *)(**a3 + 8 * v89) >= *(double *)(**a3 + 8 * *v12)) {
            return result;
          }
          *uint64_t v12 = v89;
          goto LABEL_176;
        case 3uLL:
          uint64_t v91 = **a3;
          uint64_t v90 = *v12;
          uint64_t v92 = v12[1];
          double v93 = *(double *)(v91 + 8 * v92);
          double v94 = *(double *)(v91 + 8 * *v12);
          uint64_t v95 = *(a2 - 1);
          double v96 = *(double *)(v91 + 8 * v95);
          if (v93 >= v94)
          {
            if (v96 < v93)
            {
              v12[1] = v95;
              *(a2 - 1) = v92;
              uint64_t v149 = *v12;
              uint64_t v148 = v12[1];
              if (*(double *)(v91 + 8 * v148) < *(double *)(v91 + 8 * *v12))
              {
                *uint64_t v12 = v148;
                v12[1] = v149;
              }
            }
          }
          else
          {
            if (v96 >= v93)
            {
              *uint64_t v12 = v92;
              v12[1] = v90;
              uint64_t v160 = *(a2 - 1);
              if (*(double *)(v91 + 8 * v160) >= v94) {
                return result;
              }
              v12[1] = v160;
            }
            else
            {
              *uint64_t v12 = v95;
            }
LABEL_176:
            *(a2 - 1) = v90;
          }
          return result;
        case 4uLL:
          long long v98 = v12 + 1;
          uint64_t v99 = v12[1];
          int32x4_t v100 = v12 + 2;
          uint64_t v101 = v12[2];
          uint64_t v102 = **a3;
          double v103 = *(double *)(v102 + 8 * v99);
          float v104 = (uint64_t *)*v12;
          double v105 = *(double *)(v102 + 8 * *v12);
          double v106 = *(double *)(v102 + 8 * v101);
          if (v103 >= v105)
          {
            if (v106 >= v103)
            {
LABEL_170:
              uint64_t v99 = v101;
              uint64_t v150 = *(a2 - 1);
              if (*(double *)(v102 + 8 * v150) >= *(double *)(v102 + 8 * v99)) {
                return result;
              }
LABEL_171:
              *int32x4_t v100 = v150;
              *(a2 - 1) = v99;
              uint64_t v156 = *v100;
              uint64_t v157 = *v98;
              double v158 = *(double *)(v102 + 8 * v156);
              if (v158 < *(double *)(v102 + 8 * v157))
              {
                v12[1] = v156;
                v12[2] = v157;
                uint64_t v159 = *v12;
                if (v158 < *(double *)(v102 + 8 * *v12))
                {
                  *uint64_t v12 = v156;
                  v12[1] = v159;
                }
              }
              return result;
            }
            *long long v98 = v101;
            *int32x4_t v100 = v99;
            unint64_t v107 = v12;
            unint64_t v108 = (uint64_t **)(v12 + 1);
            uint64_t result = v99;
            if (v106 >= v105)
            {
LABEL_161:
              uint64_t v150 = *(a2 - 1);
              if (*(double *)(v102 + 8 * v150) >= *(double *)(v102 + 8 * v99)) {
                return result;
              }
              goto LABEL_171;
            }
          }
          else
          {
            unint64_t v107 = v12;
            unint64_t v108 = (uint64_t **)(v12 + 2);
            uint64_t result = *v12;
            if (v106 >= v103)
            {
              *uint64_t v12 = v99;
              v12[1] = (uint64_t)v104;
              unint64_t v107 = v12 + 1;
              unint64_t v108 = (uint64_t **)(v12 + 2);
              uint64_t result = (uint64_t)v104;
              if (v106 >= v105) {
                goto LABEL_170;
              }
            }
          }
          uint64_t *v107 = v101;
          *unint64_t v108 = v104;
          uint64_t v99 = result;
          goto LABEL_161;
        case 5uLL:
          uint64_t v97 = **a3;
          return (uint64_t)sub_1C49CB30C(v12, v12 + 1, v12 + 2, v12 + 3, a2 - 1, v97);
        default:
          JUMPOUT(0);
      }
    }
    if (v13 <= 191) {
      break;
    }
    if (!a4)
    {
      if (v12 != a2)
      {
        int64_t v120 = (v14 - 2) >> 1;
        int64_t v121 = v120;
        do
        {
          if (v120 >= v121)
          {
            uint64_t v123 = (2 * v121) | 1;
            uint64_t v124 = &v12[v123];
            uint64_t v125 = **a3;
            if (2 * v121 + 2 < (uint64_t)v14 && *(double *)(v125 + 8 * *v124) < *(double *)(v125 + 8 * v124[1]))
            {
              ++v124;
              uint64_t v123 = 2 * v121 + 2;
            }
            uint64_t result = (uint64_t)&v12[v121];
            uint64_t v126 = *v124;
            uint64_t v127 = *(void *)result;
            double v128 = *(double *)(v125 + 8 * *(void *)result);
            if (*(double *)(v125 + 8 * *v124) >= v128)
            {
              do
              {
                int v129 = v124;
                *(void *)uint64_t result = v126;
                if (v120 < v123) {
                  break;
                }
                uint64_t v130 = 2 * v123;
                uint64_t v123 = (2 * v123) | 1;
                uint64_t v124 = &v12[v123];
                uint64_t v131 = v130 + 2;
                if (v131 < (uint64_t)v14 && *(double *)(v125 + 8 * *v124) < *(double *)(v125 + 8 * v124[1]))
                {
                  ++v124;
                  uint64_t v123 = v131;
                }
                uint64_t v126 = *v124;
                uint64_t result = (uint64_t)v129;
              }
              while (*(double *)(v125 + 8 * *v124) >= v128);
              uint64_t *v129 = v127;
            }
          }
          BOOL v122 = v121-- <= 0;
        }
        while (!v122);
        uint64_t v132 = (unint64_t)v13 >> 3;
        do
        {
          uint64_t v133 = 0;
          uint64_t v134 = *v12;
          uint64_t v135 = *a3;
          uint64_t v136 = v12;
          do
          {
            uint64_t v137 = v136;
            v136 += v133 + 1;
            uint64_t v138 = 2 * v133;
            uint64_t v133 = (2 * v133) | 1;
            uint64_t v139 = v138 + 2;
            if (v139 < v132)
            {
              uint64_t result = v136[1];
              if (*(double *)(*v135 + 8 * *v136) < *(double *)(*v135 + 8 * result))
              {
                ++v136;
                uint64_t v133 = v139;
              }
            }
            uint64_t *v137 = *v136;
          }
          while (v133 <= (uint64_t)((unint64_t)(v132 - 2) >> 1));
          if (v136 == --a2)
          {
            uint64_t *v136 = v134;
          }
          else
          {
            uint64_t *v136 = *a2;
            *a2 = v134;
            uint64_t v140 = (char *)v136 - (char *)v12 + 8;
            if (v140 >= 9)
            {
              unint64_t v141 = (((unint64_t)v140 >> 3) - 2) >> 1;
              uint64_t v142 = &v12[v141];
              uint64_t v143 = *v142;
              uint64_t v144 = *v136;
              uint64_t v145 = **a3;
              double v146 = *(double *)(v145 + 8 * *v136);
              if (*(double *)(v145 + 8 * *v142) < v146)
              {
                do
                {
                  uint64_t v147 = v142;
                  uint64_t *v136 = v143;
                  if (!v141) {
                    break;
                  }
                  unint64_t v141 = (v141 - 1) >> 1;
                  uint64_t v142 = &v12[v141];
                  uint64_t v143 = *v142;
                  uint64_t v136 = v147;
                }
                while (*(double *)(v145 + 8 * *v142) < v146);
                *uint64_t v147 = v144;
              }
            }
          }
          BOOL v122 = v132-- <= 2;
        }
        while (!v122);
      }
      return result;
    }
    unint64_t v15 = v14 >> 1;
    uint64_t v16 = &v12[v14 >> 1];
    uint64_t v17 = **a3;
    uint64_t v18 = *(a2 - 1);
    double v19 = *(double *)(v17 + 8 * v18);
    if ((unint64_t)v13 < 0x401)
    {
      uint64_t v24 = *v12;
      uint64_t v25 = *v16;
      double v26 = *(double *)(v17 + 8 * *v12);
      double v27 = *(double *)(v17 + 8 * *v16);
      if (v26 < v27)
      {
        if (v19 < v26)
        {
          *uint64_t v16 = v18;
          goto LABEL_32;
        }
        *uint64_t v16 = v24;
        *uint64_t v12 = v25;
        uint64_t v42 = *(a2 - 1);
        if (*(double *)(v17 + 8 * v42) < v27)
        {
          *uint64_t v12 = v42;
LABEL_32:
          *(a2 - 1) = v25;
        }
LABEL_33:
        --a4;
        uint64_t v30 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v19 >= v26) {
        goto LABEL_33;
      }
      *uint64_t v12 = v18;
      *(a2 - 1) = v24;
      uint64_t v29 = *v16;
      if (*(double *)(v17 + 8 * *v12) >= *(double *)(v17 + 8 * *v16)) {
        goto LABEL_33;
      }
      *uint64_t v16 = *v12;
      *uint64_t v12 = v29;
      --a4;
      uint64_t v30 = v29;
      if (a5) {
        goto LABEL_57;
      }
LABEL_56:
      double v63 = *(double *)(v17 + 8 * v30);
      if (*(double *)(v17 + 8 * *(v12 - 1)) < v63) {
        goto LABEL_57;
      }
      if (v63 < *(double *)(v17 + 8 * *(a2 - 1)))
      {
        do
        {
          uint64_t v80 = v12[1];
          ++v12;
        }
        while (v63 >= *(double *)(v17 + 8 * v80));
      }
      else
      {
        uint64_t v81 = v12 + 1;
        do
        {
          uint64_t v12 = v81;
          if (v81 >= a2) {
            break;
          }
          ++v81;
        }
        while (v63 >= *(double *)(v17 + 8 * *v12));
      }
      long long v82 = a2;
      if (v12 < a2)
      {
        long long v82 = a2;
        do
          uint64_t v83 = *--v82;
        while (v63 < *(double *)(v17 + 8 * v83));
      }
      if (v12 < v82)
      {
        uint64_t v84 = *v12;
        uint64_t v85 = *v82;
        do
        {
          *uint64_t v12 = v85;
          *long long v82 = v84;
          do
          {
            uint64_t v86 = v12[1];
            ++v12;
            uint64_t v84 = v86;
          }
          while (v63 >= *(double *)(v17 + 8 * v86));
          do
          {
            uint64_t v87 = *--v82;
            uint64_t v85 = v87;
          }
          while (v63 < *(double *)(v17 + 8 * v87));
        }
        while (v12 < v82);
      }
      uint64_t v88 = v12 - 1;
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11) {
        *uint64_t v11 = *v88;
      }
      a5 = 0;
      *uint64_t v88 = v30;
    }
    else
    {
      uint64_t v20 = *v16;
      uint64_t v21 = *v12;
      double v22 = *(double *)(v17 + 8 * *v16);
      double v23 = *(double *)(v17 + 8 * *v12);
      if (v22 >= v23)
      {
        if (v19 < v22)
        {
          *uint64_t v16 = v18;
          *(a2 - 1) = v20;
          uint64_t v28 = *v12;
          if (*(double *)(v17 + 8 * *v16) < *(double *)(v17 + 8 * *v12))
          {
            *uint64_t v12 = *v16;
            *uint64_t v16 = v28;
          }
        }
      }
      else
      {
        if (v19 >= v22)
        {
          *uint64_t v12 = v20;
          *uint64_t v16 = v21;
          uint64_t v31 = *(a2 - 1);
          if (*(double *)(v17 + 8 * v31) >= v23) {
            goto LABEL_24;
          }
          *uint64_t v16 = v31;
        }
        else
        {
          *uint64_t v12 = v18;
        }
        *(a2 - 1) = v21;
      }
LABEL_24:
      int64x2_t v32 = &v12[v15];
      uint64_t v35 = *(v32 - 1);
      unint64_t v33 = v32 - 1;
      uint64_t v34 = v35;
      uint64_t v36 = v12[1];
      double v37 = *(double *)(v17 + 8 * v35);
      double v38 = *(double *)(v17 + 8 * v36);
      uint64_t v39 = *(a2 - 2);
      double v40 = *(double *)(v17 + 8 * v39);
      if (v37 >= v38)
      {
        if (v40 < v37)
        {
          *unint64_t v33 = v39;
          *(a2 - 2) = v34;
          uint64_t v41 = v12[1];
          if (*(double *)(v17 + 8 * *v33) < *(double *)(v17 + 8 * v41))
          {
            v12[1] = *v33;
            *unint64_t v33 = v41;
          }
        }
      }
      else
      {
        if (v40 >= v37)
        {
          v12[1] = v34;
          *unint64_t v33 = v36;
          uint64_t v43 = *(a2 - 2);
          if (*(double *)(v17 + 8 * v43) >= v38) {
            goto LABEL_38;
          }
          *unint64_t v33 = v43;
        }
        else
        {
          v12[1] = v39;
        }
        *(a2 - 2) = v36;
      }
LABEL_38:
      int64_t v44 = &v12[v15];
      uint64_t v47 = v44[1];
      unint64_t v45 = v44 + 1;
      uint64_t v46 = v47;
      uint64_t v48 = v12[2];
      double v49 = *(double *)(v17 + 8 * v47);
      double v50 = *(double *)(v17 + 8 * v48);
      uint64_t v51 = *(a2 - 3);
      double v52 = *(double *)(v17 + 8 * v51);
      if (v49 >= v50)
      {
        if (v52 < v49)
        {
          *unint64_t v45 = v51;
          *(a2 - 3) = v46;
          uint64_t v53 = v12[2];
          if (*(double *)(v17 + 8 * *v45) < *(double *)(v17 + 8 * v53))
          {
            v12[2] = *v45;
            *unint64_t v45 = v53;
          }
        }
      }
      else
      {
        if (v52 >= v49)
        {
          v12[2] = v46;
          *unint64_t v45 = v48;
          uint64_t v54 = *(a2 - 3);
          if (*(double *)(v17 + 8 * v54) >= v50) {
            goto LABEL_47;
          }
          *unint64_t v45 = v54;
        }
        else
        {
          v12[2] = v51;
        }
        *(a2 - 3) = v48;
      }
LABEL_47:
      uint64_t v55 = *v16;
      uint64_t v56 = *v33;
      double v57 = *(double *)(v17 + 8 * *v16);
      double v58 = *(double *)(v17 + 8 * *v33);
      uint64_t v59 = *v45;
      double v60 = *(double *)(v17 + 8 * *v45);
      if (v57 >= v58)
      {
        if (v60 >= v57) {
          goto LABEL_55;
        }
        *uint64_t v16 = v59;
        *unint64_t v45 = v55;
        unint64_t v45 = &v12[v14 >> 1];
        uint64_t v55 = v56;
        if (v60 < v58)
        {
LABEL_54:
          *unint64_t v33 = v59;
          *unint64_t v45 = v56;
LABEL_55:
          uint64_t v62 = *v12;
          *uint64_t v12 = v55;
          *uint64_t v16 = v62;
          --a4;
          uint64_t v30 = *v12;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        uint64_t v79 = *v12;
        *uint64_t v12 = v59;
        *uint64_t v16 = v79;
        --a4;
        uint64_t v30 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v60 < v57) {
        goto LABEL_54;
      }
      *unint64_t v33 = v55;
      *uint64_t v16 = v56;
      unint64_t v33 = &v12[v14 >> 1];
      uint64_t v55 = v59;
      if (v60 < v58) {
        goto LABEL_54;
      }
      uint64_t v61 = *v12;
      *uint64_t v12 = v56;
      *uint64_t v16 = v61;
      --a4;
      uint64_t v30 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v64 = 0;
      uint64_t v65 = **a3;
      double v66 = *(double *)(v65 + 8 * v30);
      do
        uint64_t v67 = v12[++v64];
      while (*(double *)(v65 + 8 * v67) < v66);
      uint64_t v68 = &v12[v64];
      unint64_t v69 = a2;
      if (v64 == 1)
      {
        unint64_t v69 = a2;
        do
        {
          if (v68 >= v69) {
            break;
          }
          uint64_t v71 = *--v69;
        }
        while (*(double *)(v65 + 8 * v71) >= v66);
      }
      else
      {
        do
          uint64_t v70 = *--v69;
        while (*(double *)(v65 + 8 * v70) >= v66);
      }
      if (v68 >= v69)
      {
        unint64_t v77 = v68 - 1;
        if (v68 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        *uint64_t v12 = *v77;
        goto LABEL_75;
      }
      uint64_t v72 = *v69;
      unint64_t v73 = &v12[v64];
      uint64_t v74 = v69;
      do
      {
        uint64_t *v73 = v72;
        uint64_t *v74 = v67;
        do
        {
          uint64_t v75 = v73[1];
          ++v73;
          uint64_t v67 = v75;
        }
        while (*(double *)(v65 + 8 * v75) < v66);
        do
        {
          uint64_t v76 = *--v74;
          uint64_t v72 = v76;
        }
        while (*(double *)(v65 + 8 * v76) >= v66);
      }
      while (v73 < v74);
      unint64_t v77 = v73 - 1;
      if (v73 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      *unint64_t v77 = v30;
      if (v68 < v69) {
        goto LABEL_78;
      }
      BOOL v78 = sub_1C4A39430(v12, v77, *a3);
      uint64_t v12 = v77 + 1;
      uint64_t result = sub_1C4A39430(v77 + 1, a2, *a3);
      if (result)
      {
        a2 = v77;
        if (v78) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v78)
      {
LABEL_78:
        uint64_t result = sub_1C4A3892C(v11, v77, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v77 + 1;
      }
    }
  }
  int64x2_t v109 = *a3;
  if (a5)
  {
    if (v12 != a2)
    {
      uint64_t v110 = v12 + 1;
      if (v12 + 1 != a2)
      {
        uint64_t v111 = *v109;
        uint64_t v112 = 8;
        uint64_t v113 = v12;
        do
        {
          uint64_t v116 = *v113;
          uint64_t v115 = v113[1];
          uint64_t v113 = v110;
          double v117 = *(double *)(v111 + 8 * v115);
          if (v117 < *(double *)(v111 + 8 * v116))
          {
            uint64_t v118 = v112;
            do
            {
              *(uint64_t *)((char *)v12 + v118) = v116;
              uint64_t v119 = v118 - 8;
              if (v118 == 8)
              {
                uint64_t v114 = v12;
                goto LABEL_118;
              }
              uint64_t v116 = *(uint64_t *)((char *)v12 + v118 - 16);
              v118 -= 8;
            }
            while (v117 < *(double *)(v111 + 8 * v116));
            uint64_t v114 = (uint64_t *)((char *)v12 + v119);
LABEL_118:
            uint64_t *v114 = v115;
          }
          uint64_t v110 = v113 + 1;
          v112 += 8;
        }
        while (v113 + 1 != a2);
      }
    }
  }
  else if (v12 != a2)
  {
    uint64_t v151 = v12 + 1;
    if (v12 + 1 != a2)
    {
      uint64_t v152 = *v109;
      do
      {
        uint64_t v154 = *v11;
        uint64_t v153 = v11[1];
        uint64_t v11 = v151;
        double v155 = *(double *)(v152 + 8 * v153);
        if (v155 < *(double *)(v152 + 8 * v154))
        {
          do
          {
            uint64_t *v151 = v154;
            uint64_t v154 = *(v151 - 2);
            --v151;
          }
          while (v155 < *(double *)(v152 + 8 * v154));
          uint64_t *v151 = v153;
        }
        uint64_t v151 = v11 + 1;
      }
      while (v11 + 1 != a2);
    }
  }
  return result;
}

BOOL sub_1C4A39430(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      uint64_t v14 = *(a2 - 1);
      uint64_t v15 = *a1;
      if (*(double *)(*a3 + 8 * v14) >= *(double *)(*a3 + 8 * *a1)) {
        return 1;
      }
      *a1 = v14;
      *(a2 - 1) = v15;
      return 1;
    case 3:
      uint64_t v16 = *a3;
      uint64_t v17 = *a1;
      uint64_t v18 = a1[1];
      double v19 = *(double *)(*a3 + 8 * v18);
      double v20 = *(double *)(*a3 + 8 * *a1);
      uint64_t v21 = *(a2 - 1);
      double v22 = *(double *)(*a3 + 8 * v21);
      if (v19 >= v20)
      {
        if (v22 >= v19) {
          return 1;
        }
        a1[1] = v21;
        *(a2 - 1) = v18;
        uint64_t v44 = *a1;
        uint64_t v43 = a1[1];
        if (*(double *)(v16 + 8 * v43) >= *(double *)(v16 + 8 * *a1)) {
          return 1;
        }
        *a1 = v43;
        a1[1] = v44;
        return 1;
      }
      else if (v22 >= v19)
      {
        *a1 = v18;
        a1[1] = v17;
        uint64_t v50 = *(a2 - 1);
        if (*(double *)(v16 + 8 * v50) >= v20) {
          return 1;
        }
        a1[1] = v50;
        *(a2 - 1) = v17;
        return 1;
      }
      else
      {
        *a1 = v21;
        *(a2 - 1) = v17;
        return 1;
      }
    case 4:
      double v23 = a1 + 1;
      uint64_t v24 = a1[1];
      uint64_t v25 = a1 + 2;
      uint64_t v26 = a1[2];
      uint64_t v27 = *a3;
      double v28 = *(double *)(*a3 + 8 * v24);
      uint64_t v29 = *a1;
      double v30 = *(double *)(*a3 + 8 * *a1);
      double v31 = *(double *)(*a3 + 8 * v26);
      if (v28 < v30)
      {
        int64x2_t v32 = a1;
        unint64_t v33 = a1 + 2;
        uint64_t v34 = *a1;
        if (v31 >= v28)
        {
          *a1 = v24;
          a1[1] = v29;
          int64x2_t v32 = a1 + 1;
          unint64_t v33 = a1 + 2;
          uint64_t v34 = v29;
          if (v31 >= v30) {
            goto LABEL_38;
          }
        }
LABEL_35:
        *int64x2_t v32 = v26;
        *unint64_t v33 = v29;
        uint64_t v24 = v34;
LABEL_36:
        uint64_t v45 = *(a2 - 1);
        if (*(double *)(v27 + 8 * v45) >= *(double *)(v27 + 8 * v24)) {
          return 1;
        }
        goto LABEL_39;
      }
      if (v31 < v28)
      {
        *double v23 = v26;
        *uint64_t v25 = v24;
        int64x2_t v32 = a1;
        unint64_t v33 = a1 + 1;
        uint64_t v34 = v24;
        if (v31 >= v30) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_38:
      uint64_t v24 = v26;
      uint64_t v45 = *(a2 - 1);
      if (*(double *)(v27 + 8 * v45) >= *(double *)(v27 + 8 * v24)) {
        return 1;
      }
LABEL_39:
      *uint64_t v25 = v45;
      *(a2 - 1) = v24;
      uint64_t v46 = *v25;
      uint64_t v47 = *v23;
      double v48 = *(double *)(v27 + 8 * v46);
      if (v48 >= *(double *)(v27 + 8 * v47)) {
        return 1;
      }
      a1[1] = v46;
      a1[2] = v47;
      uint64_t v49 = *a1;
      if (v48 >= *(double *)(v27 + 8 * *a1)) {
        return 1;
      }
      *a1 = v46;
      a1[1] = v49;
      return 1;
    case 5:
      sub_1C49CB30C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, *a3);
      return 1;
    default:
      BOOL v5 = a1 + 2;
      uint64_t v4 = a1[2];
      uint64_t v6 = a1[1];
      uint64_t v7 = *a3;
      double v8 = *(double *)(*a3 + 8 * v6);
      uint64_t v9 = *a1;
      double v10 = *(double *)(*a3 + 8 * *a1);
      double v11 = *(double *)(*a3 + 8 * v4);
      if (v8 >= v10)
      {
        if (v11 >= v8 || (a1[1] = v4, *v5 = v6, uint64_t v12 = a1, v13 = a1 + 1, v11 >= v10))
        {
LABEL_20:
          uint64_t v35 = a1 + 3;
          if (a1 + 3 == a2) {
            return 1;
          }
          int v36 = 0;
          for (uint64_t i = 24; ; i += 8)
          {
            uint64_t v38 = *v35;
            uint64_t v39 = *v5;
            double v40 = *(double *)(v7 + 8 * *v35);
            if (v40 < *(double *)(v7 + 8 * v39)) {
              break;
            }
LABEL_23:
            BOOL v5 = v35++;
            if (v35 == a2) {
              return 1;
            }
          }
          uint64_t v41 = i;
          do
          {
            *(uint64_t *)((char *)a1 + v41) = v39;
            uint64_t v42 = v41 - 8;
            if (v41 == 8)
            {
              *a1 = v38;
              if (++v36 != 8) {
                goto LABEL_23;
              }
              return v35 + 1 == a2;
            }
            uint64_t v39 = *(uint64_t *)((char *)a1 + v41 - 16);
            v41 -= 8;
          }
          while (v40 < *(double *)(v7 + 8 * v39));
          *(uint64_t *)((char *)a1 + v42) = v38;
          if (++v36 != 8) {
            goto LABEL_23;
          }
          return v35 + 1 == a2;
        }
      }
      else
      {
        uint64_t v12 = a1;
        uint64_t v13 = a1 + 2;
        if (v11 >= v8)
        {
          *a1 = v6;
          a1[1] = v9;
          uint64_t v12 = a1 + 1;
          uint64_t v13 = a1 + 2;
          if (v11 >= v10) {
            goto LABEL_20;
          }
        }
      }
      *uint64_t v12 = v4;
      *uint64_t v13 = v9;
      goto LABEL_20;
  }
}

char *sub_1C4A397D8(char **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1C4A38810();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v5 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0xAAAAAAAAAAAAAAALL) {
    sub_1C4949AA8();
  }
  uint64_t v7 = 24 * v5;
  double v8 = (char *)operator new(24 * v5);
  uint64_t v9 = &v8[24 * v3];
  double v10 = &v8[v7];
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *((void *)v9 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  double v11 = v9 + 24;
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      long long v14 = *(_OWORD *)(v13 - 24);
      v13 -= 24;
      *(_OWORD *)(v9 - 24) = v14;
      v9 -= 24;
      *((void *)v9 + 2) = *((void *)v13 + 2);
      *(void *)uint64_t v13 = 0;
      *((void *)v13 + 1) = 0;
      *((void *)v13 + 2) = 0;
    }
    while (v13 != v12);
    uint64_t v13 = *a1;
    uint64_t v15 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (v15 != v13)
    {
      uint64_t v16 = v15;
      do
      {
        uint64_t v18 = (void *)*((void *)v16 - 3);
        v16 -= 24;
        uint64_t v17 = v18;
        if (v18)
        {
          *((void *)v15 - 2) = v17;
          operator delete(v17);
        }
        uint64_t v15 = v16;
      }
      while (v16 != v13);
    }
  }
  if (v13) {
    operator delete(v13);
  }
  return v11;
}

void sub_1C4A39928(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  double v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      double v11 = *(char ***)(a1 + 8);
      uint64_t v12 = *(char ***)a1;
      if (v11 != v10)
      {
        uint64_t v13 = *(char ***)(a1 + 8);
        do
        {
          uint64_t v15 = *(v13 - 3);
          v13 -= 3;
          long long v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          double v11 = v13;
        }
        while (v13 != v10);
        uint64_t v12 = *(char ***)a1;
      }
      *(void *)(a1 + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_40;
    }
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v21 = 2 * v20;
    if (2 * v20 <= __sz) {
      uint64_t v21 = __sz;
    }
    unint64_t v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL) {
LABEL_40:
    }
      sub_1C4A38810();
    uint64_t v23 = 3 * v22;
    uint64_t v24 = operator new(24 * v22);
    *(void *)a1 = v24;
    *(void *)(a1 + 8) = v24;
    *(void *)(a1 + 16) = &v24[v23];
    uint64_t v25 = sub_1C4A38828(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(void *)(a1 + 8) = v25;
    return;
  }
  uint64_t v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    uint64_t v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      uint64_t v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10) {
          sub_1C4A39BA0(v10, *v6, v6[1], (v6[1] - *v6) >> 5);
        }
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      double v10 = *(char ***)(a1 + 8);
    }
    uint64_t v25 = sub_1C4A38828(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    double v19 = *(char ***)a1;
    do
    {
      if (v6 != v10) {
        sub_1C4A39BA0(v10, *v6, v6[1], (v6[1] - *v6) >> 5);
      }
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    uint64_t v16 = *(char ***)(a1 + 8);
    if (v16 == v19) {
      goto LABEL_39;
    }
    goto LABEL_35;
  }
  double v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    uint64_t v26 = v16;
    do
    {
      double v28 = *(v26 - 3);
      v26 -= 3;
      uint64_t v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      uint64_t v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(void *)(a1 + 8) = v19;
}

void sub_1C4A39B90(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C4A39B98(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_1C4A39BA0(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 5)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 59) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 59) {
LABEL_22:
    }
      sub_1C4A38810();
    uint64_t v13 = 4 * v12;
    uint64_t result = operator new(32 * v12);
    uint64_t v9 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    uint64_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14 - 7);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  uint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 5;
  if (v17 >= __sz)
  {
    uint64_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    size_t v19 = v14 - 7;
    unint64_t v20 = (void *)*result;
LABEL_20:
    uint64_t result = memmove(v20, __src, v19);
    goto LABEL_21;
  }
  uint64_t v18 = &__src[32 * v17];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9 - 7);
    uint64_t v9 = (char *)*v15;
  }
  uint64_t v14 = a3 - v18;
  if (v14)
  {
    size_t v19 = v14 - 7;
    unint64_t v20 = v9;
    __vImage_Buffer src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *uint64_t v15 = &v9[v14];
  return result;
}

__n128 sub_1C4A39CF0(char *a1, char *a2, uint64_t **a3, unint64_t a4, char *a5, uint64_t a6, __n128 result)
{
  if (a4 < 2) {
    return result;
  }
  uint64_t v9 = (__n128 *)a1;
  if (a4 == 2)
  {
    uint64_t v10 = *((void *)a2 - 1);
    uint64_t v11 = *(void *)a1;
    uint64_t v12 = **a3;
    result.n128_u64[0] = *(void *)(v12 + 32 * v10);
    double v13 = *(double *)(v12 + 32 * *(void *)a1);
    if (result.n128_f64[0] >= v13 || *(double *)(v12 + 32 * v10 + 8) <= *(double *)(v12 + 32 * v11 + 8))
    {
      if (v13 >= result.n128_f64[0])
      {
        result.n128_f64[0] = result.n128_f64[0] + *(double *)(v12 + 32 * v10 + 8);
        if (result.n128_f64[0] <= v13 + *(double *)(v12 + 32 * v11 + 8)) {
          return result;
        }
      }
      else
      {
        double v14 = *(double *)(v12 + 32 * v11 + 8);
        double v15 = *(double *)(v12 + 32 * v10 + 8);
        if (v14 > v15) {
          return result;
        }
        result.n128_f64[0] = result.n128_f64[0] + v15;
        if (result.n128_f64[0] <= v13 + v14) {
          return result;
        }
      }
    }
    *(void *)a1 = v10;
    *((void *)a2 - 1) = v11;
    return result;
  }
  if ((uint64_t)a4 <= 128)
  {
    if (a1 == a2) {
      return result;
    }
    unint64_t v17 = a1 + 8;
    if (a1 + 8 == a2) {
      return result;
    }
    uint64_t v18 = 0;
    uint64_t v19 = **a3;
    unint64_t v20 = a1;
    while (1)
    {
      uint64_t v21 = v20;
      unint64_t v20 = v17;
      uint64_t v22 = *(void *)v17;
      uint64_t v23 = *(void *)v21;
      result.n128_u64[0] = *(void *)(v19 + 32 * v22);
      double v24 = *(double *)(v19 + 32 * *(void *)v21);
      if (result.n128_f64[0] < v24)
      {
        double v25 = *(double *)(v19 + 32 * v22 + 8);
        if (v25 > *(double *)(v19 + 32 * v23 + 8)) {
          break;
        }
      }
      if (v24 >= result.n128_f64[0])
      {
        double v25 = *(double *)(v19 + 32 * v22 + 8);
        if (result.n128_f64[0] + v25 > v24 + *(double *)(v19 + 32 * v23 + 8)) {
          break;
        }
      }
      else
      {
        double v26 = *(double *)(v19 + 32 * v23 + 8);
        double v25 = *(double *)(v19 + 32 * v22 + 8);
        if (v26 <= v25 && result.n128_f64[0] + v25 > v24 + v26) {
          break;
        }
      }
LABEL_15:
      unint64_t v17 = v20 + 8;
      v18 += 8;
      if (v20 + 8 == a2) {
        return result;
      }
    }
    *(void *)unint64_t v20 = v23;
    if (v21 == a1)
    {
LABEL_13:
      uint64_t v21 = a1;
    }
    else
    {
      uint64_t v27 = v18;
      while (1)
      {
        uint64_t v28 = *(void *)&a1[v27 - 8];
        uint64_t v29 = (double *)(v19 + 32 * v28);
        double v30 = *v29;
        double v31 = v29[1];
        if (result.n128_f64[0] >= *v29 || v25 <= v31)
        {
          if (v30 < result.n128_f64[0] && v31 > v25) {
            goto LABEL_14;
          }
          if (result.n128_f64[0] + v25 <= v30 + v31) {
            break;
          }
        }
        v21 -= 8;
        *(void *)&a1[v27] = v28;
        v27 -= 8;
        if (!v27) {
          goto LABEL_13;
        }
      }
      uint64_t v21 = &a1[v27];
    }
LABEL_14:
    *(void *)uint64_t v21 = v22;
    goto LABEL_15;
  }
  unint64_t v35 = a4 >> 1;
  int v36 = &a1[8 * (a4 >> 1)];
  unint64_t v37 = a4 >> 1;
  if ((uint64_t)a4 > a6)
  {
    sub_1C4A39CF0(a1, v36, a3, v37, a5, a6);
    sub_1C4A39CF0(&v9->n128_u64[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
    result.n128_u64[0] = sub_1C4A3A6B8(v9, (__n128 *)((char *)v9 + 8 * (a4 >> 1)), a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6, v38).n128_u64[0];
    return result;
  }
  __n128 v39 = sub_1C4A3A1D8(a1, v36, a3, v37, a5, result);
  double v40 = &a5[8 * v35];
  result.n128_u64[0] = sub_1C4A3A1D8(&v9->n128_i8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v40, v39).n128_u64[0];
  uint64_t v41 = *a3;
  uint64_t v42 = v40;
  uint64_t v43 = a5;
  uint64_t v44 = v9;
  uint64_t v45 = &a5[8 * a4];
  do
  {
    while (1)
    {
      if (v42 == v45)
      {
        if (v43 == v40) {
          return result;
        }
        unint64_t v56 = &a5[8 * v35] - v43 - 8;
        if (v56 >= 0x38 && (unint64_t)((char *)v9 - v43) >= 0x20)
        {
          uint64_t v66 = 0;
          uint64_t v67 = (v56 >> 3) + 1;
          uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
          double v57 = &v43[v68];
          double v58 = (__n128 *)((char *)v44 + v68);
          uint64_t v69 = v67 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            uint64_t v70 = &v44[v66];
            uint64_t result = *(__n128 *)&v43[v66 * 16];
            __n128 v71 = *(__n128 *)&v43[v66 * 16 + 16];
            *uint64_t v70 = result;
            v70[1] = v71;
            v66 += 2;
            v69 -= 4;
          }
          while (v69);
          if (v67 == (v67 & 0x3FFFFFFFFFFFFFFCLL)) {
            return result;
          }
        }
        else
        {
          double v57 = v43;
          double v58 = v44;
        }
        do
        {
          unint64_t v59 = *(void *)v57;
          v57 += 8;
          v58->n128_u64[0] = v59;
          double v58 = (__n128 *)((char *)v58 + 8);
        }
        while (v57 != v40);
        return result;
      }
      unint64_t v46 = *(void *)v42;
      unint64_t v47 = *(void *)v43;
      uint64_t v48 = *v41;
      result.n128_u64[0] = *(void *)(*v41 + 32 * *(void *)v42);
      double v49 = *(double *)(*v41 + 32 * *(void *)v43);
      if (result.n128_f64[0] < v49 && *(double *)(v48 + 32 * v46 + 8) > *(double *)(v48 + 32 * v47 + 8)) {
        goto LABEL_44;
      }
      if (v49 < result.n128_f64[0]) {
        break;
      }
      result.n128_f64[0] = result.n128_f64[0] + *(double *)(v48 + 32 * v46 + 8);
      if (result.n128_f64[0] <= v49 + *(double *)(v48 + 32 * v47 + 8)) {
        goto LABEL_53;
      }
LABEL_44:
      v44->n128_u64[0] = v46;
      uint64_t v44 = (__n128 *)((char *)v44 + 8);
      v42 += 8;
      uint64_t v9 = (__n128 *)((char *)v9 + 8);
      if (v43 == v40) {
        goto LABEL_54;
      }
    }
    double v50 = *(double *)(v48 + 32 * v47 + 8);
    double v51 = *(double *)(v48 + 32 * v46 + 8);
    if (v50 <= v51)
    {
      result.n128_f64[0] = result.n128_f64[0] + v51;
      if (result.n128_f64[0] > v49 + v50) {
        goto LABEL_44;
      }
    }
LABEL_53:
    v44->n128_u64[0] = v47;
    uint64_t v44 = (__n128 *)((char *)v44 + 8);
    v43 += 8;
    uint64_t v9 = (__n128 *)((char *)v9 + 8);
  }
  while (v43 != v40);
LABEL_54:
  if (v42 == v45) {
    return result;
  }
  unint64_t v52 = &a5[8 * a4] - v42 - 8;
  if (v52 < 0x48 || (unint64_t)((char *)v9 - v42) < 0x20)
  {
    uint64_t v53 = v42;
    uint64_t v54 = v44;
    do
    {
LABEL_58:
      unint64_t v55 = *(void *)v53;
      v53 += 8;
      v54->n128_u64[0] = v55;
      uint64_t v54 = (__n128 *)((char *)v54 + 8);
    }
    while (v53 != v45);
    return result;
  }
  uint64_t v60 = 0;
  uint64_t v61 = (v52 >> 3) + 1;
  uint64_t v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v53 = &v42[v62];
  uint64_t v54 = (__n128 *)((char *)v44 + v62);
  uint64_t v63 = v61 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    uint64_t v64 = &v44[v60];
    uint64_t result = *(__n128 *)&v42[v60 * 16];
    __n128 v65 = *(__n128 *)&v42[v60 * 16 + 16];
    *uint64_t v64 = result;
    v64[1] = v65;
    v60 += 2;
    v63 -= 4;
  }
  while (v63);
  if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_58;
  }
  return result;
}

__n128 sub_1C4A3A1D8(char *a1, char *a2, uint64_t **a3, unint64_t a4, char *a5, __n128 result)
{
  if (!a4) {
    return result;
  }
  uint64_t v6 = a5;
  uint64_t v8 = a1;
  if (a4 == 1)
  {
LABEL_11:
    *(void *)uint64_t v6 = *(void *)v8;
    return result;
  }
  if (a4 == 2)
  {
    uint64_t v11 = *((void *)a2 - 1);
    uint64_t v12 = *(void *)a1;
    uint64_t v13 = **a3;
    result.n128_u64[0] = *(void *)(v13 + 32 * v11);
    double v14 = *(double *)(v13 + 32 * *(void *)a1);
    if (result.n128_f64[0] < v14 && *(double *)(v13 + 32 * v11 + 8) > *(double *)(v13 + 32 * v12 + 8)) {
      goto LABEL_10;
    }
    if (v14 >= result.n128_f64[0])
    {
      result.n128_f64[0] = result.n128_f64[0] + *(double *)(v13 + 32 * v11 + 8);
      if (result.n128_f64[0] > v14 + *(double *)(v13 + 32 * v12 + 8)) {
        goto LABEL_10;
      }
    }
    else
    {
      double v15 = *(double *)(v13 + 32 * v12 + 8);
      double v16 = *(double *)(v13 + 32 * v11 + 8);
      if (v15 <= v16)
      {
        result.n128_f64[0] = result.n128_f64[0] + v16;
        if (result.n128_f64[0] > v14 + v15) {
          goto LABEL_10;
        }
      }
    }
    uint64_t v11 = *(void *)a1;
    uint64_t v8 = a2 - 8;
LABEL_10:
    *(void *)a5 = v11;
    uint64_t v6 = a5 + 8;
    goto LABEL_11;
  }
  if ((uint64_t)a4 <= 8)
  {
    if (a1 == a2) {
      return result;
    }
    unint64_t v17 = *a3;
    uint64_t v18 = a1 + 8;
    *(void *)a5 = *(void *)a1;
    if (a1 + 8 == a2) {
      return result;
    }
    uint64_t v19 = 0;
    uint64_t v20 = *v17;
    uint64_t v21 = a5;
    uint64_t v22 = (uint64_t *)a5;
    while (1)
    {
      uint64_t v26 = *v22++;
      uint64_t v25 = v26;
      uint64_t v27 = *(void *)v18;
      result.n128_u64[0] = *(void *)(v20 + 32 * *(void *)v18);
      double v28 = *(double *)(v20 + 32 * v26);
      if (result.n128_f64[0] < v28 && *(double *)(v20 + 32 * v27 + 8) > *(double *)(v20 + 32 * v25 + 8)) {
        goto LABEL_24;
      }
      if (v28 >= result.n128_f64[0])
      {
        result.n128_f64[0] = result.n128_f64[0] + *(double *)(v20 + 32 * v27 + 8);
        if (result.n128_f64[0] <= v28 + *(double *)(v20 + 32 * v25 + 8)) {
          goto LABEL_35;
        }
LABEL_24:
        *((void *)v21 + 1) = v25;
        uint64_t v23 = a5;
        if (v21 != a5)
        {
          uint64_t v31 = v19;
          while (1)
          {
            uint64_t v34 = *(void *)v18;
            uint64_t v35 = *(void *)&a5[v31 - 8];
            result.n128_u64[0] = *(void *)(v20 + 32 * *(void *)v18);
            double v36 = *(double *)(v20 + 32 * v35);
            if (result.n128_f64[0] >= v36 || *(double *)(v20 + 32 * v34 + 8) <= *(double *)(v20 + 32 * v35 + 8))
            {
              if (v36 >= result.n128_f64[0])
              {
                double v32 = *(double *)(v20 + 32 * v34 + 8);
                double v33 = *(double *)(v20 + 32 * v35 + 8);
              }
              else
              {
                double v33 = *(double *)(v20 + 32 * v35 + 8);
                double v32 = *(double *)(v20 + 32 * v34 + 8);
                if (v33 > v32)
                {
                  uint64_t v23 = v21;
                  goto LABEL_18;
                }
              }
              result.n128_f64[0] = result.n128_f64[0] + v32;
              if (result.n128_f64[0] <= v36 + v33) {
                break;
              }
            }
            v21 -= 8;
            *(void *)&a5[v31] = v35;
            v31 -= 8;
            if (!v31)
            {
              uint64_t v23 = a5;
              goto LABEL_18;
            }
          }
          uint64_t v23 = &a5[v31];
        }
LABEL_18:
        uint64_t v24 = *(void *)v18;
        v18 += 8;
        *(void *)uint64_t v23 = v24;
        v19 += 8;
        uint64_t v21 = (char *)v22;
        if (v18 == a2) {
          return result;
        }
      }
      else
      {
        double v29 = *(double *)(v20 + 32 * v25 + 8);
        double v30 = *(double *)(v20 + 32 * v27 + 8);
        if (v29 <= v30)
        {
          result.n128_f64[0] = result.n128_f64[0] + v30;
          if (result.n128_f64[0] > v28 + v29) {
            goto LABEL_24;
          }
        }
LABEL_35:
        *uint64_t v22 = v27;
        v18 += 8;
        v19 += 8;
        uint64_t v21 = (char *)v22;
        if (v18 == a2) {
          return result;
        }
      }
    }
  }
  unint64_t v37 = a4 >> 1;
  uint64_t v38 = 8 * (a4 >> 1);
  __n128 v39 = &a1[v38];
  sub_1C4A39CF0(a1, &a1[v38], a3, a4 >> 1, a5, a4 >> 1);
  sub_1C4A39CF0(&v8[v38], a2, a3, a4 - v37, &v6[v38], a4 - v37);
  double v40 = *a3;
  uint64_t v41 = v6;
  uint64_t v42 = v8;
  uint64_t v43 = &v8[v38];
  do
  {
    while (1)
    {
      if (v43 == a2)
      {
        if (v42 == v39) {
          return result;
        }
        unint64_t v54 = &v8[8 * v37] - v42 - 8;
        if (v54 >= 0x38 && (unint64_t)(v41 - v42) >= 0x20)
        {
          uint64_t v64 = 0;
          uint64_t v65 = (v54 >> 3) + 1;
          uint64_t v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v55 = &v6[v66];
          unint64_t v56 = &v42[v66];
          uint64_t v67 = v65 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            uint64_t v68 = &v6[v64];
            uint64_t result = *(__n128 *)&v42[v64];
            long long v69 = *(_OWORD *)&v42[v64 + 16];
            *(__n128 *)uint64_t v68 = result;
            *((_OWORD *)v68 + 1) = v69;
            v64 += 32;
            v67 -= 4;
          }
          while (v67);
          if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL)) {
            return result;
          }
        }
        else
        {
          unint64_t v55 = v6;
          unint64_t v56 = v42;
        }
        do
        {
          uint64_t v57 = *(void *)v56;
          v56 += 8;
          *(void *)unint64_t v55 = v57;
          v55 += 8;
        }
        while (v56 != v39);
        return result;
      }
      uint64_t v44 = *(void *)v43;
      uint64_t v45 = *(void *)v42;
      uint64_t v46 = *v40;
      result.n128_u64[0] = *(void *)(*v40 + 32 * *(void *)v43);
      double v47 = *(double *)(*v40 + 32 * *(void *)v42);
      if (result.n128_f64[0] < v47 && *(double *)(v46 + 32 * v44 + 8) > *(double *)(v46 + 32 * v45 + 8)) {
        goto LABEL_39;
      }
      if (v47 < result.n128_f64[0]) {
        break;
      }
      result.n128_f64[0] = result.n128_f64[0] + *(double *)(v46 + 32 * v44 + 8);
      if (result.n128_f64[0] <= v47 + *(double *)(v46 + 32 * v45 + 8)) {
        goto LABEL_48;
      }
LABEL_39:
      *(void *)uint64_t v6 = v44;
      v6 += 8;
      v43 += 8;
      v41 += 8;
      if (v42 == v39) {
        goto LABEL_49;
      }
    }
    double v48 = *(double *)(v46 + 32 * v45 + 8);
    double v49 = *(double *)(v46 + 32 * v44 + 8);
    if (v48 <= v49)
    {
      result.n128_f64[0] = result.n128_f64[0] + v49;
      if (result.n128_f64[0] > v47 + v48) {
        goto LABEL_39;
      }
    }
LABEL_48:
    *(void *)uint64_t v6 = v45;
    v6 += 8;
    v42 += 8;
    v41 += 8;
  }
  while (v42 != v39);
LABEL_49:
  if (v43 == a2) {
    return result;
  }
  unint64_t v50 = a2 - v43 - 8;
  if (v50 < 0x48 || (unint64_t)(v41 - v43) < 0x20)
  {
    double v51 = v6;
    unint64_t v52 = v43;
    do
    {
LABEL_53:
      uint64_t v53 = *(void *)v52;
      v52 += 8;
      *(void *)double v51 = v53;
      v51 += 8;
    }
    while (v52 != a2);
    return result;
  }
  uint64_t v58 = 0;
  uint64_t v59 = (v50 >> 3) + 1;
  uint64_t v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
  double v51 = &v6[v60];
  unint64_t v52 = &v43[v60];
  uint64_t v61 = v59 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    uint64_t v62 = &v6[v58];
    uint64_t result = *(__n128 *)&v43[v58];
    long long v63 = *(_OWORD *)&v43[v58 + 16];
    *(__n128 *)uint64_t v62 = result;
    *((_OWORD *)v62 + 1) = v63;
    v58 += 32;
    v61 -= 4;
  }
  while (v61);
  if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_53;
  }
  return result;
}

__n128 sub_1C4A3A6B8(__n128 *a1, __n128 *a2, char *a3, uint64_t **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, __n128 result)
{
  if (!a6) {
    return result;
  }
  uint64_t v9 = a6;
  while (a5 > a8 && v9 > a8)
  {
    if (!a5) {
      return result;
    }
    unint64_t v13 = 0;
    uint64_t v14 = **a4;
    double v15 = (void *)(v14 + 32 * a2->n128_u64[0]);
    unint64_t v17 = *v15;
    double v16 = (double *)(v15 + 1);
    result.n128_u64[0] = v17;
    uint64_t v18 = -a5;
    while (1)
    {
      uint64_t v22 = a1->n128_i64[v13 / 8];
      double v23 = *(double *)(v14 + 32 * v22);
      if (result.n128_f64[0] < v23 && *v16 > *(double *)(v14 + 32 * v22 + 8)) {
        break;
      }
      if (v23 >= result.n128_f64[0])
      {
        double v19 = *v16;
        double v20 = *(double *)(v14 + 32 * v22 + 8);
LABEL_8:
        if (result.n128_f64[0] + v19 > v23 + v20) {
          break;
        }
        goto LABEL_9;
      }
      double v20 = *(double *)(v14 + 32 * v22 + 8);
      double v19 = *v16;
      if (v20 <= *v16) {
        goto LABEL_8;
      }
LABEL_9:
      v13 += 8;
      if (__CFADD__(v18++, 1)) {
        return result;
      }
    }
    uint64_t v24 = (__n128 *)((char *)a1 + v13);
    if (-v18 >= v9)
    {
      if (v18 == -1)
      {
        a1->n128_u64[v13 / 8] = a2->n128_u64[0];
        a2->n128_u64[0] = v22;
        return result;
      }
      if (v18 <= 0) {
        uint64_t v39 = -v18;
      }
      else {
        uint64_t v39 = 1 - v18;
      }
      uint64_t v40 = v39 >> 1;
      double v28 = (__n128 *)((char *)a1 + 8 * (v39 >> 1) + v13);
      if (a2 == (__n128 *)a3)
      {
        uint64_t v26 = 0;
LABEL_37:
        uint64_t v41 = (8 * v26) >> 3;
        uint64_t v27 = v28;
        uint64_t v42 = &a2->n128_i8[8 * v26];
        if (v28 != a2) {
          goto LABEL_41;
        }
        goto LABEL_38;
      }
      uint64_t v26 = 0;
      unint64_t v48 = (a3 - (char *)a2) >> 3;
      double v49 = (double *)(v14 + 32 * v28->n128_u64[0]);
      double v51 = *v49;
      unint64_t v50 = v49 + 1;
      double v52 = v51;
      while (2)
      {
        unint64_t v53 = v48 >> 1;
        unint64_t v54 = (v48 >> 1) + v26;
        uint64_t v55 = a2->n128_i64[v54];
        double v56 = *(double *)(v14 + 32 * v55);
        if (v56 >= v52 || *(double *)(v14 + 32 * v55 + 8) <= *v50)
        {
          if (v52 >= v56)
          {
            if (v56 + *(double *)(v14 + 32 * v55 + 8) <= v52 + *v50) {
              goto LABEL_49;
            }
          }
          else
          {
            double v57 = *(double *)(v14 + 32 * v55 + 8);
            if (*v50 > v57 || v56 + v57 <= v52 + *v50)
            {
LABEL_49:
              unint64_t v48 = v53;
              if (!v53) {
                goto LABEL_37;
              }
              continue;
            }
          }
        }
        break;
      }
      uint64_t v26 = v54 + 1;
      unint64_t v53 = v48 + ~v53;
      goto LABEL_49;
    }
    if (v9 >= 0) {
      uint64_t v25 = v9;
    }
    else {
      uint64_t v25 = v9 + 1;
    }
    uint64_t v26 = v25 >> 1;
    uint64_t v27 = a2;
    double v28 = (__n128 *)((char *)a1 + v13);
    if ((char *)a2 - (char *)a1 != v13)
    {
      unint64_t v29 = (uint64_t)((char *)a2 - (char *)a1 - v13) >> 3;
      double v30 = (double *)(v14 + 32 * a2->n128_u64[v26]);
      double v32 = *v30;
      uint64_t v31 = v30 + 1;
      double v33 = v32;
      double v28 = (__n128 *)((char *)a1 + v13);
      while (1)
      {
        unint64_t v34 = v29 >> 1;
        uint64_t v35 = &v28->n128_u64[v29 >> 1];
        unint64_t v36 = *v35;
        double v37 = *(double *)(v14 + 32 * *v35);
        if (v33 < v37 && *v31 > *(double *)(v14 + 32 * v36 + 8)) {
          goto LABEL_22;
        }
        if (v37 >= v33)
        {
          if (v33 + *v31 > v37 + *(double *)(v14 + 32 * v36 + 8)) {
            goto LABEL_22;
          }
        }
        else
        {
          double v38 = *(double *)(v14 + 32 * v36 + 8);
          if (v38 <= *v31 && v33 + *v31 > v37 + v38) {
            goto LABEL_22;
          }
        }
        double v28 = (__n128 *)(v35 + 1);
        unint64_t v34 = v29 + ~v34;
LABEL_22:
        unint64_t v29 = v34;
        if (!v34)
        {
          uint64_t v27 = v28;
          break;
        }
      }
    }
    uint64_t v40 = (uint64_t)((char *)v27 - (char *)a1 - v13) >> 3;
    uint64_t v41 = v26;
    uint64_t v42 = &a2->n128_i8[8 * v26];
    if (v28 != a2)
    {
LABEL_41:
      uint64_t v43 = v27;
      if (v26)
      {
        uint64_t v44 = (__n128 *)&v28->n128_i8[8];
        if (&v28->n128_i8[8] == (__int8 *)a2)
        {
          unint64_t v141 = v28->n128_u64[0];
          uint64_t v143 = v41;
          int64_t v58 = v42 - (char *)a2;
          uint64_t v147 = a4;
          uint64_t v149 = a7;
          uint64_t v59 = a3;
          uint64_t v60 = a8;
          uint64_t v145 = v40;
          memmove(v28, a2, v42 - (char *)a2);
          uint64_t v41 = v143;
          uint64_t v40 = v145;
          uint64_t v24 = (__n128 *)((char *)a1 + v13);
          a4 = v147;
          a8 = v60;
          a3 = v59;
          a7 = v149;
          uint64_t v43 = (__n128 *)((char *)v28 + v58);
          v43->n128_u64[0] = v141;
        }
        else if (v26 == 1)
        {
          unint64_t v45 = *((void *)v42 - 1);
          uint64_t v43 = (__n128 *)&v27->n128_i8[8];
          if (v42 - 8 != (char *)v28)
          {
            double v146 = a4;
            uint64_t v148 = a7;
            uint64_t v46 = a3;
            uint64_t v47 = a8;
            uint64_t v144 = v40;
            unint64_t v140 = *((void *)v42 - 1);
            uint64_t v142 = v41;
            memmove(&v27->n128_i8[8], v28, v42 - 8 - (char *)v27);
            unint64_t v45 = v140;
            uint64_t v41 = v142;
            uint64_t v40 = v144;
            uint64_t v24 = (__n128 *)((char *)a1 + v13);
            a8 = v47;
            a4 = v146;
            a7 = v148;
            a3 = v46;
          }
          v28->n128_u64[0] = v45;
        }
        else
        {
          uint64_t v61 = ((char *)a2 - (char *)v27) >> 3;
          uint64_t v62 = (v42 - (char *)a2) >> 3;
          if (v61 == v62)
          {
            uint64_t v63 = 8 * v26 - 8;
            uint64_t v64 = a2;
            do
            {
              uint64_t v65 = v44[-1].n128_i64[1];
              v44[-1].n128_u64[1] = v64->n128_u64[0];
              v64->n128_u64[0] = v65;
              uint64_t v64 = (__n128 *)((char *)v64 + 8);
              if (v44 == a2) {
                break;
              }
              uint64_t v44 = (__n128 *)((char *)v44 + 8);
              uint64_t v66 = v63;
              v63 -= 8;
            }
            while (v66);
            uint64_t v43 = a2;
          }
          else
          {
            uint64_t v67 = (v42 - (char *)a2) >> 3;
            uint64_t v68 = ((char *)a2 - (char *)v27) >> 3;
            do
            {
              uint64_t v69 = v68;
              uint64_t v68 = v67;
              uint64_t v67 = v69 % v67;
            }
            while (v67);
            if (v68)
            {
              uint64_t v70 = (__n128 *)((char *)v28 + 8 * v68);
              do
              {
                unint64_t v72 = v70[-1].n128_u64[1];
                uint64_t v70 = (__n128 *)((char *)v70 - 8);
                unint64_t v71 = v72;
                unint64_t v73 = (__n128 *)((char *)v70 + 8 * v61);
                uint64_t v74 = v70;
                do
                {
                  uint64_t v75 = v73;
                  v74->n128_u64[0] = v73->n128_u64[0];
                  uint64_t v76 = (v42 - (char *)v73) >> 3;
                  BOOL v77 = __OFSUB__(v61, v76);
                  uint64_t v79 = v61 - v76;
                  char v78 = (v79 < 0) ^ v77;
                  unint64_t v73 = (__n128 *)((char *)v28 + 8 * v79);
                  if (v78) {
                    unint64_t v73 = (__n128 *)((char *)v75 + 8 * v61);
                  }
                  uint64_t v74 = v75;
                }
                while (v73 != v70);
                v75->n128_u64[0] = v71;
              }
              while (v70 != v28);
            }
            uint64_t v43 = (__n128 *)((char *)v28 + 8 * v62);
          }
        }
      }
      goto LABEL_74;
    }
LABEL_38:
    uint64_t v43 = (__n128 *)v42;
LABEL_74:
    a5 = -v40 - v18;
    uint64_t v80 = v9 - v41;
    if (v40 + v41 >= v9 - (v40 + v41) - v18)
    {
      uint64_t v87 = a4;
      uint64_t v88 = v40;
      uint64_t v89 = v41;
      uint64_t v90 = a7;
      uint64_t v91 = a8;
      a1 = v24;
      sub_1C4A3A6B8(v43, v42, a3);
      uint64_t v92 = v89;
      a5 = v88;
      a3 = (char *)v43;
      uint64_t v9 = v92;
      a2 = v27;
      a7 = v90;
      a4 = v87;
      a8 = v91;
      if (!v92) {
        return result;
      }
    }
    else
    {
      uint64_t v81 = &a1->n128_u64[v13 / 8];
      long long v82 = v27;
      uint64_t v83 = a4;
      uint64_t v84 = a7;
      uint64_t v85 = a8;
      uint64_t v86 = a3;
      sub_1C4A3A6B8(v81, v82, v43);
      a3 = v86;
      a1 = v43;
      uint64_t v9 = v80;
      a2 = (__n128 *)v42;
      a7 = v84;
      a4 = v83;
      a8 = v85;
      if (!v80) {
        return result;
      }
    }
  }
  if (a5 <= v9)
  {
    if (a1 == a2) {
      return result;
    }
    unint64_t v103 = (char *)a2 - (char *)a1 - 8;
    float v104 = a7;
    double v105 = a1;
    if (v103 < 0x18) {
      goto LABEL_137;
    }
    float v104 = a7;
    double v105 = a1;
    if ((unint64_t)(a7 - (char *)a1) < 0x20) {
      goto LABEL_137;
    }
    uint64_t v106 = (v103 >> 3) + 1;
    uint64_t v107 = 8 * (v106 & 0x3FFFFFFFFFFFFFFCLL);
    float v104 = &a7[v107];
    double v105 = (__n128 *)((char *)a1 + v107);
    unint64_t v108 = a1 + 1;
    int64x2_t v109 = (__n128 *)(a7 + 16);
    uint64_t v110 = v106 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      uint64_t result = v108[-1];
      __n128 v111 = *v108;
      v109[-1] = result;
      *int64x2_t v109 = v111;
      v108 += 2;
      v109 += 2;
      v110 -= 4;
    }
    while (v110);
    if (v106 != (v106 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_137:
      do
      {
        unint64_t v112 = v105->n128_u64[0];
        double v105 = (__n128 *)((char *)v105 + 8);
        *(void *)float v104 = v112;
        v104 += 8;
      }
      while (v105 != a2);
    }
    if (v104 == a7) {
      return result;
    }
    uint64_t v113 = *a4;
    while (1)
    {
      if (a2 == (__n128 *)a3)
      {
        memmove(a1, a7, v104 - a7);
        return result;
      }
      unint64_t v114 = a2->n128_u64[0];
      unint64_t v115 = *(void *)a7;
      uint64_t v116 = *v113;
      result.n128_u64[0] = *(void *)(*v113 + 32 * a2->n128_u64[0]);
      double v117 = *(double *)(*v113 + 32 * *(void *)a7);
      if (result.n128_f64[0] < v117 && *(double *)(v116 + 32 * v114 + 8) > *(double *)(v116 + 32 * v115 + 8)) {
        goto LABEL_96;
      }
      if (v117 >= result.n128_f64[0])
      {
        double v119 = *(double *)(v116 + 32 * v114 + 8);
        double v118 = *(double *)(v116 + 32 * v115 + 8);
      }
      else
      {
        double v118 = *(double *)(v116 + 32 * v115 + 8);
        double v119 = *(double *)(v116 + 32 * v114 + 8);
        if (v118 > v119) {
          goto LABEL_105;
        }
      }
      result.n128_f64[0] = result.n128_f64[0] + v119;
      if (result.n128_f64[0] > v117 + v118)
      {
LABEL_96:
        a1->n128_u64[0] = v114;
        a1 = (__n128 *)((char *)a1 + 8);
        a2 = (__n128 *)((char *)a2 + 8);
        if (a7 == v104) {
          return result;
        }
      }
      else
      {
LABEL_105:
        a1->n128_u64[0] = v115;
        a1 = (__n128 *)((char *)a1 + 8);
        a7 += 8;
        if (a7 == v104) {
          return result;
        }
      }
    }
  }
  int64_t v93 = a3 - (char *)a2;
  if (a3 == (char *)a2) {
    return result;
  }
  unint64_t v94 = v93 - 8;
  if ((unint64_t)(v93 - 8) < 0x18)
  {
    uint64_t v95 = a7;
    double v96 = a2;
  }
  else
  {
    uint64_t v95 = a7;
    double v96 = a2;
    if ((unint64_t)(a7 - (char *)a2) >= 0x20)
    {
      uint64_t v97 = (v94 >> 3) + 1;
      uint64_t v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v95 = &a7[v98];
      double v96 = (__n128 *)((char *)a2 + v98);
      uint64_t v99 = a2 + 1;
      int32x4_t v100 = (__n128 *)(a7 + 16);
      uint64_t v101 = v97 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t result = v99[-1];
        __n128 v102 = *v99;
        v100[-1] = result;
        *int32x4_t v100 = v102;
        v99 += 2;
        v100 += 2;
        v101 -= 4;
      }
      while (v101);
      if (v97 == (v97 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_113;
      }
    }
  }
  do
  {
    unint64_t v120 = v96->n128_u64[0];
    double v96 = (__n128 *)((char *)v96 + 8);
    *(void *)uint64_t v95 = v120;
    v95 += 8;
  }
  while (v96 != (__n128 *)a3);
LABEL_113:
  if (v95 == a7) {
    return result;
  }
  int64_t v121 = *a4;
  BOOL v122 = a3;
  while (a2 != a1)
  {
    uint64_t v124 = (__n128 *)((char *)a2 - 8);
    uint64_t v123 = a2[-1].n128_i64[1];
    uint64_t v125 = *((void *)v95 - 1);
    uint64_t v126 = *v121;
    result.n128_u64[0] = *(void *)(*v121 + 32 * v125);
    double v127 = *(double *)(*v121 + 32 * v123);
    if (result.n128_f64[0] < v127 && *(double *)(v126 + 32 * v125 + 8) > *(double *)(v126 + 32 * v123 + 8)) {
      goto LABEL_116;
    }
    if (v127 >= result.n128_f64[0])
    {
      result.n128_f64[0] = result.n128_f64[0] + *(double *)(v126 + 32 * v125 + 8);
      if (result.n128_f64[0] > v127 + *(double *)(v126 + 32 * v123 + 8)) {
        goto LABEL_116;
      }
    }
    else
    {
      double v128 = *(double *)(v126 + 32 * v123 + 8);
      double v129 = *(double *)(v126 + 32 * v125 + 8);
      if (v128 <= v129)
      {
        result.n128_f64[0] = result.n128_f64[0] + v129;
        if (result.n128_f64[0] > v127 + v128) {
          goto LABEL_116;
        }
      }
    }
    uint64_t v123 = *((void *)v95 - 1);
    uint64_t v124 = a2;
    v95 -= 8;
LABEL_116:
    *((void *)a3 - 1) = v123;
    a3 -= 8;
    v122 -= 8;
    a2 = v124;
    if (v95 == a7) {
      return result;
    }
  }
  unint64_t v130 = v95 - a7 - 8;
  if (v130 < 0x58 || (unint64_t)(v95 - v122) < 0x20)
  {
    uint64_t v131 = v95;
    uint64_t v132 = a3;
    goto LABEL_129;
  }
  uint64_t v135 = 0;
  uint64_t v136 = (v130 >> 3) + 1;
  uint64_t v137 = 8 * (v136 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v131 = &v95[-v137];
  uint64_t v132 = &a3[-v137];
  uint64_t v138 = v136 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    uint64_t result = *(__n128 *)&v95[v135 - 16];
    uint64_t v139 = &a3[v135];
    *((_OWORD *)v139 - 2) = *(_OWORD *)&v95[v135 - 32];
    *((__n128 *)v139 - 1) = result;
    v135 -= 32;
    v138 -= 4;
  }
  while (v138);
  if (v136 != (v136 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_129:
    uint64_t v133 = v132 - 8;
    do
    {
      uint64_t v134 = *((void *)v131 - 1);
      v131 -= 8;
      *(void *)uint64_t v133 = v134;
      v133 -= 8;
    }
    while (v131 != a7);
  }
  return result;
}

_OWORD *sub_1C4A3AF58(uint64_t a1, char *a2, char *a3, size_t __sz)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t result = *(_OWORD **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 60) {
      goto LABEL_62;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v35 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    if (!v35) {
      unint64_t v11 = v10;
    }
    if (v11 >> 60) {
LABEL_62:
    }
      sub_1C4A38810();
    uint64_t v12 = v11;
    uint64_t result = operator new(16 * v11);
    unint64_t v13 = result;
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[v12];
    uint64_t v14 = result;
    if (a2 != a3)
    {
      uint64_t result = memcpy(result, a2, (a3 - a2) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v14 = &v13[(a3 - a2) & 0xFFFFFFFFFFFFFFF0];
    }
    int64_t v15 = v14 - v13;
    double v16 = (void *)(a1 + 8);
    goto LABEL_29;
  }
  unint64_t v17 = *(unsigned char **)(a1 + 8);
  double v16 = (void *)(a1 + 8);
  unint64_t v13 = v17;
  int64_t v18 = v17 - (unsigned char *)result;
  unint64_t v19 = (v17 - (unsigned char *)result) >> 4;
  if (v19 >= __sz)
  {
    if (a2 == a3)
    {
      unint64_t v29 = (char *)result;
    }
    else
    {
      unint64_t v28 = a3 - a2 - 16;
      if (v28 < 0xF0
        || ((unint64_t v47 = v28 & 0xFFFFFFFFFFFFFFF0 | 8,
             unint64_t v48 = (char *)result + v47,
             unint64_t v49 = (unint64_t)&a2[v47],
             unint64_t v50 = (v28 & 0xFFFFFFFFFFFFFFF0) + 16,
             (char *)result + 8 < &a2[v50])
          ? (BOOL v51 = a2 + 8 >= (char *)result + v50)
          : (BOOL v51 = 1),
            v51 ? (char v52 = 0) : (char v52 = 1),
            v48 > a2 ? (BOOL v53 = (unint64_t)result >= v49) : (BOOL v53 = 1),
            !v53 || (v52 & 1) != 0))
      {
        unint64_t v29 = (char *)result;
        double v30 = a2;
      }
      else
      {
        uint64_t v54 = (v28 >> 4) + 1;
        uint64_t v55 = v54 & 0x1FFFFFFFFFFFFFFCLL;
        unint64_t v29 = (char *)&result[v55];
        double v30 = &a2[v55 * 16];
        double v56 = (long long *)(a2 + 32);
        double v57 = result + 2;
        uint64_t v58 = v54 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          long long v60 = *(v56 - 2);
          long long v59 = *(v56 - 1);
          long long v62 = *v56;
          long long v61 = v56[1];
          v56 += 4;
          *(v57 - 2) = v60;
          *(v57 - 1) = v59;
          _OWORD *v57 = v62;
          v57[1] = v61;
          v57 += 4;
          v58 -= 4;
        }
        while (v58);
        if (v54 == (v54 & 0x1FFFFFFFFFFFFFFCLL)) {
          goto LABEL_28;
        }
      }
      do
      {
        long long v31 = *(_OWORD *)v30;
        v30 += 16;
        *(_OWORD *)unint64_t v29 = v31;
        v29 += 16;
      }
      while (v30 != a3);
    }
LABEL_28:
    int64_t v15 = v29 - (char *)result;
    unint64_t v13 = result;
    goto LABEL_29;
  }
  double v20 = &a2[16 * v19];
  if (v13 != (unsigned char *)result)
  {
    unint64_t v21 = v18 - 16;
    if ((unint64_t)(v18 - 16) < 0xF0
      || ((unint64_t v32 = v18 & 0xFFFFFFFFFFFFFFF0,
           double v33 = (char *)result + v32 - 8,
           unint64_t v34 = (unint64_t)&a2[v32 - 8],
           (char *)result + 8 < &a2[v32])
        ? (BOOL v35 = a2 + 8 >= (char *)result + v32)
        : (BOOL v35 = 1),
          v35 ? (char v36 = 0) : (char v36 = 1),
          v33 > a2 ? (BOOL v37 = (unint64_t)result >= v34) : (BOOL v37 = 1),
          !v37 || (v36 & 1) != 0))
    {
      uint64_t v22 = result;
      double v23 = a2;
    }
    else
    {
      uint64_t v38 = (v21 >> 4) + 1;
      uint64_t v39 = v38 & 0x1FFFFFFFFFFFFFFCLL;
      uint64_t v22 = &result[v39];
      double v23 = &a2[v39 * 16];
      uint64_t v40 = (long long *)(a2 + 32);
      uint64_t v41 = result + 2;
      uint64_t v42 = v38 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        long long v44 = *(v40 - 2);
        long long v43 = *(v40 - 1);
        long long v46 = *v40;
        long long v45 = v40[1];
        v40 += 4;
        *(v41 - 2) = v44;
        *(v41 - 1) = v43;
        _OWORD *v41 = v46;
        v41[1] = v45;
        v41 += 4;
        v42 -= 4;
      }
      while (v42);
      if (v38 == (v38 & 0x1FFFFFFFFFFFFFFCLL)) {
        goto LABEL_18;
      }
    }
    do
    {
      long long v24 = *(_OWORD *)v23;
      v23 += 16;
      *v22++ = v24;
    }
    while (v23 != v20);
  }
LABEL_18:
  uint64_t v25 = v13;
  if (v20 != a3)
  {
    uint64_t v26 = v13;
    do
    {
      long long v27 = *(_OWORD *)v20;
      v20 += 16;
      *v26++ = v27;
      v25 += 16;
    }
    while (v20 != a3);
  }
  int64_t v15 = v25 - v13;
LABEL_29:
  *double v16 = &v13[v15];
  return result;
}

double sub_1C4A3B210(unint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    n128_f64 = a2[-2].n128_f64;
    uint64_t v12 = a2[-4].n128_f64;
    unint64_t v13 = a2[-6].n128_f64;
    unint64_t v14 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v14;
          uint64_t v15 = (uint64_t)a2 - v14;
          uint64_t v16 = (uint64_t)((uint64_t)a2 - v14) >> 5;
          if (v6 || !v5)
          {
            switch(v16)
            {
              case 0:
              case 1:
                return a5.n128_f64[0];
              case 2:
                double v93 = a2[-2].n128_f64[0];
                uint64_t v92 = a2 - 2;
                a5.n128_f64[0] = v93;
                if (v93 >= *(double *)v14) {
                  return a5.n128_f64[0];
                }
                goto LABEL_101;
              case 3:
                unint64_t v94 = (__n128 *)(v14 + 32);
                a5.n128_u64[0] = *(void *)(v14 + 32);
                double v95 = a2[-2].n128_f64[0];
                uint64_t v92 = a2 - 2;
                double v96 = v95;
                if (a5.n128_f64[0] < *(double *)v14)
                {
                  if (v96 >= a5.n128_f64[0])
                  {
                    __n128 v185 = *(__n128 *)v14;
                    long long v218 = *(_OWORD *)(v14 + 16);
                    long long v150 = *(_OWORD *)(v14 + 48);
                    *(__n128 *)unint64_t v14 = *v94;
                    *(_OWORD *)(v14 + 16) = v150;
                    *unint64_t v94 = v185;
                    *(_OWORD *)(v14 + 48) = v218;
                    a5.n128_u64[0] = v92->n128_u64[0];
                    if (v92->n128_f64[0] >= *(double *)(v14 + 32)) {
                      return a5.n128_f64[0];
                    }
                    a5 = *v94;
                    __n128 v98 = *(__n128 *)(v14 + 48);
                    __n128 v151 = v92[1];
                    *unint64_t v94 = *v92;
                    *(__n128 *)(v14 + 48) = v151;
                  }
                  else
                  {
LABEL_101:
                    __n128 v178 = *(__n128 *)v14;
                    __n128 v209 = *(__n128 *)(v14 + 16);
                    __n128 v97 = v92[1];
                    *(__n128 *)unint64_t v14 = *v92;
                    *(__n128 *)(v14 + 16) = v97;
                    a5 = v178;
                    __n128 v98 = v209;
                  }
                  __n128 *v92 = a5;
                  v92[1] = v98;
                  return a5.n128_f64[0];
                }
                if (v96 < a5.n128_f64[0])
                {
                  a5 = *v94;
                  __n128 v215 = *(__n128 *)(v14 + 48);
                  __n128 v144 = v92[1];
                  *unint64_t v94 = *v92;
                  *(__n128 *)(v14 + 48) = v144;
                  __n128 *v92 = a5;
                  v92[1] = v215;
                  a5.n128_u64[0] = *(void *)(v14 + 32);
                  if (a5.n128_f64[0] < *(double *)v14)
                  {
                    __n128 v183 = *(__n128 *)v14;
                    long long v216 = *(_OWORD *)(v14 + 16);
                    long long v145 = *(_OWORD *)(v14 + 48);
                    *(__n128 *)unint64_t v14 = *v94;
                    *(_OWORD *)(v14 + 16) = v145;
                    a5.n128_u64[0] = v183.n128_u64[0];
                    *unint64_t v94 = v183;
                    *(_OWORD *)(v14 + 48) = v216;
                  }
                }
                break;
              case 4:
                a5.n128_u64[0] = sub_1C4A3C180((__n128 *)v14, (__n128 *)(v14 + 32), (__n128 *)(v14 + 64), a2 - 2, a5).n128_u64[0];
                return a5.n128_f64[0];
              case 5:
                uint64_t v99 = (__n128 *)(v14 + 32);
                int32x4_t v100 = (__n128 *)(v14 + 64);
                uint64_t v101 = (__n128 *)(v14 + 96);
                sub_1C4A3C180((__n128 *)v14, (__n128 *)(v14 + 32), (__n128 *)(v14 + 64), (__n128 *)(v14 + 96), a5);
                double v103 = a2[-2].n128_f64[0];
                __n128 v102 = a2 - 2;
                a5.n128_f64[0] = v103;
                if (v103 < *(double *)(v14 + 96))
                {
                  a5 = *v101;
                  __n128 v210 = *(__n128 *)(v14 + 112);
                  __n128 v104 = v102[1];
                  *uint64_t v101 = *v102;
                  *(__n128 *)(v14 + 112) = v104;
                  *__n128 v102 = a5;
                  v102[1] = v210;
                  a5.n128_u64[0] = v101->n128_u64[0];
                  if (v101->n128_f64[0] < v100->n128_f64[0])
                  {
                    __n128 v105 = *v100;
                    a5 = *(__n128 *)(v14 + 80);
                    long long v106 = *(_OWORD *)(v14 + 112);
                    *int32x4_t v100 = *v101;
                    *(_OWORD *)(v14 + 80) = v106;
                    *uint64_t v101 = v105;
                    *(__n128 *)(v14 + 112) = a5;
                    a5.n128_u64[0] = v100->n128_u64[0];
                    if (v100->n128_f64[0] < v99->n128_f64[0])
                    {
                      __n128 v107 = *v99;
                      a5 = *(__n128 *)(v14 + 48);
                      long long v108 = *(_OWORD *)(v14 + 80);
                      *uint64_t v99 = *v100;
                      *(_OWORD *)(v14 + 48) = v108;
                      *int32x4_t v100 = v107;
                      *(__n128 *)(v14 + 80) = a5;
                      a5.n128_u64[0] = *(void *)(v14 + 32);
                      if (a5.n128_f64[0] < *(double *)v14)
                      {
                        __n128 v179 = *(__n128 *)v14;
                        long long v211 = *(_OWORD *)(v14 + 16);
                        long long v109 = *(_OWORD *)(v14 + 48);
                        *(__n128 *)unint64_t v14 = *v99;
                        *(_OWORD *)(v14 + 16) = v109;
                        a5.n128_u64[0] = v179.n128_u64[0];
                        *uint64_t v99 = v179;
                        *(_OWORD *)(v14 + 48) = v211;
                      }
                    }
                  }
                }
                return a5.n128_f64[0];
              default:
                JUMPOUT(0);
            }
            return a5.n128_f64[0];
          }
          if (v15 <= 767)
          {
            uint64_t v110 = (__n128 *)(v14 + 32);
            BOOL v112 = (__n128 *)v14 == a2 || v110 == a2;
            if (a4)
            {
              if (!v112)
              {
                uint64_t v113 = 0;
                unint64_t v114 = v14;
                do
                {
                  uint64_t v116 = v110;
                  a5.n128_u64[0] = *(void *)(v114 + 32);
                  if (a5.n128_f64[0] < *(double *)v114)
                  {
                    long long v180 = *(_OWORD *)(v114 + 40);
                    uint64_t v212 = *(void *)(v114 + 56);
                    uint64_t v117 = v113;
                    do
                    {
                      uint64_t v118 = v14 + v117;
                      long long v119 = *(_OWORD *)(v14 + v117 + 16);
                      *(_OWORD *)(v118 + 32) = *(_OWORD *)(v14 + v117);
                      *(_OWORD *)(v118 + 48) = v119;
                      if (!v117)
                      {
                        uint64_t v115 = v14;
                        goto LABEL_121;
                      }
                      v117 -= 32;
                    }
                    while (a5.n128_f64[0] < *(double *)(v118 - 32));
                    uint64_t v115 = v14 + v117 + 32;
LABEL_121:
                    *(void *)uint64_t v115 = a5.n128_u64[0];
                    a5.n128_u64[0] = v180;
                    *(void *)(v115 + 24) = v212;
                    *(_OWORD *)(v115 + 8) = v180;
                  }
                  uint64_t v110 = v116 + 2;
                  v113 += 32;
                  unint64_t v114 = (unint64_t)v116;
                }
                while (&v116[2] != a2);
              }
            }
            else if (!v112)
            {
              do
              {
                unint64_t v146 = (unint64_t)v110;
                a5.n128_u64[0] = *(void *)(a1 + 32);
                if (a5.n128_f64[0] < *(double *)a1)
                {
                  __n128 v184 = *(__n128 *)(a1 + 40);
                  unint64_t v217 = *(void *)(a1 + 56);
                  uint64_t v147 = v110;
                  do
                  {
                    __n128 v148 = v147[-1];
                    *uint64_t v147 = v147[-2];
                    v147[1] = v148;
                    double v149 = v147[-4].n128_f64[0];
                    v147 -= 2;
                  }
                  while (a5.n128_f64[0] < v149);
                  v147->n128_u64[0] = a5.n128_u64[0];
                  a5.n128_u64[0] = v184.n128_u64[0];
                  v147[1].n128_u64[1] = v217;
                  *(__n128 *)((char *)v147 + 8) = v184;
                }
                v110 += 2;
                a1 = v146;
              }
              while ((__n128 *)(v146 + 32) != a2);
            }
            return a5.n128_f64[0];
          }
          if (!a3)
          {
            if ((__n128 *)v14 != a2)
            {
              int64_t v120 = (unint64_t)(v16 - 2) >> 1;
              int64_t v121 = v120;
              do
              {
                if (v120 >= v121)
                {
                  uint64_t v123 = (2 * v121) | 1;
                  unint64_t v124 = v14 + 32 * v123;
                  if (2 * v121 + 2 < v16 && *(double *)v124 < *(double *)(v124 + 32))
                  {
                    v124 += 32;
                    uint64_t v123 = 2 * v121 + 2;
                  }
                  unint64_t v125 = v14 + 32 * v121;
                  double v126 = *(double *)v125;
                  if (*(double *)v124 >= *(double *)v125)
                  {
                    uint64_t v213 = *(void *)(v125 + 24);
                    long long v181 = *(_OWORD *)(v125 + 8);
                    do
                    {
                      double v127 = (_OWORD *)v125;
                      unint64_t v125 = v124;
                      long long v128 = *(_OWORD *)(v124 + 16);
                      *double v127 = *(_OWORD *)v124;
                      v127[1] = v128;
                      if (v120 < v123) {
                        break;
                      }
                      uint64_t v129 = 2 * v123;
                      uint64_t v123 = (2 * v123) | 1;
                      unint64_t v124 = v14 + 32 * v123;
                      uint64_t v130 = v129 + 2;
                      if (v130 < v16 && *(double *)v124 < *(double *)(v124 + 32))
                      {
                        v124 += 32;
                        uint64_t v123 = v130;
                      }
                    }
                    while (*(double *)v124 >= v126);
                    *(double *)unint64_t v125 = v126;
                    *(void *)(v125 + 24) = v213;
                    *(_OWORD *)(v125 + 8) = v181;
                  }
                }
                BOOL v122 = v121-- <= 0;
              }
              while (!v122);
              uint64_t v131 = (unint64_t)v15 >> 5;
              do
              {
                uint64_t v132 = 0;
                __n128 v182 = *(__n128 *)v14;
                __n128 v214 = *(__n128 *)(v14 + 16);
                uint64_t v133 = (__n128 *)v14;
                do
                {
                  uint64_t v135 = v133;
                  v133 += 2 * v132 + 2;
                  uint64_t v136 = 2 * v132;
                  uint64_t v132 = (2 * v132) | 1;
                  uint64_t v137 = v136 + 2;
                  if (v137 < v131 && v133->n128_f64[0] < v133[2].n128_f64[0])
                  {
                    v133 += 2;
                    uint64_t v132 = v137;
                  }
                  __n128 v134 = v133[1];
                  __n128 *v135 = *v133;
                  v135[1] = v134;
                }
                while (v132 <= (uint64_t)((unint64_t)(v131 - 2) >> 1));
                a2 -= 2;
                if (v133 == a2)
                {
                  a5.n128_u64[0] = v182.n128_u64[0];
                  *uint64_t v133 = v182;
                  v133[1] = v214;
                }
                else
                {
                  __n128 v138 = a2[1];
                  *uint64_t v133 = *a2;
                  v133[1] = v138;
                  a5.n128_u64[0] = v182.n128_u64[0];
                  *a2 = v182;
                  a2[1] = v214;
                  uint64_t v139 = (uint64_t)&v133[2] - v14;
                  if (v139 >= 33)
                  {
                    unint64_t v140 = (((unint64_t)v139 >> 5) - 2) >> 1;
                    unint64_t v141 = (__n128 *)(v14 + 32 * v140);
                    a5.n128_u64[0] = v133->n128_u64[0];
                    if (v141->n128_f64[0] < v133->n128_f64[0])
                    {
                      uint64_t v158 = v133[1].n128_i64[1];
                      __n128 v155 = *(__n128 *)((char *)v133 + 8);
                      do
                      {
                        uint64_t v142 = v133;
                        uint64_t v133 = v141;
                        __n128 v143 = v141[1];
                        *uint64_t v142 = *v141;
                        v142[1] = v143;
                        if (!v140) {
                          break;
                        }
                        unint64_t v140 = (v140 - 1) >> 1;
                        unint64_t v141 = (__n128 *)(v14 + 32 * v140);
                      }
                      while (v141->n128_f64[0] < a5.n128_f64[0]);
                      v133->n128_u64[0] = a5.n128_u64[0];
                      a5.n128_u64[0] = v155.n128_u64[0];
                      v133[1].n128_u64[1] = v158;
                      *(__n128 *)((char *)v133 + 8) = v155;
                    }
                  }
                }
                BOOL v122 = v131-- <= 2;
              }
              while (!v122);
            }
            return a5.n128_f64[0];
          }
          unint64_t v17 = (unint64_t)v16 >> 1;
          int64_t v18 = (__n128 *)(v14 + 32 * ((unint64_t)v16 >> 1));
          double v19 = *n128_f64;
          if ((unint64_t)v15 > 0x1000) {
            break;
          }
          double v22 = *(double *)v14;
          if (*(double *)v14 < v18->n128_f64[0])
          {
            if (v19 >= v22)
            {
              __n128 v167 = *v18;
              __n128 v195 = v18[1];
              __n128 v43 = *(__n128 *)(v14 + 16);
              *int64_t v18 = *(__n128 *)v14;
              v18[1] = v43;
              *(__n128 *)unint64_t v14 = v167;
              *(__n128 *)(v14 + 16) = v195;
              if (*n128_f64 >= *(double *)v14) {
                goto LABEL_32;
              }
              __n128 v160 = *(__n128 *)v14;
              __n128 v187 = *(__n128 *)(v14 + 16);
              __n128 v44 = a2[-1];
              *(_OWORD *)unint64_t v14 = *(_OWORD *)n128_f64;
              *(__n128 *)(v14 + 16) = v44;
            }
            else
            {
              __n128 v160 = *v18;
              __n128 v187 = v18[1];
              __n128 v23 = a2[-1];
              *int64_t v18 = *(__n128 *)n128_f64;
              v18[1] = v23;
            }
            *(__n128 *)n128_f64 = v160;
            a2[-1] = v187;
LABEL_32:
            --a3;
            double v28 = *(double *)v14;
            if (a4) {
              goto LABEL_57;
            }
            goto LABEL_56;
          }
          if (v19 >= v22) {
            goto LABEL_32;
          }
          __n128 v163 = *(__n128 *)v14;
          __n128 v190 = *(__n128 *)(v14 + 16);
          __n128 v26 = a2[-1];
          *(_OWORD *)unint64_t v14 = *(_OWORD *)n128_f64;
          *(__n128 *)(v14 + 16) = v26;
          *(__n128 *)n128_f64 = v163;
          a2[-1] = v190;
          if (*(double *)v14 >= v18->n128_f64[0]) {
            goto LABEL_32;
          }
          __n128 v164 = *v18;
          __n128 v191 = v18[1];
          __n128 v27 = *(__n128 *)(v14 + 16);
          *int64_t v18 = *(__n128 *)v14;
          v18[1] = v27;
          *(__n128 *)unint64_t v14 = v164;
          *(__n128 *)(v14 + 16) = v191;
          --a3;
          double v28 = *(double *)v14;
          if (a4) {
            goto LABEL_57;
          }
LABEL_56:
          if (*(double *)(v14 - 32) < v28) {
            goto LABEL_57;
          }
          uint64_t v157 = *(void *)(v14 + 24);
          __n128 v154 = *(__n128 *)(v14 + 8);
          if (v28 < *n128_f64)
          {
            do
            {
              double v84 = *(double *)(v14 + 32);
              v14 += 32;
            }
            while (v28 >= v84);
          }
          else
          {
            unint64_t v85 = v14 + 32;
            do
            {
              unint64_t v14 = v85;
              if (v85 >= (unint64_t)a2) {
                break;
              }
              v85 += 32;
            }
            while (v28 >= *(double *)v14);
          }
          uint64_t v86 = a2;
          if (v14 < (unint64_t)a2)
          {
            uint64_t v86 = a2;
            do
            {
              double v87 = v86[-2].n128_f64[0];
              v86 -= 2;
            }
            while (v28 < v87);
          }
          while (v14 < (unint64_t)v86)
          {
            __n128 v177 = *(__n128 *)v14;
            __n128 v208 = *(__n128 *)(v14 + 16);
            __n128 v88 = v86[1];
            *(__n128 *)unint64_t v14 = *v86;
            *(__n128 *)(v14 + 16) = v88;
            *uint64_t v86 = v177;
            v86[1] = v208;
            do
            {
              double v89 = *(double *)(v14 + 32);
              v14 += 32;
            }
            while (v28 >= v89);
            do
            {
              double v90 = v86[-2].n128_f64[0];
              v86 -= 2;
            }
            while (v28 < v90);
          }
          BOOL v5 = v14 - 32 >= a1;
          BOOL v6 = v14 - 32 == a1;
          if (v14 - 32 != a1)
          {
            long long v91 = *(_OWORD *)(v14 - 16);
            *(_OWORD *)a1 = *(_OWORD *)(v14 - 32);
            *(_OWORD *)(a1 + 16) = v91;
          }
          a4 = 0;
          *(double *)(v14 - 32) = v28;
          a5 = v154;
          *(void *)(v14 - 8) = v157;
          *(__n128 *)(v14 - 24) = v154;
        }
        double v20 = v18->n128_f64[0];
        if (v18->n128_f64[0] >= *(double *)v14)
        {
          if (v19 < v20)
          {
            __n128 v161 = *v18;
            __n128 v188 = v18[1];
            __n128 v24 = a2[-1];
            *int64_t v18 = *(__n128 *)n128_f64;
            v18[1] = v24;
            *(__n128 *)n128_f64 = v161;
            a2[-1] = v188;
            if (v18->n128_f64[0] < *(double *)v14)
            {
              __n128 v162 = *(__n128 *)v14;
              __n128 v189 = *(__n128 *)(v14 + 16);
              __n128 v25 = v18[1];
              *(__n128 *)unint64_t v14 = *v18;
              *(__n128 *)(v14 + 16) = v25;
              *int64_t v18 = v162;
              v18[1] = v189;
            }
          }
        }
        else
        {
          if (v19 >= v20)
          {
            __n128 v165 = *(__n128 *)v14;
            __n128 v192 = *(__n128 *)(v14 + 16);
            __n128 v29 = v18[1];
            *(__n128 *)unint64_t v14 = *v18;
            *(__n128 *)(v14 + 16) = v29;
            *int64_t v18 = v165;
            v18[1] = v192;
            if (*n128_f64 >= v18->n128_f64[0]) {
              goto LABEL_23;
            }
            __n128 v159 = *v18;
            __n128 v186 = v18[1];
            __n128 v30 = a2[-1];
            *int64_t v18 = *(__n128 *)n128_f64;
            v18[1] = v30;
          }
          else
          {
            __n128 v159 = *(__n128 *)v14;
            __n128 v186 = *(__n128 *)(v14 + 16);
            __n128 v21 = a2[-1];
            *(_OWORD *)unint64_t v14 = *(_OWORD *)n128_f64;
            *(__n128 *)(v14 + 16) = v21;
          }
          *(__n128 *)n128_f64 = v159;
          a2[-1] = v186;
        }
LABEL_23:
        long long v31 = (__n128 *)(v14 + 32);
        unint64_t v32 = v14 + 32 * v17;
        double v34 = *(double *)(v32 - 32);
        double v33 = (__n128 *)(v32 - 32);
        double v35 = v34;
        double v36 = *v12;
        if (v34 >= *(double *)(v14 + 32))
        {
          if (v36 < v35)
          {
            __n128 v166 = *v33;
            __n128 v193 = v33[1];
            __n128 v40 = a2[-3];
            *double v33 = *(__n128 *)v12;
            v33[1] = v40;
            *(__n128 *)uint64_t v12 = v166;
            a2[-3] = v193;
            if (v33->n128_f64[0] < v31->n128_f64[0])
            {
              __n128 v41 = *v31;
              __n128 v194 = *(__n128 *)(v14 + 48);
              __n128 v42 = v33[1];
              *long long v31 = *v33;
              *(__n128 *)(v14 + 48) = v42;
              *double v33 = v41;
              v33[1] = v194;
            }
          }
        }
        else
        {
          if (v36 >= v35)
          {
            __n128 v45 = *v31;
            __n128 v196 = *(__n128 *)(v14 + 48);
            __n128 v46 = v33[1];
            *long long v31 = *v33;
            *(__n128 *)(v14 + 48) = v46;
            *double v33 = v45;
            v33[1] = v196;
            if (*v12 >= v33->n128_f64[0]) {
              goto LABEL_37;
            }
            __n128 v168 = *v33;
            __n128 v197 = v33[1];
            __n128 v47 = a2[-3];
            *double v33 = *(__n128 *)v12;
            v33[1] = v47;
            __n128 v37 = v168;
            __n128 v38 = v197;
          }
          else
          {
            __n128 v37 = *v31;
            __n128 v38 = *(__n128 *)(v14 + 48);
            __n128 v39 = a2[-3];
            *long long v31 = *(__n128 *)v12;
            *(__n128 *)(v14 + 48) = v39;
          }
          *(__n128 *)uint64_t v12 = v37;
          a2[-3] = v38;
        }
LABEL_37:
        unint64_t v48 = (__n128 *)(v14 + 64);
        unint64_t v49 = v14 + 32 * v17;
        double v51 = *(double *)(v49 + 32);
        unint64_t v50 = (__n128 *)(v49 + 32);
        double v52 = v51;
        double v53 = *v13;
        if (v51 >= *(double *)(v14 + 64))
        {
          if (v53 < v52)
          {
            __n128 v169 = *v50;
            __n128 v198 = v50[1];
            __n128 v57 = a2[-5];
            *unint64_t v50 = *(__n128 *)v13;
            v50[1] = v57;
            *(__n128 *)unint64_t v13 = v169;
            a2[-5] = v198;
            if (v50->n128_f64[0] < v48->n128_f64[0])
            {
              __n128 v58 = *v48;
              __n128 v199 = *(__n128 *)(v14 + 80);
              __n128 v59 = v50[1];
              *unint64_t v48 = *v50;
              *(__n128 *)(v14 + 80) = v59;
              *unint64_t v50 = v58;
              v50[1] = v199;
            }
          }
        }
        else
        {
          if (v53 >= v52)
          {
            __n128 v60 = *v48;
            __n128 v200 = *(__n128 *)(v14 + 80);
            __n128 v61 = v50[1];
            *unint64_t v48 = *v50;
            *(__n128 *)(v14 + 80) = v61;
            *unint64_t v50 = v60;
            v50[1] = v200;
            if (*v13 >= v50->n128_f64[0]) {
              goto LABEL_46;
            }
            __n128 v170 = *v50;
            __n128 v201 = v50[1];
            __n128 v62 = a2[-5];
            *unint64_t v50 = *(__n128 *)v13;
            v50[1] = v62;
            __n128 v54 = v170;
            __n128 v55 = v201;
          }
          else
          {
            __n128 v54 = *v48;
            __n128 v55 = *(__n128 *)(v14 + 80);
            __n128 v56 = a2[-5];
            *unint64_t v48 = *(__n128 *)v13;
            *(__n128 *)(v14 + 80) = v56;
          }
          *(__n128 *)unint64_t v13 = v54;
          a2[-5] = v55;
        }
LABEL_46:
        double v63 = v18->n128_f64[0];
        double v64 = v50->n128_f64[0];
        if (v18->n128_f64[0] >= v33->n128_f64[0])
        {
          if (v64 < v63)
          {
            __n128 v172 = *v18;
            __n128 v203 = v18[1];
            __n128 v66 = v50[1];
            *int64_t v18 = *v50;
            v18[1] = v66;
            *unint64_t v50 = v172;
            v50[1] = v203;
            if (v18->n128_f64[0] < v33->n128_f64[0])
            {
              __n128 v173 = *v33;
              __n128 v204 = v33[1];
              __n128 v67 = v18[1];
              *double v33 = *v18;
              v33[1] = v67;
              *int64_t v18 = v173;
              v18[1] = v204;
            }
          }
        }
        else
        {
          if (v64 >= v63)
          {
            __n128 v174 = *v33;
            __n128 v205 = v33[1];
            __n128 v68 = v18[1];
            *double v33 = *v18;
            v33[1] = v68;
            *int64_t v18 = v174;
            v18[1] = v205;
            if (v50->n128_f64[0] >= v18->n128_f64[0]) {
              goto LABEL_55;
            }
            __n128 v171 = *v18;
            __n128 v202 = v18[1];
            __n128 v69 = v50[1];
            *int64_t v18 = *v50;
            v18[1] = v69;
          }
          else
          {
            __n128 v171 = *v33;
            __n128 v202 = v33[1];
            __n128 v65 = v50[1];
            *double v33 = *v50;
            v33[1] = v65;
          }
          *unint64_t v50 = v171;
          v50[1] = v202;
        }
LABEL_55:
        __n128 v175 = *(__n128 *)v14;
        __n128 v206 = *(__n128 *)(v14 + 16);
        __n128 v70 = v18[1];
        *(__n128 *)unint64_t v14 = *v18;
        *(__n128 *)(v14 + 16) = v70;
        *int64_t v18 = v175;
        v18[1] = v206;
        --a3;
        double v28 = *(double *)v14;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
LABEL_57:
        uint64_t v71 = 0;
        uint64_t v156 = *(void *)(v14 + 24);
        __n128 v153 = *(__n128 *)(v14 + 8);
        do
        {
          double v72 = *(double *)(v14 + v71 + 32);
          v71 += 32;
        }
        while (v72 < v28);
        unint64_t v73 = v14 + v71;
        uint64_t v74 = a2;
        if (v71 == 32)
        {
          uint64_t v74 = a2;
          do
          {
            if (v73 >= (unint64_t)v74) {
              break;
            }
            double v76 = v74[-2].n128_f64[0];
            v74 -= 2;
          }
          while (v76 >= v28);
        }
        else
        {
          do
          {
            double v75 = v74[-2].n128_f64[0];
            v74 -= 2;
          }
          while (v75 >= v28);
        }
        v14 += v71;
        if (v73 < (unint64_t)v74)
        {
          BOOL v77 = v74;
          do
          {
            __n128 v176 = *(__n128 *)v14;
            __n128 v207 = *(__n128 *)(v14 + 16);
            __n128 v78 = v77[1];
            *(__n128 *)unint64_t v14 = *v77;
            *(__n128 *)(v14 + 16) = v78;
            *BOOL v77 = v176;
            v77[1] = v207;
            do
            {
              double v79 = *(double *)(v14 + 32);
              v14 += 32;
            }
            while (v79 < v28);
            do
            {
              double v80 = v77[-2].n128_f64[0];
              v77 -= 2;
            }
            while (v80 >= v28);
          }
          while (v14 < (unint64_t)v77);
        }
        if (v14 - 32 != a1)
        {
          long long v81 = *(_OWORD *)(v14 - 16);
          *(_OWORD *)a1 = *(_OWORD *)(v14 - 32);
          *(_OWORD *)(a1 + 16) = v81;
        }
        *(double *)(v14 - 32) = v28;
        *(void *)(v14 - 8) = v156;
        *(__n128 *)(v14 - 24) = v153;
        if (v73 >= (unint64_t)v74) {
          break;
        }
LABEL_76:
        sub_1C4A3B210(a1, v14 - 32, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v82 = sub_1C4A3BDE0(a1, v14 - 32, v153);
      if (sub_1C4A3BDE0(v14, (uint64_t)a2, v83)) {
        break;
      }
      if (!v82) {
        goto LABEL_76;
      }
    }
    a2 = (__n128 *)(v14 - 32);
    if (!v82) {
      continue;
    }
    return a5.n128_f64[0];
  }
}

BOOL sub_1C4A3BDE0(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v7 = (__n128 *)(a2 - 32);
      if (*(double *)(a2 - 32) < *(double *)a1) {
        goto LABEL_7;
      }
      return result;
    case 3:
      uint64_t v8 = (__n128 *)(a1 + 32);
      double v9 = *(double *)(a1 + 32);
      uint64_t v7 = (__n128 *)(a2 - 32);
      double v10 = *(double *)(a2 - 32);
      if (v9 >= *(double *)a1)
      {
        if (v10 < v9)
        {
          __n128 v40 = *v8;
          long long v39 = *(_OWORD *)(a1 + 48);
          long long v41 = *(_OWORD *)(a2 - 16);
          *uint64_t v8 = *v7;
          *(_OWORD *)(a1 + 48) = v41;
          *uint64_t v7 = v40;
          *(_OWORD *)(a2 - 16) = v39;
          if (*(double *)(a1 + 32) < *(double *)a1)
          {
            __n128 v43 = *(__n128 *)a1;
            long long v42 = *(_OWORD *)(a1 + 16);
            long long v44 = *(_OWORD *)(a1 + 48);
            *(__n128 *)a1 = *v8;
            *(_OWORD *)(a1 + 16) = v44;
            *uint64_t v8 = v43;
            *(_OWORD *)(a1 + 48) = v42;
          }
        }
      }
      else
      {
        if (v10 < v9)
        {
LABEL_7:
          __n128 v12 = *(__n128 *)a1;
          __n128 v11 = *(__n128 *)(a1 + 16);
          __n128 v13 = v7[1];
          *(__n128 *)a1 = *v7;
          *(__n128 *)(a1 + 16) = v13;
LABEL_8:
          *uint64_t v7 = v12;
          v7[1] = v11;
          return result;
        }
        __n128 v52 = *(__n128 *)a1;
        long long v51 = *(_OWORD *)(a1 + 16);
        long long v53 = *(_OWORD *)(a1 + 48);
        *(__n128 *)a1 = *v8;
        *(_OWORD *)(a1 + 16) = v53;
        *uint64_t v8 = v52;
        *(_OWORD *)(a1 + 48) = v51;
        if (v7->n128_f64[0] < *(double *)(a1 + 32))
        {
          __n128 v12 = *v8;
          __n128 v11 = *(__n128 *)(a1 + 48);
          long long v54 = *(_OWORD *)(a2 - 16);
          *uint64_t v8 = *v7;
          *(_OWORD *)(a1 + 48) = v54;
          goto LABEL_8;
        }
      }
      return result;
    case 4:
      sub_1C4A3C180((__n128 *)a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a2 - 32), a3);
      return 1;
    case 5:
      double v22 = (__n128 *)(a1 + 32);
      __n128 v23 = (__n128 *)(a1 + 64);
      __n128 v24 = (__n128 *)(a1 + 96);
      sub_1C4A3C180((__n128 *)a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a1 + 96), a3);
      double v26 = *(double *)(a2 - 32);
      __n128 v25 = (__n128 *)(a2 - 32);
      if (v26 < *(double *)(a1 + 96))
      {
        __n128 v28 = *v24;
        __n128 v27 = *(__n128 *)(a1 + 112);
        __n128 v29 = v25[1];
        *__n128 v24 = *v25;
        *(__n128 *)(a1 + 112) = v29;
        *__n128 v25 = v28;
        v25[1] = v27;
        if (v24->n128_f64[0] < v23->n128_f64[0])
        {
          __n128 v31 = *v23;
          long long v30 = *(_OWORD *)(a1 + 80);
          long long v32 = *(_OWORD *)(a1 + 112);
          *__n128 v23 = *v24;
          *(_OWORD *)(a1 + 80) = v32;
          *__n128 v24 = v31;
          *(_OWORD *)(a1 + 112) = v30;
          if (v23->n128_f64[0] < v22->n128_f64[0])
          {
            __n128 v34 = *v22;
            long long v33 = *(_OWORD *)(a1 + 48);
            long long v35 = *(_OWORD *)(a1 + 80);
            *double v22 = *v23;
            *(_OWORD *)(a1 + 48) = v35;
            *__n128 v23 = v34;
            *(_OWORD *)(a1 + 80) = v33;
            if (*(double *)(a1 + 32) < *(double *)a1)
            {
              __n128 v37 = *(__n128 *)a1;
              long long v36 = *(_OWORD *)(a1 + 16);
              long long v38 = *(_OWORD *)(a1 + 48);
              *(__n128 *)a1 = *v22;
              *(_OWORD *)(a1 + 16) = v38;
              *double v22 = v37;
              *(_OWORD *)(a1 + 48) = v36;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v14 = (__n128 *)(a1 + 64);
      double v15 = *(double *)(a1 + 64);
      uint64_t v16 = (__n128 *)(a1 + 32);
      double v17 = *(double *)(a1 + 32);
      double v18 = *(double *)a1;
      if (v17 >= *(double *)a1)
      {
        if (v15 < v17)
        {
          __n128 v46 = *v16;
          long long v45 = *(_OWORD *)(a1 + 48);
          long long v47 = *(_OWORD *)(a1 + 80);
          *uint64_t v16 = *v14;
          *(_OWORD *)(a1 + 48) = v47;
          *unint64_t v14 = v46;
          *(_OWORD *)(a1 + 80) = v45;
          if (v16->n128_f64[0] < v18)
          {
            __n128 v49 = *(__n128 *)a1;
            long long v48 = *(_OWORD *)(a1 + 16);
            long long v50 = *(_OWORD *)(a1 + 48);
            *(__n128 *)a1 = *v16;
            *(_OWORD *)(a1 + 16) = v50;
            *uint64_t v16 = v49;
            *(_OWORD *)(a1 + 48) = v48;
          }
        }
      }
      else
      {
        if (v15 >= v17)
        {
          __n128 v56 = *(__n128 *)a1;
          long long v55 = *(_OWORD *)(a1 + 16);
          long long v57 = *(_OWORD *)(a1 + 48);
          *(__n128 *)a1 = *v16;
          *(_OWORD *)(a1 + 16) = v57;
          *uint64_t v16 = v56;
          *(_OWORD *)(a1 + 48) = v55;
          if (v15 >= *(double *)(a1 + 32)) {
            goto LABEL_29;
          }
          __n128 v20 = *v16;
          long long v19 = *(_OWORD *)(a1 + 48);
          long long v58 = *(_OWORD *)(a1 + 80);
          *uint64_t v16 = *v14;
          *(_OWORD *)(a1 + 48) = v58;
        }
        else
        {
          __n128 v20 = *(__n128 *)a1;
          long long v19 = *(_OWORD *)(a1 + 16);
          long long v21 = *(_OWORD *)(a1 + 80);
          *(__n128 *)a1 = *v14;
          *(_OWORD *)(a1 + 16) = v21;
        }
        *unint64_t v14 = v20;
        *(_OWORD *)(a1 + 80) = v19;
      }
LABEL_29:
      uint64_t v59 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v60 = 0;
      int v61 = 0;
      while (1)
      {
        double v63 = *(double *)v59;
        if (*(double *)v59 < v14->n128_f64[0])
        {
          long long v67 = *(_OWORD *)(v59 + 8);
          uint64_t v68 = *(void *)(v59 + 24);
          uint64_t v64 = v60;
          do
          {
            uint64_t v65 = a1 + v64;
            long long v66 = *(_OWORD *)(a1 + v64 + 80);
            *(_OWORD *)(v65 + 96) = *(_OWORD *)(a1 + v64 + 64);
            *(_OWORD *)(v65 + 112) = v66;
            if (v64 == -64)
            {
              uint64_t v62 = a1;
              goto LABEL_32;
            }
            v64 -= 32;
          }
          while (v63 < *(double *)(v65 + 32));
          uint64_t v62 = a1 + v64 + 96;
LABEL_32:
          *(double *)uint64_t v62 = v63;
          *(_OWORD *)(v62 + 8) = v67;
          *(void *)(v62 + 24) = v68;
          if (++v61 == 8) {
            return v59 + 32 == a2;
          }
        }
        unint64_t v14 = (__n128 *)v59;
        v60 += 32;
        v59 += 32;
        if (v59 == a2) {
          return 1;
        }
      }
  }
}

__n128 sub_1C4A3C180(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  double v5 = a2->n128_f64[0];
  double v6 = a3->n128_f64[0];
  if (a2->n128_f64[0] >= a1->n128_f64[0])
  {
    if (v6 < v5)
    {
      __n128 v9 = *a2;
      BOOL result = a2[1];
      __n128 v10 = a3[1];
      *a2 = *a3;
      a2[1] = v10;
      *a3 = v9;
      a3[1] = result;
      if (a2->n128_f64[0] < a1->n128_f64[0])
      {
        __n128 v11 = *a1;
        BOOL result = a1[1];
        __n128 v12 = a2[1];
        *a1 = *a2;
        a1[1] = v12;
        *a2 = v11;
        a2[1] = result;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      __n128 v7 = *a1;
      BOOL result = a1[1];
      __n128 v8 = a3[1];
      *a1 = *a3;
      a1[1] = v8;
LABEL_9:
      *a3 = v7;
      a3[1] = result;
      goto LABEL_10;
    }
    __n128 v13 = *a1;
    BOOL result = a1[1];
    __n128 v14 = a2[1];
    *a1 = *a2;
    a1[1] = v14;
    *a2 = v13;
    a2[1] = result;
    if (a3->n128_f64[0] < a2->n128_f64[0])
    {
      __n128 v7 = *a2;
      BOOL result = a2[1];
      __n128 v15 = a3[1];
      *a2 = *a3;
      a2[1] = v15;
      goto LABEL_9;
    }
  }
LABEL_10:
  result.n128_u64[0] = a4->n128_u64[0];
  if (a4->n128_f64[0] < a3->n128_f64[0])
  {
    __n128 v16 = *a3;
    BOOL result = a3[1];
    __n128 v17 = a4[1];
    *a3 = *a4;
    a3[1] = v17;
    *a4 = v16;
    a4[1] = result;
    result.n128_u64[0] = a3->n128_u64[0];
    if (a3->n128_f64[0] < a2->n128_f64[0])
    {
      __n128 v18 = *a2;
      BOOL result = a2[1];
      __n128 v19 = a3[1];
      *a2 = *a3;
      a2[1] = v19;
      *a3 = v18;
      a3[1] = result;
      result.n128_u64[0] = a2->n128_u64[0];
      if (a2->n128_f64[0] < a1->n128_f64[0])
      {
        __n128 v20 = *a1;
        BOOL result = a1[1];
        __n128 v21 = a2[1];
        *a1 = *a2;
        a1[1] = v21;
        *a2 = v20;
        a2[1] = result;
      }
    }
  }
  return result;
}

char *sub_1C4A3C28C(char **a1, void *a2)
{
  unint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = v2 - *a1;
  uint64_t v5 = v4 >> 3;
  unint64_t v6 = (v4 >> 3) + 1;
  if (v6 >> 61) {
    sub_1C4A38810();
  }
  uint64_t v9 = a1[2] - v3;
  if (v9 >> 2 > v6) {
    unint64_t v6 = v9 >> 2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 >> 61) {
      sub_1C4949AA8();
    }
    __n128 v11 = (char *)operator new(8 * v10);
  }
  else
  {
    __n128 v11 = 0;
  }
  __n128 v12 = &v11[8 * v5];
  __n128 v13 = &v11[8 * v10];
  *(void *)__n128 v12 = *a2;
  __n128 v14 = v12 + 8;
  if (v2 == v3)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    unint64_t v15 = v2 - v3 - 8;
    if (v15 < 0x78 || &v2[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v12 && &v11[v4 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v2) {
      goto LABEL_31;
    }
    uint64_t v16 = (v15 >> 3) + 1;
    uint64_t v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
    v12 -= v17;
    __n128 v18 = &v2[-v17];
    __n128 v19 = v2 - 16;
    __n128 v20 = &v11[8 * v5 - 16];
    uint64_t v21 = v16 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *((_OWORD *)v19 - 1);
      long long v22 = *(_OWORD *)v19;
      *((_OWORD *)v19 - 1) = 0uLL;
      *(_OWORD *)__n128 v19 = 0uLL;
      *((_OWORD *)v20 - 1) = v23;
      *(_OWORD *)__n128 v20 = v22;
      v19 -= 32;
      v20 -= 32;
      v21 -= 4;
    }
    while (v21);
    uint64_t v2 = v18;
    if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        uint64_t v24 = *((void *)v2 - 1);
        v2 -= 8;
        *(void *)uint64_t v2 = 0;
        *((void *)v12 - 1) = v24;
        v12 -= 8;
      }
      while (v2 != v3);
    }
    uint64_t v2 = *a1;
    __n128 v25 = a1[1];
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    while (v25 != v2)
    {
      uint64_t v27 = *((void *)v25 - 1);
      v25 -= 8;
      uint64_t v26 = v27;
      *(void *)__n128 v25 = 0;
      if (v27) {
        (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
      }
    }
  }
  if (v2) {
    operator delete(v2);
  }
  return v14;
}

void *sub_1C4A3C440(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1] - *a1;
  uint64_t v3 = v2 >> 3;
  unint64_t v4 = (v2 >> 3) + 1;
  if (v4 >> 61) {
    sub_1C4A38810();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v4) {
    unint64_t v4 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (v8)
  {
    if (v8 >> 61) {
      sub_1C4949AA8();
    }
    uint64_t v9 = (char *)operator new(8 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  unint64_t v10 = &v9[8 * v3];
  __n128 v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)unint64_t v10 = v12;
  __n128 v13 = v10 + 8;
  __n128 v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15) {
      goto LABEL_31;
    }
    uint64_t v17 = (v16 >> 3) + 1;
    uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v10 -= v18;
    __n128 v19 = &v15[-v18];
    __n128 v20 = v15 - 16;
    uint64_t v21 = &v9[8 * v3 - 16];
    uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *((_OWORD *)v20 - 1);
      long long v23 = *(_OWORD *)v20;
      *((_OWORD *)v20 - 1) = 0uLL;
      *(_OWORD *)__n128 v20 = 0uLL;
      *((_OWORD *)v21 - 1) = v24;
      *(_OWORD *)uint64_t v21 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    unint64_t v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        uint64_t v25 = *((void *)v15 - 1);
        v15 -= 8;
        *(void *)unint64_t v15 = 0;
        *((void *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    unint64_t v15 = (char *)*a1;
    uint64_t v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      uint64_t v28 = *((void *)v26 - 1);
      v26 -= 8;
      uint64_t v27 = v28;
      *(void *)uint64_t v26 = 0;
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

id CoreHandwriting::synthesis::loadModel(CoreHandwriting::synthesis *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (const char *)objc_msgSend_UTF8String(@"diffusion_latn.bundle", a2, a3, a4, a5, a6);
  if (pathForResource(v6, 0, (UInt8 *)__s))
  {
    size_t v7 = strlen(__s);
    if (v7 >= 0x7FFFFFFFFFFFFFF8) {
      sub_1C4949B7C();
    }
    size_t v11 = v7;
    if (v7 >= 0x17)
    {
      uint64_t v15 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v15 = v7 | 7;
      }
      uint64_t v16 = v15 + 1;
      uint64_t v12 = operator new(v15 + 1);
      size_t v43 = v11;
      int64_t v44 = v16 | 0x8000000000000000;
      *(void *)CGAffineTransform buf = v12;
    }
    else
    {
      HIBYTE(v44) = v7;
      uint64_t v12 = buf;
      if (!v7) {
        goto LABEL_15;
      }
    }
    memcpy(v12, __s, v11);
LABEL_15:
    *((unsigned char *)v12 + v11) = 0;
    if (v44 >= 0) {
      objc_msgSend_stringWithCString_encoding_(NSString, v8, (uint64_t)buf, 4, v9, v10);
    }
    else {
    uint64_t v17 = objc_msgSend_stringWithCString_encoding_(NSString, v8, *(uint64_t *)buf, 4, v9, v10);
    }
    uint64_t v22 = objc_msgSend_fileURLWithPath_(MEMORY[0x1E4F1CB10], v18, (uint64_t)v17, v19, v20, v21);
    id v23 = objc_alloc(MEMORY[0x1E4F1E990]);
    uint64_t v28 = objc_msgSend_initWithComputeUnits_(v23, v24, 0, v25, v26, v27);
    id v41 = 0;
    __n128 v14 = objc_msgSend_modelWithContentsOfURL_configuration_error_(MEMORY[0x1E4F1E968], v29, (uint64_t)v22, (uint64_t)v28, (uint64_t)&v41, v30);
    id v31 = v41;
    if (v14)
    {
      id v32 = v14;
    }
    else
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      long long v33 = (id)qword_1EA3C9FD8;
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        long long v39 = objc_msgSend_localizedDescription(v31, v34, v35, v36, v37, v38);
        *(_DWORD *)long long v45 = 138412290;
        __n128 v46 = v39;
        _os_log_impl(&dword_1C492D000, v33, OS_LOG_TYPE_ERROR, "Model: An error occurred when loading a model: %@", v45, 0xCu);
      }
    }

    if (SHIBYTE(v44) < 0) {
      operator delete(*(void **)buf);
    }
    goto LABEL_27;
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  __n128 v13 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)CGAffineTransform buf = 0;
    _os_log_impl(&dword_1C492D000, v13, OS_LOG_TYPE_ERROR, "Model: Could not find model: diffusion_latn.bundle", buf, 2u);
  }

  __n128 v14 = 0;
LABEL_27:
  return v14;
}

void sub_1C4A3C8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::loadCodemap(const char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (const char *)objc_msgSend_UTF8String(@"diffusion_latn.codemap", a1, a2, a3, a4, a5);
  pathForResource(v8, 0, (UInt8 *)__s);
  size_t v9 = strlen(__s);
  if (v9 > 0x7FFFFFFFFFFFFFF7) {
    sub_1C4949B7C();
  }
  __n128 v13 = (void *)v9;
  if (v9 >= 0x17)
  {
    uint64_t v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v15 = v9 | 7;
    }
    uint64_t v16 = v15 + 1;
    __n128 v14 = (void **)operator new(v15 + 1);
    __dst[1] = v13;
    int64_t v32 = v16 | 0x8000000000000000;
    __dst[0] = v14;
    goto LABEL_8;
  }
  HIBYTE(v32) = v9;
  __n128 v14 = __dst;
  if (v9) {
LABEL_8:
  }
    memcpy(v14, __s, (size_t)v13);
  *((unsigned char *)v13 + (void)v14) = 0;
  if (v32 >= 0) {
    objc_msgSend_stringWithCString_encoding_(NSString, v10, (uint64_t)__dst, 4, v11, v12);
  }
  else {
    objc_msgSend_stringWithCString_encoding_(NSString, v10, (uint64_t)__dst[0], 4, v11, v12);
  }
  id v17 = objc_claimAutoreleasedReturnValue();
  uint64_t v22 = (const char *)objc_msgSend_cStringUsingEncoding_(v17, v18, 4, v19, v20, v21);
  size_t v23 = strlen(v22);
  if (v23 > 0x7FFFFFFFFFFFFFF7) {
    sub_1C4949B7C();
  }
  long long v24 = (void *)v23;
  if (v23 >= 0x17)
  {
    uint64_t v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17) {
      uint64_t v26 = v23 | 7;
    }
    uint64_t v27 = v26 + 1;
    uint64_t v25 = operator new(v26 + 1);
    __p[1] = v24;
    unint64_t v30 = v27 | 0x8000000000000000;
    __p[0] = v25;
    goto LABEL_19;
  }
  HIBYTE(v30) = v23;
  uint64_t v25 = __p;
  if (v23) {
LABEL_19:
  }
    memmove(v25, v22, (size_t)v24);
  *((unsigned char *)v24 + (void)v25) = 0;
  uint64_t v28 = sub_1C4B3BC90((uint64_t *)__p);
  if (SHIBYTE(v30) < 0) {
    operator delete(__p[0]);
  }
  *a6 = v28;

  if (SHIBYTE(v32) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_1C4A3CB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  if (a21 < 0)
  {
    operator delete(a16);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::loadPPC(uint64_t **a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&unk_1EA3C91D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire((__guard *)&unk_1EA3C91D0))
  {
    qword_1EA3C9220 = 0;
    qword_1EA3C9218 = 0;
    qword_1EA3C9210 = (uint64_t)&qword_1EA3C9218;
    __cxa_atexit((void (*)(void *))sub_1C4A3CDAC, &qword_1EA3C9210, &dword_1C492D000);
    __cxa_guard_release((__guard *)&unk_1EA3C91D0);
  }
  if (qword_1EA3C91D8 != -1) {
    dispatch_once(&qword_1EA3C91D8, &unk_1F2012C30);
  }
  a1[1] = 0;
  uint64_t v3 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  unint64_t v4 = (uint64_t *)qword_1EA3C9210;
  if ((uint64_t *)qword_1EA3C9210 != &qword_1EA3C9218)
  {
    uint64_t v5 = a1 + 1;
    while (1)
    {
      unint64_t v6 = v4[4];
      size_t v7 = *v3;
      unint64_t v8 = a1 + 1;
      if (v5 != v3)
      {
        size_t v9 = *v3;
        uint64_t v10 = a1 + 1;
        if (v7)
        {
          do
          {
            unint64_t v8 = v9;
            size_t v9 = (uint64_t *)v9[1];
          }
          while (v9);
        }
        else
        {
          do
          {
            unint64_t v8 = (void *)v10[2];
            BOOL v11 = *v8 == (void)v10;
            uint64_t v10 = v8;
          }
          while (v11);
        }
        if (v8[4] >= v6) {
          break;
        }
      }
      if (v7) {
        uint64_t v12 = v8;
      }
      else {
        uint64_t v12 = a1 + 1;
      }
      if (v7) {
        __n128 v13 = v8 + 1;
      }
      else {
        __n128 v13 = a1 + 1;
      }
      if (!*v13) {
        goto LABEL_28;
      }
LABEL_31:
      uint64_t v18 = (uint64_t *)v4[1];
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          uint64_t v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = (uint64_t *)v4[2];
          BOOL v11 = *v19 == (void)v4;
          unint64_t v4 = v19;
        }
        while (!v11);
      }
      unint64_t v4 = v19;
      if (v19 == &qword_1EA3C9218) {
        return;
      }
    }
    __n128 v13 = a1 + 1;
    uint64_t v12 = a1 + 1;
    if (v7)
    {
      __n128 v14 = *v3;
      while (1)
      {
        while (1)
        {
          uint64_t v12 = v14;
          unint64_t v15 = v14[4];
          if (v15 <= v6) {
            break;
          }
          __n128 v14 = (uint64_t *)*v12;
          __n128 v13 = v12;
          if (!*v12) {
            goto LABEL_28;
          }
        }
        if (v15 >= v6) {
          goto LABEL_31;
        }
        __n128 v14 = (uint64_t *)v12[1];
        if (!v14)
        {
          __n128 v13 = v12 + 1;
          break;
        }
      }
    }
LABEL_28:
    uint64_t v16 = operator new(0x30uLL);
    v16[2] = *((_OWORD *)v4 + 2);
    *(void *)uint64_t v16 = 0;
    *((void *)v16 + 1) = 0;
    *((void *)v16 + 2) = v12;
    *__n128 v13 = v16;
    id v17 = (uint64_t *)**a1;
    if (v17)
    {
      *a1 = v17;
      uint64_t v16 = (_OWORD *)*v13;
    }
    sub_1C4949FD4(a1[1], (uint64_t *)v16);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    uint64_t v5 = (uint64_t **)*a1;
    goto LABEL_31;
  }
}

void sub_1C4A3CD94(_Unwind_Exception *a1)
{
  sub_1C4999C7C(v1, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A3CDAC(uint64_t a1)
{
  return a1;
}

void sub_1C4A3CDD8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (const char *)objc_msgSend_UTF8String(@"diffusion_latn_ppc_lookup.json", a2, a3, a4, a5, a6);
  pathForResource(v6, 0, (UInt8 *)__s);
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1C4949B7C();
  }
  BOOL v11 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v13 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v13 = v7 | 7;
    }
    uint64_t v14 = v13 + 1;
    uint64_t v12 = (void **)operator new(v13 + 1);
    __dst[1] = v11;
    int64_t v78 = v14 | 0x8000000000000000;
    __dst[0] = v12;
    goto LABEL_8;
  }
  HIBYTE(v78) = v7;
  uint64_t v12 = __dst;
  if (v7) {
LABEL_8:
  }
    memcpy(v12, __s, (size_t)v11);
  *((unsigned char *)v11 + (void)v12) = 0;
  if (v78 >= 0) {
    objc_msgSend_stringWithCString_encoding_(NSString, v8, (uint64_t)__dst, 4, v9, v10);
  }
  else {
  __n128 v69 = objc_msgSend_stringWithCString_encoding_(NSString, v8, (uint64_t)__dst[0], 4, v9, v10);
  }
  __n128 v70 = objc_msgSend_dataWithContentsOfFile_(MEMORY[0x1E4F1C9B8], v15, (uint64_t)v69, v16, v17, v18);
  objc_msgSend_JSONObjectWithData_options_error_(MEMORY[0x1E4F28D90], v19, (uint64_t)v70, 1, 0, v20);
  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = 0u;
  double v72 = v74 = 0u;
  objc_msgSend_allKeys(v72, v21, v22, v23, v24, v25);
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v26, (uint64_t)&v73, (uint64_t)v79, 16, v27);
  if (v33)
  {
    uint64_t v34 = *(void *)v74;
    do
    {
      for (uint64_t i = 0; i != v33; ++i)
      {
        while (1)
        {
          if (*(void *)v74 != v34) {
            objc_enumerationMutation(obj);
          }
          uint64_t v36 = *(void **)(*((void *)&v73 + 1) + 8 * i);
          int v37 = objc_msgSend_intValue(v36, v28, v29, v30, v31, v32);
          long long v42 = objc_msgSend_objectForKey_(v72, v38, (uint64_t)v36, v39, v40, v41);
          int v48 = objc_msgSend_intValue(v42, v43, v44, v45, v46, v47);

          uint64_t v49 = qword_1EA3C9218;
          if (qword_1EA3C9218) {
            break;
          }
          long long v50 = &qword_1EA3C9218;
          long long v51 = &qword_1EA3C9218;
LABEL_28:
          long long v53 = operator new(0x30uLL);
          v53[4] = v37;
          *((_DWORD *)v53 + 10) = 0;
          *long long v53 = 0;
          v53[1] = 0;
          v53[2] = v51;
          *long long v50 = (uint64_t)v53;
          long long v54 = v53;
          if (*(void *)qword_1EA3C9210)
          {
            qword_1EA3C9210 = *(void *)qword_1EA3C9210;
            long long v54 = (void *)*v50;
          }
          uint64_t v55 = qword_1EA3C9218;
          BOOL v56 = v54 == (void *)qword_1EA3C9218;
          *((unsigned char *)v54 + 24) = v54 == (void *)qword_1EA3C9218;
          if (!v56)
          {
            do
            {
              uint64_t v57 = v54[2];
              if (*(unsigned char *)(v57 + 24)) {
                break;
              }
              long long v58 = *(uint64_t **)(v57 + 16);
              uint64_t v59 = *v58;
              if (*v58 == v57)
              {
                uint64_t v62 = v58[1];
                if (!v62 || (v63 = *(unsigned __int8 *)(v62 + 24), uint64_t v60 = (unsigned char *)(v62 + 24), v63))
                {
                  if (*(void **)v57 == v54)
                  {
                    *(unsigned char *)(v57 + 24) = 1;
                    *((unsigned char *)v58 + 24) = 0;
                    uint64_t v66 = *(void *)(v57 + 8);
                    *long long v58 = v66;
                    if (v66) {
                      goto LABEL_45;
                    }
                  }
                  else
                  {
                    uint64_t v64 = *(uint64_t **)(v57 + 8);
                    uint64_t v65 = *v64;
                    *(void *)(v57 + 8) = *v64;
                    if (v65)
                    {
                      *(void *)(v65 + 16) = v57;
                      long long v58 = *(uint64_t **)(v57 + 16);
                    }
                    v64[2] = (uint64_t)v58;
                    *(void *)(*(void *)(v57 + 16) + 8 * (**(void **)(v57 + 16) != v57)) = v64;
                    *uint64_t v64 = v57;
                    *(void *)(v57 + 16) = v64;
                    long long v58 = (uint64_t *)v64[2];
                    uint64_t v57 = *v58;
                    *((unsigned char *)v64 + 24) = 1;
                    *((unsigned char *)v58 + 24) = 0;
                    uint64_t v66 = *(void *)(v57 + 8);
                    *long long v58 = v66;
                    if (v66) {
LABEL_45:
                    }
                      *(void *)(v66 + 16) = v58;
                  }
                  *(void *)(v57 + 16) = v58[2];
                  *(void *)(v58[2] + 8 * (*(void *)v58[2] != (void)v58)) = v57;
                  *(void *)(v57 + 8) = v58;
LABEL_17:
                  v58[2] = v57;
                  break;
                }
              }
              else if (!v59 || (v61 = *(unsigned __int8 *)(v59 + 24), uint64_t v60 = (unsigned char *)(v59 + 24), v61))
              {
                if (*(void **)v57 == v54)
                {
                  uint64_t v68 = v54[1];
                  *(void *)uint64_t v57 = v68;
                  if (v68)
                  {
                    *(void *)(v68 + 16) = v57;
                    long long v58 = *(uint64_t **)(v57 + 16);
                  }
                  v54[2] = v58;
                  *(void *)(*(void *)(v57 + 16) + 8 * (**(void **)(v57 + 16) != v57)) = v54;
                  v54[1] = v57;
                  *(void *)(v57 + 16) = v54;
                  long long v58 = (uint64_t *)v54[2];
                  *((unsigned char *)v54 + 24) = 1;
                  *((unsigned char *)v58 + 24) = 0;
                  uint64_t v57 = v58[1];
                  long long v67 = *(void **)v57;
                  v58[1] = *(void *)v57;
                  if (!v67) {
                    goto LABEL_16;
                  }
                }
                else
                {
                  *(unsigned char *)(v57 + 24) = 1;
                  *((unsigned char *)v58 + 24) = 0;
                  uint64_t v57 = v58[1];
                  long long v67 = *(void **)v57;
                  v58[1] = *(void *)v57;
                  if (!v67) {
                    goto LABEL_16;
                  }
                }
                v67[2] = v58;
LABEL_16:
                *(void *)(v57 + 16) = v58[2];
                *(void *)(v58[2] + 8 * (*(void *)v58[2] != (void)v58)) = v57;
                *(void *)uint64_t v57 = v58;
                goto LABEL_17;
              }
              *(unsigned char *)(v57 + 24) = 1;
              long long v54 = v58;
              *((unsigned char *)v58 + 24) = v58 == (uint64_t *)v55;
              *uint64_t v60 = 1;
            }
            while (v58 != (uint64_t *)v55);
          }
          ++qword_1EA3C9220;
          *((_DWORD *)v53 + 10) = v48;
          if (++i == v33) {
            goto LABEL_58;
          }
        }
        while (1)
        {
          while (1)
          {
            long long v51 = (uint64_t *)v49;
            unint64_t v52 = *(void *)(v49 + 32);
            if (v52 <= v37) {
              break;
            }
            uint64_t v49 = *v51;
            long long v50 = v51;
            if (!*v51) {
              goto LABEL_28;
            }
          }
          if (v52 >= v37) {
            break;
          }
          uint64_t v49 = v51[1];
          if (!v49)
          {
            long long v50 = v51 + 1;
            goto LABEL_28;
          }
        }
        *((_DWORD *)v51 + 10) = v48;
      }
LABEL_58:
      uint64_t v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v28, (uint64_t)&v73, (uint64_t)v79, 16, v32);
    }
    while (v33);
  }

  if (SHIBYTE(v78) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_1C4A3D29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

CoreHandwriting::synthesis::CHDiffusionSynthesisModel *CoreHandwriting::synthesis::CHDiffusionSynthesisModel::CHDiffusionSynthesisModel(CoreHandwriting::synthesis::CHDiffusionSynthesisModel *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)((char *)this + 8) = 0u;
  size_t v7 = (void **)((char *)this + 8);
  *((void *)this + 7) = 0;
  long long v76 = (char *)this + 56;
  *((void *)this + 9) = 0;
  unint64_t v8 = (uint64_t **)((char *)this + 72);
  *((void *)this + 8) = (char *)this + 72;
  uint64_t v9 = (void **)((char *)this + 64);
  *((void *)this + 10) = 0;
  *((void *)this + 12) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 11) = (char *)this + 96;
  long long v73 = (void *)((char *)this + 88);
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  uint64_t v71 = (char *)this + 96;
  double v72 = (void **)((char *)this + 112);
  *((void *)this + 15) = 0;
  id v78 = 0;
  uint64_t v10 = objc_msgSend_createProgramLibraryWithError_(CHDiffusionModelE5ML, a2, (uint64_t)&v78, a4, a5, a6);
  id v74 = v78;
  BOOL v11 = *v7;
  *size_t v7 = (void *)v10;

  id v77 = v74;
  uint64_t v16 = objc_msgSend_createProgramLibraryWithError_(CHStyleEncoderModelE5ML, v12, (uint64_t)&v77, v13, v14, v15);
  id v17 = v77;

  uint64_t v18 = (void *)*((void *)this + 4);
  *((void *)this + 4) = v16;

  long long v75 = v17;
  if (v17)
  {
    if (qword_1EA3CA000 == -1)
    {
      uint64_t v19 = (id)qword_1EA3C9FD8;
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
LABEL_5:

        goto LABEL_6;
      }
    }
    else
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      uint64_t v19 = (id)qword_1EA3C9FD8;
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        goto LABEL_5;
      }
    }
    uint64_t v25 = objc_msgSend_localizedDescription(v17, v20, v21, v22, v23, v24);
    *(_DWORD *)CGAffineTransform buf = 138412290;
    *(void *)&uint8_t buf[4] = v25;
    _os_log_impl(&dword_1C492D000, v19, OS_LOG_TYPE_ERROR, "Model: An error occurred loading a program library: %@", buf, 0xCu);

    goto LABEL_5;
  }
LABEL_6:
  *(void *)this = -1;
  CoreHandwriting::synthesis::CHDiffusionSynthesisModel::switchModelConfigurationForWidth(this, 8);
  if (!*((void *)this + 2) || !*((void *)this + 5))
  {
    if (qword_1EA3CA000 == -1)
    {
      long long v42 = (id)qword_1EA3C9FD8;
      if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
        goto LABEL_40;
      }
    }
    else
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      long long v42 = (id)qword_1EA3C9FD8;
      if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
        goto LABEL_40;
      }
    }
    *(_WORD *)CGAffineTransform buf = 0;
    _os_log_impl(&dword_1C492D000, v42, OS_LOG_TYPE_ERROR, "Model: failed to load.", buf, 2u);
    goto LABEL_40;
  }
  CoreHandwriting::synthesis::loadCodemap(v26, v27, v28, v29, v30, (uint64_t *)buf);
  uint64_t v31 = *(void *)v76;
  *(void *)long long v76 = *(void *)buf;
  if (v31)
  {
    if (*(void *)v31) {
      munmap(*(void **)v31, *(void *)(v31 + 8));
    }
    MEMORY[0x1C8786460](v31, 0x1010C40A749B91FLL);
  }
  sub_1C4999C7C((uint64_t)v9, *((void **)this + 9));
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 8) = v8;
  long long v42 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v32, v33, v34, v35, v36);
  uint64_t v43 = *(void *)v76;
  if (*(_DWORD *)(*(void *)v76 + 24))
  {
    unint64_t v44 = 0;
    do
    {
      unsigned int v50 = *(_DWORD *)CHCodeMap::operator[](v43, v44);
      long long v51 = *v8;
      unint64_t v52 = v8;
      long long v53 = v8;
      if (*v8)
      {
        while (1)
        {
          while (1)
          {
            long long v53 = (uint64_t **)v51;
            unsigned int v54 = *((_DWORD *)v51 + 8);
            if (v50 >= v54) {
              break;
            }
            long long v51 = *v53;
            unint64_t v52 = v53;
            if (!*v53) {
              goto LABEL_21;
            }
          }
          if (v54 >= v50) {
            break;
          }
          long long v51 = v53[1];
          if (!v51)
          {
            unint64_t v52 = v53 + 1;
            goto LABEL_21;
          }
        }
        uint64_t v55 = v53;
      }
      else
      {
LABEL_21:
        uint64_t v55 = operator new(0x30uLL);
        v55[8] = v50;
        *((void *)v55 + 5) = 0;
        *(void *)uint64_t v55 = 0;
        *((void *)v55 + 1) = 0;
        *((void *)v55 + 2) = v53;
        char *v52 = (uint64_t *)v55;
        BOOL v56 = (void *)**v9;
        uint64_t v57 = (uint64_t *)v55;
        if (v56)
        {
          *uint64_t v9 = v56;
          uint64_t v57 = *v52;
        }
        sub_1C4949FD4(*((uint64_t **)this + 9), v57);
        ++*((void *)this + 10);
      }
      *((void *)v55 + 5) = v44;
      long long v58 = unicodeToNSString(v50, v45, v46, v47, v48, v49);
      objc_msgSend_addObject_(v42, v59, (uint64_t)v58, v60, v61, v62);
      if (v50 == 57426) {
        *((void *)this + 15) = v44;
      }

      ++v44;
      uint64_t v43 = *(void *)v76;
    }
    while (v44 < *(unsigned int *)(*(void *)v76 + 24));
  }
  uint64_t v63 = objc_msgSend_copy(v42, v37, v38, v39, v40, v41);
  uint64_t v64 = *v72;
  void *v72 = (void *)v63;

  CoreHandwriting::synthesis::loadPPC((uint64_t **)buf);
  sub_1C4999C7C((uint64_t)v73, *((void **)this + 12));
  uint64_t v65 = *(void **)&buf[8];
  *((void *)this + 11) = *(void *)buf;
  *((void *)this + 12) = v65;
  uint64_t v66 = *(void *)&buf[16];
  *((void *)this + 13) = *(void *)&buf[16];
  if (v66)
  {
    v65[2] = v71;
    *(void *)CGAffineTransform buf = &buf[8];
    *(void *)&uint8_t buf[8] = 0;
    *(void *)&uint8_t buf[16] = 0;
    sub_1C4999C7C((uint64_t)buf, 0);
    if (*((void *)this + 10) == *((void *)this + 13)) {
      goto LABEL_40;
    }
  }
  else
  {
    void *v73 = v71;
    sub_1C4999C7C((uint64_t)buf, v65);
    if (*((void *)this + 10) == *((void *)this + 13)) {
      goto LABEL_40;
    }
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  long long v67 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v67, OS_LOG_TYPE_FAULT))
  {
    uint64_t v68 = *((void *)this + 13);
    uint64_t v69 = *((void *)this + 10);
    *(_DWORD *)CGAffineTransform buf = 134218240;
    *(void *)&uint8_t buf[4] = v68;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v69;
    _os_log_impl(&dword_1C492D000, v67, OS_LOG_TYPE_FAULT, "Model: Codemap and points-per-character lookup are expected to have the same size: %lu != %lu", buf, 0x16u);
  }

LABEL_40:
  return this;
}

void sub_1C4A3D864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a2) {
    sub_1C4946848(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::synthesis::CHDiffusionSynthesisModel::switchModelConfigurationForWidth(CoreHandwriting::synthesis::CHDiffusionSynthesisModel *this, uint64_t a2)
{
  if (*(void *)this != a2)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    unint64_t v4 = (id)qword_1EA3C9FC8;
    os_signpost_id_t v5 = os_signpost_id_generate(v4);

    if (qword_1EA3CA000 == -1)
    {
      unint64_t v6 = (id)qword_1EA3C9FC8;
      unint64_t v7 = v5 - 1;
      if (v5 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_8;
      }
    }
    else
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      unint64_t v6 = (id)qword_1EA3C9FC8;
      unint64_t v7 = v5 - 1;
      if (v5 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_8;
      }
    }
    if (os_signpost_enabled(v6))
    {
      *(_WORD *)CGAffineTransform buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C492D000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v5, "CHDiffusionSwitchConfiguration", "", buf, 2u);
    }
LABEL_8:

    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    unint64_t v8 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl(&dword_1C492D000, v8, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHDiffusionSwitchConfiguration\"", v39, 2u);
    }

    *(void *)this = a2;
    uint64_t v9 = [CHDiffusionModelE5ML alloc];
    uint64_t v13 = objc_msgSend_initWithProgramLibrary_width_(v9, v10, *((void *)this + 1), a2, v11, v12);
    uint64_t v14 = (void *)*((void *)this + 2);
    *((void *)this + 2) = v13;

    uint64_t v20 = objc_msgSend_createExecutionContext(*((void **)this + 2), v15, v16, v17, v18, v19);
    uint64_t v21 = (void *)*((void *)this + 3);
    *((void *)this + 3) = v20;

    uint64_t v22 = [CHStyleEncoderModelE5ML alloc];
    uint64_t v26 = objc_msgSend_initWithProgramLibrary_width_(v22, v23, *((void *)this + 4), a2, v24, v25);
    uint64_t v27 = (void *)*((void *)this + 5);
    *((void *)this + 5) = v26;

    uint64_t v33 = objc_msgSend_createExecutionContext(*((void **)this + 5), v28, v29, v30, v31, v32);
    uint64_t v34 = (void *)*((void *)this + 6);
    *((void *)this + 6) = v33;

    if (qword_1EA3CA000 == -1)
    {
      uint64_t v35 = (id)qword_1EA3C9FC8;
      if (v7 > 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_16;
      }
    }
    else
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      uint64_t v35 = (id)qword_1EA3C9FC8;
      if (v7 > 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_16;
      }
    }
    if (os_signpost_enabled(v35))
    {
      *(_WORD *)uint64_t v38 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C492D000, v35, OS_SIGNPOST_INTERVAL_END, v5, "CHDiffusionSwitchConfiguration", "", v38, 2u);
    }
LABEL_16:

    if (qword_1EA3CA000 == -1)
    {
      uint64_t v36 = (id)qword_1EA3C9F90[0];
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
LABEL_19:

        return;
      }
    }
    else
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      uint64_t v36 = (id)qword_1EA3C9F90[0];
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_19;
      }
    }
    *(_WORD *)int v37 = 0;
    _os_log_impl(&dword_1C492D000, v36, OS_LOG_TYPE_DEFAULT, "END \"CHDiffusionSwitchConfiguration\"", v37, 2u);
    goto LABEL_19;
  }
}

uint64_t *sub_1C4A3DC54(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(void *)v2) {
      munmap(*(void **)v2, *(void *)(v2 + 8));
    }
    MEMORY[0x1C8786460](v2, 0x1010C40A749B91FLL);
  }
  return a1;
}

id CoreHandwriting::synthesis::CHDiffusionSynthesisModel::predictStyle(CoreHandwriting::synthesis::CHDiffusionSynthesisModel *a1, void *a2)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  unint64_t v4 = (id)qword_1EA3C9FC8;
  os_signpost_id_t v5 = os_signpost_id_generate(v4);

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  unint64_t v6 = (id)qword_1EA3C9FC8;
  unint64_t v7 = v6;
  os_signpost_id_t spid = v5;
  unint64_t v8 = v5 - 1;
  if (v8 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)CGAffineTransform buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v7, OS_SIGNPOST_INTERVAL_BEGIN, spid, "CHStyleEncoderModelInference", "", buf, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v9 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CGAffineTransform buf = 0;
    _os_log_impl(&dword_1C492D000, v9, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHStyleEncoderModelInference\"", buf, 2u);
  }

  uint64_t v14 = objc_msgSend_featureValueForName_(v3, v10, @"input_labels", v11, v12, v13);
  uint64_t v20 = objc_msgSend_multiArrayValue(v14, v15, v16, v17, v18, v19);
  uint64_t v26 = objc_msgSend_shape(v20, v21, v22, v23, v24, v25);
  uint64_t v31 = objc_msgSend_objectAtIndexedSubscript_(v26, v27, 1, v28, v29, v30);
  unsigned int v37 = objc_msgSend_intValue(v31, v32, v33, v34, v35, v36);

  long long v42 = objc_msgSend_featureValueForName_(v3, v38, @"input_style_labels", v39, v40, v41);
  uint64_t v48 = objc_msgSend_multiArrayValue(v42, v43, v44, v45, v46, v47);
  unsigned int v54 = objc_msgSend_shape(v48, v49, v50, v51, v52, v53);
  uint64_t v59 = objc_msgSend_objectAtIndexedSubscript_(v54, v55, 1, v56, v57, v58);
  unsigned int v65 = objc_msgSend_intValue(v59, v60, v61, v62, v63, v64);

  if (v37 <= v65) {
    unsigned int v66 = v65;
  }
  else {
    unsigned int v66 = v37;
  }
  if (v66 <= 8) {
    uint64_t v67 = 8;
  }
  else {
    uint64_t v67 = 48;
  }
  CoreHandwriting::synthesis::CHDiffusionSynthesisModel::switchModelConfigurationForWidth(a1, v67);
  uint64_t v68 = (void *)*((void *)a1 + 6);
  id v85 = 0;
  double v72 = objc_msgSend_predictionFromFeatureProvider_error_(v68, v69, (uint64_t)v3, (uint64_t)&v85, v70, v71);
  id v73 = v85;
  if (v73)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    id v74 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
    {
      uint64_t v80 = objc_msgSend_localizedDescription(v73, v75, v76, v77, v78, v79);
      *(_DWORD *)CGAffineTransform buf = 138412290;
      double v87 = v80;
      _os_log_impl(&dword_1C492D000, v74, OS_LOG_TYPE_ERROR, "Model: An error occurred during style encoder inference: %@", buf, 0xCu);
    }
  }
  if (qword_1EA3CA000 == -1)
  {
    uint64_t v81 = (id)qword_1EA3C9FC8;
    if (v8 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_28;
    }
  }
  else
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v81 = (id)qword_1EA3C9FC8;
    if (v8 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_28;
    }
  }
  if (os_signpost_enabled(v81))
  {
    *(_WORD *)CGAffineTransform buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v81, OS_SIGNPOST_INTERVAL_END, spid, "CHStyleEncoderModelInference", "", buf, 2u);
  }
LABEL_28:

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  BOOL v82 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CGAffineTransform buf = 0;
    _os_log_impl(&dword_1C492D000, v82, OS_LOG_TYPE_DEFAULT, "END \"CHStyleEncoderModelInference\"", buf, 2u);
  }

  return v72;
}

void sub_1C4A3E110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::CHDiffusionSynthesisModel::predict(CoreHandwriting::synthesis::CHDiffusionSynthesisModel *a1, void *a2)
{
  uint64_t v146 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  unint64_t v4 = (id)qword_1EA3C9FC8;
  os_signpost_id_t spid = os_signpost_id_generate(v4);

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  os_signpost_id_t v5 = (id)qword_1EA3C9FC8;
  unint64_t v6 = v5;
  unint64_t v7 = spid - 1;
  if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    *(_WORD *)CGAffineTransform buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v6, OS_SIGNPOST_INTERVAL_BEGIN, spid, "CHDiffusionModelInference", "", buf, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  unint64_t v8 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CGAffineTransform buf = 0;
    _os_log_impl(&dword_1C492D000, v8, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHDiffusionModelInference\"", buf, 2u);
  }

  uint64_t v13 = objc_msgSend_featureValueForName_(v3, v9, @"input_labels", v10, v11, v12);
  uint64_t v19 = objc_msgSend_multiArrayValue(v13, v14, v15, v16, v17, v18);
  uint64_t v25 = objc_msgSend_shape(v19, v20, v21, v22, v23, v24);
  uint64_t v30 = objc_msgSend_objectAtIndexedSubscript_(v25, v26, 1, v27, v28, v29);
  unsigned int v36 = objc_msgSend_intValue(v30, v31, v32, v33, v34, v35);

  uint64_t v41 = objc_msgSend_featureValueForName_(v3, v37, @"input_style_labels", v38, v39, v40);
  uint64_t v47 = objc_msgSend_multiArrayValue(v41, v42, v43, v44, v45, v46);
  uint64_t v53 = objc_msgSend_shape(v47, v48, v49, v50, v51, v52);
  uint64_t v58 = objc_msgSend_objectAtIndexedSubscript_(v53, v54, 1, v55, v56, v57);
  unsigned int v64 = objc_msgSend_intValue(v58, v59, v60, v61, v62, v63);

  if (v36 <= v64) {
    unsigned int v65 = v64;
  }
  else {
    unsigned int v65 = v36;
  }
  if (v65 <= 8) {
    uint64_t v66 = 8;
  }
  else {
    uint64_t v66 = 48;
  }
  CoreHandwriting::synthesis::CHDiffusionSynthesisModel::switchModelConfigurationForWidth(a1, v66);
  id v67 = v3;
  double v72 = objc_msgSend_featureValueForName_(v67, v68, @"input_diffusion_style_encoding", v69, v70, v71);
  BOOL v73 = v72 == 0;

  if (v73)
  {
    id v79 = v67;
    uint64_t v80 = CoreHandwriting::synthesis::CHDiffusionSynthesisModel::predictStyle(a1, v79);
    uint64_t v86 = objc_msgSend_dictionary(v79, v81, v82, v83, v84, v85);
    uint64_t v92 = objc_msgSend_mutableCopy(v86, v87, v88, v89, v90, v91);

    uint64_t v77 = objc_msgSend_featureValueForName_(v80, v93, @"diffusion_style_encoding", v94, v95, v96);
    objc_msgSend_setObject_forKeyedSubscript_(v92, v97, (uint64_t)v77, @"input_diffusion_style_encoding", v98, v99);
    id v100 = objc_alloc(MEMORY[0x1E4F1E930]);
    uint64_t v78 = objc_msgSend_initWithFeatureValueDictionary_(v100, v101, (uint64_t)v92, v102, v103, v104);
  }
  else
  {
    uint64_t v77 = 0;
    uint64_t v78 = v67;
  }
  __n128 v105 = (void *)*((void *)a1 + 3);
  id v143 = 0;
  long long v106 = objc_msgSend_predictionFromFeatureProvider_error_(v105, v74, (uint64_t)v78, (uint64_t)&v143, v75, v76, spid);
  id v112 = v143;
  if (v77)
  {
    uint64_t v113 = objc_msgSend_dictionary(v106, v107, v108, v109, v110, v111);
    long long v119 = objc_msgSend_mutableCopy(v113, v114, v115, v116, v117, v118);

    objc_msgSend_setObject_forKeyedSubscript_(v119, v120, (uint64_t)v77, @"diffusion_style_encoding", v121, v122);
    id v123 = objc_alloc(MEMORY[0x1E4F1E930]);
    uint64_t v128 = objc_msgSend_initWithFeatureValueDictionary_(v123, v124, (uint64_t)v119, v125, v126, v127);

    long long v106 = (void *)v128;
  }
  if (v112)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v129 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
    {
      uint64_t v135 = objc_msgSend_localizedDescription(v112, v130, v131, v132, v133, v134);
      *(_DWORD *)CGAffineTransform buf = 138412290;
      long long v145 = v135;
      _os_log_impl(&dword_1C492D000, v129, OS_LOG_TYPE_ERROR, "Model: An error occurred during denoiser inference: %@", buf, 0xCu);
    }
    id v136 = 0;
    goto LABEL_39;
  }
  if (qword_1EA3CA000 != -1)
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    unint64_t v140 = (id)qword_1EA3C9FC8;
    uint64_t v137 = v140;
    if (v7 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_34;
    }
LABEL_32:
    if (os_signpost_enabled(v137))
    {
      *(_WORD *)CGAffineTransform buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C492D000, v137, OS_SIGNPOST_INTERVAL_END, spida, "CHDiffusionModelInference", "", buf, 2u);
    }
    goto LABEL_34;
  }
  uint64_t v137 = (id)qword_1EA3C9FC8;
  if (v7 <= 0xFFFFFFFFFFFFFFFDLL) {
    goto LABEL_32;
  }
LABEL_34:

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  __n128 v138 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CGAffineTransform buf = 0;
    _os_log_impl(&dword_1C492D000, v138, OS_LOG_TYPE_DEFAULT, "END \"CHDiffusionModelInference\"", buf, 2u);
  }

  id v136 = v106;
LABEL_39:

  return v136;
}

void sub_1C4A3E74C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::CHDiffusionSynthesisModel::encodeString(CoreHandwriting::synthesis::CHDiffusionSynthesisModel *this@<X0>, NSString *a2@<X1>, void *a3@<X8>)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  os_signpost_id_t v5 = a2;
  uint64_t v49 = 0;
  uint64_t v50 = &v49;
  uint64_t v51 = 0x4812000000;
  uint64_t v52 = sub_1C4A3EC70;
  uint64_t v53 = sub_1C4A3EC94;
  unsigned int v54 = &unk_1C4CB5C62;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  long long __p = 0;
  unint64_t v11 = objc_msgSend_length(v5, v6, v7, v8, v9, v10);
  unint64_t v17 = v11;
  uint64_t v18 = __p;
  if (v11 <= (v57 - (unsigned char *)__p) >> 3) {
    goto LABEL_13;
  }
  if (v11 >> 61) {
    sub_1C494A220();
  }
  uint64_t v19 = v56;
  uint64_t v20 = (char *)operator new(8 * v11);
  uint64_t v21 = v19 - v18;
  uint64_t v22 = &v20[(v19 - v18) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v23 = v22;
  if (v19 != v18)
  {
    if ((unint64_t)(v21 - 8) < 0x58)
    {
      uint64_t v23 = &v20[(v19 - v18) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_10:
        uint64_t v32 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v23 - 1) = v32;
        v23 -= 8;
      }
      while (v19 != v18);
      goto LABEL_11;
    }
    uint64_t v23 = &v20[(v19 - v18) & 0xFFFFFFFFFFFFFFF8];
    if (v19 - v20 - (v21 & 0xFFFFFFFFFFFFFFF8) < 0x20) {
      goto LABEL_10;
    }
    uint64_t v24 = v21 >> 3;
    unint64_t v25 = ((unint64_t)(v21 - 8) >> 3) + 1;
    uint64_t v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v27 = &v19[-v26];
    uint64_t v23 = &v22[-v26];
    uint64_t v28 = &v20[8 * v24 - 16];
    uint64_t v29 = (long long *)(v19 - 16);
    uint64_t v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v31 = *v29;
      *((_OWORD *)v28 - 1) = *(v29 - 1);
      *(_OWORD *)uint64_t v28 = v31;
      v28 -= 32;
      v29 -= 2;
      v30 -= 4;
    }
    while (v30);
    uint64_t v19 = v27;
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_10;
    }
  }
LABEL_11:
  long long __p = v23;
  uint64_t v56 = v22;
  uint64_t v57 = &v20[8 * v17];
  if (v18) {
    operator delete(v18);
  }
LABEL_13:
  uint64_t v33 = objc_msgSend_length(v5, v12, v13, v14, v15, v16);
  v48[0] = MEMORY[0x1E4F143A8];
  v48[1] = 3221225472;
  v48[2] = sub_1C4A3ECAC;
  v48[3] = &unk_1E64E2A88;
  v48[4] = &v49;
  v48[5] = this;
  objc_msgSend_enumerateCodepointsInRange_usingBlock_(v5, v34, 0, v33, (uint64_t)v48, v35);
  unsigned int v37 = (unint64_t *)v50[6];
  unsigned int v36 = (unint64_t *)v50[7];
  if (v37 == v36)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    a3[3] = 0;
    _Block_object_dispose(&v49, 8);
    uint64_t v47 = (char *)__p;
    if (!__p) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (!*((void *)this + 12)) {
LABEL_22:
  }
    sub_1C49470F0("map::at:  key not found");
  int v38 = 0;
  uint64_t v39 = (unint64_t *)v50[6];
  do
  {
    unint64_t v40 = *v39;
    uint64_t v41 = (uint64_t *)*((void *)this + 12);
    while (1)
    {
      while (1)
      {
        unint64_t v42 = v41[4];
        if (v42 <= v40) {
          break;
        }
        uint64_t v41 = (uint64_t *)*v41;
        if (!v41) {
          goto LABEL_22;
        }
      }
      if (v42 >= v40) {
        break;
      }
      uint64_t v41 = (uint64_t *)v41[1];
      if (!v41) {
        goto LABEL_22;
      }
    }
    v38 += *((_DWORD *)v41 + 10);
    ++v39;
  }
  while (v39 != v36);
  if (v38 >= 1153)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v43 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v43, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)CGAffineTransform buf = 67109376;
      int v59 = 1152;
      __int16 v60 = 1024;
      int v61 = v38;
      _os_log_impl(&dword_1C492D000, v43, OS_LOG_TYPE_FAULT, "Model: Expected numPoints <= %i but got numPoints=%i", buf, 0xEu);
    }

    unsigned int v37 = (unint64_t *)v50[6];
    unsigned int v36 = (unint64_t *)v50[7];
    int v38 = 1152;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int64_t v44 = (char *)v36 - (char *)v37;
  if (v36 != v37)
  {
    if (v44 < 0) {
      sub_1C494A220();
    }
    uint64_t v45 = (char *)operator new((char *)v36 - (char *)v37);
    *a3 = v45;
    uint64_t v46 = &v45[8 * (v44 >> 3)];
    a3[2] = v46;
    memcpy(v45, v37, v44);
    a3[1] = v46;
  }
  a3[3] = v38;
  _Block_object_dispose(&v49, 8);
  uint64_t v47 = (char *)__p;
  if (__p)
  {
LABEL_33:
    uint64_t v56 = v47;
    operator delete(v47);
  }
LABEL_34:
}

void sub_1C4A3EC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v26 = *(void **)v24;
  if (*(void *)v24)
  {
    *(void *)(v24 + 8) = v26;
    operator delete(v26);
  }
  _Block_object_dispose(&a16, 8);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 sub_1C4A3EC70(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1C4A3EC94(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1C4A3ECAC(uint64_t a1, unsigned int a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(v3 + 72);
  uint64_t v4 = v3 + 72;
  uint64_t v5 = v6;
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = v4;
  do
  {
    unsigned int v8 = *(_DWORD *)(v5 + 32);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = (uint64_t *)v5;
    }
    else {
      uint64_t v10 = (uint64_t *)(v5 + 8);
    }
    if (v9) {
      uint64_t v7 = v5;
    }
    uint64_t v5 = *v10;
  }
  while (*v10);
  if (v7 != v4 && *(_DWORD *)(v7 + 32) <= a2)
  {
    uint64_t v12 = *(void **)(*(void *)(a1 + 32) + 8);
    uint64_t v14 = (char *)v12[7];
    unint64_t v13 = v12[8];
    if ((unint64_t)v14 >= v13)
    {
      uint64_t v15 = (char *)v12[6];
      uint64_t v16 = (v14 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        sub_1C494A220();
      }
      uint64_t v18 = v13 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          sub_1C4949AA8();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      *uint64_t v21 = *(void *)(v7 + 40);
      uint64_t v22 = v21 + 1;
      if (v14 != v15)
      {
        unint64_t v23 = v14 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_43;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_43;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v26 = &v14[-v25];
        uint64_t v21 = (void *)((char *)v21 - v25);
        uint64_t v27 = &v20[8 * v16 - 16];
        uint64_t v28 = v14 - 16;
        uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v30 = *(_OWORD *)v28;
          *(v27 - 1) = *((_OWORD *)v28 - 1);
          *uint64_t v27 = v30;
          v27 -= 2;
          v28 -= 32;
          v29 -= 4;
        }
        while (v29);
        uint64_t v14 = v26;
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_43:
          do
          {
            uint64_t v31 = *((void *)v14 - 1);
            v14 -= 8;
            *--uint64_t v21 = v31;
          }
          while (v14 != v15);
        }
      }
      void v12[6] = v21;
      v12[7] = v22;
      v12[8] = &v20[8 * v19];
      if (v15) {
        operator delete(v15);
      }
      v12[7] = v22;
    }
    else
    {
      *(void *)uint64_t v14 = *(void *)(v7 + 40);
      v12[7] = v14 + 8;
    }
  }
  else
  {
LABEL_12:
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    unint64_t v11 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v32[0] = 67109120;
      v32[1] = a2;
      _os_log_impl(&dword_1C492D000, v11, OS_LOG_TYPE_ERROR, "Model: Got unknown codepoint %u", (uint8_t *)v32, 8u);
    }
  }
}

uint64_t CoreHandwriting::synthesis::CHDiffusionSynthesisModel::canEncodeString(CoreHandwriting::synthesis::CHDiffusionSynthesisModel *this, NSString *a2)
{
  uint64_t v3 = a2;
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  char v18 = 1;
  uint64_t v9 = objc_msgSend_length(v3, v4, v5, v6, v7, v8);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = sub_1C4A3EFFC;
  v14[3] = &unk_1E64E2A88;
  void v14[4] = &v15;
  v14[5] = this;
  objc_msgSend_enumerateCodepointsInRange_usingBlock_(v3, v10, 0, v9, (uint64_t)v14, v11);
  uint64_t v12 = *((unsigned __int8 *)v16 + 24);
  _Block_object_dispose(&v15, 8);

  return v12;
}

void sub_1C4A3EFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1C4A3EFFC(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  uint64_t v5 = *(void *)(result + 40);
  uint64_t v8 = *(void *)(v5 + 72);
  uint64_t v6 = v5 + 72;
  uint64_t v7 = v8;
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = v6;
  do
  {
    unsigned int v10 = *(_DWORD *)(v7 + 32);
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      uint64_t v12 = (uint64_t *)v7;
    }
    else {
      uint64_t v12 = (uint64_t *)(v7 + 8);
    }
    if (v11) {
      uint64_t v9 = v7;
    }
    uint64_t v7 = *v12;
  }
  while (*v12);
  if (v9 == v6 || *(_DWORD *)(v9 + 32) > a2)
  {
LABEL_12:
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *a5 = 1;
  }
  return result;
}

double CoreHandwriting::synthesis::CHDiffusionSynthesisModel::getComposerConditionsForBeautification@<D0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(0x14uLL);
  a1[1] = v3 + 5;
  a1[2] = v3 + 5;
  v3[4] = -1082130432;
  double result = 0.0;
  *(_OWORD *)uint64_t v3 = xmmword_1C4C3B034;
  *a1 = v3;
  return result;
}

double CoreHandwriting::synthesis::CHDiffusionSynthesisModel::getComposerMaskForBeautification@<D0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(0x14uLL);
  a1[1] = v3 + 5;
  a1[2] = v3 + 5;
  v3[4] = 1065353216;
  double result = 0.0;
  *(_OWORD *)uint64_t v3 = xmmword_1C4C3B048;
  *a1 = v3;
  return result;
}

uint64_t CoreHandwriting::synthesis::CHDiffusionSynthesisModel::getModelHash(CoreHandwriting::synthesis::CHDiffusionSynthesisModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F4181798](CHDiffusionModelE5ML, sel_modelHash, a3, a4, a5, a6);
}

id CoreHandwriting::synthesis::CHDiffusionSynthesisStringWithAllSupportedCharactersByModel(CoreHandwriting::synthesis *this)
{
  if (qword_1EA3C91E8 == -1)
  {
    uint64_t v1 = (void *)qword_1EA3C91E0;
  }
  else
  {
    dispatch_once(&qword_1EA3C91E8, &unk_1F20136D0);
    uint64_t v1 = (void *)qword_1EA3C91E0;
  }
  return v1;
}

void sub_1C4A3F178(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_ch_latinCharacterString(NSString, a2, a3, a4, a5, a6);
  uint64_t v10 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v6, v7, @"①②③④⑤⑥⑦⑧⑨", (uint64_t)&stru_1F20141C8, v8, v9);
  BOOL v11 = (void *)qword_1EA3C91E0;
  qword_1EA3C91E0 = v10;

  uint64_t v15 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_((void *)qword_1EA3C91E0, v12, @"§", (uint64_t)&stru_1F20141C8, v13, v14);
  uint64_t v16 = (void *)qword_1EA3C91E0;
  qword_1EA3C91E0 = v15;
}

void sub_1C4A3F208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::CHDiffusionSynthesisSetOfSupportedCharacterByModel(CoreHandwriting::synthesis *this)
{
  if (qword_1EA3C91F0 == -1)
  {
    uint64_t v1 = (void *)qword_1EA3C91F8;
  }
  else
  {
    dispatch_once(&qword_1EA3C91F0, &unk_1F2010B20);
    uint64_t v1 = (void *)qword_1EA3C91F8;
  }
  return v1;
}

void sub_1C4A3F288()
{
  id v0 = (void *)MEMORY[0x1E4F28B88];
  if (qword_1EA3C91E8 != -1) {
    dispatch_once(&qword_1EA3C91E8, &unk_1F20136D0);
  }
  id v7 = (id)qword_1EA3C91E0;
  uint64_t v5 = objc_msgSend_characterSetWithCharactersInString_(v0, v1, (uint64_t)v7, v2, v3, v4);
  uint64_t v6 = (void *)qword_1EA3C91F8;
  qword_1EA3C91F8 = v5;
}

void sub_1C4A3F320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::CHDiffusionSynthesisTransliterationCharacterExtensionMap(CoreHandwriting::synthesis *this)
{
  if (qword_1EA3C9208 == -1)
  {
    uint64_t v1 = (void *)qword_1EA3C9200;
  }
  else
  {
    dispatch_once(&qword_1EA3C9208, &unk_1F2011410);
    uint64_t v1 = (void *)qword_1EA3C9200;
  }
  return v1;
}

void sub_1C4A3F3A4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v174[104] = *MEMORY[0x1E4F143B8];
  v173[0] = @"✽";
  v173[1] = @"✱";
  v174[0] = @"*";
  v174[1] = @"*";
  v173[2] = @"✷";
  v173[3] = @"✻";
  v174[2] = @"*";
  v174[3] = @"*";
  v173[4] = @"✼";
  v173[5] = @"⁎";
  v174[4] = @"*";
  v174[5] = @"*";
  v173[6] = @"❄";
  v173[7] = @"✴";
  v174[6] = @"*";
  v174[7] = @"*";
  v173[8] = @"❈";
  v173[9] = @"꘎";
  v174[8] = @"*";
  v174[9] = @"*";
  v173[10] = @"⁕";
  v173[11] = @"✹";
  v174[10] = @"*";
  v174[11] = @"*";
  v173[12] = @"∗";
  v173[13] = @"✲";
  v174[12] = @"*";
  v174[13] = @"*";
  v173[14] = @"✳";
  v173[15] = @"❋";
  v174[14] = @"*";
  v174[15] = @"*";
  v173[16] = @"✸";
  v173[17] = @"﹡";
  v174[16] = @"*";
  v174[17] = @"*";
  v173[18] = @"⚹";
  v173[19] = @"❊";
  v174[18] = @"*";
  v174[19] = @"*";
  v173[20] = @"＂";
  v173[21] = @"“";
  v174[20] = @"\"";
  v174[21] = @"\"";
  v173[22] = @"”";
  v173[23] = @"❝";
  v174[22] = @"\"";
  v174[23] = @"\"";
  v173[24] = @"❞";
  v173[25] = @"＇";
  v174[24] = @"\"";
  v174[25] = @"'";
  v173[26] = @"‘";
  v173[27] = @"’";
  v174[26] = @"'";
  v174[27] = @"'";
  v173[28] = @"′";
  v173[29] = @"ʼ";
  v174[28] = @"'";
  v174[29] = @"'";
  v173[30] = @"❛";
  v173[31] = @"❜";
  v174[30] = @"'";
  v174[31] = @"'";
  v173[32] = @"─";
  v173[33] = @"ー";
  v174[32] = @"-";
  v174[33] = @"-";
  v173[34] = @"━";
  v173[35] = @"‒";
  v174[34] = @"-";
  v174[35] = @"-";
  v173[36] = @"⁃";
  v173[37] = @"–";
  v174[36] = @"-";
  v174[37] = @"-";
  v173[38] = @"−";
  v173[39] = @"‑";
  v174[38] = @"-";
  v174[39] = @"-";
  v173[40] = @"‐";
  v173[41] = @"⸺";
  v174[40] = @"-";
  v174[41] = @"-";
  v173[42] = @"⸻";
  v173[43] = @"│";
  v174[42] = @"-";
  v174[43] = @"|";
  v173[44] = @"ᵒ";
  v173[45] = @"➔";
  v174[44] = @"º";
  v174[45] = @"→";
  v173[46] = @"⇒";
  v173[47] = @"⟶";
  v174[46] = @"→";
  v174[47] = @"→";
  v173[48] = @"➝";
  v173[49] = @"⇾";
  v174[48] = @"→";
  v174[49] = @"→";
  v173[50] = @"➞";
  v173[51] = @"✔";
  v174[50] = @"→";
  v174[51] = @"✓";
  v173[52] = @"￥";
  v173[53] = @"（";
  v174[52] = @"¥";
  v174[53] = CFSTR("(");
  v173[54] = @"）";
  v173[55] = @"：";
  v174[54] = @"");
  v174[55] = @":";
  v173[56] = @"；";
  v173[57] = @"？";
  v174[56] = @";";
  v174[57] = @"?";
  v173[58] = @"，";
  v173[59] = @"、";
  v174[58] = @",";
  v174[59] = @",";
  v173[60] = @"．";
  v173[61] = @"。";
  v174[60] = @".";
  v174[61] = @".";
  v173[62] = @"％";
  v173[63] = @"／";
  v174[62] = @"%";
  v174[63] = @"/";
  v173[64] = @"＊";
  v174[64] = @"*";
  v173[65] = @"［";
  v174[65] = @"[";
  v173[66] = @"］";
  v174[66] = @"]";
  v173[67] = @"！";
  v174[67] = @"!";
  v173[68] = @"￡";
  v174[68] = @"£";
  v173[69] = @"⇐";
  v174[69] = @"←";
  v174[70] = @"'";
  v173[71] = @"―";
  v174[71] = @"-";
  v173[72] = @"—";
  v174[72] = @"-";
  v173[73] = @"″";
  v174[73] = @"\"";
  v173[74] = @"…";
  v174[74] = @"...";
  v173[75] = @"⋅";
  v174[75] = @"·";
  __n128 v172 = unicodeToNSString(160, a2, a3, a4, a5, a6);
  v173[76] = v172;
  v174[76] = @" ";
  __n128 v171 = unicodeToNSString(0x2000, v6, v7, v8, v9, v10);
  v173[77] = v171;
  v174[77] = @" ";
  __n128 v170 = unicodeToNSString(8193, v11, v12, v13, v14, v15);
  v173[78] = v170;
  v174[78] = @" ";
  __n128 v169 = unicodeToNSString(8194, v16, v17, v18, v19, v20);
  v173[79] = v169;
  v174[79] = @" ";
  __n128 v168 = unicodeToNSString(8195, v21, v22, v23, v24, v25);
  v173[80] = v168;
  v174[80] = @" ";
  __n128 v167 = unicodeToNSString(8196, v26, v27, v28, v29, v30);
  v173[81] = v167;
  v174[81] = @" ";
  __n128 v166 = unicodeToNSString(8197, v31, v32, v33, v34, v35);
  v173[82] = v166;
  v174[82] = @" ";
  __n128 v165 = unicodeToNSString(8198, v36, v37, v38, v39, v40);
  v173[83] = v165;
  v174[83] = @" ";
  __n128 v164 = unicodeToNSString(8199, v41, v42, v43, v44, v45);
  v173[84] = v164;
  v174[84] = @" ";
  __n128 v163 = unicodeToNSString(8200, v46, v47, v48, v49, v50);
  v173[85] = v163;
  v174[85] = @" ";
  __n128 v162 = unicodeToNSString(8201, v51, v52, v53, v54, v55);
  v173[86] = v162;
  v174[86] = @" ";
  __n128 v161 = unicodeToNSString(8202, v56, v57, v58, v59, v60);
  v173[87] = v161;
  v174[87] = @" ";
  __n128 v160 = unicodeToNSString(8203, v61, v62, v63, v64, v65);
  v173[88] = v160;
  v174[88] = @" ";
  __n128 v159 = unicodeToNSString(8239, v66, v67, v68, v69, v70);
  v173[89] = v159;
  v174[89] = @" ";
  uint64_t v158 = unicodeToNSString(8287, v71, v72, v73, v74, v75);
  v173[90] = v158;
  v174[90] = @" ";
  uint64_t v157 = unicodeToNSString(12288, v76, v77, v78, v79, v80);
  v173[91] = v157;
  v174[91] = @" ";
  uint64_t v156 = unicodeToNSString(1643, v81, v82, v83, v84, v85);
  v173[92] = v156;
  v174[92] = @",";
  __n128 v155 = unicodeToNSString(1644, v86, v87, v88, v89, v90);
  v173[93] = v155;
  v174[93] = @"'";
  uint64_t v96 = unicodeToNSString(1632, v91, v92, v93, v94, v95);
  v173[94] = v96;
  v174[94] = @"0";
  uint64_t v102 = unicodeToNSString(1633, v97, v98, v99, v100, v101);
  v173[95] = v102;
  v174[95] = @"1";
  uint64_t v108 = unicodeToNSString(1634, v103, v104, v105, v106, v107);
  v173[96] = v108;
  v174[96] = @"2";
  unint64_t v114 = unicodeToNSString(1635, v109, v110, v111, v112, v113);
  v173[97] = v114;
  v174[97] = @"3";
  int64_t v120 = unicodeToNSString(1636, v115, v116, v117, v118, v119);
  v173[98] = v120;
  v174[98] = @"4";
  uint64_t v126 = unicodeToNSString(1637, v121, v122, v123, v124, v125);
  v173[99] = v126;
  v174[99] = @"5";
  uint64_t v132 = unicodeToNSString(1638, v127, v128, v129, v130, v131);
  v173[100] = v132;
  v174[100] = @"6";
  __n128 v138 = unicodeToNSString(1639, v133, v134, v135, v136, v137);
  v173[101] = v138;
  v174[101] = @"7";
  __n128 v144 = unicodeToNSString(1640, v139, v140, v141, v142, v143);
  v173[102] = v144;
  v174[102] = @"8";
  long long v150 = unicodeToNSString(1641, v145, v146, v147, v148, v149);
  v173[103] = v150;
  v174[103] = @"9";
  uint64_t v153 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v151, (uint64_t)v174, (uint64_t)v173, 104, v152);
  __n128 v154 = (void *)qword_1EA3C9200;
  qword_1EA3C9200 = v153;
}

void sub_1C4A3FD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28)
{
  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::CHDiffusionSynthesisApplyAllowedUnicodeDecomposition(int a1, uint64_t a2)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  id v4 = objc_alloc_init(NSString);
  if (qword_1EA3C91F0 != -1) {
    dispatch_once(&qword_1EA3C91F0, &unk_1F2010B20);
  }
  id v72 = (id)qword_1EA3C91F8;
  uint64_t v10 = unicodeToNSString(a1, v5, v6, v7, v8, v9);
  uint64_t v16 = objc_msgSend_decomposedStringWithCanonicalMapping(v10, v11, v12, v13, v14, v15);

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v17 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v23 = unicodeToNSString(a1, v18, v19, v20, v21, v22);
    *(_DWORD *)CGAffineTransform buf = 138412802;
    *(void *)&uint8_t buf[4] = v23;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = a1;
    *(_WORD *)&buf[18] = 2112;
    *(void *)&buf[20] = v16;
    _os_log_impl(&dword_1C492D000, v17, OS_LOG_TYPE_DEBUG, "Canonical decomposition of %@(%d) is %@", buf, 0x1Cu);
  }
  *(void *)CGAffineTransform buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x2020000000;
  unsigned char buf[24] = 1;
  uint64_t v29 = objc_msgSend_length(v16, v24, v25, v26, v27, v28);
  v76[0] = MEMORY[0x1E4F143A8];
  v76[1] = 3221225472;
  v76[2] = sub_1C4A403F0;
  v76[3] = &unk_1E64E2AB0;
  id v30 = v72;
  id v77 = v30;
  uint64_t v78 = buf;
  objc_msgSend_enumerateCodepointsInRange_usingBlock_(v16, v31, 0, v29, (uint64_t)v76, v32);
  int v33 = *(unsigned __int8 *)(*(void *)&buf[8] + 24);
  if (*(unsigned char *)(*(void *)&buf[8] + 24))
  {
    id v34 = v16;

    id v4 = v34;
  }
  BOOL v35 = v33 != 0;

  _Block_object_dispose(buf, 8);
  char v41 = a2 == 1 || v35;
  if ((v41 & 1) == 0)
  {
    uint64_t v42 = unicodeToNSString(a1, v36, v37, v38, v39, v40);
    uint64_t v48 = objc_msgSend_decomposedStringWithCompatibilityMapping(v42, v43, v44, v45, v46, v47);

    if (qword_1EA3CA000 == -1)
    {
      uint64_t v49 = (id)qword_1EA3C9FD8;
      if (!os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
      {
LABEL_16:

        *(void *)CGAffineTransform buf = 0;
        *(void *)&uint8_t buf[8] = buf;
        *(void *)&uint8_t buf[16] = 0x3032000000;
        *(void *)&unsigned char buf[24] = sub_1C4A4042C;
        uint64_t v80 = sub_1C4A4043C;
        id v81 = objc_alloc_init(NSString);
        uint64_t v61 = objc_msgSend_length(v48, v56, v57, v58, v59, v60);
        v73[0] = MEMORY[0x1E4F143A8];
        v73[1] = 3221225472;
        v73[2] = sub_1C4A40444;
        v73[3] = &unk_1E64E2AB0;
        id v74 = v30;
        uint64_t v75 = buf;
        objc_msgSend_enumerateCodepointsInRange_usingBlock_(v48, v62, 0, v61, (uint64_t)v73, v63);
        if (objc_msgSend_length(*(void **)(*(void *)&buf[8] + 40), v64, v65, v66, v67, v68))
        {
          id v69 = *(id *)(*(void *)&buf[8] + 40);

          id v4 = v69;
        }

        _Block_object_dispose(buf, 8);
        goto LABEL_19;
      }
    }
    else
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      uint64_t v49 = (id)qword_1EA3C9FD8;
      if (!os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_16;
      }
    }
    uint64_t v55 = unicodeToNSString(a1, v50, v51, v52, v53, v54);
    *(_DWORD *)CGAffineTransform buf = 138412802;
    *(void *)&uint8_t buf[4] = v55;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = a1;
    *(_WORD *)&buf[18] = 2112;
    *(void *)&buf[20] = v48;
    _os_log_impl(&dword_1C492D000, v49, OS_LOG_TYPE_DEBUG, "Compatibility decomposition of %@(%d) is %@", buf, 0x1Cu);

    goto LABEL_16;
  }
LABEL_19:
  id v70 = v4;

  return v70;
}

void sub_1C4A40328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A403F0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = objc_msgSend_characterIsMember_(*(void **)(a1 + 32), a2, (unsigned __int16)a2, a4, a5, a6);
  if ((result & 1) == 0) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
  return result;
}

uint64_t sub_1C4A4042C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4A4043C(uint64_t a1)
{
}

void sub_1C4A40444(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6 = (int)a2;
  if (objc_msgSend_characterIsMember_(*(void **)(a1 + 32), a2, (unsigned __int16)a2, a4, a5, a6))
  {
    uint64_t v13 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    unicodeToNSString(v6, v8, v9, v10, v11, v12);
    id v21 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v18 = objc_msgSend_stringByAppendingString_(v13, v14, (uint64_t)v21, v15, v16, v17);
    uint64_t v19 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v20 = *(void **)(v19 + 40);
    *(void *)(v19 + 40) = v18;
  }
}

void sub_1C4A404F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL pathForResource(const char *a1, const char *a2, UInt8 *a3)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = strdup(a1);
  __lasts = 0;
  int v6 = strtok_r(v5, ".", &__lasts);
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6, 0x8000100u);
  if (!__lasts)
  {
    CFStringRef v9 = 0;
    if (!a2) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  CFStringRef v9 = CFStringCreateWithCString(v7, __lasts, 0x8000100u);
  if (a2) {
LABEL_4:
  }
    a2 = (const char *)CFStringCreateWithCString(v7, a2, 0x8000100u);
LABEL_5:
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(@"com.apple.CoreHandwriting");
  CFURLRef v11 = CFBundleCopyResourceURL(BundleWithIdentifier, v8, v9, (CFStringRef)a2);
  BOOL v12 = CFURLGetFileSystemRepresentation(v11, 1u, a3, 1024) != 0;
  if (v8) {
    CFRelease(v8);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (a2) {
    CFRelease(a2);
  }
  if (v11) {
    CFRelease(v11);
  }
  free(v5);
  return v12;
}

id modifyIndexPath(NSIndexPath *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  uint64_t v11 = objc_msgSend_length(v5, v6, v7, v8, v9, v10);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = &buf[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = objc_msgSend_length(v5, v14, v15, v16, v17, v18);
  objc_msgSend_getIndexes_range_(v5, v20, (uint64_t)v13, 0, v19, v21);
  *(void *)&v13[8 * a2] = a3;
  uint64_t v22 = (void *)MEMORY[0x1E4F28D58];
  uint64_t v28 = objc_msgSend_length(v5, v23, v24, v25, v26, v27);
  uint64_t v32 = objc_msgSend_indexPathWithIndexes_length_(v22, v29, (uint64_t)v13, v28, v30, v31);
  uint64_t v38 = objc_msgSend_length(v5, v33, v34, v35, v36, v37);
  if (v38 != objc_msgSend_length(v32, v39, v40, v41, v42, v43))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v44 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v44, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)CGAffineTransform buf = 0;
      _os_log_impl(&dword_1C492D000, v44, OS_LOG_TYPE_FAULT, "The length of the computed path must be the same as the input", buf, 2u);
    }
  }
  return v32;
}

void sub_1C4A407D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id insertToIndexPath(NSIndexPath *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  uint64_t v11 = objc_msgSend_length(v5, v6, v7, v8, v9, v10);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = &buf[-((v12 + 23) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = objc_msgSend_length(v5, v14, v15, v16, v17, v18);
  objc_msgSend_getIndexes_range_(v5, v20, (uint64_t)v13, 0, v19, v21);
  id v22 = objc_alloc_init(MEMORY[0x1E4F28D58]);
  uint64_t v27 = v22;
  if (a2)
  {
    uint64_t v28 = 0;
    do
    {
      uint64_t v29 = objc_msgSend_indexAtPosition_(v5, v23, v28, v24, v25, v26);
      uint64_t v34 = objc_msgSend_indexPathByAddingIndex_(v27, v30, v29, v31, v32, v33);

      ++v28;
      uint64_t v27 = v34;
    }
    while (a2 != v28);
  }
  else
  {
    uint64_t v34 = v22;
  }
  uint64_t v35 = objc_msgSend_indexPathByAddingIndex_(v34, v23, a3, v24, v25, v26);

  while (a2 < objc_msgSend_length(v5, v36, v37, v38, v39, v40))
  {
    uint64_t v46 = objc_msgSend_indexAtPosition_(v5, v41, a2, v43, v44, v45);
    uint64_t v51 = objc_msgSend_indexPathByAddingIndex_(v35, v47, v46, v48, v49, v50);

    ++a2;
    uint64_t v35 = (void *)v51;
  }
  uint64_t v52 = objc_msgSend_length(v5, v41, v42, v43, v44, v45);
  if (v52 + 1 != objc_msgSend_length(v35, v53, v54, v55, v56, v57))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v58 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v58, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)CGAffineTransform buf = 0;
      _os_log_impl(&dword_1C492D000, v58, OS_LOG_TYPE_FAULT, "The length of the computed path must be one more than the input", buf, 2u);
    }
  }
  return v35;
}

void sub_1C4A40A28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id trimIndexPath(NSIndexPath *a1, _NSRange a2)
{
  NSUInteger length = a2.length;
  locatiouint64_t n = a2.location;
  id v4 = a1;
  v26.NSUInteger length = objc_msgSend_length(v4, v5, v6, v7, v8, v9);
  v26.locatiouint64_t n = 0;
  v27.locatiouint64_t n = location;
  v27.NSUInteger length = length;
  NSRange v10 = NSIntersectionRange(v26, v27);
  uint64_t v11 = 0;
  if (v10.location == location)
  {
    NSUInteger v12 = v10.length;
    if (v10.length == length)
    {
      id v13 = objc_alloc_init(MEMORY[0x1E4F28D58]);
      uint64_t v18 = v13;
      if (location >= v10.length + location)
      {
        uint64_t v11 = v13;
      }
      else
      {
        do
        {
          uint64_t v19 = objc_msgSend_indexAtPosition_(v4, v14, location, v15, v16, v17);
          uint64_t v11 = objc_msgSend_indexPathByAddingIndex_(v18, v20, v19, v21, v22, v23);

          ++location;
          uint64_t v18 = v11;
          --v12;
        }
        while (v12);
      }
    }
  }

  return v11;
}

void sub_1C4A40B40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A40B54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id firstMatchingResourceForLocale(NSLocale *a1, NSString *a2, NSString *a3, UInt8 *a4)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a2;
  uint64_t v8 = a3;
  rankedCandidateIdentifiersForLocale(a1);
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v35, (uint64_t)v39, 16, v11);
  if (v16)
  {
    uint64_t v17 = *(void *)v36;
    while (2)
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v36 != v17) {
          objc_enumerationMutation(v9);
        }
        uint64_t v19 = *(void **)(*((void *)&v35 + 1) + 8 * i);
        uint64_t v20 = objc_msgSend_stringByAppendingString_(v7, v12, (uint64_t)v19, v13, v14, v15, (void)v35);
        uint64_t v25 = objc_msgSend_stringByAppendingPathExtension_(v20, v21, (uint64_t)v8, v22, v23, v24);

        id v26 = v25;
        uint64_t v32 = (const char *)objc_msgSend_UTF8String(v26, v27, v28, v29, v30, v31);
        if (pathForResource(v32, 0, a4))
        {
          id v33 = v19;

          goto LABEL_11;
        }
      }
      uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v12, (uint64_t)&v35, (uint64_t)v39, 16, v15);
      if (v16) {
        continue;
      }
      break;
    }
  }
  id v33 = 0;
LABEL_11:

  return v33;
}

void sub_1C4A40D04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id rankedCandidateIdentifiersForLocale(NSLocale *a1)
{
  uint64_t v1 = a1;
  uint64_t v7 = objc_msgSend_languageCode(v1, v2, v3, v4, v5, v6);
  uint64_t v13 = objc_msgSend_lowercaseString(v7, v8, v9, v10, v11, v12);

  uint64_t v19 = objc_msgSend_scriptCode(v1, v14, v15, v16, v17, v18);
  uint64_t v25 = objc_msgSend_capitalizedString(v19, v20, v21, v22, v23, v24);

  uint64_t v31 = objc_msgSend_countryCode(v1, v26, v27, v28, v29, v30);
  long long v37 = objc_msgSend_uppercaseString(v31, v32, v33, v34, v35, v36);

  uint64_t v47 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v38, v39, v40, v41, v42);
  if (v13) {
    BOOL v48 = v25 == 0;
  }
  else {
    BOOL v48 = 1;
  }
  int v49 = !v48;
  if (!v48 && v37)
  {
    uint64_t v50 = objc_msgSend_stringWithFormat_(NSString, v43, @"%@-%@_%@", v44, v45, v46, v13, v25, v37);
    objc_msgSend_addObject_(v47, v51, (uint64_t)v50, v52, v53, v54);
  }
  if (v13 && v37)
  {
    uint64_t v55 = objc_msgSend_stringWithFormat_(NSString, v43, @"%@_%@", v44, v45, v46, v13, v37);
    objc_msgSend_addObject_(v47, v56, (uint64_t)v55, v57, v58, v59);
  }
  if (v49)
  {
    uint64_t v60 = objc_msgSend_stringWithFormat_(NSString, v43, @"%@-%@", v44, v45, v46, v13, v25);
    objc_msgSend_addObject_(v47, v61, (uint64_t)v60, v62, v63, v64);
  }
  else if (!v13)
  {
    goto LABEL_17;
  }
  objc_msgSend_addObject_(v47, v43, (uint64_t)v13, v44, v45, v46);
LABEL_17:

  return v47;
}

void sub_1C4A40EF4(_Unwind_Exception *a1)
{
  uint64_t v7 = v6;

  _Unwind_Resume(a1);
}

id NSStringFromUInt32Ptr(unsigned int *a1, const char *a2, _NSRange a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    NSUInteger length = a3.length;
    locatiouint64_t n = a3.location;
    uint64_t v12 = objc_msgSend_string(MEMORY[0x1E4F28E78], a2, a3.location, a3.length, a4, a5);
    if (a2 && length)
    {
      NSUInteger v13 = 0;
      do
      {
        unsigned int v14 = a1[v13];
        if (v14 == 1)
        {
          ++location;
        }
        else if (location <= v13 && location + length > v13)
        {
          if ((v14 - 0x10000) >> 20)
          {
            unsigned int v15 = a1[v13];
            uint64_t v16 = 1;
          }
          else
          {
            unsigned int v15 = ((v14 + 67043328) >> 10) - 10240;
            v23[1] = v14 & 0x3FF | 0xDC00;
            uint64_t v16 = 2;
          }
          v23[0] = v15;
          uint64_t v17 = objc_msgSend_stringWithCharacters_length_(NSString, v9, (uint64_t)v23, v16, v10, v11);
          objc_msgSend_appendString_(v12, v18, (uint64_t)v17, v19, v20, v21);
        }
        ++v13;
      }
      while (a2 != (const char *)v13);
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  return v12;
}

void sub_1C4A410F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4110C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id unicodeToNSString(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a1 - 0x10000) >> 20)
  {
    uint64_t v7 = 1;
    LOWORD(v6) = a1;
  }
  else
  {
    unsigned int v6 = ((a1 + 67043328) >> 10) - 10240;
    v10[1] = a1 & 0x3FF | 0xDC00;
    uint64_t v7 = 2;
  }
  v10[0] = v6;
  uint64_t v8 = objc_msgSend_stringWithCharacters_length_(NSString, a2, (uint64_t)v10, v7, a5, a6);
  return v8;
}

void *createUInt32PtrWithNSString(NSString *a1, unint64_t a2, __int16 a3, unint64_t *a4, BOOL *a5)
{
  uint64_t v9 = a1;
  unint64_t v14 = objc_msgSend_lengthOfBytesUsingEncoding_(v9, v10, 2348810496, v11, v12, v13);
  unsigned int v15 = 0;
  *a4 = 0;
  *a5 = 0;
  if (v14 >> 2 < a2) {
    a2 = v14 >> 2;
  }
  if (v14 >= 4 && a2)
  {
    uint64_t v29 = 0;
    uint64_t v30 = &v29;
    uint64_t v31 = 0x2020000000;
    uint64_t v32 = 0;
    uint64_t v32 = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
    v28[0] = 0;
    v28[1] = v28;
    double v28[2] = 0x2020000000;
    unint64_t v21 = a2 - 1;
    if ((a3 & 0x100) == 0) {
      unint64_t v21 = 0;
    }
    v28[3] = v21;
    uint64_t v22 = objc_msgSend_length(v9, v16, v17, v18, v19, v20);
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    v26[2] = sub_1C4A4139C;
    v26[3] = &unk_1E64E2AD8;
    v26[4] = &v29;
    v26[5] = v28;
    BOOL v27 = (a3 & 0x100) == 0;
    v26[6] = a4;
    v26[7] = a5;
    v26[8] = a2;
    objc_msgSend_enumerateCodepointsInRange_reverse_usingBlock_(v9, v23, 0, v22, (unint64_t)(a3 & 0x100) >> 8, (uint64_t)v26);
    uint64_t v24 = *a4;
    if (*a4)
    {
      unsigned int v15 = (void *)v30[3];
      if (a2 == v24)
      {
LABEL_12:
        _Block_object_dispose(v28, 8);
        _Block_object_dispose(&v29, 8);
        goto LABEL_13;
      }
      unsigned int v15 = malloc_type_realloc((void *)v30[3], 4 * v24, 0x100004052888210uLL);
    }
    else
    {
      free((void *)v30[3]);
      unsigned int v15 = 0;
    }
    v30[3] = (uint64_t)v15;
    goto LABEL_12;
  }
LABEL_13:

  return v15;
}

void sub_1C4A41360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A41374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v12 - 96), 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1C4A4139C(uint64_t result, int a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  *(_DWORD *)(*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24)
            + 4 * *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24)) = a2;
  uint64_t v5 = *(unint64_t **)(result + 48);
  uint64_t v6 = *(void *)(*(void *)(result + 40) + 8);
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = v7 - 1;
  if (*(unsigned char *)(result + 72)) {
    uint64_t v8 = v7 + 1;
  }
  *(void *)(v6 + 24) = v8;
  unint64_t v9 = *v5 + 1;
  unint64_t *v5 = v9;
  unint64_t v10 = *(void *)(result + 64);
  **(unsigned char **)(result + 56) |= a4 == 2;
  if (v9 >= v10) {
    *a5 = 1;
  }
  return result;
}

uint64_t halfWidthToFullWidthCode(uint64_t result)
{
  if ((result - 33) < 0xF
    || (result - 91) <= 0x23 && ((1 << (result - 91)) & 0xF0000003FLL) != 0
    || (result - 58) < 6)
  {
    if (result == 46) {
      return 12290;
    }
    else {
      return (result + 65248);
    }
  }
  return result;
}

id uppercaseFirstLetter(NSString *a1)
{
  uint64_t v1 = a1;
  uint64_t v7 = objc_msgSend_mutableCopy(v1, v2, v3, v4, v5, v6);
  uint64_t v13 = objc_msgSend_length(v1, v8, v9, v10, v11, v12);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = sub_1C4A41564;
  v17[3] = &unk_1E64E0E38;
  id v14 = v7;
  id v18 = v14;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v1, v15, 0, v13, 2, (uint64_t)v17);

  return v14;
}

void sub_1C4A41530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A41554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A41564(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  id v41 = a2;
  uint64_t v16 = objc_msgSend_punctuationCharacterSet(MEMORY[0x1E4F28B88], v11, v12, v13, v14, v15);
  if (objc_msgSend_rangeOfCharacterFromSet_(v41, v17, (uint64_t)v16, v18, v19, v20) == 0x7FFFFFFFFFFFFFFFLL)
  {
    id v26 = objc_msgSend_symbolCharacterSet(MEMORY[0x1E4F28B88], v21, v22, v23, v24, v25);
    uint64_t v31 = objc_msgSend_rangeOfCharacterFromSet_(v41, v27, (uint64_t)v26, v28, v29, v30);

    if (v31 == 0x7FFFFFFFFFFFFFFFLL)
    {
      long long v37 = *(void **)(a1 + 32);
      long long v38 = objc_msgSend_uppercaseString(v41, v32, v33, v34, v35, v36);
      objc_msgSend_replaceCharactersInRange_withString_(v37, v39, a3, a4, (uint64_t)v38, v40);

      *a7 = 1;
    }
  }
  else
  {
  }
}

void sub_1C4A41668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A41680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A41694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A416B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A416C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A416E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id lowercaseFirstLetter(NSString *a1)
{
  uint64_t v1 = a1;
  uint64_t v7 = objc_msgSend_mutableCopy(v1, v2, v3, v4, v5, v6);
  uint64_t v13 = objc_msgSend_length(v1, v8, v9, v10, v11, v12);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = sub_1C4A417F8;
  v17[3] = &unk_1E64E0E38;
  id v14 = v7;
  id v18 = v14;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v1, v15, 0, v13, 2, (uint64_t)v17);

  return v14;
}

void sub_1C4A417C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A417E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A417F8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  id v41 = a2;
  uint64_t v16 = objc_msgSend_punctuationCharacterSet(MEMORY[0x1E4F28B88], v11, v12, v13, v14, v15);
  if (objc_msgSend_rangeOfCharacterFromSet_(v41, v17, (uint64_t)v16, v18, v19, v20) == 0x7FFFFFFFFFFFFFFFLL)
  {
    id v26 = objc_msgSend_symbolCharacterSet(MEMORY[0x1E4F28B88], v21, v22, v23, v24, v25);
    uint64_t v31 = objc_msgSend_rangeOfCharacterFromSet_(v41, v27, (uint64_t)v26, v28, v29, v30);

    if (v31 == 0x7FFFFFFFFFFFFFFFLL)
    {
      long long v37 = *(void **)(a1 + 32);
      long long v38 = objc_msgSend_lowercaseString(v41, v32, v33, v34, v35, v36);
      objc_msgSend_replaceCharactersInRange_withString_(v37, v39, a3, a4, (uint64_t)v38, v40);

      *a7 = 1;
    }
  }
  else
  {
  }
}

void sub_1C4A418FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A41914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A41928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A41944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4195C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A41974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t rangeOfCharactersFromSet(NSString *a1, NSCharacterSet *a2, int a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = a2;
  uint64_t v30 = 0;
  uint64_t v31 = &v30;
  uint64_t v32 = 0x2020000000;
  uint64_t v33 = 0;
  uint64_t v12 = objc_msgSend_length(v5, v7, v8, v9, v10, v11);
  if (a3) {
    uint64_t v13 = 258;
  }
  else {
    uint64_t v13 = 2;
  }
  uint64_t v24 = MEMORY[0x1E4F143A8];
  uint64_t v25 = 3221225472;
  id v26 = sub_1C4A41B04;
  BOOL v27 = &unk_1E64E2B00;
  uint64_t v14 = v6;
  uint64_t v28 = v14;
  uint64_t v29 = &v30;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v5, v15, 0, v12, v13, (uint64_t)&v24);
  if (v31[3])
  {
    if (a3)
    {
      uint64_t v21 = objc_msgSend_length(v5, v16, v17, v18, v19, v20, v24, v25, v26, v27);
      uint64_t v22 = v21 - v31[3];
    }
    else
    {
      uint64_t v22 = 0;
    }
  }
  else
  {
    uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
  }

  _Block_object_dispose(&v30, 8);
  return v22;
}

void sub_1C4A41AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A41B04(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  id v15 = a2;
  if (isStringEntirelyFromSet((NSString *)v15, *(NSCharacterSet **)(a1 + 32)))
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += objc_msgSend_length(v15, v9, v10, v11, v12, v13);
    uint64_t v14 = v15;
  }
  else
  {
    *a7 = 1;
    uint64_t v14 = v15;
  }
}

void sub_1C4A41BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL isStringEntirelyFromSet(NSString *a1, NSCharacterSet *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = a2;
  if (objc_msgSend_length(v3, v5, v6, v7, v8, v9))
  {
    uint64_t v14 = objc_msgSend_stringByTrimmingCharactersInSet_(v3, v10, (uint64_t)v4, v11, v12, v13);
    BOOL v20 = objc_msgSend_length(v14, v15, v16, v17, v18, v19) == 0;
  }
  else
  {
    BOOL v20 = 0;
  }

  return v20;
}

void sub_1C4A41C30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A41C48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id lastWordInString(NSString *a1)
{
  uint64_t v1 = a1;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x3032000000;
  id v15 = sub_1C4A41D88;
  uint64_t v16 = sub_1C4A41D98;
  id v17 = 0;
  uint64_t v7 = objc_msgSend_length(v1, v2, v3, v4, v5, v6);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = sub_1C4A41DA0;
  v11[3] = &unk_1E64E2B28;
  v11[4] = &v12;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v1, v8, 0, v7, 1283, (uint64_t)v11);
  id v9 = (id)v13[5];
  _Block_object_dispose(&v12, 8);

  return v9;
}

void sub_1C4A41D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1C4A41D88(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4A41D98(uint64_t a1)
{
}

void sub_1C4A41DA0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  id v13 = a2;
  if (a3 == a5 && a4 == a6)
  {
    id v22 = v13;
    uint64_t v19 = objc_msgSend_copy(v13, v14, v15, v16, v17, v18);
    uint64_t v20 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v21 = *(void **)(v20 + 40);
    *(void *)(v20 + 40) = v19;

    id v13 = v22;
  }
  *a7 = 1;
}

void sub_1C4A41E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

unint64_t stringHasEmoticonStartingAtIndex(uint64_t a1, NSString *a2, uint64_t a3, int a4)
{
  uint64_t v7 = a2;
  id v13 = v7;
  if (a3)
  {
    if (!a4) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v14 = objc_msgSend_composedCharacterAtIndex_(v7, v8, a1, v10, v11, v12);
    LODWORD(a3) = objc_msgSend_characterTypeFromString_(CHCharacterSetRules, v15, (uint64_t)v14, v16, v17, v18);

    if (!a4) {
      goto LABEL_8;
    }
  }
  if ((a3 & 0x40000) != 0)
  {
    if ((a3 & 0x80000000) != 0) {
      goto LABEL_14;
    }
    goto LABEL_9;
  }
LABEL_8:
  if ((a3 & 0x40000) == 0)
  {
LABEL_14:
    unint64_t v38 = 0;
    goto LABEL_17;
  }
LABEL_9:
  if (a1 + 1 >= (unint64_t)objc_msgSend_length(v13, v8, v9, v10, v11, v12)) {
    goto LABEL_14;
  }
  uint64_t v23 = objc_msgSend_composedCharacterAtIndex_(v13, v19, a1 + 1, v20, v21, v22);
  int v33 = objc_msgSend_characterTypeFromString_(CHCharacterSetRules, v24, (uint64_t)v23, v25, v26, v27);
  if ((v33 & 0x100000) != 0)
  {
    unint64_t v38 = 1;
  }
  else
  {
    unint64_t v38 = 0;
    if (a1 + 2 < (unint64_t)objc_msgSend_length(v13, v28, v29, v30, v31, v32) && (v33 & 0x80000) != 0)
    {
      uint64_t v39 = objc_msgSend_composedCharacterAtIndex_(v13, v34, a1 + 2, v35, v36, v37);
      unint64_t v38 = ((unint64_t)objc_msgSend_characterTypeFromString_(CHCharacterSetRules, v40, (uint64_t)v39, v41, v42, v43) >> 20) & 1;
    }
  }

LABEL_17:
  return v38;
}

void sub_1C4A41F70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A41F88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A41F9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A41FB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A41FC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A41FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A41FE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A41FF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t isStringNumber(NSString *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  if (qword_1EA3C9230 != -1) {
    dispatch_once(&qword_1EA3C9230, &unk_1F2012C50);
  }
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v2 = (id)qword_1EA3C9228;
  uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v15, (uint64_t)v19, 16, v4);
  if (v9)
  {
    uint64_t v10 = *(void *)v16;
    while (2)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v16 != v10) {
          objc_enumerationMutation(v2);
        }
        uint64_t v12 = objc_msgSend_numberFromString_(*(void **)(*((void *)&v15 + 1) + 8 * i), v5, (uint64_t)v1, v6, v7, v8, (void)v15);
        BOOL v13 = v12 == 0;

        if (!v13)
        {
          uint64_t v9 = 1;
          goto LABEL_13;
        }
      }
      uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v15, (uint64_t)v19, 16, v8);
      if (v9) {
        continue;
      }
      break;
    }
  }
LABEL_13:

  return v9;
}

void sub_1C4A42158(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4217C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v49[3] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E4F1CA20], a2, @"en_US", a4, a5, a6);
  id v7 = objc_alloc_init(MEMORY[0x1E4F28EE0]);
  objc_msgSend_setNumberStyle_(v7, v8, 1, v9, v10, v11);
  objc_msgSend_setLocale_(v7, v12, (uint64_t)v6, v13, v14, v15);
  uint64_t v20 = objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E4F1CA20], v16, @"de_DE", v17, v18, v19);
  id v21 = objc_alloc_init(MEMORY[0x1E4F28EE0]);
  objc_msgSend_setNumberStyle_(v21, v22, 1, v23, v24, v25);
  objc_msgSend_setLocale_(v21, v26, (uint64_t)v20, v27, v28, v29);
  uint64_t v34 = objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E4F1CA20], v30, @"en_IN", v31, v32, v33);
  id v35 = objc_alloc_init(MEMORY[0x1E4F28EE0]);
  objc_msgSend_setNumberStyle_(v35, v36, 1, v37, v38, v39);
  objc_msgSend_setLocale_(v35, v40, (uint64_t)v34, v41, v42, v43);
  v49[0] = v7;
  v49[1] = v21;
  v49[2] = v35;
  uint64_t v47 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v44, (uint64_t)v49, 3, v45, v46);
  BOOL v48 = (void *)qword_1EA3C9228;
  qword_1EA3C9228 = v47;
}

void sub_1C4A422D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL isStringNumberForLocale(NSString *a1, NSLocale *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = a2;
  id v5 = objc_alloc_init(MEMORY[0x1E4F28EE0]);
  objc_msgSend_setNumberStyle_(v5, v6, 1, v7, v8, v9);
  objc_msgSend_setLocale_(v5, v10, (uint64_t)v4, v11, v12, v13);
  uint64_t v18 = objc_msgSend_numberFromString_(v5, v14, (uint64_t)v3, v15, v16, v17);
  BOOL v19 = v18 != 0;

  return v19;
}

void sub_1C4A423C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A423DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A423F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL doesStringContainDataDetectorEntries(void *a1, void *a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v2 = a1;
  if (objc_msgSend_length(v2, v3, v4, v5, v6, v7))
  {
    if (qword_1EA3C9238 != -1) {
      dispatch_once(&qword_1EA3C9238, &unk_1F20136F0);
    }
    uint64_t v13 = (void *)MEMORY[0x1E4F5F158];
    uint64_t v14 = objc_msgSend_length(v2, v8, v9, v10, v11, v12);
    uint64_t v51 = objc_msgSend_scanString_range_configuration_(v13, v15, (uint64_t)v2, 0, v14, qword_1EA3C9240);
    id v21 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v16, v17, v18, v19, v20);
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    id v22 = v51;
    uint64_t v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v22, v23, (uint64_t)&v53, (uint64_t)v57, 16, v24);
    if (v30)
    {
      uint64_t v31 = *(void *)v54;
      do
      {
        for (uint64_t i = 0; i != v30; ++i)
        {
          if (*(void *)v54 != v31) {
            objc_enumerationMutation(v22);
          }
          uint64_t v33 = *(void **)(*((void *)&v53 + 1) + 8 * i);
          if (objc_msgSend_urlificationRange(v33, v25, v26, v27, v28, v29) != 0x7FFFFFFFFFFFFFFFLL)
          {
            uint64_t v34 = (void *)MEMORY[0x1E4F29238];
            uint64_t v35 = objc_msgSend_urlificationRange(v33, v25, v26, v27, v28, v29);
            uint64_t v39 = objc_msgSend_valueWithRange_(v34, v36, v35, (uint64_t)v36, v37, v38);
            objc_msgSend_addObject_(v21, v40, (uint64_t)v39, v41, v42, v43);
          }
        }
        uint64_t v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v22, v25, (uint64_t)&v53, (uint64_t)v57, 16, v29);
      }
      while (v30);
    }

    if (a2) {
      *a2 = v21;
    }
    BOOL v49 = objc_msgSend_count(v21, v44, v45, v46, v47, v48) != 0;
  }
  else
  {
    BOOL v49 = 0;
  }

  return v49;
}

void sub_1C4A42618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A42674()
{
  id v0 = objc_alloc(MEMORY[0x1E4F5F160]);
  uint64_t v4 = objc_msgSend_initWithScannerType_passiveIntent_(v0, v1, 0, 1, v2, v3);
  uint64_t v5 = (void *)qword_1EA3C9240;
  qword_1EA3C9240 = v4;

  uint64_t v10 = (void *)qword_1EA3C9240;
  return objc_msgSend_setSpotlightSuggestionsEnabled_(v10, v6, 0, v7, v8, v9);
}

BOOL isStringJapaneseZipcode(NSString *a1)
{
  uint64_t v1 = a1;
  if (objc_msgSend_containsString_(v1, v2, @"〒", v3, v4, v5))
  {
    uint64_t v8 = objc_msgSend_regularExpressionWithPattern_options_error_(MEMORY[0x1E4F28FD8], v6, @"^[0-9]\\s?[0-9]\\s?[0-9]\\s?-\\s?[0-9]\\s?[0-9]\\s?[0-9]\\s?[0-9]$", 0, 0, v7);
    uint64_t v14 = objc_msgSend_length(v1, v9, v10, v11, v12, v13);
    uint64_t v16 = objc_msgSend_firstMatchInString_options_range_(v8, v15, (uint64_t)v1, 0, 1, v14 - 1);
    BOOL v17 = v16 != 0;

    return v17;
  }
  else
  {

    return 0;
  }
}

void sub_1C4A42788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A42798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A427AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL isStringAllCircleTextPatterns(NSString *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_stringByReplacingOccurrencesOfString_withString_(a1, a2, @" ", (uint64_t)&stru_1F20141C8, a5, a6);
  uint64_t v6 = (NSString *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], v7, @"0oO°.", v8, v9, v10);
  uint64_t v11 = (NSCharacterSet *)objc_claimAutoreleasedReturnValue();
  BOOL v12 = isStringEntirelyFromSet(v6, v11);

  return v12;
}

void sub_1C4A42834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A42848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL isStringRepeatedSameCharacter(NSString *a1)
{
  uint64_t v6 = a1;
  if (qword_1EA3C9250 != -1) {
    dispatch_once(&qword_1EA3C9250, &unk_1F2013710);
  }
  if ((unint64_t)objc_msgSend_length(v6, v1, v2, v3, v4, v5) < 2)
  {

    return 0;
  }
  else
  {
    BOOL v12 = (void *)qword_1EA3C9248;
    uint64_t v13 = objc_msgSend_length(v6, v7, v8, v9, v10, v11);
    uint64_t v15 = objc_msgSend_firstMatchInString_options_range_(v12, v14, (uint64_t)v6, 0, 0, v13);
    BOOL v16 = v15 != 0;

    return v16;
  }
}

void sub_1C4A4290C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4291C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_regularExpressionWithPattern_options_error_(MEMORY[0x1E4F28FD8], a2, @"^\\s*((\\S)(?:\\s*\\2)*)\\s*$", 0, 0, a6);
  uint64_t v7 = (void *)qword_1EA3C9248;
  qword_1EA3C9248 = v6;
}

BOOL isStringAllSymbolCharacters(NSString *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_stringByReplacingOccurrencesOfString_withString_(a1, a2, @" ", (uint64_t)&stru_1F20141C8, a5, a6);
  uint64_t v6 = (NSString *)objc_claimAutoreleasedReturnValue();
  if (qword_1EA3C9260 != -1) {
    dispatch_once(&qword_1EA3C9260, &unk_1F2013730);
  }
  BOOL v7 = isStringEntirelyFromSet(v6, (NSCharacterSet *)qword_1EA3C9258);

  return v7;
}

void sub_1C4A429E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A429F8()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28E58]);
  uint64_t v1 = (void *)qword_1EA3C9258;
  qword_1EA3C9258 = (uint64_t)v0;

  uint64_t v2 = (void *)qword_1EA3C9258;
  objc_msgSend_ch_mathOperatorSet(MEMORY[0x1E4F28B88], v3, v4, v5, v6, v7);
  id v42 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v2, v8, (uint64_t)v42, v9, v10, v11);

  BOOL v12 = (void *)qword_1EA3C9258;
  objc_msgSend_ch_mathDecimalSeparatorCharSet(MEMORY[0x1E4F28B88], v13, v14, v15, v16, v17);
  id v43 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v12, v18, (uint64_t)v43, v19, v20, v21);

  id v22 = (void *)qword_1EA3C9258;
  objc_msgSend_ch_smallCharacterSet(MEMORY[0x1E4F28B88], v23, v24, v25, v26, v27);
  id v44 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v22, v28, (uint64_t)v44, v29, v30, v31);

  uint64_t v32 = (void *)qword_1EA3C9258;
  objc_msgSend_ch_synthesisHallucinationProneCharSet(MEMORY[0x1E4F28B88], v33, v34, v35, v36, v37);
  id v45 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v32, v38, (uint64_t)v45, v39, v40, v41);
}

void sub_1C4A42AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A42B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A42B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A42B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

BOOL isStringAllZerosInDigits(NSString *a1)
{
  uint64_t v1 = a1;
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], v2, @"0", v3, v4, v5);
  uint64_t v10 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v1, v7, (uint64_t)v6, -1, v8, v9);

  if (v10 < 1)
  {

    return 0;
  }
  else
  {
    uint64_t v16 = objc_msgSend_ch_mathDigitsCharSet(MEMORY[0x1E4F28B88], v11, v12, v13, v14, v15);
    uint64_t v20 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v1, v17, (uint64_t)v16, -1, v18, v19);

    return v20 == v10;
  }
}

void sub_1C4A42BFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A42C24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t isStringPatternedText(NSString *a1)
{
  uint64_t v1 = a1;
  uint64_t v7 = objc_msgSend_ch_mathExclusiveSymbolSet(MEMORY[0x1E4F28B88], v2, v3, v4, v5, v6);
  uint64_t v11 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v1, v8, (uint64_t)v7, 1, v9, v10);

  char v16 = objc_msgSend_containsString_(v1, v12, @"=", v13, v14, v15);
  if (v11 > 0) {
    char v17 = 1;
  }
  else {
    char v17 = v16;
  }
  if (v17)
  {
    uint64_t v18 = 0;
  }
  else if (doesStringContainDataDetectorEntries(v1, 0))
  {
    uint64_t v18 = 1;
  }
  else
  {
    uint64_t v24 = objc_msgSend_ch_mathDigitsCharSet(MEMORY[0x1E4F28B88], v19, v20, v21, v22, v23);
    uint64_t v28 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v1, v25, (uint64_t)v24, 1, v26, v27);

    uint64_t v34 = objc_msgSend_ch_mathOperatorSet(MEMORY[0x1E4F28B88], v29, v30, v31, v32, v33);
    uint64_t v39 = objc_msgSend_indexesOfCharacters_(v1, v35, (uint64_t)v34, v36, v37, v38);

    uint64_t v45 = objc_msgSend_count(v39, v40, v41, v42, v43, v44);
    int v50 = objc_msgSend_containsIndex_(v39, v46, 0, v47, v48, v49);
    uint64_t v56 = objc_msgSend_length(v1, v51, v52, v53, v54, v55);
    unsigned int v61 = v50 | objc_msgSend_containsIndex_(v39, v57, v56 - 1, v58, v59, v60);
    if (!v45) {
      unsigned int v61 = 1;
    }
    if (v28 < 1) {
      uint64_t v18 = v61;
    }
    else {
      uint64_t v18 = 0;
    }
  }
  return v18;
}

void sub_1C4A42D70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A42DD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t editDistance(NSString *a1, NSString *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = a2;
  unint64_t v22 = 0;
  unint64_t v23 = 0;
  *(_WORD *)uint64_t v21 = 0;
  unint64_t v10 = objc_msgSend_length(v3, v5, v6, v7, v8, v9);
  uint64_t v11 = (unsigned int *)createUInt32PtrWithNSString(v3, v10, 2, &v23, &v21[1]);
  unint64_t v17 = objc_msgSend_length(v4, v12, v13, v14, v15, v16);
  uint64_t v18 = (unsigned int *)createUInt32PtrWithNSString(v4, v17, 2, &v22, v21);
  uint64_t v19 = editDistance(v11, v23, v18, v22);
  free(v11);
  free(v18);

  return v19;
}

void sub_1C4A42EB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A42EC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A42ED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t editDistance(unsigned int *a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a2 || !a4) {
    return a4 + a2;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = a4 + 1;
  if (a4 != -1)
  {
    if (v10 >> 61) {
      sub_1C494A220();
    }
    uint64_t v9 = (char *)operator new(8 * v10);
    bzero(v9, 8 * v10);
    uint64_t v8 = &v9[8 * v10];
  }
  long long __p = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  p_p = &__p;
  char v58 = 0;
  unint64_t v11 = a2 + 1;
  uint64_t v53 = a2;
  if (a2 == -1)
  {
    uint64_t v13 = 0;
    if (v9)
    {
LABEL_18:
      operator delete(v9);
      uint64_t v13 = __p;
    }
  }
  else
  {
    if (v11 >= 0xAAAAAAAAAAAAAABLL) {
      sub_1C494A220();
    }
    uint64_t v12 = operator new(24 * v11);
    uint64_t v13 = v12;
    long long __p = v12;
    uint64_t v55 = v12;
    int v50 = &v12[3 * v11];
    unint64_t v51 = v4 + 1;
    uint64_t v56 = v50;
    int64_t v14 = v8 - v9;
    uint64_t v52 = v4;
    if (v14)
    {
      if (v14 < 0)
      {
        *uint64_t v12 = 0;
        v12[1] = 0;
        v12[2] = 0;
        sub_1C494A220();
      }
      uint64_t v15 = 24 * a2 + 24;
      uint64_t v16 = v12;
      do
      {
        *uint64_t v16 = 0;
        v16[1] = 0;
        v16[2] = 0;
        unint64_t v17 = (char *)operator new(v14);
        *uint64_t v16 = v17;
        uint64_t v18 = &v17[8 * (v14 >> 3)];
        v16[2] = v18;
        memcpy(v17, v9, v14);
        v16[1] = v18;
        v16 += 3;
        v15 -= 24;
      }
      while (v15);
    }
    else
    {
      bzero(v12, 24 * ((24 * v11 - 24) / 0x18) + 24);
    }
    unint64_t v10 = v51;
    uint64_t v55 = v50;
    uint64_t v4 = v52;
    if (v9) {
      goto LABEL_18;
    }
  }
  if (v11)
  {
    if (v53)
    {
      uint64_t v20 = 0;
      unint64_t v21 = v11 & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v22 = v13;
      do
      {
        unint64_t v23 = (void *)v22[3];
        *(void *)*unint64_t v22 = v20;
        *unint64_t v23 = v20 + 1;
        v22 += 6;
        v20 += 2;
      }
      while (v20 != v21);
      if (v11 == v21) {
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v21 = 0;
    }
    uint64_t v24 = (void **)&v13[3 * v21];
    do
    {
      uint64_t v25 = *v24;
      v24 += 3;
      *uint64_t v25 = v21++;
    }
    while (v11 != v21);
LABEL_28:
    uint64_t v13 = __p;
  }
  if (v10)
  {
    uint64_t v26 = (int64x2_t *)*v13;
    if (v10 >= 4)
    {
      unint64_t v27 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v28 = (int64x2_t)xmmword_1C4C39B30;
      uint64_t v29 = v26 + 1;
      int64x2_t v30 = vdupq_n_s64(2uLL);
      int64x2_t v31 = vdupq_n_s64(4uLL);
      unint64_t v32 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v29[-1] = v28;
        *uint64_t v29 = vaddq_s64(v28, v30);
        int64x2_t v28 = vaddq_s64(v28, v31);
        v29 += 2;
        v32 -= 4;
      }
      while (v32);
      goto LABEL_39;
    }
    unint64_t v27 = 0;
    do
    {
      v26->i64[v27] = v27;
      ++v27;
LABEL_39:
      ;
    }
    while (v10 != v27);
    uint64_t v13 = __p;
  }
  uint64_t v33 = 2;
  if (v10 <= 2) {
    uint64_t v34 = 2;
  }
  else {
    uint64_t v34 = v10;
  }
  if (v11 > 2) {
    uint64_t v33 = v11;
  }
  uint64_t v35 = (unint64_t *)*v13;
  uint64_t v36 = v34 - 1;
  for (uint64_t i = 1; i != v33; ++i)
  {
    uint64_t v38 = 0;
    unsigned int v39 = a1[i - 1];
    uint64_t v40 = (unint64_t *)v13[3 * i];
    unint64_t v41 = *v40;
    do
    {
      double v42 = fmin((double)(v35[v38 + 1] + 1), (double)(v41 + 1));
      if (v39 == a3[v38]) {
        uint64_t v43 = v35[v38];
      }
      else {
        uint64_t v43 = v35[v38] + 1;
      }
      unint64_t v41 = (unint64_t)fmin((double)(unint64_t)v42, (double)(unint64_t)v43);
      v40[++v38] = v41;
    }
    while (v36 != v38);
    uint64_t v35 = v40;
  }
  uint64_t v19 = *(void *)(v13[3 * v53] + 8 * v4);
  uint64_t v44 = v55;
  uint64_t v45 = v13;
  if (v55 != v13)
  {
    uint64_t v46 = v55;
    do
    {
      uint64_t v48 = (void *)*(v46 - 3);
      v46 -= 3;
      uint64_t v47 = v48;
      if (v48)
      {
        *(v44 - 2) = v47;
        operator delete(v47);
      }
      uint64_t v44 = v46;
    }
    while (v46 != v13);
    uint64_t v45 = __p;
  }
  uint64_t v55 = v13;
  operator delete(v45);
  return v19;
}

uint64_t isMixedCaseString(NSString *a1)
{
  uint64_t v1 = a1;
  uint64_t v7 = objc_msgSend_lowercaseString(v1, v2, v3, v4, v5, v6);
  if (objc_msgSend_isEqualToString_(v1, v8, (uint64_t)v7, v9, v10, v11))
  {
    int isEqualToString = 1;
  }
  else
  {
    uint64_t v18 = objc_msgSend_uppercaseString(v1, v12, v13, v14, v15, v16);
    if (objc_msgSend_isEqualToString_(v1, v19, (uint64_t)v18, v20, v21, v22))
    {
      int isEqualToString = 1;
    }
    else
    {
      int64x2_t v28 = objc_msgSend_capitalizedString(v1, v23, v24, v25, v26, v27);
      int isEqualToString = objc_msgSend_isEqualToString_(v1, v29, (uint64_t)v28, v30, v31, v32);
    }
  }

  return isEqualToString ^ 1u;
}

void sub_1C4A433B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A433D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A433E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t isUndetectableAddressCandidate(NSString *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  objc_msgSend_componentsSeparatedByString_(a1, a2, @" ", a4, a5, a6);
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v6, (uint64_t)&v58, (uint64_t)v62, 16, v7);
  if (v8)
  {
    uint64_t v57 = *(void *)v59;
    unint64_t v14 = 0x1E4F28000uLL;
    do
    {
      uint64_t v15 = 0;
      uint64_t v56 = v8;
      do
      {
        if (*(void *)v59 != v57) {
          objc_enumerationMutation(obj);
        }
        uint64_t v16 = *(void **)(*((void *)&v58 + 1) + 8 * v15);
        unint64_t v17 = objc_msgSend_letterCharacterSet(*(void **)(v14 + 2952), v9, v10, v11, v12, v13);
        uint64_t v22 = objc_msgSend_rangeOfCharacterFromSet_(v16, v18, (uint64_t)v17, v19, v20, v21);

        int64x2_t v28 = objc_msgSend_decimalDigitCharacterSet(*(void **)(v14 + 2952), v23, v24, v25, v26, v27);
        uint64_t v33 = objc_msgSend_rangeOfCharacterFromSet_(v16, v29, (uint64_t)v28, v30, v31, v32);

        unint64_t v34 = v14;
        unsigned int v39 = objc_msgSend_characterSetWithCharactersInString_(*(void **)(v14 + 2952), v35, @",", v36, v37, v38);
        unint64_t v44 = objc_msgSend_rangeOfCharacterFromSet_(v16, v40, (uint64_t)v39, v41, v42, v43);
        unint64_t v46 = v45;

        unint64_t v14 = v34;
        if (v44 != 0x7FFFFFFFFFFFFFFFLL && v22 != 0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v48 = objc_msgSend_length(v16, v9, v10, v11, v12, v13);
          BOOL v50 = v48 - 1 < v44 || v48 - 1 - v44 >= v46;
          BOOL v51 = v33 == 0x7FFFFFFFFFFFFFFFLL || v22 == 0x7FFFFFFFFFFFFFFFLL;
          uint64_t v52 = 1;
          if (!v51) {
            goto LABEL_30;
          }
        }
        else
        {
          BOOL v50 = 0;
          BOOL v53 = v33 == 0x7FFFFFFFFFFFFFFFLL || v22 == 0x7FFFFFFFFFFFFFFFLL;
          uint64_t v52 = 1;
          if (!v53) {
            goto LABEL_30;
          }
        }
        if (v50) {
          goto LABEL_30;
        }
        ++v15;
      }
      while (v56 != v15);
      uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v58, (uint64_t)v62, 16, v13);
    }
    while (v8);
  }
  uint64_t v52 = 0;
LABEL_30:

  return v52;
}

void sub_1C4A4360C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id reformatToBetterAddressMatching(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v154 = *MEMORY[0x1E4F143B8];
  uint64_t v140 = objc_msgSend_componentsSeparatedByString_(a1, a2, @" ", a4, a5, a6);
  uint64_t v148 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v6, v7, v8, v9, v10);
  objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v11, v12, v13, v14, v15);
  id v147 = (id)objc_claimAutoreleasedReturnValue();
  long long v151 = 0u;
  long long v152 = 0u;
  long long v149 = 0u;
  long long v150 = 0u;
  obuint64_t j = v140;
  uint64_t v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v16, (uint64_t)&v149, (uint64_t)v153, 16, v17);
  if (v23)
  {
    uint64_t v24 = 0;
    uint64_t v143 = *(void *)v150;
    do
    {
      uint64_t v144 = v23;
      for (uint64_t i = 0; i != v144; ++i)
      {
        if (*(void *)v150 != v143) {
          objc_enumerationMutation(obj);
        }
        uint64_t v25 = *(void **)(*((void *)&v149 + 1) + 8 * i);
        uint64_t v26 = objc_msgSend_letterCharacterSet(MEMORY[0x1E4F28B88], v18, v19, v20, v21, v22);
        unint64_t v31 = objc_msgSend_rangeOfCharacterFromSet_(v25, v27, (uint64_t)v26, v28, v29, v30);

        uint64_t v37 = objc_msgSend_decimalDigitCharacterSet(MEMORY[0x1E4F28B88], v32, v33, v34, v35, v36);
        unint64_t v42 = objc_msgSend_rangeOfCharacterFromSet_(v25, v38, (uint64_t)v37, v39, v40, v41);

        uint64_t v47 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], v43, @",", v44, v45, v46);
        unint64_t v52 = objc_msgSend_rangeOfCharacterFromSet_(v25, v48, (uint64_t)v47, v49, v50, v51);

        BOOL v59 = v31 != 0x7FFFFFFFFFFFFFFFLL && v42 != 0x7FFFFFFFFFFFFFFFLL;
        if (v52 == 0x7FFFFFFFFFFFFFFFLL)
        {
          id v60 = v25;
          if (!v59) {
            goto LABEL_38;
          }
        }
        else
        {
          BOOL v128 = v52 != objc_msgSend_length(v25, v53, v54, v55, v56, v57) - 1;
          id v60 = v25;
          if (!v59 && !v128)
          {
LABEL_38:
            uint64_t v89 = v60;
            goto LABEL_39;
          }
        }
        uint64_t v146 = v60;
        uint64_t v66 = v60;
        do
        {
          if (v52 >= v31 || v52 >= v42)
          {
            uint64_t v68 = v52 + 1;
            if (v52 >= v31) {
              uint64_t v69 = v31;
            }
            else {
              uint64_t v69 = v52 + 1;
            }
            if (v52 >= v42) {
              uint64_t v68 = v42;
            }
            if (v31 < v42)
            {
              uint64_t v67 = v68;
              objc_msgSend_substringWithRange_(v66, v61, 0, v68, v64, v65);
            }
            else
            {
              uint64_t v67 = v69;
              objc_msgSend_substringWithRange_(v66, v61, 0, v69, v64, v65);
            }
          }
          else
          {
            uint64_t v67 = v52 + 1;
            objc_msgSend_substringWithRange_(v66, v61, 0, v52 + 1, v64, v65);
          id v70 = };
          objc_msgSend_addObject_(v148, v71, (uint64_t)v70, v72, v73, v74);
          uint64_t v80 = objc_msgSend_length(v70, v75, v76, v77, v78, v79) + v24;
          objc_msgSend_addIndex_(v147, v81, v80, v82, v83, v84);
          uint64_t v89 = objc_msgSend_substringFromIndex_(v66, v85, v67, v86, v87, v88);

          uint64_t v95 = objc_msgSend_letterCharacterSet(MEMORY[0x1E4F28B88], v90, v91, v92, v93, v94);
          unint64_t v31 = objc_msgSend_rangeOfCharacterFromSet_(v89, v96, (uint64_t)v95, v97, v98, v99);

          uint64_t v105 = objc_msgSend_decimalDigitCharacterSet(MEMORY[0x1E4F28B88], v100, v101, v102, v103, v104);
          unint64_t v42 = objc_msgSend_rangeOfCharacterFromSet_(v89, v106, (uint64_t)v105, v107, v108, v109);

          unint64_t v114 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], v110, @",", v111, v112, v113);
          unint64_t v52 = objc_msgSend_rangeOfCharacterFromSet_(v89, v115, (uint64_t)v114, v116, v117, v118);

          BOOL v125 = v31 != 0x7FFFFFFFFFFFFFFFLL && v42 != 0x7FFFFFFFFFFFFFFFLL;
          BOOL v126 = v52 != 0x7FFFFFFFFFFFFFFFLL && v52 != objc_msgSend_length(v146, v119, v120, v121, v122, v123) - 1;

          uint64_t v24 = v80 + 1;
          BOOL v127 = v125 || v126;
          uint64_t v66 = v89;
        }
        while (v127);
LABEL_39:
        uint64_t v129 = objc_msgSend_length(v89, v61, v62, v63, v64, v65);
        objc_msgSend_addObject_(v148, v130, (uint64_t)v89, v131, v132, v133);

        v24 += v129 + 1;
      }
      uint64_t v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v18, (uint64_t)&v149, (uint64_t)v153, 16, v22);
    }
    while (v23);
  }

  if (a2) {
    *(void *)a2 = v147;
  }
  __n128 v138 = objc_msgSend_componentsJoinedByString_(v148, v134, @" ", v135, v136, v137);

  return v138;
}

void sub_1C4A43A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

NSUInteger rangeFromRangeRemovingIndexes(_NSRange a1, NSIndexSet *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  locatiouint64_t n = a1.location;
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  uint64_t v14 = 0;
  v10[0] = 0;
  v10[1] = v10;
  _WORD v10[2] = 0x2020000000;
  v10[3] = 0;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_1C4A43C80;
  v8[3] = &unk_1E64E2B50;
  _NSRange v9 = a1;
  v8[4] = &v11;
  void v8[5] = v10;
  objc_msgSend_enumerateIndexesUsingBlock_(a2, (const char *)a1.length, (uint64_t)v8, a3, a4, a5);
  NSUInteger v6 = location - v12[3];
  _Block_object_dispose(v10, 8);
  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_1C4A43C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void *sub_1C4A43C80(void *result, unint64_t a2)
{
  unint64_t v2 = result[6];
  if (v2 >= a2)
  {
    ++*(void *)(*(void *)(result[4] + 8) + 24);
    unint64_t v5 = result[6];
    BOOL v4 = a2 >= v5;
    unint64_t v6 = a2 - v5;
    if (v4 && v6 < result[7]) {
      goto LABEL_12;
    }
  }
  else
  {
    BOOL v4 = a2 >= v2;
    unint64_t v3 = a2 - v2;
    BOOL v4 = !v4 || v3 >= result[7];
    if (!v4) {
LABEL_12:
    }
      ++*(void *)(*(void *)(result[5] + 8) + 24);
  }
  return result;
}

id commonIndexSetsFromSets(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v10 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v5, v6, v7, v8, v9);
  if (!objc_msgSend_count(v3, v11, v12, v13, v14, v15) || !objc_msgSend_count(v4, v16, v17, v18, v19, v20)) {
    goto LABEL_26;
  }
  uint64_t v26 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v21, v22, v23, v24, v25);
  uint64_t v32 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v27, v28, v29, v30, v31);
  uint64_t v38 = objc_msgSend_firstObject(v3, v33, v34, v35, v36, v37);
  objc_msgSend_addIndexes_(v26, v39, (uint64_t)v38, v40, v41, v42);

  uint64_t v48 = objc_msgSend_firstObject(v4, v43, v44, v45, v46, v47);
  objc_msgSend_addIndexes_(v32, v49, (uint64_t)v48, v50, v51, v52);
  unint64_t v53 = 0;
  unint64_t v54 = 0;
LABEL_4:

  while (1)
  {
    unint64_t v60 = v53;
    if (v53 >= objc_msgSend_count(v3, v55, v56, v57, v58, v59)
      || v54 >= objc_msgSend_count(v4, v61, v62, v63, v64, v65))
    {
      break;
    }
    int isEqualToIndexSet = objc_msgSend_isEqualToIndexSet_(v26, v61, (uint64_t)v32, v63, v64, v65);
    if (isEqualToIndexSet)
    {
      if (objc_msgSend_count(v26, v66, v67, v68, v69, v70))
      {
        uint64_t v77 = objc_msgSend_copy(v26, v72, v73, v74, v75, v76);
        objc_msgSend_addObject_(v10, v78, (uint64_t)v77, v79, v80, v81);
      }
      objc_msgSend_removeAllIndexes(v26, v72, v73, v74, v75, v76);
      objc_msgSend_removeAllIndexes(v32, v82, v83, v84, v85, v86);
    }
    else
    {
      if (objc_msgSend_containsIndexes_(v26, v66, (uint64_t)v32, v68, v69, v70)) {
        goto LABEL_19;
      }
      if ((objc_msgSend_containsIndexes_(v32, v55, (uint64_t)v26, v57, v58, v59) & 1) == 0)
      {
        objc_msgSend_removeAllObjects(v10, v87, v88, v89, v90, v91);
        break;
      }
    }
    unint64_t v53 = v60 + 1;
    if (v60 + 1 >= objc_msgSend_count(v3, v87, v88, v89, v90, v91))
    {
      if (isEqualToIndexSet)
      {
        unint64_t v53 = v60 + 1;
LABEL_19:
        if (++v54 < objc_msgSend_count(v4, v55, v56, v57, v58, v59))
        {
          uint64_t v48 = objc_msgSend_objectAtIndex_(v4, v55, v54, v57, v58, v59);
          objc_msgSend_addIndexes_(v32, v97, (uint64_t)v48, v98, v99, v100);
          goto LABEL_4;
        }
      }
    }
    else
    {
      uint64_t v92 = objc_msgSend_objectAtIndex_(v3, v55, v60 + 1, v57, v58, v59);
      objc_msgSend_addIndexes_(v26, v93, (uint64_t)v92, v94, v95, v96);

      if (isEqualToIndexSet) {
        goto LABEL_19;
      }
    }
  }
  if (objc_msgSend_count(v26, v61, v62, v63, v64, v65) || objc_msgSend_count(v32, v101, v102, v103, v104, v105)) {
    objc_msgSend_removeAllObjects(v10, v101, v102, v103, v104, v105);
  }

LABEL_26:
  return v10;
}

void sub_1C4A43F30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4A43FE0(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v26 = 0;
  uint64_t v27 = &v26;
  uint64_t v28 = 0x2020000000;
  char v29 = 1;
  uint64_t v9 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v4, v5, v6, v7, v8);
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = sub_1C4A4413C;
  v22[3] = &unk_1E64E2B78;
  uint64_t v25 = a2;
  id v10 = v9;
  id v23 = v10;
  uint64_t v24 = &v26;
  objc_msgSend_enumerateIndexesUsingBlock_(v3, v11, (uint64_t)v22, v12, v13, v14);
  if (*((unsigned char *)v27 + 24)) {
    uint64_t v20 = objc_msgSend_copy(v10, v15, v16, v17, v18, v19);
  }
  else {
    uint64_t v20 = 0;
  }

  _Block_object_dispose(&v26, 8);
  return v20;
}

void sub_1C4A440F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A44120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1C4A4413C(uint64_t result, const char *a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = **(void **)(result + 48);
  if ((unint64_t)a2 < (*(void *)(*(void *)(result + 48) + 8) - v6) >> 3) {
    return objc_msgSend_addIndex_(*(void **)(result + 32), a2, *(void *)(v6 + 8 * (void)a2), a4, a5, a6);
  }
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = 0;
  *a3 = 1;
  return result;
}

double ratioHorizontalOverlapOfSubjectToReferenceRect(CGRect a1, CGRect a2)
{
  CGFloat width = a2.size.width;
  CGFloat x = a2.origin.x;
  double v4 = a1.size.width;
  CGFloat v5 = a1.origin.x;
  if (a1.size.width == 0.0)
  {
    double v6 = 0.0;
    uint64_t v7 = 0;
    double v8 = 1.0;
    double MinX = CGRectGetMinX(a1);
    v16.origin.CGFloat y = 0.0;
    v16.size.CGFloat height = 1.0;
    v16.origin.CGFloat x = x;
    v16.size.CGFloat width = width;
    if (MinX >= CGRectGetMinX(v16))
    {
      v17.origin.CGFloat y = 0.0;
      v17.size.CGFloat height = 1.0;
      v17.origin.CGFloat x = v5;
      v17.size.CGFloat width = v4;
      double v10 = CGRectGetMinX(v17);
      v18.origin.CGFloat y = 0.0;
      v18.size.CGFloat height = 1.0;
      v18.origin.CGFloat x = x;
      v18.size.CGFloat width = width;
      if (v10 <= CGRectGetMaxX(v18)) {
        return 1.0;
      }
    }
  }
  else
  {
    double v6 = 0.0;
    if (a2.size.width > 0.0)
    {
      uint64_t v11 = 0;
      double v12 = 1.0;
      uint64_t v13 = 0;
      double v14 = 1.0;
      CGRect v19 = CGRectIntersection(a1, a2);
      return v19.size.width / v4;
    }
  }
  return v6;
}

id mergedOverlappingRectanglesFromRectangles(void *a1)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ((unint64_t)objc_msgSend_count(v1, v2, v3, v4, v5, v6) > 1)
  {
    uint64_t v13 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v7, v8, v9, v10, v11);
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    id v14 = v1;
    uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v84, (uint64_t)v88, 16, v16);
    if (v22)
    {
      uint64_t v23 = *(void *)v85;
      do
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          if (*(void *)v85 != v23) {
            objc_enumerationMutation(v14);
          }
          objc_msgSend_ch_CGRectValue(*(void **)(*((void *)&v84 + 1) + 8 * i), v17, v18, v19, v20, v21, (void)v84);
          double v31 = v30;
          double v33 = v32;
          double v35 = v34;
          double v37 = v36;
          for (unint64_t j = 0; ; ++j)
          {
            if (j >= objc_msgSend_count(v13, v25, v26, v27, v28, v29))
            {
              uint64_t v58 = objc_msgSend_ch_valueWithCGRect_(MEMORY[0x1E4F29238], v39, v40, v41, v42, v43, v31, v33, v35, v37);
              objc_msgSend_addObject_(v13, v59, (uint64_t)v58, v60, v61, v62);
              goto LABEL_14;
            }
            uint64_t v44 = objc_msgSend_objectAtIndexedSubscript_(v13, v39, j, v41, v42, v43);
            objc_msgSend_ch_CGRectValue(v44, v45, v46, v47, v48, v49);
            CGFloat v51 = v50;
            CGFloat v53 = v52;
            CGFloat v55 = v54;
            CGFloat v57 = v56;

            v91.origin.CGFloat x = v51;
            v91.origin.CGFloat y = v53;
            v91.size.CGFloat width = v55;
            v91.size.CGFloat height = v57;
            v94.origin.CGFloat x = v31;
            v94.origin.CGFloat y = v33;
            v94.size.CGFloat width = v35;
            v94.size.CGFloat height = v37;
            if (CGRectIntersectsRect(v91, v94)) {
              break;
            }
          }
          v92.origin.CGFloat x = v51;
          v92.origin.CGFloat y = v53;
          v92.size.CGFloat width = v55;
          v92.size.CGFloat height = v57;
          v95.origin.CGFloat x = v31;
          v95.origin.CGFloat y = v33;
          v95.size.CGFloat width = v35;
          v95.size.CGFloat height = v37;
          CGRect v93 = CGRectUnion(v92, v95);
          uint64_t v58 = objc_msgSend_ch_valueWithCGRect_(MEMORY[0x1E4F29238], v63, v64, v65, v66, v67, v93.origin.x, v93.origin.y, v93.size.width, v93.size.height);
          objc_msgSend_setObject_atIndexedSubscript_(v13, v68, (uint64_t)v58, j, v69, v70);
LABEL_14:
        }
        uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v17, (uint64_t)&v84, (uint64_t)v88, 16, v21);
      }
      while (v22);
    }

    uint64_t v76 = objc_msgSend_count(v13, v71, v72, v73, v74, v75);
    if (v76 == objc_msgSend_count(v14, v77, v78, v79, v80, v81))
    {
      id v82 = v13;
    }
    else
    {
      mergedOverlappingRectanglesFromRectangles(v13);
      id v82 = (id)objc_claimAutoreleasedReturnValue();
    }
    id v12 = v82;
  }
  else
  {
    id v12 = v1;
  }

  return v12;
}

void sub_1C4A44504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *convertLMTokenIDToString(unsigned int a1, const _LXLexicon *a2)
{
  uint64_t v2 = LXLexiconCopyEntryForTokenID();
  if (v2)
  {
    uint64_t v3 = (const void *)v2;
    uint64_t v4 = LXEntryCopyString();
    CFRelease(v3);
    uint64_t v5 = (__CFString *)v4;
  }
  else
  {
    uint64_t v5 = @"UNK";
  }
  return v5;
}

void sub_1C4A44614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1C4A44624(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v8 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 - 0x10000) >> 20)
  {
    uint64_t v10 = 1;
    unsigned int v9 = *(_DWORD *)a1;
  }
  else
  {
    unsigned int v9 = ((v8 + 67043328) >> 10) - 10240;
    v30[1] = v8 & 0x3FF | 0xDC00;
    uint64_t v10 = 2;
  }
  v30[0] = v9;
  id v14 = objc_msgSend_stringWithCharacters_length_(NSString, a2, (uint64_t)v30, v10, a5, a6);
  uint64_t v16 = *(void *)a2;
  uint64_t v15 = *((void *)a2 + 1);
  double v17 = 0.0;
  if (v15 != *(void *)a2)
  {
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    while (*(float *)(v16 + v18 + 4) >= 0.0001)
    {
      int v20 = *(_DWORD *)(v16 + v18);
      if (v20 != *(_DWORD *)a1)
      {
        if ((v20 - 0x10000) >> 20)
        {
          unsigned int v21 = *(_DWORD *)(v16 + v18);
          uint64_t v22 = 1;
        }
        else
        {
          unsigned int v21 = ((v20 + 67043328) >> 10) - 10240;
          v31[1] = v20 & 0x3FF | 0xDC00;
          uint64_t v22 = 2;
        }
        v31[0] = v21;
        uint64_t v23 = objc_msgSend_stringWithCharacters_length_(NSString, v11, (uint64_t)v31, v22, v12, v13);
        uint64_t v28 = objc_msgSend_caseInsensitiveCompare_(v14, v24, (uint64_t)v23, v25, v26, v27);

        if (!v28)
        {
          double v17 = (float)(*(float *)(*(void *)a2 + v18 + 4)
                      / (float)(*(float *)(*(void *)a2 + v18 + 4) + *(float *)(a1 + 4)));
          break;
        }
        uint64_t v16 = *(void *)a2;
        uint64_t v15 = *((void *)a2 + 1);
      }
      ++v19;
      v18 += 8;
      if (v19 >= (v15 - v16) >> 3) {
        break;
      }
    }
  }

  return v17;
}

void sub_1C4A447C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A447D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id halfWidthFullWidthTransform(NSString *a1, NSCharacterSet *a2, NSString *a3, int a4, char a5)
{
  unsigned int v9 = a1;
  uint64_t v10 = a2;
  uint64_t v11 = a3;
  uint64_t v22 = objc_msgSend_string(MEMORY[0x1E4F28E78], v12, v13, v14, v15, v16);
  if (v11
    || (unint64_t)objc_msgSend_length(v9, v17, v18, v19, v20, v21) >= 2
    && (uint64_t v27 = objc_msgSend_rangeOfComposedCharacterSequenceAtIndex_(v9, v17, 1, v19, v20, v21),
        objc_msgSend_substringWithRange_(v9, v28, v27, (uint64_t)v28, v29, v30),
        (uint64_t v11 = (NSString *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    uint64_t v23 = objc_msgSend_lengthOfBytesUsingEncoding_(v11, v17, 4, v19, v20, v21, v11);
    char v25 = a5;
    BOOL v26 = v23 != 1;
  }
  else
  {
    char v25 = a5;
    uint64_t v40 = 0;
    BOOL v26 = 1;
  }
  v51[0] = 0;
  v51[1] = v51;
  double v51[2] = 0x2020000000;
  BOOL v52 = v26;
  v49[0] = 0;
  v49[1] = v49;
  v49[2] = 0x2020000000;
  char v50 = 0;
  double v31 = v9;
  uint64_t v32 = objc_msgSend_length(v9, v17, v24, v19, v20, v21, v40);
  if (a4) {
    uint64_t v33 = 258;
  }
  else {
    uint64_t v33 = 2;
  }
  v42[0] = MEMORY[0x1E4F143A8];
  v42[1] = 3221225472;
  v42[2] = sub_1C4A44A84;
  v42[3] = &unk_1E64E2BA0;
  double v34 = v10;
  uint64_t v43 = v34;
  uint64_t v45 = v51;
  uint64_t v46 = v49;
  char v47 = a4;
  id v35 = v22;
  id v44 = v35;
  char v48 = v25;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v31, v36, 0, v32, v33, (uint64_t)v42);
  double v37 = v44;
  id v38 = v35;

  _Block_object_dispose(v49, 8);
  _Block_object_dispose(v51, 8);

  return v38;
}

void sub_1C4A449F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A44A64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A44A84(uint64_t a1, void *a2)
{
  id v25 = a2;
  if (objc_msgSend_rangeOfCharacterFromSet_(v25, v3, *(void *)(a1 + 32), v4, v5, v6) == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v15 = (NSString *)v25;
  }
  else
  {
    objc_msgSend_stringByApplyingTransform_reverse_(v25, v7, *MEMORY[0x1E4F1C4C8], *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), v8, v9);
    uint64_t v16 = (NSString *)objc_claimAutoreleasedReturnValue();
    uint64_t v15 = v16;
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
    {
      char v17 = objc_msgSend_isEqualToString_(v16, v10, (uint64_t)v25, v12, v13, v14) ^ 1;
      goto LABEL_6;
    }
  }
  char v17 = 0;
LABEL_6:
  objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E4F28B88], v10, v11, v12, v13, v14);
  uint64_t v18 = (NSCharacterSet *)objc_claimAutoreleasedReturnValue();
  if (isStringEntirelyFromSet(v15, v18))
  {
    int v19 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);

    if (v19) {
      goto LABEL_12;
    }
    uint64_t v24 = *(void **)(a1 + 40);
    if (*(unsigned char *)(a1 + 64)) {
      goto LABEL_9;
    }
  }
  else
  {

    uint64_t v24 = *(void **)(a1 + 40);
    if (*(unsigned char *)(a1 + 64))
    {
LABEL_9:
      objc_msgSend_insertString_atIndex_(v24, v20, (uint64_t)v15, 0, v22, v23);
      goto LABEL_12;
    }
  }
  objc_msgSend_appendString_(v24, v20, (uint64_t)v15, v21, v22, v23);
LABEL_12:
  if (*(unsigned char *)(a1 + 65)) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = objc_msgSend_lengthOfBytesUsingEncoding_(v15, v20, 4, v21, v22, v23) != 1;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v17;
}

void sub_1C4A44BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A44C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A44C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A44C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A44C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id phraseMatchingCandidates(NSString *a1, const _LXLexicon *a2, _NSRange a3, _NSRange a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  NSUInteger length = a4.length;
  locatiouint64_t n = a4.location;
  uint64_t v12 = a1;
  uint64_t v18 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v13, v14, v15, v16, v17);
  v59[0] = 0;
  v59[1] = v59;
  v59[2] = 0x2020000000;
  v59[3] = 0;
  v58[0] = 0;
  v58[1] = v58;
  v58[2] = 0x2020000000;
  v58[3] = 0;
  uint64_t v54 = 0;
  CGFloat v55 = &v54;
  uint64_t v56 = 0x2020000000;
  uint64_t v57 = 0;
  uint64_t v57 = objc_msgSend_length(v12, v19, v20, v21, v22, v23);
  uint64_t v29 = objc_msgSend_length(v12, v24, v25, v26, v27, v28);
  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 3221225472;
  v43[2] = sub_1C4A44EC4;
  v43[3] = &unk_1E64E2C18;
  uint64_t v46 = v59;
  uint64_t v30 = v12;
  id v44 = v30;
  char v47 = v58;
  uint64_t v49 = a2;
  uint64_t v50 = a5;
  NSUInteger v51 = location;
  NSUInteger v52 = length;
  uint64_t v53 = a6;
  id v31 = v18;
  id v45 = v31;
  char v48 = &v54;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v30, v32, 0, v29, 3, (uint64_t)v43);
  if (a7)
  {
    unint64_t v38 = v55[3];
    if (v38 >= objc_msgSend_length(v30, v33, v34, v35, v36, v37)) {
      uint64_t v39 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v39 = v55[3];
    }
    *a7 = v39;
  }
  uint64_t v40 = v45;
  id v41 = v31;

  _Block_object_dispose(&v54, 8);
  _Block_object_dispose(v58, 8);
  _Block_object_dispose(v59, 8);

  return v41;
}

void sub_1C4A44E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v30 - 120), 8);

  _Unwind_Resume(a1);
}

void sub_1C4A44EB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A44EC4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  uint64_t v8 = objc_msgSend_substringFromIndex_(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
  uint64_t v36 = 0;
  uint64_t v37 = &v36;
  uint64_t v38 = 0x2020000000;
  uint64_t RootCursor = 0;
  uint64_t RootCursor = LXLexiconCreateRootCursor();
  v35[0] = 0;
  v35[1] = v35;
  v35[2] = 0x2020000000;
  v35[3] = 0;
  v33[0] = 0;
  v33[1] = v33;
  v33[2] = 0x2020000000;
  char v34 = 0;
  uint64_t v14 = objc_msgSend_length(v8, v9, v10, v11, v12, v13);
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  BOOL v21[2] = sub_1C4A450E4;
  v21[3] = &unk_1E64E2BF0;
  uint64_t v15 = *(void *)(a1 + 80);
  uint64_t v24 = *(void *)(a1 + 56);
  uint64_t v29 = v15;
  id v16 = v8;
  id v22 = v16;
  uint64_t v30 = a3;
  long long v31 = *(_OWORD *)(a1 + 88);
  uint64_t v25 = v35;
  uint64_t v26 = &v36;
  uint64_t v27 = v33;
  uint64_t v32 = *(void *)(a1 + 104);
  id v17 = *(id *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 64);
  id v23 = v17;
  uint64_t v28 = v18;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v16, v19, 0, v14, 3, (uint64_t)v21);
  uint64_t v20 = (const void *)v37[3];
  if (v20) {
    CFRelease(v20);
  }

  _Block_object_dispose(v33, 8);
  _Block_object_dispose(v35, 8);
  _Block_object_dispose(&v36, 8);
}

void sub_1C4A45084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v18 - 144), 8);
  _Block_object_dispose((const void *)(v18 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1C4A450D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A450E4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) == *(void *)(a1 + 88))
  {
    *a7 = 1;
  }
  else
  {
    uint64_t v9 = a3 + a4;
    uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    uint64_t v11 = objc_msgSend_substringWithRange_(*(void **)(a1 + 32), a2, v10, v9 - v10, a5, a6);
    uint64_t v12 = LXCursorCreateByAdvancing();
    CFRelease(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 64) + 8) + 24));
    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v12;
    if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
    {
      ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
      uint64_t v18 = (void *)(a1 + 104);
      unint64_t v17 = *(void *)(a1 + 104);
      unint64_t v19 = *(void *)(a1 + 96);
      *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = v19 + v9 == *(void *)(a1 + 120);
      *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v9;
      if (v19 + v9 > v17)
      {
        uint64_t v24 = objc_msgSend_substringToIndex_(*(void **)(a1 + 32), v13, v9, v14, v15, v16);
        uint64_t v25 = 0;
        if (*v18 >= v19) {
          uint64_t v26 = *v18 - v19;
        }
        else {
          uint64_t v26 = 0;
        }
        if (v19 < v17)
        {
          uint64_t v25 = objc_msgSend_substringToIndex_(v24, v20, v26, v21, v22, v23);
        }
        id v27 = v25;
        id v28 = v24;
        id v31 = *(id *)(a1 + 40);
        LXCursorEnumerateEntries();
        if (*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) && LXCursorHasChildren())
        {
          uint64_t v29 = *(void *)(a1 + 96);
          uint64_t v30 = *(void *)(*(void *)(a1 + 80) + 8);
          if (v29 < *(void *)(v30 + 24)) {
            *(void *)(v30 + 24) = v29;
          }
        }
      }
    }
    else
    {
      *a7 = 1;
    }
  }
}

void sub_1C4A45354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A45390(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A453A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A453B0(uint64_t a1)
{
  LXEntryCopyString();
  uint64_t v2 = (char *)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = v2;
  uint64_t v7 = *(void *)(a1 + 32);
  cf = v2;
  if (!v7 || (hasPrefiCGFloat x = objc_msgSend_hasPrefix_(v2, v2, v7, v3, v4, v5), v6 = cf, hasPrefix))
  {
    uint64_t v9 = objc_msgSend_compare_(*(void **)(a1 + 40), v6, (uint64_t)v6, v3, v4, v5);
    uint64_t v14 = objc_msgSend_caseInsensitiveCompare_(*(void **)(a1 + 40), v10, (uint64_t)cf, v11, v12, v13);
    uint64_t v6 = cf;
    if (v9)
    {
      if (!v14)
      {
        if (*(unsigned char *)(a1 + 88)) {
          uint64_t v18 = 0;
        }
        else {
          uint64_t v18 = *(void *)(a1 + 56) - *(void *)(a1 + 64);
        }
        unint64_t v19 = objc_msgSend_substringFromIndex_(cf, cf, *(void *)(a1 + 80), v15, v16, v17);
        uint64_t v20 = *(void **)(a1 + 48);
        uint64_t v25 = objc_msgSend_numberWithInteger_(NSNumber, v21, v18, v22, v23, v24);
        uint64_t v30 = objc_msgSend_objectForKey_(v20, v26, (uint64_t)v25, v27, v28, v29);

        if (!v30
          || (unint64_t v36 = objc_msgSend_length(v19, v31, v32, v33, v34, v35),
              v36 > objc_msgSend_length(v30, v37, v38, v39, v40, v41)))
        {
          uint64_t v42 = *(void **)(a1 + 48);
          uint64_t v43 = objc_msgSend_numberWithInteger_(NSNumber, v31, v18, v33, v34, v35);
          objc_msgSend_setObject_forKey_(v42, v44, (uint64_t)v19, (uint64_t)v43, v45, v46);
        }
        uint64_t v6 = cf;
      }
    }
  }
  CFRelease(v6);
}

void sub_1C4A45510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A45580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A45594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A455A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL isCharacterLatinOrCommonScript(NSString *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_opt_class();
  int v7 = objc_msgSend_singleScriptCodeForString_(v2, v3, (uint64_t)v1, v4, v5, v6);
  BOOL v9 = v7 == 25 || v7 == 0;

  return v9;
}

void sub_1C4A45608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL isCharacterLatinScript(NSString *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_opt_class();
  BOOL v7 = objc_msgSend_singleScriptCodeForString_(v2, v3, (uint64_t)v1, v4, v5, v6) == 25;

  return v7;
}

void sub_1C4A45660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL isCharacterCyrillicScript(NSString *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_opt_class();
  BOOL v7 = objc_msgSend_singleScriptCodeForString_(v2, v3, (uint64_t)v1, v4, v5, v6) == 8;

  return v7;
}

void sub_1C4A456B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL isCharacterArabicScript(NSString *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_opt_class();
  BOOL v7 = objc_msgSend_singleScriptCodeForString_(v2, v3, (uint64_t)v1, v4, v5, v6) == 2;

  return v7;
}

void sub_1C4A45710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL isCharacterHanScript(NSString *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_opt_class();
  BOOL v7 = objc_msgSend_singleScriptCodeForString_(v2, v3, (uint64_t)v1, v4, v5, v6) == 17;

  return v7;
}

void sub_1C4A45768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL isCharacterKanaScript(NSString *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_opt_class();
  BOOL v7 = (objc_msgSend_singleScriptCodeForString_(v2, v3, (uint64_t)v1, v4, v5, v6) & 0xFFFFFFFD) == 20;

  return v7;
}

void sub_1C4A457C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t isCharacterFullWidth(NSString *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_opt_class();
  uint64_t v7 = objc_msgSend_isCharacterFullWidth_(v2, v3, (uint64_t)v1, v4, v5, v6);

  return v7;
}

void sub_1C4A45818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t isCharacterCJKSymbolsPunctuations(NSString *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_opt_class();
  uint64_t v7 = objc_msgSend_isCharacterCJKSymbolsPunctuations_(v2, v3, (uint64_t)v1, v4, v5, v6);

  return v7;
}

void sub_1C4A4586C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t shouldForbidSpaceInBetween(NSString *a1, NSString *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = a2;
  uint64_t v5 = v3;
  uint64_t v6 = objc_opt_class();
  LODWORD(v3) = objc_msgSend_singleScriptCodeForString_(v6, v7, (uint64_t)v5, v8, v9, v10);

  if (v3 == 17
    || (uint64_t v11 = v5,
        uint64_t v12 = objc_opt_class(),
        int v17 = objc_msgSend_singleScriptCodeForString_(v12, v13, (uint64_t)v11, v14, v15, v16) & 0xFFFFFFFD,
        v11,
        v17 == 20))
  {
    int isCharacterCJKSymbolsPunctuations = 1;
  }
  else
  {
    unint64_t v19 = v11;
    uint64_t v20 = objc_opt_class();
    int isCharacterCJKSymbolsPunctuations = objc_msgSend_isCharacterCJKSymbolsPunctuations_(v20, v21, (uint64_t)v19, v22, v23, v24);
  }
  uint64_t v25 = v4;
  uint64_t v26 = objc_opt_class();
  int v31 = objc_msgSend_singleScriptCodeForString_(v26, v27, (uint64_t)v25, v28, v29, v30);

  if (v31 == 17
    || (uint64_t v32 = v25,
        uint64_t v33 = objc_opt_class(),
        int v38 = objc_msgSend_singleScriptCodeForString_(v33, v34, (uint64_t)v32, v35, v36, v37) & 0xFFFFFFFD,
        v32,
        v38 == 20))
  {
    int v39 = 1;
  }
  else
  {
    uint64_t v40 = v32;
    uint64_t v41 = objc_opt_class();
    int v39 = objc_msgSend_isCharacterCJKSymbolsPunctuations_(v41, v42, (uint64_t)v40, v43, v44, v45);
  }
  return isCharacterCJKSymbolsPunctuations | v39;
}

void sub_1C4A459C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A45A00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A45A18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A45A30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void parseFloatsFromString(NSString *a1@<X0>, char **a2@<X8>)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t v58 = v3;
  uint64_t v8 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], v4, @"0123456789.-", v5, v6, v7);
  uint64_t v59 = v8;
  uint64_t v18 = objc_msgSend_scannerWithString_(MEMORY[0x1E4F28FE8], v9, (uint64_t)v3, v10, v11, v12);
  unint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
  while ((objc_msgSend_isAtEnd(v18, v13, v14, v15, v16, v17) & 1) == 0)
  {
    objc_msgSend_scanUpToCharactersFromSet_intoString_(v18, v23, (uint64_t)v8, 0, v24, v25);
    int v60 = 0;
    if (!objc_msgSend_scanFloat_(v18, v26, (uint64_t)&v60, v27, v28, v29)) {
      goto LABEL_24;
    }
    if (v21 >= v20)
    {
      uint64_t v36 = (v21 - v19) >> 2;
      unint64_t v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 62) {
        sub_1C494A220();
      }
      if ((v20 - v19) >> 1 > v37) {
        unint64_t v37 = (v20 - v19) >> 1;
      }
      if ((unint64_t)(v20 - v19) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v38 = v37;
      }
      if (v38)
      {
        if (v38 >> 62) {
          sub_1C4949AA8();
        }
        int v39 = operator new(4 * v38);
        uint64_t v40 = &v39[4 * v36];
        *(_DWORD *)uint64_t v40 = v60;
        uint64_t v35 = (uint64_t)(v40 + 4);
        int64_t v41 = v21 - v19;
        if (v21 == v19) {
          goto LABEL_20;
        }
LABEL_17:
        unint64_t v42 = v41 - 4;
        if (v42 < 0xBC)
        {
          uint64_t v43 = v21;
          goto LABEL_19;
        }
        unint64_t v50 = (v21 - 4 - v19) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v39[v21 - v19 - 4 - v50] > &v39[v21 - v19 - 4])
        {
          uint64_t v43 = v21;
          goto LABEL_19;
        }
        if (&v21[-v50 - 4] > v21 - 4)
        {
          uint64_t v43 = v21;
          goto LABEL_19;
        }
        if ((unint64_t)(v19 - v39) < 0x20)
        {
          uint64_t v43 = v21;
          goto LABEL_19;
        }
        uint64_t v51 = (v42 >> 2) + 1;
        uint64_t v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v43 = &v21[-v52];
        v40 -= v52;
        uint64_t v53 = &v39[4 * v36 - 16];
        uint64_t v54 = v21 - 16;
        uint64_t v55 = v51 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v56 = *(_OWORD *)v54;
          *(v53 - 1) = *((_OWORD *)v54 - 1);
          *uint64_t v53 = v56;
          v53 -= 2;
          v54 -= 32;
          v55 -= 8;
        }
        while (v55);
        if (v51 != (v51 & 0x7FFFFFFFFFFFFFF8))
        {
          do
          {
LABEL_19:
            int v44 = *((_DWORD *)v43 - 1);
            v43 -= 4;
            *((_DWORD *)v40 - 1) = v44;
            v40 -= 4;
          }
          while (v43 != v19);
        }
      }
      else
      {
        int v39 = 0;
        uint64_t v40 = (char *)(4 * v36);
        *(_DWORD *)(4 * v36) = v60;
        uint64_t v35 = 4 * v36 + 4;
        int64_t v41 = v21 - v19;
        if (v21 != v19) {
          goto LABEL_17;
        }
      }
LABEL_20:
      uint64_t v20 = &v39[4 * v38];
      *a2 = v40;
      a2[1] = (char *)v35;
      a2[2] = v20;
      if (v19) {
        operator delete(v19);
      }
      unint64_t v19 = v40;
      uint64_t v3 = v58;
      uint64_t v8 = v59;
      goto LABEL_23;
    }
    *(_DWORD *)uint64_t v21 = v60;
    uint64_t v35 = (uint64_t)(v21 + 4);
LABEL_23:
    a2[1] = (char *)v35;
    uint64_t v21 = (char *)v35;
LABEL_24:
    if (objc_msgSend_scanLocation(v18, v30, v31, v32, v33, v34) == v22)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v57 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CGAffineTransform buf = 138412290;
        uint64_t v62 = v3;
        _os_log_impl(&dword_1C492D000, v57, OS_LOG_TYPE_ERROR, "Unable to scan floats from string %@", buf, 0xCu);
      }

      break;
    }
    uint64_t v22 = objc_msgSend_scanLocation(v18, v45, v46, v47, v48, v49);
  }
}

void sub_1C4A45D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  uint64_t v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }

  _Unwind_Resume(a1);
}

uint64_t affineTransformToString(CGAffineTransform *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_stringWithFormat_(NSString, a2, @"[%f, %f, %f, %f, %f, %f]", a4, a5, a6, *(void *)&a1->a, *(void *)&a1->b, *(void *)&a1->c, *(void *)&a1->d, *(void *)&a1->tx, *(void *)&a1->ty);
}

void affineTransformFromString(NSString *a1@<X0>, float64x2_t *a2@<X8>)
{
  parseFloatsFromString(a1, (char **)&v7);
  uint64_t v3 = v7;
  if ((char *)v8 - (char *)v7 == 24)
  {
    float64x2_t v4 = vcvtq_f64_f32(v7[1]);
    *a2 = vcvtq_f64_f32(*v7);
    a2[1] = v4;
    a2[2] = vcvtq_f64_f32(v3[2]);
  }
  else
  {
    uint64_t v5 = (float64x2_t *)MEMORY[0x1E4F1DAB8];
    float64x2_t v6 = *(float64x2_t *)(MEMORY[0x1E4F1DAB8] + 16);
    *a2 = *(float64x2_t *)MEMORY[0x1E4F1DAB8];
    a2[1] = v6;
    a2[2] = v5[2];
    if (!v3) {
      return;
    }
  }
  uint64_t v8 = v3;
  operator delete(v3);
}

uint64_t rectToString(CGRect a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return objc_msgSend_stringWithFormat_(NSString, a3, @"[%f, %f, %f, %f]", a5, a6, a7, *(void *)&a1.origin.x, *(void *)&a1.origin.y, *(void *)&a1.size.width, *(void *)&a1.size.height);
}

double rectFromString(NSString *a1)
{
  parseFloatsFromString(a1, (char **)&v3);
  if ((char *)v4 - (char *)v3 == 16)
  {
    double v1 = *v3;
LABEL_4:
    float64x2_t v4 = v3;
    operator delete(v3);
    return v1;
  }
  double v1 = *MEMORY[0x1E4F1DB20];
  if (v3) {
    goto LABEL_4;
  }
  return v1;
}

uint64_t pointToString(CGPoint a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return objc_msgSend_stringWithFormat_(NSString, a3, @"[%f, %f]", a5, a6, a7, *(void *)&a1.x, *(void *)&a1.y);
}

double pointFromString(NSString *a1)
{
  parseFloatsFromString(a1, (char **)&v3);
  if ((char *)v4 - (char *)v3 == 8)
  {
    double v1 = *v3;
LABEL_4:
    float64x2_t v4 = v3;
    operator delete(v3);
    return v1;
  }
  double v1 = *MEMORY[0x1E4F1DAD8];
  if (v3) {
    goto LABEL_4;
  }
  return v1;
}

uint64_t sizeToString(CGSize a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return objc_msgSend_stringWithFormat_(NSString, a3, @"[%f, %f]", a5, a6, a7, *(void *)&a1.width, *(void *)&a1.height);
}

double sizeFromString(NSString *a1)
{
  parseFloatsFromString(a1, (char **)&v3);
  if ((char *)v4 - (char *)v3 == 8)
  {
    double v1 = *v3;
LABEL_4:
    float64x2_t v4 = v3;
    operator delete(v3);
    return v1;
  }
  double v1 = *MEMORY[0x1E4F1DB30];
  if (v3) {
    goto LABEL_4;
  }
  return v1;
}

id compatibilityJamoFromComposedHangulString(NSString *a1)
{
  double v1 = a1;
  if (qword_1EA3C9D40 != -1) {
    dispatch_once(&qword_1EA3C9D40, &unk_1F2013750);
  }
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v8 = objc_msgSend_precomposedStringWithCanonicalMapping(v1, v3, v4, v5, v6, v7);
  uint64_t v14 = objc_msgSend_length(v8, v9, v10, v11, v12, v13);
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  _WORD v23[2] = sub_1C4A46288;
  v23[3] = &unk_1E64E0E38;
  id v15 = v2;
  id v24 = v15;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v8, v16, 0, v14, 2, (uint64_t)v23);
  uint64_t v21 = objc_msgSend_componentsJoinedByString_(v15, v17, (uint64_t)&stru_1F20141C8, v18, v19, v20);

  return v21;
}

void sub_1C4A461D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4620C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4621C()
{
  id v0 = (void *)qword_1EA3C9268;
  qword_1EA3C9268 = (uint64_t)&unk_1F203DA40;

  double v1 = (void *)qword_1EA3C9270;
  qword_1EA3C9270 = (uint64_t)&unk_1F203DA58;

  id v2 = (void *)qword_1EA3C9278;
  qword_1EA3C9278 = (uint64_t)&unk_1F203DA70;
}

void sub_1C4A46288(uint64_t a1, void *a2)
{
  id v47 = a2;
  unsigned int v7 = objc_msgSend_characterAtIndex_(v47, v3, 0, v4, v5, v6);
  if (objc_msgSend_length(v47, v8, v9, v10, v11, v12) == 1 && v7 >> 10 >= 0x2B && v7 <= 0xD7A3)
  {
    uint64_t v17 = v7 - 44032;
    uint64_t v18 = objc_msgSend_objectAtIndex_((void *)qword_1EA3C9268, v13, (unsigned __int16)(v7 + 21504) / 0x24Cu, v14, v15, v16);
    uint64_t v19 = (unsigned __int16)v17 % 0x1Cu;
    id v24 = objc_msgSend_objectAtIndex_((void *)qword_1EA3C9270, v20, (2341 * ((v17 - v19) % 0x24CuLL)) >> 16, v21, v22, v23);
    uint64_t v29 = objc_msgSend_objectAtIndex_((void *)qword_1EA3C9278, v25, v19, v26, v27, v28);
    objc_msgSend_addObject_(*(void **)(a1 + 32), v30, (uint64_t)v18, v31, v32, v33);
    objc_msgSend_addObject_(*(void **)(a1 + 32), v34, (uint64_t)v24, v35, v36, v37);
    if (objc_msgSend_length(v29, v38, v39, v40, v41, v42)) {
      objc_msgSend_addObject_(*(void **)(a1 + 32), v43, (uint64_t)v29, v44, v45, v46);
    }
  }
  else
  {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v13, (uint64_t)v47, v14, v15, v16);
  }
}

void sub_1C4A463FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A46450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id uncompressLZFSEData(NSData *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (a2 < 1)
  {
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v4 = (uint8_t *)malloc_type_malloc(a2, 0x20608294uLL);
    uint64_t v5 = v3;
    uint64_t v11 = (const uint8_t *)objc_msgSend_bytes(v5, v6, v7, v8, v9, v10);
    size_t v17 = objc_msgSend_length(v5, v12, v13, v14, v15, v16);
    if (compression_decode_buffer(v4, a2, v11, v17, 0, COMPRESSION_LZFSE) == a2)
    {
      uint64_t v21 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v18, (uint64_t)v4, a2, v19, v20);
    }
    else
    {
      uint64_t v21 = 0;
    }
    free(v4);
  }

  return v21;
}

void sub_1C4A46544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A46554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id getAlphaShape(void *a1, double a2)
{
  id v3 = a1;
  long long __p = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  unint64_t v9 = objc_msgSend_count(v3, v4, v5, v6, v7, v8);
  unint64_t v15 = v9;
  if (v9)
  {
    if (v9 >> 60) {
      sub_1C494A220();
    }
    long long __p = operator new(16 * v9);
    uint64_t v63 = (char *)__p;
    uint64_t v64 = (char *)__p + 16 * v15;
  }
  for (unint64_t i = 0; objc_msgSend_count(v3, v10, v11, v12, v13, v14) > i; ++i)
  {
    uint64_t v22 = objc_msgSend_objectAtIndexedSubscript_(v3, v18, i, v19, v20, v21);
    objc_msgSend_ch_CGPointValue(v22, v23, v24, v25, v26, v27);
    uint64_t v30 = v28;
    uint64_t v31 = v29;
    uint64_t v32 = v63;
    if (v63 < v64)
    {
      *(void *)uint64_t v63 = v28;
      *((void *)v32 + 1) = v29;
      size_t v17 = v32 + 16;
      goto LABEL_6;
    }
    uint64_t v33 = (char *)__p;
    uint64_t v34 = (v63 - (unsigned char *)__p) >> 4;
    unint64_t v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 60) {
      sub_1C494A220();
    }
    uint64_t v36 = v64 - (unsigned char *)__p;
    if ((v64 - (unsigned char *)__p) >> 3 > v35) {
      unint64_t v35 = v36 >> 3;
    }
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v37 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v37 = v35;
    }
    if (v37)
    {
      if (v37 >> 60) {
        sub_1C4949AA8();
      }
      unint64_t v38 = (char *)operator new(16 * v37);
      uint64_t v39 = &v38[16 * v34];
      *(void *)uint64_t v39 = v30;
      *((void *)v39 + 1) = v31;
      uint64_t v40 = v39;
      if (v32 == v33)
      {
LABEL_18:
        size_t v17 = v39 + 16;
        long long __p = v40;
        uint64_t v64 = &v38[16 * v37];
        if (v32) {
          goto LABEL_23;
        }
        goto LABEL_6;
      }
    }
    else
    {
      unint64_t v38 = 0;
      uint64_t v39 = (char *)(16 * v34);
      *(void *)uint64_t v39 = v28;
      *((void *)v39 + 1) = v29;
      uint64_t v40 = (char *)(16 * v34);
      if (v32 == v33) {
        goto LABEL_18;
      }
    }
    do
    {
      *((_OWORD *)v40 - 1) = *((_OWORD *)v32 - 1);
      v40 -= 16;
      v32 -= 16;
    }
    while (v32 != v33);
    uint64_t v32 = v33;
    size_t v17 = v39 + 16;
    long long __p = v40;
    uint64_t v64 = &v38[16 * v37];
    if (v32) {
LABEL_23:
    }
      operator delete(v32);
LABEL_6:
    uint64_t v63 = v17;
  }
  sub_1C4B4AD64((char **)&__p, &v60, a2);
  unint64_t v50 = objc_msgSend_arrayWithCapacity_(MEMORY[0x1E4F1CA48], v41, ((char *)v61 - (char *)v60) >> 4, v42, v43, v44);
  uint64_t v51 = v61;
  if (v61 != v60)
  {
    uint64_t v52 = 0;
    unint64_t v53 = 0;
    uint64_t v51 = v60;
    do
    {
      uint64_t v54 = objc_msgSend_ch_valueWithCGPoint_(MEMORY[0x1E4F29238], v45, v46, v47, v48, v49, v51[v52], v51[v52 + 1]);
      objc_msgSend_addObject_(v50, v55, (uint64_t)v54, v56, v57, v58);

      ++v53;
      uint64_t v51 = v60;
      v52 += 2;
    }
    while (v53 < ((char *)v61 - (char *)v60) >> 4);
  }
  if (v51)
  {
    uint64_t v61 = v51;
    operator delete(v51);
  }
  if (__p)
  {
    uint64_t v63 = (char *)__p;
    operator delete(__p);
  }

  return v50;
}

void sub_1C4A46800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }

  _Unwind_Resume(a1);
}

id runCommand(NSString *a1)
{
  double v1 = a1;
  if (os_variant_has_internal_diagnostics())
  {
    id v2 = objc_alloc_init(MEMORY[0x1E4F29038]);
    objc_msgSend_setLaunchPath_(v2, v3, @"/bin/sh", v4, v5, v6);
    uint64_t v7 = (void *)MEMORY[0x1E4F1C978];
    uint64_t v12 = objc_msgSend_stringWithFormat_(NSString, v8, @"%@", v9, v10, v11, v1);
    size_t v17 = objc_msgSend_arrayWithObjects_(v7, v13, @"-c", v14, v15, v16, v12, 0);

    objc_msgSend_setArguments_(v2, v18, (uint64_t)v17, v19, v20, v21);
    uint64_t v27 = objc_msgSend_pipe(MEMORY[0x1E4F28F48], v22, v23, v24, v25, v26);
    objc_msgSend_setStandardOutput_(v2, v28, (uint64_t)v27, v29, v30, v31);
    objc_msgSend_setStandardError_(v2, v32, (uint64_t)v27, v33, v34, v35);
    uint64_t v41 = objc_msgSend_fileHandleForReading(v27, v36, v37, v38, v39, v40);
    objc_msgSend_launchAndReturnError_(v2, v42, 0, v43, v44, v45);
    uint64_t v51 = objc_msgSend_readDataToEndOfFile(v41, v46, v47, v48, v49, v50);
    id v52 = [NSString alloc];
    uint64_t v56 = objc_msgSend_initWithData_encoding_(v52, v53, (uint64_t)v51, 4, v54, v55);
    uint64_t v62 = objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E4F28B88], v57, v58, v59, v60, v61);
    uint64_t v67 = objc_msgSend_stringByTrimmingCharactersInSet_(v56, v63, (uint64_t)v62, v64, v65, v66);
  }
  else
  {
    uint64_t v67 = 0;
  }

  return v67;
}

void sub_1C4A46A44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A46AFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id clearStyleInventory(void)
{
  id result = (id)os_variant_has_internal_diagnostics();
  if (result)
  {
    id v1 = runCommand(&cfstr_LaunchctlUnloa.isa);
    id v2 = runCommand(&cfstr_LoginFMobileUs.isa);
    return runCommand(&cfstr_LaunchctlLoadS.isa);
  }
  return result;
}

void useInventoryWithRelativePath(NSString *a1)
{
  uint64_t v8 = a1;
  if (os_variant_has_internal_diagnostics())
  {
    id v1 = runCommand(&cfstr_LaunchctlUnloa.isa);
    objc_msgSend_stringWithFormat_(NSString, (const char *)v8, @"login -f mobile defaults write \"Apple Global Domain\" com.apple.corehandwriting -dict-add CHCustomStyleInventoryPath -string \"%@\"", v2, v3, v4, v8);
    uint64_t v5 = (NSString *)objc_claimAutoreleasedReturnValue();
    id v6 = runCommand(v5);

    id v7 = runCommand(&cfstr_LaunchctlLoadS.isa);
  }
}

void sub_1C4A46C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A46C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void useDefaultInventory(void)
{
  if (os_variant_has_internal_diagnostics())
  {
    useInventoryWithRelativePath(0);
  }
}

uint64_t useInventoryWithRelativePathWithChecks(NSString *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_alloc_init(CHRemoteTextSynthesizer);
  uint64_t v8 = objc_msgSend_styleInventoryStatus(v2, v3, v4, v5, v6, v7);
  uint64_t v14 = objc_msgSend_inventoryRelativePath(v8, v9, v10, v11, v12, v13);
  char isEqualToString = objc_msgSend_isEqualToString_(v14, v15, (uint64_t)v1, v16, v17, v18);

  if (isEqualToString)
  {
    uint64_t v20 = 0;
  }
  else
  {
    useInventoryWithRelativePath(v1);
    uint64_t v26 = objc_msgSend_styleInventoryStatus(v2, v21, v22, v23, v24, v25);
    uint64_t v32 = objc_msgSend_inventoryRelativePath(v26, v27, v28, v29, v30, v31);
    uint64_t v20 = objc_msgSend_isEqualToString_(v32, v33, (uint64_t)v1, v34, v35, v36);

    if ((v20 & 1) == 0)
    {
      uint64_t v42 = objc_msgSend_inventoryRelativePath(v8, v37, v38, v39, v40, v41);
      uint64_t v48 = objc_msgSend_inventoryRelativePath(v26, v43, v44, v45, v46, v47);
      char v53 = objc_msgSend_isEqualToString_(v42, v49, (uint64_t)v48, v50, v51, v52);

      if ((v53 & 1) == 0)
      {
        objc_msgSend_inventoryRelativePath(v8, v54, v55, v56, v57, v58);
        uint64_t v59 = (NSString *)objc_claimAutoreleasedReturnValue();
        useInventoryWithRelativePath(v59);
      }
    }
  }
  return v20;
}

void sub_1C4A46DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A46DE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A46E00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A46E20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A46E34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A46E44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id deviceANESubType(void)
{
  if (qword_1EA3C9288 == -1)
  {
    id v0 = (void *)qword_1EA3C9280;
  }
  else
  {
    dispatch_once(&qword_1EA3C9288, &unk_1F2013770);
    id v0 = (void *)qword_1EA3C9280;
  }
  return v0;
}

void sub_1C4A46ECC()
{
  id v0 = sub_1C4A46F5C();
  if (objc_msgSend_hasANE(v0, v1, v2, v3, v4, v5))
  {
    id v6 = sub_1C4A46F5C();
    objc_msgSend_aneSubType(v6, v7, v8, v9, v10, v11);
    id v19 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v17 = objc_msgSend_uppercaseString(v19, v12, v13, v14, v15, v16);
    uint64_t v18 = (void *)qword_1EA3C9280;
    qword_1EA3C9280 = v17;
  }
}

void sub_1C4A46F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1C4A46F5C()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)qword_1EA3C9290;
  uint64_t v7 = qword_1EA3C9290;
  if (!qword_1EA3C9290)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_1C4A47040;
    v3[3] = &unk_1E64E1A88;
    v3[4] = &v4;
    sub_1C4A47040((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1C4A47028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1C4A47040(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!qword_1EA3C9298)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    v4[3] = sub_1C4A47194;
    v4[4] = &unk_1E64E1AA8;
    v4[5] = v4;
    long long v5 = xmmword_1E64E2C38;
    uint64_t v6 = 0;
    qword_1EA3C9298 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!qword_1EA3C9298)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("_ANEDeviceInfo");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  qword_1EA3C9290 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1C4A47194()
{
  uint64_t result = _sl_dlopen();
  qword_1EA3C9298 = result;
  return result;
}

void ***sub_1C4A47208(void ***result)
{
  id v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      uint64_t v4 = (char *)v2[1];
      long long v5 = **result;
      if (v4 != v3)
      {
        uint64_t v6 = (char *)v2[1];
        do
        {
          uint64_t v8 = (void *)*((void *)v6 - 3);
          v6 -= 24;
          uint64_t v7 = v8;
          if (v8)
          {
            *((void *)v4 - 2) = v7;
            operator delete(v7);
          }
          uint64_t v4 = v6;
        }
        while (v6 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_1C4A47320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A47F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20,_Unwind_Exception *exception_object,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1C4A48794()
{
  id v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.CoreHandwriting.CHSingletonMLModelQueue", v0);
  uint64_t v2 = (void *)qword_1EA3C92B0;
  qword_1EA3C92B0 = (uint64_t)v1;

  uint64_t v8 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v3, v4, v5, v6, v7);
  uint64_t v9 = (void *)qword_1EA3C92A0;
  qword_1EA3C92A0 = v8;

  uint64_t v10 = objc_opt_new();
  uint64_t v11 = (void *)qword_1EA3C92A8;
  qword_1EA3C92A8 = v10;
}

void sub_1C4A4899C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C4A489CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A489E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A489F4(uint64_t *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_objectForKey_((void *)qword_1EA3C92A0, a2, a1[4], a4, a5, a6);

  if (!v7)
  {
    uint64_t v10 = objc_msgSend_modelWithContentsOfURL_configuration_error_(MEMORY[0x1E4F1E968], v8, a1[5], a1[6], a1[7], v9);
    uint64_t v11 = [CHSingletonMLModel alloc];
    uint64_t v12 = (void *)a1[4];
    id v28 = v10;
    id v13 = v12;
    if (v11)
    {
      self;
      if (qword_1EA3C92B8 != -1) {
        dispatch_once(&qword_1EA3C92B8, &unk_1F2012C70);
      }
      v29.receiver = v11;
      v29.super_class = (Class)CHSingletonMLModel;
      uint64_t v14 = (id *)objc_msgSendSuper2(&v29, sel_init);
      uint64_t v15 = (uint64_t)v14;
      if (v14)
      {
        objc_storeStrong(v14 + 1, v12);
        *(void *)(v15 + 16) = 0;
        objc_storeStrong((id *)(v15 + 24), v10);
      }
    }
    else
    {
      uint64_t v15 = 0;
    }

    objc_msgSend_setObject_forKey_((void *)qword_1EA3C92A0, v16, v15, a1[4], v17, v18);
    uint64_t v24 = objc_msgSend_powerLogModelNameForModelKey_(CHSingletonMLModel, v19, a1[4], v20, v21, v22);
    if (v24 != 0x7FFFFFFFFFFFFFFFLL) {
      objc_msgSend_logModelLoaded_((void *)qword_1EA3C92A8, v23, v24, v25, v26, v27);
    }
  }
}

void sub_1C4A48B8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A48BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A48D88(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4A48D98(uint64_t a1)
{
}

void sub_1C4A48DA0(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a1[5];
  uint64_t v8 = *(void **)(a1[4] + 24);
  uint64_t v9 = a1[6];
  uint64_t v10 = *(void *)(a1[8] + 8);
  obunint64_t j = *(id *)(v10 + 40);
  uint64_t v11 = objc_msgSend_predictionFromFeatures_options_error_(v8, a2, v7, v9, (uint64_t)&obj, a6);
  objc_storeStrong((id *)(v10 + 40), obj);
  uint64_t v12 = *(void *)(a1[7] + 8);
  id v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;
}

void sub_1C4A48ED4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v25 = objc_msgSend_objectForKey_((void *)qword_1EA3C92A0, a2, *(void *)(a1 + 32), a4, a5, a6);
  if (v25)
  {
    --v25[2];
    if (!objc_msgSend_usageCount(v25, v7, v8, v9, v10, v11))
    {
      objc_msgSend_removeObjectForKey_((void *)qword_1EA3C92A0, v12, *(void *)(a1 + 32), v13, v14, v15);
      uint64_t v21 = objc_msgSend_powerLogModelNameForModelKey_(CHSingletonMLModel, v16, *(void *)(a1 + 32), v17, v18, v19);
      if (v21 != 0x7FFFFFFFFFFFFFFFLL) {
        objc_msgSend_logModelUnloaded_((void *)qword_1EA3C92A8, v20, v21, v22, v23, v24);
      }
    }
  }
}

void sub_1C4A48F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A48F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A49120(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4921C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A494B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_1C4A497DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A49A80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A49B94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A49BB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A49BC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A49BDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A49CC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A49D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A49EE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4A1D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4A1FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4A210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4A224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4A238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4A24C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4A3E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4A400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4A7A8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4A4A7CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4A7DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4A7F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4A804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4A910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4A92C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4AD4C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4A4AD78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4AD88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4AD9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4ADB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4ADC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4ADD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4AF4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4AF70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4B33C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4A4B360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4B370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4B384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4B398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4B4A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4B4C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4B73C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4B758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4B768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4B77C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4B854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4B86C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4BA84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4BA9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4BAB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4BB74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4BB88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4BD94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4BDB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4BDC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4BDD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4BEAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4BEC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4C100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4C11C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4C12C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4C140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4C218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4C230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4C46C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4C488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4C498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4C4AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4C584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4C59C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4C7D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4C7F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4C804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4C818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4C8F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4C908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4CB44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4CB60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4CB70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4CB84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4CC5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4CC74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4D058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A4D0F4(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v11 = objc_msgSend_ancestorIdentifier(v4, v6, v7, v8, v9, v10);
  if (v11 <= objc_msgSend_ancestorIdentifier(v5, v12, v13, v14, v15, v16))
  {
    uint64_t v23 = objc_msgSend_ancestorIdentifier(v4, v17, v18, v19, v20, v21);
    if (v23 >= objc_msgSend_ancestorIdentifier(v5, v24, v25, v26, v27, v28)) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = -1;
    }
  }
  else
  {
    uint64_t v22 = 1;
  }

  return v22;
}

void sub_1C4A4D178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A4DB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  objc_sync_exit(v14);
  _Unwind_Resume(a1);
}

void sub_1C4A4DBAC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4A4DBC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4A4DBD4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend__teardownXPCConnection(WeakRetained, v2, v3, v4, v5, v6);

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v7 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_1C492D000, v7, OS_LOG_TYPE_ERROR, "Remote connection to handwritingd for CHRemotePowerLogger was interrupted", v8, 2u);
  }
}

void sub_1C4A4DC7C()
{
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  id v0 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)dispatch_queue_t v1 = 0;
    _os_log_impl(&dword_1C492D000, v0, OS_LOG_TYPE_ERROR, "Remote connection to handwritingd for CHRemotePowerLogger was invalidated", v1, 2u);
  }
}

void sub_1C4A4DDCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1C4A4E058()
{
  uint64_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v0 = dispatch_queue_attr_make_with_qos_class(v3, QOS_CLASS_UTILITY, 0);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.corehandwriting.remotePowerLoggerQueue", v0);
  uint64_t v2 = (void *)qword_1EA3C92C0;
  qword_1EA3C92C0 = (uint64_t)v1;
}

void sub_1C4A4E0DC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  objc_msgSend_setupXPCConnectionIfNeeded(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  uint64_t v12 = objc_msgSend_connection(*(void **)(a1 + 32), v7, v8, v9, v10, v11);

  if (!v12)
  {
    if (qword_1EA3CA000 == -1)
    {
      uint64_t v18 = (id)qword_1EA3C9F90[0];
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
      {
LABEL_5:

        goto LABEL_6;
      }
    }
    else
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      uint64_t v18 = (id)qword_1EA3C9F90[0];
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_FAULT)) {
        goto LABEL_5;
      }
    }
    *(_WORD *)CGAffineTransform buf = 0;
    _os_log_impl(&dword_1C492D000, v18, OS_LOG_TYPE_FAULT, "XPC connection must be non-nil", buf, 2u);
    goto LABEL_5;
  }
LABEL_6:
  *(void *)CGAffineTransform buf = 0;
  uint64_t v45 = buf;
  uint64_t v46 = 0x3032000000;
  uint64_t v47 = sub_1C4A4E3A8;
  uint64_t v48 = sub_1C4A4E3B8;
  id v49 = 0;
  uint64_t v19 = objc_msgSend_connection(*(void **)(a1 + 32), v13, v14, v15, v16, v17);
  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 3221225472;
  v43[2] = sub_1C4A4E3C0;
  v43[3] = &unk_1E64E1C80;
  void v43[4] = buf;
  uint64_t v24 = objc_msgSend_remoteObjectProxyWithErrorHandler_(v19, v20, (uint64_t)v43, v21, v22, v23);

  objc_msgSend_handlePowerLoggingRequest_(v24, v25, *(void *)(a1 + 40), v26, v27, v28);
  if (qword_1EA3CA000 != -1)
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    objc_super v29 = (id)qword_1EA3C9F90[0];
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  objc_super v29 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
  {
LABEL_8:
    uint64_t v30 = objc_opt_class();
    objc_msgSend_description(v30, v31, v32, v33, v34, v35);
    id v36 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v42 = objc_msgSend_modelIdentifier(*(void **)(a1 + 40), v37, v38, v39, v40, v41);
    *(_DWORD *)uint64_t v50 = 138412546;
    id v51 = v36;
    __int16 v52 = 2048;
    uint64_t v53 = v42;
    _os_log_impl(&dword_1C492D000, v29, OS_LOG_TYPE_DEBUG, "CHPowerLog: remote power logging request sent for request type %@, model %lu", v50, 0x16u);
  }
LABEL_9:

  _Block_object_dispose(buf, 8);
}

void sub_1C4A4E374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A4E38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A4E3A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4A4E3B8(uint64_t a1)
{
}

void sub_1C4A4E3C0(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v4 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = objc_msgSend_description(v3, v5, v6, v7, v8, v9);
    int v13 = 138412290;
    uint64_t v14 = v10;
    _os_log_impl(&dword_1C492D000, v4, OS_LOG_TYPE_ERROR, "An XPC proxy service error occurred: %@", (uint8_t *)&v13, 0xCu);
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v3;
}

void CoreHandwriting::synthesis::getCosineScheduleTrainedBetas(CoreHandwriting::synthesis *this@<X0>, float **a2@<X8>)
{
  int v2 = (int)this;
  id v3 = a2;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t v6 = (int)this + 1;
  if (this != -1)
  {
    if ((int)this <= -2) {
      sub_1C494A220();
    }
    uint64_t v4 = (float *)operator new(4 * ((int)this + 1));
    uint64_t v5 = &v4[v6];
  }
  int v7 = 0;
  float v8 = (float)v2;
  float v9 = INFINITY;
  uint64_t v10 = v4;
  do
  {
    while (1)
    {
      float v12 = cos((float)((float)((float)v7 / v8) + 0.008) / 1.008 * 3.14159265 * 0.5);
      float v13 = v12 * v12;
      if (v9 == INFINITY) {
        float v9 = v13;
      }
      float v14 = v13 / v9;
      if (v4 >= v5) {
        break;
      }
      *v4++ = v14;
      BOOL v11 = v7++ == v6;
      if (v11) {
        goto LABEL_38;
      }
    }
    uint64_t v15 = v4 - v10;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 62) {
      sub_1C494A220();
    }
    if (((char *)v5 - (char *)v10) >> 1 > v16) {
      unint64_t v16 = ((char *)v5 - (char *)v10) >> 1;
    }
    if ((unint64_t)((char *)v5 - (char *)v10) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17)
    {
      if (v17 >> 62) {
        sub_1C4949AA8();
      }
      uint64_t v18 = operator new(4 * v17);
      uint64_t v19 = (float *)&v18[4 * v15];
      *uint64_t v19 = v14;
      uint64_t v20 = (uint64_t)(v19 + 1);
      int64_t v21 = (char *)v4 - (char *)v10;
      if (v4 == v10) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v18 = 0;
      uint64_t v19 = (float *)(4 * v15);
      *(float *)(4 * v15) = v14;
      uint64_t v20 = 4 * v15 + 4;
      int64_t v21 = (char *)v4 - (char *)v10;
      if (v4 == v10) {
        goto LABEL_23;
      }
    }
    unint64_t v22 = v21 - 4;
    if (v22 < 0xBC)
    {
      uint64_t v23 = v4;
      goto LABEL_22;
    }
    unint64_t v25 = ((char *)(v4 - 1) - (char *)v10) & 0xFFFFFFFFFFFFFFFCLL;
    if (&v18[(char *)v4 - (char *)v10 - 4 - v25] > &v18[(char *)v4 - (char *)v10 - 4])
    {
      uint64_t v23 = v4;
      do
      {
LABEL_22:
        int v24 = *((_DWORD *)v23-- - 1);
        *((_DWORD *)v19-- - 1) = v24;
      }
      while (v23 != v10);
      goto LABEL_23;
    }
    if ((float *)((char *)v4 - v25 - 4) > v4 - 1)
    {
      uint64_t v23 = v4;
      goto LABEL_22;
    }
    if ((unint64_t)((char *)v10 - v18) < 0x20)
    {
      uint64_t v23 = v4;
      goto LABEL_22;
    }
    uint64_t v26 = (v22 >> 2) + 1;
    uint64_t v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v23 = &v4[v27 / 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v19 = (float *)((char *)v19 - v27);
    uint64_t v28 = &v18[4 * v15 - 16];
    objc_super v29 = v4 - 4;
    uint64_t v30 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      *uint64_t v28 = v31;
      v28 -= 2;
      v29 -= 8;
      v30 -= 8;
    }
    while (v30);
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_22;
    }
LABEL_23:
    uint64_t v5 = (float *)&v18[4 * v17];
    if (v10) {
      operator delete(v10);
    }
    uint64_t v10 = v19;
    uint64_t v4 = (float *)v20;
    BOOL v11 = v7++ == v6;
  }
  while (!v11);
LABEL_38:
  if ((unint64_t)((char *)v4 - (char *)v10) >= 5)
  {
    uint64_t v32 = 0;
    unint64_t v33 = v4 - v10;
    if (v33 <= 2) {
      unint64_t v33 = 2;
    }
    uint64_t v34 = v3[1];
    uint64_t v35 = v3[2];
    unint64_t v36 = v33 - 2;
    uint64_t v37 = 1;
    unint64_t v62 = v33 - 2;
    while (1)
    {
      float v40 = v10[v32];
      double v41 = (float)(1.0 - (float)(v10[v37] / v40)) <= 0.999 ? (float)(1.0 - (float)(v10[v37] / v40)) : 0.999;
      if (v34 >= v35) {
        break;
      }
      float v38 = v41;
      float *v34 = v38;
      uint64_t v39 = (uint64_t)(v34 + 1);
LABEL_43:
      v3[1] = (float *)v39;
      ++v37;
      uint64_t v34 = (float *)v39;
      BOOL v11 = v32++ == v36;
      if (v11) {
        goto LABEL_73;
      }
    }
    uint64_t v42 = *v3;
    uint64_t v43 = (char *)v34 - (char *)*v3;
    uint64_t v44 = v43 >> 2;
    unint64_t v45 = (v43 >> 2) + 1;
    if (v45 >> 62) {
      sub_1C494A220();
    }
    if (((char *)v35 - (char *)v42) >> 1 > v45) {
      unint64_t v45 = ((char *)v35 - (char *)v42) >> 1;
    }
    if ((unint64_t)((char *)v35 - (char *)v42) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v46 = v45;
    }
    if (v46)
    {
      if (v46 >> 62) {
        sub_1C4949AA8();
      }
      uint64_t v47 = operator new(4 * v46);
      uint64_t v48 = (float *)&v47[4 * v44];
      float v49 = v41;
      *uint64_t v48 = v49;
      uint64_t v39 = (uint64_t)(v48 + 1);
      int64_t v50 = (char *)v34 - (char *)v42;
      if (v34 != v42)
      {
LABEL_57:
        unint64_t v51 = v50 - 4;
        if (v51 < 0xBC
          || (unint64_t v55 = ((char *)(v34 - 1) - (char *)v42) & 0xFFFFFFFFFFFFFFFCLL, &v47[v43 - 4 - v55] > &v47[v43 - 4])
          || (float *)((char *)v34 - v55 - 4) > v34 - 1
          || (unint64_t)((char *)v34 - v47 - v43) < 0x20)
        {
          __int16 v52 = v34;
          id v3 = a2;
        }
        else
        {
          uint64_t v56 = (v51 >> 2) + 1;
          uint64_t v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
          __int16 v52 = &v34[v57 / 0xFFFFFFFFFFFFFFFCLL];
          uint64_t v48 = (float *)((char *)v48 - v57);
          uint64_t v58 = &v47[4 * v44 - 16];
          uint64_t v59 = v34 - 4;
          uint64_t v60 = v56 & 0x7FFFFFFFFFFFFFF8;
          id v3 = a2;
          do
          {
            long long v61 = *(_OWORD *)v59;
            *(v58 - 1) = *((_OWORD *)v59 - 1);
            *uint64_t v58 = v61;
            v58 -= 2;
            v59 -= 8;
            v60 -= 8;
          }
          while (v60);
          if (v56 == (v56 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_60:
            uint64_t v35 = (float *)&v47[4 * v46];
            *id v3 = v48;
            v3[1] = (float *)v39;
            v3[2] = v35;
            if (v42) {
              goto LABEL_61;
            }
            goto LABEL_62;
          }
        }
        do
        {
          int v53 = *((_DWORD *)v52-- - 1);
          *((_DWORD *)v48-- - 1) = v53;
        }
        while (v52 != v42);
        goto LABEL_60;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v48 = (float *)(4 * v44);
      float v54 = v41;
      *(float *)(4 * v44) = v54;
      uint64_t v39 = 4 * v44 + 4;
      int64_t v50 = (char *)v34 - (char *)v42;
      if (v34 != v42) {
        goto LABEL_57;
      }
    }
    id v3 = a2;
    uint64_t v35 = (float *)&v47[4 * v46];
    *a2 = v48;
    a2[1] = (float *)v39;
    a2[2] = v35;
    if (v42) {
LABEL_61:
    }
      operator delete(v42);
LABEL_62:
    unint64_t v36 = v62;
    goto LABEL_43;
  }
LABEL_73:
  if (v10)
  {
    operator delete(v10);
  }
}

void sub_1C4A4F964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = *(void **)a11;
  if (*(void *)a11)
  {
    *(void *)(a11 + 8) = v15;
    operator delete(v15);
    unint64_t v16 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v16 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

uint64_t CoreHandwriting::synthesis::AbstractDiffusionScheduler::getNumInferenceTimesteps(CoreHandwriting::synthesis::AbstractDiffusionScheduler *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CoreHandwriting::synthesis::AbstractDiffusionScheduler::getTimesteps(CoreHandwriting::synthesis::AbstractDiffusionScheduler *this)
{
  return (uint64_t)this + 8;
}

uint64_t CoreHandwriting::synthesis::AbstractDiffusionScheduler::getClosestTimeStep(CoreHandwriting::synthesis::AbstractDiffusionScheduler *this, float a2)
{
  int v2 = (_DWORD *)*((void *)this + 1);
  id v3 = (_DWORD *)*((void *)this + 2);
  if (v2 != v3)
  {
    uint64_t result = 0;
    unsigned int v6 = llroundf((float)*((int *)this + 8) * a2);
    int v7 = 0x7FFFFFFF;
    while (1)
    {
      int v8 = *v2 - v6;
      if (v8 < 0) {
        int v8 = v6 - *v2;
      }
      if (v8 < v7)
      {
        uint64_t result = *v2;
        int v7 = v8;
      }
      else if (v8 > v7)
      {
        return result;
      }
      if (++v2 == v3) {
        return result;
      }
    }
  }
  return 0;
}

_DWORD *CoreHandwriting::synthesis::AbstractDiffusionScheduler::timeStepsBegin(CoreHandwriting::synthesis::AbstractDiffusionScheduler *this, float a2)
{
  int v3 = (*(uint64_t (**)(CoreHandwriting::synthesis::AbstractDiffusionScheduler *, float))(*(void *)this
                                                                                                  + 56))(this, a2);
  uint64_t result = (_DWORD *)*((void *)this + 1);
  uint64_t v5 = (_DWORD *)*((void *)this + 2);
  if (result != v5)
  {
    while (v3 < *result)
    {
      if (++result == v5) {
        return (_DWORD *)*((void *)this + 2);
      }
    }
  }
  return result;
}

uint64_t CoreHandwriting::synthesis::AbstractDiffusionScheduler::timeStepsEnd(CoreHandwriting::synthesis::AbstractDiffusionScheduler *this, float a2)
{
  return *((void *)this + 2);
}

uint64_t *CoreHandwriting::synthesis::DDIMScheduler::setTimesteps(uint64_t *this, int a2, int a3)
{
  uint64_t v3 = (uint64_t)this;
  *((_DWORD *)this + 8) = a3;
  *((_DWORD *)this + 9) = a2;
  float v13 = this + 1;
  if (a2 >= 1)
  {
    int v4 = a2;
    int v5 = 0;
    int v6 = a3 / a2;
    do
    {
      this = sub_1C499E02C((uint64_t *)&v13, v5);
      v5 += v6;
      --v4;
    }
    while (v4);
  }
  unint64_t v8 = *(void *)(v3 + 8);
  uint64_t v7 = *(void *)(v3 + 16);
  if (v8 != v7)
  {
    float v9 = (_DWORD *)(v7 - 4);
    if ((unint64_t)v9 > v8)
    {
      unint64_t v10 = v8 + 4;
      do
      {
        int v11 = *(_DWORD *)(v10 - 4);
        *(_DWORD *)(v10 - 4) = *v9;
        *v9-- = v11;
        BOOL v12 = v10 >= (unint64_t)v9;
        v10 += 4;
      }
      while (!v12);
    }
  }
  return this;
}

CoreHandwriting::synthesis::DDIMScheduler *CoreHandwriting::synthesis::DDIMScheduler::DDIMScheduler(void **this, CoreHandwriting::synthesis *a2, int a3)
{
  this[1] = 0;
  int v5 = this + 1;
  this[2] = 0;
  this[3] = 0;
  this[4] = (void *)0x1E000003E8;
  *this = &unk_1F2012290;
  *(_OWORD *)(this + 5) = 0u;
  int v6 = this + 5;
  *(_OWORD *)(this + 11) = 0u;
  float v38 = this + 11;
  uint64_t v37 = this + 8;
  *(_OWORD *)(this + 7) = 0u;
  *(_OWORD *)(this + 9) = 0u;
  this[13] = 0;
  *((_DWORD *)this + 28) = 1065353216;
  CoreHandwriting::synthesis::getCosineScheduleTrainedBetas(a2, &v49);
  float v40 = 0;
  double v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0x1E000003E8;
  uint64_t v39 = &unk_1F2012290;
  v44[0] = 0;
  v44[1] = 0;
  unint64_t v45 = 0;
  uint64_t v7 = v49;
  int64_t v8 = (char *)v50 - (char *)v49;
  if (v50 == v49)
  {
    float v9 = 0;
    unint64_t v10 = 0;
  }
  else
  {
    if (v8 < 0) {
      sub_1C494A220();
    }
    float v9 = (float *)operator new((char *)v50 - (char *)v49);
    v44[0] = v9;
    unint64_t v10 = &v9[v8 >> 2];
    unint64_t v45 = v10;
    memcpy(v9, v7, v8);
    v44[1] = v10;
  }
  memset(v47, 0, sizeof(v47));
  *(_OWORD *)long long __p = 0u;
  int v48 = 1065353216;
  HIDWORD(v43) = a3;
  uint64_t v11 = (char *)v10 - (char *)v9;
  if (v10 == v9)
  {
    BOOL v12 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    float v13 = 0;
  }
  else
  {
    if (v11 < 0) {
      sub_1C494A220();
    }
    __p[0] = operator new((char *)v10 - (char *)v9);
    __p[1] = __p[0];
    *(void *)&v47[0] = (char *)__p[0] + 4 * (v11 >> 2);
    v51[0] = (uint64_t)__p;
    do
      sub_1C4A52000(v51, 1.0 - *v9++);
    while (v9 != v10);
    float v13 = (float *)__p[0];
    BOOL v12 = (float *)__p[1];
    uint64_t v14 = *((void *)&v47[0] + 1);
    uint64_t v15 = *(void *)&v47[1];
  }
  unint64_t v16 = v12 - v13;
  unint64_t v17 = (v15 - v14) >> 2;
  if (v16 <= v17)
  {
    if (v16 < v17) {
      *(void *)&v47[1] = v14 + 4 * v16;
    }
  }
  else
  {
    sub_1C4A52184((uint64_t)v47 + 8, v16 - v17);
    float v13 = (float *)__p[0];
    BOOL v12 = (float *)__p[1];
  }
  if (v13 != v12)
  {
    uint64_t v18 = *((void *)&v47[0] + 1);
    float v20 = *v13;
    uint64_t v19 = v13 + 1;
    float v21 = v20;
    **((float **)&v47[0] + 1) = v20;
    if (v19 != v12)
    {
      unint64_t v22 = (float *)(v18 + 4);
      do
      {
        float v23 = *v19++;
        float v21 = v21 * v23;
        *v22++ = v21;
      }
      while (v19 != v12);
    }
  }
  LODWORD(v43) = ((unint64_t)((char *)v50 - (char *)v49) >> 2) - 1;
  HIDWORD(v43) = a3;
  v51[0] = (uint64_t)&v40;
  if (a3 >= 1)
  {
    int v24 = 0;
    int v25 = (int)(((unint64_t)((char *)v50 - (char *)v49) >> 2) - 1) / a3;
    do
    {
      sub_1C499E02C(v51, v24);
      v24 += v25;
      --a3;
    }
    while (a3);
  }
  uint64_t v26 = (char *)v40;
  uint64_t v27 = v41;
  uint64_t v28 = v41 - 4;
  if (v40 != v41 && v28 > v40)
  {
    uint64_t v30 = (char *)v40 + 4;
    do
    {
      int v31 = *((_DWORD *)v30 - 1);
      *((_DWORD *)v30 - 1) = *(_DWORD *)v28;
      *(_DWORD *)uint64_t v28 = v31;
      v28 -= 4;
      BOOL v32 = v30 >= v28;
      v30 += 4;
    }
    while (!v32);
  }
  if (&v39 != this) {
    sub_1C499DEE4(v5, v26, v27, (v27 - v26) >> 2);
  }
  this[4] = (void *)v43;
  unint64_t v33 = this[5];
  if (v33)
  {
    this[6] = v33;
    operator delete(v33);
    void *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
  }
  *(_OWORD *)(this + 5) = *(_OWORD *)v44;
  this[7] = v45;
  v44[1] = 0;
  unint64_t v45 = 0;
  v44[0] = 0;
  uint64_t v34 = this[8];
  if (v34)
  {
    this[9] = v34;
    operator delete(v34);
    void *v37 = 0;
    v37[1] = 0;
    v37[2] = 0;
  }
  *((_OWORD *)this + 4) = *(_OWORD *)__p;
  this[10] = *(void **)&v47[0];
  __p[1] = 0;
  *(void *)&v47[0] = 0;
  __p[0] = 0;
  uint64_t v35 = this[11];
  if (v35)
  {
    this[12] = v35;
    operator delete(v35);
    void *v38 = 0;
    v38[1] = 0;
    void v38[2] = 0;
    uint64_t v35 = __p[0];
  }
  *(_OWORD *)(this + 11) = *(_OWORD *)((char *)v47 + 8);
  this[13] = (void *)*((void *)&v47[1] + 1);
  memset((char *)v47 + 8, 0, 24);
  *((_DWORD *)this + 28) = v48;
  uint64_t v39 = &unk_1F2012290;
  if (v35)
  {
    __p[1] = v35;
    operator delete(v35);
  }
  if (v44[0])
  {
    v44[1] = v44[0];
    operator delete(v44[0]);
  }
  uint64_t v39 = &unk_1F20122F0;
  if (v40)
  {
    double v41 = (char *)v40;
    operator delete(v40);
  }
  if (v49)
  {
    int64_t v50 = v49;
    operator delete(v49);
  }
  return (CoreHandwriting::synthesis::DDIMScheduler *)this;
}

void sub_1C4A4FF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  sub_1C4A500CC(&a15);
  int v31 = *(void **)(v29 - 136);
  if (v31)
  {
    *(void *)(v29 - 128) = v31;
    operator delete(v31);
    BOOL v32 = *a12;
    if (!*a12)
    {
LABEL_3:
      unint64_t v33 = *a11;
      if (!*a11) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v32 = *a12;
    if (!*a12) {
      goto LABEL_3;
    }
  }
  v27[12] = v32;
  operator delete(v32);
  unint64_t v33 = *a11;
  if (!*a11)
  {
LABEL_4:
    uint64_t v34 = *v28;
    if (!*v28) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  v27[9] = v33;
  operator delete(v33);
  uint64_t v34 = *v28;
  if (!*v28)
  {
LABEL_5:
    *uint64_t v27 = a10;
    uint64_t v35 = (void *)v27[1];
    if (!v35) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  v27[6] = v34;
  operator delete(v34);
  *uint64_t v27 = a10;
  uint64_t v35 = (void *)v27[1];
  if (!v35) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_11:
  double v27[2] = v35;
  operator delete(v35);
  _Unwind_Resume(a1);
}

void *sub_1C4A500CC(void *a1)
{
  *a1 = &unk_1F2012290;
  int v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  *a1 = &unk_1F20122F0;
  int v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  return a1;
}

id sub_1C4A5016C(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = a4;
  if (objc_msgSend_dataType(v7, v8, v9, v10, v11, v12, v7) != 65568)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v18 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)CGAffineTransform buf = 0;
      _os_log_impl(&dword_1C492D000, v18, OS_LOG_TYPE_FAULT, "Only MLMultiArrayDataTypeFloat32 model outputs are supported.", buf, 2u);
    }
  }
  if (objc_msgSend_dataType(v7, v13, v14, v15, v16, v17) != 65568)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v19 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)CGAffineTransform buf = 0;
      _os_log_impl(&dword_1C492D000, v19, OS_LOG_TYPE_FAULT, "Only MLMultiArrayDataTypeFloat32 samples are supported.", buf, 2u);
    }
  }
  id v20 = *(id *)(*(void *)(a2 + 8) - 8);
  float v21 = v20;
  if (!v7 || !v20)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    unint64_t v22 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)CGAffineTransform buf = 0;
      _os_log_impl(&dword_1C492D000, v22, OS_LOG_TYPE_FAULT, "step() inputs cannot be nil!", buf, 2u);
    }
  }
  int v23 = *(_DWORD *)(a1 + 32) / *(_DWORD *)(a1 + 36);
  BOOL v24 = __OFSUB__(a3, v23);
  int v26 = a3 - v23;
  char v25 = (v26 < 0) ^ v24;
  uint64_t v27 = *(void *)(a1 + 88);
  float v28 = *(float *)(v27 + 4 * a3);
  uint64_t v29 = (float *)(v27 + 4 * v26);
  if (v25) {
    uint64_t v29 = (float *)(a1 + 112);
  }
  float v30 = *v29;
  id v31 = objc_alloc(MEMORY[0x1E4F1E9A8]);
  uint64_t v37 = objc_msgSend_shape(v21, v32, v33, v34, v35, v36);
  uint64_t v43 = objc_msgSend_dataType(v21, v38, v39, v40, v41, v42);
  unint64_t v46 = objc_msgSend_initWithShape_dataType_error_(v31, v44, (uint64_t)v37, v43, 0, v45);

  id v47 = v46;
  int v53 = (float *)objc_msgSend_dataPointer(v47, v48, v49, v50, v51, v52);
  id v54 = v7;
  uint64_t v60 = (const float *)objc_msgSend_dataPointer(v54, v55, v56, v57, v58, v59);
  id v61 = v21;
  uint64_t v67 = (const float *)objc_msgSend_dataPointer(v61, v62, v63, v64, v65, v66);
  *(_DWORD *)CGAffineTransform buf = sqrtf(1.0 - v28);
  vDSP_Length v73 = objc_msgSend_count(v61, v68, v69, v70, v71, v72);
  vDSP_vsmul(v67, 1, (const float *)buf, v53, 1, v73);
  vDSP_Length v79 = objc_msgSend_count(v61, v74, v75, v76, v77, v78);
  vDSP_vsub(v53, 1, v60, 1, v53, 1, v79);
  float __B = sqrtf(v28);
  vDSP_Length v85 = objc_msgSend_count(v61, v80, v81, v82, v83, v84);
  vDSP_vsdiv(v53, 1, &__B, v53, 1, v85);
  float v86 = sqrt(1.0 - v30);
  id v87 = v61;
  *(void *)CGAffineTransform buf = MEMORY[0x1E4F143A8];
  uint64_t v126 = 3221225472;
  BOOL v127 = sub_1C4A51C30;
  BOOL v128 = &unk_1E64E2CA8;
  *(float *)&id v130 = v86;
  id v88 = v87;
  id v129 = v88;
  objc_msgSend_getMutableBytesWithHandler_(v88, v89, (uint64_t)buf, v90, v91, v92);

  id v93 = v47;
  *(void *)CGAffineTransform buf = MEMORY[0x1E4F143A8];
  uint64_t v126 = 3221225472;
  BOOL v127 = sub_1C4A51C30;
  BOOL v128 = &unk_1E64E2CA8;
  LODWORD(v130) = sqrtf(v30);
  id v94 = v93;
  id v129 = v94;
  objc_msgSend_getMutableBytesWithHandler_(v94, v95, (uint64_t)buf, v96, v97, v98);

  id v99 = v94;
  id v100 = v88;
  id v101 = objc_alloc(MEMORY[0x1E4F1E9A8]);
  uint64_t v107 = objc_msgSend_shape(v99, v102, v103, v104, v105, v106);
  uint64_t v113 = objc_msgSend_dataType(v99, v108, v109, v110, v111, v112);
  uint64_t v116 = objc_msgSend_initWithShape_dataType_error_(v101, v114, (uint64_t)v107, v113, 0, v115);

  *(void *)CGAffineTransform buf = MEMORY[0x1E4F143A8];
  uint64_t v126 = 3221225472;
  BOOL v127 = sub_1C4A51C84;
  BOOL v128 = &unk_1E64E2D20;
  id v117 = v99;
  id v129 = v117;
  id v118 = v100;
  id v130 = v118;
  objc_msgSend_getMutableBytesWithHandler_(v116, v119, (uint64_t)buf, v120, v121, v122);

  return v116;
}

void sub_1C4A50650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C4A506D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1C4A506EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1C4A50704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1C4A50718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

float CoreHandwriting::synthesis::DDIMScheduler::getForwardCoefficients(CoreHandwriting::synthesis::DDIMScheduler *this, int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  uint64_t v4 = *((void *)this + 11);
  if (a2 >= (unint64_t)((*((void *)this + 12) - v4) >> 2))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    int v6 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      uint64_t v7 = (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 2;
      v9[0] = 67109376;
      v9[1] = a2;
      __int16 v10 = 2048;
      uint64_t v11 = v7;
      _os_log_impl(&dword_1C492D000, v6, OS_LOG_TYPE_FAULT, "Got timestep beyond available alpha coefficients: t=%i vs size=%lu", (uint8_t *)v9, 0x12u);
    }

    uint64_t v4 = *((void *)this + 11);
  }
  return sqrtf(*(float *)(v4 + 4 * v3));
}

void CoreHandwriting::synthesis::DPMSolverMultistepScheduler::setTimesteps(CoreHandwriting::synthesis::DPMSolverMultistepScheduler *this, int a2, int a3)
{
  *((_DWORD *)this + 47) = a3;
  *((_DWORD *)this + 48) = a2;
  uint64_t v60 = (uint64_t)this + 8;
  if (a2 >= 1)
  {
    int v4 = a2;
    int v5 = (a3 - 1) / (a2 + 1);
    int v6 = v5;
    do
    {
      sub_1C499E02C(&v60, v6);
      v6 += v5;
      --v4;
    }
    while (v4);
  }
  unint64_t v8 = *((void *)this + 1);
  uint64_t v7 = *((void *)this + 2);
  if (v8 != v7)
  {
    uint64_t v9 = (_DWORD *)(v7 - 4);
    if ((unint64_t)v9 > v8)
    {
      unint64_t v10 = v8 + 4;
      do
      {
        int v11 = *(_DWORD *)(v10 - 4);
        *(_DWORD *)(v10 - 4) = *v9;
        *v9-- = v11;
        BOOL v12 = v10 >= (unint64_t)v9;
        v10 += 4;
      }
      while (!v12);
    }
  }
  float v13 = (void *)*((void *)this + 11);
  *((void *)this + 12) = v13;
  uint64_t v15 = (float *)*((void *)this + 20);
  uint64_t v14 = (float *)*((void *)this + 21);
  size_t v16 = (char *)v14 - (char *)v15;
  unint64_t v17 = v14 - v15;
  if (v17 > (uint64_t)(*((void *)this + 13) - (void)v13) >> 2)
  {
    if ((v16 & 0x8000000000000000) != 0) {
      goto LABEL_60;
    }
    uint64_t v18 = (char *)operator new(v16);
    *((void *)this + 11) = v18;
    *((void *)this + 12) = v18;
    *((void *)this + 13) = &v18[4 * v17];
    if (v13)
    {
      operator delete(v13);
      uint64_t v15 = (float *)*((void *)this + 20);
      uint64_t v14 = (float *)*((void *)this + 21);
    }
  }
  uint64_t v60 = (uint64_t)this + 88;
  if (v15 == v14)
  {
    id v20 = v14;
  }
  else
  {
    do
    {
      float v19 = *v15++;
      sub_1C4A52000(&v60, sqrtf(v19));
    }
    while (v15 != v14);
    uint64_t v14 = (float *)*((void *)this + 20);
    id v20 = (float *)*((void *)this + 21);
  }
  float v21 = (void *)*((void *)this + 14);
  *((void *)this + 15) = v21;
  size_t v22 = (char *)v20 - (char *)v14;
  unint64_t v23 = v20 - v14;
  if (v23 > (uint64_t)(*((void *)this + 16) - (void)v21) >> 2)
  {
    if ((v22 & 0x8000000000000000) != 0) {
      goto LABEL_60;
    }
    BOOL v24 = (char *)operator new(v22);
    *((void *)this + 14) = v24;
    *((void *)this + 15) = v24;
    *((void *)this + 16) = &v24[4 * v23];
    if (v21)
    {
      operator delete(v21);
      uint64_t v14 = (float *)*((void *)this + 20);
      id v20 = (float *)*((void *)this + 21);
    }
  }
  uint64_t v60 = (uint64_t)this + 112;
  if (v14 == v20)
  {
    uint64_t v27 = v20;
  }
  else
  {
    do
    {
      float v25 = *v14++;
      float v26 = sqrt(1.0 - v25);
      sub_1C4A52000(&v60, v26);
    }
    while (v14 != v20);
    id v20 = (float *)*((void *)this + 20);
    uint64_t v27 = (float *)*((void *)this + 21);
  }
  float v28 = (void **)((char *)this + 136);
  uint64_t v29 = (void *)*((void *)this + 17);
  *((void *)this + 18) = v29;
  size_t v30 = (char *)v27 - (char *)v20;
  unint64_t v31 = v27 - v20;
  if (v31 <= (uint64_t)(*((void *)this + 19) - (void)v29) >> 2) {
    goto LABEL_29;
  }
  if ((v30 & 0x8000000000000000) != 0) {
LABEL_60:
  }
    sub_1C494A220();
  BOOL v32 = (char *)operator new(v30);
  *((void *)this + 17) = v32;
  *((void *)this + 18) = v32;
  *((void *)this + 19) = &v32[4 * v31];
  if (v29) {
    operator delete(v29);
  }
LABEL_29:
  uint64_t v33 = *((void *)this + 11);
  uint64_t v34 = *((void *)this + 12);
  if (v34 != v33)
  {
    unint64_t v35 = 0;
    uint64_t v36 = (float *)*((void *)this + 18);
    while (1)
    {
      float v38 = logf(*(float *)(v33 + 4 * v35));
      float v39 = v38 - logf(*(float *)(*((void *)this + 14) + 4 * v35));
      unint64_t v40 = *((void *)this + 19);
      if ((unint64_t)v36 >= v40) {
        break;
      }
      *uint64_t v36 = v39;
      uint64_t v37 = (uint64_t)(v36 + 1);
LABEL_32:
      *((void *)this + 18) = v37;
      ++v35;
      uint64_t v33 = *((void *)this + 11);
      uint64_t v36 = (float *)v37;
      if (v35 >= (v34 - v33) >> 2) {
        return;
      }
    }
    uint64_t v41 = (float *)*v28;
    uint64_t v42 = (char *)v36 - (unsigned char *)*v28;
    uint64_t v43 = v42 >> 2;
    unint64_t v44 = (v42 >> 2) + 1;
    if (v44 >> 62) {
      goto LABEL_60;
    }
    uint64_t v45 = v40 - (void)v41;
    if (v45 >> 1 > v44) {
      unint64_t v44 = v45 >> 1;
    }
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v46 = v44;
    }
    if (v46)
    {
      if (v46 >> 62) {
        sub_1C4949AA8();
      }
      id v47 = operator new(4 * v46);
      int v48 = (float *)&v47[4 * v43];
      *int v48 = v39;
      uint64_t v37 = (uint64_t)(v48 + 1);
      int64_t v49 = (char *)v36 - (char *)v41;
      if (v36 == v41) {
        goto LABEL_57;
      }
    }
    else
    {
      id v47 = 0;
      int v48 = (float *)(4 * v43);
      *(float *)(4 * v43) = v39;
      uint64_t v37 = 4 * v43 + 4;
      int64_t v49 = (char *)v36 - (char *)v41;
      if (v36 == v41) {
        goto LABEL_57;
      }
    }
    unint64_t v50 = v49 - 4;
    if (v50 >= 0xBC)
    {
      unint64_t v52 = ((char *)(v36 - 1) - (char *)v41) & 0xFFFFFFFFFFFFFFFCLL;
      if (&v47[v42 - 4 - v52] > &v47[v42 - 4])
      {
        uint64_t v51 = v36;
      }
      else if ((float *)((char *)v36 - v52 - 4) > v36 - 1)
      {
        uint64_t v51 = v36;
      }
      else if ((unint64_t)((char *)v36 - v47 - v42) >= 0x20)
      {
        uint64_t v53 = (v50 >> 2) + 1;
        uint64_t v54 = 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v51 = &v36[v54 / 0xFFFFFFFFFFFFFFFCLL];
        int v48 = (float *)((char *)v48 - v54);
        unint64_t v55 = &v47[4 * v43 - 16];
        uint64_t v56 = v36 - 4;
        uint64_t v57 = v53 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v58 = *(_OWORD *)v56;
          *(v55 - 1) = *((_OWORD *)v56 - 1);
          _OWORD *v55 = v58;
          v55 -= 2;
          v56 -= 8;
          v57 -= 8;
        }
        while (v57);
        if (v53 == (v53 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_57;
        }
      }
      else
      {
        uint64_t v51 = v36;
      }
    }
    else
    {
      uint64_t v51 = v36;
    }
    do
    {
      int v59 = *((_DWORD *)v51-- - 1);
      *((_DWORD *)v48-- - 1) = v59;
    }
    while (v51 != v41);
LABEL_57:
    *((void *)this + 17) = v48;
    *((void *)this + 18) = v37;
    *((void *)this + 19) = &v47[4 * v46];
    if (v41)
    {
      operator delete(v41);
      uint64_t v34 = *((void *)this + 12);
    }
    goto LABEL_32;
  }
}

CoreHandwriting::synthesis::DPMSolverMultistepScheduler *CoreHandwriting::synthesis::DPMSolverMultistepScheduler::DPMSolverMultistepScheduler(void **this, CoreHandwriting::synthesis *a2, int a3)
{
  this[1] = 0;
  int v5 = this + 1;
  this[2] = 0;
  this[3] = 0;
  this[4] = (void *)0x1E000003E8;
  *(_OWORD *)(this + 5) = 0u;
  BOOL v32 = this + 5;
  *(_OWORD *)(this + 11) = 0u;
  uint64_t v33 = this + 11;
  *this = &unk_1F2012350;
  *(_OWORD *)(this + 17) = 0u;
  unint64_t v35 = this + 17;
  *((_DWORD *)this + 46) = 1065353216;
  int v6 = (char *)(this + 23);
  unint64_t v31 = this + 8;
  *(_OWORD *)(this + 7) = 0u;
  uint64_t v34 = this + 14;
  uint64_t v36 = this + 20;
  *(_OWORD *)(this + 9) = 0u;
  *(_OWORD *)(this + 13) = 0u;
  *(_OWORD *)(this + 15) = 0u;
  *(_OWORD *)(this + 19) = 0u;
  *(_OWORD *)(this + 21) = 0u;
  *(void **)((char *)this + 188) = (void *)0x1E000003E8;
  CoreHandwriting::synthesis::getCosineScheduleTrainedBetas(a2, &v51);
  float v38 = 0;
  float v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0x1E000003E8;
  uint64_t v37 = &unk_1F2012350;
  long long v42 = 0uLL;
  uint64_t v43 = 0;
  uint64_t v7 = v51;
  int64_t v8 = (char *)v52 - (char *)v51;
  if (v52 == v51)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
  }
  else
  {
    if (v8 < 0) {
      sub_1C494A220();
    }
    uint64_t v9 = (float *)operator new((char *)v52 - (char *)v51);
    *(void *)&long long v42 = v9;
    unint64_t v10 = &v9[v8 >> 2];
    uint64_t v43 = v10;
    memcpy(v9, v7, v8);
    *((void *)&v42 + 1) = v10;
  }
  long long v47 = 0u;
  long long v45 = 0u;
  memset(v46, 0, sizeof(v46));
  memset(v44, 0, sizeof(v44));
  int v48 = 0;
  uint64_t v49 = 0x3E83F800000;
  int v50 = a3;
  uint64_t v11 = (char *)v10 - (char *)v9;
  if (v10 == v9)
  {
    BOOL v12 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    float v13 = 0;
  }
  else
  {
    if (v11 < 0) {
      sub_1C494A220();
    }
    *(void *)&v44[0] = operator new((char *)v10 - (char *)v9);
    *((void *)&v44[0] + 1) = *(void *)&v44[0];
    *(void *)&v44[1] = *(void *)&v44[0] + 4 * (v11 >> 2);
    uint64_t v53 = v44;
    do
      sub_1C4A52000((uint64_t *)&v53, 1.0 - *v9++);
    while (v9 != v10);
    BOOL v12 = (float *)*((void *)&v44[0] + 1);
    float v13 = *(float **)&v44[0];
    uint64_t v15 = *((void *)&v47 + 1);
    uint64_t v14 = v47;
  }
  unint64_t v16 = v12 - v13;
  unint64_t v17 = (v15 - v14) >> 2;
  if (v16 <= v17)
  {
    if (v16 < v17) {
      *((void *)&v47 + 1) = v14 + 4 * v16;
    }
  }
  else
  {
    sub_1C4A52184((uint64_t)&v47, v16 - v17);
    BOOL v12 = (float *)*((void *)&v44[0] + 1);
    float v13 = *(float **)&v44[0];
  }
  if (v13 != v12)
  {
    uint64_t v18 = v47;
    float v20 = *v13;
    float v19 = v13 + 1;
    float v21 = v20;
    *(float *)long long v47 = v20;
    if (v19 != v12)
    {
      size_t v22 = (float *)(v18 + 4);
      do
      {
        float v23 = *v19++;
        float v21 = v21 * v23;
        *v22++ = v21;
      }
      while (v19 != v12);
    }
  }
  CoreHandwriting::synthesis::DPMSolverMultistepScheduler::setTimesteps((CoreHandwriting::synthesis::DPMSolverMultistepScheduler *)&v37, a3, ((unint64_t)((char *)v52 - (char *)v51) >> 2) - 1);
  if (&v37 != this) {
    sub_1C499DEE4(v5, v38, v39, (v39 - v38) >> 2);
  }
  this[4] = (void *)v41;
  BOOL v24 = this[5];
  if (v24)
  {
    this[6] = v24;
    operator delete(v24);
    *BOOL v32 = 0;
    v32[1] = 0;
    _DWORD v32[2] = 0;
  }
  *(_OWORD *)(this + 5) = v42;
  this[7] = v43;
  uint64_t v43 = 0;
  long long v42 = 0uLL;
  float v25 = this[8];
  if (v25)
  {
    this[9] = v25;
    operator delete(v25);
    *unint64_t v31 = 0;
    v31[1] = 0;
    _WORD v31[2] = 0;
  }
  *((_OWORD *)this + 4) = v44[0];
  this[10] = *(void **)&v44[1];
  memset(v44, 0, 24);
  float v26 = this[11];
  if (v26)
  {
    this[12] = v26;
    operator delete(v26);
    *uint64_t v33 = 0;
    v33[1] = 0;
    v33[2] = 0;
  }
  *(_OWORD *)(this + 11) = *(_OWORD *)((char *)&v44[1] + 8);
  this[13] = (void *)*((void *)&v44[2] + 1);
  memset((char *)&v44[1] + 8, 0, 24);
  uint64_t v27 = this[14];
  if (v27)
  {
    this[15] = v27;
    operator delete(v27);
    void *v34 = 0;
    v34[1] = 0;
    v34[2] = 0;
  }
  *((_OWORD *)this + 7) = v45;
  this[16] = *(void **)&v46[0];
  *(void *)&v46[0] = 0;
  long long v45 = 0uLL;
  float v28 = this[17];
  if (v28)
  {
    this[18] = v28;
    operator delete(v28);
    *unint64_t v35 = 0;
    v35[1] = 0;
    v35[2] = 0;
  }
  *(_OWORD *)(this + 17) = *(_OWORD *)((char *)v46 + 8);
  this[19] = (void *)*((void *)&v46[1] + 1);
  memset((char *)v46 + 8, 0, 24);
  uint64_t v29 = this[20];
  if (v29)
  {
    this[21] = v29;
    operator delete(v29);
    *uint64_t v36 = 0;
    v36[1] = 0;
    v36[2] = 0;
  }
  *((_OWORD *)this + 10) = v47;
  this[22] = v48;
  int v48 = 0;
  long long v47 = 0uLL;
  *(void *)int v6 = v49;
  *((_DWORD *)v6 + 2) = v50;
  sub_1C4A51F34(&v37);
  if (v51)
  {
    unint64_t v52 = v51;
    operator delete(v51);
  }
  return (CoreHandwriting::synthesis::DPMSolverMultistepScheduler *)this;
}

void sub_1C4A510B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  sub_1C4A51F34(&a17);
  uint64_t v41 = *(void **)(v39 - 136);
  if (v41)
  {
    *(void *)(v39 - 128) = v41;
    operator delete(v41);
    long long v42 = *a16;
    if (!*a16)
    {
LABEL_3:
      uint64_t v43 = *a15;
      if (!*a15) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    long long v42 = *a16;
    if (!*a16) {
      goto LABEL_3;
    }
  }
  v38[21] = v42;
  operator delete(v42);
  uint64_t v43 = *a15;
  if (!*a15)
  {
LABEL_4:
    unint64_t v44 = *a14;
    if (!*a14) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  v38[18] = v43;
  operator delete(v43);
  unint64_t v44 = *a14;
  if (!*a14)
  {
LABEL_5:
    long long v45 = *a13;
    if (!*a13) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  v38[15] = v44;
  operator delete(v44);
  long long v45 = *a13;
  if (!*a13)
  {
LABEL_6:
    unint64_t v46 = *a11;
    if (!*a11) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  v38[12] = v45;
  operator delete(v45);
  unint64_t v46 = *a11;
  if (!*a11)
  {
LABEL_7:
    long long v47 = *a12;
    if (!*a12) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_15:
  v38[9] = v46;
  operator delete(v46);
  long long v47 = *a12;
  if (!*a12)
  {
LABEL_8:
    void *v38 = a10;
    int v48 = (void *)v38[1];
    if (!v48) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_16:
  v38[6] = v47;
  operator delete(v47);
  void *v38 = a10;
  int v48 = (void *)v38[1];
  if (!v48) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_17:
  void v38[2] = v48;
  operator delete(v48);
  _Unwind_Resume(a1);
}

id sub_1C4A512C0(void *a1, id **a2, int a3, void *a4)
{
  uint64_t v230 = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  int64_t v8 = (_DWORD *)a1[1];
  uint64_t v9 = (_DWORD *)a1[2];
  unint64_t v10 = v8;
  if (v8 != v9)
  {
    while (*v10 != a3)
    {
      if (++v10 == v9)
      {
        unint64_t v10 = (_DWORD *)a1[2];
        break;
      }
    }
  }
  unint64_t v11 = v10 - v8;
  if (v11 >= v9 - v8 - 1) {
    int v12 = 0;
  }
  else {
    int v12 = v8[v11 + 1];
  }
  uint64_t v13 = 4 * a3;
  float v14 = *(float *)(a1[11] + v13);
  float v15 = *(float *)(a1[14] + v13);
  id v16 = *(a2[1] - 1);
  uint64_t v22 = objc_msgSend_dataPointer(v16, v17, v18, v19, v20, v21);
  id v23 = v7;
  uint64_t v34 = objc_msgSend_dataPointer(v23, v24, v25, v26, v27, v28);
  unint64_t v35 = 0;
  uint64_t v36 = a3;
  double v37 = v14;
  double v38 = v15;
  while (v35 < objc_msgSend_count(*(a2[1] - 1), v29, v30, v31, v32, v33))
  {
    float v39 = (*(float *)(v34 + 4 * v35) - *(float *)(v22 + 4 * v35) * v38) / v37;
    *(float *)(v22 + 4 * v35++) = v39;
  }
  uint64_t v41 = a1[1];
  uint64_t v40 = a1[2];
  uint64_t v43 = *a2;
  long long v42 = a2[1];
  int v44 = (*(uint64_t (**)(void *))(*a1 + 72))(a1);
  BOOL v46 = v11 >= ((v40 - v41) >> 2) - 2 && (unint64_t)(v40 - v41) < 0x3C;
  if (v44 <= (unint64_t)(v42 - v43) && !v46)
  {
    uint64_t v104 = *(int *)(a1[1] + 4 * v11 - 4);
    id v227 = v23;
    uint64_t v106 = *a2;
    uint64_t v105 = a2[1];
    if ((*(int (**)(void *))(*a1 + 72))(a1) != v105 - v106)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v107 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v107, OS_LOG_TYPE_FAULT))
      {
        uint64_t v108 = a2[1] - *a2;
        *(_DWORD *)CGAffineTransform buf = 134217984;
        uint64_t v229 = v108;
        _os_log_impl(&dword_1C492D000, v107, OS_LOG_TYPE_FAULT, "Expected two model outputs, but got %lu", buf, 0xCu);
      }
    }
    uint64_t v109 = a1[17];
    uint64_t v110 = 4 * v12;
    float v111 = *(float *)(v109 + v110);
    float v112 = *(float *)(v109 + 4 * v36);
    float v113 = *(float *)(v109 + 4 * v104);
    float v114 = *(float *)(a1[11] + v110);
    uint64_t v115 = a1[14];
    float v116 = *(float *)(v115 + v110);
    float v117 = *(float *)(v115 + 4 * v36);
    id v118 = objc_alloc(MEMORY[0x1E4F1E9A8]);
    uint64_t v124 = objc_msgSend_shape((*a2)[1], v119, v120, v121, v122, v123);
    uint64_t v130 = objc_msgSend_dataType((*a2)[1], v125, v126, v127, v128, v129);
    uint64_t v133 = objc_msgSend_initWithShape_dataType_error_(v118, v131, (uint64_t)v124, v130, 0, v132);

    id v134 = v133;
    uint64_t v140 = objc_msgSend_dataPointer(v134, v135, v136, v137, v138, v139);
    id v141 = (*a2)[1];
    uint64_t v147 = objc_msgSend_dataPointer(v141, v142, v143, v144, v145, v146);
    id v148 = **a2;
    uint64_t v159 = objc_msgSend_dataPointer(v148, v149, v150, v151, v152, v153);
    unint64_t v160 = 0;
    double v161 = v111;
    double v162 = v112;
    double v163 = v114;
    double v164 = v116;
    double v165 = v161 - v162;
    double v166 = 1.0 / ((v162 - v113) / (v161 - v162));
    while (v160 < objc_msgSend_count((*a2)[1], v154, v155, v156, v157, v158))
    {
      float v167 = -v166 * *(float *)(v159 + 4 * v160) + *(float *)(v147 + 4 * v160) * v166;
      *(float *)(v140 + 4 * v160++) = v167;
    }
    id v168 = objc_alloc(MEMORY[0x1E4F1E9A8]);
    __n128 v174 = objc_msgSend_shape((*a2)[1], v169, v170, v171, v172, v173);
    uint64_t v180 = objc_msgSend_dataType((*a2)[1], v175, v176, v177, v178, v179);
    __n128 v183 = objc_msgSend_initWithShape_dataType_error_(v168, v181, (uint64_t)v174, v180, 0, v182);

    id v75 = v183;
    uint64_t v189 = objc_msgSend_dataPointer(v75, v184, v185, v186, v187, v188);
    id v190 = (*a2)[1];
    uint64_t v196 = objc_msgSend_dataPointer(v190, v191, v192, v193, v194, v195);
    id v197 = v134;
    uint64_t v203 = objc_msgSend_dataPointer(v197, v198, v199, v200, v201, v202);
    id v204 = v227;
    uint64_t v210 = objc_msgSend_dataPointer(v204, v205, v206, v207, v208, v209);
    double v211 = v164 / v117;
    unint64_t v212 = 0;
    double v213 = -(v163 * (exp(-v165) + -1.0));
    for (unint64_t i = objc_msgSend_count((*a2)[1], v214, v215, v216, v217, v218, 0.5);
          v212 < i;
          unint64_t i = objc_msgSend_count((*a2)[1], v220, v221, v222, v223, v224, v225))
    {
      double v225 = v213 * *(float *)(v196 + 4 * v212)
           + *(float *)(v210 + 4 * v212) * v211
           + *(float *)(v203 + 4 * v212) * (v213 * 0.5);
      *(float *)&double v225 = v225;
      *(_DWORD *)(v189 + 4 * v212++) = LODWORD(v225);
    }
  }
  else
  {
    id v48 = *(a2[1] - 1);
    id v49 = v23;
    uint64_t v50 = a1[17];
    double v51 = *(float *)(v50 + 4 * v36);
    uint64_t v52 = 4 * v12;
    double v53 = *(float *)(v50 + v52);
    float v54 = *(float *)(a1[11] + v52);
    uint64_t v55 = a1[14];
    float v56 = *(float *)(v55 + 4 * v36);
    float v57 = *(float *)(v55 + v52);
    double v58 = exp(v51 - v53);
    id v59 = objc_alloc(MEMORY[0x1E4F1E9A8]);
    uint64_t v65 = objc_msgSend_shape(v48, v60, v61, v62, v63, v64);
    uint64_t v71 = objc_msgSend_dataType(v48, v66, v67, v68, v69, v70);
    uint64_t v74 = objc_msgSend_initWithShape_dataType_error_(v59, v72, (uint64_t)v65, v71, 0, v73);

    id v75 = v74;
    uint64_t v81 = objc_msgSend_dataPointer(v75, v76, v77, v78, v79, v80);
    id v82 = v49;
    uint64_t v88 = objc_msgSend_dataPointer(v82, v83, v84, v85, v86, v87);
    id v89 = v48;
    uint64_t v100 = objc_msgSend_dataPointer(v89, v90, v91, v92, v93, v94);
    unint64_t v101 = 0;
    double v102 = -(v54 * (v58 + -1.0));
    while (v101 < objc_msgSend_count(v89, v95, v96, v97, v98, v99))
    {
      float v103 = v102 * *(float *)(v100 + 4 * v101) + v57 / v56 * *(float *)(v88 + 4 * v101);
      *(float *)(v81 + 4 * v101++) = v103;
    }
  }
  return v75;
}

void sub_1C4A5190C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

float CoreHandwriting::synthesis::DPMSolverMultistepScheduler::getForwardCoefficients(CoreHandwriting::synthesis::DPMSolverMultistepScheduler *this, int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  uint64_t v4 = *((void *)this + 20);
  if (a2 >= (unint64_t)((*((void *)this + 21) - v4) >> 2))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    int v6 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      uint64_t v7 = (uint64_t)(*((void *)this + 21) - *((void *)this + 20)) >> 2;
      v9[0] = 67109376;
      v9[1] = a2;
      __int16 v10 = 2048;
      uint64_t v11 = v7;
      _os_log_impl(&dword_1C492D000, v6, OS_LOG_TYPE_FAULT, "Got timestep beyond available alpha coefficients: t=%i vs size=%lu", (uint8_t *)v9, 0x12u);
    }

    uint64_t v4 = *((void *)this + 20);
  }
  return sqrtf(*(float *)(v4 + 4 * v3));
}

void sub_1C4A51B2C(void *a1)
{
  *a1 = &unk_1F2012290;
  int v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  *a1 = &unk_1F20122F0;
  int v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  JUMPOUT(0x1C8786460);
}

uint64_t sub_1C4A51BE8()
{
  return 1;
}

void sub_1C4A51BF0(void *a1)
{
  sub_1C4A51F34(a1);
  JUMPOUT(0x1C8786460);
}

uint64_t sub_1C4A51C28()
{
  return 2;
}

void sub_1C4A51C30(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  vDSP_Length v8 = objc_msgSend_count(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  vDSP_vsmul((const float *)a2, 1, (const float *)(a1 + 40), (float *)a2, 1, v8);
}

void sub_1C4A51C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = sub_1C4A51D54;
  v11[3] = &unk_1E64E2CF8;
  int v6 = *(void **)(a1 + 32);
  id v12 = *(id *)(a1 + 40);
  uint64_t v14 = a3;
  uint64_t v15 = a2;
  id v13 = *(id *)(a1 + 32);
  objc_msgSend_getBytesWithHandler_(v6, v7, (uint64_t)v11, v8, v9, v10);
}

void sub_1C4A51D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A51D54(void *a1, uint64_t a2, uint64_t a3)
{
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  _WORD v10[2] = sub_1C4A51E00;
  v10[3] = &unk_1E64E2CD0;
  uint64_t v4 = (void *)a1[4];
  uint64_t v3 = (void *)a1[5];
  uint64_t v12 = a1[6];
  uint64_t v13 = a3;
  uint64_t v5 = a1[7];
  uint64_t v14 = a2;
  uint64_t v15 = v5;
  id v11 = v3;
  objc_msgSend_getBytesWithHandler_(v4, v6, (uint64_t)v10, v7, v8, v9);
}

void sub_1C4A51DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A51E00(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8 != a3 || v8 != *(void *)(a1 + 48))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    id v11 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
    {
      uint64_t v12 = *(void *)(a1 + 40);
      uint64_t v13 = *(void *)(a1 + 48);
      int v17 = 134218496;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = v13;
      __int16 v21 = 2048;
      uint64_t v22 = a3;
      _os_log_impl(&dword_1C492D000, v11, OS_LOG_TYPE_FAULT, "Mismatched multiarray sizes: out=%ld lhs=%ld rhs=%ld", (uint8_t *)&v17, 0x20u);
    }
  }
  uint64_t v14 = *(const float **)(a1 + 56);
  uint64_t v15 = *(float **)(a1 + 64);
  vDSP_Length v16 = objc_msgSend_count(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  vDSP_vadd(v14, 1, (const float *)a2, 1, v15, 1, v16);
}

void *sub_1C4A51F34(void *a1)
{
  *a1 = &unk_1F2012350;
  int v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[17];
  if (v3)
  {
    a1[18] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[14];
  if (v4)
  {
    a1[15] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[11];
  if (v5)
  {
    a1[12] = v5;
    operator delete(v5);
  }
  int v6 = (void *)a1[8];
  if (v6)
  {
    a1[9] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[5];
  if (v7)
  {
    a1[6] = v7;
    operator delete(v7);
  }
  *a1 = &unk_1F20122F0;
  uint64_t v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t *sub_1C4A52000(uint64_t *a1, float a2)
{
  uint64_t v4 = *a1;
  int v6 = *(float **)(*a1 + 8);
  unint64_t v5 = *(void *)(*a1 + 16);
  uint64_t v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    float *v6 = a2;
    uint64_t v8 = (uint64_t)(v6 + 1);
    goto LABEL_22;
  }
  uint64_t v9 = *(float **)v4;
  uint64_t v10 = (uint64_t)v6 - *(void *)v4;
  uint64_t v11 = v10 >> 2;
  unint64_t v12 = (v10 >> 2) + 1;
  if (v12 >> 62) {
    sub_1C494A220();
  }
  uint64_t v13 = v5 - (void)v9;
  if (v13 >> 1 > v12) {
    unint64_t v12 = v13 >> 1;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v12;
  }
  if (v14)
  {
    if (v14 >> 62) {
      sub_1C4949AA8();
    }
    uint64_t v15 = operator new(4 * v14);
    vDSP_Length v16 = (float *)&v15[4 * v11];
    int v17 = &v15[4 * v14];
    *vDSP_Length v16 = a2;
    uint64_t v8 = (uint64_t)(v16 + 1);
    int64_t v18 = (char *)v6 - (char *)v9;
    if (v6 == v9) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  uint64_t v15 = 0;
  vDSP_Length v16 = (float *)(4 * v11);
  int v17 = 0;
  *(float *)(4 * v11) = a2;
  uint64_t v8 = 4 * v11 + 4;
  int64_t v18 = (char *)v6 - (char *)v9;
  if (v6 != v9)
  {
LABEL_14:
    unint64_t v19 = v18 - 4;
    if (v19 < 0x2C) {
      goto LABEL_27;
    }
    if ((unint64_t)((char *)v6 - v15 - v10) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v20 = (v19 >> 2) + 1;
    uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v7 = &v6[v21 / 0xFFFFFFFFFFFFFFFCLL];
    vDSP_Length v16 = (float *)((char *)v16 - v21);
    uint64_t v22 = &v15[4 * v11 - 16];
    uint64_t v23 = v6 - 4;
    uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *uint64_t v22 = v25;
      v22 -= 2;
      v23 -= 8;
      v24 -= 8;
    }
    while (v24);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_27:
      do
      {
        int v26 = *((_DWORD *)v7-- - 1);
        *((_DWORD *)v16-- - 1) = v26;
      }
      while (v7 != v9);
    }
  }
LABEL_20:
  *(void *)uint64_t v4 = v16;
  *(void *)(v4 + 8) = v8;
  *(void *)(v4 + 16) = v17;
  if (v9) {
    operator delete(v9);
  }
LABEL_22:
  *(void *)(v4 + 8) = v8;
  return a1;
}

void sub_1C4A52184(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      int v6 = &v5[4 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    uint64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 2;
    unint64_t v10 = (v8 >> 2) + a2;
    if (v10 >> 62) {
      sub_1C494A220();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 62) {
        sub_1C4949AA8();
      }
      uint64_t v13 = operator new(4 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    unint64_t v14 = &v13[4 * v9];
    size_t v15 = 4 * a2;
    vDSP_Length v16 = &v13[4 * v12];
    bzero(v14, v15);
    int v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 4;
      if (v18 < 0x2C) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 2) + 1;
      uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      int v6 = &v5[-v20];
      v14 -= v20;
      uint64_t v21 = &v13[4 * v9 - 16];
      uint64_t v22 = v5 - 16;
      uint64_t v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *uint64_t v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_31:
        do
        {
          int v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

uint64_t sub_1C4A52768(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v11 = objc_msgSend_ancestorIdentifier(v4, v6, v7, v8, v9, v10);
  if (v11 <= objc_msgSend_ancestorIdentifier(v5, v12, v13, v14, v15, v16))
  {
    uint64_t v23 = objc_msgSend_ancestorIdentifier(v4, v17, v18, v19, v20, v21);
    if (v23 >= objc_msgSend_ancestorIdentifier(v5, v24, v25, v26, v27, v28)) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = -1;
    }
  }
  else
  {
    uint64_t v22 = 1;
  }

  return v22;
}

void sub_1C4A527EC(uint64_t a1, CGFloat a2, CGFloat a3)
{
  IsEmptCGFloat y = CGPathIsEmpty(*(CGPathRef *)(a1 + 32));
  uint64_t v7 = *(CGPath **)(a1 + 32);
  if (IsEmpty)
  {
    CGPathMoveToPoint(v7, 0, a2, a3);
  }
  else
  {
    CGPathAddLineToPoint(v7, 0, a2, a3);
  }
}

void sub_1C4A53938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A53950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A53968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A53980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A53998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A539B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A539C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A539E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A539F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A53A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A53A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A53A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A53A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A53A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A53A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A53AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A53AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A53AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A53AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A53B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A53B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A53B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A53B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A53B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A53B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A53B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A53BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A53BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A53BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A53BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A53C0C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4A53C1C(uint64_t a1)
{
}

void sub_1C4A53C24(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  uint64_t v8 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  unint64_t v12 = (char *)v3;
  if (!v8)
  {
    uint64_t v9 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v3, v4, v5, v6, v7);
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    uint64_t v3 = v12;
    uint64_t v8 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  objc_msgSend_addObject_(v8, v3, (uint64_t)v3, v5, v6, v7);
}

void *sub_1C4A53CB8(void *a1, void *a2)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (a1)
  {
    v75.receiver = a1;
    v75.super_class = (Class)CHSearchQueryItem;
    a1 = objc_msgSendSuper2(&v75, sel_init);
    if (a1)
    {
      uint64_t v9 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v4, v5, v6, v7, v8);
      uint64_t v15 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v10, v11, v12, v13, v14);
      long long v71 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      id v70 = v3;
      id v16 = v3;
      uint64_t v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v17, (uint64_t)&v71, (uint64_t)v76, 16, v18);
      if (v19)
      {
        uint64_t v25 = v19;
        uint64_t v26 = *(void *)v72;
        do
        {
          for (uint64_t i = 0; i != v25; ++i)
          {
            if (*(void *)v72 != v26) {
              objc_enumerationMutation(v16);
            }
            uint64_t v28 = *(void **)(*((void *)&v71 + 1) + 8 * i);
            uint64_t v29 = objc_msgSend_strokeIdentifier(v28, v20, v21, v22, v23, v24);
            objc_msgSend_addObject_(v9, v30, (uint64_t)v29, v31, v32, v33);

            uint64_t v34 = (void *)MEMORY[0x1E4F29238];
            objc_msgSend_bounds(v28, v35, v36, v37, v38, v39);
            long long v45 = objc_msgSend_ch_valueWithCGRect_(v34, v40, v41, v42, v43, v44);
            double v51 = objc_msgSend_strokeIdentifier(v28, v46, v47, v48, v49, v50);
            objc_msgSend_setObject_forKeyedSubscript_(v15, v52, (uint64_t)v45, (uint64_t)v51, v53, v54);
          }
          uint64_t v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v20, (uint64_t)&v71, (uint64_t)v76, 16, v24);
        }
        while (v25);
      }

      uint64_t v60 = objc_msgSend_copy(v9, v55, v56, v57, v58, v59);
      uint64_t v61 = (void *)a1[2];
      a1[2] = v60;

      uint64_t v67 = objc_msgSend_copy(v15, v62, v63, v64, v65, v66);
      uint64_t v68 = (void *)a1[1];
      a1[1] = v67;

      id v3 = v70;
    }
  }

  return a1;
}

BOOL sub_1C4A53EBC(uint64_t a1, void *a2, uint64_t *a3, void *a4, uint64_t a5, void *a6, id *a7)
{
  uint64_t v194 = a7;
  uint64_t v195 = a1;
  uint64_t v204 = *MEMORY[0x1E4F143B8];
  id v11 = a2;
  id v12 = a4;
  id v13 = a6;
  long long v201 = *(_OWORD *)a3;
  uint64_t v193 = a3;
  uint64_t v202 = a3[2];
  uint64_t v18 = objc_msgSend_tokenAtLocation_(v11, v14, (uint64_t)&v201, v15, v16, v17);
  *(void *)&long long v201 = 0;
  *((void *)&v201 + 1) = &v201;
  uint64_t v202 = 0x2020000000;
  char v203 = 1;
  v198[0] = MEMORY[0x1E4F143A8];
  v198[1] = 3221225472;
  v198[2] = sub_1C4A54824;
  v198[3] = &unk_1E64E2D90;
  id v19 = v18;
  id v199 = v19;
  uint64_t v200 = &v201;
  objc_msgSend_enumerateRangesUsingBlock_(v13, v20, (uint64_t)v198, v21, v22, v23);
  int v29 = *(unsigned __int8 *)(*((void *)&v201 + 1) + 24);
  id v192 = v19;
  if (v29)
  {
    uint64_t v30 = *v193;
    uint64_t v31 = v193[2];
    id v32 = v19;
    id v33 = v11;
    id v39 = v12;
    if (v30 > 0 || v31 >= 1)
    {
      uint64_t v40 = objc_msgSend_precedingSeparatorForToken_(v33, v34, (uint64_t)v32, v36, v37, v38);
      uint64_t v41 = objc_msgSend_length(v40, v47, v48, v49, v50, v51);
    }
    else
    {
      uint64_t v40 = 0;
      uint64_t v41 = objc_msgSend_length(0, v34, v35, v36, v37, v38);
    }
    if (v41)
    {
      uint64_t v52 = objc_msgSend_length(v40, v42, v43, v44, v45, v46);
      if (objc_msgSend_length(v39, v53, v54, v55, v56, v57) >= (unint64_t)(v52 + a5))
      {
        BOOL v66 = objc_msgSend_rangeOfString_options_range_(v39, v58, (uint64_t)v40, 0, a5, v52) == a5
           && v61 == (const char *)v52;
        int v60 = v66;
        if (v66) {
          uint64_t v59 = objc_msgSend_length(v40, v61, v62, v63, v64, v65);
        }
        else {
          uint64_t v59 = 0;
        }
        if (!a5) {
          int v60 = 1;
        }
      }
      else
      {
        uint64_t v59 = 0;
        int v60 = 0;
      }
    }
    else
    {
      uint64_t v59 = 0;
      int v60 = 1;
    }

    *(unsigned char *)(*((void *)&v201 + 1) + 24) = v60;
    a5 += v59;
    if (v60)
    {
      id v191 = v32;
      id v72 = v39;
      if (a5 <= 0)
      {
        uint64_t v74 = v195;
        BOOL v73 = *(unsigned char *)(v195 + 73) != 0;
      }
      else
      {
        BOOL v73 = 1;
        uint64_t v74 = v195;
      }
      int v76 = *(unsigned __int8 *)(v74 + 72);
      uint64_t v77 = 256;
      if (!*(unsigned char *)(v74 + 72)) {
        uint64_t v77 = 257;
      }
      uint64_t v188 = v77;
      uint64_t v78 = objc_msgSend_string(v191, v67, v68, v69, v70, v71);
      uint64_t v189 = (uint64_t *)objc_msgSend_length(v78, v79, v80, v81, v82, v83);
      if (objc_msgSend_length(v72, v84, v85, v86, v87, v88) == a5)
      {
        unint64_t v94 = 0;
        id v190 = v72;
        if (v189)
        {
LABEL_30:
          if (v76)
          {
            char isTopOriginal = objc_msgSend_isTopOriginal(v191, v89, v90, v91, v92, v93);
            if (v94) {
              char v96 = isTopOriginal;
            }
            else {
              char v96 = 0;
            }
            if ((v96 & 1) == 0) {
              goto LABEL_35;
            }
          }
          else if (!v94)
          {
LABEL_35:
            uint64_t v97 = v78;
LABEL_36:
            int v75 = 0;
            unint64_t v98 = 0;
LABEL_73:

            a5 += v98;
            goto LABEL_74;
          }
          if (v73)
          {
            if ((unint64_t)v189 >= v94)
            {
              uint64_t v123 = objc_msgSend_substringFromIndex_(v72, v89, a5, v91, v92, (uint64_t)v189);
              uint64_t v99 = objc_msgSend_rangeOfString_options_range_(v78, v124, (uint64_t)v123, v188, 0, v94);
              unint64_t v101 = v125;

              uint64_t v102 = 0;
            }
            else
            {
              uint64_t v99 = objc_msgSend_rangeOfString_options_range_(v72, v89, (uint64_t)v78, v188, a5, (uint64_t)v189);
              unint64_t v101 = v100;
              uint64_t v102 = a5;
              unint64_t v94 = (unint64_t)v189;
            }
            BOOL v126 = v99 == v102;
            BOOL v127 = v101 == v94;
            char v110 = v126 && v127;
            if (v126 && v127) {
              unint64_t v94 = v101;
            }
            else {
              unint64_t v94 = 0;
            }
          }
          else if ((unint64_t)v189 >= v94 {
                 && ((objc_msgSend_substringFromIndex_(v190, v89, a5, v91, v92, v93),
          }
                      float v103 = objc_claimAutoreleasedReturnValue(),
                      objc_msgSend_rangeOfString_options_(v78, v104, (uint64_t)v103, v188, v105, v106) != 0x7FFFFFFFFFFFFFFFLL)
                   ? (BOOL v108 = v107 == v94)
                   : (BOOL v108 = 0),
                     !v108 ? (char v109 = 0) : (char v109 = 1),
                     v103,
                     (v109 & 1) != 0))
          {
            char v110 = 1;
          }
          else
          {
            float v111 = v190;
            float v113 = objc_msgSend_substringWithRange_(v190, v89, a5, 1, v92, v93);
            if ((unint64_t)v189 >= v94) {
              uint64_t v114 = objc_msgSend_rangeOfString_options_range_(v78, v112, (uint64_t)v113, v188, (uint64_t)v189 - v94, v94);
            }
            else {
              uint64_t v114 = objc_msgSend_rangeOfString_options_range_(v78, v112, (uint64_t)v113, v188, 0, (uint64_t)v189);
            }
            uint64_t v118 = v114;
            id v187 = v113;
            unint64_t v94 = 0;
            char v110 = 0;
            if (v114 != 0x7FFFFFFFFFFFFFFFLL)
            {
              uint64_t v119 = (uint64_t)v189 - v114;
              if (v189 != (uint64_t *)v114)
              {
                while (1)
                {
                  uint64_t v120 = objc_msgSend_substringWithRange_(v78, v115, v118, v119, v116, v117);
                  if (objc_msgSend_rangeOfString_options_range_(v111, v121, (uint64_t)v120, v188, a5, v119) == a5
                    && v119 == v122)
                  {
                    break;
                  }

                  ++v118;
                  --v119;
                  float v111 = v190;
                  if (!v119)
                  {
                    char v110 = 0;
                    unint64_t v94 = 0;
                    goto LABEL_66;
                  }
                }

                char v110 = 1;
                unint64_t v94 = v119;
              }
            }
LABEL_66:
          }
          uint64_t v97 = v78;
          if (*(unsigned char *)(v195 + 73))
          {
            unint64_t v98 = 0;
            int v75 = 0;
            if (!v110 || (uint64_t *)v94 != v189) {
              goto LABEL_73;
            }
          }
          else if (!v110)
          {
            goto LABEL_36;
          }
LABEL_72:
          int v75 = 1;
          unint64_t v98 = v94;
          goto LABEL_73;
        }
      }
      else
      {
        unint64_t v94 = objc_msgSend_length(v72, v89, v90, v91, v92, v93) - a5;
        id v190 = v72;
        if (v189) {
          goto LABEL_30;
        }
      }
      uint64_t v97 = v78;
      unint64_t v94 = 0;
      goto LABEL_72;
    }
  }
  int v75 = 0;
LABEL_74:
  uint64_t v128 = objc_msgSend_length(v12, v24, v25, v26, v27, v28);
  id v134 = v194;
  BOOL v135 = a5 == v128;
  if (a5 != v128 && ((v75 ^ 1) & 1) == 0)
  {
    uint64_t v136 = objc_msgSend_tokenColumnCount(v11, v129, v130, v131, v132, v133);
    uint64_t v137 = *v193;
    uint64_t v146 = objc_msgSend_tokenRowsAtColumnIndex_(v11, v138, *v193, v139, v140, v141);
    int64_t v147 = v137 + 1;
    if (v147 >= v136)
    {
      id v148 = 0;
    }
    else
    {
      id v148 = objc_msgSend_tokenRowsAtColumnIndex_(v11, v142, v147, v143, v144, v145);
    }
    uint64_t v149 = v193[2];
    uint64_t v150 = objc_msgSend_objectAtIndexedSubscript_(v146, v142, v193[1], v143, v144, v145);
    LODWORD(v149) = v149 == objc_msgSend_count(v150, v151, v152, v153, v154, v155) - 1;

    id v191 = v148;
    if (!v149)
    {
      LODWORD(v190) = v75;
      id v168 = v146;
      uint64_t v189 = &v186;
      MEMORY[0x1F4188790](v156);
      double v165 = (double *)&v184;
      float v167 = v194;
      uint64_t v169 = v193[2] + 1;
      long long v184 = *(_OWORD *)v193;
      uint64_t v185 = v169;
      unint64_t v163 = 1;
      goto LABEL_91;
    }
    uint64_t v162 = objc_msgSend_count(v148, v157, v158, v159, v160, v161);
    unint64_t v163 = v162;
    if (v162 < 1)
    {
      BOOL v135 = 0;
LABEL_95:

      id v134 = v194;
      goto LABEL_96;
    }
    uint64_t v189 = &v186;
    MEMORY[0x1F4188790](v162);
    double v165 = (double *)((char *)&v186 - ((v164 + 15) & 0xFFFFFFFFFFFFFFF0));
    LODWORD(v190) = v75;
    if (v163 >= 4)
    {
      int64x2_t v170 = vdupq_n_s64(v147);
      unint64_t v166 = v163 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v171 = (int64x2_t)xmmword_1C4C39B30;
      int64x2_t v172 = vdupq_n_s64(2uLL);
      long long v173 = 0uLL;
      int64x2_t v174 = vdupq_n_s64(4uLL);
      unint64_t v175 = v163 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v176 = v165;
      float v167 = v194;
      do
      {
        int64x2_t v177 = v171;
        uint64_t v178 = v176 + 12;
        vst3q_f64(v176, *(float64x2x3_t *)v170.i8);
        uint64_t v179 = v176 + 6;
        v205.val[1] = (float64x2_t)vaddq_s64(v171, v172);
        v205.val[0] = (float64x2_t)v170;
        v205.val[2] = 0uLL;
        vst3q_f64(v179, v205);
        int64x2_t v171 = vaddq_s64(v171, v174);
        uint64_t v176 = v178;
        v175 -= 4;
      }
      while (v175);
      if (v163 == v166) {
        goto LABEL_90;
      }
    }
    else
    {
      unint64_t v166 = 0;
      float v167 = v194;
    }
    uint64_t v180 = (char *)&v165[3 * v166 + 2];
    do
    {
      *((void *)v180 - 2) = v147;
      *((void *)v180 - 1) = v166;
      *(void *)uint64_t v180 = 0;
      v180 += 24;
      ++v166;
    }
    while (v163 != v166);
LABEL_90:
    id v168 = v146;
LABEL_91:
    uint64_t v181 = 0;
    BOOL v135 = 1;
    do
    {
      long long v196 = *(_OWORD *)v165;
      uint64_t v197 = *((void *)v165 + 2);
      if (sub_1C4A53EBC(v195, v11, &v196, v12, a5, v13, v167)) {
        break;
      }
      BOOL v135 = ++v181 < (uint64_t)v163;
      v165 += 3;
    }
    while (v163 != v181);
    uint64_t v146 = v168;
    int v75 = (int)v190;
    goto LABEL_95;
  }
LABEL_96:
  if ((v75 & v135 & (v134 != 0)) == 1)
  {
    id v182 = *v134;
    if (!*v134)
    {
      objc_msgSend_array(MEMORY[0x1E4F1CA48], v129, v130, v131, v132, v133);
      id v182 = (id)objc_claimAutoreleasedReturnValue();
      *uint64_t v194 = v182;
    }
    objc_msgSend_addObject_(v182, v129, (uint64_t)v192, v131, v132, v133);
  }

  _Block_object_dispose(&v201, 8);
  return v135;
}

void sub_1C4A54718(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1C4A54730(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1C4A54748(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1C4A54760(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1C4A54778(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1C4A54790(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1C4A547A8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1C4A547C0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1C4A547D8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1C4A547F0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1C4A54808(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1C4A54824(uint64_t a1, const char *a2, uint64_t a3, unsigned char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a3;
  uint64_t v10 = objc_msgSend_strokeIndexes(*(void **)(a1 + 32), a2, a3, (uint64_t)a4, a5, a6);
  LODWORD(v7) = objc_msgSend_intersectsIndexesInRange_(v10, v11, (uint64_t)a2, v7, v12, v13);

  if (v7)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
  }
}

uint64_t sub_1C4A54950(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t result = *(void *)(*(void *)(a1 + 32) + 88);
  if (result != v7)
  {
    uint64_t result = objc_msgSend_isEqualToString_((void *)result, a2, v7, a4, a5, a6);
    if ((result & 1) == 0)
    {
      uint64_t v14 = objc_msgSend_copy(*(void **)(a1 + 40), v9, v10, v11, v12, v13);
      uint64_t v15 = *(void *)(a1 + 32);
      uint64_t v16 = *(void **)(v15 + 88);
      *(void *)(v15 + 88) = v14;

      uint64_t v22 = *(void **)(a1 + 32);
      return objc_msgSend_q_setNeedsQueryResultUpdating(v22, v17, v18, v19, v20, v21);
    }
  }
  return result;
}

void sub_1C4A54ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A54AE4(uint64_t a1)
{
}

void sub_1C4A54C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A54C1C(uint64_t a1)
{
}

id sub_1C4A55454(id a1, void *a2, void *a3, void *a4, void *a5, char a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  if (a1)
  {
    v44.receiver = a1;
    v44.super_class = (Class)CHRemoteInventoryRequest;
    a1 = objc_msgSendSuper2(&v44, sel_init);
    if (a1)
    {
      uint64_t v20 = objc_msgSend_copy(v11, v15, v16, v17, v18, v19);
      uint64_t v21 = (void *)*((void *)a1 + 3);
      *((void *)a1 + 3) = v20;

      uint64_t v27 = objc_msgSend_copy(v12, v22, v23, v24, v25, v26);
      uint64_t v28 = (void *)*((void *)a1 + 2);
      *((void *)a1 + 2) = v27;

      uint64_t v34 = objc_msgSend_copy(v13, v29, v30, v31, v32, v33);
      uint64_t v35 = (void *)*((void *)a1 + 4);
      *((void *)a1 + 4) = v34;

      uint64_t v41 = objc_msgSend_copy(v14, v36, v37, v38, v39, v40);
      uint64_t v42 = (void *)*((void *)a1 + 5);
      *((void *)a1 + 5) = v41;

      *((unsigned char *)a1 + 8) = a6;
    }
  }

  return a1;
}

id sub_1C4A56074(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_textResult(a2, (const char *)a2, a3, a4, a5, a6);
  id v12 = objc_msgSend_refinableTranscription(v6, v7, v8, v9, v10, v11);

  return v12;
}

void CoreHandwriting::drawingToInk(CoreHandwriting *this@<X0>, CHDrawing *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = this;
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  long long v7 = *(_OWORD *)&a2->super.isa;
  *((_OWORD *)a3 + 2) = 0u;
  *((_OWORD *)a3 + 3) = v7;
  a3[8] = 0;
  *((unsigned char *)a3 + 72) = 0;
  v69[0] = &unk_1F2012890;
  uint64_t v70 = v69;
  unint64_t v64 = 0;
  uint64_t v62 = v6;
  long long v63 = 0uLL;
  unint64_t v13 = objc_msgSend_strokeCount(v62, v8, v9, v10, v11, v12);
  sub_1C4A3401C((uint64_t)&v63, v13);
  for (unint64_t i = 0; objc_msgSend_strokeCount(v62, v14, v15, v16, v17, v18) > i; ++i)
  {
    unint64_t v24 = objc_msgSend_pointCountForStrokeIndex_(v62, v20, i, v21, v22, v23);
    if (v24)
    {
      __p[0] = 0;
      __p[1] = 0;
      *(void *)&long long v66 = 0;
      uint64_t v25 = *((void *)&v63 + 1);
      if (*((void *)&v63 + 1) >= v64)
      {
        uint64_t v26 = sub_1C4A397D8((char **)&v63, (uint64_t)__p);
        *((void *)&v63 + 1) = v26;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
          uint64_t v26 = (char *)*((void *)&v63 + 1);
        }
      }
      else
      {
        **((void **)&v63 + 1) = 0;
        *(void *)(v25 + 8) = 0;
        *(void *)(v25 + 16) = 0;
        *(_OWORD *)uint64_t v25 = *(_OWORD *)__p;
        *(void *)(v25 + 16) = v66;
        uint64_t v26 = (char *)(v25 + 24);
        *((void *)&v63 + 1) = v25 + 24;
      }
      uint64_t v27 = (unsigned char *)*((void *)v26 - 3);
      if (v24 > (uint64_t)(*((void *)v26 - 1) - (void)v27) >> 5)
      {
        if (v24 >> 59) {
          sub_1C4A38810();
        }
        uint64_t v28 = (unsigned char *)*((void *)v26 - 2);
        int v29 = (char *)operator new(32 * v24);
        uint64_t v30 = &v29[v28 - v27];
        uint64_t v31 = v30;
        if (v28 != v27)
        {
          uint64_t v32 = &v29[v28 - v27];
          do
          {
            long long v33 = *((_OWORD *)v28 - 2);
            uint64_t v31 = v32 - 32;
            *(_OWORD *)(v32 - 23) = *(_OWORD *)(v28 - 23);
            *((_OWORD *)v32 - 2) = v33;
            v28 -= 32;
            v32 -= 32;
          }
          while (v28 != v27);
        }
        *((void *)v26 - 3) = v31;
        *((void *)v26 - 2) = v30;
        *((void *)v26 - 1) = &v29[32 * v24];
        if (v27) {
          operator delete(v27);
        }
      }
      uint64_t v34 = 0;
      if (v24 <= 1) {
        uint64_t v35 = 1;
      }
      else {
        uint64_t v35 = v24;
      }
LABEL_19:
      objc_msgSend_pointForStrokeIndex_pointIndex_(v62, v14, i, v34, v17, v18);
      double v67 = v36;
      double v68 = v37;
      uint64_t v38 = *((void *)&v63 + 1);
      uint64_t v39 = (void *)(*((void *)&v63 + 1) - 24);
      uint64_t v40 = *(void *)(*((void *)&v63 + 1) - 16);
      if (v40 != *(void *)(*((void *)&v63 + 1) - 24)
        && *(double *)(v40 - 32) == v36
        && *(double *)(v40 - 24) == v37)
      {
        goto LABEL_37;
      }
      if (!v70) {
        sub_1C4A569C8();
      }
      (*(void (**)(void **__return_ptr))(*v70 + 48))(__p);
      uint64_t v42 = *(_OWORD **)(v38 - 16);
      unint64_t v41 = *(void *)(v38 - 8);
      if ((unint64_t)v42 < v41)
      {
        long long v43 = v66;
        *uint64_t v42 = *(_OWORD *)__p;
        v42[1] = v43;
        objc_super v44 = v42 + 2;
        goto LABEL_36;
      }
      uint64_t v45 = (_OWORD *)*v39;
      uint64_t v46 = ((uint64_t)v42 - *v39) >> 5;
      unint64_t v47 = v46 + 1;
      if ((unint64_t)(v46 + 1) >> 59) {
        sub_1C4A38810();
      }
      uint64_t v48 = v41 - (void)v45;
      if (v48 >> 4 > v47) {
        unint64_t v47 = v48 >> 4;
      }
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v49 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v49 = v47;
      }
      if (v49)
      {
        if (v49 >> 59) {
          sub_1C4949AA8();
        }
        uint64_t v50 = (char *)operator new(32 * v49);
        long long v51 = v66;
        uint64_t v52 = &v50[32 * v46];
        *(_OWORD *)uint64_t v52 = *(_OWORD *)__p;
        *((_OWORD *)v52 + 1) = v51;
        uint64_t v53 = (uint64_t)v52;
        if (v42 == v45)
        {
LABEL_34:
          objc_super v44 = v52 + 32;
          *(void *)(v38 - 24) = v53;
          *(void *)(v38 - 16) = v52 + 32;
          *(void *)(v38 - 8) = &v50[32 * v49];
          if (v42) {
            goto LABEL_35;
          }
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v50 = 0;
        long long v54 = v66;
        uint64_t v52 = (char *)(32 * v46);
        *(_OWORD *)uint64_t v52 = *(_OWORD *)__p;
        *((_OWORD *)v52 + 1) = v54;
        uint64_t v53 = 32 * v46;
        if (v42 == v45) {
          goto LABEL_34;
        }
      }
      do
      {
        long long v55 = *(v42 - 2);
        *(_OWORD *)(v53 - 23) = *(_OWORD *)((char *)v42 - 23);
        *(_OWORD *)(v53 - 32) = v55;
        v53 -= 32;
        v42 -= 2;
      }
      while (v42 != v45);
      uint64_t v42 = (_OWORD *)*v39;
      objc_super v44 = v52 + 32;
      *(void *)(v38 - 24) = v53;
      *(void *)(v38 - 16) = v52 + 32;
      *(void *)(v38 - 8) = &v50[32 * v49];
      if (v42) {
LABEL_35:
      }
        operator delete(v42);
LABEL_36:
      *(void *)(v38 - 16) = v44;
LABEL_37:
      if (++v34 == v35) {
        continue;
      }
      goto LABEL_19;
    }
  }

  uint64_t v56 = *a3;
  if (*a3)
  {
    uint64_t v57 = a3[1];
    uint64_t v58 = (void *)*a3;
    if (v57 != v56)
    {
      uint64_t v59 = a3[1];
      do
      {
        uint64_t v61 = *(void **)(v59 - 24);
        v59 -= 24;
        int v60 = v61;
        if (v61)
        {
          *(void *)(v57 - 16) = v60;
          operator delete(v60);
        }
        uint64_t v57 = v59;
      }
      while (v59 != v56);
      uint64_t v58 = (void *)*a3;
    }
    a3[1] = v56;
    operator delete(v58);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  *(_OWORD *)a3 = v63;
  a3[2] = v64;
  unint64_t v64 = 0;
  long long v63 = 0uLL;
  if (v70 == v69)
  {
    (*(void (**)(void *))(v69[0] + 32))(v69);
  }
  else if (v70)
  {
    (*(void (**)(void))(*v70 + 40))();
  }
  sub_1C49B90FC((uint64_t)(a3 + 3), 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3), 0);
}

void sub_1C4A565D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_1C4A375C0(v22);

  _Unwind_Resume(a1);
}

void *sub_1C4A56648(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void CoreHandwriting::drawingToInk(CoreHandwriting *this@<X0>, uint64_t *a2@<X8>)
{
}

id CoreHandwriting::inkToDrawing(uint64_t **this, const CoreHandwriting::Ink *a2)
{
  uint64_t v8 = objc_opt_new();
  uint64_t v10 = *this;
  for (unint64_t i = this[1]; v10 != i; v10 += 3)
  {
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    while (v11 != v12)
    {
      if (!*(unsigned char *)(v11 + 24)) {
        objc_msgSend_addPoint_(v8, v3, v4, v5, v6, v7, *(double *)v11, *(double *)(v11 + 8));
      }
      v11 += 32;
    }
    objc_msgSend_endStroke(v8, v3, v4, v5, v6, v7);
  }
  return v8;
}

void sub_1C4A56784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A56794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CoreHandwriting::getMLMultiArrayView(CoreHandwriting *this, CoreHandwriting::FeatureArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_array(MEMORY[0x1E4F1CA48], (const char *)a2, a3, a4, a5, a6);
  objc_msgSend_addObject_(v7, v8, (uint64_t)&unk_1F203E5C8, v9, v10, v11);
  uint64_t v17 = *(uint64_t **)this;
  uint64_t v18 = (uint64_t *)*((void *)this + 1);
  if (*(uint64_t **)this != v18)
  {
    do
    {
      uint64_t v19 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v12, *v17, v14, v15, v16);
      objc_msgSend_addObject_(v7, v20, (uint64_t)v19, v21, v22, v23);

      ++v17;
    }
    while (v17 != v18);
  }
  unint64_t v24 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v12, v13, v14, v15, v16);
  objc_msgSend_addObject_(v24, v25, (uint64_t)&unk_1F203E5C8, v26, v27, v28);
  long long v33 = (uint64_t *)*((void *)this + 3);
  for (unint64_t i = (uint64_t *)*((void *)this + 4); v33 != i; ++v33)
  {
    uint64_t v35 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v29, *v33, v30, v31, v32);
    objc_msgSend_addObject_(v24, v36, (uint64_t)v35, v37, v38, v39);
  }
  id v40 = objc_alloc(MEMORY[0x1E4F1E9A8]);
  uint64_t v41 = *((void *)this + 6);
  uint64_t v45 = 0;
  long long v43 = objc_msgSend_initWithDataPointer_shape_dataType_strides_deallocator_error_(v40, v42, v41, (uint64_t)v7, 65568, (uint64_t)v24, 0, &v45);

  return v43;
}

void sub_1C4A568F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A5693C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double CoreHandwriting::boundingBoxFromRect(CGRect *this, const CGRect *a2)
{
  double MinX = CGRectGetMinX(*this);
  CGRectGetMaxX(*this);
  CGRectGetMinY(*this);
  CGRectGetMaxY(*this);
  return MinX;
}

void sub_1C4A569C8()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  *exceptiouint64_t n = &unk_1F20128E8;
  __cxa_throw(exception, (struct type_info *)&unk_1F2011B18, (void (*)(void *))std::exception::~exception);
}

void sub_1C4A56A18(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x1C8786460);
}

void sub_1C4A56A54()
{
}

void *sub_1C4A56A68()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F2012890;
  return result;
}

void sub_1C4A56AA0(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2012890;
}

__n128 sub_1C4A56AC8@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u8[8] = 0;
  return result;
}

uint64_t sub_1C4A56ADC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN15CoreHandwriting12drawingToInkEP9CHDrawingRK7CGPointE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN15CoreHandwriting12drawingToInkEP9CHDrawingRK7CGPointE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN15CoreHandwriting12drawingToInkEP9CHDrawingRK7CGPointE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN15CoreHandwriting12drawingToInkEP9CHDrawingRK7CGPointE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1C4A56B4C()
{
  return &unk_1F2011B58;
}

void sub_1C4A56D20(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4A56E04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A56EA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A56F90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A57094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A570CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A5714C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A5727C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A57384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A573B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double CoreHandwriting::BoundingBox::BoundingBox(CoreHandwriting::BoundingBox *this)
{
  double result = 1.79769313e308;
  *(_OWORD *)this = xmmword_1C4C3B2A0;
  *((_OWORD *)this + 1) = xmmword_1C4C3B2A0;
  return result;
}

{
  double result;

  double result = 1.79769313e308;
  *(_OWORD *)this = xmmword_1C4C3B2A0;
  *((_OWORD *)this + 1) = xmmword_1C4C3B2A0;
  return result;
}

uint64_t CoreHandwriting::BoundingBox::unionWith(uint64_t this, const CoreHandwriting::BoundingBox *a2)
{
  if (*(double *)this > *(double *)a2)
  {
    *(void *)this = *(void *)a2;
    double v2 = *((double *)a2 + 1);
    if (*(double *)(this + 8) >= v2)
    {
LABEL_3:
      double v3 = *((double *)a2 + 2);
      if (*(double *)(this + 16) <= v3) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    double v2 = *((double *)a2 + 1);
    if (*(double *)(this + 8) >= v2) {
      goto LABEL_3;
    }
  }
  *(double *)(this + 8) = v2;
  double v3 = *((double *)a2 + 2);
  if (*(double *)(this + 16) <= v3)
  {
LABEL_4:
    double v4 = *((double *)a2 + 3);
    if (*(double *)(this + 24) >= v4) {
      return this;
    }
LABEL_9:
    *(double *)(this + 24) = v4;
    return this;
  }
LABEL_8:
  *(double *)(this + 16) = v3;
  double v4 = *((double *)a2 + 3);
  if (*(double *)(this + 24) < v4) {
    goto LABEL_9;
  }
  return this;
}

float64x2_t CoreHandwriting::BoundingBox::translate(float64x2_t *this, double a2, double a3)
{
  float64x2_t result = vaddq_f64(*this, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0));
  float64x2_t v4 = vaddq_f64(this[1], (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a3, 0));
  *this = result;
  this[1] = v4;
  return result;
}

void sub_1C4A57594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4A575A4(unint64_t a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4FAF118]);
  uint64_t v8 = v2;
  if (a1 >= 2)
  {
    if (a1 != 2) {
      goto LABEL_6;
    }
    objc_msgSend_setAngleThresholdForRotationCorrection_(v2, v3, v4, v5, v6, v7, 0.0);
    objc_msgSend_setFlatMergeJumps_(v8, v60, 1, v61, v62, v63);
    LODWORD(v64) = 1063675494;
    objc_msgSend_setAllowedOverlap_(v8, v65, v66, v67, v68, v69, v64);
    objc_msgSend_setMaxRegions_(v8, v70, 169, v71, v72, v73);
    objc_msgSend_setMaxQueueCapacity_(v8, v74, 0xFFFFFFFFLL, v75, v76, v77);
    LODWORD(v78) = 1.0;
    objc_msgSend_setMinWhitespaceWidth_(v8, v79, v80, v81, v82, v83, v78);
    LODWORD(v84) = 1050253722;
    objc_msgSend_setMinWhitespaceHeight_(v8, v85, v86, v87, v88, v89, v84);
    objc_msgSend_setNumLookupElements_(v8, v90, 57, v91, v92, v93);
    objc_msgSend_setNumPointsForSegmentsIntersection_(v8, v94, 6, v95, v96, v97);
    float v47 = 2.0;
    LODWORD(v98) = 1.0;
    objc_msgSend_setQualityHeightFactor_(v8, v99, v100, v101, v102, v103, v98);
  }
  else
  {
    objc_msgSend_setAngleThresholdForRotationCorrection_(v2, v3, v4, v5, v6, v7, 0.0);
    objc_msgSend_setFlatMergeJumps_(v8, v9, 1, v10, v11, v12);
    LODWORD(v13) = 1064514355;
    objc_msgSend_setAllowedOverlap_(v8, v14, v15, v16, v17, v18, v13);
    objc_msgSend_setMaxRegions_(v8, v19, 169, v20, v21, v22);
    objc_msgSend_setMaxQueueCapacity_(v8, v23, 0xFFFFFFFFLL, v24, v25, v26);
    LODWORD(v27) = 1061997773;
    objc_msgSend_setMinWhitespaceWidth_(v8, v28, v29, v30, v31, v32, v27);
    LODWORD(v33) = 1060320051;
    objc_msgSend_setMinWhitespaceHeight_(v8, v34, v35, v36, v37, v38, v33);
    objc_msgSend_setNumLookupElements_(v8, v39, 57, v40, v41, v42);
    objc_msgSend_setNumPointsForSegmentsIntersection_(v8, v43, 4, v44, v45, v46);
    float v47 = 1.0;
    LODWORD(v48) = 1066192077;
    objc_msgSend_setQualityHeightFactor_(v8, v49, v50, v51, v52, v53, v48);
  }
  *(float *)&double v59 = v47;
  objc_msgSend_setQualityWidthFactor_(v8, v54, v55, v56, v57, v58, v59);
  LODWORD(v104) = 8.0;
  objc_msgSend_setMinSubRectangleSize_(v8, v105, v106, v107, v108, v109, v104);
  LODWORD(v110) = 1035122882;
  objc_msgSend_setMinQuadrilateralRotation_(v8, v111, v112, v113, v114, v115, v110);
  LODWORD(v116) = 1053609165;
  objc_msgSend_setMinWhitespaceHeightForReadingOrder_(v8, v117, v118, v119, v120, v121, v116);
LABEL_6:
  return v8;
}

void sub_1C4A57768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A5780C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A57964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A57AE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A57C6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A57FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4A581C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A58FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32)
{
  sub_1C49EB298((uint64_t)&STACK[0x250], (void *)STACK[0x258]);
  sub_1C49EB298((uint64_t)&STACK[0x510], (void *)STACK[0x518]);

  _Unwind_Resume(a1);
}

uint64_t sub_1C4A59340(uint64_t a1, const char *a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v7 = objc_msgSend_containsObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
  if ((v7 & 1) == 0) {
    *a3 = 1;
  }
  return v7 ^ 1u;
}

uint64_t sub_1C4A5937C(uint64_t a1, const char *a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v7 = objc_msgSend_containsObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
  if ((v7 & 1) == 0) {
    *a3 = 1;
  }
  return v7 ^ 1u;
}

void sub_1C4A596F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A597A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v12 = objc_msgSend_strokeProvider(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
  uint64_t v17 = objc_msgSend_strokeIdentifierFromData_(v12, v13, (uint64_t)v5, v14, v15, v16);

  uint64_t v23 = objc_msgSend_strokeProvider(*(void **)(a1 + 32), v18, v19, v20, v21, v22);
  uint64_t v28 = objc_msgSend_strokeIdentifierFromData_(v23, v24, (uint64_t)v6, v25, v26, v27);

  uint64_t v34 = objc_msgSend_strokeProvider(*(void **)(a1 + 32), v29, v30, v31, v32, v33);
  uint64_t v38 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(v34, v35, (uint64_t)v17, (uint64_t)v28, v36, v37);

  return v38;
}

void sub_1C4A5986C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A598A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A598C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A598D4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  uint64_t v11 = *(void **)(a1 + 32);
  if (v11) {
    objc_msgSend_addPoint_(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v12 = *(void **)(a1 + 40);
  return objc_msgSend_addPoint_(v12, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1C4A59A0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A59AEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A5A208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A5A270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CHQuadCurvePointFIFO;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

unint64_t CoreHandwriting::Ink::numStrokes(CoreHandwriting::Ink *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
}

uint64_t CoreHandwriting::Ink::numPoints(CoreHandwriting::Ink *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v1 = *((void *)this + 1);
  if (*(void *)this == v1) {
    return 0;
  }
  unint64_t v3 = v1 - v2 - 24;
  if (v3 >= 0x60)
  {
    unint64_t v5 = v3 / 0x18 + 1;
    uint64_t v6 = v5 & 3;
    if ((v5 & 3) == 0) {
      uint64_t v6 = 4;
    }
    unint64_t v7 = v5 - v6;
    uint64_t v8 = v2 + 24 * v7;
    int64x2_t v9 = 0uLL;
    int64x2_t v10 = 0uLL;
    do
    {
      uint64_t v11 = v2 + 96;
      float64x2x3_t v15 = vld3q_f64((const double *)v2);
      uint64_t v12 = (const double *)(v2 + 48);
      int64x2_t v9 = vsraq_n_s64(v9, vsubq_s64((int64x2_t)v15.val[1], (int64x2_t)v15.val[0]), 5uLL);
      float64x2x3_t v16 = vld3q_f64(v12);
      int64x2_t v10 = vsraq_n_s64(v10, vsubq_s64((int64x2_t)v16.val[1], (int64x2_t)v16.val[0]), 5uLL);
      uint64_t v2 = v11;
      v7 -= 4;
    }
    while (v7);
    uint64_t result = vaddvq_s64(vaddq_s64(v10, v9));
    uint64_t v2 = v8;
  }
  else
  {
    uint64_t result = 0;
  }
  do
  {
    double v13 = *(double *)v2;
    uint64_t v14 = *(void *)(v2 + 8);
    v2 += 24;
    result += (v14 - *(void *)&v13) >> 5;
  }
  while (v2 != v1);
  return result;
}

double CoreHandwriting::Ink::bounds(double ***this)
{
  uint64_t v1 = *this;
  uint64_t v2 = this[1];
  if (*this == v2) {
    return 1.79769313e308;
  }
  double v3 = 1.79769313e308;
  double v4 = -1.79769313e308;
  double v5 = -1.79769313e308;
  double result = 1.79769313e308;
  do
  {
    uint64_t v8 = *v1;
    int64x2_t v9 = v1[1];
    if (*v1 == v9) {
      goto LABEL_3;
    }
    double v10 = 1.79769313e308;
    double v7 = -1.79769313e308;
    double v11 = -1.79769313e308;
    double v12 = 1.79769313e308;
    do
    {
      double v13 = *v8;
      double v14 = v8[1];
      v8 += 4;
      if (v12 > v13) {
        double v12 = v13;
      }
      if (v11 < v13) {
        double v11 = v13;
      }
      if (v10 > v14) {
        double v10 = v14;
      }
      if (v7 < v14) {
        double v7 = v14;
      }
    }
    while (v8 != v9);
    if (result > v12) {
      double result = v12;
    }
    if (v5 < v11) {
      double v5 = v11;
    }
    if (v3 > v10) {
      double v3 = v10;
    }
    if (v4 >= v7) {
LABEL_3:
    }
      double v7 = v4;
    v1 += 3;
    double v4 = v7;
  }
  while (v1 != v2);
  return result;
}

BOOL CoreHandwriting::Ink::operator==(double ***a1, uint64_t *a2)
{
  double v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  if ((char *)v2 - (char *)*a1 != a2[1] - *a2) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  do
  {
    uint64_t v6 = *v3;
    double v5 = v3[1];
    double v7 = (char *)((char *)v5 - (char *)*v3);
    uint64_t v8 = *(double **)v4;
    int64x2_t v9 = (char *)(*(void *)(v4 + 8) - *(void *)v4);
    BOOL result = v7 == v9;
    if (v7 != v9) {
      break;
    }
    if (v6 != v5)
    {
      while (*v6 == *v8 && v6[1] == v8[1] && v6[2] == v8[2])
      {
        v6 += 4;
        v8 += 4;
        if (v6 == v5) {
          goto LABEL_9;
        }
      }
      return 0;
    }
LABEL_9:
    v3 += 3;
    v4 += 24;
  }
  while (v3 != v2);
  return result;
}

double CoreHandwriting::Ink::getCumulativeStrokeLength(char ***this)
{
  uint64_t v1 = *this;
  uint64_t v2 = this[1];
  double result = 0.0;
  if (*this != v2)
  {
    do
    {
      double v5 = *v1;
      uint64_t v4 = v1[1];
      double v6 = 0.0;
      if (*v1 != v4)
      {
        double v7 = (float64x2_t *)(v5 + 32);
        if (v5 + 32 != v4)
        {
          float64x2_t v8 = *(float64x2_t *)v5;
          unint64_t v9 = v4 - v5 - 64;
          if (v9 >= 0x80)
          {
            uint64_t v10 = (v9 >> 5) + 1;
            uint64_t v11 = v10 & 3;
            if ((v10 & 3) == 0) {
              uint64_t v11 = 4;
            }
            uint64_t v12 = v10 - v11;
            v7 += 2 * v12;
            int8x16_t v13 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v8.f64[0], 0);
            double v14 = (int64x2_t *)(v5 + 96);
            do
            {
              i64 = (const double *)v14[-4].i64;
              float64x2x4_t v27 = vld4q_f64(i64);
              int64x2_t v16 = v14[2];
              int64x2_t v17 = *v14;
              v14 += 8;
              float64x2_t v18 = (float64x2_t)vzip1q_s64(v17, v16);
              float64x2_t v19 = (float64x2_t)vzip2q_s64(v17, v16);
              float64x2_t v20 = vsubq_f64((float64x2_t)vextq_s8(v13, (int8x16_t)v27.val[0], 8uLL), v27.val[0]);
              float64x2_t v21 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v27.val[0], (int8x16_t)v18, 8uLL), v18);
              float64x2_t v22 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v27.val[1], 8uLL), v27.val[1]);
              v27.val[0] = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v27.val[1], (int8x16_t)v19, 8uLL), v19);
              float64x2_t v23 = vsqrtq_f64(vmlaq_f64(vmulq_f64(v22, v22), v20, v20));
              float64x2_t v24 = vsqrtq_f64(vmlaq_f64(vmulq_f64(v27.val[0], v27.val[0]), v21, v21));
              double v6 = v6 + v23.f64[0] + v23.f64[1] + v24.f64[0] + v24.f64[1];
              float64x2_t v8 = v19;
              int8x16_t v13 = (int8x16_t)v18;
              v12 -= 4;
            }
            while (v12);
            float64x2_t v8 = (float64x2_t)v16;
          }
          do
          {
            float64x2_t v25 = *v7;
            v7 += 2;
            float64x2_t v26 = vsubq_f64(v8, v25);
            double v6 = v6 + sqrt(vmlad_n_f64(COERCE_DOUBLE(*(void *)&vmulq_f64(v26, v26).f64[1]), v26.f64[0], v26.f64[0]));
            float64x2_t v8 = v25;
          }
          while (v7 != (float64x2_t *)v4);
        }
      }
      double result = result + v6;
      v1 += 3;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t **CoreHandwriting::Ink::translate(uint64_t **this, double a2, double a3)
{
  double v3 = *this;
  uint64_t v4 = this[1];
  while (v3 != v4)
  {
    uint64_t v5 = *v3;
    uint64_t v6 = v3[1];
    while (v5 != v6)
    {
      if (!*(unsigned char *)(v5 + 24))
      {
        double v7 = *(double *)(v5 + 8) + a3;
        *(double *)uint64_t v5 = *(double *)v5 + a2;
        *(double *)(v5 + 8) = v7;
      }
      v5 += 32;
    }
    v3 += 3;
  }
  return this;
}

uint64_t **CoreHandwriting::Ink::scale(uint64_t **this, float64x2_t a2, float64_t a3)
{
  double v3 = *this;
  uint64_t v4 = this[1];
  if (*this != v4)
  {
    a2.f64[1] = a3;
    do
    {
      uint64_t v5 = *v3;
      uint64_t v6 = v3[1];
      while (v5 != v6)
      {
        if (!*(unsigned char *)(v5 + 24)) {
          *(float64x2_t *)uint64_t v5 = vmulq_f64(*(float64x2_t *)v5, a2);
        }
        v5 += 32;
      }
      v3 += 3;
    }
    while (v3 != v4);
  }
  return this;
}

uint64_t **CoreHandwriting::Ink::scale(uint64_t **this, double a2)
{
  uint64_t v2 = *this;
  double v3 = this[1];
  while (v2 != v3)
  {
    uint64_t v4 = *v2;
    uint64_t v5 = v2[1];
    while (v4 != v5)
    {
      if (!*(unsigned char *)(v4 + 24)) {
        *(float64x2_t *)uint64_t v4 = vmulq_n_f64(*(float64x2_t *)v4, a2);
      }
      v4 += 32;
    }
    v2 += 3;
  }
  return this;
}

void CoreHandwriting::Ink::rotate(uint64_t **this, double a2)
{
  __double2 v3 = __sincos_stret(a2);
  uint64_t v4 = *this;
  uint64_t v5 = this[1];
  while (v4 != v5)
  {
    uint64_t v6 = *v4;
    uint64_t v7 = v4[1];
    while (v6 != v7)
    {
      if (!*(unsigned char *)(v6 + 24))
      {
        double v8 = *(double *)(v6 + 8);
        double v9 = v3.__cosval * v8 + *(double *)v6 * v3.__sinval;
        *(double *)uint64_t v6 = *(double *)v6 * v3.__cosval - v8 * v3.__sinval;
        *(double *)(v6 + 8) = v9;
      }
      v6 += 32;
    }
    v4 += 3;
  }
}

uint64_t isSymbolStructural(NSString *a1)
{
  uint64_t v5 = a1;
  if (qword_1EA3C9D70 != -1) {
    dispatch_once(&qword_1EA3C9D70, &unk_1F2012D10);
  }
  uint64_t v6 = objc_msgSend_containsObject_((void *)qword_1EA3C9D68, v1, (uint64_t)v5, v2, v3, v4);

  return v6;
}

void sub_1C4A5B97C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A5B98C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_setWithObjects_(MEMORY[0x1E4F1CAD0], a2, @"{", a4, a5, a6, @"}", @"[", @"]", @"_", @"^", @"&", @"\\", @"\\,", @"\\;"",
    @"\\\\"",
    @"\\\\[1em]",
    @"\\mathbb",
    @"\\mathcal",
    @"\\mathfrak",
    @"\\mathrm",
    @"\\left.",
    @"\\right.",
    @"\\begin{matrix}",
    @"\\end{matrix}",
    @"\\begin{aligned}",
    @"\\end{aligned}",
    @"\\begin{array}{l}",
    @"\\begin{array}{lr}",
    @"\\end{array}",
  uint64_t v6 = 0);
  uint64_t v7 = (void *)qword_1EA3C9D68;
  qword_1EA3C9D68 = v6;
}

uint64_t isSymbolLeadingStructural(NSString *a1)
{
  uint64_t v5 = a1;
  if (qword_1EA3C9D80 != -1) {
    dispatch_once(&qword_1EA3C9D80, &unk_1F2010A20);
  }
  uint64_t v6 = objc_msgSend_containsObject_((void *)qword_1EA3C9D78, v1, (uint64_t)v5, v2, v3, v4);

  return v6;
}

void sub_1C4A5BB38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A5BB48(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_setWithObjects_(MEMORY[0x1E4F1CAD0], a2, @"{", a4, a5, a6, @"[", @"_", @"^", @"&", @"\\", @"\\,", @"\\;"",
    @"\\\\"",
    @"\\\\[1em]",
    @"\\left.",
    @"\\mathbb",
    @"\\mathcal",
    @"\\mathfrak",
    @"\\mathrm",
    @"\\color{orange}{+}",
    @"\\begin{matrix}",
    @"\\begin{aligned}",
    @"\\begin{array}{l}",
    @"\\begin{array}{lr}",
  uint64_t v6 = 0);
  uint64_t v7 = (void *)qword_1EA3C9D78;
  qword_1EA3C9D78 = v6;
}

uint64_t isSymbolTrailingStructural(NSString *a1)
{
  uint64_t v5 = a1;
  if (qword_1EA3C9D90 != -1) {
    dispatch_once(&qword_1EA3C9D90, &unk_1F2013790);
  }
  uint64_t v6 = objc_msgSend_containsObject_((void *)qword_1EA3C9D88, v1, (uint64_t)v5, v2, v3, v4);

  return v6;
}

void sub_1C4A5BCC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A5BCD0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_setWithObjects_(MEMORY[0x1E4F1CAD0], a2, @"}", a4, a5, a6, @"]", @"\\right.", @"\\end{matrix}", @"\\end{aligned}", @"\\end{array}", 0);
  uint64_t v7 = (void *)qword_1EA3C9D88;
  qword_1EA3C9D88 = v6;
}

uint64_t isSymbolOperator(NSString *a1)
{
  uint64_t v5 = a1;
  if (qword_1EA3C9D98 != -1) {
    dispatch_once(&qword_1EA3C9D98, &unk_1F2010A40);
  }
  uint64_t v6 = objc_msgSend_containsObject_((void *)qword_1EA3C9DA0, v1, (uint64_t)v5, v2, v3, v4);

  return v6;
}

void sub_1C4A5BDBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A5BDCC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_setWithObjects_(MEMORY[0x1E4F1CAD0], a2, @"+", a4, a5, a6, @"-", @"\\times", @"\\ast", @"\\cdot", @"\\div", @"/", @":", 0);
  uint64_t v7 = (void *)qword_1EA3C9DA0;
  qword_1EA3C9DA0 = v6;
}

id symbolTextTransliteration(NSString *a1)
{
  uint64_t v5 = a1;
  if (qword_1EA3C9DA8 != -1) {
    dispatch_once(&qword_1EA3C9DA8, &unk_1F20130F0);
  }
  uint64_t v6 = objc_msgSend_objectForKeyedSubscript_((void *)qword_1EA3C9DB0, v1, (uint64_t)v5, v2, v3, v4);
  uint64_t v11 = v6;
  if (v6)
  {
    id v12 = v6;
  }
  else if (objc_msgSend_hasPrefix_(v5, v7, @"\\text{", v8, v9, v10) {
         && objc_msgSend_hasSuffix_(v5, v13, @"}", v14, v15, v16))
  }
  {
    uint64_t v19 = objc_msgSend_length(v5, v13, v17, v18, v15, v16);
    objc_msgSend_substringWithRange_(v5, v20, 6, v19 - 7, v21, v22);
    id v12 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v5, v13, @"\\"", (uint64_t)&stru_1F20141C8, v15, v16);
    id v12 = (id)objc_claimAutoreleasedReturnValue();
  }
  float64x2_t v23 = v12;

  return v23;
}

void sub_1C4A5BF60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A5BF70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A5BF80()
{
  id v0 = (void *)qword_1EA3C9DB0;
  qword_1EA3C9DB0 = (uint64_t)&unk_1F203D030;
}

long double symbolHeightCoefficient(NSString *a1, uint64_t a2)
{
  uint64_t v7 = a1;
  if (qword_1EA3C9DB8 != -1) {
    dispatch_once(&qword_1EA3C9DB8, &unk_1F2010AE0);
  }
  double v12 = 1.0;
  if ((objc_msgSend_containsObject_((void *)qword_1EA3C9DC0, v3, (uint64_t)v7, v4, v5, v6) & 1) == 0)
  {
    if (objc_msgSend_containsObject_((void *)qword_1EA3C9DC8, v8, (uint64_t)v7, v9, v10, v11))
    {
      uint64_t v17 = 0x3FE3333333333333;
LABEL_8:
      double v12 = *(double *)&v17;
      goto LABEL_9;
    }
    if (objc_msgSend_containsObject_((void *)qword_1EA3C9DD0, v13, (uint64_t)v7, v14, v15, v16))
    {
      uint64_t v17 = 0x3FF6666666666666;
      goto LABEL_8;
    }
    double v12 = 0.0;
    if (objc_msgSend_hasPrefix_(v7, v18, @"\\text{", v19, v20, v21))
    {
      float64x2_t v24 = symbolTextTransliteration(v7);
      int v25 = 0;
      char v26 = 0;
      char v27 = 0;
      unint64_t v28 = 0;
      for (unint64_t i = objc_msgSend_length(v24, v29, v30, v31, v32, v33);
            v28 < i;
            unint64_t i = objc_msgSend_length(v24, v44, v45, v46, v47, v48))
      {
        uint64_t v39 = objc_msgSend_characterAtIndex_(v24, v35, v28, v36, v37, v38);
        if (objc_msgSend_characterIsMember_((void *)qword_1EA3C9DD8, v40, v39, v41, v42, v43))
        {
          char v26 = 1;
          ++v28;
        }
        else
        {
          if (objc_msgSend_characterIsMember_((void *)qword_1EA3C9DE0, v44, v39, v46, v47, v48)) {
            char v27 = 1;
          }
          else {
            v25 |= objc_msgSend_characterIsMember_((void *)qword_1EA3C9DE8, v44, v39, v46, v47, v48) ^ 1;
          }
          ++v28;
        }
      }
      double v49 = 1.4;
      double v50 = 0.6;
      if ((v25 | v26)) {
        double v50 = 1.0;
      }
      if ((v25 & v26 & 1) == 0) {
        double v49 = v50;
      }
      if (((v27 | v25) | v26)) {
        double v12 = v49;
      }
      else {
        double v12 = 0.0;
      }
    }
  }
LABEL_9:
  long double v22 = exp2(-(double)a2) * v12;

  return v22;
}

void sub_1C4A5C188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A5C19C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A5C1B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A5C1C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v7 = objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E4F28B88], a2, a3, a4, a5, a6);
  double v12 = objc_msgSend_componentsSeparatedByCharactersInSet_(@"0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z b d f g h j k l p q t y ! \\% \\$ \\tan \\arctan \\sinh \\cosh \\tanh \\coth \\ln", v8, (uint64_t)v7, v9, v10, v11);
  uint64_t v17 = objc_msgSend_setWithArray_(v6, v13, (uint64_t)v12, v14, v15, v16);
  uint64_t v18 = (void *)qword_1EA3C9DC0;
  qword_1EA3C9DC0 = v17;

  uint64_t v19 = (void *)MEMORY[0x1E4F1CAD0];
  int v25 = objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E4F28B88], v20, v21, v22, v23, v24);
  uint64_t v30 = objc_msgSend_componentsSeparatedByCharactersInSet_(@"a c e i m n o r s u v w x \\pi \\sin \\cos \\arcsin \\arccos \\sec \\csc", v26, (uint64_t)v25, v27, v28, v29);
  uint64_t v35 = objc_msgSend_setWithArray_(v19, v31, (uint64_t)v30, v32, v33, v34);
  uint64_t v36 = (void *)qword_1EA3C9DC8;
  qword_1EA3C9DC8 = v35;

  uint64_t v37 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v43 = objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E4F28B88], v38, v39, v40, v41, v42);
  uint64_t v48 = objc_msgSend_componentsSeparatedByCharactersInSet_(@"\\log \\lg", v44, (uint64_t)v43, v45, v46, v47);
  uint64_t v53 = objc_msgSend_setWithArray_(v37, v49, (uint64_t)v48, v50, v51, v52);
  long long v54 = (void *)qword_1EA3C9DD0;
  qword_1EA3C9DD0 = v53;

  uint64_t v59 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], v55, @"gjpqy", v56, v57, v58);
  int v60 = (void *)qword_1EA3C9DD8;
  qword_1EA3C9DD8 = v59;

  uint64_t v65 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], v61, @"aceimnorsuvwxz+×*÷:¢=", v62, v63, v64);
  uint64_t v66 = (void *)qword_1EA3C9DE0;
  qword_1EA3C9DE0 = v65;

  uint64_t v71 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], v67, @"-⋅.,°'\"", v68, v69, v70);
  uint64_t v72 = (void *)qword_1EA3C9DE8;
  qword_1EA3C9DE8 = v71;
}

void sub_1C4A5C364(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1C4A5C3A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A5C3B4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v44 = 0;
  uint64_t v45 = &v44;
  uint64_t v46 = 0x5012000000;
  uint64_t v47 = sub_1C4A602D8;
  uint64_t v48 = nullsub_27;
  double v49 = &unk_1C4CB5C62;
  long long v7 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  long long v50 = *MEMORY[0x1E4F1DB20];
  long long v51 = v7;
  int8x16_t v13 = objc_msgSend_array(MEMORY[0x1E4F1CA48], a2, a3, a4, a5, a6);
  for (unint64_t i = 0; i < objc_msgSend_count(*(void **)(a1 + 88), v8, v9, v10, v11, v12); ++i)
  {
    uint64_t v19 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 88), v15, i, v16, v17, v18);
    uint64_t v40 = 0;
    uint64_t v41 = (double *)&v40;
    uint64_t v42 = 0x2020000000;
    uint64_t v43 = 0x3FF0000000000000;
    uint64_t v25 = objc_msgSend_count(*(void **)(a1 + 32), v20, v21, v22, v23, v24);
    v39[0] = MEMORY[0x1E4F143A8];
    v39[1] = 3221225472;
    v39[2] = sub_1C4A602E8;
    v39[3] = &unk_1E64E2E98;
    v39[5] = &v40;
    v39[6] = i;
    v39[4] = &v44;
    objc_msgSend_enumerateTokensInTranscriptionPath_columnRange_tokenProcessingBlock_((void *)a1, v26, (uint64_t)v19, 0, v25, (uint64_t)v39);
    uint64_t v32 = objc_msgSend_numberWithDouble_(NSNumber, v27, v28, v29, v30, v31, v41[3]);
    objc_msgSend_addObject_(v13, v33, (uint64_t)v32, v34, v35, v36);

    _Block_object_dispose(&v40, 8);
  }
  long long v37 = *((_OWORD *)v45 + 4);
  *(_OWORD *)(a1 + 104) = *((_OWORD *)v45 + 3);
  *(_OWORD *)(a1 + 120) = v37;
  uint64_t v38 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v13;

  _Block_object_dispose(&v44, 8);
}

void sub_1C4A5C5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A5C5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A5C744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A5C754(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A5C770(uint64_t a1, void *a2, char **a3, void *a4)
{
  v884 = a4;
  v885 = a3;
  v923[1] = *MEMORY[0x1E4F143B8];
  id v897 = a2;
  self;
  if (!objc_msgSend_count(v897, v4, v5, v6, v7, v8))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v14 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v902) = 0;
      _os_log_impl(&dword_1C492D000, v14, OS_LOG_TYPE_FAULT, "CHTokenizedMathResult must be initialized with at least one token path.", (uint8_t *)&v902, 2u);
    }
  }
  unint64_t v15 = 0x1E4F1C000uLL;
  v896 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v9, v10, v11, v12, v13, v884);
  v891 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v16, v17, v18, v19, v20);
  for (unint64_t i = 0; i < objc_msgSend_count(v897, v21, v22, v23, v24, v25); ++i)
  {
    v895 = objc_msgSend_array(*(void **)(v15 + 2632), v27, v28, v29, v30, v31);
    uint64_t v41 = objc_msgSend_array(*(void **)(v15 + 2632), v32, v33, v34, v35, v36);
    for (unint64_t j = 0; ; ++j)
    {
      uint64_t v43 = objc_msgSend_objectAtIndexedSubscript_(v897, v37, i, v38, v39, v40);
      BOOL v49 = j < objc_msgSend_count(v43, v44, v45, v46, v47, v48);

      if (!v49) {
        break;
      }
      uint64_t v55 = objc_msgSend_objectAtIndexedSubscript_(v897, v50, i, v52, v53, v54);
      int v60 = objc_msgSend_objectAtIndexedSubscript_(v55, v56, j, v57, v58, v59);

      objc_msgSend_string(v60, v61, v62, v63, v64, v65);
      id v70 = (id)objc_claimAutoreleasedReturnValue();
      if (qword_1EA3C9D80 != -1) {
        dispatch_once(&qword_1EA3C9D80, &unk_1F2010A20);
      }
      int v71 = objc_msgSend_containsObject_((void *)qword_1EA3C9D78, v66, (uint64_t)v70, v67, v68, v69);

      if (v71)
      {
        uint64_t v77 = objc_msgSend_lastObject(v41, v72, v73, v74, v75, v76);
        objc_msgSend_string(v77, v78, v79, v80, v81, v82);
        id v87 = (id)objc_claimAutoreleasedReturnValue();
        if (qword_1EA3C9D80 != -1) {
          dispatch_once(&qword_1EA3C9D80, &unk_1F2010A20);
        }
        char v88 = objc_msgSend_containsObject_((void *)qword_1EA3C9D78, v83, (uint64_t)v87, v84, v85, v86);

        if (objc_msgSend_count(v41, v89, v90, v91, v92, v93)) {
          char v98 = v88;
        }
        else {
          char v98 = 1;
        }
        if ((v98 & 1) == 0)
        {
          uint64_t v99 = [CHTokenizedResultColumn alloc];
          uint64_t v105 = objc_msgSend_copy(v41, v100, v101, v102, v103, v104);
          v923[0] = v105;
          uint64_t v109 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v106, (uint64_t)v923, 1, v107, v108);
          uint64_t v114 = objc_msgSend_initWithTokenRows_(v99, v110, (uint64_t)v109, v111, v112, v113);

          objc_msgSend_addObject_(v895, v115, (uint64_t)v114, v116, v117, v118);
          objc_msgSend_removeAllObjects(v41, v119, v120, v121, v122, v123);
        }
      }
      else
      {
        objc_msgSend_string(v60, v72, v73, v74, v75, v76);
        id v128 = (id)objc_claimAutoreleasedReturnValue();
        if (qword_1EA3C9D90 != -1) {
          dispatch_once(&qword_1EA3C9D90, &unk_1F2013790);
        }
        int v129 = objc_msgSend_containsObject_((void *)qword_1EA3C9D88, v124, (uint64_t)v128, v125, v126, v127);

        if (!v129)
        {
          uint64_t v131 = objc_msgSend_lastObject(v41, v94, v130, v95, v96, v97);
          objc_msgSend_string(v131, v132, v133, v134, v135, v136);
          id v141 = (id)objc_claimAutoreleasedReturnValue();
          if (qword_1EA3C9D80 != -1) {
            dispatch_once(&qword_1EA3C9D80, &unk_1F2010A20);
          }
          char v142 = objc_msgSend_containsObject_((void *)qword_1EA3C9D78, v137, (uint64_t)v141, v138, v139, v140);

          if (objc_msgSend_count(v41, v143, v144, v145, v146, v147)) {
            char v148 = v142;
          }
          else {
            char v148 = 1;
          }
          if ((v148 & 1) == 0)
          {
            uint64_t v149 = [CHTokenizedResultColumn alloc];
            uint64_t v155 = objc_msgSend_copy(v41, v150, v151, v152, v153, v154);
            v922 = v155;
            uint64_t v159 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v156, (uint64_t)&v922, 1, v157, v158);
            uint64_t v164 = objc_msgSend_initWithTokenRows_(v149, v160, (uint64_t)v159, v161, v162, v163);

            objc_msgSend_addObject_(v895, v165, (uint64_t)v164, v166, v167, v168);
            objc_msgSend_removeAllObjects(v41, v169, v170, v171, v172, v173);
          }
        }
      }
      objc_msgSend_addObject_(v41, v94, (uint64_t)v60, v95, v96, v97);
    }
    uint64_t v174 = objc_msgSend_count(v41, v50, v51, v52, v53, v54);
    unint64_t v180 = 0x1E4F28000;
    if (v174)
    {
      uint64_t v181 = [CHTokenizedResultColumn alloc];
      id v187 = objc_msgSend_copy(v41, v182, v183, v184, v185, v186);
      v921 = v187;
      id v191 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v188, (uint64_t)&v921, 1, v189, v190);
      long long v196 = objc_msgSend_initWithTokenRows_(v181, v192, (uint64_t)v191, v193, v194, v195);

      objc_msgSend_addObject_(v895, v197, (uint64_t)v196, v198, v199, v200);
      unint64_t v180 = 0x1E4F28000uLL;
    }
    if (!i)
    {
      long long v911 = 0u;
      long long v912 = 0u;
      long long v909 = 0u;
      long long v910 = 0u;
      uint64_t v240 = v895;
      uint64_t v248 = objc_msgSend_countByEnumeratingWithState_objects_count_(v240, v241, (uint64_t)&v909, (uint64_t)v920, 16, v242);
      if (v248)
      {
        uint64_t v249 = *(void *)v910;
        while (2)
        {
          for (uint64_t k = 0; k != v248; ++k)
          {
            if (*(void *)v910 != v249) {
              objc_enumerationMutation(v240);
            }
            int v251 = *(void **)(*((void *)&v909 + 1) + 8 * k);
            uint64_t v252 = objc_msgSend_strokeIndexes(v251, v243, v244, v245, v246, v247);
            BOOL v258 = objc_msgSend_count(v252, v253, v254, v255, v256, v257) == 0;

            if (v258)
            {

              goto LABEL_59;
            }
            uint64_t v264 = objc_msgSend_strokeIndexes(v251, v259, v260, v261, v262, v263);
            objc_msgSend_addIndexes_(v891, v265, (uint64_t)v264, v266, v267, v268);
          }
          uint64_t v248 = objc_msgSend_countByEnumeratingWithState_objects_count_(v240, v243, (uint64_t)&v909, (uint64_t)v920, 16, v247);
          if (v248) {
            continue;
          }
          break;
        }
      }

LABEL_57:
      objc_msgSend_addObject_(v896, v236, (uint64_t)v895, v237, v238, v239);
      goto LABEL_60;
    }
    long long v201 = objc_msgSend_indexSet(*(void **)(v180 + 3680), v175, v176, v177, v178, v179);
    long long v907 = 0u;
    long long v908 = 0u;
    long long v905 = 0u;
    long long v906 = 0u;
    v894 = v895;
    uint64_t v209 = objc_msgSend_countByEnumeratingWithState_objects_count_(v894, v202, (uint64_t)&v905, (uint64_t)v919, 16, v203);
    if (v209)
    {
      uint64_t v210 = *(void *)v906;
      while (2)
      {
        for (uint64_t m = 0; m != v209; ++m)
        {
          if (*(void *)v906 != v210) {
            objc_enumerationMutation(v894);
          }
          unint64_t v212 = *(void **)(*((void *)&v905 + 1) + 8 * m);
          double v213 = objc_msgSend_strokeIndexes(v212, v204, v205, v206, v207, v208);
          BOOL v219 = objc_msgSend_count(v213, v214, v215, v216, v217, v218) == 0;

          if (v219)
          {
            int v230 = 0;
            goto LABEL_46;
          }
          double v225 = objc_msgSend_strokeIndexes(v212, v220, v221, v222, v223, v224);
          objc_msgSend_addIndexes_(v201, v226, (uint64_t)v225, v227, v228, v229);
        }
        uint64_t v209 = objc_msgSend_countByEnumeratingWithState_objects_count_(v894, v204, (uint64_t)&v905, (uint64_t)v919, 16, v208);
        if (v209) {
          continue;
        }
        break;
      }
    }
    int v230 = 1;
LABEL_46:

    int isEqualToIndexSet = objc_msgSend_isEqualToIndexSet_(v201, v231, (uint64_t)v891, v232, v233, v234);
    if (v230 & isEqualToIndexSet) {
      goto LABEL_57;
    }
LABEL_59:
    if (!i)
    {
      objc_msgSend_addObject_(v896, v236, (uint64_t)v895, v237, v238, v239);

      unint64_t v15 = 0x1E4F1C000uLL;
      break;
    }
LABEL_60:

    unint64_t v15 = 0x1E4F1C000;
  }
  if (objc_msgSend_count(v896, v27, v28, v29, v30, v31) == 1)
  {
    objc_msgSend_firstObject(v896, v269, v270, v271, v272, v273);
    uint64_t v274 = (char *)objc_claimAutoreleasedReturnValue();
    nunint64_t n = v274;
    uint64_t v280 = objc_msgSend_count(v274, v275, v276, v277, v278, v279);
    MEMORY[0x1F4188790](v280);
    double v287 = (char *)&v884 - ((v286 + 15) & 0xFFFFFFFFFFFFFFF0);
    for (unint64_t n = 0; n < objc_msgSend_count(v274, v281, v282, v283, v284, v285); ++n)
      *(void *)&v287[8 * n] = 0;
    id v308 = objc_alloc(MEMORY[0x1E4F28D58]);
    uint64_t v314 = objc_msgSend_count(v274, v309, v310, v311, v312, v313);
    uint64_t v321 = objc_msgSend_initWithIndexes_length_(v308, v315, (uint64_t)v287, v314, v316, v317);
    if (v885)
    {
      v322 = v274;
      *v885 = v322;
    }
    if (v884)
    {
      v918 = v321;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v318, (uint64_t)&v918, 1, v319, v320);
      id v323 = (id)objc_claimAutoreleasedReturnValue();
      void *v884 = v323;
    }

    goto LABEL_179;
  }
  objc_msgSend_array(*(void **)(v15 + 2632), v269, v270, v271, v272, v273);
  v892 = (char *)objc_claimAutoreleasedReturnValue();
  v889 = objc_msgSend_array(*(void **)(v15 + 2632), v289, v290, v291, v292, v293);
  unint64_t v299 = objc_msgSend_count(v896, v294, v295, v296, v297, v298);
  unint64_t v305 = v299;
  v902 = 0;
  v903 = 0;
  v904 = 0;
  if (v299)
  {
    if (v299 >> 61) {
      sub_1C494A220();
    }
    id v306 = operator new(8 * v299);
    double v307 = (char *)&v306[v305];
    v902 = v306;
    v904 = v307;
    bzero(v306, 8 * v305);
    v903 = v307;
    unint64_t v15 = 0x1E4F1C000;
  }
  v890 = objc_msgSend_array(*(void **)(v15 + 2632), v300, v301, v302, v303, v304);
  v895 = objc_msgSend_array(*(void **)(v15 + 2632), v324, v325, v326, v327, v328);
  for (iunint64_t i = 0; ii < objc_msgSend_count(v896, v329, v330, v331, v332, v333); ++ii)
  {
    long long v340 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v335, v336, v337, v338, v339);
    objc_msgSend_addObject_(v895, v341, (uint64_t)v340, v342, v343, v344);

    long long v350 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v345, v346, v347, v348, v349);
    objc_msgSend_addObject_(v890, v351, (uint64_t)v350, v352, v353, v354);
  }
  v894 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v335, v336, v337, v338, v339);
  v893 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v355, v356, v357, v358, v359);
LABEL_78:
  nunint64_t n = (char *)objc_msgSend_copy(v894, v360, v361, v362, v363, v364);
  unint64_t v370 = 0;
  while (2)
  {
    if (v370 < objc_msgSend_count(v896, v365, v366, v367, v368, v369))
    {
      uint64_t v376 = objc_msgSend_objectAtIndexedSubscript_(v890, v371, v370, v373, v374, v375);
      v382 = objc_msgSend_mutableCopy(v893, v377, v378, v379, v380, v381);
      objc_msgSend_removeIndexes_(v382, v383, (uint64_t)v376, v384, v385, v386);
      uint64_t v387 = v902;
      unint64_t v388 = v902[v370];
      v393 = objc_msgSend_objectAtIndexedSubscript_(v896, v389, v370, v390, v391, v392);
      if (v388 >= objc_msgSend_count(v393, v394, v395, v396, v397, v398)) {
        goto LABEL_89;
      }
      v403 = objc_msgSend_objectAtIndexedSubscript_(v896, v399, v370, v400, v401, v402);
      v408 = objc_msgSend_objectAtIndexedSubscript_(v403, v404, v388, v405, v406, v407);

      if (v408)
      {
        while (1)
        {
          if (objc_msgSend_count(v376, v409, v410, v411, v412, v413))
          {
            if (!objc_msgSend_count(v382, v414, v415, v416, v417, v418))
            {
              uint64_t v420 = objc_msgSend_strokeIndexes(v408, v414, v419, v416, v417, v418);
              int v425 = objc_msgSend_ch_intersectsIndexSet_(v420, v421, (uint64_t)v894, v422, v423, v424);

              if (!v425) {
                break;
              }
            }
          }
          unint64_t v426 = objc_msgSend_objectAtIndexedSubscript_(v895, v414, v370, v416, v417, v418);
          v432 = objc_msgSend_mathTokenRows(v408, v427, v428, v429, v430, v431);
          uint64_t v438 = objc_msgSend_firstObject(v432, v433, v434, v435, v436, v437);
          objc_msgSend_addObjectsFromArray_(v426, v439, (uint64_t)v438, v440, v441, v442);

          unint64_t v448 = objc_msgSend_strokeIndexes(v408, v443, v444, v445, v446, v447);
          objc_msgSend_addIndexes_(v376, v449, (uint64_t)v448, v450, v451, v452);

          unint64_t v458 = objc_msgSend_strokeIndexes(v408, v453, v454, v455, v456, v457);
          objc_msgSend_addIndexes_(v893, v459, (uint64_t)v458, v460, v461, v462);

          v468 = objc_msgSend_strokeIndexes(v408, v463, v464, v465, v466, v467);
          objc_msgSend_addIndexes_(v894, v469, (uint64_t)v468, v470, v471, v472);

          v478 = objc_msgSend_strokeIndexes(v408, v473, v474, v475, v476, v477);
          objc_msgSend_removeIndexes_(v382, v479, (uint64_t)v478, v480, v481, v482);

          unint64_t v483 = v387[v370] + 1;
          v387[v370] = v483;
          v393 = objc_msgSend_objectAtIndexedSubscript_(v896, v484, v370, v485, v486, v487);
          if (v483 >= objc_msgSend_count(v393, v488, v489, v490, v491, v492))
          {

            goto LABEL_89;
          }
          unint64_t v497 = objc_msgSend_objectAtIndexedSubscript_(v896, v493, v370, v494, v495, v496);
          uint64_t v502 = objc_msgSend_objectAtIndexedSubscript_(v497, v498, v483, v499, v500, v501);

          v408 = (void *)v502;
          if (!v502)
          {
            v393 = 0;
            goto LABEL_89;
          }
        }
        v393 = v408;
LABEL_89:
      }
      ++v370;
      continue;
    }
    break;
  }
  unint64_t v503 = 0;
  while (v503 < objc_msgSend_count(v896, v371, v372, v373, v374, v375))
  {
    uint64_t v508 = objc_msgSend_objectAtIndexedSubscript_(v890, v504, v503, v505, v506, v507);
    uint64_t v514 = objc_msgSend_mutableCopy((void *)v508, v509, v510, v511, v512, v513);

    objc_msgSend_addIndexes_(v514, v515, (uint64_t)nn, v516, v517, v518);
    LOBYTE(v508) = objc_msgSend_isEqualToIndexSet_(v514, v519, (uint64_t)v894, v520, v521, v522);

    ++v503;
    if ((v508 & 1) == 0)
    {
LABEL_117:

      goto LABEL_78;
    }
  }

  objc_msgSend_array(MEMORY[0x1E4F1CA48], v523, v524, v525, v526, v527);
  nunint64_t n = (char *)objc_claimAutoreleasedReturnValue();
  for (junint64_t j = 0; jj < objc_msgSend_count(v895, v528, v529, v530, v531, v532); ++jj)
  {
    uint64_t v538 = objc_msgSend_objectAtIndexedSubscript_(v895, v534, jj, v535, v536, v537);
    if (!objc_msgSend_count(v538, v539, v540, v541, v542, v543))
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v549 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v549, OS_LOG_TYPE_FAULT))
      {
        LOWORD(v914) = 0;
        _os_log_impl(&dword_1C492D000, v549, OS_LOG_TYPE_FAULT, "Found empty row when creating result with best path tokens. It indicates that the given paths don't cover the same strokes.", (uint8_t *)&v914, 2u);
      }
    }
    uint64_t v550 = objc_msgSend_count(nn, v544, v545, v546, v547, v548);
    if (objc_msgSend_count(v538, v551, v552, v553, v554, v555)) {
      uint64_t v550 = objc_msgSend_mergeTokenRow_intoUniqueRows_(CHTokenizedMathResult, v556, (uint64_t)v538, (uint64_t)nn, v559, v560);
    }
    if (objc_msgSend_count(v889, v556, v557, v558, v559, v560) <= jj)
    {
      uint64_t v565 = objc_msgSend_indexPathWithIndex_(MEMORY[0x1E4F28D58], v561, v550, v562, v563, v564);
      objc_msgSend_addObject_(v889, v574, (uint64_t)v565, v575, v576, v577);
    }
    else
    {
      uint64_t v565 = objc_msgSend_objectAtIndexedSubscript_(v889, v561, jj, v562, v563, v564);
      v570 = objc_msgSend_indexPathByAddingIndex_(v565, v566, v550, v567, v568, v569);
      objc_msgSend_setObject_atIndexedSubscript_(v889, v571, (uint64_t)v570, jj, v572, v573);
    }
  }
  v578 = [CHTokenizedResultColumn alloc];
  uint64_t v583 = objc_msgSend_initWithTokenRows_(v578, v579, (uint64_t)nn, v580, v581, v582);
  objc_msgSend_addObject_(v892, v584, (uint64_t)v583, v585, v586, v587);
  objc_msgSend_removeAllIndexes(v893, v588, v589, v590, v591, v592);
  for (kuint64_t k = 0; kk < objc_msgSend_count(v896, v593, v594, v595, v596, v597); ++kk)
  {
    uint64_t v604 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v599, v600, v601, v602, v603);
    objc_msgSend_setObject_atIndexedSubscript_(v895, v605, (uint64_t)v604, kk, v606, v607);

    uint64_t v612 = objc_msgSend_objectAtIndexedSubscript_(v890, v608, kk, v609, v610, v611);
    objc_msgSend_removeAllIndexes(v612, v613, v614, v615, v616, v617);
  }
  unint64_t v618 = 0;
  while (v618 < objc_msgSend_count(v896, v599, v600, v601, v602, v603))
  {
    uint64_t v623 = v902[v618];
    v624 = objc_msgSend_objectAtIndexedSubscript_(v896, v619, v618, v620, v621, v622);
    LOBYTE(v623) = v623 == objc_msgSend_count(v624, v625, v626, v627, v628, v629);

    ++v618;
    if ((v623 & 1) == 0)
    {

      goto LABEL_117;
    }
  }

  uint64_t v635 = objc_msgSend_count(v889, v630, v631, v632, v633, v634);
  uint64_t v641 = objc_msgSend_count(v896, v636, v637, v638, v639, v640);
  unint64_t v647 = 0x1E4F1C000;
  if (v635 != v641)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    unint64_t v648 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v648, OS_LOG_TYPE_FAULT))
    {
      uint64_t v654 = objc_msgSend_count(v889, v649, v650, v651, v652, v653);
      uint64_t v660 = objc_msgSend_count(v896, v655, v656, v657, v658, v659);
      int v914 = 134218240;
      uint64_t v915 = v654;
      __int16 v916 = 2048;
      uint64_t v917 = v660;
      _os_log_impl(&dword_1C492D000, v648, OS_LOG_TYPE_FAULT, "transcriptionPaths count (%ld) != transcriptions count (%ld) after tokenized result is built", (uint8_t *)&v914, 0x16u);
    }

    unint64_t v647 = 0x1E4F1C000uLL;
  }
  v661 = *(void **)(v647 + 2632);
  uint64_t v662 = objc_msgSend_firstObject(v889, v642, v643, v644, v645, v646);
  v667 = objc_msgSend_arrayWithObject_(v661, v663, (uint64_t)v662, v664, v665, v666);

  for (muint64_t m = 1; mm < objc_msgSend_count(v889, v668, v669, v670, v671, v672); ++mm)
  {
    v679 = objc_msgSend_objectAtIndexedSubscript_(v889, v674, mm, v676, v677, v678);
    char v684 = objc_msgSend_containsObject_(v667, v680, (uint64_t)v679, v681, v682, v683);

    if ((v684 & 1) == 0)
    {
      v685 = objc_msgSend_objectAtIndexedSubscript_(v889, v668, mm, v670, v671, v672);
      objc_msgSend_addObject_(v667, v686, (uint64_t)v685, v687, v688, v689);
    }
  }
  v887 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v674, v675, v676, v677, v678);
  v886 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v690, v691, v692, v693, v694);
  for (nunint64_t n = 0; (unint64_t)nn < objc_msgSend_count(v667, v695, v696, v697, v698, v699); ++nn)
  {
    v704 = objc_msgSend_objectAtIndexedSubscript_(v667, v700, (uint64_t)nn, v701, v702, v703);
    v715 = objc_msgSend_string(MEMORY[0x1E4F28E78], v705, v706, v707, v708, v709);
    for (unint64_t i1 = 0; i1 < objc_msgSend_count(v892, v710, v711, v712, v713, v714); ++i1)
    {
      v721 = objc_msgSend_objectAtIndexedSubscript_(v892, v717, i1, v718, v719, v720);
      int v727 = objc_msgSend_mathTokenRows(v721, v722, v723, v724, v725, v726);
      uint64_t v732 = objc_msgSend_indexAtPosition_(v704, v728, i1, v729, v730, v731);
      v737 = objc_msgSend_objectAtIndexedSubscript_(v727, v733, v732, v734, v735, v736);

      long long v900 = 0u;
      long long v901 = 0u;
      long long v898 = 0u;
      long long v899 = 0u;
      id v738 = v737;
      uint64_t v746 = objc_msgSend_countByEnumeratingWithState_objects_count_(v738, v739, (uint64_t)&v898, (uint64_t)v913, 16, v740);
      if (v746)
      {
        uint64_t v747 = *(void *)v899;
        do
        {
          for (uint64_t i2 = 0; i2 != v746; ++i2)
          {
            if (*(void *)v899 != v747) {
              objc_enumerationMutation(v738);
            }
            uint64_t v749 = objc_msgSend_string(*(void **)(*((void *)&v898 + 1) + 8 * i2), v741, v742, v743, v744, v745);
            objc_msgSend_appendString_(v715, v750, (uint64_t)v749, v751, v752, v753);
          }
          uint64_t v746 = objc_msgSend_countByEnumeratingWithState_objects_count_(v738, v741, (uint64_t)&v898, (uint64_t)v913, 16, v745);
        }
        while (v746);
      }
    }
    if (objc_msgSend_containsObject_(v887, v717, (uint64_t)v715, v718, v719, v720)) {
      objc_msgSend_addIndex_(v886, v754, (uint64_t)nn, v755, v756, v757);
    }
    else {
      objc_msgSend_addObject_(v887, v754, (uint64_t)v715, v755, v756, v757);
    }
  }
  if (!objc_msgSend_count(v886, v700, (uint64_t)nn, v701, v702, v703))
  {
    long long v779 = v667;
    nunint64_t n = v892;
    if (v885) {
      goto LABEL_171;
    }
LABEL_174:
    if (!v884) {
      goto LABEL_176;
    }
    goto LABEL_175;
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  float64x2_t v758 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v758, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v914) = 0;
    _os_log_impl(&dword_1C492D000, v758, OS_LOG_TYPE_DEBUG, "Found different segmentation leading to the same transcription. Deduping keeping the transcription path closer to the top.", (uint8_t *)&v914, 2u);
  }

  objc_msgSend_removeObjectsAtIndexes_(v667, v759, (uint64_t)v886, v760, v761, v762);
  unint64_t v763 = 0x1E4F28000uLL;
  objc_msgSend_array(MEMORY[0x1E4F1CA48], v764, v765, v766, v767, v768);
  nunint64_t n = (char *)objc_claimAutoreleasedReturnValue();
  long long v779 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v769, v770, v771, v772, v773);
  for (unint64_t i3 = 0; i3 < objc_msgSend_count(v892, v774, v775, v776, v777, v778); ++i3)
  {
    unint64_t v785 = objc_msgSend_objectAtIndexedSubscript_(v892, v781, i3, v782, v783, v784);
    v796 = objc_msgSend_indexSet(*(void **)(v763 + 3680), v786, v787, v788, v789, v790);
    for (unint64_t i4 = 0; ; ++i4)
    {
      v798 = objc_msgSend_mathTokenRows(v785, v791, v792, v793, v794, v795);
      BOOL v804 = i4 < objc_msgSend_count(v798, v799, v800, v801, v802, v803);

      if (!v804) {
        break;
      }
      unint64_t v805 = 0;
      while (v805 < objc_msgSend_count(v667, v791, v792, v793, v794, v795))
      {
        v810 = objc_msgSend_objectAtIndexedSubscript_(v667, v806, v805, v807, v808, v809);
        BOOL v815 = objc_msgSend_indexAtPosition_(v810, v811, i3, v812, v813, v814) == i4;

        ++v805;
        if (v815) {
          goto LABEL_154;
        }
      }
      objc_msgSend_addIndex_(v796, v806, i4, v807, v808, v809);
LABEL_154:
      ;
    }
    for (unint64_t i5 = 0; i5 < objc_msgSend_count(v667, v791, v792, v793, v794, v795); ++i5)
    {
      v822 = objc_msgSend_objectAtIndexedSubscript_(v667, v817, i5, v819, v820, v821);
      uint64_t v827 = objc_msgSend_indexAtPosition_(v822, v823, i3, v824, v825, v826);

      uint64_t v840 = v827 - objc_msgSend_countOfIndexesInRange_(v796, v828, 0, v827, v829, v830);
      if (objc_msgSend_count(v779, v831, v832, v833, v834, v835) <= i5)
      {
        v841 = objc_msgSend_indexPathWithIndex_(MEMORY[0x1E4F28D58], v836, v840, v837, v838, v839);
        objc_msgSend_addObject_(v779, v850, (uint64_t)v841, v851, v852, v853);
      }
      else
      {
        v841 = objc_msgSend_objectAtIndexedSubscript_(v779, v836, i5, v837, v838, v839);
        v846 = objc_msgSend_indexPathByAddingIndex_(v841, v842, v840, v843, v844, v845);
        objc_msgSend_setObject_atIndexedSubscript_(v779, v847, (uint64_t)v846, i5, v848, v849);
      }
    }
    if (objc_msgSend_count(v796, v817, v818, v819, v820, v821))
    {
      v859 = objc_msgSend_mathTokenRows(v785, v854, v855, v856, v857, v858);
      v865 = objc_msgSend_mutableCopy(v859, v860, v861, v862, v863, v864);

      objc_msgSend_removeObjectsAtIndexes_(v865, v866, (uint64_t)v796, v867, v868, v869);
      v870 = [CHTokenizedResultColumn alloc];
      v875 = objc_msgSend_initWithTokenRows_(v870, v871, (uint64_t)v865, v872, v873, v874);
      objc_msgSend_addObject_(nn, v876, (uint64_t)v875, v877, v878, v879);
    }
    else
    {
      v865 = objc_msgSend_objectAtIndexedSubscript_(v892, v854, i3, v856, v857, v858);
      objc_msgSend_addObject_(nn, v880, (uint64_t)v865, v881, v882, v883);
    }

    unint64_t v763 = 0x1E4F28000;
  }

  if (!v885) {
    goto LABEL_174;
  }
LABEL_171:
  *v885 = nn;
  if (v884) {
LABEL_175:
  }
    void *v884 = v779;
LABEL_176:

  if (v902) {
    operator delete(v902);
  }

LABEL_179:
}

void sub_1C4A5DC38(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v1 + 176);
  if (v4)
  {
    *(void *)(v1 + 184) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

void sub_1C4A5E59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1C4A5EA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C4A5EB90(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v9 = v3;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24))
  {
    uint64_t v10 = objc_msgSend_strokeIndexes(v3, v4, v5, v6, v7, v8);
    v182[0] = MEMORY[0x1E4F143A8];
    v182[1] = 3221225472;
    v182[2] = sub_1C4A5F2D8;
    v182[3] = &unk_1E64E2E28;
    id v183 = *(id *)(a1 + 32);
    unint64_t v15 = objc_msgSend_indexesPassingTest_(v10, v11, (uint64_t)v182, v12, v13, v14);

    uint64_t v173 = v15;
    if (objc_msgSend_count(v15, v16, v17, v18, v19, v20))
    {
      uint64_t v26 = objc_msgSend_count(v15, v21, v22, v23, v24, v25);
      uint64_t v32 = objc_msgSend_strokeIndexes(v9, v27, v28, v29, v30, v31);
      uint64_t v38 = objc_msgSend_count(v32, v33, v34, v35, v36, v37);

      if (v26 == v38)
      {
        uint64_t v39 = *(void *)(*(void *)(a1 + 96) + 8);
        uint64_t v40 = v173;
        if (!*(unsigned char *)(v39 + 24) || *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24))
        {
          *(unsigned char *)(v39 + 24) = 1;
          *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = 1;
LABEL_32:

          goto LABEL_33;
        }
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        uint64_t v170 = (id)qword_1EA3C9F90[0];
        if (!os_log_type_enabled(v170, OS_LOG_TYPE_ERROR)) {
          goto LABEL_28;
        }
        LOWORD(__dst[0]) = 0;
        uint64_t v171 = "Non-consecutive sequence of tokens encountered when replacing scrubbed value.";
      }
      else
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        uint64_t v170 = (id)qword_1EA3C9F90[0];
        if (!os_log_type_enabled(v170, OS_LOG_TYPE_ERROR)) {
          goto LABEL_28;
        }
        LOWORD(__dst[0]) = 0;
        uint64_t v171 = "Partially covered token encountered when replacing scrubbed value.";
      }
      _os_log_impl(&dword_1C492D000, v170, OS_LOG_TYPE_ERROR, v171, (uint8_t *)__dst, 2u);
LABEL_28:

      uint64_t v172 = *(void *)(a1 + 80);
LABEL_31:
      *(unsigned char *)(*(void *)(v172 + 8) + 24) = 0;
      uint64_t v40 = v173;
      goto LABEL_32;
    }
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24))
    {
LABEL_21:
      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 96) + 8) + 24))
      {
        uint64_t v104 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v21, v22, v23, v24, v25);
        double v110 = objc_msgSend_strokeIndexes(v9, v105, v106, v107, v108, v109);
        v174[0] = MEMORY[0x1E4F143A8];
        v174[1] = 3221225472;
        v174[2] = sub_1C4A5F2E4;
        v174[3] = &unk_1E64E2E70;
        id v175 = *(id *)(a1 + 32);
        id v111 = v9;
        id v176 = v111;
        id v112 = *(id *)(a1 + 72);
        uint64_t v113 = *(void *)(a1 + 592);
        id v177 = v112;
        uint64_t v179 = v113;
        id v114 = v104;
        id v178 = v114;
        objc_msgSend_enumerateIndexesUsingBlock_(v110, v115, (uint64_t)v174, v116, v117, v118);

        uint64_t v119 = [CHTokenizedMathResultToken alloc];
        uint64_t v125 = objc_msgSend_string(v111, v120, v121, v122, v123, v124);
        objc_msgSend_score(v111, v126, v127, v128, v129, v130);
        double v132 = v131;
        objc_msgSend_bounds(v111, v133, v134, v135, v136, v137);
        double v139 = v138;
        double v141 = v140;
        double v143 = v142;
        double v145 = v144;
        uint64_t v151 = objc_msgSend_properties(v111, v146, v147, v148, v149, v150);
        uint64_t v157 = objc_msgSend_maskedAlternative(v111, v152, v153, v154, v155, v156);
        objc_msgSend_maskedAlternativeScore(v111, v158, v159, v160, v161, v162);
        double v165 = objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_maskedAlternative_maskedAlternativeScore_(v119, v163, (uint64_t)v125, (uint64_t)v114, v151, (uint64_t)v157, v132, v139, v141, v143, v145, v164);

        objc_msgSend_addObject_(*(void **)(a1 + 64), v166, (uint64_t)v165, v167, v168, v169);
      }
      else
      {
        objc_msgSend_addObject_(*(void **)(a1 + 64), v21, (uint64_t)v9, v23, v24, v25);
      }
      uint64_t v172 = *(void *)(a1 + 88);
      goto LABEL_31;
    }
    for (unint64_t i = 0; ; ++i)
    {
      if (i >= objc_msgSend_count(*(void **)(a1 + 40), v21, v22, v23, v24, v25)) {
        goto LABEL_21;
      }
      uint64_t v42 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 48), v21, i, v23, v24, v25);
      uint64_t v48 = objc_msgSend_mutableCopy(v42, v43, v44, v45, v46, v47);

      objc_msgSend_shiftIndexesStartingAtIndex_by_(v48, v49, 0, *(void *)(a1 + 104), v50, v51);
      uint64_t v52 = *(void **)(a1 + 56);
      uint64_t v57 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 48), v53, i, v54, v55, v56);
      objc_msgSend_boundsForStrokeIndexes_(v52, v58, (uint64_t)v57, v59, v60, v61);
      double v63 = v62;
      double v65 = v64;
      double v67 = v66;
      double v69 = v68;

      objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v70, i, v71, v72, v73);
      id v74 = objc_claimAutoreleasedReturnValue();
      uint64_t v80 = (const char *)objc_msgSend_UTF8String(v74, v75, v76, v77, v78, v79);
      size_t v81 = strlen(v80);
      if (v81 >= 0x7FFFFFFFFFFFFFF8) {
        sub_1C4949B7C();
      }
      uint64_t v82 = (unsigned char *)v81;
      if (v81 >= 0x17) {
        break;
      }
      HIBYTE(v181) = v81;
      uint64_t v83 = __dst;
      if (v81) {
        goto LABEL_17;
      }
LABEL_18:
      v82[(void)v83] = 0;
      int v86 = sub_1C493DB2C((void *)(a1 + 112), __dst);
      if (SHIBYTE(v181) < 0) {
        operator delete(__dst[0]);
      }

      id v87 = [CHTokenizedMathResultToken alloc];
      uint64_t v92 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v88, i, v89, v90, v91);
      uint64_t v95 = objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v87, v93, (uint64_t)v92, (uint64_t)v48, v86 | 0x100000, v94, 1.0, v63, v65, v67, v69);

      objc_msgSend_addObject_(*(void **)(a1 + 64), v96, (uint64_t)v95, v97, v98, v99);
      objc_msgSend_addIndexes_(*(void **)(a1 + 72), v100, (uint64_t)v48, v101, v102, v103);
    }
    uint64_t v84 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v81 | 7) != 0x17) {
      uint64_t v84 = v81 | 7;
    }
    uint64_t v85 = v84 + 1;
    uint64_t v83 = (void **)operator new(v84 + 1);
    __dst[1] = v82;
    unint64_t v181 = v85 | 0x8000000000000000;
    __dst[0] = v83;
LABEL_17:
    memmove(v83, v80, (size_t)v82);
    goto LABEL_18;
  }
LABEL_33:
}

void sub_1C4A5F168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A5F2D8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_containsIndex_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

uint64_t sub_1C4A5F2E4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *(void **)(a1 + 32);
  v39[0] = MEMORY[0x1E4F143A8];
  v39[1] = 3221225472;
  v39[2] = sub_1C4A5F3F0;
  v39[3] = &unk_1E64E2E48;
  v39[4] = a2;
  uint64_t v9 = objc_msgSend_indexesPassingTest_(v8, a2, (uint64_t)v39, a4, a5, a6);
  uint64_t v15 = objc_msgSend_count(v9, v10, v11, v12, v13, v14);

  uint64_t v21 = objc_msgSend_strokeIndexes(*(void **)(a1 + 40), v16, v17, v18, v19, v20);
  IndeCGFloat x = objc_msgSend_lastIndex(v21, v22, v23, v24, v25, v26);
  if (Index >= objc_msgSend_firstIndex(*(void **)(a1 + 48), v28, v29, v30, v31, v32)) {
    uint64_t v33 = *(void *)(a1 + 64);
  }
  else {
    uint64_t v33 = 0;
  }

  return objc_msgSend_addIndex_(*(void **)(a1 + 56), v34, (uint64_t)&a2[v33 - v15], v35, v36, v37);
}

void sub_1C4A5F3D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A5F3E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1C4A5F3F0(uint64_t a1, unint64_t a2)
{
  return *(void *)(a1 + 32) > a2;
}

uint64_t sub_1C4A5F400(uint64_t a1, uint64_t a2)
{
  return sub_1C4A6C468(a1 + 112, a2 + 112);
}

uint64_t sub_1C4A5F40C(uint64_t a1)
{
  return sub_1C4947180(a1 + 112);
}

void sub_1C4A5F6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4A5F9E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A5FE5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A5FF8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A600A0(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1C4A600D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A600E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A60284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 sub_1C4A602D8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1C4A602E8(void *a1, void *a2)
{
  id v3 = a2;
  id v19 = v3;
  if (!a1[6])
  {
    uint64_t v9 = *(double **)(a1[4] + 8);
    CGFloat v10 = v9[6];
    CGFloat v11 = v9[7];
    CGFloat v12 = v9[8];
    CGFloat v13 = v9[9];
    objc_msgSend_bounds(v3, v4, v5, v6, v7, v8);
    v22.origin.CGFloat x = v14;
    v22.origin.CGFloat y = v15;
    v22.size.CGFloat width = v16;
    v22.size.CGFloat height = v17;
    v21.origin.CGFloat x = v10;
    v21.origin.CGFloat y = v11;
    v21.size.CGFloat width = v12;
    v21.size.CGFloat height = v13;
    *(CGRect *)(*(void *)(a1[4] + 8) + 48) = CGRectUnion(v21, v22);
    id v3 = v19;
  }
  objc_msgSend_score(v3, v4, v5, v6, v7, v8);
  *(double *)(*(void *)(a1[5] + 8) + 24) = v18 * *(double *)(*(void *)(a1[5] + 8) + 24);
}

void sub_1C4A603A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A603BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A60530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A605B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A60658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6066C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6070C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6072C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A607EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A60804(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void **)(a1 + 32);
  objc_msgSend_strokeIndexes(a2, (const char *)a2, a3, a4, a5, a6);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v7, (uint64_t)v11, v8, v9, v10);
}

void sub_1C4A6085C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A60920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A60938(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_msgSend_bounds(v3, v4, v5, v6, v7, v8);
  v22[0] = v9;
  v22[1] = v10;
  v22[2] = v11;
  v22[3] = v12;
  CGFloat v13 = *(void **)(a1 + 32);
  CGFloat v17 = objc_msgSend_valueWithBytes_objCType_(MEMORY[0x1E4F29238], v14, (uint64_t)v22, (uint64_t)"{CGRect={CGPoint=dd}{CGSize=dd}}", v15, v16);
  objc_msgSend_addObject_(v13, v18, (uint64_t)v17, v19, v20, v21);
}

void sub_1C4A609B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A609C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A60BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C4A60C14()
{
  id v0 = (void *)qword_1EA3C9D48;
  qword_1EA3C9D48 = (uint64_t)&unk_1F203D058;
}

void sub_1C4A60C2C(void *a1, void *a2)
{
  id v3 = a2;
  ++*(void *)(*(void *)(a1[4] + 8) + 24);
  id v57 = v3;
  objc_msgSend_score(v3, v4, v5, v6, v7, v8);
  *(long double *)(*(void *)(a1[5] + 8) + 24) = log(v9) + *(double *)(*(void *)(a1[5] + 8) + 24);
  objc_msgSend_score(v57, v10, v11, v12, v13, v14);
  double v21 = v20;
  uint64_t v22 = *(void *)(a1[6] + 8);
  double v23 = *(double *)(v22 + 24);
  if (v21 < v23)
  {
    objc_msgSend_score(v57, v15, v16, v17, v18, v19);
    uint64_t v22 = *(void *)(a1[6] + 8);
  }
  *(double *)(v22 + 24) = v23;
  uint64_t v24 = objc_msgSend_maskedAlternative(v57, v15, v16, v17, v18, v19);

  if (v24)
  {
    uint64_t v30 = (void *)qword_1EA3C9D48;
    uint64_t v31 = objc_msgSend_maskedAlternative(v57, v25, v26, v27, v28, v29);
    uint64_t v36 = objc_msgSend_objectForKeyedSubscript_(v30, v32, (uint64_t)v31, v33, v34, v35);

    if (v36)
    {
      uint64_t v42 = (void *)qword_1EA3C9D48;
      uint64_t v43 = objc_msgSend_maskedAlternative(v57, v37, v38, v39, v40, v41);
      uint64_t v48 = objc_msgSend_objectForKeyedSubscript_(v42, v44, (uint64_t)v43, v45, v46, v47);
      objc_msgSend_doubleValue(v48, v49, v50, v51, v52, v53);
      double v55 = v54;
    }
    else
    {
      double v55 = 0.9;
    }
    objc_msgSend_maskedAlternativeScore(v57, v37, v38, v39, v40, v41);
    *(unsigned char *)(*(void *)(a1[7] + 8) + 24) |= v56 > v55;
  }
}

void sub_1C4A60D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A60DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A60DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A60DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A60DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A60ECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A60EEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A61160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6150C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6166C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A617D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A617EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A617FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A61814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A61828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A61838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6184C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6185C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A61870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A61930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A619FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A61BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A61BFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A61C0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A61C20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A61D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A61D50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A61D60(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void **)(a1 + 32);
  objc_msgSend_string(a2, (const char *)a2, a3, a4, a5, a6);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v7, (uint64_t)v11, v8, v9, v10);
}

void sub_1C4A61DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A61F38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A636E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A636F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4A639FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_setWithObjects_(MEMORY[0x1E4F1CAD0], a2, @"\\left("), a4, a5, a6, CFSTR("\\left|"), CFSTR("\\left\\lceil"), CFSTR("\\left\\lfloor"), 0;
  uint64_t v7 = (void *)qword_1EA3C9DF0;
  qword_1EA3C9DF0 = v6;

  uint64_t v12 = objc_msgSend_setWithObjects_(MEMORY[0x1E4F1CAD0], v8, @"\\right"), v9, v10, v11, @"\\right|", @"\\right\\rceil", @"\\right\\rfloor", 0);
  uint64_t v13 = (void *)qword_1EA3C9DF8;
  qword_1EA3C9DF8 = v12;

  uint64_t v18 = objc_msgSend_setWithObjects_(MEMORY[0x1E4F1CAD0], v14, @"{", v15, v16, v17, @"[", @"\\begin{array}{lr}", 0);
  uint64_t v19 = (void *)qword_1EA3C9E00;
  qword_1EA3C9E00 = v18;

  uint64_t v24 = objc_msgSend_setWithObjects_(MEMORY[0x1E4F1CAD0], v20, @"}", v21, v22, v23, @"]", @"\\end{array}", 0);
  uint64_t v25 = (void *)qword_1EA3C9E08;
  qword_1EA3C9E08 = v24;

  uint64_t v26 = (void *)qword_1EA3C9E10;
  qword_1EA3C9E10 = (uint64_t)&unk_1F203D080;

  objc_msgSend_setWithObjects_(MEMORY[0x1E4F1CAD0], v27, @"\\", v28, v29, v30, @"\\,", @"\\;"",
    @"\\\\"",
    @"\\color{orange}{+}",
  uint64_t v31 = 0);
  uint64_t v32 = (void *)qword_1EA3C9E18;
  qword_1EA3C9E18 = v31;

  uint64_t v37 = objc_msgSend_setWithObjects_(MEMORY[0x1E4F1CAD0], v33, @"^", v34, v35, v36, @"_", @"\\frac", @"\\sqrt", 0);
  uint64_t v38 = (void *)qword_1EA3C9E20;
  qword_1EA3C9E20 = v37;

  uint64_t v39 = (void *)qword_1EA3C9E28;
  qword_1EA3C9E28 = (uint64_t)&unk_1F203D0A8;
}

uint64_t sub_1C4A63BDC(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = v2;
  self;
  uint64_t v9 = objc_msgSend_mutableCopy(v2, v4, v5, v6, v7, v8);
  objc_msgSend_removeObject_(v9, v10, (uint64_t)&stru_1F20141C8, v11, v12, v13);
  if (!objc_msgSend_count(v9, v14, v15, v16, v17, v18))
  {
    uint64_t v29 = 0;
    goto LABEL_27;
  }
  uint64_t v23 = objc_msgSend_objectAtIndex_(v9, v19, 0, v20, v21, v22);
  if (objc_msgSend_isEqualToString_(v23, v24, @"-", v25, v26, v27))
  {
    id v28 = v9;
    self;
  }
  else
  {
    id v34 = v23;
    if (qword_1EA3C9D98 != -1) {
      dispatch_once(&qword_1EA3C9D98, &unk_1F2010A40);
    }
    char v35 = objc_msgSend_containsObject_((void *)qword_1EA3C9DA0, v30, (uint64_t)v34, v31, v32, v33);

    if (v35) {
      goto LABEL_26;
    }
  }

  for (unint64_t i = 1; ; ++i)
  {
    if (i >= objc_msgSend_count(v9, v36, v37, v38, v39, v40))
    {
      id v2 = v3;
      uint64_t v29 = 0;
      goto LABEL_27;
    }
    uint64_t v46 = objc_msgSend_objectAtIndex_(v9, v42, i, v43, v44, v45);
    if (!objc_msgSend_isEqualToString_(v46, v47, @"-", v48, v49, v50))
    {
      id v34 = v46;
      if (qword_1EA3C9D98 != -1) {
        dispatch_once(&qword_1EA3C9D98, &unk_1F2010A40);
      }
      int v76 = objc_msgSend_containsObject_((void *)qword_1EA3C9DA0, v72, (uint64_t)v34, v73, v74, v75);

      if (v76) {
        goto LABEL_26;
      }
      goto LABEL_10;
    }
    id v51 = v9;
    self;
    if (objc_msgSend_count(v51, v52, v53, v54, v55, v56) <= i - 1)
    {

      goto LABEL_10;
    }
    if (objc_msgSend_count(v51, v57, v58, v59, v60, v61) <= i - 1) {
      break;
    }
    objc_msgSend_objectAtIndex_(v51, v62, i - 1, v63, v64, v65);
    id v70 = (id)objc_claimAutoreleasedReturnValue();
    if (qword_1EA3C9D98 != -1) {
      dispatch_once(&qword_1EA3C9D98, &unk_1F2010A40);
    }
    char v71 = objc_msgSend_containsObject_((void *)qword_1EA3C9DA0, v66, (uint64_t)v70, v67, v68, v69);

    if ((v71 & 1) == 0) {
      goto LABEL_25;
    }
LABEL_10:
  }
LABEL_25:
  id v34 = v46;
LABEL_26:

  uint64_t v29 = 1;
  id v2 = v3;
LABEL_27:

  return v29;
}

void sub_1C4A63E48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A63F08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A63F28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A63F40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A63F54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A64E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_1C494685C((uint64_t)&a23);
  sub_1C494685C((uint64_t)&a29);

  _Unwind_Resume(a1);
}

void sub_1C4A64FC4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_setWithObjects_(MEMORY[0x1E4F1CAD0], a2, @"\\frac", a4, a5, a6, @"\\sqrt", @"^", @"_", 0);
  uint64_t v7 = (void *)qword_1EA3C9E40;
  qword_1EA3C9E40 = v6;

  uint64_t v13 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v8, v9, v10, v11, v12);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v14, @"°", @"^ { \\circ }", v15, v16);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v17, @"'", @"^ { \\prime }", v18, v19);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v20, @"\"", @"^ { \\prime \\prime }", v21, v22);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v23, @"⁰", @"^ { 0 }", v24, v25);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v26, @"¹", @"^ { 1 }", v27, v28);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v29, @"²", @"^ { 2 }", v30, v31);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v32, @"³", @"^ { 3 }", v33, v34);
  uint64_t v39 = objc_msgSend_stringWithFormat_(NSString, v35, @"%C", v36, v37, v38, 8308);
  uint64_t v44 = objc_msgSend_stringWithFormat_(NSString, v40, @"^ { %lu }", v41, v42, v43, 4);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v45, (uint64_t)v39, (uint64_t)v44, v46, v47);

  uint64_t v52 = objc_msgSend_stringWithFormat_(NSString, v48, @"%C", v49, v50, v51, 8309);
  id v57 = objc_msgSend_stringWithFormat_(NSString, v53, @"^ { %lu }", v54, v55, v56, 5);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v58, (uint64_t)v52, (uint64_t)v57, v59, v60);

  uint64_t v65 = objc_msgSend_stringWithFormat_(NSString, v61, @"%C", v62, v63, v64, 8310);
  id v70 = objc_msgSend_stringWithFormat_(NSString, v66, @"^ { %lu }", v67, v68, v69, 6);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v71, (uint64_t)v65, (uint64_t)v70, v72, v73);

  uint64_t v78 = objc_msgSend_stringWithFormat_(NSString, v74, @"%C", v75, v76, v77, 8311);
  uint64_t v83 = objc_msgSend_stringWithFormat_(NSString, v79, @"^ { %lu }", v80, v81, v82, 7);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v84, (uint64_t)v78, (uint64_t)v83, v85, v86);

  uint64_t v91 = objc_msgSend_stringWithFormat_(NSString, v87, @"%C", v88, v89, v90, 8312);
  uint64_t v96 = objc_msgSend_stringWithFormat_(NSString, v92, @"^ { %lu }", v93, v94, v95, 8);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v97, (uint64_t)v91, (uint64_t)v96, v98, v99);

  uint64_t v104 = objc_msgSend_stringWithFormat_(NSString, v100, @"%C", v101, v102, v103, 8313);
  uint64_t v109 = objc_msgSend_stringWithFormat_(NSString, v105, @"^ { %lu }", v106, v107, v108, 9);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v110, (uint64_t)v104, (uint64_t)v109, v111, v112);

  uint64_t v117 = objc_msgSend_stringWithFormat_(NSString, v113, @"%C", v114, v115, v116, 8320);
  uint64_t v122 = objc_msgSend_stringWithFormat_(NSString, v118, @"_ { %lu }", v119, v120, v121, 0);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v123, (uint64_t)v117, (uint64_t)v122, v124, v125);

  uint64_t v130 = objc_msgSend_stringWithFormat_(NSString, v126, @"%C", v127, v128, v129, 8321);
  uint64_t v135 = objc_msgSend_stringWithFormat_(NSString, v131, @"_ { %lu }", v132, v133, v134, 1);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v136, (uint64_t)v130, (uint64_t)v135, v137, v138);

  double v143 = objc_msgSend_stringWithFormat_(NSString, v139, @"%C", v140, v141, v142, 8322);
  uint64_t v148 = objc_msgSend_stringWithFormat_(NSString, v144, @"_ { %lu }", v145, v146, v147, 2);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v149, (uint64_t)v143, (uint64_t)v148, v150, v151);

  uint64_t v156 = objc_msgSend_stringWithFormat_(NSString, v152, @"%C", v153, v154, v155, 8323);
  uint64_t v161 = objc_msgSend_stringWithFormat_(NSString, v157, @"_ { %lu }", v158, v159, v160, 3);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v162, (uint64_t)v156, (uint64_t)v161, v163, v164);

  uint64_t v169 = objc_msgSend_stringWithFormat_(NSString, v165, @"%C", v166, v167, v168, 8324);
  uint64_t v174 = objc_msgSend_stringWithFormat_(NSString, v170, @"_ { %lu }", v171, v172, v173, 4);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v175, (uint64_t)v169, (uint64_t)v174, v176, v177);

  id v182 = objc_msgSend_stringWithFormat_(NSString, v178, @"%C", v179, v180, v181, 8325);
  id v187 = objc_msgSend_stringWithFormat_(NSString, v183, @"_ { %lu }", v184, v185, v186, 5);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v188, (uint64_t)v182, (uint64_t)v187, v189, v190);

  uint64_t v195 = objc_msgSend_stringWithFormat_(NSString, v191, @"%C", v192, v193, v194, 8326);
  uint64_t v200 = objc_msgSend_stringWithFormat_(NSString, v196, @"_ { %lu }", v197, v198, v199, 6);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v201, (uint64_t)v195, (uint64_t)v200, v202, v203);

  uint64_t v208 = objc_msgSend_stringWithFormat_(NSString, v204, @"%C", v205, v206, v207, 8327);
  double v213 = objc_msgSend_stringWithFormat_(NSString, v209, @"_ { %lu }", v210, v211, v212, 7);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v214, (uint64_t)v208, (uint64_t)v213, v215, v216);

  uint64_t v221 = objc_msgSend_stringWithFormat_(NSString, v217, @"%C", v218, v219, v220, 8328);
  long long v226 = objc_msgSend_stringWithFormat_(NSString, v222, @"_ { %lu }", v223, v224, v225, 8);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v227, (uint64_t)v221, (uint64_t)v226, v228, v229);

  uint64_t v234 = objc_msgSend_stringWithFormat_(NSString, v230, @"%C", v231, v232, v233, 8329);
  uint64_t v239 = objc_msgSend_stringWithFormat_(NSString, v235, @"_ { %lu }", v236, v237, v238, 9);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v240, (uint64_t)v234, (uint64_t)v239, v241, v242);

  objc_msgSend_setObject_forKeyedSubscript_(v13, v243, @"\\\\ + &", @"\\\\ &", v244, v245);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v246, @"+", @"\\color{orange}{+}", v247, v248);
  uint64_t v249 = (void *)qword_1EA3C9E48;
  qword_1EA3C9E48 = (uint64_t)v13;
}

void sub_1C4A656BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A656CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A656E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A656F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A65708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A65718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A65730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A65744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A65920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6597C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], a2, a3, a4, a5, a6);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v7, @"x", @"×", v8, v9);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v10, @"*", @"⋅", v11, v12);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v13, @"/", @"÷", v14, v15);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v16, @"pi", @"π", v17, v18);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v19, (uint64_t)&stru_1F20141C8, @"\n", v20, v21);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v22, @"=", @"hline", v23, v24);
  uint64_t v25 = (void *)qword_1EA3C9E58;
  qword_1EA3C9E58 = (uint64_t)v6;
}

void sub_1C4A65A54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A65AF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A65B08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A65B18(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = (void *)MEMORY[0x1E4F1CAD0];
  objc_msgSend_componentsSeparatedByString_(@"!() + , - . / 0 1 2 3 4 5 6 7 8 9 : = \\\\ \\ \\$ \\% \\arccos \\arcsin \\arctan \\ast \\cdot \\circ \\cos \\cosh \\cot \\coth \\csc \\div \\lceil \\left( \\left\\lceil \\left\\lfloor \\left| \\lfloor \\lg \\ln \\log \\prime \\rceil \\rfloor \\right) \\right\\rceil \\right\\rfloor \\right| \\sec \\sin \\sinh \\tan \\tanh \\times a A b B c C d D e E f F g G H h i I j J k K L l m M n N o O p P q Q r R s S t T u U v V w W x X y Y z Z | \\text{€} \\text{£} \\text{¥} \\text{¢} \\text{₺} \\text{₴} \\text{₽} \\text{₩} \\text{°} '", a2, @" ", a4, a5, a6);
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v11 = objc_msgSend_setWithArray_(v6, v7, (uint64_t)v13, v8, v9, v10);
  uint64_t v12 = (void *)qword_1EA3C9D60;
  qword_1EA3C9D60 = v11;
}

void sub_1C4A65B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A65BA8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_containsObject_((void *)qword_1EA3C9D60, a2, (uint64_t)a2, a4, a5, a6) ^ 1;
}

void sub_1C4A65C54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A65C68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A65C78(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @" !()+-×*⋅÷:/.,0123456789=%°'\"aAbBcCdDeEfFgGHhiIjJkKLlmMnNoOpPqQrRsStTuUvVwWxXyYzZ|$¢£¥₩€₴₺₽", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C9E68;
  qword_1EA3C9E68 = v6;
}

void sub_1C4A65EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_1C4A65F5C(uint64_t a1)
{
  id v2 = objc_alloc(MEMORY[0x1E4F56920]);
  uint64_t v7 = objc_msgSend_initWithLocales_(v2, v3, *(void *)(a1 + 32), v4, v5, v6);
  uint64_t v8 = (void *)qword_1EA3C9E78;
  qword_1EA3C9E78 = v7;
}

void sub_1C4A66120(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6617C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6618C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_regularExpressionWithPattern_options_error_(MEMORY[0x1E4F28FD8], a2, @"^(?!0*(?:[,. ]0*)*$)(?:[$€£¥¢₺₴₽₩])?[\\d.]\\d*[\\d,. ]*(?:\\d*[,. ]\\d+)*[\\dA-Za-z,. ]*$", 0, 0, a6);
  uint64_t v7 = (void *)qword_1EA3C9E88;
  qword_1EA3C9E88 = v6;
}

void sub_1C4A663AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A66484(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A667F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_1C4A668C0(uint64_t a1)
{
  id v2 = objc_alloc(MEMORY[0x1E4F56920]);
  uint64_t v7 = objc_msgSend_initWithLocales_(v2, v3, *(void *)(a1 + 32), v4, v5, v6);
  uint64_t v8 = (void *)qword_1EA3C9E90;
  qword_1EA3C9E90 = v7;

  uint64_t v11 = objc_msgSend_regularExpressionWithPattern_options_error_(MEMORY[0x1E4F28FD8], v9, @"[+-x×\\*\\.⋅÷/:]?\\s?[\\$€£¥¢₺₴₽₩]?[\\d\\.⋅,]+", 0, 0, v10);
  uint64_t v12 = (void *)qword_1EA3C9E98;
  qword_1EA3C9E98 = v11;
}

void sub_1C4A66A14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A66A2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A66A3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A66A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A66C64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A66CB4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C9EB0;
  qword_1EA3C9EB0 = v6;
}

void sub_1C4A67004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6701C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A67030(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A67048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6705C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A67070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A67080(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A67094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A670A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A670BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A670CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A670E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A670F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A67188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6719C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A67338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A676F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1C4A678E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6791C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A67930(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A67944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A67B88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A67C4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A67C64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A67C78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A67C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A67D0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A67EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A67FFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A68010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A68024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A68248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A682A4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C4A68348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A686FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C4A68A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a18, 8);

  _Block_object_dispose(&a24, 8);
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a33, 8);
  sub_1C494685C(v33);
  _Block_object_dispose((const void *)(v34 - 96), 8);
  _Unwind_Resume(a1);
}

double sub_1C4A68AA0(void *a1, void *a2)
{
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  double result = 0.0;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  a1[10] = a2[10];
  a1[11] = a2[11];
  a2[10] = 0;
  a2[11] = 0;
  return result;
}

uint64_t sub_1C4A68AE0(uint64_t a1)
{
  return sub_1C494685C(a1 + 48);
}

__n128 sub_1C4A68AE8(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1C4A68B0C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

uint64_t sub_1C4A68B24(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4A68B34(uint64_t a1)
{
}

void sub_1C4A68B3C(void *a1, void *a2)
{
  id v86 = a2;
  uint64_t v8 = objc_msgSend_string(v86, v3, v4, v5, v6, v7);
  int isEqualToString = objc_msgSend_isEqualToString_(v8, v9, @"{", v10, v11, v12);

  if (isEqualToString)
  {
    if ((objc_msgSend_isEqualToString_(*(void **)(*(void *)(a1[4] + 8) + 40), v14, @"^", v16, v17, v18) & 1) != 0|| objc_msgSend_isEqualToString_(*(void **)(*(void *)(a1[4] + 8) + 40), v19, @"_", v20, v21, v22))
    {
      ++*(void *)(*(void *)(a1[5] + 8) + 24);
    }
    uint64_t v23 = *(void **)(a1[6] + 8);
    uint64_t v24 = v23[7];
    uint64_t v25 = v23[8];
    uint64_t v26 = ((v25 - v24) << 6) - 1;
    uint64_t v27 = *(void *)(a1[4] + 8);
    if (v25 == v24) {
      uint64_t v26 = 0;
    }
    if (v26 == v23[11] + v23[10])
    {
      sub_1C4A6C788(v23 + 6);
      uint64_t v24 = v23[7];
      uint64_t v25 = v23[8];
    }
    if (v25 == v24)
    {
      uint64_t v29 = 0;
    }
    else
    {
      unint64_t v28 = v23[11] + v23[10];
      uint64_t v29 = (void *)(*(void *)(v24 + ((v28 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v28 & 0x1FF));
    }
    *uint64_t v29 = *(id *)(v27 + 40);
    ++v23[11];
  }
  else
  {
    uint64_t v30 = objc_msgSend_string(v86, v14, v15, v16, v17, v18);
    int v35 = objc_msgSend_isEqualToString_(v30, v31, @"}", v32, v33, v34);

    if (v35)
    {
      uint64_t v41 = *(void **)(a1[6] + 8);
      uint64_t v42 = v41[11];
      if (v42)
      {
        if ((objc_msgSend_isEqualToString_(*(void **)(*(void *)(v41[7] + (((unint64_t)(v42 + v41[10] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v42 + v41[10] - 1) & 0x1FF)), v36, @"^", v38, v39, v40) & 1) != 0|| (uint64_t v47 = *(void **)(a1[6] + 8), v48 = v47[11] + v47[10] - 1, objc_msgSend_isEqualToString_(*(void **)(*(void *)(v47[7] + ((v48 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v48 & 0x1FF)), v43, @"_", v44, v45, v46)))
        {
          --*(void *)(*(void *)(a1[5] + 8) + 24);
        }
        uint64_t v49 = *(void **)(a1[6] + 8);
        unint64_t v50 = v49[11] + v49[10] - 1;

        uint64_t v52 = v49[7];
        uint64_t v51 = v49[8];
        uint64_t v53 = v51 - v52;
        BOOL v54 = v51 == v52;
        uint64_t v56 = v49[10];
        uint64_t v55 = v49[11];
        v49[11] = v55 - 1;
        uint64_t v57 = (v53 << 6) - 1;
        if (v54) {
          uint64_t v57 = 0;
        }
        if ((unint64_t)(v57 - (v55 + v56) + 1) >= 0x400)
        {
          operator delete(*(void **)(v51 - 8));
          v49[8] -= 8;
        }
      }
    }
    else
    {
      objc_msgSend_string(v86, v36, v37, v38, v39, v40);
      uint64_t v58 = (NSString *)objc_claimAutoreleasedReturnValue();
      double v59 = symbolHeightCoefficient(v58, *(void *)(*(void *)(a1[5] + 8) + 24));

      if (v59 > 0.0)
      {
        objc_msgSend_bounds(v86, v36, v37, v38, v39, v40);
        if (!CGRectEqualToRect(v88, *MEMORY[0x1E4F1DB20]))
        {
          uint64_t v60 = *(void **)(a1[7] + 8);
          objc_msgSend_bounds(v86, v36, v37, v38, v39, v40);
          uint64_t v62 = (double *)v60[7];
          unint64_t v61 = v60[8];
          double v64 = v63 / v59;
          if ((unint64_t)v62 >= v61)
          {
            uint64_t v69 = (double *)v60[6];
            uint64_t v70 = v62 - v69;
            unint64_t v71 = v70 + 1;
            if ((unint64_t)(v70 + 1) >> 61) {
              sub_1C494A220();
            }
            uint64_t v72 = v61 - (void)v69;
            if (v72 >> 2 > v71) {
              unint64_t v71 = v72 >> 2;
            }
            if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v73 = v71;
            }
            if (v73)
            {
              if (v73 >> 61) {
                sub_1C4949AA8();
              }
              uint64_t v74 = operator new(8 * v73);
            }
            else
            {
              uint64_t v74 = 0;
            }
            uint64_t v75 = (double *)&v74[8 * v70];
            uint64_t v76 = &v74[8 * v73];
            double *v75 = v64;
            uint64_t v65 = v75 + 1;
            if (v62 != v69)
            {
              unint64_t v77 = (char *)v62 - (char *)v69 - 8;
              if (v77 < 0x58) {
                goto LABEL_53;
              }
              if ((unint64_t)((char *)v69 - v74) < 0x20) {
                goto LABEL_53;
              }
              uint64_t v78 = (v77 >> 3) + 1;
              uint64_t v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v80 = &v62[v79 / 0xFFFFFFFFFFFFFFF8];
              uint64_t v75 = (double *)((char *)v75 - v79);
              uint64_t v81 = &v74[8 * v70 - 16];
              uint64_t v82 = v62 - 2;
              uint64_t v83 = v78 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v84 = *(_OWORD *)v82;
                *(v81 - 1) = *((_OWORD *)v82 - 1);
                *uint64_t v81 = v84;
                v81 -= 2;
                v82 -= 4;
                v83 -= 4;
              }
              while (v83);
              uint64_t v62 = v80;
              if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_53:
                do
                {
                  uint64_t v85 = *((void *)v62-- - 1);
                  *((void *)v75-- - 1) = v85;
                }
                while (v62 != v69);
              }
            }
            v60[6] = v75;
            v60[7] = v65;
            v60[8] = v76;
            if (v69) {
              operator delete(v69);
            }
          }
          else
          {
            double *v62 = v64;
            uint64_t v65 = v62 + 1;
          }
          v60[7] = v65;
        }
      }
    }
  }
  uint64_t v66 = objc_msgSend_string(v86, v36, v37, v38, v39, v40);
  uint64_t v67 = *(void *)(a1[4] + 8);
  uint64_t v68 = *(void **)(v67 + 40);
  *(void *)(v67 + 40) = v66;
}

void sub_1C4A68F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A68F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A68FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A692A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A6933C(uint64_t a1, void *a2)
{
  id v34 = a2;
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v8 = objc_msgSend_string(v34, v3, v4, v5, v6, v7);
    if (objc_msgSend_isEqualToString_(v8, v9, @"\\begin{array}{lr}", v10, v11, v12))
    {
LABEL_5:

LABEL_6:
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
      goto LABEL_9;
    }
    uint64_t v18 = objc_msgSend_string(v34, v13, v14, v15, v16, v17);
    if (objc_msgSend_isEqualToString_(v18, v19, @"\\end{array}", v20, v21, v22))
    {

      goto LABEL_5;
    }
    unint64_t v28 = objc_msgSend_string(v34, v23, v24, v25, v26, v27);
    char isEqualToString = objc_msgSend_isEqualToString_(v28, v29, @"&", v30, v31, v32);

    if (isEqualToString) {
      goto LABEL_6;
    }
  }
  objc_msgSend_addObject_(*(void **)(a1 + 32), v3, (uint64_t)v34, v5, v6, v7);
LABEL_9:
}

void sub_1C4A69430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A69458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A69470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A699E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4A699FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);

  _Unwind_Resume(a1);
}

void sub_1C4A69B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4A69B84(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = v3;
  uint64_t v104 = v3;
  if (!*(unsigned char *)(a1 + 56)
    || (objc_msgSend_string(v3, v3, v4, v5, v6, v7),
        uint64_t v9 = objc_claimAutoreleasedReturnValue(),
        int isEqualToString = objc_msgSend_isEqualToString_(v9, v10, @"\\hline", v11, v12, v13),
        v9,
        uint64_t v8 = v104,
        isEqualToString))
  {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v8, (uint64_t)v8, v5, v6, v7);
    goto LABEL_4;
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    id v34 = (void **)(a1 + 32);
LABEL_20:
    objc_msgSend_addObject_(*v34, v8, (uint64_t)v8, v5, v6, v7);
    goto LABEL_22;
  }
  objc_msgSend_string(v104, v104, v15, v5, v6, v7);
  id v20 = (id)objc_claimAutoreleasedReturnValue();
  if (qword_1EA3C9D98 != -1) {
    dispatch_once(&qword_1EA3C9D98, &unk_1F2010A40);
  }
  int v21 = objc_msgSend_containsObject_((void *)qword_1EA3C9DA0, v16, (uint64_t)v20, v17, v18, v19);

  if (!v21)
  {
    uint64_t v49 = (double *)MEMORY[0x1E4F1DB20];
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) && *(unsigned char *)(a1 + 57))
    {
      unint64_t v50 = *(void **)(a1 + 32);
      uint64_t v51 = [CHTokenizedMathResultToken alloc];
      uint64_t v57 = objc_msgSend_indexSet(MEMORY[0x1E4F28D60], v52, v53, v54, v55, v56);
      uint64_t v60 = objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v51, v58, @"\\color{orange}{+}", (uint64_t)v57, 8, v59, 1.0, *v49, v49[1], v49[2], v49[3]);
      objc_msgSend_addObject_(v50, v61, (uint64_t)v60, v62, v63, v64);
    }
    id v34 = (void **)(a1 + 32);
    uint64_t v65 = *(void **)(a1 + 32);
    uint64_t v66 = [CHTokenizedMathResultToken alloc];
    uint64_t v41 = objc_msgSend_indexSet(MEMORY[0x1E4F28D60], v67, v68, v69, v70, v71);
    uint64_t v44 = objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v66, v72, @"&", (uint64_t)v41, 1, v73, 1.0, *v49, v49[1], v49[2], v49[3]);
    objc_msgSend_addObject_(v65, v74, (uint64_t)v44, v75, v76, v77);
    goto LABEL_19;
  }
  uint64_t v26 = v104;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    uint64_t v27 = objc_msgSend_string(v104, v104, v22, v23, v24, v25);
    int v32 = objc_msgSend_isEqualToString_(v27, v28, @"-", v29, v30, v31);

    uint64_t v26 = v104;
    if (v32)
    {
      id v34 = (void **)(a1 + 32);
      uint64_t v33 = *(void **)(a1 + 32);
      int v35 = [CHTokenizedMathResultToken alloc];
      uint64_t v41 = objc_msgSend_indexSet(MEMORY[0x1E4F28D60], v36, v37, v38, v39, v40);
      uint64_t v44 = objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v35, v42, @"&", (uint64_t)v41, 1, v43, 1.0, *MEMORY[0x1E4F1DB20], *(double *)(MEMORY[0x1E4F1DB20] + 8), *(double *)(MEMORY[0x1E4F1DB20] + 16), *(double *)(MEMORY[0x1E4F1DB20] + 24));
      objc_msgSend_addObject_(v33, v45, (uint64_t)v44, v46, v47, v48);
LABEL_19:

      uint64_t v8 = v104;
      goto LABEL_20;
    }
  }
  objc_msgSend_addObject_(*(void **)(a1 + 32), v26, (uint64_t)v26, v23, v24, v25);
  uint64_t v83 = *(void **)(a1 + 32);
  long long v84 = [CHTokenizedMathResultToken alloc];
  uint64_t v90 = objc_msgSend_indexSet(MEMORY[0x1E4F28D60], v85, v86, v87, v88, v89);
  uint64_t v93 = objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v84, v91, @"&", (uint64_t)v90, 1, v92, 1.0, *MEMORY[0x1E4F1DB20], *(double *)(MEMORY[0x1E4F1DB20] + 8), *(double *)(MEMORY[0x1E4F1DB20] + 16), *(double *)(MEMORY[0x1E4F1DB20] + 24));
  objc_msgSend_addObject_(v83, v94, (uint64_t)v93, v95, v96, v97);

LABEL_22:
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  uint64_t v98 = objc_msgSend_string(v104, v78, v79, v80, v81, v82);
  int v103 = objc_msgSend_isEqualToString_(v98, v99, @"\\\\"", v100, v101, v102);

  if (v103)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
  }
LABEL_4:
}

void sub_1C4A69EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A69F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A69F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A69FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A69FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A69FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6A26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6A32C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v9 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v4, v5, v6, v7, v8);
  uint64_t v15 = objc_msgSend_strokeIndexes(v3, v10, v11, v12, v13, v14);
  v42[0] = MEMORY[0x1E4F143A8];
  v42[1] = 3221225472;
  v42[2] = sub_1C4A6A4FC;
  v42[3] = &unk_1E64E2F58;
  id v43 = *(id *)(a1 + 32);
  id v16 = v9;
  id v44 = v16;
  id v45 = *(id *)(a1 + 40);
  objc_msgSend_enumerateIndexesUsingBlock_(v15, v17, (uint64_t)v42, v18, v19, v20);

  uint64_t v26 = objc_msgSend_mutableCopy(v3, v21, v22, v23, v24, v25);
  objc_msgSend_setStrokeIndexes_(v26, v27, (uint64_t)v16, v28, v29, v30);
  uint64_t v31 = *(void **)(a1 + 48);
  uint64_t v37 = objc_msgSend_copy(v26, v32, v33, v34, v35, v36);
  objc_msgSend_addObject_(v31, v38, (uint64_t)v37, v39, v40, v41);
}

void sub_1C4A6A460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  uint64_t v20 = v18;

  _Unwind_Resume(a1);
}

void sub_1C4A6A4FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
  uint64_t v8 = *(void **)(a1 + 40);
  id v18 = (id)v7;
  uint64_t v13 = objc_msgSend_indexOfObject_(*(void **)(a1 + 48), v9, v7, v10, v11, v12);
  objc_msgSend_addIndex_(v8, v14, v13, v15, v16, v17);
}

void sub_1C4A6A564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6AC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6B194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6B2A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v9 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v4, v5, v6, v7, v8);
  uint64_t v15 = objc_msgSend_strokeIndexes(v3, v10, v11, v12, v13, v14);
  uint64_t v42 = MEMORY[0x1E4F143A8];
  uint64_t v43 = 3221225472;
  id v44 = sub_1C4A6B44C;
  id v45 = &unk_1E64E29C8;
  id v46 = *(id *)(a1 + 32);
  id v16 = v9;
  id v47 = v16;
  objc_msgSend_enumerateIndexesUsingBlock_(v15, v17, (uint64_t)&v42, v18, v19, v20);

  uint64_t v26 = objc_msgSend_mutableCopy(v3, v21, v22, v23, v24, v25, v42, v43, v44, v45);
  objc_msgSend_setStrokeIndexes_(v26, v27, (uint64_t)v16, v28, v29, v30);
  uint64_t v31 = *(void **)(a1 + 40);
  uint64_t v37 = objc_msgSend_copy(v26, v32, v33, v34, v35, v36);
  objc_msgSend_addObject_(v31, v38, (uint64_t)v37, v39, v40, v41);
}

void sub_1C4A6B3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  uint64_t v18 = v16;

  _Unwind_Resume(a1);
}

uint64_t sub_1C4A6B44C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *(void **)(a1 + 32);
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  BOOL v21[2] = sub_1C4A6B504;
  v21[3] = &unk_1E64E2E48;
  void v21[4] = a2;
  uint64_t v9 = objc_msgSend_indexesPassingTest_(v8, a2, (uint64_t)v21, a4, a5, a6);
  uint64_t v15 = objc_msgSend_count(v9, v10, v11, v12, v13, v14);

  return objc_msgSend_addIndex_(*(void **)(a1 + 40), v16, (uint64_t)&a2[-v15], v17, v18, v19);
}

void sub_1C4A6B4F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1C4A6B504(uint64_t a1, unint64_t a2)
{
  return *(void *)(a1 + 32) > a2;
}

void sub_1C4A6B940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6BC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6BCB8(uint64_t a1, void *a2)
{
  id v24 = a2;
  if ((objc_msgSend_properties(v24, v3, v4, v5, v6, v7) & 0x4000) != 0)
  {
    uint64_t v13 = *(void **)(a1 + 32);
    uint64_t v14 = objc_msgSend_copy(*(void **)(a1 + 40), v8, v9, v10, v11, v12);
    objc_msgSend_addObject_(v13, v15, (uint64_t)v14, v16, v17, v18);

    objc_msgSend_removeAllObjects(*(void **)(a1 + 40), v19, v20, v21, v22, v23);
  }
  else
  {
    objc_msgSend_addObject_(*(void **)(a1 + 40), v8, (uint64_t)v24, v10, v11, v12);
  }
}

void sub_1C4A6BD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6BD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6C05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6C07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6C128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6C140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  JUMPOUT(0x1C4A6C190);
}

void sub_1C4A6C170()
{
}

void sub_1C4A6C178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A6C1BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C4A6C1C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v9 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v4, v5, v6, v7, v8);
  uint64_t v15 = objc_msgSend_strokeIndexes(v3, v10, v11, v12, v13, v14);
  uint64_t v42 = MEMORY[0x1E4F143A8];
  uint64_t v43 = 3221225472;
  id v44 = sub_1C4A6C36C;
  id v45 = &unk_1E64E2FA8;
  uint64_t v47 = *(void *)(a1 + 40);
  id v16 = v9;
  id v46 = v16;
  objc_msgSend_enumerateIndexesUsingBlock_(v15, v17, (uint64_t)&v42, v18, v19, v20);

  uint64_t v26 = objc_msgSend_mutableCopy(v3, v21, v22, v23, v24, v25, v42, v43, v44, v45);
  objc_msgSend_setStrokeIndexes_(v26, v27, (uint64_t)v16, v28, v29, v30);
  uint64_t v31 = *(void **)(a1 + 32);
  uint64_t v37 = objc_msgSend_copy(v26, v32, v33, v34, v35, v36);
  objc_msgSend_addObject_(v31, v38, (uint64_t)v37, v39, v40, v41);
}

void sub_1C4A6C2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  uint64_t v17 = v15;

  _Unwind_Resume(a1);
}

uint64_t sub_1C4A6C36C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addIndex_(*(void **)(a1 + 32), a2, (uint64_t)&a2[*(void *)(a1 + 40)], a4, a5, a6);
}

uint64_t sub_1C4A6C468(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1C4A6C644(a1, a2) + 40;
  sub_1C4A6C644(v4, a2 + 40);
  sub_1C4A6C644(a1 + 80, a2 + 80);
  sub_1C4A6C644(a1 + 120, a2 + 120);
  sub_1C4A6C644(a1 + 160, a2 + 160);
  sub_1C4A6C644(a1 + 200, a2 + 200);
  sub_1C4A6C644(a1 + 240, a2 + 240);
  sub_1C4A6C644(a1 + 280, a2 + 280);
  sub_1C4A6C644(a1 + 320, a2 + 320);
  sub_1C4A6C644(a1 + 360, a2 + 360);
  sub_1C4A6C644(a1 + 400, a2 + 400);
  sub_1C4A6C644(a1 + 440, a2 + 440);
  return a1;
}

void sub_1C4A6C570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1C49474AC(v12);
  sub_1C49474AC(v11);
  sub_1C49474AC(v18);
  sub_1C49474AC(v17);
  sub_1C49474AC(v16);
  sub_1C49474AC(v15);
  sub_1C49474AC(v14);
  sub_1C49474AC(v13);
  sub_1C49474AC(a9);
  sub_1C49474AC(a10);
  sub_1C49474AC(v10);
  _Unwind_Resume(a1);
}

void sub_1C4A6C5F4()
{
}

void sub_1C4A6C5FC()
{
}

void sub_1C4A6C604()
{
}

void sub_1C4A6C60C()
{
}

void sub_1C4A6C614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1C49474AC(a10);
  sub_1C49474AC(v10);
  _Unwind_Resume(a1);
}

void sub_1C4A6C630(_Unwind_Exception *a1)
{
  sub_1C49474AC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A6C644(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_1C4949C24(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (unint64_t i = *(void **)(a2 + 16); i; unint64_t i = (void *)*i)
    sub_1C49495F0(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_1C4A6C760(_Unwind_Exception *a1)
{
  sub_1C49474AC(v1);
  _Unwind_Resume(a1);
}

void sub_1C4A6C774(_Unwind_Exception *a1)
{
  sub_1C49474AC(v1);
  _Unwind_Resume(a1);
}

void sub_1C4A6C788(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    BOOL v6 = (void *)a1[1];
    int8x8_t v5 = (char *)a1[2];
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_94:
      *(void *)int8x8_t v5 = v8;
      goto LABEL_95;
    }
    uint64_t v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      uint64_t v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1) {
        uint64_t v11 = v10 + 1;
      }
      else {
        uint64_t v11 = v10 + 2;
      }
      uint64_t v12 = v11 >> 1;
      uint64_t v13 = -v12;
      uint64_t v14 = &v7[-8 * v12];
      int64_t v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        unint64_t v7 = (char *)a1[1];
      }
      int8x8_t v5 = &v14[v15];
      uint64_t v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    unint64_t v38 = (v5 - v9) >> 2;
    if (v5 == v9) {
      unint64_t v38 = 1;
    }
    if (v38 >> 61) {
      goto LABEL_111;
    }
    unint64_t v39 = v38 >> 2;
    uint64_t v40 = 8 * v38;
    uint64_t v41 = (char *)operator new(8 * v38);
    uint64_t v42 = &v41[8 * v39];
    int64_t v44 = v5 - v7;
    BOOL v43 = v5 == v7;
    int8x8_t v5 = v42;
    if (!v43)
    {
      int8x8_t v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        uint64_t v92 = &v41[8 * v39];
        id v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          uint64_t v93 = (v45 >> 3) + 1;
          uint64_t v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          id v46 = &v42[v94];
          v7 += v94;
          uint64_t v95 = (long long *)(v6 + 3);
          uint64_t v96 = v92 + 16;
          uint64_t v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *uint64_t v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_91;
          }
        }
      }
      else
      {
        id v46 = &v41[8 * v39];
      }
      do
      {
        uint64_t v99 = *(void *)v7;
        v7 += 8;
        *(void *)id v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_91:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9) {
      goto LABEL_94;
    }
    uint64_t v100 = v9;
LABEL_93:
    operator delete(v100);
    int8x8_t v5 = (char *)a1[2];
    goto LABEL_94;
  }
  uint64_t v18 = (char *)a1[2];
  uint64_t v17 = (char *)a1[3];
  uint64_t v20 = (char *)*a1;
  uint64_t v19 = (char *)a1[1];
  uint64_t v21 = v18 - v19;
  uint64_t v22 = (v18 - v19) >> 3;
  uint64_t v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    uint64_t v24 = operator new(0x1000uLL);
    uint64_t v25 = v24;
    if (v17 != v18)
    {
      *(void *)uint64_t v18 = v24;
LABEL_95:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      unint64_t v69 = (v17 - v19) >> 2;
      if (v18 == v19) {
        unint64_t v69 = 1;
      }
      if (v69 >> 61) {
        goto LABEL_111;
      }
      unint64_t v70 = (v69 + 3) >> 2;
      uint64_t v71 = 8 * v69;
      uint64_t v72 = (char *)operator new(8 * v69);
      uint64_t v47 = &v72[8 * v70];
      uint64_t v73 = v47;
      if (v18 != v19)
      {
        uint64_t v73 = &v47[8 * v22];
        uint64_t v74 = &v72[8 * v70];
        uint64_t v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38) {
          goto LABEL_115;
        }
        uint64_t v76 = &v72[8 * v70];
        uint64_t v74 = v76;
        uint64_t v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20) {
          goto LABEL_115;
        }
        unint64_t v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v74 = &v47[v78];
        uint64_t v75 = &v19[v78];
        uint64_t v79 = (long long *)(v19 + 16);
        uint64_t v80 = v76 + 16;
        uint64_t v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *uint64_t v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_115:
          do
          {
            uint64_t v83 = *(void *)v75;
            v75 += 8;
            *(void *)uint64_t v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        uint64_t v47 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v47 = v19;
    }
    *((void *)v47 - 1) = v25;
    long long v84 = (char *)a1[1];
    int8x8_t v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    uint64_t v8 = *((void *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3]) {
      goto LABEL_94;
    }
    uint64_t v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      uint64_t v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1) {
        uint64_t v87 = v86 + 1;
      }
      else {
        uint64_t v87 = v86 + 2;
      }
      uint64_t v88 = v87 >> 1;
      uint64_t v89 = -v88;
      uint64_t v90 = &v84[-8 * v88];
      int64_t v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        long long v84 = (char *)a1[1];
      }
      int8x8_t v5 = &v90[v91];
      uint64_t v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_94;
    }
    unint64_t v101 = (v5 - v85) >> 2;
    if (v5 == v85) {
      unint64_t v101 = 1;
    }
    if (!(v101 >> 61))
    {
      unint64_t v102 = v101 >> 2;
      uint64_t v103 = 8 * v101;
      uint64_t v104 = (char *)operator new(8 * v101);
      uint64_t v105 = &v104[8 * v102];
      int64_t v106 = v5 - v84;
      BOOL v43 = v5 == v84;
      int8x8_t v5 = v105;
      if (!v43)
      {
        int8x8_t v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          uint64_t v109 = &v104[8 * v102];
          uint64_t v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            uint64_t v110 = (v107 >> 3) + 1;
            uint64_t v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v108 = &v105[v111];
            uint64_t v112 = &v84[v111];
            uint64_t v113 = (long long *)(v84 + 16);
            uint64_t v114 = v109 + 16;
            uint64_t v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              _OWORD *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            long long v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_108;
            }
          }
        }
        else
        {
          uint64_t v108 = &v104[8 * v102];
        }
        do
        {
          uint64_t v117 = *(void *)v84;
          v84 += 8;
          *(void *)uint64_t v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_108:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85) {
        goto LABEL_94;
      }
      uint64_t v100 = v85;
      goto LABEL_93;
    }
LABEL_111:
    sub_1C4949AA8();
  }
  uint64_t v26 = v23 >> 2;
  if (v17 == v20) {
    unint64_t v27 = 1;
  }
  else {
    unint64_t v27 = v26;
  }
  if (v27 >> 61) {
    goto LABEL_111;
  }
  uint64_t v28 = (char *)operator new(8 * v27);
  uint64_t v29 = operator new(0x1000uLL);
  uint64_t v30 = v29;
  uint64_t v31 = &v28[8 * v22];
  int v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v21 >> 2;
      }
      if (v48 >> 61) {
        sub_1C4949AA8();
      }
      uint64_t v31 = (char *)operator new(8 * v48);
      int v32 = &v31[8 * v48];
      operator delete(v28);
      uint64_t v49 = (char *)a1[1];
      uint64_t v18 = (char *)a1[2];
      uint64_t v28 = v31;
      *(void *)uint64_t v31 = v30;
      uint64_t v34 = v31 + 8;
      if (v18 == v49) {
        goto LABEL_25;
      }
      do
      {
LABEL_46:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31) {
              unint64_t v54 = 1;
            }
            else {
              unint64_t v54 = (v32 - v31) >> 2;
            }
            if (v54 >> 61) {
              sub_1C4949AA8();
            }
            uint64_t v55 = (char *)operator new(8 * v54);
            uint64_t v28 = v55;
            unint64_t v56 = (v54 + 3) >> 2;
            unint64_t v50 = &v55[8 * v56];
            uint64_t v36 = v50;
            int64_t v57 = v34 - v31;
            if (v34 != v31)
            {
              uint64_t v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v58 = v57 - 8;
              uint64_t v59 = &v55[8 * v56];
              uint64_t v60 = v31;
              if (v58 < 0x38) {
                goto LABEL_116;
              }
              uint64_t v61 = 8 * v56;
              uint64_t v59 = &v55[8 * v56];
              uint64_t v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20) {
                goto LABEL_116;
              }
              uint64_t v62 = (v58 >> 3) + 1;
              uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v59 = &v50[v63];
              uint64_t v60 = &v31[v63];
              uint64_t v64 = (long long *)(v31 + 16);
              uint64_t v65 = &v55[v61 + 16];
              uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)uint64_t v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_116:
                do
                {
                  uint64_t v68 = *(void *)v60;
                  v60 += 8;
                  *(void *)uint64_t v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            int v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            uint64_t v52 = (v32 - v34) >> 3;
            if (v52 >= -1) {
              unint64_t v53 = v52 + 1;
            }
            else {
              unint64_t v53 = v52 + 2;
            }
            uint64_t v36 = &v34[8 * (v53 >> 1)];
            unint64_t v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              uint64_t v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              uint64_t v28 = v31;
            }
          }
        }
        else
        {
          unint64_t v50 = v31;
          uint64_t v36 = v34;
        }
        uint64_t v51 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v50 - 1) = v51;
        uint64_t v35 = v50 - 8;
        uint64_t v34 = v36;
        uint64_t v31 = v35;
      }
      while (v18 != (char *)a1[1]);
      goto LABEL_26;
    }
    unint64_t v33 = v22 + 2;
    if (v22 >= -1) {
      unint64_t v33 = v22 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
  *(void *)uint64_t v31 = v29;
  uint64_t v34 = v31 + 8;
  if (v18 != v19) {
    goto LABEL_46;
  }
LABEL_25:
  uint64_t v35 = v31;
  uint64_t v36 = v34;
LABEL_26:
  uint64_t v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
  {
    operator delete(v37);
  }
}

void sub_1C4A6CE04(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C4A6CE20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C4A6CE34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C4A6CE4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C4A6CE64(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    BOOL v6 = (void *)a1[1];
    int8x8_t v5 = (char *)a1[2];
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_94:
      *(void *)int8x8_t v5 = v8;
      goto LABEL_95;
    }
    uint64_t v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      uint64_t v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1) {
        uint64_t v11 = v10 + 1;
      }
      else {
        uint64_t v11 = v10 + 2;
      }
      uint64_t v12 = v11 >> 1;
      uint64_t v13 = -v12;
      uint64_t v14 = &v7[-8 * v12];
      int64_t v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        unint64_t v7 = (char *)a1[1];
      }
      int8x8_t v5 = &v14[v15];
      uint64_t v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    unint64_t v38 = (v5 - v9) >> 2;
    if (v5 == v9) {
      unint64_t v38 = 1;
    }
    if (v38 >> 61) {
      goto LABEL_111;
    }
    unint64_t v39 = v38 >> 2;
    uint64_t v40 = 8 * v38;
    uint64_t v41 = (char *)operator new(8 * v38);
    uint64_t v42 = &v41[8 * v39];
    int64_t v44 = v5 - v7;
    BOOL v43 = v5 == v7;
    int8x8_t v5 = v42;
    if (!v43)
    {
      int8x8_t v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        uint64_t v92 = &v41[8 * v39];
        id v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          uint64_t v93 = (v45 >> 3) + 1;
          uint64_t v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          id v46 = &v42[v94];
          v7 += v94;
          uint64_t v95 = (long long *)(v6 + 3);
          uint64_t v96 = v92 + 16;
          uint64_t v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *uint64_t v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_91;
          }
        }
      }
      else
      {
        id v46 = &v41[8 * v39];
      }
      do
      {
        uint64_t v99 = *(void *)v7;
        v7 += 8;
        *(void *)id v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_91:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9) {
      goto LABEL_94;
    }
    uint64_t v100 = v9;
LABEL_93:
    operator delete(v100);
    int8x8_t v5 = (char *)a1[2];
    goto LABEL_94;
  }
  uint64_t v18 = (char *)a1[2];
  uint64_t v17 = (char *)a1[3];
  uint64_t v20 = (char *)*a1;
  uint64_t v19 = (char *)a1[1];
  uint64_t v21 = v18 - v19;
  uint64_t v22 = (v18 - v19) >> 3;
  uint64_t v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    uint64_t v24 = operator new(0x1000uLL);
    uint64_t v25 = v24;
    if (v17 != v18)
    {
      *(void *)uint64_t v18 = v24;
LABEL_95:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      unint64_t v69 = (v17 - v19) >> 2;
      if (v18 == v19) {
        unint64_t v69 = 1;
      }
      if (v69 >> 61) {
        goto LABEL_111;
      }
      unint64_t v70 = (v69 + 3) >> 2;
      uint64_t v71 = 8 * v69;
      uint64_t v72 = (char *)operator new(8 * v69);
      uint64_t v47 = &v72[8 * v70];
      uint64_t v73 = v47;
      if (v18 != v19)
      {
        uint64_t v73 = &v47[8 * v22];
        uint64_t v74 = &v72[8 * v70];
        uint64_t v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38) {
          goto LABEL_115;
        }
        uint64_t v76 = &v72[8 * v70];
        uint64_t v74 = v76;
        uint64_t v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20) {
          goto LABEL_115;
        }
        unint64_t v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v74 = &v47[v78];
        uint64_t v75 = &v19[v78];
        uint64_t v79 = (long long *)(v19 + 16);
        uint64_t v80 = v76 + 16;
        uint64_t v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *uint64_t v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_115:
          do
          {
            uint64_t v83 = *(void *)v75;
            v75 += 8;
            *(void *)uint64_t v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        uint64_t v47 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v47 = v19;
    }
    *((void *)v47 - 1) = v25;
    long long v84 = (char *)a1[1];
    int8x8_t v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    uint64_t v8 = *((void *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3]) {
      goto LABEL_94;
    }
    uint64_t v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      uint64_t v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1) {
        uint64_t v87 = v86 + 1;
      }
      else {
        uint64_t v87 = v86 + 2;
      }
      uint64_t v88 = v87 >> 1;
      uint64_t v89 = -v88;
      uint64_t v90 = &v84[-8 * v88];
      int64_t v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        long long v84 = (char *)a1[1];
      }
      int8x8_t v5 = &v90[v91];
      uint64_t v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_94;
    }
    unint64_t v101 = (v5 - v85) >> 2;
    if (v5 == v85) {
      unint64_t v101 = 1;
    }
    if (!(v101 >> 61))
    {
      unint64_t v102 = v101 >> 2;
      uint64_t v103 = 8 * v101;
      uint64_t v104 = (char *)operator new(8 * v101);
      uint64_t v105 = &v104[8 * v102];
      int64_t v106 = v5 - v84;
      BOOL v43 = v5 == v84;
      int8x8_t v5 = v105;
      if (!v43)
      {
        int8x8_t v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          uint64_t v109 = &v104[8 * v102];
          uint64_t v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            uint64_t v110 = (v107 >> 3) + 1;
            uint64_t v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v108 = &v105[v111];
            uint64_t v112 = &v84[v111];
            uint64_t v113 = (long long *)(v84 + 16);
            uint64_t v114 = v109 + 16;
            uint64_t v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              _OWORD *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            long long v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_108;
            }
          }
        }
        else
        {
          uint64_t v108 = &v104[8 * v102];
        }
        do
        {
          uint64_t v117 = *(void *)v84;
          v84 += 8;
          *(void *)uint64_t v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_108:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85) {
        goto LABEL_94;
      }
      uint64_t v100 = v85;
      goto LABEL_93;
    }
LABEL_111:
    sub_1C4949AA8();
  }
  uint64_t v26 = v23 >> 2;
  if (v17 == v20) {
    unint64_t v27 = 1;
  }
  else {
    unint64_t v27 = v26;
  }
  if (v27 >> 61) {
    goto LABEL_111;
  }
  uint64_t v28 = (char *)operator new(8 * v27);
  uint64_t v29 = operator new(0x1000uLL);
  uint64_t v30 = v29;
  uint64_t v31 = &v28[8 * v22];
  int v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v21 >> 2;
      }
      if (v48 >> 61) {
        sub_1C4949AA8();
      }
      uint64_t v31 = (char *)operator new(8 * v48);
      int v32 = &v31[8 * v48];
      operator delete(v28);
      uint64_t v49 = (char *)a1[1];
      uint64_t v18 = (char *)a1[2];
      uint64_t v28 = v31;
      *(void *)uint64_t v31 = v30;
      uint64_t v34 = v31 + 8;
      if (v18 == v49) {
        goto LABEL_25;
      }
      do
      {
LABEL_46:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31) {
              unint64_t v54 = 1;
            }
            else {
              unint64_t v54 = (v32 - v31) >> 2;
            }
            if (v54 >> 61) {
              sub_1C4949AA8();
            }
            uint64_t v55 = (char *)operator new(8 * v54);
            uint64_t v28 = v55;
            unint64_t v56 = (v54 + 3) >> 2;
            unint64_t v50 = &v55[8 * v56];
            uint64_t v36 = v50;
            int64_t v57 = v34 - v31;
            if (v34 != v31)
            {
              uint64_t v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v58 = v57 - 8;
              uint64_t v59 = &v55[8 * v56];
              uint64_t v60 = v31;
              if (v58 < 0x38) {
                goto LABEL_116;
              }
              uint64_t v61 = 8 * v56;
              uint64_t v59 = &v55[8 * v56];
              uint64_t v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20) {
                goto LABEL_116;
              }
              uint64_t v62 = (v58 >> 3) + 1;
              uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v59 = &v50[v63];
              uint64_t v60 = &v31[v63];
              uint64_t v64 = (long long *)(v31 + 16);
              uint64_t v65 = &v55[v61 + 16];
              uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)uint64_t v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_116:
                do
                {
                  uint64_t v68 = *(void *)v60;
                  v60 += 8;
                  *(void *)uint64_t v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            int v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            uint64_t v52 = (v32 - v34) >> 3;
            if (v52 >= -1) {
              unint64_t v53 = v52 + 1;
            }
            else {
              unint64_t v53 = v52 + 2;
            }
            uint64_t v36 = &v34[8 * (v53 >> 1)];
            unint64_t v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              uint64_t v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              uint64_t v28 = v31;
            }
          }
        }
        else
        {
          unint64_t v50 = v31;
          uint64_t v36 = v34;
        }
        uint64_t v51 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v50 - 1) = v51;
        uint64_t v35 = v50 - 8;
        uint64_t v34 = v36;
        uint64_t v31 = v35;
      }
      while (v18 != (char *)a1[1]);
      goto LABEL_26;
    }
    unint64_t v33 = v22 + 2;
    if (v22 >= -1) {
      unint64_t v33 = v22 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
  *(void *)uint64_t v31 = v29;
  uint64_t v34 = v31 + 8;
  if (v18 != v19) {
    goto LABEL_46;
  }
LABEL_25:
  uint64_t v35 = v31;
  uint64_t v36 = v34;
LABEL_26:
  uint64_t v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
  {
    operator delete(v37);
  }
}

void sub_1C4A6D4E0(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C4A6D4FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C4A6D510(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C4A6D528(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C4A6D618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6D6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6D6B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6D76C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6D780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6D868(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6D9BC(_Unwind_Exception *a1)
{
  int8x8_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1C4A6D9DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6D9F4(_Unwind_Exception *a1)
{
  BOOL v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1C4A6DAF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6DB08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A6DE4C(uint64_t a1, CGFloat a2, CGFloat a3)
{
  IsEmptCGFloat y = CGPathIsEmpty(*(CGPathRef *)(a1 + 32));
  unint64_t v7 = *(CGPath **)(a1 + 32);
  if (IsEmpty)
  {
    CGPathMoveToPoint(v7, 0, a2, a3);
  }
  else
  {
    CGPathAddLineToPoint(v7, 0, a2, a3);
  }
}

double sub_1C4A6DECC(uint64_t a1, double a2, double a3)
{
  v4.origin.CGFloat x = a2 + -1.0;
  v4.origin.CGFloat y = a3 + -1.0;
  v4.size.CGFloat width = *(CGFloat *)(a1 + 32);
  v4.size.CGFloat height = v4.size.width;
  CGContextFillEllipseInRect(*(CGContextRef *)(a1 + 40), v4);
  return result;
}

uint64_t sub_1C4A6E1EC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend__updateSettings(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

void CoreHandwriting::synthesis::CHDiffusionPipeline::getPreprocessor(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  operator new();
}

void sub_1C4A6E374(_Unwind_Exception *a1)
{
  sub_1C4A37778(v1);
  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::CHDiffusionPipeline::getFeatureExtractor(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  operator new();
}

void sub_1C4A6E488(_Unwind_Exception *a1)
{
  sub_1C4A6E49C(v1);
  _Unwind_Resume(a1);
}

void *sub_1C4A6E49C(void *a1)
{
  unint64_t v2 = (void *)*a1;
  if (*a1)
  {
    BOOL v3 = (void *)a1[1];
    CGRect v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        *BOOL v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      CGRect v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

id CoreHandwriting::synthesis::CHDiffusionPipeline::calculateFeatures(CoreHandwriting::synthesis::CHDiffusionSynthesisModel **this, CHDrawing *a2, NSString *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2;
  uint64_t v6 = a3;
  unint64_t v7 = objc_opt_new();
  uint64_t v8 = v7;
  if (v5 && v6)
  {
    CoreHandwriting::synthesis::CHDiffusionSynthesisModel::encodeString(*this, v6, &v18);
    uint64_t v9 = v18;
    int64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int64_t v10 = v19 - v18;
    if (v19 != v18)
    {
      if (v10 < 0) {
        sub_1C494A220();
      }
      int64_t v15 = (char *)operator new(v19 - v18);
      uint64_t v17 = &v15[8 * (v10 >> 3)];
      memcpy(v15, v9, v10);
      uint64_t v16 = v17;
    }
    CoreHandwriting::drawingToInk((CoreHandwriting *)v5, MEMORY[0x1E4F1DAD8], (uint64_t *)&v14);
    CoreHandwriting::synthesis::CHDiffusionPipeline::getPreprocessor(&__p);
  }
  id v11 = v7;

  return v8;
}

void sub_1C4A6ECBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  sub_1C4A375C0(&a23);
  if (a9)
  {
    a34 = a9;
    operator delete(a9);
  }
  unint64_t v38 = *(void **)(v36 - 168);
  if (v38)
  {
    *(void *)(v36 - 160) = v38;
    operator delete(v38);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1C4A6EE00(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  BOOL v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  CGRect v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

id CoreHandwriting::synthesis::CHDiffusionPipeline::createModelInputData(CoreHandwriting::synthesis::CHDiffusionSynthesisModel **a1, void *a2, void *a3, uint64_t a4)
{
  v554[2] = *MEMORY[0x1E4F143B8];
  unint64_t v519 = a2;
  id v520 = a3;
  v523 = objc_opt_new();
  uint64_t v12 = objc_msgSend_styleDrawing(v520, v7, v8, v9, v10, v11);
  objc_msgSend_sortedDrawingUsingStrokeMidPointHorizontalOverlapAware_shouldSortRTL_(v12, v13, 0, 0, v14, v15);
  uint64_t v521 = (CHDrawing *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_styleContent(v520, v16, v17, v18, v19, v20);
  uint64_t v21 = (NSString *)objc_claimAutoreleasedReturnValue();
  uint64_t v518 = v21;
  if (v521 && v21)
  {
    CoreHandwriting::synthesis::CHDiffusionSynthesisModel::encodeString(*a1, v21, v541);
  }
  else
  {
    *(_OWORD *)uint64_t v541 = 0u;
    long long v542 = 0u;
  }
  CoreHandwriting::synthesis::CHDiffusionSynthesisModel::encodeString(*a1, v519, &v538);
  uint64_t v535 = 0;
  uint64_t v536 = 0;
  uint64_t v537 = 0;
  uint64_t v22 = v538;
  int64_t v23 = v539 - (unsigned char *)v538;
  if (v539 != v538)
  {
    if (v23 < 0) {
      sub_1C494A220();
    }
    uint64_t v24 = (char *)operator new(v539 - (unsigned char *)v538);
    uint64_t v535 = v24;
    uint64_t v25 = &v24[8 * (v23 >> 3)];
    uint64_t v537 = v25;
    memcpy(v24, v22, v23);
    uint64_t v536 = v25;
    long long __p = 0;
    v533 = 0;
    v534 = 0;
    uint64_t v26 = v541[0];
    int64_t v27 = (char *)v541[1] - (char *)v541[0];
    if (v541[1] != v541[0]) {
      goto LABEL_8;
    }
LABEL_11:
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    goto LABEL_12;
  }
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  long long __p = 0;
  v533 = 0;
  v534 = 0;
  uint64_t v26 = v541[0];
  int64_t v27 = (char *)v541[1] - (char *)v541[0];
  if (v541[1] == v541[0]) {
    goto LABEL_11;
  }
LABEL_8:
  if (v27 < 0) {
    sub_1C494A220();
  }
  uint64_t v28 = (char *)operator new(v27);
  long long __p = v28;
  uint64_t v29 = &v28[8 * (v27 >> 3)];
  v534 = v29;
  memcpy(v28, v26, v27);
  v533 = v29;
LABEL_12:
  unint64_t v30 = (v25 - v24) >> 3;
  unint64_t v31 = (v29 - v28) >> 3;
  unint64_t v32 = v540;
  if (v30 > v31) {
    unint64_t v31 = (v25 - v24) >> 3;
  }
  if (v540 <= *((void *)&v542 + 1)) {
    unint64_t v32 = *((void *)&v542 + 1);
  }
  BOOL v33 = v31 < 9;
  BOOL v34 = v32 < 0xC1;
  BOOL v35 = !v34 || !v33;
  if (v34 && v33) {
    uint64_t v36 = 192;
  }
  else {
    uint64_t v36 = 1152;
  }
  id v524 = (id)v36;
  if (v35) {
    unint64_t v37 = 48;
  }
  else {
    unint64_t v37 = 8;
  }
  sub_1C4A6FFE4(&v535, v37, *((void *)*a1 + 15));
  v554[0] = &unk_1F203E5E0;
  uint64_t v42 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v38, (v536 - (unsigned char *)v535) >> 3, v39, v40, v41);
  v554[1] = v42;
  id v46 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v43, (uint64_t)v554, 2, v44, v45);
  uint64_t v47 = sub_1C4A700F4(&v535, v46);
  objc_msgSend_setObject_forKeyedSubscript_(v523, v48, (uint64_t)v47, @"input_labels", v49, v50);

  uint64_t v55 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v51, v30, v52, v53, v54);
  uint64_t v553 = v55;
  uint64_t v59 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v56, (uint64_t)&v553, 1, v57, v58);
  uint64_t v60 = CoreHandwriting::synthesis::multiArrayWithContent(v59, &unk_1F203DAD0);
  objc_msgSend_setObject_forKeyedSubscript_(v523, v61, (uint64_t)v60, @"input_labels_length", v62, v63);

  uint64_t v68 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v64, v540, v65, v66, v67);
  uint64_t v552 = v68;
  uint64_t v72 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v69, (uint64_t)&v552, 1, v70, v71);
  uint64_t v73 = CoreHandwriting::synthesis::multiArrayWithContent(v72, &unk_1F203DAE8);
  objc_msgSend_setObject_forKeyedSubscript_(v523, v74, (uint64_t)v73, @"input_length", v75, v76);

  if (objc_msgSend_pointCount(v521, v77, v78, v79, v80, v81) && objc_msgSend_length(v518, v82, v83, v84, v85, v86))
  {
    uint64_t v88 = __p;
    uint64_t v87 = v533;
    if (v37 < (v533 - (unsigned char *)__p) >> 3)
    {
      uint64_t v87 = (char *)__p + 8 * v37;
      v533 = v87;
    }
    sub_1C4A6FFE4(&__p, v37, *((void *)*a1 + 15));
    uint64_t v90 = __p;
    uint64_t v89 = v533;
    uint64_t v95 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v91, (v87 - v88) >> 3, v92, v93, v94);
    uint64_t v551 = v95;
    uint64_t v99 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v96, (uint64_t)&v551, 1, v97, v98);
    uint64_t v100 = CoreHandwriting::synthesis::multiArrayWithContent(v99, &unk_1F203DB00);
    objc_msgSend_setObject_forKeyedSubscript_(v523, v101, (uint64_t)v100, @"input_style_labels_len", v102, v103);

    v550[0] = &unk_1F203E5E0;
    uint64_t v108 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v104, (v89 - v90) >> 3, v105, v106, v107);
    v550[1] = v108;
    uint64_t v112 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v109, (uint64_t)v550, 2, v110, v111);
    uint64_t v113 = sub_1C4A700F4(&__p, v112);
    objc_msgSend_setObject_forKeyedSubscript_(v523, v114, (uint64_t)v113, @"input_style_labels", v115, v116);

    uint64_t v117 = CoreHandwriting::synthesis::CHDiffusionPipeline::calculateFeatures(a1, v521, v518);
    uint64_t v122 = objc_msgSend_objectForKeyedSubscript_(v117, v118, @"curFeature", v119, v120, v121);
    objc_msgSend_setObject_forKeyedSubscript_(v523, v123, (uint64_t)v122, @"input_style_features", v124, v125);

    uint64_t v130 = objc_msgSend_objectForKeyedSubscript_(v117, v126, @"curFeatureLength", v127, v128, v129);
    objc_msgSend_setObject_forKeyedSubscript_(v523, v131, (uint64_t)v130, @"input_style_features_len", v132, v133);

    uint64_t v522 = objc_msgSend_numberWithInt_(NSNumber, v134, (uint64_t)v524, v135, v136, v137);

    int v143 = *(_DWORD *)(a4 + 16);
    if (v143 == 1 && v522)
    {
      v544[0] = &unk_1F203E5E0;
      v544[1] = v522;
      v544[2] = &unk_1F203E628;
      uint64_t v517 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v138, (uint64_t)v544, 3, v141, v142);
      id v144 = objc_alloc(MEMORY[0x1E4F1E9A8]);
      id v525 = (id)objc_msgSend_initWithShape_dataType_error_(v144, v145, (uint64_t)v517, 65568, 0, v146);
      objc_msgSend_objectForKeyedSubscript_(v523, v147, @"input_style_features", v148, v149, v150);
      id v526 = (id)objc_claimAutoreleasedReturnValue();
      id v530 = v525;
      uint64_t v156 = objc_msgSend_dataPointer(v530, v151, v152, v153, v154, v155);
      id v531 = v526;
      uint64_t v528 = objc_msgSend_dataPointer(v531, v157, v158, v159, v160, v161);
      for (unint64_t i = 0; i < objc_msgSend_unsignedLongValue(v522, v162, v163, v164, v165, v166); ++i)
      {
        uint64_t v173 = objc_msgSend_strides(v530, v168, v169, v170, v171, v172);
        id v178 = objc_msgSend_objectAtIndexedSubscript_(v173, v174, 1, v175, v176, v177);
        uint64_t v184 = objc_msgSend_unsignedLongValue(v178, v179, v180, v181, v182, v183);
        uint64_t v190 = objc_msgSend_strides(v530, v185, v186, v187, v188, v189);
        uint64_t v195 = objc_msgSend_objectAtIndexedSubscript_(v190, v191, 2, v192, v193, v194);
        objc_msgSend_unsignedLongValue(v195, v196, v197, v198, v199, v200);

        uint64_t v206 = objc_msgSend_strides(v531, v201, v202, v203, v204, v205);
        uint64_t v211 = objc_msgSend_objectAtIndexedSubscript_(v206, v207, 1, v208, v209, v210);
        uint64_t v217 = objc_msgSend_unsignedLongValue(v211, v212, v213, v214, v215, v216);
        uint64_t v223 = objc_msgSend_strides(v531, v218, v219, v220, v221, v222);
        uint64_t v228 = objc_msgSend_objectAtIndexedSubscript_(v223, v224, 2, v225, v226, v227);
        objc_msgSend_unsignedLongValue(v228, v229, v230, v231, v232, v233);

        *(_DWORD *)(v156 + 4 * v184 * i) = *(_DWORD *)(v528 + 4 * v217 * i);
        uint64_t v239 = objc_msgSend_strides(v530, v234, v235, v236, v237, v238);
        uint64_t v244 = objc_msgSend_objectAtIndexedSubscript_(v239, v240, 1, v241, v242, v243);
        uint64_t v250 = objc_msgSend_unsignedLongValue(v244, v245, v246, v247, v248, v249);
        uint64_t v256 = objc_msgSend_strides(v530, v251, v252, v253, v254, v255);
        uint64_t v261 = objc_msgSend_objectAtIndexedSubscript_(v256, v257, 2, v258, v259, v260);
        uint64_t v267 = objc_msgSend_unsignedLongValue(v261, v262, v263, v264, v265, v266);

        uint64_t v273 = objc_msgSend_strides(v531, v268, v269, v270, v271, v272);
        uint64_t v278 = objc_msgSend_objectAtIndexedSubscript_(v273, v274, 1, v275, v276, v277);
        uint64_t v284 = objc_msgSend_unsignedLongValue(v278, v279, v280, v281, v282, v283);
        uint64_t v290 = objc_msgSend_strides(v531, v285, v286, v287, v288, v289);
        uint64_t v295 = objc_msgSend_objectAtIndexedSubscript_(v290, v291, 2, v292, v293, v294);
        uint64_t v301 = objc_msgSend_unsignedLongValue(v295, v296, v297, v298, v299, v300);

        *(_DWORD *)(v156 + 4 * (v267 + v250 * i)) = *(_DWORD *)(v528 + 4 * (v301 + v284 * i));
      }
      objc_msgSend_setObject_forKeyedSubscript_(v523, v168, (uint64_t)v530, @"input_diffusion_x_timestep", v171, v172);
LABEL_44:

      goto LABEL_45;
    }
  }
  else
  {
    uint64_t v302 = CoreHandwriting::synthesis::multiArrayWithFixedValue(&unk_1F203DB18, 1.0);
    objc_msgSend_setObject_forKeyedSubscript_(v523, v303, (uint64_t)v302, @"input_style_labels_len", v304, v305);

    id v306 = CoreHandwriting::synthesis::multiArrayWithFixedValue(&unk_1F203DB30, 1.0);
    objc_msgSend_setObject_forKeyedSubscript_(v523, v307, (uint64_t)v306, @"input_style_features_len", v308, v309);

    uint64_t v310 = *a1;
    uint64_t v311 = *((void *)*a1 + 15);
    uint64_t v312 = operator new(8uLL);
    *(void *)CGAffineTransform buf = v312;
    void *v312 = v311;
    uint64_t v548 = v312 + 1;
    uint64_t v549 = v312 + 1;
    sub_1C4A6FFE4(buf, v37, *((void *)v310 + 15));
    v546[0] = &unk_1F203E5E0;
    uint64_t v317 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v313, ((uint64_t)v548 - *(void *)buf) >> 3, v314, v315, v316);
    v546[1] = v317;
    uint64_t v321 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v318, (uint64_t)v546, 2, v319, v320);
    v322 = sub_1C4A700F4(buf, v321);
    objc_msgSend_setObject_forKeyedSubscript_(v523, v323, (uint64_t)v322, @"input_style_labels", v324, v325);

    v545[0] = &unk_1F203E5E0;
    uint64_t v330 = objc_msgSend_numberWithInt_(NSNumber, v326, (uint64_t)v524, v327, v328, v329);
    v545[1] = v330;
    v545[2] = &unk_1F203E610;
    long long v334 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v331, (uint64_t)v545, 3, v332, v333);
    int v335 = CoreHandwriting::synthesis::multiArrayWithFixedValue(v334, 0.0);
    objc_msgSend_setObject_forKeyedSubscript_(v523, v336, (uint64_t)v335, @"input_style_features", v337, v338);

    if (*(void *)buf)
    {
      uint64_t v548 = *(void **)buf;
      operator delete(*(void **)buf);
    }
    uint64_t v522 = 0;
    int v143 = *(_DWORD *)(a4 + 16);
  }
  if (v143 == 2)
  {
    uint64_t v339 = objc_msgSend_xZeroDrawing(v520, v138, v139, v140, v141, v142);
    BOOL v340 = v339 == 0;

    if (!v340)
    {
      uint64_t v346 = objc_msgSend_xZeroDrawing(v520, v341, v342, v343, v344, v345);
      objc_msgSend_sortedDrawingUsingStrokeMidPointHorizontalOverlapAware_shouldSortRTL_(v346, v347, 0, 0, v348, v349);
      long long v350 = (CHDrawing *)objc_claimAutoreleasedReturnValue();
      uint64_t v517 = CoreHandwriting::synthesis::CHDiffusionPipeline::calculateFeatures(a1, v350, v519);

      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      CGAffineTransform v351 = (id)qword_1EA3C9FD8;
      if (os_log_type_enabled(v351, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)CGAffineTransform buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v524;
        _os_log_impl(&dword_1C492D000, v351, OS_LOG_TYPE_DEBUG, "Synthesizer: Init with seed x_0 features length %d", buf, 8u);
      }

      v543[0] = &unk_1F203E5E0;
      uint64_t v356 = objc_msgSend_numberWithInt_(NSNumber, v352, (uint64_t)v524, v353, v354, v355);
      v543[1] = v356;
      v543[2] = &unk_1F203E628;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v357, (uint64_t)v543, 3, v358, v359);
      id v530 = (id)objc_claimAutoreleasedReturnValue();

      id v360 = objc_alloc(MEMORY[0x1E4F1E9A8]);
      id v515 = (id)objc_msgSend_initWithShape_dataType_error_(v360, v361, (uint64_t)v530, 65568, 0, v362);
      objc_msgSend_objectForKeyedSubscript_(v517, v363, @"curFeature", v364, v365, v366);
      id v516 = (id)objc_claimAutoreleasedReturnValue();
      id v531 = v515;
      uint64_t v529 = objc_msgSend_dataPointer(v531, v367, v368, v369, v370, v371);
      id v372 = v516;
      uint64_t v527 = (_DWORD *)objc_msgSend_dataPointer(v372, v373, v374, v375, v376, v377);
      for (unint64_t j = 0; j != v524; unint64_t j = (char *)j + 1)
      {
        uint64_t v384 = objc_msgSend_strides(v531, v378, v379, v380, v381, v382);
        v389 = objc_msgSend_objectAtIndexedSubscript_(v384, v385, 1, v386, v387, v388);
        uint64_t v395 = objc_msgSend_unsignedLongValue(v389, v390, v391, v392, v393, v394);
        uint64_t v401 = objc_msgSend_strides(v531, v396, v397, v398, v399, v400);
        uint64_t v406 = objc_msgSend_objectAtIndexedSubscript_(v401, v402, 2, v403, v404, v405);
        objc_msgSend_unsignedLongValue(v406, v407, v408, v409, v410, v411);

        uint64_t v417 = objc_msgSend_strides(v372, v412, v413, v414, v415, v416);
        uint64_t v422 = objc_msgSend_objectAtIndexedSubscript_(v417, v418, 1, v419, v420, v421);
        uint64_t v428 = objc_msgSend_unsignedLongValue(v422, v423, v424, v425, v426, v427);
        uint64_t v434 = objc_msgSend_strides(v372, v429, v430, v431, v432, v433);
        unint64_t v439 = objc_msgSend_objectAtIndexedSubscript_(v434, v435, 2, v436, v437, v438);
        objc_msgSend_unsignedLongValue(v439, v440, v441, v442, v443, v444);

        *(_DWORD *)(v529 + 4 * v395 * (void)j) = v527[v428 * (void)j];
        uint64_t v450 = objc_msgSend_strides(v531, v445, v446, v447, v448, v449);
        uint64_t v455 = objc_msgSend_objectAtIndexedSubscript_(v450, v451, 1, v452, v453, v454);
        uint64_t v461 = objc_msgSend_unsignedLongValue(v455, v456, v457, v458, v459, v460);
        uint64_t v467 = objc_msgSend_strides(v531, v462, v463, v464, v465, v466);
        uint64_t v472 = objc_msgSend_objectAtIndexedSubscript_(v467, v468, 2, v469, v470, v471);
        uint64_t v478 = objc_msgSend_unsignedLongValue(v472, v473, v474, v475, v476, v477);

        v484 = objc_msgSend_strides(v372, v479, v480, v481, v482, v483);
        uint64_t v489 = objc_msgSend_objectAtIndexedSubscript_(v484, v485, 1, v486, v487, v488);
        uint64_t v495 = objc_msgSend_unsignedLongValue(v489, v490, v491, v492, v493, v494);
        uint64_t v501 = objc_msgSend_strides(v372, v496, v497, v498, v499, v500);
        uint64_t v506 = objc_msgSend_objectAtIndexedSubscript_(v501, v502, 2, v503, v504, v505);
        uint64_t v512 = objc_msgSend_unsignedLongValue(v506, v507, v508, v509, v510, v511);

        *(_DWORD *)(v529 + 4 * (v478 + v461 * (void)j)) = v527[v512 + v495 * (void)j];
      }
      objc_msgSend_setObject_forKeyedSubscript_(v523, v378, (uint64_t)v531, @"input_diffusion_x_timestep", v381, v382);

      goto LABEL_44;
    }
  }
LABEL_45:
  id v513 = v523;

  if (__p)
  {
    v533 = (char *)__p;
    operator delete(__p);
  }
  if (v535)
  {
    uint64_t v536 = v535;
    operator delete(v535);
  }
  if (v538)
  {
    uint64_t v539 = v538;
    operator delete(v538);
  }
  if (v541[0])
  {
    v541[1] = v541[0];
    operator delete(v541[0]);
  }

  return v513;
}

void sub_1C4A6FBD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  if (a23)
  {
    operator delete(a23);
    BOOL v35 = a26;
    if (!a26)
    {
LABEL_3:
      uint64_t v36 = a29;
      if (!a29) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v35 = a26;
    if (!a26) {
      goto LABEL_3;
    }
  }
  operator delete(v35);
  uint64_t v36 = a29;
  if (!a29)
  {
LABEL_4:
    unint64_t v37 = __p;
    if (!__p) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  operator delete(v36);
  unint64_t v37 = __p;
  if (!__p)
  {
LABEL_6:

    _Unwind_Resume(a1);
  }
LABEL_5:
  operator delete(v37);
  goto LABEL_6;
}

void sub_1C4A6FFE4(void *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a3;
  unint64_t v4 = (uint64_t)(a1[1] - *a1) >> 3;
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6)
  {
    if (v6 != 0 && v5)
    {
      sub_1C49AB988((uint64_t)a1, v6, &v8);
    }
    else
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      unint64_t v7 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)CGAffineTransform buf = 134218240;
        unint64_t v10 = v4;
        __int16 v11 = 2048;
        unint64_t v12 = a2;
        _os_log_impl(&dword_1C492D000, v7, OS_LOG_TYPE_FAULT, "Synthesizer: Cannot pad sequence of length %zu that's longer than target length %zu.", buf, 0x16u);
      }
    }
  }
}

id sub_1C4A700F4(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = objc_alloc(MEMORY[0x1E4F1E9A8]);
  unint64_t v7 = objc_msgSend_initWithShape_dataType_error_(v4, v5, (uint64_t)v3, 65568, 0, v6);
  if (objc_msgSend_count(v7, v8, v9, v10, v11, v12) != (uint64_t)(a1[1] - *a1) >> 3)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v17 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
    {
      uint64_t v23 = objc_msgSend_count(v7, v18, v19, v20, v21, v22);
      uint64_t v24 = (uint64_t)(a1[1] - *a1) >> 3;
      *(_DWORD *)CGAffineTransform buf = 134218240;
      uint64_t v28 = v23;
      __int16 v29 = 2048;
      uint64_t v30 = v24;
      _os_log_impl(&dword_1C492D000, v17, OS_LOG_TYPE_FAULT, "Size mismatch! shape elements: %ld, vector elements: %zu", buf, 0x16u);
    }
  }
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  v26[2] = sub_1C4A7293C;
  v26[3] = &unk_1E64E3010;
  v26[4] = a1;
  objc_msgSend_getBytesWithHandler_(v7, v13, (uint64_t)v26, v14, v15, v16);

  return v7;
}

void sub_1C4A70298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::CHDiffusionPipeline::run(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v169 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  if (!objc_msgSend_length(v9, v12, v13, v14, v15, v16)
    || (CoreHandwriting::synthesis::CHDiffusionSynthesisModel::canEncodeString(*(CoreHandwriting::synthesis::CHDiffusionSynthesisModel **)a1, (NSString *)v9) & 1) == 0)
  {
    id v46 = 0;
    goto LABEL_51;
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v17 = (id)qword_1EA3C9FC8;
  os_signpost_id_t spid = os_signpost_id_generate(v17);

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v18 = (id)qword_1EA3C9FC8;
  uint64_t v19 = v18;
  if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v19, OS_SIGNPOST_INTERVAL_BEGIN, spid, "CHDiffusionPipelineRun", "", (uint8_t *)buf, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v20 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C492D000, v20, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHDiffusionPipelineRun\"", (uint8_t *)buf, 2u);
  }

  uint64_t v161 = CoreHandwriting::synthesis::CHDiffusionPipeline::createModelInputData((CoreHandwriting::synthesis::CHDiffusionSynthesisModel **)a1, v9, v10, a5);
  float v22 = *(float *)(a5 + 4);
  float v21 = *(float *)(a5 + 8);
  BOOL v33 = objc_msgSend_forwardProcessRatio(v10, v23, v24, v25, v26, v27);
  double v160 = v22;
  if (v33)
  {
    BOOL v34 = objc_msgSend_forwardProcessRatio(v10, v28, v29, v30, v31, v32);
    objc_msgSend_floatValue(v34, v35, v36, v37, v38, v39);
    if (v45 >= 0.0)
    {
      uint64_t v47 = objc_msgSend_forwardProcessRatio(v10, v40, v41, v42, v43, v44);
      objc_msgSend_floatValue(v47, v48, v49, v50, v51, v52);
      BOOL v54 = v53 > 1.0;

      if (v54) {
        goto LABEL_21;
      }
      BOOL v33 = objc_msgSend_forwardProcessRatio(v10, v28, v29, v30, v31, v32);
      objc_msgSend_doubleValue(v33, v55, v56, v57, v58, v59);
      double v160 = v60;
    }
    else
    {
    }
  }
LABEL_21:
  uint64_t v66 = objc_msgSend_backwardProcessRatio(v10, v28, v29, v30, v31, v32, spid - 1);
  double v159 = v21;
  if (!v66) {
    goto LABEL_27;
  }
  uint64_t v67 = objc_msgSend_backwardProcessRatio(v10, v61, v62, v63, v64, v65);
  objc_msgSend_floatValue(v67, v68, v69, v70, v71, v72);
  if (v78 >= 0.0)
  {
    uint64_t v79 = objc_msgSend_backwardProcessRatio(v10, v73, v74, v75, v76, v77);
    objc_msgSend_floatValue(v79, v80, v81, v82, v83, v84);
    BOOL v86 = v85 > 1.0;

    if (v86) {
      goto LABEL_27;
    }
    uint64_t v66 = objc_msgSend_backwardProcessRatio(v10, v87, v88, v89, v90, v91);
    objc_msgSend_doubleValue(v66, v92, v93, v94, v95, v96);
    double v159 = v97;
  }
  else
  {
  }
LABEL_27:
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v98 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 134218240;
    *(double *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v160;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v159;
    _os_log_impl(&dword_1C492D000, v98, OS_LOG_TYPE_DEBUG, "Synthesizer: Diffusion pipeline is running with forward ratio = %.2f, backward ratio = %.2f", (uint8_t *)buf, 0x16u);
  }

  int v162 = *(_DWORD *)a5;
  int v163 = 0;
  __asm { FMOV            V8.2S, #1.0 }
  int8x8_t v164 = (int8x8_t)_D8;
  char v165 = 0;
  uint64_t v114 = objc_msgSend_seed(v10, v104, v105, v106, v107, v108);
  if (v114)
  {
    uint64_t v115 = objc_msgSend_seed(v10, v109, v110, v111, v112, v113);
    int v163 = objc_msgSend_unsignedIntValue(v115, v116, v117, v118, v119, v120);
  }
  else
  {
    *((unsigned char *)&buf[0].__r_.__value_.__s + 23) = 12;
    strcpy((char *)buf, "/dev/urandom");
    std::random_device::random_device(&v166, buf);
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    unsigned int v121 = MEMORY[0x1C8786310](&v166);
    uint64_t v122 = 1;
    std::string::size_type v123 = v121;
    do
    {
      std::string::size_type v123 = v122 + 0x5851F42D4C957F2DLL * (v123 ^ (v123 >> 62));
      buf[0].__r_.__value_.__r.__words[v122++] = v123;
    }
    while (v122 != 312);
    unint64_t v124 = v168 ^ ((buf[0].__r_.__value_.__r.__words[1] & 0x7FFFFFFE | (unint64_t)(v121 & 0x80000000)) >> 1) ^ ((uint64_t)(buf[0].__r_.__value_.__l.__size_ << 63) >> 63) & 0xB5026F5AA96619E9;
    int v125 = ((((((v124 >> 29) & 0x5555555555555555 ^ v124) << 37) & 0x280000000000 ^ (((v124 >> 29) & 0x5555555555555555 ^ v124) << 17) ^ v124) >> 43) ^ (v124 >> 29) & 0x55555555 ^ v124) & 7;
    std::random_device::~random_device(&v166);
    int v163 = v125;
  }

  v126.f64[0] = v160;
  v126.f64[1] = v159;
  *(float32x2_t *)&v126.f64[0] = vcvt_f32_f64(v126);
  int8x8_t v164 = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v126.f64[0], _D8), (int8x8_t)_D8, *(int8x8_t *)&v126.f64[0]), (int8x8_t)vcltz_f32(*(float32x2_t *)&v126.f64[0]));
  char v165 = *(unsigned char *)(a5 + 12);
  CoreHandwriting::synthesis::CHDiffusionSampler::sample((uint64_t)&v162, v161, *(void *)(a1 + 8), *(CoreHandwriting::synthesis::CHDiffusionSynthesisModel **)a1, v11);
  uint64_t v127 = (CHDrawing *)objc_claimAutoreleasedReturnValue();
  id v46 = CoreHandwriting::synthesis::CHDiffusionPipeline::getSegmentedResult((CoreHandwriting::synthesis::CHDiffusionSynthesisModel **)a1, v127, (NSString *)v9);
  if (qword_1EA3CA000 != -1)
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v128 = (id)qword_1EA3C9FD8;
    if (!os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  uint64_t v128 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
  {
LABEL_40:
    uint64_t v134 = objc_msgSend_drawing(v46, v129, v130, v131, v132, v133);
    uint64_t v140 = objc_msgSend_strokeCount(v134, v135, v136, v137, v138, v139);
    uint64_t v146 = objc_msgSend_segmentContents(v46, v141, v142, v143, v144, v145);
    uint64_t v152 = objc_msgSend_count(v146, v147, v148, v149, v150, v151);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 134218240;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v140;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v152;
    _os_log_impl(&dword_1C492D000, v128, OS_LOG_TYPE_DEFAULT, "Synthesizer: Diffusion pipeline result with %lu strokes and %lu segments", (uint8_t *)buf, 0x16u);
  }
LABEL_41:

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v153 = (id)qword_1EA3C9FC8;
  uint64_t v154 = v153;
  if (v157 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v153))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v154, OS_SIGNPOST_INTERVAL_END, spid, "CHDiffusionPipelineRun", "", (uint8_t *)buf, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v155 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C492D000, v155, OS_LOG_TYPE_DEFAULT, "END \"CHDiffusionPipelineRun\"", (uint8_t *)buf, 2u);
  }

LABEL_51:
  return v46;
}

void sub_1C4A70A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, int a18, std::random_device a19, std::random_device __p,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::synthesis::CHDiffusionPipeline::isSupported(CoreHandwriting::synthesis::CHDiffusionSynthesisModel **this, NSString *a2)
{
  return CoreHandwriting::synthesis::CHDiffusionSynthesisModel::canEncodeString(*this, a2);
}

id CoreHandwriting::synthesis::CHDiffusionPipeline::getSegmentedResult(CoreHandwriting::synthesis::CHDiffusionSynthesisModel **this, CHDrawing *a2, NSString *a3)
{
  v403[1] = *MEMORY[0x1E4F143B8];
  BOOL v5 = a2;
  uint64_t v370 = a3;
  if (!v5)
  {
    uint64_t v42 = 0;
    goto LABEL_262;
  }
  id v11 = objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E4F28B88], v6, v7, v8, v9, v10);
  uint64_t v16 = objc_msgSend_componentsSeparatedByCharactersInSet_(v370, v12, (uint64_t)v11, v13, v14, v15);

  float v21 = objc_msgSend_indexesOfObjectsPassingTest_(v16, v17, (uint64_t)&unk_1F2012D30, v18, v19, v20);
  uint64_t v26 = objc_msgSend_objectsAtIndexes_(v16, v22, (uint64_t)v21, v23, v24, v25);

  uint64_t v369 = v26;
  if ((unint64_t)objc_msgSend_count(v26, v27, v28, v29, v30, v31) <= 1)
  {
    uint64_t v37 = v26;
    uint64_t v38 = [CHSynthesisResult alloc];
    uint64_t v42 = objc_msgSend_initWithContent_drawing_(v38, v39, (uint64_t)v370, (uint64_t)v5, v40, v41);
    id v372 = v5;
    goto LABEL_261;
  }
  unint64_t v43 = objc_msgSend_count(v26, v32, v33, v34, v35, v36);
  if (v43 > objc_msgSend_strokeCount(v5, v44, v45, v46, v47, v48))
  {
    BOOL v54 = [CHSynthesisResult alloc];
    uint64_t v42 = objc_msgSend_initWithContent_drawing_(v54, v55, (uint64_t)v370, (uint64_t)v5, v56, v57);
    uint64_t v58 = [CHSynthesisContractViolation alloc];
    uint64_t v64 = objc_msgSend_count(v26, v59, v60, v61, v62, v63);
    uint64_t v66 = objc_msgSend_initWithLocationRange_comment_kind_(v58, v65, 0, v64, 0, 2);
    v403[0] = v66;
    uint64_t v70 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v67, (uint64_t)v403, 1, v68, v69);
    objc_msgSend_setContractViolations_(v42, v71, (uint64_t)v70, v72, v73, v74);

    id v372 = v5;
    uint64_t v37 = v26;
    goto LABEL_261;
  }
  id v372 = objc_msgSend_sortedDrawingUsingMinXCoordinate(v5, v49, v50, v51, v52, v53);

  uint64_t v399 = 0;
  uint64_t v400 = 0;
  uint64_t v401 = 0;
  unint64_t v80 = objc_msgSend_count(v26, v75, v76, v77, v78, v79);
  unint64_t v81 = v80;
  if (v80)
  {
    if (v80 >> 61) {
      sub_1C494A220();
    }
    uint64_t v82 = (char *)operator new(8 * v80);
    uint64_t v399 = &v82[(unint64_t)v400 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v400 = (double *)v399;
    uint64_t v401 = &v82[8 * v81];
  }
  long long v397 = 0u;
  long long v398 = 0u;
  long long v395 = 0u;
  long long v396 = 0u;
  id v83 = v26;
  uint64_t v86 = objc_msgSend_countByEnumeratingWithState_objects_count_(v83, v84, (uint64_t)&v395, (uint64_t)v402, 16, v85);
  id v376 = v83;
  if (v86)
  {
    uint64_t v87 = *(void *)v396;
    do
    {
      for (uint64_t i = 0; i != v86; ++i)
      {
        if (*(void *)v396 != v87) {
          objc_enumerationMutation(v83);
        }
        CoreHandwriting::synthesis::CHDiffusionSynthesisModel::encodeString(*this, *(NSString **)(*((void *)&v395 + 1) + 8 * i), &__p);
        uint64_t v92 = v400;
        if (v400 < (double *)v401)
        {
          double *v400 = (double)v394;
          uint64_t v400 = v92 + 1;
          uint64_t v89 = __p;
          if (!__p) {
            continue;
          }
LABEL_14:
          *(void *)&long long v393 = v89;
          operator delete(v89);
          continue;
        }
        uint64_t v93 = (double *)v399;
        int64_t v94 = (char *)v400 - (unsigned char *)v399;
        uint64_t v95 = ((char *)v400 - (unsigned char *)v399) >> 3;
        unint64_t v96 = v95 + 1;
        if ((unint64_t)(v95 + 1) >> 61) {
          sub_1C494A220();
        }
        uint64_t v97 = v401 - (unsigned char *)v399;
        if ((v401 - (unsigned char *)v399) >> 2 > v96) {
          unint64_t v96 = v97 >> 2;
        }
        if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v98 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v98 = v96;
        }
        if (v98)
        {
          if (v98 >> 61) {
            sub_1C4949AA8();
          }
          uint64_t v99 = (char *)operator new(8 * v98);
        }
        else
        {
          uint64_t v99 = 0;
        }
        uint64_t v100 = (double *)&v99[8 * v95];
        *uint64_t v100 = (double)v394;
        unint64_t v101 = v100 + 1;
        if (v92 != v93)
        {
          unint64_t v102 = (char *)v92 - (char *)v93 - 8;
          if (v102 < 0x58) {
            goto LABEL_284;
          }
          if ((unint64_t)((char *)v92 - &v99[v94]) < 0x20) {
            goto LABEL_284;
          }
          uint64_t v103 = (v102 >> 3) + 1;
          uint64_t v104 = 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v105 = &v92[v104 / 0xFFFFFFFFFFFFFFF8];
          uint64_t v100 = (double *)((char *)v100 - v104);
          uint64_t v106 = &v99[8 * v95 - 16];
          uint64_t v107 = v92 - 2;
          uint64_t v108 = v103 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v109 = *(_OWORD *)v107;
            *((_OWORD *)v106 - 1) = *((_OWORD *)v107 - 1);
            *(_OWORD *)uint64_t v106 = v109;
            v106 -= 32;
            v107 -= 4;
            v108 -= 4;
          }
          while (v108);
          uint64_t v92 = v105;
          if (v103 != (v103 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_284:
            do
            {
              uint64_t v110 = *((void *)v92-- - 1);
              *((void *)v100-- - 1) = v110;
            }
            while (v92 != v93);
          }
        }
        uint64_t v399 = v100;
        uint64_t v400 = v101;
        uint64_t v401 = &v99[8 * v98];
        if (v93) {
          operator delete(v93);
        }
        id v83 = v376;
        uint64_t v400 = v101;
        uint64_t v89 = __p;
        if (__p) {
          goto LABEL_14;
        }
      }
      uint64_t v86 = objc_msgSend_countByEnumeratingWithState_objects_count_(v83, v90, (uint64_t)&v395, (uint64_t)v402, 16, v91);
    }
    while (v86);
  }

  uint64_t v116 = v400;
  if (v399 != v400)
  {
    uint64_t v117 = (double *)((char *)v399 + 8);
    if ((char *)v399 + 8 != (char *)v400)
    {
      double v118 = *(double *)v399;
      do
      {
        double v118 = v118 + *v117;
        *v117++ = v118;
      }
      while (v117 != v116);
    }
  }
  v389 = 0;
  unint64_t v390 = 0;
  uint64_t v391 = 0;
  unint64_t v119 = objc_msgSend_strokeCount(v372, v111, v112, v113, v114, v115);
  unint64_t v125 = v119;
  if (v119)
  {
    if (v119 >> 61) {
      sub_1C494A220();
    }
    float64x2_t v126 = (char *)operator new(8 * v119);
    v389 = &v126[v390 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v390 = (unint64_t)v389;
    uint64_t v391 = &v126[8 * v125];
  }
  for (unint64_t j = 0; j < objc_msgSend_strokeCount(v372, v120, v121, v122, v123, v124); ++j)
  {
    uint64_t v134 = objc_msgSend_pointCountForStrokeIndex_(v372, v129, j, v131, v132, v133);
    unint64_t v135 = v134;
    uint64_t v136 = (unsigned char *)v390;
    if (v390 < (unint64_t)v391)
    {
      *(double *)unint64_t v390 = (double)(unint64_t)v134;
      uint64_t v128 = (uint64_t)(v136 + 8);
      goto LABEL_50;
    }
    uint64_t v137 = v389;
    int64_t v138 = v390 - (void)v389;
    uint64_t v139 = (uint64_t)(v390 - (void)v389) >> 3;
    unint64_t v140 = v139 + 1;
    if ((unint64_t)(v139 + 1) >> 61) {
      sub_1C494A220();
    }
    uint64_t v141 = v391 - (unsigned char *)v389;
    if ((v391 - (unsigned char *)v389) >> 2 > v140) {
      unint64_t v140 = v141 >> 2;
    }
    if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v142 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v142 = v140;
    }
    if (v142)
    {
      if (v142 >> 61) {
        sub_1C4949AA8();
      }
      uint64_t v143 = (char *)operator new(8 * v142);
      uint64_t v144 = (double *)&v143[8 * v139];
      double *v144 = (double)v135;
      uint64_t v128 = (uint64_t)(v144 + 1);
      int64_t v145 = v136 - v137;
      if (v136 == v137) {
        goto LABEL_70;
      }
LABEL_64:
      unint64_t v146 = v145 - 8;
      if (v146 < 0x58) {
        goto LABEL_285;
      }
      if ((unint64_t)(v136 - &v143[v138]) < 0x20) {
        goto LABEL_285;
      }
      uint64_t v147 = (v146 >> 3) + 1;
      uint64_t v148 = 8 * (v147 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v149 = &v136[-v148];
      uint64_t v144 = (double *)((char *)v144 - v148);
      uint64_t v150 = &v143[8 * v139 - 16];
      uint64_t v151 = (long long *)(v136 - 16);
      uint64_t v152 = v147 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v153 = *v151;
        *((_OWORD *)v150 - 1) = *(v151 - 1);
        *(_OWORD *)uint64_t v150 = v153;
        v150 -= 32;
        v151 -= 2;
        v152 -= 4;
      }
      while (v152);
      uint64_t v136 = v149;
      if (v147 != (v147 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_285:
        do
        {
          uint64_t v154 = *((void *)v136 - 1);
          v136 -= 8;
          *((void *)v144-- - 1) = v154;
        }
        while (v136 != v137);
      }
      goto LABEL_70;
    }
    uint64_t v143 = 0;
    uint64_t v144 = (double *)(8 * v139);
    *(double *)(8 * v139) = (double)v135;
    uint64_t v128 = 8 * v139 + 8;
    int64_t v145 = v136 - v137;
    if (v136 != v137) {
      goto LABEL_64;
    }
LABEL_70:
    v389 = v144;
    unint64_t v390 = v128;
    uint64_t v391 = &v143[8 * v142];
    if (v137) {
      operator delete(v137);
    }
LABEL_50:
    id v83 = v376;
    unint64_t v390 = v128;
  }
  uint64_t v155 = v389;
  uint64_t v156 = (double *)v390;
  if (v389 == (void *)v390)
  {
    uint64_t v386 = 0;
    uint64_t v387 = 0;
    uint64_t v388 = 0;
  }
  else
  {
    unint64_t v157 = (double *)((char *)v389 + 8);
    if ((char *)v389 + 8 != (void *)v390)
    {
      double v158 = *(double *)v389;
      do
      {
        double v158 = v158 + *v157;
        *v157++ = v158;
      }
      while (v157 != v156);
    }
    uint64_t v386 = 0;
    uint64_t v387 = 0;
    uint64_t v388 = 0;
    uint64_t v159 = (char *)v156 - v155;
    if ((char *)v156 - v155 < 0) {
      sub_1C494A220();
    }
    uint64_t v386 = operator new((char *)v156 - v155);
    uint64_t v387 = (double *)v386;
    uint64_t v388 = (double *)((char *)v386 + 8 * (v159 >> 3));
  }
  uint64_t v160 = 0;
  CGFloat v161 = *MEMORY[0x1E4F1DB28];
  CGFloat v162 = *(double *)(MEMORY[0x1E4F1DB28] + 8);
  CGFloat v163 = *(double *)(MEMORY[0x1E4F1DB28] + 16);
  CGFloat v164 = *(double *)(MEMORY[0x1E4F1DB28] + 24);
  while (2)
  {
    uint64_t v171 = v160 + 1;
    if (v160 + 1 < (unint64_t)objc_msgSend_strokeCount(v372, v129, v130, v131, v132, v133))
    {
      objc_msgSend_boundsForStrokeIndex_(v372, v166, v160, v168, v169, v170);
      CGFloat v176 = v172;
      double v177 = v173;
      double v178 = v174;
      double v179 = v175;
      if (v160)
      {
        v405.origin.CGFloat x = v161;
        v405.origin.CGFloat y = v162;
        v405.size.CGFloat width = v163;
        v405.size.CGFloat height = v164;
        *(CGRect *)&CGFloat v172 = CGRectUnion(v405, *(CGRect *)&v176);
      }
      CGFloat v161 = v172;
      CGFloat v162 = v173;
      CGFloat v163 = v174;
      CGFloat v164 = v175;
      double MaxX = CGRectGetMaxX(*(CGRect *)&v172);
      ++v160;
      objc_msgSend_boundsForStrokeIndex_(v372, v181, v171, v182, v183, v184);
      double v185 = CGRectGetMinX(v406) - MaxX;
      uint64_t v186 = v387;
      if (v387 >= v388)
      {
        uint64_t v187 = (double *)v386;
        int64_t v188 = (char *)v387 - (unsigned char *)v386;
        uint64_t v189 = ((char *)v387 - (unsigned char *)v386) >> 3;
        unint64_t v190 = v189 + 1;
        if ((unint64_t)(v189 + 1) >> 61) {
          sub_1C494A220();
        }
        uint64_t v191 = (char *)v388 - (unsigned char *)v386;
        if (((char *)v388 - (unsigned char *)v386) >> 2 > v190) {
          unint64_t v190 = v191 >> 2;
        }
        if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v192 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v192 = v190;
        }
        if (v192)
        {
          if (v192 >> 61) {
            sub_1C4949AA8();
          }
          uint64_t v193 = (char *)operator new(8 * v192);
          uint64_t v194 = (double *)&v193[8 * v189];
          *uint64_t v194 = v185;
          uint64_t v165 = (uint64_t)(v194 + 1);
          int64_t v195 = (char *)v186 - (char *)v187;
          if (v186 == v187)
          {
LABEL_103:
            uint64_t v386 = v194;
            uint64_t v387 = (double *)v165;
            uint64_t v388 = (double *)&v193[8 * v192];
            if (v187) {
              operator delete(v187);
            }
            goto LABEL_81;
          }
        }
        else
        {
          uint64_t v193 = 0;
          uint64_t v194 = (double *)(8 * v189);
          *(double *)(8 * v189) = v185;
          uint64_t v165 = 8 * v189 + 8;
          int64_t v195 = (char *)v186 - (char *)v187;
          if (v186 == v187) {
            goto LABEL_103;
          }
        }
        unint64_t v196 = v195 - 8;
        if (v196 < 0x58) {
          goto LABEL_286;
        }
        if ((unint64_t)((char *)v186 - v193 - v188) < 0x20) {
          goto LABEL_286;
        }
        uint64_t v197 = (v196 >> 3) + 1;
        uint64_t v198 = 8 * (v197 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v199 = &v186[v198 / 0xFFFFFFFFFFFFFFF8];
        uint64_t v194 = (double *)((char *)v194 - v198);
        uint64_t v200 = &v193[8 * v189 - 16];
        long long v201 = v186 - 2;
        uint64_t v202 = v197 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v203 = *(_OWORD *)v201;
          *((_OWORD *)v200 - 1) = *((_OWORD *)v201 - 1);
          *(_OWORD *)uint64_t v200 = v203;
          v200 -= 32;
          v201 -= 4;
          v202 -= 4;
        }
        while (v202);
        uint64_t v186 = v199;
        if (v197 != (v197 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_286:
          do
          {
            uint64_t v204 = *((void *)v186-- - 1);
            *((void *)v194-- - 1) = v204;
          }
          while (v186 != v187);
        }
        goto LABEL_103;
      }
      *uint64_t v387 = v185;
      uint64_t v165 = (uint64_t)(v186 + 1);
LABEL_81:
      uint64_t v387 = (double *)v165;
      id v83 = v376;
      continue;
    }
    break;
  }
  uint64_t v205 = v387;
  if (v387 < v388)
  {
    *uint64_t v387 = 0.0;
    uint64_t v206 = v205 + 1;
    goto LABEL_126;
  }
  uint64_t v207 = (double *)v386;
  int64_t v208 = (char *)v387 - (unsigned char *)v386;
  uint64_t v209 = ((char *)v387 - (unsigned char *)v386) >> 3;
  unint64_t v210 = v209 + 1;
  if ((unint64_t)(v209 + 1) >> 61) {
    sub_1C494A220();
  }
  uint64_t v211 = (char *)v388 - (unsigned char *)v386;
  if (((char *)v388 - (unsigned char *)v386) >> 2 > v210) {
    unint64_t v210 = v211 >> 2;
  }
  if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v212 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v212 = v210;
  }
  if (!v212)
  {
    uint64_t v213 = 0;
    uint64_t v214 = (double *)(8 * v209);
    uint64_t v215 = 0;
    *(void *)(8 * v209) = 0;
    uint64_t v206 = (double *)(8 * v209 + 8);
    int64_t v216 = (char *)v205 - (char *)v207;
    if (v205 == v207) {
      goto LABEL_124;
    }
    goto LABEL_118;
  }
  if (v212 >> 61) {
    sub_1C4949AA8();
  }
  uint64_t v213 = (char *)operator new(8 * v212);
  uint64_t v214 = (double *)&v213[8 * v209];
  uint64_t v215 = (double *)&v213[8 * v212];
  *uint64_t v214 = 0.0;
  uint64_t v206 = v214 + 1;
  int64_t v216 = (char *)v205 - (char *)v207;
  if (v205 != v207)
  {
LABEL_118:
    unint64_t v217 = v216 - 8;
    if (v217 < 0x58) {
      goto LABEL_287;
    }
    if ((unint64_t)((char *)v205 - v213 - v208) < 0x20) {
      goto LABEL_287;
    }
    uint64_t v218 = (v217 >> 3) + 1;
    uint64_t v219 = 8 * (v218 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v220 = &v205[v219 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v214 = (double *)((char *)v214 - v219);
    uint64_t v221 = &v213[8 * v209 - 16];
    uint64_t v222 = v205 - 2;
    uint64_t v223 = v218 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v224 = *(_OWORD *)v222;
      *((_OWORD *)v221 - 1) = *((_OWORD *)v222 - 1);
      *(_OWORD *)uint64_t v221 = v224;
      v221 -= 32;
      v222 -= 4;
      v223 -= 4;
    }
    while (v223);
    uint64_t v205 = v220;
    if (v218 != (v218 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_287:
      do
      {
        uint64_t v225 = *((void *)v205-- - 1);
        *((void *)v214-- - 1) = v225;
      }
      while (v205 != v207);
    }
  }
LABEL_124:
  uint64_t v386 = v214;
  uint64_t v387 = v206;
  uint64_t v388 = v215;
  if (v207) {
    operator delete(v207);
  }
LABEL_126:
  uint64_t v387 = v206;
  objc_msgSend_bounds(v372, v166, v167, v168, v169, v170);
  uint64_t v377 = v231;
  uint64_t v232 = (double *)v386;
  uint64_t v233 = (double *)((char *)v386 + 8);
  BOOL v234 = v386 == v206 || v233 == v387;
  uint64_t v235 = (double *)v386;
  if (!v234)
  {
    double v236 = *(double *)v386;
    uint64_t v235 = (double *)v386;
    uint64_t v237 = (double *)((char *)v386 + 8);
    do
    {
      double v238 = *v237++;
      double v239 = v238;
      if (v236 < v238)
      {
        double v236 = v239;
        uint64_t v235 = v233;
      }
      uint64_t v233 = v237;
    }
    while (v237 != v387);
  }
  uint64_t v240 = *(uint64_t *)v235;
  double v241 = *(double *)&v377;
  double v374 = *v235;
  if (v386 != v387)
  {
    unint64_t v242 = (char *)v387 - (unsigned char *)v386 - 8;
    if (v242 < 0x18) {
      goto LABEL_288;
    }
    uint64_t v243 = (v242 >> 3) + 1;
    uint64_t v244 = (double *)((char *)v386 + 8 * (v243 & 0x3FFFFFFFFFFFFFFCLL));
    float64x2_t v245 = (float64x2_t)vdupq_lane_s64(v240, 0);
    float64x2_t v246 = (float64x2_t)vdupq_lane_s64(v377, 0);
    uint64_t v247 = (float64x2_t *)((char *)v386 + 16);
    uint64_t v248 = v243 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      float64x2_t v249 = vdivq_f64(vsubq_f64(v247[-1], v245), v246);
      float64x2_t v250 = vdivq_f64(vsubq_f64(*v247, v245), v246);
      v247[-1] = vmulq_f64(v249, v249);
      float64x2_t *v247 = vmulq_f64(v250, v250);
      v247 += 2;
      v248 -= 4;
    }
    while (v248);
    uint64_t v232 = v244;
    double v241 = *(double *)&v377;
    *(double *)&uint64_t v240 = v374;
    if (v243 != (v243 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_288:
      do
      {
        double *v232 = (*v232 - *(double *)&v240) / v241 * ((*v232 - *(double *)&v240) / v241);
        ++v232;
      }
      while (v232 != v206);
    }
  }
  uint64_t v371 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v226, v227, v228, v229, v230);
  int v251 = (char **)operator new(0x20uLL);
  uint64_t v384 = v251 + 4;
  uint64_t v385 = (char *)(v251 + 4);
  *(_OWORD *)int v251 = 0u;
  *((_OWORD *)v251 + 1) = 0u;
  v383 = v251;
  double v257 = v374 / *(double *)&v377 * (v374 / *(double *)&v377);
  uint64_t v258 = &v393;
  unint64_t v373 = 1;
  while (2)
  {
    if (v373 < objc_msgSend_strokeCount(v372, v252, v253, v254, v255, v256))
    {
      uint64_t v380 = 0;
      uint64_t v381 = 0;
      uint64_t v382 = 0;
      unint64_t v264 = objc_msgSend_count(v83, v259, v260, v261, v262, v263);
      unint64_t v265 = v264;
      if (v264)
      {
        if (v264 >> 59) {
          goto LABEL_271;
        }
        uint64_t v266 = (double *)operator new(32 * v264);
        uint64_t v380 = v266;
        uint64_t v381 = v266;
        uint64_t v382 = &v266[4 * v265];
      }
      else
      {
        uint64_t v266 = 0;
      }
      unint64_t v267 = 0;
      unint64_t v268 = v373 + 1;
      unint64_t v375 = v373 - 1;
      uint64_t v269 = -32;
LABEL_151:
      unint64_t v270 = objc_msgSend_count(v83, v252, v253, v254, v255, v256);
      if (v268 >= v270) {
        unint64_t v271 = v270;
      }
      else {
        unint64_t v271 = v268;
      }
      uint64_t v378 = v266;
      if (v267 >= v271)
      {
        uint64_t v319 = (char **)v380;
        int64_t v320 = (char *)v266 - (unsigned char *)v380;
        unint64_t v321 = ((char *)v266 - (unsigned char *)v380) >> 5;
        uint64_t v322 = (uint64_t)v385;
        id v323 = (char **)v383;
        if (v321 > (v385 - (unsigned char *)v383) >> 5)
        {
          if (v383)
          {
            uint64_t v324 = v384;
            uint64_t v325 = v383;
            if (v384 != v383)
            {
              do
              {
                uint64_t v326 = *(v324 - 3);
                if (v326)
                {
                  *(v324 - 2) = v326;
                  operator delete(v326);
                }
                v324 -= 4;
              }
              while (v324 != v323);
              uint64_t v325 = v383;
            }
            uint64_t v384 = v323;
            operator delete(v325);
            uint64_t v322 = 0;
            v383 = 0;
            uint64_t v384 = 0;
            uint64_t v385 = 0;
            uint64_t v266 = v378;
          }
          if ((v320 & 0x8000000000000000) == 0)
          {
            uint64_t v332 = v322 >> 4;
            if (v322 >> 4 <= v321) {
              uint64_t v332 = v321;
            }
            unint64_t v333 = (unint64_t)v322 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v332;
            if (!(v333 >> 59))
            {
              v383 = operator new(32 * v333);
              uint64_t v384 = (char **)v383;
              uint64_t v385 = (char *)v383 + 32 * v333;
              long long v334 = (char *)sub_1C4A72B88((uint64_t)&v385, v319, v266, v383);
              goto LABEL_226;
            }
          }
LABEL_271:
          sub_1C494A220();
        }
        uint64_t v327 = (char *)v384;
        unint64_t v328 = ((char *)v384 - (unsigned char *)v383) >> 5;
        if (v328 >= v321)
        {
          if (v380 == v378)
          {
            uint64_t v331 = (char *)v383;
          }
          else
          {
            uint64_t v331 = (char *)v383;
            do
            {
              *id v323 = *v319;
              if (v319 != v323) {
                sub_1C494ACB0(v323 + 1, v319[1], v319[2], (v319[2] - v319[1]) >> 3);
              }
              v319 += 4;
              v323 += 4;
              v331 += 32;
            }
            while (v319 != (char **)v378);
            uint64_t v327 = (char *)v384;
          }
          while (v327 != v331)
          {
            uint64_t v338 = (void *)*((void *)v327 - 3);
            if (v338)
            {
              *((void *)v327 - 2) = v338;
              operator delete(v338);
            }
            v327 -= 32;
          }
        }
        else
        {
          if (v384 != v383)
          {
            uint64_t v329 = 32 * v328;
            uint64_t v330 = (char **)v380;
            do
            {
              *id v323 = *v330;
              if (v330 != v323) {
                sub_1C494ACB0(v323 + 1, v330[1], v330[2], (v330[2] - v330[1]) >> 3);
              }
              v330 += 4;
              v323 += 4;
              v329 -= 32;
            }
            while (v329);
            id v323 = v384;
          }
          long long v334 = (char *)sub_1C4A72B88((uint64_t)&v385, &v319[4 * v328], v378, v323);
LABEL_226:
          uint64_t v331 = v334;
        }
        uint64_t v384 = (char **)v331;
        int v335 = (double *)v380;
        if (v380)
        {
          for (uint64_t k = v381; k != v335; k -= 4)
          {
            uint64_t v337 = (void *)*((void *)k - 3);
            if (v337)
            {
              *((void *)k - 2) = v337;
              operator delete(v337);
            }
          }
          operator delete(v335);
        }
        unint64_t v373 = v268;
        continue;
      }
      if (v267 >= ((char *)v384 - (unsigned char *)v383) >> 5)
      {
        double v292 = 1.79769313e308;
        if (!v267) {
          goto LABEL_160;
        }
      }
      else
      {
        double v272 = *(double *)((char *)v383 + v269 + 32);
        uint64_t v273 = objc_msgSend_objectAtIndexedSubscript_(v83, v252, v267, v254, v255, v256);
        BOOL v279 = (unint64_t)objc_msgSend_length(v273, v274, v275, v276, v277, v278) > 1;

        double v280 = 0.0;
        if (!v279)
        {
          uint64_t v281 = objc_msgSend_objectAtIndexedSubscript_(v83, v252, v267, v254, v255, v256);
          uint64_t v287 = objc_msgSend_ch_mathCharSet(MEMORY[0x1E4F28B88], v282, v283, v284, v285, v286);
          BOOL v291 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v281, v288, (uint64_t)v287, 1, v289, v290) == 0;

          if (!v291) {
            double v280 = fmax(v257 - *((double *)v386 + v375), 0.0);
          }
        }
        double v292 = v272 + v280;
        uint64_t v266 = v378;
        if (!v267)
        {
LABEL_160:
          double v293 = 1.79769313e308;
          if (v292 <= 1.79769313e308) {
            goto LABEL_161;
          }
LABEL_169:
          uint64_t v303 = *(unsigned char **)((char *)v383 + v269 + 8);
          uint64_t v302 = *(unsigned char **)((char *)v383 + v269 + 16);
          int64_t v304 = v302 - v303;
          if (v302 == v303)
          {
            uint64_t v305 = 0;
            id v306 = 0;
            uint64_t v307 = 0;
            uint64_t v308 = 0;
            unint64_t v309 = 1;
          }
          else
          {
            if (v304 < 0) {
              sub_1C494A220();
            }
            uint64_t v305 = (char *)operator new(v302 - v303);
            id v306 = &v305[8 * (v304 >> 3)];
            memcpy(v305, v303, v304);
            uint64_t v307 = 8 * (v304 >> 3);
            uint64_t v308 = v307 >> 3;
            unint64_t v309 = (v307 >> 3) + 1;
            if (v309 >> 61) {
              sub_1C494A220();
            }
          }
          uint64_t v310 = v258;
          if (v307 >> 2 > v309) {
            unint64_t v309 = v307 >> 2;
          }
          if ((unint64_t)v307 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v311 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v311 = v309;
          }
          if (v311)
          {
            if (v311 >> 61) {
              sub_1C4949AA8();
            }
            uint64_t v312 = (char *)operator new(8 * v311);
            uint64_t v313 = (unint64_t *)&v312[8 * v308];
            *uint64_t v313 = v373;
            uint64_t v314 = v313 + 1;
            if (v306 != v305)
            {
LABEL_182:
              unint64_t v315 = (v306 - 8 - v305) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v313 = (unint64_t *)&v312[v307 - v315 - 8];
              memcpy(v313, &v306[-v315 - 8], v315 + 8);
            }
          }
          else
          {
            uint64_t v312 = 0;
            uint64_t v313 = (unint64_t *)(8 * v308);
            v318 = (unint64_t *)(8 * v308);
            unint64_t *v318 = v373;
            uint64_t v314 = v318 + 1;
            if (v306 != v305) {
              goto LABEL_182;
            }
          }
          id v83 = v376;
          uint64_t v379 = v313;
          if (v305) {
            operator delete(v305);
          }
          long long __p = *(void **)&v293;
          uint64_t v258 = v310;
          *((void *)v310 + 1) = 0;
          *((void *)v310 + 2) = 0;
          *(void *)uint64_t v310 = 0;
          int64_t v316 = (char *)v314 - (char *)v313;
          unint64_t v268 = v373 + 1;
          if (v314 != v313)
          {
            if (v316 < 0) {
              sub_1C494A220();
            }
            *(void *)&long long v393 = operator new((char *)v314 - (char *)v313);
            *((void *)&v393 + 1) = v393;
            uint64_t v317 = v393 + 8 * (v316 >> 3);
            unint64_t v394 = v317;
            memcpy((void *)v393, v313, v316);
            *((void *)&v393 + 1) = v317;
          }
          if (v378 >= v382)
          {
            uint64_t v266 = (double *)sub_1C4A72A44(&v380, (uint64_t)&__p);
            uint64_t v381 = v266;
            if ((void)v393) {
              operator delete((void *)v393);
            }
          }
          else
          {
            double *v378 = v293;
            v378[2] = 0.0;
            v378[3] = 0.0;
            v378[1] = 0.0;
            *(_OWORD *)(v378 + 1) = v393;
            *((void *)v378 + 3) = v394;
            uint64_t v266 = v378 + 4;
            uint64_t v381 = v378 + 4;
          }
          uint64_t v300 = v379;
          if (v379) {
LABEL_193:
          }
            operator delete(v300);
          goto LABEL_150;
        }
      }
      double v301 = (*((double *)v389 + v375) - *((double *)v399 + v267 - 1)) / *(double *)(v390 - 8);
      double v293 = *(double *)((char *)v383 + v269) + *((double *)v386 + v375) + v301 * v301 * 0.1;
      if (v293 < v292) {
        goto LABEL_169;
      }
LABEL_161:
      uint64_t v294 = (char *)v383 + v269;
      long long __p = *(void **)&v292;
      *((void *)v258 + 1) = 0;
      *((void *)v258 + 2) = 0;
      *(void *)uint64_t v258 = 0;
      uint64_t v296 = (unsigned char *)*((void *)v294 + 5);
      uint64_t v295 = (unsigned char *)*((void *)v294 + 6);
      int64_t v297 = v295 - v296;
      if (v295 != v296)
      {
        if (v297 < 0) {
          sub_1C494A220();
        }
        uint64_t v298 = (char *)operator new(v295 - v296);
        uint64_t v299 = &v298[8 * (v297 >> 3)];
        *(void *)&long long v393 = v298;
        unint64_t v394 = (unint64_t)v299;
        memcpy(v298, v296, v297);
        *((void *)&v393 + 1) = v299;
        uint64_t v266 = v378;
      }
      if (v266 < v382)
      {
        *uint64_t v266 = v292;
        v266[2] = 0.0;
        v266[3] = 0.0;
        v266[1] = 0.0;
        *(_OWORD *)(v266 + 1) = v393;
        *((void *)v266 + 3) = v394;
        v266 += 4;
        uint64_t v381 = v266;
      }
      else
      {
        uint64_t v266 = (double *)sub_1C4A72A44(&v380, (uint64_t)&__p);
        uint64_t v300 = (unint64_t *)v393;
        uint64_t v381 = v266;
        if ((void)v393) {
          goto LABEL_193;
        }
      }
LABEL_150:
      ++v267;
      v269 += 32;
      goto LABEL_151;
    }
    break;
  }
  long long v393 = 0uLL;
  long long __p = 0;
  BOOL v340 = *(v384 - 3);
  uint64_t v339 = *(v384 - 2);
  int64_t v341 = v339 - v340;
  if (v339 == v340)
  {
    uint64_t v342 = 0;
    uint64_t v345 = 0;
  }
  else
  {
    if (v341 < 0) {
      sub_1C494A220();
    }
    uint64_t v342 = (char *)operator new(v339 - v340);
    long long __p = v342;
    *(void *)&long long v393 = v342;
    uint64_t v343 = 8 * (v341 >> 3);
    *((void *)&v393 + 1) = &v342[v343];
    memcpy(v342, v340, v341);
    uint64_t v344 = 0;
    uint64_t v345 = 0;
    do
    {
      uint64_t v346 = v345;
      uint64_t v345 = *(void *)&v342[v344];
      uint64_t v347 = objc_msgSend_indexSetWithIndexesInRange_(MEMORY[0x1E4F28D60], v259, v346, v345 - v346, v262, v263);
      objc_msgSend_addObject_(v371, v348, (uint64_t)v347, v349, v350, v351);

      v344 += 8;
    }
    while (v343 != v344);
  }
  uint64_t v352 = (void *)MEMORY[0x1E4F28D60];
  uint64_t v353 = objc_msgSend_strokeCount(v372, v259, v260, v261, v262, v263);
  uint64_t v357 = objc_msgSend_indexSetWithIndexesInRange_(v352, v354, v345, v353 - v345, v355, v356);
  objc_msgSend_addObject_(v371, v358, (uint64_t)v357, v359, v360, v361);

  uint64_t v362 = [CHSynthesisResult alloc];
  uint64_t v42 = objc_msgSend_initWithContent_drawing_segmentContents_segmentStrokeIndexes_numberOfNotSynthesizedCharacters_(v362, v363, (uint64_t)v370, (uint64_t)v372, (uint64_t)v83, (uint64_t)v371, 0);
  if (v342) {
    operator delete(v342);
  }
  uint64_t v364 = (char **)v383;
  if (v383)
  {
    uint64_t v365 = v384;
    uint64_t v366 = v383;
    if (v384 != v383)
    {
      do
      {
        uint64_t v367 = *(v365 - 3);
        if (v367)
        {
          *(v365 - 2) = v367;
          operator delete(v367);
        }
        v365 -= 4;
      }
      while (v365 != v364);
      uint64_t v366 = v383;
    }
    uint64_t v384 = v364;
    operator delete(v366);
  }

  if (v386)
  {
    uint64_t v387 = (double *)v386;
    operator delete(v386);
  }
  uint64_t v37 = v369;
  if (v389)
  {
    unint64_t v390 = (unint64_t)v389;
    operator delete(v389);
  }
  if (v399)
  {
    uint64_t v400 = (double *)v399;
    operator delete(v399);
  }
LABEL_261:

LABEL_262:
  return v42;
}

void sub_1C4A72030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53)
{
  if (v54)
  {
    a40 = v54;
    operator delete(v54);
  }
  sub_1C4A728C8(&a30);

  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a36)
  {
    a37 = (uint64_t)a36;
    operator delete(a36);
  }
  if (a52)
  {
    a53 = (uint64_t)a52;
    operator delete(a52);
  }

  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::CHDiffusionPipeline::predictStyleEmbedding(CoreHandwriting::synthesis::CHDiffusionSynthesisModel **a1, void *a2, void *a3, void *a4)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a4;
  if (!objc_msgSend_length(v7, v10, v11, v12, v13, v14)
    || (CoreHandwriting::synthesis::CHDiffusionSynthesisModel::canEncodeString(*a1, (NSString *)v7) & 1) == 0)
  {
    uint64_t v25 = 0;
    goto LABEL_41;
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v15 = (id)qword_1EA3C9FC8;
  os_signpost_id_t v16 = os_signpost_id_generate(v15);

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v17 = (id)qword_1EA3C9FC8;
  uint64_t v18 = v17;
  os_signpost_id_t spid = v16;
  unint64_t v19 = v16 - 1;
  if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v17))
  {
    *(_WORD *)CGAffineTransform buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v18, OS_SIGNPOST_INTERVAL_BEGIN, v16, "CHDiffusionPipelineComputeStyleEmbedding", "", buf, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v20 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CGAffineTransform buf = 0;
    _os_log_impl(&dword_1C492D000, v20, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHDiffusionPipelineComputeStyleEmbedding\"", buf, 2u);
  }

  uint64_t v48 = objc_msgSend_synthesisOptionsWithDrawing_content_(CHSynthesisRequestOptions, v21, (uint64_t)v8, (uint64_t)v7, v22, v23);
  uint64_t v49 = CoreHandwriting::synthesis::CHDiffusionPipeline::createModelInputData(a1, v7, v48, (uint64_t)&CoreHandwriting::synthesis::CHDiffusionPipeline::DEFAULT_CONFIG);
  if (v9 && v9[2](v9))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v24 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CGAffineTransform buf = 0;
      _os_log_impl(&dword_1C492D000, v24, OS_LOG_TYPE_DEFAULT, "Synthesizer: predictStyleEmbedding received shouldCancel. Aborting prediction process.", buf, 2u);
    }
    uint64_t v25 = 0;
    goto LABEL_40;
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v26 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)CGAffineTransform buf = 138739971;
    id v52 = v7;
    _os_log_impl(&dword_1C492D000, v26, OS_LOG_TYPE_DEBUG, "Synthesizer: Predicting style embedding for transcription %{sensitive}@\n", buf, 0xCu);
  }

  id v27 = objc_alloc(MEMORY[0x1E4F1E930]);
  id v50 = 0;
  uint64_t v31 = objc_msgSend_initWithDictionary_error_(v27, v28, (uint64_t)v49, (uint64_t)&v50, v29, v30);
  uint64_t v24 = v50;
  uint64_t v32 = CoreHandwriting::synthesis::CHDiffusionSynthesisModel::predictStyle(*a1, v31);
  uint64_t v37 = v32;
  if (v32)
  {
    uint64_t v38 = objc_msgSend_featureValueForName_(v32, v33, @"diffusion_pooled_style_encoding", v34, v35, v36);
    uint64_t v25 = objc_msgSend_multiArrayValue(v38, v39, v40, v41, v42, v43);

    if (qword_1EA3CA000 == -1)
    {
      uint64_t v44 = (id)qword_1EA3C9FC8;
      if (v19 <= 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_29;
      }
    }
    else
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      uint64_t v44 = (id)qword_1EA3C9FC8;
      if (v19 <= 0xFFFFFFFFFFFFFFFDLL)
      {
LABEL_29:
        if (os_signpost_enabled(v44))
        {
          *(_WORD *)CGAffineTransform buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1C492D000, v44, OS_SIGNPOST_INTERVAL_END, spid, "CHDiffusionPipelineComputeStyleEmbedding", "", buf, 2u);
        }
      }
    }

    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v45 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CGAffineTransform buf = 0;
      _os_log_impl(&dword_1C492D000, v45, OS_LOG_TYPE_DEFAULT, "END \"CHDiffusionPipelineComputeStyleEmbedding\"", buf, 2u);
    }
    goto LABEL_39;
  }
  if (qword_1EA3CA000 != -1)
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v45 = (id)qword_1EA3C9FD8;
    if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  uint64_t v45 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
  {
LABEL_37:
    *(_WORD *)CGAffineTransform buf = 0;
    _os_log_impl(&dword_1C492D000, v45, OS_LOG_TYPE_ERROR, "Synthesizer: Diffusion model style prediction returned nil. Aborting.", buf, 2u);
  }
LABEL_38:
  uint64_t v25 = 0;
LABEL_39:

LABEL_40:
LABEL_41:

  return v25;
}

void sub_1C4A72834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

BOOL sub_1C4A728A4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_length(a2, (const char *)a2, a3, a4, a5, a6) != 0;
}

void **sub_1C4A728C8(void **a1)
{
  unint64_t v2 = (char *)*a1;
  if (*a1)
  {
    id v3 = (char *)a1[1];
    id v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        BOOL v5 = (void *)*((void *)v3 - 3);
        if (v5)
        {
          *((void *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      id v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

float32_t sub_1C4A7293C(uint64_t a1, float32x4_t *a2)
{
  unint64_t v2 = *(uint64x2_t ***)(a1 + 32);
  id v4 = *v2;
  id v3 = (unint64_t *)v2[1];
  if (v4 != (uint64x2_t *)v3)
  {
    unint64_t v5 = (char *)v3 - (char *)v4 - 8;
    if (v5 < 0x38)
    {
      uint64_t v6 = (float *)a2;
      id v7 = (unint64_t *)v4;
      do
      {
LABEL_7:
        unint64_t v18 = *v7++;
        v17.f32[0] = (float)v18;
        *v6++ = (float)v18;
      }
      while (v7 != v3);
      return v17.f32[0];
    }
    uint64_t v8 = (v5 >> 3) + 1;
    uint64_t v6 = &a2->f32[v8 & 0x3FFFFFFFFFFFFFF8];
    id v7 = (unint64_t *)v4 + (v8 & 0x3FFFFFFFFFFFFFF8);
    uint64_t v9 = v4 + 2;
    uint64_t v10 = a2 + 1;
    uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      uint64x2_t v13 = v9[-2];
      uint64x2_t v12 = v9[-1];
      uint64x2_t v15 = *v9;
      uint64x2_t v14 = v9[1];
      v9 += 4;
      float32x4_t v16 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(v13)), vcvtq_f64_u64(v12));
      float32x4_t v17 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(v15)), vcvtq_f64_u64(v14));
      v10[-1] = v16;
      *uint64_t v10 = v17;
      v10 += 2;
      v11 -= 8;
    }
    while (v11);
    if (v8 != (v8 & 0x3FFFFFFFFFFFFFF8)) {
      goto LABEL_7;
    }
  }
  return v17.f32[0];
}

uint64_t sub_1C4A729E0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      unint64_t v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(void *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 32;
    }
  }
  return a1;
}

char *sub_1C4A72A44(void **a1, uint64_t a2)
{
  uint64_t v2 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59) {
    sub_1C494A220();
  }
  uint64_t v5 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v5 >> 4 > v3) {
    unint64_t v3 = v5 >> 4;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v3;
  }
  if (v7 >> 59) {
    sub_1C4949AA8();
  }
  uint64_t v9 = 32 * v7;
  uint64_t v10 = (char *)operator new(32 * v7);
  uint64_t v11 = &v10[32 * v2];
  uint64x2_t v12 = &v10[v9];
  *(void *)uint64_t v11 = *(void *)a2;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((void *)v11 + 3) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64x2_t v13 = v11 + 32;
  uint64x2_t v14 = (char *)*a1;
  uint64x2_t v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      float32x4_t v17 = &v11[v16];
      unint64_t v18 = &v15[v16];
      *((void *)v17 - 4) = *(void *)&v15[v16 - 32];
      *(_OWORD *)(v17 - 24) = *(_OWORD *)&v15[v16 - 24];
      *((void *)v17 - 1) = *(void *)&v15[v16 - 8];
      *((void *)v18 - 3) = 0;
      *((void *)v18 - 2) = 0;
      *((void *)v18 - 1) = 0;
      v16 -= 32;
    }
    while (&v15[v16] != v14);
    uint64x2_t v15 = (char *)*a1;
    unint64_t v19 = (char *)a1[1];
    *a1 = &v11[v16];
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      uint64_t v20 = (void *)*((void *)v19 - 3);
      if (v20)
      {
        *((void *)v19 - 2) = v20;
        operator delete(v20);
      }
      v19 -= 32;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void *sub_1C4A72B88(uint64_t a1, void *a2, void *a3, void *a4)
{
  if (a2 != a3)
  {
    BOOL v6 = a2;
    do
    {
      *a4 = *v6;
      a4[2] = 0;
      a4[3] = 0;
      a4[1] = 0;
      uint64_t v9 = (unsigned char *)v6[1];
      uint64_t v8 = (unsigned char *)v6[2];
      int64_t v10 = v8 - v9;
      if (v8 != v9)
      {
        if (v10 < 0) {
          sub_1C494A220();
        }
        uint64_t v11 = (char *)operator new(v8 - v9);
        a4[1] = v11;
        a4[2] = v11;
        unint64_t v7 = &v11[8 * (v10 >> 3)];
        a4[3] = v7;
        memcpy(v11, v9, v10);
        a4[2] = v7;
      }
      a4 += 4;
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_1C4A72C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void **)(v9 + 8);
  if (v11)
  {
    *(void *)(v9 + 16) = v11;
    operator delete(v11);
  }
  sub_1C4A729E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1C4A72E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4A73264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A73278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A73288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A7329C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A732AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A732F4(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a1) {
    return 0;
  }
  uint64_t v9 = objc_msgSend_targetContentInfo(a1, a2, a3, a4, a5, a6);
  uint64_t v14 = objc_msgSend_referenceSubstringRangeOfComposedCharacterAtIndex_(v9, v10, (uint64_t)a2, v11, v12, v13);

  uint64_t v20 = objc_msgSend_targetContentInfo(a1, v15, v16, v17, v18, v19);
  objc_msgSend_referenceSubstringRangeOfComposedCharacterAtIndex_(v20, v21, (uint64_t)&a2[a3 - 1], v22, v23, v24);

  return v14;
}

void sub_1C4A733A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A733B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A733C0(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a1) {
    return 0;
  }
  uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
  if (a2 != (const char *)0x7FFFFFFFFFFFFFFFLL)
  {
    int64_t v10 = objc_msgSend_targetContentInfo(a1, a2, a3, a4, a5, a6);
    uint64_t v15 = objc_msgSend_relativeLocationFromAbsoluteLocation_(v10, v11, (uint64_t)a2, v12, v13, v14);

    uint64_t v66 = 0;
    uint64_t v67 = &v66;
    uint64_t v68 = 0x4012000000;
    uint64_t v69 = sub_1C4A74760;
    uint64_t v70 = nullsub_28;
    uint64_t v71 = &unk_1C4CB5C62;
    uint64_t v72 = v15;
    uint64_t v73 = a3;
    float v21 = objc_msgSend_newlineCharacterSet(MEMORY[0x1E4F28B88], v16, v17, v18, v19, v20);
    id v27 = objc_msgSend_targetContentInfo(a1, v22, v23, v24, v25, v26);
    uint64_t v33 = objc_msgSend_referenceSubstring(v27, v28, v29, v30, v31, v32);
    v63[0] = MEMORY[0x1E4F143A8];
    v63[1] = 3221225472;
    v63[2] = sub_1C4A74770;
    v63[3] = &unk_1E64E2B00;
    id v34 = v21;
    id v64 = v34;
    uint64_t v65 = &v66;
    objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v33, v35, v15, a3, 2, (uint64_t)v63);

    if (v67[7])
    {
      uint64_t v41 = objc_msgSend_targetContentInfo(a1, v36, v37, v38, v39, v40);
      uint64_t v47 = objc_msgSend_referenceSubstring(v41, v42, v43, v44, v45, v46);
      uint64_t v57 = MEMORY[0x1E4F143A8];
      uint64_t v58 = 3221225472;
      uint64_t v59 = sub_1C4A74828;
      uint64_t v60 = &unk_1E64E2B00;
      id v61 = v34;
      uint64_t v62 = &v66;
      objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v47, v48, v15, a3, 258, (uint64_t)&v57);
    }
    uint64_t v49 = objc_msgSend_targetContentInfo(a1, v36, v37, v38, v39, v40, v57, v58, v59, v60);
    uint64_t v54 = objc_msgSend_absoluteLocationFromRelativeLocation_(v49, v50, v67[6], v51, v52, v53);
    uint64_t v55 = v67[7];

    if (v55) {
      uint64_t v8 = v54;
    }
    else {
      uint64_t v8 = (uint64_t)a2;
    }

    _Block_object_dispose(&v66, 8);
  }
  return v8;
}

void sub_1C4A73624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A7367C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A736B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A736CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A736E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A736F4(void *a1, const char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a1) {
    return 0;
  }
  uint64_t v7 = (uint64_t)a2;
  if (a2 == (const char *)0x7FFFFFFFFFFFFFFFLL)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v9 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v97 = 0;
      _os_log_impl(&dword_1C492D000, v9, OS_LOG_TYPE_FAULT, "The affected range to be trimmed must be valid", v97, 2u);
    }
  }
  if (a3 >= 2)
  {
    int64_t v10 = objc_msgSend_targetContentInfo(a1, a2, a3, a4, a5, a6);
    uint64_t v15 = objc_msgSend_relativeLocationFromAbsoluteLocation_(v10, v11, v7, v12, v13, v14);

    float v21 = objc_msgSend_targetContentInfo(a1, v16, v17, v18, v19, v20);
    id v27 = objc_msgSend_referenceSubstring(v21, v22, v23, v24, v25, v26);
    uint64_t v32 = objc_msgSend_rangeOfComposedCharacterSequenceAtIndex_(v27, v28, v15, v29, v30, v31);
    uint64_t v34 = v33;

    uint64_t v40 = objc_msgSend_targetContentInfo(a1, v35, v36, v37, v38, v39);
    uint64_t v46 = objc_msgSend_referenceSubstring(v40, v41, v42, v43, v44, v45);
    id v50 = objc_msgSend_substringWithRange_(v46, v47, v32, v34, v48, v49);
    int isEqualToString = objc_msgSend_isEqualToString_(v50, v51, @" ", v52, v53, v54);

    if (isEqualToString) {
      uint64_t v61 = v34;
    }
    else {
      uint64_t v61 = 0;
    }
    uint64_t v62 = objc_msgSend_targetContentInfo(a1, v56, v57, v58, v59, v60);
    uint64_t v68 = objc_msgSend_referenceSubstring(v62, v63, v64, v65, v66, v67);
    uint64_t v73 = objc_msgSend_rangeOfComposedCharacterSequenceAtIndex_(v68, v69, a3 + v15 - 1, v70, v71, v72);
    uint64_t v75 = v74;

    unint64_t v81 = objc_msgSend_targetContentInfo(a1, v76, v77, v78, v79, v80);
    uint64_t v87 = objc_msgSend_referenceSubstring(v81, v82, v83, v84, v85, v86);
    uint64_t v91 = objc_msgSend_substringWithRange_(v87, v88, v73, v75, v89, v90);
    objc_msgSend_isEqualToString_(v91, v92, @" ", v93, v94, v95);
    v7 += v61;
  }
  return v7;
}

void sub_1C4A73920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A73940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A73950(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A739B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A739C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A739D4(void *a1, const char *a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6)
{
  uint64_t v152 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  NSUInteger v6 = a3;
  uint64_t v7 = (uint64_t)a2;
  if (a3)
  {
    char v8 = a4;
    int64_t v10 = objc_msgSend_targetContentInfo(a1, a2, a3, a4, (uint64_t)a5, a6);
    unint64_t v15 = objc_msgSend_relativeLocationFromAbsoluteLocation_(v10, v11, v7, v12, v13, v14);

    float v21 = objc_msgSend_targetContentInfo(a1, v16, v17, v18, v19, v20);
    unint64_t v146 = objc_msgSend_referenceSubstring(v21, v22, v23, v24, v25, v26);

    uint64_t v144 = objc_msgSend_locale(a1, v27, v28, v29, v30, v31);
    unint64_t v37 = v15 + v6;
    if (v15 + v6 > objc_msgSend_length(v146, v32, v33, v34, v35, v36))
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v38 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v38, OS_LOG_TYPE_FAULT))
      {
        v153.locatiounint64_t n = v15;
        v153.NSUInteger length = v6;
        uint64_t v39 = NSStringFromRange(v153);
        *(_DWORD *)CGAffineTransform buf = 138412546;
        unint64_t v149 = (unint64_t)v39;
        __int16 v150 = 2048;
        uint64_t v151 = objc_msgSend_length(v146, v40, v41, v42, v43, v44);
        _os_log_impl(&dword_1C492D000, v38, OS_LOG_TYPE_FAULT, "Range %@ out of string length %ld", buf, 0x16u);
      }
    }
    __int16 v147 = 0;
    sub_1C4A74AE4((uint64_t)CHTextInputGesture, v146, v15, v6, (unsigned char *)&v147 + 1, &v147);
    if (!(HIBYTE(v147) | v147))
    {
      char v50 = 0;
LABEL_52:
      uint64_t v112 = objc_msgSend_targetContentInfo(a1, v45, v46, v47, v48, v49);
      uint64_t active = objc_msgSend_activePreviewRange(v112, v113, v114, v115, v116, v117);
      NSUInteger v120 = v119;

      float64x2_t v126 = objc_msgSend_targetContentInfo(a1, v121, v122, v123, v124, v125);
      NSUInteger v131 = objc_msgSend_relativeLocationFromAbsoluteLocation_(v126, v127, active, v128, v129, v130);

      if (v131 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v154.locatiounint64_t n = v131;
        v154.NSUInteger length = v120;
        v155.locatiounint64_t n = v15;
        v155.NSUInteger length = v6;
        NSRange v137 = NSIntersectionRange(v154, v155);
        NSUInteger length = (const char *)v137.length;
        if (v137.length == v6)
        {
          unint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else if (v137.length && v131 <= v15)
        {
          unint64_t v15 = v131 + v120;
        }
      }
      if (a5) {
        *a5 = v50;
      }
      int64_t v138 = objc_msgSend_targetContentInfo(a1, length, v133, v134, v135, v136);
      uint64_t v7 = objc_msgSend_absoluteLocationFromRelativeLocation_(v138, v139, v15, v140, v141, v142);

      return v7;
    }
    uint64_t v51 = objc_opt_class();
    uint64_t v54 = objc_msgSend_rangeOfTokenAtCharacterIndex_inString_locale_(v51, v52, v15, (uint64_t)v146, (uint64_t)v144, v53);
    uint64_t v56 = v55;
    uint64_t v57 = objc_opt_class();
    uint64_t v60 = objc_msgSend_rangeOfTokenAtCharacterIndex_inString_locale_(v57, v58, v37 - 1, (uint64_t)v146, (uint64_t)v144, v59);
    uint64_t v61 = v60;
    uint64_t v62 = v45;
    if ((v8 & 1) != 0 && v54 == v60 && v56 == v45)
    {
      uint64_t v63 = objc_msgSend_lastStroke(a1, v45, v46, v47, v48, v49);
      if (v63)
      {
      }
      else if (!objc_msgSend_preferCharacterLevel(a1, v64, v65, v66, v67, v68))
      {
        goto LABEL_27;
      }
      if (objc_msgSend_preferCharacterLevel(a1, v45, v46, v47, v48, v49)) {
        goto LABEL_26;
      }
      uint64_t v69 = objc_msgSend_lastStroke(a1, v45, v46, v47, v48, v49);
      BOOL v70 = v69 == 0;

      if (v70) {
        goto LABEL_26;
      }
      uint64_t v71 = objc_msgSend_sharedSettings(CHTextInputProtoSettings, v45, v46, v47, v48, v49);
      objc_msgSend_subwordGestureEndingSpeedRange(v71, v72, v73, v74, v75, v76);
      double v78 = v77;

      uint64_t v84 = objc_msgSend_lastStroke(a1, v79, v80, v81, v82, v83);
      objc_msgSend_speedForFinalTimeRange_stroke_(CHStrokeUtilities, v85, (uint64_t)v84, v86, v87, v88, v78);
      double v90 = v89;

      if (v90 > -1.0)
      {
        uint64_t v91 = objc_msgSend_sharedSettings(CHTextInputProtoSettings, v45, v46, v47, v48, v49);
        objc_msgSend_subwordGestureSpeedThreshold(v91, v92, v93, v94, v95, v96);
        BOOL v98 = v90 < v97;

        if (v98)
        {
LABEL_26:
          uint64_t v99 = objc_msgSend_sharedSettings(CHTextInputProtoSettings, v45, v46, v47, v48, v49);
          int v105 = objc_msgSend_preventLeftoverCharsInSubwordGestures(v99, v100, v101, v102, v103, v104);

          char v50 = 0;
          if (!v105 || (uint64_t)(v15 - v54) > 1 || (uint64_t)&v62[v54 - v37] > 1) {
            goto LABEL_52;
          }
        }
      }
    }
LABEL_27:
    if (v54 == 0x7FFFFFFFFFFFFFFFLL || HIBYTE(v147) == 0) {
      uint64_t v54 = v15;
    }
    unint64_t v107 = v15 - v54;
    if (v61 == 0x7FFFFFFFFFFFFFFFLL || v147 == 0) {
      long long v109 = 0;
    }
    else {
      long long v109 = &v62[v61 - v37];
    }
    if ((v107 & 0x8000000000000000) != 0)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v110 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v110, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)CGAffineTransform buf = 134217984;
        unint64_t v149 = v15 - v54;
        _os_log_impl(&dword_1C492D000, v110, OS_LOG_TYPE_FAULT, "leadingExpansion cannot be negative: %ld", buf, 0xCu);
      }
    }
    if (((unint64_t)v109 & 0x8000000000000000) != 0)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v111 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v111, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)CGAffineTransform buf = 134217984;
        unint64_t v149 = (unint64_t)v109;
        _os_log_impl(&dword_1C492D000, v111, OS_LOG_TYPE_FAULT, "trailingExpansion cannot be negative: %ld", buf, 0xCu);
      }
    }
    v6 += (NSUInteger)&v109[v107];
    char v50 = 1;
    unint64_t v15 = v54;
    goto LABEL_52;
  }
  if (a5) {
    *a5 = 0;
  }
  return v7;
}

void sub_1C4A73F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A74070(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  id v124 = a5;
  id v10 = a6;
  self;
  self;
  unint64_t v11 = a4 - 4;
  if ((unint64_t)(a4 - 4) >= 3)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v12 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)CGAffineTransform buf = 0;
      _os_log_impl(&dword_1C492D000, v12, OS_LOG_TYPE_FAULT, "Refined stroke ranges can only be computed for scribble, circle or polygon result types", buf, 2u);
    }
  }
  if (a2 == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v13 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)CGAffineTransform buf = 0;
      _os_log_impl(&dword_1C492D000, v13, OS_LOG_TYPE_FAULT, "The initial affected text range must be valid", buf, 2u);
    }
  }
  unint64_t v125 = a2;
  uint64_t v14 = objc_opt_class();
  uint64_t v22 = objc_msgSend_indexSetWithIndex_(MEMORY[0x1E4F28D60], v15, 0, v16, v17, v18);
  if (v14)
  {
    objc_msgSend_convexHullForStrokes_inDrawing_(v14, v19, (uint64_t)v22, (uint64_t)v124, v20, v21);
  }
  else
  {
    *(void *)CGAffineTransform buf = 0;
    uint64_t v134 = 0;
    uint64_t v135 = 0;
  }

  uint64_t v24 = *(void **)buf;
  uint64_t v23 = v134;
  unint64_t v123 = (unint64_t)v134 - *(void *)buf;
  unint64_t v131 = ((uint64_t)v134 - *(void *)buf) >> 4;
  uint64_t v25 = (char *)malloc_type_calloc(v131, 0x10uLL, 0x1000040451B5BE8uLL);
  uint64_t v26 = (uint64_t)v25;
  if (v23 != v24)
  {
    uint64_t v27 = 0;
    uint64_t v28 = v131;
    if (v131 <= 1) {
      uint64_t v28 = 1;
    }
    do
    {
      *(_OWORD *)&v25[v27] = *(_OWORD *)(*(void *)buf + v27);
      v27 += 16;
      --v28;
    }
    while (v28);
  }
  uint64_t v29 = [CHPolygon alloc];
  uint64_t v30 = v125;
  uint64_t v34 = objc_msgSend_initWithVertices_vertexCount_(v29, v31, v26, v131, v32, v33);
  uint64_t v39 = (void *)v34;
  if (v11 >= 3)
  {
    double v40 = 100.0;
    uint64_t v41 = v125 + a3;
    if (v125 >= v125 + a3) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  double v40 = dbl_1C4C3B338[v11];
  uint64_t v41 = v125 + a3;
  if (v125 < v125 + a3)
  {
LABEL_30:
    uint64_t v44 = 0;
    uint64_t v45 = 2;
    if (v131 > 2) {
      uint64_t v45 = v131;
    }
    uint64_t v130 = v45;
    uint64_t v128 = (void *)v34;
    uint64_t v129 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v126 = v41;
    uint64_t v127 = a4;
    while (1)
    {
      uint64_t v49 = objc_msgSend_referenceSubstringRangeOfComposedCharacterAtIndex_(v10, v35, v30, v36, v37, v38);
      uint64_t v50 = (uint64_t)v46;
      if (v49 == 0x7FFFFFFFFFFFFFFFLL)
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        uint64_t v51 = (id)qword_1EA3C9F90[0];
        if (os_log_type_enabled(v51, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t v132 = 0;
          _os_log_impl(&dword_1C492D000, v51, OS_LOG_TYPE_FAULT, "Character range cannot be undefined.", v132, 2u);
        }
      }
      uint64_t v52 = objc_msgSend_referenceSubstringInRange_(v10, v46, v49, v50, v47, v48);
      uint64_t v57 = objc_msgSend_singleScriptCodeForString_(CHTextInputScriptSpec, v53, (uint64_t)v52, v54, v55, v56);
      if (a4 == 6)
      {
        if (objc_msgSend_shouldRelaxCharacterBoundsPercentageOverlapForScript_(CHTextInputScriptSpec, v58, v57, v59, v60, v61))double v66 = 10.0; {
        else
        }
          double v66 = v40;
        objc_msgSend_visualCharacterRectForCharacterIndex_(v10, v62, v30, v63, v64, v65);
        double v68 = v67;
        double v70 = v69;
        double v72 = v71;
        double v74 = v73;
      }
      else
      {
        objc_msgSend_characterRectForComposedCharacterAtIndex_(v10, v58, v30, v59, v60, v61);
        double v68 = v75;
        double v70 = v76;
        double v72 = v77;
        double v74 = v78;
        double v66 = v40;
      }
      v136.origin.CGFloat x = v68;
      v136.origin.CGFloat y = v70;
      v136.size.CGFloat width = v72;
      v136.size.CGFloat height = v74;
      if (CGRectIsNull(v136)) {
        goto LABEL_35;
      }
      uint64_t v79 = [CHPolygon alloc];
      uint64_t v85 = objc_msgSend_initWithRect_(v79, v80, v81, v82, v83, v84, v68, v70, v72, v74);
      double v90 = objc_msgSend_polygonByIntersectingWithClipPolygon_(v39, v86, (uint64_t)v85, v87, v88, v89);
      objc_msgSend_area(v90, v91, v92, v93, v94, v95);
      double v97 = v96;
      objc_msgSend_area(v85, v98, v99, v100, v101, v102);
      double v109 = v97 / v108 * 100.0;
      ++v44;
      BOOL v110 = v109 > v66;
      if (v109 > 0.0)
      {
        if (v109 > v66) {
          goto LABEL_51;
        }
        if (a4 == 6)
        {
          uint64_t v111 = objc_msgSend_edgeCountIntersectingLineSegment_(v39, v103, v104, v105, v106, v107, v68, v70 + v74 * 0.25, v68, v70 + v74 * 0.75);
          v137.origin.CGFloat x = v68;
          v137.origin.CGFloat y = v70;
          v137.size.CGFloat width = v72;
          v137.size.CGFloat height = v74;
          double MaxX = CGRectGetMaxX(v137);
          v138.origin.CGFloat x = v68;
          v138.origin.CGFloat y = v70;
          v138.size.CGFloat width = v72;
          v138.size.CGFloat height = v74;
          CGFloat v113 = CGRectGetMaxX(v138);
          uint64_t v119 = objc_msgSend_edgeCountIntersectingLineSegment_(v39, v114, v115, v116, v117, v118, MaxX, v70 + v74 * 0.25, v113, v70 + v74 * 0.75);
          if (v111 > 0 || v119 >= 1)
          {
LABEL_51:
            if (v129 == 0x7FFFFFFFFFFFFFFFLL) {
              goto LABEL_62;
            }
            goto LABEL_34;
          }
        }
        if (v123 < 0x11) {
          goto LABEL_34;
        }
        uint64_t v120 = 0;
        uint64_t v121 = 0;
        BOOL v110 = 1;
        uint64_t v122 = 1;
        do
        {
          v121 += objc_msgSend_edgeCountIntersectingLineSegment_(v85, v103, v104, v105, v106, v107, *(double *)(*(void *)buf + v120), *(double *)(*(void *)buf + v120 + 8), *(double *)(*(void *)buf + v120 + 16), *(double *)(*(void *)buf + v120 + 24));
          if (v121 >= 3) {
            break;
          }
          BOOL v110 = ++v122 < v131;
          v120 += 16;
        }
        while (v130 != v122);
      }
      uint64_t v41 = v126;
      if (v110)
      {
        uint64_t v39 = v128;
        a4 = v127;
        if (v129 == 0x7FFFFFFFFFFFFFFFLL)
        {
LABEL_62:
          uint64_t v129 = v30;
          uint64_t v44 = 1;
        }
      }
      else
      {
        a4 = v127;
        uint64_t v39 = v128;
      }
LABEL_34:

LABEL_35:
      if (++v30 == v41) {
        goto LABEL_23;
      }
    }
  }
LABEL_22:
  uint64_t v129 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_23:

  if (*(void *)buf)
  {
    uint64_t v134 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  if (v129 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v42 = v125;
  }
  else {
    uint64_t v42 = v129;
  }

  return v42;
}

void sub_1C4A74680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4A7469C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C4A74750()
{
}

void sub_1C4A74758()
{
}

__n128 sub_1C4A74760(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1C4A74770(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  id v10 = a2;
  unint64_t v11 = *(void **)(a1 + 32);
  id v21 = v10;
  uint64_t v16 = objc_msgSend_characterAtIndex_(v10, v12, 0, v13, v14, v15);
  if (objc_msgSend_characterIsMember_(v11, v17, v16, v18, v19, v20))
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 48) += a4;
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 56) -= a4;
  }
  else
  {
    *a7 = 1;
  }
}

void sub_1C4A74814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A74828(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  id v10 = a2;
  unint64_t v11 = *(void **)(a1 + 32);
  id v21 = v10;
  uint64_t v16 = objc_msgSend_characterAtIndex_(v10, v12, 0, v13, v14, v15);
  if (objc_msgSend_characterIsMember_(v11, v17, v16, v18, v19, v20)) {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 56) -= a4;
  }
  else {
    *a7 = 1;
  }
}

void sub_1C4A748B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A749F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

void *sub_1C4A74A40(void *result, unint64_t a2)
{
  uint64_t v2 = *(void *)(result[4] + 8);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v3 <= a2)
  {
    uint64_t v4 = *(void *)(result[5] + 8);
    uint64_t v5 = *(void *)(v4 + 24);
    if (v5 + v3 > a2)
    {
      if (a2 + 1 == result[8] + result[7])
      {
        *(void *)(v4 + 24) = v5 - 1;
      }
      else if (v3 == a2)
      {
        *(void *)(v2 + 24) = a2 + 1;
        --*(void *)(*(void *)(result[5] + 8) + 24);
      }
      else
      {
        uint64_t v6 = *(void *)(result[6] + 8);
        if (!*(unsigned char *)(v6 + 24))
        {
          *(unsigned char *)(v6 + 24) = 1;
          *(void *)(*(void *)(result[5] + 8) + 24) = a2 - *(void *)(*(void *)(result[4] + 8) + 24);
        }
      }
    }
  }
  return result;
}

void sub_1C4A74AE4(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, unsigned char *a5, unsigned char *a6)
{
  id v10 = a2;
  self;
  if (a3 == 0x7FFFFFFFFFFFFFFFLL || a3 + a4 > objc_msgSend_length(v10, v11, v12, v13, v14, v15))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v17 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)CGAffineTransform buf = 0;
      _os_log_impl(&dword_1C492D000, v17, OS_LOG_TYPE_FAULT, "The input string and range must be compatible with each other", buf, 2u);
    }
  }
  *(void *)CGAffineTransform buf = 0;
  uint64_t v44 = buf;
  uint64_t v45 = 0x2020000000;
  int v46 = 0;
  v42[0] = MEMORY[0x1E4F143A8];
  v42[1] = 3221225472;
  v42[2] = sub_1C4A74D88;
  v42[3] = &unk_1E64E2B28;
  void v42[4] = buf;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v10, v16, 0, a3 + 1, 258, (uint64_t)v42);
  uint64_t v18 = objc_opt_class();
  char shouldCorrectionGesturesSnapToTokensForScriptCode = objc_msgSend_shouldCorrectionGesturesSnapToTokensForScriptCode_(v18, v19, *((unsigned int *)v44 + 6), v20, v21, v22);
  char v29 = shouldCorrectionGesturesSnapToTokensForScriptCode;
  uint64_t v38 = 0;
  uint64_t v39 = &v38;
  uint64_t v40 = 0x2020000000;
  int v41 = 0;
  int v41 = *((_DWORD *)v44 + 6);
  if (a4 >= 2)
  {
    uint64_t v30 = objc_msgSend_length(v10, v24, v25, v26, v27, v28);
    v37[0] = MEMORY[0x1E4F143A8];
    v37[1] = 3221225472;
    v37[2] = sub_1C4A74E30;
    v37[3] = &unk_1E64E2B28;
    v37[4] = &v38;
    objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v10, v31, a3 + a4, v30 - (a3 + a4), 2, (uint64_t)v37);
    uint64_t v32 = objc_opt_class();
    char shouldCorrectionGesturesSnapToTokensForScriptCode = objc_msgSend_shouldCorrectionGesturesSnapToTokensForScriptCode_(v32, v33, *((unsigned int *)v39 + 6), v34, v35, v36);
  }
  if (a5) {
    *a5 = v29;
  }
  if (a6) {
    *a6 = shouldCorrectionGesturesSnapToTokensForScriptCode;
  }
  _Block_object_dispose(&v38, 8);
  _Block_object_dispose(buf, 8);
}

void sub_1C4A74D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1C4A74D88(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  id v19 = a2;
  uint64_t v9 = objc_opt_class();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_msgSend_singleScriptCodeForString_(v9, v10, (uint64_t)v19, v11, v12, v13);
  uint64_t v14 = objc_opt_class();
  if ((objc_msgSend_isSkippableScriptCode_(v14, v15, *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v16, v17, v18) & 1) == 0)*a7 = 1; {
}
  }

void sub_1C4A74E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A74E30(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  id v19 = a2;
  uint64_t v9 = objc_opt_class();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_msgSend_singleScriptCodeForString_(v9, v10, (uint64_t)v19, v11, v12, v13);
  uint64_t v14 = objc_opt_class();
  if ((objc_msgSend_isSkippableScriptCode_(v14, v15, *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v16, v17, v18) & 1) == 0)*a7 = 1; {
}
  }

void sub_1C4A74EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A750CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A75108(__n128 a1, __n128 a2, uint64_t a3, void *a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v104 = a6;
  __n128 v103 = a2;
  __n128 v105 = a1;
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  id v11 = a4;
  self;
  if (a7 == 0x7FFFFFFFFFFFFFFFLL || !a8)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v14 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)CGAffineTransform buf = 0;
      _os_log_impl(&dword_1C492D000, v14, OS_LOG_TYPE_FAULT, "The searching range must be valid", buf, 2u);
    }
  }
  *(void *)CGAffineTransform buf = 0;
  uint64_t v115 = buf;
  uint64_t v116 = 0x5012000000;
  uint64_t v117 = sub_1C4A758F4;
  uint64_t v118 = nullsub_29;
  uint64_t v119 = &unk_1C4CB5C62;
  long long v15 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  long long v120 = *MEMORY[0x1E4F1DB20];
  long long v121 = v15;
  if (a7 >= a7 + a8)
  {
    uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    *(void *)&v16.f64[0] = v105.n128_u64[0];
    *(void *)&v16.f64[1] = v103.n128_u64[0];
    float32x2_t v17 = vcvt_f32_f64(v16);
    uint64_t v18 = v104 + 32 * a7 + 16;
    uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
    double v20 = 1.79769313e308;
    do
    {
      CGFloat v21 = *(double *)(v18 - 16);
      CGFloat v22 = *(double *)(v18 - 8);
      CGFloat v23 = *(double *)v18;
      CGFloat v24 = *(double *)(v18 + 8);
      v127.origin.CGFloat x = v21;
      v127.origin.CGFloat y = v22;
      v127.size.CGFloat width = *(CGFloat *)v18;
      v127.size.CGFloat height = v24;
      *(double *)&long long v25 = CGRectGetMidX(v127);
      long long v106 = v25;
      *(CGFloat *)&long long v25 = v21;
      CGFloat v26 = v22;
      CGFloat v27 = v23;
      CGFloat v28 = v24;
      CGFloat MidY = CGRectGetMidY(*(CGRect *)&v25);
      *(void *)&v30.f64[0] = v106;
      v30.f64[1] = MidY;
      float32x2_t v31 = vsub_f32(v17, vcvt_f32_f64(v30));
      double v32 = sqrtf(vaddv_f32(vmul_f32(v31, v31)));
      if (v20 > v32)
      {
        uint64_t v33 = (CGFloat *)v115;
        *((CGFloat *)v115 + 6) = v21;
        v33[7] = v22;
        v33[8] = v23;
        v33[9] = v24;
        double v20 = v32;
        uint64_t v19 = a7;
      }
      ++a7;
      v18 += 32;
      --a8;
    }
    while (a8);
  }
  uint64_t v34 = objc_msgSend_regularExpressionWithPattern_options_error_(MEMORY[0x1E4F28FD8], v12, @"[\u200E\u200F\u202A-\u202E]", 0, 0, v13);
  uint64_t v40 = objc_msgSend_length(v11, v35, v36, v37, v38, v39);
  uint64_t v42 = objc_msgSend_firstMatchInString_options_range_(v34, v41, (uint64_t)v11, 0, 0, v40);
  uint64_t v45 = objc_msgSend_regularExpressionWithPattern_options_error_(MEMORY[0x1E4F28FD8], v43, @"[؀-ۿ]", 0, 0, v44);
  uint64_t v51 = objc_msgSend_length(v11, v46, v47, v48, v49, v50);
  uint64_t v53 = objc_msgSend_firstMatchInString_options_range_(v45, v52, (uint64_t)v11, 0, 0, v51);
  uint64_t v54 = (void *)v53;
  if (a5 <= 1 && !v42 && v53)
  {
    *(void *)&long long v106 = 0;
    ubidi_open();
    uint64_t v60 = objc_msgSend_length(v11, v55, v56, v57, v58, v59);
    v102[1] = v102;
    int v61 = MEMORY[0x1F4188790](v60);
    objc_msgSend_getCharacters_range_(v11, v63, (uint64_t)v102 - ((v62 + 15) & 0x3FFFFFFF0), 0, v61, v64);
    int v113 = 0;
    uint64_t v65 = ubidi_setPara();
    MEMORY[0x1F4188790](v65);
    double v67 = (char *)v102 - ((v66 + 15) & 0x7FFFFFFF0);
    ubidi_getVisualMap();
    uint64_t Levels = ubidi_getLevels();
    uint64_t v42 = (void *)v106;
    if (v113 < 1)
    {
      uint64_t v70 = Levels;
      double MinX = CGRectGetMinX(*(CGRect *)(v115 + 48));
      double MaxX = CGRectGetMaxX(*(CGRect *)(v115 + 48));
      unint64_t v78 = 0;
      double v79 = vabdd_f64(MinX, v105.n128_f64[0]);
      double v80 = vabdd_f64(MaxX, v105.n128_f64[0]);
      while (v78 < objc_msgSend_length(v11, v72, v73, v74, v75, v76))
      {
        if (v19 == *(_DWORD *)&v67[4 * v78]) {
          goto LABEL_28;
        }
        ++v78;
      }
      unint64_t v78 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_28:
      uint64_t v81 = objc_msgSend_length(v11, v72, v73, v74, v75, v76);
      if (v79 > v80) {
        unint64_t v87 = v78 + 1;
      }
      else {
        unint64_t v87 = v78 - 1;
      }
      if (v81 - 1 < v87) {
        unint64_t v87 = objc_msgSend_length(v11, v82, v83, v84, v85, v86) - 1;
      }
      if (*(unsigned __int8 *)(v70 + *(int *)&v67[4 * v87]) < *(unsigned __int8 *)(v70 + v19))
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        uint64_t v88 = (id)qword_1EA3C9FC0;
        if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
        {
          int v89 = *(_DWORD *)&v67[4 * v87];
          *(_DWORD *)uint64_t v122 = 134218240;
          uint64_t v123 = v19;
          __int16 v124 = 1024;
          int v125 = v89;
          _os_log_impl(&dword_1C492D000, v88, OS_LOG_TYPE_DEBUG, "CHTextInputGesture _cursorPositionForPoint updated index from %li to %i", v122, 0x12u);
        }

        uint64_t v19 = *(int *)&v67[4 * v87];
        uint64_t v90 = *((void *)v115 + 6);
        uint64_t v91 = *((void *)v115 + 7);
        uint64_t v92 = *((void *)v115 + 8);
        uint64_t v93 = *((void *)v115 + 9);
        if (v79 > v80) {
          v94.n128_f64[0] = CGRectGetMinX(*(CGRect *)&v90);
        }
        else {
          v94.n128_f64[0] = CGRectGetMaxX(*(CGRect *)&v90);
        }
        __n128 v105 = v94;
      }
    }
    else
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      double v69 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v122 = 0;
        _os_log_impl(&dword_1C492D000, v69, OS_LOG_TYPE_ERROR, "CHTextInputGesture _cursorPositionForPoint failed in unicode logical to visual transform", v122, 2u);
      }
    }
  }
  if (v19 == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v95 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v95, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v122 = 0;
      _os_log_impl(&dword_1C492D000, v95, OS_LOG_TYPE_FAULT, "There must be a valid character closest to the point", v122, 2u);
    }
  }
  v107[0] = MEMORY[0x1E4F143A8];
  v107[1] = 3221225472;
  v107[2] = sub_1C4A75904;
  v107[3] = &unk_1E64E3060;
  double v109 = buf;
  uint64_t v110 = v104;
  unint64_t v111 = v105.n128_u64[0];
  unint64_t v112 = v103.n128_u64[0];
  id v96 = v11;
  id v108 = v96;
  uint64_t v100 = objc_msgSend_cursorPositionAtIndex_usingBlockToSelectSide_(v96, v97, v19, (uint64_t)v107, v98, v99);

  _Block_object_dispose(buf, 8);
  return v100;
}

void sub_1C4A75850(_Unwind_Exception *a1)
{
  uint64_t v7 = *(void **)(v5 - 352);
  _Block_object_dispose((const void *)(v5 - 256), 8);

  _Unwind_Resume(a1);
}

__n128 sub_1C4A758F4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

uint64_t sub_1C4A75904(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3 >= 2 && a2 < a2 + a3)
  {
    uint64_t v6 = 32 * a2;
    unint64_t v7 = a3;
    do
    {
      *(CGRect *)(*(void *)(*(void *)(a1 + 40) + 8) + 48) = CGRectUnion(*(CGRect *)(*(void *)(*(void *)(a1 + 40) + 8)+ 48), *(CGRect *)(*(void *)(a1 + 48) + v6));
      v6 += 32;
      --v7;
    }
    while (v7);
  }
  double MinX = CGRectGetMinX(*(CGRect *)(*(void *)(*(void *)(a1 + 40) + 8) + 48));
  double v9 = *(double *)(a1 + 56);
  double MaxX = CGRectGetMaxX(*(CGRect *)(*(void *)(*(void *)(a1 + 40) + 8) + 48));
  double v11 = *(double *)(a1 + 56);
  long long v15 = objc_msgSend_substringWithRange_(*(void **)(a1 + 32), v12, a2, a3, v13, v14);
  int isRightToLeftScriptForCharacter = objc_msgSend_isRightToLeftScriptForCharacter_(CHTextInputScriptSpec, v16, (uint64_t)v15, v17, v18, v19);

  CGFloat v26 = objc_msgSend_decimalDigitCharacterSet(MEMORY[0x1E4F28B88], v21, v22, v23, v24, v25);
  uint64_t v31 = objc_msgSend_characterAtIndex_(*(void **)(a1 + 32), v27, a2, v28, v29, v30);
  int IsMember = objc_msgSend_characterIsMember_(v26, v32, v31, v33, v34, v35);
  double v37 = vabdd_f64(MinX, v9);
  double v38 = vabdd_f64(MaxX, v11);

  unsigned int v39 = IsMember | isRightToLeftScriptForCharacter ^ 1;
  if ((v39 & 1) == 0 && v37 <= v38) {
    return 1;
  }
  if (v38 <= v37) {
    return v39;
  }
  return 0;
}

void sub_1C4A75A70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A75A80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A76278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A76C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}