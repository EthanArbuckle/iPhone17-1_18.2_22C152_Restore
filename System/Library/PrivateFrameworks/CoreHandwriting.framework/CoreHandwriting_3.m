float CHRSketchRecognitionResult::Hscore(CHRSketchRecognitionResult *this, float a2)
{
  float result;

  result = fabsf(a2);
  if (result >= 90.0) {
    return 180.0 - result;
  }
  return result;
}

float CHRSketchRecognitionResult::Vscore(CHRSketchRecognitionResult *this, float a2)
{
  float v2 = a2 + -90.0;
  if (a2 < 90.0) {
    float v2 = 90.0 - a2;
  }
  if (a2 < 0.0) {
    float v2 = a2 + 90.0;
  }
  if (a2 < -90.0) {
    return -90.0 - a2;
  }
  else {
    return v2;
  }
}

BOOL CHRSketchRecognitionResult::isConsideredEqual(CHRSketchRecognitionResult *this, float a2, float a3, float a4)
{
  float v4 = fminf(a2, a3) / (fmaxf(a2, a3) + 0.1);
  return (float)(1.0 - a4) < v4;
}

double CHTriangle::Halign(CHTriangle *this, int a2)
{
  switch(a2)
  {
    case 3:
      double result = (*((double *)this + 5) + *((double *)this + 7)) * 0.5;
      *((double *)this + 7) = result;
      *((double *)this + 5) = result;
      break;
    case 2:
      double result = (*((double *)this + 3) + *((double *)this + 7)) * 0.5;
      *((double *)this + 7) = result;
      *((double *)this + 3) = result;
      break;
    case 1:
      double result = (*((double *)this + 3) + *((double *)this + 5)) * 0.5;
      *((double *)this + 5) = result;
      *((double *)this + 3) = result;
      break;
  }
  return result;
}

double CHTriangle::Valign(CHTriangle *this, int a2)
{
  switch(a2)
  {
    case 3:
      double result = (*((double *)this + 4) + *((double *)this + 6)) * 0.5;
      *((double *)this + 6) = result;
      *((double *)this + 4) = result;
      break;
    case 2:
      double result = (*((double *)this + 2) + *((double *)this + 6)) * 0.5;
      *((double *)this + 6) = result;
      *((double *)this + 2) = result;
      break;
    case 1:
      double result = (*((double *)this + 2) + *((double *)this + 4)) * 0.5;
      *((double *)this + 4) = result;
      *((double *)this + 2) = result;
      break;
  }
  return result;
}

void CHTriangle::alignToAxis(CHTriangle *this)
{
  float v2 = (char *)this + 80;
  double v3 = *((double *)this + 10);
  float v4 = (float64x2_t *)((char *)this + 96);
  double v5 = *((double *)this + 12);
  long long v6 = *((_OWORD *)this + 6);
  *((_OWORD *)this + 1) = *((_OWORD *)this + 5);
  *((_OWORD *)this + 2) = v6;
  v7 = (float64x2_t *)((char *)this + 112);
  double v8 = *((double *)this + 14);
  *((_OWORD *)this + 3) = *((_OWORD *)this + 7);
  float v9 = v5 - v3;
  *(void *)&long long v6 = *((void *)this + 13);
  double v10 = *((double *)this + 11);
  float v11 = *(double *)&v6 - v10;
  float v12 = v8 - v3;
  double v13 = *((double *)this + 15);
  float v14 = v13 - v10;
  float v15 = v8 - v5;
  *(float *)&double v5 = v13 - *(double *)&v6;
  float v46 = *(float *)&v5;
  float v16 = sqrtf((float)(v11 * v11) + (float)(v9 * v9));
  float v49 = sqrtf((float)(v14 * v14) + (float)(v12 * v12));
  *((float *)this + 49) = v16;
  *((float *)this + 50) = v49;
  *((float *)this + 37) = v16;
  *((float *)this + 38) = v49;
  float v50 = sqrtf((float)(*(float *)&v5 * *(float *)&v5) + (float)(v15 * v15));
  *((float *)this + 51) = v50;
  *((float *)this + 39) = v50;
  float v53 = atan2f(v11, v9);
  float32x2_t v48 = (float32x2_t)vdup_n_s32(0x43340000u);
  float64x2_t v47 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
  float32x2_t v17 = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(vmul_f32((float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(atan2f(v14, v12)), LODWORD(v53)), v48)), v47));
  float v51 = v17.f32[0];
  *((_DWORD *)v2 + 26) = v17.i32[0];
  float32_t v52 = v17.f32[1];
  *((_DWORD *)v2 + 28) = v17.i32[1];
  *(float32x2_t *)(v2 + 52) = v17;
  float v18 = (float)(atan2f(v46, v15) * 180.0) / 3.14159265;
  *((float *)v2 + 27) = v18;
  float v54 = v18;
  *((float *)v2 + 15) = v18;
  float v19 = acosf((float)((float)(v11 * v14) + (float)(v9 * v12)) / (float)(v16 * v49));
  *((float32x2_t *)v2 + 10) = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(vmul_f32((float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(acosf((float)((float)-(float)(v11 * v46) - (float)(v9 * v15))/ (float)(v16 * v50))), LODWORD(v19)), v48)), v47));
  double v21 = (float)(acosf((float)((float)(v46 * v14) + (float)(v15 * v12)) / (float)(v50 * v49)) * 180.0) / 3.14159265;
  *(float *)&double v21 = v21;
  *((_DWORD *)v2 + 22) = LODWORD(v21);
  float v20 = *((float *)v2 - 4);
  *(float *)&double v21 = fabsf(v51);
  if (*(float *)&v21 >= 90.0) {
    *(float *)&double v21 = 180.0 - *(float *)&v21;
  }
  if (*(float *)&v21 < v20) {
    int v22 = 1;
  }
  else {
    int v22 = -1;
  }
  if (*(float *)&v21 >= v20) {
    LODWORD(v21) = *((_DWORD *)v2 - 4);
  }
  if (v51 < -90.0)
  {
    float v23 = -90.0 - v51;
    float v25 = v52;
    float v24 = v54;
    goto LABEL_15;
  }
  float v25 = v52;
  float v24 = v54;
  float v26 = 90.0;
  if (v51 >= 0.0)
  {
    if (v51 < 90.0)
    {
      float v23 = 90.0 - v51;
      goto LABEL_15;
    }
    float v26 = -90.0;
  }
  float v23 = v51 + v26;
LABEL_15:
  if (v23 < v20) {
    int v27 = 1;
  }
  else {
    int v27 = -1;
  }
  if (v23 < v20) {
    float v20 = v23;
  }
  float v28 = fabsf(v25);
  if (v28 >= 90.0) {
    float v28 = 180.0 - v28;
  }
  if (v28 < *(float *)&v21)
  {
    int v22 = 2;
    *(float *)&double v21 = v28;
  }
  float v29 = -90.0;
  if (v25 < -90.0) {
    goto LABEL_27;
  }
  float v29 = 90.0;
  if (v25 >= 0.0)
  {
    if (v25 < 90.0)
    {
LABEL_27:
      float v30 = v29 - v25;
      goto LABEL_30;
    }
    float v29 = -90.0;
  }
  float v30 = v25 + v29;
LABEL_30:
  if (v30 < v20)
  {
    int v27 = 2;
    float v20 = v30;
  }
  float v31 = fabsf(v24);
  if (v31 >= 90.0) {
    float v31 = 180.0 - v31;
  }
  if (v31 >= *(float *)&v21) {
    int v32 = v22;
  }
  else {
    int v32 = 3;
  }
  float v33 = -90.0;
  if (v24 >= -90.0)
  {
    float v33 = 90.0;
    if (v24 >= 0.0)
    {
      if (v24 < 90.0) {
        goto LABEL_40;
      }
      float v33 = -90.0;
    }
    *(float *)&double v21 = v24 + v33;
    if ((float)(v24 + v33) >= v20) {
      int v34 = v27;
    }
    else {
      int v34 = 3;
    }
    if (v32 != -1) {
      goto LABEL_51;
    }
LABEL_50:
    if (v34 == -1) {
      return;
    }
    goto LABEL_51;
  }
LABEL_40:
  *(float *)&double v21 = v33 - v24;
  if ((float)(v33 - v24) >= v20) {
    int v34 = v27;
  }
  else {
    int v34 = 3;
  }
  if (v32 == -1) {
    goto LABEL_50;
  }
LABEL_51:
  v35 = (float64x2_t *)(v2 - 64);
  v36 = (float64x2_t *)(v2 - 48);
  v37 = (float64x2_t *)(v2 - 32);
  if (v32 < 1)
  {
    CHTriangle::fitYAxisAlignedTriangle(this, v34, v21);
  }
  else if (v34 < 1)
  {
    CHTriangle::fitXAxisAlignedTriangle(this, v32, v21);
  }
  else
  {
    CHTriangle::fitAxisAlignedRightTriangle(this, v32, v34, v21);
  }
  float64x2_t v38 = *v36;
  float64x2_t v39 = *v37;
  __asm { FMOV            V4.2D, #3.0 }
  float64x2_t v45 = vcvtq_f64_f32(vcvt_f32_f64(vdivq_f64(vsubq_f64(vsubq_f64(vsubq_f64(vaddq_f64(vaddq_f64(*(float64x2_t *)v2, *v4), *v7), *v35), *v36), *v37), _Q4)));
  *(float64x2_t *)float v2 = vaddq_f64(*v35, v45);
  *float v4 = vaddq_f64(v38, v45);
  float64x2_t *v7 = vaddq_f64(v39, v45);
}

double CHTriangle::fitAxisAlignedRightTriangle(CHTriangle *this, int a2, int a3, double result)
{
  if (a3 == 3)
  {
    double result = (*((double *)this + 4) + *((double *)this + 6)) * 0.5;
    *((double *)this + 6) = result;
    *((double *)this + 4) = result;
    goto LABEL_7;
  }
  if (a3 == 2)
  {
    double result = (*((double *)this + 2) + *((double *)this + 6)) * 0.5;
    *((double *)this + 6) = result;
    *((double *)this + 2) = result;
    if (a2 != 3) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  if (a3 != 1)
  {
LABEL_7:
    if (a2 != 3) {
      goto LABEL_8;
    }
LABEL_12:
    double result = (*((double *)this + 5) + *((double *)this + 7)) * 0.5;
    *((double *)this + 7) = result;
    *((double *)this + 5) = result;
    goto LABEL_15;
  }
  double result = (*((double *)this + 2) + *((double *)this + 4)) * 0.5;
  *((double *)this + 4) = result;
  *((double *)this + 2) = result;
  if (a2 == 3) {
    goto LABEL_12;
  }
LABEL_8:
  if (a2 == 2)
  {
    double result = (*((double *)this + 3) + *((double *)this + 7)) * 0.5;
    *((double *)this + 7) = result;
  }
  else
  {
    if (a2 != 1) {
      goto LABEL_15;
    }
    double result = (*((double *)this + 3) + *((double *)this + 5)) * 0.5;
    *((double *)this + 5) = result;
  }
  *((double *)this + 3) = result;
LABEL_15:
  LODWORD(result) = *((_DWORD *)this + a2 + 36);
  float v4 = *((float *)this + a3 + 36);
  float v5 = fminf(*(float *)&result, v4) / (fmaxf(*(float *)&result, v4) + 0.1);
  if ((float)(1.0 - *((float *)this + 18)) < v5)
  {
    long long v6 = (char *)this + 16;
    v7 = (double *)((char *)this + 16 * a2 + 16 * a3 - 32);
    double v8 = (float)((float)(*(float *)&result + v4) * 0.5);
    double v9 = v7[1];
    if (*((double *)this + 2 * (3 - a3) + 2) <= *v7) {
      double v10 = -v8;
    }
    else {
      double v10 = v8;
    }
    *(double *)&v6[16 * (3 - a3)] = *v7 + v10;
    float v11 = &v6[16 * (3 - a2)];
    if (*((double *)v11 + 1) <= v9) {
      double v8 = -v8;
    }
    double result = v9 + v8;
    *((double *)v11 + 1) = result;
  }
  return result;
}

double CHTriangle::fitXAxisAlignedTriangle(CHTriangle *this, int a2, double result)
{
  if (a2 == 3)
  {
    double result = (*((double *)this + 5) + *((double *)this + 7)) * 0.5;
    *((double *)this + 7) = result;
    *((double *)this + 5) = result;
  }
  else
  {
    if (a2 == 2)
    {
      double result = (*((double *)this + 3) + *((double *)this + 7)) * 0.5;
      *((double *)this + 7) = result;
    }
    else
    {
      if (a2 != 1) {
        goto LABEL_8;
      }
      double result = (*((double *)this + 3) + *((double *)this + 5)) * 0.5;
      *((double *)this + 5) = result;
    }
    *((double *)this + 3) = result;
  }
LABEL_8:
  if (a2 == 1) {
    uint64_t v3 = 2;
  }
  else {
    uint64_t v3 = a2 == 2;
  }
  uint64_t v4 = a2 % 3 + 1;
  uint64_t v5 = (a2 + 1) % 3 + 1;
  float v6 = *((float *)this + v4 + 32);
  float v7 = fabsf(v6 + 90.0);
  float v8 = fabsf(v6 + -90.0);
  if (v6 >= 0.0) {
    float v9 = v8;
  }
  else {
    float v9 = v7;
  }
  float v10 = *((float *)this + v5 + 32);
  float v11 = fabsf(v10 + 90.0);
  float v12 = fabsf(v10 + -90.0);
  if (v10 >= 0.0) {
    float v11 = v12;
  }
  *(float *)&double result = vabds_f32(v9, v11);
  if (*(float *)&result < *((float *)this + 17))
  {
    float v13 = *((float *)this + v4 + 36);
    float v14 = *((float *)this + v5 + 36);
    double result = 0.1;
    float v15 = fminf(v13, v14) / (fmaxf(v13, v14) + 0.1);
    if ((float)(1.0 - *((float *)this + 18)) < v15)
    {
      float v16 = (float)(v13 + v14) * 0.5;
      if (v3 == 2) {
        unsigned int v17 = 0;
      }
      else {
        unsigned int v17 = v3 + 1;
      }
      float v18 = (double *)((char *)this + 16 * v17 + 16);
      unsigned int v19 = v3 - 1;
      if (!v3) {
        unsigned int v19 = 2;
      }
      double v20 = v18[1];
      *((double *)this + 2 * v3 + 2) = (*v18 + *((double *)this + 2 * v19 + 2)) * 0.5;
      float v21 = v20;
      float v22 = *((float *)this + a2 + 36);
      float v23 = fminf(v16, v22) / (fmaxf(v16, v22) + 0.1);
      if ((float)(1.0 - *((float *)this + 19)) >= v23) {
        float v24 = sqrtf((float)((float)(v22 * v22) * -0.25) + (float)(v16 * v16));
      }
      else {
        float v24 = v22 * 0.866;
      }
      float v25 = (double *)((char *)this + 16 * v3);
      if (v25[3] <= v21) {
        float v24 = -v24;
      }
      double result = (float)(v24 + v21);
      v25[3] = result;
    }
  }
  return result;
}

double CHTriangle::fitYAxisAlignedTriangle(CHTriangle *this, int a2, double result)
{
  if (a2 == 3)
  {
    double result = (*((double *)this + 4) + *((double *)this + 6)) * 0.5;
    *((double *)this + 6) = result;
    *((double *)this + 4) = result;
  }
  else
  {
    if (a2 == 2)
    {
      double result = (*((double *)this + 2) + *((double *)this + 6)) * 0.5;
      *((double *)this + 6) = result;
    }
    else
    {
      if (a2 != 1) {
        goto LABEL_8;
      }
      double result = (*((double *)this + 2) + *((double *)this + 4)) * 0.5;
      *((double *)this + 4) = result;
    }
    *((double *)this + 2) = result;
  }
LABEL_8:
  unsigned int v3 = a2 == 2;
  if (a2 == 1) {
    unsigned int v3 = 2;
  }
  uint64_t v4 = a2 % 3 + 1;
  uint64_t v5 = (a2 + 1) % 3 + 1;
  float v6 = fabsf(*((float *)this + v4 + 32));
  if (v6 > 90.0) {
    float v6 = 180.0 - v6;
  }
  float v7 = fabsf(*((float *)this + v5 + 32));
  float v8 = 180.0 - v7;
  if (v7 <= 90.0) {
    float v8 = v7;
  }
  *(float *)&double result = vabds_f32(v6, v8);
  if (*(float *)&result < *((float *)this + 17))
  {
    float v9 = *((float *)this + v4 + 36);
    float v10 = *((float *)this + v5 + 36);
    double result = 0.1;
    float v11 = fminf(v9, v10) / (fmaxf(v9, v10) + 0.1);
    if ((float)(1.0 - *((float *)this + 18)) < v11)
    {
      float v12 = (float)(v9 + v10) * 0.5;
      if (v3 == 2) {
        unsigned int v13 = 0;
      }
      else {
        unsigned int v13 = v3 + 1;
      }
      float v14 = (char *)this + 16;
      float v15 = (double *)((char *)this + 16 * v13 + 16);
      unsigned int v16 = v3 - 1;
      if (!v3) {
        unsigned int v16 = 2;
      }
      double v17 = *v15;
      float v18 = (double *)&v14[16 * v3];
      v18[1] = (v15[1] + *(double *)&v14[16 * v16 + 8]) * 0.5;
      float v19 = v17;
      float v20 = *((float *)this + a2 + 36);
      float v21 = fminf(v12, v20) / (fmaxf(v12, v20) + 0.1);
      if ((float)(1.0 - *((float *)this + 19)) >= v21) {
        float v22 = sqrtf((float)((float)(v20 * v20) * -0.25) + (float)(v12 * v12));
      }
      else {
        float v22 = v20 * 0.866;
      }
      if (*v18 <= v19) {
        float v22 = -v22;
      }
      double result = (float)(v22 + v19);
      *float v18 = result;
    }
  }
  return result;
}

BOOL CHTriangle::areHorizontalIsoscelesSides(CHTriangle *this, int a2, int a3)
{
  float v3 = *((float *)this + a2 + 32);
  float v4 = fabsf(v3 + 90.0);
  float v5 = fabsf(v3 + -90.0);
  if (v3 >= 0.0) {
    float v6 = v5;
  }
  else {
    float v6 = v4;
  }
  float v7 = *((float *)this + a3 + 32);
  float v8 = fabsf(v7 + 90.0);
  float v9 = fabsf(v7 + -90.0);
  if (v7 >= 0.0) {
    float v8 = v9;
  }
  if (vabds_f32(v6, v8) >= *((float *)this + 17)) {
    return 0;
  }
  float v10 = *((float *)this + a2 + 36);
  float v11 = *((float *)this + a3 + 36);
  float v12 = fminf(v10, v11) / (fmaxf(v10, v11) + 0.1);
  return (float)(1.0 - *((float *)this + 18)) < v12;
}

BOOL CHTriangle::areVerticalIsoscelesSides(CHTriangle *this, int a2, int a3)
{
  float v3 = fabsf(*((float *)this + a2 + 32));
  if (v3 > 90.0) {
    float v3 = 180.0 - v3;
  }
  float v4 = fabsf(*((float *)this + a3 + 32));
  float v5 = 180.0 - v4;
  if (v4 <= 90.0) {
    float v5 = v4;
  }
  if (vabds_f32(v3, v5) >= *((float *)this + 17)) {
    return 0;
  }
  float v6 = *((float *)this + a2 + 36);
  float v7 = *((float *)this + a3 + 36);
  float v8 = fminf(v6, v7) / (fmaxf(v6, v7) + 0.1);
  return (float)(1.0 - *((float *)this + 18)) < v8;
}

void CHStraightLine::alignToAxis(CHStraightLine *this, float a2, float a3)
{
  double v5 = *((double *)this + 2);
  double v6 = *((double *)this + 3);
  double v7 = *((double *)this + 5);
  double v8 = *((double *)this + 6);
  float v9 = v6 - v8;
  float v10 = v5 - v7;
  float v11 = (float)(atan2f(v9, v10) * 180.0) / 3.14159265;
  float v12 = fabsf(v11);
  float v13 = 180.0 - v12;
  if (v12 < 90.0) {
    float v13 = v12;
  }
  if (v13 < a2)
  {
    double v14 = (v6 + v8) * 0.5;
    *((double *)this + 6) = v14;
    *((double *)this + 3) = v14;
    return;
  }
  float v15 = v11 + -90.0;
  if (v11 < 90.0) {
    float v15 = 90.0 - v11;
  }
  if (v11 < 0.0) {
    float v15 = v11 + 90.0;
  }
  if (v11 < -90.0) {
    float v16 = -90.0 - v11;
  }
  else {
    float v16 = v15;
  }
  if (v16 < a2)
  {
    double v17 = (v5 + v7) * 0.5;
    *((double *)this + 5) = v17;
    *((double *)this + 2) = v17;
    return;
  }
  if (v11 < 0.0) {
    float v11 = v11 + 360.0;
  }
  double v18 = fmod(v11, 45.0);
  if (v18 < a2 || 45.0 - v18 < a2)
  {
    double v20 = vabdd_f64(v7, v5);
    double v21 = vabdd_f64(v8, v6);
    double v22 = vabdd_f64(v20, v21);
    if ((v6 >= v8 || v21 <= v20) && (v6 <= v8 || v21 >= v20))
    {
      *((double *)this + 3) = v6 - v22 * 0.25;
      *((double *)this + 6) = v8 + v22 * 0.25;
      if (v5 >= v7)
      {
LABEL_29:
        if (v5 <= v7 || v21 >= v20)
        {
          double v25 = v22 * 0.25;
          *((double *)this + 2) = v5 + v25;
          double v24 = v7 - v25;
          goto LABEL_33;
        }
LABEL_31:
        double v23 = v22 * 0.25;
        *((double *)this + 2) = v5 - v23;
        double v24 = v7 + v23;
LABEL_33:
        *((double *)this + 5) = v24;
        return;
      }
    }
    else
    {
      *((double *)this + 3) = v6 + v22 * 0.25;
      *((double *)this + 6) = v8 - v22 * 0.25;
      if (v5 >= v7) {
        goto LABEL_29;
      }
    }
    if (v21 > v20) {
      goto LABEL_31;
    }
    goto LABEL_29;
  }
}

void CHBezierLine::alignToAxis(CHBezierLine *this, float a2, float a3)
{
  double v7 = *((double *)this + 2);
  double v6 = *((double *)this + 3);
  double v9 = *((double *)this + 5);
  double v8 = *((double *)this + 6);
  float v10 = v6 - v8;
  float v11 = v7 - v9;
  float v12 = (float)(atan2f(v10, v11) * 180.0) / 3.14159265;
  float v13 = fabsf(v12);
  float v14 = 180.0 - v13;
  if (v13 < 90.0) {
    float v14 = v13;
  }
  if (v14 >= a2)
  {
    float v15 = v12 + -90.0;
    if (v12 < 90.0) {
      float v15 = 90.0 - v12;
    }
    if (v12 < 0.0) {
      float v15 = v12 + 90.0;
    }
    if (v12 < -90.0) {
      float v16 = -90.0 - v12;
    }
    else {
      float v16 = v15;
    }
    if (v16 < a2)
    {
      double v9 = (v7 + v9) * 0.5;
      *((double *)this + 5) = v9;
      *((double *)this + 2) = v9;
      double v7 = v9;
    }
  }
  else
  {
    double v8 = (v6 + v8) * 0.5;
    *((double *)this + 6) = v8;
    *((double *)this + 3) = v8;
    double v6 = v8;
  }
  double v18 = *((double *)this + 8);
  double v17 = *((double *)this + 9);
  float v19 = v9 - v7;
  float v20 = v8 - v6;
  float v21 = (float)(v20 * v20) + (float)(v19 * v19);
  if (v21 > 0.0)
  {
    float v19 = v19 / v21;
    float v20 = v20 / v21;
  }
  double v22 = v18 - v7;
  double v23 = v17 - v6;
  float v24 = (v17 - v6) * v20 + (v18 - v7) * v19;
  if (v24 > 0.0 && v24 < 1.0)
  {
    float v26 = v9 - v18;
    float v27 = v8 - v17;
    float v28 = sqrtf((float)(v27 * v27) + (float)(v26 * v26));
    float v29 = v7 - v18;
    float v30 = v6 - v17;
    float v31 = sqrtf((float)(v30 * v30) + (float)(v29 * v29));
    float v32 = fminf(v31, v28) / (fmaxf(v31, v28) + 0.1);
    if ((float)(1.0 - a3) < v32)
    {
      float v33 = v22 * v20 - v23 * v19;
      double v34 = v7 + (float)(v21 * (float)(v19 * 0.5)) + (float)(v21 * (float)(v20 * v33));
      double v35 = v6 + (float)(v21 * (float)(v20 * 0.5)) - (float)(v21 * (float)(v19 * v33));
      *((double *)this + 8) = v34;
      *((double *)this + 9) = v35;
      *((double *)this + 10) = v9 * 0.25 + v7 * 0.25 + v34 * 0.5;
      *((double *)this + 11) = v8 * 0.25 + v6 * 0.25 + v35 * 0.5;
    }
  }
}

BOOL CHEllipse::isCovering(CHEllipse *this, CGPoint a2)
{
  float v3 = *((double *)this + 2) - a2.x;
  float v4 = *((double *)this + 3) - a2.y;
  float v5 = (*((double *)this + 6) + *((double *)this + 6)) * 3.14159265 / 360.0;
  __float2 v6 = __sincosf_stret(v5);
  float v7 = (float)((float)(v6.__sinval * v4) + (float)(v6.__cosval * v3)) / (*((double *)this + 4) * 0.5);
  float v8 = (float)((float)(v6.__sinval * v3) - (float)(v6.__cosval * v4)) / (*((double *)this + 5) * 0.5);
  return (float)((float)(v8 * v8) + (float)(v7 * v7)) <= 1.0;
}

void sub_1C4B3D4D8(char *a1@<X8>)
{
  a1[23] = 14;
  strcpy(a1, "CHStraightLine");
}

void sub_1C4B3D500(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "CHBezierLine");
}

void sub_1C4B3D59C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v8[13] = *MEMORY[0x1E4F143B8];
  v8[0] = @"StrokeBounds";
  v8[1] = @"SubstrokeBounds";
  v8[2] = @"StrokePoints";
  v8[3] = @"GroupBounds";
  v8[4] = @"Grouping";
  v8[5] = @"GroupClassification";
  v8[6] = @"GroupBaselineLegacy";
  v8[7] = @"GroupBaseline";
  v8[8] = @"PrincipalLines";
  v8[9] = @"NormalizedDrawing";
  v8[10] = @"NormalizedDrawingAll";
  v8[11] = @"RenderedResult";
  v8[12] = @"RenderedResultAll";
  uint64_t v6 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], a2, (uint64_t)v8, 13, a5, a6);
  float v7 = (void *)qword_1EA3C93D8;
  qword_1EA3C93D8 = v6;
}

void sub_1C4B3D730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3D740(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v123[13] = *MEMORY[0x1E4F143B8];
  v122[0] = @"StrokeBounds";
  v121 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], a2, a3, a4, a5, a6);
  v120 = objc_msgSend_localizedStringForKey_value_table_(v121, v6, @"Stroke Bounds", (uint64_t)&stru_1F20141C8, 0, v7);
  v123[0] = v120;
  v122[1] = @"SubstrokeBounds";
  v119 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], v8, v9, v10, v11, v12);
  v118 = objc_msgSend_localizedStringForKey_value_table_(v119, v13, @"Substroke Bounds", (uint64_t)&stru_1F20141C8, 0, v14);
  v123[1] = v118;
  v122[2] = @"StrokePoints";
  v117 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], v15, v16, v17, v18, v19);
  v116 = objc_msgSend_localizedStringForKey_value_table_(v117, v20, @"Stroke Points", (uint64_t)&stru_1F20141C8, 0, v21);
  v123[2] = v116;
  v122[3] = @"GroupBounds";
  v115 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], v22, v23, v24, v25, v26);
  v114 = objc_msgSend_localizedStringForKey_value_table_(v115, v27, @"Stroke Group Bounds", (uint64_t)&stru_1F20141C8, 0, v28);
  v123[3] = v114;
  v122[4] = @"Grouping";
  v113 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], v29, v30, v31, v32, v33);
  v112 = objc_msgSend_localizedStringForKey_value_table_(v113, v34, @"Stroke Groups by Color", (uint64_t)&stru_1F20141C8, 0, v35);
  v123[4] = v112;
  v122[5] = @"GroupClassification";
  v111 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], v36, v37, v38, v39, v40);
  v110 = objc_msgSend_localizedStringForKey_value_table_(v111, v41, @"Stroke Groups Classification", (uint64_t)&stru_1F20141C8, 0, v42);
  v123[5] = v110;
  v122[6] = @"GroupBaselineLegacy";
  v109 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], v43, v44, v45, v46, v47);
  v108 = objc_msgSend_localizedStringForKey_value_table_(v109, v48, @"Stroke Groups Baseline (Legacy)", (uint64_t)&stru_1F20141C8, 0, v49);
  v123[6] = v108;
  v122[7] = @"GroupBaseline";
  v107 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], v50, v51, v52, v53, v54);
  v106 = objc_msgSend_localizedStringForKey_value_table_(v107, v55, @"Stroke Groups Baseline", (uint64_t)&stru_1F20141C8, 0, v56);
  v123[7] = v106;
  v122[8] = @"PrincipalLines";
  v62 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], v57, v58, v59, v60, v61);
  v65 = objc_msgSend_localizedStringForKey_value_table_(v62, v63, @"Tokens Principal Lines", (uint64_t)&stru_1F20141C8, 0, v64);
  v123[8] = v65;
  v122[9] = @"NormalizedDrawing";
  v71 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], v66, v67, v68, v69, v70);
  v74 = objc_msgSend_localizedStringForKey_value_table_(v71, v72, @"Normalized Drawing (Selective)", (uint64_t)&stru_1F20141C8, 0, v73);
  v123[9] = v74;
  v122[10] = @"NormalizedDrawingAll";
  v80 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], v75, v76, v77, v78, v79);
  v83 = objc_msgSend_localizedStringForKey_value_table_(v80, v81, @"Normalized Drawing (All)", (uint64_t)&stru_1F20141C8, 0, v82);
  v123[10] = v83;
  v122[11] = @"RenderedResult";
  v89 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], v84, v85, v86, v87, v88);
  v92 = objc_msgSend_localizedStringForKey_value_table_(v89, v90, @"Rendered Result (Selective)", (uint64_t)&stru_1F20141C8, 0, v91);
  v123[11] = v92;
  v122[12] = @"RenderedResultAll";
  v98 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], v93, v94, v95, v96, v97);
  v101 = objc_msgSend_localizedStringForKey_value_table_(v98, v99, @"Rendered Result (All)", (uint64_t)&stru_1F20141C8, 0, v100);
  v123[12] = v101;
  uint64_t v104 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v102, (uint64_t)v123, (uint64_t)v122, 13, v103);
  v105 = (void *)qword_1EA3C93E8;
  qword_1EA3C93E8 = v104;
}

void sub_1C4B3DBCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3DD50()
{
  v5[13] = *MEMORY[0x1E4F143B8];
  v4[0] = @"StrokeBounds";
  v5[0] = objc_opt_class();
  v4[1] = @"SubstrokeBounds";
  v5[1] = objc_opt_class();
  v4[2] = @"StrokePoints";
  v5[2] = objc_opt_class();
  v4[3] = @"GroupBounds";
  v5[3] = objc_opt_class();
  v4[4] = @"Grouping";
  v5[4] = objc_opt_class();
  v4[5] = @"GroupClassification";
  v5[5] = objc_opt_class();
  v4[6] = @"GroupBaselineLegacy";
  v5[6] = objc_opt_class();
  v4[7] = @"GroupBaseline";
  v5[7] = objc_opt_class();
  v4[8] = @"PrincipalLines";
  v5[8] = objc_opt_class();
  v4[9] = @"NormalizedDrawing";
  v5[9] = objc_opt_class();
  v4[10] = @"NormalizedDrawingAll";
  v5[10] = objc_opt_class();
  v4[11] = @"RenderedResult";
  v5[11] = objc_opt_class();
  v4[12] = @"RenderedResultAll";
  v5[12] = objc_opt_class();
  uint64_t v2 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v0, (uint64_t)v5, (uint64_t)v4, 13, v1);
  float v3 = (void *)qword_1EA3C93F8;
  qword_1EA3C93F8 = v2;
}

void sub_1C4B3E0A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3E0B4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v96[10] = *MEMORY[0x1E4F143B8];
  v95[0] = @"CHStatusKeyStatus";
  uint64_t v94 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], a2, a3, a4, a5, a6);
  v93 = objc_msgSend_localizedStringForKey_value_table_(v94, v6, @"Status", (uint64_t)&stru_1F20141C8, 0, v7);
  v96[0] = v93;
  v95[1] = @"CHStatusKeyEnvironment";
  v92 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], v8, v9, v10, v11, v12);
  uint64_t v91 = objc_msgSend_localizedStringForKey_value_table_(v92, v13, @"Environment", (uint64_t)&stru_1F20141C8, 0, v14);
  v96[1] = v91;
  v95[2] = @"CHStatusKeyLocales";
  v90 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], v15, v16, v17, v18, v19);
  v89 = objc_msgSend_localizedStringForKey_value_table_(v90, v20, @"Locales", (uint64_t)&stru_1F20141C8, 0, v21);
  v96[2] = v89;
  v95[3] = @"CHStatusKeyLastDurationTotal";
  uint64_t v88 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], v22, v23, v24, v25, v26);
  uint64_t v87 = objc_msgSend_localizedStringForKey_value_table_(v88, v27, @"Total Duration", (uint64_t)&stru_1F20141C8, 0, v28);
  v96[3] = v87;
  v95[4] = @"CHStatusKeyLastDurationDetailed";
  uint64_t v86 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], v29, v30, v31, v32, v33);
  uint64_t v85 = objc_msgSend_localizedStringForKey_value_table_(v86, v34, @"Detailed", (uint64_t)&stru_1F20141C8, 0, v35);
  v96[4] = v85;
  v95[5] = @"CHStatusStrokeCount";
  v41 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], v36, v37, v38, v39, v40);
  uint64_t v44 = objc_msgSend_localizedStringForKey_value_table_(v41, v42, @"Stroke Count", (uint64_t)&stru_1F20141C8, 0, v43);
  v96[5] = v44;
  v95[6] = @"CHStatusKeyGroupCount";
  float v50 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], v45, v46, v47, v48, v49);
  uint64_t v53 = objc_msgSend_localizedStringForKey_value_table_(v50, v51, @"Group Count", (uint64_t)&stru_1F20141C8, 0, v52);
  v96[6] = v53;
  v95[7] = @"CHStatusKeyTranscript";
  uint64_t v59 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], v54, v55, v56, v57, v58);
  v62 = objc_msgSend_localizedStringForKey_value_table_(v59, v60, @"Transcript", (uint64_t)&stru_1F20141C8, 0, v61);
  v96[7] = v62;
  v95[8] = @"CHStatusKeyAllResults";
  uint64_t v68 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], v63, v64, v65, v66, v67);
  v71 = objc_msgSend_localizedStringForKey_value_table_(v68, v69, @"Text Results", (uint64_t)&stru_1F20141C8, 0, v70);
  v96[8] = v71;
  v95[9] = @"CHStatusKeyAllMathResults";
  uint64_t v77 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], v72, v73, v74, v75, v76);
  v80 = objc_msgSend_localizedStringForKey_value_table_(v77, v78, @"Math Results", (uint64_t)&stru_1F20141C8, 0, v79);
  v96[9] = v80;
  uint64_t v83 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v81, (uint64_t)v96, (uint64_t)v95, 10, v82);
  v84 = (void *)qword_1EA3C9408;
  qword_1EA3C9408 = v83;
}

void sub_1C4B3E450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3E5F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3E608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3E918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3EA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CHVisualizationManager;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C4B3EF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3F044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3F06C(uint64_t a1)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v2 = *(id *)(a1 + 40);
    if (objc_msgSend_count(v2, v3, v4, v5, v6, v7))
    {
    }
    else
    {
      int v18 = objc_msgSend_statusReportingEnabled((void *)a1, v8, v9, v10, v11, v12);

      if (!v18)
      {
        if (!*(unsigned char *)(a1 + 9))
        {
          char v19 = 0;
LABEL_11:
          *(unsigned char *)(a1 + 9) = v19;
          long long v60 = 0u;
          long long v61 = 0u;
          long long v62 = 0u;
          long long v63 = 0u;
          float v29 = objc_msgSend_allValues(*(void **)(a1 + 48), v13, v14, v15, v16, v17, 0);
          uint64_t v37 = objc_msgSend_countByEnumeratingWithState_objects_count_(v29, v30, (uint64_t)&v60, (uint64_t)v64, 16, v31);
          if (v37)
          {
            uint64_t v38 = *(void *)v61;
LABEL_13:
            uint64_t v39 = 0;
            while (1)
            {
              if (*(void *)v61 != v38) {
                objc_enumerationMutation(v29);
              }
              if (objc_msgSend_wantsInputDrawings(*(void **)(*((void *)&v60 + 1) + 8 * v39), v32, v33, v34, v35, v36))break; {
              if (v37 == ++v39)
              }
              {
                uint64_t v37 = objc_msgSend_countByEnumeratingWithState_objects_count_(v29, v32, (uint64_t)&v60, (uint64_t)v64, 16, v36);
                if (v37) {
                  goto LABEL_13;
                }
                goto LABEL_19;
              }
            }

            if (*(unsigned char *)(a1 + 10))
            {
              char v50 = 1;
              goto LABEL_26;
            }
            uint64_t v45 = objc_msgSend_recognitionSession((void *)a1, v51, v52, v53, v54, v55);
            objc_msgSend_registerInputDrawingClient_(v45, v56, a1, v57, v58, v59);
            char v50 = 1;
          }
          else
          {
LABEL_19:

            if (!*(unsigned char *)(a1 + 10))
            {
              char v50 = 0;
              goto LABEL_26;
            }
            uint64_t v45 = objc_msgSend_recognitionSession((void *)a1, v40, v41, v42, v43, v44);
            objc_msgSend_unregisterInputDrawingClient_(v45, v46, a1, v47, v48, v49);
            char v50 = 0;
          }

LABEL_26:
          *(unsigned char *)(a1 + 10) = v50;
          return;
        }
        float v20 = objc_msgSend_recognitionSession((void *)a1, v13, v14, v15, v16, v17);
        objc_msgSend_unregisterChangeObserver_(v20, v25, a1, v26, v27, v28);
        char v19 = 0;
LABEL_10:

        goto LABEL_11;
      }
    }
    if (*(unsigned char *)(a1 + 9))
    {
      char v19 = 1;
      goto LABEL_11;
    }
    float v20 = objc_msgSend_recognitionSession((void *)a1, v13, v14, v15, v16, v17);
    objc_msgSend_registerChangeObserver_(v20, v21, a1, v22, v23, v24);
    char v19 = 1;
    goto LABEL_10;
  }
}

void sub_1C4B3F264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3F274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3F958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3F974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3F98C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3F9A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3F9C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3F9DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3F9F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3FA10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3FA2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3FA44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3FA60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3FA78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3FA8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3FAA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3FAC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3FAD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3FAEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3FB3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3FB50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3FB68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3FB80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3FB94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3FC44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3FC5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3FC74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3FC88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3FC9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3FCD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4B3FCE4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_localeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  return v6;
}

id sub_1C4B3FD14(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = objc_msgSend_visualizationIndexForStrokeGroup_(*(void **)(a1 + 32), v4, (uint64_t)v3, v5, v6, v7);
  uint64_t v9 = NSString;
  uint64_t v15 = objc_msgSend_uniqueIdentifier(v3, v10, v11, v12, v13, v14);
  float v20 = objc_msgSend_stringWithFormat_(v9, v16, @"Group %ld (ID: %ld)", v17, v18, v19, v8 + 1, v15);

  return v20;
}

void sub_1C4B3FDA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3FDB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4B3FDC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = objc_msgSend_visualizationIndexForStrokeGroup_(*(void **)(a1 + 32), v4, (uint64_t)v3, v5, v6, v7);
  uint64_t v9 = NSString;
  uint64_t v15 = objc_msgSend_uniqueIdentifier(v3, v10, v11, v12, v13, v14);
  float v20 = objc_msgSend_stringWithFormat_(v9, v16, @"Group %ld (ID: %ld)", v17, v18, v19, v8 + 1, v15);

  return v20;
}

void sub_1C4B3FE54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3FE64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B40060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B400AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v10 = a3;
  uint64_t v11 = *(void *)(a1 + 32);
  if (v11) {
    objc_msgSend_objectForKeyedSubscript_(*(void **)(v11 + 48), v6, (uint64_t)v5, v7, v8, v9);
  }
  else {
  uint64_t v16 = objc_msgSend_objectForKeyedSubscript_(0, v6, (uint64_t)v5, v7, v8, v9);
  }
  uint64_t v17 = *(void *)(a1 + 32);
  if (v17) {
    objc_msgSend_objectForKeyedSubscript_(*(void **)(v17 + 48), v12, (uint64_t)v10, v13, v14, v15);
  }
  else {
  uint64_t v18 = objc_msgSend_objectForKeyedSubscript_(0, v12, (uint64_t)v10, v13, v14, v15);
  }
  uint64_t v24 = (void *)v18;
  uint64_t v25 = 0;
  if (v16 && v18)
  {
    uint64_t v26 = objc_msgSend_layeringPriority(v16, v19, v20, v21, v22, v23);
    if (v26 <= objc_msgSend_layeringPriority(v24, v27, v28, v29, v30, v31))
    {
      uint64_t v37 = objc_msgSend_layeringPriority(v16, v32, v33, v34, v35, v36);
      if (v37 >= objc_msgSend_layeringPriority(v24, v38, v39, v40, v41, v42)) {
        uint64_t v25 = 0;
      }
      else {
        uint64_t v25 = -1;
      }
    }
    else
    {
      uint64_t v25 = 1;
    }
  }

  return v25;
}

void sub_1C4B40198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B401B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B401C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B402EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B4035C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B403F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B40854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4B409B0(uint64_t a1, uint64_t a2, void *a3)
{
  id v17 = a3;
  uint64_t v14 = objc_msgSend_integerValue(v17, v4, v5, v6, v7, v8);
  uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v16 = *(void *)(v15 + 24);
  if (v14 > v16)
  {
    uint64_t v16 = objc_msgSend_integerValue(v17, v9, v10, v11, v12, v13);
    uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  *(void *)(v15 + 24) = v16;
}

void sub_1C4B40A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B40AD0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = objc_msgSend_lastRecognitionResult(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  uint64_t v13 = objc_msgSend_strokeGroupingResult(v7, v8, v9, v10, v11, v12);
  uint64_t v19 = objc_msgSend_strokeGroups(v13, v14, v15, v16, v17, v18);
  uint64_t v25 = objc_msgSend_count(v19, v20, v21, v22, v23, v24);

  if (!v25)
  {
    uint64_t v31 = *(void *)(a1 + 40);
    if (v31) {
      objc_msgSend_removeAllObjects(*(void **)(v31 + 56), v26, v27, v28, v29, v30);
    }
    else {
      objc_msgSend_removeAllObjects(0, v26, v27, v28, v29, v30);
    }
  }
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  uint64_t v32 = *(void *)(a1 + 40);
  if (v32) {
    objc_msgSend_allValues(*(void **)(v32 + 48), v26, v27, v28, v29, v30, (void)v66);
  }
  else {
  uint64_t v33 = objc_msgSend_allValues(0, v26, v27, v28, v29, v30, (void)v66);
  }
  uint64_t v41 = objc_msgSend_countByEnumeratingWithState_objects_count_(v33, v34, (uint64_t)&v66, (uint64_t)v70, 16, v35);
  if (v41)
  {
    uint64_t v42 = *(void *)v67;
    do
    {
      for (uint64_t i = 0; i != v41; ++i)
      {
        if (*(void *)v67 != v42) {
          objc_enumerationMutation(v33);
        }
        objc_msgSend_recognitionSessionDidUpdateRecognitionResult(*(void **)(*((void *)&v66 + 1) + 8 * i), v36, v37, v38, v39, v40);
      }
      uint64_t v41 = objc_msgSend_countByEnumeratingWithState_objects_count_(v33, v36, (uint64_t)&v66, (uint64_t)v70, 16, v40);
    }
    while (v41);
  }

  if (objc_msgSend_statusReportingEnabled(*(void **)(a1 + 40), v44, v45, v46, v47, v48))
  {
    uint64_t v54 = objc_msgSend_delegate(*(void **)(a1 + 40), v49, v50, v51, v52, v53);
    char v55 = objc_opt_respondsToSelector();

    if (v55)
    {
      long long v61 = objc_msgSend_delegate(*(void **)(a1 + 40), v56, v57, v58, v59, v60);
      objc_msgSend_visualizationManagerDidUpdateSessionStatus_(v61, v62, *(void *)(a1 + 40), v63, v64, v65);
    }
  }
}

void sub_1C4B40C7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B40D64(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (objc_msgSend_statusReportingEnabled(*(void **)(a1 + 32), a2, a3, a4, a5, a6))
  {
    objc_msgSend_delegate(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
    id v22 = (id)objc_claimAutoreleasedReturnValue();
    char v12 = objc_opt_respondsToSelector();

    if (v12)
    {
      objc_msgSend_delegate(*(void **)(a1 + 32), v13, v14, v15, v16, v17);
      id v23 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend_visualizationManagerDidUpdateSessionStatus_(v23, v18, *(void *)(a1 + 32), v19, v20, v21);
    }
  }
}

void sub_1C4B40E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B40E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B41154(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v4 = (id)qword_1EA3C9FC8;
  uint64_t v5 = v4;
  os_signpost_id_t v6 = *(void *)(a1 + 40);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v5, OS_SIGNPOST_INTERVAL_END, v6, "CHTranscriptionQuery", "", buf, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v7 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_1C492D000, v7, OS_LOG_TYPE_DEFAULT, "END \"CHTranscriptionQuery\"", v8, 2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void *CoreHandwriting::synthesis::fast_path::CHFastPathCharacterPersonalizerWithPrefixForStyleInventory::CHFastPathCharacterPersonalizerWithPrefixForStyleInventory(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x58uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = &v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2011028;
  id v9 = v6;
  v7[2].__vftable = 0;
  v7[1].__shared_weak_owners_ = 0;
  v7[1].__shared_owners_ = (uint64_t)&v7[1].__shared_weak_owners_;
  v7[2].__shared_owners_ = 0xC800000002;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2010EC0;
  v7[3].__vftable = 0;
  v7[3].__shared_owners_ = 0;
  v7[2].__shared_weak_owners_ = (uint64_t)v9;
  uint64_t v10 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v11 = v9;
  dispatch_queue_t v12 = dispatch_queue_create("com.apple.CoreHandwriting.CHFPCharacterHolderStyleInventoryQueue", v10);
  shared_owners = (void *)v7[3].__shared_owners_;
  v7[3].__shared_owners_ = (uint64_t)v12;

  uint64_t v14 = operator new(0x38uLL);
  v14[1] = 0;
  v14[2] = 0;
  *uint64_t v14 = &unk_1F20110D0;
  uint64_t v15 = v14 + 3;
  id v16 = v5;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  id v17 = v16;
  uint64_t v18 = v17;
  v14[3] = &unk_1F2010E90;
  v14[4] = v17;
  v14[5] = v7 + 1;
  v14[6] = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    *uint64_t v15 = &unk_1F2010F70;

    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_3;
    }
LABEL_6:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    uint64_t v19 = (std::__shared_weak_count *)a1[1];
    *a1 = v15;
    a1[1] = v14;
    if (!v19) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  *uint64_t v15 = &unk_1F2010F70;

  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v19 = (std::__shared_weak_count *)a1[1];
  *a1 = v15;
  a1[1] = v14;
  if (!v19) {
    goto LABEL_9;
  }
LABEL_7:
  if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_9:

  return a1;
}

void sub_1C4B415E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1C4A2B9F0((uint64_t)&a9);
  sub_1C4A2B9F0(v9);

  _Unwind_Resume(a1);
}

void sub_1C4B4160C(_Unwind_Exception *a1)
{
  sub_1C4A2B9F0(v1);

  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::synthesis::fast_path::CHFastPathCharacterPersonalizerWithPrefixForStyleInventory::getCharactersRequestsToSynthesize(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterPersonalizerWithPrefixForStyleInventory *this)
{
  return (***(uint64_t (****)(void))this)(*(void *)this);
}

uint64_t CoreHandwriting::synthesis::fast_path::CHFastPathCharacterPersonalizerWithPrefixForStyleInventory::processRequestResult(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 8))();
}

void CoreHandwriting::synthesis::fast_path::CHFastPathCharacterPersonalizerWithPrefixForStyleInventory::runPersonalization(void (****a1)(void **__return_ptr), void *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  (***a1)(&__p);
  uint64_t v4 = (id *)__p;
  id v5 = v25;
  if (__p != v25)
  {
    do
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      id v6 = (id)qword_1EA3C9FD8;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        id v7 = *v4;
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v7;
        _os_log_impl(&dword_1C492D000, v6, OS_LOG_TYPE_DEFAULT, "CHFastPathCharacterPersonalizer: requested to synthesize %@", (uint8_t *)&buf, 0xCu);
      }

      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = &buf;
      uint64_t v27 = 0x6012000000;
      uint64_t v28 = sub_1C4B41A44;
      uint64_t v29 = sub_1C4B41A70;
      uint64_t v30 = "1 0";
      id v31 = *v4;
      id v32 = v4[1];
      int v33 = *((_DWORD *)v4 + 4);
      int v8 = v33;
      id v34 = v4[3];
      long long v35 = *((_OWORD *)v4 + 2);
      v22[0] = 0;
      v22[1] = v22;
      v22[2] = 0x2020000000;
      int v23 = DWORD1(v35);
      uint64_t v14 = unicodeToNSString(*((_DWORD *)v4 + 8), v9, v10, v11, v12, v13);
      uint64_t v15 = *(void *)(*((void *)&buf + 1) + 88);
      v20[4] = &buf;
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = sub_1C4B41AF0;
      v21[3] = &unk_1E64E41D0;
      v21[5] = v22;
      v21[6] = a1;
      v21[4] = &buf;
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = sub_1C4B41D68;
      v20[3] = &unk_1E64E4220;
      id v16 = objc_unsafeClaimAutoreleasedReturnValue((id)(*((uint64_t (**)(id, void *, uint64_t, uint64_t, void *, void *))v3
                                                         + 2))(v3, v14, 2 * (v8 == 2), v15, v21, v20));

      _Block_object_dispose(v22, 8);
      _Block_object_dispose(&buf, 8);

      v4 += 6;
    }
    while (v4 != v5);
    uint64_t v4 = (id *)__p;
  }
  if (v4)
  {
    id v17 = v25;
    uint64_t v18 = v4;
    if (v25 != v4)
    {
      do
      {

        uint64_t v19 = *(v17 - 6);
        v17 -= 6;
      }
      while (v17 != v4);
      uint64_t v18 = __p;
    }
    uint64_t v25 = v4;
    operator delete(v18);
  }
}

void sub_1C4B419F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 sub_1C4B41A44(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a1 + 48) = v2;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  uint64_t v3 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  *(void *)(a1 + 72) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  *(__n128 *)(a1 + 80) = result;
  return result;
}

void sub_1C4B41A70(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 48);
}

id *sub_1C4B41AB4(id *a1)
{
  return a1;
}

void sub_1C4B41AF0(void *a1, void *a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v5)
  {
    int v8 = (void *)a1[6];
    uint64_t v9 = *(void *)(a1[4] + 8);
    id v10 = *(id *)(v9 + 48);
    *(void *)&long long buf = v10;
    *((void *)&buf + 1) = *(id *)(v9 + 56);
    int v26 = *(_DWORD *)(v9 + 64);
    id v27 = *(id *)(v9 + 72);
    long long v28 = *(_OWORD *)(v9 + 80);
    uint64_t v11 = *(void *)(a1[5] + 8);
    int v12 = *(_DWORD *)(v11 + 24);
    *(_DWORD *)(v11 + 24) = v12 + 1;
    DWORD1(v28) = v12;
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v13 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = 138412546;
      id v22 = v10;
      __int16 v23 = 1024;
      int v24 = v12;
      _os_log_impl(&dword_1C492D000, v13, OS_LOG_TYPE_DEFAULT, "CHFastPathCharacterPersonalizer: synthesis result retrieved for %@ with version %d", (uint8_t *)&v21, 0x12u);
    }

    (*(void (**)(void, long long *, id))(*(void *)*v8 + 8))(*v8, &buf, v5);
  }
  else if (v6)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v14 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = objc_msgSend_localizedDescription(v7, v15, v16, v17, v18, v19);
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v20;
      _os_log_impl(&dword_1C492D000, v14, OS_LOG_TYPE_ERROR, "CHFastPathCharacterPersonalizer: character synthesis Error during fast path synthesis: %@", (uint8_t *)&buf, 0xCu);
    }
  }
}

void sub_1C4B41D38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4B41D68(uint64_t a1, void *a2)
{
  uint64_t v171 = *MEMORY[0x1E4F143B8];
  id v151 = a2;
  id v3 = objc_alloc(MEMORY[0x1E4F1CA48]);
  uint64_t v9 = objc_msgSend_count(v151, v4, v5, v6, v7, v8);
  id v153 = (id)objc_msgSend_initWithCapacity_(v3, v10, v9, v11, v12, v13);
  long long v168 = 0u;
  long long v169 = 0u;
  long long v166 = 0u;
  long long v167 = 0u;
  id obj = v151;
  uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v14, (uint64_t)&v166, (uint64_t)v170, 16, v15);
  if (v16)
  {
    char v17 = 0;
    uint64_t v154 = *(void *)v167;
    do
    {
      uint64_t v155 = v16;
      for (uint64_t i = 0; i != v155; ++i)
      {
        if (*(void *)v167 != v154) {
          objc_enumerationMutation(obj);
        }
        id v24 = *(id *)(*((void *)&v166 + 1) + 8 * i);
        if (v24)
        {
          uint64_t v25 = objc_msgSend_copy(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 48), v19, v20, v21, v22, v23);
          id v31 = objc_msgSend_copy(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 72), v26, v27, v28, v29, v30);
          uint64_t v42 = (CHSynthesisRequestOptions *)objc_msgSend_copy(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 56), v32, v33, v34, v35, v36);
          if (!v42) {
            uint64_t v42 = objc_alloc_init(CHSynthesisRequestOptions);
          }
          uint64_t v43 = objc_msgSend_drawing(v24, v37, v38, v39, v40, v41);
          objc_msgSend_setStyleDrawing_(v42, v44, (uint64_t)v43, v45, v46, v47);

          uint64_t v53 = objc_msgSend_transcription(v24, v48, v49, v50, v51, v52);
          objc_msgSend_setStyleContent_(v42, v54, (uint64_t)v53, v55, v56, v57);

          objc_msgSend_setValidateSegments_(v42, v58, 1, v59, v60, v61);
          if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 64) == 2)
          {
            long long v67 = objc_msgSend_transcription(v24, v62, v63, v64, v65, v66);
            uint64_t v73 = unicodeToNSString(*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 80), v68, v69, v70, v71, v72);
            int v78 = objc_msgSend_containsString_(v67, v74, (uint64_t)v73, v75, v76, v77);

            if (v78)
            {
              uint64_t v160 = 0;
              v161 = &v160;
              uint64_t v162 = 0x3032000000;
              v163 = sub_1C4B42378;
              v164 = sub_1C4B42388;
              id v165 = objc_alloc_init(NSString);
              v89 = objc_msgSend_transcription(v24, v84, v85, v86, v87, v88);
              uint64_t v95 = objc_msgSend_transcription(v24, v90, v91, v92, v93, v94);
              uint64_t v101 = objc_msgSend_length(v95, v96, v97, v98, v99, v100);
              v156[0] = MEMORY[0x1E4F143A8];
              v156[1] = 3221225472;
              v156[2] = sub_1C4B42390;
              v156[3] = &unk_1E64E41F8;
              uint64_t v158 = *(void *)(a1 + 32);
              v159 = &v160;
              id v102 = v24;
              id v157 = v102;
              objc_msgSend_enumerateCodepointsInRange_usingBlock_(v89, v103, 0, v101, (uint64_t)v156, v104);

              id v105 = (id)v161[5];
              v111 = objc_msgSend_drawing(v102, v106, v107, v108, v109, v110);
              uint64_t v117 = objc_msgSend_copy(v111, v112, v113, v114, v115, v116);

              objc_msgSend_setForwardProcessRatio_(v42, v118, (uint64_t)&unk_1F203F4A0, v119, v120, v121);
              objc_msgSend_setBackwardProcessRatio_(v42, v122, (uint64_t)&unk_1F203F4B0, v123, v124, v125);

              _Block_object_dispose(&v160, 8);
              uint64_t v25 = v105;
              id v31 = (void *)v117;
              char v17 = 1;
              goto LABEL_14;
            }
            if (v17)
            {
              char v17 = 1;
              goto LABEL_15;
            }
            *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 64) = 0;
            v145 = objc_msgSend_styleContent(v42, v79, v80, v81, v82, v83);
            uint64_t v135 = objc_msgSend_stringByAppendingFormat_(v25, v146, @" %@", v147, v148, v149, v145);

            char v17 = 0;
          }
          else
          {
            v130 = objc_msgSend_styleContent(v42, v62, v63, v64, v65, v66);
            uint64_t v135 = objc_msgSend_stringByAppendingFormat_(v25, v131, @" %@", v132, v133, v134, v130);
          }
          uint64_t v25 = (void *)v135;
LABEL_14:
          objc_msgSend_setSkipStyleInventoryLookup_(v42, v126, 1, v127, v128, v129);
          v136 = [CHRemoteSynthesisRequest alloc];
          v138 = objc_msgSend_initWithString_drawing_options_requestType_priority_(v136, v137, (uint64_t)v25, (uint64_t)v31, (uint64_t)v42, v31 != 0, 2);
          objc_msgSend_addObject_(v153, v139, (uint64_t)v138, v140, v141, v142);

LABEL_15:
        }
      }
      uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v143, (uint64_t)&v166, (uint64_t)v170, 16, v144);
    }
    while (v16);
  }

  return v153;
}

void sub_1C4B42244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B42378(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4B42388(uint64_t a1)
{
}

void sub_1C4B42390(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, unsigned char *a5, uint64_t a6)
{
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 80) == a2)
  {
    int v9 = (int)a2;
    uint64_t v11 = objc_msgSend_transcription(*(void **)(a1 + 32), a2, a3, a4, (uint64_t)a5, a6);
    uint64_t v12 = NSString;
    uint64_t v18 = unicodeToNSString(v9, v13, v14, v15, v16, v17);
    uint64_t v23 = objc_msgSend_stringWithFormat_(v12, v19, @" %@ ", v20, v21, v22, v18);
    uint64_t v26 = objc_msgSend_stringByReplacingCharactersInRange_withString_(v11, v24, a3, a4, (uint64_t)v23, v25);
    uint64_t v27 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v28 = *(void **)(v27 + 40);
    *(void *)(v27 + 40) = v26;

    uint64_t v29 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    uint64_t v35 = objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E4F28B88], v30, v31, v32, v33, v34);
    uint64_t v40 = objc_msgSend_stringByTrimmingCharactersInSet_(v29, v36, (uint64_t)v35, v37, v38, v39);
    uint64_t v41 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v42 = *(void **)(v41 + 40);
    *(void *)(v41 + 40) = v40;

    *a5 = 1;
  }
}

void sub_1C4B424C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B424D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B424E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B424FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void **sub_1C4B4250C(void **a1)
{
  long long v2 = (id *)*a1;
  if (*a1)
  {
    id v3 = (id *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {

        uint64_t v5 = *(v3 - 6);
        v3 -= 6;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1C4B4257C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2011028;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C4B4259C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2011028;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8786460);
}

uint64_t sub_1C4B425F0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1C4B42618(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20110D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C4B42638(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20110D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8786460);
}

uint64_t sub_1C4B4268C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void sub_1C4B42AFC(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2 || !*(unsigned char *)(v2 + 33))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    id v3 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      int v9 = objc_msgSend_debugName(*(void **)(a1 + 32), v4, v5, v6, v7, v8);
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 48);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v25 = v9;
      __int16 v26 = 2048;
      uint64_t v27 = v10;
      _os_log_impl(&dword_1C492D000, v3, OS_LOG_TYPE_DEBUG, "%@: start for session %p", buf, 0x16u);
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 33) = 1;
    objc_msgSend_registerChangeObserver_(*(void **)(*(void *)(a1 + 32) + 48), v11, *(void *)(a1 + 32), v12, v13, v14);
    uint64_t v15 = *(void **)(a1 + 32);
    uint64_t v16 = v15[3];
    uint64_t v22 = objc_msgSend_processingQueue(v15, v17, v18, v19, v20, v21);
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = sub_1C4B42C9C;
    v23[3] = &unk_1E64E4248;
    v23[4] = *(void *)(a1 + 32);
    v23[5] = v16;
    dispatch_async(v22, v23);
  }
}

void sub_1C4B42C9C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void sub_1C4B42CAC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v169 = *MEMORY[0x1E4F143B8];
  if (!a1 || *(unsigned char *)(a1 + 32) || *(double *)(a1 + 24) > a7) {
    return;
  }
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], a2, a3, a4, a5, a6);
  double v9 = v8 - *(double *)(a1 + 24);
  objc_msgSend_preferredUpdatesInterval((void *)a1, v10, v11, v12, v13, v14);
  double v21 = v20 - v9;
  if (v21 > 0.0)
  {
    uint64_t v22 = *(void *)(a1 + 24);
    dispatch_time_t v23 = dispatch_time(0, (uint64_t)(v21 * 1000000000.0));
    uint64_t v29 = objc_msgSend_processingQueue((void *)a1, v24, v25, v26, v27, v28);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4B43484;
    block[3] = &unk_1E64E4248;
    block[4] = a1;
    block[5] = v22;
    dispatch_after(v23, v29, block);

    return;
  }
  uint64_t v30 = objc_msgSend_lastRecognitionResult(*(void **)(a1 + 48), v15, v16, v17, v18, v19);
  uint64_t v36 = v30;
  if (v30) {
    BOOL v37 = *(void *)(a1 + 16) == 0;
  }
  else {
    BOOL v37 = 0;
  }
  LODWORD(v38) = v37;
  uint64_t v44 = objc_msgSend_encodedStrokeProviderVersion(v30, v31, v32, v33, v34, v35);
  if (v44)
  {
    uint64_t v45 = objc_msgSend_encodedStrokeProviderVersion(*(void **)(a1 + 16), v39, v40, v41, v42, v43);
    uint64_t v51 = objc_msgSend_encodedStrokeProviderVersion(v36, v46, v47, v48, v49, v50);
    int v56 = objc_msgSend_isEqual_(v45, v52, (uint64_t)v51, v53, v54, v55) ^ 1;

    int doesQueryResultDependOnDeclaredVariables = objc_msgSend_q_doesQueryResultDependOnDeclaredVariables((void *)a1, v57, v58, v59, v60, v61);
    int v68 = 0;
    if (!v36) {
      goto LABEL_19;
    }
  }
  else
  {
    int v56 = 0;

    int doesQueryResultDependOnDeclaredVariables = objc_msgSend_q_doesQueryResultDependOnDeclaredVariables((void *)a1, v69, v70, v71, v72, v73);
    int v68 = 0;
    if (!v36) {
      goto LABEL_19;
    }
  }
  if (doesQueryResultDependOnDeclaredVariables)
  {
    if (!*(void *)(a1 + 16))
    {
      int v92 = 0;
      int v68 = 0;
      BOOL v86 = 0;
      uint64_t v98 = objc_msgSend_completeness(v36, v63, v64, v65, v66, v67);
      if (objc_msgSend_q_resultWantedForCompleteness_((void *)a1, v99, v98, v100, v101, v102)) {
        goto LABEL_26;
      }
      goto LABEL_28;
    }
    uint64_t v74 = objc_msgSend_declaredVariables(v36, v63, v64, v65, v66, v67);
    uint64_t v80 = objc_msgSend_declaredVariables(*(void **)(a1 + 16), v75, v76, v77, v78, v79);
    int v68 = objc_msgSend_isEqualToSet_(v74, v81, (uint64_t)v80, v82, v83, v84) ^ 1;
  }
LABEL_19:
  uint64_t v85 = *(void **)(a1 + 16);
  if (!v85)
  {
    BOOL v86 = 0;
    int v92 = 0;
    if (!v36) {
      goto LABEL_28;
    }
LABEL_21:
    uint64_t v93 = objc_msgSend_completeness(v36, v63, v64, v65, v66, v67);
    if ((objc_msgSend_q_resultWantedForCompleteness_((void *)a1, v94, v93, v95, v96, v97) & 1) == 0) {
      goto LABEL_28;
    }
LABEL_26:
    int v143 = 1;
    int v103 = 1;
    if ((v38 | v56 | v68)) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  BOOL v86 = v36 == 0;
  uint64_t v87 = objc_msgSend_completeness(v85, v63, v64, v65, v66, v67);
  int v92 = objc_msgSend_q_resultWantedForCompleteness_((void *)a1, v88, v87, v89, v90, v91);
  if (v36) {
    goto LABEL_21;
  }
LABEL_28:
  int v143 = 0;
  int v104 = v92 & v86 ^ 1 | v38;
  int v103 = v92 & v86 | v104 ^ 1;
  if ((v104 | v56) & 1) != 0 || (v68) {
    goto LABEL_31;
  }
LABEL_30:
  int v103 = v86 | v92 ^ 1;
LABEL_31:
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  id v105 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v105, OS_LOG_TYPE_DEBUG))
  {
    v106 = (objc_class *)objc_opt_class();
    NSStringFromClass(v106);
    uint64_t v107 = v142 = v103;
    uint64_t v113 = objc_msgSend_recognitionSession((void *)a1, v108, v109, v110, v111, v112);
    int v119 = v92;
    BOOL v120 = v86;
    int v121 = v56;
    int v122 = v38;
    uint64_t v38 = objc_msgSend_completeness(v36, v114, v115, v116, v117, v118);
    uint64_t v128 = objc_msgSend_completeness(*(void **)(a1 + 16), v123, v124, v125, v126, v127);
    *(_DWORD *)long long buf = 134220802;
    uint64_t v146 = a1;
    __int16 v147 = 2112;
    uint64_t v148 = v107;
    __int16 v149 = 2048;
    v150 = v113;
    __int16 v151 = 2112;
    v152 = v36;
    __int16 v153 = 2048;
    uint64_t v154 = v38;
    LOBYTE(v38) = v122;
    __int16 v155 = 2048;
    uint64_t v156 = v128;
    __int16 v157 = 1024;
    int v158 = v122;
    __int16 v159 = 1024;
    int v160 = v121;
    __int16 v161 = 1024;
    BOOL v162 = v120;
    __int16 v163 = 1024;
    int v164 = v119;
    __int16 v165 = 1024;
    int v166 = v143;
    __int16 v167 = 1024;
    int v168 = v142;
    _os_log_impl(&dword_1C492D000, v105, OS_LOG_TYPE_DEBUG, "CHQuery update: query %p (type %@), session %p, latestRecognitionResult %@, lastCompleteness %ld, prevCompleteness %ld, firstResultReady %d, strokeProviderChanged %d, prevResultRemoved %d, prevResultWanted %d, resultWanted %d -> shouldProceed ? %d", buf, 0x62u);

    int v103 = v142;
  }

  if (v103)
  {
    uint64_t v134 = objc_msgSend_copy(v36, v129, v130, v131, v132, v133);
    uint64_t v135 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = v134;

    if ((v38 & 1) == 0)
    {
      objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], v136, v137, v138, v139, v140);
      *(void *)(a1 + 24) = v141;
    }
    objc_msgSend_q_setNeedsQueryResultUpdating((void *)a1, v136, v137, v138, v139, v140);
  }
}

uint64_t sub_1C4B43298(uint64_t result)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(result + 32);
  if (v1 && *(unsigned char *)(v1 + 33))
  {
    uint64_t v2 = result;
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    id v3 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      double v9 = objc_msgSend_debugName(*(void **)(v2 + 32), v4, v5, v6, v7, v8);
      int v14 = 138412290;
      uint64_t v15 = v9;
      _os_log_impl(&dword_1C492D000, v3, OS_LOG_TYPE_DEBUG, "%@: pause", (uint8_t *)&v14, 0xCu);
    }
    *(unsigned char *)(*(void *)(v2 + 32) + 33) = 0;
    return objc_msgSend_unregisterChangeObserver_(*(void **)(*(void *)(v2 + 32) + 48), v10, *(void *)(v2 + 32), v11, v12, v13);
  }
  return result;
}

void sub_1C4B43474(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

uint64_t sub_1C4B43484(uint64_t a1)
{
  return sub_1C4B42CAC(*(void *)(a1 + 32), *(double *)(a1 + 40));
}

void sub_1C4B4360C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void sub_1C4B438E4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40));
  objc_msgSend_queryDidUpdateResult_(WeakRetained, v2, *(void *)(a1 + 32), v3, v4, v5);
}

uint64_t HTMLog::writeHeader(FILE **this)
{
  fwrite("<!DOCTYPE html>\n<html>\n", 0x17uLL, 1uLL, this[15]);
  fwrite("<head>\n", 7uLL, 1uLL, this[15]);
  fwrite("<style>\n", 8uLL, 1uLL, this[15]);
  float v2 = *((float *)this + 5);
  float v3 = *((float *)this + 3);
  float v4 = (float)(v2 * 3.0) + (float)(v3 * 2.0);
  if (!*((unsigned char *)this + 6)) {
    float v4 = v3 + (float)(v2 * 2.0);
  }
  double v5 = v4;
  fprintf(this[15], ".x {background-color:#fff;float:left;width:%.1fpx;margin:%.1fpx;padding:%.1fpx;border-style:groove;border-width:5px;"
    "border-color:#98bf21;}\n",
    v4,
    *((float *)this + 4),
    fminf(v2, 20.0));
  fprintf(this[15], ".plain {background-color:#fff;float:left;width:%.1fpx;margin:%.1fpx;padding:%.1fpx;border:none;}\n",
    v5,
    *((float *)this + 4),
    *((float *)this + 5));
  fprintf(this[15], ".bi {-webkit-border-radius: 8px;-webkit-border-width: 0px;background: -webkit-gradient(linear, left top, left bottom"
    ", color-stop(0%%,#eee), color-stop(40%%,#eee), color-stop(100%%,#eee));}\n");
  fprintf(this[15], ".bred {-webkit-border-radius: 8px;background: -webkit-gradient(linear, left top, left bottom, color-stop(0%%,#eee), "
    "color-stop(40%%,#fcc), color-stop(100%%,#faa));}\n");
  fprintf(this[15], ".byellow {-webkit-border-radius: 8px;background: -webkit-gradient(linear, left top, left bottom, color-stop(0%%,#eee"
    "), color-stop(40%%,#ffc), color-stop(100%%,#ffa));}\n");
  fprintf(this[15], ".bgreen {-webkit-border-radius: 8px;background: -webkit-gradient(linear, left top, left bottom, color-stop(0%%,#eee)"
    ", color-stop(40%%,#cfc), color-stop(100%%,#afa));}\n");
  fwrite("image{opacity: 1;}\n", 0x13uLL, 1uLL, this[15]);
  fwrite("image:hover{opacity: 0.3;}\n", 0x1BuLL, 1uLL, this[15]);
  fwrite("h1{font-size:32px;background-color:#6bf;color:#fff;padding:10px;text-align:center;}\n",
    0x54uLL,
    1uLL,
    this[15]);
  fwrite("</style>\n", 9uLL, 1uLL, this[15]);
  if (*(unsigned char *)this || *((unsigned char *)this + 1))
  {
    fwrite(" <script type=\"text/javascript\">\n", 0x21uLL, 1uLL, this[15]);
    fwrite("function boo(id,xyfile,action)\n", 0x1FuLL, 1uLL, this[15]);
    fwrite("{\n", 2uLL, 1uLL, this[15]);
    fwrite("    document.getElementById('bt' + id).className='bi';\n", 0x37uLL, 1uLL, this[15]);
    fwrite("    document.getElementById('br' + id).className='bi';\n", 0x37uLL, 1uLL, this[15]);
    fwrite("    document.getElementById('brmts' + id).className='bi';\n", 0x3AuLL, 1uLL, this[15]);
    fwrite("    switch(action)\n", 0x13uLL, 1uLL, this[15]);
    fwrite("    {\n", 6uLL, 1uLL, this[15]);
    fwrite("        case 0:\n", 0x10uLL, 1uLL, this[15]);
    fwrite("            document.getElementById('bt' + id).className='bred';\n", 0x41uLL, 1uLL, this[15]);
    fwrite("            document.getElementById('po-term'+id).innerHTML='Trash ' + xyfile + '\\n';\n",
      0x56uLL,
      1uLL,
      this[15]);
    fwrite("            break;\n", 0x13uLL, 1uLL, this[15]);
    fwrite("        case 1:\n", 0x10uLL, 1uLL, this[15]);
    fwrite("            document.getElementById('br' + id).className='byellow';\n", 0x44uLL, 1uLL, this[15]);
    fwrite("            document.getElementById('po-term'+id).innerHTML='Review ' + xyfile + '\\n';\n",
      0x57uLL,
      1uLL,
      this[15]);
    fwrite("            break;\n", 0x13uLL, 1uLL, this[15]);
    fwrite("        case 2:\n", 0x10uLL, 1uLL, this[15]);
    fwrite("            document.getElementById('brmts' + id).className='bgreen';\n", 0x46uLL, 1uLL, this[15]);
    fwrite("            document.getElementById('po-term'+id).innerHTML='RMTS ' + xyfile + '\\n';\n",
      0x55uLL,
      1uLL,
      this[15]);
    fwrite("            break;\n", 0x13uLL, 1uLL, this[15]);
    fwrite("        case 3:\n", 0x10uLL, 1uLL, this[15]);
    fwrite("            document.getElementById('po-term'+id).innerHTML='';\n", 0x40uLL, 1uLL, this[15]);
    fwrite("            break;\n", 0x13uLL, 1uLL, this[15]);
    fwrite("    }\n", 6uLL, 1uLL, this[15]);
    fwrite("}\n", 2uLL, 1uLL, this[15]);
    fwrite("function validItem(id,xyfile,item)\n", 0x23uLL, 1uLL, this[15]);
    fwrite("{\n", 2uLL, 1uLL, this[15]);
    fwrite(" document.getElementById('po-term'+id).innerHTML += xyfile + ' ' + item + '\\n';\n",
      0x50uLL,
      1uLL,
      this[15]);
    fwrite("}\n", 2uLL, 1uLL, this[15]);
    fwrite("function SendMail(nbExamples) {\n", 0x20uLL, 1uLL, this[15]);
    uint64_t v6 = (const char *)(this + 11);
    if (*((char *)this + 111) < 0) {
      uint64_t v6 = *(const char **)v6;
    }
    fprintf(this[15], "    var subject= \"I reviewed %s\";\n", v6);
    fwrite("    var body = \"\";\n", 0x13uLL, 1uLL, this[15]);
    fwrite("    var templine=\"\";\n", 0x15uLL, 1uLL, this[15]);
    fwrite("    for (var i=0;i<=nbExamples;i++)\n", 0x24uLL, 1uLL, this[15]);
    fwrite("    {\n", 6uLL, 1uLL, this[15]);
    fwrite("        templine = document.getElementById('po-term'+i).innerHTML;\n", 0x43uLL, 1uLL, this[15]);
    fwrite("        if (templine.length > 5){\n", 0x22uLL, 1uLL, this[15]);
    fwrite("            body+= templine;\n", 0x1DuLL, 1uLL, this[15]);
    fwrite("        }\n", 0xAuLL, 1uLL, this[15]);
    fwrite("    }\n", 6uLL, 1uLL, this[15]);
    fwrite("    var uruint64_t i = \"mailto:antoine_vinel@apple.com?subject=\";\n", 0x39uLL, 1uLL, this[15]);
    fwrite("    uri += encodeURIComponent(subject);\n", 0x28uLL, 1uLL, this[15]);
    fwrite("    uri += \"&body=\";\n", 0x15uLL, 1uLL, this[15]);
    fwrite("    uri += encodeURIComponent(body);\n", 0x25uLL, 1uLL, this[15]);
    fwrite("    window.open(uri);\n", 0x16uLL, 1uLL, this[15]);
    fwrite("}\n", 2uLL, 1uLL, this[15]);
    fwrite("</script>\n", 0xAuLL, 1uLL, this[15]);
  }
  fwrite("</head>\n", 8uLL, 1uLL, this[15]);
  *((unsigned char *)this + 144) = 1;
  uint64_t result = fwrite("<body>\n", 7uLL, 1uLL, this[15]);
  if (*(unsigned char *)this)
  {
    fwrite("<p style=\"clear:both;margin:auto;\">This HTML file can't write anything on your disk. To save your work you must "
      "finish the whole page, and click on \"Send via email to Antoine\".</p>\n",
      0xB5uLL,
      1uLL,
      this[15]);
    fwrite("<p style=\"clear:both;margin:auto;\">Click on \"unacceptable\" examples, they will go in a second reviewing proces"
      "s where we'll decide to keep them or not. Don't worry about a small shifting (regarding to background image), and "
      "don't remove an example just because the strokes are looking as stairs, it is normal since it occurs on very small"
      " drawings (and we need them). But you can flag for instance bended arrows or lines ;)</p>\n",
      0x1ACuLL,
      1uLL,
      this[15]);
    fwrite("<p style=\"clear:both;margin:auto;\">This process is non-destructive.</p>\n", 0x48uLL, 1uLL, this[15]);
    fwrite("<p style=\"clear:both;margin:auto;\">Good luck,</p>\n", 0x32uLL, 1uLL, this[15]);
    uint64_t v8 = this[15];
    return fwrite("<p style=\"clear:both;margin:auto;\">Antoine</p>\n", 0x2FuLL, 1uLL, v8);
  }
  return result;
}

void HTMLog::~HTMLog(HTMLog *this)
{
  float v2 = (FILE *)*((void *)this + 15);
  if (v2)
  {
    if (*(unsigned char *)this || *((unsigned char *)this + 1))
    {
      fprintf(*((FILE **)this + 15), "<div style=\"clear:both;margin:auto;font-size:250%%;\" >\n");
      fwrite("<p>WARNING : NOTHING WAS SAVED : YOU MUST CLICK ON THE FOLLOWING LINK !</p>\n", 0x4CuLL, 1uLL, *((FILE **)this + 15));
      fprintf(*((FILE **)this + 15), "<p><a href=\"#\" onclick=\"SendMail(%d);\">Send via email to Antoine !</a></p>\n",
        *((_DWORD *)this + 50));
      fwrite("</div>\n", 7uLL, 1uLL, *((FILE **)this + 15));
      fwrite("<p>For information, here are the files you flagged:</p>\n", 0x38uLL, 1uLL, *((FILE **)this + 15));
      if ((*((_DWORD *)this + 50) & 0x80000000) == 0)
      {
        int v3 = -1;
        do
          fprintf(*((FILE **)this + 15), "<p id=\"po-term%d\" style=\"margin:0;\" \\>\n", ++v3);
        while (v3 < *((_DWORD *)this + 50));
      }
      fprintf(*((FILE **)this + 15), "<div style=\"clear:both;margin:auto;font-size:250%%;\" >\n");
      fwrite("</div>\n", 7uLL, 1uLL, *((FILE **)this + 15));
      float v2 = (FILE *)*((void *)this + 15);
    }
    fwrite("</body>\n</html>\n", 0x10uLL, 1uLL, v2);
    fclose(*((FILE **)this + 15));
  }
  if (*((char *)this + 231) < 0)
  {
    operator delete(*((void **)this + 26));
    if ((*((char *)this + 111) & 0x80000000) == 0)
    {
LABEL_11:
      if ((*((char *)this + 79) & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_16;
    }
  }
  else if ((*((char *)this + 111) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(*((void **)this + 11));
  if ((*((char *)this + 79) & 0x80000000) == 0)
  {
LABEL_12:
    if ((*((char *)this + 55) & 0x80000000) == 0) {
      return;
    }
LABEL_17:
    operator delete(*((void **)this + 4));
    return;
  }
LABEL_16:
  operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0) {
    goto LABEL_17;
  }
}

size_t HTMLog::addTextAtPoint(HTMLog *this, CGPoint a2, const char *a3, ...)
{
  va_start(va, a3);
  double v5 = (FILE *)*((void *)this + 15);
  uint64_t v6 = (char *)this + 56;
  if (*((char *)this + 79) < 0) {
    uint64_t v6 = *(const char **)v6;
  }
  float y = a2.y;
  double v8 = *((float *)this + 40);
  float v9 = *((float *)this + 39) + (y - *((double *)this + 22)) * v8;
  float x = a2.x;
  float v11 = *((float *)this + 38) + (x - *((double *)this + 21)) * v8;
  fprintf(v5, "    <text x=\"%.0f\" y=\"%.0f\" font-family=\"Verdana\" font-size=\"%d\" fill=\"%s\">", v11, v9, *((_DWORD *)this + 20), v6);
  vfprintf(*((FILE **)this + 15), a3, va);
  return fwrite("</text>\n", 8uLL, 1uLL, *((FILE **)this + 15));
}

void HTMLog::pushInfo(HTMLog *this, const char *__format, ...)
{
  va_start(va, __format);
  va_copy(v16, va);
  int v3 = (char *)this + 232;
  vsnprintf((char *)this + 232, 0x800uLL, __format, va);
  size_t v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1C4949B7C();
  }
  std::string::size_type v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4) {
LABEL_8:
  }
    memcpy(p_dst, v3, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  float v9 = std::string::append(&__dst, "<br/>");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v15 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v15 >= 0) {
    float v11 = __p;
  }
  else {
    float v11 = (void **)__p[0];
  }
  if (v15 >= 0) {
    std::string::size_type v12 = HIBYTE(v15);
  }
  else {
    std::string::size_type v12 = (std::string::size_type)__p[1];
  }
  std::string::append((std::string *)((char *)this + 208), (const std::string::value_type *)v11, v12);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_19:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_19;
  }
}

void sub_1C4B45638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

size_t HTMLog::pushH1(FILE **this, const char *a2, ...)
{
  va_start(va, a2);
  fwrite("<h1>", 4uLL, 1uLL, this[15]);
  vfprintf(this[15], a2, va);
  return fwrite("</h1>", 5uLL, 1uLL, this[15]);
}

size_t HTMLog::pushH2(FILE **this, const char *a2, ...)
{
  va_start(va, a2);
  fwrite("<h2>", 4uLL, 1uLL, this[15]);
  vfprintf(this[15], a2, va);
  return fwrite("</h2>", 5uLL, 1uLL, this[15]);
}

uint64_t HTMLog::push(FILE **this, const char *a2, ...)
{
  va_start(va, a2);
  return vfprintf(this[15], a2, va);
}

size_t HTMLog::openPolyline(FILE **this)
{
  return fwrite("    <polyline points=\"", 0x16uLL, 1uLL, this[15]);
}

uint64_t HTMLog::pushInPolyline(HTMLog *this, CGPoint a2)
{
  float x = a2.x;
  double v3 = *((float *)this + 40);
  float v4 = *((float *)this + 38) + (x - *((double *)this + 21)) * v3;
  float y = a2.y;
  float v6 = *((float *)this + 39) + (y - *((double *)this + 22)) * v3;
  return fprintf(*((FILE **)this + 15), " %.3f %.3f", v4, v6);
}

size_t HTMLog::py_start(HTMLog *this)
{
  float v2 = fopen("/Volumes/data/tasks/017-HTMLPY/temp.py", "w");
  *((void *)this + 17) = v2;
  fwrite("import numpy as np\n", 0x13uLL, 1uLL, v2);
  fwrite("import matplotlib.mlab as mlab\n", 0x1FuLL, 1uLL, *((FILE **)this + 17));
  fwrite("import matplotlib.pyplot as plt\n", 0x20uLL, 1uLL, *((FILE **)this + 17));
  fwrite("import StringIO\n", 0x10uLL, 1uLL, *((FILE **)this + 17));
  double v3 = (FILE *)*((void *)this + 17);
  return fwrite("import urllib, base64\n", 0x16uLL, 1uLL, v3);
}

uint64_t HTMLog::py(FILE **this, const char *a2, ...)
{
  va_start(va, a2);
  return vfprintf(this[15], a2, va);
}

uint64_t HTMLog::py_exec(FILE **this)
{
  fwrite("fig = plt.gcf()\n", 0x10uLL, 1uLL, this[17]);
  fwrite("imgdata = StringIO.StringIO()\n", 0x1EuLL, 1uLL, this[17]);
  fwrite("fig.savefig(imgdata, format='png')\n", 0x23uLL, 1uLL, this[17]);
  fwrite("imgdata.seek(0)\n", 0x10uLL, 1uLL, this[17]);
  fwrite("import urllib, base64\n", 0x16uLL, 1uLL, this[17]);
  fwrite("plotfile = open(\"/Volumes/data/tasks/017-HTMLPY/temp.b64\",\"w\")\n", 0x3FuLL, 1uLL, this[17]);
  fwrite("imgdata = StringIO.StringIO()\n", 0x1EuLL, 1uLL, this[17]);
  fwrite("fig.savefig(imgdata, format='png')\n", 0x23uLL, 1uLL, this[17]);
  fwrite("imgdata.seek(0)\n", 0x10uLL, 1uLL, this[17]);
  fwrite("plotfile.write('<img src = \\\"data:image/png;base64,' + urllib.quote(base64.b64encode(imgdata.buf)) + '\\\"/>')\n",
    0x6DuLL,
    1uLL,
    this[17]);
  fwrite("plotfile.close()", 0x10uLL, 1uLL, this[17]);
  fclose(this[17]);
  uint64_t result = system("python /Volumes/data/tasks/017-HTMLPY/temp.py");
  *((unsigned char *)this + 128) = 1;
  return result;
}

void EllipseRegressor::EllipseRegressor(EllipseRegressor *this, CHDrawing *a2, HTMLog *a3)
{
  float v6 = a2;
  *((void *)this + 3) = 0;
  objc_storeStrong((id *)this + 3, a2);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 0;
  *((void *)this + 2) = a3;
  *(void *)this = objc_msgSend_pointCountForStrokeIndex_(v6, v7, 0, v8, v9, v10, (char *)this + 24);
  operator new[]();
}

void sub_1C4B4621C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  _Unwind_Resume(a1);
}

void EllipseRegressor::performRegression(EllipseRegressor *this)
{
}

float EllipseRegressor::ePolarCoord(EllipseRegressor *this, CGPoint a2)
{
  CGFloat v3 = a2.x - *((double *)this + 4);
  float v4 = *((float *)this + 20) * 0.0174532925;
  CGFloat v5 = a2.y - *((double *)this + 5);
  double v6 = *((float *)this + 18);
  __float2 v7 = __sincosf_stret(v4);
  float v8 = atan2((v7.__cosval * v5 - v3 * v7.__sinval) * v6, (v3 * v7.__cosval + v7.__sinval * v5) * *((float *)this + 19));
  return -v8;
}

double EllipseRegressor::pointFromAngle(EllipseRegressor *this, float a2)
{
  float v4 = *((float *)this + 20) * 0.0174532925;
  double v5 = *((double *)this + 4);
  __float2 v6 = __sincosf_stret(v4);
  float v7 = *((float *)this + 18) * v6.__cosval;
  __float2 v8 = __sincosf_stret(a2);
  return v5 + (float)(v8.__cosval * v7) + (float)(v8.__sinval * (float)(*((float *)this + 19) * v6.__sinval));
}

int32x2_t EllipseRegressor::fitToCircle(CGFloat *this, CGPoint a2, CGPoint a3, CGPoint a4)
{
  double v4 = a3.y - a4.y;
  double v5 = a4.y - a2.y;
  double v6 = a2.y - a3.y;
  CGFloat v7 = a3.x * (a4.y - a2.y) + a2.x * (a3.y - a4.y) + a4.x * (a2.y - a3.y);
  float v8 = v7 + v7;
  if (v8 == 0.0) {
    float v8 = 0.01;
  }
  CGFloat v9 = a2.y * a2.y + a2.x * a2.x;
  CGFloat v10 = a3.y * a3.y + a3.x * a3.x;
  CGFloat v11 = a4.y * a4.y + a4.x * a4.x;
  CGFloat v12 = (v10 * v5 + v9 * v4 + v11 * v6) / v8;
  CGFloat v13 = (v10 * (a2.x - a4.x) + v9 * (a4.x - a3.x) + v11 * (a3.x - a2.x)) / v8;
  this[4] = v12;
  this[5] = v13;
  float v14 = a2.x - v12;
  float v15 = a2.y - v13;
  float v16 = sqrtf((float)(v15 * v15) + (float)(v14 * v14));
  *((float *)this + 18) = v16;
  *((float *)this + 19) = v16;
  int32x2_t result = vdup_n_s32(0x42280000u);
  this[11] = *(CGFloat *)&result;
  *((_DWORD *)this + 24) = 1109917696;
  *((_DWORD *)this + 20) = 0;
  return result;
}

uint64_t EllipseRegressor::confidenceLevelVersusBezierLine(void **this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_pointForStrokeIndex_pointIndex_(this[3], a2, 0, 0, a5, a6);
  float v7 = *((float *)this + 20) * 0.0174532925;
  double v9 = v8 - *((double *)this + 4);
  double v11 = v10 - *((double *)this + 5);
  double v12 = *((float *)this + 18);
  __float2 v13 = __sincosf_stret(v7);
  float v19 = atan2((v13.__cosval * v11 - v9 * v13.__sinval) * v12, (v9 * v13.__cosval + v13.__sinval * v11) * *((float *)this + 19));
  float v20 = -v19;
  float v21 = 0.0;
  if ((unint64_t)*this >= 2)
  {
    float v22 = 0.0;
    unint64_t v23 = 1;
    double v40 = -6.28318531;
    float v41 = 0.0;
    float v24 = v20;
    float v25 = v20;
    do
    {
      float v28 = v20;
      objc_msgSend_pointForStrokeIndex_pointIndex_(this[3], v14, 0, v23, v17, v18, *(void *)&v40);
      float v29 = *((float *)this + 20) * 0.0174532925;
      double v31 = v30 - *((double *)this + 4);
      double v33 = v32 - *((double *)this + 5);
      double v34 = *((float *)this + 18);
      __float2 v35 = __sincosf_stret(v29);
      float v36 = atan2((v35.__cosval * v33 - v31 * v35.__sinval) * v34, (v31 * v35.__cosval + v35.__sinval * v33) * *((float *)this + 19));
      float v20 = -v36;
      double v37 = v28;
      if (v28 <= 2.5 || v36 <= 2.5)
      {
        if (v28 >= -2.5 || v36 >= -2.5)
        {
          float v26 = v41;
          if (v28 >= v20) {
            float v26 = v41 + (float)(v28 + v36);
          }
          else {
            float v21 = v21 + (float)(v20 - v28);
          }
          float v41 = v26;
        }
        else
        {
          float v22 = v22 + v40;
          float v38 = v37 + 6.28318531 + v36 + v41;
          float v41 = v38;
        }
      }
      else
      {
        float v22 = v22 + 6.28318531;
        float v21 = v20 + 6.28318531 - v37;
      }
      float v27 = v22 - v36;
      if (v27 < v25) {
        float v25 = v27;
      }
      if (v24 < v27) {
        float v24 = v27;
      }
      ++v23;
    }
    while ((unint64_t)*this > v23);
  }
  objc_msgSend_bounds(this[3], v14, v15, v16, v17, v18);
  return cblas_sdot_NEWLAPACK();
}

unint64_t delaunator::Delaunator::add_triangle(delaunator::Delaunator *this, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  double v12 = (char *)*((void *)this + 1);
  double v10 = (char *)*((void *)this + 2);
  double v11 = (void **)((char *)this + 8);
  __float2 v13 = (char *)*((void *)this + 3);
  float v14 = v10;
  unint64_t v15 = (v10 - v12) >> 3;
  if (v10 < v13)
  {
    *(void *)double v10 = a2;
    uint64_t v16 = v10 + 8;
    goto LABEL_22;
  }
  unint64_t v17 = v15 + 1;
  if ((v15 + 1) >> 61) {
    goto LABEL_71;
  }
  uint64_t v18 = v13 - v12;
  if (v18 >> 2 > v17) {
    unint64_t v17 = v18 >> 2;
  }
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v19 = v17;
  }
  if (v19)
  {
    if (v19 >> 61) {
      goto LABEL_72;
    }
    float v20 = operator new(8 * v19);
    float v21 = &v20[8 * v15];
    __float2 v13 = &v20[8 * v19];
    *float v21 = a2;
    uint64_t v16 = (char *)(v21 + 1);
    int64_t v22 = v10 - v12;
    if (v10 == v12) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  float v20 = 0;
  float v21 = (void *)(8 * v15);
  __float2 v13 = 0;
  *(void *)(8 * v15) = a2;
  uint64_t v16 = (char *)(8 * v15 + 8);
  int64_t v22 = v10 - v12;
  if (v10 != v12)
  {
LABEL_14:
    unint64_t v23 = v22 - 8;
    if (v23 < 0x58) {
      goto LABEL_75;
    }
    if ((unint64_t)(v10 - &v20[(v10 - v12) & 0xFFFFFFFFFFFFFFF8]) < 0x20) {
      goto LABEL_75;
    }
    uint64_t v24 = (v23 >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    float v14 = &v10[-v25];
    float v21 = (void *)((char *)v21 - v25);
    float v26 = &v20[8 * v15 - 16];
    float v27 = (long long *)(v10 - 16);
    uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v29 = *v27;
      *(v26 - 1) = *(v27 - 1);
      *float v26 = v29;
      v26 -= 2;
      v27 -= 2;
      v28 -= 4;
    }
    while (v28);
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_75:
      do
      {
        uint64_t v30 = *((void *)v14 - 1);
        v14 -= 8;
        *--float v21 = v30;
      }
      while (v14 != v12);
    }
  }
LABEL_20:
  *((void *)this + 1) = v21;
  *((void *)this + 2) = v16;
  *((void *)this + 3) = v13;
  if (v12)
  {
    operator delete(v12);
    __float2 v13 = (char *)*((void *)this + 3);
  }
LABEL_22:
  *((void *)this + 2) = v16;
  if (v16 < v13)
  {
    *(void *)uint64_t v16 = a3;
    double v31 = v16 + 8;
    goto LABEL_45;
  }
  double v32 = (char *)*v11;
  uint64_t v33 = v16 - (unsigned char *)*v11;
  uint64_t v34 = v33 >> 3;
  unint64_t v35 = (v33 >> 3) + 1;
  if (v35 >> 61) {
    goto LABEL_71;
  }
  uint64_t v36 = v13 - v32;
  if (v36 >> 2 > v35) {
    unint64_t v35 = v36 >> 2;
  }
  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v37 = v35;
  }
  if (v37)
  {
    if (v37 >> 61) {
      goto LABEL_72;
    }
    float v38 = operator new(8 * v37);
    uint64_t v39 = &v38[8 * v34];
    __float2 v13 = &v38[8 * v37];
    *uint64_t v39 = a3;
    double v31 = (char *)(v39 + 1);
    int64_t v40 = v16 - v32;
    if (v16 == v32) {
      goto LABEL_43;
    }
  }
  else
  {
    float v38 = 0;
    uint64_t v39 = (void *)(8 * v34);
    __float2 v13 = 0;
    *(void *)(8 * v34) = a3;
    double v31 = (char *)(8 * v34 + 8);
    int64_t v40 = v16 - v32;
    if (v16 == v32) {
      goto LABEL_43;
    }
  }
  unint64_t v41 = v40 - 8;
  if (v41 < 0x58)
  {
    uint64_t v42 = v16;
    goto LABEL_42;
  }
  if ((unint64_t)(v16 - &v38[v33]) < 0x20)
  {
    uint64_t v42 = v16;
    do
    {
LABEL_42:
      uint64_t v49 = *((void *)v42 - 1);
      v42 -= 8;
      *--uint64_t v39 = v49;
    }
    while (v42 != v32);
    goto LABEL_43;
  }
  uint64_t v43 = (v41 >> 3) + 1;
  uint64_t v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v42 = &v16[-v44];
  uint64_t v39 = (void *)((char *)v39 - v44);
  uint64_t v45 = &v38[8 * v34 - 16];
  uint64_t v46 = v16 - 16;
  uint64_t v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v48 = *(_OWORD *)v46;
    *(v45 - 1) = *((_OWORD *)v46 - 1);
    *uint64_t v45 = v48;
    v45 -= 2;
    v46 -= 32;
    v47 -= 4;
  }
  while (v47);
  if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_42;
  }
LABEL_43:
  *((void *)this + 1) = v39;
  *((void *)this + 2) = v31;
  *((void *)this + 3) = v13;
  if (v32)
  {
    operator delete(v32);
    __float2 v13 = (char *)*((void *)this + 3);
  }
LABEL_45:
  *((void *)this + 2) = v31;
  if (v31 >= v13)
  {
    uint64_t v54 = (char *)*v11;
    uint64_t v55 = v31 - (unsigned char *)*v11;
    uint64_t v56 = v55 >> 3;
    unint64_t v57 = (v55 >> 3) + 1;
    if (!(v57 >> 61))
    {
      uint64_t v58 = v13 - v54;
      if (v58 >> 2 > v57) {
        unint64_t v57 = v58 >> 2;
      }
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v59 = v57;
      }
      if (!v59)
      {
        uint64_t v60 = 0;
LABEL_57:
        uint64_t v61 = &v60[8 * v56];
        long long v62 = &v60[8 * v59];
        *uint64_t v61 = a4;
        uint64_t v51 = v61 + 1;
        if (v31 == v54)
        {
          unint64_t v53 = a6;
          unint64_t v52 = a7;
          unint64_t v50 = a5;
          *((void *)this + 1) = v61;
          *((void *)this + 2) = v51;
          *((void *)this + 3) = v62;
          if (!v54) {
            goto LABEL_64;
          }
          goto LABEL_63;
        }
        unint64_t v63 = v31 - v54 - 8;
        if (v63 >= 0x58 && (unint64_t)(v31 - &v60[v55]) >= 0x20)
        {
          uint64_t v67 = (v63 >> 3) + 1;
          uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v64 = &v31[-v68];
          uint64_t v61 = (void *)((char *)v61 - v68);
          uint64_t v69 = &v60[8 * v56 - 16];
          uint64_t v70 = v31 - 16;
          uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v72 = *(_OWORD *)v70;
            *(v69 - 1) = *((_OWORD *)v70 - 1);
            *uint64_t v69 = v72;
            v69 -= 2;
            v70 -= 32;
            v71 -= 4;
          }
          while (v71);
          unint64_t v53 = a6;
          unint64_t v52 = a7;
          unint64_t v50 = a5;
          if (v67 == (v67 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_62:
            *((void *)this + 1) = v61;
            *((void *)this + 2) = v51;
            *((void *)this + 3) = v62;
            if (!v54) {
              goto LABEL_64;
            }
LABEL_63:
            operator delete(v54);
            goto LABEL_64;
          }
        }
        else
        {
          uint64_t v64 = v31;
          unint64_t v53 = a6;
          unint64_t v52 = a7;
          unint64_t v50 = a5;
        }
        do
        {
          uint64_t v65 = *((void *)v64 - 1);
          v64 -= 8;
          *--uint64_t v61 = v65;
        }
        while (v64 != v54);
        goto LABEL_62;
      }
      if (!(v59 >> 61))
      {
        uint64_t v60 = operator new(8 * v59);
        goto LABEL_57;
      }
LABEL_72:
      sub_1C4949AA8();
    }
LABEL_71:
    sub_1C494A220();
  }
  unint64_t v50 = a5;
  *(void *)double v31 = a4;
  uint64_t v51 = v31 + 8;
  unint64_t v53 = a6;
  unint64_t v52 = a7;
LABEL_64:
  *((void *)this + 2) = v51;
  delaunator::Delaunator::link(this, v15, v50);
  delaunator::Delaunator::link(this, v15 + 1, v53);
  delaunator::Delaunator::link(this, v15 + 2, v52);
  return v15;
}

unint64_t delaunator::Delaunator::legalize(uint64_t **this, unint64_t a2)
{
  unint64_t v4 = 0;
  unint64_t v53 = this + 23;
  this[24] = this[23];
  while (1)
  {
    unint64_t v5 = 3 * (a2 / 3);
    unint64_t v6 = v5 + (a2 + 2) % 3;
    unint64_t v54 = v6;
    unint64_t v55 = v5 + (a2 + 1) % 3;
    float v7 = this[4];
    unint64_t v8 = v7[a2];
    if (v8 != -1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = 3 * (v8 / 3);
          unint64_t v10 = v9 + (v8 + 2) % 3;
          double v11 = this[1];
          uint64_t v12 = v11[v6];
          uint64_t v13 = v11[v10];
          uint64_t v14 = **this;
          unint64_t v15 = (double *)(v14 + 16 * v12);
          uint64_t v16 = (double *)(v14 + 16 * v11[a2]);
          double v17 = *v16;
          double v18 = v16[1];
          unint64_t v19 = (double *)(v14 + 16 * v11[v55]);
          float v20 = (double *)(v14 + 16 * v13);
          double v21 = v20[1];
          double v22 = *v15 - *v20;
          double v23 = v17 - *v20;
          double v24 = v18 - v21;
          double v25 = *v19 - *v20;
          double v26 = v19[1] - v21;
          if (v22 * (v24 * (v26 * v26 + v25 * v25) - (v24 * v24 + v23 * v23) * v26)
             - (v15[1] - v21) * (v23 * (v26 * v26 + v25 * v25) - (v24 * v24 + v23 * v23) * v25)
             + ((v15[1] - v21) * (v15[1] - v21) + v22 * v22) * (v23 * v26 - v24 * v25) >= 0.0)
            goto LABEL_36;
          v11[a2] = v13;
          v11[v8] = v12;
          unint64_t v27 = v7[v10];
          if (v27 == -1)
          {
            uint64_t v28 = this[13];
            long long v29 = this[16];
            while (v28[(void)v29] != v10)
            {
              long long v29 = (uint64_t *)this[7][(void)v29];
              if (v29 == this[16]) {
                goto LABEL_12;
              }
            }
            v28[(void)v29] = a2;
LABEL_12:
            unint64_t v27 = -1;
          }
          delaunator::Delaunator::link((delaunator::Delaunator *)this, a2, v27);
          delaunator::Delaunator::link((delaunator::Delaunator *)this, v8, this[4][v6]);
          delaunator::Delaunator::link((delaunator::Delaunator *)this, v6, v9 + (v8 + 2) % 3);
          unint64_t v30 = v9 + (v8 + 1) % 3;
          double v31 = (char *)this[23];
          double v32 = (char *)this[24];
          unint64_t v33 = (v32 - v31) >> 3;
          if (v4 >= v33) {
            break;
          }
          *(void *)&v31[8 * v4++] = v30;
          float v7 = this[4];
          unint64_t v8 = v7[a2];
          if (v8 == -1) {
            goto LABEL_36;
          }
        }
        unint64_t v34 = (unint64_t)this[25];
        if ((unint64_t)v32 >= v34) {
          break;
        }
        *(void *)double v32 = v30;
        uint64_t v35 = (uint64_t)(v32 + 8);
LABEL_35:
        this[24] = (uint64_t *)v35;
        ++v4;
        float v7 = this[4];
        unint64_t v8 = v7[a2];
        if (v8 == -1) {
          goto LABEL_36;
        }
      }
      unint64_t v36 = v33 + 1;
      if ((v33 + 1) >> 61) {
        sub_1C494A220();
      }
      uint64_t v37 = v34 - (void)v31;
      if (v37 >> 2 > v36) {
        unint64_t v36 = v37 >> 2;
      }
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v36)
      {
        if (v36 >> 61) {
          sub_1C4949AA8();
        }
        unint64_t v38 = v36;
        uint64_t v39 = operator new(8 * v36);
        int64_t v40 = (unint64_t *)&v39[8 * v33];
        *int64_t v40 = v30;
        uint64_t v35 = (uint64_t)(v40 + 1);
        int64_t v41 = v32 - v31;
        if (v32 != v31)
        {
LABEL_24:
          unint64_t v42 = v41 - 8;
          unint64_t v43 = v38;
          if (v42 >= 0x58)
          {
            unint64_t v6 = v54;
            if ((unint64_t)(v31 - v39) >= 0x20)
            {
              uint64_t v44 = (v42 >> 3) + 1;
              uint64_t v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v46 = &v32[-v45];
              int64_t v40 = (unint64_t *)((char *)v40 - v45);
              uint64_t v47 = &v39[8 * v33 - 16];
              long long v48 = v32 - 16;
              uint64_t v49 = v44 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v50 = *(_OWORD *)v48;
                *(v47 - 1) = *((_OWORD *)v48 - 1);
                *uint64_t v47 = v50;
                v47 -= 2;
                v48 -= 32;
                v49 -= 4;
              }
              while (v49);
              double v32 = v46;
              if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_33:
                this[23] = (uint64_t *)v40;
                this[24] = (uint64_t *)v35;
                this[25] = (uint64_t *)&v39[8 * v43];
                if (v31) {
                  operator delete(v31);
                }
                goto LABEL_35;
              }
            }
          }
          else
          {
            unint64_t v6 = v54;
          }
          do
          {
            unint64_t v51 = *((void *)v32 - 1);
            v32 -= 8;
            *--int64_t v40 = v51;
          }
          while (v32 != v31);
          goto LABEL_33;
        }
      }
      else
      {
        unint64_t v38 = 0;
        uint64_t v39 = 0;
        int64_t v40 = (unint64_t *)(8 * v33);
        *(void *)(8 * v33) = v30;
        uint64_t v35 = 8 * v33 + 8;
        int64_t v41 = v32 - v31;
        if (v32 != v31) {
          goto LABEL_24;
        }
      }
      unint64_t v43 = v38;
      unint64_t v6 = v54;
      goto LABEL_33;
    }
LABEL_36:
    if (!v4) {
      return v6;
    }
    --v4;
    a2 = *(void *)(*v53 + 8 * v4);
  }
}

double delaunator::Delaunator::get_hull_area(uint64_t **this)
{
  float v2 = 0;
  CGFloat v3 = 0;
  unint64_t v4 = 0;
  unint64_t v5 = this[16];
  unint64_t v6 = v5;
  do
  {
    while (1)
    {
      uint64_t v7 = **this;
      unint64_t v8 = (double *)(v7 + 16 * (void)v6);
      unint64_t v9 = (double *)(v7 + 16 * this[7][(void)v6]);
      double v10 = (*v8 - *v9) * (v8[1] + v9[1]);
      if (v2 >= v4) {
        break;
      }
      *v2++ = v10;
      unint64_t v6 = (uint64_t *)this[10][(void)v6];
      if (v6 == v5) {
        goto LABEL_32;
      }
    }
    uint64_t v11 = v2 - v3;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61) {
      sub_1C494A220();
    }
    if (((char *)v4 - (char *)v3) >> 2 > v12) {
      unint64_t v12 = ((char *)v4 - (char *)v3) >> 2;
    }
    if ((unint64_t)((char *)v4 - (char *)v3) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      if (v13 >> 61) {
        sub_1C4949AA8();
      }
      uint64_t v14 = operator new(8 * v13);
      unint64_t v15 = (double *)&v14[8 * v11];
      *unint64_t v15 = v10;
      uint64_t v16 = (uint64_t)(v15 + 1);
      int64_t v17 = (char *)v2 - (char *)v3;
      if (v2 == v3) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v14 = 0;
      unint64_t v15 = (double *)(8 * v11);
      *(double *)(8 * v11) = v10;
      uint64_t v16 = 8 * v11 + 8;
      int64_t v17 = (char *)v2 - (char *)v3;
      if (v2 == v3) {
        goto LABEL_18;
      }
    }
    unint64_t v18 = v17 - 8;
    if (v18 < 0x168)
    {
      unint64_t v19 = v2;
      goto LABEL_17;
    }
    unint64_t v21 = ((char *)(v2 - 1) - (char *)v3) & 0xFFFFFFFFFFFFFFF8;
    if (&v14[(char *)v2 - (char *)v3 - 8 - v21] > &v14[(char *)v2 - (char *)v3 - 8])
    {
      unint64_t v19 = v2;
      do
      {
LABEL_17:
        uint64_t v20 = *((void *)v19-- - 1);
        *((void *)v15-- - 1) = v20;
      }
      while (v19 != v3);
      goto LABEL_18;
    }
    if ((double *)((char *)v2 - v21 - 8) > v2 - 1)
    {
      unint64_t v19 = v2;
      goto LABEL_17;
    }
    if ((unint64_t)((char *)v3 - v14) < 0x20)
    {
      unint64_t v19 = v2;
      goto LABEL_17;
    }
    uint64_t v22 = (v18 >> 3) + 1;
    uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v19 = &v2[v23 / 0xFFFFFFFFFFFFFFF8];
    unint64_t v15 = (double *)((char *)v15 - v23);
    double v24 = &v14[8 * v11 - 16];
    double v25 = v2 - 2;
    uint64_t v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *double v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_17;
    }
LABEL_18:
    unint64_t v4 = (double *)&v14[8 * v13];
    if (v3)
    {
      operator delete(v3);
      unint64_t v5 = this[16];
    }
    CGFloat v3 = v15;
    float v2 = (double *)v16;
    unint64_t v6 = (uint64_t *)this[10][(void)v6];
  }
  while (v6 != v5);
LABEL_32:
  uint64_t v28 = (char *)v2 - (char *)v3;
  if (v2 == v3)
  {
    double v39 = 0.0;
    if (v3) {
      goto LABEL_45;
    }
  }
  else
  {
    double v29 = *v3;
    double v30 = 0.0;
    if ((unint64_t)v28 < 9)
    {
      double v35 = *v3;
    }
    else
    {
      unint64_t v31 = v28 >> 3;
      if (v31 <= 2) {
        unint64_t v31 = 2;
      }
      unint64_t v32 = v31 - 1;
      unint64_t v33 = v3 + 1;
      do
      {
        double v34 = *v33++;
        double v35 = v29 + v34;
        double v36 = fabs(v29);
        double v37 = v34 + v29 - (v29 + v34);
        double v38 = v29 + v34 - (v29 + v34);
        if (v36 >= fabs(v34)) {
          double v38 = v37;
        }
        double v30 = v30 + v38;
        double v29 = v35;
        --v32;
      }
      while (v32);
    }
    double v39 = v35 + v30;
LABEL_45:
    operator delete(v3);
  }
  return v39;
}

void sub_1C4B478EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void delaunator::Delaunator::link(delaunator::Delaunator *this, unint64_t a2, unint64_t a3)
{
  uint64_t v7 = (char *)*((void *)this + 4);
  unint64_t v8 = (unint64_t *)*((void *)this + 5);
  unint64_t v6 = (void **)((char *)this + 32);
  unint64_t v9 = (char *)v8;
  unint64_t v10 = ((char *)v8 - v7) >> 3;
  if (v10 == a2)
  {
    unint64_t v11 = *((void *)this + 6);
    if ((unint64_t)v8 < v11)
    {
      *unint64_t v8 = a3;
      uint64_t v12 = (uint64_t)(v8 + 1);
      goto LABEL_27;
    }
    unint64_t v13 = a2 + 1;
    if ((a2 + 1) >> 61) {
      goto LABEL_52;
    }
    uint64_t v14 = v11 - (void)v7;
    if (v14 >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 61) {
        goto LABEL_53;
      }
      uint64_t v16 = (char *)operator new(8 * v15);
      int64_t v17 = (unint64_t *)&v16[8 * a2];
      unint64_t v18 = &v16[8 * v15];
      *int64_t v17 = a3;
      uint64_t v12 = (uint64_t)(v17 + 1);
      int64_t v19 = (char *)v8 - v7;
      if (v8 == (unint64_t *)v7) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v16 = 0;
      int64_t v17 = (unint64_t *)(8 * a2);
      unint64_t v18 = 0;
      *(void *)(8 * a2) = a3;
      uint64_t v12 = 8 * a2 + 8;
      int64_t v19 = (char *)v8 - v7;
      if (v8 == (unint64_t *)v7)
      {
LABEL_25:
        *((void *)this + 4) = v17;
        *((void *)this + 5) = v12;
        *((void *)this + 6) = v18;
        if (v7) {
          operator delete(v7);
        }
LABEL_27:
        *((void *)this + 5) = v12;
        unint64_t v9 = (char *)v12;
        if (a3 == -1) {
          return;
        }
        goto LABEL_28;
      }
    }
    unint64_t v20 = v19 - 8;
    if (v20 < 0x58) {
      goto LABEL_56;
    }
    unint64_t v21 = &v16[8 * a2];
    if ((unint64_t)((char *)v8 - v21) < 0x20) {
      goto LABEL_56;
    }
    uint64_t v22 = (v20 >> 3) + 1;
    uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v9 = (char *)&v8[v23 / 0xFFFFFFFFFFFFFFF8];
    int64_t v17 = (unint64_t *)((char *)v17 - v23);
    double v24 = v21 - 16;
    double v25 = v8 - 2;
    uint64_t v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *((_OWORD *)v24 - 1) = *((_OWORD *)v25 - 1);
      *(_OWORD *)double v24 = v27;
      v24 -= 32;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_56:
      do
      {
        unint64_t v28 = *((void *)v9 - 1);
        v9 -= 8;
        *--int64_t v17 = v28;
      }
      while (v9 != v7);
    }
    goto LABEL_25;
  }
  if (v10 <= a2) {
    goto LABEL_5;
  }
  *(void *)&v7[8 * a2] = a3;
  if (a3 == -1) {
    return;
  }
LABEL_28:
  double v29 = (char *)*v6;
  unint64_t v30 = (v9 - (unsigned char *)*v6) >> 3;
  if (v30 != a3)
  {
    if (v30 > a3)
    {
      *(void *)&v29[8 * a3] = a2;
      return;
    }
LABEL_5:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1C87861F0](exception, "Cannot link edge");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v31 = *((void *)this + 6);
  if ((unint64_t)v9 < v31)
  {
    *(void *)unint64_t v9 = a2;
    *((void *)this + 5) = v9 + 8;
    return;
  }
  unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
  if (a3 >= 0x1FFFFFFFFFFFFFFFLL) {
LABEL_52:
  }
    sub_1C494A220();
  uint64_t v33 = v31 - (void)v29;
  if (v33 >> 2 <= a3 + 1) {
    uint64_t v34 = a3 + 1;
  }
  else {
    uint64_t v34 = v33 >> 2;
  }
  if ((unint64_t)v33 < 0x7FFFFFFFFFFFFFF8) {
    unint64_t v32 = v34;
  }
  if (v32 >> 61) {
LABEL_53:
  }
    sub_1C4949AA8();
  uint64_t v35 = 8 * v32;
  double v36 = operator new(8 * v32);
  double v37 = (unint64_t *)&v36[8 * a3];
  double v38 = &v36[v35];
  unint64_t *v37 = a2;
  double v39 = v37 + 1;
  if (v9 == v29) {
    goto LABEL_49;
  }
  unint64_t v40 = v9 - v29 - 8;
  if (v40 < 0x58)
  {
    int64_t v41 = v9;
    goto LABEL_48;
  }
  if ((unint64_t)(&v9[-8 * a3] - v36) < 0x20)
  {
    int64_t v41 = v9;
    do
    {
LABEL_48:
      unint64_t v48 = *((void *)v41 - 1);
      v41 -= 8;
      *--double v37 = v48;
    }
    while (v41 != v29);
    goto LABEL_49;
  }
  uint64_t v42 = (v40 >> 3) + 1;
  uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
  int64_t v41 = &v9[-v43];
  double v37 = (unint64_t *)((char *)v37 - v43);
  uint64_t v44 = &v36[8 * a3 - 16];
  uint64_t v45 = v9 - 16;
  uint64_t v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v47 = *(_OWORD *)v45;
    *(v44 - 1) = *((_OWORD *)v45 - 1);
    *uint64_t v44 = v47;
    v44 -= 2;
    v45 -= 32;
    v46 -= 4;
  }
  while (v46);
  if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_48;
  }
LABEL_49:
  *((void *)this + 4) = v37;
  *((void *)this + 5) = v39;
  *((void *)this + 6) = v38;
  if (v29) {
    operator delete(v29);
  }
  *((void *)this + 5) = v39;
}

void sub_1C4B47C78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B47C8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B47CA0(double ***a1@<X0>, void *a2@<X8>)
{
  unint64_t v40 = 0;
  uint64_t v41 = 0;
  double v39 = &v40;
  float v2 = *a1;
  CGFloat v3 = a1[1];
  if (*a1 == v3)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      unint64_t v5 = *v2;
      unint64_t v6 = v2[1];
      while (v5 != v6)
      {
        double v7 = *v5;
        double v8 = v5[1];
        unint64_t v9 = &v40;
        unint64_t v10 = &v40;
        if (v40)
        {
          unint64_t v11 = v40;
          while (1)
          {
            unint64_t v10 = (double **)v11;
            double v12 = v11[4];
            if (v7 < v12) {
              goto LABEL_13;
            }
            if (v12 < v7)
            {
LABEL_18:
              unint64_t v11 = (double *)*((void *)v11 + 1);
              if (!v11)
              {
                unint64_t v9 = v10 + 1;
                break;
              }
            }
            else
            {
              double v13 = v11[5];
              if (v8 >= v13)
              {
                if (v13 >= v8) {
                  goto LABEL_9;
                }
                goto LABEL_18;
              }
LABEL_13:
              unint64_t v11 = *(double **)v11;
              unint64_t v9 = v10;
              if (!*v10) {
                break;
              }
            }
          }
        }
        uint64_t v14 = (double *)operator new(0x30uLL);
        v14[4] = v7;
        v14[5] = v8;
        *uint64_t v14 = 0.0;
        v14[1] = 0.0;
        *((void *)v14 + 2) = v10;
        *unint64_t v9 = v14;
        if (*v39)
        {
          double v39 = (double **)*v39;
          uint64_t v14 = *v9;
        }
        unint64_t v15 = v40;
        BOOL v16 = v14 == v40;
        *((unsigned char *)v14 + 24) = v14 == v40;
        if (!v16)
        {
          do
          {
            uint64_t v17 = *((void *)v14 + 2);
            if (*(unsigned char *)(v17 + 24)) {
              break;
            }
            unint64_t v18 = *(double **)(v17 + 16);
            uint64_t v19 = *(void *)v18;
            if (*(void *)v18 == v17)
            {
              uint64_t v22 = *((void *)v18 + 1);
              if (!v22 || (v23 = *(unsigned __int8 *)(v22 + 24), unint64_t v20 = (unsigned char *)(v22 + 24), v23))
              {
                if (*(double **)v17 == v14)
                {
                  *(unsigned char *)(v17 + 24) = 1;
                  *((unsigned char *)v18 + 24) = 0;
                  uint64_t v26 = *(void *)(v17 + 8);
                  *(void *)unint64_t v18 = v26;
                  if (v26) {
                    goto LABEL_37;
                  }
                }
                else
                {
                  double v24 = *(uint64_t **)(v17 + 8);
                  uint64_t v25 = *v24;
                  *(void *)(v17 + 8) = *v24;
                  if (v25)
                  {
                    *(void *)(v25 + 16) = v17;
                    unint64_t v18 = *(double **)(v17 + 16);
                  }
                  v24[2] = (uint64_t)v18;
                  *(void *)(*(void *)(v17 + 16) + 8 * (**(void **)(v17 + 16) != v17)) = v24;
                  *double v24 = v17;
                  *(void *)(v17 + 16) = v24;
                  unint64_t v18 = (double *)v24[2];
                  uint64_t v17 = *(void *)v18;
                  *((unsigned char *)v24 + 24) = 1;
                  *((unsigned char *)v18 + 24) = 0;
                  uint64_t v26 = *(void *)(v17 + 8);
                  *(void *)unint64_t v18 = v26;
                  if (v26) {
LABEL_37:
                  }
                    *(void *)(v26 + 16) = v18;
                }
                *(double *)(v17 + 16) = v18[2];
                *(void *)(*((void *)v18 + 2) + 8 * (**((void **)v18 + 2) != (void)v18)) = v17;
                *(void *)(v17 + 8) = v18;
LABEL_7:
                *((void *)v18 + 2) = v17;
                break;
              }
            }
            else if (!v19 || (v21 = *(unsigned __int8 *)(v19 + 24), unint64_t v20 = (unsigned char *)(v19 + 24), v21))
            {
              if (*(double **)v17 == v14)
              {
                uint64_t v28 = *((void *)v14 + 1);
                *(void *)uint64_t v17 = v28;
                if (v28)
                {
                  *(void *)(v28 + 16) = v17;
                  unint64_t v18 = *(double **)(v17 + 16);
                }
                *((void *)v14 + 2) = v18;
                *(void *)(*(void *)(v17 + 16) + 8 * (**(void **)(v17 + 16) != v17)) = v14;
                *((void *)v14 + 1) = v17;
                *(void *)(v17 + 16) = v14;
                unint64_t v18 = (double *)*((void *)v14 + 2);
                *((unsigned char *)v14 + 24) = 1;
                *((unsigned char *)v18 + 24) = 0;
                uint64_t v17 = *((void *)v18 + 1);
                long long v27 = *(double **)v17;
                v18[1] = *(double *)v17;
                if (!v27) {
                  goto LABEL_6;
                }
              }
              else
              {
                *(unsigned char *)(v17 + 24) = 1;
                *((unsigned char *)v18 + 24) = 0;
                uint64_t v17 = *((void *)v18 + 1);
                long long v27 = *(double **)v17;
                v18[1] = *(double *)v17;
                if (!v27) {
                  goto LABEL_6;
                }
              }
              *((void *)v27 + 2) = v18;
LABEL_6:
              *(double *)(v17 + 16) = v18[2];
              *(void *)(*((void *)v18 + 2) + 8 * (**((void **)v18 + 2) != (void)v18)) = v17;
              *(void *)uint64_t v17 = v18;
              goto LABEL_7;
            }
            *(unsigned char *)(v17 + 24) = 1;
            uint64_t v14 = v18;
            *((unsigned char *)v18 + 24) = v18 == v15;
            *unint64_t v20 = 1;
          }
          while (v18 != v15);
        }
        uint64_t v41 = ++v4;
LABEL_9:
        v5 += 2;
      }
      v2 += 3;
    }
    while (v2 != v3);
    double v29 = v39;
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    if (v39 != &v40)
    {
      unint64_t v30 = 0;
      unint64_t v31 = v39;
      do
      {
        unint64_t v32 = v30;
        uint64_t v33 = v31[1];
        if (v33)
        {
          do
          {
            uint64_t v34 = (double **)v33;
            uint64_t v33 = *(double **)v33;
          }
          while (v33);
        }
        else
        {
          do
          {
            uint64_t v34 = (double **)v31[2];
            BOOL v16 = *v34 == (double *)v31;
            unint64_t v31 = v34;
          }
          while (!v16);
        }
        ++v30;
        unint64_t v31 = v34;
      }
      while (v34 != &v40);
      if (v32 >= 0xFFFFFFFFFFFFFFFLL) {
        sub_1C494A220();
      }
      uint64_t v35 = operator new(16 * v30);
      *a2 = v35;
      a2[1] = v35;
      a2[2] = &v35[v30];
      do
      {
        _OWORD *v35 = *((_OWORD *)v29 + 2);
        double v36 = v29[1];
        if (v36)
        {
          do
          {
            double v37 = (double **)v36;
            double v36 = *(double **)v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            double v37 = (double **)v29[2];
            BOOL v16 = *v37 == (double *)v29;
            double v29 = v37;
          }
          while (!v16);
        }
        ++v35;
        double v29 = v37;
      }
      while (v37 != &v40);
      a2[1] = v35;
    }
  }
  sub_1C49A1374(v40);
}

void sub_1C4B4807C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  uint64_t v14 = *v13;
  if (*v13)
  {
    *(void *)(a11 + 8) = v14;
    operator delete(v14);
  }
  sub_1C49A1374(a13);
  _Unwind_Resume(a1);
}

void sub_1C4B480AC(_Unwind_Exception *a1)
{
  sub_1C49A1374(v1);
  _Unwind_Resume(a1);
}

void CoreHandwriting::getPointSet(unint64_t *a1@<X0>, double **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*a1)
  {
    unint64_t v4 = a1[1];
    if (v4)
    {
      unint64_t v5 = 0;
      unint64_t v6 = 0;
LABEL_4:
      unint64_t v7 = 0;
      char v8 = 0;
      double v9 = (double)(int)v6;
      int v10 = -1;
      do
      {
        if (*(unsigned char *)(a1[2] + v6 + *a1 * v7))
        {
          int v10 = v7;
          if ((v8 & ((-1227133513 * v7) > 0x24924924)) != 0)
          {
            char v8 = 1;
          }
          else
          {
            double v11 = (double)(int)v7;
            unint64_t v12 = (unint64_t)a2[2];
            if ((unint64_t)v5 >= v12)
            {
              uint64_t v14 = *a2;
              uint64_t v15 = ((char *)v5 - (char *)*a2) >> 4;
              unint64_t v16 = v15 + 1;
              if ((unint64_t)(v15 + 1) >> 60) {
                sub_1C494A220();
              }
              uint64_t v17 = v12 - (void)v14;
              if (v17 >> 3 > v16) {
                unint64_t v16 = v17 >> 3;
              }
              if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v18 = v16;
              }
              if (v18)
              {
                if (v18 >> 60) {
                  sub_1C4949AA8();
                }
                uint64_t v19 = (char *)operator new(16 * v18);
              }
              else
              {
                uint64_t v19 = 0;
              }
              unint64_t v20 = (double *)&v19[16 * v15];
              *unint64_t v20 = v9;
              v20[1] = v11;
              int v21 = v20;
              if (v5 != v14)
              {
                do
                {
                  *((_OWORD *)v21 - 1) = *((_OWORD *)v5 - 1);
                  v21 -= 2;
                  v5 -= 2;
                }
                while (v5 != v14);
                unint64_t v5 = *a2;
              }
              double v13 = v20 + 2;
              *a2 = v21;
              a2[1] = v20 + 2;
              a2[2] = (double *)&v19[16 * v18];
              if (v5) {
                operator delete(v5);
              }
            }
            else
            {
              *unint64_t v5 = v9;
              v5[1] = v11;
              double v13 = v5 + 2;
            }
            a2[1] = v13;
            unint64_t v4 = a1[1];
            char v8 = 1;
            unint64_t v5 = v13;
          }
        }
        ++v7;
      }
      while (v4 > v7);
      if (v10 != -1 && v10 % 7)
      {
        double v22 = (double)v10;
        unint64_t v23 = (unint64_t)a2[2];
        if ((unint64_t)v5 < v23)
        {
          *unint64_t v5 = v9;
          v5[1] = v22;
          double v24 = v5 + 2;
LABEL_42:
          a2[1] = v24;
          unint64_t v5 = v24;
          goto LABEL_43;
        }
        uint64_t v25 = *a2;
        uint64_t v26 = ((char *)v5 - (char *)*a2) >> 4;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 60) {
          sub_1C494A220();
        }
        uint64_t v28 = v23 - (void)v25;
        if (v28 >> 3 > v27) {
          unint64_t v27 = v28 >> 3;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          if (v29 >> 60) {
            sub_1C4949AA8();
          }
          unint64_t v30 = (char *)operator new(16 * v29);
          unint64_t v31 = (double *)&v30[16 * v26];
          *unint64_t v31 = v9;
          v31[1] = v22;
          uint64_t v32 = (uint64_t)v31;
          if (v5 == v25)
          {
LABEL_40:
            double v24 = v31 + 2;
            *a2 = (double *)v32;
            a2[1] = v31 + 2;
            a2[2] = (double *)&v30[16 * v29];
            if (!v5) {
              goto LABEL_42;
            }
LABEL_41:
            operator delete(v5);
            goto LABEL_42;
          }
        }
        else
        {
          unint64_t v30 = 0;
          unint64_t v31 = (double *)(16 * v26);
          *unint64_t v31 = v9;
          v31[1] = v22;
          uint64_t v32 = 16 * v26;
          if (v5 == v25) {
            goto LABEL_40;
          }
        }
        do
        {
          *(_OWORD *)(v32 - 16) = *((_OWORD *)v5 - 1);
          v32 -= 16;
          v5 -= 2;
        }
        while (v5 != v25);
        unint64_t v5 = *a2;
        double v24 = v31 + 2;
        *a2 = (double *)v32;
        a2[1] = v31 + 2;
        a2[2] = (double *)&v30[16 * v29];
        if (!v5) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }
LABEL_43:
      while (1)
      {
        v6 += 7;
        if (*a1 <= v6) {
          break;
        }
        unint64_t v4 = a1[1];
        if (v4) {
          goto LABEL_4;
        }
      }
    }
  }
}

void sub_1C4B483D0(_Unwind_Exception *exception_object)
{
  CGFloat v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::getPointSet(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v30 = 0;
  unint64_t v31 = &v30;
  uint64_t v32 = 0x4812000000;
  uint64_t v33 = sub_1C4B486AC;
  uint64_t v34 = sub_1C4B486D0;
  uint64_t v35 = &unk_1C4CB5C62;
  double v37 = 0;
  uint64_t v38 = 0;
  __p = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v2 = a1;
  uint64_t v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v26, (uint64_t)v39, 16, v4);
  if (v5)
  {
    uint64_t v6 = *(void *)v27;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v27 != v6) {
          objc_enumerationMutation(v2);
        }
        id v8 = *(id *)(*((void *)&v26 + 1) + 8 * i);
        unint64_t v14 = objc_msgSend_strokeAttributes(v8, v9, v10, v11, v12, v13);
        v25[0] = MEMORY[0x1E4F143A8];
        v25[1] = 3221225472;
        v25[2] = sub_1C4B486E8;
        v25[3] = &unk_1E64E18B8;
        v25[4] = &v30;
        objc_msgSend_enumeratePointsForStroke_interpolationType_resolution_usingBlock_(CHStrokeUtilities, v15, (uint64_t)v8, (v14 >> 2) & 1, 1, (uint64_t)v25);
      }
      uint64_t v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v16, (uint64_t)&v26, (uint64_t)v39, 16, v17);
    }
    while (v5);
  }

  unint64_t v18 = v31;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  unint64_t v20 = (unsigned char *)v18[6];
  uint64_t v19 = (unsigned char *)v18[7];
  int64_t v21 = v19 - v20;
  if (v19 != v20)
  {
    if (v21 < 0) {
      sub_1C494A220();
    }
    double v22 = (char *)operator new(v19 - v20);
    *a2 = v22;
    unint64_t v23 = &v22[16 * (v21 >> 4)];
    a2[2] = v23;
    memcpy(v22, v20, v21);
    a2[1] = v23;
  }
  _Block_object_dispose(&v30, 8);
  if (__p)
  {
    double v37 = __p;
    operator delete(__p);
  }
}

void sub_1C4B48638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  _Block_object_dispose(&a24, 8);
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 sub_1C4B486AC(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1C4B486D0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1C4B486E8(uint64_t a1, double a2, double a3)
{
  uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 8);
  unint64_t v7 = (double *)v5[7];
  unint64_t v6 = v5[8];
  if ((unint64_t)v7 < v6)
  {
    double *v7 = a2;
    v7[1] = a3;
    uint64_t v8 = (uint64_t)(v7 + 2);
    goto LABEL_18;
  }
  double v9 = (double *)v5[6];
  uint64_t v10 = ((char *)v7 - (char *)v9) >> 4;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60) {
    sub_1C494A220();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 60) {
      sub_1C4949AA8();
    }
    unint64_t v14 = (char *)operator new(16 * v13);
    uint64_t v15 = (double *)&v14[16 * v10];
    unint64_t v16 = &v14[16 * v13];
    *uint64_t v15 = a2;
    v15[1] = a3;
    uint64_t v8 = (uint64_t)(v15 + 2);
    if (v7 == v9) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  uint64_t v15 = (double *)(16 * v10);
  unint64_t v16 = 0;
  *uint64_t v15 = a2;
  v15[1] = a3;
  uint64_t v8 = 16 * v10 + 16;
  if (v7 != v9)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
      v15 -= 2;
      v7 -= 2;
    }
    while (v7 != v9);
    unint64_t v7 = (double *)v5[6];
  }
LABEL_16:
  v5[6] = v15;
  v5[7] = v8;
  v5[8] = v16;
  if (v7) {
    operator delete(v7);
  }
LABEL_18:
  v5[7] = v8;
}

void CoreHandwriting::getPointSetFromStrings(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  __p = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v3 = a1;
  unint64_t v6 = (unsigned char *)objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v28, (uint64_t)v37, 16, v5);
  if (v6)
  {
    long long v27 = a2;
    unint64_t v7 = 0;
    uint64_t v8 = *(void *)v29;
    double v9 = (double *)MEMORY[0x1E4F1DAD8];
    while (1)
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v29 != v8) {
          objc_enumerationMutation(v3);
        }
        parseFloatsFromString(*(NSString **)(*((void *)&v28 + 1) + 8 * i), (char **)&v35);
        if ((char *)v36 - (char *)v35 == 8)
        {
          double v13 = *v35;
          double v14 = v35[1];
        }
        else
        {
          double v13 = *v9;
          double v14 = v9[1];
          if (!v35) {
            goto LABEL_12;
          }
        }
        double v36 = v35;
        operator delete(v35);
LABEL_12:
        if (v7 < v34)
        {
          double *v7 = v13;
          v7[1] = v14;
          v7 += 2;
          goto LABEL_5;
        }
        uint64_t v15 = (double *)__p;
        uint64_t v16 = ((char *)v7 - (unsigned char *)__p) >> 4;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 60) {
          sub_1C494A220();
        }
        uint64_t v18 = (char *)v34 - (unsigned char *)__p;
        if (((char *)v34 - (unsigned char *)__p) >> 3 > v17) {
          unint64_t v17 = v18 >> 3;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          if (v19 >> 60) {
            sub_1C4949AA8();
          }
          unint64_t v20 = (char *)operator new(16 * v19);
          int64_t v21 = (double *)&v20[16 * v16];
          *int64_t v21 = v13;
          v21[1] = v14;
          if (v7 == v15)
          {
LABEL_27:
            unint64_t v23 = v7;
            unint64_t v7 = v21 + 2;
            __p = v21;
            uint64_t v33 = v21 + 2;
            uint64_t v34 = (double *)&v20[16 * v19];
            if (!v23) {
              goto LABEL_5;
            }
LABEL_28:
            operator delete(v23);
            goto LABEL_5;
          }
        }
        else
        {
          unint64_t v20 = 0;
          int64_t v21 = (double *)(16 * v16);
          *int64_t v21 = v13;
          v21[1] = v14;
          if (v7 == v15) {
            goto LABEL_27;
          }
        }
        double v22 = v21;
        do
        {
          *((_OWORD *)v22 - 1) = *((_OWORD *)v7 - 1);
          v22 -= 2;
          v7 -= 2;
        }
        while (v7 != v15);
        unint64_t v23 = __p;
        unint64_t v7 = v21 + 2;
        __p = v22;
        uint64_t v33 = v21 + 2;
        uint64_t v34 = (double *)&v20[16 * v19];
        if (v23) {
          goto LABEL_28;
        }
LABEL_5:
        uint64_t v33 = v7;
      }
      unint64_t v6 = (unsigned char *)objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v11, (uint64_t)&v28, (uint64_t)v37, 16, v12);
      if (!v6)
      {
        unint64_t v6 = __p;
        a2 = v27;
        goto LABEL_32;
      }
    }
  }
  unint64_t v7 = 0;
LABEL_32:

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int64_t v24 = (char *)v7 - v6;
  if (v24)
  {
    if (v24 < 0) {
      sub_1C494A220();
    }
    uint64_t v25 = (char *)operator new(v24);
    *a2 = v25;
    long long v26 = &v25[16 * (v24 >> 4)];
    a2[2] = v26;
    memcpy(v25, v6, v24);
    a2[1] = v26;
  }
  if (v6) {
    operator delete(v6);
  }
}

void sub_1C4B48ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C4B48B24(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>, long double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>, double a8@<D4>, double a9@<D5>, double a10@<D6>)
{
  id v17 = a1;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  double v81 = a9;
  double v18 = a7;
  double v19 = a7 - a9;
  double v20 = a10;
  double v21 = a8;
  double v79 = sqrt((a8 - a10) * (a8 - a10) + v19 * v19);
  double v27 = cos(a4);
  long long v28 = 0;
  unint64_t v29 = 0;
  id v83 = v17;
  while (v29 < objc_msgSend_count(v17, v22, v23, v24, v25, v26))
  {
    uint64_t v40 = objc_msgSend_objectAtIndexedSubscript_(v17, v31, v29, v32, v33, v34);
    uint64_t v43 = *a2 + 24 * v29;
    uint64_t v87 = 0;
    uint64_t v88 = 0;
    BOOL v86 = 0;
    uint64_t v45 = *(unsigned char **)v43;
    uint64_t v44 = *(unsigned char **)(v43 + 8);
    int64_t v46 = v44 - v45;
    if (v44 == v45)
    {
      long long v47 = 0;
      double v50 = -1.79769313e308;
      double v51 = 1.79769313e308;
    }
    else
    {
      if (v46 < 0) {
        sub_1C494A220();
      }
      long long v47 = (double *)operator new(v44 - v45);
      uint64_t v48 = 16 * (v46 >> 4);
      BOOL v86 = v47;
      uint64_t v88 = &v47[(unint64_t)v48 / 8];
      memcpy(v47, v45, v46);
      unint64_t v49 = 0;
      uint64_t v87 = &v47[(unint64_t)v48 / 8];
      double v50 = -1.79769313e308;
      double v51 = 1.79769313e308;
      double v41 = -1.79769313e308;
      double v42 = 1.79769313e308;
      do
      {
        double v52 = v47[v49 / 8];
        if (v42 > v52)
        {
          double v51 = v47[v49 / 8];
          double v42 = v51;
        }
        if (v41 < v52)
        {
          double v50 = v47[v49 / 8];
          double v41 = v50;
        }
        v49 += 16;
      }
      while (v48 != v49);
    }
    objc_msgSend_bounds(v40, v35, v36, v37, v38, v39, v41, v42);
    if (v58 <= a5)
    {
      objc_msgSend_bounds(v40, v53, v54, v55, v56, v57);
      if (v59 <= a6)
      {
        long long v30 = v28;
        if (!v47) {
          goto LABEL_4;
        }
LABEL_3:
        uint64_t v87 = v47;
        operator delete(v47);
        goto LABEL_4;
      }
    }
    long double v60 = tan(a4);
    sub_1C4B48FE8(&v86, (uint64_t *)&v84, -v60, v18, v21, v81, v20);
    uint64_t v61 = v84;
    if (v85 == v84)
    {
      uint64_t v61 = v85;
    }
    else
    {
      double v62 = 1.79769313e308;
      double v63 = -1.79769313e308;
      uint64_t v64 = v84;
      do
      {
        double v65 = *v64;
        v64 += 2;
        double v66 = v65;
        if (v62 > v65) {
          double v62 = v66;
        }
        if (v63 < v66) {
          double v63 = v66;
        }
      }
      while (v64 != v85);
      double v67 = (v63 - v62) / v27;
      if (v67 > 0.0 && (v67 / v79 >= 0.5 || v67 / ((v50 - v51) / v27) >= 0.8))
      {
        unint64_t v68 = 0;
        while (1)
        {
          uint64_t v69 = (char *)&v61[2 * v68];
          unint64_t v70 = a3[2];
          if ((unint64_t)v28 < v70)
          {
            *long long v28 = *(_OWORD *)v69;
            long long v30 = v28 + 1;
          }
          else
          {
            uint64_t v71 = (_OWORD *)*a3;
            uint64_t v72 = ((uint64_t)v28 - *a3) >> 4;
            unint64_t v73 = v72 + 1;
            if ((unint64_t)(v72 + 1) >> 60) {
              sub_1C494A220();
            }
            uint64_t v74 = v70 - (void)v71;
            if (v74 >> 3 > v73) {
              unint64_t v73 = v74 >> 3;
            }
            if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v75 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v75 = v73;
            }
            if (v75)
            {
              if (v75 >> 60) {
                sub_1C4949AA8();
              }
              uint64_t v76 = (char *)operator new(16 * v75);
              uint64_t v77 = &v76[16 * v72];
              *(_OWORD *)uint64_t v77 = *(_OWORD *)v69;
              uint64_t v78 = (uint64_t)v77;
              if (v28 != v71)
              {
                do
                {
LABEL_43:
                  *(_OWORD *)(v78 - 16) = *(v28 - 1);
                  v78 -= 16;
                  --v28;
                }
                while (v28 != v71);
                long long v28 = (_OWORD *)*a3;
                long long v30 = v77 + 16;
                *a3 = v78;
                a3[1] = (uint64_t)(v77 + 16);
                a3[2] = (uint64_t)&v76[16 * v75];
                if (!v28) {
                  goto LABEL_30;
                }
LABEL_47:
                operator delete(v28);
                goto LABEL_30;
              }
            }
            else
            {
              uint64_t v76 = 0;
              uint64_t v77 = (char *)(16 * v72);
              *(_OWORD *)(16 * v72) = *(_OWORD *)v69;
              uint64_t v78 = 16 * v72;
              if (v28 != v71) {
                goto LABEL_43;
              }
            }
            long long v30 = v77 + 16;
            *a3 = v78;
            a3[1] = (uint64_t)(v77 + 16);
            a3[2] = (uint64_t)&v76[16 * v75];
            if (v28) {
              goto LABEL_47;
            }
          }
LABEL_30:
          a3[1] = (uint64_t)v30;
          ++v68;
          uint64_t v61 = v84;
          long long v28 = v30;
          if (v68 >= ((char *)v85 - (char *)v84) >> 4) {
            goto LABEL_50;
          }
        }
      }
    }
    long long v30 = v28;
LABEL_50:
    if (v61)
    {
      uint64_t v85 = v61;
      operator delete(v61);
    }
    long long v47 = v86;
    if (v86) {
      goto LABEL_3;
    }
LABEL_4:

    ++v29;
    long long v28 = v30;
    id v17 = v83;
  }
}

void sub_1C4B48F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (v22) {
    operator delete(v22);
  }

  uint64_t v24 = *(void **)v20;
  if (*(void *)v20)
  {
    *(void *)(v20 + 8) = v24;
    operator delete(v24);
  }

  _Unwind_Resume(a1);
}

void sub_1C4B48FE8(double **a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a3 != 0.0)
  {
    uint64_t v24 = *a1;
    uint64_t v25 = a1[1];
    if (*a1 == v25) {
      return;
    }
    double v26 = -1.0 / a3;
    double v27 = a5 - -1.0 / a3 * a4;
    double v28 = a7 - -1.0 / a3 * a6;
    unint64_t v29 = 0;
    if (-1.0 / a3 <= 0.0)
    {
      while (1)
      {
        double v43 = v24[1];
        if (v43 < v27 + *v24 * v26 || v43 > v28 + *v24 * v26) {
          goto LABEL_55;
        }
        unint64_t v45 = a2[2];
        if ((unint64_t)v29 >= v45) {
          break;
        }
        *unint64_t v29 = *(_OWORD *)v24;
        double v42 = v29 + 1;
LABEL_54:
        a2[1] = (uint64_t)v42;
        unint64_t v29 = v42;
LABEL_55:
        v24 += 2;
        if (v24 == v25) {
          return;
        }
      }
      int64_t v46 = (_OWORD *)*a2;
      uint64_t v47 = ((uint64_t)v29 - *a2) >> 4;
      unint64_t v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 60) {
        goto LABEL_79;
      }
      uint64_t v49 = v45 - (void)v46;
      if (v49 >> 3 > v48) {
        unint64_t v48 = v49 >> 3;
      }
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v50 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v50 = v48;
      }
      if (v50)
      {
        if (v50 >> 60) {
          goto LABEL_80;
        }
        double v51 = (char *)operator new(16 * v50);
        double v52 = &v51[16 * v47];
        *(_OWORD *)double v52 = *(_OWORD *)v24;
        uint64_t v53 = (uint64_t)v52;
        if (v29 == v46)
        {
LABEL_70:
          double v42 = v52 + 16;
          *a2 = v53;
          a2[1] = (uint64_t)(v52 + 16);
          a2[2] = (uint64_t)&v51[16 * v50];
          if (!v29) {
            goto LABEL_54;
          }
          goto LABEL_75;
        }
      }
      else
      {
        double v51 = 0;
        double v52 = (char *)(16 * v47);
        *(_OWORD *)(16 * v47) = *(_OWORD *)v24;
        uint64_t v53 = 16 * v47;
        if (v29 == v46) {
          goto LABEL_70;
        }
      }
      do
      {
        *(_OWORD *)(v53 - 16) = *(v29 - 1);
        v53 -= 16;
        --v29;
      }
      while (v29 != v46);
      unint64_t v29 = (_OWORD *)*a2;
      double v42 = v52 + 16;
      *a2 = v53;
      a2[1] = (uint64_t)(v52 + 16);
      a2[2] = (uint64_t)&v51[16 * v50];
      if (!v29) {
        goto LABEL_54;
      }
LABEL_75:
      operator delete(v29);
      goto LABEL_54;
    }
    while (1)
    {
      double v31 = v24[1];
      if (v31 > v27 + *v24 * v26 || v31 < v28 + *v24 * v26) {
        goto LABEL_32;
      }
      unint64_t v33 = a2[2];
      if ((unint64_t)v29 >= v33) {
        break;
      }
      *unint64_t v29 = *(_OWORD *)v24;
      long long v30 = v29 + 1;
LABEL_31:
      a2[1] = (uint64_t)v30;
      unint64_t v29 = v30;
LABEL_32:
      v24 += 2;
      if (v24 == v25) {
        return;
      }
    }
    uint64_t v34 = (_OWORD *)*a2;
    uint64_t v35 = ((uint64_t)v29 - *a2) >> 4;
    unint64_t v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 60) {
LABEL_79:
    }
      sub_1C494A220();
    uint64_t v37 = v33 - (void)v34;
    if (v37 >> 3 > v36) {
      unint64_t v36 = v37 >> 3;
    }
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v38 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v38 = v36;
    }
    if (v38)
    {
      if (v38 >> 60) {
LABEL_80:
      }
        sub_1C4949AA8();
      uint64_t v39 = (char *)operator new(16 * v38);
      uint64_t v40 = &v39[16 * v35];
      *(_OWORD *)uint64_t v40 = *(_OWORD *)v24;
      uint64_t v41 = (uint64_t)v40;
      if (v29 == v34)
      {
LABEL_47:
        long long v30 = v40 + 16;
        *a2 = v41;
        a2[1] = (uint64_t)(v40 + 16);
        a2[2] = (uint64_t)&v39[16 * v38];
        if (!v29) {
          goto LABEL_31;
        }
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v39 = 0;
      uint64_t v40 = (char *)(16 * v35);
      *(_OWORD *)(16 * v35) = *(_OWORD *)v24;
      uint64_t v41 = 16 * v35;
      if (v29 == v34) {
        goto LABEL_47;
      }
    }
    do
    {
      *(_OWORD *)(v41 - 16) = *(v29 - 1);
      v41 -= 16;
      --v29;
    }
    while (v29 != v34);
    unint64_t v29 = (_OWORD *)*a2;
    long long v30 = v40 + 16;
    *a2 = v41;
    a2[1] = (uint64_t)(v40 + 16);
    a2[2] = (uint64_t)&v39[16 * v38];
    if (!v29) {
      goto LABEL_31;
    }
LABEL_52:
    operator delete(v29);
    goto LABEL_31;
  }
  uint64_t v10 = *a1;
  unint64_t v11 = a1[1];
  if (*a1 != v11)
  {
    uint64_t v12 = 0;
    while (1)
    {
      if (*v10 < a4 || *v10 > a6) {
        goto LABEL_6;
      }
      unint64_t v15 = a2[2];
      if ((unint64_t)v12 >= v15) {
        break;
      }
      *uint64_t v12 = *(_OWORD *)v10;
      double v13 = v12 + 1;
LABEL_5:
      a2[1] = (uint64_t)v13;
      uint64_t v12 = v13;
LABEL_6:
      v10 += 2;
      if (v10 == v11) {
        return;
      }
    }
    uint64_t v16 = (_OWORD *)*a2;
    uint64_t v17 = ((uint64_t)v12 - *a2) >> 4;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 60) {
      sub_1C494A220();
    }
    uint64_t v19 = v15 - (void)v16;
    if (v19 >> 3 > v18) {
      unint64_t v18 = v19 >> 3;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      if (v20 >> 60) {
        sub_1C4949AA8();
      }
      double v21 = (char *)operator new(16 * v20);
      double v22 = &v21[16 * v17];
      *(_OWORD *)double v22 = *(_OWORD *)v10;
      uint64_t v23 = (uint64_t)v22;
      if (v12 == v16)
      {
LABEL_21:
        double v13 = v22 + 16;
        *a2 = v23;
        a2[1] = (uint64_t)(v22 + 16);
        a2[2] = (uint64_t)&v21[16 * v20];
        if (!v12) {
          goto LABEL_5;
        }
        goto LABEL_26;
      }
    }
    else
    {
      double v21 = 0;
      double v22 = (char *)(16 * v17);
      *(_OWORD *)(16 * v17) = *(_OWORD *)v10;
      uint64_t v23 = 16 * v17;
      if (v12 == v16) {
        goto LABEL_21;
      }
    }
    do
    {
      *(_OWORD *)(v23 - 16) = *(v12 - 1);
      v23 -= 16;
      --v12;
    }
    while (v12 != v16);
    uint64_t v12 = (_OWORD *)*a2;
    double v13 = v22 + 16;
    *a2 = v23;
    a2[1] = (uint64_t)(v22 + 16);
    a2[2] = (uint64_t)&v21[16 * v20];
    if (!v12) {
      goto LABEL_5;
    }
LABEL_26:
    operator delete(v12);
    goto LABEL_5;
  }
}

void sub_1C4B493FC(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::deformImagePointsAndLines(CoreHandwriting *this@<X0>, double a2@<D0>, double a3@<D1>, double a4@<D2>, uint64_t a5@<X8>)
{
  double v9 = *(const void **)this;
  uint64_t v8 = *((void *)this + 1);
  if (v8 == *(void *)this || *((void *)this + 7) == *((void *)this + 6))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    long long v30 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C492D000, v30, OS_LOG_TYPE_ERROR, "Can't deform empty points and principal lines.", buf, 2u);
    }

    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    uint64_t v32 = *(const void **)this;
    uint64_t v31 = *((void *)this + 1);
    int64_t v33 = v31 - *(void *)this;
    if (v31 != *(void *)this)
    {
      if (v33 < 0) {
        sub_1C494A220();
      }
      uint64_t v34 = (char *)operator new(v31 - *(void *)this);
      *(void *)a5 = v34;
      *(void *)(a5 + 8) = v34;
      uint64_t v35 = &v34[16 * (v33 >> 4)];
      *(void *)(a5 + 16) = v35;
      memcpy(v34, v32, v33);
      *(void *)(a5 + 8) = v35;
    }
    sub_1C4AAA458((void *)(a5 + 24), (uint64_t)this + 24);
  }
  else
  {
    *(void *)(a5 + 112) = 0;
    *(_OWORD *)(a5 + 80) = 0u;
    *(_OWORD *)(a5 + 96) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
    uint64_t v80 = 0;
    double v81 = 0;
    uint64_t v82 = 0;
    int64_t v11 = v8 - (void)v9;
    if (v8 - (uint64_t)v9 < 0) {
      sub_1C494A220();
    }
    double v14 = (char *)operator new(v8 - (void)v9);
    unint64_t v15 = &v14[16 * (v11 >> 4)];
    uint64_t v80 = v14;
    uint64_t v82 = v15;
    memcpy(v14, v9, v11);
    double v81 = v15;
    sub_1C4AAA458(buf, (uint64_t)this + 24);
    if (a2 != 1.0)
    {
      __p = 0;
      unint64_t v70 = 0;
      uint64_t v71 = 0;
      uint64_t v16 = v80;
      uint64_t v17 = v81;
      if (v80 != v81)
      {
        unint64_t v18 = 0;
        while (1)
        {
          uint64_t v20 = *(void *)v16;
          double v21 = *((double *)v16 + 1) * a2;
          if (v18 < v71)
          {
            *(void *)unint64_t v18 = v20;
            *((double *)v18 + 1) = v21;
            uint64_t v19 = v18 + 16;
          }
          else
          {
            double v22 = (char *)__p;
            uint64_t v23 = (v18 - (unsigned char *)__p) >> 4;
            unint64_t v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 60) {
              sub_1C494A220();
            }
            uint64_t v25 = v71 - (unsigned char *)__p;
            if ((v71 - (unsigned char *)__p) >> 3 > v24) {
              unint64_t v24 = v25 >> 3;
            }
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v26 = v24;
            }
            if (v26)
            {
              if (v26 >> 60) {
                sub_1C4949AA8();
              }
              double v27 = (char *)operator new(16 * v26);
              uint64_t v28 = (uint64_t)&v27[16 * v23];
              *(void *)uint64_t v28 = v20;
              *(double *)(v28 + 8) = v21;
              unint64_t v29 = (char *)v28;
              if (v18 != v22)
              {
                do
                {
LABEL_21:
                  *((_OWORD *)v29 - 1) = *((_OWORD *)v18 - 1);
                  v29 -= 16;
                  v18 -= 16;
                }
                while (v18 != v22);
                unint64_t v18 = (char *)__p;
                uint64_t v19 = (char *)(v28 + 16);
                __p = v29;
                unint64_t v70 = (char *)(v28 + 16);
                uint64_t v71 = &v27[16 * v26];
                if (!v18) {
                  goto LABEL_8;
                }
LABEL_25:
                operator delete(v18);
                goto LABEL_8;
              }
            }
            else
            {
              double v27 = 0;
              uint64_t v28 = 16 * v23;
              *(void *)uint64_t v28 = v20;
              *(double *)(v28 + 8) = v21;
              unint64_t v29 = (char *)(16 * v23);
              if (v18 != v22) {
                goto LABEL_21;
              }
            }
            uint64_t v19 = (char *)(v28 + 16);
            __p = v29;
            unint64_t v70 = (char *)(v28 + 16);
            uint64_t v71 = &v27[16 * v26];
            if (v18) {
              goto LABEL_25;
            }
          }
LABEL_8:
          unint64_t v70 = v19;
          v16 += 16;
          unint64_t v18 = v19;
          if (v16 == v17) {
            goto LABEL_35;
          }
        }
      }
      uint64_t v19 = 0;
LABEL_35:
      sub_1C4AAA458(&v61, (uint64_t)buf);
      unint64_t v36 = (double *)v67;
      *((double *)v67 + 1) = *((double *)v67 + 1) * a2;
      v36[3] = v36[3] * a2;
      uint64_t v37 = (double *)v65;
      *((double *)v65 + 1) = *((double *)v65 + 1) * a2;
      v37[3] = v37[3] * a2;
      unint64_t v38 = (double *)v63;
      uint64_t v39 = (double *)v61;
      *((double *)v63 + 1) = *((double *)v63 + 1) * a2;
      v38[3] = v38[3] * a2;
      v39[1] = v39[1] * a2;
      v39[3] = v39[3] * a2;
      sub_1C49B7D84(&v80, (char *)__p, v19, (v19 - (unsigned char *)__p) >> 4);
      sub_1C49B7D84(buf, (char *)v61, v62, (v62 - (unsigned char *)v61) >> 4);
      sub_1C49B7D84(&v74, (char *)v63, v64, (v64 - (unsigned char *)v63) >> 4);
      sub_1C49B7D84(&v76, (char *)v65, v66, (v66 - (unsigned char *)v65) >> 4);
      sub_1C49B7D84(&v78, (char *)v67, v68, (v68 - (unsigned char *)v67) >> 4);
      if (v67)
      {
        unint64_t v68 = (char *)v67;
        operator delete(v67);
      }
      if (v65)
      {
        double v66 = (char *)v65;
        operator delete(v65);
      }
      if (v63)
      {
        uint64_t v64 = (char *)v63;
        operator delete(v63);
      }
      if (v61)
      {
        double v62 = (char *)v61;
        operator delete(v61);
      }
      if (__p) {
        operator delete(__p);
      }
    }
    if (a3 != 0.0 || a4 != 0.0)
    {
      __p = 0;
      unint64_t v70 = 0;
      uint64_t v71 = 0;
      sub_1C4AAA458(&v61, (uint64_t)buf);
      uint64_t v40 = v80;
      uint64_t v41 = v81;
      if (v80 != v81)
      {
        double v42 = 0;
        while (1)
        {
          double v43 = *((double *)v40 + 1);
          double v44 = *((double *)v76 + 1);
          if (v43 >= v44)
          {
            double v45 = *((double *)v74 + 1);
            if (v43 > v45) {
              double v43 = v43 + (v43 - v45) * a4;
            }
          }
          else
          {
            double v43 = v43 - (v44 - v43) * a3;
          }
          uint64_t v46 = *(void *)v40;
          if (v42 < (double *)v71)
          {
            *(void *)double v42 = v46;
            v42[1] = v43;
            v42 += 2;
          }
          else
          {
            uint64_t v47 = (double *)__p;
            uint64_t v48 = ((char *)v42 - (unsigned char *)__p) >> 4;
            unint64_t v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 60) {
              sub_1C494A220();
            }
            uint64_t v50 = v71 - (unsigned char *)__p;
            if ((v71 - (unsigned char *)__p) >> 3 > v49) {
              unint64_t v49 = v50 >> 3;
            }
            if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v51 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v51 = v49;
            }
            if (v51)
            {
              if (v51 >> 60) {
                sub_1C4949AA8();
              }
              double v52 = (char *)operator new(16 * v51);
              uint64_t v53 = (double *)&v52[16 * v48];
              *(void *)uint64_t v53 = v46;
              v53[1] = v43;
              if (v42 != v47)
              {
LABEL_65:
                uint64_t v54 = v53;
                do
                {
                  *((_OWORD *)v54 - 1) = *((_OWORD *)v42 - 1);
                  v54 -= 2;
                  v42 -= 2;
                }
                while (v42 != v47);
                uint64_t v55 = __p;
                double v42 = v53 + 2;
                __p = v54;
                unint64_t v70 = (char *)(v53 + 2);
                uint64_t v71 = &v52[16 * v51];
                if (!v55) {
                  goto LABEL_50;
                }
LABEL_71:
                operator delete(v55);
                goto LABEL_50;
              }
            }
            else
            {
              double v52 = 0;
              uint64_t v53 = (double *)(16 * v48);
              *(void *)uint64_t v53 = v46;
              v53[1] = v43;
              if (v42 != v47) {
                goto LABEL_65;
              }
            }
            uint64_t v55 = v42;
            double v42 = v53 + 2;
            __p = v53;
            unint64_t v70 = (char *)(v53 + 2);
            uint64_t v71 = &v52[16 * v51];
            if (v55) {
              goto LABEL_71;
            }
          }
LABEL_50:
          unint64_t v70 = (char *)v42;
          v40 += 16;
          if (v40 == v41)
          {
            uint64_t v56 = (char *)__p;
            goto LABEL_74;
          }
        }
      }
      double v42 = 0;
      uint64_t v56 = 0;
LABEL_74:
      uint64_t v57 = (double *)v67;
      double v58 = (double *)v65;
      *((double *)v67 + 1) = *((double *)v67 + 1) - (*((double *)v65 + 1) - *((double *)v67 + 1)) * a3;
      v57[3] = v57[3] - (v58[3] - v57[3]) * a3;
      double v59 = (double *)v61;
      long double v60 = (double *)v63;
      *((double *)v61 + 1) = *((double *)v61 + 1) + (*((double *)v61 + 1) - *((double *)v63 + 1)) * a4;
      v59[3] = v59[3] + (v59[3] - v60[3]) * a4;
      sub_1C49B7D84(&v80, v56, (char *)v42, ((char *)v42 - v56) >> 4);
      sub_1C49B7D84(buf, (char *)v61, v62, (v62 - (unsigned char *)v61) >> 4);
      sub_1C49B7D84(&v74, (char *)v63, v64, (v64 - (unsigned char *)v63) >> 4);
      sub_1C49B7D84(&v76, (char *)v65, v66, (v66 - (unsigned char *)v65) >> 4);
      sub_1C49B7D84(&v78, (char *)v67, v68, (v68 - (unsigned char *)v67) >> 4);
      if (v67)
      {
        unint64_t v68 = (char *)v67;
        operator delete(v67);
      }
      if (v65)
      {
        double v66 = (char *)v65;
        operator delete(v65);
      }
      if (v63)
      {
        uint64_t v64 = (char *)v63;
        operator delete(v63);
      }
      if (v61)
      {
        double v62 = (char *)v61;
        operator delete(v61);
      }
      if (__p) {
        operator delete(__p);
      }
    }
    if (&v80 != (char **)a5) {
      sub_1C49B7D84((void *)a5, v80, v81, (v81 - v80) >> 4);
    }
    if ((uint8_t *)(a5 + 24) != buf)
    {
      sub_1C49B7D84((void *)(a5 + 24), *(char **)buf, v73, (uint64_t)&v73[-*(void *)buf] >> 4);
      sub_1C49B7D84((void *)(a5 + 48), (char *)v74, v75, (v75 - (unsigned char *)v74) >> 4);
      sub_1C49B7D84((void *)(a5 + 72), (char *)v76, v77, (v77 - (unsigned char *)v76) >> 4);
      sub_1C49B7D84((void *)(a5 + 96), (char *)v78, v79, (v79 - (unsigned char *)v78) >> 4);
    }
    if (v78)
    {
      double v79 = (char *)v78;
      operator delete(v78);
    }
    if (v76)
    {
      uint64_t v77 = (char *)v76;
      operator delete(v76);
    }
    if (v74)
    {
      unint64_t v75 = (char *)v74;
      operator delete(v74);
    }
    if (*(void *)buf)
    {
      unint64_t v73 = *(char **)buf;
      operator delete(*(void **)buf);
    }
    if (v80)
    {
      double v81 = v80;
      operator delete(v80);
    }
  }
}

void sub_1C4B49BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  sub_1C4A2F114((uint64_t)&a25);
  uint64_t v28 = *(void **)(v26 - 152);
  if (v28)
  {
    *(void *)(v26 - 144) = v28;
    operator delete(v28);
  }
  sub_1C4AF4D20(v25);
  _Unwind_Resume(a1);
}

void sub_1C4B49C70(unint64_t a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v7 = a3 + 1;
  unint64_t v6 = a3[1];
  if (v6)
  {
    uint64_t v8 = (uint64_t *)(a3 + 1);
    double v9 = a3[1];
    do
    {
      unint64_t v10 = v9[4];
      if (v10 < a2)
      {
        ++v9;
      }
      else if (v10 <= a2)
      {
        if (v9[5] < a1) {
          ++v9;
        }
        else {
          uint64_t v8 = v9;
        }
      }
      else
      {
        uint64_t v8 = v9;
      }
      double v9 = (uint64_t *)*v9;
    }
    while (v9);
    if (v8 == (uint64_t *)v7 || (unint64_t v11 = v8[4], v11 > a2) || v11 >= a2 && v8[5] > a1)
    {
      uint64_t v12 = (uint64_t *)operator new(0x30uLL);
      double v13 = v12;
      v12[4] = a1;
      v12[5] = a2;
      while (1)
      {
        double v14 = v6;
        unint64_t v15 = v6[4];
        if (v15 > a1) {
          goto LABEL_16;
        }
        if (v15 < a1)
        {
LABEL_21:
          unint64_t v6 = (uint64_t *)v6[1];
          if (!v6)
          {
            unint64_t v7 = (uint64_t **)(v14 + 1);
            *uint64_t v12 = 0;
            v12[1] = 0;
            v12[2] = (uint64_t)v14;
            v14[1] = (uint64_t)v12;
            uint64_t v17 = (uint64_t *)**a3;
            if (v17) {
              goto LABEL_25;
            }
            goto LABEL_26;
          }
        }
        else
        {
          unint64_t v16 = v6[5];
          if (v16 <= a2)
          {
            if (v16 >= a2)
            {
              goto LABEL_34;
            }
            goto LABEL_21;
          }
LABEL_16:
          unint64_t v6 = (uint64_t *)*v6;
          if (!*v14)
          {
            unint64_t v7 = (uint64_t **)v14;
            *uint64_t v12 = 0;
            v12[1] = 0;
            v12[2] = (uint64_t)v14;
            *double v14 = (uint64_t)v12;
            uint64_t v17 = (uint64_t *)**a3;
            if (v17) {
              goto LABEL_25;
            }
            goto LABEL_26;
          }
        }
      }
    }
    unint64_t v18 = (uint64_t *)v8[1];
    if (v18)
    {
      do
      {
        uint64_t v19 = v18;
        unint64_t v18 = (uint64_t *)*v18;
      }
      while (v18);
    }
    else
    {
      uint64_t v20 = v8;
      do
      {
        uint64_t v19 = (uint64_t *)v20[2];
        BOOL v21 = *v19 == (void)v20;
        uint64_t v20 = v19;
      }
      while (!v21);
    }
    if (*a3 == v8) {
      *a3 = v19;
    }
    a3[2] = (uint64_t *)((char *)a3[2] - 1);
    sub_1C49A0D30(v6, v8);
    uint64_t v12 = v8;
LABEL_34:
    operator delete(v12);
  }
  else
  {
    double v13 = (uint64_t *)operator new(0x30uLL);
    v13[4] = a1;
    v13[5] = a2;
    *double v13 = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v7;
    double *v7 = v13;
    uint64_t v17 = (uint64_t *)**a3;
    if (v17)
    {
LABEL_25:
      *a3 = v17;
      double v13 = *v7;
    }
LABEL_26:
    sub_1C4949FD4(a3[1], v13);
    a3[2] = (uint64_t *)((char *)a3[2] + 1);
  }
}

long double CoreHandwriting::angle_deg(CoreHandwriting *this, const CGPoint *a2, const CGPoint *a3)
{
  return atan2(a2->y - *((double *)this + 1), a2->x - *(double *)this) * 57.2957795;
}

long double CoreHandwriting::angle_rad(CoreHandwriting *this, const CGPoint *a2, const CGPoint *a3)
{
  return atan2(a2->y - *((double *)this + 1), a2->x - *(double *)this);
}

double CoreHandwriting::clamp(CoreHandwriting *this, double a2, double a3, double a4)
{
  return fmin(a4, fmax(a2, a3));
}

double sub_1C4B49EEC(double **a1, double **a2)
{
  id v2 = *a1;
  id v3 = a1[1];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if ((char *)v3 - (char *)*a1 == (char *)v5 - (char *)*a2)
  {
    BOOL v6 = v2 == v3 || v4 == v5;
    unint64_t v7 = *a2;
    uint64_t v8 = *a1;
    if (v6)
    {
LABEL_7:
      if (v8 == v3 && v7 == v5) {
        return 0.0;
      }
    }
    else
    {
      uint64_t v8 = *a1;
      unint64_t v7 = *a2;
      while (*v8 == *v7 && v8[1] == v7[1])
      {
        v8 += 2;
        v7 += 2;
        if (v8 == v3 || v7 == v5) {
          goto LABEL_7;
        }
      }
    }
  }
  double v11 = *v2;
  double v10 = v2[1];
  double v12 = (v2[3] - v10) / (v2[2] - *v2);
  double v13 = v4[1];
  double v14 = (v4[3] - v13) / (v4[2] - *v4);
  double v15 = v13 - v14 * *v4;
  double v16 = *v2;
  if (v12 != 0.0) {
    double v16 = (v10 - -1.0 / v12 * v11 - v15) / (v14 - -1.0 / v12);
  }
  return sqrt((v10 - (v15 + v14 * v16)) * (v10 - (v15 + v14 * v16)) + (v11 - v16) * (v11 - v16));
}

double sub_1C4B49FD0(void *a1, double **a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = v2 - *a1;
  if (v2 != *a1)
  {
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
    uint64_t v6 = (uint64_t)(*a2 + 2);
    BOOL v9 = v5 != *a2 && (char *)v5 - (char *)*a2 == 32;
    BOOL v11 = v4 + 4 != v5 || v6 == (void)v5;
    unint64_t v12 = v3 >> 4;
    double v13 = (double *)(*a1 + 8);
    double result = 1.79769313e308;
    unint64_t v15 = 1;
    while (1)
    {
      double v18 = *(v13 - 1);
      double v19 = *v13;
      double v20 = v18 + 1.0;
      double v7 = ((*a2)[3] - (*a2)[1]) / ((*a2)[2] - **a2);
      double v21 = *v13 - v18 * v7 + (v18 + 1.0) * v7;
      if (v9)
      {
        double v23 = *v4;
        double v22 = v4[1];
        if (*v4 == v18 && v22 == v19 && v6 != (void)v5)
        {
          BOOL v26 = v4[2] != v20;
          if (v4[3] != v21) {
            BOOL v26 = 1;
          }
          double v16 = 0.0;
          if (!v26 && !v11) {
            goto LABEL_16;
          }
        }
      }
      else
      {
        double v23 = *v4;
        double v22 = v4[1];
      }
      double v27 = (v4[3] - v22) / (v4[2] - v23);
      double v28 = (v21 - v19) / (v20 - v18);
      double v29 = v19 - v28 * v18;
      double v30 = v23;
      if (v27 != 0.0) {
        double v30 = (v22 - -1.0 / v27 * v23 - v29) / (v28 - -1.0 / v27);
      }
      double v16 = sqrt((v22 - (v29 + v28 * v30)) * (v22 - (v29 + v28 * v30)) + (v23 - v30) * (v23 - v30));
LABEL_16:
      if (v16 < result) {
        double result = v16;
      }
      BOOL v17 = result < 1.0 || v15++ >= v12;
      v13 += 2;
      if (v17) {
        return result;
      }
    }
  }
  return 1.79769313e308;
}

void CoreHandwriting::filter_delaunay_edges_for_alphashape(uint64_t **a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (v4 != v5)
  {
    unint64_t v7 = 0;
    double v8 = 1.0 / a3;
    do
    {
      BOOL v9 = (unint64_t *)&v5[v7];
      unint64_t v10 = *v9;
      unint64_t v11 = v9[1];
      unint64_t v12 = v9[2];
      uint64_t v13 = **a1;
      double v14 = (double *)(v13 + 16 * v10);
      double v15 = *v14;
      double v16 = v14[1];
      BOOL v17 = (double *)(v13 + 16 * v11);
      double v18 = (double *)(v13 + 16 * v12);
      double v19 = *v17 - v15;
      double v20 = v17[1] - v16;
      double v21 = *v18 - v15;
      double v22 = v18[1] - v16;
      double v23 = v20 * v20 + v19 * v19;
      double v24 = v22 * v22 + v21 * v21;
      double v25 = v19 * v22 - v20 * v21;
      double v26 = (v22 * v23 - v20 * v24) * 0.5 / v25;
      double v27 = (v19 * v24 - v21 * v23) * 0.5 / v25;
      BOOL v30 = v24 <= 0.0 || v23 <= 0.0 || v25 == 0.0;
      double v31 = v27 * v27 + v26 * v26;
      if (v30) {
        double v31 = 1.79769313e308;
      }
      if (v31 < v8)
      {
        sub_1C4B49C70(v10, v11, (uint64_t **)a2);
        sub_1C4B49C70(v11, v12, (uint64_t **)a2);
        sub_1C4B49C70(v12, v10, (uint64_t **)a2);
        uint64_t v5 = a1[1];
        uint64_t v4 = a1[2];
      }
      v7 += 3;
    }
    while (v7 < v4 - v5);
  }
}

void sub_1C4B4A280(_Unwind_Exception *a1)
{
  sub_1C49A1374(*v1);
  _Unwind_Resume(a1);
}

void sub_1C4B4A294(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D4>)
{
  id v122 = a2;
  uint64_t v123 = a3;
  uint64_t v17 = *a1;
  uint64_t v16 = a1[1];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v18 = v16 - v17;
  if (v16 == v17)
  {
    if (a6 != 1.79769313e308)
    {
      uint64_t v139 = 0;
      uint64_t v140 = 0;
      uint64_t v141 = 0;
      v136 = 0;
      uint64_t v137 = 0;
      uint64_t v138 = 0;
      __p = 0;
      uint64_t v134 = 0;
      uint64_t v135 = 0;
      double v25 = v122;
      goto LABEL_91;
    }
    v27.f64[0] = 0.0;
    long double v29 = 0.0;
    double v25 = v122;
LABEL_24:
    double v30 = atan2(v29, v27.f64[0]);
    uint64_t v139 = 0;
    uint64_t v140 = 0;
    uint64_t v141 = 0;
    v136 = 0;
    uint64_t v137 = 0;
    uint64_t v138 = 0;
    __p = 0;
    uint64_t v134 = 0;
    uint64_t v135 = 0;
    if (v16 != v17)
    {
      a6 = v30;
      goto LABEL_26;
    }
LABEL_91:
    uint64_t v39 = 0;
    uint64_t v128 = 0;
    uint64_t v129 = 0;
    uint64_t v130 = 0;
    uint64_t v131 = 0;
    uint64_t v89 = __p;
    goto LABEL_95;
  }
  if (v18 < 0) {
    sub_1C494A220();
  }
  unint64_t v19 = v18 >> 4;
  unint64_t v20 = (unint64_t)((v18 >> 4) - 1) >> 6;
  double v21 = operator new(8 * (v20 + 1));
  double v22 = v21;
  v123[1] = v18 >> 4;
  v123[2] = v20 + 1;
  *uint64_t v123 = v21;
  if ((unint64_t)v18 >= 0x410) {
    unint64_t v23 = (unint64_t)((v18 >> 4) - 1) >> 6;
  }
  else {
    unint64_t v23 = 0;
  }
  v21[v23] = 0;
  if ((unint64_t)v18 >= 0x400) {
    memset(v21, 255, 8 * (v19 >> 6));
  }
  uint64_t v24 = ((unint64_t)v18 >> 4) & 0x3F;
  if (v24) {
    v22[v19 >> 6] |= 0xFFFFFFFFFFFFFFFFLL >> -(char)v24;
  }
  double v25 = v122;
  if (a6 == 1.79769313e308)
  {
    unint64_t v26 = 0;
    float64x2_t v27 = 0uLL;
    do
    {
      if (((*(void *)((char *)v22 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v26 & 0x3E)) & 1) != 0 && v19 > v26)
      {
        unint64_t v28 = v26;
        do
        {
          if ((*(void *)((char *)v22 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v28 & 0x3E))) {
            float64x2_t v27 = vaddq_f64(v27, vsubq_f64(*(float64x2_t *)(v17 + 16 * v28), *(float64x2_t *)(v17 + 16 * v26)));
          }
          v28 += 2;
        }
        while (v19 > v28);
      }
      v26 += 2;
    }
    while (v19 > v26);
    long double v29 = v27.f64[1];
    goto LABEL_24;
  }
  uint64_t v139 = 0;
  uint64_t v140 = 0;
  uint64_t v141 = 0;
  v136 = 0;
  uint64_t v137 = 0;
  uint64_t v138 = 0;
  __p = 0;
  uint64_t v134 = 0;
  uint64_t v135 = 0;
LABEL_26:
  double v31 = 0;
  unint64_t v32 = 0;
  double v33 = -a6;
  do
  {
    uint64_t v35 = (double *)(v17 + 16 * v32);
    double v125 = *v35 - a4;
    double v124 = v35[1] - a5;
    CGAffineTransformMakeRotation(&v132, v33);
    float64x2_t v36 = vaddq_f64(*(float64x2_t *)&v132.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v132.c, v124), *(float64x2_t *)&v132.a, v125));
    float64x2_t v126 = v36;
    if (v31 < v141)
    {
      *v31++ = v36;
      uint64_t v140 = v31;
      unint64_t v38 = v137;
      uint64_t v37 = v138;
      if (v137 < v138) {
        goto LABEL_31;
      }
      goto LABEL_48;
    }
    uint64_t v40 = v139;
    uint64_t v41 = v31 - v139;
    unint64_t v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 60) {
      sub_1C494A220();
    }
    uint64_t v43 = (char *)v141 - (char *)v139;
    if (((char *)v141 - (char *)v139) >> 3 > v42) {
      unint64_t v42 = v43 >> 3;
    }
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v44 = v42;
    }
    if (!v44)
    {
      double v45 = 0;
      uint64_t v46 = (float64x2_t *)(16 * v41);
      uint64_t v48 = (float64x2_t *)(16 * v41);
      *uint64_t v48 = v36;
      uint64_t v47 = v48 + 1;
      if (v31 == v40) {
        goto LABEL_45;
      }
      do
      {
LABEL_43:
        v46[-1] = v31[-1];
        --v46;
        --v31;
      }
      while (v31 != v40);
      double v31 = v139;
      goto LABEL_45;
    }
    if (v44 >> 60) {
      goto LABEL_146;
    }
    double v45 = (char *)operator new(16 * v44);
    float64x2_t v36 = v126;
    uint64_t v46 = (float64x2_t *)&v45[16 * v41];
    *uint64_t v46 = v126;
    uint64_t v47 = v46 + 1;
    if (v31 != v40) {
      goto LABEL_43;
    }
LABEL_45:
    uint64_t v139 = v46;
    uint64_t v140 = v47;
    uint64_t v141 = (float64x2_t *)&v45[16 * v44];
    if (v31)
    {
      operator delete(v31);
      float64x2_t v36 = v126;
    }
    double v31 = v47;
    uint64_t v140 = v47;
    unint64_t v38 = v137;
    uint64_t v37 = v138;
    if (v137 < v138)
    {
LABEL_31:
      *(float64_t *)unint64_t v38 = v36.f64[0];
      uint64_t v39 = v38 + 8;
      goto LABEL_67;
    }
LABEL_48:
    unint64_t v49 = v136;
    uint64_t v50 = (v38 - v136) >> 3;
    unint64_t v51 = v50 + 1;
    if ((unint64_t)(v50 + 1) >> 61) {
      goto LABEL_150;
    }
    uint64_t v52 = v37 - v136;
    if (v52 >> 2 > v51) {
      unint64_t v51 = v52 >> 2;
    }
    if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v53 = v51;
    }
    if (v53)
    {
      if (v53 >> 61) {
        goto LABEL_146;
      }
      uint64_t v54 = operator new(8 * v53);
      v36.f64[1] = v126.f64[1];
      uint64_t v55 = &v54[8 * v50];
      *(float64_t *)uint64_t v55 = v126.f64[0];
      uint64_t v39 = v55 + 8;
      int64_t v56 = v38 - v49;
      if (v38 == v49) {
        goto LABEL_65;
      }
LABEL_59:
      unint64_t v57 = v56 - 8;
      if (v57 < 0x58) {
        goto LABEL_157;
      }
      if ((unint64_t)(v49 - v54) < 0x20) {
        goto LABEL_157;
      }
      uint64_t v58 = (v57 >> 3) + 1;
      uint64_t v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
      long double v60 = &v38[-v59];
      v55 -= v59;
      uint64_t v61 = &v54[8 * v50 - 16];
      double v62 = v38 - 16;
      uint64_t v63 = v58 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v64 = *(_OWORD *)v62;
        *(v61 - 1) = *((_OWORD *)v62 - 1);
        *uint64_t v61 = v64;
        v61 -= 2;
        v62 -= 32;
        v63 -= 4;
      }
      while (v63);
      unint64_t v38 = v60;
      if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_157:
        do
        {
          uint64_t v65 = *((void *)v38 - 1);
          v38 -= 8;
          *((void *)v55 - 1) = v65;
          v55 -= 8;
        }
        while (v38 != v49);
      }
      goto LABEL_65;
    }
    uint64_t v54 = 0;
    uint64_t v55 = (char *)(8 * v50);
    *(float64_t *)(8 * v50) = v36.f64[0];
    uint64_t v39 = (char *)(8 * v50 + 8);
    int64_t v56 = v38 - v49;
    if (v38 != v49) {
      goto LABEL_59;
    }
LABEL_65:
    v136 = v55;
    uint64_t v138 = &v54[8 * v53];
    if (v49)
    {
      operator delete(v49);
      v36.f64[1] = v126.f64[1];
    }
LABEL_67:
    uint64_t v137 = v39;
    double v66 = v134;
    if (v134 < v135)
    {
      *(float64_t *)uint64_t v134 = v36.f64[1];
      uint64_t v34 = v66 + 8;
      goto LABEL_28;
    }
    double v67 = (char *)__p;
    int64_t v68 = v134 - (unsigned char *)__p;
    uint64_t v69 = (v134 - (unsigned char *)__p) >> 3;
    unint64_t v70 = v69 + 1;
    if ((unint64_t)(v69 + 1) >> 61) {
LABEL_150:
    }
      sub_1C494A220();
    uint64_t v71 = v135 - (unsigned char *)__p;
    if ((v135 - (unsigned char *)__p) >> 2 > v70) {
      unint64_t v70 = v71 >> 2;
    }
    if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v72 = v70;
    }
    if (v72)
    {
      if (v72 >> 61) {
LABEL_146:
      }
        sub_1C4949AA8();
      unint64_t v73 = (char *)operator new(8 * v72);
      uint64_t v74 = &v73[8 * v69];
      *(float64_t *)uint64_t v74 = v126.f64[1];
      uint64_t v34 = v74 + 8;
      int64_t v75 = v66 - v67;
      if (v66 == v67) {
        goto LABEL_85;
      }
LABEL_79:
      unint64_t v76 = v75 - 8;
      if (v76 < 0x58) {
        goto LABEL_158;
      }
      if ((unint64_t)(v66 - v73 - v68) < 0x20) {
        goto LABEL_158;
      }
      uint64_t v77 = (v76 >> 3) + 1;
      uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
      double v79 = &v66[-v78];
      v74 -= v78;
      uint64_t v80 = &v73[8 * v69 - 16];
      double v81 = v66 - 16;
      uint64_t v82 = v77 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v83 = *(_OWORD *)v81;
        *((_OWORD *)v80 - 1) = *((_OWORD *)v81 - 1);
        *(_OWORD *)uint64_t v80 = v83;
        v80 -= 32;
        v81 -= 32;
        v82 -= 4;
      }
      while (v82);
      double v66 = v79;
      if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_158:
        do
        {
          uint64_t v84 = *((void *)v66 - 1);
          v66 -= 8;
          *((void *)v74 - 1) = v84;
          v74 -= 8;
        }
        while (v66 != v67);
      }
      goto LABEL_85;
    }
    unint64_t v73 = 0;
    uint64_t v74 = (char *)(8 * v69);
    *(float64_t *)(8 * v69) = v36.f64[1];
    uint64_t v34 = (char *)(8 * v69 + 8);
    int64_t v75 = v66 - v67;
    if (v66 != v67) {
      goto LABEL_79;
    }
LABEL_85:
    __p = v74;
    uint64_t v135 = &v73[8 * v72];
    if (v67) {
      operator delete(v67);
    }
LABEL_28:
    uint64_t v134 = v34;
    ++v32;
    uint64_t v17 = *a1;
  }
  while (v32 < (a1[1] - *a1) >> 4);
  uint64_t v85 = v136;
  uint64_t v129 = 0;
  uint64_t v128 = 0;
  uint64_t v86 = v39 - v136;
  if (v39 == v136)
  {
    double v25 = v122;
    uint64_t v130 = 0;
    uint64_t v131 = 0;
    uint64_t v89 = __p;
    int64_t v90 = v34 - (unsigned char *)__p;
    if (v34 == __p) {
      goto LABEL_95;
    }
    goto LABEL_93;
  }
  double v25 = v122;
  if (v86 < 0) {
    sub_1C494A220();
  }
  uint64_t v87 = (double *)operator new(v39 - v136);
  uint64_t v88 = (char *)&v87[v86 >> 3];
  uint64_t v128 = v87;
  memcpy(v87, v85, v39 - v85);
  uint64_t v129 = (double *)v88;
  uint64_t v39 = v85;
  uint64_t v130 = 0;
  uint64_t v131 = 0;
  uint64_t v89 = __p;
  int64_t v90 = v34 - (unsigned char *)__p;
  if (v34 != __p)
  {
LABEL_93:
    if (v90 < 0) {
      sub_1C494A220();
    }
    uint64_t v91 = (double *)operator new(v90);
    int v92 = (char *)&v91[v90 >> 3];
    uint64_t v130 = v91;
    memcpy(v91, v89, v90);
    uint64_t v131 = (double *)v92;
  }
LABEL_95:
  if (v89) {
    operator delete(v89);
  }
  if (v39)
  {
    uint64_t v137 = v39;
    operator delete(v39);
  }
  if (v139) {
    operator delete(v139);
  }
  uint64_t v93 = (char *)v129 - (char *)v128;
  if (v129 == v128)
  {
    double v103 = 0.0;
  }
  else
  {
    unint64_t v94 = 0;
    int v95 = 0;
    uint64_t v96 = v93 >> 3;
    if ((unint64_t)(v93 >> 3) <= 1) {
      uint64_t v96 = 1;
    }
    double v97 = 0.0;
    double v98 = 0.0;
    double v99 = 0.0;
    do
    {
      if ((*(void *)(*v123 + ((v94 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v94))
      {
        double v100 = v128[v94];
        double v97 = v97 + v130[v94];
        BOOL v101 = v100 < v99;
        BOOL v102 = v100 > v98;
        if (!v95)
        {
          BOOL v101 = 1;
          BOOL v102 = 1;
        }
        if (v101) {
          double v99 = v128[v94];
        }
        if (v102) {
          double v98 = v128[v94];
        }
        ++v95;
      }
      ++v94;
    }
    while (v96 != v94);
    double v103 = v98 - v99;
    if (v95)
    {
      double v104 = v97 / (double)v95;
      goto LABEL_118;
    }
  }
  double v104 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
LABEL_118:
  if (objc_msgSend_length(v25, v11, v12, v13, v14, v15, v122))
  {
    double v110 = v103 / (double)(unint64_t)objc_msgSend_length(v25, v105, v106, v107, v108, v109) * 1.1;
    uint64_t v127 = 0;
    uint64_t v111 = v130;
    size_t v112 = (char *)v131 - (char *)v130;
    if (v131 != v130) {
      goto LABEL_120;
    }
LABEL_124:
    uint64_t v113 = 0;
    memset(&v132, 0, 24);
    if (a1[1] != *a1) {
      goto LABEL_125;
    }
  }
  else
  {
    double v110 = 0.0;
    uint64_t v127 = 0;
    uint64_t v111 = v130;
    size_t v112 = (char *)v131 - (char *)v130;
    if (v131 == v130) {
      goto LABEL_124;
    }
LABEL_120:
    if ((v112 & 0x8000000000000000) != 0) {
      sub_1C494A220();
    }
    uint64_t v113 = (double *)operator new(v112);
    uint64_t v127 = v113;
    memcpy(v113, v111, v112);
    memset(&v132, 0, 24);
    if (a1[1] != *a1)
    {
LABEL_125:
      CGFloat a = 0.0;
      unint64_t v115 = 0;
      do
      {
        while (1)
        {
          double v116 = v127[v115];
          CGFloat b = v132.b;
          if (*(void *)&v132.b == *(void *)&v132.c << 6)
          {
            if (*(void *)&v132.b + 1 < 0) {
              sub_1C494A220();
            }
            unint64_t v118 = *(void *)&v132.c << 7;
            if (*(void *)&v132.c << 7 <= (*(void *)&v132.b & 0xFFFFFFFFFFFFFFC0) + 64) {
              unint64_t v118 = (*(void *)&v132.b & 0xFFFFFFFFFFFFFFC0) + 64;
            }
            if (*(void *)&v132.b <= 0x3FFFFFFFFFFFFFFEuLL) {
              unint64_t v119 = v118;
            }
            else {
              unint64_t v119 = 0x7FFFFFFFFFFFFFFFLL;
            }
            sub_1C49B61EC((uint64_t)&v132, v119);
            CGFloat a = v132.a;
            CGFloat b = v132.b;
          }
          *(void *)&v132.CGFloat b = *(void *)&b + 1;
          uint64_t v120 = *(void *)&b >> 6;
          uint64_t v121 = 1 << SLOBYTE(b);
          if (vabdd_f64(v116, v104) < v110) {
            break;
          }
          *(void *)(*(void *)&a + 8 * v120) &= ~v121;
          if (++v115 >= (a1[1] - *a1) >> 4) {
            goto LABEL_137;
          }
        }
        *(void *)(*(void *)&a + 8 * v120) |= v121;
        ++v115;
      }
      while (v115 < (a1[1] - *a1) >> 4);
    }
  }
LABEL_137:
  if (*v123)
  {
    operator delete((void *)*v123);
    *uint64_t v123 = 0;
    v123[1] = 0;
    v123[2] = 0;
  }
  *uint64_t v123 = *(void *)&v132.a;
  *(_OWORD *)(v123 + 1) = *(_OWORD *)&v132.b;
  memset(&v132, 0, 24);
  if (v113) {
    operator delete(v113);
  }
  if (v130) {
    operator delete(v130);
  }
  if (v128) {
    operator delete(v128);
  }
}

void sub_1C4B4AC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v34 = a31;
    if (!a31)
    {
LABEL_3:
      uint64_t v35 = *(void **)(v32 - 168);
      if (!v35) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v34 = a31;
    if (!a31) {
      goto LABEL_3;
    }
  }
  operator delete(v34);
  uint64_t v35 = *(void **)(v32 - 168);
  if (!v35)
  {
LABEL_4:
    float64x2_t v36 = *(void **)(v32 - 144);
    if (!v36) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  *(void *)(v32 - 160) = v35;
  operator delete(v35);
  float64x2_t v36 = *(void **)(v32 - 144);
  if (!v36)
  {
LABEL_5:
    uint64_t v37 = *a10;
    if (!*a10) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  *(void *)(v32 - 136) = v36;
  operator delete(v36);
  uint64_t v37 = *a10;
  if (!*a10)
  {
LABEL_6:

    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(v37);

  _Unwind_Resume(a1);
}

void sub_1C4B4AD64(char **a1@<X0>, double **a2@<X8>, double a3@<D0>)
{
  uint64_t v417 = *MEMORY[0x1E4F143B8];
  v396 = 0;
  v397 = 0;
  unint64_t v398 = 0;
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = v3 - *a1;
  if (v3 != *a1)
  {
    if (v5 < 0) {
      sub_1C494A220();
    }
    uint64_t v6 = operator new(v3 - v4);
    unint64_t v7 = (unint64_t)&v6[v5 >> 3];
    v396 = v6;
    v397 = v6;
    unint64_t v398 = v7;
    uint64_t v5 = (uint64_t)v6;
    while (1)
    {
      while ((unint64_t)v6 < v7)
      {
        *uint64_t v6 = *(void *)v4;
        double v8 = v6 + 1;
        v397 = v6 + 1;
        if ((unint64_t)(v6 + 1) >= v7) {
          goto LABEL_25;
        }
LABEL_4:
        *double v8 = *((void *)v4 + 1);
        uint64_t v6 = v8 + 1;
        v397 = v8 + 1;
        v4 += 16;
        if (v4 == v3) {
          goto LABEL_64;
        }
      }
      uint64_t v9 = ((uint64_t)v6 - v5) >> 3;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61) {
        goto LABEL_514;
      }
      if ((uint64_t)(v7 - v5) >> 2 > v10) {
        unint64_t v10 = (uint64_t)(v7 - v5) >> 2;
      }
      if (v7 - v5 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11)
      {
        if (v11 >> 61) {
          goto LABEL_516;
        }
        uint64_t v12 = (char *)operator new(8 * v11);
        uint64_t v13 = &v12[8 * v9];
        *(void *)uint64_t v13 = *(void *)v4;
        double v8 = v13 + 8;
        uint64_t v14 = (char *)v6 - v5;
        if (v6 == (void *)v5) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v13 = (char *)(8 * v9);
        *(void *)(8 * v9) = *(void *)v4;
        double v8 = (void *)(8 * v9 + 8);
        uint64_t v14 = (char *)v6 - v5;
        if (v6 == (void *)v5) {
          goto LABEL_22;
        }
      }
      unint64_t v15 = (unint64_t)(v14 - 8);
      if (v15 < 0x168)
      {
        uint64_t v16 = v6;
        goto LABEL_21;
      }
      unint64_t v27 = ((unint64_t)v6 - v5 - 8) & 0xFFFFFFFFFFFFFFF8;
      if ((char *)v6 + (void)v12 - v5 - v27 - 8 > (char *)v6 + (void)v12 - v5 - 8)
      {
        uint64_t v16 = v6;
        do
        {
LABEL_21:
          uint64_t v17 = *--v16;
          *((void *)v13 - 1) = v17;
          v13 -= 8;
        }
        while (v16 != (void *)v5);
        goto LABEL_22;
      }
      if ((void *)((char *)v6 - v27 - 8) > v6 - 1)
      {
        uint64_t v16 = v6;
        goto LABEL_21;
      }
      if ((unint64_t)(v5 - (void)v12) < 0x20)
      {
        uint64_t v16 = v6;
        goto LABEL_21;
      }
      uint64_t v29 = (v15 >> 3) + 1;
      uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v16 = &v6[v30 / 0xFFFFFFFFFFFFFFF8];
      v13 -= v30;
      double v31 = &v12[8 * v9 - 16];
      uint64_t v32 = (long long *)(v6 - 2);
      uint64_t v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v34 = *v32;
        *((_OWORD *)v31 - 1) = *(v32 - 1);
        *(_OWORD *)double v31 = v34;
        v31 -= 32;
        v32 -= 2;
        v33 -= 4;
      }
      while (v33);
      if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_21;
      }
LABEL_22:
      unint64_t v7 = (unint64_t)&v12[8 * v11];
      v396 = v13;
      unint64_t v398 = v7;
      if (v5) {
        operator delete((void *)v5);
      }
      uint64_t v5 = (uint64_t)v13;
      v397 = v8;
      if ((unint64_t)v8 < v7) {
        goto LABEL_4;
      }
LABEL_25:
      uint64_t v18 = ((uint64_t)v8 - v5) >> 3;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 61) {
LABEL_514:
      }
        sub_1C494A220();
      if ((uint64_t)(v7 - v5) >> 2 > v19) {
        unint64_t v19 = (uint64_t)(v7 - v5) >> 2;
      }
      if (v7 - v5 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v19;
      }
      if (v20)
      {
        if (v20 >> 61) {
LABEL_516:
        }
          sub_1C4949AA8();
        double v21 = (char *)operator new(8 * v20);
        double v22 = &v21[8 * v18];
        *(void *)double v22 = *((void *)v4 + 1);
        uint64_t v6 = v22 + 8;
        unint64_t v23 = (char *)v8 - v5;
        if (v8 == (void *)v5) {
          goto LABEL_39;
        }
      }
      else
      {
        double v21 = 0;
        double v22 = (char *)(8 * v18);
        *(void *)(8 * v18) = *((void *)v4 + 1);
        uint64_t v6 = (void *)(8 * v18 + 8);
        unint64_t v23 = (char *)v8 - v5;
        if (v8 == (void *)v5) {
          goto LABEL_39;
        }
      }
      unint64_t v24 = (unint64_t)(v23 - 8);
      if (v24 >= 0x168)
      {
        unint64_t v28 = ((unint64_t)v8 - v5 - 8) & 0xFFFFFFFFFFFFFFF8;
        if ((char *)v8 + (void)v21 - v5 - v28 - 8 > (char *)v8 + (void)v21 - v5 - 8)
        {
          double v25 = v8;
        }
        else if ((void *)((char *)v8 - v28 - 8) > v8 - 1)
        {
          double v25 = v8;
        }
        else if ((unint64_t)(v5 - (void)v21) >= 0x20)
        {
          uint64_t v35 = (v24 >> 3) + 1;
          uint64_t v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
          double v25 = &v8[v36 / 0xFFFFFFFFFFFFFFF8];
          v22 -= v36;
          uint64_t v37 = &v21[8 * v18 - 16];
          unint64_t v38 = (long long *)(v8 - 2);
          uint64_t v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v40 = *v38;
            *((_OWORD *)v37 - 1) = *(v38 - 1);
            *(_OWORD *)uint64_t v37 = v40;
            v37 -= 32;
            v38 -= 2;
            v39 -= 4;
          }
          while (v39);
          if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_39;
          }
        }
        else
        {
          double v25 = v8;
        }
      }
      else
      {
        double v25 = v8;
      }
      do
      {
        uint64_t v26 = *--v25;
        *((void *)v22 - 1) = v26;
        v22 -= 8;
      }
      while (v25 != (void *)v5);
LABEL_39:
      unint64_t v7 = (unint64_t)&v21[8 * v20];
      v396 = v22;
      unint64_t v398 = v7;
      if (v5) {
        operator delete((void *)v5);
      }
      uint64_t v5 = (uint64_t)v22;
      v397 = v6;
      v4 += 16;
      if (v4 == v3) {
        goto LABEL_64;
      }
    }
  }
  uint64_t v6 = 0;
LABEL_64:
  v401 = &v396;
  *(_OWORD *)v402 = 0u;
  *(_OWORD *)v403 = 0u;
  long long v404 = 0u;
  long long v405 = 0u;
  long long v406 = 0u;
  long long v407 = 0u;
  long long v408 = 0u;
  long long v409 = 0u;
  long long v410 = 0u;
  long long v411 = 0u;
  long long v412 = 0u;
  long long v413 = 0u;
  uint64_t v414 = 0;
  uint64_t v41 = (uint64_t)v6 - v5;
  memset(buf, 0, sizeof(buf));
  if ((unint64_t)v6 - v5 < 0x10)
  {
LABEL_518:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1C87861F0](exception, "not triangulation");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v41 < 0) {
    sub_1C494A220();
  }
  unint64_t v389 = (unint64_t)v6 - v5;
  uint64_t v386 = v41 >> 3;
  unint64_t v42 = (unint64_t)(v41 >> 3) >> 1;
  uint64_t v43 = (uint64_t *)operator new(8 * v42);
  unint64_t v44 = v43;
  uint64_t v45 = 0;
  uint64_t v46 = &v43[v42];
  *(void *)long long buf = v43;
  *(void *)&uint8_t buf[8] = v43;
  *(void *)&uint8_t buf[16] = v46;
  unint64_t v387 = v42;
  if (v42 <= 1) {
    uint64_t v47 = 1;
  }
  else {
    uint64_t v47 = v42;
  }
  double v48 = 1.79769313e308;
  double v49 = -1.79769313e308;
  double v50 = -1.79769313e308;
  double v51 = 1.79769313e308;
  uint64_t v52 = v43;
  do
  {
    while (1)
    {
      unint64_t v53 = (double *)((char *)*v401 + 16 * v45);
      double v54 = v53[1];
      if (*v53 < v48) {
        double v48 = *v53;
      }
      if (v54 < v51) {
        double v51 = v53[1];
      }
      if (*v53 > v49) {
        double v49 = *v53;
      }
      if (v54 > v50) {
        double v50 = v53[1];
      }
      if (v44 >= v46) {
        break;
      }
      *v44++ = v45;
      if (++v45 == v47) {
        goto LABEL_108;
      }
    }
    uint64_t v55 = v44 - v52;
    unint64_t v56 = v55 + 1;
    if ((unint64_t)(v55 + 1) >> 61)
    {
      *(void *)&uint8_t buf[8] = v44;
      sub_1C494A220();
    }
    if (((char *)v46 - (char *)v52) >> 2 > v56) {
      unint64_t v56 = ((char *)v46 - (char *)v52) >> 2;
    }
    if ((unint64_t)((char *)v46 - (char *)v52) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v57 = v56;
    }
    if (v57)
    {
      if (v57 >> 61)
      {
        *(void *)&uint8_t buf[8] = v44;
        sub_1C4949AA8();
      }
      uint64_t v58 = operator new(8 * v57);
      uint64_t v59 = (uint64_t *)&v58[8 * v55];
      *uint64_t v59 = v45;
      uint64_t v60 = (uint64_t)(v59 + 1);
      int64_t v61 = (char *)v44 - (char *)v52;
      if (v44 == v52) {
        goto LABEL_94;
      }
    }
    else
    {
      uint64_t v58 = 0;
      uint64_t v59 = (uint64_t *)(8 * v55);
      *(void *)(8 * v55) = v45;
      uint64_t v60 = 8 * v55 + 8;
      int64_t v61 = (char *)v44 - (char *)v52;
      if (v44 == v52) {
        goto LABEL_94;
      }
    }
    unint64_t v62 = v61 - 8;
    if (v62 < 0x168)
    {
      uint64_t v63 = v44;
      goto LABEL_93;
    }
    unint64_t v65 = ((char *)(v44 - 1) - (char *)v52) & 0xFFFFFFFFFFFFFFF8;
    if (&v58[(char *)v44 - (char *)v52 - 8 - v65] > &v58[(char *)v44 - (char *)v52 - 8])
    {
      uint64_t v63 = v44;
      do
      {
LABEL_93:
        uint64_t v64 = *--v63;
        *--uint64_t v59 = v64;
      }
      while (v63 != v52);
      goto LABEL_94;
    }
    if ((uint64_t *)((char *)v44 - v65 - 8) > v44 - 1)
    {
      uint64_t v63 = v44;
      goto LABEL_93;
    }
    if ((unint64_t)((char *)v52 - v58) < 0x20)
    {
      uint64_t v63 = v44;
      goto LABEL_93;
    }
    uint64_t v66 = (v62 >> 3) + 1;
    uint64_t v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v63 = &v44[v67 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v59 = (uint64_t *)((char *)v59 - v67);
    int64_t v68 = &v58[8 * v55 - 16];
    uint64_t v69 = v44 - 2;
    uint64_t v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v71 = *(_OWORD *)v69;
      *(v68 - 1) = *((_OWORD *)v69 - 1);
      *int64_t v68 = v71;
      v68 -= 2;
      v69 -= 4;
      v70 -= 4;
    }
    while (v70);
    if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_93;
    }
LABEL_94:
    uint64_t v46 = (uint64_t *)&v58[8 * v57];
    *(void *)long long buf = v59;
    *(void *)&uint8_t buf[16] = v46;
    if (v52) {
      operator delete(v52);
    }
    uint64_t v52 = v59;
    unint64_t v44 = (uint64_t *)v60;
    ++v45;
  }
  while (v45 != v47);
LABEL_108:
  uint64_t v72 = 0;
  *(void *)&uint8_t buf[8] = v44;
  unint64_t v73 = (char *)*v401;
  unint64_t v76 = (double *)((char *)*v401 + 8);
  uint64_t v77 = -1;
  double v78 = 1.79769313e308;
  do
  {
    double v74 = (v48 + v49) * 0.5;
    double v75 = (v51 + v50) * 0.5;
    if ((v75 - *v76) * (v75 - *v76) + (v74 - *(v76 - 1)) * (v74 - *(v76 - 1)) < v78)
    {
      double v78 = (v75 - *v76) * (v75 - *v76) + (v74 - *(v76 - 1)) * (v74 - *(v76 - 1));
      uint64_t v77 = v72;
    }
    ++v72;
    v76 += 2;
  }
  while (v47 != v72);
  uint64_t v79 = 0;
  uint64_t v80 = (double *)&v73[16 * v77];
  double v81 = *v80;
  double v82 = v80[1];
  long long v83 = (double *)(v73 + 8);
  uint64_t v84 = -1;
  double v85 = 1.79769313e308;
  do
  {
    if (v77 != v79)
    {
      double v86 = (v82 - *v83) * (v82 - *v83) + (v81 - *(v83 - 1)) * (v81 - *(v83 - 1));
      if (v86 < v85 && v86 > 0.0)
      {
        uint64_t v84 = v79;
        double v85 = (v82 - *v83) * (v82 - *v83) + (v81 - *(v83 - 1)) * (v81 - *(v83 - 1));
      }
    }
    ++v79;
    v83 += 2;
  }
  while (v47 != v79);
  uint64_t v87 = 0;
  uint64_t v88 = (double *)&v73[16 * v84];
  double v89 = *v88;
  double v90 = v88[1];
  double v91 = *v88 - v81;
  double v92 = v90 - v82;
  double v93 = v92 * v92 + v91 * v91;
  double v94 = -(v90 - v82);
  int v95 = (double *)(v73 + 8);
  uint64_t v96 = -1;
  double v97 = 1.79769313e308;
  do
  {
    if (v77 != v87 && v84 != v87)
    {
      double v98 = *(v95 - 1) - v81;
      double v99 = *v95 - v82;
      double v100 = v99 * v99 + v98 * v98;
      BOOL v101 = v100 <= 0.0 || v93 <= 0.0;
      double v102 = v98 * v94 + v91 * v99;
      double v103 = (v100 * v94 + v99 * v93) * 0.5 / v102;
      double v104 = (v91 * v100 - v98 * v93) * 0.5 / v102;
      BOOL v105 = v101 || v102 == 0.0;
      char v106 = v105;
      double v107 = v104 * v104 + v103 * v103;
      if (v106) {
        double v107 = 1.79769313e308;
      }
      if (v107 < v97)
      {
        uint64_t v96 = v87;
        double v97 = v107;
      }
    }
    ++v87;
    v95 += 2;
  }
  while (v47 != v87);
  if (v97 >= 1.79769313e308) {
    goto LABEL_518;
  }
  uint64_t v108 = (double *)&v73[16 * v96];
  double v110 = *v108;
  double v109 = v108[1];
  double v111 = *v108 - v81;
  double v112 = v109 - v82;
  if (v92 * (*v108 - v89) - v91 * (v109 - v90) >= 0.0)
  {
    double v114 = v92 * v92 + v91 * v91;
    double v93 = v112 * v112 + v111 * v111;
    double v92 = v109 - v82;
    double v113 = -v111;
    double v115 = *v108 - v81;
    double v111 = v91;
    double v116 = *v108;
    double v117 = v108[1];
    double v109 = v90;
    double v110 = v89;
    uint64_t v118 = v96;
    uint64_t v96 = v84;
  }
  else
  {
    double v113 = -v91;
    double v114 = v112 * v112 + v111 * v111;
    double v94 = -v112;
    double v115 = v91;
    double v116 = v89;
    double v117 = v90;
    uint64_t v118 = v84;
  }
  unint64_t v119 = 126 - 2 * __clz(v44 - v52);
  double v120 = v94 * v115 + v111 * v92;
  *((double *)&v411 + 1) = v81 + (v94 * v93 + v92 * v114) * 0.5 / v120;
  *(double *)&long long v412 = v82 + (v114 * v113 + v111 * v93) * 0.5 / v120;
  __p = v401;
  *(double *)&long long v400 = *((double *)&v411 + 1);
  *((double *)&v400 + 1) = *(double *)&v412;
  if (v44 == v52) {
    uint64_t v121 = 0;
  }
  else {
    uint64_t v121 = v119;
  }
  sub_1C4B53B78((uint64_t)v52, v44, (double *)&__p, v121, 1);
  unint64_t v122 = llround(ceil(sqrt((double)v387)));
  *((void *)&v412 + 1) = v122;
  uint64_t v124 = *((void *)&v410 + 1);
  uint64_t v123 = (void *)v410;
  unint64_t v125 = (uint64_t)(*((void *)&v410 + 1) - v410) >> 3;
  if (v122 <= v125)
  {
    if (v122 < v125)
    {
      uint64_t v124 = v410 + 8 * v122;
      *((void *)&v410 + 1) = v124;
    }
  }
  else
  {
    sub_1C4B551A4((uint64_t)&v410, v122 - v125);
    uint64_t v124 = *((void *)&v410 + 1);
    uint64_t v123 = (void *)v410;
  }
  uint64_t v126 = v124 - (void)v123;
  if (v126 >= 1) {
    memset(v123, 255, 8 * (((unint64_t)v126 >> 3) - ((unint64_t)v126 > 7)) + 8);
  }
  unint64_t v127 = (uint64_t)(*((void *)&v405 + 1) - v405) >> 3;
  if (v387 <= v127)
  {
    if (v387 < v127) {
      *((void *)&v405 + 1) = v405 + 8 * v387;
    }
  }
  else
  {
    sub_1C4B551A4((uint64_t)&v405, v387 - v127);
  }
  unint64_t v128 = (uint64_t)(v407 - *((void *)&v406 + 1)) >> 3;
  if (v387 <= v128)
  {
    if (v387 < v128) {
      *(void *)&long long v407 = *((void *)&v406 + 1) + 8 * v387;
    }
  }
  else
  {
    sub_1C4B551A4((uint64_t)&v406 + 8, v387 - v128);
  }
  uint64_t v129 = v408;
  unint64_t v130 = (uint64_t)(*((void *)&v408 + 1) - v408) >> 3;
  if (v387 <= v130)
  {
    if (v387 < v130) {
      *((void *)&v408 + 1) = v408 + 8 * v387;
    }
  }
  else
  {
    sub_1C4B551A4((uint64_t)&v408, v387 - v130);
    uint64_t v129 = v408;
  }
  *((void *)&v409 + 1) = v77;
  uint64_t v131 = v405;
  uint64_t v132 = 8 * v118;
  *(void *)(v405 + v132) = v96;
  uint64_t v133 = *((void *)&v406 + 1);
  uint64_t v134 = 8 * v77;
  *(void *)(*((void *)&v406 + 1) + v134) = v96;
  *(void *)(v131 + v134) = v118;
  uint64_t v135 = 8 * v96;
  *(void *)(v133 + v135) = v118;
  *(void *)(v131 + v135) = v77;
  *(void *)(v133 + v132) = v77;
  *(void *)(v129 + v134) = 0;
  *(void *)(v129 + v135) = 1;
  *(void *)(v129 + v132) = 2;
  double v136 = *((double *)&v411 + 1);
  double v137 = *(double *)&v412;
  double v138 = (v81 - *((double *)&v411 + 1)) / (vabdd_f64(v81, *((double *)&v411 + 1)) + vabdd_f64(v82, *(double *)&v412));
  double v139 = 3.0 - v138;
  double v140 = v138 + 1.0;
  if (v82 - *(double *)&v412 <= 0.0) {
    double v141 = v140;
  }
  else {
    double v141 = v139;
  }
  unint64_t v142 = llround(floor(v141 * 0.25 * (double)*((unint64_t *)&v412 + 1)));
  if (v142 >= *((void *)&v412 + 1)) {
    v142 %= *((void *)&v412 + 1);
  }
  uint64_t v143 = v410;
  *(void *)(v410 + 8 * v142) = v77;
  double v144 = (v110 - v136) / (vabdd_f64(v110, v136) + vabdd_f64(v109, v137));
  double v145 = 3.0 - v144;
  if (v109 - v137 <= 0.0) {
    double v145 = v144 + 1.0;
  }
  unint64_t v146 = llround(floor(v145 * 0.25 * (double)*((unint64_t *)&v412 + 1)));
  if (v146 >= *((void *)&v412 + 1)) {
    v146 %= *((void *)&v412 + 1);
  }
  *(void *)(v143 + 8 * v146) = v96;
  double v147 = v117 - v137;
  double v148 = (v116 - v136) / (vabdd_f64(v116, v136) + vabdd_f64(v117, v137));
  double v149 = 3.0 - v148;
  double v150 = v148 + 1.0;
  if (v147 > 0.0) {
    double v150 = v149;
  }
  unint64_t v151 = llround(floor(v150 * 0.25 * (double)*((unint64_t *)&v412 + 1)));
  if (v151 >= *((void *)&v412 + 1)) {
    v151 %= *((void *)&v412 + 1);
  }
  *(void *)(v143 + 8 * v151) = v118;
  if (v389 >= 0x30) {
    unint64_t v152 = 3 * (v386 & 0xFFFFFFFFFFFFFFFELL) - 15;
  }
  else {
    unint64_t v152 = 3;
  }
  __int16 v153 = v402[0];
  if (v152 <= ((char *)v403[0] - (char *)v402[0]) >> 3) {
    goto LABEL_188;
  }
  if (v152 >> 61) {
    goto LABEL_521;
  }
  uint64_t v154 = v402[1];
  __int16 v155 = operator new(8 * v152);
  uint64_t v156 = v154 - v153;
  __int16 v157 = &v155[(v154 - v153) & 0xFFFFFFFFFFFFFFF8];
  int v158 = v157;
  if (v154 != v153)
  {
    if ((unint64_t)(v156 - 8) < 0x58)
    {
      int v158 = &v155[(v154 - v153) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_185;
    }
    int v158 = &v155[(v154 - v153) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v154[-(v156 & 0xFFFFFFFFFFFFFFF8)] - v155) < 0x20) {
      goto LABEL_535;
    }
    uint64_t v159 = v156 >> 3;
    unint64_t v160 = ((unint64_t)(v156 - 8) >> 3) + 1;
    uint64_t v161 = 8 * (v160 & 0x3FFFFFFFFFFFFFFCLL);
    BOOL v162 = &v154[-v161];
    int v158 = &v157[-v161];
    __int16 v163 = &v155[8 * v159 - 16];
    int v164 = (long long *)(v154 - 16);
    uint64_t v165 = v160 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v166 = *v164;
      *(v163 - 1) = *(v164 - 1);
      *__int16 v163 = v166;
      v163 -= 2;
      v164 -= 2;
      v165 -= 4;
    }
    while (v165);
    uint64_t v154 = v162;
    if (v160 != (v160 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_535:
      do
      {
LABEL_185:
        uint64_t v167 = *((void *)v154 - 1);
        v154 -= 8;
        *((void *)v158 - 1) = v167;
        v158 -= 8;
      }
      while (v154 != v153);
    }
  }
  v402[0] = v158;
  v402[1] = v157;
  v403[0] = &v155[8 * v152];
  if (v153) {
    operator delete(v153);
  }
LABEL_188:
  int v168 = v403[1];
  if (v152 <= (uint64_t)(*((void *)&v404 + 1) - (unint64_t)v403[1]) >> 3) {
    goto LABEL_200;
  }
  if (v152 >> 61) {
LABEL_521:
  }
    sub_1C494A220();
  uint64_t v169 = (unsigned char *)v404;
  v170 = (char *)operator new(8 * v152);
  uint64_t v171 = v169 - v168;
  v172 = &v170[(v169 - v168) & 0xFFFFFFFFFFFFFFF8];
  v173 = v172;
  if (v169 != v168)
  {
    if ((unint64_t)(v171 - 8) < 0x58)
    {
      v173 = &v170[(v169 - v168) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_197;
    }
    v173 = &v170[(v169 - v168) & 0xFFFFFFFFFFFFFFF8];
    if (v169 - v170 - (v171 & 0xFFFFFFFFFFFFFFF8) < 0x20) {
      goto LABEL_536;
    }
    uint64_t v174 = v171 >> 3;
    unint64_t v175 = ((unint64_t)(v171 - 8) >> 3) + 1;
    uint64_t v176 = 8 * (v175 & 0x3FFFFFFFFFFFFFFCLL);
    v177 = &v169[-v176];
    v173 = &v172[-v176];
    v178 = &v170[8 * v174 - 16];
    v179 = (long long *)(v169 - 16);
    uint64_t v180 = v175 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v181 = *v179;
      *((_OWORD *)v178 - 1) = *(v179 - 1);
      *(_OWORD *)v178 = v181;
      v178 -= 32;
      v179 -= 2;
      v180 -= 4;
    }
    while (v180);
    uint64_t v169 = v177;
    if (v175 != (v175 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_536:
      do
      {
LABEL_197:
        uint64_t v182 = *((void *)v169 - 1);
        v169 -= 8;
        *((void *)v173 - 1) = v182;
        v173 -= 8;
      }
      while (v169 != v168);
    }
  }
  v403[1] = v173;
  *(void *)&long long v404 = v172;
  *((void *)&v404 + 1) = &v170[8 * v152];
  if (v168) {
    operator delete(v168);
  }
LABEL_200:
  delaunator::Delaunator::add_triangle((delaunator::Delaunator *)&v401, v77, v96, v118, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v183 = 0;
  v184 = (double *)*v401;
  double v185 = NAN;
  double v186 = 3.0;
  double v187 = NAN;
  while (2)
  {
    uint64_t v188 = *(void *)(*(void *)buf + 8 * v183);
    v189 = &v184[2 * v188];
    double v190 = *v189;
    double v191 = v189[1];
    if (v183)
    {
      double v192 = vabdd_f64(v191, v185);
      if (vabdd_f64(v190, v187) <= 2.22044605e-16 && v192 <= 2.22044605e-16)
      {
        double v190 = v187;
        double v191 = v185;
        goto LABEL_201;
      }
    }
    double v194 = vabdd_f64(v191, v82);
    if (vabdd_f64(v190, v81) > 2.22044605e-16 || v194 > 2.22044605e-16)
    {
      double v196 = vabdd_f64(v191, v109);
      if (vabdd_f64(v190, v110) > 2.22044605e-16 || v196 > 2.22044605e-16)
      {
        double v198 = vabdd_f64(v191, v117);
        if (vabdd_f64(v190, v116) > 2.22044605e-16 || v198 > 2.22044605e-16)
        {
          double v200 = (v190 - *((double *)&v411 + 1))
               / (vabdd_f64(v190, *((double *)&v411 + 1)) + vabdd_f64(v191, *(double *)&v412));
          double v201 = v186 - v200;
          double v202 = v200 + 1.0;
          if (v191 - *(double *)&v412 > 0.0) {
            double v202 = v201;
          }
          unint64_t v203 = llround(floor(v202 * 0.25 * (double)*((unint64_t *)&v412 + 1)));
          if (v203 >= *((void *)&v412 + 1))
          {
            uint64_t v204 = *((void *)&v406 + 1);
            if (!*((void *)&v412 + 1))
            {
              uint64_t v207 = 0;
LABEL_242:
              uint64_t v209 = *(void *)(v405 + 8 * v207);
              uint64_t j = v209;
              while (1)
              {
                uint64_t v211 = *(void *)(v204 + 8 * j);
                if ((v184[2 * j + 1] - v191) * (v184[2 * v211] - v184[2 * j])
                   - (v184[2 * j] - v190) * (v184[2 * v211 + 1] - v184[2 * j + 1]) < 0.0)
                  break;
                uint64_t j = *(void *)(v204 + 8 * j);
                if (v211 == v209) {
                  goto LABEL_201;
                }
              }
              if (j != -1)
              {
                unint64_t v212 = delaunator::Delaunator::add_triangle((delaunator::Delaunator *)&v401, j, *(void *)(*(void *)buf + 8 * v183), v211, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, *(void *)(v408 + 8 * j));
                unint64_t v213 = delaunator::Delaunator::legalize((uint64_t **)&v401, v212 + 2);
                uint64_t v214 = v408;
                *(void *)(v408 + 8 * v188) = v213;
                *(void *)(v214 + 8 * j) = v212;
                uint64_t v215 = *((void *)&v406 + 1);
                for (uint64_t i = *(void *)(*((void *)&v406 + 1) + 8 * j); ; uint64_t i = v217)
                {
                  uint64_t v217 = *(void *)(v215 + 8 * i);
                  v184 = (double *)*v401;
                  v218 = (double *)((char *)*v401 + 16 * i);
                  if ((v218[1] - v191) * (*((double *)*v401 + 2 * v217) - *v218)
                     - (*v218 - v190) * (*((double *)*v401 + 2 * v217 + 1) - v218[1]) >= 0.0)
                    break;
                  unint64_t v219 = delaunator::Delaunator::add_triangle((delaunator::Delaunator *)&v401, i, v188, *(void *)(v215 + 8 * i), *(void *)(v214 + 8 * v188), 0xFFFFFFFFFFFFFFFFLL, *(void *)(v214 + 8 * i));
                  unint64_t v220 = delaunator::Delaunator::legalize((uint64_t **)&v401, v219 + 2);
                  uint64_t v214 = v408;
                  *(void *)(v408 + 8 * v188) = v220;
                  uint64_t v215 = *((void *)&v406 + 1);
                  *(void *)(*((void *)&v406 + 1) + 8 * i) = i;
                }
                if (j == v209)
                {
                  for (uint64_t j = v209; ; uint64_t j = v222)
                  {
                    uint64_t v221 = v405;
                    uint64_t v222 = *(void *)(v405 + 8 * j);
                    if ((v184[2 * v222 + 1] - v191) * (v184[2 * j] - v184[2 * v222])
                       - (v184[2 * v222] - v190) * (v184[2 * j + 1] - v184[2 * v222 + 1]) >= 0.0)
                      break;
                    unint64_t v223 = delaunator::Delaunator::add_triangle((delaunator::Delaunator *)&v401, *(void *)(v405 + 8 * j), v188, j, 0xFFFFFFFFFFFFFFFFLL, *(void *)(v214 + 8 * j), *(void *)(v214 + 8 * v222));
                    delaunator::Delaunator::legalize((uint64_t **)&v401, v223 + 2);
                    uint64_t v214 = v408;
                    *(void *)(v408 + 8 * v222) = v223;
                    uint64_t v215 = *((void *)&v406 + 1);
                    *(void *)(*((void *)&v406 + 1) + 8 * j) = j;
                    v184 = (double *)*v401;
                  }
                }
                else
                {
                  uint64_t v221 = v405;
                }
                uint64_t v224 = 8 * v188;
                *(void *)(v221 + v224) = j;
                *((void *)&v409 + 1) = j;
                *(void *)(v221 + 8 * i) = v188;
                *(void *)(v215 + 8 * j) = v188;
                *(void *)(v215 + v224) = i;
                double v225 = *((double *)&v411 + 1);
                double v226 = *(double *)&v412;
                double v227 = (v190 - *((double *)&v411 + 1))
                     / (vabdd_f64(v190, *((double *)&v411 + 1)) + vabdd_f64(v191, *(double *)&v412));
                double v228 = 3.0 - v227;
                double v229 = v227 + 1.0;
                if (v191 - *(double *)&v412 > 0.0) {
                  double v229 = v228;
                }
                unint64_t v230 = llround(floor(v229 * 0.25 * (double)*((unint64_t *)&v412 + 1)));
                if (v230 >= *((void *)&v412 + 1)) {
                  v230 %= *((void *)&v412 + 1);
                }
                uint64_t v231 = v410;
                *(void *)(v410 + 8 * v230) = v188;
                v232 = &v184[2 * j];
                double v233 = v232[1];
                double v234 = v233 - v226;
                double v235 = (*v232 - v225) / (vabdd_f64(*v232, v225) + vabdd_f64(v233, v226));
                double v236 = 3.0 - v235;
                double v237 = v235 + 1.0;
                if (v234 > 0.0) {
                  double v237 = v236;
                }
                unint64_t v238 = llround(floor(v237 * 0.25 * (double)*((unint64_t *)&v412 + 1)));
                if (v238 >= *((void *)&v412 + 1)) {
                  v238 %= *((void *)&v412 + 1);
                }
                *(void *)(v231 + 8 * v238) = j;
                double v186 = 3.0;
              }
              goto LABEL_201;
            }
            v203 %= *((void *)&v412 + 1);
          }
          else
          {
            uint64_t v204 = *((void *)&v406 + 1);
          }
          unint64_t v205 = 0;
          do
          {
            while (1)
            {
              unint64_t v206 = v205 + v203;
              if (v205 + v203 >= *((void *)&v412 + 1)) {
                v206 %= *((void *)&v412 + 1);
              }
              uint64_t v207 = *(void *)(v410 + 8 * v206);
              if (v207 == -1) {
                break;
              }
              ++v205;
              if (v207 != *(void *)(v204 + 8 * v207) || v205 >= *((void *)&v412 + 1)) {
                goto LABEL_242;
              }
            }
            ++v205;
          }
          while (v205 < *((void *)&v412 + 1));
          uint64_t v207 = -1;
          goto LABEL_242;
        }
      }
    }
LABEL_201:
    ++v183;
    double v185 = v191;
    double v187 = v190;
    if (v183 != v47) {
      continue;
    }
    break;
  }
  if (*(void *)buf) {
    operator delete(*(void **)buf);
  }
  v239 = a2;
  CoreHandwriting::filter_delaunay_edges_for_alphashape((uint64_t **)&v401, (uint64_t)&v393, a3);
  __p = 0;
  long long v400 = 0uLL;
  uint64_t v245 = v395;
  unint64_t v246 = v395 + 1;
  if (v395 != -1)
  {
    if (v246 >> 60) {
      sub_1C494A220();
    }
    __p = operator new(16 * v246);
    *(void *)&long long v400 = __p;
    *((void *)&v400 + 1) = (char *)__p + 16 * v246;
  }
  if ((unint64_t)(2 * v245 * v245) >= 0x186A0) {
    uint64_t v247 = 100000;
  }
  else {
    uint64_t v247 = 2 * v245 * v245;
  }
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], v240, v241, v242, v243, v244);
  if (!v395)
  {
LABEL_398:
    v323 = (double *)__p;
    *v239 = (double *)__p;
    v324 = (double *)v400;
    *(_OWORD *)(v239 + 1) = v400;
    v325 = v324;
    uint64_t v326 = (char *)v324 - (char *)v323;
    if ((unint64_t)((char *)v324 - (char *)v323) < 0x21) {
      goto LABEL_489;
    }
LABEL_408:
    unint64_t v330 = (unint64_t)v239[2];
    if ((unint64_t)v325 >= v330)
    {
      uint64_t v332 = v326 >> 4;
      unint64_t v333 = (v326 >> 4) + 1;
      if (v333 >> 60) {
        sub_1C494A220();
      }
      uint64_t v334 = v330 - (void)v323;
      if (v334 >> 3 > v333) {
        unint64_t v333 = v334 >> 3;
      }
      if ((unint64_t)v334 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v335 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v335 = v333;
      }
      if (v335)
      {
        if (v335 >> 60) {
          sub_1C4949AA8();
        }
        v336 = (char *)operator new(16 * v335);
      }
      else
      {
        v336 = 0;
      }
      v337 = (double *)&v336[16 * v332];
      v338 = (double *)&v336[16 * v335];
      *(_OWORD *)v337 = *(_OWORD *)v323;
      v331 = v337 + 2;
      if (v325 == v323)
      {
        *a2 = v337;
        a2[1] = v331;
        a2[2] = v338;
      }
      else
      {
        do
        {
          *((_OWORD *)v337 - 1) = *((_OWORD *)v325 - 1);
          v337 -= 2;
          v325 -= 2;
        }
        while (v325 != v323);
        v323 = *a2;
        *a2 = v337;
        a2[1] = v331;
        a2[2] = v338;
        if (!v323) {
          goto LABEL_426;
        }
      }
      operator delete(v323);
    }
    else
    {
      *(_OWORD *)v325 = *(_OWORD *)v323;
      v331 = v325 + 2;
    }
LABEL_426:
    a2[1] = v331;
    v339 = *a2;
    if (*a2 == v331)
    {
      double v347 = -INFINITY;
      double v348 = -INFINITY;
    }
    else
    {
      double v340 = 1.79769313e308;
      double v341 = -1.79769313e308;
      double v342 = -1.79769313e308;
      double v343 = 1.79769313e308;
      v344 = *a2;
      do
      {
        double v345 = *v344;
        double v346 = v344[1];
        v344 += 2;
        if (v343 > v345) {
          double v343 = v345;
        }
        if (v342 < v345) {
          double v342 = v345;
        }
        if (v340 > v346) {
          double v340 = v346;
        }
        if (v341 < v346) {
          double v341 = v346;
        }
      }
      while (v344 != v331);
      double v347 = v342 - v343;
      double v348 = v341 - v340;
    }
    memset(buf, 0, sizeof(buf));
    v349 = (char *)operator new(0x10uLL);
    v350 = v349 + 16;
    *(_OWORD *)v349 = *(_OWORD *)v339;
    *(void *)&uint8_t buf[8] = v349 + 16;
    *(void *)&uint8_t buf[16] = v349 + 16;
    *(void *)long long buf = v349;
    if (v339 == v331) {
      goto LABEL_484;
    }
    double v391 = fmax(v347, v348) / 30.0;
    double v351 = v391 * 1.33;
    while (1)
    {
      double v353 = *((double *)v350 - 2);
      double v354 = *((double *)v350 - 1);
      double v355 = v339[1];
      double v356 = sqrt((v354 - v355) * (v354 - v355) + (v353 - *v339) * (v353 - *v339));
      if (v356 >= v351)
      {
        double v363 = fmin(floor(v356 / v351), 4.0);
        if (v363 < 1.0) {
          goto LABEL_443;
        }
        double v364 = (*v339 - v353) / v363;
        double v365 = v355 - v354;
        double v366 = 1.0;
        v367 = (double *)v350;
        unint64_t v368 = 1;
        double v369 = v365 / v363;
        while (2)
        {
          double v370 = v353 + v364 * v366;
          double v371 = v354 + v369 * v366;
          if ((unint64_t)v367 < *(void *)&buf[16])
          {
            double *v367 = v370;
            v367[1] = v371;
            v350 = (char *)(v367 + 2);
            goto LABEL_459;
          }
          v372 = *(double **)buf;
          uint64_t v373 = ((uint64_t)v367 - *(void *)buf) >> 4;
          unint64_t v374 = v373 + 1;
          if ((unint64_t)(v373 + 1) >> 60) {
            sub_1C494A220();
          }
          uint64_t v375 = *(void *)&buf[16] - *(void *)buf;
          if ((uint64_t)(*(void *)&buf[16] - *(void *)buf) >> 3 > v374) {
            unint64_t v374 = v375 >> 3;
          }
          if ((unint64_t)v375 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v376 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v376 = v374;
          }
          if (v376)
          {
            if (v376 >> 60) {
              sub_1C4949AA8();
            }
            v377 = (char *)operator new(16 * v376);
            v378 = (double *)&v377[16 * v373];
            double *v378 = v370;
            v378[1] = v371;
            uint64_t v379 = (uint64_t)v378;
            if (v367 == v372)
            {
LABEL_470:
              v350 = (char *)(v378 + 2);
              *(void *)long long buf = v379;
              *(void *)&uint8_t buf[8] = v378 + 2;
              *(void *)&uint8_t buf[16] = &v377[16 * v376];
              if (!v367) {
                goto LABEL_459;
              }
              break;
            }
          }
          else
          {
            v377 = 0;
            v378 = (double *)(16 * v373);
            double *v378 = v370;
            v378[1] = v371;
            uint64_t v379 = 16 * v373;
            if (v367 == v372) {
              goto LABEL_470;
            }
          }
          do
          {
            *(_OWORD *)(v379 - 16) = *((_OWORD *)v367 - 1);
            v379 -= 16;
            v367 -= 2;
          }
          while (v367 != v372);
          v367 = *(double **)buf;
          v350 = (char *)(v378 + 2);
          *(void *)long long buf = v379;
          *(void *)&uint8_t buf[8] = v378 + 2;
          *(void *)&uint8_t buf[16] = &v377[16 * v376];
          if (!v367)
          {
LABEL_459:
            *(void *)&uint8_t buf[8] = v350;
            double v366 = (double)++v368;
            v367 = (double *)v350;
            if (v363 < (double)v368) {
              goto LABEL_443;
            }
            continue;
          }
          break;
        }
        operator delete(v367);
        goto LABEL_459;
      }
      if (v356 >= v391) {
        break;
      }
LABEL_443:
      v339 += 2;
      if (v339 == v331)
      {
        v349 = *(char **)buf;
LABEL_484:
        v381 = a2;
        if (buf != (uint8_t *)a2)
        {
          sub_1C49B7D84(a2, v349, v350, (v350 - v349) >> 4);
          v349 = *(char **)buf;
          v381 = a2;
        }
        if (v349)
        {
          *(void *)&uint8_t buf[8] = v349;
          operator delete(v349);
        }
        v323 = *v381;
        v325 = v381[1];
        goto LABEL_489;
      }
    }
    if ((unint64_t)v350 < *(void *)&buf[16])
    {
      *(_OWORD *)v350 = *(_OWORD *)v339;
      v352 = v350 + 16;
    }
    else
    {
      v357 = *(char **)buf;
      uint64_t v358 = (uint64_t)&v350[-*(void *)buf] >> 4;
      unint64_t v359 = v358 + 1;
      if ((unint64_t)(v358 + 1) >> 60) {
        sub_1C494A220();
      }
      uint64_t v360 = *(void *)&buf[16] - *(void *)buf;
      if ((uint64_t)(*(void *)&buf[16] - *(void *)buf) >> 3 > v359) {
        unint64_t v359 = v360 >> 3;
      }
      if ((unint64_t)v360 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v361 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v361 = v359;
      }
      if (v361)
      {
        if (v361 >> 60) {
          sub_1C4949AA8();
        }
        v362 = (char *)operator new(16 * v361);
      }
      else
      {
        v362 = 0;
      }
      v380 = &v362[16 * v358];
      *(_OWORD *)v380 = *(_OWORD *)v339;
      v352 = v380 + 16;
      if (v350 == v357)
      {
        *(void *)long long buf = v380;
        *(void *)&uint8_t buf[8] = v380 + 16;
        *(void *)&uint8_t buf[16] = &v362[16 * v361];
      }
      else
      {
        do
        {
          *((_OWORD *)v380 - 1) = *((_OWORD *)v350 - 1);
          v380 -= 16;
          v350 -= 16;
        }
        while (v350 != v357);
        v350 = *(char **)buf;
        *(void *)long long buf = v380;
        *(void *)&uint8_t buf[8] = v352;
        *(void *)&uint8_t buf[16] = &v362[16 * v361];
        if (!v350) {
          goto LABEL_442;
        }
      }
      operator delete(v350);
    }
LABEL_442:
    *(void *)&uint8_t buf[8] = v352;
    v350 = v352;
    goto LABEL_443;
  }
  double v254 = v253;
  uint64_t v255 = 0;
  uint64_t v256 = 0;
  uint64_t v257 = 0;
  char v258 = 0;
  uint64_t v259 = 1;
  uint64_t v390 = v247;
LABEL_277:
  while (++v257 != v247)
  {
    v260 = (uint64_t *)v393;
    if (v393 == &v394)
    {
      BOOL v261 = v259;
LABEL_280:
      if (v258)
      {
        char v258 = 1;
      }
      else
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        v265 = (id)qword_1EA3C9FE0;
        if (os_log_type_enabled(v265, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1C492D000, v265, OS_LOG_TYPE_DEBUG, "Unexpected polygon edge with no matches", buf, 2u);
        }

        char v258 = 0;
        BOOL v261 = 1;
      }
      goto LABEL_276;
    }
    while (1)
    {
      uint64_t v262 = v260[4];
      if (v259)
      {
        v266 = (uint64_t *)((char *)*v401 + 16 * v262);
        uint64_t v268 = *v266;
        uint64_t v267 = v266[1];
        v269 = (char *)*((void *)&v400 + 1);
        v270 = (void *)v400;
        if ((unint64_t)v400 < *((void *)&v400 + 1))
        {
          *(void *)long long v400 = v268;
          v270[1] = v267;
          v271 = (char *)(v270 + 2);
          goto LABEL_314;
        }
        v277 = __p;
        uint64_t v278 = (uint64_t)(v400 - (void)__p) >> 4;
        unint64_t v279 = v278 + 1;
        if ((unint64_t)(v278 + 1) >> 60) {
          sub_1C494A220();
        }
        uint64_t v280 = *((void *)&v400 + 1) - (void)__p;
        if ((uint64_t)(*((void *)&v400 + 1) - (void)__p) >> 3 > v279) {
          unint64_t v279 = v280 >> 3;
        }
        if ((unint64_t)v280 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v281 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v281 = v279;
        }
        if (v281)
        {
          if (v281 >> 60) {
            sub_1C4949AA8();
          }
          v282 = (char *)operator new(16 * v281);
          v283 = &v282[16 * v278];
          *(void *)v283 = v268;
          *((void *)v283 + 1) = v267;
          v284 = v283;
          if (v270 == v277)
          {
LABEL_312:
            v269 = &v282[16 * v281];
            v271 = v283 + 16;
            __p = v284;
            *(void *)&long long v400 = v283 + 16;
            *((void *)&v400 + 1) = v269;
            if (v270) {
              goto LABEL_313;
            }
            goto LABEL_314;
          }
        }
        else
        {
          v282 = 0;
          v283 = (char *)(16 * v278);
          *(void *)v283 = v268;
          *((void *)v283 + 1) = v267;
          v284 = (char *)(16 * v278);
          if (v270 == v277) {
            goto LABEL_312;
          }
        }
        do
        {
          *((_OWORD *)v284 - 1) = *((_OWORD *)v270 - 1);
          v284 -= 16;
          v270 -= 2;
        }
        while (v270 != v277);
        v270 = __p;
        v269 = &v282[16 * v281];
        v271 = v283 + 16;
        __p = v284;
        *(void *)&long long v400 = v283 + 16;
        *((void *)&v400 + 1) = v269;
        if (v270)
        {
LABEL_313:
          operator delete(v270);
          v269 = (char *)*((void *)&v400 + 1);
        }
LABEL_314:
        *(void *)&long long v400 = v271;
        uint64_t v255 = v260[5];
        v285 = (uint64_t *)((char *)*v401 + 16 * v255);
        uint64_t v287 = *v285;
        uint64_t v286 = v285[1];
        if (v271 < v269)
        {
          *(void *)v271 = v287;
          *((void *)v271 + 1) = v286;
          uint64_t v288 = (uint64_t)(v271 + 16);
LABEL_371:
          *(void *)&long long v400 = v288;
          if (v394)
          {
            unint64_t v315 = v260[4];
            unint64_t v314 = v260[5];
            v316 = (uint64_t *)&v394;
            v317 = v394;
            do
            {
              unint64_t v318 = v317[4];
              if (v318 < v315)
              {
                ++v317;
              }
              else if (v315 >= v318)
              {
                if (v317[5] < v314) {
                  ++v317;
                }
                else {
                  v316 = v317;
                }
              }
              else
              {
                v316 = v317;
              }
              v317 = (uint64_t *)*v317;
            }
            while (v317);
            if (v316 != (uint64_t *)&v394)
            {
              unint64_t v319 = v316[4];
              if (v315 >= v319 && (v319 < v315 || v314 >= v316[5]))
              {
                v320 = (uint64_t *)v316[1];
                v321 = v316;
                if (v320)
                {
                  do
                  {
                    v322 = (uint64_t **)v320;
                    v320 = (uint64_t *)*v320;
                  }
                  while (v320);
                }
                else
                {
                  do
                  {
                    v322 = (uint64_t **)v321[2];
                    BOOL v105 = *v322 == v321;
                    v321 = (uint64_t *)v322;
                  }
                  while (!v105);
                }
                if (v393 == (uint64_t **)v316) {
                  v393 = v322;
                }
                --v395;
                sub_1C49A0D30(v394, v316);
                operator delete(v316);
              }
            }
          }
          char v258 = 1;
          uint64_t v256 = v262;
          uint64_t v259 = 0;
          v239 = a2;
          if (!v395) {
            goto LABEL_398;
          }
          goto LABEL_277;
        }
        v289 = (char *)__p;
        uint64_t v290 = (v271 - (unsigned char *)__p) >> 4;
        unint64_t v291 = v290 + 1;
        if ((unint64_t)(v290 + 1) >> 60) {
          sub_1C494A220();
        }
        uint64_t v292 = v269 - (unsigned char *)__p;
        if (v292 >> 3 > v291) {
          unint64_t v291 = v292 >> 3;
        }
        if ((unint64_t)v292 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v293 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v293 = v291;
        }
        if (v293)
        {
          if (v293 >> 60) {
            sub_1C4949AA8();
          }
          v294 = (char *)operator new(16 * v293);
          v295 = &v294[16 * v290];
          v296 = &v294[16 * v293];
          *(void *)v295 = v287;
          *((void *)v295 + 1) = v286;
          uint64_t v288 = (uint64_t)(v295 + 16);
          if (v271 != v289) {
            goto LABEL_325;
          }
LABEL_369:
          __p = v295;
          *(void *)&long long v400 = v288;
          *((void *)&v400 + 1) = v296;
          uint64_t v247 = v390;
        }
        else
        {
          v295 = (char *)(16 * v290);
          v296 = 0;
          *(void *)v295 = v287;
          *((void *)v295 + 1) = v286;
          uint64_t v288 = 16 * v290 + 16;
          if (v271 == v289) {
            goto LABEL_369;
          }
LABEL_325:
          uint64_t v247 = v390;
          do
          {
            *((_OWORD *)v295 - 1) = *((_OWORD *)v271 - 1);
            v295 -= 16;
            v271 -= 16;
          }
          while (v271 != v289);
          v271 = (char *)__p;
          __p = v295;
          *(void *)&long long v400 = v288;
          *((void *)&v400 + 1) = v296;
          if (!v271) {
            goto LABEL_371;
          }
        }
        operator delete(v271);
        goto LABEL_371;
      }
      if (v262 == v255) {
        break;
      }
      if (v260[5] == v255) {
        goto LABEL_300;
      }
      v263 = (uint64_t *)v260[1];
      if (v263)
      {
        do
        {
          v264 = (uint64_t **)v263;
          v263 = (uint64_t *)*v263;
        }
        while (v263);
      }
      else
      {
        do
        {
          v264 = (uint64_t **)v260[2];
          BOOL v105 = *v264 == v260;
          v260 = (uint64_t *)v264;
        }
        while (!v105);
      }
      LOBYTE(v259) = 0;
      BOOL v261 = 0;
      v260 = (uint64_t *)v264;
      if (v264 == &v394) {
        goto LABEL_280;
      }
    }
    uint64_t v262 = v260[5];
LABEL_300:
    BOOL v261 = v262 == v256;
    if (v262 == v256) {
      goto LABEL_343;
    }
    v272 = (uint64_t *)((char *)*v401 + 16 * v262);
    uint64_t v274 = *v272;
    uint64_t v273 = v272[1];
    v275 = (void *)v400;
    if ((unint64_t)v400 < *((void *)&v400 + 1))
    {
      *(void *)long long v400 = v274;
      v275[1] = v273;
      v276 = v275 + 2;
      goto LABEL_342;
    }
    v297 = __p;
    uint64_t v298 = (uint64_t)(v400 - (void)__p) >> 4;
    unint64_t v299 = v298 + 1;
    if ((unint64_t)(v298 + 1) >> 60) {
      sub_1C494A220();
    }
    uint64_t v300 = *((void *)&v400 + 1) - (void)__p;
    if ((uint64_t)(*((void *)&v400 + 1) - (void)__p) >> 3 > v299) {
      unint64_t v299 = v300 >> 3;
    }
    if ((unint64_t)v300 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v301 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v301 = v299;
    }
    if (!v301)
    {
      v302 = 0;
      v303 = (char *)(16 * v298);
      *(void *)v303 = v274;
      *((void *)v303 + 1) = v273;
      v304 = (char *)(16 * v298);
      if (v275 != v297) {
        goto LABEL_338;
      }
LABEL_396:
      uint64_t v247 = v390;
      v276 = v303 + 16;
      __p = v304;
      *(void *)&long long v400 = v303 + 16;
      *((void *)&v400 + 1) = &v302[16 * v301];
      if (v275) {
        goto LABEL_341;
      }
      goto LABEL_342;
    }
    if (v301 >> 60) {
      sub_1C4949AA8();
    }
    v302 = (char *)operator new(16 * v301);
    v303 = &v302[16 * v298];
    *(void *)v303 = v274;
    *((void *)v303 + 1) = v273;
    v304 = v303;
    if (v275 == v297) {
      goto LABEL_396;
    }
LABEL_338:
    uint64_t v247 = v390;
    do
    {
      *((_OWORD *)v304 - 1) = *((_OWORD *)v275 - 1);
      v304 -= 16;
      v275 -= 2;
    }
    while (v275 != v297);
    v275 = __p;
    v276 = v303 + 16;
    __p = v304;
    *(void *)&long long v400 = v303 + 16;
    *((void *)&v400 + 1) = &v302[16 * v301];
    if (v275) {
LABEL_341:
    }
      operator delete(v275);
LABEL_342:
    *(void *)&long long v400 = v276;
LABEL_343:
    if (v394)
    {
      unint64_t v306 = v260[4];
      unint64_t v305 = v260[5];
      v307 = (uint64_t *)&v394;
      v308 = v394;
      do
      {
        unint64_t v309 = v308[4];
        if (v309 < v306)
        {
          ++v308;
        }
        else if (v306 >= v309)
        {
          if (v308[5] < v305) {
            ++v308;
          }
          else {
            v307 = v308;
          }
        }
        else
        {
          v307 = v308;
        }
        v308 = (uint64_t *)*v308;
      }
      while (v308);
      if (v307 != (uint64_t *)&v394)
      {
        unint64_t v310 = v307[4];
        if (v306 >= v310 && (v310 < v306 || v305 >= v307[5]))
        {
          v311 = (uint64_t *)v307[1];
          v312 = v307;
          if (v311)
          {
            do
            {
              v313 = (uint64_t **)v311;
              v311 = (uint64_t *)*v311;
            }
            while (v311);
          }
          else
          {
            do
            {
              v313 = (uint64_t **)v312[2];
              BOOL v105 = *v313 == v312;
              v312 = (uint64_t *)v313;
            }
            while (!v105);
          }
          if (v393 == (uint64_t **)v307) {
            v393 = v313;
          }
          --v395;
          sub_1C49A0D30(v394, v307);
          operator delete(v307);
        }
      }
    }
    char v258 = 1;
    uint64_t v255 = v262;
LABEL_276:
    uint64_t v259 = v261;
    v239 = a2;
    if (!v395) {
      goto LABEL_398;
    }
  }
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], v248, v249, v250, v251, v252);
  double v328 = v327;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  v329 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v329, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134218496;
    *(void *)&uint8_t buf[4] = v247;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v245;
    *(_WORD *)&buf[22] = 2048;
    double v416 = v328 - v254;
    _os_log_impl(&dword_1C492D000, v329, OS_LOG_TYPE_ERROR, "alphashape_polygon_from_edges is stopping after %ld iterations, initial edge count = %ld, duration = %f", buf, 0x20u);
  }

  *v239 = 0;
  v239[1] = 0;
  v239[2] = 0;
  if (!__p)
  {
    v323 = 0;
    v325 = 0;
    goto LABEL_489;
  }
  *(void *)&long long v400 = __p;
  operator delete(__p);
  v323 = *v239;
  v325 = v239[1];
  uint64_t v326 = (char *)v325 - (char *)*v239;
  if ((unint64_t)v326 >= 0x21) {
    goto LABEL_408;
  }
LABEL_489:
  if (v325 == v323)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    v382 = (id)qword_1EA3C9FE0;
    if (os_log_type_enabled(v382, OS_LOG_TYPE_ERROR))
    {
      uint64_t v383 = (a1[1] - *a1) >> 4;
      *(_DWORD *)long long buf = 134218240;
      *(void *)&uint8_t buf[4] = v383;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = a3;
      _os_log_impl(&dword_1C492D000, v382, OS_LOG_TYPE_ERROR, "Empty alphashape for point set with %ld points, alphCGFloat a = %.2f", buf, 0x16u);
    }
  }
  sub_1C49A1374(v394);
  if ((void)v413)
  {
    *((void *)&v413 + 1) = v413;
    operator delete((void *)v413);
  }
  if ((void)v410)
  {
    *((void *)&v410 + 1) = v410;
    operator delete((void *)v410);
  }
  if ((void)v408)
  {
    *((void *)&v408 + 1) = v408;
    operator delete((void *)v408);
  }
  if (*((void *)&v406 + 1))
  {
    *(void *)&long long v407 = *((void *)&v406 + 1);
    operator delete(*((void **)&v406 + 1));
  }
  if ((void)v405)
  {
    *((void *)&v405 + 1) = v405;
    operator delete((void *)v405);
  }
  if (v403[1])
  {
    *(void **)&long long v404 = v403[1];
    operator delete(v403[1]);
  }
  if (v402[0])
  {
    v402[1] = v402[0];
    operator delete(v402[0]);
  }
  if (v396)
  {
    v397 = v396;
    operator delete(v396);
  }
}

void sub_1C4B4CD2C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,long long buf)
{
  if (a28) {
    operator delete(a28);
  }
  sub_1C49A1374(a23);
  sub_1C4B52F74(&buf);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    uint64_t v33 = CHOSLogForCategory(10);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      uint64_t v34 = (uint64_t)(a10[1] - *a10) >> 4;
      LODWORD(buf) = 134218240;
      *(void *)((char *)&buf + 4) = v34;
      WORD6(buf) = 2048;
      *(void *)((char *)&buf + 14) = a19;
      _os_log_impl(&dword_1C492D000, v33, OS_LOG_TYPE_ERROR, "Error: Unable to build an alphashape for point set with %ld points, alphCGFloat a = %.2f", (uint8_t *)&buf, 0x16u);
    }

    *a21 = 0;
    a21[1] = 0;
    a21[2] = 0;
    __cxa_end_catch();
    JUMPOUT(0x1C4B4CB8CLL);
  }
  if (!__p) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

double CoreHandwriting::boundingBoxAsRect(CoreHandwriting *this, const CoreHandwriting::BoundingBox *a2)
{
  return *(double *)this;
}

double CoreHandwriting::scale(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  return a7 * ((a1 - a3) / fmax(a4 - a3, a6 - a5));
}

id sub_1C4B4CF90(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = objc_msgSend_stringWithString_(MEMORY[0x1E4F28E78], a2, @"[", a4, a5, a6);
  uint64_t v13 = (void *)*a1;
  uint64_t v14 = (void *)a1[1];
  if ((void *)*a1 != v14)
  {
    do
    {
      objc_msgSend_appendFormat_(v12, v7, @"(%.3f, %.3f),", v9, v10, v11, *v13, v13[1]);
      v13 += 2;
    }
    while (v13 != v14);
  }
  uint64_t v15 = objc_msgSend_length(v12, v7, v8, v9, v10, v11);
  objc_msgSend_deleteCharactersInRange_(v12, v16, v15 - 1, 1, v17, v18);
  objc_msgSend_appendString_(v12, v19, @"]", v20, v21, v22);
  return v12;
}

void sub_1C4B4D04C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B4D05C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CoreHandwriting::principalLinesDescription(CoreHandwriting *this, const CoreHandwriting::PrincipalLines *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7 = objc_msgSend_stringWithString_(MEMORY[0x1E4F28E78], (const char *)a2, @"{", a4, a5, a6);
  uint64_t v8 = NSString;
  uint64_t v14 = sub_1C4B4CF90((void *)this + 9, v9, v10, v11, v12, v13);
  unint64_t v19 = objc_msgSend_stringWithFormat_(v8, v15, @" t: %@", v16, v17, v18, v14);
  objc_msgSend_appendString_(v7, v20, (uint64_t)v19, v21, v22, v23);

  unint64_t v24 = NSString;
  uint64_t v30 = sub_1C4B4CF90((void *)this + 6, v25, v26, v27, v28, v29);
  uint64_t v35 = objc_msgSend_stringWithFormat_(v24, v31, @" m: %@", v32, v33, v34, v30);
  objc_msgSend_appendString_(v7, v36, (uint64_t)v35, v37, v38, v39);

  long long v40 = NSString;
  uint64_t v46 = sub_1C4B4CF90((void *)this + 3, v41, v42, v43, v44, v45);
  double v51 = objc_msgSend_stringWithFormat_(v40, v47, @" b: %@", v48, v49, v50, v46);
  objc_msgSend_appendString_(v7, v52, (uint64_t)v51, v53, v54, v55);

  unint64_t v56 = NSString;
  unint64_t v62 = sub_1C4B4CF90(this, v57, v58, v59, v60, v61);
  uint64_t v67 = objc_msgSend_stringWithFormat_(v56, v63, @" d: %@", v64, v65, v66, v62);
  objc_msgSend_appendString_(v7, v68, (uint64_t)v67, v69, v70, v71);

  objc_msgSend_appendString_(v7, v72, @"}", v73, v74, v75);
  return v7;
}

void sub_1C4B4D1F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B4D258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B4D26C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1C4B4D280@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  sub_1C4B500B8((uint64_t)v5, a1, a2);
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  CoreHandwriting::CPDAffineRegistration::run((CoreHandwriting::CPDAffineRegistration *)v5, a3);
  return sub_1C4B5343C(v5);
}

void sub_1C4B4D2D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4B5343C((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 CoreHandwriting::CPDAffineRegistration::run@<Q0>(CoreHandwriting::CPDAffineRegistration *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 11);
  if (v4)
  {
    uint64_t v6 = *((void *)this + 41);
    uint64_t v5 = (double *)*((void *)this + 42);
    unint64_t v7 = (double *)*((void *)this + 45);
    uint64_t v8 = (double *)(*((void *)this + 15) + 8);
    uint64_t v9 = 8 * *((void *)this + 14);
    uint64_t v10 = (double *)(*((void *)this + 8) + 8);
    uint64_t v11 = 8 * *((void *)this + 7);
    do
    {
      *(v8 - 1) = *v7 + *v10 * v5[v6] + *(v10 - 1) * *v5;
      *uint64_t v8 = v7[1] + *v10 * v5[v6 + 1] + *(v10 - 1) * v5[1];
      uint64_t v8 = (double *)((char *)v8 + v9);
      uint64_t v10 = (double *)((char *)v10 + v11);
      --v4;
    }
    while (v4);
  }
  if (*((int *)this + 116) >= 1)
  {
    int v12 = 0;
    do
    {
      if (*((double *)this + 49) <= *((double *)this + 56)) {
        break;
      }
      CoreHandwriting::CPDAffineRegistration::expectation(this);
      CoreHandwriting::CPDAffineRegistration::update_transform(this);
      uint64_t v13 = *((void *)this + 11);
      if (v13)
      {
        uint64_t v15 = *((void *)this + 41);
        uint64_t v14 = (double *)*((void *)this + 42);
        uint64_t v16 = (double *)*((void *)this + 45);
        uint64_t v17 = (double *)(*((void *)this + 15) + 8);
        uint64_t v18 = 8 * *((void *)this + 14);
        unint64_t v19 = (double *)(*((void *)this + 8) + 8);
        uint64_t v20 = 8 * *((void *)this + 7);
        do
        {
          *(v17 - 1) = *v16 + *v19 * v14[v15] + *(v19 - 1) * *v14;
          *uint64_t v17 = v16[1] + *v19 * v14[v15 + 1] + *(v19 - 1) * v14[1];
          uint64_t v17 = (double *)((char *)v17 + v18);
          unint64_t v19 = (double *)((char *)v19 + v20);
          --v13;
        }
        while (v13);
      }
      CoreHandwriting::CPDAffineRegistration::update_variance(this);
      ++v12;
    }
    while (v12 < *((_DWORD *)this + 116));
  }
  uint64_t v21 = (_OWORD *)*((void *)this + 42);
  uint64_t v22 = (__n128 *)*((void *)this + 45);
  long long v23 = *(_OWORD *)((char *)v21 + 8 * *((void *)this + 41));
  *a2 = *v21;
  a2[1] = v23;
  __n128 result = *v22;
  a2[2] = *v22;
  return result;
}

void sub_1C4B4D480(double **a1@<X0>, float64x2_t *a2@<X1>, float64x2_t **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    unint64_t v7 = 0;
    while (1)
    {
      float64x2_t v9 = vaddq_f64(a2[2], vmlaq_n_f64(vmulq_n_f64(a2[1], v3[1]), *a2, *v3));
      unint64_t v10 = (unint64_t)a3[2];
      if ((unint64_t)v7 >= v10) {
        break;
      }
      float64x2_t *v7 = v9;
      uint64_t v8 = v7 + 1;
LABEL_4:
      a3[1] = v8;
      v3 += 2;
      unint64_t v7 = v8;
      if (v3 == v4) {
        return;
      }
    }
    uint64_t v11 = *a3;
    uint64_t v12 = v7 - *a3;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60) {
      sub_1C494A220();
    }
    uint64_t v14 = v10 - (void)v11;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      float64x2_t v19 = v9;
      if (v15 >> 60) {
        sub_1C4949AA8();
      }
      uint64_t v16 = (char *)operator new(16 * v15);
      uint64_t v17 = (float64x2_t *)&v16[16 * v12];
      *uint64_t v17 = v19;
      uint64_t v8 = v17 + 1;
      if (v7 == v11) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = (float64x2_t *)(16 * v12);
      uint64_t v18 = (float64x2_t *)(16 * v12);
      *uint64_t v18 = v9;
      uint64_t v8 = v18 + 1;
      if (v7 == v11)
      {
LABEL_19:
        *a3 = v17;
        a3[1] = v8;
        a3[2] = (float64x2_t *)&v16[16 * v15];
        if (v7) {
          operator delete(v7);
        }
        goto LABEL_4;
      }
    }
    do
    {
      v17[-1] = v7[-1];
      --v17;
      --v7;
    }
    while (v7 != v11);
    unint64_t v7 = *a3;
    goto LABEL_19;
  }
}

void sub_1C4B4D5FC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

double CoreHandwriting::transformPrincipalLines@<D0>(double **this@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  sub_1C4B4D480(this, a2, (float64x2_t **)&v12);
  uint64_t v7 = v13;
  *(_OWORD *)a3 = v12;
  *(void *)(a3 + 16) = v7;
  sub_1C4B4D480(this + 3, a2, (float64x2_t **)&v12);
  uint64_t v8 = v13;
  *(_OWORD *)(a3 + 24) = v12;
  *(void *)(a3 + 40) = v8;
  sub_1C4B4D480(this + 6, a2, (float64x2_t **)&v12);
  uint64_t v9 = v13;
  *(_OWORD *)(a3 + 48) = v12;
  *(void *)(a3 + 64) = v9;
  sub_1C4B4D480(this + 9, a2, (float64x2_t **)&v12);
  uint64_t v10 = v13;
  double result = *(double *)&v12;
  *(_OWORD *)(a3 + 72) = v12;
  *(void *)(a3 + 88) = v10;
  return result;
}

void sub_1C4B4D6E4(_Unwind_Exception *a1)
{
  sub_1C4A2F114(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B4D6F8(_Unwind_Exception *a1)
{
  sub_1C4A2F114(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B4D70C(_Unwind_Exception *a1)
{
  sub_1C4A2F114(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B4D720(_Unwind_Exception *a1)
{
  sub_1C4A2F114(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B4D734(uint64_t *a1, double *a2, double *a3, double a4)
{
  double v6 = *a2;
  double v5 = a2[1];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (a2 != a3)
  {
    uint64_t v8 = a2;
    uint64_t v10 = 0;
    double v11 = v5 - v6 * a4;
    while (1)
    {
      double v13 = *v8;
      double v14 = v11 + *v8 * a4;
      unint64_t v15 = a1[2];
      if ((unint64_t)v10 >= v15) {
        break;
      }
      *uint64_t v10 = v13;
      v10[1] = v14;
      long long v12 = v10 + 2;
LABEL_4:
      a1[1] = (uint64_t)v12;
      v8 += 2;
      uint64_t v10 = v12;
      if (v8 == a3) {
        return;
      }
    }
    uint64_t v16 = (double *)*a1;
    uint64_t v17 = ((uint64_t)v10 - *a1) >> 4;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 60) {
      sub_1C494A220();
    }
    uint64_t v19 = v15 - (void)v16;
    if (v19 >> 3 > v18) {
      unint64_t v18 = v19 >> 3;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      if (v20 >> 60) {
        sub_1C4949AA8();
      }
      uint64_t v21 = (char *)operator new(16 * v20);
      uint64_t v22 = (uint64_t)&v21[16 * v17];
      *(double *)uint64_t v22 = v13;
      *(double *)(v22 + 8) = v14;
      uint64_t v23 = v22;
      if (v10 == v16)
      {
LABEL_15:
        long long v12 = (double *)(v22 + 16);
        *a1 = v23;
        a1[1] = v22 + 16;
        a1[2] = (uint64_t)&v21[16 * v20];
        if (!v10) {
          goto LABEL_4;
        }
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v22 = 16 * v17;
      *(double *)uint64_t v22 = v13;
      *(double *)(v22 + 8) = v14;
      uint64_t v23 = 16 * v17;
      if (v10 == v16) {
        goto LABEL_15;
      }
    }
    do
    {
      *(_OWORD *)(v23 - 16) = *((_OWORD *)v10 - 1);
      v23 -= 16;
      v10 -= 2;
    }
    while (v10 != v16);
    uint64_t v10 = (double *)*a1;
    long long v12 = (double *)(v22 + 16);
    *a1 = v23;
    a1[1] = v22 + 16;
    a1[2] = (uint64_t)&v21[16 * v20];
    if (!v10) {
      goto LABEL_4;
    }
LABEL_20:
    operator delete(v10);
    goto LABEL_4;
  }
}

void sub_1C4B4D8C4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::getDesiredPrincipalLines(CoreHandwriting *this@<X0>, long double a2@<D0>, uint64_t a3@<X8>)
{
  double v6 = this;
  long long v12 = v6;
  if (v6)
  {
    objc_msgSend_principalLines(v6, v7, v8, v9, v10, v11);
    objc_msgSend_principalLines(v12, v13, v14, v15, v16, v17);
    CGFloat d = v36.d;
    memset(&v36.d, 0, 24);
    if (*((void *)&v38 + 1))
    {
      *(void *)&long long v39 = *((void *)&v38 + 1);
      operator delete(*((void **)&v38 + 1));
    }
    if ((void)v37)
    {
      *((void *)&v37 + 1) = v37;
      operator delete((void *)v37);
    }
  }
  else
  {
    CGFloat d = 0.0;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v37 = 0u;
    memset(&v36, 0, sizeof(v36));
  }
  if (*(void *)&v36.d)
  {
    v36.tfloat x = v36.d;
    operator delete(*(void **)&v36.d);
  }
  if (*(void *)&v36.a)
  {
    v36.CGFloat b = v36.a;
    operator delete(*(void **)&v36.a);
  }
  objc_msgSend_orientation(v12, v7, v8, v9, v10, v11);
  if (vabdd_f64(a2, v19) > 0.1)
  {
    long double v20 = a2 - v19 + dbl_1C4C445F0[a2 - v19 > 0.0];
    memset(&v36, 0, sizeof(v36));
    long long v21 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
    *(_OWORD *)&v33.CGFloat a = *MEMORY[0x1E4F1DAB8];
    *(_OWORD *)&v33.c = v21;
    *(_OWORD *)&v33.tfloat x = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
    CGAffineTransformTranslate(&v34, &v33, -**(double **)&d, -*(double *)(*(void *)&d + 8));
    CGAffineTransformRotate(&v35, &v34, -v20);
    CGAffineTransformTranslate(&v36, &v35, **(CGFloat **)&d, *(CGFloat *)(*(void *)&d + 8));
    sub_1C4B4D480((double **)a3, (float64x2_t *)&v36, (float64x2_t **)&v31);
    uint64_t v22 = *(double **)a3;
    if (*(void *)a3)
    {
      *(void *)(a3 + 8) = v22;
      operator delete(v22);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
    }
    *(_OWORD *)a3 = v31;
    *(void *)(a3 + 16) = v32;
    sub_1C4B4D480((double **)(a3 + 24), (float64x2_t *)&v36, (float64x2_t **)&v31);
    uint64_t v23 = *(void **)(a3 + 24);
    if (v23)
    {
      *(void *)(a3 + 32) = v23;
      operator delete(v23);
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
    }
    *(_OWORD *)(a3 + 24) = v31;
    *(void *)(a3 + 40) = v32;
    sub_1C4B4D480((double **)(a3 + 48), (float64x2_t *)&v36, (float64x2_t **)&v31);
    unint64_t v24 = *(void **)(a3 + 48);
    if (v24)
    {
      *(void *)(a3 + 56) = v24;
      operator delete(v24);
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 64) = 0;
    }
    *(_OWORD *)(a3 + 48) = v31;
    *(void *)(a3 + 64) = v32;
    sub_1C4B4D480((double **)(a3 + 72), (float64x2_t *)&v36, (float64x2_t **)&v31);
    double v25 = *(void **)(a3 + 72);
    if (v25)
    {
      *(void *)(a3 + 80) = v25;
      operator delete(v25);
      *(void *)(a3 + 72) = 0;
      *(void *)(a3 + 80) = 0;
      *(void *)(a3 + 88) = 0;
    }
    *(_OWORD *)(a3 + 72) = v31;
    *(void *)(a3 + 88) = v32;
  }
  double v26 = -tan(a2);
  sub_1C4B4D734((uint64_t *)&v36, *(double **)a3, *(double **)(a3 + 8), v26);
  uint64_t v27 = *(double **)a3;
  if (*(void *)a3)
  {
    *(void *)(a3 + 8) = v27;
    operator delete(v27);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  *(_OWORD *)a3 = *(_OWORD *)&v36.a;
  *(CGFloat *)(a3 + 16) = v36.c;
  sub_1C4B4D734((uint64_t *)&v36, *(double **)(a3 + 24), *(double **)(a3 + 32), v26);
  uint64_t v28 = *(void **)(a3 + 24);
  if (v28)
  {
    *(void *)(a3 + 32) = v28;
    operator delete(v28);
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
  }
  *(_OWORD *)(a3 + 24) = *(_OWORD *)&v36.a;
  *(CGFloat *)(a3 + 40) = v36.c;
  sub_1C4B4D734((uint64_t *)&v36, *(double **)(a3 + 48), *(double **)(a3 + 56), v26);
  uint64_t v29 = *(void **)(a3 + 48);
  if (v29)
  {
    *(void *)(a3 + 56) = v29;
    operator delete(v29);
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
  }
  *(_OWORD *)(a3 + 48) = *(_OWORD *)&v36.a;
  *(CGFloat *)(a3 + 64) = v36.c;
  sub_1C4B4D734((uint64_t *)&v36, *(double **)(a3 + 72), *(double **)(a3 + 80), v26);
  uint64_t v30 = *(void **)(a3 + 72);
  if (v30)
  {
    *(void *)(a3 + 80) = v30;
    operator delete(v30);
    *(void *)(a3 + 72) = 0;
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
  }
  *(_OWORD *)(a3 + 72) = *(_OWORD *)&v36.a;
  *(CGFloat *)(a3 + 88) = v36.c;
  if (d != 0.0) {
    operator delete(*(void **)&d);
  }
}

void sub_1C4B4DC54(_Unwind_Exception *a1)
{
  operator delete(v3);
  sub_1C4A2F114(v2);

  _Unwind_Resume(a1);
}

void CoreHandwriting::getAffineTransformation(double **this@<X0>, double **a2@<X1>, uint64_t a3@<X8>)
{
  v125[21] = *MEMORY[0x1E4F143B8];
  double v5 = *this;
  uint64_t v4 = this[1];
  double v6 = *a2;
  uint64_t v7 = a2[1];
  if ((char *)v4 - (char *)*this == (char *)v7 - (char *)*a2)
  {
    uint64_t v8 = *this;
    if (v5 == v4 || v6 == v7)
    {
LABEL_7:
      if (v8 == v4 && v6 == v7)
      {
        uint64_t v10 = this[3];
        uint64_t v11 = this[4];
        long long v12 = a2[3];
        double v13 = a2[4];
        if ((char *)v11 - (char *)v10 == (char *)v13 - (char *)v12)
        {
          if (v10 != v11)
          {
            while (v12 != v13)
            {
              if (*v10 != *v12 || v10[1] != v12[1]) {
                goto LABEL_51;
              }
              v10 += 2;
              v12 += 2;
              if (v10 == v11) {
                break;
              }
            }
          }
          if (v10 == v11 && v12 == v13)
          {
            uint64_t v15 = this[6];
            uint64_t v16 = this[7];
            uint64_t v17 = a2[6];
            unint64_t v18 = a2[7];
            if ((char *)v16 - (char *)v15 == (char *)v18 - (char *)v17)
            {
              if (v15 != v16)
              {
                while (v17 != v18)
                {
                  if (*v15 != *v17 || v15[1] != v17[1]) {
                    goto LABEL_51;
                  }
                  v15 += 2;
                  v17 += 2;
                  if (v15 == v16) {
                    break;
                  }
                }
              }
              if (v15 == v16 && v17 == v18)
              {
                long double v20 = this[9];
                long long v21 = this[10];
                uint64_t v22 = a2[9];
                uint64_t v23 = a2[10];
                if ((char *)v21 - (char *)v20 == (char *)v23 - (char *)v22)
                {
                  if (v20 != v21)
                  {
                    while (v22 != v23)
                    {
                      if (*v20 != *v22 || v20[1] != v22[1]) {
                        goto LABEL_51;
                      }
                      v20 += 2;
                      v22 += 2;
                      if (v20 == v21) {
                        break;
                      }
                    }
                  }
                  if (v20 == v21 && v22 == v23)
                  {
                    uint64_t v25 = MEMORY[0x1E4F1DAB8];
                    long long v26 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
                    *(_OWORD *)a3 = *MEMORY[0x1E4F1DAB8];
                    *(_OWORD *)(a3 + 16) = v26;
                    *(_OWORD *)(a3 + 32) = *(_OWORD *)(v25 + 32);
                    return;
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      while (*v8 == *v6 && v8[1] == v6[1])
      {
        v8 += 2;
        v6 += 2;
        if (v8 == v4 || v6 == v7) {
          goto LABEL_7;
        }
      }
    }
  }
LABEL_51:
  uint64_t v28 = this[9];
  uint64_t v30 = *((void *)v28 + 1);
  double v29 = *v28;
  v77[0] = v30;
  v77[1] = 0x3FF0000000000000;
  memset(&v77[2], 0, 24);
  uint64_t v32 = *((void *)v28 + 3);
  unint64_t v78 = *((void *)v28 + 2);
  unint64_t v31 = v78;
  uint64_t v79 = v32;
  uint64_t v80 = 0x3FF0000000000000;
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  uint64_t v34 = *((void *)v5 + 1);
  uint64_t v84 = *(void *)v5;
  uint64_t v33 = v84;
  uint64_t v85 = v34;
  uint64_t v86 = 0x3FF0000000000000;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  double v90 = v29;
  uint64_t v91 = v30;
  uint64_t v92 = 0x3FF0000000000000;
  uint64_t v93 = 0;
  uint64_t v94 = 0;
  uint64_t v95 = 0;
  unint64_t v96 = v78;
  uint64_t v97 = v32;
  uint64_t v98 = 0x3FF0000000000000;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  uint64_t v102 = v84;
  uint64_t v103 = v34;
  uint64_t v104 = 0x3FF0000000000000;
  *(void *)&long long v105 = v32;
  *((void *)&v105 + 1) = 0x3FF0000000000000;
  long long v106 = 0uLL;
  *(void *)&long long v107 = 0;
  *((void *)&v107 + 1) = v34;
  memset((char *)v108 + 8, 0, 40);
  *(void *)&v108[0] = 0x3FF0000000000000;
  *(double *)&long long v109 = v29;
  *((void *)&v109 + 1) = v30;
  unsigned long long v111 = __PAIR128__(v78, 0);
  long long v110 = 0x3FF0000000000000uLL;
  *(void *)&long long v112 = v32;
  long long v113 = 0uLL;
  *((void *)&v112 + 1) = 0x3FF0000000000000;
  *(void *)&long long v114 = v84;
  *((void *)&v114 + 1) = v34;
  *(void *)&long long v115 = 0x3FF0000000000000;
  uint64_t v35 = 0;
  double v36 = v29 * sub_1C4B553A4((double *)&v105) + 0.0;
  do
  {
    *(void *)&long long v105 = v31;
    if (!v35)
    {
      *((void *)&v105 + 1) = 0x3FF0000000000000;
      *(void *)&long long v107 = 0;
      long long v106 = 0uLL;
      *((void *)&v107 + 1) = v33;
      *(void *)&v108[0] = 0x3FF0000000000000;
      memset((char *)v108 + 8, 0, 40);
      *(double *)&long long v109 = v29;
      *((void *)&v109 + 1) = v30;
      long long v110 = 0x3FF0000000000000uLL;
      *(void *)&unsigned long long v111 = 0;
      *((void *)&v111 + 1) = v31;
      *(void *)&long long v112 = v32;
      *((void *)&v112 + 1) = 0x3FF0000000000000;
      long long v113 = 0uLL;
      *(void *)&long long v114 = v33;
      *((void *)&v114 + 1) = v34;
      uint64_t v41 = 4;
      goto LABEL_64;
    }
    *((void *)&v105 + 1) = v32;
    if (v35 == 1)
    {
      long long v106 = 0uLL;
      *(void *)&long long v107 = 0;
      *((void *)&v107 + 1) = v33;
      *(void *)&v108[0] = v34;
      memset((char *)v108 + 8, 0, 40);
      *(double *)&long long v109 = v29;
      *((void *)&v109 + 1) = v30;
      long long v110 = 0x3FF0000000000000uLL;
      *(void *)&unsigned long long v111 = 0;
      *((void *)&v111 + 1) = v31;
      *(void *)&long long v112 = v32;
      *((void *)&v112 + 1) = 0x3FF0000000000000;
      uint64_t v37 = 2;
      long long v113 = 0uLL;
      goto LABEL_56;
    }
    *(void *)&long long v106 = 0x3FF0000000000000;
    if (v35 == 2)
    {
      *((void *)&v106 + 1) = 0;
      *(void *)&long long v107 = 0;
      *((void *)&v107 + 1) = v33;
      *(void *)&v108[0] = v34;
      *((void *)&v108[0] + 1) = 0x3FF0000000000000;
      memset(&v108[1], 0, 32);
      uint64_t v39 = 3;
      *(void *)&long long v109 = 0;
      goto LABEL_59;
    }
    *((void *)&v106 + 1) = 0;
    *(void *)&long long v107 = 0;
    if (v35 == 3)
    {
      *((void *)&v107 + 1) = v33;
      *(void *)&v108[0] = v34;
      *((void *)&v108[0] + 1) = 0x3FF0000000000000;
      memset(&v108[1], 0, 32);
      *(void *)&long long v109 = 0;
      *((double *)&v109 + 1) = v29;
      long long v110 = 0x3FF0000000000000uLL;
      unsigned long long v111 = 0uLL;
      *(void *)&long long v112 = v31;
      *((void *)&v112 + 1) = 0x3FF0000000000000;
      *(void *)&long long v114 = 0;
      long long v113 = 0uLL;
      uint64_t v41 = 4;
      *((void *)&v114 + 1) = v33;
      goto LABEL_64;
    }
    *((void *)&v107 + 1) = v33;
    *(void *)&v108[0] = v34;
    *((void *)&v108[0] + 1) = 0x3FF0000000000000;
    memset(&v108[1], 0, 32);
    *(void *)&long long v109 = 0;
    *((double *)&v109 + 1) = v29;
    if (v35 != 4)
    {
      uint64_t v39 = 4;
LABEL_59:
      long long v40 = (char *)&v105 + 8 * v39;
      *((void *)v40 + 10) = v30;
      *((void *)v40 + 11) = 0x3FF0000000000000;
      *((void *)&v110 + 1) = 0;
      unsigned long long v111 = 0uLL;
      if (v35 == 2)
      {
        *(void *)&long long v112 = v32;
        *((void *)&v112 + 1) = 0x3FF0000000000000;
        *(void *)&long long v114 = 0;
        long long v113 = 0uLL;
        uint64_t v41 = 4;
        *((void *)&v114 + 1) = v34;
        goto LABEL_64;
      }
      *(void *)&long long v112 = v31;
      *((void *)&v112 + 1) = v32;
      long long v113 = 0uLL;
      *(void *)&long long v114 = 0;
      uint64_t v37 = 3;
LABEL_56:
      long long v38 = (char *)&v105 + 8 * v37;
      *((void *)v38 + 20) = v33;
      *((void *)v38 + 21) = v34;
      uint64_t v41 = v37 + 2;
LABEL_64:
      *((void *)&v113 + v41) = 0x3FF0000000000000;
      goto LABEL_65;
    }
    unsigned long long v111 = 0uLL;
    long long v110 = (unint64_t)v30;
    *(void *)&long long v112 = v31;
    *((void *)&v112 + 1) = v32;
    *(void *)&long long v114 = 0;
    long long v113 = 0uLL;
    *((void *)&v114 + 1) = v33;
    *(void *)&long long v115 = v34;
LABEL_65:
    double v42 = sub_1C4B553A4((double *)&v105);
    if (((_BYTE)v35 + 1)) {
      double v42 = -v42;
    }
    double v36 = v36 + *(double *)&v77[v35++] * v42;
  }
  while (v35 != 5);
  if (v36 == 0.0)
  {
    *(void *)&long long v105 = &unk_1F2012810;
    sub_1C4B55354();
  }
  unint64_t v43 = 0;
  long long v119 = 0u;
  long long v120 = 0u;
  long long v117 = 0u;
  long long v118 = 0u;
  long long v115 = 0u;
  long long v116 = 0u;
  long long v113 = 0u;
  long long v114 = 0u;
  unsigned long long v111 = 0u;
  long long v112 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  long long v107 = 0u;
  memset(v108, 0, sizeof(v108));
  uint64_t v44 = &v105;
  long long v105 = 0u;
  long long v106 = 0u;
  while (2)
  {
    uint64_t v45 = 0;
    char v46 = v43;
    while (2)
    {
      if (!(v45 * 16))
      {
        unsigned int v50 = 0;
        goto LABEL_99;
      }
      if (!v43)
      {
        double v121 = *(double *)&v30;
        goto LABEL_93;
      }
      double v121 = v29;
      if (v43 == 1)
      {
LABEL_93:
        uint64_t v122 = 0x3FF0000000000000;
        goto LABEL_94;
      }
      uint64_t v122 = v30;
      if (v43 == 2)
      {
LABEL_94:
        uint64_t v123 = 0;
        goto LABEL_95;
      }
      uint64_t v123 = 0x3FF0000000000000;
      if (v43 == 3)
      {
LABEL_95:
        uint64_t v124 = 0;
        goto LABEL_96;
      }
      uint64_t v124 = 0;
      if (v43 != 4)
      {
        v125[0] = 0;
        if (v43 != 5)
        {
          uint64_t v49 = 5;
          goto LABEL_97;
        }
        goto LABEL_98;
      }
LABEL_96:
      uint64_t v49 = 4;
LABEL_97:
      *(&v121 + v49) = 0.0;
LABEL_98:
      unsigned int v50 = 1;
      unsigned int v51 = 1;
      if (v45 == 3) {
        goto LABEL_113;
      }
LABEL_99:
      uint64_t v52 = &v121 + 5 * v50;
      if (!v43)
      {
        *(void *)uint64_t v52 = v32;
        goto LABEL_107;
      }
      *(void *)uint64_t v52 = v31;
      if (v43 == 1)
      {
LABEL_107:
        *(&v121 + 5 * v50 + 1) = 1.0;
        goto LABEL_108;
      }
      *((void *)&v121 + 5 * v50 + 1) = v32;
      if (v43 == 2)
      {
LABEL_108:
        *(&v123 + 5 * v50) = 0;
        goto LABEL_109;
      }
      *(&v123 + 5 * v50) = 0x3FF0000000000000;
      if (v43 == 3)
      {
LABEL_109:
        v125[5 * v50 - 1] = 0;
        goto LABEL_110;
      }
      v125[5 * v50 - 1] = 0;
      if (v43 != 4)
      {
        v125[5 * v50] = 0;
        if (v43 != 5)
        {
          uint64_t v53 = 5;
          goto LABEL_111;
        }
        goto LABEL_112;
      }
LABEL_110:
      uint64_t v53 = 4;
LABEL_111:
      *(&v121 + 5 * v50 + v53) = 0.0;
LABEL_112:
      unsigned int v51 = v50 + 1;
      if (v45 == 6) {
        goto LABEL_127;
      }
LABEL_113:
      uint64_t v54 = &v121 + 5 * v51;
      if (!v43)
      {
        *(void *)uint64_t v54 = v34;
        goto LABEL_121;
      }
      *(void *)uint64_t v54 = v33;
      if (v43 == 1)
      {
LABEL_121:
        *(&v121 + 5 * v51 + 1) = 1.0;
        goto LABEL_122;
      }
      *((void *)&v121 + 5 * v51 + 1) = v34;
      if (v43 == 2)
      {
LABEL_122:
        *(&v123 + 5 * v51) = 0;
        goto LABEL_123;
      }
      *(&v123 + 5 * v51) = 0x3FF0000000000000;
      if (v43 == 3)
      {
LABEL_123:
        v125[5 * v51 - 1] = 0;
        goto LABEL_124;
      }
      v125[5 * v51 - 1] = 0;
      if (v43 != 4)
      {
        v125[5 * v51] = 0;
        if (v43 != 5)
        {
          uint64_t v55 = 5;
          goto LABEL_125;
        }
        goto LABEL_126;
      }
LABEL_124:
      uint64_t v55 = 4;
LABEL_125:
      *(&v121 + 5 * v51 + v55) = 0.0;
LABEL_126:
      ++v51;
      if (v45 == 9) {
        goto LABEL_134;
      }
LABEL_127:
      unint64_t v56 = &v121 + 5 * v51;
      *unint64_t v56 = 0.0;
      v56[1] = 0.0;
      unint64_t v57 = v56 + 2;
      if (v43 < 3)
      {
        double *v57 = v29;
        goto LABEL_130;
      }
      double *v57 = 0.0;
      if (v43 == 3)
      {
LABEL_130:
        v125[5 * v51 - 1] = v30;
        goto LABEL_131;
      }
      *(double *)&v125[5 * v51 - 1] = v29;
      if (v43 == 4)
      {
LABEL_131:
        uint64_t v58 = 4;
        goto LABEL_132;
      }
      v125[5 * v51] = v30;
      if (v43 != 5)
      {
        uint64_t v58 = 5;
LABEL_132:
        *(&v121 + 5 * v51 + v58) = 1.0;
      }
      ++v51;
      if (v45 == 12)
      {
LABEL_142:
        unint64_t v62 = &v121 + 5 * v51;
        double *v62 = 0.0;
        v62[1] = 0.0;
        uint64_t v63 = v62 + 2;
        if (v43 < 3)
        {
          void *v63 = v33;
        }
        else
        {
          void *v63 = 0;
          if (v43 != 3)
          {
            v125[5 * v51 - 1] = v33;
            if (v43 != 4)
            {
              v125[5 * v51] = v34;
              if (v43 == 5) {
                goto LABEL_80;
              }
              uint64_t v47 = 5;
LABEL_79:
              *(&v121 + 5 * v51 + v47) = 1.0;
              goto LABEL_80;
            }
LABEL_78:
            uint64_t v47 = 4;
            goto LABEL_79;
          }
        }
        v125[5 * v51 - 1] = v34;
        goto LABEL_78;
      }
LABEL_134:
      uint64_t v59 = &v121 + 5 * v51;
      *uint64_t v59 = 0.0;
      v59[1] = 0.0;
      uint64_t v60 = (unint64_t *)(v59 + 2);
      if (v43 < 3)
      {
        *uint64_t v60 = v31;
        goto LABEL_137;
      }
      *uint64_t v60 = 0;
      if (v43 == 3)
      {
LABEL_137:
        v125[5 * v51 - 1] = v32;
        goto LABEL_138;
      }
      v125[5 * v51 - 1] = v31;
      if (v43 == 4)
      {
LABEL_138:
        uint64_t v61 = 4;
        goto LABEL_139;
      }
      v125[5 * v51] = v32;
      if (v43 != 5)
      {
        uint64_t v61 = 5;
LABEL_139:
        *(&v121 + 5 * v51 + v61) = 1.0;
      }
      if (v45 != 15)
      {
        ++v51;
        goto LABEL_142;
      }
LABEL_80:
      double v48 = sub_1C4B553A4(&v121);
      if (v46) {
        double v48 = -v48;
      }
      *(double *)&v44[v45] = v48;
      v45 += 3;
      ++v46;
      if (v45 != 18) {
        continue;
      }
      break;
    }
    ++v43;
    uint64_t v44 = (long long *)((char *)v44 + 8);
    if (v43 != 6) {
      continue;
    }
    break;
  }
  uint64_t v64 = a2[9];
  double v65 = v64[1];
  double v66 = v64[2];
  double v67 = v64[3];
  double v68 = **a2;
  double v69 = (*a2)[1];
  double v70 = 1.0 / v36 * *((double *)&v105 + 1) * *v64
      + 0.0
      + 1.0 / v36 * *((double *)v108 + 1) * v66
      + 1.0 / v36 * *((double *)&v109 + 1) * v68
      + 1.0 / v36 * *((double *)&v112 + 1) * v65
      + 1.0 / v36 * *((double *)&v115 + 1) * v67
      + 1.0 / v36 * *((double *)&v118 + 1) * v69;
  double v71 = 1.0 / v36 * *(double *)&v106 * *v64
      + 0.0
      + 1.0 / v36 * *(double *)&v108[1] * v66
      + 1.0 / v36 * *(double *)&v110 * v68
      + 1.0 / v36 * *(double *)&v113 * v65
      + 1.0 / v36 * *(double *)&v116 * v67
      + 1.0 / v36 * *(double *)&v119 * v69;
  double v72 = 1.0 / v36 * *((double *)&v106 + 1) * *v64
      + 0.0
      + 1.0 / v36 * *((double *)&v108[1] + 1) * v66
      + 1.0 / v36 * *((double *)&v110 + 1) * v68
      + 1.0 / v36 * *((double *)&v113 + 1) * v65
      + 1.0 / v36 * *((double *)&v116 + 1) * v67
      + 1.0 / v36 * *((double *)&v119 + 1) * v69;
  double v73 = 1.0 / v36 * *(double *)&v107 * *v64
      + 0.0
      + 1.0 / v36 * *(double *)&v108[2] * v66
      + 1.0 / v36 * *(double *)&v111 * v68
      + 1.0 / v36 * *(double *)&v114 * v65
      + 1.0 / v36 * *(double *)&v117 * v67
      + 1.0 / v36 * *(double *)&v120 * v69;
  double v74 = 1.0 / v36 * *((double *)&v107 + 1) * *v64
      + 0.0
      + 1.0 / v36 * *((double *)&v108[2] + 1) * v66
      + 1.0 / v36 * *((double *)&v111 + 1) * v68
      + 1.0 / v36 * *((double *)&v114 + 1) * v65
      + 1.0 / v36 * *((double *)&v117 + 1) * v67
      + 1.0 / v36 * *((double *)&v120 + 1) * v69;
  *(double *)a3 = 1.0 / v36 * *(double *)&v105 * *v64
                + 0.0
                + 1.0 / v36 * *(double *)v108 * v66
                + 1.0 / v36 * *(double *)&v109 * v68
                + 1.0 / v36 * *(double *)&v112 * v65
                + 1.0 / v36 * *(double *)&v115 * v67
                + 1.0 / v36 * *(double *)&v118 * v69;
  *(double *)(a3 + 8) = v72;
  *(double *)(a3 + 16) = v70;
  *(double *)(a3 + 24) = v73;
  *(double *)(a3 + 32) = v71;
  *(double *)(a3 + 40) = v74;
}

void sub_1C4B4E704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::exception a49)
{
}

id CoreHandwriting::getUnprocessedDrawing(void *a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v24 = 0;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x3032000000;
  uint64_t v27 = sub_1C4B4E980;
  uint64_t v28 = sub_1C4B4E990;
  id v18 = a1;
  double v29 = objc_alloc_init(CHDrawing);
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v1 = v18;
  uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v2, (uint64_t)&v20, (uint64_t)v30, 16, v3, v18);
  if (v4)
  {
    uint64_t v5 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v21 != v5) {
          objc_enumerationMutation(v1);
        }
        id v7 = *(id *)(*((void *)&v20 + 1) + 8 * i);
        v19[0] = MEMORY[0x1E4F143A8];
        v19[1] = 3221225472;
        v19[2] = sub_1C4B4E998;
        v19[3] = &unk_1E64E18B8;
        v19[4] = &v24;
        objc_msgSend_enumeratePointsForStroke_interpolationType_resolution_usingBlock_(CHStrokeUtilities, v8, (uint64_t)v7, 0, 1, (uint64_t)v19);
        objc_msgSend_endStroke((void *)v25[5], v9, v10, v11, v12, v13);
      }
      uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v14, (uint64_t)&v20, (uint64_t)v30, 16, v15);
    }
    while (v4);
  }

  id v16 = (id)v25[5];
  _Block_object_dispose(&v24, 8);

  return v16;
}

void sub_1C4B4E928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B4E980(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4B4E990(uint64_t a1)
{
}

uint64_t sub_1C4B4E998(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addPoint_(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2, a3, a4, a5, a6);
}

id CoreHandwriting::getUnprocessedDrawing(void *a1, void *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v26 = a2;
  uint64_t v32 = 0;
  uint64_t v33 = &v32;
  uint64_t v34 = 0x3032000000;
  uint64_t v35 = sub_1C4B4E980;
  double v36 = sub_1C4B4E990;
  uint64_t v37 = objc_alloc_init(CHDrawing);
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id obj = v3;
  uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v4, (uint64_t)&v28, (uint64_t)v38, 16, v5, v3);
  if (v6)
  {
    uint64_t v7 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v29 != v7) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(id *)(*((void *)&v28 + 1) + 8 * i);
        uint64_t v10 = objc_opt_class();
        uint64_t v14 = objc_msgSend_strokeForIdentifier_inStrokeProvider_(v10, v11, (uint64_t)v9, (uint64_t)v26, v12, v13);
        v27[0] = MEMORY[0x1E4F143A8];
        v27[1] = 3221225472;
        v27[2] = sub_1C4B4EC64;
        v27[3] = &unk_1E64E18B8;
        v27[4] = &v32;
        objc_msgSend_enumeratePointsForStroke_interpolationType_resolution_usingBlock_(CHStrokeUtilities, v15, (uint64_t)v14, 0, 1, (uint64_t)v27);
        objc_msgSend_endStroke((void *)v33[5], v16, v17, v18, v19, v20);
      }
      uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v21, (uint64_t)&v28, (uint64_t)v38, 16, v22);
    }
    while (v6);
  }

  id v23 = (id)v33[5];
  _Block_object_dispose(&v32, 8);

  return v23;
}

void sub_1C4B4EBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B4EC64(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addPoint_(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2, a3, a4, a5, a6);
}

id CoreHandwriting::getUnprocessedDrawingForStrokeGroup(void *a1, void *a2)
{
  id v3 = a2;
  id v9 = objc_msgSend_strokeIdentifiers(a1, v4, v5, v6, v7, v8);
  uint64_t v15 = objc_msgSend_allObjects(v9, v10, v11, v12, v13, v14);
  id v16 = CoreHandwriting::getUnprocessedDrawing(v15, v3);

  return v16;
}

void sub_1C4B4ECF0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4B4ED14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreHandwriting::lineAtHeight(double a1@<D0>, double a2@<D1>, double **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v7 = (double *)operator new(0x10uLL);
  double *v7 = 0.0;
  v7[1] = a1;
  a3[1] = v7 + 2;
  a3[2] = v7 + 2;
  *a3 = v7;
  uint64_t v8 = (double *)operator new(0x20uLL);
  v8[2] = a2;
  v8[3] = a1;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v7;
  id v9 = v8 + 4;
  *a3 = v8;
  a3[2] = v8 + 4;
  operator delete(v7);
  a3[1] = v9;
}

void sub_1C4B4EDB0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void CoreHandwriting::loadPointSet(CoreHandwriting *this@<X0>, double **a2@<X8>)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = this;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t v5 = NSString;
  double v72 = v4;
  uint64_t v11 = objc_msgSend_absoluteString(v4, v6, v7, v8, v9, v10);
  uint64_t v14 = objc_msgSend_stringWithContentsOfFile_encoding_error_(v5, v12, (uint64_t)v11, 4, 0, v13);

  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  uint64_t v19 = objc_msgSend_componentsSeparatedByString_(v14, v15, @"\n", v16, v17, v18);
  uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v20, (uint64_t)&v76, (uint64_t)v80, 16, v21);
  if (v22)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *(void *)v77;
    double v73 = v14;
    do
    {
      uint64_t v75 = v22;
      for (uint64_t i = 0; i != v75; ++i)
      {
        if (*(void *)v77 != v28) {
          objc_enumerationMutation(v19);
        }
        long long v30 = objc_msgSend_componentsSeparatedByString_(*(void **)(*((void *)&v76 + 1) + 8 * i), v23, @",", v24, v25, v26);
        if (objc_msgSend_count(v30, v31, v32, v33, v34, v35) == 2)
        {
          double v74 = objc_msgSend_objectAtIndexedSubscript_(v30, v36, 0, v37, v38, v39);
          objc_msgSend_floatValue(v74, v40, v41, v42, v43, v44);
          float v46 = v45;
          unsigned int v51 = objc_msgSend_objectAtIndexedSubscript_(v30, v47, 1, v48, v49, v50);
          uint64_t v52 = a2;
          objc_msgSend_floatValue(v51, v53, v54, v55, v56, v57);
          double v58 = v46;
          double v60 = v59;
          unint64_t v61 = (unint64_t)a2[2];
          if ((unint64_t)v27 < v61)
          {
            *uint64_t v27 = v58;
            v27[1] = v60;
            v27 += 2;
LABEL_22:
            uint64_t v14 = v73;
            a2[1] = v27;

            goto LABEL_23;
          }
          unint64_t v62 = *a2;
          uint64_t v63 = ((char *)v27 - (char *)*a2) >> 4;
          unint64_t v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 60) {
            sub_1C494A220();
          }
          uint64_t v65 = v61 - (void)v62;
          if (v65 >> 3 > v64) {
            unint64_t v64 = v65 >> 3;
          }
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v66 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v66 = v64;
          }
          if (v66)
          {
            if (v66 >> 60) {
              sub_1C4949AA8();
            }
            unint64_t v67 = v66;
            double v68 = (char *)operator new(16 * v66);
            unint64_t v66 = v67;
            double v69 = (double *)&v68[16 * v63];
            *double v69 = v58;
            v69[1] = v60;
            if (v27 != v62) {
              goto LABEL_18;
            }
LABEL_26:
            double v71 = v27;
            a2 = v52;
            uint64_t v27 = v69 + 2;
            *uint64_t v52 = v69;
            v52[1] = v69 + 2;
            v52[2] = (double *)&v68[16 * v66];
            if (!v71) {
              goto LABEL_22;
            }
          }
          else
          {
            double v68 = 0;
            double v69 = (double *)(16 * v63);
            *double v69 = v58;
            v69[1] = v60;
            if (v27 == v62) {
              goto LABEL_26;
            }
LABEL_18:
            double v70 = v69;
            a2 = v52;
            do
            {
              *((_OWORD *)v70 - 1) = *((_OWORD *)v27 - 1);
              v70 -= 2;
              v27 -= 2;
            }
            while (v27 != v62);
            double v71 = *v52;
            uint64_t v27 = v69 + 2;
            *uint64_t v52 = v70;
            v52[1] = v69 + 2;
            v52[2] = (double *)&v68[16 * v66];
            if (!v71) {
              goto LABEL_22;
            }
          }
          operator delete(v71);
          goto LABEL_22;
        }
LABEL_23:
      }
      uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v23, (uint64_t)&v76, (uint64_t)v80, 16, v26);
    }
    while (v22);
  }
}

void sub_1C4B4F0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v13 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v13;
    operator delete(v13);
  }

  _Unwind_Resume(a1);
}

double CoreHandwriting::getRenderedTextSizeForString(CoreHandwriting *this, NSString *a2)
{
  int v2 = (int)a2;
  id v3 = this;
  uint64_t v9 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v4, v5, v6, v7, v8);
  id v10 = sub_1C4B4F32C();
  uint64_t v16 = objc_msgSend_systemFontOfSize_(v10, v11, v12, v13, v14, v15, (double)v2);
  uint64_t v17 = sub_1C4B4F410();
  objc_msgSend_setObject_forKey_(v9, v18, (uint64_t)v16, (uint64_t)v17, v19, v20);

  id v21 = sub_1C4B4F504();
  uint64_t v27 = objc_msgSend_whiteColor(v21, v22, v23, v24, v25, v26);
  uint64_t v28 = sub_1C4B4F5E8();
  objc_msgSend_setObject_forKey_(v9, v29, (uint64_t)v27, (uint64_t)v28, v30, v31);

  id v32 = sub_1C4B4F504();
  uint64_t v38 = objc_msgSend_whiteColor(v32, v33, v34, v35, v36, v37);
  uint64_t v39 = sub_1C4B4F6DC();
  objc_msgSend_setObject_forKey_(v9, v40, (uint64_t)v38, (uint64_t)v39, v41, v42);

  objc_msgSend_sizeWithAttributes_(v3, v43, (uint64_t)v9, v44, v45, v46);
  double v48 = fmax(ceil(v47), 1.0);

  return v48;
}

void sub_1C4B4F284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B4F298(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4B4F2F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B4F308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B4F318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4B4F32C()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)qword_1EA3C9438;
  uint64_t v7 = qword_1EA3C9438;
  if (!qword_1EA3C9438)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_1C4B53510;
    v3[3] = &unk_1E64E1A88;
    v3[4] = &v4;
    sub_1C4B53510((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1C4B4F3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1C4B4F410()
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  v0 = (void **)qword_1EA3C9440;
  uint64_t v8 = qword_1EA3C9440;
  if (!qword_1EA3C9440)
  {
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = sub_1C4B53664;
    v4[3] = &unk_1E64E1A88;
    v4[4] = &v5;
    sub_1C4B53664((uint64_t)v4);
    v0 = (void **)v6[3];
  }
  _Block_object_dispose(&v5, 8);
  if (!v0)
  {
    dlerror();
    id v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v5, 8);
    _Unwind_Resume(v3);
  }
  id v1 = *v0;
  return v1;
}

id sub_1C4B4F504()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)qword_1EA3C9448;
  uint64_t v7 = qword_1EA3C9448;
  if (!qword_1EA3C9448)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_1C4B537A4;
    v3[3] = &unk_1E64E1A88;
    v3[4] = &v4;
    sub_1C4B537A4((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1C4B4F5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1C4B4F5E8()
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  v0 = (void **)qword_1EA3C9450;
  uint64_t v8 = qword_1EA3C9450;
  if (!qword_1EA3C9450)
  {
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = sub_1C4B538F8;
    v4[3] = &unk_1E64E1A88;
    v4[4] = &v5;
    sub_1C4B538F8((uint64_t)v4);
    v0 = (void **)v6[3];
  }
  _Block_object_dispose(&v5, 8);
  if (!v0)
  {
    dlerror();
    id v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v5, 8);
    _Unwind_Resume(v3);
  }
  id v1 = *v0;
  return v1;
}

id sub_1C4B4F6DC()
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  v0 = (void **)qword_1EA3C9458;
  uint64_t v8 = qword_1EA3C9458;
  if (!qword_1EA3C9458)
  {
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = sub_1C4B53A38;
    v4[3] = &unk_1E64E1A88;
    v4[4] = &v5;
    sub_1C4B53A38((uint64_t)v4);
    v0 = (void **)v6[3];
  }
  _Block_object_dispose(&v5, 8);
  if (!v0)
  {
    dlerror();
    id v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v5, 8);
    _Unwind_Resume(v3);
  }
  id v1 = *v0;
  return v1;
}

void CoreHandwriting::getImageAndPrincipalLinesForText(CoreHandwriting *this@<X0>, NSString *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = (int)a2;
  uint64_t v93 = this;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(void *)(a3 + 128) = 0;
  id v10 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v5, v6, v7, v8, v9);
  id v11 = sub_1C4B4F32C();
  double v12 = (double)v3;
  uint64_t v18 = objc_msgSend_systemFontOfSize_(v11, v13, v14, v15, v16, v17, (double)v3);
  uint64_t v19 = sub_1C4B4F410();
  objc_msgSend_setObject_forKey_(v10, v20, (uint64_t)v18, (uint64_t)v19, v21, v22);

  id v23 = sub_1C4B4F504();
  long long v29 = objc_msgSend_whiteColor(v23, v24, v25, v26, v27, v28);
  uint64_t v30 = sub_1C4B4F5E8();
  objc_msgSend_setObject_forKey_(v10, v31, (uint64_t)v29, (uint64_t)v30, v32, v33);

  id v34 = sub_1C4B4F504();
  long long v40 = objc_msgSend_whiteColor(v34, v35, v36, v37, v38, v39);
  uint64_t v41 = sub_1C4B4F6DC();
  objc_msgSend_setObject_forKey_(v10, v42, (uint64_t)v40, (uint64_t)v41, v43, v44);

  objc_msgSend_sizeWithAttributes_(v93, v45, (uint64_t)v10, v46, v47, v48);
  double v50 = v49;
  double v52 = v51;
  uint64_t v53 = (double *)operator new(0x10uLL);
  double v54 = v12 / 200.0;
  double v55 = v12 / 200.0 * 50.0;
  *uint64_t v53 = 0.0;
  v53[1] = v55;
  uint64_t v56 = (double *)operator new(0x20uLL);
  double v57 = fmax(ceil(v50), 1.0);
  v56[2] = v57;
  v56[3] = v55;
  *(_OWORD *)uint64_t v56 = *(_OWORD *)v53;
  operator delete(v53);
  *(void *)(a3 + 112) = v56;
  *(void *)(a3 + 120) = v56 + 4;
  *(void *)(a3 + 128) = v56 + 4;
  double v58 = (double *)operator new(0x10uLL);
  *double v58 = 0.0;
  v58[1] = v54 * 87.0;
  float v59 = (double *)operator new(0x20uLL);
  v59[2] = v57;
  v59[3] = v54 * 87.0;
  *(_OWORD *)float v59 = *(_OWORD *)v58;
  operator delete(v58);
  *(void *)(a3 + 88) = v59;
  *(void *)(a3 + 96) = v59 + 4;
  *(void *)(a3 + 104) = v59 + 4;
  double v60 = (double *)operator new(0x10uLL);
  *double v60 = 0.0;
  v60[1] = v54 * 192.0;
  unint64_t v61 = (double *)operator new(0x20uLL);
  v61[2] = v57;
  v61[3] = v54 * 192.0;
  *(_OWORD *)unint64_t v61 = *(_OWORD *)v60;
  operator delete(v60);
  *(void *)(a3 + 64) = v61;
  *(void *)(a3 + 72) = v61 + 4;
  *(void *)(a3 + 80) = v61 + 4;
  unint64_t v62 = (double *)operator new(0x10uLL);
  double v63 = v54 * 226.0;
  double *v62 = 0.0;
  v62[1] = v63;
  unint64_t v64 = (double *)operator new(0x20uLL);
  v64[2] = v57;
  v64[3] = v63;
  *(_OWORD *)unint64_t v64 = *(_OWORD *)v62;
  operator delete(v62);
  *(void *)(a3 + 40) = v64;
  *(void *)(a3 + 48) = v64 + 4;
  *(void *)(a3 + 56) = v64 + 4;
  uint64_t v99 = 0;
  uint64_t v100 = &v99;
  uint64_t v101 = 0x2020000000;
  uint64_t v65 = (void (*)(uint64_t, double, double, double))off_1EA3C9418;
  uint64_t v102 = off_1EA3C9418;
  if (!off_1EA3C9418)
  {
    uint64_t v94 = MEMORY[0x1E4F143A8];
    uint64_t v95 = 3221225472;
    unint64_t v96 = sub_1C4B53008;
    uint64_t v97 = &unk_1E64E1A88;
    uint64_t v98 = &v99;
    sub_1C4B53008((uint64_t)&v94);
    uint64_t v65 = (void (*)(uint64_t, double, double, double))v100[3];
  }
  _Block_object_dispose(&v99, 8);
  if (!v65) {
    goto LABEL_21;
  }
  double v66 = fmax(ceil(v52), 1.0);
  v65(1, v57, v66, 0.0);
  objc_msgSend_drawInRect_withAttributes_(v93, v67, (uint64_t)v10, v68, v69, v70, 0.0, 0.0, v57, v66);
  uint64_t v99 = 0;
  uint64_t v100 = &v99;
  uint64_t v101 = 0x2020000000;
  double v71 = (void (*)(void))off_1EA3C9428;
  uint64_t v102 = off_1EA3C9428;
  if (!off_1EA3C9428)
  {
    uint64_t v94 = MEMORY[0x1E4F143A8];
    uint64_t v95 = 3221225472;
    unint64_t v96 = sub_1C4B531BC;
    uint64_t v97 = &unk_1E64E1A88;
    uint64_t v98 = &v99;
    sub_1C4B531BC((uint64_t)&v94);
    double v71 = (void (*)(void))v100[3];
  }
  _Block_object_dispose(&v99, 8);
  if (!v71) {
    goto LABEL_21;
  }
  double v72 = v71();
  uint64_t v99 = 0;
  uint64_t v100 = &v99;
  uint64_t v101 = 0x2020000000;
  double v73 = (void (*)(void))off_1EA3C9430;
  uint64_t v102 = off_1EA3C9430;
  if (!off_1EA3C9430)
  {
    uint64_t v94 = MEMORY[0x1E4F143A8];
    uint64_t v95 = 3221225472;
    unint64_t v96 = sub_1C4B532FC;
    uint64_t v97 = &unk_1E64E1A88;
    uint64_t v98 = &v99;
    sub_1C4B532FC((uint64_t)&v94);
    double v73 = (void (*)(void))v100[3];
  }
  _Block_object_dispose(&v99, 8);
  if (v73)
  {
    v73();
    long long v79 = (CGImage *)objc_msgSend_CGImage(v72, v74, v75, v76, v77, v78);
    uint64_t v80 = malloc_type_calloc((unint64_t)(v66 * (double)(unint64_t)(v57 * 4.0)), 1uLL, 0x100004077774924uLL);
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    size_t v82 = vcvtd_n_u64_f64(v57, 2uLL);
    unint64_t v83 = (unint64_t)v57;
    unint64_t v84 = (unint64_t)v66;
    uint64_t v85 = CGBitmapContextCreate(v80, (unint64_t)v57, (unint64_t)v66, 8uLL, v82, DeviceRGB, 0x4001u);
    v104.origin.float x = 0.0;
    v104.origin.float y = 0.0;
    v104.size.width = v57;
    v104.size.height = v66;
    CGContextDrawImage(v85, v104, v79);
    CGColorSpaceRelease(DeviceRGB);
    CGContextRelease(v85);
    unint64_t v86 = (unint64_t)v66 * (unint64_t)v57;
    if (v86)
    {
      if ((v86 & 0x8000000000000000) != 0) {
        sub_1C494A220();
      }
      long long v87 = (char *)operator new(v84 * v83);
      long long v88 = &v87[v86];
      bzero(v87, v84 * v83);
    }
    else
    {
      long long v88 = 0;
      long long v87 = 0;
    }
    uint64_t v89 = 0;
    *(void *)a3 = v83;
    *(void *)(a3 + 8) = v84;
    *(void *)(a3 + 16) = v87;
    *(void *)(a3 + 24) = v88;
    uint64_t v90 = 1;
    *(void *)(a3 + 32) = v88;
    do
    {
      uint64_t v91 = 0;
      uint64_t v92 = v90;
      do
      {
        v87[v91++] = *((unsigned char *)v80 + v92);
        v92 += 4;
      }
      while (v57 > (double)(int)v91);
      ++v89;
      v90 += v82;
      v87 += v83;
    }
    while (v66 > (double)(int)v89);
    free(v80);
  }
  else
  {
LABEL_21:
    dlerror();
    abort_report_np();
    __break(1u);
  }
}

void sub_1C4B4FDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _Block_object_dispose(&a17, 8);

  sub_1C4B4FED0(v18);
  _Unwind_Resume(a1);
}

void *sub_1C4B4FED0(void *a1)
{
  int v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[8];
  if (v4)
  {
    a1[9] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[5];
  if (v5)
  {
    a1[6] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[2];
  if (v6)
  {
    a1[3] = v6;
    operator delete(v6);
  }
  return a1;
}

void CoreHandwriting::getPointsAndPrincipalLinesForText(CoreHandwriting *this@<X0>, NSString *a2@<X1>, uint64_t a3@<X8>)
{
  CoreHandwriting::getImageAndPrincipalLinesForText(this, a2, (uint64_t)v6);
  CoreHandwriting::getPointSet(v6, (double **)&__p);
  *(void *)(a3 + 112) = 0;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  if (&__p != (void **)a3) {
    sub_1C49B7D84((void *)a3, (char *)__p, v5, (v5 - (unsigned char *)__p) >> 4);
  }
  if ((void **)(a3 + 24) != &v9)
  {
    sub_1C49B7D84((void *)(a3 + 24), (char *)v9, v10, (v10 - (unsigned char *)v9) >> 4);
    sub_1C49B7D84((void *)(a3 + 48), (char *)v11, v12, (v12 - (unsigned char *)v11) >> 4);
    sub_1C49B7D84((void *)(a3 + 72), (char *)v13, v14, (v14 - (unsigned char *)v13) >> 4);
    sub_1C49B7D84((void *)(a3 + 96), (char *)v15, v16, (v16 - (unsigned char *)v15) >> 4);
  }
  if (__p)
  {
    uint64_t v5 = (char *)__p;
    operator delete(__p);
  }
  if (v15)
  {
    uint64_t v16 = (char *)v15;
    operator delete(v15);
  }
  if (v13)
  {
    uint64_t v14 = (char *)v13;
    operator delete(v13);
  }
  if (v11)
  {
    double v12 = (char *)v11;
    operator delete(v11);
  }
  if (v9)
  {
    id v10 = (char *)v9;
    operator delete(v9);
  }
  if (v7)
  {
    uint64_t v8 = v7;
    operator delete(v7);
  }
}

void sub_1C4B50078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1C4B4FED0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1C4B5008C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1C4AF4D20(v12);
  if (__p) {
    operator delete(__p);
  }
  sub_1C4B4FED0(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B500B8(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v7 = *a2;
  unint64_t v6 = a2[1];
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  int64_t v8 = v6 - v7;
  unint64_t v9 = (uint64_t)(v6 - v7) >> 4;
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = 2;
  if (v6 == v7)
  {
    id v10 = 0;
    goto LABEL_21;
  }
  if (v8 < 0) {
    sub_1C494A220();
  }
  id v10 = (char *)operator new(v8);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 32) = &v10[8 * (v8 >> 3)];
  bzero(v10, v8);
  *(void *)(a1 + 24) = &v10[v8];
  if (v9 <= 1) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = v9;
  }
  if (v11 < 4
    || ((unint64_t)v10 < v7 + 16 * v11 ? (BOOL v12 = v7 >= (unint64_t)&v10[16 * v11]) : (BOOL v12 = 1), !v12))
  {
    unint64_t v14 = 0;
LABEL_17:
    unint64_t v20 = v11 - v14;
    uint64_t v21 = 16 * v14;
    do
    {
      uint64_t v22 = &v10[v21];
      *(void *)uint64_t v22 = *(void *)(v7 + v21);
      *((void *)v22 + 1) = *(void *)(v7 + v21 + 8);
      v21 += 16;
      --v20;
    }
    while (v20);
    goto LABEL_21;
  }
  uint64_t v13 = 0;
  unint64_t v14 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v15 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    long long v16 = *(_OWORD *)(v7 + v13 + 16);
    long long v18 = *(_OWORD *)(v7 + v13 + 32);
    long long v17 = *(_OWORD *)(v7 + v13 + 48);
    uint64_t v19 = &v10[v13];
    *(_OWORD *)uint64_t v19 = *(_OWORD *)(v7 + v13);
    *((_OWORD *)v19 + 1) = v16;
    *((_OWORD *)v19 + 2) = v18;
    *((_OWORD *)v19 + 3) = v17;
    v13 += 64;
    v15 -= 4;
  }
  while (v15);
  if (v11 != v14) {
    goto LABEL_17;
  }
LABEL_21:
  unint64_t v81 = *a2;
  unint64_t v82 = a2[1];
  int64_t v23 = v82 - *a2;
  uint64_t v24 = v23 >> 4;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 40) = v23 >> 4;
  unint64_t v26 = *a3;
  unint64_t v25 = a3[1];
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  int64_t v27 = v25 - v26;
  unint64_t v28 = (uint64_t)(v25 - v26) >> 4;
  *(void *)(a1 + 48) = v28;
  *(void *)(a1 + 56) = 2;
  if (v25 == v26)
  {
    long long v29 = 0;
  }
  else
  {
    if (v27 < 0) {
      sub_1C494A220();
    }
    long long v29 = (double *)operator new(v27);
    *(void *)(a1 + 64) = v29;
    *(void *)(a1 + 80) = &v29[v27 >> 3];
    bzero(v29, v27);
    *(void *)(a1 + 72) = (char *)v29 + v27;
    if (v28 <= 1) {
      unint64_t v30 = 1;
    }
    else {
      unint64_t v30 = v28;
    }
    if (v30 >= 4
      && ((unint64_t)v29 < v26 + 16 * v30 ? (BOOL v31 = v26 >= (unint64_t)&v29[2 * v30]) : (BOOL v31 = 1), v31))
    {
      unint64_t v32 = 0;
      unint64_t v33 = v30 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v34 = v30 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v35 = *(_OWORD *)(v26 + v32 + 16);
        long long v37 = *(_OWORD *)(v26 + v32 + 32);
        long long v36 = *(_OWORD *)(v26 + v32 + 48);
        uint64_t v38 = &v29[v32 / 8];
        *(_OWORD *)uint64_t v38 = *(_OWORD *)(v26 + v32);
        *((_OWORD *)v38 + 1) = v35;
        *((_OWORD *)v38 + 2) = v37;
        *((_OWORD *)v38 + 3) = v36;
        v32 += 64;
        v34 -= 4;
      }
      while (v34);
      if (v30 == v33) {
        goto LABEL_41;
      }
    }
    else
    {
      unint64_t v33 = 0;
    }
    unint64_t v39 = v30 - v33;
    uint64_t v40 = 2 * v33;
    do
    {
      uint64_t v41 = &v29[v40];
      double *v41 = *(double *)(v26 + v40 * 8);
      v41[1] = *(double *)(v26 + v40 * 8 + 8);
      v40 += 2;
      --v39;
    }
    while (v39);
  }
LABEL_41:
  unint64_t v79 = *a3;
  unint64_t v80 = a3[1];
  size_t v42 = v80 - v79;
  uint64_t v43 = (uint64_t)(v80 - v79) >> 4;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 88) = v43;
  *(void *)(a1 + 96) = 2;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(int64x2_t *)(a1 + 320) = vdupq_n_s64(2uLL);
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 336) = 0;
  uint64_t v44 = operator new(0x20uLL);
  *uint64_t v44 = 0u;
  v44[1] = 0u;
  *(void *)(a1 + 336) = v44;
  *(void *)(a1 + 344) = v44 + 2;
  *(void *)(a1 + 352) = v44 + 2;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  uint64_t v45 = operator new(0x10uLL);
  *(void *)(a1 + 368) = v45 + 2;
  *(void *)(a1 + 376) = v45 + 2;
  *(void *)(a1 + 360) = v45;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 448) = xmmword_1C4C44600;
  *(_DWORD *)(a1 + 464) = 90;
  *(void *)uint64_t v44 = 0x3FF0000000000000;
  *((void *)v44 + 1) = 0;
  *((void *)v44 + 2) = 0;
  *((void *)v44 + 3) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 384) = xmmword_1C4C44610;
  double v46 = 0.0;
  *uint64_t v45 = 0;
  v45[1] = 0;
  if (v82 == v81) {
    goto LABEL_54;
  }
  if (v80 == v79)
  {
    uint64_t v61 = 0;
    goto LABEL_56;
  }
  uint64_t v47 = 0;
  do
  {
    uint64_t v48 = (double *)&v10[16 * v47];
    uint64_t v49 = *(uint64_t *)v48;
    uint64_t v50 = *((uint64_t *)v48 + 1);
    if (v42 < 0x40)
    {
      unint64_t v51 = 0;
LABEL_50:
      unint64_t v59 = v43 - v51;
      double v60 = &v29[2 * v51 + 1];
      do
      {
        double v46 = v46
            + (*(double *)&v50 - *v60) * (*(double *)&v50 - *v60)
            + (*(double *)&v49 - *(v60 - 1)) * (*(double *)&v49 - *(v60 - 1));
        v60 += 2;
        --v59;
      }
      while (v59);
      goto LABEL_44;
    }
    float64x2_t v52 = (float64x2_t)vdupq_lane_s64(v49, 0);
    float64x2_t v53 = (float64x2_t)vdupq_lane_s64(v50, 0);
    unint64_t v54 = v43 & 0xFFFFFFFFFFFFFFFCLL;
    double v55 = v29 + 4;
    do
    {
      uint64_t v56 = v55 - 4;
      float64x2x2_t v86 = vld2q_f64(v56);
      float64x2x2_t v87 = vld2q_f64(v55);
      float64x2_t v57 = vsubq_f64(v52, v86.val[0]);
      float64x2_t v58 = vsubq_f64(v52, v87.val[0]);
      v86.val[0] = vsubq_f64(v53, v86.val[1]);
      v86.val[1] = vsubq_f64(v53, v87.val[1]);
      v86.val[0] = vmlaq_f64(vmulq_f64(v86.val[0], v86.val[0]), v57, v57);
      v86.val[1] = vmlaq_f64(vmulq_f64(v86.val[1], v86.val[1]), v58, v58);
      double v46 = v46 + v86.val[0].f64[0] + v86.val[0].f64[1] + v86.val[1].f64[0] + v86.val[1].f64[1];
      v55 += 8;
      v54 -= 4;
    }
    while (v54);
    unint64_t v51 = v43 & 0xFFFFFFFFFFFFFFFCLL;
    if (v43 != (v43 & 0xFFFFFFFFFFFFFFFCLL)) {
      goto LABEL_50;
    }
LABEL_44:
    ++v47;
  }
  while (v47 != v24);
  *(double *)(a1 + 384) = v46;
LABEL_54:
  uint64_t v61 = (uint64_t)(v80 - v79) >> 4;
LABEL_56:
  *(double *)(a1 + 384) = v46 / (double)(unint64_t)((v23 >> 3) * v61);
  unint64_t v62 = v43 * v24;
  if (v43 * v24)
  {
    if (v62 >> 61) {
      sub_1C494A220();
    }
    size_t v63 = 8 * v62;
    unint64_t v64 = (char *)operator new(8 * v62);
    unint64_t v62 = (unint64_t)&v64[8 * v62];
    bzero(v64, v63);
    uint64_t v65 = &v64[v63];
  }
  else
  {
    uint64_t v65 = 0;
    unint64_t v64 = 0;
  }
  *((void *)&v83 + 1) = v23 >> 4;
  *(void *)&long long v83 = (uint64_t)(v80 - v79) >> 4;
  *(_OWORD *)(a1 + 400) = v83;
  *(void *)(a1 + 416) = v64;
  *(void *)(a1 + 424) = v65;
  *(void *)(a1 + 432) = v62;
  if (v80 == v79)
  {
    unint64_t v67 = 0;
    uint64_t v68 = 0;
    double v66 = 0;
  }
  else
  {
    if ((v42 & 0x8000000000000000) != 0) {
      sub_1C494A220();
    }
    double v66 = (char *)operator new(v42 >> 1);
    unint64_t v67 = &v66[8 * v43];
    bzero(v66, v42 >> 1);
    uint64_t v68 = &v66[v42 >> 1];
  }
  *(void *)(a1 + 288) = v66;
  *(void *)(a1 + 296) = v68;
  *(void *)(a1 + 304) = v67;
  if (v82 == v81)
  {
    uint64_t v70 = 0;
    double v71 = 0;
    uint64_t v69 = 0;
  }
  else
  {
    if (v23 < 0) {
      sub_1C494A220();
    }
    uint64_t v69 = (char *)operator new((unint64_t)v23 >> 1);
    uint64_t v70 = &v69[8 * v24];
    bzero(v69, (unint64_t)v23 >> 1);
    double v71 = &v69[(unint64_t)v23 >> 1];
  }
  *(void *)(a1 + 264) = v69;
  *(void *)(a1 + 272) = v71;
  *(void *)(a1 + 280) = v70;
  *(void *)&long long v84 = v23 >> 4;
  *((void *)&v84 + 1) = 2;
  if (v82 == v81)
  {
    double v73 = 0;
    double v74 = 0;
    double v72 = 0;
  }
  else
  {
    if (v23 < 0) {
      sub_1C494A220();
    }
    double v72 = (char *)operator new(v23);
    double v73 = &v72[8 * (v23 >> 3)];
    bzero(v72, v23);
    double v74 = &v72[v23];
  }
  *(_OWORD *)(a1 + 144) = v84;
  *(void *)(a1 + 160) = v72;
  *(void *)(a1 + 168) = v74;
  *(void *)(a1 + 176) = v73;
  *(void *)&long long v85 = (uint64_t)(v80 - v79) >> 4;
  *((void *)&v85 + 1) = 2;
  if (v80 == v79)
  {
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    uint64_t v75 = 0;
  }
  else
  {
    if ((v42 & 0x8000000000000000) != 0) {
      sub_1C494A220();
    }
    uint64_t v75 = (char *)operator new(v42);
    uint64_t v76 = &v75[8 * ((uint64_t)v42 >> 3)];
    bzero(v75, v42);
    uint64_t v77 = &v75[v42];
  }
  *(_OWORD *)(a1 + 104) = v85;
  *(void *)(a1 + 120) = v75;
  *(void *)(a1 + 128) = v77;
  *(void *)(a1 + 136) = v76;
  return a1;
}

void sub_1C4B506F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  uint64_t v22 = *(void **)(v20 + 232);
  if (v22)
  {
    v19[43] = v22;
    operator delete(v22);
    int64_t v23 = (void *)v19[36];
    if (!v23)
    {
LABEL_3:
      uint64_t v24 = (void *)v19[33];
      if (!v24) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else
  {
    int64_t v23 = (void *)v19[36];
    if (!v23) {
      goto LABEL_3;
    }
  }
  v19[37] = v23;
  operator delete(v23);
  uint64_t v24 = (void *)v19[33];
  if (!v24)
  {
LABEL_4:
    unint64_t v25 = (void *)v19[30];
    if (!v25) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  v19[34] = v24;
  operator delete(v24);
  unint64_t v25 = (void *)v19[30];
  if (!v25)
  {
LABEL_5:
    unint64_t v26 = (void *)v19[25];
    if (!v26) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  v19[31] = v25;
  operator delete(v25);
  unint64_t v26 = (void *)v19[25];
  if (!v26)
  {
LABEL_6:
    int64_t v27 = (void *)v19[20];
    if (!v27) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  v19[26] = v26;
  operator delete(v26);
  int64_t v27 = (void *)v19[20];
  if (!v27)
  {
LABEL_7:
    unint64_t v28 = (void *)v19[15];
    if (!v28) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  v19[21] = v27;
  operator delete(v27);
  unint64_t v28 = (void *)v19[15];
  if (!v28)
  {
LABEL_8:
    long long v29 = *a11;
    if (!*a11) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  v19[16] = v28;
  operator delete(v28);
  long long v29 = *a11;
  if (!*a11)
  {
LABEL_9:
    unint64_t v30 = *a10;
    if (!*a10) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_19:
  v19[9] = v29;
  operator delete(v29);
  unint64_t v30 = *a10;
  if (!*a10) {
LABEL_11:
  }
    _Unwind_Resume(exception_object);
LABEL_10:
  v19[3] = v30;
  operator delete(v30);
  goto LABEL_11;
}

void sub_1C4B50878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (*a11) {
    JUMPOUT(0x1C4B50860);
  }
  JUMPOUT(0x1C4B507ACLL);
}

void sub_1C4B5088C()
{
  if (!*v0) {
    JUMPOUT(0x1C4B507C0);
  }
  JUMPOUT(0x1C4B507B8);
}

double CoreHandwriting::CPDAffineRegistration::initialize_transformation(CoreHandwriting::CPDAffineRegistration *this)
{
  uint64_t v2 = *((void *)this + 41);
  id v1 = (_OWORD *)*((void *)this + 42);
  _OWORD *v1 = xmmword_1C4C3A690;
  double result = 0.0;
  *(_OWORD *)((char *)v1 + 8 * v2) = xmmword_1C4C3A6A0;
  uint64_t v4 = (void *)*((void *)this + 45);
  *uint64_t v4 = 0;
  v4[1] = 0;
  return result;
}

double CoreHandwriting::CPDAffineRegistration::initialize_sigma2(CoreHandwriting::CPDAffineRegistration *this)
{
  *((void *)this + 48) = 0;
  uint64_t v1 = *((void *)this + 5);
  uint64_t v2 = *((void *)this + 11);
  double v3 = 0.0;
  if (v1 && v2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *((void *)this + 1);
    uint64_t v6 = *((void *)this + 2);
    uint64_t v7 = *((void *)this + 8) + 8;
    uint64_t v8 = 8 * *((void *)this + 7);
    do
    {
      unint64_t v9 = (double *)v7;
      uint64_t v10 = v2;
      do
      {
        double v11 = *(double *)(v6 + 8 * v4 * v5) - *(v9 - 1);
        double v12 = *(double *)(v6 + 8 * (v4 * v5 + 1)) - *v9;
        double v3 = v3 + v12 * v12 + v11 * v11;
        *((double *)this + 48) = v3;
        unint64_t v9 = (double *)((char *)v9 + v8);
        --v10;
      }
      while (v10);
      ++v4;
    }
    while (v4 != v1);
  }
  double result = v3 / (double)(unint64_t)(v2 * v1 * *((void *)this + 12));
  *((double *)this + 48) = result;
  return result;
}

double CoreHandwriting::CPDAffineRegistration::transform_point_cloud(CoreHandwriting::CPDAffineRegistration *this)
{
  uint64_t v1 = *((void *)this + 11);
  if (v1)
  {
    uint64_t v3 = *((void *)this + 41);
    uint64_t v2 = (double *)*((void *)this + 42);
    uint64_t v4 = (double *)*((void *)this + 45);
    uint64_t v5 = (double *)(*((void *)this + 15) + 8);
    uint64_t v6 = 8 * *((void *)this + 14);
    uint64_t v7 = (double *)(*((void *)this + 8) + 8);
    uint64_t v8 = 8 * *((void *)this + 7);
    do
    {
      *(v5 - 1) = *v4 + *v7 * v2[v3] + *(v7 - 1) * *v2;
      double result = v4[1] + *v7 * v2[v3 + 1] + *(v7 - 1) * v2[1];
      *uint64_t v5 = result;
      uint64_t v5 = (double *)((char *)v5 + v6);
      uint64_t v7 = (double *)((char *)v7 + v8);
      --v1;
    }
    while (v1);
  }
  return result;
}

void CoreHandwriting::CPDAffineRegistration::expectation(CoreHandwriting::CPDAffineRegistration *this)
{
  uint64_t v1 = this;
  unint64_t v2 = *((void *)this + 5);
  if (!v2)
  {
    __p = 0;
    goto LABEL_86;
  }
  if (v2 >> 61) {
    sub_1C494A220();
  }
  __p = (char *)operator new(8 * v2);
  bzero(__p, 8 * v2);
  uint64_t v75 = v1;
  unint64_t v91 = *((void *)v1 + 11);
  if (v91)
  {
    uint64_t v103 = 0;
    uint64_t v89 = *((void *)v1 + 2);
    uint64_t v90 = (double *)((char *)v1 + 384);
    uint64_t v3 = *((void *)v1 + 14);
    unint64_t v4 = *((void *)v1 + 15);
    uint64_t v84 = *((void *)v1 + 1);
    unint64_t v80 = v4;
    uint64_t v5 = *((void *)v1 + 51);
    uint64_t v6 = *((void *)v1 + 52);
    unint64_t v81 = v4 + 8;
    uint64_t v82 = v5;
    unint64_t v79 = v4 + 8 + 8 * v91;
    uint64_t v78 = (double *)((char *)v1 + 392);
    BOOL v8 = v5 != 1 || v3 != 1;
    char v83 = v8;
    uint64_t v92 = (_OWORD *)(v6 + 16);
    unint64_t v76 = v4 + 16;
    uint64_t v86 = 8 * v3;
    uint64_t v87 = 8 * v5;
    uint64_t v88 = *((void *)v1 + 52);
    uint64_t v77 = v6 + 8 * v91;
    unint64_t v85 = v2;
    do
    {
      uint64_t v9 = 8 * v103;
      uint64_t v10 = (double *)&__p[8 * v103];
      double v11 = v10 + 1;
      double v12 = *v10;
      char v13 = v83;
      if (v91 < 0xA) {
        char v13 = 1;
      }
      if (v13)
      {
        unint64_t v14 = 0;
      }
      else
      {
        unint64_t v14 = 0;
        unint64_t v28 = v88 + v9;
        unint64_t v29 = v77 + v9;
        unint64_t v30 = v89 + 8 * v84 * v103;
        BOOL v32 = v88 + v9 < v30 + 16 && v30 < v29;
        BOOL v34 = v28 < v79 && v80 < v29;
        BOOL v36 = v28 < (unint64_t)v78 && (unint64_t)v90 < v29;
        BOOL v38 = (unint64_t)v10 < v30 + 16 && v30 < (unint64_t)v11;
        BOOL v40 = (unint64_t)v10 < v79 && v80 < (unint64_t)v11;
        BOOL v42 = v10 < v78 && v90 < v11;
        BOOL v43 = (unint64_t)v10 >= v29 || v28 >= (unint64_t)v11;
        if (v43 && !v32 && !v34 && !v36 && !v38 && !v40 && !v42)
        {
          uint64_t v44 = v92;
          uint64_t v45 = (const double *)(v89 + 8 * v103 * v84);
          float64x2_t v46 = vld1q_dup_f64(v45);
          uint64_t v47 = (const double *)(v89 + 8 * (v103 * v84 + 1));
          float64x2_t v48 = vld1q_dup_f64(v47);
          float64x2_t v95 = v48;
          float64x2_t v96 = v46;
          v48.f64[0] = *v90;
          float64x2_t v94 = (float64x2_t)vdupq_lane_s64(*(_OWORD *)&vaddq_f64(v48, v48), 0);
          unint64_t v49 = v76;
          unint64_t v50 = v91 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            float64x2_t v51 = vsubq_f64(v96, *(float64x2_t *)(v49 - 16));
            float64x2_t v52 = vsubq_f64(v96, *(float64x2_t *)v49);
            float64x2_t v53 = vsubq_f64(v95, *(float64x2_t *)(v49 - 8));
            float64x2_t v54 = vsubq_f64(v95, *(float64x2_t *)(v49 + 8));
            float64x2_t v99 = vdivq_f64(vnegq_f64(vmlaq_f64(vmulq_f64(v53, v53), v51, v51)), v94);
            float64x2_t v101 = vdivq_f64(vnegq_f64(vmlaq_f64(vmulq_f64(v54, v54), v52, v52)), v94);
            double v102 = exp(v99.f64[1]);
            double v98 = exp(v99.f64[0]);
            *(double *)&long long v55 = v98;
            *((double *)&v55 + 1) = v102;
            long long v100 = v55;
            double v97 = exp(v101.f64[1]);
            *(double *)&long long v56 = exp(v101.f64[0]);
            *((double *)&v56 + 1) = v97;
            *(v44 - 1) = v100;
            *uint64_t v44 = v56;
            double v12 = v12 + v98 + v102 + *(double *)&v56 + v97;
            v44 += 2;
            v49 += 32;
            v50 -= 4;
          }
          while (v50);
          uint64_t v21 = __p;
          *(double *)&__p[8 * v103] = v12;
          unint64_t v14 = v91 & 0xFFFFFFFFFFFFFFFCLL;
          long long v16 = v90;
          uint64_t v18 = v86;
          uint64_t v17 = v87;
          uint64_t v20 = v103 * v84 + 1;
          uint64_t v19 = v103 * v84;
          uint64_t v15 = v89;
          if (v91 == (v91 & 0xFFFFFFFFFFFFFFFCLL)) {
            goto LABEL_11;
          }
          goto LABEL_17;
        }
      }
      uint64_t v15 = v89;
      long long v16 = v90;
      uint64_t v18 = v86;
      uint64_t v17 = v87;
      uint64_t v20 = v103 * v84 + 1;
      uint64_t v19 = v103 * v84;
      uint64_t v21 = __p;
LABEL_17:
      unint64_t v22 = v91 - v14;
      int64_t v23 = (double *)(v88 + 8 * (v103 + v82 * v14));
      uint64_t v24 = (double *)(v81 + v18 * v14);
      do
      {
        double v25 = *(double *)(v15 + 8 * v19) - *(v24 - 1);
        double v26 = *(double *)(v15 + 8 * v20) - *v24;
        long double v27 = exp(-(v26 * v26 + v25 * v25) / (*v16 + *v16));
        *int64_t v23 = v27;
        double v12 = v12 + v27;
        *(double *)&v21[8 * v103] = v12;
        int64_t v23 = (double *)((char *)v23 + v17);
        uint64_t v24 = (double *)((char *)v24 + v18);
        --v22;
      }
      while (v22);
LABEL_11:
      uint64_t v92 = (_OWORD *)((char *)v92 + 8);
      unint64_t v2 = v85;
      ++v103;
    }
    while (v103 != v85);
  }
  if (v2 >= 4)
  {
    unint64_t v57 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    float64x2_t v58 = (float64x2_t *)(__p + 16);
    float64x2_t v59 = (float64x2_t)vdupq_n_s64(0x3E80000000000000uLL);
    unint64_t v60 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v1 = v75;
    while (1)
    {
      int32x2_t v61 = vmovn_s64(vcgtq_f64(v59, v58[-1]));
      if (v61.i8[0])
      {
        v58[-1].f64[0] = 0.00000011920929;
        if ((v61.i8[4] & 1) == 0)
        {
LABEL_78:
          int32x2_t v62 = vmovn_s64(vcgtq_f64(v59, *v58));
          if ((v62.i8[0] & 1) == 0) {
            goto LABEL_79;
          }
          goto LABEL_83;
        }
      }
      else if ((v61.i8[4] & 1) == 0)
      {
        goto LABEL_78;
      }
      v58[-1].f64[1] = 0.00000011920929;
      int32x2_t v62 = vmovn_s64(vcgtq_f64(v59, *v58));
      if ((v62.i8[0] & 1) == 0)
      {
LABEL_79:
        if (v62.i8[4]) {
          goto LABEL_84;
        }
        goto LABEL_75;
      }
LABEL_83:
      v58->f64[0] = 0.00000011920929;
      if (v62.i8[4]) {
LABEL_84:
      }
        v58->f64[1] = 0.00000011920929;
LABEL_75:
      v58 += 2;
      v60 -= 4;
      if (!v60)
      {
        if (v2 == v57) {
          goto LABEL_86;
        }
        goto LABEL_103;
      }
    }
  }
  unint64_t v57 = 0;
  uint64_t v1 = v75;
  do
  {
LABEL_103:
    if (*(double *)&__p[8 * v57] < 0.00000011920929) {
      *(void *)&__p[8 * v57] = 0x3E80000000000000;
    }
    ++v57;
  }
  while (v2 != v57);
LABEL_86:
  *((void *)v1 + 39) = 0;
  uint64_t v63 = *((void *)v1 + 33);
  uint64_t v64 = *((void *)v1 + 34) - v63;
  if (v64 >= 1) {
    bzero(*((void **)v1 + 33), 8 * (((unint64_t)v64 >> 3) - ((unint64_t)v64 > 7)) + 8);
  }
  uint64_t v65 = (double *)*((void *)v1 + 36);
  uint64_t v66 = *((void *)v1 + 37) - (void)v65;
  if (v66 >= 1) {
    bzero(*((void **)v1 + 36), 8 * (((unint64_t)v66 >> 3) - ((unint64_t)v66 > 7)) + 8);
  }
  if (v2 && (uint64_t v67 = *((void *)v1 + 11)) != 0)
  {
    uint64_t v68 = 0;
    uint64_t v69 = (double *)*((void *)v1 + 52);
    uint64_t v70 = 8 * *((void *)v1 + 51);
    do
    {
      double v71 = v69;
      double v72 = v65;
      uint64_t v73 = v67;
      do
      {
        double v74 = *v71 / *(double *)&__p[8 * v68];
        double *v71 = v74;
        *(double *)(v63 + 8 * v68) = v74 + *(double *)(v63 + 8 * v68);
        double *v72 = *v71 + *v72;
        ++v72;
        *((double *)v1 + 39) = *v71 + *((double *)v1 + 39);
        double v71 = (double *)((char *)v71 + v70);
        --v73;
      }
      while (v73);
      ++v68;
      ++v69;
    }
    while (v68 != v2);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_1C4B50FDC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(void *)(v1 - 120) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::CPDAffineRegistration::maximization(double **this)
{
  CoreHandwriting::CPDAffineRegistration::update_transform((CoreHandwriting::CPDAffineRegistration *)this);
  unint64_t v2 = this[11];
  if (v2)
  {
    unint64_t v4 = this[41];
    uint64_t v3 = this[42];
    uint64_t v5 = this[45];
    uint64_t v6 = this[15] + 1;
    uint64_t v7 = 8 * (void)this[14];
    BOOL v8 = this[8] + 1;
    uint64_t v9 = 8 * (void)this[7];
    do
    {
      *(v6 - 1) = *v5 + *v8 * v3[(void)v4] + *(v8 - 1) * *v3;
      *uint64_t v6 = v5[1] + *v8 * v3[(void)v4 + 1] + *(v8 - 1) * v3[1];
      uint64_t v6 = (double *)((char *)v6 + v7);
      BOOL v8 = (double *)((char *)v8 + v9);
      unint64_t v2 = (double *)((char *)v2 - 1);
    }
    while (v2);
  }
  CoreHandwriting::CPDAffineRegistration::update_variance((CoreHandwriting::CPDAffineRegistration *)this);
}

__n128 CoreHandwriting::CPDAffineRegistration::getTransform@<Q0>(CoreHandwriting::CPDAffineRegistration *this@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v2 = (_OWORD *)*((void *)this + 42);
  uint64_t v3 = (__n128 *)*((void *)this + 45);
  long long v4 = *(_OWORD *)((char *)v2 + 8 * *((void *)this + 41));
  *a2 = *v2;
  a2[1] = v4;
  __n128 result = *v3;
  a2[2] = *v3;
  return result;
}

double CoreHandwriting::CPDAffineRegistration::point_distance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = (double *)(*(void *)(a2 + 16) + 8 * *(void *)(a2 + 8) * a3);
  uint64_t v6 = (double *)(*(void *)(a4 + 16) + 8 * *(void *)(a4 + 8) * a5);
  return (v5[1] - v6[1]) * (v5[1] - v6[1]) + (*v5 - *v6) * (*v5 - *v6);
}

void CoreHandwriting::CPDAffineRegistration::update_transform(CoreHandwriting::CPDAffineRegistration *this)
{
  unint64_t v2 = (double *)operator new(0x10uLL);
  *unint64_t v2 = 0.0;
  v2[1] = 0.0;
  uint64_t v3 = (double *)operator new(0x10uLL);
  long long v4 = v3;
  *uint64_t v3 = 0.0;
  v3[1] = 0.0;
  double v5 = 0.0;
  uint64_t v6 = *((void *)this + 5);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 11);
    double v8 = 0.0;
    double v9 = 0.0;
    double v10 = 0.0;
    if (v7)
    {
      uint64_t v11 = 0;
      double v12 = (double *)*((void *)this + 52);
      uint64_t v13 = *((void *)this + 1);
      uint64_t v14 = *((void *)this + 2);
      uint64_t v15 = *((void *)this + 8) + 8;
      uint64_t v16 = 8 * *((void *)this + 7);
      uint64_t v17 = 8 * *((void *)this + 51);
      do
      {
        uint64_t v18 = v12;
        uint64_t v19 = (double *)v15;
        uint64_t v20 = v7;
        do
        {
          double v10 = v10 + *v18 * *(double *)(v14 + 8 * v11 * v13);
          *unint64_t v2 = v10;
          double v9 = v9 + *v18 * *(double *)(v14 + 8 * (v11 * v13 + 1));
          v2[1] = v9;
          double v8 = v8 + *v18 * *(v19 - 1);
          *uint64_t v3 = v8;
          double v5 = v5 + *v18 * *v19;
          v3[1] = v5;
          uint64_t v19 = (double *)((char *)v19 + v16);
          uint64_t v18 = (double *)((char *)v18 + v17);
          --v20;
        }
        while (v20);
        ++v11;
        ++v12;
      }
      while (v11 != v6);
    }
  }
  else
  {
    double v8 = 0.0;
    double v9 = 0.0;
    double v10 = 0.0;
  }
  double v21 = *((double *)this + 39);
  *unint64_t v2 = v10 / v21;
  v2[1] = v9 / v21;
  *uint64_t v3 = v8 / v21;
  v3[1] = v5 / v21;
  if (v6)
  {
    unint64_t v22 = (double *)(*((void *)this + 20) + 8);
    uint64_t v23 = 8 * *((void *)this + 19);
    uint64_t v24 = (double *)(*((void *)this + 2) + 8);
    uint64_t v25 = 8 * *((void *)this + 1);
    do
    {
      *(v22 - 1) = *(v24 - 1) - *v2;
      *unint64_t v22 = *v24 - v2[1];
      unint64_t v22 = (double *)((char *)v22 + v23);
      uint64_t v24 = (double *)((char *)v24 + v25);
      --v6;
    }
    while (v6);
  }
  unint64_t v26 = *((void *)this + 11);
  unint64_t v115 = v26;
  uint64_t v116 = 2;
  long long v118 = 0;
  long long v119 = 0;
  long long v117 = 0;
  unint64_t v27 = (2 * v26) >> 61;
  uint64_t v28 = v26;
  if (!(2 * v26))
  {
    unint64_t v29 = 0;
    if (!v26) {
      goto LABEL_29;
    }
LABEL_17:
    unint64_t v30 = 0;
    uint64_t v31 = *((void *)this + 7);
    unint64_t v32 = *((void *)this + 8);
    uint64_t v33 = *(uint64_t *)v4;
    uint64_t v34 = *((uint64_t *)v4 + 1);
    if (v26 >= 6 && v31 == 1)
    {
      if ((unint64_t)v29 >= v32 + 8 * v26 + 8 || v32 >= (unint64_t)&v29[v26])
      {
        float64x2_t v36 = (float64x2_t)vdupq_lane_s64(v33, 0);
        unint64_t v30 = v26 & 0xFFFFFFFFFFFFFFFELL;
        float64x2_t v37 = (float64x2_t)vdupq_lane_s64(v34, 0);
        BOOL v38 = (float64x2_t *)(v32 + 8);
        unint64_t v39 = v26 & 0xFFFFFFFFFFFFFFFELL;
        BOOL v40 = (double *)v29;
        do
        {
          v120.val[0] = vsubq_f64(*(float64x2_t *)((char *)v38 - 8), v36);
          float64x2_t v41 = *v38++;
          v120.val[1] = vsubq_f64(v41, v37);
          vst2q_f64(v40, v120);
          v40 += 4;
          v39 -= 2;
        }
        while (v39);
        if (v26 == v30) {
          goto LABEL_29;
        }
      }
      else
      {
        unint64_t v30 = 0;
      }
    }
    unint64_t v42 = v26 - v30;
    BOOL v43 = &v29[v30].f64[1];
    uint64_t v44 = (double *)(v32 + 8 * v30 * v31 + 8);
    uint64_t v45 = 8 * v31;
    do
    {
      *(v43 - 1) = *(v44 - 1) - *(double *)&v33;
      double *v43 = *v44 - *(double *)&v34;
      v43 += 2;
      uint64_t v44 = (double *)((char *)v44 + v45);
      --v42;
    }
    while (v42);
    goto LABEL_29;
  }
  if (v27) {
    sub_1C494A220();
  }
  unint64_t v29 = (float64x2_t *)operator new(16 * v26);
  long long v117 = v29;
  long long v119 = &v29[v26];
  bzero(v29, 16 * v26);
  long long v118 = &v29[v28];
  if (v26) {
    goto LABEL_17;
  }
LABEL_29:
  double v98 = v29;
  sub_1C4B519EC((unint64_t *)v104, (unint64_t *)this + 18);
  sub_1C4B519EC(&v99, (unint64_t *)this + 50);
  sub_1C4B51B84(&v108, v104, v100, (float64x2_t *)v101);
  sub_1C4B51B84((uint64_t *)&v112, &v108, 2, v29);
  float64x2_t v46 = (void *)*((void *)this + 25);
  *(_OWORD *)((char *)this + 184) = v112;
  if (v46)
  {
    *((void *)this + 26) = v46;
    operator delete(v46);
    *((void *)this + 25) = 0;
    *((void *)this + 26) = 0;
    *((void *)this + 27) = 0;
  }
  *(_OWORD *)((char *)this + 200) = v113;
  *((void *)this + 27) = v114;
  uint64_t v114 = 0;
  long long v113 = 0uLL;
  if (__p)
  {
    unsigned long long v111 = __p;
    operator delete(__p);
  }
  if (v101)
  {
    double v102 = (float64_t *)v101;
    operator delete(v101);
  }
  if (v105)
  {
    long long v106 = (char *)v105;
    operator delete(v105);
  }
  v104[0] = 2;
  v104[1] = v26;
  long long v106 = 0;
  long long v107 = 0;
  long long v105 = 0;
  if (!(2 * v26))
  {
    uint64_t v47 = 0;
    if (!v26) {
      goto LABEL_44;
    }
    goto LABEL_42;
  }
  if (v27) {
    sub_1C494A220();
  }
  uint64_t v47 = (char *)operator new(16 * v26);
  long long v105 = v47;
  long long v107 = &v47[16 * v26];
  bzero(v47, 16 * v26);
  long long v106 = &v47[v28 * 16];
  if (v26)
  {
LABEL_42:
    float64x2_t v48 = (uint64_t *)&v29->f64[1];
    unint64_t v49 = v26;
    unint64_t v50 = v47;
    do
    {
      *unint64_t v50 = *(v48 - 1);
      uint64_t v51 = *v48;
      v48 += 2;
      v50[v26] = v51;
      ++v50;
      --v49;
    }
    while (v49);
  }
LABEL_44:
  double v97 = v47;
  float64x2_t v53 = (uint64_t *)*((void *)this + 36);
  float64x2_t v52 = (void *)*((void *)this + 37);
  unint64_t v54 = v52 - v53;
  unint64_t v99 = v54;
  unint64_t v100 = v54;
  unint64_t v55 = v54 * v54;
  double v102 = 0;
  uint64_t v103 = 0;
  float64x2_t v101 = 0;
  if (!(v54 * v54))
  {
    long long v56 = 0;
    if (v52 == v53) {
      goto LABEL_54;
    }
    goto LABEL_49;
  }
  if (v55 >> 61) {
    sub_1C494A220();
  }
  long long v56 = (float64x2_t *)operator new(8 * v55);
  float64x2_t v101 = v56;
  uint64_t v103 = (char *)&v56->f64[v55];
  bzero(v56, 8 * v55);
  double v102 = &v56->f64[v55];
  if (v52 != v53)
  {
LABEL_49:
    if (v54 <= 1) {
      uint64_t v57 = 1;
    }
    else {
      uint64_t v57 = v52 - v53;
    }
    f64 = (void *)v56->f64;
    do
    {
      uint64_t v59 = *v53++;
      void *f64 = v59;
      f64 += v54 + 1;
      --v57;
    }
    while (v57);
  }
LABEL_54:
  sub_1C4B51B84(&v108, v104, v54, v56);
  sub_1C4B51B84((uint64_t *)&v112, &v108, 2, v98);
  unint64_t v60 = (void *)*((void *)this + 30);
  *((_OWORD *)this + 14) = v112;
  if (v60)
  {
    *((void *)this + 31) = v60;
    operator delete(v60);
    *((void *)this + 30) = 0;
    *((void *)this + 31) = 0;
    *((void *)this + 32) = 0;
  }
  *((_OWORD *)this + 15) = v113;
  *((void *)this + 32) = v114;
  uint64_t v114 = 0;
  long long v113 = 0uLL;
  if (__p)
  {
    unsigned long long v111 = __p;
    operator delete(__p);
  }
  if (v56) {
    operator delete(v56);
  }
  if (v97) {
    operator delete(v97);
  }
  int32x2_t v61 = (float64x2_t *)operator new(0x20uLL);
  int32x2_t v62 = (double *)*((void *)this + 30);
  uint64_t v63 = &v62[*((void *)this + 29)];
  double v65 = *v63;
  double v64 = v63[1];
  double v66 = *v62;
  double v67 = v62[1];
  double v68 = 1.0 / (*v62 * v64 - *v63 * v67);
  v61->f64[0] = v64 * v68;
  v61->f64[1] = -(v67 * v68);
  v61[1].f64[0] = -(v65 * v68);
  v61[1].f64[1] = v68 * v66;
  sub_1C4B51B84(&v108, (uint64_t *)this + 23, 2, v61);
  uint64_t v70 = v108;
  unint64_t v69 = v109;
  *(void *)&long long v112 = v109;
  *((void *)&v112 + 1) = v108;
  unint64_t v71 = v108 * v109;
  uint64_t v114 = 0;
  long long v113 = 0uLL;
  if (!(v108 * v109))
  {
    uint64_t v73 = 0;
    double v74 = 0;
    double v72 = 0;
    if (!v109) {
      goto LABEL_87;
    }
    goto LABEL_67;
  }
  if (v71 >> 61) {
    sub_1C494A220();
  }
  double v72 = (char *)operator new(8 * v71);
  uint64_t v73 = &v72[8 * v71];
  bzero(v72, 8 * v71);
  double v74 = v73;
  if (v69)
  {
LABEL_67:
    if (!v70) {
      goto LABEL_87;
    }
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    uint64_t v77 = __p;
    uint64_t v78 = 8 * v69;
    BOOL v80 = v69 < 4 || v70 != 1;
    unint64_t v81 = v72 + 16;
    uint64_t v82 = (char *)__p + 16;
    do
    {
      char v83 = (unint64_t)(&v72[8 * v76] - &v77[v78 * v76]) < 0x20 || v80;
      if (v83)
      {
        unint64_t v84 = 0;
      }
      else
      {
        unint64_t v85 = v69 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v86 = (long long *)v82;
        uint64_t v87 = v81;
        do
        {
          long long v88 = *v86;
          *(v87 - 1) = *(v86 - 1);
          *uint64_t v87 = v88;
          v87 += 2;
          v86 += 2;
          v85 -= 4;
        }
        while (v85);
        unint64_t v84 = v69 & 0xFFFFFFFFFFFFFFFCLL;
        if (v69 == (v69 & 0xFFFFFFFFFFFFFFFCLL)) {
          goto LABEL_75;
        }
      }
      unint64_t v89 = v69 - v84;
      uint64_t v90 = &v72[8 * v76 + 8 * v70 * v84];
      unint64_t v91 = (uint64_t *)&v77[8 * v84 + 8 * v75];
      do
      {
        uint64_t v92 = *v91++;
        *(void *)uint64_t v90 = v92;
        v90 += 8 * v70;
        --v89;
      }
      while (v89);
LABEL_75:
      ++v76;
      unint64_t v81 = (_OWORD *)((char *)v81 + 8);
      v82 += v78;
      v75 += v69;
    }
    while (v76 != v70);
  }
LABEL_87:
  *((_OWORD *)this + 20) = v112;
  uint64_t v93 = (void *)*((void *)this + 42);
  if (v93)
  {
    *((void *)this + 43) = v93;
    operator delete(v93);
    *((void *)this + 42) = 0;
    *((void *)this + 43) = 0;
    *((void *)this + 44) = 0;
  }
  *((void *)this + 42) = v72;
  *((void *)this + 43) = v74;
  *((void *)this + 44) = v73;
  if (__p)
  {
    unsigned long long v111 = __p;
    operator delete(__p);
  }
  operator delete(v61);
  float64x2_t v94 = (double *)*((void *)this + 42);
  float64x2_t v95 = &v94[*((void *)this + 41)];
  float64x2_t v96 = (double *)*((void *)this + 45);
  *float64x2_t v96 = *v2 - *v94 * *v4 - *v95 * v4[1];
  v96[1] = v2[1] - v94[1] * *v4 - v95[1] * v4[1];
  if (v98) {
    operator delete(v98);
  }
  operator delete(v4);
  operator delete(v2);
}

void sub_1C4B51858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  operator delete(v31);
  if (__p)
  {
    *(void *)(v32 - 104) = __p;
    operator delete(__p);
  }
  operator delete(v30);
  operator delete(v29);
  _Unwind_Resume(a1);
}

void sub_1C4B519B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a13) {
    JUMPOUT(0x1C4B518A4);
  }
  JUMPOUT(0x1C4B51890);
}

void sub_1C4B519C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (!a18) {
    JUMPOUT(0x1C4B518B8);
  }
  JUMPOUT(0x1C4B518ACLL);
}

void sub_1C4B519D8()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x1C4B518F8);
  }
  JUMPOUT(0x1C4B518ECLL);
}

void sub_1C4B519EC(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  unint64_t v3 = a2[1];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = 0;
  unint64_t v5 = v4 * v3;
  a1[3] = 0;
  a1[4] = 0;
  if (v4 * v3)
  {
    if (v5 >> 61) {
      sub_1C494A220();
    }
    uint64_t v7 = (char *)operator new(8 * v5);
    a1[2] = (unint64_t)v7;
    a1[4] = (unint64_t)&v7[8 * v5];
    bzero(v7, 8 * v5);
    a1[3] = (unint64_t)&v7[8 * v5];
    if (v3) {
      BOOL v8 = v4 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v7 = 0;
    if (v3) {
      BOOL v9 = v4 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
LABEL_14:
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      unint64_t v12 = a2[2];
      uint64_t v13 = 8 * v3;
      BOOL v15 = v3 < 4 || v4 != 1;
      uint64_t v16 = v7 + 16;
      uint64_t v17 = (long long *)(v12 + 16);
      do
      {
        char v18 = (unint64_t)&v7[8 * v11 - v12 - v13 * v11] < 0x20 || v15;
        if (v18)
        {
          unint64_t v19 = 0;
        }
        else
        {
          unint64_t v20 = v3 & 0xFFFFFFFFFFFFFFFCLL;
          double v21 = v17;
          unint64_t v22 = v16;
          do
          {
            long long v23 = *v21;
            *(v22 - 1) = *(v21 - 1);
            *unint64_t v22 = v23;
            v22 += 2;
            v21 += 2;
            v20 -= 4;
          }
          while (v20);
          unint64_t v19 = v3 & 0xFFFFFFFFFFFFFFFCLL;
          if (v3 == (v3 & 0xFFFFFFFFFFFFFFFCLL)) {
            goto LABEL_21;
          }
        }
        unint64_t v24 = v3 - v19;
        uint64_t v25 = &v7[8 * v11 + 8 * v4 * v19];
        unint64_t v26 = (uint64_t *)(v12 + 8 * (v19 + v10));
        do
        {
          uint64_t v27 = *v26++;
          *(void *)uint64_t v25 = v27;
          v25 += 8 * v4;
          --v24;
        }
        while (v24);
LABEL_21:
        ++v11;
        uint64_t v16 = (_OWORD *)((char *)v16 + 8);
        uint64_t v17 = (long long *)((char *)v17 + v13);
        v10 += v3;
      }
      while (v11 != v4);
    }
  }
}

void sub_1C4B51B68(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C4B51B84(uint64_t *a1, uint64_t *a2, uint64_t a3, float64x2_t *a4)
{
  uint64_t v7 = *a2;
  *a1 = *a2;
  a1[1] = a3;
  a1[2] = 0;
  unint64_t v8 = v7 * a3;
  a1[3] = 0;
  a1[4] = 0;
  if (!(v7 * a3))
  {
    uint64_t v10 = 0;
    if (!v7) {
      return;
    }
    goto LABEL_6;
  }
  if (v8 >> 61) {
    sub_1C494A220();
  }
  uint64_t v10 = (char *)operator new(8 * v8);
  a1[2] = (uint64_t)v10;
  a1[4] = (uint64_t)&v10[8 * v8];
  bzero(v10, 8 * v8);
  a1[3] = (uint64_t)&v10[8 * v8];
  if (v7)
  {
LABEL_6:
    if (a3)
    {
      unint64_t v11 = a2[1];
      if (v11)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = (float64x2_t *)a2[2];
        uint64_t v15 = 8 * a3;
        uint64_t v16 = 8 * v11;
        BOOL v18 = v11 > 9 && a3 == 1;
        unint64_t v19 = v14 + 1;
        do
        {
          uint64_t v20 = 0;
          uint64_t v21 = v13 * a3;
          unint64_t v22 = a4 + 1;
          do
          {
            uint64_t v23 = v20 + v21;
            *(void *)&v10[8 * v20 + 8 * v21] = 0;
            double v24 = 0.0;
            unint64_t v25 = 0;
            if (!v18) {
              goto LABEL_34;
            }
            unint64_t v26 = (unint64_t)&v10[8 * v20 + 8 + v15 * v13];
            unint64_t v27 = (unint64_t)&v10[8 * v20 + v15 * v13];
            BOOL v28 = v27 >= (unint64_t)&a4->f64[v20 + (unint64_t)v16 / 8]
               || (unint64_t)&a4->f64[v20] >= v26;
            BOOL v29 = !v28;
            if ((unint64_t)v14 + v16 * v13 < v26 && v27 < (unint64_t)v14 + v16 + v16 * v13) {
              goto LABEL_34;
            }
            if (v29) {
              goto LABEL_34;
            }
            unint64_t v31 = v11 & 0xFFFFFFFFFFFFFFFCLL;
            uint64_t v32 = v19;
            uint64_t v33 = v22;
            do
            {
              float64x2_t v34 = vmulq_f64(v32[-1], v33[-1]);
              float64x2_t v35 = vmulq_f64(*v32, *v33);
              double v24 = v24 + v34.f64[0] + v34.f64[1] + v35.f64[0] + v35.f64[1];
              v33 += 2;
              v32 += 2;
              v31 -= 4;
            }
            while (v31);
            *(double *)&v10[8 * v23] = v24;
            unint64_t v25 = v11 & 0xFFFFFFFFFFFFFFFCLL;
            if (v11 != (v11 & 0xFFFFFFFFFFFFFFFCLL))
            {
LABEL_34:
              unint64_t v36 = v11 - v25;
              float64x2_t v37 = &a4->f64[v20 + a3 * v25];
              BOOL v38 = &v14->f64[v12 + v25];
              do
              {
                double v39 = *v38++;
                double v24 = v24 + v39 * *v37;
                *(double *)&v10[8 * v23] = v24;
                float64x2_t v37 = (double *)((char *)v37 + v15);
                --v36;
              }
              while (v36);
            }
            ++v20;
            unint64_t v22 = (float64x2_t *)((char *)v22 + 8);
          }
          while (v20 != a3);
          ++v13;
          unint64_t v19 = (float64x2_t *)((char *)v19 + v16);
          v12 += v11;
        }
        while (v13 != v7);
      }
      else
      {
        bzero(v10, 8 * v8);
      }
    }
  }
}

void sub_1C4B51DD0(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::CPDAffineRegistration::update_variance(CoreHandwriting::CPDAffineRegistration *this)
{
  double v2 = *((double *)this + 55);
  sub_1C4B51B84(&v69, (uint64_t *)this + 23, *((void *)this + 41), *((float64x2_t **)this + 42));
  if (v70)
  {
    unint64_t v3 = __p;
    uint64_t v4 = v70;
    if (v70 == 1)
    {
      unint64_t v5 = 0;
      double v6 = 0.0;
    }
    else
    {
      unint64_t v5 = v70 & 0xFFFFFFFFFFFFFFFELL;
      double v6 = 0.0;
      unint64_t v7 = v70 & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v8 = (double *)__p;
      do
      {
        double v6 = v6 + *v8 + v8[v4 + 1];
        v8 += 2 * v70 + 2;
        v7 -= 2;
      }
      while (v7);
      if (v70 == v5) {
        goto LABEL_11;
      }
    }
    unint64_t v9 = v70 - v5;
    uint64_t v10 = 8 * v5 * (v70 + 1);
    uint64_t v11 = v4 * 8 + 8;
    do
    {
      double v6 = v6 + *(double *)((char *)__p + v10);
      v10 += v11;
      --v9;
    }
    while (v9);
LABEL_11:
    double v72 = v3;
    operator delete(v3);
    goto LABEL_12;
  }
  unint64_t v3 = __p;
  double v6 = 0.0;
  if (__p) {
    goto LABEL_11;
  }
LABEL_12:
  unint64_t v12 = *((void *)this + 19);
  uint64_t v13 = (float64x2_t *)*((void *)this + 20);
  uint64_t v14 = *((void *)this + 18);
  uint64_t v69 = v14;
  uint64_t v70 = v12;
  unint64_t v15 = v14 * v12;
  double v72 = 0;
  uint64_t v73 = 0;
  __p = 0;
  if (!(v14 * v12))
  {
    uint64_t v17 = 0;
    BOOL v18 = (uint64_t *)((char *)this + 320);
    if (!v12) {
      goto LABEL_30;
    }
    goto LABEL_17;
  }
  if (v15 >> 61) {
    sub_1C494A220();
  }
  size_t v16 = 8 * v15;
  uint64_t v17 = (float64x2_t *)operator new(8 * v15);
  bzero(v17, v16);
  BOOL v18 = (uint64_t *)((char *)this + 320);
  if (v12)
  {
LABEL_17:
    if (!v14) {
      goto LABEL_30;
    }
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 8 * v12;
    unint64_t v22 = v17 + 1;
    uint64_t v23 = v13 + 1;
    do
    {
      if (v12 >= 4 && (unint64_t)((char *)v17 + v21 * v20 - ((char *)v13 + v21 * v20)) >= 0x20)
      {
        unint64_t v30 = v12 & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v31 = v23;
        uint64_t v32 = v22;
        do
        {
          float64x2_t v33 = vmulq_f64(*v31, *v31);
          v32[-1] = vmulq_f64(v31[-1], v31[-1]);
          *uint64_t v32 = v33;
          v32 += 2;
          v31 += 2;
          v30 -= 4;
        }
        while (v30);
        unint64_t v24 = v12 & 0xFFFFFFFFFFFFFFFCLL;
        if (v12 == (v12 & 0xFFFFFFFFFFFFFFFCLL)) {
          goto LABEL_19;
        }
      }
      else
      {
        unint64_t v24 = 0;
      }
      unint64_t v25 = v12 - v24;
      uint64_t v26 = v24 + v19;
      unint64_t v27 = &v17->f64[v26];
      BOOL v28 = &v13->f64[v26];
      do
      {
        double v29 = *v28++;
        *v27++ = v29 * v29;
        --v25;
      }
      while (v25);
LABEL_19:
      ++v20;
      unint64_t v22 = (float64x2_t *)((char *)v22 + v21);
      uint64_t v23 = (float64x2_t *)((char *)v23 + v21);
      v19 += v12;
    }
    while (v20 != v14);
  }
LABEL_30:
  unint64_t v34 = *((void *)this + 5);
  if (!v34)
  {
    double v38 = 0.0;
    goto LABEL_42;
  }
  float64x2_t v35 = (float64x2_t *)*((void *)this + 33);
  if (v34 < 4 || v12 != 1)
  {
    unint64_t v37 = 0;
    double v38 = 0.0;
LABEL_40:
    unint64_t v44 = v34 - v37;
    uint64_t v45 = &v17->f64[v37 * v12 + 1];
    float64x2_t v46 = &v35->f64[v37];
    do
    {
      double v47 = *v46++;
      double v38 = v38 + v47 * (*(v45 - 1) + *v45);
      v45 += v12;
      --v44;
    }
    while (v44);
    goto LABEL_42;
  }
  unint64_t v37 = v34 & 0xFFFFFFFFFFFFFFFCLL;
  double v39 = v17 + 1;
  BOOL v40 = v35 + 1;
  double v38 = 0.0;
  unint64_t v41 = v34 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    float64x2_t v42 = vmulq_f64(v40[-1], vaddq_f64(v39[-1], *(float64x2_t *)((char *)v39 - 8)));
    float64x2_t v43 = vmulq_f64(*v40, vaddq_f64(*v39, *(float64x2_t *)((char *)v39 + 8)));
    double v38 = v38 + v42.f64[0] + v42.f64[1] + v43.f64[0] + v43.f64[1];
    v39 += 2;
    v40 += 2;
    v41 -= 4;
  }
  while (v41);
  if (v34 != v37) {
    goto LABEL_40;
  }
LABEL_42:
  sub_1C4B51B84(v62, v18, *((void *)this + 29), *((float64x2_t **)this + 30));
  sub_1C4B51B84(&v65, v62, *((void *)this + 41), *((float64x2_t **)this + 42));
  if (v66)
  {
    float64x2_t v48 = v67;
    uint64_t v49 = v66;
    if (v66 == 1)
    {
      unint64_t v50 = 0;
      double v51 = 0.0;
LABEL_56:
      unint64_t v59 = v66 - v50;
      uint64_t v60 = 8 * v50 * (v66 + 1);
      uint64_t v61 = v49 * 8 + 8;
      do
      {
        double v51 = v51 + *(double *)((char *)v67 + v60);
        v60 += v61;
        --v59;
      }
      while (v59);
      goto LABEL_58;
    }
    unint64_t v50 = v66 & 0xFFFFFFFFFFFFFFFELL;
    double v51 = 0.0;
    unint64_t v57 = v66 & 0xFFFFFFFFFFFFFFFELL;
    float64x2_t v58 = (double *)v67;
    do
    {
      double v51 = v51 + *v58 + v58[v49 + 1];
      v58 += 2 * v66 + 2;
      v57 -= 2;
    }
    while (v57);
    if (v66 != v50) {
      goto LABEL_56;
    }
  }
  else
  {
    float64x2_t v48 = v67;
    double v51 = 0.0;
    if (!v67)
    {
      float64x2_t v52 = v63;
      if (!v63) {
        goto LABEL_48;
      }
      goto LABEL_47;
    }
  }
LABEL_58:
  double v68 = v48;
  operator delete(v48);
  float64x2_t v52 = v63;
  if (v63)
  {
LABEL_47:
    double v64 = v52;
    operator delete(v52);
  }
LABEL_48:
  long double v53 = *((double *)this + 48);
  double v54 = *((double *)this + 39) * (double)*((unint64_t *)this + 12);
  double v55 = (v38 + v6 * -2.0 + v51) / (v53 + v53) + v54 * 0.5 * log(v53);
  *((double *)this + 55) = v55;
  double v56 = (v38 - v6) / v54;
  *((double *)this + 48) = v56;
  *((double *)this + 49) = vabdd_f64(v55, v2);
  if (v56 <= 0.0) {
    *((double *)this + 48) = *((double *)this + 56) / 10.0;
  }
  if (v17) {
    operator delete(v17);
  }
}

void sub_1C4B52228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (v23) {
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C4B5226C(double **a1@<X0>, double *a2@<X1>, double **a3@<X8>)
{
  double v3 = a2[2];
  double v4 = a2[3];
  double v5 = *a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  unint64_t v7 = *a1;
  double v6 = a1[1];
  uint64_t v8 = (char *)v6 - (char *)*a1;
  if (v6 != *a1)
  {
    if (v8 < 0) {
      sub_1C494A220();
    }
    uint64_t v10 = (double *)operator new((char *)v6 - (char *)*a1);
    *a3 = v10;
    a3[1] = v10;
    a3[2] = &v10[2 * (v8 >> 4)];
    double v11 = 1.0 / (v4 - v3);
    while (1)
    {
      double v13 = v11 * (*v7 - v5);
      double v14 = v11 * (v7[1] - v3);
      unint64_t v15 = (unint64_t)a3[2];
      if ((unint64_t)v10 >= v15) {
        break;
      }
      *uint64_t v10 = v13;
      v10[1] = v14;
      uint64_t v12 = (uint64_t)(v10 + 2);
LABEL_5:
      a3[1] = (double *)v12;
      v7 += 2;
      uint64_t v10 = (double *)v12;
      if (v7 == v6) {
        return;
      }
    }
    size_t v16 = *a3;
    uint64_t v17 = ((char *)v10 - (char *)*a3) >> 4;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 60) {
      sub_1C494A220();
    }
    uint64_t v19 = v15 - (void)v16;
    if (v19 >> 3 > v18) {
      unint64_t v18 = v19 >> 3;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      if (v20 >> 60) {
        sub_1C4949AA8();
      }
      uint64_t v21 = (char *)operator new(16 * v20);
      unint64_t v22 = (double *)&v21[16 * v17];
      uint64_t v23 = (double *)&v21[16 * v20];
      *unint64_t v22 = v13;
      v22[1] = v14;
      uint64_t v12 = (uint64_t)(v22 + 2);
      if (v10 == v16) {
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v22 = (double *)(16 * v17);
      uint64_t v23 = 0;
      *unint64_t v22 = v13;
      v22[1] = v14;
      uint64_t v12 = 16 * v17 + 16;
      if (v10 == v16)
      {
LABEL_21:
        *a3 = v22;
        a3[1] = (double *)v12;
        a3[2] = v23;
LABEL_22:
        operator delete(v10);
        goto LABEL_5;
      }
    }
    do
    {
      *((_OWORD *)v22 - 1) = *((_OWORD *)v10 - 1);
      v22 -= 2;
      v10 -= 2;
    }
    while (v10 != v16);
    uint64_t v10 = *a3;
    *a3 = v22;
    a3[1] = (double *)v12;
    a3[2] = v23;
    if (!v10) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
}

void sub_1C4B52434(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double CoreHandwriting::adjust_for_scaling@<D0>(double **a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  v15[0] = a3;
  v15[1] = a4;
  v15[2] = a5;
  v15[3] = a6;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  sub_1C4B5226C(a1, v15, (double **)&v13);
  uint64_t v8 = v14;
  *(_OWORD *)a2 = v13;
  *(void *)(a2 + 16) = v8;
  sub_1C4B5226C(a1 + 3, v15, (double **)&v13);
  uint64_t v9 = v14;
  *(_OWORD *)(a2 + 24) = v13;
  *(void *)(a2 + 40) = v9;
  sub_1C4B5226C(a1 + 6, v15, (double **)&v13);
  uint64_t v10 = v14;
  *(_OWORD *)(a2 + 48) = v13;
  *(void *)(a2 + 64) = v10;
  sub_1C4B5226C(a1 + 9, v15, (double **)&v13);
  uint64_t v11 = v14;
  double result = *(double *)&v13;
  *(_OWORD *)(a2 + 72) = v13;
  *(void *)(a2 + 88) = v11;
  return result;
}

void sub_1C4B52518(_Unwind_Exception *a1)
{
  sub_1C4A2F114(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B5252C(_Unwind_Exception *a1)
{
  sub_1C4A2F114(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B52540(_Unwind_Exception *a1)
{
  sub_1C4A2F114(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B52554(_Unwind_Exception *a1)
{
  sub_1C4A2F114(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B52568(double **a1@<X0>, double *a2@<X1>, double **a3@<X8>)
{
  double v3 = a2[2];
  double v4 = a2[3];
  double v5 = *a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  unint64_t v7 = *a1;
  double v6 = a1[1];
  uint64_t v8 = (char *)v6 - (char *)*a1;
  if (v6 != *a1)
  {
    if (v8 < 0) {
      sub_1C494A220();
    }
    uint64_t v10 = (double *)operator new((char *)v6 - (char *)*a1);
    double v11 = v4 - v3;
    *a3 = v10;
    a3[1] = v10;
    a3[2] = &v10[2 * (v8 >> 4)];
    while (1)
    {
      double v13 = v5 + *v7 * v11;
      double v14 = v3 + v7[1] * v11;
      unint64_t v15 = (unint64_t)a3[2];
      if ((unint64_t)v10 >= v15) {
        break;
      }
      *uint64_t v10 = v13;
      v10[1] = v14;
      uint64_t v12 = (uint64_t)(v10 + 2);
LABEL_5:
      a3[1] = (double *)v12;
      v7 += 2;
      uint64_t v10 = (double *)v12;
      if (v7 == v6) {
        return;
      }
    }
    size_t v16 = *a3;
    uint64_t v17 = ((char *)v10 - (char *)*a3) >> 4;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 60) {
      sub_1C494A220();
    }
    uint64_t v19 = v15 - (void)v16;
    if (v19 >> 3 > v18) {
      unint64_t v18 = v19 >> 3;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      if (v20 >> 60) {
        sub_1C4949AA8();
      }
      uint64_t v21 = (char *)operator new(16 * v20);
      unint64_t v22 = (double *)&v21[16 * v17];
      uint64_t v23 = (double *)&v21[16 * v20];
      *unint64_t v22 = v13;
      v22[1] = v14;
      uint64_t v12 = (uint64_t)(v22 + 2);
      if (v10 == v16) {
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v22 = (double *)(16 * v17);
      uint64_t v23 = 0;
      *unint64_t v22 = v13;
      v22[1] = v14;
      uint64_t v12 = 16 * v17 + 16;
      if (v10 == v16)
      {
LABEL_21:
        *a3 = v22;
        a3[1] = (double *)v12;
        a3[2] = v23;
LABEL_22:
        operator delete(v10);
        goto LABEL_5;
      }
    }
    do
    {
      *((_OWORD *)v22 - 1) = *((_OWORD *)v10 - 1);
      v22 -= 2;
      v10 -= 2;
    }
    while (v10 != v16);
    uint64_t v10 = *a3;
    *a3 = v22;
    a3[1] = (double *)v12;
    a3[2] = v23;
    if (!v10) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
}

void sub_1C4B52720(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double CoreHandwriting::adjust_back_for_scaling@<D0>(double **a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  v15[0] = a3;
  v15[1] = a4;
  v15[2] = a5;
  v15[3] = a6;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  sub_1C4B52568(a1, v15, (double **)&v13);
  uint64_t v8 = v14;
  *(_OWORD *)a2 = v13;
  *(void *)(a2 + 16) = v8;
  sub_1C4B52568(a1 + 3, v15, (double **)&v13);
  uint64_t v9 = v14;
  *(_OWORD *)(a2 + 24) = v13;
  *(void *)(a2 + 40) = v9;
  sub_1C4B52568(a1 + 6, v15, (double **)&v13);
  uint64_t v10 = v14;
  *(_OWORD *)(a2 + 48) = v13;
  *(void *)(a2 + 64) = v10;
  sub_1C4B52568(a1 + 9, v15, (double **)&v13);
  uint64_t v11 = v14;
  double result = *(double *)&v13;
  *(_OWORD *)(a2 + 72) = v13;
  *(void *)(a2 + 88) = v11;
  return result;
}

void sub_1C4B52804(_Unwind_Exception *a1)
{
  sub_1C4A2F114(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B52818(_Unwind_Exception *a1)
{
  sub_1C4A2F114(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B5282C(_Unwind_Exception *a1)
{
  sub_1C4A2F114(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B52840(_Unwind_Exception *a1)
{
  sub_1C4A2F114(v1);
  _Unwind_Resume(a1);
}

void CoreHandwriting::merge_lines(CoreHandwriting *this@<X0>, const CoreHandwriting::PrincipalLines *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  unint64_t v7 = (_OWORD *)*((void *)this + 9);
  uint64_t v8 = operator new(0x10uLL);
  *uint64_t v8 = *v7;
  uint64_t v9 = *((void *)a2 + 9);
  uint64_t v10 = operator new(0x20uLL);
  long long v11 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v10 = *v8;
  *((_OWORD *)v10 + 1) = v11;
  operator delete(v8);
  sub_1C49B7D84((void *)(a3 + 72), (char *)v10, (char *)v10 + 32, 2uLL);
  uint64_t v12 = (_OWORD *)*((void *)this + 6);
  long long v13 = operator new(0x10uLL);
  *long long v13 = *v12;
  uint64_t v14 = *((void *)a2 + 6);
  unint64_t v15 = operator new(0x20uLL);
  long long v16 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)unint64_t v15 = *v13;
  *((_OWORD *)v15 + 1) = v16;
  operator delete(v13);
  sub_1C49B7D84((void *)(a3 + 48), (char *)v15, (char *)v15 + 32, 2uLL);
  uint64_t v17 = (_OWORD *)*((void *)this + 3);
  unint64_t v18 = operator new(0x10uLL);
  *unint64_t v18 = *v17;
  uint64_t v19 = *((void *)a2 + 3);
  unint64_t v20 = operator new(0x20uLL);
  long long v21 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)unint64_t v20 = *v18;
  *((_OWORD *)v20 + 1) = v21;
  operator delete(v18);
  sub_1C49B7D84((void *)(a3 + 24), (char *)v20, (char *)v20 + 32, 2uLL);
  unint64_t v22 = *(_OWORD **)this;
  uint64_t v23 = operator new(0x10uLL);
  *uint64_t v23 = *v22;
  uint64_t v24 = *(void *)a2;
  unint64_t v25 = operator new(0x20uLL);
  long long v26 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)unint64_t v25 = *v23;
  *((_OWORD *)v25 + 1) = v26;
  operator delete(v23);
  sub_1C49B7D84((void *)a3, (char *)v25, (char *)v25 + 32, 2uLL);
  operator delete(v25);
  operator delete(v20);
  operator delete(v15);
  operator delete(v10);
}

void sub_1C4B52A30(_Unwind_Exception *a1)
{
  operator delete(v4);
  operator delete(v3);
  operator delete(v2);
  sub_1C4A2F114(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B52ABC(_Unwind_Exception *a1)
{
  operator delete(v2);
  sub_1C4A2F114(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B52ADC(double **a1@<X0>, double **a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  double v4 = a1[3];
  double v6 = *v4;
  double v5 = v4[1];
  if ((v4[3] - v5) / (v4[2] - *v4) == 0.0) {
    double v7 = 0.001;
  }
  else {
    double v7 = (v4[3] - v5) / (v4[2] - *v4);
  }
  double v8 = -1.0 / v7;
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 == v10)
  {
    double v12 = -3.40282347e38;
    double v11 = 3.40282347e38;
  }
  else
  {
    double v11 = 3.40282347e38;
    double v12 = -3.40282347e38;
    do
    {
      double v14 = *v9;
      double v13 = v9[1];
      v9 += 2;
      double v15 = v13 + -v8 * v14;
      if (v15 > v12) {
        double v12 = v15;
      }
      if (v15 < v11) {
        double v11 = v15;
      }
    }
    while (v9 != v10);
  }
  long long v16 = a1[9];
  double v57 = *v16;
  double v58 = v16[1];
  uint64_t v17 = a1[6];
  double v59 = *v17;
  double v60 = v17[1];
  double v18 = v5 - v7 * v6;
  double v55 = **a1;
  double v56 = (*a1)[1];
  double v19 = v8 - v7;
  double v20 = (v18 - v12) / (v8 - v7);
  double v21 = v18 + v7 * v20;
  double v22 = (v18 - v11) / (v8 - v7);
  double v23 = v18 + v7 * v22;
  uint64_t v24 = (double *)operator new(0x10uLL);
  if (v20 >= v22)
  {
    *uint64_t v24 = v22;
    v24[1] = v23;
    unint64_t v25 = (char *)operator new(0x20uLL);
    *((double *)v25 + 2) = v20;
    *((double *)v25 + 3) = v21;
  }
  else
  {
    *uint64_t v24 = v20;
    v24[1] = v21;
    unint64_t v25 = (char *)operator new(0x20uLL);
    *((double *)v25 + 2) = v22;
    *((double *)v25 + 3) = v23;
  }
  *(_OWORD *)unint64_t v25 = *(_OWORD *)v24;
  long long v26 = v25;
  unint64_t v27 = v25 + 32;
  operator delete(v24);
  sub_1C49B7D84((void *)(a3 + 24), v26, v27, 2uLL);
  double v28 = v60 - v7 * v59;
  double v29 = (v28 - v12) / v19;
  double v30 = v28 + v7 * v29;
  double v31 = (v28 - v11) / v19;
  double v32 = v28 + v7 * v31;
  float64x2_t v33 = (double *)operator new(0x10uLL);
  if (v29 >= v31)
  {
    *float64x2_t v33 = v31;
    v33[1] = v32;
    unint64_t v34 = (char *)operator new(0x20uLL);
    *((double *)v34 + 2) = v29;
    *((double *)v34 + 3) = v30;
  }
  else
  {
    *float64x2_t v33 = v29;
    v33[1] = v30;
    unint64_t v34 = (char *)operator new(0x20uLL);
    *((double *)v34 + 2) = v31;
    *((double *)v34 + 3) = v32;
  }
  *(_OWORD *)unint64_t v34 = *(_OWORD *)v33;
  float64x2_t v35 = v34;
  unint64_t v36 = v34 + 32;
  operator delete(v33);
  sub_1C49B7D84((void *)(a3 + 48), v35, v36, 2uLL);
  double v37 = v58 - v7 * v57;
  double v38 = (v37 - v12) / v19;
  double v39 = v37 + v7 * v38;
  double v40 = (v37 - v11) / v19;
  double v41 = v37 + v7 * v40;
  float64x2_t v42 = (double *)operator new(0x10uLL);
  if (v38 >= v40)
  {
    *float64x2_t v42 = v40;
    v42[1] = v41;
    float64x2_t v43 = (char *)operator new(0x20uLL);
    *((double *)v43 + 2) = v38;
    *((double *)v43 + 3) = v39;
  }
  else
  {
    *float64x2_t v42 = v38;
    v42[1] = v39;
    float64x2_t v43 = (char *)operator new(0x20uLL);
    *((double *)v43 + 2) = v40;
    *((double *)v43 + 3) = v41;
  }
  *(_OWORD *)float64x2_t v43 = *(_OWORD *)v42;
  unint64_t v44 = v43;
  uint64_t v45 = v43 + 32;
  operator delete(v42);
  sub_1C49B7D84((void *)(a3 + 72), v44, v45, 2uLL);
  double v46 = v56 - v7 * v55;
  double v47 = (v46 - v12) / v19;
  double v48 = v46 + v7 * v47;
  double v49 = (v46 - v11) / v19;
  double v50 = v46 + v7 * v49;
  double v51 = (double *)operator new(0x10uLL);
  if (v47 >= v49)
  {
    *double v51 = v49;
    v51[1] = v50;
    float64x2_t v52 = (char *)operator new(0x20uLL);
    *((double *)v52 + 2) = v47;
    *((double *)v52 + 3) = v48;
  }
  else
  {
    *double v51 = v47;
    v51[1] = v48;
    float64x2_t v52 = (char *)operator new(0x20uLL);
    *((double *)v52 + 2) = v49;
    *((double *)v52 + 3) = v50;
  }
  *(_OWORD *)float64x2_t v52 = *(_OWORD *)v51;
  long double v53 = v52;
  double v54 = v52 + 32;
  operator delete(v51);
  sub_1C49B7D84((void *)a3, v53, v54, 2uLL);
  operator delete(v53);
  operator delete(v44);
  operator delete(v35);
  operator delete(v26);
}

void sub_1C4B52E90(_Unwind_Exception *a1)
{
  operator delete(v4);
  operator delete(v3);
  operator delete(v2);
  sub_1C4A2F114(v1);
  _Unwind_Resume(a1);
}

id CoreHandwriting::transform(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v6 = objc_msgSend_newDrawingWithTransform_(a1, a2, (uint64_t)a2, a4, a5, a6);
  return v6;
}

void *sub_1C4B52F74(void *a1)
{
  double v2 = (void *)a1[23];
  if (v2)
  {
    a1[24] = v2;
    operator delete(v2);
  }
  double v3 = (void *)a1[17];
  if (v3)
  {
    a1[18] = v3;
    operator delete(v3);
  }
  double v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = v4;
    operator delete(v4);
  }
  double v5 = (void *)a1[10];
  if (v5)
  {
    a1[11] = v5;
    operator delete(v5);
  }
  double v6 = (void *)a1[7];
  if (v6)
  {
    a1[8] = v6;
    operator delete(v6);
  }
  double v7 = (void *)a1[4];
  if (v7)
  {
    a1[5] = v7;
    operator delete(v7);
  }
  double v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

void *sub_1C4B53008(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EA3C9420)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = sub_1C4B53148;
    v5[4] = &unk_1E64E1AA8;
    v5[5] = v5;
    long long v6 = xmmword_1E64E4268;
    uint64_t v7 = 0;
    qword_1EA3C9420 = _sl_dlopen();
    double v3 = (void *)v5[0];
    double v2 = (void *)qword_1EA3C9420;
    if (qword_1EA3C9420)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      double v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  double v2 = (void *)qword_1EA3C9420;
LABEL_5:
  double result = dlsym(v2, "UIGraphicsBeginImageContextWithOptions");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1EA3C9418 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1C4B53148()
{
  uint64_t result = _sl_dlopen();
  qword_1EA3C9420 = result;
  return result;
}

void *sub_1C4B531BC(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EA3C9420)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = sub_1C4B53148;
    v5[4] = &unk_1E64E1AA8;
    v5[5] = v5;
    long long v6 = xmmword_1E64E4268;
    uint64_t v7 = 0;
    qword_1EA3C9420 = _sl_dlopen();
    double v3 = (void *)v5[0];
    double v2 = (void *)qword_1EA3C9420;
    if (qword_1EA3C9420)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      double v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  double v2 = (void *)qword_1EA3C9420;
LABEL_5:
  uint64_t result = dlsym(v2, "UIGraphicsGetImageFromCurrentImageContext");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1EA3C9428 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1C4B532FC(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EA3C9420)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = sub_1C4B53148;
    v5[4] = &unk_1E64E1AA8;
    v5[5] = v5;
    long long v6 = xmmword_1E64E4268;
    uint64_t v7 = 0;
    qword_1EA3C9420 = _sl_dlopen();
    double v3 = (void *)v5[0];
    double v2 = (void *)qword_1EA3C9420;
    if (qword_1EA3C9420)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      double v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  double v2 = (void *)qword_1EA3C9420;
LABEL_5:
  uint64_t result = dlsym(v2, "UIGraphicsEndImageContext");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1EA3C9430 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1C4B5343C(void *a1)
{
  double v2 = (void *)a1[52];
  if (v2)
  {
    a1[53] = v2;
    operator delete(v2);
  }
  double v3 = (void *)a1[45];
  if (v3)
  {
    a1[46] = v3;
    operator delete(v3);
  }
  double v4 = (void *)a1[42];
  if (v4)
  {
    a1[43] = v4;
    operator delete(v4);
  }
  double v5 = (void *)a1[36];
  if (v5)
  {
    a1[37] = v5;
    operator delete(v5);
  }
  long long v6 = (void *)a1[33];
  if (v6)
  {
    a1[34] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[30];
  if (v7)
  {
    a1[31] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)a1[25];
  if (v8)
  {
    a1[26] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[20];
  if (v9)
  {
    a1[21] = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)a1[15];
  if (v10)
  {
    a1[16] = v10;
    operator delete(v10);
  }
  double v11 = (void *)a1[8];
  if (v11)
  {
    a1[9] = v11;
    operator delete(v11);
  }
  double v12 = (void *)a1[2];
  if (v12)
  {
    a1[3] = v12;
    operator delete(v12);
  }
  return a1;
}

Class sub_1C4B53510(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!qword_1EA3C9420)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    v4[3] = sub_1C4B53148;
    v4[4] = &unk_1E64E1AA8;
    void v4[5] = v4;
    long long v5 = xmmword_1E64E4268;
    uint64_t v6 = 0;
    qword_1EA3C9420 = _sl_dlopen();
    double v2 = (void *)v4[0];
    if (!qword_1EA3C9420)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("UIFont");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    double v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  qword_1EA3C9438 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1C4B53664(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EA3C9420)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = sub_1C4B53148;
    v5[4] = &unk_1E64E1AA8;
    v5[5] = v5;
    long long v6 = xmmword_1E64E4268;
    uint64_t v7 = 0;
    qword_1EA3C9420 = _sl_dlopen();
    double v3 = (void *)v5[0];
    double v2 = (void *)qword_1EA3C9420;
    if (qword_1EA3C9420)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      double v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  double v2 = (void *)qword_1EA3C9420;
LABEL_5:
  Class result = dlsym(v2, "NSFontAttributeName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EA3C9440 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1C4B537A4(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!qword_1EA3C9420)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    v4[3] = sub_1C4B53148;
    v4[4] = &unk_1E64E1AA8;
    void v4[5] = v4;
    long long v5 = xmmword_1E64E4268;
    uint64_t v6 = 0;
    qword_1EA3C9420 = _sl_dlopen();
    double v2 = (void *)v4[0];
    if (!qword_1EA3C9420)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("UIColor");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    double v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  qword_1EA3C9448 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1C4B538F8(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EA3C9420)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = sub_1C4B53148;
    v5[4] = &unk_1E64E1AA8;
    v5[5] = v5;
    long long v6 = xmmword_1E64E4268;
    uint64_t v7 = 0;
    qword_1EA3C9420 = _sl_dlopen();
    double v3 = (void *)v5[0];
    double v2 = (void *)qword_1EA3C9420;
    if (qword_1EA3C9420)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      double v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  double v2 = (void *)qword_1EA3C9420;
LABEL_5:
  Class result = dlsym(v2, "NSForegroundColorAttributeName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EA3C9450 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1C4B53A38(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EA3C9420)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = sub_1C4B53148;
    v5[4] = &unk_1E64E1AA8;
    v5[5] = v5;
    long long v6 = xmmword_1E64E4268;
    uint64_t v7 = 0;
    qword_1EA3C9420 = _sl_dlopen();
    double v3 = (void *)v5[0];
    double v2 = (void *)qword_1EA3C9420;
    if (qword_1EA3C9420)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      double v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  double v2 = (void *)qword_1EA3C9420;
LABEL_5:
  Class result = dlsym(v2, "NSStrokeColorAttributeName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EA3C9458 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1C4B53B78(uint64_t result, uint64_t *a2, double *a3, uint64_t a4, char a5)
{
  double v11 = (uint64_t *)result;
  while (2)
  {
    double v12 = a2 - 1;
    double v13 = v11;
    while (1)
    {
      while (1)
      {
        double v11 = v13;
        uint64_t v14 = (char *)a2 - (char *)v13;
        unint64_t v15 = a2 - v13;
        if (v6 || !v5)
        {
          switch(v15)
          {
            case 0uLL:
            case 1uLL:
              return result;
            case 2uLL:
              uint64_t v134 = *(a2 - 1);
              uint64_t v135 = *v13;
              uint64_t v136 = **(void **)a3;
              double v137 = (double *)(v136 + 16 * v134);
              double v138 = v137[1];
              double v139 = a3[1];
              double v140 = (double *)(v136 + 16 * *v13);
              double v141 = v140[1];
              double v142 = (v138 - a3[2]) * (v138 - a3[2])
                   + (*v137 - v139) * (*v137 - v139)
                   - ((v141 - a3[2]) * (v141 - a3[2])
                    + (*v140 - v139) * (*v140 - v139));
              double v143 = v138 - v141;
              double v144 = *v137 - *v140;
              if (v144 == 0.0) {
                double v144 = v143;
              }
              if (v142 == 0.0) {
                double v145 = v144;
              }
              else {
                double v145 = v142;
              }
              if (v145 < 0.0)
              {
                *double v13 = v134;
                *(a2 - 1) = v135;
              }
              break;
            case 3uLL:
              Class result = (uint64_t)sub_1C4B5496C(v13, v13 + 1, v12, a3);
              break;
            case 4uLL:
              Class result = (uint64_t)sub_1C4B54E04(v13, v13 + 1, v13 + 2, v12, a3);
              break;
            case 5uLL:
              Class result = (uint64_t)sub_1C4B54F9C(v13, v13 + 1, v13 + 2, v13 + 3, v12, a3);
              break;
            default:
              JUMPOUT(0);
          }
          return result;
        }
        if (v14 <= 191)
        {
          if (a5)
          {
            if (v13 != a2)
            {
              unint64_t v146 = v13 + 1;
              if (v13 + 1 != a2)
              {
                uint64_t v147 = 0;
                uint64_t v148 = **(void **)a3;
                double v149 = a3[1];
                double v150 = a3[2];
                unint64_t v151 = v13;
                do
                {
                  uint64_t v154 = *v151;
                  uint64_t v153 = v151[1];
                  unint64_t v151 = v146;
                  __int16 v155 = (double *)(v148 + 16 * v153);
                  double v156 = *v155;
                  double v157 = v155[1];
                  double v158 = (v157 - v150) * (v157 - v150) + (*v155 - v149) * (*v155 - v149);
                  uint64_t v159 = (double *)(v148 + 16 * v154);
                  double v160 = v159[1];
                  double v161 = (v160 - v150) * (v160 - v150);
                  double v162 = v157 - v160;
                  double v163 = v156 - *v159;
                  if (v163 == 0.0) {
                    double v163 = v162;
                  }
                  if (v158 - (v161 + (*v159 - v149) * (*v159 - v149)) == 0.0) {
                    double v164 = v163;
                  }
                  else {
                    double v164 = v158 - (v161 + (*v159 - v149) * (*v159 - v149));
                  }
                  if (v164 < 0.0)
                  {
                    uint64_t v165 = v147;
                    do
                    {
                      *(uint64_t *)((char *)v13 + v165 + 8) = v154;
                      if (!v165)
                      {
                        unint64_t v152 = v13;
                        goto LABEL_138;
                      }
                      uint64_t v154 = *(uint64_t *)((char *)v13 + v165 - 8);
                      long long v166 = (double *)(v148 + 16 * v154);
                      double v167 = v166[1];
                      double v168 = (v167 - v150) * (v167 - v150);
                      double v169 = v157 - v167;
                      double v170 = v156 - *v166;
                      if (v170 == 0.0) {
                        double v170 = v169;
                      }
                      if (v158 - (v168 + (*v166 - v149) * (*v166 - v149)) == 0.0) {
                        double v171 = v170;
                      }
                      else {
                        double v171 = v158 - (v168 + (*v166 - v149) * (*v166 - v149));
                      }
                      v165 -= 8;
                    }
                    while (v171 < 0.0);
                    unint64_t v152 = (uint64_t *)((char *)v13 + v165 + 8);
LABEL_138:
                    uint64_t *v152 = v153;
                  }
                  unint64_t v146 = v151 + 1;
                  v147 += 8;
                }
                while (v151 + 1 != a2);
              }
            }
          }
          else if (v13 != a2)
          {
            v272 = v13 + 1;
            if (v13 + 1 != a2)
            {
              uint64_t v273 = **(void **)a3;
              double v274 = a3[1];
              double v275 = a3[2];
              do
              {
                uint64_t v277 = *v11;
                uint64_t v276 = v11[1];
                double v11 = v272;
                uint64_t v278 = (double *)(v273 + 16 * v276);
                double v279 = *v278;
                double v280 = v278[1];
                double v281 = (v280 - v275) * (v280 - v275) + (*v278 - v274) * (*v278 - v274);
                v282 = (double *)(v273 + 16 * v277);
                double v283 = v282[1];
                double v284 = (v283 - v275) * (v283 - v275);
                double v285 = v280 - v283;
                double v286 = v279 - *v282;
                if (v286 == 0.0) {
                  double v286 = v285;
                }
                if (v281 - (v284 + (*v282 - v274) * (*v282 - v274)) == 0.0) {
                  double v287 = v286;
                }
                else {
                  double v287 = v281 - (v284 + (*v282 - v274) * (*v282 - v274));
                }
                if (v287 < 0.0)
                {
                  uint64_t v288 = v11;
                  do
                  {
                    *uint64_t v288 = v277;
                    uint64_t v277 = *(v288 - 2);
                    v289 = (double *)(v273 + 16 * v277);
                    double v290 = v289[1];
                    double v291 = (v290 - v275) * (v290 - v275);
                    double v292 = v280 - v290;
                    double v293 = v279 - *v289;
                    if (v293 == 0.0) {
                      double v293 = v292;
                    }
                    if (v281 - (v291 + (*v289 - v274) * (*v289 - v274)) == 0.0) {
                      double v294 = v293;
                    }
                    else {
                      double v294 = v281 - (v291 + (*v289 - v274) * (*v289 - v274));
                    }
                    --v288;
                  }
                  while (v294 < 0.0);
                  *uint64_t v288 = v276;
                }
                v272 = v11 + 1;
              }
              while (v11 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v13 != a2)
          {
            int64_t v172 = (v15 - 2) >> 1;
            v173 = *(uint64_t **)a3;
            double v174 = a3[1];
            double v175 = a3[2];
            int64_t v176 = v172;
            do
            {
              int64_t v177 = v176;
              if (v172 >= v176)
              {
                uint64_t v178 = (2 * v176) | 1;
                v179 = &v13[v178];
                uint64_t v180 = 2 * v176 + 2;
                uint64_t v181 = *v173;
                if (v180 < (uint64_t)v15)
                {
                  uint64_t v182 = (double *)(v181 + 16 * *v179);
                  double v183 = *v182;
                  double v184 = v182[1];
                  double v185 = (v184 - v175) * (v184 - v175) + (*v182 - v174) * (*v182 - v174);
                  double v186 = (double *)(v181 + 16 * v179[1]);
                  double v187 = v186[1];
                  double v188 = v185 - ((v187 - v175) * (v187 - v175) + (*v186 - v174) * (*v186 - v174));
                  double v189 = v184 - v187;
                  double v190 = v183 - *v186;
                  if (v190 == 0.0) {
                    double v190 = v189;
                  }
                  if (v188 == 0.0) {
                    double v191 = v190;
                  }
                  else {
                    double v191 = v188;
                  }
                  if (v191 < 0.0)
                  {
                    ++v179;
                    uint64_t v178 = 2 * v177 + 2;
                  }
                }
                double v192 = &v13[v177];
                Class result = *v179;
                uint64_t v193 = *v192;
                double v194 = (double *)(v181 + 16 * *v179);
                double v195 = *v194;
                double v196 = v194[1];
                double v197 = (v196 - v175) * (v196 - v175) + (*v194 - v174) * (*v194 - v174);
                double v198 = (double *)(v181 + 16 * *v192);
                double v199 = *v198;
                double v200 = v198[1];
                double v201 = (v200 - v175) * (v200 - v175) + (*v198 - v174) * (*v198 - v174);
                double v202 = v197 - v201;
                double v203 = v196 - v200;
                double v204 = v195 - *v198;
                if (v204 == 0.0) {
                  double v204 = v203;
                }
                if (v202 == 0.0) {
                  double v205 = v204;
                }
                else {
                  double v205 = v202;
                }
                if (v205 >= 0.0)
                {
                  do
                  {
                    unint64_t v212 = v179;
                    *double v192 = result;
                    if (v172 < v178) {
                      break;
                    }
                    uint64_t v213 = 2 * v178;
                    uint64_t v178 = (2 * v178) | 1;
                    v179 = &v13[v178];
                    uint64_t v214 = v213 + 2;
                    if (v214 < (uint64_t)v15)
                    {
                      uint64_t v215 = (double *)(v181 + 16 * *v179);
                      double v216 = *v215;
                      double v217 = v215[1];
                      double v218 = (v217 - v175) * (v217 - v175) + (*v215 - v174) * (*v215 - v174);
                      unint64_t v219 = (double *)(v181 + 16 * v179[1]);
                      double v220 = v219[1];
                      double v221 = v218 - ((v220 - v175) * (v220 - v175) + (*v219 - v174) * (*v219 - v174));
                      double v222 = v217 - v220;
                      double v223 = v216 - *v219;
                      if (v223 == 0.0) {
                        double v223 = v222;
                      }
                      if (v221 == 0.0) {
                        double v224 = v223;
                      }
                      else {
                        double v224 = v221;
                      }
                      if (v224 < 0.0)
                      {
                        ++v179;
                        uint64_t v178 = v214;
                      }
                    }
                    Class result = *v179;
                    unint64_t v206 = (double *)(v181 + 16 * *v179);
                    double v207 = v206[1];
                    double v208 = (v207 - v175) * (v207 - v175);
                    double v209 = v207 - v200;
                    double v210 = *v206 - v199;
                    if (v210 == 0.0) {
                      double v210 = v209;
                    }
                    double v211 = v208 + (*v206 - v174) * (*v206 - v174) - v201 == 0.0
                         ? v210
                         : v208 + (*v206 - v174) * (*v206 - v174) - v201;
                    double v192 = v212;
                  }
                  while (v211 >= 0.0);
                  *unint64_t v212 = v193;
                }
              }
              int64_t v176 = v177 - 1;
            }
            while (v177);
            uint64_t v225 = (unint64_t)v14 >> 3;
            do
            {
              if (v225 >= 2)
              {
                uint64_t v227 = 0;
                uint64_t v228 = *v13;
                double v229 = *(uint64_t **)a3;
                unint64_t v230 = v13;
                double v231 = a3[1];
                double v232 = a3[2];
                do
                {
                  double v233 = v230;
                  v230 += v227 + 1;
                  uint64_t v234 = 2 * v227;
                  uint64_t v227 = (2 * v227) | 1;
                  uint64_t v235 = v234 + 2;
                  if (v235 < v225)
                  {
                    Class result = v230[1];
                    double v236 = (double *)(*v229 + 16 * *v230);
                    double v237 = *v236;
                    double v238 = v236[1];
                    double v239 = (v238 - v232) * (v238 - v232) + (*v236 - v231) * (*v236 - v231);
                    v240 = (double *)(*v229 + 16 * result);
                    double v241 = v240[1];
                    double v242 = v239 - ((v241 - v232) * (v241 - v232) + (*v240 - v231) * (*v240 - v231));
                    double v243 = v238 - v241;
                    double v244 = v237 - *v240;
                    if (v244 == 0.0) {
                      double v244 = v243;
                    }
                    if (v242 == 0.0) {
                      double v245 = v244;
                    }
                    else {
                      double v245 = v242;
                    }
                    if (v245 < 0.0)
                    {
                      ++v230;
                      uint64_t v227 = v235;
                    }
                  }
                  *double v233 = *v230;
                }
                while (v227 <= (uint64_t)((unint64_t)(v225 - 2) >> 1));
                unint64_t v246 = a2 - 1;
                if (v230 == a2 - 1)
                {
                  *unint64_t v230 = v228;
                }
                else
                {
                  *unint64_t v230 = *v246;
                  *unint64_t v246 = v228;
                  uint64_t v247 = (char *)v230 - (char *)v13 + 8;
                  if (v247 >= 9)
                  {
                    unint64_t v248 = (((unint64_t)v247 >> 3) - 2) >> 1;
                    uint64_t v249 = &v13[v248];
                    uint64_t v250 = *v249;
                    uint64_t v251 = *v230;
                    uint64_t v252 = *v229;
                    double v253 = (double *)(v252 + 16 * *v249);
                    double v254 = *v253;
                    double v255 = v253[1];
                    double v256 = (v255 - v232) * (v255 - v232) + (*v253 - v231) * (*v253 - v231);
                    uint64_t v257 = (double *)(v252 + 16 * *v230);
                    double v258 = *v257;
                    double v259 = v257[1];
                    double v260 = (v259 - v232) * (v259 - v232) + (*v257 - v231) * (*v257 - v231);
                    double v261 = v256 - v260;
                    double v262 = v255 - v259;
                    double v263 = v254 - *v257;
                    if (v263 == 0.0) {
                      double v263 = v262;
                    }
                    if (v261 == 0.0) {
                      double v264 = v263;
                    }
                    else {
                      double v264 = v261;
                    }
                    if (v264 < 0.0)
                    {
                      do
                      {
                        v265 = v249;
                        *unint64_t v230 = v250;
                        if (!v248) {
                          break;
                        }
                        unint64_t v248 = (v248 - 1) >> 1;
                        uint64_t v249 = &v13[v248];
                        uint64_t v250 = *v249;
                        v266 = (double *)(v252 + 16 * *v249);
                        double v267 = v266[1];
                        double v268 = (v267 - v232) * (v267 - v232);
                        double v269 = v267 - v259;
                        double v270 = *v266 - v258;
                        if (v270 == 0.0) {
                          double v270 = v269;
                        }
                        double v271 = v268 + (*v266 - v231) * (*v266 - v231) - v260 == 0.0
                             ? v270
                             : v268 + (*v266 - v231) * (*v266 - v231) - v260;
                        unint64_t v230 = v265;
                      }
                      while (v271 < 0.0);
                      uint64_t *v265 = v251;
                    }
                  }
                }
              }
              --a2;
            }
            while ((unint64_t)v225-- > 2);
          }
          return result;
        }
        unint64_t v16 = v15 >> 1;
        uint64_t v17 = &v13[v15 >> 1];
        if ((unint64_t)v14 >= 0x401)
        {
          sub_1C4B5496C(v11, &v11[v15 >> 1], v12, a3);
          double v18 = &v11[v16];
          sub_1C4B5496C(v11 + 1, v18 - 1, a2 - 2, a3);
          sub_1C4B5496C(v11 + 2, &v11[v16 + 1], a2 - 3, a3);
          Class result = (uint64_t)sub_1C4B5496C(v18 - 1, v17, &v11[v16 + 1], a3);
          uint64_t v19 = *v11;
          *double v11 = *v18;
          *double v18 = v19;
          double v12 = a2 - 1;
        }
        else
        {
          Class result = (uint64_t)sub_1C4B5496C(&v11[v15 >> 1], v11, v12, a3);
        }
        --a4;
        uint64_t v20 = *v11;
        uint64_t v21 = **(void **)a3;
        double v22 = a3[1];
        double v23 = a3[2];
        if (a5)
        {
          uint64_t v24 = (2 * v20) | 1;
          break;
        }
        unint64_t v25 = (double *)(v21 + 16 * *(v11 - 1));
        double v26 = *v25;
        double v27 = v25[1];
        double v28 = (v27 - v23) * (v27 - v23) + (*v25 - v22) * (*v25 - v22);
        double v29 = *(double *)(v21 + 16 * v20);
        uint64_t v24 = (2 * v20) | 1;
        double v30 = *(double *)(v21 + 8 * v24);
        double v31 = (v30 - v23) * (v30 - v23) + (v29 - v22) * (v29 - v22);
        double v32 = v28 - v31;
        double v33 = v27 - v30;
        double v34 = v26 - v29;
        if (v34 == 0.0) {
          double v34 = v33;
        }
        double v35 = v32 == 0.0 ? v34 : v32;
        if (v35 < 0.0) {
          break;
        }
        unint64_t v85 = (double *)(v21 + 16 * *v12);
        double v86 = v85[1];
        double v87 = (v86 - v23) * (v86 - v23);
        double v88 = v30 - v86;
        double v89 = v29 - *v85;
        if (v89 == 0.0) {
          double v89 = v88;
        }
        if (v31 - (v87 + (*v85 - v22) * (*v85 - v22)) == 0.0) {
          double v90 = v89;
        }
        else {
          double v90 = v31 - (v87 + (*v85 - v22) * (*v85 - v22));
        }
        if (v90 >= 0.0)
        {
          unint64_t v99 = v11 + 1;
          do
          {
            double v13 = v99;
            if (v99 >= a2) {
              break;
            }
            ++v99;
            unint64_t v100 = (double *)(v21 + 16 * *v13);
            double v101 = v100[1];
            double v102 = (v101 - v23) * (v101 - v23);
            double v103 = v30 - v101;
            double v104 = v29 - *v100;
            if (v104 == 0.0) {
              double v104 = v103;
            }
            double v105 = v31 - (v102 + (*v100 - v22) * (*v100 - v22)) == 0.0
                 ? v104
                 : v31 - (v102 + (*v100 - v22) * (*v100 - v22));
          }
          while (v105 >= 0.0);
        }
        else
        {
          double v13 = v11;
          do
          {
            uint64_t v91 = v13[1];
            ++v13;
            uint64_t v92 = (double *)(v21 + 16 * v91);
            double v93 = v92[1];
            double v94 = (v93 - v23) * (v93 - v23) + (*v92 - v22) * (*v92 - v22);
            double v95 = v30 - v93;
            double v96 = v29 - *v92;
            double v97 = v31 - v94;
            if (v96 == 0.0) {
              double v96 = v95;
            }
            if (v97 == 0.0) {
              double v98 = v96;
            }
            else {
              double v98 = v97;
            }
          }
          while (v98 >= 0.0);
        }
        long long v106 = a2;
        if (v13 < a2)
        {
          long long v106 = a2;
          do
          {
            uint64_t v107 = *--v106;
            uint64_t v108 = (double *)(v21 + 16 * v107);
            double v109 = v108[1];
            double v110 = (v109 - v23) * (v109 - v23) + (*v108 - v22) * (*v108 - v22);
            double v111 = v30 - v109;
            double v112 = v29 - *v108;
            double v113 = v31 - v110;
            if (v112 == 0.0) {
              double v112 = v111;
            }
            if (v113 == 0.0) {
              double v114 = v112;
            }
            else {
              double v114 = v113;
            }
          }
          while (v114 < 0.0);
        }
        if (v13 < v106)
        {
          uint64_t v115 = *v13;
          uint64_t v116 = *v106;
          do
          {
            *double v13 = v116;
            uint64_t *v106 = v115;
            do
            {
              uint64_t v117 = v13[1];
              ++v13;
              uint64_t v115 = v117;
              long long v118 = (double *)(v21 + 16 * v117);
              double v119 = v118[1];
              double v120 = (v119 - v23) * (v119 - v23) + (*v118 - v22) * (*v118 - v22);
              double v121 = v30 - v119;
              double v122 = v29 - *v118;
              double v123 = v31 - v120;
              if (v122 == 0.0) {
                double v122 = v121;
              }
              if (v123 == 0.0) {
                double v124 = v122;
              }
              else {
                double v124 = v123;
              }
            }
            while (v124 >= 0.0);
            do
            {
              uint64_t v125 = *--v106;
              uint64_t v116 = v125;
              uint64_t v126 = (double *)(v21 + 16 * v125);
              double v127 = v126[1];
              double v128 = (v127 - v23) * (v127 - v23) + (*v126 - v22) * (*v126 - v22);
              double v129 = v30 - v127;
              double v130 = v29 - *v126;
              double v131 = v31 - v128;
              if (v130 == 0.0) {
                double v130 = v129;
              }
              if (v131 == 0.0) {
                double v132 = v130;
              }
              else {
                double v132 = v131;
              }
            }
            while (v132 < 0.0);
          }
          while (v13 < v106);
        }
        uint64_t v133 = v13 - 1;
        BOOL v5 = v13 - 1 >= v11;
        BOOL v6 = v13 - 1 == v11;
        if (v13 - 1 != v11) {
          *double v11 = *v133;
        }
        a5 = 0;
        *uint64_t v133 = v20;
      }
      uint64_t v36 = 0;
      double v37 = *(double *)(v21 + 16 * *v11);
      double v38 = *(double *)(v21 + 8 * v24);
      double v39 = (v38 - v23) * (v38 - v23) + (v37 - v22) * (v37 - v22);
      do
      {
        uint64_t v40 = v11[v36 + 1];
        double v41 = (double *)(v21 + 16 * v40);
        double v42 = v41[1];
        double v43 = (v42 - v23) * (v42 - v23);
        double v44 = v42 - v38;
        double v45 = *v41 - v37;
        if (v45 == 0.0) {
          double v45 = v44;
        }
        if (v43 + (*v41 - v22) * (*v41 - v22) - v39 == 0.0) {
          double v46 = v45;
        }
        else {
          double v46 = v43 + (*v41 - v22) * (*v41 - v22) - v39;
        }
        ++v36;
      }
      while (v46 < 0.0);
      double v47 = &v11[v36];
      double v48 = a2;
      if (v36 == 1)
      {
        double v48 = a2;
        do
        {
          if (v47 >= v48) {
            break;
          }
          uint64_t v57 = *--v48;
          double v58 = (double *)(v21 + 16 * v57);
          double v59 = v58[1];
          double v60 = (v59 - v23) * (v59 - v23);
          double v61 = v59 - v38;
          double v62 = *v58 - v37;
          if (v62 == 0.0) {
            double v62 = v61;
          }
          double v63 = v60 + (*v58 - v22) * (*v58 - v22) - v39 == 0.0 ? v62 : v60 + (*v58 - v22) * (*v58 - v22) - v39;
        }
        while (v63 >= 0.0);
      }
      else
      {
        do
        {
          uint64_t v49 = *--v48;
          double v50 = (double *)(v21 + 16 * v49);
          double v51 = v50[1];
          double v52 = (v51 - v23) * (v51 - v23) + (*v50 - v22) * (*v50 - v22);
          double v53 = v51 - v38;
          double v54 = *v50 - v37;
          double v55 = v52 - v39;
          if (v54 == 0.0) {
            double v54 = v53;
          }
          if (v55 == 0.0) {
            double v56 = v54;
          }
          else {
            double v56 = v55;
          }
        }
        while (v56 >= 0.0);
      }
      if (v47 >= v48)
      {
        char v83 = v47 - 1;
        if (v47 - 1 == v11) {
          goto LABEL_61;
        }
LABEL_60:
        *double v11 = *v83;
        goto LABEL_61;
      }
      uint64_t v64 = *v48;
      uint64_t v65 = v47;
      uint64_t v66 = v48;
      do
      {
        uint64_t *v65 = v64;
        uint64_t *v66 = v40;
        do
        {
          uint64_t v67 = v65[1];
          ++v65;
          uint64_t v40 = v67;
          double v68 = (double *)(v21 + 16 * v67);
          double v69 = v68[1];
          double v70 = (v69 - v23) * (v69 - v23) + (*v68 - v22) * (*v68 - v22);
          double v71 = v69 - v38;
          double v72 = *v68 - v37;
          double v73 = v70 - v39;
          if (v72 == 0.0) {
            double v72 = v71;
          }
          if (v73 == 0.0) {
            double v74 = v72;
          }
          else {
            double v74 = v73;
          }
        }
        while (v74 < 0.0);
        do
        {
          uint64_t v75 = *--v66;
          uint64_t v64 = v75;
          uint64_t v76 = (double *)(v21 + 16 * v75);
          double v77 = v76[1];
          double v78 = (v77 - v23) * (v77 - v23) + (*v76 - v22) * (*v76 - v22);
          double v79 = v77 - v38;
          double v80 = *v76 - v37;
          double v81 = v78 - v39;
          if (v80 == 0.0) {
            double v80 = v79;
          }
          if (v81 == 0.0) {
            double v82 = v80;
          }
          else {
            double v82 = v81;
          }
        }
        while (v82 >= 0.0);
      }
      while (v65 < v66);
      char v83 = v65 - 1;
      if (v65 - 1 != v11) {
        goto LABEL_60;
      }
LABEL_61:
      uint64_t *v83 = v20;
      if (v47 < v48) {
        goto LABEL_64;
      }
      BOOL v84 = sub_1C4B54B08(v11, v83, a3);
      double v13 = v83 + 1;
      Class result = sub_1C4B54B08(v83 + 1, a2, a3);
      if (result) {
        break;
      }
      if (!v84)
      {
LABEL_64:
        Class result = sub_1C4B53B78(v11, v83, a3, a4, a5 & 1);
        a5 = 0;
        double v13 = v83 + 1;
      }
    }
    a2 = v83;
    if (!v84) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1C4B5496C(uint64_t *result, uint64_t *a2, uint64_t *a3, double *a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  uint64_t v6 = **(void **)a4;
  uint64_t v7 = (double *)(v6 + 16 * *a2);
  double v8 = *v7;
  double v9 = v7[1];
  double v11 = a4[1];
  double v10 = a4[2];
  double v12 = (v9 - v10) * (v9 - v10) + (*v7 - v11) * (*v7 - v11);
  double v13 = (double *)(v6 + 16 * *result);
  double v14 = *v13;
  double v15 = v13[1];
  double v16 = (v15 - v10) * (v15 - v10) + (*v13 - v11) * (*v13 - v11);
  double v17 = v12 - v16;
  double v18 = v8 - *v13;
  if (v18 == 0.0) {
    double v18 = v9 - v15;
  }
  if (v17 == 0.0) {
    double v17 = v18;
  }
  uint64_t v19 = *a3;
  uint64_t v20 = (double *)(v6 + 16 * *a3);
  double v21 = v20[1];
  double v22 = (v21 - v10) * (v21 - v10) + (*v20 - v11) * (*v20 - v11) - v12;
  double v23 = v21 - v9;
  double v24 = *v20 - v8;
  if (v24 == 0.0) {
    double v24 = v23;
  }
  if (v22 == 0.0) {
    double v25 = v24;
  }
  else {
    double v25 = v22;
  }
  if (v17 >= 0.0)
  {
    if (v25 < 0.0)
    {
      *a2 = v19;
      *a3 = v4;
      uint64_t v26 = *result;
      double v27 = (double *)(v6 + 16 * *a2);
      double v28 = v27[1];
      double v29 = (double *)(v6 + 16 * *result);
      double v30 = v29[1];
      double v31 = (v28 - v10) * (v28 - v10)
          + (*v27 - v11) * (*v27 - v11)
          - ((v30 - v10) * (v30 - v10)
           + (*v29 - v11) * (*v29 - v11));
      double v32 = *v27 - *v29;
      if (v32 == 0.0) {
        double v32 = v28 - v30;
      }
      if (v31 == 0.0) {
        double v31 = v32;
      }
      if (v31 < 0.0)
      {
        *Class result = *a2;
        *a2 = v26;
      }
    }
  }
  else
  {
    if (v25 < 0.0)
    {
      *Class result = v19;
LABEL_26:
      *a3 = v5;
      return result;
    }
    *Class result = v4;
    *a2 = v5;
    double v33 = (double *)(v6 + 16 * *a3);
    double v34 = v33[1];
    double v35 = (v34 - v10) * (v34 - v10) + (*v33 - v11) * (*v33 - v11) - v16;
    double v36 = *v33 - v14;
    if (v36 == 0.0) {
      double v36 = v34 - v15;
    }
    if (v35 == 0.0) {
      double v35 = v36;
    }
    if (v35 < 0.0)
    {
      *a2 = *a3;
      goto LABEL_26;
    }
  }
  return result;
}

BOOL sub_1C4B54B08(uint64_t *a1, uint64_t *a2, double *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v35 = *(a2 - 1);
      uint64_t v36 = *a1;
      uint64_t v37 = **(void **)a3;
      double v38 = (double *)(v37 + 16 * v35);
      double v39 = v38[1];
      double v40 = a3[1];
      double v41 = (double *)(v37 + 16 * *a1);
      double v42 = v41[1];
      double v43 = (v39 - a3[2]) * (v39 - a3[2])
          + (*v38 - v40) * (*v38 - v40)
          - ((v42 - a3[2]) * (v42 - a3[2])
           + (*v41 - v40) * (*v41 - v40));
      double v44 = v39 - v42;
      double v45 = *v38 - *v41;
      if (v45 == 0.0) {
        double v45 = v44;
      }
      if (v43 == 0.0) {
        double v46 = v45;
      }
      else {
        double v46 = v43;
      }
      if (v46 < 0.0)
      {
        *a1 = v35;
        *(a2 - 1) = v36;
      }
      break;
    case 3:
      sub_1C4B5496C(a1, a1 + 1, a2 - 1, a3);
      BOOL result = 1;
      break;
    case 4:
      sub_1C4B54E04(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      BOOL result = 1;
      break;
    case 5:
      sub_1C4B54F9C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      BOOL result = 1;
      break;
    default:
      double v8 = a1 + 2;
      sub_1C4B5496C(a1, a1 + 1, a1 + 2, a3);
      double v9 = a1 + 3;
      if (a1 + 3 == a2)
      {
LABEL_23:
        BOOL result = 1;
      }
      else
      {
        int v10 = 0;
        uint64_t v11 = **(void **)a3;
        double v12 = a3[1];
        double v13 = a3[2];
        uint64_t v14 = 24;
        while (1)
        {
          uint64_t v15 = *v9;
          uint64_t v16 = *v8;
          double v17 = (double *)(v11 + 16 * *v9);
          double v18 = *v17;
          double v19 = v17[1];
          double v20 = (v19 - v13) * (v19 - v13) + (*v17 - v12) * (*v17 - v12);
          double v21 = (double *)(v11 + 16 * *v8);
          double v22 = v21[1];
          double v23 = (v22 - v13) * (v22 - v13);
          double v24 = v19 - v22;
          double v25 = v18 - *v21;
          if (v25 == 0.0) {
            double v25 = v24;
          }
          double v26 = v20 - (v23 + (*v21 - v12) * (*v21 - v12)) == 0.0 ? v25 : v20 - (v23 + (*v21 - v12) * (*v21 - v12));
          if (v26 < 0.0) {
            break;
          }
LABEL_22:
          double v8 = v9;
          v14 += 8;
          if (++v9 == a2) {
            goto LABEL_23;
          }
        }
        uint64_t v27 = v14;
        do
        {
          *(uint64_t *)((char *)a1 + v27) = v16;
          uint64_t v28 = v27 - 8;
          if (v27 == 8)
          {
            *a1 = v15;
            if (++v10 != 8) {
              goto LABEL_22;
            }
            goto LABEL_34;
          }
          uint64_t v16 = *(uint64_t *)((char *)a1 + v27 - 16);
          double v29 = (double *)(v11 + 16 * v16);
          double v30 = v29[1];
          double v31 = (v30 - v13) * (v30 - v13);
          double v32 = v19 - v30;
          double v33 = v18 - *v29;
          if (v33 == 0.0) {
            double v33 = v32;
          }
          if (v20 - (v31 + (*v29 - v12) * (*v29 - v12)) == 0.0) {
            double v34 = v33;
          }
          else {
            double v34 = v20 - (v31 + (*v29 - v12) * (*v29 - v12));
          }
          uint64_t v27 = v28;
        }
        while (v34 < 0.0);
        *(uint64_t *)((char *)a1 + v28) = v15;
        if (++v10 != 8) {
          goto LABEL_22;
        }
LABEL_34:
        BOOL result = v9 + 1 == a2;
      }
      break;
  }
  return result;
}

uint64_t *sub_1C4B54E04(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, double *a5)
{
  BOOL result = sub_1C4B5496C(a1, a2, a3, a5);
  uint64_t v11 = *a3;
  uint64_t v12 = **(void **)a5;
  double v13 = (double *)(v12 + 16 * *a4);
  double v14 = *v13;
  double v15 = v13[1];
  double v16 = a5[1];
  double v17 = a5[2];
  double v18 = (v15 - v17) * (v15 - v17) + (*v13 - v16) * (*v13 - v16);
  double v19 = (double *)(v12 + 16 * *a3);
  double v20 = v19[1];
  double v21 = v18 - ((v20 - v17) * (v20 - v17) + (*v19 - v16) * (*v19 - v16));
  double v22 = v15 - v20;
  double v23 = v14 - *v19;
  if (v23 == 0.0) {
    double v23 = v22;
  }
  if (v21 == 0.0) {
    double v24 = v23;
  }
  else {
    double v24 = v21;
  }
  if (v24 < 0.0)
  {
    *a3 = *a4;
    *a4 = v11;
    uint64_t v25 = *a2;
    double v26 = (double *)(v12 + 16 * *a3);
    double v27 = *v26;
    double v28 = v26[1];
    double v29 = (v28 - v17) * (v28 - v17) + (*v26 - v16) * (*v26 - v16);
    double v30 = (double *)(v12 + 16 * *a2);
    double v31 = v30[1];
    double v32 = v29 - ((v31 - v17) * (v31 - v17) + (*v30 - v16) * (*v30 - v16));
    double v33 = v28 - v31;
    double v34 = v27 - *v30;
    if (v34 == 0.0) {
      double v34 = v33;
    }
    if (v32 == 0.0) {
      double v35 = v34;
    }
    else {
      double v35 = v32;
    }
    if (v35 < 0.0)
    {
      *a2 = *a3;
      *a3 = v25;
      uint64_t v36 = *a1;
      uint64_t v37 = (double *)(v12 + 16 * *a2);
      double v38 = v37[1];
      double v39 = (double *)(v12 + 16 * *a1);
      double v40 = v39[1];
      double v41 = (v38 - v17) * (v38 - v17)
          + (*v37 - v16) * (*v37 - v16)
          - ((v40 - v17) * (v40 - v17)
           + (*v39 - v16) * (*v39 - v16));
      double v42 = *v37 - *v39;
      if (v42 == 0.0) {
        double v42 = v38 - v40;
      }
      if (v41 == 0.0) {
        double v41 = v42;
      }
      if (v41 < 0.0)
      {
        *a1 = *a2;
        *a2 = v36;
      }
    }
  }
  return result;
}

uint64_t *sub_1C4B54F9C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, double *a6)
{
  BOOL result = sub_1C4B54E04(a1, a2, a3, a4, a6);
  uint64_t v13 = *a4;
  uint64_t v14 = **(void **)a6;
  double v15 = (double *)(v14 + 16 * *a5);
  double v16 = *v15;
  double v17 = v15[1];
  double v18 = a6[1];
  double v19 = a6[2];
  double v20 = (v17 - v19) * (v17 - v19) + (*v15 - v18) * (*v15 - v18);
  double v21 = (double *)(v14 + 16 * *a4);
  double v22 = v21[1];
  double v23 = v20 - ((v22 - v19) * (v22 - v19) + (*v21 - v18) * (*v21 - v18));
  double v24 = v17 - v22;
  double v25 = v16 - *v21;
  if (v25 == 0.0) {
    double v25 = v24;
  }
  if (v23 == 0.0) {
    double v26 = v25;
  }
  else {
    double v26 = v23;
  }
  if (v26 < 0.0)
  {
    *a4 = *a5;
    *a5 = v13;
    uint64_t v27 = *a3;
    double v28 = (double *)(v14 + 16 * *a4);
    double v29 = *v28;
    double v30 = v28[1];
    double v31 = (v30 - v19) * (v30 - v19) + (*v28 - v18) * (*v28 - v18);
    double v32 = (double *)(v14 + 16 * *a3);
    double v33 = v32[1];
    double v34 = v31 - ((v33 - v19) * (v33 - v19) + (*v32 - v18) * (*v32 - v18));
    double v35 = v30 - v33;
    double v36 = v29 - *v32;
    if (v36 == 0.0) {
      double v36 = v35;
    }
    if (v34 == 0.0) {
      double v37 = v36;
    }
    else {
      double v37 = v34;
    }
    if (v37 < 0.0)
    {
      *a3 = *a4;
      *a4 = v27;
      uint64_t v38 = *a2;
      double v39 = (double *)(v14 + 16 * *a3);
      double v40 = *v39;
      double v41 = v39[1];
      double v42 = (v41 - v19) * (v41 - v19) + (*v39 - v18) * (*v39 - v18);
      double v43 = (double *)(v14 + 16 * *a2);
      double v44 = v43[1];
      double v45 = v42 - ((v44 - v19) * (v44 - v19) + (*v43 - v18) * (*v43 - v18));
      double v46 = v41 - v44;
      double v47 = v40 - *v43;
      if (v47 == 0.0) {
        double v47 = v46;
      }
      if (v45 == 0.0) {
        double v48 = v47;
      }
      else {
        double v48 = v45;
      }
      if (v48 < 0.0)
      {
        *a2 = *a3;
        *a3 = v38;
        uint64_t v49 = *a1;
        double v50 = (double *)(v14 + 16 * *a2);
        double v51 = v50[1];
        double v52 = (double *)(v14 + 16 * *a1);
        double v53 = v52[1];
        double v54 = (v51 - v19) * (v51 - v19)
            + (*v50 - v18) * (*v50 - v18)
            - ((v53 - v19) * (v53 - v19)
             + (*v52 - v18) * (*v52 - v18));
        double v55 = *v50 - *v52;
        if (v55 == 0.0) {
          double v55 = v51 - v53;
        }
        if (v54 == 0.0) {
          double v54 = v55;
        }
        if (v54 < 0.0)
        {
          *a1 = *a2;
          *a2 = v49;
        }
      }
    }
  }
  return result;
}

void sub_1C4B551A4(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    uint64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      sub_1C494A220();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_1C4949AA8();
      }
      uint64_t v13 = operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    double v16 = &v13[8 * v12];
    bzero(v14, v15);
    double v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      double v21 = &v13[8 * v9 - 16];
      double v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *double v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void sub_1C4B55354()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_1F2012810;
  __cxa_throw(exception, (struct type_info *)&unk_1F2011A88, (void (*)(void *))std::exception::~exception);
}

double sub_1C4B553A4(double *a1)
{
  double v4 = a1[10];
  double v3 = a1[11];
  double v6 = a1[12];
  double v5 = a1[13];
  double v8 = a1[16];
  double v7 = a1[17];
  double v10 = a1[20];
  double v9 = a1[21];
  double v11 = a1[22];
  double v12 = a1[23];
  double v15 = a1[14];
  double v16 = a1[15];
  double v17 = a1[18];
  double v18 = a1[19];
  double v19 = a1[24];
  double v21 = v16 * v19 - v10 * v18;
  double v22 = v8 * v19 - v9 * v18;
  double v23 = v7 * v19 - v11 * v18;
  double v24 = v17 * v19 - v12 * v18;
  double v25 = v16 * v9 - v10 * v8;
  double v26 = v16 * v11 - v10 * v7;
  double v27 = v16 * v12 - v10 * v17;
  double v28 = v8 * v11 - v9 * v7;
  double v29 = v8 * v12 - v9 * v17;
  double v30 = v7 * v12 - v11 * v17;
  double v31 = v4 * v22 + 0.0 - v3 * v21 + v15 * v25;
  double v32 = v4 * v23 + 0.0 - v6 * v21 + v15 * v26;
  double v33 = v3 * v23 + 0.0 - v6 * v22 + v15 * v28;
  double v34 = v4 * v24 + 0.0 - v5 * v21 + v15 * v27;
  double v35 = v3 * v24 + 0.0 - v5 * v22 + v15 * v29;
  double v36 = v4 * v29 + 0.0 - v3 * v27;
  double v37 = v6 * v24 + 0.0 - v5 * v23 + v15 * v30;
  double v38 = v4 * v30 + 0.0 - v6 * v27;
  double v39 = v4 * v28 + 0.0 - v3 * v26;
  double v40 = v3 * v30 + 0.0 - v6 * v29;
  double v41 = v39 + v6 * v25;
  double v1 = a1[6];
  double v2 = a1[7];
  double v13 = a1[8];
  double v14 = a1[9];
  double v20 = a1[5];
  return *a1 * (v1 * v37 + 0.0 - v2 * v35 + v13 * v33 - v14 * (v40 + v5 * v28))
       + 0.0
       - a1[1] * (v20 * v37 + 0.0 - v2 * v34 + v13 * v32 - v14 * (v38 + v5 * v26))
       + a1[2] * (v20 * v35 + 0.0 - v1 * v34 + v13 * v31 - v14 * (v36 + v5 * v25))
       - a1[3] * (v20 * v33 + 0.0 - v1 * v32 + v2 * v31 - v14 * v41)
       + a1[4] * (v20 * (v40 + v5 * v28) + 0.0 - v1 * (v38 + v5 * v26) + v2 * (v36 + v5 * v25) - v13 * v41);
}

void sub_1C4B5555C(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x1C8786460);
}

const char *sub_1C4B55594()
{
  return "Boost QVM error";
}

void sub_1C4B55630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B55794(_Unwind_Exception *a1)
{
  double v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1C4B55A90(_Unwind_Exception *a1)
{
  double v9 = v8;

  _Unwind_Resume(a1);
}

void sub_1C4B55CD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B55D24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B55D40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B55D58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B56090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B560A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B560B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B5689C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B568AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B568C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B568D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B568E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B568F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B5690C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B5691C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B56930(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B56944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B56958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B5696C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B56980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B56994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B569A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B569BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B569D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B569E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B569F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B56A0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B56A20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B56A48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B56A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B56A70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B56A88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B56A9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1C4B56AB4(double *a1, double *a2, double a3, double a4, double a5, double a6)
{
  double v6 = a2[1];
  double v7 = a2[2];
  double v8 = a2[3];
  if (a5 == 0.0) {
    a5 = 1.0;
  }
  if (a6 == 0.0) {
    a6 = 1.0;
  }
  *a1 = (*a2 - a3) / a5;
  a1[1] = (v6 - a4) / a6;
  a1[2] = (v7 - a3) / a5;
  a1[3] = (v8 - a4) / a6;
  double v9 = (a2[5] - a4) / a6;
  double v10 = (a2[6] - a3) / a5;
  double v11 = (a2[7] - a4) / a6;
  a1[4] = (a2[4] - a3) / a5;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  double v12 = (a2[9] - a4) / a6;
  double v13 = (a2[10] - a3) / a5;
  double v14 = (a2[11] - a4) / a6;
  a1[8] = (a2[8] - a3) / a5;
  a1[9] = v12;
  a1[10] = v13;
  a1[11] = v14;
  double v15 = a2[15];
  double v16 = (a2[12] - a3) / a5;
  double v17 = (a2[13] - a4) / a6;
  double result = (a2[14] - a3) / a5;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = result;
  a1[15] = (v15 - a4) / a6;
  return result;
}

void sub_1C4B56CF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B56E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B56E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B570C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B570EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B5721C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B5731C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1C4B57370(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = v3;
  if (a1)
  {
    double v6 = *(void (**)(id))(a1 + 40);
    if (v6)
    {
      v6(v3);
      id v7 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v7 = v3;
    }
    uint64_t v11 = 0;
    double v12 = &v11;
    uint64_t v13 = 0x2020000000;
    char v14 = 0;
    double v10 = v7;
    id v8 = v7;
    LXLexiconEnumerateEntriesForString();
    BOOL v5 = *((unsigned char *)v12 + 24) != 0;

    _Block_object_dispose(&v11, 8);
  }
  else
  {
    BOOL v5 = 0;
  }

  return v5;
}

void sub_1C4B57480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B57490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4B574B8(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  id cf = (id)LXEntryCopyString();
  if (!objc_msgSend_caseInsensitiveCompare_(*(void **)(a1 + 32), v6, (uint64_t)cf, v7, v8, v9)
    && objc_msgSend_isInappropriateLexiconEntry_(*(void **)(a1 + 40), v10, a2, v11, v12, v13))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    *a3 = 1;
  }
  CFRelease(cf);
}

void sub_1C4B57550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B57720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B57740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B57754(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B5776C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B57780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B57790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B578D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CHStringOVSChecker;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

__CFString *CHDescriptionForCorrectionResultType(unint64_t a1)
{
  if (a1 > 8) {
    return &stru_1F20141C8;
  }
  else {
    return off_1E64E42A8[a1];
  }
}

void sub_1C4B582A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4B58490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B58524(_Unwind_Exception *a1)
{
  double v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4B58540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B585F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B58FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_1C4B594B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C4B594F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B59508(void **a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_count(a1[4], a2, a3, a4, a5, a6) <= (unint64_t)a2)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v13 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      uint64_t v19 = objc_msgSend_count(a1[4], v14, v15, v16, v17, v18);
      int v35 = 134218240;
      double v36 = a2;
      __int16 v37 = 2048;
      uint64_t v38 = v19;
      _os_log_impl(&dword_1C492D000, v13, OS_LOG_TYPE_FAULT, "Out of bounds stroke index %lu : original stroke identifiers count %lu", (uint8_t *)&v35, 0x16u);
    }
  }
  if (objc_msgSend_count(a1[4], v8, v9, v10, v11, v12) > (unint64_t)a2)
  {
    double v24 = objc_msgSend_objectAtIndexedSubscript_(a1[4], v20, (uint64_t)a2, v21, v22, v23);
    uint64_t v30 = objc_msgSend_indexOfObject_(a1[5], v25, (uint64_t)v24, v26, v27, v28);
    if (v30 == 0x7FFFFFFFFFFFFFFFLL)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      double v34 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
      {
        LOWORD(v35) = 0;
        _os_log_impl(&dword_1C492D000, v34, OS_LOG_TYPE_FAULT, "Unable to find stroke identifier in newStrokeIdentifiersOrdering", (uint8_t *)&v35, 2u);
      }
    }
    else
    {
      objc_msgSend_addIndex_(a1[6], v29, v30, v31, v32, v33);
    }
  }
}

void sub_1C4B596C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B596D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL propertyIsSet(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

uint64_t isValidVerticalMathEntry(CHTokenizedMathResult *a1, uint64_t a2, int a3)
{
  uint64_t v465 = *MEMORY[0x1E4F143B8];
  v456 = a1;
  uint64_t v10 = objc_msgSend_transcriptionPaths(v456, v5, v6, v7, v8, v9);
  v457 = objc_msgSend_objectAtIndexedSubscript_(v10, v11, a2, v12, v13, v14);

  objc_msgSend_array(MEMORY[0x1E4F1CA48], v15, v16, v17, v18, v19);
  v453 = int v454 = a3;
  uint64_t v25 = objc_msgSend_tokenColumnCount(v456, v20, v21, v22, v23, v24);
  v462[0] = MEMORY[0x1E4F143A8];
  v462[1] = 3221225472;
  v462[2] = sub_1C4B5A4BC;
  v462[3] = &unk_1E64E0CD8;
  id v26 = v453;
  id v463 = v26;
  objc_msgSend_enumerateTokensInTranscriptionPath_columnRange_tokenProcessingBlock_(v456, v27, (uint64_t)v457, 0, v25, (uint64_t)v462);
  uint64_t v33 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v28, v29, v30, v31, v32);
  if (objc_msgSend_count(v26, v34, v35, v36, v37, v38)
    && (objc_msgSend_objectAtIndexedSubscript_(v26, v39, 0, v41, v42, v43),
        double v44 = objc_claimAutoreleasedReturnValue(),
        BOOL v50 = (objc_msgSend_properties(v44, v45, v46, v47, v48, v49) & 0x8000) == 0,
        v44,
        !v50))
  {
    if ((unint64_t)objc_msgSend_count(v26, v39, v40, v41, v42, v43) >= 2)
    {
      double v68 = objc_msgSend_objectAtIndexedSubscript_(v26, v39, 1, v41, v42, v43);
      double v74 = objc_msgSend_string(v68, v69, v70, v71, v72, v73);
      int isEqualToString = objc_msgSend_isEqualToString_(v74, v75, @"{", v76, v77, v78);

      char v455 = 1;
      unint64_t i = 2;
      goto LABEL_5;
    }
    char v455 = 1;
    unint64_t i = 2;
  }
  else
  {
    char v455 = 0;
    unint64_t i = 0;
  }
  int isEqualToString = 1;
LABEL_5:
  unint64_t v53 = objc_msgSend_count(v26, v39, v40, v41, v42, v43);
  BOOL v59 = isEqualToString == 0;
  if (!isEqualToString || i >= v53)
  {
LABEL_22:
    unint64_t v67 = i;
    if (v59) {
      goto LABEL_23;
    }
    goto LABEL_25;
  }
  double v60 = objc_msgSend_objectAtIndexedSubscript_(v26, v54, i, v56, v57, v58);
  BOOL v66 = (objc_msgSend_properties(v60, v61, v62, v63, v64, v65) & 8) == 0;

  if (v66)
  {
    unint64_t v67 = i;
    goto LABEL_25;
  }
  unint64_t v67 = i | 1;
  if ((i | 1) >= objc_msgSend_count(v26, v54, v55, v56, v57, v58)) {
    goto LABEL_25;
  }
  double v79 = objc_msgSend_objectAtIndexedSubscript_(v26, v54, i | 1, v56, v57, v58);
  BOOL v85 = (objc_msgSend_properties(v79, v80, v81, v82, v83, v84) & 8) == 0;

  if (v85) {
    goto LABEL_25;
  }
  double v86 = objc_msgSend_objectAtIndexedSubscript_(v26, v54, i | 1, v56, v57, v58);
  uint64_t v92 = objc_msgSend_string(v86, v87, v88, v89, v90, v91);
  int v97 = objc_msgSend_isEqualToString_(v92, v93, @"-", v94, v95, v96);

  unint64_t v103 = objc_msgSend_count(v26, v98, v99, v100, v101, v102);
  unint64_t v67 = i + 2;
  if (v97) {
    int v104 = isEqualToString;
  }
  else {
    int v104 = 0;
  }
  BOOL v59 = v104 == 0;
  if (!v104 || v67 >= v103)
  {
    int isEqualToString = v104;
    i += 2;
    goto LABEL_22;
  }
  double v105 = objc_msgSend_objectAtIndexedSubscript_(v26, v54, i + 2, v56, v57, v58);
  BOOL v111 = (objc_msgSend_properties(v105, v106, v107, v108, v109, v110) & 8) == 0;

  if (!v111)
  {
    objc_msgSend_count(v26, v54, v55, v56, v57, v58);
    int isEqualToString = 0;
    i += 3;
LABEL_23:
    objc_msgSend_count(v26, v54, v55, v56, v57, v58);
    objc_msgSend_count(v26, v112, v113, v114, v115, v116);
    objc_msgSend_count(v26, v117, v118, v119, v120, v121);
    if (v455)
    {
LABEL_82:
      int v407 = 0;
      int v415 = 0;
      goto LABEL_101;
    }
    objc_msgSend_count(v26, v122, v123, v124, v125, v126);
    int v132 = 0;
    char v133 = 1;
LABEL_85:
    if (i >= objc_msgSend_count(v26, v127, v128, v129, v130, v131)) {
      char v416 = 1;
    }
    else {
      char v416 = v133;
    }
    if ((v416 & 1) != 0
      || (objc_msgSend_objectAtIndexedSubscript_(v26, v122, i, v124, v125, v126),
          uint64_t v417 = objc_claimAutoreleasedReturnValue(),
          BOOL v423 = (objc_msgSend_properties(v417, v418, v419, v420, v421, v422) & 0x20000) == 0,
          v417,
          v423))
    {
      int v415 = 0;
    }
    else
    {
      objc_msgSend_count(v26, v122, v123, v124, v125, v126);
      ++i;
      int v415 = 1;
    }
    if (isEqualToString) {
      BOOL v424 = v415 == v132;
    }
    else {
      BOOL v424 = 0;
    }
    int v407 = v424;
    goto LABEL_101;
  }
LABEL_25:
  for (unint64_t i = v67; i < objc_msgSend_count(v26, v54, v55, v56, v57, v58); ++i)
  {
    uint64_t v134 = objc_msgSend_objectAtIndexedSubscript_(v26, v54, i, v56, v57, v58);
    BOOL v140 = (objc_msgSend_properties(v134, v135, v136, v137, v138, v139) & 0x80) == 0;

    if (v140) {
      break;
    }
  }
  while (i < objc_msgSend_count(v26, v54, v55, v56, v57, v58))
  {
    objc_msgSend_objectAtIndexedSubscript_(v26, v168, i, v169, v170, v171);
    id v141 = (id)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend_properties(v141, v142, v143, v144, v145, v146) & 2) != 0
      || (objc_msgSend_properties(v141, v147, v148, v149, v150, v151) & 4) != 0
      || (objc_msgSend_string(v141, v152, v153, v154, v155, v156),
          double v157 = objc_claimAutoreleasedReturnValue(),
          char v162 = objc_msgSend_isEqualToString_(v157, v158, @"\\cdot", v159, v160, v161),
          v157,
          (v162 & 1) != 0))
    {
    }
    else
    {
      double v220 = objc_msgSend_string(v141, v163, v164, v165, v166, v167);
      double v226 = objc_msgSend_lowercaseString(v220, v221, v222, v223, v224, v225);
      if (!objc_msgSend_isEqualToString_(v226, v227, @"z", v228, v229, v230)) {
        goto LABEL_46;
      }
      double v236 = objc_msgSend_strokeIndexes(v141, v231, v232, v233, v234, v235);
      if (objc_msgSend_count(v236, v237, v238, v239, v240, v241) != 1
        || (objc_msgSend_properties(v141, v242, v243, v244, v245, v246) & 0x40) != 0)
      {

LABEL_46:
        break;
      }
      BOOL v252 = (objc_msgSend_properties(v141, v247, v248, v249, v250, v251) & 0x80) == 0;

      if (!v252) {
        break;
      }
    }
    int64_t v172 = objc_msgSend_objectAtIndexedSubscript_(v26, v168, i, v169, v170, v171);
    objc_msgSend_string(v172, v173, v174, v175, v176, v177);
    uint64_t v178 = (__CFString *)objc_claimAutoreleasedReturnValue();

    double v183 = objc_msgSend_objectAtIndexedSubscript_(v26, v179, i, v180, v181, v182);
    double v189 = objc_msgSend_string(v183, v184, v185, v186, v187, v188);
    LODWORD(v172) = objc_msgSend_isEqualToString_(v189, v190, @"\\cdot", v191, v192, v193);

    if (v172)
    {

      uint64_t v178 = @".";
    }
    double v198 = objc_msgSend_objectAtIndexedSubscript_(v26, v194, i, v195, v196, v197);
    double v204 = objc_msgSend_string(v198, v199, v200, v201, v202, v203);
    double v210 = objc_msgSend_lowercaseString(v204, v205, v206, v207, v208, v209);
    int v215 = objc_msgSend_isEqualToString_(v210, v211, @"z", v212, v213, v214);

    if (v215)
    {

      uint64_t v178 = @"2";
    }
    objc_msgSend_addObject_(v33, v216, (uint64_t)v178, v217, v218, v219);

    ++i;
  }
  LOBYTE(v254) = 0;
  while (i < objc_msgSend_count(v26, v168, v253, v169, v170, v171))
  {
    objc_msgSend_objectAtIndexedSubscript_(v26, v168, i, v169, v170, v171);
    id v255 = (id)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend_properties(v255, v256, v257, v258, v259, v260) & 0x40) != 0
      || (objc_msgSend_properties(v255, v261, v262, v263, v264, v265) & 0x80) != 0
      || (objc_msgSend_properties(v255, v266, v267, v268, v269, v270) & 0x2000) != 0
      || (objc_msgSend_properties(v255, v271, v272, v273, v274, v275) & 0x200) != 0)
    {
    }
    else
    {
      double v281 = objc_msgSend_string(v255, v276, v277, v278, v279, v280);
      int v286 = objc_msgSend_isEqualToString_(v281, v282, @"/", v283, v284, v285);

      if (!v286) {
        break;
      }
    }
    if (v254)
    {
      LOBYTE(v254) = 1;
    }
    else
    {
      double v287 = objc_msgSend_objectAtIndexedSubscript_(v26, v168, i, v169, v170, v171);
      unint64_t v293 = objc_msgSend_properties(v287, v288, v289, v290, v291, v292);

      uint64_t v254 = (v293 >> 6) & 1;
    }
    ++i;
  }
  if ((v254 & 1) != 0 && i + 3 < objc_msgSend_count(v26, v168, v253, v169, v170, v171))
  {
    double v294 = objc_msgSend_objectAtIndexedSubscript_(v26, v168, i, v169, v170, v171);
    uint64_t v300 = objc_msgSend_string(v294, v295, v296, v297, v298, v299);
    if (objc_msgSend_isEqualToString_(v300, v301, @"^", v302, v303, v304))
    {
      v452 = objc_msgSend_objectAtIndexedSubscript_(v26, v305, i + 1, v306, v307, v308);
      unint64_t v314 = objc_msgSend_string(v452, v309, v310, v311, v312, v313);
      if (objc_msgSend_isEqualToString_(v314, v315, @"{", v316, v317, v318))
      {
        v323 = objc_msgSend_objectAtIndexedSubscript_(v26, v319, i + 3, v320, v321, v322);
        v329 = objc_msgSend_string(v323, v324, v325, v326, v327, v328);
        int v334 = objc_msgSend_isEqualToString_(v329, v330, @"}", v331, v332, v333);
      }
      else
      {
        int v334 = 0;
      }
    }
    else
    {
      int v334 = 0;
    }

    v339 = objc_msgSend_objectAtIndexedSubscript_(v26, v335, i + 2, v336, v337, v338);
    double v345 = objc_msgSend_string(v339, v340, v341, v342, v343, v344);
    if (objc_msgSend_isEqualToString_(v345, v346, @"2", v347, v348, v349))
    {
      int v354 = 1;
    }
    else
    {
      double v355 = objc_msgSend_objectAtIndexedSubscript_(v26, v350, i + 2, v351, v352, v353);
      unint64_t v361 = objc_msgSend_string(v355, v356, v357, v358, v359, v360);
      int v354 = objc_msgSend_isEqualToString_(v361, v362, @"3", v363, v364, v365);
    }
    if (v334)
    {
      if (v354) {
        i += 4;
      }
    }
  }
  if ((v455 & 1) == 0)
  {
    if (i >= objc_msgSend_count(v26, v168, v253, v169, v170, v171)
      || (objc_msgSend_objectAtIndexedSubscript_(v26, v127, i, v129, v130, v131),
          long long v408 = objc_claimAutoreleasedReturnValue(),
          BOOL v414 = (objc_msgSend_properties(v408, v409, v410, v411, v412, v413) & 0x4000) == 0,
          v408,
          v414))
    {
      char v133 = 0;
      int v132 = 0;
    }
    else
    {
      objc_msgSend_count(v26, v127, v128, v129, v130, v131);
      char v133 = 0;
      ++i;
      int v132 = 1;
    }
    goto LABEL_85;
  }
  if (i + 2 >= objc_msgSend_count(v26, v168, v253, v169, v170, v171)) {
    goto LABEL_82;
  }
  double v366 = objc_msgSend_objectAtIndexedSubscript_(v26, v122, i, v124, v125, v126);
  v372 = objc_msgSend_string(v366, v367, v368, v369, v370, v371);
  if (objc_msgSend_isEqualToString_(v372, v373, @"}", v374, v375, v376))
  {
    v381 = objc_msgSend_objectAtIndexedSubscript_(v26, v377, i + 1, v378, v379, v380);
    unint64_t v387 = objc_msgSend_string(v381, v382, v383, v384, v385, v386);
    if (objc_msgSend_isEqualToString_(v387, v388, @"{", v389, v390, v391))
    {
      v396 = objc_msgSend_objectAtIndexedSubscript_(v26, v392, i + 2, v393, v394, v395);
      v402 = objc_msgSend_string(v396, v397, v398, v399, v400, v401);
      int v407 = objc_msgSend_isEqualToString_(v402, v403, @"}", v404, v405, v406);
    }
    else
    {
      int v407 = 0;
    }
  }
  else
  {
    int v407 = 0;
  }

  i += 3;
  int v415 = v407;
LABEL_101:
  uint64_t v425 = objc_msgSend_count(v26, v122, v123, v124, v125, v126);
  int v430 = 0;
  if (v407 && i == v425)
  {
    long long v460 = 0u;
    long long v461 = 0u;
    long long v458 = 0u;
    long long v459 = 0u;
    id v431 = v33;
    uint64_t v438 = objc_msgSend_countByEnumeratingWithState_objects_count_(v431, v432, (uint64_t)&v458, (uint64_t)v464, 16, v433);
    if (v438)
    {
      uint64_t v439 = *(void *)v459;
      while (2)
      {
        for (uint64_t j = 0; j != v438; ++j)
        {
          if (*(void *)v459 != v439) {
            objc_enumerationMutation(v431);
          }
          if ((objc_msgSend_containsObject_(&unk_1F203DCF8, v434, *(void *)(*((void *)&v458 + 1) + 8 * j), v435, v436, v437) & 1) == 0)
          {
            int v430 = 0;
            goto LABEL_113;
          }
        }
        uint64_t v438 = objc_msgSend_countByEnumeratingWithState_objects_count_(v431, v434, (uint64_t)&v458, (uint64_t)v464, 16, v437);
        if (v438) {
          continue;
        }
        break;
      }
    }
    int v430 = 1;
LABEL_113:
  }
  if (v454)
  {
    objc_msgSend_componentsJoinedByString_(v33, v426, (uint64_t)&stru_1F20141C8, v427, v428, v429);
    v441 = (NSString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_currentLocale(MEMORY[0x1E4F1CA20], v442, v443, v444, v445, v446);
    v447 = (NSLocale *)objc_claimAutoreleasedReturnValue();
    BOOL v448 = isStringNumberForLocale(v441, v447);
    if (v430) {
      BOOL v449 = v448;
    }
    else {
      BOOL v449 = 0;
    }
  }
  else
  {
    objc_msgSend_componentsJoinedByString_(v33, v426, (uint64_t)&stru_1F20141C8, v427, v428, v429);
    v441 = (NSString *)objc_claimAutoreleasedReturnValue();
    int v450 = isStringNumber(v441);
    if (v430) {
      BOOL v449 = v450;
    }
    else {
      BOOL v449 = 0;
    }
  }

  return v449 | (v415 << 8);
}

void sub_1C4B5A1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B5A4BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void findStemsAndEntryCandidates(void *a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v358 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1;
  uint64_t v353 = 0;
  int v354 = 0;
  unint64_t v355 = 0;
  v350 = 0;
  uint64_t v351 = 0;
  unint64_t v352 = 0;
  uint64_t v347 = 0;
  uint64_t v348 = 0;
  unint64_t v349 = 0;
  double v345 = 0;
  uint64_t v346 = 0;
  id v317 = a2;
  uint64_t v344 = &v345;
  long long v342 = 0u;
  long long v343 = 0u;
  long long v340 = 0u;
  long long v341 = 0u;
  if (v6) {
    uint64_t v7 = (void *)v6[9];
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v316 = a4;
  uint64_t v321 = v6;
  id obj = v7;
  uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v8, (uint64_t)&v340, (uint64_t)v357, 16, v9);
  if (v10)
  {
    uint64_t v319 = *(void *)v341;
    do
    {
      uint64_t v11 = 0;
      uint64_t v320 = v10;
      do
      {
        if (*(void *)v341 != v319) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = v321;
        if (v321) {
          uint64_t v12 = (void *)v321[10];
        }
        uint64_t v13 = *(void **)(*((void *)&v340 + 1) + 8 * v11);
        id v14 = v12;
        uint64_t v15 = NSNumber;
        uint64_t v21 = objc_msgSend_uniqueIdentifier(v13, v16, v17, v18, v19, v20);
        id v26 = objc_msgSend_numberWithInteger_(v15, v22, v21, v23, v24, v25);
        uint64_t v31 = objc_msgSend_objectForKeyedSubscript_(v14, v27, (uint64_t)v26, v28, v29, v30);
        uint64_t v322 = v11;
        v323 = v13;

        uint64_t v37 = objc_msgSend_mathResult(v31, v32, v33, v34, v35, v36);
        BOOL v38 = v37 == 0;

        if (!v38)
        {
          unint64_t v44 = 0;
          BOOL v45 = 0;
          BOOL v46 = 0;
          uint64_t v327 = 0;
          uint64_t v328 = 0;
          unint64_t v329 = 0;
          while (1)
          {
            uint64_t v48 = objc_msgSend_mathResult(v31, v39, v40, v41, v42, v43);
            double v54 = objc_msgSend_transcriptionPaths(v48, v49, v50, v51, v52, v53);
            BOOL v60 = v44 < objc_msgSend_count(v54, v55, v56, v57, v58, v59);

            if (!v60)
            {
              if (!v46)
              {
                uint64_t v143 = v348;
                if ((unint64_t)v348 >= v349)
                {
                  int64_t v150 = v348 - (unsigned char *)v347;
                  uint64_t v151 = (v348 - (unsigned char *)v347) >> 3;
                  if ((unint64_t)(v151 + 1) >> 61) {
                    sub_1C494A220();
                  }
                  unint64_t v152 = (uint64_t)(v349 - (void)v347) >> 2;
                  if (v152 <= v151 + 1) {
                    unint64_t v152 = v151 + 1;
                  }
                  if (v349 - (unint64_t)v347 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v153 = v152;
                  }
                  if (v153)
                  {
                    if (v153 >> 61) {
                      sub_1C4949AA8();
                    }
                    uint64_t v154 = (char *)operator new(8 * v153);
                  }
                  else
                  {
                    uint64_t v154 = 0;
                  }
                  uint64_t v182 = &v154[8 * v151];
                  double v183 = &v154[8 * v153];
                  *(void *)uint64_t v182 = v323;
                  uint64_t v144 = v182 + 8;
                  double v184 = (char *)v347;
                  uint64_t v185 = v348;
                  if (v348 == v347)
                  {
                    uint64_t v347 = &v154[8 * v151];
                    uint64_t v348 = v182 + 8;
                    unint64_t v349 = (unint64_t)v183;
                  }
                  else
                  {
                    unint64_t v186 = v348 - (unsigned char *)v347 - 8;
                    if (v186 < 0x78) {
                      goto LABEL_261;
                    }
                    unint64_t v187 = (v348 - 8 - (unsigned char *)v347) & 0xFFFFFFFFFFFFFFF8;
                    if (&v348[-v187 - 8] < v182 && &v154[v150 - v187 - 8] < v348) {
                      goto LABEL_261;
                    }
                    uint64_t v188 = (v186 >> 3) + 1;
                    uint64_t v189 = 8 * (v188 & 0x3FFFFFFFFFFFFFFCLL);
                    v182 -= v189;
                    double v190 = &v348[-v189];
                    uint64_t v191 = v348 - 16;
                    uint64_t v192 = &v154[8 * v151 - 16];
                    uint64_t v193 = v188 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v195 = *((_OWORD *)v191 - 1);
                      long long v194 = *(_OWORD *)v191;
                      *((_OWORD *)v191 - 1) = 0uLL;
                      *(_OWORD *)uint64_t v191 = 0uLL;
                      *((_OWORD *)v192 - 1) = v195;
                      *(_OWORD *)uint64_t v192 = v194;
                      v191 -= 32;
                      v192 -= 32;
                      v193 -= 4;
                    }
                    while (v193);
                    uint64_t v185 = v190;
                    if (v188 != (v188 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_261:
                      do
                      {
                        uint64_t v196 = *((void *)v185 - 1);
                        v185 -= 8;
                        *(void *)uint64_t v185 = 0;
                        *((void *)v182 - 1) = v196;
                        v182 -= 8;
                      }
                      while (v185 != v184);
                    }
                    uint64_t v185 = (char *)v347;
                    uint64_t v197 = v348;
                    uint64_t v347 = v182;
                    uint64_t v348 = v144;
                    unint64_t v349 = (unint64_t)v183;
                    while (v197 != v185)
                    {
                      double v198 = (void *)*((void *)v197 - 1);
                      v197 -= 8;
                    }
                  }
                  if (v185) {
                    operator delete(v185);
                  }
                }
                else
                {
                  *(void *)uint64_t v143 = v323;
                  uint64_t v144 = v143 + 8;
                }
                uint64_t v348 = v144;
                goto LABEL_191;
              }
              if (v45)
              {
                double v87 = v354;
                if ((unint64_t)v354 >= v355)
                {
                  int v354 = sub_1C4B67AD8(&v353, v323);
                }
                else
                {
                  *double v87 = v323;
                  int v354 = v87 + 1;
                }
              }
              else
              {
                uint64_t v148 = v351;
                if ((unint64_t)v351 >= v352)
                {
                  uint64_t v149 = (char *)sub_1C4B67AD8(&v350, v323);
                }
                else
                {
                  *(void *)uint64_t v148 = v323;
                  uint64_t v149 = v148 + 8;
                }
                uint64_t v351 = v149;
              }
              uint64_t v160 = objc_msgSend_uniqueIdentifier(v323, v88, v89, v90, v91, v92);
              uint64_t v161 = v160;
              char v162 = v345;
              double v163 = &v345;
LABEL_84:
              uint64_t v164 = v163;
              if (v162)
              {
                while (1)
                {
                  double v163 = (void **)v162;
                  uint64_t v165 = v162[4];
                  if (v160 < v165)
                  {
                    char v162 = *v163;
                    goto LABEL_84;
                  }
                  if (v165 >= v160) {
                    break;
                  }
                  char v162 = v163[1];
                  if (!v162)
                  {
                    uint64_t v164 = v163 + 1;
                    goto LABEL_89;
                  }
                }
                uint64_t v167 = v163;
                uint64_t v181 = v163 + 5;
                if (v163 + 5 == (void **)&v327)
                {
LABEL_191:
                  if (v327)
                  {
                    uint64_t v328 = (char *)v327;
                    operator delete(v327);
                  }
                  goto LABEL_193;
                }
              }
              else
              {
LABEL_89:
                uint64_t v166 = operator new(0x40uLL);
                uint64_t v167 = v166;
                v166[4] = v161;
                v166[5] = 0;
                v166[6] = 0;
                v166[7] = 0;
                *uint64_t v166 = 0;
                v166[1] = 0;
                v166[2] = v163;
                *uint64_t v164 = v166;
                double v168 = v166;
                if (*v344)
                {
                  uint64_t v344 = (void **)*v344;
                  double v168 = (void *)*v164;
                }
                uint64_t v169 = v345;
                BOOL v170 = v168 == v345;
                *((unsigned char *)v168 + 24) = v168 == v345;
                if (!v170)
                {
                  do
                  {
                    uint64_t v171 = v168[2];
                    if (*(unsigned char *)(v171 + 24)) {
                      break;
                    }
                    int64_t v172 = *(void **)(v171 + 16);
                    uint64_t v173 = *v172;
                    if (*v172 == v171)
                    {
                      uint64_t v176 = v172[1];
                      if (!v176 || (v177 = *(unsigned __int8 *)(v176 + 24), uint64_t v174 = (unsigned char *)(v176 + 24), v177))
                      {
                        if (*(void **)v171 == v168)
                        {
                          *(unsigned char *)(v171 + 24) = 1;
                          *((unsigned char *)v172 + 24) = 0;
                          uint64_t v180 = *(void *)(v171 + 8);
                          void *v172 = v180;
                          if (v180) {
                            goto LABEL_106;
                          }
                        }
                        else
                        {
                          uint64_t v178 = *(uint64_t **)(v171 + 8);
                          uint64_t v179 = *v178;
                          *(void *)(v171 + 8) = *v178;
                          if (v179)
                          {
                            *(void *)(v179 + 16) = v171;
                            int64_t v172 = *(void **)(v171 + 16);
                          }
                          v178[2] = (uint64_t)v172;
                          *(void *)(*(void *)(v171 + 16) + 8 * (**(void **)(v171 + 16) != v171)) = v178;
                          uint64_t *v178 = v171;
                          *(void *)(v171 + 16) = v178;
                          int64_t v172 = (void *)v178[2];
                          uint64_t v171 = *v172;
                          *((unsigned char *)v178 + 24) = 1;
                          *((unsigned char *)v172 + 24) = 0;
                          uint64_t v180 = *(void *)(v171 + 8);
                          void *v172 = v180;
                          if (v180) {
LABEL_106:
                          }
                            *(void *)(v180 + 16) = v172;
                        }
                        *(void *)(v171 + 16) = v172[2];
                        *(void *)(v172[2] + 8 * (*(void *)v172[2] != (void)v172)) = v171;
                        *(void *)(v171 + 8) = v172;
LABEL_168:
                        v172[2] = v171;
                        break;
                      }
                    }
                    else if (!v173 || (v175 = *(unsigned __int8 *)(v173 + 24), uint64_t v174 = (unsigned char *)(v173 + 24), v175))
                    {
                      if (*(void **)v171 == v168)
                      {
                        uint64_t v261 = v168[1];
                        *(void *)uint64_t v171 = v261;
                        if (v261)
                        {
                          *(void *)(v261 + 16) = v171;
                          int64_t v172 = *(void **)(v171 + 16);
                        }
                        v168[2] = v172;
                        *(void *)(*(void *)(v171 + 16) + 8 * (**(void **)(v171 + 16) != v171)) = v168;
                        v168[1] = v171;
                        *(void *)(v171 + 16) = v168;
                        int64_t v172 = (void *)v168[2];
                      }
                      else
                      {
                        double v168 = (void *)v168[2];
                      }
                      *((unsigned char *)v168 + 24) = 1;
                      *((unsigned char *)v172 + 24) = 0;
                      uint64_t v171 = v172[1];
                      uint64_t v262 = *(void **)v171;
                      v172[1] = *(void *)v171;
                      if (v262) {
                        v262[2] = v172;
                      }
                      *(void *)(v171 + 16) = v172[2];
                      *(void *)(v172[2] + 8 * (*(void *)v172[2] != (void)v172)) = v171;
                      *(void *)uint64_t v171 = v172;
                      goto LABEL_168;
                    }
                    *(unsigned char *)(v171 + 24) = 1;
                    double v168 = v172;
                    *((unsigned char *)v172 + 24) = v172 == v169;
                    *uint64_t v174 = 1;
                  }
                  while (v172 != v169);
                }
                ++v346;
                uint64_t v181 = v166 + 5;
                if (v166 + 5 == &v327) {
                  goto LABEL_191;
                }
              }
              uint64_t v264 = (char *)v327;
              uint64_t v263 = v328;
              size_t v265 = v328 - (unsigned char *)v327;
              unint64_t v266 = (v328 - (unsigned char *)v327) >> 3;
              uint64_t v267 = v167[7];
              uint64_t v268 = (char *)v167[5];
              if (v266 > (v267 - (uint64_t)v268) >> 3)
              {
                if (v268)
                {
                  v167[6] = v268;
                  operator delete(v268);
                  uint64_t v267 = 0;
                  *uint64_t v181 = 0;
                  v181[1] = 0;
                  v181[2] = 0;
                }
                if ((v265 & 0x8000000000000000) != 0) {
                  goto LABEL_252;
                }
                uint64_t v269 = v267 >> 2;
                if (v267 >> 2 <= v266) {
                  uint64_t v269 = v266;
                }
                unint64_t v270 = (unint64_t)v267 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v269;
                if (v270 >> 61) {
LABEL_252:
                }
                  sub_1C494A220();
                double v271 = (char *)operator new(8 * v270);
                uint64_t v268 = v271;
                v167[6] = v271;
                uint64_t v272 = (char **)(v167 + 6);
                *(v272 - 1) = v271;
                v272[1] = &v271[8 * v270];
                if (v263 != v264) {
                  memcpy(v271, v264, v265);
                }
                goto LABEL_190;
              }
              uint64_t v274 = (char *)v167[6];
              uint64_t v272 = (char **)(v167 + 6);
              uint64_t v273 = v274;
              size_t v275 = v274 - v268;
              unint64_t v276 = (v274 - v268) >> 3;
              if (v276 >= v266)
              {
                if (v328 != v327)
                {
                  uint64_t v278 = v268;
                  uint64_t v277 = (char *)v327;
                  goto LABEL_189;
                }
              }
              else
              {
                if (v273 != v268)
                {
                  memmove(v268, v327, v275);
                  uint64_t v268 = *v272;
                }
                uint64_t v277 = &v264[8 * v276];
                size_t v265 = v263 - v277;
                if (v263 == v277) {
                  goto LABEL_190;
                }
                uint64_t v278 = v268;
LABEL_189:
                memmove(v278, v277, v265);
              }
LABEL_190:
              uint64_t *v272 = &v268[v265];
              goto LABEL_191;
            }
            objc_msgSend_mathResult(v31, v61, v62, v63, v64, v65);
            BOOL v66 = (CHTokenizedMathResult *)objc_claimAutoreleasedReturnValue();
            valiCGFloat d = isValidVerticalMathEntry(v66, v44, a3);

            BOOL v46 = (valid | v46) != 0;
            BOOL v45 = (HIBYTE(valid) | v45) != 0;
            if ((_BYTE)valid) {
              break;
            }
LABEL_14:
            ++v44;
          }
          double v68 = v328;
          if ((unint64_t)v328 >= v329)
          {
            double v69 = (char *)v327;
            int64_t v70 = v328 - (unsigned char *)v327;
            uint64_t v71 = (v328 - (unsigned char *)v327) >> 3;
            unint64_t v72 = v71 + 1;
            if ((unint64_t)(v71 + 1) >> 61) {
              sub_1C494A220();
            }
            uint64_t v73 = v329 - (void)v327;
            if ((uint64_t)(v329 - (void)v327) >> 2 > v72) {
              unint64_t v72 = v73 >> 2;
            }
            if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v74 = v72;
            }
            if (v74)
            {
              if (v74 >> 61) {
                sub_1C4949AA8();
              }
              uint64_t v75 = (char *)operator new(8 * v74);
              uint64_t v76 = (unint64_t *)&v75[8 * v71];
              *uint64_t v76 = v44;
              uint64_t v47 = (uint64_t)(v76 + 1);
              int64_t v77 = v68 - v69;
              if (v68 == v69)
              {
LABEL_35:
                uint64_t v327 = v76;
                uint64_t v328 = (char *)v47;
                unint64_t v329 = (unint64_t)&v75[8 * v74];
                if (v69) {
                  operator delete(v69);
                }
                goto LABEL_13;
              }
            }
            else
            {
              uint64_t v75 = 0;
              uint64_t v76 = (unint64_t *)(8 * v71);
              *(void *)(8 * v71) = v44;
              uint64_t v47 = 8 * v71 + 8;
              int64_t v77 = v68 - v69;
              if (v68 == v69) {
                goto LABEL_35;
              }
            }
            unint64_t v78 = v77 - 8;
            if (v78 < 0x58) {
              goto LABEL_262;
            }
            if ((unint64_t)(v68 - v75 - v70) < 0x20) {
              goto LABEL_262;
            }
            uint64_t v79 = (v78 >> 3) + 1;
            uint64_t v80 = 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v81 = &v68[-v80];
            uint64_t v76 = (unint64_t *)((char *)v76 - v80);
            uint64_t v82 = &v75[8 * v71 - 16];
            uint64_t v83 = v68 - 16;
            uint64_t v84 = v79 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v85 = *(_OWORD *)v83;
              *((_OWORD *)v82 - 1) = *((_OWORD *)v83 - 1);
              *(_OWORD *)uint64_t v82 = v85;
              v82 -= 32;
              v83 -= 32;
              v84 -= 4;
            }
            while (v84);
            double v68 = v81;
            if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_262:
              do
              {
                unint64_t v86 = *((void *)v68 - 1);
                v68 -= 8;
                *--uint64_t v76 = v86;
              }
              while (v68 != v69);
            }
            goto LABEL_35;
          }
          *(void *)uint64_t v328 = v44;
          uint64_t v47 = (uint64_t)(v68 + 8);
LABEL_13:
          uint64_t v328 = (char *)v47;
          goto LABEL_14;
        }
        double v98 = objc_msgSend_strokeClassificationResult(v321, v39, v40, v41, v42, v43);
        if (v98
          && (objc_msgSend_classification(v13, v93, v94, v95, v96, v97) == 6
           || objc_msgSend_classification(v13, v99, v100, v101, v102, v103) == 5))
        {
          int v104 = objc_msgSend_strokeIdentifiers(v13, v99, v100, v101, v102, v103);
          BOOL v110 = objc_msgSend_count(v104, v105, v106, v107, v108, v109) == 1;

          if (v110)
          {
            long long v338 = 0u;
            long long v339 = 0u;
            long long v337 = 0u;
            long long v336 = 0u;
            uint64_t v116 = objc_msgSend_strokeClassificationResult(v321, v111, v112, v113, v114, v115);
            double v122 = objc_msgSend_nontextCandidates(v116, v117, v118, v119, v120, v121);

            uint64_t v130 = objc_msgSend_countByEnumeratingWithState_objects_count_(v122, v123, (uint64_t)&v336, (uint64_t)v356, 16, v124);
            if (!v130) {
              goto LABEL_53;
            }
            uint64_t v131 = *(void *)v337;
            while (1)
            {
              for (uint64_t i = 0; i != v130; ++i)
              {
                if (*(void *)v337 != v131) {
                  objc_enumerationMutation(v122);
                }
                char v133 = *(void **)(*((void *)&v336 + 1) + 8 * i);
                uint64_t v134 = objc_msgSend_strokeIdentifier(v133, v125, v126, v127, v128, v129);
                BOOL v140 = objc_msgSend_firstStrokeIdentifier(v13, v135, v136, v137, v138, v139);
                BOOL v141 = v134 == v140;

                if (v141)
                {
                  id v142 = v133;
LABEL_143:

                  BOOL v221 = v317 == 0;
                  if (v142) {
                    BOOL v221 = 1;
                  }
                  uint64_t v222 = v323;
                  if (v221)
                  {
LABEL_150:
                    if (!v142
                      || !objc_msgSend_isVerticalMathHorizontalLine(v142, v216, v217, v218, v219, v220))
                    {
                      goto LABEL_157;
                    }
                    uint64_t v258 = v354;
                    if ((unint64_t)v354 >= v355)
                    {
                      int v354 = sub_1C4B67AD8(&v353, v222);
                    }
                    else
                    {
                      *uint64_t v258 = v222;
                      int v354 = v258 + 1;
                    }
                  }
                  else
                  {
                    objc_msgSend_bounds(v323, v216, v217, v218, v219, v220);
                    double v224 = v223;
                    objc_msgSend_bounds(v323, v225, v226, v227, v228, v229);
                    if (v224 > v230 + v230)
                    {
                      uint64_t v327 = 0;
                      uint64_t v328 = (char *)&v327;
                      unint64_t v329 = 0x4812000000;
                      unint64_t v330 = sub_1C4B5B838;
                      uint64_t v331 = sub_1C4B5B85C;
                      uint64_t v332 = &unk_1C4CB5C62;
                      int v334 = 0;
                      uint64_t v335 = 0;
                      __p = 0;
                      double v231 = objc_opt_class();
                      double v237 = objc_msgSend_strokeIdentifiers(v323, v232, v233, v234, v235, v236);
                      uint64_t v243 = objc_msgSend_anyObject(v237, v238, v239, v240, v241, v242);
                      uint64_t v247 = objc_msgSend_strokeForIdentifier_inStrokeProvider_(v231, v244, (uint64_t)v243, (uint64_t)v317, v245, v246);

                      uint64_t v248 = objc_opt_class();
                      v326[0] = MEMORY[0x1E4F143A8];
                      v326[1] = 3221225472;
                      v326[2] = sub_1C4B5B874;
                      v326[3] = &unk_1E64E18B8;
                      v326[4] = &v327;
                      objc_msgSend_enumeratePointsForStroke_interpolationType_resolution_usingBlock_(v248, v249, (uint64_t)v247, 1, 1, (uint64_t)v326);
                      double v325 = 0.0;
                      uint64_t v250 = objc_opt_class();
                      objc_msgSend_lineOrientationForStrokePoints_error_(v250, v251, (uint64_t)(v328 + 48), (uint64_t)&v325, v252, v253);
                      double v255 = v254;
                      double v256 = [CHNonTextCandidateStroke alloc];
                      id v142 = (id)objc_msgSend_initWithStroke_consistingOfSubstrokes_classificationAsNonText_lineOrientation_lineError_containerScore_fallbackClassification_(v256, v257, (uint64_t)v247, 0, 5, 5, v255, v325, 0.0);

                      _Block_object_dispose(&v327, 8);
                      if (__p)
                      {
                        int v334 = __p;
                        operator delete(__p);
                      }
                      uint64_t v222 = v323;
                      goto LABEL_150;
                    }
                    id v142 = 0;
LABEL_157:
                    uint64_t v259 = v348;
                    if ((unint64_t)v348 >= v349)
                    {
                      uint64_t v260 = (char *)sub_1C4B67AD8(&v347, v222);
                    }
                    else
                    {
                      *(void *)uint64_t v259 = v222;
                      uint64_t v260 = v259 + 8;
                    }
                    uint64_t v348 = v260;
                  }

                  goto LABEL_193;
                }
                uint64_t v13 = v323;
              }
              uint64_t v130 = objc_msgSend_countByEnumeratingWithState_objects_count_(v122, v125, (uint64_t)&v336, (uint64_t)v356, 16, v129);
              if (!v130)
              {
LABEL_53:
                id v142 = 0;
                goto LABEL_143;
              }
            }
          }
        }
        else
        {
        }
        uint64_t v145 = v348;
        uint64_t v146 = v13;
        if ((unint64_t)v348 >= v349)
        {
          int64_t v155 = v348 - (unsigned char *)v347;
          uint64_t v156 = (v348 - (unsigned char *)v347) >> 3;
          if ((unint64_t)(v156 + 1) >> 61) {
            sub_1C494A220();
          }
          unint64_t v157 = (uint64_t)(v349 - (void)v347) >> 2;
          if (v157 <= v156 + 1) {
            unint64_t v157 = v156 + 1;
          }
          if (v349 - (unint64_t)v347 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v158 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v158 = v157;
          }
          if (v158)
          {
            if (v158 >> 61) {
              sub_1C4949AA8();
            }
            uint64_t v159 = (char *)operator new(8 * v158);
            uint64_t v146 = v13;
          }
          else
          {
            uint64_t v159 = 0;
          }
          double v199 = &v159[8 * v156];
          uint64_t v200 = &v159[8 * v158];
          *(void *)double v199 = v146;
          uint64_t v147 = v199 + 8;
          uint64_t v201 = (char *)v347;
          uint64_t v202 = v348;
          if (v348 == v347)
          {
            uint64_t v347 = &v159[8 * v156];
            uint64_t v348 = v199 + 8;
            unint64_t v349 = (unint64_t)v200;
          }
          else
          {
            unint64_t v203 = v348 - (unsigned char *)v347 - 8;
            if (v203 < 0x78) {
              goto LABEL_263;
            }
            unint64_t v204 = (v348 - 8 - (unsigned char *)v347) & 0xFFFFFFFFFFFFFFF8;
            if (&v348[-v204 - 8] < v199 && &v159[v155 - v204 - 8] < v348) {
              goto LABEL_263;
            }
            uint64_t v205 = (v203 >> 3) + 1;
            uint64_t v206 = 8 * (v205 & 0x3FFFFFFFFFFFFFFCLL);
            v199 -= v206;
            uint64_t v207 = &v348[-v206];
            uint64_t v208 = v348 - 16;
            uint64_t v209 = &v159[8 * v156 - 16];
            uint64_t v210 = v205 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v212 = *((_OWORD *)v208 - 1);
              long long v211 = *(_OWORD *)v208;
              *((_OWORD *)v208 - 1) = 0uLL;
              *(_OWORD *)uint64_t v208 = 0uLL;
              *((_OWORD *)v209 - 1) = v212;
              *(_OWORD *)uint64_t v209 = v211;
              v208 -= 32;
              v209 -= 32;
              v210 -= 4;
            }
            while (v210);
            uint64_t v202 = v207;
            if (v205 != (v205 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_263:
              do
              {
                uint64_t v213 = *((void *)v202 - 1);
                v202 -= 8;
                *(void *)uint64_t v202 = 0;
                *((void *)v199 - 1) = v213;
                v199 -= 8;
              }
              while (v202 != v201);
            }
            uint64_t v202 = (char *)v347;
            uint64_t v214 = v348;
            uint64_t v347 = v199;
            uint64_t v348 = v147;
            unint64_t v349 = (unint64_t)v200;
            while (v214 != v202)
            {
              int v215 = (void *)*((void *)v214 - 1);
              v214 -= 8;
            }
          }
          if (v202) {
            operator delete(v202);
          }
        }
        else
        {
          *(void *)uint64_t v145 = v13;
          uint64_t v147 = v145 + 8;
        }
        uint64_t v348 = v147;
LABEL_193:

        uint64_t v11 = v322 + 1;
      }
      while (v322 + 1 != v320);
      uint64_t v281 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v279, (uint64_t)&v340, (uint64_t)v357, 16, v280);
      uint64_t v10 = v281;
    }
    while (v281);
  }

  v282 = sub_1C4B6792C((void *)v316, (uint64_t *)&v353);
  sub_1C4B6792C(v282 + 3, (uint64_t *)&v350);
  sub_1C4B6792C(v282 + 6, (uint64_t *)&v347);
  v282[10] = 0;
  v282[11] = 0;
  uint64_t v283 = v282 + 10;
  *(v283 - 1) = v283;
  uint64_t v284 = v344;
  if (v344 != &v345)
  {
    while (1)
    {
      uint64_t v297 = *(void *)(v316 + 80);
      uint64_t v298 = v283;
      if (*(void **)(v316 + 72) != v283)
      {
        uint64_t v299 = *(void **)(v316 + 80);
        uint64_t v300 = v283;
        if (v297)
        {
          do
          {
            uint64_t v298 = v299;
            uint64_t v299 = (void *)v299[1];
          }
          while (v299);
        }
        else
        {
          do
          {
            uint64_t v298 = (void *)v300[2];
            BOOL v170 = *v298 == (void)v300;
            uint64_t v300 = v298;
          }
          while (v170);
        }
        uint64_t v301 = v284[4];
        if (v298[4] >= v301) {
          break;
        }
      }
      if (v297) {
        uint64_t v302 = (uint64_t **)v298;
      }
      else {
        uint64_t v302 = (uint64_t **)v283;
      }
      if (v297) {
        uint64_t v303 = (uint64_t **)(v298 + 1);
      }
      else {
        uint64_t v303 = (uint64_t **)v283;
      }
      if (!*v303) {
        goto LABEL_238;
      }
LABEL_244:
      unint64_t v314 = (void *)v284[1];
      if (v314)
      {
        do
        {
          unint64_t v315 = (void **)v314;
          unint64_t v314 = (void *)*v314;
        }
        while (v314);
      }
      else
      {
        do
        {
          unint64_t v315 = (void **)v284[2];
          BOOL v170 = *v315 == v284;
          uint64_t v284 = v315;
        }
        while (!v170);
      }
      uint64_t v284 = v315;
      if (v315 == &v345) {
        goto LABEL_200;
      }
    }
    uint64_t v303 = (uint64_t **)v283;
    uint64_t v302 = (uint64_t **)v283;
    if (v297)
    {
      uint64_t v304 = *(uint64_t **)(v316 + 80);
      while (1)
      {
        while (1)
        {
          uint64_t v302 = (uint64_t **)v304;
          uint64_t v305 = v304[4];
          if (v305 <= v301) {
            break;
          }
          uint64_t v304 = *v302;
          uint64_t v303 = v302;
          if (!*v302) {
            goto LABEL_238;
          }
        }
        if (v305 >= v301) {
          goto LABEL_244;
        }
        uint64_t v304 = v302[1];
        if (!v304)
        {
          uint64_t v303 = v302 + 1;
          break;
        }
      }
    }
LABEL_238:
    uint64_t v306 = (uint64_t *)operator new(0x40uLL);
    uint64_t v307 = v284[4];
    v306[5] = 0;
    v306[4] = v307;
    v306[6] = 0;
    v306[7] = 0;
    unint64_t v309 = (unsigned char *)v284[5];
    uint64_t v308 = (unsigned char *)v284[6];
    int64_t v310 = v308 - v309;
    if (v308 != v309)
    {
      if (v310 < 0) {
        sub_1C494A220();
      }
      uint64_t v311 = (char *)operator new(v308 - v309);
      v306[5] = (uint64_t)v311;
      v306[6] = (uint64_t)v311;
      uint64_t v312 = &v311[8 * (v310 >> 3)];
      v306[7] = (uint64_t)v312;
      memcpy(v311, v309, v310);
      v306[6] = (uint64_t)v312;
    }
    *uint64_t v306 = 0;
    v306[1] = 0;
    v306[2] = (uint64_t)v302;
    char *v303 = v306;
    uint64_t v313 = **(void **)(v316 + 72);
    if (v313)
    {
      *(void *)(v316 + 72) = v313;
      uint64_t v306 = *v303;
    }
    sub_1C4949FD4(*(uint64_t **)(v316 + 80), v306);
    ++*(void *)(v316 + 88);
    goto LABEL_244;
  }
LABEL_200:
  sub_1C4A2C604(v345);
  uint64_t v285 = (char *)v347;
  if (v347)
  {
    int v286 = v348;
    double v287 = v347;
    if (v348 != v347)
    {
      do
      {
        uint64_t v288 = (void *)*((void *)v286 - 1);
        v286 -= 8;
      }
      while (v286 != v285);
      double v287 = v347;
    }
    uint64_t v348 = v285;
    operator delete(v287);
  }
  uint64_t v289 = (char *)v350;
  if (v350)
  {
    uint64_t v290 = v351;
    uint64_t v291 = v350;
    if (v351 != v350)
    {
      do
      {
        uint64_t v292 = (void *)*((void *)v290 - 1);
        v290 -= 8;
      }
      while (v290 != v289);
      uint64_t v291 = v350;
    }
    uint64_t v351 = v289;
    operator delete(v291);
  }
  unint64_t v293 = v353;
  if (v353)
  {
    double v294 = v354;
    v295 = v353;
    if (v354 != v353)
    {
      do
      {
        uint64_t v296 = (void *)*--v294;
      }
      while (v294 != v293);
      v295 = v353;
    }
    int v354 = v293;
    operator delete(v295);
  }
}

void sub_1C4B5B5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,char *__p,uint64_t a60,uint64_t a61,char *a62,uint64_t a63)
{
  sub_1C4A16BB8(v66);
  sub_1C4A16BB8(a14);
  sub_1C4A2C604(a57);
  if (__p)
  {
    double v68 = (char *)a60;
    double v69 = __p;
    if ((char *)a60 != __p)
    {
      do
      {
        int64_t v70 = (void *)*((void *)v68 - 1);
        v68 -= 8;
      }
      while (v68 != __p);
      double v69 = __p;
    }
    operator delete(v69);
  }
  if (a62)
  {
    uint64_t v71 = (char *)a63;
    unint64_t v72 = a62;
    if ((char *)a63 != a62)
    {
      do
      {
        uint64_t v73 = (void *)*((void *)v71 - 1);
        v71 -= 8;
      }
      while (v71 != a62);
      unint64_t v72 = a62;
    }
    operator delete(v72);
  }
  if (a65)
  {
    unint64_t v74 = (char *)a66;
    uint64_t v75 = a65;
    if ((char *)a66 != a65)
    {
      do
      {
        uint64_t v76 = (void *)*((void *)v74 - 1);
        v74 -= 8;
      }
      while (v74 != a65);
      uint64_t v75 = a65;
    }
    operator delete(v75);
  }

  _Unwind_Resume(a1);
}

__n128 sub_1C4B5B838(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1C4B5B85C(uint64_t a1)
{
  double v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1C4B5B874(uint64_t a1, double a2, double a3)
{
  BOOL v5 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v7 = (double *)v5[7];
  unint64_t v6 = v5[8];
  if ((unint64_t)v7 < v6)
  {
    double *v7 = a2;
    v7[1] = a3;
    uint64_t v8 = (uint64_t)(v7 + 2);
    goto LABEL_18;
  }
  uint64_t v9 = (double *)v5[6];
  uint64_t v10 = ((char *)v7 - (char *)v9) >> 4;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60) {
    sub_1C494A220();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 60) {
      sub_1C4949AA8();
    }
    id v14 = (char *)operator new(16 * v13);
    uint64_t v15 = (double *)&v14[16 * v10];
    uint64_t v16 = &v14[16 * v13];
    *uint64_t v15 = a2;
    v15[1] = a3;
    uint64_t v8 = (uint64_t)(v15 + 2);
    if (v7 == v9) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  uint64_t v15 = (double *)(16 * v10);
  uint64_t v16 = 0;
  *uint64_t v15 = a2;
  v15[1] = a3;
  uint64_t v8 = 16 * v10 + 16;
  if (v7 != v9)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
      v15 -= 2;
      v7 -= 2;
    }
    while (v7 != v9);
    uint64_t v7 = (double *)v5[6];
  }
LABEL_16:
  void v5[6] = v15;
  v5[7] = v8;
  v5[8] = v16;
  if (v7) {
    operator delete(v7);
  }
LABEL_18:
  v5[7] = v8;
}

double scoreStemEntry(CHStrokeGroup *a1, CHStrokeGroup *a2, double a3, int a4, int a5)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a1;
  uint64_t v10 = a2;
  objc_msgSend_bounds(v9, v11, v12, v13, v14, v15);
  CGFloat v17 = v16;
  objc_msgSend_bounds(v9, v18, v19, v20, v21, v22);
  CGFloat v24 = v23;
  objc_msgSend_bounds(v10, v25, v26, v27, v28, v29);
  v111.origin.float x = v30;
  v111.origin.float y = v31;
  v111.size.double width = v32;
  v111.size.height = v33;
  v106.origin.float y = -3.40282347e38;
  v106.size.height = INFINITY;
  v106.origin.float x = v17;
  v106.size.double width = v24;
  CGRect v107 = CGRectIntersection(v106, v111);
  double width = v107.size.width;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v35 = (id)qword_1EA3C9FA8;
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend_bounds(v10, v36, v37, v38, v39, v40);
    uint64_t v42 = "false";
    if (a4) {
      uint64_t v42 = "true";
    }
    int v99 = 136315650;
    uint64_t v100 = v42;
    __int16 v101 = 2048;
    double v102 = width;
    __int16 v103 = 2048;
    double v104 = width / v41;
    _os_log_impl(&dword_1C492D000, v35, OS_LOG_TYPE_DEBUG, "scoreStemEntry (below=%s): horizontalOverlap: %f -> %f", (uint8_t *)&v99, 0x20u);
  }

  objc_msgSend_bounds(v10, v43, v44, v45, v46, v47);
  double v54 = -1.0;
  if (width >= v53 * 0.6)
  {
    objc_msgSend_bounds(v10, v48, v49, v50, v51, v52);
    double MaxY = CGRectGetMaxY(v108);
    objc_msgSend_bounds(v9, v56, v57, v58, v59, v60);
    if (a4)
    {
      BOOL v65 = MaxY > CGRectGetMaxY(*(CGRect *)&v61);
      objc_msgSend_bounds(v10, v66, v67, v68, v69, v70);
      double MinY = CGRectGetMinY(v109);
      objc_msgSend_bounds(v9, v72, v73, v74, v75, v76);
    }
    else
    {
      BOOL v65 = MaxY < CGRectGetMaxY(*(CGRect *)&v61);
      objc_msgSend_bounds(v9, v81, v82, v83, v84, v85);
      double MinY = CGRectGetMinY(v110);
      objc_msgSend_bounds(v10, v86, v87, v88, v89, v90);
    }
    double v91 = MinY - CGRectGetMaxY(*(CGRect *)&v77);
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    double v92 = v91 / a3;
    double v93 = (id)qword_1EA3C9FA8;
    if (os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v94 = "false";
      int v99 = 136315650;
      if (a4) {
        uint64_t v94 = "true";
      }
      uint64_t v100 = v94;
      __int16 v101 = 2048;
      double v102 = v91;
      __int16 v103 = 2048;
      double v104 = v92;
      _os_log_impl(&dword_1C492D000, v93, OS_LOG_TYPE_DEBUG, "scoreStemEntry (below=%s): verticalDistanceFromStem: %f -> %f", (uint8_t *)&v99, 0x20u);
    }

    if (a5)
    {
      if (v92 > -0.6 && v92 <= 0.0)
      {
        double v54 = 100.0;
        goto LABEL_34;
      }
    }
    else if (v92 <= 0.0 && v65)
    {
      double v54 = fabs(v92) + 100.0;
      goto LABEL_34;
    }
    double v96 = 3.0;
    if (a4) {
      double v96 = 1.5;
    }
    if (v92 >= v96 || v92 <= 0.0) {
      double v54 = -3.0;
    }
    else {
      double v54 = 4.0 - v92;
    }
  }
LABEL_34:

  return v54;
}

void sub_1C4B5BD18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B5BD54(id *a1, id **a2, id **a3, id **a4, void *a5, void *a6)
{
  uint64_t v220 = *MEMORY[0x1E4F143B8];
  id v185 = a5;
  id v196 = a6;
  *(unsigned char *)a1 = 0;
  location = a1;
  *((unsigned char *)a1 + 16) = 0;
  uint64_t v189 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v9, v10, v11, v12, v13);
  uint64_t v19 = *a2;
  double v190 = a2[1];
  uint64_t v192 = a2;
  if (*a2 != v190)
  {
    int v187 = 0;
    unint64_t v186 = a1 + 1;
    double v20 = 0.0;
    do
    {
      long long v194 = v19;
      uint64_t v21 = (CHStrokeGroup *)*v19;
      LOBYTE(obj) = 0;
      char v212 = 0;
      uint64_t v22 = NSNumber;
      uint64_t v28 = objc_msgSend_uniqueIdentifier(v21, v23, v24, v25, v26, v27);
      CGFloat v33 = objc_msgSend_numberWithInteger_(v22, v29, v28, v30, v31, v32);
      uint64_t v38 = objc_msgSend_objectForKeyedSubscript_(v196, v34, (uint64_t)v33, v35, v36, v37);
      uint64_t v44 = objc_msgSend_mathResult(v38, v39, v40, v41, v42, v43);

      if (v44)
      {
        uint64_t v50 = NSNumber;
        uint64_t v51 = objc_msgSend_uniqueIdentifier(v21, v45, v46, v47, v48, v49);
        uint64_t v56 = objc_msgSend_numberWithInteger_(v50, v52, v51, v53, v54, v55);
        uint64_t v61 = objc_msgSend_objectForKeyedSubscript_(v196, v57, (uint64_t)v56, v58, v59, v60);
        uint64_t v67 = objc_msgSend_mathResult(v61, v62, v63, v64, v65, v66);
        objc_msgSend_baseCharacterHeight(v67, v68, v69, v70, v71, v72);
        double v74 = v73;

        uint64_t v76 = *a3;
        uint64_t v75 = a3[1];
        if (*a3 == v75) {
          goto LABEL_17;
        }
      }
      else
      {
        double v74 = 9.22337204e18;
        uint64_t v76 = *a3;
        uint64_t v75 = a3[1];
        if (*a3 == v75)
        {
LABEL_17:
          int v195 = 0;
          double v78 = 0.0;
          uint64_t v117 = v76;
          double v77 = 0.0;
          goto LABEL_18;
        }
      }
      int v195 = 0;
      double v77 = 0.0;
      double v78 = 0.0;
      do
      {
        uint64_t v79 = (CHStrokeGroup *)*v76;
        uint64_t v80 = NSNumber;
        uint64_t v86 = objc_msgSend_uniqueIdentifier(v79, v81, v82, v83, v84, v85);
        double v91 = objc_msgSend_numberWithInteger_(v80, v87, v86, v88, v89, v90);
        double v96 = objc_msgSend_objectForKeyedSubscript_(v196, v92, (uint64_t)v91, v93, v94, v95);
        double v102 = objc_msgSend_mathResult(v96, v97, v98, v99, v100, v101);
        objc_msgSend_baseCharacterHeight(v102, v103, v104, v105, v106, v107);
        double v109 = v108;

        if (v74 == 9.22337204e18) {
          double v110 = v109;
        }
        else {
          double v110 = v74;
        }
        double v111 = scoreStemEntry(v21, v79, v110, 0, v44 == 0);
        if (v111 > v77)
        {
          uint64_t v112 = v21;
          uint64_t v113 = v79;
          uint64_t v114 = v113;
          if (v195)
          {
            id v115 = obj;
            id obj = v112;

            id v116 = v211;
            id v211 = v114;
          }
          else
          {
            id obj = v112;
            id v211 = v113;
            int v195 = 1;
            char v212 = 1;
          }
          double v77 = v111;
        }

        double v78 = v78 + v109;
        ++v76;
      }
      while (v76 != v75);
      uint64_t v76 = *a3;
      uint64_t v117 = a3[1];
LABEL_18:
      if (v74 == 9.22337204e18) {
        double v74 = v78 / (double)(unint64_t)(v117 - v76);
      }
      uint64_t v118 = *a4;
      uint64_t v119 = a4[1];
      if (*a4 != v119)
      {
        while (1)
        {
          uint64_t v120 = (CHStrokeGroup *)*v118;
          if (scoreStemEntry(v21, v120, v74, 0, 1) > v77) {
            break;
          }

          if (++v118 == v119) {
            goto LABEL_23;
          }
        }
        if (v195)
        {

          char v212 = 0;
        }
        objc_msgSend_addObject_(v189, v121, (uint64_t)v21, v122, v123, v124);
LABEL_45:

        goto LABEL_46;
      }
LABEL_23:
      if (v195)
      {
        uint64_t v125 = NSNumber;
        uint64_t v126 = objc_msgSend_uniqueIdentifier(v21, v45, v46, v47, v48, v49);
        uint64_t v131 = objc_msgSend_numberWithInteger_(v125, v127, v126, v128, v129, v130);
        uint64_t v136 = objc_msgSend_objectForKeyedSubscript_(v196, v132, (uint64_t)v131, v133, v134, v135);
        id v142 = objc_msgSend_mathResult(v136, v137, v138, v139, v140, v141);

        if (v142)
        {
          v208[0] = 0;
          v208[1] = v208;
          v208[2] = 0x2020000000;
          char v209 = 1;
          *(void *)&long long buf = 0;
          *((void *)&buf + 1) = &buf;
          uint64_t v214 = 0x5012000000;
          int v215 = sub_1C4B5C738;
          double v216 = nullsub_43;
          uint64_t v217 = &unk_1C4CB5C62;
          long long v147 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
          long long v218 = *MEMORY[0x1E4F1DB20];
          long long v219 = v147;
          uint64_t v204 = 0;
          uint64_t v205 = &v204;
          uint64_t v206 = 0x2020000000;
          uint64_t v207 = 1;
          v202[0] = 0;
          v202[1] = v202;
          v202[2] = 0x2020000000;
          char v203 = 0;
          uint64_t v198 = 0;
          double v199 = &v198;
          uint64_t v200 = 0x2020000000;
          char v201 = 0;
          v197[0] = MEMORY[0x1E4F143A8];
          v197[1] = 3221225472;
          v197[2] = sub_1C4B5C748;
          v197[3] = &unk_1E64E42F8;
          v197[4] = v208;
          v197[5] = v202;
          v197[6] = &v198;
          v197[7] = &buf;
          v197[8] = &v204;
          objc_msgSend_enumerateTokensInTopTranscriptionPathWithBlock_(v142, v143, (uint64_t)v197, v144, v145, v146);
          id v148 = v211;
          objc_msgSend_bounds(v211, v149, v150, v151, v152, v153);
          double Width = CGRectGetWidth(v221);
          double v160 = v74 / 3.0;
          if (*((unsigned char *)v199 + 24) || v205[3] > 1 || (double v161 = 0.0, Width < v160)) {
            double v161 = v74 / 3.0;
          }
          objc_msgSend_bounds(v148, v154, v155, v156, v157, v158, Width, v160);
          double MinX = CGRectGetMinX(v222);
          if (MinX > v161 + CGRectGetMaxX(*(CGRect *)(*((void *)&buf + 1) + 48)))
          {

            char v212 = 0;
            objc_msgSend_addObject_(v189, v163, (uint64_t)v21, v164, v165, v166);
            int v195 = 0;
          }
          _Block_object_dispose(&v198, 8);
          _Block_object_dispose(v202, 8);
          _Block_object_dispose(&v204, 8);
          _Block_object_dispose(&buf, 8);
          _Block_object_dispose(v208, 8);
        }

        if (v195 && v77 > v20)
        {
          if (v187 == v195)
          {
            objc_storeStrong(location, obj);
            objc_storeStrong(v186, v211);
          }
          else
          {
            id *location = obj;
            location[1] = v211;
            int v187 = 1;
            *((unsigned char *)location + 16) = 1;
          }
          double v20 = v77;
        }
        else if (!v195)
        {
          goto LABEL_46;
        }

        uint64_t v120 = (CHStrokeGroup *)obj;
        goto LABEL_45;
      }
LABEL_46:

      uint64_t v19 = v194 + 1;
      a2 = v192;
    }
    while (v194 + 1 != v190);
  }
  if (objc_msgSend_count(v189, v14, v15, v16, v17, v18))
  {
    uint64_t v167 = (uint64_t *)*a2;
    double v168 = (uint64_t *)a2[1];
    id v173 = v189;
    if (v167 != v168)
    {
      while ((objc_msgSend_containsObject_(v173, v169, *v167, v170, v171, v172) & 1) == 0)
      {
        if (++v167 == v168)
        {
          uint64_t v167 = v168;
          goto LABEL_58;
        }
      }
      if (v167 != v168)
      {
        for (uint64_t i = v167 + 1; i != v168; ++i)
        {
          if ((objc_msgSend_containsObject_(v173, v169, *i, v170, v171, v172) & 1) == 0)
          {
            uint64_t v175 = *i;
            *uint64_t i = 0;
            uint64_t v176 = (void *)*v167;
            *uint64_t v167 = v175;

            ++v167;
          }
        }
      }
    }
LABEL_58:

    uint64_t v181 = (uint64_t *)v192[1];
    if (v167 != v181)
    {
      while (v181 != v167)
      {
        uint64_t v182 = (void *)*--v181;
      }
      v192[1] = (id *)v167;
    }
    objc_msgSend_unionSet_(v185, v177, (uint64_t)v173, v178, v179, v180);
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  double v183 = (id)qword_1EA3C9FA8;
  if (os_log_type_enabled(v183, OS_LOG_TYPE_DEBUG))
  {
    if (*((unsigned char *)location + 16)) {
      double v184 = "true";
    }
    else {
      double v184 = "false";
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v184;
    _os_log_impl(&dword_1C492D000, v183, OS_LOG_TYPE_DEBUG, "findBestStemEntryPair: %s", (uint8_t *)&buf, 0xCu);
  }
}

void sub_1C4B5C5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  _Unwind_Resume(a1);
}

__n128 sub_1C4B5C738(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1C4B5C748(void *a1, void *a2)
{
  id v17 = a2;
  if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
  {
    if (!*(unsigned char *)(*(void *)(a1[5] + 8) + 24)
      && (objc_msgSend_properties(v17, v3, v4, v5, v6, v7) & 0x8000) == 0
      && (objc_msgSend_properties(v17, v3, v4, v5, v6, v7) & 1) == 0)
    {
      *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = (objc_msgSend_properties(v17, v3, v4, v5, v6, v7) & 8) != 0;
      *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
    }
    if ((objc_msgSend_properties(v17, v3, v4, v5, v6, v7) & 0x8000) == 0)
    {
      uint64_t v8 = *(double **)(a1[7] + 8);
      CGFloat v9 = v8[6];
      CGFloat v10 = v8[7];
      CGFloat v11 = v8[8];
      CGFloat v12 = v8[9];
      objc_msgSend_bounds(v17, v3, v4, v5, v6, v7);
      v20.origin.float x = v13;
      v20.origin.float y = v14;
      v20.size.double width = v15;
      v20.size.height = v16;
      v19.origin.float x = v9;
      v19.origin.float y = v10;
      v19.size.double width = v11;
      v19.size.height = v12;
      *(CGRect *)(*(void *)(a1[7] + 8) + 48) = CGRectUnion(v19, v20);
    }
  }
  if ((objc_msgSend_properties(v17, v3, v4, v5, v6, v7) & 0x4000) != 0)
  {
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 0;
    ++*(void *)(*(void *)(a1[8] + 8) + 24);
  }
}

void sub_1C4B5C880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B5C894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B5C8A8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
  }
  return a1;
}

void sub_1C4B5E118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char *a59)
{
  if (*(unsigned char *)(v64 - 160))
  {
  }
  sub_1C4B67A08(&a59);

  _Unwind_Resume(a1);
}

void sub_1C4B5E588(void *a1, void *a2, void *a3, void *a4, uint64_t **a5, void *a6, void *a7, void *a8)
{
  uint64_t v413 = *MEMORY[0x1E4F143B8];
  id v387 = a2;
  id v386 = a3;
  id v385 = a4;
  id v391 = a6;
  uint64_t v393 = a1;
  if (!a1) {
    goto LABEL_131;
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  CGFloat v12 = (id)qword_1EA3C9FA8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134218498;
    *(void *)&uint8_t buf[4] = objc_msgSend_count(v387, v13, v14, v15, v16, v17);
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v386;
    *(_WORD *)&buf[22] = 2112;
    id v412 = v385;
    _os_log_impl(&dword_1C492D000, v12, OS_LOG_TYPE_DEBUG, "mergeVerticalMathEntries: %lu entries with stem: %@, result: %@", buf, 0x20u);
  }

  uint64_t v394 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v18, v19, v20, v21, v22);
  double x = *MEMORY[0x1E4F1DB20];
  double y = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  double width = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  double height = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  if (objc_msgSend_count(v387, v27, v28, v29, v30, v31))
  {
    uint64_t v37 = objc_msgSend_firstObject(v387, v32, v33, v34, v35, v36);
    uint64_t v384 = objc_msgSend_firstStrokeIdentifier(v37, v38, v39, v40, v41, v42);

    uint64_t v48 = objc_msgSend_firstObject(v387, v43, v44, v45, v46, v47);
    v382 = objc_msgSend_lastStrokeIdentifier(v48, v49, v50, v51, v52, v53);

    uint64_t v59 = objc_msgSend_firstObject(v387, v54, v55, v56, v57, v58);
    objc_msgSend_firstStrokeOrigin(v59, v60, v61, v62, v63, v64);
    double v66 = v65;
    double v68 = v67;
  }
  else
  {
    uint64_t v74 = objc_msgSend_firstStrokeIdentifier(v386, v32, v33, v34, v35, v36);
    v382 = objc_msgSend_lastStrokeIdentifier(v386, v75, v76, v77, v78, v79);
    objc_msgSend_firstStrokeOrigin(v386, v80, v81, v82, v83, v84);
    double v66 = v85;
    double v68 = v86;
    uint64_t v384 = (void *)v74;
  }
  uint64_t v87 = objc_msgSend_mutableCopy(v387, v69, v70, v71, v72, v73);
  objc_msgSend_addObject_(v87, v88, (uint64_t)v386, v89, v90, v91);
  if (v385) {
    objc_msgSend_addObject_(v87, v92, (uint64_t)v385, v93, v94, v95);
  }
  long long v404 = 0u;
  long long v405 = 0u;
  long long v402 = 0u;
  long long v403 = 0u;
  id obj = v87;
  uint64_t v103 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v96, (uint64_t)&v402, (uint64_t)v410, 16, v97);
  if (v103)
  {
    uint64_t v104 = *(void *)v403;
    double v105 = 1.0;
    do
    {
      for (uint64_t i = 0; i != v103; ++i)
      {
        if (*(void *)v403 != v104) {
          objc_enumerationMutation(obj);
        }
        uint64_t v107 = *(void **)(*((void *)&v402 + 1) + 8 * i);
        double v108 = objc_msgSend_strokeIdentifiers(v107, v98, v99, v100, v101, v102);
        objc_msgSend_unionSet_(v394, v109, (uint64_t)v108, v110, v111, v112);

        objc_msgSend_bounds(v107, v113, v114, v115, v116, v117);
        v416.origin.double x = v118;
        v416.origin.double y = v119;
        v416.size.double width = v120;
        v416.size.double height = v121;
        v414.origin.double x = x;
        v414.origin.double y = y;
        v414.size.double width = width;
        v414.size.double height = height;
        CGRect v415 = CGRectUnion(v414, v416);
        double x = v415.origin.x;
        double y = v415.origin.y;
        double width = v415.size.width;
        double height = v415.size.height;
        objc_msgSend_groupingConfidence(v107, v122, v123, v124, v125, v126);
        double v105 = v105 * v127;
      }
      uint64_t v103 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v98, (uint64_t)&v402, (uint64_t)v410, 16, v102);
    }
    while (v103);
  }
  else
  {
    double v105 = 1.0;
  }

  uint64_t v133 = objc_msgSend_groupingManager(v393, v128, v129, v130, v131, v132);
  BOOL v134 = v133 == 0;

  objc_msgSend_allObjects(v394, v135, v136, v137, v138, v139);
  if (v134) {
    v392 = {;
  }
  }
  else {
    uint64_t v140 = {;
  }
    v401[0] = MEMORY[0x1E4F143A8];
    v401[1] = 3221225472;
    v401[2] = sub_1C4B601B0;
    v401[3] = &unk_1E64E1868;
    v401[4] = v393;
    v392 = objc_msgSend_sortedArrayUsingComparator_(v140, v141, (uint64_t)v401, v142, v143, v144);
  }
  uint64_t v145 = [CHStrokeGroup alloc];
  id StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin = (id)objc_msgSend_initWithStrokeIdentifiers_firstStrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin_(v145, v146, (uint64_t)v394, (uint64_t)v384, (uint64_t)v382, 3, @"CHGroupingPostProcessingManager", x, y, width, height, v105, v66, v68);
  if (!objc_msgSend_saveInputDrawings(v393, v147, v148, v149, v150, v151)
    || (objc_msgSend_groupingManager(v393, v152, v153, v154, v155, v156),
        uint64_t v157 = objc_claimAutoreleasedReturnValue(),
        BOOL v158 = v157 == 0,
        v157,
        v158))
  {
    v381 = 0;
  }
  else
  {
    uint64_t v159 = objc_msgSend_groupingManager(v393, v152, v153, v154, v155, v156);
    v381 = objc_msgSend_recognizableDrawingForStrokeGroup_translationVector_originalDrawing_orderedStrokesIDs_rescalingFactor_replacementStrokeGroup_(v159, v160, (uint64_t)StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin, 0, 0, 0, 0, 0.0, 0.0);
  }
  v396 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v152, v153, v154, v155, v156);
  long long v399 = 0u;
  long long v400 = 0u;
  long long v397 = 0u;
  long long v398 = 0u;
  id v388 = v387;
  uint64_t v168 = objc_msgSend_countByEnumeratingWithState_objects_count_(v388, v161, (uint64_t)&v397, (uint64_t)v409, 16, v162);
  if (v168)
  {
    uint64_t v390 = *(void *)v398;
    uint64_t v169 = a5 + 1;
    do
    {
      uint64_t v170 = 0;
      do
      {
        if (*(void *)v398 != v390) {
          objc_enumerationMutation(v388);
        }
        uint64_t v171 = *(void **)(*((void *)&v397 + 1) + 8 * v170);
        uint64_t v172 = NSNumber;
        uint64_t v173 = objc_msgSend_uniqueIdentifier(v171, v163, v164, v165, v166, v167);
        uint64_t v178 = objc_msgSend_numberWithInteger_(v172, v174, v173, v175, v176, v177);
        double v183 = objc_msgSend_objectForKeyedSubscript_(v391, v179, (uint64_t)v178, v180, v181, v182);

        uint64_t v189 = objc_msgSend_uniqueIdentifier(v171, v184, v185, v186, v187, v188);
        uint64_t v190 = v189;
        uint64_t v191 = (void *)*v169;
        uint64_t v192 = a5 + 1;
        uint64_t v193 = a5 + 1;
        if (*v169)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v193 = v191;
              uint64_t v194 = v191[4];
              if (v189 >= v194) {
                break;
              }
              uint64_t v191 = (void *)*v193;
              uint64_t v192 = v193;
              if (!*v193) {
                goto LABEL_39;
              }
            }
            if (v194 >= v189) {
              break;
            }
            uint64_t v191 = (void *)v193[1];
            if (!v191)
            {
              uint64_t v192 = v193 + 1;
              goto LABEL_39;
            }
          }
          int v195 = v193;
        }
        else
        {
LABEL_39:
          int v195 = operator new(0x40uLL);
          *((void *)v195 + 4) = v190;
          *((void *)v195 + 5) = 0;
          *((void *)v195 + 6) = 0;
          *((void *)v195 + 7) = 0;
          *(void *)int v195 = 0;
          *((void *)v195 + 1) = 0;
          *((void *)v195 + 2) = v193;
          *uint64_t v192 = v195;
          id v196 = (uint64_t *)**a5;
          uint64_t v197 = v195;
          if (v196)
          {
            *a5 = v196;
            uint64_t v197 = (unsigned char *)*v192;
          }
          uint64_t v198 = (void *)*v169;
          BOOL v199 = v197 == (unsigned char *)*v169;
          v197[24] = v199;
          if (!v199)
          {
            do
            {
              uint64_t v200 = *((void *)v197 + 2);
              if (*(unsigned char *)(v200 + 24)) {
                break;
              }
              char v201 = *(unsigned char **)(v200 + 16);
              uint64_t v202 = *(void *)v201;
              if (*(void *)v201 == v200)
              {
                uint64_t v205 = *((void *)v201 + 1);
                if (!v205 || (v206 = *(unsigned __int8 *)(v205 + 24), char v203 = (unsigned char *)(v205 + 24), v206))
                {
                  if (*(unsigned char **)v200 == v197)
                  {
                    *(unsigned char *)(v200 + 24) = 1;
                    v201[24] = 0;
                    uint64_t v209 = *(void *)(v200 + 8);
                    *(void *)char v201 = v209;
                    if (v209) {
                      goto LABEL_56;
                    }
                  }
                  else
                  {
                    uint64_t v207 = *(uint64_t **)(v200 + 8);
                    uint64_t v208 = *v207;
                    *(void *)(v200 + 8) = *v207;
                    if (v208)
                    {
                      *(void *)(v208 + 16) = v200;
                      char v201 = *(unsigned char **)(v200 + 16);
                    }
                    v207[2] = (uint64_t)v201;
                    *(void *)(*(void *)(v200 + 16) + 8 * (**(void **)(v200 + 16) != v200)) = v207;
                    *uint64_t v207 = v200;
                    *(void *)(v200 + 16) = v207;
                    char v201 = (unsigned char *)v207[2];
                    uint64_t v200 = *(void *)v201;
                    *((unsigned char *)v207 + 24) = 1;
                    v201[24] = 0;
                    uint64_t v209 = *(void *)(v200 + 8);
                    *(void *)char v201 = v209;
                    if (v209) {
LABEL_56:
                    }
                      *(void *)(v209 + 16) = v201;
                  }
                  *(void *)(v200 + 16) = *((void *)v201 + 2);
                  *(void *)(*((void *)v201 + 2) + 8 * (**((void **)v201 + 2) != (void)v201)) = v200;
                  *(void *)(v200 + 8) = v201;
LABEL_63:
                  *((void *)v201 + 2) = v200;
                  break;
                }
              }
              else if (!v202 || (v204 = *(unsigned __int8 *)(v202 + 24), char v203 = (unsigned char *)(v202 + 24), v204))
              {
                if (*(unsigned char **)v200 == v197)
                {
                  uint64_t v233 = *((void *)v197 + 1);
                  *(void *)uint64_t v200 = v233;
                  if (v233)
                  {
                    *(void *)(v233 + 16) = v200;
                    char v201 = *(unsigned char **)(v200 + 16);
                  }
                  *((void *)v197 + 2) = v201;
                  *(void *)(*(void *)(v200 + 16) + 8 * (**(void **)(v200 + 16) != v200)) = v197;
                  *((void *)v197 + 1) = v200;
                  *(void *)(v200 + 16) = v197;
                  char v201 = (unsigned char *)*((void *)v197 + 2);
                  v197[24] = 1;
                  v201[24] = 0;
                  uint64_t v200 = *((void *)v201 + 1);
                  uint64_t v210 = *(unsigned char **)v200;
                  *((void *)v201 + 1) = *(void *)v200;
                  if (v210) {
LABEL_61:
                  }
                    *((void *)v210 + 2) = v201;
                }
                else
                {
                  *(unsigned char *)(v200 + 24) = 1;
                  v201[24] = 0;
                  uint64_t v200 = *((void *)v201 + 1);
                  uint64_t v210 = *(unsigned char **)v200;
                  *((void *)v201 + 1) = *(void *)v200;
                  if (v210) {
                    goto LABEL_61;
                  }
                }
                *(void *)(v200 + 16) = *((void *)v201 + 2);
                *(void *)(*((void *)v201 + 2) + 8 * (**((void **)v201 + 2) != (void)v201)) = v200;
                *(void *)uint64_t v200 = v201;
                goto LABEL_63;
              }
              *(unsigned char *)(v200 + 24) = 1;
              uint64_t v197 = v201;
              v201[24] = v201 == (unsigned char *)v198;
              *char v203 = 1;
            }
            while (v201 != (unsigned char *)v198);
          }
          a5[2] = (uint64_t *)((char *)a5[2] + 1);
        }
        sub_1C4B5F8D8((uint64_t)v393, v183, v396, (uint64_t **)v195 + 5, v392);
        id v211 = [CHTokenizedMathResultToken alloc];
        uint64_t v217 = objc_msgSend_indexSet(MEMORY[0x1E4F28D60], v212, v213, v214, v215, v216);
        uint64_t v220 = objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v211, v218, @"\\\\"", (uint64_t)v217, 0x4000, v219, 1.0, *MEMORY[0x1E4F1DB20], *(double *)(MEMORY[0x1E4F1DB20] + 8), *(double *)(MEMORY[0x1E4F1DB20] + 16), *(double *)(MEMORY[0x1E4F1DB20] + 24));
        int v407 = v220;
        double v224 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v221, (uint64_t)&v407, 1, v222, v223);
        long long v408 = v224;
        uint64_t v228 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v225, (uint64_t)&v408, 1, v226, v227);
        objc_msgSend_addObject_(v396, v229, (uint64_t)v228, v230, v231, v232);

        ++v170;
      }
      while (v170 != v168);
      uint64_t v234 = objc_msgSend_countByEnumeratingWithState_objects_count_(v388, v163, (uint64_t)&v397, (uint64_t)v409, 16, v167);
      uint64_t v168 = v234;
    }
    while (v234);
  }

  uint64_t v235 = NSNumber;
  uint64_t v241 = objc_msgSend_uniqueIdentifier(v386, v236, v237, v238, v239, v240);
  uint64_t v246 = objc_msgSend_numberWithInteger_(v235, v242, v241, v243, v244, v245);
  uint64_t v251 = objc_msgSend_objectForKeyedSubscript_(v391, v247, v246, v248, v249, v250);

  uint64_t v257 = objc_msgSend_mathResult(v251, v252, v253, v254, v255, v256);
  LOBYTE(v246) = v257 == 0;

  if (v246)
  {
    uint64_t v272 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v258, v259, v260, v261, v262);
    uint64_t v273 = [CHTokenizedMathResultToken alloc];
    uint64_t v278 = objc_msgSend_indexSetWithIndex_(MEMORY[0x1E4F28D60], v274, 0, v275, v276, v277);
    objc_msgSend_bounds(v386, v279, v280, v281, v282, v283);
    uint64_t v290 = objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v273, v284, @"\\hline", (uint64_t)v278, 0x20000, v285, 1.0, v286, v287, v288, v289);

    sub_1C4B5F6C0((uint64_t)v393, v290, v251, v272, v392);
    uint64_t v406 = v272;
    double v294 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v291, (uint64_t)&v406, 1, v292, v293);
    objc_msgSend_addObject_(v396, v295, (uint64_t)v294, v296, v297, v298);
  }
  else
  {
    uint64_t v263 = objc_msgSend_uniqueIdentifier(v386, v258, v259, v260, v261, v262);
    uint64_t v264 = v263;
    unint64_t v266 = a5 + 1;
    size_t v265 = a5[1];
    if (v265)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v267 = (uint64_t **)v265;
          uint64_t v268 = v265[4];
          if (v263 >= v268) {
            break;
          }
          size_t v265 = *v267;
          unint64_t v266 = v267;
          if (!*v267) {
            goto LABEL_82;
          }
        }
        if (v268 >= v263) {
          break;
        }
        size_t v265 = v267[1];
        if (!v265)
        {
          unint64_t v266 = v267 + 1;
          goto LABEL_82;
        }
      }
      uint64_t v269 = v267;
    }
    else
    {
      uint64_t v267 = a5 + 1;
LABEL_82:
      uint64_t v269 = operator new(0x40uLL);
      *((void *)v269 + 4) = v264;
      *((void *)v269 + 5) = 0;
      *((void *)v269 + 6) = 0;
      *((void *)v269 + 7) = 0;
      *(void *)uint64_t v269 = 0;
      *((void *)v269 + 1) = 0;
      *((void *)v269 + 2) = v267;
      const char *v266 = (uint64_t *)v269;
      unint64_t v270 = (uint64_t *)**a5;
      double v271 = (uint64_t *)v269;
      if (v270)
      {
        *a5 = v270;
        double v271 = *v266;
      }
      sub_1C4949FD4(a5[1], v271);
      a5[2] = (uint64_t *)((char *)a5[2] + 1);
    }
    sub_1C4B5F8D8((uint64_t)v393, v251, v396, (uint64_t **)v269 + 5, v392);
  }
  if (v385)
  {
    uint64_t v304 = NSNumber;
    uint64_t v305 = objc_msgSend_uniqueIdentifier(v385, v299, v300, v301, v302, v303);
    int64_t v310 = objc_msgSend_numberWithInteger_(v304, v306, v305, v307, v308, v309);
    unint64_t v315 = objc_msgSend_objectForKeyedSubscript_(v391, v311, (uint64_t)v310, v312, v313, v314);

    uint64_t v321 = objc_msgSend_uniqueIdentifier(v385, v316, v317, v318, v319, v320);
    uint64_t v322 = v321;
    v324 = a5 + 1;
    v323 = a5[1];
    if (v323)
    {
      while (1)
      {
        while (1)
        {
          double v325 = (uint64_t **)v323;
          uint64_t v326 = v323[4];
          if (v321 >= v326) {
            break;
          }
          v323 = *v325;
          v324 = v325;
          if (!*v325) {
            goto LABEL_96;
          }
        }
        if (v326 >= v321) {
          break;
        }
        v323 = v325[1];
        if (!v323)
        {
          v324 = v325 + 1;
          goto LABEL_96;
        }
      }
      uint64_t v327 = v325;
    }
    else
    {
      double v325 = a5 + 1;
LABEL_96:
      uint64_t v327 = operator new(0x40uLL);
      *((void *)v327 + 4) = v322;
      *((void *)v327 + 5) = 0;
      *((void *)v327 + 6) = 0;
      *((void *)v327 + 7) = 0;
      *(void *)uint64_t v327 = 0;
      *((void *)v327 + 1) = 0;
      *((void *)v327 + 2) = v325;
      const char *v324 = (uint64_t *)v327;
      uint64_t v328 = (uint64_t *)**a5;
      unint64_t v329 = (uint64_t *)v327;
      if (v328)
      {
        *a5 = v328;
        unint64_t v329 = *v324;
      }
      sub_1C4949FD4(a5[1], v329);
      a5[2] = (uint64_t *)((char *)a5[2] + 1);
    }
    sub_1C4B5F8D8((uint64_t)v393, v315, v396, (uint64_t **)v327 + 5, v392);
  }
  unint64_t v330 = [CHTokenizedMathResult alloc];
  uint64_t v335 = objc_msgSend_initWithSegmentedBestPathTokens_(v330, v331, (uint64_t)v396, v332, v333, v334);
  long long v336 = [CHStrokeGroupRecognitionResult alloc];
  long long v338 = objc_msgSend_initWithOrderedLocales_resultsByLocale_errorsByLocale_languageFitnessByLocale_mathResult_inputStrokeIdentifiers_inputDrawing_inputDrawingCutPoints_(v336, v337, MEMORY[0x1E4F1CBF0], MEMORY[0x1E4F1CC08], MEMORY[0x1E4F1CC08], MEMORY[0x1E4F1CC08], v335, v392, v381, 0);
  uint64_t v344 = objc_msgSend_transcriptionPaths(v335, v339, v340, v341, v342, v343);
  unint64_t v350 = objc_msgSend_count(v344, v345, v346, v347, v348, v349);
  unint64_t v351 = v350;
  memset(buf, 0, sizeof(buf));
  if (v350)
  {
    if (v350 >> 61) {
      sub_1C494A220();
    }
    uint64_t v352 = 8 * v350;
    uint64_t v353 = (char *)operator new(8 * v350);
    *(void *)long long buf = v353;
    *(void *)&uint8_t buf[16] = &v353[8 * v351];
    bzero(v353, 8 * v351);
    *(void *)&uint8_t buf[8] = &v353[v352];
  }

  uint64_t v359 = *(void **)&buf[8];
  if (*(void *)buf != *(void *)&buf[8])
  {
    unint64_t v360 = *(void *)&buf[8] - *(void *)buf - 8;
    if (v360 < 0x18)
    {
      uint64_t v361 = 0;
      v362 = *(void **)buf;
      do
LABEL_110:
        *v362++ = v361++;
      while (v362 != v359);
      goto LABEL_111;
    }
    uint64_t v363 = (v360 >> 3) + 1;
    uint64_t v361 = v363 & 0x3FFFFFFFFFFFFFFCLL;
    v362 = (void *)(*(void *)buf + 8 * (v363 & 0x3FFFFFFFFFFFFFFCLL));
    int64x2_t v364 = (int64x2_t)xmmword_1C4C39B30;
    uint64_t v365 = (int64x2_t *)(*(void *)buf + 16);
    int64x2_t v366 = vdupq_n_s64(2uLL);
    int64x2_t v367 = vdupq_n_s64(4uLL);
    uint64_t v368 = v363 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v365[-1] = v364;
      *uint64_t v365 = vaddq_s64(v364, v366);
      int64x2_t v364 = vaddq_s64(v364, v367);
      v365 += 2;
      v368 -= 4;
    }
    while (v368);
    if (v363 != v361) {
      goto LABEL_110;
    }
  }
LABEL_111:
  uint64_t v369 = objc_msgSend_uniqueIdentifier(StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin, v354, v355, v356, v357, v358);
  uint64_t v370 = v369;
  v372 = a5 + 1;
  uint64_t v371 = a5[1];
  if (v371)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v373 = v371;
        uint64_t v374 = v371[4];
        if (v369 >= v374) {
          break;
        }
        uint64_t v371 = (uint64_t *)*v373;
        v372 = (uint64_t **)v373;
        if (!*v373) {
          goto LABEL_118;
        }
      }
      if (v374 >= v369) {
        break;
      }
      uint64_t v371 = (uint64_t *)v373[1];
      if (!v371)
      {
        v372 = (uint64_t **)(v373 + 1);
        goto LABEL_118;
      }
    }
    uint64_t v378 = v373 + 5;
    if (v373 + 5 == (uint64_t *)buf) {
      goto LABEL_124;
    }
  }
  else
  {
    uint64_t v373 = (uint64_t *)(a5 + 1);
LABEL_118:
    uint64_t v375 = (uint64_t *)operator new(0x40uLL);
    v375[4] = v370;
    v375[5] = 0;
    v375[6] = 0;
    v375[7] = 0;
    *uint64_t v375 = 0;
    v375[1] = 0;
    v375[2] = (uint64_t)v373;
    void *v372 = v375;
    uint64_t v376 = (uint64_t *)**a5;
    v377 = v375;
    if (v376)
    {
      *a5 = v376;
      v377 = *v372;
    }
    sub_1C4949FD4(a5[1], v377);
    a5[2] = (uint64_t *)((char *)a5[2] + 1);
    uint64_t v378 = v375 + 5;
    if (v375 + 5 == (uint64_t *)buf) {
      goto LABEL_124;
    }
  }
  sub_1C494ACB0(v378, *(char **)buf, *(char **)&buf[8], (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3);
LABEL_124:
  if (a7) {
    *a7 = StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin;
  }
  if (a8) {
    *a8 = v338;
  }
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }

LABEL_131:
}

void sub_1C4B5F418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,void *a28)
{
  _Unwind_Resume(a1);
}

void sub_1C4B5F6C0(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v78 = a2;
  id v9 = a3;
  id v10 = a4;
  id v16 = a5;
  if (a1)
  {
    uint64_t v17 = objc_msgSend_strokeIndexes(v78, v11, v12, v13, v14, v15);
    double v23 = objc_msgSend_inputStrokeIdentifiers(v9, v18, v19, v20, v21, v22);
    uint64_t v26 = objc_msgSend_remappedStrokeIndexes_originalStrokeIdentifiersOrdering_newStrokeIdentifiersOrdering_(CHGroupingPostprocessingStep, v24, (uint64_t)v17, (uint64_t)v23, (uint64_t)v16, v25);

    uint64_t v27 = [CHTokenizedMathResultToken alloc];
    uint64_t v33 = objc_msgSend_string(v78, v28, v29, v30, v31, v32);
    objc_msgSend_score(v78, v34, v35, v36, v37, v38);
    double v40 = v39;
    objc_msgSend_bounds(v78, v41, v42, v43, v44, v45);
    double v47 = v46;
    double v49 = v48;
    double v51 = v50;
    double v53 = v52;
    uint64_t v59 = objc_msgSend_properties(v78, v54, v55, v56, v57, v58);
    double v65 = objc_msgSend_maskedAlternative(v78, v60, v61, v62, v63, v64);
    objc_msgSend_maskedAlternativeScore(v78, v66, v67, v68, v69, v70);
    uint64_t v73 = objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_maskedAlternative_maskedAlternativeScore_(v27, v71, (uint64_t)v33, (uint64_t)v26, v59, (uint64_t)v65, v40, v47, v49, v51, v53, v72);

    objc_msgSend_addObject_(v10, v74, (uint64_t)v73, v75, v76, v77);
  }
}

void sub_1C4B5F86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B5F8D8(uint64_t a1, void *a2, void *a3, uint64_t **a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v345 = a5;
  uint64_t v346 = v8;
  uint64_t v347 = objc_msgSend_mathResult(v8, v10, v11, v12, v13, v14);
  uint64_t v341 = v9;
  uint64_t v344 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v15, v16, v17, v18, v19);
  uint64_t v25 = *a4;
  uint64_t v342 = a4[1];
  if (*a4 != v342)
  {
    while (1)
    {
      uint64_t v26 = *v25;
      uint64_t v27 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v20, v21, v22, v23, v24);
      uint64_t v33 = objc_msgSend_transcriptionPaths(v347, v28, v29, v30, v31, v32);
      uint64_t v38 = objc_msgSend_objectAtIndexedSubscript_(v33, v34, v26, v35, v36, v37);
      uint64_t v44 = objc_msgSend_tokenColumnCount(v347, v39, v40, v41, v42, v43);
      v348[0] = MEMORY[0x1E4F143A8];
      v348[1] = 3221225472;
      v348[2] = sub_1C4B601A0;
      v348[3] = &unk_1E64E4320;
      v348[4] = a1;
      id v349 = v346;
      id v45 = v27;
      id v350 = v45;
      id v351 = v345;
      objc_msgSend_enumerateTokensInTranscriptionPath_columnRange_tokenProcessingBlock_(v347, v46, v38, 0, v44, (uint64_t)v348);

      id v47 = v45;
      double v53 = objc_msgSend_firstObject(v47, v48, v49, v50, v51, v52);
      LOWORD(v38) = objc_msgSend_properties(v53, v54, v55, v56, v57, v58);

      uint64_t v64 = v47;
      if ((v38 & 0x8000) != 0)
      {
        uint64_t v64 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v59, v60, v61, v62, v63);
        uint64_t v75 = objc_msgSend_firstObject(v47, v65, v66, v67, v68, v69);
        for (unint64_t i = 2; i < objc_msgSend_count(v47, v70, v71, v72, v73, v74) - 3; ++i)
        {
          uint64_t v81 = objc_msgSend_objectAtIndexedSubscript_(v47, v77, i, v78, v79, v80);
          objc_msgSend_addObject_(v64, v82, (uint64_t)v81, v83, v84, v85);
        }
        double v86 = [CHTokenizedMathResultToken alloc];
        double v92 = objc_msgSend_indexSet(MEMORY[0x1E4F28D60], v87, v88, v89, v90, v91);
        uint64_t v95 = objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v86, v93, @"\\\\"", (uint64_t)v92, 0x4000, v94, 1.0, *MEMORY[0x1E4F1DB20], *(double *)(MEMORY[0x1E4F1DB20] + 8), *(double *)(MEMORY[0x1E4F1DB20] + 16), *(double *)(MEMORY[0x1E4F1DB20] + 24));
        objc_msgSend_addObject_(v64, v96, (uint64_t)v95, v97, v98, v99);

        uint64_t v100 = [CHTokenizedMathResultToken alloc];
        uint64_t v106 = objc_msgSend_strokeIndexes(v75, v101, v102, v103, v104, v105);
        objc_msgSend_score(v75, v107, v108, v109, v110, v111);
        double v113 = v112;
        objc_msgSend_bounds(v75, v114, v115, v116, v117, v118);
        uint64_t v125 = objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v100, v119, @"\\hline", (uint64_t)v106, 0x20000, v120, v113, v121, v122, v123, v124);
        objc_msgSend_addObject_(v64, v126, (uint64_t)v125, v127, v128, v129);
      }
      if (objc_msgSend_count(v64, v130, v131, v132, v133, v134)) {
        break;
      }
LABEL_25:
      objc_msgSend_addObject_(v344, v135, (uint64_t)v64, v136, v137, v138);

      if (++v25 == v342) {
        goto LABEL_26;
      }
    }
    uint64_t v139 = objc_msgSend_objectAtIndexedSubscript_(v64, v135, 0, v136, v137, v138);
    uint64_t v145 = objc_msgSend_string(v139, v140, v141, v142, v143, v144);
    uint64_t v151 = objc_msgSend_lowercaseString(v145, v146, v147, v148, v149, v150);
    if (!objc_msgSend_isEqualToString_(v151, v152, @"z", v153, v154, v155)
      || (objc_msgSend_properties(v139, v156, v157, v158, v159, v160) & 0x40) != 0)
    {
    }
    else
    {
      char v166 = objc_msgSend_properties(v139, v161, v162, v163, v164, v165);

      if (v166 < 0)
      {
LABEL_14:

        for (unint64_t j = 1; ; ++j)
        {
          if (j >= objc_msgSend_count(v64, v210, v211, v212, v213, v214)) {
            goto LABEL_25;
          }
          uint64_t v216 = objc_msgSend_objectAtIndexedSubscript_(v64, v135, j, v136, v137, v138);
          uint64_t v222 = objc_msgSend_string(v216, v217, v218, v219, v220, v221);
          int isEqualToString = objc_msgSend_isEqualToString_(v222, v223, @"\\cdot", v224, v225, v226);

          if (isEqualToString) {
            break;
          }
          uint64_t v273 = objc_msgSend_string(v216, v228, v229, v230, v231, v232);
          uint64_t v282 = objc_msgSend_lowercaseString(v273, v277, v278, v279, v280, v281);
          if (!objc_msgSend_isEqualToString_(v282, v283, @"z", v284, v285, v286)
            || (objc_msgSend_properties(v216, v287, v288, v289, v290, v291) & 0x40) != 0)
          {

LABEL_16:
            goto LABEL_17;
          }
          char v297 = objc_msgSend_properties(v216, v292, v293, v294, v295, v296);

          if ((v297 & 0x80) == 0)
          {
            uint64_t v298 = [CHTokenizedMathResultToken alloc];
            uint64_t v304 = objc_msgSend_strokeIndexes(v216, v299, v300, v301, v302, v303);
            objc_msgSend_score(v216, v305, v306, v307, v308, v309);
            double v311 = v310;
            objc_msgSend_bounds(v216, v312, v313, v314, v315, v316);
            double v318 = v317;
            double v320 = v319;
            double v322 = v321;
            double v324 = v323;
            unint64_t v330 = objc_msgSend_maskedAlternative(v216, v325, v326, v327, v328, v329);
            objc_msgSend_maskedAlternativeScore(v216, v331, v332, v333, v334, v335);
            uint64_t v273 = objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_maskedAlternative_maskedAlternativeScore_(v298, v336, @"2", (uint64_t)v304, 2, (uint64_t)v330, v311, v318, v320, v322, v324, v337);

            objc_msgSend_setObject_atIndexedSubscript_(v64, v338, (uint64_t)v273, j, v339, v340);
            goto LABEL_16;
          }
LABEL_17:
        }
        uint64_t v233 = [CHTokenizedMathResultToken alloc];
        uint64_t v239 = objc_msgSend_strokeIndexes(v216, v234, v235, v236, v237, v238);
        objc_msgSend_score(v216, v240, v241, v242, v243, v244);
        double v246 = v245;
        objc_msgSend_bounds(v216, v247, v248, v249, v250, v251);
        double v253 = v252;
        double v255 = v254;
        double v257 = v256;
        double v259 = v258;
        size_t v265 = objc_msgSend_maskedAlternative(v216, v260, v261, v262, v263, v264);
        objc_msgSend_maskedAlternativeScore(v216, v266, v267, v268, v269, v270);
        uint64_t v273 = objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_maskedAlternative_maskedAlternativeScore_(v233, v271, @".", (uint64_t)v239, 4, (uint64_t)v265, v246, v253, v255, v257, v259, v272);

        objc_msgSend_setObject_atIndexedSubscript_(v64, v274, (uint64_t)v273, j, v275, v276);
        goto LABEL_16;
      }
      uint64_t v167 = [CHTokenizedMathResultToken alloc];
      uint64_t v173 = objc_msgSend_strokeIndexes(v139, v168, v169, v170, v171, v172);
      objc_msgSend_score(v139, v174, v175, v176, v177, v178);
      double v180 = v179;
      objc_msgSend_bounds(v139, v181, v182, v183, v184, v185);
      double v187 = v186;
      double v189 = v188;
      double v191 = v190;
      double v193 = v192;
      BOOL v199 = objc_msgSend_maskedAlternative(v139, v194, v195, v196, v197, v198);
      objc_msgSend_maskedAlternativeScore(v139, v200, v201, v202, v203, v204);
      uint64_t v145 = objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_maskedAlternative_maskedAlternativeScore_(v167, v205, @"2", (uint64_t)v173, 2, (uint64_t)v199, v180, v187, v189, v191, v193, v206);

      objc_msgSend_setObject_atIndexedSubscript_(v64, v207, (uint64_t)v145, 0, v208, v209);
    }

    goto LABEL_14;
  }
LABEL_26:
  objc_msgSend_addObject_(v341, v20, (uint64_t)v344, v22, v23, v24);
}

void sub_1C4B5FFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1C4B601A0(uint64_t a1, void *a2)
{
}

uint64_t sub_1C4B601B0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v12 = objc_msgSend_groupingManager(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
  uint64_t v18 = objc_msgSend_strokeProvider(v12, v13, v14, v15, v16, v17);
  uint64_t v23 = objc_msgSend_strokeIdentifierFromData_(v18, v19, (uint64_t)v5, v20, v21, v22);

  uint64_t v29 = objc_msgSend_groupingManager(*(void **)(a1 + 32), v24, v25, v26, v27, v28);
  uint64_t v35 = objc_msgSend_strokeProvider(v29, v30, v31, v32, v33, v34);
  uint64_t v40 = objc_msgSend_strokeIdentifierFromData_(v35, v36, (uint64_t)v6, v37, v38, v39);

  double v46 = objc_msgSend_groupingManager(*(void **)(a1 + 32), v41, v42, v43, v44, v45);
  uint64_t v52 = objc_msgSend_strokeProvider(v46, v47, v48, v49, v50, v51);
  uint64_t v56 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(v52, v53, (uint64_t)v23, (uint64_t)v40, v54, v55);

  return v56;
}

void sub_1C4B602AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B602E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B60300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6031C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B60334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B60350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B60368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6037C(uint64_t a1, void *a2)
{
  id v25 = a2;
  uint64_t v8 = objc_msgSend_string(v25, v3, v4, v5, v6, v7);
  if (objc_msgSend_isEqualToString_(v8, v9, @"\\\\"", v10, v11, v12))
  {
    uint64_t v18 = objc_msgSend_strokeIndexes(v25, v13, v14, v15, v16, v17);
    uint64_t v24 = objc_msgSend_count(v18, v19, v20, v21, v22, v23);

    if (v24) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    }
  }
  else
  {
  }
}

void sub_1C4B6041C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B60438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6044C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6156C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _Unwind_Resume(a1);
}

void sub_1C4B61B20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B62FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_Unwind_Exception *exception_objecta,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1C4B635A8(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1C4B6456C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26)
{
  _Unwind_Resume(a1);
}

id sub_1C4B64964(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = v3;
  if (a1)
  {
    a1 = objc_msgSend_objectForKey_(v3, v4, (uint64_t)CHMathPostProcessingOptionLocales, v5, v6, v7);
    if (!a1)
    {
      uint64_t v13 = (void *)MEMORY[0x1E4F1C978];
      uint64_t v14 = objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E4F1CA20], v9, @"en_US", v10, v11, v12);
      a1 = objc_msgSend_arrayWithObject_(v13, v15, (uint64_t)v14, v16, v17, v18);
    }
  }

  return a1;
}

void sub_1C4B64A0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B64A20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B64A30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B64A40(void **a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v321 = a4;
  double v318 = a1;
  if (a1)
  {
    uint64_t v14 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v9, v10, v11, v12, v13);
    uint64_t v20 = objc_msgSend_firstObject(v7, v15, v16, v17, v18, v19);
    double v320 = objc_msgSend_firstStrokeIdentifier(v20, v21, v22, v23, v24, v25);

    uint64_t v31 = objc_msgSend_lastObject(v7, v26, v27, v28, v29, v30);
    double v319 = objc_msgSend_lastStrokeIdentifier(v31, v32, v33, v34, v35, v36);

    uint64_t v42 = objc_msgSend_firstObject(v7, v37, v38, v39, v40, v41);
    objc_msgSend_bounds(v42, v43, v44, v45, v46, v47);
    double v49 = v48;
    double v51 = v50;

    CGFloat v52 = *MEMORY[0x1E4F1DB20];
    CGFloat v53 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    CGFloat v54 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    CGFloat v55 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
    uint64_t v64 = objc_msgSend_objectForKeyedSubscript_(v321, v56, (uint64_t)CHMathPostProcessingWrapTextResult, v57, v58, v59);
    if (v64)
    {
      double v65 = objc_msgSend_objectForKeyedSubscript_(v321, v60, (uint64_t)CHMathPostProcessingWrapTextResult, v61, v62, v63);
      uint64_t v71 = objc_msgSend_BOOLValue(v65, v66, v67, v68, v69, v70);
    }
    else
    {
      uint64_t v71 = 0;
    }

    if (!objc_msgSend_count(v7, v72, v73, v74, v75, v76)) {
      goto LABEL_16;
    }
    uint64_t v81 = objc_msgSend_objectAtIndexedSubscript_(v7, v77, 0, v78, v79, v80);
    uint64_t v87 = objc_msgSend_strokeIdentifiers(v81, v82, v83, v84, v85, v86);
    objc_msgSend_unionSet_(v14, v88, (uint64_t)v87, v89, v90, v91);

    objc_msgSend_bounds(v81, v92, v93, v94, v95, v96);
    v328.origin.double x = v97;
    v328.origin.double y = v98;
    v328.size.double width = v99;
    v328.size.double height = v100;
    v324.origin.double x = v52;
    v324.origin.double y = v53;
    v324.size.double width = v54;
    v324.size.double height = v55;
    CGRect v325 = CGRectUnion(v324, v328);
    double x = v325.origin.x;
    double y = v325.origin.y;
    double width = v325.size.width;
    double height = v325.size.height;
    uint64_t v105 = v8 ? (void *)*((void *)v8 + 10) : 0;
    id v106 = v105;
    uint64_t v107 = NSNumber;
    uint64_t v113 = objc_msgSend_uniqueIdentifier(v81, v108, v109, v110, v111, v112);
    uint64_t v118 = objc_msgSend_numberWithInteger_(v107, v114, v113, v115, v116, v117);
    double v123 = objc_msgSend_objectForKeyedSubscript_(v106, v119, (uint64_t)v118, v120, v121, v122);

    if (v123)
    {
      unint64_t v129 = 1;
      while (v129 < objc_msgSend_count(v7, v124, v125, v126, v127, v128))
      {
        uint64_t v135 = objc_msgSend_objectAtIndexedSubscript_(v7, v130, v129, v132, v133, v134);
        uint64_t v141 = objc_msgSend_strokeIdentifiers(v135, v136, v137, v138, v139, v140);
        objc_msgSend_unionSet_(v14, v142, (uint64_t)v141, v143, v144, v145);

        objc_msgSend_bounds(v135, v146, v147, v148, v149, v150);
        v329.origin.double x = v151;
        v329.origin.double y = v152;
        v329.size.double width = v153;
        v329.size.double height = v154;
        v326.origin.double x = x;
        v326.origin.double y = y;
        v326.size.double width = width;
        v326.size.double height = height;
        CGRect v327 = CGRectUnion(v326, v329);
        double x = v327.origin.x;
        double y = v327.origin.y;
        double width = v327.size.width;
        double height = v327.size.height;
        if (v8) {
          uint64_t v155 = (void *)*((void *)v8 + 10);
        }
        else {
          uint64_t v155 = 0;
        }
        id v156 = v155;
        uint64_t v157 = NSNumber;
        uint64_t v163 = objc_msgSend_uniqueIdentifier(v135, v158, v159, v160, v161, v162);
        uint64_t v168 = objc_msgSend_numberWithInteger_(v157, v164, v163, v165, v166, v167);
        uint64_t v173 = objc_msgSend_objectForKeyedSubscript_(v156, v169, (uint64_t)v168, v170, v171, v172);

        uint64_t v177 = objc_msgSend_mathStrokeGroupRecognitionResultByAppendingStrokeGroupRecognitionResult_wrapTextResult_(v123, v174, (uint64_t)v173, v71, v175, v176);

        ++v129;
        double v123 = (void *)v177;
        if (!v177) {
          goto LABEL_45;
        }
      }
      uint64_t v178 = objc_msgSend_mathResult(v123, v130, v131, v132, v133, v134);
      uint64_t v184 = objc_msgSend_topTranscription(v178, v179, v180, v181, v182, v183);
      double v189 = objc_msgSend_textTranscriptionForLatex_(CHTokenizedMathResult, v185, (uint64_t)v184, v186, v187, v188);

      double v190 = v318;
      if (v318[3])
      {
        double v191 = sub_1C4B64964(v318, v321);
        int isMathUnitConversionPatternForTextTranscription_locales = objc_msgSend_isMathUnitConversionPatternForTextTranscription_locales_(CHTokenizedMathResult, v192, (uint64_t)v189, (uint64_t)v191, v193, v194);

        if (isMathUnitConversionPatternForTextTranscription_locales)
        {
          id v196 = v123;
          id v197 = v321;
          uint64_t v203 = objc_msgSend_mathResult(v196, v198, v199, v200, v201, v202);

          if (v203)
          {
            uint64_t v316 = v189;
            uint64_t v204 = [CHMathResultWithContext alloc];
            uint64_t v210 = objc_msgSend_mathResult(v196, v205, v206, v207, v208, v209);
            uint64_t v216 = objc_msgSend_set(MEMORY[0x1E4F1CAD0], v211, v212, v213, v214, v215);
            uint64_t v220 = objc_msgSend_initWithResult_declaredVariables_(v204, v217, (uint64_t)v210, (uint64_t)v216, v218, v219);

            uint64_t v224 = objc_msgSend_process_options_(v318[3], v221, (uint64_t)v220, (uint64_t)v197, v222, v223);

            uint64_t v225 = [CHStrokeGroupRecognitionResult alloc];
            uint64_t v231 = objc_msgSend_result(v224, v226, v227, v228, v229, v230);
            uint64_t v237 = objc_msgSend_inputStrokeIdentifiers(v196, v232, v233, v234, v235, v236);
            id v239 = (id)objc_msgSend_initWithOrderedLocales_resultsByLocale_errorsByLocale_languageFitnessByLocale_mathResult_inputStrokeIdentifiers_(v225, v238, MEMORY[0x1E4F1CBF0], MEMORY[0x1E4F1CC08], MEMORY[0x1E4F1CC08], MEMORY[0x1E4F1CC08], v231, v237);

            double v189 = v316;
          }
          else
          {
            if (qword_1EA3CA000 != -1) {
              dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
            }
            uint64_t v240 = (id)qword_1EA3C9F90[0];
            if (os_log_type_enabled(v240, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_1C492D000, v240, OS_LOG_TYPE_ERROR, "can't apply unit conversion postprocessing to strokeGroupRecognitionResult with no mathResult", buf, 2u);
            }

            id v239 = v196;
          }

          double v123 = v239;
        }
        double v190 = v318;
      }
      uint64_t v241 = sub_1C4B6550C(v190, v189);
      uint64_t v242 = (void *)v241;
      if (v190[4]) {
        BOOL v243 = v241 == 0;
      }
      else {
        BOOL v243 = 1;
      }
      if (!v243)
      {
        id v244 = v123;
        id v315 = v321;
        id v245 = v242;
        uint64_t v251 = objc_msgSend_mathResult(v244, v246, v247, v248, v249, v250);

        if (v251)
        {
          uint64_t v314 = (uint64_t)v245;
          double v317 = v189;
          double v252 = [CHMathResultWithContext alloc];
          double v258 = objc_msgSend_mathResult(v244, v253, v254, v255, v256, v257);
          uint64_t v263 = objc_msgSend_setWithObject_(MEMORY[0x1E4F1CAD0], v259, v314, v260, v261, v262);
          uint64_t v267 = objc_msgSend_initWithResult_declaredVariables_(v252, v264, (uint64_t)v258, (uint64_t)v263, v265, v266);

          uint64_t v268 = v315;
          double v272 = objc_msgSend_process_options_(v318[4], v269, (uint64_t)v267, (uint64_t)v315, v270, v271);

          uint64_t v273 = [CHStrokeGroupRecognitionResult alloc];
          uint64_t v279 = objc_msgSend_result(v272, v274, v275, v276, v277, v278);
          uint64_t v285 = objc_msgSend_inputStrokeIdentifiers(v244, v280, v281, v282, v283, v284);
          id v287 = (id)objc_msgSend_initWithOrderedLocales_resultsByLocale_errorsByLocale_languageFitnessByLocale_mathResult_inputStrokeIdentifiers_(v273, v286, MEMORY[0x1E4F1CBF0], MEMORY[0x1E4F1CC08], MEMORY[0x1E4F1CC08], MEMORY[0x1E4F1CC08], v279, v285);

          double v189 = v317;
          id v245 = (id)v314;
        }
        else
        {
          if (qword_1EA3CA000 != -1) {
            dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
          }
          uint64_t v268 = v315;
          uint64_t v288 = (id)qword_1EA3C9F90[0];
          if (os_log_type_enabled(v288, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)double v323 = 0;
            _os_log_impl(&dword_1C492D000, v288, OS_LOG_TYPE_ERROR, "can't apply variable assignment postprocessing to strokeGroupRecognitionResult with no mathResult", v323, 2u);
          }

          id v287 = v244;
        }

        double v123 = v287;
      }
      uint64_t v289 = [CHStrokeGroup alloc];
      id StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin = objc_msgSend_initWithStrokeIdentifiers_firstStrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin_(v289, v290, (uint64_t)v14, (uint64_t)v320, (uint64_t)v319, 3, @"CHMathStrokeGroupingStrategy", x, y, width, height, 1.0, v49, v51);
      if (v8) {
        objc_msgSend_addObject_(*((void **)v8 + 9), v291, (uint64_t)StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin, v292, v293, v294);
      }
      else {
        objc_msgSend_addObject_(0, v291, (uint64_t)StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin, v292, v293, v294);
      }
      if (v8) {
        uint64_t v296 = (void *)*((void *)v8 + 10);
      }
      else {
        uint64_t v296 = 0;
      }
      id v297 = v296;
      uint64_t v298 = NSNumber;
      uint64_t v304 = objc_msgSend_uniqueIdentifier(StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin, v299, v300, v301, v302, v303);
      uint64_t v309 = objc_msgSend_numberWithInteger_(v298, v305, v304, v306, v307, v308);
      objc_msgSend_setObject_forKey_(v297, v310, (uint64_t)v123, (uint64_t)v309, v311, v312);

      uint64_t v177 = 1;
    }
    else
    {
LABEL_16:
      uint64_t v177 = 0;
    }
LABEL_45:
  }
  else
  {
    uint64_t v177 = 0;
  }

  return v177;
}

void sub_1C4B65288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, _Unwind_Exception *exception_object, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

id sub_1C4B6550C(id a1, void *a2)
{
  id v3 = a2;
  id v7 = v3;
  if (a1)
  {
    id v8 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v3, v4, @" ", (uint64_t)&stru_1F20141C8, v5, v6);
    id v15 = 0;
    char isTextTranscriptionVariableAssignment_outVariable = objc_msgSend_isTextTranscriptionVariableAssignment_outVariable_(CHTokenizedTextResult, v9, (uint64_t)v8, (uint64_t)&v15, v10, v11);
    id v13 = v15;

    if (isTextTranscriptionVariableAssignment_outVariable) {
      a1 = v13;
    }
    else {
      a1 = 0;
    }
  }
  return a1;
}

void sub_1C4B655C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B655DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B65738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B65750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B665E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

id sub_1C4B669B0(uint64_t a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v4 = *(id *)(a1 + 40);
  uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v26, (uint64_t)v30, 16, v6);
  if (v11)
  {
    uint64_t v12 = *(void *)v27;
    do
    {
      uint64_t v13 = 0;
      uint64_t v14 = v3;
      do
      {
        if (*(void *)v27 != v12) {
          objc_enumerationMutation(v4);
        }
        uint64_t v15 = *(void *)(*((void *)&v26 + 1) + 8 * v13);
        uint64_t v16 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v7, v15, v8, v9, v10);
        objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v14, v17, v15, (uint64_t)v16, v18, v19);
        id v3 = (id)objc_claimAutoreleasedReturnValue();

        ++v13;
        uint64_t v14 = v3;
      }
      while (v11 != v13);
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v26, (uint64_t)v30, 16, v10);
    }
    while (v11);
  }

  uint64_t v24 = objc_msgSend_stringWithFormat_(NSString, v20, @"\\text{%@}", v21, v22, v23, v3);

  return v24;
}

void sub_1C4B66B34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B66B7C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

uint64_t sub_1C4B66B88(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  id v14 = a2;
  id v15 = a5;
  id v386 = a6;
  id v16 = a7;
  id v385 = a8;
  uint64_t v22 = objc_msgSend_strokeIndexes(v14, v17, v18, v19, v20, v21);
  uint64_t v379 = a3;
  uint64_t v384 = objc_msgSend_objectsAtIndexes_(v16, v23, (uint64_t)v22, v24, v25, v26);

  long long v27 = [CHStrokeGroup alloc];
  uint64_t v32 = objc_msgSend_setWithArray_(MEMORY[0x1E4F1CAD0], v28, (uint64_t)v384, v29, v30, v31);
  uint64_t v38 = objc_msgSend_firstObject(v384, v33, v34, v35, v36, v37);
  uint64_t v44 = objc_msgSend_lastObject(v384, v39, v40, v41, v42, v43);
  objc_msgSend_originalBounds(v14, v45, v46, v47, v48, v49);
  double v51 = v50;
  double v53 = v52;
  double v55 = v54;
  double v57 = v56;
  objc_msgSend_originalBounds(v14, v58, v59, v60, v61, v62);
  id StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin = objc_msgSend_initWithStrokeIdentifiers_firstStrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin_(v27, v63, (uint64_t)v32, (uint64_t)v38, (uint64_t)v44, 3, @"CHMathStrokeGroupingStrategy", v51, v53, v55, v57, 1.0, v64, v65);

  uint64_t v71 = objc_msgSend_cachedRecognitionResultsFromPostProcessing(v385, v66, v67, v68, v69, v70);
  uint64_t v72 = StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin;
  uint64_t v78 = objc_msgSend_strokeIdentifiers(StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin, v73, v74, v75, v76, v77);
  uint64_t v83 = objc_msgSend_objectForKeyedSubscript_(v71, v79, (uint64_t)v78, v80, v81, v82);

  uint64_t v390 = v83;
  if (v83
    && (objc_msgSend_mathResult(v83, v84, v85, v86, v87, v88),
        uint64_t v89 = objc_claimAutoreleasedReturnValue(),
        v89,
        v89))
  {
    uint64_t v95 = objc_msgSend_mathResult(v83, v90, v91, v92, v93, v94);
    objc_msgSend_inputStrokeIdentifiers(v83, v96, v97, v98, v99, v100);
    id v387 = (id)objc_claimAutoreleasedReturnValue();
    id v388 = (void *)v95;
  }
  else
  {
    uint64_t v106 = *(void *)(a1 + 24);
    uint64_t v399 = 0;
    uint64_t v107 = (*(void (**)(void))(v106 + 16))();
    id v387 = 0;
    if (!v107)
    {
      unsigned __int8 v400 = 0;
      goto LABEL_59;
    }
    uint64_t v108 = [CHStrokeGroupRecognitionResult alloc];
    uint64_t v110 = objc_msgSend_initWithOrderedLocales_resultsByLocale_errorsByLocale_languageFitnessByLocale_mathResult_inputStrokeIdentifiers_(v108, v109, MEMORY[0x1E4F1CBF0], MEMORY[0x1E4F1CC08], MEMORY[0x1E4F1CC08], MEMORY[0x1E4F1CC08], v107, v387);

    uint64_t v390 = (void *)v110;
    id v388 = (void *)v107;
  }
  uint64_t v111 = objc_msgSend_strokeIdentifiers(StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin, v101, v102, v103, v104, v105);
  id v112 = v390;
  id v116 = v111;
  uint64_t v389 = v14;
  uint64_t v390 = v112;
  uint64_t v381 = (uint64_t)v16;
  if (v385)
  {
    objc_msgSend_setObject_forKeyedSubscript_(v385[1], v113, (uint64_t)v112, (uint64_t)v116, v114, v115);
    objc_msgSend_setObject_forKeyedSubscript_(v385[2], v117, (uint64_t)v112, (uint64_t)v116, v118, v119);
  }

  uint64_t v125 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v120, v121, v122, v123, v124);
  *(void *)&r1.size.CGFloat height = MEMORY[0x1E4F143A8];
  uint64_t v395 = 3221225472;
  v396 = sub_1C4B67808;
  long long v397 = &unk_1E64E0CD8;
  id v126 = v125;
  id v398 = v126;
  objc_msgSend_enumerateTokensInTopTranscriptionPathWithBlock_(v388, v127, (uint64_t)&r1.size.height, v128, v129, v130);
  uint64_t v136 = objc_msgSend_string(MEMORY[0x1E4F28E78], v131, v132, v133, v134, v135);
  uint64_t v147 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v137, v138, v139, v140, v141);
  double x = *MEMORY[0x1E4F1DB20];
  double v149 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  double width = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  double v150 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  r1.origin.double x = *(CGFloat *)MEMORY[0x1E4F1DB20];
  if (!v15)
  {
    if (v386)
    {
      double v156 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
      double v158 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
      double v157 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
      uint64_t v378 = a4;
      uint64_t v246 = objc_msgSend_count(v126, v142, v143, v144, v145, v146) - 1;
      if (v246 < 0)
      {
        uint64_t v159 = 0;
        double v391 = 1.0;
        double v393 = 1.0;
        uint64_t v337 = 0x40000;
        double x = r1.origin.x;
        goto LABEL_52;
      }
      char v247 = 0;
      CGFloat v153 = 0;
      char v248 = 1;
      double v249 = 1.0;
      double v393 = 1.0;
      CGFloat height = v150;
      CGFloat y = v156;
      CGFloat v251 = r1.origin.x;
      while (1)
      {
        while (1)
        {
          while (1)
          {
            double v253 = objc_msgSend_objectAtIndexedSubscript_(v126, v160, v246, v244, v245, v163);
            uint64_t v170 = v253;
            if ((v247 & 1) == 0) {
              break;
            }
            objc_msgSend_score(v253, v254, v255, v256, v257, v258);
            double v260 = v259;
            objc_msgSend_bounds(v170, v261, v262, v263, v264, v265);
            v411.origin.double x = v266;
            v411.origin.CGFloat y = v267;
            v411.size.double width = v268;
            v411.size.CGFloat height = v269;
            v405.origin.double x = v251;
            v405.origin.CGFloat y = y;
            v405.size.double width = width;
            v405.size.CGFloat height = height;
            CGRect v406 = CGRectUnion(v405, v411);
            CGFloat height = v406.size.height;
            CGFloat v251 = v406.origin.x;
            CGFloat y = v406.origin.y;
            double width = v406.size.width;
            double v393 = v393 * v260;
            char v247 = 1;

            BOOL v252 = v246-- <= 0;
            if (v252) {
              goto LABEL_40;
            }
          }
          uint64_t v270 = objc_msgSend_string(v253, v254, v255, v256, v257, v258);
          objc_msgSend_insertString_atIndex_(v136, v271, (uint64_t)v270, 0, v272, v273);

          uint64_t v279 = objc_msgSend_strokeIndexes(v170, v274, v275, v276, v277, v278);
          objc_msgSend_addIndexes_(v147, v280, (uint64_t)v279, v281, v282, v283);

          objc_msgSend_score(v170, v284, v285, v286, v287, v288);
          double v290 = v289;
          objc_msgSend_bounds(v170, v291, v292, v293, v294, v295);
          v412.origin.double x = v296;
          v412.origin.CGFloat y = v297;
          v412.size.double width = v298;
          v412.size.CGFloat height = v299;
          v407.origin.double x = r1.origin.x;
          v407.origin.CGFloat y = v156;
          v407.size.double width = v157;
          v407.size.CGFloat height = v158;
          CGRect v408 = CGRectUnion(v407, v412);
          r1.origin.double x = v408.origin.x;
          double v156 = v408.origin.y;
          double v157 = v408.size.width;
          double v158 = v408.size.height;
          double v249 = v249 * v290;
          if (objc_msgSend_isEqualToString_(v136, v300, (uint64_t)v386, v301, v302, v303)) {
            break;
          }
          if (!objc_msgSend_hasSuffix_(v386, v304, (uint64_t)v136, v306, v307, v308))
          {
LABEL_50:
            char v243 = 0;
            uint64_t v159 = v153;
            goto LABEL_57;
          }
          char v247 = 0;
          if (!v246) {
            char v248 = 0;
          }

          BOOL v252 = v246-- <= 0;
          if (v252)
          {
LABEL_40:
            if (v248)
            {
              double v391 = v249;
              uint64_t v337 = 0x40000;
              CGFloat v338 = y;
              double v150 = v158;
              double v339 = width;
              double width = v157;
              double v149 = v156;
              double x = r1.origin.x;
              uint64_t v159 = v153;
              double v158 = height;
              double v157 = v339;
              double v156 = v338;
              r1.origin.double x = v251;
              goto LABEL_52;
            }
LABEL_23:
            char v243 = 0;
            goto LABEL_58;
          }
        }
        uint64_t v309 = objc_msgSend_string(v389, v304, v305, v306, v307, v308);
        id v315 = objc_msgSend_string(v389, v310, v311, v312, v313, v314);
        uint64_t v321 = objc_msgSend_length(v315, v316, v317, v318, v319, v320);
        uint64_t v327 = objc_msgSend_length(v386, v322, v323, v324, v325, v326);
        uint64_t v159 = objc_msgSend_substringToIndex_(v309, v328, v321 - v327, v329, v330, v331);

        if (!objc_msgSend_length(v159, v332, v333, v334, v335, v336)) {
          break;
        }
        char v248 = 1;
        CGFloat v153 = v159;
        char v247 = 1;

        BOOL v252 = v246-- <= 0;
        if (v252) {
          goto LABEL_40;
        }
      }
    }
    else
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v170 = (id)qword_1EA3C9FA8;
      if (os_log_type_enabled(v170, OS_LOG_TYPE_ERROR))
      {
        LOWORD(r1.origin.y) = 0;
        _os_log_impl(&dword_1C492D000, v170, OS_LOG_TYPE_ERROR, "Either prefix or suffix must be provided when splittin a text token.", (uint8_t *)&r1.origin.y, 2u);
      }
      uint64_t v159 = 0;
    }
LABEL_49:
    char v243 = 0;
    goto LABEL_57;
  }
  uint64_t v378 = a4;
  unint64_t v152 = 0;
  CGFloat v153 = 0;
  char v154 = 0;
  double v391 = 1.0;
  double v393 = 1.0;
  char v155 = 1;
  double v156 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  double v157 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  double v158 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  while (v152 < objc_msgSend_count(v126, v142, v143, v144, v145, v146))
  {
    uint64_t v164 = objc_msgSend_objectAtIndexedSubscript_(v126, v160, v152, v161, v162, v163);
    uint64_t v170 = v164;
    if (v154)
    {
      objc_msgSend_score(v164, v165, v166, v167, v168, v169);
      double v172 = v171;
      objc_msgSend_bounds(v170, v173, v174, v175, v176, v177);
      v409.origin.double x = v178;
      v409.origin.CGFloat y = v179;
      v409.size.double width = v180;
      v409.size.CGFloat height = v181;
      v401.origin.double x = r1.origin.x;
      v401.origin.CGFloat y = v156;
      v401.size.double width = v157;
      v401.size.CGFloat height = v158;
      CGRect v402 = CGRectUnion(v401, v409);
      r1.origin.double x = v402.origin.x;
      double v156 = v402.origin.y;
      double v157 = v402.size.width;
      double v158 = v402.size.height;
      double v393 = v393 * v172;
      char v154 = 1;
LABEL_10:
      uint64_t v159 = v153;
      goto LABEL_11;
    }
    uint64_t v182 = objc_msgSend_string(v164, v165, v166, v167, v168, v169);
    objc_msgSend_appendString_(v136, v183, (uint64_t)v182, v184, v185, v186);

    double v192 = objc_msgSend_strokeIndexes(v170, v187, v188, v189, v190, v191);
    objc_msgSend_addIndexes_(v147, v193, (uint64_t)v192, v194, v195, v196);

    objc_msgSend_score(v170, v197, v198, v199, v200, v201);
    double v203 = v202;
    objc_msgSend_bounds(v170, v204, v205, v206, v207, v208);
    v410.origin.double x = v209;
    v410.origin.CGFloat y = v210;
    v410.size.double width = v211;
    v410.size.CGFloat height = v212;
    v403.origin.double x = x;
    v403.origin.CGFloat y = v149;
    v403.size.double width = width;
    v403.size.CGFloat height = v150;
    CGRect v404 = CGRectUnion(v403, v410);
    double x = v404.origin.x;
    double v149 = v404.origin.y;
    double width = v404.size.width;
    double v150 = v404.size.height;
    double v391 = v391 * v203;
    if (!objc_msgSend_isEqualToString_(v136, v213, (uint64_t)v15, v214, v215, v216))
    {
      if (!objc_msgSend_hasPrefix_(v15, v217, (uint64_t)v136, v219, v220, v221)) {
        goto LABEL_50;
      }
      char v154 = 0;
      if (v152 == objc_msgSend_count(v126, v238, v239, v240, v241, v242) - 1) {
        char v155 = 0;
      }
      goto LABEL_10;
    }
    uint64_t v222 = objc_msgSend_string(v389, v217, v218, v219, v220, v221);
    uint64_t v228 = objc_msgSend_length(v15, v223, v224, v225, v226, v227);
    uint64_t v159 = objc_msgSend_substringFromIndex_(v222, v229, v228, v230, v231, v232);

    if (!objc_msgSend_length(v159, v233, v234, v235, v236, v237)) {
      goto LABEL_49;
    }
    char v155 = 1;
    char v154 = 1;
LABEL_11:

    ++v152;
    CGFloat v153 = v159;
  }
  if ((v155 & 1) == 0) {
    goto LABEL_23;
  }
  uint64_t v337 = 0x800000;
  uint64_t v159 = v153;
LABEL_52:
  uint64_t v170 = objc_msgSend_remappedStrokeIndexes_originalStrokeIdentifiersOrdering_newStrokeIdentifiersOrdering_(CHGroupingPostprocessingStep, v160, (uint64_t)v147, (uint64_t)v387, v381, v163);
  uint64_t v340 = [CHTokenizedMathResultToken alloc];
  id v392 = (id)objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v340, v341, (uint64_t)v136, (uint64_t)v170, v337, v342, v391, x, v149, width, v150);
  uint64_t v348 = objc_msgSend_strokeIndexes(v389, v343, v344, v345, v346, v347);
  int v354 = objc_msgSend_mutableCopy(v348, v349, v350, v351, v352, v353);

  Indedouble x = objc_msgSend_firstIndex(v354, v355, v356, v357, v358, v359);
  objc_msgSend_shiftIndexesStartingAtIndex_by_(v354, v361, 0, -Index, v362, v363);
  objc_msgSend_removeIndexes_(v354, v364, (uint64_t)v147, v365, v366, v367);
  uint64_t v370 = objc_msgSend_remappedStrokeIndexes_originalStrokeIdentifiersOrdering_newStrokeIdentifiersOrdering_(CHGroupingPostprocessingStep, v368, (uint64_t)v354, (uint64_t)v387, v381, v369);
  uint64_t v371 = sub_1C4B669B0(a1, v159);
  v372 = [CHTokenizedMathResultToken alloc];
  uint64_t v375 = objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v372, v373, (uint64_t)v371, (uint64_t)v370, 0x1000000, v374, v393, r1.origin.x, v156, v157, v158);
  if (v379) {
    *uint64_t v379 = v392;
  }
  if (v378) {
    void *v378 = v375;
  }

  char v243 = 1;
LABEL_57:

  CGFloat v153 = v159;
LABEL_58:
  unsigned __int8 v400 = v243;

  id v14 = v389;
  id v16 = (id)v381;
  uint64_t v72 = StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin;
LABEL_59:

  uint64_t v376 = v400;
  return v376;
}

void sub_1C4B67608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B67808(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C4B67814(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  id v18 = a2;
  if (objc_msgSend_containsObject_(*(void **)(*(void *)(a1 + 32) + 32), v9, (uint64_t)v18, v10, v11, v12))
  {
    objc_msgSend_appendString_(*(void **)(a1 + 40), v13, (uint64_t)v18, v14, v15, v16);
    uint64_t v17 = v18;
  }
  else
  {
    *a7 = 1;
    uint64_t v17 = v18;
  }
}

void sub_1C4B678B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *sub_1C4B6792C(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    if (v5 < 0) {
      sub_1C494A220();
    }
    uint64_t v6 = (char *)operator new(v4 - *a2);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[8 * (v5 >> 3)];
    do
    {
      *(void *)&v6[v7] = *(id *)(v3 + v7);
      v7 += 8;
    }
    while (v3 + v7 != v4);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_1C4B679C8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (char *)*v1;
  if (*v1)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 1);
        v4 -= 8;
      }
      while (v4 != v3);
      uint64_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

char **sub_1C4B67A08(char **a1)
{
  sub_1C4A2C604(a1[10]);
  double v2 = a1[6];
  if (v2)
  {
    uint64_t v3 = a1[7];
    uint64_t v4 = a1[6];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 1);
        v3 -= 8;
      }
      while (v3 != v2);
      uint64_t v4 = a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  uint64_t v6 = a1[3];
  if (v6)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[3];
    if (v7 != v6)
    {
      do
      {
        uint64_t v9 = (void *)*((void *)v7 - 1);
        v7 -= 8;
      }
      while (v7 != v6);
      uint64_t v8 = a1[3];
    }
    a1[4] = v6;
    operator delete(v8);
  }
  uint64_t v10 = *a1;
  if (*a1)
  {
    uint64_t v11 = a1[1];
    uint64_t v12 = *a1;
    if (v11 != v10)
    {
      do
      {
        uint64_t v13 = (void *)*((void *)v11 - 1);
        v11 -= 8;
      }
      while (v11 != v10);
      uint64_t v12 = *a1;
    }
    a1[1] = v10;
    operator delete(v12);
  }
  return a1;
}

void *sub_1C4B67AD8(void *a1, void *a2)
{
  uint64_t v3 = a1[1] - *a1;
  uint64_t v4 = v3 >> 3;
  unint64_t v5 = (v3 >> 3) + 1;
  if (v5 >> 61) {
    sub_1C494A220();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v5) {
    unint64_t v5 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 >> 61) {
      sub_1C4949AA8();
    }
    uint64_t v9 = (char *)operator new(8 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[8 * v4];
  uint64_t v11 = &v9[8 * v8];
  *(void *)uint64_t v10 = a2;
  uint64_t v12 = v10 + 8;
  uint64_t v13 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  if (v14 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    if (!v14) {
      return v12;
    }
    goto LABEL_22;
  }
  unint64_t v15 = (unint64_t)&v14[-*a1 - 8];
  if (v15 < 0x78 || &v14[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v14) {
    goto LABEL_30;
  }
  uint64_t v16 = (v15 >> 3) + 1;
  uint64_t v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v17;
  id v18 = &v14[-v17];
  uint64_t v19 = v14 - 16;
  uint64_t v20 = &v9[8 * v4 - 16];
  uint64_t v21 = v16 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v23 = *((_OWORD *)v19 - 1);
    long long v22 = *(_OWORD *)v19;
    *((_OWORD *)v19 - 1) = 0uLL;
    *(_OWORD *)uint64_t v19 = 0uLL;
    *((_OWORD *)v20 - 1) = v23;
    *(_OWORD *)uint64_t v20 = v22;
    v19 -= 32;
    v20 -= 32;
    v21 -= 4;
  }
  while (v21);
  uint64_t v14 = v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_30:
    do
    {
      uint64_t v24 = *((void *)v14 - 1);
      v14 -= 8;
      *(void *)uint64_t v14 = 0;
      *((void *)v10 - 1) = v24;
      v10 -= 8;
    }
    while (v14 != v13);
  }
  uint64_t v14 = (char *)*a1;
  uint64_t v25 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v12;
  a1[2] = v11;
  while (v25 != v14)
  {
    uint64_t v26 = (void *)*((void *)v25 - 1);
    v25 -= 8;
  }
  if (v14) {
LABEL_22:
  }
    operator delete(v14);
  return v12;
}

uint64_t sub_1C4B67C7C(uint64_t result, float *a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  uint64_t v10 = (float *)v9;
  while (1)
  {
    unint64_t v9 = (unint64_t)v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    unint64_t v12 = a2 - v10;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          float v67 = *(a2 - 1);
          float v68 = *v10;
          if (v67 > *v10)
          {
            *uint64_t v10 = v67;
            *(a2 - 1) = v68;
          }
          break;
        case 3uLL:
          float v69 = v10[1];
          float v70 = *(a2 - 1);
          if (v69 <= v70) {
            int v71 = *((_DWORD *)a2 - 1);
          }
          else {
            int v71 = *((_DWORD *)v10 + 1);
          }
          if (v69 > v70) {
            float v69 = *(a2 - 1);
          }
          *(a2 - 1) = v69;
          *((_DWORD *)v10 + 1) = v71;
          float v72 = *(a2 - 1);
          if (v72 <= *v10) {
            float v73 = *v10;
          }
          else {
            float v73 = *(a2 - 1);
          }
          if (v72 > *v10) {
            float v72 = *v10;
          }
          *(a2 - 1) = v72;
          int v75 = *(_DWORD *)v10;
          float v74 = v10[1];
          if (v73 <= v74)
          {
            int v75 = *((_DWORD *)v10 + 1);
            float v74 = v73;
          }
          *(_DWORD *)uint64_t v10 = v75;
          v10[1] = v74;
          break;
        case 4uLL:
          float v77 = v10[1];
          float v76 = v10[2];
          if (*v10 <= v76) {
            int v78 = *((_DWORD *)v10 + 2);
          }
          else {
            int v78 = *(_DWORD *)v10;
          }
          if (*v10 <= v76) {
            float v76 = *v10;
          }
          v10[2] = v76;
          *(_DWORD *)uint64_t v10 = v78;
          float v79 = *(a2 - 1);
          if (v77 <= v79) {
            float v80 = *(a2 - 1);
          }
          else {
            float v80 = v77;
          }
          if (v77 <= v79) {
            float v79 = v77;
          }
          *(a2 - 1) = v79;
          float v81 = *v10;
          if (*v10 <= v80) {
            float v82 = v80;
          }
          else {
            float v82 = *v10;
          }
          if (*v10 > v80) {
            float v81 = v80;
          }
          *uint64_t v10 = v82;
          v10[1] = v81;
          float v83 = v10[2];
          float v84 = *(a2 - 1);
          if (v83 <= v84) {
            float v85 = *(a2 - 1);
          }
          else {
            float v85 = v10[2];
          }
          if (v83 > v84) {
            float v83 = *(a2 - 1);
          }
          *(a2 - 1) = v83;
          float v86 = v10[1];
          if (v86 <= v85) {
            float v87 = v85;
          }
          else {
            float v87 = v10[1];
          }
          if (v86 > v85) {
            float v86 = v85;
          }
          v10[1] = v87;
          v10[2] = v86;
          break;
        case 5uLL:
          int v88 = *(_DWORD *)v10;
          float v89 = v10[1];
          if (*v10 <= v89) {
            int v90 = *((_DWORD *)v10 + 1);
          }
          else {
            int v90 = *(_DWORD *)v10;
          }
          if (*v10 > v89) {
            int v88 = *((_DWORD *)v10 + 1);
          }
          *(_DWORD *)uint64_t v10 = v90;
          *((_DWORD *)v10 + 1) = v88;
          float v91 = v10[3];
          float v92 = *(a2 - 1);
          if (v91 <= v92) {
            int v93 = *((_DWORD *)a2 - 1);
          }
          else {
            int v93 = *((_DWORD *)v10 + 3);
          }
          if (v91 > v92) {
            float v91 = *(a2 - 1);
          }
          *(a2 - 1) = v91;
          *((_DWORD *)v10 + 3) = v93;
          float v94 = *(a2 - 1);
          float v95 = v10[2];
          if (v94 <= v95) {
            float v96 = v10[2];
          }
          else {
            float v96 = *(a2 - 1);
          }
          if (v94 > v95) {
            float v94 = v10[2];
          }
          *(a2 - 1) = v94;
          int v98 = *((_DWORD *)v10 + 2);
          float v97 = v10[3];
          float v99 = v10[1];
          if (v96 <= v97)
          {
            int v98 = *((_DWORD *)v10 + 3);
            float v97 = v96;
          }
          *((_DWORD *)v10 + 2) = v98;
          v10[3] = v97;
          float v100 = *(a2 - 1);
          if (v99 <= v100) {
            float v101 = *(a2 - 1);
          }
          else {
            float v101 = v99;
          }
          if (v99 <= v100) {
            float v100 = v99;
          }
          *(a2 - 1) = v100;
          int v102 = *(_DWORD *)v10;
          float v104 = v10[2];
          float v103 = v10[3];
          if (v103 <= *v10) {
            float v105 = *v10;
          }
          else {
            float v105 = v10[3];
          }
          if (v103 > *v10) {
            float v103 = *v10;
          }
          if (v105 <= v104)
          {
            int v102 = *((_DWORD *)v10 + 2);
            float v104 = v105;
          }
          if (v103 <= v101) {
            float v106 = v101;
          }
          else {
            float v106 = v103;
          }
          if (v103 > v101) {
            float v103 = v101;
          }
          if (v106 <= v104) {
            float v101 = v104;
          }
          *(_DWORD *)uint64_t v10 = v102;
          v10[1] = v101;
          if (v106 <= v104) {
            float v107 = v106;
          }
          else {
            float v107 = v104;
          }
          v10[2] = v107;
          v10[3] = v103;
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 95) {
      break;
    }
    if (!a3)
    {
      if (v10 == a2) {
        return result;
      }
      int64_t v118 = (v12 - 2) >> 1;
      int64_t v119 = v118;
      do
      {
        if (v118 >= v119)
        {
          uint64_t v121 = (2 * v119) | 1;
          uint64_t v122 = &v10[v121];
          if (2 * v119 + 2 < (uint64_t)v12 && *v122 > v122[1])
          {
            ++v122;
            uint64_t v121 = 2 * v119 + 2;
          }
          uint64_t v123 = &v10[v119];
          float v124 = *v122;
          float v125 = *v123;
          if (*v122 <= *v123)
          {
            do
            {
              *uint64_t v123 = v124;
              uint64_t v123 = v122;
              if (v118 < v121) {
                break;
              }
              uint64_t v126 = 2 * v121;
              uint64_t v121 = (2 * v121) | 1;
              uint64_t v122 = &v10[v121];
              uint64_t v127 = v126 + 2;
              if (v127 < (uint64_t)v12 && *v122 > v122[1])
              {
                ++v122;
                uint64_t v121 = v127;
              }
              float v124 = *v122;
            }
            while (*v122 <= v125);
            *uint64_t v123 = v125;
          }
        }
        BOOL v120 = v119-- <= 0;
      }
      while (!v120);
      uint64_t v128 = (unint64_t)v11 >> 2;
      while (2)
      {
        uint64_t v129 = 0;
        float v130 = *v10;
        uint64_t v131 = v10;
        do
        {
          uint64_t v132 = v131;
          v131 += v129 + 1;
          uint64_t v133 = 2 * v129;
          uint64_t v129 = (2 * v129) | 1;
          uint64_t v134 = v133 + 2;
          if (v134 < v128 && *v131 > v131[1])
          {
            ++v131;
            uint64_t v129 = v134;
          }
          *uint64_t v132 = *v131;
        }
        while (v129 <= (uint64_t)((unint64_t)(v128 - 2) >> 1));
        if (v131 == --a2)
        {
LABEL_215:
          float *v131 = v130;
        }
        else
        {
          float *v131 = *a2;
          *a2 = v130;
          uint64_t v135 = (char *)v131 - (char *)v10 + 4;
          if (v135 >= 5)
          {
            unint64_t v136 = (((unint64_t)v135 >> 2) - 2) >> 1;
            uint64_t v137 = &v10[v136];
            float v138 = *v137;
            float v130 = *v131;
            if (*v137 > *v131)
            {
              do
              {
                float *v131 = v138;
                uint64_t v131 = v137;
                if (!v136) {
                  break;
                }
                unint64_t v136 = (v136 - 1) >> 1;
                uint64_t v137 = &v10[v136];
                float v138 = *v137;
              }
              while (*v137 > v130);
              goto LABEL_215;
            }
          }
        }
        BOOL v120 = v128-- <= 2;
        if (v120) {
          return result;
        }
        continue;
      }
    }
    unint64_t v13 = v12 >> 1;
    uint64_t v14 = &v10[v12 >> 1];
    float v15 = *(a2 - 1);
    if ((unint64_t)v11 < 0x201)
    {
      float v18 = *v10;
      float v19 = *v14;
      if (*v10 > *v14)
      {
        if (v15 > v18)
        {
          *uint64_t v14 = v15;
          goto LABEL_32;
        }
        *uint64_t v14 = v18;
        *uint64_t v10 = v19;
        float v31 = *(a2 - 1);
        if (v31 > v19)
        {
          *uint64_t v10 = v31;
LABEL_32:
          *(a2 - 1) = v19;
        }
LABEL_33:
        --a3;
        float v22 = *v10;
        if (a4) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v15 <= v18) {
        goto LABEL_33;
      }
      *uint64_t v10 = v15;
      *(a2 - 1) = v18;
      float v21 = *v14;
      if (*v10 <= *v14) {
        goto LABEL_33;
      }
      *uint64_t v14 = *v10;
      *uint64_t v10 = v21;
      --a3;
      float v22 = *v10;
      if (a4) {
        goto LABEL_57;
      }
LABEL_56:
      if (*(v10 - 1) > v22) {
        goto LABEL_57;
      }
      if (v22 > *(a2 - 1))
      {
        do
        {
          float v58 = v10[1];
          ++v10;
        }
        while (v22 <= v58);
      }
      else
      {
        uint64_t v59 = v10 + 1;
        do
        {
          uint64_t v10 = v59;
          if (v59 >= a2) {
            break;
          }
          ++v59;
        }
        while (v22 <= *v10);
      }
      uint64_t v60 = a2;
      if (v10 < a2)
      {
        uint64_t v60 = a2;
        do
          float v61 = *--v60;
        while (v22 > v61);
      }
      if (v10 < v60)
      {
        float v62 = *v10;
        float v63 = *v60;
        do
        {
          *uint64_t v10 = v63;
          *uint64_t v60 = v62;
          do
          {
            float v64 = v10[1];
            ++v10;
            float v62 = v64;
          }
          while (v22 <= v64);
          do
          {
            float v65 = *--v60;
            float v63 = v65;
          }
          while (v22 > v65);
        }
        while (v10 < v60);
      }
      uint64_t v66 = v10 - 1;
      BOOL v4 = (unint64_t)(v10 - 1) >= v9;
      BOOL v5 = v10 - 1 == (float *)v9;
      if (v10 - 1 != (float *)v9) {
        *(float *)unint64_t v9 = *v66;
      }
      a4 = 0;
      float *v66 = v22;
    }
    else
    {
      float v16 = *v14;
      float v17 = *v10;
      if (*v14 <= *v10)
      {
        if (v15 > v16)
        {
          *uint64_t v14 = v15;
          *(a2 - 1) = v16;
          int v20 = *(_DWORD *)v10;
          if (*v14 > *v10)
          {
            *uint64_t v10 = *v14;
            *(_DWORD *)uint64_t v14 = v20;
          }
        }
      }
      else
      {
        if (v15 <= v16)
        {
          *uint64_t v10 = v16;
          *uint64_t v14 = v17;
          float v23 = *(a2 - 1);
          if (v23 <= v17) {
            goto LABEL_24;
          }
          *uint64_t v14 = v23;
        }
        else
        {
          *uint64_t v10 = v15;
        }
        *(a2 - 1) = v17;
      }
LABEL_24:
      uint64_t v24 = &v10[v13];
      float v26 = *(v24 - 1);
      uint64_t v25 = v24 - 1;
      float v27 = v26;
      float v28 = v10[1];
      float v29 = *(a2 - 2);
      if (v26 <= v28)
      {
        if (v29 > v27)
        {
          *uint64_t v25 = v29;
          *(a2 - 2) = v27;
          float v30 = v10[1];
          if (*v25 > v30)
          {
            v10[1] = *v25;
            *uint64_t v25 = v30;
          }
        }
      }
      else
      {
        if (v29 <= v27)
        {
          v10[1] = v27;
          *uint64_t v25 = v28;
          float v32 = *(a2 - 2);
          if (v32 <= v28) {
            goto LABEL_38;
          }
          *uint64_t v25 = v32;
        }
        else
        {
          v10[1] = v29;
        }
        *(a2 - 2) = v28;
      }
LABEL_38:
      uint64_t v33 = &v10[v13];
      float v35 = v33[1];
      uint64_t v34 = v33 + 1;
      float v36 = v35;
      float v37 = v10[2];
      float v38 = *(a2 - 3);
      if (v35 <= v37)
      {
        if (v38 > v36)
        {
          *uint64_t v34 = v38;
          *(a2 - 3) = v36;
          float v39 = v10[2];
          if (*v34 > v39)
          {
            v10[2] = *v34;
            *uint64_t v34 = v39;
          }
        }
      }
      else
      {
        if (v38 <= v36)
        {
          v10[2] = v36;
          *uint64_t v34 = v37;
          float v40 = *(a2 - 3);
          if (v40 <= v37) {
            goto LABEL_47;
          }
          *uint64_t v34 = v40;
        }
        else
        {
          v10[2] = v38;
        }
        *(a2 - 3) = v37;
      }
LABEL_47:
      float v41 = *v14;
      float v42 = *v25;
      float v43 = *v34;
      if (*v14 <= *v25)
      {
        if (v43 <= v41) {
          goto LABEL_55;
        }
        *uint64_t v14 = v43;
        *uint64_t v34 = v41;
        uint64_t v34 = &v10[v12 >> 1];
        float v41 = v42;
        if (v43 <= v42)
        {
          float v41 = v43;
          goto LABEL_55;
        }
      }
      else if (v43 <= v41)
      {
        *uint64_t v25 = v41;
        *uint64_t v14 = v42;
        uint64_t v25 = &v10[v12 >> 1];
        float v41 = v43;
        if (v43 <= v42)
        {
          float v41 = v42;
          goto LABEL_55;
        }
      }
      *uint64_t v25 = v43;
      *uint64_t v34 = v42;
LABEL_55:
      int v44 = *(_DWORD *)v10;
      *uint64_t v10 = v41;
      *(_DWORD *)uint64_t v14 = v44;
      --a3;
      float v22 = *v10;
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v45 = 0;
      do
        float v46 = v10[++v45];
      while (v46 > v22);
      uint64_t v47 = &v10[v45];
      uint64_t v48 = a2;
      if (v45 == 1)
      {
        uint64_t v48 = a2;
        do
        {
          if (v47 >= v48) {
            break;
          }
          float v50 = *--v48;
        }
        while (v50 <= v22);
      }
      else
      {
        do
          float v49 = *--v48;
        while (v49 <= v22);
      }
      if (v47 >= v48)
      {
        double v56 = v47 - 1;
        if (v47 - 1 == v10) {
          goto LABEL_75;
        }
LABEL_74:
        *uint64_t v10 = *v56;
        goto LABEL_75;
      }
      float v51 = *v48;
      double v52 = &v10[v45];
      double v53 = v48;
      do
      {
        *double v52 = v51;
        *double v53 = v46;
        do
        {
          float v54 = v52[1];
          ++v52;
          float v46 = v54;
        }
        while (v54 > v22);
        do
        {
          float v55 = *--v53;
          float v51 = v55;
        }
        while (v55 <= v22);
      }
      while (v52 < v53);
      double v56 = v52 - 1;
      if (v52 - 1 != v10) {
        goto LABEL_74;
      }
LABEL_75:
      *double v56 = v22;
      if (v47 < v48) {
        goto LABEL_78;
      }
      BOOL v57 = sub_1C4B685CC(v10, v56);
      uint64_t v10 = v56 + 1;
      __n128 result = sub_1C4B685CC(v56 + 1, a2);
      if (result)
      {
        a2 = v56;
        if (v57) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v57)
      {
LABEL_78:
        __n128 result = sub_1C4B67C7C(v9, v56, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = v56 + 1;
      }
    }
  }
  uint64_t v108 = v10 + 1;
  BOOL v110 = v10 == a2 || v108 == a2;
  if (a4)
  {
    if (!v110)
    {
      uint64_t v111 = 4;
      id v112 = v10;
      do
      {
        float v115 = *v112;
        float v114 = v112[1];
        id v112 = v108;
        if (v114 > v115)
        {
          uint64_t v116 = v111;
          do
          {
            *(float *)((char *)v10 + v116) = v115;
            uint64_t v117 = v116 - 4;
            if (v116 == 4)
            {
              uint64_t v113 = v10;
              goto LABEL_191;
            }
            float v115 = *(float *)((char *)v10 + v116 - 8);
            v116 -= 4;
          }
          while (v114 > v115);
          uint64_t v113 = (float *)((char *)v10 + v117);
LABEL_191:
          float *v113 = v114;
        }
        uint64_t v108 = v112 + 1;
        v111 += 4;
      }
      while (v112 + 1 != a2);
    }
  }
  else if (!v110)
  {
    do
    {
      float v140 = *(float *)v9;
      float v139 = *(float *)(v9 + 4);
      unint64_t v9 = (unint64_t)v108;
      if (v139 > v140)
      {
        uint64_t v141 = v108;
        do
        {
          *uint64_t v141 = v140;
          float v140 = *(v141 - 2);
          --v141;
        }
        while (v139 > v140);
        *uint64_t v141 = v139;
      }
      ++v108;
    }
    while ((float *)(v9 + 4) != a2);
  }
  return result;
}

BOOL sub_1C4B685CC(float *a1, float *a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      float v17 = *(a2 - 1);
      float v18 = *a1;
      if (v17 <= *a1) {
        return 1;
      }
      *a1 = v17;
      *(a2 - 1) = v18;
      return 1;
    case 3:
      float v19 = a1[1];
      float v20 = *(a2 - 1);
      if (v19 <= v20) {
        int v21 = *((_DWORD *)a2 - 1);
      }
      else {
        int v21 = *((_DWORD *)a1 + 1);
      }
      if (v19 > v20) {
        float v19 = *(a2 - 1);
      }
      *(a2 - 1) = v19;
      *((_DWORD *)a1 + 1) = v21;
      float v22 = *(a2 - 1);
      if (v22 <= *a1) {
        float v23 = *a1;
      }
      else {
        float v23 = *(a2 - 1);
      }
      if (v22 > *a1) {
        float v22 = *a1;
      }
      *(a2 - 1) = v22;
      float v25 = *a1;
      float v24 = a1[1];
      if (v23 <= v24)
      {
        float v25 = a1[1];
        float v24 = v23;
      }
      *a1 = v25;
      a1[1] = v24;
      return 1;
    case 4:
      float v47 = a1[1];
      float v46 = a1[2];
      if (*a1 <= v46) {
        float v48 = a1[2];
      }
      else {
        float v48 = *a1;
      }
      if (*a1 <= v46) {
        float v46 = *a1;
      }
      a1[2] = v46;
      *a1 = v48;
      float v49 = *(a2 - 1);
      if (v47 <= v49) {
        float v50 = *(a2 - 1);
      }
      else {
        float v50 = v47;
      }
      if (v47 <= v49) {
        float v49 = v47;
      }
      *(a2 - 1) = v49;
      float v51 = *a1;
      if (*a1 <= v50) {
        float v52 = v50;
      }
      else {
        float v52 = *a1;
      }
      if (*a1 > v50) {
        float v51 = v50;
      }
      *a1 = v52;
      a1[1] = v51;
      float v53 = a1[2];
      float v54 = *(a2 - 1);
      if (v53 <= v54) {
        float v55 = *(a2 - 1);
      }
      else {
        float v55 = a1[2];
      }
      if (v53 > v54) {
        float v53 = *(a2 - 1);
      }
      *(a2 - 1) = v53;
      float v56 = a1[1];
      if (v56 <= v55) {
        float v57 = v55;
      }
      else {
        float v57 = a1[1];
      }
      if (v56 > v55) {
        float v56 = v55;
      }
      a1[1] = v57;
      a1[2] = v56;
      return 1;
    case 5:
      float v26 = *a1;
      float v27 = a1[1];
      if (*a1 <= v27) {
        float v28 = a1[1];
      }
      else {
        float v28 = *a1;
      }
      if (*a1 > v27) {
        float v26 = a1[1];
      }
      *a1 = v28;
      a1[1] = v26;
      float v29 = a1[3];
      float v30 = *(a2 - 1);
      if (v29 <= v30) {
        int v31 = *((_DWORD *)a2 - 1);
      }
      else {
        int v31 = *((_DWORD *)a1 + 3);
      }
      if (v29 > v30) {
        float v29 = *(a2 - 1);
      }
      *(a2 - 1) = v29;
      *((_DWORD *)a1 + 3) = v31;
      float v32 = *(a2 - 1);
      float v33 = a1[2];
      if (v32 <= v33) {
        float v34 = a1[2];
      }
      else {
        float v34 = *(a2 - 1);
      }
      if (v32 > v33) {
        float v32 = a1[2];
      }
      *(a2 - 1) = v32;
      int v36 = *((_DWORD *)a1 + 2);
      float v35 = a1[3];
      float v37 = a1[1];
      if (v34 <= v35)
      {
        int v36 = *((_DWORD *)a1 + 3);
        float v35 = v34;
      }
      *((_DWORD *)a1 + 2) = v36;
      a1[3] = v35;
      float v38 = *(a2 - 1);
      if (v37 <= v38) {
        float v39 = *(a2 - 1);
      }
      else {
        float v39 = v37;
      }
      if (v37 <= v38) {
        float v38 = v37;
      }
      *(a2 - 1) = v38;
      float v40 = *a1;
      float v42 = a1[2];
      float v41 = a1[3];
      if (v41 <= *a1) {
        float v43 = *a1;
      }
      else {
        float v43 = a1[3];
      }
      if (v41 > *a1) {
        float v41 = *a1;
      }
      if (v43 <= v42)
      {
        float v40 = a1[2];
        float v42 = v43;
      }
      if (v41 <= v39) {
        float v44 = v39;
      }
      else {
        float v44 = v41;
      }
      if (v41 > v39) {
        float v41 = v39;
      }
      if (v44 <= v42) {
        float v39 = v42;
      }
      *a1 = v40;
      a1[1] = v39;
      if (v44 <= v42) {
        float v45 = v44;
      }
      else {
        float v45 = v42;
      }
      a1[2] = v45;
      a1[3] = v41;
      return 1;
    default:
      uint64_t v3 = a1 + 2;
      float v4 = a1[2];
      float v6 = *a1;
      float v5 = a1[1];
      if (v5 <= v4) {
        float v7 = a1[2];
      }
      else {
        float v7 = a1[1];
      }
      if (v5 <= v4) {
        float v4 = a1[1];
      }
      if (v4 <= v6) {
        float v8 = *a1;
      }
      else {
        float v8 = v4;
      }
      if (v4 > v6) {
        float v4 = *a1;
      }
      *uint64_t v3 = v4;
      if (v8 <= v7) {
        float v9 = v7;
      }
      else {
        float v9 = v6;
      }
      if (v8 > v7) {
        float v8 = v7;
      }
      *a1 = v9;
      a1[1] = v8;
      uint64_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v11 = 0;
      uint64_t v12 = 12;
      break;
  }
  while (1)
  {
    float v13 = *v10;
    float v14 = *v3;
    if (*v10 > *v3) {
      break;
    }
LABEL_27:
    uint64_t v3 = v10;
    v12 += 4;
    if (++v10 == a2) {
      return 1;
    }
  }
  uint64_t v15 = v12;
  do
  {
    *(float *)((char *)a1 + v15) = v14;
    uint64_t v16 = v15 - 4;
    if (v15 == 4)
    {
      *a1 = v13;
      if (++v11 != 8) {
        goto LABEL_27;
      }
      return v10 + 1 == a2;
    }
    float v14 = *(float *)((char *)a1 + v15 - 8);
    v15 -= 4;
  }
  while (v13 > v14);
  *(float *)((char *)a1 + v16) = v13;
  if (++v11 != 8) {
    goto LABEL_27;
  }
  return v10 + 1 == a2;
}

void sub_1C4B68960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B68A60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B68A74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *sub_1C4B68B94(uint64_t a1, unint64_t a2)
{
  if (a2 > 0x1B) {
    return 0;
  }
  else {
    return off_1E64E44C0[a2];
  }
}

void sub_1C4B68D68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B68DA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B68DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B68DDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B68DF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B68ED0(uint64_t a1, uint64_t a2, int a3)
{
  self;
  switch(a2)
  {
    case 0:
      uint64_t result = a3 == 3;
      break;
    case 1:
      uint64_t result = a3 == 4 || (a3 & 0xFFFFFFFB) - 1 < 2;
      break;
    case 2:
    case 3:
    case 4:
    case 5:
      uint64_t result = (a3 & 0xFFFFFFFB) == 1 || (a3 & 0xFFFFFFFD) == 4;
      break;
    case 6:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      uint64_t result = a3 == 1 || (a3 & 0xFFFFFFFD) == 4;
      break;
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      int v5 = _os_feature_enabled_impl();
      BOOL v7 = a3 == 1 || (a3 & 0xFFFFFFFD) == 4;
      if (v5) {
        uint64_t result = v7;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 19:
    case 20:
    case 21:
      uint64_t result = (a3 - 1) < 2 || (a3 & 0xFFFFFFFD) == 4;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void sub_1C4B690E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B69178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B69504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4B69C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6A030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6A274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6A38C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6A3B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6A560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6A578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6A58C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6A6C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6A6D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6A870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6A884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6A894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6AA24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6AD2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6B4C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6B4D0(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1C4B6B4E8(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1C4B6B500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6B724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6B874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6B9F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6BBAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B6BC00(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  self;
  uint64_t v6 = LMLanguageModelCreate();
  uint64_t v12 = v6;
  if (v5 && !v6)
  {
    float v13 = objc_msgSend_localeIdentifier(v5, v7, v8, v9, v10, v11);
    objc_msgSend_setObject_forKeyedSubscript_(v4, v14, (uint64_t)v13, *MEMORY[0x1E4F723C8], v15, v16);

    uint64_t v12 = LMLanguageModelCreate();
  }

  return v12;
}

void sub_1C4B6BC9C(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4B6BCB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6BCCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6C340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6C3F8()
{
  uint64_t v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  attr = dispatch_queue_attr_make_with_qos_class(v0, QOS_CLASS_BACKGROUND, 0);

  dispatch_queue_t v1 = dispatch_queue_create("com.apple.CoreHandwriting.LanguageModelLoadingQueue", attr);
  double v2 = (void *)qword_1EA3C9460;
  qword_1EA3C9460 = (uint64_t)v1;
}

void sub_1C4B6C47C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  BOOL v7 = *(void **)(a1 + 32);
  uint64_t v8 = objc_msgSend_linguisticResourcesFallbackLocale(*(void **)(a1 + 40), a2, a3, a4, a5, a6);
  uint64_t v9 = sub_1C4B6BC00((uint64_t)CHRecognizerConfiguration, v7, v8);

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v10 = (id)qword_1EA3C9F98;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    if (*(void *)(a1 + 64)) {
      uint64_t v11 = "has";
    }
    else {
      uint64_t v11 = "has not";
    }
    *(_DWORD *)long long buf = 136315138;
    float v17 = v11;
    _os_log_impl(&dword_1C492D000, v10, OS_LOG_TYPE_DEBUG, "wordLM %s been loaded (async)", buf, 0xCu);
  }

  if (v9)
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = sub_1C4B6C61C;
    v13[3] = &unk_1E64E1258;
    uint64_t v12 = *(NSObject **)(a1 + 48);
    id v14 = *(id *)(a1 + 56);
    uint64_t v15 = v9;
    dispatch_sync(v12, v13);
  }
}

void sub_1C4B6C608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B6C61C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend__updateWordLanguageModel_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a4, a5, a6);
  return LMLanguageModelRelease();
}

void sub_1C4B6CD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6CED0(uint64_t a1, const __CFURL *a2, int a3, void *a4, CFStringRef theString1, unsigned char *a6)
{
  if (CFEqual(theString1, (CFStringRef)*MEMORY[0x1E4F724A8]))
  {
    objc_msgSend_localeIdentifier(a4, v10, v11, v12, v13, v14);
    id v30 = (id)objc_claimAutoreleasedReturnValue();
    CFStringRef PathComponent = CFURLCopyLastPathComponent(a2);
    if (CFEqual(PathComponent, @"char.lm"))
    {
      objc_msgSend_setObject_forKey_(*(void **)(a1 + 32), v16, (uint64_t)a2, (uint64_t)v30, v17, v18);
      float v24 = objc_msgSend_localeIdentifier(*(void **)(*(void *)(a1 + 40) + 48), v19, v20, v21, v22, v23);
      int isEqualToString = objc_msgSend_isEqualToString_(v30, v25, (uint64_t)v24, v26, v27, v28);

      if (isEqualToString) {
        *a6 = 1;
      }
    }
    if (PathComponent) {
      CFRelease(PathComponent);
    }
  }
}

void sub_1C4B6CFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, const void *a10)
{
  sub_1C4B6D028(&a10);
  _Unwind_Resume(a1);
}

void sub_1C4B6CFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6D00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, const void *a10)
{
  _Unwind_Resume(a1);
}

const void **sub_1C4B6D028(const void **a1)
{
  double v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  *a1 = 0;
  return a1;
}

void sub_1C4B6D208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6D338()
{
  uint64_t v0 = [CHPatternNetwork alloc];
  uint64_t v5 = objc_msgSend_initWithFile_(v0, v1, @"PP.bin", v2, v3, v4);
  uint64_t v6 = (void *)qword_1EA3C9470;
  qword_1EA3C9470 = v5;
}

void sub_1C4B6D47C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8786460](v1, 0x10B2C40ACD43ABBLL);
  _Unwind_Resume(a1);
}

void sub_1C4B6D5A0(_Unwind_Exception *a1)
{
  MEMORY[0x1C8786460](v1, 0x10B2C40ACD43ABBLL);
  _Unwind_Resume(a1);
}

void sub_1C4B6D944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6DE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C4B6ED70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B6EFAC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_substringFromIndex_(a2, (const char *)a2, 4, a4, a5, a6);
  uint64_t v13 = objc_msgSend_capitalizedString(v7, v8, v9, v10, v11, v12);

  uint64_t v18 = objc_msgSend_stringByAppendingString_(@"UseCPPFeatureExtraction", v14, (uint64_t)v13, v15, v16, v17);
  uint64_t v23 = objc_msgSend_objectForKey_(*(void **)(a1 + 32), v19, (uint64_t)v18, v20, v21, v22);
  uint64_t v29 = objc_msgSend_BOOLValue(v23, v24, v25, v26, v27, v28);

  return v29;
}

void sub_1C4B6F03C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4B6F060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6F070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6FA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6FDDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6FE80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6FE98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6FEAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B6FF6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B700D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C4B7016C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B7026C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  if (objc_msgSend_isEqualToString_(v3, v4, @" ", v5, v6, v7))
  {

    return 2;
  }
  else
  {
    uint64_t v13 = 2 * (objc_msgSend_characterAtIndex_(v3, v8, 0, v9, v10, v11) == 57427);

    return v13;
  }
}

void sub_1C4B702DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B703F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1C4B70400(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend_characterCount(v3, v4, v5, v6, v7, v8) < 2) {
    double v14 = (*(double (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else {
    double v14 = (double)objc_msgSend_characterCount(v3, v9, v10, v11, v12, v13) * -100.0;
  }

  return v14;
}

void sub_1C4B7048C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B71048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4B71688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

BOOL sub_1C4B7177C(uint64_t a1, void *a2)
{
  uint64_t v3 = 0;
  sub_1C492FBB0((uint64_t)CHRecognizerConfiguration, a2, &v3, 0);
  return v3 == 1;
}

void sub_1C4B718DC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4B718FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B71B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B71C5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B71EA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B71EC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B71EDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B71EF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B71F0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B71F24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B72718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C4B72CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B72D3C()
{
  JUMPOUT(0x1C4B72D20);
}

void sub_1C4B72D50()
{
  JUMPOUT(0x1C4B72D20);
}

void sub_1C4B72D60()
{
}

void sub_1C4B72D6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B72D90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B72DB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B72E9C(uint64_t a1, char *__s, char a3)
{
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1C4949B7C();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  sub_1C499AAD8((void *)(a1 + 128));
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = a1 + 200;
  *(unsigned char *)(a1 + 184) = a3;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 216) = a1 + 224;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 232) = 0;
  unint64_t v11 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v12 = *(void *)(a1 + 8);
    if (v12 < 4) {
      goto LABEL_25;
    }
  }
  else
  {
    unint64_t v12 = *(unsigned __int8 *)(a1 + 23);
    if (v11 < 4) {
      goto LABEL_25;
    }
  }
  unint64_t v13 = v12 - 3;
  if ((v11 & 0x80) != 0)
  {
    if (*(unsigned char *)(*(void *)a1 + v13) != 102) {
      goto LABEL_25;
    }
  }
  else if (*(unsigned char *)(a1 + v13) != 102)
  {
    goto LABEL_25;
  }
  unint64_t v14 = v12 - 2;
  if ((v11 & 0x80) != 0)
  {
    if (*(unsigned char *)(*(void *)a1 + v14) != 115) {
      goto LABEL_25;
    }
  }
  else if (*(unsigned char *)(a1 + v14) != 115)
  {
    goto LABEL_25;
  }
  unint64_t v15 = v12 - 1;
  if ((v11 & 0x80) != 0)
  {
    if (*(unsigned char *)(*(void *)a1 + v15) == 116) {
      goto LABEL_23;
    }
LABEL_25:
    Network::deserialize((Network *)a1, __s);
    return a1;
  }
  if (*(unsigned char *)(a1 + v15) != 116) {
    goto LABEL_25;
  }
LABEL_23:
  Network::readDataFile((Network *)a1);
  return a1;
}

void sub_1C4B7308C(_Unwind_Exception *a1)
{
  sub_1C4999C7C(v4, *v9);
  sub_1C4999CD0(v3, *v8);
  sub_1C4999BE4(v2);
  unint64_t v11 = *(void **)(v1 + 104);
  if (v11)
  {
    *(void *)(v1 + 112) = v11;
    operator delete(v11);
    unint64_t v12 = *v7;
    if (!*v7)
    {
LABEL_3:
      sub_1C4999C7C((uint64_t)(v6 - 1), *v6);
      unint64_t v13 = *v5;
      if (!*v5) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unint64_t v12 = *v7;
    if (!*v7) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 88) = v12;
  operator delete(v12);
  sub_1C4999C7C((uint64_t)(v6 - 1), *v6);
  unint64_t v13 = *v5;
  if (!*v5)
  {
LABEL_4:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  *(void *)(v1 + 40) = v13;
  operator delete(v13);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_9:
  operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void CHCanvasHeatmap::CHCanvasHeatmap(CHCanvasHeatmap *this, const CHCanvasHeatmap *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_OWORD *)this + 3) = 0u;
  uint64_t v3 = (void *)((char *)this + 48);
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *(_OWORD *)((char *)this + 88) = 0u;
  uint64_t v4 = (void *)((char *)this + 88);
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  uint64_t v5 = (void *)((char *)this + 136);
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((void *)this + 16) = *((void *)a2 + 16);
  *(void *)this = *(void *)a2;
  if (this != a2)
  {
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
    sub_1C4B761BC((void *)this + 1, *((uint64_t **)a2 + 3), 0);
    *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
    sub_1C4B76874(v3, *((void **)a2 + 8), 0);
    *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
    sub_1C4B76EFC(v4, *((uint64_t **)a2 + 13), 0);
    *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
    sub_1C4B770BC(v5, *((uint64_t **)a2 + 19), 0);
  }
}

void sub_1C4B73234(_Unwind_Exception *a1)
{
  sub_1C4B73260(v4);
  sub_1C4B732E4(v3);
  sub_1C498D2E0(v2);
  sub_1C498D2E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B73260(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void *)*v2;
      size_t v6 = (void *)v2[5];
      if (v6)
      {
        do
        {
          size_t v7 = (void *)*v6;
          operator delete(v6);
          size_t v6 = v7;
        }
        while (v7);
      }
      uint64_t v8 = (void *)v2[3];
      v2[3] = 0;
      if (v8) {
        operator delete(v8);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_1C4B732E4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void *)*v2;
      size_t v6 = (void *)v2[6];
      if (v6)
      {
        do
        {
          size_t v7 = (void *)*v6;
          operator delete(v6);
          size_t v6 = v7;
        }
        while (v7);
      }
      uint64_t v8 = (void *)v2[4];
      v2[4] = 0;
      if (v8) {
        operator delete(v8);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void CHCanvasHeatmap::cleanCanvasHeatmap(CHCanvasHeatmap *this)
{
  *(void *)this = 20;
  if (*((void *)this + 4))
  {
    uint64_t v2 = (void *)*((void *)this + 3);
    if (v2)
    {
      do
      {
        uint64_t v3 = (void *)*v2;
        operator delete(v2);
        uint64_t v2 = v3;
      }
      while (v3);
    }
    *((void *)this + 3) = 0;
    uint64_t v4 = *((void *)this + 2);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
        *(void *)(*((void *)this + 1) + 8 * i) = 0;
    }
    *((void *)this + 4) = 0;
  }
  if (*((void *)this + 14))
  {
    size_t v6 = (void *)*((void *)this + 13);
    if (v6)
    {
      do
      {
        uint64_t v16 = (void *)*v6;
        uint64_t v17 = (void *)v6[6];
        if (v17)
        {
          do
          {
            uint64_t v18 = (void *)*v17;
            operator delete(v17);
            uint64_t v17 = v18;
          }
          while (v18);
        }
        float v19 = (void *)v6[4];
        v6[4] = 0;
        if (v19) {
          operator delete(v19);
        }
        operator delete(v6);
        size_t v6 = v16;
      }
      while (v16);
    }
    *((void *)this + 13) = 0;
    uint64_t v7 = *((void *)this + 12);
    if (v7)
    {
      for (uint64_t j = 0; j != v7; ++j)
        *(void *)(*((void *)this + 11) + 8 * j) = 0;
    }
    *((void *)this + 14) = 0;
  }
  if (*((void *)this + 20))
  {
    uint64_t v9 = (void *)*((void *)this + 19);
    if (v9)
    {
      do
      {
        uint64_t v20 = (void *)*v9;
        uint64_t v21 = (void *)v9[5];
        if (v21)
        {
          do
          {
            uint64_t v22 = (void *)*v21;
            operator delete(v21);
            uint64_t v21 = v22;
          }
          while (v22);
        }
        uint64_t v23 = (void *)v9[3];
        v9[3] = 0;
        if (v23) {
          operator delete(v23);
        }
        operator delete(v9);
        uint64_t v9 = v20;
      }
      while (v20);
    }
    *((void *)this + 19) = 0;
    uint64_t v10 = *((void *)this + 18);
    if (v10)
    {
      for (uint64_t k = 0; k != v10; ++k)
        *(void *)(*((void *)this + 17) + 8 * k) = 0;
    }
    *((void *)this + 20) = 0;
  }
  if (*((void *)this + 9))
  {
    unint64_t v12 = (void *)*((void *)this + 8);
    if (v12)
    {
      do
      {
        unint64_t v13 = (void *)*v12;
        operator delete(v12);
        unint64_t v12 = v13;
      }
      while (v13);
    }
    *((void *)this + 8) = 0;
    uint64_t v14 = *((void *)this + 7);
    if (v14)
    {
      for (uint64_t m = 0; m != v14; ++m)
        *(void *)(*((void *)this + 6) + 8 * m) = 0;
    }
    *((void *)this + 9) = 0;
  }
}

uint64_t CHCanvasHeatmap::nextHeatmapItemID(CHCanvasHeatmap *this)
{
  uint64_t v1 = *((void *)this + 16);
  *((void *)this + 16) = v1 + 1;
  return v1;
}

void sub_1C4B73530(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = (uint64_t *)(a1 + 8);
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  unint64_t v10 = *a3 ^ (2 * v9);
  unint64_t v11 = *(void *)(a1 + 16);
  if (!v11) {
    goto LABEL_53;
  }
  uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    uint64_t v13 = *a3 ^ (2 * v9);
    if (v10 >= v11) {
      uint64_t v13 = v10 % v11;
    }
  }
  else
  {
    uint64_t v13 = (v11 - 1) & v10;
  }
  uint64_t v14 = *(void **)(*v7 + 8 * v13);
  if (!v14 || (unint64_t v15 = (void *)*v14) == 0)
  {
LABEL_28:
    if (v12.u32[0] > 1uLL)
    {
      uint64_t v3 = *a3 ^ (2 * v9);
      if (v10 >= v11) {
        uint64_t v3 = v10 % v11;
      }
    }
    else
    {
      uint64_t v3 = (v11 - 1) & v10;
    }
    uint64_t v20 = *(void **)(*v7 + 8 * v3);
    if (v20)
    {
      uint64_t v21 = (void *)*v20;
      if (v21)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v25 = v21[1];
            if (v25 == v10)
            {
              if (v21[2] == v8 && v21[3] == v9) {
                return;
              }
            }
            else if ((v25 & (v11 - 1)) != v3)
            {
              goto LABEL_53;
            }
            uint64_t v21 = (void *)*v21;
            if (!v21) {
              goto LABEL_53;
            }
          }
        }
        do
        {
          unint64_t v23 = v21[1];
          if (v23 == v10)
          {
            if (v21[2] == v8 && v21[3] == v9) {
              return;
            }
          }
          else
          {
            if (v23 >= v11) {
              v23 %= v11;
            }
            if (v23 != v3) {
              break;
            }
          }
          uint64_t v21 = (void *)*v21;
        }
        while (v21);
      }
    }
LABEL_53:
    uint64_t v26 = operator new(0x28uLL);
    *uint64_t v26 = 0;
    v26[1] = v10;
    *((_OWORD *)v26 + 1) = *(_OWORD *)a3;
    v26[4] = a2;
    uint64_t v27 = (void *)(a1 + 32);
    float v28 = (float)(unint64_t)(*(void *)(a1 + 32) + 1);
    float v29 = *(float *)(a1 + 40);
    if (v11 && (float)(v29 * (float)v11) >= v28)
    {
      uint64_t v30 = *v7;
      int v31 = *(void **)(*v7 + 8 * v3);
      if (v31)
      {
LABEL_56:
        *uint64_t v26 = *v31;
        goto LABEL_92;
      }
    }
    else
    {
      BOOL v32 = 1;
      if (v11 >= 3) {
        BOOL v32 = (v11 & (v11 - 1)) != 0;
      }
      unint64_t v33 = v32 | (2 * v11);
      unint64_t v34 = vcvtps_u32_f32(v28 / v29);
      if (v33 <= v34) {
        size_t prime = v34;
      }
      else {
        size_t prime = v33;
      }
      if (prime == 1)
      {
        size_t prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        size_t prime = std::__next_prime(prime);
        unint64_t v11 = *(void *)(a1 + 16);
      }
      if (prime > v11) {
        goto LABEL_67;
      }
      if (prime < v11)
      {
        unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 32) / *(float *)(a1 + 40));
        if (v11 < 3 || (uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
        {
          unint64_t v36 = std::__next_prime(v36);
        }
        else
        {
          uint64_t v38 = 1 << -(char)__clz(v36 - 1);
          if (v36 >= 2) {
            unint64_t v36 = v38;
          }
        }
        if (prime <= v36) {
          size_t prime = v36;
        }
        if (prime < v11) {
LABEL_67:
        }
          sub_1C4949C24((uint64_t)v7, prime);
      }
      unint64_t v11 = *(void *)(a1 + 16);
      unint64_t v39 = v11 - 1;
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v10 >= v11)
        {
          uint64_t v3 = v10 % v11;
          uint64_t v30 = *v7;
          int v31 = *(void **)(*v7 + 8 * (v10 % v11));
          if (v31) {
            goto LABEL_56;
          }
        }
        else
        {
          uint64_t v3 = v10;
          uint64_t v30 = *v7;
          int v31 = *(void **)(*v7 + 8 * v10);
          if (v31) {
            goto LABEL_56;
          }
        }
      }
      else
      {
        uint64_t v3 = v39 & v10;
        uint64_t v30 = *v7;
        int v31 = *(void **)(*v7 + 8 * (v39 & v10));
        if (v31) {
          goto LABEL_56;
        }
      }
    }
    uint64_t v41 = *(void *)(a1 + 24);
    float v40 = (void *)(a1 + 24);
    *uint64_t v26 = v41;
    *float v40 = v26;
    *(void *)(v30 + 8 * v3) = v40;
    if (!*v26)
    {
LABEL_93:
      a2 = 1;
      goto LABEL_94;
    }
    unint64_t v42 = *(void *)(*v26 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v42 >= v11) {
        v42 %= v11;
      }
    }
    else
    {
      v42 &= v11 - 1;
    }
    int v31 = (void *)(*v7 + 8 * v42);
LABEL_92:
    *int v31 = v26;
    goto LABEL_93;
  }
  if (v12.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v19 = v15[1];
      if (v19 == v10)
      {
        if (v15[2] == v8 && v15[3] == v9) {
          goto LABEL_74;
        }
      }
      else if ((v19 & (v11 - 1)) != v13)
      {
        goto LABEL_28;
      }
      unint64_t v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_28;
      }
    }
  }
  while (1)
  {
    unint64_t v17 = v15[1];
    if (v17 == v10) {
      break;
    }
    if (v17 >= v11) {
      v17 %= v11;
    }
    if (v17 != v13) {
      goto LABEL_28;
    }
LABEL_15:
    unint64_t v15 = (void *)*v15;
    if (!v15) {
      goto LABEL_28;
    }
  }
  if (v15[2] != v8 || v15[3] != v9) {
    goto LABEL_15;
  }
LABEL_74:
  uint64_t v27 = v15 + 4;
LABEL_94:
  *v27 += a2;
}

void sub_1C4B73900(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL CHCanvasHeatmap::_isHighDensityItem(int8x8_t *this, unint64_t a2)
{
  unint64_t v35 = a2;
  uint64_t v4 = this + 17;
  uint64_t v5 = (void *)*((void *)sub_1C4B77BB0((uint64_t)&this[17], a2, &v35) + 5);
  if (!v5) {
    return 0;
  }
  int8x8_t v6 = this[2];
  if (!*(void *)&v6)
  {
    do
      uint64_t v5 = (void *)*v5;
    while (v5);
    return 0;
  }
  int v7 = 0;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  uint64_t v9 = *(void *)&v6 - 1;
  do
  {
    while (1)
    {
      uint64_t v10 = v5[2];
      uint64_t v11 = v5[3];
      unint64_t v12 = v10 ^ (2 * v11);
      if (v8.u32[0] > 1uLL)
      {
        uint64_t v13 = v10 ^ (2 * v11);
        if (v12 >= *(void *)&v6) {
          uint64_t v13 = v12 % *(void *)&v6;
        }
      }
      else
      {
        uint64_t v13 = v12 & v9;
      }
      uint64_t v14 = *(void **)(*(void *)&this[1] + 8 * v13);
      if (v14)
      {
        unint64_t v15 = (void *)*v14;
        if (v15) {
          break;
        }
      }
LABEL_4:
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_32;
      }
    }
    if (v8.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v17 = v15[1];
        if (v12 == v17)
        {
          if (v15[2] == v10 && v15[3] == v11) {
            goto LABEL_31;
          }
        }
        else if ((v17 & v9) != v13)
        {
          goto LABEL_4;
        }
        unint64_t v15 = (void *)*v15;
        if (!v15) {
          goto LABEL_4;
        }
      }
    }
    while (1)
    {
      unint64_t v19 = v15[1];
      if (v12 == v19) {
        break;
      }
      if (v19 >= *(void *)&v6) {
        v19 %= *(void *)&v6;
      }
      if (v19 != v13) {
        goto LABEL_4;
      }
LABEL_25:
      unint64_t v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_4;
      }
    }
    if (v15[2] != v10 || v15[3] != v11) {
      goto LABEL_25;
    }
LABEL_31:
    v7 += v15[4];
    uint64_t v5 = (void *)*v5;
  }
  while (v5);
LABEL_32:
  if (v7 <= 10) {
    return 0;
  }
  uint64_t v20 = sub_1C4B77BB0((uint64_t)v4, a2, &v35);
  uint64_t v21 = v20;
  unint64_t v22 = *((void *)v20 + 6);
  float v23 = (float)v7 / (float)v22;
  if (v22 < 6)
  {
LABEL_44:
    if (v22 <= 3)
    {
      if (v23 <= 70.0)
      {
        float v29 = v21 + 40;
        while (1)
        {
          float v29 = (void *)*v29;
          if (!v29) {
            break;
          }
          sub_1C4B73BE0((uint64_t *)&v36, this, v29 + 2);
          uint64_t v30 = v36;
          int v31 = v37;
          if (v36)
          {
            uint8x8_t v37 = v36;
            operator delete(v36);
          }
          if ((unint64_t)(v31 - v30) <= 0x20)
          {
            unint64_t v22 = *((void *)v21 + 6);
            goto LABEL_52;
          }
        }
      }
      return 1;
    }
LABEL_52:
    if ((v22 & 0xFFFFFFFFFFFFFFFELL) == 4)
    {
      if (v23 > 34.0) {
        return 1;
      }
      BOOL v32 = v21 + 40;
      do
      {
        BOOL v32 = (void *)*v32;
        BOOL v25 = v32 == 0;
        if (!v32) {
          break;
        }
        sub_1C4B73BE0((uint64_t *)&v36, this, v32 + 2);
        unint64_t v33 = v36;
        unint64_t v34 = v37;
        if (v36)
        {
          uint8x8_t v37 = v36;
          operator delete(v36);
        }
      }
      while ((unint64_t)(v34 - v33) > 0x20);
      return v25;
    }
    return 0;
  }
  if (v23 <= 20.0)
  {
    float v24 = v20 + 40;
    while (1)
    {
      float v24 = (void *)*v24;
      if (!v24) {
        break;
      }
      sub_1C4B73BE0((uint64_t *)&v36, this, v24 + 2);
      uint64_t v27 = v36;
      float v28 = v37;
      if (v36)
      {
        uint8x8_t v37 = v36;
        operator delete(v36);
      }
      if ((unint64_t)(v28 - v27) <= 0x20)
      {
        unint64_t v22 = *((void *)v21 + 6);
        goto LABEL_44;
      }
    }
  }
  return 1;
}

void sub_1C4B73BE0(uint64_t *a1, int8x8_t *a2, void *a3)
{
  uint64_t v5 = a1;
  int8x8_t v6 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v7 = -1;
  while (2)
  {
    uint64_t v8 = -1;
    while (2)
    {
      if (!(v8 | v7)) {
        goto LABEL_6;
      }
      int8x8_t v10 = a2[2];
      if (!*(void *)&v10) {
        goto LABEL_6;
      }
      uint64_t v11 = *a3 + v8;
      uint64_t v12 = a3[1] + v7;
      unint64_t v13 = v11 ^ (2 * v12);
      uint8x8_t v14 = (uint8x8_t)vcnt_s8(v10);
      v14.i16[0] = vaddlv_u8(v14);
      if (v14.u32[0] > 1uLL)
      {
        uint64_t v15 = v11 ^ (2 * v12);
        if (v13 >= *(void *)&v10) {
          uint64_t v15 = v13 % *(void *)&v10;
        }
      }
      else
      {
        uint64_t v15 = v13 & (*(void *)&v10 - 1);
      }
      uint64_t v16 = *(void **)(*(void *)&a2[1] + 8 * v15);
      if (!v16) {
        goto LABEL_6;
      }
      uint64_t v17 = (void *)*v16;
      if (!v17) {
        goto LABEL_6;
      }
      if (v14.u32[0] < 2uLL)
      {
        uint64_t v18 = *(void *)&v10 - 1;
        while (1)
        {
          uint64_t v20 = v17[1];
          if (v13 == v20)
          {
            if (v17[2] == v11 && v17[3] == v12) {
              goto LABEL_35;
            }
          }
          else if ((v20 & v18) != v15)
          {
            goto LABEL_6;
          }
          uint64_t v17 = (void *)*v17;
          if (!v17) {
            goto LABEL_6;
          }
        }
      }
      while (1)
      {
        unint64_t v22 = v17[1];
        if (v13 == v22) {
          break;
        }
        if (v22 >= *(void *)&v10) {
          v22 %= *(void *)&v10;
        }
        if (v22 != v15) {
          goto LABEL_6;
        }
LABEL_29:
        uint64_t v17 = (void *)*v17;
        if (!v17) {
          goto LABEL_6;
        }
      }
      if (v17[2] != v11 || v17[3] != v12) {
        goto LABEL_29;
      }
LABEL_35:
      if (v17[4] >= 0x15uLL)
      {
        unint64_t v23 = v5[2];
        if ((unint64_t)v6 < v23)
        {
          *(void *)int8x8_t v6 = v11;
          *((void *)v6 + 1) = v12;
          uint64_t v9 = v6 + 16;
          goto LABEL_5;
        }
        float v24 = (char *)*v5;
        uint64_t v25 = (v6 - v24) >> 4;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 60) {
          sub_1C494A220();
        }
        uint64_t v27 = v23 - (void)v24;
        if (v27 >> 3 > v26) {
          unint64_t v26 = v27 >> 3;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28)
        {
          if (v28 >> 60) {
            sub_1C4949AA8();
          }
          float v29 = (char *)operator new(16 * v28);
          uint64_t v30 = (uint64_t *)&v29[16 * v25];
          *uint64_t v30 = v11;
          v30[1] = v12;
          uint64_t v31 = (uint64_t)v30;
          if (v6 == v24)
          {
LABEL_51:
            uint64_t v5 = a1;
            uint64_t v9 = (char *)(v30 + 2);
            *a1 = v31;
            a1[1] = (uint64_t)(v30 + 2);
            a1[2] = (uint64_t)&v29[16 * v28];
            if (v6) {
              goto LABEL_52;
            }
            goto LABEL_5;
          }
        }
        else
        {
          float v29 = 0;
          uint64_t v30 = (uint64_t *)(16 * v25);
          *uint64_t v30 = v11;
          v30[1] = v12;
          uint64_t v31 = 16 * v25;
          if (v6 == v24) {
            goto LABEL_51;
          }
        }
        do
        {
          *(_OWORD *)(v31 - 16) = *((_OWORD *)v6 - 1);
          v31 -= 16;
          v6 -= 16;
        }
        while (v6 != v24);
        uint64_t v5 = a1;
        int8x8_t v6 = (char *)*a1;
        uint64_t v9 = (char *)(v30 + 2);
        *a1 = v31;
        a1[1] = (uint64_t)(v30 + 2);
        a1[2] = (uint64_t)&v29[16 * v28];
        if (v6) {
LABEL_52:
        }
          operator delete(v6);
LABEL_5:
        v5[1] = (uint64_t)v9;
        int8x8_t v6 = v9;
      }
LABEL_6:
      if (++v8 != 2) {
        continue;
      }
      break;
    }
    if (++v7 != 2) {
      continue;
    }
    break;
  }
}

void sub_1C4B73E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10)
  {
    *(void *)(a10 + 8) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C4B73EA0(int8x8_t *this@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)CGFloat v267 = 0u;
  *(_OWORD *)CGFloat v268 = 0u;
  int v269 = 1065353216;
  unint64_t v7 = *(void *)(a3 + 16);
  if (v7)
  {
    uint64_t v8 = this + 17;
    uint64_t v9 = this + 13;
    uint64_t v261 = this + 19;
    do
    {
      unint64_t v5 = *(void *)(v7 + 16);
      __p[0] = (void *)v5;
      unint64_t v4 = *((void *)sub_1C4B77BB0((uint64_t)&this[17], v5, __p) + 5);
      if (v4)
      {
        do
        {
          sub_1C4B73530((uint64_t)this, -*(void *)(v4 + 32), (uint64_t *)(v4 + 16));
          unint64_t v10 = *(void *)(v4 + 16);
          uint64_t v11 = *(void **)(v4 + 24);
          unint64_t v12 = v10 ^ (2 * (void)v11);
          unint64_t v13 = (unint64_t)this[12];
          if ((v13 & (v13 - 1)) != 0)
          {
            uint64_t v16 = v10 ^ (2 * (void)v11);
            if (v12 >= v13) {
              uint64_t v16 = v12 % v13;
            }
            uint8x8_t v14 = *(void ***)(*(void *)&this[11] + 8 * v16);
            do
            {
              do
                uint8x8_t v14 = (void **)*v14;
              while (v14[1] != (void *)v12);
            }
            while (v14[2] != (void *)v10 || v14[3] != v11);
          }
          else
          {
            uint8x8_t v14 = *(void ***)(*(void *)&this[11] + 8 * ((v13 - 1) & v12));
            do
            {
              do
                uint8x8_t v14 = (void **)*v14;
              while (v14[1] != (void *)v12);
            }
            while (v14[2] != (void *)v10 || v14[3] != v11);
          }
          uint64_t v18 = v14 + 4;
          int8x8_t v19 = (int8x8_t)v14[5];
          if (v19)
          {
            uint8x8_t v20 = (uint8x8_t)vcnt_s8(v19);
            v20.i16[0] = vaddlv_u8(v20);
            if (v20.u32[0] > 1uLL)
            {
              unint64_t v21 = (unint64_t)__p[0];
              if ((void *)*(void *)&v19 <= __p[0]) {
                unint64_t v21 = (unint64_t)__p[0] % *(void *)&v19;
              }
            }
            else
            {
              unint64_t v21 = (*(void *)&v19 - 1) & (uint64_t)__p[0];
            }
            unint64_t v22 = (uint64_t ***)*((void *)*v18 + v21);
            if (v22)
            {
              unint64_t v23 = *v22;
              if (*v22)
              {
                if (v20.u32[0] < 2uLL)
                {
                  uint64_t v24 = *(void *)&v19 - 1;
                  while (1)
                  {
                    unint64_t v26 = (unint64_t)v23[1];
                    if ((void *)v26 == __p[0])
                    {
                      if (v23[2] == __p[0]) {
                        goto LABEL_45;
                      }
                    }
                    else if ((v26 & v24) != v21)
                    {
                      goto LABEL_47;
                    }
                    unint64_t v23 = (uint64_t **)*v23;
                    if (!v23) {
                      goto LABEL_47;
                    }
                  }
                }
                do
                {
                  unint64_t v25 = (unint64_t)v23[1];
                  if ((void *)v25 == __p[0])
                  {
                    if (v23[2] == __p[0])
                    {
LABEL_45:
                      sub_1C4B77EBC((uint64_t)&v273, v14 + 4, v23);
                      if (v273.i64[0]) {
                        operator delete((void *)v273.i64[0]);
                      }
                      break;
                    }
                  }
                  else
                  {
                    if (v25 >= *(void *)&v19) {
                      v25 %= *(void *)&v19;
                    }
                    if (v25 != v21) {
                      break;
                    }
                  }
                  unint64_t v23 = (uint64_t **)*v23;
                }
                while (v23);
              }
            }
          }
LABEL_47:
          if (!v14[7])
          {
            int8x8_t v27 = this[12];
            unint64_t v28 = (unint64_t)v14[1];
            uint8x8_t v29 = (uint8x8_t)vcnt_s8(v27);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(void *)&v27) {
                v28 %= *(void *)&v27;
              }
            }
            else
            {
              v28 &= *(void *)&v27 - 1;
            }
            int8x8_t v30 = this[11];
            uint64_t v31 = *(void ***)(*(void *)&v30 + 8 * v28);
            do
            {
              BOOL v32 = (int8x8_t *)v31;
              uint64_t v31 = (void **)*v31;
            }
            while (v31 != v14);
            if (v32 == v9) {
              goto LABEL_65;
            }
            unint64_t v33 = (unint64_t)v32[1];
            if (v29.u32[0] > 1uLL)
            {
              if (v33 >= *(void *)&v27) {
                v33 %= *(void *)&v27;
              }
            }
            else
            {
              v33 &= *(void *)&v27 - 1;
            }
            if (v33 != v28)
            {
LABEL_65:
              if (!*v14) {
                goto LABEL_66;
              }
              unint64_t v34 = *((void *)*v14 + 1);
              if (v29.u32[0] > 1uLL)
              {
                if (v34 >= *(void *)&v27) {
                  v34 %= *(void *)&v27;
                }
              }
              else
              {
                v34 &= *(void *)&v27 - 1;
              }
              if (v34 != v28) {
LABEL_66:
              }
                *(void *)(*(void *)&v30 + 8 * v28) = 0;
            }
            unint64_t v35 = *v14;
            if (*v14)
            {
              unint64_t v36 = v35[1];
              if (v29.u32[0] > 1uLL)
              {
                if (v36 >= *(void *)&v27) {
                  v36 %= *(void *)&v27;
                }
              }
              else
              {
                v36 &= *(void *)&v27 - 1;
              }
              if (v36 != v28)
              {
                *(void *)(*(void *)&this[11] + 8 * v36) = v32;
                unint64_t v35 = *v14;
              }
            }
            *BOOL v32 = (int8x8_t)v35;
            *uint8x8_t v14 = 0;
            --*(void *)&this[14];
            uint8x8_t v37 = v14[6];
            if (v37)
            {
              do
              {
                uint64_t v38 = (void *)*v37;
                operator delete(v37);
                uint8x8_t v37 = v38;
              }
              while (v38);
            }
            unint64_t v39 = *v18;
            *uint64_t v18 = 0;
            if (v39) {
              operator delete(v39);
            }
            operator delete(v14);
          }
          sub_1C4B77704((float *)v267, *(void *)(v4 + 16), *(void *)(v4 + 24), (_OWORD *)(v4 + 16));
          unint64_t v4 = *(void *)v4;
        }
        while (v4);
        unint64_t v5 = (unint64_t)__p[0];
      }
      int8x8_t v40 = this[7];
      if (v40)
      {
        uint8x8_t v41 = (uint8x8_t)vcnt_s8(v40);
        v41.i16[0] = vaddlv_u8(v41);
        if (v41.u32[0] > 1uLL)
        {
          unint64_t v42 = v5;
          if (v5 >= *(void *)&v40) {
            unint64_t v42 = v5 % *(void *)&v40;
          }
        }
        else
        {
          unint64_t v42 = (*(void *)&v40 - 1) & v5;
        }
        float v43 = *(void ***)(*(void *)&this[6] + 8 * v42);
        if (v43)
        {
          float v44 = *v43;
          if (*v43)
          {
            if (v41.u32[0] < 2uLL)
            {
              uint64_t v45 = *(void *)&v40 - 1;
              while (1)
              {
                uint64_t v47 = v44[1];
                if (v47 == v5)
                {
                  if (v44[2] == v5) {
                    goto LABEL_102;
                  }
                }
                else if ((v47 & v45) != v42)
                {
                  goto LABEL_104;
                }
                float v44 = (void *)*v44;
                if (!v44) {
                  goto LABEL_104;
                }
              }
            }
            do
            {
              unint64_t v46 = v44[1];
              if (v46 == v5)
              {
                if (v44[2] == v5)
                {
LABEL_102:
                  sub_1C4B77EBC((uint64_t)&v273, &this[6], v44);
                  if (v273.i64[0]) {
                    operator delete((void *)v273.i64[0]);
                  }
                  break;
                }
              }
              else
              {
                if (v46 >= *(void *)&v40) {
                  v46 %= *(void *)&v40;
                }
                if (v46 != v42) {
                  break;
                }
              }
              float v44 = (void *)*v44;
            }
            while (v44);
          }
        }
      }
LABEL_104:
      int8x8_t v48 = this[18];
      if (v48)
      {
        uint8x8_t v49 = (uint8x8_t)vcnt_s8(v48);
        v49.i16[0] = vaddlv_u8(v49);
        if (v49.u32[0] > 1uLL)
        {
          unint64_t v50 = v5;
          if (*(void *)&v48 <= v5) {
            unint64_t v50 = v5 % *(void *)&v48;
          }
        }
        else
        {
          unint64_t v50 = (*(void *)&v48 - 1) & v5;
        }
        int8x8_t v51 = *v8;
        float v52 = *(int8x8_t ***)(*(void *)v8 + 8 * v50);
        if (v52)
        {
          float v53 = *v52;
          if (*v52)
          {
            uint64_t v54 = *(void *)&v48 - 1;
            if (v49.u32[0] < 2uLL)
            {
              while (1)
              {
                int8x8_t v55 = v53[1];
                if (*(void *)&v55 == v5)
                {
                  if (*(void *)&v53[2] == v5) {
                    goto LABEL_125;
                  }
                }
                else if ((*(void *)&v55 & v54) != v50)
                {
                  goto LABEL_4;
                }
                float v53 = (int8x8_t *)*v53;
                if (!v53) {
                  goto LABEL_4;
                }
              }
            }
            do
            {
              unint64_t v56 = (unint64_t)v53[1];
              if (v56 == v5)
              {
                if (*(void *)&v53[2] == v5)
                {
LABEL_125:
                  if (v49.u32[0] > 1uLL)
                  {
                    if (*(void *)&v48 <= v5) {
                      v5 %= *(void *)&v48;
                    }
                  }
                  else
                  {
                    v5 &= v54;
                  }
                  float v57 = *(int8x8_t **)(*(void *)&v51 + 8 * v5);
                  do
                  {
                    float v58 = v57;
                    float v57 = (int8x8_t *)*v57;
                  }
                  while (v57 != v53);
                  if (v58 == v261) {
                    goto LABEL_142;
                  }
                  unint64_t v59 = (unint64_t)v58[1];
                  if (v49.u32[0] > 1uLL)
                  {
                    if (v59 >= *(void *)&v48) {
                      v59 %= *(void *)&v48;
                    }
                  }
                  else
                  {
                    v59 &= v54;
                  }
                  if (v59 != v5)
                  {
LABEL_142:
                    if (!*(void *)v53) {
                      goto LABEL_143;
                    }
                    unint64_t v60 = *(void *)(*(void *)v53 + 8);
                    if (v49.u32[0] > 1uLL)
                    {
                      if (v60 >= *(void *)&v48) {
                        v60 %= *(void *)&v48;
                      }
                    }
                    else
                    {
                      v60 &= v54;
                    }
                    if (v60 != v5) {
LABEL_143:
                    }
                      *(void *)(*(void *)&v51 + 8 * v5) = 0;
                  }
                  int8x8_t v61 = *v53;
                  if (*v53)
                  {
                    unint64_t v62 = *(void *)(*(void *)&v61 + 8);
                    if (v49.u32[0] > 1uLL)
                    {
                      if (v62 >= *(void *)&v48) {
                        v62 %= *(void *)&v48;
                      }
                    }
                    else
                    {
                      v62 &= v54;
                    }
                    if (v62 != v5)
                    {
                      *(void *)(*(void *)v8 + 8 * v62) = v58;
                      int8x8_t v61 = *v53;
                    }
                  }
                  *float v58 = v61;
                  *float v53 = 0;
                  --*(void *)&this[20];
                  float v63 = (unint64_t *)v53[5];
                  if (v63)
                  {
                    do
                    {
                      unint64_t v4 = *v63;
                      operator delete(v63);
                      float v63 = (unint64_t *)v4;
                    }
                    while (v4);
                  }
                  float v64 = (void *)v53[3];
                  v53[3] = 0;
                  if (v64) {
                    operator delete(v64);
                  }
                  operator delete(v53);
                  break;
                }
              }
              else
              {
                if (v56 >= *(void *)&v48) {
                  v56 %= *(void *)&v48;
                }
                if (v56 != v50) {
                  break;
                }
              }
              float v53 = (int8x8_t *)*v53;
            }
            while (v53);
          }
        }
      }
LABEL_4:
      unint64_t v7 = *(void *)v7;
    }
    while (v7);
  }
  *(_OWORD *)uint64_t v264 = 0u;
  *(_OWORD *)uint64_t v265 = 0u;
  int v266 = 1065353216;
  uint64_t k = a2;
  uint64_t v66 = (void *)a2[2];
  if (!v66) {
    goto LABEL_466;
  }
  uint64_t v258 = this + 11;
  double v260 = this + 13;
  uint64_t v254 = this + 17;
  uint64_t v255 = this + 19;
  do
  {
    float v67 = (float64x2_t *)v66[3];
    unint64_t v259 = v66[2];
    unint64_t v263 = v259;
    uint64_t v256 = v66;
    float v68 = (float64x2_t *)v66[4];
    *(_OWORD *)__p = 0u;
    *(_OWORD *)uint64_t v271 = 0u;
    float v272 = 1.0;
    float v69 = this + 11;
    if (v67 == v68) {
      goto LABEL_402;
    }
    do
    {
      int64x2_t v262 = vcvtq_s64_f64(vdivq_f64(*v67, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)*(void *)this), 0)));
      int64x2_t v273 = v262;
      sub_1C4B73530((uint64_t)this, 1, v273.i64);
      unint64_t v70 = v262.i64[0] ^ (2 * v262.i64[1]);
      unint64_t v7 = (unint64_t)__p[1];
      if (!__p[1]) {
        goto LABEL_209;
      }
      uint8x8_t v71 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v71.i16[0] = vaddlv_u8(v71);
      if (v71.u32[0] > 1uLL)
      {
        unint64_t v72 = v262.i64[0] ^ (2 * v262.i64[1]);
        if ((void *)v70 >= __p[1]) {
          unint64_t v72 = v70 % (unint64_t)__p[1];
        }
      }
      else
      {
        unint64_t v72 = ((unint64_t)__p[1] - 1) & v70;
      }
      float v73 = (void *)*((void *)__p[0] + v72);
      if (!v73 || (float v74 = (void *)*v73) == 0)
      {
LABEL_184:
        if (v71.u32[0] > 1uLL)
        {
          unint64_t v4 = v262.i64[0] ^ (2 * v262.i64[1]);
          if ((void *)v70 >= __p[1]) {
            unint64_t v4 = v70 % (unint64_t)__p[1];
          }
        }
        else
        {
          unint64_t v4 = ((unint64_t)__p[1] - 1) & v70;
        }
        float v79 = (void *)*((void *)__p[0] + v4);
        if (v79)
        {
          float v80 = (void *)*v79;
          if (v80)
          {
            if (v71.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v84 = v80[1];
                if (v84 == v70)
                {
                  if (v80[2] == v262.i64[0] && v80[3] == v262.i64[1]) {
                    goto LABEL_283;
                  }
                }
                else if ((v84 & ((uint64_t)__p[1] - 1)) != v4)
                {
                  goto LABEL_209;
                }
                float v80 = (void *)*v80;
                if (!v80) {
                  goto LABEL_209;
                }
              }
            }
            do
            {
              unint64_t v82 = v80[1];
              if (v82 == v70)
              {
                if (v80[2] == v262.i64[0] && v80[3] == v262.i64[1]) {
                  goto LABEL_283;
                }
              }
              else
              {
                if ((void *)v82 >= __p[1]) {
                  v82 %= (unint64_t)__p[1];
                }
                if (v82 != v4) {
                  break;
                }
              }
              float v80 = (void *)*v80;
            }
            while (v80);
          }
        }
LABEL_209:
        float v85 = (int64x2_t *)operator new(0x28uLL);
        v85->i64[0] = 0;
        v85->i64[1] = v70;
        v85[1] = v273;
        v85[2].i64[0] = 1;
        float v86 = (float)((unint64_t)v271[1] + 1);
        if (v7 && (float)(v272 * (float)v7) >= v86)
        {
          float v87 = __p[0];
          int v88 = (int64x2_t **)*((void *)__p[0] + v4);
          if (v88)
          {
LABEL_212:
            v85->i64[0] = (uint64_t)*v88;
            *int v88 = v85;
            goto LABEL_281;
          }
LABEL_262:
          v85->i64[0] = (uint64_t)v271[0];
          v271[0] = v85;
          v87[v4] = v271;
          float v107 = &v271[1];
          if (!v85->i64[0]) {
            goto LABEL_282;
          }
          unint64_t v110 = *(void *)(v85->i64[0] + 8);
          if ((v7 & (v7 - 1)) != 0)
          {
            if (v110 >= v7) {
              v110 %= v7;
            }
          }
          else
          {
            v110 &= v7 - 1;
          }
          *((void *)__p[0] + v110) = v85;
LABEL_281:
          float v107 = &v271[1];
          goto LABEL_282;
        }
        BOOL v89 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3) {
          BOOL v89 = 1;
        }
        unint64_t v90 = v89 | (2 * v7);
        unint64_t v91 = vcvtps_u32_f32(v86 / v272);
        if (v90 <= v91) {
          size_t prime = v91;
        }
        else {
          size_t prime = v90;
        }
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
          unint64_t v7 = (unint64_t)__p[1];
        }
        if (prime <= v7)
        {
          if (prime >= v7) {
            goto LABEL_260;
          }
          unint64_t v103 = vcvtps_u32_f32((float)(unint64_t)v271[1] / v272);
          if (v7 < 3 || (uint8x8_t v104 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v104.i16[0] = vaddlv_u8(v104), v104.u32[0] > 1uLL))
          {
            unint64_t v103 = std::__next_prime(v103);
          }
          else
          {
            uint64_t v105 = 1 << -(char)__clz(v103 - 1);
            if (v103 >= 2) {
              unint64_t v103 = v105;
            }
          }
          if (prime <= v103) {
            size_t prime = v103;
          }
          if (prime >= v7)
          {
            unint64_t v7 = (unint64_t)__p[1];
            uint64_t v109 = (uint64_t)__p[1] - 1;
            if (((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0)
            {
LABEL_273:
              if (v70 >= v7)
              {
                unint64_t v4 = v70 % v7;
                float v87 = __p[0];
                int v88 = (int64x2_t **)*((void *)__p[0] + v70 % v7);
                if (v88) {
                  goto LABEL_212;
                }
              }
              else
              {
                unint64_t v4 = v262.i64[0] ^ (2 * v262.i64[1]);
                float v87 = __p[0];
                int v88 = (int64x2_t **)*((void *)__p[0] + v70);
                if (v88) {
                  goto LABEL_212;
                }
              }
              goto LABEL_262;
            }
LABEL_261:
            unint64_t v4 = v109 & v70;
            float v87 = __p[0];
            int v88 = (int64x2_t **)*((void *)__p[0] + v4);
            if (v88) {
              goto LABEL_212;
            }
            goto LABEL_262;
          }
          if (!prime)
          {
            uint64_t v108 = __p[0];
            __p[0] = 0;
            if (v108) {
              operator delete(v108);
            }
            unint64_t v7 = 0;
            __p[1] = 0;
            uint64_t v109 = -1;
            goto LABEL_261;
          }
        }
        if (prime >> 61) {
          sub_1C4949AA8();
        }
        int v93 = operator new(8 * prime);
        float v94 = __p[0];
        __p[0] = v93;
        if (v94) {
          operator delete(v94);
        }
        uint64_t v95 = 0;
        __p[1] = (void *)prime;
        do
          *((void *)__p[0] + v95++) = 0;
        while (prime != v95);
        float v96 = (void **)v271[0];
        if (!v271[0])
        {
LABEL_272:
          unint64_t v7 = prime;
          uint64_t v109 = prime - 1;
          if ((prime & (prime - 1)) != 0) {
            goto LABEL_273;
          }
          goto LABEL_261;
        }
        size_t v97 = *((void *)v271[0] + 1);
        size_t v98 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          size_t v99 = v97 & v98;
          *((void *)__p[0] + v99) = v271;
          for (uint64_t i = *v96; *v96; uint64_t i = *v96)
          {
            size_t v101 = i[1] & v98;
            if (v101 == v99)
            {
              float v96 = (void **)i;
            }
            else if (*((void *)__p[0] + v101))
            {
              *float v96 = (void *)*i;
              uint64_t v102 = 8 * v101;
              *uint64_t i = **(void **)((char *)__p[0] + v102);
              **(void **)((char *)__p[0] + v102) = i;
            }
            else
            {
              *((void *)__p[0] + v101) = v96;
              float v96 = (void **)i;
              size_t v99 = v101;
            }
          }
          goto LABEL_272;
        }
        if (v97 < prime)
        {
          *((void *)__p[0] + v97) = v271;
          float v106 = *v96;
          if (*v96) {
            goto LABEL_267;
          }
          goto LABEL_259;
        }
        v97 %= prime;
        *((void *)__p[0] + v97) = v271;
        float v106 = *v96;
        if (!*v96)
        {
LABEL_259:
          unint64_t v7 = prime;
LABEL_260:
          uint64_t v109 = v7 - 1;
          if ((v7 & (v7 - 1)) != 0) {
            goto LABEL_273;
          }
          goto LABEL_261;
        }
        while (1)
        {
LABEL_267:
          size_t v112 = v106[1];
          if (v112 >= prime) {
            v112 %= prime;
          }
          if (v112 == v97) {
            goto LABEL_266;
          }
          if (*((void *)__p[0] + v112))
          {
            *float v96 = (void *)*v106;
            uint64_t v111 = 8 * v112;
            void *v106 = **(void **)((char *)__p[0] + v111);
            **(void **)((char *)__p[0] + v111) = v106;
            float v106 = v96;
LABEL_266:
            float v96 = (void **)v106;
            float v106 = (void *)*v106;
            if (!v106) {
              goto LABEL_272;
            }
          }
          else
          {
            *((void *)__p[0] + v112) = v96;
            float v96 = (void **)v106;
            float v106 = (void *)*v106;
            size_t v97 = v112;
            if (!v106) {
              goto LABEL_272;
            }
          }
        }
      }
      if (v71.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v78 = v74[1];
          if (v78 == v70)
          {
            if (v74[2] == v262.i64[0] && v74[3] == v262.i64[1]) {
              goto LABEL_247;
            }
          }
          else if ((v78 & ((uint64_t)__p[1] - 1)) != v72)
          {
            goto LABEL_184;
          }
          float v74 = (void *)*v74;
          if (!v74) {
            goto LABEL_184;
          }
        }
      }
      while (1)
      {
        unint64_t v76 = v74[1];
        if (v76 == v70) {
          break;
        }
        if ((void *)v76 >= __p[1]) {
          v76 %= (unint64_t)__p[1];
        }
        if (v76 != v72) {
          goto LABEL_184;
        }
LABEL_171:
        float v74 = (void *)*v74;
        if (!v74) {
          goto LABEL_184;
        }
      }
      if (v74[2] != v262.i64[0] || v74[3] != v262.i64[1]) {
        goto LABEL_171;
      }
LABEL_247:
      float v107 = (void **)(v74 + 4);
LABEL_282:
      void *v107 = (char *)*v107 + 1;
LABEL_283:
      ++v67;
    }
    while (v67 != v68);
    unint64_t v5 = (unint64_t)v271[0];
    if (v271[0])
    {
      while (1)
      {
        uint64_t v113 = *(void *)(v5 + 16);
        unint64_t v276 = v259;
        int8x8_t v114 = this[12];
        if (v114)
        {
          uint64_t v115 = *(void *)(v5 + 24);
          unint64_t v116 = v113 ^ (2 * v115);
          uint8x8_t v117 = (uint8x8_t)vcnt_s8(v114);
          v117.i16[0] = vaddlv_u8(v117);
          if (v117.u32[0] > 1uLL)
          {
            uint64_t v118 = v113 ^ (2 * v115);
            if (v116 >= *(void *)&v114) {
              uint64_t v118 = v116 % *(void *)&v114;
            }
          }
          else
          {
            uint64_t v118 = (*(void *)&v114 - 1) & v116;
          }
          int64_t v119 = *(void **)(*(void *)v69 + 8 * v118);
          if (v119)
          {
            BOOL v120 = (void *)*v119;
            if (v120)
            {
              if (v117.u32[0] < 2uLL)
              {
                uint64_t v121 = *(void *)&v114 - 1;
                while (1)
                {
                  uint64_t v125 = v120[1];
                  if (v125 == v116)
                  {
                    if (v120[2] == v113 && v120[3] == v115) {
                      goto LABEL_373;
                    }
                  }
                  else if ((v125 & v121) != v118)
                  {
                    goto LABEL_311;
                  }
                  BOOL v120 = (void *)*v120;
                  if (!v120) {
                    goto LABEL_311;
                  }
                }
              }
              do
              {
                unint64_t v123 = v120[1];
                if (v123 == v116)
                {
                  if (v120[2] == v113 && v120[3] == v115)
                  {
LABEL_373:
                    sub_1C4AA1490((uint64_t)(v120 + 4), &v276, &v276);
                    goto LABEL_401;
                  }
                }
                else
                {
                  if (v123 >= *(void *)&v114) {
                    v123 %= *(void *)&v114;
                  }
                  if (v123 != v118) {
                    break;
                  }
                }
                BOOL v120 = (void *)*v120;
              }
              while (v120);
            }
          }
        }
LABEL_311:
        int64x2_t v273 = 0u;
        long long v274 = 0u;
        int v275 = 1065353216;
        sub_1C4AA1490((uint64_t)&v273, &v276, &v276);
        uint64_t v126 = *(void *)(v5 + 16);
        uint64_t v127 = *(void *)(v5 + 24);
        unint64_t v7 = v126 ^ (2 * v127);
        unint64_t v128 = (unint64_t)this[12];
        if (v128)
        {
          uint8x8_t v129 = (uint8x8_t)vcnt_s8((int8x8_t)v128);
          v129.i16[0] = vaddlv_u8(v129);
          if (v129.u32[0] > 1uLL)
          {
            unint64_t v4 = v126 ^ (2 * v127);
            if (v7 >= v128) {
              unint64_t v4 = v7 % v128;
            }
          }
          else
          {
            unint64_t v4 = (v128 - 1) & v7;
          }
          float v130 = *(void **)(*(void *)v69 + 8 * v4);
          if (v130)
          {
            uint64_t v131 = (void *)*v130;
            if (v131)
            {
              if (v129.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v135 = v131[1];
                  if (v135 == v7)
                  {
                    if (v131[2] == v126 && v131[3] == v127) {
                      goto LABEL_397;
                    }
                  }
                  else if ((v135 & (v128 - 1)) != v4)
                  {
                    goto LABEL_337;
                  }
                  uint64_t v131 = (void *)*v131;
                  if (!v131) {
                    goto LABEL_337;
                  }
                }
              }
              do
              {
                unint64_t v133 = v131[1];
                if (v133 == v7)
                {
                  if (v131[2] == v126 && v131[3] == v127) {
                    goto LABEL_397;
                  }
                }
                else
                {
                  if (v133 >= v128) {
                    v133 %= v128;
                  }
                  if (v133 != v4) {
                    break;
                  }
                }
                uint64_t v131 = (void *)*v131;
              }
              while (v131);
            }
          }
        }
LABEL_337:
        unint64_t v136 = (int8x8_t *)operator new(0x48uLL);
        uint64_t v277 = v136;
        uint64_t v278 = this + 13;
        char v279 = 0;
        int8x8_t *v136 = 0;
        v136[1] = (int8x8_t)v7;
        long long v137 = *(_OWORD *)(v5 + 16);
        *(_OWORD *)v136[4].i8 = 0u;
        uint64_t v138 = (uint64_t)&v136[4];
        *(_OWORD *)v136[2].i8 = v137;
        *(_OWORD *)v136[6].i8 = 0u;
        v136[8].i32[0] = v275;
        size_t v139 = v273.u64[1];
        if (v273.i64[1] == 1) {
          break;
        }
        if ((v273.i64[1] & (v273.i64[1] - 1)) != 0)
        {
          size_t v139 = std::__next_prime(v273.u64[1]);
          int8x8_t v145 = v136[5];
          BOOL v146 = v139 >= *(void *)&v145;
          if (v139 > *(void *)&v145) {
            goto LABEL_339;
          }
        }
        else
        {
          int8x8_t v145 = 0;
          BOOL v146 = 1;
          if (v273.i64[1]) {
            goto LABEL_339;
          }
        }
        if (!v146)
        {
          unint64_t v151 = vcvtps_u32_f32((float)(unint64_t)v136[7] / *(float *)v136[8].i32);
          if (*(void *)&v145 < 3uLL
            || (uint8x8_t v152 = (uint8x8_t)vcnt_s8(v145), v152.i16[0] = vaddlv_u8(v152), v152.u32[0] > 1uLL))
          {
            unint64_t v151 = std::__next_prime(v151);
          }
          else
          {
            uint64_t v153 = 1 << -(char)__clz(v151 - 1);
            if (v151 >= 2) {
              unint64_t v151 = v153;
            }
          }
          if (v139 <= v151) {
            size_t v139 = v151;
          }
          if (v139 < *(void *)&v145) {
            goto LABEL_339;
          }
        }
LABEL_340:
        for (uint64_t j = (void *)v274; j; uint64_t j = (void *)*j)
          sub_1C4AA1490(v138, j + 2, j + 2);
        char v279 = 1;
        float v141 = (float)(unint64_t)(*(void *)&this[14] + 1);
        float v142 = *(float *)this[15].i32;
        float v69 = this + 11;
        if (v128 && (float)(v142 * (float)v128) >= v141)
        {
          uint64_t v143 = *(int8x8_t ***)(*(void *)v258 + 8 * v4);
          uint64_t v144 = v277;
          if (!v143) {
            goto LABEL_385;
          }
        }
        else
        {
          BOOL v147 = (v128 & (v128 - 1)) != 0;
          if (v128 < 3) {
            BOOL v147 = 1;
          }
          unint64_t v148 = v147 | (2 * v128);
          unint64_t v149 = vcvtps_u32_f32(v141 / v142);
          if (v148 <= v149) {
            size_t v150 = v149;
          }
          else {
            size_t v150 = v148;
          }
          if (v150 == 1)
          {
            size_t v150 = 2;
          }
          else if ((v150 & (v150 - 1)) != 0)
          {
            size_t v150 = std::__next_prime(v150);
          }
          int8x8_t v154 = this[12];
          if (v150 > *(void *)&v154) {
            goto LABEL_366;
          }
          if (v150 < *(void *)&v154)
          {
            unint64_t v155 = vcvtps_u32_f32((float)(unint64_t)this[14] / *(float *)this[15].i32);
            if (*(void *)&v154 < 3uLL
              || (uint8x8_t v156 = (uint8x8_t)vcnt_s8(v154), v156.i16[0] = vaddlv_u8(v156), v156.u32[0] > 1uLL))
            {
              unint64_t v155 = std::__next_prime(v155);
            }
            else
            {
              uint64_t v157 = 1 << -(char)__clz(v155 - 1);
              if (v155 >= 2) {
                unint64_t v155 = v157;
              }
            }
            if (v150 <= v155) {
              size_t v150 = v155;
            }
            if (v150 < *(void *)&v154) {
LABEL_366:
            }
              sub_1C4949C24((uint64_t)v258, v150);
          }
          unint64_t v128 = (unint64_t)this[12];
          unint64_t v158 = v128 - 1;
          if ((v128 & (v128 - 1)) != 0)
          {
            if (v7 >= v128)
            {
              unint64_t v4 = v7 % v128;
              uint64_t v143 = *(int8x8_t ***)(*(void *)v258 + 8 * (v7 % v128));
              uint64_t v144 = v277;
              if (!v143)
              {
LABEL_385:
                *uint64_t v144 = *v260;
                int8x8_t *v260 = (int8x8_t)v277;
                *(void *)(*(void *)v258 + 8 * v4) = v260;
                if (*v277)
                {
                  unint64_t v159 = *(void *)(*(void *)v277 + 8);
                  if ((v128 & (v128 - 1)) != 0)
                  {
                    if (v159 >= v128) {
                      v159 %= v128;
                    }
                  }
                  else
                  {
                    v159 &= v128 - 1;
                  }
                  *(void *)(*(void *)v258 + 8 * v159) = v277;
                }
                goto LABEL_396;
              }
            }
            else
            {
              unint64_t v4 = v7;
              uint64_t v143 = *(int8x8_t ***)(*(void *)v258 + 8 * v7);
              uint64_t v144 = v277;
              if (!v143) {
                goto LABEL_385;
              }
            }
          }
          else
          {
            unint64_t v4 = v158 & v7;
            uint64_t v143 = *(int8x8_t ***)(*(void *)v258 + 8 * (v158 & v7));
            uint64_t v144 = v277;
            if (!v143) {
              goto LABEL_385;
            }
          }
        }
        *uint64_t v144 = (int8x8_t)*v143;
        const char *v143 = v277;
LABEL_396:
        ++*(void *)&this[14];
LABEL_397:
        uint64_t v160 = (unint64_t *)v274;
        if ((void)v274)
        {
          do
          {
            unint64_t v4 = *v160;
            operator delete(v160);
            uint64_t v160 = (unint64_t *)v4;
          }
          while (v4);
        }
        uint64_t v161 = (void *)v273.i64[0];
        v273.i64[0] = 0;
        if (v161) {
          operator delete(v161);
        }
LABEL_401:
        sub_1C4B77704((float *)v267, *(void *)(v5 + 16), *(void *)(v5 + 24), (_OWORD *)(v5 + 16));
        unint64_t v5 = *(void *)v5;
        if (!v5) {
          goto LABEL_402;
        }
      }
      size_t v139 = 2;
LABEL_339:
      sub_1C4949C24(v138, v139);
      goto LABEL_340;
    }
LABEL_402:
    unint64_t v4 = (unint64_t)this[18];
    uint64_t k = a2;
    if (v4)
    {
      uint8x8_t v162 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
      v162.i16[0] = vaddlv_u8(v162);
      if (v162.u32[0] > 1uLL)
      {
        unint64_t v7 = v259;
        if (v4 <= v259) {
          unint64_t v7 = v259 % v4;
        }
      }
      else
      {
        unint64_t v7 = (v4 - 1) & v259;
      }
      uint64_t v163 = *(void **)(*(void *)v254 + 8 * v7);
      if (v163)
      {
        uint64_t v164 = (void *)*v163;
        if (v164)
        {
          if (v162.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v166 = v164[1];
              if (v166 == v259)
              {
                if (v164[2] == v259) {
                  goto LABEL_461;
                }
              }
              else if ((v166 & (v4 - 1)) != v7)
              {
                goto LABEL_422;
              }
              uint64_t v164 = (void *)*v164;
              if (!v164) {
                goto LABEL_422;
              }
            }
          }
          do
          {
            unint64_t v165 = v164[1];
            if (v165 == v259)
            {
              if (v164[2] == v259) {
                goto LABEL_461;
              }
            }
            else
            {
              if (v165 >= v4) {
                v165 %= v4;
              }
              if (v165 != v7) {
                break;
              }
            }
            uint64_t v164 = (void *)*v164;
          }
          while (v164);
        }
      }
    }
LABEL_422:
    uint64_t v167 = operator new(0x40uLL);
    v273.i64[0] = (uint64_t)v167;
    v273.i64[1] = (uint64_t)&this[19];
    LOBYTE(v274) = 0;
    *uint64_t v167 = 0;
    v167[1] = v259;
    v167[2] = v259;
    sub_1C4B772E8((uint64_t)(v167 + 3), (uint64_t)__p);
    LOBYTE(v274) = 1;
    float v168 = (float)(unint64_t)(*(void *)&this[20] + 1);
    float v169 = *(float *)this[21].i32;
    if (v4 && (float)(v169 * (float)v4) >= v168)
    {
      uint64_t v170 = *(int8x8_t **)(*(void *)v254 + 8 * v7);
      double v171 = (int8x8_t *)v273.i64[0];
      if (v170) {
        goto LABEL_425;
      }
LABEL_449:
      *double v171 = *v255;
      *uint64_t v255 = *(int8x8_t *)v273.i8;
      *(void *)(*(void *)v254 + 8 * v7) = v255;
      if (*(void *)v273.i64[0])
      {
        unint64_t v180 = *(void *)(*(void *)v273.i64[0] + 8);
        if ((v4 & (v4 - 1)) != 0)
        {
          if (v180 >= v4) {
            v180 %= v4;
          }
        }
        else
        {
          v180 &= v4 - 1;
        }
        *(void *)(*(void *)v254 + 8 * v180) = v273.i64[0];
      }
    }
    else
    {
      BOOL v172 = (v4 & (v4 - 1)) != 0;
      if (v4 < 3) {
        BOOL v172 = 1;
      }
      unint64_t v173 = v172 | (2 * v4);
      unint64_t v174 = vcvtps_u32_f32(v168 / v169);
      if (v173 <= v174) {
        unint64_t v5 = v174;
      }
      else {
        unint64_t v5 = v173;
      }
      if (v5 == 1)
      {
        unint64_t v5 = 2;
      }
      else if ((v5 & (v5 - 1)) != 0)
      {
        unint64_t v5 = std::__next_prime(v5);
      }
      int8x8_t v175 = this[18];
      if (v5 > *(void *)&v175) {
        goto LABEL_436;
      }
      if (v5 < *(void *)&v175)
      {
        unint64_t v176 = vcvtps_u32_f32((float)(unint64_t)this[20] / *(float *)this[21].i32);
        if (*(void *)&v175 < 3uLL
          || (uint8x8_t v177 = (uint8x8_t)vcnt_s8(v175), v177.i16[0] = vaddlv_u8(v177), v177.u32[0] > 1uLL))
        {
          unint64_t v176 = std::__next_prime(v176);
        }
        else
        {
          uint64_t v178 = 1 << -(char)__clz(v176 - 1);
          if (v176 >= 2) {
            unint64_t v176 = v178;
          }
        }
        if (v5 <= v176) {
          unint64_t v5 = v176;
        }
        if (v5 < *(void *)&v175) {
LABEL_436:
        }
          sub_1C4949C24((uint64_t)v254, v5);
      }
      unint64_t v4 = (unint64_t)this[18];
      unint64_t v179 = v4 - 1;
      if ((v4 & (v4 - 1)) != 0)
      {
        if (v4 <= v259)
        {
          unint64_t v7 = v259 % v4;
          uint64_t v170 = *(int8x8_t **)(*(void *)v254 + 8 * (v259 % v4));
          double v171 = (int8x8_t *)v273.i64[0];
          if (!v170) {
            goto LABEL_449;
          }
        }
        else
        {
          unint64_t v7 = v259;
          uint64_t v170 = *(int8x8_t **)(*(void *)v254 + 8 * v259);
          double v171 = (int8x8_t *)v273.i64[0];
          if (!v170) {
            goto LABEL_449;
          }
        }
      }
      else
      {
        unint64_t v7 = v179 & v259;
        uint64_t v170 = *(int8x8_t **)(*(void *)v254 + 8 * (v179 & v259));
        double v171 = (int8x8_t *)v273.i64[0];
        if (!v170) {
          goto LABEL_449;
        }
      }
LABEL_425:
      *double v171 = *v170;
      int8x8_t *v170 = *(int8x8_t *)v273.i8;
    }
    ++*(void *)&this[20];
LABEL_461:
    CGFloat v181 = (unint64_t *)v271[0];
    if (v271[0])
    {
      do
      {
        unint64_t v4 = *v181;
        operator delete(v181);
        CGFloat v181 = (unint64_t *)v4;
      }
      while (v4);
    }
    uint64_t v182 = __p[0];
    __p[0] = 0;
    if (v182) {
      operator delete(v182);
    }
    sub_1C4AA1490((uint64_t)v264, &v263, &v263);
    uint64_t v66 = (void *)*v256;
  }
  while (*v256);
LABEL_466:
  uint64_t v183 = v268[0];
  if (v268[0])
  {
    uint64_t v184 = this + 11;
    uint64_t v185 = this + 13;
    do
    {
      uint64_t v186 = v183[2];
      uint64_t v187 = v183[3];
      unint64_t v188 = v186 ^ (2 * v187);
      unint64_t v189 = (unint64_t)this[12];
      if (v189)
      {
        uint8x8_t v190 = (uint8x8_t)vcnt_s8((int8x8_t)v189);
        v190.i16[0] = vaddlv_u8(v190);
        if (v190.u32[0] > 1uLL)
        {
          unint64_t v5 = v186 ^ (2 * v187);
          if (v188 >= v189) {
            unint64_t v5 = v188 % v189;
          }
        }
        else
        {
          unint64_t v5 = (v189 - 1) & v188;
        }
        uint64_t v191 = *(void ***)(*(void *)v184 + 8 * v5);
        if (v191)
        {
          double v192 = (int8x8_t *)*v191;
          if (*v191)
          {
            if (v190.u32[0] < 2uLL)
            {
              while (1)
              {
                int8x8_t v196 = v192[1];
                if (*(void *)&v196 == v188)
                {
                  if (*(void *)&v192[2] == v186 && *(void *)&v192[3] == v187) {
                    goto LABEL_535;
                  }
                }
                else if ((*(void *)&v196 & (v189 - 1)) != v5)
                {
                  goto LABEL_495;
                }
                double v192 = (int8x8_t *)*v192;
                if (!v192) {
                  goto LABEL_495;
                }
              }
            }
            do
            {
              unint64_t v194 = (unint64_t)v192[1];
              if (v194 == v188)
              {
                if (*(void *)&v192[2] == v186 && *(void *)&v192[3] == v187) {
                  goto LABEL_535;
                }
              }
              else
              {
                if (v194 >= v189) {
                  v194 %= v189;
                }
                if (v194 != v5) {
                  break;
                }
              }
              double v192 = (int8x8_t *)*v192;
            }
            while (v192);
          }
        }
      }
LABEL_495:
      double v192 = (int8x8_t *)operator new(0x48uLL);
      v273.i64[0] = (uint64_t)v192;
      v273.i64[1] = (uint64_t)&this[13];
      *double v192 = 0;
      v192[1] = (int8x8_t)v188;
      long long v197 = *((_OWORD *)v183 + 1);
      *(_OWORD *)v192[4].i8 = 0u;
      *(_OWORD *)v192[6].i8 = 0u;
      *(_OWORD *)v192[2].i8 = v197;
      v192[8].i32[0] = 1065353216;
      LOBYTE(v274) = 1;
      float v198 = (float)(unint64_t)(*(void *)&this[14] + 1);
      float v199 = *(float *)this[15].i32;
      if (v189 && (float)(v199 * (float)v189) >= v198)
      {
        int8x8_t v200 = *v184;
        uint64_t v201 = *(int8x8_t ***)(*(void *)v184 + 8 * v5);
        if (v201) {
          goto LABEL_498;
        }
      }
      else
      {
        BOOL v202 = (v189 & (v189 - 1)) != 0;
        if (v189 < 3) {
          BOOL v202 = 1;
        }
        unint64_t v203 = v202 | (2 * v189);
        unint64_t v204 = vcvtps_u32_f32(v198 / v199);
        if (v203 <= v204) {
          size_t v205 = v204;
        }
        else {
          size_t v205 = v203;
        }
        if (v205 == 1)
        {
          size_t v205 = 2;
        }
        else if ((v205 & (v205 - 1)) != 0)
        {
          size_t v205 = std::__next_prime(v205);
          unint64_t v189 = (unint64_t)this[12];
        }
        if (v205 > v189) {
          goto LABEL_509;
        }
        if (v205 < v189)
        {
          unint64_t v206 = vcvtps_u32_f32((float)(unint64_t)this[14] / *(float *)this[15].i32);
          if (v189 < 3
            || (uint8x8_t v207 = (uint8x8_t)vcnt_s8((int8x8_t)v189), v207.i16[0] = vaddlv_u8(v207), v207.u32[0] > 1uLL))
          {
            unint64_t v206 = std::__next_prime(v206);
          }
          else
          {
            uint64_t v208 = 1 << -(char)__clz(v206 - 1);
            if (v206 >= 2) {
              unint64_t v206 = v208;
            }
          }
          if (v205 <= v206) {
            size_t v205 = v206;
          }
          if (v205 < v189) {
LABEL_509:
          }
            sub_1C4949C24((uint64_t)&this[11], v205);
        }
        unint64_t v189 = (unint64_t)this[12];
        unint64_t v209 = v189 - 1;
        if ((v189 & (v189 - 1)) != 0)
        {
          if (v188 >= v189)
          {
            unint64_t v5 = v188 % v189;
            int8x8_t v200 = *v184;
            uint64_t v201 = *(int8x8_t ***)(*(void *)v184 + 8 * (v188 % v189));
            if (v201)
            {
LABEL_498:
              *double v192 = (int8x8_t)*v201;
              goto LABEL_533;
            }
          }
          else
          {
            unint64_t v5 = v188;
            int8x8_t v200 = *v184;
            uint64_t v201 = *(int8x8_t ***)(*(void *)v184 + 8 * v188);
            if (v201) {
              goto LABEL_498;
            }
          }
        }
        else
        {
          unint64_t v5 = v209 & v188;
          int8x8_t v200 = *v184;
          uint64_t v201 = *(int8x8_t ***)(*(void *)v184 + 8 * (v209 & v188));
          if (v201) {
            goto LABEL_498;
          }
        }
      }
      *double v192 = *v185;
      *uint64_t v185 = (int8x8_t)v192;
      *(void *)(*(void *)&v200 + 8 * v5) = v185;
      if (!*(void *)v192) {
        goto LABEL_534;
      }
      unint64_t v210 = *(void *)(*(void *)v192 + 8);
      if ((v189 & (v189 - 1)) != 0)
      {
        if (v210 >= v189) {
          v210 %= v189;
        }
      }
      else
      {
        v210 &= v189 - 1;
      }
      uint64_t v201 = (int8x8_t **)(*(void *)v184 + 8 * v210);
LABEL_533:
      *uint64_t v201 = v192;
LABEL_534:
      ++*(void *)&this[14];
LABEL_535:
      CGFloat v211 = (void *)v192[6];
      for (k = a2; v211; CGFloat v211 = (void *)*v211)
      {
        unint64_t v212 = v211[2];
        v273.i64[0] = v212;
        int8x8_t v213 = (int8x8_t)a2[1];
        if (v213)
        {
          uint8x8_t v214 = (uint8x8_t)vcnt_s8(v213);
          v214.i16[0] = vaddlv_u8(v214);
          if (v214.u32[0] > 1uLL)
          {
            unint64_t v215 = v212;
            if (v212 >= *(void *)&v213) {
              unint64_t v215 = v212 % *(void *)&v213;
            }
          }
          else
          {
            unint64_t v215 = (*(void *)&v213 - 1) & v212;
          }
          uint64_t v216 = *(void **)(*a2 + 8 * v215);
          if (v216)
          {
            uint64_t v217 = (void *)*v216;
            if (v217)
            {
              if (v214.u32[0] < 2uLL)
              {
                uint64_t v218 = *(void *)&v213 - 1;
                while (1)
                {
                  uint64_t v220 = v217[1];
                  if (v212 == v220)
                  {
                    if (v217[2] == v212) {
                      goto LABEL_557;
                    }
                  }
                  else if ((v220 & v218) != v215)
                  {
                    goto LABEL_556;
                  }
                  uint64_t v217 = (void *)*v217;
                  if (!v217) {
                    goto LABEL_556;
                  }
                }
              }
              do
              {
                unint64_t v219 = v217[1];
                if (v212 == v219)
                {
                  if (v217[2] == v212) {
                    goto LABEL_557;
                  }
                }
                else
                {
                  if (v219 >= *(void *)&v213) {
                    v219 %= *(void *)&v213;
                  }
                  if (v219 != v215) {
                    break;
                  }
                }
                uint64_t v217 = (void *)*v217;
              }
              while (v217);
            }
          }
        }
LABEL_556:
        sub_1C4AA1490((uint64_t)v264, (unint64_t *)&v273, &v273);
LABEL_557:
        ;
      }
      uint64_t v183 = (void *)*v183;
    }
    while (v183);
  }
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  uint64_t v221 = (void **)v265[0];
  if (v265[0])
  {
    do
    {
      __p[0] = v221[2];
      isHighDensityIteuint64_t m = CHCanvasHeatmap::_isHighDensityItem(this, (unint64_t)__p[0]);
      int8x8_t v223 = this[7];
      if (v223)
      {
        uint8x8_t v224 = (uint8x8_t)vcnt_s8(v223);
        v224.i16[0] = vaddlv_u8(v224);
        if (v224.u32[0] > 1uLL)
        {
          unint64_t v225 = (unint64_t)__p[0];
          if (__p[0] >= (void *)*(void *)&v223) {
            unint64_t v225 = (unint64_t)__p[0] % *(void *)&v223;
          }
        }
        else
        {
          unint64_t v225 = (*(void *)&v223 - 1) & (uint64_t)__p[0];
        }
        uint64_t v226 = *(uint64_t ****)(*(void *)&this[6] + 8 * v225);
        if (v226)
        {
          uint64_t v227 = *v226;
          if (*v226)
          {
            if (v224.u32[0] < 2uLL)
            {
              uint64_t v228 = *(void *)&v223 - 1;
              while (1)
              {
                unint64_t v230 = (unint64_t)v227[1];
                if ((void *)v230 == __p[0])
                {
                  if (v227[2] == __p[0]) {
                    goto LABEL_605;
                  }
                }
                else if ((v230 & v228) != v225)
                {
                  goto LABEL_583;
                }
                uint64_t v227 = (uint64_t **)*v227;
                if (!v227) {
                  goto LABEL_583;
                }
              }
            }
            do
            {
              unint64_t v229 = (unint64_t)v227[1];
              if ((void *)v229 == __p[0])
              {
                if (v227[2] == __p[0])
                {
LABEL_605:
                  if (!isHighDensityItem)
                  {
                    sub_1C4B77EBC((uint64_t)&v273, &this[6], v227);
                    if (v273.i64[0]) {
                      operator delete((void *)v273.i64[0]);
                    }
                    int8x8_t v239 = (int8x8_t)k[1];
                    if (v239)
                    {
                      uint8x8_t v240 = (uint8x8_t)vcnt_s8(v239);
                      v240.i16[0] = vaddlv_u8(v240);
                      if (v240.u32[0] > 1uLL)
                      {
                        unint64_t v241 = (unint64_t)__p[0];
                        if (__p[0] >= (void *)*(void *)&v239) {
                          unint64_t v241 = (unint64_t)__p[0] % *(void *)&v239;
                        }
                      }
                      else
                      {
                        unint64_t v241 = (*(void *)&v239 - 1) & (uint64_t)__p[0];
                      }
                      uint64_t v242 = *(uint64_t ****)(*k + 8 * v241);
                      if (v242)
                      {
                        char v243 = *v242;
                        if (v243)
                        {
                          if (v240.u32[0] < 2uLL)
                          {
                            uint64_t v244 = *(void *)&v239 - 1;
                            while (1)
                            {
                              unint64_t v246 = (unint64_t)v243[1];
                              if (__p[0] == (void *)v246)
                              {
                                if (v243[2] == __p[0]) {
                                  goto LABEL_562;
                                }
                              }
                              else if ((v246 & v244) != v241)
                              {
                                goto LABEL_561;
                              }
                              char v243 = (uint64_t **)*v243;
                              if (!v243) {
                                goto LABEL_561;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v245 = (unint64_t)v243[1];
                            if (__p[0] == (void *)v245)
                            {
                              if (v243[2] == __p[0]) {
                                goto LABEL_562;
                              }
                            }
                            else
                            {
                              if (v245 >= *(void *)&v239) {
                                v245 %= *(void *)&v239;
                              }
                              if (v245 != v241) {
                                break;
                              }
                            }
                            char v243 = (uint64_t **)*v243;
                          }
                          while (v243);
                        }
                      }
                    }
LABEL_561:
                    sub_1C4AA1490(a4, (unint64_t *)__p, __p);
                  }
                  goto LABEL_562;
                }
              }
              else
              {
                if (v229 >= *(void *)&v223) {
                  v229 %= *(void *)&v223;
                }
                if (v229 != v225) {
                  break;
                }
              }
              uint64_t v227 = (uint64_t **)*v227;
            }
            while (v227);
          }
        }
      }
LABEL_583:
      if (isHighDensityItem)
      {
        sub_1C4AA1490((uint64_t)&this[6], (unint64_t *)__p, __p);
        int8x8_t v231 = (int8x8_t)k[1];
        if (v231)
        {
          uint8x8_t v232 = (uint8x8_t)vcnt_s8(v231);
          v232.i16[0] = vaddlv_u8(v232);
          if (v232.u32[0] > 1uLL)
          {
            unint64_t v233 = (unint64_t)__p[0];
            if (__p[0] >= (void *)*(void *)&v231) {
              unint64_t v233 = (unint64_t)__p[0] % *(void *)&v231;
            }
          }
          else
          {
            unint64_t v233 = (*(void *)&v231 - 1) & (uint64_t)__p[0];
          }
          uint64_t v234 = *(uint64_t ****)(*k + 8 * v233);
          if (v234)
          {
            uint64_t v235 = *v234;
            if (v235)
            {
              if (v232.u32[0] < 2uLL)
              {
                uint64_t v236 = *(void *)&v231 - 1;
                while (1)
                {
                  unint64_t v238 = (unint64_t)v235[1];
                  if (__p[0] == (void *)v238)
                  {
                    if (v235[2] == __p[0]) {
                      goto LABEL_562;
                    }
                  }
                  else if ((v238 & v236) != v233)
                  {
                    goto LABEL_561;
                  }
                  uint64_t v235 = (uint64_t **)*v235;
                  if (!v235) {
                    goto LABEL_561;
                  }
                }
              }
              while (1)
              {
                unint64_t v237 = (unint64_t)v235[1];
                if (__p[0] == (void *)v237)
                {
                  if (v235[2] == __p[0]) {
                    goto LABEL_562;
                  }
                }
                else
                {
                  if (v237 >= *(void *)&v231) {
                    v237 %= *(void *)&v231;
                  }
                  if (v237 != v233) {
                    goto LABEL_561;
                  }
                }
                uint64_t v235 = (uint64_t **)*v235;
                if (!v235) {
                  goto LABEL_561;
                }
              }
            }
          }
        }
        goto LABEL_561;
      }
LABEL_562:
      uint64_t v221 = (void **)*v221;
    }
    while (v221);
    char v247 = v265[0];
    if (v265[0])
    {
      do
      {
        char v248 = (void *)*v247;
        operator delete(v247);
        char v247 = v248;
      }
      while (v248);
    }
  }
  double v249 = v264[0];
  v264[0] = 0;
  if (v249) {
    operator delete(v249);
  }
  uint64_t v250 = v268[0];
  if (v268[0])
  {
    do
    {
      CGFloat v251 = (void *)*v250;
      operator delete(v250);
      uint64_t v250 = v251;
    }
    while (v251);
  }
  BOOL v252 = v267[0];
  v267[0] = 0;
  if (v252) {
    operator delete(v252);
  }
}

void sub_1C4B75B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_1C4B77278(v35 - 176);
  sub_1C498D2E0((uint64_t)&a35);
  sub_1C498D2E0((uint64_t)&a23);
  sub_1C498D2E0((uint64_t)&a29);
  _Unwind_Resume(a1);
}

BOOL CHCanvasHeatmap::isHighDensityItemID(int8x8_t *this, unint64_t a2)
{
  int8x8_t v2 = this[7];
  if (!*(void *)&v2)
  {
    unint64_t v5 = 0;
    return v5 != 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  unint64_t v5 = *(void **)(*(void *)&this[6] + 8 * v4);
  if (!v5) {
    return v5 != 0;
  }
  unint64_t v5 = (void *)*v5;
  if (!v5) {
    return v5 != 0;
  }
  if (v3.u32[0] >= 2uLL)
  {
    do
    {
      unint64_t v8 = v5[1];
      if (v8 == a2)
      {
        if (v5[2] == a2) {
          return v5 != 0;
        }
      }
      else
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
        if (v8 != v4) {
          return 0;
        }
      }
      unint64_t v5 = (void *)*v5;
    }
    while (v5);
    return v5 != 0;
  }
  uint64_t v7 = *(void *)&v2 - 1;
  while (1)
  {
    uint64_t v9 = v5[1];
    if (v9 == a2)
    {
      if (v5[2] == a2) {
        return v5 != 0;
      }
      goto LABEL_20;
    }
    if ((v9 & v7) != v4) {
      return 0;
    }
LABEL_20:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      return v5 != 0;
    }
  }
}

uint64_t CHCanvasHeatmap::computeMinMaxGridCoordinates(uint64_t this, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, unint64_t *a6)
{
  *a6 = 0;
  *a2 = 0x7FFFFFFFLL;
  *a4 = 0x7FFFFFFFLL;
  *a3 = 0;
  *a5 = 0;
  for (uint64_t i = *(void **)(this + 24); i; uint64_t i = (void *)*i)
  {
    unint64_t v7 = *a6;
    if (*a6 <= i[4]) {
      unint64_t v7 = i[4];
    }
    *a6 = v7;
    uint64_t v8 = i[2];
    if (v8 >= *a2) {
      uint64_t v8 = *a2;
    }
    *a2 = v8;
    uint64_t v9 = i[3];
    if (v9 >= *a4) {
      uint64_t v9 = *a4;
    }
    *a4 = v9;
    uint64_t v10 = *a3;
    if (*a3 <= i[2]) {
      uint64_t v10 = i[2];
    }
    *a3 = v10;
    uint64_t v11 = *a5;
    if (*a5 <= i[3]) {
      uint64_t v11 = i[3];
    }
    *a5 = v11;
  }
  return this;
}

BOOL sub_1C4B75DB4(unint64_t *a1, void *a2, CGRect *a3, int a4)
{
  double v5 = (double)(uint64_t)(*a1 * *a2);
  double v6 = (double)(uint64_t)(*a1 * a2[1]);
  double v7 = (double)*a1;
  v14.origin.double x = v5;
  v14.origin.CGFloat y = v6;
  v14.size.double width = v7;
  v14.size.CGFloat height = v7;
  CGRect v15 = CGRectIntersection(v14, *a3);
  if (!a4) {
    return !CGRectEqualToRect(v15, *MEMORY[0x1E4F1DB28]);
  }
  double v8 = v5;
  double v9 = v6;
  double v10 = v7;
  double v11 = v7;
  return CGRectEqualToRect(v15, *(CGRect *)&v8);
}

unint64_t *CHCanvasHeatmap::itemIDsInCellsIntersectingRectangleRegion@<X0>(unint64_t *this@<X0>, CGRect *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  double v5 = (void *)this[13];
  if (v5)
  {
    double v8 = this;
    do
    {
      this = (unint64_t *)sub_1C4B75DB4(v8, v5 + 2, a2, a3);
      if (this)
      {
        for (uint64_t i = (void *)v5[6]; i; uint64_t i = (void *)*i)
          this = sub_1C4AA1490(a4, i + 2, i + 2);
      }
      double v5 = (void *)*v5;
    }
    while (v5);
  }
  return this;
}

void sub_1C4B75F08(_Unwind_Exception *a1)
{
  sub_1C498D2E0(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B75F1C(_Unwind_Exception *a1)
{
  sub_1C498D2E0(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B75F30(void **__p)
{
  do
  {
    int8x8_t v2 = (void **)*__p;
    uint8x8_t v3 = __p[6];
    if (v3)
    {
      do
      {
        unint64_t v4 = (void *)*v3;
        operator delete(v3);
        uint8x8_t v3 = v4;
      }
      while (v4);
    }
    double v5 = __p[4];
    __p[4] = 0;
    if (v5) {
      operator delete(v5);
    }
    operator delete(__p);
    __p = v2;
  }
  while (v2);
}

void sub_1C4B75F9C(void **__p)
{
  do
  {
    int8x8_t v2 = (void **)*__p;
    uint8x8_t v3 = __p[5];
    if (v3)
    {
      do
      {
        unint64_t v4 = (void *)*v3;
        operator delete(v3);
        uint8x8_t v3 = v4;
      }
      while (v4);
    }
    double v5 = __p[3];
    __p[3] = 0;
    if (v5) {
      operator delete(v5);
    }
    operator delete(__p);
    __p = v2;
  }
  while (v2);
}

uint64_t sub_1C4B76008(uint64_t a1)
{
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint8x8_t v3 = (void *)v2[6];
      if (v3)
      {
        do
        {
          unint64_t v4 = (void *)*v3;
          operator delete(v3);
          uint8x8_t v3 = v4;
        }
        while (v4);
      }
      double v5 = (void *)v2[4];
      v2[4] = 0;
      if (v5) {
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1C4B76078(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_1C4949C24(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_1C4AA1490(a1, i + 2, i + 2);
  return a1;
}

void sub_1C4B76194(_Unwind_Exception *a1)
{
  sub_1C498D2E0(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B761A8(_Unwind_Exception *a1)
{
  sub_1C498D2E0(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B761BC(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_7;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  uint8x8_t v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_OWORD *)v8 + 1) = *((_OWORD *)a2 + 1);
      v8[4] = a2[4];
      uint64_t v9 = (uint64_t *)*v8;
      sub_1C4B762FC((uint64_t)a1, v8);
      a2 = (uint64_t *)*a2;
      uint8x8_t v8 = v9;
      if (!v9) {
        goto LABEL_7;
      }
    }
    do
    {
      unint64_t v12 = (uint64_t *)*v8;
      operator delete(v8);
      uint8x8_t v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      double v10 = operator new(0x28uLL);
      *(void *)double v10 = 0;
      uint64_t v11 = a2[4];
      v10[1] = *((_OWORD *)a2 + 1);
      *((void *)v10 + 4) = v11;
      *((void *)v10 + 1) = *((void *)v10 + 2) ^ (2 * *((void *)v10 + 3));
      sub_1C4B762FC((uint64_t)a1, v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_1C4B762B4(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    int8x8_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1C4B762D4(_Unwind_Exception *a1)
{
}

void sub_1C4B762E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B762FC(uint64_t a1, void *a2)
{
  unint64_t v4 = a2[2] ^ (2 * a2[3]);
  a2[1] = v4;
  unint64_t v5 = *(void *)(a1 + 8);
  float v6 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v7 = *(float *)(a1 + 32);
  if (v5 && (float)(v7 * (float)v5) >= v6) {
    goto LABEL_88;
  }
  BOOL v8 = 1;
  if (v5 >= 3) {
    BOOL v8 = (v5 & (v5 - 1)) != 0;
  }
  unint64_t v9 = v8 | (2 * v5);
  unint64_t v10 = vcvtps_u32_f32(v6 / v7);
  if (v9 <= v10) {
    int8x8_t prime = (int8x8_t)v10;
  }
  else {
    int8x8_t prime = (int8x8_t)v9;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v5 = *(void *)(a1 + 8);
  }
  if (*(void *)&prime <= v5)
  {
    if (*(void *)&prime >= v5) {
      goto LABEL_88;
    }
    size_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      size_t v48 = std::__next_prime(v26);
      if (*(void *)&prime <= v48) {
        int8x8_t prime = (int8x8_t)v48;
      }
      if (*(void *)&prime >= v5)
      {
LABEL_41:
        unint64_t v5 = *(void *)(a1 + 8);
        uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
        v29.i16[0] = vaddlv_u8(v29);
        unint64_t v30 = v29.u32[0];
        if (v29.u32[0] >= 2uLL) {
          goto LABEL_47;
        }
        goto LABEL_89;
      }
    }
    else
    {
      uint64_t v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2) {
        size_t v26 = v28;
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v5) {
        goto LABEL_41;
      }
    }
    if (!*(void *)&prime)
    {
      uint8x8_t v49 = *(void **)a1;
      *(void *)a1 = 0;
      if (v49) {
        operator delete(v49);
      }
      unint64_t v5 = 0;
      *(void *)(a1 + 8) = 0;
      uint8x8_t v50 = (uint8x8_t)vcnt_s8(0);
      v50.i16[0] = vaddlv_u8(v50);
      unint64_t v30 = v50.u32[0];
      if (v50.u32[0] >= 2uLL) {
        goto LABEL_47;
      }
      goto LABEL_89;
    }
  }
  if (*(void *)&prime >> 61) {
    sub_1C4949AA8();
  }
  unint64_t v12 = operator new(8 * *(void *)&prime);
  unint64_t v13 = *(void **)a1;
  *(void *)a1 = v12;
  if (v13) {
    operator delete(v13);
  }
  uint64_t v14 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v14++) = 0;
  while (*(void *)&prime != v14);
  uint64_t v16 = a1 + 16;
  CGRect v15 = *(void **)(a1 + 16);
  if (v15)
  {
    unint64_t v17 = v15[1];
    uint64_t v18 = *(void *)&prime - 1;
    if ((*(void *)&prime & (*(void *)&prime - 1)) == 0)
    {
      uint64_t v19 = v17 & v18;
      *(void *)(*(void *)a1 + 8 * v19) = v16;
      uint8x8_t v20 = (void *)*v15;
      if (!*v15) {
        goto LABEL_46;
      }
      do
      {
        uint64_t v21 = v20[1] & v18;
        if (v21 == v19)
        {
          CGRect v15 = v20;
        }
        else
        {
          unint64_t v22 = v20;
          if (*(void *)(*(void *)a1 + 8 * v21))
          {
            do
            {
              unint64_t v23 = v22;
              unint64_t v22 = (void *)*v22;
              if (!v22) {
                break;
              }
            }
            while (v20[2] == v22[2] && v20[3] == v22[3]);
            *CGRect v15 = v22;
            uint64_t v25 = 8 * v21;
            *unint64_t v23 = **(void **)(*(void *)a1 + v25);
            **(void **)(*(void *)a1 + v25) = v20;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v21) = v15;
            CGRect v15 = v20;
            uint64_t v19 = v21;
          }
        }
        uint8x8_t v20 = (void *)*v15;
      }
      while (*v15);
      unint64_t v5 = (unint64_t)prime;
LABEL_88:
      uint8x8_t v51 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
      v51.i16[0] = vaddlv_u8(v51);
      unint64_t v30 = v51.u32[0];
      if (v51.u32[0] >= 2uLL) {
        goto LABEL_47;
      }
      goto LABEL_89;
    }
    if (v17 >= *(void *)&prime) {
      v17 %= *(void *)&prime;
    }
    *(void *)(*(void *)a1 + 8 * v17) = v16;
    for (uint64_t i = (void *)*v15; *v15; uint64_t i = (void *)*v15)
    {
      unint64_t v42 = i[1];
      if (v42 >= *(void *)&prime) {
        v42 %= *(void *)&prime;
      }
      if (v42 == v17)
      {
        CGRect v15 = i;
      }
      else
      {
        float v43 = i;
        if (*(void *)(*(void *)a1 + 8 * v42))
        {
          do
          {
            float v44 = v43;
            float v43 = (void *)*v43;
            if (!v43) {
              break;
            }
          }
          while (i[2] == v43[2] && i[3] == v43[3]);
          *CGRect v15 = v43;
          uint64_t v46 = 8 * v42;
          *float v44 = **(void **)(*(void *)a1 + v46);
          **(void **)(*(void *)a1 + v46) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v42) = v15;
          CGRect v15 = i;
          unint64_t v17 = v42;
        }
      }
    }
  }
LABEL_46:
  unint64_t v5 = (unint64_t)prime;
  uint8x8_t v32 = (uint8x8_t)vcnt_s8(prime);
  v32.i16[0] = vaddlv_u8(v32);
  unint64_t v30 = v32.u32[0];
  if (v32.u32[0] >= 2uLL)
  {
LABEL_47:
    unint64_t v33 = v4;
    if (v5 <= v4) {
      unint64_t v33 = v4 % v5;
    }
    unint64_t v34 = *(void **)(*(void *)a1 + 8 * v33);
    if (!v34)
    {
      unint64_t v39 = 0;
      unint64_t v47 = a2[1];
      goto LABEL_103;
    }
    int v35 = 0;
    while (1)
    {
      unint64_t v39 = v34;
      unint64_t v34 = (void *)*v34;
      if (!v34) {
        goto LABEL_102;
      }
      unint64_t v40 = v34[1];
      unint64_t v41 = v40;
      if (v40 >= v5) {
        unint64_t v41 = v40 % v5;
      }
      if (v41 != v33) {
        goto LABEL_102;
      }
      if (v40 == v4)
      {
        BOOL v37 = v34[2] == a2[2] && v34[3] == a2[3];
        int v38 = v35 & !v37;
        v35 |= v37;
        if (v38 == 1) {
          goto LABEL_102;
        }
      }
      else if ((v35 & 1) == 1)
      {
        goto LABEL_102;
      }
    }
  }
LABEL_89:
  uint64_t v52 = (v5 - 1) & v4;
  float v53 = *(void **)(*(void *)a1 + 8 * v52);
  if (!v53)
  {
    unint64_t v39 = 0;
    unint64_t v47 = a2[1];
LABEL_114:
    v47 &= v5 - 1;
    if (v39) {
      goto LABEL_106;
    }
LABEL_115:
    *a2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = a2;
    *(void *)(*(void *)a1 + 8 * v47) = a1 + 16;
    if (!*a2) {
      goto LABEL_121;
    }
    unint64_t v59 = *(void *)(*a2 + 8);
    if (v30 > 1)
    {
      if (v59 >= v5) {
        v59 %= v5;
      }
    }
    else
    {
      v59 &= v5 - 1;
    }
LABEL_120:
    *(void *)(*(void *)a1 + 8 * v59) = a2;
    goto LABEL_121;
  }
  char v54 = 0;
  while (1)
  {
    unint64_t v39 = v53;
    float v53 = (void *)*v53;
    if (!v53) {
      break;
    }
    uint64_t v58 = v53[1];
    if ((v58 & (v5 - 1)) != v52) {
      break;
    }
    if (v58 == v4)
    {
      BOOL v56 = v53[2] == a2[2] && v53[3] == a2[3];
      char v57 = v54 & !v56;
      v54 |= v56;
      if (v57) {
        break;
      }
    }
    else if (v54)
    {
      break;
    }
  }
LABEL_102:
  unint64_t v47 = a2[1];
  if (v30 <= 1) {
    goto LABEL_114;
  }
LABEL_103:
  if (v47 >= v5) {
    v47 %= v5;
  }
  if (!v39) {
    goto LABEL_115;
  }
LABEL_106:
  *a2 = *v39;
  *unint64_t v39 = a2;
  if (*a2)
  {
    unint64_t v59 = *(void *)(*a2 + 8);
    if (v30 > 1)
    {
      if (v59 >= v5) {
        v59 %= v5;
      }
    }
    else
    {
      v59 &= v5 - 1;
    }
    if (v59 != v47) {
      goto LABEL_120;
    }
  }
LABEL_121:
  ++*(void *)(a1 + 24);
}

void sub_1C4B76874(void *a1, void *a2, void *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_7;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  BOOL v8 = (void *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[2] = a2[2];
      unint64_t v9 = (void *)*v8;
      sub_1C4B76998((uint64_t)a1, v8);
      a2 = (void *)*a2;
      BOOL v8 = v9;
      if (!v9) {
        goto LABEL_7;
      }
    }
    do
    {
      unint64_t v12 = (void *)*v8;
      operator delete(v8);
      BOOL v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      unint64_t v10 = operator new(0x18uLL);
      *unint64_t v10 = 0;
      uint64_t v11 = a2[2];
      v10[1] = v11;
      v10[2] = v11;
      sub_1C4B76998((uint64_t)a1, v10);
      a2 = (void *)*a2;
    }
  }
}

void sub_1C4B76950(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    int8x8_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1C4B76970(_Unwind_Exception *a1)
{
}

void sub_1C4B76984(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B76998(uint64_t a1, void *a2)
{
  unint64_t v4 = a2[2];
  a2[1] = v4;
  unint64_t v5 = *(void *)(a1 + 8);
  float v6 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v7 = *(float *)(a1 + 32);
  if (v5 && (float)(v7 * (float)v5) >= v6) {
    goto LABEL_76;
  }
  BOOL v8 = 1;
  if (v5 >= 3) {
    BOOL v8 = (v5 & (v5 - 1)) != 0;
  }
  unint64_t v9 = v8 | (2 * v5);
  unint64_t v10 = vcvtps_u32_f32(v6 / v7);
  if (v9 <= v10) {
    int8x8_t prime = (int8x8_t)v10;
  }
  else {
    int8x8_t prime = (int8x8_t)v9;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v5 = *(void *)(a1 + 8);
  }
  if (*(void *)&prime <= v5)
  {
    if (*(void *)&prime >= v5) {
      goto LABEL_76;
    }
    size_t v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      size_t v45 = std::__next_prime(v25);
      if (*(void *)&prime <= v45) {
        int8x8_t prime = (int8x8_t)v45;
      }
      if (*(void *)&prime >= v5)
      {
LABEL_38:
        unint64_t v5 = *(void *)(a1 + 8);
        uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
        v28.i16[0] = vaddlv_u8(v28);
        unint64_t v29 = v28.u32[0];
        if (v28.u32[0] >= 2uLL) {
          goto LABEL_44;
        }
        goto LABEL_77;
      }
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        size_t v25 = v27;
      }
      if (*(void *)&prime <= v25) {
        int8x8_t prime = (int8x8_t)v25;
      }
      if (*(void *)&prime >= v5) {
        goto LABEL_38;
      }
    }
    if (!*(void *)&prime)
    {
      uint64_t v46 = *(void **)a1;
      *(void *)a1 = 0;
      if (v46) {
        operator delete(v46);
      }
      unint64_t v5 = 0;
      *(void *)(a1 + 8) = 0;
      uint8x8_t v47 = (uint8x8_t)vcnt_s8(0);
      v47.i16[0] = vaddlv_u8(v47);
      unint64_t v29 = v47.u32[0];
      if (v47.u32[0] >= 2uLL) {
        goto LABEL_44;
      }
      goto LABEL_77;
    }
  }
  if (*(void *)&prime >> 61) {
    sub_1C4949AA8();
  }
  unint64_t v12 = operator new(8 * *(void *)&prime);
  unint64_t v13 = *(void **)a1;
  *(void *)a1 = v12;
  if (v13) {
    operator delete(v13);
  }
  uint64_t v14 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v14++) = 0;
  while (*(void *)&prime != v14);
  uint64_t v16 = a1 + 16;
  CGRect v15 = *(void **)(a1 + 16);
  if (v15)
  {
    unint64_t v17 = v15[1];
    uint64_t v18 = *(void *)&prime - 1;
    if ((*(void *)&prime & (*(void *)&prime - 1)) == 0)
    {
      uint64_t v19 = v17 & v18;
      *(void *)(*(void *)a1 + 8 * v19) = v16;
      uint8x8_t v20 = (void *)*v15;
      if (!*v15) {
        goto LABEL_43;
      }
      do
      {
        uint64_t v21 = v20[1] & v18;
        if (v21 == v19)
        {
          CGRect v15 = v20;
        }
        else
        {
          unint64_t v22 = v20;
          if (*(void *)(*(void *)a1 + 8 * v21))
          {
            do
            {
              unint64_t v23 = v22;
              unint64_t v22 = (void *)*v22;
            }
            while (v22 && v20[2] == v22[2]);
            *CGRect v15 = v22;
            uint64_t v24 = 8 * v21;
            *unint64_t v23 = **(void **)(*(void *)a1 + v24);
            **(void **)(*(void *)a1 + v24) = v20;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v21) = v15;
            CGRect v15 = v20;
            uint64_t v19 = v21;
          }
        }
        uint8x8_t v20 = (void *)*v15;
      }
      while (*v15);
      unint64_t v5 = (unint64_t)prime;
LABEL_76:
      uint8x8_t v48 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
      v48.i16[0] = vaddlv_u8(v48);
      unint64_t v29 = v48.u32[0];
      if (v48.u32[0] >= 2uLL) {
        goto LABEL_44;
      }
      goto LABEL_77;
    }
    if (v17 >= *(void *)&prime) {
      v17 %= *(void *)&prime;
    }
    *(void *)(*(void *)a1 + 8 * v17) = v16;
    for (uint64_t i = (void *)*v15; *v15; uint64_t i = (void *)*v15)
    {
      unint64_t v40 = i[1];
      if (v40 >= *(void *)&prime) {
        v40 %= *(void *)&prime;
      }
      if (v40 == v17)
      {
        CGRect v15 = i;
      }
      else
      {
        unint64_t v41 = i;
        if (*(void *)(*(void *)a1 + 8 * v40))
        {
          do
          {
            unint64_t v42 = v41;
            unint64_t v41 = (void *)*v41;
          }
          while (v41 && i[2] == v41[2]);
          *CGRect v15 = v41;
          uint64_t v43 = 8 * v40;
          *unint64_t v42 = **(void **)(*(void *)a1 + v43);
          **(void **)(*(void *)a1 + v43) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v40) = v15;
          CGRect v15 = i;
          unint64_t v17 = v40;
        }
      }
    }
  }
LABEL_43:
  unint64_t v5 = (unint64_t)prime;
  uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
  v31.i16[0] = vaddlv_u8(v31);
  unint64_t v29 = v31.u32[0];
  if (v31.u32[0] >= 2uLL)
  {
LABEL_44:
    unint64_t v32 = v4;
    if (v5 <= v4) {
      unint64_t v32 = v4 % v5;
    }
    unint64_t v33 = *(void **)(*(void *)a1 + 8 * v32);
    if (!v33)
    {
      BOOL v37 = 0;
      unint64_t v44 = a2[1];
      goto LABEL_85;
    }
    unsigned __int8 v34 = 0;
    uint64_t v35 = a2[2];
    while (1)
    {
      BOOL v37 = v33;
      unint64_t v33 = (void *)*v33;
      if (!v33) {
        goto LABEL_84;
      }
      unint64_t v38 = v33[1];
      unint64_t v39 = v38;
      if (v38 >= v5) {
        unint64_t v39 = v38 % v5;
      }
      if (v39 != v32) {
        goto LABEL_84;
      }
      if (v38 == v4)
      {
        int v36 = v34 & (v33[2] != v35);
        v34 |= v33[2] == v35;
        if (v36 == 1) {
          goto LABEL_84;
        }
      }
      else if ((v34 & 1) == 1)
      {
        goto LABEL_84;
      }
    }
  }
LABEL_77:
  uint64_t v49 = (v5 - 1) & v4;
  uint8x8_t v50 = *(void **)(*(void *)a1 + 8 * v49);
  if (!v50)
  {
    BOOL v37 = 0;
    unint64_t v44 = a2[1];
LABEL_96:
    v44 &= v5 - 1;
    if (v37) {
      goto LABEL_88;
    }
LABEL_97:
    *a2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = a2;
    *(void *)(*(void *)a1 + 8 * v44) = a1 + 16;
    if (!*a2) {
      goto LABEL_103;
    }
    unint64_t v55 = *(void *)(*a2 + 8);
    if (v29 > 1)
    {
      if (v55 >= v5) {
        v55 %= v5;
      }
    }
    else
    {
      v55 &= v5 - 1;
    }
LABEL_102:
    *(void *)(*(void *)a1 + 8 * v55) = a2;
    goto LABEL_103;
  }
  char v51 = 0;
  uint64_t v52 = a2[2];
  while (1)
  {
    BOOL v37 = v50;
    uint8x8_t v50 = (void *)*v50;
    if (!v50) {
      break;
    }
    uint64_t v54 = v50[1];
    if ((v54 & (v5 - 1)) != v49) {
      break;
    }
    if (v54 == v4)
    {
      char v53 = v51 & (v50[2] != v52);
      v51 |= v50[2] == v52;
      if (v53) {
        break;
      }
    }
    else if (v51)
    {
      break;
    }
  }
LABEL_84:
  unint64_t v44 = a2[1];
  if (v29 <= 1) {
    goto LABEL_96;
  }
LABEL_85:
  if (v44 >= v5) {
    v44 %= v5;
  }
  if (!v37) {
    goto LABEL_97;
  }
LABEL_88:
  *a2 = *v37;
  void *v37 = a2;
  if (*a2)
  {
    unint64_t v55 = *(void *)(*a2 + 8);
    if (v29 > 1)
    {
      if (v55 >= v5) {
        v55 %= v5;
      }
    }
    else
    {
      v55 &= v5 - 1;
    }
    if (v55 != v44) {
      goto LABEL_102;
    }
  }
LABEL_103:
  ++*(void *)(a1 + 24);
}

void sub_1C4B76EFC(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  BOOL v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_OWORD *)v8 + 1) = *((_OWORD *)a2 + 1);
      if (v8 != a2)
      {
        *((_DWORD *)v8 + 16) = *((_DWORD *)a2 + 16);
        sub_1C4B76874(v8 + 4, (void *)a2[6], 0);
      }
      unint64_t v9 = (uint64_t *)*v8;
      sub_1C4B762FC((uint64_t)a1, v8);
      a2 = (uint64_t *)*a2;
      BOOL v8 = v9;
      if (!v9) {
        goto LABEL_9;
      }
    }
    do
    {
      uint64_t v11 = (uint64_t *)*v8;
      unint64_t v12 = (void *)v8[6];
      if (v12)
      {
        do
        {
          unint64_t v13 = (void *)*v12;
          operator delete(v12);
          unint64_t v12 = v13;
        }
        while (v13);
      }
      uint64_t v14 = (void *)v8[4];
      v8[4] = 0;
      if (v14) {
        operator delete(v14);
      }
      operator delete(v8);
      BOOL v8 = v11;
    }
    while (v11);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      unint64_t v10 = operator new(0x48uLL);
      *unint64_t v10 = 0;
      v10[1] = 0;
      *((_OWORD *)v10 + 1) = *((_OWORD *)a2 + 1);
      sub_1C4B76078((uint64_t)(v10 + 4), (uint64_t)(a2 + 4));
      v10[1] = v10[2] ^ (2 * v10[3]);
      sub_1C4B762FC((uint64_t)a1, v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_1C4B77040(void *a1)
{
  __cxa_begin_catch(a1);
  sub_1C4B75F30(v1);
  __cxa_rethrow();
}

void sub_1C4B77058(_Unwind_Exception *a1)
{
}

void sub_1C4B7706C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B77080(_Unwind_Exception *a1)
{
  unint64_t v4 = (void *)v1[6];
  if (v4)
  {
    do
    {
      unint64_t v5 = (void *)*v4;
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  uint64_t v6 = *v2;
  *int8x8_t v2 = 0;
  if (v6) {
    operator delete(v6);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B770BC(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  BOOL v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[2] = a2[2];
      if (v8 != a2)
      {
        *((_DWORD *)v8 + 14) = *((_DWORD *)a2 + 14);
        sub_1C4B761BC(v8 + 3, (uint64_t *)a2[5], 0);
      }
      unint64_t v9 = (uint64_t *)*v8;
      sub_1C4B76998((uint64_t)a1, v8);
      a2 = (uint64_t *)*a2;
      BOOL v8 = v9;
      if (!v9) {
        goto LABEL_9;
      }
    }
    do
    {
      uint64_t v11 = (uint64_t *)*v8;
      unint64_t v12 = (void *)v8[5];
      if (v12)
      {
        do
        {
          unint64_t v13 = (void *)*v12;
          operator delete(v12);
          unint64_t v12 = v13;
        }
        while (v13);
      }
      uint64_t v14 = (void *)v8[3];
      v8[3] = 0;
      if (v14) {
        operator delete(v14);
      }
      operator delete(v8);
      BOOL v8 = v11;
    }
    while (v11);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      unint64_t v10 = operator new(0x40uLL);
      *unint64_t v10 = 0;
      v10[1] = 0;
      v10[2] = a2[2];
      sub_1C4B772E8((uint64_t)(v10 + 3), (uint64_t)(a2 + 3));
      v10[1] = v10[2];
      sub_1C4B76998((uint64_t)a1, v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_1C4B771FC(void *a1)
{
  __cxa_begin_catch(a1);
  sub_1C4B75F9C(v1);
  __cxa_rethrow();
}

void sub_1C4B77214(_Unwind_Exception *a1)
{
}

void sub_1C4B77228(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B7723C(_Unwind_Exception *a1)
{
  unint64_t v4 = (void *)v1[5];
  if (v4)
  {
    do
    {
      unint64_t v5 = (void *)*v4;
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  uint64_t v6 = *v2;
  *int8x8_t v2 = 0;
  if (v6) {
    operator delete(v6);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B77278(uint64_t a1)
{
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint8x8_t v3 = (void *)v2[5];
      if (v3)
      {
        do
        {
          unint64_t v4 = (void *)*v3;
          operator delete(v3);
          uint8x8_t v3 = v4;
        }
        while (v4);
      }
      unint64_t v5 = (void *)v2[3];
      v2[3] = 0;
      if (v5) {
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1C4B772E8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  unint64_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    unint64_t prime = 2;
LABEL_17:
    sub_1C4949C24(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    unint64_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      unint64_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  unint64_t v10 = *(void **)(a2 + 16);
  if (v10)
  {
    uint64_t v11 = (void *)(a1 + 16);
    unint64_t v12 = *(void *)(a1 + 8);
    while (1)
    {
      uint64_t v13 = v10[2];
      uint64_t v14 = v10[3];
      unint64_t v15 = v13 ^ (2 * v14);
      if (v12)
      {
        uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v16.i16[0] = vaddlv_u8(v16);
        if (v16.u32[0] > 1uLL)
        {
          unint64_t prime = v13 ^ (2 * v14);
          if (v15 >= v12) {
            unint64_t prime = v15 % v12;
          }
        }
        else
        {
          unint64_t prime = (v12 - 1) & v15;
        }
        unint64_t v17 = *(void **)(*(void *)a1 + 8 * prime);
        if (v17)
        {
          uint64_t v18 = (void *)*v17;
          if (v18)
          {
            if (v16.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v22 = v18[1];
                if (v22 == v15)
                {
                  if (v18[2] == v13 && v18[3] == v14) {
                    goto LABEL_85;
                  }
                }
                else if ((v22 & (v12 - 1)) != prime)
                {
                  goto LABEL_46;
                }
                uint64_t v18 = (void *)*v18;
                if (!v18) {
                  goto LABEL_46;
                }
              }
            }
            do
            {
              unint64_t v20 = v18[1];
              if (v20 == v15)
              {
                if (v18[2] == v13 && v18[3] == v14) {
                  goto LABEL_85;
                }
              }
              else
              {
                if (v20 >= v12) {
                  v20 %= v12;
                }
                if (v20 != prime) {
                  break;
                }
              }
              uint64_t v18 = (void *)*v18;
            }
            while (v18);
          }
        }
      }
LABEL_46:
      unint64_t v23 = operator new(0x28uLL);
      *unint64_t v23 = 0;
      v23[1] = v15;
      long long v24 = *((_OWORD *)v10 + 1);
      v23[4] = v10[4];
      *((_OWORD *)v23 + 1) = v24;
      float v25 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v26 = *(float *)(a1 + 32);
      if (v12 && (float)(v26 * (float)v12) >= v25) {
        goto LABEL_74;
      }
      BOOL v27 = (v12 & (v12 - 1)) != 0;
      if (v12 < 3) {
        BOOL v27 = 1;
      }
      unint64_t v28 = v27 | (2 * v12);
      unint64_t v29 = vcvtps_u32_f32(v25 / v26);
      if (v28 <= v29) {
        size_t v30 = v29;
      }
      else {
        size_t v30 = v28;
      }
      if (v30 == 1)
      {
        size_t v30 = 2;
      }
      else if ((v30 & (v30 - 1)) != 0)
      {
        size_t v30 = std::__next_prime(v30);
        unint64_t v12 = *(void *)(a1 + 8);
      }
      if (v30 > v12) {
        goto LABEL_58;
      }
      if (v30 < v12)
      {
        unint64_t v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v12 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
        {
          unint64_t v31 = std::__next_prime(v31);
        }
        else
        {
          uint64_t v33 = 1 << -(char)__clz(v31 - 1);
          if (v31 >= 2) {
            unint64_t v31 = v33;
          }
        }
        if (v30 <= v31) {
          size_t v30 = v31;
        }
        if (v30 < v12) {
LABEL_58:
        }
          sub_1C4949C24(a1, v30);
      }
      unint64_t v12 = *(void *)(a1 + 8);
      unint64_t v34 = v12 - 1;
      if ((v12 & (v12 - 1)) == 0)
      {
        unint64_t prime = v34 & v15;
        uint64_t v35 = *(void *)a1;
        int v36 = *(void **)(*(void *)a1 + 8 * (v34 & v15));
        if (v36) {
          goto LABEL_75;
        }
        goto LABEL_77;
      }
      if (v15 < v12) {
        break;
      }
      unint64_t prime = v15 % v12;
      uint64_t v35 = *(void *)a1;
      int v36 = *(void **)(*(void *)a1 + 8 * (v15 % v12));
      if (v36)
      {
LABEL_75:
        *unint64_t v23 = *v36;
        goto LABEL_83;
      }
LABEL_77:
      *unint64_t v23 = *v11;
      *uint64_t v11 = v23;
      *(void *)(v35 + 8 * prime) = v11;
      if (!*v23) {
        goto LABEL_84;
      }
      unint64_t v37 = *(void *)(*v23 + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v37 >= v12) {
          v37 %= v12;
        }
      }
      else
      {
        v37 &= v12 - 1;
      }
      int v36 = (void *)(*(void *)a1 + 8 * v37);
LABEL_83:
      void *v36 = v23;
LABEL_84:
      ++*(void *)(a1 + 24);
LABEL_85:
      unint64_t v10 = (void *)*v10;
      if (!v10) {
        return a1;
      }
    }
    unint64_t prime = v15;
LABEL_74:
    uint64_t v35 = *(void *)a1;
    int v36 = *(void **)(*(void *)a1 + 8 * prime);
    if (v36) {
      goto LABEL_75;
    }
    goto LABEL_77;
  }
  return a1;
}

void sub_1C4B776C0(_Unwind_Exception *a1)
{
  sub_1C498D2E0(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B776D4(_Unwind_Exception *a1)
{
  operator delete(v2);
  sub_1C498D2E0(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B776F0(_Unwind_Exception *a1)
{
  sub_1C498D2E0(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B77704(float *a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  unint64_t v7 = a2 ^ (2 * a3);
  unint64_t v8 = *((void *)a1 + 1);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      uint64_t v4 = a2 ^ (2 * a3);
      if (v7 >= v8) {
        uint64_t v4 = v7 % v8;
      }
    }
    else
    {
      uint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (v11)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v11[1];
            if (v15 == v7)
            {
              if (v11[2] == a2 && v11[3] == a3) {
                return;
              }
            }
            else if ((v15 & (v8 - 1)) != v4)
            {
              goto LABEL_28;
            }
            uint64_t v11 = (void *)*v11;
            if (!v11) {
              goto LABEL_28;
            }
          }
        }
        do
        {
          unint64_t v13 = v11[1];
          if (v13 == v7)
          {
            if (v11[2] == a2 && v11[3] == a3) {
              return;
            }
          }
          else
          {
            if (v13 >= v8) {
              v13 %= v8;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_28:
  uint8x8_t v16 = operator new(0x20uLL);
  *uint8x8_t v16 = 0;
  v16[1] = v7;
  *((_OWORD *)v16 + 1) = *a4;
  float v17 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v18 = a1[8];
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    BOOL v21 = 1;
    if (v8 >= 3) {
      BOOL v21 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v8);
    unint64_t v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23) {
      size_t prime = v23;
    }
    else {
      size_t prime = v22;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *((void *)a1 + 1);
    }
    if (prime > v8)
    {
LABEL_42:
      if (prime >> 61) {
        sub_1C4949AA8();
      }
      float v25 = operator new(8 * prime);
      float v26 = *(void **)a1;
      *(void *)a1 = v25;
      if (v26) {
        operator delete(v26);
      }
      uint64_t v27 = 0;
      *((void *)a1 + 1) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v27++) = 0;
      while (prime != v27);
      unint64_t v29 = (uint64_t *)(a1 + 4);
      unint64_t v28 = (void *)*((void *)a1 + 2);
      if (!v28) {
        goto LABEL_74;
      }
      size_t v30 = v28[1];
      size_t v31 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        size_t v32 = v30 & v31;
        *(void *)(*(void *)a1 + 8 * v32) = v29;
        for (uint64_t i = (void *)*v28; *v28; uint64_t i = (void *)*v28)
        {
          size_t v34 = i[1] & v31;
          if (v34 == v32)
          {
            unint64_t v28 = i;
          }
          else if (*(void *)(*(void *)a1 + 8 * v34))
          {
            *unint64_t v28 = *i;
            uint64_t v35 = 8 * v34;
            *uint64_t i = **(void **)(*(void *)a1 + v35);
            **(void **)(*(void *)a1 + v35) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v34) = v28;
            unint64_t v28 = i;
            size_t v32 = v34;
          }
        }
        goto LABEL_74;
      }
      if (v30 >= prime) {
        v30 %= prime;
      }
      *(void *)(*(void *)a1 + 8 * v30) = v29;
      unint64_t v39 = (void *)*v28;
      if (!*v28)
      {
LABEL_74:
        unint64_t v8 = prime;
        uint64_t v42 = prime - 1;
        if ((prime & (prime - 1)) != 0) {
          goto LABEL_75;
        }
        goto LABEL_90;
      }
      while (1)
      {
        size_t v41 = v39[1];
        if (v41 >= prime) {
          v41 %= prime;
        }
        if (v41 == v30) {
          goto LABEL_68;
        }
        if (*(void *)(*(void *)a1 + 8 * v41))
        {
          *unint64_t v28 = *v39;
          uint64_t v40 = 8 * v41;
          *unint64_t v39 = **(void **)(*(void *)a1 + v40);
          **(void **)(*(void *)a1 + v40) = v39;
          unint64_t v39 = v28;
LABEL_68:
          unint64_t v28 = v39;
          unint64_t v39 = (void *)*v39;
          if (!v39) {
            goto LABEL_74;
          }
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v41) = v28;
          unint64_t v28 = v39;
          unint64_t v39 = (void *)*v39;
          size_t v30 = v41;
          if (!v39) {
            goto LABEL_74;
          }
        }
      }
    }
    if (prime < v8)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v8 < 3 || (uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < v8)
      {
        if (!prime)
        {
          uint64_t v43 = *(void **)a1;
          *(void *)a1 = 0;
          if (v43) {
            operator delete(v43);
          }
          unint64_t v8 = 0;
          *((void *)a1 + 1) = 0;
          uint64_t v42 = -1;
          goto LABEL_90;
        }
        goto LABEL_42;
      }
      unint64_t v8 = *((void *)a1 + 1);
    }
    uint64_t v42 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
LABEL_75:
      if (v7 >= v8)
      {
        uint64_t v4 = v7 % v8;
        uint64_t v19 = *(void **)a1;
        unint64_t v20 = *(void **)(*(void *)a1 + 8 * (v7 % v8));
        if (v20) {
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t v4 = v7;
        uint64_t v19 = *(void **)a1;
        unint64_t v20 = *(void **)(*(void *)a1 + 8 * v7);
        if (v20) {
          goto LABEL_31;
        }
      }
      goto LABEL_91;
    }
LABEL_90:
    uint64_t v4 = v42 & v7;
    uint64_t v19 = *(void **)a1;
    unint64_t v20 = *(void **)(*(void *)a1 + 8 * (v42 & v7));
    if (v20) {
      goto LABEL_31;
    }
    goto LABEL_91;
  }
  uint64_t v19 = *(void **)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
LABEL_31:
    *uint8x8_t v16 = *v20;
LABEL_97:
    *unint64_t v20 = v16;
    goto LABEL_98;
  }
LABEL_91:
  *uint8x8_t v16 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v16;
  v19[v4] = a1 + 4;
  if (*v16)
  {
    unint64_t v44 = *(void *)(*v16 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v44 >= v8) {
        v44 %= v8;
      }
    }
    else
    {
      v44 &= v8 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v44);
    goto LABEL_97;
  }
LABEL_98:
  ++*((void *)a1 + 3);
}

void sub_1C4B77B9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_1C4B77BB0(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = *((void *)v10 + 1);
            if (v12 == a2)
            {
              if (*((void *)v10 + 2) == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            unint64_t v10 = *(char **)v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == a2)
          {
            if (*((void *)v10 + 2) == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  unint64_t v13 = (void *)(a1 + 16);
  unint64_t v10 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v10 = 0;
  *((void *)v10 + 1) = v5;
  *((void *)v10 + 2) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((_DWORD *)v10 + 14) = 1065353216;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v5 = v3;
  }
  else
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_35;
    }
    if (prime < v7)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < v7) {
LABEL_35:
      }
        sub_1C4949C24(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5) {
        v5 %= v7;
      }
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  uint64_t v23 = *(void *)a1;
  long long v24 = *(void **)(*(void *)a1 + 8 * v5);
  if (v24)
  {
    *(void *)unint64_t v10 = *v24;
LABEL_58:
    *long long v24 = v10;
    goto LABEL_59;
  }
  *(void *)unint64_t v10 = *v13;
  *unint64_t v13 = v10;
  *(void *)(v23 + 8 * v5) = v13;
  if (*(void *)v10)
  {
    unint64_t v25 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7) {
        v25 %= v7;
      }
    }
    else
    {
      v25 &= v7 - 1;
    }
    long long v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1C4B77EA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4B77278((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B77EBC(uint64_t result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)a2[1];
  unint64_t v4 = a3[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  BOOL v6 = *(void **)(*a2 + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    BOOL v6 = (void *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*a2 + 8 * v4) = 0;
  }
  uint64_t v10 = *a3;
  if (*a3)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*a2 + 8 * v11) = v7;
      uint64_t v10 = *a3;
    }
  }
  void *v7 = v10;
  *a3 = 0;
  --a2[3];
  *(void *)uint64_t result = a3;
  *(void *)(result + 8) = a2 + 2;
  *(unsigned char *)(result + 16) = 1;
  return result;
}

void NetworkEdge::serialize(NetworkEdge *this@<X0>, const Network *a2@<X1>, std::string *a3@<X8>)
{
  ul2s(*(void *)this, (uint64_t)&v50);
  BOOL v6 = std::string::insert(&v50, 0, "Edge (startNode,endNode)= (");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  unint64_t v8 = std::string::append(&v51, ", ");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  ul2s(*((void *)this + 1), (uint64_t)v48);
  if ((v49 & 0x80u) == 0) {
    uint64_t v10 = v48;
  }
  else {
    uint64_t v10 = (void **)v48[0];
  }
  if ((v49 & 0x80u) == 0) {
    std::string::size_type v11 = v49;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)v48[1];
  }
  uint64_t v12 = std::string::append(&v52, (const std::string::value_type *)v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  float v14 = std::string::append(&v53, ") inSym=");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  ul2s(*((void *)this + 2), (uint64_t)v46);
  if ((v47 & 0x80u) == 0) {
    BOOL v16 = v46;
  }
  else {
    BOOL v16 = (void **)v46[0];
  }
  if ((v47 & 0x80u) == 0) {
    std::string::size_type v17 = v47;
  }
  else {
    std::string::size_type v17 = (std::string::size_type)v46[1];
  }
  unint64_t v18 = std::string::append(&v54, (const std::string::value_type *)v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  unint64_t v20 = std::string::append(&v55, " outSym= ");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  ul2s(*((void *)this + 3), (uint64_t)v44);
  if ((v45 & 0x80u) == 0) {
    uint64_t v22 = v44;
  }
  else {
    uint64_t v22 = (void **)v44[0];
  }
  if ((v45 & 0x80u) == 0) {
    std::string::size_type v23 = v45;
  }
  else {
    std::string::size_type v23 = (std::string::size_type)v44[1];
  }
  long long v24 = std::string::append(&v56, (const std::string::value_type *)v22, v23);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  float v26 = std::string::append(&v57, " ");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  unint64_t v28 = *((void *)this + 3);
  if (*((unsigned char *)a2 + 184))
  {
    if (v28)
    {
      ul2sh(v28, (uint64_t)__dst);
      goto LABEL_26;
    }
    uint64_t v29 = *((void *)a2 + 17);
    if (*(char *)(v29 + 23) < 0) {
      goto LABEL_25;
    }
LABEL_23:
    long long v30 = *(_OWORD *)v29;
    uint64_t v43 = *(void *)(v29 + 16);
    *(_OWORD *)std::string __dst = v30;
    goto LABEL_26;
  }
  uint64_t v29 = *((void *)a2 + 17) + 24 * v28;
  if ((*(char *)(v29 + 23) & 0x80000000) == 0) {
    goto LABEL_23;
  }
LABEL_25:
  sub_1C4949ADC(__dst, *(void **)v29, *(void *)(v29 + 8));
LABEL_26:
  if (v43 >= 0) {
    size_t v31 = __dst;
  }
  else {
    size_t v31 = (void **)__dst[0];
  }
  if (v43 >= 0) {
    std::string::size_type v32 = HIBYTE(v43);
  }
  else {
    std::string::size_type v32 = (std::string::size_type)__dst[1];
  }
  uint64_t v33 = std::string::append(&v58, (const std::string::value_type *)v31, v32);
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  uint64_t v35 = std::string::append(&v59, " weight = ");
  long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  d2s(*((double *)this + 4), __p);
  if ((v41 & 0x80u) == 0) {
    uint8x8_t v37 = __p;
  }
  else {
    uint8x8_t v37 = (void **)__p[0];
  }
  if ((v41 & 0x80u) == 0) {
    std::string::size_type v38 = v41;
  }
  else {
    std::string::size_type v38 = (std::string::size_type)__p[1];
  }
  unint64_t v39 = std::string::append(&v60, (const std::string::value_type *)v37, v38);
  *a3 = *v39;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if ((char)v41 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_40:
      if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_41;
      }
      goto LABEL_57;
    }
  }
  else if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_40;
  }
  operator delete(v60.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_41:
    if ((SHIBYTE(v43) & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_58;
  }
LABEL_57:
  operator delete(v59.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
LABEL_42:
    if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_59;
  }
LABEL_58:
  operator delete(__dst[0]);
  if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_43:
    if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_60;
  }
LABEL_59:
  operator delete(v58.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_44:
    if (((char)v45 & 0x80000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_61;
  }
LABEL_60:
  operator delete(v57.__r_.__value_.__l.__data_);
  if (((char)v45 & 0x80000000) == 0)
  {
LABEL_45:
    if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_62;
  }
LABEL_61:
  operator delete(v44[0]);
  if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_46:
    if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_63;
  }
LABEL_62:
  operator delete(v56.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_47:
    if (((char)v47 & 0x80000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_64;
  }
LABEL_63:
  operator delete(v55.__r_.__value_.__l.__data_);
  if (((char)v47 & 0x80000000) == 0)
  {
LABEL_48:
    if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_65;
  }
LABEL_64:
  operator delete(v46[0]);
  if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_49:
    if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_66;
  }
LABEL_65:
  operator delete(v54.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_50:
    if (((char)v49 & 0x80000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_67;
  }
LABEL_66:
  operator delete(v53.__r_.__value_.__l.__data_);
  if (((char)v49 & 0x80000000) == 0)
  {
LABEL_51:
    if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_68;
  }
LABEL_67:
  operator delete(v48[0]);
  if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_52:
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_69;
  }
LABEL_68:
  operator delete(v52.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_53:
    if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_70:
    operator delete(v50.__r_.__value_.__l.__data_);
    return;
  }
LABEL_69:
  operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_70;
  }
}

void sub_1C4B7847C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (*(char *)(v67 - 121) < 0)
  {
    operator delete(*(void **)(v67 - 144));
    if ((*(char *)(v67 - 153) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a22 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((*(char *)(v67 - 153) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v67 - 176));
  if ((a22 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v67 - 185) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(__p);
  if ((*(char *)(v67 - 185) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v67 - 217) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(v67 - 208));
  if ((*(char *)(v67 - 217) & 0x80000000) == 0)
  {
LABEL_6:
    if ((a28 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v67 - 240));
  if ((a28 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a67 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a23);
  if ((a67 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a60 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a62);
  if ((a60 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a34 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a55);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a53 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a29);
  if ((a53 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a46 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete(a48);
  if ((a46 & 0x80000000) == 0)
  {
LABEL_12:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete(a41);
  if ((a40 & 0x80000000) == 0) {
LABEL_13:
  }
    _Unwind_Resume(a1);
LABEL_25:
  operator delete(a35);
  _Unwind_Resume(a1);
}

void sub_1C4B78698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0) {
    JUMPOUT(0x1C4B78638);
  }
  JUMPOUT(0x1C4B784E8);
}

void sub_1C4B786A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    JUMPOUT(0x1C4B78648);
  }
  JUMPOUT(0x1C4B784F0);
}

void sub_1C4B786B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    JUMPOUT(0x1C4B78658);
  }
  JUMPOUT(0x1C4B784F8);
}

void sub_1C4B786C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    JUMPOUT(0x1C4B78668);
  }
  JUMPOUT(0x1C4B78500);
}

void sub_1C4B786D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    JUMPOUT(0x1C4B78678);
  }
  JUMPOUT(0x1C4B78508);
}

void sub_1C4B786E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    JUMPOUT(0x1C4B78688);
  }
  JUMPOUT(0x1C4B78510);
}

uint64_t Network::readOneEdge(Network *this, const char *__s, NetworkEdge *a3)
{
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1C4949B7C();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (void **)operator new(v9 + 1);
    size_t v67 = v7;
    int64_t v68 = v10 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v68) = v6;
  p_dst = (void **)&__dst;
  if (v6) {
LABEL_8:
  }
    memcpy(p_dst, __s, v7);
  *((unsigned char *)p_dst + v7) = 0;
  uint64_t v11 = MEMORY[0x1E4FBA488] + 104;
  v75[0] = MEMORY[0x1E4FBA488] + 104;
  uint64_t v12 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v70 = MEMORY[0x1E4FBA488] + 64;
  long long v13 = (uint64_t *)MEMORY[0x1E4FBA408];
  uint64_t v14 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  v69[0] = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(uint64_t *)((char *)v69 + *(void *)(v69[0] - 24)) = v14;
  v69[1] = 0;
  long long v15 = (std::ios_base *)((char *)v69 + *(void *)(v69[0] - 24));
  std::ios_base::init(v15, v71);
  uint64_t v16 = MEMORY[0x1E4FBA488] + 24;
  v15[1].__vftable = 0;
  v15[1].__fmtflags_ = -1;
  uint64_t v17 = v13[5];
  uint64_t v70 = v13[4];
  *(void *)((char *)&v71[-1] + *(void *)(v70 - 24)) = v17;
  v69[0] = v13[1];
  *(uint64_t *)((char *)v69 + *(void *)(v69[0] - 24)) = v13[6];
  v75[0] = v11;
  v69[0] = v16;
  uint64_t v70 = v12;
  std::streambuf::basic_streambuf();
  uint64_t v18 = MEMORY[0x1E4FBA470] + 16;
  v71[0] = MEMORY[0x1E4FBA470] + 16;
  long long __p = 0u;
  long long v73 = 0u;
  int v74 = 24;
  std::stringbuf::str();
  if (SHIBYTE(v68) < 0) {
    operator delete(__dst);
  }
  MEMORY[0x1C87862B0](&__dst, v69, 0);
  if (!(_BYTE)__dst)
  {
    char v21 = 0;
    goto LABEL_18;
  }
  long long v19 = *(void **)((char *)&v71[2] + *(void *)(v69[0] - 24));
  unint64_t v20 = (char *)v19[3];
  if (v20 == (char *)v19[4])
  {
    int v22 = (*(uint64_t (**)(void *))(*v19 + 80))(v19);
    char v21 = v22;
    if (v22 == -1)
    {
      char v21 = 0;
      int v23 = 6;
      goto LABEL_17;
    }
  }
  else
  {
    v19[3] = v20 + 1;
    char v21 = *v20;
  }
  int v23 = 0;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)v69 + *(void *)(v69[0] - 24)), *(_DWORD *)((char *)&v71[1] + *(void *)(v69[0] - 24)) | v23);
LABEL_18:
  if ((*((unsigned char *)&v71[1] + *(void *)(v69[0] - 24)) & 5) != 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid empty FST line entry");
    __cxa_throw(exception, MEMORY[0x1E4FBA328], MEMORY[0x1E4FBA1B0]);
  }
  if (v21 == 70)
  {
    std::string __dst = 0;
    MEMORY[0x1C87862D0](v69, &__dst);
    long long v25 = (uint64_t **)((char *)this + 64);
    long long v24 = (uint64_t *)*((void *)this + 8);
    uint64_t v26 = (uint64_t)__dst;
    if (v24)
    {
      while (1)
      {
        while (1)
        {
          long long v27 = (uint64_t **)v24;
          unint64_t v28 = v24[4];
          if ((unint64_t)__dst >= v28) {
            break;
          }
          long long v24 = *v27;
          long long v25 = v27;
          if (!*v27) {
            goto LABEL_29;
          }
        }
        if (v28 >= (unint64_t)__dst) {
          break;
        }
        long long v24 = v27[1];
        if (!v24)
        {
          long long v25 = v27 + 1;
          goto LABEL_29;
        }
      }
    }
    else
    {
      long long v27 = (uint64_t **)((char *)this + 64);
LABEL_29:
      uint64_t v29 = (uint64_t *)operator new(0x28uLL);
      v29[4] = v26;
      *uint64_t v29 = 0;
      v29[1] = 0;
      v29[2] = (uint64_t)v27;
      *long long v25 = v29;
      uint64_t v30 = **((void **)this + 7);
      if (v30)
      {
        *((void *)this + 7) = v30;
        uint64_t v29 = *v25;
      }
      sub_1C4949FD4(*((uint64_t **)this + 8), v29);
      ++*((void *)this + 9);
    }
    goto LABEL_32;
  }
  if (v21 == 73)
  {
    MEMORY[0x1C87862D0](v69, (char *)this + 24);
LABEL_32:
    uint64_t v31 = 0;
    goto LABEL_124;
  }
  double v65 = 0.0;
  MEMORY[0x1C87862D0](v69, a3);
  MEMORY[0x1C87862D0](v69, (char *)a3 + 8);
  std::string __dst = 0;
  size_t v67 = 0;
  int64_t v68 = 0;
  sub_1C4B2E9FC(v69, (uint64_t)&__dst);
  std::ios_base::clear((std::ios_base *)((char *)v69 + *(void *)(v69[0] - 24)), 0);
  unint64_t v32 = HIBYTE(v68);
  int v33 = SHIBYTE(v68);
  long long v34 = __dst;
  uint64_t v35 = (void **)&__dst;
  if (v68 < 0)
  {
    uint64_t v35 = __dst;
    unint64_t v32 = v67;
  }
  if (!v32)
  {
    LODWORD(v36) = 0;
    goto LABEL_69;
  }
  unint64_t v36 = *(unsigned __int8 *)v35 == 45;
  if (*(unsigned char *)v35 != 45)
  {
    uint64_t v45 = 1;
    if (*((unsigned char *)v35 + v36) != 48) {
      goto LABEL_68;
    }
LABEL_63:
    if ((*((unsigned __int8 *)v35 + v45) | 0x20) == 0x78)
    {
      unint64_t v41 = 2;
      if (*(unsigned char *)v35 == 45) {
        unint64_t v41 = 3;
      }
      if (v41 >= v32) {
        goto LABEL_69;
      }
      goto LABEL_40;
    }
LABEL_68:
    unint64_t v41 = *(unsigned __int8 *)v35 == 45;
    if (v36 >= v32) {
      goto LABEL_69;
    }
LABEL_40:
    int v37 = 0;
    do
    {
      int v38 = *((char *)v35 + v41);
      if ((v38 - 48) >= 0xA)
      {
        if ((v38 - 97) >= 6)
        {
          if ((v38 - 65) > 5) {
            goto LABEL_70;
          }
          int v39 = -55;
        }
        else
        {
          int v39 = -87;
        }
      }
      else
      {
        int v39 = -48;
      }
      int v40 = v38 + 16 * v37 + v39;
      ++v41;
      BOOL v42 = v40 < v37;
      if (v41 >= v32) {
        break;
      }
      int v37 = v40;
    }
    while (!v42);
    if (*(unsigned char *)v35 == 45) {
      signed int v43 = 0x80000000;
    }
    else {
      signed int v43 = 0x7FFFFFFF;
    }
    if (v36) {
      int v44 = -v40;
    }
    else {
      int v44 = v40;
    }
    if (!v42) {
      signed int v43 = v44;
    }
    *((void *)a3 + 2) = v43;
    if ((v33 & 0x80000000) == 0) {
      goto LABEL_74;
    }
LABEL_58:
    *(unsigned char *)long long v34 = 0;
    size_t v67 = 0;
    goto LABEL_75;
  }
  if (v32 >= 2)
  {
    uint64_t v45 = 2;
    if (*((unsigned char *)v35 + v36) != 48) {
      goto LABEL_68;
    }
    goto LABEL_63;
  }
  LODWORD(v36) = 1;
LABEL_69:
  int v37 = 0;
LABEL_70:
  if (v36) {
    int v46 = -v37;
  }
  else {
    int v46 = v37;
  }
  *((void *)a3 + 2) = v46;
  if (v33 < 0) {
    goto LABEL_58;
  }
LABEL_74:
  LOBYTE(__dst) = 0;
  HIBYTE(v68) = 0;
LABEL_75:
  sub_1C4B2E9FC(v69, (uint64_t)&__dst);
  unint64_t v47 = HIBYTE(v68);
  if (v68 < 0) {
    unint64_t v47 = v67;
  }
  if (*((unsigned char *)this + 184))
  {
    if (v47)
    {
      uint8x8_t v48 = __dst;
      if (v68 >= 0) {
        uint8x8_t v48 = (void **)&__dst;
      }
      unint64_t v49 = *(unsigned __int8 *)v48 == 45;
      if (*(unsigned char *)v48 == 45)
      {
        if (v47 < 2)
        {
          unint64_t v49 = 1;
LABEL_93:
          if (v49 >= v47)
          {
            int v52 = 0;
LABEL_112:
            if (*(unsigned char *)v48 == 45) {
              int v57 = -v52;
            }
            else {
              int v57 = v52;
            }
          }
          else
          {
            int v52 = 0;
            do
            {
              int v53 = *((char *)v48 + v49);
              if ((v53 - 48) >= 0xA)
              {
                if ((v53 - 97) >= 6)
                {
                  if ((v53 - 65) > 5) {
                    goto LABEL_112;
                  }
                  int v54 = -55;
                }
                else
                {
                  int v54 = -87;
                }
              }
              else
              {
                int v54 = -48;
              }
              int v55 = v53 + 16 * v52 + v54;
              ++v49;
              BOOL v56 = v55 < v52;
              if (v49 >= v47) {
                break;
              }
              int v52 = v55;
            }
            while (!v56);
            if (*(unsigned char *)v48 == 45) {
              int v57 = 0x80000000;
            }
            else {
              int v57 = 0x7FFFFFFF;
            }
            if (*(unsigned char *)v48 == 45) {
              int v58 = -v55;
            }
            else {
              int v58 = v55;
            }
            if (!v56) {
              int v57 = v58;
            }
          }
          std::string v50 = (uint64_t *)v57;
          goto LABEL_116;
        }
        uint64_t v51 = 2;
        if (*((unsigned char *)v48 + v49) != 48) {
          goto LABEL_93;
        }
      }
      else
      {
        uint64_t v51 = 1;
        if (*((unsigned char *)v48 + v49) != 48) {
          goto LABEL_93;
        }
      }
      if ((*((unsigned __int8 *)v48 + v51) | 0x20) == 0x78)
      {
        unint64_t v49 = 2;
        if (*(unsigned char *)v48 == 45) {
          unint64_t v49 = 3;
        }
      }
      goto LABEL_93;
    }
    goto LABEL_86;
  }
  if (!v47)
  {
LABEL_86:
    std::string v50 = 0;
    goto LABEL_116;
  }
  std::string v50 = sub_1C4999D30((void *)this + 16, (uint64_t)&__dst);
LABEL_116:
  *((void *)a3 + 3) = v50;
  MEMORY[0x1C87862C0](v69, &v65);
  double v59 = v65;
  if ((*(_DWORD *)((unsigned char *)&v71[1] + *(void *)(v69[0] - 24)) & 5) != 0) {
    double v59 = 0.0;
  }
  *((double *)a3 + 4) = v59;
  unint64_t v64 = 0;
  MEMORY[0x1C87862D0](v69, &v64);
  if ((*(_DWORD *)((unsigned char *)&v71[1] + *(void *)(v69[0] - 24)) & 5) != 0) {
    unint64_t v60 = 0;
  }
  else {
    unint64_t v60 = (unint64_t)(double)v64;
  }
  *((void *)a3 + 6) = v60;
  if (SHIBYTE(v68) < 0) {
    operator delete(__dst);
  }
  uint64_t v31 = 1;
LABEL_124:
  v69[0] = *v13;
  uint64_t v61 = v13[9];
  *(uint64_t *)((char *)v69 + *(void *)(v69[0] - 24)) = v13[8];
  uint64_t v70 = v61;
  v71[0] = v18;
  if (SBYTE7(v73) < 0) {
    operator delete((void *)__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C87863F0](v75);
  return v31;
}

void sub_1C4B790F8()
{
}

void sub_1C4B7917C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

void Network::readDataFile(Network *this)
{
  uint64_t v1 = this;
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  if (*((char *)this + 23) < 0) {
    this = *(Network **)this;
  }
  int8x8_t v2 = fopen((const char *)this, "rt");
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    double v65 = std::string::append(&v77, ")");
    long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    *(void *)&long long v73 = *((void *)&v65->__r_.__value_.__l + 2);
    long long v72 = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1C8786200](exception, &v72);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int8x8_t v3 = v2;
  fgets(__s, 2048, v2);
  while (!feof(v3))
  {
    __s[0] = 0;
    if (!fgets(__s, 2048, v3)) {
      break;
    }
    if (Network::readOneEdge(v1, __s, (NetworkEdge *)&v72))
    {
      unint64_t v33 = *((void *)v1 + 11);
      if (v33 < *((void *)v1 + 12))
      {
        *(_OWORD *)unint64_t v33 = v72;
        *(_OWORD *)(v33 + 16) = v73;
        *(_OWORD *)(v33 + 32) = v74;
        *(_OWORD *)(v33 + 48) = v75;
        *(void *)(v33 + 64) = v76;
        unint64_t v32 = (char *)(v33 + 72);
      }
      else
      {
        unint64_t v32 = sub_1C499CBEC((char **)v1 + 10, (uint64_t)&v72);
      }
      *((void *)v1 + 11) = v32;
    }
  }
  uint64_t v4 = *((void *)v1 + 10);
  unint64_t v5 = *((void *)v1 + 11);
  unint64_t v6 = 126 - 2 * __clz(0x8E38E38E38E38E39 * ((uint64_t)(v5 - v4) >> 3));
  v77.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1C4B79AF0;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  sub_1C4B8ECEC(v4, v5, (uint64_t (**)(long long *, long long *))&v77, v7, 1);
  uint64_t v8 = *((void *)v1 + 10);
  for (uint64_t i = *((void *)v1 + 11); v8 != i; v8 += 72)
    sub_1C4B79B3C(v1, v8);
  uint64_t v10 = *((void *)v1 + 13);
  uint64_t v11 = (int8x16_t *)*((void *)v1 + 14);
  unint64_t v12 = 126 - 2 * __clz(((uint64_t)v11->i64 - v10) >> 3);
  v77.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1C4B79CC0;
  if (v11 == (int8x16_t *)v10) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }
  sub_1C4B90138(v10, v11, (unsigned int (**)(uint64_t))&v77, v13, 1);
  v77.__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&v77.__r_.__value_.__l.__data_ = (unint64_t)&v77.__r_.__value_.__l.__size_;
  uint64_t v14 = (unint64_t *)*((void *)v1 + 10);
  long long v15 = (unint64_t *)*((void *)v1 + 11);
  if (v14 == v15)
  {
    std::string::size_type v16 = 0;
    uint64_t v30 = (void *)((char *)v1 + 40);
    uint64_t v29 = *((void *)v1 + 4);
    unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)v1 + 5) - v29) >> 3);
  }
  else
  {
    std::string::size_type v16 = 0;
    do
    {
      std::string::size_type size = v77.__r_.__value_.__l.__size_;
      unint64_t v18 = *v14;
      p_std::string::size_type size = &v77.__r_.__value_.__l.__size_;
      unint64_t v20 = &v77.__r_.__value_.__l.__size_;
      if (v77.__r_.__value_.__l.__size_)
      {
        std::string::size_type v21 = v77.__r_.__value_.__l.__size_;
        while (1)
        {
          while (1)
          {
            unint64_t v20 = (std::string::size_type *)v21;
            unint64_t v22 = *(void *)(v21 + 32);
            if (v18 >= v22) {
              break;
            }
            std::string::size_type v21 = *v20;
            p_std::string::size_type size = v20;
            if (!*v20) {
              goto LABEL_24;
            }
          }
          if (v22 >= v18) {
            break;
          }
          std::string::size_type v21 = v20[1];
          if (!v21)
          {
            p_std::string::size_type size = v20 + 1;
            goto LABEL_24;
          }
        }
      }
      else
      {
LABEL_24:
        int v23 = (uint64_t *)operator new(0x28uLL);
        v23[4] = v18;
        *int v23 = 0;
        v23[1] = 0;
        v23[2] = (uint64_t)v20;
        *p_std::string::size_type size = (std::string::size_type)v23;
        if (*(void *)v77.__r_.__value_.__l.__data_)
        {
          v77.__r_.__value_.__r.__words[0] = *(void *)v77.__r_.__value_.__l.__data_;
          int v23 = (uint64_t *)*p_size;
        }
        sub_1C4949FD4((uint64_t *)v77.__r_.__value_.__l.__size_, v23);
        std::string::size_type size = v77.__r_.__value_.__l.__size_;
        std::string::size_type v16 = ++v77.__r_.__value_.__r.__words[2];
      }
      unint64_t v24 = v14[1];
      long long v25 = &v77.__r_.__value_.__l.__size_;
      uint64_t v26 = &v77.__r_.__value_.__l.__size_;
      if (size)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v26 = (std::string::size_type *)size;
            unint64_t v27 = *(void *)(size + 32);
            if (v24 >= v27) {
              break;
            }
            std::string::size_type size = *v26;
            long long v25 = v26;
            if (!*v26) {
              goto LABEL_34;
            }
          }
          if (v27 >= v24) {
            break;
          }
          std::string::size_type size = v26[1];
          if (!size)
          {
            long long v25 = v26 + 1;
            goto LABEL_34;
          }
        }
      }
      else
      {
LABEL_34:
        unint64_t v28 = (uint64_t *)operator new(0x28uLL);
        v28[4] = v24;
        *unint64_t v28 = 0;
        v28[1] = 0;
        v28[2] = (uint64_t)v26;
        *long long v25 = (std::string::size_type)v28;
        if (*(void *)v77.__r_.__value_.__l.__data_)
        {
          v77.__r_.__value_.__r.__words[0] = *(void *)v77.__r_.__value_.__l.__data_;
          unint64_t v28 = (uint64_t *)*v25;
        }
        sub_1C4949FD4((uint64_t *)v77.__r_.__value_.__l.__size_, v28);
        std::string::size_type v16 = ++v77.__r_.__value_.__r.__words[2];
      }
      v14 += 9;
    }
    while (v14 != v15);
    uint64_t v29 = *((void *)v1 + 4);
    uint64_t v30 = (void *)((char *)v1 + 40);
    unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)v1 + 5) - v29) >> 3);
    if (v16 > v31)
    {
      sub_1C499C97C((void **)v1 + 4, v16 - v31);
      uint64_t v29 = *((void *)v1 + 4);
      goto LABEL_49;
    }
  }
  if (v31 > v16) {
    *uint64_t v30 = v29 + 40 * v16;
  }
LABEL_49:
  long long v34 = (uint64_t *)*((void *)v1 + 10);
  uint64_t v35 = (uint64_t *)*((void *)v1 + 11);
  if (v34 != v35)
  {
    unint64_t v36 = (uint64_t *)*((void *)v1 + 10);
    do
    {
      ++*(void *)(v29 + 40 * *v36);
      ++*(void *)(v29 + 40 * v36[1] + 8);
      v36 += 9;
    }
    while (v36 != v35);
  }
  int v37 = (void *)*((void *)v1 + 7);
  if (v37 != (void *)((char *)v1 + 64))
  {
    do
    {
      *(unsigned char *)(v29 + 40 * v37[4] + 32) = 1;
      int v38 = (void *)v37[1];
      if (v38)
      {
        do
        {
          int v39 = v38;
          int v38 = (void *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          int v39 = (void *)v37[2];
          BOOL v40 = *v39 == (void)v37;
          int v37 = v39;
        }
        while (!v40);
      }
      int v37 = v39;
    }
    while (v39 != (void *)((char *)v1 + 64));
  }
  uint64_t v41 = *v34;
  *(void *)(v29 + 40 * *v34 + 16) = 0;
  if (*v30 == v29)
  {
    *(void *)(v29 + 24) = 0;
  }
  else
  {
    unint64_t v42 = 0;
    unint64_t v43 = (*v30 - v29) / 40;
    if (v43 <= 1) {
      unint64_t v43 = 1;
    }
    int v44 = (unsigned char *)(v29 + 32);
    do
    {
      *((void *)v44 - 2) = v41;
      uint64_t v45 = *((void *)v44 - 4);
      if (!v45 && !*v44)
      {
        int v46 = __cxa_allocate_exception(0x10uLL);
        ul2s(v42, (uint64_t)&v67);
        unint64_t v47 = std::string::insert(&v67, 0, "Node[");
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v68.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        unint64_t v49 = std::string::append(&v68, "]");
        long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v69.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        uint64_t v51 = std::string::append(&v69, "has out degree zero but is not marked as a final node");
        long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        std::string::size_type v71 = v51->__r_.__value_.__r.__words[2];
        long long v70 = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x1C87861D0](v46, &v70);
        __cxa_throw(v46, MEMORY[0x1E4FBA328], MEMORY[0x1E4FBA1B0]);
      }
      v41 += v45;
      ++v42;
      v44 += 40;
    }
    while (v43 != v42);
    unint64_t v53 = 0;
    uint64_t v54 = 0;
    *(void *)(v29 + 24) = 0;
    int v55 = (void *)(v29 + 24);
    do
    {
      void *v55 = v54;
      uint64_t v56 = *(v55 - 2);
      if (!v56 && v53 != *((void *)v1 + 3))
      {
        int v57 = __cxa_allocate_exception(0x10uLL);
        ul2s(v53, (uint64_t)&v67);
        int v58 = std::string::insert(&v67, 0, "Node[");
        long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
        v68.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v59;
        v58->__r_.__value_.__l.__size_ = 0;
        v58->__r_.__value_.__r.__words[2] = 0;
        v58->__r_.__value_.__r.__words[0] = 0;
        unint64_t v60 = std::string::append(&v68, "]");
        long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
        v69.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v61;
        v60->__r_.__value_.__l.__size_ = 0;
        v60->__r_.__value_.__r.__words[2] = 0;
        v60->__r_.__value_.__r.__words[0] = 0;
        unint64_t v62 = std::string::append(&v69, "has in degree zero but is not marked as an initial node");
        long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
        std::string::size_type v71 = v62->__r_.__value_.__r.__words[2];
        long long v70 = v63;
        v62->__r_.__value_.__l.__size_ = 0;
        v62->__r_.__value_.__r.__words[2] = 0;
        v62->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x1C87861D0](v57, &v70);
        __cxa_throw(v57, MEMORY[0x1E4FBA328], MEMORY[0x1E4FBA1B0]);
      }
      v55 += 5;
      v54 += v56;
      ++v53;
    }
    while (v43 != v53);
  }
  fclose(v3);
  sub_1C4999C7C((uint64_t)&v77, (void *)v77.__r_.__value_.__l.__size_);
}

void sub_1C4B79964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a55 < 0)
  {
    operator delete(a50);
    if ((v56 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v56)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v55);
  _Unwind_Resume(a1);
}

BOOL sub_1C4B79AF0(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 1;
  }
  if (*a1 != *a2) {
    return 0;
  }
  unint64_t v3 = a1[2];
  unint64_t v4 = a2[2];
  if (v3 < v4) {
    return 1;
  }
  return v3 == v4 && a1[1] < a2[1];
}

void sub_1C4B79B3C(void *a1, uint64_t a2)
{
  unint64_t v5 = (char *)a1[14];
  unint64_t v4 = a1[15];
  unint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(void *)unint64_t v5 = a2;
    uint64_t v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  uint64_t v8 = (void **)(a1 + 13);
  uint64_t v9 = (char *)a1[13];
  uint64_t v10 = (v5 - v9) >> 3;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61) {
    sub_1C494A220();
  }
  uint64_t v12 = v4 - (void)v9;
  if (v12 >> 2 > v11) {
    unint64_t v11 = v12 >> 2;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 61) {
      sub_1C4949AA8();
    }
    uint64_t v14 = (char *)operator new(8 * v13);
    long long v15 = &v14[8 * v10];
    std::string::size_type v16 = &v14[8 * v13];
    *(void *)long long v15 = a2;
    uint64_t v7 = (uint64_t)(v15 + 8);
    uint64_t v17 = (char *)(v5 - v9);
    if (v5 == v9) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  uint64_t v14 = 0;
  long long v15 = (char *)(8 * v10);
  std::string::size_type v16 = 0;
  *(void *)(8 * v10) = a2;
  uint64_t v7 = 8 * v10 + 8;
  uint64_t v17 = (char *)(v5 - v9);
  if (v5 != v9)
  {
LABEL_14:
    unint64_t v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v9 - v14) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v19 = (v18 >> 3) + 1;
    uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v6 = &v5[-v20];
    v15 -= v20;
    std::string::size_type v21 = &v14[8 * v10 - 16];
    unint64_t v22 = (long long *)(v5 - 16);
    uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)std::string::size_type v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v25 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v15 - 1) = v25;
        v15 -= 8;
      }
      while (v6 != v9);
    }
    unint64_t v6 = (char *)*v8;
  }
LABEL_21:
  a1[13] = v15;
  a1[14] = v7;
  a1[15] = v16;
  if (v6) {
    operator delete(v6);
  }
LABEL_23:
  a1[14] = v7;
}

BOOL sub_1C4B79CC0(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) < *(void *)(a2 + 8);
}

uint64_t Network::prepareNetwork(Network *this)
{
  uint64_t v2 = *((void *)this + 10);
  unint64_t v3 = *((void *)this + 11);
  unint64_t v4 = 126 - 2 * __clz(0x8E38E38E38E38E39 * ((uint64_t)(v3 - v2) >> 3));
  *(void *)&long long v44 = sub_1C4B79AF0;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  sub_1C4B8ECEC(v2, v3, (uint64_t (**)(long long *, long long *))&v44, v5, 1);
  unint64_t v6 = (int8x16_t *)*((void *)this + 13);
  *((void *)this + 14) = v6;
  uint64_t v7 = *((void *)this + 10);
  if (*((void *)this + 11) == v7)
  {
    uint64_t v10 = (uint64_t)v6;
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      sub_1C4B79B3C(this, v7 + v8);
      ++v9;
      uint64_t v7 = *((void *)this + 10);
      v8 += 72;
    }
    while (v9 < 0x8E38E38E38E38E39 * ((*((void *)this + 11) - v7) >> 3));
    uint64_t v10 = *((void *)this + 13);
    unint64_t v6 = (int8x16_t *)*((void *)this + 14);
  }
  unint64_t v11 = 126 - 2 * __clz(((uint64_t)v6->i64 - v10) >> 3);
  *(void *)&long long v44 = sub_1C4B79CC0;
  if (v6 == (int8x16_t *)v10) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v11;
  }
  sub_1C4B90138(v10, v6, (unsigned int (**)(uint64_t))&v44, v12, 1);
  uint64_t v13 = *((void *)this + 13);
  uint64_t v14 = (int8x16_t *)*((void *)this + 14);
  unint64_t v15 = 126 - 2 * __clz(((uint64_t)v14->i64 - v13) >> 3);
  *(void *)&long long v44 = sub_1C4B79CC0;
  if (v14 == (int8x16_t *)v13) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v15;
  }
  uint64_t result = sub_1C4B90138(v13, v14, (unsigned int (**)(uint64_t))&v44, v16, 1);
  unint64_t v18 = (char *)*((void *)this + 4);
  uint64_t v19 = (char *)*((void *)this + 5);
  if (v18 != v19)
  {
    do
    {
      *(void *)unint64_t v18 = 0;
      *((void *)v18 + 1) = 0;
      v18 += 40;
    }
    while (v18 != v19);
    unint64_t v18 = (char *)*((void *)this + 4);
  }
  std::string::size_type v21 = (uint64_t *)*((void *)this + 10);
  uint64_t v20 = (uint64_t *)*((void *)this + 11);
  if (v21 == v20)
  {
    unint64_t v28 = (char *)*((void *)this + 5);
    int64_t v27 = v28 - v18;
    if (v28 == v18) {
      return result;
    }
    goto LABEL_27;
  }
  unint64_t v22 = (uint64_t *)*((void *)this + 10);
  do
  {
    ++*(void *)&v18[40 * *v22];
    ++*(void *)&v18[40 * v22[1] + 8];
    v22 += 9;
  }
  while (v22 != v20);
  uint64_t v23 = (char *)*((void *)this + 5);
  uint64_t v24 = *v21;
  *(void *)&v18[40 * v24 + 16] = 0;
  if (v18 != v23)
  {
    uint64_t v25 = v18;
    do
    {
      *((void *)v25 + 2) = v24;
      uint64_t v26 = *(void *)v25;
      v25 += 40;
      v24 += v26;
    }
    while (v25 != v23);
  }
  *((void *)v18 + 3) = 0;
  int64_t v27 = v23 - v18;
  if (v23 != v18)
  {
LABEL_27:
    unint64_t v29 = 0;
    uint64_t v30 = 0;
    unint64_t v31 = v27 / 40;
    if (v31 <= 1) {
      unint64_t v31 = 1;
    }
    unint64_t v32 = v18 + 24;
    do
    {
      *unint64_t v32 = v30;
      uint64_t v33 = *(v32 - 2);
      if (!v33 && v29 != *((void *)this + 3))
      {
        exception = __cxa_allocate_exception(0x10uLL);
        ul2s(v29, (uint64_t)&v41);
        uint64_t v35 = std::string::insert(&v41, 0, "Node[");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v42.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        int v37 = std::string::append(&v42, "]");
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v43.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        int v39 = std::string::append(&v43, "has in degree zero but is not marked as an initial node");
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        std::string::size_type v45 = v39->__r_.__value_.__r.__words[2];
        long long v44 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x1C87861D0](exception, &v44);
        __cxa_throw(exception, MEMORY[0x1E4FBA328], MEMORY[0x1E4FBA1B0]);
      }
      v32 += 5;
      v30 += v33;
      ++v29;
    }
    while (v31 != v29);
  }
  return result;
}

void sub_1C4B79FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v30 - 41) < 0)
  {
    operator delete(*(void **)(v30 - 64));
    if ((a28 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a23);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    if (a15 < 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a16);
  if (a15 < 0)
  {
LABEL_5:
    operator delete(__p);
    if ((v29 & 1) == 0) {
LABEL_12:
    }
      _Unwind_Resume(a1);
LABEL_11:
    __cxa_free_exception(v28);
    goto LABEL_12;
  }
LABEL_10:
  if (!v29) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

void Network::trimDeadEdges(std::string **this, Network *a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = (char *)a2 + 56;
  uint64_t v5 = (uint64_t **)((char *)a2 + 64);
  sub_1C4999C7C((uint64_t)a2 + 56, *((void **)a2 + 8));
  *((void *)v2 + 7) = v5;
  *((void *)v2 + 9) = 0;
  uint64_t v115 = v5;
  *uint64_t v5 = 0;
  if (v2 != (Network *)this)
  {
    sub_1C499B358((uint64_t)v2 + 136, this[17], this[18], 0xAAAAAAAAAAAAAAABLL * (((char *)this[18] - (char *)this[17]) >> 3));
    sub_1C499B660((uint64_t **)v2 + 20, this[20], this + 21);
  }
  uint64_t v6 = *((void *)v2 + 4);
  if (*((void *)v2 + 5) != v6) {
    *((void *)v2 + 5) = v6;
  }
  uint64_t v131 = 0;
  uint64_t v132 = 0;
  unint64_t v133 = 0;
  uint8x8_t v129 = 0;
  unint64_t v130 = 0;
  unint64_t v128 = &v129;
  long long v126 = 0u;
  long long v127 = 0u;
  *(_OWORD *)uint64_t v125 = 0u;
  v124[0] = 0;
  v124[1] = 0;
  unint64_t v123 = v124;
  uint64_t v7 = (char *)sub_1C499A568(&v123, this[7], this + 8);
  uint64_t v8 = v123;
  if (v123 == v124)
  {
    uint64_t v11 = *((void *)&v127 + 1);
  }
  else
  {
    unint64_t v9 = (char *)v125[1];
    uint64_t v10 = (unsigned char *)v126;
    uint64_t v11 = *((void *)&v127 + 1);
    do
    {
      uint64_t v12 = ((v10 - v9) << 6) - 1;
      if (v10 == v9) {
        uint64_t v12 = 0;
      }
      unint64_t v13 = v127 + v11;
      if (v12 == v13)
      {
        sub_1C49DA0D4((uint64_t)v125);
        unint64_t v9 = (char *)v125[1];
        uint64_t v10 = (unsigned char *)v126;
        unint64_t v13 = *((void *)&v127 + 1) + v127;
      }
      *(void *)(*(void *)&v9[(v13 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v13 & 0x1FF)) = v8[4];
      uint64_t v11 = ++*((void *)&v127 + 1);
      uint64_t v14 = (void *)v8[1];
      if (v14)
      {
        do
        {
          unint64_t v15 = (void **)v14;
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          unint64_t v15 = (void **)v8[2];
          BOOL v16 = *v15 == v8;
          uint64_t v8 = v15;
        }
        while (!v16);
      }
      uint64_t v8 = v15;
    }
    while (v15 != v124);
  }
  uint64_t v113 = (void **)((char *)v2 + 32);
  int8x8_t v114 = (void **)v4;
  unint64_t v116 = v2;
  if (v11)
  {
    uint8x8_t v117 = (Network *)this;
    do
    {
      unint64_t v17 = *(void *)(*(void *)((char *)v125[1] + (((unint64_t)v127 >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (v127 & 0x1FF));
      *(void *)&long long v127 = v127 + 1;
      *((void *)&v127 + 1) = v11 - 1;
      if ((unint64_t)v127 >= 0x400)
      {
        operator delete(*(void **)v125[1]);
        v125[1] = (char *)v125[1] + 8;
        *(void *)&long long v127 = v127 - 512;
      }
      unint64_t v18 = v129;
      if (!v129) {
        goto LABEL_35;
      }
      uint64_t v19 = &v129;
      uint64_t v20 = v129;
      do
      {
        std::string::size_type v21 = v20;
        unint64_t v22 = v19;
        unint64_t v23 = v20[4];
        if (v23 >= v17) {
          uint64_t v19 = (uint64_t **)v20;
        }
        else {
          ++v20;
        }
        uint64_t v20 = (uint64_t *)*v20;
      }
      while (v20);
      if (v19 == &v129) {
        goto LABEL_35;
      }
      if (v23 < v17) {
        std::string::size_type v21 = (uint64_t *)v22;
      }
      if (v17 < v21[4])
      {
LABEL_35:
        uint64_t v24 = this[4];
        if (*(&v24->__r_.__value_.__l.__size_ + 5 * v17))
        {
          std::string::size_type v25 = 0;
          while (1)
          {
            uint64_t v26 = (char *)*((void *)&this[13]->__r_.__value_.__l.__data_
                          + v24[1].__r_.__value_.__r.__words[5 * v17]
                          + v25);
            int64_t v27 = this[10];
            unint64_t v28 = *(void *)v26;
            int v29 = v132;
            if (v132 >= v133)
            {
              unint64_t v32 = v131;
              unint64_t v33 = 0x8E38E38E38E38E39 * ((v132 - v131) >> 3) + 1;
              if (v33 > 0x38E38E38E38E38ELL) {
                sub_1C494A220();
              }
              if (0x1C71C71C71C71C72 * ((v133 - v131) >> 3) > v33) {
                unint64_t v33 = 0x1C71C71C71C71C72 * ((v133 - v131) >> 3);
              }
              if (0x8E38E38E38E38E39 * ((v133 - v131) >> 3) >= 0x1C71C71C71C71C7) {
                unint64_t v34 = 0x38E38E38E38E38ELL;
              }
              else {
                unint64_t v34 = v33;
              }
              if (v34 > 0x38E38E38E38E38ELL) {
                sub_1C4949AA8();
              }
              uint64_t v7 = (char *)operator new(72 * v34);
              uint64_t v35 = &v7[8 * ((v29 - v32) >> 3)];
              *(_OWORD *)uint64_t v35 = *(_OWORD *)v26;
              long long v36 = &v27->__r_.__value_.__s.__data_[8 * ((v26 - (char *)v27) >> 3)];
              *((_OWORD *)v35 + 1) = *((_OWORD *)v36 + 1);
              *((_OWORD *)v35 + 2) = *((_OWORD *)v36 + 2);
              *((_OWORD *)v35 + 3) = *((_OWORD *)v36 + 3);
              *((void *)v35 + 8) = *((void *)v36 + 8);
              if (v29 == v32)
              {
                int v39 = &v7[8 * ((v29 - v32) >> 3)];
              }
              else
              {
                uint64_t v37 = 0;
                do
                {
                  long long v38 = &v35[v37];
                  *(_OWORD *)(v38 - 72) = *(_OWORD *)&v29[v37 - 72];
                  *(_OWORD *)(v38 - 56) = *(_OWORD *)&v29[v37 - 56];
                  *(_OWORD *)(v38 - 40) = *(_OWORD *)&v29[v37 - 40];
                  *(_OWORD *)(v38 - 24) = *(_OWORD *)&v29[v37 - 24];
                  *((void *)v38 - 1) = *(void *)&v29[v37 - 8];
                  v37 -= 72;
                }
                while (&v29[v37] != v32);
                int v39 = &v35[v37];
              }
              long long v40 = v35 + 72;
              uint64_t v131 = v39;
              uint64_t v132 = v35 + 72;
              unint64_t v133 = &v7[72 * v34];
              if (v32) {
                operator delete(v32);
              }
              this = (std::string **)v117;
              uint64_t v132 = v40;
              unint64_t v31 = v129;
              if (v129)
              {
LABEL_57:
                std::string v41 = &v129;
                do
                {
                  std::string v42 = v31;
                  std::string v43 = v41;
                  unint64_t v44 = v31[4];
                  std::string::size_type v45 = (uint64_t **)(v31 + 1);
                  if (v44 >= v28)
                  {
                    std::string::size_type v45 = (uint64_t **)v42;
                    std::string v41 = (uint64_t **)v42;
                  }
                  unint64_t v31 = *v45;
                }
                while (v31);
                if (v41 != &v129)
                {
                  if (v44 < v28) {
                    std::string v42 = (uint64_t *)v43;
                  }
                  if (v28 >= v42[4]) {
                    goto LABEL_38;
                  }
                }
              }
            }
            else
            {
              *(void *)uint64_t v132 = v28;
              uint64_t v30 = &v27->__r_.__value_.__s.__data_[8 * ((v26 - (char *)v27) >> 3)];
              *(_OWORD *)(v29 + 8) = *(_OWORD *)(v30 + 8);
              *((void *)v29 + 3) = *((void *)v30 + 3);
              *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
              *((_OWORD *)v29 + 3) = *((_OWORD *)v30 + 3);
              *((void *)v29 + 8) = *((void *)v30 + 8);
              uint64_t v132 = v29 + 72;
              unint64_t v31 = v129;
              if (v129) {
                goto LABEL_57;
              }
            }
            int v46 = (char *)v125[1];
            unint64_t v47 = (((void)v126 - (unint64_t)v125[1]) << 6) - 1;
            if ((void *)v126 == v125[1]) {
              unint64_t v47 = 0;
            }
            unint64_t v48 = *((void *)&v127 + 1) + v127;
            if (v47 == *((void *)&v127 + 1) + (void)v127)
            {
              sub_1C49DA0D4((uint64_t)v125);
              int v46 = (char *)v125[1];
              unint64_t v48 = *((void *)&v127 + 1) + v127;
              this = (std::string **)v117;
            }
            *(void *)(*(void *)&v46[(v48 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v48 & 0x1FF)) = v28;
            ++*((void *)&v127 + 1);
LABEL_38:
            ++v25;
            uint64_t v24 = this[4];
            if (v25 >= *(&v24->__r_.__value_.__l.__size_ + 5 * v17))
            {
              unint64_t v18 = v129;
              uint64_t v2 = v116;
              break;
            }
          }
        }
        unint64_t v49 = &v129;
LABEL_72:
        long long v50 = v49;
        if (v18)
        {
          do
          {
            unint64_t v49 = (uint64_t **)v18;
            unint64_t v51 = v18[4];
            if (v17 < v51)
            {
              unint64_t v18 = *v49;
              goto LABEL_72;
            }
            if (v51 >= v17) {
              goto LABEL_22;
            }
            unint64_t v18 = v49[1];
          }
          while (v18);
          long long v50 = v49 + 1;
        }
        long long v52 = (uint64_t *)operator new(0x28uLL);
        v52[4] = v17;
        *long long v52 = 0;
        v52[1] = 0;
        v52[2] = (uint64_t)v49;
        *long long v50 = v52;
        if (*v128)
        {
          unint64_t v128 = (uint64_t **)*v128;
          long long v52 = *v50;
        }
        uint64_t v7 = (char *)sub_1C4949FD4(v129, v52);
        ++v130;
      }
LABEL_22:
      uint64_t v11 = *((void *)&v127 + 1);
    }
    while (*((void *)&v127 + 1));
  }
  unint64_t v53 = v130;
  uint64_t v54 = *((void *)v2 + 4);
  unint64_t v55 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)v2 + 5) - v54) >> 3);
  if (v130 > v55)
  {
    sub_1C499C97C(v113, v130 - v55);
    uint64_t v121 = 0;
    uint64_t v122 = 0;
    BOOL v120 = &v121;
    goto LABEL_84;
  }
  if (v130 < v55) {
    *((void *)v2 + 5) = v54 + 40 * v130;
  }
  uint64_t v121 = 0;
  uint64_t v122 = 0;
  BOOL v120 = &v121;
  long long __p = 0;
  int64_t v119 = 0;
  if (v53)
  {
LABEL_84:
    if (v53 >> 61) {
      sub_1C494A220();
    }
    int v56 = (char *)operator new(8 * v53);
    long long __p = v56;
    bzero(v56, 8 * v53);
    int v57 = &v56[8 * v53];
    int64_t v119 = v57;
    int v58 = (uint64_t *)v128;
    if (v128 == &v129) {
      goto LABEL_95;
    }
    goto LABEL_86;
  }
  int v57 = 0;
  int v56 = 0;
  int v58 = (uint64_t *)v128;
  if (v128 != &v129)
  {
LABEL_86:
    uint64_t v59 = 0;
    do
    {
      *(void *)&v56[8 * v59] = v58[4];
      unint64_t v60 = (uint64_t *)v58[1];
      if (v60)
      {
        do
        {
          long long v61 = (uint64_t **)v60;
          unint64_t v60 = (uint64_t *)*v60;
        }
        while (v60);
      }
      else
      {
        do
        {
          long long v61 = (uint64_t **)v58[2];
          BOOL v16 = *v61 == v58;
          int v58 = (uint64_t *)v61;
        }
        while (!v16);
      }
      ++v59;
      int v58 = (uint64_t *)v61;
    }
    while (v61 != &v129);
  }
LABEL_95:
  if (v57 != v56)
  {
    unint64_t v62 = 0;
    do
    {
      while (1)
      {
        long long v63 = v121;
        unint64_t v64 = *(void *)&v56[8 * v62];
        double v65 = &v121;
        long long v66 = &v121;
        if (v121) {
          break;
        }
LABEL_105:
        std::string v68 = (uint64_t *)operator new(0x30uLL);
        v68[4] = v64;
        v68[5] = 0;
        *std::string v68 = 0;
        v68[1] = 0;
        v68[2] = (uint64_t)v66;
        std::string *v65 = v68;
        std::string v69 = v68;
        if (*v120)
        {
          BOOL v120 = (uint64_t **)*v120;
          std::string v69 = *v65;
        }
        uint64_t v7 = (char *)sub_1C4949FD4(v121, v69);
        ++v122;
        int v56 = __p;
        int v57 = v119;
        v68[5] = v62++;
        if (v62 >= (v119 - __p) >> 3) {
          goto LABEL_108;
        }
      }
      while (1)
      {
        while (1)
        {
          long long v66 = (uint64_t **)v63;
          unint64_t v67 = v63[4];
          if (v64 >= v67) {
            break;
          }
          long long v63 = *v66;
          double v65 = v66;
          if (!*v66) {
            goto LABEL_105;
          }
        }
        if (v67 >= v64) {
          break;
        }
        long long v63 = v66[1];
        if (!v63)
        {
          double v65 = v66 + 1;
          goto LABEL_105;
        }
      }
      v66[5] = (uint64_t *)v62++;
    }
    while (v62 < (v57 - v56) >> 3);
  }
LABEL_108:
  long long v70 = v131;
  std::string::size_type v71 = v132;
  while (v70 != v71)
  {
    long long v72 = v121;
    unint64_t v73 = *(void *)v70;
    long long v74 = &v121;
    long long v75 = &v121;
    if (v121)
    {
      uint64_t v76 = v121;
      while (1)
      {
        while (1)
        {
          long long v75 = (uint64_t **)v76;
          unint64_t v77 = v76[4];
          if (v73 >= v77) {
            break;
          }
          uint64_t v76 = *v75;
          long long v74 = v75;
          if (!*v75) {
            goto LABEL_119;
          }
        }
        if (v77 >= v73) {
          break;
        }
        uint64_t v76 = v75[1];
        if (!v76)
        {
          long long v74 = v75 + 1;
          goto LABEL_119;
        }
      }
      *(void *)long long v70 = v75[5];
      unint64_t v80 = *((void *)v70 + 1);
      float v81 = &v121;
      unint64_t v82 = &v121;
      if (v72) {
        goto LABEL_126;
      }
LABEL_130:
      uint64_t v84 = (uint64_t *)operator new(0x30uLL);
      v84[4] = v80;
      v84[5] = 0;
      uint64_t *v84 = 0;
      v84[1] = 0;
      v84[2] = (uint64_t)v82;
      void *v81 = v84;
      float v85 = v84;
      if (*v120)
      {
        BOOL v120 = (uint64_t **)*v120;
        float v85 = *v81;
      }
      uint64_t v7 = (char *)sub_1C4949FD4(v121, v85);
      ++v122;
      goto LABEL_110;
    }
LABEL_119:
    uint64_t v78 = (uint64_t *)operator new(0x30uLL);
    v78[4] = v73;
    v78[5] = 0;
    *uint64_t v78 = 0;
    v78[1] = 0;
    v78[2] = (uint64_t)v75;
    void *v74 = v78;
    uint64_t v79 = v78;
    if (*v120)
    {
      BOOL v120 = (uint64_t **)*v120;
      uint64_t v79 = *v74;
    }
    uint64_t v7 = (char *)sub_1C4949FD4(v121, v79);
    long long v72 = v121;
    ++v122;
    *(void *)long long v70 = v78[5];
    unint64_t v80 = *((void *)v70 + 1);
    float v81 = &v121;
    unint64_t v82 = &v121;
    if (!v72) {
      goto LABEL_130;
    }
    while (1)
    {
LABEL_126:
      while (1)
      {
        unint64_t v82 = (uint64_t **)v72;
        unint64_t v83 = v72[4];
        if (v80 >= v83) {
          break;
        }
        long long v72 = *v82;
        float v81 = v82;
        if (!*v82) {
          goto LABEL_130;
        }
      }
      if (v83 >= v80) {
        break;
      }
      long long v72 = v82[1];
      if (!v72)
      {
        float v81 = v82 + 1;
        goto LABEL_130;
      }
    }
    uint64_t v84 = (uint64_t *)v82;
LABEL_110:
    *((void *)v70 + 1) = v84[5];
    v70 += 72;
  }
  float v86 = v123;
  if (v123 != v124)
  {
    do
    {
      float v87 = v121;
      unint64_t v88 = v86[4];
      BOOL v89 = &v121;
      unint64_t v90 = &v121;
      if (v121)
      {
        while (1)
        {
          while (1)
          {
            unint64_t v90 = (uint64_t **)v87;
            unint64_t v91 = v87[4];
            if (v88 >= v91) {
              break;
            }
            float v87 = *v90;
            BOOL v89 = v90;
            if (!*v90) {
              goto LABEL_143;
            }
          }
          if (v91 >= v88) {
            break;
          }
          float v87 = v90[1];
          if (!v87)
          {
            BOOL v89 = v90 + 1;
            goto LABEL_143;
          }
        }
        float v92 = (uint64_t *)v90;
      }
      else
      {
LABEL_143:
        float v92 = (uint64_t *)operator new(0x30uLL);
        v92[4] = v88;
        v92[5] = 0;
        uint64_t *v92 = 0;
        v92[1] = 0;
        v92[2] = (uint64_t)v90;
        void *v89 = v92;
        int v93 = v92;
        if (*v120)
        {
          BOOL v120 = (uint64_t **)*v120;
          int v93 = *v89;
        }
        uint64_t v7 = (char *)sub_1C4949FD4(v121, v93);
        ++v122;
      }
      unint64_t v94 = v92[5];
      uint64_t v95 = v115;
      while (1)
      {
        float v96 = *v95;
        size_t v97 = v95;
        if (!*v95) {
          break;
        }
        while (1)
        {
          uint64_t v95 = (uint64_t **)v96;
          unint64_t v98 = v96[4];
          if (v98 > v94) {
            break;
          }
          if (v98 >= v94) {
            goto LABEL_156;
          }
          float v96 = v95[1];
          if (!v96)
          {
            size_t v97 = v95 + 1;
            goto LABEL_153;
          }
        }
      }
LABEL_153:
      size_t v99 = (uint64_t *)operator new(0x28uLL);
      v99[4] = v94;
      uint64_t *v99 = 0;
      v99[1] = 0;
      v99[2] = (uint64_t)v95;
      *size_t v97 = v99;
      float v100 = (void *)**v114;
      if (v100)
      {
        const char *v114 = v100;
        size_t v99 = *v97;
      }
      uint64_t v7 = (char *)sub_1C4949FD4(*((uint64_t **)v116 + 8), v99);
      ++*((void *)v116 + 9);
LABEL_156:
      uint64_t v101 = *((void *)v116 + 4);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)v116 + 5) - v101) >> 3) >= v94) {
        *(unsigned char *)(v101 + 40 * v94 + 32) = 1;
      }
      uint64_t v102 = (void *)v86[1];
      if (v102)
      {
        do
        {
          unint64_t v103 = (void **)v102;
          uint64_t v102 = (void *)*v102;
        }
        while (v102);
      }
      else
      {
        do
        {
          unint64_t v103 = (void **)v86[2];
          BOOL v16 = *v103 == v86;
          float v86 = v103;
        }
        while (!v16);
      }
      float v86 = v103;
    }
    while (v103 != v124);
  }
  sub_1C4B800AC((uint64_t)v7, (uint64_t)&v131);
  uint64_t v105 = v131;
  uint8x8_t v104 = v132;
  if (v131 != v132)
  {
    float v106 = (char *)*((void *)v116 + 11);
    do
    {
      if ((unint64_t)v106 < *((void *)v116 + 12))
      {
        *(_OWORD *)float v106 = *v105;
        *((_OWORD *)v106 + 1) = v105[1];
        *((_OWORD *)v106 + 2) = v105[2];
        *((_OWORD *)v106 + 3) = v105[3];
        *((void *)v106 + 8) = *((void *)v105 + 8);
        v106 += 72;
      }
      else
      {
        float v106 = sub_1C499CBEC((char **)v116 + 10, (uint64_t)v105);
      }
      *((void *)v116 + 11) = v106;
      uint64_t v105 = (_OWORD *)((char *)v105 + 72);
    }
    while (v105 != (_OWORD *)v104);
  }
  Network::prepareNetwork(v116);
  if (__p) {
    operator delete(__p);
  }
  sub_1C4999C7C((uint64_t)&v120, v121);
  sub_1C4999C7C((uint64_t)&v123, v124[0]);
  float v107 = (void **)v125[1];
  uint64_t v108 = (void **)v126;
  *((void *)&v127 + 1) = 0;
  unint64_t v109 = v126 - (unint64_t)v125[1];
  if ((unint64_t)v126 - (unint64_t)v125[1] >= 0x11)
  {
    do
    {
      operator delete(*v107);
      uint64_t v108 = (void **)v126;
      float v107 = (void **)((char *)v125[1] + 8);
      v125[1] = v107;
      unint64_t v109 = v126 - (void)v107;
    }
    while ((void)v126 - (void)v107 > 0x10uLL);
  }
  unint64_t v110 = v109 >> 3;
  if (v110 == 1)
  {
    uint64_t v111 = 256;
LABEL_178:
    *(void *)&long long v127 = v111;
  }
  else if (v110 == 2)
  {
    uint64_t v111 = 512;
    goto LABEL_178;
  }
  if (v107 != v108)
  {
    do
    {
      size_t v112 = *v107++;
      operator delete(v112);
    }
    while (v107 != v108);
    if ((void *)v126 != v125[1]) {
      *(void *)&long long v126 = v126 + (((unint64_t)v125[1] - v126 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (v125[0]) {
    operator delete(v125[0]);
  }
  sub_1C4999C7C((uint64_t)&v128, v129);
  if (v131)
  {
    uint64_t v132 = v131;
    operator delete(v131);
  }
}

void sub_1C4B7AD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,void *a23,uint64_t a24,char a25)
{
  sub_1C4999C7C((uint64_t)&a22, a23);
  sub_1C4946780((uint64_t)&a25);
  sub_1C4999C7C(v25 - 136, *(void **)(v25 - 128));
  int64_t v27 = *(void **)(v25 - 112);
  if (v27)
  {
    *(void *)(v25 - 104) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

void Network::pushWeightsFromEmptyEdges(Network *this, char a2)
{
  uint64_t v2 = *((void *)this + 5) - *((void *)this + 4);
  if (!v2) {
    return;
  }
  long long v42 = 0u;
  long long v43 = 0u;
  *(_OWORD *)long long __p = 0u;
  if (v2 < 0) {
    sub_1C494A220();
  }
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * (v2 >> 3);
  uint64_t v5 = operator new(8 * (((v4 - 1) >> 6) + 1));
  uint64_t v6 = v5;
  if (v4 >= 0x41) {
    unint64_t v7 = (v4 - 1) >> 6;
  }
  else {
    unint64_t v7 = 0;
  }
  v5[v7] = 0;
  if (v4 >= 0x40) {
    bzero(v5, 8 * (v4 >> 6));
  }
  if ((v4 & 0x3F) != 0) {
    v6[v4 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v4 & 0x3F));
  }
  sub_1C49DA0D4((uint64_t)__p);
  uint64_t v8 = (void **)v42;
  *(void *)(*(void *)((char *)__p[1] + ((((void)v43 + *((void *)&v43 + 1)) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((v43 + *((void *)&v43 + 1)) & 0x1FF)) = 0;
  uint64_t v9 = *((void *)&v43 + 1);
  *v6 |= 1uLL;
  BOOL v10 = __CFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  *((void *)&v43 + 1) = v11;
  if (!v10)
  {
    while (1)
    {
      uint64_t v17 = *(void *)(*(void *)((char *)__p[1] + (((unint64_t)(v43 + v11 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v43 + v11 - 1) & 0x1FF));
      if (v8 == __p[1]) {
        unint64_t v18 = 0;
      }
      else {
        unint64_t v18 = (((char *)v8 - (char *)__p[1]) << 6) - 1;
      }
      *((void *)&v43 + 1) = v11 - 1;
      if (v18 - (v11 + (void)v43) + 1 >= 0x400)
      {
        operator delete(*(v8 - 1));
        uint64_t v8 = (void **)(v42 - 8);
        *(void *)&long long v42 = v42 - 8;
      }
      uint64_t v19 = *((void *)this + 4);
      if (*(void *)(v19 + 40 * v17)) {
        break;
      }
LABEL_17:
      uint64_t v11 = *((void *)&v43 + 1);
      if (!*((void *)&v43 + 1)) {
        goto LABEL_12;
      }
    }
    uint64_t v20 = 0;
    while (1)
    {
      uint64_t v21 = *(void *)(v19 + 40 * v17 + 16) + v20;
      uint64_t v22 = *((void *)this + 10);
      uint64_t v23 = v22 + 72 * v21;
      unint64_t v24 = *(void *)(v23 + 8);
      if (!*(void *)(v23 + 24)) {
        break;
      }
      unint64_t v25 = v24 >> 6;
      uint64_t v26 = 1 << v24;
      if ((v6[v24 >> 6] & (1 << v24)) == 0) {
        goto LABEL_40;
      }
LABEL_26:
      if ((unint64_t)++v20 >= *(void *)(v19 + 40 * v17)) {
        goto LABEL_17;
      }
    }
    if (!*(unsigned char *)(v19 + 40 * v24 + 32))
    {
      uint64_t v27 = *(void *)(v19 + 40 * v24);
      if (v27)
      {
        uint64_t v28 = *(void *)(v19 + 40 * v24 + 16);
        uint64_t v29 = v22 + 72 * v21;
        uint64_t v30 = (double *)(v29 + 32);
        unint64_t v31 = (void *)(v29 + 48);
        if (a2)
        {
          unint64_t v32 = (int64x2_t *)(v22 + 72 * v28 + 48);
          do
          {
            *(double *)v32[-1].i64 = *v30 + *(double *)v32[-1].i64;
            *unint64_t v32 = vdupq_n_s64(*v31 + v32->i64[0]);
            unint64_t v32 = (int64x2_t *)((char *)v32 + 72);
            --v27;
          }
          while (v27);
        }
        else
        {
          uint64_t v33 = v22 + 72 * v28 + 32;
          do
          {
            *(double *)uint64_t v33 = *v30 + *(double *)v33;
            uint64_t v34 = *(void *)(v33 + 16);
            *(void *)(v33 + 16) = *v31 + v34;
            *(void *)(v33 + 24) = v34;
            v33 += 72;
            --v27;
          }
          while (v27);
        }
      }
      uint64_t v35 = v22 + 72 * v21;
      *(void *)(v35 + 48) = 0;
      *(void *)(v35 + 56) = 0;
    }
    *(void *)(v22 + 72 * v21 + 32) = 0;
    unint64_t v25 = v24 >> 6;
    uint64_t v26 = 1 << v24;
    if ((v6[v24 >> 6] & (1 << v24)) != 0) {
      goto LABEL_26;
    }
LABEL_40:
    long long v36 = (char *)__p[1];
    unint64_t v37 = (((char *)v8 - (char *)__p[1]) << 6) - 1;
    if (v8 == __p[1]) {
      unint64_t v37 = 0;
    }
    unint64_t v38 = *((void *)&v43 + 1) + v43;
    if (v37 == *((void *)&v43 + 1) + (void)v43)
    {
      sub_1C49DA0D4((uint64_t)__p);
      long long v36 = (char *)__p[1];
      uint64_t v8 = (void **)v42;
      unint64_t v38 = *((void *)&v43 + 1) + v43;
      uint64_t v19 = *((void *)this + 4);
    }
    *(void *)(*(void *)&v36[(v38 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v38 & 0x1FF)) = v24;
    ++*((void *)&v43 + 1);
    v6[v25] |= v26;
    goto LABEL_26;
  }
LABEL_12:
  operator delete(v6);
  uint64_t v12 = (void **)__p[1];
  unint64_t v13 = (void **)v42;
  *((void *)&v43 + 1) = 0;
  unint64_t v14 = v42 - (unint64_t)__p[1];
  if ((unint64_t)v42 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v12);
      unint64_t v13 = (void **)v42;
      uint64_t v12 = (void **)((char *)__p[1] + 8);
      __p[1] = v12;
      unint64_t v14 = v42 - (void)v12;
    }
    while ((void)v42 - (void)v12 > 0x10uLL);
  }
  unint64_t v15 = v14 >> 3;
  if (v15 == 1)
  {
    uint64_t v16 = 256;
    goto LABEL_45;
  }
  if (v15 == 2)
  {
    uint64_t v16 = 512;
LABEL_45:
    *(void *)&long long v43 = v16;
  }
  if (v12 != v13)
  {
    do
    {
      int v39 = *v12++;
      operator delete(v39);
    }
    while (v12 != v13);
    if ((void *)v42 != __p[1]) {
      *(void *)&long long v42 = v42 + (((unint64_t)__p[1] - v42 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void sub_1C4B7B18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  operator delete(v13);
  sub_1C4946780((uint64_t)&a13);
  _Unwind_Resume(a1);
}

BOOL Network::checkSingleEmptyIncomingEdgeForNode(Network *this, uint64_t a2, unint64_t *a3)
{
  uint64_t v3 = *((void *)this + 4);
  uint64_t v4 = v3 + 40 * a2;
  unint64_t v7 = *(void *)(v4 + 8);
  uint64_t v5 = (unint64_t *)(v4 + 8);
  unint64_t v6 = v7;
  if (v7 < 2) {
    return 1;
  }
  unint64_t v9 = 0;
  BOOL v10 = (void *)(v3 + 40 * a2 + 24);
  uint64_t v11 = *((void *)this + 13);
  do
  {
    if (!*(void *)(*(void *)(v11 + 8 * (v9 + *v10)) + 24))
    {
      ++*a3;
      unint64_t v6 = *v5;
    }
    ++v9;
  }
  while (v9 < v6);
  return *a3 == 0;
}

void Network::guaranteeSingleEmptyIncomingEdgePerNode(Network *this)
{
  uint64_t v1 = *((void *)this + 4);
  double v290 = (void **)((char *)this + 32);
  uint64_t v2 = *((void *)this + 5) - v1;
  if (v2)
  {
    uint64_t v3 = this;
    uint64_t v286 = (void **)((char *)this + 80);
    uint64_t v4 = &v304;
    uint64_t v5 = (void *)((char *)this + 64);
    do
    {
      uint64_t v6 = 0;
      uint64_t v7 = (unsigned __int128)(v2 * (__int128)0x6666666666666667) >> 64;
      unint64_t v8 = (v7 >> 4) + ((unint64_t)v7 >> 63);
      uint64_t v9 = v8 <= 1 ? 1 : (v7 >> 4) + ((unint64_t)v7 >> 63);
      while (1)
      {
        if (!*(unsigned char *)(v1 + 40 * v6 + 32))
        {
          unint64_t v10 = *(void *)(v1 + 40 * v6 + 8);
          if (v10 >= 2)
          {
            uint64_t v11 = 0;
            unint64_t v12 = 0;
            unint64_t v13 = *(void *)(v1 + 40 * v6 + 8);
            do
            {
              if (!*(void *)(*(void *)(*((void *)v3 + 13) + 8 * *(void *)(v1 + 40 * v6 + 24) + 8 * v12) + 24))
              {
                ++v11;
                unint64_t v13 = *(void *)(v1 + 40 * v6 + 8);
              }
              ++v12;
            }
            while (v12 < v13);
            if (v11) {
              break;
            }
          }
        }
        if (++v6 == v9) {
          return;
        }
      }
      uint64_t v14 = v11 == v10;
      uint64_t v15 = v11 - v14;
      if (v11 == v14) {
        break;
      }
      uint64_t v285 = v4;
      uint64_t v320 = 0;
      uint64_t v321 = 0;
      double v322 = 0;
      uint64_t v16 = operator new(0x18uLL);
      uint64_t v287 = v6;
      v16[1] = &v317;
      v16[2] = v6;
      *uint64_t v16 = &v317;
      uint64_t v317 = v16;
      uint64_t v318 = v16;
      uint64_t v319 = 1;
      unint64_t v284 = v15 + v8;
      if (v8 < v15 + v8)
      {
        uint64_t v17 = v16;
        uint64_t v18 = 0;
        do
        {
          uint64_t v19 = operator new(0x18uLL);
          v19[1] = &v317;
          v19[2] = v8 + v18;
          *uint64_t v19 = v17;
          v17[1] = v19;
          uint64_t v20 = v18 + 2;
          ++v18;
          uint64_t v17 = v19;
          uint64_t v317 = v19;
          uint64_t v319 = v20;
        }
        while (v15 != v18);
      }
      id v315 = 0;
      uint64_t v316 = 0;
      uint64_t v314 = &v315;
      uint64_t v312 = 0;
      uint64_t v313 = 0;
      uint64_t v311 = &v312;
      long long v309 = 0u;
      long long v310 = 0u;
      *(_OWORD *)long long __p = 0u;
      uint64_t v306 = 0;
      uint64_t v307 = 0;
      uint64_t v305 = &v306;
      *uint64_t v4 = 0;
      v4[1] = 0;
      uint64_t v303 = v4;
      uint64_t v21 = sub_1C499A568(&v303, *((void **)v3 + 7), v5);
      uint64_t v22 = v303;
      uint64_t v23 = *((void *)&v310 + 1);
      if (v303 != v4)
      {
        unint64_t v24 = (char *)__p[1];
        unint64_t v25 = (unsigned char *)v309;
        do
        {
          uint64_t v26 = ((v25 - v24) << 6) - 1;
          if (v25 == v24) {
            uint64_t v26 = 0;
          }
          unint64_t v27 = v310 + v23;
          if (v26 == v27)
          {
            sub_1C49DA0D4((uint64_t)__p);
            unint64_t v24 = (char *)__p[1];
            unint64_t v25 = (unsigned char *)v309;
            unint64_t v27 = *((void *)&v310 + 1) + v310;
          }
          *(void *)(*(void *)&v24[(v27 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v27 & 0x1FF)) = v22[4];
          uint64_t v23 = ++*((void *)&v310 + 1);
          uint64_t v28 = (void *)v22[1];
          if (v28)
          {
            do
            {
              uint64_t v29 = v28;
              uint64_t v28 = (void *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              uint64_t v29 = (void *)v22[2];
              BOOL v30 = *v29 == (void)v22;
              uint64_t v22 = v29;
            }
            while (!v30);
          }
          uint64_t v22 = v29;
        }
        while (v29 != v4);
      }
      if (v23)
      {
        do
        {
          unint64_t v35 = *(void *)(*(void *)((char *)__p[1] + (((unint64_t)v310 >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * (v310 & 0x1FF));
          *(void *)&long long v310 = v310 + 1;
          *((void *)&v310 + 1) = v23 - 1;
          if ((unint64_t)v310 >= 0x400)
          {
            operator delete(*(void **)__p[1]);
            __p[1] = (char *)__p[1] + 8;
            *(void *)&long long v310 = v310 - 512;
          }
          long long v36 = v306;
          if (!v306) {
            goto LABEL_55;
          }
          unint64_t v37 = &v306;
          unint64_t v38 = v306;
          do
          {
            int v39 = v38;
            long long v40 = v37;
            unint64_t v41 = v38[4];
            if (v41 >= v35) {
              unint64_t v37 = (void **)v38;
            }
            else {
              ++v38;
            }
            unint64_t v38 = (void *)*v38;
          }
          while (v38);
          if (v37 == &v306) {
            goto LABEL_55;
          }
          if (v41 < v35) {
            int v39 = v40;
          }
          if (v35 < v39[4])
          {
LABEL_55:
            long long v42 = *v290;
            if (*((void *)*v290 + 5 * v35 + 1))
            {
              uint64_t v43 = 0;
              unint64_t v289 = v35;
              while (1)
              {
                uint64_t v291 = v43;
                unint64_t v44 = *(void **)(*((void *)v3 + 13) + 8 * (v42[5 * v35 + 3] + v43));
                uint64_t v45 = *((void *)v3 + 10);
                unint64_t v46 = 0x8E38E38E38E38E39 * (((uint64_t)v44 - v45) >> 3);
                unint64_t v48 = v44 + 1;
                uint64_t v47 = v44[1];
                unint64_t v292 = *v44;
                if (v47 != v287)
                {
                  if (*v44 != v287)
                  {
                    size_t v139 = v321;
                    if (v321 < v322)
                    {
                      *(void *)uint64_t v321 = v292;
                      *((void *)v139 + 1) = v47;
                      uint64_t v140 = v45 + 8 * (((uint64_t)v44 - v45) >> 3);
                      *((_OWORD *)v139 + 1) = *(_OWORD *)(v140 + 16);
                      *((_OWORD *)v139 + 2) = *(_OWORD *)(v140 + 32);
                      *((_OWORD *)v139 + 3) = *(_OWORD *)(v140 + 48);
                      *((void *)v139 + 8) = *(void *)(v140 + 64);
                      float v141 = v139 + 72;
                      goto LABEL_345;
                    }
                    uint64_t v143 = v320;
                    unint64_t v144 = 0x8E38E38E38E38E39 * ((v321 - v320) >> 3);
                    unint64_t v145 = v144 + 1;
                    if (v144 + 1 > 0x38E38E38E38E38ELL) {
                      sub_1C494A220();
                    }
                    if (0x1C71C71C71C71C72 * ((v322 - v320) >> 3) > v145) {
                      unint64_t v145 = 0x1C71C71C71C71C72 * ((v322 - v320) >> 3);
                    }
                    if (0x8E38E38E38E38E39 * ((v322 - v320) >> 3) >= 0x1C71C71C71C71C7) {
                      unint64_t v146 = 0x38E38E38E38E38ELL;
                    }
                    else {
                      unint64_t v146 = v145;
                    }
                    if (v146 > 0x38E38E38E38E38ELL) {
                      sub_1C4949AA8();
                    }
                    uint64_t v21 = operator new(72 * v146);
                    BOOL v147 = &v21[9 * v144];
                    *(_OWORD *)BOOL v147 = *(_OWORD *)v44;
                    uint64_t v148 = v45 + 8 * (((uint64_t)v44 - v45) >> 3);
                    *((_OWORD *)v147 + 1) = *(_OWORD *)(v148 + 16);
                    *((_OWORD *)v147 + 2) = *(_OWORD *)(v148 + 32);
                    *((_OWORD *)v147 + 3) = *(_OWORD *)(v148 + 48);
                    v147[8] = *(void *)(v148 + 64);
                    if (v139 == v143) {
                      goto LABEL_358;
                    }
                    unint64_t v149 = 0;
                    do
                    {
                      size_t v150 = (char *)&v147[v149 / 8];
                      *(_OWORD *)(v150 - 72) = *(_OWORD *)&v139[v149 - 72];
                      *(_OWORD *)(v150 - 56) = *(_OWORD *)&v139[v149 - 56];
                      *(_OWORD *)(v150 - 40) = *(_OWORD *)&v139[v149 - 40];
                      *(_OWORD *)(v150 - 24) = *(_OWORD *)&v139[v149 - 24];
                      *((void *)v150 - 1) = *(void *)&v139[v149 - 8];
                      v149 -= 72;
                    }
                    while (&v139[v149] != v143);
LABEL_343:
                    float v141 = (char *)(v147 + 9);
                    uint64_t v320 = (char *)&v147[v149 / 8];
                    uint64_t v321 = (char *)(v147 + 9);
                    double v322 = (char *)&v21[9 * v146];
                    if (!v143)
                    {
LABEL_345:
                      uint64_t v321 = v141;
                      BOOL v202 = v306;
                      uint64_t v3 = this;
                      unint64_t v35 = v289;
                      unint64_t v203 = v292;
                      if (!v306) {
                        goto LABEL_354;
                      }
                      goto LABEL_346;
                    }
LABEL_344:
                    operator delete(v143);
                    goto LABEL_345;
                  }
                  BOOL v120 = v318;
                  if (v318 == &v317) {
                    goto LABEL_319;
                  }
                  uint64_t v121 = v45 + 72 * v46;
                  uint64_t v122 = (uint64_t *)(v121 + 24);
                  unint64_t v123 = (long long *)(v121 + 32);
                  float v124 = (long long *)(v121 + 48);
                  uint64_t v125 = (uint64_t *)(v121 + 64);
                  long long v126 = v321;
                  uint64_t v294 = (long long *)(v121 + 48);
                  uint64_t v295 = v48;
                  uint64_t v293 = (uint64_t *)(v121 + 64);
                  while (2)
                  {
                    while (1)
                    {
                      long long v127 = *v48;
                      uint64_t v128 = *v122;
                      long long v129 = *v123;
                      long long v130 = *v124;
                      uint64_t v131 = *v125;
                      uint64_t v132 = v120[2];
                      if (v126 >= v322) {
                        break;
                      }
                      *(void *)long long v126 = v132;
                      *(_OWORD *)(v126 + 8) = v127;
                      *((void *)v126 + 3) = v128;
                      *((_OWORD *)v126 + 2) = v129;
                      *((_OWORD *)v126 + 3) = v130;
                      *((void *)v126 + 8) = v131;
                      v126 += 72;
                      uint64_t v321 = v126;
                      BOOL v120 = (void *)v120[1];
                      if (v120 == &v317) {
                        goto LABEL_319;
                      }
                    }
                    unint64_t v133 = v320;
                    unint64_t v134 = 0x8E38E38E38E38E39 * ((v126 - v320) >> 3) + 1;
                    if (v134 > 0x38E38E38E38E38ELL) {
                      sub_1C494A220();
                    }
                    long long v296 = *v48;
                    long long v298 = *v123;
                    long long v301 = *v124;
                    if (0x1C71C71C71C71C72 * ((v322 - v320) >> 3) > v134) {
                      unint64_t v134 = 0x1C71C71C71C71C72 * ((v322 - v320) >> 3);
                    }
                    if (0x8E38E38E38E38E39 * ((v322 - v320) >> 3) >= 0x1C71C71C71C71C7) {
                      unint64_t v135 = 0x38E38E38E38E38ELL;
                    }
                    else {
                      unint64_t v135 = v134;
                    }
                    if (v135 > 0x38E38E38E38E38ELL) {
                      sub_1C4949AA8();
                    }
                    uint64_t v21 = operator new(72 * v135);
                    unint64_t v136 = (char *)&v21[(v126 - v133) >> 3];
                    *(void *)unint64_t v136 = v132;
                    *(_OWORD *)(v136 + 8) = v296;
                    *((void *)v136 + 3) = v128;
                    *((_OWORD *)v136 + 2) = v298;
                    *((_OWORD *)v136 + 3) = v301;
                    *((void *)v136 + 8) = v131;
                    if (v126 == v133)
                    {
                      long long v126 = v136 + 72;
                      uint64_t v320 = v136;
                      uint64_t v321 = v136 + 72;
                      double v322 = (char *)&v21[9 * v135];
                      if (v133) {
                        goto LABEL_216;
                      }
                    }
                    else
                    {
                      uint64_t v137 = 0;
                      do
                      {
                        uint64_t v138 = &v136[v137];
                        *(_OWORD *)(v138 - 72) = *(_OWORD *)&v126[v137 - 72];
                        *(_OWORD *)(v138 - 56) = *(_OWORD *)&v126[v137 - 56];
                        *(_OWORD *)(v138 - 40) = *(_OWORD *)&v126[v137 - 40];
                        *(_OWORD *)(v138 - 24) = *(_OWORD *)&v126[v137 - 24];
                        *((void *)v138 - 1) = *(void *)&v126[v137 - 8];
                        v137 -= 72;
                      }
                      while (&v126[v137] != v133);
                      long long v126 = v136 + 72;
                      uint64_t v320 = &v136[v137];
                      uint64_t v321 = v136 + 72;
                      double v322 = (char *)&v21[9 * v135];
                      if (v133) {
LABEL_216:
                      }
                        operator delete(v133);
                    }
                    float v124 = v294;
                    unint64_t v48 = v295;
                    uint64_t v125 = v293;
                    uint64_t v321 = v126;
                    BOOL v120 = (void *)v120[1];
                    if (v120 == &v317) {
                      goto LABEL_319;
                    }
                    continue;
                  }
                }
                uint64_t v49 = v45 + 8 * (((uint64_t)v44 - v45) >> 3);
                uint64_t v52 = *(void *)(v49 + 24);
                unint64_t v51 = (uint64_t *)(v49 + 24);
                uint64_t v50 = v52;
                unint64_t v53 = v318;
                if (v318 == &v317)
                {
                  unint64_t v55 = 0;
                  uint64_t v54 = v50;
                  uint64_t v302 = v50;
                  unint64_t v142 = *v44;
                  goto LABEL_260;
                }
                uint64_t v300 = v51;
                uint64_t v54 = v50;
                while (1)
                {
                  unint64_t v55 = v53[2];
                  int v56 = v315;
                  if (!v315) {
                    goto LABEL_72;
                  }
                  int v57 = &v315;
                  int v58 = v315;
                  do
                  {
                    uint64_t v59 = v58;
                    unint64_t v60 = v57;
                    unint64_t v61 = v58[4];
                    if (v61 >= v55) {
                      int v57 = (void **)v58;
                    }
                    else {
                      ++v58;
                    }
                    int v58 = (void *)*v58;
                  }
                  while (v58);
                  if (v57 == &v315) {
                    goto LABEL_72;
                  }
                  if (v61 < v55) {
                    uint64_t v59 = v60;
                  }
                  if (v55 < v59[4])
                  {
LABEL_72:
                    unint64_t v62 = v312;
                    long long v63 = &v312;
LABEL_74:
                    unint64_t v64 = v63;
                    if (v62)
                    {
                      while (1)
                      {
                        long long v63 = (void **)v62;
                        unint64_t v65 = v62[4];
                        if (v55 < v65)
                        {
                          unint64_t v62 = *v63;
                          goto LABEL_74;
                        }
                        if (v65 >= v55) {
                          break;
                        }
                        unint64_t v62 = v63[1];
                        if (!v62)
                        {
                          unint64_t v64 = v63 + 1;
                          goto LABEL_79;
                        }
                      }
                      v63[5] = 0;
                      uint64_t v79 = &v315;
                      unint64_t v80 = &v315;
                      if (v56) {
                        goto LABEL_107;
                      }
LABEL_111:
                      unint64_t v83 = operator new(0x30uLL);
                      v83[4] = v55;
                      *((unsigned char *)v83 + 40) = 0;
                      void *v83 = 0;
                      v83[1] = 0;
                      v83[2] = v80;
                      *uint64_t v79 = v83;
                      uint64_t v84 = v83;
                      if (*v314)
                      {
                        uint64_t v314 = (void *)*v314;
                        uint64_t v84 = (void *)*v79;
                      }
                      float v85 = v315;
                      *((unsigned char *)v84 + 24) = v84 == v315;
                      if (v84 != v85)
                      {
                        do
                        {
                          uint64_t v86 = v84[2];
                          if (*(unsigned char *)(v86 + 24)) {
                            break;
                          }
                          float v87 = *(void **)(v86 + 16);
                          uint64_t v88 = *v87;
                          if (*v87 == v86)
                          {
                            uint64_t v91 = v87[1];
                            if (!v91 || (int v92 = *(unsigned __int8 *)(v91 + 24), v89 = (unsigned char *)(v91 + 24), v92))
                            {
                              if (*(void **)v86 == v84)
                              {
                                *(unsigned char *)(v86 + 24) = 1;
                                *((unsigned char *)v87 + 24) = 0;
                                uint64_t v95 = *(void *)(v86 + 8);
                                *float v87 = v95;
                                if (v95) {
                                  goto LABEL_127;
                                }
                              }
                              else
                              {
                                int v93 = *(uint64_t **)(v86 + 8);
                                uint64_t v94 = *v93;
                                *(void *)(v86 + 8) = *v93;
                                if (v94)
                                {
                                  *(void *)(v94 + 16) = v86;
                                  float v87 = *(void **)(v86 + 16);
                                }
                                v93[2] = (uint64_t)v87;
                                *(void *)(*(void *)(v86 + 16) + 8 * (**(void **)(v86 + 16) != v86)) = v93;
                                uint64_t *v93 = v86;
                                *(void *)(v86 + 16) = v93;
                                float v87 = (void *)v93[2];
                                uint64_t v86 = *v87;
                                *((unsigned char *)v93 + 24) = 1;
                                *((unsigned char *)v87 + 24) = 0;
                                uint64_t v95 = *(void *)(v86 + 8);
                                *float v87 = v95;
                                if (v95) {
LABEL_127:
                                }
                                  *(void *)(v95 + 16) = v87;
                              }
                              *(void *)(v86 + 16) = v87[2];
                              *(void *)(v87[2] + 8 * (*(void *)v87[2] != (void)v87)) = v86;
                              *(void *)(v86 + 8) = v87;
LABEL_134:
                              v87[2] = v86;
                              break;
                            }
                          }
                          else if (!v88 || (v90 = *(unsigned __int8 *)(v88 + 24), BOOL v89 = (unsigned char *)(v88 + 24), v90))
                          {
                            if (*(void **)v86 == v84)
                            {
                              uint64_t v118 = v84[1];
                              *(void *)uint64_t v86 = v118;
                              if (v118)
                              {
                                *(void *)(v118 + 16) = v86;
                                float v87 = *(void **)(v86 + 16);
                              }
                              v84[2] = v87;
                              *(void *)(*(void *)(v86 + 16) + 8 * (**(void **)(v86 + 16) != v86)) = v84;
                              v84[1] = v86;
                              *(void *)(v86 + 16) = v84;
                              float v87 = (void *)v84[2];
                              *((unsigned char *)v84 + 24) = 1;
                              *((unsigned char *)v87 + 24) = 0;
                              uint64_t v86 = v87[1];
                              float v96 = *(void **)v86;
                              v87[1] = *(void *)v86;
                              if (v96) {
LABEL_132:
                              }
                                v96[2] = v87;
                            }
                            else
                            {
                              *(unsigned char *)(v86 + 24) = 1;
                              *((unsigned char *)v87 + 24) = 0;
                              uint64_t v86 = v87[1];
                              float v96 = *(void **)v86;
                              v87[1] = *(void *)v86;
                              if (v96) {
                                goto LABEL_132;
                              }
                            }
                            *(void *)(v86 + 16) = v87[2];
                            *(void *)(v87[2] + 8 * (*(void *)v87[2] != (void)v87)) = v86;
                            *(void *)uint64_t v86 = v87;
                            goto LABEL_134;
                          }
                          *(unsigned char *)(v86 + 24) = 1;
                          uint64_t v84 = v87;
                          *((unsigned char *)v87 + 24) = v87 == v85;
                          unsigned char *v89 = 1;
                        }
                        while (v87 != v85);
                      }
                      ++v316;
                    }
                    else
                    {
LABEL_79:
                      long long v66 = operator new(0x30uLL);
                      v66[4] = v55;
                      v66[5] = 0;
                      void *v66 = 0;
                      v66[1] = 0;
                      v66[2] = v63;
                      *unint64_t v64 = v66;
                      unint64_t v67 = v66;
                      if (*v311)
                      {
                        uint64_t v311 = (void *)*v311;
                        unint64_t v67 = (void *)*v64;
                      }
                      std::string v68 = v312;
                      *((unsigned char *)v67 + 24) = v67 == v312;
                      if (v67 != v68)
                      {
                        do
                        {
                          uint64_t v69 = v67[2];
                          if (*(unsigned char *)(v69 + 24)) {
                            break;
                          }
                          long long v70 = *(void **)(v69 + 16);
                          uint64_t v71 = *v70;
                          if (*v70 == v69)
                          {
                            uint64_t v74 = v70[1];
                            if (!v74 || (int v75 = *(unsigned __int8 *)(v74 + 24), v72 = (unsigned char *)(v74 + 24), v75))
                            {
                              if (*(void **)v69 == v67)
                              {
                                *(unsigned char *)(v69 + 24) = 1;
                                *((unsigned char *)v70 + 24) = 0;
                                uint64_t v78 = *(void *)(v69 + 8);
                                *long long v70 = v78;
                                if (v78) {
                                  goto LABEL_95;
                                }
                              }
                              else
                              {
                                uint64_t v76 = *(uint64_t **)(v69 + 8);
                                uint64_t v77 = *v76;
                                *(void *)(v69 + 8) = *v76;
                                if (v77)
                                {
                                  *(void *)(v77 + 16) = v69;
                                  long long v70 = *(void **)(v69 + 16);
                                }
                                v76[2] = (uint64_t)v70;
                                *(void *)(*(void *)(v69 + 16) + 8 * (**(void **)(v69 + 16) != v69)) = v76;
                                *uint64_t v76 = v69;
                                *(void *)(v69 + 16) = v76;
                                long long v70 = (void *)v76[2];
                                uint64_t v69 = *v70;
                                *((unsigned char *)v76 + 24) = 1;
                                *((unsigned char *)v70 + 24) = 0;
                                uint64_t v78 = *(void *)(v69 + 8);
                                *long long v70 = v78;
                                if (v78) {
LABEL_95:
                                }
                                  *(void *)(v78 + 16) = v70;
                              }
                              *(void *)(v69 + 16) = v70[2];
                              *(void *)(v70[2] + 8 * (*(void *)v70[2] != (void)v70)) = v69;
                              *(void *)(v69 + 8) = v70;
LABEL_103:
                              v70[2] = v69;
                              break;
                            }
                          }
                          else if (!v71 || (int v73 = *(unsigned __int8 *)(v71 + 24), v72 = (unsigned char *)(v71 + 24), v73))
                          {
                            if (*(void **)v69 == v67)
                            {
                              uint64_t v117 = v67[1];
                              *(void *)uint64_t v69 = v117;
                              if (v117)
                              {
                                *(void *)(v117 + 16) = v69;
                                long long v70 = *(void **)(v69 + 16);
                              }
                              v67[2] = v70;
                              *(void *)(*(void *)(v69 + 16) + 8 * (**(void **)(v69 + 16) != v69)) = v67;
                              v67[1] = v69;
                              *(void *)(v69 + 16) = v67;
                              long long v70 = (void *)v67[2];
                              *((unsigned char *)v67 + 24) = 1;
                              *((unsigned char *)v70 + 24) = 0;
                              uint64_t v69 = v70[1];
                              float v81 = *(void **)v69;
                              v70[1] = *(void *)v69;
                              if (v81) {
LABEL_101:
                              }
                                v81[2] = v70;
                            }
                            else
                            {
                              *(unsigned char *)(v69 + 24) = 1;
                              *((unsigned char *)v70 + 24) = 0;
                              uint64_t v69 = v70[1];
                              float v81 = *(void **)v69;
                              v70[1] = *(void *)v69;
                              if (v81) {
                                goto LABEL_101;
                              }
                            }
                            *(void *)(v69 + 16) = v70[2];
                            *(void *)(v70[2] + 8 * (*(void *)v70[2] != (void)v70)) = v69;
                            *(void *)uint64_t v69 = v70;
                            goto LABEL_103;
                          }
                          *(unsigned char *)(v69 + 24) = 1;
                          unint64_t v67 = v70;
                          *((unsigned char *)v70 + 24) = v70 == v68;
                          unsigned char *v72 = 1;
                        }
                        while (v70 != v68);
                      }
                      ++v313;
                      int v56 = v315;
                      v66[5] = 0;
                      uint64_t v79 = &v315;
                      unint64_t v80 = &v315;
                      if (!v56) {
                        goto LABEL_111;
                      }
                      while (1)
                      {
LABEL_107:
                        while (1)
                        {
                          unint64_t v80 = (void **)v56;
                          unint64_t v82 = v56[4];
                          if (v55 >= v82) {
                            break;
                          }
                          int v56 = *v80;
                          uint64_t v79 = v80;
                          if (!*v80) {
                            goto LABEL_111;
                          }
                        }
                        if (v82 >= v55) {
                          break;
                        }
                        int v56 = v80[1];
                        if (!v56)
                        {
                          uint64_t v79 = v80 + 1;
                          goto LABEL_111;
                        }
                      }
                      unint64_t v83 = v80;
                    }
                    *((unsigned char *)v83 + 40) = 0;
                  }
                  if (!v54) {
                    break;
                  }
                  size_t v97 = v315;
                  unint64_t v98 = &v315;
                  size_t v99 = &v315;
                  if (v315)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        size_t v99 = (void **)v97;
                        unint64_t v100 = v97[4];
                        if (v55 >= v100) {
                          break;
                        }
                        size_t v97 = *v99;
                        unint64_t v98 = v99;
                        if (!*v99) {
                          goto LABEL_145;
                        }
                      }
                      if (v100 >= v55) {
                        break;
                      }
                      size_t v97 = v99[1];
                      if (!v97)
                      {
                        unint64_t v98 = v99 + 1;
                        goto LABEL_145;
                      }
                    }
                    if (!*((unsigned char *)v99 + 40)) {
                      goto LABEL_259;
                    }
                  }
                  else
                  {
LABEL_145:
                    uint64_t v101 = operator new(0x30uLL);
                    v101[4] = v55;
                    *((unsigned char *)v101 + 40) = 0;
                    void *v101 = 0;
                    v101[1] = 0;
                    v101[2] = v99;
                    void *v98 = v101;
                    uint64_t v102 = v101;
                    if (*v314)
                    {
                      uint64_t v314 = (void *)*v314;
                      uint64_t v102 = (void *)*v98;
                    }
                    unint64_t v103 = v315;
                    *((unsigned char *)v102 + 24) = v102 == v315;
                    if (v102 != v103)
                    {
                      do
                      {
                        uint64_t v104 = v102[2];
                        if (*(unsigned char *)(v104 + 24)) {
                          break;
                        }
                        uint64_t v105 = *(void **)(v104 + 16);
                        uint64_t v106 = *v105;
                        if (*v105 == v104)
                        {
                          uint64_t v109 = v105[1];
                          if (!v109 || (v110 = *(unsigned __int8 *)(v109 + 24), float v107 = (unsigned char *)(v109 + 24), v110))
                          {
                            if (*(void **)v104 == v102)
                            {
                              *(unsigned char *)(v104 + 24) = 1;
                              *((unsigned char *)v105 + 24) = 0;
                              uint64_t v113 = *(void *)(v104 + 8);
                              void *v105 = v113;
                              if (v113) {
                                goto LABEL_161;
                              }
                            }
                            else
                            {
                              uint64_t v111 = *(uint64_t **)(v104 + 8);
                              uint64_t v112 = *v111;
                              *(void *)(v104 + 8) = *v111;
                              if (v112)
                              {
                                *(void *)(v112 + 16) = v104;
                                uint64_t v105 = *(void **)(v104 + 16);
                              }
                              v111[2] = (uint64_t)v105;
                              *(void *)(*(void *)(v104 + 16) + 8 * (**(void **)(v104 + 16) != v104)) = v111;
                              uint64_t *v111 = v104;
                              *(void *)(v104 + 16) = v111;
                              uint64_t v105 = (void *)v111[2];
                              uint64_t v104 = *v105;
                              *((unsigned char *)v111 + 24) = 1;
                              *((unsigned char *)v105 + 24) = 0;
                              uint64_t v113 = *(void *)(v104 + 8);
                              void *v105 = v113;
                              if (v113) {
LABEL_161:
                              }
                                *(void *)(v113 + 16) = v105;
                            }
                            *(void *)(v104 + 16) = v105[2];
                            *(void *)(v105[2] + 8 * (*(void *)v105[2] != (void)v105)) = v104;
                            *(void *)(v104 + 8) = v105;
LABEL_178:
                            v105[2] = v104;
                            break;
                          }
                        }
                        else if (!v106 || (v108 = *(unsigned __int8 *)(v106 + 24), float v107 = (unsigned char *)(v106 + 24), v108))
                        {
                          if (*(void **)v104 == v102)
                          {
                            uint64_t v119 = v102[1];
                            *(void *)uint64_t v104 = v119;
                            if (v119)
                            {
                              *(void *)(v119 + 16) = v104;
                              uint64_t v105 = *(void **)(v104 + 16);
                            }
                            v102[2] = v105;
                            *(void *)(*(void *)(v104 + 16) + 8 * (**(void **)(v104 + 16) != v104)) = v102;
                            v102[1] = v104;
                            *(void *)(v104 + 16) = v102;
                            uint64_t v105 = (void *)v102[2];
                            *((unsigned char *)v102 + 24) = 1;
                            *((unsigned char *)v105 + 24) = 0;
                            uint64_t v104 = v105[1];
                            unint64_t v116 = *(void **)v104;
                            v105[1] = *(void *)v104;
                            if (v116) {
LABEL_176:
                            }
                              v116[2] = v105;
                          }
                          else
                          {
                            *(unsigned char *)(v104 + 24) = 1;
                            *((unsigned char *)v105 + 24) = 0;
                            uint64_t v104 = v105[1];
                            unint64_t v116 = *(void **)v104;
                            v105[1] = *(void *)v104;
                            if (v116) {
                              goto LABEL_176;
                            }
                          }
                          *(void *)(v104 + 16) = v105[2];
                          *(void *)(v105[2] + 8 * (*(void *)v105[2] != (void)v105)) = v104;
                          *(void *)uint64_t v104 = v105;
                          goto LABEL_178;
                        }
                        *(unsigned char *)(v104 + 24) = 1;
                        uint64_t v102 = v105;
                        *((unsigned char *)v105 + 24) = v105 == v103;
                        unsigned char *v107 = 1;
                      }
                      while (v105 != v103);
                    }
                    ++v316;
                    if (!*((unsigned char *)v101 + 40)) {
                      goto LABEL_259;
                    }
                  }
LABEL_180:
                  unint64_t v53 = (void *)v53[1];
                  if (v53 == &v317)
                  {
                    unint64_t v55 = 0;
                    goto LABEL_259;
                  }
                }
                int8x8_t v114 = v312;
                if (v312)
                {
                  while (1)
                  {
                    while (1)
                    {
                      uint64_t v218 = (void **)v114;
                      unint64_t v115 = v114[4];
                      if (v55 >= v115) {
                        break;
                      }
                      int8x8_t v114 = *v218;
                      unint64_t v219 = v218;
                      if (!*v218) {
                        goto LABEL_235;
                      }
                    }
                    if (v115 >= v55) {
                      break;
                    }
                    int8x8_t v114 = v218[1];
                    if (!v114)
                    {
                      unint64_t v219 = v218 + 1;
                      goto LABEL_235;
                    }
                  }
                  if (!v218[5]) {
                    goto LABEL_259;
                  }
                  goto LABEL_180;
                }
                uint64_t v218 = &v312;
                unint64_t v219 = &v312;
LABEL_235:
                unint64_t v151 = operator new(0x30uLL);
                v151[4] = v55;
                v151[5] = 0;
                *unint64_t v151 = 0;
                v151[1] = 0;
                v151[2] = v218;
                *unint64_t v219 = v151;
                if (*v311)
                {
                  uint64_t v311 = (void *)*v311;
                  unint64_t v151 = (void *)*v219;
                }
                uint8x8_t v152 = v312;
                *((unsigned char *)v151 + 24) = v151 == v312;
                if (v151 != v152)
                {
                  do
                  {
                    uint64_t v153 = v151[2];
                    if (*(unsigned char *)(v153 + 24)) {
                      break;
                    }
                    int8x8_t v154 = *(void **)(v153 + 16);
                    uint64_t v155 = *v154;
                    if (*v154 == v153)
                    {
                      uint64_t v158 = v154[1];
                      if (!v158 || (v159 = *(unsigned __int8 *)(v158 + 24), uint8x8_t v156 = (unsigned char *)(v158 + 24), v159))
                      {
                        if (*(void **)v153 == v151)
                        {
                          *(unsigned char *)(v153 + 24) = 1;
                          *((unsigned char *)v154 + 24) = 0;
                          uint64_t v162 = *(void *)(v153 + 8);
                          *int8x8_t v154 = v162;
                          if (v162) {
                            goto LABEL_251;
                          }
                        }
                        else
                        {
                          uint64_t v160 = *(uint64_t **)(v153 + 8);
                          uint64_t v161 = *v160;
                          *(void *)(v153 + 8) = *v160;
                          if (v161)
                          {
                            *(void *)(v161 + 16) = v153;
                            int8x8_t v154 = *(void **)(v153 + 16);
                          }
                          v160[2] = (uint64_t)v154;
                          *(void *)(*(void *)(v153 + 16) + 8 * (**(void **)(v153 + 16) != v153)) = v160;
                          *uint64_t v160 = v153;
                          *(void *)(v153 + 16) = v160;
                          int8x8_t v154 = (void *)v160[2];
                          uint64_t v153 = *v154;
                          *((unsigned char *)v160 + 24) = 1;
                          *((unsigned char *)v154 + 24) = 0;
                          uint64_t v162 = *(void *)(v153 + 8);
                          *int8x8_t v154 = v162;
                          if (v162) {
LABEL_251:
                          }
                            *(void *)(v162 + 16) = v154;
                        }
                        *(void *)(v153 + 16) = v154[2];
                        *(void *)(v154[2] + 8 * (*(void *)v154[2] != (void)v154)) = v153;
                        *(void *)(v153 + 8) = v154;
LABEL_257:
                        v154[2] = v153;
                        break;
                      }
                    }
                    else if (!v155 || (int v157 = *(unsigned __int8 *)(v155 + 24), v156 = (unsigned char *)(v155 + 24), v157))
                    {
                      if (*(void **)v153 == v151)
                      {
                        uint64_t v217 = v151[1];
                        *(void *)uint64_t v153 = v217;
                        if (v217)
                        {
                          *(void *)(v217 + 16) = v153;
                          int8x8_t v154 = *(void **)(v153 + 16);
                        }
                        v151[2] = v154;
                        *(void *)(*(void *)(v153 + 16) + 8 * (**(void **)(v153 + 16) != v153)) = v151;
                        v151[1] = v153;
                        *(void *)(v153 + 16) = v151;
                        int8x8_t v154 = (void *)v151[2];
                        *((unsigned char *)v151 + 24) = 1;
                        *((unsigned char *)v154 + 24) = 0;
                        uint64_t v153 = v154[1];
                        uint64_t v163 = *(void **)v153;
                        v154[1] = *(void *)v153;
                        if (v163) {
LABEL_255:
                        }
                          v163[2] = v154;
                      }
                      else
                      {
                        *(unsigned char *)(v153 + 24) = 1;
                        *((unsigned char *)v154 + 24) = 0;
                        uint64_t v153 = v154[1];
                        uint64_t v163 = *(void **)v153;
                        v154[1] = *(void *)v153;
                        if (v163) {
                          goto LABEL_255;
                        }
                      }
                      *(void *)(v153 + 16) = v154[2];
                      *(void *)(v154[2] + 8 * (*(void *)v154[2] != (void)v154)) = v153;
                      *(void *)uint64_t v153 = v154;
                      goto LABEL_257;
                    }
                    *(unsigned char *)(v153 + 24) = 1;
                    unint64_t v151 = v154;
                    *((unsigned char *)v154 + 24) = v154 == v152;
                    *uint8x8_t v156 = 1;
                  }
                  while (v154 != v152);
                }
                ++v313;
LABEL_259:
                unint64_t v142 = *v44;
                uint64_t v302 = *v300;
LABEL_260:
                uint64_t v164 = v45 + 72 * v46;
                unint64_t v165 = *(void *)(v164 + 16);
                long long v297 = *(_OWORD *)(v164 + 32);
                long long v299 = *(_OWORD *)(v164 + 48);
                unint64_t v166 = *(void *)(v164 + 64);
                uint64_t v167 = v312;
                float v168 = &v312;
LABEL_262:
                float v169 = v168;
                if (!v167)
                {
LABEL_267:
                  uint64_t v21 = operator new(0x30uLL);
                  v21[4] = v55;
                  v21[5] = 0;
                  *uint64_t v21 = 0;
                  v21[1] = 0;
                  v21[2] = v168;
                  *float v169 = v21;
                  double v171 = v21;
                  if (*v311)
                  {
                    uint64_t v311 = (void *)*v311;
                    double v171 = (void *)*v169;
                  }
                  BOOL v172 = v312;
                  *((unsigned char *)v171 + 24) = v171 == v312;
                  if (v171 != v172)
                  {
                    do
                    {
                      uint64_t v173 = v171[2];
                      if (*(unsigned char *)(v173 + 24)) {
                        break;
                      }
                      unint64_t v174 = *(void **)(v173 + 16);
                      uint64_t v175 = *v174;
                      if (*v174 == v173)
                      {
                        uint64_t v178 = v174[1];
                        if (!v178 || (v179 = *(unsigned __int8 *)(v178 + 24), unint64_t v176 = (unsigned char *)(v178 + 24), v179))
                        {
                          if (*(void **)v173 == v171)
                          {
                            *(unsigned char *)(v173 + 24) = 1;
                            *((unsigned char *)v174 + 24) = 0;
                            uint64_t v182 = *(void *)(v173 + 8);
                            *unint64_t v174 = v182;
                            if (v182) {
                              goto LABEL_283;
                            }
                          }
                          else
                          {
                            unint64_t v180 = *(uint64_t **)(v173 + 8);
                            uint64_t v181 = *v180;
                            *(void *)(v173 + 8) = *v180;
                            if (v181)
                            {
                              *(void *)(v181 + 16) = v173;
                              unint64_t v174 = *(void **)(v173 + 16);
                            }
                            v180[2] = (uint64_t)v174;
                            *(void *)(*(void *)(v173 + 16) + 8 * (**(void **)(v173 + 16) != v173)) = v180;
                            *unint64_t v180 = v173;
                            *(void *)(v173 + 16) = v180;
                            unint64_t v174 = (void *)v180[2];
                            uint64_t v173 = *v174;
                            *((unsigned char *)v180 + 24) = 1;
                            *((unsigned char *)v174 + 24) = 0;
                            uint64_t v182 = *(void *)(v173 + 8);
                            *unint64_t v174 = v182;
                            if (v182) {
LABEL_283:
                            }
                              *(void *)(v182 + 16) = v174;
                          }
                          *(void *)(v173 + 16) = v174[2];
                          *(void *)(v174[2] + 8 * (*(void *)v174[2] != (void)v174)) = v173;
                          *(void *)(v173 + 8) = v174;
LABEL_315:
                          v174[2] = v173;
                          break;
                        }
                      }
                      else if (!v175 || (v177 = *(unsigned __int8 *)(v175 + 24), unint64_t v176 = (unsigned char *)(v175 + 24), v177))
                      {
                        if (*(void **)v173 == v171)
                        {
                          uint64_t v204 = v171[1];
                          *(void *)uint64_t v173 = v204;
                          if (v204)
                          {
                            *(void *)(v204 + 16) = v173;
                            unint64_t v174 = *(void **)(v173 + 16);
                          }
                          v171[2] = v174;
                          *(void *)(*(void *)(v173 + 16) + 8 * (**(void **)(v173 + 16) != v173)) = v171;
                          v171[1] = v173;
                          *(void *)(v173 + 16) = v171;
                          unint64_t v174 = (void *)v171[2];
                          *((unsigned char *)v171 + 24) = 1;
                          *((unsigned char *)v174 + 24) = 0;
                          uint64_t v173 = v174[1];
                          float v199 = *(void **)v173;
                          v174[1] = *(void *)v173;
                          if (v199) {
LABEL_313:
                          }
                            v199[2] = v174;
                        }
                        else
                        {
                          *(unsigned char *)(v173 + 24) = 1;
                          *((unsigned char *)v174 + 24) = 0;
                          uint64_t v173 = v174[1];
                          float v199 = *(void **)v173;
                          v174[1] = *(void *)v173;
                          if (v199) {
                            goto LABEL_313;
                          }
                        }
                        *(void *)(v173 + 16) = v174[2];
                        *(void *)(v174[2] + 8 * (*(void *)v174[2] != (void)v174)) = v173;
                        *(void *)uint64_t v173 = v174;
                        goto LABEL_315;
                      }
                      *(unsigned char *)(v173 + 24) = 1;
                      double v171 = v174;
                      *((unsigned char *)v174 + 24) = v174 == v172;
                      *unint64_t v176 = 1;
                    }
                    while (v174 != v172);
                  }
                  ++v313;
                  v21[5] = 1;
                  if (!v54) {
                    goto LABEL_286;
                  }
LABEL_317:
                  uint64_t v201 = v321;
                  int8x8_t v200 = v322;
                  if (v321 >= v322) {
                    goto LABEL_333;
                  }
                  goto LABEL_318;
                }
                while (1)
                {
                  float v168 = (void **)v167;
                  unint64_t v170 = v167[4];
                  if (v55 < v170)
                  {
                    uint64_t v167 = *v168;
                    goto LABEL_262;
                  }
                  if (v170 >= v55) {
                    break;
                  }
                  uint64_t v167 = v168[1];
                  if (!v167)
                  {
                    float v169 = v168 + 1;
                    goto LABEL_267;
                  }
                }
                uint64_t v21 = v168;
                v168[5] = (void *)((char *)v168[5] + 1);
                if (v54) {
                  goto LABEL_317;
                }
LABEL_286:
                uint64_t v183 = v315;
                uint64_t v184 = &v315;
                uint64_t v185 = &v315;
                if (v315)
                {
                  while (1)
                  {
                    while (1)
                    {
                      uint64_t v185 = (void **)v183;
                      unint64_t v186 = v183[4];
                      if (v55 >= v186) {
                        break;
                      }
                      uint64_t v183 = *v185;
                      uint64_t v184 = v185;
                      if (!*v185) {
                        goto LABEL_293;
                      }
                    }
                    if (v186 >= v55) {
                      break;
                    }
                    uint64_t v183 = v185[1];
                    if (!v183)
                    {
                      uint64_t v184 = v185 + 1;
                      goto LABEL_293;
                    }
                  }
                  uint64_t v21 = v185;
                  *((unsigned char *)v185 + 40) = 1;
                  uint64_t v201 = v321;
                  int8x8_t v200 = v322;
                  if (v321 < v322) {
                    goto LABEL_318;
                  }
LABEL_333:
                  uint64_t v143 = v320;
                  unint64_t v206 = 0x8E38E38E38E38E39 * ((v201 - v320) >> 3) + 1;
                  if (v206 > 0x38E38E38E38E38ELL) {
                    sub_1C494A220();
                  }
                  unint64_t v207 = 0x8E38E38E38E38E39 * ((v200 - v320) >> 3);
                  if (2 * v207 > v206) {
                    unint64_t v206 = 2 * v207;
                  }
                  if (v207 >= 0x1C71C71C71C71C7) {
                    unint64_t v146 = 0x38E38E38E38E38ELL;
                  }
                  else {
                    unint64_t v146 = v206;
                  }
                  if (v146 > 0x38E38E38E38E38ELL) {
                    sub_1C4949AA8();
                  }
                  uint64_t v21 = operator new(72 * v146);
                  BOOL v147 = &v21[(v201 - v143) >> 3];
                  *BOOL v147 = v142;
                  v147[1] = v55;
                  v147[2] = v165;
                  v147[3] = v302;
                  *((_OWORD *)v147 + 2) = v297;
                  *((_OWORD *)v147 + 3) = v299;
                  v147[8] = v166;
                  if (v201 != v143)
                  {
                    unint64_t v149 = 0;
                    do
                    {
                      uint64_t v208 = (char *)&v147[v149 / 8];
                      *(_OWORD *)(v208 - 72) = *(_OWORD *)&v201[v149 - 72];
                      *(_OWORD *)(v208 - 56) = *(_OWORD *)&v201[v149 - 56];
                      *(_OWORD *)(v208 - 40) = *(_OWORD *)&v201[v149 - 40];
                      *(_OWORD *)(v208 - 24) = *(_OWORD *)&v201[v149 - 24];
                      *((void *)v208 - 1) = *(void *)&v201[v149 - 8];
                      v149 -= 72;
                    }
                    while (&v201[v149] != v143);
                    goto LABEL_343;
                  }
LABEL_358:
                  float v141 = (char *)(v147 + 9);
                  uint64_t v320 = (char *)v147;
                  uint64_t v321 = (char *)(v147 + 9);
                  double v322 = (char *)&v21[9 * v146];
                  if (!v143) {
                    goto LABEL_345;
                  }
                  goto LABEL_344;
                }
LABEL_293:
                uint64_t v21 = operator new(0x30uLL);
                v21[4] = v55;
                *((unsigned char *)v21 + 40) = 0;
                *uint64_t v21 = 0;
                v21[1] = 0;
                v21[2] = v185;
                void *v184 = v21;
                uint64_t v187 = v21;
                if (*v314)
                {
                  uint64_t v314 = (void *)*v314;
                  uint64_t v187 = (void *)*v184;
                }
                unint64_t v188 = v315;
                *((unsigned char *)v187 + 24) = v187 == v315;
                if (v187 != v188)
                {
                  do
                  {
                    uint64_t v189 = v187[2];
                    if (*(unsigned char *)(v189 + 24)) {
                      break;
                    }
                    uint8x8_t v190 = *(void **)(v189 + 16);
                    uint64_t v191 = *v190;
                    if (*v190 == v189)
                    {
                      uint64_t v194 = v190[1];
                      if (!v194 || (v195 = *(unsigned __int8 *)(v194 + 24), double v192 = (unsigned char *)(v194 + 24), v195))
                      {
                        if (*(void **)v189 == v187)
                        {
                          *(unsigned char *)(v189 + 24) = 1;
                          *((unsigned char *)v190 + 24) = 0;
                          uint64_t v198 = *(void *)(v189 + 8);
                          *uint8x8_t v190 = v198;
                          if (v198) {
                            goto LABEL_309;
                          }
                        }
                        else
                        {
                          int8x8_t v196 = *(uint64_t **)(v189 + 8);
                          uint64_t v197 = *v196;
                          *(void *)(v189 + 8) = *v196;
                          if (v197)
                          {
                            *(void *)(v197 + 16) = v189;
                            uint8x8_t v190 = *(void **)(v189 + 16);
                          }
                          v196[2] = (uint64_t)v190;
                          *(void *)(*(void *)(v189 + 16) + 8 * (**(void **)(v189 + 16) != v189)) = v196;
                          *int8x8_t v196 = v189;
                          *(void *)(v189 + 16) = v196;
                          uint8x8_t v190 = (void *)v196[2];
                          uint64_t v189 = *v190;
                          *((unsigned char *)v196 + 24) = 1;
                          *((unsigned char *)v190 + 24) = 0;
                          uint64_t v198 = *(void *)(v189 + 8);
                          *uint8x8_t v190 = v198;
                          if (v198) {
LABEL_309:
                          }
                            *(void *)(v198 + 16) = v190;
                        }
                        *(void *)(v189 + 16) = v190[2];
                        *(void *)(v190[2] + 8 * (*(void *)v190[2] != (void)v190)) = v189;
                        *(void *)(v189 + 8) = v190;
LABEL_331:
                        v190[2] = v189;
                        break;
                      }
                    }
                    else if (!v191 || (v193 = *(unsigned __int8 *)(v191 + 24), double v192 = (unsigned char *)(v191 + 24), v193))
                    {
                      if (*(void **)v189 == v187)
                      {
                        uint64_t v220 = v187[1];
                        *(void *)uint64_t v189 = v220;
                        if (v220)
                        {
                          *(void *)(v220 + 16) = v189;
                          uint8x8_t v190 = *(void **)(v189 + 16);
                        }
                        v187[2] = v190;
                        *(void *)(*(void *)(v189 + 16) + 8 * (**(void **)(v189 + 16) != v189)) = v187;
                        v187[1] = v189;
                        *(void *)(v189 + 16) = v187;
                        uint8x8_t v190 = (void *)v187[2];
                        *((unsigned char *)v187 + 24) = 1;
                        *((unsigned char *)v190 + 24) = 0;
                        uint64_t v189 = v190[1];
                        size_t v205 = *(void **)v189;
                        v190[1] = *(void *)v189;
                        if (v205) {
LABEL_329:
                        }
                          v205[2] = v190;
                      }
                      else
                      {
                        *(unsigned char *)(v189 + 24) = 1;
                        *((unsigned char *)v190 + 24) = 0;
                        uint64_t v189 = v190[1];
                        size_t v205 = *(void **)v189;
                        v190[1] = *(void *)v189;
                        if (v205) {
                          goto LABEL_329;
                        }
                      }
                      *(void *)(v189 + 16) = v190[2];
                      *(void *)(v190[2] + 8 * (*(void *)v190[2] != (void)v190)) = v189;
                      *(void *)uint64_t v189 = v190;
                      goto LABEL_331;
                    }
                    *(unsigned char *)(v189 + 24) = 1;
                    uint64_t v187 = v190;
                    *((unsigned char *)v190 + 24) = v190 == v188;
                    *double v192 = 1;
                  }
                  while (v190 != v188);
                }
                ++v316;
                *((unsigned char *)v21 + 40) = 1;
                uint64_t v201 = v321;
                int8x8_t v200 = v322;
                if (v321 >= v322) {
                  goto LABEL_333;
                }
LABEL_318:
                *(void *)uint64_t v201 = v142;
                *((void *)v201 + 1) = v55;
                *((void *)v201 + 2) = v165;
                *((void *)v201 + 3) = v302;
                *((_OWORD *)v201 + 2) = v297;
                *((_OWORD *)v201 + 3) = v299;
                *((void *)v201 + 8) = v166;
                uint64_t v321 = v201 + 72;
LABEL_319:
                BOOL v202 = v306;
                uint64_t v3 = this;
                unint64_t v35 = v289;
                unint64_t v203 = v292;
                if (!v306)
                {
LABEL_354:
                  uint8x8_t v214 = (char *)__p[1];
                  unint64_t v215 = (((void)v309 - (unint64_t)__p[1]) << 6) - 1;
                  if ((void *)v309 == __p[1]) {
                    unint64_t v215 = 0;
                  }
                  unint64_t v216 = *((void *)&v310 + 1) + v310;
                  if (v215 == *((void *)&v310 + 1) + (void)v310)
                  {
                    sub_1C49DA0D4((uint64_t)__p);
                    uint8x8_t v214 = (char *)__p[1];
                    unint64_t v216 = *((void *)&v310 + 1) + v310;
                  }
                  *(void *)(*(void *)&v214[(v216 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v216 & 0x1FF)) = v203;
                  ++*((void *)&v310 + 1);
                  goto LABEL_58;
                }
LABEL_346:
                unint64_t v209 = &v306;
                do
                {
                  unint64_t v210 = v202;
                  CGFloat v211 = v209;
                  unint64_t v212 = v202[4];
                  int8x8_t v213 = v202 + 1;
                  if (v212 >= v203)
                  {
                    int8x8_t v213 = v210;
                    unint64_t v209 = (void **)v210;
                  }
                  BOOL v202 = (void *)*v213;
                }
                while (v202);
                if (v209 == &v306) {
                  goto LABEL_354;
                }
                if (v212 < v203) {
                  unint64_t v210 = v211;
                }
                if (v203 < v210[4]) {
                  goto LABEL_354;
                }
LABEL_58:
                uint64_t v43 = v291 + 1;
                long long v42 = *v290;
                if ((unint64_t)(v291 + 1) >= *((void *)*v290 + 5 * v35 + 1))
                {
                  long long v36 = v306;
                  uint64_t v4 = v285;
                  uint64_t v5 = v290 + 4;
                  break;
                }
              }
            }
            uint64_t v221 = &v306;
LABEL_377:
            uint64_t v222 = v221;
            if (v36)
            {
              do
              {
                uint64_t v221 = (void **)v36;
                unint64_t v223 = v36[4];
                if (v35 < v223)
                {
                  long long v36 = *v221;
                  goto LABEL_377;
                }
                if (v223 >= v35) {
                  goto LABEL_42;
                }
                long long v36 = v221[1];
              }
              while (v36);
              uint64_t v222 = v221 + 1;
            }
            uint64_t v21 = operator new(0x28uLL);
            v21[4] = v35;
            *uint64_t v21 = 0;
            v21[1] = 0;
            v21[2] = v221;
            *uint64_t v222 = v21;
            if (*v305)
            {
              uint64_t v305 = (void *)*v305;
              uint64_t v21 = (void *)*v222;
            }
            uint8x8_t v224 = v306;
            BOOL v30 = v21 == v306;
            *((unsigned char *)v21 + 24) = v21 == v306;
            if (!v30)
            {
              do
              {
                uint64_t v225 = v21[2];
                if (*(unsigned char *)(v225 + 24)) {
                  break;
                }
                uint64_t v226 = *(void **)(v225 + 16);
                uint64_t v227 = *v226;
                if (*v226 == v225)
                {
                  uint64_t v230 = v226[1];
                  if (!v230 || (v231 = *(unsigned __int8 *)(v230 + 24), uint64_t v228 = (unsigned char *)(v230 + 24), v231))
                  {
                    if (*(void **)v225 == v21)
                    {
                      *(unsigned char *)(v225 + 24) = 1;
                      *((unsigned char *)v226 + 24) = 0;
                      uint64_t v234 = *(void *)(v225 + 8);
                      *uint64_t v226 = v234;
                      if (v234) {
                        goto LABEL_399;
                      }
                    }
                    else
                    {
                      uint8x8_t v232 = *(uint64_t **)(v225 + 8);
                      uint64_t v233 = *v232;
                      *(void *)(v225 + 8) = *v232;
                      if (v233)
                      {
                        *(void *)(v233 + 16) = v225;
                        uint64_t v226 = *(void **)(v225 + 16);
                      }
                      v232[2] = (uint64_t)v226;
                      *(void *)(*(void *)(v225 + 16) + 8 * (**(void **)(v225 + 16) != v225)) = v232;
                      uint64_t *v232 = v225;
                      *(void *)(v225 + 16) = v232;
                      uint64_t v226 = (void *)v232[2];
                      uint64_t v225 = *v226;
                      *((unsigned char *)v232 + 24) = 1;
                      *((unsigned char *)v226 + 24) = 0;
                      uint64_t v234 = *(void *)(v225 + 8);
                      *uint64_t v226 = v234;
                      if (v234) {
LABEL_399:
                      }
                        *(void *)(v234 + 16) = v226;
                    }
                    *(void *)(v225 + 16) = v226[2];
                    *(void *)(v226[2] + 8 * (*(void *)v226[2] != (void)v226)) = v225;
                    *(void *)(v225 + 8) = v226;
LABEL_40:
                    v226[2] = v225;
                    break;
                  }
                }
                else if (!v227 || (v229 = *(unsigned __int8 *)(v227 + 24), uint64_t v228 = (unsigned char *)(v227 + 24), v229))
                {
                  if (*(void **)v225 == v21)
                  {
                    uint64_t v236 = v21[1];
                    *(void *)uint64_t v225 = v236;
                    if (v236)
                    {
                      *(void *)(v236 + 16) = v225;
                      uint64_t v226 = *(void **)(v225 + 16);
                    }
                    v21[2] = v226;
                    *(void *)(*(void *)(v225 + 16) + 8 * (**(void **)(v225 + 16) != v225)) = v21;
                    v21[1] = v225;
                    *(void *)(v225 + 16) = v21;
                    uint64_t v226 = (void *)v21[2];
                    *((unsigned char *)v21 + 24) = 1;
                    *((unsigned char *)v226 + 24) = 0;
                    uint64_t v225 = v226[1];
                    uint64_t v235 = *(void **)v225;
                    v226[1] = *(void *)v225;
                    if (!v235) {
                      goto LABEL_39;
                    }
                  }
                  else
                  {
                    uint64_t v21 = (void *)v21[2];
                    *(unsigned char *)(v225 + 24) = 1;
                    *((unsigned char *)v226 + 24) = 0;
                    uint64_t v225 = v226[1];
                    uint64_t v235 = *(void **)v225;
                    v226[1] = *(void *)v225;
                    if (!v235) {
                      goto LABEL_39;
                    }
                  }
                  v235[2] = v226;
LABEL_39:
                  *(void *)(v225 + 16) = v226[2];
                  *(void *)(v226[2] + 8 * (*(void *)v226[2] != (void)v226)) = v225;
                  *(void *)uint64_t v225 = v226;
                  goto LABEL_40;
                }
                *(unsigned char *)(v225 + 24) = 1;
                uint64_t v21 = v226;
                *((unsigned char *)v226 + 24) = v226 == v224;
                *uint64_t v228 = 1;
              }
              while (v226 != v224);
            }
            ++v307;
          }
LABEL_42:
          uint64_t v23 = *((void *)&v310 + 1);
        }
        while (*((void *)&v310 + 1));
      }
      uint64_t v31 = *((void *)v3 + 4);
      uint64_t v32 = *((void *)v3 + 5);
      if (v32 != v31)
      {
        *((void *)v3 + 5) = v31;
        uint64_t v32 = v31;
      }
      uint64_t v33 = *((void *)v3 + 10);
      if (*((void *)v3 + 11) != v33) {
        *((void *)v3 + 11) = v33;
      }
      *((void *)v3 + 14) = *((void *)v3 + 13);
      unint64_t v34 = 0xCCCCCCCCCCCCCCCDLL * ((v32 - v31) >> 3);
      if (v284 <= v34)
      {
        if (v284 < v34) {
          *((void *)v3 + 5) = v31 + 40 * v284;
        }
      }
      else
      {
        sub_1C499C97C(v290, v284 - v34);
      }
      sub_1C4B800AC((uint64_t)v21, (uint64_t)&v320);
      unint64_t v237 = v320;
      unint64_t v238 = v321;
      if (v320 != v321)
      {
        int8x8_t v239 = (char *)*((void *)v3 + 11);
        do
        {
          while (1)
          {
            unint64_t v240 = *((void *)v3 + 12);
            if ((unint64_t)v239 >= v240) {
              break;
            }
            *(_OWORD *)int8x8_t v239 = *v237;
            *((_OWORD *)v239 + 1) = v237[1];
            *((_OWORD *)v239 + 2) = v237[2];
            *((_OWORD *)v239 + 3) = v237[3];
            *((void *)v239 + 8) = *((void *)v237 + 8);
            v239 += 72;
            *((void *)v3 + 11) = v239;
            unint64_t v237 = (_OWORD *)((char *)v237 + 72);
            if (v237 == (_OWORD *)v238) {
              goto LABEL_432;
            }
          }
          unint64_t v241 = (char *)*v286;
          unint64_t v242 = 0x8E38E38E38E38E39 * ((v239 - (unsigned char *)*v286) >> 3);
          unint64_t v243 = v242 + 1;
          if (v242 + 1 > 0x38E38E38E38E38ELL) {
            sub_1C494A220();
          }
          unint64_t v244 = 0x8E38E38E38E38E39 * ((uint64_t)(v240 - (void)v241) >> 3);
          if (2 * v244 > v243) {
            unint64_t v243 = 2 * v244;
          }
          if (v244 >= 0x1C71C71C71C71C7) {
            unint64_t v245 = 0x38E38E38E38E38ELL;
          }
          else {
            unint64_t v245 = v243;
          }
          if (v245 > 0x38E38E38E38E38ELL) {
            sub_1C4949AA8();
          }
          unint64_t v246 = (char *)operator new(72 * v245);
          char v247 = &v246[72 * v242];
          *(_OWORD *)char v247 = *v237;
          *((_OWORD *)v247 + 1) = v237[1];
          *((_OWORD *)v247 + 2) = v237[2];
          *((_OWORD *)v247 + 3) = v237[3];
          *((void *)v247 + 8) = *((void *)v237 + 8);
          if (v239 == v241)
          {
            uint64_t v5 = v290 + 4;
            int8x8_t v239 = v247 + 72;
            *((void *)v3 + 10) = v247;
            *((void *)v3 + 11) = v247 + 72;
            *((void *)v3 + 12) = &v246[72 * v245];
            if (!v241) {
              goto LABEL_428;
            }
          }
          else
          {
            uint64_t v248 = 0;
            uint64_t v5 = v290 + 4;
            do
            {
              double v249 = &v247[v248];
              *(_OWORD *)(v249 - 72) = *(_OWORD *)&v239[v248 - 72];
              *(_OWORD *)(v249 - 56) = *(_OWORD *)&v239[v248 - 56];
              *(_OWORD *)(v249 - 40) = *(_OWORD *)&v239[v248 - 40];
              *(_OWORD *)(v249 - 24) = *(_OWORD *)&v239[v248 - 24];
              *((void *)v249 - 1) = *(void *)&v239[v248 - 8];
              v248 -= 72;
            }
            while (&v239[v248] != v241);
            int8x8_t v239 = v247 + 72;
            *((void *)v3 + 10) = &v247[v248];
            *((void *)v3 + 11) = v247 + 72;
            *((void *)v3 + 12) = &v246[72 * v245];
            if (!v241) {
              goto LABEL_428;
            }
          }
          operator delete(v241);
LABEL_428:
          *((void *)v3 + 11) = v239;
          unint64_t v237 = (_OWORD *)((char *)v237 + 72);
        }
        while (v237 != (_OWORD *)v238);
      }
LABEL_432:
      Network::prepareNetwork(v3);
      uint64_t v250 = v303;
      if (v303 != v4)
      {
        do
        {
          unint64_t v256 = v250[4];
          uint64_t v257 = (void *)*v5;
          uint64_t v258 = v5;
          unint64_t v259 = v5;
          if (*v5)
          {
            while (1)
            {
              while (1)
              {
                unint64_t v259 = v257;
                unint64_t v260 = v257[4];
                if (v260 <= v256) {
                  break;
                }
                uint64_t v257 = (void *)*v259;
                uint64_t v258 = v259;
                if (!*v259) {
                  goto LABEL_446;
                }
              }
              if (v260 >= v256) {
                break;
              }
              uint64_t v257 = (void *)v259[1];
              if (!v257)
              {
                uint64_t v258 = v259 + 1;
                goto LABEL_446;
              }
            }
          }
          else
          {
LABEL_446:
            uint64_t v261 = operator new(0x28uLL);
            v261[4] = v256;
            *uint64_t v261 = 0;
            v261[1] = 0;
            v261[2] = v259;
            *uint64_t v258 = v261;
            uint64_t v262 = **((void **)v3 + 7);
            if (v262)
            {
              *((void *)v3 + 7) = v262;
              uint64_t v261 = (void *)*v258;
            }
            unint64_t v263 = (unsigned char *)*v5;
            BOOL v30 = v261 == (void *)*v5;
            *((unsigned char *)v261 + 24) = v30;
            if (!v30)
            {
              do
              {
                uint64_t v264 = v261[2];
                if (*(unsigned char *)(v264 + 24)) {
                  break;
                }
                uint64_t v265 = *(unsigned char **)(v264 + 16);
                uint64_t v266 = *(void *)v265;
                if (*(void *)v265 == v264)
                {
                  uint64_t v269 = *((void *)v265 + 1);
                  if (!v269 || (v270 = *(unsigned __int8 *)(v269 + 24), CGFloat v267 = (unsigned char *)(v269 + 24), v270))
                  {
                    if (*(void **)v264 == v261)
                    {
                      *(unsigned char *)(v264 + 24) = 1;
                      v265[24] = 0;
                      uint64_t v273 = *(void *)(v264 + 8);
                      *(void *)uint64_t v265 = v273;
                      if (v273) {
                        goto LABEL_463;
                      }
                    }
                    else
                    {
                      uint64_t v271 = *(uint64_t **)(v264 + 8);
                      uint64_t v272 = *v271;
                      *(void *)(v264 + 8) = *v271;
                      if (v272)
                      {
                        *(void *)(v272 + 16) = v264;
                        uint64_t v265 = *(unsigned char **)(v264 + 16);
                      }
                      v271[2] = (uint64_t)v265;
                      *(void *)(*(void *)(v264 + 16) + 8 * (**(void **)(v264 + 16) != v264)) = v271;
                      uint64_t *v271 = v264;
                      *(void *)(v264 + 16) = v271;
                      uint64_t v265 = (unsigned char *)v271[2];
                      uint64_t v264 = *(void *)v265;
                      *((unsigned char *)v271 + 24) = 1;
                      v265[24] = 0;
                      uint64_t v273 = *(void *)(v264 + 8);
                      *(void *)uint64_t v265 = v273;
                      if (v273) {
LABEL_463:
                      }
                        *(void *)(v273 + 16) = v265;
                    }
                    *(void *)(v264 + 16) = *((void *)v265 + 2);
                    *(void *)(*((void *)v265 + 2) + 8 * (**((void **)v265 + 2) != (void)v265)) = v264;
                    *(void *)(v264 + 8) = v265;
LABEL_469:
                    *((void *)v265 + 2) = v264;
                    break;
                  }
                }
                else if (!v266 || (v268 = *(unsigned __int8 *)(v266 + 24), CGFloat v267 = (unsigned char *)(v266 + 24), v268))
                {
                  if (*(void **)v264 == v261)
                  {
                    uint64_t v278 = v261[1];
                    *(void *)uint64_t v264 = v278;
                    if (v278)
                    {
                      *(void *)(v278 + 16) = v264;
                      uint64_t v265 = *(unsigned char **)(v264 + 16);
                    }
                    v261[2] = v265;
                    *(void *)(*(void *)(v264 + 16) + 8 * (**(void **)(v264 + 16) != v264)) = v261;
                    v261[1] = v264;
                    *(void *)(v264 + 16) = v261;
                    uint64_t v265 = (unsigned char *)v261[2];
                    *((unsigned char *)v261 + 24) = 1;
                    v265[24] = 0;
                    uint64_t v264 = *((void *)v265 + 1);
                    long long v274 = *(void **)v264;
                    *((void *)v265 + 1) = *(void *)v264;
                    if (v274) {
LABEL_467:
                    }
                      v274[2] = v265;
                  }
                  else
                  {
                    *(unsigned char *)(v264 + 24) = 1;
                    v265[24] = 0;
                    uint64_t v264 = *((void *)v265 + 1);
                    long long v274 = *(void **)v264;
                    *((void *)v265 + 1) = *(void *)v264;
                    if (v274) {
                      goto LABEL_467;
                    }
                  }
                  *(void *)(v264 + 16) = *((void *)v265 + 2);
                  *(void *)(*((void *)v265 + 2) + 8 * (**((void **)v265 + 2) != (void)v265)) = v264;
                  *(void *)uint64_t v264 = v265;
                  goto LABEL_469;
                }
                *(unsigned char *)(v264 + 24) = 1;
                uint64_t v261 = v265;
                v265[24] = v265 == v263;
                *CGFloat v267 = 1;
              }
              while (v265 != v263);
            }
            ++*((void *)v3 + 9);
          }
          uint64_t v275 = *((void *)v3 + 4);
          if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)v3 + 5) - v275) >> 3) >= v256) {
            *(unsigned char *)(v275 + 40 * v256 + 32) = 1;
          }
          unint64_t v276 = (void *)v250[1];
          if (v276)
          {
            do
            {
              uint64_t v277 = v276;
              unint64_t v276 = (void *)*v276;
            }
            while (v276);
          }
          else
          {
            do
            {
              uint64_t v277 = (void *)v250[2];
              BOOL v30 = *v277 == (void)v250;
              uint64_t v250 = v277;
            }
            while (!v30);
          }
          uint64_t v250 = v277;
        }
        while (v277 != v4);
      }
      sub_1C4999C7C((uint64_t)&v303, v304);
      sub_1C4999C7C((uint64_t)&v305, v306);
      CGFloat v251 = (void **)__p[1];
      BOOL v252 = (void **)v309;
      *((void *)&v310 + 1) = 0;
      unint64_t v253 = v309 - (unint64_t)__p[1];
      if ((unint64_t)v309 - (unint64_t)__p[1] >= 0x11)
      {
        do
        {
          operator delete(*v251);
          BOOL v252 = (void **)v309;
          CGFloat v251 = (void **)((char *)__p[1] + 8);
          __p[1] = v251;
          unint64_t v253 = v309 - (void)v251;
        }
        while ((void)v309 - (void)v251 > 0x10uLL);
      }
      unint64_t v254 = v253 >> 3;
      if (v254 == 1)
      {
        uint64_t v255 = 256;
      }
      else
      {
        if (v254 != 2) {
          goto LABEL_487;
        }
        uint64_t v255 = 512;
      }
      *(void *)&long long v310 = v255;
LABEL_487:
      if (v251 != v252)
      {
        do
        {
          char v279 = *v251++;
          operator delete(v279);
        }
        while (v251 != v252);
        if ((void *)v309 != __p[1]) {
          *(void *)&long long v309 = v309 + (((unint64_t)__p[1] - v309 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
      }
      if (__p[0]) {
        operator delete(__p[0]);
      }
      sub_1C4999C7C((uint64_t)&v311, v312);
      sub_1C49A1374(v315);
      if (v319)
      {
        uint64_t v281 = v317;
        uint64_t v280 = v318;
        uint64_t v282 = *v318;
        *(void *)(v282 + 8) = v317[1];
        *(void *)v281[1] = v282;
        uint64_t v319 = 0;
        if (v280 != &v317)
        {
          do
          {
            uint64_t v283 = (void *)v280[1];
            operator delete(v280);
            uint64_t v280 = v283;
          }
          while (v283 != &v317);
        }
      }
      if (v320)
      {
        uint64_t v321 = v320;
        operator delete(v320);
      }
      uint64_t v1 = *((void *)v3 + 4);
      uint64_t v2 = *((void *)v3 + 5) - v1;
    }
    while (v2);
  }
}

void sub_1C4B7D33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,void *a32,uint64_t a33,char a34,void *a35,uint64_t a36,void *__p,void **a38,void **a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  sub_1C4999C7C((uint64_t)&a31, a32);
  sub_1C4999C7C((uint64_t)&a34, a35);
  unint64_t v44 = a38;
  uint64_t v45 = (uint64_t)a39;
  a42 = 0;
  unint64_t v46 = (char *)a39 - (char *)a38;
  if ((unint64_t)((char *)a39 - (char *)a38) >= 0x11)
  {
    do
    {
      operator delete(*v44);
      uint64_t v45 = (uint64_t)a39;
      unint64_t v44 = a38 + 1;
      a38 = v44;
      unint64_t v46 = (char *)a39 - (char *)v44;
    }
    while ((unint64_t)((char *)a39 - (char *)v44) > 0x10);
  }
  unint64_t v47 = v46 >> 3;
  if (v47 == 1)
  {
    uint64_t v48 = 256;
  }
  else
  {
    if (v47 != 2)
    {
LABEL_8:
      if (v44 != (void **)v45)
      {
        do
        {
          uint64_t v49 = *v44++;
          operator delete(v49);
        }
        while (v44 != (void **)v45);
        if (a39 != a38) {
          a39 = (void **)((char *)a39 + (((char *)a38 - (char *)a39 + 7) & 0xFFFFFFFFFFFFFFF8));
        }
      }
      if (__p) {
        operator delete(__p);
      }
      sub_1C4999C7C(v42 - 184, *(void **)(v42 - 176));
      sub_1C49A1374(*(void **)(v42 - 152));
      if (*(void *)(v42 - 120))
      {
        uint64_t v51 = *(void *)(v42 - 136);
        uint64_t v50 = *(uint64_t **)(v42 - 128);
        uint64_t v52 = *v50;
        *(void *)(v52 + 8) = *(void *)(v51 + 8);
        **(void **)(v51 + 8) = v52;
        *(void *)(v42 - 120) = 0;
        if (v50 != (uint64_t *)(v42 - 136))
        {
          do
          {
            unint64_t v53 = (uint64_t *)v50[1];
            operator delete(v50);
            uint64_t v50 = v53;
          }
          while (v53 != (uint64_t *)(v42 - 136));
        }
      }
      uint64_t v54 = *(void **)(v42 - 112);
      if (v54)
      {
        *(void *)(v42 - 104) = v54;
        operator delete(v54);
      }
      _Unwind_Resume(a1);
    }
    uint64_t v48 = 512;
  }
  a41 = v48;
  goto LABEL_8;
}

void Network::removeEpsOutputEdges(Network *this, Network *a2, int a3)
{
  uint64_t v5 = this;
  Network::guaranteeSingleEmptyIncomingEdgePerNode(this);
  int v421 = a3;
  Network::pushWeightsFromEmptyEdges(v5, a3);
  uint64_t v6 = (uint64_t **)((char *)a2 + 64);
  CGRect v416 = (uint64_t **)((char *)a2 + 56);
  sub_1C4999C7C((uint64_t)a2 + 56, *((void **)a2 + 8));
  *((void *)a2 + 7) = (char *)a2 + 64;
  *((void *)a2 + 8) = 0;
  uint64_t v7 = *((void *)a2 + 4);
  *((void *)a2 + 9) = 0;
  CGRect v415 = (void **)((char *)a2 + 32);
  if (*((void *)a2 + 5) != v7) {
    *((void *)a2 + 5) = v7;
  }
  v418 = a2;
  v447 = 0;
  BOOL v448 = 0;
  BOOL v449 = 0;
  uint64_t v9 = *((void *)v5 + 4);
  uint64_t v8 = *((void *)v5 + 5);
  uint64_t v445 = 0;
  uint64_t v446 = 0;
  uint64_t v443 = 0;
  uint64_t v444 = &v445;
  v441 = &v442;
  v442 = 0;
  v440[0] = 0;
  v440[1] = 0;
  uint64_t v439 = v440;
  sub_1C499A568(&v439, *((void **)v5 + 7), (void *)v5 + 8);
  uint64_t v436 = 0;
  uint64_t v437 = 0;
  uint64_t v438 = 0;
  if (v8 != v9)
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v9) >> 3);
    if (v10 >> 61) {
      sub_1C494A220();
    }
    uint64_t v436 = (char *)operator new(8 * v10);
    uint64_t v438 = &v436[8 * v10];
    bzero(v436, 8 * v10);
    uint64_t v437 = v438;
  }
  uint64_t v417 = v6;
  long long v434 = 0u;
  long long v435 = 0u;
  *(_OWORD *)long long __p = 0u;
  id v431 = 0;
  uint64_t v432 = 0;
  int v430 = &v431;
  sub_1C49DA0D4((uint64_t)__p);
  unint64_t v423 = 0;
  *(void *)(*(void *)((char *)__p[1] + ((((void)v435 + *((void *)&v435 + 1)) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((v435 + *((void *)&v435 + 1)) & 0x1FF)) = 0;
  BOOL v315 = __CFADD__(*((void *)&v435 + 1), 1);
  uint64_t v11 = ++*((void *)&v435 + 1);
  if (!v315)
  {
    unint64_t v423 = 0;
    uint64_t v420 = v5;
    do
    {
      unint64_t v28 = *(void *)(*(void *)((char *)__p[1] + (((unint64_t)v435 >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (v435 & 0x1FF));
      *(void *)&long long v435 = v435 + 1;
      *((void *)&v435 + 1) = v11 - 1;
      if ((unint64_t)v435 >= 0x400)
      {
        operator delete(*(void **)__p[1]);
        __p[1] = (char *)__p[1] + 8;
        *(void *)&long long v435 = v435 - 512;
      }
      uint64_t v29 = v431;
      if (!v431) {
        goto LABEL_50;
      }
      BOOL v30 = &v431;
      uint64_t v31 = v431;
      do
      {
        uint64_t v32 = v31;
        uint64_t v33 = v30;
        unint64_t v34 = v31[4];
        if (v34 >= v28) {
          BOOL v30 = (uint64_t **)v31;
        }
        else {
          ++v31;
        }
        uint64_t v31 = (uint64_t *)*v31;
      }
      while (v31);
      if (v30 == &v431) {
        goto LABEL_50;
      }
      if (v34 < v28) {
        uint64_t v32 = (uint64_t *)v33;
      }
      if (v28 < v32[4])
      {
LABEL_50:
        uint64_t v35 = *((void *)v5 + 4);
        unint64_t v422 = v28;
        if (*(void *)(v35 + 40 * v28))
        {
          unint64_t v36 = 0;
          unint64_t v37 = v422;
          while (1)
          {
            unint64_t v38 = *(void *)(v35 + 40 * v37 + 16) + v36;
            uint64_t v39 = *((void *)v5 + 10);
            long long v40 = (unint64_t *)(v39 + 72 * v38);
            unint64_t v41 = *v40;
            unint64_t v42 = v40[1];
            unint64_t v44 = v40[3];
            uint64_t v43 = v40 + 3;
            uint64_t v45 = v445;
            if (v44)
            {
              unint64_t v46 = &v445;
              unint64_t v47 = &v445;
              if (!v445)
              {
LABEL_71:
                unint64_t v55 = (uint64_t *)operator new(0x30uLL);
                v55[4] = v41;
                v55[5] = 0;
                uint64_t *v55 = 0;
                v55[1] = 0;
                v55[2] = (uint64_t)v46;
                *unint64_t v47 = v55;
                int v56 = v55;
                if (*v444)
                {
                  uint64_t v444 = (uint64_t **)*v444;
                  int v56 = *v47;
                }
                int v57 = v445;
                *((unsigned char *)v56 + 24) = v56 == v445;
                if (v56 != v57)
                {
                  do
                  {
                    uint64_t v58 = v56[2];
                    if (*(unsigned char *)(v58 + 24)) {
                      break;
                    }
                    uint64_t v59 = *(uint64_t **)(v58 + 16);
                    uint64_t v60 = *v59;
                    if (*v59 == v58)
                    {
                      uint64_t v63 = v59[1];
                      if (!v63 || (v64 = *(unsigned __int8 *)(v63 + 24), unint64_t v61 = (unsigned char *)(v63 + 24), v64))
                      {
                        if (*(uint64_t **)v58 == v56)
                        {
                          *(unsigned char *)(v58 + 24) = 1;
                          *((unsigned char *)v59 + 24) = 0;
                          uint64_t v67 = *(void *)(v58 + 8);
                          *uint64_t v59 = v67;
                          if (v67) {
                            goto LABEL_87;
                          }
                        }
                        else
                        {
                          unint64_t v65 = *(uint64_t **)(v58 + 8);
                          uint64_t v66 = *v65;
                          *(void *)(v58 + 8) = *v65;
                          if (v66)
                          {
                            *(void *)(v66 + 16) = v58;
                            uint64_t v59 = *(uint64_t **)(v58 + 16);
                          }
                          v65[2] = (uint64_t)v59;
                          *(void *)(*(void *)(v58 + 16) + 8 * (**(void **)(v58 + 16) != v58)) = v65;
                          uint64_t *v65 = v58;
                          *(void *)(v58 + 16) = v65;
                          uint64_t v59 = (uint64_t *)v65[2];
                          uint64_t v58 = *v59;
                          *((unsigned char *)v65 + 24) = 1;
                          *((unsigned char *)v59 + 24) = 0;
                          uint64_t v67 = *(void *)(v58 + 8);
                          *uint64_t v59 = v67;
                          if (v67) {
LABEL_87:
                          }
                            *(void *)(v67 + 16) = v59;
                        }
                        *(void *)(v58 + 16) = v59[2];
                        *(void *)(v59[2] + 8 * (*(void *)v59[2] != (void)v59)) = v58;
                        *(void *)(v58 + 8) = v59;
LABEL_128:
                        v59[2] = v58;
                        break;
                      }
                    }
                    else if (!v60 || (v62 = *(unsigned __int8 *)(v60 + 24), unint64_t v61 = (unsigned char *)(v60 + 24), v62))
                    {
                      if (*(uint64_t **)v58 == v56)
                      {
                        uint64_t v232 = v56[1];
                        *(void *)uint64_t v58 = v232;
                        if (v232)
                        {
                          *(void *)(v232 + 16) = v58;
                          uint64_t v59 = *(uint64_t **)(v58 + 16);
                        }
                        v56[2] = (uint64_t)v59;
                        *(void *)(*(void *)(v58 + 16) + 8 * (**(void **)(v58 + 16) != v58)) = v56;
                        v56[1] = v58;
                        *(void *)(v58 + 16) = v56;
                        uint64_t v59 = (uint64_t *)v56[2];
                        *((unsigned char *)v56 + 24) = 1;
                        *((unsigned char *)v59 + 24) = 0;
                        uint64_t v58 = v59[1];
                        int v90 = *(uint64_t **)v58;
                        v59[1] = *(void *)v58;
                        if (v90) {
LABEL_126:
                        }
                          v90[2] = (uint64_t)v59;
                      }
                      else
                      {
                        *(unsigned char *)(v58 + 24) = 1;
                        *((unsigned char *)v59 + 24) = 0;
                        uint64_t v58 = v59[1];
                        int v90 = *(uint64_t **)v58;
                        v59[1] = *(void *)v58;
                        if (v90) {
                          goto LABEL_126;
                        }
                      }
                      *(void *)(v58 + 16) = v59[2];
                      *(void *)(v59[2] + 8 * (*(void *)v59[2] != (void)v59)) = v58;
                      *(void *)uint64_t v58 = v59;
                      goto LABEL_128;
                    }
                    *(unsigned char *)(v58 + 24) = 1;
                    int v56 = v59;
                    *((unsigned char *)v59 + 24) = v59 == v57;
                    *unint64_t v61 = 1;
                  }
                  while (v59 != v57);
                }
                uint64_t v45 = v445;
                ++v446;
                goto LABEL_130;
              }
              uint64_t v48 = &v445;
              uint64_t v49 = v445;
              do
              {
                uint64_t v50 = v49;
                uint64_t v51 = v48;
                unint64_t v52 = v49[4];
                if (v52 >= v41) {
                  uint64_t v48 = (uint64_t **)v49;
                }
                else {
                  ++v49;
                }
                uint64_t v49 = (uint64_t *)*v49;
              }
              while (v49);
              if (v48 == &v445) {
                goto LABEL_65;
              }
              if (v52 < v41) {
                uint64_t v50 = (uint64_t *)v51;
              }
              if (v41 < v50[4])
              {
LABEL_65:
                unint64_t v53 = v445;
                while (1)
                {
                  while (1)
                  {
                    unint64_t v46 = (uint64_t **)v53;
                    unint64_t v54 = v53[4];
                    if (v41 >= v54) {
                      break;
                    }
                    unint64_t v53 = *v46;
                    unint64_t v47 = v46;
                    if (!*v46) {
                      goto LABEL_71;
                    }
                  }
                  if (v54 >= v41) {
                    break;
                  }
                  unint64_t v53 = v46[1];
                  if (!v53)
                  {
                    unint64_t v47 = v46 + 1;
                    goto LABEL_71;
                  }
                }
                unint64_t v55 = (uint64_t *)v46;
LABEL_130:
                v55[5] = v423++;
              }
              uint64_t v91 = &v445;
              int v92 = &v445;
              if (v45)
              {
                int v93 = v45;
                while (1)
                {
                  while (1)
                  {
                    uint64_t v91 = (uint64_t **)v93;
                    unint64_t v94 = v93[4];
                    if (v41 >= v94) {
                      break;
                    }
                    int v93 = *v91;
                    int v92 = v91;
                    if (!*v91) {
                      goto LABEL_138;
                    }
                  }
                  if (v94 >= v41) {
                    break;
                  }
                  int v93 = v91[1];
                  if (!v93)
                  {
                    int v92 = v91 + 1;
                    goto LABEL_138;
                  }
                }
                float v107 = v91[5];
LABEL_163:
                uint64_t v111 = &v445;
                uint64_t v112 = v45;
                do
                {
                  uint64_t v113 = v112;
                  int8x8_t v114 = v111;
                  unint64_t v115 = v112[4];
                  if (v115 >= v42) {
                    uint64_t v111 = (uint64_t **)v112;
                  }
                  else {
                    ++v112;
                  }
                  uint64_t v112 = (uint64_t *)*v112;
                }
                while (v112);
                if (v111 == &v445) {
                  goto LABEL_172;
                }
                if (v115 < v42) {
                  uint64_t v113 = (uint64_t *)v114;
                }
                if (v42 < v113[4])
                {
LABEL_172:
                  unint64_t v116 = v45;
                  while (1)
                  {
                    while (1)
                    {
                      uint64_t v109 = (uint64_t **)v116;
                      unint64_t v117 = v116[4];
                      if (v42 >= v117) {
                        break;
                      }
                      unint64_t v116 = *v109;
                      int v110 = v109;
                      if (!*v109) {
                        goto LABEL_178;
                      }
                    }
                    if (v117 >= v42) {
                      break;
                    }
                    unint64_t v116 = v109[1];
                    if (!v116)
                    {
                      int v110 = v109 + 1;
                      goto LABEL_178;
                    }
                  }
                  uint64_t v118 = (uint64_t *)v109;
                  goto LABEL_203;
                }
              }
              else
              {
LABEL_138:
                uint64_t v95 = (uint64_t *)operator new(0x30uLL);
                v95[4] = v41;
                v95[5] = 0;
                *uint64_t v95 = 0;
                v95[1] = 0;
                v95[2] = (uint64_t)v91;
                uint64_t *v92 = v95;
                if (*v444)
                {
                  uint64_t v444 = (uint64_t **)*v444;
                  uint64_t v95 = *v92;
                }
                float v96 = v445;
                *((unsigned char *)v95 + 24) = v95 == v445;
                if (v95 != v96)
                {
                  do
                  {
                    uint64_t v97 = v95[2];
                    if (*(unsigned char *)(v97 + 24)) {
                      break;
                    }
                    unint64_t v98 = *(uint64_t **)(v97 + 16);
                    uint64_t v99 = *v98;
                    if (*v98 == v97)
                    {
                      uint64_t v102 = v98[1];
                      if (!v102 || (v103 = *(unsigned __int8 *)(v102 + 24), unint64_t v100 = (unsigned char *)(v102 + 24), v103))
                      {
                        if (*(uint64_t **)v97 == v95)
                        {
                          *(unsigned char *)(v97 + 24) = 1;
                          *((unsigned char *)v98 + 24) = 0;
                          uint64_t v106 = *(void *)(v97 + 8);
                          uint64_t *v98 = v106;
                          if (v106) {
                            goto LABEL_154;
                          }
                        }
                        else
                        {
                          uint64_t v104 = *(uint64_t **)(v97 + 8);
                          uint64_t v105 = *v104;
                          *(void *)(v97 + 8) = *v104;
                          if (v105)
                          {
                            *(void *)(v105 + 16) = v97;
                            unint64_t v98 = *(uint64_t **)(v97 + 16);
                          }
                          uint64_t v104[2] = (uint64_t)v98;
                          *(void *)(*(void *)(v97 + 16) + 8 * (**(void **)(v97 + 16) != v97)) = v104;
                          *uint64_t v104 = v97;
                          *(void *)(v97 + 16) = v104;
                          unint64_t v98 = (uint64_t *)v104[2];
                          uint64_t v97 = *v98;
                          *((unsigned char *)v104 + 24) = 1;
                          *((unsigned char *)v98 + 24) = 0;
                          uint64_t v106 = *(void *)(v97 + 8);
                          uint64_t *v98 = v106;
                          if (v106) {
LABEL_154:
                          }
                            *(void *)(v106 + 16) = v98;
                        }
                        *(void *)(v97 + 16) = v98[2];
                        *(void *)(v98[2] + 8 * (*(void *)v98[2] != (void)v98)) = v97;
                        *(void *)(v97 + 8) = v98;
LABEL_161:
                        v98[2] = v97;
                        break;
                      }
                    }
                    else if (!v99 || (v101 = *(unsigned __int8 *)(v99 + 24), unint64_t v100 = (unsigned char *)(v99 + 24), v101))
                    {
                      if (*(uint64_t **)v97 == v95)
                      {
                        uint64_t v230 = v95[1];
                        *(void *)uint64_t v97 = v230;
                        if (v230)
                        {
                          *(void *)(v230 + 16) = v97;
                          unint64_t v98 = *(uint64_t **)(v97 + 16);
                        }
                        v95[2] = (uint64_t)v98;
                        *(void *)(*(void *)(v97 + 16) + 8 * (**(void **)(v97 + 16) != v97)) = v95;
                        v95[1] = v97;
                        *(void *)(v97 + 16) = v95;
                        unint64_t v98 = (uint64_t *)v95[2];
                        *((unsigned char *)v95 + 24) = 1;
                        *((unsigned char *)v98 + 24) = 0;
                        uint64_t v97 = v98[1];
                        int v108 = *(uint64_t **)v97;
                        v98[1] = *(void *)v97;
                        if (v108) {
LABEL_159:
                        }
                          v108[2] = (uint64_t)v98;
                      }
                      else
                      {
                        *(unsigned char *)(v97 + 24) = 1;
                        *((unsigned char *)v98 + 24) = 0;
                        uint64_t v97 = v98[1];
                        int v108 = *(uint64_t **)v97;
                        v98[1] = *(void *)v97;
                        if (v108) {
                          goto LABEL_159;
                        }
                      }
                      *(void *)(v97 + 16) = v98[2];
                      *(void *)(v98[2] + 8 * (*(void *)v98[2] != (void)v98)) = v97;
                      *(void *)uint64_t v97 = v98;
                      goto LABEL_161;
                    }
                    *(unsigned char *)(v97 + 24) = 1;
                    uint64_t v95 = v98;
                    *((unsigned char *)v98 + 24) = v98 == v96;
                    *unint64_t v100 = 1;
                  }
                  while (v98 != v96);
                }
                float v107 = 0;
                uint64_t v45 = v445;
                ++v446;
                uint64_t v109 = &v445;
                int v110 = &v445;
                if (v445) {
                  goto LABEL_163;
                }
LABEL_178:
                uint64_t v118 = (uint64_t *)operator new(0x30uLL);
                v118[4] = v42;
                v118[5] = 0;
                uint64_t *v118 = 0;
                v118[1] = 0;
                v118[2] = (uint64_t)v109;
                void *v110 = v118;
                uint64_t v119 = v118;
                if (*v444)
                {
                  uint64_t v444 = (uint64_t **)*v444;
                  uint64_t v119 = *v110;
                }
                BOOL v120 = v445;
                *((unsigned char *)v119 + 24) = v119 == v445;
                if (v119 != v120)
                {
                  do
                  {
                    uint64_t v121 = v119[2];
                    if (*(unsigned char *)(v121 + 24)) {
                      break;
                    }
                    uint64_t v122 = *(uint64_t **)(v121 + 16);
                    uint64_t v123 = *v122;
                    if (*v122 == v121)
                    {
                      uint64_t v126 = v122[1];
                      if (!v126 || (v127 = *(unsigned __int8 *)(v126 + 24), float v124 = (unsigned char *)(v126 + 24), v127))
                      {
                        if (*(uint64_t **)v121 == v119)
                        {
                          *(unsigned char *)(v121 + 24) = 1;
                          *((unsigned char *)v122 + 24) = 0;
                          uint64_t v130 = *(void *)(v121 + 8);
                          uint64_t *v122 = v130;
                          if (v130) {
                            goto LABEL_194;
                          }
                        }
                        else
                        {
                          uint64_t v128 = *(uint64_t **)(v121 + 8);
                          uint64_t v129 = *v128;
                          *(void *)(v121 + 8) = *v128;
                          if (v129)
                          {
                            *(void *)(v129 + 16) = v121;
                            uint64_t v122 = *(uint64_t **)(v121 + 16);
                          }
                          v128[2] = (uint64_t)v122;
                          *(void *)(*(void *)(v121 + 16) + 8 * (**(void **)(v121 + 16) != v121)) = v128;
                          *uint64_t v128 = v121;
                          *(void *)(v121 + 16) = v128;
                          uint64_t v122 = (uint64_t *)v128[2];
                          uint64_t v121 = *v122;
                          *((unsigned char *)v128 + 24) = 1;
                          *((unsigned char *)v122 + 24) = 0;
                          uint64_t v130 = *(void *)(v121 + 8);
                          uint64_t *v122 = v130;
                          if (v130) {
LABEL_194:
                          }
                            *(void *)(v130 + 16) = v122;
                        }
                        *(void *)(v121 + 16) = v122[2];
                        *(void *)(v122[2] + 8 * (*(void *)v122[2] != (void)v122)) = v121;
                        *(void *)(v121 + 8) = v122;
LABEL_201:
                        v122[2] = v121;
                        break;
                      }
                    }
                    else if (!v123 || (v125 = *(unsigned __int8 *)(v123 + 24), float v124 = (unsigned char *)(v123 + 24), v125))
                    {
                      if (*(uint64_t **)v121 == v119)
                      {
                        uint64_t v233 = v119[1];
                        *(void *)uint64_t v121 = v233;
                        if (v233)
                        {
                          *(void *)(v233 + 16) = v121;
                          uint64_t v122 = *(uint64_t **)(v121 + 16);
                        }
                        v119[2] = (uint64_t)v122;
                        *(void *)(*(void *)(v121 + 16) + 8 * (**(void **)(v121 + 16) != v121)) = v119;
                        v119[1] = v121;
                        *(void *)(v121 + 16) = v119;
                        uint64_t v122 = (uint64_t *)v119[2];
                        *((unsigned char *)v119 + 24) = 1;
                        *((unsigned char *)v122 + 24) = 0;
                        uint64_t v121 = v122[1];
                        uint64_t v131 = *(uint64_t **)v121;
                        v122[1] = *(void *)v121;
                        if (v131) {
LABEL_199:
                        }
                          v131[2] = (uint64_t)v122;
                      }
                      else
                      {
                        *(unsigned char *)(v121 + 24) = 1;
                        *((unsigned char *)v122 + 24) = 0;
                        uint64_t v121 = v122[1];
                        uint64_t v131 = *(uint64_t **)v121;
                        v122[1] = *(void *)v121;
                        if (v131) {
                          goto LABEL_199;
                        }
                      }
                      *(void *)(v121 + 16) = v122[2];
                      *(void *)(v122[2] + 8 * (*(void *)v122[2] != (void)v122)) = v121;
                      *(void *)uint64_t v121 = v122;
                      goto LABEL_201;
                    }
                    *(unsigned char *)(v121 + 24) = 1;
                    uint64_t v119 = v122;
                    *((unsigned char *)v122 + 24) = v122 == v120;
                    *float v124 = 1;
                  }
                  while (v122 != v120);
                }
                uint64_t v45 = v445;
                ++v446;
LABEL_203:
                v118[5] = v423++;
              }
              uint64_t v132 = &v445;
LABEL_206:
              unint64_t v133 = v132;
              if (v45)
              {
                while (1)
                {
                  uint64_t v132 = (uint64_t **)v45;
                  unint64_t v134 = v45[4];
                  if (v42 < v134)
                  {
                    uint64_t v45 = *v132;
                    goto LABEL_206;
                  }
                  if (v134 >= v42) {
                    break;
                  }
                  uint64_t v45 = v132[1];
                  if (!v45)
                  {
                    unint64_t v133 = v132 + 1;
                    goto LABEL_211;
                  }
                }
                BOOL v147 = v132[5];
              }
              else
              {
LABEL_211:
                unint64_t v135 = (uint64_t *)operator new(0x30uLL);
                v135[4] = v42;
                v135[5] = 0;
                *unint64_t v135 = 0;
                v135[1] = 0;
                v135[2] = (uint64_t)v132;
                *unint64_t v133 = v135;
                if (*v444)
                {
                  uint64_t v444 = (uint64_t **)*v444;
                  unint64_t v135 = *v133;
                }
                unint64_t v136 = v445;
                *((unsigned char *)v135 + 24) = v135 == v445;
                if (v135 != v136)
                {
                  do
                  {
                    uint64_t v137 = v135[2];
                    if (*(unsigned char *)(v137 + 24)) {
                      break;
                    }
                    uint64_t v138 = *(uint64_t **)(v137 + 16);
                    uint64_t v139 = *v138;
                    if (*v138 == v137)
                    {
                      uint64_t v142 = v138[1];
                      if (!v142 || (v143 = *(unsigned __int8 *)(v142 + 24), uint64_t v140 = (unsigned char *)(v142 + 24), v143))
                      {
                        if (*(uint64_t **)v137 == v135)
                        {
                          *(unsigned char *)(v137 + 24) = 1;
                          *((unsigned char *)v138 + 24) = 0;
                          uint64_t v146 = *(void *)(v137 + 8);
                          uint64_t *v138 = v146;
                          if (v146) {
                            goto LABEL_227;
                          }
                        }
                        else
                        {
                          unint64_t v144 = *(uint64_t **)(v137 + 8);
                          uint64_t v145 = *v144;
                          *(void *)(v137 + 8) = *v144;
                          if (v145)
                          {
                            *(void *)(v145 + 16) = v137;
                            uint64_t v138 = *(uint64_t **)(v137 + 16);
                          }
                          v144[2] = (uint64_t)v138;
                          *(void *)(*(void *)(v137 + 16) + 8 * (**(void **)(v137 + 16) != v137)) = v144;
                          *unint64_t v144 = v137;
                          *(void *)(v137 + 16) = v144;
                          uint64_t v138 = (uint64_t *)v144[2];
                          uint64_t v137 = *v138;
                          *((unsigned char *)v144 + 24) = 1;
                          *((unsigned char *)v138 + 24) = 0;
                          uint64_t v146 = *(void *)(v137 + 8);
                          uint64_t *v138 = v146;
                          if (v146) {
LABEL_227:
                          }
                            *(void *)(v146 + 16) = v138;
                        }
                        *(void *)(v137 + 16) = v138[2];
                        *(void *)(v138[2] + 8 * (*(void *)v138[2] != (void)v138)) = v137;
                        *(void *)(v137 + 8) = v138;
LABEL_234:
                        v138[2] = v137;
                        break;
                      }
                    }
                    else if (!v139 || (v141 = *(unsigned __int8 *)(v139 + 24), uint64_t v140 = (unsigned char *)(v139 + 24), v141))
                    {
                      if (*(uint64_t **)v137 == v135)
                      {
                        uint64_t v231 = v135[1];
                        *(void *)uint64_t v137 = v231;
                        if (v231)
                        {
                          *(void *)(v231 + 16) = v137;
                          uint64_t v138 = *(uint64_t **)(v137 + 16);
                        }
                        v135[2] = (uint64_t)v138;
                        *(void *)(*(void *)(v137 + 16) + 8 * (**(void **)(v137 + 16) != v137)) = v135;
                        v135[1] = v137;
                        *(void *)(v137 + 16) = v135;
                        uint64_t v138 = (uint64_t *)v135[2];
                        *((unsigned char *)v135 + 24) = 1;
                        *((unsigned char *)v138 + 24) = 0;
                        uint64_t v137 = v138[1];
                        uint64_t v148 = *(uint64_t **)v137;
                        v138[1] = *(void *)v137;
                        if (v148) {
LABEL_232:
                        }
                          v148[2] = (uint64_t)v138;
                      }
                      else
                      {
                        *(unsigned char *)(v137 + 24) = 1;
                        *((unsigned char *)v138 + 24) = 0;
                        uint64_t v137 = v138[1];
                        uint64_t v148 = *(uint64_t **)v137;
                        v138[1] = *(void *)v137;
                        if (v148) {
                          goto LABEL_232;
                        }
                      }
                      *(void *)(v137 + 16) = v138[2];
                      *(void *)(v138[2] + 8 * (*(void *)v138[2] != (void)v138)) = v137;
                      *(void *)uint64_t v137 = v138;
                      goto LABEL_234;
                    }
                    *(unsigned char *)(v137 + 24) = 1;
                    unint64_t v135 = v138;
                    *((unsigned char *)v138 + 24) = v138 == v136;
                    *uint64_t v140 = 1;
                  }
                  while (v138 != v136);
                }
                BOOL v147 = 0;
                ++v446;
              }
              ++*(void *)&v436[8 * (void)v107];
              uint64_t v149 = *((void *)v5 + 17) + 24 * *v43;
              unint64_t v150 = *(unsigned __int8 *)(v149 + 23);
              if ((v150 & 0x80u) == 0) {
                unint64_t v151 = (unsigned char *)(*((void *)v5 + 17) + 24 * *v43);
              }
              else {
                unint64_t v151 = *(unsigned char **)v149;
              }
              if ((v150 & 0x80u) != 0) {
                unint64_t v150 = *(void *)(v149 + 8);
              }
              if (!v150)
              {
                LODWORD(v152) = 0;
                goto LABEL_273;
              }
              unint64_t v152 = *v151 == 45;
              if (*v151 == 45)
              {
                if (v150 < 2)
                {
                  LODWORD(v152) = 1;
LABEL_273:
                  unint64_t v159 = v36;
                  int v153 = 0;
LABEL_274:
                  uint64_t v160 = v107;
                  if (v152) {
                    LODWORD(v163) = -v153;
                  }
                  else {
                    LODWORD(v163) = v153;
                  }
LABEL_277:
                  unint64_t v165 = sub_1C4999D30((void *)v418 + 16, v149);
                  unint64_t v166 = v165;
                  if (v421) {
                    uint64_t v163 = (uint64_t *)(int)v163;
                  }
                  else {
                    uint64_t v163 = v165;
                  }
                  uint64_t v167 = v39 + 72 * v38;
                  uint64_t v168 = *(void *)(v167 + 32);
                  long long v169 = *(_OWORD *)(v167 + 48);
                  unint64_t v170 = v448;
                  if (v448 >= v449)
                  {
                    BOOL v172 = v447;
                    unint64_t v173 = 0x8E38E38E38E38E39 * ((v448 - v447) >> 3) + 1;
                    if (v173 > 0x38E38E38E38E38ELL) {
                      sub_1C494A220();
                    }
                    long long v419 = *(_OWORD *)(v167 + 48);
                    if (0x1C71C71C71C71C72 * ((v449 - v447) >> 3) > v173) {
                      unint64_t v173 = 0x1C71C71C71C71C72 * ((v449 - v447) >> 3);
                    }
                    if (0x8E38E38E38E38E39 * ((v449 - v447) >> 3) >= 0x1C71C71C71C71C7) {
                      unint64_t v174 = 0x38E38E38E38E38ELL;
                    }
                    else {
                      unint64_t v174 = v173;
                    }
                    if (v174 > 0x38E38E38E38E38ELL) {
                      sub_1C4949AA8();
                    }
                    uint64_t v175 = (char *)operator new(72 * v174);
                    unint64_t v176 = &v175[8 * ((v170 - v172) >> 3)];
                    *(void *)unint64_t v176 = v160;
                    *((void *)v176 + 1) = v147;
                    *((void *)v176 + 2) = v163;
                    *((void *)v176 + 3) = v166;
                    *((void *)v176 + 4) = v168;
                    *((_OWORD *)v176 + 3) = v419;
                    if (v170 == v172)
                    {
                      int v179 = &v175[8 * ((v170 - v172) >> 3)];
                      uint64_t v5 = v420;
                      unint64_t v36 = v159;
                    }
                    else
                    {
                      uint64_t v177 = 0;
                      uint64_t v5 = v420;
                      unint64_t v36 = v159;
                      do
                      {
                        uint64_t v178 = &v176[v177];
                        *(_OWORD *)(v178 - 72) = *(_OWORD *)&v170[v177 - 72];
                        *(_OWORD *)(v178 - 56) = *(_OWORD *)&v170[v177 - 56];
                        *(_OWORD *)(v178 - 40) = *(_OWORD *)&v170[v177 - 40];
                        *(_OWORD *)(v178 - 24) = *(_OWORD *)&v170[v177 - 24];
                        *((void *)v178 - 1) = *(void *)&v170[v177 - 8];
                        v177 -= 72;
                      }
                      while (&v170[v177] != v172);
                      int v179 = &v176[v177];
                    }
                    double v171 = v176 + 72;
                    v447 = v179;
                    BOOL v448 = v176 + 72;
                    BOOL v449 = &v175[72 * v174];
                    if (v172) {
                      operator delete(v172);
                    }
                  }
                  else
                  {
                    *(void *)BOOL v448 = v160;
                    *((void *)v170 + 1) = v147;
                    *((void *)v170 + 2) = v163;
                    *((void *)v170 + 3) = v165;
                    *((void *)v170 + 4) = v168;
                    double v171 = v170 + 72;
                    *((_OWORD *)v170 + 3) = v169;
                    uint64_t v5 = v420;
                    unint64_t v36 = v159;
                  }
                  BOOL v448 = v171;
                  goto LABEL_378;
                }
                uint64_t v164 = 2;
                if (v151[v152] == 48)
                {
LABEL_267:
                  if ((v151[v164] | 0x20) == 0x78)
                  {
                    unint64_t v157 = 2;
                    if (*v151 == 45) {
                      unint64_t v157 = 3;
                    }
                    if (v157 >= v150) {
                      goto LABEL_273;
                    }
LABEL_246:
                    int v153 = 0;
                    do
                    {
                      int v154 = (char)v151[v157];
                      if ((v154 - 48) >= 0xA)
                      {
                        if ((v154 - 97) >= 6)
                        {
                          if ((v154 - 65) > 5)
                          {
                            unint64_t v159 = v36;
                            goto LABEL_274;
                          }
                          int v155 = -55;
                        }
                        else
                        {
                          int v155 = -87;
                        }
                      }
                      else
                      {
                        int v155 = -48;
                      }
                      int v156 = v154 + 16 * v153 + v155;
                      ++v157;
                      BOOL v158 = v156 < v153;
                      if (v157 >= v150) {
                        break;
                      }
                      int v153 = v156;
                    }
                    while (!v158);
                    unint64_t v159 = v36;
                    uint64_t v160 = v107;
                    if (*v151 == 45) {
                      unsigned int v161 = 0x80000000;
                    }
                    else {
                      unsigned int v161 = 0x7FFFFFFF;
                    }
                    if (v152) {
                      int v162 = -v156;
                    }
                    else {
                      int v162 = v156;
                    }
                    if (v158) {
                      LODWORD(v163) = v161;
                    }
                    else {
                      LODWORD(v163) = v162;
                    }
                    goto LABEL_277;
                  }
                }
              }
              else
              {
                uint64_t v164 = 1;
                if (v151[v152] == 48) {
                  goto LABEL_267;
                }
              }
              unint64_t v157 = *v151 == 45;
              if (v152 >= v150) {
                goto LABEL_273;
              }
              goto LABEL_246;
            }
            std::string v68 = &v445;
            uint64_t v69 = &v445;
            if (v445)
            {
              long long v70 = &v445;
              uint64_t v71 = v445;
              do
              {
                long long v72 = v71;
                int v73 = v70;
                unint64_t v74 = v71[4];
                if (v74 >= v41) {
                  long long v70 = (uint64_t **)v71;
                }
                else {
                  ++v71;
                }
                uint64_t v71 = (uint64_t *)*v71;
              }
              while (v71);
              if (v70 != &v445)
              {
                if (v74 < v41) {
                  long long v72 = (uint64_t *)v73;
                }
                if (v41 >= v72[4]) {
                  goto LABEL_306;
                }
              }
              int v75 = v445;
              while (1)
              {
                while (1)
                {
                  std::string v68 = (uint64_t **)v75;
                  unint64_t v76 = v75[4];
                  if (v41 >= v76) {
                    break;
                  }
                  int v75 = *v68;
                  uint64_t v69 = v68;
                  if (!*v68) {
                    goto LABEL_105;
                  }
                }
                if (v76 >= v41) {
                  break;
                }
                int v75 = v68[1];
                if (!v75)
                {
                  uint64_t v69 = v68 + 1;
                  goto LABEL_105;
                }
              }
              uint64_t v77 = (uint64_t *)v68;
            }
            else
            {
LABEL_105:
              uint64_t v77 = (uint64_t *)operator new(0x30uLL);
              v77[4] = v41;
              void v77[5] = 0;
              *uint64_t v77 = 0;
              v77[1] = 0;
              v77[2] = (uint64_t)v68;
              *uint64_t v69 = v77;
              uint64_t v78 = v77;
              if (*v444)
              {
                uint64_t v444 = (uint64_t **)*v444;
                uint64_t v78 = *v69;
              }
              uint64_t v79 = v445;
              *((unsigned char *)v78 + 24) = v78 == v445;
              if (v78 != v79)
              {
                do
                {
                  uint64_t v80 = v78[2];
                  if (*(unsigned char *)(v80 + 24)) {
                    break;
                  }
                  float v81 = *(uint64_t **)(v80 + 16);
                  uint64_t v82 = *v81;
                  if (*v81 == v80)
                  {
                    uint64_t v85 = v81[1];
                    if (!v85 || (int v86 = *(unsigned __int8 *)(v85 + 24), v83 = (unsigned char *)(v85 + 24), v86))
                    {
                      if (*(uint64_t **)v80 == v78)
                      {
                        *(unsigned char *)(v80 + 24) = 1;
                        *((unsigned char *)v81 + 24) = 0;
                        uint64_t v89 = *(void *)(v80 + 8);
                        uint64_t *v81 = v89;
                        if (v89) {
                          goto LABEL_121;
                        }
                      }
                      else
                      {
                        float v87 = *(uint64_t **)(v80 + 8);
                        uint64_t v88 = *v87;
                        *(void *)(v80 + 8) = *v87;
                        if (v88)
                        {
                          *(void *)(v88 + 16) = v80;
                          float v81 = *(uint64_t **)(v80 + 16);
                        }
                        v87[2] = (uint64_t)v81;
                        *(void *)(*(void *)(v80 + 16) + 8 * (**(void **)(v80 + 16) != v80)) = v87;
                        *float v87 = v80;
                        *(void *)(v80 + 16) = v87;
                        float v81 = (uint64_t *)v87[2];
                        uint64_t v80 = *v81;
                        *((unsigned char *)v87 + 24) = 1;
                        *((unsigned char *)v81 + 24) = 0;
                        uint64_t v89 = *(void *)(v80 + 8);
                        uint64_t *v81 = v89;
                        if (v89) {
LABEL_121:
                        }
                          *(void *)(v89 + 16) = v81;
                      }
                      *(void *)(v80 + 16) = v81[2];
                      *(void *)(v81[2] + 8 * (*(void *)v81[2] != (void)v81)) = v80;
                      *(void *)(v80 + 8) = v81;
LABEL_303:
                      v81[2] = v80;
                      break;
                    }
                  }
                  else if (!v82 || (v84 = *(unsigned __int8 *)(v82 + 24), unint64_t v83 = (unsigned char *)(v82 + 24), v84))
                  {
                    if (*(uint64_t **)v80 == v78)
                    {
                      uint64_t v235 = v78[1];
                      *(void *)uint64_t v80 = v235;
                      if (v235)
                      {
                        *(void *)(v235 + 16) = v80;
                        float v81 = *(uint64_t **)(v80 + 16);
                      }
                      v78[2] = (uint64_t)v81;
                      *(void *)(*(void *)(v80 + 16) + 8 * (**(void **)(v80 + 16) != v80)) = v78;
                      v78[1] = v80;
                      *(void *)(v80 + 16) = v78;
                      float v81 = (uint64_t *)v78[2];
                      *((unsigned char *)v78 + 24) = 1;
                      *((unsigned char *)v81 + 24) = 0;
                      uint64_t v80 = v81[1];
                      unint64_t v180 = *(uint64_t **)v80;
                      v81[1] = *(void *)v80;
                      if (v180) {
LABEL_301:
                      }
                        v180[2] = (uint64_t)v81;
                    }
                    else
                    {
                      *(unsigned char *)(v80 + 24) = 1;
                      *((unsigned char *)v81 + 24) = 0;
                      uint64_t v80 = v81[1];
                      unint64_t v180 = *(uint64_t **)v80;
                      v81[1] = *(void *)v80;
                      if (v180) {
                        goto LABEL_301;
                      }
                    }
                    *(void *)(v80 + 16) = v81[2];
                    *(void *)(v81[2] + 8 * (*(void *)v81[2] != (void)v81)) = v80;
                    *(void *)uint64_t v80 = v81;
                    goto LABEL_303;
                  }
                  *(unsigned char *)(v80 + 24) = 1;
                  uint64_t v78 = v81;
                  *((unsigned char *)v81 + 24) = v81 == v79;
                  unsigned char *v83 = 1;
                }
                while (v81 != v79);
              }
              uint64_t v45 = v445;
              ++v446;
            }
            void v77[5] = v423++;
LABEL_306:
            uint64_t v181 = &v445;
            uint64_t v182 = &v445;
            if (v45)
            {
              uint64_t v183 = v45;
              while (1)
              {
                while (1)
                {
                  uint64_t v181 = (uint64_t **)v183;
                  unint64_t v184 = v183[4];
                  if (v41 >= v184) {
                    break;
                  }
                  uint64_t v183 = *v181;
                  uint64_t v182 = v181;
                  if (!*v181) {
                    goto LABEL_313;
                  }
                }
                if (v184 >= v41) {
                  break;
                }
                uint64_t v183 = v181[1];
                if (!v183)
                {
                  uint64_t v182 = v181 + 1;
                  goto LABEL_313;
                }
              }
              uint64_t v197 = v181[5];
LABEL_338:
              uint64_t v201 = &v445;
              BOOL v202 = v45;
              do
              {
                unint64_t v203 = v202;
                uint64_t v204 = v201;
                unint64_t v205 = v202[4];
                if (v205 >= v42) {
                  uint64_t v201 = (uint64_t **)v202;
                }
                else {
                  ++v202;
                }
                BOOL v202 = (uint64_t *)*v202;
              }
              while (v202);
              if (v201 == &v445) {
                goto LABEL_350;
              }
              if (v205 < v42) {
                unint64_t v203 = (uint64_t *)v204;
              }
              if (v42 < v203[4])
              {
LABEL_350:
                while (1)
                {
                  while (1)
                  {
                    float v199 = (uint64_t **)v45;
                    unint64_t v206 = v45[4];
                    if (v42 >= v206) {
                      break;
                    }
                    uint64_t v45 = *v199;
                    int8x8_t v200 = v199;
                    if (!*v199) {
                      goto LABEL_353;
                    }
                  }
                  if (v206 >= v42) {
                    break;
                  }
                  uint64_t v45 = v199[1];
                  if (!v45)
                  {
                    int8x8_t v200 = v199 + 1;
                    goto LABEL_353;
                  }
                }
                v199[5] = v197;
              }
              goto LABEL_378;
            }
LABEL_313:
            uint64_t v185 = (uint64_t *)operator new(0x30uLL);
            v185[4] = v41;
            v185[5] = 0;
            *uint64_t v185 = 0;
            v185[1] = 0;
            v185[2] = (uint64_t)v181;
            *uint64_t v182 = v185;
            if (*v444)
            {
              uint64_t v444 = (uint64_t **)*v444;
              uint64_t v185 = *v182;
            }
            unint64_t v186 = v445;
            *((unsigned char *)v185 + 24) = v185 == v445;
            if (v185 != v186)
            {
              do
              {
                uint64_t v187 = v185[2];
                if (*(unsigned char *)(v187 + 24)) {
                  break;
                }
                unint64_t v188 = *(uint64_t **)(v187 + 16);
                uint64_t v189 = *v188;
                if (*v188 == v187)
                {
                  uint64_t v192 = v188[1];
                  if (!v192 || (v193 = *(unsigned __int8 *)(v192 + 24), uint8x8_t v190 = (unsigned char *)(v192 + 24), v193))
                  {
                    if (*(uint64_t **)v187 == v185)
                    {
                      *(unsigned char *)(v187 + 24) = 1;
                      *((unsigned char *)v188 + 24) = 0;
                      uint64_t v196 = *(void *)(v187 + 8);
                      *unint64_t v188 = v196;
                      if (v196) {
                        goto LABEL_329;
                      }
                    }
                    else
                    {
                      uint64_t v194 = *(uint64_t **)(v187 + 8);
                      uint64_t v195 = *v194;
                      *(void *)(v187 + 8) = *v194;
                      if (v195)
                      {
                        *(void *)(v195 + 16) = v187;
                        unint64_t v188 = *(uint64_t **)(v187 + 16);
                      }
                      v194[2] = (uint64_t)v188;
                      *(void *)(*(void *)(v187 + 16) + 8 * (**(void **)(v187 + 16) != v187)) = v194;
                      *uint64_t v194 = v187;
                      *(void *)(v187 + 16) = v194;
                      unint64_t v188 = (uint64_t *)v194[2];
                      uint64_t v187 = *v188;
                      *((unsigned char *)v194 + 24) = 1;
                      *((unsigned char *)v188 + 24) = 0;
                      uint64_t v196 = *(void *)(v187 + 8);
                      *unint64_t v188 = v196;
                      if (v196) {
LABEL_329:
                      }
                        *(void *)(v196 + 16) = v188;
                    }
                    *(void *)(v187 + 16) = v188[2];
                    *(void *)(v188[2] + 8 * (*(void *)v188[2] != (void)v188)) = v187;
                    *(void *)(v187 + 8) = v188;
LABEL_336:
                    v188[2] = v187;
                    break;
                  }
                }
                else if (!v189 || (v191 = *(unsigned __int8 *)(v189 + 24), uint8x8_t v190 = (unsigned char *)(v189 + 24), v191))
                {
                  if (*(uint64_t **)v187 == v185)
                  {
                    uint64_t v234 = v185[1];
                    *(void *)uint64_t v187 = v234;
                    if (v234)
                    {
                      *(void *)(v234 + 16) = v187;
                      unint64_t v188 = *(uint64_t **)(v187 + 16);
                    }
                    v185[2] = (uint64_t)v188;
                    *(void *)(*(void *)(v187 + 16) + 8 * (**(void **)(v187 + 16) != v187)) = v185;
                    v185[1] = v187;
                    *(void *)(v187 + 16) = v185;
                    unint64_t v188 = (uint64_t *)v185[2];
                    *((unsigned char *)v185 + 24) = 1;
                    *((unsigned char *)v188 + 24) = 0;
                    uint64_t v187 = v188[1];
                    uint64_t v198 = *(uint64_t **)v187;
                    v188[1] = *(void *)v187;
                    if (v198) {
LABEL_334:
                    }
                      v198[2] = (uint64_t)v188;
                  }
                  else
                  {
                    *(unsigned char *)(v187 + 24) = 1;
                    *((unsigned char *)v188 + 24) = 0;
                    uint64_t v187 = v188[1];
                    uint64_t v198 = *(uint64_t **)v187;
                    v188[1] = *(void *)v187;
                    if (v198) {
                      goto LABEL_334;
                    }
                  }
                  *(void *)(v187 + 16) = v188[2];
                  *(void *)(v188[2] + 8 * (*(void *)v188[2] != (void)v188)) = v187;
                  *(void *)uint64_t v187 = v188;
                  goto LABEL_336;
                }
                *(unsigned char *)(v187 + 24) = 1;
                uint64_t v185 = v188;
                *((unsigned char *)v188 + 24) = v188 == v186;
                *uint8x8_t v190 = 1;
              }
              while (v188 != v186);
            }
            uint64_t v197 = 0;
            uint64_t v45 = v445;
            ++v446;
            float v199 = &v445;
            int8x8_t v200 = &v445;
            if (v445) {
              goto LABEL_338;
            }
LABEL_353:
            unint64_t v207 = (uint64_t *)operator new(0x30uLL);
            v207[4] = v42;
            v207[5] = 0;
            *unint64_t v207 = 0;
            v207[1] = 0;
            v207[2] = (uint64_t)v199;
            *int8x8_t v200 = v207;
            uint64_t v208 = v207;
            if (*v444)
            {
              uint64_t v444 = (uint64_t **)*v444;
              uint64_t v208 = *v200;
            }
            unint64_t v209 = v445;
            *((unsigned char *)v208 + 24) = v208 == v445;
            if (v208 != v209)
            {
              do
              {
                uint64_t v210 = v208[2];
                if (*(unsigned char *)(v210 + 24)) {
                  break;
                }
                CGFloat v211 = *(uint64_t **)(v210 + 16);
                uint64_t v212 = *v211;
                if (*v211 == v210)
                {
                  uint64_t v215 = v211[1];
                  if (!v215 || (v216 = *(unsigned __int8 *)(v215 + 24), int8x8_t v213 = (unsigned char *)(v215 + 24), v216))
                  {
                    if (*(uint64_t **)v210 == v208)
                    {
                      *(unsigned char *)(v210 + 24) = 1;
                      *((unsigned char *)v211 + 24) = 0;
                      uint64_t v219 = *(void *)(v210 + 8);
                      *CGFloat v211 = v219;
                      if (v219) {
                        goto LABEL_369;
                      }
                    }
                    else
                    {
                      uint64_t v217 = *(uint64_t **)(v210 + 8);
                      uint64_t v218 = *v217;
                      *(void *)(v210 + 8) = *v217;
                      if (v218)
                      {
                        *(void *)(v218 + 16) = v210;
                        CGFloat v211 = *(uint64_t **)(v210 + 16);
                      }
                      v217[2] = (uint64_t)v211;
                      *(void *)(*(void *)(v210 + 16) + 8 * (**(void **)(v210 + 16) != v210)) = v217;
                      *uint64_t v217 = v210;
                      *(void *)(v210 + 16) = v217;
                      CGFloat v211 = (uint64_t *)v217[2];
                      uint64_t v210 = *v211;
                      *((unsigned char *)v217 + 24) = 1;
                      *((unsigned char *)v211 + 24) = 0;
                      uint64_t v219 = *(void *)(v210 + 8);
                      *CGFloat v211 = v219;
                      if (v219) {
LABEL_369:
                      }
                        *(void *)(v219 + 16) = v211;
                    }
                    *(void *)(v210 + 16) = v211[2];
                    *(void *)(v211[2] + 8 * (*(void *)v211[2] != (void)v211)) = v210;
                    *(void *)(v210 + 8) = v211;
LABEL_376:
                    v211[2] = v210;
                    break;
                  }
                }
                else if (!v212 || (v214 = *(unsigned __int8 *)(v212 + 24), int8x8_t v213 = (unsigned char *)(v212 + 24), v214))
                {
                  if (*(uint64_t **)v210 == v208)
                  {
                    uint64_t v236 = v208[1];
                    *(void *)uint64_t v210 = v236;
                    if (v236)
                    {
                      *(void *)(v236 + 16) = v210;
                      CGFloat v211 = *(uint64_t **)(v210 + 16);
                    }
                    v208[2] = (uint64_t)v211;
                    *(void *)(*(void *)(v210 + 16) + 8 * (**(void **)(v210 + 16) != v210)) = v208;
                    v208[1] = v210;
                    *(void *)(v210 + 16) = v208;
                    CGFloat v211 = (uint64_t *)v208[2];
                    *((unsigned char *)v208 + 24) = 1;
                    *((unsigned char *)v211 + 24) = 0;
                    uint64_t v210 = v211[1];
                    uint64_t v220 = *(uint64_t **)v210;
                    v211[1] = *(void *)v210;
                    if (v220) {
LABEL_374:
                    }
                      v220[2] = (uint64_t)v211;
                  }
                  else
                  {
                    *(unsigned char *)(v210 + 24) = 1;
                    *((unsigned char *)v211 + 24) = 0;
                    uint64_t v210 = v211[1];
                    uint64_t v220 = *(uint64_t **)v210;
                    v211[1] = *(void *)v210;
                    if (v220) {
                      goto LABEL_374;
                    }
                  }
                  *(void *)(v210 + 16) = v211[2];
                  *(void *)(v211[2] + 8 * (*(void *)v211[2] != (void)v211)) = v210;
                  *(void *)uint64_t v210 = v211;
                  goto LABEL_376;
                }
                *(unsigned char *)(v210 + 24) = 1;
                uint64_t v208 = v211;
                *((unsigned char *)v211 + 24) = v211 == v209;
                *int8x8_t v213 = 1;
              }
              while (v211 != v209);
            }
            ++v446;
            v207[5] = (uint64_t)v197;
LABEL_378:
            uint64_t v221 = v431;
            if (!v431) {
              goto LABEL_387;
            }
            uint64_t v222 = &v431;
            do
            {
              unint64_t v223 = v221;
              uint8x8_t v224 = v222;
              unint64_t v225 = v221[4];
              uint64_t v226 = (uint64_t **)(v221 + 1);
              if (v225 >= v42)
              {
                uint64_t v226 = (uint64_t **)v223;
                uint64_t v222 = (uint64_t **)v223;
              }
              uint64_t v221 = *v226;
            }
            while (v221);
            if (v222 == &v431) {
              goto LABEL_387;
            }
            if (v225 < v42) {
              unint64_t v223 = (uint64_t *)v224;
            }
            if (v42 < v223[4])
            {
LABEL_387:
              uint64_t v227 = (char *)__p[1];
              unint64_t v228 = (((void)v434 - (unint64_t)__p[1]) << 6) - 1;
              if ((void *)v434 == __p[1]) {
                unint64_t v228 = 0;
              }
              unint64_t v229 = *((void *)&v435 + 1) + v435;
              if (v228 == *((void *)&v435 + 1) + (void)v435)
              {
                sub_1C49DA0D4((uint64_t)__p);
                uint64_t v227 = (char *)__p[1];
                unint64_t v229 = *((void *)&v435 + 1) + v435;
              }
              *(void *)(*(void *)&v227[(v229 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v229 & 0x1FF)) = v42;
              ++*((void *)&v435 + 1);
            }
            ++v36;
            uint64_t v35 = *((void *)v5 + 4);
            unint64_t v37 = v422;
            if (v36 >= *(void *)(v35 + 40 * v422))
            {
              uint64_t v29 = v431;
              break;
            }
          }
        }
        unint64_t v237 = &v431;
LABEL_436:
        unint64_t v238 = v237;
        if (v29)
        {
          do
          {
            unint64_t v237 = (uint64_t **)v29;
            unint64_t v239 = v29[4];
            if (v422 < v239)
            {
              uint64_t v29 = *v237;
              goto LABEL_436;
            }
            if (v239 >= v422) {
              goto LABEL_37;
            }
            uint64_t v29 = v237[1];
          }
          while (v29);
          unint64_t v238 = v237 + 1;
        }
        unint64_t v240 = (uint64_t *)operator new(0x28uLL);
        v240[4] = v422;
        uint64_t *v240 = 0;
        v240[1] = 0;
        v240[2] = (uint64_t)v237;
        *unint64_t v238 = v240;
        if (*v430)
        {
          int v430 = (uint64_t **)*v430;
          unint64_t v240 = *v238;
        }
        sub_1C4949FD4(v431, v240);
        ++v432;
      }
LABEL_37:
      uint64_t v11 = *((void *)&v435 + 1);
    }
    while (*((void *)&v435 + 1));
  }
  if (v446 && *((void *)v5 + 5) != *((void *)v5 + 4))
  {
    for (unint64_t i = 0; i < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)v5 + 5) - *((void *)v5 + 4)) >> 3); ++i)
    {
      unint64_t v13 = v445;
      uint64_t v14 = &v445;
LABEL_15:
      uint64_t v15 = v14;
      if (v13)
      {
        while (1)
        {
          uint64_t v14 = (uint64_t **)v13;
          unint64_t v16 = v13[4];
          if (i < v16)
          {
            unint64_t v13 = *v14;
            goto LABEL_15;
          }
          if (v16 >= i) {
            break;
          }
          unint64_t v13 = v14[1];
          if (!v13)
          {
            uint64_t v15 = v14 + 1;
            goto LABEL_20;
          }
        }
        uint64_t v19 = v14[5];
        uint64_t v20 = v442;
        uint64_t v21 = &v442;
        uint64_t v22 = &v442;
        if (v442) {
          goto LABEL_27;
        }
      }
      else
      {
LABEL_20:
        uint64_t v17 = (uint64_t *)operator new(0x30uLL);
        v17[4] = i;
        v17[5] = 0;
        *uint64_t v17 = 0;
        v17[1] = 0;
        v17[2] = (uint64_t)v14;
        *uint64_t v15 = v17;
        uint64_t v18 = v17;
        if (*v444)
        {
          uint64_t v444 = (uint64_t **)*v444;
          uint64_t v18 = *v15;
        }
        sub_1C4949FD4(v445, v18);
        ++v446;
        uint64_t v19 = (uint64_t *)v17[5];
        uint64_t v20 = v442;
        uint64_t v21 = &v442;
        uint64_t v22 = &v442;
        if (v442)
        {
          while (1)
          {
LABEL_27:
            while (1)
            {
              uint64_t v22 = (uint64_t **)v20;
              unint64_t v23 = v20[4];
              if ((unint64_t)v19 >= v23) {
                break;
              }
              uint64_t v20 = *v22;
              uint64_t v21 = v22;
              if (!*v22) {
                goto LABEL_31;
              }
            }
            if (v23 >= (unint64_t)v19) {
              break;
            }
            uint64_t v20 = v22[1];
            if (!v20)
            {
              uint64_t v21 = v22 + 1;
              goto LABEL_31;
            }
          }
          unint64_t v24 = (uint64_t *)v22;
          goto LABEL_12;
        }
      }
LABEL_31:
      unint64_t v24 = (uint64_t *)operator new(0x30uLL);
      v24[4] = (uint64_t)v19;
      v24[5] = 0;
      *unint64_t v24 = 0;
      v24[1] = 0;
      v24[2] = (uint64_t)v22;
      *uint64_t v21 = v24;
      unint64_t v25 = v24;
      if (*v441)
      {
        v441 = (uint64_t **)*v441;
        unint64_t v25 = *v21;
      }
      sub_1C4949FD4(v442, v25);
      ++v443;
LABEL_12:
      v24[5] = i;
    }
  }
  uint64_t v26 = *((void *)v418 + 4);
  unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)v418 + 5) - v26) >> 3);
  if (v423 <= v27)
  {
    if (v423 < v27) {
      *((void *)v418 + 5) = v26 + 40 * v423;
    }
  }
  else
  {
    sub_1C499C97C(v415, v423 - v27);
  }
  unint64_t v241 = v439;
  if (v439 != v440)
  {
    while (1)
    {
      unint64_t v242 = v445;
      unint64_t v243 = v241[4];
      unint64_t v244 = &v445;
LABEL_450:
      unint64_t v245 = v244;
      if (v242)
      {
        while (1)
        {
          unint64_t v244 = (uint64_t **)v242;
          unint64_t v246 = v242[4];
          if (v243 < v246)
          {
            unint64_t v242 = *v244;
            goto LABEL_450;
          }
          if (v246 >= v243) {
            break;
          }
          unint64_t v242 = v244[1];
          if (!v242)
          {
            unint64_t v245 = v244 + 1;
            goto LABEL_455;
          }
        }
        char v247 = (uint64_t *)v244;
      }
      else
      {
LABEL_455:
        char v247 = (uint64_t *)operator new(0x30uLL);
        v247[4] = v243;
        v247[5] = 0;
        *char v247 = 0;
        v247[1] = 0;
        v247[2] = (uint64_t)v244;
        *unint64_t v245 = v247;
        uint64_t v248 = v247;
        if (*v444)
        {
          uint64_t v444 = (uint64_t **)*v444;
          uint64_t v248 = *v245;
        }
        sub_1C4949FD4(v445, v248);
        ++v446;
      }
      unint64_t v249 = v247[5];
      uint64_t v250 = v417;
      while (1)
      {
        CGFloat v251 = *v250;
        BOOL v252 = v250;
        if (!*v250) {
          break;
        }
        while (1)
        {
          uint64_t v250 = (uint64_t **)v251;
          unint64_t v253 = v251[4];
          if (v253 > v249) {
            break;
          }
          if (v253 >= v249) {
            goto LABEL_468;
          }
          CGFloat v251 = v250[1];
          if (!v251)
          {
            BOOL v252 = v250 + 1;
            goto LABEL_465;
          }
        }
      }
LABEL_465:
      unint64_t v254 = (uint64_t *)operator new(0x28uLL);
      v254[4] = v249;
      *unint64_t v254 = 0;
      v254[1] = 0;
      v254[2] = (uint64_t)v250;
      *BOOL v252 = v254;
      uint64_t v255 = (uint64_t *)**v416;
      if (v255)
      {
        *CGRect v416 = v255;
        unint64_t v254 = *v252;
      }
      sub_1C4949FD4(*((uint64_t **)v418 + 8), v254);
      ++*((void *)v418 + 9);
LABEL_468:
      uint64_t v256 = *((void *)v418 + 4);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)v418 + 5) - v256) >> 3) >= v249) {
        *(unsigned char *)(v256 + 40 * v249 + 32) = 1;
      }
      uint64_t v257 = v445;
      unint64_t v258 = v241[4];
      unint64_t v259 = &v445;
LABEL_472:
      unint64_t v260 = v259;
      if (v257)
      {
        while (1)
        {
          unint64_t v259 = (uint64_t **)v257;
          unint64_t v261 = v257[4];
          if (v258 < v261)
          {
            uint64_t v257 = *v259;
            goto LABEL_472;
          }
          if (v261 >= v258) {
            break;
          }
          uint64_t v257 = v259[1];
          if (!v257)
          {
            unint64_t v260 = v259 + 1;
            goto LABEL_477;
          }
        }
        unint64_t v264 = (unint64_t)v259[5];
        uint64_t v265 = (void *)v241[1];
        if (v265)
        {
          do
          {
LABEL_482:
            uint64_t v266 = (void **)v265;
            uint64_t v265 = (void *)*v265;
          }
          while (v265);
          goto LABEL_447;
        }
      }
      else
      {
LABEL_477:
        uint64_t v262 = (uint64_t *)operator new(0x30uLL);
        v262[4] = v258;
        v262[5] = 0;
        *uint64_t v262 = 0;
        v262[1] = 0;
        v262[2] = (uint64_t)v259;
        int8x8_t *v260 = v262;
        unint64_t v263 = v262;
        if (*v444)
        {
          uint64_t v444 = (uint64_t **)*v444;
          unint64_t v263 = *v260;
        }
        sub_1C4949FD4(v445, v263);
        ++v446;
        unint64_t v264 = v262[5];
        uint64_t v265 = (void *)v241[1];
        if (v265) {
          goto LABEL_482;
        }
      }
      do
      {
        uint64_t v266 = (void **)v241[2];
        BOOL v292 = *v266 == v241;
        unint64_t v241 = v266;
      }
      while (!v292);
LABEL_447:
      unint64_t v241 = v266;
      if (v266 == v440) {
        goto LABEL_488;
      }
    }
  }
  unint64_t v264 = -1;
LABEL_488:
  uint64_t v428 = 0;
  uint64_t v429 = 0;
  uint64_t v427 = &v428;
  if (v423)
  {
    unint64_t v267 = 0;
    while (1)
    {
      int v270 = v436;
      if (*(void *)&v436[8 * v267]) {
        goto LABEL_493;
      }
      if (v267 != v264) {
        break;
      }
      uint64_t v271 = v428;
      uint64_t v272 = &v428;
      int v268 = &v428;
      if (v428)
      {
        while (1)
        {
          while (1)
          {
            int v268 = (uint64_t **)v271;
            unint64_t v273 = v271[4];
            if (v264 >= v273) {
              break;
            }
            uint64_t v271 = *v268;
            uint64_t v272 = v268;
            if (!*v268) {
              goto LABEL_503;
            }
          }
          if (v273 >= v264) {
            break;
          }
          uint64_t v271 = v268[1];
          if (!v271)
          {
            uint64_t v272 = v268 + 1;
            goto LABEL_503;
          }
        }
        uint64_t v275 = v264;
        goto LABEL_492;
      }
LABEL_503:
      uint64_t v269 = (uint64_t *)operator new(0x30uLL);
      v269[4] = v264;
      v269[5] = 0;
      uint64_t *v269 = 0;
      v269[1] = 0;
      v269[2] = (uint64_t)v268;
      void *v272 = v269;
      long long v274 = *v427;
      uint64_t v275 = v264;
      int v268 = (uint64_t **)v269;
      if (*v427) {
        goto LABEL_490;
      }
LABEL_491:
      sub_1C4949FD4(v428, v269);
      ++v429;
LABEL_492:
      v268[5] = (uint64_t *)v275;
LABEL_493:
      if (++v267 == v423) {
        goto LABEL_547;
      }
    }
    unint64_t v276 = v442;
    uint64_t v277 = &v442;
    uint64_t v278 = &v442;
    if (v442)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v278 = (uint64_t **)v276;
          unint64_t v279 = v276[4];
          if (v267 >= v279) {
            break;
          }
          unint64_t v276 = *v278;
          uint64_t v277 = v278;
          if (!*v278) {
            goto LABEL_512;
          }
        }
        if (v279 >= v267) {
          break;
        }
        unint64_t v276 = v278[1];
        if (!v276)
        {
          uint64_t v277 = v278 + 1;
          goto LABEL_512;
        }
      }
      unint64_t v282 = (unint64_t)v278[5];
      uint64_t v283 = *((void *)v5 + 4);
      unint64_t v284 = v445;
      if (v445) {
        goto LABEL_515;
      }
LABEL_531:
      while (1)
      {
        uint64_t v291 = *(void *)(v283 + 40 * v282);
        if (!v291) {
          break;
        }
        unint64_t v282 = *(void *)(*((void *)v5 + 10) + 72 * (*(void *)(v283 + 40 * v282 + 16) + v291) + 8);
        uint64_t v275 = v450;
        if (*(unsigned char *)(v283 + 40 * v282 + 32)) {
          BOOL v292 = 0;
        }
        else {
          BOOL v292 = *(void *)&v270[8 * v450] == 0;
        }
        if (!v292)
        {
LABEL_536:
          uint64_t v293 = v428;
          uint64_t v272 = &v428;
          int v268 = &v428;
          if (v428) {
            goto LABEL_541;
          }
          goto LABEL_545;
        }
      }
    }
    else
    {
LABEL_512:
      uint64_t v280 = (uint64_t *)operator new(0x30uLL);
      v280[4] = v267;
      v280[5] = 0;
      *uint64_t v280 = 0;
      v280[1] = 0;
      v280[2] = (uint64_t)v278;
      void *v277 = v280;
      uint64_t v281 = v280;
      if (*v441)
      {
        v441 = (uint64_t **)*v441;
        uint64_t v281 = *v277;
      }
      sub_1C4949FD4(v442, v281);
      ++v443;
      int v270 = v436;
      unint64_t v282 = v280[5];
      uint64_t v283 = *((void *)v5 + 4);
      unint64_t v284 = v445;
      if (!v445) {
        goto LABEL_531;
      }
LABEL_515:
      while (1)
      {
        uint64_t v285 = *(void *)(v283 + 40 * v282);
        if (!v285) {
          break;
        }
        unint64_t v282 = *(void *)(*((void *)v5 + 10) + 72 * (*(void *)(v283 + 40 * v282 + 16) + v285) + 8);
        uint64_t v286 = &v445;
        uint64_t v287 = v284;
        do
        {
          uint64_t v288 = v287;
          unint64_t v289 = v286;
          unint64_t v290 = v287[4];
          if (v290 >= v282) {
            uint64_t v286 = (uint64_t **)v287;
          }
          else {
            ++v287;
          }
          uint64_t v287 = (uint64_t *)*v287;
        }
        while (v287);
        if (v286 == &v445) {
          goto LABEL_525;
        }
        if (v290 < v282) {
          uint64_t v288 = (uint64_t *)v289;
        }
        if (v282 < v288[4]) {
LABEL_525:
        }
          uint64_t v286 = &v445;
        uint64_t v275 = (uint64_t)v286[5];
        if (*(unsigned char *)(v283 + 40 * v282 + 32) || *(void *)&v270[8 * v275]) {
          goto LABEL_536;
        }
      }
    }
    uint64_t v275 = -1;
    uint64_t v293 = v428;
    uint64_t v272 = &v428;
    int v268 = &v428;
    if (v428)
    {
      while (1)
      {
LABEL_541:
        while (1)
        {
          int v268 = (uint64_t **)v293;
          unint64_t v294 = v293[4];
          if (v267 >= v294) {
            break;
          }
          uint64_t v293 = *v268;
          uint64_t v272 = v268;
          if (!*v268) {
            goto LABEL_545;
          }
        }
        if (v294 >= v267) {
          goto LABEL_492;
        }
        uint64_t v293 = v268[1];
        if (!v293)
        {
          uint64_t v272 = v268 + 1;
          break;
        }
      }
    }
LABEL_545:
    uint64_t v269 = (uint64_t *)operator new(0x30uLL);
    v269[4] = v267;
    v269[5] = 0;
    uint64_t *v269 = 0;
    v269[1] = 0;
    v269[2] = (uint64_t)v268;
    void *v272 = v269;
    long long v274 = *v427;
    int v268 = (uint64_t **)v269;
    if (!*v427) {
      goto LABEL_491;
    }
LABEL_490:
    int v268 = (uint64_t **)v269;
    uint64_t v427 = (uint64_t **)v274;
    uint64_t v269 = *v272;
    goto LABEL_491;
  }
LABEL_547:
  uint64_t v295 = v447;
  long long v296 = v448;
  if (v448 != v447)
  {
    unint64_t v297 = 0;
    do
    {
      long long v299 = v428;
      if (v428)
      {
        unint64_t v300 = *(void *)&v295[72 * v297 + 8];
        long long v301 = &v428;
        uint64_t v302 = v428;
        do
        {
          uint64_t v303 = v302;
          uint64_t v304 = v301;
          unint64_t v305 = v302[4];
          if (v305 >= v300) {
            long long v301 = (uint64_t **)v302;
          }
          else {
            ++v302;
          }
          uint64_t v302 = (uint64_t *)*v302;
        }
        while (v302);
        if (v301 != &v428)
        {
          if (v305 < v300) {
            uint64_t v303 = (uint64_t *)v304;
          }
          if (v300 >= v303[4])
          {
            do
            {
              while (1)
              {
                uint64_t v306 = v299;
                unint64_t v307 = v299[4];
                if (v300 < v307) {
                  break;
                }
                if (v307 >= v300)
                {
                  long long v298 = v306;
                  goto LABEL_550;
                }
                long long v299 = (uint64_t *)v306[1];
                if (!v299)
                {
                  uint64_t v308 = (uint64_t **)(v306 + 1);
                  goto LABEL_569;
                }
              }
              long long v299 = (uint64_t *)*v306;
            }
            while (*v306);
            uint64_t v308 = (uint64_t **)v306;
LABEL_569:
            long long v298 = (uint64_t *)operator new(0x30uLL);
            v298[4] = v300;
            v298[5] = 0;
            *long long v298 = 0;
            v298[1] = 0;
            v298[2] = (uint64_t)v306;
            unsigned char *v308 = v298;
            long long v309 = v298;
            if (*v427)
            {
              uint64_t v427 = (uint64_t **)*v427;
              long long v309 = *v308;
            }
            sub_1C4949FD4(v428, v309);
            ++v429;
            uint64_t v295 = v447;
            long long v296 = v448;
LABEL_550:
            *(void *)&v295[72 * v297 + 8] = v298[5];
          }
        }
      }
      ++v297;
    }
    while (v297 < 0x8E38E38E38E38E39 * ((v296 - v295) >> 3));
  }
  uint64_t v425 = 0;
  uint64_t v426 = 0;
  long long v310 = operator new(0x30uLL);
  *long long v310 = 0;
  v310[1] = 0;
  v310[2] = &v425;
  BOOL v424 = v310;
  uint64_t v425 = v310;
  *((unsigned char *)v310 + 24) = 1;
  uint64_t v426 = 1;
  v310[4] = 0;
  v310[5] = 0;
  uint64_t v311 = *v417;
  if (v264 != -1)
  {
    if (v311)
    {
      uint64_t v312 = (uint64_t *)v417;
      uint64_t v313 = *v417;
      do
      {
        unint64_t v314 = v313[4];
        BOOL v315 = v314 >= v264;
        if (v314 >= v264) {
          uint64_t v316 = (uint64_t **)v313;
        }
        else {
          uint64_t v316 = (uint64_t **)(v313 + 1);
        }
        if (v315) {
          uint64_t v312 = v313;
        }
        uint64_t v313 = *v316;
      }
      while (*v316);
      if (v312 != (uint64_t *)v417 && v312[4] <= v264)
      {
        uint64_t v317 = (uint64_t *)v312[1];
        if (v317)
        {
          do
          {
            uint64_t v318 = v317;
            uint64_t v317 = (uint64_t *)*v317;
          }
          while (v317);
        }
        else
        {
          uint64_t v319 = v312;
          do
          {
            uint64_t v318 = (uint64_t *)v319[2];
            BOOL v292 = *v318 == (void)v319;
            uint64_t v319 = v318;
          }
          while (!v292);
        }
        if (*v416 == v312) {
          *CGRect v416 = v318;
        }
        --*((void *)v418 + 9);
        sub_1C49A0D30(v311, v312);
        operator delete(v312);
        uint64_t v311 = (uint64_t *)*((void *)v418 + 8);
      }
    }
    *((unsigned char *)*v415 + 40 * v264 + 32) = 0;
  }
  sub_1C4999C7C((uint64_t)v416, v311);
  *((void *)v418 + 8) = 0;
  *((void *)v418 + 9) = 0;
  *((void *)v418 + 7) = v417;
  uint64_t v321 = v447;
  if (v448 != v447)
  {
    unint64_t v322 = 0;
    unint64_t v323 = -1;
    int v324 = 1;
    while (1)
    {
      uint64_t v325 = (unint64_t *)&v321[72 * v322];
      unint64_t v327 = *v325;
      unint64_t v326 = v325[1];
      CGRect v328 = v425;
      uint64_t v329 = &v425;
      uint64_t v330 = &v425;
      if (!v425) {
        break;
      }
      uint64_t v331 = &v425;
      uint64_t v332 = v425;
      do
      {
        uint64_t v333 = v332;
        uint64_t v334 = v331;
        unint64_t v335 = v332[4];
        if (v335 >= v327) {
          uint64_t v331 = (uint64_t **)v332;
        }
        else {
          ++v332;
        }
        uint64_t v332 = (uint64_t *)*v332;
      }
      while (v332);
      if (v331 == &v425) {
        goto LABEL_608;
      }
      if (v335 < v327) {
        uint64_t v333 = (uint64_t *)v334;
      }
      if (v327 < v333[4])
      {
LABEL_608:
        uint64_t v336 = v425;
        while (1)
        {
          while (1)
          {
            uint64_t v330 = (uint64_t **)v336;
            unint64_t v337 = v336[4];
            if (v327 >= v337) {
              break;
            }
            uint64_t v336 = *v330;
            uint64_t v329 = v330;
            if (!*v330) {
              goto LABEL_614;
            }
          }
          if (v337 >= v327) {
            break;
          }
          uint64_t v336 = v330[1];
          if (!v336)
          {
            uint64_t v329 = v330 + 1;
            goto LABEL_614;
          }
        }
        CGFloat v338 = (uint64_t *)v330;
        goto LABEL_617;
      }
LABEL_618:
      uint64_t v341 = &v425;
      uint64_t v342 = &v425;
      if (v328)
      {
        uint64_t v343 = &v425;
        uint64_t v344 = v328;
        do
        {
          uint64_t v345 = v344;
          uint64_t v346 = v343;
          unint64_t v347 = v344[4];
          if (v347 >= v326) {
            uint64_t v343 = (uint64_t **)v344;
          }
          else {
            ++v344;
          }
          uint64_t v344 = (uint64_t *)*v344;
        }
        while (v344);
        if (v343 != &v425)
        {
          if (v347 < v326) {
            uint64_t v345 = (uint64_t *)v346;
          }
          if (v326 >= v345[4])
          {
            if (*(void *)&v447[72 * v322 + 8] != v264) {
              goto LABEL_699;
            }
LABEL_639:
            uint64_t v352 = v425;
            uint64_t v353 = &v425;
            int v354 = &v425;
            if (v425)
            {
              while (1)
              {
                while (1)
                {
                  int v354 = (uint64_t **)v352;
                  unint64_t v355 = v352[4];
                  if (v326 >= v355) {
                    break;
                  }
                  uint64_t v352 = *v354;
                  uint64_t v353 = v354;
                  if (!*v354) {
                    goto LABEL_646;
                  }
                }
                if (v355 >= v326) {
                  break;
                }
                uint64_t v352 = v354[1];
                if (!v352)
                {
                  uint64_t v353 = v354 + 1;
                  goto LABEL_646;
                }
              }
              uint64_t v356 = (uint64_t *)v354;
              uint64_t v358 = *v417;
              if (*v417) {
                goto LABEL_653;
              }
            }
            else
            {
LABEL_646:
              uint64_t v356 = (uint64_t *)operator new(0x30uLL);
              v356[4] = v326;
              v356[5] = 0;
              *uint64_t v356 = 0;
              v356[1] = 0;
              v356[2] = (uint64_t)v354;
              *uint64_t v353 = v356;
              uint64_t v357 = v356;
              if (*v424)
              {
                BOOL v424 = (void *)*v424;
                uint64_t v357 = *v353;
              }
              uint64_t v320 = sub_1C4949FD4(v425, v357);
              ++v426;
              uint64_t v358 = *v417;
              if (!*v417) {
                goto LABEL_663;
              }
LABEL_653:
              unint64_t v359 = v356[5];
              unint64_t v360 = v417;
              uint64_t v361 = v358;
              do
              {
                unint64_t v362 = v361[4];
                BOOL v363 = v362 >= v359;
                if (v362 >= v359) {
                  int64x2_t v364 = (uint64_t **)v361;
                }
                else {
                  int64x2_t v364 = (uint64_t **)(v361 + 1);
                }
                if (v363) {
                  unint64_t v360 = (uint64_t **)v361;
                }
                uint64_t v361 = *v364;
              }
              while (*v364);
              if (v360 != v417 && v359 >= (unint64_t)v360[4]) {
                goto LABEL_699;
              }
            }
LABEL_663:
            uint64_t v365 = v425;
            uint64_t v366 = &v425;
            uint64_t v367 = &v425;
            if (v425)
            {
              while (1)
              {
                while (1)
                {
                  uint64_t v367 = (uint64_t **)v365;
                  unint64_t v368 = v365[4];
                  if (v326 >= v368) {
                    break;
                  }
                  uint64_t v365 = *v367;
                  uint64_t v366 = v367;
                  if (!*v367) {
                    goto LABEL_670;
                  }
                }
                if (v368 >= v326) {
                  break;
                }
                uint64_t v365 = v367[1];
                if (!v365)
                {
                  uint64_t v366 = v367 + 1;
                  goto LABEL_670;
                }
              }
              uint64_t v369 = (uint64_t *)v367;
              uint64_t v371 = v417;
            }
            else
            {
LABEL_670:
              uint64_t v369 = (uint64_t *)operator new(0x30uLL);
              v369[4] = v326;
              v369[5] = 0;
              *uint64_t v369 = 0;
              v369[1] = 0;
              v369[2] = (uint64_t)v367;
              *uint64_t v366 = v369;
              uint64_t v370 = v369;
              if (*v424)
              {
                BOOL v424 = (void *)*v424;
                uint64_t v370 = *v366;
              }
              uint64_t v320 = sub_1C4949FD4(v425, v370);
              ++v426;
              uint64_t v371 = v417;
              uint64_t v358 = *v417;
            }
            unint64_t v372 = v369[5];
LABEL_676:
            uint64_t v373 = v371;
            if (v358)
            {
              do
              {
                uint64_t v371 = (uint64_t **)v358;
                unint64_t v374 = v358[4];
                if (v374 > v372)
                {
                  uint64_t v358 = *v371;
                  goto LABEL_676;
                }
                if (v374 >= v372) {
                  goto LABEL_684;
                }
                uint64_t v358 = v371[1];
              }
              while (v358);
              uint64_t v373 = v371 + 1;
            }
            uint64_t v375 = (uint64_t *)operator new(0x28uLL);
            v375[4] = v372;
            *uint64_t v375 = 0;
            v375[1] = 0;
            v375[2] = (uint64_t)v371;
            *uint64_t v373 = v375;
            uint64_t v376 = (uint64_t *)**v416;
            if (v376)
            {
              *CGRect v416 = v376;
              uint64_t v375 = *v373;
            }
            uint64_t v320 = sub_1C4949FD4(*((uint64_t **)v418 + 8), v375);
            ++*((void *)v418 + 9);
LABEL_684:
            uint64_t v377 = *((void *)v418 + 4);
            if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)v418 + 5) - v377) >> 3) >= v372)
            {
              *(unsigned char *)(v377 + 40 * v372 + 32) = 1;
              uint64_t v378 = v425;
              uint64_t v379 = &v425;
              uint64_t v380 = &v425;
              if (!v425) {
                goto LABEL_694;
              }
              while (1)
              {
LABEL_690:
                while (1)
                {
                  uint64_t v380 = (uint64_t **)v378;
                  unint64_t v381 = v378[4];
                  if (v326 >= v381) {
                    break;
                  }
                  uint64_t v378 = *v380;
                  uint64_t v379 = v380;
                  if (!*v380) {
                    goto LABEL_694;
                  }
                }
                if (v381 >= v326) {
                  break;
                }
                uint64_t v378 = v380[1];
                if (!v378)
                {
                  uint64_t v379 = v380 + 1;
                  goto LABEL_694;
                }
              }
              v382 = (uint64_t *)v380;
            }
            else
            {
              uint64_t v378 = v425;
              uint64_t v379 = &v425;
              uint64_t v380 = &v425;
              if (v425) {
                goto LABEL_690;
              }
LABEL_694:
              v382 = (uint64_t *)operator new(0x30uLL);
              v382[4] = v326;
              v382[5] = 0;
              uint64_t *v382 = 0;
              v382[1] = 0;
              v382[2] = (uint64_t)v380;
              *uint64_t v379 = v382;
              uint64_t v383 = v382;
              if (*v424)
              {
                BOOL v424 = (void *)*v424;
                uint64_t v383 = *v379;
              }
              uint64_t v320 = sub_1C4949FD4(v425, v383);
              ++v426;
            }
            unint64_t v323 = v382[5];
            goto LABEL_699;
          }
        }
        while (1)
        {
          while (1)
          {
            uint64_t v342 = (uint64_t **)v328;
            unint64_t v348 = v328[4];
            if (v326 >= v348) {
              break;
            }
            CGRect v328 = *v342;
            uint64_t v341 = v342;
            if (!*v342) {
              goto LABEL_635;
            }
          }
          if (v348 >= v326) {
            break;
          }
          CGRect v328 = v342[1];
          if (!v328)
          {
            uint64_t v341 = v342 + 1;
            goto LABEL_635;
          }
        }
        id v349 = (uint64_t *)v342;
      }
      else
      {
LABEL_635:
        id v349 = (uint64_t *)operator new(0x30uLL);
        v349[4] = v326;
        v349[5] = 0;
        uint64_t *v349 = 0;
        v349[1] = 0;
        v349[2] = (uint64_t)v342;
        *uint64_t v341 = v349;
        uint64_t v350 = v349;
        if (*v424)
        {
          BOOL v424 = (void *)*v424;
          uint64_t v350 = *v341;
        }
        uint64_t v320 = sub_1C4949FD4(v425, v350);
        ++v426;
      }
      uint64_t v351 = v324++;
      v349[5] = v351;
      if (*(void *)&v447[72 * v322 + 8] == v264) {
        goto LABEL_639;
      }
LABEL_699:
      uint64_t v384 = v425;
      id v385 = &v425;
      id v386 = &v425;
      if (v425)
      {
        id v387 = v425;
        while (1)
        {
          while (1)
          {
            id v386 = (uint64_t **)v387;
            unint64_t v388 = v387[4];
            if (v327 >= v388) {
              break;
            }
            id v387 = *v386;
            id v385 = v386;
            if (!*v386) {
              goto LABEL_706;
            }
          }
          if (v388 >= v327) {
            break;
          }
          id v387 = v386[1];
          if (!v387)
          {
            id v385 = v386 + 1;
            goto LABEL_706;
          }
        }
        uint64_t v389 = (uint64_t *)v386;
      }
      else
      {
LABEL_706:
        uint64_t v389 = (uint64_t *)operator new(0x30uLL);
        v389[4] = v327;
        v389[5] = 0;
        *uint64_t v389 = 0;
        v389[1] = 0;
        v389[2] = (uint64_t)v386;
        *id v385 = v389;
        uint64_t v390 = v389;
        if (*v424)
        {
          BOOL v424 = (void *)*v424;
          uint64_t v390 = *v385;
        }
        uint64_t v320 = sub_1C4949FD4(v425, v390);
        uint64_t v384 = v425;
        ++v426;
      }
      uint64_t v321 = v447;
      *(void *)&v447[72 * v322] = v389[5];
      double v391 = &v425;
      id v392 = &v425;
      if (v384)
      {
        while (1)
        {
          while (1)
          {
            id v392 = (uint64_t **)v384;
            unint64_t v393 = v384[4];
            if (v326 >= v393) {
              break;
            }
            uint64_t v384 = *v392;
            double v391 = v392;
            if (!*v392) {
              goto LABEL_717;
            }
          }
          if (v393 >= v326) {
            break;
          }
          uint64_t v384 = v392[1];
          if (!v384)
          {
            double v391 = v392 + 1;
            goto LABEL_717;
          }
        }
        uint64_t v394 = (uint64_t *)v392;
      }
      else
      {
LABEL_717:
        uint64_t v394 = (uint64_t *)operator new(0x30uLL);
        v394[4] = v326;
        v394[5] = 0;
        uint64_t *v394 = 0;
        v394[1] = 0;
        v394[2] = (uint64_t)v392;
        *double v391 = v394;
        uint64_t v395 = v394;
        if (*v424)
        {
          BOOL v424 = (void *)*v424;
          uint64_t v395 = *v391;
        }
        uint64_t v320 = sub_1C4949FD4(v425, v395);
        ++v426;
        uint64_t v321 = v447;
      }
      *(void *)&v321[72 * v322++ + 8] = v394[5];
      if (v322 >= 0x8E38E38E38E38E39 * ((v448 - v321) >> 3)) {
        goto LABEL_721;
      }
    }
LABEL_614:
    CGFloat v338 = (uint64_t *)operator new(0x30uLL);
    v338[4] = v327;
    v338[5] = 0;
    uint64_t *v338 = 0;
    v338[1] = 0;
    v338[2] = (uint64_t)v330;
    uint64_t *v329 = v338;
    double v339 = v338;
    if (*v424)
    {
      BOOL v424 = (void *)*v424;
      double v339 = *v329;
    }
    uint64_t v320 = sub_1C4949FD4(v425, v339);
    CGRect v328 = v425;
    ++v426;
LABEL_617:
    uint64_t v340 = v324++;
    v338[5] = v340;
    goto LABEL_618;
  }
  unint64_t v323 = -1;
  int v324 = 1;
LABEL_721:
  uint64_t v396 = *((void *)v418 + 4);
  unint64_t v397 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)v418 + 5) - v396) >> 3);
  if (v324 <= v397)
  {
    id v398 = v417;
    if (v324 < v397) {
      *((void *)v418 + 5) = v396 + 40 * v324;
    }
  }
  else
  {
    sub_1C499C97C(v415, v324 - v397);
    id v398 = v417;
  }
  if (v323 != -1)
  {
    uint64_t v399 = *v398;
    unsigned __int8 v400 = v398;
    if (*v398)
    {
      while (1)
      {
        while (1)
        {
          unsigned __int8 v400 = (uint64_t **)v399;
          unint64_t v401 = v399[4];
          if (v401 <= v323) {
            break;
          }
          uint64_t v399 = *v400;
          id v398 = v400;
          if (!*v400) {
            goto LABEL_733;
          }
        }
        if (v401 >= v323) {
          break;
        }
        uint64_t v399 = v400[1];
        if (!v399)
        {
          id v398 = v400 + 1;
          goto LABEL_733;
        }
      }
    }
    else
    {
LABEL_733:
      CGRect v402 = (uint64_t *)operator new(0x28uLL);
      v402[4] = v323;
      uint64_t *v402 = 0;
      v402[1] = 0;
      v402[2] = (uint64_t)v400;
      *id v398 = v402;
      CGRect v403 = (uint64_t *)**v416;
      if (v403)
      {
        *CGRect v416 = v403;
        CGRect v402 = *v398;
      }
      uint64_t v320 = sub_1C4949FD4(*((uint64_t **)v418 + 8), v402);
      ++*((void *)v418 + 9);
    }
    uint64_t v404 = *((void *)v418 + 4);
    if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)v418 + 5) - v404) >> 3) >= v323) {
      *(unsigned char *)(v404 + 40 * v323 + 32) = 1;
    }
  }
  sub_1C4B800AC((uint64_t)v320, (uint64_t)&v447);
  CGRect v406 = v447;
  CGRect v405 = v448;
  CGRect v407 = v418;
  if (v447 != v448)
  {
    CGRect v408 = (char *)*((void *)v418 + 11);
    do
    {
      if ((unint64_t)v408 < *((void *)v407 + 12))
      {
        *(_OWORD *)CGRect v408 = *v406;
        *((_OWORD *)v408 + 1) = v406[1];
        *((_OWORD *)v408 + 2) = v406[2];
        *((_OWORD *)v408 + 3) = v406[3];
        *((void *)v408 + 8) = *((void *)v406 + 8);
        v408 += 72;
      }
      else
      {
        CGRect v408 = sub_1C499CBEC((char **)v418 + 10, (uint64_t)v406);
      }
      CGRect v407 = v418;
      *((void *)v418 + 11) = v408;
      CGRect v406 = (_OWORD *)((char *)v406 + 72);
    }
    while (v406 != (_OWORD *)v405);
  }
  Network::prepareNetwork(v407);
  sub_1C4999C7C((uint64_t)&v424, v425);
  sub_1C4999C7C((uint64_t)&v427, v428);
  sub_1C4999C7C((uint64_t)&v430, v431);
  CGRect v409 = (void **)__p[1];
  CGRect v410 = (void **)v434;
  *((void *)&v435 + 1) = 0;
  unint64_t v411 = v434 - (unint64_t)__p[1];
  if ((unint64_t)v434 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v409);
      CGRect v410 = (void **)v434;
      CGRect v409 = (void **)((char *)__p[1] + 8);
      __p[1] = v409;
      unint64_t v411 = v434 - (void)v409;
    }
    while ((void)v434 - (void)v409 > 0x10uLL);
  }
  unint64_t v412 = v411 >> 3;
  if (v412 == 1)
  {
    uint64_t v413 = 256;
    goto LABEL_750;
  }
  if (v412 == 2)
  {
    uint64_t v413 = 512;
LABEL_750:
    *(void *)&long long v435 = v413;
  }
  if (v409 != v410)
  {
    do
    {
      CGRect v414 = *v409++;
      operator delete(v414);
    }
    while (v409 != v410);
    if ((void *)v434 != __p[1]) {
      *(void *)&long long v434 = v434 + (((unint64_t)__p[1] - v434 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v436) {
    operator delete(v436);
  }
  sub_1C4999C7C((uint64_t)&v439, v440[0]);
  sub_1C4999C7C((uint64_t)&v441, v442);
  sub_1C4999C7C((uint64_t)&v444, v445);
  if (v447)
  {
    BOOL v448 = v447;
    operator delete(v447);
  }
}

void sub_1C4B7FFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,void *a31,uint64_t a32,char a33)
{
  sub_1C4999C7C((uint64_t)&a30, a31);
  sub_1C4946780((uint64_t)&a33);
  uint64_t v35 = *(void **)(v33 - 224);
  if (v35) {
    operator delete(v35);
  }
  sub_1C4999C7C(v33 - 200, *(void **)(v33 - 192));
  sub_1C4999C7C(v33 - 176, *(void **)(v33 - 168));
  sub_1C4999C7C(v33 - 152, *(void **)(v33 - 144));
  unint64_t v36 = *(void **)(v33 - 128);
  if (v36)
  {
    *(void *)(v33 - 120) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(a1);
}

void sub_1C4B800AC(uint64_t a1, uint64_t a2)
{
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  unint64_t v67 = 0;
  std::string v68 = &v69;
  long long __p = 0;
  *(void *)uint64_t v66 = 0;
  uint64_t v3 = *(char **)a2;
  if (*(void *)(a2 + 8) == *(void *)a2)
  {
    uint64_t v63 = 0;
    if (&__p == (void **)a2) {
      goto LABEL_107;
    }
    goto LABEL_106;
  }
  unint64_t v4 = 0;
  do
  {
    uint64_t v7 = &v3[72 * v4];
    unsigned int v8 = *(_DWORD *)v7;
    unsigned int v9 = *((_DWORD *)v7 + 2);
    unsigned int v10 = *((_DWORD *)v7 + 4);
    unsigned int v11 = *((_DWORD *)v7 + 6);
    unint64_t v12 = v69;
    if (!v69)
    {
      unint64_t v35 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)v66 - (void)__p) >> 3);
      unint64_t v36 = &v69;
LABEL_50:
      unint64_t v37 = v36;
LABEL_97:
      uint64_t v59 = operator new(0x40uLL);
      v59[8] = v8;
      v59[9] = v9;
      v59[10] = v10;
      v59[11] = v11;
      v59[12] = 0;
      *((void *)v59 + 7) = 0;
      *(void *)uint64_t v59 = 0;
      *((void *)v59 + 1) = 0;
      *((void *)v59 + 2) = v36;
      std::string *v37 = (uint64_t *)v59;
      uint64_t v60 = (uint64_t *)v59;
      if (*v68)
      {
        std::string v68 = (uint64_t **)*v68;
        uint64_t v60 = *v37;
      }
      sub_1C4949FD4(v69, v60);
      ++v70;
      uint64_t v3 = *(char **)a2;
      unint64_t v34 = *(char **)v66;
      unint64_t v61 = v67;
      *((void *)v59 + 7) = v35;
      int v62 = &v3[72 * v4];
      if ((unint64_t)v34 >= v61) {
        goto LABEL_100;
      }
      goto LABEL_3;
    }
    unint64_t v13 = &v69;
    uint64_t v14 = v69;
    do
    {
      while (1)
      {
        unsigned int v15 = *((_DWORD *)v14 + 8);
        BOOL v22 = v15 >= v8;
        BOOL v16 = v15 > v8;
        if (v22) {
          int v17 = v16;
        }
        else {
          int v17 = -1;
        }
        unsigned int v18 = *((_DWORD *)v14 + 10);
        BOOL v22 = v18 >= v10;
        int v19 = v18 > v10;
        if (!v22) {
          int v19 = -1;
        }
        if (v17 != -1)
        {
          if (v17) {
            break;
          }
          unsigned int v20 = *((_DWORD *)v14 + 9);
          BOOL v22 = v20 >= v9;
          int v21 = v20 > v9;
          if (!v22) {
            int v21 = -1;
          }
          if (v21 != -1)
          {
            if (v21) {
              break;
            }
            if (v19 != -1)
            {
              BOOL v22 = v19 || *((_DWORD *)v14 + 11) >= v11;
              if (v22) {
                break;
              }
            }
          }
        }
        uint64_t v14 = (uint64_t *)v14[1];
        if (!v14) {
          goto LABEL_27;
        }
      }
      unint64_t v13 = (uint64_t **)v14;
      uint64_t v14 = (uint64_t *)*v14;
    }
    while (v14);
LABEL_27:
    if (v13 == &v69) {
      goto LABEL_48;
    }
    unsigned int v23 = *((_DWORD *)v13 + 8);
    BOOL v24 = v23 > v8;
    BOOL v25 = v23 < v8;
    if (v24) {
      int v26 = -1;
    }
    else {
      int v26 = v25;
    }
    unsigned int v27 = *((_DWORD *)v13 + 10);
    unsigned int v28 = *((_DWORD *)v13 + 11);
    BOOL v24 = v27 > v10;
    BOOL v29 = v27 < v10;
    if (v24) {
      int v30 = -1;
    }
    else {
      int v30 = v29;
    }
    int v31 = v28 < v11;
    if (v28 > v11) {
      int v31 = -1;
    }
    if (v26 == -1) {
      goto LABEL_48;
    }
    if (!v26)
    {
      unsigned int v32 = *((_DWORD *)v13 + 9);
      BOOL v24 = v32 > v9;
      int v33 = v32 < v9;
      if (v24) {
        int v33 = -1;
      }
      if (v33 == -1 || !v33 && (v30 == -1 || !v30 && (v31 == -1 || !v31 && *((_DWORD *)v13 + 12))))
      {
LABEL_48:
        unint64_t v34 = *(char **)v66;
        unint64_t v35 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)v66 - (void)__p) >> 3);
        while (1)
        {
          while (1)
          {
            unint64_t v36 = (uint64_t **)v12;
            unsigned int v46 = *((_DWORD *)v12 + 8);
            if (v46 > v8) {
              int v47 = -1;
            }
            else {
              int v47 = v46 < v8;
            }
            unsigned int v49 = *((_DWORD *)v12 + 10);
            unsigned int v48 = *((_DWORD *)v12 + 11);
            if (v49 > v10) {
              int v50 = -1;
            }
            else {
              int v50 = v49 < v10;
            }
            int v51 = v48 < v11;
            if (v48 > v11) {
              int v51 = -1;
            }
            if (v47 != -1)
            {
              if (v47) {
                break;
              }
              unsigned int v52 = *((_DWORD *)v36 + 9);
              BOOL v24 = v52 > v9;
              int v53 = v52 < v9;
              if (v24) {
                int v53 = -1;
              }
              if (v53 != -1 && (v53 || v50 != -1 && (v50 || v51 != -1 && (v51 || !*((_DWORD *)v36 + 12))))) {
                break;
              }
            }
            unint64_t v12 = *v36;
            if (!*v36) {
              goto LABEL_50;
            }
          }
          BOOL v22 = v46 >= v8;
          BOOL v54 = v46 > v8;
          if (v22) {
            int v55 = v54;
          }
          else {
            int v55 = -1;
          }
          int v56 = v49 > v10;
          if (v49 < v10) {
            int v56 = -1;
          }
          if (v55 != -1)
          {
            if (v55) {
              break;
            }
            unsigned int v57 = *((_DWORD *)v36 + 9);
            BOOL v22 = v57 >= v9;
            int v58 = v57 > v9;
            if (!v22) {
              int v58 = -1;
            }
            if (v58 != -1 && (v58 || v56 != -1 && (v56 || v48 >= v11))) {
              break;
            }
          }
          unint64_t v12 = v36[1];
          if (!v12)
          {
            unint64_t v37 = v36 + 1;
            goto LABEL_97;
          }
        }
        v36[7] = (uint64_t *)v35;
        int v62 = &v3[72 * v4];
        if ((unint64_t)v34 >= v67)
        {
LABEL_100:
          uint64_t v6 = sub_1C499CBEC((char **)&__p, (uint64_t)v62);
          uint64_t v3 = *(char **)a2;
          goto LABEL_4;
        }
LABEL_3:
        *(_OWORD *)unint64_t v34 = *(_OWORD *)v62;
        uint64_t v5 = &v3[72 * v4];
        *((_OWORD *)v34 + 1) = *((_OWORD *)v5 + 1);
        *((_OWORD *)v34 + 2) = *((_OWORD *)v5 + 2);
        *((_OWORD *)v34 + 3) = *((_OWORD *)v5 + 3);
        *((void *)v34 + 8) = *((void *)v5 + 8);
        uint64_t v6 = v34 + 72;
LABEL_4:
        *(void *)uint64_t v66 = v6;
        goto LABEL_5;
      }
    }
    unint64_t v38 = (unint64_t)v13[7];
    uint64_t v39 = (char *)__p;
    if (v38 >= 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)v66 - (void)__p) >> 3))
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      long long v40 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v40, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C492D000, v40, OS_LOG_TYPE_FAULT, "Error when merging equivalent edges: index out of bounds", buf, 2u);
      }

      uint64_t v39 = (char *)__p;
      uint64_t v3 = *(char **)a2;
    }
    unint64_t v41 = (double *)&v3[72 * v4];
    unint64_t v42 = (double *)&v39[72 * v38];
    if (v42 != v41)
    {
      double v43 = v41[4];
      if (v43 < v42[4])
      {
        *(_OWORD *)unint64_t v42 = *(_OWORD *)v41;
        v42[4] = v43;
        unint64_t v44 = &v3[72 * v4];
        uint64_t v45 = &v39[72 * v38];
        *((void *)v45 + 5) = *((void *)v44 + 5);
        *((_OWORD *)v45 + 1) = *((_OWORD *)v44 + 1);
        *((_OWORD *)v45 + 3) = *((_OWORD *)v44 + 3);
        *((void *)v45 + 8) = *((void *)v44 + 8);
      }
    }
LABEL_5:
    ++v4;
  }
  while (v4 < 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 8) - (void)v3) >> 3));
  uint64_t v63 = (char *)__p;
  if (&__p != (void **)a2)
  {
LABEL_106:
    sub_1C499B0BC(a2, v63, *(char **)v66, 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)v66 - (void)v63) >> 3));
    uint64_t v63 = (char *)__p;
  }
LABEL_107:
  if (v63)
  {
    *(void *)uint64_t v66 = v63;
    operator delete(v63);
  }
  sub_1C49A1374(v69);
}

void sub_1C4B805E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1C49A1374(a17);
  _Unwind_Resume(a1);
}

void Network::compose(Network *this, const Network *a2, Network *a3, char a4)
{
  uint64_t v8 = *((void *)this + 4);
  unsigned int v9 = (void **)((char *)this + 32);
  if (*((void *)this + 5) != v8) {
    *((void *)this + 5) = v8;
  }
  unsigned int v10 = (void **)((char *)this + 56);
  unsigned int v11 = (uint64_t **)((char *)this + 64);
  sub_1C4999C7C((uint64_t)this + 56, *((void **)this + 8));
  *((void *)this + 7) = v11;
  *((void *)this + 9) = 0;
  *unsigned int v11 = 0;
  long long __p = 0;
  unint64_t v38 = 0;
  uint64_t v39 = 0;
  unint64_t v35 = 0;
  unint64_t v36 = 0;
  unint64_t v34 = &v35;
  sub_1C4999C7C((uint64_t)this + 216, *((void **)this + 28));
  *((void *)this + 27) = (char *)this + 224;
  *((void *)this + 29) = 0;
  *((void *)this + 28) = 0;
  v33[0] = 0;
  v33[1] = 0;
  v31[1] = 0;
  unsigned int v32 = (uint64_t *)v33;
  int v30 = (uint64_t *)v31;
  v31[0] = 0;
  uint64_t v12 = sub_1C4B80950((uint64_t)this, (uint64_t)a2, a3, *((void *)a2 + 3), *((void *)a3 + 3), (uint64_t)&v34, (uint64_t)&__p, &v32, &v30, a4);
  uint64_t v13 = *((void *)this + 4);
  unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 5) - v13) >> 3);
  if (v36 <= v14)
  {
    if (v36 < v14) {
      *((void *)this + 5) = v13 + 40 * v36;
    }
  }
  else
  {
    sub_1C499C97C(v9, v36 - v14);
  }
  sub_1C4B800AC(v12, (uint64_t)&__p);
  unsigned int v15 = __p;
  BOOL v16 = v38;
  if (__p != v38)
  {
    int v17 = (char *)*((void *)this + 11);
    do
    {
      if ((unint64_t)v17 < *((void *)this + 12))
      {
        *(_OWORD *)int v17 = *v15;
        *((_OWORD *)v17 + 1) = v15[1];
        *((_OWORD *)v17 + 2) = v15[2];
        *((_OWORD *)v17 + 3) = v15[3];
        *((void *)v17 + 8) = *((void *)v15 + 8);
        v17 += 72;
      }
      else
      {
        int v17 = sub_1C499CBEC((char **)this + 10, (uint64_t)v15);
      }
      *((void *)this + 11) = v17;
      unsigned int v15 = (_OWORD *)((char *)v15 + 72);
    }
    while (v15 != v16);
  }
  Network::prepareNetwork(this);
  unsigned int v18 = v30;
  if (v30 != (uint64_t *)v31)
  {
    do
    {
      unint64_t v19 = v18[4];
      unsigned int v20 = *v11;
      int v21 = (uint64_t **)((char *)this + 64);
      BOOL v22 = (uint64_t **)((char *)this + 64);
      if (*v11)
      {
        while (1)
        {
          while (1)
          {
            BOOL v22 = (uint64_t **)v20;
            unint64_t v23 = v20[4];
            if (v23 <= v19) {
              break;
            }
            unsigned int v20 = *v22;
            int v21 = v22;
            if (!*v22) {
              goto LABEL_23;
            }
          }
          if (v23 >= v19) {
            break;
          }
          unsigned int v20 = v22[1];
          if (!v20)
          {
            int v21 = v22 + 1;
            goto LABEL_23;
          }
        }
      }
      else
      {
LABEL_23:
        BOOL v24 = (uint64_t *)operator new(0x28uLL);
        v24[4] = v19;
        *BOOL v24 = 0;
        v24[1] = 0;
        v24[2] = (uint64_t)v22;
        *int v21 = v24;
        BOOL v25 = (void *)**v10;
        if (v25)
        {
          *unsigned int v10 = v25;
          BOOL v24 = *v21;
        }
        sub_1C4949FD4(*((uint64_t **)this + 8), v24);
        ++*((void *)this + 9);
      }
      uint64_t v26 = *((void *)this + 4);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 5) - v26) >> 3) >= v19) {
        *(unsigned char *)(v26 + 40 * v19 + 32) = 1;
      }
      unsigned int v27 = (uint64_t *)v18[1];
      if (v27)
      {
        do
        {
          unsigned int v28 = v27;
          unsigned int v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          unsigned int v28 = (uint64_t *)v18[2];
          BOOL v29 = *v28 == (void)v18;
          unsigned int v18 = v28;
        }
        while (!v29);
      }
      unsigned int v18 = v28;
    }
    while (v28 != (uint64_t *)v31);
  }
  sub_1C4999C7C((uint64_t)&v30, v31[0]);
  sub_1C4999C7C((uint64_t)&v32, v33[0]);
  sub_1C49A1374(v35);
  if (__p)
  {
    unint64_t v38 = __p;
    operator delete(__p);
  }
}

void sub_1C4B8090C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B80950(uint64_t result, uint64_t a2, Network *a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t **a8, uint64_t **a9, char a10)
{
  uint64_t v62 = result;
  unint64_t v11 = a4;
  unint64_t v14 = *(void **)(a6 + 8);
  if (v14)
  {
    unsigned int v15 = (void *)(a6 + 8);
    do
    {
      unint64_t v16 = v14[4];
      BOOL v18 = v16 == a4;
      BOOL v17 = v16 < a4;
      if (v18) {
        BOOL v17 = v14[5] < a5;
      }
      BOOL v18 = !v17;
      if (v17) {
        unint64_t v19 = v14 + 1;
      }
      else {
        unint64_t v19 = v14;
      }
      if (v18) {
        unsigned int v15 = v14;
      }
      unint64_t v14 = (void *)*v19;
    }
    while (*v19);
    if (v15 != (void *)(a6 + 8))
    {
      unint64_t v20 = v15[4];
      BOOL v18 = v20 == a4;
      BOOL v21 = v20 <= a4;
      if (v18) {
        BOOL v21 = v15[5] <= a5;
      }
      if (v21)
      {
        unint64_t v22 = v15[6];
        if (v22 != -1)
        {
          unint64_t v23 = a8[1];
          if (v23)
          {
            BOOL v24 = a8 + 1;
            do
            {
              unint64_t v25 = v23[4];
              BOOL v26 = v25 >= v22;
              if (v25 >= v22) {
                unsigned int v27 = (uint64_t **)v23;
              }
              else {
                unsigned int v27 = (uint64_t **)(v23 + 1);
              }
              if (v26) {
                BOOL v24 = (uint64_t **)v23;
              }
              unint64_t v23 = *v27;
            }
            while (*v27);
            if (v24 != a8 + 1 && v22 >= (unint64_t)v24[4]) {
              return result;
            }
          }
        }
      }
    }
  }
  int v58 = (void *)(a6 + 8);
  uint64_t v65 = *(void *)(a6 + 16);
  uint64_t result = (uint64_t)sub_1C4B8228C((uint64_t **)a6, a4, a5, &v65);
  uint64_t v61 = result;
  uint64_t v28 = *(void *)(a2 + 32);
  if (*(void *)(v28 + 40 * v11))
  {
    unint64_t v29 = 0;
    unint64_t v59 = v11;
    do
    {
      uint64_t v30 = *(void *)(a2 + 80) + 72 * (*(void *)(v28 + 40 * v11 + 16) + v29);
      unint64_t v32 = *(void *)(v30 + 8);
      int v31 = *(uint64_t **)(v30 + 16);
      uint64_t result = Network::findFirstEdgeGivenSymbol(a3, a5, v31);
      unint64_t v33 = result;
      if (!a5 && a10 && result == -1)
      {
        uint64_t result = sub_1C4B81EA8(v62, a2, (uint64_t)a3, a6, v61, v32, 0, v30, 0, a9, a7, 1);
        if ((result & 1) == 0)
        {
          LOBYTE(v56) = 1;
          uint64_t result = sub_1C4B80950(v62, a2, a3, v32, 0, a6, a7, a8, a9, v56);
        }
      }
      else if (result != -1)
      {
        for (uint64_t i = *((void *)a3 + 4); v33 < *(void *)(i + 40 * a5); uint64_t i = *((void *)a3 + 4))
        {
          unint64_t v35 = v33 + *(void *)(i + 40 * a5 + 16);
          uint64_t v36 = *((void *)a3 + 10);
          uint64_t v37 = v36 + 72 * v35;
          if (*(uint64_t **)(v37 + 16) != v31) {
            break;
          }
          unint64_t v38 = *(void *)(v37 + 8);
          uint64_t result = sub_1C4B81EA8(v62, a2, (uint64_t)a3, a6, v61, v32, v38, v30, v36 + 72 * v35, a9, a7, 0);
          if ((result & 1) == 0)
          {
            LOBYTE(v57) = a10;
            uint64_t result = sub_1C4B80950(v62, a2, a3, v32, v38, a6, a7, a8, a9, v57);
          }
          ++v33;
        }
      }
      ++v29;
      uint64_t v28 = *(void *)(a2 + 32);
      unint64_t v11 = v59;
    }
    while (*(void *)(v28 + 40 * v59) > v29);
  }
  uint64_t v39 = (void *)*v58;
  if (*v58)
  {
    long long v40 = v58;
    do
    {
      unint64_t v41 = v39[4];
      BOOL v18 = v41 == v11;
      BOOL v42 = v41 < v11;
      if (v18) {
        BOOL v42 = v39[5] < a5;
      }
      BOOL v43 = !v42;
      if (v42) {
        unint64_t v44 = v39 + 1;
      }
      else {
        unint64_t v44 = v39;
      }
      if (v43) {
        long long v40 = v39;
      }
      uint64_t v39 = (void *)*v44;
    }
    while (*v44);
    uint64_t v45 = a8;
    if (v40 == v58) {
      goto LABEL_60;
    }
    unint64_t v46 = v40[4];
    BOOL v18 = v46 == v11;
    BOOL v47 = v46 <= v11;
    if (v18) {
      BOOL v47 = v40[5] <= a5;
    }
    if (!v47)
    {
LABEL_60:
      unint64_t v48 = -1;
      int v50 = a8 + 1;
      unsigned int v49 = a8[1];
      if (v49) {
        goto LABEL_65;
      }
    }
    else
    {
      unint64_t v48 = v40[6];
      int v50 = a8 + 1;
      unsigned int v49 = a8[1];
      if (v49) {
        goto LABEL_65;
      }
    }
LABEL_63:
    int v51 = v50;
LABEL_69:
    int v53 = (uint64_t *)operator new(0x28uLL);
    v53[4] = v48;
    *int v53 = 0;
    v53[1] = 0;
    v53[2] = (uint64_t)v51;
    *int v50 = v53;
    BOOL v54 = (uint64_t *)**v45;
    if (v54)
    {
      *uint64_t v45 = v54;
      int v55 = *v50;
    }
    else
    {
      int v55 = v53;
    }
    uint64_t result = (uint64_t)sub_1C4949FD4(v45[1], v55);
    v45[2] = (uint64_t *)((char *)v45[2] + 1);
    return result;
  }
  unint64_t v48 = -1;
  uint64_t v45 = a8;
  int v50 = a8 + 1;
  unsigned int v49 = a8[1];
  if (!v49) {
    goto LABEL_63;
  }
  while (1)
  {
LABEL_65:
    while (1)
    {
      int v51 = (uint64_t **)v49;
      unint64_t v52 = v49[4];
      if (v48 >= v52) {
        break;
      }
      unsigned int v49 = *v51;
      int v50 = v51;
      if (!*v51) {
        goto LABEL_69;
      }
    }
    if (v52 >= v48) {
      return result;
    }
    unsigned int v49 = v51[1];
    if (!v49)
    {
      int v50 = v51 + 1;
      goto LABEL_69;
    }
  }
}

void sub_1C4B80D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t **a7, unint64_t a8, uint64_t a9, unint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t **a14, uint64_t **a15)
{
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  BOOL v15 = a6 == a10 || a5 == a10;
  int v16 = v15;
  int v119 = v16;
  BOOL v17 = *(void **)(a12 + 8);
  if (v17)
  {
    BOOL v18 = (void *)(a12 + 8);
    do
    {
      unint64_t v19 = v17[4];
      BOOL v15 = v19 == a8;
      BOOL v20 = v19 < a8;
      if (v15) {
        BOOL v20 = v17[5] < a10;
      }
      BOOL v21 = !v20;
      if (v20) {
        unint64_t v22 = v17 + 1;
      }
      else {
        unint64_t v22 = v17;
      }
      if (v21) {
        BOOL v18 = v17;
      }
      BOOL v17 = (void *)*v22;
    }
    while (*v22);
    if (v18 != (void *)(a12 + 8))
    {
      unint64_t v23 = v18[4];
      BOOL v15 = v23 == a8;
      BOOL v24 = v23 <= a8;
      if (v15) {
        BOOL v24 = v18[5] <= a10;
      }
      if (v24)
      {
        unint64_t v25 = v18[6];
        if (v25 != -1)
        {
          BOOL v26 = a14[1];
          if (v26)
          {
            unsigned int v27 = a14 + 1;
            do
            {
              unint64_t v28 = v26[4];
              BOOL v29 = v28 >= v25;
              if (v28 >= v25) {
                uint64_t v30 = (uint64_t **)v26;
              }
              else {
                uint64_t v30 = (uint64_t **)(v26 + 1);
              }
              if (v29) {
                unsigned int v27 = (uint64_t **)v26;
              }
              BOOL v26 = *v30;
            }
            while (*v30);
            if (v27 != a14 + 1 && v25 >= (unint64_t)v27[4]) {
              return;
            }
          }
        }
      }
    }
  }
  int8x8_t v114 = (void *)(a12 + 8);
  if (a11) {
    unint64_t v31 = a5;
  }
  else {
    unint64_t v31 = a10;
  }
  uint64_t v138 = *(void *)(a12 + 16);
  unint64_t v115 = v31;
  uint64_t v128 = sub_1C4B8228C((uint64_t **)a12, a8, v31, &v138);
  uint64_t v32 = a2;
  uint64_t v33 = *(void *)(a2 + 32);
  unint64_t v34 = a8;
  if (*(void *)(v33 + 40 * a8))
  {
    unint64_t v35 = 0;
    unint64_t v117 = (void *)(a1 + 128);
    uint64_t v123 = a7 + 1;
    if (a4) {
      BOOL v36 = a4 == a3;
    }
    else {
      BOOL v36 = 1;
    }
    char v37 = v36;
    char v116 = v37;
    do
    {
      unint64_t v38 = (void *)(*(void *)(v32 + 80) + 72 * (*(void *)(v33 + 40 * v34 + 16) + v35));
      unint64_t v40 = v38[1];
      unint64_t v39 = v38[2];
      __int16 v137 = v39;
      uint64_t CursorByAdvancingWithCharacters = LMLexiconGetCursorByAdvancingWithCharacters();
      uint64_t v42 = CursorByAdvancingWithCharacters;
      if (!v119)
      {
        LODWORD(v129) = 0;
        int v124 = 0;
        unsigned int v45 = 0;
        int v122 = 0;
        uint64_t v32 = a2;
        if (CursorByAdvancingWithCharacters) {
          goto LABEL_106;
        }
        goto LABEL_49;
      }
      ul2sh(v39, (uint64_t)v139);
      uint64_t v129 = sub_1C4999D30(v117, (uint64_t)v139);
      if (v42)
      {
        int TokenID = LMLexiconCursorFirstTokenID();
        unint64_t v44 = *v123;
        if (!*v123) {
          goto LABEL_98;
        }
      }
      else
      {
        int TokenID = 0;
        unint64_t v44 = *v123;
        if (!*v123) {
          goto LABEL_98;
        }
      }
      unint64_t v125 = v40;
      if ((v141 & 0x80u) == 0) {
        size_t v46 = v141;
      }
      else {
        size_t v46 = v140;
      }
      if ((v141 & 0x80u) == 0) {
        BOOL v47 = v139;
      }
      else {
        BOOL v47 = *(unsigned __int16 **)v139;
      }
      unint64_t v48 = a7 + 1;
      do
      {
        int v49 = *((char *)v44 + 55);
        if (v49 >= 0) {
          size_t v50 = *((unsigned __int8 *)v44 + 55);
        }
        else {
          size_t v50 = v44[5];
        }
        if (v49 >= 0) {
          int v51 = v44 + 4;
        }
        else {
          int v51 = (const void *)v44[4];
        }
        if (v46 >= v50) {
          size_t v52 = v50;
        }
        else {
          size_t v52 = v46;
        }
        int v53 = memcmp(v51, v47, v52);
        BOOL v54 = v50 < v46;
        if (v53) {
          BOOL v54 = v53 < 0;
        }
        BOOL v55 = !v54;
        if (v54) {
          int v56 = v44 + 1;
        }
        else {
          int v56 = v44;
        }
        if (v55) {
          unint64_t v48 = (uint64_t **)v44;
        }
        unint64_t v44 = (uint64_t *)*v56;
      }
      while (*v56);
      unint64_t v40 = v125;
      if (v48 == v123) {
        goto LABEL_98;
      }
      unint64_t v59 = v48[4];
      int v58 = v48 + 4;
      int v57 = v59;
      int v60 = *((char *)v58 + 23);
      if (v60 >= 0) {
        size_t v61 = *((unsigned __int8 *)v58 + 23);
      }
      else {
        size_t v61 = (size_t)v58[1];
      }
      if (v60 >= 0) {
        uint64_t v62 = v58;
      }
      else {
        uint64_t v62 = (uint64_t **)v57;
      }
      if (v61 >= v46) {
        size_t v63 = v46;
      }
      else {
        size_t v63 = v61;
      }
      int v64 = memcmp(v47, v62, v63);
      BOOL v29 = v46 >= v61;
      unint64_t v40 = v125;
      BOOL v65 = !v29;
      if (v64) {
        BOOL v65 = v64 < 0;
      }
      if (v65)
      {
LABEL_98:
        __p[0] = v139;
        *((_DWORD *)sub_1C494A238(a7, (const void **)v139, (uint64_t)&unk_1C4C39B40, (long long **)__p) + 14) = TokenID;
      }
      __p[0] = *(void **)(a12 + 16);
      unsigned int v45 = sub_1C4B8228C((uint64_t **)a12, v40, a5, (uint64_t *)__p);
      uint64_t v32 = a2;
      if ((sub_1C4B82414(a1, a2, a12, (uint64_t)v128, v40, a5, 1, (uint64_t)v129, v38, a15, a13) & 1) == 0)
      {
        LMLexiconGetRootCursor();
        sub_1C4B80D68(a1, a2, a3, a4);
        if ((v116 & 1) == 0)
        {
          LMLexiconGetRootCursor();
          sub_1C4B80D68(a1, a2, a4, a4);
        }
      }
      if ((char)v141 < 0)
      {
        operator delete(*(void **)v139);
        int v124 = v39;
        int v122 = (int)v128;
        if (v42)
        {
LABEL_106:
          int v66 = *(unsigned __int8 *)(*(void *)(v32 + 32) + 40 * v40 + 32);
          int HasChildren = LMLexiconCursorHasChildren();
          int HasEntries = LMLexiconCursorHasEntries();
          if (HasChildren)
          {
            unint64_t v69 = LMLexiconCursorHash();
            *(void *)uint64_t v139 = *(void *)(a12 + 16);
            sub_1C4B8228C((uint64_t **)a12, v40, v69, (uint64_t *)v139);
            if ((sub_1C4B82414(a1, a2, a12, (uint64_t)v128, v40, v69, 0, 0, v38, a15, a13) & 1) == 0) {
              sub_1C4B80D68(a1, a2, a3, a4);
            }
          }
          char v70 = HasEntries ^ 1;
          if (v66) {
            char v70 = 0;
          }
          uint64_t v32 = a2;
          if ((v70 & 1) == 0)
          {
            LMLexiconGetRootCursor();
            int v71 = LMLexiconCursorTraversedLength();
            v139[0] = 0;
            LMLexiconCursorGetTraversedCharacters();
            iv2s(v139, v71, (uint64_t)__p);
            long long v72 = sub_1C4999D30(v117, (uint64_t)__p);
            uint64_t v134 = *(void *)(a12 + 16);
            unsigned int v73 = sub_1C4B8228C((uint64_t **)a12, v40, a5, &v134);
            uint64_t v32 = a2;
            if (!(v122 | v45 | v124 | v129)
              || v122 != v128
              || (v45 == v73 ? (BOOL v74 = v124 == v39) : (BOOL v74 = 0),
                  v74 ? (BOOL v75 = v129 == v72) : (BOOL v75 = 0),
                  !v75))
            {
              if (HasEntries) {
                int HasEntries = LMLexiconCursorFirstTokenID();
              }
              int v76 = LMLexiconCursorTraversedLength();
              v139[0] = 0;
              LMLexiconCursorGetTraversedCharacters();
              iv2s(v139, v76, (uint64_t)v132);
              uint64_t v77 = *v123;
              if (!*v123) {
                goto LABEL_165;
              }
              unint64_t v78 = v40;
              uint64_t v79 = (v133 & 0x80u) == 0 ? (void *)v133 : v132[1];
              uint64_t v80 = (v133 & 0x80u) == 0 ? v132 : (void **)v132[0];
              float v81 = a7 + 1;
              do
              {
                int v82 = *((char *)v77 + 55);
                if (v82 >= 0) {
                  size_t v83 = *((unsigned __int8 *)v77 + 55);
                }
                else {
                  size_t v83 = v77[5];
                }
                if (v82 >= 0) {
                  int v84 = v77 + 4;
                }
                else {
                  int v84 = (const void *)v77[4];
                }
                if ((unint64_t)v79 >= v83) {
                  size_t v85 = v83;
                }
                else {
                  size_t v85 = (size_t)v79;
                }
                int v86 = memcmp(v84, v80, v85);
                BOOL v87 = v83 < (unint64_t)v79;
                if (v86) {
                  BOOL v87 = v86 < 0;
                }
                BOOL v88 = !v87;
                if (v87) {
                  uint64_t v89 = v77 + 1;
                }
                else {
                  uint64_t v89 = v77;
                }
                if (v88) {
                  float v81 = (uint64_t **)v77;
                }
                uint64_t v77 = (uint64_t *)*v89;
              }
              while (*v89);
              unint64_t v40 = v78;
              if (v81 == v123) {
                goto LABEL_165;
              }
              int v92 = v81[4];
              uint64_t v91 = v81 + 4;
              int v90 = v92;
              int v93 = *((char *)v91 + 23);
              if (v93 >= 0) {
                size_t v94 = *((unsigned __int8 *)v91 + 23);
              }
              else {
                size_t v94 = (size_t)v91[1];
              }
              if (v93 >= 0) {
                uint64_t v95 = v91;
              }
              else {
                uint64_t v95 = (uint64_t **)v90;
              }
              if (v94 >= (unint64_t)v79) {
                size_t v96 = (size_t)v79;
              }
              else {
                size_t v96 = v94;
              }
              int v97 = memcmp(v80, v95, v96);
              BOOL v29 = (unint64_t)v79 >= v94;
              unint64_t v40 = v78;
              BOOL v98 = !v29;
              if (v97) {
                BOOL v98 = v97 < 0;
              }
              if (v98)
              {
LABEL_165:
                *(void *)uint64_t v139 = v132;
                *((_DWORD *)sub_1C494A238(a7, (const void **)v132, (uint64_t)&unk_1C4C39B40, (long long **)v139) + 14) = HasEntries;
              }
              uint64_t v32 = a2;
              if ((sub_1C4B82414(a1, a2, a12, (uint64_t)v128, v40, a5, 1, (uint64_t)v72, v38, a15, a13) & 1) == 0)
              {
                sub_1C4B80D68(a1, a2, a3, a4);
                if ((v116 & 1) == 0)
                {
                  LMLexiconGetRootCursor();
                  sub_1C4B80D68(a1, a2, a4, a4);
                }
              }
              if ((char)v133 < 0) {
                operator delete(v132[0]);
              }
            }
            if (v136 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
      else
      {
        int v124 = v39;
        int v122 = (int)v128;
        if (v42) {
          goto LABEL_106;
        }
      }
LABEL_49:
      ++v35;
      uint64_t v33 = *(void *)(v32 + 32);
      unint64_t v34 = a8;
    }
    while (v35 < *(void *)(v33 + 40 * a8));
  }
  uint64_t v99 = (void *)*v114;
  if (*v114)
  {
    unint64_t v100 = (void *)(a12 + 8);
    do
    {
      unint64_t v101 = v99[4];
      BOOL v15 = v101 == a8;
      BOOL v102 = v101 < a8;
      if (v15) {
        BOOL v102 = v99[5] < v115;
      }
      BOOL v103 = !v102;
      if (v102) {
        uint64_t v104 = v99 + 1;
      }
      else {
        uint64_t v104 = v99;
      }
      if (v103) {
        unint64_t v100 = v99;
      }
      uint64_t v99 = (void *)*v104;
    }
    while (*v104);
    if (v100 != v114)
    {
      unint64_t v105 = v100[4];
      BOOL v15 = v105 == a8;
      BOOL v106 = v105 <= a8;
      if (v15) {
        BOOL v106 = v115 >= v100[5];
      }
      if (v106)
      {
        unint64_t v107 = v100[6];
        uint64_t v109 = a14 + 1;
        int v108 = a14[1];
        if (v108) {
          goto LABEL_189;
        }
LABEL_187:
        int v110 = v109;
LABEL_193:
        uint64_t v112 = (uint64_t *)operator new(0x28uLL);
        v112[4] = v107;
        uint64_t *v112 = 0;
        v112[1] = 0;
        v112[2] = (uint64_t)v110;
        const char *v109 = v112;
        uint64_t v113 = (uint64_t *)**a14;
        if (v113)
        {
          *a14 = v113;
          uint64_t v112 = *v109;
        }
        sub_1C4949FD4(a14[1], v112);
        a14[2] = (uint64_t *)((char *)a14[2] + 1);
        return;
      }
    }
  }
  unint64_t v107 = -1;
  uint64_t v109 = a14 + 1;
  int v108 = a14[1];
  if (!v108) {
    goto LABEL_187;
  }
  while (1)
  {
LABEL_189:
    while (1)
    {
      int v110 = (uint64_t **)v108;
      unint64_t v111 = v108[4];
      if (v107 >= v111) {
        break;
      }
      int v108 = *v110;
      uint64_t v109 = v110;
      if (!*v110) {
        goto LABEL_193;
      }
    }
    if (v111 >= v107) {
      break;
    }
    int v108 = v110[1];
    if (!v108)
    {
      uint64_t v109 = v110 + 1;
      goto LABEL_193;
    }
  }
}

void sub_1C4B8175C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Network::findFirstEdgeGivenSymbol(Network *this, unint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = *((void *)this + 4);
  unint64_t v7 = *(void *)(v6 + 40 * a2);
  if (v7 > 0xA)
  {
    unsigned int v9 = (uint64_t **)((char *)this + 200);
    uint64_t v8 = (uint64_t *)*((void *)this + 25);
    if (v8)
    {
      unsigned int v10 = (uint64_t **)((char *)this + 200);
      unint64_t v11 = (void *)*((void *)this + 25);
      do
      {
        unint64_t v12 = v11[4];
        BOOL v13 = v12 >= a2;
        if (v12 >= a2) {
          unint64_t v14 = v11;
        }
        else {
          unint64_t v14 = v11 + 1;
        }
        if (v13) {
          unsigned int v10 = (uint64_t **)v11;
        }
        unint64_t v11 = (void *)*v14;
      }
      while (*v14);
      if (v10 != v9 && (unint64_t)v10[4] <= a2)
      {
        while (1)
        {
LABEL_59:
          while (1)
          {
            unint64_t v48 = (uint64_t **)v8;
            unint64_t v49 = v8[4];
            if (v49 <= a2) {
              break;
            }
            uint64_t v8 = *v48;
            BOOL v47 = v48;
            if (!*v48) {
              goto LABEL_63;
            }
          }
          if (v49 >= a2) {
            break;
          }
          uint64_t v8 = v48[1];
          if (!v8)
          {
            BOOL v47 = v48 + 1;
            goto LABEL_63;
          }
        }
LABEL_66:
        BOOL v55 = v48[6];
        BOOL v54 = v48 + 6;
        int v53 = v55;
        if (!v55) {
          goto LABEL_77;
        }
        int v56 = v54;
        do
        {
          unint64_t v57 = v53[4];
          BOOL v58 = v57 >= (unint64_t)v3;
          if (v57 >= (unint64_t)v3) {
            unint64_t v59 = (uint64_t **)v53;
          }
          else {
            unint64_t v59 = (uint64_t **)(v53 + 1);
          }
          if (v58) {
            int v56 = (uint64_t **)v53;
          }
          int v53 = *v59;
        }
        while (*v59);
        if (v56 != v54 && v56[4] <= v3)
        {
          int v60 = *v9;
          size_t v61 = (uint64_t **)((char *)this + 200);
          uint64_t v62 = (uint64_t **)((char *)this + 200);
          if (*v9)
          {
            while (1)
            {
LABEL_82:
              while (1)
              {
                uint64_t v62 = (uint64_t **)v60;
                unint64_t v63 = v60[4];
                if (v63 <= a2) {
                  break;
                }
                int v60 = *v62;
                size_t v61 = v62;
                if (!*v62) {
                  goto LABEL_86;
                }
              }
              if (v63 >= a2) {
                break;
              }
              int v60 = v62[1];
              if (!v60)
              {
                size_t v61 = v62 + 1;
                goto LABEL_86;
              }
            }
LABEL_89:
            if (v56 != v62 + 6)
            {
              unint64_t v67 = *v9;
              std::string v68 = (uint64_t **)((char *)this + 200);
              if (*v9)
              {
                while (1)
                {
                  while (1)
                  {
                    std::string v68 = (uint64_t **)v67;
                    unint64_t v69 = v67[4];
                    if (v69 <= a2) {
                      break;
                    }
                    unint64_t v67 = *v68;
                    unsigned int v9 = v68;
                    if (!*v68) {
                      goto LABEL_97;
                    }
                  }
                  if (v69 >= a2) {
                    break;
                  }
                  unint64_t v67 = v68[1];
                  if (!v67)
                  {
                    unsigned int v9 = v68 + 1;
                    goto LABEL_97;
                  }
                }
              }
              else
              {
LABEL_97:
                char v70 = (char *)v68;
                std::string v68 = (uint64_t **)operator new(0x40uLL);
                v68[7] = 0;
                v68[6] = 0;
                v68[4] = (uint64_t *)a2;
                v68[5] = (uint64_t *)(v68 + 6);
                *std::string v68 = 0;
                v68[1] = 0;
                v68[2] = (uint64_t *)v70;
                *unsigned int v9 = (uint64_t *)v68;
                uint64_t v71 = **((void **)this + 24);
                long long v72 = (uint64_t *)v68;
                if (v71)
                {
                  *((void *)this + 24) = v71;
                  long long v72 = *v9;
                }
                sub_1C4949FD4(*((uint64_t **)this + 25), v72);
                ++*((void *)this + 26);
              }
              BOOL v74 = v68 + 6;
              unsigned int v73 = v68[6];
              if (v73)
              {
                while (1)
                {
                  while (1)
                  {
                    BOOL v75 = (uint64_t **)v73;
                    unint64_t v76 = v73[4];
                    if (v76 <= (unint64_t)v3) {
                      break;
                    }
                    unsigned int v73 = *v75;
                    BOOL v74 = v75;
                    if (!*v75) {
                      goto LABEL_107;
                    }
                  }
                  if (v76 >= (unint64_t)v3) {
                    break;
                  }
                  unsigned int v73 = v75[1];
                  if (!v73)
                  {
                    BOOL v74 = v75 + 1;
                    goto LABEL_107;
                  }
                }
              }
              else
              {
                BOOL v75 = v68 + 6;
LABEL_107:
                uint64_t v77 = (uint64_t *)v75;
                BOOL v75 = (uint64_t **)operator new(0x30uLL);
                v75[4] = v3;
                v75[5] = 0;
                uint64_t *v75 = 0;
                v75[1] = 0;
                v75[2] = v77;
                void *v74 = (uint64_t *)v75;
                unint64_t v78 = (uint64_t *)*v68[5];
                uint64_t v79 = (uint64_t *)v75;
                if (v78)
                {
                  v68[5] = v78;
                  uint64_t v79 = *v74;
                }
                sub_1C4949FD4(v68[6], v79);
                v68[7] = (uint64_t *)((char *)v68[7] + 1);
              }
              return (uint64_t)v75[5];
            }
            return -1;
          }
        }
        else
        {
LABEL_77:
          int v56 = v54;
          int v60 = *v9;
          size_t v61 = (uint64_t **)((char *)this + 200);
          uint64_t v62 = (uint64_t **)((char *)this + 200);
          if (*v9) {
            goto LABEL_82;
          }
        }
LABEL_86:
        int v64 = (uint64_t *)v62;
        uint64_t v62 = (uint64_t **)operator new(0x40uLL);
        v62[7] = 0;
        v62[6] = 0;
        v62[4] = (uint64_t *)a2;
        v62[5] = (uint64_t *)(v62 + 6);
        char *v62 = 0;
        v62[1] = 0;
        uint64_t v62[2] = v64;
        *size_t v61 = (uint64_t *)v62;
        uint64_t v65 = **((void **)this + 24);
        int v66 = (uint64_t *)v62;
        if (v65)
        {
          *((void *)this + 24) = v65;
          int v66 = *v61;
        }
        sub_1C4949FD4(*((uint64_t **)this + 25), v66);
        ++*((void *)this + 26);
        goto LABEL_89;
      }
    }
    v85[0] = 0;
    v85[1] = 0;
    uint64_t v83 = 0;
    int v84 = v85;
    float v81 = &v82;
    int v82 = 0;
    sub_1C499C340(&v81, v85, v85);
    BOOL v15 = *v9;
    int v16 = (uint64_t **)((char *)this + 200);
    BOOL v17 = (uint64_t **)((char *)this + 200);
    if (*v9)
    {
      while (1)
      {
        while (1)
        {
          BOOL v17 = (uint64_t **)v15;
          unint64_t v18 = v15[4];
          if (a2 >= v18) {
            break;
          }
          BOOL v15 = *v17;
          int v16 = v17;
          if (!*v17) {
            goto LABEL_20;
          }
        }
        if (v18 >= a2) {
          break;
        }
        BOOL v15 = v17[1];
        if (!v15)
        {
          int v16 = v17 + 1;
          goto LABEL_20;
        }
      }
LABEL_24:
      uint64_t v80 = v3;
      sub_1C4999C7C((uint64_t)&v81, v82);
      uint64_t v26 = *((void *)this + 4);
      if (*(void *)(v26 + 40 * a2))
      {
        unint64_t v27 = 0;
        uint64_t v28 = 0;
        do
        {
          uint64_t v29 = v28;
          uint64_t v28 = *(void *)(*((void *)this + 10) + 72 * (*(void *)(v26 + 40 * a2 + 16) + v27) + 16);
          if (v29 != v28)
          {
            uint64_t v30 = *v9;
            unint64_t v31 = (uint64_t **)((char *)this + 200);
            uint64_t v32 = (uint64_t **)((char *)this + 200);
            if (*v9)
            {
              while (1)
              {
                while (1)
                {
                  uint64_t v32 = (uint64_t **)v30;
                  unint64_t v33 = v30[4];
                  if (v33 <= a2) {
                    break;
                  }
                  uint64_t v30 = *v32;
                  unint64_t v31 = v32;
                  if (!*v32) {
                    goto LABEL_36;
                  }
                }
                if (v33 >= a2) {
                  break;
                }
                uint64_t v30 = v32[1];
                if (!v30)
                {
                  unint64_t v31 = v32 + 1;
                  goto LABEL_36;
                }
              }
              unint64_t v34 = v32;
            }
            else
            {
LABEL_36:
              unint64_t v34 = operator new(0x40uLL);
              v34[7] = 0;
              v34[6] = 0;
              v34[4] = a2;
              v34[5] = v34 + 6;
              *unint64_t v34 = 0;
              v34[1] = 0;
              v34[2] = v32;
              *unint64_t v31 = v34;
              uint64_t v35 = **((void **)this + 24);
              BOOL v36 = v34;
              if (v35)
              {
                *((void *)this + 24) = v35;
                BOOL v36 = *v31;
              }
              sub_1C4949FD4(*((uint64_t **)this + 25), v36);
              ++*((void *)this + 26);
            }
            char v37 = (uint64_t *)operator new(0x30uLL);
            unint64_t v38 = v37;
            v37[4] = v28;
            v37[5] = v27;
            unint64_t v39 = (uint64_t **)(v34 + 6);
            unint64_t v40 = (uint64_t *)v34[6];
            if (v40)
            {
              while (1)
              {
                while (1)
                {
                  unint64_t v41 = (uint64_t **)v40;
                  unint64_t v42 = v40[4];
                  if (v42 <= v28) {
                    break;
                  }
                  unint64_t v40 = (uint64_t *)*v40;
                  unint64_t v39 = v41;
                  if (!*v41) {
                    goto LABEL_47;
                  }
                }
                if (v42 >= v28) {
                  break;
                }
                unint64_t v40 = (uint64_t *)v40[1];
                if (!v40)
                {
                  unint64_t v39 = v41 + 1;
                  goto LABEL_47;
                }
              }
              operator delete(v37);
            }
            else
            {
              unint64_t v41 = (uint64_t **)(v34 + 6);
LABEL_47:
              uint64_t *v37 = 0;
              v37[1] = 0;
              v37[2] = (uint64_t)v41;
              *unint64_t v39 = v37;
              uint64_t v43 = *(void *)v34[5];
              if (v43)
              {
                v34[5] = v43;
                unint64_t v38 = *v39;
              }
              sub_1C4949FD4((uint64_t *)v34[6], v38);
              ++v34[7];
            }
          }
          ++v27;
          uint64_t v26 = *((void *)this + 4);
        }
        while (*(void *)(v26 + 40 * a2) > v27);
      }
      sub_1C4999C7C((uint64_t)&v84, v85[0]);
      uint64_t v8 = *v9;
      uint64_t v3 = v80;
      BOOL v47 = (uint64_t **)((char *)this + 200);
      unint64_t v48 = (uint64_t **)((char *)this + 200);
      if (*v9) {
        goto LABEL_59;
      }
LABEL_63:
      size_t v50 = (uint64_t *)v48;
      unint64_t v48 = (uint64_t **)operator new(0x40uLL);
      v48[7] = 0;
      v48[6] = 0;
      v48[4] = (uint64_t *)a2;
      v48[5] = (uint64_t *)(v48 + 6);
      *unint64_t v48 = 0;
      v48[1] = 0;
      v48[2] = v50;
      *BOOL v47 = (uint64_t *)v48;
      uint64_t v51 = **((void **)this + 24);
      size_t v52 = (uint64_t *)v48;
      if (v51)
      {
        *((void *)this + 24) = v51;
        size_t v52 = *v47;
      }
      sub_1C4949FD4(*((uint64_t **)this + 25), v52);
      ++*((void *)this + 26);
      goto LABEL_66;
    }
LABEL_20:
    unint64_t v19 = (uint64_t *)operator new(0x40uLL);
    BOOL v20 = v19;
    BOOL v21 = v82;
    uint64_t v22 = v83;
    v19[6] = (uint64_t)v82;
    unint64_t v23 = v19 + 6;
    BOOL v24 = v81;
    v19[4] = a2;
    void v19[5] = (uint64_t)v24;
    v19[7] = v22;
    if (v22)
    {
      v21[2] = v23;
      float v81 = &v82;
      int v82 = 0;
      uint64_t v83 = 0;
      *unint64_t v19 = 0;
      v19[1] = 0;
      v19[2] = (uint64_t)v17;
      *int v16 = v19;
      uint64_t v25 = **((void **)this + 24);
      if (!v25)
      {
LABEL_23:
        sub_1C4949FD4(*((uint64_t **)this + 25), v20);
        ++*((void *)this + 26);
        goto LABEL_24;
      }
    }
    else
    {
      void v19[5] = (uint64_t)v23;
      *unint64_t v19 = 0;
      v19[1] = 0;
      v19[2] = (uint64_t)v17;
      *int v16 = v19;
      uint64_t v25 = **((void **)this + 24);
      if (!v25) {
        goto LABEL_23;
      }
    }
    *((void *)this + 24) = v25;
    BOOL v20 = *v16;
    goto LABEL_23;
  }
  if (!v7) {
    return -1;
  }
  uint64_t result = 0;
  unsigned int v45 = (uint64_t **)(*((void *)this + 10) + 72 * *(void *)(v6 + 40 * a2 + 16) + 16);
  while (1)
  {
    size_t v46 = *v45;
    v45 += 9;
    if (v46 == a3) {
      break;
    }
    if (v7 == ++result) {
      return -1;
    }
  }
  return result;
}

void sub_1C4B81E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, char a14, void *a15)
{
  sub_1C4999C7C(v15, a12);
  sub_1C4999C7C((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void sub_1C4B81E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

void sub_1C4B81E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

uint64_t sub_1C4B81EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t **a10, uint64_t a11, char a12)
{
  uint64_t v67 = *(void *)(a4 + 16);
  unint64_t v19 = sub_1C4B8228C((uint64_t **)a4, a6, a7, &v67);
  BOOL v20 = v19;
  unint64_t v58 = a6;
  uint64_t v59 = a2;
  if (*(unsigned char *)(*(void *)(a2 + 32) + 40 * a6 + 32) && *(unsigned char *)(*(void *)(a3 + 32) + 40 * a7 + 32))
  {
    uint64_t v22 = a10 + 1;
    BOOL v21 = a10[1];
    if (v21)
    {
      unint64_t v23 = a10 + 1;
      BOOL v24 = a10[1];
      do
      {
        unint64_t v25 = v24[4];
        BOOL v26 = v25 >= (unint64_t)v19;
        if (v25 >= (unint64_t)v19) {
          unint64_t v27 = (uint64_t **)v24;
        }
        else {
          unint64_t v27 = (uint64_t **)(v24 + 1);
        }
        if (v26) {
          unint64_t v23 = (uint64_t **)v24;
        }
        BOOL v24 = *v27;
      }
      while (*v27);
      if (v23 == v22 || v19 < v23[4])
      {
        while (1)
        {
          while (1)
          {
            uint64_t v28 = (uint64_t **)v21;
            unint64_t v29 = v21[4];
            if ((unint64_t)v19 >= v29) {
              break;
            }
            BOOL v21 = *v28;
            uint64_t v22 = v28;
            if (!*v28) {
              goto LABEL_21;
            }
          }
          if (v29 >= (unint64_t)v19) {
            break;
          }
          BOOL v21 = v28[1];
          if (!v21)
          {
            uint64_t v22 = v28 + 1;
            goto LABEL_21;
          }
        }
      }
    }
    else
    {
      uint64_t v28 = a10 + 1;
LABEL_21:
      uint64_t v30 = (uint64_t *)operator new(0x28uLL);
      v30[4] = (uint64_t)v20;
      *uint64_t v30 = 0;
      v30[1] = 0;
      v30[2] = (uint64_t)v28;
      *uint64_t v22 = v30;
      unint64_t v31 = (uint64_t *)**a10;
      if (v31)
      {
        *a10 = v31;
        uint64_t v32 = *v22;
      }
      else
      {
        uint64_t v32 = v30;
      }
      sub_1C4949FD4(a10[1], v32);
      a10[2] = (uint64_t *)((char *)a10[2] + 1);
    }
  }
  uint64_t v33 = a5;
  v62[0] = a5;
  v62[1] = v20;
  uint64_t v34 = *(void *)(a8 + 16);
  uint64_t v36 = *(void *)(a8 + 48);
  uint64_t v35 = *(void *)(a8 + 56);
  uint64_t v62[2] = v34;
  uint64_t v65 = v36;
  uint64_t v66 = v35;
  if (a12)
  {
    unint64_t v37 = *(void *)(a8 + 24);
    uint64_t v38 = v59;
    if (*(unsigned char *)(v59 + 184))
    {
      if (v37)
      {
        ul2sh(v37, (uint64_t)__p);
LABEL_38:
        unint64_t v44 = sub_1C4999D30((void *)(a1 + 128), (uint64_t)__p);
        unint64_t v63 = v44;
        if (SHIBYTE(v61) < 0) {
          operator delete(__p[0]);
        }
        double v45 = *(double *)(a8 + 32);
        goto LABEL_46;
      }
      uint64_t v40 = *(void *)(v59 + 136);
      if (*(char *)(v40 + 23) < 0)
      {
LABEL_37:
        sub_1C4949ADC(__p, *(void **)v40, *(void *)(v40 + 8));
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v40 = *(void *)(v59 + 136) + 24 * v37;
      if (*(char *)(v40 + 23) < 0) {
        goto LABEL_37;
      }
    }
    long long v41 = *(_OWORD *)v40;
    uint64_t v61 = *(void *)(v40 + 16);
    *(_OWORD *)long long __p = v41;
    goto LABEL_38;
  }
  unint64_t v39 = *(void *)(a9 + 24);
  if (!*(unsigned char *)(a3 + 184))
  {
    uint64_t v42 = *(void *)(a3 + 136) + 24 * v39;
    if (*(char *)(v42 + 23) < 0)
    {
LABEL_42:
      sub_1C4949ADC(__p, *(void **)v42, *(void *)(v42 + 8));
      goto LABEL_43;
    }
LABEL_35:
    long long v43 = *(_OWORD *)v42;
    uint64_t v61 = *(void *)(v42 + 16);
    *(_OWORD *)long long __p = v43;
    goto LABEL_43;
  }
  if (!v39)
  {
    uint64_t v42 = *(void *)(a3 + 136);
    if (*(char *)(v42 + 23) < 0) {
      goto LABEL_42;
    }
    goto LABEL_35;
  }
  ul2sh(v39, (uint64_t)__p);
LABEL_43:
  unint64_t v44 = sub_1C4999D30((void *)(a1 + 128), (uint64_t)__p);
  unint64_t v63 = v44;
  if (SHIBYTE(v61) < 0) {
    operator delete(__p[0]);
  }
  double v45 = *(double *)(a9 + 32) + *(double *)(a8 + 32);
  uint64_t v38 = v59;
LABEL_46:
  double v64 = v45;
  __p[0] = (void *)__PAIR64__(v20, v33);
  __p[1] = (void *)__PAIR64__(v44, v34);
  size_t v46 = (void **)(a1 + 216);
  LODWORD(v61) = 0;
  BOOL v47 = (uint64_t **)sub_1C4B91058(a1 + 216, (unsigned int *)__p);
  if ((uint64_t **)(a1 + 224) == v47)
  {
    unint64_t v48 = v47;
    unint64_t v49 = *(void *)(a11 + 8);
    if (v49 >= *(void *)(a11 + 16))
    {
      size_t v50 = sub_1C499CBEC((char **)a11, (uint64_t)v62);
    }
    else
    {
      *(void *)unint64_t v49 = v33;
      *(void *)(v49 + 8) = v20;
      *(void *)(v49 + 16) = v34;
      *(void *)(v49 + 24) = v44;
      *(double *)(v49 + 32) = v45;
      size_t v50 = (char *)(v49 + 72);
      *(void *)(v49 + 48) = v36;
      *(void *)(v49 + 56) = v35;
    }
    *(void *)(a11 + 8) = v50;
    uint64_t v51 = (uint64_t **)sub_1C4B911A0(a1 + 216, &v68, (unsigned int *)__p);
    uint64_t v38 = v59;
    if (!*v51)
    {
      size_t v52 = v51;
      int v53 = (char *)operator new(0x30uLL);
      *(_OWORD *)(v53 + 28) = *(_OWORD *)__p;
      *((_DWORD *)v53 + 11) = v61;
      uint64_t v54 = v68;
      *(void *)int v53 = 0;
      *((void *)v53 + 1) = 0;
      *((void *)v53 + 2) = v54;
      *size_t v52 = (uint64_t *)v53;
      BOOL v55 = (void *)**v46;
      if (v55)
      {
        *size_t v46 = v55;
        int v56 = *v52;
      }
      else
      {
        int v56 = (uint64_t *)v53;
      }
      sub_1C4949FD4(*v48, v56);
      ++*(void *)(a1 + 232);
    }
  }
  return *(unsigned __int8 *)(*(void *)(v38 + 32) + 40 * v58 + 32);
}

void sub_1C4B82264(_Unwind_Exception *a1)
{
}

void sub_1C4B8226C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1C4B8228C(uint64_t **a1, unint64_t a2, unint64_t a3, uint64_t *a4)
{
  unsigned int v9 = a1 + 1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    unsigned int v10 = a1 + 1;
    unint64_t v11 = a1[1];
    do
    {
      unint64_t v12 = v11[4];
      BOOL v14 = v12 == a2;
      BOOL v13 = v12 < a2;
      if (v14) {
        BOOL v13 = v11[5] < a3;
      }
      BOOL v14 = !v13;
      if (v13) {
        uint64_t v15 = (uint64_t **)(v11 + 1);
      }
      else {
        uint64_t v15 = (uint64_t **)v11;
      }
      if (v14) {
        unsigned int v10 = (uint64_t **)v11;
      }
      unint64_t v11 = *v15;
    }
    while (*v15);
    if (v10 != v9)
    {
      int v16 = v10[4];
      BOOL v14 = v16 == (uint64_t *)a2;
      BOOL v17 = (unint64_t)v16 <= a2;
      if (v14) {
        BOOL v17 = (unint64_t)v10[5] <= a3;
      }
      if (v17) {
        return v10[6];
      }
    }
    uint64_t v18 = *a4;
    do
    {
      while (1)
      {
        unint64_t v19 = (uint64_t **)v8;
        unint64_t v20 = v8[4];
        BOOL v21 = v19[5];
        BOOL v22 = (unint64_t)v21 > a3;
        if (v20 != a2) {
          BOOL v22 = v20 > a2;
        }
        if (v22) {
          break;
        }
        BOOL v23 = (unint64_t)v21 < a3;
        BOOL v14 = v20 == a2;
        BOOL v24 = v20 < a2;
        if (v14) {
          BOOL v24 = v23;
        }
        if (!v24) {
          goto LABEL_33;
        }
        uint64_t v8 = v19[1];
        if (!v8)
        {
          unsigned int v9 = v19 + 1;
          goto LABEL_29;
        }
      }
      uint64_t v8 = *v19;
    }
    while (*v19);
    unsigned int v9 = v19;
  }
  else
  {
    uint64_t v18 = *a4;
    unint64_t v19 = a1 + 1;
  }
LABEL_29:
  unint64_t v25 = (uint64_t *)operator new(0x38uLL);
  v25[4] = a2;
  void v25[5] = a3;
  v25[6] = v18;
  *unint64_t v25 = 0;
  v25[1] = 0;
  v25[2] = (uint64_t)v19;
  *unsigned int v9 = v25;
  BOOL v26 = (uint64_t *)**a1;
  if (v26)
  {
    *a1 = v26;
    unint64_t v27 = *v9;
  }
  else
  {
    unint64_t v27 = v25;
  }
  sub_1C4949FD4(a1[1], v27);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  uint64_t v18 = *a4;
LABEL_33:
  *a4 = v18 + 1;
  return (uint64_t *)v18;
}

uint64_t sub_1C4B82414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, int a7, uint64_t a8, void *a9, uint64_t **a10, uint64_t a11)
{
  uint64_t v54 = *(void *)(a3 + 16);
  BOOL v17 = sub_1C4B8228C((uint64_t **)a3, a5, a6, &v54);
  uint64_t v18 = v17;
  if (*(unsigned char *)(*(void *)(a2 + 32) + 40 * a5 + 32)) {
    BOOL v19 = a7 == 0;
  }
  else {
    BOOL v19 = 1;
  }
  unint64_t v50 = a5;
  if (v19)
  {
    uint64_t v20 = a1;
  }
  else if (a10[2])
  {
    uint64_t v20 = a1;
    uint64_t v18 = (uint64_t *)(*a10)[4];
  }
  else
  {
    uint64_t v21 = a2;
    BOOL v23 = a10 + 1;
    BOOL v22 = a10[1];
    if (v22)
    {
      BOOL v24 = a10 + 1;
      unint64_t v25 = a10[1];
      do
      {
        unint64_t v26 = v25[4];
        BOOL v27 = v26 >= (unint64_t)v17;
        if (v26 >= (unint64_t)v17) {
          uint64_t v28 = (uint64_t **)v25;
        }
        else {
          uint64_t v28 = (uint64_t **)(v25 + 1);
        }
        if (v27) {
          BOOL v24 = (uint64_t **)v25;
        }
        unint64_t v25 = *v28;
      }
      while (*v28);
      uint64_t v20 = a1;
      if (v24 == v23 || v17 < v24[4])
      {
        while (1)
        {
          while (1)
          {
            unint64_t v29 = (uint64_t **)v22;
            unint64_t v30 = v22[4];
            if ((unint64_t)v17 >= v30) {
              break;
            }
            BOOL v22 = *v29;
            BOOL v23 = v29;
            if (!*v29) {
              goto LABEL_27;
            }
          }
          if (v30 >= (unint64_t)v17) {
            break;
          }
          BOOL v22 = v29[1];
          if (!v22)
          {
            BOOL v23 = v29 + 1;
            goto LABEL_27;
          }
        }
      }
      a2 = v21;
    }
    else
    {
      uint64_t v20 = a1;
      unint64_t v29 = a10 + 1;
LABEL_27:
      unint64_t v31 = (uint64_t *)operator new(0x28uLL);
      v31[4] = (uint64_t)v18;
      *unint64_t v31 = 0;
      v31[1] = 0;
      v31[2] = (uint64_t)v29;
      *BOOL v23 = v31;
      uint64_t v32 = (uint64_t *)**a10;
      if (v32)
      {
        *a10 = v32;
        uint64_t v33 = *v23;
      }
      else
      {
        uint64_t v33 = v31;
      }
      a2 = v21;
      sub_1C4949FD4(a10[1], v33);
      a10[2] = (uint64_t *)((char *)a10[2] + 1);
    }
  }
  v53[0] = a4;
  v53[1] = v18;
  uint64_t v34 = a9[2];
  uint64_t v36 = a9[6];
  uint64_t v35 = a9[7];
  v53[6] = v36;
  v53[7] = v35;
  v53[2] = v34;
  v53[3] = a8;
  uint64_t v37 = a9[4];
  v53[4] = v37;
  *(void *)&long long v51 = __PAIR64__(v18, a4);
  *((void *)&v51 + 1) = __PAIR64__(a8, v34);
  uint64_t v38 = (void **)(v20 + 216);
  int v52 = 0;
  unint64_t v39 = (uint64_t **)sub_1C4B91058(v20 + 216, (unsigned int *)&v51);
  if ((uint64_t **)(v20 + 224) == v39)
  {
    uint64_t v40 = v39;
    long long v41 = *(void **)(a11 + 8);
    if ((unint64_t)v41 >= *(void *)(a11 + 16))
    {
      uint64_t v42 = sub_1C499CBEC((char **)a11, (uint64_t)v53);
    }
    else
    {
      void *v41 = a4;
      v41[1] = v18;
      v41[2] = v34;
      v41[3] = a8;
      v41[4] = v37;
      uint64_t v42 = (char *)(v41 + 9);
      v41[6] = v36;
      v41[7] = v35;
    }
    *(void *)(a11 + 8) = v42;
    long long v43 = (uint64_t **)sub_1C4B911A0(v20 + 216, &v55, (unsigned int *)&v51);
    if (!*v43)
    {
      unint64_t v44 = v43;
      double v45 = (char *)operator new(0x30uLL);
      *(_OWORD *)(v45 + 28) = v51;
      *((_DWORD *)v45 + 11) = v52;
      uint64_t v46 = v55;
      *(void *)double v45 = 0;
      *((void *)v45 + 1) = 0;
      *((void *)v45 + 2) = v46;
      *unint64_t v44 = (uint64_t *)v45;
      BOOL v47 = (void *)**v38;
      if (v47)
      {
        *uint64_t v38 = v47;
        unint64_t v48 = *v44;
      }
      else
      {
        unint64_t v48 = (uint64_t *)v45;
      }
      sub_1C4949FD4(*v40, v48);
      ++*(void *)(v20 + 232);
    }
  }
  return *(unsigned __int8 *)(*(void *)(a2 + 32) + 40 * v50 + 32);
}

BOOL operator==(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

{
  return a1 == a2;
}

BOOL operator<=(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) <= *(double *)(a2 + 8);
}

{
  return *(double *)(a1 + 104) <= *(double *)(a2 + 104);
}

BOOL operator>(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) > *(double *)(a2 + 8);
}

{
  return *(double *)(a1 + 104) > *(double *)(a2 + 104);
}

BOOL operator>=(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) >= *(double *)(a2 + 8);
}

{
  return *(double *)(a1 + 104) >= *(double *)(a2 + 104);
}

void sub_1C4B82784(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t *a5, void *a6, void *a7)
{
  uint64_t v7 = *a5;
  if (*(int *)(*a5 + 4 * a2) > 0) {
    return;
  }
  uint64_t v8 = a3;
  uint64_t v9 = a2;
  long long v83 = 0u;
  long long v84 = 0u;
  *(_OWORD *)long long __p = 0u;
  unsigned int v10 = (void *)(*a3 + 24 * a2);
  BOOL v13 = (void *)*v10;
  unint64_t v12 = v10 + 1;
  unint64_t v11 = v13;
  if (v13 == v12)
  {
    uint64_t v67 = 0;
    uint64_t v66 = 0;
    *((void *)&v84 + 1) = 0;
    unint64_t v68 = 0;
    goto LABEL_99;
  }
  uint64_t v14 = a1;
  if (!*(void *)(*(void *)(a1 + 32) + 40 * a2))
  {
    do
    {
      double v64 = (void *)v11[1];
      if (v64)
      {
        do
        {
          uint64_t v65 = v64;
          double v64 = (void *)*v64;
        }
        while (v64);
      }
      else
      {
        do
        {
          uint64_t v65 = (void *)v11[2];
          BOOL v33 = *v65 == (void)v11;
          unint64_t v11 = v65;
        }
        while (!v33);
      }
      unint64_t v11 = v65;
    }
    while (v65 != v12);
    uint64_t v67 = 0;
    uint64_t v66 = 0;
    *(_DWORD *)(v7 + 4 * a2) = 1;
    *((void *)&v84 + 1) = 0;
    unint64_t v68 = 0;
    goto LABEL_99;
  }
  long long v72 = v12;
  uint64_t v73 = 40 * a2;
  char v81 = 1;
  do
  {
    uint64_t v16 = *(void *)(v14 + 32);
    if (!*(void *)(v16 + v73))
    {
      *(_DWORD *)(*a5 + 4 * v9) = 1;
      goto LABEL_84;
    }
    BOOL v74 = v11;
    unint64_t v17 = 0;
    do
    {
      while (1)
      {
        unint64_t v18 = *(void *)(v16 + 40 * v9 + 16) + v17;
        uint64_t v19 = *(void *)(v14 + 80);
        uint64_t v20 = *(void *)(v19 + 72 * v18 + 8);
        unint64_t v21 = *(unsigned char *)(v16 + 40 * v20 + 32)
            ? v20 & 0xFFFFF
            : v20 & 0xFFFFF | ((*(void *)(v19 + 72 * v18 + 24) & 0xFFFFFLL) << 20);
        uint64_t v22 = *v8 + 24 * v20;
        BOOL v23 = a4;
        uint64_t v24 = *a4;
        unint64_t v26 = (void **)(v22 + 8);
        unint64_t v25 = *(void **)(v22 + 8);
        BOOL v27 = (void *)(v22 + 8);
        uint64_t v28 = (void *)(v22 + 8);
        if (v25)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v28 = v25;
              unint64_t v29 = v25[4];
              if (v21 >= v29) {
                break;
              }
              unint64_t v25 = (void *)*v28;
              BOOL v27 = v28;
              if (!*v28) {
                goto LABEL_19;
              }
            }
            if (v29 >= v21) {
              break;
            }
            unint64_t v25 = (void *)v28[1];
            if (!v25)
            {
              BOOL v27 = v28 + 1;
              goto LABEL_19;
            }
          }
        }
        else
        {
LABEL_19:
          unint64_t v30 = operator new(0x30uLL);
          v30[4] = v21;
          v30[5] = (int)v24;
          *unint64_t v30 = 0;
          v30[1] = 0;
          v30[2] = v28;
          *BOOL v27 = v30;
          uint64_t v31 = **(void **)v22;
          if (v31)
          {
            *(void *)uint64_t v22 = v31;
            unint64_t v30 = (void *)*v27;
          }
          uint64_t v32 = *v26;
          BOOL v33 = v30 == *v26;
          *((unsigned char *)v30 + 24) = v33;
          if (!v33)
          {
            do
            {
              uint64_t v34 = v30[2];
              if (*(unsigned char *)(v34 + 24)) {
                break;
              }
              uint64_t v35 = *(unsigned char **)(v34 + 16);
              uint64_t v36 = *(void *)v35;
              if (*(void *)v35 == v34)
              {
                uint64_t v39 = *((void *)v35 + 1);
                if (!v39 || (v40 = *(unsigned __int8 *)(v39 + 24), uint64_t v37 = (unsigned char *)(v39 + 24), v40))
                {
                  if (*(void **)v34 == v30)
                  {
                    *(unsigned char *)(v34 + 24) = 1;
                    v35[24] = 0;
                    uint64_t v43 = *(void *)(v34 + 8);
                    *(void *)uint64_t v35 = v43;
                    if (v43) {
                      goto LABEL_36;
                    }
                  }
                  else
                  {
                    long long v41 = *(uint64_t **)(v34 + 8);
                    uint64_t v42 = *v41;
                    *(void *)(v34 + 8) = *v41;
                    if (v42)
                    {
                      *(void *)(v42 + 16) = v34;
                      uint64_t v35 = *(unsigned char **)(v34 + 16);
                    }
                    v41[2] = (uint64_t)v35;
                    *(void *)(*(void *)(v34 + 16) + 8 * (**(void **)(v34 + 16) != v34)) = v41;
                    uint64_t *v41 = v34;
                    *(void *)(v34 + 16) = v41;
                    uint64_t v35 = (unsigned char *)v41[2];
                    uint64_t v34 = *(void *)v35;
                    *((unsigned char *)v41 + 24) = 1;
                    v35[24] = 0;
                    uint64_t v43 = *(void *)(v34 + 8);
                    *(void *)uint64_t v35 = v43;
                    if (v43) {
LABEL_36:
                    }
                      *(void *)(v43 + 16) = v35;
                  }
                  *(void *)(v34 + 16) = *((void *)v35 + 2);
                  *(void *)(*((void *)v35 + 2) + 8 * (**((void **)v35 + 2) != (void)v35)) = v34;
                  *(void *)(v34 + 8) = v35;
LABEL_42:
                  *((void *)v35 + 2) = v34;
                  break;
                }
              }
              else if (!v36 || (int v38 = *(unsigned __int8 *)(v36 + 24), v37 = (unsigned char *)(v36 + 24), v38))
              {
                if (*(void **)v34 == v30)
                {
                  uint64_t v50 = v30[1];
                  *(void *)uint64_t v34 = v50;
                  if (v50)
                  {
                    *(void *)(v50 + 16) = v34;
                    uint64_t v35 = *(unsigned char **)(v34 + 16);
                  }
                  v30[2] = v35;
                  *(void *)(*(void *)(v34 + 16) + 8 * (**(void **)(v34 + 16) != v34)) = v30;
                  v30[1] = v34;
                  *(void *)(v34 + 16) = v30;
                  uint64_t v35 = (unsigned char *)v30[2];
                  *((unsigned char *)v30 + 24) = 1;
                  v35[24] = 0;
                  uint64_t v34 = *((void *)v35 + 1);
                  unint64_t v44 = *(void **)v34;
                  *((void *)v35 + 1) = *(void *)v34;
                  if (v44) {
LABEL_40:
                  }
                    v44[2] = v35;
                }
                else
                {
                  *(unsigned char *)(v34 + 24) = 1;
                  v35[24] = 0;
                  uint64_t v34 = *((void *)v35 + 1);
                  unint64_t v44 = *(void **)v34;
                  *((void *)v35 + 1) = *(void *)v34;
                  if (v44) {
                    goto LABEL_40;
                  }
                }
                *(void *)(v34 + 16) = *((void *)v35 + 2);
                *(void *)(*((void *)v35 + 2) + 8 * (**((void **)v35 + 2) != (void)v35)) = v34;
                *(void *)uint64_t v34 = v35;
                goto LABEL_42;
              }
              *(unsigned char *)(v34 + 24) = 1;
              unint64_t v30 = v35;
              v35[24] = v35 == (unsigned char *)v32;
              unsigned char *v37 = 1;
            }
            while (v35 != (unsigned char *)v32);
          }
          ++*(void *)(v22 + 16);
          ++*v23;
        }
        int v45 = *(_DWORD *)(*a7 + 4 * v20);
        if (v81) {
          *(_DWORD *)(*a7 + 4 * v20) = ++v45;
        }
        uint64_t v14 = a1;
        uint64_t v8 = a3;
        uint64_t v16 = *(void *)(a1 + 32);
        uint64_t v9 = a2;
        if (*(void *)(v16 + 40 * v20 + 8) == v45) {
          break;
        }
        a4 = v23;
        if (++v17 >= *(void *)(v16 + 40 * a2)) {
          goto LABEL_59;
        }
      }
      uint64_t v46 = (char *)v83;
      BOOL v47 = (char *)__p[1];
      unint64_t v48 = (((void)v83 - (unint64_t)__p[1]) << 6) - 1;
      *(_DWORD *)(*a6 + 4 * v20) = 1;
      if (v46 == v47) {
        unint64_t v48 = 0;
      }
      unint64_t v49 = *((void *)&v84 + 1) + v84;
      a4 = v23;
      if (v48 == *((void *)&v84 + 1) + (void)v84)
      {
        sub_1C49DA0D4((uint64_t)__p);
        BOOL v47 = (char *)__p[1];
        unint64_t v49 = *((void *)&v84 + 1) + v84;
        uint64_t v16 = *(void *)(a1 + 32);
      }
      *(void *)(*(void *)&v47[(v49 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v49 & 0x1FF)) = v20;
      ++*((void *)&v84 + 1);
      ++v17;
    }
    while (v17 < *(void *)(v16 + 40 * a2));
LABEL_59:
    uint64_t v51 = *((void *)&v84 + 1);
    unint64_t v11 = v74;
    *(_DWORD *)(*a5 + 4 * a2) = 1;
    unint64_t v12 = v72;
    if (v51)
    {
      while (1)
      {
        uint64_t v52 = *(void *)(*(void *)((char *)__p[1] + (((unint64_t)(v84 + v51 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v84 + v51 - 1) & 0x1FF));
        if ((void *)v83 == __p[1]) {
          unint64_t v53 = 0;
        }
        else {
          unint64_t v53 = (((void)v83 - (unint64_t)__p[1]) << 6) - 1;
        }
        *((void *)&v84 + 1) = v51 - 1;
        if (v53 - (v51 + (void)v84) + 1 >= 0x400)
        {
          operator delete(*(void **)(v83 - 8));
          *(void *)&long long v83 = v83 - 8;
        }
        uint64_t v54 = *(void *)(a1 + 32);
        if (*(unsigned char *)(v54 + 40 * v52 + 32) || *(_DWORD *)(*a5 + 4 * v52))
        {
          uint64_t v55 = *(void *)(v54 + 40 * a2);
          if (v55) {
            goto LABEL_70;
          }
LABEL_61:
          uint64_t v51 = *((void *)&v84 + 1);
          unint64_t v11 = v74;
          if (!*((void *)&v84 + 1)) {
            break;
          }
        }
        else
        {
          sub_1C4B82784(a1, v52, a3, a4, a5, a6, a7);
          uint64_t v54 = *(void *)(a1 + 32);
          uint64_t v55 = *(void *)(v54 + 40 * a2);
          if (!v55) {
            goto LABEL_61;
          }
LABEL_70:
          int v56 = (uint64_t *)(*(void *)(a1 + 80) + 72 * *(void *)(v54 + 40 * a2 + 16) + 8);
          while (1)
          {
            uint64_t v58 = *v56;
            v56 += 9;
            uint64_t v57 = v58;
            if (!*(unsigned char *)(v54 + 40 * v58 + 32) && !*(_DWORD *)(*a5 + 4 * v57) && *(int *)(*a6 + 4 * v57) >= 1) {
              break;
            }
            if (!--v55) {
              goto LABEL_61;
            }
          }
          uint64_t v59 = (char *)__p[1];
          unint64_t v60 = (((void)v83 - (unint64_t)__p[1]) << 6) - 1;
          if ((void *)v83 == __p[1]) {
            unint64_t v60 = 0;
          }
          unint64_t v61 = *((void *)&v84 + 1) + v84;
          if (v60 == *((void *)&v84 + 1) + (void)v84)
          {
            sub_1C49DA0D4((uint64_t)__p);
            uint64_t v59 = (char *)__p[1];
            unint64_t v61 = *((void *)&v84 + 1) + v84;
          }
          *(void *)(*(void *)&v59[(v61 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v61 & 0x1FF)) = v57;
          uint64_t v51 = *((void *)&v84 + 1) + 1;
          *((void *)&v84 + 1) = v51;
          unint64_t v11 = v74;
          if (!v51) {
            break;
          }
        }
      }
    }
LABEL_84:
    uint64_t v62 = (void *)v11[1];
    if (v62)
    {
      do
      {
        unint64_t v63 = v62;
        uint64_t v62 = (void *)*v62;
      }
      while (v62);
    }
    else
    {
      do
      {
        unint64_t v63 = (void *)v11[2];
        BOOL v33 = *v63 == (void)v11;
        unint64_t v11 = v63;
      }
      while (!v33);
    }
    char v81 = 0;
    unint64_t v11 = v63;
  }
  while (v63 != v12);
  uint64_t v66 = (void **)__p[1];
  uint64_t v67 = (void **)v83;
  *((void *)&v84 + 1) = 0;
  unint64_t v68 = v83 - (unint64_t)__p[1];
  if ((unint64_t)v83 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v66);
      uint64_t v67 = (void **)v83;
      uint64_t v66 = (void **)((char *)__p[1] + 8);
      __p[1] = v66;
      unint64_t v68 = v83 - (void)v66;
    }
    while ((void)v83 - (void)v66 > 0x10uLL);
  }
LABEL_99:
  unint64_t v69 = v68 >> 3;
  if (v69 == 1)
  {
    uint64_t v70 = 256;
    goto LABEL_104;
  }
  if (v69 == 2)
  {
    uint64_t v70 = 512;
LABEL_104:
    *(void *)&long long v84 = v70;
  }
  if (v66 != v67)
  {
    do
    {
      uint64_t v71 = *v66++;
      operator delete(v71);
    }
    while (v66 != v67);
    if ((void *)v83 != __p[1]) {
      *(void *)&long long v83 = v83 + (((unint64_t)__p[1] - v83 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void sub_1C4B82F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1C4946780((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4B82F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1C4946780((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4B82F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1C4946780((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4B82F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1C4946780((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_1C4B82F5C(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 24;
        sub_1C49A1374(*((void **)v3 - 2));
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *Network::makeFinalNodeTheLastNode(uint64_t *this)
{
  uint64_t v1 = this[4];
  unint64_t v2 = *(void *)(this[7] + 32);
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((this[5] - v1) >> 3) - 1;
  if (v2 != v3)
  {
    unint64_t v4 = this;
    uint64_t v5 = this[10];
    uint64_t v6 = this[11] - v5;
    if (v6)
    {
      unint64_t v7 = v6 / 72;
      if (v7 <= 1) {
        unint64_t v7 = 1;
      }
      uint64_t v8 = (unint64_t *)(v5 + 8);
      do
      {
        uint64_t v9 = *(v8 - 1);
        unint64_t v10 = v3;
        if (v9 == v2 || (unint64_t v10 = v2, v9 == v3)) {
          *(v8 - 1) = v10;
        }
        unint64_t v11 = v3;
        if (*v8 == v2 || (unint64_t v11 = v2, *v8 == v3)) {
          *uint64_t v8 = v11;
        }
        v8 += 9;
        --v7;
      }
      while (v7);
    }
    unint64_t v12 = v1 + 40 * v2;
    unint64_t v13 = v1 + 40 * v3;
    long long v14 = *(_OWORD *)v12;
    long long v15 = *(_OWORD *)(v12 + 16);
    char v16 = *(unsigned char *)(v13 + 32);
    long long v17 = *(_OWORD *)(v13 + 16);
    *(_OWORD *)unint64_t v12 = *(_OWORD *)v13;
    *(_OWORD *)(v12 + 16) = v17;
    *(unsigned char *)(v12 + 32) = v16;
    unint64_t v18 = this + 8;
    this = (uint64_t *)this[8];
    uint64_t v19 = v4[4];
    uint64_t v20 = (_OWORD *)(v19 + 40 * v3);
    *uint64_t v20 = v14;
    v20[1] = v15;
    if (this)
    {
      unint64_t v21 = v4 + 8;
      uint64_t v22 = this;
      do
      {
        unint64_t v23 = v22[4];
        BOOL v24 = v23 >= v2;
        if (v23 >= v2) {
          unint64_t v25 = v22;
        }
        else {
          unint64_t v25 = v22 + 1;
        }
        if (v24) {
          unint64_t v21 = v22;
        }
        uint64_t v22 = (uint64_t *)*v25;
      }
      while (*v25);
      if (v21 == v18 || v21[4] > v2)
      {
        *(unsigned char *)(v19 + 40 * v2 + 32) = 0;
        goto LABEL_38;
      }
      BOOL v27 = (uint64_t *)v21[1];
      if (v27)
      {
        do
        {
          uint64_t v28 = v27;
          BOOL v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
      else
      {
        unint64_t v29 = v21;
        do
        {
          uint64_t v28 = (uint64_t *)v29[2];
          BOOL v30 = *v28 == (void)v29;
          unint64_t v29 = v28;
        }
        while (!v30);
      }
      if ((uint64_t *)v4[7] == v21) {
        v4[7] = (uint64_t)v28;
      }
      --v4[9];
      sub_1C49A0D30(this, v21);
      operator delete(v21);
      this = (uint64_t *)v4[8];
      uint64_t v19 = v4[4];
      *(unsigned char *)(v19 + 40 * v2 + 32) = 0;
      unint64_t v26 = v4 + 8;
      if (this)
      {
        while (1)
        {
LABEL_38:
          while (1)
          {
            unint64_t v26 = this;
            unint64_t v31 = this[4];
            if (v31 <= v3) {
              break;
            }
            this = (uint64_t *)*this;
            unint64_t v18 = v26;
            if (!*v26) {
              goto LABEL_42;
            }
          }
          if (v31 >= v3) {
            goto LABEL_46;
          }
          this = (uint64_t *)this[1];
          if (!this)
          {
            unint64_t v18 = v26 + 1;
            break;
          }
        }
      }
    }
    else
    {
      *(unsigned char *)(v19 + 40 * v2 + 32) = 0;
      unint64_t v26 = v4 + 8;
    }
LABEL_42:
    uint64_t v32 = (uint64_t *)operator new(0x28uLL);
    v32[4] = v3;
    *uint64_t v32 = 0;
    v32[1] = 0;
    v32[2] = (uint64_t)v26;
    *unint64_t v18 = (uint64_t)v32;
    uint64_t v33 = *(void *)v4[7];
    if (v33)
    {
      v4[7] = v33;
      uint64_t v34 = (uint64_t *)*v18;
    }
    else
    {
      uint64_t v34 = v32;
    }
    this = sub_1C4949FD4((uint64_t *)v4[8], v34);
    ++v4[9];
    uint64_t v19 = v4[4];
LABEL_46:
    if (0xCCCCCCCCCCCCCCCDLL * ((v4[5] - v19) >> 3) >= v3) {
      *(unsigned char *)(v19 + 40 * v3 + 32) = 1;
    }
  }
  return this;
}

void Network::unionNetwork(Network *this, const Network *a2, const Network *a3)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *((void *)a2 + 4);
  uint64_t v6 = *((void *)a2 + 5);
  uint64_t v9 = *((void *)a3 + 4);
  uint64_t v8 = *((void *)a3 + 5);
  v61[0] = 0;
  v61[1] = 0;
  unint64_t v60 = v61;
  sub_1C499A568(&v60, *((void **)a2 + 7), (void *)a2 + 8);
  v59[0] = 0;
  v59[1] = 0;
  uint64_t v58 = v59;
  uint64_t v52 = (void *)((char *)a3 + 64);
  sub_1C499A568(&v58, *((void **)a3 + 7), (void *)a3 + 8);
  unint64_t v51 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3);
  unint64_t v10 = v51 - 0x3333333333333333 * ((v8 - v9) >> 3) - 2;
  uint64_t v11 = *((void *)this + 4);
  unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 5) - v11) >> 3);
  if (v10 <= v12)
  {
    if (v10 < v12) {
      *((void *)this + 5) = v11 + 40 * v10;
    }
  }
  else
  {
    sub_1C499C97C((void **)this + 4, v10 - v12);
  }
  if (this != a2)
  {
    sub_1C499B358((uint64_t)this + 136, *((std::string **)a2 + 17), *((std::string **)a2 + 18), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 18) - *((void *)a2 + 17)) >> 3));
    sub_1C499B660((uint64_t **)this + 20, *((void **)a2 + 20), (void *)a2 + 21);
  }
  uint64_t v13 = *((void *)a2 + 10);
  if (*((void *)a2 + 11) != v13)
  {
    unint64_t v14 = 0;
    long long v15 = (char *)*((void *)this + 11);
    unsigned int v16 = 1;
    do
    {
      unint64_t v18 = (_OWORD *)(v13 + 72 * v14);
      if ((unint64_t)v15 < *((void *)this + 12))
      {
        *(_OWORD *)long long v15 = *v18;
        uint64_t v17 = v13 + 72 * v14;
        *((_OWORD *)v15 + 1) = *(_OWORD *)(v17 + 16);
        *((_OWORD *)v15 + 2) = *(_OWORD *)(v17 + 32);
        *((_OWORD *)v15 + 3) = *(_OWORD *)(v17 + 48);
        *((void *)v15 + 8) = *(void *)(v17 + 64);
        v15 += 72;
      }
      else
      {
        long long v15 = sub_1C499CBEC((char **)this + 10, (uint64_t)v18);
        uint64_t v13 = *((void *)a2 + 10);
      }
      *((void *)this + 11) = v15;
      unint64_t v14 = v16++;
    }
    while (0x8E38E38E38E38E39 * ((*((void *)a2 + 11) - v13) >> 3) > v14);
  }
  uint64_t v19 = *((void *)a3 + 10);
  if (*((void *)a3 + 11) != v19)
  {
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    do
    {
      uint64_t v22 = v19 + v20;
      unint64_t v23 = *(void **)v22;
      *(void *)unint64_t v53 = v23;
      long long v24 = *(_OWORD *)(v22 + 8);
      *(_OWORD *)&v53[8] = v24;
      unint64_t v54 = *(void *)(v22 + 24);
      long long v55 = *(_OWORD *)(v22 + 32);
      long long v56 = *(_OWORD *)(v22 + 48);
      uint64_t v57 = *(void *)(v22 + 64);
      unint64_t v25 = v58[4];
      if (v23 == v25)
      {
        *(void *)unint64_t v53 = v60[4];
        unint64_t v26 = v24;
        if ((void *)v24 == v23) {
          goto LABEL_21;
        }
      }
      else if (v23 == *((void **)a3 + 3))
      {
        unint64_t v26 = v24;
        if ((void *)v24 == v25) {
          goto LABEL_21;
        }
      }
      else
      {
        *((void *)&__dst + 1) = 0;
        unint64_t v63 = 0;
        *(void *)&long long __dst = (char *)&__dst + 8;
        sub_1C499A568(&__dst, *((void **)a3 + 7), v52);
        unint64_t v28 = *(void *)(__dst + 32);
        sub_1C4999C7C((uint64_t)&__dst, *((void **)&__dst + 1));
        uint64_t v29 = -2;
        if ((unint64_t)v23 <= v28) {
          uint64_t v29 = -1;
        }
        unint64_t v26 = *(void *)&v53[8];
        *(void *)v53 += v29 + v51;
        if (*(void **)&v53[8] == v58[4])
        {
LABEL_21:
          BOOL v27 = v60[4];
          goto LABEL_29;
        }
      }
      if (v26 == *((void *)a3 + 3)) {
        goto LABEL_30;
      }
      *((void *)&__dst + 1) = 0;
      unint64_t v63 = 0;
      *(void *)&long long __dst = (char *)&__dst + 8;
      sub_1C499A568(&__dst, *((void **)a3 + 7), v52);
      unint64_t v30 = *(void *)(__dst + 32);
      sub_1C4999C7C((uint64_t)&__dst, *((void **)&__dst + 1));
      uint64_t v31 = -2;
      if (v26 <= v30) {
        uint64_t v31 = -1;
      }
      BOOL v27 = (void *)(v31 + v51 + *(void *)&v53[8]);
LABEL_29:
      *(void *)&v53[8] = v27;
LABEL_30:
      snprintf(__str, 0x13uLL, "0x%zx", *(size_t *)&v53[16]);
      size_t v32 = strlen(__str);
      if (v32 >= 0x7FFFFFFFFFFFFFF8) {
        sub_1C4949B7C();
      }
      size_t v33 = v32;
      if (v32 >= 0x17)
      {
        uint64_t v35 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v32 | 7) != 0x17) {
          uint64_t v35 = v32 | 7;
        }
        uint64_t v36 = v35 + 1;
        p_dst = (long long *)operator new(v35 + 1);
        *((void *)&__dst + 1) = v33;
        unint64_t v63 = v36 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
LABEL_37:
        memcpy(p_dst, __str, v33);
        goto LABEL_38;
      }
      HIBYTE(v63) = v32;
      p_dst = &__dst;
      if (v32) {
        goto LABEL_37;
      }
LABEL_38:
      *((unsigned char *)p_dst + v33) = 0;
      sub_1C4999D30((void *)this + 16, (uint64_t)&__dst);
      if (SHIBYTE(v63) < 0)
      {
        operator delete((void *)__dst);
        unint64_t v37 = v54;
        if (!*((unsigned char *)a3 + 184))
        {
LABEL_43:
          uint64_t v38 = *((void *)a3 + 17) + 24 * v37;
          if (*(char *)(v38 + 23) < 0) {
            goto LABEL_46;
          }
LABEL_44:
          long long v39 = *(_OWORD *)v38;
          unint64_t v63 = *(void *)(v38 + 16);
          long long __dst = v39;
          goto LABEL_47;
        }
      }
      else
      {
        unint64_t v37 = v54;
        if (!*((unsigned char *)a3 + 184)) {
          goto LABEL_43;
        }
      }
      if (!v37)
      {
        uint64_t v38 = *((void *)a3 + 17);
        if (*(char *)(v38 + 23) < 0)
        {
LABEL_46:
          sub_1C4949ADC(&__dst, *(void **)v38, *(void *)(v38 + 8));
          goto LABEL_47;
        }
        goto LABEL_44;
      }
      ul2sh(v37, (uint64_t)&__dst);
LABEL_47:
      int v40 = sub_1C4999D30((void *)this + 16, (uint64_t)&__dst);
      unint64_t v54 = (unint64_t)v40;
      unint64_t v41 = *((void *)this + 11);
      if (v41 >= *((void *)this + 12))
      {
        uint64_t v42 = sub_1C499CBEC((char **)this + 10, (uint64_t)v53);
      }
      else
      {
        *(_OWORD *)unint64_t v41 = *(_OWORD *)v53;
        *(void *)(v41 + 16) = *(void *)&v53[16];
        *(void *)(v41 + 24) = v40;
        *(_OWORD *)(v41 + 32) = v55;
        *(_OWORD *)(v41 + 48) = v56;
        *(void *)(v41 + 64) = v57;
        uint64_t v42 = (char *)(v41 + 72);
      }
      *((void *)this + 11) = v42;
      if (SHIBYTE(v63) < 0) {
        operator delete((void *)__dst);
      }
      ++v21;
      uint64_t v19 = *((void *)a3 + 10);
      v20 += 72;
    }
    while (v21 < 0x8E38E38E38E38E39 * ((*((void *)a3 + 11) - v19) >> 3));
  }
  unint64_t v43 = (unint64_t)v60[4];
  int v45 = (uint64_t **)((char *)this + 64);
  unint64_t v44 = (uint64_t *)*((void *)this + 8);
  if (v44)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v46 = (uint64_t **)v44;
        unint64_t v47 = v44[4];
        if (v47 <= v43) {
          break;
        }
        unint64_t v44 = *v46;
        int v45 = v46;
        if (!*v46) {
          goto LABEL_59;
        }
      }
      if (v47 >= v43) {
        break;
      }
      unint64_t v44 = v46[1];
      if (!v44)
      {
        int v45 = v46 + 1;
        goto LABEL_59;
      }
    }
  }
  else
  {
    uint64_t v46 = (uint64_t **)((char *)this + 64);
LABEL_59:
    unint64_t v48 = (uint64_t *)operator new(0x28uLL);
    v48[4] = v43;
    *unint64_t v48 = 0;
    v48[1] = 0;
    v48[2] = (uint64_t)v46;
    *int v45 = v48;
    uint64_t v49 = **((void **)this + 7);
    if (v49)
    {
      *((void *)this + 7) = v49;
      unint64_t v48 = *v45;
    }
    sub_1C4949FD4(*((uint64_t **)this + 8), v48);
    ++*((void *)this + 9);
  }
  uint64_t v50 = *((void *)this + 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 5) - v50) >> 3) >= v43) {
    *(unsigned char *)(v50 + 40 * v43 + 32) = 1;
  }
  Network::prepareNetwork(this);
  sub_1C4999C7C((uint64_t)&v58, v59[0]);
  sub_1C4999C7C((uint64_t)&v60, v61[0]);
}

void sub_1C4B83888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *a24,uint64_t a25,char a26,void *a27)
{
}

uint64_t Network::guaranteeThatEdgesAreNonNegative(Network *this)
{
  uint64_t v1 = *((void *)this + 10);
  uint64_t v2 = *((void *)this + 11) - v1;
  if (v2)
  {
    unint64_t v3 = v2 / 72;
    if (v3 <= 1) {
      unint64_t v3 = 1;
    }
    unint64_t v4 = (double *)(v1 + 32);
    char v5 = 1;
    do
    {
      if (*v4 < 0.000000999999997)
      {
        char v5 = 0;
        *unint64_t v4 = 0.000000999999997;
      }
      v4 += 9;
      --v3;
    }
    while (v3);
  }
  else
  {
    char v5 = 1;
  }
  return v5 & 1;
}

void Network::convertAllEdgesToScores(Network *this)
{
  uint64_t v1 = *((void *)this + 10);
  uint64_t v2 = *((void *)this + 11) - v1;
  if (v2)
  {
    unint64_t v3 = v2 / 72;
    if (v3 <= 1) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = v3;
    }
    char v5 = (double *)(v1 + 32);
    do
    {
      long double v6 = 2.22044605e-16;
      if (*v5 >= 2.22044605e-16)
      {
        long double v6 = *v5;
        if (*v5 > 1.0) {
          long double v6 = 1.0;
        }
      }
      *char v5 = -log10(v6);
      v5 += 9;
      --v4;
    }
    while (v4);
  }
}

void Network::applyInsertionPenalty(Network *this, float a2)
{
  uint64_t v2 = *((void *)this + 10);
  if (*((void *)this + 11) != v2)
  {
    unint64_t v4 = 0;
    double v5 = a2;
    double v82 = a2;
    do
    {
      unint64_t v6 = *(void *)(v2 + 72 * v4 + 24);
      if (*((unsigned char *)this + 184))
      {
        if (v6)
        {
          ul2sh(v6, (uint64_t)__p);
          goto LABEL_11;
        }
        uint64_t v7 = *((void *)this + 17);
        if ((*(char *)(v7 + 23) & 0x80000000) == 0)
        {
LABEL_8:
          long long v8 = *(_OWORD *)v7;
          uint64_t v85 = *(void *)(v7 + 16);
          *(_OWORD *)long long __p = v8;
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v7 = *((void *)this + 17) + 24 * v6;
        if ((*(char *)(v7 + 23) & 0x80000000) == 0) {
          goto LABEL_8;
        }
      }
      sub_1C4949ADC(__p, *(void **)v7, *(void *)(v7 + 8));
LABEL_11:
      unint64_t v9 = HIBYTE(v85);
      if (v85 >= 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if (v85 < 0) {
        unint64_t v9 = (unint64_t)__p[1];
      }
      if (v9)
      {
        if (v9 >= 8)
        {
          if (v9 >= 0x20)
          {
            int64x2_t v15 = 0uLL;
            unint64_t v14 = v9 & 0xFFFFFFFFFFFFFFE0;
            int64x2_t v16 = 0uLL;
            uint64_t v17 = (int8x16_t *)(v10 + 2);
            int64x2_t v18 = 0uLL;
            unint64_t v19 = v9 & 0xFFFFFFFFFFFFFFE0;
            int64x2_t v20 = 0uLL;
            int64x2_t v21 = 0uLL;
            int64x2_t v22 = 0uLL;
            int64x2_t v23 = 0uLL;
            int64x2_t v24 = 0uLL;
            int64x2_t v25 = 0uLL;
            int64x2_t v26 = 0uLL;
            int64x2_t v27 = 0uLL;
            int64x2_t v28 = 0uLL;
            int64x2_t v29 = 0uLL;
            int64x2_t v30 = 0uLL;
            int64x2_t v31 = 0uLL;
            int64x2_t v32 = 0uLL;
            do
            {
              v33.i64[0] = 0x5F5F5F5F5F5F5F5FLL;
              v33.i64[1] = 0x5F5F5F5F5F5F5F5FLL;
              uint8x16_t v34 = (uint8x16_t)vceqq_s8(v17[-1], v33);
              uint16x8_t v35 = vmovl_u8(*(uint8x8_t *)v34.i8);
              uint32x4_t v36 = vmovl_u16(*(uint16x4_t *)v35.i8);
              v37.i64[0] = v36.u32[0];
              v37.i64[1] = v36.u32[1];
              int8x16_t v38 = (int8x16_t)vdupq_n_s64(1uLL);
              int64x2_t v83 = (int64x2_t)vandq_s8(v37, v38);
              v37.i64[0] = v36.u32[2];
              v37.i64[1] = v36.u32[3];
              int64x2_t v39 = (int64x2_t)vandq_s8(v37, v38);
              uint32x4_t v40 = vmovl_high_u16(v35);
              v37.i64[0] = v40.u32[0];
              v37.i64[1] = v40.u32[1];
              int64x2_t v41 = (int64x2_t)vandq_s8(v37, v38);
              uint16x8_t v42 = vmovl_high_u8(v34);
              uint32x4_t v43 = vmovl_u16(*(uint16x4_t *)v42.i8);
              v37.i64[0] = v43.u32[0];
              v37.i64[1] = v43.u32[1];
              int64x2_t v44 = (int64x2_t)vandq_s8(v37, v38);
              v37.i64[0] = v40.u32[2];
              v37.i64[1] = v40.u32[3];
              int64x2_t v45 = (int64x2_t)vandq_s8(v37, v38);
              v37.i64[0] = v43.u32[2];
              v37.i64[1] = v43.u32[3];
              int64x2_t v46 = (int64x2_t)vandq_s8(v37, v38);
              uint32x4_t v47 = vmovl_high_u16(v42);
              v37.i64[0] = v47.u32[0];
              v37.i64[1] = v47.u32[1];
              int64x2_t v48 = (int64x2_t)vandq_s8(v37, v38);
              v37.i64[0] = v47.u32[2];
              v37.i64[1] = v47.u32[3];
              int64x2_t v49 = (int64x2_t)vandq_s8(v37, v38);
              uint8x16_t v50 = (uint8x16_t)vceqq_s8(*v17, v33);
              uint16x8_t v51 = vmovl_u8(*(uint8x8_t *)v50.i8);
              uint32x4_t v52 = vmovl_u16(*(uint16x4_t *)v51.i8);
              v37.i64[0] = v52.u32[0];
              v37.i64[1] = v52.u32[1];
              int64x2_t v53 = (int64x2_t)vandq_s8(v37, v38);
              v37.i64[0] = v52.u32[2];
              v37.i64[1] = v52.u32[3];
              int64x2_t v54 = (int64x2_t)vandq_s8(v37, v38);
              uint32x4_t v55 = vmovl_high_u16(v51);
              v37.i64[0] = v55.u32[0];
              v37.i64[1] = v55.u32[1];
              int64x2_t v56 = (int64x2_t)vandq_s8(v37, v38);
              uint16x8_t v57 = vmovl_high_u8(v50);
              uint32x4_t v58 = vmovl_u16(*(uint16x4_t *)v57.i8);
              v37.i64[0] = v58.u32[0];
              v37.i64[1] = v58.u32[1];
              int64x2_t v59 = (int64x2_t)vandq_s8(v37, v38);
              v37.i64[0] = v55.u32[2];
              v37.i64[1] = v55.u32[3];
              int64x2_t v60 = (int64x2_t)vandq_s8(v37, v38);
              v37.i64[0] = v58.u32[2];
              v37.i64[1] = v58.u32[3];
              int64x2_t v61 = (int64x2_t)vandq_s8(v37, v38);
              uint32x4_t v62 = vmovl_high_u16(v57);
              v37.i64[0] = v62.u32[0];
              v37.i64[1] = v62.u32[1];
              int64x2_t v63 = (int64x2_t)vandq_s8(v37, v38);
              v37.i64[0] = v62.u32[2];
              v37.i64[1] = v62.u32[3];
              int64x2_t v24 = vaddq_s64(v24, v49);
              int64x2_t v23 = vaddq_s64(v23, v48);
              int64x2_t v22 = vaddq_s64(v22, v46);
              int64x2_t v20 = vaddq_s64(v20, v45);
              int64x2_t v21 = vaddq_s64(v21, v44);
              int64x2_t v18 = vaddq_s64(v18, v41);
              int64x2_t v16 = vaddq_s64(v16, v39);
              int64x2_t v15 = vaddq_s64(v15, v83);
              int64x2_t v32 = vaddq_s64(v32, (int64x2_t)vandq_s8(v37, v38));
              int64x2_t v31 = vaddq_s64(v31, v63);
              int64x2_t v30 = vaddq_s64(v30, v61);
              int64x2_t v28 = vaddq_s64(v28, v60);
              int64x2_t v29 = vaddq_s64(v29, v59);
              int64x2_t v27 = vaddq_s64(v27, v56);
              int64x2_t v26 = vaddq_s64(v26, v54);
              int64x2_t v25 = vaddq_s64(v25, v53);
              v17 += 2;
              v19 -= 32;
            }
            while (v19);
            uint64_t v11 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v25, v15), vaddq_s64(v29, v21)), vaddq_s64(vaddq_s64(v27, v18), vaddq_s64(v31, v23))), vaddq_s64(vaddq_s64(vaddq_s64(v26, v16), vaddq_s64(v30, v22)), vaddq_s64(vaddq_s64(v28, v20), vaddq_s64(v32, v24)))));
            if (v9 == v14)
            {
              double v5 = v82;
              goto LABEL_36;
            }
            double v5 = v82;
            if ((v9 & 0x18) == 0)
            {
              unint64_t v12 = (void **)((char *)v10 + v14);
              goto LABEL_32;
            }
          }
          else
          {
            uint64_t v11 = 0;
            unint64_t v14 = 0;
          }
          unint64_t v12 = (void **)((char *)v10 + (v9 & 0xFFFFFFFFFFFFFFF8));
          int64x2_t v64 = 0uLL;
          int64x2_t v65 = (int64x2_t)(unint64_t)v11;
          uint64_t v66 = (int8x8_t *)((char *)v10 + v14);
          unint64_t v67 = v14 - (v9 & 0xFFFFFFFFFFFFFFF8);
          int64x2_t v68 = 0uLL;
          int64x2_t v69 = 0uLL;
          do
          {
            int8x8_t v70 = *v66++;
            uint16x8_t v71 = vmovl_u8((uint8x8_t)vceq_s8(v70, (int8x8_t)0x5F5F5F5F5F5F5F5FLL));
            uint32x4_t v72 = vmovl_u16(*(uint16x4_t *)v71.i8);
            v73.i64[0] = v72.u32[0];
            v73.i64[1] = v72.u32[1];
            int8x16_t v74 = (int8x16_t)vdupq_n_s64(1uLL);
            int64x2_t v75 = (int64x2_t)vandq_s8(v73, v74);
            v73.i64[0] = v72.u32[2];
            v73.i64[1] = v72.u32[3];
            int64x2_t v76 = (int64x2_t)vandq_s8(v73, v74);
            uint32x4_t v77 = vmovl_high_u16(v71);
            v73.i64[0] = v77.u32[0];
            v73.i64[1] = v77.u32[1];
            int64x2_t v78 = (int64x2_t)vandq_s8(v73, v74);
            v73.i64[0] = v77.u32[2];
            v73.i64[1] = v77.u32[3];
            int64x2_t v69 = vaddq_s64(v69, (int64x2_t)vandq_s8(v73, v74));
            int64x2_t v68 = vaddq_s64(v68, v78);
            int64x2_t v64 = vaddq_s64(v64, v76);
            int64x2_t v65 = vaddq_s64(v65, v75);
            v67 += 8;
          }
          while (v67);
          uint64_t v11 = vaddvq_s64(vaddq_s64(vaddq_s64(v65, v68), vaddq_s64(v64, v69)));
          if (v9 != (v9 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_32;
          }
        }
        else
        {
          uint64_t v11 = 0;
          unint64_t v12 = v10;
LABEL_32:
          uint64_t v79 = (unsigned __int8 *)v10 + v9;
          do
          {
            int v80 = *(unsigned __int8 *)v12;
            unint64_t v12 = (void **)((char *)v12 + 1);
            if (v80 == 95) {
              ++v11;
            }
          }
          while (v12 != (void **)v79);
        }
LABEL_36:
        unint64_t v13 = v11 + 1;
        goto LABEL_37;
      }
      unint64_t v13 = 1;
LABEL_37:
      double v81 = v5 * (double)v13;
      uint64_t v2 = *((void *)this + 10);
      *(double *)(v2 + 72 * v4 + 32) = fmax(*(double *)(v2 + 72 * v4 + 32) + v81, 0.000001);
      if (SHIBYTE(v85) < 0)
      {
        operator delete(__p[0]);
        uint64_t v2 = *((void *)this + 10);
      }
      ++v4;
    }
    while (v4 < 0x8E38E38E38E38E39 * ((*((void *)this + 11) - v2) >> 3));
  }
}

uint64_t Network::applyDiscount(uint64_t this, float a2)
{
  uint64_t v2 = *(uint64_t **)(this + 32);
  uint64_t v3 = *v2;
  if (*v2)
  {
    uint64_t v4 = v2[2];
    uint64_t v5 = *(void *)(this + 80);
    double v6 = a2;
    unint64_t v7 = 0;
    unint64_t v8 = v3 - 1;
    if (v3 == 1) {
      goto LABEL_8;
    }
    BOOL v9 = !is_mul_ok(v8, 0x48uLL);
    if (72 * v4 + v5 + 32 + 72 * v8 < 72 * v4 + v5 + 32) {
      goto LABEL_8;
    }
    if (v9) {
      goto LABEL_8;
    }
    unint64_t v7 = v3 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v10 = (double *)(72 * v4 + v5 + 104);
    unint64_t v11 = v3 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      double v12 = fmax(*v10 + v6, 0.000001);
      *(v10 - 9) = fmax(*(v10 - 9) + v6, 0.000001);
      *unint64_t v10 = v12;
      v10 += 18;
      v11 -= 2;
    }
    while (v11);
    if (v3 != v7)
    {
LABEL_8:
      uint64_t v13 = v3 - v7;
      unint64_t v14 = (double *)(v5 + 72 * (v7 + v4) + 32);
      do
      {
        *unint64_t v14 = fmax(*v14 + v6, 0.000001);
        v14 += 9;
        --v13;
      }
      while (v13);
    }
  }
  return this;
}

uint64_t Network::composeTrimAndSimplify(Network *this, const Network *a2, Network *a3, Network *a4, int a5, char a6)
{
  sub_1C499A82C((uint64_t)v13);
  Network::compose((Network *)v13, a2, a3, a6);
  sub_1C499A82C((uint64_t)v12);
  Network::trimDeadEdges(v13, (Network *)v12);
  Network::removeEpsOutputEdges((Network *)v12, a4, a5);
  sub_1C4999ABC((uint64_t)v12);
  return sub_1C4999ABC((uint64_t)v13);
}

void sub_1C4B83FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_1C4B83FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_1C4B83FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_1C4B83FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1C499A82C((uint64_t)v182);
  sub_1C499A82C((uint64_t)v181);
  v180[0] = 0;
  v180[1] = 0;
  int v179 = v180;
  sub_1C499A82C((uint64_t)&v195);
  if (v199 != v198) {
    float v199 = v198;
  }
  sub_1C4999C7C((uint64_t)&v200, v201);
  uint64_t v202 = 0;
  int8x8_t v200 = &v201;
  uint64_t v201 = 0;
  int v193 = 0;
  long long __p = 0;
  uint64_t v194 = 0;
  uint64_t v217 = 0;
  unint64_t v218 = 0;
  int v216 = &v217;
  sub_1C4999C7C((uint64_t)&v206, v207);
  uint64_t v208 = 0;
  unint64_t v206 = &v207;
  unint64_t v207 = 0;
  int v214 = 0;
  uint64_t v215 = 0;
  uint64_t v212 = 0;
  int8x8_t v213 = (uint64_t *)&v214;
  uint64_t v210 = (uint64_t *)&v211;
  CGFloat v211 = 0;
  uint64_t RootCursor = LMLexiconGetRootCursor();
  uint64_t v11 = LMLexiconGetRootCursor();
  unint64_t v12 = LMLexiconCursorHash();
  uint64_t v13 = LMLexiconCursorHash();
  sub_1C4B80D68((uint64_t)&v195, a2, a5, a6, v12, v13, &v179, *(void *)(a2 + 24), RootCursor, v12, 0, (uint64_t)&v216, (uint64_t)&__p, &v213, &v210);
  if (a6) {
    sub_1C4B80D68((uint64_t)&v195, a2, a6, a6, v12, v13, &v179, *(void *)(a2 + 24), v11, v13, 1, (uint64_t)&v216, (uint64_t)&__p, &v213, &v210);
  }
  sub_1C4999C7C((uint64_t)&v213, v214);
  int v214 = 0;
  uint64_t v215 = 0;
  int8x8_t v213 = (uint64_t *)&v214;
  sub_1C4999C7C((uint64_t)&v206, v207);
  uint64_t v208 = 0;
  unint64_t v206 = &v207;
  unint64_t v207 = 0;
  LMLexiconResetCursors();
  uint64_t v14 = LMLexiconResetCursors();
  unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((v199 - v198) >> 3);
  if (v218 <= v15)
  {
    if (v218 < v15) {
      float v199 = &v198[40 * v218];
    }
  }
  else
  {
    sub_1C499C97C((void **)&v198, v218 - v15);
  }
  int64x2_t v16 = v210;
  if (v210 != (uint64_t *)&v211)
  {
    do
    {
      unint64_t v17 = v16[4];
      int64x2_t v18 = v201;
      unint64_t v19 = &v201;
      int64x2_t v20 = &v201;
      if (v201)
      {
        do
        {
          while (1)
          {
            int64x2_t v20 = (uint64_t **)v18;
            unint64_t v21 = v18[4];
            if (v21 <= v17) {
              break;
            }
            int64x2_t v18 = *v20;
            unint64_t v19 = v20;
            if (!*v20) {
              goto LABEL_19;
            }
          }
          if (v21 >= v17) {
            goto LABEL_22;
          }
          int64x2_t v18 = v20[1];
        }
        while (v18);
        unint64_t v19 = v20 + 1;
      }
LABEL_19:
      int64x2_t v22 = (uint64_t *)operator new(0x28uLL);
      v22[4] = v17;
      *int64x2_t v22 = 0;
      v22[1] = 0;
      v22[2] = (uint64_t)v20;
      *unint64_t v19 = v22;
      if (*v200)
      {
        int8x8_t v200 = (uint64_t **)*v200;
        int64x2_t v22 = *v19;
      }
      uint64_t v14 = (uint64_t)sub_1C4949FD4(v201, v22);
      ++v202;
LABEL_22:
      if (0xCCCCCCCCCCCCCCCDLL * ((v199 - v198) >> 3) >= v17) {
        v198[40 * v17 + 32] = 1;
      }
      int64x2_t v23 = (uint64_t *)v16[1];
      if (v23)
      {
        do
        {
          int64x2_t v24 = v23;
          int64x2_t v23 = (uint64_t *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          int64x2_t v24 = (uint64_t *)v16[2];
          BOOL v25 = *v24 == (void)v16;
          int64x2_t v16 = v24;
        }
        while (!v25);
      }
      int64x2_t v16 = v24;
    }
    while (v24 != (uint64_t *)&v211);
  }
  sub_1C4B800AC(v14, (uint64_t)&__p);
  int64x2_t v26 = __p;
  int64x2_t v27 = v193;
  if (__p != v193)
  {
    int64x2_t v28 = v204;
    do
    {
      if ((unint64_t)v28 < v205)
      {
        *(_OWORD *)int64x2_t v28 = *v26;
        *((_OWORD *)v28 + 1) = v26[1];
        *((_OWORD *)v28 + 2) = v26[2];
        *((_OWORD *)v28 + 3) = v26[3];
        *((void *)v28 + 8) = *((void *)v26 + 8);
        v28 += 72;
      }
      else
      {
        int64x2_t v28 = sub_1C499CBEC(&v203, (uint64_t)v26);
      }
      uint64_t v204 = v28;
      int64x2_t v26 = (_OWORD *)((char *)v26 + 72);
    }
    while (v26 != (_OWORD *)v27);
  }
  Network::prepareNetwork((Network *)&v195);
  sub_1C4999C7C((uint64_t)&v210, v211);
  sub_1C4999C7C((uint64_t)&v213, v214);
  sub_1C49A1374(v217);
  if (__p)
  {
    int v193 = (char *)__p;
    operator delete(__p);
  }
  sub_1C499A82C((uint64_t)&__p);
  Network::trimDeadEdges((std::string **)&v195, (Network *)&__p);
  Network::removeEpsOutputEdges((Network *)&__p, (Network *)v182, 0);
  sub_1C4999ABC((uint64_t)&__p);
  sub_1C4999ABC((uint64_t)&v195);
  LMLexiconResetCursors();
  LMLexiconResetCursors();
  if (v187 != v186)
  {
    unint64_t v29 = (v187 - v186) / 72;
    if (v29 <= 1) {
      unint64_t v29 = 1;
    }
    int64x2_t v30 = (double *)(v186 + 32);
    do
    {
      if (*v30 < 0.000000999999997) {
        *int64x2_t v30 = 0.000000999999997;
      }
      v30 += 9;
      --v29;
    }
    while (v29);
  }
  sub_1C4999C7C(a9 + 56, *(void **)(a9 + 64));
  *(void *)(a9 + 56) = a9 + 64;
  uint64_t v177 = (void **)(a9 + 64);
  *(void *)(a9 + 64) = 0;
  uint64_t v31 = *(void *)(a9 + 32);
  *(void *)(a9 + 72) = 0;
  uint64_t v167 = (void **)(a9 + 32);
  uint64_t v32 = *(void *)(a9 + 40);
  if (v32 != v31)
  {
    *(void *)(a9 + 40) = v31;
    uint64_t v32 = v31;
  }
  unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * ((v185 - v184) >> 3);
  unint64_t v34 = 0xCCCCCCCCCCCCCCCDLL * ((v32 - v31) >> 3);
  if (v33 <= v34)
  {
    if (v33 < v34) {
      *(void *)(a9 + 40) = v31 + 8 * ((v185 - v184) >> 3);
    }
  }
  else
  {
    sub_1C499C97C(v167, v33 - v34);
  }
  if (v182 != (unsigned char *)a9)
  {
    sub_1C499B358(a9 + 136, __str, *(std::string **)v189, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v189 - (void)__str) >> 3));
    sub_1C499B660((uint64_t **)(a9 + 160), v190, v191);
  }
  uint64_t v35 = v185;
  uint64_t v36 = v184;
  uint64_t v194 = 0;
  long long __p = 0;
  int v193 = 0;
  unint64_t v37 = (v185 - v184) / 40;
  if (v185 == v184)
  {
    int64x2_t v39 = 0;
  }
  else
  {
    if (v37 >= 0xAAAAAAAAAAAAAABLL) {
      sub_1C494A220();
    }
    uint64_t v38 = 24 * v37;
    int64x2_t v39 = (char *)operator new(24 * v37);
    uint64_t v40 = 0;
    long long __p = v39;
    uint64_t v194 = &v39[24 * v37];
    do
    {
      int64x2_t v41 = &v39[v40];
      *((void *)v41 + 2) = 0;
      *(void *)&v39[v40 + 8] = 0;
      *(void *)int64x2_t v41 = &v39[v40 + 8];
      v40 += 24;
    }
    while (v38 != v40);
    int v193 = &v39[v38];
  }
  __src = 0;
  unint64_t v42 = v183 & 0xFFFFF;
  uint32x4_t v43 = &v39[24 * v183];
  int64x2_t v45 = (uint64_t **)(v43 + 8);
  int64x2_t v44 = (uint64_t *)*((void *)v43 + 1);
  if (v44)
  {
    int64x2_t v46 = (uint64_t **)(v43 + 8);
    uint32x4_t v47 = (void *)*((void *)v43 + 1);
    do
    {
      unint64_t v48 = v47[4];
      BOOL v49 = v48 >= v42;
      if (v48 >= v42) {
        uint8x16_t v50 = v47;
      }
      else {
        uint8x16_t v50 = v47 + 1;
      }
      if (v49) {
        int64x2_t v46 = (uint64_t **)v47;
      }
      uint32x4_t v47 = (void *)*v50;
    }
    while (*v50);
    if (v46 != v45 && v42 >= (unint64_t)v46[4])
    {
      uint16x8_t v51 = (char **)a9;
      int v216 = 0;
      uint64_t v217 = 0;
      unint64_t v218 = 0;
      if (v35 != v36)
      {
LABEL_71:
        if (v37 >> 62) {
          sub_1C494A220();
        }
        uint32x4_t v52 = (char **)operator new(4 * v37);
        int v216 = v52;
        unint64_t v218 = (unint64_t)v52 + 4 * v37;
        bzero(v52, 4 * v37);
        uint64_t v217 = (char *)v52 + 4 * v37;
        int64x2_t v53 = (uint64_t *)operator new(4 * v37);
        int8x8_t v213 = v53;
        uint64_t v215 = (char *)v53 + 4 * v37;
        bzero(v53, 4 * v37);
        int v214 = (uint64_t *)((char *)v53 + 4 * v37);
        int64x2_t v54 = (uint64_t *)operator new(4 * v37);
        uint64_t v210 = v54;
        uint64_t v212 = (char *)v54 + 4 * v37;
        bzero(v54, 4 * v37);
        CGFloat v211 = (uint64_t *)((char *)v54 + 4 * v37);
        goto LABEL_84;
      }
LABEL_83:
      uint32x4_t v52 = 0;
      int64x2_t v53 = 0;
      int64x2_t v54 = 0;
      int8x8_t v213 = 0;
      int v214 = 0;
      uint64_t v215 = 0;
      uint64_t v210 = 0;
      CGFloat v211 = 0;
      uint64_t v212 = 0;
LABEL_84:
      sub_1C4B82784((uint64_t)v182, v183, &__p, &__src, (uint64_t *)&v210, &v216, &v213);
      int64x2_t v60 = (char *)__p;
      int64x2_t v61 = v193;
      double v171 = v54;
      long long v169 = (void **)(a9 + 56);
      if (__p != v193)
      {
        unint64_t v62 = v193 - (unsigned char *)__p - 24;
        if (v62 >= 0x60)
        {
          unint64_t v149 = v62 / 0x18 + 1;
          uint64_t v150 = v149 & 3;
          if ((v149 & 3) == 0) {
            uint64_t v150 = 4;
          }
          unint64_t v151 = v149 - v150;
          int64x2_t v64 = (char *)__p + 24 * v151;
          unint64_t v152 = (const double *)((char *)__p + 64);
          int64x2_t v153 = 0uLL;
          int64x2_t v154 = 0uLL;
          do
          {
            int v155 = v152 - 6;
            unsigned long long v156 = (unsigned __int128)vld3q_f64(v155);
            unsigned long long v157 = (unsigned __int128)vld3q_f64(v152);
            int64x2_t v153 = vaddq_s64((int64x2_t)v156, v153);
            int64x2_t v154 = vaddq_s64((int64x2_t)v157, v154);
            v152 += 12;
            v151 -= 4;
          }
          while (v151);
          unint64_t v63 = vaddvq_s64(vaddq_s64(v154, v153));
        }
        else
        {
          unint64_t v63 = 0;
          int64x2_t v64 = (char *)__p;
        }
        do
        {
          v63 += *((void *)v64 + 2);
          v64 += 24;
        }
        while (v64 != v193);
        if (v63)
        {
          if (v63 >> 61) {
            sub_1C494A220();
          }
          size_t v158 = 8 * v63;
          unint64_t v159 = operator new(8 * v63);
          bzero(v159, v158);
          uint64_t v160 = v159;
        }
        else
        {
          uint64_t v160 = 0;
        }
        do
        {
          unsigned int v161 = *(char **)v60;
          if (*(char **)v60 != v60 + 8)
          {
            do
            {
              v160[*((void *)v161 + 5)] = (*((void *)v161 + 4) >> 20) & 0xFFFFFFFFFFLL;
              int v162 = (char *)*((void *)v161 + 1);
              if (v162)
              {
                do
                {
                  uint64_t v163 = v162;
                  int v162 = *(char **)v162;
                }
                while (v162);
              }
              else
              {
                do
                {
                  uint64_t v163 = (char *)*((void *)v161 + 2);
                  BOOL v25 = *(void *)v163 == (void)v161;
                  unsigned int v161 = v163;
                }
                while (!v25);
              }
              unsigned int v161 = v163;
            }
            while (v163 != v60 + 8);
          }
          v60 += 24;
        }
        while (v60 != v61);
      }
      int64x2_t v65 = v51[4];
      unint64_t v66 = 0xCCCCCCCCCCCCCCCDLL * ((v51[5] - v65) >> 3);
      if ((unint64_t)__src <= v66)
      {
        if ((unint64_t)__src < v66) {
          v51[5] = &v65[40 * (void)__src];
        }
      }
      else
      {
        sub_1C499C97C(v167, (unint64_t)__src - v66);
      }
      uint64_t v196 = 0;
      uint64_t v195 = 0;
      uint64_t v197 = 0;
      uint64_t v67 = v185;
      uint64_t v68 = v184;
      int64x2_t v69 = v171;
      if (v185 == v184)
      {
LABEL_199:
        sub_1C4B800AC(v59, (uint64_t)&v195);
        unsigned __int8 v141 = v51;
        uint64_t v142 = v195;
        int v143 = v196;
        if (v195 != v196)
        {
          unint64_t v144 = v141 + 10;
          uint64_t v145 = v141[11];
          do
          {
            if (v145 < v141[12])
            {
              *(_OWORD *)uint64_t v145 = *v142;
              *((_OWORD *)v145 + 1) = v142[1];
              *((_OWORD *)v145 + 2) = v142[2];
              *((_OWORD *)v145 + 3) = v142[3];
              *((void *)v145 + 8) = *((void *)v142 + 8);
              v145 += 72;
            }
            else
            {
              uint64_t v145 = sub_1C499CBEC(v144, (uint64_t)v142);
            }
            unsigned __int8 v141 = (char **)a9;
            *(void *)(a9 + 88) = v145;
            uint64_t v142 = (_OWORD *)((char *)v142 + 72);
          }
          while (v142 != (_OWORD *)v143);
        }
        Network::prepareNetwork((Network *)v141);
        if (v195)
        {
          uint64_t v196 = (char *)v195;
          operator delete(v195);
        }
        if (v69)
        {
          CGFloat v211 = v69;
          operator delete(v69);
        }
        if (v53)
        {
          int v214 = v53;
          operator delete(v53);
        }
        if (v52) {
          operator delete(v52);
        }
        uint64_t v146 = (char *)__p;
        if (__p)
        {
          BOOL v147 = v193;
          if (v193 != __p)
          {
            do
            {
              uint64_t v148 = v147 - 24;
              sub_1C49A1374(*((void **)v147 - 2));
              BOOL v147 = v148;
            }
            while (v148 != v146);
          }
          operator delete(v146);
        }
        uint64_t v217 = 0;
        unint64_t v218 = 0;
        uint64_t v215 = 0;
        int v216 = &v217;
        int8x8_t v213 = (uint64_t *)&v214;
        int v214 = 0;
        operator new[]();
      }
      uint64_t v70 = 0;
      unint64_t v170 = (char *)v52;
      uint64_t v175 = v53;
      while (1)
      {
        uint16x8_t v71 = (char *)__p + 24 * v70;
        uint32x4_t v72 = (void *)*v71;
        unint64_t v166 = v71 + 1;
        if ((void *)*v71 != v71 + 1)
        {
          if (*(void *)(v68 + 40 * v70))
          {
            uint64_t v176 = v70;
            while (1)
            {
              uint64_t v168 = v72;
              if (*(void *)(v68 + 40 * v70)) {
                break;
              }
LABEL_186:
              char v136 = v168;
              __int16 v137 = (void *)v168[1];
              if (v137)
              {
                do
                {
                  uint64_t v138 = v137;
                  __int16 v137 = (void *)*v137;
                }
                while (v137);
              }
              else
              {
                do
                {
                  uint64_t v138 = (void *)v136[2];
                  BOOL v25 = *v138 == (void)v136;
                  char v136 = v138;
                }
                while (!v25);
              }
              uint32x4_t v72 = v138;
              if (v138 == v166)
              {
                uint64_t v67 = v185;
                goto LABEL_94;
              }
            }
            uint64_t v59 = 0;
            unint64_t v73 = v72[4];
LABEL_102:
            uint64_t v74 = v186 + 72 * (*(void *)(v68 + 40 * v70 + 16) + v59);
            uint64_t v75 = *(void *)(v74 + 8);
            long long v76 = *(_OWORD *)(v74 + 16);
            uint64_t v77 = *(void *)(v74 + 24);
            if (*(unsigned char *)(v68 + 40 * v75 + 32)) {
              uint64_t v78 = 0;
            }
            else {
              uint64_t v78 = (v77 & 0xFFFFF) << 20;
            }
            uint64_t v79 = (char *)__p + 24 * *(void *)v74;
            double v82 = (void *)*((void *)v79 + 1);
            int v80 = v79 + 8;
            double v81 = v82;
            uint64_t v178 = v59;
            if (!v82) {
              goto LABEL_116;
            }
            int64x2_t v83 = v80;
            do
            {
              unint64_t v84 = v81[4];
              BOOL v85 = v84 >= v73;
              if (v84 >= v73) {
                int v86 = v81;
              }
              else {
                int v86 = v81 + 1;
              }
              if (v85) {
                int64x2_t v83 = (char *)v81;
              }
              double v81 = (void *)*v86;
            }
            while (*v86);
            if (v83 != v80 && *((void *)v83 + 4) <= v73)
            {
              uint64_t v87 = *((void *)v83 + 5);
              uint64_t v113 = (char *)__p + 24 * v75;
              int8x8_t v114 = (void *)*((void *)v113 + 1);
              uint64_t v89 = v113 + 8;
              int v90 = v114;
              if (v114) {
                goto LABEL_117;
              }
            }
            else
            {
LABEL_116:
              uint64_t v87 = -1;
              BOOL v88 = (char *)__p + 24 * v75;
              uint64_t v91 = (void *)*((void *)v88 + 1);
              uint64_t v89 = v88 + 8;
              int v90 = v91;
              if (v91)
              {
LABEL_117:
                unint64_t v92 = v78 & 0xFFFFFFFFFFF00000 | v75 & 0xFFFFF;
                int v93 = v89;
                do
                {
                  unint64_t v94 = v90[4];
                  BOOL v95 = v94 >= v92;
                  if (v94 >= v92) {
                    size_t v96 = v90;
                  }
                  else {
                    size_t v96 = v90 + 1;
                  }
                  if (v95) {
                    int v93 = (char *)v90;
                  }
                  int v90 = (void *)*v96;
                }
                while (*v96);
                if (v93 != v89 && *((void *)v93 + 4) <= v92)
                {
                  unint64_t v97 = *((void *)v93 + 5);
                  long long v99 = *(_OWORD *)(v74 + 32);
                  long long v98 = *(_OWORD *)(v74 + 48);
                  uint64_t v100 = *(void *)(v74 + 64);
                  unint64_t v101 = v196;
                  BOOL v102 = v197;
                  if (v196 >= v197)
                  {
LABEL_128:
                    BOOL v103 = (char *)v195;
                    unint64_t v104 = 0x8E38E38E38E38E39 * ((v101 - (unsigned char *)v195) >> 3);
                    unint64_t v105 = v104 + 1;
                    if (v104 + 1 > 0x38E38E38E38E38ELL) {
                      sub_1C494A220();
                    }
                    unint64_t v106 = 0x8E38E38E38E38E39 * ((v102 - (unsigned char *)v195) >> 3);
                    if (2 * v106 > v105) {
                      unint64_t v105 = 2 * v106;
                    }
                    if (v106 >= 0x1C71C71C71C71C7) {
                      unint64_t v107 = 0x38E38E38E38E38ELL;
                    }
                    else {
                      unint64_t v107 = v105;
                    }
                    if (v107 > 0x38E38E38E38E38ELL) {
                      sub_1C4949AA8();
                    }
                    long long v172 = v99;
                    long long v173 = v98;
                    long long v174 = v76;
                    int v108 = (char *)operator new(72 * v107);
                    uint64_t v109 = &v108[72 * v104];
                    *(void *)uint64_t v109 = v87;
                    *((void *)v109 + 1) = v97;
                    *((_OWORD *)v109 + 1) = v174;
                    *((_OWORD *)v109 + 2) = v172;
                    *((_OWORD *)v109 + 3) = v173;
                    *((void *)v109 + 8) = v100;
                    if (v101 == v103)
                    {
                      uint64_t v112 = &v108[72 * v104];
                    }
                    else
                    {
                      uint64_t v110 = 0;
                      do
                      {
                        unint64_t v111 = &v109[v110];
                        *(_OWORD *)(v111 - 72) = *(_OWORD *)&v101[v110 - 72];
                        *(_OWORD *)(v111 - 56) = *(_OWORD *)&v101[v110 - 56];
                        *(_OWORD *)(v111 - 40) = *(_OWORD *)&v101[v110 - 40];
                        *(_OWORD *)(v111 - 24) = *(_OWORD *)&v101[v110 - 24];
                        *((void *)v111 - 1) = *(void *)&v101[v110 - 8];
                        v110 -= 72;
                      }
                      while (&v101[v110] != v103);
                      uint64_t v112 = &v109[v110];
                    }
                    uint32x4_t v52 = (char **)v170;
                    unint64_t v115 = v109 + 72;
                    uint64_t v195 = v112;
                    uint64_t v197 = &v108[72 * v107];
                    if (v103)
                    {
                      operator delete(v103);
                      uint64_t v68 = v184;
                    }
                    uint16x8_t v51 = (char **)a9;
                    int64x2_t v69 = v171;
                    uint64_t v196 = v115;
                    if (!*(unsigned char *)(v68 + 40 * v75 + 32)) {
                      goto LABEL_101;
                    }
LABEL_147:
                    char v116 = (void *)(a9 + 64);
LABEL_148:
                    unint64_t v117 = (void *)*v116;
                    uint64_t v118 = v116;
                    if (*v116)
                    {
                      do
                      {
                        char v116 = v117;
                        unint64_t v119 = v117[4];
                        if (v119 > v97) {
                          goto LABEL_148;
                        }
                        if (v119 >= v97) {
                          goto LABEL_178;
                        }
                        unint64_t v117 = (void *)v116[1];
                      }
                      while (v117);
                      uint64_t v118 = v116 + 1;
                    }
                    BOOL v120 = operator new(0x28uLL);
                    v120[4] = v97;
                    void *v120 = 0;
                    v120[1] = 0;
                    v120[2] = v116;
                    void *v118 = v120;
                    uint64_t v121 = (void *)**v169;
                    if (v121)
                    {
                      *long long v169 = v121;
                      BOOL v120 = (void *)*v118;
                    }
                    uint16x8_t v51 = (char **)a9;
                    int v122 = *v177;
                    BOOL v25 = v120 == *v177;
                    *((unsigned char *)v120 + 24) = v25;
                    if (v25) {
                      goto LABEL_177;
                    }
                    while (1)
                    {
                      uint64_t v123 = v120[2];
                      if (*(unsigned char *)(v123 + 24)) {
                        goto LABEL_177;
                      }
                      int v124 = *(unsigned char **)(v123 + 16);
                      uint64_t v125 = *(void *)v124;
                      if (*(void *)v124 == v123)
                      {
                        uint64_t v128 = *((void *)v124 + 1);
                        if (!v128 || (int v129 = *(unsigned __int8 *)(v128 + 24), v126 = (unsigned char *)(v128 + 24), v129))
                        {
                          if (*(void **)v123 == v120)
                          {
                            *(unsigned char *)(v123 + 24) = 1;
                            v124[24] = 0;
                            uint64_t v132 = *(void *)(v123 + 8);
                            *(void *)int v124 = v132;
                            if (v132) {
                              goto LABEL_170;
                            }
                          }
                          else
                          {
                            uint64_t v130 = *(uint64_t **)(v123 + 8);
                            uint64_t v131 = *v130;
                            *(void *)(v123 + 8) = *v130;
                            if (v131)
                            {
                              *(void *)(v131 + 16) = v123;
                              int v124 = *(unsigned char **)(v123 + 16);
                            }
                            v130[2] = (uint64_t)v124;
                            *(void *)(*(void *)(v123 + 16) + 8 * (**(void **)(v123 + 16) != v123)) = v130;
                            uint64_t *v130 = v123;
                            *(void *)(v123 + 16) = v130;
                            int v124 = (unsigned char *)v130[2];
                            uint64_t v123 = *(void *)v124;
                            *((unsigned char *)v130 + 24) = 1;
                            v124[24] = 0;
                            uint64_t v132 = *(void *)(v123 + 8);
                            *(void *)int v124 = v132;
                            if (v132) {
LABEL_170:
                            }
                              *(void *)(v132 + 16) = v124;
                          }
                          *(void *)(v123 + 16) = *((void *)v124 + 2);
                          *(void *)(*((void *)v124 + 2) + 8 * (**((void **)v124 + 2) != (void)v124)) = v123;
                          *(void *)(v123 + 8) = v124;
LABEL_176:
                          *((void *)v124 + 2) = v123;
LABEL_177:
                          ++*(void *)(a9 + 72);
                          uint32x4_t v52 = (char **)v170;
                          int64x2_t v69 = v171;
LABEL_178:
                          uint64_t v134 = v51[4];
                          if (0xCCCCCCCCCCCCCCCDLL * ((v51[5] - v134) >> 3) >= v97) {
                            v134[40 * v97 + 32] = 1;
                          }
LABEL_101:
                          uint64_t v59 = v178 + 1;
                          uint64_t v68 = v184;
                          int64x2_t v53 = v175;
                          uint64_t v70 = v176;
                          if (*(void *)(v184 + 40 * v176) <= (unint64_t)(v178 + 1)) {
                            goto LABEL_186;
                          }
                          goto LABEL_102;
                        }
                      }
                      else if (!v125 || (int v127 = *(unsigned __int8 *)(v125 + 24), v126 = (unsigned char *)(v125 + 24), v127))
                      {
                        if (*(void **)v123 == v120)
                        {
                          uint64_t v135 = v120[1];
                          *(void *)uint64_t v123 = v135;
                          if (v135)
                          {
                            *(void *)(v135 + 16) = v123;
                            int v124 = *(unsigned char **)(v123 + 16);
                          }
                          v120[2] = v124;
                          *(void *)(*(void *)(v123 + 16) + 8 * (**(void **)(v123 + 16) != v123)) = v120;
                          v120[1] = v123;
                          *(void *)(v123 + 16) = v120;
                          int v124 = (unsigned char *)v120[2];
                          *((unsigned char *)v120 + 24) = 1;
                          v124[24] = 0;
                          uint64_t v123 = *((void *)v124 + 1);
                          unsigned __int8 v133 = *(void **)v123;
                          *((void *)v124 + 1) = *(void *)v123;
                          if (v133) {
LABEL_174:
                          }
                            v133[2] = v124;
                        }
                        else
                        {
                          *(unsigned char *)(v123 + 24) = 1;
                          v124[24] = 0;
                          uint64_t v123 = *((void *)v124 + 1);
                          unsigned __int8 v133 = *(void **)v123;
                          *((void *)v124 + 1) = *(void *)v123;
                          if (v133) {
                            goto LABEL_174;
                          }
                        }
                        *(void *)(v123 + 16) = *((void *)v124 + 2);
                        *(void *)(*((void *)v124 + 2) + 8 * (**((void **)v124 + 2) != (void)v124)) = v123;
                        *(void *)uint64_t v123 = v124;
                        goto LABEL_176;
                      }
                      *(unsigned char *)(v123 + 24) = 1;
                      BOOL v120 = v124;
                      v124[24] = v124 == (unsigned char *)v122;
                      unsigned char *v126 = 1;
                      if (v124 == (unsigned char *)v122) {
                        goto LABEL_177;
                      }
                    }
                  }
LABEL_141:
                  *(void *)unint64_t v101 = v87;
                  *((void *)v101 + 1) = v97;
                  *((void *)v101 + 2) = v76;
                  *((void *)v101 + 3) = v77;
                  *((_OWORD *)v101 + 2) = v99;
                  *((_OWORD *)v101 + 3) = v98;
                  *((void *)v101 + 8) = v100;
                  uint64_t v196 = v101 + 72;
                  if (!*(unsigned char *)(v68 + 40 * v75 + 32)) {
                    goto LABEL_101;
                  }
                  goto LABEL_147;
                }
              }
            }
            unint64_t v97 = -1;
            long long v99 = *(_OWORD *)(v74 + 32);
            long long v98 = *(_OWORD *)(v74 + 48);
            uint64_t v100 = *(void *)(v74 + 64);
            unint64_t v101 = v196;
            BOOL v102 = v197;
            if (v196 >= v197) {
              goto LABEL_128;
            }
            goto LABEL_141;
          }
          do
          {
            uint64_t v139 = (void *)v72[1];
            if (v139)
            {
              do
              {
                size_t v140 = v139;
                uint64_t v139 = (void *)*v139;
              }
              while (v139);
            }
            else
            {
              do
              {
                size_t v140 = (void *)v72[2];
                BOOL v25 = *v140 == (void)v72;
                uint32x4_t v72 = v140;
              }
              while (!v25);
            }
            uint32x4_t v72 = v140;
          }
          while (v140 != v166);
        }
LABEL_94:
        if (0xCCCCCCCCCCCCCCCDLL * ((v67 - v68) >> 3) <= ++v70) {
          goto LABEL_199;
        }
      }
    }
    do
    {
      while (1)
      {
        uint32x4_t v55 = (uint64_t **)v44;
        unint64_t v56 = v44[4];
        if (v42 >= v56) {
          break;
        }
        int64x2_t v44 = *v55;
        int64x2_t v45 = v55;
        if (!*v55) {
          goto LABEL_79;
        }
      }
      if (v56 >= v42) {
        goto LABEL_82;
      }
      int64x2_t v44 = v55[1];
    }
    while (v44);
    int64x2_t v45 = v55 + 1;
  }
  else
  {
    uint32x4_t v55 = (uint64_t **)(v43 + 8);
  }
LABEL_79:
  uint16x8_t v57 = (uint64_t *)operator new(0x30uLL);
  v57[4] = v42;
  v57[5] = 0;
  uint64_t *v57 = 0;
  v57[1] = 0;
  v57[2] = (uint64_t)v55;
  *int64x2_t v45 = v57;
  uint64_t v58 = **(void **)v43;
  if (v58)
  {
    *(void *)uint32x4_t v43 = v58;
    uint16x8_t v57 = *v45;
  }
  sub_1C4949FD4(*((uint64_t **)v43 + 1), v57);
  ++*((void *)v43 + 2);
  uint64_t v35 = v185;
  uint64_t v36 = v184;
  unint64_t v37 = 0xCCCCCCCCCCCCCCCDLL * ((v185 - v184) >> 3);
LABEL_82:
  __src = (void *)1;
  uint16x8_t v51 = (char **)a9;
  int v216 = 0;
  uint64_t v217 = 0;
  unint64_t v218 = 0;
  if (v35 != v36) {
    goto LABEL_71;
  }
  goto LABEL_83;
}

void sub_1C4B87ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_1C4999C7C(v52, (void *)STACK[0x520]);
  sub_1C4999CD0(v51, (void *)STACK[0x508]);
  sub_1C4999BE4(v50);
  int64x2_t v54 = (void *)STACK[0x4A8];
  if (STACK[0x4A8])
  {
    STACK[0x4B0] = (unint64_t)v54;
    operator delete(v54);
    uint32x4_t v55 = (void *)STACK[0x490];
    if (!STACK[0x490])
    {
LABEL_3:
      sub_1C4999C7C(v49 + 56, (void *)STACK[0x480]);
      unint64_t v56 = (void *)STACK[0x460];
      if (!STACK[0x460]) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint32x4_t v55 = (void *)STACK[0x490];
    if (!STACK[0x490]) {
      goto LABEL_3;
    }
  }
  STACK[0x498] = (unint64_t)v55;
  operator delete(v55);
  sub_1C4999C7C(v49 + 56, (void *)STACK[0x480]);
  unint64_t v56 = (void *)STACK[0x460];
  if (!STACK[0x460])
  {
LABEL_4:
    if ((SLOBYTE(STACK[0x457]) & 0x80000000) == 0)
    {
LABEL_11:
      uint16x8_t v57 = a25;
      if (!a25) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
LABEL_9:
    operator delete((void *)STACK[0x440]);
    uint16x8_t v57 = a25;
    if (!a25)
    {
LABEL_13:
      sub_1C4949DD4((uint64_t)&a46, (char *)a47);
      sub_1C4999ABC((uint64_t)&a49);
      sub_1C4999ABC((uint64_t)&STACK[0x240]);
      _Unwind_Resume(a1);
    }
LABEL_12:
    operator delete(v57);
    goto LABEL_13;
  }
LABEL_8:
  STACK[0x468] = (unint64_t)v56;
  operator delete(v56);
  if ((SLOBYTE(STACK[0x457]) & 0x80000000) == 0) {
    goto LABEL_11;
  }
  goto LABEL_9;
}

void sub_1C4B87E44()
{
  if (v1)
  {
    operator delete(v1);
    uint64_t v0 = *(void *)(v2 - 240);
  }
  if (v0)
  {
    *(void *)(v2 - 232) = v0;
    JUMPOUT(0x1C4B87EECLL);
  }
  JUMPOUT(0x1C4B87EF0);
}

void sub_1C4B87E84()
{
}

void sub_1C4B87E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (SLOBYTE(STACK[0x577]) < 0)
  {
    operator delete((void *)STACK[0x560]);
    if ((SLOBYTE(STACK[0x597]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x597]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  operator delete((void *)STACK[0x580]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x457]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
LABEL_9:
    operator delete((void *)STACK[0x440]);
LABEL_10:
    sub_1C4999C7C(v25 - 216, *(void **)(v25 - 208));
    sub_1C4999C7C(v25 - 192, *(void **)(v25 - 184));
    if (!a25) {
      JUMPOUT(0x1C4B87E20);
    }
    JUMPOUT(0x1C4B87E18);
  }
LABEL_8:
  if ((SLOBYTE(STACK[0x457]) & 0x80000000) == 0) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void sub_1C4B87F10()
{
}

BOOL Network::pathsCoincide(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = (void *)a2[7];
  unint64_t v4 = (uint64_t)(a2[8] - (void)v3) >> 3;
  uint64_t v5 = (void *)a3[7];
  if ((uint64_t)(a3[8] - (void)v5) >> 3 < v4) {
    unint64_t v4 = (uint64_t)(a3[8] - (void)v5) >> 3;
  }
  if (!v4) {
    return 1;
  }
  if (*v3 != *v5) {
    return 0;
  }
  double v6 = (void *)a2[10];
  unint64_t v7 = (void *)a3[10];
  if (*v6 != *v7) {
    return 0;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v4 == v8) {
      break;
    }
    if (v3[v8] != v5[v8]) {
      break;
    }
    uint64_t v10 = v6[v8];
    uint64_t v11 = v7[v8++];
  }
  while (v10 == v11);
  return v9 >= v4;
}

void Network::bestPath(Network *this)
{
  uint64_t v1 = *((void *)this + 5) - *((void *)this + 4);
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * (v1 >> 3);
  if (v1)
  {
    if (v2 >> 59) {
      sub_1C494A220();
    }
    uint64_t v3 = operator new(0x99999999999999A0 * (v1 >> 3));
    unint64_t v4 = v3;
    do
    {
      *unint64_t v4 = 0;
      v4[1] = 0x41CFFFFFFFC00000;
      v4[2] = -1;
      v4[3] = -1;
      v4 += 4;
    }
    while (v4 != &v3[4 * v2]);
  }
  operator new[]();
}

void sub_1C4B889D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_1C49A0984(a11);
  if (v13)
  {
    MEMORY[0x1C8786430](v12, 0x1020C805730B0C9);
    if (!v11) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if (!v11)
  {
    goto LABEL_3;
  }
  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_1C4B88A40(void **a1, unsigned char *a2, char *a3)
{
  uint64_t v3 = a3;
  unint64_t v6 = (unint64_t)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 >> 3;
  unint64_t v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)unint64_t v9 = *(void *)a3;
      a1[1] = v9 + 8;
      return;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    uint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      unint64_t v17 = a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      unint64_t v15 = v14 + v6 + 8;
      if (v5 > v15) {
        unint64_t v15 = (unint64_t)a1[1];
      }
      unint64_t v16 = v15 + ~v6 - v14;
      if (v16 >= 0x58)
      {
        unint64_t v17 = a1[1];
        if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFF8) + 8 - v6] >= 0x20)
        {
          uint64_t v39 = (v16 >> 3) + 1;
          uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v13 = (uint64_t *)((char *)v13 + v40);
          unint64_t v17 = (void *)(v5 + v40);
          int64x2_t v41 = (_OWORD *)(v5 + 16);
          unint64_t v42 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v44 = *v42;
            *(v41 - 1) = *(v42 - 1);
            _OWORD *v41 = v44;
            v41 += 2;
            v42 += 2;
            v43 -= 4;
          }
          while (v43);
          if (v39 == (v39 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_49;
          }
        }
      }
      else
      {
        unint64_t v17 = a1[1];
      }
      do
      {
        uint64_t v45 = *v13++;
        *v17++ = v45;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_49:
    a1[1] = v17;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    if (v9 <= v3) {
      v3 += 8 * (a1[1] > v3);
    }
    *(void *)unint64_t v9 = *(void *)v3;
    return;
  }
  unint64_t v18 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v18 >> 61) {
    sub_1C494A220();
  }
  uint64_t v20 = v10 - v6;
  if (v20 >> 2 > v18) {
    unint64_t v18 = v20 >> 2;
  }
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v21 = v18;
  }
  if (v21)
  {
    if (v21 >> 61) {
      sub_1C4949AA8();
    }
    int64x2_t v22 = (char *)operator new(8 * v21);
    int64x2_t v23 = &v22[8 * v8];
    int64x2_t v24 = &v22[8 * v21];
    if (v8 != v21) {
      goto LABEL_24;
    }
  }
  else
  {
    int64x2_t v22 = 0;
    int64x2_t v23 = (char *)(8 * v8);
    int64x2_t v24 = 0;
    if (v8) {
      goto LABEL_24;
    }
  }
  if (v7 < 1)
  {
    if ((unsigned char *)v6 == a2) {
      unint64_t v37 = 1;
    }
    else {
      unint64_t v37 = v7 >> 2;
    }
    if (v37 >> 61) {
      sub_1C4949AA8();
    }
    int64x2_t v23 = (char *)operator new(8 * v37);
    int64x2_t v24 = &v23[8 * v37];
    if (v22)
    {
      operator delete(v22);
      int64x2_t v24 = &v23[8 * v37];
      int64x2_t v26 = (char *)*a1;
      *(void *)int64x2_t v23 = *(void *)v3;
      int64x2_t v27 = v23 + 8;
      if (v26 != v9) {
        goto LABEL_25;
      }
      goto LABEL_42;
    }
  }
  else
  {
    unint64_t v25 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v25 = v8 + 1;
    }
    v23 -= 8 * (v25 >> 1);
  }
LABEL_24:
  int64x2_t v26 = (char *)v6;
  *(void *)int64x2_t v23 = *(void *)v3;
  int64x2_t v27 = v23 + 8;
  if ((char *)v6 != v9)
  {
LABEL_25:
    int64x2_t v28 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v29 = v28 - v26 - 8;
    if (v29 >= 0x58 && (unint64_t)(v28 - v23) >= 0x20)
    {
      uint64_t v46 = (v29 >> 3) + 1;
      uint64_t v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
      int64x2_t v30 = &v9[-v47];
      uint64_t v31 = &v23[-v47];
      unint64_t v48 = v23 - 16;
      uint64_t v49 = (long long *)(v6 + 8 * v8 - 16);
      uint64_t v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v51 = *v49;
        *((_OWORD *)v48 - 1) = *(v49 - 1);
        *(_OWORD *)unint64_t v48 = v51;
        v48 -= 32;
        v49 -= 2;
        v50 -= 4;
      }
      while (v50);
      if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        unint64_t v33 = (char *)a1[1];
        size_t v34 = v33 - v9;
        if (v33 == v9) {
          goto LABEL_31;
        }
        goto LABEL_30;
      }
    }
    else
    {
      int64x2_t v30 = v9;
      uint64_t v31 = v23;
    }
    do
    {
      uint64_t v32 = *((void *)v30 - 1);
      v30 -= 8;
      *((void *)v31 - 1) = v32;
      v31 -= 8;
    }
    while (v30 != v26);
    goto LABEL_29;
  }
LABEL_42:
  uint64_t v31 = v23;
  uint64_t v38 = (char *)a1[1];
  size_t v34 = v38 - v9;
  if (v38 != v9)
  {
LABEL_30:
    uint64_t v35 = v9;
    uint64_t v36 = v24;
    memmove(v27, v35, v34);
    int64x2_t v24 = v36;
    int64x2_t v26 = (char *)*a1;
  }
LABEL_31:
  *a1 = v31;
  a1[1] = &v27[v34];
  a1[2] = v24;
  if (v26)
  {
    operator delete(v26);
  }
}

void sub_1C4B88DD0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *Network::getTotalNumberOfSegments(Network *this, unint64_t a2, uint64_t *a3)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  int v90 = 0;
  uint64_t v91 = 0;
  unint64_t v5 = &v90;
  uint64_t v88 = 0;
  uint64_t v89 = &v90;
  int v86 = &v86;
  long long __p = &v86;
  unint64_t v6 = (uint64_t **)operator new(0x30uLL);
  *unint64_t v6 = 0;
  v6[1] = 0;
  unint64_t v6[2] = (uint64_t *)&v90;
  uint64_t v89 = v6;
  int v90 = (uint64_t *)v6;
  *((unsigned char *)v6 + 24) = 1;
  uint64_t v91 = 1;
  v6[4] = a3;
  v6[5] = 0;
  uint64_t v7 = operator new(0x18uLL);
  int64x2_t v83 = a3;
  v7[1] = &v86;
  v7[2] = a3;
  void *v7 = &v86;
  int v86 = v7;
  long long __p = v7;
  uint64_t v8 = 1;
  uint64_t v88 = 1;
  BOOL v85 = this;
  do
  {
    unint64_t v9 = (void **)__p;
    unint64_t v10 = *((void *)__p + 2);
    uint64_t v11 = *(void *)__p;
    *(void *)(v11 + 8) = *((void *)__p + 1);
    *v9[1] = v11;
    uint64_t v88 = v8 - 1;
    operator delete(v9);
    BOOL v12 = v10 == a2 || v10 == 0;
    if (!v12)
    {
      uint64_t v13 = *((void *)this + 4);
      if (*(void *)(v13 + 40 * v10 + 8))
      {
        unint64_t v14 = 0;
        do
        {
          unint64_t v15 = *(unint64_t **)(*((void *)this + 13) + 8 * (*(void *)(v13 + 40 * v10 + 24) + v14));
          uint64_t v16 = v15[6];
          unint64_t v17 = v90;
          unint64_t v18 = &v90;
          unint64_t v19 = &v90;
          if (!v90) {
            goto LABEL_21;
          }
          uint64_t v20 = v90;
          do
          {
            while (1)
            {
              unint64_t v19 = (uint64_t **)v20;
              unint64_t v21 = v20[4];
              if (v10 >= v21) {
                break;
              }
              uint64_t v20 = *v19;
              unint64_t v18 = v19;
              if (!*v19) {
                goto LABEL_21;
              }
            }
            if (v21 >= v10)
            {
              v16 += (uint64_t)v19[5];
              unint64_t v34 = *v15;
              goto LABEL_47;
            }
            uint64_t v20 = v19[1];
          }
          while (v20);
          unint64_t v18 = v19 + 1;
LABEL_21:
          int64x2_t v22 = (uint64_t *)operator new(0x30uLL);
          v22[4] = v10;
          v22[5] = 0;
          *int64x2_t v22 = 0;
          v22[1] = 0;
          v22[2] = (uint64_t)v19;
          *unint64_t v18 = v22;
          if (*v89)
          {
            uint64_t v89 = (uint64_t **)*v89;
            int64x2_t v22 = *v18;
          }
          int64x2_t v23 = v90;
          BOOL v12 = v22 == v90;
          *((unsigned char *)v22 + 24) = v22 == v90;
          if (!v12)
          {
            do
            {
              uint64_t v24 = v22[2];
              if (*(unsigned char *)(v24 + 24)) {
                break;
              }
              unint64_t v25 = *(uint64_t **)(v24 + 16);
              uint64_t v26 = *v25;
              if (*v25 == v24)
              {
                uint64_t v29 = v25[1];
                if (!v29 || (v30 = *(unsigned __int8 *)(v29 + 24), int64x2_t v27 = (unsigned char *)(v29 + 24), v30))
                {
                  if (*(uint64_t **)v24 == v22)
                  {
                    *(unsigned char *)(v24 + 24) = 1;
                    *((unsigned char *)v25 + 24) = 0;
                    uint64_t v33 = *(void *)(v24 + 8);
                    *unint64_t v25 = v33;
                    if (v33) {
                      goto LABEL_38;
                    }
                  }
                  else
                  {
                    uint64_t v31 = *(uint64_t **)(v24 + 8);
                    uint64_t v32 = *v31;
                    *(void *)(v24 + 8) = *v31;
                    if (v32)
                    {
                      *(void *)(v32 + 16) = v24;
                      unint64_t v25 = *(uint64_t **)(v24 + 16);
                    }
                    v31[2] = (uint64_t)v25;
                    *(void *)(*(void *)(v24 + 16) + 8 * (**(void **)(v24 + 16) != v24)) = v31;
                    *uint64_t v31 = v24;
                    *(void *)(v24 + 16) = v31;
                    unint64_t v25 = (uint64_t *)v31[2];
                    uint64_t v24 = *v25;
                    *((unsigned char *)v31 + 24) = 1;
                    *((unsigned char *)v25 + 24) = 0;
                    uint64_t v33 = *(void *)(v24 + 8);
                    *unint64_t v25 = v33;
                    if (v33) {
LABEL_38:
                    }
                      *(void *)(v33 + 16) = v25;
                  }
                  *(void *)(v24 + 16) = v25[2];
                  *(void *)(v25[2] + 8 * (*(void *)v25[2] != (void)v25)) = v24;
                  *(void *)(v24 + 8) = v25;
LABEL_45:
                  v25[2] = v24;
                  break;
                }
              }
              else if (!v26 || (v28 = *(unsigned __int8 *)(v26 + 24), int64x2_t v27 = (unsigned char *)(v26 + 24), v28))
              {
                if (*(uint64_t **)v24 == v22)
                {
                  uint64_t v61 = v22[1];
                  *(void *)uint64_t v24 = v61;
                  if (v61)
                  {
                    *(void *)(v61 + 16) = v24;
                    unint64_t v25 = *(uint64_t **)(v24 + 16);
                  }
                  v22[2] = (uint64_t)v25;
                  *(void *)(*(void *)(v24 + 16) + 8 * (**(void **)(v24 + 16) != v24)) = v22;
                  v22[1] = v24;
                  *(void *)(v24 + 16) = v22;
                  unint64_t v25 = (uint64_t *)v22[2];
                  *((unsigned char *)v22 + 24) = 1;
                  *((unsigned char *)v25 + 24) = 0;
                  uint64_t v24 = v25[1];
                  uint64_t v35 = *(uint64_t **)v24;
                  v25[1] = *(void *)v24;
                  if (v35) {
LABEL_43:
                  }
                    v35[2] = (uint64_t)v25;
                }
                else
                {
                  *(unsigned char *)(v24 + 24) = 1;
                  *((unsigned char *)v25 + 24) = 0;
                  uint64_t v24 = v25[1];
                  uint64_t v35 = *(uint64_t **)v24;
                  v25[1] = *(void *)v24;
                  if (v35) {
                    goto LABEL_43;
                  }
                }
                *(void *)(v24 + 16) = v25[2];
                *(void *)(v25[2] + 8 * (*(void *)v25[2] != (void)v25)) = v24;
                *(void *)uint64_t v24 = v25;
                goto LABEL_45;
              }
              *(unsigned char *)(v24 + 24) = 1;
              int64x2_t v22 = v25;
              *((unsigned char *)v25 + 24) = v25 == v23;
              *int64x2_t v27 = 1;
            }
            while (v25 != v23);
          }
          unint64_t v17 = v90;
          ++v91;
          unint64_t v34 = *v15;
          uint64_t v36 = &v90;
          unint64_t v37 = &v90;
          if (v90)
          {
LABEL_47:
            uint64_t v38 = v17;
            while (1)
            {
              unint64_t v39 = v38[4];
              if (v34 >= v39)
              {
                if (v39 >= v34)
                {
                  do
                  {
                    while (1)
                    {
                      uint64_t v46 = v17;
                      unint64_t v47 = v17[4];
                      if (v34 < v47) {
                        break;
                      }
                      if (v47 >= v34)
                      {
                        if (v46[5] == v16) {
                          goto LABEL_13;
                        }
                        goto LABEL_104;
                      }
                      unint64_t v17 = (uint64_t *)v46[1];
                      if (!v17)
                      {
                        unint64_t v48 = (uint64_t **)(v46 + 1);
                        goto LABEL_68;
                      }
                    }
                    unint64_t v17 = (uint64_t *)*v46;
                  }
                  while (*v46);
                  unint64_t v48 = (uint64_t **)v46;
LABEL_68:
                  uint64_t v49 = (uint64_t *)operator new(0x30uLL);
                  v49[4] = v34;
                  v49[5] = 0;
                  *uint64_t v49 = 0;
                  v49[1] = 0;
                  v49[2] = (uint64_t)v46;
                  *unint64_t v48 = v49;
                  if (*v89)
                  {
                    uint64_t v89 = (uint64_t **)*v89;
                    uint64_t v49 = *v48;
                  }
                  uint64_t v50 = v90;
                  BOOL v12 = v49 == v90;
                  *((unsigned char *)v49 + 24) = v49 == v90;
                  if (!v12)
                  {
                    do
                    {
                      uint64_t v51 = v49[2];
                      if (*(unsigned char *)(v51 + 24)) {
                        break;
                      }
                      uint64_t v52 = *(uint64_t **)(v51 + 16);
                      uint64_t v53 = *v52;
                      if (*v52 == v51)
                      {
                        uint64_t v56 = v52[1];
                        if (!v56 || (v57 = *(unsigned __int8 *)(v56 + 24), int64x2_t v54 = (unsigned char *)(v56 + 24), v57))
                        {
                          if (*(uint64_t **)v51 == v49)
                          {
                            *(unsigned char *)(v51 + 24) = 1;
                            *((unsigned char *)v52 + 24) = 0;
                            uint64_t v60 = *(void *)(v51 + 8);
                            *uint64_t v52 = v60;
                            if (v60) {
                              goto LABEL_85;
                            }
                          }
                          else
                          {
                            uint64_t v58 = *(uint64_t **)(v51 + 8);
                            uint64_t v59 = *v58;
                            *(void *)(v51 + 8) = *v58;
                            if (v59)
                            {
                              *(void *)(v59 + 16) = v51;
                              uint64_t v52 = *(uint64_t **)(v51 + 16);
                            }
                            v58[2] = (uint64_t)v52;
                            *(void *)(*(void *)(v51 + 16) + 8 * (**(void **)(v51 + 16) != v51)) = v58;
                            *uint64_t v58 = v51;
                            *(void *)(v51 + 16) = v58;
                            uint64_t v52 = (uint64_t *)v58[2];
                            uint64_t v51 = *v52;
                            *((unsigned char *)v58 + 24) = 1;
                            *((unsigned char *)v52 + 24) = 0;
                            uint64_t v60 = *(void *)(v51 + 8);
                            *uint64_t v52 = v60;
                            if (v60) {
LABEL_85:
                            }
                              *(void *)(v60 + 16) = v52;
                          }
                          *(void *)(v51 + 16) = v52[2];
                          *(void *)(v52[2] + 8 * (*(void *)v52[2] != (void)v52)) = v51;
                          *(void *)(v51 + 8) = v52;
LABEL_11:
                          v52[2] = v51;
                          break;
                        }
                      }
                      else if (!v53 || (v55 = *(unsigned __int8 *)(v53 + 24), int64x2_t v54 = (unsigned char *)(v53 + 24), v55))
                      {
                        if (*(uint64_t **)v51 == v49)
                        {
                          uint64_t v63 = v49[1];
                          *(void *)uint64_t v51 = v63;
                          if (v63)
                          {
                            *(void *)(v63 + 16) = v51;
                            uint64_t v52 = *(uint64_t **)(v51 + 16);
                          }
                          v49[2] = (uint64_t)v52;
                          *(void *)(*(void *)(v51 + 16) + 8 * (**(void **)(v51 + 16) != v51)) = v49;
                          v49[1] = v51;
                          *(void *)(v51 + 16) = v49;
                          uint64_t v52 = (uint64_t *)v49[2];
                          *((unsigned char *)v49 + 24) = 1;
                          *((unsigned char *)v52 + 24) = 0;
                          uint64_t v51 = v52[1];
                          unint64_t v62 = *(uint64_t **)v51;
                          v52[1] = *(void *)v51;
                          if (!v62) {
                            goto LABEL_10;
                          }
                        }
                        else
                        {
                          *(unsigned char *)(v51 + 24) = 1;
                          *((unsigned char *)v52 + 24) = 0;
                          uint64_t v51 = v52[1];
                          unint64_t v62 = *(uint64_t **)v51;
                          v52[1] = *(void *)v51;
                          if (!v62) {
                            goto LABEL_10;
                          }
                        }
                        uint64_t v62[2] = (uint64_t)v52;
LABEL_10:
                        *(void *)(v51 + 16) = v52[2];
                        *(void *)(v52[2] + 8 * (*(void *)v52[2] != (void)v52)) = v51;
                        *(void *)uint64_t v51 = v52;
                        goto LABEL_11;
                      }
                      *(unsigned char *)(v51 + 24) = 1;
                      uint64_t v49 = v52;
                      *((unsigned char *)v52 + 24) = v52 == v50;
                      *int64x2_t v54 = 1;
                    }
                    while (v52 != v50);
                  }
                  ++v91;
                  if (!v16) {
                    goto LABEL_13;
                  }
LABEL_104:
                  if (qword_1EA3CA000 != -1) {
                    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
                  }
                  int64x2_t v64 = (id)qword_1EA3C9F98;
                  if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
                  {
                    unint64_t v65 = *v15;
                    unint64_t v66 = v90;
                    uint64_t v67 = &v90;
                    if (v90)
                    {
                      while (1)
                      {
                        while (1)
                        {
                          uint64_t v67 = (uint64_t **)v66;
                          unint64_t v68 = v66[4];
                          if (v65 >= v68) {
                            break;
                          }
                          unint64_t v66 = *v67;
                          unint64_t v5 = v67;
                          if (!*v67) {
                            goto LABEL_114;
                          }
                        }
                        if (v68 >= v65) {
                          break;
                        }
                        unint64_t v66 = v67[1];
                        if (!v66)
                        {
                          unint64_t v5 = v67 + 1;
                          goto LABEL_114;
                        }
                      }
                      int64x2_t v69 = (uint64_t *)v67;
                    }
                    else
                    {
LABEL_114:
                      int64x2_t v69 = (uint64_t *)operator new(0x30uLL);
                      v69[4] = v65;
                      v69[5] = 0;
                      *int64x2_t v69 = 0;
                      v69[1] = 0;
                      uint64_t v69[2] = (uint64_t)v67;
                      *unint64_t v5 = v69;
                      uint64_t v70 = v69;
                      if (*v89)
                      {
                        uint64_t v89 = (uint64_t **)*v89;
                        uint64_t v70 = *v5;
                      }
                      sub_1C4949FD4(v90, v70);
                      ++v91;
                    }
                    uint64_t v77 = v69[5];
                    *(_DWORD *)long long buf = 134218752;
                    unint64_t v93 = v65;
                    __int16 v94 = 2048;
                    BOOL v95 = v83;
                    __int16 v96 = 2048;
                    uint64_t v97 = v77;
                    __int16 v98 = 2048;
                    uint64_t v99 = v16;
                    _os_log_impl(&dword_1C492D000, v64, OS_LOG_TYPE_ERROR, "found paths with incompatible number of segments covered from %zu to %zu: previous value %lu, value for new path %zu \n", buf, 0x2Au);
                  }

                  long long v76 = 0;
                  if (!v88) {
                    goto LABEL_134;
                  }
LABEL_132:
                  uint64_t v79 = v86;
                  uint64_t v78 = __p;
                  uint64_t v80 = *(void *)__p;
                  *(void *)(v80 + 8) = v86[1];
                  *(void *)v79[1] = v80;
                  uint64_t v88 = 0;
                  if (v78 != &v86)
                  {
                    do
                    {
                      double v81 = (void *)v78[1];
                      operator delete(v78);
                      uint64_t v78 = v81;
                    }
                    while (v81 != &v86);
                  }
                  goto LABEL_134;
                }
                ++v38;
              }
              uint64_t v38 = (uint64_t *)*v38;
              if (!v38)
              {
                while (1)
                {
                  while (1)
                  {
                    unint64_t v37 = (uint64_t **)v17;
                    unint64_t v40 = v17[4];
                    if (v34 >= v40) {
                      break;
                    }
                    unint64_t v17 = *v37;
                    uint64_t v36 = v37;
                    if (!*v37) {
                      goto LABEL_57;
                    }
                  }
                  if (v40 >= v34) {
                    break;
                  }
                  unint64_t v17 = v37[1];
                  if (!v17)
                  {
                    uint64_t v36 = v37 + 1;
                    goto LABEL_57;
                  }
                }
                int64x2_t v41 = (uint64_t *)v37;
                goto LABEL_60;
              }
            }
          }
LABEL_57:
          int64x2_t v41 = (uint64_t *)operator new(0x30uLL);
          v41[4] = v34;
          v41[5] = 0;
          uint64_t *v41 = 0;
          v41[1] = 0;
          v41[2] = (uint64_t)v37;
          char *v36 = v41;
          unint64_t v42 = v41;
          if (*v89)
          {
            uint64_t v89 = (uint64_t **)*v89;
            unint64_t v42 = *v36;
          }
          sub_1C4949FD4(v90, v42);
          ++v91;
LABEL_60:
          v41[5] = v16;
          uint64_t v43 = operator new(0x18uLL);
          unint64_t v44 = *v15;
          uint64_t v45 = v86;
          v43[1] = &v86;
          v43[2] = v44;
          void *v43 = v45;
          v45[1] = v43;
          int v86 = v43;
          ++v88;
LABEL_13:
          ++v14;
          this = v85;
          uint64_t v13 = *((void *)v85 + 4);
        }
        while (v14 < *(void *)(v13 + 40 * v10 + 8));
      }
    }
    uint64_t v8 = v88;
  }
  while (v88);
  uint16x8_t v71 = v90;
  uint32x4_t v72 = &v90;
  if (v90)
  {
    while (1)
    {
      while (1)
      {
        uint32x4_t v72 = (uint64_t **)v71;
        unint64_t v73 = v71[4];
        if (v73 <= a2) {
          break;
        }
        uint16x8_t v71 = *v72;
        unint64_t v5 = v72;
        if (!*v72) {
          goto LABEL_124;
        }
      }
      if (v73 >= a2) {
        break;
      }
      uint16x8_t v71 = v72[1];
      if (!v71)
      {
        unint64_t v5 = v72 + 1;
        goto LABEL_124;
      }
    }
    long long v76 = v72[5];
  }
  else
  {
LABEL_124:
    uint64_t v74 = (uint64_t *)operator new(0x30uLL);
    v74[4] = a2;
    v74[5] = 0;
    uint64_t *v74 = 0;
    v74[1] = 0;
    v74[2] = (uint64_t)v72;
    *unint64_t v5 = v74;
    uint64_t v75 = v74;
    if (*v89)
    {
      uint64_t v89 = (uint64_t **)*v89;
      uint64_t v75 = *v5;
    }
    sub_1C4949FD4(v90, v75);
    ++v91;
    long long v76 = (uint64_t *)v74[5];
    if (v88) {
      goto LABEL_132;
    }
  }
LABEL_134:
  sub_1C4999C7C((uint64_t)&v89, v90);
  return v76;
}

void sub_1C4B89734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17)
{
  sub_1C4AAE650(&a13);
  sub_1C4999C7C((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void Network::kBestPaths(uint64_t a1@<X0>, void *a2@<X2>, void *a3@<X8>, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  a4;
  a5;
  BOOL v85 = a9;
  a10;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  uint64_t v89 = 0;
  int v90 = (void **)&v91;
  uint64_t v87 = &v87;
  long long __p = &v87;
  BOOL v12 = operator new(0x18uLL);
  v12[1] = &v87;
  v12[2] = a2;
  *BOOL v12 = &v87;
  uint64_t v87 = v12;
  long long __p = v12;
  uint64_t v89 = 1;
  uint64_t v13 = (void **)operator new(0x30uLL);
  *uint64_t v13 = 0;
  v13[1] = 0;
  v13[2] = &v91;
  int v90 = v13;
  uint64_t v91 = (double *)v13;
  *((unsigned char *)v13 + 24) = 1;
  void v13[4] = a2;
  v13[5] = 0;
  uint64_t v14 = 1;
  uint64_t v92 = 1;
LABEL_3:
  unint64_t v15 = (void **)__p;
  unint64_t v16 = *((void *)__p + 2);
  uint64_t v17 = *(void *)__p;
  *(void *)(v17 + 8) = *((void *)__p + 1);
  *v15[1] = v17;
  uint64_t v89 = v14 - 1;
  operator delete(v15);
  uint64_t v18 = a1;
  uint64_t v19 = *(void *)(a1 + 32);
  if (!*(void *)(v19 + 40 * v16 + 8)) {
    goto LABEL_2;
  }
  unint64_t v20 = 0;
LABEL_6:
  unint64_t v21 = *(unint64_t **)(*(void *)(v18 + 104) + 8 * (*(void *)(v19 + 40 * v16 + 24) + v20));
  int64x2_t v22 = (void **)v91;
  for (i = (void **)&v91; ; int64x2_t v22 = (void **)*i)
  {
    uint64_t v24 = i;
    if (!v22) {
      break;
    }
    while (1)
    {
      uint64_t i = v22;
      unint64_t v25 = v22[4];
      if (v16 < (unint64_t)v25) {
        break;
      }
      if ((unint64_t)v25 >= v16)
      {
        double v39 = *((double *)i + 5);
        goto LABEL_39;
      }
      int64x2_t v22 = (void **)i[1];
      if (!v22)
      {
        uint64_t v24 = i + 1;
        goto LABEL_13;
      }
    }
  }
LABEL_13:
  uint64_t v26 = (double *)operator new(0x30uLL);
  *((void *)v26 + 4) = v16;
  v26[5] = 0.0;
  *uint64_t v26 = 0.0;
  v26[1] = 0.0;
  *((void *)v26 + 2) = i;
  *uint64_t v24 = v26;
  if (*v90)
  {
    int v90 = (void **)*v90;
    uint64_t v26 = (double *)*v24;
  }
  int64x2_t v27 = v91;
  BOOL v28 = v26 == v91;
  *((unsigned char *)v26 + 24) = v26 == v91;
  if (v28) {
    goto LABEL_38;
  }
  while (1)
  {
    uint64_t v29 = *((void *)v26 + 2);
    if (*(unsigned char *)(v29 + 24)) {
      goto LABEL_38;
    }
    int v30 = *(double **)(v29 + 16);
    uint64_t v31 = *(void *)v30;
    if (*(void *)v30 == v29)
    {
      uint64_t v34 = *((void *)v30 + 1);
      if (!v34 || (v35 = *(unsigned __int8 *)(v34 + 24), uint64_t v32 = (unsigned char *)(v34 + 24), v35))
      {
        if (*(double **)v29 == v26)
        {
          *(unsigned char *)(v29 + 24) = 1;
          *((unsigned char *)v30 + 24) = 0;
          uint64_t v38 = *(void *)(v29 + 8);
          *(void *)int v30 = v38;
          if (v38) {
            goto LABEL_30;
          }
        }
        else
        {
          uint64_t v36 = *(uint64_t **)(v29 + 8);
          uint64_t v37 = *v36;
          *(void *)(v29 + 8) = *v36;
          if (v37)
          {
            *(void *)(v37 + 16) = v29;
            int v30 = *(double **)(v29 + 16);
          }
          v36[2] = (uint64_t)v30;
          *(void *)(*(void *)(v29 + 16) + 8 * (**(void **)(v29 + 16) != v29)) = v36;
          uint64_t *v36 = v29;
          *(void *)(v29 + 16) = v36;
          int v30 = (double *)v36[2];
          uint64_t v29 = *(void *)v30;
          *((unsigned char *)v36 + 24) = 1;
          *((unsigned char *)v30 + 24) = 0;
          uint64_t v38 = *(void *)(v29 + 8);
          *(void *)int v30 = v38;
          if (v38) {
LABEL_30:
          }
            *(void *)(v38 + 16) = v30;
        }
        *(double *)(v29 + 16) = v30[2];
        *(void *)(*((void *)v30 + 2) + 8 * (**((void **)v30 + 2) != (void)v30)) = v29;
        *(void *)(v29 + 8) = v30;
LABEL_37:
        *((void *)v30 + 2) = v29;
LABEL_38:
        ++v92;
        double v39 = 0.0;
LABEL_39:
        double v41 = v39 + v85[2](v85, v21);
        unint64_t v42 = (void **)v91;
        unint64_t v43 = *v21;
        if (!v91) {
          goto LABEL_86;
        }
        unint64_t v44 = v91;
        while (2)
        {
          unint64_t v45 = *((void *)v44 + 4);
          if (v43 < v45)
          {
LABEL_41:
            unint64_t v44 = *(double **)v44;
            if (!v44) {
              goto LABEL_85;
            }
            continue;
          }
          break;
        }
        if (v45 < v43)
        {
          ++v44;
          goto LABEL_41;
        }
        do
        {
          while (1)
          {
            uint64_t v46 = v42;
            unint64_t v47 = v42[4];
            if (v43 >= (unint64_t)v47) {
              break;
            }
            unint64_t v42 = (void **)*v46;
            if (!*v46)
            {
              unint64_t v48 = (double **)v46;
              goto LABEL_51;
            }
          }
          if ((unint64_t)v47 >= v43)
          {
            if (v41 >= *((double *)v46 + 5)) {
              goto LABEL_5;
            }
            goto LABEL_84;
          }
          unint64_t v42 = (void **)v46[1];
        }
        while (v42);
        unint64_t v48 = (double **)(v46 + 1);
LABEL_51:
        uint64_t v49 = (double *)operator new(0x30uLL);
        *((void *)v49 + 4) = v43;
        v49[5] = 0.0;
        *uint64_t v49 = 0.0;
        v49[1] = 0.0;
        *((void *)v49 + 2) = v46;
        *unint64_t v48 = v49;
        if (*v90)
        {
          int v90 = (void **)*v90;
          uint64_t v49 = *v48;
        }
        uint64_t v50 = v91;
        BOOL v28 = v49 == v91;
        *((unsigned char *)v49 + 24) = v49 == v91;
        if (v28) {
          goto LABEL_83;
        }
        while (2)
        {
          uint64_t v51 = (double **)*((void *)v49 + 2);
          if (*((unsigned char *)v51 + 24)) {
            goto LABEL_83;
          }
          uint64_t v52 = v51[2];
          uint64_t v53 = *(double ***)v52;
          if (*(double ***)v52 != v51)
          {
            if (!v53 || (v55 = *((unsigned __int8 *)v53 + 24), int64x2_t v54 = v53 + 3, v55))
            {
              if (*v51 == v49)
              {
                uint64_t v84 = *((void *)v49 + 1);
                *uint64_t v51 = (double *)v84;
                if (v84)
                {
                  *(void *)(v84 + 16) = v51;
                  uint64_t v52 = v51[2];
                }
                *((void *)v49 + 2) = v52;
                *(void *)&v51[2][*(void *)v51[2] != (void)v51] = v49;
                *((void *)v49 + 1) = v51;
                v51[2] = v49;
                uint64_t v52 = (double *)*((void *)v49 + 2);
                *((unsigned char *)v49 + 24) = 1;
                *((unsigned char *)v52 + 24) = 0;
                uint64_t v51 = (double **)*((void *)v52 + 1);
                unint64_t v62 = *v51;
                *((void *)v52 + 1) = *v51;
                if (v62) {
LABEL_80:
                }
                  *((void *)v62 + 2) = v52;
              }
              else
              {
                *((unsigned char *)v51 + 24) = 1;
                *((unsigned char *)v52 + 24) = 0;
                uint64_t v51 = (double **)*((void *)v52 + 1);
                unint64_t v62 = *v51;
                *((void *)v52 + 1) = *v51;
                if (v62) {
                  goto LABEL_80;
                }
              }
              v51[2] = (double *)*((void *)v52 + 2);
              *(void *)(*((void *)v52 + 2) + 8 * (**((void **)v52 + 2) != (void)v52)) = v51;
              *uint64_t v51 = v52;
              goto LABEL_82;
            }
LABEL_56:
            *((unsigned char *)v51 + 24) = 1;
            uint64_t v49 = v52;
            *((unsigned char *)v52 + 24) = v52 == v50;
            *int64x2_t v54 = 1;
            if (v52 == v50) {
              goto LABEL_83;
            }
            continue;
          }
          break;
        }
        uint64_t v56 = *((void *)v52 + 1);
        if (v56)
        {
          int v57 = *(unsigned __int8 *)(v56 + 24);
          int64x2_t v54 = (unsigned char *)(v56 + 24);
          if (!v57) {
            goto LABEL_56;
          }
        }
        if (*v51 == v49)
        {
          *((unsigned char *)v51 + 24) = 1;
          *((unsigned char *)v52 + 24) = 0;
          uint64_t v60 = v51[1];
          *(void *)uint64_t v52 = v60;
          if (v60) {
            goto LABEL_68;
          }
        }
        else
        {
          uint64_t v58 = v51[1];
          uint64_t v59 = *(double **)v58;
          v51[1] = *(double **)v58;
          if (v59)
          {
            *((void *)v59 + 2) = v51;
            uint64_t v52 = v51[2];
          }
          *((void *)v58 + 2) = v52;
          *(void *)&v51[2][*(void *)v51[2] != (void)v51] = v58;
          *(void *)uint64_t v58 = v51;
          v51[2] = v58;
          uint64_t v52 = (double *)*((void *)v58 + 2);
          uint64_t v51 = *(double ***)v52;
          *((unsigned char *)v58 + 24) = 1;
          *((unsigned char *)v52 + 24) = 0;
          uint64_t v60 = v51[1];
          *(void *)uint64_t v52 = v60;
          if (v60) {
LABEL_68:
          }
            *((void *)v60 + 2) = v52;
        }
        v51[2] = (double *)*((void *)v52 + 2);
        *(void *)(*((void *)v52 + 2) + 8 * (**((void **)v52 + 2) != (void)v52)) = v51;
        v51[1] = v52;
LABEL_82:
        *((void *)v52 + 2) = v51;
LABEL_83:
        ++v92;
        if (v41 >= 0.0) {
          goto LABEL_5;
        }
LABEL_84:
        unint64_t v42 = (void **)v91;
        unint64_t v43 = *v21;
LABEL_85:
        if (v42)
        {
          do
          {
            while (1)
            {
              uint64_t v63 = v42;
              uint64_t v78 = v42[4];
              if (v43 >= (unint64_t)v78) {
                break;
              }
              unint64_t v42 = (void **)*v63;
              if (!*v63) {
                goto LABEL_87;
              }
            }
            if ((unint64_t)v78 >= v43)
            {
              unint64_t v65 = (double *)v63;
              goto LABEL_118;
            }
            unint64_t v42 = (void **)v63[1];
          }
          while (v42);
          int64x2_t v64 = (double **)(v63 + 1);
        }
        else
        {
LABEL_86:
          uint64_t v63 = (void **)&v91;
LABEL_87:
          int64x2_t v64 = (double **)v63;
        }
        unint64_t v65 = (double *)operator new(0x30uLL);
        *((void *)v65 + 4) = v43;
        v65[5] = 0.0;
        double *v65 = 0.0;
        v65[1] = 0.0;
        *((void *)v65 + 2) = v63;
        *int64x2_t v64 = v65;
        unint64_t v66 = v65;
        if (*v90)
        {
          int v90 = (void **)*v90;
          unint64_t v66 = *v64;
        }
        uint64_t v67 = v91;
        BOOL v28 = v66 == v91;
        *((unsigned char *)v66 + 24) = v66 == v91;
        if (v28) {
          goto LABEL_117;
        }
        while (2)
        {
          double v68 = v66[2];
          if (*(unsigned char *)(*(void *)&v68 + 24)) {
            goto LABEL_117;
          }
          int64x2_t v69 = *(double **)(*(void *)&v68 + 16);
          double v70 = *v69;
          if (*(void *)v69 != *(void *)&v68)
          {
            if (v70 == 0.0
              || (v72 = *(unsigned __int8 *)(*(void *)&v70 + 24), uint16x8_t v71 = (unsigned char *)(*(void *)&v70 + 24), v72))
            {
              if (**(double ***)&v68 == v66)
              {
                uint64_t v83 = *((void *)v66 + 1);
                **(void **)&double v68 = v83;
                if (v83)
                {
                  *(double *)(v83 + 16) = v68;
                  int64x2_t v69 = *(double **)(*(void *)&v68 + 16);
                }
                *((void *)v66 + 2) = v69;
                *(void *)(*(void *)(*(void *)&v68 + 16)
                          + 8 * (**(void **)(*(void *)&v68 + 16) != *(void *)&v68)) = v66;
                v66[1] = v68;
                *(void *)(*(void *)&v68 + 16) = v66;
                int64x2_t v69 = (double *)*((void *)v66 + 2);
                *((unsigned char *)v66 + 24) = 1;
                *((unsigned char *)v69 + 24) = 0;
                double v68 = v69[1];
                uint64_t v79 = **(void **)&v68;
                v69[1] = **(double **)&v68;
                if (v79) {
LABEL_114:
                }
                  *(void *)(v79 + 16) = v69;
              }
              else
              {
                *(unsigned char *)(*(void *)&v68 + 24) = 1;
                *((unsigned char *)v69 + 24) = 0;
                double v68 = v69[1];
                uint64_t v79 = **(void **)&v68;
                v69[1] = **(double **)&v68;
                if (v79) {
                  goto LABEL_114;
                }
              }
              *(double *)(*(void *)&v68 + 16) = v69[2];
              *(double *)(*((void *)v69 + 2) + 8 * (**((void **)v69 + 2) != (void)v69)) = v68;
              **(void **)&double v68 = v69;
              goto LABEL_116;
            }
LABEL_93:
            *(unsigned char *)(*(void *)&v68 + 24) = 1;
            unint64_t v66 = v69;
            *((unsigned char *)v69 + 24) = v69 == v67;
            unsigned char *v71 = 1;
            if (v69 == v67) {
              goto LABEL_117;
            }
            continue;
          }
          break;
        }
        uint64_t v73 = *((void *)v69 + 1);
        if (v73)
        {
          int v74 = *(unsigned __int8 *)(v73 + 24);
          uint16x8_t v71 = (unsigned char *)(v73 + 24);
          if (!v74) {
            goto LABEL_93;
          }
        }
        if (**(double ***)&v68 == v66)
        {
          *(unsigned char *)(*(void *)&v68 + 24) = 1;
          *((unsigned char *)v69 + 24) = 0;
          uint64_t v77 = *(void *)(*(void *)&v68 + 8);
          *(void *)int64x2_t v69 = v77;
          if (v77) {
            goto LABEL_105;
          }
        }
        else
        {
          uint64_t v75 = *(uint64_t **)(*(void *)&v68 + 8);
          double v76 = *(double *)v75;
          *(void *)(*(void *)&v68 + 8) = *v75;
          if (v76 != 0.0)
          {
            *(double *)(*(void *)&v76 + 16) = v68;
            int64x2_t v69 = *(double **)(*(void *)&v68 + 16);
          }
          v75[2] = (uint64_t)v69;
          *(void *)(*(void *)(*(void *)&v68 + 16)
                    + 8 * (**(void **)(*(void *)&v68 + 16) != *(void *)&v68)) = v75;
          *(double *)uint64_t v75 = v68;
          *(void *)(*(void *)&v68 + 16) = v75;
          int64x2_t v69 = (double *)v75[2];
          double v68 = *v69;
          *((unsigned char *)v75 + 24) = 1;
          *((unsigned char *)v69 + 24) = 0;
          uint64_t v77 = *(void *)(*(void *)&v68 + 8);
          *(void *)int64x2_t v69 = v77;
          if (v77) {
LABEL_105:
          }
            *(void *)(v77 + 16) = v69;
        }
        *(double *)(*(void *)&v68 + 16) = v69[2];
        *(double *)(*((void *)v69 + 2) + 8 * (**((void **)v69 + 2) != (void)v69)) = v68;
        *(void *)(*(void *)&v68 + 8) = v69;
LABEL_116:
        uint64_t v69[2] = v68;
LABEL_117:
        ++v92;
LABEL_118:
        v65[5] = v41;
        uint64_t v80 = operator new(0x18uLL);
        unint64_t v81 = *v21;
        v80[1] = &v87;
        v80[2] = v81;
        double v82 = v87;
        void *v80 = v87;
        v82[1] = v80;
        uint64_t v87 = v80;
        ++v89;
LABEL_5:
        ++v20;
        uint64_t v18 = a1;
        uint64_t v19 = *(void *)(a1 + 32);
        if (v20 < *(void *)(v19 + 40 * v16 + 8)) {
          goto LABEL_6;
        }
LABEL_2:
        uint64_t v14 = v89;
        if (!v89) {
          operator new[]();
        }
        goto LABEL_3;
      }
    }
    else if (!v31 || (v33 = *(unsigned __int8 *)(v31 + 24), uint64_t v32 = (unsigned char *)(v31 + 24), v33))
    {
      if (*(double **)v29 == v26)
      {
        uint64_t v61 = *((void *)v26 + 1);
        *(void *)uint64_t v29 = v61;
        if (v61)
        {
          *(void *)(v61 + 16) = v29;
          int v30 = *(double **)(v29 + 16);
        }
        *((void *)v26 + 2) = v30;
        *(void *)(*(void *)(v29 + 16) + 8 * (**(void **)(v29 + 16) != v29)) = v26;
        *((void *)v26 + 1) = v29;
        *(void *)(v29 + 16) = v26;
        int v30 = (double *)*((void *)v26 + 2);
        *((unsigned char *)v26 + 24) = 1;
        *((unsigned char *)v30 + 24) = 0;
        uint64_t v29 = *((void *)v30 + 1);
        unint64_t v40 = *(double **)v29;
        v30[1] = *(double *)v29;
        if (v40) {
LABEL_35:
        }
          *((void *)v40 + 2) = v30;
      }
      else
      {
        *(unsigned char *)(v29 + 24) = 1;
        *((unsigned char *)v30 + 24) = 0;
        uint64_t v29 = *((void *)v30 + 1);
        unint64_t v40 = *(double **)v29;
        v30[1] = *(double *)v29;
        if (v40) {
          goto LABEL_35;
        }
      }
      *(double *)(v29 + 16) = v30[2];
      *(void *)(*((void *)v30 + 2) + 8 * (**((void **)v30 + 2) != (void)v30)) = v29;
      *(void *)uint64_t v29 = v30;
      goto LABEL_37;
    }
    *(unsigned char *)(v29 + 24) = 1;
    uint64_t v26 = v30;
    *((unsigned char *)v30 + 24) = v30 == v27;
    *uint64_t v32 = 1;
    if (v30 == v27) {
      goto LABEL_38;
    }
  }
}

void sub_1C4B8BDD4()
{
  MEMORY[0x1C8786460](v0, 0x1020C40C3F473B3);
  JUMPOUT(0x1C4B8BF74);
}

void sub_1C4B8BE1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (v18) {
    operator delete(v18);
  }
  JUMPOUT(0x1C4B8BF74);
}

void sub_1C4B8BE9C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
    __cxa_rethrow();
  }
  JUMPOUT(0x1C4B8C094);
}

void sub_1C4B8BEC8()
{
}

void sub_1C4B8BEE0(void *a1, int a2)
{
  if (a2) {
    sub_1C4946848(a1);
  }
  JUMPOUT(0x1C4B8C094);
}

void sub_1C4B8BEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t *a49,uint64_t a50,uint64_t a51,void *a52)
{
  MEMORY[0x1C8786460](v52, 0x10F0C40BCF8F641);
  if (a42)
  {
    uint64_t v55 = a40;
    int64x2_t v54 = a41;
    uint64_t v56 = *a41;
    *(void *)(v56 + 8) = *(void *)(a40 + 8);
    **(void **)(v55 + 8) = v56;
    a42 = 0;
    if (v54 != &a40)
    {
      do
      {
        int v57 = (uint64_t *)v54[1];
        operator delete(v54);
        int64x2_t v54 = v57;
      }
      while (v57 != &a40);
    }
  }
  if (a46) {
    MEMORY[0x1C8786430](a46 - 16, 0x1020C805730B0C9);
  }
  if (a50)
  {
    uint64_t v59 = a48;
    uint64_t v58 = a49;
    uint64_t v60 = *a49;
    *(void *)(v60 + 8) = *(void *)(a48 + 8);
    **(void **)(v59 + 8) = v60;
    a50 = 0;
    if (v58 != &a48)
    {
      do
      {
        uint64_t v61 = (uint64_t *)v58[1];
        operator delete(v58);
        uint64_t v58 = v61;
      }
      while (v61 != &a48);
    }
  }
  sub_1C49A1374(a52);
  unint64_t v62 = a18;
  uint64_t v63 = (void *)*a18;
  if (*a18)
  {
    uint64_t v64 = a18[1];
    unint64_t v65 = (void *)*a18;
    if ((void *)v64 != v63)
    {
      do
        uint64_t v64 = sub_1C49A0984(v64 - 416);
      while ((void *)v64 != v63);
      unint64_t v62 = a18;
      unint64_t v65 = (void *)*a18;
    }
    v62[1] = v63;
    operator delete(v65);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1C4B8C09C(uint64_t a1, uint64_t a2, double a3)
{
  if (*(void *)(a1 + 16) != *(void *)(a1 + 8))
  {
    return sub_1C4B8E2E8((unsigned __int8 *)a1, a2, a3);
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 16 * v4 + 8);
    uint64_t result = sub_1C4B8E2E8((unsigned __int8 *)a1, a2, a3);
    if (result)
    {
      if (v5)
      {
        uint64_t v7 = v5;
        goto LABEL_12;
      }
      return result;
    }
  }
  else
  {
    uint64_t result = sub_1C4B8E2E8((unsigned __int8 *)a1, a2, a3);
    if (result) {
      return result;
    }
  }
  if (a2)
  {
    uint64_t v7 = a2;
LABEL_12:
    sub_1C49A0984(v7);
    JUMPOUT(0x1C8786460);
  }
  return result;
}

void sub_1C4B8C158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, char a8, double a9, char a10, char a11)
{
  id v18 = a5;
  uint64_t v19 = a6;
  unint64_t v20 = a7;
  unint64_t v21 = v20 + 16;
  double v22 = (*((double (**)(char *, uint64_t))v20 + 2))(v20, a1);
  *(double *)(a1 + 104) = v22;
  if (v22 > a9) {
    goto LABEL_175;
  }
  uint64_t v23 = *(void *)(a1 + 48);
  uint64_t v24 = *(void *)(*(void *)(v23 + 32) + 40 * a2 + 16) + a3;
  uint64_t v25 = *(void *)(v23 + 80);
  uint64_t v26 = v25 + 72 * v24;
  uint64_t v27 = *(void *)(v26 + 8);
  unsigned long long v156 = (void *)(v26 + 8);
  uint64_t v167 = v26;
  unint64_t v28 = *(void *)(v26 + 24);
  size_t v158 = v19;
  uint64_t v159 = (uint64_t)v18;
  if (*(unsigned char *)(v23 + 184))
  {
    if (v28)
    {
      ul2sh(v28, (uint64_t)__p);
      goto LABEL_9;
    }
    uint64_t v29 = *(void *)(v23 + 136);
    if (*(char *)(v29 + 23) < 0) {
      goto LABEL_8;
    }
LABEL_6:
    long long v30 = *(_OWORD *)v29;
    uint64_t v170 = *(void *)(v29 + 16);
    *(_OWORD *)long long __p = v30;
    goto LABEL_9;
  }
  uint64_t v29 = *(void *)(v23 + 136) + 24 * v28;
  if ((*(char *)(v29 + 23) & 0x80000000) == 0) {
    goto LABEL_6;
  }
LABEL_8:
  sub_1C4949ADC(__p, *(void **)v29, *(void *)(v29 + 8));
LABEL_9:
  sub_1C4B2F514((uint64_t *)__p, (int **)&v171);
  uint64_t v163 = v25;
  uint64_t v165 = v24;
  if (SHIBYTE(v170) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v31 = (v172 - (unsigned char *)v171) >> 2;
  if (!a10) {
    uint64_t v31 = 1;
  }
  uint64_t v157 = v31;
  int v33 = *(char **)(a1 + 64);
  unint64_t v32 = *(void *)(a1 + 72);
  char v161 = a8;
  if ((unint64_t)v33 >= v32)
  {
    uint64_t v37 = *(char **)(a1 + 56);
    uint64_t v38 = (v33 - v37) >> 3;
    unint64_t v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 61) {
      goto LABEL_176;
    }
    uint64_t v40 = v32 - (void)v37;
    if (v40 >> 2 > v39) {
      unint64_t v39 = v40 >> 2;
    }
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v41 = v39;
    }
    if (v41)
    {
      if (v41 >> 61) {
        goto LABEL_177;
      }
      unint64_t v42 = operator new(8 * v41);
      unint64_t v43 = &v42[8 * v38];
      unint64_t v44 = &v42[8 * v41];
      void *v43 = v27;
      uint64_t v45 = (uint64_t)(v43 + 1);
      int64_t v46 = v33 - v37;
      if (v33 == v37) {
        goto LABEL_33;
      }
    }
    else
    {
      unint64_t v42 = 0;
      unint64_t v43 = (void *)(8 * v38);
      unint64_t v44 = 0;
      *(void *)(8 * v38) = v27;
      uint64_t v45 = 8 * v38 + 8;
      int64_t v46 = v33 - v37;
      if (v33 == v37) {
        goto LABEL_33;
      }
    }
    unint64_t v47 = v46 - 8;
    if (v47 < 0x58) {
      goto LABEL_180;
    }
    if ((unint64_t)(v37 - v42) < 0x20) {
      goto LABEL_180;
    }
    uint64_t v48 = (v47 >> 3) + 1;
    uint64_t v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v50 = &v33[-v49];
    unint64_t v43 = (void *)((char *)v43 - v49);
    uint64_t v51 = &v42[8 * v38 - 16];
    uint64_t v52 = v33 - 16;
    uint64_t v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *uint64_t v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 4;
    }
    while (v53);
    int v33 = v50;
    if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_180:
      do
      {
        uint64_t v55 = *((void *)v33 - 1);
        v33 -= 8;
        *--unint64_t v43 = v55;
      }
      while (v33 != v37);
    }
LABEL_33:
    *(void *)(a1 + 56) = v43;
    *(void *)(a1 + 64) = v45;
    *(void *)(a1 + 72) = v44;
    if (v37) {
      operator delete(v37);
    }
    uint64_t v19 = v158;
    *(void *)(a1 + 64) = v45;
    int v35 = *(char **)(a1 + 88);
    unint64_t v34 = *(void *)(a1 + 96);
    if ((unint64_t)v35 < v34) {
      goto LABEL_15;
    }
LABEL_36:
    uint64_t v56 = *(char **)(a1 + 80);
    uint64_t v57 = (v35 - v56) >> 3;
    unint64_t v58 = v57 + 1;
    if (!((unint64_t)(v57 + 1) >> 61))
    {
      uint64_t v59 = v34 - (void)v56;
      if (v59 >> 2 > v58) {
        unint64_t v58 = v59 >> 2;
      }
      if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v60 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v60 = v58;
      }
      if (!v60)
      {
        uint64_t v61 = 0;
        unint64_t v62 = (void *)(8 * v57);
        uint64_t v63 = 0;
        *(void *)(8 * v57) = a3;
        uint64_t v36 = 8 * v57 + 8;
        int64_t v64 = v35 - v56;
        if (v35 != v56)
        {
LABEL_45:
          unint64_t v65 = v64 - 8;
          if (v65 >= 0x58)
          {
            uint64_t v19 = v158;
            if ((unint64_t)(v56 - v61) >= 0x20)
            {
              uint64_t v66 = (v65 >> 3) + 1;
              uint64_t v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              double v68 = &v35[-v67];
              unint64_t v62 = (void *)((char *)v62 - v67);
              int64x2_t v69 = &v61[8 * v57 - 16];
              double v70 = v35 - 16;
              uint64_t v71 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v72 = *(_OWORD *)v70;
                *(v69 - 1) = *((_OWORD *)v70 - 1);
                *int64x2_t v69 = v72;
                v69 -= 2;
                v70 -= 32;
                v71 -= 4;
              }
              while (v71);
              int v35 = v68;
              if (v66 == (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_54:
                *(void *)(a1 + 80) = v62;
                *(void *)(a1 + 88) = v36;
                *(void *)(a1 + 96) = v63;
                if (v56) {
                  operator delete(v56);
                }
                goto LABEL_56;
              }
            }
          }
          else
          {
            uint64_t v19 = v158;
          }
          do
          {
            uint64_t v73 = *((void *)v35 - 1);
            v35 -= 8;
            *--unint64_t v62 = v73;
          }
          while (v35 != v56);
          goto LABEL_54;
        }
LABEL_48:
        uint64_t v19 = v158;
        goto LABEL_54;
      }
      if (!(v60 >> 61))
      {
        uint64_t v61 = operator new(8 * v60);
        unint64_t v62 = &v61[8 * v57];
        uint64_t v63 = &v61[8 * v60];
        void *v62 = a3;
        uint64_t v36 = (uint64_t)(v62 + 1);
        int64_t v64 = v35 - v56;
        if (v35 != v56) {
          goto LABEL_45;
        }
        goto LABEL_48;
      }
LABEL_177:
      sub_1C4949AA8();
    }
LABEL_176:
    sub_1C494A220();
  }
  *(void *)int v33 = v27;
  *(void *)(a1 + 64) = v33 + 8;
  int v35 = *(char **)(a1 + 88);
  unint64_t v34 = *(void *)(a1 + 96);
  if ((unint64_t)v35 >= v34) {
    goto LABEL_36;
  }
LABEL_15:
  *(void *)int v35 = a3;
  uint64_t v36 = (uint64_t)(v35 + 8);
LABEL_56:
  *(void *)(a1 + 88) = v36;
  double v74 = *(double *)(a1 + 136);
  *(double *)(a1 + 136) = v74 + v19[2](v19, v167);
  uint64_t v75 = v163 + 72 * v165;
  uint64_t v77 = *(void *)(v75 + 64);
  double v76 = (void *)(v75 + 64);
  *(void *)(a1 + 200) += v77;
  double v78 = (*((double (**)(char *, uint64_t))v20 + 2))(v20, a1);
  *(double *)(a1 + 104) = v78;
  if (v78 > a9) {
    goto LABEL_172;
  }
  double v83 = (*((double (**)(char *, uint64_t))v20 + 2))(v20, a1);
  *(double *)(a1 + 104) = v83;
  if (v83 > a9 || v157 == 0) {
    goto LABEL_172;
  }
  uint64_t v85 = 0;
  char v86 = v161 ^ 1 | a10;
  double v87 = 0.0;
  double v88 = 0.0;
  double v89 = 0.0;
  while (1)
  {
    uint64_t v90 = *((unsigned int *)v171 + v85);
    __int16 v168 = objc_msgSend_characterType_(CHCharacterSetRules, v79, v90, v80, v81, v82);
    uint64_t v166 = v90;
    int v162 = unicodeToNSString(v90, v91, v92, v93, v94, v95);
    BOOL v164 = (v168 & 0x13) == 0;
    uint64_t v101 = *(void *)(a1 + 56);
    uint64_t v100 = *(void *)(a1 + 64);
    if ((v86 & 1) == 0)
    {
      BOOL v102 = (double (**)(void))v20;
      uint64_t v103 = v85;
      unint64_t v104 = v21;
      unint64_t v105 = v76;
      unint64_t v106 = *v76;
      uint64_t v111 = v106
           - objc_msgSend_expectedMaxStrokeCount_(CHCharacterSetRules, v96, (unsigned __int16)v166, v97, v98, v99);
      double v76 = v105;
      if ((int)v111 >= 1) {
        *(double *)(a1 + 152) = *(double *)(a1 + 152) + (double)(unint64_t)(*v105 * v111);
      }
      unint64_t v21 = v104;
      uint64_t v85 = v103;
      uint64_t v112 = objc_msgSend_expectedMinStrokeCount_(CHCharacterSetRules, v107, (unsigned __int16)v166, v108, v109, v110)- *v76;
      double v113 = *(double *)(a1 + 152);
      if ((int)v112 >= 1)
      {
        double v113 = v113 + (double)(unint64_t)(*v76 * v112);
        *(double *)(a1 + 152) = v113;
      }
      if (v113 > 15.654) {
        *(void *)(a1 + 152) = 0x402F4ED916872B02;
      }
      double v114 = v102[2]();
      *(double *)(a1 + 104) = v114;
      unint64_t v20 = (char *)v102;
      if (v114 > a9) {
        break;
      }
    }
    uint64_t v115 = *(void *)(a1 + 224);
    if (v115)
    {
      char v116 = objc_msgSend_newCursorByAdvancingWithSymbol_fromCursor_inNetwork_(CHPatternNetwork, v96, v166, v115, v159, v99);
      unint64_t v117 = v116;
      if (v116) {
        id v118 = v116;
      }
      unint64_t v119 = *(void **)(a1 + 224);
      *(void *)(a1 + 224) = v117;

      uint64_t v120 = *(void *)(a1 + 224);
    }
    else
    {
      uint64_t v120 = 0;
    }
    uint64_t v121 = v100 - v101;
    if (v120) {
      BOOL v122 = 1;
    }
    else {
      BOOL v122 = v100 - v101 == 8;
    }
    int v123 = !v122;
    int v124 = *(const void **)(a1 + 216);
    if (v124)
    {
      uint64_t v125 = LXCursorCreateByAdvancing();
      CFRelease(v124);
      *(void *)(a1 + 216) = v125;
    }
    else
    {
      uint64_t v125 = 0;
    }
    if (v125) {
      int v123 = 0;
    }
    double v126 = (*((double (**)(char *, uint64_t))v20 + 2))(v20, a1);
    *(double *)(a1 + 104) = v126;
    if (v126 > a9) {
      break;
    }
    int v127 = *(const void **)(a1 + 208);
    if (v123)
    {
      if (v127)
      {
        CFRelease(*(CFTypeRef *)(a1 + 208));
        *(void *)(a1 + 208) = 0;
      }
LABEL_96:
      double v87 = -15.654;
      if (*(void *)(a1 + 216))
      {
        BOOL v164 = 0;
        double v87 = -0.0;
      }
      goto LABEL_98;
    }
    if (!v127) {
      goto LABEL_96;
    }
    uint64_t v128 = LXCursorCreateByAdvancing();
    CFRelease(v127);
    *(void *)(a1 + 208) = v128;
    if (!v128) {
      goto LABEL_96;
    }
    if (!*(void *)(a1 + 216))
    {
      LXCursorConditionalProbability();
      if (v129 < 0.0) {
        double v87 = -v129;
      }
    }
LABEL_98:
    if (v164) {
      double v87 = 1.30103;
    }
    if ((v168 & 0x2000) == 0)
    {
      uint64_t v130 = *(void *)(a1 + 240);
      uint64_t v131 = *(void *)(a1 + 8);
      uint64_t v132 = *(void *)(a1 + 32);
      if (v130 == 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v130 = v131 - v132;
        *(void *)(a1 + 240) = v131 - v132;
      }
      *(void *)(a1 + 248) = v131 - (v132 + v130) + 1;
    }
    if (v87 > 0.0 || *(void *)(a1 + 208) || *(void *)(a1 + 216)) {
      double v133 = *(double *)(a1 + 120) + v87 * (double)(unint64_t)*v76;
    }
    else {
      double v133 = *(double *)(a1 + 120) + 15.654;
    }
    *(double *)(a1 + 120) = v133;
    double v138 = (*((double (**)(char *, uint64_t))v20 + 2))(v20, a1);
    *(double *)(a1 + 104) = v138;
    if (v138 > a9) {
      break;
    }
    if (a4)
    {
      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 32) + 40 * *v156 + 32)
        && (*(void *)(a1 + 208) || *(void *)(a1 + 216))
        && (v168 & 0x20) != 0
        && !LXCursorIsRoot())
      {
        if (*(void *)(a1 + 208))
        {
          LXCursorTerminationProbability();
          if (fabs(v140) == INFINITY) {
            double v88 = -1.30103;
          }
          else {
            double v88 = v140;
          }
        }
        if (*(void *)(a1 + 216)) {
          double v88 = 0.0;
        }
        if (a11) {
          goto LABEL_130;
        }
LABEL_154:
        double v145 = v89;
      }
      else
      {
        double v88 = -1.30103;
        if (v164 || !*(void *)(a1 + 208) && (double v88 = 0.0, *(void *)(a1 + 216)))
        {
          if (!a11) {
            goto LABEL_154;
          }
        }
        else
        {
          LMLanguageModelConditionalProbability();
          double v88 = v139;
          if (!a11) {
            goto LABEL_154;
          }
        }
LABEL_130:
        if (v121 == 8) {
          goto LABEL_154;
        }
        unint64_t v141 = objc_msgSend_characterType_(CHCharacterSetRules, v134, *(unsigned int *)(*(void *)a1 + 4 * *(void *)(a1 + 8) - 4), v135, v136, v137);
        BOOL v143 = (v141 & 4) == 0 || (v168 & 3) == 0;
        BOOL v144 = (v141 & 3) == 0 || (v168 & 4) == 0;
        double v145 = 16.0;
        if (v144 && v143)
        {
          uint64_t v146 = (v141 >> 2) & 1;
          if ((v168 & 4) == 0) {
            LODWORD(v146) = 1;
          }
          BOOL v148 = (v168 & 3) == 0 || (v141 & 3) != 0;
          if ((v146 & v148) != 0) {
            double v145 = v89;
          }
          else {
            double v145 = 8.0;
          }
        }
      }
      *(double *)(a1 + 168) = *(double *)(a1 + 168) + v145 - v88 * (double)(unint64_t)*v76;
      double v149 = (*((double (**)(char *, uint64_t))v20 + 2))(v20, a1);
      *(double *)(a1 + 104) = v149;
      double v89 = v145;
      if (v149 > a9) {
        break;
      }
    }
    double v150 = 0.0;
    if (v123) {
      double v150 = 15.654;
    }
    *(double *)(a1 + 184) = v150;
    double v151 = (*((double (**)(char *, uint64_t))v20 + 2))(v20, a1);
    *(double *)(a1 + 104) = v151;
    if (v151 > a9) {
      break;
    }
    uint64_t v152 = *(void *)(a1 + 8);
    int64x2_t v153 = *(void **)a1;
    if (v152 == *(void *)(a1 + 16))
    {
      uint64_t v154 = *(void *)(a1 + 400) * (v152 - 5) + 5;
      *(void *)(a1 + 16) = v154;
      int64x2_t v153 = malloc_type_realloc(v153, 4 * v154, 0x100004052888210uLL);
      if (!v153)
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        int v155 = (id)qword_1EA3C9F90[0];
        if (os_log_type_enabled(v155, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl(&dword_1C492D000, v155, OS_LOG_TYPE_ERROR, "Error: unable to reallocate memory for path expansion.", (uint8_t *)__p, 2u);
        }

        goto LABEL_163;
      }
      *(void *)a1 = v153;
      uint64_t v152 = *(void *)(a1 + 8);
    }
    *(void *)(a1 + 8) = v152 + 1;
    *((_DWORD *)v153 + v152) = v166;
LABEL_163:

    if (v157 == ++v85) {
      goto LABEL_172;
    }
  }

LABEL_172:
  if (v171)
  {
    long long v172 = v171;
    operator delete(v171);
  }
  uint64_t v19 = v158;
  id v18 = (id)v159;
LABEL_175:
}

void sub_1C4B8CBE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

BOOL sub_1C4B8CC88(uint64_t a1, uint64_t a2)
{
  return *(double *)(*(void *)a1 + 104) < *(double *)(*(void *)a2 + 104);
}

uint64_t Network::deserialize(Network *this, const char *__filename)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = fopen(__filename, "rb");
  fread(__ptr, 4uLL, 3uLL, v4);
  BOOL v5 = __ptr[0] > 1u || __ptr[1] >= 3u;
  if (!v5)
  {
    uint64_t v53 = 0;
    fread((char *)&v53 + 4, 4uLL, 1uLL, v4);
    uint64_t v7 = (char *)*((void *)this + 10);
    uint64_t v8 = (unsigned char *)*((void *)this + 11);
    unint64_t v9 = SHIDWORD(v53);
    uint64_t v10 = (v8 - v7) >> 3;
    unint64_t v11 = 0x8E38E38E38E38E39 * v10;
    unint64_t v12 = SHIDWORD(v53) - 0x8E38E38E38E38E39 * v10;
    if (SHIDWORD(v53) <= 0x8E38E38E38E38E39 * v10)
    {
      if (SHIDWORD(v53) >= 0x8E38E38E38E38E39 * v10) {
        goto LABEL_30;
      }
      uint64_t v23 = &v7[72 * SHIDWORD(v53)];
    }
    else
    {
      uint64_t v13 = *((void *)this + 12);
      if (0x8E38E38E38E38E39 * ((v13 - (uint64_t)v8) >> 3) < v12)
      {
        if (v53 < 0) {
          sub_1C494A220();
        }
        unint64_t v14 = 0x8E38E38E38E38E39 * ((v13 - (uint64_t)v7) >> 3);
        uint64_t v15 = 2 * v14;
        if (2 * v14 <= SHIDWORD(v53)) {
          uint64_t v15 = SHIDWORD(v53);
        }
        if (v14 >= 0x1C71C71C71C71C7) {
          unint64_t v16 = 0x38E38E38E38E38ELL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16 > 0x38E38E38E38E38ELL) {
          goto LABEL_59;
        }
        uint64_t v17 = 72 * v16;
        id v18 = (char *)operator new(72 * v16);
        uint64_t v19 = &v18[72 * v11];
        unint64_t v20 = &v19[72 * (72 * v12 / 0x48)];
        if (v8 != v7)
        {
          uint64_t v21 = 0;
          do
          {
            double v22 = &v19[v21];
            *(_OWORD *)(v22 - 72) = *(_OWORD *)&v8[v21 - 72];
            *(_OWORD *)(v22 - 56) = *(_OWORD *)&v8[v21 - 56];
            *(_OWORD *)(v22 - 40) = *(_OWORD *)&v8[v21 - 40];
            *(_OWORD *)(v22 - 24) = *(_OWORD *)&v8[v21 - 24];
            *((void *)v22 - 1) = *(void *)&v8[v21 - 8];
            v21 -= 72;
          }
          while (&v8[v21] != v7);
          v19 += v21;
        }
        *((void *)this + 10) = v19;
        *((void *)this + 11) = v20;
        *((void *)this + 12) = &v18[v17];
        if (v7) {
          operator delete(v7);
        }
LABEL_30:
        uint64_t v25 = (unsigned char *)*((void *)this + 13);
        uint64_t v24 = (char *)*((void *)this + 14);
        unint64_t v26 = (v24 - v25) >> 3;
        unint64_t v27 = v9 - v26;
        if (v9 <= v26)
        {
          if (v9 >= v26) {
            goto LABEL_54;
          }
          uint64_t v37 = &v25[8 * v9];
        }
        else
        {
          uint64_t v28 = *((void *)this + 15);
          if (v27 > (v28 - (uint64_t)v24) >> 3)
          {
            if ((v9 & 0x80000000) != 0) {
              sub_1C494A220();
            }
            uint64_t v29 = v28 - (void)v25;
            uint64_t v30 = v29 >> 2;
            if (v29 >> 2 <= v9) {
              uint64_t v30 = v9;
            }
            BOOL v5 = (unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8;
            unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v5) {
              unint64_t v31 = v30;
            }
            if (!(v31 >> 61))
            {
              uint64_t v50 = 8 * v31;
              uint64_t v49 = (char *)operator new(8 * v31);
              unint64_t v32 = &v49[8 * v26];
              uint64_t v51 = &v49[v50];
              size_t v33 = 8 * v27;
              bzero(v32, v33);
              unint64_t v34 = &v32[v33];
              if (v24 == v25)
              {
                uint64_t v36 = v51;
                goto LABEL_52;
              }
              unint64_t v35 = v24 - v25 - 8;
              if (v35 >= 0x58)
              {
                uint64_t v36 = v51;
                if ((unint64_t)(v25 - v49) >= 0x20)
                {
                  uint64_t v38 = (v35 >> 3) + 1;
                  uint64_t v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
                  uint64_t v40 = &v24[-v39];
                  v32 -= v39;
                  unint64_t v41 = &v49[8 * ((v24 - v25) >> 3) - 16];
                  unint64_t v42 = v24 - 16;
                  uint64_t v43 = v38 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v44 = *(_OWORD *)v42;
                    *((_OWORD *)v41 - 1) = *((_OWORD *)v42 - 1);
                    *(_OWORD *)unint64_t v41 = v44;
                    v41 -= 32;
                    v42 -= 32;
                    v43 -= 4;
                  }
                  while (v43);
                  uint64_t v24 = v40;
                  if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL)) {
                    goto LABEL_51;
                  }
                }
              }
              else
              {
                uint64_t v36 = v51;
              }
              do
              {
                uint64_t v45 = *((void *)v24 - 1);
                v24 -= 8;
                *((void *)v32 - 1) = v45;
                v32 -= 8;
              }
              while (v24 != v25);
LABEL_51:
              uint64_t v24 = (char *)*((void *)this + 13);
LABEL_52:
              *((void *)this + 13) = v32;
              *((void *)this + 14) = v34;
              *((void *)this + 15) = v36;
              if (v24) {
                operator delete(v24);
              }
LABEL_54:
              fread(&v53, 4uLL, 1uLL, v4);
              uint64_t v46 = *((void *)this + 4);
              unint64_t v47 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 5) - v46) >> 3);
              if ((int)v53 <= v47)
              {
                if ((int)v53 < v47) {
                  *((void *)this + 5) = v46 + 40 * (int)v53;
                }
              }
              else
              {
                sub_1C499C97C((void **)this + 4, (int)v53 - v47);
              }
              int v52 = 0;
              fread(&v52, 4uLL, 1uLL, v4);
              operator new[]();
            }
LABEL_59:
            sub_1C4949AA8();
          }
          bzero(*((void **)this + 14), 8 * v27);
          uint64_t v37 = &v24[8 * v27];
        }
        *((void *)this + 14) = v37;
        goto LABEL_54;
      }
      uint64_t v23 = &v8[72 * (72 * v12 / 0x48)];
    }
    *((void *)this + 11) = v23;
    goto LABEL_30;
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  unint64_t v6 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = __filename;
    _os_log_impl(&dword_1C492D000, v6, OS_LOG_TYPE_ERROR, "Unsupported Network Version %s", buf, 0xCu);
  }

  return fclose(v4);
}

void sub_1C4B8D66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Network::serialize(Network *this, const char *__filename)
{
  uint64_t v3 = fopen(__filename, "wb");
  fwrite(&unk_1C4C44850, 4uLL, 1uLL, v3);
  fwrite(&unk_1C4C44854, 4uLL, 1uLL, v3);
  fwrite(&unk_1C4C44858, 4uLL, 1uLL, v3);
  unint64_t __ptr = 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)this + 11) - *((void *)this + 10)) >> 3);
  fwrite(&__ptr, 4uLL, 1uLL, v3);
  unint64_t __ptr = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 3);
  fwrite(&__ptr, 4uLL, 1uLL, v3);
  unint64_t __ptr = *((void *)this + 9);
  fwrite(&__ptr, 4uLL, 1uLL, v3);
  uint64_t v4 = (Network *)*((void *)this + 7);
  if (v4 != (Network *)((char *)this + 64))
  {
    do
    {
      unint64_t __ptr = *((void *)v4 + 4);
      fwrite(&__ptr, 4uLL, 1uLL, v3);
      uint64_t v21 = (Network *)*((void *)v4 + 1);
      if (v21)
      {
        do
        {
          double v22 = v21;
          uint64_t v21 = *(Network **)v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          double v22 = (Network *)*((void *)v4 + 2);
          BOOL v23 = *(void *)v22 == (void)v4;
          uint64_t v4 = v22;
        }
        while (!v23);
      }
      uint64_t v4 = v22;
    }
    while (v22 != (Network *)((char *)this + 64));
  }
  unint64_t __ptr = *((unsigned __int8 *)this + 184);
  fwrite(&__ptr, 4uLL, 1uLL, v3);
  uint64_t v5 = *((void *)this + 10);
  if (*((void *)this + 11) != v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = (int32x4_t *)(v5 + v6);
      int32x4_t v32 = vuzp1q_s32(*v8, v8[1]);
      uint64_t v33 = v8[2].i64[0];
      fwrite(&v32, 0x18uLL, 1uLL, v3);
      ++v7;
      uint64_t v5 = *((void *)this + 10);
      uint64_t v9 = *((void *)this + 11);
      v6 += 72;
    }
    while (v7 < 0x8E38E38E38E38E39 * ((v9 - v5) >> 3));
    if (v9 != v5)
    {
      unint64_t v10 = 0;
      do
      {
        v32.i32[0] = (*(void *)(*((void *)this + 13) + 8 * v10) - v5) / 0x48;
        fwrite(&v32, 4uLL, 1uLL, v3);
        ++v10;
        uint64_t v5 = *((void *)this + 10);
      }
      while (v10 < 0x8E38E38E38E38E39 * ((*((void *)this + 11) - v5) >> 3));
    }
  }
  uint64_t v11 = *((void *)this + 4);
  if (*((void *)this + 5) != v11)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 32;
    do
    {
      unint64_t v14 = (unsigned __int8 *)(v11 + v13);
      fwrite((const void *)(v11 + v13 - 32), 4uLL, 1uLL, v3);
      fwrite(v14 - 24, 4uLL, 1uLL, v3);
      fwrite(v14 - 16, 4uLL, 1uLL, v3);
      fwrite(v14 - 8, 4uLL, 1uLL, v3);
      v32.i16[0] = *v14;
      fwrite(&v32, 2uLL, 1uLL, v3);
      ++v12;
      uint64_t v11 = *((void *)this + 4);
      v13 += 40;
    }
    while (v12 < 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 5) - v11) >> 3));
  }
  unint64_t __ptr = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 18) - *((void *)this + 17)) >> 3);
  fwrite(&__ptr, 4uLL, 1uLL, v3);
  uint64_t v16 = *((void *)this + 17);
  uint64_t v15 = *((void *)this + 18);
  uint64_t v17 = v15 - v16;
  if (v15 == v16)
  {
    unint64_t v18 = 0;
  }
  else
  {
    LODWORD(v18) = 0;
    unint64_t v19 = v17 / 24;
    if (v19 <= 1) {
      unint64_t v19 = 1;
    }
    unint64_t v20 = (char *)(v16 + 23);
    do
    {
      while ((*v20 & 0x80000000) == 0)
      {
        LODWORD(v18) = v18 + *v20 + 1;
        v20 += 24;
        if (!--v19) {
          goto LABEL_25;
        }
      }
      LODWORD(v18) = v18 + *(void *)(v20 - 15) + 1;
      v20 += 24;
      --v19;
    }
    while (v19);
LABEL_25:
    unint64_t v18 = (int)v18;
  }
  unint64_t __ptr = v18;
  fwrite(&__ptr, 4uLL, 1uLL, v3);
  uint64_t v24 = *((void *)this + 17);
  if (*((void *)this + 18) != v24)
  {
    uint64_t v25 = 0;
    unint64_t v26 = 0;
    do
    {
      uint64_t v29 = (char *)(v24 + v25);
      if (v29[23] < 0)
      {
        uint64_t v28 = *(char **)v29;
        size_t v27 = *((void *)v29 + 1);
      }
      else
      {
        size_t v27 = v29[23];
        uint64_t v28 = v29;
      }
      fwrite(v28, v27, 1uLL, v3);
      v32.i8[0] = 0;
      fwrite(&v32, 1uLL, 1uLL, v3);
      ++v26;
      uint64_t v24 = *((void *)this + 17);
      v25 += 24;
    }
    while (v26 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 18) - v24) >> 3));
  }
  return fclose(v3);
}

uint64_t sub_1C4B8DB24(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v6 = *(unsigned char **)(a2 + 56);
  uint64_t v5 = *(unsigned char **)(a2 + 64);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_1C494A220();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 72) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 64) = v9;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  uint64_t v11 = *(unsigned char **)(a2 + 80);
  unint64_t v10 = *(unsigned char **)(a2 + 88);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_1C494A220();
    }
    uint64_t v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 80) = v13;
    *(void *)(a1 + 88) = v13;
    unint64_t v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 96) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 88) = v14;
  }
  long long v15 = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 104) = v15;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  uint64_t v17 = *(unsigned char **)(a2 + 256);
  uint64_t v16 = *(unsigned char **)(a2 + 264);
  int64_t v18 = v16 - v17;
  if (v16 != v17)
  {
    if (v18 < 0) {
      sub_1C494A220();
    }
    unint64_t v19 = (char *)operator new(v16 - v17);
    *(void *)(a1 + 256) = v19;
    *(void *)(a1 + 264) = v19;
    unint64_t v20 = &v19[16 * (v18 >> 4)];
    *(void *)(a1 + 272) = v20;
    memcpy(v19, v17, v18);
    *(void *)(a1 + 264) = v20;
  }
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  double v22 = *(unsigned char **)(a2 + 280);
  uint64_t v21 = *(unsigned char **)(a2 + 288);
  int64_t v23 = v21 - v22;
  if (v21 != v22)
  {
    if (v23 < 0) {
      sub_1C494A220();
    }
    uint64_t v24 = (char *)operator new(v21 - v22);
    *(void *)(a1 + 280) = v24;
    *(void *)(a1 + 288) = v24;
    uint64_t v25 = &v24[16 * (v23 >> 4)];
    *(void *)(a1 + 296) = v25;
    memcpy(v24, v22, v23);
    *(void *)(a1 + 288) = v25;
  }
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  size_t v27 = *(unsigned char **)(a2 + 304);
  unint64_t v26 = *(unsigned char **)(a2 + 312);
  int64_t v28 = v26 - v27;
  if (v26 != v27)
  {
    if (v28 < 0) {
      sub_1C494A220();
    }
    uint64_t v29 = (char *)operator new(v26 - v27);
    *(void *)(a1 + 304) = v29;
    *(void *)(a1 + 312) = v29;
    uint64_t v30 = &v29[8 * (v28 >> 3)];
    *(void *)(a1 + 320) = v30;
    memcpy(v29, v27, v28);
    *(void *)(a1 + 312) = v30;
  }
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  int32x4_t v32 = *(unsigned char **)(a2 + 328);
  unint64_t v31 = *(unsigned char **)(a2 + 336);
  int64_t v33 = v31 - v32;
  if (v31 != v32)
  {
    if (v33 < 0) {
      sub_1C494A220();
    }
    unint64_t v34 = (char *)operator new(v31 - v32);
    *(void *)(a1 + 328) = v34;
    *(void *)(a1 + 336) = v34;
    unint64_t v35 = &v34[8 * (v33 >> 3)];
    *(void *)(a1 + 344) = v35;
    memcpy(v34, v32, v33);
    *(void *)(a1 + 336) = v35;
  }
  sub_1C49C68B8((void *)(a1 + 352), a2 + 352);
  sub_1C49C68B8((void *)(a1 + 376), a2 + 376);
  *(_OWORD *)(a1 + 400) = xmmword_1C4C44820;
  if (*(void *)a2)
  {
    uint64_t v36 = malloc_type_malloc(4 * *(void *)(a1 + 16), 0x100004052888210uLL);
    *(void *)a1 = v36;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    memcpy(v36, *(const void **)a2, 4 * *(void *)(a1 + 16));
  }
  uint64_t v37 = *(const void **)(a1 + 216);
  if (v37) {
    CFRetain(v37);
  }
  uint64_t v38 = *(const void **)(a1 + 208);
  if (v38) {
    CFRetain(v38);
  }
  objc_storeStrong((id *)(a1 + 224), *(id *)(a2 + 224));
  return a1;
}

void sub_1C4B8DE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10)
{
  if (*v16)
  {
    operator delete(*v16);
    int64_t v18 = *v15;
    if (!*v15)
    {
LABEL_3:
      unint64_t v19 = *v14;
      if (!*v14) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else
  {
    int64_t v18 = *v15;
    if (!*v15) {
      goto LABEL_3;
    }
  }
  v10[42] = v18;
  operator delete(v18);
  unint64_t v19 = *v14;
  if (!*v14)
  {
LABEL_4:
    unint64_t v20 = *a10;
    if (!*a10) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  v10[39] = v19;
  operator delete(v19);
  unint64_t v20 = *a10;
  if (!*a10)
  {
LABEL_5:
    uint64_t v21 = *a9;
    if (!*a9) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_15:
  v10[36] = v20;
  operator delete(v20);
  uint64_t v21 = *a9;
  if (!*a9)
  {
LABEL_7:

    double v22 = *v12;
    if (*v12)
    {
      v10[11] = v22;
      operator delete(v22);
    }
    int64_t v23 = *v11;
    if (*v11)
    {
      v10[8] = v23;
      operator delete(v23);
    }
    _Unwind_Resume(a1);
  }
LABEL_6:
  v10[33] = v21;
  operator delete(v21);
  goto LABEL_7;
}

uint64_t sub_1C4B8DFA8(uint64_t a1, uint64_t a2, const void *a3, const void *a4, void *a5, int a6)
{
  id v30 = a5;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 41) = 1;
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 232) = a6;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = xmmword_1C4C44820;
  uint64_t v13 = *(void *)(a2 + 240);
  unint64_t v12 = *(void *)(a2 + 248);
  *(void *)(a1 + 24) = v12;
  *(unsigned char *)(a1 + 40) = v12 == 0;
  if (v12 <= 5) {
    uint64_t v14 = 5;
  }
  else {
    uint64_t v14 = v12;
  }
  long long v15 = malloc_type_malloc(4 * v14 + 16, 0x100004052888210uLL);
  id obj = a5;
  int64_t v28 = a4;
  uint64_t v29 = a3;
  *(void *)a1 = v15;
  *(void *)(a1 + 32) = 0;
  uint64_t v20 = *(void *)(a1 + 24);
  if ((unint64_t)(v20 + 1) >= 6)
  {
    uint64_t v21 = 0;
    *(_OWORD *)(a1 + 240) = xmmword_1C4C3B320;
    double v22 = (unint64_t *)(a1 + 240);
  }
  else
  {
    uint64_t v21 = 5 - v20;
    *(void *)(a1 + 32) = 5 - v20;
    memset_pattern16(v15, &unk_1C4C39DB0, 4 * (5 - v20));
    *(_OWORD *)(a1 + 240) = xmmword_1C4C3B320;
    double v22 = (unint64_t *)(a1 + 240);
    if (v14 == v21) {
      goto LABEL_14;
    }
  }
  unint64_t v23 = 0;
  uint64_t v24 = 4 * v21;
  do
  {
    while (1)
    {
      *(_DWORD *)(*(void *)a1 + v24) = *(_DWORD *)(v13 + 4 * v23);
      if ((objc_msgSend_characterType_(CHCharacterSetRules, v16, *(unsigned int *)(v13 + 4 * v23), v17, v18, v19, obj) & 0x2000) == 0)break; {
      ++v23;
      }
      v24 += 4;
      if (v14 - *(void *)(a1 + 32) <= v23) {
        goto LABEL_14;
      }
    }
    if (*v22 == 0x7FFFFFFFFFFFFFFFLL) {
      *double v22 = v23;
    }
    *(void *)(a1 + 248) = ++v23;
    v24 += 4;
  }
  while (v14 - *(void *)(a1 + 32) > v23);
LABEL_14:
  objc_storeStrong((id *)(a1 + 224), obj);
  uint64_t v25 = *(void *)(a1 + 408) + v14;
  *(void *)(a1 + 8) = v14;
  *(void *)(a1 + 16) = v25;
  *(void *)(a1 + 216) = v28;
  if (v28) {
    CFRetain(v28);
  }
  *(void *)(a1 + 208) = v29;
  if (v29) {
    CFRetain(v29);
  }

  return a1;
}

void sub_1C4B8E1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  long long v15 = *(void **)(v12 + 376);
  if (v15)
  {
    operator delete(v15);
    uint64_t v16 = *(void **)(v12 + 352);
    if (!v16)
    {
LABEL_3:
      uint64_t v17 = *(void **)(v12 + 328);
      if (!v17) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v16 = *(void **)(v12 + 352);
    if (!v16) {
      goto LABEL_3;
    }
  }
  operator delete(v16);
  uint64_t v17 = *(void **)(v12 + 328);
  if (!v17)
  {
LABEL_4:
    uint64_t v18 = *(void **)(v12 + 304);
    if (!v18) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  *(void *)(v12 + 336) = v17;
  operator delete(v17);
  uint64_t v18 = *(void **)(v12 + 304);
  if (!v18)
  {
LABEL_5:
    uint64_t v19 = v13 + 25;
    uint64_t v20 = *(void **)(v12 + 280);
    if (!v20) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  *(void *)(v12 + 312) = v18;
  operator delete(v18);
  uint64_t v19 = v13 + 25;
  uint64_t v20 = *(void **)(v12 + 280);
  if (!v20)
  {
LABEL_6:
    uint64_t v21 = *v19;
    if (!*v19) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  *(void *)(v12 + 288) = v20;
  operator delete(v20);
  uint64_t v21 = *v19;
  if (!*v19)
  {
LABEL_7:

    double v22 = *(void **)(v12 + 80);
    if (!v22) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_15:
  *(void *)(v12 + 264) = v21;
  operator delete(v21);

  double v22 = *(void **)(v12 + 80);
  if (!v22)
  {
LABEL_8:
    unint64_t v23 = *v13;
    if (!*v13) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_16:
  *(void *)(v12 + 88) = v22;
  operator delete(v22);
  unint64_t v23 = *v13;
  if (!*v13)
  {
LABEL_9:

    _Unwind_Resume(a1);
  }
LABEL_17:
  *(void *)(v12 + 64) = v23;
  operator delete(v23);

  _Unwind_Resume(a1);
}

uint64_t sub_1C4B8E2E8(unsigned __int8 *a1, uint64_t a2, double a3)
{
  unint64_t v3 = *((void *)a1 + 2);
  if (a1[1]) {
    BOOL v4 = v3 - 1 > 0xFFFFFFFFFFFFFFFDLL;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v10 = 0;
    uint64_t v11 = (double *)(*((void *)a1 + 3) + 24);
    while (*(v11 - 1) != a3 || *(void *)v11 != a2)
    {
      --v10;
      v11 += 2;
      if (-(uint64_t)v3 == v10) {
        goto LABEL_6;
      }
    }
    if (v10 != 2) {
      return 0;
    }
  }
LABEL_6:
  if (v3 != *((void *)a1 + 1))
  {
    uint64_t v6 = *((void *)a1 + 3);
    *((void *)a1 + 2) = ++v3;
    uint64_t v12 = v6 + 16 * v3;
    *(double *)uint64_t v12 = a3;
    *(void *)(v12 + 8) = a2;
    int v5 = *a1;
    double v13 = -2147483650.0;
    if (!*a1) {
      double v13 = 2147483650.0;
    }
    *(double *)uint64_t v6 = v13;
    *(void *)(v6 + 8) = a2;
    double v14 = *(double *)(v6 + ((8 * v3) & 0xFFFFFFFFFFFFFFF0));
    unint64_t v7 = v3;
    if (v5)
    {
      if (v14 >= a3)
      {
        unint64_t v15 = v3;
        do
        {
          unint64_t v7 = v15 >> 1;
          if (v15 != v15 >> 1)
          {
            uint64_t v17 = (void *)(v6 + 16 * v7);
            uint64_t v18 = (void *)(v6 + 16 * v15);
            *uint64_t v18 = *v17;
            v18[1] = v17[1];
          }
          double v16 = *(double *)(v6 + ((4 * v15) & 0xFFFFFFFFFFFFFFF0));
          v15 >>= 1;
        }
        while (v16 >= a3);
      }
    }
    else if (v14 <= a3)
    {
      unint64_t v25 = v3;
      do
      {
        unint64_t v7 = v25 >> 1;
        if (v25 != v25 >> 1)
        {
          size_t v27 = (void *)(v6 + 16 * v7);
          int64_t v28 = (void *)(v6 + 16 * v25);
          *int64_t v28 = *v27;
          v28[1] = v27[1];
        }
        double v26 = *(double *)(v6 + ((4 * v25) & 0xFFFFFFFFFFFFFFF0));
        v25 >>= 1;
      }
      while (v26 <= a3);
    }
LABEL_38:
    uint64_t v29 = v6 + 16 * v7;
    *(double *)uint64_t v29 = a3;
    *(void *)(v29 + 8) = a2;
    *((void *)a1 + 4) = v3;
    if (v3) {
      goto LABEL_39;
    }
    return 1;
  }
  int v5 = *a1;
  uint64_t v6 = *((void *)a1 + 3);
  unint64_t v7 = *((void *)a1 + 4);
  uint64_t v8 = v6 + 16 * v7;
  if (*a1)
  {
    if (*(double *)v8 > a3)
    {
      unint64_t v9 = 0xC1E0000000000000;
      goto LABEL_25;
    }
    return 0;
  }
  if (*(double *)v8 >= a3) {
    return 0;
  }
  unint64_t v9 = 0x41DFFFFFFFC00000;
LABEL_25:
  *(double *)uint64_t v8 = a3;
  *(void *)(v8 + 8) = a2;
  *(void *)uint64_t v6 = v9;
  *(void *)(v6 + 8) = a2;
  double v19 = *(double *)(v6 + ((8 * v7) & 0xFFFFFFFFFFFFFFF0));
  if (v5)
  {
    if (v19 < a3) {
      goto LABEL_38;
    }
    do
    {
      unint64_t v21 = v7 >> 1;
      if (v7 != v7 >> 1)
      {
        double v22 = (void *)(v6 + 16 * v21);
        unint64_t v23 = (void *)(v6 + 16 * v7);
        *unint64_t v23 = *v22;
        v23[1] = v22[1];
      }
      double v20 = *(double *)(v6 + ((4 * v7) & 0xFFFFFFFFFFFFFFF0));
      v7 >>= 1;
    }
    while (v20 >= a3);
  }
  else
  {
    if (v19 > a3) {
      goto LABEL_38;
    }
    do
    {
      unint64_t v21 = v7 >> 1;
      if (v7 != v7 >> 1)
      {
        unint64_t v34 = (void *)(v6 + 16 * v21);
        unint64_t v35 = (void *)(v6 + 16 * v7);
        void *v35 = *v34;
        v35[1] = v34[1];
      }
      double v33 = *(double *)(v6 + ((4 * v7) & 0xFFFFFFFFFFFFFFF0));
      v7 >>= 1;
    }
    while (v33 <= a3);
  }
  uint64_t v36 = v6 + 16 * v21;
  *(double *)uint64_t v36 = a3;
  *(void *)(v36 + 8) = a2;
  *((void *)a1 + 4) = v3;
  if (v3)
  {
LABEL_39:
    unint64_t v30 = v3 >> 1;
    unint64_t v31 = v3 - 1;
    if (v3 - 1 > v3 >> 1)
    {
      if (v5)
      {
        int32x4_t v32 = (double *)(v6 + 16 * v3 - 16);
        do
        {
          if (*v32 > *(double *)(v6 + 16 * v3))
          {
            *((void *)a1 + 4) = v31;
            unint64_t v3 = v31;
          }
          --v31;
          v32 -= 2;
        }
        while (v31 > v30);
      }
      else
      {
        uint64_t v37 = (double *)(v6 + 16 * v3 - 16);
        do
        {
          if (*v37 < *(double *)(v6 + 16 * v3))
          {
            *((void *)a1 + 4) = v31;
            unint64_t v3 = v31;
          }
          --v31;
          v37 -= 2;
        }
        while (v31 > v30);
      }
    }
  }
  return 1;
}

void sub_1C4B8E5F0(uint64_t a1, void *a2)
{
  id v96 = a2;
  uint64_t v8 = *(void *)(a1 + 8) - *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v12 = *(char **)(a1 + 264);
  unint64_t v11 = *(void *)(a1 + 272);
  if ((unint64_t)v12 < v11)
  {
    *(void *)uint64_t v12 = 0;
    *((void *)v12 + 1) = v8;
    uint64_t v13 = (uint64_t)(v12 + 16);
    goto LABEL_14;
  }
  double v14 = *(char **)(a1 + 256);
  uint64_t v15 = (v12 - v14) >> 4;
  unint64_t v16 = v15 + 1;
  if ((unint64_t)(v15 + 1) >> 60) {
    goto LABEL_112;
  }
  uint64_t v17 = v11 - (void)v14;
  if (v17 >> 3 > v16) {
    unint64_t v16 = v17 >> 3;
  }
  if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v18 = v16;
  }
  if (v18)
  {
    if (v18 >> 60) {
      goto LABEL_114;
    }
    double v19 = (char *)operator new(16 * v18);
    double v20 = &v19[16 * v15];
    unint64_t v21 = &v19[16 * v18];
    *(void *)double v20 = 0;
    *((void *)v20 + 1) = v8;
    uint64_t v13 = (uint64_t)(v20 + 16);
    if (v12 == v14)
    {
LABEL_12:
      *(void *)(a1 + 256) = v20;
      *(void *)(a1 + 264) = v13;
      *(void *)(a1 + 272) = v21;
      if (!v12) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  else
  {
    double v20 = (char *)(16 * v15);
    unint64_t v21 = 0;
    *(void *)double v20 = 0;
    *((void *)v20 + 1) = v8;
    uint64_t v13 = 16 * v15 + 16;
    if (v12 == v14) {
      goto LABEL_12;
    }
  }
  do
  {
    *((_OWORD *)v20 - 1) = *((_OWORD *)v12 - 1);
    v20 -= 16;
    v12 -= 16;
  }
  while (v12 != v14);
  uint64_t v12 = *(char **)(a1 + 256);
  *(void *)(a1 + 256) = v20;
  *(void *)(a1 + 264) = v13;
  *(void *)(a1 + 272) = v21;
  if (v12) {
LABEL_13:
  }
    operator delete(v12);
LABEL_14:
  uint64_t v22 = ((v9 - v10) >> 3) - 1;
  *(void *)(a1 + 264) = v13;
  uint64_t v24 = *(char **)(a1 + 288);
  unint64_t v23 = *(void *)(a1 + 296);
  if ((unint64_t)v24 < v23)
  {
    *(void *)uint64_t v24 = 0;
    *((void *)v24 + 1) = v22;
    uint64_t v25 = (uint64_t)(v24 + 16);
    goto LABEL_27;
  }
  double v26 = *(char **)(a1 + 280);
  uint64_t v27 = (v24 - v26) >> 4;
  unint64_t v28 = v27 + 1;
  if ((unint64_t)(v27 + 1) >> 60) {
LABEL_112:
  }
    sub_1C494A220();
  uint64_t v29 = v23 - (void)v26;
  if (v29 >> 3 > v28) {
    unint64_t v28 = v29 >> 3;
  }
  if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v30 = v28;
  }
  if (v30)
  {
    if (!(v30 >> 60))
    {
      unint64_t v31 = (char *)operator new(16 * v30);
      int32x4_t v32 = &v31[16 * v27];
      double v33 = &v31[16 * v30];
      *(void *)int32x4_t v32 = 0;
      *((void *)v32 + 1) = v22;
      uint64_t v25 = (uint64_t)(v32 + 16);
      if (v24 == v26) {
        goto LABEL_25;
      }
      goto LABEL_44;
    }
LABEL_114:
    sub_1C4949AA8();
  }
  int32x4_t v32 = (char *)(16 * v27);
  double v33 = 0;
  *(void *)int32x4_t v32 = 0;
  *((void *)v32 + 1) = v22;
  uint64_t v25 = 16 * v27 + 16;
  if (v24 == v26)
  {
LABEL_25:
    *(void *)(a1 + 280) = v32;
    *(void *)(a1 + 288) = v25;
    *(void *)(a1 + 296) = v33;
    if (!v24) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  do
  {
LABEL_44:
    *((_OWORD *)v32 - 1) = *((_OWORD *)v24 - 1);
    v32 -= 16;
    v24 -= 16;
  }
  while (v24 != v26);
  uint64_t v24 = *(char **)(a1 + 280);
  *(void *)(a1 + 280) = v32;
  *(void *)(a1 + 288) = v25;
  *(void *)(a1 + 296) = v33;
  if (v24) {
LABEL_26:
  }
    operator delete(v24);
LABEL_27:
  *(void *)(a1 + 288) = v25;
  unint64_t v35 = *(double **)(a1 + 312);
  unint64_t v34 = *(void *)(a1 + 320);
  double v36 = *(double *)(a1 + 136) / (double)*(unint64_t *)(a1 + 200);
  if ((unint64_t)v35 < v34)
  {
    double *v35 = v36;
    uint64_t v37 = (uint64_t)(v35 + 1);
    goto LABEL_56;
  }
  uint64_t v38 = *(double **)(a1 + 304);
  uint64_t v39 = v35 - v38;
  unint64_t v40 = v39 + 1;
  if ((unint64_t)(v39 + 1) >> 61) {
    sub_1C494A220();
  }
  uint64_t v41 = v34 - (void)v38;
  if (v41 >> 2 > v40) {
    unint64_t v40 = v41 >> 2;
  }
  if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v42 = v40;
  }
  if (v42)
  {
    if (v42 >> 61) {
      sub_1C4949AA8();
    }
    uint64_t v43 = operator new(8 * v42);
    long long v44 = (double *)&v43[8 * v39];
    uint64_t v45 = &v43[8 * v42];
    *long long v44 = v36;
    uint64_t v37 = (uint64_t)(v44 + 1);
    int64_t v46 = (char *)v35 - (char *)v38;
    if (v35 == v38) {
      goto LABEL_54;
    }
    goto LABEL_48;
  }
  uint64_t v43 = 0;
  long long v44 = (double *)(8 * v39);
  uint64_t v45 = 0;
  *(double *)(8 * v39) = v36;
  uint64_t v37 = 8 * v39 + 8;
  int64_t v46 = (char *)v35 - (char *)v38;
  if (v35 != v38)
  {
LABEL_48:
    unint64_t v47 = v46 - 8;
    if (v47 < 0x58) {
      goto LABEL_121;
    }
    if ((unint64_t)((char *)v38 - v43) < 0x20) {
      goto LABEL_121;
    }
    uint64_t v48 = (v47 >> 3) + 1;
    uint64_t v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v50 = &v35[v49 / 0xFFFFFFFFFFFFFFF8];
    long long v44 = (double *)((char *)v44 - v49);
    uint64_t v51 = &v43[8 * v39 - 16];
    int v52 = v35 - 2;
    uint64_t v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *uint64_t v51 = v54;
      v51 -= 2;
      v52 -= 4;
      v53 -= 4;
    }
    while (v53);
    unint64_t v35 = v50;
    if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_121:
      do
      {
        uint64_t v55 = *((void *)v35-- - 1);
        *((void *)v44-- - 1) = v55;
      }
      while (v35 != v38);
    }
  }
LABEL_54:
  *(void *)(a1 + 304) = v44;
  *(void *)(a1 + 312) = v37;
  *(void *)(a1 + 320) = v45;
  if (v38) {
    operator delete(v38);
  }
LABEL_56:
  *(void *)(a1 + 312) = v37;
  uint64_t v56 = *(void *)(a1 + 216);
  if (*(void *)(a1 + 208))
  {
    int HasEntries = LXCursorHasEntries();
    BOOL v58 = HasEntries != 0;
    if (HasEntries || !v56)
    {
LABEL_62:
      uint64_t v59 = *(void **)(a1 + 224);
      if (v59) {
        goto LABEL_63;
      }
      goto LABEL_66;
    }
LABEL_61:
    BOOL v58 = LXCursorHasEntries() != 0;
    goto LABEL_62;
  }
  if (v56) {
    goto LABEL_61;
  }
  BOOL v58 = 0;
  uint64_t v59 = *(void **)(a1 + 224);
  if (v59)
  {
LABEL_63:
    int isCompletePattern = objc_msgSend_isCompletePattern(v59, v3, v4, v5, v6, v7);
    unint64_t v61 = *(void *)(a1 + 360);
    uint64_t v62 = *(void *)(a1 + 368);
    if (v61 != v62 << 6) {
      goto LABEL_74;
    }
    goto LABEL_67;
  }
LABEL_66:
  int isCompletePattern = 0;
  unint64_t v61 = *(void *)(a1 + 360);
  uint64_t v62 = *(void *)(a1 + 368);
  if (v61 != v62 << 6) {
    goto LABEL_74;
  }
LABEL_67:
  if ((uint64_t)(v61 + 1) < 0) {
    goto LABEL_113;
  }
  unint64_t v63 = v62 << 7;
  if (v63 <= (v61 & 0xFFFFFFFFFFFFFFC0) + 64) {
    unint64_t v63 = (v61 & 0xFFFFFFFFFFFFFFC0) + 64;
  }
  if (v61 <= 0x3FFFFFFFFFFFFFFELL) {
    unint64_t v64 = v63;
  }
  else {
    unint64_t v64 = 0x7FFFFFFFFFFFFFFFLL;
  }
  sub_1C49B61EC(a1 + 352, v64);
  unint64_t v61 = *(void *)(a1 + 360);
LABEL_74:
  *(void *)(a1 + 360) = v61 + 1;
  uint64_t v65 = *(void *)(a1 + 352);
  unint64_t v66 = v61 >> 6;
  uint64_t v67 = 1 << v61;
  if (v58)
  {
    *(void *)(v65 + 8 * v66) |= v67;
    unint64_t v68 = *(void *)(a1 + 384);
    uint64_t v69 = *(void *)(a1 + 392);
    if (v68 != v69 << 6) {
      goto LABEL_85;
    }
  }
  else
  {
    *(void *)(v65 + 8 * v66) &= ~v67;
    unint64_t v68 = *(void *)(a1 + 384);
    uint64_t v69 = *(void *)(a1 + 392);
    if (v68 != v69 << 6) {
      goto LABEL_85;
    }
  }
  if ((uint64_t)(v68 + 1) < 0) {
LABEL_113:
  }
    sub_1C494A220();
  unint64_t v70 = v69 << 7;
  if (v70 <= (v68 & 0xFFFFFFFFFFFFFFC0) + 64) {
    unint64_t v70 = (v68 & 0xFFFFFFFFFFFFFFC0) + 64;
  }
  if (v68 <= 0x3FFFFFFFFFFFFFFELL) {
    unint64_t v71 = v70;
  }
  else {
    unint64_t v71 = 0x7FFFFFFFFFFFFFFFLL;
  }
  sub_1C49B61EC(a1 + 376, v71);
  unint64_t v68 = *(void *)(a1 + 384);
LABEL_85:
  *(void *)(a1 + 384) = v68 + 1;
  uint64_t v72 = *(void *)(a1 + 376);
  unint64_t v73 = v68 >> 6;
  uint64_t v74 = 1 << v68;
  if (isCompletePattern) {
    uint64_t v75 = *(void *)(v72 + 8 * v73) | v74;
  }
  else {
    uint64_t v75 = *(void *)(v72 + 8 * v73) & ~v74;
  }
  *(void *)(v72 + 8 * v73) = v75;
  *(double *)(a1 + 160) = *(double *)(a1 + 160) + *(double *)(a1 + 168);
  *(double *)(a1 + 144) = *(double *)(a1 + 144) + *(double *)(a1 + 152);
  *(double *)(a1 + 112) = *(double *)(a1 + 112) + *(double *)(a1 + 120);
  *(double *)(a1 + 176) = *(double *)(a1 + 176) + *(double *)(a1 + 184);
  *(double *)(a1 + 128) = *(double *)(a1 + 128) + *(double *)(a1 + 136);
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 41) = 0;
  uint64_t v77 = *(char **)(a1 + 336);
  unint64_t v76 = *(void *)(a1 + 344);
  if ((unint64_t)v77 >= v76)
  {
    uint64_t v79 = *(char **)(a1 + 328);
    uint64_t v80 = (v77 - v79) >> 3;
    unint64_t v81 = v80 + 1;
    if ((unint64_t)(v80 + 1) >> 61) {
      sub_1C494A220();
    }
    uint64_t v82 = v76 - (void)v79;
    if (v82 >> 2 > v81) {
      unint64_t v81 = v82 >> 2;
    }
    if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v83 = v81;
    }
    if (v83)
    {
      if (v83 >> 61) {
        sub_1C4949AA8();
      }
      uint64_t v84 = operator new(8 * v83);
    }
    else
    {
      uint64_t v84 = 0;
    }
    uint64_t v85 = &v84[8 * v80];
    char v86 = &v84[8 * v83];
    *uint64_t v85 = *(void *)(a1 + 104);
    double v78 = v85 + 1;
    if (v77 != v79)
    {
      unint64_t v87 = v77 - v79 - 8;
      if (v87 < 0x58) {
        goto LABEL_122;
      }
      if ((unint64_t)(v79 - v84) < 0x20) {
        goto LABEL_122;
      }
      uint64_t v88 = (v87 >> 3) + 1;
      uint64_t v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v90 = &v77[-v89];
      uint64_t v85 = (void *)((char *)v85 - v89);
      uint64_t v91 = &v84[8 * v80 - 16];
      uint64_t v92 = v77 - 16;
      uint64_t v93 = v88 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v94 = *(_OWORD *)v92;
        *(v91 - 1) = *((_OWORD *)v92 - 1);
        *uint64_t v91 = v94;
        v91 -= 2;
        v92 -= 32;
        v93 -= 4;
      }
      while (v93);
      uint64_t v77 = v90;
      if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_122:
        do
        {
          uint64_t v95 = *((void *)v77 - 1);
          v77 -= 8;
          *--uint64_t v85 = v95;
        }
        while (v77 != v79);
      }
    }
    *(void *)(a1 + 328) = v85;
    *(void *)(a1 + 336) = v78;
    *(void *)(a1 + 344) = v86;
    if (v79) {
      operator delete(v79);
    }
  }
  else
  {
    *(void *)uint64_t v77 = *(void *)(a1 + 104);
    double v78 = v77 + 8;
  }
  *(void *)(a1 + 336) = v78;
}

void sub_1C4B8EC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B8ECB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B8ECC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B8ECD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B8ECEC(uint64_t result, unint64_t a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5)
{
  uint64_t v10 = result;
  while (2)
  {
    unint64_t v11 = (long long *)(a2 - 72);
    uint64_t v110 = (long long *)(a2 - 216);
    uint64_t v112 = (long long *)(a2 - 144);
    unint64_t v12 = v10;
    unint64_t v114 = a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v10 = v12;
          uint64_t v13 = a2 - v12;
          unint64_t v14 = 0x8E38E38E38E38E39 * ((uint64_t)(a2 - v12) >> 3);
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t result = (*a3)(v11, (long long *)v10);
                if (result)
                {
                  long long v54 = *(_OWORD *)v10;
                  long long v53 = *(_OWORD *)(v10 + 16);
                  long long v56 = *(_OWORD *)(v10 + 32);
                  long long v55 = *(_OWORD *)(v10 + 48);
                  uint64_t v57 = *(void *)(v10 + 64);
                  if ((long long *)v10 != v11)
                  {
                    *(_OWORD *)uint64_t v10 = *(_OWORD *)(a2 - 72);
                    *(_OWORD *)(v10 + 32) = *(_OWORD *)(a2 - 40);
                    *(_OWORD *)(v10 + 16) = *(_OWORD *)(a2 - 56);
                    *(_OWORD *)(v10 + 48) = *(_OWORD *)(a2 - 24);
                    *(void *)(v10 + 64) = *(void *)(a2 - 8);
                  }
                  *(_OWORD *)(a2 - 72) = v54;
                  *(_OWORD *)(a2 - 40) = v56;
                  *(_OWORD *)(a2 - 56) = v53;
                  *(_OWORD *)(a2 - 24) = v55;
                  *(void *)(a2 - 8) = v57;
                }
                break;
              case 3uLL:
                uint64_t result = sub_1C4B8F9C8((long long *)v10, (long long *)(v10 + 72), v11, a3);
                break;
              case 4uLL:
                uint64_t result = sub_1C4B8FE58(v10, v10 + 72, v10 + 144, (uint64_t)v11, a3);
                break;
              case 5uLL:
                uint64_t result = sub_1C4B8FF9C(v10, v10 + 72, v10 + 144, v10 + 216, (uint64_t)v11, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 1727)
          {
            if (a5)
            {
              if (v10 != a2)
              {
                BOOL v58 = (long long *)(v10 + 72);
                if (v10 + 72 != a2)
                {
                  uint64_t v59 = 0;
                  unint64_t v60 = (long long *)v10;
                  do
                  {
                    unint64_t v61 = v58;
                    uint64_t result = (*a3)(v58, v60);
                    if (result)
                    {
                      long long v62 = *(long long *)((char *)v60 + 88);
                      long long v119 = *v61;
                      long long v120 = v62;
                      long long v63 = *(long long *)((char *)v60 + 120);
                      long long v121 = *(long long *)((char *)v60 + 104);
                      long long v122 = v63;
                      uint64_t v123 = *((void *)v60 + 17);
                      uint64_t v64 = v59;
                      while (1)
                      {
                        uint64_t v65 = v10 + v64;
                        long long v66 = *(_OWORD *)(v10 + v64 + 16);
                        *(_OWORD *)(v65 + 72) = *(_OWORD *)(v10 + v64);
                        long long v67 = *(_OWORD *)(v10 + v64 + 48);
                        *(_OWORD *)(v65 + 104) = *(_OWORD *)(v10 + v64 + 32);
                        *(_OWORD *)(v65 + 88) = v66;
                        *(_OWORD *)(v65 + 120) = v67;
                        *(void *)(v65 + 136) = *(void *)(v10 + v64 + 64);
                        if (!v64) {
                          break;
                        }
                        v64 -= 72;
                        uint64_t result = (*a3)(&v119, (long long *)(v64 + v10));
                        if ((result & 1) == 0)
                        {
                          uint64_t v68 = v10 + v64 + 72;
                          if ((long long *)v68 == &v119) {
                            goto LABEL_77;
                          }
                          goto LABEL_85;
                        }
                      }
                      uint64_t v68 = v10;
                      if ((long long *)v10 == &v119) {
                        goto LABEL_77;
                      }
LABEL_85:
                      *(_OWORD *)uint64_t v68 = v119;
                      long long v69 = v121;
                      *(_OWORD *)(v68 + 16) = v120;
                      *(_OWORD *)(v68 + 32) = v69;
                      *(_OWORD *)(v68 + 48) = v122;
                      *(void *)(v68 + 64) = v123;
                    }
LABEL_77:
                    BOOL v58 = (long long *)((char *)v61 + 72);
                    v59 += 72;
                    unint64_t v60 = v61;
                  }
                  while ((long long *)((char *)v61 + 72) != (long long *)a2);
                }
              }
            }
            else if (v10 != a2)
            {
              uint64_t v95 = (long long *)(v10 + 72);
              if (v10 + 72 != a2)
              {
                id v96 = (long long *)(v10 + 136);
                do
                {
                  uint64_t v97 = v95;
                  uint64_t result = (*a3)(v95, (long long *)v10);
                  if (result)
                  {
                    long long v98 = *(_OWORD *)(v10 + 88);
                    long long v119 = *v97;
                    long long v120 = v98;
                    long long v99 = *(_OWORD *)(v10 + 120);
                    long long v121 = *(_OWORD *)(v10 + 104);
                    long long v122 = v99;
                    uint64_t v123 = *(void *)(v10 + 136);
                    uint64_t v100 = v96;
                    do
                    {
                      uint64_t v101 = v100;
                      long long v102 = *(long long *)((char *)v100 - 104);
                      long long v103 = *(long long *)((char *)v100 - 120);
                      *(v100 - 4) = *(long long *)((char *)v100 - 136);
                      *(v100 - 3) = v103;
                      long long v104 = *(long long *)((char *)v100 - 88);
                      *(v100 - 2) = v102;
                      *(v100 - 1) = v104;
                      uint64_t v105 = *((void *)v100 - 9);
                      uint64_t v100 = (long long *)((char *)v100 - 72);
                      *(void *)uint64_t v101 = v105;
                      uint64_t result = (*a3)(&v119, v101 - 13);
                    }
                    while ((result & 1) != 0);
                    if (v100 - 4 != &v119)
                    {
                      *(v100 - 4) = v119;
                      *(v100 - 2) = v121;
                      *(v100 - 3) = v120;
                      *(v100 - 1) = v122;
                      *(void *)uint64_t v100 = v123;
                    }
                  }
                  uint64_t v95 = (long long *)((char *)v97 + 72);
                  id v96 = (long long *)((char *)v96 + 72);
                  uint64_t v10 = (uint64_t)v97;
                }
                while ((long long *)((char *)v97 + 72) != (long long *)a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v10 != a2)
            {
              int64_t v70 = (v14 - 2) >> 1;
              int64_t v117 = v70;
              do
              {
                int64_t v71 = v70;
                if (v117 >= v70)
                {
                  uint64_t v72 = (2 * v70) | 1;
                  uint64_t v73 = v10 + 72 * v72;
                  if (2 * v70 + 2 < (uint64_t)v14
                    && (*a3)((long long *)(v10 + 72 * v72), (long long *)(v73 + 72)))
                  {
                    v73 += 72;
                    uint64_t v72 = 2 * v71 + 2;
                  }
                  uint64_t v74 = v10 + 72 * v71;
                  uint64_t result = (*a3)((long long *)v73, (long long *)v74);
                  if ((result & 1) == 0)
                  {
                    long long v119 = *(_OWORD *)v74;
                    uint64_t v75 = v10 + 72 * v71;
                    long long v120 = *(_OWORD *)(v75 + 16);
                    long long v121 = *(_OWORD *)(v75 + 32);
                    long long v122 = *(_OWORD *)(v75 + 48);
                    uint64_t v123 = *(void *)(v75 + 64);
                    do
                    {
                      uint64_t v76 = v73;
                      if (v74 != v73)
                      {
                        *(_OWORD *)uint64_t v74 = *(_OWORD *)v73;
                        *(_OWORD *)(v74 + 32) = *(_OWORD *)(v73 + 32);
                        *(_OWORD *)(v74 + 16) = *(_OWORD *)(v73 + 16);
                        *(_OWORD *)(v74 + 48) = *(_OWORD *)(v73 + 48);
                        *(void *)(v74 + 64) = *(void *)(v73 + 64);
                      }
                      if (v117 < v72) {
                        break;
                      }
                      uint64_t v77 = (2 * v72) | 1;
                      uint64_t v73 = v10 + 72 * v77;
                      uint64_t v78 = 2 * v72 + 2;
                      if (v78 < (uint64_t)v14
                        && (*a3)((long long *)(v10 + 72 * v77), (long long *)(v73 + 72)))
                      {
                        v73 += 72;
                        uint64_t v77 = v78;
                      }
                      uint64_t result = (*a3)((long long *)v73, &v119);
                      uint64_t v74 = v76;
                      uint64_t v72 = v77;
                    }
                    while (!result);
                    if ((long long *)v76 != &v119)
                    {
                      *(_OWORD *)uint64_t v76 = v119;
                      long long v79 = v121;
                      *(_OWORD *)(v76 + 16) = v120;
                      *(_OWORD *)(v76 + 32) = v79;
                      *(_OWORD *)(v76 + 48) = v122;
                      *(void *)(v76 + 64) = v123;
                    }
                  }
                }
                int64_t v70 = v71 - 1;
              }
              while (v71);
              int64_t v80 = v13 / 0x48uLL;
              unint64_t v81 = v114;
              do
              {
                if (v80 >= 2)
                {
                  unint64_t v115 = v81;
                  uint64_t v83 = 0;
                  uint64_t v107 = *(void *)(v10 + 8);
                  uint64_t v108 = *(void *)v10;
                  uint64_t v118 = *(void *)(v10 + 16);
                  uint64_t v85 = *(void *)(v10 + 32);
                  uint64_t v84 = *(void *)(v10 + 40);
                  uint64_t v111 = *(void *)(v10 + 48);
                  uint64_t v113 = *(void *)(v10 + 24);
                  uint64_t v109 = *(void *)(v10 + 56);
                  uint64_t v86 = v10;
                  uint64_t v106 = *(void *)(v10 + 64);
                  do
                  {
                    uint64_t v87 = v86 + 72 * v83 + 72;
                    uint64_t v88 = 2 * v83;
                    uint64_t v83 = (2 * v83) | 1;
                    uint64_t v89 = v88 + 2;
                    if (v88 + 2 < v80)
                    {
                      uint64_t result = (*a3)((long long *)v87, (long long *)(v87 + 72));
                      if (result)
                      {
                        v87 += 72;
                        uint64_t v83 = v89;
                      }
                    }
                    if (v86 != v87)
                    {
                      *(_OWORD *)uint64_t v86 = *(_OWORD *)v87;
                      *(_OWORD *)(v86 + 32) = *(_OWORD *)(v87 + 32);
                      *(_OWORD *)(v86 + 16) = *(_OWORD *)(v87 + 16);
                      *(_OWORD *)(v86 + 48) = *(_OWORD *)(v87 + 48);
                      *(void *)(v86 + 64) = *(void *)(v87 + 64);
                    }
                    uint64_t v86 = v87;
                  }
                  while (v83 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
                  unint64_t v81 = v115;
                  if (v87 == v115 - 72)
                  {
                    *(void *)uint64_t v87 = v108;
                    *(void *)(v87 + 8) = v107;
                    *(void *)(v87 + 32) = v85;
                    *(void *)(v87 + 40) = v84;
                    *(void *)(v87 + 16) = v118;
                    *(void *)(v87 + 24) = v113;
                    *(void *)(v87 + 48) = v111;
                    *(void *)(v87 + 56) = v109;
                    *(void *)(v87 + 64) = v106;
                  }
                  else
                  {
                    *(_OWORD *)uint64_t v87 = *(_OWORD *)(v115 - 72);
                    *(_OWORD *)(v87 + 32) = *(_OWORD *)(v115 - 40);
                    *(_OWORD *)(v87 + 16) = *(_OWORD *)(v115 - 56);
                    *(_OWORD *)(v87 + 48) = *(_OWORD *)(v115 - 24);
                    *(void *)(v87 + 64) = *(void *)(v115 - 8);
                    *(void *)(v115 - 72) = v108;
                    *(void *)(v115 - 64) = v107;
                    *(void *)(v115 - 40) = v85;
                    *(void *)(v115 - 32) = v84;
                    *(void *)(v115 - 56) = v118;
                    *(void *)(v115 - 48) = v113;
                    *(void *)(v115 - 24) = v111;
                    *(void *)(v115 - 16) = v109;
                    *(void *)(v115 - 8) = v106;
                    uint64_t v90 = v87 - v10 + 72;
                    if (v90 >= 73)
                    {
                      unint64_t v91 = (v90 / 0x48uLL - 2) >> 1;
                      unint64_t v92 = v10 + 72 * v91;
                      uint64_t result = (*a3)((long long *)v92, (long long *)v87);
                      if (result)
                      {
                        long long v119 = *(_OWORD *)v87;
                        long long v120 = *(_OWORD *)(v87 + 16);
                        long long v121 = *(_OWORD *)(v87 + 32);
                        long long v122 = *(_OWORD *)(v87 + 48);
                        uint64_t v123 = *(void *)(v87 + 64);
                        do
                        {
                          uint64_t v93 = v92;
                          if (v87 != v92)
                          {
                            *(_OWORD *)uint64_t v87 = *(_OWORD *)v92;
                            *(_OWORD *)(v87 + 32) = *(_OWORD *)(v92 + 32);
                            *(_OWORD *)(v87 + 16) = *(_OWORD *)(v92 + 16);
                            *(_OWORD *)(v87 + 48) = *(_OWORD *)(v92 + 48);
                            *(void *)(v87 + 64) = *(void *)(v92 + 64);
                          }
                          if (!v91) {
                            break;
                          }
                          unint64_t v91 = (v91 - 1) >> 1;
                          unint64_t v92 = v10 + 72 * v91;
                          uint64_t result = (*a3)((long long *)v92, &v119);
                          uint64_t v87 = v93;
                        }
                        while ((result & 1) != 0);
                        if ((long long *)v93 != &v119)
                        {
                          *(_OWORD *)uint64_t v93 = v119;
                          long long v94 = v121;
                          *(_OWORD *)(v93 + 16) = v120;
                          *(_OWORD *)(v93 + 32) = v94;
                          *(_OWORD *)(v93 + 48) = v122;
                          *(void *)(v93 + 64) = v123;
                        }
                      }
                    }
                  }
                }
                v81 -= 72;
              }
              while ((unint64_t)v80-- > 2);
            }
            return result;
          }
          unint64_t v15 = v14 >> 1;
          unint64_t v16 = (long long *)(v10 + 72 * (v14 >> 1));
          if ((unint64_t)v13 < 0x2401) {
            break;
          }
          sub_1C4B8F9C8((long long *)v10, (long long *)(v10 + 72 * (v14 >> 1)), v11, a3);
          sub_1C4B8F9C8((long long *)(v10 + 72), (long long *)(72 * v15 + v10 - 72), v112, a3);
          sub_1C4B8F9C8((long long *)(v10 + 144), (long long *)(v10 + 72 + 72 * v15), v110, a3);
          sub_1C4B8F9C8((long long *)(72 * v15 + v10 - 72), (long long *)(v10 + 72 * (v14 >> 1)), (long long *)(v10 + 72 + 72 * v15), a3);
          long long v18 = *(_OWORD *)v10;
          long long v17 = *(_OWORD *)(v10 + 16);
          long long v20 = *(_OWORD *)(v10 + 32);
          long long v19 = *(_OWORD *)(v10 + 48);
          uint64_t v21 = *(void *)(v10 + 64);
          if (v14 >= 2)
          {
            uint64_t v22 = v10 + 72 * v15;
            long long v24 = *(_OWORD *)(v22 + 16);
            long long v23 = *(_OWORD *)(v22 + 32);
            *(_OWORD *)uint64_t v10 = *v16;
            *(_OWORD *)(v10 + 16) = v24;
            long long v25 = *(_OWORD *)(v22 + 48);
            *(_OWORD *)(v10 + 32) = v23;
            *(_OWORD *)(v10 + 48) = v25;
            *(void *)(v10 + 64) = *(void *)(v22 + 64);
          }
          *unint64_t v16 = v18;
          uint64_t v26 = v10 + 72 * v15;
          *(_OWORD *)(v26 + 16) = v17;
          *(_OWORD *)(v26 + 32) = v20;
          *(_OWORD *)(v26 + 48) = v19;
          *(void *)(v26 + 64) = v21;
          --a4;
          a2 = v114;
          if (a5) {
            goto LABEL_15;
          }
LABEL_14:
          if ((*a3)((long long *)(v10 - 72), (long long *)v10)) {
            goto LABEL_15;
          }
          long long v41 = *(_OWORD *)(v10 + 16);
          long long v119 = *(_OWORD *)v10;
          long long v120 = v41;
          long long v42 = *(_OWORD *)(v10 + 48);
          long long v121 = *(_OWORD *)(v10 + 32);
          long long v122 = v42;
          uint64_t v123 = *(void *)(v10 + 64);
          uint64_t result = (*a3)(&v119, v11);
          if (result)
          {
            unint64_t v12 = v10;
            do
            {
              v12 += 72;
              uint64_t result = (*a3)(&v119, (long long *)v12);
            }
            while ((result & 1) == 0);
          }
          else
          {
            uint64_t v43 = (long long *)(v10 + 72);
            do
            {
              unint64_t v12 = (unint64_t)v43;
              if ((unint64_t)v43 >= a2) {
                break;
              }
              uint64_t result = (*a3)(&v119, v43);
              uint64_t v43 = (long long *)(v12 + 72);
            }
            while (!result);
          }
          unint64_t v44 = a2;
          if (v12 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              v44 -= 72;
              uint64_t result = (*a3)(&v119, (long long *)v44);
            }
            while ((result & 1) != 0);
          }
          while (v12 < v44)
          {
            uint64_t v45 = *(void *)(v12 + 64);
            long long v46 = *(_OWORD *)(v44 + 32);
            long long v47 = *(_OWORD *)v12;
            *(_OWORD *)unint64_t v12 = *(_OWORD *)v44;
            long long v48 = *(_OWORD *)(v44 + 16);
            long long v49 = *(_OWORD *)(v12 + 32);
            *(_OWORD *)(v12 + 32) = v46;
            *(_OWORD *)(v44 + 32) = v49;
            long long v50 = *(_OWORD *)(v12 + 16);
            *(_OWORD *)(v12 + 16) = v48;
            long long v51 = *(_OWORD *)(v12 + 48);
            *(_OWORD *)(v12 + 48) = *(_OWORD *)(v44 + 48);
            *(void *)(v12 + 64) = *(void *)(v44 + 64);
            *(_OWORD *)unint64_t v44 = v47;
            *(_OWORD *)(v44 + 16) = v50;
            *(_OWORD *)(v44 + 48) = v51;
            *(void *)(v44 + 64) = v45;
            do
              v12 += 72;
            while (!(*a3)(&v119, (long long *)v12));
            do
            {
              v44 -= 72;
              uint64_t result = (*a3)(&v119, (long long *)v44);
            }
            while ((result & 1) != 0);
          }
          int v52 = (long long *)(v12 - 72);
          if (v12 - 72 != v10)
          {
            *(_OWORD *)uint64_t v10 = *(_OWORD *)(v12 - 72);
            *(_OWORD *)(v10 + 32) = *(_OWORD *)(v12 - 40);
            *(_OWORD *)(v10 + 16) = *(_OWORD *)(v12 - 56);
            *(_OWORD *)(v10 + 48) = *(_OWORD *)(v12 - 24);
            *(void *)(v10 + 64) = *(void *)(v12 - 8);
          }
          BOOL v5 = v52 >= &v119;
          BOOL v6 = v52 == &v119;
          if (v52 != &v119)
          {
            *(_OWORD *)(v12 - 72) = v119;
            *(_OWORD *)(v12 - 40) = v121;
            *(_OWORD *)(v12 - 56) = v120;
            *(_OWORD *)(v12 - 24) = v122;
            *(void *)(v12 - 8) = v123;
          }
          a5 = 0;
        }
        sub_1C4B8F9C8((long long *)(v10 + 72 * (v14 >> 1)), (long long *)v10, v11, a3);
        --a4;
        a2 = v114;
        if ((a5 & 1) == 0) {
          goto LABEL_14;
        }
LABEL_15:
        uint64_t v27 = 0;
        long long v28 = *(_OWORD *)(v10 + 16);
        long long v119 = *(_OWORD *)v10;
        long long v120 = v28;
        long long v29 = *(_OWORD *)(v10 + 48);
        long long v121 = *(_OWORD *)(v10 + 32);
        long long v122 = v29;
        uint64_t v123 = *(void *)(v10 + 64);
        do
          v27 += 72;
        while (((*a3)((long long *)(v27 + v10), &v119) & 1) != 0);
        unint64_t v30 = v10 + v27;
        unint64_t v31 = (long long *)a2;
        if (v27 == 72)
        {
          unint64_t v31 = (long long *)a2;
          do
          {
            if (v30 >= (unint64_t)v31) {
              break;
            }
            unint64_t v31 = (long long *)((char *)v31 - 72);
          }
          while (((*a3)(v31, &v119) & 1) == 0);
        }
        else
        {
          do
            unint64_t v31 = (long long *)((char *)v31 - 72);
          while (!(*a3)(v31, &v119));
        }
        unint64_t v12 = v10 + v27;
        if (v30 < (unint64_t)v31)
        {
          unint64_t v32 = (unint64_t)v31;
          do
          {
            uint64_t v33 = *(void *)(v12 + 64);
            long long v34 = *(_OWORD *)(v32 + 32);
            long long v35 = *(_OWORD *)v12;
            *(_OWORD *)unint64_t v12 = *(_OWORD *)v32;
            long long v36 = *(_OWORD *)(v32 + 16);
            long long v37 = *(_OWORD *)(v12 + 32);
            *(_OWORD *)(v12 + 32) = v34;
            *(_OWORD *)(v32 + 32) = v37;
            long long v38 = *(_OWORD *)(v12 + 16);
            *(_OWORD *)(v12 + 16) = v36;
            long long v39 = *(_OWORD *)(v12 + 48);
            *(_OWORD *)(v12 + 48) = *(_OWORD *)(v32 + 48);
            *(void *)(v12 + 64) = *(void *)(v32 + 64);
            *(_OWORD *)unint64_t v32 = v35;
            *(_OWORD *)(v32 + 16) = v38;
            *(_OWORD *)(v32 + 48) = v39;
            *(void *)(v32 + 64) = v33;
            do
              v12 += 72;
            while (((*a3)((long long *)v12, &v119) & 1) != 0);
            do
              v32 -= 72;
            while (!(*a3)((long long *)v32, &v119));
          }
          while (v12 < v32);
        }
        if (v12 - 72 != v10)
        {
          *(_OWORD *)uint64_t v10 = *(_OWORD *)(v12 - 72);
          *(_OWORD *)(v10 + 32) = *(_OWORD *)(v12 - 40);
          *(_OWORD *)(v10 + 16) = *(_OWORD *)(v12 - 56);
          *(_OWORD *)(v10 + 48) = *(_OWORD *)(v12 - 24);
          *(void *)(v10 + 64) = *(void *)(v12 - 8);
        }
        if ((long long *)(v12 - 72) != &v119)
        {
          *(_OWORD *)(v12 - 72) = v119;
          *(_OWORD *)(v12 - 40) = v121;
          *(_OWORD *)(v12 - 56) = v120;
          *(_OWORD *)(v12 - 24) = v122;
          *(void *)(v12 - 8) = v123;
        }
        if (v30 >= (unint64_t)v31) {
          break;
        }
LABEL_36:
        uint64_t result = sub_1C4B8ECEC(v10, v12 - 72, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v40 = sub_1C4B8FBD0(v10, v12 - 72, a3);
      uint64_t result = sub_1C4B8FBD0(v12, a2, a3);
      if (result) {
        break;
      }
      if (!v40) {
        goto LABEL_36;
      }
    }
    a2 = v12 - 72;
    if (!v40) {
      continue;
    }
    return result;
  }
}

uint64_t sub_1C4B8F9C8(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    uint64_t v11 = *(void *)a1;
    uint64_t v10 = *((void *)a1 + 1);
    uint64_t v13 = *((void *)a1 + 2);
    uint64_t v12 = *((void *)a1 + 3);
    uint64_t v15 = *((void *)a1 + 4);
    uint64_t v14 = *((void *)a1 + 5);
    uint64_t v17 = *((void *)a1 + 6);
    uint64_t v16 = *((void *)a1 + 7);
    uint64_t v18 = *((void *)a1 + 8);
    if (result)
    {
      if (a1 != a3)
      {
        *a1 = *a3;
        long long v19 = a3[2];
        a1[1] = a3[1];
        a1[2] = v19;
        a1[3] = a3[3];
        *((void *)a1 + 8) = *((void *)a3 + 8);
      }
      *(void *)a3 = v11;
      *((void *)a3 + 1) = v10;
      *((void *)a3 + 4) = v15;
      *((void *)a3 + 5) = v14;
      *((void *)a3 + 2) = v13;
      *((void *)a3 + 3) = v12;
      *((void *)a3 + 6) = v17;
      *((void *)a3 + 7) = v16;
      *((void *)a3 + 8) = v18;
    }
    else
    {
      if (a1 != a2)
      {
        *a1 = *a2;
        long long v32 = a2[2];
        a1[1] = a2[1];
        a1[2] = v32;
        a1[3] = a2[3];
        *((void *)a1 + 8) = *((void *)a2 + 8);
      }
      *(void *)a2 = v11;
      *((void *)a2 + 1) = v10;
      *((void *)a2 + 4) = v15;
      *((void *)a2 + 5) = v14;
      *((void *)a2 + 2) = v13;
      *((void *)a2 + 3) = v12;
      *((void *)a2 + 6) = v17;
      *((void *)a2 + 7) = v16;
      *((void *)a2 + 8) = v18;
      uint64_t result = (*a4)(a3, a2);
      if (result)
      {
        long long v34 = *a2;
        long long v33 = a2[1];
        long long v35 = a2[2];
        long long v36 = a2[3];
        uint64_t v37 = *((void *)a2 + 8);
        if (a2 != a3)
        {
          *a2 = *a3;
          long long v38 = a3[2];
          a2[1] = a3[1];
          a2[2] = v38;
          a2[3] = a3[3];
          *((void *)a2 + 8) = *((void *)a3 + 8);
        }
        *a3 = v34;
        a3[1] = v33;
        a3[2] = v35;
        a3[3] = v36;
        *((void *)a3 + 8) = v37;
      }
    }
  }
  else if (result)
  {
    long long v21 = *a2;
    long long v20 = a2[1];
    long long v22 = a2[2];
    long long v23 = a2[3];
    uint64_t v24 = *((void *)a2 + 8);
    if (a2 != a3)
    {
      *a2 = *a3;
      long long v25 = a3[2];
      a2[1] = a3[1];
      a2[2] = v25;
      a2[3] = a3[3];
      *((void *)a2 + 8) = *((void *)a3 + 8);
    }
    *a3 = v21;
    a3[1] = v20;
    a3[2] = v22;
    a3[3] = v23;
    *((void *)a3 + 8) = v24;
    uint64_t result = (*a4)(a2, a1);
    if (result)
    {
      long long v27 = *a1;
      long long v26 = a1[1];
      long long v28 = a1[2];
      long long v29 = a1[3];
      uint64_t v30 = *((void *)a1 + 8);
      if (a1 != a2)
      {
        *a1 = *a2;
        long long v31 = a2[2];
        a1[1] = a2[1];
        a1[2] = v31;
        a1[3] = a2[3];
        *((void *)a1 + 8) = *((void *)a2 + 8);
      }
      *a2 = v27;
      a2[1] = v26;
      a2[2] = v28;
      a2[3] = v29;
      *((void *)a2 + 8) = v30;
    }
  }
  return result;
}

BOOL sub_1C4B8FBD0(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x8E38E38E38E38E39 * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = a2 - 72;
      if (!(*a3)((long long *)(a2 - 72), (long long *)a1)) {
        return 1;
      }
      long long v10 = *(_OWORD *)a1;
      long long v9 = *(_OWORD *)(a1 + 16);
      long long v12 = *(_OWORD *)(a1 + 32);
      long long v11 = *(_OWORD *)(a1 + 48);
      uint64_t v13 = *(void *)(a1 + 64);
      if (v8 != a1)
      {
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 72);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 - 56);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 64) = *(void *)(a2 - 8);
      }
      *(_OWORD *)(a2 - 72) = v10;
      *(_OWORD *)(a2 - 40) = v12;
      *(_OWORD *)(a2 - 56) = v9;
      *(_OWORD *)(a2 - 24) = v11;
      BOOL result = 1;
      *(void *)(a2 - 8) = v13;
      return result;
    case 3uLL:
      sub_1C4B8F9C8((long long *)a1, (long long *)(a1 + 72), (long long *)(a2 - 72), a3);
      return 1;
    case 4uLL:
      sub_1C4B8FE58(a1, a1 + 72, a1 + 144, a2 - 72, a3);
      return 1;
    case 5uLL:
      sub_1C4B8FF9C(a1, a1 + 72, a1 + 144, a1 + 216, a2 - 72, a3);
      return 1;
    default:
      uint64_t v14 = (long long *)(a1 + 144);
      sub_1C4B8F9C8((long long *)a1, (long long *)(a1 + 72), (long long *)(a1 + 144), a3);
      uint64_t v15 = a1 + 216;
      if (a1 + 216 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((long long *)v15, v14))
    {
      long long v18 = *(_OWORD *)(v15 + 16);
      long long v27 = *(_OWORD *)v15;
      long long v28 = v18;
      long long v19 = *(_OWORD *)(v15 + 48);
      long long v29 = *(_OWORD *)(v15 + 32);
      long long v30 = v19;
      uint64_t v31 = *(void *)(v15 + 64);
      uint64_t v20 = v16;
      while (1)
      {
        uint64_t v21 = a1 + v20;
        long long v22 = *(_OWORD *)(a1 + v20 + 160);
        *(_OWORD *)(v21 + 216) = *(_OWORD *)(a1 + v20 + 144);
        long long v23 = *(_OWORD *)(a1 + v20 + 192);
        *(_OWORD *)(v21 + 248) = *(_OWORD *)(a1 + v20 + 176);
        *(_OWORD *)(v21 + 232) = v22;
        *(_OWORD *)(a1 + v20 + 264) = v23;
        *(void *)(v21 + 280) = *(void *)(a1 + v20 + 208);
        if (v20 == -144) {
          break;
        }
        v20 -= 72;
        if (((*a3)(&v27, (long long *)(v21 + 72)) & 1) == 0)
        {
          uint64_t v24 = a1 + v20 + 216;
          if ((long long *)v24 == &v27) {
            goto LABEL_8;
          }
          goto LABEL_17;
        }
      }
      uint64_t v24 = a1;
      if ((long long *)a1 == &v27) {
        goto LABEL_8;
      }
LABEL_17:
      long long v25 = v28;
      *(_OWORD *)uint64_t v24 = v27;
      *(_OWORD *)(v24 + 16) = v25;
      long long v26 = v30;
      *(_OWORD *)(v24 + 32) = v29;
      *(_OWORD *)(v24 + 48) = v26;
      *(void *)(v24 + 64) = v31;
LABEL_8:
      if (++v17 == 8) {
        return v15 + 72 == a2;
      }
    }
    uint64_t v14 = (long long *)v15;
    v16 += 72;
    v15 += 72;
    if (v15 == a2) {
      return 1;
    }
  }
}

uint64_t sub_1C4B8FE58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(long long *, long long *))
{
  sub_1C4B8F9C8((long long *)a1, (long long *)a2, (long long *)a3, a5);
  uint64_t result = (*a5)((long long *)a4, (long long *)a3);
  if (result)
  {
    long long v12 = *(_OWORD *)a3;
    long long v11 = *(_OWORD *)(a3 + 16);
    long long v13 = *(_OWORD *)(a3 + 32);
    long long v14 = *(_OWORD *)(a3 + 48);
    uint64_t v15 = *(void *)(a3 + 64);
    if (a3 != a4)
    {
      *(_OWORD *)a3 = *(_OWORD *)a4;
      long long v16 = *(_OWORD *)(a4 + 32);
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(a4 + 16);
      *(_OWORD *)(a3 + 32) = v16;
      *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
      *(void *)(a3 + 64) = *(void *)(a4 + 64);
    }
    *(_OWORD *)a4 = v12;
    *(_OWORD *)(a4 + 16) = v11;
    *(_OWORD *)(a4 + 32) = v13;
    *(_OWORD *)(a4 + 48) = v14;
    *(void *)(a4 + 64) = v15;
    uint64_t result = (*a5)((long long *)a3, (long long *)a2);
    if (result)
    {
      long long v18 = *(_OWORD *)a2;
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v19 = *(_OWORD *)(a2 + 32);
      long long v20 = *(_OWORD *)(a2 + 48);
      uint64_t v21 = *(void *)(a2 + 64);
      if (a2 != a3)
      {
        *(_OWORD *)a2 = *(_OWORD *)a3;
        long long v22 = *(_OWORD *)(a3 + 32);
        *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
        *(_OWORD *)(a2 + 32) = v22;
        *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
        *(void *)(a2 + 64) = *(void *)(a3 + 64);
      }
      *(_OWORD *)a3 = v18;
      *(_OWORD *)(a3 + 16) = v17;
      *(_OWORD *)(a3 + 32) = v19;
      *(_OWORD *)(a3 + 48) = v20;
      *(void *)(a3 + 64) = v21;
      uint64_t result = (*a5)((long long *)a2, (long long *)a1);
      if (result)
      {
        long long v24 = *(_OWORD *)a1;
        long long v23 = *(_OWORD *)(a1 + 16);
        long long v25 = *(_OWORD *)(a1 + 32);
        long long v26 = *(_OWORD *)(a1 + 48);
        uint64_t v27 = *(void *)(a1 + 64);
        if (a1 != a2)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
          long long v28 = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
          *(_OWORD *)(a1 + 32) = v28;
          *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
          *(void *)(a1 + 64) = *(void *)(a2 + 64);
        }
        *(_OWORD *)a2 = v24;
        *(_OWORD *)(a2 + 16) = v23;
        *(_OWORD *)(a2 + 32) = v25;
        *(_OWORD *)(a2 + 48) = v26;
        *(void *)(a2 + 64) = v27;
      }
    }
  }
  return result;
}

uint64_t sub_1C4B8FF9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(long long *, long long *))
{
  sub_1C4B8FE58(a1, a2, a3, a4, a6);
  uint64_t result = (*a6)((long long *)a5, (long long *)a4);
  if (result)
  {
    long long v14 = *(_OWORD *)a4;
    long long v13 = *(_OWORD *)(a4 + 16);
    long long v15 = *(_OWORD *)(a4 + 32);
    long long v16 = *(_OWORD *)(a4 + 48);
    uint64_t v17 = *(void *)(a4 + 64);
    if (a4 != a5)
    {
      *(_OWORD *)a4 = *(_OWORD *)a5;
      long long v18 = *(_OWORD *)(a5 + 32);
      *(_OWORD *)(a4 + 16) = *(_OWORD *)(a5 + 16);
      *(_OWORD *)(a4 + 32) = v18;
      *(_OWORD *)(a4 + 48) = *(_OWORD *)(a5 + 48);
      *(void *)(a4 + 64) = *(void *)(a5 + 64);
    }
    *(_OWORD *)a5 = v14;
    *(_OWORD *)(a5 + 16) = v13;
    *(_OWORD *)(a5 + 32) = v15;
    *(_OWORD *)(a5 + 48) = v16;
    *(void *)(a5 + 64) = v17;
    uint64_t result = (*a6)((long long *)a4, (long long *)a3);
    if (result)
    {
      long long v20 = *(_OWORD *)a3;
      long long v19 = *(_OWORD *)(a3 + 16);
      long long v21 = *(_OWORD *)(a3 + 32);
      long long v22 = *(_OWORD *)(a3 + 48);
      uint64_t v23 = *(void *)(a3 + 64);
      if (a3 != a4)
      {
        *(_OWORD *)a3 = *(_OWORD *)a4;
        long long v24 = *(_OWORD *)(a4 + 32);
        *(_OWORD *)(a3 + 16) = *(_OWORD *)(a4 + 16);
        *(_OWORD *)(a3 + 32) = v24;
        *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
        *(void *)(a3 + 64) = *(void *)(a4 + 64);
      }
      *(_OWORD *)a4 = v20;
      *(_OWORD *)(a4 + 16) = v19;
      *(_OWORD *)(a4 + 32) = v21;
      *(_OWORD *)(a4 + 48) = v22;
      *(void *)(a4 + 64) = v23;
      uint64_t result = (*a6)((long long *)a3, (long long *)a2);
      if (result)
      {
        long long v26 = *(_OWORD *)a2;
        long long v25 = *(_OWORD *)(a2 + 16);
        long long v27 = *(_OWORD *)(a2 + 32);
        long long v28 = *(_OWORD *)(a2 + 48);
        uint64_t v29 = *(void *)(a2 + 64);
        if (a2 != a3)
        {
          *(_OWORD *)a2 = *(_OWORD *)a3;
          long long v30 = *(_OWORD *)(a3 + 32);
          *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
          *(_OWORD *)(a2 + 32) = v30;
          *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
          *(void *)(a2 + 64) = *(void *)(a3 + 64);
        }
        *(_OWORD *)a3 = v26;
        *(_OWORD *)(a3 + 16) = v25;
        *(_OWORD *)(a3 + 32) = v27;
        *(_OWORD *)(a3 + 48) = v28;
        *(void *)(a3 + 64) = v29;
        uint64_t result = (*a6)((long long *)a2, (long long *)a1);
        if (result)
        {
          long long v32 = *(_OWORD *)a1;
          long long v31 = *(_OWORD *)(a1 + 16);
          long long v33 = *(_OWORD *)(a1 + 32);
          long long v34 = *(_OWORD *)(a1 + 48);
          uint64_t v35 = *(void *)(a1 + 64);
          if (a1 != a2)
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
            long long v36 = *(_OWORD *)(a2 + 32);
            *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
            *(_OWORD *)(a1 + 32) = v36;
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
            *(void *)(a1 + 64) = *(void *)(a2 + 64);
          }
          *(_OWORD *)a2 = v32;
          *(_OWORD *)(a2 + 16) = v31;
          *(_OWORD *)(a2 + 32) = v33;
          *(_OWORD *)(a2 + 48) = v34;
          *(void *)(a2 + 64) = v35;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C4B90138(uint64_t result, int8x16_t *a2, unsigned int (**a3)(uint64_t), uint64_t a4, int a5)
{
  long long v10 = (int8x16_t *)result;
  while (2)
  {
    long long v11 = v10;
LABEL_3:
    long long v12 = a2;
LABEL_4:
    int v126 = a5;
    while (1)
    {
      long long v10 = v11;
      uint64_t v13 = (char *)v12 - (char *)v11;
      uint64_t v14 = ((char *)v12 - (char *)v11) >> 3;
      if (v6 || !v5)
      {
        switch(v14)
        {
          case 0:
          case 1:
            return result;
          case 2:
            uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[1], v11->i64[0]);
            if (!result) {
              return result;
            }
            uint64_t v77 = v11->i64[0];
            uint64_t v78 = a2;
            v11->i64[0] = a2[-1].i64[1];
            goto LABEL_175;
          case 3:
            char v79 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v11->i64[1], v11->i64[0]);
            uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[1], v11->i64[1]);
            if (v79)
            {
              uint64_t v80 = v11->i64[0];
              if (result)
              {
                v11->i64[0] = a2[-1].i64[1];
                a2[-1].i64[1] = v80;
              }
              else
              {
                v11->i64[0] = v11->i64[1];
                v11->i64[1] = v80;
                uint64_t result = ((uint64_t (*)(uint64_t))*a3)(a2[-1].i64[1]);
                if (result)
                {
                  uint64_t v77 = v11->i64[1];
                  uint64_t v78 = a2;
                  v11->i64[1] = a2[-1].i64[1];
LABEL_175:
                  v78[-1].i64[1] = v77;
                }
              }
            }
            else if (result)
            {
              uint64_t v119 = v11->i64[1];
              v11->i64[1] = a2[-1].i64[1];
              a2[-1].i64[1] = v119;
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v11->i64[1], v11->i64[0]);
LABEL_164:
              if (result) {
                *long long v11 = vextq_s8(*v11, *v11, 8uLL);
              }
            }
            break;
          case 4:
            return sub_1C49A2DA4(v11, &v11->i64[1], (int8x16_t *)v11[1].i64, &a2[-1].i64[1], a3);
          case 5:
            unint64_t v81 = v11 + 1;
            uint64_t v82 = &v11[1].i64[1];
            sub_1C49A2DA4(v11, &v11->i64[1], (int8x16_t *)v11[1].i64, &v11[1].i64[1], a3);
            uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[1], v11[1].i64[1]);
            if (!result) {
              return result;
            }
            uint64_t v83 = *v82;
            *uint64_t v82 = a2[-1].i64[1];
            a2[-1].i64[1] = v83;
            uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v82, v81->i64[0]);
            if (!result) {
              return result;
            }
            uint64_t v84 = v81->i64[0];
            v81->i64[0] = *v82;
            *uint64_t v82 = v84;
            uint64_t result = ((uint64_t (*)(void))*a3)();
            if (!result) {
              return result;
            }
            uint64_t v86 = v11->i64[1];
            uint64_t v85 = v11[1].i64[0];
            uint64_t v87 = v11->i64[0];
            v11->i64[1] = v85;
            v11[1].i64[0] = v86;
            uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v85, v87);
            goto LABEL_164;
          default:
            JUMPOUT(0);
        }
        return result;
      }
      if (v13 <= 191)
      {
        uint64_t v88 = (int8x16_t *)&v11->u64[1];
        BOOL v90 = v11 == v12 || v88 == v12;
        if (a5)
        {
          if (!v90)
          {
            uint64_t v91 = 0;
            unint64_t v92 = (uint64_t *)v11;
            do
            {
              uint64_t v95 = *v92;
              uint64_t v94 = v92[1];
              unint64_t v92 = (uint64_t *)v88;
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v94, v95);
              if (result)
              {
                uint64_t v96 = *v92;
                uint64_t v97 = v91;
                do
                {
                  *(uint64_t *)((char *)&v11->i64[1] + v97) = *(uint64_t *)((char *)v11->i64 + v97);
                  if (!v97)
                  {
                    uint64_t v93 = (uint64_t *)v11;
                    goto LABEL_123;
                  }
                  uint64_t result = ((uint64_t (*)(uint64_t, void))*a3)(v96, *(uint64_t *)((char *)&v11->i64[-1] + v97));
                  v97 -= 8;
                }
                while ((result & 1) != 0);
                uint64_t v93 = (uint64_t *)((char *)&v11->i64[1] + v97);
LABEL_123:
                uint64_t *v93 = v96;
              }
              uint64_t v88 = (int8x16_t *)(v92 + 1);
              v91 += 8;
            }
            while (v92 + 1 != (uint64_t *)a2);
          }
        }
        else if (!v90)
        {
          do
          {
            uint64_t v121 = v10->i64[0];
            uint64_t v120 = v10->i64[1];
            long long v10 = v88;
            uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v120, v121);
            if (result)
            {
              uint64_t v122 = v10->i64[0];
              uint64_t v123 = (uint64_t *)v10;
              do
              {
                int v124 = v123;
                uint64_t v125 = *--v123;
                *int v124 = v125;
                uint64_t result = ((uint64_t (*)(uint64_t, void))*a3)(v122, *(v124 - 2));
              }
              while ((result & 1) != 0);
              *uint64_t v123 = v122;
            }
            uint64_t v88 = (int8x16_t *)&v10->u64[1];
          }
          while (&v10->u64[1] != (unint64_t *)a2);
        }
        return result;
      }
      if (!a4)
      {
        if (v11 != v12)
        {
          int64_t v98 = (unint64_t)(v14 - 2) >> 1;
          int64_t v129 = v98;
          do
          {
            if (v129 >= v98)
            {
              uint64_t v100 = (2 * v98) | 1;
              uint64_t v101 = &v10->i64[v100];
              if (2 * v98 + 2 < v14 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v101, v101[1]))
              {
                ++v101;
                uint64_t v100 = 2 * v98 + 2;
              }
              long long v102 = &v10->i64[v98];
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v101, *v102);
              if ((result & 1) == 0)
              {
                uint64_t v127 = *v102;
                do
                {
                  long long v103 = v101;
                  uint64_t *v102 = *v101;
                  if (v129 < v100) {
                    break;
                  }
                  uint64_t v104 = (2 * v100) | 1;
                  uint64_t v101 = &v10->i64[v104];
                  uint64_t v105 = 2 * v100 + 2;
                  if (v105 < v14 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v101, v101[1]))
                  {
                    ++v101;
                    uint64_t v104 = v105;
                  }
                  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v101, v127);
                  long long v102 = v103;
                  uint64_t v100 = v104;
                }
                while (!result);
                *long long v103 = v127;
              }
            }
            BOOL v99 = v98-- <= 0;
          }
          while (!v99);
          uint64_t v106 = (unint64_t)v13 >> 3;
          do
          {
            uint64_t v107 = 0;
            uint64_t v108 = v10->i64[0];
            uint64_t v109 = (uint64_t *)v10;
            do
            {
              uint64_t v110 = &v109[v107 + 1];
              uint64_t v111 = (2 * v107) | 1;
              uint64_t v112 = 2 * v107 + 2;
              if (v112 < v106)
              {
                uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v109[v107 + 1], v109[v107 + 2]);
                if (result)
                {
                  ++v110;
                  uint64_t v111 = v112;
                }
              }
              uint64_t *v109 = *v110;
              uint64_t v109 = v110;
              uint64_t v107 = v111;
            }
            while (v111 <= (uint64_t)((unint64_t)(v106 - 2) >> 1));
            uint64_t v113 = &a2[-1].i64[1];
            BOOL v6 = v110 == (uint64_t *)&a2[-1].u64[1];
            a2 = (int8x16_t *)((char *)a2 - 8);
            if (v6)
            {
              uint64_t *v110 = v108;
            }
            else
            {
              uint64_t *v110 = *v113;
              uint64_t *v113 = v108;
              uint64_t v114 = (char *)v110 - (char *)v10 + 8;
              if (v114 >= 9)
              {
                unint64_t v115 = (((unint64_t)v114 >> 3) - 2) >> 1;
                char v116 = &v10->i64[v115];
                uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v116, *v110);
                if (result)
                {
                  uint64_t v117 = *v110;
                  do
                  {
                    uint64_t v118 = v116;
                    uint64_t *v110 = *v116;
                    if (!v115) {
                      break;
                    }
                    unint64_t v115 = (v115 - 1) >> 1;
                    char v116 = &v10->i64[v115];
                    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v116, v117);
                    uint64_t v110 = v118;
                  }
                  while ((result & 1) != 0);
                  uint64_t *v118 = v117;
                }
              }
            }
            BOOL v99 = v106-- <= 2;
          }
          while (!v99);
        }
        return result;
      }
      unint64_t v15 = (unint64_t)v14 >> 1;
      long long v16 = *a3;
      if ((unint64_t)v13 >= 0x401)
      {
        char v17 = ((uint64_t (*)(uint64_t, uint64_t))v16)(v10->i64[v15], v10->i64[0]);
        int v18 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v12[-1].i64[1], v10->i64[v15]);
        uint64_t v128 = a4;
        if (v17)
        {
          uint64_t v19 = v10->i64[0];
          if (v18)
          {
            v10->i64[0] = v12[-1].i64[1];
            v12[-1].i64[1] = v19;
          }
          else
          {
            v10->i64[0] = v10->i64[v15];
            v10->i64[v15] = v19;
            if ((*a3)(v12[-1].i64[1]))
            {
              uint64_t v28 = v10->i64[v15];
              v10->i64[v15] = v12[-1].i64[1];
              v12[-1].i64[1] = v28;
            }
          }
        }
        else if (v18)
        {
          uint64_t v24 = v10->i64[v15];
          v10->i64[v15] = v12[-1].i64[1];
          v12[-1].i64[1] = v24;
          if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v10->i64[v15], v10->i64[0]))
          {
            uint64_t v25 = v10->i64[0];
            v10->i64[0] = v10->i64[v15];
            v10->i64[v15] = v25;
          }
        }
        unint64_t v29 = v15 - 1;
        uint64_t v30 = v15 - 1;
        char v31 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10->i64[v30], v10->i64[1]);
        int v32 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v12[-1].i64[0], v10->i64[v30]);
        if (v31)
        {
          uint64_t v33 = v10->i64[1];
          if (v32)
          {
            v10->i64[1] = v12[-1].i64[0];
            v12[-1].i64[0] = v33;
          }
          else
          {
            v10->i64[1] = v10->i64[v30];
            v10->i64[v30] = v33;
            if ((*a3)(v12[-1].i64[0]))
            {
              uint64_t v37 = v10->i64[v30];
              v10->i64[v30] = v12[-1].i64[0];
              v12[-1].i64[0] = v37;
            }
          }
        }
        else if (v32)
        {
          uint64_t v34 = v10->i64[v30];
          v10->i64[v30] = v12[-1].i64[0];
          v12[-1].i64[0] = v34;
          if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v10->i64[v30], v10->i64[1]))
          {
            uint64_t v35 = v10->i64[1];
            v10->i64[1] = v10->i64[v30];
            v10->i64[v30] = v35;
          }
        }
        long long v38 = v12;
        unint64_t v39 = v15 + 1;
        uint64_t v40 = v15 + 1;
        char v41 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10->i64[v40], v10[1].i64[0]);
        int v42 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v38[-2].i64[1], v10->i64[v40]);
        if (v41)
        {
          uint64_t v43 = v10[1].i64[0];
          if (v42)
          {
            v10[1].i64[0] = a2[-2].i64[1];
            a2[-2].i64[1] = v43;
          }
          else
          {
            v10[1].i64[0] = v10->i64[v40];
            v10->i64[v40] = v43;
            if ((*a3)(a2[-2].i64[1]))
            {
              uint64_t v46 = v10->i64[v40];
              v10->i64[v40] = a2[-2].i64[1];
              a2[-2].i64[1] = v46;
            }
          }
        }
        else if (v42)
        {
          uint64_t v44 = v10->i64[v40];
          v10->i64[v40] = a2[-2].i64[1];
          a2[-2].i64[1] = v44;
          if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v10->i64[v40], v10[1].i64[0]))
          {
            uint64_t v45 = v10[1].i64[0];
            v10[1].i64[0] = v10->i64[v40];
            v10->i64[v40] = v45;
          }
        }
        char v47 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10->i64[v15], v10->i64[v29]);
        int v48 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10->i64[v39], v10->i64[v15]);
        if (v47)
        {
          uint64_t v49 = v10->i64[v29];
          if (v48)
          {
            v10->i64[v29] = v10->i64[v40];
            v10->i64[v40] = v49;
            uint64_t v50 = v10->i64[v15];
          }
          else
          {
            v10->i64[v29] = v10->i64[v15];
            v10->i64[v15] = v49;
            unsigned int v53 = (*a3)(v10->i64[v39]);
            uint64_t v50 = v10->i64[v15];
            if (v53)
            {
              uint64_t v54 = v10->i64[v40];
              v10->i64[v15] = v54;
              v10->i64[v40] = v50;
              uint64_t v50 = v54;
            }
          }
          long long v12 = a2;
        }
        else
        {
          uint64_t v50 = v10->i64[v15];
          long long v12 = a2;
          if (v48)
          {
            v10->i64[v15] = v10->i64[v40];
            v10->i64[v40] = v50;
            int v51 = ((uint64_t (*)(void))*a3)();
            uint64_t v50 = v10->i64[v15];
            if (v51)
            {
              uint64_t v52 = v10->i64[v30];
              v10->i64[v30] = v50;
              v10->i64[v15] = v52;
              uint64_t v50 = v52;
            }
          }
        }
        a5 = v126;
        uint64_t v55 = v10->i64[0];
        v10->i64[0] = v50;
        v10->i64[v15] = v55;
        a4 = v128 - 1;
        uint64_t v23 = v10->i64[0];
        if (v126) {
          goto LABEL_58;
        }
        goto LABEL_57;
      }
      char v20 = ((uint64_t (*)(uint64_t, uint64_t))v16)(v10->i64[0], v10->i64[v15]);
      int v21 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v12[-1].i64[1], v10->i64[0]);
      if (v20)
      {
        uint64_t v22 = v10->i64[v15];
        if (v21)
        {
          v10->i64[v15] = v12[-1].i64[1];
          v12[-1].i64[1] = v22;
          --a4;
          uint64_t v23 = v10->i64[0];
          if (a5) {
            goto LABEL_58;
          }
          goto LABEL_57;
        }
        v10->i64[v15] = v10->i64[0];
        v10->i64[0] = v22;
        if ((*a3)(v12[-1].i64[1]))
        {
          uint64_t v36 = v10->i64[0];
          v10->i64[0] = v12[-1].i64[1];
          v12[-1].i64[1] = v36;
        }
      }
      else if (v21)
      {
        uint64_t v26 = v10->i64[0];
        v10->i64[0] = v12[-1].i64[1];
        v12[-1].i64[1] = v26;
        if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v10->i64[0], v10->i64[v15]))
        {
          uint64_t v27 = v10->i64[v15];
          v10->i64[v15] = v10->i64[0];
          v10->i64[0] = v27;
          --a4;
          uint64_t v23 = v27;
          if (a5) {
            goto LABEL_58;
          }
          goto LABEL_57;
        }
      }
      --a4;
      uint64_t v23 = v10->i64[0];
      if (a5) {
        goto LABEL_58;
      }
LABEL_57:
      char v56 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10[-1].i64[1], v23);
      uint64_t v23 = v10->i64[0];
      if ((v56 & 1) == 0)
      {
        uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10->i64[0], v12[-1].i64[1]);
        if (result)
        {
          long long v11 = v10;
          do
          {
            uint64_t v70 = v11->i64[1];
            long long v11 = (int8x16_t *)((char *)v11 + 8);
            uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v23, v70);
          }
          while ((result & 1) == 0);
        }
        else
        {
          int64_t v71 = (int8x16_t *)&v10->u64[1];
          do
          {
            long long v11 = v71;
            if (v71 >= v12) {
              break;
            }
            int64_t v71 = (int8x16_t *)((char *)v71 + 8);
            uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v23, v11->i64[0]);
          }
          while (!result);
        }
        if (v11 < v12)
        {
          long long v12 = a2;
          do
          {
            uint64_t v72 = v12[-1].i64[1];
            long long v12 = (int8x16_t *)((char *)v12 - 8);
            uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v23, v72);
          }
          while ((result & 1) != 0);
        }
        while (v11 < v12)
        {
          uint64_t v73 = v11->i64[0];
          v11->i64[0] = v12->i64[0];
          v12->i64[0] = v73;
          do
          {
            uint64_t v74 = v11->i64[1];
            long long v11 = (int8x16_t *)((char *)v11 + 8);
          }
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v23, v74));
          do
          {
            uint64_t v75 = v12[-1].i64[1];
            long long v12 = (int8x16_t *)((char *)v12 - 8);
            uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v23, v75);
          }
          while ((result & 1) != 0);
        }
        uint64_t v76 = &v11[-1].i64[1];
        BOOL v5 = &v11[-1].u64[1] >= (unint64_t *)v10;
        BOOL v6 = &v11[-1].u64[1] == (unint64_t *)v10;
        if (&v11[-1].u64[1] != (unint64_t *)v10) {
          v10->i64[0] = *v76;
        }
        a5 = 0;
        *uint64_t v76 = v23;
        goto LABEL_3;
      }
LABEL_58:
      uint64_t v57 = 0;
      do
        char v58 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10->i64[++v57], v23);
      while ((v58 & 1) != 0);
      uint64_t v59 = (int8x16_t *)((char *)v10 + v57 * 8);
      unint64_t v60 = v12;
      if (v57 == 1)
      {
        unint64_t v60 = v12;
        do
        {
          if (v59 >= v60) {
            break;
          }
          uint64_t v62 = v60[-1].i64[1];
          unint64_t v60 = (int8x16_t *)((char *)v60 - 8);
        }
        while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v62, v23) & 1) == 0);
      }
      else
      {
        do
        {
          uint64_t v61 = v60[-1].i64[1];
          unint64_t v60 = (int8x16_t *)((char *)v60 - 8);
        }
        while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v61, v23));
      }
      if (v59 >= v60)
      {
        uint64_t v68 = &v59[-1].i64[1];
        if (&v59[-1].u64[1] == (unint64_t *)v10) {
          goto LABEL_76;
        }
LABEL_75:
        v10->i64[0] = *v68;
        goto LABEL_76;
      }
      long long v63 = &v10->i64[v57];
      uint64_t v64 = (uint64_t *)v60;
      do
      {
        uint64_t v65 = *v63;
        uint64_t *v63 = *v64;
        *uint64_t v64 = v65;
        do
        {
          uint64_t v66 = v63[1];
          ++v63;
        }
        while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v66, v23) & 1) != 0);
        do
          uint64_t v67 = *--v64;
        while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v67, v23));
      }
      while (v63 < v64);
      uint64_t v68 = v63 - 1;
      long long v12 = a2;
      if (v63 - 1 != (uint64_t *)v10) {
        goto LABEL_75;
      }
LABEL_76:
      *uint64_t v68 = v23;
      if (v59 < v60) {
        goto LABEL_79;
      }
      BOOL v69 = sub_1C4B90CEC(v10, v68, a3);
      long long v11 = (int8x16_t *)(v68 + 1);
      uint64_t result = sub_1C4B90CEC(v68 + 1, v12, a3);
      if (result) {
        break;
      }
      if (!v69)
      {
LABEL_79:
        uint64_t result = sub_1C4B90138(v10, v68, a3, a4, a5 & 1);
        a5 = 0;
        long long v11 = (int8x16_t *)(v68 + 1);
        goto LABEL_4;
      }
    }
    a2 = (int8x16_t *)v68;
    if (!v69) {
      continue;
    }
    return result;
  }
}

BOOL sub_1C4B90CEC(void *a1, void *a2, unsigned int (**a3)(uint64_t))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(void, void))*a3)(*(a2 - 1), *a1))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      char v9 = ((uint64_t (*)(void, void))*a3)(a1[1], *a1);
      int v10 = ((uint64_t (*)(void, void))*a3)(*(a2 - 1), a1[1]);
      if (v9)
      {
        uint64_t v11 = *a1;
        if (v10)
        {
          *a1 = *(a2 - 1);
          *(a2 - 1) = v11;
        }
        else
        {
          *a1 = a1[1];
          a1[1] = v11;
          if ((*a3)(*(a2 - 1)))
          {
            uint64_t v26 = a1[1];
            a1[1] = *(a2 - 1);
            *(a2 - 1) = v26;
          }
        }
      }
      else if (v10)
      {
        uint64_t v24 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v24;
        int v19 = ((uint64_t (*)(void, void))*a3)(a1[1], *a1);
LABEL_17:
        if (v19) {
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
        }
      }
      return 1;
    case 4:
      sub_1C49A2DA4(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      long long v12 = a1 + 2;
      uint64_t v13 = a1 + 3;
      sub_1C49A2DA4(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      if (!((unsigned int (*)(void, void))*a3)(*(a2 - 1), a1[3])) {
        return 1;
      }
      uint64_t v14 = *v13;
      *uint64_t v13 = *(a2 - 1);
      *(a2 - 1) = v14;
      if (!((unsigned int (*)(void, void))*a3)(*v13, *v12)) {
        return 1;
      }
      uint64_t v15 = *v12;
      *long long v12 = *v13;
      *uint64_t v13 = v15;
      if (!((unsigned int (*)(void))*a3)()) {
        return 1;
      }
      uint64_t v17 = a1[1];
      uint64_t v16 = a1[2];
      uint64_t v18 = *a1;
      a1[1] = v16;
      a1[2] = v17;
      int v19 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v16, v18);
      goto LABEL_17;
    default:
      char v20 = ((uint64_t (*)(void, void))*a3)(a1[1], *a1);
      int v21 = a1 + 2;
      int v22 = ((uint64_t (*)(void, void))*a3)(a1[2], a1[1]);
      if (v20)
      {
        uint64_t v23 = *a1;
        if (v22)
        {
          *a1 = a1[2];
          a1[2] = v23;
        }
        else
        {
          uint64_t v27 = a1[2];
          *a1 = a1[1];
          a1[1] = v23;
          if ((*a3)(v27)) {
            *(int8x16_t *)(a1 + 1) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
          }
        }
      }
      else if (v22)
      {
        uint64_t v25 = a1[1];
        a1[1] = a1[2];
        a1[2] = v25;
        if (((unsigned int (*)(void))*a3)()) {
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
        }
      }
      uint64_t v28 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v29 = 0;
      int v30 = 0;
      break;
  }
  while (!((unsigned int (*)(void, void))*a3)(*v28, *v21))
  {
LABEL_35:
    int v21 = v28;
    v29 += 8;
    if (++v28 == a2) {
      return 1;
    }
  }
  uint64_t v31 = *v28;
  uint64_t v32 = v29;
  do
  {
    uint64_t v33 = (char *)a1 + v32;
    *(void *)((char *)a1 + v32 + 24) = *(void *)((char *)a1 + v32 + 16);
    if (v32 == -16)
    {
      *a1 = v31;
      if (++v30 != 8) {
        goto LABEL_35;
      }
      return v28 + 1 == a2;
    }
    v32 -= 8;
  }
  while ((((uint64_t (*)(uint64_t, void))*a3)(v31, *((void *)v33 + 1)) & 1) != 0);
  *(void *)((char *)a1 + v32 + 24) = v31;
  if (++v30 != 8) {
    goto LABEL_35;
  }
  return v28 + 1 == a2;
}

_DWORD *sub_1C4B91058(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = *(_DWORD **)(a1 + 8);
  unint64_t v2 = (_DWORD *)(a1 + 8);
  unint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unsigned int v6 = a2[2];
  unsigned int v5 = a2[3];
  unsigned int v7 = a2[4];
  uint64_t v8 = v2;
  unsigned int v10 = *a2;
  unsigned int v9 = a2[1];
  do
  {
    unsigned int v11 = v3[7];
    BOOL v12 = v11 >= v10;
    BOOL v13 = v11 > v10;
    if (v12) {
      int v14 = v13;
    }
    else {
      int v14 = -1;
    }
    unsigned int v15 = v3[9];
    unsigned int v16 = v3[10];
    BOOL v12 = v15 >= v6;
    BOOL v17 = v15 > v6;
    if (v12) {
      int v18 = v17;
    }
    else {
      int v18 = -1;
    }
    int v19 = v16 > v5;
    if (v16 < v5) {
      int v19 = -1;
    }
    if (v14 == -1)
    {
LABEL_3:
      v3 += 2;
      goto LABEL_4;
    }
    if (v14) {
      goto LABEL_23;
    }
    unsigned int v20 = v3[8];
    BOOL v12 = v20 >= v9;
    int v21 = v20 > v9;
    if (!v12) {
      int v21 = -1;
    }
    if (v21 == -1) {
      goto LABEL_3;
    }
    if (v21) {
      goto LABEL_23;
    }
    if (v18 == -1) {
      goto LABEL_3;
    }
    if (v18) {
      goto LABEL_23;
    }
    if (v19)
    {
      if (v19 == -1) {
        goto LABEL_3;
      }
LABEL_23:
      uint64_t v8 = v3;
      goto LABEL_4;
    }
    if (v3[11] < v7) {
      v3 += 2;
    }
    else {
      uint64_t v8 = v3;
    }
LABEL_4:
    unint64_t v3 = *(_DWORD **)v3;
  }
  while (v3);
  if (v8 == v2) {
    return v2;
  }
  unsigned int v22 = v8[7];
  BOOL v12 = v10 >= v22;
  int v23 = v10 > v22;
  if (!v12) {
    int v23 = -1;
  }
  unsigned int v24 = v8[9];
  unsigned int v25 = v8[10];
  BOOL v12 = v6 >= v24;
  int v26 = v6 > v24;
  if (!v12) {
    int v26 = -1;
  }
  BOOL v12 = v5 >= v25;
  int v27 = v5 > v25;
  if (!v12) {
    int v27 = -1;
  }
  if (v23 == -1) {
    return v2;
  }
  if (!v23)
  {
    unsigned int v28 = v8[8];
    BOOL v12 = v9 >= v28;
    int v29 = v9 > v28;
    if (!v12) {
      int v29 = -1;
    }
    if (v29 == -1 || !v29 && (v26 == -1 || !v26 && (v27 == -1 || !v27 && v7 < v8[11]))) {
      return v2;
    }
  }
  return v8;
}

_DWORD *sub_1C4B911A0(uint64_t a1, void *a2, unsigned int *a3)
{
  unsigned int v5 = *(_DWORD **)(a1 + 8);
  BOOL result = (_DWORD *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unsigned int v6 = a3[2];
    unsigned int v7 = a3[3];
    unsigned int v8 = a3[4];
    unsigned int v9 = *a3;
    unsigned int v10 = a3[1];
    do
    {
      while (1)
      {
        unsigned int v11 = v4;
        unsigned int v12 = v4[7];
        int v13 = v9 < v12 ? -1 : v9 > v12;
        unsigned int v14 = v4[9];
        unsigned int v15 = v4[10];
        int v16 = v6 < v14 ? -1 : v6 > v14;
        int v17 = v7 < v15 ? -1 : v7 > v15;
        if (v13 != -1)
        {
          unsigned int v18 = v4[11];
          if (v13) {
            break;
          }
          unsigned int v19 = v11[8];
          BOOL v20 = v10 >= v19;
          int v21 = v10 > v19;
          if (!v20) {
            int v21 = -1;
          }
          if (v21 != -1 && (v21 || v16 != -1 && (v16 || v17 != -1 && (v17 || v8 >= v18)))) {
            break;
          }
        }
        uint64_t v4 = *(_DWORD **)v11;
        BOOL result = v11;
        if (!*(void *)v11) {
          goto LABEL_44;
        }
      }
      BOOL v22 = v9 > v12;
      BOOL v23 = v9 < v12;
      if (v22) {
        int v24 = -1;
      }
      else {
        int v24 = v23;
      }
      if (v6 > v14) {
        int v25 = -1;
      }
      else {
        int v25 = v6 < v14;
      }
      int v26 = v7 < v15;
      if (v7 > v15) {
        int v26 = -1;
      }
      if (v24 != -1)
      {
        if (v24) {
          break;
        }
        unsigned int v27 = v11[8];
        BOOL v20 = v27 >= v10;
        int v28 = v27 > v10;
        if (!v20) {
          int v28 = -1;
        }
        if (v28 != -1 && (v28 || v25 != -1 && (v25 || v26 != -1 && (v26 || v18 >= v8)))) {
          break;
        }
      }
      BOOL result = v11 + 2;
      uint64_t v4 = (_DWORD *)*((void *)v11 + 1);
    }
    while (v4);
LABEL_44:
    *a2 = v11;
  }
  else
  {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1C4B912C8(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  unsigned int v10 = (uint64_t *)result;
LABEL_2:
  unint64_t v115 = a2 - 1;
  uint64_t v112 = a2 - 2;
  uint64_t v113 = a2;
  unsigned int v11 = a2 - 3;
  unsigned int v12 = v10;
  while (1)
  {
    unsigned int v10 = v12;
    uint64_t v13 = (char *)a2 - (char *)v12;
    unint64_t v14 = a2 - v12;
    if (v6 || !v5)
    {
      uint64_t v68 = v115;
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          BOOL result = (*a3)(v115, v12);
          if (result)
          {
            uint64_t v69 = *v12;
            if (v12 != v115) {
              *unsigned int v12 = *v115;
            }
            uint64_t *v115 = v69;
          }
          return result;
        case 3uLL:
          uint64_t v70 = v12 + 1;
          char v71 = (*a3)(v12 + 1, v12);
          BOOL result = (*a3)(v115, v12 + 1);
          if (v71)
          {
            uint64_t v72 = *v12;
            if (result)
            {
              if (v12 == v115) {
                goto LABEL_219;
              }
            }
            else
            {
              *unsigned int v12 = v12[1];
              v12[1] = v72;
              BOOL result = (*a3)(v115, v12 + 1);
              if (!result) {
                return result;
              }
              uint64_t v72 = *v70;
              unsigned int v10 = v12 + 1;
              if (v70 == v115) {
                goto LABEL_219;
              }
            }
          }
          else
          {
            if (!result) {
              return result;
            }
            uint64_t v107 = *v70;
            if (v70 != v115) {
              *uint64_t v70 = *v115;
            }
            uint64_t *v115 = v107;
            BOOL result = (*a3)(v12 + 1, v12);
            if (!result) {
              return result;
            }
            uint64_t v72 = *v12;
            uint64_t v68 = v12 + 1;
          }
          *unsigned int v10 = *v68;
          unsigned int v10 = v68;
LABEL_219:
          *unsigned int v10 = v72;
          return result;
        case 4uLL:
          return sub_1C4B923BC(v12, v12 + 1, v12 + 2, v115, (uint64_t (**)(void, void))a3);
        case 5uLL:
          uint64_t v73 = v12 + 2;
          uint64_t v74 = v12 + 3;
          sub_1C4B923BC(v12, v12 + 1, v12 + 2, v12 + 3, (uint64_t (**)(void, void))a3);
          BOOL result = (*a3)(v115, v12 + 3);
          if (result)
          {
            uint64_t v75 = *v74;
            if (v74 != v115) {
              uint64_t *v74 = *v115;
            }
            uint64_t *v115 = v75;
            BOOL result = (*a3)(v12 + 3, v12 + 2);
            if (result)
            {
              uint64_t v76 = *v73;
              *uint64_t v73 = *v74;
              uint64_t *v74 = v76;
              BOOL result = (*a3)(v12 + 2, v12 + 1);
              if (result)
              {
                uint64_t v77 = v12[1];
                v12[1] = v12[2];
                v12[2] = v77;
                BOOL result = (*a3)(v12 + 1, v12);
                if (result)
                {
                  uint64_t v78 = *v12;
                  *unsigned int v12 = v12[1];
                  v12[1] = v78;
                }
              }
            }
          }
          return result;
        default:
          JUMPOUT(0);
      }
    }
    if (v13 <= 191) {
      break;
    }
    if (!a4)
    {
      if (v12 != a2)
      {
        int64_t v87 = (v14 - 2) >> 1;
        int64_t v116 = v87;
        do
        {
          if (v116 >= v87)
          {
            uint64_t v89 = (2 * v87) | 1;
            BOOL v90 = &v10[v89];
            if (2 * v87 + 2 < (uint64_t)v14 && (*a3)(&v10[v89], v90 + 1))
            {
              ++v90;
              uint64_t v89 = 2 * v87 + 2;
            }
            uint64_t v91 = &v10[v87];
            BOOL result = (*a3)(v90, v91);
            if ((result & 1) == 0)
            {
              uint64_t v118 = *v91;
              do
              {
                unint64_t v92 = v90;
                if (v91 != v90) {
                  *uint64_t v91 = *v90;
                }
                if (v116 < v89) {
                  break;
                }
                uint64_t v93 = (2 * v89) | 1;
                BOOL v90 = &v10[v93];
                uint64_t v94 = 2 * v89 + 2;
                if (v94 < (uint64_t)v14 && (*a3)(&v10[v93], v90 + 1))
                {
                  ++v90;
                  uint64_t v93 = v94;
                }
                BOOL result = (*a3)(v90, &v118);
                uint64_t v91 = v92;
                uint64_t v89 = v93;
              }
              while (!result);
              if (v92 != &v118) {
                uint64_t *v92 = v118;
              }
            }
          }
          BOOL v88 = v87-- <= 0;
        }
        while (!v88);
        uint64_t v95 = (unint64_t)v13 >> 3;
        uint64_t v96 = v113;
        do
        {
          uint64_t v97 = v96;
          uint64_t v98 = 0;
          uint64_t v117 = *v10;
          BOOL v99 = v10;
          do
          {
            uint64_t v100 = &v99[v98 + 1];
            uint64_t v101 = 2 * v98;
            uint64_t v98 = (2 * v98) | 1;
            uint64_t v102 = v101 + 2;
            if (v101 + 2 < v95)
            {
              BOOL result = (*a3)(v100, v100 + 1);
              if (result)
              {
                ++v100;
                uint64_t v98 = v102;
              }
            }
            if (v99 != v100) {
              uint64_t *v99 = *v100;
            }
            BOOL v99 = v100;
          }
          while (v98 <= (uint64_t)((unint64_t)(v95 - 2) >> 1));
          uint64_t v96 = v97 - 1;
          if (v100 == v97 - 1)
          {
            *uint64_t v100 = v117;
          }
          else
          {
            *uint64_t v100 = *v96;
            *uint64_t v96 = v117;
            uint64_t v103 = (char *)v100 - (char *)v10 + 8;
            if (v103 >= 9)
            {
              unint64_t v104 = (((unint64_t)v103 >> 3) - 2) >> 1;
              uint64_t v105 = &v10[v104];
              BOOL result = (*a3)(v105, v100);
              if (result)
              {
                uint64_t v118 = *v100;
                do
                {
                  uint64_t v106 = v105;
                  if (v100 != v105) {
                    *uint64_t v100 = *v105;
                  }
                  if (!v104) {
                    break;
                  }
                  unint64_t v104 = (v104 - 1) >> 1;
                  uint64_t v105 = &v10[v104];
                  BOOL result = (*a3)(v105, &v118);
                  uint64_t v100 = v106;
                }
                while ((result & 1) != 0);
                if (v106 != &v118) {
                  uint64_t *v106 = v118;
                }
              }
            }
          }
          BOOL v88 = v95-- <= 2;
        }
        while (!v88);
      }
      return result;
    }
    unsigned int v15 = v11;
    unint64_t v16 = v14 >> 1;
    int v17 = &v12[v14 >> 1];
    unsigned int v18 = *a3;
    if ((unint64_t)v13 >= 0x401)
    {
      char v19 = v18(&v12[v14 >> 1], v12);
      int v20 = (*a3)(v115, v17);
      if (v19)
      {
        uint64_t v21 = *v12;
        if (v20)
        {
          BOOL v22 = v115;
          BOOL v23 = v12;
          int v24 = v12;
          if (v12 == v115)
          {
LABEL_30:
            *int v24 = v21;
            goto LABEL_31;
          }
        }
        else
        {
          *unsigned int v12 = *v17;
          *int v17 = v21;
          if (!(*a3)(v115, v17)) {
            goto LABEL_31;
          }
          uint64_t v21 = *v17;
          BOOL v22 = v115;
          BOOL v23 = v17;
          int v24 = v115;
          if (v17 == v115) {
            goto LABEL_30;
          }
        }
LABEL_29:
        *BOOL v23 = *v22;
        int v24 = v22;
        goto LABEL_30;
      }
      if (v20)
      {
        uint64_t v31 = *v17;
        if (v17 != v115) {
          *int v17 = *v115;
        }
        uint64_t *v115 = v31;
        if ((*a3)(v17, v12))
        {
          uint64_t v21 = *v12;
          BOOL v22 = v17;
          BOOL v23 = v12;
          goto LABEL_29;
        }
      }
LABEL_31:
      uint64_t v35 = v12 + 1;
      uint64_t v36 = &v10[v16 - 1];
      char v37 = (*a3)(v36, v10 + 1);
      int v38 = (*a3)(v112, v36);
      if (v37)
      {
        uint64_t v39 = *v35;
        if (v38)
        {
          uint64_t v40 = v112;
          char v41 = v10 + 1;
          if (v35 != v112) {
            goto LABEL_34;
          }
LABEL_35:
          uint64_t *v41 = v39;
LABEL_50:
          uint64_t v43 = v10 + 2;
          unint64_t v44 = v16 + 1;
          uint64_t v45 = &v10[v16 + 1];
          char v46 = (*a3)(v45, v10 + 2);
          int v47 = (*a3)(v15, v45);
          if (v46)
          {
            uint64_t v48 = *v43;
            if (v47)
            {
              unsigned int v11 = v15;
              uint64_t v49 = v15;
              uint64_t v50 = v10 + 2;
              if (v43 != v15) {
                goto LABEL_53;
              }
LABEL_54:
              *uint64_t v50 = v48;
LABEL_66:
              char v52 = (*a3)(v17, v36);
              int v53 = (*a3)(v45, v17);
              if (v52)
              {
                uint64_t v54 = *v36;
                if (v53)
                {
                  int v26 = v115;
                  goto LABEL_74;
                }
                uint64_t *v36 = *v17;
                *int v17 = v54;
                uint64_t v36 = v17;
                int v26 = v115;
                if ((*a3)(v45, v17))
                {
LABEL_73:
                  uint64_t v54 = *v36;
LABEL_74:
                  uint64_t *v36 = *v45;
                  *uint64_t v45 = v54;
                }
LABEL_75:
                uint64_t v34 = v10;
              }
              else
              {
                if (v53)
                {
                  uint64_t v55 = *v17;
                  *int v17 = *v45;
                  *uint64_t v45 = v55;
                  uint64_t v45 = v17;
                  int v26 = v115;
                  if ((*a3)(v17, v36)) {
                    goto LABEL_73;
                  }
                  goto LABEL_75;
                }
                uint64_t v34 = v10;
                int v26 = v115;
              }
LABEL_77:
              uint64_t v28 = *v34;
              int v29 = v17;
              int v17 = v34;
LABEL_78:
              *int v17 = *v29;
              int v30 = v29;
              goto LABEL_79;
            }
            unsigned int v11 = v15;
            if (v44 != 2) {
              uint64_t *v43 = *v45;
            }
            *uint64_t v45 = v48;
            if (!(*a3)(v15, v45)) {
              goto LABEL_66;
            }
            uint64_t v48 = *v45;
            uint64_t v49 = v15;
            uint64_t v43 = v45;
            uint64_t v50 = v45;
            if (v45 == v15) {
              goto LABEL_54;
            }
          }
          else
          {
            unsigned int v11 = v15;
            if (!v47) {
              goto LABEL_66;
            }
            uint64_t v51 = *v45;
            if (v45 != v15) {
              *uint64_t v45 = *v15;
            }
            *unsigned int v15 = v51;
            if (!(*a3)(v45, v10 + 2)) {
              goto LABEL_66;
            }
            uint64_t v48 = *v43;
            uint64_t v49 = v45;
            uint64_t v50 = v45;
            if (v44 == 2) {
              goto LABEL_54;
            }
          }
LABEL_53:
          uint64_t *v43 = *v49;
          uint64_t v50 = v49;
          goto LABEL_54;
        }
        if (v16 != 2) {
          uint64_t *v35 = *v36;
        }
        uint64_t *v36 = v39;
        if (!(*a3)(v112, &v10[v16 - 1])) {
          goto LABEL_50;
        }
        uint64_t v39 = *v36;
        uint64_t v40 = v112;
        uint64_t v35 = &v10[v16 - 1];
        char v41 = v35;
        if (v36 == v112) {
          goto LABEL_35;
        }
      }
      else
      {
        if (!v38) {
          goto LABEL_50;
        }
        uint64_t v42 = *v36;
        if (v36 != v112) {
          uint64_t *v36 = *v112;
        }
        uint64_t *v112 = v42;
        if (!(*a3)(&v10[v16 - 1], v10 + 1)) {
          goto LABEL_50;
        }
        uint64_t v39 = *v35;
        uint64_t v40 = &v10[v16 - 1];
        char v41 = v40;
        if (v16 == 2) {
          goto LABEL_35;
        }
      }
LABEL_34:
      uint64_t *v35 = *v40;
      char v41 = v40;
      goto LABEL_35;
    }
    char v25 = v18(v12, &v12[v14 >> 1]);
    int v26 = v115;
    int v27 = (*a3)(v115, v12);
    unsigned int v11 = v15;
    if ((v25 & 1) == 0)
    {
      if (!v27) {
        goto LABEL_80;
      }
      uint64_t v32 = *v12;
      if (v12 != v115) {
        *unsigned int v12 = *v115;
      }
      uint64_t *v115 = v32;
      char v33 = (*a3)(v12, v17);
      uint64_t v34 = v17;
      int v17 = v12;
      if ((v33 & 1) == 0) {
        goto LABEL_80;
      }
      goto LABEL_77;
    }
    uint64_t v28 = *v17;
    if (v27)
    {
      int v29 = v115;
      int v30 = v115;
      if (v17 == v115) {
        goto LABEL_79;
      }
      goto LABEL_78;
    }
    *int v17 = *v12;
    *unsigned int v12 = v28;
    if (!(*a3)(v115, v12)) {
      goto LABEL_80;
    }
    uint64_t v28 = *v12;
    int v29 = v115;
    int v17 = v12;
    int v30 = v12;
    if (v12 != v115) {
      goto LABEL_78;
    }
LABEL_79:
    *int v30 = v28;
LABEL_80:
    --a4;
    if (a5 & 1) != 0 || ((*a3)(v10 - 1, v10))
    {
      uint64_t v56 = 0;
      uint64_t v118 = *v10;
      a2 = v113;
      do
        ++v56;
      while (((*a3)(&v10[v56], &v118) & 1) != 0);
      uint64_t v57 = &v10[v56];
      char v58 = v113;
      if (v56 == 1)
      {
        char v58 = v113;
        do
        {
          if (v57 >= v58) {
            break;
          }
          --v58;
        }
        while (((*a3)(v58, &v118) & 1) == 0);
      }
      else
      {
        do
          --v58;
        while (!(*a3)(v58, &v118));
      }
      if (v57 >= v58)
      {
        uint64_t v62 = v57 - 1;
        if (v57 - 1 == v10) {
          goto LABEL_100;
        }
LABEL_99:
        *unsigned int v10 = *v62;
        goto LABEL_100;
      }
      uint64_t v59 = &v10[v56];
      unint64_t v60 = v58;
      do
      {
        uint64_t v61 = *v59;
        *uint64_t v59 = *v60;
        *unint64_t v60 = v61;
        do
          ++v59;
        while (((*a3)(v59, &v118) & 1) != 0);
        do
          --v60;
        while (!(*a3)(v60, &v118));
      }
      while (v59 < v60);
      uint64_t v62 = v59 - 1;
      if (v62 != v10) {
        goto LABEL_99;
      }
LABEL_100:
      if (v62 != &v118) {
        uint64_t *v62 = v118;
      }
      BOOL v5 = v57 >= v58;
      unsigned int v11 = v15;
      if (!v5) {
        goto LABEL_106;
      }
      BOOL v63 = sub_1C4B91FF8(v10, v62, a3);
      unsigned int v12 = v62 + 1;
      BOOL result = sub_1C4B91FF8(v62 + 1, v113, a3);
      if (result)
      {
        a2 = v62;
        if (v63) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v63)
      {
LABEL_106:
        BOOL result = sub_1C4B912C8(v10, v62, a3, a4, a5 & 1);
        a5 = 0;
        unsigned int v12 = v62 + 1;
      }
    }
    else
    {
      uint64_t v118 = *v10;
      BOOL result = (*a3)(&v118, v26);
      a2 = v113;
      if (result)
      {
        unsigned int v12 = v10;
        do
          BOOL result = (*a3)(&v118, ++v12);
        while ((result & 1) == 0);
      }
      else
      {
        uint64_t v64 = v10 + 1;
        do
        {
          unsigned int v12 = v64;
          if (v64 >= v113) {
            break;
          }
          BOOL result = (*a3)(&v118, v64);
          uint64_t v64 = v12 + 1;
        }
        while (!result);
      }
      uint64_t v65 = v113;
      if (v12 < v113)
      {
        uint64_t v65 = v113;
        do
          BOOL result = (*a3)(&v118, --v65);
        while ((result & 1) != 0);
      }
      while (v12 < v65)
      {
        uint64_t v66 = *v12;
        *unsigned int v12 = *v65;
        uint64_t *v65 = v66;
        do
          ++v12;
        while (!(*a3)(&v118, v12));
        do
          BOOL result = (*a3)(&v118, --v65);
        while ((result & 1) != 0);
      }
      uint64_t v67 = v12 - 1;
      if (v12 - 1 != v10) {
        *unsigned int v10 = *v67;
      }
      BOOL v5 = v67 >= &v118;
      BOOL v6 = v67 == &v118;
      if (v67 != &v118) {
        *uint64_t v67 = v118;
      }
      a5 = 0;
    }
  }
  char v79 = v12 + 1;
  BOOL v81 = v12 == a2 || v79 == a2;
  if (a5)
  {
    if (!v81)
    {
      uint64_t v82 = 0;
      uint64_t v83 = v12;
      do
      {
        uint64_t v85 = v83;
        uint64_t v83 = v79;
        BOOL result = (*a3)(v79, v85);
        if (!result) {
          goto LABEL_157;
        }
        uint64_t v118 = *v83;
        uint64_t v86 = v82;
        do
        {
          *(uint64_t *)((char *)v12 + v86 + 8) = *(uint64_t *)((char *)v12 + v86);
          if (!v86)
          {
            uint64_t v84 = v12;
            if (v12 == &v118) {
              goto LABEL_157;
            }
LABEL_156:
            uint64_t *v84 = v118;
            goto LABEL_157;
          }
          v86 -= 8;
          BOOL result = (*a3)(&v118, (uint64_t *)((char *)v12 + v86));
        }
        while ((result & 1) != 0);
        uint64_t v84 = (uint64_t *)((char *)v12 + v86 + 8);
        if (v84 != &v118) {
          goto LABEL_156;
        }
LABEL_157:
        char v79 = v83 + 1;
        v82 += 8;
      }
      while (v83 + 1 != a2);
    }
  }
  else if (!v81)
  {
    do
    {
      uint64_t v108 = v10;
      unsigned int v10 = v79;
      BOOL result = (*a3)(v79, v108);
      if (result)
      {
        uint64_t v118 = *v10;
        uint64_t v109 = v10;
        do
        {
          uint64_t v110 = v109;
          uint64_t v111 = *--v109;
          uint64_t *v110 = v111;
          BOOL result = (*a3)(&v118, v110 - 2);
        }
        while ((result & 1) != 0);
        if (v109 != &v118) {
          uint64_t *v109 = v118;
        }
      }
      char v79 = v10 + 1;
    }
    while (v10 + 1 != a2);
  }
  return result;
}

BOOL sub_1C4B91FF8(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  BOOL v5 = a1;
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v8 = a2 - 1;
      if ((*a3)(a2 - 1, v5))
      {
        uint64_t v9 = *v5;
        if (v8 != v5) {
          *BOOL v5 = *v8;
        }
        *unsigned int v8 = v9;
      }
      return 1;
    case 3:
      unsigned int v10 = v5 + 1;
      unsigned int v11 = a2 - 1;
      char v12 = (*a3)(v5 + 1, v5);
      int v13 = (*a3)(v11, v5 + 1);
      if (v12)
      {
        uint64_t v14 = *v5;
        if (v13)
        {
          if (v11 == v5) {
            goto LABEL_32;
          }
        }
        else
        {
          *BOOL v5 = v5[1];
          v5[1] = v14;
          if (!(*a3)(v11, v5 + 1)) {
            return 1;
          }
          uint64_t v14 = *v10;
          ++v5;
          if (v10 == v11) {
            goto LABEL_32;
          }
        }
LABEL_31:
        *BOOL v5 = *v11;
        BOOL v5 = v11;
LABEL_32:
        *BOOL v5 = v14;
        return 1;
      }
      if (v13)
      {
        uint64_t v28 = *v10;
        if (v10 != v11) {
          *unsigned int v10 = *v11;
        }
        *unsigned int v11 = v28;
        if ((*a3)(v5 + 1, v5))
        {
          uint64_t v14 = *v5;
          unsigned int v11 = v5 + 1;
          goto LABEL_31;
        }
      }
      return 1;
    case 4:
      sub_1C4B923BC(v5, v5 + 1, v5 + 2, a2 - 1, (uint64_t (**)(void, void))a3);
      return 1;
    case 5:
      uint64_t v21 = v5 + 2;
      BOOL v22 = v5 + 3;
      BOOL v23 = a2 - 1;
      sub_1C4B923BC(v5, v5 + 1, v5 + 2, v5 + 3, (uint64_t (**)(void, void))a3);
      if ((*a3)(v23, v5 + 3))
      {
        uint64_t v24 = *v22;
        if (v22 != v23) {
          *BOOL v22 = *v23;
        }
        *BOOL v23 = v24;
        if ((*a3)(v5 + 3, v5 + 2))
        {
          uint64_t v25 = *v21;
          *uint64_t v21 = *v22;
          *BOOL v22 = v25;
          if ((*a3)(v5 + 2, v5 + 1))
          {
            uint64_t v26 = v5[1];
            v5[1] = v5[2];
            v5[2] = v26;
            if ((*a3)(v5 + 1, v5))
            {
              uint64_t v27 = *v5;
              *BOOL v5 = v5[1];
              v5[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      unsigned int v15 = v5 + 2;
      unint64_t v16 = v5 + 1;
      char v17 = (*a3)(v5 + 1, v5);
      int v18 = (*a3)(v5 + 2, v5 + 1);
      if (v17)
      {
        uint64_t v19 = *v5;
        if (v18)
        {
          unint64_t v16 = v5 + 2;
          int v20 = v5;
LABEL_35:
          *int v20 = *v16;
          *unint64_t v16 = v19;
          goto LABEL_36;
        }
        *BOOL v5 = v5[1];
        v5[1] = v19;
        int v31 = (*a3)(v5 + 2, v5 + 1);
        int v20 = v5 + 1;
        unint64_t v16 = v5 + 2;
        if (!v31) {
          goto LABEL_36;
        }
LABEL_34:
        uint64_t v19 = *v20;
        goto LABEL_35;
      }
      if (v18)
      {
        uint64_t v29 = v5[1];
        v5[1] = v5[2];
        v5[2] = v29;
        char v30 = (*a3)(v5 + 1, v5);
        int v20 = v5;
        if (v30) {
          goto LABEL_34;
        }
      }
LABEL_36:
      uint64_t v32 = v5 + 3;
      if (v5 + 3 == a2) {
        return 1;
      }
      uint64_t v33 = 0;
      int v34 = 0;
      while (1)
      {
        if ((*a3)(v32, v15))
        {
          uint64_t v38 = *v32;
          uint64_t v35 = v33;
          while (1)
          {
            uint64_t v36 = (char *)v5 + v35;
            *(uint64_t *)((char *)v5 + v35 + 24) = *(uint64_t *)((char *)v5 + v35 + 16);
            if (v35 == -16) {
              break;
            }
            v35 -= 8;
            if (((*a3)(&v38, (uint64_t *)v36 + 1) & 1) == 0)
            {
              char v37 = (uint64_t *)((char *)v5 + v35 + 24);
              if (v37 == &v38) {
                goto LABEL_38;
              }
              goto LABEL_47;
            }
          }
          char v37 = v5;
          if (v5 == &v38) {
            goto LABEL_38;
          }
LABEL_47:
          uint64_t *v37 = v38;
LABEL_38:
          if (++v34 == 8) {
            return v32 + 1 == a2;
          }
        }
        unsigned int v15 = v32;
        v33 += 8;
        if (++v32 == a2) {
          return 1;
        }
      }
  }
}

uint64_t sub_1C4B923BC(void *a1, void *a2, void *a3, void *a4, uint64_t (**a5)(void, void))
{
  char v10 = (*a5)(a2, a1);
  int v11 = (*a5)(a3, a2);
  if (v10)
  {
    uint64_t v12 = *a1;
    if (v11)
    {
      int v13 = a3;
      uint64_t v14 = a1;
      unsigned int v15 = a3;
      if (a1 == a3)
      {
LABEL_5:
        *unsigned int v15 = v12;
        goto LABEL_17;
      }
LABEL_4:
      *uint64_t v14 = *v13;
      unsigned int v15 = v13;
      goto LABEL_5;
    }
    if (a1 != a2) {
      *a1 = *a2;
    }
    *a2 = v12;
    if ((*a5)(a3, a2))
    {
      uint64_t v12 = *a2;
      int v13 = a3;
      uint64_t v14 = a2;
      unsigned int v15 = a2;
      if (a2 == a3) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (v11)
  {
    uint64_t v16 = *a2;
    if (a2 != a3) {
      *a2 = *a3;
    }
    *a3 = v16;
    if ((*a5)(a2, a1))
    {
      uint64_t v12 = *a1;
      int v13 = a2;
      uint64_t v14 = a1;
      unsigned int v15 = a2;
      if (a1 == a2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
LABEL_17:
  uint64_t result = (*a5)(a4, a3);
  if (result)
  {
    uint64_t v18 = *a3;
    if (a3 != a4) {
      *a3 = *a4;
    }
    *a4 = v18;
    uint64_t result = (*a5)(a3, a2);
    if (result)
    {
      uint64_t v19 = *a2;
      if (a2 != a3) {
        *a2 = *a3;
      }
      *a3 = v19;
      uint64_t result = (*a5)(a2, a1);
      if (result)
      {
        uint64_t v20 = *a1;
        if (a1 != a2) {
          *a1 = *a2;
        }
        *a2 = v20;
      }
    }
  }
  return result;
}

void *sub_1C4B92568(void *result, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 16);
  unint64_t v2 = *(void **)(a2 + 24);
  if (v3)
  {
    result[1] = 0;
    *uint64_t result = v2[2];
    if (v2 + 2 != result) {
      result[1] = v2[3];
    }
    unint64_t v4 = v3 - 1;
    *(void *)(a2 + 16) = v3 - 1;
    if (v3 == 1)
    {
      if (*(void *)(a2 + 32) == 1) {
        *(void *)(a2 + 32) = v4;
      }
      return result;
    }
    BOOL v5 = (double *)&v2[2 * v3];
    double v6 = *v5;
    v2[2] = *(void *)v5;
    uint64_t v7 = *((void *)v5 + 1);
    v2[3] = v7;
    unint64_t v8 = v4 >> 1;
    if (v3 < 3)
    {
      uint64_t v9 = (unint64_t *)(a2 + 32);
      if (*(void *)(a2 + 32) != 2) {
        return result;
      }
      goto LABEL_31;
    }
    if (*(unsigned char *)a2)
    {
      uint64_t v10 = 1;
      while (1)
      {
        unint64_t v11 = 2 * v10;
        if (2 * v10 < v4 && *(double *)&v2[2 * (v11 | 1)] < *(double *)&v2[4 * v10]) {
          v11 |= 1uLL;
        }
        uint64_t v12 = (double *)&v2[2 * v11];
        if (*v12 >= v6) {
          break;
        }
        if (v10 != v11)
        {
          int v13 = &v2[2 * v10];
          *int v13 = *(void *)v12;
          v13[1] = *((void *)v12 + 1);
        }
        uint64_t v10 = v11;
        if (v11 > v8) {
          goto LABEL_30;
        }
      }
    }
    else
    {
      uint64_t v10 = 1;
      while (1)
      {
        unint64_t v11 = 2 * v10;
        if (2 * v10 < v4 && *(double *)&v2[2 * (v11 | 1)] > *(double *)&v2[4 * v10]) {
          v11 |= 1uLL;
        }
        uint64_t v14 = (double *)&v2[2 * v11];
        if (*v14 <= v6) {
          break;
        }
        if (v10 != v11)
        {
          unsigned int v15 = &v2[2 * v10];
          *unsigned int v15 = *(void *)v14;
          v15[1] = *((void *)v14 + 1);
        }
        uint64_t v10 = v11;
        if (v11 > v8) {
          goto LABEL_30;
        }
      }
    }
    unint64_t v11 = v10;
LABEL_30:
    uint64_t v16 = (double *)&v2[2 * v11];
    *uint64_t v16 = v6;
    *((void *)v16 + 1) = v7;
    uint64_t v9 = (unint64_t *)(a2 + 32);
    if (*(void *)(a2 + 32) == v3)
    {
LABEL_31:
      *uint64_t v9 = v4;
      unint64_t v17 = v3 - 2;
      if (v3 - 2 > v8)
      {
        if (*(unsigned char *)a2)
        {
          uint64_t v18 = (double *)&v2[2 * v3 - 4];
          do
          {
            if (*v18 > *(double *)&v2[2 * v4])
            {
              *uint64_t v9 = v17;
              unint64_t v4 = v17;
            }
            --v17;
            v18 -= 2;
          }
          while (v17 > v8);
        }
        else
        {
          uint64_t v19 = (double *)&v2[2 * v3 - 4];
          do
          {
            if (*v19 < *(double *)&v2[2 * v4])
            {
              *uint64_t v9 = v17;
              unint64_t v4 = v17;
            }
            --v17;
            v19 -= 2;
          }
          while (v17 > v8);
        }
      }
    }
  }
  else
  {
    result[1] = 0;
    *uint64_t result = *v2;
    if (v2 != result) {
      result[1] = v2[1];
    }
  }
  return result;
}

uint64_t sub_1C4B92798(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 416;
    sub_1C49A0984(i - 416);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void HeartRegressor::HeartRegressor(HeartRegressor *this, CHDrawing *a2, HTMLog *a3)
{
  unint64_t v4 = a2;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  uint64_t v181 = 0;
  uint64_t v182 = 0;
  uint64_t v183 = 0;
  *((float *)this + 4) = sub_1C495E698(v4, (uint64_t)&v181, (uint64_t)v178, 1, 20.0);
  long long v174 = 0;
  uint64_t v175 = 0;
  long long __p = 0;
  BOOL v5 = v181;
  int64_t v6 = v182 - v181;
  if (v182 != v181)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v6 >> 3) >= 0x666666666666667) {
      sub_1C494A220();
    }
    long long __p = operator new(v6);
    uint64_t v175 = (char *)__p + 8 * (v6 >> 3);
    memcpy(__p, v5, v6 - 3);
    long long v174 = v175;
  }
  sub_1C49558A8((unint64_t *)&__p, (uint64_t)&v176);
  if (__p)
  {
    long long v174 = __p;
    operator delete(__p);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((v177 - (unsigned char *)v176) >> 3) <= 2)
  {
    objc_msgSend_bounds(v4, v7, v8, v9, v10, v11);
    CGFloat x = v184.origin.x;
    CGFloat y = v184.origin.y;
    CGFloat width = v184.size.width;
    CGFloat height = v184.size.height;
    CGRectGetMidX(v184);
    v185.origin.CGFloat x = x;
    v185.origin.CGFloat y = y;
    v185.size.CGFloat width = width;
    v185.size.CGFloat height = height;
    CGRectGetMidY(v185);
    operator new();
  }
  if (v179 >= v180) {
    double v16 = v179;
  }
  else {
    double v16 = v180;
  }
  uint64_t v170 = 0;
  double v171 = 0;
  long long v172 = 0;
  unint64_t v17 = v181;
  uint64_t v18 = v182;
  unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((v182 - v181) >> 3);
  if (v182 != v181)
  {
    if (v19 >> 61) {
      sub_1C494A220();
    }
    uint64_t v170 = operator new(0x6666666666666668 * ((v182 - v181) >> 3));
    double v171 = (char *)v170;
    long long v172 = (char *)v170 + 8 * v19;
  }
  uint64_t v167 = &v167;
  __int16 v168 = &v167;
  uint64_t v169 = 0;
  uint64_t v20 = operator new(0x20uLL);
  *((_OWORD *)v20 + 1) = *(_OWORD *)(v18 - 40);
  *uint64_t v20 = &v167;
  v20[1] = &v167;
  uint64_t v167 = v20;
  __int16 v168 = v20;
  uint64_t v169 = 1;
  uint64_t v21 = operator new(0x20uLL);
  v21[1] = *(_OWORD *)v17;
  *(void *)uint64_t v21 = v20;
  *((void *)v21 + 1) = &v167;
  v20[1] = v21;
  uint64_t v167 = v21;
  uint64_t v169 = 2;
  if (v18 != v17)
  {
    unint64_t v22 = 1;
    while (1)
    {
      uint64_t v27 = operator new(0x20uLL);
      long long v28 = v22 == v19 ? *(_OWORD *)v17 : *(_OWORD *)&v17[40 * v22];
      v27[1] = v28;
      uint64_t v29 = v167;
      *(void *)uint64_t v27 = v167;
      *((void *)v27 + 1) = &v167;
      v29[1] = v27;
      uint64_t v167 = v27;
      ++v169;
      char v30 = objc_opt_class();
      objc_msgSend_circumferenceRatioOfCircleFittedToPoints_circleCenter_circleRadius_(v30, v31, (uint64_t)&v167, 0, 0, v32);
      uint64_t v34 = v33;
      uint64_t v35 = v171;
      if (v171 >= v172) {
        break;
      }
      *(void *)double v171 = v33;
      uint64_t v23 = (uint64_t)(v35 + 8);
LABEL_17:
      double v171 = (char *)v23;
      uint64_t v24 = (void **)v168;
      uint64_t v25 = *(void *)v168;
      *(void *)(v25 + 8) = *((void *)v168 + 1);
      *v24[1] = v25;
      --v169;
      operator delete(v24);
      unint64_t v17 = v181;
      uint64_t v18 = v182;
      unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((v182 - v181) >> 3);
      if (v22++ >= v19) {
        goto LABEL_42;
      }
    }
    uint64_t v36 = (char *)v170;
    int64_t v37 = v171 - (unsigned char *)v170;
    uint64_t v38 = (v171 - (unsigned char *)v170) >> 3;
    unint64_t v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 61) {
      sub_1C494A220();
    }
    uint64_t v40 = v172 - (unsigned char *)v170;
    if ((v172 - (unsigned char *)v170) >> 2 > v39) {
      unint64_t v39 = v40 >> 2;
    }
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v41 = v39;
    }
    if (v41)
    {
      if (v41 >> 61) {
        sub_1C4949AA8();
      }
      uint64_t v42 = (char *)operator new(8 * v41);
      uint64_t v43 = &v42[8 * v38];
      *(void *)uint64_t v43 = v34;
      uint64_t v23 = (uint64_t)(v43 + 8);
      int64_t v44 = v35 - v36;
      if (v35 == v36) {
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v42 = 0;
      uint64_t v43 = (char *)(8 * v38);
      *(void *)(8 * v38) = v33;
      uint64_t v23 = 8 * v38 + 8;
      int64_t v44 = v35 - v36;
      if (v35 == v36)
      {
LABEL_39:
        uint64_t v170 = v43;
        double v171 = (char *)v23;
        long long v172 = &v42[8 * v41];
        if (v36) {
          operator delete(v36);
        }
        goto LABEL_17;
      }
    }
    unint64_t v45 = v44 - 8;
    if (v45 < 0x58) {
      goto LABEL_191;
    }
    if ((unint64_t)(v35 - v42 - v37) < 0x20) {
      goto LABEL_191;
    }
    uint64_t v46 = (v45 >> 3) + 1;
    uint64_t v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v48 = &v35[-v47];
    v43 -= v47;
    uint64_t v49 = &v42[8 * v38 - 16];
    uint64_t v50 = v35 - 16;
    uint64_t v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v52 = *(_OWORD *)v50;
      *((_OWORD *)v49 - 1) = *((_OWORD *)v50 - 1);
      *(_OWORD *)uint64_t v49 = v52;
      v49 -= 32;
      v50 -= 32;
      v51 -= 4;
    }
    while (v51);
    uint64_t v35 = v48;
    if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_191:
      do
      {
        uint64_t v53 = *((void *)v35 - 1);
        v35 -= 8;
        *((void *)v43 - 1) = v53;
        v43 -= 8;
      }
      while (v35 != v36);
    }
    goto LABEL_39;
  }
  unint64_t v17 = v18;
LABEL_42:
  BOOL v164 = 0;
  uint64_t v165 = 0;
  uint64_t v166 = 0;
  if (v19)
  {
    if (v19 >> 61) {
      sub_1C494A220();
    }
    uint64_t v54 = (double *)operator new(8 * v19);
    BOOL v164 = v54;
    uint64_t v165 = v54;
    uint64_t v166 = &v54[v19];
    uint64_t v55 = v18 - v17;
    if (v18 != v17) {
      goto LABEL_45;
    }
  }
  else
  {
    uint64_t v54 = 0;
    uint64_t v55 = v18 - v17;
    if (v18 != v17)
    {
LABEL_45:
      unint64_t v56 = 0;
      double v57 = v16 / 15.0;
      while (1)
      {
        if (v177 == v176)
        {
          double v65 = 1.79769313e308;
          unint64_t v75 = (unint64_t)v166;
          if (v57 < 1.79769313e308) {
            goto LABEL_58;
          }
        }
        else
        {
          uint64_t v62 = 0;
          uint64_t v63 = 0;
          unint64_t v64 = 0xCCCCCCCCCCCCCCCDLL * ((v177 - (unsigned char *)v176) >> 3);
          double v65 = 1.79769313e308;
          do
          {
            uint64_t v66 = objc_opt_class();
            unint64_t v72 = v63 + 1;
            if (v63 == v64 - 1) {
              uint64_t v73 = 0;
            }
            else {
              uint64_t v73 = v63 + 1;
            }
            objc_msgSend_distanceFromPoint_toSegmentFromPoint_toPoint_(v66, v67, v68, v69, v70, v71, *(double *)&v181[40 * v56], *(double *)&v181[40 * v56 + 8], *(double *)((char *)v176 + v62), *(double *)((char *)v176 + v62 + 8), *((double *)v176 + 5 * v73), *((double *)v176 + 5 * v73 + 1));
            if (v74 < v65) {
              double v65 = v74;
            }
            unint64_t v64 = 0xCCCCCCCCCCCCCCCDLL * ((v177 - (unsigned char *)v176) >> 3);
            v62 += 40;
            ++v63;
          }
          while (v72 < v64);
          uint64_t v54 = v165;
          unint64_t v75 = (unint64_t)v166;
          if (v65 > v57)
          {
LABEL_58:
            if ((unint64_t)v54 >= v75)
            {
              uint64_t v76 = v164;
              uint64_t v84 = v54 - v164;
              unint64_t v85 = v84 + 1;
              if ((unint64_t)(v84 + 1) >> 61) {
                sub_1C494A220();
              }
              uint64_t v86 = v75 - (void)v164;
              if (v86 >> 2 > v85) {
                unint64_t v85 = v86 >> 2;
              }
              if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v80 = v85;
              }
              if (v80)
              {
                if (v80 >> 61) {
                  sub_1C4949AA8();
                }
                BOOL v81 = operator new(8 * v80);
                uint64_t v82 = (double *)&v81[8 * v84];
                *uint64_t v82 = v65;
                uint64_t v59 = (uint64_t)(v82 + 1);
                int64_t v87 = (char *)v54 - (char *)v164;
                if (v54 == v164) {
                  goto LABEL_91;
                }
              }
              else
              {
                BOOL v81 = 0;
                uint64_t v82 = (double *)(8 * v84);
                *(double *)(8 * v84) = v65;
                uint64_t v59 = 8 * v84 + 8;
                int64_t v87 = (char *)v54 - (char *)v164;
                if (v54 == v164) {
                  goto LABEL_91;
                }
              }
              unint64_t v91 = v87 - 8;
              if (v91 >= 0x168)
              {
                unint64_t v95 = ((char *)(v54 - 1) - (char *)v164) & 0xFFFFFFFFFFFFFFF8;
                if (&v81[(char *)v54 - (char *)v164 - 8 - v95] > &v81[(char *)v54 - (char *)v164 - 8])
                {
                  unint64_t v92 = v54;
                }
                else if ((double *)((char *)v54 - v95 - 8) > v54 - 1)
                {
                  unint64_t v92 = v54;
                }
                else if ((unint64_t)((char *)v164 - v81) >= 0x20)
                {
                  uint64_t v102 = (v91 >> 3) + 1;
                  uint64_t v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
                  unint64_t v92 = &v54[v103 / 0xFFFFFFFFFFFFFFF8];
                  uint64_t v82 = (double *)((char *)v82 - v103);
                  unint64_t v104 = &v81[8 * v84 - 16];
                  uint64_t v105 = v54 - 2;
                  uint64_t v106 = v102 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v107 = *(_OWORD *)v105;
                    *(v104 - 1) = *((_OWORD *)v105 - 1);
                    *unint64_t v104 = v107;
                    v104 -= 2;
                    v105 -= 4;
                    v106 -= 4;
                  }
                  while (v106);
                  if (v102 == (v102 & 0x3FFFFFFFFFFFFFFCLL)) {
                    goto LABEL_91;
                  }
                }
                else
                {
                  unint64_t v92 = v54;
                }
              }
              else
              {
                unint64_t v92 = v54;
              }
              do
              {
                uint64_t v93 = *((void *)v92-- - 1);
                *((void *)v82-- - 1) = v93;
              }
              while (v92 != v164);
              goto LABEL_91;
            }
            *uint64_t v54 = v65;
            char v58 = v54 + 1;
            goto LABEL_47;
          }
        }
        if ((unint64_t)v54 >= v75)
        {
          uint64_t v76 = v164;
          uint64_t v77 = v54 - v164;
          unint64_t v78 = v77 + 1;
          if ((unint64_t)(v77 + 1) >> 61) {
            sub_1C494A220();
          }
          uint64_t v79 = v75 - (void)v164;
          if (v79 >> 2 > v78) {
            unint64_t v78 = v79 >> 2;
          }
          if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v80 = v78;
          }
          if (v80)
          {
            if (v80 >> 61) {
              sub_1C4949AA8();
            }
            BOOL v81 = operator new(8 * v80);
            uint64_t v82 = (double *)&v81[8 * v77];
            *uint64_t v82 = 0.0;
            uint64_t v59 = (uint64_t)(v82 + 1);
            int64_t v83 = (char *)v54 - (char *)v164;
            if (v54 == v164) {
              goto LABEL_91;
            }
LABEL_83:
            unint64_t v88 = v83 - 8;
            if (v88 < 0x168)
            {
              uint64_t v89 = v54;
              goto LABEL_85;
            }
            unint64_t v94 = ((char *)(v54 - 1) - (char *)v164) & 0xFFFFFFFFFFFFFFF8;
            if (&v81[(char *)v54 - (char *)v164 - 8 - v94] > &v81[(char *)v54 - (char *)v164 - 8])
            {
              uint64_t v89 = v54;
              goto LABEL_85;
            }
            if ((double *)((char *)v54 - v94 - 8) > v54 - 1)
            {
              uint64_t v89 = v54;
              goto LABEL_85;
            }
            if ((unint64_t)((char *)v164 - v81) < 0x20)
            {
              uint64_t v89 = v54;
              goto LABEL_85;
            }
            uint64_t v96 = (v88 >> 3) + 1;
            uint64_t v97 = 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v89 = &v54[v97 / 0xFFFFFFFFFFFFFFF8];
            uint64_t v82 = (double *)((char *)v82 - v97);
            uint64_t v98 = &v81[8 * v77 - 16];
            BOOL v99 = v54 - 2;
            uint64_t v100 = v96 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v101 = *(_OWORD *)v99;
              *(v98 - 1) = *((_OWORD *)v99 - 1);
              _OWORD *v98 = v101;
              v98 -= 2;
              v99 -= 4;
              v100 -= 4;
            }
            while (v100);
            if (v96 != (v96 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_85:
                uint64_t v90 = *((void *)v89-- - 1);
                *((void *)v82-- - 1) = v90;
              }
              while (v89 != v164);
            }
          }
          else
          {
            BOOL v81 = 0;
            uint64_t v82 = (double *)(8 * v77);
            *(void *)(8 * v77) = 0;
            uint64_t v59 = 8 * v77 + 8;
            int64_t v83 = (char *)v54 - (char *)v164;
            if (v54 != v164) {
              goto LABEL_83;
            }
          }
LABEL_91:
          BOOL v164 = v82;
          uint64_t v166 = (double *)&v81[8 * v80];
          if (v76) {
            operator delete(v76);
          }
          goto LABEL_48;
        }
        *uint64_t v54 = 0.0;
        char v58 = v54 + 1;
LABEL_47:
        uint64_t v59 = (uint64_t)v58;
LABEL_48:
        uint64_t v165 = (double *)v59;
        ++v56;
        unint64_t v17 = v181;
        unint64_t v60 = v182;
        unint64_t v61 = 0xCCCCCCCCCCCCCCCDLL * ((v182 - v181) >> 3);
        uint64_t v54 = (double *)v59;
        if (v56 >= v61) {
          goto LABEL_115;
        }
      }
    }
  }
  unint64_t v61 = 0xCCCCCCCCCCCCCCCDLL * (v55 >> 3);
  unint64_t v60 = v17;
LABEL_115:
  if (v61)
  {
    uint64_t v108 = 0;
    uint64_t v109 = 0x7FFFFFFFFFFFFFFFLL;
    double v110 = -1.79769313e308;
    do
    {
      double v111 = v164[v108];
      if (*((double *)v170 + v108) * v111 > v110)
      {
        double v110 = *((double *)v170 + v108) * v111;
        uint64_t v109 = v108;
      }
      ++v108;
    }
    while (v61 != v108);
  }
  else
  {
    uint64_t v109 = 0x7FFFFFFFFFFFFFFFLL;
  }
  double v112 = (double)v109 + -3.0;
  double v113 = (double)v109 + 3.0;
  double v114 = (double)v61;
  for (float64x2_t i = 0uLL; v112 <= v113; v112 = v112 + 1.0)
  {
    if (v112 < 0.0)
    {
      double v141 = v112 + v114;
    }
    else
    {
      double v141 = v112;
      if (v112 >= v114) {
        double v141 = v112 - v114;
      }
    }
    float64x2_t i = vaddq_f64(i, *(float64x2_t *)&v17[40 * (unint64_t)v141]);
  }
  __asm { FMOV            V1.2D, #7.0 }
  float64x2_t v163 = vdivq_f64(i, _Q1);
  unint64_t v120 = 0xCCCCCCCCCCCCCCCDLL * ((v60 - v17) >> 3);
  if (v60 == v17)
  {
    uint64_t v123 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v121 = 0;
    uint64_t v122 = (int)(v114 * 0.33);
    uint64_t v123 = 0x7FFFFFFFFFFFFFFFLL;
    double v124 = -1.79769313e308;
    uint64_t v161 = v122;
    do
    {
      unint64_t v128 = v109 - v121;
      if ((uint64_t)(v109 - v121) < 0) {
        unint64_t v128 = v121 - v109;
      }
      if (v128 <= v120 >> 1) {
        uint64_t v129 = v128;
      }
      else {
        uint64_t v129 = v120 - v128;
      }
      if (v129 >= v122)
      {
        if (v60 == v17)
        {
          double v125 = 0.0;
          int v126 = (double *)v17;
        }
        else
        {
          uint64_t v162 = v123;
          uint64_t v130 = 0;
          unint64_t v131 = 0;
          double v132 = 0.0;
          double v133 = 0.0;
          do
          {
            uint64_t v134 = objc_opt_class();
            objc_msgSend_threePointsOrientationWithOrigin_pointA_pointB_(v134, v135, v136, v137, v138, v139, *(_OWORD *)&v163, *(double *)&v181[40 * v121], *(double *)&v181[40 * v121 + 8], *(double *)&v181[v130], *(double *)&v181[v130 + 8]);
            if (v140 > 0.0) {
              double v132 = v132 + 1.0;
            }
            else {
              double v133 = v133 + 1.0;
            }
            ++v131;
            int v126 = (double *)v181;
            unint64_t v17 = v182;
            v130 += 40;
          }
          while (v131 < 0xCCCCCCCCCCCCCCCDLL * ((v182 - v181) >> 3));
          double v125 = 0.0;
          if (v133 <= 0.0)
          {
            uint64_t v122 = v161;
            uint64_t v123 = v162;
          }
          else
          {
            uint64_t v123 = v162;
            if (v132 > 0.0)
            {
              double v125 = v133 / v132;
              if (v132 / v133 < v133 / v132) {
                double v125 = v132 / v133;
              }
            }
            uint64_t v122 = v161;
          }
        }
        unint64_t v60 = v17;
        double v127 = (double)v129
             / ((double)v120
              * 0.5)
             * v125
             * (sqrt((v126[5 * v121 + 1] - v163.f64[1]) * (v126[5 * v121 + 1] - v163.f64[1])+ (v126[5 * v121] - v163.f64[0]) * (v126[5 * v121] - v163.f64[0]))/ v16);
        if (v127 > v124)
        {
          uint64_t v123 = v121;
          double v124 = v127;
        }
        unint64_t v17 = (char *)v126;
      }
      ++v121;
      unint64_t v120 = 0xCCCCCCCCCCCCCCCDLL * ((v60 - v17) >> 3);
    }
    while (v121 < v120);
  }
  double v142 = (double)v123 + -3.0;
  double v143 = (double)v123 + 3.0;
  double v144 = 0.0;
  double v145 = 0.0;
  if (v142 <= v143)
  {
    double v158 = (double)v120;
    do
    {
      if (v142 < 0.0)
      {
        double v159 = v142 + v158;
      }
      else
      {
        double v159 = v142;
        if (v142 >= v158) {
          double v159 = v142 - v158;
        }
      }
      uint64_t v160 = (double *)&v17[40 * (unint64_t)v159];
      double v144 = v144 + *v160;
      double v145 = v145 + v160[1];
      double v142 = v142 + 1.0;
    }
    while (v142 <= v143);
  }
  double v146 = atan2(v145 / 7.0 - v163.f64[1], v144 / 7.0 - v163.f64[0]) * 180.0 / 3.14159265 + -90.0;
  if (v146 >= 0.0) {
    double v147 = v146;
  }
  else {
    double v147 = v146 + 360.0;
  }
  __double2 v148 = __sincos_stret(v147 * 3.14159265 / 180.0);
  if (v177 != v176)
  {
    unint64_t v149 = (v177 - (unsigned char *)v176) / 40;
    if (v149 <= 1) {
      unint64_t v149 = 1;
    }
    double v150 = (double *)((char *)v176 + 8);
    double v151 = 1.79769313e308;
    double v152 = -1.79769313e308;
    double v153 = -1.79769313e308;
    double v154 = 1.79769313e308;
    do
    {
      double v155 = *(v150 - 1);
      double v156 = v148.__sinval * *v150 + v155 * v148.__cosval;
      double v157 = v155 * -v148.__sinval + *v150 * v148.__cosval;
      if (v156 < v154) {
        double v154 = v156;
      }
      if (v156 > v153) {
        double v153 = v156;
      }
      if (v157 < v151) {
        double v151 = v157;
      }
      if (v157 > v152) {
        double v152 = v157;
      }
      v150 += 5;
      --v149;
    }
    while (v149);
  }
  fmod(v147, 45.0);
  fmod(v147, 15.0);
  operator new();
}

void sub_1C4B93C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1C4AAE650(&a21);
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
    uint64_t v33 = a30;
    if (!a30)
    {
LABEL_5:
      uint64_t v34 = *(void **)(v31 - 176);
      if (!v34) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v33 = a30;
    if (!a30) {
      goto LABEL_5;
    }
  }
  a31 = (uint64_t)v33;
  operator delete(v33);
  uint64_t v34 = *(void **)(v31 - 176);
  if (!v34)
  {
LABEL_6:
    uint64_t v35 = (void *)a11[6];
    if (!v35) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  *(void *)(v31 - 168) = v34;
  operator delete(v34);
  uint64_t v35 = (void *)a11[6];
  if (!v35)
  {
LABEL_7:
    uint64_t v36 = *a12;
    if (!*a12) {
      goto LABEL_8;
    }
    goto LABEL_13;
  }
LABEL_12:
  a11[7] = v35;
  operator delete(v35);
  uint64_t v36 = *a12;
  if (!*a12)
  {
LABEL_8:

    _Unwind_Resume(a1);
  }
LABEL_13:
  a11[4] = v36;
  operator delete(v36);

  _Unwind_Resume(a1);
}

void HeartRegressor::provideAnAnswer(HeartRegressor *this, CHDrawing *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_bounds(a2, (const char *)a2, a3, a4, a5, a6);
  CGFloat x = v10.origin.x;
  CGFloat y = v10.origin.y;
  CGFloat width = v10.size.width;
  CGFloat height = v10.size.height;
  CGRectGetMidX(v10);
  v11.origin.CGFloat x = x;
  v11.origin.CGFloat y = y;
  v11.size.CGFloat width = width;
  v11.size.CGFloat height = height;
  CGRectGetMidY(v11);
  operator new();
}

void sub_1C4B93E10(char *a1@<X8>)
{
  a1[23] = 7;
  strcpy(a1, "CHHeart");
}

void sub_1C4B94100(uint64_t a1, void *a2, void *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v7 = (id)qword_1EA3C9FC8;
  uint64_t v8 = v7;
  os_signpost_id_t v9 = *(void *)(a1 + 48);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    LOWORD(v26) = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v8, OS_SIGNPOST_INTERVAL_END, v9, "CHReflowQuery", "", (uint8_t *)&v26, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  CGRect v10 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v26) = 0;
    _os_log_impl(&dword_1C492D000, v10, OS_LOG_TYPE_DEFAULT, "END \"CHReflowQuery\"", (uint8_t *)&v26, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  CGRect v11 = (id)qword_1EA3C9FA0;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = objc_msgSend_count(v5, v12, v13, v14, v15, v16);
    uint64_t v23 = objc_msgSend_count(*(void **)(a1 + 32), v18, v19, v20, v21, v22);
    uint64_t v24 = *(void *)(a1 + 56);
    uint64_t v25 = *(void *)(a1 + 64);
    int v26 = 134218752;
    uint64_t v27 = v17;
    __int16 v28 = 2048;
    uint64_t v29 = v23;
    __int16 v30 = 2048;
    uint64_t v31 = v24;
    __int16 v32 = 2048;
    uint64_t v33 = v25;
    _os_log_impl(&dword_1C492D000, v11, OS_LOG_TYPE_DEFAULT, "CHReflowQuery found %ld reflowable lines from %ld intial strokes and location = (%.2f,%.2f)", (uint8_t *)&v26, 0x2Au);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_1C4B94638(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v11 = objc_msgSend_ancestorIdentifier(v4, v6, v7, v8, v9, v10);
  if (v11 <= objc_msgSend_ancestorIdentifier(v5, v12, v13, v14, v15, v16))
  {
    uint64_t v23 = objc_msgSend_ancestorIdentifier(v4, v17, v18, v19, v20, v21);
    if (v23 >= objc_msgSend_ancestorIdentifier(v5, v24, v25, v26, v27, v28)) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = -1;
    }
  }
  else
  {
    uint64_t v22 = 1;
  }

  return v22;
}

void sub_1C4B94760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B94B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4B94D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B94DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B94DD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *CHLocalizedDescriptionForRecognitionSessionStatus(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  switch(a1)
  {
    case 0:
      id v6 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], a2, a3, a4, a5, a6);
      uint64_t v9 = objc_msgSend_localizedStringForKey_value_table_(v6, v7, @"Unknown", (uint64_t)&stru_1F20141C8, 0, v8);
      goto LABEL_10;
    case 1:
      id v6 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], a2, a3, a4, a5, a6);
      uint64_t v9 = objc_msgSend_localizedStringForKey_value_table_(v6, v18, @"Initial", (uint64_t)&stru_1F20141C8, 0, v19);
      goto LABEL_10;
    case 2:
      id v6 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], a2, a3, a4, a5, a6);
      uint64_t v9 = objc_msgSend_localizedStringForKey_value_table_(v6, v10, @"Accumulating", (uint64_t)&stru_1F20141C8, 0, v11);
      goto LABEL_10;
    case 3:
      id v6 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], a2, a3, a4, a5, a6);
      uint64_t v9 = objc_msgSend_localizedStringForKey_value_table_(v6, v12, @"Processing", (uint64_t)&stru_1F20141C8, 0, v13);
      goto LABEL_10;
    case 4:
      id v6 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], a2, a3, a4, a5, a6);
      uint64_t v9 = objc_msgSend_localizedStringForKey_value_table_(v6, v14, @"Finished", (uint64_t)&stru_1F20141C8, 0, v15);
LABEL_10:
      uint64_t v20 = (__CFString *)v9;

      uint64_t v16 = v20;
      break;
    default:
      uint64_t v16 = &stru_1F20141C8;
      break;
  }
  return v16;
}

void sub_1C4B94F90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B94FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B94FB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B94FC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B94FD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B95738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B95754(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B95910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9592C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B95940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B95974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B95994(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    unint64_t v2 = (void *)MEMORY[0x1C8786C20]();
    if (objc_opt_respondsToSelector())
    {
      uint64_t v8 = objc_msgSend_visibleStrokeEncodedIdentifiers(*(void **)(a1 + 24), v3, v4, v5, v6, v7);
      uint64_t v10 = *(void **)(a1 + 32);
      uint64_t v9 = (id *)(a1 + 32);
      if (v8 == v10) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v9 = (id *)(a1 + 32);
      if (!v11)
      {
LABEL_11:

        return;
      }
    }
    objc_storeStrong(v9, v8);
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v12 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = objc_msgSend_count(*v9, v13, v14, v15, v16, v17);
      int v19 = 134217984;
      uint64_t v20 = v18;
      _os_log_impl(&dword_1C492D000, v12, OS_LOG_TYPE_DEBUG, "stroke provider visible strokes %lu", (uint8_t *)&v19, 0xCu);
    }

    goto LABEL_11;
  }
}

void sub_1C4B95ADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B95AF4(uint64_t a1)
{
  unint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  attr = dispatch_queue_attr_make_with_qos_class(v2, QOS_CLASS_USER_INITIATED, 0);

  dispatch_queue_t v3 = dispatch_queue_create_with_target_V2("com.apple.CoreHandwriting.RecognitionSessionCanvasTaskHighResponsiveness", attr, (dispatch_queue_t)qword_1EA3C9498);
  uint64_t v4 = (void *)qword_1EA3C9490;
  qword_1EA3C9490 = (uint64_t)v3;

  dispatch_workloop_t v5 = dispatch_workloop_create("com.apple.CoreHandwriting.RecognitionSessionCanvasTaskSharedWorkloop");
  uint64_t v6 = (void *)qword_1EA3C9498;
  qword_1EA3C9498 = (uint64_t)v5;

  uint64_t v7 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v8 = dispatch_queue_attr_make_with_qos_class(v7, *(dispatch_qos_class_t *)(*(void *)(a1 + 32) + 152), 0);

  dispatch_queue_t v9 = dispatch_queue_create_with_target_V2("com.apple.CoreHandwriting.RecognitionSessionCanvasTaskForeground", v8, (dispatch_queue_t)qword_1EA3C9498);
  uint64_t v10 = (void *)qword_1EA3C9480;
  qword_1EA3C9480 = (uint64_t)v9;

  uint64_t v11 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v12 = dispatch_queue_attr_make_with_qos_class(v11, *(dispatch_qos_class_t *)(*(void *)(a1 + 32) + 152), -15);

  dispatch_queue_t v13 = dispatch_queue_create_with_target_V2("com.apple.CoreHandwriting.RecognitionSessionCanvasTaskBackground", v12, (dispatch_queue_t)qword_1EA3C9498);
  uint64_t v14 = (void *)qword_1EA3C9488;
  qword_1EA3C9488 = (uint64_t)v13;
}

void sub_1C4B95C4C(uint64_t a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.CoreHandwriting.RecognitionSessionTextInputTaskSharedTarget", *(dispatch_queue_attr_t *)(a1 + 32));
  unint64_t v2 = (void *)qword_1EA3C94A8;
  qword_1EA3C94A8 = (uint64_t)v1;
}

void sub_1C4B95C8C(uint64_t a1, void *a2)
{
  dispatch_queue_t v3 = a2;
  if (a1)
  {
    label = dispatch_queue_get_label(0);
    if (strcmp(label, "com.apple.CoreHandwriting.RecognitionSession"))
    {
      dispatch_workloop_t v5 = *(NSObject **)(a1 + 296);
      if (v5)
      {
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = sub_1C4B95D78;
        block[3] = &unk_1E64E11B8;
        uint64_t v7 = v3;
        dispatch_sync(v5, block);

        return;
      }
    }
    v3[2](v3);
  }
}

void sub_1C4B95D68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B95D78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4B95E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  uint64_t v11 = v10;

  a10.super_class = (Class)CHRecognitionSession;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C4B95E64(uint64_t a1)
{
}

void sub_1C4B95E74(uint64_t a1, int a2, int a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      id v6 = (id)qword_1EA3C94B8;
      objc_sync_enter(v6);
      if (qword_1EA3C94B8)
      {
        uint64_t v11 = objc_msgSend_indexesOfObjectsPassingTest_((void *)qword_1EA3C94B8, v7, (uint64_t)&unk_1F2013B68, v8, v9, v10);
        objc_msgSend_removeObjectsAtIndexes_((void *)qword_1EA3C94B8, v12, (uint64_t)v11, v13, v14, v15);
      }
      objc_sync_exit(v6);
    }
    if (a3)
    {
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      id v16 = *(id *)(a1 + 320);
      uint64_t v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v17, (uint64_t)&v46, (uint64_t)v60, 16, v18);
      if (v24)
      {
        uint64_t v25 = *(void *)v47;
        do
        {
          for (uint64_t i = 0; i != v24; ++i)
          {
            if (*(void *)v47 != v25) {
              objc_enumerationMutation(v16);
            }
            objc_msgSend_cancel(*(void **)(*((void *)&v46 + 1) + 8 * i), v19, v20, v21, v22, v23, (void)v46);
          }
          uint64_t v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v19, (uint64_t)&v46, (uint64_t)v60, 16, v23);
        }
        while (v24);
      }

      objc_msgSend_removeAllObjects(*(void **)(a1 + 320), v27, v28, v29, v30, v31);
    }
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    __int16 v32 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      id v33 = *(id *)(a1 + 320);
      uint64_t v39 = objc_msgSend_count(v33, v34, v35, v36, v37, v38);
      uint64_t v45 = objc_msgSend_count((void *)qword_1EA3C94B8, v40, v41, v42, v43, v44);
      *(_DWORD *)long long buf = 134219008;
      uint64_t v51 = a1;
      __int16 v52 = 1024;
      int v53 = a3;
      __int16 v54 = 1024;
      int v55 = a2;
      __int16 v56 = 2048;
      uint64_t v57 = v39;
      __int16 v58 = 2048;
      uint64_t v59 = v45;
      _os_log_impl(&dword_1C492D000, v32, OS_LOG_TYPE_DEFAULT, "Cancelled tasks on session %p: foreground ? %d, background ? %d. Remaining activeTasks: %ld, sharedBackgroundTasks: %ld", buf, 0x2Cu);
    }
  }
}

void sub_1C4B9609C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B960B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1C4B960D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B96240(void **a1, void *a2, int a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  if (a3)
  {
    if (qword_1EA3C94C0 != -1) {
      dispatch_once(&qword_1EA3C94C0, &unk_1F2012FB0);
    }
    id v10 = (id)qword_1EA3C94B8;
    objc_sync_enter(v10);
    objc_msgSend_addObject_((void *)qword_1EA3C94B8, v11, (uint64_t)v9, v12, v13, v14);
    objc_sync_exit(v10);
  }
  else
  {
    objc_msgSend_addObject_(a1[40], v5, (uint64_t)v9, v6, v7, v8);
    objc_msgSend_setActive(a1, v15, v16, v17, v18, v19);
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v20 = (id)qword_1EA3C9FA0;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    id v21 = a1[40];
    int v32 = 134219008;
    id v33 = v9;
    __int16 v34 = 1024;
    int v35 = a3;
    __int16 v36 = 2048;
    uint64_t v37 = a1;
    __int16 v38 = 2048;
    uint64_t v39 = objc_msgSend_count(v21, v22, v23, v24, v25, v26);
    __int16 v40 = 2048;
    uint64_t v41 = objc_msgSend_count((void *)qword_1EA3C94B8, v27, v28, v29, v30, v31);
    _os_log_impl(&dword_1C492D000, v20, OS_LOG_TYPE_DEFAULT, "Registered a new task %p (isBackground=%d) on session %p, activeTasks: %ld, sharedBackgroundTasks: %ld", (uint8_t *)&v32, 0x30u);
  }
}

void sub_1C4B963EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B963FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9640C(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_1C4B96428(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B96444(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_array(MEMORY[0x1E4F1CA48], a2, a3, a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C94B8;
  qword_1EA3C94B8 = v6;
}

void sub_1C4B96484(uint64_t a1, void *a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v8 = a2;
  if (a1)
  {
    uint64_t v9 = objc_msgSend_count(*(void **)(a1 + 320), v3, v4, v5, v6, v7);
    uint64_t v15 = objc_msgSend_count((void *)qword_1EA3C94B8, v10, v11, v12, v13, v14);
    id v16 = (id)qword_1EA3C94B8;
    objc_sync_enter(v16);
    objc_msgSend_removeObject_((void *)qword_1EA3C94B8, v17, (uint64_t)v8, v18, v19, v20);
    objc_sync_exit(v16);

    objc_msgSend_removeObject_(*(void **)(a1 + 320), v21, (uint64_t)v8, v22, v23, v24);
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v25 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      id v26 = *(id *)(a1 + 320);
      int v37 = 134219264;
      id v38 = v8;
      __int16 v39 = 2048;
      uint64_t v40 = a1;
      __int16 v41 = 2048;
      uint64_t v42 = v9;
      __int16 v43 = 2048;
      uint64_t v44 = objc_msgSend_count(v26, v27, v28, v29, v30, v31);
      __int16 v45 = 2048;
      uint64_t v46 = v15;
      __int16 v47 = 2048;
      uint64_t v48 = objc_msgSend_count((void *)qword_1EA3C94B8, v32, v33, v34, v35, v36);
      _os_log_impl(&dword_1C492D000, v25, OS_LOG_TYPE_DEFAULT, "Removed a task %p on session %p, activeTasks: %ld -> %ld, sharedBackgroundTasks: %ld -> %ld", (uint8_t *)&v37, 0x3Eu);
    }
  }
}

void sub_1C4B96618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B96630(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_1C4B9664C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9665C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B96670(uint64_t a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  shouldCancelTaskGivenNewTasuint64_t k = objc_msgSend_shouldCancelTaskGivenNewTask_(v3, v4, *(void *)(a1 + 32), v5, v6, v7);
  if (shouldCancelTaskGivenNewTask)
  {
    objc_msgSend_cancel(v3, v8, v9, v10, v11, v12);
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v14 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = objc_msgSend_status(v3, v15, v16, v17, v18, v19);
      uint64_t v21 = *(void *)(a1 + 32);
      int v23 = 134218496;
      id v24 = v3;
      __int16 v25 = 2048;
      uint64_t v26 = v20;
      __int16 v27 = 2048;
      uint64_t v28 = v21;
      _os_log_impl(&dword_1C492D000, v14, OS_LOG_TYPE_DEFAULT, "Canceling task %p (status = %ld) from the background shared queue given new task %p", (uint8_t *)&v23, 0x20u);
    }
  }
  return shouldCancelTaskGivenNewTask;
}

void sub_1C4B96790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B967A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1C4B967B8(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v13 = objc_msgSend_status(v2, v3, v4, v5, v6, v7);
  if (v13 == 1) {
    objc_msgSend_cancel(v2, v8, v9, v10, v11, v12);
  }

  return v13 == 1;
}

void sub_1C4B96804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B96814(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v17 = a5;
  if (a1)
  {
    objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], v12, v13, v14, v15, v16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4B96944;
    block[3] = &unk_1E64E4898;
    uint64_t v24 = v18;
    id v20 = v11;
    uint64_t v21 = a1;
    id v22 = v10;
    id v23 = v17;
    dispatch_async(v9, block);
  }
}

void sub_1C4B96928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B96944(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = objc_msgSend_standardUserDefaults(MEMORY[0x1E4F1CB18], a2, a3, a4, a5, a6);
  objc_msgSend_floatForKey_(v7, v8, @"CHRecognitionTaskQueuingOverhead", v9, v10, v11);
  float v13 = v12;

  if (v13 > 0.0)
  {
    if (qword_1EA3CA000 == -1)
    {
      uint64_t v19 = (id)qword_1EA3C9FA0;
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
LABEL_5:

        sleep(v13);
        goto LABEL_6;
      }
    }
    else
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      uint64_t v19 = (id)qword_1EA3C9FA0;
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_5;
      }
    }
    uint64_t v20 = *(void *)(a1 + 32);
    int v39 = 138412546;
    uint64_t v40 = v20;
    __int16 v41 = 2048;
    double v42 = v13;
    _os_log_impl(&dword_1C492D000, v19, OS_LOG_TYPE_DEFAULT, "Dispatch task %@ about to get started, waiting for explicit overhead of %0.1fs before starting.", (uint8_t *)&v39, 0x16u);
    goto LABEL_5;
  }
LABEL_6:
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], v14, v15, v16, v17, v18);
  double v22 = v21;
  double v23 = *(double *)(a1 + 64);
  if (qword_1EA3CA000 == -1)
  {
    uint64_t v24 = (id)qword_1EA3C9FA0;
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  uint64_t v24 = (id)qword_1EA3C9FA0;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
LABEL_8:
    uint64_t v25 = *(void *)(a1 + 32);
    double v26 = *(double *)(a1 + 40);
    uint64_t v27 = *(void *)(a1 + 48);
    int v39 = 138413058;
    uint64_t v40 = v25;
    __int16 v41 = 2048;
    double v42 = v26;
    __int16 v43 = 2112;
    uint64_t v44 = v27;
    __int16 v45 = 2048;
    double v46 = v22 - v23;
    _os_log_impl(&dword_1C492D000, v24, OS_LOG_TYPE_DEFAULT, "Starting task %@ for session %p on queue %@ after queuing time = %.3f seconds", (uint8_t *)&v39, 0x2Au);
  }
LABEL_9:

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], v28, v29, v30, v31, v32);
  double v34 = v33;
  if (qword_1EA3CA000 != -1)
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v35 = (id)qword_1EA3C9FA0;
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v35 = (id)qword_1EA3C9FA0;
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
LABEL_11:
    uint64_t v36 = *(void *)(a1 + 32);
    double v37 = *(double *)(a1 + 40);
    uint64_t v38 = *(void *)(a1 + 48);
    int v39 = 138413058;
    uint64_t v40 = v36;
    __int16 v41 = 2048;
    double v42 = v37;
    __int16 v43 = 2112;
    uint64_t v44 = v38;
    __int16 v45 = 2048;
    double v46 = v34 - v22;
    _os_log_impl(&dword_1C492D000, v35, OS_LOG_TYPE_DEFAULT, "Ending task %@ for session %p on queue %@ after running time = %.3f seconds", (uint8_t *)&v39, 0x2Au);
  }
LABEL_12:
}

void sub_1C4B96C30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B96DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 64), 8);

  _Unwind_Resume(a1);
}

void sub_1C4B96DEC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void **)(a1 + 32);
  uint64_t v101 = a1;
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 168);
  if (v7 != (void *)v8 && (objc_msgSend_isEqualToArray_(v7, a2, v8, a4, a5, a6) & 1) == 0)
  {
    uint64_t v14 = objc_msgSend_copy(*(void **)(v101 + 32), v9, v10, v11, v12, v13);
    uint64_t v15 = *(void *)(v101 + 40);
    uint64_t v16 = *(void **)(v15 + 168);
    *(void *)(v15 + 168) = v14;

    *(unsigned char *)(*(void *)(*(void *)(v101 + 48) + 8) + 24) = objc_msgSend_count(*(void **)(*(void *)(v101 + 40) + 200), v17, v18, v19, v20, v21) != 0;
    double v22 = objc_opt_class();
    objc_msgSend_effectiveLocalesFromLocales_(v22, v23, *(void *)(v101 + 32), v24, v25, v26);
    id newValue = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v28 = *(void **)(v101 + 40);
    if (v28) {
      objc_setProperty_nonatomic_copy(v28, v27, newValue, 200);
    }
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v29 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v33 = *(void *)(v101 + 40);
      double v34 = objc_msgSend_ch_descriptionWithSeparator_filterBlock_(*(void **)(v101 + 32), v30, @", ", (uint64_t)&unk_1F2013B88, v31, v32);
      uint64_t v38 = objc_msgSend_ch_descriptionWithSeparator_filterBlock_(newValue, v35, @", ", (uint64_t)&unk_1F2010A60, v36, v37);
      *(_DWORD *)long long buf = 134218498;
      uint64_t v112 = v33;
      __int16 v113 = 2112;
      double v114 = v34;
      __int16 v115 = 2112;
      int64_t v116 = v38;
      _os_log_impl(&dword_1C492D000, v29, OS_LOG_TYPE_DEFAULT, "Configuring RecognitionSession %p with preferred locales: %@. Effective locales: %@.", buf, 0x20u);
    }
    uint64_t v44 = *(void *)(v101 + 40);
    if (*(unsigned char *)(*(void *)(*(void *)(v101 + 48) + 8) + 24) && v44)
    {
      uint64_t v45 = *(void *)(v44 + 200);
      if (v45)
      {
        double v46 = objc_msgSend_setWithArray_(MEMORY[0x1E4F1CAD0], v39, v45, v41, v42, v43);
      }
      else
      {
        double v46 = 0;
      }
      objc_msgSend_allKeys(*(void **)(v44 + 208), v39, v45, v41, v42, v43, newValue);
      long long v108 = 0u;
      long long v109 = 0u;
      long long v106 = 0u;
      long long v107 = 0u;
      id v47 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v47, v48, (uint64_t)&v106, (uint64_t)buf, 16, v49);
      if (v54)
      {
        uint64_t v55 = *(void *)v107;
        do
        {
          for (uint64_t i = 0; i != v54; ++i)
          {
            if (*(void *)v107 != v55) {
              objc_enumerationMutation(v47);
            }
            uint64_t v57 = *(void *)(*((void *)&v106 + 1) + 8 * i);
            if ((objc_msgSend_containsObject_(v46, v50, v57, v51, v52, v53) & 1) == 0)
            {
              id v58 = *(id *)(v44 + 208);
              objc_msgSend_removeObjectForKey_(v58, v59, v57, v60, v61, v62);
            }
          }
          uint64_t v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v47, v50, (uint64_t)&v106, (uint64_t)buf, 16, v53);
        }
        while (v54);
      }

      id v63 = *(id *)(v44 + 200);
      self;
      uint64_t v67 = objc_msgSend_ch_descriptionWithSeparator_filterBlock_(v63, v64, @".", (uint64_t)&unk_1F2013BC8, v65, v66);

      uint64_t v68 = (void *)v67;
      objc_msgSend_allKeys(*(void **)(v44 + 224), v69, v70, v71, v72, v73);
      long long v104 = 0u;
      long long v105 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      id v74 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v81 = objc_msgSend_countByEnumeratingWithState_objects_count_(v74, v75, (uint64_t)&v102, (uint64_t)v110, 16, v76);
      if (v81)
      {
        uint64_t v82 = *(void *)v103;
        if (v68)
        {
          do
          {
            for (uint64_t j = 0; j != v81; ++j)
            {
              if (*(void *)v103 != v82) {
                objc_enumerationMutation(v74);
              }
              uint64_t v84 = *(void **)(*((void *)&v102 + 1) + 8 * j);
              if ((objc_msgSend_isEqualToString_(v84, v77, (uint64_t)v68, v78, v79, v80) & 1) == 0)
              {
                id v85 = *(id *)(v44 + 224);
                objc_msgSend_removeObjectForKey_(v85, v86, (uint64_t)v84, v87, v88, v89);
              }
            }
            uint64_t v81 = objc_msgSend_countByEnumeratingWithState_objects_count_(v74, v77, (uint64_t)&v102, (uint64_t)v110, 16, v80);
          }
          while (v81);
        }
        else
        {
          do
          {
            for (uint64_t k = 0; k != v81; ++k)
            {
              if (*(void *)v103 != v82) {
                objc_enumerationMutation(v74);
              }
              uint64_t v91 = *(void *)(*((void *)&v102 + 1) + 8 * k);
              id v92 = *(id *)(v44 + 224);
              objc_msgSend_removeObjectForKey_(v92, v93, v91, v94, v95, v96);
            }
            uint64_t v81 = objc_msgSend_countByEnumeratingWithState_objects_count_(v74, v97, (uint64_t)&v102, (uint64_t)v110, 16, v98);
          }
          while (v81);
        }
      }

      uint64_t v44 = *(void *)(v101 + 40);
    }
    if (v44)
    {
      uint64_t v99 = *(void *)(v44 + 176);
      if (v99)
      {
        if (objc_msgSend_count(*(void **)(v44 + 168), v39, v40, v41, v42, v43)) {
          LOBYTE(v99) = 1;
        }
        else {
          LOBYTE(v99) = *(void *)(v44 + 160) == 2;
        }
      }
    }
    else
    {
      LOBYTE(v99) = 0;
    }
    *(unsigned char *)(*(void *)(*(void *)(v101 + 56) + 8) + 24) = v99;
  }
}

void sub_1C4B9729C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id sub_1C4B97350(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_localeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  return v6;
}

id sub_1C4B97380(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_localeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  return v6;
}

void sub_1C4B97494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B974BC(uint64_t result, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(result + 32);
  uint64_t v7 = *(void *)(result + 40);
  if (v6 != *(void *)(v7 + 176))
  {
    uint64_t v8 = result;
    *(void *)(v7 + 176) = v6;
    uint64_t v9 = *(void *)(result + 40);
    if (v9)
    {
      uint64_t v10 = *(void *)(v9 + 176);
      if (v10)
      {
        uint64_t result = objc_msgSend_count(*(void **)(v9 + 168), a2, a3, a4, a5, a6);
        if (result) {
          LOBYTE(v10) = 1;
        }
        else {
          LOBYTE(v10) = *(void *)(v9 + 160) == 2;
        }
      }
    }
    else
    {
      LOBYTE(v10) = 0;
    }
    *(unsigned char *)(*(void *)(*(void *)(v8 + 48) + 8) + 24) = v10;
  }
  return result;
}

void sub_1C4B9761C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B9763C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4B9764C(uint64_t a1)
{
}

void sub_1C4B97654(uint64_t a1)
{
}

void sub_1C4B97714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B97724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F4181798](a2, sel_recognitionSessionDidUpdateRecognitionResult_, *(void *)(a1 + 32), a4, a5, a6);
}

void sub_1C4B97730(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = sub_1C4B981E4;
    v5[3] = &unk_1E64E26B0;
    v5[4] = a1;
    id v6 = v3;
    sub_1C4B95C8C(a1, v5);
  }
}

void sub_1C4B977D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4B978D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4B978F8(uint64_t a1)
{
}

void sub_1C4B97A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4B97A74(uint64_t a1)
{
}

void sub_1C4B97C24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B97C40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B97C54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B97C68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B97C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B97D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4B97D9C(uint64_t a1)
{
}

void sub_1C4B97ED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B97EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B97FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B97FFC(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 16);
  return result;
}

void sub_1C4B98170(uint64_t a1, void *a2)
{
  id v7 = a2;
  if (objc_opt_respondsToSelector()) {
    objc_msgSend_recognitionSessionDidChangeStatus_(v7, v3, *(void *)(a1 + 32), v4, v5, v6);
  }
}

void sub_1C4B981D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B981E4(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v2 = *(void **)(a1 + 32);
  if (v2) {
    id v2 = (void *)v2[33];
  }
  id v3 = v2;
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v20, (uint64_t)v24, 16, v5);
  if (v8)
  {
    uint64_t v9 = *(void *)v21;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v21 != v9) {
          objc_enumerationMutation(v3);
        }
        uint64_t v11 = *(void **)(*((void *)&v20 + 1) + 8 * v10);
        if (v11)
        {
          id v12 = v11;
          uint64_t v13 = *(void *)(a1 + 32);
          uint64_t v14 = *(NSObject **)(v13 + 304);
          v17[0] = MEMORY[0x1E4F143A8];
          v17[1] = 3221225472;
          v17[2] = sub_1C4B983AC;
          v17[3] = &unk_1E64E4910;
          v17[4] = v13;
          v17[5] = v12;
          id v15 = *(id *)(a1 + 40);
          id v18 = v12;
          id v19 = v15;
          id v16 = v12;
          dispatch_async(v14, v17);
        }
        ++v10;
      }
      while (v8 != v10);
      uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v6, (uint64_t)&v20, (uint64_t)v24, 16, v7);
    }
    while (v8);
  }
}

void sub_1C4B9838C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B983AC(void *a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  char v9 = 0;
  uint64_t v2 = a1[4];
  if (v2) {
    id v3 = *(NSObject **)(v2 + 296);
  }
  else {
    id v3 = 0;
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4B98498;
  block[3] = &unk_1E64E1190;
  void block[6] = &v6;
  uint64_t v4 = a1[5];
  void block[4] = v2;
  block[5] = v4;
  dispatch_sync(v3, block);
  if (*((unsigned char *)v7 + 24)) {
    (*(void (**)(void))(a1[7] + 16))();
  }
  _Block_object_dispose(&v6, 8);
}

void sub_1C4B98480(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C4B98498(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2) {
    uint64_t v2 = (void *)v2[33];
  }
  uint64_t v7 = v2;
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = objc_msgSend_containsObject_(v7, v3, a1[5], v4, v5, v6);
}

void sub_1C4B984FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B98510(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v5 = a2;
  *a4 = objc_msgSend_isNonRecognitionTask(v5, v6, v7, v8, v9, v10) ^ 1;
  uint64_t v16 = objc_msgSend_isNonRecognitionTask(v5, v11, v12, v13, v14, v15) ^ 1;

  return v16;
}

void sub_1C4B98558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B985D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B985E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B987B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B987D0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void sub_1C4B987D8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v7 = objc_msgSend_q_needsForegroundRecognition((void *)a1, a2, a3, a4, a5, a6);
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v8 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = *(id *)(a1 + 320);
      uint64_t v15 = objc_msgSend_count(v9, v10, v11, v12, v13, v14);
      int v16 = *(unsigned __int8 *)(a1 + 144);
      uint64_t v22 = objc_msgSend_strokeProviderVersion(*(void **)(a1 + 8), v17, v18, v19, v20, v21);
      long long v23 = (void *)v22;
      uint64_t v24 = "N";
      int v26 = 134219010;
      uint64_t v27 = a1;
      if (v7) {
        uint64_t v24 = "Y";
      }
      uint64_t v25 = @"Y";
      __int16 v28 = 2048;
      uint64_t v29 = v15;
      __int16 v30 = 2080;
      uint64_t v31 = v24;
      __int16 v32 = 2112;
      if (!v16) {
        uint64_t v25 = @"N";
      }
      uint64_t v33 = v25;
      __int16 v34 = 2112;
      uint64_t v35 = v22;
      _os_log_impl(&dword_1C492D000, v8, OS_LOG_TYPE_DEFAULT, "RecognitionSession %p cancelOngoingRequests. Cancelling %ld pending tasks. Foreground: %s. hasUnprocessedChanges %@->N. Last saved result for version: %@", (uint8_t *)&v26, 0x34u);
    }
    sub_1C4B95E74(a1, v7 ^ 1, 1);
    ++*(void *)(a1 + 256);
    *(unsigned char *)(a1 + 144) = 0;
  }
}

void sub_1C4B98978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B98B54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B98B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B98B90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B98BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C4B98BE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B98BF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B98C0C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v195 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7
    && *(void *)(v7 + 176)
    && (objc_msgSend_count(*(void **)(v7 + 168), a2, a3, a4, a5, a6) || *(void *)(v7 + 160) == 2))
  {
    uint64_t v12 = *(void *)(a1 + 40);
    if (!v12)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v13 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      {
        uint64_t v14 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v188 = v14;
        _os_log_impl(&dword_1C492D000, v13, OS_LOG_TYPE_FAULT, "dataSource %@ returned a nil strokeProviderSnapshot.", buf, 0xCu);
      }

      uint64_t v12 = *(void *)(a1 + 40);
    }
    objc_msgSend__setLatestStrokeProvider_(*(void **)(a1 + 32), v8, v12, v9, v10, v11);
    objc_msgSend__setLatestCalculateDocumentProvider_(*(void **)(a1 + 32), v15, *(void *)(a1 + 56), v16, v17, v18);
    uint64_t v24 = *(void **)(a1 + 32);
    if (v24)
    {
      objc_setProperty_atomic(v24, v19, *(id *)(a1 + 64), 216);
      uint64_t v24 = *(void **)(a1 + 32);
    }
    if (!objc_msgSend_mode(v24, v19, v20, v21, v22, v23)
      || objc_msgSend_mode(*(void **)(a1 + 32), v25, v26, v27, v28, v29) == 2)
    {
      sub_1C4B95994(*(void *)(a1 + 32));
      uint64_t v30 = *(void *)(a1 + 32);
      if (v30)
      {
        uint64_t v31 = *(void **)(v30 + 72);
        if (v31)
        {
          *(void *)(v30 + 72) = 0;
        }
        __int16 v32 = *(void **)(v30 + 80);
        if (v32)
        {
          *(void *)(v30 + 80) = 0;
        }
      }
    }
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v33 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v39 = *(void *)(a1 + 32);
      uint64_t v40 = objc_msgSend_strokeProviderVersion(*(void **)(a1 + 40), v34, v35, v36, v37, v38);
      *(_DWORD *)long long buf = 134218242;
      uint64_t v188 = v39;
      __int16 v189 = 2112;
      uint8x8_t v190 = v40;
      _os_log_impl(&dword_1C492D000, v33, OS_LOG_TYPE_DEFAULT, "RecognitionSession %p received request to rebuild recognition results. Stroke provider version: %@", buf, 0x16u);
    }
    sub_1C4B987D8(*(void *)(a1 + 32), v41, v42, v43, v44, v45);
    if (*(void *)(*(void *)(a1 + 32) + 8))
    {
      uint64_t v50 = objc_alloc_init(CHStrokeClutterFilter);
      __int16 v56 = objc_msgSend_strokeGroupingResult(*(void **)(*(void *)(a1 + 32) + 8), v51, v52, v53, v54, v55);
      CGRect v185 = objc_msgSend_strokeGroups(v56, v57, v58, v59, v60, v61);

      uint64_t v62 = [CHStrokeGroupingResult alloc];
      uint64_t v68 = objc_msgSend_set(MEMORY[0x1E4F1CAD0], v63, v64, v65, v66, v67);
      CGRect v184 = objc_msgSend_initWithStrokeGroups_createdStrokeGroups_deletedStrokeGroups_(v62, v69, (uint64_t)v68, 0, (uint64_t)v185, v70);

      uint64_t v71 = [CHStrokeClassificationResult alloc];
      uint64_t v77 = objc_msgSend_dictionary(MEMORY[0x1E4F1C9E8], v72, v73, v74, v75, v76);
      int64_t v83 = objc_msgSend_dictionary(MEMORY[0x1E4F1C9E8], v78, v79, v80, v81, v82);
      uint64_t v89 = objc_msgSend_dictionary(MEMORY[0x1E4F1C9E8], v84, v85, v86, v87, v88);
      uint64_t v95 = objc_msgSend_dictionary(MEMORY[0x1E4F1C9E8], v90, v91, v92, v93, v94);
      uint64_t v101 = objc_msgSend_set(MEMORY[0x1E4F1CAD0], v96, v97, v98, v99, v100);
      long long v103 = objc_msgSend_initWithStrokeClassificationsByStrokeIdentifier_scriptClassificationsByStrokeIdentifier_scriptClassificationRawResultsByStrokeIdentifier_substrokesByStrokeIdentifier_nontextCandidates_(v71, v102, (uint64_t)v77, (uint64_t)v83, (uint64_t)v89, (uint64_t)v95, v101);

      long long v104 = [CHRecognitionSessionResult alloc];
      uint64_t v183 = objc_msgSend_strokeProviderVersion(*(void **)(*(void *)(a1 + 32) + 8), v105, v106, v107, v108, v109);
      __int16 v115 = objc_msgSend_encodedStrokeProviderVersion(*(void **)(*(void *)(a1 + 32) + 8), v110, v111, v112, v113, v114);
      unint64_t v121 = objc_msgSend_orderedStrokeIdentifiers(*(void **)(*(void *)(a1 + 32) + 8), v116, v117, v118, v119, v120);
      uint64_t v127 = objc_msgSend_sessionMode(*(void **)(*(void *)(a1 + 32) + 8), v122, v123, v124, v125, v126);
      double v133 = objc_msgSend_locales(*(void **)(*(void *)(a1 + 32) + 8), v128, v129, v130, v131, v132);
      uint64_t v139 = objc_msgSend_preferredLocales(*(void **)(*(void *)(a1 + 32) + 8), v134, v135, v136, v137, v138);
      double v145 = objc_msgSend_declaredVariables(*(void **)(a1 + 56), v140, v141, v142, v143, v144);
      memset(v186, 0, sizeof(v186));
      uint64_t v151 = objc_msgSend_recognitionEnvironment(*(void **)(a1 + 32), v146, v147, v148, v149, v150);
      uint64_t v153 = objc_msgSend_initWithStrokeProviderVersion_encodedStrokeProviderVersion_orderedStrokeIdentifiers_sessionMode_locales_preferredLocales_declaredVariables_clutterFilter_strokeClassificationResult_rawStrokeClassificationResult_strokeGroupingResult_rawStrokeGroupingResult_unprocessedStrokeGroupingResult_recognitionResults_rawRecognitionResults_inlineContinuousModeResults_autoRefineResults_generationDuration_recognitionEnvironment_(v104, v152, (uint64_t)v183, (uint64_t)v115, (uint64_t)v121, v127, v133, v139, v145, v50, v103, v103, v184, v184, v184, 0, 0, 0, 0,
               v186,
               v151);

      double v154 = v153;
      objc_msgSend__setLastRecognitionResult_(*(void **)(a1 + 32), v155, v153, v156, v157, v158);
    }
    else
    {
      double v154 = 0;
      objc_msgSend__setLastRecognitionResult_(*(void **)(a1 + 32), v46, 0, v47, v48, v49);
    }
    objc_msgSend__setLastRecognitionResult_(*(void **)(a1 + 32), v159, 0, v160, v161, v162);
    uint64_t v167 = *(void *)(a1 + 32);
    if (v167)
    {
      __int16 v168 = *(void **)(v167 + 72);
      if (!v168 || (*(void *)(v167 + 72) = 0, v168, (uint64_t v167 = *(void *)(a1 + 32)) != 0))
      {
        uint64_t v169 = *(void **)(v167 + 80);
        if (v169)
        {
          *(void *)(v167 + 80) = 0;
        }
      }
    }
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v170 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v170, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v171 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 134217984;
      uint64_t v188 = v171;
      _os_log_impl(&dword_1C492D000, v170, OS_LOG_TYPE_DEBUG, "RecognitionSession %p rebuilding recognition results. Cleared previous results. Will trigger processing soon.", buf, 0xCu);
    }

    uint64_t v172 = *(void *)(a1 + 32);
    if (v172)
    {
      *(unsigned char *)(v172 + 144) = 1;
      long long v173 = *(void **)(a1 + 32);
    }
    else
    {
      long long v173 = 0;
    }
    sub_1C4B99378(v173, 0);
    uint64_t v178 = *(void *)(a1 + 32);
    if (v178)
    {
      if (objc_msgSend_indexOfObjectPassingTest_(*(void **)(v178 + 320), v174, (uint64_t)&unk_1F2013BA8, v175, v176, v177) == 0x7FFFFFFFFFFFFFFFLL)
      {
        if (*(unsigned char *)(v178 + 144))
        {
          objc_msgSend__setStatus_((void *)v178, v179, 2, v180, v181, v182);
        }
        else if (*(void *)(v178 + 8))
        {
          objc_msgSend__setStatus_((void *)v178, v179, 4, v180, v181, v182);
        }
        else
        {
          objc_msgSend__setStatus_((void *)v178, v179, 1, v180, v181, v182);
        }
      }
      else
      {
        objc_msgSend__setStatus_((void *)v178, v179, 3, v180, v181, v182);
      }
    }
  }
  else
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    double v154 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
    {
      uint64_t v163 = *(void *)(a1 + 32);
      BOOL v164 = *(void **)(a1 + 48);
      uint64_t v165 = *(void *)(v163 + 200);
      uint64_t v166 = *(void *)(v163 + 168);
      *(_DWORD *)long long buf = 134218754;
      uint64_t v188 = v163;
      __int16 v189 = 2112;
      uint8x8_t v190 = v164;
      __int16 v191 = 2112;
      uint64_t v192 = v165;
      __int16 v193 = 2112;
      uint64_t v194 = v166;
      _os_log_impl(&dword_1C492D000, v154, OS_LOG_TYPE_ERROR, "RecognitionSession %p cannot process rebuildRecognitionResults request. dataSource: %@, text recognition locales: %@, preferred locales: %@.", buf, 0x2Au);
    }
  }
}

void sub_1C4B9928C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B99378(void *a1, int a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    label = dispatch_queue_get_label(0);
    if (strcmp(label, "com.apple.CoreHandwriting.RecognitionSession"))
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      id v5 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 136315650;
        uint64_t v33 = "-[CHRecognitionSession q_scheduleProcessStrokeProviderChangesImmediately:]";
        __int16 v34 = 2080;
        uint64_t v35 = "com.apple.CoreHandwriting.RecognitionSession";
        __int16 v36 = 2080;
        uint64_t v37 = dispatch_queue_get_label(0);
        _os_log_impl(&dword_1C492D000, v5, OS_LOG_TYPE_FAULT, "Method %s should be running on queue %s, found %s.", buf, 0x20u);
      }
    }
    if (!a1[3])
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v6 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C492D000, v6, OS_LOG_TYPE_FAULT, "latestStrokeProvider cannot be nil when scheduling change processing.", buf, 2u);
      }
    }
    uint64_t v7 = a1[32] + 1;
    a1[32] = v7;
    if (a2)
    {
      sub_1C4B99DB0((uint64_t)a1);
    }
    else
    {
      uint64_t v8 = (void *)a1[33];
      long long v28 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      id v9 = v8;
      uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v28, (uint64_t)buf, 16, v11);
      if (v12)
      {
        char v13 = 0;
        uint64_t v14 = *(void *)v29;
        double v15 = 1.79769313e308;
        do
        {
          for (uint64_t i = 0; i != v12; ++i)
          {
            if (*(void *)v29 != v14) {
              objc_enumerationMutation(v9);
            }
            uint64_t v17 = *(void **)(*((void *)&v28 + 1) + 8 * i);
            if (objc_opt_respondsToSelector())
            {
              objc_msgSend_preferredRecognitionResultUpdatesInterval(v17, v18, v19, v20, v21, v22);
              if (v15 >= v23) {
                double v15 = v23;
              }
              char v13 = 1;
            }
          }
          uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v18, (uint64_t)&v28, (uint64_t)buf, 16, v22);
        }
        while (v12);

        if (v13) {
          int64_t v24 = (uint64_t)(v15 * 1000000000.0);
        }
        else {
          int64_t v24 = 2000000000;
        }
      }
      else
      {

        int64_t v24 = 2000000000;
      }
      dispatch_time_t v25 = dispatch_time(0, v24);
      uint64_t v26 = a1[37];
      v27[0] = MEMORY[0x1E4F143A8];
      v27[1] = 3221225472;
      v27[2] = sub_1C4B9A578;
      v27[3] = &unk_1E64E1258;
      v27[4] = a1;
      void v27[5] = v7;
      dispatch_after(v25, v26, v27);
    }
  }
}

void sub_1C4B996A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B996C8(uint64_t a1)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v2 = (id)qword_1EA3C9FC8;
  os_signpost_id_t v3 = os_signpost_id_generate(v2);

  if (qword_1EA3CA000 == -1)
  {
    uint64_t v4 = (id)qword_1EA3C9FC8;
    unint64_t v5 = v3 - 1;
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_7;
    }
  }
  else
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v4 = (id)qword_1EA3C9FC8;
    unint64_t v5 = v3 - 1;
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_7;
    }
  }
  if (os_signpost_enabled(v4))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "CHRecognitionSessionPrincipalLinesTask", "", buf, 2u);
  }
LABEL_7:

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v6 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C492D000, v6, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHRecognitionSessionPrincipalLinesTask\"", buf, 2u);
  }

  objc_msgSend_main(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
  if (qword_1EA3CA000 == -1)
  {
    uint64_t v12 = (id)qword_1EA3C9FC8;
    if (v5 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_15;
    }
  }
  else
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v12 = (id)qword_1EA3C9FC8;
    if (v5 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_15;
    }
  }
  if (os_signpost_enabled(v12))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v12, OS_SIGNPOST_INTERVAL_END, v3, "CHRecognitionSessionPrincipalLinesTask", "", buf, 2u);
  }
LABEL_15:

  if (qword_1EA3CA000 == -1)
  {
    char v13 = (id)qword_1EA3C9F90[0];
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  char v13 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
LABEL_17:
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C492D000, v13, OS_LOG_TYPE_DEFAULT, "END \"CHRecognitionSessionPrincipalLinesTask\"", buf, 2u);
  }
LABEL_18:

  uint64_t v19 = objc_msgSend_outputResult(*(void **)(a1 + 32), v14, v15, v16, v17, v18);
  char v25 = objc_msgSend_cancelled(*(void **)(a1 + 32), v20, v21, v22, v23, v24);
  if (v19) {
    char v26 = v25;
  }
  else {
    char v26 = 1;
  }
  if (v26)
  {
    if (qword_1EA3CA000 == -1)
    {
      uint64_t v89 = (id)qword_1EA3C9FA0;
      if (!os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_42;
      }
    }
    else
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      uint64_t v89 = (id)qword_1EA3C9FA0;
      if (!os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_42;
      }
    }
    uint64_t v27 = *(void *)(a1 + 40);
    long long v28 = objc_msgSend_strokeProvider(*(void **)(a1 + 32), v91, v92, v93, v94, v95);
    uint64_t v39 = objc_msgSend_strokeProviderVersion(v28, v29, v30, v31, v32, v33);
    if (*(unsigned char *)(a1 + 48)) {
      uint64_t v40 = "Y";
    }
    else {
      uint64_t v40 = "N";
    }
    int v41 = objc_msgSend_cancelled(*(void **)(a1 + 32), v34, v35, v36, v37, v38);
    uint64_t v47 = objc_msgSend_completeness(v19, v42, v43, v44, v45, v46);
    if (v19) {
      uint64_t v48 = "Y";
    }
    else {
      uint64_t v48 = "N";
    }
    *(_DWORD *)long long buf = 134219266;
    if (v41) {
      uint64_t v49 = "Y";
    }
    else {
      uint64_t v49 = "N";
    }
    uint64_t v110 = v27;
    __int16 v111 = 2112;
    uint64_t v112 = v39;
    __int16 v113 = 2080;
    uint64_t v114 = v40;
    __int16 v115 = 2080;
    int64_t v116 = v49;
    __int16 v117 = 2080;
    uint64_t v118 = (uint64_t)v48;
    __int16 v119 = 2048;
    uint64_t v120 = v47;
    _os_log_impl(&dword_1C492D000, v89, OS_LOG_TYPE_DEFAULT, "RecognitionSession %p finished principal lines task for version: %@. Foreground: %s. Cancelled: %s. Produced result: %s. Completeness level: %ld.", buf, 0x3Eu);
  }
  else
  {
    if (qword_1EA3CA000 == -1)
    {
      uint64_t v89 = (id)qword_1EA3C9FA0;
      if (!os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_42;
      }
    }
    else
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      uint64_t v89 = (id)qword_1EA3C9FA0;
      if (!os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_42;
      }
    }
    uint64_t v50 = *(void *)(a1 + 40);
    long long v102 = objc_msgSend_strokeProvider(*(void **)(a1 + 32), v97, v98, v99, v100, v101);
    long long v103 = objc_msgSend_strokeProviderVersion(v102, v51, v52, v53, v54, v55);
    if (*(unsigned char *)(a1 + 48)) {
      uint64_t v61 = "Y";
    }
    else {
      uint64_t v61 = "N";
    }
    objc_msgSend_generationDuration(v19, v56, v57, v58, v59, v60);
    uint64_t v67 = objc_msgSend_strokeGroupingResult(v19, v62, v63, v64, v65, v66);
    uint64_t v73 = objc_msgSend_strokeGroups(v67, v68, v69, v70, v71, v72);
    uint64_t v79 = objc_msgSend_count(v73, v74, v75, v76, v77, v78);
    uint64_t v85 = objc_msgSend_completeness(v19, v80, v81, v82, v83, v84);
    *(_DWORD *)long long buf = 134219266;
    uint64_t v110 = v50;
    __int16 v111 = 2112;
    uint64_t v112 = v103;
    __int16 v113 = 2080;
    uint64_t v114 = v61;
    __int16 v115 = 2048;
    int64_t v116 = v108;
    __int16 v117 = 2048;
    uint64_t v118 = v79;
    __int16 v119 = 2048;
    uint64_t v120 = v85;
    _os_log_impl(&dword_1C492D000, v89, OS_LOG_TYPE_DEFAULT, "RecognitionSession %p finished principal lines task for version: %@. Foreground: %s. Duration: %0.3fs. Groups: %ld. Completeness level: %ld.", buf, 0x3Eu);
  }
LABEL_42:

  v104[0] = MEMORY[0x1E4F143A8];
  v104[1] = 3221225472;
  uint64_t v104[2] = sub_1C4B99D50;
  v104[3] = &unk_1E64E1208;
  uint64_t v86 = *(void *)(a1 + 40);
  id v105 = *(id *)(a1 + 32);
  id v87 = v19;
  uint64_t v88 = *(void *)(a1 + 40);
  id v106 = v87;
  uint64_t v107 = v88;
  sub_1C4B95C8C(v86, v104);
}

void sub_1C4B99CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1C4B99D50(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((objc_msgSend_cancelled(*(void **)(a1 + 32), a2, a3, a4, a5, a6) & 1) == 0)
  {
    uint64_t v11 = *(void *)(a1 + 40);
    if (v11) {
      objc_msgSend__setLastRecognitionResult_(*(void **)(a1 + 48), v7, v11, v8, v9, v10);
    }
  }
  objc_msgSend_setDelegate_(*(void **)(a1 + 32), v7, 0, v8, v9, v10);
  uint64_t v12 = *(void *)(a1 + 48);
  char v13 = *(void **)(a1 + 32);
  sub_1C4B96484(v12, v13);
}

void sub_1C4B99DB0(uint64_t a1)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    label = dispatch_queue_get_label(0);
    uint64_t v107 = (void *)a1;
    if (strcmp(label, "com.apple.CoreHandwriting.RecognitionSession"))
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      os_signpost_id_t v3 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "-[CHRecognitionSession q_processPendingStrokeChangesIfAvailable]";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "com.apple.CoreHandwriting.RecognitionSession";
        *(_WORD *)&buf[22] = 2080;
        uint64_t v123 = dispatch_queue_get_label(0);
        _os_log_impl(&dword_1C492D000, v3, OS_LOG_TYPE_FAULT, "Method %s should be running on queue %s, found %s.", buf, 0x20u);
      }
    }
    if (*(unsigned char *)(a1 + 144))
    {
      *(unsigned char *)(a1 + 144) = 0;
      id v106 = *(id *)(a1 + 24);
      long long v113 = 0u;
      long long v114 = 0u;
      long long v115 = 0u;
      long long v116 = 0u;
      id v4 = *(id *)(a1 + 320);
      uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v113, (uint64_t)v117, 16, v6);
      if (v12)
      {
        uint64_t v13 = *(void *)v114;
        uint64_t v104 = 134218498;
        do
        {
          for (uint64_t i = 0; i != v12; ++i)
          {
            if (*(void *)v114 != v13) {
              objc_enumerationMutation(v4);
            }
            uint64_t v15 = *(void **)(*((void *)&v113 + 1) + 8 * i);
            if (!objc_msgSend_status(v15, v7, v8, v9, v10, v11, v104))
            {
              if (qword_1EA3CA000 != -1) {
                dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
              }
              uint64_t v16 = (id)qword_1EA3C9FA0;
              if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v22 = objc_msgSend_strokeProvider(v15, v17, v18, v19, v20, v21);
                long long v28 = objc_msgSend_strokeProviderVersion(v22, v23, v24, v25, v26, v27);
                objc_msgSend_strokeProviderVersion(v106, v29, v30, v31, v32, v33);
                __int16 v34 = (char *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)long long buf = v104;
                *(void *)&uint8_t buf[4] = v107;
                *(_WORD *)&buf[12] = 2112;
                *(void *)&buf[14] = v28;
                *(_WORD *)&buf[22] = 2112;
                uint64_t v123 = v34;
                _os_log_impl(&dword_1C492D000, v16, OS_LOG_TYPE_DEBUG, "RecognitionSession %p canceling pending task for version %@, superseded by request for version %@.", buf, 0x20u);
              }
              objc_msgSend_cancel(v15, v35, v36, v37, v38, v39);
            }
          }
          uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v113, (uint64_t)v117, 16, v11);
        }
        while (v12);
      }

      v112[0] = MEMORY[0x1E4F143A8];
      v112[1] = 3221225472;
      v112[2] = sub_1C4B9A5AC;
      v112[3] = &unk_1E64E4988;
      v112[4] = v107;
      id v105 = (void *)MEMORY[0x1C8786E90](v112);
      int v45 = objc_msgSend_q_needsForegroundRecognition(v107, v40, v41, v42, v43, v44);
      char v51 = objc_msgSend_q_wantsAutoRefine(v107, v46, v47, v48, v49, v50);
      uint64_t v52 = (void *)v107[3];
      unsigned int v58 = objc_msgSend_strokeGroupingOnly(v107, v53, v54, v55, v56, v57);
      uint64_t v59 = sub_1C4B9A6BC((uint64_t)v107, v52, 0, 0, v58, 0, v105, v51);
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v60 = (id)qword_1EA3C9FA0;
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
      {
        objc_msgSend_strokeProviderVersion(v106, v61, v62, v63, v64, v65);
        uint64_t v66 = (char *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)long long buf = 134218498;
        *(void *)&uint8_t buf[4] = v107;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v59;
        *(_WORD *)&buf[22] = 2112;
        uint64_t v123 = v66;
        _os_log_impl(&dword_1C492D000, v60, OS_LOG_TYPE_DEBUG, "RecognitionSession %p preparing recognition task %p for version %@.", buf, 0x20u);
      }
      uint64_t v67 = 36;
      if (v45) {
        uint64_t v67 = 35;
      }
      uint64_t v68 = (void *)v107[v67];
      if (v45) {
        uint64_t v69 = @"ForegroundQueue";
      }
      else {
        uint64_t v69 = @"BackgroundQueue";
      }
      id v70 = v68;
      uint64_t v71 = v69;
      id v72 = v70;
      objc_sync_enter(v72);
      if (v45)
      {
        sub_1C4B95E74((uint64_t)v107, 1, 0);
        uint64_t v73 = (uint64_t)v107;
      }
      else
      {
        id v74 = v59;
        id v75 = (id)qword_1EA3C94B8;
        objc_sync_enter(v75);
        uint64_t v76 = (void *)qword_1EA3C94B8;
        if (qword_1EA3C94B8)
        {
          *(void *)long long buf = MEMORY[0x1E4F143A8];
          *(void *)&uint8_t buf[8] = 3221225472;
          *(void *)&uint8_t buf[16] = sub_1C4B96670;
          uint64_t v123 = (const char *)&unk_1E64E4850;
          id v77 = v74;
          id v124 = v77;
          uint64_t v82 = objc_msgSend_indexesOfObjectsPassingTest_(v76, v78, (uint64_t)buf, v79, v80, v81);
          if (qword_1EA3CA000 != -1) {
            dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
          }
          uint64_t v83 = (id)qword_1EA3C9FA0;
          if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v89 = objc_msgSend_count(v82, v84, v85, v86, v87, v88);
            *(_DWORD *)uint64_t v118 = 134218240;
            uint64_t v119 = v89;
            __int16 v120 = 2048;
            id v121 = v77;
            _os_log_impl(&dword_1C492D000, v83, OS_LOG_TYPE_DEFAULT, "Canceling %ld tasks from the background shared queue given new task %p", v118, 0x16u);
          }

          objc_msgSend_removeObjectsAtIndexes_((void *)qword_1EA3C94B8, v90, (uint64_t)v82, v91, v92, v93);
        }
        objc_sync_exit(v75);

        uint64_t v73 = (uint64_t)v107;
      }
      sub_1C4B96240((void **)v73, v59, v45 ^ 1);
      if (objc_msgSend_indexOfObjectPassingTest_(*(void **)(v73 + 320), v94, (uint64_t)&unk_1F2013BA8, v95, v96, v97) == 0x7FFFFFFFFFFFFFFFLL)
      {
        if (*(unsigned char *)(v73 + 144))
        {
          objc_msgSend__setStatus_((void *)v73, v98, 2, v99, v100, v101);
        }
        else if (*(void *)(v73 + 8))
        {
          objc_msgSend__setStatus_((void *)v73, v98, 4, v99, v100, v101);
        }
        else
        {
          objc_msgSend__setStatus_((void *)v73, v98, 1, v99, v100, v101);
        }
      }
      else
      {
        objc_msgSend__setStatus_((void *)v73, v98, 3, v99, v100, v101);
      }
      v108[0] = MEMORY[0x1E4F143A8];
      v108[1] = 3221225472;
      v108[2] = sub_1C4B9AAA0;
      _OWORD v108[3] = &unk_1E64E49B0;
      v108[4] = v73;
      id v102 = v106;
      id v109 = v102;
      char v111 = v45;
      id v103 = v59;
      id v110 = v103;
      sub_1C4B96814(v73, v72, v71, @"FullSessionTask", v108);

      objc_sync_exit(v72);
    }
  }
}

void sub_1C4B9A498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  objc_sync_exit(v17);
  objc_sync_exit(v15);

  _Unwind_Resume(a1);
}

void sub_1C4B9A578(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    if (*(void *)(v2 + 256) != *(void *)(a1 + 40)) {
      return;
    }
    goto LABEL_3;
  }
  if (!*(void *)(a1 + 40)) {
LABEL_3:
  }
    sub_1C4B99DB0(v2);
}

void sub_1C4B9A5AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  unint64_t v6[2] = sub_1C4B9A65C;
  v6[3] = &unk_1E64E11E0;
  v6[4] = v4;
  id v7 = v3;
  id v5 = v3;
  sub_1C4B95C8C(v4, v6);
}

void sub_1C4B9A644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9A65C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void **)(a1 + 40);
  id v3 = v1;
  if (v2)
  {
    id v5 = *(id *)(v2 + 80);
    uint64_t v4 = (id *)(v2 + 80);
    if (v5 != v3)
    {
      id v6 = v3;
      objc_storeStrong(v4, v1);
      id v3 = v6;
    }
  }
}

void *sub_1C4B9A6BC(uint64_t a1, void *a2, uint64_t a3, char a4, unsigned int a5, void *a6, void *a7, char a8)
{
  id v15 = a2;
  id v16 = a6;
  id v115 = a7;
  id v116 = *(id *)(a1 + 40);
  uint64_t v22 = *(void **)(a1 + 8);
  unsigned int v114 = a5;
  char v111 = a4;
  uint64_t v110 = a3;
  char v109 = a8;
  if (v16)
  {
    if (v22)
    {
      uint64_t v23 = objc_msgSend_strokeClassificationResult(v22, v17, v18, v19, v20, v21);

      if (v23)
      {
        uint64_t v24 = objc_msgSend_strokeClassificationResult(*(void **)(a1 + 8), v17, v18, v19, v20, v21);
        long long v29 = objc_msgSend_setWithArray_(MEMORY[0x1E4F1CAD0], v25, (uint64_t)v16, v26, v27, v28);
        __int16 v117 = objc_msgSend_subResultForStrokeIdentifiers_(v24, v30, (uint64_t)v29, v31, v32, v33);

        id v118 = 0;
        goto LABEL_8;
      }
    }
    id v118 = 0;
  }
  else
  {
    id v118 = v22;
  }
  __int16 v117 = 0;
LABEL_8:
  uint64_t v34 = objc_msgSend_mode((void *)a1, v17, v18, v19, v20, v21);
  if (v34 == 2)
  {
LABEL_11:
    uint64_t v39 = [CHRecognitionSessionTask alloc];
    uint64_t v45 = objc_msgSend_mode((void *)a1, v40, v41, v42, v43, v44);
    uint64_t v46 = *(void *)(a1 + 200);
    uint64_t v47 = *(void *)(a1 + 168);
    int v48 = *(_DWORD *)(a1 + 152);
    uint64_t v54 = objc_msgSend_recognitionEnvironment((void *)a1, v49, v50, v51, v52, v53);
    uint64_t v55 = *(void *)(a1 + 336);
    uint64_t v108 = (uint64_t)v15;
    uint64_t v56 = *(void *)(a1 + 120);
    id v57 = *(id *)(a1 + 328);
    id v58 = v16;
    id v59 = v57;
    uint64_t v107 = v56;
    id v15 = (id)v108;
    uint64_t v112 = v58;
    isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_subjectStrokeClassificationResult_recognitionOptions_partialResultBlock_wantsAutoRefine = objc_msgSend_initWithSessionMode_locales_preferredLocales_strokeProvider_calculateDocumentProvider_inputResult_recognitionQOSClass_recognitionEnvironment_isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_subjectStrokeClassificationResult_recognitionOptions_partialResultBlock_wantsAutoRefine_(v39, v60, v45, v46, v47, v108, v116, v118, v48, v54, v111, v57, v55, 0, v110, v58, v117, v107, v115, v109);

    id v16 = v112;
    objc_msgSend_setDisableMathTextSwapping_(isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_subjectStrokeClassificationResult_recognitionOptions_partialResultBlock_wantsAutoRefine, v62, *(unsigned __int8 *)(a1 + 128), v63, v64, v65);
    objc_msgSend_setLeverageAllProvidedVariables_(isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_subjectStrokeClassificationResult_recognitionOptions_partialResultBlock_wantsAutoRefine, v66, *(unsigned __int8 *)(a1 + 129), v67, v68, v69);
    goto LABEL_16;
  }
  if (v34 != 1)
  {
    if (v34)
    {
      isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_subjectStrokeClassificationResult_recognitionOptions_partialResultBlock_wantsAutoRefine = 0;
      goto LABEL_16;
    }
    goto LABEL_11;
  }
  id v113 = v16;
  id v70 = *(void **)(a1 + 216);
  if (!v70) {
    id v70 = (void *)MEMORY[0x1E4F1CBF0];
  }
  id v71 = v70;
  id v72 = [CHRecognitionSessionTextInputTask alloc];
  uint64_t v73 = *(void *)(a1 + 200);
  uint64_t v79 = objc_msgSend_recognitionEnvironment((void *)a1, v74, v75, v76, v77, v78);
  isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_subjectStrokeClassificationResult_recognitionOptions_partialResultBlock_wantsAutoRefine = objc_msgSend_initWithLocales_strokeProvider_initialTextInputTargets_inputResult_recognitionEnvironment_calculateDocumentProvider_(v72, v80, v73, (uint64_t)v15, (uint64_t)v71, (uint64_t)v118, v79, v116);
  uint64_t v86 = objc_msgSend_activeTextInputQuery((void *)a1, v81, v82, v83, v84, v85);
  objc_msgSend_setActiveTextInputQuery_(isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_subjectStrokeClassificationResult_recognitionOptions_partialResultBlock_wantsAutoRefine, v87, (uint64_t)v86, v88, v89, v90);

  id v16 = v113;
LABEL_16:
  objc_msgSend_setDelegate_(isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_subjectStrokeClassificationResult_recognitionOptions_partialResultBlock_wantsAutoRefine, v35, a1, v36, v37, v38);
  objc_msgSend_setStrokeGroupingOnly_(isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_subjectStrokeClassificationResult_recognitionOptions_partialResultBlock_wantsAutoRefine, v91, v114, v92, v93, v94);
  id v95 = *(id *)(a1 + 272);
  BOOL v101 = objc_msgSend_count(v95, v96, v97, v98, v99, v100) != 0;
  objc_msgSend_setSaveInputDrawings_(isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_subjectStrokeClassificationResult_recognitionOptions_partialResultBlock_wantsAutoRefine, v102, v101, v103, v104, v105);

  return isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_subjectStrokeClassificationResult_recognitionOptions_partialResultBlock_wantsAutoRefine;
}

void sub_1C4B9A9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9AAA0(uint64_t a1)
{
  uint64_t v245 = *MEMORY[0x1E4F143B8];
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v2 = (id)qword_1EA3C9FA0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = objc_msgSend_strokeProviderVersion(*(void **)(a1 + 40), v3, v4, v5, v6, v7);
    uint64_t v10 = (void *)v9;
    int v11 = *(unsigned __int8 *)(a1 + 56);
    *(_DWORD *)long long buf = 134218498;
    if (v11) {
      uint64_t v12 = "Y";
    }
    else {
      uint64_t v12 = "N";
    }
    uint64_t v226 = v8;
    __int16 v227 = 2112;
    uint64_t v228 = v9;
    __int16 v229 = 2080;
    uint64_t v230 = v12;
    _os_log_impl(&dword_1C492D000, v2, OS_LOG_TYPE_DEFAULT, "RecognitionSession %p starting task for version: %@. Foreground: %s.", buf, 0x20u);
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v13 = (id)qword_1EA3C9FC8;
  os_signpost_id_t v14 = os_signpost_id_generate(v13);

  if (qword_1EA3CA000 == -1)
  {
    id v15 = (id)qword_1EA3C9FC8;
    unint64_t v16 = v14 - 1;
    if (v14 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_14;
    }
  }
  else
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    id v15 = (id)qword_1EA3C9FC8;
    unint64_t v16 = v14 - 1;
    if (v14 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_14;
    }
  }
  if (os_signpost_enabled(v15))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v15, OS_SIGNPOST_INTERVAL_BEGIN, v14, "CHRecognitionSessionFullTask", "", buf, 2u);
  }
LABEL_14:

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v17 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C492D000, v17, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHRecognitionSessionFullTask\"", buf, 2u);
  }

  objc_msgSend_main(*(void **)(a1 + 48), v18, v19, v20, v21, v22);
  if (qword_1EA3CA000 == -1)
  {
    uint64_t v23 = (id)qword_1EA3C9FC8;
    if (v16 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_22;
    }
  }
  else
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v23 = (id)qword_1EA3C9FC8;
    if (v16 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_22;
    }
  }
  if (os_signpost_enabled(v23))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v23, OS_SIGNPOST_INTERVAL_END, v14, "CHRecognitionSessionFullTask", "", buf, 2u);
  }
LABEL_22:

  if (qword_1EA3CA000 != -1)
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v24 = (id)qword_1EA3C9F90[0];
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v24 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
LABEL_24:
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C492D000, v24, OS_LOG_TYPE_DEFAULT, "END \"CHRecognitionSessionFullTask\"", buf, 2u);
  }
LABEL_25:

  uint64_t v30 = objc_msgSend_outputResult(*(void **)(a1 + 48), v25, v26, v27, v28, v29);
  if ((objc_msgSend_cancelled(*(void **)(a1 + 48), v31, v32, v33, v34, v35) & 1) != 0 || !v30)
  {
    if (qword_1EA3CA000 == -1)
    {
      uint64_t v36 = (id)qword_1EA3C9FA0;
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_44;
      }
    }
    else
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      uint64_t v36 = (id)qword_1EA3C9FA0;
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_44;
      }
    }
    uint64_t v126 = *(void *)(a1 + 32);
    uint64_t v127 = objc_msgSend_strokeProviderVersion(*(void **)(a1 + 40), v121, v122, v123, v124, v125);
    int v128 = *(unsigned __int8 *)(a1 + 56);
    int v134 = objc_msgSend_cancelled(*(void **)(a1 + 48), v129, v130, v131, v132, v133);
    uint64_t v135 = "Y";
    *(_DWORD *)long long buf = 134219010;
    uint64_t v226 = v126;
    if (v128) {
      uint64_t v136 = "Y";
    }
    else {
      uint64_t v136 = "N";
    }
    __int16 v227 = 2112;
    uint64_t v228 = (uint64_t)v127;
    if (v134) {
      uint64_t v137 = "Y";
    }
    else {
      uint64_t v137 = "N";
    }
    __int16 v229 = 2080;
    if (!v30) {
      uint64_t v135 = "N";
    }
    uint64_t v230 = v136;
    __int16 v231 = 2080;
    uint64_t v232 = v137;
    __int16 v233 = 2080;
    uint64_t v234 = v135;
    _os_log_impl(&dword_1C492D000, v36, OS_LOG_TYPE_DEFAULT, "RecognitionSession %p finished task for version: %@. Foreground: %s. Cancelled: %s. Produced result: %s.", buf, 0x34u);
  }
  else
  {
    if (qword_1EA3CA000 == -1)
    {
      uint64_t v36 = (id)qword_1EA3C9FA0;
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_44;
      }
    }
    else
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      uint64_t v36 = (id)qword_1EA3C9FA0;
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_44;
      }
    }
    uint64_t v213 = *(void *)(a1 + 32);
    uint64_t v215 = objc_msgSend_strokeProviderVersion(*(void **)(a1 + 40), v37, v38, v39, v40, v41);
    if (*(unsigned char *)(a1 + 56)) {
      uint64_t v47 = "Y";
    }
    else {
      uint64_t v47 = "N";
    }
    uint64_t v212 = v47;
    objc_msgSend_generationDuration(v30, v42, v43, v44, v45, v46);
    objc_msgSend_generationDuration(v30, v48, v49, v50, v51, v52);
    objc_msgSend_generationDuration(v30, v53, v54, v55, v56, v57);
    uint64_t v210 = objc_msgSend_strokeGroupingResult(v30, v58, v59, v60, v61, v62);
    CGFloat v211 = objc_msgSend_strokeGroups(v210, v63, v64, v65, v66, v67);
    uint64_t v73 = objc_msgSend_count(v211, v68, v69, v70, v71, v72);
    unint64_t v209 = objc_msgSend_strokeGroupingResult(v30, v74, v75, v76, v77, v78);
    uint64_t v84 = objc_msgSend_createdStrokeGroups(v209, v79, v80, v81, v82, v83);
    uint64_t v90 = objc_msgSend_count(v84, v85, v86, v87, v88, v89);
    uint64_t v96 = objc_msgSend_strokeGroupingResult(v30, v91, v92, v93, v94, v95);
    id v102 = objc_msgSend_deletedStrokeGroups(v96, v97, v98, v99, v100, v101);
    uint64_t v108 = objc_msgSend_count(v102, v103, v104, v105, v106, v107);
    unsigned int v114 = objc_msgSend_orderedStrokeIdentifiers(v30, v109, v110, v111, v112, v113);
    uint64_t v120 = objc_msgSend_count(v114, v115, v116, v117, v118, v119);
    *(_DWORD *)long long buf = 134220290;
    uint64_t v226 = v213;
    __int16 v227 = 2112;
    uint64_t v228 = (uint64_t)v215;
    __int16 v229 = 2080;
    uint64_t v230 = v212;
    __int16 v231 = 2048;
    uint64_t v232 = v224;
    __int16 v233 = 2048;
    uint64_t v234 = v223;
    __int16 v235 = 2048;
    uint64_t v236 = v222;
    __int16 v237 = 2048;
    uint64_t v238 = v73;
    __int16 v239 = 2048;
    uint64_t v240 = v90;
    __int16 v241 = 2048;
    uint64_t v242 = v108;
    __int16 v243 = 2048;
    uint64_t v244 = v120;
    _os_log_impl(&dword_1C492D000, v36, OS_LOG_TYPE_DEFAULT, "RecognitionSession %p finished task for version: %@. Foreground: %s. Duration: %0.3fs (%0.3fs G, %0.3fs R). Groups: %ld, created: %ld, deleted: %ld. Total strokes = %ld.", buf, 0x66u);
  }
LABEL_44:

  uint64_t v138 = *(void *)(a1 + 32);
  v219[0] = MEMORY[0x1E4F143A8];
  v219[1] = 3221225472;
  v219[2] = sub_1C4B9B48C;
  v219[3] = &unk_1E64E11E0;
  id v139 = *(id *)(a1 + 48);
  uint64_t v140 = *(void *)(a1 + 32);
  id v220 = v139;
  uint64_t v221 = v140;
  sub_1C4B95C8C(v138, v219);
  if ((objc_msgSend_cancelled(*(void **)(a1 + 48), v141, v142, v143, v144, v145) & 1) == 0
    && v30
    && (objc_msgSend_skipPrincipalLines(*(void **)(a1 + 32), v146, v147, v148, v149, v150) & 1) == 0
    && (objc_msgSend_strokeGroupingOnly(*(void **)(a1 + 32), v151, v152, v153, v154, v155) & 1) == 0
    && !objc_msgSend_mode(*(void **)(a1 + 32), v156, v157, v158, v159, v160))
  {
    uint64_t v161 = [CHRecognitionSessionTask alloc];
    uint64_t v167 = objc_msgSend_mode(*(void **)(a1 + 32), v162, v163, v164, v165, v166);
    uint64_t v168 = *(void *)(a1 + 32);
    uint64_t v169 = *(void *)(a1 + 40);
    uint64_t v170 = *(void *)(v168 + 200);
    uint64_t v171 = *(void *)(v168 + 168);
    uint64_t v172 = *(void *)(v168 + 40);
    int v173 = *(_DWORD *)(v168 + 152);
    uint64_t v179 = objc_msgSend_recognitionEnvironment((void *)v168, v174, v175, v176, v177, v178);
    uint64_t v180 = *(void **)(a1 + 32);
    int v216 = v173;
    uint64_t v214 = v179;
    if (v180) {
      uint64_t v180 = (void *)v180[41];
    }
    uint64_t v181 = v180;
    uint64_t v183 = v181;
    uint64_t v184 = *(void *)(a1 + 32);
    if (v184) {
      uint64_t v185 = *(void *)(v184 + 336);
    }
    else {
      uint64_t v185 = 0;
    }
    isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_subjectStrokeClassificationResult_recognitionOptions_partialResultBlock_wantsAutoRefine = objc_msgSend_initWithSessionMode_locales_preferredLocales_strokeProvider_calculateDocumentProvider_inputResult_recognitionQOSClass_recognitionEnvironment_isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_subjectStrokeClassificationResult_recognitionOptions_partialResultBlock_wantsAutoRefine_(v161, v182, v167, v170, v171, v169, v172, v30, v216, v214, 0, v181, v185, 0, 3, 0, 0, *(void *)(v184 + 120), 0, 0);

    objc_msgSend_setDisableMathTextSwapping_(isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_subjectStrokeClassificationResult_recognitionOptions_partialResultBlock_wantsAutoRefine, v187, *(unsigned __int8 *)(*(void *)(a1 + 32) + 128), v188, v189, v190);
    objc_msgSend_setLeverageAllProvidedVariables_(isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_subjectStrokeClassificationResult_recognitionOptions_partialResultBlock_wantsAutoRefine, v191, *(unsigned __int8 *)(*(void *)(a1 + 32) + 129), v192, v193, v194);
    objc_msgSend_setDelegate_(isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_subjectStrokeClassificationResult_recognitionOptions_partialResultBlock_wantsAutoRefine, v195, *(void *)(a1 + 32), v196, v197, v198);
    objc_msgSend_setStrokeGroupingOnly_(isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_subjectStrokeClassificationResult_recognitionOptions_partialResultBlock_wantsAutoRefine, v199, 0, v200, v201, v202);
    objc_msgSend_setSaveInputDrawings_(isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_subjectStrokeClassificationResult_recognitionOptions_partialResultBlock_wantsAutoRefine, v203, 0, v204, v205, v206);
    uint64_t v207 = *(void *)(a1 + 32);
    v217[0] = MEMORY[0x1E4F143A8];
    v217[1] = 3221225472;
    v217[2] = sub_1C4B9B5A0;
    v217[3] = &unk_1E64E11E0;
    v217[4] = v207;
    id v208 = isHighResponsivenessTask_strokeClassificationModel_strokeGroupingModel_strokeGroupingRequirement_principalLineRequirement_subjectStrokeIdentifiers_subjectStrokeClassificationResult_recognitionOptions_partialResultBlock_wantsAutoRefine;
    id v218 = v208;
    sub_1C4B95C8C(v207, v217);
  }
}

void sub_1C4B9B37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9B48C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((objc_msgSend_cancelled(*(void **)(a1 + 32), a2, a3, a4, a5, a6) & 1) == 0)
  {
    uint64_t v12 = objc_msgSend_outputResult(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
    objc_msgSend__setLastRecognitionResult_(*(void **)(a1 + 40), v13, (uint64_t)v12, v14, v15, v16);
  }
  objc_msgSend_setDelegate_(*(void **)(a1 + 32), v7, 0, v9, v10, v11);
  sub_1C4B96484(*(void *)(a1 + 40), *(void **)(a1 + 32));
  uint64_t v21 = *(void *)(a1 + 40);
  if (v21)
  {
    if (objc_msgSend_indexOfObjectPassingTest_(*(void **)(v21 + 320), v17, (uint64_t)&unk_1F2013BA8, v18, v19, v20) == 0x7FFFFFFFFFFFFFFFLL)
    {
      if (*(unsigned char *)(v21 + 144))
      {
        uint64_t v26 = 2;
        uint64_t v27 = (void *)v21;
      }
      else
      {
        if (*(void *)(v21 + 8)) {
          uint64_t v26 = 4;
        }
        else {
          uint64_t v26 = 1;
        }
        uint64_t v27 = (void *)v21;
      }
    }
    else
    {
      uint64_t v26 = 3;
      uint64_t v27 = (void *)v21;
    }
    objc_msgSend__setStatus_(v27, v22, v26, v23, v24, v25);
  }
}

void sub_1C4B9B590(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9B5A0(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(char **)(a1 + 32);
  id v2 = *(id *)(a1 + 40);
  if (v1)
  {
    label = dispatch_queue_get_label(0);
    if (strcmp(label, "com.apple.CoreHandwriting.RecognitionSession"))
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v9 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t v15 = 136315650;
        *(void *)&double v15[4] = "-[CHRecognitionSession q_runPrincipalLineTask:]";
        *(_WORD *)&v15[12] = 2080;
        *(void *)&v15[14] = "com.apple.CoreHandwriting.RecognitionSession";
        *(_WORD *)&v15[22] = 2080;
        uint64_t v16 = dispatch_queue_get_label(0);
        _os_log_impl(&dword_1C492D000, v9, OS_LOG_TYPE_FAULT, "Method %s should be running on queue %s, found %s.", v15, 0x20u);
      }
    }
    int v10 = objc_msgSend_q_needsForegroundRecognition(v1, v4, v5, v6, v7, v8);
    sub_1C4B96240((void **)v1, v2, v10 ^ 1);
    uint64_t v11 = 288;
    if (v10) {
      uint64_t v11 = 280;
    }
    uint64_t v12 = *(void **)&v1[v11];
    if (v10) {
      uint64_t v13 = @"ForegroundQueue";
    }
    else {
      uint64_t v13 = @"BackgroundQueue";
    }
    *(void *)uint64_t v15 = MEMORY[0x1E4F143A8];
    *(void *)&v15[8] = 3221225472;
    *(void *)&v15[16] = sub_1C4B996C8;
    uint64_t v16 = (const char *)&unk_1E64E4960;
    id v17 = v2;
    uint64_t v18 = v1;
    char v19 = v10;
    id v14 = v12;
    sub_1C4B96814((uint64_t)v1, v14, v13, @"PrincipalLinesTask", v15);
  }
}

void sub_1C4B9B794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

id sub_1C4B9B7C0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_localeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  return v6;
}

void sub_1C4B9B8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9B8F8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_data(MEMORY[0x1E4F1C9B8], a2, a3, a4, a5, a6);
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  int v10 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1C492D000, v10, OS_LOG_TYPE_FAULT, "Unimplemented", v11, 2u);
  }
}

void sub_1C4B9B9D8()
{
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v0 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl(&dword_1C492D000, v0, OS_LOG_TYPE_FAULT, "Unimplemented", v1, 2u);
  }
}

void sub_1C4B9BC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9BCA8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void **)(a1 + 32);
  objc_msgSend_encodedStrokeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v7, (uint64_t)v11, v8, v9, v10);
}

void sub_1C4B9BD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9BFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9C070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4B9C080(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_localeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  return v6;
}

void sub_1C4B9C4E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4B9C5A0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_localeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  return v6;
}

void sub_1C4B9C924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9C944(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    id v3 = *(void **)(v2 + 248);
  }
  else {
    id v3 = 0;
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v3);
  uint64_t v4 = *(void *)(a1 + 40);
  if (*(void *)(*(void *)(v4 + 8) + 40))
  {
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    uint64_t v4 = *(void *)(a1 + 40);
    if (isKindOfClass)
    {
      uint64_t v6 = *(void *)(v4 + 8);
      uint64_t v7 = *(void **)(v6 + 40);
      *(void *)(v6 + 40) = 0;

      uint64_t v4 = *(void *)(a1 + 40);
    }
  }
  if (!*(void *)(*(void *)(v4 + 8) + 40))
  {
    uint64_t v8 = objc_alloc_init(CHLineWrapper);
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    id v11 = (id)qword_1EA3C9FE8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      int v14 = 134217984;
      uint64_t v15 = v12;
      _os_log_impl(&dword_1C492D000, v11, OS_LOG_TYPE_DEFAULT, "RecognitionSession %p instantiated a local line wrapper.", (uint8_t *)&v14, 0xCu);
    }

    uint64_t v13 = *(void *)(a1 + 32);
    if (v13) {
      objc_storeStrong((id *)(v13 + 248), *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
    }
  }
}

void sub_1C4B9CB88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9CF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9D184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9D194(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9D49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,void *a25,void *a26)
{
  _Block_object_dispose((const void *)(v27 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1C4B9D530(uint64_t a1)
{
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v2 = (id)qword_1EA3C9FC8;
  os_signpost_id_t v3 = os_signpost_id_generate(v2);

  if (qword_1EA3CA000 == -1)
  {
    uint64_t v4 = (id)qword_1EA3C9FC8;
    unint64_t v5 = v3 - 1;
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_7;
    }
  }
  else
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v4 = (id)qword_1EA3C9FC8;
    unint64_t v5 = v3 - 1;
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_7;
    }
  }
  if (os_signpost_enabled(v4))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "CHRecognitionSessionTaskInsights", "", buf, 2u);
  }
LABEL_7:

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v6 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v41 = 0;
    _os_log_impl(&dword_1C492D000, v6, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHRecognitionSessionTaskInsights\"", v41, 2u);
  }

  objc_msgSend_main(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
  if (qword_1EA3CA000 == -1)
  {
    uint64_t v12 = (id)qword_1EA3C9FC8;
    if (v5 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_15;
    }
  }
  else
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v12 = (id)qword_1EA3C9FC8;
    if (v5 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_15;
    }
  }
  if (os_signpost_enabled(v12))
  {
    *(_WORD *)uint64_t v40 = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v12, OS_SIGNPOST_INTERVAL_END, v3, "CHRecognitionSessionTaskInsights", "", v40, 2u);
  }
LABEL_15:

  if (qword_1EA3CA000 != -1)
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v13 = (id)qword_1EA3C9F90[0];
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  uint64_t v13 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
LABEL_17:
    *(_WORD *)uint64_t v39 = 0;
    _os_log_impl(&dword_1C492D000, v13, OS_LOG_TYPE_DEFAULT, "END \"CHRecognitionSessionTaskInsights\"", v39, 2u);
  }
LABEL_18:

  char v19 = objc_msgSend_outputResult(*(void **)(a1 + 32), v14, v15, v16, v17, v18);
  uint64_t v25 = objc_msgSend_integerValue(*(void **)(a1 + 40), v20, v21, v22, v23, v24);
  uint64_t v30 = objc_msgSend_recognitionResultForStrokeGroupIdentifier_(v19, v26, v25, v27, v28, v29);
  uint64_t v36 = objc_msgSend_inputDrawing(v30, v31, v32, v33, v34, v35);
  uint64_t v37 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v38 = *(void **)(v37 + 40);
  *(void *)(v37 + 40) = v36;
}

void sub_1C4B9D820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9D834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9DA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B9DA8C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(*(void *)(a1 + 32) + 264), a2, *(void *)(a1 + 40), a4, a5, a6);
}

void sub_1C4B9DCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B9DD3C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_removeObject_(*(void **)(*(void *)(a1 + 32) + 264), a2, *(void *)(a1 + 40), a4, a5, a6);
}

void sub_1C4B9DE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9DE50(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    os_signpost_id_t v3 = *(void **)(v2 + 240);
  }
  else {
    os_signpost_id_t v3 = 0;
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v3);
  int shouldRunRecognitionLocallyWithEnvironment = objc_msgSend_shouldRunRecognitionLocallyWithEnvironment_(CHRecognitionSession, v4, *(void *)(*(void *)(a1 + 32) + 184), v5, v6, v7);
  uint64_t v9 = *(void *)(a1 + 40);
  if (*(void *)(*(void *)(v9 + 8) + 40))
  {
    objc_opt_class();
    int isKindOfClass = objc_opt_isKindOfClass();
    uint64_t v9 = *(void *)(a1 + 40);
    if (((shouldRunRecognitionLocallyWithEnvironment ^ isKindOfClass) & 1) == 0)
    {
      uint64_t v11 = *(void *)(v9 + 8);
      uint64_t v12 = *(void **)(v11 + 40);
      *(void *)(v11 + 40) = 0;

      uint64_t v9 = *(void *)(a1 + 40);
    }
  }
  if (!*(void *)(*(void *)(v9 + 8) + 40))
  {
    uint64_t v13 = (objc_class *)(shouldRunRecognitionLocallyWithEnvironment
                       ? CHTextSynthesizer
                       : CHRemoteTextSynthesizer);
    id v14 = objc_alloc_init(v13);
    uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;

    uint64_t v17 = *(void *)(a1 + 32);
    if (v17)
    {
      uint64_t v18 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      objc_storeStrong((id *)(v17 + 240), v18);
    }
  }
}

void sub_1C4B9E080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1C4B9E0AC(uint64_t *a1)
{
  if (a1[4])
  {
    uint64_t v2 = [CHTextSynthesizerWithLocaleFallback alloc];
    uint64_t v6 = objc_msgSend_initWithLocales_baseSynthesizer_(v2, v3, *(void *)(a1[5] + 168), a1[4], v4, v5);
    uint64_t v7 = *(void *)(a1[6] + 8);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }
}

void sub_1C4B9E184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9E3E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9E400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9E41C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9E434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9E47C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9E48C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9E4A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7
    && *(void *)(v7 + 176)
    && (objc_msgSend_count(*(void **)(v7 + 168), a2, a3, a4, a5, a6) || *(void *)(v7 + 160) == 2))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    if (!v12 || !*(unsigned char *)(v12 + 144))
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v13 = (id)qword_1EA3C9FA0;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        int v56 = 134217984;
        uint64_t v57 = v14;
        _os_log_impl(&dword_1C492D000, v13, OS_LOG_TYPE_DEBUG, "RecognitionSession %p received needsRecognitionUpdate request. Will trigger processing soon.", (uint8_t *)&v56, 0xCu);
      }
    }
    uint64_t v15 = *(void *)(a1 + 40);
    if (!v15)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v16 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      {
        uint64_t v17 = *(void *)(a1 + 48);
        int v56 = 138412290;
        uint64_t v57 = v17;
        _os_log_impl(&dword_1C492D000, v16, OS_LOG_TYPE_FAULT, "dataSource %@ returned a nil strokeProviderSnapshot.", (uint8_t *)&v56, 0xCu);
      }

      uint64_t v15 = *(void *)(a1 + 40);
    }
    objc_msgSend__setLatestStrokeProvider_(*(void **)(a1 + 32), v8, v15, v9, v10, v11);
    objc_msgSend__setLatestCalculateDocumentProvider_(*(void **)(a1 + 32), v18, *(void *)(a1 + 56), v19, v20, v21);
    objc_msgSend__setLatestCanvasAttachmentProvider_(*(void **)(a1 + 32), v22, *(void *)(a1 + 64), v23, v24, v25);
    uint64_t v31 = *(void **)(a1 + 32);
    if (v31)
    {
      objc_setProperty_atomic(v31, v26, *(id *)(a1 + 72), 216);
      uint64_t v31 = *(void **)(a1 + 32);
    }
    if (!objc_msgSend_mode(v31, v26, v27, v28, v29, v30)
      || objc_msgSend_mode(*(void **)(a1 + 32), v32, v33, v34, v35, v36) == 2)
    {
      sub_1C4B95994(*(void *)(a1 + 32));
      uint64_t v37 = *(void *)(a1 + 32);
      if (!v37) {
        goto LABEL_43;
      }
      uint64_t v38 = *(void **)(v37 + 72);
      if (v38)
      {
        *(void *)(v37 + 72) = 0;
      }
      uint64_t v39 = *(void **)(v37 + 80);
      if (v39)
      {
        *(void *)(v37 + 80) = 0;
      }
    }
    uint64_t v40 = *(void *)(a1 + 32);
    if (v40)
    {
      *(unsigned char *)(v40 + 144) = 1;
      uint64_t v41 = *(void **)(a1 + 32);
      goto LABEL_29;
    }
LABEL_43:
    uint64_t v41 = 0;
LABEL_29:
    sub_1C4B99378(v41, *(unsigned __int8 *)(a1 + 80));
    uint64_t v46 = *(void *)(a1 + 32);
    if (v46)
    {
      if (objc_msgSend_indexOfObjectPassingTest_(*(void **)(v46 + 320), v42, (uint64_t)&unk_1F2013BA8, v43, v44, v45) == 0x7FFFFFFFFFFFFFFFLL)
      {
        if (*(unsigned char *)(v46 + 144))
        {
          objc_msgSend__setStatus_((void *)v46, v47, 2, v48, v49, v50);
        }
        else if (*(void *)(v46 + 8))
        {
          objc_msgSend__setStatus_((void *)v46, v47, 4, v48, v49, v50);
        }
        else
        {
          objc_msgSend__setStatus_((void *)v46, v47, 1, v48, v49, v50);
        }
      }
      else
      {
        objc_msgSend__setStatus_((void *)v46, v47, 3, v48, v49, v50);
      }
    }
    return;
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v51 = (id)qword_1EA3C9FA0;
  if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
  {
    uint64_t v52 = *(void *)(a1 + 32);
    uint64_t v53 = *(void *)(a1 + 48);
    uint64_t v54 = *(void *)(v52 + 200);
    uint64_t v55 = *(void *)(v52 + 168);
    int v56 = 134218754;
    uint64_t v57 = v52;
    __int16 v58 = 2112;
    uint64_t v59 = v53;
    __int16 v60 = 2112;
    uint64_t v61 = v54;
    __int16 v62 = 2112;
    uint64_t v63 = v55;
    _os_log_impl(&dword_1C492D000, v51, OS_LOG_TYPE_ERROR, "RecognitionSession %p cannot process needsRecognitionUpdate request. dataSource: %@, text recognition locales: %@.,  preferred locales: %@.", (uint8_t *)&v56, 0x2Au);
  }
}

void sub_1C4B9E878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9E900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9E998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9EC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B9EC9C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_languageCode(a2, (const char *)a2, a3, a4, a5, a6);
  uint64_t isEqualToString = objc_msgSend_isEqualToString_(v7, v8, *(void *)(a1 + 32), v9, v10, v11);

  return isEqualToString;
}

void sub_1C4B9ECE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9ED90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9EDA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9EE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9EE6C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7 && *(unsigned char *)(v7 + 144))
  {
    sub_1C4B99378((void *)v7, 1);
    uint64_t v7 = *(void *)(a1 + 32);
  }
  int v8 = objc_msgSend_q_needsForegroundRecognition((void *)v7, a2, a3, a4, a5, a6);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = 288;
  if (v8)
  {
    uint64_t v10 = 280;
    uint64_t v11 = @"ForegroundQueue";
  }
  else
  {
    uint64_t v11 = @"BackgroundQueue";
  }
  uint64_t v12 = *(void **)(v9 + v10);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = sub_1C4B9EF84;
  v14[3] = &unk_1E64E11E0;
  v14[4] = v9;
  id v15 = *(id *)(a1 + 40);
  id v13 = v12;
  sub_1C4B96814(v9, v13, v11, @"WaitingPendingRecognitionTasks", v14);
}

void sub_1C4B9EF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9EF84(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    uint64_t v2 = *(NSObject **)(v1 + 296);
  }
  else {
    uint64_t v2 = 0;
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4B9F020;
  block[3] = &unk_1E64E0D48;
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, block);
}

intptr_t sub_1C4B9F020(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1C4B9F13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4B9F160(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2) {
    uint64_t v2 = (void *)v2[34];
  }
  uint64_t v24 = v2;
  uint64_t v7 = objc_msgSend_valueWithNonretainedObject_(MEMORY[0x1E4F29238], v3, a1[5], v4, v5, v6);
  objc_msgSend_addObject_(v24, v8, (uint64_t)v7, v9, v10, v11);

  uint64_t v12 = (void *)a1[4];
  if (v12) {
    uint64_t v12 = (void *)v12[34];
  }
  uint64_t v25 = v12;
  if (objc_msgSend_count(v25, v13, v14, v15, v16, v17) == 1)
  {
    uint64_t v22 = a1[4];
    if (*(void *)(v22 + 8))
    {
    }
    else
    {
      uint64_t v23 = objc_msgSend_indexOfObjectPassingTest_(*(void **)(v22 + 320), v18, (uint64_t)&unk_1F2013BA8, v19, v20, v21);

      if (v23 == 0x7FFFFFFFFFFFFFFFLL) {
        return;
      }
    }
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  }
  else
  {
  }
}

void sub_1C4B9F260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9F278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9F28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9F37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4B9F3A0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    uint64_t v2 = (void *)v2[34];
  }
  os_signpost_id_t v3 = v2;
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 3221225472;
  v27[2] = sub_1C4B9F51C;
  v27[3] = &unk_1E64E4A28;
  id v28 = *(id *)(a1 + 40);
  uint64_t v8 = objc_msgSend_indexOfObjectPassingTest_(v3, v4, (uint64_t)v27, v5, v6, v7);

  if (v8 != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v13 = *(void *)(a1 + 32);
    if (v13) {
      objc_msgSend_removeObjectAtIndex_(*(void **)(v13 + 272), v9, v8, v10, v11, v12);
    }
    else {
      objc_msgSend_removeObjectAtIndex_(0, v9, v8, v10, v11, v12);
    }
    uint64_t v14 = *(void **)(a1 + 32);
    if (v14) {
      uint64_t v14 = (void *)v14[34];
    }
    uint64_t v15 = v14;
    if (!objc_msgSend_count(v15, v16, v17, v18, v19, v20))
    {
      uint64_t v25 = *(void *)(a1 + 32);
      if (*(void *)(v25 + 8))
      {
      }
      else
      {
        uint64_t v26 = objc_msgSend_indexOfObjectPassingTest_(*(void **)(v25 + 320), v21, (uint64_t)&unk_1F2013BA8, v22, v23, v24);

        if (v26 == 0x7FFFFFFFFFFFFFFFLL) {
          goto LABEL_14;
        }
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
      goto LABEL_14;
    }
  }
LABEL_14:
}

void sub_1C4B9F4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4B9F504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B9F51C(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = objc_msgSend_nonretainedObjectValue(a2, (const char *)a2, a3, (uint64_t)a4, a5, a6);
  uint64_t v9 = *(void **)(a1 + 32);

  if (v8 != v9) {
    return 0;
  }
  *a4 = 1;
  return 1;
}

id sub_1C4B9F590(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, void *a6, double a7, double a8)
{
  uint64_t v303 = *MEMORY[0x1E4F143B8];
  id v14 = a2;
  id v15 = a4;
  __int16 v239 = v15;
  uint64_t v240 = a6;
  uint64_t v238 = v14;
  if (a1)
  {
    uint64_t v295 = 0;
    long long v296 = &v295;
    uint64_t v297 = 0x2020000000;
    uint64_t v298 = 0;
    uint64_t v289 = 0;
    unint64_t v290 = &v289;
    uint64_t v291 = 0x3032000000;
    BOOL v292 = sub_1C4B9763C;
    uint64_t v293 = sub_1C4B9764C;
    id v294 = 0;
    uint64_t v283 = 0;
    unint64_t v284 = &v283;
    uint64_t v285 = 0x3032000000;
    uint64_t v286 = sub_1C4B9763C;
    uint64_t v287 = sub_1C4B9764C;
    id v288 = 0;
    uint64_t v277 = 0;
    uint64_t v278 = &v277;
    uint64_t v279 = 0x3032000000;
    uint64_t v280 = sub_1C4B9763C;
    uint64_t v281 = sub_1C4B9764C;
    id v282 = 0;
    uint64_t v271 = 0;
    uint64_t v272 = &v271;
    uint64_t v273 = 0x3032000000;
    long long v274 = sub_1C4B9763C;
    uint64_t v275 = sub_1C4B9764C;
    id v276 = 0;
    uint64_t v265 = 0;
    uint64_t v266 = &v265;
    uint64_t v267 = 0x3032000000;
    int v268 = sub_1C4B9763C;
    uint64_t v269 = sub_1C4B9764C;
    id v270 = 0;
    uint64_t v16 = *(NSObject **)(a1 + 296);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4BA054C;
    block[3] = &unk_1E64E4A50;
    uint64_t v256 = &v277;
    uint64_t v257 = &v283;
    void block[4] = a1;
    id v17 = v15;
    id v254 = v17;
    id v235 = v14;
    id v255 = v235;
    unint64_t v258 = &v289;
    unint64_t v259 = &v295;
    double v263 = a7;
    double v264 = a8;
    unint64_t v260 = &v271;
    uint64_t v237 = a3;
    uint64_t v262 = a3;
    unint64_t v261 = &v265;
    dispatch_sync(v16, block);
    if ((objc_msgSend_shouldForceFastGrouping((void *)a1, v18, v19, v20, v21, v22) & 1) == 0 && v290[5])
    {
LABEL_82:
      if (a5) {
        *a5 = v296[3];
      }
      goto LABEL_84;
    }
    if (v240 && v240[2]())
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v23 = (id)qword_1EA3C9FA0;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C492D000, v23, OS_LOG_TYPE_DEFAULT, "Canceling tokenStrokeIdentifiersForContextStrokes request", buf, 2u);
      }

LABEL_84:
      id v227 = (id)v290[5];
LABEL_85:

      _Block_object_dispose(&v265, 8);
      _Block_object_dispose(&v271, 8);

      _Block_object_dispose(&v277, 8);
      _Block_object_dispose(&v283, 8);

      _Block_object_dispose(&v289, 8);
      _Block_object_dispose(&v295, 8);
      goto LABEL_86;
    }
    id v24 = (id)v278[5];
    if (objc_msgSend_count(v24, v25, v26, v27, v28, v29))
    {
      uint64_t v35 = (void *)MEMORY[0x1E4F1CA48];
      uint64_t v36 = objc_msgSend_count(v24, v30, v31, v32, v33, v34);
      objc_msgSend_arrayWithCapacity_(v35, v37, v36, v38, v39, v40);
      id v41 = (id)objc_claimAutoreleasedReturnValue();
      long long v251 = 0u;
      long long v252 = 0u;
      long long v249 = 0u;
      long long v250 = 0u;
      id v42 = v24;
      uint64_t v49 = objc_msgSend_countByEnumeratingWithState_objects_count_(v42, v43, (uint64_t)&v249, (uint64_t)v302, 16, v44);
      if (v49)
      {
        uint64_t v50 = *(void *)v250;
        do
        {
          for (uint64_t i = 0; i != v49; ++i)
          {
            if (*(void *)v250 != v50) {
              objc_enumerationMutation(v42);
            }
            uint64_t v52 = objc_msgSend_strokeIdentifierFromData_(v17, v45, *(void *)(*((void *)&v249 + 1) + 8 * i), v46, v47, v48);
            uint64_t v61 = objc_msgSend_strokeForIdentifier_(v17, v53, (uint64_t)v52, v54, v55, v56);
            if (v61) {
              objc_msgSend_addObject_(v41, v57, (uint64_t)v61, v58, v59, v60);
            }
          }
          uint64_t v49 = objc_msgSend_countByEnumeratingWithState_objects_count_(v42, v45, (uint64_t)&v249, (uint64_t)v302, 16, v48);
        }
        while (v49);
      }
      __int16 v62 = v42;
    }
    else
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v63 = (id)qword_1EA3C9FA0;
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C492D000, v63, OS_LOG_TYPE_DEFAULT, "Visible strokes not available in the stroke provider for fast grouping. Falling back on the ordered strokes.", buf, 2u);
      }

      uint64_t v69 = objc_msgSend_orderedStrokes(v17, v64, v65, v66, v67, v68);
      uint64_t v70 = (void *)MEMORY[0x1E4F1CA48];
      uint64_t v76 = objc_msgSend_count(v69, v71, v72, v73, v74, v75);
      __int16 v62 = objc_msgSend_arrayWithCapacity_(v70, v77, v76, v78, v79, v80);
      long long v247 = 0u;
      long long v248 = 0u;
      long long v245 = 0u;
      long long v246 = 0u;
      id v41 = v69;
      uint64_t v88 = objc_msgSend_countByEnumeratingWithState_objects_count_(v41, v81, (uint64_t)&v245, (uint64_t)v301, 16, v82);
      if (v88)
      {
        uint64_t v89 = *(void *)v246;
        do
        {
          for (uint64_t j = 0; j != v88; ++j)
          {
            if (*(void *)v246 != v89) {
              objc_enumerationMutation(v41);
            }
            uint64_t v91 = objc_msgSend_encodedStrokeIdentifier(*(void **)(*((void *)&v245 + 1) + 8 * j), v83, v84, v85, v86, v87);
            objc_msgSend_addObject_(v62, v92, (uint64_t)v91, v93, v94, v95);
          }
          uint64_t v88 = objc_msgSend_countByEnumeratingWithState_objects_count_(v41, v83, (uint64_t)&v245, (uint64_t)v301, 16, v87);
        }
        while (v88);
      }

      uint64_t v100 = objc_msgSend_orderedSetWithArray_(MEMORY[0x1E4F1CAA0], v96, (uint64_t)v62, v97, v98, v99);

      id v42 = (id)v100;
    }

    if (!v284[5])
    {
      uint64_t v106 = (void *)MEMORY[0x1E4F28DB0];
      uint64_t v107 = objc_msgSend_strokeProviderVersion(v17, v101, v102, v103, v104, v105);
      id v244 = 0;
      uint64_t v110 = objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(v106, v108, (uint64_t)v107, 1, (uint64_t)&v244, v109);
      id v111 = v244;
      uint64_t v112 = (void *)v284[5];
      v284[5] = v110;
    }
    uint64_t v113 = v272[5];
    if (v237 && !v113)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      unsigned int v114 = (id)qword_1EA3C9FA0;
      if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v120 = objc_msgSend_count(v41, v115, v116, v117, v118, v119);
        *(_DWORD *)long long buf = 134217984;
        double v300 = *(double *)&v120;
        _os_log_impl(&dword_1C492D000, v114, OS_LOG_TYPE_DEFAULT, "Cached fast grouping line clusters not available. Computing line clusters on %lu strokes", buf, 0xCu);
      }

      objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], v121, v122, v123, v124, v125);
      double v127 = v126;
      objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], v128, v129, v130, v131, v132);
      double v134 = v133;
      if (v266[5])
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        uint64_t v135 = (id)qword_1EA3C9FA0;
        if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1C492D000, v135, OS_LOG_TYPE_DEFAULT, "Using cached clutter filter for grouping query", buf, 2u);
        }
      }
      else
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        uint64_t v144 = (id)qword_1EA3C9FA0;
        if (os_log_type_enabled(v144, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1C492D000, v144, OS_LOG_TYPE_DEFAULT, "Cached clutter filter not available. Creating new clutter filter", buf, 2u);
        }

        uint64_t v145 = objc_alloc_init(CHStrokeClutterFilter);
        double v146 = (void *)v266[5];
        v266[5] = (uint64_t)v145;

        uint64_t v149 = objc_msgSend_clutterFilterByAddingStrokes_removingStrokeIdentifiers_affectedStrokeIdentifiers_((void *)v266[5], v147, (uint64_t)v41, 0, 0, v148);
        uint64_t v135 = v266[5];
        v266[5] = v149;
      }

      objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], v150, v151, v152, v153, v154);
      double v156 = v155;
      objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], v157, v158, v159, v160, v161);
      double v163 = v162;
      uint64_t v164 = [CHFastStrokeGroupingStrategy alloc];
      uint64_t v167 = objc_msgSend_initWithStrokeProvider_locales_clutterFilter_(v164, v165, (uint64_t)v17, 0, v266[5], v166);
      uint64_t v171 = objc_msgSend_lineGroupingResultUsingStrokes_shouldCancel_(v167, v168, (uint64_t)v41, (uint64_t)v240, v169, v170);
      uint64_t v232 = v167;
      uint64_t v172 = (void *)v272[5];
      v272[5] = v171;

      double v173 = a7;
      double v174 = a8;
      double v175 = v127;
      objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], v176, v177, v178, v179, v180);
      double v182 = v181;
      objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], v183, v184, v185, v186, v187);
      double v189 = v188;
      uint64_t v190 = [CHRecognitionSessionResult alloc];
      uint64_t v234 = objc_msgSend_strokeProviderVersion(v17, v191, v192, v193, v194, v195);
      uint64_t v196 = v284[5];
      __int16 v233 = objc_msgSend_array(v42, v197, v198, v199, v200, v201);
      uint64_t v202 = (void *)a1;
      uint64_t v203 = *(void *)(a1 + 200);
      uint64_t v231 = *(void *)(a1 + 168);
      unint64_t v209 = objc_msgSend_declaredVariables(*(void **)(a1 + 40), v204, v205, v206, v207, v208);
      double v210 = v156 - v134;
      double v211 = v189 - v175;
      uint64_t v212 = v266[5];
      uint64_t v213 = v272[5];
      *(double *)__int16 v243 = v210;
      v243[1] = 0;
      *(double *)&v243[2] = v182 - v163;
      v243[3] = 0;
      v243[4] = 0;
      *(double *)&v243[5] = v189 - v175;
      uint64_t v219 = objc_msgSend_recognitionEnvironment(v202, v214, v215, v216, v217, v218);
      uint64_t v221 = objc_msgSend_initWithStrokeProviderVersion_encodedStrokeProviderVersion_orderedStrokeIdentifiers_sessionMode_locales_preferredLocales_declaredVariables_clutterFilter_strokeClassificationResult_rawStrokeClassificationResult_strokeGroupingResult_rawStrokeGroupingResult_unprocessedStrokeGroupingResult_recognitionResults_rawRecognitionResults_inlineContinuousModeResults_autoRefineResults_generationDuration_recognitionEnvironment_(v190, v220, (uint64_t)v234, v196, (uint64_t)v233, 0, v203, v231, v209, v212, 0, 0, v213, v213, v213, 0, 0, 0, 0,
                       v243,
                       v219);

      a8 = v174;
      a7 = v173;

      uint64_t v222 = v202[37];
      v241[0] = MEMORY[0x1E4F143A8];
      v241[1] = 3221225472;
      v241[2] = sub_1C4BA1D98;
      v241[3] = &unk_1E64E11E0;
      v241[4] = v202;
      id v242 = v221;
      id v223 = v221;
      dispatch_async(v222, v241);
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint8x8_t v224 = (id)qword_1EA3C9FA0;
      if (os_log_type_enabled(v224, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        double v300 = v211;
        _os_log_impl(&dword_1C492D000, v224, OS_LOG_TYPE_DEFAULT, "Fast grouping duration: %2.2f seconds", buf, 0xCu);
      }

      uint64_t v143 = v232;
      if (v240)
      {
LABEL_75:
        if (v240[2]())
        {
          if (qword_1EA3CA000 != -1) {
            dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
          }
          unint64_t v225 = v143;
          uint64_t v226 = (id)qword_1EA3C9FA0;
          if (os_log_type_enabled(v226, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1C492D000, v226, OS_LOG_TYPE_DEFAULT, "Canceling tokenStrokeIdentifiersForContextStrokes request", buf, 2u);
          }

          id v227 = (id)v290[5];
          goto LABEL_85;
        }
      }
LABEL_81:
      uint64_t v228 = objc_msgSend_groupingResultForContextStrokes_clusteredStrokes_fastGroupingResult_point_tokenizationLevel_(v143, v142, (uint64_t)v235, (uint64_t)v41, v272[5], v237, a7, a8);
      __int16 v229 = (void *)v290[5];
      v290[5] = v228;

      v296[3] = 1;
      goto LABEL_82;
    }
    if (v113)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v136 = (id)qword_1EA3C9FA0;
      if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        uint64_t v137 = "Using cached fast grouping line clusters for grouping query";
LABEL_62:
        _os_log_impl(&dword_1C492D000, v136, OS_LOG_TYPE_DEFAULT, v137, buf, 2u);
      }
    }
    else
    {
      if (v237)
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        uint64_t v138 = (id)qword_1EA3C9F90[0];
        if (os_log_type_enabled(v138, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1C492D000, v138, OS_LOG_TYPE_FAULT, "The tokenization level must be CHStrokeTokenizationLevelStroke to be compatible with fastGroupingResult=nil", buf, 2u);
        }
      }
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v136 = (id)qword_1EA3C9FA0;
      if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        uint64_t v137 = "CHStrokeTokenizationLevelStroke requested, so avoiding any clustering or grouping";
        goto LABEL_62;
      }
    }

    id v139 = [CHFastStrokeGroupingStrategy alloc];
    uint64_t v143 = objc_msgSend_initWithStrokeProvider_locales_clutterFilter_(v139, v140, (uint64_t)v17, 0, 0, v141);
    if (v240) {
      goto LABEL_75;
    }
    goto LABEL_81;
  }
  id v227 = 0;
LABEL_86:

  return v227;
}

void sub_1C4BA036C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&STACK[0x230], 8);
  _Block_object_dispose(&STACK[0x260], 8);

  _Block_object_dispose(&STACK[0x290], 8);
  _Block_object_dispose(&STACK[0x2C0], 8);

  _Block_object_dispose(&STACK[0x2F0], 8);
  _Block_object_dispose(&STACK[0x320], 8);

  _Unwind_Resume(a1);
}

void sub_1C4BA054C(uint64_t a1)
{
  uint64_t v662 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1 + 32;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(id *)(*(void *)(a1 + 32) + 32));
  uint64_t v7 = *(void **)(*(void *)v1 + 8);
  if (v7 && objc_msgSend_completeness(v7, v2, v3, v4, v5, v6) >= 1)
  {
    uint64_t v13 = a1;
    uint64_t v14 = *(void *)(a1 + 32);
    if (*(void *)(v14 + 16) == 4)
    {
LABEL_4:
      int isValidForStrokes = objc_msgSend_isValidForStrokes_(*(void **)(v14 + 8), v8, *(void *)(v13 + 48), v10, v11, v12);
      goto LABEL_14;
    }
    uint64_t v16 = (void *)MEMORY[0x1E4F28DB0];
    id v17 = objc_msgSend_strokeProviderVersion(*(void **)(a1 + 40), v8, v9, v10, v11, v12);
    id v630 = 0;
    uint64_t v20 = objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(v16, v18, (uint64_t)v17, 1, (uint64_t)&v630, v19);
    id v21 = v630;
    uint64_t v22 = *(void *)(*(void *)(a1 + 64) + 8);
    uint64_t v23 = *(void **)(v22 + 40);
    *(void *)(v22 + 40) = v20;

    uint64_t v24 = *(void *)(a1 + 32);
    uint64_t v25 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    id v26 = *(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    id v32 = v25;
    if (!v24) {
      goto LABEL_12;
    }
    uint64_t v33 = *(void **)(v24 + 8);
    if (!v33) {
      goto LABEL_12;
    }
    uint64_t v34 = objc_msgSend_encodedStrokeProviderVersion(v33, v27, v28, v29, v30, v31);
    isEqualToDatCGFloat a = objc_msgSend_isEqualToData_(v34, v35, (uint64_t)v26, v36, v37, v38);

    if (!isEqualToData) {
      goto LABEL_12;
    }
    if (!objc_msgSend_count(v32, v40, v41, v42, v43, v44))
    {

LABEL_134:
      uint64_t v13 = a1;
      uint64_t v14 = *(void *)(a1 + 32);
      goto LABEL_4;
    }
    uint64_t v50 = objc_msgSend_orderedStrokeIdentifiers(*(void **)(v24 + 8), v45, v46, v47, v48, v49);
    uint64_t v56 = objc_msgSend_count(v50, v51, v52, v53, v54, v55);
    LODWORD(v56) = v56 == objc_msgSend_count(v32, v57, v58, v59, v60, v61);

    if (v56)
    {
      uint64_t v67 = objc_msgSend_array(v32, v62, v63, v64, v65, v66);
      uint64_t v73 = objc_msgSend_orderedStrokeIdentifiers(*(void **)(v24 + 8), v68, v69, v70, v71, v72);
      isEqualToArraCGFloat y = objc_msgSend_isEqualToArray_(v73, v74, (uint64_t)v67, v75, v76, v77);

      if (isEqualToArray) {
        goto LABEL_134;
      }
    }
    else
    {
LABEL_12:
    }
  }
  int isValidForStrokes = 0;
LABEL_14:
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v79 = (id)qword_1EA3C9FA0;
  if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v85 = objc_msgSend_count(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v80, v81, v82, v83, v84);
    uint64_t v91 = objc_msgSend_orderedStrokes(*(void **)(a1 + 40), v86, v87, v88, v89, v90);
    uint64_t v97 = objc_msgSend_count(v91, v92, v93, v94, v95, v96);
    uint64_t v98 = *(void *)(*(void *)(a1 + 32) + 8);
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = v85;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v97;
    *(_WORD *)&buf[22] = 1024;
    LODWORD(v657) = isValidForStrokes;
    WORD2(v657) = 2048;
    *(void *)((char *)&v657 + 6) = v98;
    _os_log_impl(&dword_1C492D000, v79, OS_LOG_TYPE_DEFAULT, "Visible stroke count: %lu, Ordered stroke count: %lu lastRecognitionResultIsValid: %d, _lastRecognitionResult: %p", buf, 0x26u);
  }
  if (qword_1EA3CA000 != -1)
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v99 = (id)qword_1EA3C9FA0;
    BOOL v100 = os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT);
    if (isValidForStrokes) {
      goto LABEL_20;
    }
LABEL_136:
    if (v100)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C492D000, v99, OS_LOG_TYPE_DEFAULT, "Last accurate results for tokenStrokeIdentifiersForContextStrokes don't match visible strokes", buf, 2u);
    }

    uint64_t v215 = a1;
    goto LABEL_139;
  }
  uint64_t v99 = (id)qword_1EA3C9FA0;
  BOOL v100 = os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT);
  if (!isValidForStrokes) {
    goto LABEL_136;
  }
LABEL_20:
  if (v100)
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C492D000, v99, OS_LOG_TYPE_DEFAULT, "Using last accurate results for tokenStrokeIdentifiersForContextStrokes results", buf, 2u);
  }

  uint64_t v106 = objc_msgSend_count(*(void **)(a1 + 48), v101, v102, v103, v104, v105);
  uint64_t v107 = *(void ***)(a1 + 32);
  v624 = v107;
  if (v106)
  {
    uint64_t v108 = *(void *)(a1 + 104);
    id v620 = *(id *)(a1 + 48);
    if (!v107) {
      goto LABEL_42;
    }
    uint64_t v113 = v107[1];
    if (!v113)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      unsigned int v114 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v114, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C492D000, v114, OS_LOG_TYPE_FAULT, "A cached result must exist when calling _strokeIdentifiersFromCachedResultUsingContextStrokes:tokenizationLevel:", buf, 2u);
      }

      uint64_t v113 = v107[1];
    }
    if (objc_msgSend_isValidForStrokes_(v113, v109, (uint64_t)v620, v110, v111, v112))
    {
      switch(v108)
      {
        case 0:
          v625 = objc_msgSend_setWithArray_(MEMORY[0x1E4F1CAD0], v115, (uint64_t)v620, v116, v117, v118);
          goto LABEL_43;
        case 1:
          id v216 = v620;
          v625 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v217, v218, v219, v220, v221, v216);
          id v222 = v216;
          v626 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v223, v224, v225, v226, v227);
          long long v654 = 0u;
          long long v655 = 0u;
          long long v652 = 0u;
          long long v653 = 0u;
          id v228 = v222;
          uint64_t v231 = objc_msgSend_countByEnumeratingWithState_objects_count_(v228, v229, (uint64_t)&v652, (uint64_t)buf, 16, v230);
          if (v231)
          {
            uint64_t v232 = *(void *)v653;
            do
            {
              for (uint64_t i = 0; i != v231; ++i)
              {
                if (*(void *)v653 != v232) {
                  objc_enumerationMutation(v228);
                }
                uint64_t v234 = *(void *)(*((void *)&v652 + 1) + 8 * i);
                id v235 = objc_opt_class();
                __int16 v241 = objc_msgSend_strokeGroupingResult(v107[1], v236, v237, v238, v239, v240);
                uint64_t v247 = objc_msgSend_strokeGroupOrdering(v107, v242, v243, v244, v245, v246);
                long long v251 = objc_msgSend_strokeGroupsSortedBy_textGroupsOnly_(v241, v248, v247, 0, v249, v250);
                id v255 = objc_msgSend_strokeGroupContainingStrokeIdentifier_strokeGroups_(v235, v252, v234, (uint64_t)v251, v253, v254);

                if (v255) {
                  objc_msgSend_addObject_(v626, v256, (uint64_t)v255, v257, v258, v259);
                }

                uint64_t v107 = v624;
              }
              uint64_t v231 = objc_msgSend_countByEnumeratingWithState_objects_count_(v228, v260, (uint64_t)&v652, (uint64_t)buf, 16, v261);
            }
            while (v231);
          }

          long long v646 = 0u;
          long long v647 = 0u;
          long long v648 = 0u;
          long long v649 = 0u;
          id obj = v626;
          uint64_t v269 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v262, (uint64_t)&v646, (uint64_t)buf, 16, v263);
          id v270 = v624;
          if (!v269) {
            goto LABEL_109;
          }
          uint64_t v614 = *(void *)v647;
          break;
        case 2:
          id v628 = v620;
          v625 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v450, v451, v452, v453, v454);
          long long v654 = 0u;
          long long v655 = 0u;
          long long v652 = 0u;
          long long v653 = 0u;
          id v455 = v628;
          uint64_t v458 = objc_msgSend_countByEnumeratingWithState_objects_count_(v455, v456, (uint64_t)&v652, (uint64_t)buf, 16, v457);
          if (v458)
          {
            uint64_t v459 = *(void *)v653;
            do
            {
              for (uint64_t j = 0; j != v458; ++j)
              {
                if (*(void *)v653 != v459) {
                  objc_enumerationMutation(v455);
                }
                uint64_t v461 = *(void *)(*((void *)&v652 + 1) + 8 * j);
                v462 = objc_opt_class();
                v468 = objc_msgSend_strokeGroupingResult(v107[1], v463, v464, v465, v466, v467);
                uint64_t v474 = objc_msgSend_strokeGroupOrdering(v107, v469, v470, v471, v472, v473);
                v478 = objc_msgSend_strokeGroupsSortedBy_textGroupsOnly_(v468, v475, v474, 0, v476, v477);
                v482 = objc_msgSend_strokeGroupContainingStrokeIdentifier_strokeGroups_(v462, v479, v461, (uint64_t)v478, v480, v481);

                if (v482)
                {
                  v488 = objc_msgSend_strokeIdentifiers(v482, v483, v484, v485, v486, v487);
                  v494 = objc_msgSend_allObjects(v488, v489, v490, v491, v492, v493);
                  objc_msgSend_addObjectsFromArray_(v625, v495, (uint64_t)v494, v496, v497, v498);
                }
                uint64_t v107 = v624;
              }
              uint64_t v458 = objc_msgSend_countByEnumeratingWithState_objects_count_(v455, v499, (uint64_t)&v652, (uint64_t)buf, 16, v500);
            }
            while (v458);
          }

          goto LABEL_43;
        case 3:
          id v619 = v620;
          v501 = objc_opt_class();
          v507 = objc_msgSend_strokeGroupingResult(v107[1], v502, v503, v504, v505, v506);
          uint64_t v513 = objc_msgSend_strokeGroupOrdering(v107, v508, v509, v510, v511, v512);
          v517 = objc_msgSend_strokeGroupsSortedBy_textGroupsOnly_(v507, v514, v513, 1, v515, v516);
          v523 = objc_msgSend_strokeGroupingResult(v624[1], v518, v519, v520, v521, v522);
          v529 = objc_msgSend_textStrokeGroupClusters(v523, v524, v525, v526, v527, v528);
          v651[0] = 0;
          v622 = objc_msgSend_strokeIdentifiersInProximalGroupsForStrokeIdentifiers_sortedStrokeGroups_clusteredStrokeGroups_unusedStrokeIdentifiers_(v501, v530, (uint64_t)v619, (uint64_t)v517, (uint64_t)v529, (uint64_t)v651);
          id v629 = v651[0];

          v625 = objc_msgSend_setWithSet_(MEMORY[0x1E4F1CA80], v531, (uint64_t)v622, v532, v533, v534);
          v540 = v624;
          if (objc_msgSend_count(v629, v535, v536, v537, v538, v539))
          {
            long long v654 = 0u;
            long long v655 = 0u;
            long long v652 = 0u;
            long long v653 = 0u;
            id v541 = v629;
            uint64_t v544 = objc_msgSend_countByEnumeratingWithState_objects_count_(v541, v542, (uint64_t)&v652, (uint64_t)buf, 16, v543);
            if (v544)
            {
              uint64_t v545 = *(void *)v653;
              do
              {
                for (uint64_t k = 0; k != v544; ++k)
                {
                  if (*(void *)v653 != v545) {
                    objc_enumerationMutation(v541);
                  }
                  uint64_t v547 = *(void *)(*((void *)&v652 + 1) + 8 * k);
                  v548 = objc_opt_class();
                  v554 = objc_msgSend_strokeGroupingResult(v540[1], v549, v550, v551, v552, v553);
                  uint64_t v560 = objc_msgSend_strokeGroupOrdering(v540, v555, v556, v557, v558, v559);
                  v564 = objc_msgSend_strokeGroupsSortedBy_textGroupsOnly_(v554, v561, v560, 0, v562, v563);
                  v568 = objc_msgSend_strokeGroupContainingStrokeIdentifier_strokeGroups_(v548, v565, v547, (uint64_t)v564, v566, v567);

                  if (v568)
                  {
                    v574 = objc_msgSend_strokeIdentifiers(v568, v569, v570, v571, v572, v573);
                    v580 = objc_msgSend_allObjects(v574, v575, v576, v577, v578, v579);
                    objc_msgSend_addObjectsFromArray_(v625, v581, (uint64_t)v580, v582, v583, v584);
                  }
                  v540 = v624;
                }
                uint64_t v544 = objc_msgSend_countByEnumeratingWithState_objects_count_(v541, v585, (uint64_t)&v652, (uint64_t)buf, 16, v586);
              }
              while (v544);
            }
          }
          goto LABEL_43;
        case 4:
          v625 = sub_1C4BA4EE8(v107, v620);
          goto LABEL_43;
        default:
          goto LABEL_42;
      }
      do
      {
        uint64_t v271 = 0;
        uint64_t v612 = v269;
        do
        {
          if (*(void *)v647 != v614) {
            objc_enumerationMutation(obj);
          }
          uint64_t v615 = v271;
          uint64_t v272 = *(void **)(*((void *)&v646 + 1) + 8 * v271);
          uint64_t v273 = v270[1];
          uint64_t v274 = objc_msgSend_uniqueIdentifier(v272, v264, v265, v266, v267, v268);
          v627 = objc_msgSend_recognitionResultForStrokeGroupIdentifier_(v273, v275, v274, v276, v277, v278);
          unint64_t v284 = objc_msgSend_locales(v270[1], v279, v280, v281, v282, v283);
          v616 = objc_msgSend_localesSortedByCombinedLanguageFitness_(v627, v285, (uint64_t)v284, v286, v287, v288);

          v617 = objc_msgSend_firstObject(v616, v289, v290, v291, v292, v293);
          long long v299 = objc_msgSend_recognitionResultsByLocale(v627, v294, v295, v296, v297, v298);
          v618 = objc_msgSend_objectForKey_(v299, v300, (uint64_t)v617, v301, v302, v303);

          if (v618)
          {
            for (uint64_t m = 0; ; ++m)
            {
              long long v310 = v618;
              if (m >= objc_msgSend_tokenColumnCount(v618, v304, v305, v306, v307, v308)) {
                break;
              }
              v621 = objc_msgSend_tokenRowsAtColumnIndex_(v618, v311, m, v312, v313, v314);
              uint64_t v320 = objc_msgSend_transcriptionPaths(v618, v315, v316, v317, v318, v319);
              unint64_t v326 = objc_msgSend_firstObject(v320, v321, v322, v323, v324, v325);
              uint64_t v331 = objc_msgSend_indexAtPosition_(v326, v327, m, v328, v329, v330);

              uint64_t v336 = objc_msgSend_objectAtIndexedSubscript_(v621, v332, v331, v333, v334, v335);
              long long v644 = 0u;
              long long v645 = 0u;
              long long v642 = 0u;
              long long v643 = 0u;
              id v337 = v336;
              uint64_t v345 = objc_msgSend_countByEnumeratingWithState_objects_count_(v337, v338, (uint64_t)&v642, (uint64_t)&v652, 16, v339);
              if (v345)
              {
                uint64_t v346 = *(void *)v643;
                do
                {
                  for (uint64_t n = 0; n != v345; ++n)
                  {
                    if (*(void *)v643 != v346) {
                      objc_enumerationMutation(v337);
                    }
                    unint64_t v348 = *(void **)(*((void *)&v642 + 1) + 8 * n);
                    id v349 = objc_msgSend_inputStrokeIdentifiers(v627, v340, v341, v342, v343, v344);
                    unint64_t v355 = objc_msgSend_strokeIndexes(v348, v350, v351, v352, v353, v354);
                    unint64_t v360 = objc_msgSend_objectsAtIndexes_(v349, v356, (uint64_t)v355, v357, v358, v359);

                    long long v640 = 0u;
                    long long v641 = 0u;
                    long long v638 = 0u;
                    long long v639 = 0u;
                    id v361 = v360;
                    uint64_t v368 = objc_msgSend_countByEnumeratingWithState_objects_count_(v361, v362, (uint64_t)&v638, (uint64_t)v651, 16, v363);
                    if (v368)
                    {
                      uint64_t v369 = *(void *)v639;
                      while (2)
                      {
                        for (iuint64_t i = 0; ii != v368; ++ii)
                        {
                          if (*(void *)v639 != v369) {
                            objc_enumerationMutation(v361);
                          }
                          if (objc_msgSend_containsObject_(v228, v364, *(void *)(*((void *)&v638 + 1) + 8 * ii), v365, v366, v367))
                          {
                            objc_msgSend_addObjectsFromArray_(v625, v364, (uint64_t)v361, v365, v366, v367);
                            goto LABEL_82;
                          }
                        }
                        uint64_t v368 = objc_msgSend_countByEnumeratingWithState_objects_count_(v361, v364, (uint64_t)&v638, (uint64_t)v651, 16, v367);
                        if (v368) {
                          continue;
                        }
                        break;
                      }
                    }
LABEL_82:
                  }
                  uint64_t v345 = objc_msgSend_countByEnumeratingWithState_objects_count_(v337, v340, (uint64_t)&v642, (uint64_t)&v652, 16, v344);
                }
                while (v345);
              }
            }
          }
          else
          {
            uint64_t v371 = objc_opt_class();
            uint64_t v377 = objc_msgSend_classification(v272, v372, v373, v374, v375, v376);
            if (objc_msgSend_isStrokeClassificationTextOrMath_(v371, v378, v377, v379, v380, v381))
            {
              id v387 = (void *)MEMORY[0x1E4F1CA48];
              unint64_t v388 = objc_msgSend_inputStrokeIdentifiers(v627, v382, v383, v384, v385, v386);
              uint64_t v394 = objc_msgSend_count(v388, v389, v390, v391, v392, v393);
              uint64_t v399 = objc_msgSend_arrayWithCapacity_(v387, v395, v394, v396, v397, v398);

              long long v636 = 0u;
              long long v637 = 0u;
              long long v634 = 0u;
              long long v635 = 0u;
              CGRect v405 = objc_msgSend_inputStrokeIdentifiers(v627, v400, v401, v402, v403, v404);
              CGRect v408 = v624;
              uint64_t v413 = objc_msgSend_countByEnumeratingWithState_objects_count_(v405, v406, (uint64_t)&v634, (uint64_t)v650, 16, v407);
              if (v413)
              {
                uint64_t v414 = *(void *)v635;
                do
                {
                  for (juint64_t j = 0; jj != v413; ++jj)
                  {
                    if (*(void *)v635 != v414) {
                      objc_enumerationMutation(v405);
                    }
                    CGRect v416 = objc_msgSend_strokeIdentifierFromData_(v408[3], v409, *(void *)(*((void *)&v634 + 1) + 8 * jj), v410, v411, v412);
                    uint64_t v425 = objc_msgSend_strokeForIdentifier_(v408[3], v417, (uint64_t)v416, v418, v419, v420);
                    if (v425) {
                      objc_msgSend_addObject_(v399, v421, (uint64_t)v425, v422, v423, v424);
                    }

                    CGRect v408 = v624;
                  }
                  uint64_t v413 = objc_msgSend_countByEnumeratingWithState_objects_count_(v405, v409, (uint64_t)&v634, (uint64_t)v650, 16, v412);
                }
                while (v413);
              }

              uint64_t v426 = [CHFastStrokeGroupingStrategy alloc];
              uint64_t v429 = objc_msgSend_initWithStrokeProvider_locales_clutterFilter_(v426, v427, (uint64_t)v624[3], 0, 0, v428);
              uint64_t v433 = v429;
              if (v429)
              {
                objc_msgSend_clustersForStrokes_shouldMakeSingleCluster_anchorPoints_(v429, v430, (uint64_t)v399, 1, 1, v432);
              }
              else
              {
                long long __p = 0;
                v632 = 0;
                uint64_t v633 = 0;
              }
              uint64_t v443 = objc_msgSend_fastGroupingResultWithFastGroupingClusters_clusteredStrokes_(v433, v430, (uint64_t)&__p, (uint64_t)v399, v431, v432);
              uint64_t v445 = objc_msgSend_groupingResultForContextStrokes_clusteredStrokes_fastGroupingResult_point_tokenizationLevel_(v433, v444, (uint64_t)v228, (uint64_t)v399, (uint64_t)v443, 1, *MEMORY[0x1E4F1DAD8], *(double *)(MEMORY[0x1E4F1DAD8] + 8));

              uint64_t v446 = __p;
              if (__p)
              {
                v447 = __p;
                if (v632 != __p)
                {
                  uint64_t v448 = (uint64_t)v632 - 32;
                  do
                  {
                    BOOL v449 = (void *)(v448 - 40);
                    sub_1C4999C7C(v448, *(void **)(v448 + 8));
                    sub_1C494AC4C(v448 - 40, *(void **)(v448 - 32));
                    v448 -= 72;
                  }
                  while (v449 != v446);
                  v447 = __p;
                }
                v632 = v446;
                operator delete(v447);
              }
              v625 = (void *)v445;
            }
            else
            {
              uint64_t v399 = objc_msgSend_strokeIdentifiers(v272, v382, v383, v384, v385, v386);
              uint64_t v433 = objc_msgSend_allObjects(v399, v434, v435, v436, v437, v438);
              objc_msgSend_addObjectsFromArray_(v625, v439, (uint64_t)v433, v440, v441, v442);
            }

            long long v310 = 0;
          }

          uint64_t v271 = v615 + 1;
          id v270 = v624;
        }
        while (v615 + 1 != v612);
        uint64_t v269 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v264, (uint64_t)&v646, (uint64_t)buf, 16, v268);
      }
      while (v269);
LABEL_109:
    }
    else
    {
LABEL_42:
      v625 = 0;
    }
LABEL_43:

    uint64_t v145 = *(void *)(*(void *)(a1 + 72) + 8);
    double v146 = *(void **)(v145 + 40);
    *(void *)(v145 + 40) = v625;
  }
  else
  {
    if (v107)
    {
      double v120 = *(double *)(a1 + 112);
      double v119 = *(double *)(a1 + 120);
      uint64_t v121 = *(void *)(a1 + 104);
      if (!v107[1])
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        uint64_t v122 = (id)qword_1EA3C9F90[0];
        if (os_log_type_enabled(v122, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1C492D000, v122, OS_LOG_TYPE_FAULT, "A cached result must exist when calling _strokeIdentifiersFromCachedResultUsingPoint:tokenizationLevel:textOnly:", buf, 2u);
        }
      }
      switch(v121)
      {
        case 1:
          *(void *)&long long v652 = 0;
          *((void *)&v652 + 1) = &v652;
          *(void *)&long long v653 = 0x3032000000;
          *((void *)&v653 + 1) = sub_1C4B9763C;
          *(void *)&long long v654 = sub_1C4B9764C;
          *((void *)&v654 + 1) = 0;
          v651[0] = 0;
          v651[1] = v651;
          v651[2] = (id)0x2020000000;
          v651[3] = (id)0x7FEFFFFFFFFFFFFFLL;
          uint64_t v123 = v107;
          uint64_t v124 = objc_opt_class();
          uint64_t v130 = objc_msgSend_strokeGroupingResult(v123[1], v125, v126, v127, v128, v129);
          uint64_t v136 = objc_msgSend_strokeGroupOrdering(v123, v131, v132, v133, v134, v135);
          uint64_t v140 = objc_msgSend_strokeGroupsSortedBy_textGroupsOnly_(v130, v137, v136, 0, v138, v139);
          *(void *)long long buf = MEMORY[0x1E4F143A8];
          *(void *)&uint8_t buf[8] = 3221225472;
          *(void *)&uint8_t buf[16] = sub_1C4BA5D0C;
          *(void *)&long long v657 = &unk_1E64E4AF0;
          double v660 = v120;
          double v661 = v119;
          *((void *)&v657 + 1) = v624;
          v658 = v651;
          v659 = &v652;
          objc_msgSend_strokeGroupsContainingPoint_strokeGroups_groupProcessingBlock_(v124, v141, (uint64_t)v140, (uint64_t)buf, v142, v143, v120, v119);

          id v144 = *(id *)(*((void *)&v652 + 1) + 40);
          _Block_object_dispose(v651, 8);
          _Block_object_dispose(&v652, 8);

          break;
        case 2:
          uint64_t v190 = sub_1C4BA5A14(v107, v120, v119);
          objc_msgSend_strokeIdentifiers(v190, v191, v192, v193, v194, v195);
          id v144 = (id)objc_claimAutoreleasedReturnValue();

          break;
        case 3:
          uint64_t v147 = sub_1C4BA5A14(v107, v120, v119);
          uint64_t v153 = objc_msgSend_strokeIdentifiers(v147, v148, v149, v150, v151, v152);

          uint64_t v154 = objc_opt_class();
          uint64_t v160 = objc_msgSend_allObjects(v153, v155, v156, v157, v158, v159);
          uint64_t v166 = objc_msgSend_strokeGroupingResult(v624[1], v161, v162, v163, v164, v165);
          uint64_t v172 = objc_msgSend_strokeGroupOrdering(v624, v167, v168, v169, v170, v171);
          uint64_t v176 = objc_msgSend_strokeGroupsSortedBy_textGroupsOnly_(v166, v173, v172, 0, v174, v175);
          double v182 = objc_msgSend_strokeGroupingResult(v624[1], v177, v178, v179, v180, v181);
          double v188 = objc_msgSend_textStrokeGroupClusters(v182, v183, v184, v185, v186, v187);
          objc_msgSend_strokeIdentifiersInProximalGroupsForStrokeIdentifiers_sortedStrokeGroups_clusteredStrokeGroups_unusedStrokeIdentifiers_(v154, v189, (uint64_t)v160, (uint64_t)v176, (uint64_t)v188, 0);
          id v144 = (id)objc_claimAutoreleasedReturnValue();

          break;
        case 4:
          uint64_t v196 = sub_1C4BA5A14(v107, v120, v119);
          uint64_t v202 = objc_msgSend_strokeIdentifiers(v196, v197, v198, v199, v200, v201);

          uint64_t v208 = objc_msgSend_allObjects(v202, v203, v204, v205, v206, v207);
          sub_1C4BA4EE8(v624, v208);
          id v144 = (id)objc_claimAutoreleasedReturnValue();

          break;
        default:
          goto LABEL_44;
      }
    }
    else
    {
LABEL_44:
      id v144 = 0;
    }
    uint64_t v209 = *(void *)(*(void *)(a1 + 72) + 8);
    double v146 = *(void **)(v209 + 40);
    *(void *)(v209 + 40) = v144;
  }

  uint64_t v215 = a1;
  *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 0;
LABEL_139:
  if ((objc_msgSend_shouldForceFastGrouping(*(void **)(v215 + 32), v210, v211, v212, v213, v214) & 1) != 0
    || !*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40))
  {
    uint64_t v592 = *(void *)(a1 + 32);
    if (v592
      && (objc_msgSend_strokeGroupingResult(*(void **)(v592 + 72), v587, v588, v589, v590, v591),
          v593 = objc_claimAutoreleasedReturnValue(),
          objc_opt_class(),
          char isKindOfClass = objc_opt_isKindOfClass(),
          v593,
          (isKindOfClass & 1) != 0))
    {
      uint64_t v600 = objc_msgSend_strokeGroupingResult(*(void **)(v592 + 72), v595, v596, v597, v598, v599);
    }
    else
    {
      uint64_t v600 = 0;
    }
    uint64_t v601 = *(void *)(*(void *)(a1 + 88) + 8);
    v602 = *(void **)(v601 + 40);
    *(void *)(v601 + 40) = v600;

    uint64_t v608 = *(void *)(a1 + 32);
    if (v608)
    {
      uint64_t v609 = objc_msgSend_clutterFilter(*(void **)(v608 + 80), v603, v604, v605, v606, v607);
    }
    else
    {
      uint64_t v609 = 0;
    }
    uint64_t v610 = *(void *)(*(void *)(a1 + 96) + 8);
    v611 = *(void **)(v610 + 40);
    *(void *)(v610 + 40) = v609;
  }
}

void sub_1C4BA18D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA1D98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void **)(a1 + 40);
  id v3 = v1;
  if (v2)
  {
    id v5 = *(id *)(v2 + 72);
    uint64_t v4 = (id *)(v2 + 72);
    if (v5 != v3)
    {
      id v6 = v3;
      objc_storeStrong(v4, v1);
      id v3 = v6;
    }
  }
}

void sub_1C4BA1F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BA1F30(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    uint64_t v2 = (void *)v2[26];
  }
  id v3 = v2;
  uint64_t v9 = objc_msgSend_localeIdentifier(*(void **)(a1 + 40), v4, v5, v6, v7, v8);
  uint64_t v14 = objc_msgSend_objectForKeyedSubscript_(v3, v10, (uint64_t)v9, v11, v12, v13);
  uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v14;

  int shouldRunRecognitionLocallyWithEnvironment = objc_msgSend_shouldRunRecognitionLocallyWithEnvironment_(CHRecognitionSession, v17, *(void *)(*(void *)(a1 + 32) + 184), v18, v19, v20);
  uint64_t v26 = *(void *)(a1 + 48);
  if (*(void *)(*(void *)(v26 + 8) + 40))
  {
    objc_opt_class();
    int isKindOfClass = objc_opt_isKindOfClass();
    uint64_t v26 = *(void *)(a1 + 48);
    if (((shouldRunRecognitionLocallyWithEnvironment ^ isKindOfClass) & 1) == 0)
    {
      uint64_t v28 = *(void *)(v26 + 8);
      uint64_t v29 = *(void **)(v28 + 40);
      *(void *)(v28 + 40) = 0;

      uint64_t v26 = *(void *)(a1 + 48);
    }
  }
  if (!*(void *)(*(void *)(v26 + 8) + 40)
    && objc_msgSend_containsObject_(*(void **)(*(void *)(a1 + 32) + 200), v21, *(void *)(a1 + 40), v22, v23, v24))
  {
    uint64_t v30 = objc_opt_class();
    uint64_t v31 = *(void *)(a1 + 40);
    uint64_t v37 = objc_msgSend_mode(*(void **)(a1 + 32), v32, v33, v34, v35, v36);
    uint64_t v43 = objc_msgSend_priority(*(void **)(a1 + 32), v38, v39, v40, v41, v42);
    RecognizerForLocale_sessionMode_remote_prioritCGFloat y = objc_msgSend_createRecognizerForLocale_sessionMode_remote_priority_(v30, v44, v31, v37, shouldRunRecognitionLocallyWithEnvironment ^ 1u, v43);
    uint64_t v46 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v47 = *(void **)(v46 + 40);
    *(void *)(v46 + 40) = RecognizerForLocale_sessionMode_remote_priority;

    if (objc_msgSend_autoCapitalizationMode(*(void **)(a1 + 32), v48, v49, v50, v51, v52) != 1)
    {
      uint64_t v58 = objc_msgSend_autoCapitalizationMode(*(void **)(a1 + 32), v53, v54, v55, v56, v57);
      objc_msgSend_setAutoCapitalizationMode_(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v59, v58, v60, v61, v62);
    }
    if (objc_msgSend_autoCorrectionMode(*(void **)(a1 + 32), v53, v54, v55, v56, v57))
    {
      uint64_t v68 = objc_msgSend_autoCorrectionMode(*(void **)(a1 + 32), v63, v64, v65, v66, v67);
      objc_msgSend_setAutoCorrectionMode_(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v69, v68, v70, v71, v72);
    }
    uint64_t v73 = objc_msgSend_baseWritingDirection(*(void **)(a1 + 32), v63, v64, v65, v66, v67);
    objc_msgSend_setBaseWritingDirection_(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v74, v73, v75, v76, v77);
    if ((shouldRunRecognitionLocallyWithEnvironment & 1) == 0)
    {
      id v78 = *(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      objc_msgSend_setShouldUseTextReplacements_(v78, v79, 0, v80, v81, v82);
      uint64_t v83 = *(void *)(*(void *)(a1 + 48) + 8);
      uint64_t v84 = *(void **)(v83 + 40);
      *(void *)(v83 + 40) = v78;
    }
    uint64_t v85 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    if (v85)
    {
      uint64_t v86 = *(void **)(a1 + 32);
      if (v86) {
        uint64_t v86 = (void *)v86[26];
      }
      uint64_t v87 = v86;
      uint64_t v93 = objc_msgSend_localeIdentifier(*(void **)(a1 + 40), v88, v89, v90, v91, v92);
      objc_msgSend_setObject_forKeyedSubscript_(v87, v94, v85, (uint64_t)v93, v95, v96);
    }
  }
  objc_opt_class();
  uint64_t result = objc_opt_isKindOfClass();
  if (result)
  {
    if (objc_msgSend_q_needsForegroundRecognition(*(void **)(a1 + 32), v98, v99, v100, v101, v102)) {
      uint64_t v108 = 1;
    }
    else {
      uint64_t v108 = objc_msgSend_priority(*(void **)(a1 + 32), v103, v104, v105, v106, v107);
    }
    uint64_t v109 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    return objc_msgSend_setPriority_(v109, v103, v108, v105, v106, v107);
  }
  return result;
}

void sub_1C4BA21EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA21FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA2210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA2220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA2234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA23AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1C4BA23E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA23F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA240C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    uint64_t v2 = (void *)v2[28];
  }
  id v3 = v2;
  uint64_t v8 = objc_msgSend_objectForKeyedSubscript_(v3, v4, *(void *)(a1 + 40), v5, v6, v7);
  uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  int shouldRunRecognitionLocallyWithEnvironment = objc_msgSend_shouldRunRecognitionLocallyWithEnvironment_(CHRecognitionSession, v11, *(void *)(*(void *)(a1 + 32) + 184), v12, v13, v14);
  uint64_t v21 = *(void *)(a1 + 56);
  uint64_t v22 = *(void **)(*(void *)(v21 + 8) + 40);
  if (v22)
  {
    isRemoteRecognitiouint64_t n = objc_msgSend_isRemoteRecognition(v22, v15, v16, v17, v18, v19);
    uint64_t v21 = *(void *)(a1 + 56);
    if (shouldRunRecognitionLocallyWithEnvironment == isRemoteRecognition)
    {
      uint64_t v24 = *(void *)(v21 + 8);
      uint64_t v25 = *(void **)(v24 + 40);
      *(void *)(v24 + 40) = 0;

      uint64_t v21 = *(void *)(a1 + 56);
    }
  }
  if (!*(void *)(*(void *)(v21 + 8) + 40))
  {
    uint64_t v26 = [CHTextCorrectionRecognizer alloc];
    uint64_t v27 = *(void *)(a1 + 48);
    uint64_t v33 = objc_msgSend_priority(*(void **)(a1 + 32), v28, v29, v30, v31, v32);
    uint64_t v36 = objc_msgSend_initWithLocales_remoteRecognition_priority_(v26, v34, v27, shouldRunRecognitionLocallyWithEnvironment ^ 1u, v33, v35);
    uint64_t v37 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v38 = *(void **)(v37 + 40);
    *(void *)(v37 + 40) = v36;

    uint64_t v42 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    if (v42)
    {
      uint64_t v43 = *(void *)(a1 + 32);
      if (v43)
      {
        uint64_t v44 = *(void **)(v43 + 224);
        uint64_t v45 = *(void *)(a1 + 40);
      }
      else
      {
        uint64_t v44 = 0;
        uint64_t v45 = *(void *)(a1 + 40);
      }
      objc_msgSend_setObject_forKeyedSubscript_(v44, v39, v42, v45, v40, v41);
    }
  }
}

void sub_1C4BA2574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA266C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BA268C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    id v3 = *(void **)(v2 + 232);
  }
  else {
    id v3 = 0;
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v3);
  int shouldRunRecognitionLocallyWithEnvironment = objc_msgSend_shouldRunRecognitionLocallyWithEnvironment_(CHRecognitionSession, v4, *(void *)(*(void *)(a1 + 32) + 184), v5, v6, v7);
  uint64_t v9 = *(void *)(a1 + 40);
  if (*(void *)(*(void *)(v9 + 8) + 40))
  {
    objc_opt_class();
    int isKindOfClass = objc_opt_isKindOfClass();
    uint64_t v9 = *(void *)(a1 + 40);
    if (((shouldRunRecognitionLocallyWithEnvironment ^ isKindOfClass) & 1) == 0)
    {
      uint64_t v11 = *(void *)(v9 + 8);
      uint64_t v12 = *(void **)(v11 + 40);
      *(void *)(v11 + 40) = 0;

      uint64_t v9 = *(void *)(a1 + 40);
    }
  }
  if (!*(void *)(*(void *)(v9 + 8) + 40))
  {
    uint64_t v13 = objc_opt_class();
    uint64_t v19 = objc_msgSend_priority(*(void **)(a1 + 32), v14, v15, v16, v17, v18);
    MathRecognizerRunningRemote_prioritCGFloat y = objc_msgSend_createMathRecognizerRunningRemote_priority_(v13, v20, shouldRunRecognitionLocallyWithEnvironment ^ 1u, v19, v21, v22);
    uint64_t v24 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v25 = *(void **)(v24 + 40);
    *(void *)(v24 + 40) = MathRecognizerRunningRemote_priority;

    uint64_t v26 = *(void *)(a1 + 32);
    if (v26) {
      objc_storeStrong((id *)(v26 + 232), *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
    }
  }
  objc_opt_class();
  uint64_t result = objc_opt_isKindOfClass();
  if (result)
  {
    if (objc_msgSend_q_needsForegroundRecognition(*(void **)(a1 + 32), v28, v29, v30, v31, v32)) {
      uint64_t v38 = 1;
    }
    else {
      uint64_t v38 = objc_msgSend_priority(*(void **)(a1 + 32), v33, v34, v35, v36, v37);
    }
    uint64_t v39 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    return objc_msgSend_setPriority_(v39, v33, v38, v35, v36, v37);
  }
  return result;
}

void sub_1C4BA2970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA2DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BA2F30(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C4BA30B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA30F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA3108(uint64_t a1)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v2 = *(id *)(*(void *)(a1 + 32) + 24);
  uint64_t v51 = 0;
  id v3 = sub_1C4B9F590(*(void *)(a1 + 32), *(void **)(a1 + 40), *(void *)(a1 + 88), v2, &v51, *(void **)(a1 + 56), *(double *)(a1 + 72), *(double *)(a1 + 80));
  uint64_t v9 = v3;
  if (v3)
  {
    uint64_t v10 = (void *)MEMORY[0x1E4F1CA80];
    uint64_t v11 = objc_msgSend_count(v3, v4, v5, v6, v7, v8);
    uint64_t v16 = objc_msgSend_setWithCapacity_(v10, v12, v11, v13, v14, v15);
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    id v17 = v9;
    uint64_t v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v18, (uint64_t)&v47, (uint64_t)v52, 16, v19);
    if (v24)
    {
      uint64_t v25 = *(void *)v48;
      do
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          if (*(void *)v48 != v25) {
            objc_enumerationMutation(v17);
          }
          uint64_t v27 = objc_msgSend_strokeIdentifierFromData_(v2, v20, *(void *)(*((void *)&v47 + 1) + 8 * i), v21, v22, v23);
          objc_msgSend_addObject_(v16, v28, (uint64_t)v27, v29, v30, v31);
        }
        uint64_t v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v20, (uint64_t)&v47, (uint64_t)v52, 16, v23);
      }
      while (v24);
    }

    uint64_t v32 = [CHTokenizedStrokeResult alloc];
    uint64_t v36 = objc_msgSend_initWithStrokeIdentifiers_resultLevel_(v32, v33, (uint64_t)v16, v51, v34, v35);
    objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 48), v37, 1, v38, v39, v40);
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v41 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v41, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl(&dword_1C492D000, v41, OS_LOG_TYPE_FAULT, "foundStrokeIdentifiers is nil", v46, 2u);
    }

    objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 48), v42, 1, v43, v44, v45);
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

void sub_1C4BA3360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA35E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA3638(uint64_t a1)
{
  uint64_t v349 = *MEMORY[0x1E4F143B8];
  id v2 = *(id *)(*(void *)(a1 + 32) + 24);
  uint64_t v339 = 0;
  id v315 = v2;
  id v3 = sub_1C4B9F590(*(void *)(a1 + 32), *(void **)(a1 + 40), 4, v2, &v339, *(void **)(a1 + 56), *(double *)(a1 + 72), *(double *)(a1 + 80));
  uint64_t v317 = a1;
  if (objc_msgSend_count(v3, v4, v5, v6, v7, v8))
  {
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v323 = v3;
    uint64_t v15 = objc_msgSend_allObjects(v3, v9, v10, v11, v12, v13);
    id v337 = 0;
    id v338 = 0;
    uint64_t v313 = sub_1C4BA446C(v14, v15, 2, 1, 1, &v338, &v337, *(void **)(a1 + 56));
    id v312 = v338;
    id v314 = v337;

    uint64_t v322 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v16, v17, v18, v19, v20);
    long long v335 = 0u;
    long long v336 = 0u;
    long long v333 = 0u;
    long long v334 = 0u;
    uint64_t v26 = objc_msgSend_nontextCandidates(v314, v21, v22, v23, v24, v25);
    uint64_t v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v26, v27, (uint64_t)&v333, (uint64_t)v348, 16, v28);
    if (v34)
    {
      uint64_t v35 = *(void *)v334;
      do
      {
        for (uint64_t i = 0; i != v34; ++i)
        {
          if (*(void *)v334 != v35) {
            objc_enumerationMutation(v26);
          }
          uint64_t v37 = *(void **)(*((void *)&v333 + 1) + 8 * i);
          uint64_t v38 = objc_msgSend_effectiveClassification(v37, v29, v30, v31, v32, v33);
          uint64_t v43 = objc_msgSend_numberWithInteger_(NSNumber, v39, v38, v40, v41, v42);
          int v48 = objc_msgSend_containsObject_(&unk_1F203DD28, v44, (uint64_t)v43, v45, v46, v47);

          if (v48)
          {
            long long v49 = (void *)MEMORY[0x1E4F1CAD0];
            long long v50 = objc_msgSend_supportingStrokeIdentifiers(v37, v29, v30, v31, v32, v33);
            uint64_t v55 = objc_msgSend_setWithArray_(v49, v51, (uint64_t)v50, v52, v53, v54);

            if (objc_msgSend_intersectsSet_(v55, v56, (uint64_t)v323, v57, v58, v59)) {
              objc_msgSend_addObject_(v322, v60, (uint64_t)v37, v61, v62, v63);
            }
          }
        }
        uint64_t v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v26, v29, (uint64_t)&v333, (uint64_t)v348, 16, v33);
      }
      while (v34);
    }

    if (!v313)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v64 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v64, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C492D000, v64, OS_LOG_TYPE_FAULT, "Context results must be non-nil", buf, 2u);
      }
    }
    uint64_t v65 = [CHTextTransformationManager alloc];
    uint64_t v71 = objc_msgSend_allObjects(v323, v66, v67, v68, v69, v70);
    uint64_t v72 = objc_alloc_init(CHTransformationParameters);
    uint64_t v311 = objc_msgSend_initWithContextStrokes_relatedNonTextStrokes_parameters_contextResults_strokeGroupingResult_strokeClassificationResult_strokeProvider_excludedStrokeTypes_extractFromRefinablePath_initialStrokes_(v65, v73, (uint64_t)v71, (uint64_t)v322, (uint64_t)v72, (uint64_t)v313, v312, v314, v315, 0, 0, *(void *)(v317 + 40));

    uint64_t v76 = objc_msgSend_reflowableTextLinesWithProgress_mergeUnacceptableLines_shouldCancel_(v311, v74, *(void *)(v317 + 48), 1, *(void *)(v317 + 56), v75);
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v77 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v83 = objc_msgSend_localizedDescription(*(void **)(v317 + 48), v78, v79, v80, v81, v82);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v341 = (uint64_t)v83;
      _os_log_impl(&dword_1C492D000, v77, OS_LOG_TYPE_DEFAULT, "CHReflowQuery query progress: %@", buf, 0xCu);
    }
    uint64_t v89 = objc_msgSend_lineWrapper(*(void **)(v317 + 32), v84, v85, v86, v87, v88);
    uint64_t v93 = objc_msgSend_reflowableLines_withLineWrapper_(CHReflowableTextLine, v90, (uint64_t)v76, (uint64_t)v89, v91, v92);

    uint64_t v98 = objc_msgSend_alignShortReflowableLines_(CHReflowableTextLine, v94, (uint64_t)v93, v95, v96, v97);

    uint64_t v99 = objc_opt_class();
    uint64_t v316 = objc_msgSend_adjustLeadingForReflowableLines_(v99, v100, (uint64_t)v98, v101, v102, v103);

    uint64_t v109 = v317;
    if (*(double *)(v317 + 72) == *MEMORY[0x1E4F1DAD8]
      && *(double *)(v317 + 80) == *(double *)(MEMORY[0x1E4F1DAD8] + 8)
      || !objc_msgSend_count(v316, v104, v105, v106, v107, v108))
    {
      id v310 = 0;
      goto LABEL_73;
    }
    uint64_t v110 = *(void *)(v317 + 32);
    double v111 = *(double *)(v317 + 72);
    double v112 = *(double *)(v317 + 80);
    id v324 = v316;
    if (!v110) {
      goto LABEL_57;
    }
    unint64_t v118 = 0;
    char v119 = 0;
    unint64_t v120 = 0;
    unint64_t v121 = 0;
    double v122 = 1.79769313e308;
LABEL_28:
    if (v118 < objc_msgSend_count(v324, v113, v114, v115, v116, v117))
    {
      uint64_t v128 = objc_msgSend_objectAtIndexedSubscript_(v324, v123, v118, v125, v126, v127);
      uint64_t v139 = objc_msgSend_tokens(v128, v129, v130, v131, v132, v133);
      for (unint64_t j = 0; ; ++j)
      {
        if (j >= objc_msgSend_count(v139, v134, v135, v136, v137, v138))
        {

          ++v118;
          goto LABEL_28;
        }
        uint64_t v145 = objc_msgSend_objectAtIndexedSubscript_(v139, v141, j, v142, v143, v144);
        objc_msgSend_bounds(v145, v146, v147, v148, v149, v150);
        v350.CGFloat x = v111;
        v350.CGFloat y = v112;
        BOOL v151 = CGRectContainsPoint(v351, v350);
        BOOL v157 = v151;
        if (v151 || (v119 & 1) == 0) {
          break;
        }
LABEL_48:
      }
      if (v151)
      {
        objc_msgSend_bounds(v145, v152, v153, v154, v155, v156);
        double v158 = vabdd_f64(CGRectGetMidY(v352), v112);
        if ((v119 & 1) == 0)
        {
          char v119 = 1;
          double v122 = v158;
LABEL_47:
          unint64_t v120 = j;
          unint64_t v121 = v118;
          goto LABEL_48;
        }
LABEL_45:
        if (v158 >= v122) {
          goto LABEL_48;
        }
        double v122 = v158;
        char v119 = v157;
        goto LABEL_47;
      }
      objc_msgSend_bounds(v145, v152, v153, v154, v155, v156);
      if (v112 >= CGRectGetMinY(v353))
      {
        objc_msgSend_bounds(v145, v159, v160, v161, v162, v163);
        double v158 = 0.0;
        if (v112 <= CGRectGetMaxY(v355)) {
          goto LABEL_40;
        }
        objc_msgSend_bounds(v145, v164, v165, v166, v167, v168);
        double v169 = v112 - CGRectGetMaxY(v356);
      }
      else
      {
        objc_msgSend_bounds(v145, v159, v160, v161, v162, v163);
        double v169 = CGRectGetMinY(v354) - v112;
      }
      double v158 = v169 + 0.0;
LABEL_40:
      objc_msgSend_bounds(v145, v164, v165, v166, v167, v168);
      if (v111 >= CGRectGetMinX(v357))
      {
        objc_msgSend_bounds(v145, v170, v171, v172, v173, v174);
        if (v111 <= CGRectGetMaxX(v359)) {
          goto LABEL_45;
        }
        objc_msgSend_bounds(v145, v176, v177, v178, v179, v180);
        double v175 = v111 - CGRectGetMaxX(v360);
      }
      else
      {
        objc_msgSend_bounds(v145, v170, v171, v172, v173, v174);
        double v175 = CGRectGetMinX(v358) - v111;
      }
      double v158 = v158 + v175;
      goto LABEL_45;
    }
    if (v122 == 1.79769313e308)
    {
LABEL_57:
      id v310 = 0;
LABEL_72:

      uint64_t v109 = v317;
LABEL_73:
      objc_msgSend_setCompletedUnitCount_(*(void **)(v109 + 48), v104, 100, v106, v107, v108);
      if (objc_msgSend_count(v316, v250, v251, v252, v253, v254)
        && ((*(uint64_t (**)(void))(*(void *)(v109 + 56) + 16))() & 1) == 0)
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        id v255 = (id)qword_1EA3C9FA0;
        if (os_log_type_enabled(v255, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v261 = objc_msgSend_count(v316, v256, v257, v258, v259, v260);
          *(_DWORD *)long long buf = 134217984;
          uint64_t v341 = v261;
          _os_log_impl(&dword_1C492D000, v255, OS_LOG_TYPE_DEFAULT, "reflowable text lines returned for query with %ld lines", buf, 0xCu);
        }

        long long v331 = 0u;
        long long v332 = 0u;
        long long v329 = 0u;
        long long v330 = 0u;
        id obj = v316;
        uint64_t v320 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v262, (uint64_t)&v329, (uint64_t)v347, 16, v263);
        if (v320)
        {
          uint64_t v319 = *(void *)v330;
          do
          {
            for (uint64_t k = 0; k != v320; ++k)
            {
              if (*(void *)v330 != v319) {
                objc_enumerationMutation(obj);
              }
              uint64_t v269 = *(void **)(*((void *)&v329 + 1) + 8 * k);
              long long v325 = 0u;
              long long v326 = 0u;
              long long v327 = 0u;
              long long v328 = 0u;
              id v270 = objc_msgSend_tokens(v269, v264, v265, v266, v267, v268);
              uint64_t v273 = objc_msgSend_countByEnumeratingWithState_objects_count_(v270, v271, (uint64_t)&v325, (uint64_t)v346, 16, v272);
              if (v273)
              {
                uint64_t v274 = *(void *)v326;
                do
                {
                  uint64_t v275 = 0;
                  do
                  {
                    if (*(void *)v326 != v274) {
                      objc_enumerationMutation(v270);
                    }
                    uint64_t v276 = *(void **)(*((void *)&v325 + 1) + 8 * v275);
                    if (qword_1EA3CA000 != -1) {
                      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
                    }
                    uint64_t v277 = (id)qword_1EA3C9FA0;
                    if (os_log_type_enabled(v277, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v283 = objc_msgSend_string(v276, v278, v279, v280, v281, v282);
                      uint64_t v289 = objc_msgSend_strokeIdentifiers(v276, v284, v285, v286, v287, v288);
                      uint64_t v295 = objc_msgSend_count(v289, v290, v291, v292, v293, v294);
                      uint64_t v301 = objc_msgSend_nonTextStrokeIdentifiers(v276, v296, v297, v298, v299, v300);
                      uint64_t v307 = objc_msgSend_count(v301, v302, v303, v304, v305, v306);
                      *(_DWORD *)long long buf = 138740483;
                      uint64_t v341 = (uint64_t)v283;
                      __int16 v342 = 2048;
                      uint64_t v343 = v295;
                      __int16 v344 = 2048;
                      uint64_t v345 = v307;
                      _os_log_impl(&dword_1C492D000, v277, OS_LOG_TYPE_DEBUG, "reflowable token result with string = %{sensitive}@, text-strokes: %ld, non-text-strokes: %ld ", buf, 0x20u);
                    }
                    ++v275;
                  }
                  while (v273 != v275);
                  uint64_t v273 = objc_msgSend_countByEnumeratingWithState_objects_count_(v270, v308, (uint64_t)&v325, (uint64_t)v346, 16, v309);
                }
                while (v273);
              }
            }
            uint64_t v320 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v264, (uint64_t)&v329, (uint64_t)v347, 16, v268);
          }
          while (v320);
        }

        uint64_t v109 = v317;
      }
      (*(void (**)(void))(*(void *)(v109 + 64) + 16))();

      uint64_t v183 = v323;
      goto LABEL_76;
    }
    if (v121 >= objc_msgSend_count(v324, v123, v124, v125, v126, v127)
      || (objc_msgSend_objectAtIndexedSubscript_(v324, v188, v121, v189, v190, v191),
          uint64_t v192 = objc_claimAutoreleasedReturnValue(),
          objc_msgSend_tokens(v192, v193, v194, v195, v196, v197),
          uint64_t v198 = objc_claimAutoreleasedReturnValue(),
          BOOL v204 = v120 < objc_msgSend_count(v198, v199, v200, v201, v202, v203),
          v198,
          v192,
          !v204))
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v209 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v209, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C492D000, v209, OS_LOG_TYPE_FAULT, "Index path for the nearest token should point to a valid token", buf, 2u);
      }
    }
    double v210 = objc_msgSend_indexPathWithIndex_(MEMORY[0x1E4F28D58], v205, v121, v206, v207, v208);
    uint64_t v215 = objc_msgSend_objectAtIndexedSubscript_(v324, v211, v121, v212, v213, v214);
    uint64_t v221 = objc_msgSend_tokens(v215, v216, v217, v218, v219, v220);
    uint64_t v226 = objc_msgSend_objectAtIndexedSubscript_(v221, v222, v120, v223, v224, v225);

    uint64_t v231 = objc_msgSend_objectAtIndexedSubscript_(v324, v227, v121, v228, v229, v230);
    BOOL v237 = objc_msgSend_writingDirection(v231, v232, v233, v234, v235, v236) == 2;

    if (v237)
    {
      objc_msgSend_bounds(v226, v238, v239, v240, v241, v242);
      if (v111 <= v247)
      {
        objc_msgSend_indexPathByAddingIndex_(v210, v243, v120 - 1, v244, v245, v246);
        uint64_t v249 = LABEL_71:;

        id v310 = v249;
        goto LABEL_72;
      }
    }
    else
    {
      objc_msgSend_bounds(v226, v238, v239, v240, v241, v242);
      if (v111 >= v248) {
        ++v120;
      }
    }
    objc_msgSend_indexPathByAddingIndex_(v210, v243, v120, v244, v245, v246);
    goto LABEL_71;
  }
  uint64_t v181 = v3;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  double v182 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v182, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C492D000, v182, OS_LOG_TYPE_FAULT, "foundStrokeIdentifiers is nil", buf, 2u);
  }

  uint64_t v183 = v181;
  objc_msgSend_setCompletedUnitCount_(*(void **)(v317 + 48), v184, 100, v185, v186, v187);
  (*(void (**)(void))(*(void *)(v317 + 64) + 16))();
LABEL_76:
}

void sub_1C4BA4224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,void *a27)
{
  _Unwind_Resume(a1);
}

id sub_1C4BA446C(uint64_t a1, void *a2, uint64_t a3, int a4, int a5, void *a6, void *a7, void *a8)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  id v15 = a2;
  id v95 = a8;
  if (!a1) {
    goto LABEL_34;
  }
  if (*(void *)(a1 + 16) == 4)
  {
    id v16 = v15;
    id v93 = v95;
    uint64_t v21 = *(void **)(a1 + 8);
    if (!v21)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v22 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C492D000, v22, OS_LOG_TYPE_FAULT, "A cached result must exist when calling _contextualTextResultsFromCachedResultUsingContextStrokes:shouldCancel:", buf, 2u);
      }

      uint64_t v21 = *(void **)(a1 + 8);
    }
    if (objc_msgSend_isValidForStrokes_(v21, v17, (uint64_t)v16, v18, v19, v20, v93))
    {
      uint64_t v26 = *(void **)(a1 + 8);
      *(void *)long long buf = 0;
      uint64_t v27 = objc_msgSend_fullyCoveredStrokeGroupsForContextStrokes_partiallyCoveredStrokeGroups_(v26, v23, (uint64_t)v16, (uint64_t)buf, v24, v25);
      uint64_t v28 = *(id *)buf;
      double v29 = *MEMORY[0x1E4F1DB30];
      double v30 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
      if (objc_opt_respondsToSelector())
      {
        objc_msgSend_drawingCanvasSize(*(void **)(a1 + 24), v31, v32, v33, v34, v35);
        double v29 = v36;
        double v30 = v37;
      }
      if (objc_msgSend_count(v28, v31, v32, v33, v34, v35) && a5)
      {
        sub_1C4BA64B0((void *)a1, v16, a3);
        id v38 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v97 = v28;
        uint64_t v42 = objc_msgSend_fullyCoveredStrokeGroupsForContextStrokes_partiallyCoveredStrokeGroups_(v38, v39, (uint64_t)v16, (uint64_t)&v97, v40, v41);
        uint64_t v43 = v97;

        uint64_t v28 = v43;
        uint64_t v27 = (void *)v42;
        objc_msgSend_contextualResultsWithFullyCoveredStrokeGroups_partiallyCoveredStrokeGroups_drawingCanvasSize_(v38, v44, v42, (uint64_t)v43, v45, v46, v29, v30);
      }
      else
      {
        id v38 = *(id *)(a1 + 8);
        objc_msgSend_contextualResultsWithFullyCoveredStrokeGroups_partiallyCoveredStrokeGroups_drawingCanvasSize_(v38, v84, (uint64_t)v27, (uint64_t)v28, v85, v86, v29, v30);
      uint64_t v71 = };
    }
    else
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v28 = (id)qword_1EA3C9FA0;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        uint64_t v77 = objc_msgSend_count(v16, v72, v73, v74, v75, v76);
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = v77;
        _os_log_impl(&dword_1C492D000, v28, OS_LOG_TYPE_ERROR, "Unable to extract a contextualTextResult from cached result. The last recognition result is not valid for some of the %ld context strokes.", buf, 0xCu);
      }
      uint64_t v71 = 0;
    }

    if (a6)
    {
      objc_msgSend_strokeGroupingResult(*(void **)(a1 + 8), v87, v88, v89, v90, v91);
      *a6 = (id)objc_claimAutoreleasedReturnValue();
    }
    if (a7)
    {
      objc_msgSend_strokeClassificationResult(*(void **)(a1 + 8), v87, v88, v89, v90, v91);
      *a7 = (id)objc_claimAutoreleasedReturnValue();
    }
    goto LABEL_41;
  }
  if (!a4)
  {
LABEL_34:
    uint64_t v71 = 0;
    goto LABEL_41;
  }
  uint64_t v47 = sub_1C4BA64B0((void *)a1, v15, a3);
  if ((objc_msgSend_isValidForStrokes_(v47, v48, (uint64_t)v15, v49, v50, v51) & 1) == 0)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    id v78 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = objc_msgSend_count(v15, v79, v80, v81, v82, v83);
      _os_log_impl(&dword_1C492D000, v78, OS_LOG_TYPE_ERROR, "Unable to extract a contextualTextResult from cached result. The onDemand recognition result is not valid for some of the %ld context strokes.", buf, 0xCu);
    }

    goto LABEL_34;
  }
  id v96 = 0;
  uint64_t v55 = objc_msgSend_fullyCoveredStrokeGroupsForContextStrokes_partiallyCoveredStrokeGroups_(v47, v52, (uint64_t)v15, (uint64_t)&v96, v53, v54);
  id v56 = v96;
  double v57 = *MEMORY[0x1E4F1DB30];
  double v58 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
  if (objc_opt_respondsToSelector())
  {
    objc_msgSend_drawingCanvasSize(*(void **)(a1 + 24), v59, v60, v61, v62, v63);
    double v57 = v64;
    double v58 = v65;
  }
  uint64_t v71 = objc_msgSend_contextualResultsWithFullyCoveredStrokeGroups_partiallyCoveredStrokeGroups_drawingCanvasSize_(v47, v59, (uint64_t)v55, (uint64_t)v56, v62, v63, v57, v58);
  if (a6)
  {
    objc_msgSend_strokeGroupingResult(v47, v66, v67, v68, v69, v70);
    *a6 = (id)objc_claimAutoreleasedReturnValue();
  }
  if (a7)
  {
    objc_msgSend_strokeClassificationResult(v47, v66, v67, v68, v69, v70);
    *a7 = (id)objc_claimAutoreleasedReturnValue();
  }

LABEL_41:
  return v71;
}

void sub_1C4BA4920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA4DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

id sub_1C4BA4EE8(void **a1, void *a2)
{
  uint64_t v168 = *MEMORY[0x1E4F143B8];
  id v152 = a2;
  uint64_t v8 = objc_msgSend_strokeGroupingResult(a1[1], v3, v4, v5, v6, v7);
  uint64_t v14 = objc_msgSend_strokeGroupOrdering(a1, v9, v10, v11, v12, v13);
  uint64_t v18 = objc_msgSend_strokeGroupsSortedBy_textGroupsOnly_(v8, v15, v14, 1, v16, v17);

  uint64_t v153 = (void *)v18;
  uint64_t v24 = objc_msgSend_strokeGroupingResult(a1[1], v19, v20, v21, v22, v23);
  double v30 = objc_msgSend_textStrokeGroupClusters(v24, v25, v26, v27, v28, v29);

  uint64_t v156 = a1;
  uint64_t v31 = objc_opt_class();
  id v165 = 0;
  uint64_t v154 = objc_msgSend_strokeIdentifiersInFullContextForStrokeIdentifiers_sortedStrokeGroups_clusteredStrokeGroups_unusedStrokeIdentifiers_(v31, v32, (uint64_t)v152, v18, (uint64_t)v30, (uint64_t)&v165);
  id v155 = v165;
  double v37 = objc_msgSend_setWithSet_(MEMORY[0x1E4F1CA80], v33, (uint64_t)v154, v34, v35, v36);
  if (objc_msgSend_count(v155, v38, v39, v40, v41, v42))
  {
    int v48 = objc_msgSend_strokeGroupingResult(v156[1], v43, v44, v45, v46, v47);
    uint64_t v54 = objc_msgSend_strokeGroupOrdering(v156, v49, v50, v51, v52, v53);
    double v58 = objc_msgSend_strokeGroupsSortedBy_textGroupsOnly_(v48, v55, v54, 0, v56, v57);

    long long v163 = 0u;
    long long v164 = 0u;
    long long v161 = 0u;
    long long v162 = 0u;
    id v59 = v155;
    uint64_t v62 = objc_msgSend_countByEnumeratingWithState_objects_count_(v59, v60, (uint64_t)&v161, (uint64_t)v167, 16, v61);
    if (v62)
    {
      uint64_t v63 = *(void *)v162;
      do
      {
        for (uint64_t i = 0; i != v62; ++i)
        {
          if (*(void *)v162 != v63) {
            objc_enumerationMutation(v59);
          }
          uint64_t v65 = *(void *)(*((void *)&v161 + 1) + 8 * i);
          uint64_t v66 = objc_opt_class();
          uint64_t v70 = objc_msgSend_strokeGroupContainingStrokeIdentifier_strokeGroups_(v66, v67, v65, (uint64_t)v58, v68, v69);
          uint64_t v76 = v70;
          if (v70)
          {
            uint64_t v77 = objc_msgSend_strokeIdentifiers(v70, v71, v72, v73, v74, v75);
            uint64_t v83 = objc_msgSend_allObjects(v77, v78, v79, v80, v81, v82);
            objc_msgSend_addObjectsFromArray_(v37, v84, (uint64_t)v83, v85, v86, v87);
          }
        }
        uint64_t v62 = objc_msgSend_countByEnumeratingWithState_objects_count_(v59, v88, (uint64_t)&v161, (uint64_t)v167, 16, v89);
      }
      while (v62);
    }
  }
  uint64_t v90 = objc_msgSend_allObjects(v37, v43, v44, v45, v46, v47);
  uint64_t v94 = objc_msgSend_strokesForIdentifiers_inStrokeProvider_(CHStrokeUtilities, v91, (uint64_t)v90, (uint64_t)v156[3], v92, v93);
  objc_msgSend_boundsForStrokes_(CHStrokeUtilities, v95, (uint64_t)v94, v96, v97, v98);
  CGFloat v100 = v99;
  CGFloat v102 = v101;
  CGFloat v104 = v103;
  CGFloat v106 = v105;

  long long v159 = 0u;
  long long v160 = 0u;
  long long v157 = 0u;
  long long v158 = 0u;
  double v112 = objc_msgSend_strokeGroupingResult(v156[1], v107, v108, v109, v110, v111);
  unint64_t v118 = objc_msgSend_nontextStrokeGroups(v112, v113, v114, v115, v116, v117);

  uint64_t v126 = objc_msgSend_countByEnumeratingWithState_objects_count_(v118, v119, (uint64_t)&v157, (uint64_t)v166, 16, v120);
  if (v126)
  {
    uint64_t v127 = *(void *)v158;
    do
    {
      for (uint64_t j = 0; j != v126; ++j)
      {
        if (*(void *)v158 != v127) {
          objc_enumerationMutation(v118);
        }
        uint64_t v129 = *(void **)(*((void *)&v157 + 1) + 8 * j);
        objc_msgSend_bounds(v129, v121, v122, v123, v124, v125);
        v172.origin.CGFloat x = v100;
        v172.origin.CGFloat y = v102;
        v172.size.double width = v104;
        v172.size.double height = v106;
        CGRect v171 = CGRectIntersection(v170, v172);
        double width = v171.size.width;
        double height = v171.size.height;
        if (!CGRectIsNull(v171))
        {
          objc_msgSend_bounds(v129, v121, v122, v123, v124, v125);
          double v133 = v132;
          objc_msgSend_bounds(v129, v134, v135, v136, v137, v138);
          if (width * height / (v133 * v139 + 1.0e-10) > 0.5)
          {
            uint64_t v140 = objc_msgSend_strokeIdentifiers(v129, v121, v122, v123, v124, v125);
            double v146 = objc_msgSend_allObjects(v140, v141, v142, v143, v144, v145);
            objc_msgSend_addObjectsFromArray_(v37, v147, (uint64_t)v146, v148, v149, v150);
          }
        }
      }
      uint64_t v126 = objc_msgSend_countByEnumeratingWithState_objects_count_(v118, v121, (uint64_t)&v157, (uint64_t)v166, 16, v125);
    }
    while (v126);
  }

  return v37;
}

void sub_1C4BA5330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA5908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

id sub_1C4BA5A14(void **a1, double a2, double a3)
{
  uint64_t v30 = 0;
  uint64_t v31 = &v30;
  uint64_t v32 = 0x3032000000;
  uint64_t v33 = sub_1C4B9763C;
  uint64_t v34 = sub_1C4B9764C;
  id v35 = 0;
  v29[0] = 0;
  v29[1] = v29;
  v29[2] = 0x2020000000;
  v29[3] = 0x7FEFFFFFFFFFFFFFLL;
  uint64_t v6 = objc_opt_class();
  uint64_t v12 = objc_msgSend_strokeGroupingResult(a1[1], v7, v8, v9, v10, v11);
  uint64_t v18 = objc_msgSend_strokeGroupOrdering(a1, v13, v14, v15, v16, v17);
  uint64_t v22 = objc_msgSend_strokeGroupsSortedBy_textGroupsOnly_(v12, v19, v18, 0, v20, v21);
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 3221225472;
  v28[2] = sub_1C4BA5BEC;
  v28[3] = &unk_1E64E4AF0;
  *(double *)&v28[7] = a2;
  *(double *)&v28[8] = a3;
  v28[4] = a1;
  v28[5] = v29;
  v28[6] = &v30;
  objc_msgSend_strokeGroupsContainingPoint_strokeGroups_groupProcessingBlock_(v6, v23, (uint64_t)v22, (uint64_t)v28, v24, v25, a2, a3);

  id v26 = (id)v31[5];
  _Block_object_dispose(v29, 8);
  _Block_object_dispose(&v30, 8);

  return v26;
}

void sub_1C4BA5BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_1C4BA5BEC(double *a1, void *a2)
{
  id v4 = a2;
  double v5 = a1[7];
  double v6 = a1[8];
  id v25 = v4;
  uint64_t v12 = objc_msgSend_strokeIdentifiers(v4, v7, v8, v9, v10, v11);
  uint64_t v18 = objc_msgSend_allObjects(v12, v13, v14, v15, v16, v17);
  objc_msgSend_distanceFromPoint_toStrokes_withStrokeProvider_(CHStrokeUtilities, v19, (uint64_t)v18, *(void *)(*((void *)a1 + 4) + 24), v20, v21, v5, v6);
  double v23 = v22;

  uint64_t v24 = *(void *)(*((void *)a1 + 5) + 8);
  if (v23 < *(double *)(v24 + 24))
  {
    *(double *)(v24 + 24) = v23;
    objc_storeStrong((id *)(*(void *)(*((void *)a1 + 6) + 8) + 40), a2);
  }
}

void sub_1C4BA5CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA5CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA5CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA5D0C(uint64_t a1, void *a2)
{
  uint64_t v241 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = *(void **)(*(void *)(a1 + 32) + 8);
  id v222 = v3;
  uint64_t v10 = objc_msgSend_uniqueIdentifier(v3, v5, v6, v7, v8, v9);
  uint64_t v227 = objc_msgSend_recognitionResultForStrokeGroupIdentifier_(v4, v11, v10, v12, v13, v14);
  uint64_t v20 = objc_msgSend_locales(*(void **)(*(void *)(a1 + 32) + 8), v15, v16, v17, v18, v19);
  id v25 = objc_msgSend_localesSortedByCombinedLanguageFitness_(v227, v21, (uint64_t)v20, v22, v23, v24);

  uint64_t v221 = v25;
  uint64_t v223 = objc_msgSend_firstObject(v25, v26, v27, v28, v29, v30);
  uint64_t v36 = objc_msgSend_recognitionResultsByLocale(v227, v31, v32, v33, v34, v35);
  uint64_t v41 = objc_msgSend_objectForKey_(v36, v37, (uint64_t)v223, v38, v39, v40);

  uint64_t v224 = (void *)v41;
  if (v41)
  {
    for (uint64_t i = 0; i < objc_msgSend_tokenColumnCount(v224, v42, v43, v44, v45, v46); ++i)
    {
      uint64_t v225 = objc_msgSend_tokenRowsAtColumnIndex_(v224, v47, i, v48, v49, v50);
      uint64_t v56 = objc_msgSend_transcriptionPaths(v224, v51, v52, v53, v54, v55);
      uint64_t v62 = objc_msgSend_firstObject(v56, v57, v58, v59, v60, v61);
      uint64_t v67 = objc_msgSend_indexAtPosition_(v62, v63, i, v64, v65, v66);

      uint64_t v72 = objc_msgSend_objectAtIndexedSubscript_(v225, v68, v67, v69, v70, v71);
      long long v237 = 0u;
      long long v238 = 0u;
      long long v235 = 0u;
      long long v236 = 0u;
      id v73 = v72;
      uint64_t v81 = objc_msgSend_countByEnumeratingWithState_objects_count_(v73, v74, (uint64_t)&v235, (uint64_t)v240, 16, v75);
      if (v81)
      {
        uint64_t v82 = *(void *)v236;
        do
        {
          for (uint64_t j = 0; j != v81; ++j)
          {
            if (*(void *)v236 != v82) {
              objc_enumerationMutation(v73);
            }
            uint64_t v84 = *(void **)(*((void *)&v235 + 1) + 8 * j);
            uint64_t v85 = objc_msgSend_inputStrokeIdentifiers(v227, v76, v77, v78, v79, v80);
            uint64_t v91 = objc_msgSend_strokeIndexes(v84, v86, v87, v88, v89, v90);
            uint64_t v96 = objc_msgSend_objectsAtIndexes_(v85, v92, (uint64_t)v91, v93, v94, v95);

            objc_msgSend_distanceFromPoint_toStrokes_withStrokeProvider_(CHStrokeUtilities, v97, (uint64_t)v96, *(void *)(*(void *)(a1 + 32) + 24), v98, v99, *(double *)(a1 + 56), *(double *)(a1 + 64));
            double v105 = v104;
            if (v104 < *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
            {
              uint64_t v106 = objc_msgSend_setWithArray_(MEMORY[0x1E4F1CAD0], v100, (uint64_t)v96, v101, v102, v103);
              uint64_t v107 = *(void *)(*(void *)(a1 + 48) + 8);
              uint64_t v108 = *(void **)(v107 + 40);
              *(void *)(v107 + 40) = v106;

              *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v105;
            }
          }
          uint64_t v81 = objc_msgSend_countByEnumeratingWithState_objects_count_(v73, v76, (uint64_t)&v235, (uint64_t)v240, 16, v80);
        }
        while (v81);
      }
    }
  }
  else
  {
    uint64_t v109 = objc_opt_class();
    uint64_t v115 = objc_msgSend_classification(v222, v110, v111, v112, v113, v114);
    if (objc_msgSend_isStrokeClassificationTextOrMath_(v109, v116, v115, v117, v118, v119))
    {
      uint64_t v125 = (void *)MEMORY[0x1E4F1CA48];
      uint64_t v126 = objc_msgSend_inputStrokeIdentifiers(v227, v120, v121, v122, v123, v124);
      uint64_t v132 = objc_msgSend_count(v126, v127, v128, v129, v130, v131);
      uint64_t v137 = objc_msgSend_arrayWithCapacity_(v125, v133, v132, v134, v135, v136);

      long long v233 = 0u;
      long long v234 = 0u;
      long long v231 = 0u;
      long long v232 = 0u;
      uint64_t v143 = objc_msgSend_inputStrokeIdentifiers(v227, v138, v139, v140, v141, v142);
      uint64_t v150 = objc_msgSend_countByEnumeratingWithState_objects_count_(v143, v144, (uint64_t)&v231, (uint64_t)v239, 16, v145);
      if (v150)
      {
        uint64_t v151 = *(void *)v232;
        do
        {
          for (uint64_t k = 0; k != v150; ++k)
          {
            if (*(void *)v232 != v151) {
              objc_enumerationMutation(v143);
            }
            uint64_t v153 = objc_msgSend_strokeIdentifierFromData_(*(void **)(*(void *)(a1 + 32) + 24), v146, *(void *)(*((void *)&v231 + 1) + 8 * k), v147, v148, v149);
            long long v162 = objc_msgSend_strokeForIdentifier_(*(void **)(*(void *)(a1 + 32) + 24), v154, (uint64_t)v153, v155, v156, v157);
            if (v162) {
              objc_msgSend_addObject_(v137, v158, (uint64_t)v162, v159, v160, v161);
            }
          }
          uint64_t v150 = objc_msgSend_countByEnumeratingWithState_objects_count_(v143, v146, (uint64_t)&v231, (uint64_t)v239, 16, v149);
        }
        while (v150);
      }

      long long v163 = [CHFastStrokeGroupingStrategy alloc];
      uint64_t v166 = objc_msgSend_initWithStrokeProvider_locales_clutterFilter_(v163, v164, *(void *)(*(void *)(a1 + 32) + 24), 0, 0, v165);
      CGRect v170 = v166;
      if (v166)
      {
        objc_msgSend_clustersForStrokes_shouldMakeSingleCluster_anchorPoints_(v166, v167, (uint64_t)v137, 1, 1, v169);
      }
      else
      {
        long long __p = 0;
        uint64_t v229 = 0;
        uint64_t v230 = 0;
      }
      uint64_t v193 = objc_msgSend_fastGroupingResultWithFastGroupingClusters_clusteredStrokes_(v170, v167, (uint64_t)&__p, (uint64_t)v137, v168, v169);
      uint64_t v195 = objc_msgSend_groupingResultForContextStrokes_clusteredStrokes_fastGroupingResult_point_tokenizationLevel_(v170, v194, 0, (uint64_t)v137, (uint64_t)v193, 1, *(double *)(a1 + 56), *(double *)(a1 + 64));
      double v196 = *(double *)(a1 + 56);
      double v197 = *(double *)(a1 + 64);
      uint64_t v203 = objc_msgSend_allObjects(v195, v198, v199, v200, v201, v202);
      objc_msgSend_distanceFromPoint_toStrokes_withStrokeProvider_(CHStrokeUtilities, v204, (uint64_t)v203, *(void *)(*(void *)(a1 + 32) + 24), v205, v206, v196, v197);
      double v208 = v207;

      if (v208 < *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
      {
        uint64_t v214 = objc_msgSend_strokeIdentifiers(v222, v209, v210, v211, v212, v213);
        uint64_t v215 = *(void *)(*(void *)(a1 + 48) + 8);
        id v216 = *(void **)(v215 + 40);
        *(void *)(v215 + 40) = v214;

        *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v208;
      }

      uint64_t v217 = __p;
      if (__p)
      {
        uint64_t v218 = __p;
        if (v229 != __p)
        {
          uint64_t v219 = (uint64_t)v229 - 32;
          do
          {
            uint64_t v220 = (void *)(v219 - 40);
            sub_1C4999C7C(v219, *(void **)(v219 + 8));
            sub_1C494AC4C(v219 - 40, *(void **)(v219 - 32));
            v219 -= 72;
          }
          while (v220 != v217);
          uint64_t v218 = __p;
        }
        uint64_t v229 = v217;
        operator delete(v218);
      }
    }
    else
    {
      double v171 = *(double *)(a1 + 56);
      double v172 = *(double *)(a1 + 64);
      uint64_t v173 = objc_msgSend_strokeIdentifiers(v222, v120, v121, v122, v123, v124);
      uint64_t v179 = objc_msgSend_allObjects(v173, v174, v175, v176, v177, v178);
      objc_msgSend_distanceFromPoint_toStrokes_withStrokeProvider_(CHStrokeUtilities, v180, (uint64_t)v179, *(void *)(*(void *)(a1 + 32) + 24), v181, v182, v171, v172);
      double v184 = v183;

      if (v184 < *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
      {
        uint64_t v190 = objc_msgSend_strokeIdentifiers(v222, v185, v186, v187, v188, v189);
        uint64_t v191 = *(void *)(*(void *)(a1 + 48) + 8);
        uint64_t v192 = *(void **)(v191 + 40);
        *(void *)(v191 + 40) = v190;

        *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v184;
      }
    }
  }
}

void sub_1C4BA6310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

id sub_1C4BA64B0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  uint64_t v11 = objc_msgSend_dataSource(a1, v6, v7, v8, v9, v10);
  uint64_t v17 = objc_msgSend_strokeProviderSnapshot(v11, v12, v13, v14, v15, v16);
  unsigned int v23 = objc_msgSend_strokeGroupingOnly(a1, v18, v19, v20, v21, v22);
  uint64_t v24 = sub_1C4B9A6BC((uint64_t)a1, v17, a3, 1, v23, v5, 0, 0);
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  id v25 = (id)qword_1EA3C9FA0;
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v31 = objc_msgSend_count(v5, v26, v27, v28, v29, v30);
    double v37 = objc_msgSend_strokeProviderVersion(v17, v32, v33, v34, v35, v36);
    int v57 = 134218498;
    uint64_t v58 = a1;
    __int16 v59 = 2048;
    uint64_t v60 = v31;
    __int16 v61 = 2112;
    uint64_t v62 = v37;
    _os_log_impl(&dword_1C492D000, v25, OS_LOG_TYPE_DEFAULT, "RecognitionSession %p starting high responsiveness task with %ld strokes for version: %@.", (uint8_t *)&v57, 0x20u);
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v38 = (id)qword_1EA3C9FC8;
  os_signpost_id_t v39 = os_signpost_id_generate(v38);

  if (qword_1EA3CA000 == -1)
  {
    uint64_t v40 = (id)qword_1EA3C9FC8;
    unint64_t v41 = v39 - 1;
    if (v39 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_11;
    }
  }
  else
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v40 = (id)qword_1EA3C9FC8;
    unint64_t v41 = v39 - 1;
    if (v39 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_11;
    }
  }
  if (os_signpost_enabled(v40))
  {
    LOWORD(v57) = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v40, OS_SIGNPOST_INTERVAL_BEGIN, v39, "CHRecognitionSessionOnDemandTask", "", (uint8_t *)&v57, 2u);
  }
LABEL_11:

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v42 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v57) = 0;
    _os_log_impl(&dword_1C492D000, v42, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHRecognitionSessionOnDemandTask\"", (uint8_t *)&v57, 2u);
  }

  objc_msgSend_main(v24, v43, v44, v45, v46, v47);
  if (qword_1EA3CA000 == -1)
  {
    uint64_t v48 = (id)qword_1EA3C9FC8;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_19;
    }
  }
  else
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v48 = (id)qword_1EA3C9FC8;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_19;
    }
  }
  if (os_signpost_enabled(v48))
  {
    LOWORD(v57) = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v48, OS_SIGNPOST_INTERVAL_END, v39, "CHRecognitionSessionOnDemandTask", "", (uint8_t *)&v57, 2u);
  }
LABEL_19:

  if (qword_1EA3CA000 == -1)
  {
    uint64_t v49 = (id)qword_1EA3C9F90[0];
    if (!os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  uint64_t v49 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
  {
LABEL_21:
    LOWORD(v57) = 0;
    _os_log_impl(&dword_1C492D000, v49, OS_LOG_TYPE_DEFAULT, "END \"CHRecognitionSessionOnDemandTask\"", (uint8_t *)&v57, 2u);
  }
LABEL_22:

  uint64_t v55 = objc_msgSend_outputResult(v24, v50, v51, v52, v53, v54);

  return v55;
}

void sub_1C4BA68C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA6A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA6A7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA6A90(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v342 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2 && (*(unsigned int (**)(void))(v2 + 16))())
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    id v3 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C492D000, v3, OS_LOG_TYPE_DEFAULT, "ContextLookup Query result for location cancelled.", buf, 2u);
    }
    goto LABEL_73;
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  id v4 = (id)qword_1EA3C9FA0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = objc_msgSend_attachments(*(void **)(*(void *)(v1 + 32) + 48), v5, v6, v7, v8, v9);
    *(_DWORD *)long long buf = 134217984;
    uint64_t v335 = objc_msgSend_count(v10, v11, v12, v13, v14, v15);
    _os_log_impl(&dword_1C492D000, v4, OS_LOG_TYPE_DEFAULT, "ContextLookup Query for location starting in document with %ld attachments.", buf, 0xCu);
  }
  objc_msgSend_becomeCurrentWithPendingUnitCount_(*(void **)(v1 + 40), v16, 100, v17, v18, v19);
  id v25 = objc_msgSend_strokeGroupingResult(*(void **)(*(void *)(v1 + 32) + 8), v20, v21, v22, v23, v24);
  double v26 = *(double *)(v1 + 64);
  double v27 = *(double *)(v1 + 72);
  id v329 = 0;
  id v328 = 0;
  uint64_t v285 = objc_msgSend_textStrokeGroupClustersAtPosition_closestAbove_closestBelow_(v25, v28, (uint64_t)&v329, (uint64_t)&v328, v29, v30, v26, v27);
  uint64_t v283 = v329;
  id v282 = v328;

  if (objc_msgSend_count(v285, v31, v32, v33, v34, v35))
  {
    id v284 = v285;
  }
  else
  {
    objc_msgSend_array(MEMORY[0x1E4F1CA48], v36, v37, v38, v39, v40);
    id v284 = (id)objc_claimAutoreleasedReturnValue();
    if (v283) {
      objc_msgSend_addObject_(v284, v41, (uint64_t)v283, v42, v43, v44);
    }
    if (v282) {
      objc_msgSend_addObject_(v284, v41, (uint64_t)v282, v42, v43, v44);
    }
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v45 = (id)qword_1EA3C9FA0;
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v52 = *(void *)(v1 + 64);
    uint64_t v51 = *(void **)(v1 + 72);
    uint64_t v53 = objc_msgSend_count(v284, v46, v47, v48, v49, v50);
    __int16 v59 = objc_msgSend_strokeGroupingResult(*(void **)(*(void *)(v1 + 32) + 8), v54, v55, v56, v57, v58);
    uint64_t v65 = objc_msgSend_textStrokeGroupClusters(v59, v60, v61, v62, v63, v64);
    uint64_t v71 = objc_msgSend_count(v65, v66, v67, v68, v69, v70);
    *(_DWORD *)long long buf = 134218752;
    uint64_t v335 = v52;
    __int16 v336 = 2048;
    id v337 = v51;
    __int16 v338 = 2048;
    uint64_t v339 = v53;
    __int16 v340 = 2048;
    uint64_t v341 = v71;
    _os_log_impl(&dword_1C492D000, v45, OS_LOG_TYPE_DEFAULT, "ContextLookup Query result for location %.2f,%.2f, analyzing contents from %ld text clusters from %ld clusters in the document.", buf, 0x2Au);
  }
  uint64_t v300 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v72, v73, v74, v75, v76);
  uint64_t v289 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v77, v78, v79, v80, v81);
  long long v326 = 0u;
  long long v327 = 0u;
  long long v324 = 0u;
  long long v325 = 0u;
  id obj = v284;
  uint64_t v287 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v82, (uint64_t)&v324, (uint64_t)v333, 16, v83);
  if (v287)
  {
    uint64_t v288 = *(void *)v325;
    uint64_t v297 = v1;
    do
    {
      uint64_t v296 = 0;
      do
      {
        if (*(void *)v325 != v288) {
          objc_enumerationMutation(obj);
        }
        uint64_t v89 = *(void **)(*((void *)&v324 + 1) + 8 * v296);
        uint64_t v303 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v84, v85, v86, v87, v88);
        long long v322 = 0u;
        long long v323 = 0u;
        long long v320 = 0u;
        long long v321 = 0u;
        id v90 = v89;
        uint64_t v98 = objc_msgSend_countByEnumeratingWithState_objects_count_(v90, v91, (uint64_t)&v320, (uint64_t)v332, 16, v92);
        if (v98)
        {
          uint64_t v99 = *(void *)v321;
          do
          {
            for (uint64_t i = 0; i != v98; ++i)
            {
              if (*(void *)v321 != v99) {
                objc_enumerationMutation(v90);
              }
              uint64_t v101 = objc_msgSend_strokeIdentifiers(*(void **)(*((void *)&v320 + 1) + 8 * i), v93, v94, v95, v96, v97);
              uint64_t v107 = objc_msgSend_allObjects(v101, v102, v103, v104, v105, v106);
              objc_msgSend_addObjectsFromArray_(v303, v108, (uint64_t)v107, v109, v110, v111);
            }
            uint64_t v98 = objc_msgSend_countByEnumeratingWithState_objects_count_(v90, v93, (uint64_t)&v320, (uint64_t)v332, 16, v97);
          }
          while (v98);
        }

        uint64_t v112 = *(void *)(v1 + 32);
        id v318 = 0;
        id v319 = 0;
        uint64_t v113 = sub_1C4BA446C(v112, v303, 0, 1, 0, &v319, &v318, *(void **)(v1 + 48));
        id v290 = v319;
        id v302 = v318;
        uint64_t v291 = (void *)v113;
        if (!v113)
        {
          if (qword_1EA3CA000 != -1) {
            dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
          }
          uint64_t v119 = (id)qword_1EA3C9F90[0];
          if (os_log_type_enabled(v119, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1C492D000, v119, OS_LOG_TYPE_FAULT, "Context results must be non-nil", buf, 2u);
          }
        }
        uint64_t v292 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v114, v115, v116, v117, v118);
        uint64_t v293 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v120, v121, v122, v123, v124);
        uint64_t v130 = objc_msgSend_strokeClassificationsByStrokeIdentifier(v302, v125, v126, v127, v128, v129);
        v313[0] = MEMORY[0x1E4F143A8];
        v313[1] = 3221225472;
        v313[2] = sub_1C4BA77F8;
        v313[3] = &unk_1E64E4B18;
        id v131 = v289;
        uint64_t v132 = *(void *)(v1 + 32);
        id v314 = v131;
        uint64_t v315 = v132;
        id v294 = v292;
        id v316 = v294;
        id v295 = v293;
        id v317 = v295;
        objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v130, v133, (uint64_t)v313, v134, v135, v136);

        uint64_t v301 = objc_msgSend_strokeIdentifiersByStrokeClusterPolygonsFromStrokeBounds_strokes_(CHStrokeUtilities, v137, (uint64_t)v294, (uint64_t)v295, v138, v139);
        objc_msgSend_addObjectsFromArray_(v300, v140, (uint64_t)v291, v141, v142, v143);
        long long v311 = 0u;
        long long v312 = 0u;
        long long v309 = 0u;
        long long v310 = 0u;
        id v299 = v291;
        double v146 = 0;
        uint64_t v147 = objc_msgSend_countByEnumeratingWithState_objects_count_(v299, v144, (uint64_t)&v309, (uint64_t)v331, 16, v145);
        if (v147)
        {
          uint64_t v148 = *(void *)v310;
          uint64_t v298 = *(void *)v310;
          do
          {
            for (uint64_t j = 0; j != v147; ++j)
            {
              if (*(void *)v310 != v148) {
                objc_enumerationMutation(v299);
              }
              uint64_t v150 = *(void **)(*((void *)&v309 + 1) + 8 * j);
              uint64_t v151 = *(void **)(v1 + 32);
              id v308 = 0;
              int v152 = sub_1C4BA79A0(v151, v150, v301, v302, &v308);
              id v158 = v308;
              if (v152)
              {
                if (!v146)
                {
                  double v146 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v153, v154, v155, v156, v157);
                }
                uint64_t v159 = objc_msgSend_textResult(v150, v153, v154, v155, v156, v157);
                objc_msgSend_inputStrokeIdentifiers(v159, v160, v161, v162, v163, v164);
                id v165 = (id)objc_claimAutoreleasedReturnValue();

                objc_msgSend_addObjectsFromArray_(v146, v166, (uint64_t)v165, v167, v168, v169);
                objc_msgSend_removeObject_(v300, v170, (uint64_t)v150, v171, v172, v173);
              }
              else
              {
                uint64_t v174 = objc_opt_class();
                uint64_t v180 = objc_msgSend_strokeGroup(v150, v175, v176, v177, v178, v179);
                uint64_t v186 = objc_msgSend_classification(v180, v181, v182, v183, v184, v185);
                LODWORD(v174) = objc_msgSend_isStrokeClassificationMath_(v174, v187, v186, v188, v189, v190);

                if (v174)
                {
                  if (!v146)
                  {
                    double v146 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v191, v192, v193, v194, v195);
                  }
                  double v196 = objc_msgSend_strokeGroup(v150, v191, v192, v193, v194, v195);
                  objc_msgSend_strokeIdentifiers(v196, v197, v198, v199, v200, v201);
                  id v165 = (id)objc_claimAutoreleasedReturnValue();

                  double v207 = objc_msgSend_allObjects(v165, v202, v203, v204, v205, v206);
                  objc_msgSend_addObjectsFromArray_(v146, v208, (uint64_t)v207, v209, v210, v211);

                  objc_msgSend_removeObject_(v300, v212, (uint64_t)v150, v213, v214, v215);
                }
                else
                {
                  if (!objc_msgSend_count(v158, v191, v192, v193, v194, v195)) {
                    goto LABEL_64;
                  }
                  long long v306 = 0u;
                  long long v307 = 0u;
                  long long v304 = 0u;
                  long long v305 = 0u;
                  id v165 = v158;
                  uint64_t v222 = objc_msgSend_countByEnumeratingWithState_objects_count_(v165, v216, (uint64_t)&v304, (uint64_t)v330, 16, v217);
                  if (v222)
                  {
                    uint64_t v223 = *(void *)v305;
                    do
                    {
                      for (uint64_t k = 0; k != v222; ++k)
                      {
                        if (*(void *)v305 != v223) {
                          objc_enumerationMutation(v165);
                        }
                        uint64_t v225 = *(void *)(*((void *)&v304 + 1) + 8 * k);
                        if (objc_msgSend_containsObject_(v131, v218, v225, v219, v220, v221)) {
                          objc_msgSend_removeObject_(v131, v218, v225, v219, v220, v221);
                        }
                      }
                      uint64_t v222 = objc_msgSend_countByEnumeratingWithState_objects_count_(v165, v218, (uint64_t)&v304, (uint64_t)v330, 16, v221);
                    }
                    while (v222);
                    uint64_t v1 = v297;
                    uint64_t v148 = v298;
                  }
                }
              }

LABEL_64:
            }
            uint64_t v147 = objc_msgSend_countByEnumeratingWithState_objects_count_(v299, v226, (uint64_t)&v309, (uint64_t)v331, 16, v227);
          }
          while (v147);
        }

        long long v233 = objc_msgSend_allObjects(v146, v228, v229, v230, v231, v232);
        objc_msgSend_addObjectsFromArray_(v131, v234, (uint64_t)v233, v235, v236, v237);

        ++v296;
      }
      while (v296 != v287);
      uint64_t v287 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v84, (uint64_t)&v324, (uint64_t)v333, 16, v88);
    }
    while (v287);
  }

  uint64_t v243 = objc_msgSend_latestStrokeProvider(*(void **)(v1 + 32), v238, v239, v240, v241, v242);
  double v247 = objc_msgSend_strokeIdentifiersForData_withStrokeProvider_(CHStrokeUtilities, v244, (uint64_t)v289, (uint64_t)v243, v245, v246);

  double v248 = [CHContextualTextResults alloc];
  uint64_t v253 = objc_msgSend_initWithTextResults_(v248, v249, (uint64_t)v300, v250, v251, v252);
  uint64_t v259 = objc_msgSend_topTranscription(v253, v254, v255, v256, v257, v258);
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v260 = (id)qword_1EA3C9FA0;
  if (os_log_type_enabled(v260, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v266 = objc_msgSend_count(v247, v261, v262, v263, v264, v265);
    *(_DWORD *)long long buf = 134218243;
    uint64_t v335 = v266;
    __int16 v336 = 2117;
    id v337 = v259;
    _os_log_impl(&dword_1C492D000, v260, OS_LOG_TYPE_DEFAULT, "ContextLookup Query result for location: %ld non-text strokes returned, presentable text = \"%{sensitive}@\".", buf, 0x16u);
  }

  (*(void (**)(void))(*(void *)(v1 + 56) + 16))();
  objc_msgSend_resignCurrent(*(void **)(v1 + 40), v267, v268, v269, v270, v271);
  uint64_t v277 = objc_msgSend_totalUnitCount(*(void **)(v1 + 40), v272, v273, v274, v275, v276);
  objc_msgSend_setCompletedUnitCount_(*(void **)(v1 + 40), v278, v277, v279, v280, v281);

  id v3 = v283;
LABEL_73:
}

void sub_1C4BA753C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA77F8(uint64_t a1, void *a2, void *a3)
{
  id v58 = a2;
  id v5 = a3;
  uint64_t v11 = objc_msgSend_integerValue(v5, v6, v7, v8, v9, v10);
  char isStrokeClassificationTextOrMath = objc_msgSend_isStrokeClassificationTextOrMath_(CHStrokeUtilities, v12, v11, v13, v14, v15);
  if (v11 == 6) {
    char v21 = 1;
  }
  else {
    char v21 = isStrokeClassificationTextOrMath;
  }
  if ((v21 & 1) == 0 && (objc_msgSend_containsObject_(*(void **)(a1 + 32), v17, (uint64_t)v58, v18, v19, v20) & 1) == 0)
  {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v22, (uint64_t)v58, v23, v24, v25);
    double v26 = objc_opt_class();
    uint64_t v32 = objc_msgSend_latestStrokeProvider(*(void **)(a1 + 40), v27, v28, v29, v30, v31);
    uint64_t v36 = objc_msgSend_strokeForIdentifier_inStrokeProvider_(v26, v33, (uint64_t)v58, (uint64_t)v32, v34, v35);

    uint64_t v37 = *(void **)(a1 + 48);
    uint64_t v38 = (void *)MEMORY[0x1E4F29238];
    objc_msgSend_bounds(v36, v39, v40, v41, v42, v43);
    uint64_t v49 = objc_msgSend_ch_valueWithCGRect_(v38, v44, v45, v46, v47, v48);
    objc_msgSend_addObject_(v37, v50, (uint64_t)v49, v51, v52, v53);

    objc_msgSend_addObject_(*(void **)(a1 + 56), v54, (uint64_t)v36, v55, v56, v57);
  }
}

void sub_1C4BA7918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA7938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA7954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA796C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA7988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BA79A0(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v227 = *MEMORY[0x1E4F143B8];
  id v203 = a2;
  id v8 = a3;
  id v14 = a4;
  uint64_t v206 = v8;
  if (!a1)
  {
    uint64_t v196 = 0;
    goto LABEL_47;
  }
  uint64_t v201 = objc_msgSend_allKeys(v8, v9, v10, v11, v12, v13);
  uint64_t v20 = objc_msgSend_textResult(v203, v15, v16, v17, v18, v19);
  double v26 = objc_msgSend_inputStrokeIdentifiers(v20, v21, v22, v23, v24, v25);
  uint64_t v32 = objc_msgSend_latestStrokeProvider(a1, v27, v28, v29, v30, v31);
  uint64_t v36 = objc_msgSend_strokesForIdentifiers_inStrokeProvider_(CHStrokeUtilities, v33, (uint64_t)v26, (uint64_t)v32, v34, v35);

  id v223 = 0;
  uint64_t v199 = (void *)v36;
  uint64_t v39 = objc_msgSend_strokesIntersectingPolygons_fromStrokes_intersectedPolygons_(CHStrokeUtilities, v37, (uint64_t)v201, v36, (uint64_t)&v223, v38);
  id v202 = v223;
  uint64_t v209 = v39;
  uint64_t v200 = objc_msgSend_count(v39, v40, v41, v42, v43, v44);
  objc_msgSend_set(MEMORY[0x1E4F1CA80], v45, v46, v47, v48, v49);
  id v205 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_count(v202, v50, v51, v52, v53, v54))
  {
    long long v221 = 0u;
    long long v222 = 0u;
    long long v219 = 0u;
    long long v220 = 0u;
    id obj = v202;
    uint64_t v62 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v60, (uint64_t)&v219, (uint64_t)v226, 16, v61);
    if (v62)
    {
      char v204 = 0;
      uint64_t v208 = *(void *)v220;
      do
      {
        uint64_t v210 = v62;
        for (uint64_t i = 0; i != v210; ++i)
        {
          if (*(void *)v220 != v208) {
            objc_enumerationMutation(obj);
          }
          uint64_t v67 = *(void **)(*((void *)&v219 + 1) + 8 * i);
          long long v215 = 0u;
          long long v216 = 0u;
          long long v217 = 0u;
          long long v218 = 0u;
          id v68 = v209;
          uint64_t v71 = 0;
          uint64_t v77 = objc_msgSend_countByEnumeratingWithState_objects_count_(v68, v69, (uint64_t)&v215, (uint64_t)v225, 16, v70);
          if (v77)
          {
            uint64_t v78 = *(void *)v216;
            do
            {
              for (uint64_t j = 0; j != v77; ++j)
              {
                if (*(void *)v216 != v78) {
                  objc_enumerationMutation(v68);
                }
                uint64_t v80 = *(void **)(*((void *)&v215 + 1) + 8 * j);
                uint64_t v81 = objc_msgSend_polygonDrawing(v67, v72, v73, v74, v75, v76);
                objc_msgSend_bounds(v81, v82, v83, v84, v85, v86);
                CGFloat v88 = v87;
                CGFloat v90 = v89;
                CGFloat v92 = v91;
                CGFloat v94 = v93;
                objc_msgSend_bounds(v80, v95, v96, v97, v98, v99);
                v229.origin.CGFloat x = v100;
                v229.origin.CGFloat y = v101;
                v229.size.double width = v102;
                v229.size.double height = v103;
                v228.origin.CGFloat x = v88;
                v228.origin.CGFloat y = v90;
                v228.size.double width = v92;
                v228.size.double height = v94;
                LODWORD(v80) = CGRectContainsRect(v228, v229);

                v71 += v80;
              }
              uint64_t v77 = objc_msgSend_countByEnumeratingWithState_objects_count_(v68, v72, (uint64_t)&v215, (uint64_t)v225, 16, v76);
            }
            while (v77);
          }

          double v66 = (double)v71;
          if ((double)v71 >= (float)((float)v200 * 0.85))
          {
            uint64_t v106 = objc_msgSend_objectForKeyedSubscript_(v206, v64, (uint64_t)v67, v104, v105, v65, v66);
            long long v213 = 0u;
            long long v214 = 0u;
            long long v211 = 0u;
            long long v212 = 0u;
            id v107 = v106;
            uint64_t v110 = 0;
            uint64_t v116 = objc_msgSend_countByEnumeratingWithState_objects_count_(v107, v108, (uint64_t)&v211, (uint64_t)v224, 16, v109);
            if (v116)
            {
              uint64_t v117 = *(void *)v212;
              do
              {
                for (uint64_t k = 0; k != v116; ++k)
                {
                  if (*(void *)v212 != v117) {
                    objc_enumerationMutation(v107);
                  }
                  uint64_t v119 = *(void *)(*((void *)&v211 + 1) + 8 * k);
                  uint64_t v120 = objc_msgSend_strokeClassificationsByStrokeIdentifier(v14, v111, v112, v113, v114, v115);
                  uint64_t v125 = objc_msgSend_objectForKeyedSubscript_(v120, v121, v119, v122, v123, v124);
                  uint64_t v131 = objc_msgSend_integerValue(v125, v126, v127, v128, v129, v130);

                  if (v131 == 7) {
                    ++v110;
                  }
                }
                uint64_t v116 = objc_msgSend_countByEnumeratingWithState_objects_count_(v107, v111, (uint64_t)&v211, (uint64_t)v224, 16, v115);
              }
              while (v116);
            }

            if ((double)v110 >= (float)((float)(unint64_t)objc_msgSend_count(v107, v132, v133, v134, v135, v136)
                                       * 0.6))
            {
              uint64_t v142 = objc_msgSend_allObjects(v107, v137, v138, v139, v140, v141, (double)v110);
              objc_msgSend_addObjectsFromArray_(v205, v143, (uint64_t)v142, v144, v145, v146);

              char v204 = 1;
            }
          }
        }
        uint64_t v62 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v64, (uint64_t)&v219, (uint64_t)v226, 16, v65, v66);
      }
      while (v62);

      if (v204) {
        goto LABEL_35;
      }
    }
    else
    {
    }
  }
  if ((double)v200 / (double)(unint64_t)objc_msgSend_count(v199, v55, v56, v57, v58, v59) >= 0.200000003
    && (objc_msgSend_isNonTextCandidateForContextLookupByStrokeClassificationResult_(v203, v55, (uint64_t)v14, v57, v58, v59) & 1) != 0)
  {
    goto LABEL_45;
  }
LABEL_35:
  double v147 = 0.0;
  if (v200 <= 0) {
    double v147 = (double)objc_msgSend_minRectangleDistanceFromStrokes_toPolygons_(CHStrokeUtilities, v55, (uint64_t)v199, (uint64_t)v201, v58, v59);
  }
  uint64_t v148 = objc_msgSend_strokeGroup(v203, v55, v56, v57, v58, v59);
  objc_msgSend_bounds(v148, v149, v150, v151, v152, v153);
  double v155 = v154;

  if (!objc_msgSend_isMathForContextLookup(v203, v156, v157, v158, v159, v160))
  {
    isNonTextCandidateTextTranscriptiouint64_t n = 0;
    if (v147 >= v155 + v155) {
      goto LABEL_42;
    }
LABEL_41:
    if ((objc_msgSend_isNonTextCandidateForContextLookup(v203, v161, v162, v163, v164, v165) | isNonTextCandidateTextTranscription)) {
      goto LABEL_45;
    }
    goto LABEL_42;
  }
  uint64_t v166 = objc_msgSend_textResult(v203, v161, v162, v163, v164, v165);
  uint64_t v172 = objc_msgSend_topTranscription(v166, v167, v168, v169, v170, v171);
  isNonTextCandidateTextTranscriptiouint64_t n = objc_msgSend_isNonTextCandidateTextTranscription_(CHTokenizedMathResult, v173, (uint64_t)v172, v174, v175, v176);

  if (v147 < v155 + v155) {
    goto LABEL_41;
  }
LABEL_42:
  uint64_t v178 = objc_msgSend_textResult(v203, v161, v162, v163, v164, v165);
  if (objc_msgSend_shouldFilterSingleCharacterResult(v178, v179, v180, v181, v182, v183))
  {
  }
  else
  {
    uint64_t v189 = objc_msgSend_textResult(v203, v184, v185, v186, v187, v188);
    char shouldFilterSingleTokenResult = objc_msgSend_shouldFilterSingleTokenResult(v189, v190, v191, v192, v193, v194);

    if ((shouldFilterSingleTokenResult & 1) == 0)
    {
      uint64_t v196 = 0;
      if (a5) {
        *a5 = v205;
      }
      goto LABEL_46;
    }
  }
LABEL_45:
  uint64_t v196 = 1;
LABEL_46:

LABEL_47:
  return v196;
}

void sub_1C4BA7FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA8D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,void *a21,_Unwind_Exception *exception_object,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  _Unwind_Resume(a1);
}

void sub_1C4BA906C(uint64_t a1, void *a2, void *a3, const CGPath *a4, void *a5, void *a6)
{
  uint64_t v1060 = *MEMORY[0x1E4F143B8];
  id v945 = a2;
  id v953 = a3;
  v944 = a5;
  id v951 = a6;
  v988 = (void **)a1;
  if (!a1) {
    goto LABEL_167;
  }
  v993 = objc_msgSend_setWithArray_(MEMORY[0x1E4F1CA80], v10, (uint64_t)v953, v11, v12, v13);
  v949 = objc_msgSend_array(MEMORY[0x1E4F1C978], v14, v15, v16, v17, v18);
  uint64_t v24 = off_1E64E0000;
  if (objc_msgSend_count(v953, v19, v20, v21, v22, v23))
  {
    id v999 = 0;
    id v1000 = 0;
    v964 = sub_1C4BA446C(a1, v953, 0, 1, 0, &v1000, &v999, v951);
    id v960 = v1000;
    id v990 = v999;
    v973 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v25, v26, v27, v28, v29);
    v968 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v30, v31, v32, v33, v34);
    v970 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v35, v36, v37, v38, v39);
    for (unint64_t i = 0; i < objc_msgSend_count(v953, v40, v41, v42, v43, v44); ++i)
    {
      uint64_t v50 = objc_msgSend_objectAtIndexedSubscript_(v953, v46, i, v47, v48, v49);
      uint64_t v56 = objc_msgSend_strokeClassificationsByStrokeIdentifier(v990, v51, v52, v53, v54, v55);
      uint64_t v61 = objc_msgSend_objectForKey_(v56, v57, (uint64_t)v50, v58, v59, v60);
      uint64_t v67 = objc_msgSend_integerValue(v61, v62, v63, v64, v65, v66);

      char isStrokeClassificationTextOrMath = objc_msgSend_isStrokeClassificationTextOrMath_(CHStrokeUtilities, v68, v67, v69, v70, v71);
      if (v67 == 6) {
        char v77 = 1;
      }
      else {
        char v77 = isStrokeClassificationTextOrMath;
      }
      if ((v77 & 1) == 0)
      {
        objc_msgSend_addIndex_(v973, v73, i, v74, v75, v76);
        uint64_t v78 = objc_opt_class();
        uint64_t v84 = objc_msgSend_latestStrokeProvider(v988, v79, v80, v81, v82, v83);
        CGFloat v88 = objc_msgSend_strokeForIdentifier_inStrokeProvider_(v78, v85, (uint64_t)v50, (uint64_t)v84, v86, v87);

        double v89 = (void *)MEMORY[0x1E4F29238];
        objc_msgSend_bounds(v88, v90, v91, v92, v93, v94);
        CGFloat v100 = objc_msgSend_ch_valueWithCGRect_(v89, v95, v96, v97, v98, v99);
        objc_msgSend_addObject_(v968, v101, (uint64_t)v100, v102, v103, v104);

        objc_msgSend_addObject_(v970, v105, (uint64_t)v88, v106, v107, v108);
      }

      uint64_t v24 = off_1E64E0000;
    }
    v981 = objc_msgSend_strokeIdentifiersByStrokeClusterPolygonsFromStrokeBounds_strokes_(v24[182], v46, (uint64_t)v968, (uint64_t)v970, v48, v49);
    uint64_t v966 = objc_msgSend_allKeys(v981, v109, v110, v111, v112, v113);

    uint64_t v114 = (void *)MEMORY[0x1E4F1CA48];
    uint64_t v120 = objc_msgSend_count(v964, v115, v116, v117, v118, v119);
    uint64_t v125 = objc_msgSend_arrayWithCapacity_(v114, v121, v120, v122, v123, v124);
    long long v997 = 0u;
    long long v998 = 0u;
    long long v995 = 0u;
    long long v996 = 0u;
    id obj = v964;
    v955 = (void *)v125;
    uint64_t v128 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v126, (uint64_t)&v995, (uint64_t)v1039, 16, v127);
    if (v128)
    {
      uint64_t v959 = 0;
      v984 = 0;
      v972 = 0;
      uint64_t v978 = *(void *)v996;
      do
      {
        id v985 = (id)v128;
        for (uint64_t j = 0; j != v985; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v996 != v978) {
            objc_enumerationMutation(obj);
          }
          uint64_t v135 = *(void **)(*((void *)&v995 + 1) + 8 * (void)j);
          uint64_t v136 = objc_msgSend_textResult(v135, v129, v130, v131, v132, v133);
          uint64_t v142 = objc_msgSend_inputStrokeIdentifiers(v136, v137, v138, v139, v140, v141);

          id v994 = v984;
          LODWORD(v136) = sub_1C4BA79A0(v988, v135, v981, v990, &v994);
          id v143 = v994;

          v984 = v143;
          if (v136)
          {
            uint64_t v149 = v972;
            if (!v972)
            {
              uint64_t v149 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v144, v145, v146, v147, v148);
            }
            v972 = v149;
            objc_msgSend_addObjectsFromArray_(v149, v144, (uint64_t)v142, v146, v147, v148);
          }
          else
          {
            double v155 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v144, v145, v146, v147, v148);
            for (uint64_t k = 0; ; ++k)
            {
              uint64_t v157 = objc_msgSend_textResult(v135, v150, v151, v152, v153, v154);
              BOOL v163 = k < objc_msgSend_tokenColumnCount(v157, v158, v159, v160, v161, v162);

              if (!v163) {
                break;
              }
              uint64_t v169 = objc_msgSend_textResult(v135, v164, v165, v166, v167, v168);
              uint64_t v175 = objc_msgSend_tokenColumns(v169, v170, v171, v172, v173, v174);
              uint64_t v180 = objc_msgSend_objectAtIndexedSubscript_(v175, v176, k, v177, v178, v179);
              uint64_t v186 = objc_msgSend_strokeIndexes(v180, v181, v182, v183, v184, v185);

              uint64_t v187 = (void *)MEMORY[0x1E4F1CAD0];
              uint64_t v192 = objc_msgSend_objectsAtIndexes_(v142, v188, (uint64_t)v186, v189, v190, v191);
              double v197 = objc_msgSend_setWithArray_(v187, v193, (uint64_t)v192, v194, v195, v196);

              if (objc_msgSend_intersectsSet_(v197, v198, (uint64_t)v993, v199, v200, v201)) {
                objc_msgSend_addIndex_(v155, v202, k, v203, v204, v205);
              }
            }
            if (objc_msgSend_count(v155, v164, v165, v166, v167, v168))
            {
              unint64_t v211 = objc_msgSend_count(v155, v206, v207, v208, v209, v210);
              long long v217 = objc_msgSend_textResult(v135, v212, v213, v214, v215, v216);
              LODWORD(v211) = v211 < objc_msgSend_tokenColumnCount(v217, v218, v219, v220, v221, v222);

              if (v211)
              {
                Indedouble x = objc_msgSend_firstIndex(v155, v223, v224, v225, v226, v227);
                uint64_t v234 = objc_msgSend_lastIndex(v155, v229, v230, v231, v232, v233);
                uint64_t v240 = objc_msgSend_firstIndex(v155, v235, v236, v237, v238, v239);
                uint64_t v246 = objc_msgSend_textResult(v135, v241, v242, v243, v244, v245);
                uint64_t v247 = v234 - v240 + 1;
                v975 = objc_msgSend_subResultWithColumnRange_(v246, v248, Index, v247, v249, v250);

                uint64_t v256 = objc_msgSend_topTranscription(v975, v251, v252, v253, v254, v255);
                uint64_t v262 = objc_msgSend_length(v256, v257, v258, v259, v260, v261);
                uint64_t v268 = objc_msgSend_textResult(v135, v263, v264, v265, v266, v267);
                uint64_t v274 = objc_msgSend_topTranscription(v268, v269, v270, v271, v272, v273);
                LODWORD(v262) = (double)(unint64_t)objc_msgSend_length(v274, v275, v276, v277, v278, v279) * 0.6 > (double)(unint64_t)v262;

                if (v262)
                {
                  uint64_t v285 = objc_msgSend_textResult(v135, v280, v281, v282, v283, v284);
                  uint64_t v291 = objc_msgSend_inputStrokeIdentifiers(v285, v286, v287, v288, v289, v290);
                  uint64_t v297 = objc_msgSend_textResult(v135, v292, v293, v294, v295, v296);
                  uint64_t v301 = objc_msgSend_strokeIndexesForColumnsInRange_(v297, v298, Index, v247, v299, v300);
                  long long v306 = objc_msgSend_objectsAtIndexes_(v291, v302, (uint64_t)v301, v303, v304, v305);
                  objc_msgSend_setInputStrokeIdentifiers_(v975, v307, (uint64_t)v306, v308, v309, v310);

                  long long v311 = [CHContextualTextResult alloc];
                  id v317 = objc_msgSend_terminatingSpecialCharacter(v135, v312, v313, v314, v315, v316);
                  long long v323 = objc_msgSend_strokeGroup(v135, v318, v319, v320, v321, v322);
                  long long v326 = objc_msgSend_initWithTextResult_terminatingSpecialCharacter_strokeGroup_(v311, v324, (uint64_t)v975, (uint64_t)v317, (uint64_t)v323, v325);

                  objc_msgSend_addObject_(v955, v327, (uint64_t)v326, v328, v329, v330);
                  __int16 v336 = objc_msgSend_inputStrokeIdentifiers(v975, v331, v332, v333, v334, v335);

                  uint64_t v142 = v336;
                  uint64_t v342 = objc_msgSend_count(v336, v337, v338, v339, v340, v341);
                }
                else
                {
                  objc_msgSend_addObject_(v955, v280, (uint64_t)v135, v282, v283, v284);
                  uint64_t v342 = objc_msgSend_count(v142, v357, v358, v359, v360, v361);
                }
                uint64_t v352 = v342;
                objc_msgSend_addObjectsFromArray_(v993, v343, (uint64_t)v142, v344, v345, v346);
              }
              else
              {
                objc_msgSend_addObject_(v955, v223, (uint64_t)v135, v225, v226, v227);
                uint64_t v352 = objc_msgSend_count(v142, v347, v348, v349, v350, v351);
                objc_msgSend_addObjectsFromArray_(v993, v353, (uint64_t)v142, v354, v355, v356);
              }
              v959 += v352;
            }
          }
        }
        uint64_t v128 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v129, (uint64_t)&v995, (uint64_t)v1039, 16, v133);
      }
      while (v128);
    }
    else
    {
      uint64_t v959 = 0;
      v984 = 0;
      v972 = 0;
    }

    for (unint64_t m = 0; m < objc_msgSend_count(v953, v363, v364, v365, v366, v367); ++m)
    {
      uint64_t v373 = objc_msgSend_objectAtIndexedSubscript_(v953, v369, m, v370, v371, v372);
      if (objc_msgSend_containsObject_(v972, v374, (uint64_t)v373, v375, v376, v377)) {
        objc_msgSend_addIndex_(v973, v378, m, v379, v380, v381);
      }
      if (objc_msgSend_containsObject_(v984, v378, (uint64_t)v373, v379, v380, v381)) {
        objc_msgSend_removeIndex_(v973, v382, m, v383, v384, v385);
      }
    }
    v946 = objc_msgSend_objectsAtIndexes_(v945, v369, (uint64_t)v973, v370, v371, v372);

    v949 = (void *)v966;
    unint64_t v362 = v955;
  }
  else
  {
    id obj = 0;
    uint64_t v959 = 0;
    v984 = 0;
    v972 = 0;
    unint64_t v362 = 0;
    v946 = (void *)MEMORY[0x1E4F1CBF0];
  }
  v956 = v362;
  uint64_t v386 = objc_opt_class();
  uint64_t v392 = objc_msgSend_allObjects(v993, v387, v388, v389, v390, v391);
  uint64_t v398 = objc_msgSend_latestStrokeProvider(v988, v393, v394, v395, v396, v397);
  v947 = objc_msgSend_strokeIdentifiersForData_withStrokeProvider_(v386, v399, (uint64_t)v392, (uint64_t)v398, v400, v401);

  if (v956) {
    v948 = objc_msgSend_copy(v956, v402, v403, v404, v405, v406);
  }
  else {
    v948 = (void *)MEMORY[0x1E4F1CBF0];
  }
  id v407 = obj;
  id v950 = v993;
  id v954 = v949;
  id v943 = v951;
  v952 = v407;
  uint64_t v413 = objc_msgSend_count(v407, v408, v409, v410, v411, v412);
  uint64_t v419 = (double *)MEMORY[0x1E4F1DB20];
  if (v413) {
    goto LABEL_51;
  }
  uint64_t v909 = objc_msgSend_count(v954, v414, v415, v416, v417, v418);
  if (a4 || v909)
  {
    uint64_t v419 = (double *)MEMORY[0x1E4F1DB20];
    if (!v909)
    {
      BoundingBodouble x = CGPathGetBoundingBox(a4);
      double x = BoundingBox.origin.x;
      double y = BoundingBox.origin.y;
      double width = BoundingBox.size.width;
      double height = BoundingBox.size.height;
      char v976 = 1;
      goto LABEL_52;
    }
LABEL_51:
    char v976 = 0;
    double y = v419[1];
    double x = *v419;
    double width = v419[2];
    double height = v419[3];
LABEL_52:
    v969 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v414, v415, v416, v417, v418);
    v974 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v423, v424, v425, v426, v427);
    v961 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v428, v429, v430, v431, v432);
    uint64_t v438 = objc_msgSend_strokeGroupingResult(v988[1], v433, v434, v435, v436, v437);
    v971 = objc_msgSend_textStrokeGroupClusters(v438, v439, v440, v441, v442, v443);

    for (unint64_t n = 0; n < objc_msgSend_count(v971, v444, v445, v446, v447, v448); ++n)
    {
      uint64_t v453 = objc_msgSend_objectAtIndexedSubscript_(v971, v449, n, v450, v451, v452);
      double v455 = *MEMORY[0x1E4F1DB20];
      double v454 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
      double v457 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
      double v456 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
      long long v1035 = 0u;
      long long v1036 = 0u;
      long long v1037 = 0u;
      long long v1038 = 0u;
      id v458 = v453;
      uint64_t v466 = objc_msgSend_countByEnumeratingWithState_objects_count_(v458, v459, (uint64_t)&v1035, (uint64_t)buf, 16, v460);
      if (v466)
      {
        uint64_t v467 = *(void *)v1036;
        do
        {
          for (iunint64_t i = 0; ii != v466; ++ii)
          {
            if (*(void *)v1036 != v467) {
              objc_enumerationMutation(v458);
            }
            objc_msgSend_bounds(*(void **)(*((void *)&v1035 + 1) + 8 * ii), v461, v462, v463, v464, v465);
            v1064.origin.double x = v469;
            v1064.origin.double y = v470;
            v1064.size.double width = v471;
            v1064.size.double height = v472;
            v1061.origin.double x = v455;
            v1061.origin.double y = v454;
            v1061.size.double width = v457;
            v1061.size.double height = v456;
            CGRect v1062 = CGRectUnion(v1061, v1064);
            double v455 = v1062.origin.x;
            double v454 = v1062.origin.y;
            double v457 = v1062.size.width;
            double v456 = v1062.size.height;
          }
          uint64_t v466 = objc_msgSend_countByEnumeratingWithState_objects_count_(v458, v461, (uint64_t)&v1035, (uint64_t)buf, 16, v465);
        }
        while (v466);
      }

      long long v1033 = 0u;
      long long v1034 = 0u;
      long long v1031 = 0u;
      long long v1032 = 0u;
      id v986 = v952;
      uint64_t v475 = objc_msgSend_countByEnumeratingWithState_objects_count_(v986, v473, (uint64_t)&v1031, (uint64_t)v1047, 16, v474);
      if (v475)
      {
        uint64_t v979 = *(void *)v1032;
        do
        {
          for (juint64_t j = 0; jj != v475; ++jj)
          {
            if (*(void *)v1032 != v979) {
              objc_enumerationMutation(v986);
            }
            uint64_t v477 = *(void **)(*((void *)&v1031 + 1) + 8 * jj);
            long long v1027 = 0u;
            long long v1028 = 0u;
            long long v1029 = 0u;
            long long v1030 = 0u;
            id v478 = v458;
            uint64_t v486 = objc_msgSend_countByEnumeratingWithState_objects_count_(v478, v479, (uint64_t)&v1027, (uint64_t)v1046, 16, v480);
            if (v486)
            {
              uint64_t v487 = *(void *)v1028;
              while (2)
              {
                for (kuint64_t k = 0; kk != v486; ++kk)
                {
                  if (*(void *)v1028 != v487) {
                    objc_enumerationMutation(v478);
                  }
                  v489 = *(void **)(*((void *)&v1027 + 1) + 8 * kk);
                  uint64_t v490 = objc_msgSend_strokeGroup(v477, v481, v482, v483, v484, v485);
                  LODWORD(v489) = objc_msgSend_isEquivalentToStrokeGroup_(v489, v491, (uint64_t)v490, v492, v493, v494);

                  if (v489)
                  {
                    objc_msgSend_addObjectsFromArray_(v969, v481, (uint64_t)v478, v483, v484, v485);
                    v514 = objc_msgSend_ch_valueWithCGRect_(MEMORY[0x1E4F29238], v509, v510, v511, v512, v513, v455, v454, v457, v456);
                    objc_msgSend_addObject_(v961, v515, (uint64_t)v514, v516, v517, v518);

                    goto LABEL_78;
                  }
                }
                uint64_t v486 = objc_msgSend_countByEnumeratingWithState_objects_count_(v478, v481, (uint64_t)&v1027, (uint64_t)v1046, 16, v485);
                if (v486) {
                  continue;
                }
                break;
              }
            }
          }
          uint64_t v475 = objc_msgSend_countByEnumeratingWithState_objects_count_(v986, v495, (uint64_t)&v1031, (uint64_t)v1047, 16, v496);
        }
        while (v475);
      }

      objc_msgSend_ch_valueWithCGRect_(MEMORY[0x1E4F29238], v497, v498, v499, v500, v501, v455, v454, v457, v456);
      id v986 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend_numberWithInteger_(NSNumber, v502, n, v503, v504, v505);
      id v478 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKey_(v974, v506, (uint64_t)v986, (uint64_t)v478, v507, v508);
LABEL_78:
    }
    long long v1025 = 0u;
    long long v1026 = 0u;
    long long v1023 = 0u;
    long long v1024 = 0u;
    uint64_t v519 = objc_msgSend_allKeys(v974, v449, n, v450, v451, v452);
    uint64_t v526 = objc_msgSend_countByEnumeratingWithState_objects_count_(v519, v520, (uint64_t)&v1023, (uint64_t)v1045, 16, v521);
    if (!v526) {
      goto LABEL_112;
    }
    uint64_t v527 = *(void *)v1024;
    if (v976)
    {
      do
      {
        for (munint64_t m = 0; mm != v526; ++mm)
        {
          if (*(void *)v1024 != v527) {
            objc_enumerationMutation(v519);
          }
          v529 = *(void **)(*((void *)&v1023 + 1) + 8 * mm);
          v530 = objc_msgSend_objectForKeyedSubscript_(v974, v522, (uint64_t)v529, v523, v524, v525);
          objc_msgSend_ch_CGRectValue(v530, v531, v532, v533, v534, v535);
          double v537 = v536;
          double v539 = v538;
          double v541 = v540;
          double v543 = v542;

          objc_msgSend_distanceFromRectangle_toRectangle_(CHStrokeUtilities, v544, v545, v546, v547, v548, v537, v539, v541, v543, x, y, width, height);
          if (v550 < height * 4.0)
          {
            uint64_t v551 = objc_msgSend_integerValue(v529, v522, v549, v523, v524, v525);
            uint64_t v556 = objc_msgSend_objectAtIndexedSubscript_(v971, v552, v551, v553, v554, v555);
            objc_msgSend_addObjectsFromArray_(v969, v557, (uint64_t)v556, v558, v559, v560);
          }
        }
        uint64_t v526 = objc_msgSend_countByEnumeratingWithState_objects_count_(v519, v522, (uint64_t)&v1023, (uint64_t)v1045, 16, v525);
      }
      while (v526);
LABEL_112:

      v983 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v634, v635, v636, v637, v638);
      long long v1013 = 0u;
      long long v1014 = 0u;
      long long v1011 = 0u;
      long long v1012 = 0u;
      id v963 = v969;
      uint64_t v646 = objc_msgSend_countByEnumeratingWithState_objects_count_(v963, v639, (uint64_t)&v1011, (uint64_t)v1042, 16, v640);
      if (v646)
      {
        uint64_t v647 = *(void *)v1012;
        do
        {
          for (nunint64_t n = 0; nn != v646; ++nn)
          {
            if (*(void *)v1012 != v647) {
              objc_enumerationMutation(v963);
            }
            long long v649 = objc_msgSend_strokeIdentifiers(*(void **)(*((void *)&v1011 + 1) + 8 * nn), v641, v642, v643, v644, v645);
            long long v655 = objc_msgSend_allObjects(v649, v650, v651, v652, v653, v654);
            objc_msgSend_addObjectsFromArray_(v983, v656, (uint64_t)v655, v657, v658, v659);
          }
          uint64_t v646 = objc_msgSend_countByEnumeratingWithState_objects_count_(v963, v641, (uint64_t)&v1011, (uint64_t)v1042, 16, v645);
        }
        while (v646);
      }

      long long v1009 = 0u;
      long long v1010 = 0u;
      long long v1007 = 0u;
      long long v1008 = 0u;
      id v660 = v950;
      uint64_t v667 = objc_msgSend_countByEnumeratingWithState_objects_count_(v660, v661, (uint64_t)&v1007, (uint64_t)v1041, 16, v662);
      if (v667)
      {
        uint64_t v668 = *(void *)v1008;
        do
        {
          for (uint64_t i1 = 0; i1 != v667; ++i1)
          {
            if (*(void *)v1008 != v668) {
              objc_enumerationMutation(v660);
            }
            objc_msgSend_removeObject_(v983, v663, *(void *)(*((void *)&v1007 + 1) + 8 * i1), v664, v665, v666);
          }
          uint64_t v667 = objc_msgSend_countByEnumeratingWithState_objects_count_(v660, v663, (uint64_t)&v1007, (uint64_t)v1041, 16, v666);
        }
        while (v667);
      }

      if (objc_msgSend_count(v983, v670, v671, v672, v673, v674))
      {
        id v1005 = 0;
        id v1006 = 0;
        v675 = sub_1C4BA446C((uint64_t)v988, v983, 0, 1, 0, &v1006, &v1005, v943);
        id v941 = v1006;
        id v942 = v1005;
        v676 = (void *)MEMORY[0x1E4F1CA48];
        uint64_t v682 = objc_msgSend_count(v675, v677, v678, v679, v680, v681);
        uint64_t v687 = objc_msgSend_arrayWithCapacity_(v676, v683, v682, v684, v685, v686);
        long long v1004 = 0u;
        long long v1002 = 0u;
        long long v1003 = 0u;
        long long v1001 = 0u;
        id v957 = v675;
        v977 = (void *)v687;
        uint64_t v967 = objc_msgSend_countByEnumeratingWithState_objects_count_(v957, v688, (uint64_t)&v1001, (uint64_t)v1040, 16, v689);
        if (v967)
        {
          uint64_t v965 = *(void *)v1002;
          unint64_t v695 = 0x1E4F1C000;
          do
          {
            for (uint64_t i2 = 0; i2 != v967; ++i2)
            {
              if (*(void *)v1002 != v965) {
                objc_enumerationMutation(v957);
              }
              v696 = *(void **)(*((void *)&v1001 + 1) + 8 * i2);
              if ((objc_msgSend_isNonTextCandidateForContextLookup(v696, v690, v691, v692, v693, v694, v941) & 1) == 0
                && (objc_msgSend_isMathForContextLookup(v696, v690, v691, v692, v693, v694) & 1) == 0)
              {
                objc_msgSend_setWithArray_(*(void **)(v695 + 2768), v690, (uint64_t)v983, v692, v693, v694);
                id v987 = (id)objc_claimAutoreleasedReturnValue();
                v697 = *(void **)(v695 + 2768);
                v703 = objc_msgSend_textResult(v696, v698, v699, v700, v701, v702);
                v709 = objc_msgSend_inputStrokeIdentifiers(v703, v704, v705, v706, v707, v708);
                v714 = objc_msgSend_setWithArray_(v697, v710, (uint64_t)v709, v711, v712, v713);
                LODWORD(v697) = objc_msgSend_isSubsetOfSet_(v714, v715, (uint64_t)v987, v716, v717, v718);

                if (v697)
                {
                  objc_msgSend_addObject_(v977, v719, (uint64_t)v696, v721, v722, v723);
                }
                else
                {
                  v989 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v719, v720, v721, v722, v723);
                  v992 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v724, v725, v726, v727, v728);
                  for (uint64_t i3 = 0; ; ++i3)
                  {
                    v735 = objc_msgSend_textResult(v696, v729, v730, v731, v732, v733);
                    BOOL v741 = i3 < objc_msgSend_tokenColumnCount(v735, v736, v737, v738, v739, v740);

                    if (!v741) {
                      break;
                    }
                    v747 = objc_msgSend_textResult(v696, v742, v743, v744, v745, v746);
                    v753 = objc_msgSend_tokenColumns(v747, v748, v749, v750, v751, v752);
                    v758 = objc_msgSend_objectAtIndexedSubscript_(v753, v754, i3, v755, v756, v757);
                    v764 = objc_msgSend_strokeIndexes(v758, v759, v760, v761, v762, v763);

                    v765 = (void *)MEMORY[0x1E4F1CAD0];
                    v771 = objc_msgSend_textResult(v696, v766, v767, v768, v769, v770);
                    v777 = objc_msgSend_inputStrokeIdentifiers(v771, v772, v773, v774, v775, v776);
                    v782 = objc_msgSend_objectsAtIndexes_(v777, v778, (uint64_t)v764, v779, v780, v781);
                    v787 = objc_msgSend_setWithArray_(v765, v783, (uint64_t)v782, v784, v785, v786);

                    if (objc_msgSend_intersectsSet_(v787, v788, (uint64_t)v987, v789, v790, v791))
                    {
                      if (objc_msgSend_count(v992, v792, v793, v794, v795, v796)
                        && (unint64_t)(i3 - objc_msgSend_lastIndex(v992, v797, v798, v799, v800, v801)) >= 2)
                      {
                        v803 = objc_msgSend_copy(v992, v797, v802, v799, v800, v801);
                        objc_msgSend_addObject_(v989, v804, (uint64_t)v803, v805, v806, v807);

                        objc_msgSend_removeAllIndexes(v992, v808, v809, v810, v811, v812);
                      }
                      objc_msgSend_addIndex_(v992, v797, i3, v799, v800, v801);
                    }
                  }
                  if (objc_msgSend_count(v992, v742, v743, v744, v745, v746)) {
                    objc_msgSend_addObject_(v989, v813, (uint64_t)v992, v815, v816, v817);
                  }
                  if (objc_msgSend_count(v989, v813, v814, v815, v816, v817))
                  {
                    for (unint64_t i4 = 0; i4 < objc_msgSend_count(v989, v818, v819, v820, v821, v822); ++i4)
                    {
                      v828 = objc_msgSend_objectAtIndexedSubscript_(v989, v824, i4, v825, v826, v827);
                      v839 = @" ";
                      if (i4 == objc_msgSend_count(v989, v829, v830, v831, v832, v833) - 1)
                      {
                        objc_msgSend_terminatingSpecialCharacter(v696, v834, v835, v836, v837, v838);
                        v839 = (__CFString *)objc_claimAutoreleasedReturnValue();
                      }
                      uint64_t v840 = objc_msgSend_firstIndex(v828, v834, v835, v836, v837, v838);
                      uint64_t v846 = objc_msgSend_lastIndex(v828, v841, v842, v843, v844, v845);
                      uint64_t v852 = objc_msgSend_firstIndex(v828, v847, v848, v849, v850, v851);
                      v858 = objc_msgSend_textResult(v696, v853, v854, v855, v856, v857);
                      uint64_t v859 = v846 - v852 + 1;
                      v863 = objc_msgSend_subResultWithColumnRange_(v858, v860, v840, v859, v861, v862);

                      v869 = objc_msgSend_textResult(v696, v864, v865, v866, v867, v868);
                      v875 = objc_msgSend_inputStrokeIdentifiers(v869, v870, v871, v872, v873, v874);
                      v881 = objc_msgSend_textResult(v696, v876, v877, v878, v879, v880);
                      v885 = objc_msgSend_strokeIndexesForColumnsInRange_(v881, v882, v840, v859, v883, v884);
                      v890 = objc_msgSend_objectsAtIndexes_(v875, v886, (uint64_t)v885, v887, v888, v889);
                      objc_msgSend_setInputStrokeIdentifiers_(v863, v891, (uint64_t)v890, v892, v893, v894);

                      v895 = [CHContextualTextResult alloc];
                      v901 = objc_msgSend_strokeGroup(v696, v896, v897, v898, v899, v900);
                      v904 = objc_msgSend_initWithTextResult_terminatingSpecialCharacter_strokeGroup_(v895, v902, (uint64_t)v863, (uint64_t)v839, (uint64_t)v901, v903);

                      objc_msgSend_addObject_(v977, v905, (uint64_t)v904, v906, v907, v908);
                    }
                  }
                }
                unint64_t v695 = 0x1E4F1C000uLL;
              }
            }
            uint64_t v967 = objc_msgSend_countByEnumeratingWithState_objects_count_(v957, v690, (uint64_t)&v1001, (uint64_t)v1040, 16, v694);
          }
          while (v967);
        }
      }
      else
      {
        v977 = (void *)MEMORY[0x1E4F1CBF0];
      }

      goto LABEL_162;
    }
LABEL_89:
    uint64_t v561 = 0;
    while (1)
    {
      if (*(void *)v1024 != v527) {
        objc_enumerationMutation(v519);
      }
      uint64_t v562 = *(void **)(*((void *)&v1023 + 1) + 8 * v561);
      uint64_t v563 = objc_msgSend_objectForKeyedSubscript_(v974, v522, (uint64_t)v562, v523, v524, v525);
      objc_msgSend_ch_CGRectValue(v563, v564, v565, v566, v567, v568);
      double v570 = v569;
      double v572 = v571;
      double v574 = v573;
      double v576 = v575;

      long long v1021 = 0u;
      long long v1022 = 0u;
      long long v1019 = 0u;
      long long v1020 = 0u;
      id v577 = v961;
      uint64_t v585 = objc_msgSend_countByEnumeratingWithState_objects_count_(v577, v578, (uint64_t)&v1019, (uint64_t)v1044, 16, v579);
      if (v585) {
        break;
      }
LABEL_100:

      long long v1017 = 0u;
      long long v1018 = 0u;
      long long v1015 = 0u;
      long long v1016 = 0u;
      id v577 = v954;
      uint64_t v601 = objc_msgSend_countByEnumeratingWithState_objects_count_(v577, v599, (uint64_t)&v1015, (uint64_t)v1043, 16, v600);
      if (v601)
      {
        uint64_t v602 = *(void *)v1016;
LABEL_102:
        uint64_t v603 = 0;
        while (1)
        {
          if (*(void *)v1016 != v602) {
            objc_enumerationMutation(v577);
          }
          uint64_t v604 = objc_msgSend_polygonDrawing(*(void **)(*((void *)&v1015 + 1) + 8 * v603), v580, v581, v582, v583, v584);
          objc_msgSend_bounds(v604, v605, v606, v607, v608, v609);
          double v611 = v610;
          double v613 = v612;
          double v615 = v614;
          double v617 = v616;

          objc_msgSend_distanceFromRectangle_toRectangle_(CHStrokeUtilities, v618, v619, v620, v621, v622, v570, v572, v574, v576, v611, v613, v615, v617);
          if (v623 < v617 * 4.0) {
            break;
          }
          if (v601 == ++v603)
          {
            uint64_t v601 = objc_msgSend_countByEnumeratingWithState_objects_count_(v577, v580, (uint64_t)&v1015, (uint64_t)v1043, 16, v584);
            if (v601) {
              goto LABEL_102;
            }
            goto LABEL_110;
          }
        }
LABEL_109:
        uint64_t v624 = objc_msgSend_integerValue(v562, v580, v581, v582, v583, v584);
        id v629 = objc_msgSend_objectAtIndexedSubscript_(v971, v625, v624, v626, v627, v628);
        objc_msgSend_addObjectsFromArray_(v969, v630, (uint64_t)v629, v631, v632, v633);
      }
LABEL_110:

      if (++v561 == v526)
      {
        uint64_t v526 = objc_msgSend_countByEnumeratingWithState_objects_count_(v519, v522, (uint64_t)&v1023, (uint64_t)v1045, 16, v525);
        if (!v526) {
          goto LABEL_112;
        }
        goto LABEL_89;
      }
    }
    uint64_t v586 = *(void *)v1020;
LABEL_94:
    uint64_t v587 = 0;
    while (1)
    {
      if (*(void *)v1020 != v586) {
        objc_enumerationMutation(v577);
      }
      objc_msgSend_ch_CGRectValue(*(void **)(*((void *)&v1019 + 1) + 8 * v587), v580, v581, v582, v583, v584);
      double v589 = v588;
      objc_msgSend_distanceFromRectangle_toRectangle_(CHStrokeUtilities, v590, v591, v592, v593, v594, v570, v572, v574, v576, v595, v596, v597, v588);
      if (v598 < v589 * 4.0) {
        goto LABEL_109;
      }
      if (v585 == ++v587)
      {
        uint64_t v585 = objc_msgSend_countByEnumeratingWithState_objects_count_(v577, v580, (uint64_t)&v1019, (uint64_t)v1044, 16, v584);
        if (v585) {
          goto LABEL_94;
        }
        goto LABEL_100;
      }
    }
  }
  v977 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_162:

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  v910 = (id)qword_1EA3C9FA0;
  if (os_log_type_enabled(v910, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v916 = objc_msgSend_count(v945, v911, v912, v913, v914, v915);
    uint64_t v922 = objc_msgSend_count(v947, v917, v918, v919, v920, v921);
    uint64_t v928 = objc_msgSend_count(v946, v923, v924, v925, v926, v927);
    uint64_t v934 = objc_msgSend_count(v948, v929, v930, v931, v932, v933);
    uint64_t v940 = objc_msgSend_count(v977, v935, v936, v937, v938, v939);
    *(_DWORD *)long long buf = 134219264;
    uint64_t v1049 = v916;
    __int16 v1050 = 2048;
    uint64_t v1051 = v922;
    __int16 v1052 = 2048;
    uint64_t v1053 = v928;
    __int16 v1054 = 2048;
    uint64_t v1055 = v959;
    __int16 v1056 = 2048;
    uint64_t v1057 = v934;
    __int16 v1058 = 2048;
    uint64_t v1059 = v940;
    _os_log_impl(&dword_1C492D000, v910, OS_LOG_TYPE_DEFAULT, "ContextLookup Query result: %ld strokes initially selected, %ld strokes covered, %ld nonTextStrokes, %ld text strokes in %ld lines of text, %ld lines of surrounding text", buf, 0x3Eu);
  }

  v944[2](v944, v947, v946, v948, v977);
LABEL_167:
}

void sub_1C4BAA908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  _Unwind_Resume(a1);
}

void sub_1C4BAB210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C4BAB24C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BAB264(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a1 + 56);
  if (v7 && (*(unsigned int (**)(void))(v7 + 16))())
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    id v8 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C492D000, v8, OS_LOG_TYPE_DEFAULT, "ContextLookup Query result for selected strokes cancelled.", buf, 2u);
    }
  }
  else
  {
    objc_msgSend_becomeCurrentWithPendingUnitCount_(*(void **)(a1 + 32), a2, 100, a4, a5, a6);
    uint64_t v9 = objc_opt_class();
    objc_msgSend_encodedStrokeIdentifiers_withStrokeProvider_(v9, v10, *(void *)(a1 + 40), *(void *)(*(void *)(a1 + 48) + 24), v11, v12);
    id v28 = (id)objc_claimAutoreleasedReturnValue();
    sub_1C4BA906C(*(void *)(a1 + 48), *(void **)(a1 + 40), v28, 0, *(void **)(a1 + 64), *(void **)(a1 + 56));
    objc_msgSend_resignCurrent(*(void **)(a1 + 32), v13, v14, v15, v16, v17);
    uint64_t v23 = objc_msgSend_totalUnitCount(*(void **)(a1 + 32), v18, v19, v20, v21, v22);
    objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 32), v24, v23, v25, v26, v27);
  }
}

void sub_1C4BAB394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BAB4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1C4BAB510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BAB524(uint64_t a1)
{
  uint64_t v146 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2 && (*(unsigned int (**)(void))(v2 + 16))())
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    id v3 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C492D000, v3, OS_LOG_TYPE_DEFAULT, "ContextLookup Query result for path cancelled.", buf, 2u);
    }
  }
  else
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    id v4 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = objc_msgSend_attachments(*(void **)(*(void *)(a1 + 32) + 48), v5, v6, v7, v8, v9);
      *(_DWORD *)long long buf = 134217984;
      uint64_t v145 = objc_msgSend_count(v10, v11, v12, v13, v14, v15);
      _os_log_impl(&dword_1C492D000, v4, OS_LOG_TYPE_DEFAULT, "ContextLookup Query for path starting in document with %ld attachments.", buf, 0xCu);
    }
    objc_msgSend_becomeCurrentWithPendingUnitCount_(*(void **)(a1 + 40), v16, 100, v17, v18, v19);
    uint64_t v25 = objc_msgSend_latestStrokeProvider(*(void **)(a1 + 32), v20, v21, v22, v23, v24);
    id v3 = objc_msgSend_orderedStrokes(v25, v26, v27, v28, v29, v30);

    uint64_t v36 = objc_msgSend_latestStrokeProvider(*(void **)(a1 + 32), v31, v32, v33, v34, v35);
    uint64_t v42 = objc_msgSend_visibleStrokeEncodedIdentifiers(v36, v37, v38, v39, v40, v41);

    uint64_t v53 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v43, v44, v45, v46, v47);
    for (unint64_t i = 0; i < objc_msgSend_count(v3, v48, v49, v50, v51, v52); ++i)
    {
      uint64_t v60 = objc_msgSend_objectAtIndexedSubscript_(v3, v55, i, v57, v58, v59);
      if (!objc_msgSend_count(v42, v61, v62, v63, v64, v65)) {
        goto LABEL_24;
      }
      uint64_t v71 = objc_msgSend_latestStrokeProvider(*(void **)(a1 + 32), v66, v67, v68, v69, v70);
      char v77 = objc_msgSend_strokeIdentifier(v60, v72, v73, v74, v75, v76);
      uint64_t v82 = objc_msgSend_encodedStrokeIdentifier_(v71, v78, (uint64_t)v77, v79, v80, v81);

      LODWORD(v71) = objc_msgSend_containsObject_(v42, v83, (uint64_t)v82, v84, v85, v86);
      if (v71)
      {
LABEL_24:
        objc_msgSend_bounds(v60, v66, v67, v68, v69, v70);
        double x = v147.x;
        double y = v147.y;
        double v90 = v89;
        double v92 = v91;
        BOOL v93 = CGPathContainsPoint(*(CGPathRef *)(a1 + 64), 0, v147, 0);
        v148.double x = x + v90;
        v148.double y = y;
        BOOL v94 = CGPathContainsPoint(*(CGPathRef *)(a1 + 64), 0, v148, 0);
        v149.double x = x + v90;
        v149.double y = y + v92;
        BOOL v95 = CGPathContainsPoint(*(CGPathRef *)(a1 + 64), 0, v149, 0);
        v150.double x = x;
        v150.double y = y + v92;
        unint64_t v100 = v94 + (unint64_t)v93 + v95 + CGPathContainsPoint(*(CGPathRef *)(a1 + 64), 0, v150, 0);
        if (v100 >= 3
          || v100
          && (v151.x = x + v90 * 0.5, v151.double y = y + v92 * 0.5, CGPathContainsPoint(*(CGPathRef *)(a1 + 64), 0, v151, 0)))
        {
          objc_msgSend_addIndex_(v53, v96, i, v97, v98, v99);
        }
      }
    }
    CGFloat v101 = (void *)MEMORY[0x1E4F1CA48];
    uint64_t v102 = objc_msgSend_count(v53, v55, v56, v57, v58, v59);
    uint64_t v107 = objc_msgSend_arrayWithCapacity_(v101, v103, v102, v104, v105, v106);
    uint64_t v138 = MEMORY[0x1E4F143A8];
    uint64_t v139 = 3221225472;
    uint64_t v140 = sub_1C4BABAAC;
    uint64_t v141 = &unk_1E64E4B68;
    id v108 = v107;
    uint64_t v109 = *(void *)(a1 + 32);
    id v142 = v108;
    uint64_t v143 = v109;
    objc_msgSend_enumerateObjectsAtIndexes_options_usingBlock_(v3, v110, (uint64_t)v53, 0, (uint64_t)&v138, v111);
    uint64_t v112 = objc_opt_class();
    uint64_t v118 = objc_msgSend_latestStrokeProvider(*(void **)(a1 + 32), v113, v114, v115, v116, v117, v138, v139, v140, v141);
    uint64_t v122 = objc_msgSend_strokeIdentifiersForData_withStrokeProvider_(v112, v119, (uint64_t)v108, (uint64_t)v118, v120, v121);

    sub_1C4BA906C(*(void *)(a1 + 32), v122, v108, *(const CGPath **)(a1 + 64), *(void **)(a1 + 56), *(void **)(a1 + 48));
    objc_msgSend_resignCurrent(*(void **)(a1 + 40), v123, v124, v125, v126, v127);
    uint64_t v133 = objc_msgSend_totalUnitCount(*(void **)(a1 + 40), v128, v129, v130, v131, v132);
    objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 40), v134, v133, v135, v136, v137);
  }
}

void sub_1C4BAB9BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BAB9D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BAB9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4BABAAC(uint64_t a1, void *a2)
{
  id v25 = a2;
  id v3 = *(void **)(a1 + 32);
  uint64_t v9 = objc_msgSend_latestStrokeProvider(*(void **)(a1 + 40), v4, v5, v6, v7, v8);
  uint64_t v15 = objc_msgSend_strokeIdentifier(v25, v10, v11, v12, v13, v14);
  uint64_t v20 = objc_msgSend_encodedStrokeIdentifier_(v9, v16, (uint64_t)v15, v17, v18, v19);
  objc_msgSend_addObject_(v3, v21, (uint64_t)v20, v22, v23, v24);
}

void sub_1C4BABB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BABB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BABD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C4BABD88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BABDA0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_becomeCurrentWithPendingUnitCount_(*(void **)(a1 + 32), a2, 100, a4, a5, a6);
  sub_1C4BA446C(*(void *)(a1 + 40), *(void **)(a1 + 48), 0, 1, 1, 0, 0, *(void **)(a1 + 56));
  id v28 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v7 = [CHContextualTextResults alloc];
  uint64_t v12 = objc_msgSend_initWithTextResults_(v7, v8, (uint64_t)v28, v9, v10, v11);
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  objc_msgSend_resignCurrent(*(void **)(a1 + 32), v13, v14, v15, v16, v17);
  uint64_t v23 = objc_msgSend_totalUnitCount(*(void **)(a1 + 32), v18, v19, v20, v21, v22);
  objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 32), v24, v23, v25, v26, v27);
}

void sub_1C4BABE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BABE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BABFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C4BAC020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BAC038(uint64_t a1)
{
  v417[1] = *MEMORY[0x1E4F143B8];
  id v1 = *(id *)(*(void *)(a1 + 32) + 24);
  uint64_t v361 = objc_msgSend_visibleStrokeEncodedIdentifiers(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = objc_opt_class();
  v417[0] = *(void *)(a1 + 40);
  uint64_t v11 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v8, (uint64_t)v417, 1, v9, v10);
  uint64_t v350 = objc_msgSend_polygonForStrokes_(v7, v12, (uint64_t)v11, v13, v14, v15);

  uint64_t v21 = objc_msgSend_strokeGroupingResult(*(void **)(*(void *)(a1 + 32) + 8), v16, v17, v18, v19, v20);
  uint64_t v27 = objc_msgSend_strokeGroupOrdering(*(void **)(a1 + 32), v22, v23, v24, v25, v26);
  uint64_t v349 = objc_msgSend_strokeGroupsSortedBy_textGroupsOnly_(v21, v28, v27, 1, v29, v30);

  uint64_t v351 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v31, v32, v33, v34, v35);
  CGRect v353 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v36, v37, v38, v39, v40);
  uint64_t v352 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v41, v42, v43, v44, v45);
  uint64_t v354 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v46, v47, v48, v49, v50);
  v405[0] = 0;
  v405[1] = v405;
  v405[2] = 0x2020000000;
  char v406 = 0;
  uint64_t v401 = 0;
  uint64_t v402 = &v401;
  uint64_t v403 = 0x2020000000;
  uint64_t v404 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v397 = 0;
  uint64_t v398 = &v397;
  uint64_t v399 = 0x2020000000;
  char v400 = 0;
  uint64_t v393 = 0;
  uint64_t v394 = &v393;
  uint64_t v395 = 0x2020000000;
  uint64_t v396 = 0x7FFFFFFFFFFFFFFFLL;
  long long v391 = 0u;
  long long v392 = 0u;
  long long v389 = 0u;
  long long v390 = 0u;
  id obj = v349;
  uint64_t v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v51, (uint64_t)&v389, (uint64_t)v416, 16, v52);
  if (v53)
  {
    uint64_t v355 = 0;
    CGRect v357 = 0;
    uint64_t v358 = *(void *)v390;
LABEL_3:
    uint64_t v359 = v53;
    uint64_t v59 = 0;
    while (1)
    {
      if (*(void *)v390 != v358) {
        objc_enumerationMutation(obj);
      }
      uint64_t v60 = *(void **)(*((void *)&v389 + 1) + 8 * v59);
      uint64_t v61 = *(void *)(a1 + 56);
      if (v61 && ((*(uint64_t (**)(void))(v61 + 16))() & 1) != 0) {
        goto LABEL_52;
      }
      if (!objc_msgSend_count(v361, v54, v55, v56, v57, v58)
        || (objc_msgSend_strokeIdentifiers(v60, v54, v55, v56, v57, v58),
            uint64_t v62 = objc_claimAutoreleasedReturnValue(),
            objc_msgSend_set(v361, v63, v64, v65, v66, v67),
            uint64_t v68 = objc_claimAutoreleasedReturnValue(),
            char isSubsetOfSet = objc_msgSend_isSubsetOfSet_(v62, v69, (uint64_t)v68, v70, v71, v72),
            v68,
            v62,
            (isSubsetOfSet & 1) != 0))
      {
        objc_msgSend_bounds(*(void **)(a1 + 40), v54, v55, v56, v57, v58);
        CGFloat v75 = v74;
        CGFloat v77 = v76;
        CGFloat v79 = v78;
        CGFloat v81 = v80;
        objc_msgSend_bounds(v60, v82, v83, v84, v85, v86);
        v420.origin.double x = v87;
        v420.origin.double y = v88;
        v420.size.double width = v89;
        v420.size.double height = v90;
        v418.origin.double x = v75;
        v418.origin.double y = v77;
        v418.size.double width = v79;
        v418.size.double height = v81;
        if (CGRectIntersectsRect(v418, v420)) {
          break;
        }
      }
LABEL_4:
      if (++v59 == v359)
      {
        uint64_t v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v54, (uint64_t)&v389, (uint64_t)v416, 16, v58);
        if (v53) {
          goto LABEL_3;
        }
        goto LABEL_52;
      }
    }
    if (objc_msgSend_classification(v60, v54, v55, v56, v57, v58) == 1
      || objc_msgSend_classification(v60, v91, v92, v93, v94, v95) == 2)
    {
      uint64_t v96 = *(void **)(*(void *)(a1 + 32) + 8);
      uint64_t v97 = objc_msgSend_uniqueIdentifier(v60, v91, v92, v93, v94, v95);
      uint64_t v102 = objc_msgSend_recognitionResultForStrokeGroupIdentifier_(v96, v98, v97, v99, v100, v101);
      id v108 = objc_msgSend_recognitionResultsByLocale(v102, v103, v104, v105, v106, v107);
      uint64_t v114 = objc_msgSend_preferredLocale(v102, v109, v110, v111, v112, v113);
      objc_msgSend_objectForKeyedSubscript_(v108, v115, (uint64_t)v114, v116, v117, v118);
      id v119 = (id)objc_claimAutoreleasedReturnValue();

      uint64_t v125 = objc_msgSend_preferredLocale(v102, v120, v121, v122, v123, v124);
      int shouldUseOriginalTokensForLocale = objc_msgSend_shouldUseOriginalTokensForLocale_(CHRecognizerConfiguration, v126, (uint64_t)v125, v127, v128, v129);

      if (shouldUseOriginalTokensForLocale)
      {
        uint64_t v136 = objc_msgSend_originalTokens(v119, v131, v132, v133, v134, v135);
      }
      else
      {
        uint64_t v137 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v131, v132, v133, v134, v135);
        v387[0] = MEMORY[0x1E4F143A8];
        v387[1] = 3221225472;
        v387[2] = sub_1C4BAD0A8;
        v387[3] = &unk_1E64E3150;
        id v138 = v137;
        id v388 = v138;
        objc_msgSend_enumerateTokensInTopTranscriptionPathWithBlock_(v119, v139, (uint64_t)v387, v140, v141, v142);
        uint64_t v136 = objc_msgSend_copy(v138, v143, v144, v145, v146, v147);
      }
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      CGPoint v148 = (id)qword_1EA3C9FA0;
      if (os_log_type_enabled(v148, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v154 = objc_msgSend_topTranscription(v119, v149, v150, v151, v152, v153);
        uint64_t v160 = objc_msgSend_count(v136, v155, v156, v157, v158, v159);
        *(_DWORD *)long long buf = 138740483;
        uint64_t v161 = @"NO";
        if (shouldUseOriginalTokensForLocale) {
          uint64_t v161 = @"YES";
        }
        uint64_t v411 = (uint64_t)v154;
        __int16 v412 = 2112;
        uint64_t v413 = (uint64_t)v161;
        __int16 v414 = 2048;
        uint64_t v415 = v160;
        _os_log_impl(&dword_1C492D000, v148, OS_LOG_TYPE_DEBUG, "ScratchOut: evaluating group with transcription %{sensitive}@, using original tokens: %@, num tokens: %lu", buf, 0x20u);
      }
      v375[0] = MEMORY[0x1E4F143A8];
      v375[1] = 3221225472;
      v375[2] = sub_1C4BAD0B4;
      v375[3] = &unk_1E64E4BB8;
      uint64_t v162 = v102;
      uint64_t v376 = v162;
      id v377 = v1;
      id v378 = *(id *)(a1 + 40);
      uint64_t v383 = v405;
      id v379 = v353;
      uint64_t v384 = &v397;
      id v380 = v351;
      id v381 = v350;
      id v382 = v352;
      uint64_t v385 = &v401;
      uint64_t v386 = &v393;
      objc_msgSend_enumerateObjectsUsingBlock_(v136, v163, (uint64_t)v375, v164, v165, v166);
      uint64_t v167 = *((unsigned __int8 *)v398 + 24);

      v355 += v167;
      uint64_t v168 = v376;
    }
    else
    {
      if (objc_msgSend_classification(v60, v91, v92, v93, v94, v95) != 3) {
        goto LABEL_4;
      }
      objc_msgSend_bounds(v60, v54, v55, v56, v57, v58);
      CGFloat v170 = v169;
      CGFloat v172 = v171;
      CGFloat v174 = v173;
      CGFloat v176 = v175;
      objc_msgSend_bounds(*(void **)(a1 + 40), v177, v178, v179, v180, v181);
      v421.origin.double x = v182;
      v421.origin.double y = v183;
      v421.size.double width = v184;
      v421.size.double height = v185;
      v419.origin.double x = v170;
      v419.origin.double y = v172;
      v419.size.double width = v174;
      v419.size.double height = v176;
      if (!CGRectIntersectsRect(v419, v421)) {
        goto LABEL_4;
      }
      if (!v357)
      {
        CGRect v357 = objc_msgSend_polygonSetForScratchOutStroke_(CHStrokeUtilities, v54, *(void *)(a1 + 40), v56, v57, v58);
      }
      uint64_t v186 = *(void **)(*(void *)(a1 + 32) + 8);
      uint64_t v187 = objc_msgSend_uniqueIdentifier(v60, v54, v55, v56, v57, v58);
      uint64_t v162 = objc_msgSend_recognitionResultForStrokeGroupIdentifier_(v186, v188, v187, v189, v190, v191);
      uint64_t v348 = objc_msgSend_inputStrokeIdentifiers(v162, v192, v193, v194, v195, v196);
      uint64_t v136 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v197, v198, v199, v200, v201);
      long long v373 = 0u;
      long long v374 = 0u;
      long long v371 = 0u;
      long long v372 = 0u;
      id v119 = v348;
      uint64_t v207 = objc_msgSend_countByEnumeratingWithState_objects_count_(v119, v202, (uint64_t)&v371, (uint64_t)v409, 16, v203);
      if (v207)
      {
        uint64_t v208 = *(void *)v372;
        do
        {
          for (uint64_t i = 0; i != v207; ++i)
          {
            if (*(void *)v372 != v208) {
              objc_enumerationMutation(v119);
            }
            uint64_t v214 = objc_msgSend_strokeForIdentifier_inStrokeProvider_(CHStrokeUtilities, v204, *(void *)(*((void *)&v371 + 1) + 8 * i), (uint64_t)v1, v205, v206);
            if (v214) {
              objc_msgSend_addObject_(v136, v210, (uint64_t)v214, v211, v212, v213);
            }
          }
          uint64_t v207 = objc_msgSend_countByEnumeratingWithState_objects_count_(v119, v204, (uint64_t)&v371, (uint64_t)v409, 16, v206);
        }
        while (v207);
      }

      unint64_t v220 = 0;
      char v221 = 0;
      while (v220 < objc_msgSend_count(v119, v215, v216, v217, v218, v219))
      {
        uint64_t v226 = objc_msgSend_objectAtIndexedSubscript_(v136, v222, v220, v223, v224, v225);
        if (objc_msgSend_isStroke_intersectingAnyPolygonInSet_(CHStrokeUtilities, v227, (uint64_t)v226, (uint64_t)v357, v228, v229))
        {
          uint64_t v234 = objc_msgSend_objectAtIndexedSubscript_(v119, v230, v220, v231, v232, v233);
          objc_msgSend_addObject_(v354, v235, (uint64_t)v234, v236, v237, v238);

          char v221 = 1;
        }

        ++v220;
      }
      if ((v221 & 1) == 0) {
        goto LABEL_25;
      }
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v168 = (id)qword_1EA3C9FA0;
      if (os_log_type_enabled(v168, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v244 = objc_msgSend_mathResult(v162, v239, v240, v241, v242, v243);
        uint64_t v250 = objc_msgSend_topTranscription(v244, v245, v246, v247, v248, v249);
        *(_DWORD *)long long buf = 138739971;
        uint64_t v411 = (uint64_t)v250;
        _os_log_impl(&dword_1C492D000, v168, OS_LOG_TYPE_DEBUG, "ScratchOut: math strokes augmented with strokes from group: %{sensitive}@", buf, 0xCu);
      }
    }

LABEL_25:
    goto LABEL_4;
  }
  uint64_t v355 = 0;
  CGRect v357 = 0;
LABEL_52:

  uint64_t v256 = *(void *)(a1 + 56);
  if (v256 && ((*(uint64_t (**)(void))(v256 + 16))() & 1) != 0)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    goto LABEL_83;
  }
  if (v355 < 3 || (uint64_t v253 = v394[3], v253 < 1))
  {
    if (!objc_msgSend_count(v353, v251, v252, v253, v254, v255))
    {
      id v262 = v352;
      id v360 = 0;
      uint64_t v276 = 1;
      goto LABEL_62;
    }
    uint64_t v271 = objc_msgSend_indexSetWithIndexesInRange_(MEMORY[0x1E4F28D60], v268, 0, v402[3], v269, v270);
    objc_msgSend_objectsAtIndexes_(v353, v272, (uint64_t)v271, v273, v274, v275);
    id v262 = (id)objc_claimAutoreleasedReturnValue();
    id v360 = v352;
  }
  else
  {
    uint64_t v257 = objc_msgSend_indexSetWithIndexesInRange_(MEMORY[0x1E4F28D60], v251, 0, v253, v254, v255);
    objc_msgSend_objectsAtIndexes_(v351, v258, (uint64_t)v257, v259, v260, v261);
    id v262 = (id)objc_claimAutoreleasedReturnValue();
    id v360 = v352;
  }
  uint64_t v276 = 0;
LABEL_62:
  if (objc_msgSend_count(v354, v263, v264, v265, v266, v267))
  {
    uint64_t v282 = objc_msgSend_arrayByAddingObjectsFromArray_(v262, v277, (uint64_t)v354, v279, v280, v281);

    uint64_t v276 = 1;
    id v262 = (id)v282;
  }
  uint64_t v283 = (void *)MEMORY[0x1E4F1CA80];
  uint64_t v284 = objc_msgSend_count(v262, v277, v278, v279, v280, v281);
  uint64_t v289 = objc_msgSend_setWithCapacity_(v283, v285, v284, v286, v287, v288);
  long long v369 = 0u;
  long long v370 = 0u;
  long long v367 = 0u;
  long long v368 = 0u;
  id v290 = v262;
  uint64_t v297 = objc_msgSend_countByEnumeratingWithState_objects_count_(v290, v291, (uint64_t)&v367, (uint64_t)v408, 16, v292);
  if (v297)
  {
    uint64_t v298 = *(void *)v368;
    do
    {
      for (uint64_t j = 0; j != v297; ++j)
      {
        if (*(void *)v368 != v298) {
          objc_enumerationMutation(v290);
        }
        uint64_t v300 = objc_msgSend_strokeIdentifierFromData_(v1, v293, *(void *)(*((void *)&v367 + 1) + 8 * j), v294, v295, v296);
        objc_msgSend_addObject_(v289, v301, (uint64_t)v300, v302, v303, v304);
      }
      uint64_t v297 = objc_msgSend_countByEnumeratingWithState_objects_count_(v290, v293, (uint64_t)&v367, (uint64_t)v408, 16, v296);
    }
    while (v297);
  }

  uint64_t v305 = (void *)MEMORY[0x1E4F1CA80];
  uint64_t v311 = objc_msgSend_count(v360, v306, v307, v308, v309, v310);
  uint64_t v316 = objc_msgSend_setWithCapacity_(v305, v312, v311, v313, v314, v315);
  long long v365 = 0u;
  long long v366 = 0u;
  long long v363 = 0u;
  long long v364 = 0u;
  id v317 = v360;
  uint64_t v324 = objc_msgSend_countByEnumeratingWithState_objects_count_(v317, v318, (uint64_t)&v363, (uint64_t)v407, 16, v319);
  if (v324)
  {
    uint64_t v325 = *(void *)v364;
    do
    {
      for (uint64_t k = 0; k != v324; ++k)
      {
        if (*(void *)v364 != v325) {
          objc_enumerationMutation(v317);
        }
        long long v327 = objc_msgSend_strokeIdentifierFromData_(v1, v320, *(void *)(*((void *)&v363 + 1) + 8 * k), v321, v322, v323);
        objc_msgSend_addObject_(v316, v328, (uint64_t)v327, v329, v330, v331);
      }
      uint64_t v324 = objc_msgSend_countByEnumeratingWithState_objects_count_(v317, v320, (uint64_t)&v363, (uint64_t)v407, 16, v323);
    }
    while (v324);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v332 = (id)qword_1EA3C9FA0;
  if (os_log_type_enabled(v332, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v338 = objc_msgSend_count(v289, v333, v334, v335, v336, v337);
    *(_DWORD *)long long buf = 134218240;
    uint64_t v411 = v338;
    __int16 v412 = 2048;
    uint64_t v413 = v276;
    _os_log_impl(&dword_1C492D000, v332, OS_LOG_TYPE_DEBUG, "ScratchOut: covered strokes: %ld, result level: %ld", buf, 0x16u);
  }

  uint64_t v339 = [CHTokenizedStrokeResult alloc];
  uint64_t v343 = objc_msgSend_initWithStrokeIdentifiers_resultLevel_(v339, v340, (uint64_t)v289, v276, v341, v342);
  objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 48), v344, 100, v345, v346, v347);
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();

LABEL_83:
  _Block_object_dispose(&v393, 8);
  _Block_object_dispose(&v397, 8);
  _Block_object_dispose(&v401, 8);
  _Block_object_dispose(v405, 8);
}

void sub_1C4BACD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,void *a25,void *a26,uint64_t a27,uint64_t a28,void *a29)
{
  _Block_object_dispose(&STACK[0x250], 8);
  _Block_object_dispose(&STACK[0x270], 8);
  _Block_object_dispose(&STACK[0x290], 8);
  _Block_object_dispose(&STACK[0x2B0], 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1C4BAD0A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C4BAD0B4(uint64_t a1, void *a2)
{
  uint64_t v212 = *MEMORY[0x1E4F143B8];
  id v193 = a2;
  uint64_t v8 = objc_msgSend_inputStrokeIdentifiers(*(void **)(a1 + 32), v3, v4, v5, v6, v7);
  uint64_t v14 = objc_msgSend_strokeIndexes(v193, v9, v10, v11, v12, v13);
  uint64_t v192 = objc_msgSend_objectsAtIndexes_(v8, v15, (uint64_t)v14, v16, v17, v18);

  uint64_t v19 = (CGFloat *)MEMORY[0x1E4F1DB20];
  CGFloat x = *MEMORY[0x1E4F1DB20];
  CGFloat y = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  double width = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  CGFloat height = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  uint64_t v29 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v24, v25, v26, v27, v28);
  long long v200 = 0u;
  long long v201 = 0u;
  long long v198 = 0u;
  long long v199 = 0u;
  id v30 = v192;
  uint64_t v36 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v31, (uint64_t)&v198, (uint64_t)v211, 16, v32);
  if (v36)
  {
    uint64_t v37 = *(void *)v199;
    do
    {
      for (uint64_t i = 0; i != v36; ++i)
      {
        if (*(void *)v199 != v37) {
          objc_enumerationMutation(v30);
        }
        uint64_t v39 = objc_msgSend_strokeForIdentifier_inStrokeProvider_(CHStrokeUtilities, v33, *(void *)(*((void *)&v198 + 1) + 8 * i), *(void *)(a1 + 40), v34, v35);
        uint64_t v45 = v39;
        if (v39)
        {
          objc_msgSend_bounds(v39, v40, v41, v42, v43, v44);
          v220.origin.CGFloat x = v46;
          v220.origin.CGFloat y = v47;
          v220.size.double width = v48;
          v220.size.CGFloat height = v49;
          v213.origin.CGFloat x = x;
          v213.origin.CGFloat y = y;
          v213.size.double width = width;
          v213.size.CGFloat height = height;
          CGRect v214 = CGRectUnion(v213, v220);
          CGFloat x = v214.origin.x;
          CGFloat y = v214.origin.y;
          double width = v214.size.width;
          CGFloat height = v214.size.height;
          objc_msgSend_addObject_(v29, v50, (uint64_t)v45, v51, v52, v53);
        }
      }
      uint64_t v36 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v33, (uint64_t)&v198, (uint64_t)v211, 16, v35);
    }
    while (v36);
  }

  objc_msgSend_bounds(*(void **)(a1 + 48), v54, v55, v56, v57, v58);
  v221.origin.CGFloat x = v59;
  v221.origin.CGFloat y = v60;
  v221.size.double width = v61;
  v221.size.CGFloat height = v62;
  v215.origin.CGFloat x = x;
  v215.origin.CGFloat y = y;
  v215.size.double width = width;
  v215.size.CGFloat height = height;
  if (CGRectIntersectsRect(v215, v221))
  {
    uint64_t v73 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v63, v64, v65, v66, v67);
    for (unint64_t j = 0; j < objc_msgSend_count(v30, v68, v69, v70, v71, v72); ++j)
    {
      CGFloat v79 = objc_msgSend_objectAtIndexedSubscript_(v29, v75, j, v76, v77, v78);
      if (objc_msgSend_isStroke_intersectingPolygon_(CHStrokeUtilities, v80, (uint64_t)v79, *(void *)(a1 + 72), v81, v82))
      {
        CGFloat v87 = objc_msgSend_objectAtIndexedSubscript_(v30, v83, j, v84, v85, v86);
        objc_msgSend_addObject_(v73, v88, (uint64_t)v87, v89, v90, v91);
      }
    }
    CGFloat v99 = *v19;
    CGFloat v100 = v19[1];
    CGFloat v101 = v19[2];
    CGFloat v102 = v19[3];
    long long v194 = 0u;
    long long v195 = 0u;
    long long v196 = 0u;
    long long v197 = 0u;
    uint64_t v92 = v73;
    uint64_t v108 = objc_msgSend_countByEnumeratingWithState_objects_count_(v92, v103, (uint64_t)&v194, (uint64_t)v210, 16, v104);
    if (v108)
    {
      uint64_t v109 = *(void *)v195;
      do
      {
        for (uint64_t k = 0; k != v108; ++k)
        {
          if (*(void *)v195 != v109) {
            objc_enumerationMutation(v92);
          }
          uint64_t v111 = objc_msgSend_strokeForIdentifier_inStrokeProvider_(CHStrokeUtilities, v105, *(void *)(*((void *)&v194 + 1) + 8 * k), *(void *)(a1 + 40), v106, v107);
          uint64_t v117 = v111;
          if (v111)
          {
            objc_msgSend_bounds(v111, v112, v113, v114, v115, v116);
            v222.origin.CGFloat x = v118;
            v222.origin.CGFloat y = v119;
            v222.size.double width = v120;
            v222.size.CGFloat height = v121;
            v216.origin.CGFloat x = v99;
            v216.origin.CGFloat y = v100;
            v216.size.double width = v101;
            v216.size.CGFloat height = v102;
            CGRect v217 = CGRectUnion(v216, v222);
            CGFloat v99 = v217.origin.x;
            CGFloat v100 = v217.origin.y;
            CGFloat v101 = v217.size.width;
            CGFloat v102 = v217.size.height;
          }
        }
        uint64_t v108 = objc_msgSend_countByEnumeratingWithState_objects_count_(v92, v105, (uint64_t)&v194, (uint64_t)v210, 16, v107);
      }
      while (v108);
    }

    v218.origin.CGFloat x = x;
    v218.origin.CGFloat y = y;
    v218.size.double width = width;
    v218.size.CGFloat height = height;
    v223.origin.CGFloat x = v99;
    v223.origin.CGFloat y = v100;
    v223.size.double width = v101;
    v223.size.CGFloat height = v102;
    CGRect v219 = CGRectIntersection(v218, v223);
    double v122 = v219.size.width;
    uint64_t v123 = objc_opt_class();
    uint64_t v128 = objc_msgSend_polygonForStrokes_(v123, v124, (uint64_t)v29, v125, v126, v127);
    uint64_t v134 = objc_msgSend_polygonDrawing(v128, v129, v130, v131, v132, v133);
    objc_msgSend_bounds(v134, v135, v136, v137, v138, v139);
    double v141 = v140;

    uint64_t v191 = objc_msgSend_polygonByIntersectingWithClipPolygon_(*(void **)(a1 + 72), v142, (uint64_t)v128, v143, v144, v145);
    uint64_t v151 = objc_msgSend_polygonDrawing(v191, v146, v147, v148, v149, v150);
    objc_msgSend_bounds(v151, v152, v153, v154, v155, v156);
    double v158 = v157;

    double v159 = v122 / width;
    double v160 = v158 / fmax(v141, 0.00001);
    BOOL v161 = v160 >= 0.5 && v159 >= 0.5;
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v162 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v162, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v168 = objc_msgSend_string(v193, v163, v164, v165, v166, v167);
      double v169 = (void *)v168;
      CGFloat v170 = @"NO";
      *(_DWORD *)long long buf = 138413059;
      if (v161) {
        CGFloat v170 = @"YES";
      }
      uint64_t v203 = v170;
      __int16 v204 = 2048;
      double v205 = v159;
      __int16 v206 = 2048;
      double v207 = v160;
      __int16 v208 = 2117;
      uint64_t v209 = v168;
      _os_log_impl(&dword_1C492D000, v162, OS_LOG_TYPE_DEBUG, "ScratchOut: isTokenFullyCovered: %@, intersectingRectWidthRatio %.2f, areaRatio %.2f, token: %{sensitive}@", buf, 0x2Au);
    }
    if (v161)
    {
      int v176 = 1;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = 1;
      if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24)) {
        goto LABEL_49;
      }
    }
    else if (objc_msgSend_count(v92, v171, v172, v173, v174, v175))
    {
      objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 80), v171, (uint64_t)v92, v173, v174, v175);
      int v176 = 1;
      if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24))
      {
LABEL_49:
        if (v161)
        {
          *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = objc_msgSend_count(*(void **)(a1 + 56), v171, v172, v173, v174, v175);
        }
        else if (!v176)
        {
LABEL_53:
          if (*(unsigned char *)(*(void *)(*(void *)(a1 + 96) + 8) + 24))
          {
            objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 64), v171, (uint64_t)v30, v173, v174, v175);
            if (qword_1EA3CA000 != -1) {
              dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
            }
            uint64_t v177 = (id)qword_1EA3C9FA0;
            if (os_log_type_enabled(v177, OS_LOG_TYPE_DEBUG))
            {
              objc_msgSend_string(v193, v178, v179, v180, v181, v182);
              CGFloat v183 = (__CFString *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)long long buf = 138739971;
              uint64_t v203 = v183;
              _os_log_impl(&dword_1C492D000, v177, OS_LOG_TYPE_DEBUG, "ScratchOut: paragraph-level result augmented with tentative token: %{sensitive}@", buf, 0xCu);
            }
          }
          if ((v161 | v176) == 1)
          {
            *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 24) = objc_msgSend_count(*(void **)(a1 + 64), v171, v172, v173, v174, v175);
            if (qword_1EA3CA000 != -1) {
              dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
            }
            CGFloat v184 = (id)qword_1EA3C9FA0;
            if (os_log_type_enabled(v184, OS_LOG_TYPE_DEBUG))
            {
              objc_msgSend_string(v193, v185, v186, v187, v188, v189);
              uint64_t v190 = (__CFString *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)long long buf = 138739971;
              uint64_t v203 = v190;
              _os_log_impl(&dword_1C492D000, v184, OS_LOG_TYPE_DEBUG, "ScratchOut: committing paragraph-level result at token: %{sensitive}@", buf, 0xCu);
            }
          }

LABEL_66:
          goto LABEL_67;
        }
        *(unsigned char *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) = 1;
        goto LABEL_53;
      }
    }
    else
    {
      int v176 = 0;
      if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24)) {
        goto LABEL_49;
      }
    }
    objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 56), v171, (uint64_t)v30, v173, v174, v175);
    goto LABEL_49;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24)) {
    objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 56), v63, (uint64_t)v30, v65, v66, v67);
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 96) + 8) + 24))
  {
    objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 64), v63, (uint64_t)v30, v65, v66, v67);
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v92 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v92, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend_string(v193, v93, v94, v95, v96, v97);
      uint64_t v98 = (__CFString *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)long long buf = 138739971;
      uint64_t v203 = v98;
      _os_log_impl(&dword_1C492D000, v92, OS_LOG_TYPE_DEBUG, "ScratchOut: paragraph-level result augmented with tentative token: %{sensitive}@", buf, 0xCu);
    }
    goto LABEL_66;
  }
LABEL_67:
}

void sub_1C4BAD8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4BADB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4BADBD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BADBF8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], a2, a3, a4, a5, a6);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(a1 + 40);
  id v43 = 0;
  id v44 = 0;
  uint64_t v10 = sub_1C4BA446C(v8, v9, 2, 1, 1, &v44, &v43, *(void **)(a1 + 64));
  id v11 = v44;
  id v17 = v43;
  if (v10)
  {
    objc_msgSend_timeIntervalSinceNow(v7, v12, v13, v14, v15, v16);
    double v19 = v18;
    uint64_t v20 = [CHTextTransformationManager alloc];
    uint64_t v22 = objc_msgSend_initWithContextStrokes_relatedNonTextStrokes_parameters_contextResults_strokeGroupingResult_strokeClassificationResult_strokeProvider_excludedStrokeTypes_extractFromRefinablePath_(v20, v21, *(void *)(a1 + 40), MEMORY[0x1E4F1CBF0], *(void *)(a1 + 48), (uint64_t)v10, v11, v17, *(void *)(*(void *)(a1 + 32) + 24), 0, 0);
    uint64_t v28 = v22;
    if (v22)
    {
      objc_msgSend_transformWithProgress_shouldCancel_(v22, v23, *(void *)(a1 + 56), *(void *)(a1 + 64), v26, v27);
      id v29 = v46;
    }
    else
    {
      id v29 = 0;
      long long buf = 0uLL;
      id v46 = 0;
    }
    double v36 = v19 * -1000.0;
    *(float *)&double v36 = v19 * -1000.0;
    uint64_t v37 = objc_msgSend_numberWithFloat_(NSNumber, v23, v24, v25, v26, v27, v36);
    objc_msgSend_setValue_forKey_(v29, v38, (uint64_t)v37, @"time_for_recognition_ms", v39, v40);

    int v41 = (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16))();
    uint64_t v42 = *(void *)(a1 + 72);
    if (v41) {
      (*(void (**)(uint64_t, void, void, void))(v42 + 16))(v42, MEMORY[0x1E4F1CBF0], MEMORY[0x1E4F1CBF0], MEMORY[0x1E4F1CC08]);
    }
    else {
      (*(void (**)(uint64_t, void, void, id))(v42 + 16))(v42, buf, *((void *)&buf + 1), v46);
    }
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v28 = (id)qword_1EA3C9FE0;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      uint64_t v35 = objc_msgSend_count(*(void **)(a1 + 40), v30, v31, v32, v33, v34);
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = v35;
      _os_log_impl(&dword_1C492D000, v28, OS_LOG_TYPE_ERROR, "Unable to build stroke point transformation result for input with %ld context strokes", (uint8_t *)&buf, 0xCu);
    }
  }
}

void sub_1C4BADE9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id *sub_1C4BADF0C(id *a1)
{
  return a1;
}

id sub_1C4BADF48(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v189 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v133 = a3;
  id v134 = a4;
  id v135 = a5;
  if (!a1)
  {
    id v123 = 0;
    goto LABEL_21;
  }
  uint64_t v177 = 0;
  uint64_t v178 = &v177;
  uint64_t v179 = 0x3032000000;
  uint64_t v180 = sub_1C4B9763C;
  uint64_t v181 = sub_1C4B9764C;
  objc_msgSend_array(MEMORY[0x1E4F1CA48], v10, v11, v12, v13, v14);
  id v182 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v20 = objc_msgSend_textResult(v9, v15, v16, v17, v18, v19);
  uint64_t v26 = objc_msgSend_refinableTranscriptionPath(v20, v21, v22, v23, v24, v25);

  uint64_t v32 = objc_msgSend_textResult(v9, v27, v28, v29, v30, v31);
  uint64_t v132 = objc_msgSend_refinableTranscription(v32, v33, v34, v35, v36, v37);

  uint64_t v130 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v38, v39, v40, v41, v42);
  uint64_t v128 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v43, v44, v45, v46, v47);
  uint64_t v169 = 0;
  CGFloat v170 = &v169;
  uint64_t v171 = 0x4012000000;
  uint64_t v172 = sub_1C4BAE86C;
  uint64_t v173 = nullsub_44;
  uint64_t v174 = &unk_1C4CB5C62;
  uint64_t v176 = 0;
  uint64_t v175 = 0;
  v165[0] = MEMORY[0x1E4F143A8];
  v165[1] = 3221225472;
  v165[2] = sub_1C4BAECA8;
  v165[3] = &unk_1E64E4C28;
  v165[4] = a1;
  id v166 = v134;
  id v48 = v135;
  id v167 = v48;
  uint64_t v168 = &v177;
  uint64_t v129 = (void *)MEMORY[0x1C8786E90](v165);
  v162[0] = MEMORY[0x1E4F143A8];
  v162[1] = 3221225472;
  v162[2] = sub_1C4BAF070;
  v162[3] = &unk_1E64E4C50;
  id v163 = v48;
  uint64_t v164 = &v177;
  uint64_t v131 = (void *)MEMORY[0x1C8786E90](v162);
  CGFloat v49 = objc_opt_class();
  objc_msgSend_autoRefineTriggerFactor(v49, v50, v51, v52, v53, v54);
  double v56 = v55;
  uint64_t v158 = 0;
  double v159 = &v158;
  uint64_t v160 = 0x2020000000;
  uint64_t v161 = 0;
  uint64_t v154 = 0;
  uint64_t v155 = &v154;
  uint64_t v156 = 0x2020000000;
  uint64_t v157 = 0;
  uint64_t v150 = 0;
  uint64_t v151 = (double *)&v150;
  uint64_t v152 = 0x2020000000;
  uint64_t v153 = 0;
  CGFloat v62 = objc_msgSend_textResult(v9, v57, v58, v59, v60, v61);
  uint64_t v68 = objc_msgSend_textResult(v9, v63, v64, v65, v66, v67);
  uint64_t v74 = objc_msgSend_tokenColumnCount(v68, v69, v70, v71, v72, v73);
  v149[0] = MEMORY[0x1E4F143A8];
  v149[1] = 3221225472;
  v149[2] = sub_1C4BAF16C;
  v149[3] = &unk_1E64E4C78;
  v149[4] = &v150;
  v149[5] = &v158;
  v149[6] = &v154;
  objc_msgSend_enumerateTokensInTranscriptionPath_columnRange_tokenProcessingBlock_(v62, v75, (uint64_t)v26, 0, v74, (uint64_t)v149);

  uint64_t v81 = v155[3];
  if (v81 <= 0)
  {
    v151[3] = 0.0;
LABEL_7:
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v84 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v90 = objc_msgSend_textResult(v9, v85, v86, v87, v88, v89);
      uint64_t v96 = objc_msgSend_topTranscription(v90, v91, v92, v93, v94, v95);
      uint64_t v97 = v155[3];
      uint64_t v98 = v159[3];
      uint64_t v99 = *((void *)v151 + 3);
      *(_DWORD *)long long buf = 138740995;
      *(void *)&uint8_t buf[4] = v96;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v97;
      *(_WORD *)&buf[22] = 2048;
      uint64_t v184 = v98;
      __int16 v185 = 2048;
      uint64_t v186 = v99;
      __int16 v187 = 1024;
      int v188 = 0;
      _os_log_impl(&dword_1C492D000, v84, OS_LOG_TYPE_DEFAULT, "Line synthesis for Refine or AutoRefine processed. string: \"%{sensitive}@\", token count = %ld, refinable tokens: %ld, averageOrientation %.2f, -> Line orientation refinable ? %d.", buf, 0x30u);
    }
    char v83 = 0;
    goto LABEL_12;
  }
  double v82 = v151[3] / (double)v81;
  v151[3] = v82;
  if ((double)v81 * 0.5 >= (double)v159[3] || v82 > 0.6) {
    goto LABEL_7;
  }
  char v83 = 1;
LABEL_12:
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x2020000000;
  LOBYTE(v184) = 0;
  CGFloat v100 = objc_msgSend_textResult(v9, v76, v77, v78, v79, v80);
  uint64_t v106 = objc_msgSend_textResult(v9, v101, v102, v103, v104, v105);
  uint64_t v112 = objc_msgSend_tokenColumnCount(v106, v107, v108, v109, v110, v111);
  float v113 = v56;
  v136[0] = MEMORY[0x1E4F143A8];
  v136[1] = 3221225472;
  v136[2] = sub_1C4BAF238;
  v136[3] = &unk_1E64E4CA0;
  uint64_t v145 = buf;
  v136[4] = a1;
  float v147 = v113 * 0.75;
  char v148 = v83;
  uint64_t v146 = &v169;
  id v114 = v132;
  id v137 = v114;
  id v142 = &unk_1F2013C08;
  id v115 = v128;
  id v138 = v115;
  id v116 = v129;
  id v143 = v116;
  id v117 = v131;
  id v144 = v117;
  id v118 = v130;
  id v139 = v118;
  id v140 = v9;
  id v141 = v133;
  objc_msgSend_enumerateTokensInTranscriptionPath_columnRange_tokenProcessingBlock_(v100, v119, (uint64_t)v26, 0, v112, (uint64_t)v136);

  if (*(unsigned char *)(*(void *)&buf[8] + 24))
  {
    id v123 = 0;
  }
  else
  {
    uint64_t v124 = v170[7];
    if (v124)
    {
      uint64_t v125 = objc_msgSend_substringWithRange_(v114, v120, v170[6], v124, v121, v122);
      if (sub_1C4BAE87C((uint64_t)v125, v115, v125)) {
        uint64_t v126 = (void (**)(id, id, void *))v116;
      }
      else {
        uint64_t v126 = (void (**)(id, id, void *))v117;
      }
      v126[2](v126, v115, v125);
    }
    id v123 = (id)v178[5];
  }

  _Block_object_dispose(buf, 8);
  _Block_object_dispose(&v150, 8);
  _Block_object_dispose(&v154, 8);
  _Block_object_dispose(&v158, 8);

  _Block_object_dispose(&v169, 8);
  _Block_object_dispose(&v177, 8);

LABEL_21:
  return v123;
}

void sub_1C4BAE674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,id a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose((const void *)(v69 - 192), 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a49, 8);

  _Block_object_dispose(&a67, 8);
  _Block_object_dispose((const void *)(v69 - 240), 8);

  _Unwind_Resume(a1);
}

__n128 sub_1C4BAE86C(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

uint64_t sub_1C4BAE87C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  id v5 = a3;
  uint64_t v11 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v6, v7, v8, v9, v10);
  uint64_t v17 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v12, v13, v14, v15, v16);
  uint64_t v85 = MEMORY[0x1E4F143A8];
  uint64_t v86 = 3221225472;
  uint64_t v87 = sub_1C4BAEC2C;
  uint64_t v88 = &unk_1E64E4B68;
  id v18 = v11;
  id v89 = v18;
  id v19 = v17;
  id v90 = v19;
  objc_msgSend_enumerateObjectsUsingBlock_(v4, v20, (uint64_t)&v85, v21, v22, v23);
  if (!objc_msgSend_count(v18, v24, v25, v26, v27, v28, v85, v86, v87, v88)
    || (unint64_t)objc_msgSend_count(v19, v29, v30, v31, v32, v33) > 2)
  {
    goto LABEL_13;
  }
  uint64_t v38 = objc_msgSend_objectsAtIndexes_(v4, v34, (uint64_t)v18, v35, v36, v37);
  objc_msgSend_boundsForStrokes_(CHStrokeUtilities, v39, (uint64_t)v38, v40, v41, v42);
  CGFloat v44 = v43;
  CGFloat v46 = v45;
  double v48 = v47;
  double v50 = v49;

  double v55 = objc_msgSend_objectsAtIndexes_(v4, v51, (uint64_t)v19, v52, v53, v54);
  objc_msgSend_boundsForStrokes_(CHStrokeUtilities, v56, (uint64_t)v55, v57, v58, v59);
  CGFloat v61 = v60;
  CGFloat v63 = v62;
  double v65 = v64;
  double v67 = v66;

  v106.origin.CGFloat x = v44;
  v106.origin.CGFloat y = v46;
  v106.size.double width = v48;
  v106.size.CGFloat height = v50;
  v108.origin.CGFloat x = v61;
  v108.origin.CGFloat y = v63;
  v108.size.double width = v65;
  v108.size.CGFloat height = v67;
  CGRect v107 = CGRectIntersection(v106, v108);
  if (v65 > v48 * 0.3 || v67 > v50 * 0.5) {
    goto LABEL_13;
  }
  BOOL v69 = v107.size.width <= v65 * 0.5;
  if (v107.size.height > v67 * 0.5) {
    BOOL v69 = 0;
  }
  if (v65 < v48 * 0.2 || v67 < v50 * 0.2 || v69)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v72 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v78 = objc_msgSend_count(v19, v73, v74, v75, v76, v77);
      uint64_t v84 = objc_msgSend_count(v18, v79, v80, v81, v82, v83);
      *(_DWORD *)long long buf = 138741507;
      id v92 = v5;
      __int16 v93 = 2048;
      uint64_t v94 = v78;
      __int16 v95 = 2048;
      double v96 = v65;
      __int16 v97 = 2048;
      double v98 = v67;
      __int16 v99 = 2048;
      uint64_t v100 = v84;
      __int16 v101 = 2048;
      double v102 = v48;
      __int16 v103 = 2048;
      double v104 = v50;
      _os_log_impl(&dword_1C492D000, v72, OS_LOG_TYPE_DEFAULT, "Token synthesis for Refine or AutoRefine skipped. string: \"%{sensitive}@\", new strokes %ld with bounds = %.2f,%.2f, refined strokes %ld with bounds = %.2f,%.2f", buf, 0x48u);
    }

    uint64_t v70 = 0;
  }
  else
  {
LABEL_13:
    uint64_t v70 = 1;
  }

  return v70;
}

void sub_1C4BAEBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4BAEC2C(uint64_t a1, void *a2, uint64_t a3)
{
  id v16 = a2;
  char v10 = objc_msgSend_strokeAttributes(v16, v5, v6, v7, v8, v9);
  uint64_t v15 = 32;
  if ((v10 & 4) == 0) {
    uint64_t v15 = 40;
  }
  objc_msgSend_addIndex_(*(void **)(a1 + v15), v11, a3, v12, v13, v14);
}

void sub_1C4BAEC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BAECA8(void *a1, void *a2, void *a3)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  id v79 = a2;
  id v80 = a3;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  id v5 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138740227;
    uint64_t v82 = (uint64_t)v80;
    __int16 v83 = 2048;
    uint64_t v84 = objc_msgSend_count(v79, v6, v7, v8, v9, v10);
    _os_log_impl(&dword_1C492D000, v5, OS_LOG_TYPE_DEFAULT, "AutoRefine Triggering synthesis for %{sensitive}@ with %ld strokes", buf, 0x16u);
  }

  uint64_t v12 = (void *)a1[4];
  uint64_t v11 = (void *)a1[5];
  uint64_t v13 = (void *)a1[6];
  id v14 = v79;
  id v15 = v11;
  id v16 = v80;
  id v17 = v13;
  if (v12)
  {
    id v18 = objc_opt_class();
    uint64_t v20 = objc_msgSend_createDrawingForStrokes_interpolationType_resolution_cancellationBlock_(v18, v19, (uint64_t)v14, 1, 2, (uint64_t)v17);
    if (objc_msgSend_strokeCount(v20, v21, v22, v23, v24, v25))
    {
      uint64_t v30 = objc_msgSend_sortedDrawingUsingStrokeMidPoint_(v20, v26, 0, v27, v28, v29);

      uint64_t v41 = objc_msgSend_textSynthesizer(v12, v31, v32, v33, v34, v35);
      if (v15)
      {
        uint64_t v42 = objc_msgSend_synthesisOptionsWithStyleStrength_(CHSynthesisRequestOptions, v36, (uint64_t)v15, v38, v39, v40);
        objc_msgSend_dictionary(v42, v43, v44, v45, v46, v47, v79);
      }
      else
      {
        uint64_t v42 = 0;
        objc_msgSend_dictionary(0, v36, v37, v38, v39, v40, v79);
      double v48 = };
      uint64_t v12 = objc_msgSend_refineDrawing_transcription_options_shouldCancel_error_(v41, v49, v30, (uint64_t)v16, (uint64_t)v48, (uint64_t)v17, 0);

      uint64_t v20 = (void *)v30;
    }
    else
    {
      uint64_t v12 = 0;
    }
  }
  if (!v12
    || (objc_msgSend_drawing(v12, v50, v51, v52, v53, v54),
        double v55 = objc_claimAutoreleasedReturnValue(),
        BOOL v61 = objc_msgSend_strokeCount(v55, v56, v57, v58, v59, v60) == 0,
        v55,
        v61))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    double v66 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
    {
      uint64_t v72 = objc_msgSend_length(v16, v67, v68, v69, v70, v71);
      uint64_t v78 = objc_msgSend_count(v14, v73, v74, v75, v76, v77);
      *(_DWORD *)long long buf = 134218499;
      uint64_t v82 = v72;
      __int16 v83 = 2117;
      uint64_t v84 = (uint64_t)v16;
      __int16 v85 = 2048;
      uint64_t v86 = v78;
      _os_log_impl(&dword_1C492D000, v66, OS_LOG_TYPE_ERROR, "Chunk synthesis for AutoRefine failed, chunk length = %ld, string = %{sensitive}@, strokes to replace = %ld", buf, 0x20u);
    }
  }
  else
  {
    objc_msgSend_addObject_(*(void **)(*(void *)(a1[7] + 8) + 40), v62, (uint64_t)v12, v63, v64, v65);
  }
}

void sub_1C4BAEFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BAF070(uint64_t a1, void *a2, void *a3)
{
  id v18 = a2;
  id v5 = a3;
  uint64_t v6 = objc_opt_class();
  uint64_t v8 = objc_msgSend_createDrawingForStrokes_interpolationType_resolution_cancellationBlock_(v6, v7, (uint64_t)v18, 1, 2, *(void *)(a1 + 32));
  uint64_t v9 = [CHSynthesisResult alloc];
  uint64_t v13 = objc_msgSend_initWithContent_drawing_(v9, v10, (uint64_t)v5, (uint64_t)v8, v11, v12);
  objc_msgSend_addObject_(*(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v14, (uint64_t)v13, v15, v16, v17);
}

void sub_1C4BAF12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BAF154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BAF16C(void *a1, void *a2)
{
  id v17 = a2;
  objc_msgSend_principalOrientation(v17, v3, v4, v5, v6, v7);
  *(double *)(*(void *)(a1[4] + 8) + 24) = fabs(v8) + *(double *)(*(void *)(a1[4] + 8) + 24);
  objc_msgSend_principalOrientation(v17, v9, v10, v11, v12, v13);
  uint64_t v15 = *(void *)(a1[5] + 8);
  uint64_t v16 = *(void *)(v15 + 24);
  if (fabs(v14) <= 0.6) {
    ++v16;
  }
  *(void *)(v15 + 24) = v16;
  ++*(void *)(*(void *)(a1[6] + 8) + 24);
}

void sub_1C4BAF210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BAF224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BAF238(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  v337[1] = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  uint64_t v12 = v6;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 104) + 8) + 24))
  {
    char v13 = objc_msgSend_properties(v6, v7, v8, v9, v10, v11);
    id v19 = objc_msgSend_string(v12, v14, v15, v16, v17, v18);
    uint64_t v25 = objc_msgSend_length(v19, v20, v21, v22, v23, v24);
    unint64_t v26 = v13 & 0x20;

    if (*a4) {
      BOOL v32 = 0;
    }
    else {
      BOOL v32 = a4[2] == 0;
    }
    int v33 = (v13 & 0x20) == 0 || v32;
    uint64_t v34 = NSString;
    uint64_t v35 = objc_msgSend_string(v12, v27, v28, v29, v30, v31);
    uint64_t v40 = (void *)v35;
    if (v33) {
      objc_msgSend_stringWithFormat_(v34, v36, @"%@%@", v37, v38, v39, &stru_1F20141C8, v35);
    }
    else {
    id v317 = objc_msgSend_stringWithFormat_(v34, v36, @"%@%@", v37, v38, v39, @" ", v35);
    }

    uint64_t v46 = objc_msgSend_textSynthesizer(*(void **)(a1 + 32), v41, v42, v43, v44, v45);
    uint64_t v52 = objc_msgSend_string(v12, v47, v48, v49, v50, v51);
    uint64_t v336 = CHTextSynthesisOptionSupportedCharactersStrict;
    v337[0] = MEMORY[0x1E4F1CC38];
    double v55 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v53, (uint64_t)v337, (uint64_t)&v336, 1, v54);
    uint64_t v319 = objc_msgSend_supportedCharacterIndexesForString_options_(v46, v56, (uint64_t)v52, (uint64_t)v55, v57, v58);

    uint64_t v64 = objc_msgSend_count(v319, v59, v60, v61, v62, v63);
    objc_msgSend_recognitionScore(v12, v65, v66, v67, v68, v69);
    double v71 = v70;
    float v72 = *(float *)(a1 + 120);
    int hasValidPrincipalLines = objc_msgSend_hasValidPrincipalLines(v12, v73, v74, v75, v76, v77);
    objc_msgSend_principalOrientation(v12, v79, v80, v81, v82, v83);
    double v90 = v89;
    if ((hasValidPrincipalLines & 1) == 0)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v91 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v91, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v321 = (uint64_t)v12;
        _os_log_impl(&dword_1C492D000, v91, OS_LOG_TYPE_FAULT, "Token %@ should have valid principal lines.", buf, 0xCu);
      }
    }
    double v92 = v72;
    double v93 = fabs(v90);
    if (*(unsigned char *)(a1 + 124)) {
      BOOL v94 = v64 == v25;
    }
    else {
      BOOL v94 = 0;
    }
    int v95 = v94;
    if (v71 <= v92) {
      int v95 = 0;
    }
    if (v93 > 0.6) {
      int v95 = 0;
    }
    int v318 = v95;
    uint64_t v96 = *(void *)(*(void *)(a1 + 112) + 8);
    uint64_t v97 = *(void *)(v96 + 56);
    uint64_t v316 = v25 + (v33 ^ 1u);
    if ((unint64_t)(v97 + v316) >= 0x2E)
    {
      uint64_t v98 = *(void *)(v96 + 48);
      if (v98 + v97 <= (unint64_t)objc_msgSend_length(*(void **)(a1 + 40), v84, v85, v86, v87, v88))
      {
        double v102 = objc_msgSend_substringWithRange_(*(void **)(a1 + 40), v99, *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 48), *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 56), v100, v101);
        int v127 = (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16))();
        uint64_t v128 = 96;
        if (v127) {
          uint64_t v128 = 88;
        }
        (*(void (**)(void))(*(void *)(a1 + v128) + 16))();
        uint64_t v129 = *(void *)(*(void *)(a1 + 112) + 8);
        *(void *)(v129 + 48) += *(void *)(v129 + 56);
        *(void *)(v129 + 56) = 0;
        objc_msgSend_removeAllObjects(*(void **)(a1 + 48), v130, v131, v132, v133, v134);
        objc_msgSend_removeAllObjects(*(void **)(a1 + 56), v135, v136, v137, v138, v139);
      }
      else
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        double v102 = (id)qword_1EA3C9F90[0];
        if (os_log_type_enabled(v102, OS_LOG_TYPE_FAULT))
        {
          uint64_t v108 = *(void *)(*(void *)(a1 + 112) + 8);
          uint64_t v312 = *(void *)(v108 + 48);
          uint64_t v314 = *(void **)(v108 + 56);
          uint64_t v109 = *(void **)(a1 + 40);
          uint64_t v313 = objc_msgSend_length(v109, v103, v104, v105, v106, v107);
          uint64_t v315 = objc_msgSend_string(v12, v110, v111, v112, v113, v114);
          CGFloat v120 = objc_msgSend_string(v12, v115, v116, v117, v118, v119);
          uint64_t v126 = objc_msgSend_length(v120, v121, v122, v123, v124, v125);
          *(_DWORD *)long long buf = 134219779;
          uint64_t v321 = v312;
          __int16 v322 = 2048;
          uint64_t v323 = v314;
          __int16 v324 = 2117;
          uint64_t v325 = (uint64_t)v109;
          __int16 v326 = 2048;
          *(void *)long long v327 = v313;
          *(_WORD *)&v327[8] = 2117;
          *(void *)uint64_t v328 = v315;
          *(_WORD *)&v328[8] = 2048;
          uint64_t v329 = v126;
          *(_WORD *)uint64_t v330 = 1024;
          *(_DWORD *)&v330[2] = v26 >> 5;
          LOWORD(v331) = 1024;
          *(_DWORD *)((char *)&v331 + 2) = v32;
          _os_log_impl(&dword_1C492D000, v102, OS_LOG_TYPE_FAULT, "Unexpected currentRange = (%ld, %ld), vs transcription %{sensitive}@, length = %ld - after handling token %{sensitive}@, length = %ld, hasPrecedingSpace ? %d, isFirstToken ? %d", buf, 0x4Au);
        }
      }
    }
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    id v140 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT))
    {
      if (v318) {
        uint64_t v146 = @"processed";
      }
      else {
        uint64_t v146 = @"skipped";
      }
      float v147 = objc_msgSend_string(v12, v141, v142, v143, v144, v145);
      objc_msgSend_recognitionScore(v12, v148, v149, v150, v151, v152);
      uint64_t v154 = v153;
      float v155 = *(float *)(a1 + 120);
      objc_msgSend_principalOrientation(v12, v156, v157, v158, v159, v160);
      int v162 = *(unsigned __int8 *)(a1 + 124);
      *(_DWORD *)long long buf = 138414851;
      uint64_t v321 = (uint64_t)v146;
      __int16 v322 = 2117;
      uint64_t v323 = v147;
      id v163 = @"fallback refine";
      __int16 v324 = 2048;
      uint64_t v325 = v154;
      if (v318) {
        id v163 = @"refine";
      }
      __int16 v326 = 1024;
      *(_DWORD *)long long v327 = v64 == v25;
      *(_WORD *)&v327[4] = 1024;
      *(_DWORD *)&v327[6] = v71 > v92;
      *(_WORD *)uint64_t v328 = 2048;
      *(double *)&v328[2] = v155;
      LOWORD(v329) = 1024;
      *(_DWORD *)((char *)&v329 + 2) = hasValidPrincipalLines;
      HIWORD(v329) = 1024;
      *(_DWORD *)uint64_t v330 = v93 <= 0.6;
      *(_WORD *)&v330[4] = 2048;
      uint64_t v331 = v161;
      __int16 v332 = 1024;
      int v333 = v162;
      __int16 v334 = 2112;
      uint64_t v335 = v163;
      _os_log_impl(&dword_1C492D000, v140, OS_LOG_TYPE_DEFAULT, "Token synthesis for Refine or AutoRefine %@. string: \"%{sensitive}@\" (p=%1.2f), supported ? %d sufficiently confident ? %d (thresholCGFloat d = %.2f), hasValidPrincipalLines ? %d, hasRefinableOrientation ? %d (angle = %.2f). Line orientation refinable ? %d. Applying %@ behavior.", buf, 0x5Cu);
    }
    uint64_t v169 = objc_msgSend_strokeIndexes(v12, v164, v165, v166, v167, v168);
    IndeCGFloat x = objc_msgSend_lastIndex(v169, v170, v171, v172, v173, v174);
    uint64_t v181 = objc_msgSend_textResult(*(void **)(a1 + 64), v176, v177, v178, v179, v180);
    __int16 v187 = objc_msgSend_inputStrokeIdentifiers(v181, v182, v183, v184, v185, v186);
    LOBYTE(Index) = Index < objc_msgSend_count(v187, v188, v189, v190, v191, v192);

    if (Index)
    {
      if (v318)
      {
        long long v198 = objc_msgSend_textResult(*(void **)(a1 + 64), v193, v194, v195, v196, v197);
        __int16 v204 = objc_msgSend_inputStrokeIdentifiers(v198, v199, v200, v201, v202, v203);
        uint64_t v210 = objc_msgSend_strokeIndexes(v12, v205, v206, v207, v208, v209);
        CGRect v215 = objc_msgSend_objectsAtIndexes_(v204, v211, (uint64_t)v210, v212, v213, v214);

        CGRect v216 = *(void **)(a1 + 56);
        CGRect v217 = objc_opt_class();
        CGRect v221 = objc_msgSend_strokeIdentifiersForData_withStrokeProvider_(v217, v218, (uint64_t)v215, *(void *)(a1 + 72), v219, v220);
        objc_msgSend_addObjectsFromArray_(v216, v222, (uint64_t)v221, v223, v224, v225);

        uint64_t v226 = *(void **)(a1 + 48);
        uint64_t v227 = objc_opt_class();
        uint64_t v231 = objc_msgSend_strokesForIdentifiers_inStrokeProvider_(v227, v228, (uint64_t)v215, *(void *)(a1 + 72), v229, v230);
        objc_msgSend_addObjectsFromArray_(v226, v232, (uint64_t)v231, v233, v234, v235);

        *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 56) += v316;
      }
      else
      {
        uint64_t v273 = *(void *)(*(void *)(a1 + 112) + 8);
        uint64_t v274 = *(void *)(v273 + 56);
        if (v274)
        {
          uint64_t v275 = objc_msgSend_substringWithRange_(*(void **)(a1 + 40), v193, *(void *)(v273 + 48), v274, v196, v197);
          int v276 = (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16))();
          uint64_t v277 = 96;
          if (v276) {
            uint64_t v277 = 88;
          }
          (*(void (**)(void))(*(void *)(a1 + v277) + 16))();
        }
        uint64_t v278 = objc_msgSend_textResult(*(void **)(a1 + 64), v193, v194, v274, v196, v197);
        uint64_t v284 = objc_msgSend_inputStrokeIdentifiers(v278, v279, v280, v281, v282, v283);
        id v290 = objc_msgSend_strokeIndexes(v12, v285, v286, v287, v288, v289);
        uint64_t v295 = objc_msgSend_objectsAtIndexes_(v284, v291, (uint64_t)v290, v292, v293, v294);

        uint64_t v296 = objc_opt_class();
        uint64_t v300 = objc_msgSend_strokesForIdentifiers_inStrokeProvider_(v296, v297, (uint64_t)v295, *(void *)(a1 + 72), v298, v299);
        (*(void (**)(void))(*(void *)(a1 + 96) + 16))();
        uint64_t v301 = *(void *)(*(void *)(a1 + 112) + 8);
        *(void *)(v301 + 48) += v316 + *(void *)(v301 + 56);
        *(void *)(v301 + 56) = 0;
        objc_msgSend_removeAllObjects(*(void **)(a1 + 48), v302, v303, v304, v305, v306);
        objc_msgSend_removeAllObjects(*(void **)(a1 + 56), v307, v308, v309, v310, v311);
      }
    }
    else
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v236 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v236, OS_LOG_TYPE_FAULT))
      {
        uint64_t v242 = objc_msgSend_textResult(*(void **)(a1 + 64), v237, v238, v239, v240, v241);
        uint64_t v248 = objc_msgSend_inputStrokeIdentifiers(v242, v243, v244, v245, v246, v247);
        uint64_t v254 = objc_msgSend_count(v248, v249, v250, v251, v252, v253);
        uint64_t v260 = objc_msgSend_strokeIndexes(v12, v255, v256, v257, v258, v259);
        uint64_t v266 = objc_msgSend_description(v260, v261, v262, v263, v264, v265);
        uint64_t v272 = objc_msgSend_properties(v12, v267, v268, v269, v270, v271);
        *(_DWORD *)long long buf = 134218498;
        uint64_t v321 = v254;
        __int16 v322 = 2112;
        uint64_t v323 = v266;
        __int16 v324 = 2048;
        uint64_t v325 = v272;
        _os_log_impl(&dword_1C492D000, v236, OS_LOG_TYPE_FAULT, "Error: contextualResult.textResult.inputStrokeIdentifiers has %ld strokes. Incompatible with token stroke indexes %@ and properties=%lu", buf, 0x20u);
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = 1;
    }
  }
}

void sub_1C4BAFB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB05B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,void *a43,void *a44)
{
  _Unwind_Resume(a1);
}

id sub_1C4BB0760(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v72 = a2;
  id v9 = a3;
  id v15 = a4;
  if (a1)
  {
    uint64_t v16 = objc_msgSend_textResult(v9, v10, v11, v12, v13, v14);
    uint64_t v22 = objc_msgSend_textResult(v9, v17, v18, v19, v20, v21);
    uint64_t v28 = objc_msgSend_refinableTranscriptionPath(v22, v23, v24, v25, v26, v27);
    uint64_t v34 = objc_msgSend_textResult(v9, v29, v30, v31, v32, v33);
    uint64_t v40 = objc_msgSend_refinableTranscription(v34, v35, v36, v37, v38, v39);
    uint64_t v46 = objc_msgSend_length(v40, v41, v42, v43, v44, v45);
    uint64_t v49 = objc_msgSend_tokensFromTranscriptionPath_characterRange_(v16, v47, (uint64_t)v28, 0, v46, v48);

    uint64_t v50 = objc_opt_class();
    double v56 = objc_msgSend_textResult(v9, v51, v52, v53, v54, v55);
    uint64_t v62 = objc_msgSend_inputStrokeIdentifiers(v56, v57, v58, v59, v60, v61);
    uint64_t v66 = objc_msgSend_strokeIdentifiersForData_withStrokeProvider_(v50, v63, (uint64_t)v62, (uint64_t)v15, v64, v65);

    uint64_t v67 = objc_opt_class();
    id v73 = 0;
    a1 = objc_msgSend_alignReflowableTokens_resultTokens_strokeIdentifiers_outStrokeIdentifiers_(v67, v68, (uint64_t)v72, (uint64_t)v49, (uint64_t)v66, (uint64_t)&v73);
    id v69 = v73;
    double v70 = v69;
    if (a5) {
      *a5 = v69;
    }
  }
  return a1;
}

void sub_1C4BB090C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB0990()
{
  JUMPOUT(0x1C4BB0998);
}

void sub_1C4BB0C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB0D08(uint64_t a1)
{
  uint64_t v213 = *MEMORY[0x1E4F143B8];
  if (!(*(unsigned int (**)(void))(*(void *)(a1 + 72) + 16))())
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(id *)(a1 + 40);
    id v9 = v4;
    if (v3)
    {
      uint64_t v10 = objc_msgSend_forcedCachedContextualResultCoveringStrokes_(*(void **)(v3 + 8), v5, (uint64_t)v4, v6, v7, v8);

      if (v10)
      {
        uint64_t v16 = *(void **)(a1 + 32);
        uint64_t v17 = objc_msgSend_latestStrokeProvider(v16, v11, v12, v13, v14, v15);
        uint64_t v190 = sub_1C4BADF48((uint64_t)v16, v10, v17, *(void **)(a1 + 56), *(void **)(a1 + 72));

        uint64_t v192 = v10;
        uint64_t v23 = objc_msgSend_totalUnitCount(*(void **)(a1 + 64), v18, v19, v20, v21, v22);
        objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 64), v24, v23, v25, v26, v27);
        if (objc_msgSend_count(v190, v28, v29, v30, v31, v32))
        {
          if (((*(uint64_t (**)(void))(*(void *)(a1 + 72) + 16))() & 1) == 0
            && objc_msgSend_count(v190, v33, v34, v35, v36, v37))
          {
            uint64_t v43 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v38, v39, v40, v41, v42);
            long long v196 = 0u;
            long long v197 = 0u;
            long long v194 = 0u;
            long long v195 = 0u;
            id v44 = v190;
            uint64_t v52 = objc_msgSend_countByEnumeratingWithState_objects_count_(v44, v45, (uint64_t)&v194, (uint64_t)v198, 16, v46);
            if (v52)
            {
              uint64_t v53 = *(void *)v195;
              while (2)
              {
                for (uint64_t i = 0; i != v52; ++i)
                {
                  if (*(void *)v195 != v53) {
                    objc_enumerationMutation(v44);
                  }
                  uint64_t v55 = *(void **)(*((void *)&v194 + 1) + 8 * i);
                  double v56 = objc_msgSend_drawing(v55, v47, v48, v49, v50, v51);
                  BOOL v62 = objc_msgSend_strokeCount(v56, v57, v58, v59, v60, v61) == 0;

                  if (v62)
                  {
                    if (qword_1EA3CA000 != -1) {
                      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
                    }
                    uint64_t v109 = (id)qword_1EA3C9F90[0];
                    if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
                    {
                      id v115 = objc_msgSend_content(v55, v110, v111, v112, v113, v114);
                      *(_DWORD *)long long buf = 138739971;
                      uint64_t v200 = (uint64_t)v115;
                      _os_log_impl(&dword_1C492D000, v109, OS_LOG_TYPE_ERROR, "Session synthesis for autorefine stopping because synthesizer generated an empty drawing for string %{sensitive}@", buf, 0xCu);
                    }
                    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
                    goto LABEL_34;
                  }
                  uint64_t v66 = objc_msgSend_reflowableTokensFromSynthesisResult_shouldCancel_(CHTextTransformationManager, v63, (uint64_t)v55, *(void *)(a1 + 72), v64, v65);
                  objc_msgSend_addObjectsFromArray_(v43, v67, (uint64_t)v66, v68, v69, v70);
                }
                uint64_t v52 = objc_msgSend_countByEnumeratingWithState_objects_count_(v44, v47, (uint64_t)&v194, (uint64_t)v198, 16, v51);
                if (v52) {
                  continue;
                }
                break;
              }
            }

            uint64_t v76 = objc_msgSend_array(MEMORY[0x1E4F1C978], v71, v72, v73, v74, v75);
            uint64_t v77 = *(void **)(a1 + 32);
            uint64_t v83 = objc_msgSend_latestStrokeProvider(v77, v78, v79, v80, v81, v82);
            id v193 = v76;
            uint64_t v84 = sub_1C4BB0760(v77, v43, v192, v83, &v193);
            id v44 = v193;

            (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
LABEL_34:

            goto LABEL_28;
          }
          if (qword_1EA3CA000 != -1) {
            dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
          }
          uint64_t v85 = (id)qword_1EA3C9F90[0];
          if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
          {
            uint64_t v91 = objc_msgSend_count(*(void **)(a1 + 40), v86, v87, v88, v89, v90);
            uint64_t v97 = objc_msgSend_latestStrokeProvider(*(void **)(a1 + 32), v92, v93, v94, v95, v96);
            __int16 v103 = objc_msgSend_orderedStrokes(v97, v98, v99, v100, v101, v102);
            *(_DWORD *)long long buf = 134218240;
            uint64_t v200 = v91;
            __int16 v201 = 2048;
            uint64_t v202 = objc_msgSend_count(v103, v104, v105, v106, v107, v108);
            _os_log_impl(&dword_1C492D000, v85, OS_LOG_TYPE_ERROR, "Session is cancelling refinement with strokes to replace = %ld, strokes in provider = %ld", buf, 0x16u);
          }
        }
        else
        {
          if (qword_1EA3CA000 != -1) {
            dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
          }
          uint64_t v85 = (id)qword_1EA3C9F90[0];
          if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1C492D000, v85, OS_LOG_TYPE_ERROR, "Session synthesis for autorefine stopping because synthesizer failed to refine a drawing", buf, 2u);
          }
        }

        (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
LABEL_28:

LABEL_41:
        return;
      }
    }
    else
    {
    }
    uint64_t v116 = objc_msgSend_autoRefineResults(*(void **)(*(void *)(a1 + 32) + 8), v11, v12, v13, v14, v15);
    uint64_t v122 = objc_msgSend_firstObject(v116, v117, v118, v119, v120, v121);

    uint64_t v192 = v122;
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v123 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v189 = objc_msgSend_autoRefineResults(*(void **)(*(void *)(a1 + 32) + 8), v124, v125, v126, v127, v128);
      uint64_t v134 = objc_msgSend_count(v189, v129, v130, v131, v132, v133);
      int v188 = objc_msgSend_textResult(v122, v135, v136, v137, v138, v139);
      uint64_t v191 = objc_msgSend_rawTranscription(v188, v140, v141, v142, v143, v144);
      __int16 v187 = objc_msgSend_strokeIdentifiers(v122, v145, v146, v147, v148, v149);
      uint64_t v155 = objc_msgSend_count(v187, v150, v151, v152, v153, v154);
      uint64_t v161 = objc_msgSend_syntheticStrokeIndexes(v122, v156, v157, v158, v159, v160);
      uint64_t v167 = objc_msgSend_count(v161, v162, v163, v164, v165, v166);
      uint64_t v173 = objc_msgSend_strokeGroup(v122, v168, v169, v170, v171, v172);
      uint64_t v179 = objc_msgSend_uniqueIdentifier(v173, v174, v175, v176, v177, v178);
      uint64_t v180 = *(void *)(a1 + 48);
      uint64_t v186 = objc_msgSend_count(*(void **)(a1 + 40), v181, v182, v183, v184, v185);
      *(_DWORD *)long long buf = 134219523;
      uint64_t v200 = v134;
      __int16 v201 = 2117;
      uint64_t v202 = (uint64_t)v191;
      __int16 v203 = 2048;
      uint64_t v204 = v155;
      __int16 v205 = 2048;
      uint64_t v206 = v167;
      __int16 v207 = 2048;
      uint64_t v208 = v179;
      __int16 v209 = 2117;
      uint64_t v210 = v180;
      __int16 v211 = 2048;
      uint64_t v212 = v186;
      _os_log_impl(&dword_1C492D000, v123, OS_LOG_TYPE_DEFAULT, "Session unable to reconstruct a recognition result for incoming strokes to AutoRefine: Skipping. Cached autorefine result count = %ld, first result has text %{sensitive}@ with %ld strokes (%ld synthetic), groupID = %ld, synthesis request for string %{sensitive}@ wants to replace %ld strokes", buf, 0x48u);
    }
    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
    goto LABEL_41;
  }
  uint64_t v2 = *(void (**)(void))(*(void *)(a1 + 80) + 16);
  v2();
}

void sub_1C4BB13E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB16E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB1734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB1758(uint64_t a1)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  uint64_t v99 = sub_1C4BA446C(*(void *)(a1 + 32), *(void **)(a1 + 40), 2, 1, 1, 0, 0, *(void **)(a1 + 64));
  if (!v99)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v7 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C492D000, v7, OS_LOG_TYPE_FAULT, "Context results must be non-nil", buf, 2u);
    }
  }
  uint64_t v104 = objc_msgSend_latestStrokeProvider(*(void **)(a1 + 32), v2, v3, v4, v5, v6, v99);
  uint64_t v101 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v8, v9, v10, v11, v12);
  uint64_t v102 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v13, v14, v15, v16, v17);
  long long v116 = 0u;
  long long v117 = 0u;
  long long v114 = 0u;
  long long v115 = 0u;
  id obj = v100;
  uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v18, (uint64_t)&v114, (uint64_t)v120, 16, v19);
  if (v20)
  {
    uint64_t v107 = 0;
    uint64_t v103 = *(void *)v115;
    do
    {
      uint64_t v105 = v20;
      for (uint64_t i = 0; i != v105; ++i)
      {
        if (*(void *)v115 != v103) {
          objc_enumerationMutation(obj);
        }
        uint64_t v22 = *(void **)(*((void *)&v114 + 1) + 8 * i);
        uint64_t v108 = sub_1C4BADF48(*(void *)(a1 + 32), v22, v104, *(void **)(a1 + 48), *(void **)(a1 + 64));
        if (objc_msgSend_count(v108, v23, v24, v25, v26, v27))
        {
          uint64_t v33 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v28, v29, v30, v31, v32);
          long long v112 = 0u;
          long long v113 = 0u;
          long long v110 = 0u;
          long long v111 = 0u;
          id v34 = v108;
          uint64_t v40 = objc_msgSend_countByEnumeratingWithState_objects_count_(v34, v35, (uint64_t)&v110, (uint64_t)v119, 16, v36);
          if (v40)
          {
            uint64_t v41 = *(void *)v111;
            do
            {
              for (uint64_t j = 0; j != v40; ++j)
              {
                if (*(void *)v111 != v41) {
                  objc_enumerationMutation(v34);
                }
                uint64_t v43 = objc_msgSend_reflowableTokensFromSynthesisResult_shouldCancel_(CHTextTransformationManager, v37, *(void *)(*((void *)&v110 + 1) + 8 * j), *(void *)(a1 + 64), v38, v39);
                objc_msgSend_addObjectsFromArray_(v33, v44, (uint64_t)v43, v45, v46, v47);
              }
              uint64_t v40 = objc_msgSend_countByEnumeratingWithState_objects_count_(v34, v37, (uint64_t)&v110, (uint64_t)v119, 16, v39);
            }
            while (v40);
          }

          uint64_t v53 = objc_msgSend_array(MEMORY[0x1E4F1C978], v48, v49, v50, v51, v52);
          uint64_t v54 = *(void **)(a1 + 32);
          uint64_t v60 = objc_msgSend_latestStrokeProvider(v54, v55, v56, v57, v58, v59);
          id v109 = v53;
          uint64_t v61 = sub_1C4BB0760(v54, v33, v22, v60, &v109);
          id v62 = v109;

          objc_msgSend_addObjectsFromArray_(v101, v63, (uint64_t)v61, v64, v65, v66);
          objc_msgSend_addObjectsFromArray_(v102, v67, (uint64_t)v62, v68, v69, v70);
        }
        else
        {
          if (qword_1EA3CA000 != -1) {
            dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
          }
          uint64_t v33 = (id)qword_1EA3C9FD8;
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1C492D000, v33, OS_LOG_TYPE_ERROR, "Failed to refine drawing", buf, 2u);
          }
        }

        uint64_t v76 = objc_msgSend_totalUnitCount(*(void **)(a1 + 56), v71, v72, v73, v74, v75);
        uint64_t v82 = objc_msgSend_count(obj, v77, v78, v79, v80, v81);
        ++v107;
        objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 56), v83, (uint64_t)((double)(v76 * v107) / (double)(unint64_t)v82), v84, v85, v86);
      }
      uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v87, (uint64_t)&v114, (uint64_t)v120, 16, v88);
    }
    while (v20);
  }

  uint64_t v94 = objc_msgSend_totalUnitCount(*(void **)(a1 + 56), v89, v90, v91, v92, v93);
  objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 56), v95, v94, v96, v97, v98);
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

void sub_1C4BB1BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB1E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB1E90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB1EB4(uint64_t a1)
{
  uint64_t v238 = *MEMORY[0x1E4F143B8];
  uint64_t v207 = sub_1C4BA446C(*(void *)(a1 + 32), *(void **)(a1 + 40), 2, 1, 1, 0, 0, *(void **)(a1 + 64));
  if (!v207)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v7 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C492D000, v7, OS_LOG_TYPE_FAULT, "Context results must be non-nil", buf, 2u);
    }
  }
  uint64_t v210 = objc_msgSend_latestStrokeProvider(*(void **)(a1 + 32), v2, v3, v4, v5, v6, v207);
  CGRect v217 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v8, v9, v10, v11, v12);
  CGRect v218 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v13, v14, v15, v16, v17);
  CGRect v216 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v18, v19, v20, v21, v22);
  long long v228 = 0u;
  long long v229 = 0u;
  long long v226 = 0u;
  long long v227 = 0u;
  id obj = v208;
  uint64_t v211 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v23, (uint64_t)&v226, (uint64_t)v237, 16, v24);
  if (v211)
  {
    uint64_t v213 = 0;
    uint64_t v209 = *(void *)v227;
    do
    {
      uint64_t v215 = 0;
      do
      {
        if (*(void *)v227 != v209) {
          objc_enumerationMutation(obj);
        }
        uint64_t v25 = *(void **)(*((void *)&v226 + 1) + 8 * v215);
        uint64_t v214 = sub_1C4BADF48(*(void *)(a1 + 32), v25, v210, *(void **)(a1 + 48), *(void **)(a1 + 64));
        if (objc_msgSend_count(v214, v26, v27, v28, v29, v30))
        {
          uint64_t v36 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v31, v32, v33, v34, v35);
          long long v224 = 0u;
          long long v225 = 0u;
          long long v222 = 0u;
          long long v223 = 0u;
          id v37 = v214;
          uint64_t v43 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v38, (uint64_t)&v222, (uint64_t)v236, 16, v39);
          if (v43)
          {
            uint64_t v44 = *(void *)v223;
            do
            {
              for (uint64_t i = 0; i != v43; ++i)
              {
                if (*(void *)v223 != v44) {
                  objc_enumerationMutation(v37);
                }
                uint64_t v46 = objc_msgSend_reflowableTokensFromSynthesisResult_shouldCancel_(CHTextTransformationManager, v40, *(void *)(*((void *)&v222 + 1) + 8 * i), *(void *)(a1 + 64), v41, v42);
                objc_msgSend_addObjectsFromArray_(v36, v47, (uint64_t)v46, v48, v49, v50);
              }
              uint64_t v43 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v40, (uint64_t)&v222, (uint64_t)v236, 16, v42);
            }
            while (v43);
          }

          uint64_t v56 = objc_msgSend_array(MEMORY[0x1E4F1C978], v51, v52, v53, v54, v55);
          uint64_t v57 = *(void **)(a1 + 32);
          uint64_t v63 = objc_msgSend_latestStrokeProvider(v57, v58, v59, v60, v61, v62);
          id v221 = v56;
          uint64_t v220 = sub_1C4BB0760(v57, v36, v25, v63, &v221);
          id v219 = v221;

          unint64_t v69 = 0;
          while (2)
          {
            if (v69 >= objc_msgSend_count(v220, v64, v65, v66, v67, v68))
            {

              goto LABEL_36;
            }
            uint64_t v74 = objc_msgSend_objectAtIndexedSubscript_(v220, v70, v69, v71, v72, v73);
            uint64_t v80 = objc_msgSend_drawing(v74, v75, v76, v77, v78, v79);
            if (objc_msgSend_strokeCount(v80, v81, v82, v83, v84, v85))
            {
              uint64_t v90 = objc_msgSend_objectAtIndexedSubscript_(v219, v86, v69, v87, v88, v89);
              BOOL v96 = objc_msgSend_count(v90, v91, v92, v93, v94, v95) == 0;

              if (!v96)
              {
                uint64_t v102 = objc_msgSend_drawing(v74, v97, v98, v99, v100, v101);
                objc_msgSend_addObject_(v218, v103, (uint64_t)v102, v104, v105, v106);

                long long v111 = objc_msgSend_objectAtIndexedSubscript_(v219, v107, v69, v108, v109, v110);
                objc_msgSend_addObject_(v217, v112, (uint64_t)v111, v113, v114, v115);

                long long v116 = objc_opt_class();
                uint64_t v122 = objc_msgSend_string(v74, v117, v118, v119, v120, v121);
                uint64_t v123 = (void *)MEMORY[0x1E4F28D60];
                uint64_t v128 = objc_msgSend_objectAtIndexedSubscript_(v219, v124, v69, v125, v126, v127);
                uint64_t v134 = objc_msgSend_count(v128, v129, v130, v131, v132, v133);
                uint64_t v138 = objc_msgSend_indexSetWithIndexesInRange_(v123, v135, 0, v134, v136, v137);
                objc_msgSend_bounds(v74, v139, v140, v141, v142, v143);
                uint64_t v145 = objc_msgSend_tokenizedTextResultWithString_strokeIndexes_bounds_trailingSeparator_recognizerGenerationIdentifier_defaultTokenScores_(v116, v144, (uint64_t)v122, (uint64_t)v138, (uint64_t)&stru_1F20141C8, 0);

                objc_msgSend_addObject_(v216, v146, (uint64_t)v145, v147, v148, v149);
LABEL_30:

                ++v69;
                continue;
              }
            }
            else
            {
            }
            break;
          }
          if (qword_1EA3CA000 != -1) {
            dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
          }
          uint64_t v145 = (id)qword_1EA3C9FD8;
          if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
          {
            uint64_t v155 = objc_msgSend_string(v74, v150, v151, v152, v153, v154);
            uint64_t v161 = objc_msgSend_drawing(v74, v156, v157, v158, v159, v160);
            uint64_t v167 = objc_msgSend_strokeCount(v161, v162, v163, v164, v165, v166);
            uint64_t v172 = objc_msgSend_objectAtIndexedSubscript_(v219, v168, v69, v169, v170, v171);
            uint64_t v178 = objc_msgSend_count(v172, v173, v174, v175, v176, v177);
            *(_DWORD *)long long buf = 138740483;
            uint64_t v231 = v155;
            __int16 v232 = 2048;
            uint64_t v233 = v167;
            __int16 v234 = 2048;
            uint64_t v235 = v178;
            _os_log_impl(&dword_1C492D000, v145, OS_LOG_TYPE_ERROR, "Skipping Refinement for a token %{sensitive}@, drawing with %ld strokes, aligned strokes = %ld", buf, 0x20u);
          }
          goto LABEL_30;
        }
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        uint64_t v36 = (id)qword_1EA3C9FD8;
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1C492D000, v36, OS_LOG_TYPE_ERROR, "Failed to refine drawing", buf, 2u);
        }
LABEL_36:

        uint64_t v184 = objc_msgSend_totalUnitCount(*(void **)(a1 + 56), v179, v180, v181, v182, v183);
        uint64_t v190 = objc_msgSend_count(obj, v185, v186, v187, v188, v189);
        ++v213;
        objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 56), v191, (uint64_t)((double)(v184 * v213) / (double)(unint64_t)v190), v192, v193, v194);

        ++v215;
      }
      while (v215 != v211);
      uint64_t v211 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v195, (uint64_t)&v226, (uint64_t)v237, 16, v196);
    }
    while (v211);
  }

  uint64_t v202 = objc_msgSend_totalUnitCount(*(void **)(a1 + 56), v197, v198, v199, v200, v201);
  objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 56), v203, v202, v204, v205, v206);
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

void sub_1C4BB259C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB30D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,void *a36)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB3314(uint64_t a1, void *a2)
{
  v50[3] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v10 = objc_msgSend_strokeIndexes(v3, v5, v6, v7, v8, v9);
  uint64_t v15 = objc_msgSend_objectsAtIndexes_(v4, v11, (uint64_t)v10, v12, v13, v14);

  double v16 = *(double *)(a1 + 56);
  double v17 = *(double *)(a1 + 64);
  uint64_t v23 = objc_msgSend_latestStrokeProvider(*(void **)(a1 + 40), v18, v19, v20, v21, v22);
  objc_msgSend_distanceFromPoint_toStrokes_withStrokeProvider_(CHStrokeUtilities, v24, (uint64_t)v15, (uint64_t)v23, v25, v26, v16, v17);
  double v28 = v27;

  uint64_t v29 = *(void **)(a1 + 48);
  v49[0] = @"distance";
  uint64_t v35 = objc_msgSend_numberWithDouble_(NSNumber, v30, v31, v32, v33, v34, v28);
  v50[0] = v35;
  v49[1] = @"transcription";
  uint64_t v41 = objc_msgSend_string(v3, v36, v37, v38, v39, v40);
  v49[2] = @"strokeIdentifiers";
  v50[1] = v41;
  v50[2] = v15;
  uint64_t v44 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v42, (uint64_t)v50, (uint64_t)v49, 3, v43);
  objc_msgSend_addObject_(v29, v45, (uint64_t)v44, v46, v47, v48);
}

void sub_1C4BB3484(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB365C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB3698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB36B0(uint64_t a1)
{
  uint64_t v328 = *MEMORY[0x1E4F143B8];
  uint64_t v305 = chunkStringForSynthesis(*(NSString **)(a1 + 32), 0x2EuLL);
  id v1 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v7 = objc_msgSend_count(v305, v2, v3, v4, v5, v6);
  uint64_t v310 = objc_msgSend_arrayWithCapacity_(v1, v8, v7, v9, v10, v11);
  uint64_t v12 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v18 = objc_msgSend_count(v305, v13, v14, v15, v16, v17);
  uint64_t v309 = objc_msgSend_arrayWithCapacity_(v12, v19, v18, v20, v21, v22);
  uint64_t v294 = objc_msgSend_styleSampleOptionsForPoint_shouldCancel_(*(void **)(a1 + 40), v23, *(void *)(a1 + 56), v24, v25, v26, *(double *)(a1 + 72), *(double *)(a1 + 80));
  uint64_t v298 = objc_msgSend_synthesisOptionsWithFastPath_(CHSynthesisRequestOptions, v27, 1, v28, v29, v30);
  unint64_t v307 = 0;
  char v303 = 0;
  *(void *)&long long v36 = 134217984;
  long long v293 = v36;
  while (v307 < objc_msgSend_count(v305, v31, v32, v33, v34, v35, v293))
  {
    unint64_t v299 = objc_msgSend_count(v310, v37, v38, v39, v40, v41);
    uint64_t v308 = objc_msgSend_objectAtIndexedSubscript_(v305, v42, v307, v43, v44, v45);
    int isNotDef = objc_msgSend_isNotDef(v308, v46, v47, v48, v49, v50);
    if (isNotDef)
    {
      if (v303)
      {
        char v303 = 1;
        goto LABEL_66;
      }
      if (objc_msgSend_synthesisSuggestion(v308, v51, v52, v53, v54, v55) != 1)
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        uint64_t v82 = (id)qword_1EA3C9F90[0];
        uint64_t v306 = v82;
        if (os_log_type_enabled(v82, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1C492D000, v82, OS_LOG_TYPE_FAULT, "NotDef chunk can be synthesized with a fast path only.", buf, 2u);
        }
        char v303 = 1;
LABEL_19:

        goto LABEL_20;
      }
      char v303 = 1;
    }
    else if ((unint64_t)objc_msgSend_count(v305, v51, v52, v53, v54, v55) >= 2)
    {
      uint64_t v306 = objc_msgSend_chunkValueForSynthesis(v308, v56, v57, v58, v59, v60);
      if (objc_msgSend_countCodepoints(v306, v61, v62, v63, v64, v65) == 1 && v303 & 1 | (v307 == 0))
      {
        if (v307 + 1 == objc_msgSend_count(v305, v66, v67, v68, v69, v70)) {
          goto LABEL_65;
        }
        uint64_t v75 = objc_msgSend_objectAtIndexedSubscript_(v305, v71, v307 + 1, v72, v73, v74);
        char v81 = objc_msgSend_isNotDef(v75, v76, v77, v78, v79, v80);

        if (v81) {
          goto LABEL_66;
        }
        goto LABEL_20;
      }
      goto LABEL_19;
    }
LABEL_20:
    uint64_t v83 = objc_msgSend_rangeInOriginalString(v308, v56, v57, v58, v59, v60);
    uint64_t v300 = v84;
    uint64_t v301 = v83;
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v85 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138739971;
      *(void *)&uint8_t buf[4] = v308;
      _os_log_impl(&dword_1C492D000, v85, OS_LOG_TYPE_DEFAULT, "Text Synthesis Loop : chunuint64_t k = %{sensitive}@", buf, 0xCu);
    }

    if (objc_msgSend_synthesisSuggestion(v308, v86, v87, v88, v89, v90) != 1)
    {
      if (objc_msgSend_synthesisSuggestion(v308, v91, v92, v93, v94, v95))
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        uint64_t v110 = (id)qword_1EA3C9F90[0];
        if (os_log_type_enabled(v110, OS_LOG_TYPE_FAULT))
        {
          uint64_t v184 = objc_msgSend_synthesisSuggestion(v308, v179, v180, v181, v182, v183);
          *(_DWORD *)long long buf = v293;
          *(void *)&uint8_t buf[4] = v184;
          _os_log_impl(&dword_1C492D000, v110, OS_LOG_TYPE_FAULT, "Unknown synthesisSuggestion=%ld", buf, 0xCu);
        }
        uint64_t v306 = 0;
      }
      else
      {
        uint64_t v185 = objc_msgSend_textSynthesizer(*(void **)(a1 + 40), v174, v175, v176, v177, v178);
        uint64_t v191 = objc_msgSend_chunkValueForSynthesis(v308, v186, v187, v188, v189, v190);
        long long v197 = objc_msgSend_dictionary(v294, v192, v193, v194, v195, v196);
        uint64_t v110 = objc_msgSend_synthesizeDrawingForString_options_shouldCancel_error_(v185, v198, (uint64_t)v191, (uint64_t)v197, *(void *)(a1 + 56), 0);

        uint64_t v306 = objc_msgSend_reflowableTokensFromSynthesisResult_shouldCancel_(CHTextTransformationManager, v199, (uint64_t)v110, *(void *)(a1 + 56), v200, v201);
      }
      goto LABEL_48;
    }
    BOOL v96 = objc_msgSend_textSynthesizer(*(void **)(a1 + 40), v91, v92, v93, v94, v95);
    uint64_t v102 = objc_msgSend_chunkValueForSynthesis(v308, v97, v98, v99, v100, v101);
    uint64_t v108 = objc_msgSend_dictionary(v298, v103, v104, v105, v106, v107);
    uint64_t v110 = objc_msgSend_synthesizeDrawingForString_options_shouldCancel_error_(v96, v109, (uint64_t)v102, (uint64_t)v108, *(void *)(a1 + 56), 0);

    long long v326 = 0u;
    long long v327 = 0u;
    long long v324 = 0u;
    long long v325 = 0u;
    long long v322 = 0u;
    long long v323 = 0u;
    *(_OWORD *)long long buf = 0u;
    long long v321 = 0u;
    if (v110)
    {
      objc_msgSend_principalLines(v110, v111, v112, v113, v114, v115);
      if (fabs(*((double *)&v324 + 1) - *((double *)&v322 + 1)) > 2.22044605e-16) {
        goto LABEL_27;
      }
    }
    else if (fabs(0.0) > 2.22044605e-16)
    {
LABEL_27:
      long long v116 = objc_opt_class();
      v316[4] = v324;
      v316[5] = v325;
      v316[6] = v326;
      v316[7] = v327;
      v316[0] = *(_OWORD *)buf;
      v316[1] = v321;
      v316[2] = v322;
      v316[3] = v323;
      uint64_t v122 = objc_msgSend_chunkValueOriginal(v308, v117, v118, v119, v120, v121);
      uint64_t v126 = objc_msgSend_textSizeFromPrincipalLines_string_(v116, v123, (uint64_t)v316, (uint64_t)v122, v124, v125);

      double v127 = *(double *)buf;
      double v128 = *(double *)&buf[8];
      long long v129 = v321;
      long long v130 = v322;
      long long v131 = v323;
      long long v295 = v324;
      long long v296 = v325;
      long long v297 = v326;
      long long v132 = v327;
      uint64_t v138 = objc_msgSend_drawing(v110, v133, v134, v135, v136, v137);
      objc_msgSend_bounds(v138, v139, v140, v141, v142, v143);
      if (v146 == 0.0) {
        double v146 = 1.0;
      }
      if (v147 == 0.0) {
        double v147 = 1.0;
      }
      *(double *)long long buf = (v127 - v144) / v146;
      *(double *)&uint8_t buf[8] = (v128 - v145) / v147;
      *(double *)&long long v321 = (*(double *)&v129 - v144) / v146;
      *((double *)&v321 + 1) = (*((double *)&v129 + 1) - v145) / v147;
      *(double *)&long long v322 = (*(double *)&v130 - v144) / v146;
      *((double *)&v322 + 1) = (*((double *)&v130 + 1) - v145) / v147;
      *(double *)&long long v323 = (*(double *)&v131 - v144) / v146;
      *((double *)&v323 + 1) = (*((double *)&v131 + 1) - v145) / v147;
      *(double *)&long long v324 = (*(double *)&v295 - v144) / v146;
      *((double *)&v324 + 1) = (*((double *)&v295 + 1) - v145) / v147;
      *(double *)&long long v325 = (*(double *)&v296 - v144) / v146;
      *((double *)&v325 + 1) = (*((double *)&v296 + 1) - v145) / v147;
      *(double *)&long long v326 = (*(double *)&v297 - v144) / v146;
      *((double *)&v326 + 1) = (*((double *)&v297 + 1) - v145) / v147;
      *(double *)&long long v327 = (*(double *)&v132 - v144) / v146;
      *((double *)&v327 + 1) = (*((double *)&v132 + 1) - v145) / v147;

      uint64_t v153 = objc_msgSend_drawing(v110, v148, v149, v150, v151, v152);
      objc_msgSend_bounds(v153, v154, v155, v156, v157, v158);
      if (v164 == 0.0)
      {
        double v173 = 1.0;
      }
      else
      {
        uint64_t v165 = objc_msgSend_drawing(v110, v159, v160, v161, v162, v163);
        objc_msgSend_bounds(v165, v166, v167, v168, v169, v170);
        double v172 = v171;

        double v173 = 1.0 / v172;
      }

      __int16 v203 = objc_opt_class();
      id v208 = objc_msgSend_scaledSize_scale_(v203, v204, (uint64_t)v126, v205, v206, v207, v173);

      uint64_t v209 = [CHReflowableSynthesisResultToken alloc];
      uint64_t v215 = objc_msgSend_drawing(v110, v210, v211, v212, v213, v214);
      id v221 = objc_msgSend_chunkValueOriginal(v308, v216, v217, v218, v219, v220);
      v315[4] = v324;
      v315[5] = v325;
      v315[6] = v326;
      v315[7] = v327;
      v315[0] = *(_OWORD *)buf;
      v315[1] = v321;
      v315[2] = v322;
      v315[3] = v323;
      long long v227 = objc_msgSend_drawing(v110, v222, v223, v224, v225, v226);
      objc_msgSend_bounds(v227, v228, v229, v230, v231, v232);
      hasPrecedingSpace = objc_msgSend_initWithDrawing_string_principalLines_textSize_bounds_hasPrecedingSpace_(v209, v233, (uint64_t)v215, (uint64_t)v221, (uint64_t)v315, (uint64_t)v208, 0);
      uint64_t v319 = hasPrecedingSpace;
      uint64_t v306 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v235, (uint64_t)&v319, 1, v236, v237);

LABEL_48:
      if (objc_msgSend_count(v306, v238, v239, v240, v241, v242))
      {
        long long v313 = 0u;
        long long v314 = 0u;
        long long v311 = 0u;
        long long v312 = 0u;
        id v247 = v306;
        uint64_t v255 = objc_msgSend_countByEnumeratingWithState_objects_count_(v247, v248, (uint64_t)&v311, (uint64_t)v318, 16, v249);
        if (v255)
        {
          uint64_t v256 = *(void *)v312;
          unint64_t v257 = v301;
          unint64_t v258 = v301 + v300;
          do
          {
            for (uint64_t i = 0; i != v255; ++i)
            {
              if (*(void *)v312 != v256) {
                objc_enumerationMutation(v247);
              }
              uint64_t v260 = *(void **)(*((void *)&v311 + 1) + 8 * i);
              uint64_t v261 = objc_msgSend_string(v260, v250, v251, v252, v253, v254);
              uint64_t v267 = objc_msgSend_length(v261, v262, v263, v264, v265, v266);

              unsigned int v273 = objc_msgSend_hasPrecedingSpace(v260, v268, v269, v270, v271, v272);
              if (v257 >= v258) {
                uint64_t v278 = v301 + v300 - 1;
              }
              else {
                uint64_t v278 = v257;
              }
              if (v258 - v278 >= v267 + (unint64_t)v273) {
                uint64_t v279 = v267 + v273;
              }
              else {
                uint64_t v279 = v258 - v278;
              }
              objc_msgSend_addObject_(v310, v274, (uint64_t)v260, v275, v276, v277);
              uint64_t v283 = objc_msgSend_valueWithRange_(MEMORY[0x1E4F29238], v280, v278, v279, v281, v282);
              objc_msgSend_addObject_(v309, v284, (uint64_t)v283, v285, v286, v287);

              unint64_t v257 = v279 + v278;
            }
            uint64_t v255 = objc_msgSend_countByEnumeratingWithState_objects_count_(v247, v250, (uint64_t)&v311, (uint64_t)v318, 16, v254);
          }
          while (v255);
        }
      }
      objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 48), v243, v301 + v300, v244, v245, v246);
      if ((isNotDef & 1) == 0) {
        v303 &= v299 >= objc_msgSend_count(v310, v288, v289, v290, v291, v292);
      }
LABEL_65:

      goto LABEL_66;
    }
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v202 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v202, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v317 = 0;
      _os_log_impl(&dword_1C492D000, v202, OS_LOG_TYPE_ERROR, "Notdef token does not contain principal lines information", v317, 2u);
    }

LABEL_66:
    ++v307;
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_1C4BB4100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,void *a32)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB4464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB44B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB44D8(uint64_t a1)
{
  uint64_t v189 = *MEMORY[0x1E4F143B8];
  uint64_t v161 = sub_1C4BA446C(*(void *)(a1 + 32), *(void **)(a1 + 40), 2, 1, 0, 0, 0, *(void **)(a1 + 64));
  if (!v161)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    id v1 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v1, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C492D000, v1, OS_LOG_TYPE_FAULT, "Context results must be non-nil", buf, 2u);
    }
  }
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v9 = objc_msgSend_latestStrokeProvider(*(void **)(a1 + 32), v4, v5, v6, v7, v8);
  uint64_t v160 = objc_msgSend_strokesForIdentifiers_inStrokeProvider_(v2, v10, v3, (uint64_t)v9, v11, v12);

  uint64_t v13 = objc_opt_class();
  uint64_t v159 = objc_msgSend_createDrawingForStrokes_interpolationType_resolution_cancellationBlock_(v13, v14, (uint64_t)v160, 1, 2, *(void *)(a1 + 64));
  *(void *)long long buf = 0;
  uint64_t v180 = buf;
  uint64_t v181 = 0x3032000000;
  uint64_t v182 = sub_1C4B9763C;
  uint64_t v183 = sub_1C4B9764C;
  uint64_t v184 = &stru_1F20141C8;
  uint64_t v166 = objc_msgSend_setWithArray_(MEMORY[0x1E4F1CAD0], v15, *(void *)(a1 + 40), v16, v17, v18);
  long long v177 = 0u;
  long long v178 = 0u;
  long long v175 = 0u;
  long long v176 = 0u;
  id obj = v161;
  uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v19, (uint64_t)&v175, (uint64_t)v188, 16, v20);
  if (v26)
  {
    uint64_t v27 = *(void *)v176;
    do
    {
      for (uint64_t i = 0; i != v26; ++i)
      {
        if (*(void *)v176 != v27) {
          objc_enumerationMutation(obj);
        }
        uint64_t v29 = *(void **)(*((void *)&v175 + 1) + 8 * i);
        uint64_t v30 = objc_msgSend_textResult(v29, v21, v22, v23, v24, v25);
        long long v36 = objc_msgSend_inputStrokeIdentifiers(v30, v31, v32, v33, v34, v35);

        uint64_t v42 = objc_msgSend_textResult(v29, v37, v38, v39, v40, v41);
        uint64_t v48 = objc_msgSend_rawTranscriptionPath(v42, v43, v44, v45, v46, v47);
        uint64_t v54 = objc_msgSend_tokenColumns(v42, v49, v50, v51, v52, v53);
        uint64_t v60 = objc_msgSend_count(v54, v55, v56, v57, v58, v59);
        v171[0] = MEMORY[0x1E4F143A8];
        v171[1] = 3221225472;
        v171[2] = sub_1C4BB4CD4;
        v171[3] = &unk_1E64E1F30;
        id v61 = v36;
        id v172 = v61;
        id v173 = v166;
        uint64_t v174 = buf;
        objc_msgSend_enumerateTokensInTranscriptionPath_columnRange_tokenProcessingBlock_(v42, v62, (uint64_t)v48, 0, v60, (uint64_t)v171);

        uint64_t v67 = objc_msgSend_stringByAppendingString_(*((void **)v180 + 5), v63, @" ", v64, v65, v66);
        uint64_t v68 = (void *)*((void *)v180 + 5);
        *((void *)v180 + 5) = v67;
      }
      uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v21, (uint64_t)&v175, (uint64_t)v188, 16, v25);
    }
    while (v26);
  }

  uint64_t v69 = (void *)*((void *)v180 + 5);
  uint64_t v75 = objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E4F28B88], v70, v71, v72, v73, v74);
  uint64_t v80 = objc_msgSend_stringByTrimmingCharactersInSet_(v69, v76, (uint64_t)v75, v77, v78, v79);
  char v81 = (void *)*((void *)v180 + 5);
  *((void *)v180 + 5) = v80;

  uint64_t v87 = objc_msgSend_textSynthesizer(*(void **)(a1 + 32), v82, v83, v84, v85, v86);
  uint64_t v158 = objc_msgSend_replaceDrawing_originalTranscription_replacementTranscription_options_shouldCancel_error_(v87, v88, (uint64_t)v159, *((void *)v180 + 5), *(void *)(a1 + 48), 0, *(void *)(a1 + 64), 0);

  uint64_t v162 = objc_msgSend_reflowableTokensFromSynthesisResult_shouldCancel_(CHTextTransformationManager, v89, (uint64_t)v158, *(void *)(a1 + 64), v90, v91);
  uint64_t v97 = objc_msgSend_totalUnitCount(*(void **)(a1 + 56), v92, v93, v94, v95, v96);
  objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 56), v98, v97, v99, v100, v101);
  if (objc_msgSend_count(v162, v102, v103, v104, v105, v106))
  {
    uint64_t v112 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v107, v108, v109, v110, v111);
    uint64_t v118 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v113, v114, v115, v116, v117);
    long long v169 = 0u;
    long long v170 = 0u;
    long long v167 = 0u;
    long long v168 = 0u;
    id v164 = v162;
    uint64_t v126 = objc_msgSend_countByEnumeratingWithState_objects_count_(v164, v119, (uint64_t)&v167, (uint64_t)v187, 16, v120);
    if (v126)
    {
      uint64_t v127 = 0;
      uint64_t v128 = *(void *)v168;
      do
      {
        for (uint64_t j = 0; j != v126; ++j)
        {
          if (*(void *)v168 != v128) {
            objc_enumerationMutation(v164);
          }
          long long v130 = *(void **)(*((void *)&v167 + 1) + 8 * j);
          long long v131 = objc_msgSend_string(v130, v121, v122, v123, v124, v125);
          uint64_t v137 = objc_msgSend_length(v131, v132, v133, v134, v135, v136);

          LODWORD(v131) = objc_msgSend_hasPrecedingSpace(v130, v138, v139, v140, v141, v142);
          objc_msgSend_addObject_(v118, v143, (uint64_t)v130, v144, v145, v146);
          uint64_t v147 = v137 + v131;
          uint64_t v151 = objc_msgSend_valueWithRange_(MEMORY[0x1E4F29238], v148, v127, v147, v149, v150);
          objc_msgSend_addObject_(v112, v152, (uint64_t)v151, v153, v154, v155);

          v127 += v147;
        }
        uint64_t v126 = objc_msgSend_countByEnumeratingWithState_objects_count_(v164, v121, (uint64_t)&v167, (uint64_t)v187, 16, v125);
      }
      while (v126);
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  else
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v156 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
    {
      uint64_t v157 = *(void *)(a1 + 40);
      *(_DWORD *)uint64_t v185 = 138412290;
      uint64_t v186 = v157;
      _os_log_impl(&dword_1C492D000, v156, OS_LOG_TYPE_ERROR, "Failed to create reflowable tokens for synthesized string to replace strokes: %@", v185, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }

  _Block_object_dispose(buf, 8);
}

void sub_1C4BB4B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,id a48)
{
  _Block_object_dispose(&a43, 8);
  _Unwind_Resume(a1);
}

void sub_1C4BB4CD4(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = (void *)a1[4];
  id v47 = v3;
  uint64_t v11 = objc_msgSend_strokeIndexes(v3, v6, v7, v8, v9, v10);
  uint64_t v16 = objc_msgSend_objectsAtIndexes_(v5, v12, (uint64_t)v11, v13, v14, v15);
  uint64_t v21 = objc_msgSend_setWithArray_(v4, v17, (uint64_t)v16, v18, v19, v20);

  if (objc_msgSend_isSubsetOfSet_(v21, v22, a1[5], v23, v24, v25))
  {
    char v31 = objc_msgSend_properties(v47, v26, v27, v28, v29, v30);
    uint64_t v32 = *(void **)(*(void *)(a1[6] + 8) + 40);
    uint64_t v38 = objc_msgSend_string(v47, v33, v34, v35, v36, v37);
    uint64_t v43 = (void *)v38;
    if ((v31 & 0x20) != 0) {
      objc_msgSend_stringByAppendingFormat_(v32, v39, @" %@", v40, v41, v42, v38);
    }
    else {
    uint64_t v44 = objc_msgSend_stringByAppendingFormat_(v32, v39, @"%@", v40, v41, v42, v38);
    }
    uint64_t v45 = *(void *)(a1[6] + 8);
    uint64_t v46 = *(void **)(v45 + 40);
    *(void *)(v45 + 40) = v44;
  }
}

void sub_1C4BB4DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB4E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB4E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB4E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB5054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB526C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB53A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB73BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _Unwind_Exception *exception_object, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  _Unwind_Resume(a1);
}

id sub_1C4BB7A78(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v67 = a4;
  id v16 = a5;
  if (a1)
  {
    char isCharacterLevel = objc_msgSend_isCharacterLevel(v9, v11, v12, v13, v14, v15);
    uint64_t v18 = [CHTextInputGesture alloc];
    uint64_t v24 = objc_msgSend_resultType(v9, v19, v20, v21, v22, v23);
    uint64_t v30 = objc_msgSend_locales(a1, v25, v26, v27, v28, v29);
    uint64_t v36 = objc_msgSend_firstObject(v30, v31, v32, v33, v34, v35);
    Stroke_preferCharacterLevel = objc_msgSend_initWithGestureType_targetContentInfo_locale_normalizedDrawing_originalDrawing_lastStroke_preferCharacterLevel_(v18, v37, v24, (uint64_t)v16, (uint64_t)v36, (uint64_t)v10, v10, v67, isCharacterLevel);

    unsigned __int8 v68 = 0;
    objc_msgSend_getAffectedRange_expandedToFullTokens_(Stroke_preferCharacterLevel, v39, (uint64_t)v69, (uint64_t)&v68, v40, v41);
    int v42 = v68;
    uint64_t v43 = [CHTextCorrectionResult alloc];
    uint64_t v49 = objc_msgSend_textInputTarget(v16, v44, v45, v46, v47, v48);
    uint64_t v50 = v69[0];
    uint64_t v51 = v69[1];
    uint64_t v57 = objc_msgSend_textResult(Stroke_preferCharacterLevel, v52, v53, v54, v55, v56);
    uint64_t v63 = objc_msgSend_gestureType(Stroke_preferCharacterLevel, v58, v59, v60, v61, v62);
    isCharacterLevel_error = objc_msgSend_initWithInputTarget_affectedRange_textResult_resultType_isCharacterLevel_error_(v43, v64, (uint64_t)v49, v50, v51, (uint64_t)v57, v63, v42 == 0, 0);
  }
  else
  {
    isCharacterLevel_error = 0;
  }

  return isCharacterLevel_error;
}

void sub_1C4BB7C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BB7C88(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v8 = objc_msgSend_string(v2, v3, v4, v5, v6, v7);
  if (objc_msgSend_isEqualToString_(v8, v9, @"Line", v10, v11, v12))
  {
    uint64_t isEqualToString = 1;
  }
  else
  {
    uint64_t v19 = objc_msgSend_string(v2, v13, v14, v15, v16, v17);
    uint64_t isEqualToString = objc_msgSend_isEqualToString_(v19, v20, @"Manhattan Line", v21, v22, v23);
  }
  return isEqualToString;
}

void sub_1C4BB7D08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB7D20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB7D30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BB7D44(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_string(a2, (const char *)a2, a3, a4, a5, a6);
  uint64_t isEqualToString = objc_msgSend_isEqualToString_(v6, v7, @"Oval", v8, v9, v10);

  return isEqualToString;
}

void sub_1C4BB7D88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BB7D98(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_string(a2, (const char *)a2, a3, a4, a5, a6);
  uint64_t isEqualToString = objc_msgSend_isEqualToString_(v6, v7, @"Rectangle", v8, v9, v10);

  return isEqualToString;
}

void sub_1C4BB7DDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BB7DEC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_string(a2, (const char *)a2, a3, a4, a5, a6);
  uint64_t isEqualToString = objc_msgSend_isEqualToString_(v6, v7, @"ScratchOut", v8, v9, v10);

  return isEqualToString;
}

void sub_1C4BB7E30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BB7E40(void *a1, NSUInteger a2, NSUInteger a3, BOOL *a4, double *a5, double *a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, CGFloat a13, CGFloat a14)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  id v24 = a1;
  double MaxX = *MEMORY[0x1E4F1DB20];
  double v25 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  CGFloat v27 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  double rect1 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  v115.locatiounint64_t n = objc_msgSend_referenceSubstringRange(v24, v28, v29, v30, v31, v32);
  v115.length = v33;
  v114.locatiounint64_t n = a2;
  v114.length = a3;
  length = (const char *)NSIntersectionRange(v114, v115).length;
  CGFloat rect = a13;
  CGFloat v104 = a10;
  CGFloat v105 = a9;
  objc_msgSend_referenceSubstringRange(v24, length, v35, v36, v37, v38);
  BOOL v39 = 0;
  double v40 = 0.0;
  double v41 = 6.0;
  if (!v42 || length != (const char *)a3)
  {
    CGFloat v68 = a8;
    double MinY = v25;
    a14 = rect1;
    if (!a4) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  id v43 = v24;
  self;
  uint64_t v48 = objc_msgSend_relativeLocationFromAbsoluteLocation_(v43, v44, a2, v45, v46, v47);
  uint64_t v54 = v48;
  uint64_t v55 = 0;
  uint64_t v56 = 0x7FFFFFFFFFFFFFFFLL;
  if (v48 && v48 != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v57 = objc_msgSend_referenceSubstring(v43, v49, v50, v51, v52, v53);
    uint64_t v56 = objc_msgSend_rangeOfComposedCharacterSequenceAtIndex_(v57, v58, v54 - 1, v59, v60, v61);
    uint64_t v55 = v62;
  }
  if (v56 == 0x7FFFFFFFFFFFFFFFLL)
  {
    CGFloat v68 = a8;
    BOOL v39 = 0;
    double MinY = v25;
    a14 = rect1;
    if (!a4) {
      goto LABEL_11;
    }
LABEL_10:
    *a4 = v39;
    goto LABEL_11;
  }
  uint64_t v74 = objc_msgSend_referenceSubstring(v43, v63, v64, v65, v66, v67);
  uint64_t v78 = objc_msgSend_substringWithRange_(v74, v75, v56, v55, v76, v77);

  uint64_t v84 = objc_msgSend_characterRectsInReferenceSubstring(v43, v79, v80, v81, v82, v83) + 32 * v56;
  CGFloat v86 = *(double *)v84;
  CGFloat v85 = *(double *)(v84 + 8);
  CGFloat v87 = *(double *)(v84 + 16);
  rect1CGFloat a = *(double *)(v84 + 24);
  uint64_t v93 = objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E4F28B88], v88, v89, v90, v91, v92);
  CGFloat v68 = a8;
  objc_msgSend_rangeOfCharacterFromSet_(v78, v94, (uint64_t)v93, v95, v96, v97);
  BOOL v39 = v98 == v55;

  v118.origin.CGFloat x = a11;
  v118.origin.CGFloat y = a12;
  v118.size.double width = rect;
  v118.size.CGFloat height = a14;
  double MinY = CGRectGetMinY(v118);
  v119.origin.CGFloat x = a7;
  v119.origin.CGFloat y = v68;
  v119.size.double width = v105;
  v119.size.CGFloat height = v104;
  double MidX = CGRectGetMidX(v119);
  v120.origin.CGFloat x = v86;
  v120.origin.CGFloat y = v85;
  v120.size.double width = v87;
  v120.size.CGFloat height = rect1a;
  if (MidX <= CGRectGetMidX(v120))
  {
    v123.origin.CGFloat x = v86;
    v123.origin.CGFloat y = v85;
    v123.size.double width = v87;
    v123.size.CGFloat height = rect1a;
    double MinX = CGRectGetMinX(v123);
    v124.origin.CGFloat x = a7;
    v124.origin.CGFloat y = v68;
    v124.size.double width = v105;
    v124.size.CGFloat height = v104;
    double v41 = a14 * 0.4;
    double MaxX = MinX - a14 * 0.4;
    double v40 = MinX - CGRectGetMaxX(v124);
  }
  else
  {
    v121.origin.CGFloat x = v86;
    v121.origin.CGFloat y = v85;
    v121.size.double width = v87;
    v121.size.CGFloat height = rect1a;
    double MaxX = CGRectGetMaxX(v121);
    v122.origin.CGFloat x = a7;
    v122.origin.CGFloat y = v68;
    v122.size.double width = v105;
    v122.size.CGFloat height = v104;
    double v40 = CGRectGetMinX(v122) - MaxX;
    double v41 = a14 * 0.4;
  }
  double rect1 = a14 + a14;
  double v25 = MinY + a14 * -0.5;

  CGFloat v27 = v41;
  if (a4) {
    goto LABEL_10;
  }
LABEL_11:
  if (a5) {
    *a5 = v40;
  }
  if (a6) {
    *a6 = v41;
  }
  v116.origin.CGFloat x = a7;
  v116.origin.CGFloat y = v68;
  v116.size.double width = v105;
  v116.size.CGFloat height = v104;
  v125.origin.CGFloat x = MaxX;
  v125.origin.CGFloat y = MinY;
  v125.size.double width = v27;
  v125.size.CGFloat height = a14;
  BOOL v70 = CGRectIntersectsRect(v116, v125);
  v117.origin.CGFloat x = MaxX;
  v117.origin.CGFloat y = v25;
  v117.size.double width = v27;
  v117.size.CGFloat height = rect1;
  v126.origin.CGFloat x = a7;
  v126.origin.CGFloat y = v68;
  v126.size.double width = v105;
  v126.size.CGFloat height = v104;
  BOOL v71 = CGRectContainsRect(v117, v126);
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v72 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109376;
    BOOL v110 = v70;
    __int16 v111 = 1024;
    BOOL v112 = v71;
    _os_log_impl(&dword_1C492D000, v72, OS_LOG_TYPE_DEBUG, "doesIntersectNoSpaceRegion: %i isContainedInPaddedNoSpaceRegion: %i", buf, 0xEu);
  }

  return v70 | v71;
}

void sub_1C4BB8268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB8280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB8294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB82A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB82BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB82D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB82E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB82FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB8310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB8320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB8334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB8348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB835C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB836C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB837C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB8390(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB83A0(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  if (!CGRectIsNull(*(CGRect *)&a2))
  {
    v10.origin.CGFloat x = a2;
    v10.origin.CGFloat y = a3;
    v10.size.double width = a4;
    v10.size.CGFloat height = a5;
    if (CGRectGetMaxX(v10) >= *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      v11.origin.CGFloat x = a2;
      v11.origin.CGFloat y = a3;
      v11.size.double width = a4;
      v11.size.CGFloat height = a5;
      *(CGFloat *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CGRectGetMaxX(v11);
    }
    v12.origin.CGFloat x = a2;
    v12.origin.CGFloat y = a3;
    v12.size.double width = a4;
    v12.size.CGFloat height = a5;
    if (CGRectGetMinX(v12) <= *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
    {
      v13.origin.CGFloat x = a2;
      v13.origin.CGFloat y = a3;
      v13.size.double width = a4;
      v13.size.CGFloat height = a5;
      *(CGFloat *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = CGRectGetMinX(v13);
    }
  }
}

void sub_1C4BB84F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB8500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB8510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB91DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,void *a33,void *a34)
{
  _Unwind_Resume(a1);
}

void sub_1C4BB95C8()
{
  uint64_t v0 = objc_alloc_init(CHCharacterSetRules);
  id v1 = (void *)qword_1EA3C94C8;
  qword_1EA3C94C8 = (uint64_t)v0;
}

uint64_t *sub_1C4BB9718(uint64_t *result)
{
  id v1 = result;
  uint64_t v2 = result[4];
  if (!v2)
  {
    uint64_t v10 = 0;
    goto LABEL_43;
  }
  unsigned int v3 = *((_DWORD *)result + 12);
  uint64_t v4 = *(uint64_t **)(v2 + 280);
  if (!v4)
  {
LABEL_14:
    if ((int)v3 <= 8219)
    {
      uint64_t v10 = 5;
      switch(v3)
      {
        case 0x21u:
        case 0x22u:
        case 0x2Bu:
        case 0x30u:
        case 0x31u:
        case 0x32u:
        case 0x33u:
        case 0x34u:
        case 0x35u:
        case 0x37u:
        case 0x38u:
        case 0x39u:
        case 0x3Au:
        case 0x3Bu:
        case 0x3Du:
        case 0x3Fu:
        case 0x40u:
        case 0x44u:
        case 0x4Au:
        case 0x4Cu:
        case 0x50u:
        case 0x51u:
        case 0x54u:
        case 0x55u:
        case 0x56u:
        case 0x58u:
        case 0x61u:
        case 0x62u:
        case 0x64u:
        case 0x65u:
        case 0x66u:
        case 0x67u:
        case 0x68u:
        case 0x69u:
        case 0x6Au:
        case 0x6Eu:
        case 0x70u:
        case 0x71u:
        case 0x72u:
        case 0x74u:
        case 0x75u:
        case 0x76u:
        case 0x78u:
        case 0x79u:
        case 0x7Bu:
        case 0x7Du:
        case 0xA1u:
        case 0xA7u:
        case 0xABu:
        case 0xBAu:
        case 0xBBu:
        case 0xBFu:
        case 0xC7u:
        case 0xD2u:
        case 0xD3u:
        case 0xD4u:
        case 0xD5u:
        case 0xD7u:
        case 0xDFu:
        case 0xE7u:
        case 0xECu:
        case 0xEDu:
        case 0xEEu:
        case 0xF2u:
        case 0xF3u:
        case 0xF4u:
        case 0xF5u:
          goto LABEL_16;
        case 0x23u:
        case 0x2Au:
        case 0x45u:
        case 0x4Du:
        case 0x57u:
        case 0x5Au:
        case 0x77u:
        case 0x7Au:
        case 0xC0u:
        case 0xC1u:
        case 0xC2u:
        case 0xC3u:
        case 0xCCu:
        case 0xCDu:
        case 0xCEu:
        case 0xD1u:
        case 0xDCu:
        case 0xE4u:
        case 0xEBu:
        case 0xFCu:
        case 0xFFu:
          uint64_t v10 = 4;
          if (!v4) {
            goto LABEL_30;
          }
          goto LABEL_35;
        case 0x24u:
        case 0x25u:
        case 0x41u:
        case 0x42u:
        case 0x46u:
        case 0x47u:
        case 0x48u:
        case 0x49u:
        case 0x4Bu:
        case 0x4Eu:
        case 0x52u:
        case 0x59u:
        case 0x6Bu:
        case 0x6Du:
        case 0xA3u:
        case 0xAAu:
        case 0xD6u:
        case 0xD9u:
        case 0xDAu:
        case 0xDBu:
        case 0xE0u:
        case 0xE1u:
        case 0xE2u:
        case 0xE3u:
        case 0xE8u:
        case 0xE9u:
        case 0xEAu:
        case 0xEFu:
        case 0xF1u:
        case 0xF6u:
        case 0xF7u:
        case 0xF9u:
        case 0xFAu:
        case 0xFBu:
        case 0x152u:
        case 0x153u:
          goto LABEL_28;
        case 0x26u:
        case 0x27u:
        case 0x28u:
        case 0x29u:
        case 0x2Cu:
        case 0x2Du:
        case 0x2Eu:
        case 0x2Fu:
        case 0x36u:
        case 0x3Cu:
        case 0x3Eu:
        case 0x43u:
        case 0x4Fu:
        case 0x53u:
        case 0x5Bu:
        case 0x5Cu:
        case 0x5Du:
        case 0x5Eu:
        case 0x5Fu:
        case 0x60u:
        case 0x63u:
        case 0x6Cu:
        case 0x6Fu:
        case 0x73u:
        case 0x7Cu:
        case 0x7Eu:
        case 0x7Fu:
        case 0x80u:
        case 0x81u:
        case 0x82u:
        case 0x83u:
        case 0x84u:
        case 0x85u:
        case 0x86u:
        case 0x87u:
        case 0x88u:
        case 0x89u:
        case 0x8Au:
        case 0x8Bu:
        case 0x8Cu:
        case 0x8Du:
        case 0x8Eu:
        case 0x8Fu:
        case 0x90u:
        case 0x91u:
        case 0x92u:
        case 0x93u:
        case 0x94u:
        case 0x95u:
        case 0x96u:
        case 0x97u:
        case 0x98u:
        case 0x99u:
        case 0x9Au:
        case 0x9Bu:
        case 0x9Cu:
        case 0x9Du:
        case 0x9Eu:
        case 0x9Fu:
        case 0xA0u:
        case 0xA2u:
        case 0xA4u:
        case 0xA6u:
        case 0xA8u:
        case 0xA9u:
        case 0xACu:
        case 0xADu:
        case 0xAEu:
        case 0xAFu:
        case 0xB0u:
        case 0xB1u:
        case 0xB2u:
        case 0xB3u:
        case 0xB4u:
        case 0xB5u:
        case 0xB6u:
        case 0xB7u:
        case 0xB8u:
        case 0xB9u:
        case 0xBCu:
        case 0xBDu:
        case 0xBEu:
        case 0xC5u:
        case 0xC6u:
        case 0xCBu:
        case 0xD0u:
        case 0xD8u:
        case 0xDDu:
        case 0xDEu:
        case 0xE5u:
        case 0xE6u:
        case 0xF0u:
        case 0xF8u:
        case 0xFDu:
        case 0xFEu:
        case 0x100u:
        case 0x101u:
        case 0x102u:
        case 0x103u:
        case 0x104u:
        case 0x105u:
        case 0x106u:
        case 0x107u:
        case 0x108u:
        case 0x109u:
        case 0x10Au:
        case 0x10Bu:
        case 0x10Cu:
        case 0x10Du:
        case 0x10Eu:
        case 0x10Fu:
        case 0x110u:
        case 0x111u:
        case 0x112u:
        case 0x113u:
        case 0x114u:
        case 0x115u:
        case 0x116u:
        case 0x117u:
        case 0x118u:
        case 0x119u:
        case 0x11Au:
        case 0x11Bu:
        case 0x11Cu:
        case 0x11Du:
        case 0x11Eu:
        case 0x11Fu:
        case 0x120u:
        case 0x121u:
        case 0x122u:
        case 0x123u:
        case 0x124u:
        case 0x125u:
        case 0x126u:
        case 0x127u:
        case 0x128u:
        case 0x129u:
        case 0x12Au:
        case 0x12Bu:
        case 0x12Cu:
        case 0x12Du:
        case 0x12Eu:
        case 0x12Fu:
        case 0x130u:
        case 0x131u:
        case 0x132u:
        case 0x133u:
        case 0x134u:
        case 0x135u:
        case 0x136u:
        case 0x137u:
        case 0x138u:
        case 0x139u:
        case 0x13Au:
        case 0x13Bu:
        case 0x13Cu:
        case 0x13Du:
        case 0x13Eu:
        case 0x13Fu:
        case 0x140u:
        case 0x141u:
        case 0x142u:
        case 0x143u:
        case 0x144u:
        case 0x145u:
        case 0x146u:
        case 0x147u:
        case 0x148u:
        case 0x149u:
        case 0x14Au:
        case 0x14Bu:
        case 0x14Cu:
        case 0x14Du:
        case 0x14Eu:
        case 0x14Fu:
        case 0x150u:
        case 0x151u:
        case 0x154u:
        case 0x155u:
        case 0x156u:
        case 0x157u:
        case 0x158u:
        case 0x159u:
        case 0x15Au:
        case 0x15Bu:
        case 0x15Cu:
        case 0x15Du:
        case 0x15Eu:
        case 0x15Fu:
        case 0x160u:
        case 0x161u:
        case 0x162u:
        case 0x163u:
        case 0x164u:
        case 0x165u:
        case 0x166u:
        case 0x167u:
        case 0x168u:
        case 0x169u:
        case 0x16Au:
        case 0x16Bu:
        case 0x16Cu:
        case 0x16Du:
        case 0x16Eu:
        case 0x16Fu:
        case 0x170u:
        case 0x171u:
        case 0x172u:
        case 0x173u:
        case 0x174u:
        case 0x175u:
        case 0x176u:
        case 0x177u:
          goto LABEL_32;
        case 0xA5u:
        case 0xC4u:
        case 0xC8u:
        case 0xC9u:
        case 0xCAu:
        case 0xCFu:
        case 0x178u:
          goto LABEL_29;
        default:
          if (v3 != 7838) {
            goto LABEL_32;
          }
          goto LABEL_16;
      }
    }
    if (v3 - 8220 < 3)
    {
LABEL_16:
      uint64_t v10 = 2;
      if (v4) {
        goto LABEL_35;
      }
    }
    else if (v3 == 8230 || v3 == 8364)
    {
LABEL_28:
      uint64_t v10 = 3;
LABEL_29:
      if (v4)
      {
        while (1)
        {
LABEL_35:
          while (1)
          {
            uint64_t v15 = (uint64_t **)v4;
            unsigned int v16 = *((_DWORD *)v4 + 8);
            if (v16 <= v3) {
              break;
            }
            uint64_t v4 = *v15;
            uint64_t v14 = v15;
            if (!*v15) {
              goto LABEL_39;
            }
          }
          if (v16 >= v3) {
            goto LABEL_42;
          }
          uint64_t v4 = v15[1];
          if (!v4)
          {
            uint64_t v14 = v15 + 1;
            goto LABEL_39;
          }
        }
      }
    }
    else
    {
LABEL_32:
      uint64_t v10 = 1;
      if (v4) {
        goto LABEL_35;
      }
    }
LABEL_30:
    uint64_t v14 = (uint64_t **)(v2 + 280);
    uint64_t v15 = (uint64_t **)(v2 + 280);
LABEL_39:
    uint64_t v17 = (uint64_t *)v15;
    uint64_t v15 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v15 + 8) = v3;
    v15[5] = 0;
    *uint64_t v15 = 0;
    v15[1] = 0;
    v15[2] = v17;
    *uint64_t v14 = (uint64_t *)v15;
    uint64_t v18 = **(void **)(v2 + 272);
    uint64_t v19 = (uint64_t *)v15;
    if (v18)
    {
      *(void *)(v2 + 272) = v18;
      uint64_t v19 = *v14;
    }
    __n128 result = sub_1C4949FD4(*(uint64_t **)(v2 + 280), v19);
    ++*(void *)(v2 + 288);
LABEL_42:
    v15[5] = (uint64_t *)v10;
    goto LABEL_43;
  }
  uint64_t v5 = *(uint64_t **)(v2 + 280);
  while (1)
  {
    unsigned int v6 = *((_DWORD *)v5 + 8);
    if (v6 <= v3) {
      break;
    }
LABEL_4:
    uint64_t v5 = (uint64_t *)*v5;
    if (!v5) {
      goto LABEL_14;
    }
  }
  if (v6 < v3)
  {
    ++v5;
    goto LABEL_4;
  }
  do
  {
    while (1)
    {
      uint64_t v7 = (uint64_t **)v4;
      unsigned int v8 = *((_DWORD *)v4 + 8);
      if (v8 > v3) {
        break;
      }
      if (v8 >= v3)
      {
        uint64_t v10 = (uint64_t)v7[5];
        goto LABEL_43;
      }
      uint64_t v4 = v7[1];
      if (!v4)
      {
        uint64_t v9 = v7 + 1;
        goto LABEL_21;
      }
    }
    uint64_t v4 = *v7;
  }
  while (*v7);
  uint64_t v9 = v7;
LABEL_21:
  CGRect v11 = operator new(0x30uLL);
  *((_DWORD *)v11 + 8) = v3;
  *((void *)v11 + 5) = 0;
  *(void *)CGRect v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = v7;
  *uint64_t v9 = (uint64_t *)v11;
  uint64_t v12 = **(void **)(v2 + 272);
  CGRect v13 = (uint64_t *)v11;
  if (v12)
  {
    *(void *)(v2 + 272) = v12;
    CGRect v13 = *v9;
  }
  __n128 result = sub_1C4949FD4(*(uint64_t **)(v2 + 280), v13);
  ++*(void *)(v2 + 288);
  uint64_t v10 = *((void *)v11 + 5);
LABEL_43:
  *(void *)(*(void *)(v1[5] + 8) + 24) = v10;
  return result;
}

uint64_t sub_1C4BB9FCC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    int v2 = *(_DWORD *)(result + 48);
    uint64_t v1 = 3;
    switch(v2)
    {
      case 34:
      case 58:
      case 59:
      case 161:
      case 171:
      case 187:
      case 192:
      case 193:
      case 194:
      case 195:
      case 200:
      case 201:
      case 202:
      case 204:
      case 205:
      case 206:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 217:
      case 218:
      case 219:
      case 224:
      case 225:
      case 226:
      case 227:
      case 232:
      case 233:
      case 234:
      case 236:
      case 237:
      case 238:
      case 241:
      case 242:
      case 243:
      case 244:
      case 245:
      case 249:
      case 250:
      case 251:
        goto LABEL_3;
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
      case 144:
      case 145:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
      case 157:
      case 158:
      case 159:
      case 160:
      case 162:
      case 163:
      case 164:
      case 165:
      case 166:
      case 167:
      case 168:
      case 169:
      case 170:
      case 172:
      case 173:
      case 174:
      case 175:
      case 176:
      case 177:
      case 178:
      case 179:
      case 180:
      case 181:
      case 182:
      case 183:
      case 184:
      case 185:
      case 186:
      case 188:
      case 189:
      case 190:
      case 191:
      case 197:
      case 198:
      case 199:
      case 208:
      case 215:
      case 216:
      case 221:
      case 222:
      case 223:
      case 229:
      case 230:
      case 231:
      case 240:
      case 248:
      case 253:
      case 254:
      case 255:
      case 256:
      case 257:
      case 258:
      case 259:
      case 260:
      case 261:
      case 262:
      case 263:
      case 264:
      case 265:
      case 266:
      case 267:
      case 268:
      case 269:
      case 270:
      case 271:
      case 272:
      case 273:
      case 274:
      case 275:
      case 276:
      case 277:
      case 278:
      case 279:
      case 280:
      case 281:
      case 282:
      case 283:
      case 284:
      case 285:
      case 286:
      case 287:
      case 288:
      case 289:
      case 290:
      case 291:
      case 292:
      case 293:
      case 294:
      case 295:
      case 296:
      case 297:
      case 298:
      case 299:
      case 300:
      case 301:
      case 302:
      case 303:
      case 304:
      case 305:
      case 306:
      case 307:
      case 308:
      case 309:
      case 310:
      case 311:
      case 312:
      case 313:
      case 314:
      case 315:
      case 316:
      case 317:
      case 318:
      case 319:
      case 320:
      case 321:
      case 322:
      case 323:
      case 324:
      case 325:
      case 326:
      case 327:
      case 328:
      case 329:
      case 330:
      case 331:
      case 332:
      case 333:
      case 334:
      case 335:
      case 336:
      case 337:
      case 338:
      case 339:
      case 340:
      case 341:
      case 342:
      case 343:
      case 344:
      case 345:
      case 346:
      case 347:
      case 348:
      case 349:
      case 350:
      case 351:
      case 352:
      case 353:
      case 354:
      case 355:
      case 356:
      case 357:
      case 358:
      case 359:
      case 360:
      case 361:
      case 362:
      case 363:
      case 364:
      case 365:
      case 366:
      case 367:
      case 368:
      case 369:
      case 370:
      case 371:
      case 372:
      case 373:
      case 374:
      case 375:
        goto LABEL_7;
      case 196:
      case 203:
      case 207:
      case 214:
      case 220:
      case 228:
      case 235:
      case 239:
      case 246:
      case 247:
      case 252:
      case 376:
        goto LABEL_4;
      default:
        if ((v2 - 8220) < 3)
        {
LABEL_3:
          uint64_t v1 = 2;
          goto LABEL_4;
        }
        if (v2 == 8230) {
          goto LABEL_4;
        }
LABEL_7:
        *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = 1;
        break;
    }
  }
  else
  {
LABEL_4:
    *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = v1;
  }
  return result;
}

unint64_t sub_1C4BBA6BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    unint64_t result = sub_1C4BBA870(result, (const char *)*(unsigned int *)(a1 + 48), a3, a4, a5, a6);
    uint64_t v8 = 2;
    if ((result & 0x8000) == 0) {
      uint64_t v8 = (result >> 14) & 1;
    }
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v8;
  }
  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
  return result;
}

uint64_t sub_1C4BBA838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = sub_1C4BBA870(*(void *)(a1 + 32), (const char *)*(unsigned int *)(a1 + 48), a3, a4, a5, a6);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1C4BBA870(uint64_t result, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result)
  {
    unsigned int v6 = a2;
    uint64_t v7 = result;
    uint64_t v8 = (uint64_t **)(result + 304);
    uint64_t v9 = *(uint64_t **)(result + 304);
    if (!v9) {
      goto LABEL_13;
    }
    uint64_t v10 = result + 304;
    uint64_t v11 = *(void *)(result + 304);
    do
    {
      unsigned int v12 = *(_DWORD *)(v11 + 28);
      BOOL v13 = v12 >= a2;
      if (v12 >= a2) {
        uint64_t v14 = (uint64_t *)v11;
      }
      else {
        uint64_t v14 = (uint64_t *)(v11 + 8);
      }
      if (v13) {
        uint64_t v10 = v11;
      }
      uint64_t v11 = *v14;
    }
    while (*v14);
    if ((uint64_t **)v10 != v8 && *(_DWORD *)(v10 + 28) <= a2)
    {
      while (1)
      {
LABEL_88:
        while (1)
        {
          uint64_t v147 = (uint64_t **)v9;
          unsigned int v148 = *((_DWORD *)v9 + 7);
          if (v148 <= v6) {
            break;
          }
          uint64_t v9 = *v147;
          uint64_t v8 = v147;
          if (!*v147) {
            goto LABEL_92;
          }
        }
        if (v148 >= v6) {
          break;
        }
        uint64_t v9 = v147[1];
        if (!v9)
        {
          uint64_t v8 = v147 + 1;
          goto LABEL_92;
        }
      }
    }
    else
    {
LABEL_13:
      int IsMember = objc_msgSend_characterIsMember_(*(void **)(result + 8), a2, (unsigned __int16)a2, a4, a5, a6);
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 16), v16, (unsigned __int16)v6, v17, v18, v19)) {
        IsMember |= 2u;
      }
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 24), v20, (unsigned __int16)v6, v21, v22, v23)) {
        IsMember |= 4u;
      }
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 32), v24, (unsigned __int16)v6, v25, v26, v27)) {
        IsMember |= 8u;
      }
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 40), v28, (unsigned __int16)v6, v29, v30, v31)) {
        IsMember |= 0x10u;
      }
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 48), v32, (unsigned __int16)v6, v33, v34, v35)) {
        IsMember |= 0x20u;
      }
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 56), v36, (unsigned __int16)v6, v37, v38, v39)) {
        IsMember |= 0x40u;
      }
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 64), v40, (unsigned __int16)v6, v41, v42, v43)) {
        IsMember |= 0x80u;
      }
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 72), v44, (unsigned __int16)v6, v45, v46, v47)) {
        IsMember |= 0x100u;
      }
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 80), v48, (unsigned __int16)v6, v49, v50, v51)) {
        IsMember |= 0x200u;
      }
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 88), v52, (unsigned __int16)v6, v53, v54, v55)) {
        IsMember |= 0x400u;
      }
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 96), v56, (unsigned __int16)v6, v57, v58, v59)) {
        IsMember |= 0x800u;
      }
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 104), v60, (unsigned __int16)v6, v61, v62, v63)) {
        IsMember |= 0x1000u;
      }
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 112), v64, (unsigned __int16)v6, v65, v66, v67)) {
        IsMember |= 0x2000u;
      }
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 120), v68, (unsigned __int16)v6, v69, v70, v71)) {
        IsMember |= 0x4000u;
      }
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 128), v72, (unsigned __int16)v6, v73, v74, v75)) {
        IsMember |= 0x8000u;
      }
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 136), v76, (unsigned __int16)v6, v77, v78, v79)) {
        IsMember |= 0x10000u;
      }
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 144), v80, (unsigned __int16)v6, v81, v82, v83)) {
        IsMember |= 0x20000u;
      }
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 152), v84, (unsigned __int16)v6, v85, v86, v87)) {
        IsMember |= 0x40000u;
      }
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 160), v88, (unsigned __int16)v6, v89, v90, v91)) {
        IsMember |= 0x80000u;
      }
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 168), v92, (unsigned __int16)v6, v93, v94, v95)) {
        IsMember |= 0x100000u;
      }
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 176), v96, (unsigned __int16)v6, v97, v98, v99)) {
        IsMember |= 0x200000u;
      }
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 184), v100, (unsigned __int16)v6, v101, v102, v103))IsMember |= 0x400000u; {
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 192), v104, (unsigned __int16)v6, v105, v106, v107))IsMember |= 0x800000u;
      }
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 200), v108, (unsigned __int16)v6, v109, v110, v111))IsMember |= 0x1000000u; {
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 208), v112, (unsigned __int16)v6, v113, v114, v115))IsMember |= 0x2000000u;
      }
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 224), v116, (unsigned __int16)v6, v117, v118, v119))IsMember |= 0x4000000u; {
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 216), v120, (unsigned __int16)v6, v121, v122, v123))IsMember |= 0x8000000u;
      }
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 232), v124, (unsigned __int16)v6, v125, v126, v127))IsMember |= 0x10000000u; {
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 240), v128, (unsigned __int16)v6, v129, v130, v131))IsMember |= 0x20000000u;
      }
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 248), v132, (unsigned __int16)v6, v133, v134, v135))IsMember |= 0x40000000u; {
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 256), v136, (unsigned __int16)v6, v137, v138, v139))IsMember |= 0x80000000;
      }
      uint64_t v9 = *(uint64_t **)(v7 + 304);
      uint64_t v140 = v8;
      uint64_t v141 = v8;
      if (v9)
      {
        uint64_t v142 = *(uint64_t **)(v7 + 304);
        while (1)
        {
          while (1)
          {
            uint64_t v141 = (uint64_t **)v142;
            unsigned int v143 = *((_DWORD *)v142 + 7);
            if (v143 <= v6) {
              break;
            }
            uint64_t v142 = *v141;
            uint64_t v140 = v141;
            if (!*v141) {
              goto LABEL_82;
            }
          }
          if (v143 >= v6) {
            break;
          }
          uint64_t v142 = v141[1];
          if (!v142)
          {
            uint64_t v140 = v141 + 1;
            goto LABEL_82;
          }
        }
      }
      else
      {
LABEL_82:
        uint64_t v144 = (uint64_t *)v141;
        uint64_t v141 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v141 + 7) = v6;
        *((_DWORD *)v141 + 8) = 0;
        *uint64_t v141 = 0;
        v141[1] = 0;
        v141[2] = v144;
        *uint64_t v140 = (uint64_t *)v141;
        uint64_t v145 = **(void **)(v7 + 296);
        uint64_t v146 = (uint64_t *)v141;
        if (v145)
        {
          *(void *)(v7 + 296) = v145;
          uint64_t v146 = *v140;
        }
        sub_1C4949FD4(*(uint64_t **)(v7 + 304), v146);
        uint64_t v9 = *(uint64_t **)(v7 + 304);
        ++*(void *)(v7 + 312);
      }
      *((_DWORD *)v141 + 8) = IsMember;
      uint64_t v147 = v8;
      if (v9) {
        goto LABEL_88;
      }
LABEL_92:
      uint64_t v149 = (uint64_t *)v147;
      uint64_t v147 = (uint64_t **)operator new(0x28uLL);
      *((_DWORD *)v147 + 7) = v6;
      *((_DWORD *)v147 + 8) = 0;
      *uint64_t v147 = 0;
      v147[1] = 0;
      v147[2] = v149;
      *uint64_t v8 = (uint64_t *)v147;
      uint64_t v150 = **(void **)(v7 + 296);
      uint64_t v151 = (uint64_t *)v147;
      if (v150)
      {
        *(void *)(v7 + 296) = v150;
        uint64_t v151 = *v8;
      }
      sub_1C4949FD4(*(uint64_t **)(v7 + 304), v151);
      ++*(void *)(v7 + 312);
    }
    return *((int *)v147 + 8);
  }
  return result;
}

void sub_1C4BBAE60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BBB388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BBB39C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CHResetInventory()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = objc_alloc_init(CHRemoteTextSynthesizer);
  id v14 = 0;
  char v5 = objc_msgSend_resetStyleInventory_(v0, v1, (uint64_t)&v14, v2, v3, v4);
  id v6 = v14;
  if ((v5 & 1) == 0)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v7 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      BOOL v13 = objc_msgSend_localizedDescription(v6, v8, v9, v10, v11, v12);
      *(_DWORD *)long long buf = 138412290;
      unsigned int v16 = v13;
      _os_log_impl(&dword_1C492D000, v7, OS_LOG_TYPE_ERROR, "Failed to reset style personalization. Error: %@", buf, 0xCu);
    }
  }
}

void sub_1C4BBB6B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CHHasPersonalizedSynthesisSupport()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (qword_1EA3C94E0 == -1)
  {
    if (qword_1EA3CA000 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    dispatch_once(&qword_1EA3C94E0, &unk_1F2013010);
    if (qword_1EA3CA000 == -1) {
      goto LABEL_3;
    }
  }
  dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
LABEL_3:
  uint64_t v0 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
  {
    if (byte_1EA3C94D8) {
      uint64_t v1 = @"Yes";
    }
    else {
      uint64_t v1 = @"No";
    }
    int v3 = 138412290;
    uint64_t v4 = v1;
    _os_log_impl(&dword_1C492D000, v0, OS_LOG_TYPE_DEBUG, "Has personalized synthesis support: %@", (uint8_t *)&v3, 0xCu);
  }

  return byte_1EA3C94D8;
}

void sub_1C4BBB800()
{
  deviceANESubType();
  id v14 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_hasPrefix_(v14, v0, @"H", v1, v2, v3))
  {
    uint64_t v8 = objc_msgSend_substringFromIndex_(v14, v4, 1, v5, v6, v7);
    if (objc_msgSend_integerValue(v8, v9, v10, v11, v12, v13) >= 13) {
      byte_1EA3C94D8 = 1;
    }
  }
}

void sub_1C4BBB884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BBB89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BBB8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t CHHasHandwritingGenerationAllowed(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (qword_1EA3C94F0 != -1) {
    dispatch_once(&qword_1EA3C94F0, &unk_1F20113B0);
  }
  isPersonalizedHandwritingResultsAlloweCGFloat d = objc_msgSend_isPersonalizedHandwritingResultsAllowed((void *)qword_1EA3C94E8, a2, a3, a4, a5, a6);
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v7 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = @"No";
    if (isPersonalizedHandwritingResultsAllowed) {
      uint64_t v8 = @"Yes";
    }
    int v10 = 138412290;
    uint64_t v11 = v8;
    _os_log_impl(&dword_1C492D000, v7, OS_LOG_TYPE_DEBUG, "Has handwriting generation allowed: %@", (uint8_t *)&v10, 0xCu);
  }

  return isPersonalizedHandwritingResultsAllowed;
}

void sub_1C4BBB9E4()
{
  uint64_t v0 = objc_alloc_init(CHManagedConfigurations);
  uint64_t v1 = (void *)qword_1EA3C94E8;
  qword_1EA3C94E8 = (uint64_t)v0;
}

uint64_t isLocaleSupported(NSLocale *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_languageCode(a1, a2, a3, a4, a5, a6);
  uint64_t v11 = objc_msgSend_containsObject_(&unk_1F203DD40, v7, (uint64_t)v6, v8, v9, v10);

  return v11;
}

void sub_1C4BBBA64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CHHasPersonalizedSynthesisSupportForLocale(void *a1)
{
  id v1 = a1;
  if (CHHasPersonalizedSynthesisSupport())
  {
    uint64_t v7 = objc_msgSend_languageCode(v1, v2, v3, v4, v5, v6);
    uint64_t v12 = objc_msgSend_containsObject_(&unk_1F203DD40, v8, (uint64_t)v7, v9, v10, v11);

    return v12;
  }
  else
  {

    return 0;
  }
}

void sub_1C4BBBAF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BBBB08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id latestStyleInventoryStatus(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (qword_1EA3C9510 == -1)
  {
    objc_msgSend_timeIntervalSinceNow((void *)qword_1EA3C9508, a2, a3, a4, a5, a6);
    if (v6 >= -3.0) {
      goto LABEL_8;
    }
  }
  else
  {
    dispatch_once(&qword_1EA3C9510, &unk_1F2013C28);
    objc_msgSend_timeIntervalSinceNow((void *)qword_1EA3C9508, v24, v25, v26, v27, v28);
    if (v29 >= -3.0) {
      goto LABEL_8;
    }
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v7 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v30 = 0;
    _os_log_impl(&dword_1C492D000, v7, OS_LOG_TYPE_DEBUG, "latestStyleInventoryStatus: requesting update", v30, 2u);
  }

  uint64_t v13 = objc_msgSend_cachedStyleInventoryStatus((void *)qword_1EA3C9500, v8, v9, v10, v11, v12);
  id v14 = (void *)qword_1EA3C94F8;
  qword_1EA3C94F8 = v13;

  uint64_t v20 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], v15, v16, v17, v18, v19);
  uint64_t v21 = (void *)qword_1EA3C9508;
  qword_1EA3C9508 = v20;

LABEL_8:
  uint64_t v22 = (void *)qword_1EA3C94F8;
  return v22;
}

void sub_1C4BBBC58(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_dateWithTimeIntervalSince1970_(MEMORY[0x1E4F1C9C8], a2, a3, a4, a5, a6, 0.0);
  uint64_t v7 = (void *)qword_1EA3C9508;
  qword_1EA3C9508 = v6;

  uint64_t v8 = objc_alloc_init(CHRemoteTextSynthesizer);
  uint64_t v9 = (void *)qword_1EA3C9500;
  qword_1EA3C9500 = (uint64_t)v8;

  uint64_t v15 = objc_msgSend_styleInventoryStatus((void *)qword_1EA3C9500, v10, v11, v12, v13, v14);
  uint64_t v16 = (void *)qword_1EA3C94F8;
  qword_1EA3C94F8 = v15;
}

BOOL CHHasPersonalizedSynthesisModelReady(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = latestStyleInventoryStatus(a1, a2, a3, a4, a5, a6);
  uint64_t v12 = objc_msgSend_personalizedSynthesisModelState(v6, v7, v8, v9, v10, v11);

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v13 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v14 = @"No";
    if (v12 == 2) {
      uint64_t v14 = @"Yes";
    }
    int v16 = 138412290;
    uint64_t v17 = v14;
    _os_log_impl(&dword_1C492D000, v13, OS_LOG_TYPE_DEBUG, "Is personalized synthesis model ready: %@", (uint8_t *)&v16, 0xCu);
  }

  return v12 == 2;
}

void sub_1C4BBBDE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CHHasPersonalizedSynthesisModelReadyForLocale(void *a1)
{
  id v1 = a1;
  if (CHHasPersonalizedSynthesisModelReady((uint64_t)v1, v2, v3, v4, v5, v6))
  {
    uint64_t v12 = objc_msgSend_languageCode(v1, v7, v8, v9, v10, v11);
    uint64_t v17 = objc_msgSend_containsObject_(&unk_1F203DD40, v13, (uint64_t)v12, v14, v15, v16);

    return v17;
  }
  else
  {

    return 0;
  }
}

void sub_1C4BBBE74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BBBE88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t isStylePersonalizationAvailable(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = latestStyleInventoryStatus(a1, a2, a3, a4, a5, a6);
  uint64_t isPersonalizationAvailable = objc_msgSend_isPersonalizationAvailable(v6, v7, v8, v9, v10, v11);

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v13 = (id)qword_1EA3C9FD8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v14 = @"No";
    if (isPersonalizationAvailable) {
      uint64_t v14 = @"Yes";
    }
    int v16 = 138412290;
    uint64_t v17 = v14;
    _os_log_impl(&dword_1C492D000, v13, OS_LOG_TYPE_DEBUG, "Is personalization available: %@", (uint8_t *)&v16, 0xCu);
  }

  return isPersonalizationAvailable;
}

void sub_1C4BBBF98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CHGetPersonalizedSynthesisSupportState()
{
  uint64_t v0 = CHHasPersonalizedSynthesisSupport();
  if (!v0) {
    return 0;
  }
  uint64_t v6 = latestStyleInventoryStatus(v0, v1, v2, v3, v4, v5);
  uint64_t v12 = objc_msgSend_personalizedSynthesisModelState(v6, v7, v8, v9, v10, v11);

  if (!v12) {
    return 1;
  }
  if (v12 == 1) {
    return 2;
  }
  if (isStylePersonalizationAvailable(v13, v14, v15, v16, v17, v18)) {
    return 4;
  }
  return 3;
}

void sub_1C4BBC034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CHGetPersonalizedSynthesisSupportStateForLocale(void *a1)
{
  id v1 = a1;
  uint64_t v7 = objc_msgSend_languageCode(v1, v2, v3, v4, v5, v6);
  char v12 = objc_msgSend_containsObject_(&unk_1F203DD40, v8, (uint64_t)v7, v9, v10, v11);

  if ((v12 & 1) != 0 && (uint64_t v13 = CHHasPersonalizedSynthesisSupport(), v13))
  {
    uint64_t v19 = latestStyleInventoryStatus(v13, v14, v15, v16, v17, v18);
    uint64_t v25 = objc_msgSend_personalizedSynthesisModelState(v19, v20, v21, v22, v23, v24);

    if (v25)
    {
      if (v25 == 1)
      {

        return 2;
      }
      else
      {
        if (isStylePersonalizationAvailable(v26, v27, v28, v29, v30, v31)) {
          uint64_t v33 = 4;
        }
        else {
          uint64_t v33 = 3;
        }

        return v33;
      }
    }
    else
    {

      return 1;
    }
  }
  else
  {

    return 0;
  }
}

void sub_1C4BBC130(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1C4BBC148(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1C4BBC160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CHGetSynthesisModelVersionForLocale(void *a1)
{
  id v1 = a1;
  uint64_t v2 = CHHasPersonalizedSynthesisSupportForLocale(v1);
  if (v2)
  {
    uint64_t v8 = latestStyleInventoryStatus(v2, v3, v4, v5, v6, v7);
    uint64_t v14 = objc_msgSend_personalizedSynthesisModelVersion(v8, v9, v10, v11, v12, v13);
  }
  else
  {
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1C4BBC1E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BBC1F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BBC51C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BBC640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BBC674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BBC68C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BBC69C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BBC790(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4BBC7C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BBC7D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BBC86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BBC884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BBCA50(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4BBCF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1C4BBE644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,void *a21,void *a22,void *a23,uint64_t a24,void *a25,void *a26,void *a27,uint64_t a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  sub_1C49A1374((void *)STACK[0x978]);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BBEAF8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v12 = objc_msgSend_strokeIdentifier(a2, v7, v8, v9, v10, v11);
  uint64_t v18 = objc_msgSend_strokeIdentifier(v5, v13, v14, v15, v16, v17);
  uint64_t v22 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(v6, v19, (uint64_t)v12, (uint64_t)v18, v20, v21);

  return v22;
}

void sub_1C4BBEB74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BBEB94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BBEBA4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, char a9, void *a10, void *a11, void *a12)
{
  uint64_t v710 = *MEMORY[0x1E4F143B8];
  id v600 = a2;
  id v622 = a3;
  id v597 = a4;
  id v602 = a5;
  id v601 = a6;
  id v615 = a7;
  id v598 = a8;
  id v626 = a10;
  double v613 = a12;
  if (a1)
  {
    double v24 = 3.6;
    if (a9) {
      double v24 = 6.0;
    }
    *(double *)(a1 + 72) = v24;
    uint64_t v681 = 0;
    uint64_t v682 = (double *)&v681;
    uint64_t v683 = 0x2020000000;
    uint64_t v684 = 0x40C3880000000000;
    uint64_t v675 = 0;
    v676 = &v675;
    uint64_t v677 = 0x3032000000;
    uint64_t v678 = sub_1C4BC1C50;
    uint64_t v679 = sub_1C4BC1C60;
    id v680 = 0;
    uint64_t v669 = 0;
    v670 = &v669;
    uint64_t v671 = 0x3032000000;
    uint64_t v672 = sub_1C4BC1C50;
    uint64_t v673 = sub_1C4BC1C60;
    id v674 = 0;
    uint64_t v665 = 0;
    uint64_t v666 = &v665;
    uint64_t v667 = 0x2020000000;
    char v668 = 0;
    uint64_t v25 = objc_msgSend_encodedStrokeIdentifier(v602, v19, v20, v21, v22, v23);
    uint64_t v623 = a1;
    uint64_t v30 = objc_msgSend_objectForKey_(v615, v26, (uint64_t)v25, v27, v28, v29);

    CGFloat x = *MEMORY[0x1E4F1DB20];
    CGFloat y = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    CGFloat width = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    CGFloat height = *(double *)(MEMORY[0x1E4F1DB20] + 24);
    long long v661 = 0u;
    long long v662 = 0u;
    long long v663 = 0u;
    long long v664 = 0u;
    id obj = v30;
    uint64_t v42 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v35, (uint64_t)&v661, (uint64_t)v704, 16, v36);
    if (v42)
    {
      uint64_t v43 = *(void *)v662;
      do
      {
        for (uint64_t i = 0; i != v42; ++i)
        {
          if (*(void *)v662 != v43) {
            objc_enumerationMutation(obj);
          }
          uint64_t v45 = objc_msgSend_substroke(*(void **)(*((void *)&v661 + 1) + 8 * i), v37, v38, v39, v40, v41);
          objc_msgSend_bounds(v45, v46, v47, v48, v49, v50);
          v718.origin.CGFloat x = v51;
          v718.origin.CGFloat y = v52;
          v718.size.CGFloat width = v53;
          v718.size.CGFloat height = v54;
          v711.origin.CGFloat x = x;
          v711.origin.CGFloat y = y;
          v711.size.CGFloat width = width;
          v711.size.CGFloat height = height;
          CGRect v712 = CGRectUnion(v711, v718);
          CGFloat x = v712.origin.x;
          CGFloat y = v712.origin.y;
          CGFloat width = v712.size.width;
          CGFloat height = v712.size.height;
        }
        uint64_t v42 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v37, (uint64_t)&v661, (uint64_t)v704, 16, v41);
      }
      while (v42);
    }

    v650[0] = MEMORY[0x1E4F143A8];
    v650[1] = 3221225472;
    v650[2] = sub_1C4BC1C68;
    v650[3] = &unk_1E64E4D90;
    CGFloat v657 = x;
    CGFloat v658 = y;
    CGFloat v659 = width;
    CGFloat v660 = height;
    v650[4] = a1;
    uint64_t v653 = &v681;
    id v616 = v602;
    id v651 = v616;
    objCGFloat a = obj;
    id v652 = obja;
    uint64_t v654 = &v675;
    long long v655 = &v669;
    v656 = &v665;
    uint64_t v55 = MEMORY[0x1C8786E90](v650);
    uint64_t v56 = (void (**)(void, void))v55;
    if (v626) {
      (*(void (**)(uint64_t))(v55 + 16))(v55);
    }
    long long v648 = 0u;
    long long v649 = 0u;
    long long v646 = 0u;
    long long v647 = 0u;
    id v627 = v600;
    uint64_t v63 = objc_msgSend_countByEnumeratingWithState_objects_count_(v627, v57, (uint64_t)&v646, (uint64_t)v703, 16, v58);
    if (v63)
    {
      uint64_t v64 = *(void *)v647;
      if (v626)
      {
        do
        {
          for (uint64_t j = 0; j != v63; ++j)
          {
            if (*(void *)v647 != v64) {
              objc_enumerationMutation(v627);
            }
            uint64_t v66 = *(void **)(*((void *)&v646 + 1) + 8 * j);
            if ((objc_msgSend_isEqual_(v66, v59, (uint64_t)v626, v60, v61, v62) & 1) == 0) {
              ((void (**)(void, void *))v56)[2](v56, v66);
            }
          }
          uint64_t v63 = objc_msgSend_countByEnumeratingWithState_objects_count_(v627, v59, (uint64_t)&v646, (uint64_t)v703, 16, v62);
        }
        while (v63);
      }
      else
      {
        do
        {
          for (uint64_t k = 0; k != v63; ++k)
          {
            if (*(void *)v647 != v64) {
              objc_enumerationMutation(v627);
            }
            v56[2](v56, *(void *)(*((void *)&v646 + 1) + 8 * k));
          }
          uint64_t v63 = objc_msgSend_countByEnumeratingWithState_objects_count_(v627, v68, (uint64_t)&v646, (uint64_t)v703, 16, v69);
        }
        while (v63);
      }
    }

    if (v601 && v670[5])
    {
      long long v644 = 0u;
      long long v645 = 0u;
      long long v642 = 0u;
      long long v643 = 0u;
      id v75 = v601;
      uint64_t v83 = objc_msgSend_countByEnumeratingWithState_objects_count_(v75, v76, (uint64_t)&v642, (uint64_t)v702, 16, v77);
      if (v83)
      {
        uint64_t v84 = *(void *)v643;
        while (2)
        {
          for (uint64_t m = 0; m != v83; ++m)
          {
            if (*(void *)v643 != v84) {
              objc_enumerationMutation(v75);
            }
            uint64_t v86 = *(void **)(*((void *)&v642 + 1) + 8 * m);
            uint64_t v87 = objc_msgSend_encodedStrokeIdentifier(v86, v78, v79, v80, v81, v82);
            uint64_t v92 = objc_msgSend_objectForKey_(v615, v88, (uint64_t)v87, v89, v90, v91);

            *(double *)long long buf = 10000.0;
            id v641 = 0;
            objc_msgSend_getMergingEndOfLineCost_mergingEndOfLineStroke_forStroke_consistingOfSubstrokes_toLineGroup_((void *)v623, v93, (uint64_t)buf, (uint64_t)&v641, (uint64_t)v86, (uint64_t)v92, v670[5]);
            id v94 = v641;
            if (*(double *)buf < v682[3] && v94 == (id)v676[5])
            {

              v682[3] = 10000.0;
              uint64_t v95 = (void *)v676[5];
              v676[5] = 0;

              id v75 = (id)v670[5];
              v670[5] = 0;
              goto LABEL_41;
            }
          }
          uint64_t v83 = objc_msgSend_countByEnumeratingWithState_objects_count_(v75, v78, (uint64_t)&v642, (uint64_t)v702, 16, v82);
          if (v83) {
            continue;
          }
          break;
        }
      }
LABEL_41:
    }
    double v96 = v682[3];
    if (v96 >= *(double *)(v623 + 80))
    {
      long long v639 = 0u;
      long long v640 = 0u;
      long long v637 = 0u;
      long long v638 = 0u;
      id v103 = v627;
      uint64_t v106 = objc_msgSend_countByEnumeratingWithState_objects_count_(v103, v104, (uint64_t)&v637, (uint64_t)v701, 16, v105);
      if (v106)
      {
        double v612 = 0;
        double v614 = 0;
        uint64_t v619 = *(void *)v638;
        double v98 = 10000.0;
        while (2)
        {
          for (uint64_t n = 0; n != v106; ++n)
          {
            if (*(void *)v638 != v619) {
              objc_enumerationMutation(v103);
            }
            uint64_t v111 = *(void **)(*((void *)&v637 + 1) + 8 * n);
            if (v613[2]())
            {
              char v97 = 1;
              goto LABEL_73;
            }
            *(double *)long long buf = 10000.0;
            sub_1C4BC1E98((double *)v623, (double *)buf, v111, x, y, width, height);
            double v110 = *(double *)buf;
            if (*(double *)buf <= *(double *)(v623 + 72))
            {
              *(void *)&long long v705 = 0x40C3880000000000;
              id v636 = 0;
              objc_msgSend_getMergingMiddleOfLineCost_mergingMiddleOfLineStroke_forStroke_consistingOfSubstrokes_toLineGroup_((void *)v623, v108, (uint64_t)&v705, (uint64_t)&v636, (uint64_t)v616, (uint64_t)obja, v111, *(double *)buf);
              id v112 = v636;
              uint64_t v115 = objc_msgSend_compareDistanceInWritingSequenceOfStroke_andStroke_toReferenceStroke_((void *)v623, v113, (uint64_t)v112, (uint64_t)v614, (uint64_t)v616, v114);
              double v116 = *(double *)&v705;
              double v117 = *(double *)&v705 - v98;
              double v118 = *(double *)(v623 + 88);
              if (*(double *)&v705 - v98 < -v118
                || !v115 && v117 < 0.0
                || (fabs(v117) < v118 ? (BOOL v119 = v115 == -1) : (BOOL v119 = 0), v119))
              {
                id v120 = v112;

                id v121 = v111;
                *((unsigned char *)v666 + 24) = 0;
                double v612 = v121;
                double v614 = v120;
              }
              else
              {
                double v116 = v98;
              }

              double v98 = v116;
            }
          }
          uint64_t v106 = objc_msgSend_countByEnumeratingWithState_objects_count_(v103, v108, (uint64_t)&v637, (uint64_t)v701, 16, v109, v110);
          if (v106) {
            continue;
          }
          break;
        }
        char v97 = 0;
      }
      else
      {
        char v97 = 0;
        double v612 = 0;
        double v614 = 0;
        double v98 = 10000.0;
      }
LABEL_73:

      double v96 = v682[3];
      uint64_t v99 = (double *)v623;
      double v100 = *(double *)(v623 + 72);
      if (v96 >= v100 || v98 >= v100) {
        goto LABEL_47;
      }
    }
    else
    {
      char v97 = 0;
      double v612 = 0;
      double v614 = 0;
      double v98 = 10000.0;
      uint64_t v99 = (double *)v623;
      double v100 = *(double *)(v623 + 72);
      if (v96 >= v100 || v100 <= 10000.0)
      {
LABEL_47:
        if (v96 < v100)
        {
LABEL_48:
          uint64_t v102 = (void *)v670[5];
          double v98 = v96;
          goto LABEL_82;
        }
        uint64_t v102 = v612;
        if (v98 >= v100)
        {
          id v605 = 0;
          goto LABEL_108;
        }
LABEL_82:
        id v605 = v102;
        if (v605) {
          char v126 = v97;
        }
        else {
          char v126 = 1;
        }
        if ((v126 & 1) == 0 && v98 < *(double *)(v623 + 72))
        {
          int v127 = *((unsigned __int8 *)v666 + 24);
          uint64_t v128 = (void *)v676[5];
          id v129 = v616;
          objCGFloat a = obja;
          id v605 = v605;
          id v617 = v128;
          id v620 = v615;
          uint64_t v130 = (void *)MEMORY[0x1E4F1CAD0];
          uint64_t v608 = v129;
          uint64_t v136 = objc_msgSend_encodedStrokeIdentifier(v129, v131, v132, v133, v134, v135);
          uint64_t v606 = objc_msgSend_setWithObject_(v130, v137, (uint64_t)v136, v138, v139, v140);

          objc_msgSend_bounds(v605, v141, v142, v143, v144, v145);
          CGFloat v147 = v146;
          CGFloat v149 = v148;
          CGFloat v151 = v150;
          CGFloat v153 = v152;
          objc_msgSend_bounds(v129, v154, v155, v156, v157, v158);
          v719.origin.CGFloat x = v159;
          v719.origin.CGFloat y = v160;
          v719.size.CGFloat width = v161;
          v719.size.CGFloat height = v162;
          v713.origin.CGFloat x = v147;
          v713.origin.CGFloat y = v149;
          v713.size.CGFloat width = v151;
          v713.size.CGFloat height = v153;
          CGRect v714 = CGRectUnion(v713, v719);
          double v591 = v714.origin.y;
          double v593 = v714.origin.x;
          double v588 = v714.size.height;
          double v589 = v714.size.width;
          *(void *)&long long v697 = 0;
          id v696 = 0;
          objc_msgSend_firstStrokeIdentifier_lastStrokeIdentifier_inGroup_addingStrokeIdentifiers_removingStrokeIdentifiers_((void *)v623, v163, (uint64_t)&v697, (uint64_t)&v696, (uint64_t)v605, (uint64_t)v606, 0);
          id v595 = (id)v697;
          id v599 = v696;
          long long v169 = objc_msgSend_writingDirectionSortedSubstrokes(v605, v164, v165, v166, v167, v168);
          long long v175 = objc_msgSend_mutableCopy(v169, v170, v171, v172, v173, v174);

          if (!v127)
          {
            uint64_t v181 = objc_msgSend_strokeIdentifiers(v605, v176, v177, v178, v179, v180);
            uint64_t v187 = objc_msgSend_allObjects(v181, v182, v183, v184, v185, v186);
            *(void *)&long long v690 = MEMORY[0x1E4F143A8];
            *((void *)&v690 + 1) = 3221225472;
            *(void *)&long long v691 = sub_1C4BC20B8;
            *((void *)&v691 + 1) = &unk_1E64E1868;
            *(void *)&long long v692 = v623;
            uint64_t v192 = objc_msgSend_sortedArrayUsingComparator_(v187, v188, (uint64_t)&v690, v189, v190, v191);

            objc_msgSend_removeAllObjects(v175, v193, v194, v195, v196, v197);
            long long v708 = 0u;
            long long v707 = 0u;
            long long v706 = 0u;
            long long v705 = 0u;
            id v198 = v192;
            uint64_t v205 = objc_msgSend_countByEnumeratingWithState_objects_count_(v198, v199, (uint64_t)&v705, (uint64_t)buf, 16, v200);
            if (v205)
            {
              uint64_t v206 = *(void *)v706;
              do
              {
                for (iuint64_t i = 0; ii != v205; ++ii)
                {
                  if (*(void *)v706 != v206) {
                    objc_enumerationMutation(v198);
                  }
                  id v208 = objc_msgSend_objectForKeyedSubscript_(v620, v201, *(void *)(*((void *)&v705 + 1) + 8 * ii), v202, v203, v204);
                  objc_msgSend_addObjectsFromArray_(v175, v209, (uint64_t)v208, v210, v211, v212);
                }
                uint64_t v205 = objc_msgSend_countByEnumeratingWithState_objects_count_(v198, v201, (uint64_t)&v705, (uint64_t)buf, 16, v204);
              }
              while (v205);
            }
          }
          objc_msgSend_addObjectsFromArray_(v175, v176, (uint64_t)obja, v178, v179, v180);
          *(_OWORD *)long long __p = *(_OWORD *)(v623 + 16);
          long long v698 = *(_OWORD *)(v623 + 32);
          id v685 = v175;
          objc_msgSend_estimateWritingDirectionAndSortSubstrokesAccordingly_averageWritingOrientation_averageStrokeDeviation_((void *)v623, v213, (uint64_t)&v685, (uint64_t)__p, (uint64_t)&v698, v214);
          id v215 = v685;

          v686[1] = 0;
          v686[0] = 0;
          *(void *)&long long v687 = 0;
          id v221 = objc_msgSend_strokeIdentifiers(v605, v216, v217, v218, v219, v220);
          unint64_t v227 = objc_msgSend_count(v221, v222, v223, v224, v225, v226) + 1;
          long long v228 = v686[0];
          if (v227 > (uint64_t)(v687 - (unint64_t)v686[0]) >> 4)
          {
            if (v227 >> 60) {
              sub_1C494A220();
            }
            uint64_t v229 = v686[1];
            uint64_t v230 = (char *)operator new(16 * v227);
            uint64_t v231 = &v230[(v229 - v228) & 0xFFFFFFFFFFFFFFF0];
            uint64_t v232 = v231;
            if (v229 != v228)
            {
              uint64_t v233 = &v230[(v229 - v228) & 0xFFFFFFFFFFFFFFF0];
              do
              {
                uint64_t v232 = v233 - 16;
                *((_OWORD *)v233 - 1) = *((_OWORD *)v229 - 1);
                v229 -= 16;
                v233 -= 16;
              }
              while (v229 != v228);
            }
            v686[0] = v232;
            v686[1] = v231;
            *(void *)&long long v687 = &v230[16 * v227];
            if (v228) {
              operator delete(v228);
            }
          }

          sub_1C4BC21E4(v623, v215, (uint64_t *)v686);
          id v603 = (id)objc_claimAutoreleasedReturnValue();
          __int16 v234 = sub_1C4BC27C4(v623, v215, *(double *)&v698, *((double *)&v698 + 1));
          double v240 = sub_1C4BC3104((void *)v623, v215, v603, *(long double *)__p, *(long double *)&__p[1]);
          if (v127)
          {
            uint64_t v241 = objc_msgSend_count(v215, v235, v236, v237, v238, v239);
            while (--v241 >= 0)
            {
              uint64_t v242 = objc_msgSend_objectAtIndexedSubscript_(v215, v235, v241, v237, v238, v239);
              uint64_t v248 = objc_msgSend_substroke(v242, v243, v244, v245, v246, v247);
              uint64_t v254 = objc_msgSend_strokeIdentifier(v248, v249, v250, v251, v252, v253);
              uint64_t v260 = objc_msgSend_encodedStrokeIdentifier(v617, v255, v256, v257, v258, v259);
              char isEqual = objc_msgSend_isEqual_(v254, v261, (uint64_t)v260, v262, v263, v264);

              if (isEqual) {
                goto LABEL_160;
              }
            }
          }
          uint64_t v241 = -1;
LABEL_160:
          objc_msgSend_bounds(v608, v235, v236, v237, v238, v239);
          double v490 = v489;
          objc_msgSend_bounds(v608, v491, v492, v493, v494, v495);
          double v497 = v496;
          objc_msgSend_bounds(v608, v498, v499, v500, v501, v502);
          double v504 = v503;
          objc_msgSend_bounds(v608, v505, v506, v507, v508, v509);
          double v511 = v510;
          objc_msgSend_firstStrokeOrigin(v605, v512, v513, v514, v515, v516);
          double v518 = v517;
          objc_msgSend_firstStrokeOrigin(v605, v519, v520, v521, v522, v523);
          double v525 = v524;
          objc_msgSend_firstStrokeOrigin(v605, v526, v527, v528, v529, v530);
          double v532 = v531;
          objc_msgSend_firstStrokeOrigin(v605, v533, v534, v535, v536, v537);
          if (v532 * v543 + v518 * v525 >= v504 * v511 + v490 * v497) {
            objc_msgSend_bounds(v608, v538, v539, v540, v541, v542);
          }
          else {
            objc_msgSend_firstStrokeOrigin(v605, v538, v539, v540, v541, v542);
          }
          objc_msgSend_groupByAddingStrokeIdentifiers_removingStrokeIdentifiers_firstStrokeIdentifier_lastStrokeIdentifier_bounds_writingDirectionSortedSubstrokes_averageWritingOrientation_averageStrokeDeviation_writingDirectionSortedStrokeIdentifiers_localStrokeWritingOrientations_coalescedLastSubstrokes_groupingConfidence_lastSubstrokeIndexBeforeMerge_firstStrokeOrigin_(v605, v544, (uint64_t)v606, 0, (uint64_t)v595, (uint64_t)v599, v215, v603, v593, v591, v589, v588, *(double *)__p, *(double *)&__p[1], v698, v686, v234, *(void *)&v240, v241,
            v545,
            v546);
          StrokeIdentifier_lastStrokeIdentifier_bounds_classification_strategyIdentifier_writingDirectionSortedSubstrokes_averageWritingOrientation_averageStrokeDeviation_writingDirectionSortedStrokeIdentifiers_localStrokeWritingOrientations_coalescedLastSubstrokes_groupingConfidence_firstStrokeOrigiuint64_t n = (id)objc_claimAutoreleasedReturnValue();

          if (v686[0])
          {
            v686[1] = v686[0];
            operator delete(v686[0]);
          }

          if ((objc_msgSend_containsObject_(v622, v548, (uint64_t)v605, v549, v550, v551) & 1) == 0) {
            objc_msgSend_addObject_(v597, v552, (uint64_t)v605, v553, v554, v555);
          }
          objc_msgSend_removeObject_(v622, v552, (uint64_t)v605, v553, v554, v555);
          objc_msgSend_removeObject_(v627, v556, (uint64_t)v605, v557, v558, v559);
          if (a9)
          {
            objc_msgSend_tryRegroupingStrokesInGroup_substrokePlacementsByStrokeIdentifier_cancellationBlock_((void *)v623, v560, (uint64_t)StrokeIdentifier_lastStrokeIdentifier_bounds_classification_strategyIdentifier_writingDirectionSortedSubstrokes_averageWritingOrientation_averageStrokeDeviation_writingDirectionSortedStrokeIdentifiers_localStrokeWritingOrientations_coalescedLastSubstrokes_groupingConfidence_firstStrokeOrigin, (uint64_t)v620, (uint64_t)v613, v563);
            long long v634 = 0u;
            long long v635 = 0u;
            long long v632 = 0u;
            long long v633 = 0u;
            id v564 = (id)objc_claimAutoreleasedReturnValue();
            uint64_t v571 = objc_msgSend_countByEnumeratingWithState_objects_count_(v564, v565, (uint64_t)&v632, (uint64_t)v700, 16, v566);
            if (v571)
            {
              uint64_t v572 = *(void *)v633;
              do
              {
                for (juint64_t j = 0; jj != v571; ++jj)
                {
                  if (*(void *)v633 != v572) {
                    objc_enumerationMutation(v564);
                  }
                  uint64_t v574 = *(void *)(*((void *)&v632 + 1) + 8 * jj);
                  objc_msgSend_addObject_(v622, v567, v574, v568, v569, v570);
                  objc_msgSend_addObject_(v627, v575, v574, v576, v577, v578);
                }
                uint64_t v571 = objc_msgSend_countByEnumeratingWithState_objects_count_(v564, v567, (uint64_t)&v632, (uint64_t)v700, 16, v570);
              }
              while (v571);
            }
          }
          else
          {
            objc_msgSend_addObject_(v622, v560, (uint64_t)StrokeIdentifier_lastStrokeIdentifier_bounds_classification_strategyIdentifier_writingDirectionSortedSubstrokes_averageWritingOrientation_averageStrokeDeviation_writingDirectionSortedStrokeIdentifiers_localStrokeWritingOrientations_coalescedLastSubstrokes_groupingConfidence_firstStrokeOrigin, v561, v562, v563);
            objc_msgSend_addObject_(v627, v579, (uint64_t)StrokeIdentifier_lastStrokeIdentifier_bounds_classification_strategyIdentifier_writingDirectionSortedSubstrokes_averageWritingOrientation_averageStrokeDeviation_writingDirectionSortedStrokeIdentifiers_localStrokeWritingOrientations_coalescedLastSubstrokes_groupingConfidence_firstStrokeOrigin, v580, v581, v582);
          }
          goto LABEL_183;
        }
LABEL_108:
        uint64_t v266 = v616;
        if (v97)
        {
          StrokeIdentifier_lastStrokeIdentifier_bounds_classification_strategyIdentifier_writingDirectionSortedSubstrokes_averageWritingOrientation_averageStrokeDeviation_writingDirectionSortedStrokeIdentifiers_localStrokeWritingOrientations_coalescedLastSubstrokes_groupingConfidence_firstStrokeOrigiuint64_t n = 0;
LABEL_186:

          _Block_object_dispose(&v665, 8);
          _Block_object_dispose(&v669, 8);

          _Block_object_dispose(&v675, 8);
          _Block_object_dispose(&v681, 8);
          goto LABEL_187;
        }
        if (!obja || !objc_msgSend_count(obja, v70, v71, v72, v73, v74))
        {
          if (qword_1EA3CA000 != -1) {
            dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
          }
          unsigned int v273 = (id)qword_1EA3C9F90[0];
          if (os_log_type_enabled(v273, OS_LOG_TYPE_FAULT))
          {
            uint64_t v279 = objc_msgSend_strokeProvider((void *)v623, v274, v275, v276, v277, v278);
            uint64_t v285 = objc_msgSend_strokeIdentifier(v616, v280, v281, v282, v283, v284);
            int isValidStrokeIdentifier = objc_msgSend_isValidStrokeIdentifier_(v279, v286, (uint64_t)v285, v287, v288, v289);
            *(_DWORD *)long long buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = isValidStrokeIdentifier;
            _os_log_impl(&dword_1C492D000, v273, OS_LOG_TYPE_FAULT, "Unexpected nil / empty substrokes in CHBottomUpStrokeGroupingStrategy. Stroke indentifier valid ? %i", buf, 8u);
          }
          uint64_t v266 = v616;
          if (!obja) {
            goto LABEL_119;
          }
        }
        if (objc_msgSend_count(obja, v268, v269, v270, v271, v272))
        {
          uint64_t v291 = obja;
        }
        else
        {
LABEL_119:
          uint64_t v291 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v268, v269, v270, v271, v272);
          long long v630 = 0u;
          long long v631 = 0u;
          long long v628 = 0u;
          long long v629 = 0u;
          uint64_t v292 = objc_opt_class();
          long long v297 = objc_msgSend_substrokesForStroke_(v292, v293, (uint64_t)v266, v294, v295, v296);
          uint64_t v300 = objc_msgSend_countByEnumeratingWithState_objects_count_(v297, v298, (uint64_t)&v628, (uint64_t)v699, 16, v299);
          if (v300)
          {
            uint64_t v301 = *(void *)v629;
            do
            {
              for (kuint64_t k = 0; kk != v300; ++kk)
              {
                if (*(void *)v629 != v301) {
                  objc_enumerationMutation(v297);
                }
                uint64_t v303 = *(void *)(*((void *)&v628 + 1) + 8 * kk);
                uint64_t v304 = [CHSubstrokePlacement alloc];
                uint64_t v309 = objc_msgSend_initWithSubstroke_(v304, v305, v303, v306, v307, v308);
                objc_msgSend_setWritingOrientation_(v309, v310, v311, v312, v313, v314, *(double *)(v623 + 16), *(double *)(v623 + 24));
                objc_msgSend_addObject_(v291, v315, (uint64_t)v309, v316, v317, v318);
              }
              uint64_t v300 = objc_msgSend_countByEnumeratingWithState_objects_count_(v297, v319, (uint64_t)&v628, (uint64_t)v699, 16, v320);
            }
            while (v300);
          }

          uint64_t v266 = v616;
        }
        id v321 = v266;
        id v322 = v291;
        id v590 = v598;
        uint64_t v621 = v321;
        objCGFloat a = v322;
        double v611 = objc_msgSend_encodedStrokeIdentifier(v321, v323, v324, v325, v326, v327);
        long long v698 = *(_OWORD *)(v623 + 16);
        long long v697 = *(_OWORD *)(v623 + 32);
        int v333 = objc_msgSend_mutableCopy(v322, v328, v329, v330, v331, v332);
        id v696 = v333;
        objc_msgSend_estimateWritingDirectionAndSortSubstrokesAccordingly_averageWritingOrientation_averageStrokeDeviation_((void *)v623, v334, (uint64_t)&v696, (uint64_t)&v698, (uint64_t)&v697, v335);
        id v594 = v696;

        __p[0] = operator new(0x10uLL);
        __p[1] = __p[0];
        unint64_t v695 = (char *)__p[0] + 16;
        double v596 = sub_1C4BC21E4(v623, v594, (uint64_t *)__p);
        uint64_t v592 = sub_1C4BC27C4(v623, v594, *(double *)&v697, *((double *)&v697 + 1));
        double v336 = sub_1C4BC3104((void *)v623, v594, v596, *(long double *)&v698, *((long double *)&v698 + 1));
        v618 = objc_msgSend_strokeProvider((void *)v623, v337, v338, v339, v340, v341);
        long long v693 = 0u;
        long long v692 = 0u;
        long long v691 = 0u;
        long long v690 = 0u;
        id v604 = v590;
        uint64_t v349 = objc_msgSend_countByEnumeratingWithState_objects_count_(v604, v342, (uint64_t)&v690, (uint64_t)buf, 16, v343);
        if (v349)
        {
          uint64_t v609 = *(void *)v691;
          while (2)
          {
            uint64_t v350 = 0;
            uint64_t v607 = v349;
            do
            {
              if (*(void *)v691 != v609) {
                objc_enumerationMutation(v604);
              }
              uint64_t v352 = *(void **)(*((void *)&v690 + 1) + 8 * v350);
              CGRect v353 = objc_msgSend_strokeIdentifiers(v352, v344, v345, v346, v347, v348);
              char v358 = objc_msgSend_containsObject_(v353, v354, (uint64_t)v611, v355, v356, v357);

              if (v358)
              {
LABEL_153:
                id v440 = v352;

                if (!v440) {
                  goto LABEL_155;
                }
                goto LABEL_154;
              }
              objc_msgSend_bounds(v352, v359, v360, v361, v362, v363);
              CGFloat v365 = v364;
              CGFloat v367 = v366;
              CGFloat v369 = v368;
              CGFloat v371 = v370;
              objc_msgSend_bounds(v621, v372, v373, v374, v375, v376);
              v720.origin.CGFloat x = v377;
              v720.origin.CGFloat y = v378;
              v720.size.CGFloat width = v379;
              v720.size.CGFloat height = v380;
              v715.origin.CGFloat x = v365;
              v715.origin.CGFloat y = v367;
              v715.size.CGFloat width = v369;
              v715.size.CGFloat height = v371;
              if (CGRectIntersectsRect(v715, v720) && (objc_opt_respondsToSelector() & 1) != 0)
              {
                long long v689 = 0u;
                long long v687 = 0u;
                long long v688 = 0u;
                *(_OWORD *)uint64_t v686 = 0u;
                uint64_t v386 = objc_msgSend_strokeIdentifiers(v352, v381, v382, v383, v384, v385);
                uint64_t v393 = objc_msgSend_countByEnumeratingWithState_objects_count_(v386, v387, (uint64_t)v686, (uint64_t)&v705, 16, v388);
                if (v393)
                {
                  uint64_t v394 = *(void *)v687;
LABEL_139:
                  uint64_t v395 = 0;
                  while (1)
                  {
                    if (*(void *)v687 != v394) {
                      objc_enumerationMutation(v386);
                    }
                    uint64_t v396 = objc_msgSend_strokeIdentifierFromData_(v618, v389, *((void *)v686[1] + v395), v390, v391, v392);
                    if (objc_msgSend_isStroke_versionOfStrokeWithIdentifier_(v618, v397, (uint64_t)v621, (uint64_t)v396, v398, v399))break; {

                    }
                    if (v393 == ++v395)
                    {
                      uint64_t v393 = objc_msgSend_countByEnumeratingWithState_objects_count_(v386, v389, (uint64_t)v686, (uint64_t)&v705, 16, v392);
                      if (v393) {
                        goto LABEL_139;
                      }
                      goto LABEL_130;
                    }
                  }
                  id v439 = v352;

                  if (!v439) {
                    goto LABEL_131;
                  }

LABEL_154:
                  uint64_t v441 = objc_msgSend_ancestorIdentifier(v352, v583, v584, v585, v586, v587);
                  objc_msgSend_removeObject_(v604, v442, (uint64_t)v352, v443, v444, v445);
                  goto LABEL_156;
                }
LABEL_130:
              }
              else
              {
                char v400 = objc_msgSend_strokeIdentifiers(v352, v381, v382, v383, v384, v385);
                BOOL v406 = objc_msgSend_count(v400, v401, v402, v403, v404, v405) == 1;

                if (v406)
                {
                  objc_msgSend_bounds(v352, v344, v345, v346, v347, v348);
                  CGFloat v408 = v407;
                  CGFloat v410 = v409;
                  CGFloat v412 = v411;
                  CGFloat v414 = v413;
                  objc_msgSend_bounds(v621, v415, v416, v417, v418, v419);
                  v721.origin.CGFloat x = v420;
                  v721.origin.CGFloat y = v421;
                  v721.size.CGFloat width = v422;
                  v721.size.CGFloat height = v423;
                  v716.origin.CGFloat x = v408;
                  v716.origin.CGFloat y = v410;
                  v716.size.CGFloat width = v412;
                  v716.size.CGFloat height = v414;
                  CGRect v717 = CGRectIntersection(v716, v721);
                  double v424 = v717.size.width;
                  double v425 = v717.size.height;
                  objc_msgSend_bounds(v352, v426, v427, v428, v429, v430, v717.origin.x, v717.origin.y);
                  double v432 = v431;
                  objc_msgSend_bounds(v352, v433, v434, v435, v436, v437);
                  double v351 = v424 * v425;
                  if (v424 * v425 >= v432 * v438 * 0.5) {
                    goto LABEL_153;
                  }
                }
              }
LABEL_131:
              ++v350;
            }
            while (v350 != v607);
            uint64_t v349 = objc_msgSend_countByEnumeratingWithState_objects_count_(v604, v344, (uint64_t)&v690, (uint64_t)buf, 16, v348, v351);
            if (v349) {
              continue;
            }
            break;
          }
        }

LABEL_155:
        uint64_t v352 = 0;
        uint64_t v441 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_156:
        uint64_t v446 = [CHTextLineStrokeGroup alloc];
        uint64_t v451 = objc_msgSend_setWithObject_(MEMORY[0x1E4F1CAD0], v447, (uint64_t)v611, v448, v449, v450);
        objc_msgSend_bounds(v621, v452, v453, v454, v455, v456);
        double v610 = v457;
        double v459 = v458;
        double v461 = v460;
        double v463 = v462;
        uint64_t v464 = *(void *)(v623 + 48);
        CGFloat v470 = objc_msgSend_strategyIdentifier((void *)v623, v465, v466, v467, v468, v469);
        long long v471 = v698;
        long long v472 = v697;
        objc_msgSend_bounds(v621, v473, v474, v475, v476, v477);
        StrokeIdentifier_lastStrokeIdentifier_bounds_classification_strategyIdentifier_writingDirectionSortedSubstrokes_averageWritingOrientation_averageStrokeDeviation_writingDirectionSortedStrokeIdentifiers_localStrokeWritingOrientations_coalescedLastSubstrokes_groupingConfidence_firstStrokeOrigiuint64_t n = (id)objc_msgSend_initWithAncestorIdentifier_strokeIdentifiers_firstStrokeIdentifier_lastStrokeIdentifier_bounds_classification_strategyIdentifier_writingDirectionSortedSubstrokes_averageWritingOrientation_averageStrokeDeviation_writingDirectionSortedStrokeIdentifiers_localStrokeWritingOrientations_coalescedLastSubstrokes_groupingConfidence_firstStrokeOrigin_(v446, v478, v441, (uint64_t)v451, (uint64_t)v611, (uint64_t)v611, v464, v470, v610, v459, v461, v463, v471, v472, v594, v596, __p, v592, *(void *)&v336, v479, v480);

        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }

        objc_msgSend_addObject_(v622, v481, (uint64_t)StrokeIdentifier_lastStrokeIdentifier_bounds_classification_strategyIdentifier_writingDirectionSortedSubstrokes_averageWritingOrientation_averageStrokeDeviation_writingDirectionSortedStrokeIdentifiers_localStrokeWritingOrientations_coalescedLastSubstrokes_groupingConfidence_firstStrokeOrigin, v482, v483, v484);
        objc_msgSend_addObject_(v627, v485, (uint64_t)StrokeIdentifier_lastStrokeIdentifier_bounds_classification_strategyIdentifier_writingDirectionSortedSubstrokes_averageWritingOrientation_averageStrokeDeviation_writingDirectionSortedStrokeIdentifiers_localStrokeWritingOrientations_coalescedLastSubstrokes_groupingConfidence_firstStrokeOrigin, v486, v487, v488);
LABEL_183:
        if (a11
          && StrokeIdentifier_lastStrokeIdentifier_bounds_classification_strategyIdentifier_writingDirectionSortedSubstrokes_averageWritingOrientation_averageStrokeDeviation_writingDirectionSortedStrokeIdentifiers_localStrokeWritingOrientations_coalescedLastSubstrokes_groupingConfidence_firstStrokeOrigin)
        {
          StrokeIdentifier_lastStrokeIdentifier_bounds_classification_strategyIdentifier_writingDirectionSortedSubstrokes_averageWritingOrientation_averageStrokeDeviation_writingDirectionSortedStrokeIdentifiers_localStrokeWritingOrientations_coalescedLastSubstrokes_groupingConfidence_firstStrokeOrigiuint64_t n = StrokeIdentifier_lastStrokeIdentifier_bounds_classification_strategyIdentifier_writingDirectionSortedSubstrokes_averageWritingOrientation_averageStrokeDeviation_writingDirectionSortedStrokeIdentifiers_localStrokeWritingOrientations_coalescedLastSubstrokes_groupingConfidence_firstStrokeOrigin;
          *a11 = StrokeIdentifier_lastStrokeIdentifier_bounds_classification_strategyIdentifier_writingDirectionSortedSubstrokes_averageWritingOrientation_averageStrokeDeviation_writingDirectionSortedStrokeIdentifiers_localStrokeWritingOrientations_coalescedLastSubstrokes_groupingConfidence_firstStrokeOrigin;
        }
        goto LABEL_186;
      }
    }
    uint64_t v123 = objc_msgSend_compareDistanceInWritingSequenceOfStroke_andStroke_toReferenceStroke_(v99, v70, (uint64_t)v614, v676[5], (uint64_t)v616, v74);
    double v96 = v682[3];
    double v124 = v98 - v96;
    double v125 = v99[11];
    if (v98 - v96 >= -v125 && (v123 || v124 >= 0.0))
    {
      BOOL v547 = fabs(v124) < v125 && v123 == -1;
      uint64_t v102 = v612;
      if (!v547) {
        goto LABEL_48;
      }
    }
    else
    {
      uint64_t v102 = v612;
    }
    goto LABEL_82;
  }
LABEL_187:
}

void sub_1C4BC0394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,uint64_t a27,void *a28,void *a29,void *a30,uint64_t a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,_Unwind_Exception *exception_objecta,void *a40,void *a41)
{
  _Block_object_dispose(&STACK[0x338], 8);
  _Block_object_dispose(&STACK[0x358], 8);

  _Block_object_dispose(&STACK[0x388], 8);
  _Block_object_dispose(&STACK[0x3B8], 8);

  _Unwind_Resume(a1);
}

void sub_1C4BC08D4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, int a6, uint64_t **a7, void *a8)
{
  uint64_t v595 = *MEMORY[0x1E4F143B8];
  id v557 = a2;
  id v558 = a3;
  id v554 = a4;
  id v555 = a5;
  id v553 = a8;
  uint64_t v575 = a1;
  if (a1)
  {
    uint64_t v18 = objc_msgSend_allObjects(v557, v13, v14, v15, v16, v17);
    uint64_t v23 = objc_msgSend_sortedArrayUsingComparator_(v18, v19, (uint64_t)&unk_1F2013030, v20, v21, v22);
    uint64_t v586 = objc_msgSend_mutableCopy(v23, v24, v25, v26, v27, v28);

    if (v553)
    {
      id v580 = v553;
    }
    else
    {
      objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v29, v30, v31, v32, v33);
      id v580 = (id)objc_claimAutoreleasedReturnValue();
    }
    unint64_t v39 = 0;
    uint64_t v581 = a7 + 1;
    uint64_t v40 = 20;
    if (a6) {
      uint64_t v40 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v556 = v40;
    while (1)
    {
      if (v39 >= objc_msgSend_count(v586, v34, v35, v36, v37, v38))
      {

        break;
      }
      uint64_t v45 = objc_msgSend_objectAtIndexedSubscript_(v586, v41, v39, v42, v43, v44);
      uint64_t v46 = objc_opt_class();
      char isMemberOfClass = objc_msgSend_isMemberOfClass_(v45, v47, v46, v48, v49, v50);

      if ((isMemberOfClass & 1) == 0) {
        goto LABEL_8;
      }
      CGFloat v52 = objc_msgSend_objectAtIndexedSubscript_(v586, v34, v39, v36, v37, v38);
      CGFloat v53 = NSNumber;
      uint64_t v583 = v52;
      uint64_t v59 = objc_msgSend_uniqueIdentifier(v52, v54, v55, v56, v57, v58);
      uint64_t v64 = objc_msgSend_numberWithInteger_(v53, v60, v59, v61, v62, v63);
      uint64_t v69 = objc_msgSend_objectForKey_(v580, v65, (uint64_t)v64, v66, v67, v68);

      if (!v69)
      {
        if (*(unsigned char *)(v575 + 176)) {
          int v74 = a6 ^ 1;
        }
        else {
          int v74 = 0;
        }
        uint64_t v75 = sub_1C4BCADF4((void *)v575, v583, v74);
        uint64_t v76 = NSNumber;
        uint64_t v82 = objc_msgSend_uniqueIdentifier(v583, v77, v78, v79, v80, v81);
        uint64_t v87 = objc_msgSend_numberWithInteger_(v76, v83, v82, v84, v85, v86);
        objc_msgSend_setObject_forKey_(v580, v88, v75, (uint64_t)v87, v89, v90);

        uint64_t v69 = (void *)v75;
      }
      uint64_t v576 = v69;
      uint64_t v91 = objc_msgSend_objectAtIndexedSubscript_(v69, v70, 0, v71, v72, v73);
      objc_msgSend_floatValue(v91, v92, v93, v94, v95, v96);
      float v98 = v97;

      id v103 = objc_msgSend_objectAtIndexedSubscript_(v69, v99, 1, v100, v101, v102);
      objc_msgSend_floatValue(v103, v104, v105, v106, v107, v108);
      float v574 = v109;

      objc_msgSend_bounds(v583, v110, v111, v112, v113, v114);
      CGFloat MinX = CGRectGetMinX(v596);
      objc_msgSend_bounds(v583, v115, v116, v117, v118, v119);
      double MaxY = CGRectGetMaxY(v597);
      double v125 = v574;
      double v564 = fabs(v98);
      if (v574 > 1.4) {
        int v126 = a6 ^ 1;
      }
      else {
        int v126 = 0;
      }
      int v579 = v126;
      double v578 = v98;
      double v566 = v98;
      uint64_t v572 = v39;
      while (++v39 < objc_msgSend_count(v586, v120, v121, v122, v123, v124, v125))
      {
        uint64_t v131 = objc_msgSend_objectAtIndexedSubscript_(v586, v127, v39, v128, v129, v130);
        uint64_t v132 = objc_opt_class();
        char v137 = objc_msgSend_isMemberOfClass_(v131, v133, v132, v134, v135, v136);

        if (v137)
        {
          uint64_t v138 = objc_msgSend_objectAtIndexedSubscript_(v586, v120, v39, v122, v123, v124);
          objc_msgSend_bounds(v583, v139, v140, v141, v142, v143);
          double MinY = CGRectGetMinY(v598);
          objc_msgSend_bounds(v138, v145, v146, v147, v148, v149);
          if (MinY >= CGRectGetMinY(v599))
          {
            objc_msgSend_bounds(v138, v150, v151, v152, v153, v154);
            CGFloat v156 = v172;
            CGFloat v158 = v173;
            CGFloat v160 = v174;
            CGFloat v162 = v175;
            objc_msgSend_bounds(v583, v176, v177, v178, v179, v180);
          }
          else
          {
            objc_msgSend_bounds(v583, v150, v151, v152, v153, v154);
            CGFloat v156 = v155;
            CGFloat v158 = v157;
            CGFloat v160 = v159;
            CGFloat v162 = v161;
            objc_msgSend_bounds(v138, v163, v164, v165, v166, v167);
          }
          double v181 = CGRectGetMinY(*(CGRect *)&v168);
          v600.origin.CGFloat x = v156;
          v600.origin.CGFloat y = v158;
          v600.size.double width = v160;
          v600.size.double height = v162;
          uint64_t v584 = v138;
          if (v181 > CGRectGetMaxY(v600) + 200.0) {
            goto LABEL_22;
          }
          uint64_t v187 = objc_msgSend_uniqueIdentifier(v583, v182, v183, v184, v185, v186);
          uint64_t v193 = objc_msgSend_uniqueIdentifier(v138, v188, v189, v190, v191, v192);
          uint64_t v199 = v193;
          uint64_t v200 = (void *)*v581;
          if (*v581)
          {
            uint64_t v201 = a7 + 1;
            do
            {
              uint64_t v202 = v200[4];
              if (v202 < v187)
              {
                ++v200;
              }
              else if (v187 >= v202)
              {
                if (v200[5] < v193) {
                  ++v200;
                }
                else {
                  uint64_t v201 = v200;
                }
              }
              else
              {
                uint64_t v201 = v200;
              }
              uint64_t v200 = (void *)*v200;
            }
            while (v200);
            if (v201 != v581)
            {
              uint64_t v203 = v201[4];
              if (v187 >= v203 && (v203 < v187 || v193 >= v201[5])) {
                goto LABEL_22;
              }
            }
          }
          uint64_t v204 = NSNumber;
          uint64_t v205 = objc_msgSend_uniqueIdentifier(v584, v194, v195, v196, v197, v198);
          uint64_t v210 = objc_msgSend_numberWithInteger_(v204, v206, v205, v207, v208, v209);
          id v215 = objc_msgSend_objectForKey_(v580, v211, (uint64_t)v210, v212, v213, v214);

          if (!v215)
          {
            if (*(unsigned char *)(v575 + 176)) {
              int v220 = a6 ^ 1;
            }
            else {
              int v220 = 0;
            }
            id v215 = sub_1C4BCADF4((void *)v575, v584, v220);
            id v221 = NSNumber;
            uint64_t v227 = objc_msgSend_uniqueIdentifier(v584, v222, v223, v224, v225, v226);
            uint64_t v232 = objc_msgSend_numberWithInteger_(v221, v228, v227, v229, v230, v231);
            objc_msgSend_setObject_forKey_(v580, v233, (uint64_t)v215, (uint64_t)v232, v234, v235);
          }
          uint64_t v582 = v215;
          uint64_t v236 = objc_msgSend_objectAtIndexedSubscript_(v215, v216, 0, v217, v218, v219);
          objc_msgSend_floatValue(v236, v237, v238, v239, v240, v241);
          float v243 = v242;

          uint64_t v248 = objc_msgSend_objectAtIndexedSubscript_(v215, v244, 1, v245, v246, v247);
          objc_msgSend_floatValue(v248, v249, v250, v251, v252, v253);
          float v255 = v254;

          double v256 = v243;
          int v257 = v579;
          if (v255 <= 1.4) {
            int v257 = 0;
          }
          if (v257 == 1 && vabdd_f64(v578, v256) > 0.523598776)
          {
            uint64_t v258 = a7 + 1;
LABEL_53:
            while (1)
            {
              uint64_t v259 = *v258;
              uint64_t v260 = v258;
              if (!*v258) {
                break;
              }
              while (1)
              {
                uint64_t v258 = (uint64_t **)v259;
                uint64_t v261 = v259[4];
                if (v187 < v261) {
                  break;
                }
                if (v261 >= v187)
                {
                  uint64_t v262 = (uint64_t)v258[5];
                  if (v199 < v262) {
                    goto LABEL_53;
                  }
                  if (v262 >= v199) {
                    goto LABEL_21;
                  }
                }
                uint64_t v259 = v258[1];
                if (!v259)
                {
                  uint64_t v260 = v258 + 1;
                  goto LABEL_60;
                }
              }
            }
LABEL_60:
            uint64_t v263 = (uint64_t *)operator new(0x30uLL);
            v263[4] = v187;
            v263[5] = v199;
            uint64_t *v263 = 0;
            v263[1] = 0;
            v263[2] = (uint64_t)v258;
            void *v260 = v263;
            uint64_t v264 = (uint64_t *)**a7;
            if (v264)
            {
              *a7 = v264;
              uint64_t v263 = *v260;
            }
            sub_1C4949FD4(a7[1], v263);
            a7[2] = (uint64_t *)((char *)a7[2] + 1);
LABEL_21:

LABEL_22:
          }
          else
          {
            id v265 = v583;
            id v266 = v584;
            id v272 = v266;
            *(float *)&double v273 = v574;
            double v274 = MinX;
            if (v574 <= v255)
            {
              id v275 = v266;

              id v585 = v265;
              objc_msgSend_bounds(v275, v276, v277, v278, v279, v280);
              double v274 = CGRectGetMinX(v601);
              objc_msgSend_bounds(v275, v281, v282, v283, v284, v285);
              double v273 = CGRectGetMaxY(v602);
              double MaxY = v273;
              double v566 = v256;
              id v265 = v275;
            }
            else
            {
              id v585 = v266;
            }
            objc_msgSend_averageStrokeDeviation(v265, v267, v268, v269, v270, v271, v273);
            double v287 = v286;
            objc_msgSend_averageStrokeDeviation(v265, v288, v289, v290, v291, v292);
            double v294 = v293;
            objc_msgSend_averageStrokeDeviation(v265, v295, v296, v297, v298, v299);
            double v301 = v300;
            uint64_t v559 = v272;
            CGFloat MinX = v274;
            objc_msgSend_averageStrokeDeviation(v265, v302, v303, v304, v305, v306);
            double v308 = v307;
            uint64_t v309 = v265;
            sub_1C4BCB0CC((uint64_t *)v593, v274, MaxY, -v566, (uint64_t)CHBottomUpStrokeGroupingStrategy, v265);
            sub_1C4BCB0CC((uint64_t *)&__p, v274, MaxY, -v566, (uint64_t)CHBottomUpStrokeGroupingStrategy, v585);
            double v561 = v294;
            double v562 = v287;
            *(double *)&long long v312 = v564;
            uint64_t v313 = (double *)__p;
            if (v564 <= 2.35619449 == fabs(v256) > 2.35619449 && __p != v592)
            {
              uint64_t v314 = v592 - 32;
              if (v592 - 32 > __p)
              {
                uint64_t v315 = (char *)__p + 32;
                do
                {
                  long long v316 = *((_OWORD *)v315 - 2);
                  long long v312 = *((_OWORD *)v315 - 1);
                  long long v317 = *((_OWORD *)v314 + 1);
                  *((_OWORD *)v315 - 2) = *(_OWORD *)v314;
                  *((_OWORD *)v315 - 1) = v317;
                  *(_OWORD *)uint64_t v314 = v316;
                  *((_OWORD *)v314 + 1) = v312;
                  v314 -= 32;
                  BOOL v318 = v315 >= v314;
                  v315 += 32;
                }
                while (!v318);
              }
            }
            double v319 = *(double *)v593[0];
            double v320 = *v313;
            if (*(double *)v593[0] <= *v313)
            {
              objc_msgSend_unionStrokeBounds_usingStrokeCountLimit_reverseOrder_(CHStrokeUtilities, v310, (uint64_t)v593, v556, 1, v311, *(double *)&v312);
              CGFloat rect = v333;
              double r1 = v334;
              double v324 = v335;
              double v326 = v336;
              objc_msgSend_unionStrokeBounds_usingStrokeCountLimit_reverseOrder_(CHStrokeUtilities, v337, (uint64_t)&__p, 20, 0, v338);
            }
            else
            {
              objc_msgSend_unionStrokeBounds_usingStrokeCountLimit_reverseOrder_(CHStrokeUtilities, v310, (uint64_t)v593, v556, 0, v311, *(double *)&v312);
              CGFloat rect = v321;
              double r1 = v322;
              double v324 = v323;
              double v326 = v325;
              objc_msgSend_unionStrokeBounds_usingStrokeCountLimit_reverseOrder_(CHStrokeUtilities, v327, (uint64_t)&__p, 20, 1, v328);
            }
            double v570 = v332;
            double v571 = v331;
            CGFloat v339 = v329;
            CGFloat v340 = v330;
            v603.origin.CGFloat x = v324;
            v603.origin.CGFloat y = rect;
            v603.size.double width = v326;
            v603.size.double height = r1;
            v621.origin.CGFloat x = v339;
            v621.origin.CGFloat y = v340;
            v621.size.double height = v570;
            v621.size.double width = v571;
            CGRect v604 = CGRectIntersection(v603, v621);
            double width = v604.size.width;
            double height = v604.size.height;
            double v344 = sqrt(v301 * v308 + v562 * v561);
            if (!a6
              || ((objc_msgSend_horizontalOverlapOfIndividualStrokeBounds_otherStrokeBounds_(CHStrokeUtilities, v341, (uint64_t)v593, (uint64_t)&__p, v342, v343), v345 < v344)? (BOOL v346 = width <= v344): (BOOL v346 = 1), v346))
            {
              if (v319 <= v320)
              {
                v608.origin.CGFloat x = v339;
                v608.origin.CGFloat y = v340;
                v608.size.double height = v570;
                v608.size.double width = v571;
                double MidX = CGRectGetMidX(v608);
                v609.origin.CGFloat x = v324;
                v609.origin.CGFloat y = rect;
                v609.size.double width = v326;
                v609.size.double height = r1;
                if (MidX < CGRectGetMaxX(v609))
                {
                  v610.origin.CGFloat x = v339;
                  v610.origin.CGFloat y = v340;
                  v610.size.double height = v570;
                  v610.size.double width = v571;
                  CGFloat v365 = CGRectGetMidX(v610);
                  objc_msgSend_unionStrokeBounds_aroundXPosition_usingOneSideStrokeCountLimit_(CHStrokeUtilities, v366, (uint64_t)v593, 10, v367, v368, v365);
                  CGFloat rect = v369;
                  double r1 = v370;
                  double v355 = v371;
                  double v357 = v372;
                  objc_msgSend_unionStrokeBounds_usingStrokeCountLimit_reverseOrder_(CHStrokeUtilities, v373, (uint64_t)&__p, 0x7FFFFFFFFFFFFFFFLL, 0, v374);
                  goto LABEL_85;
                }
                char v377 = 0;
                double v380 = v344 * 5.5;
LABEL_92:
                v615.origin.CGFloat x = v339;
                v615.origin.CGFloat y = v340;
                v615.size.double height = v570;
                v615.size.double width = v571;
                double v386 = CGRectGetMinX(v615);
                v616.origin.CGFloat x = v324;
                v616.origin.CGFloat y = rect;
                v616.size.double width = v326;
                v616.size.double height = r1;
                double v387 = v386 - CGRectGetMaxX(v616);
                double v383 = 0.0;
                if (v387 >= 0.0)
                {
                  v617.origin.CGFloat x = v339;
                  v617.origin.CGFloat y = v340;
                  v617.size.double height = v570;
                  v617.size.double width = v571;
                  double v384 = CGRectGetMinX(v617);
                  v618.origin.CGFloat x = v324;
                  v618.origin.CGFloat y = rect;
                  v618.size.double width = v326;
                  v618.size.double height = r1;
                  double MaxX = CGRectGetMaxX(v618);
                  goto LABEL_94;
                }
                goto LABEL_95;
              }
              v605.origin.CGFloat x = v324;
              v605.origin.CGFloat y = rect;
              v605.size.double width = v326;
              v605.size.double height = r1;
              double v347 = CGRectGetMidX(v605);
              v606.origin.CGFloat x = v339;
              v606.origin.CGFloat y = v340;
              v606.size.double height = v570;
              v606.size.double width = v571;
              if (v347 < CGRectGetMaxX(v606))
              {
                v607.origin.CGFloat x = v324;
                v607.origin.CGFloat y = rect;
                v607.size.double width = v326;
                v607.size.double height = r1;
                CGFloat v348 = CGRectGetMidX(v607);
                objc_msgSend_unionStrokeBounds_aroundXPosition_usingOneSideStrokeCountLimit_(CHStrokeUtilities, v349, (uint64_t)&__p, 10, v350, v351, v348);
                CGFloat rect = v352;
                double r1 = v353;
                double v355 = v354;
                double v357 = v356;
                objc_msgSend_unionStrokeBounds_usingStrokeCountLimit_reverseOrder_(CHStrokeUtilities, v358, (uint64_t)v593, 0x7FFFFFFFFFFFFFFFLL, 0, v359);
LABEL_85:
                CGFloat v339 = v360;
                CGFloat v340 = v361;
                double v375 = v362;
                double v376 = v363;
                char v377 = 0;
                int v378 = 1;
                BOOL v379 = 1;
                goto LABEL_103;
              }
              char v377 = 0;
              double v380 = v344 * 5.5;
            }
            else
            {
              double v380 = v344 * 5.5;
              char v377 = 1;
              if (v319 <= v320) {
                goto LABEL_92;
              }
            }
            v611.origin.CGFloat x = v324;
            v611.origin.CGFloat y = rect;
            v611.size.double width = v326;
            v611.size.double height = r1;
            double v381 = CGRectGetMinX(v611);
            v612.origin.CGFloat x = v339;
            v612.origin.CGFloat y = v340;
            v612.size.double height = v570;
            v612.size.double width = v571;
            double v382 = v381 - CGRectGetMaxX(v612);
            double v383 = 0.0;
            if (v382 >= 0.0)
            {
              v613.origin.CGFloat x = v324;
              v613.origin.CGFloat y = rect;
              v613.size.double width = v326;
              v613.size.double height = r1;
              double v384 = CGRectGetMinX(v613);
              v614.origin.CGFloat x = v339;
              v614.origin.CGFloat y = v340;
              v614.size.double height = v570;
              v614.size.double width = v571;
              double MaxX = CGRectGetMaxX(v614);
LABEL_94:
              double v383 = v384 - MaxX;
            }
LABEL_95:
            int v378 = 0;
            BOOL v379 = v383 < v380;
            if (v319 > v320) {
              int v388 = 1;
            }
            else {
              int v388 = a6;
            }
            double v376 = v570;
            double v375 = v571;
            double v389 = v571 + v383;
            double v390 = v326 + v389;
            double v391 = 0.0;
            if (v388) {
              double v391 = v389;
            }
            double v355 = v324 - v391;
            if (!a6) {
              double v389 = -0.0;
            }
            double v357 = v390 + v389;
LABEL_103:
            v619.origin.CGFloat x = v355;
            v619.origin.CGFloat y = rect;
            v619.size.double width = v357;
            v619.size.double height = r1;
            CGFloat v392 = v339;
            CGFloat v393 = v340;
            double v394 = v375;
            CGRect v620 = CGRectIntersection(v619, *(CGRect *)(&v376 - 3));
            double v400 = v620.size.width;
            double v401 = v620.size.height;
            double v402 = width * height;
            double v403 = v571 * v570;
            if ((v378 | a6))
            {
              if (v378) {
                goto LABEL_116;
              }
            }
            else
            {
              uint64_t v404 = objc_msgSend_writingDirectionSortedSubstrokes(v585, v395, v396, v397, v398, v399);
              if ((unint64_t)objc_msgSend_count(v404, v405, v406, v407, v408, v409) >= *(void *)(v575 + 96))
              {

                if (v402 > v403 * 0.4) {
                  goto LABEL_116;
                }
              }
              else
              {
              }
            }
            double v410 = 0.4;
            if ((v377 & 1) == 0 && a6 && v402 > v403 * 0.4 && (width > v357 * 0.95 || width > v375 * 0.95))
            {
LABEL_116:
              double v410 = 0.7;
              goto LABEL_119;
            }
            if (v401 == r1) {
              double v410 = 0.2;
            }
LABEL_119:
            if (v400 * v401 > v403 * v410 && v379)
            {
              if (v555)
              {
                long long v589 = 0u;
                long long v590 = 0u;
                long long v587 = 0u;
                long long v588 = 0u;
                id v413 = v555;
                uint64_t v416 = 0;
                uint64_t v417 = objc_msgSend_countByEnumeratingWithState_objects_count_(v413, v414, (uint64_t)&v587, (uint64_t)v594, 16, v415);
                if (v417)
                {
                  uint64_t v418 = *(void *)v588;
                  int v419 = v378 ^ 1;
                  double v420 = 3.40282347e38;
                  do
                  {
                    uint64_t v421 = 0;
                    do
                    {
                      if (*(void *)v588 != v418) {
                        objc_enumerationMutation(v413);
                      }
                      uint64_t v422 = *(void *)(*((void *)&v587 + 1) + 8 * v421);
                      sub_1C4BC394C((_OWORD *)v422, v309, v585, v319 > v320, v419);
                      id v423 = (id)objc_claimAutoreleasedReturnValue();
                      if (v422)
                      {
                        double v424 = atan2(*(long double *)(v422 + 24), *(long double *)(v422 + 16));
                        objc_msgSend_averageWritingOrientation(v423, v425, v426, v427, v428, v429);
                        long double v431 = v430;
                        objc_msgSend_averageWritingOrientation(v423, v432, v433, v434, v435, v436);
                        double v438 = vabdd_f64(atan2(v431, v437), v424);
                        if (v438 <= 3.14159265) {
                          double v439 = v438;
                        }
                        else {
                          double v439 = 6.28318531 - v438;
                        }
                      }
                      else
                      {
                        double v439 = 0.0;
                      }

                      if (!v416 || v439 < v420)
                      {
                        id v440 = v423;

                        uint64_t v416 = v440;
                        double v420 = v439;
                      }

                      ++v421;
                    }
                    while (v417 != v421);
                    uint64_t v443 = objc_msgSend_countByEnumeratingWithState_objects_count_(v413, v441, (uint64_t)&v587, (uint64_t)v594, 16, v442);
                    uint64_t v417 = v443;
                  }
                  while (v443);
                }

                if (v416)
                {
LABEL_160:
                  double v458 = NSNumber;
                  uint64_t v459 = objc_msgSend_uniqueIdentifier(v416, v444, v445, v446, v447, v448);
                  uint64_t v464 = objc_msgSend_numberWithInteger_(v458, v460, v459, v461, v462, v463);
                  objc_msgSend_removeObjectForKey_(v580, v465, (uint64_t)v464, v466, v467, v468);

                  if ((objc_msgSend_containsObject_(v558, v469, (uint64_t)v309, v470, v471, v472) & 1) == 0) {
                    objc_msgSend_addObject_(v554, v473, (uint64_t)v309, v474, v475, v476);
                  }
                  if ((objc_msgSend_containsObject_(v558, v473, (uint64_t)v585, v474, v475, v476) & 1) == 0) {
                    objc_msgSend_addObject_(v554, v477, (uint64_t)v585, v478, v479, v480);
                  }
                  objc_msgSend_addObject_(v558, v477, (uint64_t)v416, v478, v479, v480);
                  objc_msgSend_addObject_(v557, v481, (uint64_t)v416, v482, v483, v484);
                  objc_msgSend_removeObject_(v558, v485, (uint64_t)v309, v486, v487, v488);
                  objc_msgSend_removeObject_(v558, v489, (uint64_t)v585, v490, v491, v492);
                  objc_msgSend_removeObject_(v557, v493, (uint64_t)v309, v494, v495, v496);
                  objc_msgSend_removeObject_(v557, v497, (uint64_t)v585, v498, v499, v500);
                  objc_msgSend_removeObjectAtIndex_(v586, v501, v39, v502, v503, v504);
                  objc_msgSend_removeObjectAtIndex_(v586, v505, v572, v506, v507, v508);
                  objc_msgSend_bounds(v416, v509, v510, v511, v512, v513);
                  double v515 = v514;
                  objc_msgSend_bounds(v416, v516, v517, v518, v519, v520);
                  unint64_t v526 = 0;
                  double v528 = v515 * v527;
                  while (1)
                  {
                    if (v526 >= objc_msgSend_count(v586, v521, v522, v523, v524, v525))
                    {
                      objc_msgSend_addObject_(v586, v529, (uint64_t)v416, v530, v531, v532);
                      goto LABEL_170;
                    }
                    uint64_t v533 = objc_msgSend_objectAtIndexedSubscript_(v586, v529, v526, v530, v531, v532);
                    objc_msgSend_bounds(v533, v534, v535, v536, v537, v538);
                    double v540 = v539;
                    uint64_t v545 = objc_msgSend_objectAtIndexedSubscript_(v586, v541, v526, v542, v543, v544);
                    objc_msgSend_bounds(v545, v546, v547, v548, v549, v550);
                    double v552 = v551;

                    if (v528 <= v540 * v552) {
                      break;
                    }
                    ++v526;
                  }
                  objc_msgSend_insertObject_atIndex_(v586, v521, (uint64_t)v416, v526, v524, v525);
LABEL_170:

                  char v456 = 0;
                  uint64_t v572 = -1;
                  double v457 = (char *)__p;
                  if (!__p) {
                    goto LABEL_155;
                  }
LABEL_154:
                  uint64_t v592 = v457;
                  operator delete(v457);
                  goto LABEL_155;
                }
              }
              else
              {
                uint64_t v416 = sub_1C4BC394C((_OWORD *)v575, v309, v585, v319 > v320, v378 ^ 1);
                if (v416) {
                  goto LABEL_160;
                }
              }
            }
            else
            {
              uint64_t v449 = a7 + 1;
LABEL_143:
              while (1)
              {
                uint64_t v450 = *v449;
                uint64_t v451 = v449;
                if (!*v449) {
                  break;
                }
                while (1)
                {
                  uint64_t v449 = (uint64_t **)v450;
                  uint64_t v452 = v450[4];
                  if (v187 < v452) {
                    break;
                  }
                  if (v452 >= v187)
                  {
                    uint64_t v453 = (uint64_t)v449[5];
                    if (v199 < v453) {
                      goto LABEL_143;
                    }
                    if (v453 >= v199) {
                      goto LABEL_153;
                    }
                  }
                  uint64_t v450 = v449[1];
                  if (!v450)
                  {
                    uint64_t v451 = v449 + 1;
                    goto LABEL_150;
                  }
                }
              }
LABEL_150:
              uint64_t v454 = (uint64_t *)operator new(0x30uLL);
              v454[4] = v187;
              v454[5] = v199;
              *uint64_t v454 = 0;
              v454[1] = 0;
              v454[2] = (uint64_t)v449;
              *uint64_t v451 = v454;
              uint64_t v455 = (uint64_t *)**a7;
              if (v455)
              {
                *a7 = v455;
                uint64_t v454 = *v451;
              }
              sub_1C4949FD4(a7[1], v454);
              a7[2] = (uint64_t *)((char *)a7[2] + 1);
            }
LABEL_153:
            char v456 = 1;
            double v457 = (char *)__p;
            if (__p) {
              goto LABEL_154;
            }
LABEL_155:
            if (v593[0])
            {
              v593[1] = v593[0];
              operator delete(v593[0]);
            }

            if ((v456 & 1) == 0) {
              break;
            }
          }
        }
      }

      unint64_t v39 = v572;
LABEL_8:
      ++v39;
    }
  }
}

void sub_1C4BC19B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,uint64_t a57,void *a58,uint64_t a59)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BC1C50(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4BC1C60(uint64_t a1)
{
}

void sub_1C4BC1C68(uint64_t a1, void *a2)
{
  id v4 = a2;
  double v41 = 10000.0;
  sub_1C4BC1E98(*(double **)(a1 + 32), &v41, v4, *(CGFloat *)(a1 + 88), *(CGFloat *)(a1 + 96), *(CGFloat *)(a1 + 104), *(CGFloat *)(a1 + 112));
  uint64_t v6 = *(double **)(a1 + 32);
  if (v41 <= v6[9] && v41 <= *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    id v39 = 0;
    double v40 = 10000.0;
    objc_msgSend_getMergingEndOfLineCost_mergingEndOfLineStroke_forStroke_consistingOfSubstrokes_toLineGroup_(v6, v5, (uint64_t)&v40, (uint64_t)&v39, *(void *)(a1 + 40), *(void *)(a1 + 48), v4, v41);
    id v7 = v39;
    id v10 = v39;
    uint64_t v11 = *(double **)(a1 + 32);
    if (v40 < v11[9])
    {
      if ((uint64_t v12 = objc_msgSend_compareDistanceInWritingSequenceOfStroke_andStroke_toReferenceStroke_(v11, v8, (uint64_t)v10, *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), *(void *)(a1 + 40), v9, v40), v13 = *(void *)(*(void *)(a1 + 56) + 8), v14 = v40 - *(double *)(v13 + 24), v15 = *(double *)(*(void *)(a1 + 32) + 88), v14 < -v15)|| !v12 && v14 < 0.0|| (fabs(v14) < v15 ? (v16 = v12 == -1) : (v16 = 0), v16))
      {
        *(double *)(v13 + 24) = v40;
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v7);
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), a2);
        uint64_t v22 = objc_msgSend_encodedStrokeIdentifier(v10, v17, v18, v19, v20, v21);
        uint64_t v28 = objc_msgSend_writingDirectionSortedStrokeIdentifiers(v4, v23, v24, v25, v26, v27);
        uint64_t v34 = objc_msgSend_lastObject(v28, v29, v30, v31, v32, v33);
        *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = objc_msgSend_isEqual_(v22, v35, (uint64_t)v34, v36, v37, v38) ^ 1;
      }
    }
  }
}

void sub_1C4BC1E30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC1E60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC1E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC1E88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC1E98(double *a1, double *a2, void *a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  id v41 = a3;
  if (a1)
  {
    objc_msgSend_bounds(v41, v11, v12, v13, v14, v15);
    CGFloat x = v45.origin.x;
    CGFloat y = v45.origin.y;
    CGFloat width = v45.size.width;
    CGFloat height = v45.size.height;
    double MinY = CGRectGetMinY(v45);
    v46.origin.CGFloat x = a4;
    v46.origin.CGFloat y = a5;
    v46.size.CGFloat width = a6;
    v46.size.CGFloat height = a7;
    double v21 = 0.0;
    if (MinY > CGRectGetMaxY(v46))
    {
      v47.origin.CGFloat x = x;
      v47.origin.CGFloat y = y;
      v47.size.CGFloat width = width;
      v47.size.CGFloat height = height;
      double v22 = CGRectGetMinY(v47);
      v48.origin.CGFloat x = a4;
      v48.origin.CGFloat y = a5;
      v48.size.CGFloat width = a6;
      v48.size.CGFloat height = a7;
      double v21 = v22 - CGRectGetMaxY(v48);
    }
    v49.origin.CGFloat x = a4;
    v49.origin.CGFloat y = a5;
    v49.size.CGFloat width = a6;
    v49.size.CGFloat height = a7;
    double v23 = CGRectGetMinY(v49);
    v50.origin.CGFloat x = x;
    v50.origin.CGFloat y = y;
    v50.size.CGFloat width = width;
    v50.size.CGFloat height = height;
    if (v23 > CGRectGetMaxY(v50))
    {
      v51.origin.CGFloat x = a4;
      v51.origin.CGFloat y = a5;
      v51.size.CGFloat width = a6;
      v51.size.CGFloat height = a7;
      double v29 = CGRectGetMinY(v51);
      v52.origin.CGFloat x = x;
      v52.origin.CGFloat y = y;
      v52.size.CGFloat width = width;
      v52.size.CGFloat height = height;
      double v21 = v29 - CGRectGetMaxY(v52);
    }
    if (v21 == 0.0)
    {
      double v30 = 0.0;
      if (!a2) {
        goto LABEL_16;
      }
    }
    else
    {
      objc_msgSend_averageStrokeDeviation(v41, v24, v25, v26, v27, v28);
      double v32 = v31;
      objc_msgSend_averageStrokeDeviation(v41, v33, v34, v35, v36, v37);
      if (!a2) {
        goto LABEL_16;
      }
      double v39 = v32 * 3.0;
      if (v32 * 3.0 <= a1[4]) {
        double v39 = a1[4];
      }
      double v40 = v38 * 3.0;
      if (v38 * 3.0 <= a1[5]) {
        double v40 = a1[5];
      }
      double v30 = (a1[13] * fabs(v21 / sqrt(v40 * v40 + v39 * v39)) + 0.0) * 0.8;
    }
    *a2 = v30;
  }
LABEL_16:
}

void sub_1C4BC2068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC207C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC2090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC20A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4BC20B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v12 = objc_msgSend_strokeProvider(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
  uint64_t v17 = objc_msgSend_strokeIdentifierFromData_(v12, v13, (uint64_t)v5, v14, v15, v16);

  double v23 = objc_msgSend_strokeProvider(*(void **)(a1 + 32), v18, v19, v20, v21, v22);
  uint64_t v28 = objc_msgSend_strokeIdentifierFromData_(v23, v24, (uint64_t)v6, v25, v26, v27);

  uint64_t v34 = objc_msgSend_strokeProvider(*(void **)(a1 + 32), v29, v30, v31, v32, v33);
  uint64_t v38 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(v34, v35, (uint64_t)v17, (uint64_t)v28, v36, v37);

  return v38;
}

void sub_1C4BC217C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC21B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC21D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4BC21E4(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  id v107 = a2;
  if (a1)
  {
    uint64_t v10 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v5, v6, v7, v8, v9);
    long long __p = 0;
    uint64_t v116 = 0;
    uint64_t v117 = 0;
    long long v111 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v114 = 0u;
    id obj = v107;
    uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v11, (uint64_t)&v111, (uint64_t)v118, 16, v12);
    if (v18)
    {
      uint64_t v109 = *(void *)v112;
      while (1)
      {
        uint64_t v19 = 0;
        uint64_t v110 = v18;
LABEL_7:
        if (*(void *)v112 != v109) {
          objc_enumerationMutation(obj);
        }
        uint64_t v21 = 0;
        unint64_t v22 = 0;
        double v23 = *(void **)(*((void *)&v111 + 1) + 8 * v19);
        while (1)
        {
          if (v22 >= objc_msgSend_count(v10, v13, v14, v15, v16, v17, v107)) {
            goto LABEL_14;
          }
          uint64_t v24 = objc_msgSend_objectAtIndexedSubscript_(v10, v13, v22, v15, v16, v17);
          uint64_t v30 = objc_msgSend_substroke(v23, v25, v26, v27, v28, v29);
          uint64_t v36 = objc_msgSend_strokeIdentifier(v30, v31, v32, v33, v34, v35);
          char isEqual = objc_msgSend_isEqual_(v24, v37, (uint64_t)v36, v38, v39, v40);

          if (isEqual) {
            break;
          }
          ++v22;
          v21 += 16;
        }
        if (v22 == 0x7FFFFFFFFFFFFFFFLL) {
          break;
        }
        objc_msgSend_writingOrientation(v23, v13, v14, v15, v16, v17);
        *(double *)(*a3 + v21) = v83 + *(double *)(*a3 + v21);
        objc_msgSend_writingOrientation(v23, v84, v85, v86, v87, v88);
        *(double *)(*a3 + v21 + 8) = v89 + *(double *)(*a3 + v21 + 8);
        ++*((void *)__p + v22);
        if (++v19 != v110) {
          goto LABEL_7;
        }
LABEL_53:
        uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v13, (uint64_t)&v111, (uint64_t)v118, 16, v17);
        if (!v18) {
          goto LABEL_54;
        }
      }
LABEL_14:
      uint64_t v42 = objc_msgSend_substroke(v23, v13, v14, v15, v16, v17);
      CGRect v48 = objc_msgSend_strokeIdentifier(v42, v43, v44, v45, v46, v47);
      objc_msgSend_addObject_(v10, v49, (uint64_t)v48, v50, v51, v52);

      objc_msgSend_writingOrientation(v23, v53, v54, v55, v56, v57);
      uint64_t v60 = v58;
      uint64_t v61 = v59;
      uint64_t v63 = (void *)a3[1];
      unint64_t v62 = a3[2];
      if ((unint64_t)v63 < v62)
      {
        void *v63 = v58;
        v63[1] = v59;
        uint64_t v64 = v63 + 2;
        goto LABEL_27;
      }
      uint64_t v65 = (void *)*a3;
      uint64_t v66 = ((uint64_t)v63 - *a3) >> 4;
      unint64_t v67 = v66 + 1;
      if ((unint64_t)(v66 + 1) >> 60) {
        sub_1C494A220();
      }
      uint64_t v68 = v62 - (void)v65;
      if (v68 >> 3 > v67) {
        unint64_t v67 = v68 >> 3;
      }
      if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v69 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v69 = v67;
      }
      if (v69)
      {
        if (v69 >> 60) {
          sub_1C4949AA8();
        }
        uint64_t v70 = (char *)operator new(16 * v69);
        uint64_t v71 = &v70[16 * v66];
        *(void *)uint64_t v71 = v60;
        *((void *)v71 + 1) = v61;
        uint64_t v72 = (uint64_t)v71;
        if (v63 == v65)
        {
LABEL_25:
          uint64_t v64 = v71 + 16;
          *a3 = v72;
          a3[1] = (uint64_t)(v71 + 16);
          a3[2] = (uint64_t)&v70[16 * v69];
          if (!v63) {
            goto LABEL_27;
          }
          goto LABEL_26;
        }
      }
      else
      {
        uint64_t v70 = 0;
        uint64_t v71 = (char *)(16 * v66);
        *(void *)uint64_t v71 = v58;
        *((void *)v71 + 1) = v59;
        uint64_t v72 = 16 * v66;
        if (v63 == v65) {
          goto LABEL_25;
        }
      }
      do
      {
        *(_OWORD *)(v72 - 16) = *((_OWORD *)v63 - 1);
        v72 -= 16;
        v63 -= 2;
      }
      while (v63 != v65);
      uint64_t v63 = (void *)*a3;
      uint64_t v64 = v71 + 16;
      *a3 = v72;
      a3[1] = (uint64_t)(v71 + 16);
      a3[2] = (uint64_t)&v70[16 * v69];
      if (!v63)
      {
LABEL_27:
        a3[1] = (uint64_t)v64;
        uint64_t v73 = v116;
        if (v116 < v117)
        {
          *(void *)uint64_t v116 = 1;
          uint64_t v20 = (uint64_t)(v73 + 8);
LABEL_6:
          uint64_t v116 = (char *)v20;
          if (++v19 == v110) {
            goto LABEL_53;
          }
          goto LABEL_7;
        }
        int v74 = (char *)__p;
        int64_t v75 = v116 - (unsigned char *)__p;
        uint64_t v76 = (v116 - (unsigned char *)__p) >> 3;
        unint64_t v77 = v76 + 1;
        if ((unint64_t)(v76 + 1) >> 61) {
          sub_1C494A220();
        }
        uint64_t v78 = v117 - (unsigned char *)__p;
        if ((v117 - (unsigned char *)__p) >> 2 > v77) {
          unint64_t v77 = v78 >> 2;
        }
        if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v79 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v79 = v77;
        }
        if (v79)
        {
          if (v79 >> 61) {
            sub_1C4949AA8();
          }
          uint64_t v80 = (char *)operator new(8 * v79);
          uint64_t v81 = &v80[8 * v76];
          *(void *)uint64_t v81 = 1;
          uint64_t v20 = (uint64_t)(v81 + 8);
          int64_t v82 = v73 - v74;
          if (v73 == v74) {
            goto LABEL_51;
          }
        }
        else
        {
          uint64_t v80 = 0;
          uint64_t v81 = (char *)(8 * v76);
          *(void *)(8 * v76) = 1;
          uint64_t v20 = 8 * v76 + 8;
          int64_t v82 = v73 - v74;
          if (v73 == v74)
          {
LABEL_51:
            long long __p = v81;
            uint64_t v117 = &v80[8 * v79];
            if (!v74) {
              goto LABEL_6;
            }
            operator delete(v74);
            uint64_t v116 = (char *)v20;
            if (++v19 != v110) {
              goto LABEL_7;
            }
            goto LABEL_53;
          }
        }
        unint64_t v90 = v82 - 8;
        if (v90 < 0x58) {
          goto LABEL_71;
        }
        if ((unint64_t)(v73 - v80 - v75) < 0x20) {
          goto LABEL_71;
        }
        uint64_t v91 = (v90 >> 3) + 1;
        uint64_t v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v93 = &v73[-v92];
        v81 -= v92;
        uint64_t v94 = &v80[8 * v76 - 16];
        uint64_t v95 = v73 - 16;
        uint64_t v96 = v91 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v97 = *(_OWORD *)v95;
          *((_OWORD *)v94 - 1) = *((_OWORD *)v95 - 1);
          *(_OWORD *)uint64_t v94 = v97;
          v94 -= 32;
          v95 -= 32;
          v96 -= 4;
        }
        while (v96);
        uint64_t v73 = v93;
        if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_71:
          do
          {
            uint64_t v98 = *((void *)v73 - 1);
            v73 -= 8;
            *((void *)v81 - 1) = v98;
            v81 -= 8;
          }
          while (v73 != v74);
        }
        goto LABEL_51;
      }
LABEL_26:
      operator delete(v63);
      goto LABEL_27;
    }
LABEL_54:

    for (unint64_t i = 0; i < objc_msgSend_count(v10, v99, v100, v101, v102, v103, v107); ++i)
    {
      uint64_t v105 = *((void *)__p + i);
      if (v105 >= 2) {
        *(float64x2_t *)(*a3 + 16 * i) = vdivq_f64(*(float64x2_t *)(*a3 + 16 * i), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v105), 0));
      }
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

void sub_1C4BC2718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id sub_1C4BC27C4(uint64_t a1, void *a2, double a3, double a4)
{
  id v5 = a2;
  uint64_t v11 = v5;
  if (!a1)
  {
    uint64_t v17 = 0;
    goto LABEL_79;
  }
  if (objc_msgSend_count(v5, v6, v7, v8, v9, v10))
  {
    if (!*(unsigned char *)(a1 + 178))
    {
      uint64_t v253 = (void *)MEMORY[0x1E4F1C978];
      float v254 = objc_msgSend_lastObject(v11, v12, v13, v14, v15, v16);
      uint64_t v17 = objc_msgSend_arrayWithObject_(v253, v255, (uint64_t)v254, v256, v257, v258);

      goto LABEL_79;
    }
    uint64_t v17 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v12, v13, v14, v15, v16);
    double v23 = objc_msgSend_lastObject(v11, v18, v19, v20, v21, v22);
    objc_msgSend_addObject_(v17, v24, (uint64_t)v23, v25, v26, v27);

    uint64_t v32 = objc_msgSend_objectAtIndexedSubscript_(v11, v28, 0, v29, v30, v31);
    objc_msgSend_strokeDeviation(v32, v33, v34, v35, v36, v37);
    double v39 = v38;
    double v41 = v40;

    long long __p = 0;
    id v272 = 0;
    double v273 = 0;
    unint64_t v47 = objc_msgSend_count(v11, v42, v43, v44, v45, v46);
    unint64_t v53 = v47;
    if (v47)
    {
      if (v47 >> 59) {
        sub_1C494A220();
      }
      uint64_t v54 = (char *)operator new(32 * v47);
      long long __p = &v54[(unint64_t)v272 & 0xFFFFFFFFFFFFFFE0];
      id v272 = (CGRect *)__p;
      double v273 = &v54[32 * v53];
    }
    unint64_t v55 = 0;
    double v262 = v41 * -2.0;
    double v263 = v39 * -2.0;
    while (1)
    {
      if (v55 >= objc_msgSend_count(v11, v48, v49, v50, v51, v52))
      {
        CGFloat x = v272[-1].origin.x;
        unint64_t v217 = 126 - 2 * __clz(((char *)&v272[-1] - (unsigned char *)__p) >> 5);
        CGFloat y = v272[-1].origin.y;
        double width = v272[-1].size.width;
        CGFloat height = v272[-1].size.height;
        if (&v272[-1] == __p) {
          uint64_t v221 = 0;
        }
        else {
          uint64_t v221 = v217;
        }
        sub_1C4BCCFA4((unint64_t)__p, v272 - 1, v221, 1);
        if (10.0 - width >= 0.0) {
          double v222 = 10.0 - width;
        }
        else {
          double v222 = 0.0;
        }
        v277.origin.CGFloat x = x;
        v277.origin.CGFloat y = y;
        v277.size.double width = width;
        v277.size.CGFloat height = height;
        double MinX = CGRectGetMinX(v277);
        v278.origin.CGFloat x = x;
        v278.origin.CGFloat y = y;
        v278.size.double width = width;
        v278.size.CGFloat height = height;
        double MaxX = CGRectGetMaxX(v278);
        uint64_t v225 = __p;
        if ((char *)v272 - (unsigned char *)__p >= 33)
        {
          double v226 = sqrt(a4 * a4 + a3 * a3) * 0.25;
          unint64_t v227 = (unint64_t)((char *)v272 - (unsigned char *)__p) >> 5;
          double v228 = v226 + MaxX + v222 * 0.5;
          double v229 = MinX - v222 * 0.5 - v226;
          uint64_t v230 = v227 - 1;
          uint64_t v231 = 32 * v227 - 64;
          do
          {
            double v232 = CGRectGetMinX(*(CGRect *)((char *)__p + v231));
            double v237 = CGRectGetMaxX(*(CGRect *)((char *)__p + v231));
            double v238 = v237;
            if ((v232 < v229 || v232 > v228) && (v237 < v229 || v237 > v228) && (v232 >= v229 || v237 <= v228)) {
              break;
            }
            float v242 = objc_msgSend_objectAtIndexedSubscript_(v11, v233, --v230, v234, v235, v236);
            objc_msgSend_addObject_(v17, v243, (uint64_t)v242, v244, v245, v246);

            if ((unint64_t)objc_msgSend_count(v17, v247, v248, v249, v250, v251) >= *(void *)(a1 + 96)) {
              break;
            }
            if (v232 - v226 < v229) {
              double v229 = v232 - v226;
            }
            if (v226 + v238 < v228) {
              double v228 = v226 + v238;
            }
            v231 -= 32;
          }
          while (v230 > 0);
          uint64_t v225 = __p;
        }
        if (v225) {
          operator delete(v225);
        }
        goto LABEL_79;
      }
      uint64_t v61 = objc_msgSend_objectAtIndexedSubscript_(v11, v57, v55, v58, v59, v60);
      uint64_t v66 = objc_msgSend_objectAtIndexedSubscript_(v11, v62, v55, v63, v64, v65);
      objc_msgSend_writingOrientation(v66, v67, v68, v69, v70, v71);
      long double v73 = v72;
      uint64_t v78 = objc_msgSend_objectAtIndexedSubscript_(v11, v74, v55, v75, v76, v77);
      objc_msgSend_writingOrientation(v78, v79, v80, v81, v82, v83);
      double v85 = atan2(v73, v84);

      uint64_t v91 = objc_msgSend_substroke(v61, v86, v87, v88, v89, v90);
      objc_msgSend_bounds(v91, v92, v93, v94, v95, v96);
      double MidX = CGRectGetMidX(v275);
      uint64_t v102 = objc_msgSend_substroke(v61, v97, v98, v99, v100, v101);
      objc_msgSend_bounds(v102, v103, v104, v105, v106, v107);
      double MidY = CGRectGetMidY(v276);

      float v108 = v85;
      __float2 v114 = __sincosf_stret(v108);
      double cosval = v114.__cosval;
      double sinval = v114.__sinval;
      double v266 = v114.__cosval;
      if (v55)
      {
        uint64_t v117 = objc_msgSend_objectAtIndexedSubscript_(v11, v109, v55 - 1, *(void *)&v111, *(void *)&v112, *(void *)&v113);
        objc_msgSend_writingOrientation(v117, v118, v119, v120, v121, v122);
        double v124 = v123;
        uint64_t v129 = objc_msgSend_objectAtIndexedSubscript_(v11, v125, v55, v126, v127, v128);
        objc_msgSend_writingOrientation(v129, v130, v131, v132, v133, v134);
        double v136 = v135;
        uint64_t v141 = objc_msgSend_objectAtIndexedSubscript_(v11, v137, v55 - 1, v138, v139, v140);
        objc_msgSend_writingOrientation(v141, v142, v143, v144, v145, v146);
        double v148 = v147;
        uint64_t v153 = objc_msgSend_objectAtIndexedSubscript_(v11, v149, v55, v150, v151, v152);
        objc_msgSend_writingOrientation(v153, v154, v155, v156, v157, v158);
        double v160 = atan2(v124 + v136, v148 + v159);

        float v161 = v160;
        __float2 v162 = __sincosf_stret(v161);
        double cosval = v162.__cosval;
        double v163 = v162.__sinval;
        double v165 = v267;
        double v164 = v268;
        double v166 = v264;
        double v167 = v265;
        double v169 = MidY;
        double v168 = MidX;
      }
      else
      {
        double v169 = MidY;
        double v168 = MidX;
        double v167 = MidX + v263 * cosval;
        double v166 = MidY + v262 * sinval;
        double v164 = 0.0;
        double v163 = v114.__sinval;
        double v165 = 0.0;
      }
      uint64_t v170 = 0;
      unint64_t v171 = 0;
      double v172 = 2.22507386e-308;
      double v173 = 1.79769313e308;
      double v174 = v168 - v167;
      double v175 = v169 - v166;
      double v264 = v169;
      double v265 = v168;
      double v267 = v165 + cosval * v175 - v174 * v163;
      double v268 = v164 + v163 * v175 + v174 * cosval;
      double v176 = v114.__sinval;
      double v177 = -sinval;
      double v178 = 1.79769313e308;
      double v179 = 2.22507386e-308;
      while (1)
      {
        uint64_t v180 = objc_msgSend_substroke(v61, v109, *(void *)&v110, *(void *)&v111, *(void *)&v112, *(void *)&v113);
        uint64_t v186 = objc_msgSend_convexHull(v180, v181, v182, v183, v184, v185);
        uint64_t v187 = v186[1] - *v186;

        if (v171 >= v187 >> 4) {
          break;
        }
        uint64_t v193 = objc_msgSend_substroke(v61, v188, v189, v190, v191, v192);
        uint64_t v199 = (double *)(*objc_msgSend_convexHull(v193, v194, v195, v196, v197, v198) + v170);
        double v201 = *v199;
        double v200 = v199[1];

        double v202 = v268 + v266 * (v201 - MidX) + v176 * (v200 - MidY);
        double v203 = v267 + v177 * (v201 - MidX) + v266 * (v200 - MidY);
        if (v202 < v173) {
          double v173 = v268 + v266 * (v201 - MidX) + v176 * (v200 - MidY);
        }
        if (v202 > v172) {
          double v172 = v268 + v266 * (v201 - MidX) + v176 * (v200 - MidY);
        }
        if (v203 < v178) {
          double v178 = v267 + v177 * (v201 - MidX) + v266 * (v200 - MidY);
        }
        if (v203 > v179) {
          double v179 = v267 + v177 * (v201 - MidX) + v266 * (v200 - MidY);
        }
        ++v171;
        v170 += 16;
      }
      double v204 = v172 - v173;
      double v205 = v179 - v178;
      p_CGFloat x = &v272->origin.x;
      if (v272 < (CGRect *)v273)
      {
        v272->origin.CGFloat x = v173;
        p_x[1] = v178;
        uint64_t v56 = p_x + 4;
        p_x[2] = v204;
        p_x[3] = v205;
        goto LABEL_9;
      }
      uint64_t v207 = (double *)__p;
      uint64_t v208 = ((char *)v272 - (unsigned char *)__p) >> 5;
      unint64_t v209 = v208 + 1;
      if ((unint64_t)(v208 + 1) >> 59) {
        sub_1C494A220();
      }
      uint64_t v210 = v273 - (unsigned char *)__p;
      if ((v273 - (unsigned char *)__p) >> 4 > v209) {
        unint64_t v209 = v210 >> 4;
      }
      if ((unint64_t)v210 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v211 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v211 = v209;
      }
      if (v211)
      {
        if (v211 >> 59) {
          sub_1C4949AA8();
        }
        uint64_t v212 = (char *)operator new(32 * v211);
        uint64_t v213 = (double *)&v212[32 * v208];
        *uint64_t v213 = v173;
        v213[1] = v178;
        v213[2] = v204;
        v213[3] = v205;
        uint64_t v214 = v213;
        if (p_x == v207)
        {
LABEL_40:
          uint64_t v56 = v213 + 4;
          long long __p = v214;
          double v273 = &v212[32 * v211];
          if (!p_x) {
            goto LABEL_9;
          }
LABEL_41:
          operator delete(p_x);
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v212 = 0;
        uint64_t v213 = (double *)(32 * v208);
        *uint64_t v213 = v173;
        v213[1] = v178;
        v213[2] = v204;
        v213[3] = v205;
        uint64_t v214 = (double *)(32 * v208);
        if (p_x == v207) {
          goto LABEL_40;
        }
      }
      do
      {
        long long v215 = *((_OWORD *)p_x - 1);
        *((_OWORD *)v214 - 2) = *((_OWORD *)p_x - 2);
        *((_OWORD *)v214 - 1) = v215;
        v214 -= 4;
        p_x -= 4;
      }
      while (p_x != v207);
      p_CGFloat x = v207;
      uint64_t v56 = v213 + 4;
      long long __p = v214;
      double v273 = &v212[32 * v211];
      if (p_x) {
        goto LABEL_41;
      }
LABEL_9:
      id v272 = (CGRect *)v56;

      ++v55;
    }
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v252 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v252, OS_LOG_TYPE_FAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl(&dword_1C492D000, v252, OS_LOG_TYPE_FAULT, "There must be at least one substroke in the input for the coalescing algorithm.", (uint8_t *)&__p, 2u);
  }

  uint64_t v17 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_79:

  return v17;
}

void sub_1C4BC2F58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC2F6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC2F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

double sub_1C4BC3104(void *a1, void *a2, void *a3, long double a4, long double a5)
{
  id v9 = a2;
  id v15 = a3;
  if (a1)
  {
    unint64_t v16 = 0;
    double v17 = 0.0;
    double v18 = 0.0;
    while (v16 < objc_msgSend_count(v9, v10, v11, v12, v13, v14))
    {
      uint64_t v24 = objc_msgSend_objectAtIndexedSubscript_(v9, v19, v16, v21, v22, v23);
      objc_msgSend_writingOrientation(v24, v25, v26, v27, v28, v29);
      double v31 = v30;
      double v33 = v32;

      double v17 = v17 + (v31 - a4) * (v31 - a4);
      double v18 = v18 + (v33 - a5) * (v33 - a5);
      ++v16;
    }
    uint64_t v34 = objc_msgSend_count(v9, v19, v20, v21, v22, v23);
    uint64_t v40 = objc_msgSend_count(v9, v35, v36, v37, v38, v39);
    long double v42 = *((double *)a1 + 2);
    long double v41 = *((double *)a1 + 3);
    uint64_t v48 = objc_msgSend_count(v9, v43, v44, v45, v46, v47);
    double v49 = atan2(a5, a4);
    double v50 = vabdd_f64(v49, atan2(v41, v42));
    if (v50 <= 3.14159265) {
      double v51 = v50;
    }
    else {
      double v51 = 6.28318531 - v50;
    }
    double v52 = (double)(unint64_t)v48 / (double)(uint64_t)a1[12];
    double v53 = pow(v52 / sqrt(v52 * v52 + 1.0), sqrt(sqrt(v17 / (double)(unint64_t)v34) + sqrt(v18 / (double)(unint64_t)v40)) + 1.0)/ (v51 + 1.0);
  }
  else
  {
    double v53 = 0.0;
  }

  return v53;
}

void sub_1C4BC32A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC32B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC32C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC32E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC32F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4BC3824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id sub_1C4BC394C(_OWORD *a1, void *a2, void *a3, int a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  if (a1)
  {
    id v294 = 0;
    v295[0] = 0;
    id v287 = v10;
    unint64_t v16 = objc_msgSend_strokeIdentifiers(v10, v11, v12, v13, v14, v15);
    objc_msgSend_firstStrokeIdentifier_lastStrokeIdentifier_inGroup_addingStrokeIdentifiers_removingStrokeIdentifiers_(a1, v17, (uint64_t)v295, (uint64_t)&v294, (uint64_t)v9, (uint64_t)v16, 0);
    id v285 = v295[0];
    id v284 = v294;

    objc_msgSend_bounds(v9, v18, v19, v20, v21, v22);
    CGFloat v24 = v23;
    CGFloat v26 = v25;
    CGFloat v28 = v27;
    CGFloat v30 = v29;
    objc_msgSend_bounds(v287, v31, v32, v33, v34, v35);
    v299.origin.CGFloat x = v36;
    v299.origin.CGFloat y = v37;
    v299.size.CGFloat width = v38;
    v299.size.CGFloat height = v39;
    v297.origin.CGFloat x = v24;
    v297.origin.CGFloat y = v26;
    v297.size.CGFloat width = v28;
    v297.size.CGFloat height = v30;
    CGRect v298 = CGRectUnion(v297, v299);
    CGFloat x = v298.origin.x;
    CGFloat y = v298.origin.y;
    CGFloat width = v298.size.width;
    CGFloat height = v298.size.height;
    if (a4)
    {
      double v49 = objc_msgSend_writingDirectionSortedSubstrokes(v287, v40, v41, v42, v43, v44);
      unint64_t v55 = objc_msgSend_mutableCopy(v49, v50, v51, v52, v53, v54);

      objc_msgSend_writingDirectionSortedSubstrokes(v9, v56, v57, v58, v59, v60);
    }
    else
    {
      uint64_t v66 = objc_msgSend_writingDirectionSortedSubstrokes(v9, v40, v41, v42, v43, v44);
      unint64_t v55 = objc_msgSend_mutableCopy(v66, v67, v68, v69, v70, v71);

      objc_msgSend_writingDirectionSortedSubstrokes(v287, v72, v73, v74, v75, v76);
    uint64_t v61 = };
    objc_msgSend_addObjectsFromArray_(v55, v62, (uint64_t)v61, v63, v64, v65);

    long long v77 = a1[1];
    long long v292 = a1[2];
    long long v293 = v77;
    id v291 = v55;
    objc_msgSend_estimateWritingDirectionAndSortSubstrokesAccordingly_averageWritingOrientation_averageStrokeDeviation_(a1, v78, (uint64_t)&v291, (uint64_t)&v293, (uint64_t)&v292, v79);
    id v80 = v291;

    long long __p = 0;
    unint64_t v289 = 0;
    uint64_t v290 = 0;
    uint64_t v86 = objc_msgSend_strokeIdentifiers(v9, v81, v82, v83, v84, v85);
    uint64_t v92 = objc_msgSend_count(v86, v87, v88, v89, v90, v91);
    uint64_t v98 = objc_msgSend_strokeIdentifiers(v287, v93, v94, v95, v96, v97);
    unint64_t v104 = objc_msgSend_count(v98, v99, v100, v101, v102, v103) + v92;
    if (v104)
    {
      if (v104 >> 60) {
        sub_1C494A220();
      }
      uint64_t v105 = (char *)operator new(16 * v104);
      long long __p = &v105[v289 & 0xFFFFFFFFFFFFFFF0];
      unint64_t v289 = (unint64_t)__p;
      uint64_t v290 = &v105[16 * v104];
    }

    double v286 = sub_1C4BC21E4((uint64_t)a1, v80, (uint64_t *)&__p);
    double v279 = height;
    double v280 = width;
    double v281 = y;
    double v282 = x;
    uint64_t v283 = sub_1C4BC27C4((uint64_t)a1, v80, *(double *)&v292, *((double *)&v292 + 1));
    double v106 = sub_1C4BC3104(a1, v80, v286, *(long double *)&v293, *((long double *)&v293 + 1));
    objc_msgSend_firstStrokeOrigin(v9, v107, v108, v109, v110, v111);
    double v113 = v112;
    objc_msgSend_firstStrokeOrigin(v9, v114, v115, v116, v117, v118);
    double v120 = v119;
    objc_msgSend_firstStrokeOrigin(v9, v121, v122, v123, v124, v125);
    double v127 = v126;
    objc_msgSend_firstStrokeOrigin(v9, v128, v129, v130, v131, v132);
    double v134 = v133;
    objc_msgSend_firstStrokeOrigin(v287, v135, v136, v137, v138, v139);
    double v141 = v140;
    objc_msgSend_firstStrokeOrigin(v287, v142, v143, v144, v145, v146);
    double v148 = v147;
    objc_msgSend_firstStrokeOrigin(v287, v149, v150, v151, v152, v153);
    double v155 = v154;
    objc_msgSend_firstStrokeOrigin(v287, v156, v157, v158, v159, v160);
    if (v127 * v134 + v113 * v120 >= v155 * v166 + v141 * v148) {
      objc_msgSend_firstStrokeOrigin(v287, v161, v162, v163, v164, v165);
    }
    else {
      objc_msgSend_firstStrokeOrigin(v9, v161, v162, v163, v164, v165);
    }
    uint64_t v174 = v172;
    uint64_t v175 = v173;
    if (a5)
    {
      id v176 = v9;
      uint64_t v182 = objc_msgSend_strokeIdentifiers(v176, v177, v178, v179, v180, v181);
      uint64_t v188 = objc_msgSend_lastObject(v80, v183, v184, v185, v186, v187);
      uint64_t v194 = objc_msgSend_substroke(v188, v189, v190, v191, v192, v193);
      double v200 = objc_msgSend_strokeIdentifier(v194, v195, v196, v197, v198, v199);
      int v205 = objc_msgSend_containsObject_(v182, v201, (uint64_t)v200, v202, v203, v204);

      if (v205)
      {
        id v211 = v287;

        id v176 = v211;
      }
      uint64_t v217 = objc_msgSend_count(v80, v206, v207, v208, v209, v210) - 2;
      if (v217 < 0)
      {
LABEL_18:
        uint64_t v217 = -1;
      }
      else
      {
        while (1)
        {
          uint64_t v218 = objc_msgSend_strokeIdentifiers(v176, v212, v213, v214, v215, v216);
          uint64_t v223 = objc_msgSend_objectAtIndexedSubscript_(v80, v219, v217, v220, v221, v222);
          double v229 = objc_msgSend_substroke(v223, v224, v225, v226, v227, v228);
          uint64_t v235 = objc_msgSend_strokeIdentifier(v229, v230, v231, v232, v233, v234);
          char v240 = objc_msgSend_containsObject_(v218, v236, (uint64_t)v235, v237, v238, v239);

          if (v240) {
            break;
          }
          if (v217-- <= 0) {
            goto LABEL_18;
          }
        }
      }
    }
    else
    {
      uint64_t v217 = -1;
    }
    float v242 = objc_msgSend_strokeIdentifiers(v287, v167, v168, v169, v170, v171);
    objc_msgSend_groupByAddingStrokeIdentifiers_removingStrokeIdentifiers_firstStrokeIdentifier_lastStrokeIdentifier_bounds_writingDirectionSortedSubstrokes_averageWritingOrientation_averageStrokeDeviation_writingDirectionSortedStrokeIdentifiers_localStrokeWritingOrientations_coalescedLastSubstrokes_groupingConfidence_lastSubstrokeIndexBeforeMerge_firstStrokeOrigin_(v9, v243, (uint64_t)v242, 0, (uint64_t)v285, (uint64_t)v284, v80, v286, v282, v281, v280, v279, v293, v292, &__p, v283, *(void *)&v106, v217, v174,
    uint64_t v244 = v175);

    uint64_t v250 = objc_msgSend_strategyIdentifier(v9, v245, v246, v247, v248, v249);
    uint64_t v256 = objc_msgSend_strategyIdentifier(a1, v251, v252, v253, v254, v255);
    if (objc_msgSend_isEqualToString_(v250, v257, (uint64_t)v256, v258, v259, v260)) {
      uint64_t v266 = objc_msgSend_classification(v9, v261, v262, v263, v264, v265);
    }
    else {
      uint64_t v266 = objc_msgSend_classification(v287, v261, v262, v263, v264, v265);
    }
    uint64_t v267 = v266;

    double v273 = objc_msgSend_strategyIdentifier(a1, v268, v269, v270, v271, v272);
    CGRect v277 = objc_msgSend_strokeGroupWithUpdatedStrategyIdentifier_classification_(v244, v274, (uint64_t)v273, v267, v275, v276);

    if (__p)
    {
      unint64_t v289 = (unint64_t)__p;
      operator delete(__p);
    }

    id v10 = v287;
  }
  else
  {
    CGRect v277 = 0;
  }

  return v277;
}