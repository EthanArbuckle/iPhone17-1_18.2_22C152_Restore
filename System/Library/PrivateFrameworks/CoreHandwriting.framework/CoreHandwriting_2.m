void sub_1C4A76CB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C4A76CCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A76CE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A76D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A76D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A76F44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A76FB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A773A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A773B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A773C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A773E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A773F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A7740C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A77420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A77434(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A77448(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A7745C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A77470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A77484(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A77498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A774AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A77A88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A78228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  operator delete(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void VariantMap::VariantMap(VariantMap *this, const char *a2)
{
  uint64_t v2 = MEMORY[0x1F4188790](this);
  uint64_t v134 = *MEMORY[0x1E4F143B8];
  v130 = 0;
  uint64_t v131 = 0;
  v132 = 0;
  __p = 0;
  v128 = 0;
  v129 = 0;
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v120 = fopen(v3, "r");
  if (!fgets(__str, 4096, v120))
  {
    LODWORD(v75) = 0;
    uint64_t v74 = 0;
    v6 = 0;
    v71 = 0;
    v73 = 0;
    v72 = 0;
    v77 = (char *)__p;
    uint64_t v78 = -(uint64_t)__p;
    uint64_t v79 = -(uint64_t)__p >> 2;
    unint64_t v80 = v79 + 1;
    if ((unint64_t)(v79 + 1) >> 62) {
      goto LABEL_99;
    }
    goto LABEL_89;
  }
  uint64_t v119 = v2;
  v4 = 0;
  v122 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  do
  {
    v8 = strtok(__str, " \t\n\r\b");
    if (v8)
    {
      int v123 = 0;
      sscanf(v8, "0x%x", &v123);
      int v9 = v123;
      if (v4 < v122)
      {
        *(_DWORD *)v4 = v123;
        uint64_t v10 = (uint64_t)(v4 + 4);
        goto LABEL_29;
      }
      uint64_t v11 = (v4 - v5) >> 2;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 62) {
        sub_1C494A220();
      }
      if ((v122 - v5) >> 1 > v12) {
        unint64_t v12 = (v122 - v5) >> 1;
      }
      if ((unint64_t)(v122 - v5) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        if (v13 >> 62) {
          sub_1C4949AA8();
        }
        v14 = operator new(4 * v13);
        v15 = &v14[4 * v11];
        _DWORD *v15 = v9;
        uint64_t v10 = (uint64_t)(v15 + 1);
        int64_t v16 = v4 - v5;
        if (v4 == v5) {
          goto LABEL_26;
        }
      }
      else
      {
        v14 = 0;
        v15 = (_DWORD *)(4 * v11);
        *(_DWORD *)(4 * v11) = v123;
        uint64_t v10 = 4 * v11 + 4;
        int64_t v16 = v4 - v5;
        if (v4 == v5) {
          goto LABEL_26;
        }
      }
      unint64_t v17 = v16 - 4;
      if (v17 >= 0xBC)
      {
        uint64_t v19 = v10;
        unint64_t v20 = (v4 - 4 - v5) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v14[v4 - v5 - 4 - v20] <= &v14[v4 - v5 - 4]
          && &v4[-v20 - 4] <= v4 - 4
          && (unint64_t)(v5 - v14) >= 0x20)
        {
          uint64_t v65 = (v17 >> 2) + 1;
          uint64_t v66 = 4 * (v65 & 0x7FFFFFFFFFFFFFF8);
          v18 = &v4[-v66];
          v15 = (_DWORD *)((char *)v15 - v66);
          v67 = &v14[4 * v11 - 16];
          v68 = v4 - 16;
          uint64_t v69 = v65 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v70 = *(_OWORD *)v68;
            *(v67 - 1) = *((_OWORD *)v68 - 1);
            _OWORD *v67 = v70;
            v67 -= 2;
            v68 -= 32;
            v69 -= 8;
          }
          while (v69);
          uint64_t v10 = v19;
          if (v65 == (v65 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_26;
          }
        }
        else
        {
          v18 = v4;
          uint64_t v10 = v19;
        }
      }
      else
      {
        v18 = v4;
      }
      do
      {
        int v21 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *--v15 = v21;
      }
      while (v18 != v5);
LABEL_26:
      v130 = v15;
      uint64_t v131 = v10;
      v122 = &v14[4 * v13];
      v132 = v122;
      if (v5)
      {
        uint64_t v22 = v10;
        operator delete(v5);
        uint64_t v10 = v22;
        v7 = v124;
        v6 = v125;
      }
      v5 = (char *)v15;
LABEL_29:
      v121 = (char *)v10;
      uint64_t v131 = v10;
      unint64_t v23 = (unint64_t)(v6 - v7) >> 2;
      v24 = v128;
      if (v128 < v129)
      {
        *(_DWORD *)v128 = v23;
        uint64_t v25 = (uint64_t)(v24 + 4);
        goto LABEL_50;
      }
      v26 = (char *)__p;
      int64_t v27 = v128 - (unsigned char *)__p;
      uint64_t v28 = (v128 - (unsigned char *)__p) >> 2;
      unint64_t v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 62) {
        sub_1C494A220();
      }
      uint64_t v30 = v129 - (unsigned char *)__p;
      if ((v129 - (unsigned char *)__p) >> 1 > v29) {
        unint64_t v29 = v30 >> 1;
      }
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v29;
      }
      if (v31)
      {
        if (v31 >> 62) {
          sub_1C4949AA8();
        }
        unint64_t v32 = v31;
        v33 = (char *)operator new(4 * v31);
        unint64_t v31 = v32;
        v34 = &v33[4 * v28];
        *(_DWORD *)v34 = v23;
        uint64_t v25 = (uint64_t)(v34 + 4);
        int64_t v35 = v24 - v26;
        if (v24 == v26) {
          goto LABEL_48;
        }
      }
      else
      {
        v33 = 0;
        v34 = (char *)(4 * v28);
        *(_DWORD *)(4 * v28) = v23;
        uint64_t v25 = 4 * v28 + 4;
        int64_t v35 = v24 - v26;
        if (v24 == v26)
        {
LABEL_48:
          __p = v34;
          v128 = (char *)v25;
          v129 = &v33[4 * v31];
          if (v26) {
            operator delete(v26);
          }
LABEL_50:
          v128 = (char *)v25;
          strtok(0, " \t\n\r\b");
          v45 = strtok(0, " \t\n\r\b");
          if (!v45)
          {
LABEL_3:
            v4 = v121;
            continue;
          }
          while (1)
          {
            sscanf(v45, "0x%x", &v123);
            int v47 = v123;
            if (v6 >= v126) {
              break;
            }
            *(_DWORD *)v6 = v123;
            uint64_t v46 = (uint64_t)(v6 + 4);
LABEL_53:
            v125 = (char *)v46;
            strtok(0, " \t\n\r\b");
            v45 = strtok(0, " \t\n\r\b");
            v6 = (char *)v46;
            if (!v45) {
              goto LABEL_3;
            }
          }
          uint64_t v48 = (v6 - v7) >> 2;
          unint64_t v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 62) {
            sub_1C494A220();
          }
          uint64_t v50 = v126 - v7;
          if ((v126 - v7) >> 1 > v49) {
            unint64_t v49 = v50 >> 1;
          }
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v51 = v49;
          }
          if (v51)
          {
            if (v51 >> 62) {
              sub_1C4949AA8();
            }
            v52 = operator new(4 * v51);
            v53 = &v52[4 * v48];
            *(_DWORD *)v53 = v47;
            uint64_t v46 = (uint64_t)(v53 + 4);
            int64_t v54 = v6 - v7;
            if (v6 == v7) {
              goto LABEL_69;
            }
          }
          else
          {
            v52 = 0;
            v53 = (char *)(4 * v48);
            *(_DWORD *)(4 * v48) = v123;
            uint64_t v46 = 4 * v48 + 4;
            int64_t v54 = v6 - v7;
            if (v6 == v7) {
              goto LABEL_69;
            }
          }
          unint64_t v55 = v54 - 4;
          if (v55 >= 0xBC)
          {
            unint64_t v58 = (v6 - 4 - v7) & 0xFFFFFFFFFFFFFFFCLL;
            if (&v52[v6 - v7 - 4 - v58] > &v52[v6 - v7 - 4])
            {
              v56 = v6;
            }
            else if (&v6[-v58 - 4] > v6 - 4)
            {
              v56 = v6;
            }
            else if ((unint64_t)(v7 - v52) >= 0x20)
            {
              uint64_t v59 = (v55 >> 2) + 1;
              uint64_t v60 = 4 * (v59 & 0x7FFFFFFFFFFFFFF8);
              v56 = &v6[-v60];
              v53 -= v60;
              v61 = &v52[4 * v48 - 16];
              v62 = v6 - 16;
              uint64_t v63 = v59 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v64 = *(_OWORD *)v62;
                *(v61 - 1) = *((_OWORD *)v62 - 1);
                _OWORD *v61 = v64;
                v61 -= 2;
                v62 -= 32;
                v63 -= 8;
              }
              while (v63);
              if (v59 == (v59 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_69;
              }
            }
            else
            {
              v56 = v6;
            }
          }
          else
          {
            v56 = v6;
          }
          do
          {
            int v57 = *((_DWORD *)v56 - 1);
            v56 -= 4;
            *((_DWORD *)v53 - 1) = v57;
            v53 -= 4;
          }
          while (v56 != v7);
LABEL_69:
          v124 = v53;
          v125 = (char *)v46;
          v126 = &v52[4 * v51];
          if (v7) {
            operator delete(v7);
          }
          v7 = v53;
          goto LABEL_53;
        }
      }
      unint64_t v36 = v35 - 4;
      if (v36 < 0x2C) {
        goto LABEL_146;
      }
      if ((unint64_t)(v24 - v33 - v27) < 0x20) {
        goto LABEL_146;
      }
      uint64_t v37 = (v36 >> 2) + 1;
      uint64_t v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
      v39 = &v24[-v38];
      v34 -= v38;
      v40 = &v33[4 * v28 - 16];
      v41 = v24 - 16;
      uint64_t v42 = v37 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v43 = *(_OWORD *)v41;
        *((_OWORD *)v40 - 1) = *((_OWORD *)v41 - 1);
        *(_OWORD *)v40 = v43;
        v40 -= 32;
        v41 -= 32;
        v42 -= 8;
      }
      while (v42);
      v24 = v39;
      if (v37 != (v37 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_146:
        do
        {
          int v44 = *((_DWORD *)v24 - 1);
          v24 -= 4;
          *((_DWORD *)v34 - 1) = v44;
          v34 -= 4;
        }
        while (v24 != v26);
      }
      goto LABEL_48;
    }
  }
  while (fgets(__str, 4096, v120));
  v71 = v124;
  v73 = v128;
  v72 = v129;
  uint64_t v74 = v6 - v124;
  unint64_t v75 = (unint64_t)(v6 - v124) >> 2;
  if (v128 < v129)
  {
    *(_DWORD *)v128 = v75;
    uint64_t v76 = (uint64_t)(v73 + 4);
    uint64_t v2 = v119;
    goto LABEL_111;
  }
  uint64_t v2 = v119;
  v77 = (char *)__p;
  uint64_t v78 = v128 - (unsigned char *)__p;
  uint64_t v79 = (v128 - (unsigned char *)__p) >> 2;
  unint64_t v80 = v79 + 1;
  if ((unint64_t)(v79 + 1) >> 62) {
LABEL_99:
  }
    sub_1C494A220();
LABEL_89:
  uint64_t v81 = v72 - v77;
  if (v81 >> 1 > v80) {
    unint64_t v80 = v81 >> 1;
  }
  if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v82 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v82 = v80;
  }
  if (v82)
  {
    if (v82 >> 62) {
      sub_1C4949AA8();
    }
    v83 = (char *)operator new(4 * v82);
    v84 = &v83[4 * v79];
    v85 = &v83[4 * v82];
    *(_DWORD *)v84 = v75;
    uint64_t v76 = (uint64_t)(v84 + 4);
    int64_t v86 = v73 - v77;
    if (v73 == v77) {
      goto LABEL_109;
    }
  }
  else
  {
    v83 = 0;
    v84 = (char *)(4 * v79);
    v85 = 0;
    *(_DWORD *)(4 * v79) = v75;
    uint64_t v76 = 4 * v79 + 4;
    int64_t v86 = v73 - v77;
    if (v73 == v77) {
      goto LABEL_109;
    }
  }
  unint64_t v87 = v86 - 4;
  if (v87 < 0x2C)
  {
    v88 = v73;
    goto LABEL_108;
  }
  if ((unint64_t)(v73 - v83 - v78) < 0x20)
  {
    v88 = v73;
    do
    {
LABEL_108:
      int v95 = *((_DWORD *)v88 - 1);
      v88 -= 4;
      *((_DWORD *)v84 - 1) = v95;
      v84 -= 4;
    }
    while (v88 != v77);
    goto LABEL_109;
  }
  uint64_t v89 = (v87 >> 2) + 1;
  uint64_t v90 = 4 * (v89 & 0x7FFFFFFFFFFFFFF8);
  v88 = &v73[-v90];
  v84 -= v90;
  v91 = &v83[4 * v79 - 16];
  v92 = v73 - 16;
  uint64_t v93 = v89 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v94 = *(_OWORD *)v92;
    *((_OWORD *)v91 - 1) = *((_OWORD *)v92 - 1);
    *(_OWORD *)v91 = v94;
    v91 -= 32;
    v92 -= 32;
    v93 -= 8;
  }
  while (v93);
  if (v89 != (v89 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_108;
  }
LABEL_109:
  __p = v84;
  v128 = (char *)v76;
  v129 = v85;
  if (v77) {
    operator delete(v77);
  }
LABEL_111:
  v128 = (char *)v76;
  uint64_t v96 = (v76 - (uint64_t)__p) >> 2;
  *(_DWORD *)(v2 + 24) = v96 - 1;
  unint64_t v97 = v74 >> 2;
  v98 = v130;
  v99 = malloc_type_calloc(v96 + v97 + ((v131 - (uint64_t)v130) >> 2), 4uLL, 0x100004052888210uLL);
  uint64_t v100 = *(int *)(v2 + 24);
  v101 = &v99[4 * v100];
  uint64_t v102 = v100 + 1;
  *(void *)(v2 + 8) = v101;
  *(void *)(v2 + 16) = v99;
  *(void *)uint64_t v2 = &v101[4 * v100 + 4];
  if ((int)v100 < 1)
  {
    *(_DWORD *)&v101[4 * v100] = *((_DWORD *)__p + v100);
    if (v6 != v71)
    {
LABEL_115:
      if (v97 <= 1) {
        unint64_t v107 = 1;
      }
      else {
        unint64_t v107 = v97;
      }
      if (v107 >= 0xC && (unint64_t)(&v99[4 * v100 + 4 * v102] - v71) >= 0x20)
      {
        unint64_t v108 = v107 & 0xFFFFFFFFFFFFFFF8;
        v115 = (long long *)(v71 + 16);
        v116 = &v99[4 * v100 + 16 + 4 * v102];
        unint64_t v117 = v107 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          long long v118 = *v115;
          *(v116 - 1) = *(v115 - 1);
          _OWORD *v116 = v118;
          v115 += 2;
          v116 += 2;
          v117 -= 8;
        }
        while (v117);
        if (v107 == v108) {
          goto LABEL_123;
        }
      }
      else
      {
        unint64_t v108 = 0;
      }
      unint64_t v109 = v107 - v108;
      uint64_t v110 = 4 * v108;
      v111 = &v99[4 * v100 + 4 * v102 + v110];
      v112 = &v71[v110];
      do
      {
        int v113 = *(_DWORD *)v112;
        v112 += 4;
        *v111++ = v113;
        --v109;
      }
      while (v109);
LABEL_123:
      fclose(v120);
      goto LABEL_126;
    }
  }
  else
  {
    uint64_t v103 = 0;
    v104 = __p;
    do
    {
      uint64_t v105 = 4 * v103;
      *(_DWORD *)&v99[v105] = v98[v103];
      *(_DWORD *)&v101[v105] = v104[v103++];
      uint64_t v106 = *(int *)(v2 + 24);
    }
    while (v103 < v106);
    *(_DWORD *)&v101[4 * v106] = *((_DWORD *)__p + v106);
    if (v6 != v71) {
      goto LABEL_115;
    }
  }
  fclose(v120);
  if (!v71)
  {
    v114 = (char *)__p;
    if (!__p) {
      goto LABEL_130;
    }
    goto LABEL_129;
  }
LABEL_126:
  operator delete(v71);
  v114 = (char *)__p;
  if (__p)
  {
LABEL_129:
    v128 = v114;
    operator delete(v114);
  }
LABEL_130:
  if (v98) {
    operator delete(v98);
  }
}

void sub_1C4A78BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (v23)
  {
    operator delete(v23);
    uint64_t v25 = __p;
    if (!__p)
    {
LABEL_3:
      v26 = a22;
      if (!a22) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v25 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v25);
  v26 = a22;
  if (!a22) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v26);
  _Unwind_Resume(exception_object);
}

VariantMap *VariantMap::VariantsForCode@<X0>(VariantMap *this@<X0>, int a2@<W1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int var3 = this->var3;
  if (var3 >= 1)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    uint64_t v8 = 0;
    v33 = this;
    int v31 = a2;
    while (1)
    {
      if (this->var2[v8] != a2)
      {
        uint64_t v9 = v8 + 1;
        goto LABEL_4;
      }
      uint64_t v9 = v8 + 1;
      int v10 = this->var1[v8 + 1] - this->var1[v8];
      if (v10 >= 1) {
        break;
      }
LABEL_4:
      uint64_t v8 = v9;
      if (v9 >= var3) {
        return this;
      }
    }
    uint64_t v32 = v8 + 1;
    int v11 = 0;
    uint64_t v35 = v8;
    int v34 = this->var1[v8 + 1] - this->var1[v8];
    while (1)
    {
      while (1)
      {
        var0 = this->var0;
        uint64_t v13 = this->var1[v8] + (uint64_t)v11;
        if (v7 >= v6) {
          break;
        }
        *(_DWORD *)v7 = var0[v13];
        v7 += 4;
        a3[1] = v7;
        if (++v11 == v10) {
          goto LABEL_38;
        }
      }
      uint64_t v14 = (v7 - v5) >> 2;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 62) {
        sub_1C494A220();
      }
      if ((v6 - v5) >> 1 > v15) {
        unint64_t v15 = (v6 - v5) >> 1;
      }
      if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16)
      {
        if (v16 >> 62) {
          sub_1C4949AA8();
        }
        unint64_t v17 = operator new(4 * v16);
        v18 = &v17[4 * v14];
        *(_DWORD *)v18 = var0[v13];
        uint64_t v19 = (uint64_t)(v18 + 4);
        int64_t v20 = v7 - v5;
        if (v7 == v5) {
          goto LABEL_24;
        }
      }
      else
      {
        unint64_t v17 = 0;
        v18 = (char *)(4 * v14);
        *(_DWORD *)(4 * v14) = var0[v13];
        uint64_t v19 = 4 * v14 + 4;
        int64_t v20 = v7 - v5;
        if (v7 == v5) {
          goto LABEL_24;
        }
      }
      unint64_t v21 = v20 - 4;
      if (v21 < 0xBC)
      {
        uint64_t v22 = v7;
        goto LABEL_23;
      }
      unint64_t v24 = (v7 - 4 - v5) & 0xFFFFFFFFFFFFFFFCLL;
      if (&v17[v7 - v5 - 4 - v24] > &v17[v7 - v5 - 4]) {
        break;
      }
      if (&v7[-v24 - 4] > v7 - 4)
      {
        uint64_t v22 = v7;
        goto LABEL_23;
      }
      if ((unint64_t)(v5 - v17) < 0x20)
      {
        uint64_t v22 = v7;
        goto LABEL_23;
      }
      uint64_t v25 = (v21 >> 2) + 1;
      uint64_t v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v22 = &v7[-v26];
      v18 -= v26;
      int64_t v27 = &v17[4 * v14 - 16];
      uint64_t v28 = v7 - 16;
      uint64_t v29 = v25 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v30 = *(_OWORD *)v28;
        *(v27 - 1) = *((_OWORD *)v28 - 1);
        *int64_t v27 = v30;
        v27 -= 2;
        v28 -= 32;
        v29 -= 8;
      }
      while (v29);
      if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_23;
      }
LABEL_24:
      v6 = &v17[4 * v16];
      *a3 = v18;
      a3[1] = (char *)v19;
      a3[2] = v6;
      if (v5) {
        operator delete(v5);
      }
      v5 = v18;
      v7 = (char *)v19;
      this = v33;
      uint64_t v8 = v35;
      int v10 = v34;
      a3[1] = (char *)v19;
      if (++v11 == v34)
      {
LABEL_38:
        int var3 = this->var3;
        a2 = v31;
        uint64_t v9 = v32;
        goto LABEL_4;
      }
    }
    uint64_t v22 = v7;
    do
    {
LABEL_23:
      int v23 = *((_DWORD *)v22 - 1);
      v22 -= 4;
      *((_DWORD *)v18 - 1) = v23;
      v18 -= 4;
    }
    while (v22 != v5);
    goto LABEL_24;
  }
  return this;
}

void sub_1C4A78ED8(_Unwind_Exception *exception_object)
{
  v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t VariantMap::SerializeToFilename(VariantMap *this, const char *__filename)
{
  v3 = fopen(__filename, "wb");
  fwrite(&this->var3, 4uLL, 1uLL, v3);
  fwrite(this->var2, 4uLL, this->var3, v3);
  fwrite(this->var1, 4uLL, this->var3 + 1, v3);
  if (this->var3 >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = v4 + 1;
      v6 = &this->var1[v4];
      fwrite(&this->var0[*v6], 4uLL, v6[1] - (uint64_t)*v6, v3);
      uint64_t v4 = v5;
    }
    while (v5 < this->var3);
  }
  return fclose(v3);
}

void VariantMap::~VariantMap(VariantMap *this)
{
}

{
  free(this->var2);
}

uint64_t StraightLineRegressor::StraightLineRegressor(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v172 = a2;
  id v11 = a4;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = 1117782016;
  objc_storeStrong((id *)(a1 + 8), a2);
  objc_storeStrong((id *)(a1 + 16), a4);
  unint64_t v17 = 0;
  *(void *)(a1 + 64) = 0;
  v18 = (float64x2_t *)(a1 + 64);
  *(void *)a1 = a6;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  float v19 = 0.0;
  *(void *)(a1 + 72) = 0;
  while (objc_msgSend_strokeCount(v11, v12, v13, v14, v15, v16) > v17)
  {
    unint64_t v25 = 0;
    float v19 = v19 + (float)(unint64_t)objc_msgSend_pointCountForStrokeIndex_(v11, v20, v17, v22, v23, v24);
    while (objc_msgSend_pointCountForStrokeIndex_(v11, v26, v17, v27, v28, v29) > v25)
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(v11, v12, v17, v25, v15, v16);
      double v32 = v31 + *(double *)(a1 + 72);
      *(double *)(a1 + 64) = v30 + *(double *)(a1 + 64);
      *(double *)(a1 + 72) = v32;
      ++v25;
    }
    ++v17;
  }
  if (v19 >= 2.0)
  {
    unint64_t v33 = 0;
    float64x2_t *v18 = vdivq_f64(*v18, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v19), 0));
    while (objc_msgSend_strokeCount(v11, v20, v21, v22, v23, v24) > v33)
    {
      for (unint64_t i = 0; objc_msgSend_pointCountForStrokeIndex_(v11, v34, v33, v36, v37, v38) > i; ++i)
      {
        objc_msgSend_pointForStrokeIndex_pointIndex_(v11, v20, v33, i, v23, v24);
        *(float *)&double v40 = v40 - *(double *)(a1 + 64);
        *(float *)&double v41 = v41 - *(double *)(a1 + 72);
        *(float *)(a1 + 40) = *(float *)(a1 + 40) + (float)(*(float *)&v40 * *(float *)&v40);
        *(float *)(a1 + 48) = *(float *)(a1 + 48) + (float)(*(float *)&v41 * *(float *)&v41);
        *(float *)(a1 + 56) = *(float *)(a1 + 56) + (float)(*(float *)&v40 * *(float *)&v41);
      }
      ++v33;
    }
    float v42 = *(float *)(a1 + 40) / (float)(v19 + -1.0);
    *(float *)(a1 + 40) = v42;
    float v43 = *(float *)(a1 + 48) / (float)(v19 + -1.0);
    *(float *)(a1 + 48) = v43;
    float v44 = v42 / v43;
    float v45 = *(float *)(a1 + 32);
    float v46 = v43 / v42;
    if ((float)(v42 / v43) <= v45)
    {
      if (v46 <= v45)
      {
        float v48 = sqrtf(v42);
        *(float *)(a1 + 44) = v48;
        float v49 = sqrtf(v43);
        float v50 = *(float *)(a1 + 56) / (float)(v19 + -1.0);
        *(float *)(a1 + 52) = v49;
        *(float *)(a1 + 56) = v50;
        float v47 = v50 / (float)(v48 * v49);
      }
      else
      {
        float v47 = 1.0 - v44;
      }
    }
    else
    {
      float v47 = 1.0 - v46;
    }
    *(float *)(a1 + 36) = v47;
    if (fabsf(v47) < 0.1)
    {
      objc_msgSend_bounds(*(void **)(a1 + 8), v34, v35, v36, v37, v38);
      operator new();
    }
    if (v46 <= v45)
    {
      if (v44 <= v45)
      {
        double v51 = v18->f64[0];
        if (v42 >= v43)
        {
          double v54 = v51 + 1.0;
          double v52 = *(double *)(a1 + 72);
          double v55 = (float)(*(float *)(a1 + 56) / v42);
        }
        else
        {
          double v54 = v51 + (float)(*(float *)(a1 + 56) / v43);
          double v52 = *(double *)(a1 + 72);
          double v55 = 1.0;
        }
        double v53 = v52 + v55;
      }
      else
      {
        double v51 = *(double *)(a1 + 64);
        double v52 = *(double *)(a1 + 72);
        double v54 = v51 + 1.0;
        double v53 = v52;
      }
    }
    else
    {
      double v51 = *(double *)(a1 + 64);
      double v52 = *(double *)(a1 + 72);
      double v53 = v52 + 1.0;
      double v54 = v51;
    }
    float v56 = v54 - v51;
    float v57 = v53 - v52;
    float v58 = (float)(v57 * v57) + (float)(v56 * v56);
    if (v58 > 0.0)
    {
      float v56 = v56 / v58;
      float v57 = v57 / v58;
    }
    objc_msgSend_pointForStrokeIndex_pointIndex_(v11, v34, 0, 0, v37, v38);
    double v60 = v59;
    double v62 = v61;
    uint64_t v68 = objc_msgSend_strokeCount(v11, v63, v64, v65, v66, v67);
    uint64_t v74 = objc_msgSend_strokeCount(v11, v69, v70, v71, v72, v73);
    uint64_t v79 = objc_msgSend_pointCountForStrokeIndex_(v11, v75, v74 - 1, v76, v77, v78);
    objc_msgSend_pointForStrokeIndex_pointIndex_(v11, v80, v68 - 1, v79 - 1, v81, v82);
    unint64_t v88 = 0;
    double v89 = v60 - v51;
    double v90 = v56;
    double v91 = v62 - v52;
    double v92 = v57;
    *(float *)&double v89 = v91 * v57 + v89 * v56;
    *(float *)&double v93 = (v94 - v52) * v57 + (v93 - v51) * v56;
    float v170 = *(float *)&v89;
    float v171 = *(float *)&v93;
    int v169 = *(_DWORD *)(a5 + 16);
    __p = 0;
    v174 = 0;
    v176 = 0;
LABEL_34:
    if (objc_msgSend_strokeCount(v11, v83, v84, v85, v86, v87) > v88)
    {
      for (unint64_t j = 0; ; ++j)
      {
        if (objc_msgSend_pointCountForStrokeIndex_(v11, v95, v88, v97, v98, v99) <= j)
        {
          ++v88;
          goto LABEL_34;
        }
        objc_msgSend_pointForStrokeIndex_pointIndex_(v11, v83, v88, j, v86, v87);
        float v104 = (v103 - v52) * v92 + (v102 - v51) * v90;
        uint64_t v105 = v174;
        if (v174 < v176)
        {
          float *v174 = v104;
          uint64_t v101 = (uint64_t)(v174 + 1);
          goto LABEL_37;
        }
        uint64_t v106 = __p;
        uint64_t v107 = v174 - __p;
        unint64_t v108 = v107 + 1;
        if ((unint64_t)(v107 + 1) >> 62) {
          sub_1C494A220();
        }
        uint64_t v109 = (char *)v176 - (char *)__p;
        if (((char *)v176 - (char *)__p) >> 1 > v108) {
          unint64_t v108 = v109 >> 1;
        }
        unint64_t v110 = (unint64_t)v109 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v108;
        if (v110) {
          break;
        }
        v111 = 0;
        v112 = (float *)(4 * v107);
        *(float *)(4 * v107) = v104;
        uint64_t v101 = 4 * v107 + 4;
        int64_t v113 = (char *)v174 - (char *)__p;
        if (v174 != __p) {
          goto LABEL_51;
        }
LABEL_57:
        __p = v112;
        v176 = (float *)&v111[4 * v110];
        if (v106) {
          operator delete(v106);
        }
LABEL_37:
        v174 = (float *)v101;
      }
      if (v110 >> 62) {
        sub_1C4949AA8();
      }
      v111 = operator new(4 * v110);
      v112 = (float *)&v111[4 * v107];
      float *v112 = v104;
      uint64_t v101 = (uint64_t)(v112 + 1);
      int64_t v113 = (char *)v174 - (char *)__p;
      if (v174 == __p) {
        goto LABEL_57;
      }
LABEL_51:
      unint64_t v114 = v113 - 4;
      if (v114 < 0x2C) {
        goto LABEL_131;
      }
      if ((unint64_t)((char *)__p - v111) < 0x20) {
        goto LABEL_131;
      }
      uint64_t v115 = (v114 >> 2) + 1;
      uint64_t v116 = 4 * (v115 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v117 = &v174[v116 / 0xFFFFFFFFFFFFFFFCLL];
      v112 = (float *)((char *)v112 - v116);
      long long v118 = &v111[4 * v107 - 16];
      uint64_t v119 = v174 - 4;
      uint64_t v120 = v115 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v121 = *(_OWORD *)v119;
        *(v118 - 1) = *((_OWORD *)v119 - 1);
        *long long v118 = v121;
        v118 -= 2;
        v119 -= 8;
        v120 -= 8;
      }
      while (v120);
      uint64_t v105 = v117;
      if (v115 != (v115 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_131:
        do
        {
          int v122 = *((_DWORD *)v105-- - 1);
          *((_DWORD *)v112-- - 1) = v122;
        }
        while (v105 != __p);
      }
      goto LABEL_57;
    }
    if (v170 <= 0.0)
    {
      if (v171 <= 0.0 && v169)
      {
LABEL_65:
        int v123 = __p;
        if (__p != v174 && __p + 1 != v174)
        {
          float v124 = *__p;
          v125 = __p + 1;
          do
          {
            float v126 = *v125++;
            float v127 = v126;
            if (v124 < v126) {
              float v124 = v127;
            }
          }
          while (v125 != v174);
        }
LABEL_78:
        unint64_t v132 = 0;
        v175 = v123;
        while (1)
        {
          if (objc_msgSend_strokeCount(v11, v95, v96, v97, v98, v99) <= v132)
          {
            if (v170 <= 0.0)
            {
              if (v171 <= 0.0 && v169) {
                goto LABEL_111;
              }
            }
            else if (v171 <= 0.0 || !v169)
            {
LABEL_111:
              if (__p != v175 && __p + 1 != v175)
              {
                float v160 = *__p;
                v161 = __p + 1;
                do
                {
                  float v162 = *v161++;
                  float v163 = v162;
                  if (v162 < v160) {
                    float v160 = v163;
                  }
                }
                while (v161 != v175);
              }
              goto LABEL_124;
            }
            if (__p != v175 && __p + 1 != v175)
            {
              float v164 = *__p;
              v165 = __p + 1;
              do
              {
                float v166 = *v165++;
                float v167 = v166;
                if (v164 < v166) {
                  float v164 = v167;
                }
              }
              while (v165 != v175);
            }
LABEL_124:
            operator new();
          }
          for (unint64_t k = 0; objc_msgSend_pointCountForStrokeIndex_(v11, v133, v132, v134, v135, v136) > k; ++k)
          {
            objc_msgSend_pointForStrokeIndex_pointIndex_(v11, v95, v132, k, v98, v99);
            float v141 = (v140 - v52) * v92 + (v139 - v51) * v90;
            v142 = v175;
            if (v175 < v176)
            {
              float *v175 = v141;
              uint64_t v138 = (uint64_t)(v175 + 1);
              goto LABEL_83;
            }
            v143 = __p;
            uint64_t v144 = v175 - __p;
            unint64_t v145 = v144 + 1;
            if ((unint64_t)(v144 + 1) >> 62) {
              sub_1C494A220();
            }
            uint64_t v146 = (char *)v176 - (char *)__p;
            if (((char *)v176 - (char *)__p) >> 1 > v145) {
              unint64_t v145 = v146 >> 1;
            }
            if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v147 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v147 = v145;
            }
            if (v147)
            {
              if (v147 >> 62) {
                sub_1C4949AA8();
              }
              v148 = operator new(4 * v147);
              v149 = (float *)&v148[4 * v144];
              float *v149 = v141;
              uint64_t v138 = (uint64_t)(v149 + 1);
              int64_t v150 = (char *)v175 - (char *)__p;
              if (v175 == __p) {
                goto LABEL_103;
              }
LABEL_97:
              unint64_t v151 = v150 - 4;
              if (v151 < 0x2C) {
                goto LABEL_132;
              }
              if ((unint64_t)((char *)__p - v148) < 0x20) {
                goto LABEL_132;
              }
              uint64_t v152 = (v151 >> 2) + 1;
              uint64_t v153 = 4 * (v152 & 0x7FFFFFFFFFFFFFF8);
              v154 = &v175[v153 / 0xFFFFFFFFFFFFFFFCLL];
              v149 = (float *)((char *)v149 - v153);
              v155 = &v148[4 * v144 - 16];
              v156 = v175 - 4;
              uint64_t v157 = v152 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v158 = *(_OWORD *)v156;
                *(v155 - 1) = *((_OWORD *)v156 - 1);
                _OWORD *v155 = v158;
                v155 -= 2;
                v156 -= 8;
                v157 -= 8;
              }
              while (v157);
              v142 = v154;
              if (v152 != (v152 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_132:
                do
                {
                  int v159 = *((_DWORD *)v142-- - 1);
                  *((_DWORD *)v149-- - 1) = v159;
                }
                while (v142 != __p);
              }
              goto LABEL_103;
            }
            v148 = 0;
            v149 = (float *)(4 * v144);
            *(float *)(4 * v144) = v141;
            uint64_t v138 = 4 * v144 + 4;
            int64_t v150 = (char *)v175 - (char *)__p;
            if (v175 != __p) {
              goto LABEL_97;
            }
LABEL_103:
            __p = v149;
            v176 = (float *)&v148[4 * v147];
            if (v143) {
              operator delete(v143);
            }
LABEL_83:
            v175 = (float *)v138;
          }
          ++v132;
        }
      }
    }
    else if (v171 <= 0.0 || !v169)
    {
      goto LABEL_65;
    }
    int v123 = __p;
    if (__p != v174 && __p + 1 != v174)
    {
      float v128 = *__p;
      v129 = __p + 1;
      do
      {
        float v130 = *v129++;
        float v131 = v130;
        if (v130 < v128) {
          float v128 = v131;
        }
      }
      while (v129 != v174);
    }
    goto LABEL_78;
  }
  *(_DWORD *)(a1 + 36) = 0;

  return a1;
}

void sub_1C4A799DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id *a16, id *a17, void *a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void StraightLineRegressor::provideAnAnswer(void **this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void sub_1C4A79B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A79B94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A79FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A7A298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A7A6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A7A7D8(uint64_t result)
{
  if (result) {
    operator new();
  }
  return result;
}

void sub_1C4A7AB8C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8786460](v1, 0x1081C409227ACB4);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A7ABB0(uint64_t result)
{
  if (result) {
    operator new();
  }
  return result;
}

void sub_1C4A7B640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_1C4A7B6E8(void *a1, void *a2, void *a3, char a4, char a5, void *a6, double a7, double a8)
{
  v248[3] = *MEMORY[0x1E4F143B8];
  id v239 = a2;
  id v234 = a3;
  if (a1)
  {
    unint64_t v17 = objc_msgSend_featureCounts(a1, v12, v13, v14, v15, v16);
    uint64_t v22 = objc_msgSend_objectForKeyedSubscript_(v17, v18, (uint64_t)v234, v19, v20, v21);
    uint64_t v28 = objc_msgSend_integerValue(v22, v23, v24, v25, v26, v27);

    uint64_t v232 = objc_msgSend_pointCount(v239, v29, v30, v31, v32, v33);
    __p = 0;
    v242 = 0;
    v243 = 0;
    if (objc_msgSend_strokeCount(v239, v34, v35, v36, v37, v38))
    {
      unint64_t v49 = objc_msgSend_strokeCount(v239, v39, v40, v41, v42, v43) - 1;
      if (v49 > (v243 - (unsigned char *)__p) >> 3)
      {
        if (v49 >> 61) {
          sub_1C494A220();
        }
        float v50 = (char *)operator new(8 * v49);
        __p = &v50[(v242 - (unsigned char *)__p) & 0xFFFFFFFFFFFFFFF8];
        v242 = (char *)__p;
        v243 = &v50[8 * v49];
      }
      double v51 = 0;
      for (unint64_t i = 0; ; ++i)
      {
        if (i >= objc_msgSend_strokeCount(v239, v44, v45, v46, v47, v48) - 1) {
          goto LABEL_7;
        }
        uint64_t v194 = objc_msgSend_pointCountForStrokeIndex_(v239, v190, i, v191, v192, v193);
        if (i) {
          uint64_t v200 = v194;
        }
        else {
          uint64_t v200 = v194 + 1;
        }
        if (a5)
        {
          uint64_t v201 = objc_msgSend_sequenceCompression(a1, v195, v196, v197, v198, v199);
          uint64_t v207 = objc_msgSend_sequenceCompression(a1, v202, v203, v204, v205, v206);
          uint64_t v208 = v201 + v200 / v207 * v207 - v200;
        }
        else
        {
          uint64_t v208 = 0;
        }
        if (v208 == objc_msgSend_sequenceCompression(a1, v195, v196, v197, v198, v199)) {
          uint64_t v209 = 0;
        }
        else {
          uint64_t v209 = v208;
        }
        v210 = v242;
        v238 = v51;
        if (v242 < v243)
        {
          *(void *)v242 = v209;
          uint64_t v189 = (uint64_t)(v210 + 8);
          goto LABEL_39;
        }
        v211 = (char *)__p;
        int64_t v212 = v242 - (unsigned char *)__p;
        uint64_t v213 = (v242 - (unsigned char *)__p) >> 3;
        unint64_t v214 = v213 + 1;
        if ((unint64_t)(v213 + 1) >> 61) {
          sub_1C494A220();
        }
        uint64_t v215 = v243 - (unsigned char *)__p;
        if ((v243 - (unsigned char *)__p) >> 2 > v214) {
          unint64_t v214 = v215 >> 2;
        }
        unint64_t v216 = (unint64_t)v215 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v214;
        if (v216) {
          break;
        }
        v217 = 0;
        v218 = (char *)(8 * v213);
        *(void *)(8 * v213) = v209;
        uint64_t v189 = 8 * v213 + 8;
        int64_t v219 = v210 - v211;
        if (v210 != v211) {
          goto LABEL_62;
        }
LABEL_68:
        __p = v218;
        v243 = &v217[8 * v216];
        if (v211) {
          operator delete(v211);
        }
LABEL_39:
        v242 = (char *)v189;
        double v51 = &v238[v209];
      }
      if (v216 >> 61) {
        sub_1C4949AA8();
      }
      v217 = (char *)operator new(8 * v216);
      v218 = &v217[8 * v213];
      *(void *)v218 = v209;
      uint64_t v189 = (uint64_t)(v218 + 8);
      int64_t v219 = v210 - v211;
      if (v210 == v211) {
        goto LABEL_68;
      }
LABEL_62:
      unint64_t v220 = v219 - 8;
      if (v220 < 0x58) {
        goto LABEL_76;
      }
      if ((unint64_t)(v210 - v217 - v212) < 0x20) {
        goto LABEL_76;
      }
      uint64_t v221 = (v220 >> 3) + 1;
      uint64_t v222 = 8 * (v221 & 0x3FFFFFFFFFFFFFFCLL);
      v223 = &v210[-v222];
      v218 -= v222;
      v224 = &v217[8 * v213 - 16];
      v225 = v210 - 16;
      uint64_t v226 = v221 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v227 = *(_OWORD *)v225;
        *((_OWORD *)v224 - 1) = *((_OWORD *)v225 - 1);
        *(_OWORD *)v224 = v227;
        v224 -= 32;
        v225 -= 32;
        v226 -= 4;
      }
      while (v226);
      v210 = v223;
      if (v221 != (v221 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_76:
        do
        {
          uint64_t v228 = *((void *)v210 - 1);
          v210 -= 8;
          *((void *)v218 - 1) = v228;
          v218 -= 8;
        }
        while (v210 != v211);
      }
      goto LABEL_68;
    }
    double v51 = 0;
LABEL_7:
    id v52 = objc_alloc(MEMORY[0x1E4F1E9A8]);
    v248[0] = &unk_1F203E640;
    float v57 = objc_msgSend_numberWithInteger_(NSNumber, v53, (uint64_t)&v51[v232], v54, v55, v56);
    v248[1] = v57;
    uint64_t v63 = objc_msgSend_featureCounts(a1, v58, v59, v60, v61, v62);
    uint64_t v233 = (uint64_t)&v51[v232];
    uint64_t v68 = objc_msgSend_objectForKeyedSubscript_(v63, v64, (uint64_t)v234, v65, v66, v67);
    v248[2] = v68;
    uint64_t v72 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v69, (uint64_t)v248, 3, v70, v71);
    id v240 = 0;
    id v237 = (id)objc_msgSend_initWithShape_dataType_error_(v52, v73, (uint64_t)v72, 65568, (uint64_t)&v240, v74);
    id v236 = v240;

    if (v237)
    {
      id v75 = v237;
      uint64_t v81 = (float *)objc_msgSend_dataPointer(v75, v76, v77, v78, v79, v80);
      v231 = v75;
      objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v82, v83, v84, v85, v86);
      double v92 = (NSIndexSet *)objc_claimAutoreleasedReturnValue();
      uint64_t v93 = 0;
      for (unint64_t j = 0; j < objc_msgSend_strokeCount(v239, v87, v88, v89, v90, v91); ++j)
      {
        unint64_t v100 = 0;
        unint64_t v101 = j - 1;
        while (v100 < objc_msgSend_pointCountForStrokeIndex_(v239, v95, j, v97, v98, v99))
        {
          objc_msgSend_pointForStrokeIndex_pointIndex_(v239, v87, j, v100, v90, v91);
          double v103 = v102;
          double v105 = v104;
          double v106 = v102 - a7;
          double v107 = v104 - a8;
          long double v113 = atan2(v104 - a8, v106);
          if (j && !v100 && *((uint64_t *)__p + v101) >= 1)
          {
            uint64_t v114 = 0;
            uint64_t v115 = v28 * v93;
            do
            {
              v81[v115 + objc_msgSend_distanceFeatureIndex(a1, v108, v109, v110, v111, v112)] = 0.0;
              v81[v115 + objc_msgSend_sinAlphaFeatureIndex(a1, v116, v117, v118, v119, v120)] = 0.0;
              v81[v115 + objc_msgSend_cosAlphaFeatureIndex(a1, v121, v122, v123, v124, v125)] = 0.0;
              v81[v115 + objc_msgSend_gapFeatureIndex(a1, v126, v127, v128, v129, v130)] = 0.0;
              objc_msgSend_addIndex_(v92, v131, v93 + v114++, v132, v133, v134);
              v115 += v28;
            }
            while (v114 < *((void *)__p + v101));
            v93 += v114;
          }
          uint64_t v135 = objc_msgSend_distanceFeatureIndex(a1, v108, v109, v110, v111, v112);
          uint64_t v136 = v93 * v28;
          float v137 = sqrt(v107 * v107 + v106 * v106);
          v81[v93 * v28 + v135] = v137;
          uint64_t v143 = objc_msgSend_sinAlphaFeatureIndex(a1, v138, v139, v140, v141, v142);
          float v144 = sin(v113);
          v81[v143 + v136] = v144;
          uint64_t v150 = objc_msgSend_cosAlphaFeatureIndex(a1, v145, v146, v147, v148, v149);
          float v151 = cos(v113);
          v81[v150 + v136] = v151;
          uint64_t v157 = objc_msgSend_gapFeatureIndex(a1, v152, v153, v154, v155, v156);
          if (v100) {
            float v158 = 0.0;
          }
          else {
            float v158 = 1.0;
          }
          v81[v157 + v136] = v158;
          ++v93;
          ++v100;
          a8 = v105;
          a7 = v103;
        }
      }
      if (a4)
      {
        uint64_t v159 = objc_msgSend_distanceFeatureIndex(a1, v95, v96, v97, v98, v99);
        objc_msgSend_distMean(a1, v160, v161, v162, v163, v164);
        double v166 = v165;
        objc_msgSend_distStd(a1, v167, v168, v169, v170, v171);
        normalizeFeature(v81, v233, v28, v159, v166, v172, v92);
      }
      id v173 = v231;
    }
    else
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      v174 = (id)qword_1EA3C9F98;
      if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
      {
        v180 = objc_msgSend_modelName(a1, v175, v176, v177, v178, v179);
        v186 = objc_msgSend_localizedDescription(v236, v181, v182, v183, v184, v185);
        *(_DWORD *)buf = 138412546;
        v245 = v180;
        __int16 v246 = 2112;
        v247 = v186;
        _os_log_impl(&dword_1C492D000, v174, OS_LOG_TYPE_ERROR, "An error occurred when trying to allocate feature array for the %@ model: %@", buf, 0x16u);
      }
      if (a6) {
        *a6 = v236;
      }
    }

    if (__p)
    {
      v242 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    id v237 = 0;
  }

  return v237;
}

void sub_1C4A7BEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id sub_1C4A7BFB0(void *a1, void *a2)
{
  v45[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (a1)
  {
    id v4 = objc_alloc(MEMORY[0x1E4F1E930]);
    int v10 = objc_msgSend_inputNames(a1, v5, v6, v7, v8, v9);
    uint64_t v16 = objc_msgSend_firstObject(v10, v11, v12, v13, v14, v15);
    float v44 = v16;
    v45[0] = v3;
    uint64_t v19 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v17, (uint64_t)v45, (uint64_t)&v44, 1, v18);
    id v39 = 0;
    uint64_t v23 = objc_msgSend_initWithDictionary_error_(v4, v20, (uint64_t)v19, (uint64_t)&v39, v21, v22);
    id v24 = v39;

    if (!v23)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v25 = (id)qword_1EA3C9F98;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        uint64_t v31 = objc_msgSend_modelName(a1, v26, v27, v28, v29, v30);
        uint64_t v37 = objc_msgSend_localizedDescription(v24, v32, v33, v34, v35, v36);
        *(_DWORD *)buf = 138412546;
        uint64_t v41 = v31;
        __int16 v42 = 2112;
        uint64_t v43 = v37;
        _os_log_impl(&dword_1C492D000, v25, OS_LOG_TYPE_ERROR, "An error occurred when trying to create feature provider for the %@ model: %@", buf, 0x16u);
      }
    }
  }
  else
  {
    uint64_t v23 = 0;
  }

  return v23;
}

void sub_1C4A7C180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A7E53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,_Unwind_Exception *exception_objecta,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  _Unwind_Resume(a1);
}

void sub_1C4A7EB94(uint64_t a1)
{
  v50[3] = *MEMORY[0x1E4F143B8];
  id v2 = objc_alloc(MEMORY[0x1E4F1E9A8]);
  v50[0] = &unk_1F203E640;
  v50[1] = &unk_1F203E640;
  uint64_t v8 = objc_msgSend_featureCounts(*(void **)(a1 + 32), v3, v4, v5, v6, v7);
  uint64_t v14 = objc_msgSend_directionalFeaturesInputName(*(void **)(a1 + 32), v9, v10, v11, v12, v13);
  uint64_t v19 = objc_msgSend_objectForKeyedSubscript_(v8, v15, (uint64_t)v14, v16, v17, v18);
  v50[2] = v19;
  uint64_t v23 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v20, (uint64_t)v50, 3, v21, v22);
  uint64_t v26 = objc_msgSend_initWithShape_dataType_error_(v2, v24, (uint64_t)v23, 65568, 0, v25);

  id v27 = objc_alloc(MEMORY[0x1E4F1E930]);
  uint64_t v33 = objc_msgSend_inputNames(*(void **)(a1 + 32), v28, v29, v30, v31, v32);
  id v39 = objc_msgSend_firstObject(v33, v34, v35, v36, v37, v38);
  uint64_t v48 = v39;
  unint64_t v49 = v26;
  __int16 v42 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v40, (uint64_t)&v49, (uint64_t)&v48, 1, v41);
  uint64_t v46 = objc_msgSend_initWithDictionary_error_(v27, v43, (uint64_t)v42, 0, v44, v45);
  uint64_t v47 = (void *)qword_1EA3C8FC0;
  qword_1EA3C8FC0 = v46;
}

void sub_1C4A7ED18(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4A7EFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A7EFFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A7F058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A7F198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v12 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A7F1C8(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, unint64_t a5, BOOL *a6, unsigned char *a7)
{
  if (!a3) {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
  }
  double v11 = expf(*a4);
  *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *(double *)(*(void *)(*(void *)(a1 + 48) + 8)
                                                                          + 24)
                                                              + v11;
  uint64_t v17 = objc_msgSend_codeMap(*(void **)(a1 + 32), v12, v13, v14, v15, v16);
  uint64_t v18 = (unsigned int *)CHCodeMap::operator[](v17, a5);
  uint64_t result = objc_msgSend_longCharacterIsMember_(*(void **)(a1 + 40), v19, *v18, v20, v21, v22);
  if (result)
  {
    double v24 = *(double *)(a1 + 64);
    if (v24 <= v11)
    {
      *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v24;
      *a7 = 1;
    }
  }
  *a6 = 1.0 - *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) < *(double *)(a1 + 64);
  return result;
}

void sub_1C4A7F3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

int *sub_1C4A7F3DC(uint64_t a1, const char *a2, uint64_t a3, float *a4, unint64_t a5, BOOL *a6)
{
  uint64_t result = (int *)objc_msgSend_blankIndex(*(void **)(a1 + 32), a2, a3, (uint64_t)a4, a5, (uint64_t)a6);
  if (result != (int *)a5)
  {
    uint64_t result = (int *)objc_msgSend_spaceIndex(*(void **)(a1 + 32), v12, v13, v14, v15, v16);
    if (result != (int *)a5)
    {
      uint64_t result = (int *)objc_msgSend_pseudospaceIndex(*(void **)(a1 + 32), v17, v18, v19, v20, v21);
      if (result != (int *)a5)
      {
        if (!a3) {
          *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
        }
        double v22 = expf(*a4);
        *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(double *)(*(void *)(*(void *)(a1 + 40) + 8)
                                                                                + 24)
                                                                    + v22;
        uint64_t v28 = objc_msgSend_codeMap(*(void **)(a1 + 32), v23, v24, v25, v26, v27);
        uint64_t result = (int *)CHCodeMap::operator[](v28, a5);
        uint64_t v29 = *(void *)(*(void *)(a1 + 48) + 8);
        double v30 = *(double *)(v29 + 24);
        if (v30 <= v22)
        {
          int v31 = *result;
          *(double *)(v29 + 24) = v22;
          *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v31;
          double v30 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
        }
        *a6 = 1.0 - *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) < v30;
      }
    }
  }
  return result;
}

void sub_1C4A7F708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  _Block_object_dispose(&a26, 8);
  if (__p)
  {
    a33 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v36 - 144), 8);
  _Block_object_dispose((const void *)(v36 - 112), 8);

  _Unwind_Resume(a1);
}

__n128 sub_1C4A7F784(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1C4A7F7A8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1C4A7F7C0(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, unint64_t a5)
{
  if (!a3)
  {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
  }
  float v9 = expf(*a4);
  uint64_t v15 = objc_msgSend_codeMap(*(void **)(a1 + 32), v10, v11, v12, v13, v14);
  uint64_t v16 = (unsigned int *)CHCodeMap::operator[](v15, a5);
  char IsMember = objc_msgSend_longCharacterIsMember_(*(void **)(a1 + 40), v17, *v16, v18, v19, v20);
  double v22 = *(void **)(a1 + 32);
  uint64_t v23 = v22[22];
  uint64_t v24 = v22[20];
  uint64_t v25 = v22[21];
  BOOL v27 = v24 == a5 || v25 == a5 || v23 == a5;
  if (!v27 && (IsMember & 1) == 0) {
    *a4 = -126.0;
  }
  if (v24 == a5)
  {
    uint64_t v28 = *(void *)(a1 + 56);
  }
  else
  {
    if (v25 == a5) {
      char v29 = 1;
    }
    else {
      char v29 = IsMember;
    }
    if ((v29 & 1) == 0 && v23 != a5)
    {
      if (*(void *)(a1 + 72) - 1 == a3) {
        goto LABEL_23;
      }
      return;
    }
    uint64_t v28 = *(void *)(a1 + 48);
  }
  *(double *)(*(void *)(v28 + 8) + 24) = *(double *)(*(void *)(v28 + 8) + 24) + v9;
  if (*(void *)(a1 + 72) - 1 == a3)
  {
LABEL_23:
    double v30 = log(*(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)/ (1.0 - *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)));
    double v31 = v30;
    uint64_t v32 = *(void **)(*(void *)(a1 + 64) + 8);
    uint64_t v34 = (double *)v32[7];
    unint64_t v33 = v32[8];
    if ((unint64_t)v34 < v33)
    {
      double *v34 = v30;
      uint64_t v35 = (uint64_t)(v34 + 1);
LABEL_44:
      v32[7] = v35;
      return;
    }
    uint64_t v36 = (double *)v32[6];
    uint64_t v37 = v34 - v36;
    unint64_t v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 61) {
      sub_1C494A220();
    }
    uint64_t v39 = v33 - (void)v36;
    if (v39 >> 2 > v38) {
      unint64_t v38 = v39 >> 2;
    }
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v40 = v38;
    }
    if (v40)
    {
      if (v40 >> 61) {
        sub_1C4949AA8();
      }
      uint64_t v41 = operator new(8 * v40);
      __int16 v42 = (double *)&v41[8 * v37];
      uint64_t v43 = &v41[8 * v40];
      *__int16 v42 = v31;
      uint64_t v35 = (uint64_t)(v42 + 1);
      int64_t v44 = (char *)v34 - (char *)v36;
      if (v34 == v36) {
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v41 = 0;
      __int16 v42 = (double *)(8 * v37);
      uint64_t v43 = 0;
      *(double *)(8 * v37) = v30;
      uint64_t v35 = 8 * v37 + 8;
      int64_t v44 = (char *)v34 - (char *)v36;
      if (v34 == v36)
      {
LABEL_42:
        v32[6] = v42;
        v32[7] = v35;
        v32[8] = v43;
        if (v36) {
          operator delete(v36);
        }
        goto LABEL_44;
      }
    }
    unint64_t v45 = v44 - 8;
    if (v45 < 0x58) {
      goto LABEL_49;
    }
    if ((unint64_t)((char *)v36 - v41) < 0x20) {
      goto LABEL_49;
    }
    uint64_t v46 = (v45 >> 3) + 1;
    uint64_t v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v48 = &v34[v47 / 0xFFFFFFFFFFFFFFF8];
    __int16 v42 = (double *)((char *)v42 - v47);
    unint64_t v49 = &v41[8 * v37 - 16];
    float v50 = v34 - 2;
    uint64_t v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v52 = *(_OWORD *)v50;
      *(v49 - 1) = *((_OWORD *)v50 - 1);
      *unint64_t v49 = v52;
      v49 -= 2;
      v50 -= 4;
      v51 -= 4;
    }
    while (v51);
    uint64_t v34 = v48;
    if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_49:
      do
      {
        uint64_t v53 = *((void *)v34-- - 1);
        *((void *)v42-- - 1) = v53;
      }
      while (v34 != v36);
    }
    goto LABEL_42;
  }
}

float sub_1C4A7FA60(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, uint64_t a5)
{
  if (*(void *)(*(void *)(a1 + 32) + 160) != a5)
  {
    float result = *a4 - *(double *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 48) + 8 * a2);
    *a4 = result;
  }
  return result;
}

void sub_1C4A80190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A801F0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void **)(a1 + 32);
  id v11 = (id)objc_msgSend_copy(a2, (const char *)a2, a3, a4, a5, a6);
  objc_msgSend_addObject_(v6, v7, (uint64_t)v11, v8, v9, v10);
}

void sub_1C4A80244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A80354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A80440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A80640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A80668(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v769 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v751 = a3;
  self;
  uint64_t v13 = objc_msgSend_count(v7, v8, v9, v10, v11, v12);
  if (v13 != objc_msgSend_count(v751, v14, v15, v16, v17, v18))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v24 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = objc_msgSend_count(v7, v25, v26, v27, v28, v29);
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = objc_msgSend_count(v751, v30, v31, v32, v33, v34);
      _os_log_impl(&dword_1C492D000, v24, OS_LOG_TYPE_FAULT, "transcriptionPaths count (%ld) != probabilities count (%ld)", buf, 0x16u);
    }
  }
  v742 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v19, v20, v21, v22, v23);
  v743 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v35, v36, v37, v38, v39);
  unint64_t v45 = 0;
  v745 = 0;
  uint64_t v46 = 0x7FFFFFFFFFFFFFFFLL;
  while (v45 < objc_msgSend_count(v7, v40, v41, v42, v43, v44))
  {
    uint64_t v51 = objc_msgSend_objectAtIndexedSubscript_(v7, v47, v45, v48, v49, v50);
    BOOL v57 = objc_msgSend_count(v51, v52, v53, v54, v55, v56) == 0;

    if (v57)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v63 = (id)qword_1EA3C9F98;
      if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&uint8_t buf[4] = v45;
        _os_log_impl(&dword_1C492D000, v63, OS_LOG_TYPE_ERROR, "Skipping path with no tokens at index %lu when initializing tokenized text result. ", buf, 0xCu);
      }
    }
    else
    {
      if (v46 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v46 = v45;
      }
      uint64_t v63 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v58, v59, v60, v61, v62);
      long long v760 = 0u;
      long long v761 = 0u;
      long long v758 = 0u;
      long long v759 = 0u;
      uint64_t v68 = objc_msgSend_objectAtIndexedSubscript_(v7, v64, v45, v65, v66, v67);
      uint64_t v76 = objc_msgSend_countByEnumeratingWithState_objects_count_(v68, v69, (uint64_t)&v758, (uint64_t)v768, 16, v70);
      if (v76)
      {
        uint64_t v77 = *(void *)v759;
        do
        {
          for (uint64_t i = 0; i != v76; ++i)
          {
            if (*(void *)v759 != v77) {
              objc_enumerationMutation(v68);
            }
            uint64_t v79 = objc_msgSend_strokeIndexes(*(void **)(*((void *)&v758 + 1) + 8 * i), v71, v72, v73, v74, v75);
            objc_msgSend_addIndexes_(v63, v80, (uint64_t)v79, v81, v82, v83);
          }
          uint64_t v76 = objc_msgSend_countByEnumeratingWithState_objects_count_(v68, v71, (uint64_t)&v758, (uint64_t)v768, 16, v75);
        }
        while (v76);
      }

      if (v45 == v46)
      {
        uint64_t v88 = v63;

        uint64_t v93 = objc_msgSend_objectAtIndexedSubscript_(v7, v89, v45, v90, v91, v92);
        objc_msgSend_addObject_(v742, v94, (uint64_t)v93, v95, v96, v97);

        double v102 = objc_msgSend_objectAtIndexedSubscript_(v751, v98, v45, v99, v100, v101);
        objc_msgSend_addObject_(v743, v103, (uint64_t)v102, v104, v105, v106);
        v745 = v88;
      }
      else if (objc_msgSend_isEqualToIndexSet_(v63, v84, (uint64_t)v745, v85, v86, v87))
      {
        uint64_t v111 = objc_msgSend_objectAtIndexedSubscript_(v7, v107, v45, v108, v109, v110);
        objc_msgSend_addObject_(v742, v112, (uint64_t)v111, v113, v114, v115);

        double v102 = objc_msgSend_objectAtIndexedSubscript_(v751, v116, v45, v117, v118, v119);
        objc_msgSend_addObject_(v743, v120, (uint64_t)v102, v121, v122, v123);
      }
      else
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        double v102 = (id)qword_1EA3C9F98;
        if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          *(void *)&uint8_t buf[4] = v45;
          _os_log_impl(&dword_1C492D000, v102, OS_LOG_TYPE_ERROR, "Skipping path at index %lu which doesn't cover the same strokes as the top path when initializing tokenized text result.", buf, 0xCu);
        }
      }
    }
    ++v45;
  }
  id v753 = v742;

  id v741 = v743;
  if (!objc_msgSend_count(v753, v124, v125, v126, v127, v128))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v154 = (id)qword_1EA3C9F98;
    if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C492D000, v154, OS_LOG_TYPE_ERROR, "Found no valid token paths when initializing tokenized text result.", buf, 2u);
    }
    goto LABEL_150;
  }
  v748 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v129, v130, v131, v132, v133);
  v746 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v134, v135, v136, v137, v138);
  unint64_t v144 = objc_msgSend_count(v753, v139, v140, v141, v142, v143);
  unint64_t v150 = v144;
  memset(buf, 0, sizeof(buf));
  if (v144)
  {
    if (v144 >> 61) {
      sub_1C494A220();
    }
    size_t v151 = 8 * v144;
    uint64_t v152 = (char *)operator new(8 * v144);
    uint64_t v153 = &v152[8 * v150];
    *(void *)buf = v152;
    *(void *)&buf[16] = v153;
    bzero(v152, v151);
    *(void *)&buf[8] = v153;
  }
  v747 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v145, v146, v147, v148, v149);
  v752 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v155, v156, v157, v158, v159);
  for (unint64_t j = 0; j < objc_msgSend_count(v753, v160, v161, v162, v163, v164); ++j)
  {
    uint64_t v171 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v166, v167, v168, v169, v170);
    objc_msgSend_addObject_(v752, v172, (uint64_t)v171, v173, v174, v175);

    v181 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v176, v177, v178, v179, v180);
    objc_msgSend_addObject_(v747, v182, (uint64_t)v181, v183, v184, v185);
  }
  v750 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v166, v167, v168, v169, v170);
  v749 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v186, v187, v188, v189, v190);
LABEL_45:
  uint64_t v201 = objc_msgSend_copy(v750, v191, v192, v193, v194, v195);
  for (unint64_t k = 0; k < objc_msgSend_count(v753, v196, v197, v198, v199, v200); ++k)
  {
    uint64_t v208 = objc_msgSend_objectAtIndexedSubscript_(v747, v203, k, v205, v206, v207);
    unint64_t v214 = objc_msgSend_mutableCopy(v749, v209, v210, v211, v212, v213);
    objc_msgSend_removeIndexes_(v214, v215, (uint64_t)v208, v216, v217, v218);
    uint64_t v219 = *(void *)buf;
    unint64_t v220 = *(void *)(*(void *)buf + 8 * k);
    v225 = objc_msgSend_objectAtIndexedSubscript_(v753, v221, k, v222, v223, v224);
    if (v220 < objc_msgSend_count(v225, v226, v227, v228, v229, v230))
    {
      v235 = objc_msgSend_objectAtIndexedSubscript_(v753, v231, k, v232, v233, v234);
      id v240 = objc_msgSend_objectAtIndexedSubscript_(v235, v236, v220, v237, v238, v239);

      if (!v240) {
        goto LABEL_57;
      }
      while (1)
      {
        if (objc_msgSend_count(v208, v241, v242, v243, v244, v245))
        {
          if (!objc_msgSend_count(v214, v246, v247, v248, v249, v250))
          {
            v252 = objc_msgSend_strokeIndexes(v240, v246, v251, v248, v249, v250);
            int v257 = objc_msgSend_ch_intersectsIndexSet_(v252, v253, (uint64_t)v750, v254, v255, v256);

            if (!v257) {
              break;
            }
          }
        }
        v258 = objc_msgSend_objectAtIndexedSubscript_(v752, v246, k, v248, v249, v250);
        objc_msgSend_addObject_(v258, v259, (uint64_t)v240, v260, v261, v262);

        v268 = objc_msgSend_strokeIndexes(v240, v263, v264, v265, v266, v267);
        objc_msgSend_addIndexes_(v208, v269, (uint64_t)v268, v270, v271, v272);

        v278 = objc_msgSend_strokeIndexes(v240, v273, v274, v275, v276, v277);
        objc_msgSend_addIndexes_(v749, v279, (uint64_t)v278, v280, v281, v282);

        v288 = objc_msgSend_strokeIndexes(v240, v283, v284, v285, v286, v287);
        objc_msgSend_addIndexes_(v750, v289, (uint64_t)v288, v290, v291, v292);

        v298 = objc_msgSend_strokeIndexes(v240, v293, v294, v295, v296, v297);
        objc_msgSend_removeIndexes_(v214, v299, (uint64_t)v298, v300, v301, v302);

        unint64_t v303 = *(void *)(v219 + 8 * k) + 1;
        *(void *)(v219 + 8 * k) = v303;
        v225 = objc_msgSend_objectAtIndexedSubscript_(v753, v304, k, v305, v306, v307);
        if (v303 >= objc_msgSend_count(v225, v308, v309, v310, v311, v312))
        {

          goto LABEL_56;
        }
        v317 = objc_msgSend_objectAtIndexedSubscript_(v753, v313, k, v314, v315, v316);
        uint64_t v322 = objc_msgSend_objectAtIndexedSubscript_(v317, v318, v303, v319, v320, v321);

        id v240 = (void *)v322;
        if (!v322)
        {
          v225 = 0;
          goto LABEL_56;
        }
      }
      v225 = v240;
    }
LABEL_56:

LABEL_57:
  }
  unint64_t v323 = 0;
  while (v323 < objc_msgSend_count(v753, v203, v204, v205, v206, v207))
  {
    uint64_t v328 = objc_msgSend_objectAtIndexedSubscript_(v747, v324, v323, v325, v326, v327);
    v334 = objc_msgSend_mutableCopy((void *)v328, v329, v330, v331, v332, v333);

    objc_msgSend_addIndexes_(v334, v335, (uint64_t)v201, v336, v337, v338);
    LOBYTE(v328) = objc_msgSend_isEqualToIndexSet_(v334, v339, (uint64_t)v750, v340, v341, v342);

    ++v323;
    if ((v328 & 1) == 0)
    {
LABEL_84:

      goto LABEL_45;
    }
  }

  uint64_t v201 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v343, v344, v345, v346, v347);
  for (unint64_t m = 0; m < objc_msgSend_count(v752, v348, v349, v350, v351, v352); ++m)
  {
    v358 = objc_msgSend_objectAtIndexedSubscript_(v752, v354, m, v355, v356, v357);
    if (!objc_msgSend_count(v358, v359, v360, v361, v362, v363))
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      v369 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v369, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)v763 = 0;
        _os_log_impl(&dword_1C492D000, v369, OS_LOG_TYPE_FAULT, "Found empty row when creating result with best path tokens. It indicates that the given paths don't cover the same strokes.", v763, 2u);
      }
    }
    uint64_t v370 = objc_msgSend_count(v201, v364, v365, v366, v367, v368);
    if (objc_msgSend_count(v358, v371, v372, v373, v374, v375))
    {
      v381 = objc_opt_class();
      uint64_t v370 = objc_msgSend_mergeTokenRow_intoUniqueRows_(v381, v382, (uint64_t)v358, (uint64_t)v201, v383, v384);
    }
    if (objc_msgSend_count(v746, v376, v377, v378, v379, v380) <= m)
    {
      v389 = objc_msgSend_indexPathWithIndex_(MEMORY[0x1E4F28D58], v385, v370, v386, v387, v388);
      objc_msgSend_addObject_(v746, v398, (uint64_t)v389, v399, v400, v401);
    }
    else
    {
      v389 = objc_msgSend_objectAtIndexedSubscript_(v746, v385, m, v386, v387, v388);
      v394 = objc_msgSend_indexPathByAddingIndex_(v389, v390, v370, v391, v392, v393);
      objc_msgSend_setObject_atIndexedSubscript_(v746, v395, (uint64_t)v394, m, v396, v397);
    }
  }
  v402 = [CHTokenizedResultColumn alloc];
  v407 = objc_msgSend_initWithTokenRows_(v402, v403, (uint64_t)v201, v404, v405, v406);
  objc_msgSend_addObject_(v748, v408, (uint64_t)v407, v409, v410, v411);
  objc_msgSend_removeAllIndexes(v749, v412, v413, v414, v415, v416);
  for (unint64_t n = 0; n < objc_msgSend_count(v753, v417, v418, v419, v420, v421); ++n)
  {
    v428 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v423, v424, v425, v426, v427);
    objc_msgSend_setObject_atIndexedSubscript_(v752, v429, (uint64_t)v428, n, v430, v431);

    v436 = objc_msgSend_objectAtIndexedSubscript_(v747, v432, n, v433, v434, v435);
    objc_msgSend_removeAllIndexes(v436, v437, v438, v439, v440, v441);
  }
  unint64_t v442 = 0;
  while (v442 < objc_msgSend_count(v753, v423, v424, v425, v426, v427))
  {
    uint64_t v447 = *(void *)(*(void *)buf + 8 * v442);
    v448 = objc_msgSend_objectAtIndexedSubscript_(v753, v443, v442, v444, v445, v446);
    LOBYTE(v447) = v447 == objc_msgSend_count(v448, v449, v450, v451, v452, v453);

    ++v442;
    if ((v447 & 1) == 0)
    {

      goto LABEL_84;
    }
  }

  uint64_t v459 = objc_msgSend_count(v746, v454, v455, v456, v457, v458);
  if (v459 != objc_msgSend_count(v741, v460, v461, v462, v463, v464))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    v470 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v470, OS_LOG_TYPE_FAULT))
    {
      uint64_t v476 = objc_msgSend_count(v746, v471, v472, v473, v474, v475);
      uint64_t v482 = objc_msgSend_count(v741, v477, v478, v479, v480, v481);
      *(_DWORD *)v763 = 134218240;
      uint64_t v764 = v476;
      __int16 v765 = 2048;
      uint64_t v766 = v482;
      _os_log_impl(&dword_1C492D000, v470, OS_LOG_TYPE_FAULT, "transcriptionPaths count (%ld) != probabilities count (%ld) after tokenized result is built", v763, 0x16u);
    }
  }
  v483 = (void *)MEMORY[0x1E4F1CA48];
  v484 = objc_msgSend_firstObject(v746, v465, v466, v467, v468, v469);
  v489 = objc_msgSend_arrayWithObject_(v483, v485, (uint64_t)v484, v486, v487, v488);

  v490 = (void *)MEMORY[0x1E4F1CA48];
  v496 = objc_msgSend_firstObject(v741, v491, v492, v493, v494, v495);
  objc_msgSend_arrayWithObject_(v490, v497, (uint64_t)v496, v498, v499, v500);
  id v740 = (id)objc_claimAutoreleasedReturnValue();

  for (iuint64_t i = 1; ii < objc_msgSend_count(v746, v501, v502, v503, v504, v505); ++ii)
  {
    v512 = objc_msgSend_objectAtIndexedSubscript_(v746, v507, ii, v509, v510, v511);
    char v517 = objc_msgSend_containsObject_(v489, v513, (uint64_t)v512, v514, v515, v516);

    if ((v517 & 1) == 0)
    {
      v518 = objc_msgSend_objectAtIndexedSubscript_(v746, v501, ii, v503, v504, v505);
      objc_msgSend_addObject_(v489, v519, (uint64_t)v518, v520, v521, v522);

      v527 = objc_msgSend_objectAtIndexedSubscript_(v741, v523, ii, v524, v525, v526);
      objc_msgSend_addObject_(v740, v528, (uint64_t)v527, v529, v530, v531);
    }
  }
  v739 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v507, v508, v509, v510, v511);
  v738 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v532, v533, v534, v535, v536);
  for (junint64_t j = 0; jj < objc_msgSend_count(v489, v537, v538, v539, v540, v541); ++jj)
  {
    v546 = objc_msgSend_objectAtIndexedSubscript_(v489, v542, jj, v543, v544, v545);
    v557 = objc_msgSend_string(MEMORY[0x1E4F28E78], v547, v548, v549, v550, v551);
    for (kunint64_t k = 0; kk < objc_msgSend_count(v748, v552, v553, v554, v555, v556); ++kk)
    {
      v563 = objc_msgSend_objectAtIndexedSubscript_(v748, v559, kk, v560, v561, v562);
      v569 = objc_msgSend_textTokenRows(v563, v564, v565, v566, v567, v568);
      uint64_t v574 = objc_msgSend_indexAtPosition_(v546, v570, kk, v571, v572, v573);
      v579 = objc_msgSend_objectAtIndexedSubscript_(v569, v575, v574, v576, v577, v578);

      long long v756 = 0u;
      long long v757 = 0u;
      long long v754 = 0u;
      long long v755 = 0u;
      id v580 = v579;
      uint64_t v588 = objc_msgSend_countByEnumeratingWithState_objects_count_(v580, v581, (uint64_t)&v754, (uint64_t)v762, 16, v582);
      if (v588)
      {
        uint64_t v589 = *(void *)v755;
        do
        {
          for (munint64_t m = 0; mm != v588; ++mm)
          {
            if (*(void *)v755 != v589) {
              objc_enumerationMutation(v580);
            }
            v591 = *(void **)(*((void *)&v754 + 1) + 8 * mm);
            if ((objc_msgSend_properties(v591, v583, v584, v585, v586, v587) & 0x20) != 0) {
              objc_msgSend_appendString_(v557, v592, @" ", v594, v595, v596);
            }
            v597 = objc_msgSend_string(v591, v592, v593, v594, v595, v596);
            objc_msgSend_appendString_(v557, v598, (uint64_t)v597, v599, v600, v601);
          }
          uint64_t v588 = objc_msgSend_countByEnumeratingWithState_objects_count_(v580, v583, (uint64_t)&v754, (uint64_t)v762, 16, v587);
        }
        while (v588);
      }
    }
    if (objc_msgSend_containsObject_(v739, v559, (uint64_t)v557, v560, v561, v562)) {
      objc_msgSend_addIndex_(v738, v602, jj, v603, v604, v605);
    }
    else {
      objc_msgSend_addObject_(v739, v602, (uint64_t)v557, v603, v604, v605);
    }
  }
  if (objc_msgSend_count(v738, v542, jj, v543, v544, v545))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    v606 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v606, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v763 = 0;
      _os_log_impl(&dword_1C492D000, v606, OS_LOG_TYPE_DEBUG, "Found different segmentation leading to the same transcription. Deduping keeping the transcription path closer to the top.", v763, 2u);
    }

    objc_msgSend_removeObjectsAtIndexes_(v489, v607, (uint64_t)v738, v608, v609, v610);
    objc_msgSend_removeObjectsAtIndexes_(v740, v611, (uint64_t)v738, v612, v613, v614);
    uint64_t v154 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v615, v616, v617, v618, v619);
    v630 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v620, v621, v622, v623, v624);
    for (nunint64_t n = 0; nn < objc_msgSend_count(v748, v625, v626, v627, v628, v629); ++nn)
    {
      v636 = objc_msgSend_objectAtIndexedSubscript_(v748, v632, nn, v633, v634, v635);
      v647 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v637, v638, v639, v640, v641);
      for (unint64_t i1 = 0; ; ++i1)
      {
        v649 = objc_msgSend_textTokenRows(v636, v642, v643, v644, v645, v646);
        BOOL v655 = i1 < objc_msgSend_count(v649, v650, v651, v652, v653, v654);

        if (!v655) {
          break;
        }
        unint64_t v656 = 0;
        while (v656 < objc_msgSend_count(v489, v642, v643, v644, v645, v646))
        {
          v661 = objc_msgSend_objectAtIndexedSubscript_(v489, v657, v656, v658, v659, v660);
          BOOL v666 = objc_msgSend_indexAtPosition_(v661, v662, nn, v663, v664, v665) == i1;

          ++v656;
          if (v666) {
            goto LABEL_123;
          }
        }
        objc_msgSend_addIndex_(v647, v657, i1, v658, v659, v660);
LABEL_123:
        ;
      }
      for (unint64_t i2 = 0; i2 < objc_msgSend_count(v489, v642, v643, v644, v645, v646); ++i2)
      {
        v673 = objc_msgSend_objectAtIndexedSubscript_(v489, v668, i2, v670, v671, v672);
        uint64_t v678 = objc_msgSend_indexAtPosition_(v673, v674, nn, v675, v676, v677);

        uint64_t v691 = v678 - objc_msgSend_countOfIndexesInRange_(v647, v679, 0, v678, v680, v681);
        if (objc_msgSend_count(v630, v682, v683, v684, v685, v686) <= i2)
        {
          v692 = objc_msgSend_indexPathWithIndex_(MEMORY[0x1E4F28D58], v687, v691, v688, v689, v690);
          objc_msgSend_addObject_(v630, v701, (uint64_t)v692, v702, v703, v704);
        }
        else
        {
          v692 = objc_msgSend_objectAtIndexedSubscript_(v630, v687, i2, v688, v689, v690);
          v697 = objc_msgSend_indexPathByAddingIndex_(v692, v693, v691, v694, v695, v696);
          objc_msgSend_setObject_atIndexedSubscript_(v630, v698, (uint64_t)v697, i2, v699, v700);
        }
      }
      if (objc_msgSend_count(v647, v668, v669, v670, v671, v672))
      {
        v710 = objc_msgSend_textTokenRows(v636, v705, v706, v707, v708, v709);
        v716 = objc_msgSend_mutableCopy(v710, v711, v712, v713, v714, v715);

        objc_msgSend_removeObjectsAtIndexes_(v716, v717, (uint64_t)v647, v718, v719, v720);
        v721 = [CHTokenizedResultColumn alloc];
        v726 = objc_msgSend_initWithTokenRows_(v721, v722, (uint64_t)v716, v723, v724, v725);
        objc_msgSend_addObject_(v154, v727, (uint64_t)v726, v728, v729, v730);
      }
      else
      {
        v716 = objc_msgSend_objectAtIndexedSubscript_(v748, v705, nn, v707, v708, v709);
        objc_msgSend_addObject_(v154, v731, (uint64_t)v716, v732, v733, v734);
      }
    }
    if (a4)
    {
LABEL_140:
      *a4 = v154;
      if (!a5) {
        goto LABEL_141;
      }
LABEL_145:
      *a5 = v630;
      if (a6) {
        goto LABEL_146;
      }
      goto LABEL_147;
    }
  }
  else
  {
    v630 = v489;
    uint64_t v154 = v748;
    if (a4) {
      goto LABEL_140;
    }
  }
  if (a5) {
    goto LABEL_145;
  }
LABEL_141:
  if (a6) {
LABEL_146:
  }
    *a6 = v740;
LABEL_147:

  if (*(void *)buf) {
    operator delete(*(void **)buf);
  }

LABEL_150:
}

void sub_1C4A818A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27)
{
  uint64_t v31 = *(void **)(v29 - 256);
  if (v31)
  {
    *(void *)(v29 - 248) = v31;
    operator delete(v31);
  }

  _Unwind_Resume(a1);
}

void sub_1C4A81F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4A81FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8257C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8279C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A828DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A82B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C4A82BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C4A82BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C4A82BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

id sub_1C4A82C9C(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v8 = objc_msgSend_textTokenRows(v2, v3, v4, v5, v6, v7);
  uint64_t v14 = objc_msgSend_count(v8, v9, v10, v11, v12, v13);

  if (v14 == 1) {
    uint64_t v20 = @"row";
  }
  else {
    uint64_t v20 = @"rows";
  }
  uint64_t v21 = NSString;
  uint64_t v22 = objc_msgSend_textTokenRows(v2, v15, v16, v17, v18, v19);
  uint64_t v28 = objc_msgSend_count(v22, v23, v24, v25, v26, v27);
  uint64_t v33 = objc_msgSend_stringWithFormat_(v21, v29, @"%ld %@", v30, v31, v32, v28, v20);

  return v33;
}

void sub_1C4A82D54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A82D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A82D78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A82D88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4A82D9C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_description(a2, (const char *)a2, a3, a4, a5, a6);
  return v6;
}

id sub_1C4A82DCC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = NSString;
  uint64_t v8 = objc_msgSend_description(a2, (const char *)a2, a3, a4, a5, a6);
  uint64_t v13 = objc_msgSend_stringWithFormat_(v7, v9, @"Column %ld %@", v10, v11, v12, a3, v8);

  return v13;
}

void sub_1C4A82E48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A82EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A82F80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A83098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A830AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A830C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A830D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A830E8()
{
  v0 = (void *)qword_1EA3C9EC0;
  qword_1EA3C9EC0 = (uint64_t)&unk_1F203DB48;
}

void sub_1C4A83274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A83298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A832A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A832B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A832CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A833B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1C4A833CC(uint64_t result)
{
  return result;
}

void sub_1C4A83440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A83590(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A83630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A83644(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A836F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A83710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A83810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8384C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A838EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8390C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A83A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A83A40(void *a1, void *a2, uint64_t a3, unint64_t *a4)
{
  id v6 = a2;
  unint64_t v12 = a1[5];
  if (*a4 >= v12 && *a4 - v12 < a1[6])
  {
    id v15 = v6;
    objc_msgSend_heuristicTextScore(v6, v7, v8, v9, v10, v11);
    *(double *)(*(void *)(a1[4] + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v14 + *(double *)(*(void *)(a1[4] + 8) + 24);
    id v6 = v15;
  }
}

void sub_1C4A83AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A83D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A83E58(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C4A83E70(void *a1, void *a2, uint64_t a3, unint64_t *a4)
{
  id v6 = a2;
  unint64_t v12 = a1[5];
  if (*a4 >= v12 && *a4 - v12 < a1[6])
  {
    id v14 = v6;
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) |= (objc_msgSend_inputSources(v6, v7, v8, v9, v10, v11) & 0x10) != 0;
    id v6 = v14;
  }
}

void sub_1C4A83EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A83F90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A83FA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A84288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A84380(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A846D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4A847E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A84B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v30 - 152), 8);
  _Block_object_dispose((const void *)(v30 - 120), 8);

  _Unwind_Resume(a1);
}

void sub_1C4A84BA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 sub_1C4A84BB4(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1C4A84BC4(uint64_t a1, void *a2, uint64_t a3, long long *a4)
{
  id v7 = a2;
  uint64_t v18 = objc_msgSend_string(v7, v8, v9, v10, v11, v12);
  ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  char v62 = 0;
  if (*(unsigned char *)(a1 + 88) || *(unsigned char *)(a1 + 89))
  {
    int shouldPerformStrictFiltering = objc_msgSend_shouldFilterOutStringForToken_isGibberish_shouldPerformStrictFiltering_(*(void **)(a1 + 32), v13, (uint64_t)v7, (uint64_t)&v62, 0, v17);
    if (a3 > 0) {
      goto LABEL_7;
    }
  }
  else
  {
    int shouldPerformStrictFiltering = 0;
    if (a3 > 0) {
      goto LABEL_7;
    }
  }
  if (!*(unsigned char *)(a1 + 90))
  {
    uint64_t v20 = &stru_1F20141C8;
    goto LABEL_11;
  }
LABEL_7:
  objc_msgSend_precedingSeparatorForToken_(*(void **)(a1 + 32), v13, (uint64_t)v7, v15, v16, v17);
  uint64_t v21 = (__CFString *)objc_claimAutoreleasedReturnValue();
  uint64_t v20 = v21;
  if (shouldPerformStrictFiltering
    && *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24)
    && objc_msgSend_length(v21, v13, v14, v15, v16, v17))
  {

    uint64_t v20 = @"_";
  }
LABEL_11:
  uint64_t v22 = objc_msgSend_length(*(void **)(a1 + 40), v13, v14, v15, v16, v17);
  uint64_t v33 = objc_msgSend_length(v20, v23, v24, v25, v26, v27);
  if (shouldPerformStrictFiltering)
  {
    uint64_t v34 = objc_msgSend_countCharacters(v18, v28, v29, v30, v31, v32);
    uint64_t v37 = objc_msgSend_stringByPaddingToLength_withString_startingAtIndex_(&stru_1F20141C8, v35, v34, @"_", 0, v36);

    ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
    uint64_t v18 = (void *)v37;
  }
  uint64_t v43 = objc_msgSend_length(*(void **)(a1 + 40), v28, v29, v30, v31, v32);
  if (!*(unsigned char *)(a1 + 90)) {
    v43 += objc_msgSend_length(v20, v38, v39, v40, v41, v42);
  }
  objc_msgSend_appendFormat_(*(void **)(a1 + 40), v38, @"%@%@", v40, v41, v42, v20, v18);
  uint64_t v54 = objc_msgSend_length(*(void **)(a1 + 40), v44, v45, v46, v47, v48);
  uint64_t v55 = *(void *)(a1 + 48);
  if (v55)
  {
    uint64_t v56 = v54 - (v33 + v22);
    if (*(unsigned char *)(a1 + 89)) {
      uint64_t v57 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v57 = v33 + v22;
    }
    if (*(unsigned char *)(a1 + 89)) {
      uint64_t v58 = 0;
    }
    else {
      uint64_t v58 = v56;
    }
    uint64_t v61 = *((void *)a4 + 2);
    long long v60 = *a4;
    (*(void (**)(uint64_t, id, uint64_t, long long *, uint64_t, uint64_t))(v55 + 16))(v55, v7, a3, &v60, v57, v58);
  }
  if (!v62 || !*(unsigned char *)(a1 + 89))
  {
    uint64_t v59 = *(void *)(*(void *)(a1 + 80) + 8);
    if (*(void *)(v59 + 48) == 0x7FFFFFFFFFFFFFFFLL) {
      *(void *)(v59 + 48) = v43;
    }
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 56) = objc_msgSend_length(*(void **)(a1 + 40), v49, v50, v51, v52, v53)- *(void *)(*(void *)(*(void *)(a1 + 80) + 8)+ 48);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = shouldPerformStrictFiltering;
}

void sub_1C4A84E2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A84E44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A84E58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A84E68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A84E84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A84E9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A84EB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A85150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A85168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8517C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8518C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A851A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A851B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A851C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A851D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A851E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A851F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A85208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A85218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A85228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A85238(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_letterCharacterSet(MEMORY[0x1E4F28B88], a2, a3, a4, a5, a6);
  id v7 = (void *)qword_1EA3C9EC8;
  qword_1EA3C9EC8 = v6;

  objc_msgSend_decimalDigitCharacterSet(MEMORY[0x1E4F28B88], v8, v9, v10, v11, v12);
  id v20 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v18 = objc_msgSend_invertedSet(v20, v13, v14, v15, v16, v17);
  uint64_t v19 = (void *)qword_1EA3C9ED8;
  qword_1EA3C9ED8 = v18;
}

void sub_1C4A852B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL sub_1C4A852CC(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v11 = v5;
  if (!a1)
  {
    BOOL v42 = 0;
    goto LABEL_30;
  }
  char v12 = objc_msgSend_properties(v5, v6, v7, v8, v9, v10);
  uint64_t v23 = objc_msgSend_string(v11, v13, v14, v15, v16, v17);
  if ((v12 & 4) != 0) {
    goto LABEL_28;
  }
  if (qword_1EA3C9F18 != -1) {
    dispatch_once(&qword_1EA3C9F18, &unk_1F20139A8);
  }
  char v24 = objc_msgSend_properties(v11, v18, v19, v20, v21, v22);
  uint64_t v29 = objc_msgSend_stringByTrimmingCharactersInSet_(v23, v25, qword_1EA3C9EF0, v26, v27, v28);
  uint64_t v35 = objc_msgSend_length(v29, v30, v31, v32, v33, v34);

  if ((v24 & 8) == 0)
  {
    unint64_t v41 = objc_msgSend_length(v23, v36, v37, v38, v39, v40);
    BOOL v42 = v41 > 0x14;
    if (v41 > 0x14 || !v35) {
      goto LABEL_17;
    }
    if ((unint64_t)objc_msgSend_length(v23, v36, v37, v38, v39, v40) >= 5)
    {
      uint64_t v43 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v23, v36, qword_1EA3C9EF8, 3, v39, v40);
      uint64_t v47 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v23, v44, qword_1EA3C9F08, 3, v45, v46);
      if (objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v23, v48, qword_1EA3C9F00, 1, v49, v50) == 1)
      {
        BOOL v42 = v47 > 0 || v43 > 1;
        goto LABEL_17;
      }
    }
  }
  BOOL v42 = 0;
LABEL_17:
  if (!a3 || v42) {
    goto LABEL_29;
  }
  if ((unint64_t)objc_msgSend_length(v23, v36, v37, v38, v39, v40) <= 4)
  {
    uint64_t v55 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v23, v52, qword_1EA3C9EF8, 0, v53, v54);
    uint64_t v59 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v23, v56, qword_1EA3C9F08, 0, v57, v58);
    uint64_t v63 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v23, v60, qword_1EA3C9EF0, 0, v61, v62);
    uint64_t v67 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v23, v64, qword_1EA3C9F10, 0, v65, v66);
    BOOL v42 = 1;
    if (v59 <= 0 && v55 <= 1) {
      BOOL v42 = v63 > 0 && v67 > 0;
    }
    goto LABEL_29;
  }
LABEL_28:
  BOOL v42 = 0;
LABEL_29:

LABEL_30:
  return v42;
}

void sub_1C4A854C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A854D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A854EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A85500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A85514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A85528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8553C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A85550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A85568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8557C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8558C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8559C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A85684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1C4A856A0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = objc_msgSend_properties(a2, (const char *)a2, a3, a4, a5, a6);
  if ((result & 4) != 0) {
    ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  return result;
}

void sub_1C4A85C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v34 - 192), 8);
  _Block_object_dispose((const void *)(v34 - 144), 8);

  _Unwind_Resume(a1);
}

void sub_1C4A85D74(uint64_t a1, void *a2)
{
  id v3 = a2;
  ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  char v43 = 0;
  if (objc_msgSend_shouldFilterOutStringForToken_isGibberish_shouldPerformStrictFiltering_(*(void **)(a1 + 32), v4, (uint64_t)v3, (uint64_t)&v43, *(unsigned __int8 *)(a1 + 80), v5))*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1; {
  objc_msgSend_string(v3, v6, v7, v8, v9, v10);
  }
  uint64_t v11 = (NSString *)objc_claimAutoreleasedReturnValue();
  BOOL v12 = isStringRepeatedSameCharacter(v11);

  objc_msgSend_string(v3, v13, v14, v15, v16, v17);
  uint64_t v18 = (NSString *)objc_claimAutoreleasedReturnValue();
  BOOL v24 = isStringAllCircleTextPatterns(v18, v19, v20, v21, v22, v23);

  if (v43) {
    int v30 = 1;
  }
  else {
    int v30 = v12;
  }
  if ((v30 | v24) == 1) {
    ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  }
  if ((objc_msgSend_properties(v3, v25, v26, v27, v28, v29) & 4) == 0)
  {
    ++*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
    uint64_t v36 = objc_msgSend_string(v3, v31, v32, v33, v34, v35);
    unint64_t v42 = objc_msgSend_length(v36, v37, v38, v39, v40, v41);

    if (v42 <= 2) {
      ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
    }
  }
}

void sub_1C4A85EB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A85EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A85EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A85F00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A85F10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A85FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1C4A86014(uint64_t a1, void *a2)
{
  id v11 = a2;
  char isTopOriginal = objc_msgSend_isTopOriginal(v11, v3, v4, v5, v6, v7);
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(unsigned char *)(v9 + 24)) {
    char v10 = isTopOriginal;
  }
  else {
    char v10 = 0;
  }
  *(unsigned char *)(v9 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v10;
}

void sub_1C4A86074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A86160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1C4A8617C(uint64_t a1, void *a2)
{
  id v11 = a2;
  char hasValidPrincipalLines = objc_msgSend_hasValidPrincipalLines(v11, v3, v4, v5, v6, v7);
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(unsigned char *)(v9 + 24)) {
    char v10 = hasValidPrincipalLines;
  }
  else {
    char v10 = 0;
  }
  *(unsigned char *)(v9 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v10;
}

void sub_1C4A861DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A863E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8644C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A86464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A864A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A864D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A864F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8660C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A86630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A86648(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8665C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A86670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A86680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A86690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A86790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A867B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A867CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A867E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A867F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A86804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A86814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A86908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8691C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A86934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A86A04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A86A24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4A86A34(uint64_t a1, void *a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  self;
  uint64_t v8 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v3, v4, v5, v6, v7);
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  id v9 = v2;
  uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v59, (uint64_t)v63, 16, v11);
  if (v17)
  {
    uint64_t v18 = *(void *)v60;
    do
    {
      for (uint64_t i = 0; i != v17; ++i)
      {
        if (*(void *)v60 != v18) {
          objc_enumerationMutation(v9);
        }
        uint64_t v20 = *(void **)(*((void *)&v59 + 1) + 8 * i);
        if (objc_msgSend_count(v8, v12, v13, v14, v15, v16, (void)v59)
          && (objc_msgSend_lastObject(v8, v21, v22, v23, v24, v25),
              uint64_t v26 = objc_claimAutoreleasedReturnValue(),
              objc_msgSend_strokeIndexes(v20, v27, v28, v29, v30, v31),
              uint64_t v32 = objc_claimAutoreleasedReturnValue(),
              int v37 = objc_msgSend_ch_intersectsIndexSet_(v26, v33, (uint64_t)v32, v34, v35, v36),
              v32,
              v26,
              v37))
        {
          uint64_t v38 = objc_msgSend_lastObject(v8, v21, v22, v23, v24, v25);
          uint64_t v44 = objc_msgSend_strokeIndexes(v20, v39, v40, v41, v42, v43);
          objc_msgSend_addIndexes_(v38, v45, (uint64_t)v44, v46, v47, v48);
        }
        else
        {
          uint64_t v38 = objc_msgSend_strokeIndexes(v20, v21, v22, v23, v24, v25);
          uint64_t v44 = objc_msgSend_mutableCopy(v38, v49, v50, v51, v52, v53);
          objc_msgSend_addObject_(v8, v54, (uint64_t)v44, v55, v56, v57);
        }
      }
      uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v12, (uint64_t)&v59, (uint64_t)v63, 16, v16);
    }
    while (v17);
  }

  return v8;
}

void sub_1C4A86C34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A86D9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A86DAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A86DD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A86F40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A86F54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A86F64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A86F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A86F90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A86FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A86FB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A86FC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A86FD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A870D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A87248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4A87278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1C4A87294(uint64_t a1, void *a2)
{
  id v31 = a2;
  if ((objc_msgSend_properties(v31, v3, v4, v5, v6, v7) & 0x20) != 0)
  {
    uint64_t v13 = objc_msgSend_string(v31, v8, v9, v10, v11, v12);
    uint64_t v19 = objc_msgSend_length(v13, v20, v21, v22, v23, v24) + 1;
  }
  else
  {
    uint64_t v13 = objc_msgSend_string(v31, v8, v9, v10, v11, v12);
    uint64_t v19 = objc_msgSend_length(v13, v14, v15, v16, v17, v18);
  }

  uint64_t v25 = *(void *)(*(void *)(a1 + 40) + 8);
  v33.locatiounint64_t n = *(void *)(v25 + 24);
  *(void *)(v25 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v33.location + v19;
  v33.length = v19;
  NSRange v29 = NSIntersectionRange(v33, *(NSRange *)(a1 + 48));
  uint64_t v30 = v31;
  if (v29.length)
  {
    objc_msgSend_addObject_(*(void **)(a1 + 32), (const char *)v29.length, (uint64_t)v31, v26, v27, v28);
    uint64_t v30 = v31;
  }
}

void sub_1C4A87354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A87384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A87398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A873AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A873C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL sub_1C4A873D4(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  self;
  uint64_t v11 = objc_msgSend_mutableCopy(v4, v6, v7, v8, v9, v10);
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = sub_1C4A874F8;
  v24[3] = &unk_1E64E3280;
  id v12 = v11;
  id v25 = v12;
  objc_msgSend_enumerateObjectsUsingBlock_(v5, v13, (uint64_t)v24, v14, v15, v16);
  BOOL v22 = objc_msgSend_count(v12, v17, v18, v19, v20, v21) == 0;

  return v22;
}

void sub_1C4A874AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A874D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A874E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A874F8(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  uint64_t v7 = *(void **)(a1 + 32);
  id v45 = v6;
  uint64_t v13 = objc_msgSend_strokeIndexes(v6, v8, v9, v10, v11, v12);
  LOBYTE(v7) = objc_msgSend_ch_intersectsIndexSet_(v7, v14, (uint64_t)v13, v15, v16, v17);

  if (v7)
  {
    uint64_t v23 = *(void **)(a1 + 32);
    uint64_t v24 = objc_msgSend_strokeIndexes(v45, v18, v19, v20, v21, v22);
    LODWORD(v23) = objc_msgSend_containsIndexes_(v23, v25, (uint64_t)v24, v26, v27, v28);

    if (!v23
      || (uint64_t v34 = *(void **)(a1 + 32),
          objc_msgSend_strokeIndexes(v45, v29, v30, v31, v32, v33),
          uint64_t v35 = objc_claimAutoreleasedReturnValue(),
          objc_msgSend_removeIndexes_(v34, v36, (uint64_t)v35, v37, v38, v39),
          v35,
          !objc_msgSend_count(*(void **)(a1 + 32), v40, v41, v42, v43, v44)))
    {
      *a4 = 1;
    }
  }
}

void sub_1C4A875D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A875F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A87AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36,id a37)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A87C00(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C4A87C0C(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v26 = a2;
  if (objc_msgSend_containsObject_(*(void **)(a1 + 32), v7, (uint64_t)v26, v8, v9, v10))
  {
    objc_msgSend_addIndex_(*(void **)(a1 + 40), v11, a3, v12, v13, v14);
    uint64_t v20 = objc_msgSend_count(*(void **)(a1 + 40), v15, v16, v17, v18, v19);
    if (v20 == objc_msgSend_count(*(void **)(a1 + 32), v21, v22, v23, v24, v25)) {
      *a4 = 1;
    }
  }
}

void sub_1C4A87CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A87CB4(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v115 = a2;
  unint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  uint64_t v12 = objc_msgSend_originalTokens(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
  unint64_t v18 = objc_msgSend_count(v12, v13, v14, v15, v16, v17);

  if (v6 >= v18)
  {
    *a4 = 1;
  }
  else
  {
    uint64_t v24 = objc_msgSend_strokeIndexes(v115, v19, v20, v21, v22, v23);
    uint64_t v30 = objc_msgSend_originalTokens(*(void **)(a1 + 32), v25, v26, v27, v28, v29);
    uint64_t v35 = objc_msgSend_objectAtIndexedSubscript_(v30, v31, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), v32, v33, v34);
    uint64_t v41 = objc_msgSend_strokeIndexes(v35, v36, v37, v38, v39, v40);
    int isEqualToIndexSet = objc_msgSend_isEqualToIndexSet_(v24, v42, (uint64_t)v41, v43, v44, v45);

    if (isEqualToIndexSet)
    {
      uint64_t v52 = objc_msgSend_indexSetWithIndex_(MEMORY[0x1E4F28D60], v47, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), v49, v50, v51);
      objc_msgSend_addObject_(*(void **)(a1 + 40), v53, (uint64_t)v52, v54, v55, v56);
      ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    }
    else
    {
      uint64_t v52 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v47, v48, v49, v50, v51);
      uint64_t v67 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v57, v58, v59, v60, v61);
      while (1)
      {
        unint64_t v68 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
        uint64_t v69 = objc_msgSend_originalTokens(*(void **)(a1 + 32), v62, v63, v64, v65, v66);
        if (v68 >= objc_msgSend_count(v69, v70, v71, v72, v73, v74)) {
          break;
        }
        uint64_t v80 = objc_msgSend_strokeIndexes(v115, v75, v76, v77, v78, v79);
        char isEqual = objc_msgSend_isEqual_(v80, v81, (uint64_t)v67, v82, v83, v84);

        if (isEqual) {
          goto LABEL_10;
        }
        uint64_t v91 = objc_msgSend_originalTokens(*(void **)(a1 + 32), v86, v87, v88, v89, v90);
        uint64_t v96 = objc_msgSend_objectAtIndexedSubscript_(v91, v92, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), v93, v94, v95);

        objc_msgSend_addIndex_(v52, v97, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), v98, v99, v100);
        uint64_t v106 = objc_msgSend_strokeIndexes(v96, v101, v102, v103, v104, v105);
        objc_msgSend_addIndexes_(v67, v107, (uint64_t)v106, v108, v109, v110);

        ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
      }

LABEL_10:
      if (objc_msgSend_count(v52, v86, v87, v88, v89, v90)) {
        objc_msgSend_addObject_(*(void **)(a1 + 40), v111, (uint64_t)v52, v112, v113, v114);
      }
    }
  }
}

void sub_1C4A87F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A87F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A87F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A87F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A87F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A88040()
{
}

void sub_1C4A88064(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v11 = objc_msgSend_strokeIndexes(v5, v6, v7, v8, v9, v10);
  char v16 = objc_msgSend_ch_intersectsIndexSet_(v11, v12, *(void *)(a1 + 32), v13, v14, v15);

  if ((v16 & 1) != 0
    && (uint64_t v22 = *(void **)(a1 + 32),
        objc_msgSend_strokeIndexes(v5, v17, v18, v19, v20, v21),
        uint64_t v23 = objc_claimAutoreleasedReturnValue(),
        LODWORD(v22) = objc_msgSend_containsIndexes_(v22, v24, (uint64_t)v23, v25, v26, v27),
        v23,
        !v22))
  {
    uint64_t v28 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 48), v17, a3, v19, v20, v21);
    v34[0] = MEMORY[0x1E4F143A8];
    v34[1] = 3221225472;
    v34[2] = sub_1C4A88200;
    v34[3] = &unk_1E64E32F8;
    uint64_t v29 = *(void **)(a1 + 64);
    v34[4] = *(void *)(a1 + 56);
    id v35 = v29;
    id v36 = v5;
    id v37 = *(id *)(a1 + 40);
    objc_msgSend_enumerateIndexesUsingBlock_(v28, v30, (uint64_t)v34, v31, v32, v33);
  }
  else
  {
    objc_msgSend_addObject_(*(void **)(a1 + 40), v17, (uint64_t)v5, v19, v20, v21);
  }
}

void sub_1C4A881AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C4A881D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A881F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A88200(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = objc_msgSend_originalTokens(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  uint64_t v13 = objc_msgSend_objectAtIndexedSubscript_(v8, v9, (uint64_t)a2, v10, v11, v12);
  uint64_t v19 = objc_msgSend_copy(v13, v14, v15, v16, v17, v18);

  uint64_t v25 = objc_msgSend_inputStrokeIdentifiers(*(void **)(a1 + 32), v20, v21, v22, v23, v24);
  uint64_t v31 = objc_msgSend_strokeIndexes(v19, v26, v27, v28, v29, v30);
  uint64_t v36 = objc_msgSend_objectsAtIndexes_(v25, v32, (uint64_t)v31, v33, v34, v35);

  uint64_t v177 = (void *)v36;
  uint64_t v176 = objc_msgSend_strokesForIdentifiers_inStrokeProvider_(CHStrokeUtilities, v37, v36, *(void *)(a1 + 40), v38, v39);
  CoreHandwriting::getPointSet(v176, v210);
  objc_msgSend_boundsForStrokes_(CHStrokeUtilities, v40, (uint64_t)v176, v41, v42, v43);
  double v50 = v49;
  double v52 = v51;
  double v54 = v53;
  double v56 = v55;
  uint64_t v57 = *(void **)(a1 + 48);
  if (v57)
  {
    objc_msgSend_principalLines(v57, v44, v45, v46, v47, v48);
    double v58 = *((double *)&v202 + 1);
    double v59 = *(double *)&v202;
    double v60 = *((double *)&v203 + 1);
    double v61 = *(double *)&v203;
    double v62 = *((double *)&v204 + 1);
    double v63 = *(double *)&v204;
    double v64 = *((double *)&v205 + 1);
    double v65 = *(double *)&v205;
    double v66 = *((double *)&v206 + 1);
    double v67 = *(double *)&v206;
    double v68 = *((double *)&v207 + 1);
    double v69 = *(double *)&v207;
    double v70 = *((double *)&v208 + 1);
    double v71 = *(double *)&v208;
    double v72 = *((double *)&v209 + 1);
    double v73 = *(double *)&v209;
  }
  else
  {
    double v72 = 0.0;
    double v73 = 0.0;
    long long v208 = 0u;
    long long v209 = 0u;
    double v70 = 0.0;
    double v71 = 0.0;
    double v68 = 0.0;
    long long v206 = 0u;
    long long v207 = 0u;
    double v69 = 0.0;
    double v66 = 0.0;
    double v67 = 0.0;
    long long v204 = 0u;
    long long v205 = 0u;
    double v64 = 0.0;
    double v65 = 0.0;
    double v62 = 0.0;
    long long v202 = 0u;
    long long v203 = 0u;
    double v63 = 0.0;
    double v60 = 0.0;
    double v61 = 0.0;
    double v58 = 0.0;
    double v59 = 0.0;
  }
  if (v54 == 0.0) {
    double v54 = 1.0;
  }
  if (v56 == 0.0) {
    double v56 = 1.0;
  }
  v194[0] = v50 + v59 * v54;
  v194[1] = v52 + v58 * v56;
  v194[2] = v50 + v61 * v54;
  v194[3] = v52 + v60 * v56;
  v194[4] = v50 + v63 * v54;
  v194[5] = v52 + v62 * v56;
  v194[6] = v50 + v65 * v54;
  v194[7] = v52 + v64 * v56;
  v194[8] = v50 + v67 * v54;
  v194[9] = v52 + v66 * v56;
  v194[10] = v50 + v69 * v54;
  v194[11] = v52 + v68 * v56;
  v194[12] = v50 + v71 * v54;
  v194[13] = v52 + v70 * v56;
  v194[14] = v50 + v73 * v54;
  v194[15] = v52 + v72 * v56;
  objc_msgSend_convertFromCHPrincipalLines_(CHTextTransformationManager, v44, (uint64_t)v194, v46, v47, v48);
  sub_1C4B52ADC((double **)v195, v210, (uint64_t)v187);
  long long v185 = 0u;
  long long v186 = 0u;
  long long v183 = 0u;
  long long v184 = 0u;
  long long v181 = 0u;
  long long v182 = 0u;
  long long v179 = 0u;
  long long v180 = 0u;
  objc_msgSend_convertToCHPrincipalLines_(CHTextTransformationManager, v74, (uint64_t)v187, v75, v76, v77);
  *(double *)&long long v179 = (*(double *)&v179 - v50) / v54;
  *((double *)&v179 + 1) = (*((double *)&v179 + 1) - v52) / v56;
  *(double *)&long long v180 = (*(double *)&v180 - v50) / v54;
  *((double *)&v180 + 1) = (*((double *)&v180 + 1) - v52) / v56;
  *(double *)&long long v181 = (*(double *)&v181 - v50) / v54;
  *((double *)&v181 + 1) = (*((double *)&v181 + 1) - v52) / v56;
  *(double *)&long long v182 = (*(double *)&v182 - v50) / v54;
  *((double *)&v182 + 1) = (*((double *)&v182 + 1) - v52) / v56;
  *(double *)&long long v183 = (*(double *)&v183 - v50) / v54;
  *((double *)&v183 + 1) = (*((double *)&v183 + 1) - v52) / v56;
  *(double *)&long long v184 = (*(double *)&v184 - v50) / v54;
  *((double *)&v184 + 1) = (*((double *)&v184 + 1) - v52) / v56;
  *(double *)&long long v185 = (*(double *)&v185 - v50) / v54;
  *((double *)&v185 + 1) = (*((double *)&v185 + 1) - v52) / v56;
  *(double *)&long long v186 = (*(double *)&v186 - v50) / v54;
  *((double *)&v186 + 1) = (*((double *)&v186 + 1) - v52) / v56;
  uint64_t v83 = objc_msgSend_string(v19, v78, v79, v80, v81, v82);
  uint64_t v89 = objc_msgSend_strokeIndexes(v19, v84, v85, v86, v87, v88);
  uint64_t v95 = objc_msgSend_wordID(v19, v90, v91, v92, v93, v94);
  objc_msgSend_modelScore(v19, v96, v97, v98, v99, v100);
  double v102 = v101;
  objc_msgSend_recognitionScore(v19, v103, v104, v105, v106, v107);
  double v109 = v108;
  objc_msgSend_combinedScore(v19, v110, v111, v112, v113, v114);
  double v116 = v115;
  objc_msgSend_alignmentScore(v19, v117, v118, v119, v120, v121);
  double v123 = v122;
  uint64_t v129 = objc_msgSend_properties(v19, v124, v125, v126, v127, v128);
  uint64_t v135 = objc_msgSend_recognizerSourceLocale(v19, v130, v131, v132, v133, v134);
  uint64_t v141 = objc_msgSend_inputSources(v19, v136, v137, v138, v139, v140);
  uint64_t v147 = objc_msgSend_substrokeCount(v19, v142, v143, v144, v145, v146);
  objc_msgSend_bounds(v19, v148, v149, v150, v151, v152);
  double v154 = v153;
  double v156 = v155;
  double v158 = v157;
  double v160 = v159;
  objc_msgSend_originalBounds(v19, v161, v162, v163, v164, v165);
  v178[4] = v183;
  v178[5] = v184;
  v178[6] = v185;
  v178[7] = v186;
  v178[0] = v179;
  v178[1] = v180;
  v178[2] = v181;
  v178[3] = v182;
  objc_msgSend_tokenWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(CHTokenizedTextResultToken, v166, (uint64_t)v83, (uint64_t)v89, v95, v129, v135, v141, v102, v109, v116, v123, v154, v156, v158, v160, v147, v167, v168,
    v169,
    v170,
  uint64_t v171 = v178);

  objc_msgSend_addObject_(*(void **)(a1 + 56), v172, (uint64_t)v171, v173, v174, v175);
  if (__p)
  {
    uint64_t v193 = __p;
    operator delete(__p);
  }
  if (v190)
  {
    uint64_t v191 = v190;
    operator delete(v190);
  }
  if (v188)
  {
    uint64_t v189 = v188;
    operator delete(v188);
  }
  if (v187[0])
  {
    v187[1] = v187[0];
    operator delete(v187[0]);
  }
  if (v200)
  {
    uint64_t v201 = v200;
    operator delete(v200);
  }
  if (v198)
  {
    uint64_t v199 = v198;
    operator delete(v198);
  }
  if (v196)
  {
    uint64_t v197 = v196;
    operator delete(v196);
  }
  if (v195[0])
  {
    v195[1] = v195[0];
    operator delete(v195[0]);
  }
  if (v210[0])
  {
    v210[1] = v210[0];
    operator delete(v210[0]);
  }
}

void sub_1C4A88740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  uint64_t v19 = *(void **)(v17 - 176);
  if (v19)
  {
    *(void *)(v17 - 168) = v19;
    operator delete(v19);
  }

  _Unwind_Resume(a1);
}

void sub_1C4A88A6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A88AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A88AE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A88B08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A88B1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A88F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1C4A890C8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = objc_msgSend_textTokenRows(a2, (const char *)a2, a3, a4, a5, a6);
  uint64_t v11 = objc_msgSend_indexOfObjectPassingTest_(v6, v7, (uint64_t)&unk_1F2013968, v8, v9, v10);

  return v11 == 0x7FFFFFFFFFFFFFFFLL;
}

void sub_1C4A89114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A89124(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v2 = a2;
  uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v15, (uint64_t)v19, 16, v4);
  if (v10)
  {
    uint64_t v11 = *(void *)v16;
    while (2)
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v16 != v11) {
          objc_enumerationMutation(v2);
        }
        if ((objc_msgSend_isTopOriginal(*(void **)(*((void *)&v15 + 1) + 8 * v12), v5, v6, v7, v8, v9, (void)v15) & 1) == 0)
        {
          uint64_t v13 = 0;
          goto LABEL_11;
        }
        ++v12;
      }
      while (v10 != v12);
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v15, (uint64_t)v19, 16, v9);
      if (v10) {
        continue;
      }
      break;
    }
  }
  uint64_t v13 = 1;
LABEL_11:

  return v13;
}

void sub_1C4A89228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8924C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v160 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = objc_msgSend_tokenColumns(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  uint64_t v11 = objc_msgSend_objectAtIndexedSubscript_(v6, v7, (uint64_t)a2, v8, v9, v10);

  long long v17 = objc_msgSend_transcriptionPaths(*(void **)(a1 + 32), v12, v13, v14, v15, v16);
  uint64_t v23 = objc_msgSend_firstObject(v17, v18, v19, v20, v21, v22);
  unint64_t v28 = objc_msgSend_indexAtPosition_(v23, v24, (uint64_t)a2, v25, v26, v27);

  uint64_t v29 = [CHMutableTokenizedResultColumn alloc];
  uint64_t v35 = objc_msgSend_textTokenRows(v11, v30, v31, v32, v33, v34);
  uint64_t v142 = objc_msgSend_initWithTokenRows_(v29, v36, (uint64_t)v35, v37, v38, v39);

  uint64_t v45 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v40, v41, v42, v43, v44);
  double v51 = objc_msgSend_textTokenRows(v11, v46, v47, v48, v49, v50);
  unint64_t v57 = objc_msgSend_count(v51, v52, v53, v54, v55, v56);

  if (v28 >= v57)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    double v63 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v63, OS_LOG_TYPE_FAULT))
    {
      uint64_t v69 = objc_msgSend_tokenColumnCount(*(void **)(a1 + 32), v64, v65, v66, v67, v68);
      uint64_t v75 = objc_msgSend_textTokenRows(v11, v70, v71, v72, v73, v74);
      uint64_t v81 = objc_msgSend_transcriptionPaths(*(void **)(a1 + 32), v76, v77, v78, v79, v80);
      uint64_t v87 = objc_msgSend_firstObject(v81, v82, v83, v84, v85, v86);
      *(_DWORD *)buf = 134219010;
      uint64_t v151 = v69;
      __int16 v152 = 2048;
      double v153 = a2;
      __int16 v154 = 2112;
      double v155 = v75;
      __int16 v156 = 2048;
      unint64_t v157 = v28;
      __int16 v158 = 2112;
      double v159 = v87;
      _os_log_impl(&dword_1C492D000, v63, OS_LOG_TYPE_FAULT, "Column does not have a row at the top path row index. Column Count: %ld Column Index: %ld Column Rows: %@ Top Row Index: %ld Top Path: %@", buf, 0x34u);
    }
  }
  uint64_t v88 = objc_msgSend_textTokenRows(v11, v58, v59, v60, v61, v62);
  BOOL v94 = v28 < objc_msgSend_count(v88, v89, v90, v91, v92, v93);

  if (v94)
  {
    long long v147 = 0u;
    long long v148 = 0u;
    long long v145 = 0u;
    long long v146 = 0u;
    uint64_t v100 = objc_msgSend_textTokenRows(v11, v95, v96, v97, v98, v99);
    uint64_t v105 = objc_msgSend_objectAtIndexedSubscript_(v100, v101, v28, v102, v103, v104);

    uint64_t v113 = objc_msgSend_countByEnumeratingWithState_objects_count_(v105, v106, (uint64_t)&v145, (uint64_t)v149, 16, v107);
    if (v113)
    {
      uint64_t v114 = *(void *)v146;
      do
      {
        for (uint64_t i = 0; i != v113; ++i)
        {
          if (*(void *)v146 != v114) {
            objc_enumerationMutation(v105);
          }
          double v116 = objc_msgSend_mutableCopy(*(void **)(*((void *)&v145 + 1) + 8 * i), v108, v109, v110, v111, v112);
          uint64_t v122 = objc_msgSend_inputSources(v116, v117, v118, v119, v120, v121);
          OriginalTokeunint64_t n = objc_msgSend_makeOriginalToken_(CHTokenizedTextResultToken, v123, v122, v124, v125, v126);
          objc_msgSend_setInputSources_(v116, v128, OriginalToken, v129, v130, v131);
          objc_msgSend_addObject_(v45, v132, (uint64_t)v116, v133, v134, v135);
        }
        uint64_t v113 = objc_msgSend_countByEnumeratingWithState_objects_count_(v105, v108, (uint64_t)&v145, (uint64_t)v149, 16, v112);
      }
      while (v113);
    }

    objc_msgSend_setTokenRowWithTokens_atIndex_(v142, v136, (uint64_t)v45, v28, v137, v138);
    objc_msgSend_replaceObjectAtIndex_withObject_(*(void **)(a1 + 40), v139, (uint64_t)a2, (uint64_t)v142, v140, v141);
  }
}

void sub_1C4A895B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A896A8(uint64_t a1, void *a2)
{
  id v9 = a2;
  objc_msgSend_combinedScore(v9, v3, v4, v5, v6, v7);
  *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v8
                                                              * *(double *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
}

void sub_1C4A89704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A89718(uint64_t a1)
{
  return a1;
}

void sub_1C4A89744()
{
  uint64_t v185 = *MEMORY[0x1E4F143B8];
  long long v35 = xmmword_1C4C39B30;
  uint64_t v36 = 0;
  v37[0] = xmmword_1C4C3B380;
  v37[1] = xmmword_1C4C3B390;
  uint64_t v38 = 0;
  long long v39 = xmmword_1C4C3B3A0;
  long long v40 = xmmword_1C4C3B3B0;
  uint64_t v41 = 0;
  long long v42 = xmmword_1C4C3B3C0;
  long long v43 = xmmword_1C4C3B3D0;
  uint64_t v44 = 0;
  long long v45 = xmmword_1C4C3B3E0;
  long long v46 = xmmword_1C4C3B3F0;
  long long v48 = xmmword_1C4C3B400;
  long long v49 = xmmword_1C4C3B410;
  uint64_t v47 = 0;
  uint64_t v50 = 0;
  long long v51 = xmmword_1C4C3B420;
  long long v52 = xmmword_1C4C3B430;
  uint64_t v53 = 0;
  uint64_t v54 = 0x4014000000000000;
  uint64_t v55 = 0x3FFCCCCCCCCCCCCDLL;
  uint64_t v56 = 0;
  long long v57 = xmmword_1C4C3B440;
  long long v58 = xmmword_1C4C3B450;
  long long v59 = xmmword_1C4C39B30;
  uint64_t v60 = 1;
  uint64_t v61 = 0x400999999999999ALL;
  uint64_t v62 = 0x4000000000000000;
  uint64_t v63 = 0;
  long long v64 = xmmword_1C4C3B460;
  long long v65 = xmmword_1C4C3B470;
  long long v66 = xmmword_1C4C3B3B0;
  uint64_t v67 = 1;
  uint64_t v68 = 0x4010000000000000;
  uint64_t v69 = 0x400199999999999ALL;
  uint64_t v70 = 0;
  long long v71 = xmmword_1C4C3B480;
  long long v72 = xmmword_1C4C3B490;
  long long v73 = xmmword_1C4C3B3F0;
  uint64_t v74 = 1;
  uint64_t v75 = 0x4014CCCCCCCCCCCDLL;
  uint64_t v76 = 0x4002666666666666;
  uint64_t v77 = 0;
  long long v78 = xmmword_1C4C3B4A0;
  long long v79 = xmmword_1C4C3B4B0;
  long long v80 = xmmword_1C4C3B430;
  uint64_t v81 = 1;
  uint64_t v82 = 0x401999999999999ALL;
  uint64_t v83 = 0x4003333333333333;
  uint64_t v84 = 0;
  long long v85 = xmmword_1C4C3B4C0;
  long long v86 = xmmword_1C4C3B4D0;
  long long v87 = xmmword_1C4C39B30;
  uint64_t v88 = 2;
  uint64_t v89 = 0x400199999999999ALL;
  uint64_t v90 = 0x3FF6666666666666;
  uint64_t v91 = 0;
  int64x2_t v92 = vdupq_n_s64(2uLL);
  long long v93 = xmmword_1C4C3B4E0;
  long long v94 = xmmword_1C4C3B3B0;
  uint64_t v95 = 2;
  uint64_t v96 = 0x4014000000000000;
  uint64_t v97 = 0x3FFCCCCCCCCCCCCDLL;
  uint64_t v98 = 0;
  long long v99 = xmmword_1C4C3B4F0;
  long long v100 = xmmword_1C4C3B500;
  long long v101 = xmmword_1C4C3B3F0;
  uint64_t v102 = 2;
  uint64_t v103 = 0x401599999999999ALL;
  uint64_t v104 = 0x4000CCCCCCCCCCCDLL;
  uint64_t v105 = 0;
  long long v106 = xmmword_1C4C3B510;
  long long v107 = xmmword_1C4C3B520;
  long long v108 = xmmword_1C4C3B430;
  uint64_t v109 = 2;
  uint64_t v110 = 0x4018000000000000;
  uint64_t v111 = 0x4002666666666666;
  uint64_t v112 = 0;
  long long v113 = xmmword_1C4C3B530;
  long long v114 = xmmword_1C4C3B540;
  int64x2_t v115 = vdupq_n_s64(1uLL);
  uint64_t v116 = 0;
  uint64_t v117 = 0x3FD851EB851EB852;
  uint64_t v118 = 0x3FDEB851EB851EB8;
  uint64_t v119 = 1;
  long long v120 = xmmword_1C4C3B550;
  long long v121 = xmmword_1C4C3B560;
  long long v122 = xmmword_1C4C3B570;
  uint64_t v123 = 0;
  uint64_t v124 = 0x3FDD70A3D70A3D71;
  uint64_t v125 = 0x3FE0A3D70A3D70A4;
  uint64_t v126 = 1;
  long long v127 = xmmword_1C4C3B580;
  long long v128 = xmmword_1C4C3B590;
  long long v129 = xmmword_1C4C3B5A0;
  uint64_t v130 = 0;
  uint64_t v131 = 0x3FE147AE147AE148;
  uint64_t v132 = 0x3FE1EB851EB851ECLL;
  uint64_t v133 = 1;
  long long v134 = xmmword_1C4C3B5B0;
  long long v135 = xmmword_1C4C3B5C0;
  long long v136 = xmmword_1C4C3B5D0;
  uint64_t v137 = 0;
  uint64_t v138 = 0x3FE28F5C28F5C28FLL;
  uint64_t v139 = 0x3FE3D70A3D70A3D7;
  uint64_t v140 = 1;
  long long v141 = xmmword_1C4C3B440;
  long long v142 = xmmword_1C4C3B5E0;
  long long v143 = xmmword_1C4C3B5F0;
  uint64_t v144 = 0;
  uint64_t v145 = 0x3FE47AE147AE147BLL;
  uint64_t v146 = 0x3FE47AE147AE147BLL;
  uint64_t v147 = 1;
  long long v148 = xmmword_1C4C3B600;
  long long v149 = xmmword_1C4C3B610;
  int64x2_t v150 = v115;
  uint64_t v151 = 2;
  uint64_t v152 = 0x3FC999999999999ALL;
  uint64_t v153 = 0x3FE147AE147AE148;
  uint64_t v154 = 1;
  int64x2_t v155 = v92;
  long long v156 = xmmword_1C4C3B620;
  long long v157 = xmmword_1C4C3B570;
  uint64_t v158 = 2;
  uint64_t v159 = 0x3FCC28F5C28F5C29;
  uint64_t v160 = 0x3FE47AE147AE147BLL;
  uint64_t v161 = 1;
  long long v162 = xmmword_1C4C3B4F0;
  long long v163 = xmmword_1C4C3B630;
  long long v164 = xmmword_1C4C3B5A0;
  uint64_t v165 = 2;
  uint64_t v166 = 0x3FD0A3D70A3D70A4;
  uint64_t v167 = 0x3FE999999999999ALL;
  uint64_t v168 = 1;
  long long v169 = xmmword_1C4C3B510;
  long long v170 = xmmword_1C4C3B640;
  long long v171 = xmmword_1C4C3B5D0;
  uint64_t v172 = 2;
  uint64_t v173 = 0x3FD1EB851EB851ECLL;
  uint64_t v174 = 0x3FEAE147AE147AE1;
  uint64_t v175 = 1;
  long long v176 = xmmword_1C4C3B530;
  long long v177 = xmmword_1C4C3B650;
  long long v178 = xmmword_1C4C3B5F0;
  uint64_t v179 = 2;
  uint64_t v180 = 0x3FD3333333333333;
  uint64_t v181 = 0x3FECCCCCCCCCCCCDLL;
  uint64_t v182 = 1;
  long long v183 = xmmword_1C4C3B660;
  long long v184 = xmmword_1C4C3B670;
  uint64_t v0 = qword_1EA3C9F60;
  if (!qword_1EA3C9F68) {
    goto LABEL_49;
  }
  uint64_t v1 = qword_1EA3C9F58;
  qword_1EA3C9F58 = (uint64_t)&qword_1EA3C9F60;
  *(void *)(qword_1EA3C9F60 + 16) = 0;
  qword_1EA3C9F60 = 0;
  qword_1EA3C9F68 = 0;
  if (*(void *)(v1 + 8)) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = v1;
  }
  if (!v2)
  {
    uint64_t v0 = 0;
LABEL_49:
    uint64_t v6 = 0;
    goto LABEL_50;
  }
  id v3 = *(void **)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = (void *)*v3;
    if (*v3 == v2)
    {
      void *v3 = 0;
      while (1)
      {
        uint64_t v34 = (void *)v3[1];
        if (!v34) {
          break;
        }
        do
        {
          id v3 = v34;
          uint64_t v34 = (void *)*v34;
        }
        while (v34);
      }
    }
    else
    {
      for (v3[1] = 0; v4; uint64_t v4 = (void *)v3[1])
      {
        do
        {
          id v3 = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
  }
  uint64_t v5 = 0;
  uint64_t v6 = 44;
  uint64_t v7 = v3;
  while (1)
  {
    double v8 = (uint64_t *)&v35 + 5 * v5;
    id v9 = (uint64_t *)qword_1EA3C9F60;
    uint64_t v10 = *v8;
    if (qword_1EA3C9F60)
    {
      uint64_t v11 = v8[1];
      uint64_t v12 = v8[2];
      while (1)
      {
        uint64_t v14 = v9;
        uint64_t v15 = v9[4];
        if (v10 < v15) {
          goto LABEL_16;
        }
        if (v15 >= v10)
        {
          uint64_t v16 = v9[5];
          if (v11 >= v16)
          {
            if (v16 < v11) {
              goto LABEL_19;
            }
            uint64_t v17 = v9[6];
            if (v12 >= v17)
            {
              if (v17 >= v12) {
                goto LABEL_13;
              }
              goto LABEL_19;
            }
          }
LABEL_16:
          id v9 = (uint64_t *)*v9;
          uint64_t v13 = v14;
          if (!*v14) {
            goto LABEL_27;
          }
        }
        else
        {
LABEL_19:
          id v9 = (uint64_t *)v9[1];
          if (!v9)
          {
            uint64_t v13 = v14 + 1;
            goto LABEL_27;
          }
        }
      }
    }
    uint64_t v13 = &qword_1EA3C9F60;
    uint64_t v14 = &qword_1EA3C9F60;
LABEL_27:
    *(void *)(v2 + 32) = v10;
    *(void *)(v2 + 40) = v8[1];
    *(void *)(v2 + 48) = v8[2];
    *(_OWORD *)(v2 + 56) = *(_OWORD *)((char *)v37 + 40 * v5);
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    *(void *)(v2 + 16) = v14;
    *uint64_t v13 = v2;
    if (*(void *)qword_1EA3C9F58)
    {
      qword_1EA3C9F58 = *(void *)qword_1EA3C9F58;
      uint64_t v2 = *v13;
    }
    sub_1C4949FD4((uint64_t *)qword_1EA3C9F60, (uint64_t *)v2);
    ++qword_1EA3C9F68;
    if (!v7) {
      break;
    }
    id v3 = (void *)v7[2];
    if (v3)
    {
      long long v18 = (void *)*v3;
      if ((void *)*v3 == v7)
      {
        void *v3 = 0;
        while (1)
        {
          uint64_t v19 = (void *)v3[1];
          if (!v19) {
            break;
          }
          do
          {
            id v3 = v19;
            uint64_t v19 = (void *)*v19;
          }
          while (v19);
        }
      }
      else
      {
        for (v3[1] = 0; v18; long long v18 = (void *)v3[1])
        {
          do
          {
            id v3 = v18;
            long long v18 = (void *)*v18;
          }
          while (v18);
        }
      }
      uint64_t v2 = (uint64_t)v7;
      uint64_t v7 = v3;
    }
    else
    {
      uint64_t v2 = (uint64_t)v7;
      uint64_t v7 = 0;
    }
LABEL_13:
    if (++v5 == 44) {
      goto LABEL_42;
    }
  }
  uint64_t v2 = 0;
  uint64_t v6 = v5 + 1;
LABEL_42:
  sub_1C49A1374((void *)v2);
  if (v3)
  {
    for (uint64_t i = (void *)v3[2]; i; uint64_t i = (void *)i[2])
      id v3 = i;
    sub_1C49A1374(v3);
  }
  if (v6 == 44) {
    return;
  }
  uint64_t v0 = qword_1EA3C9F60;
LABEL_50:
  while (2)
  {
    uint64_t v21 = (uint64_t *)&v35 + 5 * v6;
    if (!v0)
    {
      uint64_t v26 = &qword_1EA3C9F60;
      uint64_t v27 = &qword_1EA3C9F60;
      goto LABEL_62;
    }
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    uint64_t v24 = (uint64_t *)v0;
    uint64_t v25 = v21[2];
    while (2)
    {
      while (1)
      {
        uint64_t v27 = v24;
        uint64_t v28 = v24[4];
        if (v22 >= v28)
        {
          if (v28 < v22) {
            goto LABEL_59;
          }
          uint64_t v29 = v27[5];
          if (v23 >= v29)
          {
            if (v29 < v23) {
              goto LABEL_59;
            }
            uint64_t v30 = v27[6];
            if (v25 >= v30) {
              break;
            }
          }
        }
        uint64_t v24 = (uint64_t *)*v27;
        uint64_t v26 = v27;
        if (!*v27) {
          goto LABEL_62;
        }
      }
      if (v30 >= v25) {
        goto LABEL_66;
      }
LABEL_59:
      uint64_t v24 = (uint64_t *)v27[1];
      if (v24) {
        continue;
      }
      break;
    }
    uint64_t v26 = v27 + 1;
LABEL_62:
    uint64_t v31 = operator new(0x48uLL);
    long long v32 = *((_OWORD *)v21 + 1);
    v31[2] = *(_OWORD *)v21;
    v31[3] = v32;
    *((void *)v31 + 8) = v21[4];
    *(void *)uint64_t v31 = 0;
    *((void *)v31 + 1) = 0;
    *((void *)v31 + 2) = v27;
    uint64_t *v26 = (uint64_t)v31;
    if (*(void *)qword_1EA3C9F58)
    {
      qword_1EA3C9F58 = *(void *)qword_1EA3C9F58;
      uint64_t v33 = (uint64_t *)*v26;
    }
    else
    {
      uint64_t v33 = (uint64_t *)v31;
    }
    sub_1C4949FD4((uint64_t *)qword_1EA3C9F60, v33);
    uint64_t v0 = qword_1EA3C9F60;
    ++qword_1EA3C9F68;
LABEL_66:
    if (++v6 != 44) {
      continue;
    }
    break;
  }
}

void sub_1C4A89FF0(void *a1, void *a2)
{
  id v3 = a2;
  ++*(void *)(*(void *)(a1[5] + 8) + 24);
  uint64_t v8 = a1[4];
  if (v8
    && (id v16 = v3,
        objc_msgSend_stringByTrimmingCharactersInSet_(v3, v4, v8, v5, v6, v7),
        id v9 = objc_claimAutoreleasedReturnValue(),
        uint64_t v15 = objc_msgSend_length(v9, v10, v11, v12, v13, v14),
        v9,
        id v3 = v16,
        !v15))
  {
    ++*(void *)(*(void *)(a1[6] + 8) + 24);
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
}

void sub_1C4A8A0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8A0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8A4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Block_object_dispose((const void *)(v14 - 168), 8);
  _Block_object_dispose((const void *)(v14 - 136), 8);

  _Unwind_Resume(a1);
}

double sub_1C4A8A650(void *a1, void *a2)
{
  id v3 = a2;
  id v9 = v3;
  if (a1)
  {
    uint64_t v20 = 0;
    uint64_t v21 = (double *)&v20;
    uint64_t v22 = 0x2020000000;
    uint64_t v23 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = &v16;
    uint64_t v18 = 0x2020000000;
    uint64_t v19 = 0;
    uint64_t v10 = objc_msgSend_length(v3, v4, v5, v6, v7, v8);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = sub_1C4A8A79C;
    v15[3] = &unk_1E64E33B0;
    v15[4] = &v20;
    v15[5] = &v16;
    objc_msgSend_enumerateTokensInTranscriptionPath_columnRange_tokenProcessingBlock_(a1, v11, (uint64_t)v9, 0, v10, (uint64_t)v15);
    double v12 = v21[3] / (double)v17[3];
    v21[3] = v12;
    if (v12 <= 1.0) {
      double v13 = v12;
    }
    else {
      double v13 = 1.0;
    }
    _Block_object_dispose(&v16, 8);
    _Block_object_dispose(&v20, 8);
  }
  else
  {
    double v13 = 0.0;
  }

  return v13;
}

void sub_1C4A8A774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);

  _Unwind_Resume(a1);
}

void sub_1C4A8A79C(uint64_t a1, void *a2)
{
  id v9 = a2;
  objc_msgSend_recognitionScore(v9, v3, v4, v5, v6, v7);
  *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v8
                                                              + *(double *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

void sub_1C4A8A80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8A820(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = v3;
  id v6 = v4;
  long long v141 = v6;
  self;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA3C9EE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EA3C9EE0))
  {
    qword_1EA3C9F68 = 0;
    qword_1EA3C9F60 = 0;
    qword_1EA3C9F58 = (uint64_t)&qword_1EA3C9F60;
    __cxa_atexit((void (*)(void *))sub_1C4A89718, &qword_1EA3C9F58, &dword_1C492D000);
    __cxa_guard_release(&qword_1EA3C9EE0);
  }
  if (qword_1EA3C9EE8 != -1) {
    dispatch_once(&qword_1EA3C9EE8, &unk_1F2013988);
  }
  uint64_t v12 = objc_msgSend_languageCode(v6, v7, v8, v9, v10, v11);
  if (objc_msgSend_hasPrefix_(v12, v13, @"zh", v14, v15, v16))
  {

LABEL_7:
    uint64_t v38 = ~(objc_msgSend_properties(v5, v22, v23, v24, v25, v26) >> 1) & 2;
    uint64_t v39 = 10;
    uint64_t v40 = 1;
    goto LABEL_14;
  }
  uint64_t v27 = objc_msgSend_languageCode(v6, v17, v18, v19, v20, v21);
  int hasPrefix = objc_msgSend_hasPrefix_(v27, v28, @"yue", v29, v30, v31);

  if (hasPrefix) {
    goto LABEL_7;
  }
  if ((objc_msgSend_properties(v5, v22, v23, v24, v25, v26) & 4) != 0)
  {
    uint64_t v38 = 0;
    uint64_t v40 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    if ((objc_msgSend_properties(v5, v33, v34, v35, v36, v37) & 8) != 0) {
      uint64_t v38 = 1;
    }
    else {
      uint64_t v38 = 2;
    }
  }
  uint64_t v39 = 8;
LABEL_14:
  uint64_t v41 = objc_msgSend_strokeIndexes(v5, v33, v34, v35, v36, v37);
  unint64_t v47 = objc_msgSend_count(v41, v42, v43, v44, v45, v46);
  unint64_t v58 = objc_msgSend_substrokeCount(v5, v48, v49, v50, v51, v52);
  if (v47 > v58)
  {
    uint64_t v140 = objc_msgSend_strokeIndexes(v5, v53, v54, v55, v56, v57);
    if (objc_msgSend_count(v140, v59, v60, v61, v62, v63) < (unint64_t)v39) {
      goto LABEL_16;
    }
LABEL_20:
    if (v47 > v58) {
      goto LABEL_21;
    }
    goto LABEL_24;
  }
  if (objc_msgSend_substrokeCount(v5, v53, v54, v55, v56, v57) >= (unint64_t)v39) {
    goto LABEL_20;
  }
LABEL_16:
  uint64_t v69 = objc_msgSend_strokeIndexes(v5, v64, v65, v66, v67, v68);
  unint64_t v75 = objc_msgSend_count(v69, v70, v71, v72, v73, v74);
  if (v75 <= objc_msgSend_substrokeCount(v5, v76, v77, v78, v79, v80))
  {
    uint64_t v39 = objc_msgSend_substrokeCount(v5, v81, v82, v83, v84, v85);

    if (v47 > v58) {
      goto LABEL_21;
    }
    goto LABEL_24;
  }
  long long v86 = objc_msgSend_strokeIndexes(v5, v81, v82, v83, v84, v85);
  uint64_t v39 = objc_msgSend_count(v86, v87, v88, v89, v90, v91);

  if (v47 <= v58)
  {
LABEL_24:

    uint64_t v92 = qword_1EA3C9F60;
    if (!qword_1EA3C9F60) {
      goto LABEL_25;
    }
    while (1)
    {
LABEL_27:
      long long v94 = (uint64_t *)v92;
      uint64_t v95 = *(void *)(v92 + 32);
      if (v40 < v95) {
        goto LABEL_26;
      }
      if (v95 < v40) {
        goto LABEL_33;
      }
      uint64_t v96 = v94[5];
      if (v39 < v96) {
        goto LABEL_26;
      }
      if (v96 < v39) {
        goto LABEL_33;
      }
      uint64_t v97 = v94[6];
      if (v38 < v97)
      {
LABEL_26:
        uint64_t v92 = *v94;
        long long v93 = v94;
        if (!*v94) {
          goto LABEL_35;
        }
      }
      else
      {
        if (v97 >= v38)
        {
          uint64_t v98 = v94;
          goto LABEL_38;
        }
LABEL_33:
        uint64_t v92 = v94[1];
        if (!v92)
        {
          long long v93 = v94 + 1;
          goto LABEL_35;
        }
      }
    }
  }
LABEL_21:

  uint64_t v92 = qword_1EA3C9F60;
  if (qword_1EA3C9F60) {
    goto LABEL_27;
  }
LABEL_25:
  long long v93 = &qword_1EA3C9F60;
  long long v94 = &qword_1EA3C9F60;
LABEL_35:
  uint64_t v98 = operator new(0x48uLL);
  v98[4] = v40;
  v98[5] = v39;
  v98[7] = 0;
  v98[8] = 0;
  v98[6] = v38;
  void *v98 = 0;
  v98[1] = 0;
  v98[2] = v94;
  *long long v93 = (uint64_t)v98;
  long long v99 = v98;
  if (*(void *)qword_1EA3C9F58)
  {
    qword_1EA3C9F58 = *(void *)qword_1EA3C9F58;
    long long v99 = (uint64_t *)*v93;
  }
  sub_1C4949FD4((uint64_t *)qword_1EA3C9F60, v99);
  ++qword_1EA3C9F68;
LABEL_38:
  double v100 = *((double *)v98 + 7);
  double v101 = *((double *)v98 + 8);

  objc_msgSend_combinedScore(v5, v102, v103, v104, v105, v106);
  double v108 = v107;
  uint64_t v109 = *(void **)(a1 + 40);
  id v110 = v5;
  id v111 = v109;
  self;
  uint64_t v150 = 0;
  uint64_t v151 = &v150;
  uint64_t v152 = 0x2020000000;
  uint64_t v153 = 0;
  uint64_t v146 = 0;
  uint64_t v147 = &v146;
  uint64_t v148 = 0x2020000000;
  uint64_t v149 = 0;
  uint64_t v117 = objc_msgSend_string(v110, v112, v113, v114, v115, v116);
  uint64_t v123 = objc_msgSend_string(v110, v118, v119, v120, v121, v122);
  uint64_t v129 = objc_msgSend_length(v123, v124, v125, v126, v127, v128);
  v142[0] = MEMORY[0x1E4F143A8];
  v142[1] = 3221225472;
  v142[2] = sub_1C4A89FF0;
  v142[3] = &unk_1E64E3388;
  uint64_t v144 = &v150;
  id v130 = v111;
  id v143 = v130;
  uint64_t v145 = &v146;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v117, v131, 0, v129, 2, (uint64_t)v142);

  uint64_t v132 = v147[3];
  uint64_t v133 = v151[3];

  _Block_object_dispose(&v146, 8);
  _Block_object_dispose(&v150, 8);

  *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(double *)(*(void *)(*(void *)(a1 + 48) + 8)
                                                                          + 24)
                                                              - ((v108 - v100) / v101
                                                               + (double)v133 * -0.2);
  if (*(unsigned char *)(a1 + 96))
  {
    *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (double)v132 * 0.2
                                                                + *(double *)(*(void *)(*(void *)(a1 + 56) + 8)
                                                                            + 24);
    uint64_t v139 = *(void *)(*(void *)(a1 + 64) + 8);
    if (v132 < 1)
    {
      *(unsigned char *)(v139 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    }
    else
    {
      if (!*(unsigned char *)(v139 + 24))
      {
        ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
        uint64_t v139 = *(void *)(*(void *)(a1 + 64) + 8);
      }
      *(unsigned char *)(v139 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    }
  }
  if ((objc_msgSend_properties(v110, v134, v135, v136, v137, v138) & 4) == 0) {
    ++*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
  }
  ++*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24);
}

void sub_1C4A8ADB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  if (v12 > v13) {
  _Unwind_Resume(a1);
  }
}

void sub_1C4A8AED8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_letterCharacterSet(MEMORY[0x1E4F28B88], a2, a3, a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C9EF0;
  qword_1EA3C9EF0 = v6;

  uint64_t v13 = objc_msgSend_punctuationCharacterSet(MEMORY[0x1E4F28B88], v8, v9, v10, v11, v12);
  uint64_t v14 = (void *)qword_1EA3C9EF8;
  qword_1EA3C9EF8 = v13;

  uint64_t v20 = objc_msgSend_alphanumericCharacterSet(MEMORY[0x1E4F28B88], v15, v16, v17, v18, v19);
  uint64_t v21 = (void *)qword_1EA3C9F00;
  qword_1EA3C9F00 = v20;

  uint64_t v27 = objc_msgSend_symbolCharacterSet(MEMORY[0x1E4F28B88], v22, v23, v24, v25, v26);
  uint64_t v28 = (void *)qword_1EA3C9F08;
  qword_1EA3C9F08 = v27;

  uint64_t v34 = objc_msgSend_decimalDigitCharacterSet(MEMORY[0x1E4F28B88], v29, v30, v31, v32, v33);
  uint64_t v35 = (void *)qword_1EA3C9F10;
  qword_1EA3C9F10 = v34;
}

void sub_1C4A8B148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A8B18C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4A8B19C(uint64_t a1)
{
}

void sub_1C4A8B1A4(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  id v50 = a2;
  uint64_t v12 = objc_msgSend_tokenColumns(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
  uint64_t v17 = objc_msgSend_objectAtIndexedSubscript_(v12, v13, *a4, v14, v15, v16);
  uint64_t v23 = objc_msgSend_textTokenRows(v17, v18, v19, v20, v21, v22);
  uint64_t v28 = objc_msgSend_objectAtIndexedSubscript_(v23, v24, a4[1], v25, v26, v27);

  if (objc_msgSend_count(v28, v29, v30, v31, v32, v33) - 1 == a3)
  {
    objc_msgSend_removeAllIndexes(*(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v34, v35, v36, v37, v38);
    uint64_t v39 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    uint64_t v45 = objc_msgSend_strokeIndexes(v50, v40, v41, v42, v43, v44);
    objc_msgSend_addIndexes_(v39, v46, (uint64_t)v45, v47, v48, v49);
  }
}

void sub_1C4A8B29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8B2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8B2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8B2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8B30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8B39C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8B98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,void *a42)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8BB10(uint64_t a1)
{
  id v27 = objc_alloc_init(MEMORY[0x1E4F28E58]);
  objc_msgSend_formUnionWithCharacterSet_(v27, v2, *(void *)(a1 + 32), v3, v4, v5);
  objc_msgSend_formUnionWithCharacterSet_(v27, v6, *(void *)(a1 + 40), v7, v8, v9);
  uint64_t v15 = objc_msgSend_ch_mathCharSet(MEMORY[0x1E4F28B88], v10, v11, v12, v13, v14);
  objc_msgSend_formUnionWithCharacterSet_(v27, v16, (uint64_t)v15, v17, v18, v19);

  uint64_t v25 = objc_msgSend_copy(v27, v20, v21, v22, v23, v24);
  uint64_t v26 = (void *)qword_1EA3C9F20;
  qword_1EA3C9F20 = v25;
}

void sub_1C4A8BBAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8BBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8C434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8C448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8C460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,void *a30,void *a31,void *a32,uint64_t a33,void *a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,id a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,id a56)
{
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a51, 8);

  _Block_object_dispose((const void *)(v62 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_1C4A8C76C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  if (a4[2]) {
    BOOL v12 = 0;
  }
  else {
    BOOL v12 = *a4 == 0;
  }
  uint64_t v13 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  uint64_t v14 = NSNumber;
  id v35 = v6;
  objc_msgSend_combinedScore(v6, v7, v8, v9, v10, v11);
  *(float *)&double v15 = v15;
  uint64_t v21 = objc_msgSend_numberWithFloat_(v14, v16, v17, v18, v19, v20, v15);
  objc_msgSend_addObject_(v13, v22, (uint64_t)v21, v23, v24, v25);

  uint64_t v34 = objc_msgSend_precedingSeparatorForToken_(*(void **)(a1 + 32), v26, (uint64_t)v35, v27, v28, v29);
  if (v12) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v34);
  }
  objc_msgSend_addObject_(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v30, (uint64_t)v34, v31, v32, v33);
}

void sub_1C4A8C858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8C870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8C884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8C89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8C8B8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v10 = a2;
  uint64_t v11 = *(void **)(a1 + 32);
  BOOL v12 = NSNumber;
  id v132 = v10;
  uint64_t v18 = objc_msgSend_wordID(v10, v13, v14, v15, v16, v17);
  uint64_t v23 = objc_msgSend_numberWithUnsignedInt_(v12, v19, v18, v20, v21, v22);
  objc_msgSend_addObject_(v11, v24, (uint64_t)v23, v25, v26, v27);

  uint64_t v28 = *(void **)(a1 + 40);
  uint64_t v32 = objc_msgSend_valueWithRange_(MEMORY[0x1E4F29238], v29, a5, a6, v30, v31);
  objc_msgSend_addObject_(v28, v33, (uint64_t)v32, v34, v35, v36);

  uint64_t v37 = *(void **)(a1 + 48);
  uint64_t v38 = NSNumber;
  objc_msgSend_recognitionScore(v132, v39, v40, v41, v42, v43);
  *(float *)&double v44 = v44;
  id v50 = objc_msgSend_numberWithFloat_(v38, v45, v46, v47, v48, v49, v44);
  objc_msgSend_addObject_(v37, v51, (uint64_t)v50, v52, v53, v54);

  uint64_t v55 = *(void **)(a1 + 56);
  uint64_t v56 = NSNumber;
  objc_msgSend_combinedScore(v132, v57, v58, v59, v60, v61);
  *(float *)&double v62 = v62;
  uint64_t v68 = objc_msgSend_numberWithFloat_(v56, v63, v64, v65, v66, v67, v62);
  objc_msgSend_addObject_(v55, v69, (uint64_t)v68, v70, v71, v72);

  uint64_t v73 = *(void **)(a1 + 64);
  uint64_t v79 = objc_msgSend_strokeIndexes(v132, v74, v75, v76, v77, v78);
  objc_msgSend_addObject_(v73, v80, (uint64_t)v79, v81, v82, v83);

  uint64_t v84 = *(void **)(a1 + 72);
  uint64_t v85 = NSNumber;
  unint64_t v91 = objc_msgSend_properties(v132, v86, v87, v88, v89, v90);
  uint64_t v96 = objc_msgSend_numberWithBool_(v85, v92, (v91 >> 2) & 1, v93, v94, v95);
  objc_msgSend_addObject_(v84, v97, (uint64_t)v96, v98, v99, v100);

  double v101 = *(void **)(a1 + 80);
  uint64_t v102 = NSNumber;
  unint64_t v108 = objc_msgSend_properties(v132, v103, v104, v105, v106, v107);
  uint64_t v113 = objc_msgSend_numberWithBool_(v102, v109, (v108 >> 3) & 1, v110, v111, v112);
  objc_msgSend_addObject_(v101, v114, (uint64_t)v113, v115, v116, v117);

  if ((objc_msgSend_properties(v132, v118, v119, v120, v121, v122) & 2) != 0) {
    objc_msgSend_addIndex_(*(void **)(a1 + 88), v123, a3, v125, v126, v127);
  }
  if ((objc_msgSend_properties(v132, v123, v124, v125, v126, v127) & 0x10) != 0) {
    objc_msgSend_addIndex_(*(void **)(a1 + 96), v128, a3, v129, v130, v131);
  }
}

void sub_1C4A8CAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8CAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8CB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8CB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8CBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8CF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8D140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8D170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8D184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8D204(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8D2F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8D434(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8D714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8DAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

id sub_1C4A8DBCC(uint64_t a1, void *a2)
{
  uint64_t v144 = *MEMORY[0x1E4F143B8];
  id v129 = a2;
  self;
  objc_msgSend_array(MEMORY[0x1E4F1CA48], v2, v3, v4, v5, v6);
  id v136 = (id)objc_claimAutoreleasedReturnValue();
  long long v141 = 0u;
  long long v142 = 0u;
  long long v139 = 0u;
  long long v140 = 0u;
  obunint64_t j = v129;
  uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v139, (uint64_t)v143, 16, v8);
  if (v9)
  {
    uint64_t v135 = *(void *)v140;
    do
    {
      uint64_t v137 = v9;
      for (uint64_t i = 0; i != v137; ++i)
      {
        if (*(void *)v140 != v135) {
          objc_enumerationMutation(obj);
        }
        uint64_t v16 = *(void **)(*((void *)&v139 + 1) + 8 * i);
        if (objc_msgSend_isTopOriginal(v16, v10, v11, v12, v13, v14))
        {
          objc_msgSend_addObject_(v136, v17, (uint64_t)v16, v19, v20, v21);
        }
        else
        {
          uint64_t v22 = objc_msgSend_inputSources(v16, v17, v18, v19, v20, v21);
          OriginalTokeunint64_t n = objc_msgSend_makeOriginalToken_(CHTokenizedTextResultToken, v23, v22, v24, v25, v26);
          uint64_t v33 = objc_msgSend_string(v16, v28, v29, v30, v31, v32);
          uint64_t v39 = objc_msgSend_strokeIndexes(v16, v34, v35, v36, v37, v38);
          uint64_t v45 = objc_msgSend_wordID(v16, v40, v41, v42, v43, v44);
          objc_msgSend_modelScore(v16, v46, v47, v48, v49, v50);
          double v52 = v51;
          objc_msgSend_recognitionScore(v16, v53, v54, v55, v56, v57);
          double v59 = v58;
          objc_msgSend_combinedScore(v16, v60, v61, v62, v63, v64);
          double v66 = v65;
          objc_msgSend_alignmentScore(v16, v67, v68, v69, v70, v71);
          double v73 = v72;
          uint64_t v79 = objc_msgSend_properties(v16, v74, v75, v76, v77, v78);
          uint64_t v85 = objc_msgSend_recognizerSourceLocale(v16, v80, v81, v82, v83, v84);
          double v131 = v73;
          double v132 = v66;
          double v133 = v59;
          double v134 = v52;
          uint64_t v91 = objc_msgSend_substrokeCount(v16, v86, v87, v88, v89, v90);
          objc_msgSend_bounds(v16, v92, v93, v94, v95, v96);
          double v98 = v97;
          double v100 = v99;
          double v102 = v101;
          double v104 = v103;
          objc_msgSend_originalBounds(v16, v105, v106, v107, v108, v109);
          uint64_t v116 = v115;
          uint64_t v118 = v117;
          uint64_t v120 = v119;
          uint64_t v122 = v121;
          if (v16) {
            objc_msgSend_principalLines(v16, v110, v111, v112, v113, v114);
          }
          else {
            memset(v138, 0, sizeof(v138));
          }
          objc_msgSend_tokenWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(CHTokenizedTextResultToken, v110, (uint64_t)v33, (uint64_t)v39, v45, v79, v85, OriginalToken, v134, v133, v132, v131, v98, v100, v102, v104, v91, v116, v118,
            v120,
            v122,
          uint64_t v123 = v138);

          objc_msgSend_addObject_(v136, v124, (uint64_t)v123, v125, v126, v127);
        }
      }
      uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v10, (uint64_t)&v139, (uint64_t)v143, 16, v14);
    }
    while (v9);
  }

  return v136;
}

void sub_1C4A8DED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8E640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8E998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8E9B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8E9C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8E9E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8E9F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8EA14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A8F564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,void *a46,void *a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a65, 8);

  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x210], 8);

  _Block_object_dispose(&STACK[0x230], 8);
  double v73 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v73;
    operator delete(v73);
  }

  _Unwind_Resume(a1);
}

__n128 sub_1C4A8F8C8(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1C4A8F8EC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1C4A8F904(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  id v6 = a2;
  if ((objc_msgSend_properties(v6, v7, v8, v9, v10, v11) & 0x20) != 0)
  {
    uint64_t v30 = objc_msgSend_string(v6, v12, v13, v14, v15, v16);
    uint64_t v23 = objc_msgSend_length(v30, v31, v32, v33, v34, v35) + 1;

    uint64_t v29 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) + 1;
  }
  else
  {
    uint64_t v17 = objc_msgSend_string(v6, v12, v13, v14, v15, v16);
    uint64_t v23 = objc_msgSend_length(v17, v18, v19, v20, v21, v22);

    uint64_t v29 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
  }
  if (objc_msgSend_length(*(void **)(a1 + 32), v24, v25, v26, v27, v28) + v29 == *(void *)(a1 + 112)) {
    *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a4;
  }
  if (*(unsigned char *)(a1 + 120) && v29 == *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24))
  {
    unint64_t v41 = objc_msgSend_length(*(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40), v36, v37, v38, v39, v40);
    uint64_t v47 = objc_msgSend_string(v6, v42, v43, v44, v45, v46);
    if (v41 >= objc_msgSend_length(v47, v48, v49, v50, v51, v52))
    {
      double v59 = objc_msgSend_string(v6, v53, v54, v55, v56, v57);
      uint64_t v58 = objc_msgSend_length(v59, v60, v61, v62, v63, v64);
    }
    else
    {
      uint64_t v58 = objc_msgSend_length(*(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40), v53, v54, v55, v56, v57);
    }

    uint64_t v69 = objc_msgSend_substringToIndex_(*(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40), v65, v58, v66, v67, v68);
    uint64_t v75 = objc_msgSend_string(v6, v70, v71, v72, v73, v74);
    uint64_t v80 = objc_msgSend_substringFromIndex_(v75, v76, v58, v77, v78, v79);

    uint64_t v322 = (void *)v80;
    uint64_t v85 = objc_msgSend_stringByAppendingString_((void *)v69, v81, v80, v82, v83, v84);

    uint64_t v91 = objc_msgSend_string(v6, v86, v87, v88, v89, v90);
    unint64_t v323 = v85;
    LOBYTE(v69) = objc_msgSend_isEqualToString_(v85, v92, (uint64_t)v91, v93, v94, v95);

    if ((v69 & 1) == 0)
    {
      double v101 = [CHTokenizedTextResultToken alloc];
      uint64_t v107 = objc_msgSend_strokeIndexes(v6, v102, v103, v104, v105, v106);
      unsigned int v321 = objc_msgSend_wordID(v6, v108, v109, v110, v111, v112);
      objc_msgSend_modelScore(v6, v113, v114, v115, v116, v117);
      double v320 = v118;
      objc_msgSend_recognitionScore(v6, v119, v120, v121, v122, v123);
      double v319 = v124;
      objc_msgSend_combinedScore(v6, v125, v126, v127, v128, v129);
      double v318 = v130;
      objc_msgSend_alignmentScore(v6, v131, v132, v133, v134, v135);
      double v317 = v136;
      uint64_t v142 = objc_msgSend_properties(v6, v137, v138, v139, v140, v141);
      uint64_t v148 = objc_msgSend_recognizerSourceLocale(v6, v143, v144, v145, v146, v147);
      uint64_t v154 = objc_msgSend_inputSources(v6, v149, v150, v151, v152, v153);
      uint64_t v160 = objc_msgSend_substrokeCount(v6, v155, v156, v157, v158, v159);
      objc_msgSend_bounds(v6, v161, v162, v163, v164, v165);
      double v167 = v166;
      double v169 = v168;
      double v171 = v170;
      double v173 = v172;
      objc_msgSend_originalBounds(v6, v174, v175, v176, v177, v178);
      uint64_t v185 = v184;
      uint64_t v187 = v186;
      uint64_t v189 = v188;
      uint64_t v191 = v190;
      if (v6) {
        objc_msgSend_principalLines(v6, v179, v180, v181, v182, v183);
      }
      else {
        memset(v324, 0, 128);
      }
      uint64_t v192 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v101, v179, (uint64_t)v323, (uint64_t)v107, v321, v142, v148, v154 | 0x100, v320, v319, v318, v317, v167, v169, v171, v173, v160, v185, v187,
                       v189,
                       v191,
                       v324);

      uint64_t v197 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v193, *a4, v194, v195, v196);
      long long v203 = objc_msgSend_textTokenRows(v197, v198, v199, v200, v201, v202);
      long long v208 = objc_msgSend_objectAtIndexedSubscript_(v203, v204, a4[1], v205, v206, v207);

      uint64_t v219 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v209, v210, v211, v212, v213);
      for (unint64_t i = 0; i < objc_msgSend_count(v208, v214, v215, v216, v217, v218); ++i)
      {
        if (i == a4[2])
        {
          objc_msgSend_addObject_(v219, v221, (uint64_t)v192, v222, v223, v224);
        }
        else
        {
          v225 = objc_msgSend_objectAtIndex_(v208, v221, i, v222, v223, v224);
          objc_msgSend_addObject_(v219, v226, (uint64_t)v225, v227, v228, v229);
        }
      }
      uint64_t v230 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v221, *a4, v222, v223, v224);
      objc_msgSend_setTokenRowWithTokens_atIndex_(v230, v231, (uint64_t)v219, a4[1], v232, v233);

      uint64_t v238 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v234, *a4, v235, v236, v237);
      uint64_t v243 = objc_msgSend_addTokenRowWithTokens_(v238, v239, (uint64_t)v208, v240, v241, v242);

      uint64_t v244 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 48);
      if (*(void *)(v244 + 8 * *a4) == a4[1]) {
        *(void *)(v244 + 8 * *a4) = v243;
      }
    }
    uint64_t v245 = objc_msgSend_string(v6, v96, v97, v98, v99, v100);
    unint64_t v251 = objc_msgSend_length(v245, v246, v247, v248, v249, v250);

    if (objc_msgSend_length(*(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40), v252, v253, v254, v255, v256) <= v251)
    {
      uint64_t v288 = *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24);
      if (v288 != objc_msgSend_count(*(void **)(a1 + 48), v257, v258, v259, v260, v261) - 1)
      {
        uint64_t v295 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 48), v289, ++*(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24), v290, v291, v292);
        *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = objc_msgSend_integerValue(v295, v296, v297, v298, v299, v300);

        uint64_t v301 = *(void **)(a1 + 56);
        uint64_t v306 = objc_msgSend_numberWithInteger_(NSNumber, v302, *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24), v303, v304, v305);
        uint64_t v311 = objc_msgSend_objectForKey_(v301, v307, (uint64_t)v306, v308, v309, v310);
        uint64_t v312 = *(void *)(*(void *)(a1 + 88) + 8);
        v313 = *(void **)(v312 + 40);
        *(void *)(v312 + 40) = v311;

LABEL_36:
        goto LABEL_37;
      }
      uint64_t v293 = *(void *)(*(void *)(a1 + 80) + 8);
      uint64_t v294 = -1;
LABEL_35:
      *(void *)(v293 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v294;
      goto LABEL_36;
    }
    uint64_t v262 = *(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
    v263 = objc_msgSend_string(v6, v257, v258, v259, v260, v261);
    uint64_t v269 = objc_msgSend_length(v263, v264, v265, v266, v267, v268);
    v273 = objc_msgSend_substringWithRange_(v262, v270, v269, 1, v271, v272);
    if (objc_msgSend_isEqualToString_(v273, v274, @" ", v275, v276, v277))
    {
      unint64_t v283 = objc_msgSend_length(*(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40), v278, v279, v280, v281, v282);

      if (v283 > v251 + 1)
      {
        objc_msgSend_substringFromIndex_(*(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40), v284, ++v251, v285, v286, v287);
        uint64_t v314 = LABEL_34:;
        uint64_t v315 = *(void *)(*(void *)(a1 + 88) + 8);
        uint64_t v316 = *(void **)(v315 + 40);
        *(void *)(v315 + 40) = v314;

        uint64_t v293 = *(void *)(*(void *)(a1 + 80) + 8);
        uint64_t v294 = *(void *)(v293 + 24) + v251;
        goto LABEL_35;
      }
    }
    else
    {
    }
    objc_msgSend_substringFromIndex_(*(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40), v284, v251, v285, v286, v287);
    goto LABEL_34;
  }
LABEL_37:
  *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) += v23;
}

void sub_1C4A8FF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A90114(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C4A9046C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  uint64_t v21 = va_arg(va1, void);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);

  _Unwind_Resume(a1);
}

void sub_1C4A9055C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A90570(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v35 = a2;
  if ((objc_msgSend_properties(v35, v6, v7, v8, v9, v10) & 0x20) != 0)
  {
    uint64_t v29 = objc_msgSend_string(v35, v11, v12, v13, v14, v15);
    uint64_t v22 = objc_msgSend_length(v29, v30, v31, v32, v33, v34) + 1;

    uint64_t v28 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 1;
  }
  else
  {
    uint64_t v16 = objc_msgSend_string(v35, v11, v12, v13, v14, v15);
    uint64_t v22 = objc_msgSend_length(v16, v17, v18, v19, v20, v21);

    uint64_t v28 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
  if (objc_msgSend_length(*(void **)(a1 + 32), v23, v24, v25, v26, v27) + v28 == *(void *)(a1 + 56)) {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a4;
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += v22;
}

void sub_1C4A9065C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9068C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A906A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A906B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A90EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A911A8(uint64_t a1, void *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v9 = objc_msgSend_strokeIndexes(v3, v4, v5, v6, v7, v8);
  uint64_t isEqualToIndexSet = objc_msgSend_isEqualToIndexSet_(v9, v10, *(void *)(a1 + 32), v11, v12, v13);

  if ((isEqualToIndexSet & 1) == 0)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v15 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = objc_msgSend_description(v3, v16, v17, v18, v19, v20);
      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v28 = objc_msgSend_strokeIndexes(v3, v23, v24, v25, v26, v27);
      int v30 = 138412802;
      uint64_t v31 = v21;
      __int16 v32 = 2112;
      uint64_t v33 = v22;
      __int16 v34 = 2112;
      id v35 = v28;
      _os_log_impl(&dword_1C492D000, v15, OS_LOG_TYPE_ERROR, "Unexpected mismatched stroke indexes in result %@. Top result stroke index set contains %@. This alternative result stroke index set contains %@.", (uint8_t *)&v30, 0x20u);
    }
  }

  return isEqualToIndexSet;
}

void sub_1C4A912F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A91310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A91324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A91338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A922E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9275C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E4F28B88], a2, a3, a4, a5, a6);
  obunint64_t j = (id)objc_msgSend_mutableCopy(v6, v7, v8, v9, v10, v11);

  uint64_t v17 = objc_msgSend_ch_englishCharacterSet(MEMORY[0x1E4F28B88], v12, v13, v14, v15, v16);
  objc_msgSend_formUnionWithCharacterSet_(obj, v18, (uint64_t)v17, v19, v20, v21);

  objc_storeStrong((id *)&qword_1EA3C9F30, obj);
  uint64_t v27 = objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E4F28B88], v22, v23, v24, v25, v26);
  uint64_t v33 = objc_msgSend_mutableCopy(v27, v28, v29, v30, v31, v32);

  uint64_t v39 = objc_msgSend_ch_latinCharacterSet(MEMORY[0x1E4F28B88], v34, v35, v36, v37, v38);
  objc_msgSend_formUnionWithCharacterSet_(v33, v40, (uint64_t)v39, v41, v42, v43);

  uint64_t v44 = (void *)qword_1EA3C9F38;
  qword_1EA3C9F38 = (uint64_t)v33;
}

void sub_1C4A92838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v10;

  _Unwind_Resume(a1);
}

void sub_1C4A92858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A92870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1C4A9288C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A928A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A928B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A928CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A928E4(uint64_t a1, void *a2)
{
  id v8 = a2;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) &= objc_msgSend_properties(v8, v3, v4, v5, v6, v7) >> 2;
}

void sub_1C4A92940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A92954(uint64_t a1, void *a2)
{
  id v8 = a2;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) &= (unsigned __int16)objc_msgSend_properties(v8, v3, v4, v5, v6, v7) >> 8;
}

void sub_1C4A929B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A93028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9339C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A933B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A933C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4A933D4(_NSRange *a1, NSIndexPath *a2)
{
  uint64_t v2 = trimIndexPath(a2, a1[2]);
  return v2;
}

void sub_1C4A93BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }

  _Unwind_Resume(a1);
}

void sub_1C4A94FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51)
{
  _Block_object_dispose(&STACK[0x290], 8);
  _Unwind_Resume(a1);
}

void sub_1C4A955E4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v66 = v6;
  if (*a4 == *(void *)(a1 + 56) && !a4[2])
  {
    uint64_t v28 = objc_msgSend_properties(v6, v7, v8, v9, v10, v11);
    unint64_t v39 = objc_msgSend_inputSources(v66, v29, v30, v31, v32, v33) & 0xFFFFFFFFFFFFFFFBLL;
    if (*(unsigned char *)(a1 + 72) && (objc_msgSend_properties(v66, v34, v35, v36, v37, v38) & 0x20) == 0)
    {
      v39 |= 0x200uLL;
      v28 |= 0x20uLL;
    }
    uint64_t v40 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    uint64_t v41 = objc_msgSend_string(v66, v34, v35, v36, v37, v38);
    uint64_t v47 = objc_msgSend_firstComposedCharacter(v41, v42, v43, v44, v45, v46);
    int v50 = objc_msgSend_shouldRemoveSpaceBetweenPreviousChar_andNextChar_inLocale_(CHRecognizerConfiguration, v48, v40, (uint64_t)v47, *(void *)(a1 + 32), v49);

    if (v50) {
      uint64_t v56 = v39 | 0x200;
    }
    else {
      uint64_t v56 = v39;
    }
    uint64_t v57 = objc_msgSend_mutableCopy(v66, v51, v52, v53, v54, v55);
    uint64_t v17 = v57;
    if (v50) {
      objc_msgSend_setProperties_(v57, v58, v28 & 0xFFFFFFFFFFFFFFDFLL, v59, v60, v61);
    }
    else {
      objc_msgSend_setProperties_(v57, v58, v28, v59, v60, v61);
    }
    objc_msgSend_setInputSources_(v17, v62, v56, v63, v64, v65);
  }
  else
  {
    uint64_t v17 = v6;
    if (!objc_msgSend_isTopOriginal(v6, v7, v8, v9, v10, v11)) {
      goto LABEL_16;
    }
    uint64_t v18 = objc_msgSend_inputSources(v66, v12, v13, v14, v15, v16);
    uint64_t v17 = objc_msgSend_mutableCopy(v66, v19, v20, v21, v22, v23);
    objc_msgSend_setInputSources_(v17, v24, v18 & 0xFFFFFFFFFFFFFFFBLL, v25, v26, v27);
  }

LABEL_16:
  objc_msgSend_addObject_(*(void **)(a1 + 40), v12, (uint64_t)v17, v14, v15, v16);
}

void sub_1C4A95768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A957C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A957E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E4F28E58], a2, a3, a4, a5, a6);
  uint64_t v7 = (void *)qword_1EA3C9F48;
  qword_1EA3C9F48 = v6;

  uint64_t v8 = (void *)qword_1EA3C9F48;
  objc_msgSend_ch_basicAlphabeticCharacterSet(MEMORY[0x1E4F28B88], v9, v10, v11, v12, v13);
  id v18 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v8, v14, (uint64_t)v18, v15, v16, v17);
}

void sub_1C4A9585C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A95870(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C4A95B88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A960BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A96260(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C4A9626C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v87 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v6, v7, v8, v9, v10);
  uint64_t v16 = objc_msgSend_strokeIndexes(v5, v11, v12, v13, v14, v15);
  v88[0] = MEMORY[0x1E4F143A8];
  v88[1] = 3221225472;
  v88[2] = sub_1C4A96538;
  v88[3] = &unk_1E64E2FA8;
  uint64_t v90 = *(void *)(a1 + 56);
  id v17 = v87;
  id v89 = v17;
  objc_msgSend_enumerateIndexesUsingBlock_(v16, v18, (uint64_t)v88, v19, v20, v21);

  uint64_t v27 = objc_msgSend_mutableCopy(v5, v22, v23, v24, v25, v26);
  objc_msgSend_setStrokeIndexes_(v27, v28, (uint64_t)v17, v29, v30, v31);
  if (!a3)
  {
    long long v86 = objc_msgSend_lastComposedCharacter(*(void **)(a1 + 32), v32, v33, v34, v35, v36);
    uint64_t v85 = objc_msgSend_string(v5, v37, v38, v39, v40, v41);
    uint64_t v84 = objc_msgSend_firstComposedCharacter(v85, v42, v43, v44, v45, v46);
    uint64_t v52 = objc_msgSend_recognizerSourceLocale(v5, v47, v48, v49, v50, v51);
    uint64_t v53 = *(void *)(a1 + 40);
    uint64_t v59 = objc_msgSend_length(*(void **)(a1 + 32), v54, v55, v56, v57, v58);
    uint64_t v65 = objc_msgSend_string(v5, v60, v61, v62, v63, v64);
    uint64_t v71 = objc_msgSend_length(v65, v66, v67, v68, v69, v70);
    LODWORD(v53) = objc_msgSend_shouldInsertSpaceBetweenPreviousChar_andNextChar_inLocale_inString_atRange_withQuoteCount_(CHRecognizerConfiguration, v72, (uint64_t)v86, (uint64_t)v84, (uint64_t)v52, v53, v59, v71, 0);

    if (v53)
    {
      uint64_t v73 = objc_msgSend_properties(v27, v32, v33, v34, v35, v36);
      objc_msgSend_setProperties_(v27, v74, v73 | 0x20, v75, v76, v77);
    }
  }
  uint64_t v78 = *(void **)(a1 + 48);
  uint64_t v79 = objc_msgSend_copy(v27, v32, v33, v34, v35, v36);
  objc_msgSend_addObject_(v78, v80, (uint64_t)v79, v81, v82, v83);
}

void sub_1C4A96468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A96538(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addIndex_(*(void **)(a1 + 32), a2, (uint64_t)&a2[*(void *)(a1 + 40)], a4, a5, a6);
}

void sub_1C4A96784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A96798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A96810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A969AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A96A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A96A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A96A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9796C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 - 152);
  if (v3)
  {
    uint64_t v4 = *(void *)(v1 - 144);
    id v5 = *(void **)(v1 - 152);
    if (v4 != v3)
    {
      uint64_t v6 = *(void *)(v1 - 144);
      do
      {
        uint64_t v8 = *(void **)(v6 - 24);
        v6 -= 24;
        uint64_t v7 = v8;
        if (v8)
        {
          *(void *)(v4 - 16) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      id v5 = *(void **)(v1 - 152);
    }
    *(void *)(v1 - 144) = v3;
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1C4A97C60(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addIndex_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

BOOL sub_1C4A97C6C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_compare_(a2, (const char *)a2, *(void *)(a1 + 32), a4, a5, a6) == 0;
}

void sub_1C4A97DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A99BF0(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 - 208);
  if (v4)
  {
    *(void *)(v2 - 200) = v4;
    operator delete(v4);
  }
  id v5 = *(void **)(v2 - 184);
  if (v5)
  {
    *(void *)(v2 - 176) = v5;
    operator delete(v5);
  }
  sub_1C496B66C((void **)(v2 - 160));
  sub_1C496B66C((void **)(v2 - 136));

  _Unwind_Resume(a1);
}

void sub_1C4A9A7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9AD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9B250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9B3B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = NSNumber;
  uint64_t v9 = objc_msgSend_count(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  objc_msgSend_numberWithUnsignedInteger_(v8, v10, v9, v11, v12, v13);
  id v23 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v14 = *(void **)(a1 + 32);
  uint64_t v19 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v15, (uint64_t)a2, v16, v17, v18);
  objc_msgSend_setObject_forKeyedSubscript_(v14, v20, (uint64_t)v23, (uint64_t)v19, v21, v22);
}

void sub_1C4A9B448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9B460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9B474(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void **)(a1 + 40);
  objc_msgSend_numberWithUnsignedInteger_(NSNumber, a2, (uint64_t)a2, a4, a5, a6);
  id v23 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v12 = objc_msgSend_objectForKeyedSubscript_(v7, v8, (uint64_t)v23, v9, v10, v11);
  int v18 = objc_msgSend_intValue(v12, v13, v14, v15, v16, v17);
  objc_msgSend_addIndex_(v6, v19, v18, v20, v21, v22);
}

void sub_1C4A9B4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9B504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9B8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A9BA00(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_objectAtIndex_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
  uint64_t v13 = (int)objc_msgSend_intValue(v7, v8, v9, v10, v11, v12);

  int v18 = *(void **)(a1 + 40);
  return objc_msgSend_addIndex_(v18, v14, v13, v15, v16, v17);
}

void sub_1C4A9BA60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9BA70(char ***a1, uint64_t a2, char **a3, uint64_t a4, uint64_t a5)
{
  if (a5 >= 1)
  {
    uint64_t v6 = a3;
    uint64_t v8 = *a1;
    uint64_t v9 = (a2 - (uint64_t)*a1) / 24;
    uint64_t v10 = &(*a1)[3 * v9];
    uint64_t v13 = a1[2];
    uint64_t v11 = (uint64_t)(a1 + 2);
    uint64_t v12 = v13;
    unint64_t v14 = *(void *)(v11 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v13 - v14) >> 3)) >= a5)
    {
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)v10) >> 3)) >= a5)
      {
        uint64_t v19 = (uint64_t)&a3[3 * a5];
        uint64_t v20 = *(char ***)(v11 - 8);
      }
      else
      {
        uint64_t v19 = (uint64_t)&a3[(uint64_t)(v14 - (void)v10) >> 3];
        uint64_t v20 = (char **)sub_1C4A9BEB4(v11, v19, a4, *(void **)(v11 - 8));
        a1[1] = v20;
        if ((uint64_t)(v14 - (void)v10) < 1) {
          return;
        }
      }
      uint64_t v21 = &v10[3 * a5];
      uint64_t v22 = &v20[-3 * a5];
      id v23 = v20;
      if ((unint64_t)v22 < v14)
      {
        id v23 = v20;
        do
        {
          *id v23 = 0;
          v23[1] = 0;
          v23[2] = 0;
          *(_OWORD *)id v23 = *(_OWORD *)v22;
          v23[2] = v22[2];
          *uint64_t v22 = 0;
          v22[1] = 0;
          v22[2] = 0;
          v23 += 3;
          v22 += 3;
        }
        while ((unint64_t)v22 < v14);
      }
      a1[1] = v23;
      if (v20 != v21)
      {
        uint64_t v24 = (void **)(v20 - 3);
        uint64_t v25 = v20 - v21;
        do
        {
          uint64_t v27 = *v24;
          if (*v24)
          {
            v24[1] = v27;
            operator delete(v27);
            const char *v24 = 0;
            v24[1] = 0;
            v24[2] = 0;
          }
          uint64_t v26 = (uint64_t)&v10[v25 - 3];
          *(_OWORD *)uint64_t v24 = *(_OWORD *)v26;
          v24[2] = v10[v25 - 1];
          *(void *)uint64_t v26 = 0;
          *(void *)(v26 + 8) = 0;
          *(void *)(v26 + 16) = 0;
          v24 -= 3;
          v25 -= 3;
        }
        while (v25 * 8);
      }
      if ((char **)v19 != v6)
      {
        do
        {
          if (v6 != v10) {
            sub_1C494ACB0(v10, *v6, v6[1], (v6[1] - *v6) >> 3);
          }
          v6 += 3;
          v10 += 3;
        }
        while (v6 != (char **)v19);
      }
    }
    else
    {
      unint64_t v15 = a5 - 0x5555555555555555 * ((uint64_t)(v14 - (void)v8) >> 3);
      if (v15 > 0xAAAAAAAAAAAAAAALL) {
        sub_1C494A220();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (v12 - v8);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      uint64_t v47 = a1;
      if (v17)
      {
        if (v17 > 0xAAAAAAAAAAAAAAALL) {
          sub_1C4949AA8();
        }
        int v18 = (char *)operator new(24 * v17);
      }
      else
      {
        int v18 = 0;
      }
      uint64_t v48 = v9;
      uint64_t v49 = &v18[24 * v17];
      uint64_t v28 = 24 * a5;
      uint64_t v29 = &v18[24 * v9 + 24 * a5];
      uint64_t v46 = &v18[24 * v9];
      uint64_t v30 = v46;
      do
      {
        *(void *)uint64_t v30 = 0;
        *((void *)v30 + 1) = 0;
        *((void *)v30 + 2) = 0;
        uint64_t v33 = *v6;
        uint64_t v32 = v6[1];
        int64_t v34 = v32 - *v6;
        if (v32 != *v6)
        {
          if (v34 < 0) {
            sub_1C494A220();
          }
          uint64_t v35 = (char *)operator new(v32 - *v6);
          *(void *)uint64_t v30 = v35;
          *((void *)v30 + 1) = v35;
          uint64_t v31 = &v35[8 * (v34 >> 3)];
          *((void *)v30 + 2) = v31;
          memcpy(v35, v33, v34);
          *((void *)v30 + 1) = v31;
        }
        v30 += 24;
        v6 += 3;
        v28 -= 24;
      }
      while (v28);
      uint64_t v36 = v46;
      uint64_t v37 = *v47;
      if (*v47 != v10)
      {
        uint64_t v38 = 3 * v48;
        do
        {
          uint64_t v39 = &v18[v38 * 8];
          uint64_t v40 = &v8[v38];
          *(_OWORD *)(v39 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)&v8[v38 - 3];
          *((void *)v39 - 1) = v8[v38 - 1];
          *(v40 - 3) = 0;
          *(v40 - 2) = 0;
          *(v40 - 1) = 0;
          v18 -= 24;
          v8 -= 3;
        }
        while (&v8[v38] != v37);
        uint64_t v36 = &v18[24 * v48];
      }
      uint64_t v41 = v47[1];
      if (v41 != v10)
      {
        do
        {
          *(void *)uint64_t v29 = 0;
          *((void *)v29 + 1) = 0;
          *((void *)v29 + 2) = 0;
          *(_OWORD *)uint64_t v29 = *(_OWORD *)v10;
          *((void *)v29 + 2) = v10[2];
          *uint64_t v10 = 0;
          v10[1] = 0;
          v10[2] = 0;
          v29 += 24;
          v10 += 3;
        }
        while (v10 != v41);
        uint64_t v10 = v47[1];
      }
      uint64_t v42 = *v47;
      *uint64_t v47 = (char **)v36;
      v47[1] = (char **)v29;
      v47[2] = (char **)v49;
      if (v10 != v42)
      {
        uint64_t v43 = v10;
        do
        {
          uint64_t v45 = *(v43 - 3);
          v43 -= 3;
          uint64_t v44 = v45;
          if (v45)
          {
            *(v10 - 2) = v44;
            operator delete(v44);
          }
          uint64_t v10 = v43;
        }
        while (v43 != v42);
      }
      if (v42) {
        operator delete(v42);
      }
    }
  }
}

void sub_1C4A9BE6C(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_1C4A9BE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1C496CD14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4A9BE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  unint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  a14 = v14;
  sub_1C496CD14((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void *sub_1C4A9BEB4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      uint64_t v9 = *(const void **)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      int64_t v10 = v8 - *(void *)v6;
      if (v8 != *(void *)v6)
      {
        if (v10 < 0) {
          sub_1C494A220();
        }
        uint64_t v11 = (char *)operator new(v8 - *(void *)v6);
        *a4 = v11;
        a4[1] = v11;
        uint64_t v7 = &v11[8 * (v10 >> 3)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_1C4A9BF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C4A9BF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_1C49C6848((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_1C4A9BFB8(char **a1, const void *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1C494A220();
  }
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555) {
    unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
      sub_1C4949AA8();
    }
    uint64_t v11 = (char *)operator new(24 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = &v11[24 * v5];
  uint64_t v13 = &v11[24 * v10];
  *((void *)&v25 + 1) = v13;
  *((void *)v12 + 1) = 0;
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 2) = 0;
  int64_t v14 = a3 - (void)a2;
  if (v14)
  {
    if (v14 < 0) {
      sub_1C494A220();
    }
    unint64_t v15 = operator new(v14);
    *(void *)uint64_t v12 = v15;
    unint64_t v16 = (unint64_t)v15 + 8 * (v14 >> 3);
    memcpy(v15, a2, v14);
    *(int64x2_t *)(v12 + 8) = vdupq_n_s64(v16);
  }
  unint64_t v17 = v12 + 24;
  *(void *)&long long v25 = v12 + 24;
  if (v3 == v4)
  {
    *a1 = v12;
    a1[1] = v17;
    a1[2] = v13;
  }
  else
  {
    do
    {
      int v18 = v12;
      *((void *)v12 - 2) = 0;
      *((void *)v12 - 1) = 0;
      long long v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v12 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v19;
      v12 -= 24;
      *((void *)v18 - 1) = *((void *)v3 + 2);
      *(void *)uint64_t v3 = 0;
      *((void *)v3 + 1) = 0;
      *((void *)v3 + 2) = 0;
    }
    while (v3 != v4);
    uint64_t v3 = *a1;
    uint64_t v20 = a1[1];
    *a1 = v12;
    *(_OWORD *)(a1 + 1) = v25;
    unint64_t v17 = (char *)v25;
    if (v20 != v3)
    {
      uint64_t v21 = v20;
      do
      {
        id v23 = (void *)*((void *)v21 - 3);
        v21 -= 24;
        uint64_t v22 = v23;
        if (v23)
        {
          *((void *)v20 - 2) = v22;
          operator delete(v22);
        }
        uint64_t v20 = v21;
      }
      while (v21 != v3);
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v17;
}

void sub_1C4A9C188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v5 = *v2;
  if (*v2)
  {
    void *v3 = v5;
    operator delete(v5);
  }
  sub_1C496CD14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4A9C1AC(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  unint64_t v6 = a2;
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      uint64_t v11 = *(char ***)(a1 + 8);
      uint64_t v12 = *(char ***)a1;
      if (v11 != v10)
      {
        uint64_t v13 = *(char ***)(a1 + 8);
        do
        {
          unint64_t v15 = *(v13 - 3);
          v13 -= 3;
          int64_t v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          uint64_t v11 = v13;
        }
        while (v13 != v10);
        uint64_t v12 = *(char ***)a1;
      }
      *(void *)(a1 + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_40;
    }
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v21 = 2 * v20;
    if (2 * v20 <= __sz) {
      uint64_t v21 = __sz;
    }
    unint64_t v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL) {
LABEL_40:
    }
      sub_1C494A220();
    uint64_t v23 = 3 * v22;
    uint64_t v24 = operator new(24 * v22);
    *(void *)a1 = v24;
    *(void *)(a1 + 8) = v24;
    *(void *)(a1 + 16) = &v24[v23];
    long long v25 = sub_1C4A9BEB4(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(void *)(a1 + 8) = v25;
    return;
  }
  unint64_t v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    uint64_t v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      uint64_t v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10) {
          sub_1C494ACB0(v10, *v6, v6[1], (v6[1] - *v6) >> 3);
        }
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      unint64_t v10 = *(char ***)(a1 + 8);
    }
    long long v25 = sub_1C4A9BEB4(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    long long v19 = *(char ***)a1;
    do
    {
      if (v6 != v10) {
        sub_1C494ACB0(v10, *v6, v6[1], (v6[1] - *v6) >> 3);
      }
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    unint64_t v16 = *(char ***)(a1 + 8);
    if (v16 == v19) {
      goto LABEL_39;
    }
    goto LABEL_35;
  }
  long long v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    uint64_t v26 = v16;
    do
    {
      uint64_t v28 = *(v26 - 3);
      v26 -= 3;
      uint64_t v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      unint64_t v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(void *)(a1 + 8) = v19;
}

void sub_1C4A9C410(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C4A9C418(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A9C420(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a1) {
    return 0;
  }
  unint64_t v6 = objc_msgSend_stringWithFormat_(NSString, a2, @"%C", a4, a5, a6, a2);
  uint64_t v11 = objc_msgSend_objectForKeyedSubscript_(&unk_1F203D0D0, v7, (uint64_t)v6, v8, v9, v10);
  uint64_t v17 = objc_msgSend_unsignedIntegerValue(v11, v12, v13, v14, v15, v16);

  return v17;
}

void sub_1C4A9C4BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9C4D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9C648(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A9C658()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F93E68]);
  uint64_t v1 = (void *)qword_1EA3C92D0;
  qword_1EA3C92D0 = (uint64_t)v0;

  uint64_t v2 = qword_1EA3C92D0;
  return MEMORY[0x1F4181798](v2, sel_spellServer_findMisspelledWordInString_language_wordCount_countOnly_correction_, 0, @"abcxyz", @"en_US", 0);
}

void sub_1C4A9C960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9CB80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9CC50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9CFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9D5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9D7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9E344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,void *a29,void *a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id a37)
{
  _Block_object_dispose(&a32, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A9E504(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4A9E514(uint64_t a1)
{
}

void sub_1C4A9E51C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v153 = *MEMORY[0x1E4F143B8];
  if (!objc_msgSend_pointCount(*(void **)(a1 + 32), a2, a3, a4, a5, a6)) {
    return;
  }
  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  if (!v7) {
    goto LABEL_7;
  }
  if (qword_1EA3C92E8 == -1)
  {
    id v13 = (id)qword_1EA3C92E0;
    if (!v8) {
      goto LABEL_26;
    }
  }
  else
  {
    dispatch_once(&qword_1EA3C92E8, &unk_1F2013A08);
    id v13 = (id)qword_1EA3C92E0;
    if (!v8) {
      goto LABEL_26;
    }
  }
  uint64_t v14 = objc_msgSend_objectForKey_(v8, v9, CHMathRecognitionOptionActiveAlphabetMode, v10, v11, v12);
  int isEqualToString = objc_msgSend_isEqualToString_(v14, v15, @"scientific", v16, v17, v18);

  if (isEqualToString)
  {

LABEL_7:
    uint64_t v24 = 0;
    goto LABEL_27;
  }
  long long v25 = objc_msgSend_objectForKey_(v8, v20, CHMathRecognitionOptionActiveAlphabetMode, v21, v22, v23);
  int v30 = objc_msgSend_isEqualToString_(v25, v26, @"custom", v27, v28, v29);

  if (v30)
  {
    uint64_t v35 = objc_msgSend_objectForKey_(v8, v31, CHMathRecognitionOptionActiveAlphabet, v32, v33, v34);
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v40 = v35;
      if (!v40) {
        goto LABEL_16;
      }
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0
        || (objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E4F28B88], v41, v42, v43, v44, v45),
            uint64_t v46 = objc_claimAutoreleasedReturnValue(),
            objc_msgSend_componentsSeparatedByCharactersInSet_(v35, v47, (uint64_t)v46, v48, v49, v50),
            id v40 = (id)objc_claimAutoreleasedReturnValue(),
            v46,
            !v40))
      {
LABEL_16:
        if (qword_1EA3CA000 == -1)
        {
          uint64_t v56 = (id)qword_1EA3C9F98;
          if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
          {
LABEL_23:
            uint64_t v24 = v13;
            goto LABEL_24;
          }
        }
        else
        {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
          uint64_t v56 = (id)qword_1EA3C9F98;
          if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
            goto LABEL_23;
          }
        }
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1C492D000, v56, OS_LOG_TYPE_ERROR, "Active math alphabet (CHMathRecognitionOptionActiveAlphabet) must be defined in \"custom\" alphabet mode.", buf, 2u);
        goto LABEL_23;
      }
    }
    uint64_t v51 = objc_msgSend_indexesOfObjectsPassingTest_(v40, v36, (uint64_t)&unk_1F2013A28, v37, v38, v39);
    uint64_t v56 = objc_msgSend_objectsAtIndexes_(v40, v52, (uint64_t)v51, v53, v54, v55);

    if (objc_msgSend_count(v56, v57, v58, v59, v60, v61))
    {
      uint64_t v24 = objc_msgSend_setWithObjects_(MEMORY[0x1E4F1CA80], v62, @"<BOS>", v63, v64, v65, @"<EOS>", @"<PAD>", 0);
      objc_msgSend_addObjectsFromArray_(v24, v66, (uint64_t)v56, v67, v68, v69);

LABEL_24:
      goto LABEL_27;
    }
    if (qword_1EA3CA000 == -1)
    {
      uint64_t v70 = (id)qword_1EA3C9F98;
      if (!os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
      {
LABEL_22:

        goto LABEL_23;
      }
    }
    else
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      uint64_t v70 = (id)qword_1EA3C9F98;
      if (!os_log_type_enabled(v70, OS_LOG_TYPE_ERROR)) {
        goto LABEL_22;
      }
    }
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C492D000, v70, OS_LOG_TYPE_ERROR, "Custom math alphabet can't be empty.", buf, 2u);
    goto LABEL_22;
  }
LABEL_26:
  uint64_t v24 = v13;
LABEL_27:

  uint64_t v75 = *(void *)(a1 + 40);
  if (v75) {
    objc_msgSend_setActiveAlphabet_(*(void **)(v75 + 56), v71, (uint64_t)v24, v72, v73, v74);
  }
  else {
    objc_msgSend_setActiveAlphabet_(0, v71, (uint64_t)v24, v72, v73, v74);
  }

  uint64_t v85 = objc_msgSend_declaredVariables(*(void **)(a1 + 40), v76, v77, v78, v79, v80);
  uint64_t v86 = *(void *)(a1 + 40);
  if (v86) {
    objc_msgSend_setDeclaredVariables_(*(void **)(v86 + 56), v81, (uint64_t)v85, v82, v83, v84);
  }
  else {
    objc_msgSend_setDeclaredVariables_(0, v81, (uint64_t)v85, v82, v83, v84);
  }

  uint64_t v92 = objc_msgSend_locales(*(void **)(a1 + 40), v87, v88, v89, v90, v91);

  uint64_t v98 = *(void **)(a1 + 40);
  if (v92)
  {
    uint64_t v103 = objc_msgSend_locales(v98, v93, v94, v95, v96, v97);
    uint64_t v104 = *(void *)(a1 + 40);
    if (v104) {
      objc_msgSend_setRecognitionLocales_(*(void **)(v104 + 56), v99, (uint64_t)v103, v100, v101, v102);
    }
    else {
      objc_msgSend_setRecognitionLocales_(0, v99, (uint64_t)v103, v100, v101, v102);
    }
  }
  else
  {
    if (v98) {
      uint64_t v98 = (void *)v98[7];
    }
    objc_msgSend_setRecognitionLocales_(v98, v93, MEMORY[0x1E4F1CBF0], v95, v96, v97);
  }
  if (qword_1EA3CA000 == -1)
  {
    uint64_t v105 = (id)qword_1EA3C9F98;
    if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
    {
LABEL_40:
      uint64_t v111 = objc_msgSend_strokeCount(*(void **)(a1 + 32), v106, v107, v108, v109, v110);
      uint64_t v112 = *(void **)(a1 + 40);
      if (v112) {
        uint64_t v112 = (void *)v112[7];
      }
      uint64_t v113 = v112;
      uint64_t v119 = objc_msgSend_activeAlphabet(v113, v114, v115, v116, v117, v118);
      uint64_t v125 = objc_msgSend_count(v119, v120, v121, v122, v123, v124);
      uint64_t v126 = *(void **)(a1 + 40);
      if (v126) {
        uint64_t v126 = (void *)v126[7];
      }
      uint64_t v127 = v126;
      uint64_t v133 = objc_msgSend_declaredVariables(v127, v128, v129, v130, v131, v132);
      uint64_t v139 = objc_msgSend_count(v133, v134, v135, v136, v137, v138);
      *(_DWORD *)buf = 134218496;
      uint64_t v148 = v111;
      __int16 v149 = 2048;
      uint64_t v150 = v125;
      __int16 v151 = 2048;
      uint64_t v152 = v139;
      _os_log_impl(&dword_1C492D000, v105, OS_LOG_TYPE_DEFAULT, "Running math recognizer on a drawing with %lu strokes. Active alphabet size: %lu, Declared variables count: %lu", buf, 0x20u);
    }
  }
  else
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v105 = (id)qword_1EA3C9F98;
    if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_40;
    }
  }

  uint64_t v140 = *(void **)(a1 + 40);
  if (v140) {
    uint64_t v140 = (void *)v140[7];
  }
  uint64_t v141 = v140;
  uint64_t v144 = objc_msgSend_recognizeDrawing_beamSize_shouldCancel_(v141, v142, *(void *)(a1 + 32), 2, *(void *)(a1 + 56), v143);
  uint64_t v145 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v146 = *(void **)(v145 + 40);
  *(void *)(v145 + 40) = v144;
}

void sub_1C4A9EAAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9EAC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9EAE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9EB04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9EBE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9EBFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9EC34(void *a1, void *a2, unsigned char *a3, unsigned char *a4, unsigned char *a5, void *a6)
{
  uint64_t v71 = a5;
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  id v10 = a1;
  id v72 = a2;
  id v11 = a6;
  *a3 = 0;
  uint64_t v73 = a4;
  *a4 = 0;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  obunint64_t j = v10;
  uint64_t v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v12, (uint64_t)&v75, (uint64_t)v79, 16, v13);
  if (v19)
  {
    uint64_t v20 = *(void *)v76;
    do
    {
      for (uint64_t i = 0; i != v19; ++i)
      {
        if (*(void *)v76 != v20) {
          objc_enumerationMutation(obj);
        }
        uint64_t v23 = *(void **)(*((void *)&v75 + 1) + 8 * i);
        uint64_t v24 = objc_msgSend_strokeIndexes(v23, v14, v15, v16, v17, v18, v71);
        objc_msgSend_addIndexes_(v11, v25, (uint64_t)v24, v26, v27, v28);

        uint64_t v34 = objc_msgSend_string(v23, v29, v30, v31, v32, v33);
        char isEqualToString = objc_msgSend_isEqualToString_(v34, v35, @"\\hline", v36, v37, v38);

        uint64_t v22 = a3;
        if (isEqualToString) {
          goto LABEL_5;
        }
        id v40 = objc_msgSend_string(v23, v14, v15, v16, v17, v18);
        if (objc_msgSend_isEqualToString_(v40, v41, @"\\begin{array}{lr}", v42, v43, v44))
        {

          uint64_t v22 = v73;
LABEL_5:
          *uint64_t v22 = 1;
          continue;
        }
        uint64_t v50 = objc_msgSend_string(v23, v45, v46, v47, v48, v49);
        char v55 = objc_msgSend_isEqualToString_(v50, v51, @"\\\\"", v52, v53, v54);

        uint64_t v22 = v73;
        if (v55) {
          goto LABEL_5;
        }
      }
      uint64_t v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v14, (uint64_t)&v75, (uint64_t)v79, 16, v18);
    }
    while (v19);
  }

  uint64_t v56 = (void *)MEMORY[0x1E4F28D60];
  uint64_t v62 = objc_msgSend_strokeCount(v72, v57, v58, v59, v60, v61);
  id v66 = objc_msgSend_indexSetWithIndexesInRange_(v56, v63, 0, v62, v64, v65);
  unsigned char *v71 = objc_msgSend_isEqualToIndexSet_(v11, v67, (uint64_t)v66, v68, v69, v70);
}

void sub_1C4A9EE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9EEEC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_componentsSeparatedByString_(@"! &() + , - . / 0 1 2 3 4 5 6 7 8 9 : = [ \\\\ \\ \\$ \\% \\ast \\cdot \\circ \\div \\frac \\hline \\lceil \\lfloor \\pi \\prime \\rceil \\rfloor \\sqrt \\times ] ^ _ a A b B c C d D e E f F g G H h i I j J k K L l m M n N o O p P q Q r R s S t T u U v V w W x X y Y z Z { | } \\begin{array}{lr} \\end{array} ¢ £ ¥ ₩ € ₴ ₺ ₽", a2, @" ", a4, a5, a6);
  id v16 = (id)objc_claimAutoreleasedReturnValue();
  id v10 = objc_msgSend_setWithObjects_(MEMORY[0x1E4F1CA80], v6, @"<BOS>", v7, v8, v9, @"<EOS>", @"<PAD>", 0);
  objc_msgSend_addObjectsFromArray_(v10, v11, (uint64_t)v16, v12, v13, v14);
  uint64_t v15 = (void *)qword_1EA3C92E0;
  qword_1EA3C92E0 = (uint64_t)v10;
}

void sub_1C4A9EF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9EFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

BOOL sub_1C4A9EFB8(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    BOOL v8 = objc_msgSend_length(v2, v3, v4, v5, v6, v7) != 0;

    return v8;
  }
  else
  {

    return 0;
  }
}

void sub_1C4A9F028(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9F038(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  if (a1)
  {
    label = dispatch_queue_get_label(0);
    if (strcmp(label, "com.apple.CoreHandwriting.mathRecognizerQueue"))
    {
      uint64_t v5 = *(NSObject **)(a1 + 64);
      if (v5)
      {
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = sub_1C4A9F124;
        block[3] = &unk_1E64E11B8;
        uint64_t v7 = v3;
        dispatch_sync(v5, block);

        return;
      }
    }
    v3[2](v3);
  }
}

void sub_1C4A9F114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4A9F124(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4A9F21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9F23C(uint64_t a1)
{
}

void sub_1C4A9F2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9F2FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v5 = *(void **)(v2 + 24);
  uint64_t v4 = (id *)(v2 + 24);
  if (v5 != v3) {
    objc_storeStrong(v4, v3);
  }
}

void sub_1C4A9F404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9F424(uint64_t a1)
{
}

void sub_1C4A9F4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9F4E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v5 = *(void **)(v2 + 32);
  uint64_t v4 = (id *)(v2 + 32);
  if (v5 != v3) {
    objc_storeStrong(v4, v3);
  }
}

void sub_1C4A9F654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9F66C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(v2 + 8);
  uint64_t v3 = (id *)(v2 + 8);
  if (v1 != v4) {
    objc_storeStrong(v3, v1);
  }
}

void sub_1C4A9F76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4A9F78C(uint64_t a1)
{
}

void sub_1C4A9F8B0(_Unwind_Exception *a1)
{
  uint64_t v7 = (void *)v2[19];
  if (v7)
  {
    do
    {
      uint64_t v17 = (void *)*v7;
      uint64_t v18 = (void *)v7[5];
      if (v18)
      {
        do
        {
          uint64_t v19 = (void *)*v18;
          operator delete(v18);
          uint64_t v18 = v19;
        }
        while (v19);
      }
      uint64_t v20 = (void *)v7[3];
      v7[3] = 0;
      if (v20) {
        operator delete(v20);
      }
      operator delete(v7);
      uint64_t v7 = v17;
    }
    while (v17);
  }
  BOOL v8 = (void *)v2[17];
  v2[17] = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = (void *)v2[13];
  if (v9)
  {
    do
    {
      uint64_t v21 = (void *)*v9;
      uint64_t v22 = (void *)v9[6];
      if (v22)
      {
        do
        {
          uint64_t v23 = (void *)*v22;
          operator delete(v22);
          uint64_t v22 = v23;
        }
        while (v23);
      }
      uint64_t v24 = (void *)v9[4];
      v9[4] = 0;
      if (v24) {
        operator delete(v24);
      }
      operator delete(v9);
      uint64_t v9 = v21;
    }
    while (v21);
  }
  id v10 = *v5;
  void *v5 = 0;
  if (v10) {
    operator delete(v10);
  }
  id v11 = (void *)v2[8];
  if (v11)
  {
    do
    {
      uint64_t v12 = (void *)*v11;
      operator delete(v11);
      id v11 = v12;
    }
    while (v12);
  }
  uint64_t v13 = *v4;
  void *v4 = 0;
  if (v13) {
    operator delete(v13);
  }
  uint64_t v14 = (void *)v2[3];
  if (v14)
  {
    do
    {
      uint64_t v15 = (void *)*v14;
      operator delete(v14);
      uint64_t v14 = v15;
    }
    while (v15);
  }
  id v16 = *v3;
  id *v3 = 0;
  if (v16) {
    operator delete(v16);
  }
  MEMORY[0x1C8786460](v2, 0x10A0C402E9B2A30);

  _Unwind_Resume(a1);
}

void sub_1C4A9F9D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4A9F9EC(id a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)CHStrokeClutterFilter;
    a1 = objc_msgSendSuper2(&v9, sel_init);
    if (a1) {
      operator new();
    }
  }

  return a1;
}

void sub_1C4A9FAD0(_Unwind_Exception *a1)
{
  MEMORY[0x1C8786460](v4, 0x10A0C402E9B2A30);

  _Unwind_Resume(a1);
}

void sub_1C4A9FB00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA0A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  sub_1C4AA0DB8((uint64_t)&a45);
  sub_1C498D2E0((uint64_t)&a59);

  _Unwind_Resume(a1);
}

__n128 sub_1C4AA0C54(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1C4AA0C78(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1C4AA0C90(uint64_t a1, double a2, double a3)
{
  uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 8);
  id v7 = (double *)v5[7];
  unint64_t v6 = v5[8];
  if ((unint64_t)v7 < v6)
  {
    double *v7 = a2;
    v7[1] = a3;
    uint64_t v8 = (uint64_t)(v7 + 2);
    goto LABEL_18;
  }
  objc_super v9 = (double *)v5[6];
  uint64_t v10 = ((char *)v7 - (char *)v9) >> 4;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60) {
    sub_1C494A220();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 60) {
      sub_1C4949AA8();
    }
    uint64_t v14 = (char *)operator new(16 * v13);
    uint64_t v15 = (double *)&v14[16 * v10];
    id v16 = &v14[16 * v13];
    double *v15 = a2;
    v15[1] = a3;
    uint64_t v8 = (uint64_t)(v15 + 2);
    if (v7 == v9) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  uint64_t v15 = (double *)(16 * v10);
  id v16 = 0;
  double *v15 = a2;
  v15[1] = a3;
  uint64_t v8 = 16 * v10 + 16;
  if (v7 != v9)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
      v15 -= 2;
      v7 -= 2;
    }
    while (v7 != v9);
    id v7 = (double *)v5[6];
  }
LABEL_16:
  v5[6] = v15;
  v5[7] = v8;
  v5[8] = v16;
  if (v7) {
    operator delete(v7);
  }
LABEL_18:
  v5[7] = v8;
}

uint64_t sub_1C4AA0DB8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void *)*v2;
      unint64_t v6 = (void *)v2[3];
      if (v6)
      {
        v2[4] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void sub_1C4AA0F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA12C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA12D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1C4AA1364(void *a1)
{
  uint64_t v2 = (void *)a1[19];
  if (v2)
  {
    do
    {
      unint64_t v13 = (void *)*v2;
      uint64_t v14 = (void *)v2[5];
      if (v14)
      {
        do
        {
          uint64_t v15 = (void *)*v14;
          operator delete(v14);
          uint64_t v14 = v15;
        }
        while (v15);
      }
      id v16 = (void *)v2[3];
      v2[3] = 0;
      if (v16) {
        operator delete(v16);
      }
      operator delete(v2);
      uint64_t v2 = v13;
    }
    while (v13);
  }
  uint64_t v3 = (void *)a1[17];
  a1[17] = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[13];
  if (v4)
  {
    do
    {
      uint64_t v17 = (void *)*v4;
      uint64_t v18 = (void *)v4[6];
      if (v18)
      {
        do
        {
          uint64_t v19 = (void *)*v18;
          operator delete(v18);
          uint64_t v18 = v19;
        }
        while (v19);
      }
      uint64_t v20 = (void *)v4[4];
      v4[4] = 0;
      if (v20) {
        operator delete(v20);
      }
      operator delete(v4);
      uint64_t v4 = v17;
    }
    while (v17);
  }
  uint64_t v5 = (void *)a1[11];
  a1[11] = 0;
  if (v5) {
    operator delete(v5);
  }
  unint64_t v6 = (void *)a1[8];
  if (v6)
  {
    do
    {
      id v7 = (void *)*v6;
      operator delete(v6);
      unint64_t v6 = v7;
    }
    while (v7);
  }
  uint64_t v8 = (void *)a1[6];
  a1[6] = 0;
  if (v8) {
    operator delete(v8);
  }
  objc_super v9 = (void *)a1[3];
  if (v9)
  {
    do
    {
      uint64_t v10 = (void *)*v9;
      operator delete(v9);
      objc_super v9 = v10;
    }
    while (v10);
  }
  unint64_t v11 = (void *)a1[1];
  a1[1] = 0;
  if (v11) {
    operator delete(v11);
  }
  return a1;
}

void *sub_1C4AA1490(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    objc_super v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  uint64_t v14 = operator new(0x18uLL);
  void *v14 = 0;
  v14[1] = v6;
  v14[2] = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    uint64_t v18 = *(void **)(*(void *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      void *v14 = *v18;
LABEL_61:
      void *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_37;
    }
    if (prime < v7)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v7) {
LABEL_37:
      }
        sub_1C4949C24(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * v6);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v26 & v6;
      uint64_t v17 = *(void *)a1;
      uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v26 & v6));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  void *v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v27 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7) {
        v27 %= v7;
      }
    }
    else
    {
      v27 &= v7 - 1;
    }
    uint64_t v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1C4AA17A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4AA17B4(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      unint64_t v3 = (void *)v2[3];
      if (v3)
      {
        v2[4] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void sub_1C4AA1A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA1C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1C4A2F114((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1C4AA1C78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA203C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  sub_1C496B66C(&a27);
  sub_1C496B66C(&__p);
  sub_1C4A2F114(v31 - 144);
  _Unwind_Resume(a1);
}

void sub_1C4AA22F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA230C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA24A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA2680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA2690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA26A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA26E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA26FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA2710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA2CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  sub_1C4A2F114((uint64_t)&a53);
  _Block_object_dispose(&STACK[0x240], 8);
  uint64_t v56 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v56;
    operator delete(v56);
  }
  _Block_object_dispose(&STACK[0x288], 8);
  unint64_t v57 = STACK[0x2B8];
  if (STACK[0x2B8])
  {
    unint64_t v58 = STACK[0x2C0];
    uint64_t v59 = (void *)STACK[0x2B8];
    if (STACK[0x2C0] != v57)
    {
      unint64_t v60 = STACK[0x2C0];
      do
      {
        uint64_t v62 = *(void **)(v60 - 24);
        v60 -= 24;
        uint64_t v61 = v62;
        if (v62)
        {
          *(void *)(v58 - 16) = v61;
          operator delete(v61);
        }
        unint64_t v58 = v60;
      }
      while (v60 != v57);
      uint64_t v59 = (void *)STACK[0x2B8];
    }
    STACK[0x2C0] = v57;
    operator delete(v59);
  }

  _Unwind_Resume(a1);
}

__n128 sub_1C4AA2E80(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1C4AA2EA4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v4 = *(void **)(a1 + 48);
    if (v3 != v1)
    {
      uint64_t v5 = v3;
      do
      {
        unint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        unint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v1);
      uint64_t v4 = *(void **)(a1 + 48);
    }
    *(void *)(a1 + 56) = v1;
    operator delete(v4);
  }
}

__n128 sub_1C4AA2F34(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1C4AA2F58(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1C4AA2F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint8x8_t v8 = objc_msgSend_objectAtIndex_(*(void **)(*(void *)(a1 + 32) + 184), (const char *)a2, a2, a4, a5, a6);
  objc_msgSend_addObject_(*(void **)(a1 + 40), v9, (uint64_t)v8, v10, v11, v12);
  objc_msgSend_strokePoints(*(void **)(a1 + 32), v13, v14, v15, v16, v17);
  uint64_t v18 = &__p[24 * a2];
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v36 = 0;
  unint64_t v20 = *(unsigned char **)v18;
  BOOL v19 = (unsigned char *)*((void *)v18 + 1);
  int64_t v21 = v19 - v20;
  if (v19 != v20)
  {
    if (v21 < 0) {
      sub_1C494A220();
    }
    uint64_t v36 = operator new(v19 - v20);
    uint64_t v38 = (char *)v36 + 16 * (v21 >> 4);
    memcpy(v36, v20, v21);
    uint64_t v37 = v38;
  }
  uint64_t v22 = v35;
  unint64_t v23 = __p;
  if (v35 != __p)
  {
    uint8x8_t v24 = v35;
    do
    {
      unint64_t v26 = (void *)*((void *)v24 - 3);
      v24 -= 24;
      uint64_t v25 = v26;
      if (v26)
      {
        *((void *)v22 - 2) = v25;
        operator delete(v25);
      }
      uint64_t v22 = v24;
    }
    while (v24 != __p);
    unint64_t v23 = __p;
  }
  operator delete(v23);
  uint64_t v27 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v28 = *(void **)(v27 + 56);
  if ((unint64_t)v28 >= *(void *)(v27 + 64))
  {
    uint64_t v33 = sub_1C4AAAB38((char **)(v27 + 48), (uint64_t)&v36);
  }
  else
  {
    *uint64_t v28 = 0;
    v28[1] = 0;
    v28[2] = 0;
    uint64_t v29 = v36;
    int64_t v30 = v37 - (unsigned char *)v36;
    if (v37 != v36)
    {
      if (v30 < 0) {
        sub_1C494A220();
      }
      uint64_t v31 = (char *)operator new(v37 - (unsigned char *)v36);
      *uint64_t v28 = v31;
      v28[1] = v31;
      uint64_t v32 = &v31[16 * (v30 >> 4)];
      v28[2] = v32;
      memcpy(v31, v29, v30);
      v28[1] = v32;
    }
    uint64_t v33 = (char *)(v28 + 3);
    *(void *)(v27 + 56) = v28 + 3;
  }
  *(void *)(v27 + 56) = v33;
  sub_1C4AAAD38(*(void *)(*(void *)(a1 + 56) + 8) + 48, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 56), (char *)v36, v37, (v37 - (unsigned char *)v36) >> 4);
  if (v36)
  {
    uint64_t v37 = (char *)v36;
    operator delete(v36);
  }
}

void sub_1C4AA3130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_1C4AA31B8(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1[4] + 200), a2, (uint64_t)a2, a4, a5, a6);
  id v39 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v12 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1[4] + 208), v8, (uint64_t)a2, v9, v10, v11);
  unint64_t v13 = (void *)a1[5];
  uint64_t v18 = objc_msgSend_objectAtIndexedSubscript_(v12, v14, 0, v15, v16, v17);
  int v24 = objc_msgSend_intValue(v18, v19, v20, v21, v22, v23);
  uint64_t v25 = a1[6];
  int64_t v30 = objc_msgSend_objectAtIndexedSubscript_(v12, v26, 1, v27, v28, v29);
  int v36 = objc_msgSend_intValue(v30, v31, v32, v33, v34, v35);
  objc_msgSend_addSupportStroke_tokenRange_(v13, v37, (uint64_t)v39, v24 - v25, v36, v38);
}

void sub_1C4AA3294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA32AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA32C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA32E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA39CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  sub_1C4A2F114((uint64_t)&a11);
  sub_1C496B66C(&a35);
  sub_1C496B66C(&a38);
  if (__p)
  {
    a42 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a44)
  {
    a45 = (uint64_t)a44;
    operator delete(a44);
  }

  _Unwind_Resume(a1);
}

void sub_1C4AA42F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA4540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA4730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_1C4A2F114((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4AA4A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_1C4A2F114((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4AA4B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  objc_sync_exit(v13);

  _Unwind_Resume(a1);
}

void sub_1C4AA4B70(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (!*(void *)v1) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v3;
  operator delete(v3);
  _Unwind_Resume(exception_object);
}

void sub_1C4AA4E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  objc_sync_exit(v17);
  _Unwind_Resume(a1);
}

void sub_1C4AA5138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  _Block_object_dispose(&a15, 8);
  if (!__p)
  {

    _Unwind_Resume(a1);
  }
  a22 = (uint64_t)__p;
  operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1C4AA51B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4AA51C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_msgSend_bounds(v3, v4, v5, v6, v7, v8);
  if (v14 * *(double *)(*(void *)(a1 + 32) + 232) <= *(double *)(a1 + 40))
  {
    objc_msgSend_bounds(v3, v9, v10, v11, v12, v13);
    BOOL v17 = v16 * *(double *)(*(void *)(a1 + 32) + 256) > *(double *)(a1 + 48);

    return v17;
  }
  else
  {

    return 1;
  }
}

void sub_1C4AA5248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA5258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA5268(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v9 = *(void *)(v8 + 56);
  objc_msgSend_strokePoints(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = (char *)v29[3 * (void)a2];
  objc_msgSend_strokePoints(v10, v12, v13, v14, v15, v16);
  sub_1C4AAAD38(v8 + 48, v9, v11, __p[3 * (void)a2 + 1], (__p[3 * (void)a2 + 1] - v11) >> 4);
  if (__p)
  {
    BOOL v17 = v28;
    uint64_t v18 = __p;
    if (v28 != __p)
    {
      BOOL v19 = v28;
      do
      {
        uint64_t v21 = *(v19 - 3);
        v19 -= 3;
        uint64_t v20 = v21;
        if (v21)
        {
          *(v17 - 2) = v20;
          operator delete(v20);
        }
        BOOL v17 = v19;
      }
      while (v19 != __p);
      uint64_t v18 = __p;
    }
    operator delete(v18);
  }
  if (v29)
  {
    uint64_t v22 = v30;
    uint64_t v23 = v29;
    if (v30 != v29)
    {
      int v24 = v30;
      do
      {
        unint64_t v26 = (void *)*(v24 - 3);
        v24 -= 3;
        uint64_t v25 = v26;
        if (v26)
        {
          *(v22 - 2) = v25;
          operator delete(v25);
        }
        uint64_t v22 = v24;
      }
      while (v24 != v29);
      uint64_t v23 = v29;
    }
    operator delete(v23);
  }
}

void sub_1C4AA538C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_1C4AA53A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1C496B66C((void **)va);
  _Unwind_Resume(a1);
}

void sub_1C4AA57D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }

  uint64_t v20 = *(void **)v17;
  if (*(void *)v17)
  {
    *(void *)(v17 + 8) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void sub_1C4AA598C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1C4AA5C94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA5CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1C4A2F114((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1C4AA5CD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA5CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA5F2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA6284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA6448(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA686C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA6C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA6CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA6D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA6DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA6DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA6DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA6FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA7134(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA7454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA7488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C4AA74D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA74E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA8568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  uint64_t v48 = v43;
  operator delete(v48);
  operator delete(v46);
  operator delete(v45);
  operator delete(v44);
  sub_1C4A2F114(a10);
  if (a33)
  {
    operator delete(a33);
    uint64_t v50 = a36;
    if (!a36)
    {
LABEL_3:
      uint64_t v51 = a39;
      if (!a39) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v50 = a36;
    if (!a36) {
      goto LABEL_3;
    }
  }
  operator delete(v50);
  uint64_t v51 = a39;
  if (!a39)
  {
LABEL_4:
    uint64_t v52 = __p;
    if (!__p) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  operator delete(v51);
  uint64_t v52 = __p;
  if (!__p)
  {
LABEL_6:

    _Unwind_Resume(a1);
  }
LABEL_5:
  operator delete(v52);
  goto LABEL_6;
}

void sub_1C4AA8EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA924C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1C4A2F114((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4AA9260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AA960C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1C4AA980C(_Unwind_Exception *a1)
{
  sub_1C496B66C(v1);
  _Unwind_Resume(a1);
}

void sub_1C4AA9AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1C4AA9E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1C4AA9F9C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1C4AAA118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AAA288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AAA348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1C4AAA458(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      sub_1C494A220();
    }
    uint64_t v7 = (char *)operator new(v4 - *(void *)a2);
    *a1 = v7;
    a1[1] = v7;
    uint64_t v8 = &v7[16 * (v6 >> 4)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  uint64_t v10 = *(unsigned char **)(a2 + 24);
  uint64_t v9 = *(unsigned char **)(a2 + 32);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      sub_1C494A220();
    }
    uint64_t v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    uint64_t v13 = &v12[16 * (v11 >> 4)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  uint64_t v15 = *(unsigned char **)(a2 + 48);
  uint64_t v14 = *(unsigned char **)(a2 + 56);
  int64_t v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0) {
      sub_1C494A220();
    }
    uint64_t v17 = (char *)operator new(v14 - v15);
    a1[6] = v17;
    a1[7] = v17;
    uint64_t v18 = &v17[16 * (v16 >> 4)];
    a1[8] = v18;
    memcpy(v17, v15, v16);
    a1[7] = v18;
  }
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  uint64_t v20 = *(unsigned char **)(a2 + 72);
  BOOL v19 = *(unsigned char **)(a2 + 80);
  int64_t v21 = v19 - v20;
  if (v19 != v20)
  {
    if (v21 < 0) {
      sub_1C494A220();
    }
    uint64_t v22 = (char *)operator new(v19 - v20);
    a1[9] = v22;
    a1[10] = v22;
    uint64_t v23 = &v22[16 * (v21 >> 4)];
    a1[11] = v23;
    memcpy(v22, v20, v21);
    a1[10] = v23;
  }
  return a1;
}

void sub_1C4AAA5D4(_Unwind_Exception *exception_object)
{
  int64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 80) = v6;
    operator delete(v6);
    uint64_t v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      uint64_t v8 = *v2;
      if (!*v2) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v7 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 56) = v7;
  operator delete(v7);
  uint64_t v8 = *v2;
  if (!*v2)
  {
LABEL_4:
    uint64_t v9 = *(void **)v1;
    if (!*(void *)v1) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  *(void *)(v1 + 32) = v8;
  operator delete(v8);
  uint64_t v9 = *(void **)v1;
  if (!*(void *)v1) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_5:
  *(void *)(v1 + 8) = v9;
  operator delete(v9);
  goto LABEL_6;
}

void sub_1C4AAA65C()
{
  if (!*v0) {
    JUMPOUT(0x1C4AAA600);
  }
  JUMPOUT(0x1C4AAA5F8);
}

void sub_1C4AAA66C(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  int64_t v6 = a2;
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      int64_t v11 = *(char ***)(a1 + 8);
      uint64_t v12 = *(char ***)a1;
      if (v11 != v10)
      {
        uint64_t v13 = *(char ***)(a1 + 8);
        do
        {
          uint64_t v15 = *(v13 - 3);
          v13 -= 3;
          uint64_t v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          int64_t v11 = v13;
        }
        while (v13 != v10);
        uint64_t v12 = *(char ***)a1;
      }
      *(void *)(a1 + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_40;
    }
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v21 = 2 * v20;
    if (2 * v20 <= __sz) {
      uint64_t v21 = __sz;
    }
    unint64_t v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL) {
LABEL_40:
    }
      sub_1C494A220();
    uint64_t v23 = 3 * v22;
    int v24 = operator new(24 * v22);
    *(void *)a1 = v24;
    *(void *)(a1 + 8) = v24;
    *(void *)(a1 + 16) = &v24[v23];
    uint64_t v25 = sub_1C4AAA8E4(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(void *)(a1 + 8) = v25;
    return;
  }
  int64_t v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    uint64_t v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      uint64_t v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10) {
          sub_1C49B7D84(v10, *v6, v6[1], (v6[1] - *v6) >> 4);
        }
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      uint64_t v10 = *(char ***)(a1 + 8);
    }
    uint64_t v25 = sub_1C4AAA8E4(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    BOOL v19 = *(char ***)a1;
    do
    {
      if (v6 != v10) {
        sub_1C49B7D84(v10, *v6, v6[1], (v6[1] - *v6) >> 4);
      }
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    int64_t v16 = *(char ***)(a1 + 8);
    if (v16 == v19) {
      goto LABEL_39;
    }
    goto LABEL_35;
  }
  BOOL v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    unint64_t v26 = v16;
    do
    {
      uint64_t v28 = *(v26 - 3);
      v26 -= 3;
      uint64_t v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      int64_t v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(void *)(a1 + 8) = v19;
}

void sub_1C4AAA8D4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C4AAA8DC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_1C4AAA8E4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      uint64_t v9 = *(const void **)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      int64_t v10 = v8 - *(void *)v6;
      if (v8 != *(void *)v6)
      {
        if (v10 < 0) {
          sub_1C494A220();
        }
        int64_t v11 = (char *)operator new(v8 - *(void *)v6);
        *a4 = v11;
        a4[1] = v11;
        uint64_t v7 = &v11[16 * (v10 >> 4)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_1C4AAA9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C4AAA9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_1C49C6848((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_1C4AAA9E8(char **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1C494A220();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v5 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0xAAAAAAAAAAAAAAALL) {
    sub_1C4949AA8();
  }
  uint64_t v7 = 24 * v5;
  uint64_t v8 = (char *)operator new(24 * v5);
  uint64_t v9 = &v8[24 * v3];
  int64_t v10 = &v8[v7];
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *((void *)v9 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  int64_t v11 = v9 + 24;
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      long long v14 = *(_OWORD *)(v13 - 24);
      v13 -= 24;
      *(_OWORD *)(v9 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v14;
      v9 -= 24;
      *((void *)v9 + 2) = *((void *)v13 + 2);
      *(void *)uint64_t v13 = 0;
      *((void *)v13 + 1) = 0;
      *((void *)v13 + 2) = 0;
    }
    while (v13 != v12);
    uint64_t v13 = *a1;
    uint64_t v15 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (v15 != v13)
    {
      int64_t v16 = v15;
      do
      {
        uint64_t v18 = (void *)*((void *)v16 - 3);
        v16 -= 24;
        uint64_t v17 = v18;
        if (v18)
        {
          *((void *)v15 - 2) = v17;
          operator delete(v17);
        }
        uint64_t v15 = v16;
      }
      while (v16 != v13);
    }
  }
  if (v13) {
    operator delete(v13);
  }
  return v11;
}

char *sub_1C4AAAB38(char **a1, uint64_t a2)
{
  unint64_t v4 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1C494A220();
  }
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_1C4949AA8();
    }
    uint64_t v9 = (char *)operator new(24 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  int64_t v10 = &v9[24 * v5];
  int64_t v11 = &v9[24 * v8];
  *((void *)&v25 + 1) = v11;
  *((void *)v10 + 1) = 0;
  uint64_t v12 = (char **)(v10 + 8);
  *((void *)v10 + 2) = 0;
  *(void *)int64_t v10 = 0;
  uint64_t v13 = *(const void **)a2;
  int64_t v14 = *(void *)(a2 + 8) - *(void *)a2;
  if (v14)
  {
    if (v14 < 0) {
      sub_1C494A220();
    }
    uint64_t v15 = (char *)operator new(v14);
    *(void *)int64_t v10 = v15;
    *uint64_t v12 = v15;
    int64_t v16 = &v15[16 * (v14 >> 4)];
    *((void *)v10 + 2) = v16;
    memcpy(v15, v13, v14);
    *uint64_t v12 = v16;
  }
  uint64_t v17 = v10 + 24;
  *(void *)&long long v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      uint64_t v18 = v10;
      *((void *)v10 - 2) = 0;
      *((void *)v10 - 1) = 0;
      long long v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v19;
      v10 -= 24;
      *((void *)v18 - 1) = *((void *)v3 + 2);
      *(void *)unint64_t v3 = 0;
      *((void *)v3 + 1) = 0;
      *((void *)v3 + 2) = 0;
    }
    while (v3 != v4);
    unint64_t v3 = *a1;
    unint64_t v20 = a1[1];
    *a1 = v10;
    *(_OWORD *)(a1 + 1) = v25;
    uint64_t v17 = (char *)v25;
    if (v20 != v3)
    {
      uint64_t v21 = v20;
      do
      {
        uint64_t v23 = (void *)*((void *)v21 - 3);
        v21 -= 24;
        unint64_t v22 = v23;
        if (v23)
        {
          *((void *)v20 - 2) = v22;
          operator delete(v22);
        }
        unint64_t v20 = v21;
      }
      while (v21 != v3);
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v17;
}

void sub_1C4AAAD14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v5 = *v2;
  if (*v2)
  {
    void *v3 = v5;
    operator delete(v5);
  }
  sub_1C496CD14((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1C4AAAD38(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v5 = *(char **)a1;
  uint64_t v6 = a2 - *(void *)a1;
  uint64_t v7 = (char *)(*(void *)a1 + (v6 & 0xFFFFFFFFFFFFFFF0));
  if (a5 < 1) {
    return v7;
  }
  uint64_t v9 = __src;
  uint64_t v12 = *(long long **)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  if (a5 > (v11 - (uint64_t)v12) >> 4)
  {
    unint64_t v13 = a5 + (((char *)v12 - v5) >> 4);
    if (v13 >> 60) {
      sub_1C494A220();
    }
    uint64_t v14 = v11 - (void)v5;
    uint64_t v15 = v14 >> 3;
    if (v14 >> 3 <= v13) {
      uint64_t v15 = v13;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16)
    {
      if (v16 >> 60) {
        sub_1C4949AA8();
      }
      uint64_t v17 = (char *)operator new(16 * v16);
    }
    else
    {
      uint64_t v17 = 0;
    }
    unint64_t v26 = &v17[16 * (v6 >> 4)];
    uint64_t v27 = 16 * a5;
    uint64_t v28 = &v26[16 * a5];
    uint64_t v29 = v26;
    do
    {
      long long v30 = *(_OWORD *)v9;
      v9 += 16;
      *(_OWORD *)uint64_t v29 = v30;
      v29 += 16;
      v27 -= 16;
    }
    while (v27);
    uint64_t v31 = *(char **)a1;
    if (*(char **)a1 == v7)
    {
      uint64_t v33 = v26;
      uint64_t v35 = &v17[16 * v16];
      size_t v36 = (char *)v12 - v7;
      if (v12 == (long long *)v7) {
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v32 = v7;
      uint64_t v33 = v26;
      do
      {
        *((_OWORD *)v33 - 1) = *((_OWORD *)v32 - 1);
        v33 -= 16;
        v32 -= 16;
      }
      while (v32 != v31);
      uint64_t v34 = *(unsigned char **)(a1 + 8);
      uint64_t v35 = &v17[16 * v16];
      size_t v36 = v34 - v7;
      if (v34 == v7) {
        goto LABEL_33;
      }
    }
    memmove(v28, v7, v36);
LABEL_33:
    uint64_t v37 = *(char **)a1;
    *(void *)a1 = v33;
    *(void *)(a1 + 8) = &v28[v36];
    *(void *)(a1 + 16) = v35;
    if (v37) {
      operator delete(v37);
    }
    return v26;
  }
  uint64_t v18 = ((char *)v12 - v7) >> 4;
  if (v18 >= a5)
  {
    long long v19 = &__src[16 * a5];
    uint64_t v21 = *(char **)(a1 + 8);
    unint64_t v22 = &v7[16 * a5];
    uint64_t v23 = &v12[-a5];
    int v24 = v21;
    if (v23 >= v12)
    {
LABEL_21:
      *(void *)(a1 + 8) = v24;
      if (v21 != v22) {
        memmove(&v21[-16 * ((v21 - v22) >> 4)], v7, v21 - v22);
      }
      if (v19 != v9) {
        memmove(v7, v9, v19 - v9);
      }
      return v7;
    }
LABEL_19:
    int v24 = v21;
    do
    {
      long long v25 = *v23++;
      *(_OWORD *)int v24 = v25;
      v24 += 16;
    }
    while (v23 < v12);
    goto LABEL_21;
  }
  long long v19 = &__src[16 * v18];
  int64_t v20 = a4 - v19;
  if (a4 != v19) {
    memmove(*(void **)(a1 + 8), &__src[16 * v18], a4 - v19);
  }
  uint64_t v21 = (char *)v12 + v20;
  *(void *)(a1 + 8) = (char *)v12 + v20;
  if ((char *)v12 - v7 >= 1)
  {
    unint64_t v22 = &v7[16 * a5];
    uint64_t v23 = (long long *)&v21[-16 * a5];
    int v24 = (char *)v12 + v20;
    if (v23 >= v12) {
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  return v7;
}

void sub_1C4AAAF6C(char ***a1, uint64_t a2, char **a3, uint64_t a4, uint64_t a5)
{
  if (a5 >= 1)
  {
    uint64_t v6 = a3;
    unint64_t v8 = *a1;
    uint64_t v9 = (a2 - (uint64_t)*a1) / 24;
    int64_t v10 = &(*a1)[3 * v9];
    unint64_t v13 = a1[2];
    uint64_t v11 = (uint64_t)(a1 + 2);
    uint64_t v12 = v13;
    unint64_t v14 = *(void *)(v11 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v13 - v14) >> 3)) >= a5)
    {
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)v10) >> 3)) >= a5)
      {
        uint64_t v19 = (uint64_t)&a3[3 * a5];
        int64_t v20 = *(char ***)(v11 - 8);
      }
      else
      {
        uint64_t v19 = (uint64_t)&a3[(uint64_t)(v14 - (void)v10) >> 3];
        int64_t v20 = (char **)sub_1C4AAA8E4(v11, v19, a4, *(void **)(v11 - 8));
        a1[1] = v20;
        if ((uint64_t)(v14 - (void)v10) < 1) {
          return;
        }
      }
      uint64_t v21 = &v10[3 * a5];
      unint64_t v22 = &v20[-3 * a5];
      uint64_t v23 = v20;
      if ((unint64_t)v22 < v14)
      {
        uint64_t v23 = v20;
        do
        {
          *uint64_t v23 = 0;
          v23[1] = 0;
          v23[2] = 0;
          *(_OWORD *)uint64_t v23 = *(_OWORD *)v22;
          v23[2] = v22[2];
          *unint64_t v22 = 0;
          v22[1] = 0;
          v22[2] = 0;
          v23 += 3;
          v22 += 3;
        }
        while ((unint64_t)v22 < v14);
      }
      a1[1] = v23;
      if (v20 != v21)
      {
        int v24 = (void **)(v20 - 3);
        uint64_t v25 = v20 - v21;
        do
        {
          uint64_t v27 = *v24;
          if (*v24)
          {
            v24[1] = v27;
            operator delete(v27);
            char *v24 = 0;
            v24[1] = 0;
            v24[2] = 0;
          }
          uint64_t v26 = (uint64_t)&v10[v25 - 3];
          *(_OWORD *)int v24 = *(_OWORD *)v26;
          v24[2] = v10[v25 - 1];
          *(void *)uint64_t v26 = 0;
          *(void *)(v26 + 8) = 0;
          *(void *)(v26 + 16) = 0;
          v24 -= 3;
          v25 -= 3;
        }
        while (v25 * 8);
      }
      if ((char **)v19 != v6)
      {
        do
        {
          if (v6 != v10) {
            sub_1C49B7D84(v10, *v6, v6[1], (v6[1] - *v6) >> 4);
          }
          v6 += 3;
          v10 += 3;
        }
        while (v6 != (char **)v19);
      }
    }
    else
    {
      unint64_t v15 = a5 - 0x5555555555555555 * ((uint64_t)(v14 - (void)v8) >> 3);
      if (v15 > 0xAAAAAAAAAAAAAAALL) {
        sub_1C494A220();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (v12 - v8);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      uint64_t v47 = a1;
      if (v17)
      {
        if (v17 > 0xAAAAAAAAAAAAAAALL) {
          sub_1C4949AA8();
        }
        uint64_t v18 = (char *)operator new(24 * v17);
      }
      else
      {
        uint64_t v18 = 0;
      }
      uint64_t v48 = v9;
      uint64_t v49 = &v18[24 * v17];
      uint64_t v28 = 24 * a5;
      uint64_t v29 = &v18[24 * v9 + 24 * a5];
      uint64_t v46 = &v18[24 * v9];
      long long v30 = v46;
      do
      {
        *(void *)long long v30 = 0;
        *((void *)v30 + 1) = 0;
        *((void *)v30 + 2) = 0;
        uint64_t v33 = *v6;
        uint64_t v32 = v6[1];
        int64_t v34 = v32 - *v6;
        if (v32 != *v6)
        {
          if (v34 < 0) {
            sub_1C494A220();
          }
          uint64_t v35 = (char *)operator new(v32 - *v6);
          *(void *)long long v30 = v35;
          *((void *)v30 + 1) = v35;
          uint64_t v31 = &v35[16 * (v34 >> 4)];
          *((void *)v30 + 2) = v31;
          memcpy(v35, v33, v34);
          *((void *)v30 + 1) = v31;
        }
        v30 += 24;
        v6 += 3;
        v28 -= 24;
      }
      while (v28);
      size_t v36 = v46;
      uint64_t v37 = *v47;
      if (*v47 != v10)
      {
        uint64_t v38 = 3 * v48;
        do
        {
          id v39 = &v18[v38 * 8];
          id v40 = &v8[v38];
          *(_OWORD *)(v39 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)&v8[v38 - 3];
          *((void *)v39 - 1) = v8[v38 - 1];
          *(v40 - 3) = 0;
          *(v40 - 2) = 0;
          *(v40 - 1) = 0;
          v18 -= 24;
          v8 -= 3;
        }
        while (&v8[v38] != v37);
        size_t v36 = &v18[24 * v48];
      }
      uint64_t v41 = v47[1];
      if (v41 != v10)
      {
        do
        {
          *(void *)uint64_t v29 = 0;
          *((void *)v29 + 1) = 0;
          *((void *)v29 + 2) = 0;
          *(_OWORD *)uint64_t v29 = *(_OWORD *)v10;
          *((void *)v29 + 2) = v10[2];
          *int64_t v10 = 0;
          v10[1] = 0;
          v10[2] = 0;
          v29 += 24;
          v10 += 3;
        }
        while (v10 != v41);
        int64_t v10 = v47[1];
      }
      uint64_t v42 = *v47;
      *uint64_t v47 = (char **)v36;
      v47[1] = (char **)v29;
      v47[2] = (char **)v49;
      if (v10 != v42)
      {
        uint64_t v43 = v10;
        do
        {
          uint64_t v45 = *(v43 - 3);
          v43 -= 3;
          uint64_t v44 = v45;
          if (v45)
          {
            *(v10 - 2) = v44;
            operator delete(v44);
          }
          int64_t v10 = v43;
        }
        while (v43 != v42);
      }
      if (v42) {
        operator delete(v42);
      }
    }
  }
}

void sub_1C4AAB36C(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_1C4AAB374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1C496CD14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4AAB38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  unint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  a14 = v14;
  sub_1C496CD14((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void OutlinedArrowRegressor::OutlinedArrowRegressor(OutlinedArrowRegressor *this, CHDrawing *a2, HTMLog *a3)
{
  unint64_t v4 = a2;
  uint64_t v372 = 0;
  uint64_t v373 = 0;
  uint64_t v374 = 0;
  uint64_t v370 = 0;
  long long v371 = 0uLL;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  *((float *)this + 9) = sub_1C495E698(v4, (uint64_t)&v372, (uint64_t)v369, 1, 30.0);
  uint64_t v6 = v372;
  size_t v7 = v373 - v372;
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v373 - v372) >> 3);
  if (v8 <= 6) {
    OutlinedArrowRegressor::provideAnAnswer(v5, v4);
  }
  uint64_t v367 = 0;
  uint64_t v368 = 0;
  uint64_t v366 = 0;
  if (v373 != v372)
  {
    if (v8 > 0x666666666666666) {
      sub_1C494A220();
    }
    uint64_t v366 = (char *)operator new(v7);
    uint64_t v368 = &v366[40 * v8];
    memcpy(v366, v6, v7 - 3);
    uint64_t v367 = v368;
  }
  sub_1C49558A8((unint64_t *)&v366, (uint64_t)&__p);
  uint64_t v9 = (long long *)__p;
  uint64_t v370 = (char *)__p;
  int64_t v10 = (long long *)v364;
  long long v371 = v364;
  long long v364 = 0uLL;
  __p = 0;
  if (v366)
  {
    uint64_t v367 = v366;
    uint64_t v361 = v10;
    operator delete(v366);
    int64_t v10 = v361;
  }
  uint64_t v11 = v10;
  unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v10 - (char *)v9) >> 3);
  unint64_t v13 = 126 - 2 * __clz(v12);
  int64_t v14 = (char *)v10 - (char *)v9;
  __p = sub_1C4AAE638;
  if (v10 == v9) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = v13;
  }
  sub_1C49562BC((unint64_t)v9, v10, (unsigned int (**)(uint64_t, char *))&__p, v15, 1);
  if (v12 < 5) {
    OutlinedArrowRegressor::provideAnAnswer(v16, v4);
  }
  for (; v14 != 200; int64_t v14 = &v119[v120] - (char *)v9)
  {
    double v90 = *((double *)v11 - 5);
    double v89 = *((double *)v11 - 4);
    float v91 = *((double *)v9 + 5) - v90;
    float v92 = *((double *)v9 + 6) - v89;
    float v93 = (float)(v92 * v92) + (float)(v91 * v91);
    if (v93 > 0.0)
    {
      float v91 = v91 / v93;
      float v92 = v92 / v93;
    }
    uint64_t v94 = v14 / 40;
    float v95 = sqrtf(v93);
    double v96 = *((double *)v9 + 1);
    float v97 = ((*(double *)v9 - v90) * v92 - (v96 - v89) * v91) * v95;
    float v98 = fabsf(v97);
    if ((unint64_t)(v14 / 40 - 1) < 2)
    {
      int v99 = 0;
    }
    else
    {
      int v99 = 0;
      uint64_t v100 = (double *)(v9 + 3);
      uint64_t v101 = 2;
      double v102 = *((double *)v9 + 1);
      double v103 = *(double *)v9;
      do
      {
        float v108 = v100[4] - v103;
        float v109 = v100[5] - v102;
        float v110 = (float)(v109 * v109) + (float)(v108 * v108);
        if (v110 > 0.0)
        {
          float v108 = v108 / v110;
          float v109 = v109 / v110;
        }
        double v104 = *(v100 - 1);
        double v105 = *v100;
        float v106 = ((v104 - v103) * v109 - (*v100 - v102) * v108) * sqrtf(v110);
        float v107 = fabsf(v106);
        if (v107 < v98) {
          int v99 = v101 - 1;
        }
        ++v101;
        if (v107 < v98) {
          float v98 = v107;
        }
        v100 += 5;
        double v102 = v105;
        double v103 = v104;
      }
      while (v94 != v101);
    }
    uint64_t v111 = (double *)v9 + 5 * v94;
    double v113 = *(v111 - 10);
    double v112 = *(v111 - 9);
    float v114 = *(double *)v9 - v113;
    float v115 = v96 - v112;
    float v116 = (float)(v115 * v115) + (float)(v114 * v114);
    if (v116 > 0.0)
    {
      float v114 = v114 / v116;
      float v115 = v115 / v116;
    }
    float v117 = ((v90 - v113) * v115 - (v89 - v112) * v114) * sqrtf(v116);
    int v118 = v94 - 1;
    if (fabsf(v117) >= v98) {
      int v118 = v99;
    }
    uint64_t v119 = (char *)v9 + 40 * v118;
    unint64_t v17 = v119 + 40;
    int64_t v120 = (char *)v11 - (v119 + 40);
    if (v11 != (long long *)(v119 + 40))
    {
      unint64_t v16 = (OutlinedArrowRegressor *)memmove((char *)v9 + 40 * v118, v17, v120 - 3);
      uint64_t v9 = (long long *)v370;
    }
    uint64_t v11 = (long long *)((char *)v11 - 40);
    *(void *)&long long v371 = &v119[v120];
  }
  double v20 = *(double *)v9;
  double v21 = *((double *)v9 + 1);
  float v22 = *((double *)v9 + 5) - *(double *)v9;
  float v23 = *((double *)v9 + 6) - v21;
  float v24 = (float)(v23 * v23) + (float)(v22 * v22);
  if (v24 > 0.0)
  {
    float v22 = v22 / v24;
    float v23 = v23 / v24;
  }
  uint64_t v25 = *((int *)v9 + 5);
  if (*((_DWORD *)v9 + 15) <= (int)v25) {
    goto LABEL_39;
  }
  double v26 = v23;
  double v27 = v22;
  double v28 = sqrtf(v24);
  float v29 = 0.0;
  do
  {
    unint64_t v16 = (OutlinedArrowRegressor *)objc_msgSend_pointForStrokeIndex_pointIndex_(v4, (const char *)v17, 0, v25, v18, v19);
    *(float *)&double v30 = ((v30 - v20) * v26 - (v31 - v21) * v27) * v28;
    float v29 = v29 + (float)(*(float *)&v30 * *(float *)&v30);
    ++v25;
    uint64_t v32 = *((int *)v9 + 15);
  }
  while (v25 < v32);
  double v33 = *((double *)v9 + 5);
  double v34 = *((double *)v9 + 6);
  float v35 = *((double *)v9 + 10) - v33;
  float v36 = *((double *)v9 + 11) - v34;
  float v37 = (float)(v36 * v36) + (float)(v35 * v35);
  if (v37 > 0.0)
  {
    float v35 = v35 / v37;
    float v36 = v36 / v37;
  }
  if (*((_DWORD *)v9 + 25) <= (int)v32) {
    goto LABEL_39;
  }
  float v38 = v29 / (float)(v32 - *((_DWORD *)v9 + 5));
  double v39 = v36;
  double v40 = v35;
  double v41 = sqrtf(v37);
  float v42 = 0.0;
  do
  {
    unint64_t v16 = (OutlinedArrowRegressor *)objc_msgSend_pointForStrokeIndex_pointIndex_(v4, (const char *)v17, 0, v32, v18, v19);
    *(float *)&double v43 = ((v43 - v33) * v39 - (v44 - v34) * v40) * v41;
    float v42 = v42 + (float)(*(float *)&v43 * *(float *)&v43);
    ++v32;
    uint64_t v45 = *((int *)v9 + 25);
  }
  while (v32 < v45);
  double v46 = *((double *)v9 + 10);
  double v47 = *((double *)v9 + 11);
  float v48 = *((double *)v9 + 15) - v46;
  float v49 = *((double *)v9 + 16) - v47;
  float v50 = (float)(v49 * v49) + (float)(v48 * v48);
  if (v50 > 0.0)
  {
    float v48 = v48 / v50;
    float v49 = v49 / v50;
  }
  if (*((_DWORD *)v9 + 35) <= (int)v45) {
    goto LABEL_39;
  }
  float v51 = v42 / (float)(v45 - *((_DWORD *)v9 + 15));
  double v52 = v49;
  double v53 = v48;
  double v54 = sqrtf(v50);
  float v55 = 0.0;
  do
  {
    unint64_t v16 = (OutlinedArrowRegressor *)objc_msgSend_pointForStrokeIndex_pointIndex_(v4, (const char *)v17, 0, v45, v18, v19);
    *(float *)&double v56 = ((v56 - v46) * v52 - (v57 - v47) * v53) * v54;
    float v55 = v55 + (float)(*(float *)&v56 * *(float *)&v56);
    ++v45;
    uint64_t v58 = *((int *)v9 + 35);
  }
  while (v45 < v58);
  double v59 = *((double *)v9 + 15);
  double v60 = *((double *)v9 + 16);
  float v61 = *((double *)v9 + 20) - v59;
  float v62 = *((double *)v9 + 21) - v60;
  float v63 = (float)(v62 * v62) + (float)(v61 * v61);
  if (v63 > 0.0)
  {
    float v61 = v61 / v63;
    float v62 = v62 / v63;
  }
  if (*((_DWORD *)v9 + 45) <= (int)v58) {
LABEL_39:
  }
    OutlinedArrowRegressor::provideAnAnswer(v16, v4);
  float v362 = v38;
  float v64 = v55 / (float)(v58 - *((_DWORD *)v9 + 25));
  double v65 = v62;
  double v66 = v61;
  double v67 = sqrtf(v63);
  float v68 = 0.0;
  do
  {
    objc_msgSend_pointForStrokeIndex_pointIndex_(v4, (const char *)v17, 0, v58, v18, v19);
    *(float *)&double v70 = ((v70 - v59) * v65 - (v71 - v60) * v66) * v67;
    float v68 = v68 + (float)(*(float *)&v70 * *(float *)&v70);
    ++v58;
    uint64_t v72 = *((int *)v9 + 45);
  }
  while (v58 < v72);
  double v73 = *((double *)v9 + 20);
  double v74 = *((double *)v9 + 21);
  float v75 = *(double *)v9 - v73;
  float v76 = *((double *)v9 + 1) - v74;
  float v77 = (float)(v76 * v76) + (float)(v75 * v75);
  float v78 = sqrtf(v77);
  float v357 = v64;
  float v355 = v51;
  if (v77 > 0.0)
  {
    float v75 = v75 / v77;
    float v76 = v76 / v77;
  }
  double v79 = v76;
  double v80 = v75;
  double v81 = v78;
  float v82 = 0.0;
  float v83 = 0.0;
  float v359 = v68 / (float)(v72 - *((_DWORD *)v9 + 35));
  while (objc_msgSend_pointCountForStrokeIndex_(v4, (const char *)v17, 0, v69, v18, v19) > (unint64_t)v72)
  {
    objc_msgSend_pointForStrokeIndex_pointIndex_(v4, v84, 0, v72, v85, v86);
    *(float *)&double v87 = ((v87 - v73) * v79 - (v88 - v74) * v80) * v81;
    float v82 = v82 + (float)(*(float *)&v87 * *(float *)&v87);
    float v83 = v83 + 1.0;
    ++v72;
  }
  if (*((int *)v9 + 5) >= 1)
  {
    uint64_t v121 = 0;
    do
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(v4, v84, 0, v121, v85, v86);
      *(float *)&double v122 = ((v122 - v73) * v79 - (v123 - v74) * v80) * v81;
      float v82 = v82 + (float)(*(float *)&v122 * *(float *)&v122);
      float v83 = v83 + 1.0;
      ++v121;
    }
    while (v121 < *((int *)v9 + 5));
  }
  float v124 = 1.0;
  if (v83 > 0.0) {
    float v124 = v83;
  }
  float v125 = v82 / v124;
  float v126 = v362 + (float)(v82 / v124);
  int v127 = (float)(v362 + v355) < v126;
  if ((float)(v362 + v355) >= v126) {
    float v128 = v126;
  }
  else {
    float v128 = v362 + v355;
  }
  uint64_t v129 = (char *)*((void *)&v371 + 1);
  if ((unint64_t)v11 >= *((void *)&v371 + 1))
  {
    unint64_t v135 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v11 - (char *)v9) >> 3) + 1;
    float v133 = v359;
    float v134 = v357;
    if (v135 > 0x666666666666666) {
      goto LABEL_396;
    }
    if (0x999999999999999ALL * ((uint64_t)(*((void *)&v371 + 1) - (void)v9) >> 3) > v135) {
      unint64_t v135 = 0x999999999999999ALL * ((uint64_t)(*((void *)&v371 + 1) - (void)v9) >> 3);
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v371 + 1) - (void)v9) >> 3) >= 0x333333333333333) {
      unint64_t v136 = 0x666666666666666;
    }
    else {
      unint64_t v136 = v135;
    }
    if (v136)
    {
      if (v136 > 0x666666666666666) {
        goto LABEL_397;
      }
      uint64_t v137 = (char *)operator new(40 * v136);
    }
    else
    {
      uint64_t v137 = 0;
    }
    uint64_t v138 = &v137[8 * (((char *)v11 - (char *)v9) >> 3)];
    long long v139 = *v9;
    long long v140 = v9[1];
    *((void *)v138 + 4) = *((void *)v9 + 4);
    *(_OWORD *)uint64_t v138 = v139;
    *((_OWORD *)v138 + 1) = v140;
    uint64_t v132 = (long long *)(v138 + 40);
    if (v11 == v9)
    {
      uint64_t v143 = &v137[8 * (((char *)v11 - (char *)v9) >> 3)];
    }
    else
    {
      do
      {
        long long v141 = *(long long *)((char *)v11 - 40);
        long long v142 = *(long long *)((char *)v11 - 24);
        uint64_t v143 = v138 - 40;
        *(void *)(v138 - 11) = *(void *)((char *)v11 - 11);
        *(_OWORD *)(v138 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v142;
        *(_OWORD *)(v138 - 40) = v141;
        uint64_t v11 = (long long *)((char *)v11 - 40);
        v138 -= 40;
      }
      while (v11 != v9);
    }
    uint64_t v370 = v143;
    *(void *)&long long v371 = v132;
    *((void *)&v371 + 1) = &v137[40 * v136];
    operator delete(v9);
    uint64_t v9 = (long long *)v370;
    uint64_t v129 = (char *)*((void *)&v371 + 1);
  }
  else
  {
    long long v130 = *v9;
    long long v131 = v9[1];
    *((void *)v11 + 4) = *((void *)v9 + 4);
    long long *v11 = v130;
    v11[1] = v131;
    uint64_t v132 = (long long *)((char *)v11 + 40);
    float v133 = v359;
    float v134 = v357;
  }
  *(void *)&long long v371 = v132;
  if ((float)(v355 + v134) >= v128) {
    float v144 = v128;
  }
  else {
    float v144 = v355 + v134;
  }
  if ((float)(v355 + v134) < v128) {
    int v127 = 2;
  }
  uint64_t v145 = (long long *)((char *)v9 + 40);
  if (v132 < (long long *)v129)
  {
    long long v146 = *v145;
    long long v147 = *(long long *)((char *)v9 + 56);
    *((void *)v132 + 4) = *((void *)v9 + 9);
    long long *v132 = v146;
    v132[1] = v147;
    uint64_t v148 = (long long *)((char *)v132 + 40);
    goto LABEL_108;
  }
  unint64_t v149 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v132 - (char *)v9) >> 3) + 1;
  if (v149 > 0x666666666666666) {
    goto LABEL_396;
  }
  unint64_t v150 = 0xCCCCCCCCCCCCCCCDLL * ((v129 - (char *)v9) >> 3);
  if (2 * v150 > v149) {
    unint64_t v149 = 2 * v150;
  }
  if (v150 >= 0x333333333333333) {
    unint64_t v151 = 0x666666666666666;
  }
  else {
    unint64_t v151 = v149;
  }
  if (v151)
  {
    if (v151 > 0x666666666666666) {
      goto LABEL_397;
    }
    uint64_t v152 = (char *)operator new(40 * v151);
  }
  else
  {
    uint64_t v152 = 0;
  }
  uint64_t v153 = &v152[8 * (((char *)v132 - (char *)v9) >> 3)];
  long long v154 = *v145;
  long long v155 = *(long long *)((char *)v9 + 56);
  *((void *)v153 + 4) = *((void *)v9 + 9);
  uint64_t v129 = &v152[40 * v151];
  *(_OWORD *)uint64_t v153 = v154;
  *((_OWORD *)v153 + 1) = v155;
  uint64_t v148 = (long long *)(v153 + 40);
  if (v132 == v9)
  {
    uint64_t v370 = &v152[8 * (((char *)v132 - (char *)v9) >> 3)];
    *(void *)&long long v371 = v153 + 40;
    *((void *)&v371 + 1) = &v152[40 * v151];
  }
  else
  {
    do
    {
      long long v156 = *(long long *)((char *)v132 - 40);
      long long v157 = *(long long *)((char *)v132 - 24);
      *(void *)(v153 - 11) = *(void *)((char *)v132 - 11);
      *(_OWORD *)(v153 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v157;
      *(_OWORD *)(v153 - 40) = v156;
      v153 -= 40;
      uint64_t v132 = (long long *)((char *)v132 - 40);
    }
    while (v132 != v9);
    uint64_t v370 = v153;
    *(void *)&long long v371 = v148;
    *((void *)&v371 + 1) = &v152[40 * v151];
    if (!v9)
    {
      uint64_t v9 = (long long *)v153;
      goto LABEL_108;
    }
  }
  operator delete(v9);
  uint64_t v9 = (long long *)v370;
  uint64_t v129 = (char *)*((void *)&v371 + 1);
LABEL_108:
  *(void *)&long long v371 = v148;
  _NF = (float)(v134 + v133) < v144;
  if ((float)(v134 + v133) >= v144) {
    float v159 = v144;
  }
  else {
    float v159 = v134 + v133;
  }
  if (_NF) {
    int v127 = 3;
  }
  uint64_t v160 = v9 + 5;
  if (v148 < (long long *)v129)
  {
    long long v161 = *v160;
    long long v162 = v9[6];
    *((void *)v148 + 4) = *((void *)v9 + 14);
    long long *v148 = v161;
    v148[1] = v162;
    uint64_t v163 = (long long *)((char *)v148 + 40);
    goto LABEL_131;
  }
  unint64_t v164 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v148 - (char *)v9) >> 3) + 1;
  if (v164 > 0x666666666666666) {
    goto LABEL_396;
  }
  unint64_t v165 = 0xCCCCCCCCCCCCCCCDLL * ((v129 - (char *)v9) >> 3);
  if (2 * v165 > v164) {
    unint64_t v164 = 2 * v165;
  }
  if (v165 >= 0x333333333333333) {
    unint64_t v166 = 0x666666666666666;
  }
  else {
    unint64_t v166 = v164;
  }
  if (v166)
  {
    if (v166 > 0x666666666666666) {
      goto LABEL_397;
    }
    double v167 = (char *)operator new(40 * v166);
  }
  else
  {
    double v167 = 0;
  }
  double v168 = &v167[8 * (((char *)v148 - (char *)v9) >> 3)];
  long long v169 = *v160;
  long long v170 = v9[6];
  *((void *)v168 + 4) = *((void *)v9 + 14);
  uint64_t v129 = &v167[40 * v166];
  *(_OWORD *)double v168 = v169;
  *((_OWORD *)v168 + 1) = v170;
  uint64_t v163 = (long long *)(v168 + 40);
  if (v148 == v9)
  {
    uint64_t v370 = &v167[8 * (((char *)v148 - (char *)v9) >> 3)];
    *(void *)&long long v371 = v168 + 40;
    *((void *)&v371 + 1) = &v167[40 * v166];
  }
  else
  {
    do
    {
      long long v171 = *(long long *)((char *)v148 - 40);
      long long v172 = *(long long *)((char *)v148 - 24);
      *(void *)(v168 - 11) = *(void *)((char *)v148 - 11);
      *(_OWORD *)(v168 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v172;
      *(_OWORD *)(v168 - 40) = v171;
      v168 -= 40;
      uint64_t v148 = (long long *)((char *)v148 - 40);
    }
    while (v148 != v9);
    uint64_t v370 = v168;
    *(void *)&long long v371 = v163;
    *((void *)&v371 + 1) = &v167[40 * v166];
    if (!v9)
    {
      uint64_t v9 = (long long *)v168;
      goto LABEL_131;
    }
  }
  operator delete(v9);
  uint64_t v9 = (long long *)v370;
  uint64_t v129 = (char *)*((void *)&v371 + 1);
LABEL_131:
  *(void *)&long long v371 = v163;
  if ((float)(v133 + v125) >= v159) {
    int v173 = v127;
  }
  else {
    int v173 = 4;
  }
  unsigned int v360 = v173;
  uint64_t v174 = (long long *)((char *)v9 + 120);
  if (v163 < (long long *)v129)
  {
    long long v175 = *v174;
    long long v176 = *(long long *)((char *)v9 + 136);
    *((void *)v163 + 4) = *((void *)v9 + 19);
    *uint64_t v163 = v175;
    v163[1] = v176;
    uint64_t v177 = (char *)v163 + 40;
    goto LABEL_152;
  }
  unint64_t v178 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v163 - (char *)v9) >> 3) + 1;
  if (v178 <= 0x666666666666666)
  {
    unint64_t v179 = 0xCCCCCCCCCCCCCCCDLL * ((v129 - (char *)v9) >> 3);
    if (2 * v179 > v178) {
      unint64_t v178 = 2 * v179;
    }
    if (v179 >= 0x333333333333333) {
      unint64_t v180 = 0x666666666666666;
    }
    else {
      unint64_t v180 = v178;
    }
    if (!v180)
    {
      uint64_t v181 = 0;
LABEL_146:
      uint64_t v182 = &v181[8 * (((char *)v163 - (char *)v9) >> 3)];
      long long v183 = *v174;
      long long v184 = *(long long *)((char *)v9 + 136);
      *((void *)v182 + 4) = *((void *)v9 + 19);
      *(_OWORD *)uint64_t v182 = v183;
      *((_OWORD *)v182 + 1) = v184;
      uint64_t v177 = v182 + 40;
      if (v163 == v9)
      {
        uint64_t v370 = &v181[8 * (((char *)v163 - (char *)v9) >> 3)];
        *(void *)&long long v371 = v182 + 40;
        *((void *)&v371 + 1) = &v181[40 * v180];
      }
      else
      {
        do
        {
          long long v185 = *(long long *)((char *)v163 - 40);
          long long v186 = *(long long *)((char *)v163 - 24);
          *(void *)(v182 - 11) = *(void *)((char *)v163 - 11);
          *(_OWORD *)(v182 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v186;
          *(_OWORD *)(v182 - 40) = v185;
          v182 -= 40;
          uint64_t v163 = (long long *)((char *)v163 - 40);
        }
        while (v163 != v9);
        uint64_t v370 = v182;
        *(void *)&long long v371 = v177;
        *((void *)&v371 + 1) = &v181[40 * v180];
        if (!v9)
        {
          uint64_t v9 = (long long *)v182;
          goto LABEL_152;
        }
      }
      operator delete(v9);
      uint64_t v9 = (long long *)v370;
LABEL_152:
      *(void *)&long long v371 = v177;
      unsigned int v356 = v360 + 3;
      unsigned int v358 = v360 + 1;
      __asm { FMOV            V1.2D, #0.5 }
      __p = 0;
      long long v364 = 0uLL;
      sub_1C4AAE7CC(&v365, 7uLL, (uint64_t)&__p);
      if (__p)
      {
        *(void *)&long long v364 = __p;
        operator delete(__p);
      }
      unint64_t v190 = *((int *)v9 + 10 * v360 + 4);
      LODWORD(v191) = *((_DWORD *)v9 + 10 * v358 + 4);
      if ((int)v190 < (int)v191)
      {
        while (1)
        {
          uint64_t v194 = v365;
          uint64_t v195 = &v372[40 * v190];
          uint64_t v197 = (_OWORD *)*((void *)v365 + 1);
          unint64_t v196 = *((void *)v365 + 2);
          if ((unint64_t)v197 >= v196) {
            break;
          }
          *uint64_t v197 = *(_OWORD *)v195;
          uint64_t v192 = v197 + 1;
LABEL_157:
          v194[1] = v192;
          uint64_t v9 = (long long *)v370;
          uint64_t v191 = *(int *)&v370[40 * v358 + 16];
          BOOL v193 = (uint64_t)v190++ < v191;
          if (!v193) {
            goto LABEL_219;
          }
        }
        uint64_t v198 = *(_OWORD **)v365;
        uint64_t v199 = ((uint64_t)v197 - *(void *)v365) >> 4;
        unint64_t v200 = v199 + 1;
        if ((unint64_t)(v199 + 1) >> 60) {
          goto LABEL_394;
        }
        uint64_t v201 = v196 - (void)v198;
        if (v201 >> 3 > v200) {
          unint64_t v200 = v201 >> 3;
        }
        if ((unint64_t)v201 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v202 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v202 = v200;
        }
        if (v202)
        {
          if (v202 >> 60) {
            goto LABEL_395;
          }
          long long v203 = (char *)operator new(16 * v202);
          long long v204 = &v203[16 * v199];
          *(_OWORD *)long long v204 = *(_OWORD *)v195;
          uint64_t v205 = (uint64_t)v204;
          if (v197 == v198) {
            goto LABEL_173;
          }
        }
        else
        {
          long long v203 = 0;
          long long v204 = (char *)(16 * v199);
          *(_OWORD *)(16 * v199) = *(_OWORD *)v195;
          uint64_t v205 = 16 * v199;
          if (v197 == v198) {
            goto LABEL_173;
          }
        }
        do
        {
          *(_OWORD *)(v205 - 16) = *(v197 - 1);
          v205 -= 16;
          --v197;
        }
        while (v197 != v198);
        uint64_t v197 = (_OWORD *)*v194;
LABEL_173:
        uint64_t v192 = v204 + 16;
        *uint64_t v194 = v205;
        v194[1] = v204 + 16;
        v194[2] = &v203[16 * v202];
        if (v197) {
          operator delete(v197);
        }
        goto LABEL_157;
      }
      uint64_t v206 = v372;
      unint64_t v207 = 0xCCCCCCCCCCCCCCCDLL * ((v373 - v372) >> 3);
      if (v207 > v190 && v207 - 1 != v190)
      {
        while (1)
        {
          long long v209 = v365;
          uint64_t v210 = &v206[40 * v190];
          uint64_t v212 = (_OWORD *)*((void *)v365 + 1);
          unint64_t v211 = *((void *)v365 + 2);
          if ((unint64_t)v212 >= v211) {
            break;
          }
          *uint64_t v212 = *(_OWORD *)v210;
          long long v208 = v212 + 1;
LABEL_179:
          v209[1] = v208;
          ++v190;
          uint64_t v206 = v372;
          if (0xCCCCCCCCCCCCCCCDLL * ((v373 - v372) >> 3) <= v190)
          {
            uint64_t v9 = (long long *)v370;
            LODWORD(v191) = *(_DWORD *)&v370[40 * v358 + 16];
            goto LABEL_197;
          }
        }
        uint64_t v213 = *(_OWORD **)v365;
        uint64_t v214 = ((uint64_t)v212 - *(void *)v365) >> 4;
        unint64_t v215 = v214 + 1;
        if ((unint64_t)(v214 + 1) >> 60) {
LABEL_394:
        }
          sub_1C494A220();
        uint64_t v216 = v211 - (void)v213;
        if (v216 >> 3 > v215) {
          unint64_t v215 = v216 >> 3;
        }
        if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v217 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v217 = v215;
        }
        if (v217)
        {
          if (v217 >> 60) {
LABEL_395:
          }
            sub_1C4949AA8();
          uint64_t v218 = (char *)operator new(16 * v217);
          uint64_t v219 = &v218[16 * v214];
          *(_OWORD *)uint64_t v219 = *(_OWORD *)v210;
          uint64_t v220 = (uint64_t)v219;
          if (v212 == v213) {
            goto LABEL_194;
          }
        }
        else
        {
          uint64_t v218 = 0;
          uint64_t v219 = (char *)(16 * v214);
          *(_OWORD *)(16 * v214) = *(_OWORD *)v210;
          uint64_t v220 = 16 * v214;
          if (v212 == v213) {
            goto LABEL_194;
          }
        }
        do
        {
          *(_OWORD *)(v220 - 16) = *(v212 - 1);
          v220 -= 16;
          --v212;
        }
        while (v212 != v213);
        uint64_t v212 = (_OWORD *)*v209;
LABEL_194:
        long long v208 = v219 + 16;
        *long long v209 = v220;
        v209[1] = v219 + 16;
        v209[2] = &v218[16 * v217];
        if (v212) {
          operator delete(v212);
        }
        goto LABEL_179;
      }
LABEL_197:
      if (v191 && (v191 & 0x80000000) == 0)
      {
        uint64_t v221 = 0;
        do
        {
          uint64_t v223 = v365;
          uint64_t v224 = &v372[40 * v221];
          uint64_t v226 = (_OWORD *)*((void *)v365 + 1);
          unint64_t v225 = *((void *)v365 + 2);
          if ((unint64_t)v226 < v225)
          {
            *uint64_t v226 = *(_OWORD *)v224;
            uint64_t v222 = v226 + 1;
          }
          else
          {
            uint64_t v227 = *(_OWORD **)v365;
            uint64_t v228 = ((uint64_t)v226 - *(void *)v365) >> 4;
            unint64_t v229 = v228 + 1;
            if ((unint64_t)(v228 + 1) >> 60) {
              goto LABEL_394;
            }
            uint64_t v230 = v225 - (void)v227;
            if (v230 >> 3 > v229) {
              unint64_t v229 = v230 >> 3;
            }
            if ((unint64_t)v230 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v231 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v231 = v229;
            }
            if (v231)
            {
              if (v231 >> 60) {
                goto LABEL_395;
              }
              uint64_t v232 = (char *)operator new(16 * v231);
            }
            else
            {
              uint64_t v232 = 0;
            }
            uint64_t v233 = &v232[16 * v228];
            *(_OWORD *)uint64_t v233 = *(_OWORD *)v224;
            uint64_t v234 = v233;
            if (v226 != v227)
            {
              do
              {
                *((_OWORD *)v234 - 1) = *(v226 - 1);
                v234 -= 16;
                --v226;
              }
              while (v226 != v227);
              uint64_t v226 = (_OWORD *)*v223;
            }
            uint64_t v222 = v233 + 16;
            void *v223 = v234;
            v223[1] = v233 + 16;
            v223[2] = &v232[16 * v231];
            if (v226) {
              operator delete(v226);
            }
          }
          v223[1] = v222;
          uint64_t v9 = (long long *)v370;
          uint64_t v191 = *(int *)&v370[40 * v358 + 16];
          BOOL v193 = v221++ < v191;
        }
        while (v193);
      }
LABEL_219:
      uint64_t v235 = (char *)v9 + 40 * v360 + 80;
      int v238 = *((_DWORD *)v235 + 4);
      uint64_t v237 = (int *)(v235 + 16);
      uint64_t v236 = v238;
      if ((int)v191 < v238)
      {
        *(void *)operator new(8uLL) = v191 | (unint64_t)(v236 << 32);
        goto LABEL_238;
      }
      unint64_t v239 = 0xCCCCCCCCCCCCCCCDLL * ((v373 - v372) >> 3) - 1;
      if (v239 == (int)v191)
      {
        v353 = 0;
        uint64_t v240 = 0;
        uint64_t v241 = v236;
        if (!v236) {
          goto LABEL_238;
        }
      }
      else
      {
        v353 = (char *)operator new(8uLL);
        *(void *)v353 = v191 | (v239 << 32);
        uint64_t v240 = v353 + 8;
        uint64_t v241 = *v237;
        if (!v241) {
          goto LABEL_238;
        }
      }
      uint64_t v242 = v240 - v353;
      uint64_t v243 = (v240 - v353) >> 3;
      unint64_t v244 = v243 + 1;
      if ((unint64_t)(v243 + 1) >> 61) {
        sub_1C494A220();
      }
      if (v242 >> 2 > v244) {
        unint64_t v244 = v242 >> 2;
      }
      if ((unint64_t)v242 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v244 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v244)
      {
        if (v244 >> 61) {
          sub_1C4949AA8();
        }
        uint64_t v245 = operator new(8 * v244);
      }
      else
      {
        uint64_t v245 = 0;
      }
      v245[v243] = v241 << 32;
      if (v240 != v353) {
        memcpy((char *)v245 + v242 - ((v240 - v353 - 8) & 0xFFFFFFFFFFFFFFF8) - 8, &v240[-((v240 - v353 - 8) & 0xFFFFFFFFFFFFFFF8) - 8], ((v240 - v353 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      if (v353) {
        operator delete(v353);
      }
LABEL_238:
      unint64_t v246 = *v237;
      LODWORD(v247) = *((_DWORD *)v9 + 10 * v356 + 4);
      if ((int)v246 < (int)v247)
      {
        while (1)
        {
          uint64_t v249 = v365;
          uint64_t v250 = &v372[40 * v246];
          v252 = (_OWORD *)*((void *)v365 + 10);
          unint64_t v251 = *((void *)v365 + 11);
          if ((unint64_t)v252 >= v251) {
            break;
          }
          _OWORD *v252 = *(_OWORD *)v250;
          uint64_t v248 = v252 + 1;
LABEL_241:
          v249[10] = v248;
          uint64_t v9 = (long long *)v370;
          uint64_t v247 = *(int *)&v370[40 * v356 + 16];
          BOOL v193 = (uint64_t)v246++ < v247;
          if (!v193) {
            goto LABEL_306;
          }
        }
        uint64_t v253 = (_OWORD **)((char *)v365 + 72);
        uint64_t v254 = (_OWORD *)*((void *)v365 + 9);
        uint64_t v255 = v252 - v254;
        unint64_t v256 = v255 + 1;
        if ((unint64_t)(v255 + 1) >> 60) {
          goto LABEL_394;
        }
        uint64_t v257 = v251 - (void)v254;
        if (v257 >> 3 > v256) {
          unint64_t v256 = v257 >> 3;
        }
        if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v258 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v258 = v256;
        }
        if (v258)
        {
          if (v258 >> 60) {
            goto LABEL_395;
          }
          uint64_t v259 = (char *)operator new(16 * v258);
          uint64_t v260 = &v259[16 * v255];
          *(_OWORD *)uint64_t v260 = *(_OWORD *)v250;
          uint64_t v261 = (uint64_t)v260;
          if (v252 == v254) {
            goto LABEL_257;
          }
        }
        else
        {
          uint64_t v259 = 0;
          uint64_t v260 = (char *)(16 * v255);
          *(_OWORD *)(16 * v255) = *(_OWORD *)v250;
          uint64_t v261 = 16 * v255;
          if (v252 == v254) {
            goto LABEL_257;
          }
        }
        do
        {
          *(_OWORD *)(v261 - 16) = *(v252 - 1);
          v261 -= 16;
          --v252;
        }
        while (v252 != v254);
        v252 = *v253;
LABEL_257:
        uint64_t v248 = v260 + 16;
        v249[9] = v261;
        v249[10] = v260 + 16;
        v249[11] = &v259[16 * v258];
        if (v252) {
          operator delete(v252);
        }
        goto LABEL_241;
      }
      uint64_t v262 = v372;
      unint64_t v263 = 0xCCCCCCCCCCCCCCCDLL * ((v373 - v372) >> 3);
      if (v263 > v246 && v263 - 1 != v246)
      {
        while (1)
        {
          uint64_t v266 = v365;
          uint64_t v267 = &v262[40 * v246];
          uint64_t v269 = (_OWORD *)*((void *)v365 + 10);
          unint64_t v268 = *((void *)v365 + 11);
          if ((unint64_t)v269 >= v268) {
            break;
          }
          _OWORD *v269 = *(_OWORD *)v267;
          uint64_t v265 = v269 + 1;
LABEL_265:
          v266[10] = v265;
          ++v246;
          uint64_t v262 = v372;
          if (0xCCCCCCCCCCCCCCCDLL * ((v373 - v372) >> 3) <= v246)
          {
            uint64_t v9 = (long long *)v370;
            LODWORD(v247) = *(_DWORD *)&v370[40 * v356 + 16];
            goto LABEL_284;
          }
        }
        uint64_t v270 = (_OWORD **)((char *)v365 + 72);
        uint64_t v271 = (_OWORD *)*((void *)v365 + 9);
        uint64_t v272 = v269 - v271;
        unint64_t v273 = v272 + 1;
        if ((unint64_t)(v272 + 1) >> 60) {
          goto LABEL_394;
        }
        uint64_t v274 = v268 - (void)v271;
        if (v274 >> 3 > v273) {
          unint64_t v273 = v274 >> 3;
        }
        if ((unint64_t)v274 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v275 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v275 = v273;
        }
        if (v275)
        {
          if (v275 >> 60) {
            goto LABEL_395;
          }
          uint64_t v276 = (char *)operator new(16 * v275);
          uint64_t v277 = &v276[16 * v272];
          *(_OWORD *)uint64_t v277 = *(_OWORD *)v267;
          uint64_t v278 = (uint64_t)v277;
          if (v269 == v271) {
            goto LABEL_280;
          }
        }
        else
        {
          uint64_t v276 = 0;
          uint64_t v277 = (char *)(16 * v272);
          *(_OWORD *)(16 * v272) = *(_OWORD *)v267;
          uint64_t v278 = 16 * v272;
          if (v269 == v271) {
            goto LABEL_280;
          }
        }
        do
        {
          *(_OWORD *)(v278 - 16) = *(v269 - 1);
          v278 -= 16;
          --v269;
        }
        while (v269 != v271);
        uint64_t v269 = *v270;
LABEL_280:
        uint64_t v265 = v277 + 16;
        v266[9] = v278;
        v266[10] = v277 + 16;
        v266[11] = &v276[16 * v275];
        if (v269) {
          operator delete(v269);
        }
        goto LABEL_265;
      }
LABEL_284:
      if (v247 && (v247 & 0x80000000) == 0)
      {
        uint64_t v279 = 0;
        do
        {
          uint64_t v281 = v365;
          uint64_t v282 = &v372[40 * v279];
          uint64_t v284 = (_OWORD *)*((void *)v365 + 10);
          unint64_t v283 = *((void *)v365 + 11);
          if ((unint64_t)v284 < v283)
          {
            *uint64_t v284 = *(_OWORD *)v282;
            uint64_t v280 = v284 + 1;
          }
          else
          {
            uint64_t v285 = (_OWORD **)((char *)v365 + 72);
            uint64_t v286 = (_OWORD *)*((void *)v365 + 9);
            uint64_t v287 = v284 - v286;
            unint64_t v288 = v287 + 1;
            if ((unint64_t)(v287 + 1) >> 60) {
              goto LABEL_394;
            }
            uint64_t v289 = v283 - (void)v286;
            if (v289 >> 3 > v288) {
              unint64_t v288 = v289 >> 3;
            }
            if ((unint64_t)v289 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v290 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v290 = v288;
            }
            if (v290)
            {
              if (v290 >> 60) {
                goto LABEL_395;
              }
              uint64_t v291 = (char *)operator new(16 * v290);
            }
            else
            {
              uint64_t v291 = 0;
            }
            uint64_t v292 = &v291[16 * v287];
            *(_OWORD *)uint64_t v292 = *(_OWORD *)v282;
            uint64_t v293 = v292;
            if (v284 != v286)
            {
              do
              {
                *((_OWORD *)v293 - 1) = *(v284 - 1);
                v293 -= 16;
                --v284;
              }
              while (v284 != v286);
              uint64_t v284 = *v285;
            }
            uint64_t v280 = v292 + 16;
            v281[9] = v293;
            v281[10] = v292 + 16;
            v281[11] = &v291[16 * v290];
            if (v284) {
              operator delete(v284);
            }
          }
          v281[10] = v280;
          uint64_t v9 = (long long *)v370;
          uint64_t v247 = *(int *)&v370[40 * v356 + 16];
          BOOL v193 = v279++ < v247;
        }
        while (v193);
      }
LABEL_306:
      uint64_t v294 = (char *)v9 + 40 * v360 + 160;
      int v297 = *((_DWORD *)v294 + 4);
      uint64_t v296 = (unsigned int *)(v294 + 16);
      uint64_t v295 = v297;
      if ((int)v247 < v297)
      {
        *(void *)operator new(8uLL) = v247 | (unint64_t)(v295 << 32);
LABEL_325:
        unint64_t v305 = (int)*v296;
        int v306 = *((_DWORD *)v9 + 10 * v360 + 4);
        if ((int)v305 < v306)
        {
          while (1)
          {
            uint64_t v308 = v365;
            uint64_t v309 = &v372[40 * v305];
            uint64_t v311 = (_OWORD *)*((void *)v365 + 19);
            unint64_t v310 = *((void *)v365 + 20);
            if ((unint64_t)v311 >= v310) {
              break;
            }
            *uint64_t v311 = *(_OWORD *)v309;
            uint64_t v307 = v311 + 1;
LABEL_328:
            v308[19] = v307;
            BOOL v193 = (uint64_t)v305++ < *(int *)&v370[40 * v360 + 16];
            if (!v193) {
              goto LABEL_392;
            }
          }
          uint64_t v312 = (_OWORD **)((char *)v365 + 144);
          v313 = (_OWORD *)*((void *)v365 + 18);
          uint64_t v314 = v311 - v313;
          unint64_t v315 = v314 + 1;
          if ((unint64_t)(v314 + 1) >> 60) {
            goto LABEL_394;
          }
          uint64_t v316 = v310 - (void)v313;
          if (v316 >> 3 > v315) {
            unint64_t v315 = v316 >> 3;
          }
          if ((unint64_t)v316 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v317 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v317 = v315;
          }
          if (v317)
          {
            if (v317 >> 60) {
              goto LABEL_395;
            }
            double v318 = (char *)operator new(16 * v317);
            double v319 = &v318[16 * v314];
            *(_OWORD *)double v319 = *(_OWORD *)v309;
            uint64_t v320 = (uint64_t)v319;
            if (v311 == v313) {
              goto LABEL_344;
            }
          }
          else
          {
            double v318 = 0;
            double v319 = (char *)(16 * v314);
            *(_OWORD *)(16 * v314) = *(_OWORD *)v309;
            uint64_t v320 = 16 * v314;
            if (v311 == v313)
            {
LABEL_344:
              uint64_t v307 = v319 + 16;
              v308[18] = v320;
              v308[19] = v319 + 16;
              v308[20] = &v318[16 * v317];
              if (v311) {
                operator delete(v311);
              }
              goto LABEL_328;
            }
          }
          do
          {
            *(_OWORD *)(v320 - 16) = *(v311 - 1);
            v320 -= 16;
            --v311;
          }
          while (v311 != v313);
          uint64_t v311 = *v312;
          goto LABEL_344;
        }
        unsigned int v321 = v372;
        unint64_t v322 = 0xCCCCCCCCCCCCCCCDLL * ((v373 - v372) >> 3);
        if (v322 > v305 && v322 - 1 != v305)
        {
          while (1)
          {
            uint64_t v325 = v365;
            uint64_t v326 = &v321[40 * v305];
            uint64_t v328 = (_OWORD *)*((void *)v365 + 19);
            unint64_t v327 = *((void *)v365 + 20);
            if ((unint64_t)v328 >= v327) {
              break;
            }
            *uint64_t v328 = *(_OWORD *)v326;
            v324 = v328 + 1;
LABEL_352:
            v325[19] = v324;
            ++v305;
            unsigned int v321 = v372;
            if (0xCCCCCCCCCCCCCCCDLL * ((v373 - v372) >> 3) <= v305)
            {
              int v306 = *(_DWORD *)&v370[40 * v360 + 16];
              goto LABEL_371;
            }
          }
          v329 = (_OWORD **)((char *)v365 + 144);
          uint64_t v330 = (_OWORD *)*((void *)v365 + 18);
          uint64_t v331 = v328 - v330;
          unint64_t v332 = v331 + 1;
          if ((unint64_t)(v331 + 1) >> 60) {
            goto LABEL_394;
          }
          uint64_t v333 = v327 - (void)v330;
          if (v333 >> 3 > v332) {
            unint64_t v332 = v333 >> 3;
          }
          if ((unint64_t)v333 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v334 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v334 = v332;
          }
          if (v334)
          {
            if (v334 >> 60) {
              goto LABEL_395;
            }
            v335 = (char *)operator new(16 * v334);
            uint64_t v336 = &v335[16 * v331];
            *(_OWORD *)uint64_t v336 = *(_OWORD *)v326;
            uint64_t v337 = (uint64_t)v336;
            if (v328 == v330) {
              goto LABEL_367;
            }
          }
          else
          {
            v335 = 0;
            uint64_t v336 = (char *)(16 * v331);
            *(_OWORD *)(16 * v331) = *(_OWORD *)v326;
            uint64_t v337 = 16 * v331;
            if (v328 == v330) {
              goto LABEL_367;
            }
          }
          do
          {
            *(_OWORD *)(v337 - 16) = *(v328 - 1);
            v337 -= 16;
            --v328;
          }
          while (v328 != v330);
          uint64_t v328 = *v329;
LABEL_367:
          v324 = v336 + 16;
          v325[18] = v337;
          v325[19] = v336 + 16;
          v325[20] = &v335[16 * v334];
          if (v328) {
            operator delete(v328);
          }
          goto LABEL_352;
        }
LABEL_371:
        if (v306 < 1) {
LABEL_392:
        }
          operator new[]();
        uint64_t v338 = 0;
        while (1)
        {
          uint64_t v340 = v365;
          uint64_t v341 = &v372[40 * v338];
          v343 = (_OWORD *)*((void *)v365 + 19);
          unint64_t v342 = *((void *)v365 + 20);
          if ((unint64_t)v343 >= v342) {
            break;
          }
          _OWORD *v343 = *(_OWORD *)v341;
          v339 = v343 + 1;
LABEL_374:
          v340[19] = v339;
          BOOL v193 = v338++ < *(int *)&v370[40 * v360 + 16];
          if (!v193) {
            goto LABEL_392;
          }
        }
        uint64_t v344 = (_OWORD **)((char *)v365 + 144);
        uint64_t v345 = (_OWORD *)*((void *)v365 + 18);
        uint64_t v346 = v343 - v345;
        unint64_t v347 = v346 + 1;
        if ((unint64_t)(v346 + 1) >> 60) {
          goto LABEL_394;
        }
        uint64_t v348 = v342 - (void)v345;
        if (v348 >> 3 > v347) {
          unint64_t v347 = v348 >> 3;
        }
        if ((unint64_t)v348 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v349 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v349 = v347;
        }
        if (v349)
        {
          if (v349 >> 60) {
            goto LABEL_395;
          }
          uint64_t v350 = (char *)operator new(16 * v349);
          uint64_t v351 = &v350[16 * v346];
          *(_OWORD *)uint64_t v351 = *(_OWORD *)v341;
          uint64_t v352 = (uint64_t)v351;
          if (v343 == v345) {
            goto LABEL_390;
          }
        }
        else
        {
          uint64_t v350 = 0;
          uint64_t v351 = (char *)(16 * v346);
          *(_OWORD *)(16 * v346) = *(_OWORD *)v341;
          uint64_t v352 = 16 * v346;
          if (v343 == v345) {
            goto LABEL_390;
          }
        }
        do
        {
          *(_OWORD *)(v352 - 16) = *(v343 - 1);
          v352 -= 16;
          --v343;
        }
        while (v343 != v345);
        v343 = *v344;
LABEL_390:
        v339 = v351 + 16;
        v340[18] = v352;
        v340[19] = v351 + 16;
        v340[20] = &v350[16 * v349];
        if (v343) {
          operator delete(v343);
        }
        goto LABEL_374;
      }
      unint64_t v298 = 0xCCCCCCCCCCCCCCCDLL * ((v373 - v372) >> 3) - 1;
      if (v298 == (int)v247)
      {
        v354 = 0;
        uint64_t v299 = 0;
        uint64_t v300 = v295;
        if (!v295) {
          goto LABEL_325;
        }
      }
      else
      {
        v354 = (char *)operator new(8uLL);
        *(void *)v354 = v247 | (v298 << 32);
        uint64_t v299 = v354 + 8;
        uint64_t v300 = *v296;
        if (!v300) {
          goto LABEL_325;
        }
      }
      uint64_t v301 = v299 - v354;
      uint64_t v302 = (v299 - v354) >> 3;
      unint64_t v303 = v302 + 1;
      if ((unint64_t)(v302 + 1) >> 61) {
        sub_1C494A220();
      }
      if (v301 >> 2 > v303) {
        unint64_t v303 = v301 >> 2;
      }
      if ((unint64_t)v301 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v303 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v303)
      {
        if (v303 >> 61) {
          sub_1C4949AA8();
        }
        uint64_t v304 = operator new(8 * v303);
      }
      else
      {
        uint64_t v304 = 0;
      }
      v304[v302] = v300 << 32;
      if (v299 != v354) {
        memcpy((char *)v304 + v301 - ((v299 - v354 - 8) & 0xFFFFFFFFFFFFFFF8) - 8, &v299[-((v299 - v354 - 8) & 0xFFFFFFFFFFFFFFF8) - 8], ((v299 - v354 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      if (v354) {
        operator delete(v354);
      }
      goto LABEL_325;
    }
    if (v180 <= 0x666666666666666)
    {
      uint64_t v181 = (char *)operator new(40 * v180);
      goto LABEL_146;
    }
LABEL_397:
    sub_1C4949AA8();
  }
LABEL_396:
  sub_1C494A220();
}

void sub_1C4AAE178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,void *a50)
{
  if (__p)
  {
    operator delete(__p);
    sub_1C496B66C(&a50);
    if (!a21)
    {
LABEL_3:
      if (!a20)
      {
LABEL_8:
        double v53 = *(void **)(v51 - 200);
        if (v53)
        {
          *(void *)(v51 - 192) = v53;
          operator delete(v53);
        }
        double v54 = *(void **)(v51 - 176);
        if (v54)
        {
          *(void *)(v51 - 168) = v54;
          operator delete(v54);
        }

        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a20);
      goto LABEL_8;
    }
  }
  else
  {
    sub_1C496B66C(&a50);
    if (!a21) {
      goto LABEL_3;
    }
  }
  operator delete(a21);
  if (!a20) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void OutlinedArrowRegressor::provideAnAnswer(OutlinedArrowRegressor *this, CHDrawing *a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = 0;
  float v38 = (float *)&v38;
  double v39 = (void **)&v38;
  unint64_t v40 = 0;
  float v35 = (float *)&v35;
  float v36 = (void **)&v35;
  unint64_t v37 = 0;
  for (unint64_t i = objc_msgSend_strokeCount(v2, v4, v5, v6, v7, v8);
        i > v3;
        unint64_t i = objc_msgSend_strokeCount(v2, v15, v16, v17, v18, v19))
  {
    for (unint64_t j = 0; objc_msgSend_pointCountForStrokeIndex_(v2, v10, v3, v11, v12, v13) > j; ++j)
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(v2, v15, v3, j, v18, v19);
      double v21 = v20;
      double v23 = v22;
      float v24 = (float *)operator new(0x18uLL);
      float v25 = v21;
      void v24[4] = v25;
      double v26 = v38;
      *(void *)float v24 = v38;
      *((void *)v24 + 1) = &v38;
      *((void *)v26 + 1) = v24;
      float v38 = v24;
      ++v40;
      double v27 = (float *)operator new(0x18uLL);
      float v28 = v23;
      v27[4] = v28;
      float v29 = v35;
      *(void *)double v27 = v35;
      *((void *)v27 + 1) = &v35;
      *((void *)v29 + 1) = v27;
      float v35 = v27;
      ++v37;
    }
    ++v3;
  }
  sub_1C4AAE95C((uint64_t)v39, (uint64_t)&v38, v40, (uint64_t)&v41);
  sub_1C4AAE95C((uint64_t)v36, (uint64_t)&v35, v37, (uint64_t)&v41);
  uint64_t v30 = (uint64_t)v36;
  uint64_t v31 = (uint64_t)v39;
  if (v40 >= 8)
  {
    unint64_t v32 = v40 >> 3;
    double v33 = (void **)&v38;
    double v34 = (void **)&v35;
    do
    {
      uint64_t v31 = *(void *)(v31 + 8);
      uint64_t v30 = *(void *)(v30 + 8);
      double v33 = (void **)*v33;
      double v34 = (void **)*v34;
      --v32;
    }
    while (v32);
  }
  operator new();
}

void sub_1C4AAE600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_1C4AAE650((uint64_t *)va);
  sub_1C4AAE650((uint64_t *)va1);

  _Unwind_Resume(a1);
}

BOOL sub_1C4AAE638(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 20) < *(_DWORD *)(a2 + 20);
}

uint64_t *sub_1C4AAE650(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v2[1];
        operator delete(v2);
        uint64_t v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t OutlinedArrowRegressor::confidenceLevelVersusPentagon(OutlinedArrowRegressor *this)
{
  return cblas_sdot_NEWLAPACK();
}

uint64_t OutlinedArrowRegressor::confidenceLevelVersusChatBubble(OutlinedArrowRegressor *this)
{
  return cblas_sdot_NEWLAPACK();
}

void sub_1C4AAE7A4(char *a1@<X8>)
{
  a1[23] = 15;
  strcpy(a1, "CHOutlinedArrow");
}

void *sub_1C4AAE7CC(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_1C494A220();
    }
    uint64_t v6 = operator new(24 * a2);
    uint64_t v7 = v6;
    *a1 = v6;
    a1[1] = v6;
    uint64_t v8 = &v6[3 * a2];
    a1[2] = v8;
    uint64_t v9 = *(const void **)a3;
    int64_t v10 = *(void *)(a3 + 8) - *(void *)a3;
    if (v10)
    {
      if (v10 < 0)
      {
        void *v6 = 0;
        v6[1] = 0;
        v6[2] = 0;
        sub_1C494A220();
      }
      uint64_t v11 = 24 * a2;
      do
      {
        void *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        uint64_t v12 = (char *)operator new(v10);
        void *v7 = v12;
        v7[1] = v12;
        uint64_t v13 = &v12[16 * (v10 >> 4)];
        v7[2] = v13;
        memcpy(v12, v9, v10);
        v7[1] = v13;
        v7 += 3;
        v11 -= 24;
      }
      while (v11);
    }
    else
    {
      bzero(v6, 24 * ((24 * a2 - 24) / 0x18) + 24);
    }
    a1[1] = v8;
  }
  return a1;
}

void sub_1C4AAE908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  *(void *)(v9 + 8) = v10;
  sub_1C4A47208(&a9);
  _Unwind_Resume(a1);
}

void sub_1C4AAE930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1C4AAE944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1C4A47208(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4AAE95C(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a3 < 2) {
    return result;
  }
  if (a3 == 2)
  {
    uint64_t v5 = *(uint64_t **)a2;
    if (*(float *)(*(void *)a2 + 16) < *(float *)(result + 16))
    {
      uint64_t v6 = *v5;
      *(void *)(v6 + 8) = v5[1];
      *(void *)v5[1] = v6;
      uint64_t v7 = *(void *)result;
      *(void *)(v7 + 8) = v5;
      uint64_t *v5 = v7;
      *(void *)__n128 result = v5;
      v5[1] = result;
      return (uint64_t)v5;
    }
    return result;
  }
  unint64_t v10 = a3 >> 1;
  unint64_t v11 = (a3 >> 1) + 1;
  uint64_t v12 = result;
  do
  {
    uint64_t v12 = *(void *)(v12 + 8);
    --v11;
  }
  while (v11 > 1);
  uint64_t v13 = sub_1C4AAE95C(result, v12, a3 >> 1, a4);
  __n128 result = sub_1C4AAE95C(v12, a2, a3 - v10, a4);
  float v14 = *(float *)(v13 + 16);
  if (*(float *)(result + 16) >= v14)
  {
    uint64_t v18 = *(uint64_t **)(v13 + 8);
    uint64_t v15 = result;
    __n128 result = v13;
    if (v18 == (uint64_t *)v15) {
      return result;
    }
    goto LABEL_15;
  }
  uint64_t v15 = *(void *)(result + 8);
  if (v15 == a2)
  {
LABEL_11:
    uint64_t v15 = a2;
  }
  else
  {
    while (*(float *)(v15 + 16) < v14)
    {
      uint64_t v15 = *(void *)(v15 + 8);
      if (v15 == a2) {
        goto LABEL_11;
      }
    }
  }
  uint64_t v16 = *(void *)v15;
  uint64_t v17 = *(void *)result;
  *(void *)(v17 + 8) = *(void *)(*(void *)v15 + 8);
  **(void **)(v16 + 8) = v17;
  uint64_t v19 = *(void *)v13;
  uint64_t v18 = *(uint64_t **)(v13 + 8);
  *(void *)(v19 + 8) = result;
  *(void *)__n128 result = v19;
  *(void *)uint64_t v13 = v16;
  *(void *)(v16 + 8) = v13;
  if (v18 != (uint64_t *)v15)
  {
LABEL_15:
    if (v15 != a2)
    {
      uint64_t v20 = v15;
      do
      {
        float v21 = *((float *)v18 + 4);
        if (*(float *)(v15 + 16) >= v21)
        {
          uint64_t v18 = (uint64_t *)v18[1];
          if (v18 == (uint64_t *)v20) {
            return result;
          }
        }
        else
        {
          uint64_t v22 = *(void *)(v15 + 8);
          if (v22 == a2)
          {
LABEL_21:
            uint64_t v22 = a2;
          }
          else
          {
            while (*(float *)(v22 + 16) < v21)
            {
              uint64_t v22 = *(void *)(v22 + 8);
              if (v22 == a2) {
                goto LABEL_21;
              }
            }
          }
          uint64_t v23 = *(void *)v22;
          uint64_t v24 = *(void *)v15;
          *(void *)(v24 + 8) = *(void *)(*(void *)v22 + 8);
          **(void **)(v23 + 8) = v24;
          if (v20 == v15) {
            uint64_t v20 = v22;
          }
          uint64_t v26 = *v18;
          float v25 = (uint64_t *)v18[1];
          *(void *)(v26 + 8) = v15;
          *(void *)uint64_t v15 = v26;
          uint64_t *v18 = v23;
          *(void *)(v23 + 8) = v18;
          uint64_t v18 = v25;
          uint64_t v15 = v22;
          if (v25 == (uint64_t *)v20) {
            return result;
          }
        }
      }
      while (v15 != a2);
    }
  }
  return result;
}

void sub_1C4AAF504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v33 - 168), 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1C4AAF778(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4AAF788(uint64_t a1)
{
}

void sub_1C4AAF790(uint64_t a1, void *a2)
{
  id v38 = a2;
  uint64_t v8 = objc_msgSend_string(v38, v3, v4, v5, v6, v7);
  char isEqualToString = objc_msgSend_isEqualToString_(v8, v9, @"{", v10, v11, v12);

  if (isEqualToString)
  {
    uint64_t v19 = 1;
  }
  else
  {
    uint64_t v20 = objc_msgSend_string(v38, v14, v15, v16, v17, v18);
    char v25 = objc_msgSend_isEqualToString_(v20, v21, @"}", v22, v23, v24);

    if ((v25 & 1) == 0) {
      goto LABEL_6;
    }
    uint64_t v19 = -1;
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += v19;
LABEL_6:
  objc_msgSend_addObject_(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v14, (uint64_t)v38, v16, v17, v18);
  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v26, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v27, v28, v29);
    uint64_t v35 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v30, v31, v32, v33, v34);
    uint64_t v36 = *(void *)(*(void *)(a1 + 48) + 8);
    unint64_t v37 = *(void **)(v36 + 40);
    *(void *)(v36 + 40) = v35;
  }
}

void sub_1C4AAF8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AAF8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AAFB98(uint64_t a1, const CGFloat *a2, double a3, double a4, double a5, double a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  Mutable = CGPathCreateMutable();
  v27.origin.x = a7;
  v27.origin.y = a8;
  v27.size.width = a9;
  v27.size.height = a10;
  CGFloat v21 = CGRectGetMinX(v27) + a3 * a9;
  v28.origin.x = a7;
  v28.origin.y = a8;
  v28.size.width = a9;
  v28.size.height = a10;
  CGFloat MinY = CGRectGetMinY(v28);
  CGPathMoveToPoint(Mutable, 0, v21, MinY + a4 * a10);
  v29.origin.x = a7;
  v29.origin.y = a8;
  v29.size.width = a9;
  v29.size.height = a10;
  CGFloat v23 = CGRectGetMinX(v29) + a5 * a9;
  v30.origin.x = a7;
  v30.origin.y = a8;
  v30.size.width = a9;
  v30.size.height = a10;
  CGFloat v24 = CGRectGetMinY(v30);
  CGPathAddLineToPoint(Mutable, 0, v23, v24 + a6 * a10);
  CGPathCloseSubpath(Mutable);
  char v25 = CGColorCreate(*(CGColorSpaceRef *)(a1 + 32), a2);
  CGContextSetStrokeColorWithColor(*(CGContextRef *)(a1 + 40), v25);
  CGContextAddPath(*(CGContextRef *)(a1 + 40), Mutable);
  CGContextStrokePath(*(CGContextRef *)(a1 + 40));
  CGPathRelease(Mutable);
  CGColorRelease(v25);
}

#error "1C4AB0088: call analysis failed (funcsize=239)"

void normalizeFeature(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, NSIndexSet *a7)
{
  uint64_t v11 = a7;
  uint64_t v16 = v11;
  unint64_t v37 = v11;
  if (v11)
  {
    uint64_t v11 = (NSIndexSet *)objc_msgSend_count(v11, (const char *)v11, v12, v13, v14, v15);
    uint64_t v16 = v37;
  }
  if (a1 && a2 - (uint64_t)v11 >= 1 && a2 >= 1)
  {
    if (v16)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 4 * a3;
      uint64_t v19 = &a1[a4];
      for (char i = objc_msgSend_containsIndex_(v16, (const char *)v16, 0, v13, v14, v15, a5, *(void *)&a6);
            ;
            char i = objc_msgSend_containsIndex_(v37, (const char *)v37, v17, v21, v22, v23, v24, *(void *)&v35))
      {
        if ((i & 1) == 0)
        {
          double v24 = (*v19 - a5) / v35;
          *(float *)&double v24 = v24;
          *uint64_t v19 = *(float *)&v24;
        }
        ++v17;
        uint64_t v19 = (float *)((char *)v19 + v18);
        uint64_t v16 = v37;
        if (a2 == v17) {
          break;
        }
      }
    }
    else
    {
      unint64_t v25 = 0;
      if ((unint64_t)a2 < 8) {
        goto LABEL_17;
      }
      if (a3 != 1) {
        goto LABEL_17;
      }
      float64x2_t v26 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a5, 0);
      unint64_t v25 = a2 & 0xFFFFFFFFFFFFFFF8;
      float64x2_t v27 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a6, 0);
      CGRect v28 = (float32x2_t *)&a1[a4 + 4];
      unint64_t v29 = a2 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        float32x4_t v30 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vsubq_f64(vcvtq_f64_f32(*v28), v26), v27)), vdivq_f64(vsubq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v28->f32), v26), v27));
        *(float32x4_t *)v28[-2].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vsubq_f64(vcvtq_f64_f32(v28[-2]), v26), v27)), vdivq_f64(vsubq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v28[-2].f32), v26), v27));
        *(float32x4_t *)v28->f32 = v30;
        v28 += 4;
        v29 -= 8;
      }
      while (v29);
      if (v25 != a2)
      {
LABEL_17:
        unint64_t v31 = a2 - v25;
        uint64_t v32 = &a1[a4 + v25 * a3];
        do
        {
          float v33 = (*v32 - a5) / a6;
          *uint64_t v32 = v33;
          v32 += a3;
          --v31;
        }
        while (v31);
      }
    }
  }
}

void sub_1C4AB04FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4AB0510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4AB0524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4AB0538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4AB05D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AB0694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AB06A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AB0744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AB0758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AB0768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AB0EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C4AB1110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v10 = v9;

  a9.super_class = (Class)CHRecurrentNeuralNetworkCoreML;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C4AB1240()
{
  id v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.CHStrokeClassificationModel.queue", v0);
  uint64_t v2 = (void *)qword_1EA3C8F40;
  qword_1EA3C8F40 = (uint64_t)v1;

  uint64_t v3 = (void *)qword_1EA3C8F48;
  qword_1EA3C8F48 = 0;

  uint64_t v4 = (void *)qword_1EA3C8F50;
  qword_1EA3C8F50 = 0;
}

void sub_1C4AB13C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4AB13D0(uint64_t result)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!qword_1EA3C8F48)
  {
    id v1 = *(id *)(result + 32);
    uint64_t v7 = (const char *)objc_msgSend_UTF8String(v1, v2, v3, v4, v5, v6);
    pathForResource(v7, 0, (UInt8 *)__s);
    size_t v8 = strlen(__s);
    if (v8 > 0x7FFFFFFFFFFFFFF7) {
      sub_1C4949B7C();
    }
    size_t v9 = v8;
    if (v8 >= 0x17)
    {
      uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v11 = v8 | 7;
      }
      uint64_t v12 = v11 + 1;
      uint64_t v10 = operator new(v11 + 1);
      __dst[1] = v9;
      unint64_t v14 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v14) = v8;
      uint64_t v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((unsigned char *)v10 + v9) = 0;
        operator new();
      }
    }
    memcpy(v10, __s, v9);
    goto LABEL_10;
  }
  return result;
}

void sub_1C4AB22B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1C4AB2478(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), a2, (uint64_t)a2, a3, a5, a6);
}

void sub_1C4AB2560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CHStrokeClassificationModel;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C4AB2938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1C4AB2B4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AB2B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AB2B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AB2B94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AB2BA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AB2BB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AB2BC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4AB2CE8(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  size_t v9 = objc_msgSend_objectAtIndexedSubscript_(a2, v5, 1, v6, v7, v8);
  unint64_t v14 = objc_msgSend_objectAtIndexedSubscript_(v4, v10, 1, v11, v12, v13);
  int v20 = objc_msgSend_intValue(v9, v15, v16, v17, v18, v19);
  if (v20 >= (int)objc_msgSend_intValue(v14, v21, v22, v23, v24, v25))
  {
    int v32 = objc_msgSend_intValue(v14, v26, v27, v28, v29, v30);
    uint64_t v31 = v32 < (int)objc_msgSend_intValue(v9, v33, v34, v35, v36, v37);
  }
  else
  {
    uint64_t v31 = -1;
  }

  return v31;
}

void sub_1C4AB2D90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AB2DA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AB2DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AB2F7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C496B66C((void **)va);

  _Unwind_Resume(a1);
}

void sub_1C4AB3F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&STACK[0x210], 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4AB4148(uint64_t a1)
{
  ++*(void *)(*(void *)(a1 + 32) + 40);
  uint64_t result = sub_1C4AB419C(*(uint64_t **)(a1 + 32), *(void **)(a1 + 40), *(char ***)(a1 + 56));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1C4AB419C(uint64_t *a1, void *a2, char **a3)
{
  uint64_t v593 = *MEMORY[0x1E4F143B8];
  id v570 = a2;
  if (!a1)
  {
    uint64_t v502 = 0;
    goto LABEL_142;
  }
  uint64_t v566 = a3;
  objc_msgSend_interpointDistance(a1, v5, v6, v7, v8, v9);
  uint64_t v11 = v10;
  id v12 = v570;
  uint64_t v571 = v12;
  if (objc_msgSend_pointCount(v12, v13, v14, v15, v16, v17))
  {
    objc_msgSend_bounds(v12, v18, v19, v20, v21, v22);
    double v24 = v23;
    double v26 = v25;
  }
  else
  {
    double v24 = *MEMORY[0x1E4F1DAD8];
    double v26 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
  }
  objc_msgSend_bounds(v12, v18, v19, v20, v21, v22);
  double v37 = 1.0;
  if (v38 > (double)objc_msgSend_maxInputWidth(a1, v27, v28, v29, v30, v31))
  {
    uint64_t v39 = objc_msgSend_maxInputWidth(a1, v32, v33, v34, v35, v36);
    objc_msgSend_bounds(v12, v40, v41, v42, v43, v44);
    double v46 = v45;
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    double v37 = (double)v39 / v46;
    double v47 = (id)qword_1EA3C9FA8;
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend_bounds(v12, v48, v49, v50, v51, v52);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v53;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v37;
      _os_log_impl(&dword_1C492D000, v47, OS_LOG_TYPE_DEBUG, "Input too wide (%f): adjust with scale factor %f", (uint8_t *)&buf, 0x16u);
    }
  }
  objc_msgSend_averageCharacterHeightEstimation_minChunkHeight_(v12, v32, v33, v34, v35, v36, 5.0, 10.0);
  double v55 = v54;
  if (v54 > (double)objc_msgSend_maxStrokeHeight(a1, v56, v57, v58, v59, v60)
    && (unint64_t)objc_msgSend_strokeCount(v12, v61, v62, v63, v64, v65) <= 0xA)
  {
    double v66 = (double)objc_msgSend_maxStrokeHeight(a1, v61, v62, v63, v64, v65) / v55;
    if (qword_1EA3CA000 != -1)
    {
      double v581 = v66;
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      double v66 = v581;
    }
    double v37 = fmin(v37, v66);
    double v67 = (id)qword_1EA3C9FA8;
    if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v73 = objc_msgSend_strokeCount(v12, v68, v69, v70, v71, v72);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134218496;
      *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v55;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v73;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
      __p = *(void **)&v37;
      _os_log_impl(&dword_1C492D000, v67, OS_LOG_TYPE_DEBUG, "Stroke too big (%f) for sparse drawing (%lu strokes): adjust with scale factor %f", (uint8_t *)&buf, 0x20u);
    }
  }
  objc_msgSend_drawingTransformedWithTranslation_scaleFactor_(v12, v61, v62, v63, v64, v65, -v24, -v26, v37);
  double v74 = (CoreHandwriting *)objc_claimAutoreleasedReturnValue();
  v584[0] = &unk_1F2011E50;
  v584[1] = v11;
  int v585 = 1;
  int v586 = objc_msgSend_maxPointsPerStroke(a1, v75, v76, v77, v78, v79);
  CoreHandwriting::drawingToInk(v74, MEMORY[0x1E4F1DAD8], (uint64_t *)v591);
  sub_1C4A378E0((uint64_t)v584, (uint64_t)v591, 0, (uint64_t)&buf);
  if (*(void *)&v591[24]) {
    operator delete(*(void **)&v591[24]);
  }
  uint64_t v81 = *(void *)v591;
  if (*(void *)v591)
  {
    uint64_t v82 = *(void *)&v591[8];
    float v83 = *(void **)v591;
    if (*(void *)&v591[8] != *(void *)v591)
    {
      uint64_t v84 = *(void *)&v591[8];
      do
      {
        uint64_t v86 = *(void **)(v84 - 24);
        v84 -= 24;
        uint64_t v85 = v86;
        if (v86)
        {
          *(void *)(v82 - 16) = v85;
          operator delete(v85);
        }
        uint64_t v82 = v84;
      }
      while (v84 != v81);
      float v83 = *(void **)v591;
    }
    *(void *)&v591[8] = v81;
    operator delete(v83);
  }
  double v87 = CoreHandwriting::inkToDrawing((uint64_t **)&buf, v80);
  if (__p) {
    operator delete(__p);
  }
  std::string::size_type v88 = buf.__r_.__value_.__r.__words[0];
  if (buf.__r_.__value_.__r.__words[0])
  {
    std::string::size_type size = buf.__r_.__value_.__l.__size_;
    double v90 = (void *)buf.__r_.__value_.__r.__words[0];
    if (buf.__r_.__value_.__l.__size_ != buf.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v91 = buf.__r_.__value_.__l.__size_;
      do
      {
        float v93 = *(void **)(v91 - 24);
        v91 -= 24;
        float v92 = v93;
        if (v93)
        {
          *(void *)(size - 16) = v92;
          operator delete(v92);
        }
        std::string::size_type size = v91;
      }
      while (v91 != v88);
      double v90 = (void *)buf.__r_.__value_.__r.__words[0];
    }
    buf.__r_.__value_.__l.__size_ = v88;
    operator delete(v90);
  }

  id v99 = v87;
  for (unint64_t i = 0; ; ++i)
  {
    uint64_t v101 = objc_msgSend_modelConfigurationsNumStrokes(a1, v94, v95, v96, v97, v98);
    if (i >= objc_msgSend_count(v101, v102, v103, v104, v105, v106)) {
      break;
    }
    unint64_t v112 = objc_msgSend_strokeCount(v99, v107, v108, v109, v110, v111);
    int v118 = objc_msgSend_modelConfigurationsNumStrokes(a1, v113, v114, v115, v116, v117);
    double v123 = objc_msgSend_objectAtIndexedSubscript_(v118, v119, i, v120, v121, v122);
    LODWORD(v112) = v112 > (int)objc_msgSend_intValue(v123, v124, v125, v126, v127, v128);

    if (!v112) {
      goto LABEL_43;
    }
  }

LABEL_43:
  uint64_t v129 = objc_msgSend_modelConfigurationsNumStrokes(a1, v94, v95, v96, v97, v98);
  BOOL v135 = i < objc_msgSend_count(v129, v130, v131, v132, v133, v134);

  if (!v135)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    long long v141 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v141, OS_LOG_TYPE_FAULT))
    {
      uint64_t v147 = objc_msgSend_strokeCount(v99, v142, v143, v144, v145, v146);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v147;
      _os_log_impl(&dword_1C492D000, v141, OS_LOG_TYPE_FAULT, "Unexpected number of strokes %lu to select the model configuration", (uint8_t *)&buf, 0xCu);
    }
  }
  uint64_t v153 = objc_msgSend_minPointsPerStroke(a1, v136, v137, v138, v139, v140);
  for (unint64_t j = 0; j < objc_msgSend_strokeCount(v99, v148, v149, v150, v151, v152); ++j)
    uint64_t v153 = (uint64_t)fmax((double)v153, (double)(unint64_t)objc_msgSend_pointCountForStrokeIndex_(v99, v155, j, v157, v158, v159));
  for (unint64_t k = 0; ; ++k)
  {
    long long v161 = objc_msgSend_modelConfigurationsNumPoints(a1, v155, v156, v157, v158, v159);
    if (k >= objc_msgSend_count(v161, v162, v163, v164, v165, v166)) {
      break;
    }
    long long v172 = objc_msgSend_modelConfigurationsNumPoints(a1, v167, v168, v169, v170, v171);
    uint64_t v177 = objc_msgSend_objectAtIndexedSubscript_(v172, v173, k, v174, v175, v176);
    BOOL v183 = v153 > (int)objc_msgSend_intValue(v177, v178, v179, v180, v181, v182);

    if (!v183) {
      goto LABEL_57;
    }
  }

LABEL_57:
  long long v184 = objc_msgSend_modelConfigurationsNumPoints(a1, v155, v156, v157, v158, v159);
  BOOL v190 = k < objc_msgSend_count(v184, v185, v186, v187, v188, v189);

  if (!v190)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    unint64_t v196 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v196, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v153;
      _os_log_impl(&dword_1C492D000, v196, OS_LOG_TYPE_FAULT, "Unexpected max number of points per stroke %lu to select the model configuration", (uint8_t *)&buf, 0xCu);
    }
  }
  uint64_t v197 = objc_msgSend_modelConfigurationsNumStrokes(a1, v191, v192, v193, v194, v195);
  unint64_t v202 = objc_msgSend_objectAtIndexedSubscript_(v197, v198, i, v199, v200, v201);
  uint64_t v574 = objc_msgSend_unsignedIntValue(v202, v203, v204, v205, v206, v207);

  uint64_t v213 = objc_msgSend_modelConfigurationsNumPoints(a1, v208, v209, v210, v211, v212);
  uint64_t v218 = objc_msgSend_objectAtIndexedSubscript_(v213, v214, k, v215, v216, v217);
  uint64_t v224 = objc_msgSend_unsignedIntValue(v218, v219, v220, v221, v222, v223);

  objc_msgSend_stringWithFormat_(NSString, v225, @"s%d_p%d", v226, v227, v228, v574, v224);
  id v565 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v229 = v574;
  id v583 = 0;
  uint64_t v572 = v224;
  uint64_t v231 = objc_msgSend__extractFeaturesFromDrawing_numStrokes_numPoints_error_(a1, v230, (uint64_t)v99, v574, v224, (uint64_t)&v583);
  id v579 = v583;
  id v567 = (id)v231;
  if (!v231)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v232 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v232, OS_LOG_TYPE_FAULT))
    {
      int v238 = objc_msgSend_modelName(a1, v233, v234, v235, v236, v237);
      unint64_t v244 = objc_msgSend_localizedDescription(v579, v239, v240, v241, v242, v243);
      LODWORD(buf.__r_.__value_.__l.__data_) = 138412546;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v238;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v244;
      _os_log_impl(&dword_1C492D000, v232, OS_LOG_TYPE_FAULT, "An error occurred in the %@ model when extracting features: %@", (uint8_t *)&buf, 0x16u);
    }
  }
  id v245 = v99;
  id v246 = objc_alloc(MEMORY[0x1E4F1E9A8]);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F203EEB0;
  unint64_t v251 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v247, v574, v248, v249, v250);
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)v251;
  unint64_t v256 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v252, v572, v253, v254, v255);
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v256;
  uint64_t v260 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v257, (uint64_t)&buf, 3, v258, v259);
  v584[0] = 0;
  id v578 = (id)objc_msgSend_initWithShape_dataType_error_(v246, v261, (uint64_t)v260, 65568, (uint64_t)v584, v262);
  id v576 = v584[0];

  if (v578)
  {
    objc_msgSend_fillWithNumber_(v578, v263, (uint64_t)&unk_1F203F480, v264, v265, v266);
    id v267 = v578;
    uint64_t v278 = objc_msgSend_dataPointer(v267, v268, v269, v270, v271, v272);
    for (unint64_t m = 0; m < objc_msgSend_strokeCount(v245, v273, v274, v275, v276, v277); ++m)
    {
      for (unint64_t n = 0; n < objc_msgSend_pointCountForStrokeIndex_(v245, v273, m, v275, v276, v277); ++n)
        *(_DWORD *)(v278 + 4 * n) = 1065353216;
      v278 += 4 * v572;
    }
    id v281 = v267;
    id v282 = v579;
  }
  else
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    unint64_t v283 = (id)qword_1EA3C9FA8;
    if (os_log_type_enabled(v283, OS_LOG_TYPE_ERROR))
    {
      uint64_t v289 = objc_msgSend_modelName(a1, v284, v285, v286, v287, v288);
      uint64_t v295 = objc_msgSend_localizedDescription(v576, v290, v291, v292, v293, v294);
      *(_DWORD *)v591 = 138412546;
      *(void *)&v591[4] = v289;
      *(_WORD *)&v591[12] = 2112;
      *(void *)&v591[14] = v295;
      _os_log_impl(&dword_1C492D000, v283, OS_LOG_TYPE_ERROR, "An error occurred when trying to allocate the input mask array for the %@ model: %@", v591, 0x16u);
    }
    id v282 = v576;
  }

  id v568 = v282;
  if (!v578)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v296 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v296, OS_LOG_TYPE_FAULT))
    {
      uint64_t v302 = objc_msgSend_modelName(a1, v297, v298, v299, v300, v301);
      uint64_t v308 = objc_msgSend_localizedDescription(v568, v303, v304, v305, v306, v307);
      LODWORD(buf.__r_.__value_.__l.__data_) = 138412546;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v302;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v308;
      _os_log_impl(&dword_1C492D000, v296, OS_LOG_TYPE_FAULT, "An error occurred in the %@ model when creating the input mask array: %@", (uint8_t *)&buf, 0x16u);
    }
  }
  id v309 = objc_alloc(MEMORY[0x1E4F1E9A8]);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F203EEB0;
  uint64_t v314 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v310, v574, v311, v312, v313);
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)v314;
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F203EEB0;
  unint64_t v315 = NSNumber;
  uint64_t v321 = objc_msgSend_modelDecoderSize(a1, v316, v317, v318, v319, v320);
  uint64_t v326 = objc_msgSend_numberWithInteger_(v315, v322, v321, v323, v324, v325);
  __p = v326;
  uint64_t v330 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v327, (uint64_t)&buf, 4, v328, v329);
  v584[0] = 0;
  id v577 = (id)objc_msgSend_initWithShape_dataType_error_(v309, v331, (uint64_t)v330, 65568, (uint64_t)v584, v332);
  id v333 = v584[0];

  if (v577)
  {
    id v334 = v577;
    uint64_t v340 = objc_msgSend_dataPointer(v334, v335, v336, v337, v338, v339);
    uint64_t v346 = objc_msgSend_modelDecoderSize(a1, v341, v342, v343, v344, v345);
    if (v574)
    {
      uint64_t v352 = 0;
      float v353 = -9.21034037 / (double)v346;
      do
      {
        for (iunint64_t i = 0; ii < objc_msgSend_modelDecoderSize(a1, v347, v348, v349, v350, v351); ii += 2)
        {
          uint64_t v355 = objc_msgSend_modelDecoderSize(a1, v347, v348, v349, v350, v351);
          float v356 = expf(v353 * (float)ii) * (float)v352;
          *(float *)(v340 + 4 * (ii + v352 * v355)) = sinf(v356);
          uint64_t v362 = objc_msgSend_modelDecoderSize(a1, v357, v358, v359, v360, v361);
          *(float *)(v340 + 4 * (ii + v352 * v362) + 4) = cosf(v356);
        }
        ++v352;
      }
      while (v352 != v574);
    }
    id v363 = v334;
    id v364 = v568;
  }
  else
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v365 = (id)qword_1EA3C9FA8;
    if (os_log_type_enabled(v365, OS_LOG_TYPE_ERROR))
    {
      long long v371 = objc_msgSend_modelName(a1, v366, v367, v368, v369, v370);
      uint64_t v377 = objc_msgSend_localizedDescription(v333, v372, v373, v374, v375, v376);
      *(_DWORD *)v591 = 138412546;
      *(void *)&v591[4] = v371;
      *(_WORD *)&v591[12] = 2112;
      *(void *)&v591[14] = v377;
      _os_log_impl(&dword_1C492D000, v365, OS_LOG_TYPE_ERROR, "An error occurred when trying to allocate the input positional encodings for the %@ model: %@", v591, 0x16u);
    }
    id v364 = v333;
  }

  id v580 = v364;
  if (!v577)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v378 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v378, OS_LOG_TYPE_FAULT))
    {
      uint64_t v384 = objc_msgSend_modelName(a1, v379, v380, v381, v382, v383);
      v390 = objc_msgSend_localizedDescription(v580, v385, v386, v387, v388, v389);
      LODWORD(buf.__r_.__value_.__l.__data_) = 138412546;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v384;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v390;
      _os_log_impl(&dword_1C492D000, v378, OS_LOG_TYPE_FAULT, "An error occurred in the %@ model when creating the positional encodings array: %@", (uint8_t *)&buf, 0x16u);
    }
  }
  uint64_t v391 = a1[3];
  id v575 = v565;
  uint64_t v397 = (const char *)objc_msgSend_UTF8String(v575, v392, v393, v394, v395, v396);
  size_t v398 = strlen(v397);
  if (v398 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1C4949B7C();
  }
  std::string::size_type v399 = v398;
  if (v398 >= 0x17)
  {
    uint64_t v401 = (v398 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v398 | 7) != 0x17) {
      uint64_t v401 = v398 | 7;
    }
    uint64_t v402 = v401 + 1;
    p_std::string buf = (std::string *)operator new(v401 + 1);
    buf.__r_.__value_.__l.__size_ = v399;
    buf.__r_.__value_.__r.__words[2] = v402 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    goto LABEL_114;
  }
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = v398;
  p_std::string buf = &buf;
  if (v398) {
LABEL_114:
  }
    memmove(p_buf, v397, v399);
  p_buf->__r_.__value_.__s.__data_[v399] = 0;
  BOOL v403 = sub_1C4B3B9C4(v391, &buf);
  uint64_t v404 = v575;
  BOOL v405 = v403;
  if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v403) {
      goto LABEL_117;
    }
LABEL_136:
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    v489 = (id)qword_1EA3C9FA8;
    if (os_log_type_enabled(v489, OS_LOG_TYPE_ERROR))
    {
      v501 = objc_msgSend_modelName(a1, v496, v497, v498, v499, v500);
      LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v501;
      _os_log_impl(&dword_1C492D000, v489, OS_LOG_TYPE_ERROR, "An error occurred selecting the espresso configuration of the %@ model", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_140;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
  if (!v405) {
    goto LABEL_136;
  }
LABEL_117:
  uint64_t v406 = a1[3];
  id v407 = v567;
  uint64_t v413 = objc_msgSend_dataPointer(v407, v408, v409, v410, v411, v412);
  uint64_t v419 = objc_msgSend_numInputFeatures(a1, v414, v415, v416, v417, v418);
  uint64_t v420 = operator new(0x20uLL);
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v420 + 4);
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v420 + 4);
  *uint64_t v420 = 1;
  v420[1] = v229;
  v420[2] = v572;
  v420[3] = v419;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v420;
  BOOL v421 = sub_1C4B3B6D8(v406, v413);
  if (buf.__r_.__value_.__r.__words[0])
  {
    buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (!v421) {
    goto LABEL_130;
  }
  uint64_t v422 = a1[3];
  id v423 = v578;
  uint64_t v429 = objc_msgSend_dataPointer(v423, v424, v425, v426, v427, v428);
  uint64_t v430 = operator new(0x20uLL);
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v430 + 4);
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v430 + 4);
  *uint64_t v430 = 1;
  v430[1] = v229;
  v430[2] = v572;
  v430[3] = 1;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v430;
  BOOL v431 = sub_1C4B3B6D8(v422, v429);
  if (buf.__r_.__value_.__r.__words[0])
  {
    buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (!v431) {
    goto LABEL_130;
  }
  uint64_t v432 = a1[3];
  id v433 = v577;
  uint64_t v439 = objc_msgSend_dataPointer(v433, v434, v435, v436, v437, v438);
  uint64_t v445 = objc_msgSend_modelDecoderSize(a1, v440, v441, v442, v443, v444);
  uint64_t v446 = operator new(0x20uLL);
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v446 + 4);
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v446 + 4);
  *uint64_t v446 = 1;
  v446[1] = v229;
  v446[2] = 1;
  v446[3] = v445;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v446;
  BOOL v447 = sub_1C4B3B6D8(v432, v439);
  if (buf.__r_.__value_.__r.__words[0])
  {
    buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (!v447)
  {
LABEL_130:
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    v489 = (id)qword_1EA3C9FA8;
    if (os_log_type_enabled(v489, OS_LOG_TYPE_ERROR))
    {
      uint64_t v495 = objc_msgSend_modelName(a1, v490, v491, v492, v493, v494);
      LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v495;
      _os_log_impl(&dword_1C492D000, v489, OS_LOG_TYPE_ERROR, "An error occurred setting the input to the %@ model", (uint8_t *)&buf, 0xCu);
    }
LABEL_140:

    uint64_t v502 = 0;
    goto LABEL_141;
  }
  if (!CoreHandwriting::EspressoModelWrapper::bindOutput(a1[3], (uint64_t)&buf, (uint64_t)"output_predictions", 1))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    log = (id)qword_1EA3C9FA8;
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      uint64_t v511 = objc_msgSend_modelName(a1, v506, v507, v508, v509, v510);
      *(_DWORD *)v591 = 138412290;
      *(void *)&v591[4] = v511;
      _os_log_impl(&dword_1C492D000, log, OS_LOG_TYPE_ERROR, "An error occurred binding the output of the %@ model", v591, 0xCu);
    }
    goto LABEL_153;
  }
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], v448, v449, v450, v451, v452);
  double v454 = v453;
  BOOL v455 = CoreHandwriting::EspressoModelWrapper::execute((CoreHandwriting::EspressoModelWrapper *)a1[3]);
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], v456, v457, v458, v459, v460);
  double v462 = v461;
  uint64_t v587 = @"inputStrokeCount";
  uint64_t v463 = NSNumber;
  uint64_t v469 = objc_msgSend_strokeCount(v571, v464, v465, v466, v467, v468);
  uint64_t v474 = objc_msgSend_numberWithUnsignedInteger_(v463, v470, v469, v471, v472, v473);
  uint64_t v588 = v474;
  log = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v475, (uint64_t)&v588, (uint64_t)&v587, 1, v476);

  objc_msgSend_logModelInference_startTimestamp_endTimestamp_data_((void *)qword_1EA3C8F50, v477, 0, (uint64_t)log, v478, v479, v454, v462);
  if (!v455)
  {
    v512 = CHOSLogForCategory(3);
    if (os_log_type_enabled(v512, OS_LOG_TYPE_ERROR))
    {
      v518 = objc_msgSend_modelName(a1, v513, v514, v515, v516, v517);
      *(_DWORD *)v591 = 138412290;
      *(void *)&v591[4] = v518;
      _os_log_impl(&dword_1C492D000, v512, OS_LOG_TYPE_ERROR, "An error occurred executing the %@ model", v591, 0xCu);
    }
LABEL_153:
    uint64_t v502 = 0;
    goto LABEL_192;
  }
  std::string::size_type v485 = buf.__r_.__value_.__r.__words[0];
  uint64_t v487 = *v566;
  uint64_t v486 = v566[1];
  if (v486 != *v566)
  {
    uint64_t v488 = v566[1];
    do
    {
      uint64_t v505 = (void *)*((void *)v488 - 3);
      v488 -= 24;
      uint64_t v504 = v505;
      if (v505)
      {
        *((void *)v486 - 2) = v504;
        operator delete(v504);
      }
      uint64_t v486 = v488;
    }
    while (v488 != v487);
  }
  unint64_t v519 = 0;
  v566[1] = v487;
  std::string::size_type v564 = v485;
  while (v519 < objc_msgSend_strokeCount(v571, v480, v481, v482, v483, v484))
  {
    unint64_t v530 = v519 + 1;
    uint64_t v531 = (const void *)(v485 + 4 * objc_msgSend_numOutputClasses(a1, v520, v521, v522, v523, v524) * v519);
    std::string::size_type v532 = v485 + 4 * objc_msgSend_numOutputClasses(a1, v525, v526, v527, v528, v529) * (v519 + 1);
    int64_t v533 = v532 - (void)v531;
    unint64_t v573 = v530;
    if ((uint64_t)(v532 - (void)v531) < 1)
    {
      uint64_t v535 = 0;
      uint64_t v534 = 0;
      uint64_t v536 = v566;
      uint64_t v538 = v566[1];
      unint64_t v537 = (unint64_t)v566[2];
      if ((unint64_t)v538 < v537) {
        goto LABEL_159;
      }
LABEL_165:
      uint64_t v543 = *v536;
      unint64_t v544 = 0xAAAAAAAAAAAAAAABLL * ((v538 - *v536) >> 3);
      unint64_t v545 = v544 + 1;
      if (v544 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1C494A220();
      }
      unint64_t v546 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v537 - (void)v543) >> 3);
      if (2 * v546 > v545) {
        unint64_t v545 = 2 * v546;
      }
      if (v546 >= 0x555555555555555) {
        unint64_t v547 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v547 = v545;
      }
      v592 = v566 + 2;
      if (v547)
      {
        if (v547 > 0xAAAAAAAAAAAAAAALL) {
          sub_1C4949AA8();
        }
        uint64_t v548 = (char *)operator new(24 * v547);
      }
      else
      {
        uint64_t v548 = 0;
      }
      uint64_t v549 = &v548[24 * v544];
      *(void *)v591 = v548;
      *(void *)&v591[8] = v549;
      *(void *)&v591[16] = v549;
      *(void *)&v591[24] = &v548[24 * v547];
      v569 = *(char **)&v591[24];
      *((void *)v549 + 1) = 0;
      *(void *)uint64_t v549 = 0;
      *((void *)v549 + 2) = 0;
      int64_t v550 = v535 - v534;
      if (v535 != v534)
      {
        if (v550 < 0) {
          sub_1C494A220();
        }
        uint64_t v551 = operator new(v535 - v534);
        *(void *)uint64_t v549 = v551;
        unint64_t v552 = (unint64_t)v551 + 4 * (v550 >> 2);
        memcpy(v551, v534, v550);
        *(int64x2_t *)(v549 + 8) = vdupq_n_s64(v552);
      }
      uint64_t v553 = v549 + 24;
      *(void *)&v591[16] = v549 + 24;
      if (v538 == v543)
      {
        *uint64_t v566 = v549;
        v566[1] = v553;
        v566[2] = v569;
        uint64_t v404 = v575;
        std::string::size_type v485 = v564;
      }
      else
      {
        std::string::size_type v485 = v564;
        do
        {
          uint64_t v554 = v549;
          *((void *)v549 - 2) = 0;
          *((void *)v549 - 1) = 0;
          long long v555 = *(_OWORD *)(v538 - 24);
          v538 -= 24;
          *(_OWORD *)(v549 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v555;
          v549 -= 24;
          *((void *)v554 - 1) = *((void *)v538 + 2);
          *(void *)uint64_t v538 = 0;
          *((void *)v538 + 1) = 0;
          *((void *)v538 + 2) = 0;
        }
        while (v538 != v543);
        uint64_t v538 = *v566;
        uint64_t v556 = v566[1];
        *uint64_t v566 = v549;
        v557 = *(char **)&v591[16];
        *(_OWORD *)(v566 + 1) = *(_OWORD *)&v591[16];
        uint64_t v553 = v557;
        uint64_t v404 = v575;
        if (v556 != v538)
        {
          v558 = v556;
          do
          {
            uint64_t v560 = (void *)*((void *)v558 - 3);
            v558 -= 24;
            v559 = v560;
            if (v560)
            {
              *((void *)v556 - 2) = v559;
              operator delete(v559);
            }
            uint64_t v556 = v558;
          }
          while (v558 != v538);
        }
      }
      if (v538) {
        operator delete(v538);
      }
      v566[1] = v553;
      unint64_t v542 = v573;
      unint64_t v519 = v573;
      if (v534)
      {
LABEL_155:
        operator delete(v534);
        unint64_t v519 = v542;
      }
    }
    else
    {
      uint64_t v534 = (char *)operator new(v532 - (void)v531);
      uint64_t v535 = &v534[4 * (v533 >> 2)];
      memcpy(v534, v531, v533);
      uint64_t v536 = v566;
      uint64_t v538 = v566[1];
      unint64_t v537 = (unint64_t)v566[2];
      if ((unint64_t)v538 >= v537) {
        goto LABEL_165;
      }
LABEL_159:
      *(void *)uint64_t v538 = 0;
      *((void *)v538 + 1) = 0;
      *((void *)v538 + 2) = 0;
      uint64_t v539 = v535 - v534;
      if (v535 != v534)
      {
        if (v539 < 0) {
          sub_1C494A220();
        }
        uint64_t v540 = (char *)operator new(v535 - v534);
        *(void *)uint64_t v538 = v540;
        *((void *)v538 + 1) = v540;
        uint64_t v541 = &v540[4 * (v539 >> 2)];
        *((void *)v538 + 2) = v541;
        memcpy(v540, v534, v535 - v534);
        *((void *)v538 + 1) = v541;
      }
      v566[1] = v538 + 24;
      v566[1] = v538 + 24;
      unint64_t v542 = v573;
      unint64_t v519 = v573;
      if (v534) {
        goto LABEL_155;
      }
    }
  }
  uint64_t v561 = a1[5];
  dispatch_time_t v562 = dispatch_time(0, 2000000000);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4AB5E10;
  block[3] = &unk_1E64E1258;
  void block[4] = a1;
  block[5] = v561;
  dispatch_after(v562, (dispatch_queue_t)qword_1EA3C8F40, block);
  uint64_t v502 = 1;
LABEL_192:

LABEL_141:
LABEL_142:

  return v502;
}

void sub_1C4AB584C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4AB5C10(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v9 = objc_msgSend_objectAtIndexedSubscript_(a2, v5, 0, v6, v7, v8);
  uint64_t v14 = objc_msgSend_objectAtIndexedSubscript_(v4, v10, 0, v11, v12, v13);
  objc_msgSend_bounds(v9, v15, v16, v17, v18, v19);
  double MidY = CGRectGetMidY(v29);
  objc_msgSend_bounds(v14, v21, v22, v23, v24, v25);
  double v26 = CGRectGetMidY(v30);
  if (MidY < v26) {
    uint64_t v27 = -1;
  }
  else {
    uint64_t v27 = v26 < MidY;
  }

  return v27;
}

void sub_1C4AB5CAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AB5CC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AB5CD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AB5CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 sub_1C4AB5D00(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1C4AB5D24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    id v4 = *(void **)(a1 + 48);
    if (v3 != v1)
    {
      uint64_t v5 = v3;
      do
      {
        uint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v1);
      id v4 = *(void **)(a1 + 48);
    }
    *(void *)(a1 + 56) = v1;
    operator delete(v4);
  }
}

uint64_t sub_1C4AB5DB4(uint64_t a1)
{
  ++*(void *)(*(void *)(a1 + 32) + 40);
  uint64_t result = sub_1C4AB419C(*(uint64_t **)(a1 + 32), *(void **)(a1 + 40), (char **)(*(void *)(*(void *)(a1 + 56) + 8) + 48));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
  return result;
}

void sub_1C4AB5E10(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void **)(a1 + 32);
  if (*(void *)(a1 + 40) != v6[5]) {
    return;
  }
  uint64_t v7 = v6[3];
  objc_msgSend_modelSmallestConfig(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  id v8 = objc_claimAutoreleasedReturnValue();
  uint64_t v14 = (const char *)objc_msgSend_UTF8String(v8, v9, v10, v11, v12, v13);
  size_t v15 = strlen(v14);
  if (v15 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1C4949B7C();
  }
  std::string::size_type v16 = v15;
  if (v15 >= 0x17)
  {
    uint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v18 = v15 | 7;
    }
    uint64_t v19 = v18 + 1;
    p_p = (std::string *)operator new(v18 + 1);
    __p.__r_.__value_.__l.__size_ = v16;
    __p.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
  }
  else
  {
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v15;
    p_p = &__p;
    if (!v15) {
      goto LABEL_10;
    }
  }
  memmove(p_p, v14, v16);
LABEL_10:
  p_p->__r_.__value_.__s.__data_[v16] = 0;
  BOOL v20 = sub_1C4B3B9C4(v7, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  if (!v20)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v21 = (id)qword_1EA3C9FA8;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = objc_msgSend_modelName(v6, v22, v23, v24, v25, v26);
      LODWORD(__p.__r_.__value_.__l.__data_) = 138412290;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
      _os_log_impl(&dword_1C492D000, v21, OS_LOG_TYPE_ERROR, "An error occurred selecting the smallest espresso configuration of the %@ model", (uint8_t *)&__p, 0xCu);
    }
  }
}

void sub_1C4AB5FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4AB615C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4AB616C(uint64_t a1)
{
}

void sub_1C4AB6174(uint64_t a1)
{
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  if (sub_1C4AB419C(*(uint64_t **)(a1 + 32), *(void **)(a1 + 40), (char **)&v35))
  {
    uint64_t v2 = objc_opt_class();
    std::string __p = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v3 = (char *)v35;
    id v4 = v36;
    int64_t v5 = v36 - (unsigned char *)v35;
    if (v36 != v35)
    {
      unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
      if (v6 >= 0xAAAAAAAAAAAAAABLL) {
        sub_1C494A220();
      }
      uint64_t v31 = v2;
      uint64_t v7 = (char *)operator new(v5);
      uint64_t v8 = 0;
      std::string __p = v7;
      uint64_t v33 = v7;
      uint64_t v34 = &v7[24 * v6];
      uint64_t v43 = v7;
      uint64_t v42 = v7;
      double v38 = &v34;
      uint64_t v39 = &v42;
      unint64_t v40 = &v43;
      char v41 = 0;
      do
      {
        uint64_t v9 = &v7[v8];
        uint64_t v10 = &v3[v8];
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        *((void *)v9 + 2) = 0;
        uint64_t v12 = *(unsigned char **)&v3[v8];
        uint64_t v11 = *(unsigned char **)&v3[v8 + 8];
        int64_t v13 = v11 - v12;
        if (v11 != v12)
        {
          if (v13 < 0) {
            sub_1C494A220();
          }
          uint64_t v14 = (char *)operator new(v11 - v12);
          *(void *)uint64_t v9 = v14;
          *((void *)v9 + 1) = v14;
          size_t v15 = &v14[4 * (v13 >> 2)];
          *((void *)v9 + 2) = v15;
          memcpy(v14, v12, v13);
          *((void *)v9 + 1) = v15;
        }
        uint64_t v43 = v9 + 24;
        v8 += 24;
      }
      while (v10 + 24 != v4);
      uint64_t v33 = &v7[v8];
      uint64_t v2 = v31;
    }
    uint64_t v16 = objc_msgSend_localesFromModelPrediction_maxNumberOfLocales_numberOfOutputClass_scriptCodeMap_(v2, (const char *)v2, (uint64_t)&__p, *(void *)(a1 + 56), *(void *)(*(void *)(a1 + 32) + 184), *(void *)(*(void *)(a1 + 32) + 224));
    uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v16;

    uint64_t v19 = (char *)__p;
    if (__p)
    {
      BOOL v20 = v33;
      uint64_t v21 = __p;
      if (v33 != __p)
      {
        uint64_t v22 = v33;
        do
        {
          uint64_t v24 = (void *)*((void *)v22 - 3);
          v22 -= 24;
          uint64_t v23 = v24;
          if (v24)
          {
            *((void *)v20 - 2) = v23;
            operator delete(v23);
          }
          BOOL v20 = v22;
        }
        while (v22 != v19);
        uint64_t v21 = __p;
      }
      uint64_t v33 = v19;
      operator delete(v21);
    }
  }
  uint64_t v25 = (char *)v35;
  if (v35)
  {
    uint64_t v26 = v36;
    uint64_t v27 = v35;
    if (v36 != v35)
    {
      uint64_t v28 = v36;
      do
      {
        CGRect v30 = (void *)*((void *)v28 - 3);
        v28 -= 24;
        uint64_t v29 = v30;
        if (v30)
        {
          *((void *)v26 - 2) = v29;
          operator delete(v29);
        }
        uint64_t v26 = v28;
      }
      while (v28 != v25);
      uint64_t v27 = v35;
    }
    uint64_t v36 = v25;
    operator delete(v27);
  }
}

void sub_1C4AB63CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  id v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_1C496B66C((void **)va);
  sub_1C496B66C((void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C4AB63E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, char *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
  {
    uint64_t v18 = a12;
    uint64_t v19 = __p;
    if (a12 != __p)
    {
      BOOL v20 = a12;
      do
      {
        uint64_t v22 = (void *)*((void *)v20 - 3);
        v20 -= 24;
        uint64_t v21 = v22;
        if (v22)
        {
          *(v18 - 2) = v21;
          operator delete(v21);
        }
        uint64_t v18 = v20;
      }
      while (v20 != __p);
      uint64_t v19 = __p;
    }
    operator delete(v19);
  }
  sub_1C496B66C(&a14);
  _Unwind_Resume(a1);
}

void sub_1C4AB69C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, ...)
{
  va_start(va, a5);
  sub_1C4AB6A78((void **)va);
  if (v5) {
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

void **sub_1C4AB6A78(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    id v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        int64_t v5 = (void *)*((void *)v3 - 2);
        v3 -= 16;
      }
      while (v3 != v2);
      id v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1C4AB6D6C(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v133 = a2 - 16;
    unint64_t v9 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v9;
          uint64_t v10 = a2 - v9;
          uint64_t v11 = (uint64_t)(a2 - v9) >> 4;
          if (!(!v5 & v4))
          {
            switch(v11)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 8))
                {
                  float v61 = *(void **)a1;
                  *(void *)a1 = 0;
                  uint64_t v62 = *(void *)(a2 - 16);
                  *(void *)(a2 - 16) = 0;
                  uint64_t v63 = *(void **)a1;
                  *(void *)a1 = v62;

                  uint64_t v64 = *(void **)(a2 - 16);
                  *(void *)(a2 - 16) = v61;

                  int v65 = *(_DWORD *)(a1 + 8);
                  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 8);
                  *(_DWORD *)(a2 - 8) = v65;
                }
                break;
              case 3:
                sub_1C4AB77BC(a1, a1 + 16, v133);
                break;
              case 4:
                sub_1C4AB7B38(a1, a1 + 16, a1 + 32, v133);
                break;
              case 5:
                sub_1C4AB7658(a1, a1 + 16, a1 + 32, a1 + 48, v133);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v10 <= 383)
          {
            double v66 = (void *)(a1 + 16);
            BOOL v68 = a1 == a2 || v66 == (void *)a2;
            if (a4)
            {
              if (!v68)
              {
                uint64_t v69 = 0;
                uint64_t v70 = (void *)a1;
                do
                {
                  int v73 = *((_DWORD *)v70 + 6);
                  int v74 = *((_DWORD *)v70 + 2);
                  uint64_t v70 = v66;
                  if (v73 > v74)
                  {
                    uint64_t v75 = *v66;
                    *double v66 = 0;
                    uint64_t v76 = v69;
                    do
                    {
                      uint64_t v77 = a1 + v76;
                      uint64_t v78 = *(void *)(a1 + v76);
                      *(void *)uint64_t v77 = 0;
                      uint64_t v79 = *(void **)(a1 + v76 + 16);
                      *(void *)(v77 + 16) = v78;

                      *(_DWORD *)(v77 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(v77 + 8);
                      if (!v76)
                      {
                        uint64_t v71 = a1;
                        goto LABEL_75;
                      }
                      v76 -= 16;
                    }
                    while (v73 > *(_DWORD *)(v77 - 8));
                    uint64_t v71 = a1 + v76 + 16;
LABEL_75:
                    uint64_t v72 = *(void **)v71;
                    *(void *)uint64_t v71 = v75;

                    *(_DWORD *)(v71 + 8) = v73;
                  }
                  double v66 = v70 + 2;
                  v69 += 16;
                }
                while (v70 + 2 != (void *)a2);
              }
            }
            else if (!v68)
            {
              double v123 = (_DWORD *)(a1 + 24);
              do
              {
                int v124 = *(_DWORD *)(a1 + 24);
                int v125 = *(_DWORD *)(a1 + 8);
                a1 = (uint64_t)v66;
                if (v124 > v125)
                {
                  uint64_t v126 = *v66;
                  *double v66 = 0;
                  uint64_t v127 = v123;
                  do
                  {
                    uint64_t v128 = v127;
                    uint64_t v129 = *((void *)v127 - 3);
                    *((void *)v127 - 3) = 0;
                    long long v130 = (void *)*((void *)v127 - 1);
                    *((void *)v127 - 1) = v129;

                    int v131 = *(v127 - 4);
                    v127 -= 4;
                    _DWORD *v128 = v131;
                  }
                  while (v124 > *(v128 - 8));
                  uint64_t v132 = (void *)*((void *)v127 - 1);
                  *((void *)v127 - 1) = v126;

                  *uint64_t v127 = v124;
                }
                double v66 = (void *)(a1 + 16);
                v123 += 4;
              }
              while (a1 + 16 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (a1 != a2)
            {
              int64_t v80 = (unint64_t)(v11 - 2) >> 1;
              int64_t v81 = v80;
              do
              {
                int64_t v83 = v81;
                if (v80 >= v81)
                {
                  uint64_t v84 = (2 * v81) | 1;
                  uint64_t v85 = a1 + 16 * v84;
                  if (2 * v83 + 2 < v11)
                  {
                    int v86 = *(_DWORD *)(v85 + 8);
                    int v87 = *(_DWORD *)(v85 + 24);
                    v85 += 16 * (v86 > v87);
                    if (v86 > v87) {
                      uint64_t v84 = 2 * v83 + 2;
                    }
                  }
                  uint64_t v88 = a1 + 16 * v83;
                  int v89 = *(_DWORD *)(v88 + 8);
                  if (*(_DWORD *)(v85 + 8) <= v89)
                  {
                    BOOL v135 = *(void **)v88;
                    *(void *)uint64_t v88 = 0;
                    do
                    {
                      uint64_t v90 = v88;
                      uint64_t v88 = v85;
                      uint64_t v91 = *(void *)v85;
                      *(void *)uint64_t v88 = 0;
                      float v92 = *(void **)v90;
                      *(void *)uint64_t v90 = v91;

                      *(_DWORD *)(v90 + 8) = *(_DWORD *)(v88 + 8);
                      if (v80 < v84) {
                        break;
                      }
                      uint64_t v93 = (2 * v84) | 1;
                      uint64_t v85 = a1 + 16 * v93;
                      if (2 * v84 + 2 < v11)
                      {
                        int v94 = *(_DWORD *)(v85 + 8);
                        int v95 = *(_DWORD *)(v85 + 24);
                        v85 += 16 * (v94 > v95);
                        if (v94 > v95) {
                          uint64_t v93 = 2 * v84 + 2;
                        }
                      }
                      uint64_t v84 = v93;
                    }
                    while (*(_DWORD *)(v85 + 8) <= v89);
                    uint64_t v82 = *(void **)v88;
                    *(void *)uint64_t v88 = v135;

                    *(_DWORD *)(v88 + 8) = v89;
                  }
                }
                int64_t v81 = v83 - 1;
              }
              while (v83);
              uint64_t v96 = (unint64_t)v10 >> 4;
              do
              {
                uint64_t v99 = 0;
                uint64_t v100 = *(void **)a1;
                *(void *)a1 = 0;
                int v101 = *(_DWORD *)(a1 + 8);
                uint64_t v102 = a1;
                do
                {
                  uint64_t v105 = v102 + 16 * v99 + 16;
                  uint64_t v106 = (2 * v99) | 1;
                  uint64_t v107 = 2 * v99 + 2;
                  if (v107 < v96)
                  {
                    int v108 = *(_DWORD *)(v105 + 8);
                    int v109 = *(_DWORD *)(v105 + 24);
                    v105 += 16 * (v108 > v109);
                    if (v108 > v109) {
                      uint64_t v106 = v107;
                    }
                  }
                  uint64_t v103 = *(void **)v105;
                  *(void *)uint64_t v105 = 0;
                  uint64_t v104 = *(void **)v102;
                  *(void *)uint64_t v102 = v103;

                  *(_DWORD *)(v102 + 8) = *(_DWORD *)(v105 + 8);
                  uint64_t v102 = v105;
                  uint64_t v99 = v106;
                }
                while (v106 <= (uint64_t)((unint64_t)(v96 - 2) >> 1));
                unint64_t v110 = a2 - 16;
                if (v105 == a2 - 16)
                {
                  uint64_t v97 = *(void **)v105;
                  *(void *)uint64_t v105 = v100;

                  *(_DWORD *)(v105 + 8) = v101;
                }
                else
                {
                  uint64_t v111 = *(void *)(a2 - 16);
                  *(void *)(a2 - 16) = 0;
                  unint64_t v112 = *(void **)v105;
                  *(void *)uint64_t v105 = v111;

                  *(_DWORD *)(v105 + 8) = *(_DWORD *)(a2 - 8);
                  double v113 = *(void **)(a2 - 16);
                  *(void *)(a2 - 16) = v100;

                  *(_DWORD *)(a2 - 8) = v101;
                  uint64_t v114 = v105 - a1 + 16;
                  if (v114 >= 17)
                  {
                    unint64_t v115 = (((unint64_t)v114 >> 4) - 2) >> 1;
                    uint64_t v116 = a1 + 16 * v115;
                    int v117 = *(_DWORD *)(v105 + 8);
                    if (*(_DWORD *)(v116 + 8) > v117)
                    {
                      int v118 = *(void **)v105;
                      *(void *)uint64_t v105 = 0;
                      do
                      {
                        uint64_t v119 = v105;
                        uint64_t v105 = v116;
                        uint64_t v120 = *(void *)v116;
                        *(void *)uint64_t v105 = 0;
                        uint64_t v121 = *(void **)v119;
                        *(void *)uint64_t v119 = v120;

                        *(_DWORD *)(v119 + 8) = *(_DWORD *)(v105 + 8);
                        if (!v115) {
                          break;
                        }
                        unint64_t v115 = (v115 - 1) >> 1;
                        uint64_t v116 = a1 + 16 * v115;
                      }
                      while (*(_DWORD *)(v116 + 8) > v117);
                      uint64_t v122 = *(void **)v105;
                      *(void *)uint64_t v105 = v118;

                      *(_DWORD *)(v105 + 8) = v117;
                    }
                  }
                }
                a2 = v110;
              }
              while (v96-- > 2);
            }
            return;
          }
          unint64_t v12 = (unint64_t)v11 >> 1;
          int64_t v13 = (void **)(a1 + 16 * ((unint64_t)v11 >> 1));
          if ((unint64_t)v10 < 0x801)
          {
            sub_1C4AB77BC((uint64_t)v13, a1, v133);
            --a3;
            if (a4)
            {
LABEL_14:
              int v21 = *(_DWORD *)(a1 + 8);
              break;
            }
          }
          else
          {
            sub_1C4AB77BC(a1, (uint64_t)v13, v133);
            uint64_t v14 = 16 * v12;
            uint64_t v15 = a1 + v14;
            sub_1C4AB77BC(a1 + 16, a1 + v14 - 16, a2 - 32);
            sub_1C4AB77BC(a1 + 32, a1 + 16 + v14, a2 - 48);
            sub_1C4AB77BC(a1 + v14 - 16, (uint64_t)v13, a1 + 16 + v14);
            uint64_t v16 = *(void **)a1;
            *(void *)a1 = 0;
            uint64_t v17 = *v13;
            *int64_t v13 = 0;
            uint64_t v18 = *(void **)a1;
            *(void *)a1 = v17;

            uint64_t v19 = *v13;
            *int64_t v13 = v16;

            int v20 = *(_DWORD *)(a1 + 8);
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(v15 + 8);
            *(_DWORD *)(v15 + 8) = v20;
            --a3;
            if (a4) {
              goto LABEL_14;
            }
          }
          int v21 = *(_DWORD *)(a1 + 8);
          if (*(_DWORD *)(a1 - 8) > v21) {
            break;
          }
          uint64_t v22 = *(void **)a1;
          *(void *)a1 = 0;
          if (v21 <= *(_DWORD *)(a2 - 8))
          {
            unint64_t v46 = a1 + 16;
            do
            {
              unint64_t v9 = v46;
              if (v46 >= a2) {
                break;
              }
              int v47 = *(_DWORD *)(v46 + 8);
              v46 += 16;
            }
            while (v21 <= v47);
          }
          else
          {
            uint64_t v23 = a1;
            do
            {
              unint64_t v9 = v23 + 16;
              int v24 = *(_DWORD *)(v23 + 24);
              v23 += 16;
            }
            while (v21 <= v24);
          }
          unint64_t v48 = a2;
          if (v9 < a2)
          {
            unint64_t v49 = a2;
            do
            {
              unint64_t v48 = v49 - 16;
              int v50 = *(_DWORD *)(v49 - 8);
              v49 -= 16;
            }
            while (v21 > v50);
          }
          while (v9 < v48)
          {
            uint64_t v51 = *(void **)v9;
            *(void *)unint64_t v9 = 0;
            uint64_t v52 = *(void **)v48;
            *(void *)unint64_t v48 = 0;
            std::string::size_type v53 = *(void **)v9;
            *(void *)unint64_t v9 = v52;

            double v54 = *(void **)v48;
            *(void *)unint64_t v48 = v51;

            int v55 = *(_DWORD *)(v9 + 8);
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v48 + 8);
            *(_DWORD *)(v48 + 8) = v55;
            do
            {
              int v56 = *(_DWORD *)(v9 + 24);
              v9 += 16;
            }
            while (v21 <= v56);
            do
            {
              int v57 = *(_DWORD *)(v48 - 8);
              v48 -= 16;
            }
            while (v21 > v57);
          }
          if (v9 - 16 != a1)
          {
            uint64_t v58 = *(void *)(v9 - 16);
            *(void *)(v9 - 16) = 0;
            uint64_t v59 = *(void **)a1;
            *(void *)a1 = v58;

            *(_DWORD *)(a1 + 8) = *(_DWORD *)(v9 - 8);
          }
          uint64_t v60 = *(void **)(v9 - 16);
          *(void *)(v9 - 16) = v22;

          a4 = 0;
          *(_DWORD *)(v9 - 8) = v21;
        }
        uint64_t v25 = 0;
        uint64_t v26 = *(void **)a1;
        *(void *)a1 = 0;
        do
        {
          int v27 = *(_DWORD *)(a1 + v25 + 24);
          v25 += 16;
        }
        while (v27 > v21);
        unint64_t v28 = a1 + v25;
        unint64_t v29 = a2;
        if (v25 == 16)
        {
          unint64_t v32 = a2;
          while (v28 < v32)
          {
            unint64_t v30 = v32 - 16;
            int v33 = *(_DWORD *)(v32 - 8);
            v32 -= 16;
            if (v33 > v21) {
              goto LABEL_23;
            }
          }
          unint64_t v30 = v32;
          unint64_t v9 = v28;
        }
        else
        {
          do
          {
            unint64_t v30 = v29 - 16;
            int v31 = *(_DWORD *)(v29 - 8);
            v29 -= 16;
          }
          while (v31 <= v21);
LABEL_23:
          unint64_t v9 = v28;
          if (v28 < v30)
          {
            unint64_t v34 = v30;
            do
            {
              uint64_t v35 = *(void **)v9;
              *(void *)unint64_t v9 = 0;
              uint64_t v36 = *(void **)v34;
              *(void *)unint64_t v34 = 0;
              uint64_t v37 = *(void **)v9;
              *(void *)unint64_t v9 = v36;

              double v38 = *(void **)v34;
              *(void *)unint64_t v34 = v35;

              int v39 = *(_DWORD *)(v9 + 8);
              *(_DWORD *)(v9 + 8) = *(_DWORD *)(v34 + 8);
              *(_DWORD *)(v34 + 8) = v39;
              do
              {
                int v40 = *(_DWORD *)(v9 + 24);
                v9 += 16;
              }
              while (v40 > v21);
              do
              {
                int v41 = *(_DWORD *)(v34 - 8);
                v34 -= 16;
              }
              while (v41 <= v21);
            }
            while (v9 < v34);
          }
        }
        if (v9 - 16 != a1)
        {
          uint64_t v42 = *(void *)(v9 - 16);
          *(void *)(v9 - 16) = 0;
          uint64_t v43 = *(void **)a1;
          *(void *)a1 = v42;

          *(_DWORD *)(a1 + 8) = *(_DWORD *)(v9 - 8);
        }
        uint64_t v44 = *(void **)(v9 - 16);
        *(void *)(v9 - 16) = v26;

        *(_DWORD *)(v9 - 8) = v21;
        if (v28 >= v30) {
          break;
        }
LABEL_34:
        sub_1C4AB6D6C(a1, v9 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v45 = sub_1C4AB7940(a1, v9 - 16);
      if (sub_1C4AB7940(v9, a2)) {
        break;
      }
      if (!v45) {
        goto LABEL_34;
      }
    }
    a2 = v9 - 16;
    if (!v45) {
      continue;
    }
    break;
  }
}

void sub_1C4AB7658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1C4AB7B38(a1, a2, a3, a4);
  if (*(_DWORD *)(a5 + 8) > *(_DWORD *)(a4 + 8))
  {
    uint64_t v10 = *(void **)a4;
    *(void *)a4 = 0;
    uint64_t v11 = *(void **)a5;
    *(void *)a5 = 0;
    unint64_t v12 = *(void **)a4;
    *(void *)a4 = v11;

    int64_t v13 = *(void **)a5;
    *(void *)a5 = v10;

    int v14 = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a5 + 8) = v14;
    if (*(_DWORD *)(a4 + 8) > *(_DWORD *)(a3 + 8))
    {
      uint64_t v15 = *(void **)a3;
      *(void *)a3 = 0;
      uint64_t v16 = *(void **)a4;
      *(void *)a4 = 0;
      uint64_t v17 = *(void **)a3;
      *(void *)a3 = v16;

      uint64_t v18 = *(void **)a4;
      *(void *)a4 = v15;

      int v19 = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a4 + 8) = v19;
      if (*(_DWORD *)(a3 + 8) > *(_DWORD *)(a2 + 8))
      {
        int v20 = *(void **)a2;
        *(void *)a2 = 0;
        int v21 = *(void **)a3;
        *(void *)a3 = 0;
        uint64_t v22 = *(void **)a2;
        *(void *)a2 = v21;

        uint64_t v23 = *(void **)a3;
        *(void *)a3 = v20;

        int v24 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 8) = v24;
        if (*(_DWORD *)(a2 + 8) > *(_DWORD *)(a1 + 8))
        {
          uint64_t v25 = *(void **)a1;
          *(void *)a1 = 0;
          uint64_t v26 = *(void **)a2;
          *(void *)a2 = 0;
          int v27 = *(void **)a1;
          *(void *)a1 = v26;

          unint64_t v28 = *(void **)a2;
          *(void *)a2 = v25;

          int v29 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a2 + 8) = v29;
        }
      }
    }
  }
}

void sub_1C4AB77BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (int *)(a2 + 8);
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = (int *)(a1 + 8);
  uint64_t v10 = (int *)(a3 + 8);
  int v9 = *(_DWORD *)(a3 + 8);
  if (v6 > *(_DWORD *)(a1 + 8))
  {
    uint64_t v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v9 <= v6)
    {
      uint64_t v23 = *(void **)a2;
      *(void *)a2 = 0;
      int v24 = *(void **)a1;
      *(void *)a1 = v23;

      uint64_t v25 = *(void **)a2;
      *(void *)a2 = v11;

      int v26 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v26;
      if (*v10 <= v26) {
        return;
      }
      int v27 = *(void **)a2;
      *(void *)a2 = 0;
      unint64_t v28 = *(void **)a3;
      *(void *)a3 = 0;
      int v29 = *(void **)a2;
      *(void *)a2 = v28;

      int v14 = *(void **)a3;
      *(void *)a3 = v27;
      uint64_t v8 = v7;
    }
    else
    {
      unint64_t v12 = *(void **)a3;
      *(void *)a3 = 0;
      int64_t v13 = *(void **)a1;
      *(void *)a1 = v12;

      int v14 = *(void **)a3;
      *(void *)a3 = v11;
    }
    uint64_t v7 = v10;
    goto LABEL_10;
  }
  if (v9 > v6)
  {
    uint64_t v15 = *(void **)a2;
    *(void *)a2 = 0;
    uint64_t v16 = *(void **)a3;
    *(void *)a3 = 0;
    uint64_t v17 = *(void **)a2;
    *(void *)a2 = v16;

    uint64_t v18 = *(void **)a3;
    *(void *)a3 = v15;

    int v19 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = v19;
    if (*(_DWORD *)(a2 + 8) > *v8)
    {
      int v20 = *(void **)a1;
      *(void *)a1 = 0;
      int v21 = *(void **)a2;
      *(void *)a2 = 0;
      uint64_t v22 = *(void **)a1;
      *(void *)a1 = v21;

      int v14 = *(void **)a2;
      *(void *)a2 = v20;
LABEL_10:

      int v30 = *v8;
      int *v8 = *v7;
      int *v7 = v30;
    }
  }
}

BOOL sub_1C4AB7940(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 8))
      {
        int v6 = *(void **)a1;
        *(void *)a1 = 0;
        uint64_t v7 = *(void *)(a2 - 16);
        *(void *)(a2 - 16) = 0;
        uint64_t v8 = *(void **)a1;
        *(void *)a1 = v7;

        int v9 = *(void **)(a2 - 16);
        *(void *)(a2 - 16) = v6;

        int v10 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v10;
        return 1;
      }
      return result;
    case 3:
      sub_1C4AB77BC(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      sub_1C4AB7B38(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      sub_1C4AB7658(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      uint64_t v11 = a1 + 32;
      sub_1C4AB77BC(a1, a1 + 16, a1 + 32);
      uint64_t v12 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    int v17 = *(_DWORD *)(v12 + 8);
    if (v17 > *(_DWORD *)(v11 + 8))
    {
      uint64_t v18 = *(void *)v12;
      *(void *)uint64_t v12 = 0;
      uint64_t v19 = v13;
      do
      {
        uint64_t v20 = a1 + v19;
        uint64_t v21 = *(void *)(a1 + v19 + 32);
        *(void *)(v20 + 32) = 0;
        uint64_t v22 = *(void **)(a1 + v19 + 48);
        *(void *)(v20 + 48) = v21;

        *(_DWORD *)(v20 + 56) = *(_DWORD *)(v20 + 40);
        if (v19 == -32)
        {
          uint64_t v15 = a1;
          goto LABEL_7;
        }
        v19 -= 16;
      }
      while (v17 > *(_DWORD *)(v20 + 24));
      uint64_t v15 = a1 + v19 + 48;
LABEL_7:
      uint64_t v16 = *(void **)v15;
      *(void *)uint64_t v15 = v18;

      *(_DWORD *)(v15 + 8) = v17;
      if (++v14 == 8) {
        return v12 + 16 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 16;
    v12 += 16;
    if (v12 == a2) {
      return 1;
    }
  }
}

void sub_1C4AB7B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1C4AB77BC(a1, a2, a3);
  if (*(_DWORD *)(a4 + 8) > *(_DWORD *)(a3 + 8))
  {
    uint64_t v8 = *(void **)a3;
    *(void *)a3 = 0;
    int v9 = *(void **)a4;
    *(void *)a4 = 0;
    int v10 = *(void **)a3;
    *(void *)a3 = v9;

    uint64_t v11 = *(void **)a4;
    *(void *)a4 = v8;

    int v12 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v12;
    if (*(_DWORD *)(a3 + 8) > *(_DWORD *)(a2 + 8))
    {
      uint64_t v13 = *(void **)a2;
      *(void *)a2 = 0;
      int v14 = *(void **)a3;
      *(void *)a3 = 0;
      uint64_t v15 = *(void **)a2;
      *(void *)a2 = v14;

      uint64_t v16 = *(void **)a3;
      *(void *)a3 = v13;

      int v17 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v17;
      if (*(_DWORD *)(a2 + 8) > *(_DWORD *)(a1 + 8))
      {
        uint64_t v18 = *(void **)a1;
        *(void *)a1 = 0;
        uint64_t v19 = *(void **)a2;
        *(void *)a2 = 0;
        uint64_t v20 = *(void **)a1;
        *(void *)a1 = v19;

        uint64_t v21 = *(void **)a2;
        *(void *)a2 = v18;

        int v22 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = v22;
      }
    }
  }
}

uint64_t sub_1C4AB7C50(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v4 = (a2 - a1) >> 2;
  size_t v5 = a4 - a3;
  unint64_t v6 = (a4 - a3) >> 2;
  if (v4 < v6) {
    return 0;
  }
  int v9 = (int *)a3;
  if (v4 == v6)
  {
    if (a2 - a1 != v5) {
      return 0;
    }
    if (a1 != a2)
    {
      uint64_t v11 = a1 + 4;
      do
      {
        int v12 = *v9++;
        BOOL v7 = *(_DWORD *)(v11 - 4) == v12;
        BOOL v13 = *(_DWORD *)(v11 - 4) != v12 || v11 == a2;
        v11 += 4;
      }
      while (!v13);
      return v7;
    }
    return 1;
  }
  if (a4 == a3) {
    return 1;
  }
  if ((v5 & 0x8000000000000000) != 0) {
    sub_1C494A220();
  }
  int v14 = (char *)operator new(a4 - a3);
  memcpy(v14, (const void *)(a2 - 4 * v6), v5);
  unint64_t v15 = 0;
  do
  {
    int v16 = *(_DWORD *)&v14[v15];
    int v17 = v9[v15 / 4];
    BOOL v7 = v16 == v17;
    BOOL v18 = v16 != v17 || 4 * v6 - 4 == v15;
    v15 += 4;
  }
  while (!v18);
  operator delete(v14);
  return v7;
}

void sub_1C4AB7D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_1C4AB7D74(uint64_t *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int64_t v4 = a3 - a2;
  if (a3 == a2)
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  else
  {
    if (v4 < 0) {
      sub_1C494A220();
    }
    unint64_t v6 = operator new(a3 - a2);
    *a1 = (uint64_t)v6;
    uint64_t v7 = (uint64_t)v6 + 4 * (v4 >> 2);
    a1[2] = v7;
    memcpy(v6, a2, v4);
    a1[1] = v7;
  }
  uint64_t v8 = (char *)operator new(0xCuLL);
  *(void *)uint64_t v8 = 0x200000000;
  *((_DWORD *)v8 + 2) = 0;
  if (sub_1C4AB7C50((uint64_t)v6, v7, v8, v8 + 12))
  {
    operator delete(v8);
LABEL_8:
    a1[1] -= 8;
    goto LABEL_18;
  }
  int v9 = operator new(0xCuLL);
  *(void *)int v9 = 0x400000000;
  *((_DWORD *)v9 + 2) = 0;
  int v10 = sub_1C4AB7C50(*a1, a1[1], (char *)v9, (char *)v9 + 12);
  operator delete(v9);
  operator delete(v8);
  if (v10) {
    goto LABEL_8;
  }
  uint64_t v11 = operator new(0xCuLL);
  *(void *)uint64_t v11 = 0x200000001;
  *((_DWORD *)v11 + 2) = 0;
  if (sub_1C4AB7C50(*a1, a1[1], (char *)v11, (char *)v11 + 12)) {
    goto LABEL_12;
  }
  int v12 = (char *)operator new(0xCuLL);
  *(void *)int v12 = 0x200000000;
  *((_DWORD *)v12 + 2) = 1;
  if ((sub_1C4AB7C50(*a1, a1[1], v12, v12 + 12) & 1) == 0)
  {
    int v16 = operator new(0xCuLL);
    *(void *)int v16 = 0x200000001;
    *((_DWORD *)v16 + 2) = 1;
    char v17 = sub_1C4AB7C50(*a1, a1[1], (char *)v16, (char *)v16 + 12);
    operator delete(v16);
    operator delete(v12);
    operator delete(v11);
    if (v17) {
      goto LABEL_13;
    }
    uint64_t v19 = *a1;
    BOOL v18 = (_DWORD *)a1[1];
    if (*(v18 - 1) == 18)
    {
      unint64_t v20 = (unint64_t)v18 - v19;
      if (v18 != (_DWORD *)v19)
      {
        uint64_t v21 = v18 - 1;
        while (*v21 != 17)
        {
          a1[1] = (uint64_t)v21;
          v20 -= 4;
          BOOL v22 = v21-- == (_DWORD *)v19;
          if (v22) {
            goto LABEL_62;
          }
        }
        if (v20 >= 5 && *(_DWORD *)(v20 + v19 - 8) == 16)
        {
          a1[1] = (uint64_t)v21;
          goto LABEL_18;
        }
      }
    }
    else
    {
      if ((unint64_t)v18 - v19 > 4)
      {
        unint64_t v23 = *(v18 - 2);
        *(_OWORD *)BOOL v45 = 0u;
        *(_OWORD *)std::string __p = 0u;
        int v47 = 1065353216;
        sub_1C4AC9A08((float *)v45, 0xEu, 14);
        sub_1C4AC9A08((float *)v45, 0xCu, 12);
        sub_1C4AC9A08((float *)v45, 0xDu, 13);
        if (v45[1])
        {
          uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v45[1]);
          v24.i16[0] = vaddlv_u8(v24);
          if (v24.u32[0] > 1uLL)
          {
            unint64_t v25 = v23;
            if (v45[1] <= (void *)v23) {
              unint64_t v25 = v23 % (unint64_t)v45[1];
            }
          }
          else
          {
            unint64_t v25 = (LODWORD(v45[1]) - 1) & v23;
          }
          int v26 = (uint64_t **)*((void *)v45[0] + v25);
          if (v26)
          {
            int v27 = *v26;
            if (v27)
            {
              if (v24.u32[0] < 2uLL)
              {
                while (1)
                {
                  unint64_t v29 = v27[1];
                  if (v29 == v23)
                  {
                    if (*((_DWORD *)v27 + 4) == v23) {
                      goto LABEL_85;
                    }
                  }
                  else if ((v29 & ((unint64_t)v45[1] - 1)) != v25)
                  {
                    goto LABEL_57;
                  }
                  int v27 = (uint64_t *)*v27;
                  if (!v27) {
                    goto LABEL_57;
                  }
                }
              }
              do
              {
                unint64_t v28 = v27[1];
                if (v28 == v23)
                {
                  if (*((_DWORD *)v27 + 4) == v23)
                  {
LABEL_85:
                    BOOL v30 = *(_DWORD *)(a1[1] - 4) != 19;
                    int v31 = __p[0];
                    if (!__p[0]) {
                      goto LABEL_59;
                    }
                    goto LABEL_58;
                  }
                }
                else
                {
                  if ((void *)v28 >= v45[1]) {
                    v28 %= (unint64_t)v45[1];
                  }
                  if (v28 != v25) {
                    break;
                  }
                }
                int v27 = (uint64_t *)*v27;
              }
              while (v27);
            }
          }
        }
LABEL_57:
        BOOL v30 = 0;
        int v31 = __p[0];
        if (!__p[0]) {
          goto LABEL_59;
        }
        do
        {
LABEL_58:
          unint64_t v32 = (void *)*v31;
          operator delete(v31);
          int v31 = v32;
        }
        while (v32);
LABEL_59:
        int v33 = v45[0];
        v45[0] = 0;
        if (v33) {
          operator delete(v33);
        }
        if (v30) {
          goto LABEL_62;
        }
        BOOL v18 = (_DWORD *)a1[1];
        if ((unint64_t)v18 - *a1 >= 5 && *(v18 - 2) == 16)
        {
          unsigned int v34 = *(v18 - 1);
          *(void *)&long long v48 = 0x1100000013;
          sub_1C4AB8650((uint64_t)v45, (unsigned int *)&v48, 2);
          uint64_t v35 = v45[0];
          BOOL v36 = sub_1C4AB8578(v34, (uint64_t)v45[0], (unint64_t)v45[1]);
          uint64_t v37 = __p[0];
          if (__p[0])
          {
            do
            {
              double v38 = (void *)*v37;
              operator delete(v37);
              uint64_t v37 = v38;
            }
            while (v38);
            uint64_t v35 = v45[0];
          }
          v45[0] = 0;
          if (v35) {
            operator delete(v35);
          }
          if (!v36) {
            goto LABEL_62;
          }
          BOOL v18 = (_DWORD *)a1[1];
        }
      }
      if (*(v18 - 1) != 20) {
        goto LABEL_18;
      }
      uint64_t v39 = *a1;
      unint64_t v40 = (unint64_t)v18 - *a1;
      if (v18 != (_DWORD *)*a1)
      {
        int v41 = v18 - 1;
        while (*v41 != 19)
        {
          a1[1] = (uint64_t)v41;
          v40 -= 4;
          BOOL v22 = v41-- == (_DWORD *)v39;
          if (v22)
          {
            BOOL v18 = (_DWORD *)v39;
            goto LABEL_88;
          }
        }
        if (v40 < 5)
        {
          BOOL v18 = v41 + 1;
        }
        else
        {
          unsigned int v42 = *(_DWORD *)(v40 + v39 - 8);
          int v49 = 16;
          long long v48 = xmmword_1C4C43CC0;
          sub_1C4AB8650((uint64_t)v45, (unsigned int *)&v48, 5);
          LOBYTE(v42) = sub_1C4AB8578(v42, (uint64_t)v45[0], (unint64_t)v45[1]);
          sub_1C498D2E0((uint64_t)v45);
          BOOL v18 = (_DWORD *)a1[1];
          if (v42)
          {
            int v44 = *(v18 - 2);
            uint64_t v43 = v18 - 2;
            a1[1] = (uint64_t)(v43 + 1);
            if (v44 == 14)
            {
              *uint64_t v43 = 15;
            }
            else
            {
              a1[1] = (uint64_t)v43;
              sub_1C4AB86E8((uint64_t)a1, 7);
            }
            goto LABEL_18;
          }
          uint64_t v39 = *a1;
        }
      }
LABEL_88:
      if (v18 != (_DWORD *)v39 && *(v18 - 1) == 19)
      {
        *(_DWORD *)(v39 + 4 * (((uint64_t)v18 - v39) >> 2) - 4) = 7;
        goto LABEL_18;
      }
    }
LABEL_62:
    LODWORD(v45[0]) = 8;
    sub_1C4AC9930((char **)a1, v45, (unsigned char *)v45 + 4);
    goto LABEL_18;
  }
  operator delete(v12);
LABEL_12:
  operator delete(v11);
LABEL_13:
  BOOL v13 = (void *)a1[2];
  int v14 = (_DWORD *)*a1;
  if (v13 == (void *)*a1)
  {
    if (v13)
    {
      a1[1] = (uint64_t)v13;
      operator delete(v13);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    int v14 = operator new(4uLL);
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v14;
    a1[2] = (uint64_t)(v14 + 1);
  }
  _DWORD *v14 = 8;
  a1[1] = (uint64_t)(v14 + 1);
LABEL_18:
  BOOL result = (_DWORD *)*a1;
  if (*(_DWORD *)*a1 == 8 && (unint64_t)(a1[1] - (void)result) >= 5)
  {
    if ((_DWORD *)a1[2] == result)
    {
      a1[1] = (uint64_t)result;
      operator delete(result);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      BOOL result = operator new(4uLL);
      *a1 = (uint64_t)result;
      a1[1] = (uint64_t)result;
      a1[2] = (uint64_t)(result + 1);
    }
    *result++ = 8;
    a1[1] = (uint64_t)result;
  }
  return result;
}

void sub_1C4AB840C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *__p)
{
  BOOL v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C4AB84D4()
{
  if (!*v0) {
    JUMPOUT(0x1C4AB84CCLL);
  }
  JUMPOUT(0x1C4AB84C4);
}

void *sub_1C4AB84E4(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 62) {
      sub_1C494A220();
    }
    size_t v5 = 4 * a3;
    unint64_t v6 = (char *)operator new(4 * a3);
    *a1 = v6;
    a1[1] = v6;
    uint64_t v7 = &v6[v5];
    a1[2] = &v6[v5];
    memmove(v6, a2, v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_1C4AB855C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1C4AB8578(unsigned int a1, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      unint64_t v4 = a1;
      if (a1 >= a3) {
        unint64_t v4 = a1 % a3;
      }
    }
    else
    {
      unint64_t v4 = (a3 - 1) & a1;
    }
    size_t v5 = *(uint64_t **)(a2 + 8 * v4);
    if (v5)
    {
      size_t v5 = (uint64_t *)*v5;
      if (v5)
      {
        if (v3.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v7 = v5[1];
            if (v7 == a1)
            {
              if (*((_DWORD *)v5 + 4) == a1) {
                return v5 != 0;
              }
            }
            else if ((v7 & (a3 - 1)) != v4)
            {
              goto LABEL_21;
            }
            size_t v5 = (uint64_t *)*v5;
            if (!v5) {
              return v5 != 0;
            }
          }
        }
        do
        {
          unint64_t v6 = v5[1];
          if (v6 == a1)
          {
            if (*((_DWORD *)v5 + 4) == a1) {
              return v5 != 0;
            }
          }
          else
          {
            if (v6 >= a3) {
              v6 %= a3;
            }
            if (v6 != v4) {
              goto LABEL_21;
            }
          }
          size_t v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
    }
  }
  else
  {
LABEL_21:
    size_t v5 = 0;
  }
  return v5 != 0;
}

uint64_t sub_1C4AB8650(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 4 * a3;
    do
    {
      sub_1C4AC9A08((float *)a1, *a2, *a2);
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

void sub_1C4AB86B4(_Unwind_Exception *exception_object)
{
  uint8x8_t v3 = *(void **)(v1 + 16);
  if (v3)
  {
    do
    {
      unint64_t v4 = (void *)*v3;
      operator delete(v3);
      uint8x8_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = *(void **)v1;
  *(void *)uint64_t v1 = 0;
  if (v5) {
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C4AB86E8(uint64_t a1, int a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_DWORD *)uint64_t v5 = a2;
    uint64_t v7 = (uint64_t)(v5 + 4);
    goto LABEL_22;
  }
  uint64_t v8 = *(char **)a1;
  uint64_t v9 = (uint64_t)&v5[-*(void *)a1];
  uint64_t v10 = v9 >> 2;
  unint64_t v11 = (v9 >> 2) + 1;
  if (v11 >> 62) {
    sub_1C494A220();
  }
  uint64_t v12 = v4 - (void)v8;
  if (v12 >> 1 > v11) {
    unint64_t v11 = v12 >> 1;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 62) {
      sub_1C4949AA8();
    }
    int v14 = operator new(4 * v13);
    unint64_t v15 = &v14[4 * v10];
    int v16 = &v14[4 * v13];
    _DWORD *v15 = a2;
    uint64_t v7 = (uint64_t)(v15 + 1);
    int64_t v17 = v5 - v8;
    if (v5 == v8) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  int v14 = 0;
  unint64_t v15 = (_DWORD *)(4 * v10);
  int v16 = 0;
  *(_DWORD *)(4 * v10) = a2;
  uint64_t v7 = 4 * v10 + 4;
  int64_t v17 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v18 = v17 - 4;
    if (v18 < 0x2C) {
      goto LABEL_27;
    }
    if ((unint64_t)(v5 - v14 - v9) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v19 = (v18 >> 2) + 1;
    uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v6 = &v5[-v20];
    unint64_t v15 = (_DWORD *)((char *)v15 - v20);
    uint64_t v21 = &v14[4 * v10 - 16];
    BOOL v22 = v5 - 16;
    uint64_t v23 = v19 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *uint64_t v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 8;
    }
    while (v23);
    if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_27:
      do
      {
        int v25 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *--unint64_t v15 = v25;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  *(void *)a1 = v15;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v16;
  if (v8) {
    operator delete(v8);
  }
LABEL_22:
  *(void *)(a1 + 8) = v7;
}

uint64_t **CoreHandwriting::CHEncoderDecoderBeamState::copyTensors(uint64_t **this, const CoreHandwriting::CHEncoderDecoderBeamState **a2)
{
  uint64_t v2 = a2 + 1;
  uint8x8_t v3 = *a2;
  if (*a2 != (const CoreHandwriting::CHEncoderDecoderBeamState *)(a2 + 1))
  {
    unint64_t v4 = this;
    do
    {
      id v5 = objc_alloc(MEMORY[0x1E4F1E9A8]);
      unint64_t v11 = objc_msgSend_shape(*((void **)v3 + 7), v6, v7, v8, v9, v10);
      uint64_t v14 = objc_msgSend_initWithShape_dataType_error_(v5, v12, (uint64_t)v11, 65568, 0, v13);
      unint64_t v15 = sub_1C4ACA1DC(v4, (const void **)v3 + 4, (uint64_t)v3 + 32);
      int v16 = (void *)v15[7];
      v15[7] = v14;

      id v17 = (id) sub_1C4ACA1DC(v4, (const void **)v3 + 4, (uint64_t)v3 + 32)[7];
      uint64_t v23 = objc_msgSend_dataPointer(v17, v18, v19, v20, v21, v22);
      unint64_t v29 = (const void *)objc_msgSend_dataPointer(*((void **)v3 + 7), v24, v25, v26, v27, v28);
      uint64_t v35 = objc_msgSend_count(*((void **)v3 + 7), v30, v31, v32, v33, v34);
      this = (uint64_t **)memcpy(v23, v29, 4 * v35);
      BOOL v36 = (const CoreHandwriting::CHEncoderDecoderBeamState *)*((void *)v3 + 1);
      if (v36)
      {
        do
        {
          uint64_t v37 = (const CoreHandwriting::CHEncoderDecoderBeamState **)v36;
          BOOL v36 = *(const CoreHandwriting::CHEncoderDecoderBeamState **)v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          uint64_t v37 = (const CoreHandwriting::CHEncoderDecoderBeamState **)*((void *)v3 + 2);
          BOOL v38 = *v37 == v3;
          uint8x8_t v3 = (const CoreHandwriting::CHEncoderDecoderBeamState *)v37;
        }
        while (!v38);
      }
      uint8x8_t v3 = (const CoreHandwriting::CHEncoderDecoderBeamState *)v37;
    }
    while (v37 != v2);
  }
  return this;
}

void sub_1C4AB8988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL CoreHandwriting::CHEncoderDecoderBeamState::operator>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
  if (v3)
  {
    double v4 = *(float *)(a1 + 192);
    float v5 = v4 / pow((double)(unint64_t)(v3 >> 2), 0.330993);
    uint64_t v6 = *(void *)(a2 + 80) - *(void *)(a2 + 72);
    if (v6)
    {
LABEL_3:
      double v7 = *(float *)(a2 + 192);
      float v8 = v7 / pow((double)(unint64_t)(v6 >> 2), 0.330993);
      return v5 > v8;
    }
  }
  else
  {
    float v5 = *(float *)(a1 + 192);
    uint64_t v6 = *(void *)(a2 + 80) - *(void *)(a2 + 72);
    if (v6) {
      goto LABEL_3;
    }
  }
  return v5 > *(float *)(a2 + 192);
}

float CoreHandwriting::CHEncoderDecoderBeamState::getNormalizedProbability(CoreHandwriting::CHEncoderDecoderBeamState *this)
{
  uint64_t v1 = *((void *)this + 10) - *((void *)this + 9);
  if (!v1) {
    return *((float *)this + 48);
  }
  double v2 = *((float *)this + 48);
  return v2 / pow((double)(unint64_t)(v1 >> 2), 0.330993);
}

void sub_1C4AB8AAC(std::string *a1, uint64_t a2, void *a3)
{
  sub_1C4AB8C9C(&v20, (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
  uint64_t v6 = *(void *)(a2 + 72);
  if (*(void *)(a2 + 80) != v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      std::string::operator=((std::string *)((char *)v20 + v7), (const std::string *)(*a3 + 24 * *(int *)(v6 + 4 * v8++)));
      uint64_t v6 = *(void *)(a2 + 72);
      v7 += 24;
    }
    while (v8 < (*(void *)(a2 + 80) - v6) >> 2);
  }
  uint64_t v9 = (void **)v20;
  uint64_t v10 = v21;
  memset(&__p, 0, sizeof(__p));
  if (v20 != v21)
  {
    do
    {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (size) {
        std::string::append(&__p, " ");
      }
      int v12 = *((char *)v9 + 23);
      if (v12 >= 0) {
        uint64_t v13 = (const std::string::value_type *)v9;
      }
      else {
        uint64_t v13 = (const std::string::value_type *)*v9;
      }
      if (v12 >= 0) {
        std::string::size_type v14 = *((unsigned __int8 *)v9 + 23);
      }
      else {
        std::string::size_type v14 = (std::string::size_type)v9[1];
      }
      unint64_t v15 = std::string::append(&__p, v13, v14);
      if (SHIBYTE(v15->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_1C4949ADC(&__dst, v15->__r_.__value_.__l.__data_, v15->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v16;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = __dst;
      v9 += 3;
    }
    while (v9 != v10);
    uint64_t v9 = (void **)v20;
  }
  *a1 = __p;
  memset(&__p, 0, sizeof(__p));
  if (v9)
  {
    id v17 = v21;
    unint64_t v18 = v9;
    if (v21 != v9)
    {
      do
      {
        if (*((char *)v17 - 1) < 0) {
          operator delete(*(v17 - 3));
        }
        v17 -= 3;
      }
      while (v17 != v9);
      unint64_t v18 = v20;
    }
    uint64_t v21 = v9;
    operator delete(v18);
  }
}

void sub_1C4AB8C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1C4935DF0((void **)va);
  _Unwind_Resume(a1);
}

void sub_1C4AB8C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1C4935DF0(&a15);
  _Unwind_Resume(a1);
}

void *sub_1C4AB8C9C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_1C494A220();
    }
    double v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1C4AB8D48(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (void **)*v1;
  if (*v1)
  {
    double v4 = (void **)v1[1];
    size_t v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v3);
      size_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C4AB8D9C(uint64_t **a1, const void **a2, void *a3, int a4)
{
  id v7 = a3;
  unint64_t v8 = (void *)MEMORY[0x1E4F1CA48];
  std::string::size_type v14 = objc_msgSend_shape(v7, v9, v10, v11, v12, v13);
  uint64_t v19 = objc_msgSend_arrayWithArray_(v8, v15, (uint64_t)v14, v16, v17, v18);

  objc_msgSend_setObject_atIndexedSubscript_(v19, v20, (uint64_t)&unk_1F203EEC8, 0, v21, v22);
  id v57 = v7;
  uint64_t v28 = objc_msgSend_dataPointer(v57, v23, v24, v25, v26, v27);
  uint64_t v34 = objc_msgSend_strides(v57, v29, v30, v31, v32, v33);
  uint64_t v39 = objc_msgSend_objectAtIndexedSubscript_(v34, v35, 0, v36, v37, v38);
  uint64_t v45 = objc_msgSend_integerValue(v39, v40, v41, v42, v43, v44);

  id v46 = objc_alloc(MEMORY[0x1E4F1E9A8]);
  uint64_t v52 = objc_msgSend_strides(v57, v47, v48, v49, v50, v51);
  uint64_t v54 = objc_msgSend_initWithDataPointer_shape_dataType_strides_deallocator_error_(v46, v53, v28 + 4 * v45 * a4, (uint64_t)v19, 65568, (uint64_t)v52, 0, 0);
  int v55 = sub_1C4ACA1DC(a1, a2, (uint64_t)a2);
  int v56 = (void *)v55[7];
  v55[7] = v54;
}

void sub_1C4AB8F00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AB8F74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreHandwriting::CHEncoderDecoderBeamState::updatePastAttention(uint64_t **this, CoreHandwriting::CHEncoderDecoderBeamState *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v8 = (const char *)objc_msgSend_UTF8String(@"past_attention_weights", (const char *)a2, a3, a4, a5, a6);
  size_t v9 = strlen(v8);
  if (v9 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_34;
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (void **)operator new(v12 + 1);
    size_t v64 = v10;
    unint64_t v65 = v13 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v65) = v9;
  p_dst = (void **)&__dst;
  if (v9) {
LABEL_8:
  }
    memmove(p_dst, v8, v10);
  *((unsigned char *)p_dst + v10) = 0;
  std::string::size_type v14 = sub_1C4ACA384(this, (const void **)&__dst, (uint64_t)&__dst)[7];
  uint64_t v25 = objc_msgSend_dataPointer(v14, v15, v16, v17, v18, v19);
  if (SHIBYTE(v65) < 0) {
    operator delete(__dst);
  }
  uint64_t v26 = (const char *)objc_msgSend_UTF8String(@"attention_weights", v20, v21, v22, v23, v24);
  size_t v27 = strlen(v26);
  if (v27 > 0x7FFFFFFFFFFFFFF7) {
LABEL_34:
  }
    sub_1C4949B7C();
  size_t v28 = v27;
  if (v27 >= 0x17)
  {
    uint64_t v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17) {
      uint64_t v30 = v27 | 7;
    }
    uint64_t v31 = v30 + 1;
    unint64_t v29 = (void **)operator new(v30 + 1);
    size_t v64 = v28;
    unint64_t v65 = v31 | 0x8000000000000000;
    std::string __dst = v29;
    goto LABEL_18;
  }
  HIBYTE(v65) = v27;
  unint64_t v29 = (void **)&__dst;
  if (v27) {
LABEL_18:
  }
    memmove(v29, v26, v28);
  *((unsigned char *)v29 + v28) = 0;
  uint64_t v32 = sub_1C4ACA384((uint64_t **)a2, (const void **)&__dst, (uint64_t)&__dst)[7];
  uint64_t v43 = objc_msgSend_dataPointer(v32, v33, v34, v35, v36, v37);
  if (SHIBYTE(v65) < 0) {
    operator delete(__dst);
  }
  uint64_t v44 = (const char *)objc_msgSend_UTF8String(@"past_attention_weights", v38, v39, v40, v41, v42);
  size_t v45 = strlen(v44);
  if (v45 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_34;
  }
  size_t v46 = v45;
  uint64_t v47 = 0;
  while (1)
  {
    if (v46 >= 0x17)
    {
      uint64_t v49 = (v46 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v46 | 7) != 0x17) {
        uint64_t v49 = v46 | 7;
      }
      uint64_t v50 = v49 + 1;
      uint64_t v48 = (void **)operator new(v49 + 1);
      size_t v64 = v46;
      unint64_t v65 = v50 | 0x8000000000000000;
      std::string __dst = v48;
LABEL_29:
      memmove(v48, v44, v46);
      goto LABEL_30;
    }
    HIBYTE(v65) = v46;
    uint64_t v48 = (void **)&__dst;
    if (v46) {
      goto LABEL_29;
    }
LABEL_30:
    *((unsigned char *)v48 + v46) = 0;
    uint64_t v51 = sub_1C4ACA384(this, (const void **)&__dst, (uint64_t)&__dst);
    uint64_t v62 = objc_msgSend_count(v51[7], v52, v53, v54, v55, v56);
    if (SHIBYTE(v65) < 0) {
      operator delete(__dst);
    }
    if (v62 <= v47) {
      break;
    }
    *(float *)(v25 + 4 * v47) = *(float *)(v43 + 4 * v47) + *(float *)(v25 + 4 * v47);
    ++v47;
    uint64_t v44 = (const char *)objc_msgSend_UTF8String(@"past_attention_weights", v57, v58, v59, v60, v61);
    size_t v46 = strlen(v44);
    if (v46 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_34;
    }
  }
}

void sub_1C4AB922C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::CHEncoderDecoderBeamState::scorersApplied(CoreHandwriting::CHEncoderDecoderBeamState *this)
{
  sub_1C4AB7D74(&v4, *((unsigned char **)this + 25), *((unsigned char **)this + 26));
  double v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }
  *((void *)this + 25) = v4;
  uint64_t v3 = v5;
  *((_OWORD *)this + 13) = v5;
  if (*(_DWORD *)(v3 - 4) != 1)
  {
    if (*((char *)this + 247) < 0)
    {
      **((unsigned char **)this + 28) = 0;
      *((void *)this + 29) = 0;
    }
    else
    {
      *((unsigned char *)this + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      *((unsigned char *)this + 247) = 0;
    }
  }
}

BOOL CoreHandwriting::CHEncoderDecoderBeamState::isGraphingFunction(CoreHandwriting::CHEncoderDecoderBeamState *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 25);
  return *((void *)this + 26) - (void)v1 >= 9uLL && *v1 == 1 && v1[1] == 9;
}

float CoreHandwriting::LatexSyntaxBeamScorer::apply(CoreHandwriting::LatexSyntaxBeamScorer *this, CoreHandwriting::CHEncoderDecoderBeamState *a2, BOOL *a3)
{
  sub_1C4B18568((CoreHandwriting::LatexSyntaxBeamScorer *)((char *)this + 8), (void *)a2 + 9, (void **)&v38);
  v37[0] = 0;
  v37[1] = 0;
  uint64_t v36 = v37;
  sub_1C4ACA4EC((uint64_t *)&v36, v38, v39);
  if (!v37[0]) {
    goto LABEL_59;
  }
  uint64_t v6 = (int *)v37;
  id v7 = (int *)v37[0];
  do
  {
    unint64_t v8 = v7;
    size_t v9 = v6;
    int v10 = v7[8];
    if (v10 >= 1) {
      uint64_t v6 = v7;
    }
    else {
      v7 += 2;
    }
    id v7 = *(int **)v7;
  }
  while (v7);
  if (v6 == (int *)v37) {
    goto LABEL_59;
  }
  if (v10 < 1) {
    unint64_t v8 = v9;
  }
  if (v8[8] > 1)
  {
LABEL_59:
    if (*((unsigned char *)a2 + 196))
    {
      v35[0] = 0;
      v35[1] = 0;
      uint64_t v34 = v35;
      sub_1C4ACA4EC((uint64_t *)&v34, v38, v39);
      if (v35[0])
      {
        uint64_t v11 = (int *)v35;
        uint64_t v12 = (int *)v35[0];
        do
        {
          uint64_t v13 = v12;
          std::string::size_type v14 = v11;
          int v15 = v12[8];
          if (v15 >= 3) {
            uint64_t v11 = v12;
          }
          else {
            v12 += 2;
          }
          uint64_t v12 = *(int **)v12;
        }
        while (v12);
        uint64_t v16 = (int *)v35;
        if (v11 != (int *)v35)
        {
          if (v15 < 3) {
            uint64_t v13 = v14;
          }
          if (v13[8] >= 4) {
            uint64_t v16 = (int *)v35;
          }
          else {
            uint64_t v16 = v11;
          }
        }
      }
      else
      {
        uint64_t v16 = (int *)v35;
      }
      sub_1C494AC4C((uint64_t)&v34, v35[0]);
      sub_1C494AC4C((uint64_t)&v36, v37[0]);
      if (v16 != (int *)v35) {
        goto LABEL_28;
      }
    }
    else
    {
      sub_1C494AC4C((uint64_t)&v36, v37[0]);
    }
    if (*(_DWORD *)(*((void *)a2 + 26) - 4) == 8)
    {
LABEL_30:
      *a3 = 0;
      float v17 = *((float *)this + 107);
      goto LABEL_55;
    }
    v33[0] = 0;
    v33[1] = 0;
    uint64_t v32 = v33;
    sub_1C4ACA4EC((uint64_t *)&v32, v38, v39);
    if (v33[0])
    {
      uint64_t v18 = (int *)v33;
      uint64_t v19 = (int *)v33[0];
      do
      {
        uint64_t v20 = v19;
        uint64_t v21 = v18;
        int v22 = v19[8];
        if (v22 >= 5) {
          uint64_t v18 = v19;
        }
        else {
          v19 += 2;
        }
        uint64_t v19 = *(int **)v19;
      }
      while (v19);
      if (v18 != (int *)v33)
      {
        if (v22 < 5) {
          uint64_t v20 = v21;
        }
        if (v20[8] <= 5)
        {
          sub_1C494AC4C((uint64_t)&v32, v33[0]);
          goto LABEL_30;
        }
      }
    }
    sub_1C494AC4C((uint64_t)&v32, v33[0]);
    v31[0] = 0;
    v31[1] = 0;
    uint64_t v30 = v31;
    sub_1C4ACA4EC((uint64_t *)&v30, v38, v39);
    if (!v31[0]) {
      goto LABEL_53;
    }
    uint64_t v23 = (int *)v31;
    uint64_t v24 = (int *)v31[0];
    do
    {
      uint64_t v25 = v24;
      uint64_t v26 = v23;
      int v27 = v24[8];
      if (v27 >= 4) {
        uint64_t v23 = v24;
      }
      else {
        v24 += 2;
      }
      uint64_t v24 = *(int **)v24;
    }
    while (v24);
    if (v23 == (int *)v31) {
      goto LABEL_53;
    }
    if (v27 < 4) {
      uint64_t v25 = v26;
    }
    if (v25[8] > 4)
    {
LABEL_53:
      sub_1C494AC4C((uint64_t)&v30, v31[0]);
    }
    else
    {
      int v28 = *((unsigned __int8 *)a2 + 196);
      sub_1C494AC4C((uint64_t)&v30, v31[0]);
      if (v28) {
        goto LABEL_30;
      }
    }
    *a3 = 1;
    float v17 = 0.0;
    goto LABEL_55;
  }
  sub_1C494AC4C((uint64_t)&v36, v37[0]);
LABEL_28:
  *a3 = 0;
  float v17 = *((float *)this + 106);
LABEL_55:
  sub_1C494AC4C((uint64_t)&v38, *(void **)v39);
  return v17;
}

void sub_1C4AB95F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
  sub_1C494AC4C((uint64_t)&a10, a11);
  sub_1C494AC4C(v11 - 88, *(void **)(v11 - 80));
  _Unwind_Resume(a1);
}

uint64_t sub_1C4AB9640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t *a6, CFTypeRef **a7, CFTypeRef **a8)
{
  id v13 = a5;
  *(void *)a1 = &unk_1F2010DD8;
  *(_OWORD *)(a1 + 8) = 0u;
  std::string::size_type v14 = (void *)(a1 + 8);
  *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v15 = a1 + 48;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_OWORD *)(a1 + 128) = 0u;
  uint64_t v58 = a1 + 128;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  id v16 = v13;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 168) = v16;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  sub_1C499E534((void *)(a1 + 176), *a7, a7[1], a7[1] - *a7);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  sub_1C499E534((void *)(a1 + 200), *a8, a8[1], a8[1] - *a8);
  *(void *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  sub_1C4ACA87C((char *)(a1 + 224), *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  uint64_t v59 = (int **)(a1 + 256);
  *(void *)(a1 + 248) = a1 + 256;
  float v17 = (uint64_t **)(a1 + 248);
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0xBD2E57BB3F067AD5;
  *(_DWORD *)(a1 + 280) = -1072083513;
  uint64_t v18 = *(uint64_t **)(a2 + 16);
  uint64_t v19 = a1;
  for (uint64_t i = a1 + 88; v18; v18 = (uint64_t *)*v18)
  {
    if (*((char *)v18 + 39) < 0)
    {
      sub_1C4949ADC(__p, (void *)v18[2], v18[3]);
    }
    else
    {
      *(_OWORD *)std::string __p = *((_OWORD *)v18 + 1);
      int64_t v61 = v18[4];
    }
    if (v61 >= 0) {
      uint64_t v21 = (void **)((char *)__p + HIBYTE(v61));
    }
    else {
      uint64_t v21 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
    }
    if (v61 >= 0) {
      int v22 = __p;
    }
    else {
      int v22 = (void **)__p[0];
    }
    for (; v22 != v21; int v22 = (void **)((char *)v22 + 1))
      *(unsigned char *)int v22 = __tolower(*(unsigned __int8 *)v22);
    sub_1C4ACA9B0((uint64_t)v14, (uint64_t)__p, (uint64_t)__p);
    if (SHIBYTE(v61) < 0) {
      operator delete(__p[0]);
    }
  }
  HIBYTE(v61) = 1;
  LOWORD(__p[0]) = 101;
  BOOL v23 = sub_1C4ACADD4(v14, (uint64_t)__p) != 0;
  *(unsigned char *)(v19 + 284) = v23;
  if (SHIBYTE(v61) < 0)
  {
    operator delete(__p[0]);
    if (!*(unsigned char *)(v19 + 284)) {
      goto LABEL_21;
    }
  }
  else if (!v23)
  {
LABEL_21:
    uint64_t v24 = (char *)operator new(0x28uLL);
    v24[39] = 1;
    *((_WORD *)v24 + 8) = 101;
    *(_OWORD *)uint64_t v24 = xmmword_1C4C43C20;
    sub_1C4ACB004(v14, (uint64_t)v24);
    if ((v25 & 1) == 0)
    {
      if (v24[39] < 0) {
        operator delete(*((void **)v24 + 2));
      }
      operator delete(v24);
    }
  }
  for (unint64_t j = *(uint64_t **)(a3 + 16); j; unint64_t j = (uint64_t *)*j)
  {
    if (*((char *)j + 39) < 0)
    {
      sub_1C4949ADC(__p, (void *)j[2], j[3]);
    }
    else
    {
      *(_OWORD *)std::string __p = *((_OWORD *)j + 1);
      int64_t v61 = j[4];
    }
    if (v61 >= 0) {
      int v27 = (void **)((char *)__p + HIBYTE(v61));
    }
    else {
      int v27 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
    }
    if (v61 >= 0) {
      int v28 = __p;
    }
    else {
      int v28 = (void **)__p[0];
    }
    for (; v28 != v27; int v28 = (void **)((char *)v28 + 1))
      *(unsigned char *)int v28 = __tolower(*(unsigned __int8 *)v28);
    sub_1C4ACA9B0(v15, (uint64_t)__p, (uint64_t)__p);
    if (SHIBYTE(v61) < 0) {
      operator delete(__p[0]);
    }
  }
  for (unint64_t k = *(uint64_t **)(a4 + 16); k; unint64_t k = (uint64_t *)*k)
  {
    if (*((char *)k + 39) < 0)
    {
      sub_1C4949ADC(__p, (void *)k[2], k[3]);
    }
    else
    {
      *(_OWORD *)std::string __p = *((_OWORD *)k + 1);
      int64_t v61 = k[4];
    }
    if (v61 >= 0) {
      uint64_t v30 = (void **)((char *)__p + HIBYTE(v61));
    }
    else {
      uint64_t v30 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
    }
    if (v61 >= 0) {
      uint64_t v31 = __p;
    }
    else {
      uint64_t v31 = (void **)__p[0];
    }
    for (; v31 != v30; uint64_t v31 = (void **)((char *)v31 + 1))
      *(unsigned char *)uint64_t v31 = __tolower(*(unsigned __int8 *)v31);
    sub_1C4ACA9B0(i, (uint64_t)__p, (uint64_t)__p);
    if (SHIBYTE(v61) < 0) {
      operator delete(__p[0]);
    }
  }
  id v57 = v16;
  uint64_t v32 = *(void *)(v19 + 224);
  if (*(void *)(v19 + 232) != v32)
  {
    uint64_t v33 = 0;
    unint64_t v34 = 0;
    do
    {
      __p[0] = (void *)(v32 + v33);
      *((_DWORD *)sub_1C494A238(v17, (const void **)(v32 + v33), (uint64_t)&unk_1C4C39B40, (long long **)__p) + 14) = v34++;
      uint64_t v32 = *(void *)(v19 + 224);
      v33 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v19 + 232) - v32) >> 3) > v34);
  }
  uint64_t v55 = v19;
  for (uint64_t m = 0; m != 9; ++m)
  {
    uint64_t v36 = off_1E64E36D0[m];
    size_t v37 = strlen(v36);
    if (v37 >= 0x7FFFFFFFFFFFFFF8) {
      sub_1C4949B7C();
    }
    uint64_t v38 = (void *)v37;
    if (v37 >= 0x17)
    {
      uint64_t v40 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v37 | 7) != 0x17) {
        uint64_t v40 = v37 | 7;
      }
      uint64_t v41 = v40 + 1;
      uint64_t v39 = operator new(v40 + 1);
      __p[1] = v38;
      int64_t v61 = v41 | 0x8000000000000000;
      __p[0] = v39;
LABEL_69:
      memmove(v39, v36, (size_t)v38);
      goto LABEL_70;
    }
    HIBYTE(v61) = v37;
    uint64_t v39 = __p;
    if (v37) {
      goto LABEL_69;
    }
LABEL_70:
    *((unsigned char *)v38 + (void)v39) = 0;
    uint64_t v42 = *v59;
    if (!*v59) {
LABEL_98:
    }
      sub_1C49470F0("map::at:  key not found");
    if (v61 >= 0) {
      uint64_t v43 = (void *)HIBYTE(v61);
    }
    else {
      uint64_t v43 = __p[1];
    }
    if (v61 >= 0) {
      uint64_t v44 = __p;
    }
    else {
      uint64_t v44 = (void **)__p[0];
    }
    while (1)
    {
      while (1)
      {
        int v45 = *((char *)v42 + 55);
        if (v45 >= 0) {
          size_t v46 = *((unsigned __int8 *)v42 + 55);
        }
        else {
          size_t v46 = *((void *)v42 + 5);
        }
        if (v45 >= 0) {
          uint64_t v47 = v42 + 8;
        }
        else {
          uint64_t v47 = (const void *)*((void *)v42 + 4);
        }
        if (v46 >= (unint64_t)v43) {
          size_t v48 = (size_t)v43;
        }
        else {
          size_t v48 = v46;
        }
        int v49 = memcmp(v44, v47, v48);
        BOOL v50 = (unint64_t)v43 < v46;
        if (v49) {
          BOOL v50 = v49 < 0;
        }
        if (!v50) {
          break;
        }
        uint64_t v42 = *(int **)v42;
        if (!v42) {
          goto LABEL_98;
        }
      }
      int v51 = memcmp(v47, v44, v48);
      BOOL v52 = v46 < (unint64_t)v43;
      if (v51) {
        BOOL v52 = v51 < 0;
      }
      if (!v52) {
        break;
      }
      uint64_t v42 = (int *)*((void *)v42 + 1);
      if (!v42) {
        goto LABEL_98;
      }
    }
    sub_1C4ACB434(v58, v42 + 14, v42 + 14);
    if (SHIBYTE(v61) < 0) {
      operator delete(__p[0]);
    }
  }

  return v55;
}

void sub_1C4AB9C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void **a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char **a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 + 39) < 0) {
    operator delete(*(void **)(v26 + 16));
  }
  operator delete((void *)v26);
  sub_1C4949DD4(v31, *a20);
  sub_1C4935DF0(a13);
  sub_1C4971B60(a15);
  sub_1C4971B60(a14);

  sub_1C498D2E0(a19);
  sub_1C49474AC(a18);
  sub_1C49474AC(v30);
  sub_1C49474AC(v28);

  _Unwind_Resume(a1);
}

uint64_t sub_1C4AB9DE4(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, uint64_t **a5, int a6)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  int v10 = *(_DWORD **)(a2 + 200);
  if (*(void *)(a2 + 208) - (void)v10 < 9uLL || *v10 != 1)
  {
    if (a6 >= 1) {
      goto LABEL_12;
    }
LABEL_8:
    uint64_t v12 = *a5;
    id v13 = a5[1];
    return sub_1C4ABA28C(a2 + 224, a3, a4, v12, v13);
  }
  if (v10[1] == 9 || a6 <= 0) {
    goto LABEL_8;
  }
LABEL_12:
  uint64_t v15 = *(void *)(a2 + 72);
  unint64_t v16 = (*(void *)(a2 + 80) - v15) >> 2;
  uint64_t v17 = *(unsigned __int8 *)(a2 + 247);
  if ((v17 & 0x80u) != 0) {
    uint64_t v17 = *(void *)(a2 + 232);
  }
  if (v17 + 2 >= v16) {
    return 0;
  }
  if (a3) {
    int v18 = -1;
  }
  else {
    int v18 = -2;
  }
  uint64_t v47 = v18 + *(unsigned __int8 *)(a2 + 196) + (int)v16;
  unint64_t v19 = *(int *)(v15 + 4 * (v47 - v17));
  char v52 = 1;
  __s1[0] = 92;
  uint64_t v20 = *(uint64_t **)(a1 + 256);
  if (!v20) {
LABEL_50:
  }
    sub_1C49470F0("map::at:  key not found");
  uint64_t v48 = a2 + 224;
  uint64_t v21 = *(uint64_t **)(a1 + 256);
  while (1)
  {
    while (1)
    {
      int v22 = *((char *)v21 + 55);
      if (v22 >= 0) {
        unint64_t v23 = *((unsigned __int8 *)v21 + 55);
      }
      else {
        unint64_t v23 = v21[5];
      }
      if (v22 >= 0) {
        uint64_t v24 = v21 + 4;
      }
      else {
        uint64_t v24 = (const void *)v21[4];
      }
      int v25 = memcmp(__s1, v24, v23 != 0);
      BOOL v26 = v23 > 1;
      if (v25) {
        BOOL v26 = v25 < 0;
      }
      if (!v26) {
        break;
      }
      uint64_t v21 = (uint64_t *)*v21;
      if (!v21) {
        goto LABEL_50;
      }
    }
    int v27 = memcmp(v24, __s1, v23 != 0);
    BOOL v28 = v23 == 0;
    if (v27) {
      BOOL v28 = v27 < 0;
    }
    if (!v28) {
      break;
    }
    uint64_t v21 = (uint64_t *)v21[1];
    if (!v21) {
      goto LABEL_50;
    }
  }
  int v56 = *((_DWORD *)v21 + 14);
  char v50 = 1;
  __s2[0] = 46;
  while (1)
  {
    while (1)
    {
      int v29 = *((char *)v20 + 55);
      if (v29 >= 0) {
        unint64_t v30 = *((unsigned __int8 *)v20 + 55);
      }
      else {
        unint64_t v30 = v20[5];
      }
      if (v29 >= 0) {
        uint64_t v31 = v20 + 4;
      }
      else {
        uint64_t v31 = (const void *)v20[4];
      }
      int v32 = memcmp(__s2, v31, v30 != 0);
      BOOL v33 = v30 > 1;
      if (v32) {
        BOOL v33 = v32 < 0;
      }
      if (!v33) {
        break;
      }
      uint64_t v20 = (uint64_t *)*v20;
      if (!v20) {
        goto LABEL_50;
      }
    }
    int v34 = memcmp(v31, __s2, v30 != 0);
    BOOL v35 = v30 == 0;
    if (v34) {
      BOOL v35 = v34 < 0;
    }
    if (!v35) {
      break;
    }
    uint64_t v20 = (uint64_t *)v20[1];
    if (!v20) {
      goto LABEL_50;
    }
  }
  int v57 = *((_DWORD *)v20 + 14);
  *(_OWORD *)uint64_t v53 = 0u;
  *(_OWORD *)std::string __p = 0u;
  int v55 = 1065353216;
  sub_1C4ACB434((uint64_t)v53, &v56, &v56);
  sub_1C4ACB434((uint64_t)v53, &v57, &v57);
  if (!v53[1]) {
    goto LABEL_71;
  }
  uint8x8_t v36 = (uint8x8_t)vcnt_s8((int8x8_t)v53[1]);
  v36.i16[0] = vaddlv_u8(v36);
  if (v36.u32[0] > 1uLL)
  {
    unint64_t v37 = v19;
    if (v53[1] <= (void *)v19) {
      unint64_t v37 = v19 % (unint64_t)v53[1];
    }
  }
  else
  {
    unint64_t v37 = ((unint64_t)v53[1] - 1) & v19;
  }
  uint64_t v38 = (uint64_t **)*((void *)v53[0] + v37);
  if (!v38 || (uint64_t v39 = *v38) == 0)
  {
LABEL_71:
    BOOL v42 = 0;
    uint64_t v43 = __p[0];
    if (!__p[0]) {
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v36.u32[0] < 2uLL)
  {
    while (1)
    {
      unint64_t v41 = v39[1];
      if (v41 == v19)
      {
        if (*((_DWORD *)v39 + 4) == v19) {
          goto LABEL_78;
        }
      }
      else if ((v41 & ((unint64_t)v53[1] - 1)) != v37)
      {
        goto LABEL_71;
      }
      uint64_t v39 = (uint64_t *)*v39;
      if (!v39) {
        goto LABEL_71;
      }
    }
  }
  while (1)
  {
    unint64_t v40 = v39[1];
    if (v40 == v19) {
      break;
    }
    if ((void *)v40 >= v53[1]) {
      v40 %= (unint64_t)v53[1];
    }
    if (v40 != v37) {
      goto LABEL_71;
    }
LABEL_61:
    uint64_t v39 = (uint64_t *)*v39;
    if (!v39) {
      goto LABEL_71;
    }
  }
  if (*((_DWORD *)v39 + 4) != v19) {
    goto LABEL_61;
  }
LABEL_78:
  uint64_t v46 = *(unsigned __int8 *)(a2 + 247);
  if ((v46 & 0x80u) != 0) {
    uint64_t v46 = *(void *)(a2 + 232);
  }
  BOOL v42 = *(void *)(*(void *)(a2 + 120) + 8 * (v47 + ~v46)) == 0x400000;
  uint64_t v43 = __p[0];
  if (__p[0])
  {
    do
    {
LABEL_72:
      uint64_t v44 = (void *)*v43;
      operator delete(v43);
      uint64_t v43 = v44;
    }
    while (v44);
  }
LABEL_73:
  int v45 = v53[0];
  v53[0] = 0;
  if (v45) {
    operator delete(v45);
  }
  if (v42) {
    return sub_1C4ABA28C(v48, a3, a4, *a5, a5[1]);
  }
  return 0;
}

void sub_1C4ABA250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *__p)
{
  uint64_t v20 = __p;
  if (__p)
  {
    do
    {
      uint64_t v21 = (void *)*v20;
      operator delete(v20);
      uint64_t v20 = v21;
    }
    while (v21);
  }
  if (!a17) {
    _Unwind_Resume(exception_object);
  }
  operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1C4ABA28C(uint64_t a1, uint64_t a2, float *a3, uint64_t *a4, uint64_t *a5)
{
  long long v5 = a4;
  uint64_t v6 = a3;
  if (a3) {
    *a3 = -INFINITY;
  }
  if (a4 == a5)
  {
    int v10 = 0;
    int v9 = 0;
  }
  else
  {
    int v9 = 0;
    int v10 = 0;
    CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      RootCursor = (const void *)LXLexiconCreateRootCursor();
      cf[1] = RootCursor;
      if (*(char *)(a1 + 23) >= 0) {
        uint64_t v12 = (const char *)a1;
      }
      else {
        uint64_t v12 = *(const char **)a1;
      }
      CFStringRef v13 = CFStringCreateWithCString(alloc, v12, 0x8000100u);
      sub_1C499CB34(cf, v13);
      std::string::size_type v14 = (const void *)LXCursorCreateByAdvancing();
      int v34 = v10;
      uint64_t v15 = v6;
      uint8x8_t v36 = v14;
      HasChildreunint64_t n = LXCursorHasChildren();
      uint64_t v20 = a2;
      if (a2) {
        v9 |= HasChildren != 0;
      }
      char v35 = 0;
      if (*(char *)(a1 + 23) >= 0) {
        objc_msgSend_stringWithCString_encoding_(NSString, v16, a1, 4, v17, v18, alloc);
      }
      else {
      uint64_t v21 = objc_msgSend_stringWithCString_encoding_(NSString, v16, *(void *)a1, 4, v17, v18, alloc);
      }
      objc_msgSend_lexiconHasEntryForString_withLexicon_outHasMatchingString_(CHLanguageUtilities, v22, (uint64_t)v21, *v5, (uint64_t)&v35, v23);

      a2 = v20;
      if (HasChildren) {
        int v24 = v20;
      }
      else {
        int v24 = 0;
      }
      BOOL v25 = v35 != 0;
      if (v35) {
        int v26 = 1;
      }
      else {
        int v26 = v24;
      }
      uint64_t v6 = v15;
      if (v15 && v26)
      {
        LXCursorConditionalProbability();
        double v28 = v27 / 0.434294482;
        unint64_t v29 = *(unsigned __int8 *)(a1 + 23);
        if ((v29 & 0x80u) != 0) {
          unint64_t v29 = *(void *)(a1 + 8);
        }
        float v30 = fmax(v28 / (double)v29, *v15);
        float *v15 = v30;
      }
      if (v14) {
        CFRelease(v14);
      }
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      if (RootCursor) {
        CFRelease(RootCursor);
      }
      int v10 = v34 | v25;
      ++v5;
    }
    while (v5 != a5);
  }
  return (a2 & v9 | v10) & 1;
}

void sub_1C4ABA4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  long long v5 = va_arg(va1, const void *);
  va_copy(va2, va1);
  id v7 = va_arg(va2, const void *);
  sub_1C499F660((const void **)va);
  sub_1C4989B6C((const void **)va1);
  sub_1C499F660((const void **)va2);
  _Unwind_Resume(a1);
}

void sub_1C4ABA4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1C499F660((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::ExpectedStringsBeamScorer::validStateForFullUnit(void **this, const CoreHandwriting::CHEncoderDecoderBeamState *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  int v9 = (unsigned char *)*((void *)a2 + 25);
  unint64_t v8 = (unsigned char *)*((void *)a2 + 26);
  int64_t v10 = v8 - v9;
  if (v8 == v9)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = -4;
    if (MEMORY[0xFFFFFFFFFFFFFFFC]) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t isCurrency = CoreHandwriting::ExpectedStringsBeamScorer::isCurrency(this, a2, a3, a4, a5, a6);
    goto LABEL_14;
  }
  if (v10 < 0) {
    sub_1C494A220();
  }
  uint64_t v11 = operator new(v8 - v9);
  uint64_t v12 = (uint64_t)v11 + 4 * (v10 >> 2);
  uint64_t v41 = (uint64_t)v11;
  uint64_t v43 = v12;
  memcpy(v11, v9, v10);
  uint64_t v13 = v12 - 4;
  if (!*(_DWORD *)(v12 - 4)) {
    goto LABEL_7;
  }
LABEL_4:
  std::string::size_type v14 = (char *)operator new(0x10uLL);
  *(_OWORD *)std::string::size_type v14 = xmmword_1C4C43C30;
  if (sub_1C4AB7C50((uint64_t)v11, v12, v14, v14 + 16))
  {
    operator delete(v14);
LABEL_13:
    uint64_t isCurrency = 1;
    goto LABEL_14;
  }
  unint64_t v16 = (char *)operator new(0x10uLL);
  *(_OWORD *)unint64_t v16 = xmmword_1C4C43C40;
  char v17 = sub_1C4AB7C50((uint64_t)v11, v12, v16, v16 + 16);
  operator delete(v16);
  operator delete(v14);
  if (v17) {
    goto LABEL_13;
  }
  uint64_t v42 = v13;
  uint64_t v18 = (char *)operator new(8uLL);
  *(void *)uint64_t v18 = 0x100000000;
  char v19 = sub_1C4AB7C50((uint64_t)v11, v13, v18, v18 + 8);
  operator delete(v18);
  if (v19) {
    goto LABEL_13;
  }
  uint64_t v20 = (char *)operator new(8uLL);
  *(void *)uint64_t v20 = 0x100000005;
  uint64_t v21 = v41;
  uint64_t v22 = v42;
  char v23 = sub_1C4AB7C50(v41, v42, v20, v20 + 8);
  operator delete(v20);
  if (v23) {
    goto LABEL_13;
  }
  int v24 = (char *)operator new(8uLL);
  *(void *)int v24 = 0x10000000ALL;
  char v25 = sub_1C4AB7C50(v21, v22, v24, v24 + 8);
  operator delete(v24);
  if (v25) {
    goto LABEL_13;
  }
  int v26 = (char *)operator new(8uLL);
  *(void *)int v26 = 0x100000007;
  char v27 = sub_1C4AB7C50(v21, v22, v26, v26 + 8);
  operator delete(v26);
  if (v27) {
    goto LABEL_13;
  }
  uint64_t v29 = *((unsigned __int8 *)a2 + 196) ^ 1;
  uint64_t v30 = *((void *)a2 + 15);
  unint64_t v31 = (*((void *)a2 + 16) - v30) >> 3;
  if (*((char *)a2 + 247) < 0)
  {
    uint64_t v32 = *((void *)a2 + 29);
  }
  else
  {
    uint64_t v32 = *((unsigned __int8 *)a2 + 247);
    uint64_t v29 = v29;
  }
  if (v31 > v32 + v29 && *(void *)(v30 + 8 * (v31 + ~v29 - v32)) == 16) {
    goto LABEL_13;
  }
  uint64_t v46 = 0xB00000001;
  int v47 = 1;
  sub_1C4AB84E4(&v39, &v46, 3uLL);
  char v33 = sub_1C4AB7C50(v21, v22, (char *)v39, v40);
  if ((v33 & 1) == 0)
  {
    uint64_t v44 = 0x300000001;
    int v45 = 1;
    sub_1C4AB84E4(&__p, &v44, 3uLL);
    if (!sub_1C4AB7C50(v21, v22, (char *)__p, v38))
    {
      uint64_t isCurrency = 0;
      goto LABEL_33;
    }
  }
  uint64_t v34 = *((void *)a2 + 15);
  unint64_t v35 = (*((void *)a2 + 16) - v34) >> 3;
  if (*((char *)a2 + 247) < 0) {
    uint64_t v36 = *((void *)a2 + 29);
  }
  else {
    uint64_t v36 = *((unsigned __int8 *)a2 + 247);
  }
  if (v35 > v29 + v36 + 2)
  {
    uint64_t isCurrency = *(void *)(v34 + 8 * (v35 - v29 - v36) - 16) == 64;
    if (v33) {
      goto LABEL_35;
    }
LABEL_33:
    if (__p)
    {
      uint64_t v38 = (char *)__p;
      operator delete(__p);
    }
    goto LABEL_35;
  }
  uint64_t isCurrency = 0;
  if ((v33 & 1) == 0) {
    goto LABEL_33;
  }
LABEL_35:
  if (v39)
  {
    unint64_t v40 = (char *)v39;
    operator delete(v39);
  }
LABEL_14:
  if (v11) {
    operator delete(v11);
  }
  return isCurrency;
}

void sub_1C4ABA8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v18 = a12;
    if (!a12)
    {
LABEL_3:
      if (!v16) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(v16);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v18 = a12;
    if (!a12) {
      goto LABEL_3;
    }
  }
  operator delete(v18);
  if (!v16) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t CoreHandwriting::ExpectedStringsBeamScorer::isCurrency(void **this, const CoreHandwriting::CHEncoderDecoderBeamState *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*((char *)a2 + 247) < 0)
  {
    sub_1C4949ADC(__p, *((void **)a2 + 28), *((void *)a2 + 29));
  }
  else
  {
    *(_OWORD *)std::string __p = *((_OWORD *)a2 + 14);
    uint64_t v32 = *((void *)a2 + 30);
  }
  if (v32 >= 0) {
    id v7 = (void **)((char *)__p + HIBYTE(v32));
  }
  else {
    id v7 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  }
  if (v32 >= 0) {
    unint64_t v8 = __p;
  }
  else {
    unint64_t v8 = (void **)__p[0];
  }
  for (; v8 != v7; unint64_t v8 = (void **)((char *)v8 + 1))
    *(unsigned char *)unint64_t v8 = __tolower(*(unsigned __int8 *)v8);
  uint64_t v12 = objc_msgSend_root(this[21], (const char *)a2, a3, a4, a5, a6, __p[0]);
  if (v32 >= 0) {
    objc_msgSend_stringWithCString_encoding_(NSString, v9, (uint64_t)__p, 4, v10, v11);
  }
  else {
  uint64_t v13 = objc_msgSend_stringWithCString_encoding_(NSString, v9, (uint64_t)__p[0], 4, v10, v11);
  }
  uint64_t v18 = objc_msgSend_objectForKeyedSubscript_(v12, v14, (uint64_t)v13, v15, v16, v17);

  if (v18 && objc_msgSend_isMatch(v18, v19, v20, v21, v22, v23))
  {
    uint64_t v29 = objc_msgSend_containsCurrency(v18, v24, v25, v26, v27, v28);

    if (SHIBYTE(v32) < 0)
    {
LABEL_18:
      operator delete(__p[0]);
      return v29;
    }
  }
  else
  {
    uint64_t v29 = 0;

    if (SHIBYTE(v32) < 0) {
      goto LABEL_18;
    }
  }
  return v29;
}

void sub_1C4ABAAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v16 = v15;

  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL CoreHandwriting::ExpectedStringsBeamScorer::validStateForUnitPrefix(CoreHandwriting::ExpectedStringsBeamScorer *this, const CoreHandwriting::CHEncoderDecoderBeamState *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)a2 + 26);
  if (*(_DWORD *)(v2 - 4) != 1) {
    return 0;
  }
  uint64_t v4 = (char *)operator new(8uLL);
  *(void *)uint64_t v4 = 0x100000000;
  char v5 = sub_1C4AB7C50(*((void *)a2 + 25), v2, v4, v4 + 8);
  operator delete(v4);
  if ((v5 & 1) == 0)
  {
    unint64_t v8 = (char *)operator new(8uLL);
    *(void *)unint64_t v8 = 0x100000005;
    char v9 = sub_1C4AB7C50(*((void *)a2 + 25), *((void *)a2 + 26), v8, v8 + 8);
    operator delete(v8);
    BOOL v6 = 1;
    if (v9) {
      return v6;
    }
    uint64_t v10 = operator new(0xCuLL);
    *(void *)uint64_t v10 = 0x130000000ELL;
    *((_DWORD *)v10 + 2) = 1;
    if (sub_1C4AB7C50(*((void *)a2 + 25), *((void *)a2 + 26), (char *)v10, (char *)v10 + 12))
    {
LABEL_8:
      operator delete(v10);
      return v6;
    }
    uint64_t v11 = (char *)operator new(0xCuLL);
    *(void *)uint64_t v11 = 0x130000000FLL;
    *((_DWORD *)v11 + 2) = 1;
    if (sub_1C4AB7C50(*((void *)a2 + 25), *((void *)a2 + 26), v11, v11 + 12))
    {
      operator delete(v11);
      operator delete(v10);
      return 1;
    }
    uint64_t v12 = (char *)operator new(8uLL);
    *(void *)uint64_t v12 = 0x10000000ALL;
    char v13 = sub_1C4AB7C50(*((void *)a2 + 25), *((void *)a2 + 26), v12, v12 + 8);
    operator delete(v12);
    operator delete(v11);
    operator delete(v10);
    if (v13) {
      return 1;
    }
    uint64_t v14 = *((void *)a2 + 15);
    unint64_t v15 = (*((void *)a2 + 16) - v14) >> 3;
    unint64_t v16 = *((char *)a2 + 247) < 0 ? *((void *)a2 + 29) : *((unsigned __int8 *)a2 + 247);
    if (v15 > v16 && *(void *)(v14 + 8 * (v15 + ~v16)) == 16) {
      return 1;
    }
    uint64_t v17 = (char *)operator new(8uLL);
    *(void *)uint64_t v17 = 0x100000007;
    char v18 = sub_1C4AB7C50(*((void *)a2 + 25), *((void *)a2 + 26), v17, v17 + 8);
    operator delete(v17);
    BOOL v6 = 1;
    if (v18) {
      return v6;
    }
    uint64_t v10 = operator new(0xCuLL);
    *(void *)uint64_t v10 = 0xB00000001;
    *((_DWORD *)v10 + 2) = 1;
    char v19 = sub_1C4AB7C50(*((void *)a2 + 25), *((void *)a2 + 26), (char *)v10, (char *)v10 + 12);
    if ((v19 & 1) != 0
      || (uint64_t v25 = 0x300000001,
          int v26 = 1,
          sub_1C4AB84E4(&__p, &v25, 3uLL),
          sub_1C4AB7C50(*((void *)a2 + 25), *((void *)a2 + 26), (char *)__p, v24)))
    {
      uint64_t v20 = *((void *)a2 + 15);
      unint64_t v21 = (*((void *)a2 + 16) - v20) >> 3;
      if (*((char *)a2 + 247) < 0) {
        uint64_t v22 = *((void *)a2 + 29);
      }
      else {
        uint64_t v22 = *((unsigned __int8 *)a2 + 247);
      }
      if (v21 <= v22 + 2)
      {
        BOOL v6 = 0;
        if (v19) {
          goto LABEL_8;
        }
      }
      else
      {
        BOOL v6 = *(void *)(v20 + 8 * (v21 - v22) - 16) == 64;
        if (v19) {
          goto LABEL_8;
        }
      }
    }
    else
    {
      BOOL v6 = 0;
    }
    if (__p)
    {
      int v24 = (char *)__p;
      operator delete(__p);
    }
    goto LABEL_8;
  }
  return 1;
}

void sub_1C4ABAE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
  {
    operator delete(__p);
    operator delete(v10);
    _Unwind_Resume(a1);
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::ExpectedStringsBeamScorer::isFullUnit(void **this, const CoreHandwriting::CHEncoderDecoderBeamState *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6 = a3;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  int valid = CoreHandwriting::ExpectedStringsBeamScorer::validStateForFullUnit(this, a2, a3, a4, a5, a6);
  uint64_t isCurrency = 0;
  if (v6 <= 1 && valid)
  {
    if (v6 != 1) {
      goto LABEL_32;
    }
    uint64_t v16 = *((unsigned __int8 *)a2 + 247);
    if ((v16 & 0x80u) != 0) {
      uint64_t v16 = *((void *)a2 + 29);
    }
    unint64_t v17 = *(void *)(*((void *)a2 + 15) + 8 * (~v16 + ((*((void *)a2 + 16) - *((void *)a2 + 15)) >> 3)));
    long long v46 = xmmword_1C4C43C50;
    *(_OWORD *)uint64_t v43 = 0u;
    *(_OWORD *)std::string __p = 0u;
    int v45 = 1065353216;
    sub_1C4AA1490((uint64_t)v43, (unint64_t *)&v46, &v46);
    sub_1C4AA1490((uint64_t)v43, (unint64_t *)&v46 + 1, (void *)&v46 + 1);
    if (!v43[1]) {
      goto LABEL_26;
    }
    uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)v43[1]);
    v18.i16[0] = vaddlv_u8(v18);
    if (v18.u32[0] > 1uLL)
    {
      unint64_t v19 = v17;
      if (v43[1] <= (void *)v17) {
        unint64_t v19 = v17 % (unint64_t)v43[1];
      }
    }
    else
    {
      unint64_t v19 = ((unint64_t)v43[1] - 1) & v17;
    }
    uint64_t v20 = (void *)*((void *)v43[0] + v19);
    if (v20)
    {
      unint64_t v21 = (void *)*v20;
      if (*v20)
      {
        if (v18.u32[0] < 2uLL)
        {
          while (1)
          {
            unint64_t v23 = v21[1];
            if (v23 == v17)
            {
              if (v21[2] == v17) {
                goto LABEL_27;
              }
            }
            else if ((v23 & ((unint64_t)v43[1] - 1)) != v19)
            {
              goto LABEL_26;
            }
            unint64_t v21 = (void *)*v21;
            if (!v21) {
              goto LABEL_27;
            }
          }
        }
        do
        {
          unint64_t v22 = v21[1];
          if (v22 == v17)
          {
            if (v21[2] == v17) {
              break;
            }
          }
          else
          {
            if ((void *)v22 >= v43[1]) {
              v22 %= (unint64_t)v43[1];
            }
            if (v22 != v19) {
              goto LABEL_26;
            }
          }
          unint64_t v21 = (void *)*v21;
        }
        while (v21);
      }
    }
    else
    {
LABEL_26:
      unint64_t v21 = 0;
    }
LABEL_27:
    int v24 = __p[0];
    if (__p[0])
    {
      do
      {
        uint64_t v25 = (void *)*v24;
        operator delete(v24);
        int v24 = v25;
      }
      while (v25);
    }
    int v26 = v43[0];
    v43[0] = 0;
    if (v26) {
      operator delete(v26);
    }
    if (!v21)
    {
      return 0;
    }
    else
    {
LABEL_32:
      uint64_t v30 = objc_msgSend_root(this[21], v10, v11, v12, v13, v14, v43[0]);
      if (*((char *)a2 + 247) >= 0) {
        objc_msgSend_stringWithCString_encoding_(NSString, v27, (uint64_t)a2 + 224, 4, v28, v29);
      }
      else {
      unint64_t v31 = objc_msgSend_stringWithCString_encoding_(NSString, v27, *((void *)a2 + 28), 4, v28, v29);
      }
      uint64_t v36 = objc_msgSend_objectForKeyedSubscript_(v30, v32, (uint64_t)v31, v33, v34, v35);

      if (v36 && (objc_msgSend_isMatch(v36, v37, v38, v39, v40, v41) & 1) != 0) {
        uint64_t isCurrency = 1;
      }
      else {
        uint64_t isCurrency = CoreHandwriting::ExpectedStringsBeamScorer::isCurrency(this, a2, v38, v39, v40, v41);
      }
    }
  }
  return isCurrency;
}

void sub_1C4ABB1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *__p)
{
  _Unwind_Resume(a1);
}

BOOL CoreHandwriting::ExpectedStringsBeamScorer::isUnitPrefix(void **this, const CoreHandwriting::CHEncoderDecoderBeamState *a2, char a3, int a4)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  BOOL valid = CoreHandwriting::ExpectedStringsBeamScorer::validStateForUnitPrefix((CoreHandwriting::ExpectedStringsBeamScorer *)this, a2);
  BOOL v14 = 0;
  if (a4 <= 1 && valid)
  {
    if (a4 != 1) {
      goto LABEL_32;
    }
    uint64_t v15 = *((unsigned __int8 *)a2 + 247);
    if ((v15 & 0x80u) != 0) {
      uint64_t v15 = *((void *)a2 + 29);
    }
    unint64_t v16 = *(void *)(*((void *)a2 + 15) + 8 * (~v15 + ((*((void *)a2 + 16) - *((void *)a2 + 15)) >> 3)));
    long long __dst = xmmword_1C4C43C50;
    *(_OWORD *)uint64_t v39 = 0u;
    *(_OWORD *)std::string __p = 0u;
    int v41 = 1065353216;
    sub_1C4AA1490((uint64_t)v39, (unint64_t *)&__dst, &__dst);
    sub_1C4AA1490((uint64_t)v39, (unint64_t *)&__dst + 1, (void *)&__dst + 1);
    if (!v39[1]) {
      goto LABEL_26;
    }
    uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v39[1]);
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] > 1uLL)
    {
      unint64_t v18 = v16;
      if (v39[1] <= (void *)v16) {
        unint64_t v18 = v16 % (unint64_t)v39[1];
      }
    }
    else
    {
      unint64_t v18 = ((unint64_t)v39[1] - 1) & v16;
    }
    unint64_t v19 = (void *)*((void *)v39[0] + v18);
    if (v19)
    {
      uint64_t v20 = (void *)*v19;
      if (*v19)
      {
        if (v17.u32[0] < 2uLL)
        {
          while (1)
          {
            unint64_t v22 = v20[1];
            if (v22 == v16)
            {
              if (v20[2] == v16) {
                goto LABEL_27;
              }
            }
            else if ((v22 & ((unint64_t)v39[1] - 1)) != v18)
            {
              goto LABEL_26;
            }
            uint64_t v20 = (void *)*v20;
            if (!v20) {
              goto LABEL_27;
            }
          }
        }
        do
        {
          unint64_t v21 = v20[1];
          if (v21 == v16)
          {
            if (v20[2] == v16) {
              break;
            }
          }
          else
          {
            if ((void *)v21 >= v39[1]) {
              v21 %= (unint64_t)v39[1];
            }
            if (v21 != v18) {
              goto LABEL_26;
            }
          }
          uint64_t v20 = (void *)*v20;
        }
        while (v20);
      }
    }
    else
    {
LABEL_26:
      uint64_t v20 = 0;
    }
LABEL_27:
    unint64_t v23 = __p[0];
    if (__p[0])
    {
      do
      {
        int v24 = (void *)*v23;
        operator delete(v23);
        unint64_t v23 = v24;
      }
      while (v24);
    }
    uint64_t v25 = v39[0];
    v39[0] = 0;
    if (v25) {
      operator delete(v25);
    }
    if (!v20)
    {
      return 0;
    }
    else
    {
LABEL_32:
      if (*((char *)a2 + 247) < 0)
      {
        sub_1C4949ADC(v39, *((void **)a2 + 28), *((void *)a2 + 29));
      }
      else
      {
        *(_OWORD *)uint64_t v39 = *((_OWORD *)a2 + 14);
        __p[0] = *((void **)a2 + 30);
      }
      if ((a3 & 1) == 0)
      {
        if (SHIBYTE(__p[0]) < 0)
        {
          sub_1C4949ADC(&__dst, v39[0], (unint64_t)v39[1]);
        }
        else
        {
          long long __dst = *(_OWORD *)v39;
          uint64_t v43 = __p[0];
        }
        if (SHIBYTE(v43) >= 0) {
          int v26 = (long long *)((char *)&__dst + HIBYTE(v43));
        }
        else {
          int v26 = (long long *)(__dst + *((void *)&__dst + 1));
        }
        if (SHIBYTE(v43) >= 0) {
          p_dst = &__dst;
        }
        else {
          p_dst = (long long *)__dst;
        }
        for (; p_dst != v26; p_dst = (long long *)((char *)p_dst + 1))
          *(unsigned char *)p_dst = __tolower(*(unsigned __int8 *)p_dst);
        if (SHIBYTE(__p[0]) < 0) {
          operator delete(v39[0]);
        }
        *(_OWORD *)uint64_t v39 = __dst;
        __p[0] = v43;
      }
      unint64_t v31 = objc_msgSend_root(this[21], v9, v10, v11, v12, v13, v39[0], v39[1], __p[0]);
      if (SHIBYTE(__p[0]) >= 0) {
        objc_msgSend_stringWithCString_encoding_(NSString, v28, (uint64_t)v39, 4, v29, v30);
      }
      else {
      uint64_t v32 = objc_msgSend_stringWithCString_encoding_(NSString, v28, (uint64_t)v39[0], 4, v29, v30);
      }
      unint64_t v37 = objc_msgSend_objectForKeyedSubscript_(v31, v33, (uint64_t)v32, v34, v35, v36);

      BOOL v14 = v37 != 0;
      if (SHIBYTE(__p[0]) < 0) {
        operator delete(v39[0]);
      }
    }
  }
  return v14;
}

void sub_1C4ABB564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL CoreHandwriting::ExpectedStringsBeamScorer::isCurrencyUnitPrefix(void **this, const CoreHandwriting::CHEncoderDecoderBeamState *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *((void *)a2 + 26);
  if (*(_DWORD *)(v6 - 4) != 1) {
    return 0;
  }
  uint64_t v9 = *((void *)a2 + 25);
  uint64_t v10 = v6 - v9;
  if (v10 != 4)
  {
    if ((unint64_t)v10 < 5) {
      return 0;
    }
    unint64_t v11 = *(unsigned int *)(v9 + 4 * (v10 >> 2) - 8);
    *(_OWORD *)uint64_t v35 = 0u;
    *(_OWORD *)std::string __p = 0u;
    int v37 = 1065353216;
    sub_1C4AC9A08((float *)v35, 3u, 3);
    sub_1C4AC9A08((float *)v35, 9u, 9);
    sub_1C4AC9A08((float *)v35, 0xBu, 11);
    sub_1C4AC9A08((float *)v35, 6u, 6);
    if (!v35[1]) {
      goto LABEL_24;
    }
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v35[1]);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v13 = v11;
      if (v35[1] <= (void *)v11) {
        unint64_t v13 = v11 % (unint64_t)v35[1];
      }
    }
    else
    {
      unint64_t v13 = (LODWORD(v35[1]) - 1) & v11;
    }
    BOOL v14 = (uint64_t **)*((void *)v35[0] + v13);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            unint64_t v17 = v15[1];
            if (v17 == v11)
            {
              if (*((_DWORD *)v15 + 4) == v11) {
                goto LABEL_25;
              }
            }
            else if ((v17 & ((unint64_t)v35[1] - 1)) != v13)
            {
              goto LABEL_24;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v11)
          {
            if (*((_DWORD *)v15 + 4) == v11) {
              break;
            }
          }
          else
          {
            if ((void *)v16 >= v35[1]) {
              v16 %= (unint64_t)v35[1];
            }
            if (v16 != v13) {
              goto LABEL_24;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
    else
    {
LABEL_24:
      uint64_t v15 = 0;
    }
LABEL_25:
    unint64_t v18 = __p[0];
    if (__p[0])
    {
      do
      {
        unint64_t v19 = (void *)*v18;
        operator delete(v18);
        unint64_t v18 = v19;
      }
      while (v19);
    }
    uint64_t v20 = v35[0];
    v35[0] = 0;
    if (v20) {
      operator delete(v20);
    }
    if (!v15) {
      return 0;
    }
  }
  int v24 = objc_msgSend_root(this[21], (const char *)a2, a3, a4, a5, a6, v35[0]);
  uint64_t v27 = *((void *)a2 + 28);
  int v26 = (char *)a2 + 224;
  uint64_t v25 = v27;
  if (v26[23] >= 0) {
    objc_msgSend_stringWithCString_encoding_(NSString, v21, (uint64_t)v26, 4, v22, v23);
  }
  else {
  uint64_t v28 = objc_msgSend_stringWithCString_encoding_(NSString, v21, v25, 4, v22, v23);
  }
  uint64_t v33 = objc_msgSend_objectForKeyedSubscript_(v24, v29, (uint64_t)v28, v30, v31, v32);

  return v33 != 0;
}

void sub_1C4ABB824(_Unwind_Exception *a1)
{
  uint64_t v3 = v1;

  _Unwind_Resume(a1);
}

void sub_1C4ABB83C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4ABB84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *__p)
{
  uint8x8_t v12 = __p;
  if (__p)
  {
    do
    {
      unint64_t v13 = (void *)*v12;
      operator delete(v12);
      uint8x8_t v12 = v13;
    }
    while (v13);
  }
  if (a9) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::ExpectedStringsBeamScorer::getStringDecodingWithSubscripts(CoreHandwriting::ExpectedStringsBeamScorer *this@<X0>, const CoreHandwriting::CHEncoderDecoderBeamState *a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  uint64_t v6 = (char *)operator new(8uLL);
  *(void *)uint64_t v6 = 0xC00000001;
  int v7 = sub_1C4AB7C50(*((void *)a2 + 25), *((void *)a2 + 26), v6, v6 + 8);
  operator delete(v6);
  if (v7)
  {
    uint64_t v8 = (*((void *)a2 + 10) - *((void *)a2 + 9)) >> 2;
    if ((int)v8 >= 2)
    {
      uint64_t v9 = (v8 - 2);
      uint64_t v10 = MEMORY[0x1E4F14390];
      while (1)
      {
        unint64_t v11 = (char **)(*((void *)this + 28) + 24 * *(int *)(*((void *)a2 + 9) + 4 * v9));
        int v12 = *((char *)v11 + 23);
        if (v12 < 0)
        {
          if (v11[1] != (char *)1) {
            return;
          }
          unsigned int v13 = **v11;
          if ((v13 & 0x80000000) == 0)
          {
LABEL_7:
            int v14 = *(_DWORD *)(v10 + 4 * v13 + 60) & 0x100;
            goto LABEL_11;
          }
        }
        else
        {
          if (v12 != 1) {
            return;
          }
          unsigned int v13 = *(char *)v11;
          if ((v13 & 0x80000000) == 0) {
            goto LABEL_7;
          }
        }
        int v14 = __maskrune(v13, 0x100uLL);
LABEL_11:
        if (v14)
        {
          int v15 = *((char *)v11 + 23);
          unint64_t v16 = v15 >= 0 ? (const std::string::value_type *)v11 : *v11;
          std::string::size_type v17 = v15 >= 0 ? *((unsigned __int8 *)v11 + 23) : (std::string::size_type)v11[1];
          std::string::insert(a3, 0, v16, v17);
          if (v9-- > 0) {
            continue;
          }
        }
        return;
      }
    }
    return;
  }
  unint64_t v19 = (char *)operator new(0x10uLL);
  *(_OWORD *)unint64_t v19 = xmmword_1C4C43C60;
  if (sub_1C4AB7C50(*((void *)a2 + 25), *((void *)a2 + 26), v19, v19 + 16))
  {
    operator delete(v19);
  }
  else
  {
    uint64_t v20 = operator new(0x14uLL);
    *((_DWORD *)v20 + 4) = 20;
    *(_OWORD *)uint64_t v20 = xmmword_1C4C43CD4;
    int v21 = sub_1C4AB7C50(*((void *)a2 + 25), *((void *)a2 + 26), (char *)v20, (char *)v20 + 20);
    operator delete(v20);
    operator delete(v19);
    if (!v21) {
      return;
    }
  }
  uint64_t v22 = (*((void *)a2 + 10) - *((void *)a2 + 9)) >> 2;
  if (*(_DWORD *)(*((void *)a2 + 26) - 4) == 20) {
    int v23 = -2;
  }
  else {
    int v23 = -1;
  }
  if (v23 + (int)v22 >= 0)
  {
    int v24 = 0;
    int v25 = v23 + v22 + 1;
    uint64_t v26 = 4 * (v23 + v22);
    do
    {
      uint64_t v30 = (const std::string *)(*((void *)this + 28) + 24 * *(int *)(*((void *)a2 + 9) + v26));
      int v31 = SHIBYTE(v30->__r_.__value_.__r.__words[2]);
      if (v31 < 0)
      {
        if (v30->__r_.__value_.__l.__size_ != 1) {
          goto LABEL_48;
        }
        unsigned int v32 = *v30->__r_.__value_.__l.__data_;
        if ((v32 & 0x80000000) == 0)
        {
LABEL_40:
          int v33 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v32 + 60) & 0x100;
          goto LABEL_44;
        }
      }
      else
      {
        if (v31 != 1) {
          goto LABEL_48;
        }
        unsigned int v32 = v30->__r_.__value_.__s.__data_[0];
        if ((v32 & 0x80000000) == 0) {
          goto LABEL_40;
        }
      }
      int v33 = __maskrune(v32, 0x100uLL);
LABEL_44:
      if (v33) {
        BOOL v34 = (v24 & 0xFFFFFFFD) == 0;
      }
      else {
        BOOL v34 = 0;
      }
      if (v34)
      {
        int v27 = SHIBYTE(v30->__r_.__value_.__r.__words[2]);
        if (v27 >= 0) {
          uint64_t v28 = (const std::string::value_type *)v30;
        }
        else {
          uint64_t v28 = (const std::string::value_type *)v30->__r_.__value_.__r.__words[0];
        }
        if (v27 >= 0) {
          std::string::size_type size = HIBYTE(v30->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v30->__r_.__value_.__l.__size_;
        }
        std::string::insert(a3, 0, v28, size);
        goto LABEL_36;
      }
LABEL_48:
      if (v24 == 1)
      {
        if (std::string::compare(v30, "_")) {
          return;
        }
        int v24 = 2;
      }
      else
      {
        if (v24 || std::string::compare(v30, "{")) {
          return;
        }
        int v24 = 1;
      }
LABEL_36:
      --v25;
      v26 -= 4;
    }
    while (v25 > 0);
  }
}

void sub_1C4ABBB7C(_Unwind_Exception *a1)
{
  operator delete(v3);
  operator delete(v2);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

BOOL CoreHandwriting::ExpectedStringsBeamScorer::isCurrencySymbol(CoreHandwriting::ExpectedStringsBeamScorer *this, int a2)
{
  unint64_t v2 = *((void *)this + 17);
  if (!v2)
  {
    char v5 = 0;
    return v5 != 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  char v5 = *(uint64_t **)(*((void *)this + 16) + 8 * v4);
  if (!v5) {
    return v5 != 0;
  }
  char v5 = (uint64_t *)*v5;
  if (!v5) {
    return v5 != 0;
  }
  if (v3.u32[0] >= 2uLL)
  {
    do
    {
      unint64_t v8 = v5[1];
      if (v8 == a2)
      {
        if (*((_DWORD *)v5 + 4) == a2) {
          return v5 != 0;
        }
      }
      else
      {
        if (v8 >= v2) {
          v8 %= v2;
        }
        if (v8 != v4) {
          return 0;
        }
      }
      char v5 = (uint64_t *)*v5;
    }
    while (v5);
    return v5 != 0;
  }
  unint64_t v7 = v2 - 1;
  while (1)
  {
    uint64_t v9 = v5[1];
    if (v9 == a2)
    {
      if (*((_DWORD *)v5 + 4) == a2) {
        return v5 != 0;
      }
      goto LABEL_20;
    }
    if ((v9 & v7) != v4) {
      return 0;
    }
LABEL_20:
    char v5 = (uint64_t *)*v5;
    if (!v5) {
      return v5 != 0;
    }
  }
}

uint64_t sub_1C4ABBCC8(void *a1, uint64_t a2, void *a3)
{
  uint64_t result = (uint64_t)sub_1C4946A5C(a1 + 11, a2);
  if (!result) {
    return result;
  }
  uint64_t v7 = a3[9];
  unint64_t v8 = (a3[10] - v7) >> 2;
  uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  if (v8 > v9 + 3)
  {
    uint64_t v10 = a3[15];
    if (*(void *)(v10 + 8 * v8 - 8) == 0x2000)
    {
      uint64_t v11 = v8 - v9 - 2;
      if (*(void *)(v10 + 8 * v11) == 0x2000)
      {
LABEL_7:
        uint64_t v12 = *(void *)(v10 + 8 * (v8 - v9) - 24);
        uint64_t result = 1;
        if (v12 == 64 || v12 == 128) {
          return result;
        }
      }
      else
      {
        int8x8_t v13 = (int8x8_t)a1[17];
        if (v13)
        {
          unint64_t v14 = *(int *)(v7 + 4 * v11);
          uint8x8_t v15 = (uint8x8_t)vcnt_s8(v13);
          v15.i16[0] = vaddlv_u8(v15);
          if (v15.u32[0] > 1uLL)
          {
            unint64_t v16 = v14;
            if (*(void *)&v13 <= v14) {
              unint64_t v16 = v14 % *(void *)&v13;
            }
          }
          else
          {
            unint64_t v16 = (*(void *)&v13 - 1) & v14;
          }
          std::string::size_type v17 = *(uint64_t ***)(a1[16] + 8 * v16);
          if (v17)
          {
            unint64_t v18 = *v17;
            if (v18)
            {
              if (v15.u32[0] < 2uLL)
              {
                uint64_t v19 = *(void *)&v13 - 1;
                while (1)
                {
                  uint64_t v21 = v18[1];
                  if (v21 == v14)
                  {
                    if (*((_DWORD *)v18 + 4) == v14) {
                      goto LABEL_7;
                    }
                  }
                  else if ((v21 & v19) != v16)
                  {
                    goto LABEL_30;
                  }
                  unint64_t v18 = (uint64_t *)*v18;
                  if (!v18) {
                    goto LABEL_30;
                  }
                }
              }
              do
              {
                unint64_t v20 = v18[1];
                if (v20 == v14)
                {
                  if (*((_DWORD *)v18 + 4) == v14) {
                    goto LABEL_7;
                  }
                }
                else
                {
                  if (v20 >= *(void *)&v13) {
                    v20 %= *(void *)&v13;
                  }
                  if (v20 != v16) {
                    break;
                  }
                }
                unint64_t v18 = (uint64_t *)*v18;
              }
              while (v18);
            }
          }
        }
      }
    }
  }
LABEL_30:
  if (v8 <= v9 + 2) {
    return 0;
  }
  int8x8_t v22 = (int8x8_t)a1[17];
  if (!*(void *)&v22) {
    return 0;
  }
  unint64_t v23 = *(int *)(v7 + 4 * v8 - 4);
  uint8x8_t v24 = (uint8x8_t)vcnt_s8(v22);
  v24.i16[0] = vaddlv_u8(v24);
  if (v24.u32[0] > 1uLL)
  {
    unint64_t v25 = *(int *)(v7 + 4 * v8 - 4);
    if (*(void *)&v22 <= v23) {
      unint64_t v25 = v23 % *(void *)&v22;
    }
  }
  else
  {
    unint64_t v25 = (*(void *)&v22 - 1) & v23;
  }
  uint64_t v26 = a1[16];
  int v27 = *(uint64_t ***)(v26 + 8 * v25);
  if (!v27) {
    return 0;
  }
  uint64_t v28 = *v27;
  if (!*v27) {
    return 0;
  }
  uint64_t v29 = *(void *)&v22 - 1;
  if (v24.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v30 = v28[1];
      if (v30 == v23)
      {
        if (*((_DWORD *)v28 + 4) == v23) {
          goto LABEL_52;
        }
      }
      else if ((v30 & v29) != v25)
      {
        return 0;
      }
      uint64_t result = 0;
      uint64_t v28 = (uint64_t *)*v28;
      if (!v28) {
        return result;
      }
    }
  }
  while (1)
  {
    unint64_t v31 = v28[1];
    if (v31 == v23) {
      break;
    }
    if (v31 >= *(void *)&v22) {
      v31 %= *(void *)&v22;
    }
    if (v31 != v25) {
      return 0;
    }
LABEL_46:
    uint64_t result = 0;
    uint64_t v28 = (uint64_t *)*v28;
    if (!v28) {
      return result;
    }
  }
  if (*((_DWORD *)v28 + 4) != v23) {
    goto LABEL_46;
  }
LABEL_52:
  uint64_t v32 = v8 - v9 - 2;
  if (*(void *)(a3[15] + 8 * v32) == 0x2000) {
    return 1;
  }
  unint64_t v33 = *(int *)(v7 + 4 * v32);
  if (v24.u32[0] > 1uLL)
  {
    unint64_t v34 = v33;
    if (*(void *)&v22 <= v33) {
      unint64_t v34 = v33 % *(void *)&v22;
    }
  }
  else
  {
    unint64_t v34 = v29 & v33;
  }
  uint64_t v35 = *(uint64_t ***)(v26 + 8 * v34);
  if (v35)
  {
    uint64_t v36 = *v35;
    if (v36)
    {
      if (v24.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v37 = v36[1];
          if (v37 == v33)
          {
            if (*((_DWORD *)v36 + 4) == v33) {
              return 1;
            }
          }
          else if ((v37 & v29) != v34)
          {
            return 0;
          }
          uint64_t result = 0;
          uint64_t v36 = (uint64_t *)*v36;
          if (!v36) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v38 = v36[1];
        if (v38 == v33)
        {
          if (*((_DWORD *)v36 + 4) == v33) {
            return 1;
          }
        }
        else
        {
          if (v38 >= *(void *)&v22) {
            v38 %= *(void *)&v22;
          }
          if (v38 != v34) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint64_t v36 = (uint64_t *)*v36;
        if (!v36) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t CoreHandwriting::ExpectedStringsBeamScorer::checkVariablePrefixWithSubscript(CoreHandwriting::ExpectedStringsBeamScorer *this, const CoreHandwriting::CHEncoderDecoderBeamState *a2)
{
  CoreHandwriting::ExpectedStringsBeamScorer::getStringDecodingWithSubscripts(this, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    sub_1C4949ADC(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = __p;
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint8x8_t v3 = (std::string *)((char *)&__dst + HIBYTE(__dst.__r_.__value_.__r.__words[2]));
  }
  else {
    uint8x8_t v3 = (std::string *)(__dst.__r_.__value_.__r.__words[0] + __dst.__r_.__value_.__l.__size_);
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_dst = &__dst;
  }
  else {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  for (; p_dst != v3; p_dst = (std::string *)((char *)p_dst + 1))
    p_dst->__r_.__value_.__s.__data_[0] = __tolower(p_dst->__r_.__value_.__s.__data_[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    int v6 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    if (!size) {
      goto LABEL_36;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    int v6 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    if (!size) {
      goto LABEL_36;
    }
  }
  uint64_t v7 = (uint64_t *)*((void *)this + 3);
  if (v7)
  {
    unint64_t v8 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if (v6 >= 0) {
      unint64_t v8 = &__dst;
    }
    do
    {
      std::string::size_type v9 = *((unsigned __int8 *)v7 + 39);
      int v10 = (char)v9;
      if ((v9 & 0x80u) != 0) {
        std::string::size_type v9 = v7[3];
      }
      if (size <= v9)
      {
        if (v10 >= 0) {
          uint64_t v11 = (unsigned __int8 *)(v7 + 2);
        }
        else {
          uint64_t v11 = (unsigned __int8 *)v7[2];
        }
        std::string::size_type v12 = size;
        int8x8_t v13 = v8;
        while (v13->__r_.__value_.__s.__data_[0] == *v11)
        {
          int8x8_t v13 = (std::string *)((char *)v13 + 1);
          ++v11;
          if (!--v12)
          {
            uint64_t v14 = 1;
            if ((v6 & 0x80000000) == 0) {
              return v14;
            }
            goto LABEL_35;
          }
        }
      }
      uint64_t v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
LABEL_36:
  uint64_t v14 = 0;
  if ((v6 & 0x80000000) == 0) {
    return v14;
  }
LABEL_35:
  operator delete(__dst.__r_.__value_.__l.__data_);
  return v14;
}

void sub_1C4ABC1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a15 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::ExpectedStringsBeamScorer::normalizeStringCase(CoreHandwriting::ExpectedStringsBeamScorer *this, CoreHandwriting::CHEncoderDecoderBeamState *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (!a4) {
    return;
  }
  unint64_t v8 = (char ***)(*((void *)this + 28) + 24 * *(int *)(*((void *)a2 + 9) + 4 * a3));
  int v9 = *((char *)v8 + 23);
  if (v9 < 0)
  {
    if (v8[1] == (char **)1)
    {
      unsigned int v10 = *(char *)*v8;
      if ((v10 & 0x80000000) == 0)
      {
LABEL_5:
        if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v10 + 60) & 0x1000) != 0) {
          goto LABEL_6;
        }
        goto LABEL_12;
      }
LABEL_11:
      if (__maskrune(v10, 0x1000uLL))
      {
LABEL_6:
        BOOL v11 = 0;
        int v12 = 1;
        uint64_t v13 = v4 - 1;
        if (v4 != 1) {
          goto LABEL_20;
        }
LABEL_17:
        int v16 = v11;
        BOOL v17 = v11;
        goto LABEL_43;
      }
LABEL_12:
      if (*((char *)v8 + 23) < 0) {
        unint64_t v8 = (char ***)*v8;
      }
      unsigned int v14 = *(char *)v8;
      if ((v14 & 0x80000000) != 0) {
        int v15 = __maskrune(v14, 0x8000uLL);
      }
      else {
        int v15 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v14 + 60) & 0x8000;
      }
      int v12 = 0;
      BOOL v11 = v15 != 0;
      uint64_t v13 = v4 - 1;
      if (v4 != 1) {
        goto LABEL_20;
      }
      goto LABEL_17;
    }
  }
  else if (v9 == 1)
  {
    unsigned int v10 = *(char *)v8;
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
  BOOL v11 = 0;
  int v12 = 0;
  uint64_t v13 = a4 - 1;
  if (a4 == 1) {
    goto LABEL_17;
  }
LABEL_20:
  int v16 = v11;
  uint64_t v18 = 4 * v5 + 4;
  uint64_t v19 = MEMORY[0x1E4F14390];
  BOOL v70 = v11;
  do
  {
    unint64_t v20 = (char **)(*((void *)this + 28) + 24 * *(int *)(*((void *)a2 + 9) + v18));
    int v21 = *((char *)v20 + 23);
    if (v21 < 0)
    {
      if (v20[1] != (char *)1) {
        goto LABEL_22;
      }
      unsigned int v22 = **v20;
      if ((v22 & 0x80000000) == 0)
      {
LABEL_26:
        if ((*(_DWORD *)(v19 + 4 * v22 + 60) & 0x1000) != 0) {
          goto LABEL_21;
        }
        goto LABEL_31;
      }
    }
    else
    {
      if (v21 != 1) {
        goto LABEL_22;
      }
      unsigned int v22 = *(char *)v20;
      if ((v22 & 0x80000000) == 0) {
        goto LABEL_26;
      }
    }
    if (__maskrune(v22, 0x1000uLL))
    {
LABEL_21:
      ++v12;
      goto LABEL_22;
    }
LABEL_31:
    if (*((char *)v20 + 23) < 0)
    {
      unsigned int v23 = **v20;
      if ((v23 & 0x80000000) == 0)
      {
LABEL_33:
        int v24 = *(_DWORD *)(v19 + 4 * v23 + 60) & 0x8000;
        goto LABEL_36;
      }
    }
    else
    {
      unsigned int v23 = *(char *)v20;
      if ((v23 & 0x80000000) == 0) {
        goto LABEL_33;
      }
    }
    int v24 = __maskrune(v23, 0x8000uLL);
LABEL_36:
    if (v24) {
      ++v16;
    }
LABEL_22:
    v18 += 4;
    --v13;
  }
  while (v13);
  uint64_t v5 = a3;
  LOBYTE(v11) = v70;
  BOOL v17 = v16 == 1 && v70;
  if (v4)
  {
LABEL_43:
    if (v12 >= 1 && v16 >= 1 && !v17)
    {
      char v25 = v16 == v12 && v11;
      if (v16 > v12) {
        char v25 = 1;
      }
      uint64_t v71 = v4;
      uint64_t v26 = 0;
      if ((v25 & 1) == 0)
      {
        while (1)
        {
          uint64_t v49 = v26 + v5;
          uint64_t v50 = *((void *)this + 28) + 24 * *(int *)(*((void *)a2 + 9) + 4 * (v26 + v5));
          if (*(char *)(v50 + 23) < 0)
          {
            sub_1C4949ADC(&__dst, *(void **)v50, *(void *)(v50 + 8));
            int v52 = SHIBYTE(v74);
            if ((SHIBYTE(v74) & 0x80000000) == 0)
            {
LABEL_101:
              if (v52 != 1) {
                goto LABEL_98;
              }
              p_dst = (char *)&__dst;
              goto LABEL_105;
            }
          }
          else
          {
            long long v51 = *(_OWORD *)v50;
            uint64_t v74 = *(void *)(v50 + 16);
            long long __dst = v51;
            int v52 = SHIBYTE(v74);
            if ((SHIBYTE(v74) & 0x80000000) == 0) {
              goto LABEL_101;
            }
          }
          p_dst = (char *)__dst;
          if (*((void *)&__dst + 1) != 1) {
            goto LABEL_97;
          }
LABEL_105:
          unsigned int v54 = *p_dst;
          if ((v54 & 0x80000000) != 0)
          {
            int v55 = __maskrune(v54, 0x8000uLL);
            LOBYTE(v52) = HIBYTE(v74);
            if (!v55)
            {
LABEL_107:
              if ((v52 & 0x80) == 0) {
                goto LABEL_98;
              }
LABEL_140:
              p_dst = (char *)__dst;
LABEL_97:
              operator delete(p_dst);
              goto LABEL_98;
            }
          }
          else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v54 + 60) & 0x8000) == 0)
          {
            goto LABEL_107;
          }
          BOOL v34 = (v52 & 0x80u) != 0;
          int v56 = (char *)&__dst;
          if (v34) {
            int v56 = (char *)__dst;
          }
          char v57 = __tolower(*v56);
          uint64_t v58 = &__dst;
          if (v74 < 0) {
            uint64_t v58 = (long long *)__dst;
          }
          *(unsigned char *)uint64_t v58 = v57;
          uint64_t v59 = (uint64_t *)*((void *)this + 32);
          if (!v59) {
            goto LABEL_142;
          }
          if (v74 >= 0) {
            size_t v60 = HIBYTE(v74);
          }
          else {
            size_t v60 = *((void *)&__dst + 1);
          }
          if (v74 >= 0) {
            int64_t v61 = &__dst;
          }
          else {
            int64_t v61 = (long long *)__dst;
          }
          while (1)
          {
            while (1)
            {
              int v62 = *((char *)v59 + 55);
              if (v62 >= 0) {
                size_t v63 = *((unsigned __int8 *)v59 + 55);
              }
              else {
                size_t v63 = v59[5];
              }
              if (v62 >= 0) {
                size_t v64 = v59 + 4;
              }
              else {
                size_t v64 = (const void *)v59[4];
              }
              if (v63 >= v60) {
                size_t v65 = v60;
              }
              else {
                size_t v65 = v63;
              }
              int v66 = memcmp(v61, v64, v65);
              BOOL v67 = v60 < v63;
              if (v66) {
                BOOL v67 = v66 < 0;
              }
              if (!v67) {
                break;
              }
              uint64_t v59 = (uint64_t *)*v59;
              if (!v59) {
                goto LABEL_142;
              }
            }
            int v68 = memcmp(v64, v61, v65);
            BOOL v69 = v63 < v60;
            if (v68) {
              BOOL v69 = v68 < 0;
            }
            if (!v69) {
              break;
            }
            uint64_t v59 = (uint64_t *)v59[1];
            if (!v59) {
              goto LABEL_142;
            }
          }
          *(_DWORD *)(*((void *)a2 + 9) + 4 * v49) = *((_DWORD *)v59 + 14);
          uint64_t v4 = v71;
          uint64_t v5 = a3;
          if (v74 < 0) {
            goto LABEL_140;
          }
LABEL_98:
          if (++v26 == v4) {
            return;
          }
        }
      }
      while (2)
      {
        uint64_t v27 = v26 + v5;
        uint64_t v28 = *((void *)this + 28) + 24 * *(int *)(*((void *)a2 + 9) + 4 * (v26 + v5));
        if (*(char *)(v28 + 23) < 0)
        {
          sub_1C4949ADC(&__dst, *(void **)v28, *(void *)(v28 + 8));
          int v30 = SHIBYTE(v74);
          if (SHIBYTE(v74) < 0) {
            goto LABEL_60;
          }
LABEL_57:
          if (v30 == 1)
          {
            unint64_t v31 = (char *)&__dst;
            goto LABEL_61;
          }
          goto LABEL_54;
        }
        long long v29 = *(_OWORD *)v28;
        uint64_t v74 = *(void *)(v28 + 16);
        long long __dst = v29;
        int v30 = SHIBYTE(v74);
        if ((SHIBYTE(v74) & 0x80000000) == 0) {
          goto LABEL_57;
        }
LABEL_60:
        unint64_t v31 = (char *)__dst;
        if (*((void *)&__dst + 1) == 1)
        {
LABEL_61:
          unsigned int v32 = *v31;
          if ((v32 & 0x80000000) == 0)
          {
            if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v32 + 60) & 0x1000) == 0) {
              goto LABEL_63;
            }
LABEL_66:
            BOOL v34 = (v30 & 0x80u) != 0;
            uint64_t v35 = (char *)&__dst;
            if (v34) {
              uint64_t v35 = (char *)__dst;
            }
            char v36 = __toupper(*v35);
            uint64_t v37 = &__dst;
            if (v74 < 0) {
              uint64_t v37 = (long long *)__dst;
            }
            *(unsigned char *)uint64_t v37 = v36;
            unint64_t v38 = (uint64_t *)*((void *)this + 32);
            if (!v38) {
LABEL_142:
            }
              sub_1C49470F0("map::at:  key not found");
            if (v74 >= 0) {
              size_t v39 = HIBYTE(v74);
            }
            else {
              size_t v39 = *((void *)&__dst + 1);
            }
            if (v74 >= 0) {
              uint64_t v40 = &__dst;
            }
            else {
              uint64_t v40 = (long long *)__dst;
            }
            while (1)
            {
              while (1)
              {
                int v41 = *((char *)v38 + 55);
                if (v41 >= 0) {
                  size_t v42 = *((unsigned __int8 *)v38 + 55);
                }
                else {
                  size_t v42 = v38[5];
                }
                if (v41 >= 0) {
                  uint64_t v43 = v38 + 4;
                }
                else {
                  uint64_t v43 = (const void *)v38[4];
                }
                if (v42 >= v39) {
                  size_t v44 = v39;
                }
                else {
                  size_t v44 = v42;
                }
                int v45 = memcmp(v40, v43, v44);
                BOOL v46 = v39 < v42;
                if (v45) {
                  BOOL v46 = v45 < 0;
                }
                if (!v46) {
                  break;
                }
                unint64_t v38 = (uint64_t *)*v38;
                if (!v38) {
                  goto LABEL_142;
                }
              }
              int v47 = memcmp(v43, v40, v44);
              BOOL v48 = v42 < v39;
              if (v47) {
                BOOL v48 = v47 < 0;
              }
              if (!v48) {
                break;
              }
              unint64_t v38 = (uint64_t *)v38[1];
              if (!v38) {
                goto LABEL_142;
              }
            }
            *(_DWORD *)(*((void *)a2 + 9) + 4 * v27) = *((_DWORD *)v38 + 14);
            uint64_t v4 = v71;
            uint64_t v5 = a3;
            if (v74 < 0) {
              goto LABEL_96;
            }
LABEL_54:
            if (++v26 == v4) {
              return;
            }
            continue;
          }
          int v33 = __maskrune(v32, 0x1000uLL);
          LOBYTE(v30) = HIBYTE(v74);
          if (v33) {
            goto LABEL_66;
          }
LABEL_63:
          if ((v30 & 0x80) == 0) {
            goto LABEL_54;
          }
LABEL_96:
          unint64_t v31 = (char *)__dst;
        }
        break;
      }
      operator delete(v31);
      goto LABEL_54;
    }
  }
}

void sub_1C4ABC814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float CoreHandwriting::ExpectedStringsBeamScorer::evaluateCompleteString(CoreHandwriting::ExpectedStringsBeamScorer *this, CoreHandwriting::CHEncoderDecoderBeamState *a2, BOOL *a3, uint64_t a4)
{
  v76[1] = *MEMORY[0x1E4F143B8];
  uint64_t v74 = a3;
  uint64_t v7 = (std::string *)((char *)a2 + 224);
  if ((*((char *)a2 + 247) & 0x80000000) == 0)
  {
    if (*((unsigned char *)a2 + 247))
    {
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = *((void *)a2 + 30);
      goto LABEL_6;
    }
LABEL_26:
    *a3 = 1;
    return 0.0;
  }
  if (!*((void *)a2 + 29)) {
    goto LABEL_26;
  }
  sub_1C4949ADC(&__dst, v7->__r_.__value_.__l.__data_, *((void *)a2 + 29));
LABEL_6:
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v8 = (std::string *)((char *)&__dst + HIBYTE(__dst.__r_.__value_.__r.__words[2]));
  }
  else {
    unint64_t v8 = (std::string *)(__dst.__r_.__value_.__r.__words[0] + __dst.__r_.__value_.__l.__size_);
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_dst = &__dst;
  }
  else {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  for (; p_dst != v8; p_dst = (std::string *)((char *)p_dst + 1))
    p_dst->__r_.__value_.__s.__data_[0] = __tolower(p_dst->__r_.__value_.__s.__data_[0]);
  unint64_t v10 = *((unsigned __int8 *)a2 + 247);
  if ((v10 & 0x80u) != 0) {
    unint64_t v10 = *((void *)a2 + 29);
  }
  v71[3] = this;
  unint64_t v72 = v10;
  v71[0] = &v74;
  v71[1] = &v72;
  v71[2] = a2;
  if (sub_1C4946A5C((void *)this + 1, (uint64_t)&__dst)) {
    goto LABEL_29;
  }
  CoreHandwriting::ExpectedStringsBeamScorer::getStringDecodingWithSubscripts(this, a2, &__p);
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size && sub_1C4946A5C((void *)this + 1, (uint64_t)&__p))
  {
    int v12 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_22;
    }
  }
  else
  {
    int v12 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_22:
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v12) {
        goto LABEL_23;
      }
      goto LABEL_29;
    }
  }
  if (!v12)
  {
LABEL_23:
    if (sub_1C4946A5C((void *)this + 6, (uint64_t)&__dst))
    {
      *uint64_t v74 = 1;
      unint64_t v16 = v72 - *((unsigned __int8 *)a2 + 196) + 1;
      if (v72)
      {
        memset_pattern16((void *)(*((void *)a2 + 16) - 8 * v16), &unk_1C4C43C80, 8 * v72);
        unint64_t v17 = v72;
      }
      else
      {
        unint64_t v17 = 0;
      }
LABEL_58:
      CoreHandwriting::ExpectedStringsBeamScorer::normalizeStringCase(this, a2, ((uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 2) - v16, v17);
      goto LABEL_43;
    }
    if (!a4 && sub_1C4ABBCC8(this, (uint64_t)&__dst, a2))
    {
      *uint64_t v74 = 1;
      unint64_t v16 = v72 - *((unsigned __int8 *)a2 + 196) + 1;
      if (v72)
      {
        memset_pattern16((void *)(*((void *)a2 + 16) - 8 * v16), &unk_1C4C43C90, 8 * v72);
        unint64_t v17 = v72;
      }
      else
      {
        unint64_t v17 = 0;
      }
      goto LABEL_58;
    }
    if (CoreHandwriting::ExpectedStringsBeamScorer::isFullUnit((void **)this, a2, a4, v13, v14, v15))
    {
      int isCurrency = CoreHandwriting::ExpectedStringsBeamScorer::isCurrency((void **)this, a2, v32, v33, v34, v35);
      unint64_t v37 = 128;
      if (!isCurrency) {
        unint64_t v37 = 64;
      }
      *uint64_t v74 = 1;
      unint64_t v38 = v72;
      uint64_t v39 = *((unsigned __int8 *)a2 + 196);
      unint64_t v40 = v72 - v39 + 1;
      if (!v72)
      {
        unint64_t v48 = 0;
LABEL_81:
        CoreHandwriting::ExpectedStringsBeamScorer::normalizeStringCase(this, a2, ((uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 2) - v40, v48);
        goto LABEL_43;
      }
      uint64_t v41 = *((void *)a2 + 16);
      size_t v42 = (unint64_t *)(v41 - 8 * v40);
      if (v72 >= 4)
      {
        unint64_t v49 = v72 & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v43 = v72 & 3;
        v42 += v72 & 0xFFFFFFFFFFFFFFFCLL;
        int64x2_t v50 = vdupq_n_s64(v37);
        long long v51 = (int64x2_t *)(v41 - 8 * v72 + 8 * v39 + 8);
        unint64_t v52 = v72 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v51[-1] = v50;
          *long long v51 = v50;
          v51 += 2;
          v52 -= 4;
        }
        while (v52);
        if (v38 == v49) {
          goto LABEL_80;
        }
      }
      else
      {
        unint64_t v43 = v72;
      }
      do
      {
        *v42++ = v37;
        --v43;
      }
      while (v43);
LABEL_80:
      unint64_t v48 = v72;
      goto LABEL_81;
    }
    if (*((char *)a2 + 247) < 0) {
      sub_1C4949ADC(&__p, *((void **)a2 + 28), *((void *)a2 + 29));
    }
    else {
      std::string __p = *v7;
    }
    BOOL v46 = (unsigned char *)*((void *)a2 + 15);
    size_t v44 = (unsigned char *)*((void *)a2 + 16);
    int v45 = (void **)((char *)a2 + 120);
    int v68 = 0;
    BOOL v69 = 0;
    BOOL v70 = 0;
    int64_t v47 = v44 - v46;
    if (v44 != v46)
    {
      if (v47 < 0) {
        sub_1C494A220();
      }
      int v68 = operator new(v44 - v46);
      BOOL v70 = (char *)v68 + 8 * (v47 >> 3);
      memcpy(v68, v46, v47);
      BOOL v69 = v70;
    }
    if (CoreHandwriting::ExpectedStringsBeamScorer::evaluateConcatenationOfStrings(this, a2, 1u))
    {
      CoreHandwriting::ExpectedStringsBeamScorer::evaluateCompleteString(this, a2, v74, a4 + 1);
      if (*v74)
      {
LABEL_74:
        float v18 = *((float *)this + 68);
        goto LABEL_121;
      }
      std::string::operator=(v7, &__p);
      if (v45 != &v68) {
        sub_1C494ACB0((void *)a2 + 15, (char *)v68, v69, (v69 - (unsigned char *)v68) >> 3);
      }
    }
    if (!*((unsigned char *)a2 + 196)
      && CoreHandwriting::ExpectedStringsBeamScorer::isMultiwordUnitPrefix(this, a2, a4))
    {
      *uint64_t v74 = 1;
      float v18 = *((float *)this + 69);
      goto LABEL_121;
    }
    if (CoreHandwriting::ExpectedStringsBeamScorer::evaluateConcatenationOfLexiconString((uint64_t **)this, a2, 1))
    {
      CoreHandwriting::ExpectedStringsBeamScorer::evaluateCompleteString(this, a2, v74, a4 + 1);
      if (*v74) {
        goto LABEL_74;
      }
      std::string::operator=(v7, &__p);
      if (v45 != &v68) {
        sub_1C494ACB0((void *)a2 + 15, (char *)v68, v69, (v69 - (unsigned char *)v68) >> 3);
      }
    }
    float v67 = 0.0;
    if (v72 < 2 || (sub_1C4AB9DE4((uint64_t)this, (uint64_t)a2, 0, &v67, (uint64_t **)this + 22, a4) & 1) == 0)
    {
      uint64_t v53 = (_DWORD *)*((void *)a2 + 25);
      unint64_t v54 = *((void *)a2 + 26) - (void)v53;
      if (v54 < 9)
      {
        if (v54 != 4 || *v53 != 1) {
          goto LABEL_95;
        }
      }
      else if (*v53 != 1 || v53[1] != 9)
      {
        goto LABEL_95;
      }
      if (!sub_1C4ABA28C((uint64_t)v7, 0, &v67, *((uint64_t **)this + 25), *((uint64_t **)this + 26)))
      {
LABEL_95:
        if (a4) {
          goto LABEL_96;
        }
        v76[0] = 0x900000001;
        sub_1C4AB84E4(&v65, v76, 2uLL);
        uint64_t v57 = *((void *)a2 + 25);
        uint64_t v56 = *((void *)a2 + 26);
        if (v56 - v57 == v66 - (unsigned char *)v65)
        {
          if (v57 == v56)
          {
            BOOL v61 = 1;
          }
          else
          {
            uint64_t v58 = v57 + 4;
            uint64_t v59 = (int *)v65;
            do
            {
              int v60 = *v59++;
              BOOL v61 = *(_DWORD *)(v58 - 4) == v60;
              BOOL v62 = *(_DWORD *)(v58 - 4) != v60 || v58 == v56;
              v58 += 4;
            }
            while (!v62);
          }
        }
        else
        {
          BOOL v61 = 0;
        }
        if (v65)
        {
          int v66 = (char *)v65;
          operator delete(v65);
        }
        if (v61)
        {
          *uint64_t v74 = 1;
          uint64_t v63 = *((void *)a2 + 10) - *((void *)a2 + 9);
          if (v63 != 4) {
            memset_pattern16(*v45, &unk_1C4C43CA0, 2 * v63 - 8);
          }
          float v18 = -1.1562;
          goto LABEL_121;
        }
        v76[0] = 0xC00000001;
        sub_1C4AB84E4(&v65, v76, 2uLL);
        if (sub_1C4AB7C50(*((void *)a2 + 25), *((void *)a2 + 26), (char *)v65, v66)) {
          int v64 = CoreHandwriting::ExpectedStringsBeamScorer::checkVariablePrefixWithSubscript(this, a2);
        }
        else {
          int v64 = 0;
        }
        if (v65)
        {
          int v66 = (char *)v65;
          operator delete(v65);
        }
        if (!v64)
        {
LABEL_96:
          *uint64_t v74 = 0;
          float v18 = *((float *)this + 70);
        }
        else
        {
          *uint64_t v74 = 1;
          float v18 = 0.0;
        }
LABEL_121:
        if (v68)
        {
          BOOL v69 = (char *)v68;
          operator delete(v68);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_44;
      }
    }
    sub_1C4ABD0D4((uint64_t)v71);
    float v55 = expf(v67);
    float v18 = log(v55 + 1.0) * 1.36904;
    goto LABEL_121;
  }
LABEL_29:
  if (!std::string::compare(&__dst, "e"))
  {
    unint64_t v19 = 16;
    if (!*((unsigned char *)this + 284)) {
      unint64_t v19 = 32;
    }
  }
  else
  {
    unint64_t v19 = 16;
  }
  *uint64_t v74 = 1;
  unint64_t v20 = v72;
  uint64_t v21 = *((unsigned __int8 *)a2 + 196);
  unint64_t v22 = v72 - v21 + 1;
  if (v72)
  {
    uint64_t v23 = *((void *)a2 + 16);
    int v24 = (unint64_t *)(v23 - 8 * v22);
    if (v72 >= 4)
    {
      unint64_t v27 = v72 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v25 = v72 & 3;
      v24 += v72 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v28 = vdupq_n_s64(v19);
      long long v29 = (int64x2_t *)(v23 - 8 * v72 + 8 * v21 + 8);
      unint64_t v30 = v72 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v29[-1] = v28;
        *long long v29 = v28;
        v29 += 2;
        v30 -= 4;
      }
      while (v30);
      if (v20 == v27) {
        goto LABEL_41;
      }
    }
    else
    {
      unint64_t v25 = v72;
    }
    do
    {
      *v24++ = v19;
      --v25;
    }
    while (v25);
LABEL_41:
    unint64_t v26 = v72;
    goto LABEL_42;
  }
  unint64_t v26 = 0;
LABEL_42:
  CoreHandwriting::ExpectedStringsBeamScorer::normalizeStringCase(this, a2, ((uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 2) - v22, v26);
LABEL_43:
  float v18 = *((float *)this + 68);
LABEL_44:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  return v18;
}

void sub_1C4ABD02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a13)
  {
    operator delete(a13);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_7:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(__p);
  if ((a26 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_8:
  operator delete(a21);
  goto LABEL_9;
}

void sub_1C4ABD0D4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  ***(unsigned char ***)a1 = 1;
  uint64_t v2 = *(void *)(a1 + 16);
  uint8x8_t v3 = *(CoreHandwriting::ExpectedStringsBeamScorer **)(a1 + 24);
  uint64_t v4 = *v1 - *(unsigned __int8 *)(v2 + 196) + 1;
  if (*v1)
  {
    memset_pattern16((void *)(*(void *)(v2 + 128) - 8 * v4), &unk_1C4C43CB0, 8 * *v1);
    uint64_t v5 = *v1;
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = ((uint64_t)(*(void *)(v2 + 80) - *(void *)(v2 + 72)) >> 2) - v4;
  CoreHandwriting::ExpectedStringsBeamScorer::normalizeStringCase(v3, (CoreHandwriting::CHEncoderDecoderBeamState *)v2, v6, v5);
}

uint64_t CoreHandwriting::ExpectedStringsBeamScorer::evaluateConcatenationOfStrings(CoreHandwriting::ExpectedStringsBeamScorer *this, CoreHandwriting::CHEncoderDecoderBeamState *a2, unsigned int a3)
{
  uint64_t v6 = (void **)((char *)a2 + 224);
  if (*((char *)a2 + 247) < 0)
  {
    unint64_t v7 = *((void *)a2 + 29);
    if (v7 >= 2)
    {
      sub_1C4949ADC(&v35, *v6, v7);
      goto LABEL_7;
    }
    return 0;
  }
  if (*((unsigned __int8 *)a2 + 247) < 2u) {
    return 0;
  }
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)v6;
  v35.__r_.__value_.__r.__words[2] = *((void *)a2 + 30);
LABEL_7:
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v9 = (std::string *)((char *)&v35 + HIBYTE(v35.__r_.__value_.__r.__words[2]));
  }
  else {
    int v9 = (std::string *)(v35.__r_.__value_.__r.__words[0] + v35.__r_.__value_.__l.__size_);
  }
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v10 = &v35;
  }
  else {
    unint64_t v10 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  for (; v10 != v9; unint64_t v10 = (std::string *)((char *)v10 + 1))
    v10->__r_.__value_.__s.__data_[0] = __tolower(v10->__r_.__value_.__s.__data_[0]);
  unint64_t v11 = 256;
  while (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v35.__r_.__value_.__l.__size_)
    {
      uint64_t v8 = 0;
      goto LABEL_73;
    }
    --v35.__r_.__value_.__l.__size_;
    *(unsigned char *)(v35.__r_.__value_.__r.__words[0] + v35.__r_.__value_.__l.__size_) = 0;
    if (sub_1C4946A5C((void *)this + 1, (uint64_t)&v35)) {
      goto LABEL_33;
    }
LABEL_22:
    CoreHandwriting::ExpectedStringsBeamScorer::getStringDecodingWithSubscripts(this, a2, &__p);
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size && sub_1C4946A5C((void *)this + 1, (uint64_t)&__p))
    {
      int v14 = 1;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_29;
      }
    }
    else
    {
      int v14 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_29:
      }
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v14) {
      goto LABEL_33;
    }
    if (sub_1C4946A5C((void *)this + 6, (uint64_t)&v35)) {
      goto LABEL_38;
    }
  }
  if (!*((unsigned char *)&v35.__r_.__value_.__s + 23)) {
    return 0;
  }
  uint64_t v12 = HIBYTE(v35.__r_.__value_.__r.__words[2]) - 1;
  --*((unsigned char *)&v35.__r_.__value_.__s + 23);
  v35.__r_.__value_.__s.__data_[v12] = 0;
  if (!sub_1C4946A5C((void *)this + 1, (uint64_t)&v35)) {
    goto LABEL_22;
  }
LABEL_33:
  if (!std::string::compare(&v35, "e"))
  {
    if (*((unsigned char *)this + 284)) {
      unint64_t v11 = 16;
    }
    else {
      unint64_t v11 = 32;
    }
  }
  else
  {
    unint64_t v11 = 16;
  }
LABEL_38:
  std::string::size_type v15 = *((unsigned __int8 *)a2 + 247);
  char v16 = *((unsigned char *)a2 + 247);
  std::string::size_type v17 = *((void *)a2 + 29);
  std::string::size_type v18 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  char v19 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  std::string::size_type v20 = v35.__r_.__value_.__l.__size_;
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v21 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v21 = v35.__r_.__value_.__l.__size_;
  }
  if (v21)
  {
    if ((v15 & 0x80u) == 0) {
      std::string::size_type v17 = *((unsigned __int8 *)a2 + 247);
    }
    unint64_t v22 = *((void *)a2 + 16) - 8 * v17 + 8 * (*((unsigned __int8 *)a2 + 196) - (unint64_t)a3);
    if (v21 < 4)
    {
      std::string::size_type v23 = v21;
      int v24 = (unint64_t *)v22;
      goto LABEL_49;
    }
    std::string::size_type v23 = v21 & 3;
    int v24 = (unint64_t *)(v22 + 8 * (v21 & 0xFFFFFFFFFFFFFFFCLL));
    int64x2_t v25 = vdupq_n_s64(v11);
    unint64_t v26 = (int64x2_t *)(v22 + 16);
    unint64_t v27 = v21 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v26[-1] = v25;
      int64x2_t *v26 = v25;
      v26 += 2;
      v27 -= 4;
    }
    while (v27);
    if (v21 != (v21 & 0xFFFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_49:
        *v24++ = v11;
        --v23;
      }
      while (v23);
    }
    std::string::size_type v15 = *((unsigned __int8 *)a2 + 247);
    std::string::size_type v17 = *((void *)a2 + 29);
    std::string::size_type v18 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    std::string::size_type v20 = v35.__r_.__value_.__l.__size_;
    char v19 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    char v16 = *((unsigned char *)a2 + 247);
  }
  if (v16 >= 0) {
    std::string::size_type v28 = v15;
  }
  else {
    std::string::size_type v28 = v17;
  }
  if (v19 < 0) {
    std::string::size_type v18 = v20;
  }
  std::string::size_type v29 = v28 - v18;
  if ((v16 & 0x80) == 0)
  {
    unint64_t v30 = (char *)v6;
    if (v29 <= v15)
    {
      if (v29 < 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_59;
      }
LABEL_71:
      sub_1C4949B7C();
    }
LABEL_75:
    sub_1C49470D8();
  }
  if (v17 < v29) {
    goto LABEL_75;
  }
  unint64_t v30 = (char *)*v6;
  std::string::size_type v15 = v17;
  if (v29 >= 0x7FFFFFFFFFFFFFF8) {
    goto LABEL_71;
  }
LABEL_59:
  if (v29 >= 0x17)
  {
    uint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17) {
      uint64_t v32 = v29 | 7;
    }
    uint64_t v33 = v32 + 1;
    p_p = (std::string *)operator new(v32 + 1);
    __p.__r_.__value_.__l.__size_ = v29;
    __p.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
LABEL_67:
    memmove(p_p, &v30[v15 - v29], v29);
    p_p->__r_.__value_.__s.__data_[v29] = 0;
    if (*((char *)a2 + 247) < 0) {
      goto LABEL_68;
    }
    goto LABEL_62;
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v28 - v18;
  p_p = &__p;
  if (v28 != v18) {
    goto LABEL_67;
  }
  __p.__r_.__value_.__s.__data_[v29] = 0;
  if ((*((char *)a2 + 247) & 0x80000000) == 0) {
    goto LABEL_62;
  }
LABEL_68:
  operator delete(*v6);
LABEL_62:
  *(std::string *)uint64_t v6 = __p;
  uint64_t v8 = 1;
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return v8;
  }
LABEL_73:
  operator delete(v35.__r_.__value_.__l.__data_);
  return v8;
}

void sub_1C4ABD510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreHandwriting::ExpectedStringsBeamScorer::isMultiwordUnitPrefix(CoreHandwriting::ExpectedStringsBeamScorer *this, CoreHandwriting::CHEncoderDecoderBeamState *a2, int a3)
{
  uint64_t v6 = (const std::string *)(*((void *)this + 28) + 24 * *(int *)(*((void *)a2 + 10) - 4));
  if (std::string::compare(v6, "\\") && std::string::compare(v6, "."")) {
    return 0;
  }
  if (!std::string::compare(v6, "\\"")) {
    uint64_t v8 = " ";
  }
  else {
    uint64_t v8 = ".";
  }
  std::string::append((std::string *)((char *)a2 + 224), v8);
  uint64_t v9 = *((void *)a2 + 26);
  int v10 = *(_DWORD *)(v9 - 4);
  *((void *)a2 + 26) = v9 - 4;
  if (CoreHandwriting::ExpectedStringsBeamScorer::isUnitPrefix((void **)this, a2, 0, a3)
    || !a3 && CoreHandwriting::ExpectedStringsBeamScorer::isCurrencyUnitPrefix((void **)this, a2, v11, v12, v13, v14))
  {
    return 1;
  }
  if (*((char *)a2 + 247) < 0)
  {
    uint64_t v19 = *((void *)a2 + 28);
    uint64_t v20 = *((void *)a2 + 29) - 1;
    *((void *)a2 + 29) = v20;
    *(unsigned char *)(v19 + v20) = 0;
    std::string::size_type v17 = (char *)*((void *)a2 + 26);
    unint64_t v16 = *((void *)a2 + 27);
    if ((unint64_t)v17 < v16) {
      goto LABEL_13;
    }
LABEL_15:
    std::string::size_type v21 = (char *)*((void *)a2 + 25);
    uint64_t v22 = (v17 - v21) >> 2;
    unint64_t v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 62) {
      sub_1C494A220();
    }
    uint64_t v24 = v16 - (void)v21;
    if (v24 >> 1 > v23) {
      unint64_t v23 = v24 >> 1;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25)
    {
      if (v25 >> 62) {
        sub_1C4949AA8();
      }
      unint64_t v26 = operator new(4 * v25);
      unint64_t v27 = &v26[4 * v22];
      std::string::size_type v28 = &v26[4 * v25];
      *unint64_t v27 = v10;
      uint64_t v18 = (uint64_t)(v27 + 1);
      int64_t v29 = v17 - v21;
      if (v17 == v21) {
        goto LABEL_32;
      }
    }
    else
    {
      unint64_t v26 = 0;
      unint64_t v27 = (_DWORD *)(4 * v22);
      std::string::size_type v28 = 0;
      *(_DWORD *)(4 * v22) = v10;
      uint64_t v18 = 4 * v22 + 4;
      int64_t v29 = v17 - v21;
      if (v17 == v21)
      {
LABEL_32:
        *((void *)a2 + 25) = v27;
        *((void *)a2 + 26) = v18;
        *((void *)a2 + 27) = v28;
        if (v21) {
          operator delete(v21);
        }
        goto LABEL_34;
      }
    }
    unint64_t v30 = v29 - 4;
    if (v30 < 0x2C) {
      goto LABEL_39;
    }
    if ((unint64_t)(v21 - v26) < 0x20) {
      goto LABEL_39;
    }
    uint64_t v31 = (v30 >> 2) + 1;
    uint64_t v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v33 = &v17[-v32];
    unint64_t v27 = (_DWORD *)((char *)v27 - v32);
    uint64_t v34 = &v26[4 * v22 - 16];
    std::string v35 = v17 - 16;
    uint64_t v36 = v31 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      _OWORD *v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 8;
    }
    while (v36);
    std::string::size_type v17 = v33;
    if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_39:
      do
      {
        int v38 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *--unint64_t v27 = v38;
      }
      while (v17 != v21);
    }
    goto LABEL_32;
  }
  uint64_t v15 = *((unsigned __int8 *)a2 + 247) - 1;
  *((unsigned char *)a2 + 247) = v15 & 0x7F;
  *((unsigned char *)a2 + v15 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  std::string::size_type v17 = (char *)*((void *)a2 + 26);
  unint64_t v16 = *((void *)a2 + 27);
  if ((unint64_t)v17 >= v16) {
    goto LABEL_15;
  }
LABEL_13:
  *(_DWORD *)std::string::size_type v17 = v10;
  uint64_t v18 = (uint64_t)(v17 + 4);
LABEL_34:
  uint64_t result = 0;
  *((void *)a2 + 26) = v18;
  return result;
}

uint64_t CoreHandwriting::ExpectedStringsBeamScorer::evaluateConcatenationOfLexiconString(uint64_t **this, CoreHandwriting::CHEncoderDecoderBeamState *a2, uint64_t a3)
{
  unint64_t v3 = *((unsigned __int8 *)a2 + 247);
  if ((v3 & 0x80u) != 0) {
    unint64_t v3 = *((void *)a2 + 29);
  }
  if (v3 < 2) {
    return 0;
  }
  uint64_t v8 = (std::string *)((char *)a2 + 224);
  if (std::string::find((const std::string *)((char *)a2 + 224), 32, 0) == -1
    && std::string::find(v8, 46, 0) == -1)
  {
    return 0;
  }
  if (*((char *)a2 + 247) < 0)
  {
    sub_1C4949ADC(__p, *((void **)a2 + 28), *((void *)a2 + 29));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    int64_t v56 = v8->__r_.__value_.__r.__words[2];
  }
  if (v56 >= 0) {
    uint64_t v9 = (void **)((char *)__p + HIBYTE(v56));
  }
  else {
    uint64_t v9 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  }
  if (v56 >= 0) {
    int v10 = __p;
  }
  else {
    int v10 = (void **)__p[0];
  }
  for (; v10 != v9; int v10 = (void **)((char *)v10 + 1))
    *(unsigned char *)int v10 = __tolower(*(unsigned __int8 *)v10);
  while (1)
  {
    while (1)
    {
      LODWORD(v11) = HIBYTE(v56);
      if (SHIBYTE(v56) < 0) {
        break;
      }
      if (!HIBYTE(v56)) {
        goto LABEL_27;
      }
      uint64_t v12 = HIBYTE(v56);
      int v13 = *((unsigned __int8 *)&v54.__r_.__value_.__r.__words[2] + HIBYTE(v56) + 7);
      if (v13 == 32 || v13 == 46) {
        goto LABEL_27;
      }
      --HIBYTE(v56);
      *((unsigned char *)__p + v12 - 1) = 0;
    }
    if (!__p[1]) {
      break;
    }
    int v14 = *((unsigned __int8 *)__p[0] + (unint64_t)__p[1] - 1);
    if (v14 == 32 || v14 == 46) {
      break;
    }
    *((unsigned char *)__p[0] + (unint64_t)--__p[1]) = 0;
  }
LABEL_27:
  memset(&v54, 0, sizeof(v54));
  while ((v11 & 0x80) == 0)
  {
    if (!v11) {
      goto LABEL_64;
    }
    uint64_t v11 = v11;
    int v16 = *((unsigned __int8 *)&v54.__r_.__value_.__r.__words[2] + v11 + 7);
    std::string::size_type v17 = __p;
    if (v16 != 46 && v16 != 32) {
      goto LABEL_40;
    }
LABEL_38:
    std::string::operator=(&v54, *((unsigned char *)v17 + v11 - 1));
    if (SHIBYTE(v56) < 0)
    {
      uint64_t v15 = (void **)__p[0];
      uint64_t v11 = (uint64_t)--__p[1];
    }
    else
    {
      uint64_t v11 = HIBYTE(v56) - 1;
      HIBYTE(v56) = v11 & 0x7F;
      uint64_t v15 = __p;
    }
    *((unsigned char *)v15 + v11) = 0;
    LODWORD(v11) = HIBYTE(v56);
  }
  uint64_t v11 = (uint64_t)__p[1];
  if (!__p[1]) {
    goto LABEL_64;
  }
  std::string::size_type v17 = (void **)__p[0];
  int v18 = *((unsigned __int8 *)__p[0] + (unint64_t)__p[1] - 1);
  if (v18 == 32 || v18 == 46) {
    goto LABEL_38;
  }
LABEL_40:
  if ((sub_1C4ABA28C((uint64_t)__p, 0, 0, this[22], this[23]) & 1) == 0)
  {
    uint64_t v32 = (_DWORD *)*((void *)a2 + 25);
    if (*((void *)a2 + 26) - (void)v32 < 9uLL
      || *v32 != 1
      || v32[1] != 9
      || !sub_1C4ABA28C((uint64_t)__p, 0, 0, this[25], this[26]))
    {
LABEL_64:
      uint64_t v4 = 0;
      if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_65;
      }
LABEL_97:
      operator delete(v54.__r_.__value_.__l.__data_);
      if (SHIBYTE(v56) < 0) {
        goto LABEL_98;
      }
      return v4;
    }
  }
  uint64_t v19 = *((unsigned __int8 *)a2 + 196);
  size_t v20 = *((unsigned __int8 *)a2 + 247);
  char v21 = *((unsigned char *)a2 + 247);
  size_t v22 = *((void *)a2 + 29);
  unint64_t v23 = (char *)HIBYTE(v56);
  char v24 = HIBYTE(v56);
  unint64_t v25 = (char *)__p[1];
  if (v56 >= 0) {
    unint64_t v26 = HIBYTE(v56);
  }
  else {
    unint64_t v26 = (unint64_t)__p[1];
  }
  if (v26)
  {
    if ((v20 & 0x80u) == 0) {
      size_t v22 = *((unsigned __int8 *)a2 + 247);
    }
    memset_pattern16((void *)(*((void *)a2 + 16) - 8 * v22 + 8 * (v19 - a3)), &unk_1C4C43CB0, 8 * v26);
    size_t v20 = *((unsigned __int8 *)a2 + 247);
    size_t v22 = *((void *)a2 + 29);
    unint64_t v23 = (char *)HIBYTE(v56);
    unint64_t v25 = (char *)__p[1];
    char v24 = HIBYTE(v56);
    char v21 = *((unsigned char *)a2 + 247);
  }
  if (v21 >= 0) {
    unint64_t v27 = (char *)v20;
  }
  else {
    unint64_t v27 = (char *)v22;
  }
  if (v24 >= 0) {
    std::string::size_type v28 = v23;
  }
  else {
    std::string::size_type v28 = v25;
  }
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v54.__r_.__value_.__l.__size_;
  }
  size_t v30 = v27 - &v28[size];
  if (v21 < 0)
  {
    if (v22 < v30) {
      goto LABEL_99;
    }
    uint64_t v31 = (std::string *)v8->__r_.__value_.__r.__words[0];
    size_t v20 = v22;
  }
  else
  {
    uint64_t v31 = v8;
    if (v30 > v20) {
LABEL_99:
    }
      sub_1C49470D8();
  }
  if (v30 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1C4949B7C();
  }
  std::string::size_type v51 = size;
  if (v30 >= 0x17)
  {
    int64x2_t v50 = v27;
    std::string v35 = v28;
    uint64_t v36 = v19;
    uint64_t v37 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17) {
      uint64_t v37 = v30 | 7;
    }
    uint64_t v38 = v37 + 1;
    p_dst = (long long *)operator new(v37 + 1);
    *((void *)&__dst + 1) = v30;
    unint64_t v53 = v38 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    uint64_t v19 = v36;
    std::string::size_type v28 = v35;
    unint64_t v27 = v50;
    goto LABEL_76;
  }
  HIBYTE(v53) = (_BYTE)v27 - (size + (_BYTE)v28);
  p_dst = &__dst;
  if (v27 != &v28[size]) {
LABEL_76:
  }
    memmove(p_dst, (char *)v31 + v20 - v30, v30);
  *((unsigned char *)p_dst + v30) = 0;
  if (*((char *)a2 + 247) < 0) {
    operator delete(v8->__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&v8->__r_.__value_.__l.__data_ = __dst;
  v8->__r_.__value_.__r.__words[2] = v53;
  std::string::size_type v39 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  BOOL v40 = (v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  std::string::size_type v41 = v54.__r_.__value_.__l.__size_;
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v42 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v42 = v54.__r_.__value_.__l.__size_;
  }
  if (v42)
  {
    std::string::size_type v43 = 0;
    uint64_t v44 = *((void *)a2 + 15)
        + 8 * (&v28[v51 + ((*((void *)a2 + 16) - *((void *)a2 + 15)) >> 3) + (a3 << 63 >> 63) + v19] - v27);
    do
    {
      BOOL v45 = !v40;
      if (v40) {
        BOOL v46 = (std::string *)v54.__r_.__value_.__r.__words[0];
      }
      else {
        BOOL v46 = &v54;
      }
      int v47 = v46->__r_.__value_.__s.__data_[v43];
      if (!v45) {
        std::string::size_type v39 = v41;
      }
      if (v47 == 32) {
        uint64_t v48 = 0x2000;
      }
      else {
        uint64_t v48 = 4;
      }
      *(void *)(v44 - 8 * v39 + 8 * v43++) = v48;
      std::string::size_type v39 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
      BOOL v40 = (v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      std::string::size_type v41 = v54.__r_.__value_.__l.__size_;
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v49 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v49 = v54.__r_.__value_.__l.__size_;
      }
    }
    while (v49 > v43);
  }
  uint64_t v4 = 1;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_97;
  }
LABEL_65:
  if (SHIBYTE(v56) < 0) {
LABEL_98:
  }
    operator delete(__p[0]);
  return v4;
}

void sub_1C4ABDCA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

float CoreHandwriting::ExpectedStringsBeamScorer::evaluatePrefixString(CoreHandwriting::ExpectedStringsBeamScorer *this, CoreHandwriting::CHEncoderDecoderBeamState *a2, BOOL *a3, int a4)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((unsigned __int8 *)a2 + 247);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *((void *)a2 + 29);
  }
  if (!v5)
  {
    *a3 = 1;
    return 0.0;
  }
  if (CoreHandwriting::ExpectedStringsBeamScorer::isUnitPrefix((void **)this, a2, 1, a4))
  {
    *a3 = 1;
    return *((float *)this + 69);
  }
  int v10 = (char *)operator new(8uLL);
  *(void *)int v10 = 0x100000005;
  int v11 = sub_1C4AB7C50(*((void *)a2 + 25), *((void *)a2 + 26), v10, v10 + 8);
  operator delete(v10);
  int8x8_t v12 = *(int8x8_t *)((char *)this + 136);
  if (!*(void *)&v12) {
    goto LABEL_27;
  }
  unint64_t v13 = *(int *)(*((void *)a2 + 10) - 4);
  uint8x8_t v14 = (uint8x8_t)vcnt_s8(v12);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = *(int *)(*((void *)a2 + 10) - 4);
    if (*(void *)&v12 <= v13) {
      unint64_t v15 = v13 % *(void *)&v12;
    }
  }
  else
  {
    unint64_t v15 = (*(void *)&v12 - 1) & v13;
  }
  int v16 = *(uint64_t ***)(*((void *)this + 16) + 8 * v15);
  if (v16)
  {
    std::string::size_type v17 = *v16;
    if (*v16)
    {
      if (v14.u32[0] < 2uLL)
      {
        uint64_t v18 = *(void *)&v12 - 1;
        while (1)
        {
          uint64_t v20 = v17[1];
          if (v20 == v13)
          {
            if (*((_DWORD *)v17 + 4) == v13) {
              goto LABEL_28;
            }
          }
          else if ((v20 & v18) != v15)
          {
            goto LABEL_27;
          }
          std::string::size_type v17 = (uint64_t *)*v17;
          if (!v17) {
            goto LABEL_28;
          }
        }
      }
      do
      {
        unint64_t v19 = v17[1];
        if (v19 == v13)
        {
          if (*((_DWORD *)v17 + 4) == v13) {
            break;
          }
        }
        else
        {
          if (v19 >= *(void *)&v12) {
            v19 %= *(void *)&v12;
          }
          if (v19 != v15) {
            goto LABEL_27;
          }
        }
        std::string::size_type v17 = (uint64_t *)*v17;
      }
      while (v17);
    }
  }
  else
  {
LABEL_27:
    std::string::size_type v17 = 0;
  }
LABEL_28:
  char v21 = (_OWORD *)((char *)a2 + 224);
  if (*((char *)a2 + 247) < 0)
  {
    sub_1C4949ADC(__p, *((void **)a2 + 28), *((void *)a2 + 29));
  }
  else
  {
    *(_OWORD *)std::string __p = *v21;
    uint64_t v70 = *((void *)a2 + 30);
  }
  if (v70 >= 0) {
    size_t v22 = (void **)((char *)__p + HIBYTE(v70));
  }
  else {
    size_t v22 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  }
  if (v70 >= 0) {
    unint64_t v23 = __p;
  }
  else {
    unint64_t v23 = (void **)__p[0];
  }
  for (; v23 != v22; unint64_t v23 = (void **)((char *)v23 + 1))
    *(unsigned char *)unint64_t v23 = __tolower(*(unsigned __int8 *)v23);
  if (v17) {
    int v24 = 1;
  }
  else {
    int v24 = v11;
  }
  if (!a4)
  {
    if (v24)
    {
      unint64_t v25 = (uint64_t *)*((void *)this + 13);
      if (v25)
      {
        unint64_t v26 = (char *)HIBYTE(v70);
        if (v70 < 0) {
          unint64_t v26 = (char *)__p[1];
        }
        unint64_t v27 = __p;
        if (v70 < 0) {
          unint64_t v27 = (void **)__p[0];
        }
        if (!v26) {
          goto LABEL_119;
        }
        do
        {
          unint64_t v28 = *((unsigned __int8 *)v25 + 39);
          int v29 = (char)v28;
          if ((v28 & 0x80u) != 0) {
            unint64_t v28 = v25[3];
          }
          if ((unint64_t)v26 <= v28)
          {
            if (v29 >= 0) {
              size_t v30 = (unsigned __int8 *)(v25 + 2);
            }
            else {
              size_t v30 = (unsigned __int8 *)v25[2];
            }
            uint64_t v31 = v26;
            uint64_t v32 = v27;
            while (*(unsigned __int8 *)v32 == *v30)
            {
              uint64_t v32 = (void **)((char *)v32 + 1);
              ++v30;
              if (!--v31) {
                goto LABEL_119;
              }
            }
          }
          unint64_t v25 = (uint64_t *)*v25;
        }
        while (v25);
      }
    }
  }
  if (v11)
  {
LABEL_63:
    if (CoreHandwriting::ExpectedStringsBeamScorer::isUnitPrefix((void **)this, a2, 0, a4))
    {
      *a3 = 1;
      float v9 = 0.0;
      goto LABEL_120;
    }
    if (*((char *)a2 + 247) < 0)
    {
      sub_1C4949ADC(&__str, *((void **)a2 + 28), *((void *)a2 + 29));
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v21;
      __str.__r_.__value_.__r.__words[2] = *((void *)a2 + 30);
    }
    BOOL v45 = (unsigned char *)*((void *)a2 + 15);
    uint64_t v44 = (unsigned char *)*((void *)a2 + 16);
    size_t v65 = 0;
    int v66 = 0;
    float v67 = 0;
    int64_t v46 = v44 - v45;
    if (v44 != v45)
    {
      if (v46 < 0) {
        sub_1C494A220();
      }
      size_t v65 = operator new(v44 - v45);
      float v67 = (char *)v65 + 8 * (v46 >> 3);
      memcpy(v65, v45, v46);
      int v66 = v67;
    }
    if ((v11 & 1) == 0
      && ((CoreHandwriting::ExpectedStringsBeamScorer::evaluateConcatenationOfStrings(this, a2, 0) & 1) != 0
       || CoreHandwriting::ExpectedStringsBeamScorer::evaluateConcatenationOfLexiconString((uint64_t **)this, a2, 0)))
    {
      CoreHandwriting::ExpectedStringsBeamScorer::evaluatePrefixString(this, a2, a3, a4 + 1);
      std::string::operator=((std::string *)((char *)a2 + 224), &__str);
      if ((void **)((char *)a2 + 120) != &v65) {
        sub_1C494ACB0((void *)a2 + 15, (char *)v65, v66, (v66 - (unsigned char *)v65) >> 3);
      }
      if (*a3)
      {
        float v9 = *((float *)this + 69);
        goto LABEL_139;
      }
    }
    float v64 = 0.0;
    if (sub_1C4AB9DE4((uint64_t)this, (uint64_t)a2, 1, &v64, (uint64_t **)this + 22, a4))
    {
LABEL_104:
      *a3 = 1;
      float v51 = expf(v64);
      float v9 = log(v51 + 1.0) * 1.36904;
      goto LABEL_139;
    }
    unint64_t v52 = (_DWORD *)*((void *)a2 + 25);
    unint64_t v53 = *((void *)a2 + 26) - (void)v52;
    if (v53 < 9)
    {
      if (v53 != 4 || *v52 != 1) {
        goto LABEL_126;
      }
    }
    else if (*v52 != 1 || v52[1] != 9)
    {
      goto LABEL_126;
    }
    if (sub_1C4ABA28C((uint64_t)a2 + 224, 1, &v64, *((uint64_t **)this + 25), *((uint64_t **)this + 26))) {
      goto LABEL_104;
    }
LABEL_126:
    if (!a4)
    {
      int v60 = (_DWORD *)*((void *)a2 + 25);
      if (*((void *)a2 + 26) - (void)v60 == 4 && *v60 == 1)
      {
        *a3 = 1;
        float v9 = -1.1562;
        goto LABEL_139;
      }
      if (CoreHandwriting::ExpectedStringsBeamScorer::isCurrencyUnitPrefix((void **)this, a2, v47, v48, v49, v50)) {
        goto LABEL_138;
      }
      long long v71 = xmmword_1C4C43C60;
      sub_1C4AB84E4(&v62, &v71, 4uLL);
      if (sub_1C4AB7C50(*((void *)a2 + 25), *((void *)a2 + 26), (char *)v62, v63)) {
        int v61 = CoreHandwriting::ExpectedStringsBeamScorer::checkVariablePrefixWithSubscript(this, a2);
      }
      else {
        int v61 = 0;
      }
      if (v62)
      {
        uint64_t v63 = (char *)v62;
        operator delete(v62);
      }
      if (v61)
      {
LABEL_138:
        *a3 = 1;
        float v9 = 0.0;
        goto LABEL_139;
      }
    }
    *a3 = 0;
    float v9 = *((float *)this + 70);
LABEL_139:
    if (v65)
    {
      int v66 = (char *)v65;
      operator delete(v65);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    goto LABEL_120;
  }
  uint64_t v33 = (uint64_t *)*((void *)this + 3);
  if (v33)
  {
    uint64_t v34 = (char *)HIBYTE(v70);
    if (v70 < 0) {
      uint64_t v34 = (char *)__p[1];
    }
    std::string v35 = __p;
    if (v70 < 0) {
      std::string v35 = (void **)__p[0];
    }
    if (!v34) {
      goto LABEL_119;
    }
    do
    {
      unint64_t v36 = *((unsigned __int8 *)v33 + 39);
      int v37 = (char)v36;
      if ((v36 & 0x80u) != 0) {
        unint64_t v36 = v33[3];
      }
      if ((unint64_t)v34 <= v36)
      {
        if (v37 >= 0) {
          uint64_t v38 = (unsigned __int8 *)(v33 + 2);
        }
        else {
          uint64_t v38 = (unsigned __int8 *)v33[2];
        }
        std::string::size_type v39 = v34;
        BOOL v40 = v35;
        while (*(unsigned __int8 *)v40 == *v38)
        {
          BOOL v40 = (void **)((char *)v40 + 1);
          ++v38;
          if (!--v39) {
            goto LABEL_119;
          }
        }
      }
      uint64_t v33 = (uint64_t *)*v33;
    }
    while (v33);
  }
  std::string::size_type v41 = (uint64_t *)*((void *)this + 8);
  if (!v41) {
    goto LABEL_63;
  }
  std::string::size_type v42 = (char *)HIBYTE(v70);
  if (v70 < 0) {
    std::string::size_type v42 = (char *)__p[1];
  }
  std::string::size_type v43 = __p;
  if (v70 < 0) {
    std::string::size_type v43 = (void **)__p[0];
  }
  if (v42)
  {
    do
    {
      unint64_t v54 = *((unsigned __int8 *)v41 + 39);
      int v55 = (char)v54;
      if ((v54 & 0x80u) != 0) {
        unint64_t v54 = v41[3];
      }
      if ((unint64_t)v42 <= v54)
      {
        if (v55 >= 0) {
          int64_t v56 = (unsigned __int8 *)(v41 + 2);
        }
        else {
          int64_t v56 = (unsigned __int8 *)v41[2];
        }
        uint64_t v57 = v42;
        uint64_t v58 = v43;
        while (*(unsigned __int8 *)v58 == *v56)
        {
          uint64_t v58 = (void **)((char *)v58 + 1);
          ++v56;
          if (!--v57) {
            goto LABEL_119;
          }
        }
      }
      std::string::size_type v41 = (uint64_t *)*v41;
    }
    while (v41);
    goto LABEL_63;
  }
LABEL_119:
  *a3 = 1;
  float v9 = *((float *)this + 69);
LABEL_120:
  if (SHIBYTE(v70) < 0) {
    operator delete(__p[0]);
  }
  return v9;
}

void sub_1C4ABE3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a14)
  {
    operator delete(a14);
    if ((a22 & 0x80000000) == 0)
    {
LABEL_7:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_8:
  operator delete(a24);
  goto LABEL_9;
}

float CoreHandwriting::ExpectedStringsBeamScorer::apply(CoreHandwriting::ExpectedStringsBeamScorer *this, CoreHandwriting::CHEncoderDecoderBeamState *a2, BOOL *a3)
{
  if (*((unsigned char *)a2 + 196))
  {
LABEL_2:
    return CoreHandwriting::ExpectedStringsBeamScorer::evaluateCompleteString(this, a2, a3, 0);
  }
  unint64_t v7 = (char **)(*((void *)this + 28) + 24 * *(int *)(*((void *)a2 + 10) - 4));
  int v8 = *((char *)v7 + 23);
  if (v8 < 0)
  {
    if (v7[1] != (char *)1) {
      goto LABEL_2;
    }
    unsigned int v9 = **v7;
    if ((v9 & 0x80000000) == 0)
    {
LABEL_8:
      if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v9 + 60) & 0x100) == 0) {
        goto LABEL_2;
      }
      goto LABEL_13;
    }
  }
  else
  {
    if (v8 != 1) {
      goto LABEL_2;
    }
    unsigned int v9 = *(char *)v7;
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_8;
    }
  }
  if (!__maskrune(v9, 0x100uLL)) {
    goto LABEL_2;
  }
LABEL_13:
  return CoreHandwriting::ExpectedStringsBeamScorer::evaluatePrefixString(this, a2, a3, 0);
}

uint64_t sub_1C4ABE54C(uint64_t a1, uint64_t **a2, float a3, float a4)
{
  *(void *)a1 = &unk_1F2010D88;
  *(float *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  uint64_t v44 = (void *)(a1 + 16);
  *(float *)(a1 + 44) = a4;
  *(void *)(a1 + 32) = 0;
  uint64_t v43 = a1 + 32;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  unint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  int64_t v8 = (char *)v6 - (char *)*a2;
  if (v6 != *a2)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    if (v9 > 0xAAAAAAAAAAAAAAALL) {
      sub_1C494A220();
    }
    int v10 = (char *)operator new(v8);
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v10;
    *(void *)(a1 + 32) = &v10[24 * v9];
    unint64_t v7 = *a2;
    uint64_t v6 = a2[1];
  }
  *(_DWORD *)(a1 + 40) = 0;
  if (v6 != v7)
  {
    unint64_t v11 = 0;
    while (1)
    {
      uint64_t v13 = *v7;
      uint64_t v12 = v7[1];
      std::string __p = 0;
      unint64_t v46 = 0;
      unint64_t v47 = 0;
      uint64_t v14 = v12 - v13;
      if (!v14) {
        break;
      }
      if (v14 < 0) {
        sub_1C494A220();
      }
      unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * (v14 >> 3);
      unint64_t v16 = (v15 - 1) >> 6;
      std::string::size_type v17 = operator new(8 * (v16 + 1));
      uint64_t v18 = v17;
      unint64_t v46 = v15;
      unint64_t v47 = v16 + 1;
      std::string __p = v17;
      if (v15 >= 0x41) {
        unint64_t v19 = (v15 - 1) >> 6;
      }
      else {
        unint64_t v19 = 0;
      }
      v17[v19] = 0;
      if (v15 >= 0x40) {
        bzero(v17, 8 * (v15 >> 6));
      }
      if ((v15 & 0x3F) != 0) {
        v18[v15 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v15 & 0x3F));
      }
      uint64_t v20 = v7[1];
      uint64_t v21 = v20 - *v7;
      if (v20 != *v7) {
        goto LABEL_19;
      }
LABEL_25:
      unint64_t v28 = *(void *)(a1 + 24);
      unint64_t v27 = *(void *)(a1 + 32);
      if (v28 >= v27)
      {
        unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *v44) >> 3);
        unint64_t v31 = v30 + 1;
        if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_1C494A220();
        }
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *v44) >> 3);
        if (2 * v32 > v31) {
          unint64_t v31 = 2 * v32;
        }
        if (v32 >= 0x555555555555555) {
          unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v33 = v31;
        }
        uint64_t v52 = v43;
        if (v33)
        {
          if (v33 > 0xAAAAAAAAAAAAAAALL) {
            sub_1C4949AA8();
          }
          uint64_t v34 = (char *)operator new(24 * v33);
        }
        else
        {
          uint64_t v34 = 0;
        }
        uint64_t v48 = v34;
        uint64_t v49 = &v34[24 * v30];
        uint64_t v50 = v49;
        float v51 = &v34[24 * v33];
        sub_1C49C68B8(v49, (uint64_t)&__p);
        std::string v35 = v49;
        int v29 = v50 + 24;
        unint64_t v36 = *(void **)(a1 + 16);
        int v37 = *(void **)(a1 + 24);
        if (v37 == v36)
        {
          *(void *)(a1 + 16) = v49;
          *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v29;
          *(void *)(a1 + 32) = v51;
          if (!v37) {
            goto LABEL_45;
          }
        }
        else
        {
          do
          {
            uint64_t v38 = *(v37 - 3);
            v37 -= 3;
            *((void *)v35 - 3) = v38;
            v35 -= 24;
            *((void *)v35 + 1) = v37[1];
            *((void *)v35 + 2) = v37[2];
            *int v37 = 0;
            v37[1] = 0;
            _OWORD v37[2] = 0;
          }
          while (v37 != v36);
          int v37 = *(void **)(a1 + 16);
          std::string::size_type v39 = *(void **)(a1 + 24);
          *(void *)(a1 + 16) = v35;
          *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v29;
          *(void *)(a1 + 32) = v51;
          while (v39 != v37)
          {
            std::string::size_type v41 = (void *)*(v39 - 3);
            v39 -= 3;
            BOOL v40 = v41;
            if (v41) {
              operator delete(v40);
            }
          }
          if (!v37) {
            goto LABEL_45;
          }
        }
        operator delete(v37);
      }
      else
      {
        sub_1C49C68B8(*(void **)(a1 + 24), (uint64_t)&__p);
        int v29 = (void *)(v28 + 24);
        *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v28 + 24;
      }
LABEL_45:
      *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v29;
      if (__p) {
        operator delete(__p);
      }
      ++v11;
      unint64_t v7 = *a2;
      if (0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2) <= v11) {
        return a1;
      }
    }
    uint64_t v18 = 0;
    uint64_t v22 = v7[1];
    uint64_t v21 = v22 - *v7;
    if (v22 == *v7) {
      goto LABEL_25;
    }
LABEL_19:
    unint64_t v23 = 0;
    unint64_t v24 = v21 / 40;
    if (v24 <= 1) {
      unint64_t v24 = 1;
    }
    unint64_t v25 = (uint64_t *)(v7[3 * v11] + 24);
    do
    {
      uint64_t v26 = *v25;
      v25 += 5;
      if (v26)
      {
        *(void *)((char *)v18 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
        ++*(_DWORD *)(a1 + 40);
      }
      ++v23;
    }
    while (v24 != v23);
    goto LABEL_25;
  }
  return a1;
}

void sub_1C4ABE908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
}

void sub_1C4ABE91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1C4ABE984(a10);
  _Unwind_Resume(a1);
}

void **sub_1C4ABE984(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v3 - 3);
        v3 -= 24;
        uint64_t v5 = v6;
        if (v6) {
          operator delete(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void CoreHandwriting::InputCoverageScorer::apply(CoreHandwriting::InputCoverageScorer *this, CoreHandwriting::CHEncoderDecoderBeamState *a2, BOOL *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!*((unsigned char *)a2 + 196))
  {
    *a3 = 1;
    return;
  }
  unint64_t v9 = (const char *)objc_msgSend_UTF8String(@"past_attention_weights", (const char *)a2, (uint64_t)a3, a4, a5, a6);
  size_t v10 = strlen(v9);
  if (v10 > 0x7FFFFFFFFFFFFFF7) {
LABEL_155:
  }
    sub_1C4949B7C();
  size_t v11 = v10;
  uint64_t v157 = a3;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = operator new(v13 + 1);
    size_t v159 = v11;
    int64_t v160 = v14 | 0x8000000000000000;
    long long __dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v160) = v10;
  p_dst = &__dst;
  if (v10) {
LABEL_10:
  }
    memmove(p_dst, v9, v11);
  *((unsigned char *)p_dst + v11) = 0;
  unint64_t v15 = (uint64_t **)*((void *)a2 + 1);
  if (!v15) {
LABEL_35:
  }
    sub_1C49470F0("map::at:  key not found");
  int v16 = SHIBYTE(v160);
  std::string::size_type v17 = __dst;
  if (v160 >= 0) {
    size_t v18 = HIBYTE(v160);
  }
  else {
    size_t v18 = v159;
  }
  if (v160 >= 0) {
    unint64_t v19 = &__dst;
  }
  else {
    unint64_t v19 = __dst;
  }
  while (1)
  {
    while (1)
    {
      int v20 = *((char *)v15 + 55);
      if (v20 >= 0) {
        size_t v21 = *((unsigned __int8 *)v15 + 55);
      }
      else {
        size_t v21 = (size_t)v15[5];
      }
      if (v20 >= 0) {
        uint64_t v22 = (uint64_t *)(v15 + 4);
      }
      else {
        uint64_t v22 = v15[4];
      }
      if (v21 >= v18) {
        size_t v23 = v18;
      }
      else {
        size_t v23 = v21;
      }
      int v24 = memcmp(v19, v22, v23);
      BOOL v25 = v18 < v21;
      if (v24) {
        BOOL v25 = v24 < 0;
      }
      if (!v25) {
        break;
      }
      unint64_t v15 = (uint64_t **)*v15;
      if (!v15) {
        goto LABEL_35;
      }
    }
    int v26 = memcmp(v22, v19, v23);
    BOOL v32 = v21 < v18;
    if (v26) {
      BOOL v32 = v26 < 0;
    }
    if (!v32) {
      break;
    }
    unint64_t v15 = (uint64_t **)v15[1];
    if (!v15) {
      goto LABEL_35;
    }
  }
  unint64_t v33 = objc_msgSend_shape(v15[7], v27, v28, v29, v30, v31);
  uint64_t v38 = objc_msgSend_objectAtIndexedSubscript_(v33, v34, 1, v35, v36, v37);
  int v44 = objc_msgSend_intValue(v38, v39, v40, v41, v42, v43);

  if (v16 < 0) {
    operator delete(v17);
  }
  uint64_t v50 = (const char *)objc_msgSend_UTF8String(@"past_attention_weights", v45, v46, v47, v48, v49);
  size_t v51 = strlen(v50);
  if (v51 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_155;
  }
  size_t v52 = v51;
  int v156 = v44;
  if (v51 >= 0x17)
  {
    uint64_t v54 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v51 | 7) != 0x17) {
      uint64_t v54 = v51 | 7;
    }
    uint64_t v55 = v54 + 1;
    unint64_t v53 = operator new(v54 + 1);
    size_t v159 = v52;
    int64_t v160 = v55 | 0x8000000000000000;
    long long __dst = v53;
    goto LABEL_45;
  }
  HIBYTE(v160) = v51;
  unint64_t v53 = &__dst;
  if (v51) {
LABEL_45:
  }
    memmove(v53, v50, v52);
  *((unsigned char *)v53 + v52) = 0;
  int64_t v56 = (uint64_t **)*((void *)a2 + 1);
  if (!v56) {
LABEL_70:
  }
    sub_1C49470F0("map::at:  key not found");
  int v57 = SHIBYTE(v160);
  uint64_t v58 = __dst;
  if (v160 >= 0) {
    size_t v59 = HIBYTE(v160);
  }
  else {
    size_t v59 = v159;
  }
  if (v160 >= 0) {
    int v60 = &__dst;
  }
  else {
    int v60 = __dst;
  }
  while (1)
  {
    while (1)
    {
      int v61 = *((char *)v56 + 55);
      if (v61 >= 0) {
        size_t v62 = *((unsigned __int8 *)v56 + 55);
      }
      else {
        size_t v62 = (size_t)v56[5];
      }
      if (v61 >= 0) {
        uint64_t v63 = (uint64_t *)(v56 + 4);
      }
      else {
        uint64_t v63 = v56[4];
      }
      if (v62 >= v59) {
        size_t v64 = v59;
      }
      else {
        size_t v64 = v62;
      }
      int v65 = memcmp(v60, v63, v64);
      BOOL v66 = v59 < v62;
      if (v65) {
        BOOL v66 = v65 < 0;
      }
      if (!v66) {
        break;
      }
      int64_t v56 = (uint64_t **)*v56;
      if (!v56) {
        goto LABEL_70;
      }
    }
    int v67 = memcmp(v63, v60, v64);
    BOOL v73 = v62 < v59;
    if (v67) {
      BOOL v73 = v67 < 0;
    }
    if (!v73) {
      break;
    }
    int64_t v56 = (uint64_t **)v56[1];
    if (!v56) {
      goto LABEL_70;
    }
  }
  uint64_t v74 = objc_msgSend_shape(v56[7], v68, v69, v70, v71, v72);
  uint64_t v79 = objc_msgSend_objectAtIndexedSubscript_(v74, v75, 2, v76, v77, v78);
  uint64_t v85 = objc_msgSend_intValue(v79, v80, v81, v82, v83, v84);

  if (v57 < 0) {
    operator delete(v58);
  }
  uint64_t v91 = (const char *)objc_msgSend_UTF8String(@"attention_weights", v86, v87, v88, v89, v90);
  size_t v92 = strlen(v91);
  if (v92 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_155;
  }
  size_t v93 = v92;
  uint64_t v154 = v85;
  if (v92 >= 0x17)
  {
    uint64_t v95 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v92 | 7) != 0x17) {
      uint64_t v95 = v92 | 7;
    }
    uint64_t v96 = v95 + 1;
    int v94 = operator new(v95 + 1);
    size_t v159 = v93;
    int64_t v160 = v96 | 0x8000000000000000;
    long long __dst = v94;
    goto LABEL_80;
  }
  HIBYTE(v160) = v92;
  int v94 = &__dst;
  if (v92) {
LABEL_80:
  }
    memmove(v94, v91, v93);
  *((unsigned char *)v94 + v93) = 0;
  uint64_t v97 = (uint64_t **)*((void *)a2 + 1);
  if (!v97) {
LABEL_105:
  }
    sub_1C49470F0("map::at:  key not found");
  int v98 = SHIBYTE(v160);
  uint64_t v99 = __dst;
  if (v160 >= 0) {
    size_t v100 = HIBYTE(v160);
  }
  else {
    size_t v100 = v159;
  }
  if (v160 >= 0) {
    int v101 = &__dst;
  }
  else {
    int v101 = __dst;
  }
  while (1)
  {
    while (1)
    {
      int v102 = *((char *)v97 + 55);
      if (v102 >= 0) {
        size_t v103 = *((unsigned __int8 *)v97 + 55);
      }
      else {
        size_t v103 = (size_t)v97[5];
      }
      if (v102 >= 0) {
        uint64_t v104 = (uint64_t *)(v97 + 4);
      }
      else {
        uint64_t v104 = v97[4];
      }
      if (v103 >= v100) {
        size_t v105 = v100;
      }
      else {
        size_t v105 = v103;
      }
      int v106 = memcmp(v101, v104, v105);
      BOOL v107 = v100 < v103;
      if (v106) {
        BOOL v107 = v106 < 0;
      }
      if (!v107) {
        break;
      }
      uint64_t v97 = (uint64_t **)*v97;
      if (!v97) {
        goto LABEL_105;
      }
    }
    int v108 = memcmp(v104, v101, v105);
    BOOL v109 = v103 < v100;
    if (v108) {
      BOOL v109 = v108 < 0;
    }
    if (!v109) {
      break;
    }
    uint64_t v97 = (uint64_t **)v97[1];
    if (!v97) {
      goto LABEL_105;
    }
  }
  unint64_t v110 = v97[7];
  uint64_t v121 = objc_msgSend_dataPointer(v110, v111, v112, v113, v114, v115);
  if (v98 < 0) {
    operator delete(v99);
  }
  uint64_t v122 = (const char *)objc_msgSend_UTF8String(@"past_attention_weights", v116, v117, v118, v119, v120, v154);
  size_t v123 = strlen(v122);
  if (v123 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_155;
  }
  size_t v124 = v123;
  if (v123 >= 0x17)
  {
    uint64_t v126 = (v123 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v123 | 7) != 0x17) {
      uint64_t v126 = v123 | 7;
    }
    uint64_t v127 = v126 + 1;
    int v125 = operator new(v126 + 1);
    size_t v159 = v124;
    int64_t v160 = v127 | 0x8000000000000000;
    long long __dst = v125;
    goto LABEL_115;
  }
  HIBYTE(v160) = v123;
  int v125 = &__dst;
  if (v123) {
LABEL_115:
  }
    memmove(v125, v122, v124);
  *((unsigned char *)v125 + v1++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  uint64_t v128 = (uint64_t **)*((void *)a2 + 1);
  if (!v128) {
LABEL_140:
  }
    sub_1C49470F0("map::at:  key not found");
  int v129 = SHIBYTE(v160);
  long long v130 = __dst;
  if (v160 >= 0) {
    size_t v131 = HIBYTE(v160);
  }
  else {
    size_t v131 = v159;
  }
  if (v160 >= 0) {
    uint64_t v132 = &__dst;
  }
  else {
    uint64_t v132 = __dst;
  }
  while (1)
  {
    while (1)
    {
      int v133 = *((char *)v128 + 55);
      if (v133 >= 0) {
        size_t v134 = *((unsigned __int8 *)v128 + 55);
      }
      else {
        size_t v134 = (size_t)v128[5];
      }
      if (v133 >= 0) {
        BOOL v135 = (uint64_t *)(v128 + 4);
      }
      else {
        BOOL v135 = v128[4];
      }
      if (v134 >= v131) {
        size_t v136 = v131;
      }
      else {
        size_t v136 = v134;
      }
      int v137 = memcmp(v132, v135, v136);
      BOOL v138 = v131 < v134;
      if (v137) {
        BOOL v138 = v137 < 0;
      }
      if (!v138) {
        break;
      }
      uint64_t v128 = (uint64_t **)*v128;
      if (!v128) {
        goto LABEL_140;
      }
    }
    int v139 = memcmp(v135, v132, v136);
    BOOL v140 = v134 < v131;
    if (v139) {
      BOOL v140 = v139 < 0;
    }
    if (!v140) {
      break;
    }
    uint64_t v128 = (uint64_t **)v128[1];
    if (!v128) {
      goto LABEL_140;
    }
  }
  long long v141 = v128[7];
  uint64_t v147 = objc_msgSend_dataPointer(v141, v142, v143, v144, v145, v146);
  if (v129 < 0)
  {
    operator delete(v130);
    int v148 = v156;
    if (v156 >= 1)
    {
LABEL_143:
      uint64_t v149 = v157;
      if (v155 < 1)
      {
        int v151 = 0;
      }
      else
      {
        uint64_t v150 = 0;
        int v151 = 0;
        uint64_t v152 = 4 * v155;
        do
        {
          for (unint64_t i = 0; i != v155; ++i)
          {
            if (((*(void *)(*(void *)(*((void *)this + 2) + 24 * v150) + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) != 0
              && (float)(*(float *)(v121 + 4 * i) + *(float *)(v147 + 4 * i)) > *((float *)this + 11))
            {
              ++v151;
            }
          }
          ++v150;
          v147 += v152;
          v121 += v152;
        }
        while (v150 != v148);
      }
      goto LABEL_154;
    }
  }
  else
  {
    int v148 = v156;
    if (v156 >= 1) {
      goto LABEL_143;
    }
  }
  int v151 = 0;
  uint64_t v149 = v157;
LABEL_154:
  BOOL *v149 = 1;
  logf((float)v151 / (float)*((int *)this + 10));
}

void sub_1C4ABF138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1C4ABF190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if ((a17 & 0x80) == 0) {
    JUMPOUT(0x1C4ABF188);
  }
  JUMPOUT(0x1C4ABF180);
}

void sub_1C4ABF1A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if ((a17 & 0x80) == 0) {
    JUMPOUT(0x1C4ABF188);
  }
  JUMPOUT(0x1C4ABF180);
}

float CoreHandwriting::LanguageModelScorer::apply(CoreHandwriting::LanguageModelScorer *this, CoreHandwriting::CHEncoderDecoderBeamState *a2, BOOL *a3)
{
  uint64_t v6 = *((void *)a2 + 10);
  uint64_t v7 = (v6 - *((void *)a2 + 9)) >> 2;
  float v8 = 0.0;
  if ((int)v7 >= 2
    && !std::string::compare((const std::string *)(*((void *)this + 2) + 24 * *(int *)(v6 - 4)), "0"))
  {
    unint64_t v9 = (char **)(*((void *)this + 2) + 24 * *(int *)(*((void *)a2 + 9) + 4 * (v7 - 2)));
    int v10 = *((char *)v9 + 23);
    if (v10 < 0)
    {
      if (v9[1] != (char *)1) {
        goto LABEL_13;
      }
      unsigned int v11 = **v9;
      if ((v11 & 0x80000000) == 0)
      {
LABEL_6:
        int v12 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v11 + 60) & 0x100;
        goto LABEL_10;
      }
    }
    else
    {
      if (v10 != 1) {
        goto LABEL_13;
      }
      unsigned int v11 = *(char *)v9;
      if ((v11 & 0x80000000) == 0) {
        goto LABEL_6;
      }
    }
    int v12 = __maskrune(v11, 0x100uLL);
LABEL_10:
    if (v12) {
      float v8 = -0.32154;
    }
    else {
      float v8 = 0.0;
    }
  }
LABEL_13:
  uint64_t v13 = (_DWORD *)*((void *)a2 + 25);
  if (((*((void *)a2 + 26) - (void)v13) & 0x3FFFFFFFCLL) == 8 && !*v13 && v13[1] == 9) {
    float v8 = v8 + -0.321535349;
  }
  *a3 = 1;
  return v8 * *((float *)this + 2);
}

uint64_t *sub_1C4ABF2EC(uint64_t *a1, uint64_t *a2, float a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_1C4ACA87C((char *)a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  CoreHandwriting::AttentionBasedMathSegmentation::AttentionBasedMathSegmentation((CoreHandwriting::AttentionBasedMathSegmentation *)(a1 + 3), a3);
  sub_1C4947518((uint64_t)(a1 + 7));
  a1[73] = 0;
  *(_OWORD *)(a1 + 69) = 0u;
  *(_OWORD *)(a1 + 71) = 0u;
  *(_OWORD *)(a1 + 67) = 0u;
  *((_DWORD *)a1 + 148) = 1065353216;
  *(_OWORD *)(a1 + 75) = 0u;
  *(_OWORD *)(a1 + 77) = 0u;
  *((_DWORD *)a1 + 158) = 1065353216;
  *((_OWORD *)a1 + 40) = 0u;
  *((_OWORD *)a1 + 41) = 0u;
  *((_DWORD *)a1 + 168) = 1065353216;
  *(_OWORD *)(a1 + 85) = 0u;
  *(_OWORD *)(a1 + 87) = 0u;
  *((_DWORD *)a1 + 178) = 1065353216;
  a1[90] = 0;
  a1[92] = 0;
  a1[91] = 0;
  a1[93] = 0x500000003;
  *((_DWORD *)a1 + 188) = 5;
  *(_OWORD *)((char *)a1 + 756) = xmmword_1C4C43C70;
  *((_DWORD *)a1 + 193) = -1;
  uint64_t v5 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    while (std::string::compare((const std::string *)(v5 + v6), "="))
    {
      ++v7;
      uint64_t v5 = *a1;
      v6 += 24;
      if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) <= v7)
      {
        if (*((int *)a1 + 193) > 0) {
          return a1;
        }
        goto LABEL_8;
      }
    }
    *((_DWORD *)a1 + 193) = v7;
    if ((int)v7 > 0) {
      return a1;
    }
  }
LABEL_8:
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  float v8 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)int v10 = 0;
    _os_log_impl(&dword_1C492D000, v8, OS_LOG_TYPE_FAULT, "Could not find equal symbol in the codemap", v10, 2u);
  }

  return a1;
}

void sub_1C4ABF4C4(_Unwind_Exception *a1)
{
  sub_1C4949DD4(v1 + 32, *(char **)(v1 + 40));
  sub_1C4935DF0((void **)v1);
  _Unwind_Resume(a1);
}

void sub_1C4ABF4E4(_Unwind_Exception *a1)
{
  sub_1C4935DF0(v1);
  _Unwind_Resume(a1);
}

void *sub_1C4ABF4F8(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    unint64_t v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*(v3 - 3);
        if (v5)
        {
          do
          {
            uint64_t v6 = (void *)*v5;
            operator delete(v5);
            uint64_t v5 = v6;
          }
          while (v6);
        }
        float v8 = (void *)*(v3 - 5);
        v3 -= 5;
        unint64_t v7 = v8;
        void *v3 = 0;
        if (v8) {
          operator delete(v7);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void CoreHandwriting::CHMathBeamDecoder::setLatexSyntaxScorer(CoreHandwriting::CHMathBeamDecoder *this)
{
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v5 = v6;
  uint64_t v2 = *(void *)this;
  if (*((void *)this + 1) != *(void *)this)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      unint64_t v7 = (long long *)(v2 + v3);
      *((_DWORD *)sub_1C494A238(&v5, (const void **)(v2 + v3), (uint64_t)&unk_1C4C39B40, &v7) + 14) = v4++;
      uint64_t v2 = *(void *)this;
      v3 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3) > v4);
  }
  operator new();
}

void sub_1C4ABF840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  MEMORY[0x1C8786460](v11, 0x10A1C40A9CC8DD9);
  sub_1C4949DD4((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_1C4ABF870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void sub_1C4ABF888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
  sub_1C4949DD4((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_1C4ABF8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void CoreHandwriting::CHMathBeamDecoder::setLanguageModelScorer(CoreHandwriting::CHMathBeamDecoder *this)
{
}

void sub_1C4ABF9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a10 + 16))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C4ABFA3C()
{
}

void sub_1C4ABFB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a10 + 16))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C4ABFB88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v5 = a5;
  operator new();
}

void sub_1C4ABFC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a10 + 16))(a10);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_1C4ABFD00(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = (void *)(a1 + 640);
  if (a1 + 640 == a2) {
    goto LABEL_86;
  }
  *(_DWORD *)(a1 + 672) = *(_DWORD *)(a2 + 32);
  id v5 = *(char **)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 648);
  if (!v6) {
    goto LABEL_81;
  }
  for (uint64_t i = 0; i != v6; ++i)
    *(void *)(*v4 + 8 * i) = 0;
  float v8 = *(char **)(a1 + 656);
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 656) = 0;
  if (!v8)
  {
LABEL_81:
    while (v5)
    {
      uint64_t v71 = operator new(0x30uLL);
      void *v71 = 0;
      v71[1] = 0;
      uint64_t v72 = *((int *)v5 + 4);
      v71[3] = 0;
      *((_DWORD *)v71 + 4) = v72;
      void v71[4] = 0;
      v71[5] = 0;
      uint64_t v74 = (unsigned char *)*((void *)v5 + 3);
      BOOL v73 = (unsigned char *)*((void *)v5 + 4);
      uint64_t v75 = v73 - v74;
      if (v73 != v74)
      {
        if (v75 < 0) {
          sub_1C494A220();
        }
        uint64_t v76 = (char *)operator new(v73 - v74);
        v71[3] = v76;
        void v71[4] = v76;
        v71[5] = &v76[8 * (v75 >> 3)];
        size_t v77 = v75 & 0xFFFFFFFFFFFFFFF8;
        memcpy(v76, v74, v77);
        void v71[4] = &v76[v77];
      }
      v71[1] = v72;
      sub_1C4ACBBB8((uint64_t)v4, (uint64_t)v71);
      id v5 = *(char **)v5;
    }
    goto LABEL_86;
  }
  while (v5)
  {
    *((_DWORD *)v8 + 4) = *((_DWORD *)v5 + 4);
    if (v8 != v5)
    {
      unint64_t v9 = (char *)*((void *)v8 + 3);
      int v10 = (char *)*((void *)v5 + 3);
      uint64_t v11 = (char *)*((void *)v5 + 4);
      int64_t v12 = v11 - v10;
      unint64_t v13 = (v11 - v10) >> 3;
      uint64_t v14 = *((void *)v8 + 5);
      if (v13 > (v14 - (uint64_t)v9) >> 3)
      {
        if (v9)
        {
          *((void *)v8 + 4) = v9;
          operator delete(v9);
          uint64_t v14 = 0;
          *((void *)v8 + 3) = 0;
          *((void *)v8 + 4) = 0;
          *((void *)v8 + 5) = 0;
        }
        if (v12 < 0) {
          goto LABEL_152;
        }
        uint64_t v15 = v14 >> 2;
        if (v14 >> 2 <= v13) {
          uint64_t v15 = (v11 - v10) >> 3;
        }
        unint64_t v16 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v15;
        if (v16 >> 61) {
LABEL_152:
        }
          sub_1C494A220();
        std::string::size_type v17 = (char *)operator new(8 * v16);
        size_t v18 = v17;
        *((void *)v8 + 4) = v17;
        char v19 = v8 + 32;
        *((void *)v8 + 3) = v17;
        *((void *)v8 + 5) = &v17[8 * v16];
        int v20 = v17;
        if (v10 != v11)
        {
          memcpy(v17, v10, v12 & 0xFFFFFFFFFFFFFFF8);
          int v20 = &v18[v12 & 0xFFFFFFFFFFFFFFF8];
        }
        size_t v21 = (char *)(v20 - v18);
        goto LABEL_59;
      }
      char v19 = v8 + 32;
      size_t v18 = (char *)*((void *)v8 + 4);
      uint64_t v22 = v18 - v9;
      unint64_t v23 = (v18 - v9) >> 3;
      if (v23 < v13)
      {
        int v24 = &v10[8 * v23];
        if (v18 != v9)
        {
          if ((unint64_t)(v22 - 8) < 0x78)
          {
            BOOL v25 = (char *)*((void *)v5 + 3);
            goto LABEL_25;
          }
          unint64_t v31 = (v22 & 0xFFFFFFFFFFFFFFF8) - 8;
          BOOL v32 = &v9[v31 + 4];
          unint64_t v33 = &v10[v31 + 4];
          BOOL v35 = v9 + 4 < &v10[v22 & 0xFFFFFFFFFFFFFFF8] && v10 + 4 < &v9[v22 & 0xFFFFFFFFFFFFFFF8];
          BOOL v25 = (char *)*((void *)v5 + 3);
          if (v10 < v32 && v9 < v33) {
            goto LABEL_156;
          }
          if (v35) {
            goto LABEL_156;
          }
          unint64_t v37 = ((unint64_t)(v22 - 8) >> 3) + 1;
          uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFF8);
          std::string::size_type v39 = &v9[v38];
          BOOL v25 = &v10[v38];
          uint64_t v40 = (long long *)(v10 + 32);
          uint64_t v41 = v9 + 32;
          uint64_t v42 = v37 & 0x3FFFFFFFFFFFFFF8;
          do
          {
            long long v44 = *(v40 - 2);
            long long v43 = *(v40 - 1);
            long long v46 = *v40;
            long long v45 = v40[1];
            v40 += 4;
            *(v41 - 2) = v44;
            *(v41 - 1) = v43;
            _OWORD *v41 = v46;
            v41[1] = v45;
            v41 += 4;
            v42 -= 8;
          }
          while (v42);
          unint64_t v9 = v39;
          if (v37 != (v37 & 0x3FFFFFFFFFFFFFF8))
          {
LABEL_156:
            do
            {
LABEL_25:
              *(_DWORD *)unint64_t v9 = *(_DWORD *)v25;
              *((_DWORD *)v9 + 1) = *((_DWORD *)v25 + 1);
              v25 += 8;
              v9 += 8;
            }
            while (v25 != v24);
          }
        }
        if (v24 == v11)
        {
          size_t v21 = 0;
        }
        else
        {
          int v26 = &v10[v22];
          unint64_t v27 = v11 - v26 - 8;
          if (v27 < 0x38)
          {
            uint64_t v28 = v18;
            goto LABEL_57;
          }
          unint64_t v47 = v18 - v26;
          uint64_t v28 = v18;
          if (v47 < 0x20) {
            goto LABEL_157;
          }
          uint64_t v48 = (v27 >> 3) + 1;
          uint64_t v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
          v24 += v49;
          uint64_t v28 = &v18[v49];
          uint64_t v50 = v18 + 16;
          size_t v51 = &v10[8 * v23 + 16];
          uint64_t v52 = v48 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v53 = *(_OWORD *)v51;
            *(v50 - 1) = *((_OWORD *)v51 - 1);
            *uint64_t v50 = v53;
            v50 += 2;
            v51 += 32;
            v52 -= 4;
          }
          while (v52);
          if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_157:
            do
            {
LABEL_57:
              uint64_t v54 = *(void *)v24;
              v24 += 8;
              *(void *)uint64_t v28 = v54;
              v28 += 8;
            }
            while (v24 != v11);
          }
          size_t v21 = (char *)(v28 - v18);
        }
LABEL_59:
        *char v19 = &v21[(void)v18];
        goto LABEL_60;
      }
      if (v10 == v11)
      {
        uint64_t v30 = (char *)*((void *)v8 + 3);
      }
      else
      {
        unint64_t v29 = v12 - 8;
        if ((unint64_t)(v12 - 8) < 0x78)
        {
          uint64_t v30 = (char *)*((void *)v8 + 3);
          goto LABEL_32;
        }
        BOOL v57 = v9 + 4 < &v10[(v29 & 0xFFFFFFFFFFFFFFF8) + 8] && v10 + 4 < &v9[(v29 & 0xFFFFFFFFFFFFFFF8) + 8];
        uint64_t v30 = (char *)*((void *)v8 + 3);
        if (v10 < &v9[(v29 & 0xFFFFFFFFFFFFFFF8) + 4] && v9 < &v10[(v29 & 0xFFFFFFFFFFFFFFF8) + 4]) {
          goto LABEL_158;
        }
        if (v57) {
          goto LABEL_158;
        }
        uint64_t v59 = (v29 >> 3) + 1;
        uint64_t v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFF8);
        uint64_t v30 = &v9[v60];
        int v61 = &v10[v60];
        size_t v62 = (long long *)(v10 + 32);
        uint64_t v63 = v9 + 32;
        uint64_t v64 = v59 & 0x3FFFFFFFFFFFFFF8;
        do
        {
          long long v66 = *(v62 - 2);
          long long v65 = *(v62 - 1);
          long long v68 = *v62;
          long long v67 = v62[1];
          v62 += 4;
          *(v63 - 2) = v66;
          *(v63 - 1) = v65;
          *uint64_t v63 = v68;
          v63[1] = v67;
          v63 += 4;
          v64 -= 8;
        }
        while (v64);
        int v10 = v61;
        if (v59 != (v59 & 0x3FFFFFFFFFFFFFF8))
        {
LABEL_158:
          do
          {
LABEL_32:
            *(_DWORD *)uint64_t v30 = *(_DWORD *)v10;
            *((_DWORD *)v30 + 1) = *((_DWORD *)v10 + 1);
            v30 += 8;
            v10 += 8;
          }
          while (v10 != v11);
        }
      }
      size_t v21 = (char *)(v30 - v9);
      size_t v18 = v9;
      goto LABEL_59;
    }
LABEL_60:
    uint64_t v55 = *(char **)v8;
    sub_1C4ACBBB8((uint64_t)v4, (uint64_t)v8);
    id v5 = *(char **)v5;
    float v8 = v55;
    if (!v55) {
      goto LABEL_81;
    }
  }
  do
  {
    uint64_t v69 = *(char **)v8;
    uint64_t v70 = (void *)*((void *)v8 + 3);
    if (v70)
    {
      *((void *)v8 + 4) = v70;
      operator delete(v70);
    }
    operator delete(v8);
    float v8 = v69;
  }
  while (v69);
LABEL_86:
  uint64_t v78 = (void **)(a1 + 720);
  if ((uint64_t *)(a1 + 720) == a3)
  {
LABEL_128:
    size_t v100 = (void *)(a1 + 680);
    if (!*(void *)(a1 + 704)) {
      goto LABEL_135;
    }
    goto LABEL_129;
  }
  uint64_t v80 = *a3;
  uint64_t v79 = a3[1];
  unint64_t v81 = 0xCCCCCCCCCCCCCCCDLL * ((v79 - *a3) >> 3);
  uint64_t v82 = *(void *)(a1 + 736);
  uint64_t v83 = *(void *)(a1 + 720);
  if (0xCCCCCCCCCCCCCCCDLL * ((v82 - v83) >> 3) < v81)
  {
    if (v83)
    {
      uint64_t v84 = *(void **)(a1 + 728);
      uint64_t v85 = *(void **)(a1 + 720);
      if (v84 != (void *)v83)
      {
        do
        {
          int v86 = (void *)*(v84 - 3);
          if (v86)
          {
            do
            {
              uint64_t v87 = (void *)*v86;
              operator delete(v86);
              int v86 = v87;
            }
            while (v87);
          }
          uint64_t v89 = (void *)*(v84 - 5);
          v84 -= 5;
          uint64_t v88 = v89;
          void *v84 = 0;
          if (v89) {
            operator delete(v88);
          }
        }
        while (v84 != (void *)v83);
        uint64_t v85 = *v78;
      }
      *(void *)(a1 + 728) = v83;
      operator delete(v85);
      uint64_t v82 = 0;
      *uint64_t v78 = 0;
      *(void *)(a1 + 728) = 0;
      *(void *)(a1 + 736) = 0;
    }
    if (v81 > 0x666666666666666) {
      goto LABEL_153;
    }
    unint64_t v94 = 0xCCCCCCCCCCCCCCCDLL * (v82 >> 3);
    uint64_t v95 = 2 * v94;
    if (2 * v94 <= v81) {
      uint64_t v95 = v81;
    }
    unint64_t v96 = v94 >= 0x333333333333333 ? 0x666666666666666 : v95;
    if (v96 > 0x666666666666666) {
LABEL_153:
    }
      sub_1C494A220();
    uint64_t v97 = 40 * v96;
    int v98 = (char *)operator new(40 * v96);
    *(void *)(a1 + 720) = v98;
    *(void *)(a1 + 728) = v98;
    *(void *)(a1 + 736) = &v98[v97];
    if (v80 != v79)
    {
      uint64_t v99 = 0;
      do
      {
        sub_1C4ACC244((uint64_t)&v98[v99], v80 + v99);
        v99 += 40;
      }
      while (v80 + v99 != v79);
      v98 += v99;
    }
    *(void *)(a1 + 728) = v98;
    size_t v100 = (void *)(a1 + 680);
    if (!*(void *)(a1 + 704)) {
      goto LABEL_135;
    }
LABEL_129:
    size_t v103 = *(void **)(a1 + 696);
    if (v103)
    {
      do
      {
        uint64_t v104 = (void *)*v103;
        operator delete(v103);
        size_t v103 = v104;
      }
      while (v104);
    }
    *(void *)(a1 + 696) = 0;
    uint64_t v105 = *(void *)(a1 + 688);
    if (v105)
    {
      for (uint64_t j = 0; j != v105; ++j)
        *(void *)(*v100 + 8 * j) = 0;
    }
    *(void *)(a1 + 704) = 0;
    goto LABEL_135;
  }
  uint64_t v90 = *(void **)(a1 + 728);
  if (0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v90 - v83) >> 3) < v81)
  {
    uint64_t v91 = v80 + 8 * (((uint64_t)v90 - v83) >> 3);
    if (v90 != (void *)v83)
    {
      uint64_t v92 = 8 * (((uint64_t)v90 - v83) >> 3);
      do
      {
        if (v80 != v83)
        {
          *(_DWORD *)(v83 + 32) = *(_DWORD *)(v80 + 32);
          sub_1C4ACC11C((void *)v83, *(uint64_t **)(v80 + 16), 0);
        }
        v80 += 40;
        v83 += 40;
        v92 -= 40;
      }
      while (v92);
      uint64_t v83 = *(void *)(a1 + 728);
    }
    uint64_t v101 = v83;
    if (v91 != v79)
    {
      uint64_t v102 = 0;
      do
      {
        sub_1C4ACC244(v83 + v102, v91 + v102);
        v102 += 40;
      }
      while (v91 + v102 != v79);
      uint64_t v101 = v83 + v102;
    }
    *(void *)(a1 + 728) = v101;
    goto LABEL_128;
  }
  if (v80 == v79)
  {
    size_t v93 = *(void **)(a1 + 720);
  }
  else
  {
    size_t v93 = *(void **)(a1 + 720);
    do
    {
      if (v80 != v83)
      {
        *(_DWORD *)(v83 + 32) = *(_DWORD *)(v80 + 32);
        sub_1C4ACC11C((void *)v83, *(uint64_t **)(v80 + 16), 0);
      }
      v80 += 40;
      v83 += 40;
      v93 += 5;
    }
    while (v80 != v79);
    uint64_t v90 = *(void **)(a1 + 728);
  }
  while (v90 != v93)
  {
    uint64_t v111 = (void *)*(v90 - 3);
    if (v111)
    {
      do
      {
        uint64_t v112 = (void *)*v111;
        operator delete(v111);
        uint64_t v111 = v112;
      }
      while (v112);
    }
    uint64_t v114 = (void *)*(v90 - 5);
    v90 -= 5;
    uint64_t v113 = v114;
    *uint64_t v90 = 0;
    if (v114) {
      operator delete(v113);
    }
  }
  *(void *)(a1 + 728) = v93;
  size_t v100 = (void *)(a1 + 680);
  if (*(void *)(a1 + 704)) {
    goto LABEL_129;
  }
LABEL_135:
  uint64_t v107 = *(void *)(a1 + 728);
  uint64_t v108 = *(void *)(a1 + 720);
  if (v107 != v108)
  {
    unint64_t v109 = 0;
    do
    {
      unint64_t v110 = *(uint64_t **)(v108 + 40 * v109 + 16);
      if (v110)
      {
        do
        {
          int v116 = *((_DWORD *)v110 + 4);
          uint64_t v117 = &v116;
          *((_DWORD *)sub_1C4ACC388((uint64_t)v100, &v116, (uint64_t)&unk_1C4C39B40, &v117) + 5) = v109;
          unint64_t v110 = (uint64_t *)*v110;
        }
        while (v110);
        uint64_t v107 = *(void *)(a1 + 728);
        uint64_t v108 = *(void *)(a1 + 720);
      }
      ++v109;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v107 - v108) >> 3) > v109);
  }
}

void sub_1C4AC059C(_Unwind_Exception *a1)
{
  if (v4)
  {
    do
    {
      uint64_t v6 = (void *)*(v3 - 3);
      if (v6)
      {
        do
        {
          unint64_t v7 = (void *)*v6;
          operator delete(v6);
          uint64_t v6 = v7;
        }
        while (v7);
      }
      unint64_t v9 = (void *)*(v3 - 5);
      v3 -= 5;
      float v8 = v9;
      void *v3 = 0;
      if (v9) {
        operator delete(v8);
      }
    }
    while (v3 != v2);
  }
  *(void *)(v1 + 728) = v2;
  _Unwind_Resume(a1);
}

void sub_1C4AC05E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C4AC05F8(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void CoreHandwriting::CHMathBeamDecoder::initialState(void *a1@<X1>, uint64_t a2@<X8>)
{
  id v3 = a1;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 + 32;
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 176) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = a2 + 176;
  *(_DWORD *)(a2 + 192) = 0;
  *(unsigned char *)(a2 + 196) = 0;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  id v116 = v3;
  float v8 = objc_msgSend_featureValueForName_(v3, v4, @"decoder_state_h", v5, v6, v7);
  uint64_t v14 = objc_msgSend_multiArrayValue(v8, v9, v10, v11, v12, v13);
  uint64_t v18 = objc_msgSend_squeezeDimensions_error_(v14, v15, (uint64_t)&unk_1F203DB78, 0, v16, v17);
  int v24 = (const char *)objc_msgSend_UTF8String(@"decoder_state_h", v19, v20, v21, v22, v23);
  size_t v25 = strlen(v24);
  if (v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_1C4949B7C();
  }
  size_t v26 = v25;
  if (v25 >= 0x17)
  {
    uint64_t v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17) {
      uint64_t v28 = v25 | 7;
    }
    uint64_t v29 = v28 + 1;
    p_dst = (void **)operator new(v28 + 1);
    size_t v118 = v26;
    unint64_t v119 = v29 | 0x8000000000000000;
    long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v119) = v25;
  p_dst = (void **)&__dst;
  if (v25) {
LABEL_8:
  }
    memmove(p_dst, v24, v26);
  *((unsigned char *)p_dst + v26) = 0;
  uint64_t v30 = sub_1C4ACA384((uint64_t **)a2, (const void **)&__dst, (uint64_t)&__dst);
  unint64_t v31 = v30[7];
  v30[7] = (uint64_t *)v18;

  if (SHIBYTE(v119) < 0) {
    operator delete(__dst);
  }

  uint64_t v36 = objc_msgSend_featureValueForName_(v116, v32, @"decoder_state_c", v33, v34, v35);
  uint64_t v42 = objc_msgSend_multiArrayValue(v36, v37, v38, v39, v40, v41);
  uint64_t v46 = objc_msgSend_squeezeDimensions_error_(v42, v43, (uint64_t)&unk_1F203DB90, 0, v44, v45);
  uint64_t v52 = (const char *)objc_msgSend_UTF8String(@"decoder_state_c", v47, v48, v49, v50, v51);
  size_t v53 = strlen(v52);
  if (v53 > 0x7FFFFFFFFFFFFFF7) {
    sub_1C4949B7C();
  }
  size_t v54 = v53;
  if (v53 >= 0x17)
  {
    uint64_t v56 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v53 | 7) != 0x17) {
      uint64_t v56 = v53 | 7;
    }
    uint64_t v57 = v56 + 1;
    uint64_t v55 = (void **)operator new(v56 + 1);
    size_t v118 = v54;
    unint64_t v119 = v57 | 0x8000000000000000;
    long long __dst = v55;
    goto LABEL_18;
  }
  HIBYTE(v119) = v53;
  uint64_t v55 = (void **)&__dst;
  if (v53) {
LABEL_18:
  }
    memmove(v55, v52, v54);
  *((unsigned char *)v55 + v54) = 0;
  uint64_t v58 = sub_1C4ACA384((uint64_t **)a2, (const void **)&__dst, (uint64_t)&__dst);
  uint64_t v59 = v58[7];
  v58[7] = (uint64_t *)v46;

  if (SHIBYTE(v119) < 0) {
    operator delete(__dst);
  }

  uint64_t v64 = objc_msgSend_featureValueForName_(v116, v60, @"past_attention_weights", v61, v62, v63);
  uint64_t v70 = objc_msgSend_multiArrayValue(v64, v65, v66, v67, v68, v69);
  uint64_t v74 = objc_msgSend_squeezeDimensions_error_(v70, v71, (uint64_t)&unk_1F203DBA8, 0, v72, v73);
  uint64_t v80 = (const char *)objc_msgSend_UTF8String(@"past_attention_weights", v75, v76, v77, v78, v79);
  size_t v81 = strlen(v80);
  if (v81 > 0x7FFFFFFFFFFFFFF7) {
    sub_1C4949B7C();
  }
  size_t v82 = v81;
  if (v81 >= 0x17)
  {
    uint64_t v84 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v81 | 7) != 0x17) {
      uint64_t v84 = v81 | 7;
    }
    uint64_t v85 = v84 + 1;
    uint64_t v83 = (void **)operator new(v84 + 1);
    size_t v118 = v82;
    unint64_t v119 = v85 | 0x8000000000000000;
    long long __dst = v83;
    goto LABEL_28;
  }
  HIBYTE(v119) = v81;
  uint64_t v83 = (void **)&__dst;
  if (v81) {
LABEL_28:
  }
    memmove(v83, v80, v82);
  *((unsigned char *)v83 + v82) = 0;
  int v86 = sub_1C4ACA384((uint64_t **)a2, (const void **)&__dst, (uint64_t)&__dst);
  uint64_t v87 = v86[7];
  v86[7] = (uint64_t *)v74;

  if (SHIBYTE(v119) < 0) {
    operator delete(__dst);
  }

  uint64_t v92 = objc_msgSend_featureValueForName_(v116, v88, @"y", v89, v90, v91);
  int v98 = objc_msgSend_multiArrayValue(v92, v93, v94, v95, v96, v97);
  uint64_t v102 = objc_msgSend_squeezeDimensions_error_(v98, v99, (uint64_t)&unk_1F203DBC0, 0, v100, v101);
  uint64_t v108 = (const char *)objc_msgSend_UTF8String(@"y", v103, v104, v105, v106, v107);
  size_t v109 = strlen(v108);
  if (v109 > 0x7FFFFFFFFFFFFFF7) {
    sub_1C4949B7C();
  }
  size_t v110 = v109;
  if (v109 >= 0x17)
  {
    uint64_t v112 = (v109 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v109 | 7) != 0x17) {
      uint64_t v112 = v109 | 7;
    }
    uint64_t v113 = v112 + 1;
    uint64_t v111 = (void **)operator new(v112 + 1);
    size_t v118 = v110;
    unint64_t v119 = v113 | 0x8000000000000000;
    long long __dst = v111;
    goto LABEL_38;
  }
  HIBYTE(v119) = v109;
  uint64_t v111 = (void **)&__dst;
  if (v109) {
LABEL_38:
  }
    memmove(v111, v108, v110);
  *((unsigned char *)v111 + v110) = 0;
  uint64_t v114 = sub_1C4ACA384((uint64_t **)a2, (const void **)&__dst, (uint64_t)&__dst);
  uint64_t v115 = v114[7];
  v114[7] = (uint64_t *)v102;

  if (SHIBYTE(v119) < 0) {
    operator delete(__dst);
  }
}

void sub_1C4AC0AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  sub_1C4AC89C8(v15);
  _Unwind_Resume(a1);
}

void sub_1C4AC0B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  sub_1C4AC89C8(v9);

  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::CHMathBeamDecoder::applyBeamScorers(CoreHandwriting::CHMathBeamDecoder *this, CoreHandwriting::CHEncoderDecoderBeamState *a2)
{
  char v8 = 0;
  uint64_t v2 = *((void *)this + 67);
  if (*((void *)this + 68) == v2) {
    return 1;
  }
  unint64_t v5 = 0;
  LOBYTE(v6) = 1;
  do
  {
    *((float *)a2 + 48) = (***(float (****)(void, CoreHandwriting::CHEncoderDecoderBeamState *, char *))(v2 + 8 * v5))(*(void *)(v2 + 8 * v5), a2, &v8)+ *((float *)a2 + 48);
    uint64_t v6 = v6 & (v8 != 0);
    ++v5;
    uint64_t v2 = *((void *)this + 67);
  }
  while (v5 < (*((void *)this + 68) - v2) >> 3);
  return v6;
}

void CoreHandwriting::CHMathBeamDecoder::expand(CoreHandwriting::CHMathBeamDecoder *this@<X0>, uint64_t **a2@<X1>, NSDictionary *a3@<X3>, int a4@<W2>, int a5@<W4>, int a6@<W5>, void *a7@<X8>)
{
  id v333 = a3;
  uint64_t v15 = (const char *)objc_msgSend_UTF8String(@"decoder_state_h", v10, v11, v12, v13, v14);
  size_t v16 = strlen(v15);
  if (v16 > 0x7FFFFFFFFFFFFFF7) {
    sub_1C4949B7C();
  }
  size_t v21 = v16;
  if (v16 >= 0x17)
  {
    uint64_t v23 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v23 = v16 | 7;
    }
    uint64_t v24 = v23 + 1;
    p_dst = (long long *)operator new(v23 + 1);
    *((void *)&__dst + 1) = v21;
    *(void *)&long long v357 = v24 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  BYTE7(v357) = v16;
  p_dst = &__dst;
  if (v16) {
LABEL_8:
  }
    memmove(p_dst, v15, v21);
  *((unsigned char *)p_dst + v21) = 0;
  size_t v25 = objc_msgSend_objectForKeyedSubscript_(v333, v17, @"new_decoder_state_h", v18, v19, v20);
  sub_1C4AB8D9C(a2, (const void **)&__dst, v25, a5);

  if (SBYTE7(v357) < 0) {
    operator delete((void *)__dst);
  }
  unint64_t v31 = (const char *)objc_msgSend_UTF8String(@"decoder_state_c", v26, v27, v28, v29, v30);
  size_t v32 = strlen(v31);
  if (v32 > 0x7FFFFFFFFFFFFFF7) {
    sub_1C4949B7C();
  }
  size_t v37 = v32;
  if (v32 >= 0x17)
  {
    uint64_t v39 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17) {
      uint64_t v39 = v32 | 7;
    }
    uint64_t v40 = v39 + 1;
    uint64_t v38 = (long long *)operator new(v39 + 1);
    *((void *)&__dst + 1) = v37;
    *(void *)&long long v357 = v40 | 0x8000000000000000;
    *(void *)&long long __dst = v38;
    goto LABEL_18;
  }
  BYTE7(v357) = v32;
  uint64_t v38 = &__dst;
  if (v32) {
LABEL_18:
  }
    memmove(v38, v31, v37);
  *((unsigned char *)v38 + v37) = 0;
  uint64_t v41 = objc_msgSend_objectForKeyedSubscript_(v333, v33, @"new_decoder_state_c", v34, v35, v36);
  sub_1C4AB8D9C(a2, (const void **)&__dst, v41, a5);

  if (SBYTE7(v357) < 0) {
    operator delete((void *)__dst);
  }
  unint64_t v47 = (const char *)objc_msgSend_UTF8String(@"attention_weights", v42, v43, v44, v45, v46);
  size_t v48 = strlen(v47);
  if (v48 > 0x7FFFFFFFFFFFFFF7) {
    sub_1C4949B7C();
  }
  size_t v53 = v48;
  if (v48 >= 0x17)
  {
    uint64_t v55 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v48 | 7) != 0x17) {
      uint64_t v55 = v48 | 7;
    }
    uint64_t v56 = v55 + 1;
    size_t v54 = (long long *)operator new(v55 + 1);
    *((void *)&__dst + 1) = v53;
    *(void *)&long long v357 = v56 | 0x8000000000000000;
    *(void *)&long long __dst = v54;
    goto LABEL_28;
  }
  BYTE7(v357) = v48;
  size_t v54 = &__dst;
  if (v48) {
LABEL_28:
  }
    memmove(v54, v47, v53);
  *((unsigned char *)v54 + v53) = 0;
  uint64_t v57 = objc_msgSend_objectForKeyedSubscript_(v333, v49, @"attention_weights", v50, v51, v52);
  sub_1C4AB8D9C(a2, (const void **)&__dst, v57, a5);

  if (SBYTE7(v357) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v63 = (const char *)objc_msgSend_UTF8String(@"y", v58, v59, v60, v61, v62);
  size_t v64 = strlen(v63);
  if (v64 > 0x7FFFFFFFFFFFFFF7) {
    sub_1C4949B7C();
  }
  size_t v69 = v64;
  if (v64 >= 0x17)
  {
    uint64_t v71 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v64 | 7) != 0x17) {
      uint64_t v71 = v64 | 7;
    }
    uint64_t v72 = v71 + 1;
    uint64_t v70 = (long long *)operator new(v71 + 1);
    *((void *)&__dst + 1) = v69;
    *(void *)&long long v357 = v72 | 0x8000000000000000;
    *(void *)&long long __dst = v70;
    goto LABEL_38;
  }
  BYTE7(v357) = v64;
  uint64_t v70 = &__dst;
  if (v64) {
LABEL_38:
  }
    memmove(v70, v63, v69);
  *((unsigned char *)v70 + v69) = 0;
  uint64_t v73 = objc_msgSend_objectForKeyedSubscript_(v333, v65, @"y", v66, v67, v68);
  sub_1C4AB8D9C(a2, (const void **)&__dst, v73, a5);

  if (SBYTE7(v357) < 0) {
    operator delete((void *)__dst);
  }
  BYTE7(v357) = 1;
  LOWORD(__dst) = 121;
  uint64_t v74 = sub_1C4ACA384(a2, (const void **)&__dst, (uint64_t)&__dst);
  unint64_t v80 = objc_msgSend_count(v74[7], v75, v76, v77, v78, v79);
  unint64_t v81 = v80;
  float v353 = 0;
  v354 = 0;
  uint64_t v355 = 0;
  if (v80)
  {
    if (v80 >> 61) {
      sub_1C494A220();
    }
    uint64_t v82 = 2 * v80;
    uint64_t v83 = operator new(8 * v80);
    float v353 = (float *)v83;
    uint64_t v355 = (char *)&v83[2 * v81];
    bzero(v83, 8 * v81);
    unint64_t v81 = (unint64_t)&v83[v82];
    v354 = (float *)&v83[v82];
    if ((SBYTE7(v357) & 0x80000000) == 0) {
      goto LABEL_45;
    }
  }
  else
  {
    uint64_t v83 = 0;
    if ((SBYTE7(v357) & 0x80000000) == 0) {
      goto LABEL_45;
    }
  }
  operator delete((void *)__dst);
LABEL_45:
  BYTE7(v357) = 1;
  LOWORD(__dst) = 121;
  uint64_t v84 = sub_1C4ACA384(a2, (const void **)&__dst, (uint64_t)&__dst)[7];
  uint64_t v90 = objc_msgSend_dataPointer(v84, v85, v86, v87, v88, v89);
  if (SBYTE7(v357) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v91 = 0;
  for (uint64_t i = v83 + 1; ; i += 2)
  {
    BYTE7(v357) = 1;
    LOWORD(__dst) = 121;
    size_t v93 = sub_1C4ACA384(a2, (const void **)&__dst, (uint64_t)&__dst);
    uint64_t v99 = objc_msgSend_count(v93[7], v94, v95, v96, v97, v98);
    if (SBYTE7(v357) < 0) {
      operator delete((void *)__dst);
    }
    if (v99 <= v91) {
      break;
    }
    *(i - 1) = *(_DWORD *)(v90 + 4 * v91);
    *uint64_t i = v91++;
  }
  uint64_t v350 = 0;
  uint64_t v351 = 0;
  uint64_t v352 = 0;
  unint64_t v100 = v81 - (void)v83;
  uint64_t v101 = (uint64_t)(v81 - (void)v83) >> 3;
  if ((_DWORD *)v81 == v83)
  {
    uint64_t v102 = 0;
  }
  else
  {
    if ((v100 & 0x8000000000000000) != 0) {
      sub_1C494A220();
    }
    uint64_t v102 = (char *)operator new(v100 >> 1);
    uint64_t v350 = v102;
    uint64_t v352 = &v102[4 * v101];
    bzero(v102, 4 * v101);
    uint64_t v351 = v352;
  }
  unint64_t v103 = 0;
  int v343 = a4;
  while (1)
  {
    BYTE7(v357) = 1;
    LOWORD(__dst) = 121;
    uint64_t v104 = sub_1C4ACA384(a2, (const void **)&__dst, (uint64_t)&__dst);
    uint64_t v110 = objc_msgSend_count(v104[7], v105, v106, v107, v108, v109);
    if (SBYTE7(v357) < 0) {
      operator delete((void *)__dst);
    }
    if (v110 <= (uint64_t)v103) {
      break;
    }
    float v111 = *(float *)&v83[2 * v103];
    if (v111 > *((float *)this + 191))
    {
      int8x8_t v112 = *(int8x8_t *)((char *)this + 648);
      if (v112)
      {
        uint8x8_t v113 = (uint8x8_t)vcnt_s8(v112);
        v113.i16[0] = vaddlv_u8(v113);
        if (v113.u32[0] > 1uLL)
        {
          unint64_t v114 = v103;
          if (*(void *)&v112 <= v103) {
            unint64_t v114 = v103 % *(void *)&v112;
          }
        }
        else
        {
          unint64_t v114 = (*(void *)&v112 + 0x7FFFFFFFLL) & v103;
        }
        uint64_t v115 = *((void *)this + 80);
        id v116 = *(uint64_t ***)(v115 + 8 * v114);
        if (v116)
        {
          uint64_t v117 = *v116;
          if (*v116)
          {
            uint64_t v118 = *(void *)&v112 - 1;
            if (v113.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v119 = v117[1];
                if (v119 == v103)
                {
                  if (v103 == *((_DWORD *)v117 + 4)) {
                    goto LABEL_85;
                  }
                }
                else if ((v119 & v118) != v114)
                {
                  goto LABEL_59;
                }
                uint64_t v117 = (uint64_t *)*v117;
                if (!v117) {
                  goto LABEL_59;
                }
              }
            }
            do
            {
              unint64_t v120 = v117[1];
              if (v120 == v103)
              {
                if (v103 == *((_DWORD *)v117 + 4))
                {
LABEL_85:
                  if (v113.u32[0] > 1uLL)
                  {
                    unint64_t v121 = v103;
                    if (*(void *)&v112 <= v103) {
                      unint64_t v121 = v103 % *(void *)&v112;
                    }
                  }
                  else
                  {
                    unint64_t v121 = (*(void *)&v112 + 0x7FFFFFFFLL) & v103;
                  }
                  uint64_t v122 = *(uint64_t ***)(v115 + 8 * v121);
                  if (!v122 || (size_t v123 = *v122) == 0) {
LABEL_429:
                  }
                    sub_1C49470F0("unordered_map::at: key not found");
                  if (v113.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      uint64_t v124 = v123[1];
                      if (v124 == v103)
                      {
                        if (v103 == *((_DWORD *)v123 + 4)) {
                          goto LABEL_97;
                        }
                      }
                      else if ((v124 & v118) != v121)
                      {
                        goto LABEL_429;
                      }
                      size_t v123 = (uint64_t *)*v123;
                      if (!v123) {
                        goto LABEL_429;
                      }
                    }
                  }
                  while (1)
                  {
                    unint64_t v128 = v123[1];
                    if (v128 == v103)
                    {
                      if (v103 == *((_DWORD *)v123 + 4))
                      {
LABEL_97:
                        int v125 = (float *)v123[3];
                        uint64_t v126 = (int *)v123[4];
                        while (v125 != (float *)v126)
                        {
                          uint64_t v127 = *(int *)v125;
                          if (*(float *)&v83[2 * v127] < v111)
                          {
                            *(float *)&v102[4 * v127] = *(float *)&v102[4 * v127] + (float)(v111 * v125[1]);
                            int v343 = (int)fmin((double)(v343 + 1), (double)(*((_DWORD *)this + 188) + a4));
                          }
                          v125 += 2;
                        }
                        goto LABEL_59;
                      }
                    }
                    else
                    {
                      if (v128 >= *(void *)&v112) {
                        v128 %= *(void *)&v112;
                      }
                      if (v128 != v121) {
                        goto LABEL_429;
                      }
                    }
                    size_t v123 = (uint64_t *)*v123;
                    if (!v123) {
                      goto LABEL_429;
                    }
                  }
                }
              }
              else
              {
                if (v120 >= *(void *)&v112) {
                  v120 %= *(void *)&v112;
                }
                if (v120 != v114) {
                  break;
                }
              }
              uint64_t v117 = (uint64_t *)*v117;
            }
            while (v117);
          }
        }
      }
    }
LABEL_59:
    ++v103;
  }
  unint64_t v346 = v81;
  unint64_t v129 = (uint64_t)(v81 - (void)v83) >> 3;
  uint64_t v130 = 0;
  for (uint64_t j = (float *)v83; ; j += 2)
  {
    BYTE7(v357) = 1;
    LOWORD(__dst) = 121;
    uint64_t v132 = sub_1C4ACA384(a2, (const void **)&__dst, (uint64_t)&__dst);
    uint64_t v138 = objc_msgSend_count(v132[7], v133, v134, v135, v136, v137);
    if (SBYTE7(v357) < 0) {
      operator delete((void *)__dst);
    }
    if (v138 <= v130) {
      break;
    }
    *uint64_t j = *(float *)&v102[4 * v130++] + *j;
  }
  unint64_t v139 = 126 - 2 * __clz(v129);
  if ((_DWORD *)v346 == v83) {
    uint64_t v140 = 0;
  }
  else {
    uint64_t v140 = v139;
  }
  sub_1C4ACC6B0((uint64_t)v83, v346, v140, 1);
  long long v141 = a7;
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  if ((_DWORD *)v346 != v83)
  {
    uint64_t v344 = 0;
    uint64_t v338 = a7 + 2;
    uint64_t v332 = (int *)(a2 + 4);
    id v334 = a2 + 22;
    std::string __str = (std::string *)(a2 + 28);
    uint64_t v336 = (int **)(a2 + 3);
    unint64_t v347 = a2;
    while (1)
    {
      uint64_t v143 = *v141;
      unint64_t v142 = v141[1];
      unint64_t v144 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v142 - *v141) >> 3);
      int v145 = *((_DWORD *)this + 187);
      if (v343 > v145) {
        int v145 = v343;
      }
      if (v144 >= v145)
      {
LABEL_423:
        uint64_t v102 = v350;
        break;
      }
      uint64_t v146 = (float *)&v83[2 * v344];
      int v345 = *((_DWORD *)v146 + 1);
      float v147 = *v146;
      if (v142 >= *v338)
      {
        unint64_t v149 = v144 + 1;
        if (v144 + 1 > 0x108421084210842) {
          sub_1C494A220();
        }
        if (0xDEF7BDEF7BDEF7BELL * ((uint64_t)(*v338 - v143) >> 3) > v149) {
          unint64_t v149 = 0xDEF7BDEF7BDEF7BELL * ((uint64_t)(*v338 - v143) >> 3);
        }
        if (0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*v338 - v143) >> 3) >= 0x84210842108421) {
          unint64_t v150 = 0x108421084210842;
        }
        else {
          unint64_t v150 = v149;
        }
        uint64_t v358 = a7 + 2;
        if (v150)
        {
          if (v150 > 0x108421084210842) {
            goto LABEL_430;
          }
          int v151 = (char *)operator new(248 * v150);
        }
        else
        {
          int v151 = 0;
        }
        uint64_t v152 = 0;
        uint64_t v153 = &v151[248 * v144];
        *((void *)v153 + 1) = 0;
        *(void *)uint64_t v153 = v153 + 8;
        *((void *)v153 + 4) = 0;
        *((void *)v153 + 2) = 0;
        *((void *)v153 + 3) = v153 + 32;
        *((void *)v153 + 22) = 0;
        *((void *)v153 + 20) = 0;
        *((void *)v153 + 21) = v153 + 176;
        *(void *)&long long v357 = v153 + 248;
        *((void *)&v357 + 1) = &v151[248 * v150];
        *(void *)&long long __dst = v151;
        *((void *)&__dst + 1) = v153;
        *((void *)v153 + 5) = 0;
        *((void *)v153 + 23) = 0;
        *((_OWORD *)v153 + 3) = 0u;
        *((_OWORD *)v153 + 4) = 0u;
        *((_OWORD *)v153 + 5) = 0u;
        *((_OWORD *)v153 + 6) = 0u;
        *((_OWORD *)v153 + 7) = 0u;
        *((_OWORD *)v153 + 8) = 0u;
        *((_OWORD *)v153 + 9) = 0u;
        *((_DWORD *)v153 + 48) = 0;
        v153[196] = 0;
        *(_OWORD *)(v153 + 200) = 0u;
        *(_OWORD *)(v153 + 216) = 0u;
        *(_OWORD *)(v153 + 232) = 0u;
        a2 = v347;
        while (v142 + v152 != v143)
        {
          v152 -= 248;
          sub_1C4AC8B58((uint64_t **)&v153[v152], v152 + v142);
        }
        int v155 = (void *)*a7;
        uint64_t v154 = a7[1];
        *a7 = &v153[v152];
        unint64_t v341 = v357;
        for (*(_OWORD *)(a7 + 1) = v357; (void *)v154 != v155; uint64_t v154 = sub_1C4AC89C8(v154 - 248))
          ;
        if (v155) {
          operator delete(v155);
        }
        unint64_t v148 = v341;
        long long v141 = a7;
      }
      else
      {
        *(void *)(v142 + 8) = 0;
        *(void *)unint64_t v142 = v142 + 8;
        *(void *)(v142 + 40) = 0;
        *(void *)(v142 + 32) = 0;
        *(void *)(v142 + 16) = 0;
        *(void *)(v142 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v142 + 32;
        *(void *)(v142 + 184) = 0;
        *(void *)(v142 + 176) = 0;
        *(_OWORD *)(v142 + 48) = 0u;
        *(_OWORD *)(v142 + 64) = 0u;
        *(_OWORD *)(v142 + 80) = 0u;
        *(_OWORD *)(v142 + 96) = 0u;
        *(_OWORD *)(v142 + 112) = 0u;
        *(_OWORD *)(v142 + 128) = 0u;
        *(_OWORD *)(v142 + 144) = 0u;
        *(void *)(v142 + 160) = 0;
        *(void *)(v142 + 168) = v142 + 176;
        *(_DWORD *)(v142 + 192) = 0;
        *(unsigned char *)(v142 + 196) = 0;
        *(_OWORD *)(v142 + 232) = 0u;
        *(_OWORD *)(v142 + 216) = 0u;
        unint64_t v148 = v142 + 248;
        *(_OWORD *)(v142 + 200) = 0u;
      }
      v141[1] = v148;
      CoreHandwriting::CHEncoderDecoderBeamState::copyTensors((uint64_t **)(v148 - 248), (const CoreHandwriting::CHEncoderDecoderBeamState **)a2);
      if ((uint64_t **)(v148 - 248) != v347)
      {
        sub_1C499DEE4((void *)(v148 - 176), (char *)v347[9], (char *)v347[10], ((char *)v347[10] - (char *)v347[9]) >> 2);
        sub_1C499DEE4((void *)(v148 - 152), (char *)v347[12], (char *)v347[13], ((char *)v347[13] - (char *)v347[12]) >> 2);
        int v156 = v347;
        uint64_t v157 = v347[19];
        if (v157)
        {
          uint64_t v158 = *(void **)(v148 - 104);
          if ((unint64_t)v157 > *(void *)(v148 - 88) << 6)
          {
            if (v158)
            {
              operator delete(v158);
              *(void *)(v148 - 104) = 0;
              *(void *)(v148 - 96) = 0;
              *(void *)(v148 - 88) = 0;
              uint64_t v157 = v347[19];
            }
            if (((unint64_t)v157 & 0x8000000000000000) != 0) {
              sub_1C494A220();
            }
            unint64_t v159 = (((unint64_t)v157 - 1) >> 6) + 1;
            uint64_t v158 = operator new(8 * v159);
            *(void *)(v148 - 104) = v158;
            *(void *)(v148 - 96) = 0;
            *(void *)(v148 - 88) = v159;
            int v156 = v347;
            uint64_t v157 = v347[19];
          }
          memmove(v158, v156[18], ((((unint64_t)v157 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
          uint64_t v157 = v156[19];
        }
        *(void *)(v148 - 96) = v157;
        sub_1C494ACB0((void *)(v148 - 128), (char *)v156[15], (char *)v156[16], v156[16] - v156[15]);
        sub_1C4AC9E9C(v148 - 80, v347[21], v334);
      }
      uint64_t v160 = *(void *)this;
      std::string::operator=((std::string *)(v148 - 24), __str);
      long long v161 = (const std::string *)(v160 + 24 * v345);
      unsigned int v162 = HIBYTE(v161->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v161->__r_.__value_.__r.__words[2]) < 0)
      {
        if (v161->__r_.__value_.__l.__size_ != 1) {
          goto LABEL_183;
        }
        unsigned int v163 = *v161->__r_.__value_.__l.__data_;
        if ((v163 & 0x80000000) == 0) {
          goto LABEL_156;
        }
      }
      else
      {
        if (v162 != 1) {
          goto LABEL_172;
        }
        unsigned int v163 = v161->__r_.__value_.__s.__data_[0];
        if ((v163 & 0x80000000) == 0)
        {
LABEL_156:
          if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v163 + 60) & 0x100) == 0) {
            goto LABEL_171;
          }
          goto LABEL_157;
        }
      }
      int v169 = __maskrune(v163, 0x100uLL);
      unsigned int v162 = HIBYTE(v161->__r_.__value_.__r.__words[2]);
      if (!v169)
      {
LABEL_171:
        if ((v162 & 0x80) != 0) {
          goto LABEL_164;
        }
        goto LABEL_172;
      }
LABEL_157:
      if ((v162 & 0x80u) == 0) {
        uint64_t v164 = (const std::string::value_type *)(v160 + 24 * v345);
      }
      else {
        uint64_t v164 = (const std::string::value_type *)v161->__r_.__value_.__r.__words[0];
      }
      if ((v162 & 0x80u) == 0) {
        std::string::size_type size = v162;
      }
      else {
        std::string::size_type size = v161->__r_.__value_.__l.__size_;
      }
      std::string::append((std::string *)(v148 - 24), v164, size);
      unsigned int v162 = HIBYTE(v161->__r_.__value_.__r.__words[2]);
      if ((v162 & 0x80) != 0)
      {
LABEL_164:
        if (v161->__r_.__value_.__l.__size_ != 1) {
          goto LABEL_183;
        }
        unsigned int v166 = *v161->__r_.__value_.__l.__data_;
        if ((v166 & 0x80000000) != 0) {
          goto LABEL_166;
        }
        goto LABEL_174;
      }
LABEL_172:
      if (v162 != 1) {
        goto LABEL_177;
      }
      unsigned int v166 = v161->__r_.__value_.__s.__data_[0];
      if ((v166 & 0x80000000) != 0)
      {
LABEL_166:
        if (__maskrune(v166, 0x100uLL)) {
          goto LABEL_167;
        }
        goto LABEL_175;
      }
LABEL_174:
      if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v166 + 60) & 0x100) != 0)
      {
LABEL_167:
        int v167 = 1;
        uint64_t v168 = v347;
        goto LABEL_214;
      }
LABEL_175:
      if ((SHIBYTE(v161->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        unsigned int v162 = HIBYTE(v161->__r_.__value_.__r.__words[2]);
LABEL_177:
        if (v162 != 1) {
          goto LABEL_183;
        }
        int v170 = v161->__r_.__value_.__s.__data_[0];
        if (v170 < 0) {
          goto LABEL_183;
        }
        goto LABEL_179;
      }
      if (v161->__r_.__value_.__l.__size_ != 1) {
        goto LABEL_183;
      }
      int v170 = *v161->__r_.__value_.__l.__data_;
      if (v170 < 0) {
        goto LABEL_183;
      }
LABEL_179:
      if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v170 + 60) & 0x400) != 0)
      {
        int v167 = 0;
        uint64_t v168 = v347;
        goto LABEL_214;
      }
LABEL_183:
      if (!std::string::compare(v161, "."))
      {
        int v167 = 2;
        uint64_t v168 = v347;
      }
      else
      {
        uint64_t v168 = v347;
        if (!std::string::compare(v161, "\\cdot"))
        {
          int v167 = 3;
        }
        else if (!std::string::compare(v161, ","))
        {
          int v167 = 4;
        }
        else if (!std::string::compare(v161, "-"))
        {
          int v167 = 11;
        }
        else if (!std::string::compare(v161, "="))
        {
          int v167 = 9;
        }
        else if (!std::string::compare(v161, "/"))
        {
          int v167 = 10;
        }
        else if (!std::string::compare(v161, "^"))
        {
          int v167 = 13;
        }
        else if (!std::string::compare(v161, "_"))
        {
          int v167 = 12;
        }
        else if (!std::string::compare(v161, "\\frac"))
        {
          int v167 = 14;
        }
        else if (!std::string::compare(v161, "\\sqrt"))
        {
          int v167 = 16;
        }
        else if (!std::string::compare(v161, "{"))
        {
          int v167 = 19;
        }
        else if (!std::string::compare(v161, "}"))
        {
          int v167 = 20;
        }
        else if (!std::string::compare(v161, "["))
        {
          int v167 = 17;
        }
        else if (!std::string::compare(v161, "]"))
        {
          int v167 = 18;
        }
        else if (!std::string::compare(v161, "\\""))
        {
          int v167 = 5;
        }
        else
        {
          int v167 = 6;
        }
      }
LABEL_214:
      uint64_t v342 = (int **)(v148 - 48);
      if ((uint64_t **)(v148 - 248) != v168) {
        sub_1C499DEE4(v342, (char *)v347[25], (char *)v347[26], ((char *)v347[26] - (char *)v347[25]) >> 2);
      }
      long long v172 = *(int **)(v148 - 40);
      unint64_t v171 = *(void *)(v148 - 32);
      if ((unint64_t)v172 < v171)
      {
        *long long v172 = v167;
        uint64_t v173 = (uint64_t)(v172 + 1);
        a2 = v347;
        goto LABEL_238;
      }
      uint64_t v174 = *v342;
      uint64_t v175 = (char *)v172 - (char *)*v342;
      uint64_t v176 = v175 >> 2;
      unint64_t v177 = (v175 >> 2) + 1;
      if (v177 >> 62) {
        sub_1C494A220();
      }
      uint64_t v178 = v171 - (void)v174;
      if (v178 >> 1 > v177) {
        unint64_t v177 = v178 >> 1;
      }
      if ((unint64_t)v178 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v179 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v179 = v177;
      }
      if (v179)
      {
        if (v179 >> 62) {
LABEL_430:
        }
          sub_1C4949AA8();
        uint64_t v180 = operator new(4 * v179);
        uint64_t v181 = (int *)&v180[4 * v176];
        int *v181 = v167;
        uint64_t v173 = (uint64_t)(v181 + 1);
        int64_t v182 = (char *)v172 - (char *)v174;
        if (v172 == v174)
        {
LABEL_230:
          a2 = v347;
          goto LABEL_236;
        }
      }
      else
      {
        uint64_t v180 = 0;
        uint64_t v181 = (int *)(4 * v176);
        *(_DWORD *)(4 * v176) = v167;
        uint64_t v173 = 4 * v176 + 4;
        int64_t v182 = (char *)v172 - (char *)v174;
        if (v172 == v174) {
          goto LABEL_230;
        }
      }
      unint64_t v183 = v182 - 4;
      if (v183 < 0x2C)
      {
        a2 = v347;
        do
        {
LABEL_235:
          int v192 = *--v172;
          *--uint64_t v181 = v192;
        }
        while (v172 != v174);
        goto LABEL_236;
      }
      unint64_t v184 = (char *)v172 - v180 - v175;
      a2 = v347;
      if (v184 < 0x20) {
        goto LABEL_235;
      }
      uint64_t v185 = (v183 >> 2) + 1;
      uint64_t v186 = 4 * (v185 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v187 = &v172[v186 / 0xFFFFFFFFFFFFFFFCLL];
      uint64_t v181 = (int *)((char *)v181 - v186);
      uint64_t v188 = &v180[4 * v176 - 16];
      uint64_t v189 = v172 - 4;
      uint64_t v190 = v185 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v191 = *(_OWORD *)v189;
        *(v188 - 1) = *((_OWORD *)v189 - 1);
        *uint64_t v188 = v191;
        v188 -= 2;
        v189 -= 8;
        v190 -= 8;
      }
      while (v190);
      long long v172 = v187;
      if (v185 != (v185 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_235;
      }
LABEL_236:
      *(void *)(v148 - 48) = v181;
      *(void *)(v148 - 40) = v173;
      *(void *)(v148 - 32) = &v180[4 * v179];
      if (v174) {
        operator delete(v174);
      }
LABEL_238:
      *(void *)(v148 - 40) = v173;
      if ((unint64_t)(v173 - *(void *)(v148 - 48)) >= 5)
      {
        unint64_t v193 = *(unsigned int *)(v173 - 8);
        if (v193 == *(_DWORD *)(v173 - 4))
        {
          long long __dst = 0u;
          long long v357 = 0u;
          LODWORD(v358) = 1065353216;
          sub_1C4AC9A08((float *)&__dst, 0, 0);
          sub_1C4AC9A08((float *)&__dst, 1u, 1);
          sub_1C4AC9A08((float *)&__dst, 6u, 6);
          sub_1C4AC9A08((float *)&__dst, 7u, 7);
          if (!*((void *)&__dst + 1)) {
            goto LABEL_260;
          }
          uint8x8_t v194 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__dst + 8));
          v194.i16[0] = vaddlv_u8(v194);
          if (v194.u32[0] > 1uLL)
          {
            unint64_t v195 = v193;
            if (*((void *)&__dst + 1) <= v193) {
              unint64_t v195 = v193 % *((void *)&__dst + 1);
            }
          }
          else
          {
            unint64_t v195 = (DWORD2(__dst) - 1) & v193;
          }
          unint64_t v196 = *(uint64_t ***)(__dst + 8 * v195);
          if (v196)
          {
            uint64_t v197 = *v196;
            if (*v196)
            {
              if (v194.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v199 = v197[1];
                  if (v199 == v193)
                  {
                    if (*((_DWORD *)v197 + 4) == v193) {
                      goto LABEL_261;
                    }
                  }
                  else if ((v199 & (*((void *)&__dst + 1) - 1)) != v195)
                  {
                    goto LABEL_260;
                  }
                  uint64_t v197 = (uint64_t *)*v197;
                  if (!v197) {
                    goto LABEL_261;
                  }
                }
              }
              do
              {
                unint64_t v198 = v197[1];
                if (v198 == v193)
                {
                  if (*((_DWORD *)v197 + 4) == v193) {
                    break;
                  }
                }
                else
                {
                  if (v198 >= *((void *)&__dst + 1)) {
                    v198 %= *((void *)&__dst + 1);
                  }
                  if (v198 != v195) {
                    goto LABEL_260;
                  }
                }
                uint64_t v197 = (uint64_t *)*v197;
              }
              while (v197);
            }
          }
          else
          {
LABEL_260:
            uint64_t v197 = 0;
          }
LABEL_261:
          uint64_t v200 = (void *)v357;
          if ((void)v357)
          {
            do
            {
              uint64_t v201 = (void *)*v200;
              operator delete(v200);
              uint64_t v200 = v201;
            }
            while (v201);
          }
          unint64_t v202 = (void *)__dst;
          *(void *)&long long __dst = 0;
          if (v202) {
            operator delete(v202);
          }
          if (v197) {
            *(void *)(v148 - 40) -= 4;
          }
        }
      }
      if (v345 == a6)
      {
        if (*(void *)(v148 - 168) != *(void *)(v148 - 176)) {
          goto LABEL_398;
        }
        uint64_t v203 = sub_1C4AC89C8(a7[1] - 248);
        long long v141 = a7;
        a7[1] = v203;
        goto LABEL_120;
      }
      uint64_t v204 = *(void *)this;
      uint64_t v206 = *(char **)(v148 - 168);
      unint64_t v205 = *(void *)(v148 - 160);
      if ((unint64_t)v206 < v205)
      {
        *(_DWORD *)uint64_t v206 = v345;
        uint64_t v207 = (uint64_t)(v206 + 4);
        goto LABEL_291;
      }
      long long v208 = *(char **)(v148 - 176);
      uint64_t v209 = (v206 - v208) >> 2;
      unint64_t v210 = v209 + 1;
      if ((unint64_t)(v209 + 1) >> 62) {
        sub_1C494A220();
      }
      uint64_t v211 = v205 - (void)v208;
      if (v211 >> 1 > v210) {
        unint64_t v210 = v211 >> 1;
      }
      if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v212 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v212 = v210;
      }
      if (v212)
      {
        if (v212 >> 62) {
          goto LABEL_433;
        }
        uint64_t v213 = operator new(4 * v212);
        uint64_t v214 = &v213[4 * v209];
        *uint64_t v214 = v345;
        uint64_t v207 = (uint64_t)(v214 + 1);
        int64_t v215 = v206 - v208;
        if (v206 == v208) {
          goto LABEL_289;
        }
LABEL_283:
        unint64_t v216 = v215 - 4;
        if (v216 < 0x2C) {
          goto LABEL_449;
        }
        if ((unint64_t)(v208 - v213) < 0x20) {
          goto LABEL_449;
        }
        uint64_t v217 = (v216 >> 2) + 1;
        uint64_t v218 = 4 * (v217 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v219 = &v206[-v218];
        uint64_t v214 = (_DWORD *)((char *)v214 - v218);
        uint64_t v220 = &v213[4 * v209 - 16];
        uint64_t v221 = v206 - 16;
        uint64_t v222 = v217 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v223 = *(_OWORD *)v221;
          *(v220 - 1) = *((_OWORD *)v221 - 1);
          *uint64_t v220 = v223;
          v220 -= 2;
          v221 -= 32;
          v222 -= 8;
        }
        while (v222);
        uint64_t v206 = v219;
        if (v217 != (v217 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_449:
          do
          {
            int v224 = *((_DWORD *)v206 - 1);
            v206 -= 4;
            *--uint64_t v214 = v224;
          }
          while (v206 != v208);
        }
        goto LABEL_289;
      }
      uint64_t v213 = 0;
      uint64_t v214 = (_DWORD *)(4 * v209);
      *(_DWORD *)(4 * v209) = v345;
      uint64_t v207 = 4 * v209 + 4;
      int64_t v215 = v206 - v208;
      if (v206 != v208) {
        goto LABEL_283;
      }
LABEL_289:
      *(void *)(v148 - 176) = v214;
      *(void *)(v148 - 168) = v207;
      *(void *)(v148 - 160) = &v213[4 * v212];
      if (v208) {
        operator delete(v208);
      }
LABEL_291:
      *(void *)(v148 - 168) = v207;
      uint64_t v226 = *(char **)(v148 - 144);
      unint64_t v225 = *(void *)(v148 - 136);
      if ((unint64_t)v226 >= v225)
      {
        uint64_t v228 = *(char **)(v148 - 152);
        uint64_t v229 = (v226 - v228) >> 2;
        unint64_t v230 = v229 + 1;
        if ((unint64_t)(v229 + 1) >> 62) {
          sub_1C494A220();
        }
        uint64_t v231 = v225 - (void)v228;
        if (v231 >> 1 > v230) {
          unint64_t v230 = v231 >> 1;
        }
        if ((unint64_t)v231 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v232 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v232 = v230;
        }
        if (v232)
        {
          if (v232 >> 62) {
LABEL_433:
          }
            sub_1C4949AA8();
          uint64_t v233 = operator new(4 * v232);
          uint64_t v234 = (float *)&v233[4 * v229];
          *uint64_t v234 = v147;
          uint64_t v227 = (uint64_t)(v234 + 1);
          int64_t v235 = v226 - v228;
          if (v226 == v228) {
            goto LABEL_310;
          }
LABEL_304:
          unint64_t v236 = v235 - 4;
          if (v236 < 0x2C) {
            goto LABEL_450;
          }
          if ((unint64_t)(v228 - v233) < 0x20) {
            goto LABEL_450;
          }
          uint64_t v237 = (v236 >> 2) + 1;
          uint64_t v238 = 4 * (v237 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v239 = &v226[-v238];
          uint64_t v234 = (float *)((char *)v234 - v238);
          uint64_t v240 = &v233[4 * v229 - 16];
          uint64_t v241 = v226 - 16;
          uint64_t v242 = v237 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v243 = *(_OWORD *)v241;
            *(v240 - 1) = *((_OWORD *)v241 - 1);
            *uint64_t v240 = v243;
            v240 -= 2;
            v241 -= 32;
            v242 -= 8;
          }
          while (v242);
          uint64_t v226 = v239;
          if (v237 != (v237 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_450:
            do
            {
              int v244 = *((_DWORD *)v226 - 1);
              v226 -= 4;
              *((_DWORD *)v234-- - 1) = v244;
            }
            while (v226 != v228);
          }
        }
        else
        {
          uint64_t v233 = 0;
          uint64_t v234 = (float *)(4 * v229);
          *(float *)(4 * v229) = v147;
          uint64_t v227 = 4 * v229 + 4;
          int64_t v235 = v226 - v228;
          if (v226 != v228) {
            goto LABEL_304;
          }
        }
LABEL_310:
        *(void *)(v148 - 152) = v234;
        *(void *)(v148 - 144) = v227;
        *(void *)(v148 - 136) = &v233[4 * v232];
        if (v228) {
          operator delete(v228);
        }
        goto LABEL_312;
      }
      *(float *)uint64_t v226 = v147;
      uint64_t v227 = (uint64_t)(v226 + 4);
LABEL_312:
      *(void *)(v148 - 144) = v227;
      float v245 = *((float *)this + 192);
      if (v353[2 * (int)v344] >= v245) {
        goto LABEL_364;
      }
      int8x8_t v246 = *(int8x8_t *)((char *)this + 688);
      if (!*(void *)&v246) {
        goto LABEL_364;
      }
      unint64_t v247 = SLODWORD(v353[2 * (int)v344 + 1]);
      uint8x8_t v248 = (uint8x8_t)vcnt_s8(v246);
      v248.i16[0] = vaddlv_u8(v248);
      if (v248.u32[0] > 1uLL)
      {
        unint64_t v249 = SLODWORD(v353[2 * (int)v344 + 1]);
        if (*(void *)&v246 <= v247) {
          unint64_t v249 = v247 % *(void *)&v246;
        }
      }
      else
      {
        unint64_t v249 = (*(void *)&v246 - 1) & v247;
      }
      uint64_t v250 = *(uint64_t ***)(*((void *)this + 85) + 8 * v249);
      if (!v250 || (unint64_t v251 = *v250) == 0)
      {
LABEL_364:
        int v253 = 0;
        unint64_t v269 = *(void *)(v148 - 96);
        uint64_t v270 = *(void *)(v148 - 88);
        if (v269 == v270 << 6) {
          goto LABEL_365;
        }
        goto LABEL_372;
      }
      if (v248.u32[0] < 2uLL)
      {
        uint64_t v252 = *(void *)&v246 - 1;
        while (1)
        {
          uint64_t v255 = v251[1];
          if (v255 == v247)
          {
            if (*((_DWORD *)v251 + 4) == v247) {
              goto LABEL_334;
            }
          }
          else if ((v255 & v252) != v249)
          {
            goto LABEL_364;
          }
          int v253 = 0;
          unint64_t v251 = (uint64_t *)*v251;
          if (!v251) {
            goto LABEL_362;
          }
        }
      }
      while (1)
      {
        unint64_t v254 = v251[1];
        if (v254 == v247) {
          break;
        }
        if (v254 >= *(void *)&v246) {
          v254 %= *(void *)&v246;
        }
        if (v254 != v249) {
          goto LABEL_364;
        }
LABEL_323:
        int v253 = 0;
        unint64_t v251 = (uint64_t *)*v251;
        if (!v251) {
          goto LABEL_362;
        }
      }
      if (*((_DWORD *)v251 + 4) != v247) {
        goto LABEL_323;
      }
LABEL_334:
      if (v354 == v353) {
        goto LABEL_364;
      }
      uint64_t v256 = 0;
      unint64_t v257 = *((int *)v251 + 5);
      if ((unint64_t)(((char *)v354 - (char *)v353) >> 3) <= 1) {
        uint64_t v258 = 1;
      }
      else {
        uint64_t v258 = ((char *)v354 - (char *)v353) >> 3;
      }
      while (1)
      {
        if (v353[2 * v256] < v245) {
          goto LABEL_364;
        }
        uint64_t v259 = *((void *)this + 90);
        if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 91) - v259) >> 3) <= v257) {
          sub_1C4AD0A9C();
        }
        uint64_t v260 = (void *)(v259 + 40 * (int)v257);
        int8x8_t v261 = (int8x8_t)v260[1];
        if (v261)
        {
          uint8x8_t v262 = (uint8x8_t)vcnt_s8(v261);
          v262.i16[0] = vaddlv_u8(v262);
          if (v262.u32[0] > 1uLL)
          {
            unint64_t v263 = SLODWORD(v353[2 * (int)v344 + 1]);
            if (*(void *)&v261 <= v247) {
              unint64_t v263 = v247 % *(void *)&v261;
            }
          }
          else
          {
            unint64_t v263 = (*(void *)&v261 - 1) & v247;
          }
          uint64_t v264 = *(uint64_t ***)(*v260 + 8 * v263);
          if (v264)
          {
            uint64_t v265 = *v264;
            if (v265) {
              break;
            }
          }
        }
LABEL_338:
        int v253 = 0;
        if (++v256 == v258) {
          goto LABEL_362;
        }
      }
      if (v262.u32[0] < 2uLL)
      {
        uint64_t v266 = *(void *)&v261 - 1;
        while (1)
        {
          uint64_t v268 = v265[1];
          if (v268 == v247)
          {
            if (*((_DWORD *)v265 + 4) == v247) {
              goto LABEL_361;
            }
          }
          else if ((v268 & v266) != v263)
          {
            goto LABEL_338;
          }
          uint64_t v265 = (uint64_t *)*v265;
          if (!v265) {
            goto LABEL_338;
          }
        }
      }
      while (2)
      {
        unint64_t v267 = v265[1];
        if (v267 != v247)
        {
          if (v267 >= *(void *)&v261) {
            v267 %= *(void *)&v261;
          }
          if (v267 != v263) {
            goto LABEL_338;
          }
LABEL_351:
          uint64_t v265 = (uint64_t *)*v265;
          if (!v265) {
            goto LABEL_338;
          }
          continue;
        }
        break;
      }
      if (*((_DWORD *)v265 + 4) != v247) {
        goto LABEL_351;
      }
LABEL_361:
      int v253 = 1;
LABEL_362:
      unint64_t v269 = *(void *)(v148 - 96);
      uint64_t v270 = *(void *)(v148 - 88);
      if (v269 == v270 << 6)
      {
LABEL_365:
        if ((uint64_t)(v269 + 1) < 0) {
          sub_1C494A220();
        }
        if (v269 > 0x3FFFFFFFFFFFFFFELL)
        {
          unint64_t v273 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          unint64_t v271 = v270 << 7;
          unint64_t v272 = (v269 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v271 <= v272) {
            unint64_t v273 = v272;
          }
          else {
            unint64_t v273 = v271;
          }
        }
        sub_1C49B61EC(v148 - 104, v273);
        unint64_t v269 = *(void *)(v148 - 96);
      }
LABEL_372:
      *(void *)(v148 - 96) = v269 + 1;
      uint64_t v274 = *(void *)(v148 - 104);
      unint64_t v275 = v269 >> 6;
      uint64_t v276 = 1 << v269;
      if (v253) {
        uint64_t v277 = *(void *)(v274 + 8 * v275) | v276;
      }
      else {
        uint64_t v277 = *(void *)(v274 + 8 * v275) & ~v276;
      }
      *(void *)(v274 + 8 * v275) = v277;
      int v278 = sub_1C493DB2C((void *)this + 7, (void *)(v204 + 24 * v345));
      uint64_t v279 = v278;
      id v281 = *(char **)(v148 - 120);
      unint64_t v280 = *(void *)(v148 - 112);
      if ((unint64_t)v281 < v280)
      {
        *(void *)id v281 = v278;
        uint64_t v282 = (uint64_t)(v281 + 8);
        a2 = v347;
        goto LABEL_397;
      }
      unint64_t v283 = *(char **)(v148 - 128);
      uint64_t v284 = (v281 - v283) >> 3;
      unint64_t v285 = v284 + 1;
      if ((unint64_t)(v284 + 1) >> 61) {
        sub_1C494A220();
      }
      uint64_t v286 = v280 - (void)v283;
      if (v286 >> 2 > v285) {
        unint64_t v285 = v286 >> 2;
      }
      if ((unint64_t)v286 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v287 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v287 = v285;
      }
      if (!v287)
      {
        uint64_t v288 = 0;
        uint64_t v289 = (void *)(8 * v284);
        *(void *)(8 * v284) = v279;
        uint64_t v282 = 8 * v284 + 8;
        int64_t v290 = v281 - v283;
        if (v281 != v283) {
          goto LABEL_386;
        }
LABEL_389:
        a2 = v347;
        goto LABEL_395;
      }
      if (v287 >> 61) {
        sub_1C4949AA8();
      }
      uint64_t v288 = operator new(8 * v287);
      uint64_t v289 = &v288[8 * v284];
      void *v289 = v279;
      uint64_t v282 = (uint64_t)(v289 + 1);
      int64_t v290 = v281 - v283;
      if (v281 == v283) {
        goto LABEL_389;
      }
LABEL_386:
      unint64_t v291 = v290 - 8;
      if (v291 < 0x58)
      {
        a2 = v347;
        goto LABEL_394;
      }
      a2 = v347;
      if ((unint64_t)(v283 - v288) < 0x20) {
        goto LABEL_451;
      }
      uint64_t v292 = (v291 >> 3) + 1;
      uint64_t v293 = 8 * (v292 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v294 = &v281[-v293];
      uint64_t v289 = (void *)((char *)v289 - v293);
      uint64_t v295 = &v288[8 * v284 - 16];
      uint64_t v296 = v281 - 16;
      uint64_t v297 = v292 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v298 = *(_OWORD *)v296;
        *(v295 - 1) = *((_OWORD *)v296 - 1);
        *uint64_t v295 = v298;
        v295 -= 2;
        v296 -= 32;
        v297 -= 4;
      }
      while (v297);
      id v281 = v294;
      if (v292 != (v292 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_451:
        do
        {
LABEL_394:
          uint64_t v299 = *((void *)v281 - 1);
          v281 -= 8;
          *--uint64_t v289 = v299;
        }
        while (v281 != v283);
      }
LABEL_395:
      *(void *)(v148 - 128) = v289;
      *(void *)(v148 - 120) = v282;
      *(void *)(v148 - 112) = &v288[8 * v287];
      if (v283) {
        operator delete(v283);
      }
LABEL_397:
      *(void *)(v148 - 120) = v282;
LABEL_398:
      float v300 = *((float *)a2 + 48) + logf(v147) * 0.659235;
      *(float *)(v148 - 56) = v300;
      BOOL v302 = v345 == a6 || *((unsigned char *)a2 + 196) != 0;
      *(unsigned char *)(v148 - 52) = v302;
      BYTE7(v357) = 1;
      LOWORD(__dst) = 121;
      unint64_t v303 = sub_1C4ACA384((uint64_t **)(v148 - 248), (const void **)&__dst, (uint64_t)&__dst)[7];
      id v309 = objc_msgSend_dataPointer(v303, v304, v305, v306, v307, v308);
      char v349 = 1;
      LOWORD(__p[0]) = 121;
      unint64_t v310 = sub_1C4ACA384((uint64_t **)(v148 - 248), (const void **)__p, (uint64_t)__p);
      uint64_t v316 = objc_msgSend_count(v310[7], v311, v312, v313, v314, v315);
      bzero(v309, 4 * v316);
      if (v349 < 0)
      {
        operator delete(__p[0]);
        if (SBYTE7(v357) < 0) {
          goto LABEL_421;
        }
      }
      else
      {
        if ((SBYTE7(v357) & 0x80000000) == 0) {
          goto LABEL_406;
        }
LABEL_421:
        operator delete((void *)__dst);
      }
LABEL_406:
      BYTE7(v357) = 1;
      LOWORD(__dst) = 121;
      uint64_t v317 = sub_1C4ACA384((uint64_t **)(v148 - 248), (const void **)&__dst, (uint64_t)&__dst)[7];
      *(_DWORD *)(objc_msgSend_dataPointer(v317, v318, v319, v320, v321, v322) + 4 * v345) = 1065353216;
      if (SBYTE7(v357) < 0) {
        operator delete((void *)__dst);
      }
      CoreHandwriting::CHEncoderDecoderBeamState::updatePastAttention((uint64_t **)(v148 - 248), (CoreHandwriting::CHEncoderDecoderBeamState *)a2, v323, v324, v325, v326);
      if ((int **)(v148 - 224) != v336) {
        sub_1C4ACD898(v148 - 224, *v336, v332);
      }
      LOBYTE(__dst) = 0;
      uint64_t v327 = *((void *)this + 67);
      if (*((void *)this + 68) != v327)
      {
        unint64_t v328 = 0;
        char v329 = 1;
        do
        {
          *(float *)(v148 - 56) = (***(float (****)(void, uint64_t, long long *))(v327 + 8 * v328))(*(void *)(v327 + 8 * v328), v148 - 248, &__dst)+ *(float *)(v148 - 56);
          v329 &= (_BYTE)__dst != 0;
          ++v328;
          uint64_t v327 = *((void *)this + 67);
        }
        while (v328 < (*((void *)this + 68) - v327) >> 3);
        if ((v329 & 1) == 0) {
          int v343 = (int)fmin((double)(v343 + 1), (double)(*((_DWORD *)this + 188) + a4));
        }
      }
      sub_1C4AB7D74((uint64_t *)&__dst, *(unsigned char **)(v148 - 48), *(unsigned char **)(v148 - 40));
      uint64_t v330 = *v342;
      a2 = v347;
      if (*v342)
      {
        *(void *)(v148 - 40) = v330;
        operator delete(v330);
      }
      *(void *)(v148 - 48) = __dst;
      uint64_t v331 = *((void *)&__dst + 1);
      *(void *)(v148 - 40) = *((void *)&__dst + 1);
      *(void *)(v148 - 32) = v357;
      if (*(_DWORD *)(v331 - 4) == 1)
      {
        long long v141 = a7;
      }
      else
      {
        long long v141 = a7;
        if (*(char *)(v148 - 1) < 0)
        {
          **(unsigned char **)(v148 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
          *(void *)(v148 - 16) = 0;
        }
        else
        {
          *(unsigned char *)(v148 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
          *(unsigned char *)(v148 - 1) = 0;
        }
      }
LABEL_120:
      uint64_t v83 = v353;
      if (++v344 >= (unint64_t)(((char *)v354 - (char *)v353) >> 3)) {
        goto LABEL_423;
      }
    }
  }
  if (v102) {
    operator delete(v102);
  }
  if (v83)
  {
    v354 = (float *)v83;
    operator delete(v83);
  }
}

void sub_1C4AC2794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35)
{
  sub_1C4AC2990(a19);
  if (__p) {
    operator delete(__p);
  }
  size_t v37 = *(void **)(v35 - 168);
  if (v37)
  {
    *(void *)(v35 - 160) = v37;
    operator delete(v37);
  }

  _Unwind_Resume(a1);
}

void **sub_1C4AC2990(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_1C4AC89C8(v3 - 248);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void CoreHandwriting::CHMathBeamDecoder::prepareActiveAlphabetMask(CHEncoderDecoderNetwork *a1@<X1>, void *a2@<X8>)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  size_t v54 = a2;
  uint64_t v10 = objc_msgSend_activeAlphabet(v4, v5, v6, v7, v8, v9);

  if (v10)
  {
    size_t v16 = objc_msgSend_codeMap(v4, v11, v12, v13, v14, v15);
    unint64_t v22 = objc_msgSend_count(v16, v17, v18, v19, v20, v21);
    unint64_t v23 = v22;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    if (v22)
    {
      if (v22 >> 62) {
        sub_1C494A220();
      }
      uint64_t v24 = (char *)operator new(4 * v22);
      size_t v25 = &v24[4 * v23];
      bzero(v24, 4 * v23);
    }
    else
    {
      size_t v25 = 0;
      uint64_t v24 = 0;
    }
    *size_t v54 = v24;
    v54[1] = v25;
    v54[2] = v25;

    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    unint64_t v31 = objc_msgSend_activeAlphabet(v4, v26, v27, v28, v29, v30);
    uint64_t v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v32, (uint64_t)&v55, (uint64_t)v62, 16, v33);
    if (v39)
    {
      uint64_t v40 = *(void *)v56;
      do
      {
        for (uint64_t i = 0; i != v39; ++i)
        {
          if (*(void *)v56 != v40) {
            objc_enumerationMutation(v31);
          }
          uint64_t v42 = *(void *)(*((void *)&v55 + 1) + 8 * i);
          uint64_t v43 = objc_msgSend_codeMap(v4, v34, v35, v36, v37, v38);
          int v48 = objc_msgSend_containsObject_(v43, v44, v42, v45, v46, v47);

          if (v48)
          {
            uint64_t v49 = objc_msgSend_codeMap(v4, v34, v35, v36, v37, v38);
            *(_DWORD *)&v24[4 * objc_msgSend_indexOfObject_(v49, v50, v42, v51, v52, v53)] = 1065353216;
          }
        }
        uint64_t v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v34, (uint64_t)&v55, (uint64_t)v62, 16, v38);
      }
      while (v39);
    }
  }
}

void sub_1C4AC2BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (v22)
  {
    *(void *)(a10 + 8) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::CHMathBeamDecoder::getMaxDecodingSteps(CoreHandwriting::CHMathBeamDecoder *this, int a2)
{
  unsigned int v2 = (int)fmin((double)(4 * a2), 1024.0);
  if (a2 >= 8) {
    return v2;
  }
  else {
    return 32;
  }
}

void sub_1C4AC2C8C(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v1230 = *MEMORY[0x1E4F143B8];
  v1160 = a2;
  id v9 = objc_alloc(MEMORY[0x1E4F1E9A8]);
  uint64_t v10 = *(void *)(a4 + 48);
  v1218 = &unk_1F203EEC8;
  uint64_t v11 = NSNumber;
  uint64_t v17 = objc_msgSend_numInputChannels(v1160, v12, v13, v14, v15, v16);
  uint64_t v1219 = objc_msgSend_numberWithInteger_(v11, v18, v17, v19, v20, v21);
  v1193 = (void *)v1219;
  size_t v26 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v22, **(void **)a4, v23, v24, v25);
  v1220 = v26;
  unint64_t v31 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v27, *(void *)(*(void *)a4 + 8), v28, v29, v30);
  v1221 = v31;
  uint64_t v35 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v32, (uint64_t)&v1218, 4, v33, v34);
  v1217[0] = &unk_1F203EEC8;
  v1217[1] = &unk_1F203EEC8;
  uint64_t v36 = NSNumber;
  uint64_t v42 = objc_msgSend_numInputChannels(v1160, v37, v38, v39, v40, v41);
  uint64_t v47 = objc_msgSend_numberWithInteger_(v36, v43, v42, v44, v45, v46);
  v1217[2] = v47;
  uint64_t v52 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v48, **(void **)a4, v49, v50, v51);
  v1217[3] = v52;
  long long v56 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v53, (uint64_t)v1217, 4, v54, v55);
  v1147 = objc_msgSend_initWithDataPointer_shape_dataType_strides_deallocator_error_(v9, v57, v10, (uint64_t)v35, 65568, (uint64_t)v56, 0, 0);

  id v58 = objc_alloc(MEMORY[0x1E4F1E930]);
  v1215 = @"image";
  v1216 = v1147;
  uint64_t v61 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v59, (uint64_t)&v1216, (uint64_t)&v1215, 1, v60);
  v1146 = objc_msgSend_initWithDictionary_error_(v58, v62, (uint64_t)v61, 0, v63, v64);

  id v65 = objc_alloc(MEMORY[0x1E4F1E9E0]);
  v1151 = objc_msgSend_initWithUsesCPUOnly_(v65, v66, 1, v67, v68, v69);
  uint64_t v75 = objc_msgSend_encoderModel(v1160, v70, v71, v72, v73, v74);
  id v1203 = 0;
  v1150 = objc_msgSend_predictionFromFeatures_options_error_(v75, v76, (uint64_t)v1146, (uint64_t)v1151, (uint64_t)&v1203, v77);
  id v1154 = v1203;

  if (!v1150)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v82 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v82, OS_LOG_TYPE_FAULT))
    {
      objc_msgSend_localizedDescription(v1154, v83, v84, v85, v86, v87);
      id v88 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)std::string buf = 138412290;
      *(void *)&uint8_t buf[4] = v88;
      _os_log_impl(&dword_1C492D000, v82, OS_LOG_TYPE_FAULT, "An error occurred when running math encoder inference: %@", buf, 0xCu);
    }
  }
  uint64_t v89 = *(void *)(a7 + 24);
  if (v89 && (*(unsigned int (**)(uint64_t))(*(void *)v89 + 48))(v89))
  {
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
    goto LABEL_1214;
  }
  uint64_t v90 = objc_msgSend_featureValueForName_(v1150, v78, @"encoded_image", v79, v80, v81);
  uint64_t v96 = objc_msgSend_multiArrayValue(v90, v91, v92, v93, v94, v95);
  v1161 = objc_msgSend_squeezeDimensions_error_(v96, v97, (uint64_t)&unk_1F203DBD8, 0, v98, v99);

  uint64_t v104 = objc_msgSend_featureValueForName_(v1150, v100, @"encoded_image_projected", v101, v102, v103);
  uint64_t v110 = objc_msgSend_multiArrayValue(v104, v105, v106, v107, v108, v109);
  v1162 = objc_msgSend_squeezeDimensions_error_(v110, v111, (uint64_t)&unk_1F203DBF0, 0, v112, v113);

  unint64_t v114 = (void *)MEMORY[0x1E4F1E9A8];
  v1214 = v1161;
  uint64_t v118 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v115, (uint64_t)&v1214, 1, v116, v117);
  v1172 = objc_msgSend_multiArrayByConcatenatingMultiArrays_alongAxis_dataType_(v114, v119, (uint64_t)v118, 0, 65568, v120);

  unint64_t v121 = (void *)MEMORY[0x1E4F1E9A8];
  v1213 = v1162;
  int v125 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v122, (uint64_t)&v1213, 1, v123, v124);
  v1153 = objc_msgSend_multiArrayByConcatenatingMultiArrays_alongAxis_dataType_(v121, v126, (uint64_t)v125, 0, 65568, v127);

  CoreHandwriting::CHMathBeamDecoder::prepareActiveAlphabetMask(v1160, &v1202);
  v1199 = 0;
  v1200 = 0;
  v1201 = 0;
  CoreHandwriting::CHMathBeamDecoder::initialState(v1150, (uint64_t)buf);
  v1206 = (void **)&v1201;
  __dst[0] = operator new(0xF8uLL);
  __dst[1] = __dst[0];
  v1205[0] = __dst[0];
  v1205[1] = (char *)__dst[0] + 248;
  sub_1C4AC8B58((uint64_t **)__dst[0], (uint64_t)buf);
  uint64_t v128 = 0;
  unint64_t v129 = (char *)__dst[1];
  v1205[0] = (char *)v1205[0] + 248;
  while (&v1200[v128] != v1199)
  {
    v128 -= 31;
    sub_1C4AC8B58((uint64_t **)&v129[v128 * 8], (uint64_t)&v1200[v128]);
  }
  v1199 = &v129[v128 * 8];
  v1201 = (uint64_t **)v1205[1];
  v1200 = (uint64_t **)v1205[0];
  sub_1C4AC89C8((uint64_t)buf);
  int v135 = (int)fmin((double)(4 * a3), 1024.0);
  if (a3 < 8) {
    int v135 = 32;
  }
  int v1149 = v135;
  if (v135 >= 1)
  {
    int v136 = 0;
    unint64_t v137 = (unint64_t)(a6 - 2) >> 1;
    uint64_t __sz = 248 * a6;
    v1183 = (float *)(a1 + 24);
    v1165 = (uint64_t *)(a1 + 40);
    unint64_t v1157 = v137 + 1;
    uint64_t v1156 = 248 * v137;
    unint64_t v138 = 0x1E4F1C000uLL;
    *(void *)&long long v134 = 138412290;
    long long v1144 = v134;
    while (1)
    {
      memset(&__p, 0, sizeof(__p));
      v1163 = objc_msgSend_arrayWithCapacity_(*(void **)(v138 + 2632), v130, 0xEF7BDEF7BDEF7BDFLL * (((char *)v1200 - (unsigned char *)v1199) >> 3), v131, v132, v133, v1144);
      v1164 = objc_msgSend_arrayWithCapacity_(*(void **)(v138 + 2632), v139, 0xEF7BDEF7BDEF7BDFLL * (((char *)v1200 - (unsigned char *)v1199) >> 3), v140, v141, v142);
      v1168 = objc_msgSend_arrayWithCapacity_(*(void **)(v138 + 2632), v143, 0xEF7BDEF7BDEF7BDFLL * (((char *)v1200 - (unsigned char *)v1199) >> 3), v144, v145, v146);
      v1169 = objc_msgSend_arrayWithCapacity_(*(void **)(v138 + 2632), v147, 0xEF7BDEF7BDEF7BDFLL * (((char *)v1200 - (unsigned char *)v1199) >> 3), v148, v149, v150);
      v1170 = objc_msgSend_arrayWithCapacity_(*(void **)(v138 + 2632), v151, 0xEF7BDEF7BDEF7BDFLL * (((char *)v1200 - (unsigned char *)v1199) >> 3), v152, v153, v154);
      int v1194 = v136;
      v1171 = objc_msgSend_arrayWithCapacity_(*(void **)(v138 + 2632), v155, 0xEF7BDEF7BDEF7BDFLL * (((char *)v1200 - (unsigned char *)v1199) >> 3), v156, v157, v158);
      uint64_t v164 = (char *)v1199;
      if (v1200 != v1199)
      {
        unint64_t v165 = 0;
        while (1)
        {
          unsigned int v166 = objc_msgSend_shape(v1172, v159, v160, v161, v162, v163);
          unint64_t v171 = objc_msgSend_objectAtIndexedSubscript_(v166, v167, 0, v168, v169, v170);
          int v177 = objc_msgSend_unsignedIntValue(v171, v172, v173, v174, v175, v176);
          BOOL v178 = 0xEF7BDEF7BDEF7BDFLL * (((char *)v1200 - (unsigned char *)v1199) >> 3) == v177;

          if (!v178)
          {
            objc_msgSend_setObject_atIndexedSubscript_(v1163, v179, (uint64_t)v1161, v165, v182, v183);
            objc_msgSend_setObject_atIndexedSubscript_(v1164, v184, (uint64_t)v1162, v165, v185, v186);
          }
          uint64_t v187 = (const char *)objc_msgSend_UTF8String(@"decoder_state_h", v179, v180, v181, v182, v183);
          size_t v188 = strlen(v187);
          if (v188 > 0x7FFFFFFFFFFFFFF7) {
            sub_1C4949B7C();
          }
          size_t v189 = v188;
          if (v188 >= 0x17) {
            break;
          }
          BYTE7(v1223) = v188;
          uint64_t v190 = buf;
          if (v188) {
            goto LABEL_29;
          }
LABEL_30:
          v190[v189] = 0;
          unint64_t v193 = &v164[248 * v165];
          unint64_t v195 = v193 + 8;
          uint8x8_t v194 = (void *)*((void *)v193 + 1);
          unint64_t v196 = v193 + 8;
          uint64_t v197 = v193 + 8;
          if (v194)
          {
            if ((SBYTE7(v1223) & 0x80u) == 0) {
              size_t v198 = BYTE7(v1223);
            }
            else {
              size_t v198 = *(void *)&buf[8];
            }
            if ((SBYTE7(v1223) & 0x80u) == 0) {
              uint64_t v199 = buf;
            }
            else {
              uint64_t v199 = *(uint8_t **)buf;
            }
            while (1)
            {
              while (1)
              {
                uint64_t v197 = v194;
                unint64_t v202 = (const void *)v194[4];
                uint64_t v200 = v194 + 4;
                uint64_t v201 = v202;
                int v203 = *((char *)v200 + 23);
                if (v203 >= 0) {
                  size_t v204 = *((unsigned __int8 *)v200 + 23);
                }
                else {
                  size_t v204 = v200[1];
                }
                if (v203 >= 0) {
                  unint64_t v205 = v200;
                }
                else {
                  unint64_t v205 = v201;
                }
                if (v204 >= v198) {
                  size_t v206 = v198;
                }
                else {
                  size_t v206 = v204;
                }
                int v207 = memcmp(v199, v205, v206);
                BOOL v208 = v198 < v204;
                if (v207) {
                  BOOL v208 = v207 < 0;
                }
                if (!v208) {
                  break;
                }
                uint8x8_t v194 = (void *)*v197;
                unint64_t v196 = v197;
                if (!*v197) {
                  goto LABEL_55;
                }
              }
              int v209 = memcmp(v205, v199, v206);
              BOOL v213 = v204 < v198;
              if (v209) {
                BOOL v213 = v209 < 0;
              }
              if (!v213) {
                break;
              }
              uint8x8_t v194 = (void *)v197[1];
              if (!v194)
              {
                unint64_t v196 = v197 + 1;
                goto LABEL_55;
              }
            }
            uint64_t v214 = v197;
          }
          else
          {
LABEL_55:
            uint64_t v214 = operator new(0x40uLL);
            *((_OWORD *)v214 + 2) = *(_OWORD *)buf;
            uint64_t v215 = v1223;
            *(void *)&long long v1223 = 0;
            memset(buf, 0, sizeof(buf));
            *((void *)v214 + 6) = v215;
            *((void *)v214 + 7) = 0;
            *(void *)uint64_t v214 = 0;
            *((void *)v214 + 1) = 0;
            *((void *)v214 + 2) = v197;
            *unint64_t v196 = v214;
            uint64_t v216 = **(void **)v193;
            uint64_t v217 = v214;
            if (v216)
            {
              *(void *)unint64_t v193 = v216;
              uint64_t v217 = (unsigned char *)*v196;
            }
            uint64_t v218 = (void *)*v195;
            BOOL v820 = v217 == (unsigned char *)*v195;
            v217[24] = v820;
            if (!v820)
            {
              do
              {
                uint64_t v219 = *((void *)v217 + 2);
                if (*(unsigned char *)(v219 + 24)) {
                  break;
                }
                uint64_t v220 = *(unsigned char **)(v219 + 16);
                uint64_t v221 = *(void *)v220;
                if (*(void *)v220 == v219)
                {
                  uint64_t v224 = *((void *)v220 + 1);
                  if (!v224 || (v225 = *(unsigned __int8 *)(v224 + 24), uint64_t v222 = (unsigned char *)(v224 + 24), v225))
                  {
                    if (*(unsigned char **)v219 == v217)
                    {
                      *(unsigned char *)(v219 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                      v220[24] = 0;
                      uint64_t v228 = *(void *)(v219 + 8);
                      *(void *)uint64_t v220 = v228;
                      if (v228) {
                        goto LABEL_72;
                      }
                    }
                    else
                    {
                      uint64_t v226 = *(uint64_t **)(v219 + 8);
                      uint64_t v227 = *v226;
                      *(void *)(v219 + 8) = *v226;
                      if (v227)
                      {
                        *(void *)(v227 + 16) = v219;
                        uint64_t v220 = *(unsigned char **)(v219 + 16);
                      }
                      v226[2] = (uint64_t)v220;
                      *(void *)(*(void *)(v219 + 16) + 8 * (**(void **)(v219 + 16) != v219)) = v226;
                      *uint64_t v226 = v219;
                      *(void *)(v219 + 16) = v226;
                      uint64_t v220 = (unsigned char *)v226[2];
                      uint64_t v219 = *(void *)v220;
                      *((unsigned char *)v226 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                      v220[24] = 0;
                      uint64_t v228 = *(void *)(v219 + 8);
                      *(void *)uint64_t v220 = v228;
                      if (v228) {
LABEL_72:
                      }
                        *(void *)(v228 + 16) = v220;
                    }
                    *(void *)(v219 + 16) = *((void *)v220 + 2);
                    *(void *)(*((void *)v220 + 2) + 8 * (**((void **)v220 + 2) != (void)v220)) = v219;
                    *(void *)(v219 + 8) = v220;
LABEL_79:
                    *((void *)v220 + 2) = v219;
                    break;
                  }
                }
                else if (!v221 || (v223 = *(unsigned __int8 *)(v221 + 24), uint64_t v222 = (unsigned char *)(v221 + 24), v223))
                {
                  if (*(unsigned char **)v219 == v217)
                  {
                    uint64_t v368 = *((void *)v217 + 1);
                    *(void *)uint64_t v219 = v368;
                    if (v368)
                    {
                      *(void *)(v368 + 16) = v219;
                      uint64_t v220 = *(unsigned char **)(v219 + 16);
                    }
                    *((void *)v217 + 2) = v220;
                    *(void *)(*(void *)(v219 + 16) + 8 * (**(void **)(v219 + 16) != v219)) = v217;
                    *((void *)v217 + 1) = v219;
                    *(void *)(v219 + 16) = v217;
                    uint64_t v220 = (unsigned char *)*((void *)v217 + 2);
                    v217[24] = 1;
                    v220[24] = 0;
                    uint64_t v219 = *((void *)v220 + 1);
                    uint64_t v229 = *(unsigned char **)v219;
                    *((void *)v220 + 1) = *(void *)v219;
                    if (v229) {
LABEL_77:
                    }
                      *((void *)v229 + 2) = v220;
                  }
                  else
                  {
                    *(unsigned char *)(v219 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                    v220[24] = 0;
                    uint64_t v219 = *((void *)v220 + 1);
                    uint64_t v229 = *(unsigned char **)v219;
                    *((void *)v220 + 1) = *(void *)v219;
                    if (v229) {
                      goto LABEL_77;
                    }
                  }
                  *(void *)(v219 + 16) = *((void *)v220 + 2);
                  *(void *)(*((void *)v220 + 2) + 8 * (**((void **)v220 + 2) != (void)v220)) = v219;
                  *(void *)uint64_t v219 = v220;
                  goto LABEL_79;
                }
                *(unsigned char *)(v219 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                uint64_t v217 = v220;
                v220[24] = v220 == (unsigned char *)v218;
                *uint64_t v222 = 1;
              }
              while (v220 != (unsigned char *)v218);
            }
            ++*((void *)v193 + 2);
          }
          objc_msgSend_setObject_atIndexedSubscript_(v1168, v210, *((void *)v214 + 7), v165, v211, v212);
          if (SBYTE7(v1223) < 0) {
            operator delete(*(void **)buf);
          }
          int64_t v235 = (const char *)objc_msgSend_UTF8String(@"decoder_state_c", v230, v231, v232, v233, v234);
          size_t v236 = strlen(v235);
          if (v236 > 0x7FFFFFFFFFFFFFF7) {
            sub_1C4949B7C();
          }
          size_t v237 = v236;
          if (v236 >= 0x17)
          {
            uint64_t v242 = (v236 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v236 | 7) != 0x17) {
              uint64_t v242 = v236 | 7;
            }
            uint64_t v243 = v242 + 1;
            uint64_t v238 = operator new(v242 + 1);
            *(void *)&long long v1223 = v243 | 0x8000000000000000;
            *(void *)std::string buf = v238;
            *(void *)&buf[8] = v237;
          }
          else
          {
            BYTE7(v1223) = v236;
            uint64_t v238 = buf;
            if (!v236)
            {
              buf[0] = 0;
              unint64_t v239 = (void *)*v195;
              uint64_t v240 = v193 + 8;
              uint64_t v241 = v193 + 8;
              if (!*v195) {
                goto LABEL_116;
              }
              goto LABEL_92;
            }
          }
          memmove(v238, v235, v237);
          *((unsigned char *)v238 + v237) = 0;
          unint64_t v239 = (void *)*v195;
          uint64_t v240 = v193 + 8;
          uint64_t v241 = v193 + 8;
          if (!*v195)
          {
LABEL_116:
            uint64_t v260 = operator new(0x40uLL);
            *((_OWORD *)v260 + 2) = *(_OWORD *)buf;
            uint64_t v261 = v1223;
            *(void *)&long long v1223 = 0;
            memset(buf, 0, sizeof(buf));
            *((void *)v260 + 6) = v261;
            *((void *)v260 + 7) = 0;
            *(void *)uint64_t v260 = 0;
            *((void *)v260 + 1) = 0;
            *((void *)v260 + 2) = v241;
            *uint64_t v240 = v260;
            uint64_t v262 = **(void **)v193;
            unint64_t v263 = v260;
            if (v262)
            {
              *(void *)unint64_t v193 = v262;
              unint64_t v263 = (unsigned char *)*v240;
            }
            uint64_t v264 = (unsigned char *)*v195;
            BOOL v820 = v263 == (unsigned char *)*v195;
            v263[24] = v820;
            if (!v820)
            {
              do
              {
                uint64_t v265 = *((void *)v263 + 2);
                if (*(unsigned char *)(v265 + 24)) {
                  break;
                }
                uint64_t v266 = *(unsigned char **)(v265 + 16);
                uint64_t v267 = *(void *)v266;
                if (*(void *)v266 == v265)
                {
                  uint64_t v270 = *((void *)v266 + 1);
                  if (!v270 || (int v271 = *(unsigned __int8 *)(v270 + 24), v268 = (unsigned char *)(v270 + 24), v271))
                  {
                    if (*(unsigned char **)v265 == v263)
                    {
                      *(unsigned char *)(v265 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                      v266[24] = 0;
                      uint64_t v274 = *(void *)(v265 + 8);
                      *(void *)uint64_t v266 = v274;
                      if (v274) {
                        goto LABEL_133;
                      }
                    }
                    else
                    {
                      unint64_t v272 = *(uint64_t **)(v265 + 8);
                      uint64_t v273 = *v272;
                      *(void *)(v265 + 8) = *v272;
                      if (v273)
                      {
                        *(void *)(v273 + 16) = v265;
                        uint64_t v266 = *(unsigned char **)(v265 + 16);
                      }
                      v272[2] = (uint64_t)v266;
                      *(void *)(*(void *)(v265 + 16) + 8 * (**(void **)(v265 + 16) != v265)) = v272;
                      *unint64_t v272 = v265;
                      *(void *)(v265 + 16) = v272;
                      uint64_t v266 = (unsigned char *)v272[2];
                      uint64_t v265 = *(void *)v266;
                      *((unsigned char *)v272 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                      v266[24] = 0;
                      uint64_t v274 = *(void *)(v265 + 8);
                      *(void *)uint64_t v266 = v274;
                      if (v274) {
LABEL_133:
                      }
                        *(void *)(v274 + 16) = v266;
                    }
                    *(void *)(v265 + 16) = *((void *)v266 + 2);
                    *(void *)(*((void *)v266 + 2) + 8 * (**((void **)v266 + 2) != (void)v266)) = v265;
                    *(void *)(v265 + 8) = v266;
LABEL_140:
                    *((void *)v266 + 2) = v265;
                    break;
                  }
                }
                else if (!v267 || (v269 = *(unsigned __int8 *)(v267 + 24), uint64_t v268 = (unsigned char *)(v267 + 24), v269))
                {
                  if (*(unsigned char **)v265 == v263)
                  {
                    uint64_t v369 = *((void *)v263 + 1);
                    *(void *)uint64_t v265 = v369;
                    if (v369)
                    {
                      *(void *)(v369 + 16) = v265;
                      uint64_t v266 = *(unsigned char **)(v265 + 16);
                    }
                    *((void *)v263 + 2) = v266;
                    *(void *)(*(void *)(v265 + 16) + 8 * (**(void **)(v265 + 16) != v265)) = v263;
                    *((void *)v263 + 1) = v265;
                    *(void *)(v265 + 16) = v263;
                    uint64_t v266 = (unsigned char *)*((void *)v263 + 2);
                    v263[24] = 1;
                    v266[24] = 0;
                    uint64_t v265 = *((void *)v266 + 1);
                    unint64_t v275 = *(unsigned char **)v265;
                    *((void *)v266 + 1) = *(void *)v265;
                    if (v275) {
LABEL_138:
                    }
                      *((void *)v275 + 2) = v266;
                  }
                  else
                  {
                    *(unsigned char *)(v265 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                    v266[24] = 0;
                    uint64_t v265 = *((void *)v266 + 1);
                    unint64_t v275 = *(unsigned char **)v265;
                    *((void *)v266 + 1) = *(void *)v265;
                    if (v275) {
                      goto LABEL_138;
                    }
                  }
                  *(void *)(v265 + 16) = *((void *)v266 + 2);
                  *(void *)(*((void *)v266 + 2) + 8 * (**((void **)v266 + 2) != (void)v266)) = v265;
                  *(void *)uint64_t v265 = v266;
                  goto LABEL_140;
                }
                *(unsigned char *)(v265 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                unint64_t v263 = v266;
                v266[24] = v266 == v264;
                unsigned char *v268 = 1;
              }
              while (v266 != v264);
            }
            ++*((void *)v193 + 2);
            goto LABEL_142;
          }
LABEL_92:
          if ((SBYTE7(v1223) & 0x80u) == 0) {
            size_t v244 = BYTE7(v1223);
          }
          else {
            size_t v244 = *(void *)&buf[8];
          }
          if ((SBYTE7(v1223) & 0x80u) == 0) {
            float v245 = buf;
          }
          else {
            float v245 = *(uint8_t **)buf;
          }
          while (1)
          {
            while (1)
            {
              uint64_t v241 = v239;
              uint8x8_t v248 = (const void *)v239[4];
              int8x8_t v246 = v239 + 4;
              unint64_t v247 = v248;
              int v249 = *((char *)v246 + 23);
              if (v249 >= 0) {
                size_t v250 = *((unsigned __int8 *)v246 + 23);
              }
              else {
                size_t v250 = v246[1];
              }
              if (v249 >= 0) {
                unint64_t v251 = v246;
              }
              else {
                unint64_t v251 = v247;
              }
              if (v250 >= v244) {
                size_t v252 = v244;
              }
              else {
                size_t v252 = v250;
              }
              int v253 = memcmp(v245, v251, v252);
              BOOL v254 = v244 < v250;
              if (v253) {
                BOOL v254 = v253 < 0;
              }
              if (!v254) {
                break;
              }
              unint64_t v239 = (void *)*v241;
              uint64_t v240 = v241;
              if (!*v241) {
                goto LABEL_116;
              }
            }
            int v255 = memcmp(v251, v245, v252);
            BOOL v259 = v250 < v244;
            if (v255) {
              BOOL v259 = v255 < 0;
            }
            if (!v259) {
              break;
            }
            unint64_t v239 = (void *)v241[1];
            if (!v239)
            {
              uint64_t v240 = v241 + 1;
              goto LABEL_116;
            }
          }
          uint64_t v260 = v241;
LABEL_142:
          objc_msgSend_setObject_atIndexedSubscript_(v1169, v256, *((void *)v260 + 7), v165, v257, v258);
          if (SBYTE7(v1223) < 0) {
            operator delete(*(void **)buf);
          }
          id v281 = (const char *)objc_msgSend_UTF8String(@"past_attention_weights", v276, v277, v278, v279, v280);
          size_t v282 = strlen(v281);
          if (v282 > 0x7FFFFFFFFFFFFFF7) {
            sub_1C4949B7C();
          }
          size_t v283 = v282;
          if (v282 >= 0x17)
          {
            uint64_t v288 = (v282 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v282 | 7) != 0x17) {
              uint64_t v288 = v282 | 7;
            }
            uint64_t v289 = v288 + 1;
            uint64_t v284 = operator new(v288 + 1);
            *(void *)&long long v1223 = v289 | 0x8000000000000000;
            *(void *)std::string buf = v284;
            *(void *)&buf[8] = v283;
          }
          else
          {
            BYTE7(v1223) = v282;
            uint64_t v284 = buf;
            if (!v282)
            {
              buf[0] = 0;
              unint64_t v285 = (void *)*v195;
              uint64_t v286 = v193 + 8;
              unint64_t v287 = v193 + 8;
              if (!*v195) {
                goto LABEL_177;
              }
              goto LABEL_153;
            }
          }
          memmove(v284, v281, v283);
          *((unsigned char *)v284 + v283) = 0;
          unint64_t v285 = (void *)*v195;
          uint64_t v286 = v193 + 8;
          unint64_t v287 = v193 + 8;
          if (!*v195)
          {
LABEL_177:
            uint64_t v306 = operator new(0x40uLL);
            *((_OWORD *)v306 + 2) = *(_OWORD *)buf;
            uint64_t v307 = v1223;
            *(void *)&long long v1223 = 0;
            memset(buf, 0, sizeof(buf));
            *((void *)v306 + 6) = v307;
            *((void *)v306 + 7) = 0;
            *(void *)uint64_t v306 = 0;
            *((void *)v306 + 1) = 0;
            *((void *)v306 + 2) = v287;
            *uint64_t v286 = v306;
            uint64_t v308 = **(void **)v193;
            id v309 = v306;
            if (v308)
            {
              *(void *)unint64_t v193 = v308;
              id v309 = (unsigned char *)*v286;
            }
            unint64_t v310 = (unsigned char *)*v195;
            BOOL v820 = v309 == (unsigned char *)*v195;
            v309[24] = v820;
            if (!v820)
            {
              do
              {
                uint64_t v311 = *((void *)v309 + 2);
                if (*(unsigned char *)(v311 + 24)) {
                  break;
                }
                uint64_t v312 = *(unsigned char **)(v311 + 16);
                uint64_t v313 = *(void *)v312;
                if (*(void *)v312 == v311)
                {
                  uint64_t v316 = *((void *)v312 + 1);
                  if (!v316 || (v317 = *(unsigned __int8 *)(v316 + 24), uint64_t v314 = (unsigned char *)(v316 + 24), v317))
                  {
                    if (*(unsigned char **)v311 == v309)
                    {
                      *(unsigned char *)(v311 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                      v312[24] = 0;
                      uint64_t v320 = *(void *)(v311 + 8);
                      *(void *)uint64_t v312 = v320;
                      if (v320) {
                        goto LABEL_194;
                      }
                    }
                    else
                    {
                      uint64_t v318 = *(uint64_t **)(v311 + 8);
                      uint64_t v319 = *v318;
                      *(void *)(v311 + 8) = *v318;
                      if (v319)
                      {
                        *(void *)(v319 + 16) = v311;
                        uint64_t v312 = *(unsigned char **)(v311 + 16);
                      }
                      v318[2] = (uint64_t)v312;
                      *(void *)(*(void *)(v311 + 16) + 8 * (**(void **)(v311 + 16) != v311)) = v318;
                      uint64_t *v318 = v311;
                      *(void *)(v311 + 16) = v318;
                      uint64_t v312 = (unsigned char *)v318[2];
                      uint64_t v311 = *(void *)v312;
                      *((unsigned char *)v318 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                      v312[24] = 0;
                      uint64_t v320 = *(void *)(v311 + 8);
                      *(void *)uint64_t v312 = v320;
                      if (v320) {
LABEL_194:
                      }
                        *(void *)(v320 + 16) = v312;
                    }
                    *(void *)(v311 + 16) = *((void *)v312 + 2);
                    *(void *)(*((void *)v312 + 2) + 8 * (**((void **)v312 + 2) != (void)v312)) = v311;
                    *(void *)(v311 + 8) = v312;
LABEL_201:
                    *((void *)v312 + 2) = v311;
                    break;
                  }
                }
                else if (!v313 || (v315 = *(unsigned __int8 *)(v313 + 24), uint64_t v314 = (unsigned char *)(v313 + 24), v315))
                {
                  if (*(unsigned char **)v311 == v309)
                  {
                    uint64_t v370 = *((void *)v309 + 1);
                    *(void *)uint64_t v311 = v370;
                    if (v370)
                    {
                      *(void *)(v370 + 16) = v311;
                      uint64_t v312 = *(unsigned char **)(v311 + 16);
                    }
                    *((void *)v309 + 2) = v312;
                    *(void *)(*(void *)(v311 + 16) + 8 * (**(void **)(v311 + 16) != v311)) = v309;
                    *((void *)v309 + 1) = v311;
                    *(void *)(v311 + 16) = v309;
                    uint64_t v312 = (unsigned char *)*((void *)v309 + 2);
                    v309[24] = 1;
                    v312[24] = 0;
                    uint64_t v311 = *((void *)v312 + 1);
                    uint64_t v321 = *(unsigned char **)v311;
                    *((void *)v312 + 1) = *(void *)v311;
                    if (v321) {
LABEL_199:
                    }
                      *((void *)v321 + 2) = v312;
                  }
                  else
                  {
                    *(unsigned char *)(v311 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                    v312[24] = 0;
                    uint64_t v311 = *((void *)v312 + 1);
                    uint64_t v321 = *(unsigned char **)v311;
                    *((void *)v312 + 1) = *(void *)v311;
                    if (v321) {
                      goto LABEL_199;
                    }
                  }
                  *(void *)(v311 + 16) = *((void *)v312 + 2);
                  *(void *)(*((void *)v312 + 2) + 8 * (**((void **)v312 + 2) != (void)v312)) = v311;
                  *(void *)uint64_t v311 = v312;
                  goto LABEL_201;
                }
                *(unsigned char *)(v311 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                id v309 = v312;
                v312[24] = v312 == v310;
                *uint64_t v314 = 1;
              }
              while (v312 != v310);
            }
            ++*((void *)v193 + 2);
            goto LABEL_203;
          }
LABEL_153:
          if ((SBYTE7(v1223) & 0x80u) == 0) {
            size_t v290 = BYTE7(v1223);
          }
          else {
            size_t v290 = *(void *)&buf[8];
          }
          if ((SBYTE7(v1223) & 0x80u) == 0) {
            unint64_t v291 = buf;
          }
          else {
            unint64_t v291 = *(uint8_t **)buf;
          }
          while (1)
          {
            while (1)
            {
              unint64_t v287 = v285;
              uint64_t v294 = (const void *)v285[4];
              uint64_t v292 = v285 + 4;
              uint64_t v293 = v294;
              int v295 = *((char *)v292 + 23);
              if (v295 >= 0) {
                size_t v296 = *((unsigned __int8 *)v292 + 23);
              }
              else {
                size_t v296 = v292[1];
              }
              if (v295 >= 0) {
                uint64_t v297 = v292;
              }
              else {
                uint64_t v297 = v293;
              }
              if (v296 >= v290) {
                size_t v298 = v290;
              }
              else {
                size_t v298 = v296;
              }
              int v299 = memcmp(v291, v297, v298);
              BOOL v300 = v290 < v296;
              if (v299) {
                BOOL v300 = v299 < 0;
              }
              if (!v300) {
                break;
              }
              unint64_t v285 = (void *)*v287;
              uint64_t v286 = v287;
              if (!*v287) {
                goto LABEL_177;
              }
            }
            int v301 = memcmp(v297, v291, v298);
            BOOL v305 = v296 < v290;
            if (v301) {
              BOOL v305 = v301 < 0;
            }
            if (!v305) {
              break;
            }
            unint64_t v285 = (void *)v287[1];
            if (!v285)
            {
              uint64_t v286 = v287 + 1;
              goto LABEL_177;
            }
          }
          uint64_t v306 = v287;
LABEL_203:
          objc_msgSend_setObject_atIndexedSubscript_(v1170, v302, *((void *)v306 + 7), v165, v303, v304);
          if (SBYTE7(v1223) < 0) {
            operator delete(*(void **)buf);
          }
          uint64_t v327 = (const char *)objc_msgSend_UTF8String(@"y", v322, v323, v324, v325, v326);
          size_t v328 = strlen(v327);
          if (v328 > 0x7FFFFFFFFFFFFFF7) {
            sub_1C4949B7C();
          }
          size_t v329 = v328;
          if (v328 >= 0x17)
          {
            uint64_t v334 = (v328 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v328 | 7) != 0x17) {
              uint64_t v334 = v328 | 7;
            }
            uint64_t v335 = v334 + 1;
            uint64_t v330 = operator new(v334 + 1);
            *(void *)&long long v1223 = v335 | 0x8000000000000000;
            *(void *)std::string buf = v330;
            *(void *)&buf[8] = v329;
          }
          else
          {
            BYTE7(v1223) = v328;
            uint64_t v330 = buf;
            if (!v328)
            {
              buf[0] = 0;
              uint64_t v331 = (void *)*v195;
              uint64_t v332 = v193 + 8;
              id v333 = v193 + 8;
              if (*v195) {
                goto LABEL_214;
              }
              goto LABEL_238;
            }
          }
          memmove(v330, v327, v329);
          *((unsigned char *)v330 + v329) = 0;
          uint64_t v331 = (void *)*v195;
          uint64_t v332 = v193 + 8;
          id v333 = v193 + 8;
          if (*v195)
          {
LABEL_214:
            if ((SBYTE7(v1223) & 0x80u) == 0) {
              size_t v336 = BYTE7(v1223);
            }
            else {
              size_t v336 = *(void *)&buf[8];
            }
            if ((SBYTE7(v1223) & 0x80u) == 0) {
              uint64_t v337 = buf;
            }
            else {
              uint64_t v337 = *(uint8_t **)buf;
            }
            while (1)
            {
              while (1)
              {
                id v333 = v331;
                uint64_t v340 = (const void *)v331[4];
                uint64_t v338 = v331 + 4;
                uint64_t v339 = v340;
                int v341 = *((char *)v338 + 23);
                if (v341 >= 0) {
                  size_t v342 = *((unsigned __int8 *)v338 + 23);
                }
                else {
                  size_t v342 = v338[1];
                }
                if (v341 >= 0) {
                  int v343 = v338;
                }
                else {
                  int v343 = v339;
                }
                if (v342 >= v336) {
                  size_t v344 = v336;
                }
                else {
                  size_t v344 = v342;
                }
                int v345 = memcmp(v337, v343, v344);
                BOOL v346 = v336 < v342;
                if (v345) {
                  BOOL v346 = v345 < 0;
                }
                if (!v346) {
                  break;
                }
                uint64_t v331 = (void *)*v333;
                uint64_t v332 = v333;
                if (!*v333) {
                  goto LABEL_238;
                }
              }
              int v347 = memcmp(v343, v337, v344);
              BOOL v351 = v342 < v336;
              if (v347) {
                BOOL v351 = v347 < 0;
              }
              if (!v351) {
                break;
              }
              uint64_t v331 = (void *)v333[1];
              if (!v331)
              {
                uint64_t v332 = v333 + 1;
                goto LABEL_238;
              }
            }
            uint64_t v352 = v333;
            goto LABEL_264;
          }
LABEL_238:
          uint64_t v352 = operator new(0x40uLL);
          *((_OWORD *)v352 + 2) = *(_OWORD *)buf;
          uint64_t v353 = v1223;
          *(void *)&long long v1223 = 0;
          memset(buf, 0, sizeof(buf));
          *((void *)v352 + 6) = v353;
          *((void *)v352 + 7) = 0;
          *(void *)uint64_t v352 = 0;
          *((void *)v352 + 1) = 0;
          *((void *)v352 + 2) = v333;
          *uint64_t v332 = v352;
          uint64_t v354 = **(void **)v193;
          uint64_t v355 = v352;
          if (v354)
          {
            *(void *)unint64_t v193 = v354;
            uint64_t v355 = (unsigned char *)*v332;
          }
          float v356 = (unsigned char *)*v195;
          BOOL v820 = v355 == (unsigned char *)*v195;
          v355[24] = v820;
          if (!v820)
          {
            do
            {
              uint64_t v357 = *((void *)v355 + 2);
              if (*(unsigned char *)(v357 + 24)) {
                break;
              }
              uint64_t v358 = *(unsigned char **)(v357 + 16);
              uint64_t v359 = *(void *)v358;
              if (*(void *)v358 == v357)
              {
                uint64_t v362 = *((void *)v358 + 1);
                if (!v362 || (v363 = *(unsigned __int8 *)(v362 + 24), uint64_t v360 = (unsigned char *)(v362 + 24), v363))
                {
                  if (*(unsigned char **)v357 == v355)
                  {
                    *(unsigned char *)(v357 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                    v358[24] = 0;
                    uint64_t v366 = *(void *)(v357 + 8);
                    *(void *)uint64_t v358 = v366;
                    if (v366) {
                      goto LABEL_255;
                    }
                  }
                  else
                  {
                    id v364 = *(uint64_t **)(v357 + 8);
                    uint64_t v365 = *v364;
                    *(void *)(v357 + 8) = *v364;
                    if (v365)
                    {
                      *(void *)(v365 + 16) = v357;
                      uint64_t v358 = *(unsigned char **)(v357 + 16);
                    }
                    v364[2] = (uint64_t)v358;
                    *(void *)(*(void *)(v357 + 16) + 8 * (**(void **)(v357 + 16) != v357)) = v364;
                    uint64_t *v364 = v357;
                    *(void *)(v357 + 16) = v364;
                    uint64_t v358 = (unsigned char *)v364[2];
                    uint64_t v357 = *(void *)v358;
                    *((unsigned char *)v364 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                    v358[24] = 0;
                    uint64_t v366 = *(void *)(v357 + 8);
                    *(void *)uint64_t v358 = v366;
                    if (v366) {
LABEL_255:
                    }
                      *(void *)(v366 + 16) = v358;
                  }
                  *(void *)(v357 + 16) = *((void *)v358 + 2);
                  *(void *)(*((void *)v358 + 2) + 8 * (**((void **)v358 + 2) != (void)v358)) = v357;
                  *(void *)(v357 + 8) = v358;
LABEL_262:
                  *((void *)v358 + 2) = v357;
                  break;
                }
              }
              else if (!v359 || (v361 = *(unsigned __int8 *)(v359 + 24), uint64_t v360 = (unsigned char *)(v359 + 24), v361))
              {
                if (*(unsigned char **)v357 == v355)
                {
                  uint64_t v371 = *((void *)v355 + 1);
                  *(void *)uint64_t v357 = v371;
                  if (v371)
                  {
                    *(void *)(v371 + 16) = v357;
                    uint64_t v358 = *(unsigned char **)(v357 + 16);
                  }
                  *((void *)v355 + 2) = v358;
                  *(void *)(*(void *)(v357 + 16) + 8 * (**(void **)(v357 + 16) != v357)) = v355;
                  *((void *)v355 + 1) = v357;
                  *(void *)(v357 + 16) = v355;
                  uint64_t v358 = (unsigned char *)*((void *)v355 + 2);
                  v355[24] = 1;
                  v358[24] = 0;
                  uint64_t v357 = *((void *)v358 + 1);
                  uint64_t v367 = *(unsigned char **)v357;
                  *((void *)v358 + 1) = *(void *)v357;
                  if (v367) {
LABEL_260:
                  }
                    *((void *)v367 + 2) = v358;
                }
                else
                {
                  *(unsigned char *)(v357 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                  v358[24] = 0;
                  uint64_t v357 = *((void *)v358 + 1);
                  uint64_t v367 = *(unsigned char **)v357;
                  *((void *)v358 + 1) = *(void *)v357;
                  if (v367) {
                    goto LABEL_260;
                  }
                }
                *(void *)(v357 + 16) = *((void *)v358 + 2);
                *(void *)(*((void *)v358 + 2) + 8 * (**((void **)v358 + 2) != (void)v358)) = v357;
                *(void *)uint64_t v357 = v358;
                goto LABEL_262;
              }
              *(unsigned char *)(v357 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
              uint64_t v355 = v358;
              v358[24] = v358 == v356;
              *uint64_t v360 = 1;
            }
            while (v358 != v356);
          }
          ++*((void *)v193 + 2);
LABEL_264:
          objc_msgSend_setObject_atIndexedSubscript_(v1171, v348, *((void *)v352 + 7), v165, v349, v350);
          if (SBYTE7(v1223) < 0) {
            operator delete(*(void **)buf);
          }
          ++v165;
          uint64_t v164 = (char *)v1199;
          if (0xEF7BDEF7BDEF7BDFLL * (((char *)v1200 - (unsigned char *)v1199) >> 3) <= v165) {
            goto LABEL_290;
          }
        }
        uint64_t v191 = (v188 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v188 | 7) != 0x17) {
          uint64_t v191 = v188 | 7;
        }
        uint64_t v192 = v191 + 1;
        uint64_t v190 = operator new(v191 + 1);
        *(void *)&long long v1223 = v192 | 0x8000000000000000;
        *(void *)std::string buf = v190;
        *(void *)&buf[8] = v189;
LABEL_29:
        memmove(v190, v187, v189);
        goto LABEL_30;
      }
LABEL_290:
      uint64_t v372 = objc_msgSend_shape(v1172, v159, v160, v161, v162, v163);
      uint64_t v377 = objc_msgSend_objectAtIndexedSubscript_(v372, v373, 0, v374, v375, v376);
      int v383 = objc_msgSend_unsignedIntValue(v377, v378, v379, v380, v381, v382);
      BOOL v384 = 0xEF7BDEF7BDEF7BDFLL * (((char *)v1200 - (unsigned char *)v1199) >> 3) == v383;

      if (!v384)
      {
        uint64_t v387 = objc_msgSend_multiArrayByConcatenatingMultiArrays_alongAxis_dataType_(MEMORY[0x1E4F1E9A8], v385, (uint64_t)v1163, 0, 65568, v386);

        uint64_t v390 = objc_msgSend_multiArrayByConcatenatingMultiArrays_alongAxis_dataType_(MEMORY[0x1E4F1E9A8], v388, (uint64_t)v1164, 0, 65568, v389);

        v1153 = (void *)v390;
        v1172 = (void *)v387;
      }
      context = (void *)MEMORY[0x1C8786C20]();
      id v391 = objc_alloc(MEMORY[0x1E4F1E930]);
      v1211[0] = @"encoded_image";
      v1211[1] = @"encoded_image_projected";
      v1212[0] = v1172;
      v1212[1] = v1153;
      v1211[2] = @"decoder_state_h";
      uint64_t v394 = objc_msgSend_multiArrayByConcatenatingMultiArrays_alongAxis_dataType_(MEMORY[0x1E4F1E9A8], v392, (uint64_t)v1168, 0, 65568, v393);
      v1212[2] = v394;
      v1211[3] = @"decoder_state_c";
      uint64_t v397 = objc_msgSend_multiArrayByConcatenatingMultiArrays_alongAxis_dataType_(MEMORY[0x1E4F1E9A8], v395, (uint64_t)v1169, 0, 65568, v396);
      v1212[3] = v397;
      v1211[4] = @"past_attention_weights";
      uint64_t v400 = objc_msgSend_multiArrayByConcatenatingMultiArrays_alongAxis_dataType_(MEMORY[0x1E4F1E9A8], v398, (uint64_t)v1170, 0, 65568, v399);
      v1212[4] = v400;
      v1211[5] = @"y_prev";
      BOOL v403 = objc_msgSend_multiArrayByConcatenatingMultiArrays_alongAxis_dataType_(MEMORY[0x1E4F1E9A8], v401, (uint64_t)v1171, 0, 65568, v402);
      v1212[5] = v403;
      uint64_t v406 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v404, (uint64_t)v1212, (uint64_t)v1211, 6, v405);
      v1155 = objc_msgSend_initWithDictionary_error_(v391, v407, (uint64_t)v406, 0, v408, v409);

      uint64_t v415 = objc_msgSend_decoderModel(v1160, v410, v411, v412, v413, v414);
      id v1198 = v1154;
      v1158 = objc_msgSend_predictionFromFeatures_options_error_(v415, v416, (uint64_t)v1155, (uint64_t)v1151, (uint64_t)&v1198, v417);
      id v418 = v1198;

      id v1154 = v418;
      id v423 = v1158;
      if (!v1158)
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        uint64_t v424 = (id)qword_1EA3C9F90[0];
        if (os_log_type_enabled(v424, OS_LOG_TYPE_FAULT))
        {
          objc_msgSend_localizedDescription(v418, v425, v426, v427, v428, v429);
          id v430 = (id)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)std::string buf = v1144;
          *(void *)&uint8_t buf[4] = v430;
          _os_log_impl(&dword_1C492D000, v424, OS_LOG_TYPE_FAULT, "An error occurred when running math decoder inference: %@", buf, 0xCu);
        }
        id v423 = 0;
      }
      v1209[0] = @"new_decoder_state_h";
      v1178 = objc_msgSend_featureValueForName_(v423, v419, @"new_decoder_state_h", v420, v421, v422);
      uint64_t v436 = objc_msgSend_multiArrayValue(v1178, v431, v432, v433, v434, v435);
      v1186 = objc_msgSend_squeezeDimensions_error_(v436, v437, (uint64_t)&unk_1F203DC08, 0, v438, v439);
      v1210[0] = v1186;
      v1209[1] = @"new_decoder_state_c";
      v1174 = objc_msgSend_featureValueForName_(v1158, v440, @"new_decoder_state_c", v441, v442, v443);
      uint64_t v449 = objc_msgSend_multiArrayValue(v1174, v444, v445, v446, v447, v448);
      double v453 = objc_msgSend_squeezeDimensions_error_(v449, v450, (uint64_t)&unk_1F203DC20, 0, v451, v452);
      v1210[1] = v453;
      v1209[2] = @"attention_weights";
      uint64_t v458 = objc_msgSend_featureValueForName_(v1158, v454, @"attention_weights", v455, v456, v457);
      uint64_t v464 = objc_msgSend_multiArrayValue(v458, v459, v460, v461, v462, v463);
      uint64_t v468 = objc_msgSend_squeezeDimensions_error_(v464, v465, (uint64_t)&unk_1F203DC38, 0, v466, v467);
      v1210[2] = v468;
      v1209[3] = @"y";
      uint64_t v473 = objc_msgSend_featureValueForName_(v1158, v469, @"y", v470, v471, v472);
      uint64_t v479 = objc_msgSend_multiArrayValue(v473, v474, v475, v476, v477, v478);
      uint64_t v483 = objc_msgSend_squeezeDimensions_error_(v479, v480, (uint64_t)&unk_1F203DC50, 0, v481, v482);
      v1210[3] = v483;
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v484, (uint64_t)v1210, (uint64_t)v1209, 4, v485);
      v1159 = (NSDictionary *)objc_claimAutoreleasedReturnValue();

      uint64_t v491 = objc_msgSend_activeAlphabet(v1160, v486, v487, v488, v489, v490);
      LOBYTE(v468) = v491 == 0;

      if (v468)
      {
        id v580 = 0;
        uint64_t v522 = 0;
        double v581 = v1199;
        if (v1200 != v1199) {
          goto LABEL_408;
        }
      }
      else
      {
        objc_msgSend_objectForKeyedSubscript_(v1159, v492, @"y", v494, v495, v496);
        id v497 = objc_claimAutoreleasedReturnValue();
        uint64_t v503 = objc_msgSend_dataPointer(v497, v498, v499, v500, v501, v502);
        uint64_t v509 = objc_msgSend_shape(v497, v504, v505, v506, v507, v508);
        uint64_t v514 = objc_msgSend_objectAtIndexedSubscript_(v509, v510, 0, v511, v512, v513);
        int v520 = objc_msgSend_intValue(v514, v515, v516, v517, v518, v519);

        v1166 = v497;
        if (v520 >= 1)
        {
          uint64_t v521 = 0;
          uint64_t v522 = 0;
          uint64_t v523 = 0;
          uint64_t v524 = 0;
          uint64_t v525 = 0;
          uint64_t v526 = 0;
          int8x8_t v528 = *(int8x8_t *)a1;
          int8x8_t v527 = *(int8x8_t *)(a1 + 8);
          uint64_t v1179 = v520;
          int8x8_t v529 = v527;
          while (1)
          {
            uint64_t v1187 = v521;
            unint64_t v530 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v529 - *(void *)&v528) >> 3);
            if (*(void *)&v529 != *(void *)&v528)
            {
              unint64_t v531 = 0;
              std::string::size_type v532 = (float *)v1202;
              float v533 = 0.0;
              while (1)
              {
                int v536 = v530 * v526;
                uint64_t v537 = (int)v530 * (int)v526 + (int)v531;
                if (v532[v531] != 0.0) {
                  goto LABEL_306;
                }
                float v538 = *(float *)(v503 + 4 * v537);
                if (v538 <= *(float *)(a1 + 760) || (int8x8_t v539 = *(int8x8_t *)(a1 + 568), !*(void *)&v539))
                {
LABEL_345:
                  uint64_t v554 = (int8x8_t *)a1;
                  if (v538 > *(float *)(a1 + 756)) {
                    goto LABEL_346;
                  }
                  goto LABEL_306;
                }
                uint8x8_t v540 = (uint8x8_t)vcnt_s8(v539);
                v540.i16[0] = vaddlv_u8(v540);
                if (v540.u32[0] > 1uLL)
                {
                  if (*(void *)&v539 <= v531) {
                    unint64_t v541 = v531 % *(void *)&v539;
                  }
                  else {
                    unint64_t v541 = v531;
                  }
                  uint64_t v542 = *(void *)(a1 + 560);
                  uint64_t v543 = *(uint64_t ***)(v542 + 8 * v541);
                  if (!v543) {
                    goto LABEL_345;
                  }
                }
                else
                {
                  unint64_t v541 = (*(void *)&v539 + 0x7FFFFFFFLL) & v531;
                  uint64_t v542 = *(void *)(a1 + 560);
                  uint64_t v543 = *(uint64_t ***)(v542 + 8 * v541);
                  if (!v543) {
                    goto LABEL_345;
                  }
                }
                unint64_t v544 = *v543;
                if (!*v543) {
                  goto LABEL_345;
                }
                uint64_t v545 = *(void *)&v539 - 1;
                if (v540.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v546 = v544[1];
                    if (v546 == v531)
                    {
                      if (v531 == *((_DWORD *)v544 + 4)) {
                        goto LABEL_332;
                      }
                    }
                    else if ((v546 & v545) != v541)
                    {
                      goto LABEL_345;
                    }
                    unint64_t v544 = (uint64_t *)*v544;
                    if (!v544) {
                      goto LABEL_345;
                    }
                  }
                }
                while (1)
                {
                  unint64_t v547 = v544[1];
                  if (v547 == v531) {
                    break;
                  }
                  if (v547 >= *(void *)&v539) {
                    v547 %= *(void *)&v539;
                  }
                  if (v547 != v541) {
                    goto LABEL_345;
                  }
LABEL_326:
                  unint64_t v544 = (uint64_t *)*v544;
                  if (!v544) {
                    goto LABEL_345;
                  }
                }
                if (v531 != *((_DWORD *)v544 + 4)) {
                  goto LABEL_326;
                }
LABEL_332:
                if (v540.u32[0] > 1uLL)
                {
                  unint64_t v548 = v531;
                  if (*(void *)&v539 <= v531) {
                    unint64_t v548 = v531 % *(void *)&v539;
                  }
                }
                else
                {
                  unint64_t v548 = (*(void *)&v539 + 0x7FFFFFFFLL) & v531;
                }
                uint64_t v549 = *(uint64_t ***)(v542 + 8 * v548);
                if (!v549 || (int64_t v550 = *v549) == 0) {
LABEL_1220:
                }
                  sub_1C49470F0("unordered_map::at: key not found");
                if (v540.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v551 = v550[1];
                    if (v551 == v531)
                    {
                      if (v531 == *((_DWORD *)v550 + 4)) {
                        goto LABEL_344;
                      }
                    }
                    else if ((v551 & v545) != v548)
                    {
                      goto LABEL_1220;
                    }
                    int64_t v550 = (uint64_t *)*v550;
                    if (!v550) {
                      goto LABEL_1220;
                    }
                  }
                }
                while (2)
                {
                  unint64_t v559 = v550[1];
                  if (v559 != v531)
                  {
                    if (v559 >= *(void *)&v539) {
                      v559 %= *(void *)&v539;
                    }
                    if (v559 != v548) {
                      goto LABEL_1220;
                    }
LABEL_353:
                    int64_t v550 = (uint64_t *)*v550;
                    if (!v550) {
                      goto LABEL_1220;
                    }
                    continue;
                  }
                  break;
                }
                if (v531 != *((_DWORD *)v550 + 4)) {
                  goto LABEL_353;
                }
LABEL_344:
                unint64_t v552 = (int *)v550[3];
                uint64_t v553 = (int *)v550[4];
                if (v552 == v553) {
                  goto LABEL_345;
                }
                do
                {
                  int64_t v558 = *v552;
                  *(float *)(v503 + 4 * ((int)v558 + v536)) = *(float *)(v503 + 4 * v537)
                                                              + *(float *)(v503 + 4 * ((int)v558 + v536));
                  if ((uint64_t)v531 > v558) {
                    float v533 = v533 + *(float *)(v503 + 4 * v537);
                  }
                  ++v552;
                }
                while (v552 != v553);
                float v538 = *(float *)(v503 + 4 * v537);
                uint64_t v554 = (int8x8_t *)a1;
                if (v538 > *(float *)(a1 + 756))
                {
LABEL_346:
                  int8x8_t v555 = v554[76];
                  if (v555)
                  {
                    uint8x8_t v556 = (uint8x8_t)vcnt_s8(v555);
                    v556.i16[0] = vaddlv_u8(v556);
                    if (v556.u32[0] > 1uLL)
                    {
                      unint64_t v557 = v531;
                      if (*(void *)&v555 <= v531) {
                        unint64_t v557 = v531 % *(void *)&v555;
                      }
                    }
                    else
                    {
                      unint64_t v557 = (*(void *)&v555 + 0x7FFFFFFFLL) & v531;
                    }
                    uint64_t v560 = *(uint64_t ***)(*(void *)(a1 + 600) + 8 * v557);
                    if (v560)
                    {
                      uint64_t v561 = *v560;
                      if (v561)
                      {
                        if (v556.u32[0] < 2uLL)
                        {
                          uint64_t v562 = *(void *)&v555 - 1;
                          while (1)
                          {
                            uint64_t v564 = v561[1];
                            if (v564 == v531)
                            {
                              if (v531 == *((_DWORD *)v561 + 4)) {
                                goto LABEL_306;
                              }
                            }
                            else if ((v564 & v562) != v557)
                            {
                              goto LABEL_376;
                            }
                            uint64_t v561 = (uint64_t *)*v561;
                            if (!v561) {
                              goto LABEL_376;
                            }
                          }
                        }
                        do
                        {
                          unint64_t v563 = v561[1];
                          if (v563 == v531)
                          {
                            if (v531 == *((_DWORD *)v561 + 4)) {
                              goto LABEL_306;
                            }
                          }
                          else
                          {
                            if (v563 >= *(void *)&v555) {
                              v563 %= *(void *)&v555;
                            }
                            if (v563 != v557) {
                              break;
                            }
                          }
                          uint64_t v561 = (uint64_t *)*v561;
                        }
                        while (v561);
                      }
                    }
                  }
LABEL_376:
                  if (v525 < v524)
                  {
                    *(_DWORD *)uint64_t v525 = v526;
                    *((_DWORD *)v525 + 1) = v531;
                    uint64_t v534 = (int *)(v525 + 12);
                    *((float *)v525 + 2) = v538;
                  }
                  else
                  {
                    unint64_t v565 = 0xAAAAAAAAAAAAAAABLL * ((v525 - v522) >> 2) + 1;
                    if (v565 > 0x1555555555555555) {
                      sub_1C494A220();
                    }
                    if (0x5555555555555556 * ((v524 - v522) >> 2) > v565) {
                      unint64_t v565 = 0x5555555555555556 * ((v524 - v522) >> 2);
                    }
                    if (0xAAAAAAAAAAAAAAABLL * ((v524 - v522) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                      unint64_t v566 = 0x1555555555555555;
                    }
                    else {
                      unint64_t v566 = v565;
                    }
                    if (v566)
                    {
                      if (v566 > 0x1555555555555555) {
                        sub_1C4949AA8();
                      }
                      id v567 = (char *)operator new(12 * v566);
                    }
                    else
                    {
                      id v567 = 0;
                    }
                    id v568 = &v567[4 * ((v525 - v522) >> 2)];
                    *(_DWORD *)id v568 = v526;
                    *((_DWORD *)v568 + 1) = v531;
                    *((float *)v568 + 2) = v538;
                    for (uint64_t i = (int *)v568; v525 != v522; i[2] = v571)
                    {
                      uint64_t v570 = *(void *)(v525 - 12);
                      v525 -= 12;
                      int v571 = *((_DWORD *)v525 + 2);
                      *(void *)(i - 3) = v570;
                      i -= 3;
                    }
                    uint64_t v524 = &v567[12 * v566];
                    uint64_t v572 = v568 + 12;
                    if (v522) {
                      operator delete(v522);
                    }
                    uint64_t v522 = (char *)i;
                    uint64_t v534 = (int *)v572;
                  }
                  std::string::size_type v532 = (float *)v1202;
                  uint64_t v523 = v534;
                  uint64_t v525 = (char *)v534;
                  int8x8_t v528 = *(int8x8_t *)a1;
                  int8x8_t v527 = *(int8x8_t *)(a1 + 8);
                }
LABEL_306:
                float v535 = v532[v531] * *(float *)(v503 + 4 * v537);
                *(float *)(v503 + 4 * v537) = v535;
                float v533 = v533 + v535;
                ++v531;
                unint64_t v530 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v527 - *(void *)&v528) >> 3);
                int8x8_t v529 = v527;
                if (v530 <= v531) {
                  goto LABEL_395;
                }
              }
            }
            float v533 = 0.0;
            int8x8_t v529 = v528;
LABEL_395:
            if (v530)
            {
              float v573 = 1.0 / v533;
              if (v530 >= 8)
              {
                unint64_t v574 = v530 & 0xFFFFFFFFFFFFFFF8;
                id v575 = (float32x4_t *)(v503 + 16 + v530 * v1187);
                unint64_t v576 = v530 & 0xFFFFFFFFFFFFFFF8;
                do
                {
                  float32x4_t v577 = vmulq_n_f32(*v575, v573);
                  v575[-1] = vmulq_n_f32(v575[-1], v573);
                  float32x4_t *v575 = v577;
                  v575 += 2;
                  v576 -= 8;
                }
                while (v576);
                if (v530 == v574) {
                  goto LABEL_301;
                }
              }
              else
              {
                unint64_t v574 = 0;
              }
              unint64_t v578 = v530 - v574;
              id v579 = (float *)(v503 + 4 * (v574 + v530 * v526));
              do
              {
                float *v579 = v573 * *v579;
                ++v579;
                --v578;
              }
              while (v578);
            }
LABEL_301:
            ++v526;
            uint64_t v521 = v1187 + 4;
            if (v526 == v1179) {
              goto LABEL_407;
            }
          }
        }
        uint64_t v522 = 0;
        uint64_t v523 = 0;
LABEL_407:

        id v580 = v523;
        double v581 = v1199;
        if (v1200 != v1199)
        {
LABEL_408:
          unint64_t v582 = 0;
          v1167 = v580;
          do
          {
            uint64_t v584 = (uint64_t)v581 + 248 * v582;
            if (*(unsigned char *)(v584 + 196))
            {
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
              if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
              {
                std::string::size_type v586 = (std::string::size_type)sub_1C4ACDFC4(&__p, v584);
              }
              else
              {
                sub_1C4AC8B58((uint64_t **)__p.__r_.__value_.__l.__size_, v584);
                std::string::size_type v586 = size + 248;
              }
              __p.__r_.__value_.__l.__size_ = v586;
              goto LABEL_552;
            }
            int v587 = objc_msgSend_eosIndex(v1160, v492, v493, v494, v495, v496);
            CoreHandwriting::CHMathBeamDecoder::expand((CoreHandwriting::CHMathBeamDecoder *)a1, (uint64_t **)v584, v1159, a6, v582, v587, &v1196);
            unint64_t v1175 = v582;
            uint64_t v588 = (int *)v522;
            if (v522 != (char *)v580)
            {
              do
              {
                while (1)
                {
                  int v633 = v588[2];
                  int v634 = v588[1];
                  uint64_t v635 = &v1196[31 * *v588];
                  uint64_t v638 = (uint64_t *)v635[22];
                  v637 = (uint64_t **)(v635 + 22);
                  v636 = v638;
                  uint64_t v639 = v637;
                  uint64_t v640 = v637;
                  if (v638) {
                    break;
                  }
LABEL_514:
                  v642 = operator new(0x28uLL);
                  v642[7] = v1194;
                  *((void *)v642 + 4) = 0;
                  *(void *)v642 = 0;
                  *((void *)v642 + 1) = 0;
                  *((void *)v642 + 2) = v640;
                  *uint64_t v639 = (uint64_t *)v642;
                  uint64_t v643 = (uint64_t *)**(v637 - 1);
                  uint64_t v644 = (uint64_t *)v642;
                  if (v643)
                  {
                    *(v637 - 1) = v643;
                    uint64_t v644 = *v639;
                  }
                  uint64_t v645 = *v637;
                  BOOL v820 = v644 == *v637;
                  *((unsigned char *)v644 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v820;
                  if (!v820)
                  {
                    do
                    {
                      uint64_t v646 = v644[2];
                      if (*(unsigned char *)(v646 + 24)) {
                        break;
                      }
                      v647 = *(uint64_t **)(v646 + 16);
                      uint64_t v648 = *v647;
                      if (*v647 == v646)
                      {
                        uint64_t v651 = v647[1];
                        if (!v651 || (int v652 = *(unsigned __int8 *)(v651 + 24), v649 = (unsigned char *)(v651 + 24), v652))
                        {
                          if (*(uint64_t **)v646 == v644)
                          {
                            *(unsigned char *)(v646 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                            *((unsigned char *)v647 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                            uint64_t v655 = *(void *)(v646 + 8);
                            uint64_t *v647 = v655;
                            if (v655) {
                              goto LABEL_531;
                            }
                          }
                          else
                          {
                            uint64_t v653 = *(uint64_t **)(v646 + 8);
                            uint64_t v654 = *v653;
                            *(void *)(v646 + 8) = *v653;
                            if (v654)
                            {
                              *(void *)(v654 + 16) = v646;
                              v647 = *(uint64_t **)(v646 + 16);
                            }
                            v653[2] = (uint64_t)v647;
                            *(void *)(*(void *)(v646 + 16) + 8 * (**(void **)(v646 + 16) != v646)) = v653;
                            *uint64_t v653 = v646;
                            *(void *)(v646 + 16) = v653;
                            v647 = (uint64_t *)v653[2];
                            uint64_t v646 = *v647;
                            *((unsigned char *)v653 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                            *((unsigned char *)v647 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                            uint64_t v655 = *(void *)(v646 + 8);
                            uint64_t *v647 = v655;
                            if (v655) {
LABEL_531:
                            }
                              *(void *)(v655 + 16) = v647;
                          }
                          *(void *)(v646 + 16) = v647[2];
                          *(void *)(v647[2] + 8 * (*(void *)v647[2] != (void)v647)) = v646;
                          *(void *)(v646 + 8) = v647;
LABEL_505:
                          v647[2] = v646;
                          break;
                        }
                      }
                      else if (!v648 || (int v650 = *(unsigned __int8 *)(v648 + 24), v649 = (unsigned char *)(v648 + 24), v650))
                      {
                        if (*(uint64_t **)v646 == v644)
                        {
                          uint64_t v657 = v644[1];
                          *(void *)uint64_t v646 = v657;
                          if (v657)
                          {
                            *(void *)(v657 + 16) = v646;
                            v647 = *(uint64_t **)(v646 + 16);
                          }
                          v644[2] = (uint64_t)v647;
                          *(void *)(*(void *)(v646 + 16) + 8 * (**(void **)(v646 + 16) != v646)) = v644;
                          v644[1] = v646;
                          *(void *)(v646 + 16) = v644;
                          v647 = (uint64_t *)v644[2];
                          *((unsigned char *)v644 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                          *((unsigned char *)v647 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                          uint64_t v646 = v647[1];
                          unint64_t v656 = *(uint64_t **)v646;
                          v647[1] = *(void *)v646;
                          if (!v656) {
                            goto LABEL_504;
                          }
                        }
                        else
                        {
                          *(unsigned char *)(v646 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                          *((unsigned char *)v647 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                          uint64_t v646 = v647[1];
                          unint64_t v656 = *(uint64_t **)v646;
                          v647[1] = *(void *)v646;
                          if (!v656) {
                            goto LABEL_504;
                          }
                        }
                        v656[2] = (uint64_t)v647;
LABEL_504:
                        *(void *)(v646 + 16) = v647[2];
                        *(void *)(v647[2] + 8 * (*(void *)v647[2] != (void)v647)) = v646;
                        *(void *)uint64_t v646 = v647;
                        goto LABEL_505;
                      }
                      *(unsigned char *)(v646 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                      uint64_t v644 = v647;
                      *((unsigned char *)v647 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v647 == v645;
                      unsigned char *v649 = 1;
                    }
                    while (v647 != v645);
                  }
                  v637[1] = (uint64_t *)((char *)v637[1] + 1);
                  v642[8] = v634;
                  v642[9] = v633;
                  v588 += 3;
                  if (v588 == v580) {
                    goto LABEL_416;
                  }
                }
                while (1)
                {
                  while (1)
                  {
                    uint64_t v640 = (uint64_t **)v636;
                    int v641 = *((_DWORD *)v636 + 7);
                    if (v1194 >= v641) {
                      break;
                    }
                    v636 = *v640;
                    uint64_t v639 = v640;
                    if (!*v640) {
                      goto LABEL_514;
                    }
                  }
                  if (v641 >= v1194) {
                    break;
                  }
                  v636 = v640[1];
                  if (!v636)
                  {
                    uint64_t v639 = v640 + 1;
                    goto LABEL_514;
                  }
                }
                *((_DWORD *)v640 + 8) = v634;
                *((_DWORD *)v640 + 9) = v633;
                v588 += 3;
              }
              while (v588 != v580);
            }
LABEL_416:
            uint64_t v589 = v1196;
            v1188 = v1197;
            if (v1196 == v1197)
            {
              unint64_t v582 = v1175;
              if (v1196) {
                goto LABEL_547;
              }
              goto LABEL_551;
            }
            do
            {
              sub_1C4AB8AAC((std::string *)buf, (uint64_t)v589, (void *)a1);
              int v590 = SBYTE7(v1223);
              if (SBYTE7(v1223) < 0)
              {
                sub_1C4949ADC(__dst, *(void **)buf, *(unint64_t *)&buf[8]);
              }
              else
              {
                *(_OWORD *)long long __dst = *(_OWORD *)buf;
                v1205[0] = (void *)v1223;
              }
              if (SHIBYTE(v1205[0]) >= 0) {
                v591 = (void **)((char *)__dst + HIBYTE(v1205[0]));
              }
              else {
                v591 = (void **)((char *)__dst[0] + (unint64_t)__dst[1]);
              }
              if (SHIBYTE(v1205[0]) >= 0) {
                v592 = __dst;
              }
              else {
                v592 = (void **)__dst[0];
              }
              for (; v592 != v591; v592 = (void **)((char *)v592 + 1))
                *(unsigned char *)v592 = __tolower(*(unsigned __int8 *)v592);
              if (v590 < 0)
              {
                operator delete(*(void **)buf);
                std::string::size_type v593 = __p.__r_.__value_.__l.__size_;
                std::string::size_type v594 = __p.__r_.__value_.__r.__words[0];
                if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0]) {
                  goto LABEL_474;
                }
LABEL_433:
                unint64_t v595 = 0;
                std::string::size_type v593 = v594;
                while (2)
                {
                  sub_1C4AB8AAC(&__src, v593 + 248 * v595, (void *)a1);
                  int v596 = SHIBYTE(__src.__r_.__value_.__r.__words[2]);
                  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                  {
                    sub_1C4949ADC(buf, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    *(_OWORD *)std::string buf = *(_OWORD *)&__src.__r_.__value_.__l.__data_;
                    *(void *)&long long v1223 = *((void *)&__src.__r_.__value_.__l + 2);
                  }
                  v597 = (void *)BYTE7(v1223);
                  char v598 = BYTE7(v1223);
                  uint64_t v599 = *(uint8_t **)buf;
                  uint64_t v600 = *(void **)&buf[8];
                  if ((SBYTE7(v1223) & 0x80u) == 0) {
                    uint64_t v601 = &buf[BYTE7(v1223)];
                  }
                  else {
                    uint64_t v601 = (uint8_t *)(*(void *)buf + *(void *)&buf[8]);
                  }
                  if ((SBYTE7(v1223) & 0x80u) == 0) {
                    v602 = buf;
                  }
                  else {
                    v602 = *(uint8_t **)buf;
                  }
                  if (v602 != v601)
                  {
                    do
                    {
                      uint8_t *v602 = __tolower(*v602);
                      ++v602;
                    }
                    while (v602 != v601);
                    v597 = (void *)BYTE7(v1223);
                    uint64_t v600 = *(void **)&buf[8];
                    uint64_t v599 = *(uint8_t **)buf;
                    char v598 = BYTE7(v1223);
                  }
                  if (v598 >= 0) {
                    uint64_t v603 = v597;
                  }
                  else {
                    uint64_t v603 = v600;
                  }
                  if (v598 >= 0) {
                    uint64_t v604 = buf;
                  }
                  else {
                    uint64_t v604 = v599;
                  }
                  if (SHIBYTE(v1205[0]) >= 0) {
                    uint64_t v605 = (void *)HIBYTE(v1205[0]);
                  }
                  else {
                    uint64_t v605 = __dst[1];
                  }
                  if (SHIBYTE(v1205[0]) >= 0) {
                    v606 = __dst;
                  }
                  else {
                    v606 = (void **)__dst[0];
                  }
                  if (v605 >= v603) {
                    size_t v607 = (size_t)v603;
                  }
                  else {
                    size_t v607 = (size_t)v605;
                  }
                  BOOL v608 = memcmp(v604, v606, v607) != 0;
                  char v609 = v605 != v603 || v608;
                  if (v598 < 0)
                  {
                    operator delete(v599);
                    if ((v596 & 0x80000000) == 0) {
                      goto LABEL_466;
                    }
                  }
                  else if ((v596 & 0x80000000) == 0)
                  {
LABEL_466:
                    if ((v609 & 1) == 0) {
                      goto LABEL_484;
                    }
                    goto LABEL_470;
                  }
                  operator delete(__src.__r_.__value_.__l.__data_);
                  if ((v609 & 1) == 0)
                  {
LABEL_484:
                    uint64_t v618 = v589[10] - v589[9];
                    if (v618)
                    {
                      unint64_t v619 = v618 >> 2;
                      std::string::size_type v620 = __p.__r_.__value_.__r.__words[0] + 248 * v595;
                      uint64_t v621 = *(float **)(v620 + 96);
                      uint64_t v622 = (float *)v589[12];
                      uint64_t v623 = (float *)(v620 + 192);
                      if (v619 <= 1) {
                        uint64_t v624 = 1;
                      }
                      else {
                        uint64_t v624 = v619;
                      }
                      do
                      {
                        if (*v621 != *v622)
                        {
                          float v625 = *v623 - logf(*v621) * 0.659235;
                          *uint64_t v623 = v625;
                          float v626 = v625 + logf(fmaxf(*v621, *v622)) * 0.659235;
                          *uint64_t v623 = v626;
                        }
                        ++v622;
                        ++v621;
                        --v624;
                      }
                      while (v624);
                    }
                    goto LABEL_501;
                  }
LABEL_470:
                  ++v595;
                  uint64_t v610 = (uint64_t **)__p.__r_.__value_.__l.__size_;
                  std::string::size_type v593 = __p.__r_.__value_.__r.__words[0];
                  if (0xEF7BDEF7BDEF7BDFLL
                     * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3) <= v595)
                  {
                    std::string::size_type v611 = __p.__r_.__value_.__r.__words[2];
                    if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2]) {
                      goto LABEL_475;
                    }
LABEL_472:
                    sub_1C4AC8B58(v610, (uint64_t)v589);
                    std::string::size_type v612 = (std::string::size_type)(v610 + 31);
                    goto LABEL_500;
                  }
                  continue;
                }
              }
              std::string::size_type v593 = __p.__r_.__value_.__l.__size_;
              std::string::size_type v594 = __p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0]) {
                goto LABEL_433;
              }
LABEL_474:
              uint64_t v610 = (uint64_t **)v593;
              std::string::size_type v611 = __p.__r_.__value_.__r.__words[2];
              if (v593 < __p.__r_.__value_.__r.__words[2]) {
                goto LABEL_472;
              }
LABEL_475:
              unint64_t v613 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)((uint64_t)v610 - v593) >> 3);
              if (v613 + 1 > 0x108421084210842) {
                sub_1C494A220();
              }
              unint64_t v614 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v611 - v593) >> 3);
              uint64_t v615 = 2 * v614;
              if (2 * v614 <= v613 + 1) {
                uint64_t v615 = v613 + 1;
              }
              if (v614 >= 0x84210842108421) {
                unint64_t v616 = 0x108421084210842;
              }
              else {
                unint64_t v616 = v615;
              }
              v1224 = &__p.__r_.__value_.__s.__data_[16];
              if (v616)
              {
                if (v616 > 0x108421084210842) {
                  sub_1C4949AA8();
                }
                uint64_t v617 = (char *)operator new(248 * v616);
              }
              else
              {
                uint64_t v617 = 0;
              }
              *(void *)std::string buf = v617;
              *(void *)&buf[8] = &v617[248 * v613];
              *(void *)&long long v1223 = *(void *)&buf[8];
              *((void *)&v1223 + 1) = &v617[248 * v616];
              sub_1C4AC8B58(*(uint64_t ***)&buf[8], (uint64_t)v589);
              uint64_t v627 = 0;
              uint64_t v628 = *(void *)&buf[8];
              *(void *)&long long v1223 = v1223 + 248;
              std::string::size_type v629 = __p.__r_.__value_.__l.__size_;
              std::string::size_type v630 = __p.__r_.__value_.__r.__words[0];
              while (v629 + v627 != v630)
              {
                v627 -= 248;
                sub_1C4AC8B58((uint64_t **)(v627 + v628), v627 + v629);
              }
              std::string::size_type v631 = __p.__r_.__value_.__l.__size_;
              v632 = (void *)__p.__r_.__value_.__r.__words[0];
              __p.__r_.__value_.__r.__words[0] = v628 + v627;
              std::string::size_type v1180 = v1223;
              for (*(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v1223;
                    (void *)v631 != v632;
              if (v632) {
                operator delete(v632);
              }
              std::string::size_type v612 = v1180;
LABEL_500:
              __p.__r_.__value_.__l.__size_ = v612;
LABEL_501:
              if (SHIBYTE(v1205[0]) < 0) {
                operator delete(__dst[0]);
              }
              v589 += 31;
            }
            while (v589 != v1188);
            uint64_t v589 = v1196;
            unint64_t v582 = v1175;
            if (v1196)
            {
LABEL_547:
              uint64_t v658 = (uint64_t)v1197;
              uint64_t v659 = v589;
              if (v1197 != v589)
              {
                do
                  uint64_t v658 = sub_1C4AC89C8(v658 - 248);
                while ((void *)v658 != v589);
                uint64_t v659 = v1196;
              }
              v1197 = v589;
              operator delete(v659);
            }
LABEL_551:
            std::string::size_type v586 = __p.__r_.__value_.__l.__size_;
LABEL_552:
            std::string::size_type v660 = __p.__r_.__value_.__r.__words[0];
            if (0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v586 - __p.__r_.__value_.__r.__words[0]) >> 3) > a6)
            {
              if (!a6)
              {
                std::string::size_type v583 = 0;
                memset(buf, 0, sizeof(buf));
                *(void *)&long long v1223 = 0;
                if (!__p.__r_.__value_.__r.__words[0]) {
                  goto LABEL_410;
                }
                goto LABEL_607;
              }
              if (a6 >= 2)
              {
                unint64_t v661 = v1157;
                uint64_t v662 = v1156 + __p.__r_.__value_.__r.__words[0];
                do
                {
                  sub_1C4AD0AB4(v660, a6, v662);
                  v662 -= 248;
                  --v661;
                }
                while (v661);
              }
              std::string::size_type v663 = v660 + 248 * a6;
              if (v663 != v586)
              {
                for (uint64_t j = v660 + 248 * a6; j != v586; j += 248)
                {
                  uint64_t v665 = *(void *)(j + 80) - *(void *)(j + 72);
                  if (v665)
                  {
                    double v666 = *(float *)(j + 192);
                    float v667 = v666 / pow((double)(unint64_t)(v665 >> 2), 0.330993);
                    uint64_t v668 = *(void *)(v660 + 80) - *(void *)(v660 + 72);
                    if (v668) {
                      goto LABEL_562;
                    }
                  }
                  else
                  {
                    float v667 = *(float *)(j + 192);
                    uint64_t v668 = *(void *)(v660 + 80) - *(void *)(v660 + 72);
                    if (v668)
                    {
LABEL_562:
                      double v669 = *(float *)(v660 + 192);
                      float v670 = v669 / pow((double)(unint64_t)(v668 >> 2), 0.330993);
                      if (v667 > v670) {
                        goto LABEL_566;
                      }
                      continue;
                    }
                  }
                  if (v667 > *(float *)(v660 + 192))
                  {
LABEL_566:
                    sub_1C4AC8B58((uint64_t **)buf, j);
                    sub_1C4ACFB98(j, v660);
                    sub_1C4ACFB98(v660, (uint64_t)buf);
                    sub_1C4AC89C8((uint64_t)buf);
                    sub_1C4AD0AB4(v660, a6, v660);
                  }
                }
              }
              unint64_t v1176 = v582;
              if (a6 < 2) {
                goto LABEL_601;
              }
              int64_t v671 = (unint64_t)((((31 * a6) & 0x1FFFFFFFFFFFFFFFLL) * (unsigned __int128)0x2108421084210843uLL) >> 64) >> 2;
              while (2)
              {
                if (v671 < 2) {
                  goto LABEL_571;
                }
                sub_1C4AC8B58((uint64_t **)__dst, v660);
                uint64_t v673 = 0;
                uint64_t v674 = v660;
LABEL_575:
                uint64_t v675 = v673 + 1;
                uint64_t v676 = v674 + 248 * (v673 + 1);
                uint64_t v677 = 2 * v673;
                uint64_t v673 = (2 * v673) | 1;
                uint64_t v678 = v677 + 2;
                if (v677 + 2 >= v671) {
                  goto LABEL_580;
                }
                uint64_t v679 = *(void *)(v674 + 248 * v675 + 80) - *(void *)(v674 + 248 * v675 + 72);
                if (v679)
                {
                  double v680 = *(float *)(v674 + 248 * v675 + 192);
                  float v681 = v680 / pow((double)(unint64_t)(v679 >> 2), 0.330993);
                  uint64_t v682 = *(void *)(v676 + 328) - *(void *)(v676 + 320);
                  if (v682) {
                    goto LABEL_578;
                  }
LABEL_583:
                  if (v681 <= *(float *)(v676 + 440)) {
                    goto LABEL_580;
                  }
                }
                else
                {
                  float v681 = *(float *)(v674 + 248 * v675 + 192);
                  uint64_t v682 = *(void *)(v676 + 328) - *(void *)(v676 + 320);
                  if (!v682) {
                    goto LABEL_583;
                  }
LABEL_578:
                  double v683 = *(float *)(v676 + 440);
                  float v684 = v683 / pow((double)(unint64_t)(v682 >> 2), 0.330993);
                  if (v681 <= v684)
                  {
LABEL_580:
                    sub_1C4ACFB98(v674, v676);
                    uint64_t v674 = v676;
                    if (v673 > (uint64_t)((unint64_t)(v671 - 2) >> 1))
                    {
                      if (v676 == v663 - 248)
                      {
                        sub_1C4ACFB98(v676, (uint64_t)__dst);
                        goto LABEL_570;
                      }
                      sub_1C4ACFB98(v676, v663 - 248);
                      sub_1C4ACFB98(v663 - 248, (uint64_t)__dst);
                      uint64_t v685 = v676 - v660 + 248;
                      if (v685 >= 249)
                      {
                        unint64_t v686 = (v685 / 0xF8uLL - 2) >> 1;
                        uint64_t v687 = *(void *)(v660 + 248 * v686 + 80) - *(void *)(v660 + 248 * v686 + 72);
                        if (v687)
                        {
                          double v688 = *(float *)(v660 + 248 * v686 + 192);
                          float v689 = v688 / pow((double)(unint64_t)(v687 >> 2), 0.330993);
                          uint64_t v690 = *(void *)(v676 + 80) - *(void *)(v676 + 72);
                          if (v690)
                          {
LABEL_589:
                            double v691 = *(float *)(v676 + 192);
                            float v692 = v691 / pow((double)(unint64_t)(v690 >> 2), 0.330993);
                            if (v689 <= v692) {
                              goto LABEL_570;
                            }
                            goto LABEL_593;
                          }
                        }
                        else
                        {
                          float v689 = *(float *)(v660 + 248 * v686 + 192);
                          uint64_t v690 = *(void *)(v676 + 80) - *(void *)(v676 + 72);
                          if (v690) {
                            goto LABEL_589;
                          }
                        }
                        if (v689 <= *(float *)(v676 + 192)) {
                          goto LABEL_570;
                        }
LABEL_593:
                        sub_1C4AC8B58((uint64_t **)buf, v676);
                        while (1)
                        {
                          uint64_t v697 = v676;
                          uint64_t v676 = v660 + 248 * v686;
                          sub_1C4ACFB98(v697, v676);
                          if (!v686)
                          {
LABEL_600:
                            sub_1C4ACFB98(v676, (uint64_t)buf);
                            sub_1C4AC89C8((uint64_t)buf);
                            break;
                          }
                          unint64_t v686 = (v686 - 1) >> 1;
                          uint64_t v698 = *(void *)(v660 + 248 * v686 + 80) - *(void *)(v660 + 248 * v686 + 72);
                          if (v698)
                          {
                            double v699 = *(float *)(v660 + 248 * v686 + 192);
                            float v693 = v699 / pow((double)(unint64_t)(v698 >> 2), 0.330993);
                            uint64_t v694 = v1226 - v1225;
                            if (v1226 != v1225)
                            {
LABEL_595:
                              double v695 = v1229;
                              float v696 = v695 / pow((double)(unint64_t)(v694 >> 2), 0.330993);
                              if (v693 <= v696) {
                                goto LABEL_600;
                              }
                              continue;
                            }
                          }
                          else
                          {
                            float v693 = *(float *)(v660 + 248 * v686 + 192);
                            uint64_t v694 = v1226 - v1225;
                            if (v1226 != v1225) {
                              goto LABEL_595;
                            }
                          }
                          if (v693 <= v1229) {
                            goto LABEL_600;
                          }
                        }
                      }
LABEL_570:
                      sub_1C4AC89C8((uint64_t)__dst);
LABEL_571:
                      v663 -= 248;
                      if ((unint64_t)v671-- <= 2)
                      {
LABEL_601:
                        std::string::size_type v700 = __p.__r_.__value_.__r.__words[0];
                        memset(buf, 0, sizeof(buf));
                        *(void *)&long long v1223 = 0;
                        __dst[0] = buf;
                        LOBYTE(__dst[1]) = 0;
                        if (a6 < 0) {
                          sub_1C494A220();
                        }
                        v701 = (char *)operator new(__sz);
                        uint64_t v702 = 0;
                        *(void *)std::string buf = v701;
                        *(void *)&buf[8] = v701;
                        *(void *)&long long v1223 = &v701[248 * a6];
                        do
                        {
                          sub_1C4AC8B58((uint64_t **)&v701[v702], v700 + v702);
                          v702 += 248;
                        }
                        while (__sz != v702);
                        std::string::size_type v583 = (std::string::size_type)&v701[v702];
                        *(void *)&buf[8] = &v701[v702];
                        std::string::size_type v660 = __p.__r_.__value_.__r.__words[0];
                        unint64_t v582 = v1176;
                        if (!__p.__r_.__value_.__r.__words[0])
                        {
LABEL_410:
                          __p.__r_.__value_.__r.__words[0] = *(void *)buf;
                          __p.__r_.__value_.__l.__size_ = v583;
                          __p.__r_.__value_.__r.__words[2] = v1223;
                          goto LABEL_411;
                        }
LABEL_607:
                        std::string::size_type v703 = __p.__r_.__value_.__l.__size_;
                        uint64_t v704 = (void *)v660;
                        if (__p.__r_.__value_.__l.__size_ != v660)
                        {
                          do
                            std::string::size_type v703 = sub_1C4AC89C8(v703 - 248);
                          while (v703 != v660);
                          uint64_t v704 = (void *)__p.__r_.__value_.__r.__words[0];
                        }
                        __p.__r_.__value_.__l.__size_ = v660;
                        operator delete(v704);
                        std::string::size_type v583 = *(void *)&buf[8];
                        goto LABEL_410;
                      }
                      continue;
                    }
                    goto LABEL_575;
                  }
                }
                break;
              }
              v676 += 248;
              uint64_t v673 = v678;
              goto LABEL_580;
            }
LABEL_411:
            ++v582;
            double v581 = v1199;
            id v580 = v1167;
          }
          while (0xEF7BDEF7BDEF7BDFLL * (((char *)v1200 - (unsigned char *)v1199) >> 3) > v582);
        }
      }
      if (v522) {
        operator delete(v522);
      }

      std::string::size_type v711 = __p.__r_.__value_.__l.__size_;
      uint64_t v710 = __p.__r_.__value_.__r.__words[0];
      unint64_t v712 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
      uint64_t v713 = (uint64_t)v1201;
      uint64_t v714 = (uint64_t **)v1199;
      if (0xEF7BDEF7BDEF7BDFLL * (((char *)v1201 - (unsigned char *)v1199) >> 3) >= v712)
      {
        v722 = v1200;
        unint64_t v723 = 0xEF7BDEF7BDEF7BDFLL * (((char *)v1200 - (unsigned char *)v1199) >> 3);
        if (v723 >= v712)
        {
          if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
          {
            uint64_t v720 = (uint64_t **)v1199;
          }
          else
          {
            uint64_t v720 = (uint64_t **)v1199;
            do
            {
              sub_1C4ACFB98((uint64_t)v714, v710);
              v710 += 248;
              v714 += 31;
              v720 += 31;
            }
            while (v710 != v711);
            v722 = v1200;
          }
          while (v722 != v720)
            v722 = (uint64_t **)sub_1C4AC89C8((uint64_t)(v722 - 31));
        }
        else
        {
          if (v1200 != v1199)
          {
            int64_t v724 = 8 * (((char *)v1200 - (unsigned char *)v1199) >> 3);
            uint64_t v725 = __p.__r_.__value_.__r.__words[0];
            do
            {
              sub_1C4ACFB98((uint64_t)v714, v725);
              v725 += 248;
              v714 += 31;
              v724 -= 248;
            }
            while (v724);
            uint64_t v714 = v1200;
          }
          unint64_t v726 = v710 + 248 * v723;
          v727 = v714;
          if (v726 != v711)
          {
            uint64_t v728 = 0;
            do
            {
              sub_1C4AC8B58(&v714[v728], v726 + v728 * 8);
              v728 += 31;
            }
            while (v726 + v728 * 8 != v711);
            v727 = &v714[v728];
          }
          uint64_t v720 = v727;
        }
      }
      else
      {
        if (v1199)
        {
          uint64_t v715 = v1200;
          v716 = v1199;
          if (v1200 != v1199)
          {
            do
              uint64_t v715 = (uint64_t **)sub_1C4AC89C8((uint64_t)(v715 - 31));
            while (v715 != v714);
            v716 = v1199;
          }
          v1200 = v714;
          operator delete(v716);
          uint64_t v713 = 0;
          v1199 = 0;
          v1200 = 0;
          v1201 = 0;
        }
        if (v712 > 0x108421084210842) {
          goto LABEL_1236;
        }
        unint64_t v717 = 0xEF7BDEF7BDEF7BDFLL * (v713 >> 3);
        uint64_t v718 = 2 * v717;
        if (2 * v717 <= v712) {
          uint64_t v718 = v712;
        }
        unint64_t v719 = v717 >= 0x84210842108421 ? 0x108421084210842 : v718;
        if (v719 > 0x108421084210842) {
LABEL_1236:
        }
          sub_1C494A220();
        uint64_t v720 = (uint64_t **)operator new(248 * v719);
        v1199 = v720;
        v1200 = v720;
        v1201 = &v720[31 * v719];
        if (v710 != v711)
        {
          unint64_t v721 = 0;
          do
          {
            sub_1C4AC8B58(&v720[v721 / 8], v710 + v721);
            v721 += 248;
          }
          while (v710 + v721 != v711);
          uint64_t v720 = (uint64_t **)((char *)v720 + v721);
        }
      }
      v1200 = v720;
      uint64_t v729 = (uint64_t **)v1199;
      if (v720 != v1199) {
        break;
      }
LABEL_966:
      char v1022 = 0;
      int v1023 = 1;
LABEL_967:

      std::string::size_type v1024 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        std::string::size_type v1025 = __p.__r_.__value_.__l.__size_;
        v1026 = (void *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
            std::string::size_type v1025 = sub_1C4AC89C8(v1025 - 248);
          while (v1025 != v1024);
          v1026 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v1024;
        operator delete(v1026);
      }
      if ((v1022 & 1) == 0)
      {
        if (!v1023)
        {
          v1141 = (uint64_t **)v1199;
          if (v1199)
          {
            v1142 = v1200;
            v1143 = v1199;
            if (v1200 != v1199)
            {
              do
                v1142 = (uint64_t **)sub_1C4AC89C8((uint64_t)(v1142 - 31));
              while (v1142 != v1141);
              v1143 = v1199;
            }
            v1200 = v1141;
            operator delete(v1143);
          }
          goto LABEL_1211;
        }
        goto LABEL_977;
      }
      int v136 = v1194 + 1;
      unint64_t v138 = 0x1E4F1C000;
      if (v1194 + 1 == v1149) {
        goto LABEL_977;
      }
    }
    uint64_t v730 = 0;
    while (1)
    {
      v731 = &v729[31 * v730];
      if (!*((unsigned char *)v731 + 196)) {
        break;
      }
LABEL_650:
      if (0xEF7BDEF7BDEF7BDFLL * (v720 - v729) <= ++v730)
      {
        while (v729 != v720)
        {
          if (!*((unsigned char *)v729 + 196))
          {
            uint64_t v1021 = *(void *)(a7 + 24);
            if (v1021 && (*(unsigned int (**)(uint64_t))(*(void *)v1021 + 48))(v1021))
            {
              char v1022 = 0;
              int v1023 = 0;
              *a8 = 0;
              a8[1] = 0;
              a8[2] = 0;
            }
            else
            {
              int v1023 = 0;
              char v1022 = 1;
            }
            goto LABEL_967;
          }
          v729 += 31;
        }
        goto LABEL_966;
      }
    }
    uint64_t v1189 = v730;
    uint64_t v732 = (const char *)objc_msgSend_UTF8String(@"past_attention_weights", v705, v706, v707, v708, v709);
    size_t v733 = strlen(v732);
    if (v733 > 0x7FFFFFFFFFFFFFF7) {
      sub_1C4949B7C();
    }
    uint64_t v734 = (void *)v733;
    if (v733 >= 0x17)
    {
      uint64_t v736 = (v733 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v733 | 7) != 0x17) {
        uint64_t v736 = v733 | 7;
      }
      uint64_t v737 = v736 + 1;
      v735 = operator new(v736 + 1);
      __dst[1] = v734;
      v1205[0] = (void *)(v737 | 0x8000000000000000);
      __dst[0] = v735;
    }
    else
    {
      HIBYTE(v1205[0]) = v733;
      v735 = __dst;
      if (!v733)
      {
LABEL_660:
        *((unsigned char *)v734 + (void)v735) = 0;
        v738 = sub_1C4ACA384(v731, (const void **)__dst, (uint64_t)__dst);
        v744 = objc_msgSend_shape(v738[7], v739, v740, v741, v742, v743);
        v749 = objc_msgSend_objectAtIndexedSubscript_(v744, v745, 1, v746, v747, v748);
        int v755 = objc_msgSend_intValue(v749, v750, v751, v752, v753, v754);
        long long v756 = (uint64_t **)v1199;
        v762 = (const char *)objc_msgSend_UTF8String(@"past_attention_weights", v757, v758, v759, v760, v761);
        size_t v763 = strlen(v762);
        if (v763 > 0x7FFFFFFFFFFFFFF7) {
          sub_1C4949B7C();
        }
        std::string::size_type v764 = v763;
        if (v763 >= 0x17)
        {
          uint64_t v766 = (v763 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v763 | 7) != 0x17) {
            uint64_t v766 = v763 | 7;
          }
          uint64_t v767 = v766 + 1;
          p_src = (std::string *)operator new(v766 + 1);
          __src.__r_.__value_.__r.__words[2] = v767 | 0x8000000000000000;
          __src.__r_.__value_.__r.__words[0] = (std::string::size_type)p_src;
          __src.__r_.__value_.__l.__size_ = v764;
        }
        else
        {
          *((unsigned char *)&__src.__r_.__value_.__s + 23) = v763;
          p_src = &__src;
          if (!v763)
          {
LABEL_668:
            p_src->__r_.__value_.__s.__data_[v764] = 0;
            v768 = sub_1C4ACA384(&v756[31 * v1189], (const void **)&__src.__r_.__value_.__l.__data_, (uint64_t)&__src);
            v774 = objc_msgSend_shape(v768[7], v769, v770, v771, v772, v773);
            v779 = objc_msgSend_objectAtIndexedSubscript_(v774, v775, 2, v776, v777, v778);
            int v785 = objc_msgSend_intValue(v779, v780, v781, v782, v783, v784);
            memset(buf, 0, sizeof(buf));
            *(void *)&long long v1223 = 0;
            v786 = operator new(0x10uLL);
            *(void *)&long long v1223 = v786 + 2;
            void *v786 = v755;
            v786[1] = v785;
            *(void *)std::string buf = v786;
            *(void *)&buf[8] = v786 + 2;

            if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__src.__r_.__value_.__l.__data_);
            }

            if (SHIBYTE(v1205[0]) < 0) {
              operator delete(__dst[0]);
            }
            v792 = (char *)v1199 + 248 * v1189;
            int v793 = *(_DWORD *)(*((void *)v792 + 10) - 4);
            int8x8_t v794 = *(int8x8_t *)a1;
            v795 = (const char *)objc_msgSend_UTF8String(@"attention_weights", v787, v788, v789, v790, v791);
            size_t v796 = strlen(v795);
            if (v796 > 0x7FFFFFFFFFFFFFF7) {
              sub_1C4949B7C();
            }
            std::string::size_type v797 = v796;
            if (v796 >= 0x17)
            {
              uint64_t v799 = (v796 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v796 | 7) != 0x17) {
                uint64_t v799 = v796 | 7;
              }
              uint64_t v800 = v799 + 1;
              v798 = (std::string *)operator new(v799 + 1);
              __src.__r_.__value_.__r.__words[2] = v800 | 0x8000000000000000;
              __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v798;
              __src.__r_.__value_.__l.__size_ = v797;
            }
            else
            {
              *((unsigned char *)&__src.__r_.__value_.__s + 23) = v796;
              v798 = &__src;
              if (!v796)
              {
LABEL_680:
                v798->__r_.__value_.__s.__data_[v797] = 0;
                uint64_t v730 = v1189;
                v801 = sub_1C4ACA384((uint64_t **)v792, (const void **)&__src.__r_.__value_.__l.__data_, (uint64_t)&__src)[7];
                uint64_t v807 = objc_msgSend_dataPointer(v801, v802, v803, v804, v805, v806);
                __dst[1] = 0;
                v1205[0] = 0;
                __dst[0] = &__dst[1];
                uint64_t v808 = *v1165;
                if (!*v1165) {
                  goto LABEL_719;
                }
                uint64_t v809 = *(void *)&v794 + 24 * v793;
                int v810 = *(char *)(v809 + 23);
                size_t v811 = v810 >= 0 ? *(unsigned __int8 *)(v809 + 23) : *(void *)(v809 + 8);
                v812 = v810 >= 0 ? (const void *)v809 : *(const void **)v809;
                v813 = (uint64_t *)(a1 + 40);
                do
                {
                  int v814 = *(char *)(v808 + 55);
                  if (v814 >= 0) {
                    size_t v815 = *(unsigned __int8 *)(v808 + 55);
                  }
                  else {
                    size_t v815 = *(void *)(v808 + 40);
                  }
                  if (v814 >= 0) {
                    v816 = (const void *)(v808 + 32);
                  }
                  else {
                    v816 = *(const void **)(v808 + 32);
                  }
                  if (v811 >= v815) {
                    size_t v817 = v815;
                  }
                  else {
                    size_t v817 = v811;
                  }
                  int v818 = memcmp(v816, v812, v817);
                  BOOL v819 = v815 < v811;
                  if (v818) {
                    BOOL v819 = v818 < 0;
                  }
                  BOOL v820 = !v819;
                  if (v819) {
                    v821 = (uint64_t *)(v808 + 8);
                  }
                  else {
                    v821 = (uint64_t *)v808;
                  }
                  if (v820) {
                    v813 = (uint64_t *)v808;
                  }
                  uint64_t v808 = *v821;
                }
                while (*v821);
                uint64_t v730 = v1189;
                if (v813 == v1165) {
                  goto LABEL_719;
                }
                v824 = (const void *)v813[4];
                v823 = v813 + 4;
                v822 = v824;
                int v825 = *((char *)v823 + 23);
                if (v825 >= 0) {
                  size_t v826 = *((unsigned __int8 *)v823 + 23);
                }
                else {
                  size_t v826 = v823[1];
                }
                if (v825 >= 0) {
                  v827 = v823;
                }
                else {
                  v827 = v822;
                }
                if (v826 >= v811) {
                  size_t v828 = v811;
                }
                else {
                  size_t v828 = v826;
                }
                int v829 = memcmp(v812, v827, v828);
                BOOL v830 = v811 >= v826;
                if (v829) {
                  BOOL v830 = v829 >= 0;
                }
                if (!v830)
                {
LABEL_719:
                  unsigned int v831 = 0;
                  float v832 = *v1183;
                  do
                  {
                    float v833 = sub_1C4B121D4(v832, (uint64_t)v1183, (uint64_t **)__dst, v1194, a5, v807, (unint64_t **)buf);
                    if (v833 <= 0.0)
                    {
                      float v832 = v832 / 10.0;
                      if (v831 > 1) {
                        break;
                      }
                    }
                    else
                    {
                      v834 = (void **)__dst[0];
                      v835 = &__dst[1];
                      if (__dst[0] != &__dst[1])
                      {
                        v836 = (char *)v1205[0];
                        do
                        {
                          int v837 = *((_DWORD *)v834 + 8);
                          v838 = &__dst[1];
                          if (__dst[1])
                          {
                            v839 = (void **)__dst[1];
                            while (1)
                            {
                              while (1)
                              {
                                v835 = v839;
                                int v840 = *((_DWORD *)v839 + 8);
                                if (v837 >= v840) {
                                  break;
                                }
                                v839 = (void **)*v835;
                                v838 = v835;
                                if (!*v835) {
                                  goto LABEL_733;
                                }
                              }
                              if (v840 >= v837) {
                                break;
                              }
                              v839 = (void **)v835[1];
                              if (!v839)
                              {
                                v838 = v835 + 1;
                                goto LABEL_733;
                              }
                            }
                            v854 = v835;
                            v835 = &__dst[1];
                            *(float *)v854[5] = *(float *)v854[5] / v833;
                            v855 = (void **)v834[1];
                            if (!v855)
                            {
                              do
                              {
LABEL_762:
                                v857 = (void **)v834[2];
                                BOOL v820 = *v857 == v834;
                                v834 = v857;
                              }
                              while (!v820);
                              goto LABEL_725;
                            }
                          }
                          else
                          {
LABEL_733:
                            v841 = operator new(0x40uLL);
                            v841[8] = v837;
                            *((void *)v841 + 6) = 0;
                            *((void *)v841 + 7) = 0;
                            *((void *)v841 + 5) = 0;
                            *(void *)v841 = 0;
                            *((void *)v841 + 1) = 0;
                            *((void *)v841 + 2) = v835;
                            *v838 = v841;
                            v842 = v841;
                            if (*(void *)__dst[0])
                            {
                              __dst[0] = *(void **)__dst[0];
                              v842 = *v838;
                            }
                            v843 = __dst[1];
                            BOOL v820 = v842 == __dst[1];
                            v842[24] = v842 == __dst[1];
                            v835 = &__dst[1];
                            if (!v820)
                            {
                              do
                              {
                                uint64_t v844 = *((void *)v842 + 2);
                                if (*(unsigned char *)(v844 + 24)) {
                                  break;
                                }
                                v845 = *(void **)(v844 + 16);
                                uint64_t v846 = *v845;
                                if (*v845 == v844)
                                {
                                  uint64_t v849 = v845[1];
                                  if (!v849
                                    || (int v850 = *(unsigned __int8 *)(v849 + 24), v847 = (unsigned char *)(v849 + 24), v850))
                                  {
                                    if (*(unsigned char **)v844 == v842)
                                    {
                                      *(unsigned char *)(v844 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                                      *((unsigned char *)v845 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                                      uint64_t v853 = *(void *)(v844 + 8);
                                      void *v845 = v853;
                                      if (v853) {
                                        goto LABEL_750;
                                      }
                                    }
                                    else
                                    {
                                      v851 = *(uint64_t **)(v844 + 8);
                                      uint64_t v852 = *v851;
                                      *(void *)(v844 + 8) = *v851;
                                      if (v852)
                                      {
                                        *(void *)(v852 + 16) = v844;
                                        v845 = *(void **)(v844 + 16);
                                      }
                                      v851[2] = (uint64_t)v845;
                                      *(void *)(*(void *)(v844 + 16) + 8 * (**(void **)(v844 + 16) != v844)) = v851;
                                      uint64_t *v851 = v844;
                                      *(void *)(v844 + 16) = v851;
                                      v845 = (void *)v851[2];
                                      uint64_t v844 = *v845;
                                      *((unsigned char *)v851 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                                      *((unsigned char *)v845 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                                      uint64_t v853 = *(void *)(v844 + 8);
                                      void *v845 = v853;
                                      if (v853) {
LABEL_750:
                                      }
                                        *(void *)(v853 + 16) = v845;
                                    }
                                    *(void *)(v844 + 16) = v845[2];
                                    *(void *)(v845[2] + 8 * (*(void *)v845[2] != (void)v845)) = v844;
                                    *(void *)(v844 + 8) = v845;
LABEL_758:
                                    v845[2] = v844;
                                    break;
                                  }
                                }
                                else if (!v846 {
                                       || (int v848 = *(unsigned __int8 *)(v846 + 24), v847 = (unsigned char *)(v846 + 24), v848))
                                }
                                {
                                  if (*(unsigned char **)v844 == v842)
                                  {
                                    uint64_t v858 = *((void *)v842 + 1);
                                    *(void *)uint64_t v844 = v858;
                                    if (v858)
                                    {
                                      *(void *)(v858 + 16) = v844;
                                      v845 = *(void **)(v844 + 16);
                                    }
                                    *((void *)v842 + 2) = v845;
                                    *(void *)(*(void *)(v844 + 16) + 8 * (**(void **)(v844 + 16) != v844)) = v842;
                                    *((void *)v842 + 1) = v844;
                                    *(void *)(v844 + 16) = v842;
                                    v845 = (void *)*((void *)v842 + 2);
                                    v842[24] = 1;
                                    *((unsigned char *)v845 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                                    uint64_t v844 = v845[1];
                                    v856 = *(unsigned char **)v844;
                                    v845[1] = *(void *)v844;
                                    if (v856) {
LABEL_756:
                                    }
                                      *((void *)v856 + 2) = v845;
                                  }
                                  else
                                  {
                                    *(unsigned char *)(v844 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                                    *((unsigned char *)v845 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                                    uint64_t v844 = v845[1];
                                    v856 = *(unsigned char **)v844;
                                    v845[1] = *(void *)v844;
                                    if (v856) {
                                      goto LABEL_756;
                                    }
                                  }
                                  *(void *)(v844 + 16) = v845[2];
                                  *(void *)(v845[2] + 8 * (*(void *)v845[2] != (void)v845)) = v844;
                                  *(void *)uint64_t v844 = v845;
                                  goto LABEL_758;
                                }
                                *(unsigned char *)(v844 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                                v842 = v845;
                                *((unsigned char *)v845 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v845 == v843;
                                unsigned char *v847 = 1;
                              }
                              while (v845 != v843);
                            }
                            v1205[0] = ++v836;
                            **((float **)v841 + 5) = **((float **)v841 + 5) / v833;
                            v855 = (void **)v834[1];
                            if (!v855) {
                              goto LABEL_762;
                            }
                          }
                          do
                          {
                            v857 = v855;
                            v855 = (void **)*v855;
                          }
                          while (v855);
LABEL_725:
                          v834 = v857;
                        }
                        while (v857 != &__dst[1]);
                      }
                      uint64_t v730 = v1189;
                      if (v831 > 1) {
                        break;
                      }
                    }
                    ++v831;
                  }
                  while (v833 == 0.0);
                }
                if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  v859 = (void **)__dst[0];
                  if (__dst[0] != &__dst[1]) {
                    goto LABEL_779;
                  }
                  goto LABEL_776;
                }
                operator delete(__src.__r_.__value_.__l.__data_);
                v859 = (void **)__dst[0];
                if (__dst[0] == &__dst[1])
                {
LABEL_776:
                  sub_1C494AC4C((uint64_t)__dst, (void *)__dst[1]);
                  if (*(void *)buf)
                  {
                    *(void *)&buf[8] = *(void *)buf;
                    operator delete(*(void **)buf);
                  }
                  uint64_t v729 = (uint64_t **)v1199;
                  uint64_t v720 = v1200;
                  goto LABEL_650;
                }
                while (1)
                {
LABEL_779:
                  v860 = (char *)v1199 + 248 * v730;
                  v863 = (char *)*((void *)v860 + 4);
                  v862 = (char **)(v860 + 32);
                  v861 = v863;
                  int v864 = *((_DWORD *)v859 + 8);
                  v865 = v862;
                  v866 = v862;
                  if (v863)
                  {
                    v867 = v861;
                    while (1)
                    {
                      while (1)
                      {
                        v866 = (char **)v867;
                        int v868 = *((_DWORD *)v867 + 8);
                        if (v864 >= v868) {
                          break;
                        }
                        v867 = *v866;
                        v865 = v866;
                        if (!*v866) {
                          goto LABEL_786;
                        }
                      }
                      if (v868 >= v864) {
                        break;
                      }
                      v867 = v866[1];
                      if (!v867)
                      {
                        v865 = v866 + 1;
                        goto LABEL_786;
                      }
                    }
                    v869 = (char *)v866;
                    v883 = (char *)v1199 + 248 * v1189;
                    v884 = (uint64_t **)(v883 + 32);
                    v885 = v883 + 32;
                    v886 = v883 + 32;
                    if (v861) {
                      goto LABEL_815;
                    }
                  }
                  else
                  {
LABEL_786:
                    v869 = (char *)operator new(0x40uLL);
                    *((_DWORD *)v869 + 8) = v864;
                    *((void *)v869 + 6) = 0;
                    *((void *)v869 + 7) = 0;
                    *((void *)v869 + 5) = 0;
                    *(void *)v869 = 0;
                    *((void *)v869 + 1) = 0;
                    *((void *)v869 + 2) = v866;
                    *v865 = v869;
                    v870 = *(char **)*(v862 - 1);
                    v871 = v869;
                    if (v870)
                    {
                      *(v862 - 1) = v870;
                      v871 = *v865;
                    }
                    v872 = *v862;
                    BOOL v820 = v871 == *v862;
                    v871[24] = v820;
                    if (!v820)
                    {
                      do
                      {
                        uint64_t v873 = *((void *)v871 + 2);
                        if (*(unsigned char *)(v873 + 24)) {
                          break;
                        }
                        v874 = *(char **)(v873 + 16);
                        uint64_t v875 = *(void *)v874;
                        if (*(void *)v874 == v873)
                        {
                          uint64_t v878 = *((void *)v874 + 1);
                          if (!v878 || (int v879 = *(unsigned __int8 *)(v878 + 24), v876 = (unsigned char *)(v878 + 24), v879))
                          {
                            if (*(char **)v873 == v871)
                            {
                              *(unsigned char *)(v873 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                              v874[24] = 0;
                              uint64_t v882 = *(void *)(v873 + 8);
                              *(void *)v874 = v882;
                              if (v882) {
                                goto LABEL_803;
                              }
                            }
                            else
                            {
                              v880 = *(uint64_t **)(v873 + 8);
                              uint64_t v881 = *v880;
                              *(void *)(v873 + 8) = *v880;
                              if (v881)
                              {
                                *(void *)(v881 + 16) = v873;
                                v874 = *(char **)(v873 + 16);
                              }
                              v880[2] = (uint64_t)v874;
                              *(void *)(*(void *)(v873 + 16) + 8 * (**(void **)(v873 + 16) != v873)) = v880;
                              uint64_t *v880 = v873;
                              *(void *)(v873 + 16) = v880;
                              v874 = (char *)v880[2];
                              uint64_t v873 = *(void *)v874;
                              *((unsigned char *)v880 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                              v874[24] = 0;
                              uint64_t v882 = *(void *)(v873 + 8);
                              *(void *)v874 = v882;
                              if (v882) {
LABEL_803:
                              }
                                *(void *)(v882 + 16) = v874;
                            }
                            *(void *)(v873 + 16) = *((void *)v874 + 2);
                            *(void *)(*((void *)v874 + 2) + 8 * (**((void **)v874 + 2) != (void)v874)) = v873;
                            *(void *)(v873 + 8) = v874;
LABEL_811:
                            *((void *)v874 + 2) = v873;
                            break;
                          }
                        }
                        else if (!v875 || (int v877 = *(unsigned __int8 *)(v875 + 24), v876 = (unsigned char *)(v875 + 24), v877))
                        {
                          if (*(char **)v873 == v871)
                          {
                            uint64_t v962 = *((void *)v871 + 1);
                            *(void *)uint64_t v873 = v962;
                            if (v962)
                            {
                              *(void *)(v962 + 16) = v873;
                              v874 = *(char **)(v873 + 16);
                            }
                            *((void *)v871 + 2) = v874;
                            *(void *)(*(void *)(v873 + 16) + 8 * (**(void **)(v873 + 16) != v873)) = v871;
                            *((void *)v871 + 1) = v873;
                            *(void *)(v873 + 16) = v871;
                            v874 = (char *)*((void *)v871 + 2);
                            v871[24] = 1;
                            v874[24] = 0;
                            uint64_t v873 = *((void *)v874 + 1);
                            v887 = *(char **)v873;
                            *((void *)v874 + 1) = *(void *)v873;
                            if (v887) {
LABEL_809:
                            }
                              *((void *)v887 + 2) = v874;
                          }
                          else
                          {
                            *(unsigned char *)(v873 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                            v874[24] = 0;
                            uint64_t v873 = *((void *)v874 + 1);
                            v887 = *(char **)v873;
                            *((void *)v874 + 1) = *(void *)v873;
                            if (v887) {
                              goto LABEL_809;
                            }
                          }
                          *(void *)(v873 + 16) = *((void *)v874 + 2);
                          *(void *)(*((void *)v874 + 2) + 8 * (**((void **)v874 + 2) != (void)v874)) = v873;
                          *(void *)uint64_t v873 = v874;
                          goto LABEL_811;
                        }
                        *(unsigned char *)(v873 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                        v871 = v874;
                        v874[24] = v874 == v872;
                        unsigned char *v876 = 1;
                      }
                      while (v874 != v872);
                    }
                    ++v862[1];
                    v861 = (char *)*((void *)v1199 + 31 * v1189 + 4);
                    int v864 = *((_DWORD *)v859 + 8);
                    v883 = (char *)v1199 + 248 * v1189;
                    v884 = (uint64_t **)(v883 + 32);
                    v885 = v883 + 32;
                    v886 = v883 + 32;
                    if (v861)
                    {
                      while (1)
                      {
LABEL_815:
                        while (1)
                        {
                          v886 = v861;
                          int v888 = *((_DWORD *)v861 + 8);
                          if (v864 >= v888) {
                            break;
                          }
                          v861 = *(char **)v886;
                          v885 = v886;
                          if (!*(void *)v886) {
                            goto LABEL_819;
                          }
                        }
                        if (v888 >= v864) {
                          break;
                        }
                        v861 = (char *)*((void *)v886 + 1);
                        if (!v861)
                        {
                          v885 = v886 + 8;
                          goto LABEL_819;
                        }
                      }
                      v890 = v886;
                      unint64_t v905 = (unint64_t)v859[5];
                      v904 = (uint64_t *)v859[6];
                      uint64_t v906 = (uint64_t)v904 - v905;
                      if ((uint64_t)((uint64_t)v904 - v905) < 1) {
                        goto LABEL_918;
                      }
                      goto LABEL_846;
                    }
                  }
LABEL_819:
                  v889 = v869;
                  v890 = operator new(0x40uLL);
                  v890[8] = v864;
                  *((void *)v890 + 6) = 0;
                  *((void *)v890 + 7) = 0;
                  *((void *)v890 + 5) = 0;
                  *(void *)v890 = 0;
                  *((void *)v890 + 1) = 0;
                  *((void *)v890 + 2) = v886;
                  *(void *)v885 = v890;
                  uint64_t v891 = **((void **)v883 + 3);
                  v892 = (uint64_t *)v890;
                  if (v891)
                  {
                    *((void *)v883 + 3) = v891;
                    v892 = *(uint64_t **)v885;
                  }
                  v893 = *v884;
                  BOOL v820 = v892 == *v884;
                  *((unsigned char *)v892 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v820;
                  v869 = v889;
                  if (!v820)
                  {
                    do
                    {
                      uint64_t v894 = v892[2];
                      if (*(unsigned char *)(v894 + 24)) {
                        break;
                      }
                      v895 = *(uint64_t **)(v894 + 16);
                      uint64_t v896 = *v895;
                      if (*v895 == v894)
                      {
                        uint64_t v899 = v895[1];
                        if (!v899 || (int v900 = *(unsigned __int8 *)(v899 + 24), v897 = (unsigned char *)(v899 + 24), v900))
                        {
                          if (*(uint64_t **)v894 == v892)
                          {
                            *(unsigned char *)(v894 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                            *((unsigned char *)v895 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                            uint64_t v903 = *(void *)(v894 + 8);
                            uint64_t *v895 = v903;
                            if (v903) {
                              goto LABEL_836;
                            }
                          }
                          else
                          {
                            v901 = *(uint64_t **)(v894 + 8);
                            uint64_t v902 = *v901;
                            *(void *)(v894 + 8) = *v901;
                            if (v902)
                            {
                              *(void *)(v902 + 16) = v894;
                              v895 = *(uint64_t **)(v894 + 16);
                            }
                            v901[2] = (uint64_t)v895;
                            *(void *)(*(void *)(v894 + 16) + 8 * (**(void **)(v894 + 16) != v894)) = v901;
                            uint64_t *v901 = v894;
                            *(void *)(v894 + 16) = v901;
                            v895 = (uint64_t *)v901[2];
                            uint64_t v894 = *v895;
                            *((unsigned char *)v901 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                            *((unsigned char *)v895 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                            uint64_t v903 = *(void *)(v894 + 8);
                            uint64_t *v895 = v903;
                            if (v903) {
LABEL_836:
                            }
                              *(void *)(v903 + 16) = v895;
                          }
                          *(void *)(v894 + 16) = v895[2];
                          *(void *)(v895[2] + 8 * (*(void *)v895[2] != (void)v895)) = v894;
                          *(void *)(v894 + 8) = v895;
LABEL_844:
                          v895[2] = v894;
                          break;
                        }
                      }
                      else if (!v896 || (int v898 = *(unsigned __int8 *)(v896 + 24), v897 = (unsigned char *)(v896 + 24), v898))
                      {
                        if (*(uint64_t **)v894 == v892)
                        {
                          uint64_t v963 = v892[1];
                          *(void *)uint64_t v894 = v963;
                          if (v963)
                          {
                            *(void *)(v963 + 16) = v894;
                            v895 = *(uint64_t **)(v894 + 16);
                          }
                          v892[2] = (uint64_t)v895;
                          *(void *)(*(void *)(v894 + 16) + 8 * (**(void **)(v894 + 16) != v894)) = v892;
                          v892[1] = v894;
                          *(void *)(v894 + 16) = v892;
                          v895 = (uint64_t *)v892[2];
                          *((unsigned char *)v892 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                          *((unsigned char *)v895 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                          uint64_t v894 = v895[1];
                          v907 = *(uint64_t **)v894;
                          v895[1] = *(void *)v894;
                          if (v907) {
LABEL_842:
                          }
                            v907[2] = (uint64_t)v895;
                        }
                        else
                        {
                          *(unsigned char *)(v894 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                          *((unsigned char *)v895 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                          uint64_t v894 = v895[1];
                          v907 = *(uint64_t **)v894;
                          v895[1] = *(void *)v894;
                          if (v907) {
                            goto LABEL_842;
                          }
                        }
                        *(void *)(v894 + 16) = v895[2];
                        *(void *)(v895[2] + 8 * (*(void *)v895[2] != (void)v895)) = v894;
                        *(void *)uint64_t v894 = v895;
                        goto LABEL_844;
                      }
                      *(unsigned char *)(v894 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                      v892 = v895;
                      *((unsigned char *)v895 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v895 == v893;
                      unsigned char *v897 = 1;
                    }
                    while (v895 != v893);
                  }
                  ++*((void *)v883 + 5);
                  unint64_t v905 = (unint64_t)v859[5];
                  v904 = (uint64_t *)v859[6];
                  uint64_t v906 = (uint64_t)v904 - v905;
                  if ((uint64_t)((uint64_t)v904 - v905) < 1) {
                    goto LABEL_918;
                  }
LABEL_846:
                  v908 = (uint64_t *)(v869 + 40);
                  uint64_t v909 = v906 >> 3;
                  uint64_t v910 = *((void *)v869 + 5);
                  uint64_t v911 = *((void *)v890 + 6) - v910;
                  uint64_t v912 = v911 >> 3;
                  unint64_t v913 = v910 + (v911 & 0xFFFFFFFFFFFFFFF8);
                  unint64_t v915 = *((void *)v869 + 6);
                  uint64_t v914 = *((void *)v869 + 7);
                  if (v906 >> 3 > (uint64_t)(v914 - v915) >> 3)
                  {
                    unint64_t v916 = v909 + ((uint64_t)(v915 - v910) >> 3);
                    if (v916 >> 61) {
                      sub_1C494A220();
                    }
                    v1181 = v869;
                    uint64_t v917 = v914 - v910;
                    if (v917 >> 2 > v916) {
                      unint64_t v916 = v917 >> 2;
                    }
                    if ((unint64_t)v917 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v918 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v918 = v916;
                    }
                    if (v918)
                    {
                      v1177 = (uint64_t *)(v869 + 40);
                      if (v918 >> 61) {
                        sub_1C4949AA8();
                      }
                      uint64_t v919 = *((void *)v890 + 6) - v910;
                      unint64_t v920 = v918;
                      v921 = (char *)operator new(8 * v918);
                      uint64_t v911 = v919;
                      unint64_t v918 = v920;
                      v908 = v1177;
                      uint64_t v922 = (uint64_t)&v921[8 * v912];
                      v923 = (void *)(v922 + 8 * v909);
                      unint64_t v924 = v906 - 8;
                      if ((unint64_t)(v906 - 8) < 0x38)
                      {
LABEL_856:
                        v925 = (void *)v922;
                        v926 = v1181;
                        goto LABEL_867;
                      }
                    }
                    else
                    {
                      v921 = 0;
                      uint64_t v922 = 8 * v912;
                      v923 = (void *)(8 * v912 + 8 * v909);
                      unint64_t v924 = v906 - 8;
                      if ((unint64_t)(v906 - 8) < 0x38) {
                        goto LABEL_856;
                      }
                    }
                    v925 = (void *)v922;
                    v926 = v1181;
                    if ((unint64_t)&v921[(v911 & 0xFFFFFFFFFFFFFFF8) - v905] < 0x20) {
                      goto LABEL_1239;
                    }
                    uint64_t v933 = (v924 >> 3) + 1;
                    uint64_t v934 = 8 * (v933 & 0x3FFFFFFFFFFFFFFCLL);
                    v925 = (void *)(v922 + v934);
                    unint64_t v935 = v905 + v934;
                    v936 = (long long *)(v905 + 16);
                    v937 = &v921[8 * v912 + 16];
                    uint64_t v938 = v933 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v939 = *v936;
                      *((_OWORD *)v937 - 1) = *(v936 - 1);
                      *(_OWORD *)v937 = v939;
                      v936 += 2;
                      v937 += 32;
                      v938 -= 4;
                    }
                    while (v938);
                    unint64_t v905 = v935;
                    if (v933 != (v933 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_1239:
                      do
                      {
LABEL_867:
                        uint64_t v940 = *(void *)v905;
                        v905 += 8;
                        *v925++ = v940;
                      }
                      while (v925 != v923);
                    }
                    uint64_t v941 = *v908;
                    if (*v908 != v913)
                    {
                      uint64_t v942 = v910 + (v911 & 0xFFFFFFFFFFFFFFF8);
                      unint64_t v943 = v942 - v941 - 8;
                      if (v943 < 0x68)
                      {
                        unint64_t v944 = v913;
                        goto LABEL_875;
                      }
                      unint64_t v944 = v913;
                      if ((unint64_t)(v942 - (void)&v921[v911 & 0xFFFFFFFFFFFFFFF8]) < 0x20) {
                        goto LABEL_1240;
                      }
                      uint64_t v945 = (v943 >> 3) + 1;
                      uint64_t v946 = 8 * (v945 & 0x3FFFFFFFFFFFFFFCLL);
                      unint64_t v944 = v913 - v946;
                      v922 -= v946;
                      v947 = &v921[8 * v912 - 16];
                      v948 = (long long *)(v910 + 8 * v912 - 16);
                      uint64_t v949 = v945 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v950 = *v948;
                        *((_OWORD *)v947 - 1) = *(v948 - 1);
                        *(_OWORD *)v947 = v950;
                        v947 -= 32;
                        v948 -= 2;
                        v949 -= 4;
                      }
                      while (v949);
                      if (v945 != (v945 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_1240:
                        do
                        {
LABEL_875:
                          uint64_t v951 = *(void *)(v944 - 8);
                          v944 -= 8;
                          *(void *)(v922 - 8) = v951;
                          v922 -= 8;
                        }
                        while (v944 != v941);
                      }
                      unint64_t v915 = v926[6];
                    }
                    if (v915 != v913)
                    {
                      uint64_t v952 = (v911 & 0xFFFFFFFFFFFFFFF8) + v910;
                      unint64_t v953 = v915 - v952 - 8;
                      if (v953 < 0x68) {
                        goto LABEL_1241;
                      }
                      if ((unint64_t)&v921[(v911 & 0xFFFFFFFFFFFFFFF8) + (v906 & 0xFFFFFFFFFFFFFFF8) - v952] < 0x20) {
                        goto LABEL_1241;
                      }
                      uint64_t v954 = (v953 >> 3) + 1;
                      uint64_t v955 = 8 * (v954 & 0x3FFFFFFFFFFFFFFCLL);
                      v913 += v955;
                      v923 = (void *)((char *)v923 + v955);
                      v956 = &v921[8 * v912 + 16 + 8 * v909];
                      v957 = (long long *)(v910 + 8 * v912 + 16);
                      uint64_t v958 = v954 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v959 = *v957;
                        *((_OWORD *)v956 - 1) = *(v957 - 1);
                        *(_OWORD *)v956 = v959;
                        v956 += 32;
                        v957 += 2;
                        v958 -= 4;
                      }
                      while (v958);
                      if (v954 != (v954 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_1241:
                        do
                        {
                          uint64_t v960 = *(void *)v913;
                          v913 += 8;
                          *v923++ = v960;
                        }
                        while (v913 != v915);
                      }
                    }
                    v961 = (void *)v926[5];
                    v926[5] = v922;
                    v926[6] = v923;
                    v926[7] = &v921[8 * v918];
                    if (v961) {
                      operator delete(v961);
                    }
                    goto LABEL_918;
                  }
                  uint64_t v927 = v915 - v913;
                  uint64_t v928 = (uint64_t)(v915 - v913) >> 3;
                  if (v928 >= v909)
                  {
                    unint64_t v929 = v905 + 8 * v909;
                    v932 = (char *)*((void *)v869 + 6);
LABEL_901:
                    v971 = (char *)(v913 + 8 * v909);
                    uint64_t v972 = v932 - v971;
                    unint64_t v973 = (unint64_t)&v932[-8 * v909];
                    v974 = v932;
                    if (v973 < v915)
                    {
                      unint64_t v975 = (v911 & 0xFFFFFFFFFFFFFFF8) + v972;
                      unint64_t v976 = v910 + v975 + 8;
                      if (v915 > v976) {
                        unint64_t v976 = v915;
                      }
                      unint64_t v977 = v976 + ~v910 - v975;
                      v978 = (uint64_t *)&v932[-8 * v909];
                      v974 = v932;
                      if (v977 < 0x58) {
                        goto LABEL_1242;
                      }
                      v978 = (uint64_t *)&v932[-8 * v909];
                      v974 = v932;
                      if ((unint64_t)&v971[-(v911 & 0xFFFFFFFFFFFFFFF8) - v910] < 0x20) {
                        goto LABEL_1242;
                      }
                      uint64_t v979 = (v977 >> 3) + 1;
                      uint64_t v980 = 8 * (v979 & 0x3FFFFFFFFFFFFFFCLL);
                      v978 = (uint64_t *)(v973 + v980);
                      v974 = &v932[v980];
                      v981 = v932 + 16;
                      v982 = (long long *)(v910 + 8 * (v972 >> 3) + 8 * v912 + 16);
                      uint64_t v983 = v979 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v984 = *v982;
                        *(v981 - 1) = *(v982 - 1);
                        _OWORD *v981 = v984;
                        v981 += 2;
                        v982 += 2;
                        v983 -= 4;
                      }
                      while (v983);
                      if (v979 != (v979 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_1242:
                        do
                        {
                          uint64_t v985 = *v978++;
                          *(void *)v974 = v985;
                          v974 += 8;
                        }
                        while ((unint64_t)v978 < v915);
                      }
                    }
                    *((void *)v869 + 6) = v974;
                    if (v932 != v971)
                    {
                      unint64_t v986 = v972 - 8;
                      if ((unint64_t)(v972 - 8) < 0x98
                        || ((unint64_t v994 = v972 + (v911 & 0xFFFFFFFFFFFFFFF8),
                             unint64_t v995 = v994 - (v986 & 0xFFFFFFFFFFFFFFF8),
                             unint64_t v996 = v910 - 4 + v994,
                             (unint64_t)&v932[-(v986 & 0xFFFFFFFFFFFFFFF8) - 4] < v973)
                          ? (BOOL v997 = v910 - 4 + v995 >= (unint64_t)v932)
                          : (BOOL v997 = 1),
                            v997 ? (char v998 = 0) : (char v998 = 1),
                            v910 + v995 - 8 < (unint64_t)(v932 - 4)
                          ? (BOOL v999 = (unint64_t)&v932[-(v986 & 0xFFFFFFFFFFFFFFF8) - 8] >= v996)
                          : (BOOL v999 = 1),
                            !v999 || (v998 & 1) != 0))
                      {
                        v987 = v932;
                        v988 = &v932[-8 * v909];
                      }
                      else
                      {
                        uint64_t v1000 = (v986 >> 3) + 1;
                        uint64_t v1001 = 8 * (v1000 & 0x3FFFFFFFFFFFFFFCLL);
                        v987 = &v932[-v1001];
                        v988 = (char *)(v973 - v1001);
                        v1002 = (long long *)(v973 - 32);
                        v1003 = v932 - 32;
                        uint64_t v1004 = v1000 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          long long v1005 = *v1002;
                          long long v1006 = v1002[1];
                          v1002 -= 2;
                          *(_OWORD *)v1003 = v1005;
                          *((_OWORD *)v1003 + 1) = v1006;
                          v1003 -= 32;
                          v1004 -= 4;
                        }
                        while (v1004);
                        if (v1000 == (v1000 & 0x3FFFFFFFFFFFFFFCLL)) {
                          goto LABEL_915;
                        }
                      }
                      v989 = v987 - 4;
                      do
                      {
                        int v990 = *((_DWORD *)v988 - 2);
                        v988 -= 8;
                        *((_DWORD *)v989 - 1) = v990;
                        *(_DWORD *)v989 = *((_DWORD *)v988 + 1);
                        v989 -= 8;
                      }
                      while (v988 != (char *)v913);
                    }
LABEL_915:
                    if (v929 != v905)
                    {
                      unint64_t v991 = v929 - v905 - 8;
                      if (v991 < 0x78) {
                        goto LABEL_1243;
                      }
                      unint64_t v1007 = (v911 & 0xFFFFFFFFFFFFFFF8) + (v991 & 0xFFFFFFFFFFFFFFF8);
                      BOOL v1008 = v910 + 4 + (v911 & 0xFFFFFFFFFFFFFFF8) >= v905 + (v991 & 0xFFFFFFFFFFFFFFF8) + 8
                           || v905 + 4 >= v910 + v1007 + 8;
                      BOOL v1009 = !v1008;
                      if (v905 < v910 + 4 + v1007 && v913 < v905 + 4 + (v991 & 0xFFFFFFFFFFFFFFF8)) {
                        goto LABEL_1243;
                      }
                      if (v1009) {
                        goto LABEL_1243;
                      }
                      uint64_t v1011 = (v991 >> 3) + 1;
                      uint64_t v1012 = 8 * (v1011 & 0x3FFFFFFFFFFFFFF8);
                      v913 += v1012;
                      unint64_t v1013 = v905 + v1012;
                      v1014 = (long long *)(v905 + 32);
                      v1015 = (_OWORD *)(v910 + 8 * v912 + 32);
                      uint64_t v1016 = v1011 & 0x3FFFFFFFFFFFFFF8;
                      do
                      {
                        long long v1018 = *(v1014 - 2);
                        long long v1017 = *(v1014 - 1);
                        long long v1020 = *v1014;
                        long long v1019 = v1014[1];
                        v1014 += 4;
                        *(v1015 - 2) = v1018;
                        *(v1015 - 1) = v1017;
                        _OWORD *v1015 = v1020;
                        v1015[1] = v1019;
                        v1015 += 4;
                        v1016 -= 8;
                      }
                      while (v1016);
                      unint64_t v905 = v1013;
                      if (v1011 != (v1011 & 0x3FFFFFFFFFFFFFF8))
                      {
LABEL_1243:
                        do
                        {
                          *(_DWORD *)unint64_t v913 = *(_DWORD *)v905;
                          *(_DWORD *)(v913 + 4) = *(_DWORD *)(v905 + 4);
                          v905 += 8;
                          v913 += 8;
                        }
                        while (v905 != v929);
                      }
                    }
                    goto LABEL_918;
                  }
                  unint64_t v929 = v905 + 8 * v928;
                  if ((uint64_t *)v929 == v904)
                  {
                    v932 = (char *)*((void *)v869 + 6);
                    goto LABEL_900;
                  }
                  unint64_t v930 = (unint64_t)v904 + -v927 - v905 - 8;
                  if (v930 < 0x38)
                  {
                    v931 = (uint64_t *)(v905 + 8 * v928);
                    v932 = (char *)*((void *)v869 + 6);
                    do
                    {
LABEL_899:
                      uint64_t v970 = *v931++;
                      *(void *)v932 = v970;
                      v932 += 8;
                    }
                    while (v931 != v904);
                    goto LABEL_900;
                  }
                  v931 = (uint64_t *)(v905 + 8 * v928);
                  v932 = (char *)*((void *)v869 + 6);
                  if (v913 - v905 < 0x20) {
                    goto LABEL_899;
                  }
                  uint64_t v964 = (v930 >> 3) + 1;
                  uint64_t v965 = 8 * (v964 & 0x3FFFFFFFFFFFFFFCLL);
                  v931 = (uint64_t *)(v929 + v965);
                  v932 = (char *)(v915 + v965);
                  v966 = (_OWORD *)(v915 + 16);
                  v967 = (long long *)(v905 + 8 * v928 + 16);
                  uint64_t v968 = v964 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v969 = *v967;
                    *(v966 - 1) = *(v967 - 1);
                    _OWORD *v966 = v969;
                    v966 += 2;
                    v967 += 2;
                    v968 -= 4;
                  }
                  while (v968);
                  if (v964 != (v964 & 0x3FFFFFFFFFFFFFFCLL)) {
                    goto LABEL_899;
                  }
LABEL_900:
                  *((void *)v869 + 6) = v932;
                  if (v927 >= 1) {
                    goto LABEL_901;
                  }
LABEL_918:
                  v992 = (void **)v859[1];
                  if (v992)
                  {
                    do
                    {
                      v993 = v992;
                      v992 = (void **)*v992;
                    }
                    while (v992);
                  }
                  else
                  {
                    do
                    {
                      v993 = (void **)v859[2];
                      BOOL v820 = *v993 == v859;
                      v859 = v993;
                    }
                    while (!v820);
                  }
                  v859 = v993;
                  uint64_t v730 = v1189;
                  if (v993 == &__dst[1]) {
                    goto LABEL_776;
                  }
                }
              }
            }
            memmove(v798, v795, v797);
            goto LABEL_680;
          }
        }
        memmove(p_src, v762, v764);
        goto LABEL_668;
      }
    }
    memmove(v735, v732, (size_t)v734);
    goto LABEL_660;
  }
LABEL_977:
  v1027 = (uint64_t **)v1199;
  unint64_t v1028 = (unint64_t)v1200;
  if (v1199 == v1200)
  {
    *(_OWORD *)long long __dst = 0u;
    *(_OWORD *)v1205 = 0u;
    LODWORD(v1206) = 1065353216;
  }
  else
  {
    do
    {
      sub_1C4AB8C9C(__dst, ((char *)v1027[10] - (char *)v1027[9]) >> 2);
      v1030 = v1027[9];
      if (v1027[10] != v1030)
      {
        uint64_t v1031 = 0;
        unint64_t v1032 = 0;
        do
        {
          std::string::operator=((std::string *)((char *)__dst[0] + v1031), (const std::string *)(*(void *)a1 + 24 * *((int *)v1030 + v1032++)));
          v1030 = v1027[9];
          v1031 += 24;
        }
        while (v1032 < ((char *)v1027[10] - (char *)v1030) >> 2);
      }
      sub_1C4B12874(a1 + 24, (uint64_t *)__dst, v1027 + 3, buf);
      v1033 = (void **)(v1027 + 6);
      v1034 = v1027[6];
      if (v1034)
      {
        v1035 = v1027[7];
        v1036 = v1027[6];
        if (v1035 != v1034)
        {
          v1037 = v1027[7];
          do
          {
            v1039 = (void *)*(v1037 - 3);
            v1037 -= 3;
            v1038 = v1039;
            if (v1039)
            {
              *(v1035 - 2) = (uint64_t)v1038;
              operator delete(v1038);
            }
            v1035 = v1037;
          }
          while (v1037 != v1034);
          v1036 = (uint64_t *)*v1033;
        }
        v1027[7] = v1034;
        operator delete(v1036);
        *v1033 = 0;
        v1027[7] = 0;
        v1027[8] = 0;
      }
      *((_OWORD *)v1027 + 3) = *(_OWORD *)buf;
      v1027[8] = (uint64_t *)v1223;
      *(void *)&long long v1223 = 0;
      memset(buf, 0, sizeof(buf));
      v1040 = (void **)__dst[0];
      if (__dst[0])
      {
        v1041 = (void **)__dst[1];
        v1029 = __dst[0];
        if (__dst[1] != __dst[0])
        {
          do
          {
            if (*((char *)v1041 - 1) < 0) {
              operator delete(*(v1041 - 3));
            }
            v1041 -= 3;
          }
          while (v1041 != v1040);
          v1029 = __dst[0];
        }
        __dst[1] = v1040;
        operator delete(v1029);
      }
      v1027 += 31;
    }
    while (v1027 != (uint64_t **)v1028);
    v1042 = (uint64_t **)v1199;
    v1027 = v1200;
    *(_OWORD *)long long __dst = 0u;
    *(_OWORD *)v1205 = 0u;
    LODWORD(v1206) = 1065353216;
    if (v1199 != v1200)
    {
      do
      {
        sub_1C4AB8AAC((std::string *)buf, (uint64_t)v1042, (void *)a1);
        sub_1C4ACA9B0((uint64_t)__dst, (uint64_t)buf, (uint64_t)buf);
        if (SBYTE7(v1223) < 0) {
          operator delete(*(void **)buf);
        }
        v1042 += 31;
      }
      while (v1042 != v1027);
      v1027 = (uint64_t **)v1199;
      v1043 = v1200;
      goto LABEL_1007;
    }
  }
  v1043 = v1027;
LABEL_1007:
  unint64_t v1044 = 0xEF7BDEF7BDEF7BDFLL * (v1043 - v1027);
  unint64_t v1045 = v1044;
  if ((int)v1044 < 1) {
    goto LABEL_1166;
  }
  uint64_t v1046 = 0;
  uint64_t v1195 = -1108378657 * (v1043 - v1027);
  int v1190 = -1108378657 * (v1043 - v1027);
  do
  {
    sub_1C4AC8B58((uint64_t **)buf, (uint64_t)v1199 + 248 * v1046);
    v1047 = (char *)v1199;
    v1048 = (char *)v1199 + 248 * v1046;
    uint64_t v1049 = *((void *)v1048 + 9);
    if (*((void *)v1048 + 10) != v1049 && *(void *)(a1 + 648))
    {
      unint64_t v1050 = 0;
      char v1051 = 0;
      do
      {
        int8x8_t v1053 = *(int8x8_t *)(a1 + 648);
        if (v1053)
        {
          unint64_t v1054 = *(int *)(v1049 + 4 * v1050);
          uint8x8_t v1055 = (uint8x8_t)vcnt_s8(v1053);
          v1055.i16[0] = vaddlv_u8(v1055);
          if (v1055.u32[0] > 1uLL)
          {
            unint64_t v1056 = *(int *)(v1049 + 4 * v1050);
            if (*(void *)&v1053 <= v1054) {
              unint64_t v1056 = v1054 % *(void *)&v1053;
            }
          }
          else
          {
            unint64_t v1056 = (*(void *)&v1053 - 1) & v1054;
          }
          uint64_t v1057 = *(void *)(a1 + 640);
          v1058 = *(uint64_t ***)(v1057 + 8 * v1056);
          if (v1058)
          {
            v1059 = *v1058;
            if (*v1058)
            {
              uint64_t v1060 = *(void *)&v1053 - 1;
              if (v1055.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v1061 = v1059[1];
                  if (v1061 == v1054)
                  {
                    if (*((_DWORD *)v1059 + 4) == v1054) {
                      goto LABEL_1036;
                    }
                  }
                  else if ((v1061 & v1060) != v1056)
                  {
                    goto LABEL_1014;
                  }
                  v1059 = (uint64_t *)*v1059;
                  if (!v1059) {
                    goto LABEL_1014;
                  }
                }
              }
              do
              {
                unint64_t v1062 = v1059[1];
                if (v1062 == v1054)
                {
                  if (*((_DWORD *)v1059 + 4) == v1054)
                  {
LABEL_1036:
                    if (v1055.u32[0] > 1uLL)
                    {
                      unint64_t v1063 = *(int *)(v1049 + 4 * v1050);
                      if (*(void *)&v1053 <= v1054) {
                        unint64_t v1063 = v1054 % *(void *)&v1053;
                      }
                    }
                    else
                    {
                      unint64_t v1063 = v1060 & v1054;
                    }
                    v1064 = *(uint64_t ***)(v1057 + 8 * v1063);
                    if (!v1064 || (v1065 = *v1064) == 0) {
LABEL_1221:
                    }
                      sub_1C49470F0("unordered_map::at: key not found");
                    if (v1055.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        uint64_t v1066 = v1065[1];
                        if (v1066 == v1054)
                        {
                          if (*((_DWORD *)v1065 + 4) == v1054) {
                            goto LABEL_1048;
                          }
                        }
                        else if ((v1066 & v1060) != v1063)
                        {
                          goto LABEL_1221;
                        }
                        v1065 = (uint64_t *)*v1065;
                        if (!v1065) {
                          goto LABEL_1221;
                        }
                      }
                    }
                    while (1)
                    {
                      unint64_t v1068 = v1065[1];
                      if (v1068 == v1054)
                      {
                        if (*((_DWORD *)v1065 + 4) == v1054)
                        {
LABEL_1048:
                          unint64_t v1028 = v1065[3];
                          uint64_t v1067 = v1065[4];
                          if (v1028 != v1067)
                          {
                            do
                            {
                              float v1071 = *(float *)(v1028 + 4);
                              if (v1071 >= 0.5)
                              {
                                int v1072 = *(_DWORD *)v1028;
                                if (std::string::compare((const std::string *)(*(void *)a1 + 24 * (int)v1054), "z")
                                  || *(void *)(*((void *)v1199 + 31 * v1046 + 6) + 24 * v1050 + 8)
                                   - *(void *)(*((void *)v1199 + 31 * v1046 + 6) + 24 * v1050) <= 4uLL)
                                {
                                  uint64_t v1069 = 4 * v1050;
                                  *(_DWORD *)(v1225 + v1069) = v1072;
                                  *(float *)(v1227 + v1069) = v1071 * *(float *)(v1227 + 4 * v1050);
                                  float v1229 = logf(v1071) + v1229;
                                  int v1070 = sub_1C493DB2C((void *)(a1 + 56), (void *)(*(void *)a1 + 24 * v1072));
                                  *(void *)(v1228 + 8 * v1050) = v1070;
                                  char v1051 = 1;
                                }
                              }
                              v1028 += 8;
                            }
                            while (v1028 != v1067);
                            v1047 = (char *)v1199;
                          }
                          goto LABEL_1014;
                        }
                      }
                      else
                      {
                        if (v1068 >= *(void *)&v1053) {
                          v1068 %= *(void *)&v1053;
                        }
                        if (v1068 != v1063) {
                          goto LABEL_1221;
                        }
                      }
                      v1065 = (uint64_t *)*v1065;
                      if (!v1065) {
                        goto LABEL_1221;
                      }
                    }
                  }
                }
                else
                {
                  if (v1062 >= *(void *)&v1053) {
                    v1062 %= *(void *)&v1053;
                  }
                  if (v1062 != v1056) {
                    break;
                  }
                }
                v1059 = (uint64_t *)*v1059;
              }
              while (v1059);
            }
          }
        }
LABEL_1014:
        ++v1050;
        v1052 = &v1047[248 * v1046];
        uint64_t v1049 = *((void *)v1052 + 9);
      }
      while (v1050 < (*((void *)v1052 + 10) - v1049) >> 2);
      if (v1051)
      {
        sub_1C4AB8AAC(&__p, (uint64_t)buf, (void *)a1);
        if (sub_1C4ACADD4(__dst, (uint64_t)&__p)) {
          goto LABEL_1163;
        }
        v1073 = v1200;
        if (v1200 >= v1201)
        {
          v1074 = sub_1C4ACDFC4(&v1199, (uint64_t)buf);
        }
        else
        {
          sub_1C4AC8B58(v1200, (uint64_t)buf);
          v1074 = v1073 + 31;
        }
        v1200 = v1074;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v1076 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v1076 = __p.__r_.__value_.__l.__size_;
        }
        unint64_t v1077 = sub_1C4946C8C((uint64_t)&__src, (uint64_t *)p_p, v1076);
        unint64_t v1078 = v1077;
        unint64_t v1079 = (unint64_t)__dst[1];
        if (__dst[1])
        {
          uint8x8_t v1080 = (uint8x8_t)vcnt_s8((int8x8_t)__dst[1]);
          v1080.i16[0] = vaddlv_u8(v1080);
          if (v1080.u32[0] > 1uLL)
          {
            unint64_t v1028 = v1077;
            if ((void *)v1077 >= __dst[1]) {
              unint64_t v1028 = v1077 % (unint64_t)__dst[1];
            }
          }
          else
          {
            unint64_t v1028 = ((unint64_t)__dst[1] - 1) & v1077;
          }
          v1081 = (uint64_t **)*((void *)__dst[0] + v1028);
          if (v1081)
          {
            v1082 = *v1081;
            if (*v1081)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v1083 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v1083 = __p.__r_.__value_.__l.__size_;
              }
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v1084 = &__p;
              }
              else {
                v1084 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              if (v1080.u32[0] < 2uLL)
              {
                unint64_t v1085 = (unint64_t)__dst[1] - 1;
                while (1)
                {
                  unint64_t v1091 = v1082[1];
                  if (v1091 == v1078)
                  {
                    uint64_t v1092 = *((unsigned __int8 *)v1082 + 39);
                    if ((v1092 & 0x80u) == 0) {
                      uint64_t v1093 = *((unsigned __int8 *)v1082 + 39);
                    }
                    else {
                      uint64_t v1093 = v1082[3];
                    }
                    if (v1093 == v1083)
                    {
                      v1094 = (const void **)(v1082 + 2);
                      if ((v1092 & 0x80) != 0)
                      {
                        size_t __sza = v1083;
                        v1096 = (char *)v1085;
                        int v1097 = memcmp(*v1094, v1084, v1082[3]);
                        unint64_t v1085 = (unint64_t)v1096;
                        std::string::size_type v1083 = __sza;
                        if (!v1097) {
                          goto LABEL_1163;
                        }
                      }
                      else
                      {
                        if (!*((unsigned char *)v1082 + 39)) {
                          goto LABEL_1163;
                        }
                        v1095 = v1084;
                        while (*(unsigned __int8 *)v1094 == v1095->__r_.__value_.__s.__data_[0])
                        {
                          v1094 = (const void **)((char *)v1094 + 1);
                          v1095 = (std::string *)((char *)v1095 + 1);
                          if (!--v1092) {
                            goto LABEL_1163;
                          }
                        }
                      }
                    }
                  }
                  else if ((v1091 & v1085) != v1028)
                  {
                    goto LABEL_1121;
                  }
                  v1082 = (uint64_t *)*v1082;
                  if (!v1082) {
                    goto LABEL_1121;
                  }
                }
              }
              do
              {
                unint64_t v1086 = v1082[1];
                if (v1086 == v1078)
                {
                  uint64_t v1087 = *((unsigned __int8 *)v1082 + 39);
                  if ((v1087 & 0x80u) == 0) {
                    uint64_t v1088 = *((unsigned __int8 *)v1082 + 39);
                  }
                  else {
                    uint64_t v1088 = v1082[3];
                  }
                  if (v1088 == v1083)
                  {
                    v1089 = (const void **)(v1082 + 2);
                    if ((v1087 & 0x80) != 0)
                    {
                      if (!memcmp(*v1089, v1084, v1082[3])) {
                        goto LABEL_1163;
                      }
                    }
                    else
                    {
                      if (!*((unsigned char *)v1082 + 39)) {
                        goto LABEL_1163;
                      }
                      v1090 = v1084;
                      while (*(unsigned __int8 *)v1089 == v1090->__r_.__value_.__s.__data_[0])
                      {
                        v1089 = (const void **)((char *)v1089 + 1);
                        v1090 = (std::string *)((char *)v1090 + 1);
                        if (!--v1087) {
                          goto LABEL_1163;
                        }
                      }
                    }
                  }
                }
                else
                {
                  if (v1086 >= v1079) {
                    v1086 %= v1079;
                  }
                  if (v1086 != v1028) {
                    break;
                  }
                }
                v1082 = (uint64_t *)*v1082;
              }
              while (v1082);
            }
          }
        }
LABEL_1121:
        v1098 = operator new(0x28uLL);
        __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v1098;
        __src.__r_.__value_.__l.__size_ = (std::string::size_type)v1205;
        __src.__r_.__value_.__s.__data_[16] = 0;
        void *v1098 = 0;
        v1098[1] = v1078;
        v1099 = (std::string *)(v1098 + 2);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          sub_1C4949ADC(v1099, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else {
          std::string *v1099 = __p;
        }
        __src.__r_.__value_.__s.__data_[16] = 1;
        float v1100 = (float)((unint64_t)v1205[1] + 1);
        if (v1079 && (float)(*(float *)&v1206 * (float)v1079) >= v1100)
        {
          v1101 = (void *)*((void *)__dst[0] + v1028);
          v1102 = (void *)__src.__r_.__value_.__r.__words[0];
          if (v1101)
          {
LABEL_1127:
            void *v1102 = *v1101;
            void *v1101 = __src.__r_.__value_.__r.__words[0];
LABEL_1162:
            ++v1205[1];
LABEL_1163:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            goto LABEL_1009;
          }
        }
        else
        {
          BOOL v1103 = (v1079 & (v1079 - 1)) != 0;
          if (v1079 < 3) {
            BOOL v1103 = 1;
          }
          unint64_t v1104 = v1103 | (2 * v1079);
          unint64_t v1105 = vcvtps_u32_f32(v1100 / *(float *)&v1206);
          if (v1104 <= v1105) {
            size_t prime = v1105;
          }
          else {
            size_t prime = v1104;
          }
          if (prime == 1)
          {
            size_t prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            size_t prime = std::__next_prime(prime);
          }
          v1107 = __dst[1];
          if ((void *)prime > __dst[1]) {
            goto LABEL_1138;
          }
          if ((void *)prime < __dst[1])
          {
            unint64_t v1108 = vcvtps_u32_f32((float)(unint64_t)v1205[1] / *(float *)&v1206);
            if (__dst[1] < (void *)3
              || (uint8x8_t v1109 = (uint8x8_t)vcnt_s8((int8x8_t)__dst[1]), v1109.i16[0] = vaddlv_u8(v1109), v1109.u32[0] > 1uLL))
            {
              unint64_t v1108 = std::__next_prime(v1108);
            }
            else
            {
              uint64_t v1110 = 1 << -(char)__clz(v1108 - 1);
              if (v1108 >= 2) {
                unint64_t v1108 = v1110;
              }
            }
            if (prime <= v1108) {
              size_t prime = v1108;
            }
            if (prime < (unint64_t)v1107) {
LABEL_1138:
            }
              sub_1C4949C24((uint64_t)__dst, prime);
          }
          unint64_t v1079 = (unint64_t)__dst[1];
          unint64_t v1111 = (unint64_t)__dst[1] - 1;
          if (((unint64_t)__dst[1] & ((unint64_t)__dst[1] - 1)) != 0)
          {
            if ((void *)v1078 >= __dst[1])
            {
              unint64_t v1028 = v1078 % (unint64_t)__dst[1];
              v1101 = (void *)*((void *)__dst[0] + v1078 % (unint64_t)__dst[1]);
              v1102 = (void *)__src.__r_.__value_.__r.__words[0];
              if (v1101) {
                goto LABEL_1127;
              }
            }
            else
            {
              unint64_t v1028 = v1078;
              v1101 = (void *)*((void *)__dst[0] + v1078);
              v1102 = (void *)__src.__r_.__value_.__r.__words[0];
              if (v1101) {
                goto LABEL_1127;
              }
            }
          }
          else
          {
            unint64_t v1028 = v1111 & v1078;
            v1101 = (void *)*((void *)__dst[0] + (v1111 & v1078));
            v1102 = (void *)__src.__r_.__value_.__r.__words[0];
            if (v1101) {
              goto LABEL_1127;
            }
          }
        }
        void *v1102 = v1205[0];
        v1205[0] = __src.__r_.__value_.__l.__data_;
        *((void *)__dst[0] + v1028) = v1205;
        if (*(void *)__src.__r_.__value_.__l.__data_)
        {
          unint64_t v1112 = *(void *)(*(void *)__src.__r_.__value_.__l.__data_ + 8);
          if ((v1079 & (v1079 - 1)) != 0)
          {
            if (v1112 >= v1079) {
              v1112 %= v1079;
            }
          }
          else
          {
            v1112 &= v1079 - 1;
          }
          *((void *)__dst[0] + v1112) = __src.__r_.__value_.__r.__words[0];
        }
        goto LABEL_1162;
      }
    }
LABEL_1009:
    sub_1C4AC89C8((uint64_t)buf);
    ++v1046;
  }
  while (v1046 != v1195);
  v1027 = (uint64_t **)v1199;
  v1043 = v1200;
  unint64_t v1045 = 0xEF7BDEF7BDEF7BDFLL * (((char *)v1200 - (unsigned char *)v1199) >> 3);
  LODWORD(v1044) = v1190;
LABEL_1166:
  if (v1045 > (int)v1044)
  {
    unint64_t v1113 = 126 - 2 * __clz(v1045);
    if (v1043 == v1027) {
      uint64_t v1114 = 0;
    }
    else {
      uint64_t v1114 = v1113;
    }
    sub_1C4ACE17C((uint64_t)v1027, (uint64_t)v1043, v1114, 1);
  }
  v1115 = (void **)v1205[0];
  if (v1205[0])
  {
    do
    {
      v1121 = (void **)*v1115;
      if (*((char *)v1115 + 39) < 0) {
        operator delete(v1115[2]);
      }
      operator delete(v1115);
      v1115 = v1121;
    }
    while (v1121);
  }
  v1116 = __dst[0];
  __dst[0] = 0;
  if (v1116) {
    operator delete(v1116);
  }
  v1117 = v1199;
  v1118 = v1200;
  if (v1200 != v1199)
  {
    uint64_t v1119 = 0;
    if ((unint64_t)(((char *)v1200 - (unsigned char *)v1199) / 248) <= 1) {
      int64_t v1120 = 1;
    }
    else {
      int64_t v1120 = ((char *)v1200 - (unsigned char *)v1199) / 248;
    }
    do
    {
      v1128 = (_DWORD *)v1117[31 * v1119 + 25];
      if (v1117[31 * v1119 + 26] - (void)v1128 >= 9uLL && *v1128 == 1 && v1128[1] == 9)
      {
        v1129 = (char *)&v1117[31 * v1119];
        v1130 = (char *)*((void *)v1129 + 9);
        v1131 = (char *)*((void *)v1129 + 10);
        if (v1130 == v1131)
        {
          v1122 = (char *)*((void *)v1129 + 9);
        }
        else
        {
          v1122 = (char *)*((void *)v1129 + 9);
          while (*(_DWORD *)v1122 != *(_DWORD *)(a1 + 772))
          {
            v1122 += 4;
            if (v1122 == v1131)
            {
              v1122 = v1131;
              break;
            }
          }
        }
        uint64_t v1123 = v1122 - v1130;
        unint64_t v1124 = (int)(v1123 >> 2);
        v1125 = (char *)&v1117[31 * v1119];
        v1126 = (char *)*((void *)v1125 + 15);
        if (v1124 < ((uint64_t)(*((void *)v1125 + 16) - (void)v1126) >> 3) - 1 && v1123 << 30 != 0)
        {
          uint64_t v1132 = 0;
          uint64_t v1133 = 8 * v1124;
          while (*(_DWORD *)&v1126[v1132] == 16)
          {
            v1132 += 8;
            if (v1133 == v1132) {
              goto LABEL_1187;
            }
          }
          if ((int)((unint64_t)v1123 >> 2) >= 1) {
            memset_pattern16(v1126, &unk_1C4C43CA0, (2 * v1123) & 0x7FFFFFFF8);
          }
        }
      }
LABEL_1187:
      ++v1119;
    }
    while (v1119 != v1120);
    uint64_t v1134 = 0;
    do
    {
      uint64_t v1135 = v1117[31 * v1134 + 10] - v1117[31 * v1134 + 9];
      if (v1135)
      {
        unint64_t v1136 = 0;
        unint64_t v1137 = v1135 >> 2;
        v1138 = (char *)&v1117[31 * v1134];
        uint64_t v1139 = *((void *)v1138 + 18);
        v1140 = v1138 + 96;
        if (v1137 <= 1) {
          unint64_t v1137 = 1;
        }
        do
        {
          if ((*(void *)(v1139 + ((v1136 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v1136)) {
            *(_DWORD *)(*v1140 + 4 * v1136) = *(_DWORD *)(a1 + 768);
          }
          ++v1136;
        }
        while (v1137 != v1136);
      }
      ++v1134;
    }
    while (v1134 != v1120);
  }
  *a8 = v1117;
  a8[1] = v1118;
  a8[2] = v1201;
LABEL_1211:
  if (v1202) {
    operator delete(v1202);
  }

LABEL_1214:
}

void sub_1C4AC7E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  _Unwind_Resume(a1);
}

void *sub_1C4AC8674(void *a1)
{
  *a1 = &unk_1F2010DB0;
  sub_1C494A3D8((uint64_t)(a1 + 1));
  return a1;
}

void sub_1C4AC86B8(void *a1)
{
  *a1 = &unk_1F2010DB0;
  sub_1C494A3D8((uint64_t)(a1 + 1));
  JUMPOUT(0x1C8786460);
}

void sub_1C4AC8720(uint64_t a1)
{
  sub_1C4AC9720(a1);
  JUMPOUT(0x1C8786460);
}

void *sub_1C4AC8758(void *a1)
{
  *a1 = &unk_1F2010D88;
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = a1[3];
    uint64_t v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *(void **)(v3 - 24);
        v3 -= 24;
        unint64_t v5 = v6;
        if (v6) {
          operator delete(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1C4AC87E0(void *a1)
{
  *a1 = &unk_1F2010D88;
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = a1[3];
    uint64_t v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *(void **)(v3 - 24);
        v3 -= 24;
        unint64_t v5 = v6;
        if (v6) {
          operator delete(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  JUMPOUT(0x1C8786460);
}

void *sub_1C4AC8888(void *a1)
{
  *a1 = &unk_1F2013A58;
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = a1[3];
    uint64_t v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1C4AC8918(void *a1)
{
  *a1 = &unk_1F2013A58;
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = a1[3];
    uint64_t v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  JUMPOUT(0x1C8786460);
}

uint64_t sub_1C4AC89C8(uint64_t a1)
{
  if ((*(char *)(a1 + 247) & 0x80000000) == 0)
  {
    uint64_t v2 = *(void **)(a1 + 200);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 224));
  uint64_t v2 = *(void **)(a1 + 200);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 208) = v2;
    operator delete(v2);
  }
LABEL_4:
  sub_1C4999C7C(a1 + 168, *(void **)(a1 + 176));
  uint64_t v3 = *(void **)(a1 + 144);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 120);
  if (v4)
  {
    *(void *)(a1 + 128) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *(void **)(a1 + 96);
  if (v5)
  {
    *(void *)(a1 + 104) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 72);
  if (v6)
  {
    *(void *)(a1 + 80) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 56);
    id v9 = *(void **)(a1 + 48);
    if (v8 != v7)
    {
      uint64_t v10 = *(void *)(a1 + 56);
      do
      {
        uint64_t v12 = *(void **)(v10 - 24);
        v10 -= 24;
        uint64_t v11 = v12;
        if (v12)
        {
          *(void *)(v8 - 16) = v11;
          operator delete(v11);
        }
        uint64_t v8 = v10;
      }
      while (v10 != v7);
      id v9 = *(void **)(a1 + 48);
    }
    *(void *)(a1 + 56) = v7;
    operator delete(v9);
  }
  sub_1C494AC4C(a1 + 24, *(void **)(a1 + 32));
  sub_1C4AC8ACC(a1, *(char **)(a1 + 8));
  return a1;
}

void sub_1C4AC8ACC(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1C4AC8ACC(a1, *(void *)a2);
    sub_1C4AC8ACC(a1, *((void *)a2 + 1));

    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      uint64_t v4 = a2;
    }
    else
    {
      uint64_t v4 = a2;
    }
    operator delete(v4);
  }
}

void *sub_1C4AC8B58(uint64_t **a1, uint64_t a2)
{
  a1[1] = 0;
  uint64_t v2 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  uint64_t v3 = (void *)(a2 + 8);
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2 != a2 + 8)
  {
    while (1)
    {
      uint64_t v42 = a1[1];
      uint64_t v43 = v2;
      if (*a1 != v2)
      {
        uint64_t v44 = a1[1];
        uint64_t v45 = v2;
        if (v42)
        {
          do
          {
            uint64_t v43 = v44;
            uint64_t v44 = (uint64_t *)v44[1];
          }
          while (v44);
        }
        else
        {
          do
          {
            uint64_t v43 = (uint64_t *)v45[2];
            BOOL v46 = *v43 == (void)v45;
            uint64_t v45 = v43;
          }
          while (v46);
        }
        int v47 = *((char *)v4 + 55);
        int v48 = *((char *)v43 + 55);
        if (v48 >= 0) {
          size_t v49 = *((unsigned __int8 *)v43 + 55);
        }
        else {
          size_t v49 = v43[5];
        }
        if (v48 >= 0) {
          uint64_t v50 = v43 + 4;
        }
        else {
          uint64_t v50 = (const void *)v43[4];
        }
        if (v47 >= 0) {
          size_t v51 = *((unsigned __int8 *)v4 + 55);
        }
        else {
          size_t v51 = v4[5];
        }
        if (v47 >= 0) {
          uint64_t v52 = v4 + 4;
        }
        else {
          uint64_t v52 = (const void *)v4[4];
        }
        if (v51 >= v49) {
          size_t v53 = v49;
        }
        else {
          size_t v53 = v51;
        }
        int v54 = memcmp(v50, v52, v53);
        BOOL v55 = v49 < v51;
        if (v54) {
          BOOL v55 = v54 < 0;
        }
        if (!v55) {
          break;
        }
      }
      if (v42) {
        long long v56 = (uint64_t **)v43;
      }
      else {
        long long v56 = (uint64_t **)v2;
      }
      if (v42) {
        long long v57 = (uint64_t **)(v43 + 1);
      }
      else {
        long long v57 = (uint64_t **)v2;
      }
      if (!*v57) {
        goto LABEL_73;
      }
LABEL_79:
      uint64_t v70 = (void *)v4[1];
      if (v70)
      {
        do
        {
          uint64_t v71 = v70;
          uint64_t v70 = (void *)*v70;
        }
        while (v70);
      }
      else
      {
        do
        {
          uint64_t v71 = (void *)v4[2];
          BOOL v46 = *v71 == (void)v4;
          uint64_t v4 = v71;
        }
        while (!v46);
      }
      uint64_t v4 = v71;
      if (v71 == v3) {
        goto LABEL_2;
      }
    }
    long long v57 = (uint64_t **)v2;
    long long v56 = (uint64_t **)v2;
    if (v42)
    {
      while (1)
      {
        while (1)
        {
          long long v56 = (uint64_t **)v42;
          int v58 = *((char *)v42 + 55);
          if (v58 >= 0) {
            size_t v59 = *((unsigned __int8 *)v42 + 55);
          }
          else {
            size_t v59 = v42[5];
          }
          if (v58 >= 0) {
            uint64_t v60 = v42 + 4;
          }
          else {
            uint64_t v60 = (const void *)v42[4];
          }
          if (v59 >= v51) {
            size_t v61 = v51;
          }
          else {
            size_t v61 = v59;
          }
          int v62 = memcmp(v52, v60, v61);
          BOOL v63 = v51 < v59;
          if (v62) {
            BOOL v63 = v62 < 0;
          }
          if (!v63) {
            break;
          }
          uint64_t v42 = *v56;
          long long v57 = v56;
          if (!*v56) {
            goto LABEL_73;
          }
        }
        int v64 = memcmp(v60, v52, v61);
        BOOL v65 = v59 < v51;
        if (v64) {
          BOOL v65 = v64 < 0;
        }
        if (!v65) {
          goto LABEL_79;
        }
        uint64_t v42 = v56[1];
        if (!v42)
        {
          long long v57 = v56 + 1;
          break;
        }
      }
    }
LABEL_73:
    uint64_t v66 = (uint64_t *)operator new(0x40uLL);
    uint64_t v67 = v66 + 4;
    if (*((char *)v4 + 55) < 0)
    {
      sub_1C4949ADC(v67, (void *)v4[4], v4[5]);
    }
    else
    {
      long long v68 = *((_OWORD *)v4 + 2);
      v66[6] = v4[6];
      *(_OWORD *)uint64_t v67 = v68;
    }
    v66[7] = (uint64_t)(id)v4[7];
    *uint64_t v66 = 0;
    v66[1] = 0;
    v66[2] = (uint64_t)v56;
    *long long v57 = v66;
    uint64_t v69 = (uint64_t *)**a1;
    if (v69)
    {
      *a1 = v69;
      uint64_t v66 = *v57;
    }
    sub_1C4949FD4(a1[1], v66);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    goto LABEL_79;
  }
LABEL_2:
  a1[4] = 0;
  unint64_t v5 = a1 + 4;
  a1[3] = (uint64_t *)(a1 + 4);
  uint64_t v6 = (uint64_t ***)(a1 + 3);
  a1[5] = 0;
  uint64_t v7 = *(void **)(a2 + 24);
  if (v7 != (void *)(a2 + 32))
  {
    while (1)
    {
      int v72 = *((_DWORD *)v7 + 8);
      uint64_t v73 = *v5;
      uint64_t v74 = (uint64_t *)(a1 + 4);
      if (*v6 != v5)
      {
        uint64_t v75 = *v5;
        uint64_t v76 = a1 + 4;
        if (v73)
        {
          do
          {
            uint64_t v74 = v75;
            uint64_t v75 = (uint64_t *)v75[1];
          }
          while (v75);
        }
        else
        {
          do
          {
            uint64_t v74 = v76[2];
            BOOL v46 = *v74 == (void)v76;
            uint64_t v76 = (uint64_t **)v74;
          }
          while (v46);
        }
        if (*((_DWORD *)v74 + 8) >= v72) {
          break;
        }
      }
      if (v73) {
        uint64_t v77 = (uint64_t **)v74;
      }
      else {
        uint64_t v77 = a1 + 4;
      }
      if (v73) {
        uint64_t v78 = (uint64_t **)(v74 + 1);
      }
      else {
        uint64_t v78 = a1 + 4;
      }
      if (!*v78) {
        goto LABEL_107;
      }
LABEL_110:
      uint64_t v82 = (void *)v7[1];
      if (v82)
      {
        do
        {
          uint64_t v83 = v82;
          uint64_t v82 = (void *)*v82;
        }
        while (v82);
      }
      else
      {
        do
        {
          uint64_t v83 = (void *)v7[2];
          BOOL v46 = *v83 == (void)v7;
          uint64_t v7 = v83;
        }
        while (!v46);
      }
      uint64_t v7 = v83;
      if (v83 == (void *)(a2 + 32)) {
        goto LABEL_3;
      }
    }
    uint64_t v78 = a1 + 4;
    uint64_t v77 = a1 + 4;
    if (v73)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v77 = (uint64_t **)v73;
          int v79 = *((_DWORD *)v73 + 8);
          if (v79 <= v72) {
            break;
          }
          uint64_t v73 = *v77;
          uint64_t v78 = v77;
          if (!*v77) {
            goto LABEL_107;
          }
        }
        if (v79 >= v72) {
          goto LABEL_110;
        }
        uint64_t v73 = v77[1];
        if (!v73)
        {
          uint64_t v78 = v77 + 1;
          break;
        }
      }
    }
LABEL_107:
    sub_1C4AC9540((uint64_t)v6, (int *)v7 + 8, (uint64_t)&v100);
    uint64_t v80 = v100;
    *unint64_t v100 = 0;
    v80[1] = 0;
    v80[2] = (uint64_t)v77;
    *uint64_t v78 = v80;
    uint64_t v81 = **v6;
    if (v81)
    {
      void *v6 = (uint64_t **)v81;
      uint64_t v80 = *v78;
    }
    sub_1C4949FD4(a1[4], v80);
    a1[5] = (uint64_t *)((char *)a1[5] + 1);
    goto LABEL_110;
  }
LABEL_3:
  uint64_t v8 = a1;
  a1[6] = 0;
  a1[8] = 0;
  a1[7] = 0;
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  int64_t v11 = v10 - v9;
  if (v10 != v9)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
    if (v12 >= 0xAAAAAAAAAAAAAABLL) {
      sub_1C494A220();
    }
    uint64_t v13 = (uint64_t *)operator new(v11);
    uint64_t v8 = a1;
    a1[6] = v13;
    a1[7] = v13;
    a1[8] = &v13[3 * v12];
    a1[7] = sub_1C4AC961C((uint64_t)(a1 + 8), v9, v10, v13);
  }
  v8[9] = 0;
  v8[10] = 0;
  v8[11] = 0;
  uint64_t v15 = *(unsigned char **)(a2 + 72);
  uint64_t v14 = *(unsigned char **)(a2 + 80);
  int64_t v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0) {
      sub_1C494A220();
    }
    uint64_t v17 = (char *)operator new(v14 - v15);
    uint64_t v8 = a1;
    a1[9] = (uint64_t *)v17;
    a1[10] = (uint64_t *)v17;
    uint64_t v18 = &v17[4 * (v16 >> 2)];
    a1[11] = (uint64_t *)v18;
    memcpy(v17, v15, v16);
    a1[10] = (uint64_t *)v18;
  }
  v8[12] = 0;
  v8[13] = 0;
  v8[14] = 0;
  uint64_t v20 = *(unsigned char **)(a2 + 96);
  uint64_t v19 = *(unsigned char **)(a2 + 104);
  int64_t v21 = v19 - v20;
  unint64_t v22 = v8;
  if (v19 != v20)
  {
    if (v21 < 0) {
      sub_1C494A220();
    }
    uint64_t v23 = (char *)operator new(v19 - v20);
    v8[12] = v23;
    v8[13] = v23;
    uint64_t v24 = &v23[4 * (v21 >> 2)];
    a1[14] = (uint64_t *)v24;
    memcpy(v23, v20, v21);
    a1[13] = (uint64_t *)v24;
    unint64_t v22 = a1;
  }
  v22[15] = 0;
  v22[16] = 0;
  v22[17] = 0;
  size_t v26 = *(unsigned char **)(a2 + 120);
  uint64_t v25 = *(unsigned char **)(a2 + 128);
  int64_t v27 = v25 - v26;
  if (v25 != v26)
  {
    if (v27 < 0) {
      sub_1C494A220();
    }
    uint64_t v28 = (char *)operator new(v25 - v26);
    v22[15] = v28;
    v22[16] = v28;
    uint64_t v29 = &v28[8 * (v27 >> 3)];
    a1[17] = (uint64_t *)v29;
    memcpy(v28, v26, v27);
    a1[16] = (uint64_t *)v29;
    unint64_t v22 = a1;
  }
  sub_1C49C68B8(v22 + 18, a2 + 144);
  v22[22] = 0;
  uint64_t v30 = (char **)(v22 + 22);
  v22[21] = v22 + 22;
  unint64_t v31 = (char ***)(v22 + 21);
  v22[23] = 0;
  size_t v32 = *(void **)(a2 + 168);
  if (v32 != (void *)(a2 + 176))
  {
    while (1)
    {
      int v84 = *((_DWORD *)v32 + 7);
      uint64_t v85 = *v30;
      uint64_t v86 = v30;
      if (*v31 != v30)
      {
        uint64_t v87 = *v30;
        id v88 = v30;
        if (v85)
        {
          do
          {
            uint64_t v86 = (char **)v87;
            uint64_t v87 = (char *)*((void *)v87 + 1);
          }
          while (v87);
        }
        else
        {
          do
          {
            uint64_t v86 = (char **)v88[2];
            BOOL v46 = *v86 == (char *)v88;
            id v88 = v86;
          }
          while (v46);
        }
        if (*((_DWORD *)v86 + 7) >= v84) {
          break;
        }
      }
      if (v85) {
        uint64_t v89 = v86;
      }
      else {
        uint64_t v89 = v30;
      }
      if (v85) {
        uint64_t v90 = v86 + 1;
      }
      else {
        uint64_t v90 = v30;
      }
      if (!*v90) {
        goto LABEL_138;
      }
LABEL_141:
      uint64_t v95 = (void *)v32[1];
      if (v95)
      {
        do
        {
          uint64_t v96 = v95;
          uint64_t v95 = (void *)*v95;
        }
        while (v95);
      }
      else
      {
        do
        {
          uint64_t v96 = (void *)v32[2];
          BOOL v46 = *v96 == (void)v32;
          size_t v32 = v96;
        }
        while (!v46);
      }
      size_t v32 = v96;
      unint64_t v22 = a1;
      if (v96 == (void *)(a2 + 176)) {
        goto LABEL_16;
      }
    }
    uint64_t v90 = v30;
    uint64_t v89 = v30;
    if (v85)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v89 = (char **)v85;
          int v91 = *((_DWORD *)v85 + 7);
          if (v91 <= v84) {
            break;
          }
          uint64_t v85 = *v89;
          uint64_t v90 = v89;
          if (!*v89) {
            goto LABEL_138;
          }
        }
        if (v91 >= v84) {
          goto LABEL_141;
        }
        uint64_t v85 = v89[1];
        if (!v85)
        {
          uint64_t v90 = v89 + 1;
          break;
        }
      }
    }
LABEL_138:
    uint64_t v92 = (char *)operator new(0x28uLL);
    uint64_t v93 = *(void *)((char *)v32 + 28);
    *((_DWORD *)v92 + 9) = *((_DWORD *)v32 + 9);
    *(void *)(v92 + 28) = v93;
    *(void *)uint64_t v92 = 0;
    *((void *)v92 + 1) = 0;
    *((void *)v92 + 2) = v89;
    *uint64_t v90 = v92;
    uint64_t v94 = **v31;
    if (v94)
    {
      *unint64_t v31 = (char **)v94;
      uint64_t v92 = *v90;
    }
    sub_1C4949FD4(a1[22], (uint64_t *)v92);
    a1[23] = (uint64_t *)((char *)a1[23] + 1);
    goto LABEL_141;
  }
LABEL_16:
  int v33 = *(_DWORD *)(a2 + 192);
  char v34 = *(unsigned char *)(a2 + 196);
  v22[25] = 0;
  *((unsigned char *)v22 + 196) = v34;
  *((_DWORD *)v22 + 48) = v33;
  v22[26] = 0;
  v22[27] = 0;
  uint64_t v36 = *(unsigned char **)(a2 + 200);
  uint64_t v35 = *(unsigned char **)(a2 + 208);
  int64_t v37 = v35 - v36;
  if (v35 != v36)
  {
    if (v37 < 0) {
      sub_1C494A220();
    }
    uint64_t v38 = (char *)operator new(v35 - v36);
    v22[25] = v38;
    v22[26] = v38;
    uint64_t v39 = &v38[4 * (v37 >> 2)];
    a1[27] = (uint64_t *)v39;
    memcpy(v38, v36, v37);
    a1[26] = (uint64_t *)v39;
    unint64_t v22 = a1;
  }
  uint64_t v40 = v22 + 28;
  if (*(char *)(a2 + 247) < 0)
  {
    sub_1C4949ADC(v40, *(void **)(a2 + 224), *(void *)(a2 + 232));
  }
  else
  {
    long long v41 = *(_OWORD *)(a2 + 224);
    v22[30] = *(void *)(a2 + 240);
    *(_OWORD *)uint64_t v40 = v41;
  }
  return v22;
}

void sub_1C4AC9300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  unint64_t v22 = *v20;
  if (*v20)
  {
    *(void *)(a15 + 208) = v22;
    operator delete(v22);
    sub_1C4999C7C(v19, *v17);
    uint64_t v23 = *a10;
    if (!*a10)
    {
LABEL_3:
      uint64_t v24 = *v18;
      if (!*v18) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    sub_1C4999C7C(v19, *v17);
    uint64_t v23 = *a10;
    if (!*a10) {
      goto LABEL_3;
    }
  }
  operator delete(v23);
  uint64_t v24 = *v18;
  if (!*v18)
  {
LABEL_4:
    uint64_t v25 = *v16;
    if (!*v16) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  *(void *)(a15 + 128) = v24;
  operator delete(v24);
  uint64_t v25 = *v16;
  if (!*v16)
  {
LABEL_5:
    size_t v26 = *a11;
    if (!*a11) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_11:
  *(void *)(a15 + 104) = v25;
  operator delete(v25);
  size_t v26 = *a11;
  if (!*a11)
  {
LABEL_7:
    sub_1C496B66C(a12);
    sub_1C494AC4C(a13, *v15);
    sub_1C4AC8ACC(a15, *(char **)(a15 + 8));
    _Unwind_Resume(a1);
  }
LABEL_6:
  *(void *)(a15 + 80) = v26;
  operator delete(v26);
  goto LABEL_7;
}

uint64_t *sub_1C4AC94E8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {

      if (*(char *)(v2 + 55) < 0) {
        operator delete(*(void **)(v2 + 32));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void *sub_1C4AC9540@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t result = operator new(0x40uLL);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  int v7 = *a2;
  result[5] = 0;
  *((_DWORD *)result + 8) = v7;
  result[6] = 0;
  result[7] = 0;
  uint64_t v9 = (unsigned char *)*((void *)a2 + 1);
  uint64_t v8 = (unsigned char *)*((void *)a2 + 2);
  uint64_t v10 = v8 - v9;
  if (v8 != v9)
  {
    int64_t v11 = result;
    if (v10 < 0) {
      sub_1C494A220();
    }
    unint64_t v12 = (char *)operator new(v8 - v9);
    v11[5] = v12;
    v11[6] = v12;
    v11[7] = &v12[8 * (v10 >> 3)];
    uint64_t result = memcpy(v12, v9, v10 & 0xFFFFFFFFFFFFFFF8);
    v11[6] = &v12[v10 & 0xFFFFFFFFFFFFFFF8];
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1C4AC95F8(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 48) = v5;
    operator delete(v5);
  }
  sub_1C49AB2BC(v1);
  _Unwind_Resume(a1);
}

void *sub_1C4AC961C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      uint64_t v9 = *(const void **)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      int64_t v10 = v8 - *(void *)v6;
      if (v8 != *(void *)v6)
      {
        if (v10 < 0) {
          sub_1C494A220();
        }
        int64_t v11 = (char *)operator new(v8 - *(void *)v6);
        *a4 = v11;
        a4[1] = v11;
        int v7 = &v11[4 * (v10 >> 2)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_1C4AC96E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C4AC96FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_1C49C6848((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4AC9720(uint64_t a1)
{
  *(void *)a1 = &unk_1F2010DD8;
  sub_1C4949DD4(a1 + 248, *(char **)(a1 + 256));
  uint64_t v2 = *(void *)(a1 + 224);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 232);
    uint64_t v4 = *(void **)(a1 + 224);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 224);
    }
    *(void *)(a1 + 232) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *(void *)(a1 + 200);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 208);
    int v7 = *(void **)(a1 + 200);
    if (v6 != v5)
    {
      do
      {
        uint64_t v9 = *(const void **)(v6 - 8);
        v6 -= 8;
        uint64_t v8 = v9;
        if (v9) {
          CFRelease(v8);
        }
      }
      while (v6 != v5);
      int v7 = *(void **)(a1 + 200);
    }
    *(void *)(a1 + 208) = v5;
    operator delete(v7);
  }
  uint64_t v10 = *(void *)(a1 + 176);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 184);
    unint64_t v12 = *(void **)(a1 + 176);
    if (v11 != v10)
    {
      do
      {
        uint64_t v14 = *(const void **)(v11 - 8);
        v11 -= 8;
        uint64_t v13 = v14;
        if (v14) {
          CFRelease(v13);
        }
      }
      while (v11 != v10);
      unint64_t v12 = *(void **)(a1 + 176);
    }
    *(void *)(a1 + 184) = v10;
    operator delete(v12);
  }

  uint64_t v15 = *(void **)(a1 + 144);
  if (v15)
  {
    do
    {
      int64_t v16 = (void *)*v15;
      operator delete(v15);
      uint64_t v15 = v16;
    }
    while (v16);
  }
  uint64_t v17 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  if (v17) {
    operator delete(v17);
  }
  uint64_t v18 = *(void ***)(a1 + 104);
  if (v18)
  {
    do
    {
      uint64_t v25 = (void **)*v18;
      if (*((char *)v18 + 39) < 0) {
        operator delete(v18[2]);
      }
      operator delete(v18);
      uint64_t v18 = v25;
    }
    while (v25);
  }
  uint64_t v19 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v19) {
    operator delete(v19);
  }
  uint64_t v20 = *(void ***)(a1 + 64);
  if (v20)
  {
    do
    {
      size_t v26 = (void **)*v20;
      if (*((char *)v20 + 39) < 0) {
        operator delete(v20[2]);
      }
      operator delete(v20);
      uint64_t v20 = v26;
    }
    while (v26);
  }
  int64_t v21 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v21) {
    operator delete(v21);
  }
  unint64_t v22 = *(void ***)(a1 + 24);
  if (v22)
  {
    do
    {
      int64_t v27 = (void **)*v22;
      if (*((char *)v22 + 39) < 0) {
        operator delete(v22[2]);
      }
      operator delete(v22);
      unint64_t v22 = v27;
    }
    while (v27);
  }
  uint64_t v23 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v23) {
    operator delete(v23);
  }
  return a1;
}

char *sub_1C4AC9930(char **a1, unsigned char *__src, unsigned char *a3)
{
  uint64_t result = a1[2];
  int v7 = *a1;
  if (result == *a1)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    uint64_t result = (char *)operator new(4uLL);
    int v7 = result;
    *a1 = result;
    a1[1] = result;
    uint64_t v9 = a1 + 1;
    a1[2] = result + 4;
    int64_t v10 = a3 - __src;
    if (a3 != __src) {
      uint64_t result = (char *)memcpy(result, __src, a3 - __src);
    }
  }
  else
  {
    uint64_t v8 = a1[1];
    uint64_t v9 = a1 + 1;
    int64_t v10 = a3 - __src;
    if (v8 != v7)
    {
      if (a3 == __src) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (__src != a3) {
LABEL_10:
    }
      uint64_t result = (char *)memmove(v7, __src, a3 - __src);
  }
LABEL_11:
  *uint64_t v9 = &v7[v10];
  return result;
}

void sub_1C4AC9A08(float *a1, unsigned int a2, int a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int64_t v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2) {
                return;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            int64_t v10 = (uint64_t *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          int64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint64_t v13 = operator new(0x18uLL);
  *uint64_t v13 = 0;
  v13[1] = v6;
  *((_DWORD *)v13 + 4) = a3;
  float v14 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v15 = a1[8];
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v6 = v3;
    int64_t v16 = *(void **)a1;
    uint64_t v17 = *(void **)(*(void *)a1 + 8 * v3);
    if (!v17) {
      goto LABEL_84;
    }
LABEL_72:
    *uint64_t v13 = *v17;
LABEL_90:
    *uint64_t v17 = v13;
    goto LABEL_91;
  }
  BOOL v18 = 1;
  if (v7 >= 3) {
    BOOL v18 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v19 = v18 | (2 * v7);
  unint64_t v20 = vcvtps_u32_f32(v14 / v15);
  if (v19 <= v20) {
    size_t prime = v20;
  }
  else {
    size_t prime = v19;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_36:
    if (prime >> 61) {
      sub_1C4949AA8();
    }
    unint64_t v22 = operator new(8 * prime);
    uint64_t v23 = *(void **)a1;
    *(void *)a1 = v22;
    if (v23) {
      operator delete(v23);
    }
    uint64_t v24 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v24++) = 0;
    while (prime != v24);
    size_t v26 = (uint64_t *)(a1 + 4);
    uint64_t v25 = (void *)*((void *)a1 + 2);
    if (!v25) {
      goto LABEL_68;
    }
    size_t v27 = v25[1];
    size_t v28 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v29 = v27 & v28;
      *(void *)(*(void *)a1 + 8 * v29) = v26;
      for (uint64_t i = (void *)*v25; *v25; uint64_t i = (void *)*v25)
      {
        size_t v31 = i[1] & v28;
        if (v31 == v29)
        {
          uint64_t v25 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v31))
        {
          *uint64_t v25 = *i;
          uint64_t v32 = 8 * v31;
          *uint64_t i = **(void **)(*(void *)a1 + v32);
          **(void **)(*(void *)a1 + v32) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v31) = v25;
          uint64_t v25 = i;
          size_t v29 = v31;
        }
      }
      goto LABEL_68;
    }
    if (v27 >= prime) {
      v27 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v27) = v26;
    uint64_t v36 = (void *)*v25;
    if (!*v25)
    {
LABEL_68:
      unint64_t v7 = prime;
      if ((prime & (prime - 1)) != 0) {
        goto LABEL_69;
      }
LABEL_83:
      unint64_t v6 = (v7 - 1) & v6;
      int64_t v16 = *(void **)a1;
      uint64_t v17 = *(void **)(*(void *)a1 + 8 * v6);
      if (!v17) {
        goto LABEL_84;
      }
      goto LABEL_72;
    }
    while (1)
    {
      size_t v38 = v36[1];
      if (v38 >= prime) {
        v38 %= prime;
      }
      if (v38 == v27) {
        goto LABEL_62;
      }
      if (*(void *)(*(void *)a1 + 8 * v38))
      {
        *uint64_t v25 = *v36;
        uint64_t v37 = 8 * v38;
        *uint64_t v36 = **(void **)(*(void *)a1 + v37);
        **(void **)(*(void *)a1 + v37) = v36;
        uint64_t v36 = v25;
LABEL_62:
        uint64_t v25 = v36;
        uint64_t v36 = (void *)*v36;
        if (!v36) {
          goto LABEL_68;
        }
      }
      else
      {
        *(void *)(*(void *)a1 + 8 * v38) = v25;
        uint64_t v25 = v36;
        uint64_t v36 = (void *)*v36;
        size_t v27 = v38;
        if (!v36) {
          goto LABEL_68;
        }
      }
    }
  }
  if (prime < v7)
  {
    unint64_t v33 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
    {
      unint64_t v33 = std::__next_prime(v33);
    }
    else
    {
      uint64_t v35 = 1 << -(char)__clz(v33 - 1);
      if (v33 >= 2) {
        unint64_t v33 = v35;
      }
    }
    if (prime <= v33) {
      size_t prime = v33;
    }
    if (prime < v7)
    {
      if (!prime)
      {
        uint64_t v39 = *(void **)a1;
        *(void *)a1 = 0;
        if (v39) {
          operator delete(v39);
        }
        unint64_t v7 = 0;
        *((void *)a1 + 1) = 0;
        goto LABEL_83;
      }
      goto LABEL_36;
    }
    unint64_t v7 = *((void *)a1 + 1);
  }
  if ((v7 & (v7 - 1)) == 0) {
    goto LABEL_83;
  }
LABEL_69:
  if (v7 <= v6) {
    v6 %= v7;
  }
  int64_t v16 = *(void **)a1;
  uint64_t v17 = *(void **)(*(void *)a1 + 8 * v6);
  if (v17) {
    goto LABEL_72;
  }
LABEL_84:
  *uint64_t v13 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v13;
  v16[v6] = a1 + 4;
  if (*v13)
  {
    unint64_t v40 = *(void *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v40 >= v7) {
        v40 %= v7;
      }
    }
    else
    {
      v40 &= v7 - 1;
    }
    uint64_t v17 = (void *)(*(void *)a1 + 8 * v40);
    goto LABEL_90;
  }
LABEL_91:
  ++*((void *)a1 + 3);
}

void sub_1C4AC9E88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C4AC9E9C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  if (*(void *)(a1 + 16))
  {
    unint64_t v6 = *(uint64_t **)a1;
    uint8x8_t v8 = (uint64_t **)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      int64_t v10 = (uint64_t *)v9[2];
      if (v10)
      {
        unint64_t v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *int64_t v10 = 0;
          while (1)
          {
            uint8x8_t v34 = (uint64_t *)v10[1];
            if (!v34) {
              break;
            }
            do
            {
              int64_t v10 = v34;
              uint8x8_t v34 = (uint64_t *)*v34;
            }
            while (v34);
          }
        }
        else
        {
          for (v10[1] = 0; v11; unint64_t v11 = (uint64_t *)v10[1])
          {
            do
            {
              int64_t v10 = v11;
              unint64_t v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        uint64_t v12 = v9;
        uint64_t v13 = v4;
        while (1)
        {
          uint64_t v9 = v10;
          int v14 = *((_DWORD *)v13 + 7);
          *((_DWORD *)v12 + 7) = v14;
          *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
          *((_DWORD *)v12 + 9) = *((_DWORD *)v13 + 9);
          float v15 = *v8;
          int64_t v16 = (uint64_t **)(a1 + 8);
          uint64_t v17 = (uint64_t **)(a1 + 8);
          if (*v8) {
            break;
          }
LABEL_14:
          *uint64_t v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v16;
          *uint64_t v17 = v12;
          uint64_t v18 = **(void **)a1;
          if (v18) {
            goto LABEL_15;
          }
LABEL_16:
          sub_1C4949FD4(*(uint64_t **)(a1 + 8), v12);
          ++*(void *)(a1 + 16);
          if (v10)
          {
            int64_t v10 = (uint64_t *)v10[2];
            if (v10)
            {
              int64_t v21 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *int64_t v10 = 0;
                while (1)
                {
                  unint64_t v22 = (uint64_t *)v10[1];
                  if (!v22) {
                    break;
                  }
                  do
                  {
                    int64_t v10 = v22;
                    unint64_t v22 = (uint64_t *)*v22;
                  }
                  while (v22);
                }
              }
              else
              {
                for (v10[1] = 0; v21; int64_t v21 = (uint64_t *)v10[1])
                {
                  do
                  {
                    int64_t v10 = v21;
                    int64_t v21 = (uint64_t *)*v21;
                  }
                  while (v21);
                }
              }
            }
          }
          else
          {
            int64_t v10 = 0;
          }
          unint64_t v19 = (void *)v13[1];
          if (v19)
          {
            do
            {
              uint64_t v4 = v19;
              unint64_t v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              uint64_t v4 = (void *)v13[2];
              BOOL v20 = *v4 == (void)v13;
              uint64_t v13 = v4;
            }
            while (!v20);
          }
          if (v9)
          {
            uint64_t v12 = v9;
            uint64_t v13 = v4;
            if (v4 != a3) {
              continue;
            }
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            int64_t v16 = (uint64_t **)v15;
            if (v14 >= *((_DWORD *)v15 + 7)) {
              break;
            }
            float v15 = (uint64_t *)*v15;
            uint64_t v17 = v16;
            if (!*v16) {
              goto LABEL_14;
            }
          }
          float v15 = (uint64_t *)v15[1];
        }
        while (v15);
        uint64_t v17 = v16 + 1;
        *uint64_t v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v16;
        v16[1] = v12;
        uint64_t v18 = **(void **)a1;
        if (!v18) {
          goto LABEL_16;
        }
LABEL_15:
        *(void *)a1 = v18;
        uint64_t v12 = *v17;
        goto LABEL_16;
      }
LABEL_42:
      sub_1C4999C7C(a1, v9);
      if (v10)
      {
        for (uint64_t i = (uint64_t *)v10[2]; i; uint64_t i = (uint64_t *)i[2])
          int64_t v10 = i;
        sub_1C4999C7C(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    uint64_t v24 = (uint64_t ***)(a1 + 8);
    while (1)
    {
      uint64_t v25 = (uint64_t *)operator new(0x28uLL);
      size_t v26 = v25;
      int v27 = *((_DWORD *)v4 + 9);
      *(uint64_t *)((char *)v25 + 28) = *(void *)((char *)v4 + 28);
      *((_DWORD *)v25 + 9) = v27;
      size_t v28 = *v24;
      size_t v29 = (uint64_t **)(a1 + 8);
      uint64_t v30 = (uint64_t **)(a1 + 8);
      if (*v24) {
        break;
      }
LABEL_54:
      *uint64_t v25 = 0;
      v25[1] = 0;
      v25[2] = (uint64_t)v29;
      *uint64_t v30 = v25;
      uint64_t v31 = **(void **)a1;
      if (v31) {
        goto LABEL_55;
      }
LABEL_56:
      sub_1C4949FD4(*(uint64_t **)(a1 + 8), v26);
      ++*(void *)(a1 + 16);
      uint64_t v32 = (void *)v4[1];
      if (v32)
      {
        do
        {
          unint64_t v33 = v32;
          uint64_t v32 = (void *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          unint64_t v33 = (void *)v4[2];
          BOOL v20 = *v33 == (void)v4;
          uint64_t v4 = v33;
        }
        while (!v20);
      }
      uint64_t v4 = v33;
      if (v33 == a3) {
        return;
      }
    }
    do
    {
      while (1)
      {
        size_t v29 = v28;
        if (*((_DWORD *)v25 + 7) >= *((_DWORD *)v28 + 7)) {
          break;
        }
        size_t v28 = (uint64_t **)*v28;
        uint64_t v30 = v29;
        if (!*v29) {
          goto LABEL_54;
        }
      }
      size_t v28 = (uint64_t **)v28[1];
    }
    while (v28);
    uint64_t v30 = v29 + 1;
    *uint64_t v25 = 0;
    v25[1] = 0;
    v25[2] = (uint64_t)v29;
    v29[1] = v25;
    uint64_t v31 = **(void **)a1;
    if (!v31) {
      goto LABEL_56;
    }
LABEL_55:
    *(void *)a1 = v31;
    size_t v26 = *v30;
    goto LABEL_56;
  }
}

uint64_t *sub_1C4ACA1DC(uint64_t **a1, const void **a2, uint64_t a3)
{
  unint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      size_t v8 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v8 = (size_t)a2[1];
    }
    if (v7 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *a2;
    }
    do
    {
      while (1)
      {
        int64_t v10 = (uint64_t **)v5;
        uint64_t v13 = (const void *)v5[4];
        unint64_t v11 = v5 + 4;
        uint64_t v12 = v13;
        int v14 = *((char *)v11 + 23);
        if (v14 >= 0) {
          size_t v15 = *((unsigned __int8 *)v11 + 23);
        }
        else {
          size_t v15 = v11[1];
        }
        if (v14 >= 0) {
          int64_t v16 = v11;
        }
        else {
          int64_t v16 = v12;
        }
        if (v15 >= v8) {
          size_t v17 = v8;
        }
        else {
          size_t v17 = v15;
        }
        int v18 = memcmp(v9, v16, v17);
        BOOL v19 = v8 < v15;
        if (v18) {
          BOOL v19 = v18 < 0;
        }
        if (!v19) {
          break;
        }
        uint64_t v5 = *v10;
        unint64_t v6 = v10;
        if (!*v10) {
          goto LABEL_26;
        }
      }
      int v20 = memcmp(v16, v9, v17);
      BOOL v21 = v15 < v8;
      if (v20) {
        BOOL v21 = v20 < 0;
      }
      if (!v21) {
        return (uint64_t *)v10;
      }
      uint64_t v5 = v10[1];
    }
    while (v5);
    unint64_t v6 = v10 + 1;
LABEL_26:
    unint64_t v22 = (uint64_t *)operator new(0x40uLL);
    uint64_t v23 = v22 + 4;
    if (*(char *)(a3 + 23) < 0) {
      goto LABEL_29;
    }
  }
  else
  {
    int64_t v10 = a1 + 1;
    unint64_t v22 = (uint64_t *)operator new(0x40uLL);
    uint64_t v23 = v22 + 4;
    if (*(char *)(a3 + 23) < 0)
    {
LABEL_29:
      sub_1C4949ADC(v23, *(void **)a3, *(void *)(a3 + 8));
      goto LABEL_30;
    }
  }
  *(_OWORD *)uint64_t v23 = *(_OWORD *)a3;
  v23[2] = *(void *)(a3 + 16);
LABEL_30:
  v22[7] = 0;
  *unint64_t v22 = 0;
  v22[1] = 0;
  v22[2] = (uint64_t)v10;
  uint64_t *v6 = v22;
  uint64_t v24 = (uint64_t *)**a1;
  uint64_t v25 = v22;
  if (v24)
  {
    *a1 = v24;
    uint64_t v25 = *v6;
  }
  sub_1C4949FD4(a1[1], v25);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v22;
}

void sub_1C4ACA370(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_1C4ACA384(uint64_t **a1, const void **a2, uint64_t a3)
{
  unint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      size_t v8 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v8 = (size_t)a2[1];
    }
    if (v7 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *a2;
    }
    while (1)
    {
      while (1)
      {
        int64_t v10 = (uint64_t **)v5;
        uint64_t v13 = (const void *)v5[4];
        unint64_t v11 = v5 + 4;
        uint64_t v12 = v13;
        int v14 = *((char *)v11 + 23);
        if (v14 >= 0) {
          size_t v15 = *((unsigned __int8 *)v11 + 23);
        }
        else {
          size_t v15 = v11[1];
        }
        if (v14 >= 0) {
          int64_t v16 = v11;
        }
        else {
          int64_t v16 = v12;
        }
        if (v15 >= v8) {
          size_t v17 = v8;
        }
        else {
          size_t v17 = v15;
        }
        int v18 = memcmp(v9, v16, v17);
        BOOL v19 = v8 < v15;
        if (v18) {
          BOOL v19 = v18 < 0;
        }
        if (!v19) {
          break;
        }
        uint64_t v5 = *v10;
        unint64_t v6 = v10;
        if (!*v10) {
          goto LABEL_27;
        }
      }
      int v20 = memcmp(v16, v9, v17);
      BOOL v21 = v15 < v8;
      if (v20) {
        BOOL v21 = v20 < 0;
      }
      if (!v21) {
        break;
      }
      uint64_t v5 = v10[1];
      if (!v5)
      {
        unint64_t v6 = v10 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    int64_t v10 = a1 + 1;
LABEL_27:
    unint64_t v22 = (uint64_t *)v10;
    int64_t v10 = (uint64_t **)operator new(0x40uLL);
    *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
    uint64_t v23 = *(uint64_t **)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    v10[6] = v23;
    v10[7] = 0;
    *int64_t v10 = 0;
    v10[1] = 0;
    v10[2] = v22;
    uint64_t *v6 = (uint64_t *)v10;
    uint64_t v24 = (uint64_t *)**a1;
    uint64_t v25 = (uint64_t *)v10;
    if (v24)
    {
      *a1 = v24;
      uint64_t v25 = *v6;
    }
    sub_1C4949FD4(a1[1], v25);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v10;
}

uint64_t *sub_1C4ACA4EC(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    unint64_t v6 = a2;
    int v7 = result;
    size_t v8 = result + 1;
    do
    {
      uint64_t result = sub_1C4ACA5FC(v7, v8, v18, &v17, v6 + 8);
      if (*result)
      {
        uint64_t v9 = (int *)*((void *)v6 + 1);
        if (v9) {
          goto LABEL_10;
        }
      }
      else
      {
        int64_t v10 = (uint64_t **)result;
        sub_1C4ACA7AC((uint64_t)v7, v6 + 8, (uint64_t)&v16);
        unint64_t v11 = v18[0];
        uint64_t v12 = v16;
        uint64_t *v16 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v11;
        *int64_t v10 = v12;
        uint64_t v13 = *(void **)*v7;
        if (v13)
        {
          uint64_t *v7 = (uint64_t)v13;
          uint64_t v12 = *v10;
        }
        uint64_t result = sub_1C4949FD4((uint64_t *)v7[1], v12);
        ++v7[2];
        uint64_t v9 = (int *)*((void *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_10:
            int v14 = v9;
            uint64_t v9 = *(int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        int v14 = (int *)*((void *)v6 + 2);
        BOOL v15 = *(void *)v14 == (void)v6;
        unint64_t v6 = v14;
      }
      while (!v15);
LABEL_3:
      unint64_t v6 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

uint64_t *sub_1C4ACA5FC(void *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    size_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      int64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        int64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      int v14 = a2;
      do
      {
        int64_t v10 = (uint64_t *)v14[2];
        BOOL v15 = *v10 == (void)v14;
        int v14 = v10;
      }
      while (v15);
    }
    int v16 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          BOOL v19 = (uint64_t *)v18;
          int v20 = *(_DWORD *)(v18 + 32);
          if (v16 >= v20) {
            break;
          }
          uint64_t v18 = *v19;
          uint64_t v5 = v19;
          if (!*v19) {
            goto LABEL_25;
          }
        }
        if (v20 >= v16) {
          break;
        }
        uint64_t v5 = v19 + 1;
        uint64_t v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    uint64_t v11 = a2[1];
    if (v11)
    {
      uint64_t v12 = (uint64_t *)a2[1];
      do
      {
        uint64_t v13 = v12;
        uint64_t v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      BOOL v21 = a2;
      do
      {
        uint64_t v13 = (uint64_t *)v21[2];
        BOOL v15 = *v13 == (void)v21;
        BOOL v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((_DWORD *)v13 + 8))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      uint64_t v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            uint64_t v23 = (uint64_t *)v22;
            int v24 = *(_DWORD *)(v22 + 32);
            if (v6 >= v24) {
              break;
            }
            uint64_t v22 = *v23;
            uint64_t v5 = v23;
            if (!*v23) {
              goto LABEL_41;
            }
          }
          if (v24 >= v6) {
            break;
          }
          uint64_t v5 = v23 + 1;
          uint64_t v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

void *sub_1C4ACA7AC@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t result = operator new(0x40uLL);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  int v7 = *a2;
  result[5] = 0;
  *((_DWORD *)result + 8) = v7;
  result[6] = 0;
  result[7] = 0;
  uint64_t v9 = (unsigned char *)*((void *)a2 + 1);
  size_t v8 = (unsigned char *)*((void *)a2 + 2);
  int64_t v10 = v8 - v9;
  if (v8 != v9)
  {
    uint64_t v11 = result;
    if (v10 < 0) {
      sub_1C494A220();
    }
    uint64_t v12 = (char *)operator new(v8 - v9);
    v11[5] = v12;
    v11[6] = v12;
    uint64_t v13 = &v12[4 * (v10 >> 2)];
    v11[7] = v13;
    uint64_t result = memcpy(v12, v9, v10);
    v11[6] = v13;
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1C4ACA858(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 48) = v5;
    operator delete(v5);
  }
  sub_1C49AB2BC(v1);
  _Unwind_Resume(a1);
}

char *sub_1C4ACA87C(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      sub_1C494A220();
    }
    uint64_t result = (char *)operator new(24 * a4);
    size_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[24 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = &v8[v9];
        uint64_t v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          uint64_t result = (char *)sub_1C4949ADC(result, *(void **)v10, *(void *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v10;
          *((void *)result + 2) = *(void *)(v10 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_1C4ACA960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1C4ACA974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0) {
      operator delete(*(void **)(v10 + v11 - 24));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_1C494A188(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1C4ACA9B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_1C4946C8C((uint64_t)v41, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      int v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          uint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = *((void *)v14 + 1);
            if (v21 == v10)
            {
              uint64_t v22 = v14[39];
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = v14[39];
              }
              else {
                uint64_t v23 = *((void *)v14 + 3);
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v5, *((void *)v14 + 3))) {
                    return v14;
                  }
                }
                else
                {
                  if (!v14[39]) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (v14[v24 + 16] == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            int v14 = *(unsigned __int8 **)v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = *((void *)v14 + 1);
          if (v17 == v10)
          {
            uint64_t v18 = v14[39];
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = v14[39];
            }
            else {
              uint64_t v19 = *((void *)v14 + 3);
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v5, *((void *)v14 + 3))) {
                  return v14;
                }
              }
              else
              {
                if (!v14[39]) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (v14[v20 + 16] == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          int v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v25 = (void *)(a1 + 16);
  int v14 = (unsigned __int8 *)operator new(0x28uLL);
  v41[0] = v14;
  v41[1] = a1 + 16;
  *(void *)int v14 = 0;
  *((void *)v14 + 1) = v10;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((void *)v14 + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  char v42 = 1;
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v27 = *(float *)(a1 + 32);
  if (v11 && (float)(v27 * (float)v11) >= v26)
  {
    uint64_t v28 = *(void *)a1;
    size_t v29 = *(void **)(*(void *)a1 + 8 * v3);
    if (v29)
    {
LABEL_54:
      *(void *)int v14 = *v29;
LABEL_89:
      *size_t v29 = v14;
      goto LABEL_90;
    }
  }
  else
  {
    BOOL v30 = 1;
    if (v11 >= 3) {
      BOOL v30 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v11);
    unint64_t v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32) {
      size_t prime = v32;
    }
    else {
      size_t prime = v31;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v34) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v34)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v34 < 3uLL || (uint8x8_t v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (prime <= v35) {
        size_t prime = v35;
      }
      if (prime < *(void *)&v34) {
LABEL_65:
      }
        sub_1C4949C24(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v28 = *(void *)a1;
        size_t v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v29) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v28 = *(void *)a1;
        size_t v29 = *(void **)(*(void *)a1 + 8 * v10);
        if (v29) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v3 = v38 & v10;
      uint64_t v28 = *(void *)a1;
      size_t v29 = *(void **)(*(void *)a1 + 8 * (v38 & v10));
      if (v29) {
        goto LABEL_54;
      }
    }
  }
  *(void *)int v14 = *v25;
  *uint64_t v25 = v14;
  *(void *)(v28 + 8 * v3) = v25;
  if (*(void *)v14)
  {
    unint64_t v39 = *(void *)(*(void *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v39 >= v11) {
        v39 %= v11;
      }
    }
    else
    {
      v39 &= v11 - 1;
    }
    size_t v29 = (void *)(*(void *)a1 + 8 * v39);
    goto LABEL_89;
  }
LABEL_90:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1C4ACADBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4949A58((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1C4ACADD4(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_1C4946C8C((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint8x8_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *sub_1C4ACB004(void *a1, uint64_t a2)
{
  unint64_t v4 = (unsigned __int8 **)(a2 + 16);
  unint64_t v5 = *(unsigned __int8 *)(a2 + 39);
  unint64_t v6 = *(void *)(a2 + 24);
  if ((v5 & 0x80u) == 0) {
    int8x8_t v7 = (uint64_t *)(a2 + 16);
  }
  else {
    int8x8_t v7 = *(uint64_t **)(a2 + 16);
  }
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = sub_1C4946C8C((uint64_t)&v16, v7, v8);
  *(void *)(a2 + 8) = v9;
  uint64_t result = sub_1C4ACB150((uint64_t)a1, v9, v4);
  if (!result)
  {
    int8x8_t v11 = (int8x8_t)a1[1];
    unint64_t v12 = *(void *)(a2 + 8);
    uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      if (v12 >= *(void *)&v11) {
        v12 %= *(void *)&v11;
      }
    }
    else
    {
      v12 &= *(void *)&v11 - 1;
    }
    char v14 = *(void **)(*a1 + 8 * v12);
    if (v14)
    {
      *(void *)a2 = *v14;
    }
    else
    {
      *(void *)a2 = a1[2];
      a1[2] = a2;
      *(void *)(*a1 + 8 * v12) = a1 + 2;
      if (!*(void *)a2)
      {
LABEL_21:
        ++a1[3];
        return (uint64_t *)a2;
      }
      unint64_t v15 = *(void *)(*(void *)a2 + 8);
      if (v13.u32[0] > 1uLL)
      {
        if (v15 >= *(void *)&v11) {
          v15 %= *(void *)&v11;
        }
      }
      else
      {
        v15 &= *(void *)&v11 - 1;
      }
      char v14 = (void *)(*a1 + 8 * v15);
    }
    void *v14 = a2;
    goto LABEL_21;
  }
  return result;
}

uint64_t *sub_1C4ACB150(uint64_t a1, unint64_t a2, unsigned __int8 **a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_50;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    if (v4 <= a2) {
      unint64_t v7 = a2 % v4;
    }
    else {
      unint64_t v7 = a2;
    }
    unint64_t v8 = *(uint64_t ***)(*(void *)a1 + 8 * v7);
    if (!v8) {
      goto LABEL_50;
    }
  }
  else
  {
    unint64_t v7 = (v4 - 1) & a2;
    unint64_t v8 = *(uint64_t ***)(*(void *)a1 + 8 * v7);
    if (!v8) {
      goto LABEL_50;
    }
  }
  unint64_t v9 = *v8;
  if (*v8)
  {
    char v10 = *((unsigned char *)a3 + 23);
    if (v10 >= 0) {
      int8x8_t v11 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      int8x8_t v11 = a3[1];
    }
    if (v10 >= 0) {
      unint64_t v12 = (unsigned __int8 *)a3;
    }
    else {
      unint64_t v12 = *a3;
    }
    if (v6.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v17 = v9[1];
        if (v17 == a2)
        {
          uint64_t v18 = *((unsigned __int8 *)v9 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 39);
          }
          else {
            uint64_t v19 = (unsigned __int8 *)v9[3];
          }
          if (v19 == v11)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v9[2], v12, v9[3])) {
                return v9;
              }
            }
            else
            {
              if (!*((unsigned char *)v9 + 39)) {
                return v9;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v9 + v20 + 16) == v12[v20])
              {
                if (v18 == ++v20) {
                  return v9;
                }
              }
            }
          }
        }
        else if ((v17 & (v4 - 1)) != v7)
        {
          goto LABEL_50;
        }
        unint64_t v9 = (uint64_t *)*v9;
        if (!v9) {
          goto LABEL_50;
        }
      }
    }
    do
    {
      unint64_t v13 = v9[1];
      if (v13 == a2)
      {
        uint64_t v14 = *((unsigned __int8 *)v9 + 39);
        if ((v14 & 0x80u) == 0) {
          unint64_t v15 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 39);
        }
        else {
          unint64_t v15 = (unsigned __int8 *)v9[3];
        }
        if (v15 == v11)
        {
          if ((v14 & 0x80) != 0)
          {
            if (!memcmp((const void *)v9[2], v12, v9[3])) {
              return v9;
            }
          }
          else
          {
            if (!*((unsigned char *)v9 + 39)) {
              return v9;
            }
            uint64_t v16 = 0;
            while (*((unsigned __int8 *)v9 + v16 + 16) == v12[v16])
            {
              if (v14 == ++v16) {
                return v9;
              }
            }
          }
        }
      }
      else
      {
        if (v13 >= v4) {
          v13 %= v4;
        }
        if (v13 != v7) {
          break;
        }
      }
      unint64_t v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
LABEL_50:
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v4 && (float)(v22 * (float)v4) >= v21) {
    return 0;
  }
  BOOL v23 = 1;
  if (v4 >= 3) {
    BOOL v23 = (v4 & (v4 - 1)) != 0;
  }
  unint64_t v24 = v23 | (2 * v4);
  unint64_t v25 = vcvtps_u32_f32(v21 / v22);
  if (v24 <= v25) {
    size_t prime = v25;
  }
  else {
    size_t prime = v24;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  if (prime > v4) {
    goto LABEL_74;
  }
  if (prime < v4)
  {
    size_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v4 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
    {
      size_t v30 = std::__next_prime(v27);
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime >= v4) {
        return 0;
      }
    }
    else
    {
      uint64_t v29 = 1 << -(char)__clz(v27 - 1);
      if (v27 >= 2) {
        size_t v27 = v29;
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime >= v4) {
        return 0;
      }
    }
LABEL_74:
    sub_1C4949C24(a1, prime);
  }
  return 0;
}

uint64_t *sub_1C4ACB434(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      char v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            char v10 = (uint64_t *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          char v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  uint64_t v14 = operator new(0x18uLL);
  void *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    uint64_t v18 = *(void **)(*(void *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      void *v14 = *v18;
LABEL_61:
      void *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_37;
    }
    if (prime < v7)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v7) {
LABEL_37:
      }
        sub_1C4949C24(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * v6);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v26 & v6;
      uint64_t v17 = *(void *)a1;
      uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v26 & v6));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  void *v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v27 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7) {
        v27 %= v7;
      }
    }
    else
    {
      v27 &= v7 - 1;
    }
    uint64_t v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1C4ACB744(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4ACB758(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    unint64_t v5 = *(void **)(v2 - 24);
    v2 -= 24;
    unint64_t v4 = v5;
    *(void *)(a1 + 16) = v2;
    if (v5)
    {
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1C4ACB7AC(void **__p)
{
  do
  {
    uint64_t v2 = (void **)*__p;
    uint64_t v3 = __p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
    operator delete(__p);
    std::string __p = v2;
  }
  while (v2);
}

void *sub_1C4ACB7F8(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1] - *a1;
  uint64_t v3 = v2 >> 3;
  unint64_t v4 = (v2 >> 3) + 1;
  if (v4 >> 61) {
    sub_1C494A220();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v4) {
    unint64_t v4 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (v8)
  {
    if (v8 >> 61) {
      sub_1C4949AA8();
    }
    unint64_t v9 = (char *)operator new(8 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  char v10 = &v9[8 * v3];
  unint64_t v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)char v10 = v12;
  unint64_t v13 = v10 + 8;
  uint64_t v14 = (char *)*a1;
  float v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15) {
      goto LABEL_31;
    }
    uint64_t v17 = (v16 >> 3) + 1;
    uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v10 -= v18;
    BOOL v19 = &v15[-v18];
    unint64_t v20 = v15 - 16;
    unint64_t v21 = &v9[8 * v3 - 16];
    uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *((_OWORD *)v20 - 1);
      long long v23 = *(_OWORD *)v20;
      *((_OWORD *)v20 - 1) = 0uLL;
      *(_OWORD *)unint64_t v20 = 0uLL;
      *((_OWORD *)v21 - 1) = v24;
      *(_OWORD *)unint64_t v21 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    float v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        uint64_t v25 = *((void *)v15 - 1);
        v15 -= 8;
        *(void *)float v15 = 0;
        *((void *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    float v15 = (char *)*a1;
    unint64_t v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      uint64_t v28 = *((void *)v26 - 1);
      v26 -= 8;
      uint64_t v27 = v28;
      *(void *)unint64_t v26 = 0;
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v27 + 16))(v27);
      }
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void sub_1C4ACB9AC(void *a1, void *a2, void *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; ++i)
    *(void *)(*a1 + 8 * i) = 0;
  unint64_t v8 = (_DWORD *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[4] = *((_DWORD *)a2 + 4);
      if (v8 != (_DWORD *)a2) {
        sub_1C499DEE4((void *)v8 + 3, (char *)a2[3], (char *)a2[4], (uint64_t)(a2[4] - a2[3]) >> 2);
      }
      unint64_t v9 = *(_DWORD **)v8;
      sub_1C4ACBBB8((uint64_t)a1, (uint64_t)v8);
      a2 = (void *)*a2;
      unint64_t v8 = v9;
      if (!v9) {
        goto LABEL_9;
      }
    }
    do
    {
      uint64_t v17 = *(_DWORD **)v8;
      uint64_t v18 = (void *)*((void *)v8 + 3);
      if (v18)
      {
        *((void *)v8 + 4) = v18;
        operator delete(v18);
      }
      operator delete(v8);
      unint64_t v8 = v17;
    }
    while (v17);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      char v10 = operator new(0x30uLL);
      *char v10 = 0;
      v10[1] = 0;
      uint64_t v11 = *((int *)a2 + 4);
      v10[3] = 0;
      *((_DWORD *)v10 + 4) = v11;
      v10[4] = 0;
      v10[5] = 0;
      unint64_t v13 = (unsigned char *)a2[3];
      uint64_t v12 = (unsigned char *)a2[4];
      int64_t v14 = v12 - v13;
      if (v12 != v13)
      {
        if (v14 < 0) {
          sub_1C494A220();
        }
        float v15 = (char *)operator new(v12 - v13);
        v10[3] = v15;
        v10[4] = v15;
        unint64_t v16 = &v15[4 * (v14 >> 2)];
        v10[5] = v16;
        memcpy(v15, v13, v14);
        v10[4] = v16;
      }
      v10[1] = v11;
      sub_1C4ACBBB8((uint64_t)a1, (uint64_t)v10);
      a2 = (void *)*a2;
    }
  }
}

void sub_1C4ACBB2C()
{
}

void sub_1C4ACBB48(_Unwind_Exception *a1)
{
}

void sub_1C4ACBB5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4AA17B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4ACBB70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 32) = v5;
    operator delete(v5);
  }
  sub_1C4AA17B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4ACBB94(_Unwind_Exception *a1)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C4ACBBB8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(int *)(a2 + 16);
  *(void *)(a2 + 8) = v4;
  unint64_t v5 = *(void *)(a1 + 8);
  float v6 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v7 = *(float *)(a1 + 32);
  if (v5 && (float)(v7 * (float)v5) >= v6) {
    goto LABEL_76;
  }
  BOOL v8 = 1;
  if (v5 >= 3) {
    BOOL v8 = (v5 & (v5 - 1)) != 0;
  }
  unint64_t v9 = v8 | (2 * v5);
  unint64_t v10 = vcvtps_u32_f32(v6 / v7);
  if (v9 <= v10) {
    int8x8_t prime = (int8x8_t)v10;
  }
  else {
    int8x8_t prime = (int8x8_t)v9;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v5 = *(void *)(a1 + 8);
  }
  if (*(void *)&prime <= v5)
  {
    if (*(void *)&prime >= v5) {
      goto LABEL_76;
    }
    size_t v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      size_t v45 = std::__next_prime(v25);
      if (*(void *)&prime <= v45) {
        int8x8_t prime = (int8x8_t)v45;
      }
      if (*(void *)&prime >= v5)
      {
LABEL_38:
        unint64_t v5 = *(void *)(a1 + 8);
        uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
        v28.i16[0] = vaddlv_u8(v28);
        unint64_t v29 = v28.u32[0];
        if (v28.u32[0] >= 2uLL) {
          goto LABEL_44;
        }
        goto LABEL_77;
      }
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        size_t v25 = v27;
      }
      if (*(void *)&prime <= v25) {
        int8x8_t prime = (int8x8_t)v25;
      }
      if (*(void *)&prime >= v5) {
        goto LABEL_38;
      }
    }
    if (!*(void *)&prime)
    {
      BOOL v46 = *(void **)a1;
      *(void *)a1 = 0;
      if (v46) {
        operator delete(v46);
      }
      unint64_t v5 = 0;
      *(void *)(a1 + 8) = 0;
      uint8x8_t v47 = (uint8x8_t)vcnt_s8(0);
      v47.i16[0] = vaddlv_u8(v47);
      unint64_t v29 = v47.u32[0];
      if (v47.u32[0] >= 2uLL) {
        goto LABEL_44;
      }
      goto LABEL_77;
    }
  }
  if (*(void *)&prime >> 61) {
    sub_1C4949AA8();
  }
  uint64_t v12 = operator new(8 * *(void *)&prime);
  unint64_t v13 = *(void **)a1;
  *(void *)a1 = v12;
  if (v13) {
    operator delete(v13);
  }
  uint64_t v14 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v14++) = 0;
  while (*(void *)&prime != v14);
  uint64_t v16 = a1 + 16;
  float v15 = *(uint64_t ***)(a1 + 16);
  if (v15)
  {
    unint64_t v17 = (unint64_t)v15[1];
    uint64_t v18 = *(void *)&prime - 1;
    if ((*(void *)&prime & (*(void *)&prime - 1)) == 0)
    {
      uint64_t v19 = v17 & v18;
      *(void *)(*(void *)a1 + 8 * v19) = v16;
      unint64_t v20 = *v15;
      if (!*v15) {
        goto LABEL_43;
      }
      do
      {
        uint64_t v21 = v20[1] & v18;
        if (v21 == v19)
        {
          float v15 = (uint64_t **)v20;
        }
        else
        {
          uint64_t v22 = v20;
          if (*(void *)(*(void *)a1 + 8 * v21))
          {
            do
            {
              long long v23 = v22;
              uint64_t v22 = (uint64_t *)*v22;
            }
            while (v22 && *((_DWORD *)v20 + 4) == *((_DWORD *)v22 + 4));
            char *v15 = v22;
            uint64_t v24 = 8 * v21;
            *long long v23 = **(void **)(*(void *)a1 + v24);
            **(void **)(*(void *)a1 + v++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v20;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v21) = v15;
            float v15 = (uint64_t **)v20;
            uint64_t v19 = v21;
          }
        }
        unint64_t v20 = *v15;
      }
      while (*v15);
      unint64_t v5 = (unint64_t)prime;
LABEL_76:
      uint8x8_t v48 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
      v48.i16[0] = vaddlv_u8(v48);
      unint64_t v29 = v48.u32[0];
      if (v48.u32[0] >= 2uLL) {
        goto LABEL_44;
      }
      goto LABEL_77;
    }
    if (v17 >= *(void *)&prime) {
      v17 %= *(void *)&prime;
    }
    *(void *)(*(void *)a1 + 8 * v17) = v16;
    for (uint64_t i = *v15; *v15; uint64_t i = *v15)
    {
      unint64_t v40 = i[1];
      if (v40 >= *(void *)&prime) {
        v40 %= *(void *)&prime;
      }
      if (v40 == v17)
      {
        float v15 = (uint64_t **)i;
      }
      else
      {
        long long v41 = i;
        if (*(void *)(*(void *)a1 + 8 * v40))
        {
          do
          {
            char v42 = v41;
            long long v41 = (uint64_t *)*v41;
          }
          while (v41 && *((_DWORD *)i + 4) == *((_DWORD *)v41 + 4));
          char *v15 = v41;
          uint64_t v43 = 8 * v40;
          *char v42 = **(void **)(*(void *)a1 + v43);
          **(void **)(*(void *)a1 + v43) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v40) = v15;
          float v15 = (uint64_t **)i;
          unint64_t v17 = v40;
        }
      }
    }
  }
LABEL_43:
  unint64_t v5 = (unint64_t)prime;
  uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
  v31.i16[0] = vaddlv_u8(v31);
  unint64_t v29 = v31.u32[0];
  if (v31.u32[0] >= 2uLL)
  {
LABEL_44:
    unint64_t v32 = v4;
    if (v5 <= v4) {
      unint64_t v32 = v4 % v5;
    }
    unint64_t v33 = *(uint64_t **)(*(void *)a1 + 8 * v32);
    if (!v33)
    {
      uint64_t v37 = 0;
      unint64_t v44 = *(void *)(a2 + 8);
      goto LABEL_85;
    }
    unsigned __int8 v34 = 0;
    int v35 = *(_DWORD *)(a2 + 16);
    while (1)
    {
      uint64_t v37 = v33;
      unint64_t v33 = (uint64_t *)*v33;
      if (!v33) {
        goto LABEL_84;
      }
      unint64_t v38 = v33[1];
      unint64_t v39 = v38;
      if (v38 >= v5) {
        unint64_t v39 = v38 % v5;
      }
      if (v39 != v32) {
        goto LABEL_84;
      }
      if (v38 == v4)
      {
        int v36 = v34 & (*((_DWORD *)v33 + 4) != v35);
        v34 |= *((_DWORD *)v33 + 4) == v35;
        if (v36 == 1) {
          goto LABEL_84;
        }
      }
      else if ((v34 & 1) == 1)
      {
        goto LABEL_84;
      }
    }
  }
LABEL_77:
  uint64_t v49 = (v5 - 1) & v4;
  uint64_t v50 = *(uint64_t **)(*(void *)a1 + 8 * v49);
  if (!v50)
  {
    uint64_t v37 = 0;
    unint64_t v44 = *(void *)(a2 + 8);
LABEL_96:
    v44 &= v5 - 1;
    if (v37) {
      goto LABEL_88;
    }
LABEL_97:
    *(void *)a2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = a2;
    *(void *)(*(void *)a1 + 8 * v44) = a1 + 16;
    if (!*(void *)a2) {
      goto LABEL_103;
    }
    unint64_t v55 = *(void *)(*(void *)a2 + 8);
    if (v29 > 1)
    {
      if (v55 >= v5) {
        v55 %= v5;
      }
    }
    else
    {
      v55 &= v5 - 1;
    }
LABEL_102:
    *(void *)(*(void *)a1 + 8 * v55) = a2;
    goto LABEL_103;
  }
  char v51 = 0;
  int v52 = *(_DWORD *)(a2 + 16);
  while (1)
  {
    uint64_t v37 = v50;
    uint64_t v50 = (uint64_t *)*v50;
    if (!v50) {
      break;
    }
    uint64_t v54 = v50[1];
    if ((v54 & (v5 - 1)) != v49) {
      break;
    }
    if (v54 == v4)
    {
      char v53 = v51 & (*((_DWORD *)v50 + 4) != v52);
      v51 |= *((_DWORD *)v50 + 4) == v52;
      if (v53) {
        break;
      }
    }
    else if (v51)
    {
      break;
    }
  }
LABEL_84:
  unint64_t v44 = *(void *)(a2 + 8);
  if (v29 <= 1) {
    goto LABEL_96;
  }
LABEL_85:
  if (v44 >= v5) {
    v44 %= v5;
  }
  if (!v37) {
    goto LABEL_97;
  }
LABEL_88:
  *(void *)a2 = *v37;
  *uint64_t v37 = a2;
  if (*(void *)a2)
  {
    unint64_t v55 = *(void *)(*(void *)a2 + 8);
    if (v29 > 1)
    {
      if (v55 >= v5) {
        v55 %= v5;
      }
    }
    else
    {
      v55 &= v5 - 1;
    }
    if (v55 != v44) {
      goto LABEL_102;
    }
  }
LABEL_103:
  ++*(void *)(a1 + 24);
}

void sub_1C4ACC11C(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_7;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  BOOL v8 = (_DWORD *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[4] = *((_DWORD *)a2 + 4);
      unint64_t v9 = *(_DWORD **)v8;
      sub_1C4ACBBB8((uint64_t)a1, (uint64_t)v8);
      a2 = (uint64_t *)*a2;
      BOOL v8 = v9;
      if (!v9) {
        goto LABEL_7;
      }
    }
    do
    {
      uint64_t v12 = *(_DWORD **)v8;
      operator delete(v8);
      BOOL v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      unint64_t v10 = operator new(0x18uLL);
      *(void *)unint64_t v10 = 0;
      uint64_t v11 = *((int *)a2 + 4);
      v10[4] = v11;
      *((void *)v10 + 1) = v11;
      sub_1C4ACBBB8((uint64_t)a1, (uint64_t)v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_1C4ACC1FC(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1C4ACC21C(_Unwind_Exception *a1)
{
}

void sub_1C4ACC230(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4ACC244(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_1C4949C24(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(int **)(a2 + 16); i; uint64_t i = *(int **)i)
    sub_1C4ACB434(a1, i + 4, i + 4);
  return a1;
}

void sub_1C4ACC360(_Unwind_Exception *a1)
{
  sub_1C498D2E0(v1);
  _Unwind_Resume(a1);
}

void sub_1C4ACC374(_Unwind_Exception *a1)
{
  sub_1C498D2E0(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1C4ACC388(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v11 = (uint64_t *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  float v15 = operator new(0x18uLL);
  void *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  *((_DWORD *)v15 + 5) = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    uint64_t v18 = *(void *)a1;
    uint64_t v19 = *(void **)(*(void *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      void *v15 = *v19;
LABEL_61:
      *uint64_t v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v20 = 1;
    if (v8 >= 3) {
      BOOL v20 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v8);
    unint64_t v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_37;
    }
    if (prime < v8)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (prime <= v24) {
        size_t prime = v24;
      }
      if (prime < v8) {
LABEL_37:
      }
        sub_1C4949C24(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    unint64_t v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
      {
        unint64_t v4 = v7 % v8;
        uint64_t v18 = *(void *)a1;
        uint64_t v19 = *(void **)(*(void *)a1 + 8 * (v7 % v8));
        if (v19) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v7;
        uint64_t v18 = *(void *)a1;
        uint64_t v19 = *(void **)(*(void *)a1 + 8 * v7);
        if (v19) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v27 & v7;
      uint64_t v18 = *(void *)a1;
      uint64_t v19 = *(void **)(*(void *)a1 + 8 * (v27 & v7));
      if (v19) {
        goto LABEL_26;
      }
    }
  }
  void *v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v18 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    unint64_t v28 = *(void *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8) {
        v28 %= v8;
      }
    }
    else
    {
      v28 &= v8 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_1C4ACC69C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4ACC6B0(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint8x8_t v9 = (float *)result;
LABEL_2:
  unint64_t v10 = (float *)(a2 - 8);
  unint64_t i = (unint64_t)v9;
  while (1)
  {
    uint8x8_t v9 = (float *)i;
    uint64_t v12 = a2 - i;
    unint64_t v13 = (uint64_t)(a2 - i) >> 3;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          float v48 = *(float *)i;
          float v49 = *(float *)(a2 - 8);
          if (*(float *)i >= v49)
          {
            if (v49 < v48) {
              return result;
            }
            int v50 = *(_DWORD *)(i + 4);
            int v51 = *(_DWORD *)(a2 - 4);
            if (v50 >= v51) {
              return result;
            }
          }
          else
          {
            int v50 = *(_DWORD *)(i + 4);
            int v51 = *(_DWORD *)(a2 - 4);
          }
          *(float *)unint64_t i = v49;
          *(float *)(a2 - 8) = v48;
          *(_DWORD *)(i + 4) = v51;
          *(_DWORD *)(a2 - 4) = v50;
          return result;
        case 3uLL:
          return sub_1C4ACD190(i, i + 8, a2 - 8);
        case 4uLL:
          uint64_t result = sub_1C4ACD190(i, i + 8, i + 16);
          float v52 = *(float *)(i + 16);
          float v53 = *(float *)(a2 - 8);
          if (v52 >= v53)
          {
            if (v53 < v52) {
              return result;
            }
            int v54 = *(_DWORD *)(i + 20);
            int v55 = *(_DWORD *)(a2 - 4);
            if (v54 >= v55) {
              return result;
            }
          }
          else
          {
            int v54 = *(_DWORD *)(i + 20);
            int v55 = *(_DWORD *)(a2 - 4);
          }
          *(float *)(i + 16) = v53;
          *(float *)(a2 - 8) = v52;
          *(_DWORD *)(i + 20) = v55;
          *(_DWORD *)(a2 - 4) = v54;
          float v56 = *(float *)(i + 8);
          float v57 = *(float *)(i + 16);
          if (v56 >= v57)
          {
            if (v57 < v56) {
              return result;
            }
            int v58 = *(_DWORD *)(i + 12);
            int v59 = *(_DWORD *)(i + 20);
            if (v58 >= v59) {
              return result;
            }
          }
          else
          {
            int v58 = *(_DWORD *)(i + 12);
            int v59 = *(_DWORD *)(i + 20);
          }
          *(float *)(i + 8) = v57;
          *(float *)(i + 16) = v56;
          *(_DWORD *)(i + 12) = v59;
          *(_DWORD *)(i + 20) = v58;
          float v60 = *(float *)i;
          if (*(float *)i >= v57)
          {
            if (v57 < v60) {
              return result;
            }
            int v61 = *(_DWORD *)(i + 4);
            if (v61 >= v59) {
              return result;
            }
          }
          else
          {
            int v61 = *(_DWORD *)(i + 4);
          }
          *(float *)unint64_t i = v57;
          *(float *)(i + 8) = v60;
          *(_DWORD *)(i + 4) = v59;
          *(_DWORD *)(i + 12) = v61;
          return result;
        case 5uLL:
          return sub_1C4ACD614(i, i + 8, i + 16, i + 24, a2 - 8);
        default:
          JUMPOUT(0);
      }
    }
    if (v12 <= 191) {
      break;
    }
    if (!a3)
    {
      if (i != a2)
      {
        int64_t v77 = (v13 - 2) >> 1;
        int64_t v78 = v77;
        while (2)
        {
          int64_t v80 = v78;
          if (v77 >= v78)
          {
            uint64_t v81 = (2 * v78) | 1;
            unint64_t v82 = i + 8 * v81;
            if (2 * v80 + 2 < (uint64_t)v13)
            {
              float v83 = *(float *)(v82 + 8);
              if (v83 < *(float *)v82 || *(float *)v82 >= v83 && *(_DWORD *)(v82 + 12) < *(_DWORD *)(i + 8 * v81 + 4))
              {
                v82 += 8;
                uint64_t v81 = 2 * v80 + 2;
              }
            }
            unint64_t v84 = i + 8 * v80;
            float v85 = *(float *)v84;
            float v86 = *(float *)v82;
            if (*(float *)v84 >= *(float *)v82)
            {
              int v87 = *(_DWORD *)(v82 + 4);
              if (v86 < v85)
              {
                int v88 = *(_DWORD *)(v84 + 4);
                goto LABEL_148;
              }
              int v88 = *(_DWORD *)(i + 8 * v80 + 4);
              if (v88 >= v87)
              {
LABEL_148:
                *(float *)unint64_t v84 = v86;
                *(_DWORD *)(v84 + 4) = v87;
                if (v77 >= v81)
                {
                  while (1)
                  {
                    uint64_t v89 = 2 * v81;
                    uint64_t v81 = (2 * v81) | 1;
                    unint64_t v79 = i + 8 * v81;
                    uint64_t v90 = v89 + 2;
                    if (v90 < (uint64_t)v13)
                    {
                      float v91 = *(float *)(v79 + 8);
                      if (v91 < *(float *)v79
                        || *(float *)v79 >= v91
                        && (uint64_t result = *(unsigned int *)(v79 + 12), (int)result < *(_DWORD *)(i + 8 * v81 + 4)))
                      {
                        v79 += 8;
                        uint64_t v81 = v90;
                      }
                    }
                    float v92 = *(float *)v79;
                    if (v85 < *(float *)v79) {
                      break;
                    }
                    int v93 = *(_DWORD *)(v79 + 4);
                    BOOL v94 = v92 >= v85 && v88 < v93;
                    if (v94) {
                      break;
                    }
                    *(float *)unint64_t v82 = v92;
                    *(_DWORD *)(v82 + 4) = v93;
                    unint64_t v82 = v79;
                    if (v77 < v81) {
                      goto LABEL_136;
                    }
                  }
                }
                unint64_t v79 = v82;
LABEL_136:
                *(float *)unint64_t v79 = v85;
                *(_DWORD *)(v79 + 4) = v88;
              }
            }
          }
          int64_t v78 = v80 - 1;
          if (v80) {
            continue;
          }
          break;
        }
        uint64_t v95 = (unint64_t)v12 >> 3;
        while (2)
        {
          if (v95 >= 2)
          {
            uint64_t v96 = 0;
            float v97 = *(float *)i;
            int v98 = *(_DWORD *)(i + 4);
            unint64_t v99 = i;
            do
            {
              unint64_t v100 = (_DWORD *)v99;
              uint64_t v101 = v96 + 1;
              v99 += 8 * (v96 + 1);
              uint64_t v102 = 2 * v96;
              uint64_t v96 = (2 * v96) | 1;
              uint64_t v103 = v102 + 2;
              if (v103 < v95)
              {
                float v104 = *(float *)(v99 + 8);
                if (v104 < *(float *)v99 || *(float *)v99 >= v104 && *(_DWORD *)(v99 + 12) < v100[2 * v101 + 1])
                {
                  v99 += 8;
                  uint64_t v96 = v103;
                }
              }
              *unint64_t v100 = *(_DWORD *)v99;
              v100[1] = *(_DWORD *)(v99 + 4);
            }
            while (v96 <= (uint64_t)((unint64_t)(v95 - 2) >> 1));
            if (v99 == a2 - 8)
            {
              *(float *)unint64_t v99 = v97;
              *(_DWORD *)(v99 + 4) = v98;
            }
            else
            {
              *(_DWORD *)unint64_t v99 = *(_DWORD *)(a2 - 8);
              *(_DWORD *)(v99 + 4) = *(_DWORD *)(a2 - 4);
              *(float *)(a2 - 8) = v97;
              *(_DWORD *)(a2 - 4) = v98;
              uint64_t v105 = v99 - i + 8;
              if (v105 >= 9)
              {
                unint64_t v106 = ((unint64_t)v105 >> 3) - 2;
                unint64_t v107 = v106 >> 1;
                unint64_t v108 = i + 8 * (v106 >> 1);
                float v109 = *(float *)v99;
                float v110 = *(float *)v108;
                if (*(float *)v99 < *(float *)v108)
                {
                  int v111 = *(_DWORD *)(v99 + 4);
                  int v112 = *(_DWORD *)(v108 + 4);
                  goto LABEL_178;
                }
                if (v110 >= v109)
                {
                  int v111 = *(_DWORD *)(v99 + 4);
                  int v112 = *(_DWORD *)(i + 8 * v107 + 4);
                  if (v111 < v112)
                  {
LABEL_178:
                    *(float *)unint64_t v99 = v110;
                    *(_DWORD *)(v99 + 4) = v112;
                    if (v106 >= 2)
                    {
                      while (1)
                      {
                        unint64_t v115 = v107 - 1;
                        unint64_t v107 = (v107 - 1) >> 1;
                        unint64_t v113 = i + 8 * v107;
                        float v116 = *(float *)v113;
                        if (v109 < *(float *)v113)
                        {
                          int v114 = *(_DWORD *)(v113 + 4);
                        }
                        else
                        {
                          if (v116 < v109) {
                            break;
                          }
                          int v114 = *(_DWORD *)(i + 8 * v107 + 4);
                          if (v111 >= v114) {
                            break;
                          }
                        }
                        *(float *)unint64_t v108 = v116;
                        *(_DWORD *)(v108 + 4) = v114;
                        unint64_t v108 = i + 8 * v107;
                        if (v115 <= 1) {
                          goto LABEL_180;
                        }
                      }
                    }
                    unint64_t v113 = v108;
LABEL_180:
                    *(float *)unint64_t v113 = v109;
                    *(_DWORD *)(v113 + 4) = v111;
                  }
                }
              }
            }
          }
          a2 -= 8;
          BOOL v94 = (unint64_t)v95-- > 2;
          if (!v94) {
            return result;
          }
          continue;
        }
      }
      return result;
    }
    unint64_t v14 = v13 >> 1;
    float v15 = (float *)(i + 8 * (v13 >> 1));
    if ((unint64_t)v12 >= 0x401)
    {
      sub_1C4ACD190((uint64_t)v9, (uint64_t)&v9[2 * (v13 >> 1)], a2 - 8);
      float v16 = &v9[2 * v14];
      sub_1C4ACD190((uint64_t)(v9 + 2), (uint64_t)(v16 - 2), a2 - 16);
      sub_1C4ACD190((uint64_t)(v9 + 4), (uint64_t)&v9[2 * v14 + 2], a2 - 24);
      uint64_t result = sub_1C4ACD190((uint64_t)(v16 - 2), (uint64_t)v15, (uint64_t)&v9[2 * v14 + 2]);
      float v17 = *v9;
      *uint8x8_t v9 = *v15;
      float *v15 = v17;
      int v18 = *((_DWORD *)v9 + 1);
      v9[1] = v16[1];
      *((_DWORD *)v16 + 1) = v18;
      --a3;
      float v19 = *v9;
      if (a4) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t result = sub_1C4ACD190((uint64_t)&v9[2 * (v13 >> 1)], (uint64_t)v9, a2 - 8);
      --a3;
      float v19 = *v9;
      if (a4) {
        goto LABEL_15;
      }
    }
    float v20 = *(v9 - 2);
    if (v19 < v20)
    {
LABEL_15:
      uint64_t v22 = 0;
      int v23 = *((_DWORD *)v9 + 1);
      while (1)
      {
        float v24 = v9[v22 + 2];
        if (v19 >= v24 && (v24 < v19 || v23 >= SLODWORD(v9[v22 + 3]))) {
          break;
        }
        v22 += 2;
      }
      unint64_t v25 = (unint64_t)&v9[v22 + 2];
      if (v22 * 4)
      {
        float v26 = *v10;
        unint64_t v27 = a2 - 8;
        if (v19 >= *v10)
        {
          do
          {
            if (v26 >= v19 && v23 < *(_DWORD *)(v27 + 4)) {
              break;
            }
            float v28 = *(float *)(v27 - 8);
            v27 -= 8;
            float v26 = v28;
          }
          while (v19 >= v28);
        }
      }
      else
      {
        unint64_t v27 = a2;
        if (v25 < a2)
        {
          float v29 = *v10;
          unint64_t v27 = a2 - 8;
          if (v19 >= *v10)
          {
            unint64_t v27 = a2 - 8;
            do
            {
              if (v29 < v19)
              {
                if (v25 >= v27) {
                  break;
                }
              }
              else if (v25 >= v27 || v23 < *(_DWORD *)(v27 + 4))
              {
                break;
              }
              float v36 = *(float *)(v27 - 8);
              v27 -= 8;
              float v29 = v36;
            }
            while (v19 >= v36);
          }
        }
      }
      if (v25 >= v27)
      {
        unint64_t i = v25;
      }
      else
      {
        float v30 = *(float *)v27;
        unint64_t i = v25;
        unint64_t v31 = v27;
        do
        {
          *(float *)unint64_t i = v30;
          *(float *)unint64_t v31 = v24;
          int v32 = *(_DWORD *)(i + 4);
          *(_DWORD *)(i + 4) = *(_DWORD *)(v31 + 4);
          *(_DWORD *)(v31 + 4) = v32;
          do
          {
            do
            {
              float v33 = *(float *)(i + 8);
              i += 8;
              float v24 = v33;
            }
            while (v19 < v33);
          }
          while (v24 >= v19 && v23 < *(_DWORD *)(i + 4));
          do
          {
            float v34 = *(float *)(v31 - 8);
            v31 -= 8;
            float v30 = v34;
          }
          while (v19 >= v34 && (v30 < v19 || v23 >= *(_DWORD *)(v31 + 4)));
        }
        while (i < v31);
      }
      if ((float *)(i - 8) != v9)
      {
        *uint8x8_t v9 = *(float *)(i - 8);
        v9[1] = *(float *)(i - 4);
      }
      *(float *)(i - 8) = v19;
      *(_DWORD *)(i - 4) = v23;
      if (v25 < v27)
      {
LABEL_46:
        uint64_t result = sub_1C4ACC6B0(v9, i - 8, a3, a4 & 1);
        a4 = 0;
      }
      else
      {
        BOOL v35 = sub_1C4ACD2F0((uint64_t)v9, i - 8);
        uint64_t result = sub_1C4ACD2F0(i, a2);
        if (result)
        {
          a2 = i - 8;
          if (v35) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v35) {
          goto LABEL_46;
        }
      }
    }
    else
    {
      if (v20 < v19)
      {
        int v21 = *((_DWORD *)v9 + 1);
      }
      else
      {
        int v21 = *((_DWORD *)v9 + 1);
        if (v21 < *((_DWORD *)v9 - 1)) {
          goto LABEL_15;
        }
      }
      float v37 = *v10;
      if (*v10 >= v19 && (v19 < v37 || *(_DWORD *)(a2 - 4) >= v21))
      {
        for (unint64_t i = (unint64_t)(v9 + 2);
              i < a2 && *(float *)i >= v19 && (v19 < *(float *)i || *(_DWORD *)(i + 4) >= v21);
      }
      else
      {
        unint64_t i = (unint64_t)v9;
        do
        {
          float v38 = *(float *)(i + 8);
          i += 8;
          float v39 = v38;
        }
        while (v38 >= v19 && (v19 < v39 || *(_DWORD *)(i + 4) >= v21));
      }
      unint64_t j = a2;
      if (i < a2)
      {
        for (unint64_t j = a2 - 8; v37 < v19 || v19 >= v37 && *(_DWORD *)(j + 4) < v21; j -= 8)
        {
          float v41 = *(float *)(j - 8);
          float v37 = v41;
        }
      }
      if (i < j)
      {
        float v42 = *(float *)i;
        float v43 = *(float *)j;
        do
        {
          *(float *)unint64_t i = v43;
          *(float *)unint64_t j = v42;
          float v44 = *(float *)(i + 8);
          i += 8;
          float v42 = v44;
          int v45 = *(_DWORD *)(i - 4);
          *(_DWORD *)(i - 4) = *(_DWORD *)(j + 4);
          *(_DWORD *)(j + 4) = v45;
          while (v42 >= v19 && (v19 < v42 || *(_DWORD *)(i + 4) >= v21))
          {
            float v46 = *(float *)(i + 8);
            i += 8;
            float v42 = v46;
          }
          do
          {
            do
            {
              float v47 = *(float *)(j - 8);
              j -= 8;
              float v43 = v47;
            }
            while (v47 < v19);
          }
          while (v19 >= v43 && *(_DWORD *)(j + 4) < v21);
        }
        while (i < j);
      }
      BOOL v4 = i - 8 >= (unint64_t)v9;
      BOOL v5 = i - 8 == (void)v9;
      if ((float *)(i - 8) != v9)
      {
        *uint8x8_t v9 = *(float *)(i - 8);
        v9[1] = *(float *)(i - 4);
      }
      a4 = 0;
      *(float *)(i - 8) = v19;
      *(_DWORD *)(i - 4) = v21;
    }
  }
  int v62 = (float *)(i + 8);
  BOOL v64 = i == a2 || v62 == (float *)a2;
  if (a4)
  {
    if (v64) {
      return result;
    }
    uint64_t v65 = 0;
    unint64_t v66 = i;
LABEL_119:
    unint64_t v67 = v66;
    unint64_t v66 = (unint64_t)v62;
    float v68 = *(float *)v67;
    float v69 = *(float *)(v67 + 8);
    if (*(float *)v67 >= v69)
    {
      if (v69 < v68) {
        goto LABEL_118;
      }
      int v71 = *(_DWORD *)(v67 + 4);
      int v70 = *(_DWORD *)(v67 + 12);
      if (v71 >= v70) {
        goto LABEL_118;
      }
    }
    else
    {
      int v70 = *(_DWORD *)(v67 + 12);
      int v71 = *(_DWORD *)(v67 + 4);
    }
    *(float *)(v67 + 8) = v68;
    *(_DWORD *)(v66 + 4) = v71;
    unint64_t v72 = i;
    if (v67 == i) {
      goto LABEL_117;
    }
    uint64_t v73 = v65;
    while (1)
    {
      float v76 = *(float *)(i + v73 - 8);
      if (v76 >= v69)
      {
        if (v69 < v76)
        {
          unint64_t v72 = v67;
LABEL_117:
          *(float *)unint64_t v72 = v69;
          *(_DWORD *)(v72 + 4) = v70;
LABEL_118:
          int v62 = (float *)(v66 + 8);
          v65 += 8;
          if (v66 + 8 == a2) {
            return result;
          }
          goto LABEL_119;
        }
        unint64_t v72 = i + v73;
        int v74 = *(_DWORD *)(i + v73 - 4);
        if (v74 >= v70) {
          goto LABEL_117;
        }
      }
      else
      {
        int v74 = *(_DWORD *)(i + v73 - 4);
      }
      v67 -= 8;
      uint64_t v75 = i + v73;
      *(float *)uint64_t v75 = v76;
      *(_DWORD *)(v75 + 4) = v74;
      v73 -= 8;
      if (!v73)
      {
        unint64_t v72 = i;
        goto LABEL_117;
      }
    }
  }
  if (!v64)
  {
    for (unint64_t k = i + 4; ; k += 8)
    {
      uint64_t v118 = v9;
      uint8x8_t v9 = v62;
      float v119 = *v118;
      float v120 = v118[2];
      if (*v118 < v120) {
        break;
      }
      if (v120 >= v119)
      {
        int v122 = *((_DWORD *)v118 + 1);
        int v121 = *((_DWORD *)v118 + 3);
        if (v122 < v121) {
          goto LABEL_204;
        }
      }
LABEL_199:
      v62 += 2;
      if (v9 + 2 == (float *)a2) {
        return result;
      }
    }
    int v121 = *((_DWORD *)v118 + 3);
LABEL_204:
    for (unint64_t m = k; ; m -= 8)
    {
      *(float *)(m + 4) = v119;
      *(_DWORD *)(m + 8) = *(_DWORD *)m;
      float v119 = *(float *)(m - 12);
      if (v119 >= v120 && (v120 < v119 || *(_DWORD *)(m - 8) >= v121)) {
        break;
      }
    }
    *(float *)(m - 4) = v120;
    *(_DWORD *)unint64_t m = v121;
    goto LABEL_199;
  }
  return result;
}

uint64_t sub_1C4ACD190(uint64_t result, uint64_t a2, uint64_t a3)
{
  float v3 = *(float *)result;
  float v4 = *(float *)a2;
  if (*(float *)result >= *(float *)a2 && (v4 < v3 || *(_DWORD *)(result + 4) >= *(_DWORD *)(a2 + 4)))
  {
    float v8 = *(float *)a3;
    if (v4 >= *(float *)a3)
    {
      if (v8 < v4) {
        return result;
      }
      int v9 = *(_DWORD *)(a2 + 4);
      int v10 = *(_DWORD *)(a3 + 4);
      if (v9 >= v10) {
        return result;
      }
    }
    else
    {
      int v9 = *(_DWORD *)(a2 + 4);
      int v10 = *(_DWORD *)(a3 + 4);
    }
    *(float *)a2 = v8;
    *(float *)a3 = v4;
    *(_DWORD *)(a2 + 4) = v10;
    *(_DWORD *)(a3 + 4) = v9;
    float v11 = *(float *)result;
    float v12 = *(float *)a2;
    if (*(float *)result >= *(float *)a2)
    {
      if (v12 >= v11)
      {
        int v19 = *(_DWORD *)(result + 4);
        int v20 = *(_DWORD *)(a2 + 4);
        if (v19 < v20)
        {
          *(float *)uint64_t result = v12;
          *(float *)a2 = v11;
          *(_DWORD *)(result + 4) = v20;
          *(_DWORD *)(a2 + 4) = v19;
        }
      }
    }
    else
    {
      int v13 = *(_DWORD *)(result + 4);
      int v14 = *(_DWORD *)(a2 + 4);
      *(float *)uint64_t result = v12;
      *(float *)a2 = v11;
      *(_DWORD *)(result + 4) = v14;
      *(_DWORD *)(a2 + 4) = v13;
    }
  }
  else
  {
    float v5 = *(float *)a3;
    if (v4 < *(float *)a3)
    {
      int v6 = *(_DWORD *)(a3 + 4);
LABEL_6:
      *(float *)uint64_t result = v5;
      *(float *)a3 = v3;
      int v7 = *(_DWORD *)(result + 4);
      *(_DWORD *)(result + 4) = v6;
      *(_DWORD *)(a3 + 4) = v7;
      return result;
    }
    int v15 = *(_DWORD *)(a2 + 4);
    if (v5 >= v4)
    {
      int v6 = *(_DWORD *)(a3 + 4);
      if (v15 < v6) {
        goto LABEL_6;
      }
    }
    *(float *)uint64_t result = v4;
    *(float *)a2 = v3;
    int v16 = *(_DWORD *)(result + 4);
    *(_DWORD *)(result + 4) = v15;
    *(_DWORD *)(a2 + 4) = v16;
    float v17 = *(float *)a3;
    if (v3 >= *(float *)a3)
    {
      if (v17 >= v3)
      {
        int v21 = *(_DWORD *)(a3 + 4);
        if (v16 < v21)
        {
          *(float *)a2 = v17;
          *(float *)a3 = v3;
          *(_DWORD *)(a2 + 4) = v21;
          *(_DWORD *)(a3 + 4) = v16;
        }
      }
    }
    else
    {
      int v18 = *(_DWORD *)(a3 + 4);
      *(float *)a2 = v17;
      *(float *)a3 = v3;
      *(_DWORD *)(a2 + 4) = v18;
      *(_DWORD *)(a3 + 4) = v16;
    }
  }
  return result;
}

BOOL sub_1C4ACD2F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v19 = *(float *)a1;
      float v20 = *(float *)(a2 - 8);
      if (*(float *)a1 < v20)
      {
        int v21 = *(_DWORD *)(a1 + 4);
        int v22 = *(_DWORD *)(a2 - 4);
LABEL_24:
        *(float *)a1 = v20;
        *(float *)(a2 - 8) = v19;
        *(_DWORD *)(a1 + 4) = v22;
        *(_DWORD *)(a2 - 4) = v21;
        return result;
      }
      if (v20 >= v19)
      {
        int v21 = *(_DWORD *)(a1 + 4);
        int v22 = *(_DWORD *)(a2 - 4);
        if (v21 < v22) {
          goto LABEL_24;
        }
      }
      return result;
    case 3:
      sub_1C4ACD190(a1, a1 + 8, a2 - 8);
      return 1;
    case 4:
      sub_1C4ACD190(a1, a1 + 8, a1 + 16);
      float v23 = *(float *)(a1 + 16);
      float v24 = *(float *)(a2 - 8);
      if (v23 >= v24)
      {
        if (v24 < v23) {
          return 1;
        }
        int v25 = *(_DWORD *)(a1 + 20);
        int v26 = *(_DWORD *)(a2 - 4);
        if (v25 >= v26) {
          return 1;
        }
      }
      else
      {
        int v25 = *(_DWORD *)(a1 + 20);
        int v26 = *(_DWORD *)(a2 - 4);
      }
      *(float *)(a1 + 16) = v24;
      *(float *)(a2 - 8) = v23;
      *(_DWORD *)(a1 + 20) = v26;
      *(_DWORD *)(a2 - 4) = v25;
      float v27 = *(float *)(a1 + 8);
      float v28 = *(float *)(a1 + 16);
      if (v27 >= v28)
      {
        if (v28 < v27) {
          return 1;
        }
        int v29 = *(_DWORD *)(a1 + 12);
        int v30 = *(_DWORD *)(a1 + 20);
        if (v29 >= v30) {
          return 1;
        }
      }
      else
      {
        int v29 = *(_DWORD *)(a1 + 12);
        int v30 = *(_DWORD *)(a1 + 20);
      }
      *(float *)(a1 + 8) = v28;
      *(float *)(a1 + 16) = v27;
      *(_DWORD *)(a1 + 12) = v30;
      *(_DWORD *)(a1 + 20) = v29;
      float v31 = *(float *)a1;
      if (*(float *)a1 < v28)
      {
        int v32 = *(_DWORD *)(a1 + 4);
LABEL_46:
        *(float *)a1 = v28;
        *(float *)(a1 + 8) = v31;
        *(_DWORD *)(a1 + 4) = v30;
        BOOL result = 1;
        *(_DWORD *)(a1 + 12) = v32;
        return result;
      }
      if (v28 >= v31)
      {
        int v32 = *(_DWORD *)(a1 + 4);
        if (v32 < v30) {
          goto LABEL_46;
        }
      }
      return 1;
    case 5:
      sub_1C4ACD614(a1, a1 + 8, a1 + 16, a1 + 24, a2 - 8);
      return 1;
    default:
      uint64_t v6 = a1 + 16;
      sub_1C4ACD190(a1, a1 + 8, a1 + 16);
      uint64_t v7 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      while (2)
      {
        float v11 = *(float *)v6;
        float v12 = *(float *)v7;
        if (*(float *)v6 >= *(float *)v7)
        {
          if (v12 < v11) {
            goto LABEL_7;
          }
          int v14 = *(_DWORD *)(v6 + 4);
          int v13 = *(_DWORD *)(v7 + 4);
          if (v14 >= v13) {
            goto LABEL_7;
          }
        }
        else
        {
          int v13 = *(_DWORD *)(v7 + 4);
          int v14 = *(_DWORD *)(v6 + 4);
        }
        *(float *)uint64_t v7 = v11;
        *(_DWORD *)(v7 + 4) = v14;
        uint64_t v10 = a1;
        if (v6 == a1) {
          goto LABEL_6;
        }
        uint64_t v15 = v8;
        while (2)
        {
          uint64_t v17 = a1 + v15;
          float v18 = *(float *)(a1 + v15 + 8);
          if (v18 < v12)
          {
            int v16 = *(_DWORD *)(v17 + 12);
LABEL_13:
            v6 -= 8;
            *(float *)(v17 + 16) = v18;
            *(_DWORD *)(a1 + v15 + 20) = v16;
            v15 -= 8;
            if (v15 == -16)
            {
              uint64_t v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v12 >= v18)
        {
          int v16 = *(_DWORD *)(a1 + v15 + 12);
          if (v16 >= v13)
          {
            uint64_t v10 = v6;
            goto LABEL_6;
          }
          goto LABEL_13;
        }
        uint64_t v10 = a1 + v15 + 16;
LABEL_6:
        *(float *)uint64_t v10 = v12;
        *(_DWORD *)(v10 + 4) = v13;
        if (++v9 == 8) {
          return v7 + 8 == a2;
        }
LABEL_7:
        uint64_t v6 = v7;
        v8 += 8;
        v7 += 8;
        if (v7 != a2) {
          continue;
        }
        return 1;
      }
  }
}

uint64_t sub_1C4ACD614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_1C4ACD190(a1, a2, a3);
  float v11 = *(float *)a3;
  float v12 = *(float *)a4;
  if (*(float *)a3 >= *(float *)a4)
  {
    if (v12 < v11) {
      goto LABEL_16;
    }
    int v13 = *(_DWORD *)(a3 + 4);
    int v14 = *(_DWORD *)(a4 + 4);
    if (v13 >= v14) {
      goto LABEL_16;
    }
  }
  else
  {
    int v13 = *(_DWORD *)(a3 + 4);
    int v14 = *(_DWORD *)(a4 + 4);
  }
  *(float *)a3 = v12;
  *(float *)a4 = v11;
  *(_DWORD *)(a3 + 4) = v14;
  *(_DWORD *)(a4 + 4) = v13;
  float v15 = *(float *)a2;
  float v16 = *(float *)a3;
  if (*(float *)a2 >= *(float *)a3)
  {
    if (v16 < v15) {
      goto LABEL_16;
    }
    int v17 = *(_DWORD *)(a2 + 4);
    int v18 = *(_DWORD *)(a3 + 4);
    if (v17 >= v18) {
      goto LABEL_16;
    }
  }
  else
  {
    int v17 = *(_DWORD *)(a2 + 4);
    int v18 = *(_DWORD *)(a3 + 4);
  }
  *(float *)a2 = v16;
  *(float *)a3 = v15;
  *(_DWORD *)(a2 + 4) = v18;
  *(_DWORD *)(a3 + 4) = v17;
  float v19 = *(float *)a1;
  float v20 = *(float *)a2;
  if (*(float *)a1 < *(float *)a2)
  {
    int v21 = *(_DWORD *)(a1 + 4);
    int v22 = *(_DWORD *)(a2 + 4);
LABEL_7:
    *(float *)a1 = v20;
    *(float *)a2 = v19;
    *(_DWORD *)(a1 + 4) = v22;
    *(_DWORD *)(a2 + 4) = v21;
    goto LABEL_16;
  }
  if (v20 >= v19)
  {
    int v21 = *(_DWORD *)(a1 + 4);
    int v22 = *(_DWORD *)(a2 + 4);
    if (v21 < v22) {
      goto LABEL_7;
    }
  }
LABEL_16:
  float v23 = *(float *)a4;
  float v24 = *(float *)a5;
  if (*(float *)a4 >= *(float *)a5)
  {
    if (v24 < v23) {
      return result;
    }
    int v25 = *(_DWORD *)(a4 + 4);
    int v26 = *(_DWORD *)(a5 + 4);
    if (v25 >= v26) {
      return result;
    }
  }
  else
  {
    int v25 = *(_DWORD *)(a4 + 4);
    int v26 = *(_DWORD *)(a5 + 4);
  }
  *(float *)a4 = v24;
  *(float *)a5 = v23;
  *(_DWORD *)(a4 + 4) = v26;
  *(_DWORD *)(a5 + 4) = v25;
  float v27 = *(float *)a3;
  float v28 = *(float *)a4;
  if (*(float *)a3 >= *(float *)a4)
  {
    if (v28 < v27) {
      return result;
    }
    int v29 = *(_DWORD *)(a3 + 4);
    int v30 = *(_DWORD *)(a4 + 4);
    if (v29 >= v30) {
      return result;
    }
  }
  else
  {
    int v29 = *(_DWORD *)(a3 + 4);
    int v30 = *(_DWORD *)(a4 + 4);
  }
  *(float *)a3 = v28;
  *(float *)a4 = v27;
  *(_DWORD *)(a3 + 4) = v30;
  *(_DWORD *)(a4 + 4) = v29;
  float v31 = *(float *)a2;
  float v32 = *(float *)a3;
  if (*(float *)a2 >= *(float *)a3)
  {
    if (v32 < v31) {
      return result;
    }
    int v33 = *(_DWORD *)(a2 + 4);
    int v34 = *(_DWORD *)(a3 + 4);
    if (v33 >= v34) {
      return result;
    }
  }
  else
  {
    int v33 = *(_DWORD *)(a2 + 4);
    int v34 = *(_DWORD *)(a3 + 4);
  }
  *(float *)a2 = v32;
  *(float *)a3 = v31;
  *(_DWORD *)(a2 + 4) = v34;
  *(_DWORD *)(a3 + 4) = v33;
  float v35 = *(float *)a1;
  float v36 = *(float *)a2;
  if (*(float *)a1 < *(float *)a2)
  {
    int v37 = *(_DWORD *)(a1 + 4);
    int v38 = *(_DWORD *)(a2 + 4);
LABEL_24:
    *(float *)a1 = v36;
    *(float *)a2 = v35;
    *(_DWORD *)(a1 + 4) = v38;
    *(_DWORD *)(a2 + 4) = v37;
    return result;
  }
  if (v36 >= v35)
  {
    int v37 = *(_DWORD *)(a1 + 4);
    int v38 = *(_DWORD *)(a2 + 4);
    if (v37 < v38) {
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t sub_1C4ACD844(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 248;
    sub_1C4AC89C8(i - 248);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1C4ACD898(uint64_t a1, int *a2, int *a3)
{
  if (!*(void *)(a1 + 16)) {
    goto LABEL_50;
  }
  uint64_t v6 = *(uint64_t **)a1;
  uint64_t v8 = (uint64_t **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = a1 + 8;
  *(void *)(v7 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  int v9 = v6[1] ? (int *)v6[1] : (int *)v6;
  uint64_t v31 = a1;
  int v33 = v9;
  if (!v9) {
    goto LABEL_50;
  }
  uint64_t v10 = (int *)*((void *)v9 + 2);
  if (v10)
  {
    float v11 = *(int **)v10;
    if (*(int **)v10 == v9)
    {
      *(void *)uint64_t v10 = 0;
      while (1)
      {
        int v30 = (int *)*((void *)v10 + 1);
        if (!v30) {
          break;
        }
        do
        {
          uint64_t v10 = v30;
          int v30 = *(int **)v30;
        }
        while (v30);
      }
    }
    else
    {
      for (*((void *)v10 + 1) = 0; v11; float v11 = (int *)*((void *)v10 + 1))
      {
        do
        {
          uint64_t v10 = v11;
          float v11 = *(int **)v11;
        }
        while (v11);
      }
    }
  }
  float v32 = v10;
  if (a2 == a3)
  {
    uint64_t v21 = a1;
    sub_1C494AC4C(a1, v9);
    if (!v10) {
      goto LABEL_50;
    }
    goto LABEL_47;
  }
  float v12 = a2;
  do
  {
    v9[8] = v12[8];
    if (v9 != v12)
    {
      sub_1C4ACDC74((uint64_t)(v9 + 10), *((char **)v12 + 5), *((char **)v12 + 6), (uint64_t)(*((void *)v12 + 6) - *((void *)v12 + 5)) >> 3);
      int v9 = v33;
    }
    int v13 = *v8;
    int v14 = (int **)(a1 + 8);
    float v15 = (int **)(a1 + 8);
    if (!*v8)
    {
LABEL_20:
      *(void *)int v9 = 0;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = v14;
      float *v15 = v9;
      uint64_t v16 = **(void **)a1;
      if (!v16) {
        goto LABEL_22;
      }
LABEL_21:
      *(void *)a1 = v16;
      int v9 = *v15;
      goto LABEL_22;
    }
    do
    {
      while (1)
      {
        int v14 = (int **)v13;
        if (v9[8] >= *((_DWORD *)v13 + 8)) {
          break;
        }
        int v13 = (uint64_t *)*v13;
        float v15 = v14;
        if (!*v14) {
          goto LABEL_20;
        }
      }
      int v13 = (uint64_t *)v13[1];
    }
    while (v13);
    float v15 = v14 + 1;
    *(void *)int v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v14;
    v14[1] = v9;
    uint64_t v16 = **(void **)a1;
    if (v16) {
      goto LABEL_21;
    }
LABEL_22:
    sub_1C4949FD4(*(uint64_t **)(a1 + 8), (uint64_t *)v9);
    ++*(void *)(a1 + 16);
    int v9 = v32;
    int v33 = v32;
    if (v32)
    {
      uint64_t v10 = (int *)*((void *)v32 + 2);
      if (v10)
      {
        int v17 = *(int **)v10;
        if (*(int **)v10 == v32)
        {
          *(void *)uint64_t v10 = 0;
          while (1)
          {
            float v20 = (int *)*((void *)v10 + 1);
            if (!v20) {
              break;
            }
            do
            {
              uint64_t v10 = v20;
              float v20 = *(int **)v20;
            }
            while (v20);
          }
        }
        else
        {
          for (*((void *)v10 + 1) = 0; v17; int v17 = (int *)*((void *)v10 + 1))
          {
            do
            {
              uint64_t v10 = v17;
              int v17 = *(int **)v17;
            }
            while (v17);
          }
        }
      }
      float v32 = v10;
      int v18 = (int *)*((void *)v12 + 1);
      if (!v18)
      {
        do
        {
LABEL_33:
          a2 = (int *)*((void *)v12 + 2);
          BOOL v19 = *(void *)a2 == (void)v12;
          float v12 = a2;
        }
        while (!v19);
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v10 = 0;
      int v18 = (int *)*((void *)v12 + 1);
      if (!v18) {
        goto LABEL_33;
      }
    }
    do
    {
      a2 = v18;
      int v18 = *(int **)v18;
    }
    while (v18);
LABEL_35:
    if (!v9) {
      break;
    }
    float v12 = a2;
  }
  while (a2 != a3);
  uint64_t v21 = v31;
  sub_1C494AC4C(v31, v9);
  if (!v10) {
    goto LABEL_50;
  }
LABEL_47:
  for (uint64_t i = (int *)*((void *)v10 + 2); i; uint64_t i = (int *)*((void *)i + 2))
    uint64_t v10 = i;
  sub_1C494AC4C(v21, v10);
LABEL_50:
  if (a2 != a3)
  {
    while (2)
    {
      sub_1C4AC9540(a1, a2 + 8, (uint64_t)&v31);
      float v23 = (uint64_t *)v31;
      float v24 = *(uint64_t ***)(a1 + 8);
      int v25 = (uint64_t **)(a1 + 8);
      int v26 = (uint64_t **)(a1 + 8);
      if (v24)
      {
        do
        {
          while (1)
          {
            int v25 = v24;
            if (*(_DWORD *)(v31 + 32) >= *((_DWORD *)v24 + 8)) {
              break;
            }
            float v24 = (uint64_t **)*v24;
            int v26 = v25;
            if (!*v25) {
              goto LABEL_58;
            }
          }
          float v24 = (uint64_t **)v24[1];
        }
        while (v24);
        int v26 = v25 + 1;
        *(void *)uint64_t v31 = 0;
        v23[1] = 0;
        v23[2] = (uint64_t)v25;
        v25[1] = v23;
        uint64_t v27 = **(void **)a1;
        if (!v27)
        {
LABEL_60:
          sub_1C4949FD4(*(uint64_t **)(a1 + 8), v23);
          ++*(void *)(a1 + 16);
          float v28 = (int *)*((void *)a2 + 1);
          if (v28)
          {
            do
            {
              int v29 = v28;
              float v28 = *(int **)v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              int v29 = (int *)*((void *)a2 + 2);
              BOOL v19 = *(void *)v29 == (void)a2;
              a2 = v29;
            }
            while (!v19);
          }
          a2 = v29;
          if (v29 == a3) {
            return;
          }
          continue;
        }
      }
      else
      {
LABEL_58:
        *(void *)uint64_t v31 = 0;
        v23[1] = 0;
        v23[2] = (uint64_t)v25;
        char *v26 = v23;
        uint64_t v27 = **(void **)a1;
        if (!v27) {
          goto LABEL_60;
        }
      }
      break;
    }
    *(void *)a1 = v27;
    float v23 = *v26;
    goto LABEL_60;
  }
}

void sub_1C4ACDC08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4ACDC1C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4ACDC1C(uint64_t a1)
{
  sub_1C494AC4C(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_1C494AC4C(*(void *)a1, v2);
  }
  return a1;
}

_DWORD *sub_1C4ACDC74(uint64_t a1, char *a2, char *a3, size_t __sz)
{
  uint64_t v8 = *(void *)(a1 + 16);
  int v9 = *(_DWORD **)a1;
  uint64_t result = v9;
  if (__sz <= (v8 - (uint64_t)v9) >> 3)
  {
    int v18 = *(_DWORD **)(a1 + 8);
    int v17 = (void *)(a1 + 8);
    int v14 = v18;
    int64_t v19 = (char *)v18 - (char *)v9;
    unint64_t v20 = ((char *)v18 - (char *)v9) >> 3;
    if (v20 < __sz)
    {
      uint64_t v21 = &a2[8 * v20];
      if (v14 == v9) {
        goto LABEL_18;
      }
      if ((unint64_t)(v19 - 8) >= 0x78)
      {
        unint64_t v29 = (v19 & 0xFFFFFFFFFFFFFFF8) - 4;
        int v30 = (char *)v9 + v29;
        uint64_t v31 = &a2[v29];
        float v32 = a2 + 4;
        BOOL v33 = v9 + 1 >= (_DWORD *)&a2[v19 & 0xFFFFFFFFFFFFFFF8] || v32 >= (char *)v9 + (v19 & 0xFFFFFFFFFFFFFFF8);
        char v34 = !v33;
        int v22 = a2;
        if ((v30 <= a2 || v9 >= (_DWORD *)v31) && (v34 & 1) == 0)
        {
          unint64_t v36 = ((unint64_t)(v19 - 8) >> 3) + 1;
          uint64_t v37 = 2 * (v36 & 0x3FFFFFFFFFFFFFF8);
          uint64_t result = &v9[v37];
          int v22 = &a2[v37 * 4];
          int v38 = (long long *)(a2 + 32);
          float v39 = v9 + 8;
          uint64_t v40 = v36 & 0x3FFFFFFFFFFFFFF8;
          do
          {
            long long v42 = *(v38 - 2);
            long long v41 = *(v38 - 1);
            long long v44 = *v38;
            long long v43 = v38[1];
            v38 += 4;
            *(v39 - 2) = v42;
            *(v39 - 1) = v41;
            _OWORD *v39 = v44;
            v39[1] = v43;
            v39 += 4;
            v40 -= 8;
          }
          while (v40);
          if (v36 == (v36 & 0x3FFFFFFFFFFFFFF8))
          {
LABEL_18:
            if (v21 == a3)
            {
              int64_t v16 = 0;
              goto LABEL_51;
            }
            float v23 = &a2[v19];
            unint64_t v24 = a3 - &a2[v19] - 8;
            if (v24 >= 0x38)
            {
              unint64_t v45 = (char *)v14 - v23;
              int v25 = (char *)v14;
              if (v45 >= 0x20)
              {
                uint64_t v46 = (v24 >> 3) + 1;
                uint64_t v47 = 2 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
                v21 += v47 * 4;
                int v25 = (char *)&v14[v47];
                float v48 = v14 + 4;
                float v49 = &a2[8 * v20 + 16];
                uint64_t v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v51 = *(_OWORD *)v49;
                  *(v48 - 1) = *((_OWORD *)v49 - 1);
                  *float v48 = v51;
                  v48 += 2;
                  v49 += 32;
                  v50 -= 4;
                }
                while (v50);
                if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_50;
                }
              }
            }
            else
            {
              int v25 = (char *)v14;
            }
            do
            {
              uint64_t v52 = *(void *)v21;
              v21 += 8;
              *(void *)int v25 = v52;
              v25 += 8;
            }
            while (v21 != a3);
LABEL_50:
            int64_t v16 = v25 - (char *)v14;
            goto LABEL_51;
          }
        }
      }
      else
      {
        int v22 = a2;
      }
      do
      {
        *uint64_t result = *(_DWORD *)v22;
        result[1] = *((_DWORD *)v22 + 1);
        v22 += 8;
        result += 2;
      }
      while (v22 != v21);
      goto LABEL_18;
    }
    if (a2 == a3)
    {
      uint64_t v27 = (char *)v9;
    }
    else
    {
      unint64_t v26 = a3 - a2 - 8;
      if (v26 < 0x78
        || ((unint64_t v53 = v26 & 0xFFFFFFFFFFFFFFF8 | 4,
             int v54 = (char *)v9 + v53,
             int v55 = &a2[v53],
             unint64_t v56 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8,
             v9 + 1 < (_DWORD *)&a2[v56])
          ? (BOOL v57 = a2 + 4 >= (char *)v9 + v56)
          : (BOOL v57 = 1),
            v57 ? (char v58 = 0) : (char v58 = 1),
            v54 > a2 ? (BOOL v59 = v9 >= (_DWORD *)v55) : (BOOL v59 = 1),
            !v59 || (v58 & 1) != 0))
      {
        uint64_t v27 = (char *)v9;
        float v28 = a2;
      }
      else
      {
        uint64_t v60 = (v26 >> 3) + 1;
        uint64_t v61 = 2 * (v60 & 0x3FFFFFFFFFFFFFF8);
        uint64_t v27 = (char *)&v9[v61];
        float v28 = &a2[v61 * 4];
        int v62 = (long long *)(a2 + 32);
        BOOL v63 = v9 + 8;
        uint64_t v64 = v60 & 0x3FFFFFFFFFFFFFF8;
        do
        {
          long long v66 = *(v62 - 2);
          long long v65 = *(v62 - 1);
          long long v68 = *v62;
          long long v67 = v62[1];
          v62 += 4;
          *(v63 - 2) = v66;
          *(v63 - 1) = v65;
          *BOOL v63 = v68;
          v63[1] = v67;
          v63 += 4;
          v64 -= 8;
        }
        while (v64);
        if (v60 == (v60 & 0x3FFFFFFFFFFFFFF8)) {
          goto LABEL_28;
        }
      }
      do
      {
        *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
        *((_DWORD *)v27 + 1) = *((_DWORD *)v28 + 1);
        v27 += 8;
        v28 += 8;
      }
      while (v28 != a3);
    }
LABEL_28:
    int64_t v16 = v27 - (char *)v9;
    int v14 = v9;
    goto LABEL_51;
  }
  if (v9)
  {
    *(void *)(a1 + 8) = v9;
    operator delete(v9);
    uint64_t v8 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  if (__sz >> 61) {
    goto LABEL_68;
  }
  uint64_t v11 = v8 >> 2;
  if (v8 >> 2 <= __sz) {
    uint64_t v11 = __sz;
  }
  BOOL v33 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
  unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v33) {
    unint64_t v12 = v11;
  }
  if (v12 >> 61) {
LABEL_68:
  }
    sub_1C494A220();
  uint64_t v13 = 2 * v12;
  uint64_t result = operator new(8 * v12);
  int v14 = result;
  *(void *)a1 = result;
  *(void *)(a1 + 8) = result;
  *(void *)(a1 + 16) = &result[v13];
  float v15 = (char *)result;
  if (a2 != a3)
  {
    uint64_t result = memcpy(result, a2, (a3 - a2) & 0xFFFFFFFFFFFFFFF8);
    float v15 = (char *)v14 + ((a3 - a2) & 0xFFFFFFFFFFFFFFF8);
  }
  int64_t v16 = v15 - (char *)v14;
  int v17 = (void *)(a1 + 8);
LABEL_51:
  *int v17 = (char *)v14 + v16;
  return result;
}

uint64_t **sub_1C4ACDFC4(void *a1, uint64_t a2)
{
  unint64_t v2 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x108421084210842) {
    sub_1C494A220();
  }
  if (0xDEF7BDEF7BDEF7BELL * ((uint64_t)(a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0xDEF7BDEF7BDEF7BELL * ((uint64_t)(a1[2] - *a1) >> 3);
  }
  if (0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x84210842108421) {
    unint64_t v6 = 0x108421084210842;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x108421084210842) {
      sub_1C4949AA8();
    }
    uint64_t v7 = (char *)operator new(248 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  int v14 = (uint64_t **)&v7[248 * v2];
  *((void *)&v15 + 1) = &v7[248 * v6];
  sub_1C4AC8B58(v14, a2);
  uint64_t v8 = 0;
  uint64_t v10 = (void *)*a1;
  for (uint64_t i = a1[1]; (void *)(i + v8 * 8) != v10; sub_1C4AC8B58(&v14[v8], v8 * 8 + i))
    v8 -= 31;
  unint64_t v12 = (void *)*a1;
  uint64_t v11 = a1[1];
  *a1 = &v14[v8];
  *(void *)&long long v15 = v14 + 31;
  for (*(_OWORD *)(a1 + 1) = v15; (void *)v11 != v12; uint64_t v11 = sub_1C4AC89C8(v11 - 248))
    ;
  if (v12) {
    operator delete(v12);
  }
  return v14 + 31;
}

void sub_1C4ACE138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1C4ACD844((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4ACE17C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
void sub_1C4ACF364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1C4AC89C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4ACF3FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 80);
  if (v6 == v7)
  {
    float v8 = *(float *)(a2 + 192);
    float v9 = v8;
    uint64_t v10 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
    if (v10)
    {
LABEL_3:
      double v11 = *(float *)(a1 + 192);
      float v12 = v11 / pow((double)(unint64_t)(v10 >> 2), 0.330993);
      uint64_t v14 = *(void *)(a3 + 72);
      uint64_t v13 = *(void *)(a3 + 80);
      if (v9 > v12) {
        goto LABEL_4;
      }
LABEL_11:
      uint64_t v19 = v13 - v14;
      if (v19)
      {
        double v20 = *(float *)(a3 + 192);
        float v21 = v20 / pow((double)(unint64_t)(v19 >> 2), 0.330993);
        uint64_t v22 = v6 - v7;
        if (v6 == v7) {
          goto LABEL_14;
        }
      }
      else
      {
        float v21 = *(float *)(a3 + 192);
        uint64_t v22 = v6 - v7;
        if (v6 == v7)
        {
LABEL_14:
          if (v21 <= v8) {
            return;
          }
          sub_1C4AC8B58(v35, a2);
          sub_1C4ACFB98(a2, a3);
          sub_1C4ACFB98(a3, (uint64_t)v35);
          sub_1C4AC89C8((uint64_t)v35);
          uint64_t v23 = *(void *)(a2 + 80) - *(void *)(a2 + 72);
          if (v23)
          {
            double v24 = *(float *)(a2 + 192);
            float v25 = v24 / pow((double)(unint64_t)(v23 >> 2), 0.330993);
            uint64_t v26 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
            if (v26) {
              goto LABEL_17;
            }
          }
          else
          {
            float v25 = *(float *)(a2 + 192);
            uint64_t v26 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
            if (v26)
            {
LABEL_17:
              double v27 = *(float *)(a1 + 192);
              float v28 = v27 / pow((double)(unint64_t)(v26 >> 2), 0.330993);
              if (v25 <= v28) {
                return;
              }
LABEL_29:
              sub_1C4AC8B58(v35, a1);
              sub_1C4ACFB98(a1, a2);
              sub_1C4ACFB98(a2, (uint64_t)v35);
              goto LABEL_33;
            }
          }
          if (v25 <= *(float *)(a1 + 192)) {
            return;
          }
          goto LABEL_29;
        }
      }
      float v8 = v8 / pow((double)(unint64_t)(v22 >> 2), 0.330993);
      goto LABEL_14;
    }
  }
  else
  {
    float v8 = *(float *)(a2 + 192);
    float v9 = v8 / pow((double)(unint64_t)((v6 - v7) >> 2), 0.330993);
    uint64_t v10 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
    if (v10) {
      goto LABEL_3;
    }
  }
  uint64_t v14 = *(void *)(a3 + 72);
  uint64_t v13 = *(void *)(a3 + 80);
  if (v9 <= *(float *)(a1 + 192)) {
    goto LABEL_11;
  }
LABEL_4:
  uint64_t v15 = v13 - v14;
  if (v15)
  {
    double v16 = *(float *)(a3 + 192);
    float v17 = v16 / pow((double)(unint64_t)(v15 >> 2), 0.330993);
    uint64_t v18 = v6 - v7;
    if (v6 == v7) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  float v17 = *(float *)(a3 + 192);
  uint64_t v18 = v6 - v7;
  if (v6 != v7) {
LABEL_6:
  }
    float v8 = v8 / pow((double)(unint64_t)(v18 >> 2), 0.330993);
LABEL_7:
  if (v17 > v8)
  {
    sub_1C4AC8B58(v35, a1);
    sub_1C4ACFB98(a1, a3);
    sub_1C4ACFB98(a3, (uint64_t)v35);
LABEL_33:
    sub_1C4AC89C8((uint64_t)v35);
    return;
  }
  sub_1C4AC8B58(v35, a1);
  sub_1C4ACFB98(a1, a2);
  sub_1C4ACFB98(a2, (uint64_t)v35);
  sub_1C4AC89C8((uint64_t)v35);
  uint64_t v29 = *(void *)(a3 + 80) - *(void *)(a3 + 72);
  if (v29)
  {
    double v30 = *(float *)(a3 + 192);
    float v31 = v30 / pow((double)(unint64_t)(v29 >> 2), 0.330993);
    uint64_t v32 = *(void *)(a2 + 80) - *(void *)(a2 + 72);
    if (v32) {
      goto LABEL_21;
    }
LABEL_31:
    if (v31 <= *(float *)(a2 + 192)) {
      return;
    }
    goto LABEL_32;
  }
  float v31 = *(float *)(a3 + 192);
  uint64_t v32 = *(void *)(a2 + 80) - *(void *)(a2 + 72);
  if (!v32) {
    goto LABEL_31;
  }
LABEL_21:
  double v33 = *(float *)(a2 + 192);
  float v34 = v33 / pow((double)(unint64_t)(v32 >> 2), 0.330993);
  if (v31 > v34)
  {
LABEL_32:
    sub_1C4AC8B58(v35, a2);
    sub_1C4ACFB98(a2, a3);
    sub_1C4ACFB98(a3, (uint64_t)v35);
    goto LABEL_33;
  }
}

void sub_1C4ACF774(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4AC89C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4ACF788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4AC89C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4ACF79C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4AC89C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4ACF7B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4AC89C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4ACF7C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4AC89C8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4ACF7D8(uint64_t a1, uint64_t a2)
{
  BOOL v4 = 1;
  switch(0xEF7BDEF7BDEF7BDFLL * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      uint64_t v5 = *(void *)(a2 - 168) - *(void *)(a2 - 176);
      if (v5)
      {
        double v6 = *(float *)(a2 - 56);
        float v7 = v6 / pow((double)(unint64_t)(v5 >> 2), 0.330993);
        uint64_t v8 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
        if (v8) {
          goto LABEL_4;
        }
      }
      else
      {
        float v7 = *(float *)(a2 - 56);
        uint64_t v8 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
        if (v8)
        {
LABEL_4:
          double v9 = *(float *)(a1 + 192);
          float v10 = v9 / pow((double)(unint64_t)(v8 >> 2), 0.330993);
          if (v7 <= v10) {
            return 1;
          }
LABEL_33:
          uint64_t v29 = a2 - 248;
          sub_1C4AC8B58(v31, a1);
          sub_1C4ACFB98(a1, v29);
          sub_1C4ACFB98(v29, (uint64_t)v31);
          sub_1C4AC89C8((uint64_t)v31);
          return 1;
        }
      }
      if (v7 <= *(float *)(a1 + 192)) {
        return 1;
      }
      goto LABEL_33;
    case 3uLL:
      sub_1C4ACF3FC(a1, a1 + 248, a2 - 248);
      return v4;
    case 4uLL:
      sub_1C4AD04A8(a1, a1 + 248, a1 + 496, a2 - 248);
      return v4;
    case 5uLL:
      sub_1C4AD073C(a1, a1 + 248, a1 + 496, a1 + 744, a2 - 248);
      return v4;
    default:
      uint64_t v11 = a1 + 496;
      sub_1C4ACF3FC(a1, a1 + 248, a1 + 496);
      uint64_t v12 = a1 + 744;
      if (a1 + 744 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      while (2)
      {
        uint64_t v15 = *(void *)(v12 + 80) - *(void *)(v12 + 72);
        if (v15)
        {
          double v16 = *(float *)(v12 + 192);
          float v17 = v16 / pow((double)(unint64_t)(v15 >> 2), 0.330993);
          uint64_t v18 = *(void *)(v11 + 80) - *(void *)(v11 + 72);
          if (v18) {
            goto LABEL_13;
          }
        }
        else
        {
          float v17 = *(float *)(v12 + 192);
          uint64_t v18 = *(void *)(v11 + 80) - *(void *)(v11 + 72);
          if (v18)
          {
LABEL_13:
            double v19 = *(float *)(v11 + 192);
            float v20 = v19 / pow((double)(unint64_t)(v18 >> 2), 0.330993);
            if (v17 > v20) {
              goto LABEL_17;
            }
LABEL_10:
            uint64_t v11 = v12;
            v13 += 248;
            v12 += 248;
            if (v12 == a2) {
              return 1;
            }
            continue;
          }
        }
        break;
      }
      if (v17 <= *(float *)(v11 + 192)) {
        goto LABEL_10;
      }
LABEL_17:
      sub_1C4AC8B58(v31, v12);
      uint64_t v21 = v13;
      while (1)
      {
        sub_1C4ACFB98(a1 + v21 + 744, a1 + v21 + 496);
        if (v21 == -496) {
          break;
        }
        if (v33 == v32)
        {
          float v25 = v34;
          uint64_t v26 = a1 + v21;
          uint64_t v27 = *(void *)(a1 + v21 + 328) - *(void *)(a1 + v21 + 320);
          if (v27) {
            goto LABEL_18;
          }
LABEL_24:
          v21 -= 248;
          if (v25 <= *(float *)(v26 + 440))
          {
LABEL_25:
            uint64_t v28 = a1 + v21 + 744;
            goto LABEL_27;
          }
        }
        else
        {
          double v24 = v34;
          float v25 = v24 / pow((double)(unint64_t)((v33 - v32) >> 2), 0.330993);
          uint64_t v26 = a1 + v21;
          uint64_t v27 = *(void *)(a1 + v21 + 328) - *(void *)(a1 + v21 + 320);
          if (!v27) {
            goto LABEL_24;
          }
LABEL_18:
          double v22 = *(float *)(v26 + 440);
          float v23 = v22 / pow((double)(unint64_t)(v27 >> 2), 0.330993);
          v21 -= 248;
          if (v25 <= v23) {
            goto LABEL_25;
          }
        }
      }
      uint64_t v28 = a1;
LABEL_27:
      sub_1C4ACFB98(v28, (uint64_t)v31);
      if (++v14 != 8)
      {
        sub_1C4AC89C8((uint64_t)v31);
        goto LABEL_10;
      }
      BOOL v4 = v12 + 248 == a2;
      sub_1C4AC89C8((uint64_t)v31);
      return v4;
  }
}

void sub_1C4ACFB44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4AC89C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4ACFB58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4AC89C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4ACFB6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4AC89C8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4ACFB98(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1C4ACFD08((uint64_t **)a1, *(void **)a2, (void *)(a2 + 8));
    sub_1C4ACD898(a1 + 24, *(int **)(a2 + 24), (int *)(a2 + 32));
    sub_1C4AD0230(a1 + 48, *(char ***)(a2 + 48), *(void *)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
    sub_1C499DEE4((void *)(a1 + 72), *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
    sub_1C499DEE4((void *)(a1 + 96), *(char **)(a2 + 96), *(char **)(a2 + 104), (uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 2);
    sub_1C494ACB0((void *)(a1 + 120), *(char **)(a2 + 120), *(char **)(a2 + 128), (uint64_t)(*(void *)(a2 + 128) - *(void *)(a2 + 120)) >> 3);
    unint64_t v4 = *(void *)(a2 + 152);
    if (v4)
    {
      uint64_t v5 = *(void **)(a1 + 144);
      if (v4 > *(void *)(a1 + 160) << 6)
      {
        if (v5)
        {
          operator delete(v5);
          *(void *)(a1 + 144) = 0;
          *(void *)(a1 + 152) = 0;
          *(void *)(a1 + 160) = 0;
          unint64_t v4 = *(void *)(a2 + 152);
        }
        if ((v4 & 0x8000000000000000) != 0) {
          sub_1C494A220();
        }
        unint64_t v6 = ((v4 - 1) >> 6) + 1;
        uint64_t v5 = operator new(8 * v6);
        *(void *)(a1 + 144) = v5;
        *(void *)(a1 + 152) = 0;
        *(void *)(a1 + 160) = v6;
        unint64_t v4 = *(void *)(a2 + 152);
      }
      memmove(v5, *(const void **)(a2 + 144), (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      unint64_t v4 = *(void *)(a2 + 152);
    }
    *(void *)(a1 + 152) = v4;
    sub_1C4AC9E9C(a1 + 168, *(void **)(a2 + 168), (void *)(a2 + 176));
    int v7 = *(_DWORD *)(a2 + 192);
    *(unsigned char *)(a1 + 196) = *(unsigned char *)(a2 + 196);
    *(_DWORD *)(a1 + 192) = v7;
    sub_1C499DEE4((void *)(a1 + 200), *(char **)(a2 + 200), *(char **)(a2 + 208), (uint64_t)(*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 2);
  }
  std::string::operator=((std::string *)(a1 + 224), (const std::string *)(a2 + 224));
  return a1;
}

void sub_1C4ACFD08(uint64_t **a1, void *a2, void *a3)
{
  unint64_t v4 = a2;
  if (!a1[2]) {
    goto LABEL_64;
  }
  unint64_t v6 = *a1;
  uint64_t v8 = a1 + 1;
  int v7 = a1[1];
  *a1 = (uint64_t *)(a1 + 1);
  v7[2] = 0;
  a1[1] = 0;
  a1[2] = 0;
  double v9 = v6[1] ? (uint64_t *)v6[1] : v6;
  float v41 = v9;
  if (!v9) {
    goto LABEL_64;
  }
  float v10 = (char *)v9[2];
  if (v10)
  {
    uint64_t v11 = *(char **)v10;
    if (*(uint64_t **)v10 == v9)
    {
      *(void *)float v10 = 0;
      while (1)
      {
        double v38 = (char *)*((void *)v10 + 1);
        if (!v38) {
          break;
        }
        do
        {
          float v10 = v38;
          double v38 = *(char **)v38;
        }
        while (v38);
      }
    }
    else
    {
      for (*((void *)v10 + 1) = 0; v11; uint64_t v11 = (char *)*((void *)v10 + 1))
      {
        do
        {
          float v10 = v11;
          uint64_t v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v40 = v10;
  if (a2 == a3)
  {
    uint64_t v34 = (uint64_t)a1;
    sub_1C4AC8ACC((uint64_t)a1, (char *)v9);
    if (!v10) {
      goto LABEL_64;
    }
    goto LABEL_61;
  }
  uint64_t v12 = a2;
  do
  {
    std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v12 + 4));
    objc_storeStrong((id *)v9 + 7, (id)v12[7]);
    uint64_t v13 = v41;
    int v14 = *v8;
    uint64_t v15 = a1 + 1;
    double v16 = a1 + 1;
    if (!*v8)
    {
LABEL_34:
      uint64_t *v41 = 0;
      v41[1] = 0;
      void v41[2] = (uint64_t)v15;
      float *v16 = v41;
      uint64_t v29 = (uint64_t *)**a1;
      if (!v29) {
        goto LABEL_36;
      }
LABEL_35:
      *a1 = v29;
      uint64_t v13 = *v16;
      goto LABEL_36;
    }
    int v17 = *((char *)v41 + 55);
    if (v17 >= 0) {
      size_t v18 = *((unsigned __int8 *)v41 + 55);
    }
    else {
      size_t v18 = v41[5];
    }
    if (v17 >= 0) {
      double v19 = v41 + 4;
    }
    else {
      double v19 = (const void *)v41[4];
    }
    do
    {
      while (1)
      {
        uint64_t v15 = (uint64_t **)v14;
        double v22 = (const void *)v14[4];
        float v20 = v14 + 4;
        uint64_t v21 = v22;
        int v23 = *((char *)v20 + 23);
        if (v23 >= 0) {
          size_t v24 = *((unsigned __int8 *)v20 + 23);
        }
        else {
          size_t v24 = v20[1];
        }
        if (v23 >= 0) {
          float v25 = v20;
        }
        else {
          float v25 = v21;
        }
        if (v24 >= v18) {
          size_t v26 = v18;
        }
        else {
          size_t v26 = v24;
        }
        int v27 = memcmp(v19, v25, v26);
        BOOL v28 = v18 < v24;
        if (v27) {
          BOOL v28 = v27 < 0;
        }
        if (!v28) {
          break;
        }
        int v14 = *v15;
        double v16 = v15;
        if (!*v15) {
          goto LABEL_34;
        }
      }
      int v14 = v15[1];
    }
    while (v14);
    double v16 = v15 + 1;
    uint64_t *v41 = 0;
    v41[1] = 0;
    void v41[2] = (uint64_t)v15;
    v15[1] = v41;
    uint64_t v29 = (uint64_t *)**a1;
    if (v29) {
      goto LABEL_35;
    }
LABEL_36:
    sub_1C4949FD4(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    double v9 = (uint64_t *)v40;
    float v41 = (uint64_t *)v40;
    if (v40)
    {
      float v10 = (char *)*((void *)v40 + 2);
      if (v10)
      {
        double v30 = *(char **)v10;
        if (*(char **)v10 == v40)
        {
          *(void *)float v10 = 0;
          while (1)
          {
            uint64_t v33 = (char *)*((void *)v10 + 1);
            if (!v33) {
              break;
            }
            do
            {
              float v10 = v33;
              uint64_t v33 = *(char **)v33;
            }
            while (v33);
          }
        }
        else
        {
          for (*((void *)v10 + 1) = 0; v30; double v30 = (char *)*((void *)v10 + 1))
          {
            do
            {
              float v10 = v30;
              double v30 = *(char **)v30;
            }
            while (v30);
          }
        }
      }
      uint64_t v40 = v10;
      float v31 = (void *)v12[1];
      if (!v31)
      {
        do
        {
LABEL_47:
          unint64_t v4 = (void *)v12[2];
          BOOL v32 = *v4 == (void)v12;
          uint64_t v12 = v4;
        }
        while (!v32);
        goto LABEL_49;
      }
    }
    else
    {
      float v10 = 0;
      float v31 = (void *)v12[1];
      if (!v31) {
        goto LABEL_47;
      }
    }
    do
    {
      unint64_t v4 = v31;
      float v31 = (void *)*v31;
    }
    while (v31);
LABEL_49:
    if (!v9) {
      break;
    }
    uint64_t v12 = v4;
  }
  while (v4 != a3);
  uint64_t v34 = (uint64_t)a1;
  sub_1C4AC8ACC((uint64_t)a1, (char *)v9);
  if (!v10) {
    goto LABEL_64;
  }
LABEL_61:
  for (uint64_t i = (char *)*((void *)v10 + 2); i; uint64_t i = (char *)*((void *)i + 2))
    float v10 = i;
  sub_1C4AC8ACC(v34, v10);
LABEL_64:
  if (v4 != a3)
  {
    do
    {
      sub_1C4AD00AC(a1, (uint64_t)(v4 + 4));
      uint64_t v36 = (void *)v4[1];
      if (v36)
      {
        do
        {
          float v37 = v36;
          uint64_t v36 = (void *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          float v37 = (void *)v4[2];
          BOOL v32 = *v37 == (void)v4;
          unint64_t v4 = v37;
        }
        while (!v32);
      }
      unint64_t v4 = v37;
    }
    while (v37 != a3);
  }
}

void sub_1C4AD0040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4AD0054((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4AD0054(uint64_t a1)
{
  sub_1C4AC8ACC(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_1C4AC8ACC(*(void *)a1, (char *)v2);
  }
  return a1;
}

char *sub_1C4AD00AC(uint64_t **a1, uint64_t a2)
{
  unint64_t v4 = (char **)(a1 + 1);
  uint64_t v5 = (char *)operator new(0x40uLL);
  unint64_t v6 = v5;
  int v23 = v5;
  int v7 = v5 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1C4949ADC(v5 + 32, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    _OWORD *v7 = *(_OWORD *)a2;
    *((void *)v5 + 6) = *(void *)(a2 + 16);
  }
  *((void *)v6 + 7) = *(id *)(a2 + 24);
  uint64_t v8 = *v4;
  double v9 = v4;
  if (!*v4)
  {
LABEL_25:
    *(void *)unint64_t v6 = 0;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = v4;
    *double v9 = v6;
    uint64_t v21 = (uint64_t *)**a1;
    if (!v21) {
      goto LABEL_27;
    }
LABEL_26:
    *a1 = v21;
    unint64_t v6 = *v9;
    goto LABEL_27;
  }
  int v10 = v6[55];
  if (v10 >= 0) {
    unint64_t v11 = v6[55];
  }
  else {
    unint64_t v11 = *((void *)v6 + 5);
  }
  if (v10 < 0) {
    int v7 = (_OWORD *)*((void *)v6 + 4);
  }
  do
  {
    while (1)
    {
      unint64_t v4 = (char **)v8;
      int v14 = (void *)*((void *)v8 + 4);
      uint64_t v12 = v8 + 32;
      uint64_t v13 = v14;
      int v15 = *((char *)v12 + 23);
      unint64_t v16 = v15 >= 0 ? *((unsigned __int8 *)v12 + 23) : v12[1];
      int v17 = v15 >= 0 ? v12 : v13;
      size_t v18 = v16 >= v11 ? v11 : v16;
      int v19 = memcmp(v7, v17, v18);
      BOOL v20 = v11 < v16;
      if (v19) {
        BOOL v20 = v19 < 0;
      }
      if (!v20) {
        break;
      }
      uint64_t v8 = *v4;
      double v9 = v4;
      if (!*v4) {
        goto LABEL_25;
      }
    }
    uint64_t v8 = v4[1];
  }
  while (v8);
  double v9 = v4 + 1;
  *(void *)unint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = v4;
  v4[1] = v6;
  uint64_t v21 = (uint64_t *)**a1;
  if (v21) {
    goto LABEL_26;
  }
LABEL_27:
  sub_1C4949FD4(a1[1], (uint64_t *)v6);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v23;
}

void sub_1C4AD021C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4AC94E8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1C4AD0230(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  unint64_t v6 = a2;
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  int v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      unint64_t v11 = *(char ***)(a1 + 8);
      uint64_t v12 = *(char ***)a1;
      if (v11 != v10)
      {
        uint64_t v13 = *(char ***)(a1 + 8);
        do
        {
          int v15 = *(v13 - 3);
          v13 -= 3;
          int v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          unint64_t v11 = v13;
        }
        while (v13 != v10);
        uint64_t v12 = *(char ***)a1;
      }
      *(void *)(a1 + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_40;
    }
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v21 = 2 * v20;
    if (2 * v20 <= __sz) {
      uint64_t v21 = __sz;
    }
    unint64_t v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL) {
LABEL_40:
    }
      sub_1C494A220();
    uint64_t v23 = 3 * v22;
    size_t v24 = operator new(24 * v22);
    *(void *)a1 = v24;
    *(void *)(a1 + 8) = v24;
    *(void *)(a1 + 16) = &v24[v23];
    float v25 = sub_1C4AC961C(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(void *)(a1 + 8) = v25;
    return;
  }
  unint64_t v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    uint64_t v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      uint64_t v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10) {
          sub_1C499DEE4(v10, *v6, v6[1], (v6[1] - *v6) >> 2);
        }
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      int v10 = *(char ***)(a1 + 8);
    }
    float v25 = sub_1C4AC961C(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    int v19 = *(char ***)a1;
    do
    {
      if (v6 != v10) {
        sub_1C499DEE4(v10, *v6, v6[1], (v6[1] - *v6) >> 2);
      }
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    unint64_t v16 = *(char ***)(a1 + 8);
    if (v16 == v19) {
      goto LABEL_39;
    }
    goto LABEL_35;
  }
  int v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    size_t v26 = v16;
    do
    {
      BOOL v28 = *(v26 - 3);
      v26 -= 3;
      int v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      unint64_t v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(void *)(a1 + 8) = v19;
}

void sub_1C4AD0498(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C4AD04A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C4AD04A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1C4ACF3FC(a1, a2, a3);
  uint64_t v8 = *(void *)(a4 + 80) - *(void *)(a4 + 72);
  if (v8)
  {
    double v9 = *(float *)(a4 + 192);
    float v10 = v9 / pow((double)(unint64_t)(v8 >> 2), 0.330993);
    uint64_t v11 = *(void *)(a3 + 80) - *(void *)(a3 + 72);
    if (v11) {
      goto LABEL_3;
    }
LABEL_6:
    if (v10 <= *(float *)(a3 + 192)) {
      return;
    }
    goto LABEL_7;
  }
  float v10 = *(float *)(a4 + 192);
  uint64_t v11 = *(void *)(a3 + 80) - *(void *)(a3 + 72);
  if (!v11) {
    goto LABEL_6;
  }
LABEL_3:
  double v12 = *(float *)(a3 + 192);
  float v13 = v12 / pow((double)(unint64_t)(v11 >> 2), 0.330993);
  if (v10 <= v13) {
    return;
  }
LABEL_7:
  sub_1C4AC8B58(v26, a3);
  sub_1C4ACFB98(a3, a4);
  sub_1C4ACFB98(a4, (uint64_t)v26);
  sub_1C4AC89C8((uint64_t)v26);
  uint64_t v14 = *(void *)(a3 + 80) - *(void *)(a3 + 72);
  if (v14)
  {
    double v15 = *(float *)(a3 + 192);
    float v16 = v15 / pow((double)(unint64_t)(v14 >> 2), 0.330993);
    uint64_t v17 = *(void *)(a2 + 80) - *(void *)(a2 + 72);
    if (v17) {
      goto LABEL_9;
    }
LABEL_12:
    if (v16 <= *(float *)(a2 + 192)) {
      return;
    }
    goto LABEL_13;
  }
  float v16 = *(float *)(a3 + 192);
  uint64_t v17 = *(void *)(a2 + 80) - *(void *)(a2 + 72);
  if (!v17) {
    goto LABEL_12;
  }
LABEL_9:
  double v18 = *(float *)(a2 + 192);
  float v19 = v18 / pow((double)(unint64_t)(v17 >> 2), 0.330993);
  if (v16 <= v19) {
    return;
  }
LABEL_13:
  sub_1C4AC8B58(v26, a2);
  sub_1C4ACFB98(a2, a3);
  sub_1C4ACFB98(a3, (uint64_t)v26);
  sub_1C4AC89C8((uint64_t)v26);
  uint64_t v20 = *(void *)(a2 + 80) - *(void *)(a2 + 72);
  if (v20)
  {
    double v21 = *(float *)(a2 + 192);
    float v22 = v21 / pow((double)(unint64_t)(v20 >> 2), 0.330993);
    uint64_t v23 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
    if (v23) {
      goto LABEL_15;
    }
LABEL_18:
    if (v22 <= *(float *)(a1 + 192)) {
      return;
    }
    goto LABEL_19;
  }
  float v22 = *(float *)(a2 + 192);
  uint64_t v23 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
  if (!v23) {
    goto LABEL_18;
  }
LABEL_15:
  double v24 = *(float *)(a1 + 192);
  float v25 = v24 / pow((double)(unint64_t)(v23 >> 2), 0.330993);
  if (v22 > v25)
  {
LABEL_19:
    sub_1C4AC8B58(v26, a1);
    sub_1C4ACFB98(a1, a2);
    sub_1C4ACFB98(a2, (uint64_t)v26);
    sub_1C4AC89C8((uint64_t)v26);
  }
}

void sub_1C4AD0700(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4AC89C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4AD0714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4AC89C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4AD0728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4AC89C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4AD073C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1C4AD04A8(a1, a2, a3, a4);
  uint64_t v10 = *(void *)(a5 + 80) - *(void *)(a5 + 72);
  if (v10)
  {
    double v11 = *(float *)(a5 + 192);
    float v12 = v11 / pow((double)(unint64_t)(v10 >> 2), 0.330993);
    uint64_t v13 = *(void *)(a4 + 80) - *(void *)(a4 + 72);
    if (v13) {
      goto LABEL_3;
    }
LABEL_6:
    if (v12 <= *(float *)(a4 + 192)) {
      return;
    }
    goto LABEL_7;
  }
  float v12 = *(float *)(a5 + 192);
  uint64_t v13 = *(void *)(a4 + 80) - *(void *)(a4 + 72);
  if (!v13) {
    goto LABEL_6;
  }
LABEL_3:
  double v14 = *(float *)(a4 + 192);
  float v15 = v14 / pow((double)(unint64_t)(v13 >> 2), 0.330993);
  if (v12 <= v15) {
    return;
  }
LABEL_7:
  sub_1C4AC8B58(v34, a4);
  sub_1C4ACFB98(a4, a5);
  sub_1C4ACFB98(a5, (uint64_t)v34);
  sub_1C4AC89C8((uint64_t)v34);
  uint64_t v16 = *(void *)(a4 + 80) - *(void *)(a4 + 72);
  if (v16)
  {
    double v17 = *(float *)(a4 + 192);
    float v18 = v17 / pow((double)(unint64_t)(v16 >> 2), 0.330993);
    uint64_t v19 = *(void *)(a3 + 80) - *(void *)(a3 + 72);
    if (v19) {
      goto LABEL_9;
    }
LABEL_12:
    if (v18 <= *(float *)(a3 + 192)) {
      return;
    }
    goto LABEL_13;
  }
  float v18 = *(float *)(a4 + 192);
  uint64_t v19 = *(void *)(a3 + 80) - *(void *)(a3 + 72);
  if (!v19) {
    goto LABEL_12;
  }
LABEL_9:
  double v20 = *(float *)(a3 + 192);
  float v21 = v20 / pow((double)(unint64_t)(v19 >> 2), 0.330993);
  if (v18 <= v21) {
    return;
  }
LABEL_13:
  sub_1C4AC8B58(v34, a3);
  sub_1C4ACFB98(a3, a4);
  sub_1C4ACFB98(a4, (uint64_t)v34);
  sub_1C4AC89C8((uint64_t)v34);
  uint64_t v22 = *(void *)(a3 + 80) - *(void *)(a3 + 72);
  if (v22)
  {
    double v23 = *(float *)(a3 + 192);
    float v24 = v23 / pow((double)(unint64_t)(v22 >> 2), 0.330993);
    uint64_t v25 = *(void *)(a2 + 80) - *(void *)(a2 + 72);
    if (v25) {
      goto LABEL_15;
    }
LABEL_18:
    if (v24 <= *(float *)(a2 + 192)) {
      return;
    }
    goto LABEL_19;
  }
  float v24 = *(float *)(a3 + 192);
  uint64_t v25 = *(void *)(a2 + 80) - *(void *)(a2 + 72);
  if (!v25) {
    goto LABEL_18;
  }
LABEL_15:
  double v26 = *(float *)(a2 + 192);
  float v27 = v26 / pow((double)(unint64_t)(v25 >> 2), 0.330993);
  if (v24 <= v27) {
    return;
  }
LABEL_19:
  sub_1C4AC8B58(v34, a2);
  sub_1C4ACFB98(a2, a3);
  sub_1C4ACFB98(a3, (uint64_t)v34);
  sub_1C4AC89C8((uint64_t)v34);
  uint64_t v28 = *(void *)(a2 + 80) - *(void *)(a2 + 72);
  if (v28)
  {
    double v29 = *(float *)(a2 + 192);
    float v30 = v29 / pow((double)(unint64_t)(v28 >> 2), 0.330993);
    uint64_t v31 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
    if (v31) {
      goto LABEL_21;
    }
LABEL_24:
    if (v30 <= *(float *)(a1 + 192)) {
      return;
    }
    goto LABEL_25;
  }
  float v30 = *(float *)(a2 + 192);
  uint64_t v31 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
  if (!v31) {
    goto LABEL_24;
  }
LABEL_21:
  double v32 = *(float *)(a1 + 192);
  float v33 = v32 / pow((double)(unint64_t)(v31 >> 2), 0.330993);
  if (v30 > v33)
  {
LABEL_25:
    sub_1C4AC8B58(v34, a1);
    sub_1C4ACFB98(a1, a2);
    sub_1C4ACFB98(a2, (uint64_t)v34);
    sub_1C4AC89C8((uint64_t)v34);
  }
}

void sub_1C4AD0A4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4AC89C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4AD0A60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4AC89C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4AD0A74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4AC89C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4AD0A88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4AC89C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4AD0A9C()
{
}

void sub_1C4AD0AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2 - 2;
  if (a2 >= 2)
  {
    uint64_t v4 = a3;
    int64_t v6 = v3 >> 1;
    if ((uint64_t)(v3 >> 1) >= (uint64_t)(0xEF7BDEF7BDEF7BDFLL * ((a3 - a1) >> 3)))
    {
      int64_t v8 = (0xDEF7BDEF7BDEF7BELL * ((a3 - a1) >> 3)) | 1;
      uint64_t v9 = a1 + 248 * v8;
      int64_t v10 = 0xDEF7BDEF7BDEF7BELL * ((a3 - a1) >> 3) + 2;
      if (v10 >= a2) {
        goto LABEL_8;
      }
      uint64_t v11 = *(void *)(a1 + 248 * v8 + 80) - *(void *)(a1 + 248 * v8 + 72);
      if (v11)
      {
        double v12 = *(float *)(a1 + 248 * v8 + 192);
        float v13 = v12 / pow((double)(unint64_t)(v11 >> 2), 0.330993);
        uint64_t v14 = *(void *)(v9 + 328) - *(void *)(v9 + 320);
        if (v14) {
          goto LABEL_6;
        }
      }
      else
      {
        float v13 = *(float *)(a1 + 248 * v8 + 192);
        uint64_t v14 = *(void *)(v9 + 328) - *(void *)(v9 + 320);
        if (v14)
        {
LABEL_6:
          double v15 = *(float *)(v9 + 440);
          float v16 = v15 / pow((double)(unint64_t)(v14 >> 2), 0.330993);
          if (v13 <= v16) {
            goto LABEL_8;
          }
          goto LABEL_7;
        }
      }
      if (v13 <= *(float *)(v9 + 440))
      {
LABEL_8:
        uint64_t v17 = *(void *)(v9 + 80) - *(void *)(v9 + 72);
        if (v17)
        {
          double v18 = *(float *)(v9 + 192);
          float v19 = v18 / pow((double)(unint64_t)(v17 >> 2), 0.330993);
          uint64_t v20 = *(void *)(v4 + 80) - *(void *)(v4 + 72);
          if (v20) {
            goto LABEL_10;
          }
        }
        else
        {
          float v19 = *(float *)(v9 + 192);
          uint64_t v20 = *(void *)(v4 + 80) - *(void *)(v4 + 72);
          if (v20)
          {
LABEL_10:
            double v21 = *(float *)(v4 + 192);
            float v22 = v21 / pow((double)(unint64_t)(v20 >> 2), 0.330993);
            if (v19 > v22) {
              return;
            }
LABEL_14:
            sub_1C4AC8B58(v39, v4);
            while (1)
            {
              uint64_t v25 = v4;
              uint64_t v4 = v9;
              sub_1C4ACFB98(v25, v9);
              if (v6 < v8)
              {
LABEL_31:
                sub_1C4ACFB98(v4, (uint64_t)v39);
                sub_1C4AC89C8((uint64_t)v39);
                return;
              }
              uint64_t v26 = 2 * v8;
              uint64_t v27 = (2 * v8) | 1;
              int64_t v8 = v27;
              uint64_t v9 = a1 + 248 * v27;
              int64_t v28 = v26 + 2;
              if (v26 + 2 >= a2) {
                goto LABEL_22;
              }
              uint64_t v29 = *(void *)(a1 + 248 * v27 + 80) - *(void *)(a1 + 248 * v27 + 72);
              if (v29)
              {
                double v30 = *(float *)(a1 + 248 * v27 + 192);
                float v31 = v30 / pow((double)(unint64_t)(v29 >> 2), 0.330993);
                uint64_t v32 = *(void *)(v9 + 328) - *(void *)(v9 + 320);
                if (!v32) {
                  goto LABEL_29;
                }
              }
              else
              {
                float v31 = *(float *)(a1 + 248 * v27 + 192);
                uint64_t v32 = *(void *)(v9 + 328) - *(void *)(v9 + 320);
                if (!v32)
                {
LABEL_29:
                  if (v31 <= *(float *)(v9 + 440)) {
                    goto LABEL_22;
                  }
LABEL_21:
                  v9 += 248;
                  int64_t v8 = v28;
                  goto LABEL_22;
                }
              }
              double v33 = *(float *)(v9 + 440);
              float v34 = v33 / pow((double)(unint64_t)(v32 >> 2), 0.330993);
              if (v31 > v34) {
                goto LABEL_21;
              }
LABEL_22:
              uint64_t v35 = *(void *)(v9 + 80) - *(void *)(v9 + 72);
              if (v35)
              {
                double v36 = *(float *)(v9 + 192);
                float v37 = v36 / pow((double)(unint64_t)(v35 >> 2), 0.330993);
                uint64_t v38 = v41 - v40;
                if (v41 == v40) {
                  goto LABEL_26;
                }
LABEL_15:
                double v23 = v42;
                float v24 = v23 / pow((double)(unint64_t)(v38 >> 2), 0.330993);
                if (v37 > v24) {
                  goto LABEL_31;
                }
              }
              else
              {
                float v37 = *(float *)(v9 + 192);
                uint64_t v38 = v41 - v40;
                if (v41 != v40) {
                  goto LABEL_15;
                }
LABEL_26:
                if (v37 > v42) {
                  goto LABEL_31;
                }
              }
            }
          }
        }
        if (v19 > *(float *)(v4 + 192)) {
          return;
        }
        goto LABEL_14;
      }
LABEL_7:
      v9 += 248;
      int64_t v8 = v10;
      goto LABEL_8;
    }
  }
}

void sub_1C4AD0E04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4AC89C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4AD0E18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4AC89C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void ***sub_1C4AD0E2C(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    unint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      uint64_t v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_1C4AC89C8(v4 - 248);
        while ((void *)v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_1C4AD1194(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4AD1230(void *a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v5 = v3;
  uint64_t v8 = 0;
  uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v30, (uint64_t)v34, 16, v7);
  if (v14)
  {
    uint64_t v15 = *(void *)v31;
    do
    {
      uint64_t v16 = 0;
      do
      {
        if (*(void *)v31 != v15) {
          objc_enumerationMutation(v5);
        }
        uint64_t v17 = objc_msgSend_encodedStrokeIdentifier(*(void **)(*((void *)&v30 + 1) + 8 * v16), v9, v10, v11, v12, v13, (void)v30);
        float v22 = objc_msgSend_objectForKeyedSubscript_(v4, v18, (uint64_t)v17, v19, v20, v21);
        uint64_t v28 = objc_msgSend_count(v22, v23, v24, v25, v26, v27);

        v8 += v28;
        ++v16;
      }
      while (v14 != v16);
      uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v9, (uint64_t)&v30, (uint64_t)v34, 16, v13);
    }
    while (v14);
  }

  return v8;
}

void sub_1C4AD137C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AD1470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4AD1488(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  int64_t v6 = *(void **)(a1 + 32);
  uint64_t v12 = objc_msgSend_encodedStrokeIdentifier(a2, v7, v8, v9, v10, v11);
  uint64_t v17 = objc_msgSend_objectForKeyedSubscript_(v6, v13, (uint64_t)v12, v14, v15, v16);
  double v23 = objc_msgSend_firstObject(v17, v18, v19, v20, v21, v22);
  objc_msgSend_bounds(v23, v24, v25, v26, v27, v28);
  CGFloat v30 = v29;
  CGFloat v32 = v31;
  CGFloat v34 = v33;
  CGFloat v36 = v35;

  float v37 = *(void **)(a1 + 32);
  unint64_t v43 = objc_msgSend_encodedStrokeIdentifier(v5, v38, v39, v40, v41, v42);
  float v48 = objc_msgSend_objectForKeyedSubscript_(v37, v44, (uint64_t)v43, v45, v46, v47);
  float v54 = objc_msgSend_firstObject(v48, v49, v50, v51, v52, v53);
  objc_msgSend_bounds(v54, v55, v56, v57, v58, v59);
  CGFloat v61 = v60;
  CGFloat v63 = v62;
  CGFloat v65 = v64;
  CGFloat v67 = v66;

  v78.origin.x = v30;
  v78.origin.y = v32;
  v78.size.width = v34;
  v78.size.height = v36;
  double MidX = CGRectGetMidX(v78);
  v79.origin.x = v30;
  v79.origin.y = v32;
  v79.size.width = v34;
  v79.size.height = v36;
  double MidY = CGRectGetMidY(v79);
  v80.origin.x = v61;
  v80.origin.y = v63;
  v80.size.width = v65;
  v80.size.height = v67;
  double v69 = CGRectGetMidX(v80);
  v81.origin.x = v61;
  v81.origin.y = v63;
  v81.size.width = v65;
  v81.size.height = v67;
  double v70 = CGRectGetMidY(v81);
  unint64_t v71 = *(void *)(a1 + 40);
  if (v71 >= 2)
  {
    if (v71 == 2)
    {
      double v73 = v70 - MidY;
      BOOL v74 = MidX - v69 <= 0.0;
      if (MidX - v69 != 0.0) {
        goto LABEL_11;
      }
    }
    else
    {
      if (v71 != 3) {
        goto LABEL_10;
      }
      double v72 = v70 - MidY;
      double v73 = v69 - MidX;
      BOOL v74 = v72 <= 0.0;
      if (v72 != 0.0) {
        goto LABEL_11;
      }
    }
LABEL_9:
    BOOL v74 = v73 <= 0.0;
    if (v73 != 0.0) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v75 = 0;
    goto LABEL_14;
  }
  double v73 = v70 - MidY;
  BOOL v74 = v69 - MidX <= 0.0;
  if (v69 - MidX == 0.0) {
    goto LABEL_9;
  }
LABEL_11:
  if (v74) {
    uint64_t v75 = 1;
  }
  else {
    uint64_t v75 = -1;
  }
LABEL_14:

  return v75;
}

void sub_1C4AD1674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AD1690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AD16A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AD16BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AD16CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AD16E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AD1700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AD1714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AD1724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AD1734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AD1A28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AD3334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a55, 8);
  if (__p)
  {
    a62 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a69, 8);
  double v72 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v72;
    operator delete(v72);
  }

  _Unwind_Resume(a1);
}

id sub_1C4AD385C(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v8 = a2;
  if (a1)
  {
    a1 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v3, v4, v5, v6, v7);
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v9 = v8;
    uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v26, (uint64_t)v30, 16, v11);
    if (v17)
    {
      uint64_t v18 = *(void *)v27;
      do
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          if (*(void *)v27 != v18) {
            objc_enumerationMutation(v9);
          }
          uint64_t v20 = objc_msgSend_encodedStrokeIdentifier(*(void **)(*((void *)&v26 + 1) + 8 * i), v12, v13, v14, v15, v16, (void)v26);
          objc_msgSend_addObject_(a1, v21, (uint64_t)v20, v22, v23, v24);
        }
        uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v12, (uint64_t)&v26, (uint64_t)v30, 16, v16);
      }
      while (v17);
    }
  }
  return a1;
}

void sub_1C4AD39A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4AD39DC(void *a1, void *a2, void *a3, void *a4, int a5)
{
  uint64_t v251 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v238 = a3;
  id v237 = a4;
  unint64_t v239 = v9;
  if (a1)
  {
    if (!objc_msgSend_count(v9, v10, v11, v12, v13, v14))
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v20 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1C492D000, v20, OS_LOG_TYPE_FAULT, "Attempt to create an empty stroke group.", buf, 2u);
      }
    }
    uint64_t v21 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v15, v16, v17, v18, v19);
    double x = *MEMORY[0x1E4F1DB20];
    double y = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    double width = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    double height = *(double *)(MEMORY[0x1E4F1DB20] + 24);
    long long v244 = 0u;
    long long v245 = 0u;
    long long v246 = 0u;
    long long v247 = 0u;
    id v26 = v9;
    uint64_t v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v26, v27, (uint64_t)&v244, (uint64_t)v250, 16, v28);
    if (v34)
    {
      uint64_t v35 = *(void *)v245;
      do
      {
        for (uint64_t i = 0; i != v34; ++i)
        {
          if (*(void *)v245 != v35) {
            objc_enumerationMutation(v26);
          }
          float v37 = *(void **)(*((void *)&v244 + 1) + 8 * i);
          uint64_t v38 = objc_msgSend_encodedStrokeIdentifier(v37, v29, v30, v31, v32, v33);
          objc_msgSend_addObject_(v21, v39, (uint64_t)v38, v40, v41, v42);

          objc_msgSend_bounds(v37, v43, v44, v45, v46, v47);
          v255.origin.double x = v48;
          v255.origin.double y = v49;
          v255.size.double width = v50;
          v255.size.double height = v51;
          v253.origin.double x = x;
          v253.origin.double y = y;
          v253.size.double width = width;
          v253.size.double height = height;
          CGRect v254 = CGRectUnion(v253, v255);
          double x = v254.origin.x;
          double y = v254.origin.y;
          double width = v254.size.width;
          double height = v254.size.height;
        }
        uint64_t v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v26, v29, (uint64_t)&v244, (uint64_t)v250, 16, v33);
      }
      while (v34);
    }

    if (!a5)
    {
      uint64_t v194 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_38;
    }
    long long v242 = 0u;
    long long v243 = 0u;
    long long v240 = 0u;
    long long v241 = 0u;
    obunint64_t j = v237;
    uint64_t v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v52, (uint64_t)&v240, (uint64_t)v249, 16, v53);
    if (v54)
    {
      uint64_t v235 = *(void *)v241;
LABEL_18:
      uint64_t v234 = v54;
      uint64_t v60 = 0;
      while (1)
      {
        if (*(void *)v241 != v235) {
          objc_enumerationMutation(obj);
        }
        CGFloat v61 = *(void **)(*((void *)&v240 + 1) + 8 * v60);
        double v62 = objc_msgSend_strokeProvider(a1, v55, v56, v57, v58, v59);
        double v68 = objc_msgSend_lastStrokeIdentifier(v61, v63, v64, v65, v66, v67);
        double v73 = objc_msgSend_strokeIdentifierFromData_(v62, v69, (uint64_t)v68, v70, v71, v72);

        CGRect v79 = objc_msgSend_strokeIdentifiers(v61, v74, v75, v76, v77, v78);
        if (objc_msgSend_count(v79, v80, v81, v82, v83, v84) == 1
          && objc_msgSend_count(v26, v85, v86, v87, v88, v89) == 1)
        {
          double v95 = objc_msgSend_strokeProvider(a1, v90, v91, v92, v93, v94);
          uint64_t v101 = objc_msgSend_lastObject(v26, v96, v97, v98, v99, v100);
          int isStroke_versionOfStrokeWithIdentifier = objc_msgSend_isStroke_versionOfStrokeWithIdentifier_(v95, v102, (uint64_t)v101, (uint64_t)v73, v103, v104);

          if (isStroke_versionOfStrokeWithIdentifier)
          {
            uint64_t v188 = objc_msgSend_uniqueIdentifier(v61, v106, v107, v108, v109, v110);
            uint64_t v194 = objc_msgSend_ancestorIdentifier(v61, v189, v190, v191, v192, v193);

            if (v188 != 0x7FFFFFFFFFFFFFFFLL)
            {
              uint64_t v195 = [CHOrderedStrokeGroup alloc];
              uint64_t v146 = objc_msgSend_firstObject(v26, v196, v197, v198, v199, v200);
              uint64_t v152 = objc_msgSend_encodedStrokeIdentifier(v146, v201, v202, v203, v204, v205);
              uint64_t v158 = objc_msgSend_lastObject(v26, v206, v207, v208, v209, v210);
              uint64_t v164 = objc_msgSend_encodedStrokeIdentifier(v158, v211, v212, v213, v214, v215);
              double v170 = objc_msgSend_strategyIdentifier(a1, v216, v217, v218, v219, v220);
              float v176 = objc_msgSend_firstObject(v26, v221, v222, v223, v224, v225);
              objc_msgSend_bounds(v176, v226, v227, v228, v229, v230);
              uint64_t StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin_orderedStrokeIdentifiers = objc_msgSend_initWithUniqueIdentifier_ancestorIdentifier_strokeIdentifiers_firstStrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin_orderedStrokeIdentifiers_(v195, v231, v188, v194, (uint64_t)v21, (uint64_t)v152, v164, 1, x, y, width, height, 1.0, v232, v233, v170, v238);
              goto LABEL_39;
            }
            goto LABEL_38;
          }
        }
        else
        {
        }
        uint64_t v111 = objc_msgSend_strokeIdentifiers(v61, v106, v107, v108, v109, v110);
        char isSubsetOfSet = objc_msgSend_isSubsetOfSet_(v111, v112, (uint64_t)v21, v113, v114, v115);

        if ((isSubsetOfSet & 1) != 0
          || (objc_msgSend_strokeIdentifiers(v61, v117, v118, v119, v120, v121),
              uint64_t v122 = objc_claimAutoreleasedReturnValue(),
              int v127 = objc_msgSend_isSubsetOfSet_(v21, v123, (uint64_t)v122, v124, v125, v126),
              v122,
              v127))
        {
LABEL_31:
          uint64_t v194 = objc_msgSend_ancestorIdentifier(v61, v117, v118, v119, v120, v121);

          goto LABEL_37;
        }
        uint64_t v128 = objc_msgSend_count(v26, v117, v118, v119, v120, v121) - 1;
        while ((v128 & 0x8000000000000000) == 0)
        {
          float v129 = objc_msgSend_objectAtIndexedSubscript_(v26, v117, v128, v119, v120, v121);
          float v135 = objc_msgSend_strokeProvider(a1, v130, v131, v132, v133, v134);
          char v139 = objc_msgSend_isStroke_versionOfStrokeWithIdentifier_(v135, v136, (uint64_t)v129, (uint64_t)v73, v137, v138);

          --v128;
          if (v139) {
            goto LABEL_31;
          }
        }

        if (++v60 == v234)
        {
          uint64_t v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v55, (uint64_t)&v240, (uint64_t)v249, 16, v59);
          uint64_t v194 = 0x7FFFFFFFFFFFFFFFLL;
          if (v54) {
            goto LABEL_18;
          }
          goto LABEL_37;
        }
      }
    }
    uint64_t v194 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_37:

LABEL_38:
    uint64_t v140 = [CHOrderedStrokeGroup alloc];
    uint64_t v146 = objc_msgSend_firstObject(v26, v141, v142, v143, v144, v145);
    uint64_t v152 = objc_msgSend_encodedStrokeIdentifier(v146, v147, v148, v149, v150, v151);
    uint64_t v158 = objc_msgSend_lastObject(v26, v153, v154, v155, v156, v157);
    uint64_t v164 = objc_msgSend_encodedStrokeIdentifier(v158, v159, v160, v161, v162, v163);
    double v170 = objc_msgSend_strategyIdentifier(a1, v165, v166, v167, v168, v169);
    float v176 = objc_msgSend_firstObject(v26, v171, v172, v173, v174, v175);
    objc_msgSend_bounds(v176, v177, v178, v179, v180, v181);
    uint64_t StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin_orderedStrokeIdentifiers = objc_msgSend_initWithAncestorIdentifier_strokeIdentifiers_firstStrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin_orderedStrokeIdentifiers_(v140, v182, v194, (uint64_t)v21, (uint64_t)v152, (uint64_t)v164, 1, v170, x, y, width, height, 1.0, v183, v184, v238);
LABEL_39:
    float v186 = (void *)StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin_orderedStrokeIdentifiers;
  }
  else
  {
    float v186 = 0;
  }

  return v186;
}

void sub_1C4AD4020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

double sub_1C4AD41C0(void *a1)
{
  id v1 = a1;
  if (!objc_msgSend_count(v1, v2, v3, v4, v5, v6))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v12 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v59 = 0;
      _os_log_impl(&dword_1C492D000, v12, OS_LOG_TYPE_FAULT, "At least one stroke is needed to calculate accumulated time differences", v59, 2u);
    }
  }
  uint64_t v18 = objc_msgSend_firstObject(v1, v7, v8, v9, v10, v11);
  double v19 = 0.0;
  for (unint64_t i = 1; i < objc_msgSend_count(v1, v13, v14, v15, v16, v17); ++i)
  {
    uint64_t v25 = objc_msgSend_objectAtIndexedSubscript_(v1, v21, i, v22, v23, v24);
    objc_msgSend_startTimestamp(v25, v26, v27, v28, v29, v30);
    double v32 = v31;
    objc_msgSend_startTimestamp(v18, v33, v34, v35, v36, v37);
    if (v32 >= v43)
    {
      objc_msgSend_startTimestamp(v25, v38, v39, v40, v41, v42);
      double v45 = v52;
      objc_msgSend_endTimestamp(v18, v53, v54, v55, v56, v57);
    }
    else
    {
      objc_msgSend_startTimestamp(v18, v38, v39, v40, v41, v42);
      double v45 = v44;
      objc_msgSend_endTimestamp(v25, v46, v47, v48, v49, v50);
    }
    double v19 = v19 + v45 - v51;

    uint64_t v18 = v25;
  }

  return v19;
}

void sub_1C4AD431C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AD432C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AD433C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AD4354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4AD436C(void *a1, double *a2, double *a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  id v13 = a1;
  v59.origin.double x = a4;
  v59.origin.double y = a5;
  v59.size.double width = a6;
  v59.size.double height = a7;
  double MinY = CGRectGetMinY(v59);
  v60.origin.double x = a4;
  v60.origin.double y = a5;
  v60.size.double width = a6;
  v60.size.double height = a7;
  double MaxY = CGRectGetMaxY(v60);
  unint64_t v19 = 0;
  double v57 = 0.0;
  uint64_t v20 = -1;
  double v56 = 2147483650.0;
  uint64_t v21 = -1;
  double v55 = a4;
  while (v19 < objc_msgSend_count(v13, v14, v15, v16, v17, v18))
  {
    id v26 = objc_msgSend_objectAtIndexedSubscript_(v13, v22, v19, v23, v24, v25);
    objc_msgSend_frame(v26, v27, v28, v29, v30, v31);
    CGFloat v33 = v32;
    CGFloat v35 = v34;
    CGFloat v37 = v36;
    CGFloat v39 = v38;

    v61.origin.double x = a4;
    double v40 = a5;
    v61.origin.double y = a5;
    double v41 = a6;
    v61.size.double width = a6;
    double v42 = a7;
    v61.size.double height = a7;
    v65.origin.double x = v33;
    v65.origin.double y = v35;
    v65.size.double width = v37;
    v65.size.double height = v39;
    CGRect v62 = CGRectIntersection(v61, v65);
    double height = v62.size.height;
    BOOL IsNull = CGRectIsNull(v62);
    char v45 = height <= v57 || IsNull;
    if (v45)
    {
      v63.origin.double x = v33;
      v63.origin.double y = v35;
      v63.size.double width = v37;
      v63.size.double height = v39;
      double v46 = CGRectGetMinY(v63);
      v64.origin.double x = v33;
      v64.origin.double y = v35;
      v64.size.double width = v37;
      v64.size.double height = v39;
      double v47 = MinY - CGRectGetMaxY(v64);
      BOOL v48 = v47 >= 0.0 && v47 < v56;
      if (v47 < 0.0 || v47 >= v56) {
        double v47 = v56;
      }
      int v49 = v46 - MaxY >= 0.0 && v46 - MaxY < v47 || v48;
      if (v46 - MaxY >= 0.0 && v46 - MaxY < v47) {
        double v47 = v46 - MaxY;
      }
      double v56 = v47;
      if (v49) {
        uint64_t v20 = v19;
      }
    }
    else
    {
      uint64_t v21 = v19;
      double v57 = height;
    }
    ++v19;
    a7 = v42;
    a6 = v41;
    a5 = v40;
    a4 = v55;
  }
  if ((v21 & 0x8000000000000000) == 0)
  {
    if (a2) {
      *a2 = v57;
    }
    double v50 = 0.0;
    if (!a3) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    if (a2) {
      *a2 = 0.0;
    }
    uint64_t v21 = v20;
    double v50 = v56;
    if (!a3) {
      goto LABEL_21;
    }
LABEL_20:
    *a3 = v50;
LABEL_21:
    double v51 = objc_msgSend_objectAtIndexedSubscript_(v13, v22, v21, v23, v24, v25, v50);
    goto LABEL_22;
  }
  double v51 = 0;
LABEL_22:

  return v51;
}

void sub_1C4AD45D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AD45E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AD45F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AD4600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AD4610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AD4624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AD4634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AD4644(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1C4AD4654(void *a1, void *a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  id v5 = v3;
  uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v53, (uint64_t)v57, 16, v7);
  if (v13)
  {
    uint64_t v14 = *(void *)v54;
    double v15 = 0.0;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v54 != v14) {
          objc_enumerationMutation(v5);
        }
        uint64_t v17 = *(void **)(*((void *)&v53 + 1) + 8 * i);
        uint64_t v18 = objc_msgSend_encodedStrokeIdentifier(v17, v8, v9, v10, v11, v12, (void)v53);
        uint64_t v23 = objc_msgSend_objectForKeyedSubscript_(v4, v19, (uint64_t)v18, v20, v21, v22);

        if (v23)
        {
          objc_msgSend_doubleValue(v23, v24, v25, v26, v27, v28);
          double v30 = v29;
        }
        else
        {
          uint64_t v31 = objc_opt_class();
          objc_msgSend_arcLengthForStroke_(v31, v32, (uint64_t)v17, v33, v34, v35);
          double v30 = v36;
          double v42 = objc_msgSend_numberWithDouble_(NSNumber, v37, v38, v39, v40, v41);
          BOOL v48 = objc_msgSend_encodedStrokeIdentifier(v17, v43, v44, v45, v46, v47);
          objc_msgSend_setObject_forKeyedSubscript_(v4, v49, (uint64_t)v42, (uint64_t)v48, v50, v51);
        }
        double v15 = v15 + v30;
      }
      uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v53, (uint64_t)v57, 16, v12);
    }
    while (v13);
  }
  else
  {
    double v15 = 0.0;
  }

  return v15;
}

void sub_1C4AD4814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 sub_1C4AD4880(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1C4AD48A4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1C4AD48BC(uint64_t a1, double a2, double a3)
{
  id v5 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v7 = (double *)v5[7];
  unint64_t v6 = v5[8];
  if ((unint64_t)v7 < v6)
  {
    double *v7 = a2;
    v7[1] = a3;
    uint64_t v8 = (uint64_t)(v7 + 2);
    goto LABEL_18;
  }
  uint64_t v9 = (double *)v5[6];
  uint64_t v10 = ((char *)v7 - (char *)v9) >> 4;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60) {
    sub_1C494A220();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 60) {
      sub_1C4949AA8();
    }
    uint64_t v14 = (char *)operator new(16 * v13);
    double v15 = (double *)&v14[16 * v10];
    uint64_t v16 = &v14[16 * v13];
    double *v15 = a2;
    v15[1] = a3;
    uint64_t v8 = (uint64_t)(v15 + 2);
    if (v7 == v9) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  double v15 = (double *)(16 * v10);
  uint64_t v16 = 0;
  double *v15 = a2;
  v15[1] = a3;
  uint64_t v8 = 16 * v10 + 16;
  if (v7 != v9)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
      v15 -= 2;
      v7 -= 2;
    }
    while (v7 != v9);
    uint64_t v7 = (double *)v5[6];
  }
LABEL_16:
  v5[6] = v15;
  v5[7] = v8;
  v5[8] = v16;
  if (v7) {
    operator delete(v7);
  }
LABEL_18:
  v5[7] = v8;
}

void sub_1C4AD49E4(uint64_t a1, double a2, double a3)
{
  id v5 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v7 = (double *)v5[7];
  unint64_t v6 = v5[8];
  if ((unint64_t)v7 < v6)
  {
    double *v7 = a2;
    v7[1] = a3;
    uint64_t v8 = (uint64_t)(v7 + 2);
    goto LABEL_18;
  }
  uint64_t v9 = (double *)v5[6];
  uint64_t v10 = ((char *)v7 - (char *)v9) >> 4;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60) {
    sub_1C494A220();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 60) {
      sub_1C4949AA8();
    }
    uint64_t v14 = (char *)operator new(16 * v13);
    double v15 = (double *)&v14[16 * v10];
    uint64_t v16 = &v14[16 * v13];
    double *v15 = a2;
    v15[1] = a3;
    uint64_t v8 = (uint64_t)(v15 + 2);
    if (v7 == v9) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  double v15 = (double *)(16 * v10);
  uint64_t v16 = 0;
  double *v15 = a2;
  v15[1] = a3;
  uint64_t v8 = 16 * v10 + 16;
  if (v7 != v9)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
      v15 -= 2;
      v7 -= 2;
    }
    while (v7 != v9);
    uint64_t v7 = (double *)v5[6];
  }
LABEL_16:
  v5[6] = v15;
  v5[7] = v8;
  v5[8] = v16;
  if (v7) {
    operator delete(v7);
  }
LABEL_18:
  v5[7] = v8;
}

void sub_1C4AD4E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4AD4F58(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v12 = objc_msgSend_strokeProvider(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
  uint64_t v17 = objc_msgSend_strokeIdentifierFromData_(v12, v13, (uint64_t)v5, v14, v15, v16);

  uint64_t v23 = objc_msgSend_strokeProvider(*(void **)(a1 + 32), v18, v19, v20, v21, v22);
  uint64_t v28 = objc_msgSend_strokeIdentifierFromData_(v23, v24, (uint64_t)v6, v25, v26, v27);

  uint64_t v34 = objc_msgSend_strokeProvider(*(void **)(a1 + 32), v29, v30, v31, v32, v33);
  uint64_t v38 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(v34, v35, (uint64_t)v17, (uint64_t)v28, v36, v37);

  return v38;
}

void sub_1C4AD501C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AD5058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AD5070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4AD5084(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  uint64_t v11 = *(void **)(a1 + 32);
  if (v11) {
    objc_msgSend_addPoint_(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v12 = *(void **)(a1 + 40);
  return objc_msgSend_addPoint_(v12, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1C4AD5F78(uint64_t a1, void *a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a3;
  uint64_t v11 = objc_msgSend_strokeIdentifier(a2, v6, v7, v8, v9, v10);
  uint64_t v17 = objc_msgSend_strokeIdentifier(v5, v12, v13, v14, v15, v16);

  uint64_t v21 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(v4, v18, (uint64_t)v11, (uint64_t)v17, v19, v20);
  return v21;
}

uint64_t sub_1C4AD6310(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  uint64_t v11 = *(void **)(a1 + 32);
  if (v11) {
    objc_msgSend_addPoint_(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  double v12 = a7 - *(double *)(a1 + 48);
  double v13 = a8 - *(double *)(a1 + 56);
  uint64_t v14 = *(void **)(a1 + 40);
  return objc_msgSend_addPoint_(v14, a2, a3, a4, a5, a6, v12, v13);
}

uint64_t sub_1C4AD6374(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  objc_msgSend_startTimestamp(a2, v5, v6, v7, v8, v9);
  double v11 = v10;
  objc_msgSend_startTimestamp(v4, v12, v13, v14, v15, v16);
  double v18 = v17;

  if (v11 >= v18) {
    return 1;
  }
  else {
    return -1;
  }
}

void sub_1C4AD6948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25)
{
  _Unwind_Resume(a1);
}

void sub_1C4ADCA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,uint64_t a28,void *a29,void *a30,void *a31,void *a32,uint64_t a33,uint64_t a34,void *a35,void *a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,void *a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,unint64_t a51,_Unwind_Exception *exception_objecta,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  STACK[0x248] = a51;
  _Unwind_Resume(a1);
}

void sub_1C4ADE1D4(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 520);
    self;
    if (v4 && (v4 != 2 && v4 != 1 || a2 != 2))
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      id v5 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        uint64_t v6 = *(void *)(a1 + 520);
        int v7 = 134218240;
        uint64_t v8 = v6;
        __int16 v9 = 2048;
        uint64_t v10 = a2;
        _os_log_impl(&dword_1C492D000, v5, OS_LOG_TYPE_FAULT, "Invalid status transition from %ld to %ld.", (uint8_t *)&v7, 0x16u);
      }
    }
    *(void *)(a1 + 520) = a2;
  }
}

uint64_t sub_1C4ADE2F4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_cancelled(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

uint64_t sub_1C4ADE2FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_cancelled(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

uint64_t sub_1C4ADE304(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_cancelled(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

uint64_t sub_1C4ADE30C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_cancelled(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

uint64_t sub_1C4ADE314(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_cancelled(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

uint64_t sub_1C4ADE31C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_cancelled(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

uint64_t sub_1C4ADE324(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_cancelled(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

uint64_t sub_1C4ADE32C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_cancelled(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

uint64_t sub_1C4ADE334(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_cancelled(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

id sub_1C4ADE33C(void *a1, void *a2, void *a3)
{
  id v114 = a2;
  id v5 = a3;
  double v112 = v5;
  if (a1)
  {
    uint64_t v11 = v5;
    char hasPrincipalLines = objc_msgSend_hasPrincipalLines(v5, v6, v7, v8, v9, v10);
    id v13 = v11;
    uint64_t v19 = v13;
    if ((hasPrincipalLines & 1) == 0)
    {
      uint64_t v113 = objc_msgSend_preferredLocale(v13, v14, v15, v16, v17, v18);
      uint64_t v25 = objc_msgSend_recognitionResultsByLocale(v19, v20, v21, v22, v23, v24);
      uint64_t v30 = objc_msgSend_objectForKeyedSubscript_(v25, v26, (uint64_t)v113, v27, v28, v29);

      if (v30)
      {
        uint64_t v111 = v30;
        uint64_t v36 = objc_msgSend_inputStrokeIdentifiers(v30, v31, v32, v33, v34, v35);
        uint64_t v42 = objc_msgSend_count(v36, v37, v38, v39, v40, v41);

        if (!v42)
        {
          if (qword_1EA3CA000 != -1) {
            dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
          }
          uint64_t v47 = (id)qword_1EA3C9F90[0];
          if (os_log_type_enabled(v47, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl(&dword_1C492D000, v47, OS_LOG_TYPE_FAULT, "CHRecognitionSessionTasks can not add principal lines on a text result with no stroke identifiers.", buf, 2u);
          }
        }
        objc_msgSend_setLocale_(v111, v43, (uint64_t)v113, v44, v45, v46);
        uint64_t v110 = sub_1C4AE5B28(a1, v114, 0, v111, 0);
        long long v53 = objc_msgSend_recognitionResultsByLocale(v19, v48, v49, v50, v51, v52);
        CGRect v59 = objc_msgSend_mutableCopy(v53, v54, v55, v56, v57, v58);

        uint64_t v109 = v59;
        objc_msgSend_setObject_forKeyedSubscript_(v59, v60, (uint64_t)v110, (uint64_t)v113, v61, v62);
        CGRect v63 = [CHStrokeGroupRecognitionResult alloc];
        double v69 = objc_msgSend_recognitionLocales(a1, v64, v65, v66, v67, v68);
        uint64_t v108 = objc_msgSend_errorsByLocale(v19, v70, v71, v72, v73, v74);
        uint64_t v107 = objc_msgSend_languageFitnessByLocale(v19, v75, v76, v77, v78, v79);
        float v106 = objc_msgSend_mathResult(v19, v80, v81, v82, v83, v84);
        double v90 = objc_msgSend_inputStrokeIdentifiers(v19, v85, v86, v87, v88, v89);
        float v96 = objc_msgSend_inputDrawing(v19, v91, v92, v93, v94, v95);
        uint64_t v102 = objc_msgSend_inputDrawingCutPoints(v19, v97, v98, v99, v100, v101);
        uint64_t v104 = objc_msgSend_initWithOrderedLocales_resultsByLocale_errorsByLocale_languageFitnessByLocale_mathResult_inputStrokeIdentifiers_inputDrawing_inputDrawingCutPoints_(v63, v103, (uint64_t)v69, (uint64_t)v109, (uint64_t)v108, (uint64_t)v107, v106, v90, v96, v102);

        uint64_t v19 = (void *)v104;
        uint64_t v30 = v111;
      }
    }
  }
  else
  {
    uint64_t v19 = 0;
  }

  return v19;
}

void sub_1C4ADE60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4ADE6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4ADE714(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v81 = a4;
  if (a1)
  {
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    objc_msgSend_strokeGroups(v7, v9, v10, v11, v12, v13);
    obunint64_t j = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v14, (uint64_t)&v91, (uint64_t)v113, 16, v15);
    if (v21)
    {
      uint64_t v88 = 0;
      uint64_t v89 = 0;
      uint64_t v82 = 0;
      uint64_t v83 = 0;
      uint64_t v86 = 0;
      uint64_t v87 = 0;
      uint64_t v84 = 0;
      uint64_t v85 = 0;
      uint64_t v22 = *(void *)v92;
      do
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          if (*(void *)v92 != v22) {
            objc_enumerationMutation(obj);
          }
          uint64_t v24 = *(void **)(*((void *)&v91 + 1) + 8 * i);
          uint64_t v25 = objc_msgSend_createdStrokeGroups(v7, v16, v17, v18, v19, v20, v81);
          unsigned int v30 = objc_msgSend_containsObject_(v25, v26, (uint64_t)v24, v27, v28, v29);

          uint64_t v31 = NSNumber;
          uint64_t v37 = objc_msgSend_uniqueIdentifier(v24, v32, v33, v34, v35, v36);
          uint64_t v42 = objc_msgSend_numberWithInteger_(v31, v38, v37, v39, v40, v41);
          uint64_t v47 = objc_msgSend_objectForKeyedSubscript_(v8, v43, (uint64_t)v42, v44, v45, v46);

          if (v47)
          {
            uint64_t v58 = objc_msgSend_mathResult(v47, v48, v49, v50, v51, v52);
            if (!v58
              || (objc_msgSend_recognitionResultsByLocale(v47, v53, v54, v55, v56, v57),
                  CGRect v59 = objc_claimAutoreleasedReturnValue(),
                  BOOL v65 = objc_msgSend_count(v59, v60, v61, v62, v63, v64) == 0,
                  v59,
                  v58,
                  v65))
            {
              uint64_t v66 = objc_msgSend_mathResult(v47, v53, v54, v55, v56, v57);
              BOOL v67 = v66 == 0;

              if (v67)
              {
                uint64_t v73 = objc_msgSend_recognitionResultsByLocale(v47, v68, v69, v70, v71, v72);
                BOOL v79 = objc_msgSend_count(v73, v74, v75, v76, v77, v78) == 0;

                if (v79)
                {
                  v82 += v30;
                  ++v83;
                }
                else
                {
                  ++v84;
                  v85 += v30;
                }
              }
              else
              {
                ++v86;
                v87 += v30;
              }
            }
            else
            {
              v88 += v30;
              ++v89;
            }
          }
        }
        uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v16, (uint64_t)&v91, (uint64_t)v113, 16, v20);
      }
      while (v21);
    }
    else
    {
      uint64_t v88 = 0;
      uint64_t v89 = 0;
      uint64_t v82 = 0;
      uint64_t v83 = 0;
      uint64_t v86 = 0;
      uint64_t v87 = 0;
      uint64_t v84 = 0;
      uint64_t v85 = 0;
    }

    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    CGRect v80 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 138414338;
      id v96 = v81;
      __int16 v97 = 2048;
      uint64_t v98 = v86;
      __int16 v99 = 2048;
      uint64_t v100 = v87;
      __int16 v101 = 2048;
      uint64_t v102 = v84;
      __int16 v103 = 2048;
      uint64_t v104 = v85;
      __int16 v105 = 2048;
      uint64_t v106 = v89;
      __int16 v107 = 2048;
      uint64_t v108 = v88;
      __int16 v109 = 2048;
      uint64_t v110 = v83;
      __int16 v111 = 2048;
      uint64_t v112 = v82;
      _os_log_impl(&dword_1C492D000, v80, OS_LOG_TYPE_DEFAULT, "%@ session result contains the following groups (newly created). Math: %lu (%lu), Text: %lu (%lu), Both: %lu (%lu), None: %lu (%lu)", buf, 0x5Cu);
    }
  }
}

void sub_1C4ADEA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C4ADEB98()
{
  if (MGGetBoolAnswer())
  {
    byte_1EA3C92F0 = 1;
  }
  else
  {
    int v5 = MGGetBoolAnswer();
    byte_1EA3C92F0 = v5;
    if (!v5)
    {
      byte_1EA3C92F0 = 0;
      return;
    }
  }
  objc_msgSend_standardUserDefaults(MEMORY[0x1E4F1CB18], v0, v1, v2, v3, v4);
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  byte_1EA3C92F0 = objc_msgSend_BOOLForKey_(v10, v6, @"CHRecognitionSessionLogging", v7, v8, v9);
}

void sub_1C4ADEC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4ADEC50(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  int v5 = NSNumber;
  uint64_t v11 = objc_msgSend_uniqueIdentifier(v3, v6, v7, v8, v9, v10);
  uint64_t v16 = objc_msgSend_numberWithInteger_(v5, v12, v11, v13, v14, v15);
  uint64_t v21 = objc_msgSend_containsObject_(v4, v17, (uint64_t)v16, v18, v19, v20);

  return v21;
}

void sub_1C4ADECC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4ADECD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4ADECE4(uint64_t a1, void *a2, void *a3, void *a4)
{
  v105[1] = *MEMORY[0x1E4F143B8];
  id v98 = a2;
  id v7 = a3;
  id v96 = a4;
  if (a1)
  {
    uint64_t v8 = [CHStrokeGroupingResult alloc];
    uint64_t v13 = objc_msgSend_setWithObject_(MEMORY[0x1E4F1CAD0], v9, (uint64_t)v7, v10, v11, v12);
    __int16 v97 = objc_msgSend_initWithStrokeGroups_createdStrokeGroups_deletedStrokeGroups_(v8, v14, (uint64_t)v13, 0, 0, v15);

    uint64_t v16 = [CHGroupingAndRecognitionResults alloc];
    uint64_t v17 = NSNumber;
    uint64_t v23 = objc_msgSend_uniqueIdentifier(v7, v18, v19, v20, v21, v22);
    uint64_t v28 = objc_msgSend_numberWithInteger_(v17, v24, v23, v25, v26, v27);
    uint64_t v104 = v28;
    v105[0] = v98;
    uint64_t v31 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v29, (uint64_t)v105, (uint64_t)&v104, 1, v30);
    uint64_t v33 = objc_msgSend_initWithGroupingResult_recognitionResultsByGroupID_strokeClassificationResult_previousProcessedStrokeGroupingResult_previousProcessedRecognizedResultsByGroupID_strokeGroupReplacements_cachedRecognitionResultsFromPostProcessing_(v16, v32, (uint64_t)v97, (uint64_t)v31, 0, 0, 0, 0, *(void *)(a1 + 496));

    uint64_t v37 = objc_msgSend_process_options_(v96, v34, (uint64_t)v33, 0, v35, v36);

    uint64_t v43 = objc_msgSend_cachedRecognitionResultsFromPostProcessing(v37, v38, v39, v40, v41, v42);
    uint64_t v44 = *(void **)(a1 + 496);
    *(void *)(a1 + 496) = v43;

    uint64_t v50 = objc_msgSend_refreshedCachedResultsFromPostProcessing(v37, v45, v46, v47, v48, v49);
    if (objc_msgSend_count(v50, v51, v52, v53, v54, v55))
    {
      long long v101 = 0u;
      long long v102 = 0u;
      long long v99 = 0u;
      long long v100 = 0u;
      uint64_t v61 = objc_msgSend_allValues(v50, v56, v57, v58, v59, v60);
      uint64_t v69 = objc_msgSend_countByEnumeratingWithState_objects_count_(v61, v62, (uint64_t)&v99, (uint64_t)v103, 16, v63);
      if (v69)
      {
        uint64_t v70 = *(void *)v100;
        do
        {
          for (uint64_t i = 0; i != v69; ++i)
          {
            if (*(void *)v100 != v70) {
              objc_enumerationMutation(v61);
            }
            uint64_t v72 = *(void **)(*((void *)&v99 + 1) + 8 * i);
            uint64_t v73 = objc_msgSend_mathResult(v72, v64, v65, v66, v67, v68);
            BOOL v74 = v73 == 0;

            if (!v74)
            {
              uint64_t v75 = objc_msgSend_mathResult(v72, v64, v65, v66, v67, v68);
              id v81 = objc_msgSend_declaredVariable(v75, v76, v77, v78, v79, v80);

              if (v81) {
                objc_msgSend_addObject_(*(void **)(a1 + 8), v82, (uint64_t)v81, v83, v84, v85);
              }
            }
          }
          uint64_t v69 = objc_msgSend_countByEnumeratingWithState_objects_count_(v61, v64, (uint64_t)&v99, (uint64_t)v103, 16, v68);
        }
        while (v69);
      }
    }
    else
    {
      uint64_t v86 = objc_msgSend_mathResult(v98, v56, v57, v58, v59, v60);
      uint64_t v61 = objc_msgSend_declaredVariable(v86, v87, v88, v89, v90, v91);

      if (v61) {
        objc_msgSend_addObject_(*(void **)(a1 + 8), v92, (uint64_t)v61, v93, v94, v95);
      }
    }
  }
}

void sub_1C4ADEFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE00C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,void *a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,void *a36,void *a37,void *a38,uint64_t a39,void *a40)
{
  _Unwind_Resume(a1);
}

id sub_1C4AE053C(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = sub_1C4AE6FCC;
    v11[3] = &unk_1E64E3920;
    v11[4] = a1;
    id v12 = v3;
    int v5 = (void *)MEMORY[0x1C8786E90](v11);
    a1 = (void *)MEMORY[0x1C8786E90](v5, v6, v7, v8, v9);
  }
  return a1;
}

id sub_1C4AE0600(void *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v379 = *MEMORY[0x1E4F143B8];
  id v328 = a2;
  id v327 = a3;
  if (!a1)
  {
    int v301 = 0;
    goto LABEL_77;
  }
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], v7, v8, v9, v10, v11);
  double v13 = v12;
  uint64_t v329 = objc_msgSend_uniqueIdentifier(v328, v14, v15, v16, v17, v18);
  uint64_t v24 = objc_msgSend_strokeProvider(a1, v19, v20, v21, v22, v23);
  char v25 = objc_opt_respondsToSelector();

  if (v25)
  {
    if (qword_1EA3CA000 == -1)
    {
      unint64_t v310 = (id)qword_1EA3C9F90[0];
      if (!os_log_type_enabled(v310, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_7;
      }
    }
    else
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      unint64_t v310 = (id)qword_1EA3C9F90[0];
      if (!os_log_type_enabled(v310, OS_LOG_TYPE_DEBUG))
      {
LABEL_7:

        uint64_t v31 = objc_msgSend_strokeIdentifiers(v328, v26, v27, v28, v29, v30);
        uint64_t v37 = objc_msgSend_allObjects(v31, v32, v33, v34, v35, v36);
        uint64_t v43 = objc_msgSend_strokeProvider(a1, v38, v39, v40, v41, v42);
        uint64_t v47 = objc_msgSend_strokeIdentifiersForData_withStrokeProvider_(CHStrokeUtilities, v44, (uint64_t)v37, (uint64_t)v43, v45, v46);

        uint64_t v53 = objc_msgSend_strokeProvider(a1, v48, v49, v50, v51, v52);
        uint64_t v58 = objc_msgSend_setWithArray_(MEMORY[0x1E4F1CAD0], v54, (uint64_t)v47, v55, v56, v57);
        objc_msgSend_cachedTranscriptionForStrokeGroup_(v53, v59, (uint64_t)v58, v60, v61, v62);
        obunint64_t j = (id)objc_claimAutoreleasedReturnValue();

        if (obj)
        {
          uint64_t v68 = objc_msgSend_strokeIdentifiers(v328, v63, v64, v65, v66, v67);
          uint64_t v74 = objc_msgSend_count(v68, v69, v70, v71, v72, v73);
          uint64_t v80 = objc_msgSend_strokeIndexes(obj, v75, v76, v77, v78, v79);
          LODWORD(v74) = v74 == objc_msgSend_count(v80, v81, v82, v83, v84, v85);

          if (v74)
          {
            if (qword_1EA3CA000 == -1)
            {
              uint64_t v313 = (id)qword_1EA3C9F90[0];
              if (!os_log_type_enabled(v313, OS_LOG_TYPE_DEBUG))
              {
LABEL_13:

                goto LABEL_28;
              }
            }
            else
            {
              dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
              uint64_t v313 = (id)qword_1EA3C9F90[0];
              if (!os_log_type_enabled(v313, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_13;
              }
            }
            uint64_t v86 = objc_msgSend_strokeIdentifiers(v328, v315, v316, v317, v318, v319);
            uint64_t v92 = objc_msgSend_count(v86, v87, v88, v89, v90, v91);
            id v98 = objc_msgSend_topTranscription(obj, v93, v94, v95, v96, v97);
            *(_DWORD *)std::string buf = 134218243;
            *(void *)&uint8_t buf[4] = v92;
            *(_WORD *)&buf[12] = 2117;
            *(void *)&buf[14] = v98;
            _os_log_impl(&dword_1C492D000, v313, OS_LOG_TYPE_DEBUG, "The CHStrokeIdentifier has a cached transcription for this stroke group with %ld strokes, transcriptiounint64_t n = %{sensitive}@", buf, 0x16u);

            goto LABEL_13;
          }
          if (qword_1EA3CA000 == -1)
          {
            uint64_t v320 = (id)qword_1EA3C9F90[0];
            if (!os_log_type_enabled(v320, OS_LOG_TYPE_DEBUG))
            {
LABEL_26:

              goto LABEL_27;
            }
          }
          else
          {
            dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
            uint64_t v320 = (id)qword_1EA3C9F90[0];
            if (!os_log_type_enabled(v320, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_26;
            }
          }
          uint64_t v112 = objc_msgSend_strokeIdentifiers(v328, v322, v323, v324, v325, v326);
          uint64_t v118 = objc_msgSend_count(v112, v113, v114, v115, v116, v117);
          uint64_t v124 = objc_msgSend_strokeIndexes(obj, v119, v120, v121, v122, v123);
          uint64_t v130 = objc_msgSend_count(v124, v125, v126, v127, v128, v129);
          *(_DWORD *)std::string buf = 134218240;
          *(void *)&uint8_t buf[4] = v118;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v130;
          _os_log_impl(&dword_1C492D000, v320, OS_LOG_TYPE_DEBUG, "The CHStrokeIdentifier has a cached transcription for this stroke group with %ld strokes - but the transcription is invalid - covering %ld strokes - ignoring", buf, 0x16u);

          goto LABEL_26;
        }
        if (qword_1EA3CA000 == -1)
        {
          long long v99 = (id)qword_1EA3C9F90[0];
          if (!os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
          {
LABEL_21:

            goto LABEL_27;
          }
        }
        else
        {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
          long long v99 = (id)qword_1EA3C9F90[0];
          if (!os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_21;
          }
        }
        __int16 v105 = objc_msgSend_strokeIdentifiers(v328, v100, v101, v102, v103, v104);
        uint64_t v111 = objc_msgSend_count(v105, v106, v107, v108, v109, v110);
        *(_DWORD *)std::string buf = 134217984;
        *(void *)&uint8_t buf[4] = v111;
        _os_log_impl(&dword_1C492D000, v99, OS_LOG_TYPE_DEBUG, "The CHStrokeIdentifier has no cached transcription for this stroke group with %ld strokes.", buf, 0xCu);

        goto LABEL_21;
      }
    }
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C492D000, v310, OS_LOG_TYPE_DEBUG, "The CHStrokeIdentifier implements a stroke cache.", buf, 2u);
    goto LABEL_7;
  }
  if (qword_1EA3CA000 != -1)
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v47 = (id)qword_1EA3C9F90[0];
    if (!os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_27;
    }
    goto LABEL_17;
  }
  uint64_t v47 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
  {
LABEL_17:
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C492D000, v47, OS_LOG_TYPE_DEBUG, "The CHStrokeIdentifier does not implement a stroke cache.", buf, 2u);
  }
LABEL_27:
  obunint64_t j = 0;
LABEL_28:

  id v368 = 0;
  id v369 = 0;
  uint64_t v132 = objc_msgSend_recognizableDrawingForStrokeGroup_translationVector_originalDrawing_orderedStrokesIDs_rescalingFactor_replacementStrokeGroup_(v327, v131, (uint64_t)v328, (uint64_t)&v369, (uint64_t)&v368, 0, a4, 0.0, 0.0);
  id v334 = v369;
  id v337 = v368;
  uint64_t v331 = v132;
  uint64_t v138 = objc_msgSend_strokeCount(v132, v133, v134, v135, v136, v137);
  if (v138 == objc_msgSend_count(v337, v139, v140, v141, v142, v143)) {
    goto LABEL_33;
  }
  if (qword_1EA3CA000 != -1)
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v149 = (id)qword_1EA3C9F90[0];
    if (!os_log_type_enabled(v149, OS_LOG_TYPE_FAULT)) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  uint64_t v149 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v149, OS_LOG_TYPE_FAULT))
  {
LABEL_31:
    uint64_t v155 = objc_msgSend_strokeCount(v331, v150, v151, v152, v153, v154);
    uint64_t v161 = objc_msgSend_count(v337, v156, v157, v158, v159, v160);
    *(_DWORD *)std::string buf = 134218240;
    *(void *)&uint8_t buf[4] = v155;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v161;
    _os_log_impl(&dword_1C492D000, v149, OS_LOG_TYPE_FAULT, "The strokes count in the drawing (%ld) must match the ones in the result (%ld).", buf, 0x16u);
  }
LABEL_32:

LABEL_33:
  uint64_t v162 = objc_msgSend_strokeCount(v334, v144, v145, v146, v147, v148);
  if (v162 == objc_msgSend_count(v337, v163, v164, v165, v166, v167)) {
    goto LABEL_38;
  }
  if (qword_1EA3CA000 != -1)
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v173 = (id)qword_1EA3C9F90[0];
    if (!os_log_type_enabled(v173, OS_LOG_TYPE_FAULT)) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  uint64_t v173 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v173, OS_LOG_TYPE_FAULT))
  {
LABEL_36:
    uint64_t v179 = objc_msgSend_strokeCount(v334, v174, v175, v176, v177, v178);
    uint64_t v185 = objc_msgSend_count(v337, v180, v181, v182, v183, v184);
    *(_DWORD *)std::string buf = 134218240;
    *(void *)&uint8_t buf[4] = v179;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v185;
    _os_log_impl(&dword_1C492D000, v173, OS_LOG_TYPE_FAULT, "The strokes count in the original drawing (%ld) must match the ones in the result (%ld).", buf, 0x16u);
  }
LABEL_37:

LABEL_38:
  uint64_t v330 = objc_msgSend_recognitionOptions(a1, v168, v169, v170, v171, v172);
  uint64_t v191 = objc_msgSend_recognitionLocales(a1, v186, v187, v188, v189, v190);
  uint64_t v197 = objc_msgSend_count(v191, v192, v193, v194, v195, v196);

  size_t v336 = objc_msgSend_dictionaryWithCapacity_(MEMORY[0x1E4F1CA60], v198, v197, v199, v200, v201);
  uint64_t v332 = objc_msgSend_dictionaryWithCapacity_(MEMORY[0x1E4F1CA60], v202, v197, v203, v204, v205);
  *(void *)std::string buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x3032000000;
  uint64_t v376 = sub_1C4AE38B4;
  uint64_t v377 = sub_1C4AE38C4;
  id v378 = 0;
  uint64_t v362 = 0;
  int v363 = (id *)&v362;
  uint64_t v364 = 0x3032000000;
  uint64_t v365 = sub_1C4AE38B4;
  uint64_t v366 = sub_1C4AE38C4;
  id v367 = 0;
  if (objc_msgSend_strokeGroupingOnly(a1, v206, v207, v208, v209, v210))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v211 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v211, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v370 = 0;
      _os_log_impl(&dword_1C492D000, v211, OS_LOG_TYPE_DEFAULT, "GroupingOnly option selected. Skipping the recognition and performing grouping only.", v370, 2u);
    }
  }
  group = dispatch_group_create();
  if (objc_msgSend_classification(v328, v212, v213, v214, v215, v216) == 3
    && (objc_msgSend_strokeGroupingOnly(a1, v217, v218, v219, v220, v221) & 1) == 0)
  {
    BOOL v259 = objc_msgSend_delegate(a1, v217, v218, v219, v220, v221);
    uint64_t v227 = objc_msgSend_mathRecognizer(v259, v260, v261, v262, v263, v264);

    if (v227)
    {
      uint64_t v270 = objc_msgSend_copy(v331, v265, v266, v267, v268, v269);
      if (obj && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
        objc_storeStrong(v363 + 5, obj);
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        int v271 = (id)qword_1EA3C9FA0;
        if (os_log_type_enabled(v271, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t v370 = 134217984;
          uint64_t v371 = v329;
          _os_log_impl(&dword_1C492D000, v271, OS_LOG_TYPE_DEBUG, "Math result retrieved from cache for stroke group %ld", v370, 0xCu);
        }
      }
      else
      {
        unint64_t v272 = a1[78];
        v355[0] = MEMORY[0x1E4F143A8];
        v355[1] = 3221225472;
        v355[2] = sub_1C4AE38CC;
        v355[3] = &unk_1E64E37C0;
        uint64_t v361 = v329;
        float v356 = v227;
        uint64_t v357 = a1;
        uint64_t v360 = &v362;
        id v358 = v270;
        id v359 = v330;
        dispatch_group_async(group, v272, v355);

        int v271 = v356;
      }
    }
    goto LABEL_66;
  }
  if ((objc_msgSend_strokeGroupingOnly(a1, v217, v218, v219, v220, v221) & 1) == 0)
  {
    long long v353 = 0u;
    long long v354 = 0u;
    long long v351 = 0u;
    long long v352 = 0u;
    uint64_t v227 = objc_msgSend_recognitionLocales(a1, v222, v223, v224, v225, v226);
    uint64_t v235 = objc_msgSend_countByEnumeratingWithState_objects_count_(v227, v228, (uint64_t)&v351, (uint64_t)v374, 16, v229);
    if (v235)
    {
      uint64_t v338 = *(void *)v352;
      do
      {
        for (uint64_t i = 0; i != v235; ++i)
        {
          if (*(void *)v352 != v338) {
            objc_enumerationMutation(v227);
          }
          uint64_t v237 = *(void *)(*((void *)&v351 + 1) + 8 * i);
          id v238 = objc_msgSend_delegate(a1, v230, v231, v232, v233, v234);
          long long v243 = objc_msgSend_recognizerForLocale_(v238, v239, v237, v240, v241, v242);

          if (v243)
          {
            int v249 = objc_msgSend_copy(v331, v244, v245, v246, v247, v248);
            CGRect v255 = objc_msgSend_copy(v334, v250, v251, v252, v253, v254);
            uint64_t v256 = a1[78];
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 3221225472;
            block[2] = sub_1C4AE3D2C;
            block[3] = &unk_1E64E37E8;
            uint64_t v350 = v329;
            void block[4] = v237;
            id v340 = v243;
            int v341 = a1;
            id v342 = v249;
            id v343 = obj;
            id v344 = v330;
            id v345 = v255;
            id v346 = v337;
            id v347 = v336;
            id v348 = v332;
            uint64_t v349 = buf;
            id v257 = v255;
            id v258 = v249;
            dispatch_group_async(group, v256, block);
          }
        }
        uint64_t v235 = objc_msgSend_countByEnumeratingWithState_objects_count_(v227, v230, (uint64_t)&v351, (uint64_t)v374, 16, v234);
      }
      while (v235);
    }
LABEL_66:
  }
  dispatch_group_wait(group, 0xFFFFFFFFFFFFFFFFLL);
  if (objc_msgSend_saveInputDrawings(a1, v273, v274, v275, v276, v277)) {
    id v283 = v331;
  }
  else {
    id v283 = 0;
  }
  if (objc_msgSend_count(v336, v278, v279, v280, v281, v282))
  {
    uint64_t v289 = objc_msgSend_recognitionLocales(a1, v284, v285, v286, v287, v288);
    objc_msgSend_updateMultiLocaleResultDictionary_locales_(CHMultiLocaleResultProcessor, v290, (uint64_t)v336, (uint64_t)v289, v291, v292);
  }
  uint64_t v293 = [CHStrokeGroupRecognitionResult alloc];
  int v299 = objc_msgSend_recognitionLocales(a1, v294, v295, v296, v297, v298);
  int v301 = objc_msgSend_initWithOrderedLocales_resultsByLocale_errorsByLocale_languageFitnessByLocale_mathResult_inputStrokeIdentifiers_inputDrawing_inputDrawingCutPoints_(v293, v300, (uint64_t)v299, (uint64_t)v336, *(void *)(*(void *)&buf[8] + 40), (uint64_t)v332, v363[5], v337, v283, 0);

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  BOOL v302 = (id)qword_1EA3C9FA0;
  if (os_log_type_enabled(v302, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], v303, v304, v305, v306, v307);
    *(_DWORD *)uint64_t v370 = 134218240;
    uint64_t v371 = v329;
    __int16 v372 = 2048;
    double v373 = v308 - v13;
    _os_log_impl(&dword_1C492D000, v302, OS_LOG_TYPE_DEBUG, "Recognizer finished for stroke group %ld, duration: %0.3fs", v370, 0x16u);
  }

  _Block_object_dispose(&v362, 8);
  _Block_object_dispose(buf, 8);

LABEL_77:
  return v301;
}

void sub_1C4AE1410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

id sub_1C4AE1680(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v1208 = *MEMORY[0x1E4F143B8];
  id v10 = a2;
  id v1184 = a3;
  id v1183 = a4;
  v1181 = v10;
  id v1182 = a5;
  if (!a1)
  {
    id v1185 = 0;
    goto LABEL_31;
  }
  id v1185 = v10;
  uint64_t v16 = objc_msgSend_mathResult(v1185, v11, v12, v13, v14, v15);
  if (v16)
  {

    goto LABEL_4;
  }
  uint64_t v38 = objc_msgSend_preferredLocale(v1185, v17, v18, v19, v20, v21);

  if (v38)
  {
    uint64_t v39 = objc_msgSend_recognitionResultsByLocale(v1185, v22, v23, v24, v25, v26);
    uint64_t v45 = objc_msgSend_preferredLocale(v1185, v40, v41, v42, v43, v44);
    uint64_t v50 = objc_msgSend_objectForKeyedSubscript_(v39, v46, (uint64_t)v45, v47, v48, v49);
    uint64_t v56 = objc_msgSend_topTranscription(v50, v51, v52, v53, v54, v55);

    int isTextTranscriptionVariableAssignment_outVariable = objc_msgSend_isTextTranscriptionVariableAssignment_outVariable_(CHTokenizedTextResult, v57, (uint64_t)v56, 0, v58, v59);
    if ((objc_msgSend_hasSuffix_(v56, v61, @"=", v62, v63, v64) & 1) == 0)
    {
      uint64_t v70 = objc_msgSend_recognitionLocales(a1, v65, v66, v67, v68, v69);
      int v74 = objc_msgSend_isVerticalMathEntryWithUnitForTextTranscription_locales_(CHTokenizedMathResult, v71, (uint64_t)v56, (uint64_t)v70, v72, v73) | isTextTranscriptionVariableAssignment_outVariable;

      if (v74 != 1) {
        goto LABEL_30;
      }
    }
    v1174 = v56;
    v1171 = objc_msgSend_strokeGroupWithUpdatedStrategyIdentifier_classification_(v1184, v65, @"CHMathStrokeGroupingStrategy", 3, v68, v69);
    unint64_t v1176 = sub_1C4AE0600(a1, v1171, v1183, (uint64_t)a6);
    uint64_t v80 = objc_msgSend_mathResult(v1176, v75, v76, v77, v78, v79);
    uint64_t v86 = objc_msgSend_topTranscription(v80, v81, v82, v83, v84, v85);
    uint64_t v91 = objc_msgSend_textTranscriptionForLatex_(CHTokenizedMathResult, v87, (uint64_t)v86, v88, v89, v90);

    v1169 = (void *)v91;
    uint64_t v97 = objc_msgSend_orderedLocales(v1185, v92, v93, v94, v95, v96);
    int isTextTranscriptionUnitConversion_locales = objc_msgSend_isTextTranscriptionUnitConversion_locales_(CHTokenizedTextResult, v98, (uint64_t)v56, (uint64_t)v97, v99, v100);

    uint64_t v107 = objc_msgSend_orderedLocales(v1185, v102, v103, v104, v105, v106);
    int v111 = objc_msgSend_isTextTranscriptionUnitConversion_locales_(CHTokenizedTextResult, v108, v91, (uint64_t)v107, v109, v110);
    int v1167 = isTextTranscriptionVariableAssignment_outVariable;

    int isTextTranscriptionInMathAlphabet = objc_msgSend_isTextTranscriptionInMathAlphabet_(CHTokenizedMathResult, v112, (uint64_t)v56, v113, v114, v115);
    int v120 = objc_msgSend_isTextTranscriptionVariableAssignment_outVariable_(CHTokenizedTextResult, v117, v91, 0, v118, v119);
    uint64_t v126 = objc_msgSend_mathResult(v1176, v121, v122, v123, v124, v125);
    if (objc_msgSend_hasLowConfidence(v126, v127, v128, v129, v130, v131))
    {
      BOOL v137 = 0;

      if (isTextTranscriptionUnitConversion_locales & v111 & isTextTranscriptionInMathAlphabet) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v184 = objc_msgSend_mathResult(v1176, v132, v133, v134, v135, v136);
      objc_msgSend_score(v184, v185, v186, v187, v188, v189);
      double v191 = v190;
      uint64_t v197 = objc_msgSend_recognitionResultsByLocale(v1185, v192, v193, v194, v195, v196);
      uint64_t v203 = objc_msgSend_preferredLocale(v1185, v198, v199, v200, v201, v202);
      uint64_t v208 = objc_msgSend_objectForKeyedSubscript_(v197, v204, (uint64_t)v203, v205, v206, v207);
      objc_msgSend_score(v208, v209, v210, v211, v212, v213);
      BOOL v137 = v191 > v214 * 0.7;

      if (isTextTranscriptionUnitConversion_locales & v111 & isTextTranscriptionInMathAlphabet) {
        goto LABEL_24;
      }
    }
    if ((v137 & (isTextTranscriptionUnitConversion_locales ^ 1) & 1) == 0
      && (isTextTranscriptionInMathAlphabet & v1167 & v120) == 0)
    {
      if (a6) {
        *a6 = 0;
      }
      uint64_t v215 = v1171;
      uint64_t v56 = v1174;
      uint64_t v216 = v1176;
      uint64_t v217 = v1169;
      goto LABEL_29;
    }
LABEL_24:
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v215 = v1171;
    uint64_t v56 = v1174;
    uint64_t v216 = v1176;
    uint64_t v218 = (id)qword_1EA3C9FA0;
    uint64_t v217 = v1169;
    if (os_log_type_enabled(v218, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v224 = objc_msgSend_recognitionResultsByLocale(v1185, v219, v220, v221, v222, v223);
      uint64_t v230 = objc_msgSend_preferredLocale(v1185, v225, v226, v227, v228, v229);
      uint64_t v235 = objc_msgSend_objectForKeyedSubscript_(v224, v231, (uint64_t)v230, v232, v233, v234);
      objc_msgSend_score(v235, v236, v237, v238, v239, v240);
      uint64_t v242 = v241;
      uint64_t v248 = objc_msgSend_mathResult(v1176, v243, v244, v245, v246, v247);
      objc_msgSend_score(v248, v249, v250, v251, v252, v253);
      *(_DWORD *)std::string buf = 134218496;
      *(void *)&uint8_t buf[4] = v242;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v259;
      *(_WORD *)&buf[22] = 2048;
      uint64_t v1207 = objc_msgSend_uniqueIdentifier(v1184, v254, v255, v256, v257, v258);
      _os_log_impl(&dword_1C492D000, v218, OS_LOG_TYPE_DEBUG, "Swapped text result (score=%0.3f) for math result (score=%0.3f) in group %ld.", buf, 0x20u);
    }
    id v260 = v1176;

    id v1185 = v260;
LABEL_29:

LABEL_30:
    goto LABEL_31;
  }
LABEL_4:
  if (objc_msgSend_disableMathTextSwapping(a1, v22, v23, v24, v25, v26)) {
    goto LABEL_31;
  }
  uint64_t v32 = objc_msgSend_preferredLocale(v1185, v27, v28, v29, v30, v31);
  if (v32)
  {

    goto LABEL_31;
  }
  uint64_t v143 = objc_msgSend_mathResult(v1185, v33, v34, v35, v36, v37);
  if (v143)
  {
    uint64_t v144 = objc_msgSend_recognitionLocales(a1, v138, v139, v140, v141, v142);
    uint64_t v150 = objc_msgSend_count(v144, v145, v146, v147, v148, v149);

    if (v150)
    {
      uint64_t v153 = objc_msgSend_fallbackTextScriptClassificationForMathGroup_strokeClassificationResult_fromTopNCandidate_(CHStrokeClassifier, v151, (uint64_t)v1184, (uint64_t)v1182, 2, v152);
      uint64_t v158 = objc_msgSend_numberWithInteger_(NSNumber, v154, v153, v155, v156, v157);
      uint64_t v163 = objc_msgSend_localeForScriptClass_(CHRecognizerConfiguration, v159, (uint64_t)v158, v160, v161, v162);

      if (v1182)
      {
        uint64_t v169 = objc_msgSend_recognitionLocales(a1, v164, v165, v166, v167, v168);
        if (objc_msgSend_containsObject_(v169, v170, (uint64_t)v163, v171, v172, v173))
        {
          uint64_t v178 = objc_msgSend_numberWithInteger_(NSNumber, v174, v153, v175, v176, v177);
          int v183 = objc_msgSend_containsObject_(&unk_1F203DC68, v179, (uint64_t)v178, v180, v181, v182) ^ 1;
        }
        else
        {
          int v183 = 0;
        }
      }
      else
      {
        int v183 = 0;
      }
      uint64_t v262 = objc_msgSend_mathResult(v1185, v164, v165, v166, v167, v168);
      uint64_t v268 = objc_msgSend_topTranscription(v262, v263, v264, v265, v266, v267);
      int v273 = objc_msgSend_doesLatexContainEvaluationTrigger_(CHTokenizedMathResult, v269, (uint64_t)v268, v270, v271, v272) ^ 1 | v183;

      if (v273 != 1) {
        goto LABEL_132;
      }
      uint64_t v279 = objc_msgSend_mathResult(v1185, v274, v275, v276, v277, v278);
      v1166 = v163;
      if (objc_msgSend_hasLowConfidence(v279, v280, v281, v282, v283, v284)) {
        goto LABEL_41;
      }
      size_t v290 = objc_msgSend_mathResult(v1185, v285, v286, v287, v288, v289);
      objc_msgSend_score(v290, v291, v292, v293, v294, v295);
      if (v301 < 0.6)
      {

LABEL_41:
        goto LABEL_42;
      }
      uint64_t v511 = objc_msgSend_mathResult(v1185, v296, v297, v298, v299, v300);
      uint64_t v517 = objc_msgSend_topTranscription(v511, v512, v513, v514, v515, v516);
      isTrivialTextTranscriptionAvailableForLatedouble x = objc_msgSend_isTrivialTextTranscriptionAvailableForLatex_(CHTokenizedMathResult, v518, (uint64_t)v517, v519, v520, v521);
      if (isTrivialTextTranscriptionAvailableForLatex
        && (objc_msgSend_mathResult(v1185, v522, v523, v524, v525, v526),
            v1173 = objc_claimAutoreleasedReturnValue(),
            objc_msgSend_score(v1173, v528, v529, v530, v531, v532),
            v533 < 0.8))
      {
        BOOL v534 = 1;
      }
      else
      {
        v1177 = v511;
        float v535 = objc_msgSend_mathResult(v1185, v522, v523, v524, v525, v526);
        unint64_t v541 = objc_msgSend_topTranscription(v535, v536, v537, v538, v539, v540);
        if (objc_msgSend_hasPartialRangeDataDetectorEntries_(CHTokenizedMathResult, v542, (uint64_t)v541, v543, v544, v545))
        {
          uint64_t v551 = objc_msgSend_mathResult(v1185, v546, v547, v548, v549, v550);
          objc_msgSend_score(v551, v552, v553, v554, v555, v556);
          BOOL v534 = v557 < 0.9;

          int64_t v558 = v1173;
          uint64_t v511 = v1177;
          if ((isTrivialTextTranscriptionAvailableForLatex & 1) == 0)
          {
LABEL_74:

            if (v534)
            {
LABEL_42:
              v1165 = objc_msgSend_strokeGroupWithUpdatedStrategyIdentifier_classification_(v1184, v302, @"CHBottomUpStrokeGroupingStrategy_left-to-right", 1, v303, v304);
              uint64_t v305 = sub_1C4AE0600(a1, v1165, v1183, (uint64_t)a6);
              id v1168 = v305;
              uint64_t v311 = objc_msgSend_recognitionResultsByLocale(v305, v306, v307, v308, v309, v310);
              uint64_t v317 = objc_msgSend_preferredLocale(v305, v312, v313, v314, v315, v316);
              uint64_t v322 = objc_msgSend_objectForKeyedSubscript_(v311, v318, (uint64_t)v317, v319, v320, v321);
              v1170 = objc_msgSend_topTranscription(v322, v323, v324, v325, v326, v327);

              id v333 = objc_msgSend_mathResult(v1185, v328, v329, v330, v331, v332);
              uint64_t v339 = objc_msgSend_topTranscription(v333, v334, v335, v336, v337, v338);
              objc_msgSend_textTranscriptionForLatex_(CHTokenizedMathResult, v340, (uint64_t)v339, v341, v342, v343);
              id v1175 = (id)objc_claimAutoreleasedReturnValue();

              uint64_t v349 = objc_msgSend_preferredLocale(v305, v344, v345, v346, v347, v348);

              if (!v349)
              {
                if (a6) {
                  *a6 = 0;
                }
                uint64_t v462 = CHOSLogForCategory(2);
                if (os_log_type_enabled(v462, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v468 = objc_msgSend_mathResult(v1185, v463, v464, v465, v466, v467);
                  objc_msgSend_score(v468, v469, v470, v471, v472, v473);
                  *(_DWORD *)std::string buf = 134218240;
                  *(void *)&uint8_t buf[4] = v479;
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = objc_msgSend_uniqueIdentifier(v1184, v474, v475, v476, v477, v478);
                  _os_log_impl(&dword_1C492D000, v462, OS_LOG_TYPE_ERROR, "Text recognition failed when trying to swap math result (score=%0.3f) in group %ld.", buf, 0x16u);
                }
                goto LABEL_131;
              }
              if (objc_msgSend_isEqualToString_(v1170, v350, (uint64_t)v1175, v351, v352, v353))
              {
                id v359 = objc_msgSend_mathResult(v1185, v354, v355, v356, v357, v358);
                uint64_t v365 = objc_msgSend_inputStrokeIdentifiers(v1185, v360, v361, v362, v363, v364);
                uint64_t v371 = objc_msgSend_inputStrokeIdentifiers(v305, v366, v367, v368, v369, v370);
                uint64_t v374 = objc_msgSend_mathResultWithReindexedTokens_originalStrokeIdentifiersOrdering_newStrokeIdentifiersOrdering_(CHTokenizedMathResult, v372, (uint64_t)v359, (uint64_t)v365, (uint64_t)v371, v373);

                uint64_t v375 = [CHStrokeGroupRecognitionResult alloc];
                uint64_t v381 = objc_msgSend_orderedLocales(v305, v376, v377, v378, v379, v380);
                uint64_t v387 = objc_msgSend_recognitionResultsByLocale(v305, v382, v383, v384, v385, v386);
                uint64_t v393 = objc_msgSend_errorsByLocale(v305, v388, v389, v390, v391, v392);
                uint64_t v399 = objc_msgSend_languageFitnessByLocale(v305, v394, v395, v396, v397, v398);
                uint64_t v405 = objc_msgSend_inputStrokeIdentifiers(v305, v400, v401, v402, v403, v404);
                uint64_t v411 = objc_msgSend_inputDrawing(v305, v406, v407, v408, v409, v410);
                uint64_t v417 = objc_msgSend_inputDrawingCutPoints(v305, v412, v413, v414, v415, v416);
                uint64_t v419 = objc_msgSend_initWithOrderedLocales_resultsByLocale_errorsByLocale_languageFitnessByLocale_mathResult_inputStrokeIdentifiers_inputDrawing_inputDrawingCutPoints_(v375, v418, (uint64_t)v381, (uint64_t)v387, (uint64_t)v393, (uint64_t)v399, v374, v405, v411, v417);

                uint64_t v420 = CHOSLogForCategory(2);
                if (os_log_type_enabled(v420, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v426 = objc_msgSend_recognitionResultsByLocale(v419, v421, v422, v423, v424, v425);
                  uint64_t v432 = objc_msgSend_preferredLocale(v419, v427, v428, v429, v430, v431);
                  uint64_t v437 = objc_msgSend_objectForKeyedSubscript_(v426, v433, (uint64_t)v432, v434, v435, v436);
                  objc_msgSend_score(v437, v438, v439, v440, v441, v442);
                  uint64_t v444 = v443;
                  uint64_t v450 = objc_msgSend_mathResult(v1185, v445, v446, v447, v448, v449);
                  objc_msgSend_score(v450, v451, v452, v453, v454, v455);
                  *(_DWORD *)std::string buf = 134218496;
                  *(void *)&uint8_t buf[4] = v444;
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v461;
                  *(_WORD *)&buf[22] = 2048;
                  uint64_t v1207 = objc_msgSend_uniqueIdentifier(v1184, v456, v457, v458, v459, v460);
                  _os_log_impl(&dword_1C492D000, v420, OS_LOG_TYPE_DEBUG, "Added complementary text result (score=%0.3f) running text recognition as alternative to math result (score=%0.3f) in group %ld.", buf, 0x20u);
                }
LABEL_119:
                id v1185 = v419;
                goto LABEL_131;
              }
              uint64_t v480 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v1170, v354, @" ", (uint64_t)&stru_1F20141C8, v357, v358);
              uint64_t v484 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v1175, v481, @" ", (uint64_t)&stru_1F20141C8, v482, v483);
              int isEqualToString = objc_msgSend_isEqualToString_(v480, v485, (uint64_t)v484, v486, v487, v488);

              if (isEqualToString)
              {
                uint64_t v495 = objc_msgSend_ch_mathOperatorSet(MEMORY[0x1E4F28B88], v490, v491, v492, v493, v494);
                uint64_t v500 = objc_msgSend_indexesOfCharacters_(v1175, v496, (uint64_t)v495, v497, v498, v499);
                if (objc_msgSend_count(v500, v501, v502, v503, v504, v505))
                {
                }
                else
                {
                  v787 = objc_msgSend_mathResult(v1185, v506, v507, v508, v509, v510);
                  int v793 = objc_msgSend_topTranscription(v787, v788, v789, v790, v791, v792);
                  int v798 = objc_msgSend_containsString_(v793, v794, @"\\"", v795, v796, v797);

                  if (!v798)
                  {
                    uint64_t v952 = CHOSLogForCategory(2);
                    if (os_log_type_enabled(v952, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v958 = objc_msgSend_mathResult(v1185, v953, v954, v955, v956, v957);
                      objc_msgSend_score(v958, v959, v960, v961, v962, v963);
                      uint64_t v965 = v964;
                      v971 = objc_msgSend_recognitionResultsByLocale(v305, v966, v967, v968, v969, v970);
                      unint64_t v977 = objc_msgSend_preferredLocale(v305, v972, v973, v974, v975, v976);
                      v982 = objc_msgSend_objectForKeyedSubscript_(v971, v978, (uint64_t)v977, v979, v980, v981);
                      objc_msgSend_score(v982, v983, v984, v985, v986, v987);
                      *(_DWORD *)std::string buf = 134218496;
                      *(void *)&uint8_t buf[4] = v965;
                      *(_WORD *)&buf[12] = 2048;
                      *(void *)&buf[14] = v993;
                      *(_WORD *)&buf[22] = 2048;
                      uint64_t v1207 = objc_msgSend_uniqueIdentifier(v1184, v988, v989, v990, v991, v992);
                      _os_log_impl(&dword_1C492D000, v952, OS_LOG_TYPE_DEBUG, "Swapped math result (score=%0.3f) for text result (score=%0.3f) in group %ld.", buf, 0x20u);
                    }
                    id v1168 = v305;

                    id v1185 = v1168;
                    goto LABEL_131;
                  }
                }
                if (a6) {
                  *a6 = 0;
                }
LABEL_131:

                uint64_t v163 = v1166;
                goto LABEL_132;
              }
              unint64_t v559 = objc_msgSend_recognitionResultsByLocale(v305, v490, v491, v492, v493, v494);
              unint64_t v565 = objc_msgSend_preferredLocale(v305, v560, v561, v562, v563, v564);
              uint64_t v570 = objc_msgSend_objectForKeyedSubscript_(v559, v566, (uint64_t)v565, v567, v568, v569);

              long long v1196 = 0u;
              long long v1197 = 0u;
              long long v1194 = 0u;
              long long v1195 = 0u;
              v1172 = v570;
              unint64_t v576 = objc_msgSend_transcriptionPaths(v570, v571, v572, v573, v574, v575);
              uint64_t v584 = objc_msgSend_countByEnumeratingWithState_objects_count_(v576, v577, (uint64_t)&v1194, (uint64_t)v1205, 16, v578);
              if (v584)
              {
                uint64_t v585 = *(void *)v1195;
                while (2)
                {
                  for (uint64_t i = 0; i != v584; ++i)
                  {
                    if (*(void *)v1195 != v585) {
                      objc_enumerationMutation(v576);
                    }
                    uint64_t v587 = *(void *)(*((void *)&v1194 + 1) + 8 * i);
                    uint64_t v588 = objc_msgSend_tokenColumnCount(v570, v579, v580, v581, v582, v583);
                    int v590 = objc_msgSend_transcriptionWithPath_columnRange_filterLowConfidence_(v570, v589, v587, 0, v588, 0);
                    int v596 = objc_msgSend_recognitionLocales(a1, v591, v592, v593, v594, v595);
                    char isVerticalMathEntryWithUnitForTextTranscription_locales = objc_msgSend_isVerticalMathEntryWithUnitForTextTranscription_locales_(CHTokenizedMathResult, v597, (uint64_t)v590, (uint64_t)v596, v598, v599);

                    if (isVerticalMathEntryWithUnitForTextTranscription_locales)
                    {
                      int v1162 = 1;
                      goto LABEL_77;
                    }
                    uint64_t v570 = v1172;
                  }
                  uint64_t v584 = objc_msgSend_countByEnumeratingWithState_objects_count_(v576, v579, (uint64_t)&v1194, (uint64_t)v1205, 16, v583);
                  if (v584) {
                    continue;
                  }
                  break;
                }
              }
              int v1162 = 0;
LABEL_77:

              objc_msgSend_mathResult(v1185, v603, v604, v605, v606, v607);
              long long v1192 = 0u;
              long long v1193 = 0u;
              long long v1190 = 0u;
              v1178 = long long v1191 = 0u;
              unint64_t v613 = objc_msgSend_transcriptionPaths(v1178, v608, v609, v610, v611, v612);
              uint64_t v621 = objc_msgSend_countByEnumeratingWithState_objects_count_(v613, v614, (uint64_t)&v1190, (uint64_t)v1204, 16, v615);
              if (!v621) {
                goto LABEL_85;
              }
              uint64_t v622 = *(void *)v1191;
LABEL_79:
              uint64_t v623 = 0;
              while (1)
              {
                if (*(void *)v1191 != v622) {
                  objc_enumerationMutation(v613);
                }
                uint64_t v624 = *(void *)(*((void *)&v1190 + 1) + 8 * v623);
                uint64_t v625 = objc_msgSend_tokenColumnCount(v1178, v616, v617, v618, v619, v620);
                uint64_t v628 = objc_msgSend_transcriptionWithPath_columnRange_(v1178, v626, v624, 0, v625, v627);
                int v633 = objc_msgSend_textTranscriptionForLatex_(CHTokenizedMathResult, v629, (uint64_t)v628, v630, v631, v632);
                uint64_t v639 = objc_msgSend_recognitionLocales(a1, v634, v635, v636, v637, v638);
                char v643 = objc_msgSend_isVerticalMathEntryWithUnitForTextTranscription_locales_(CHTokenizedMathResult, v640, (uint64_t)v633, (uint64_t)v639, v641, v642);

                if (v643) {
                  break;
                }
                if (v621 == ++v623)
                {
                  uint64_t v621 = objc_msgSend_countByEnumeratingWithState_objects_count_(v613, v616, (uint64_t)&v1190, (uint64_t)v1204, 16, v620);
                  if (!v621)
                  {
LABEL_85:

                    goto LABEL_87;
                  }
                  goto LABEL_79;
                }
              }

              if ((v1162 & 1) == 0)
              {
LABEL_87:
                v649 = objc_msgSend_preferredLocale(v1168, v644, v645, v646, v647, v648);
                objc_msgSend_languageFitnessForLocale_(v1168, v650, (uint64_t)v649, v651, v652, v653);
                BOOL v655 = v654 > 0.4;

                if (v655)
                {
                  unint64_t v661 = objc_msgSend_recognitionResultsByLocale(v1168, v656, v657, v658, v659, v660);
                  float v667 = objc_msgSend_preferredLocale(v1168, v662, v663, v664, v665, v666);
                  uint64_t v672 = objc_msgSend_objectForKeyedSubscript_(v661, v668, (uint64_t)v667, v669, v670, v671);
                  uint64_t v678 = objc_msgSend_topTranscription(v672, v673, v674, v675, v676, v677);
                  std::string::size_type v1180 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v678, v679, @" ", (uint64_t)&stru_1F20141C8, v680, v681);

                  uint64_t v687 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v682, v683, v684, v685, v686);
                  v1188[0] = MEMORY[0x1E4F143A8];
                  v1188[1] = 3221225472;
                  v1188[2] = sub_1C4AE58D4;
                  v1188[3] = &unk_1E64E0CD8;
                  id v688 = v687;
                  id v1189 = v688;
                  float v689 = v1180;
                  v1164 = v688;
                  objc_msgSend_enumerateTokensInTopTranscriptionPathWithBlock_(v1178, v690, (uint64_t)v1188, v691, v692, v693);
                  uint64_t v699 = objc_msgSend_countCharacters(v1180, v694, v695, v696, v697, v698);
                  if (v699 == objc_msgSend_count(v688, v700, v701, v702, v703, v704)) {
                    int v710 = v1162;
                  }
                  else {
                    int v710 = 0;
                  }
                  if (v710 == 1)
                  {
                    v1163 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v705, v706, v707, v708, v709);
                    unint64_t v711 = 0;
                    unint64_t v712 = a1 + 2;
                    for (unint64_t j = objc_msgSend_count(v688, v713, v714, v715, v716, v717);
                          ;
                          unint64_t j = objc_msgSend_count(v1164, v781, v782, v783, v784, v785))
                    {
                      if (v711 >= j)
                      {
                        v1039 = [CHTokenizedMathResult alloc];
                        id v1203 = v1163;
                        v1043 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v1040, (uint64_t)&v1203, 1, v1041, v1042);
                        v1161 = objc_msgSend_initWithBestPathTokens_(v1039, v1044, (uint64_t)v1043, v1045, v1046, v1047);

                        int8x8_t v1053 = objc_msgSend_inputStrokeIdentifiers(v1185, v1048, v1049, v1050, v1051, v1052);
                        v1059 = objc_msgSend_inputStrokeIdentifiers(v1168, v1054, v1055, v1056, v1057, v1058);
                        unint64_t v1062 = objc_msgSend_mathResultWithReindexedTokens_originalStrokeIdentifiersOrdering_newStrokeIdentifiersOrdering_(CHTokenizedMathResult, v1060, (uint64_t)v1161, (uint64_t)v1053, (uint64_t)v1059, v1061);

                        unint64_t v1068 = objc_msgSend_declaredVariablesWhileRecognized(v1178, v1063, v1064, v1065, v1066, v1067);
                        objc_msgSend_setDeclaredVariablesWhileRecognized_(v1062, v1069, (uint64_t)v1068, v1070, v1071, v1072);

                        v1073 = [CHStrokeGroupRecognitionResult alloc];
                        unint64_t v1079 = objc_msgSend_orderedLocales(v1168, v1074, v1075, v1076, v1077, v1078);
                        unint64_t v1085 = objc_msgSend_recognitionResultsByLocale(v1168, v1080, v1081, v1082, v1083, v1084);
                        unint64_t v1091 = objc_msgSend_errorsByLocale(v1168, v1086, v1087, v1088, v1089, v1090);
                        int v1097 = objc_msgSend_languageFitnessByLocale(v1168, v1092, v1093, v1094, v1095, v1096);
                        BOOL v1103 = objc_msgSend_inputStrokeIdentifiers(v1168, v1098, v1099, v1100, v1101, v1102);
                        uint8x8_t v1109 = objc_msgSend_inputDrawing(v1168, v1104, v1105, v1106, v1107, v1108);
                        v1115 = objc_msgSend_inputDrawingCutPoints(v1168, v1110, v1111, v1112, v1113, v1114);
                        id v786 = (id)objc_msgSend_initWithOrderedLocales_resultsByLocale_errorsByLocale_languageFitnessByLocale_mathResult_inputStrokeIdentifiers_inputDrawing_inputDrawingCutPoints_(v1073, v1116, (uint64_t)v1079, (uint64_t)v1085, (uint64_t)v1091, (uint64_t)v1097, v1062, v1103, v1109, v1115);

                        v1117 = CHOSLogForCategory(2);
                        if (os_log_type_enabled(v1117, OS_LOG_TYPE_DEBUG))
                        {
                          uint64_t v1123 = objc_msgSend_recognitionResultsByLocale(v786, v1118, v1119, v1120, v1121, v1122);
                          v1129 = objc_msgSend_preferredLocale(v786, v1124, v1125, v1126, v1127, v1128);
                          uint64_t v1134 = objc_msgSend_objectForKeyedSubscript_(v1123, v1130, (uint64_t)v1129, v1131, v1132, v1133);
                          objc_msgSend_score(v1134, v1135, v1136, v1137, v1138, v1139);
                          uint64_t v1141 = v1140;
                          v1147 = objc_msgSend_mathResult(v1185, v1142, v1143, v1144, v1145, v1146);
                          objc_msgSend_score(v1147, v1148, v1149, v1150, v1151, v1152);
                          uint64_t v1154 = v1153;
                          uint64_t v1160 = objc_msgSend_uniqueIdentifier(v1184, v1155, v1156, v1157, v1158, v1159);
                          *(_DWORD *)std::string buf = 134218496;
                          *(void *)&uint8_t buf[4] = v1141;
                          *(_WORD *)&buf[12] = 2048;
                          *(void *)&buf[14] = v1154;
                          *(_WORD *)&buf[22] = 2048;
                          uint64_t v1207 = v1160;
                          _os_log_impl(&dword_1C492D000, v1117, OS_LOG_TYPE_DEBUG, "Added complementary text result (score=%0.3f) running text recognition and updated the math result to match text transcription (score=%0.3f) in group %ld.", buf, 0x20u);
                        }
                        v1038 = v1163;
                        goto LABEL_129;
                      }
                      unint64_t v723 = objc_msgSend_objectAtIndexedSubscript_(v688, v719, v711, v720, v721, v722);
                      uint64_t v728 = objc_msgSend_rangeOfComposedCharacterSequenceAtIndex_(v689, v724, v711, v725, v726, v727);
                      uint64_t v732 = objc_msgSend_substringWithRange_(v689, v729, v728, (uint64_t)v729, v730, v731);
                      v738 = objc_msgSend_string(v723, v733, v734, v735, v736, v737);
                      int v743 = objc_msgSend_isEqualToString_(v738, v739, (uint64_t)v732, v740, v741, v742);

                      if (v743)
                      {
                        objc_msgSend_addObject_(v1163, v744, (uint64_t)v723, v746, v747, v748);
                        goto LABEL_107;
                      }
                      v749 = objc_msgSend_mutableCopy(v723, v744, v745, v746, v747, v748);
                      objc_msgSend_setString_(v749, v750, (uint64_t)v732, v751, v752, v753);
                      id v754 = v732;
                      uint64_t v760 = (const char *)objc_msgSend_UTF8String(v754, v755, v756, v757, v758, v759);
                      size_t v761 = strlen(v760);
                      if (v761 >= 0x7FFFFFFFFFFFFFF8) {
                        sub_1C4949B7C();
                      }
                      size_t v762 = v761;
                      if (v761 >= 0x17)
                      {
                        uint64_t v764 = (v761 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v761 | 7) != 0x17) {
                          uint64_t v764 = v761 | 7;
                        }
                        uint64_t v765 = v764 + 1;
                        size_t v763 = operator new(v764 + 1);
                        *(void *)&buf[8] = v762;
                        *(void *)&uint8_t buf[16] = v765 | 0x8000000000000000;
                        *(void *)std::string buf = v763;
                      }
                      else
                      {
                        buf[23] = v761;
                        size_t v763 = buf;
                        if (!v761) {
                          goto LABEL_104;
                        }
                      }
                      memmove(v763, v760, v762);
LABEL_104:
                      v763[v762] = 0;
                      int v766 = sub_1C493DB2C(v712, buf);
                      objc_msgSend_setProperties_(v749, v767, v766, v768, v769, v770);
                      if ((buf[23] & 0x80000000) != 0) {
                        operator delete(*(void **)buf);
                      }
                      uint64_t v776 = objc_msgSend_copy(v749, v771, v772, v773, v774, v775);
                      objc_msgSend_addObject_(v1163, v777, (uint64_t)v776, v778, v779, v780);

LABEL_107:
                      ++v711;
                      float v689 = v1180;
                      id v688 = v1164;
                    }
                  }
                  unint64_t v994 = CHOSLogForCategory(2);
                  if (os_log_type_enabled(v994, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v1000 = objc_msgSend_mathResult(v1185, v995, v996, v997, v998, v999);
                    objc_msgSend_score(v1000, v1001, v1002, v1003, v1004, v1005);
                    uint64_t v1007 = v1006;
                    unint64_t v1013 = objc_msgSend_recognitionResultsByLocale(v1168, v1008, v1009, v1010, v1011, v1012);
                    long long v1019 = objc_msgSend_preferredLocale(v1168, v1014, v1015, v1016, v1017, v1018);
                    std::string::size_type v1024 = objc_msgSend_objectForKeyedSubscript_(v1013, v1020, (uint64_t)v1019, v1021, v1022, v1023);
                    objc_msgSend_score(v1024, v1025, v1026, v1027, v1028, v1029);
                    uint64_t v1031 = v1030;
                    uint64_t v1037 = objc_msgSend_uniqueIdentifier(v1184, v1032, v1033, v1034, v1035, v1036);
                    *(_DWORD *)std::string buf = 134218496;
                    *(void *)&uint8_t buf[4] = v1007;
                    *(_WORD *)&buf[12] = 2048;
                    *(void *)&buf[14] = v1031;
                    *(_WORD *)&buf[22] = 2048;
                    uint64_t v1207 = v1037;
                    _os_log_impl(&dword_1C492D000, v994, OS_LOG_TYPE_DEBUG, "Swapped math result (score=%0.3f) for text result (score=%0.3f) in group %ld.", buf, 0x20u);
                  }
                  id v786 = v1168;
                  v1038 = v1185;
LABEL_129:

LABEL_130:
                  id v1185 = v786;
                  goto LABEL_131;
                }
              }
              if (a6) {
                *a6 = 0;
              }
              id v786 = v1185;
              goto LABEL_130;
            }
LABEL_115:
            uint64_t v163 = v1166;
            uint64_t v799 = objc_msgSend_mathResult(v1185, v302, v601, v602, v303, v304);
            uint64_t v805 = objc_msgSend_topTranscription(v799, v800, v801, v802, v803, v804);
            int v810 = objc_msgSend_isTrivialTextTranscriptionAvailableForLatex_(CHTokenizedMathResult, v806, (uint64_t)v805, v807, v808, v809);

            if (!v810)
            {
LABEL_132:

              goto LABEL_31;
            }
            v816 = objc_msgSend_recognitionLocales(a1, v811, v812, v813, v814, v815);
            v1165 = objc_msgSend_firstObject(v816, v817, v818, v819, v820, v821);

            v827 = objc_msgSend_mathResult(v1185, v822, v823, v824, v825, v826);
            unsigned int v831 = objc_msgSend_tokenizedTextResultFromTokenizedMathResult_locale_(CHMathPostProcessingManager, v828, (uint64_t)v827, (uint64_t)v1165, v829, v830);

            id v1168 = v831;
            objc_msgSend_strokeGroupWithUpdatedStrategyIdentifier_classification_(v1184, v832, @"CHBottomUpStrokeGroupingStrategy_left-to-right", 1, v833, v834);
            v1170 = id v1187 = 0;
            id v836 = (id)objc_msgSend_recognizableDrawingForStrokeGroup_translationVector_originalDrawing_orderedStrokesIDs_rescalingFactor_replacementStrokeGroup_(v1183, v835, (uint64_t)v1170, 0, (uint64_t)&v1187, 0, a6, 0.0, 0.0);
            id v1175 = v1187;
            objc_msgSend_setInputStrokeIdentifiers_(v831, v837, (uint64_t)v1175, v838, v839, v840);
            objc_msgSend_score(v831, v841, v842, v843, v844, v845);
            v1186[0] = v846;
            objc_msgSend_score(v831, v847, v848, v849, v850, v851);
            v1186[1] = v852;
            v856 = objc_msgSend_value_withObjCType_(MEMORY[0x1E4F29238], v853, (uint64_t)v1186, (uint64_t)"{?=dd}", v854, v855);
            v862 = objc_msgSend_mathResult(v1185, v857, v858, v859, v860, v861);
            int v868 = objc_msgSend_inputStrokeIdentifiers(v1185, v863, v864, v865, v866, v867);
            v874 = objc_msgSend_inputStrokeIdentifiers(v831, v869, v870, v871, v872, v873);
            int v877 = objc_msgSend_mathResultWithReindexedTokens_originalStrokeIdentifiersOrdering_newStrokeIdentifiersOrdering_(CHTokenizedMathResult, v875, (uint64_t)v862, (uint64_t)v868, (uint64_t)v874, v876);

            uint64_t v878 = [CHStrokeGroupRecognitionResult alloc];
            v1202 = v1165;
            uint64_t v882 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v879, (uint64_t)&v1202, 1, v880, v881);
            v1200 = v1165;
            id v1201 = v1168;
            v885 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v883, (uint64_t)&v1201, (uint64_t)&v1200, 1, v884);
            id v1198 = v1165;
            v1199 = v856;
            int v888 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v886, (uint64_t)&v1199, (uint64_t)&v1198, 1, v887);
            uint64_t v894 = objc_msgSend_inputStrokeIdentifiers(v1168, v889, v890, v891, v892, v893);
            int v900 = objc_msgSend_inputDrawing(v1185, v895, v896, v897, v898, v899);
            uint64_t v906 = objc_msgSend_inputDrawingCutPoints(v1185, v901, v902, v903, v904, v905);
            uint64_t v419 = objc_msgSend_initWithOrderedLocales_resultsByLocale_errorsByLocale_languageFitnessByLocale_mathResult_inputStrokeIdentifiers_inputDrawing_inputDrawingCutPoints_(v878, v907, (uint64_t)v882, (uint64_t)v885, 0, (uint64_t)v888, v877, v894, v900, v906);

            v908 = CHOSLogForCategory(2);
            if (os_log_type_enabled(v908, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v914 = objc_msgSend_recognitionResultsByLocale(v419, v909, v910, v911, v912, v913);
              unint64_t v920 = objc_msgSend_preferredLocale(v419, v915, v916, v917, v918, v919);
              v925 = objc_msgSend_objectForKeyedSubscript_(v914, v921, (uint64_t)v920, v922, v923, v924);
              objc_msgSend_score(v925, v926, v927, v928, v929, v930);
              uint64_t v932 = v931;
              uint64_t v938 = objc_msgSend_mathResult(v1185, v933, v934, v935, v936, v937);
              objc_msgSend_score(v938, v939, v940, v941, v942, v943);
              uint64_t v945 = v944;
              uint64_t v951 = objc_msgSend_uniqueIdentifier(v1184, v946, v947, v948, v949, v950);
              *(_DWORD *)std::string buf = 134218496;
              *(void *)&uint8_t buf[4] = v932;
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v945;
              *(_WORD *)&buf[22] = 2048;
              uint64_t v1207 = v951;
              _os_log_impl(&dword_1C492D000, v908, OS_LOG_TYPE_DEBUG, "Added complementary text result (score=%0.3f) transliterated from math result (score=%0.3f) in group %ld.", buf, 0x20u);
            }
            goto LABEL_119;
          }
LABEL_73:

          goto LABEL_74;
        }

        if (!isTrivialTextTranscriptionAvailableForLatex)
        {

          goto LABEL_115;
        }
        BOOL v534 = 0;
        uint64_t v511 = v1177;
      }
      int64_t v558 = v1173;
      goto LABEL_73;
    }
  }
LABEL_31:

  return v1185;
}

void sub_1C4AE3010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,_Unwind_Exception *exception_object,void *a23,void *a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4AE38B4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4AE38C4(uint64_t a1)
{
}

void sub_1C4AE38CC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], a2, a3, a4, a5, a6);
  double v8 = v7;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v9 = (id)qword_1EA3C9FA0;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    id v10 = *(void **)(a1 + 72);
    *(_DWORD *)std::string buf = 134217984;
    int v74 = v10;
    _os_log_impl(&dword_1C492D000, v9, OS_LOG_TYPE_DEBUG, "Beginning math recognizer request for stroke group %ld", buf, 0xCu);
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v12 = *(id *)(a1 + 32);
    objc_msgSend_setDeclaredVariables_(v12, v42, *(void *)(*(void *)(a1 + 40) + 8), v43, v44, v45);
    uint64_t v51 = objc_msgSend_recognitionLocales(*(void **)(a1 + 40), v46, v47, v48, v49, v50);
    objc_msgSend_setLocales_(v12, v52, (uint64_t)v51, v53, v54, v55);

    uint64_t v56 = *(void *)(a1 + 48);
    uint64_t v57 = *(void *)(a1 + 56);
    v71[0] = MEMORY[0x1E4F143A8];
    v71[1] = 3221225472;
    v71[2] = sub_1C4AE3D24;
    v71[3] = &unk_1E64E3798;
    void v71[4] = *(void *)(a1 + 40);
    uint64_t v60 = objc_msgSend_mathRecognitionResultForDrawing_options_shouldCancel_(v12, v58, v56, v57, (uint64_t)v71, v59);
    uint64_t v61 = *(void *)(*(void *)(a1 + 64) + 8);
    uint64_t v62 = *(void **)(v61 + 40);
    *(void *)(v61 + 40) = v60;

    goto LABEL_17;
  }
  if (qword_1EA3CA000 != -1)
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v11 = (id)qword_1EA3C9FA0;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v11 = (id)qword_1EA3C9FA0;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
LABEL_8:
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C492D000, v11, OS_LOG_TYPE_DEBUG, "Running remote recognition", buf, 2u);
  }
LABEL_9:

  id v12 = *(id *)(a1 + 32);
  objc_msgSend_setDeclaredVariables_(v12, v13, *(void *)(*(void *)(a1 + 40) + 8), v14, v15, v16);
  uint64_t v22 = objc_msgSend_recognitionLocales(*(void **)(a1 + 40), v17, v18, v19, v20, v21);
  objc_msgSend_setLocales_(v12, v23, (uint64_t)v22, v24, v25, v26);

  uint64_t v27 = *(void *)(a1 + 48);
  uint64_t v28 = *(void *)(a1 + 56);
  id v72 = 0;
  uint64_t v31 = objc_msgSend_mathRecognitionResultForDrawing_options_error_(v12, v29, v27, v28, (uint64_t)&v72, v30);
  id v32 = v72;
  uint64_t v33 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v34 = *(void **)(v33 + 40);
  *(void *)(v33 + 40) = v31;

  if (v32)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v35 = (id)qword_1EA3C9FB0;
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      uint64_t v41 = objc_msgSend_description(v32, v36, v37, v38, v39, v40);
      *(_DWORD *)std::string buf = 138412290;
      int v74 = v41;
      _os_log_impl(&dword_1C492D000, v35, OS_LOG_TYPE_ERROR, "Remote Recognition error: %@", buf, 0xCu);
    }
  }

LABEL_17:
  if (qword_1EA3CA000 != -1)
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    uint64_t v63 = (id)qword_1EA3C9FA0;
    if (!os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  uint64_t v63 = (id)qword_1EA3C9FA0;
  if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
  {
LABEL_19:
    uint64_t v69 = *(void **)(a1 + 72);
    objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], v64, v65, v66, v67, v68);
    *(_DWORD *)std::string buf = 134218240;
    int v74 = v69;
    __int16 v75 = 2048;
    double v76 = v70 - v8;
    _os_log_impl(&dword_1C492D000, v63, OS_LOG_TYPE_DEBUG, "Finished math recognizer request for stroke group %ld. Duration: %0.3f", buf, 0x16u);
  }
LABEL_20:
}

void sub_1C4AE3CD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4AE3D24(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_cancelled(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

void sub_1C4AE3D2C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v551 = *MEMORY[0x1E4F143B8];
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], a2, a3, a4, a5, a6);
  double v467 = v7;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v480 = a1;
  double v8 = (id)qword_1EA3C9FA0;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v14 = *(void *)(v480 + 120);
    uint64_t v15 = objc_msgSend_localeIdentifier(*(void **)(v480 + 32), v9, v10, v11, v12, v13);
    *(_DWORD *)std::string buf = 134218242;
    *(void *)&uint8_t buf[4] = v14;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v15;
    _os_log_impl(&dword_1C492D000, v8, OS_LOG_TYPE_DEBUG, "Beginning text recognizer request for stroke group %ld, locale %@", buf, 0x16u);
  }
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    objc_msgSend_setDeclaredVariables_(*(void **)(v480 + 40), v16, *(void *)(*(void *)(v480 + 48) + 8), v18, v19, v20);
    uint64_t v21 = objc_opt_class();
    unint64_t v485 = objc_msgSend_maxRequestStrokeCountForLocale_(v21, v22, *(void *)(v480 + 32), v23, v24, v25);
  }
  else
  {
    unint64_t v485 = objc_msgSend_strokeCount(*(void **)(v480 + 56), v16, v17, v18, v19, v20);
  }
  uint64_t v26 = v480;
  if (*(void *)(v480 + 64))
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v30 = *(id *)(v480 + 64);
      id v502 = 0;
      if (!v30) {
        goto LABEL_120;
      }
      goto LABEL_11;
    }
  }
  uint64_t v69 = *(void *)(v480 + 48);
  uint64_t v71 = *(void **)(v480 + 32);
  double v70 = *(void **)(v480 + 40);
  id v72 = *(void **)(v480 + 72);
  id v479 = *(id *)(v480 + 56);
  id v482 = v70;
  id v466 = v71;
  id v477 = v72;
  uint64_t v470 = v69;
  if (!v69)
  {
    id v394 = 0;
    id v390 = 0;
    goto LABEL_106;
  }
  uint64_t v468 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v73, v74, v75, v76, v77);
  uint64_t v78 = (void *)MEMORY[0x1E4F28E60];
  uint64_t v84 = objc_msgSend_strokeCount(v479, v79, v80, v81, v82, v83);
  uint64_t v487 = objc_msgSend_indexSetWithIndexesInRange_(v78, v85, 0, v84, v86, v87);
  unint64_t v481 = objc_msgSend_strokeCount(v479, v88, v89, v90, v91, v92);
  uint64_t v483 = 0;
  id v98 = 0;
  uint64_t v475 = 0;
  uint64_t v476 = 0;
  char v471 = 1;
  while (objc_msgSend_count(v487, v93, v94, v95, v96, v97))
  {
    id v104 = v479;
    if (v481 <= v485)
    {
      id v121 = v487;
      id v497 = 0;
      uint64_t v486 = v104;
    }
    else
    {
      *(void *)&long long v545 = 0;
      *((void *)&v545 + 1) = &v545;
      uint64_t v546 = 0x2020000000;
      uint64_t v547 = 0;
      uint64_t v105 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v99, v100, v101, v102, v103);
      int v111 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v106, v107, v108, v109, v110);
      v536[0] = MEMORY[0x1E4F143A8];
      v536[1] = 3221225472;
      v536[2] = sub_1C4AE58E0;
      v536[3] = &unk_1E64E3838;
      uint64_t v539 = &v545;
      unint64_t v540 = v485;
      id v112 = v105;
      id v537 = v112;
      id v497 = v111;
      id v538 = v497;
      objc_msgSend_enumerateIndexesUsingBlock_(v487, v113, (uint64_t)v536, v114, v115, v116);
      uint64_t v486 = objc_msgSend_drawingWithStrokesFromIndexSet_(v104, v117, (uint64_t)v112, v118, v119, v120);

      _Block_object_dispose(&v545, 8);
      id v121 = v112;
    }
    uint64_t v488 = v121;
    uint64_t v496 = v104;
    if (isKindOfClass)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v122 = (id)qword_1EA3C9FA0;
      if (os_log_type_enabled(v122, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v545) = 0;
        _os_log_impl(&dword_1C492D000, v122, OS_LOG_TYPE_DEBUG, "Running remote recognition", (uint8_t *)&v545, 2u);
      }

      id v123 = v482;
      id v535 = v98;
      uint64_t v489 = objc_msgSend_textRecognitionResultForDrawing_options_error_(v123, v124, (uint64_t)v486, (uint64_t)v477, (uint64_t)&v535, v125);
      id v484 = v535;

      if (v484)
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        uint64_t v126 = (id)qword_1EA3C9FB0;
        if (os_log_type_enabled(v126, OS_LOG_TYPE_ERROR))
        {
          uint64_t v132 = objc_msgSend_description(v484, v127, v128, v129, v130, v131);
          LODWORD(v545) = 138412290;
          *(void *)((char *)&v545 + 4) = v132;
          _os_log_impl(&dword_1C492D000, v126, OS_LOG_TYPE_ERROR, "Remote Recognition error: %@", (uint8_t *)&v545, 0xCu);
        }
      }
      else
      {
        id v484 = 0;
      }
    }
    else
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v133 = (id)qword_1EA3C9FA0;
      if (os_log_type_enabled(v133, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v545) = 0;
        _os_log_impl(&dword_1C492D000, v133, OS_LOG_TYPE_DEBUG, "Running local recognition", (uint8_t *)&v545, 2u);
      }

      v534[0] = MEMORY[0x1E4F143A8];
      v534[1] = 3221225472;
      v534[2] = sub_1C4AE59C0;
      v534[3] = &unk_1E64E3798;
      v534[4] = v470;
      id v134 = v482;
      uint64_t v489 = objc_msgSend_textRecognitionResultForDrawing_options_shouldCancel_(v134, v135, (uint64_t)v486, (uint64_t)v477, (uint64_t)v534, v136);
      id v484 = v98;
    }

    if (v489)
    {
      if (v481 <= v485)
      {
        id v149 = v489;

        id v176 = v488;
        char v471 = 0;
      }
      else
      {
        uint64_t v142 = objc_msgSend_tokenColumns(v489, v137, v138, v139, v140, v141);
        uint64_t v148 = objc_msgSend_count(v142, v143, v144, v145, v146, v147);

        id v149 = v483;
        uint64_t v473 = v148 - 1;
        if (objc_msgSend_count(v488, v150, v151, v152, v153, v154) >= v485)
        {
          uint64_t v160 = objc_msgSend_tokenColumns(v489, v155, v156, v157, v158, v159);
          BOOL v166 = (unint64_t)objc_msgSend_count(v160, v161, v162, v163, v164, v165) > 2;

          id v149 = v483;
          if (v166)
          {
            uint64_t v167 = objc_msgSend_tokenColumns(v489, v155, v156, v157, v158, v159);
            uint64_t v173 = objc_msgSend_count(v167, v168, v169, v170, v171, v172);

            uint64_t v473 = v173 - 3;
            id v149 = v483;
          }
        }
        uint64_t v174 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v155, v156, v157, v158, v159);
        id v176 = (id)v174;
        if ((v473 & 0x8000000000000000) == 0)
        {
          uint64_t v472 = 0;
          uint64_t v469 = (void *)v174;
          do
          {
            uint64_t v177 = objc_msgSend_tokenColumns(v489, v137, v175, v139, v140, v141);
            uint64_t v474 = objc_msgSend_objectAtIndexedSubscript_(v177, v178, v472, v179, v180, v181);

            uint64_t v492 = objc_alloc_init(CHMutableTokenizedResultColumn);
            long long v532 = 0u;
            long long v533 = 0u;
            long long v530 = 0u;
            long long v531 = 0u;
            objc_msgSend_textTokenRows(v474, v182, v183, v184, v185, v186);
            obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
            uint64_t v493 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v187, (uint64_t)&v530, (uint64_t)buf, 16, v188);
            if (v493)
            {
              uint64_t v491 = *(void *)v531;
              do
              {
                for (uint64_t i = 0; i != v493; ++i)
                {
                  if (*(void *)v531 != v491) {
                    objc_enumerationMutation(obj);
                  }
                  uint64_t v194 = *(void **)(*((void *)&v530 + 1) + 8 * i);
                  uint64_t v195 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v189, v190, v191, v192, v193);
                  long long v528 = 0u;
                  long long v529 = 0u;
                  long long v526 = 0u;
                  long long v527 = 0u;
                  id v495 = v194;
                  uint64_t v500 = (void *)v195;
                  uint64_t v198 = objc_msgSend_countByEnumeratingWithState_objects_count_(v495, v196, (uint64_t)&v526, (uint64_t)v541, 16, v197);
                  if (v198)
                  {
                    uint64_t v499 = *(void *)v527;
                    do
                    {
                      uint64_t v501 = v198;
                      for (uint64_t j = 0; j != v501; ++j)
                      {
                        if (*(void *)v527 != v499) {
                          objc_enumerationMutation(v495);
                        }
                        uint64_t v205 = *(void **)(*((void *)&v526 + 1) + 8 * j);
                        uint64_t v206 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v199, v200, v201, v202, v203);
                        uint64_t v212 = objc_msgSend_strokeIndexes(v205, v207, v208, v209, v210, v211);
                        v523[0] = MEMORY[0x1E4F143A8];
                        v523[1] = 3221225472;
                        v523[2] = sub_1C4AE59C8;
                        v523[3] = &unk_1E64E29C8;
                        id v524 = v497;
                        id v213 = v206;
                        id v525 = v213;
                        objc_msgSend_enumerateIndexesUsingBlock_(v212, v214, (uint64_t)v523, v215, v216, v217);

                        objc_msgSend_boundsForStrokeIndexes_(v496, v218, (uint64_t)v213, v219, v220, v221);
                        double v223 = v222;
                        double v225 = v224;
                        double v227 = v226;
                        double v229 = v228;
                        uint64_t v230 = [CHTokenizedTextResultToken alloc];
                        size_t v236 = objc_msgSend_string(v205, v231, v232, v233, v234, v235);
                        uint64_t v242 = objc_msgSend_wordID(v205, v237, v238, v239, v240, v241);
                        objc_msgSend_recognitionScore(v205, v243, v244, v245, v246, v247);
                        double v249 = v248;
                        objc_msgSend_recognitionScore(v205, v250, v251, v252, v253, v254);
                        double v256 = v255;
                        objc_msgSend_combinedScore(v205, v257, v258, v259, v260, v261);
                        uint64_t v263 = v262;
                        objc_msgSend_alignmentScore(v205, v264, v265, v266, v267, v268);
                        double v270 = v269;
                        uint64_t v276 = objc_msgSend_properties(v205, v271, v272, v273, v274, v275);
                        uint64_t v282 = objc_msgSend_recognizerSourceLocale(v205, v277, v278, v279, v280, v281);
                        double v503 = v270;
                        id v504 = v263;
                        double v506 = v256;
                        double v508 = v229;
                        double v283 = v223;
                        uint64_t v289 = objc_msgSend_inputSources(v205, v284, v285, v286, v287, v288);
                        uint64_t v295 = objc_msgSend_substrokeCount(v205, v290, v291, v292, v293, v294);
                        objc_msgSend_originalBounds(v205, v296, v297, v298, v299, v300);
                        uint64_t v307 = v306;
                        uint64_t v309 = v308;
                        uint64_t v311 = v310;
                        uint64_t v313 = v312;
                        if (v205)
                        {
                          objc_msgSend_principalLines(v205, v301, v302, v303, v304, v305);
                        }
                        else
                        {
                          long long v521 = 0u;
                          long long v522 = 0u;
                          long long v519 = 0u;
                          long long v520 = 0u;
                          long long v517 = 0u;
                          long long v518 = 0u;
                          long long v515 = 0u;
                          long long v516 = 0u;
                        }
                        uint64_t v314 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v230, v301, (uint64_t)v236, (uint64_t)v213, v242, v276, v282, v289, v249, v506, *(double *)&v504, v503, v283, v225, v227, v508, v295, v307, v309,
                                         v311,
                                         v313,
                                         &v515);

                        objc_msgSend_addObject_(v500, v315, (uint64_t)v314, v316, v317, v318);
                      }
                      uint64_t v198 = objc_msgSend_countByEnumeratingWithState_objects_count_(v495, v199, (uint64_t)&v526, (uint64_t)v541, 16, v203);
                    }
                    while (v198);
                  }

                  objc_msgSend_addTokenRowWithTokens_(v492, v319, (uint64_t)v500, v320, v321, v322);
                }
                uint64_t v493 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v189, (uint64_t)&v530, (uint64_t)buf, 16, v193);
              }
              while (v493);
            }

            objc_msgSend_addObject_(v468, v323, (uint64_t)v492, v324, v325, v326);
            uint64_t v332 = objc_msgSend_strokeIndexes(v474, v327, v328, v329, v330, v331);
            objc_msgSend_addIndexes_(v469, v333, (uint64_t)v332, v334, v335, v336);

            BOOL v337 = v472++ == v473;
            id v149 = v483;
            id v176 = v469;
          }
          while (!v337);
        }
      }
      ++v476;
      uint64_t v345 = v497;
      uint64_t v483 = v149;
      if (v497)
      {
LABEL_76:
        v512[0] = MEMORY[0x1E4F143A8];
        v512[1] = 3221225472;
        v512[2] = sub_1C4AE5A6C;
        v512[3] = &unk_1E64E29C8;
        id v498 = v345;
        id v513 = v498;
        id v514 = v487;
        uint64_t v346 = v176;
        objc_msgSend_enumerateIndexesUsingBlock_(v176, v347, (uint64_t)v512, v348, v349, v350);

        goto LABEL_79;
      }
    }
    else if (v475 < 2)
    {
      ++v475;
      id v176 = 0;
      uint64_t v345 = v497;
      if (v497) {
        goto LABEL_76;
      }
    }
    else
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v338 = (id)qword_1EA3C9FB0;
      if (os_log_type_enabled(v338, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v545) = 134217984;
        *(void *)((char *)&v545 + 4) = v475 + 1;
        _os_log_impl(&dword_1C492D000, v338, OS_LOG_TYPE_ERROR, "Failed to run recognition after %li failed attempts", (uint8_t *)&v545, 0xCu);
      }

      id v339 = v488;
      objc_msgSend_removeAllIndexes(v487, v340, v341, v342, v343, v344);

      char v471 = 0;
      uint64_t v483 = 0;
      ++v475;
      id v176 = v339;
    }
    uint64_t v346 = v176;
    objc_msgSend_removeIndexes_(v487, v137, (uint64_t)v176, v139, v140, v141);
LABEL_79:

    id v98 = v484;
  }
  if (v471)
  {
    uint64_t v351 = [CHMutableTokenizedTextResult alloc];
    uint64_t v357 = objc_msgSend_recognizerGenerationIdentifier(v483, v352, v353, v354, v355, v356);
    id v359 = objc_msgSend_initWithTokenColumns_transcriptionPaths_scores_recognizerGenerationIdentifier_(v351, v358, (uint64_t)v468, MEMORY[0x1E4F1CBF0], MEMORY[0x1E4F1CBF0], v357);
    if ((objc_msgSend_hasValidColumns(v359, v360, v361, v362, v363, v364) & 1) == 0)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v370 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v370, OS_LOG_TYPE_FAULT))
      {
        uint64_t v375 = objc_msgSend_descriptionWithSensitiveInformation_(v359, v371, 0, v372, v373, v374);
        LODWORD(v545) = 138412290;
        *(void *)((char *)&v545 + 4) = v375;
        _os_log_impl(&dword_1C492D000, v370, OS_LOG_TYPE_FAULT, "Unexpected tokenized result with invalid columns passed to transcriptionPathsForTokenizedTextResult, descriptiounint64_t n = %@", (uint8_t *)&v545, 0xCu);
      }
    }
    if (objc_msgSend_hasValidColumns(v359, v365, v366, v367, v368, v369))
    {
      id v376 = v482;
      uint64_t v379 = v376;
      if (isKindOfClass)
      {
        id v510 = 0;
        id v511 = 0;
        uint64_t v380 = objc_msgSend_transcriptionPathsForTokenizedTextResult_withHistory_scores_error_(v376, v377, (uint64_t)v359, 0, (uint64_t)&v511, (uint64_t)&v510);
        id v381 = v511;
        id v382 = v510;
        if (!v380)
        {
          uint64_t v383 = CHOSLogForCategory(4);
          if (os_log_type_enabled(v383, OS_LOG_TYPE_ERROR))
          {
            uint64_t v389 = objc_msgSend_description(v382, v384, v385, v386, v387, v388);
            LODWORD(v545) = 138412290;
            *(void *)((char *)&v545 + 4) = v389;
            _os_log_impl(&dword_1C492D000, v383, OS_LOG_TYPE_ERROR, "Remote call to compute transcription paths error: %@", (uint8_t *)&v545, 0xCu);
          }
          uint64_t v380 = 0;
          goto LABEL_99;
        }
      }
      else
      {
        id v511 = 0;
        uint64_t v380 = objc_msgSend_bestTranscriptionPathsForTokenizedResult_scores_history_(v376, v377, (uint64_t)v359, (uint64_t)&v511, 0, v378);
        id v381 = v511;
        id v382 = 0;
      }

      if (v381 && v380) {
        objc_msgSend_setTranscriptionPaths_scores_(v359, v391, (uint64_t)v380, (uint64_t)v381, v392, v393);
      }
LABEL_99:
      id v390 = v359;
    }
    else
    {
      id v390 = 0;
      uint64_t v380 = v483;
    }
  }
  else
  {
    id v390 = v483;
  }
  id v394 = v98;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v395 = (id)qword_1EA3C9FA0;
  if (os_log_type_enabled(v395, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(v545) = 134217984;
    *(void *)((char *)&v545 + 4) = v476;
    _os_log_impl(&dword_1C492D000, v395, OS_LOG_TYPE_DEBUG, "Recognition successful using %li sub-drawings", (uint8_t *)&v545, 0xCu);
  }

LABEL_106:
  id v502 = v394;
  id v30 = *(id *)(v480 + 48);
  uint64_t v396 = *(void **)(v480 + 80);
  id v397 = v390;
  id v507 = v396;
  if (v30)
  {
    uint64_t v509 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v398, v399, v400, v401, v402);
    long long v543 = 0u;
    long long v544 = 0u;
    *(_OWORD *)unint64_t v541 = 0u;
    long long v542 = 0u;
    uint64_t v408 = objc_msgSend_transcriptionPaths(v397, v403, v404, v405, v406, v407);
    id v505 = v408;
    uint64_t v416 = objc_msgSend_countByEnumeratingWithState_objects_count_(v408, v409, (uint64_t)v541, (uint64_t)buf, 16, v410);
    if (v416)
    {
      uint64_t v417 = *(void *)v542;
      do
      {
        for (uint64_t k = 0; k != v416; ++k)
        {
          if (*(void *)v542 != v417) {
            objc_enumerationMutation(v505);
          }
          uint64_t v419 = *(void *)(*(void *)&v541[8] + 8 * k);
          uint64_t v420 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v411, v412, v413, v414, v415);
          uint64_t v426 = objc_msgSend_tokenColumnCount(v397, v421, v422, v423, v424, v425);
          *(void *)&long long v515 = MEMORY[0x1E4F143A8];
          *((void *)&v515 + 1) = 3221225472;
          *(void *)&long long v516 = sub_1C4AE563C;
          *((void *)&v516 + 1) = &unk_1E64E3810;
          *(void *)&long long v517 = v507;
          id v427 = v420;
          *((void *)&v517 + 1) = v427;
          objc_msgSend_enumerateTokensInTranscriptionPath_columnRange_tokenProcessingBlock_(v397, v428, v419, 0, v426, (uint64_t)&v515);
          objc_msgSend_addObject_(v509, v429, (uint64_t)v427, v430, v431, v432);
        }
        uint64_t v408 = v505;
        uint64_t v416 = objc_msgSend_countByEnumeratingWithState_objects_count_(v505, v411, (uint64_t)v541, (uint64_t)buf, 16, v415);
      }
      while (v416);
    }

    uint64_t v438 = objc_msgSend_transcriptionPathScores(v397, v433, v434, v435, v436, v437);
    objc_msgSend_modifiedResultWithBestPathTokens_pathProbabilities_(v397, v439, (uint64_t)v509, (uint64_t)v438, v440, v441);
    id v30 = (id)objc_claimAutoreleasedReturnValue();
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v442 = (id)qword_1EA3C9FA0;
  if (os_log_type_enabled(v442, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v448 = *(void *)(v480 + 120);
    uint64_t v449 = objc_msgSend_localeIdentifier(*(void **)(v480 + 32), v443, v444, v445, v446, v447);
    objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], v450, v451, v452, v453, v454);
    *(_DWORD *)std::string buf = 134218498;
    *(void *)&uint8_t buf[4] = v448;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v449;
    __int16 v549 = 2048;
    double v550 = v455 - v467;
    _os_log_impl(&dword_1C492D000, v442, OS_LOG_TYPE_DEBUG, "Finished text recognizer request for stroke group %ld, locale %@. Duration: %0.3f", buf, 0x20u);
  }
  uint64_t v26 = v480;
  if (v30)
  {
LABEL_11:
    objc_msgSend_languageFitnessForLocale_recognitionMode_(v30, v27, *(void *)(v26 + 32), 6, v28, v29);
    *(void *)std::string buf = v31;
    *(void *)&buf[8] = v32;
    id v33 = *(id *)(v26 + 88);
    objc_sync_enter(v33);
    uint64_t v39 = objc_msgSend_copy(*(void **)(v26 + 88), v34, v35, v36, v37, v38);
    objc_msgSend_setInputStrokeIdentifiers_(v30, v40, (uint64_t)v39, v41, v42, v43);

    uint64_t v49 = objc_msgSend_inputStrokeIdentifiers(v30, v44, v45, v46, v47, v48);
    BOOL v55 = objc_msgSend_count(v49, v50, v51, v52, v53, v54) == 0;

    if (v55)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v56 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v56, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)unint64_t v541 = 0;
        _os_log_impl(&dword_1C492D000, v56, OS_LOG_TYPE_FAULT, "CHRecognitionSessionTask can not produce a text result with no stroke identifiers.", v541, 2u);
      }
    }
    objc_sync_exit(v33);

    uint64_t v57 = v480;
    id v58 = *(id *)(v480 + 96);
    objc_sync_enter(v58);
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(v57 + 96), v59, (uint64_t)v30, *(void *)(v57 + 32), v60, v61);
    uint64_t v65 = objc_msgSend_value_withObjCType_(MEMORY[0x1E4F29238], v62, (uint64_t)buf, (uint64_t)"{?=dd}", v63, v64);
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(v57 + 104), v66, (uint64_t)v65, *(void *)(v57 + 32), v67, v68);

    objc_sync_exit(v58);
    goto LABEL_128;
  }
LABEL_120:
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v456 = (id)qword_1EA3C9FA0;
  if (os_log_type_enabled(v456, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C492D000, v456, OS_LOG_TYPE_ERROR, "CHTokenizedTextResult is nil", buf, 2u);
  }

  if (v502)
  {
    uint64_t v457 = v480;
    id v458 = *(id *)(v480 + 96);
    objc_sync_enter(v458);
    uint64_t v462 = *(void **)(*(void *)(*(void *)(v480 + 112) + 8) + 40);
    if (!v462)
    {
      id v463 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      uint64_t v464 = *(void *)(*(void *)(v480 + 112) + 8);
      uint64_t v465 = *(void **)(v464 + 40);
      *(void *)(v464 + 40) = v463;

      uint64_t v462 = *(void **)(*(void *)(*(void *)(v480 + 112) + 8) + 40);
      uint64_t v457 = v480;
    }
    objc_msgSend_setObject_forKeyedSubscript_(v462, v459, (uint64_t)v502, *(void *)(v457 + 32), v460, v461);
    objc_sync_exit(v458);
  }
LABEL_128:
}

void sub_1C4AE5200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE563C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v10 = objc_msgSend_strokeIndexes(v3, v5, v6, v7, v8, v9);
  objc_msgSend_boundsForStrokeIndexes_(v4, v11, (uint64_t)v10, v12, v13, v14);
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;

  uint64_t v23 = [CHTokenizedTextResultToken alloc];
  uint64_t v29 = objc_msgSend_string(v3, v24, v25, v26, v27, v28);
  uint64_t v35 = objc_msgSend_strokeIndexes(v3, v30, v31, v32, v33, v34);
  uint64_t v117 = v22;
  uint64_t v118 = v20;
  uint64_t v119 = v18;
  uint64_t v120 = v16;
  uint64_t v41 = objc_msgSend_wordID(v3, v36, v37, v38, v39, v40);
  objc_msgSend_modelScore(v3, v42, v43, v44, v45, v46);
  double v48 = v47;
  objc_msgSend_recognitionScore(v3, v49, v50, v51, v52, v53);
  double v55 = v54;
  objc_msgSend_combinedScore(v3, v56, v57, v58, v59, v60);
  double v62 = v61;
  objc_msgSend_alignmentScore(v3, v63, v64, v65, v66, v67);
  double v69 = v68;
  uint64_t v75 = objc_msgSend_properties(v3, v70, v71, v72, v73, v74);
  uint64_t v81 = objc_msgSend_recognizerSourceLocale(v3, v76, v77, v78, v79, v80);
  uint64_t v87 = objc_msgSend_inputSources(v3, v82, v83, v84, v85, v86);
  uint64_t v93 = objc_msgSend_substrokeCount(v3, v88, v89, v90, v91, v92);
  objc_msgSend_bounds(v3, v94, v95, v96, v97, v98);
  double v105 = v104;
  double v107 = v106;
  double v109 = v108;
  double v111 = v110;
  if (v3) {
    objc_msgSend_principalLines(v3, v99, v100, v101, v102, v103);
  }
  else {
    memset(v121, 0, 128);
  }
  id v112 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v23, v99, (uint64_t)v29, (uint64_t)v35, v41, v75, v81, v87, v48, v55, v62, v69, v105, v107, v109, v111, v93, v120, v119,
                   v118,
                   v117,
                   v121);

  objc_msgSend_addObject_(*(void **)(a1 + 40), v113, (uint64_t)v112, v114, v115, v116);
}

void sub_1C4AE5844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE5858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE586C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE5880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE5890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE58A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE58BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4AE58D4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1C4AE58E0(uint64_t a1, const char *a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) >= *(void *)(a1 + 56))
  {
    *a3 = 1;
  }
  else
  {
    objc_msgSend_addIndex_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
    uint64_t v8 = *(void **)(a1 + 40);
    uint64_t v13 = objc_msgSend_numberWithInteger_(NSNumber, v9, (uint64_t)a2, v10, v11, v12);
    uint64_t v18 = objc_msgSend_numberWithInteger_(NSNumber, v14, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), v15, v16, v17);
    objc_msgSend_setObject_forKey_(v8, v19, (uint64_t)v13, (uint64_t)v18, v20, v21);
  }
  ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
}

void sub_1C4AE599C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE59B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4AE59C0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_cancelled(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

uint64_t sub_1C4AE59C8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void **)(a1 + 32);
  uint64_t v8 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, a2, (uint64_t)a2, a4, a5, a6);
  uint64_t v13 = objc_msgSend_objectForKey_(v7, v9, (uint64_t)v8, v10, v11, v12);
  uint64_t v19 = objc_msgSend_integerValue(v13, v14, v15, v16, v17, v18);

  uint64_t v24 = *(void **)(a1 + 40);
  return objc_msgSend_addIndex_(v24, v20, v19, v21, v22, v23);
}

void sub_1C4AE5A48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE5A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE5A6C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void **)(a1 + 32);
  uint64_t v8 = objc_msgSend_numberWithInteger_(NSNumber, a2, (uint64_t)a2, a4, a5, a6);
  objc_msgSend_objectForKey_(v7, v9, (uint64_t)v8, v10, v11, v12);
  id v24 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v13 = *(void **)(a1 + 40);
  uint64_t v19 = objc_msgSend_integerValue(v24, v14, v15, v16, v17, v18);
  objc_msgSend_removeIndex_(v13, v20, v19, v21, v22, v23);
}

void sub_1C4AE5AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE5B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1C4AE5B28(void *a1, void *a2, uint64_t a3, void *a4, int a5)
{
  v167[1] = *MEMORY[0x1E4F143B8];
  id v154 = a2;
  id v9 = a4;
  uint64_t v151 = v9;
  if (a1)
  {
    id v10 = v9;
    uint64_t v11 = [CHContextualTextResult alloc];
    uint64_t v153 = objc_msgSend_initWithTextResult_terminatingSpecialCharacter_strokeGroup_(v11, v12, (uint64_t)v10, 0, (uint64_t)v154, v13);
    if (a5) {
      objc_msgSend_rawTranscriptionPath(v10, v14, v15, v16, v17, v18);
    }
    else {
    uint64_t v157 = objc_msgSend_topModelTranscriptionPath(v10, v14, v15, v16, v17, v18);
    }
    uint64_t v19 = [CHTextTransformationManager alloc];
    uint64_t v25 = objc_msgSend_strokeIdentifiers(v154, v20, v21, v22, v23, v24);
    uint64_t v31 = objc_msgSend_allObjects(v25, v26, v27, v28, v29, v30);
    v167[0] = v153;
    uint64_t v35 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v32, (uint64_t)v167, 1, v33, v34);
    uint64_t v41 = objc_msgSend_strokeProvider(a1, v36, v37, v38, v39, v40);
    uint64_t v152 = objc_msgSend_initWithContextStrokes_relatedNonTextStrokes_contextResults_strokeGroupingResult_strokeClassificationResult_strokeProvider_excludedStrokeTypes_extractFromRefinablePath_(v19, v42, (uint64_t)v31, MEMORY[0x1E4F1CBF0], (uint64_t)v35, 0, 0, v41, 0, a5);

    v162[0] = MEMORY[0x1E4F143A8];
    v162[1] = 3221225472;
    v162[2] = sub_1C4AE6138;
    v162[3] = &unk_1E64E3798;
    v162[4] = a1;
    uint64_t v44 = objc_msgSend_reflowableTokensSkipLineOrientationEstimate_useCache_preserveTokenOrder_shouldCancel_(v152, v43, a3, 0, 1, (uint64_t)v162);
    if (objc_msgSend_count(v44, v45, v46, v47, v48, v49)
      && (uint64_t v54 = objc_msgSend_tokenCountInTranscriptionPath_(v10, v50, (uint64_t)v157, v51, v52, v53),
          v54 == objc_msgSend_count(v44, v55, v56, v57, v58, v59)))
    {
      uint64_t v155 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v60, v61, v62, v63, v64);
      uint64_t v156 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v65, v66, v67, v68, v69);
      for (unint64_t i = 0; ; ++i)
      {
        uint64_t v76 = objc_msgSend_transcriptionPaths(v10, v70, v71, v72, v73, v74);
        BOOL v82 = i < objc_msgSend_count(v76, v77, v78, v79, v80, v81);

        if (!v82) {
          break;
        }
        uint64_t v88 = objc_msgSend_transcriptionPaths(v10, v83, v84, v85, v86, v87);
        uint64_t v93 = objc_msgSend_objectAtIndexedSubscript_(v88, v89, i, v90, v91, v92);

        char HaveSameSegmentation_otherPath = objc_msgSend_transcriptionPathsHaveSameSegmentation_otherPath_(v10, v94, (uint64_t)v157, (uint64_t)v93, v95, v96);
        uint64_t v103 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v98, v99, v100, v101, v102);
        uint64_t v109 = objc_msgSend_tokenColumnCount(v10, v104, v105, v106, v107, v108);
        v158[0] = MEMORY[0x1E4F143A8];
        v158[1] = 3221225472;
        v158[2] = sub_1C4AE6140;
        v158[3] = &unk_1E64E3860;
        char v161 = HaveSameSegmentation_otherPath;
        id v159 = v44;
        id v110 = v103;
        id v160 = v110;
        objc_msgSend_enumerateTokensInTranscriptionPath_columnRange_tokenProcessingBlock_(v10, v111, (uint64_t)v93, 0, v109, (uint64_t)v158);
        if (objc_msgSend_count(v110, v112, v113, v114, v115, v116))
        {
          objc_msgSend_addObject_(v155, v117, (uint64_t)v110, v118, v119, v120);
          uint64_t v126 = objc_msgSend_transcriptionPathScores(v10, v121, v122, v123, v124, v125);
          uint64_t v131 = objc_msgSend_objectAtIndexedSubscript_(v126, v127, i, v128, v129, v130);
          objc_msgSend_addObject_(v156, v132, (uint64_t)v131, v133, v134, v135);
        }
      }
      id v149 = objc_msgSend_modifiedResultWithBestPathTokens_pathProbabilities_(v10, v83, (uint64_t)v155, (uint64_t)v156, v86, v87);

      id v148 = v149;
    }
    else
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v136 = (id)qword_1EA3C9FE0;
      if (os_log_type_enabled(v136, OS_LOG_TYPE_ERROR))
      {
        uint64_t v141 = objc_msgSend_tokenCountInTranscriptionPath_(v10, v137, (uint64_t)v157, v138, v139, v140);
        uint64_t v147 = objc_msgSend_count(v44, v142, v143, v144, v145, v146);
        *(_DWORD *)std::string buf = 134218240;
        uint64_t v164 = v141;
        __int16 v165 = 2048;
        uint64_t v166 = v147;
        _os_log_impl(&dword_1C492D000, v136, OS_LOG_TYPE_ERROR, "Invalid reflowable tokens count: result tokens:%li reflowable tokens:%li", buf, 0x16u);
      }

      id v148 = v10;
    }
  }
  else
  {
    id v148 = 0;
  }

  return v148;
}

void sub_1C4AE5FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4AE6138(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_cancelled(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
}

void sub_1C4AE6140(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v133 = *MEMORY[0x1E4F143B8];
  id v10 = a2;
  if (*(unsigned char *)(a1 + 48))
  {
    if (objc_msgSend_count(*(void **)(a1 + 32), v5, v6, v7, v8, v9) <= a3)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v11 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 134217984;
        unint64_t v132 = a3;
        _os_log_impl(&dword_1C492D000, v11, OS_LOG_TYPE_FAULT, "Reflowable tokens does not have a token at index %lu", buf, 0xCu);
      }
    }
    uint64_t v128 = [CHTokenizedTextResultToken alloc];
    uint64_t v129 = objc_msgSend_string(v10, v12, v13, v14, v15, v16);
    uint64_t v22 = objc_msgSend_strokeIndexes(v10, v17, v18, v19, v20, v21);
    uint64_t v28 = objc_msgSend_wordID(v10, v23, v24, v25, v26, v27);
    objc_msgSend_modelScore(v10, v29, v30, v31, v32, v33);
    double v127 = v34;
    objc_msgSend_recognitionScore(v10, v35, v36, v37, v38, v39);
    double v126 = v40;
    objc_msgSend_combinedScore(v10, v41, v42, v43, v44, v45);
    double v125 = v46;
    objc_msgSend_alignmentScore(v10, v47, v48, v49, v50, v51);
    double v124 = v52;
    uint64_t v58 = objc_msgSend_properties(v10, v53, v54, v55, v56, v57);
    uint64_t v64 = objc_msgSend_recognizerSourceLocale(v10, v59, v60, v61, v62, v63);
    uint64_t v70 = objc_msgSend_inputSources(v10, v65, v66, v67, v68, v69);
    uint64_t v76 = objc_msgSend_substrokeCount(v10, v71, v72, v73, v74, v75);
    objc_msgSend_bounds(v10, v77, v78, v79, v80, v81);
    double v83 = v82;
    double v85 = v84;
    double v87 = v86;
    double v89 = v88;
    uint64_t v94 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v90, a3, v91, v92, v93);
    objc_msgSend_bounds(v94, v95, v96, v97, v98, v99);
    uint64_t v101 = v100;
    uint64_t v103 = v102;
    uint64_t v105 = v104;
    uint64_t v107 = v106;
    id v112 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v108, a3, v109, v110, v111);
    uint64_t v118 = v112;
    if (v112) {
      objc_msgSend_principalLines(v112, v113, v114, v115, v116, v117);
    }
    else {
      memset(v130, 0, sizeof(v130));
    }
    uint64_t v119 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v128, v113, (uint64_t)v129, (uint64_t)v22, v28, v58, v64, v70, v127, v126, v125, v124, v83, v85, v87, v89, v76, v101, v103,
                     v105,
                     v107,
                     v130);

    objc_msgSend_addObject_(*(void **)(a1 + 40), v120, (uint64_t)v119, v121, v122, v123);
  }
  else
  {
    objc_msgSend_addObject_(*(void **)(a1 + 40), v5, (uint64_t)v10, v7, v8, v9);
  }
}

void sub_1C4AE6418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t sub_1C4AE6480(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return ((unint64_t)objc_msgSend_strokeAttributes(a2, (const char *)a2, a3, a4, a5, a6) >> 2) & 1;
}

void sub_1C4AE64A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v9 + 24))
  {
    id v10 = *(void **)(a1 + 32);
    id v16 = v3;
    uint64_t v11 = objc_msgSend_strokeIndexes(v3, v4, v5, v6, v7, v8);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = objc_msgSend_containsIndexes_(v10, v12, (uint64_t)v11, v13, v14, v15);

    id v3 = v16;
  }
  else
  {
    *(unsigned char *)(v9 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  }
}

void sub_1C4AE6550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE6568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE657C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v158 = *MEMORY[0x1E4F143B8];
  id v147 = a4;
  id v10 = objc_msgSend_subResultWithColumnRange_(*(void **)(a1 + 32), v7, a2, a3, v8, v9);
  uint64_t v14 = objc_msgSend_strokeIndexesForColumnsInRange_(*(void **)(a1 + 32), v11, a2, a3, v12, v13);
  uint64_t v20 = objc_msgSend_inputStrokeIdentifiers(*(void **)(a1 + 32), v15, v16, v17, v18, v19);
  uint64_t v25 = objc_msgSend_objectsAtIndexes_(v20, v21, (uint64_t)v14, v22, v23, v24);
  objc_msgSend_setInputStrokeIdentifiers_(v10, v26, (uint64_t)v25, v27, v28, v29);

  objc_msgSend_remapAllStrokeIndexesWithIndexSet_(v10, v30, (uint64_t)v14, v31, v32, v33);
  uint64_t v39 = objc_msgSend_strokeIndexes(v10, v34, v35, v36, v37, v38);
  uint64_t v50 = &qword_1EA3CA000;
  uint64_t v51 = &qword_1EA3C9000;
  if (objc_msgSend_firstIndex(v39, v40, v41, v42, v43, v44)) {
    goto LABEL_7;
  }
  double v52 = objc_msgSend_strokeIndexes(v10, v45, v46, v47, v48, v49);
  Indedouble x = objc_msgSend_lastIndex(v52, v53, v54, v55, v56, v57);
  if (Index != objc_msgSend_count(v14, v59, v60, v61, v62, v63) - 1)
  {

LABEL_7:
    goto LABEL_8;
  }
  uint64_t v69 = objc_msgSend_strokeIndexes(v10, v64, v65, v66, v67, v68);
  uint64_t v75 = objc_msgSend_count(v69, v70, v71, v72, v73, v74);
  uint64_t v81 = objc_msgSend_count(v14, v76, v77, v78, v79, v80);

  BOOL v87 = v75 == v81;
  uint64_t v51 = &qword_1EA3C9000;
  uint64_t v50 = &qword_1EA3CA000;
  if (!v87)
  {
LABEL_8:
    if (*v50 == -1)
    {
      double v88 = (id)v51[498];
      if (!os_log_type_enabled(v88, OS_LOG_TYPE_FAULT))
      {
LABEL_11:

        goto LABEL_12;
      }
    }
    else
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      double v88 = (id)v51[498];
      if (!os_log_type_enabled(v88, OS_LOG_TYPE_FAULT)) {
        goto LABEL_11;
      }
    }
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C492D000, v88, OS_LOG_TYPE_FAULT, "Problem of non-contiguous stroke indexes after applying remapAllStrokeIndexesWithIndexSet.", buf, 2u);
    goto LABEL_11;
  }
LABEL_12:
  double v89 = objc_msgSend_locale(*(void **)(a1 + 32), v82, v83, v84, v85, v86);
  objc_msgSend_setLocale_(v10, v90, (uint64_t)v89, v91, v92, v93);

  uint64_t v94 = sub_1C4AE5B28(*(void **)(a1 + 40), *(void **)(a1 + 48), *(unsigned char *)(a1 + 56) == 0, v10, 1);
  uint64_t v100 = objc_msgSend_mutableCopy(v94, v95, v96, v97, v98, v99);

  uint64_t v106 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v101, v102, v103, v104, v105);
  v148[0] = MEMORY[0x1E4F143A8];
  v148[1] = 3221225472;
  v148[2] = sub_1C4AE6A78;
  v148[3] = &unk_1E64E19F0;
  id v107 = v106;
  id v149 = v107;
  objc_msgSend_enumerateIndexesUsingBlock_(v14, v108, (uint64_t)v148, v109, v110, v111);
  objc_msgSend_remapAllStrokeIndexesWithArray_(v100, v112, (uint64_t)v107, v113, v114, v115);
  uint64_t v121 = objc_msgSend_tokenColumns(v100, v116, v117, v118, v119, v120);
  objc_msgSend_appendTokenColumns_(v147, v122, (uint64_t)v121, v123, v124, v125);

  uint64_t v129 = objc_msgSend_strokeIndexesForColumnsInRange_(v147, v126, a2, a3, v127, v128);
  if ((objc_msgSend_isEqual_(v129, v130, (uint64_t)v14, v131, v132, v133) & 1) == 0)
  {
    if (*v50 == -1)
    {
      uint64_t v134 = (id)v51[498];
      if (!os_log_type_enabled(v134, OS_LOG_TYPE_FAULT))
      {
LABEL_16:

        goto LABEL_17;
      }
    }
    else
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      uint64_t v134 = (id)v51[498];
      if (!os_log_type_enabled(v134, OS_LOG_TYPE_FAULT)) {
        goto LABEL_16;
      }
    }
    uint64_t v140 = objc_msgSend_description(v129, v135, v136, v137, v138, v139);
    uint64_t v146 = objc_msgSend_description(v14, v141, v142, v143, v144, v145);
    *(_DWORD *)std::string buf = 138413058;
    uint64_t v151 = v140;
    __int16 v152 = 2112;
    uint64_t v153 = v146;
    __int16 v154 = 2048;
    uint64_t v155 = a2;
    __int16 v156 = 2048;
    uint64_t v157 = a3;
    _os_log_impl(&dword_1C492D000, v134, OS_LOG_TYPE_FAULT, "Error: the strokes covered in the cumulative results (%@) don't match those of the original result (%@) for the range %ld,%ld", buf, 0x2Au);

    goto LABEL_16;
  }
LABEL_17:
}

void sub_1C4AE698C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE6A78(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void **)(a1 + 32);
  objc_msgSend_numberWithUnsignedInteger_(NSNumber, a2, (uint64_t)a2, a4, a5, a6);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v7, (uint64_t)v11, v8, v9, v10);
}

void sub_1C4AE6AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4AE6AEC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 > *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 + a3;
  return result;
}

uint64_t sub_1C4AE6B68(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v10 = objc_msgSend_strokeIdentifierFromData_(*(void **)(a1 + 32), v6, a2, v7, v8, v9);
  uint64_t v15 = objc_msgSend_strokeIdentifierFromData_(*(void **)(a1 + 32), v11, (uint64_t)v5, v12, v13, v14);
  uint64_t v19 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(*(void **)(a1 + 32), v16, (uint64_t)v10, (uint64_t)v15, v17, v18);

  return v19;
}

void sub_1C4AE6BE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE6C08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE6C90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE6D14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE6DDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE6DF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE6F58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE6F9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE6FB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4AE6FCC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = sub_1C4AE0600(*(void **)(a1 + 32), a2, *(void **)(a1 + 40), 0);
  uint64_t v10 = v4;
  if (a3)
  {
    objc_msgSend_inputStrokeIdentifiers(v4, v5, v6, v7, v8, v9);
    *a3 = (id)objc_claimAutoreleasedReturnValue();
  }
  id v11 = objc_msgSend_mathResult(v10, v5, v6, v7, v8, v9);

  return v11;
}

void sub_1C4AE7044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE761C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE77FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE7810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE7820(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void **)(a1 + 32);
  objc_msgSend_encodedStrokeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v7, (uint64_t)v11, v8, v9, v10);
}

void sub_1C4AE7878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE788C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void **)(a1 + 32);
  objc_msgSend_encodedStrokeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v7, (uint64_t)v11, v8, v9, v10);
}

void sub_1C4AE78E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE78F8(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v252 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  uint64_t v13 = objc_msgSend_textResult(*(void **)(a1 + 32), v8, v9, v10, v11, v12);
  uint64_t v19 = objc_msgSend_tokenColumnCount(v13, v14, v15, v16, v17, v18);

  if (v19 <= a3)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v48 = (id)qword_1EA3C9FA0;
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v244 = 0;
      _os_log_impl(&dword_1C492D000, v48, OS_LOG_TYPE_DEBUG, "Inventory data ingestion: (autorefine) rejecting group having columns with multiple tokens on previous result.", v244, 2u);
    }
  }
  else
  {
    uint64_t v25 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v26 = objc_msgSend_strokeGroupResult(*(void **)(a1 + 32), v20, v21, v22, v23, v24);
    uint64_t v32 = objc_msgSend_inputStrokeIdentifiers(v26, v27, v28, v29, v30, v31);
    uint64_t v38 = objc_msgSend_strokeIndexes(v7, v33, v34, v35, v36, v37);
    uint64_t v43 = objc_msgSend_objectsAtIndexes_(v32, v39, (uint64_t)v38, v40, v41, v42);
    uint64_t v48 = objc_msgSend_setWithArray_(v25, v44, (uint64_t)v43, v45, v46, v47);

    if (objc_msgSend_isSubsetOfSet_(v48, v49, *(void *)(a1 + 40), v50, v51, v52))
    {
      *(void *)uint64_t v244 = 0;
      uint64_t v245 = v244;
      uint64_t v246 = 0x2020000000;
      char v247 = 0;
      uint64_t v58 = objc_msgSend_strokeIndexes(v7, v53, v54, v55, v56, v57);
      v241[0] = MEMORY[0x1E4F143A8];
      v241[1] = 3221225472;
      v241[2] = sub_1C4AE82B4;
      v241[3] = &unk_1E64E1978;
      id v242 = *(id *)(a1 + 32);
      long long v243 = v244;
      objc_msgSend_enumerateIndexesUsingBlock_(v58, v59, (uint64_t)v241, v60, v61, v62);

      if (v245[24])
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        uint64_t v68 = (id)qword_1EA3C9FA0;
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v74 = objc_msgSend_string(v7, v69, v70, v71, v72, v73);
          *(_DWORD *)std::string buf = 138739971;
          double v249 = v74;
          _os_log_impl(&dword_1C492D000, v68, OS_LOG_TYPE_DEBUG, "Inventory data ingestion: (autorefine) rejecting token (%{sensitive}@) as it contained synthetic ink)", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v75 = objc_msgSend_textResult(*(void **)(a1 + 48), v63, v64, v65, v66, v67);
        long long v239 = *(_OWORD *)a4;
        uint64_t v240 = a4[2];
        hasTokenAtLocatiounint64_t n = objc_msgSend_hasTokenAtLocation_(v75, v76, (uint64_t)&v239, v77, v78, v79);

        if (hasTokenAtLocation)
        {
          uint64_t v86 = objc_msgSend_textResult(*(void **)(a1 + 48), v81, v82, v83, v84, v85);
          long long v237 = *(_OWORD *)a4;
          uint64_t v238 = a4[2];
          uint64_t v68 = objc_msgSend_tokenAtLocation_(v86, v87, (uint64_t)&v237, v88, v89, v90);

          uint64_t v96 = objc_msgSend_string(v7, v91, v92, v93, v94, v95);
          uint64_t v102 = objc_msgSend_string(v68, v97, v98, v99, v100, v101);
          char isEqualToString = objc_msgSend_isEqualToString_(v96, v103, (uint64_t)v102, v104, v105, v106);

          if (isEqualToString)
          {
            uint64_t v113 = objc_msgSend_refinedTokenColumns(*(void **)(a1 + 48), v108, v109, v110, v111, v112);
            char v118 = objc_msgSend_containsIndex_(v113, v114, *a4, v115, v116, v117);

            if (v118)
            {
              uint64_t v124 = objc_msgSend_drawing(*(void **)(a1 + 32), v119, v120, v121, v122, v123);
              uint64_t v130 = objc_msgSend_strokeIndexes(v7, v125, v126, v127, v128, v129);
              uint64_t v234 = objc_msgSend_drawingWithStrokesFromIndexSet_(v124, v131, (uint64_t)v130, v132, v133, v134);

              uint64_t v135 = (void *)MEMORY[0x1E4F1CA48];
              uint64_t v141 = objc_msgSend_strokeIndexes(v68, v136, v137, v138, v139, v140);
              uint64_t v147 = objc_msgSend_count(v141, v142, v143, v144, v145, v146);
              uint64_t v233 = objc_msgSend_arrayWithCapacity_(v135, v148, v147, v149, v150, v151);

              uint64_t v157 = objc_msgSend_strokeIdentifiers(*(void **)(a1 + 48), v152, v153, v154, v155, v156);
              uint64_t v163 = objc_msgSend_strokeIndexes(v68, v158, v159, v160, v161, v162);
              uint64_t v168 = objc_msgSend_objectsAtIndexes_(v157, v164, (uint64_t)v163, v165, v166, v167);
              uint64_t v174 = objc_msgSend_strokeProvider(*(void **)(a1 + 56), v169, v170, v171, v172, v173);
              uint64_t v178 = objc_msgSend_encodedStrokeIdentifiers_withStrokeProvider_(CHStrokeUtilities, v175, (uint64_t)v168, (uint64_t)v174, v176, v177);

              v235[0] = MEMORY[0x1E4F143A8];
              v235[1] = 3221225472;
              v235[2] = sub_1C4AE832C;
              v235[3] = &unk_1E64E3970;
              id v179 = v233;
              id v236 = v179;
              objc_msgSend_enumerateObjectsUsingBlock_(v178, v180, (uint64_t)v235, v181, v182, v183);
              uint64_t v184 = CHOSLogForCategory(2);
              if (os_log_type_enabled(v184, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v190 = objc_msgSend_string(v68, v185, v186, v187, v188, v189);
                *(_DWORD *)std::string buf = 138739971;
                double v249 = v190;
                _os_log_impl(&dword_1C492D000, v184, OS_LOG_TYPE_DEFAULT, "Inventory data ingestion: (autorefine) candidate token for inventory: %{sensitive}@", buf, 0xCu);
              }
              uint64_t v196 = objc_msgSend_textResult(*(void **)(a1 + 32), v191, v192, v193, v194, v195);
              uint64_t v200 = objc_msgSend_subResultWithColumnRange_(v196, v197, a3, 1, v198, v199);

              if (objc_msgSend_isSingleTokenResult(v200, v201, v202, v203, v204, v205))
              {
                objc_msgSend_populateStyleInventoryWithTokenizedResult_drawing_strokeIdentifiers_error_(*(void **)(a1 + 64), v206, (uint64_t)v200, v234, (uint64_t)v179, 0);
              }
              else
              {
                uint64_t v232 = CHOSLogForCategory(2);
                if (os_log_type_enabled(v232, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)std::string buf = 138412290;
                  double v249 = v200;
                  _os_log_impl(&dword_1C492D000, v232, OS_LOG_TYPE_ERROR, "Inventory data ingestion: (autorefine) produced tokenized result should contain a single token: %@", buf, 0xCu);
                }
              }
              id v213 = v234;
            }
            else
            {
              id v213 = CHOSLogForCategory(2);
              if (os_log_type_enabled(v213, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v231 = objc_msgSend_string(v68, v226, v227, v228, v229, v230);
                *(_DWORD *)std::string buf = 138739971;
                double v249 = v231;
                _os_log_impl(&dword_1C492D000, v213, OS_LOG_TYPE_DEBUG, "Inventory data ingestion: (autorefine) rejecting token as it is not fully synthetic: %{sensitive}@", buf, 0xCu);
              }
            }
          }
          else
          {
            if (qword_1EA3CA000 != -1) {
              dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
            }
            id v213 = (id)qword_1EA3C9FA0;
            if (os_log_type_enabled(v213, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v219 = objc_msgSend_string(v68, v214, v215, v216, v217, v218);
              double v225 = objc_msgSend_string(v7, v220, v221, v222, v223, v224);
              *(_DWORD *)std::string buf = 138740227;
              double v249 = v219;
              __int16 v250 = 2117;
              uint64_t v251 = v225;
              _os_log_impl(&dword_1C492D000, v213, OS_LOG_TYPE_DEBUG, "Inventory data ingestion: (autorefine) rejecting token (%{sensitive}@) as transcription is different from previous result (%{sensitive}@)", buf, 0x16u);
            }
          }
        }
        else
        {
          if (qword_1EA3CA000 != -1) {
            dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
          }
          uint64_t v68 = (id)qword_1EA3C9FA0;
          if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v212 = objc_msgSend_string(v7, v207, v208, v209, v210, v211);
            *(_DWORD *)std::string buf = 138739971;
            double v249 = v212;
            _os_log_impl(&dword_1C492D000, v68, OS_LOG_TYPE_DEBUG, "Inventory data ingestion: (autorefine) rejecting token (%{sensitive}@) as new result doesn't have token at the same location)", buf, 0xCu);
          }
        }
      }

      _Block_object_dispose(v244, 8);
    }
  }
}

void sub_1C4AE80D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_1C4AE82B4(uint64_t a1, const char *a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = (uint64_t)a2;
  uint64_t v9 = objc_msgSend_syntheticStrokeIndexes(*(void **)(a1 + 32), a2, (uint64_t)a3, a4, a5, a6);
  LODWORD(v7) = objc_msgSend_containsIndex_(v9, v10, v7, v11, v12, v13);

  if (v7)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    *a3 = 1;
  }
}

void sub_1C4AE831C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE832C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void **)(a1 + 32);
  objc_msgSend_encodedStrokeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v7, (uint64_t)v11, v8, v9, v10);
}

void sub_1C4AE8384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE8398(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_UUID(MEMORY[0x1E4F29128], a2, a3, a4, a5, a6);
  objc_msgSend_UUIDString(v6, v7, v8, v9, v10, v11);
  id v25 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v12 = (void *)MEMORY[0x1E4F1CB10];
  uint64_t v13 = NSTemporaryDirectory();
  uint64_t v18 = objc_msgSend_fileURLWithPath_(v12, v14, (uint64_t)v13, v15, v16, v17);
  uint64_t v23 = objc_msgSend_URLByAppendingPathComponent_(v18, v19, (uint64_t)v25, v20, v21, v22);
  uint64_t v24 = (void *)qword_1EA3C9300;
  qword_1EA3C9300 = v23;
}

void sub_1C4AE8440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1C4AE8468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE847C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE8740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE8878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE8890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE88A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE8924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE896C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE8AC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE8AFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE8B18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE8B30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE8B44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE8B58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE8B68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE8E58(_Unwind_Exception *a1)
{
  uint64_t v9 = v7;

  _Unwind_Resume(a1);
}

void sub_1C4AE8F50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE9084(_Unwind_Exception *a1)
{
  uint64_t v9 = v8;

  _Unwind_Resume(a1);
}

void sub_1C4AE92AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE94C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Block_object_dispose((const void *)(v22 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C4AE94F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE9504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE9528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE953C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4AE954C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4AE955C(uint64_t a1)
{
}

void sub_1C4AE9564(uint64_t a1, void *a2, void *a3)
{
  id v17 = a2;
  id v6 = a3;
  if (objc_msgSend_integerValue(v6, v7, v8, v9, v10, v11) > *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = objc_msgSend_integerValue(v6, v12, v13, v14, v15, v16);
  }
}

void sub_1C4AE9604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE96DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE96FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE9860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE9A68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AE9DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEA6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16, id *a17, void *a18, uint64_t a19, void *a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEAC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEAD70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEAD80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEAD90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEB2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

__n128 sub_1C4AEB454(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1C4AEB464(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = objc_msgSend_strokeIndexes(a2, (const char *)a2, a3, a4, a5, a6);
  uint64_t v14 = objc_msgSend_objectsAtIndexes_(v8, v10, (uint64_t)v9, v11, v12, v13);

  uint64_t v15 = objc_opt_class();
  uint64_t v21 = objc_msgSend_strokeProvider(*(void **)(a1 + 40), v16, v17, v18, v19, v20);
  id v25 = objc_msgSend_strokesForIdentifiers_inStrokeProvider_(v15, v22, (uint64_t)v14, (uint64_t)v21, v23, v24);

  CGFloat x = *MEMORY[0x1E4F1DB20];
  CGFloat y = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  CGFloat width = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  CGFloat height = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  id v30 = v25;
  uint64_t v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v31, (uint64_t)&v48, (uint64_t)v52, 16, v32);
  if (v38)
  {
    uint64_t v39 = *(void *)v49;
    do
    {
      uint64_t v40 = 0;
      do
      {
        if (*(void *)v49 != v39) {
          objc_enumerationMutation(v30);
        }
        objc_msgSend_bounds(*(void **)(*((void *)&v48 + 1) + 8 * v40), v33, v34, v35, v36, v37, (void)v48);
        v58.origin.CGFloat x = v41;
        v58.origin.CGFloat y = v42;
        v58.size.CGFloat width = v43;
        v58.size.CGFloat height = v44;
        v54.origin.CGFloat x = x;
        v54.origin.CGFloat y = y;
        v54.size.CGFloat width = width;
        v54.size.CGFloat height = height;
        CGRect v55 = CGRectUnion(v54, v58);
        CGFloat x = v55.origin.x;
        CGFloat y = v55.origin.y;
        CGFloat width = v55.size.width;
        CGFloat height = v55.size.height;
        ++v40;
      }
      while (v38 != v40);
      uint64_t v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v33, (uint64_t)&v48, (uint64_t)v52, 16, v37);
    }
    while (v38);
  }

  v56.origin.CGFloat x = x;
  v56.origin.CGFloat y = y;
  v56.size.CGFloat width = width;
  v56.size.CGFloat height = height;
  double MinX = CGRectGetMinX(v56);
  if (MinX <= CGRectGetMaxX(*(CGRect *)(a1 + 56)))
  {
    v57.origin.CGFloat x = x;
    v57.origin.CGFloat y = y;
    v57.size.CGFloat width = width;
    v57.size.CGFloat height = height;
    double MaxX = CGRectGetMaxX(v57);
    if (MaxX >= CGRectGetMinX(*(CGRect *)(a1 + 56)))
    {
      uint64_t v47 = *(void *)(*(void *)(a1 + 48) + 8);
      if (*(void *)(v47 + 48) == 0x7FFFFFFFFFFFFFFFLL)
      {
        *(void *)(v47 + 48) = a3;
        uint64_t v47 = *(void *)(*(void *)(a1 + 48) + 8);
      }
      ++*(void *)(v47 + 56);
    }
  }
}

void sub_1C4AEB6B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEC868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  _Unwind_Resume(a1);
}

void sub_1C4AECBEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_msgSend_addObject_(*(void **)(a1 + 32), v4, (uint64_t)v3, v5, v6, v7);
  if (!v3)
  {
    double v22 = *MEMORY[0x1E4F1DAD8];
    if (*MEMORY[0x1E4F1DAD8] != 0.0) {
      goto LABEL_16;
    }
    double v23 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
    double v20 = 0.0;
    double v21 = 0.0;
    if (v23 != 0.0) {
      goto LABEL_16;
    }
    goto LABEL_10;
  }
  objc_msgSend_principalLines(v3, v8, v9, v10, v11, v12);
  uint64_t v18 = (double *)MEMORY[0x1E4F1DAD8];
  if (v38 == *MEMORY[0x1E4F1DAD8] && v39 == *(double *)(MEMORY[0x1E4F1DAD8] + 8))
  {
    objc_msgSend_principalLines(v3, v13, v14, v15, v16, v17);
    double v21 = v36;
    double v20 = v37;
    double v22 = *v18;
    double v23 = v18[1];
LABEL_10:
    if (v21 == v22 && v20 == v23) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    }
  }
LABEL_16:
  id v25 = objc_opt_class();
  uint64_t v31 = objc_msgSend_recognizerSourceLocale(v3, v26, v27, v28, v29, v30);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) |= objc_msgSend_useRightToLeftReflow_(v25, v32, (uint64_t)v31, v33, v34, v35);
}

void sub_1C4AECD04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AECD14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AECD24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AECD38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AECD48(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void **)(a1 + 32);
  objc_msgSend_encodedStrokeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObject_(v6, v7, (uint64_t)v11, v8, v9, v10);
}

void sub_1C4AECDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AED26C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AED474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AED7BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEDBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEE35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEE96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEECA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEEEF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEEF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_1C4A2F114((uint64_t)&a33);

  _Unwind_Resume(a1);
}

void sub_1C4AEF0B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEF0CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEF0E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEF0FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEF114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEF128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEF138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEF148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEF344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEF568(_Unwind_Exception *a1)
{
  sub_1C4A2F114(v2 - 144);

  _Unwind_Resume(a1);
}

void sub_1C4AEF580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_1C4A2F114((uint64_t)&a27);
  sub_1C4A2F114(v28 - 144);

  _Unwind_Resume(a1);
}

void sub_1C4AEF5A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEF5B0(_Unwind_Exception *a1)
{
  sub_1C4A2F114(v2 - 144);

  _Unwind_Resume(a1);
}

void sub_1C4AEF6B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEF6C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEF798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEF8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEF918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEF970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEFA00()
{
  id v0 = (void *)qword_1EA3C9318;
  qword_1EA3C9318 = (uint64_t)&unk_1F203D120;
}

void sub_1C4AEFC98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEFE08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEFE18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEFE28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AEFF64(_Unwind_Exception *a1)
{
  sub_1C4A2F114(v1);
  _Unwind_Resume(a1);
}

void sub_1C4AEFF78(_Unwind_Exception *a1)
{
  sub_1C4A2F114(v1);
  _Unwind_Resume(a1);
}

void sub_1C4AEFF8C(_Unwind_Exception *a1)
{
  sub_1C4A2F114(v1);
  _Unwind_Resume(a1);
}

void sub_1C4AEFFA0(_Unwind_Exception *a1)
{
  sub_1C4A2F114(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4AEFFEC(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  objc_msgSend_bounds(v4, v6, v7, v8, v9, v10);
  double MidX = CGRectGetMidX(v20);
  objc_msgSend_bounds(v5, v12, v13, v14, v15, v16);
  double v17 = CGRectGetMidX(v21);
  if (MidX < v17) {
    uint64_t v18 = -1;
  }
  else {
    uint64_t v18 = MidX > v17;
  }

  return v18;
}

void sub_1C4AF0060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AF0074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AF02B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C4AF0318(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = objc_msgSend_strokeIndexes(a2, (const char *)a2, a3, a4, a5, a6);
  uint64_t v14 = objc_msgSend_objectsAtIndexes_(v8, v10, (uint64_t)v9, v11, v12, v13);
  uint64_t v19 = objc_msgSend_setWithArray_(v7, v15, (uint64_t)v14, v16, v17, v18);

  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  obuint64_t j = *(id *)(a1 + 40);
  uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v20, (uint64_t)&v54, (uint64_t)v58, 16, v21);
  if (v22)
  {
    uint64_t v23 = *(void *)v55;
    while (2)
    {
      for (uint64_t i = 0; i != v22; ++i)
      {
        if (*(void *)v55 != v23) {
          objc_enumerationMutation(obj);
        }
        id v25 = *(void **)(*((void *)&v54 + 1) + 8 * i);
        uint64_t v26 = (void *)MEMORY[0x1E4F1CAD0];
        uint64_t v27 = objc_opt_class();
        uint64_t v33 = objc_msgSend_strokeIdentifiers(v25, v28, v29, v30, v31, v32);
        double v37 = objc_msgSend_encodedStrokeIdentifiers_withStrokeProvider_(v27, v34, (uint64_t)v33, *(void *)(*(void *)(a1 + 48) + 48), v35, v36);
        CGFloat v42 = objc_msgSend_setWithArray_(v26, v38, (uint64_t)v37, v39, v40, v41);

        if (objc_msgSend_isEqualToSet_(v42, v43, (uint64_t)v19, v44, v45, v46))
        {
          objc_msgSend_addObject_(*(void **)(a1 + 56), v47, (uint64_t)v25, v48, v49, v50);

          goto LABEL_11;
        }
      }
      uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v51, (uint64_t)&v54, (uint64_t)v58, 16, v52);
      if (v22) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

void sub_1C4AF04F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AF0618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AF0628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AF156C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, void *a20,void *a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v67 = a32;
    if (!a32)
    {
LABEL_3:
      uint64_t v68 = a43;
      if (!a43)
      {
LABEL_8:

        if (a56) {
          operator delete(a56);
        }
        sub_1C496B66C(&a59);
        if (a62)
        {
          a63 = (uint64_t)a62;
          operator delete(a62);
        }

        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(v68);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v67 = a32;
    if (!a32) {
      goto LABEL_3;
    }
  }
  operator delete(v67);
  uint64_t v68 = a43;
  if (!a43) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_1C4AF17A8(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_1C494A220();
    }
    id v4 = *(char **)(a1 + 8);
    uint64_t v5 = 24 * a2;
    uint64_t v6 = (char *)operator new(24 * a2);
    uint64_t v7 = &v6[v5];
    uint64_t v8 = &v6[24 * ((v4 - v2) / 24)];
    if (v4 == v2)
    {
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
    }
    else
    {
      uint64_t v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        long long v10 = *(_OWORD *)(v4 - 24);
        v4 -= 24;
        *(_OWORD *)(v9 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v10;
        v9 -= 24;
        *((void *)v9 + 2) = *((void *)v4 + 2);
        *(void *)id v4 = 0;
        *((void *)v4 + 1) = 0;
        *((void *)v4 + 2) = 0;
      }
      while (v4 != v2);
      uint64_t v2 = *(char **)a1;
      uint64_t v11 = *(char **)(a1 + 8);
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
      if (v11 != v2)
      {
        uint64_t v12 = v11;
        do
        {
          uint64_t v14 = (void *)*((void *)v12 - 3);
          v12 -= 24;
          uint64_t v13 = v14;
          if (v14)
          {
            *((void *)v11 - 2) = v13;
            operator delete(v13);
          }
          uint64_t v11 = v12;
        }
        while (v12 != v2);
      }
    }
    if (v2)
    {
      operator delete(v2);
    }
  }
}

void sub_1C4AF1AF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AF1B0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AF1B24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AF1B38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AF2068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C4AF2510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4AF2C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C4AF2F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4AF35DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C4AF4A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24)
{
  sub_1C4A2F114((uint64_t)&STACK[0x490]);
  sub_1C4AF4D20((uint64_t)&STACK[0x510]);

  _Unwind_Resume(a1);
}

uint64_t sub_1C4AF4D20(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  id v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(void *)(a1 + 80) = v3;
    operator delete(v3);
  }
  id v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(void *)(a1 + 56) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(void *)(a1 + 32) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

char **sub_1C4AF4D94(char **a1, char **a2)
{
  if (a1 != a2)
  {
    sub_1C49B7D84(a1, *a2, a2[1], (a2[1] - *a2) >> 4);
    sub_1C49B7D84(a1 + 3, a2[3], a2[4], (a2[4] - a2[3]) >> 4);
    sub_1C49B7D84(a1 + 6, a2[6], a2[7], (a2[7] - a2[6]) >> 4);
    sub_1C49B7D84(a1 + 9, a2[9], a2[10], (a2[10] - a2[9]) >> 4);
  }
  return a1;
}

void sub_1C4AF5528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1C4AF65B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47)
{
  _Unwind_Resume(a1);
}

void sub_1C4AF6A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4AF7688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28)
{
  _Unwind_Resume(a1);
}

void sub_1C4AF7C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1C4AF823C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1C4AF8D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27,void *a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  if (a34) {
    operator delete(a34);
  }

  _Unwind_Resume(a1);
}

void sub_1C4AF91F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1C4AF9E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, void *__p, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_1C4A2F114((uint64_t)&a47);
  _Unwind_Resume(a1);
}

BOOL sub_1C4AFA1B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_msgSend_floatValue(v3, v4, v5, v6, v7, v8);
  float v10 = v9;
  uint64_t v16 = objc_msgSend_firstObject(*(void **)(a1 + 32), v11, v12, v13, v14, v15);
  objc_msgSend_floatValue(v16, v17, v18, v19, v20, v21);
  BOOL v23 = v10 > v22;

  return v23;
}

void sub_1C4AFA220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AFA234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4AFB190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54)
{
  if (__p) {
    operator delete(__p);
  }

  sub_1C4A2F114(a14);
  _Unwind_Resume(a1);
}

BOOL sub_1C4AFB3E0(uint64_t a1, NSString *a2)
{
  parseFloatsFromString(a2, (char **)&v6);
  if ((char *)v7 - (char *)v6 == 8)
  {
    double v3 = *v6;
    double v4 = v6[1];
LABEL_4:
    uint64_t v7 = v6;
    operator delete(v6);
    return v4 - v3 * *(double *)(a1 + 32) > *(double *)(a1 + 40);
  }
  double v3 = *MEMORY[0x1E4F1DAD8];
  double v4 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
  if (v6) {
    goto LABEL_4;
  }
  return v4 - v3 * *(double *)(a1 + 32) > *(double *)(a1 + 40);
}

void sub_1C4AFBE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 sub_1C4AFC098(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1C4AFC0BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    double v4 = *(void **)(a1 + 48);
    if (v3 != v1)
    {
      uint64_t v5 = v3;
      do
      {
        uint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v1);
      double v4 = *(void **)(a1 + 48);
    }
    *(void *)(a1 + 56) = v1;
    operator delete(v4);
  }
}

void sub_1C4AFC14C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  double v4 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v5 = **(void **)(a1 + 48);
  uint64_t v6 = (void **)(v5 + 24 * a2);
  uint64_t v7 = (void *)v4[7];
  unint64_t v8 = v4[8];
  if ((unint64_t)v7 >= v8)
  {
    uint64_t v15 = (void *)v4[6];
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (v7 - v15);
    if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1C494A220();
    }
    uint64_t v17 = *v6;
    uint64_t v18 = v6[1];
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v15) >> 3);
    uint64_t v20 = 2 * v19;
    if (2 * v19 <= v16 + 1) {
      uint64_t v20 = v16 + 1;
    }
    if (v19 >= 0x555555555555555) {
      unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v21 = v20;
    }
    if (v21)
    {
      if (v21 > 0xAAAAAAAAAAAAAAALL) {
        sub_1C4949AA8();
      }
      float v22 = (char *)operator new(24 * v21);
    }
    else
    {
      float v22 = 0;
    }
    BOOL v23 = &v22[8 * (v7 - v15)];
    uint64_t v24 = &v22[24 * v21];
    *((void *)v23 + 1) = 0;
    *((void *)&v36 + 1) = v24;
    *((void *)v23 + 2) = 0;
    *(void *)BOOL v23 = 0;
    int64_t v25 = v18 - v17;
    if (v25)
    {
      if (v25 < 0) {
        sub_1C494A220();
      }
      std::string __src = v17;
      uint64_t v26 = (char *)operator new(v25);
      *(void *)BOOL v23 = v26;
      uint64_t v27 = &v26[16 * (v25 >> 4)];
      *((void *)v23 + 2) = v27;
      memcpy(v26, __src, v25);
      *((void *)v23 + 1) = v27;
    }
    uint64_t v14 = v23 + 24;
    *(void *)&long long v36 = v23 + 24;
    if (v7 == v15)
    {
      v4[6] = v23;
      v4[7] = v14;
      v4[8] = v24;
      uint64_t v2 = a2;
    }
    else
    {
      do
      {
        uint64_t v28 = v23;
        *((void *)v23 - 2) = 0;
        *((void *)v23 - 1) = 0;
        long long v29 = *(_OWORD *)(v7 - 3);
        v7 -= 3;
        *(_OWORD *)(v23 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v29;
        v23 -= 24;
        *((void *)v28 - 1) = v7[2];
        void *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
      }
      while (v7 != v15);
      uint64_t v7 = (void *)v4[6];
      uint64_t v30 = (void *)v4[7];
      v4[6] = v23;
      *(_OWORD *)(v4 + 7) = v36;
      uint64_t v14 = (void *)v36;
      uint64_t v2 = a2;
      if (v30 != v7)
      {
        uint64_t v31 = v30;
        do
        {
          uint64_t v33 = (void *)*(v31 - 3);
          v31 -= 3;
          uint64_t v32 = v33;
          if (v33)
          {
            *(v30 - 2) = v32;
            operator delete(v32);
          }
          uint64_t v30 = v31;
        }
        while (v31 != v7);
      }
    }
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    void *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    float v9 = *v6;
    float v10 = *(unsigned char **)(v5 + 24 * a2 + 8);
    int64_t v11 = v10 - (unsigned char *)*v6;
    if (v10 != *v6)
    {
      if (v11 < 0) {
        sub_1C494A220();
      }
      uint64_t v12 = (char *)operator new(v10 - (unsigned char *)*v6);
      void *v7 = v12;
      v7[1] = v12;
      uint64_t v13 = &v12[16 * (v11 >> 4)];
      v7[2] = v13;
      memcpy(v12, v9, v11);
      v7[1] = v13;
    }
    uint64_t v14 = v7 + 3;
    v4[7] = v7 + 3;
  }
  v4[7] = v14;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += (uint64_t)(*(void *)(**(void **)(a1 + 48)
                                                                                     + 24 * v2
                                                                                     + 8)
                                                                         - *(void *)(**(void **)(a1 + 48) + 24 * v2)) >> 4;
}

void sub_1C4AFC3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  uint64_t v7 = *v4;
  if (*v4)
  {
    void *v5 = v7;
    operator delete(v7);
  }
  sub_1C496CD14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4AFC408(_Unwind_Exception *exception_object)
{
  double v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  *(void *)(v2 + 56) = v1;
  _Unwind_Resume(exception_object);
}

void sub_1C4AFC95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  operator delete(v27);
  operator delete(v28);
  operator delete(v30);
  operator delete(v29);
  sub_1C4A2F114((uint64_t)&a27);

  _Unwind_Resume(a1);
}

void sub_1C4AFCC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4AFD098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v18 = a16;
    if (a16)
    {
LABEL_6:
      operator delete(v18);

      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v18 = a16;
    if (a16) {
      goto LABEL_6;
    }
  }

  _Unwind_Resume(a1);
}

void sub_1C4AFD814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1C4A2F114((uint64_t)&a21);
  sub_1C4A2F114((uint64_t)&a33);
  if (__p)
  {
    a52 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_1C4A2F114(v67 - 208);
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  operator delete(v66);
  if (a64)
  {
    a65 = (uint64_t)a64;
    operator delete(a64);
    uint64_t v69 = *(void **)(v67 - 232);
    if (!v69)
    {
LABEL_7:

      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v69 = *(void **)(v67 - 232);
    if (!v69) {
      goto LABEL_7;
    }
  }
  *(void *)(v67 - 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v69;
  operator delete(v69);
  goto LABEL_7;
}

double sub_1C4AFD9C8(float64x2_t *a1, double a2, double a3)
{
  *(void *)&double result = *(_OWORD *)&vaddq_f64(a1[4], vmlaq_n_f64(vmulq_n_f64(a1[3], a3), a1[2], a2));
  return result;
}

void sub_1C4AFF508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,void *a26,void *a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,void *a34)
{
  _Unwind_Resume(a1);
}

void sub_1C4B00318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34)
{
  _Unwind_Resume(a1);
}

void sub_1C4B0112C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_1C4B01B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4B01DF8(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  uint64_t v6 = __src;
  unint64_t v8 = *(char **)a1;
  float v9 = *(long long **)(a1 + 8);
  uint64_t v10 = a2 - *(void *)a1;
  int64_t v11 = (char *)(*(void *)a1 + (v10 & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void *)(a1 + 16);
  if (a5 > (v12 - (uint64_t)v9) >> 4)
  {
    unint64_t v13 = a5 + (((char *)v9 - v8) >> 4);
    if (v13 >> 60) {
      sub_1C494A220();
    }
    uint64_t v14 = v12 - (void)v8;
    uint64_t v15 = v14 >> 3;
    if (v14 >> 3 <= v13) {
      uint64_t v15 = v13;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16)
    {
      if (v16 >> 60) {
        sub_1C4949AA8();
      }
      uint64_t v17 = (char *)operator new(16 * v16);
    }
    else
    {
      uint64_t v17 = 0;
    }
    uint64_t v26 = &v17[16 * (v10 >> 4)];
    uint64_t v27 = 16 * a5;
    uint64_t v28 = &v26[16 * a5];
    long long v29 = v26;
    do
    {
      long long v30 = *(_OWORD *)v6;
      v6 += 16;
      *(_OWORD *)long long v29 = v30;
      v29 += 16;
      v27 -= 16;
    }
    while (v27);
    uint64_t v31 = *(char **)a1;
    if (*(char **)a1 != v11)
    {
      uint64_t v32 = v11;
      do
      {
        *((_OWORD *)v26 - 1) = *((_OWORD *)v32 - 1);
        v26 -= 16;
        v32 -= 16;
      }
      while (v32 != v31);
      float v9 = *(long long **)(a1 + 8);
    }
    uint64_t v33 = &v17[16 * v16];
    if (v9 != (long long *)v11) {
      memmove(v28, v11, (char *)v9 - v11);
    }
    uint64_t v34 = *(char **)a1;
    *(void *)a1 = v26;
    *(void *)(a1 + 8) = &v28[(char *)v9 - v11];
    *(void *)(a1 + 16) = v33;
    if (v34)
    {
      operator delete(v34);
    }
    return;
  }
  uint64_t v18 = ((char *)v9 - v11) >> 4;
  if (v18 >= a5)
  {
    unint64_t v19 = &__src[16 * a5];
    unint64_t v21 = *(char **)(a1 + 8);
    float v22 = &v11[16 * a5];
    BOOL v23 = &v9[-a5];
    uint64_t v24 = v21;
    if (v23 >= v9)
    {
LABEL_21:
      *(void *)(a1 + 8) = v24;
      if (v21 != v22) {
        memmove(&v21[-16 * ((v21 - v22) >> 4)], v11, v21 - v22);
      }
      if (v19 != v6)
      {
        memmove(v11, v6, v19 - v6);
      }
      return;
    }
LABEL_19:
    uint64_t v24 = v21;
    do
    {
      long long v25 = *v23++;
      *(_OWORD *)uint64_t v24 = v25;
      v24 += 16;
    }
    while (v23 < v9);
    goto LABEL_21;
  }
  unint64_t v19 = &__src[16 * v18];
  int64_t v20 = a4 - v19;
  if (a4 != v19) {
    memmove(*(void **)(a1 + 8), &__src[16 * v18], a4 - v19);
  }
  unint64_t v21 = (char *)v9 + v20;
  *(void *)(a1 + 8) = (char *)v9 + v20;
  if ((char *)v9 - v11 >= 1)
  {
    float v22 = &v11[16 * a5];
    BOOL v23 = (long long *)&v21[-16 * a5];
    uint64_t v24 = (char *)v9 + v20;
    if (v23 >= v9) {
      goto LABEL_21;
    }
    goto LABEL_19;
  }
}

void sub_1C4B02318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_1C4B023C8(uint64_t a1, void *a2, void *a3, uint64_t a4, BOOL *a5, void *a6)
{
  id v10 = a2;
  id v11 = a3;
  self;
  uint64_t v14 = objc_msgSend_swappableColumnIndexesFromResults_locales_topLocaleIndex_(CHRecognizerConfiguration, v12, (uint64_t)v10, (uint64_t)v11, a4, v13, v10);
  v51[0] = MEMORY[0x1E4F143A8];
  v51[1] = 3221225472;
  v51[2] = sub_1C4B026A0;
  v51[3] = &unk_1E64E3B30;
  v51[4] = a4;
  uint64_t v19 = objc_msgSend_indexOfObjectPassingTest_(v14, v15, (uint64_t)v51, v16, v17, v18);
  v50[0] = MEMORY[0x1E4F143A8];
  v50[1] = 3221225472;
  v50[2] = sub_1C4B026FC;
  v50[3] = &unk_1E64E3B30;
  void v50[4] = a4;
  uint64_t v24 = objc_msgSend_indexOfObjectPassingTest_(v14, v20, (uint64_t)v50, v21, v22, v23);
  id v29 = v10;
  if (v24 != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v46 = objc_msgSend_objectAtIndexedSubscript_(v11, v25, a4, v26, v27, v28);
    uint64_t v48 = v29;
    if (v19 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  long long v30 = objc_msgSend_objectAtIndexedSubscript_(v14, v25, 0, v26, v27, v28);
  uint64_t v35 = objc_msgSend_objectAtIndexedSubscript_(v30, v31, 0, v32, v33, v34);
  int v41 = objc_msgSend_intValue(v35, v36, v37, v38, v39, v40);
  uint64_t v46 = objc_msgSend_objectAtIndexedSubscript_(v11, v42, v41, v43, v44, v45);

  uint64_t v48 = v29;
  if (v19 != 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_5:
    uint64_t v48 = objc_msgSend_resultsBySwapping_swappableColumns_locales_topLocaleIndex_topLocale_(CHTokenizedTextResult, v47, (uint64_t)v29, (uint64_t)v14, (uint64_t)v11, a4, v46);
  }
LABEL_6:
  if (a5) {
    *a5 = v19 != 0x7FFFFFFFFFFFFFFFLL;
  }
  if (a6) {
    *a6 = v46;
  }

  return v48;
}

void sub_1C4B02608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1C4B02650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1C4B02670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1C4B02688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

BOOL sub_1C4B026A0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_objectAtIndexedSubscript_(a2, (const char *)a2, 0, a4, a5, a6);
  BOOL v13 = *(void *)(a1 + 32) != (int)objc_msgSend_intValue(v7, v8, v9, v10, v11, v12);

  return v13;
}

void sub_1C4B026EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1C4B026FC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_objectAtIndexedSubscript_(a2, (const char *)a2, 0, a4, a5, a6);
  BOOL v13 = *(void *)(a1 + 32) == (int)objc_msgSend_intValue(v7, v8, v9, v10, v11, v12);

  return v13;
}

void sub_1C4B02748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B02AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C4B02BC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B02C78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B02DFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B02E24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B02E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B02E50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B02E64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B02E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B02EF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B0303C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4B03058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  unint64_t v8 = v7;

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4B03078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4B03090(uint64_t a1, void *a2, void *a3)
{
  id v18 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = objc_msgSend_hash(v18, v7, v8, v9, v10, v11)
                                                              - v6
                                                              + 32 * v6;
  uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = objc_msgSend_hash(v5, v13, v14, v15, v16, v17)
                                                              - v12
                                                              + 32 * v12;
}

void sub_1C4B0313C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B0331C(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 32));
  uint64_t v7 = objc_msgSend_function(*(void **)(*(void *)(a1 + 32) + 8), v2, v3, v4, v5, v6);
  id v18 = 0;
  uint64_t v12 = objc_msgSend_prepareForExecutionWithError_(v7, v8, (uint64_t)&v18, v9, v10, v11);
  id v13 = v18;
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void **)(v14 + 16);
  *(void *)(v14 + 16) = v12;

  if (v13)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v16 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_1C492D000, v16, OS_LOG_TYPE_ERROR, "Could not prepare CHE5MLExecutionContext for execution.", v17, 2u);
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 32));
  (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 24) + 16))();
}

void sub_1C4B04000(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v7 = (id)qword_1EA3C9FC8;
  uint64_t v8 = v7;
  os_signpost_id_t v9 = a1[6];
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    *(_WORD *)std::string buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v8, OS_SIGNPOST_INTERVAL_END, v9, "CHE5MLContextExecution", "", buf, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v10 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1C492D000, v10, OS_LOG_TYPE_DEFAULT, "END \"CHE5MLContextExecution\"", v11, 2u);
  }

  (*(void (**)(void))(a1[5] + 16))();
  os_unfair_lock_unlock((os_unfair_lock_t)(a1[4] + 32));
}

void sub_1C4B042A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B0438C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B043A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B04470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B04488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B04498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t compareCellsByPosition(objc_object *a1, objc_object *a2, void *a3)
{
  uint64_t v4 = a2;
  unint64_t v10 = objc_msgSend_inputRange(a1, v5, v6, v7, v8, v9);
  uint64_t v12 = v11;
  unint64_t v17 = objc_msgSend_inputRange(v4, v11, v13, v14, v15, v16);
  uint64_t v18 = 1;
  uint64_t v20 = (unint64_t)&v12[v10] > v17 + v19;
  if ((unint64_t)&v12[v10] < v17 + v19) {
    uint64_t v20 = -1;
  }
  if (v10 <= v17) {
    uint64_t v18 = v20;
  }
  if (v10 >= v17) {
    uint64_t v21 = v18;
  }
  else {
    uint64_t v21 = -1;
  }

  return v21;
}

void sub_1C4B0452C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B0453C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t compareCellsByProbability(objc_object *a1, objc_object *a2, void *a3)
{
  uint64_t v4 = a2;
  objc_msgSend_probability(a1, v5, v6, v7, v8, v9);
  double v11 = v10;
  objc_msgSend_probability(v4, v12, v13, v14, v15, v16);
  if (v11 > v17) {
    uint64_t v18 = -1;
  }
  else {
    uint64_t v18 = v11 < v17;
  }

  return v18;
}

void sub_1C4B045A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B045B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t compareRangesByPosition(objc_object *a1, objc_object *a2, void *a3)
{
  uint64_t v4 = a2;
  unint64_t v9 = objc_msgSend_rangeFromString_(CHParseTableCell, v5, (uint64_t)a1, v6, v7, v8);
  double v11 = v10;
  unint64_t v15 = objc_msgSend_rangeFromString_(CHParseTableCell, v10, (uint64_t)v4, v12, v13, v14);
  if (v9 < v15) {
    goto LABEL_5;
  }
  if (v9 > v15)
  {

    return 1;
  }
  if ((unint64_t)&v11[v9] >= v15 + v16)
  {
    BOOL v18 = (unint64_t)&v11[v9] > v15 + v16;

    return v18;
  }
  else
  {
LABEL_5:

    return -1;
  }
}

void sub_1C4B0467C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B0468C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B046F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B047E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B047FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B04818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B04830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B04A60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B04A74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B04A88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B04AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B04C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v15 = v13;

  _Unwind_Resume(a1);
}

void sub_1C4B04C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B04D3C(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1C4B04D6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B04E50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B04E64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B04E74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B04E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B04EA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B04EB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B05024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B05170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4B05198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1C4B051A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v9 = objc_msgSend_nonTerminal(v3, v4, v5, v6, v7, v8);
  unint64_t v15 = objc_msgSend_name(v9, v10, v11, v12, v13, v14);
  if (objc_msgSend_isEqualToString_(v15, v16, *(void *)(a1 + 32), v17, v18, v19))
  {
    v34.locatiounint64_t n = objc_msgSend_inputRange(v3, v20, v21, v22, v23, v24);
    NSRange v25 = NSIntersectionRange(v34, *(NSRange *)(a1 + 40));
    BOOL v32 = v25.location == objc_msgSend_inputRange(v3, (const char *)v25.length, v26, v27, v28, v29) && v25.length == v30;
  }
  else
  {
    BOOL v32 = 0;
  }

  return v32;
}

void sub_1C4B05248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B0525C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B0526C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B0532C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B05810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4B05ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4B05AE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B05AF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B05B0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B05B1C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  long long v107 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  uint64_t v11 = objc_msgSend_grammar(*(void **)(a1 + 32), v6, v7, v8, v9, v10);
  uint64_t v17 = objc_msgSend_terminalProductions(v11, v12, v13, v14, v15, v16);

  obuint64_t j = v17;
  uint64_t v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v18, (uint64_t)&v107, (uint64_t)v111, 16, v19);
  if (v25)
  {
    uint64_t v26 = *(void *)v108;
    do
    {
      for (uint64_t i = 0; i != v25; ++i)
      {
        if (*(void *)v108 != v26) {
          objc_enumerationMutation(obj);
        }
        uint64_t v28 = *(void **)(*((void *)&v107 + 1) + 8 * i);
        uint64_t v29 = objc_msgSend_rightNode1(v28, v20, v21, v22, v23, v24);
        int isEqualToString = objc_msgSend_isEqualToString_(v29, v30, (uint64_t)v5, v31, v32, v33);

        if (isEqualToString)
        {
          objc_msgSend_probability(v28, v20, v21, v22, v23, v24);
          double v36 = v35;
          if (v35 > 0.0)
          {
            uint64_t v37 = [CHTerminal alloc];
            uint64_t v43 = objc_msgSend_rightNode1(v28, v38, v39, v40, v41, v42);
            uint64_t v46 = objc_msgSend_initWithName_inputRange_(v37, v44, (uint64_t)v43, a3, a4, v45);

            uint64_t v47 = [CHNonTerminal alloc];
            uint64_t v53 = objc_msgSend_leftNode(v28, v48, v49, v50, v51, v52);
            long long v56 = objc_msgSend_initWithName_leftNode_rightNode_(v47, v54, (uint64_t)v53, (uint64_t)v46, 0, v55);

            long long v57 = [CHParseTableCell alloc];
            inited = objc_msgSend_initNonTerminal_range_(v57, v58, (uint64_t)v56, a3, a4, v59);
            objc_msgSend_setRule_(inited, v61, (uint64_t)v28, v62, v63, v64);
            objc_msgSend_setTerminal_(inited, v65, (uint64_t)v46, v66, v67, v68);
            objc_msgSend_setProbability_(inited, v69, v70, v71, v72, v73, v36);
            uint64_t v74 = [CHParseTree alloc];
            uint64_t v80 = objc_msgSend_grammar(*(void **)(a1 + 32), v75, v76, v77, v78, v79);
            uint64_t v85 = objc_msgSend_initWithGrammar_(v74, v81, (uint64_t)v80, v82, v83, v84);
            objc_msgSend_setParseTree_(inited, v86, (uint64_t)v85, v87, v88, v89);

            uint64_t v95 = objc_msgSend_parseTree(inited, v90, v91, v92, v93, v94);
            objc_msgSend_setRoot_(v95, v96, (uint64_t)v56, v97, v98, v99);

            objc_msgSend_addCell_(*(void **)(a1 + 40), v100, (uint64_t)inited, v101, v102, v103);
          }
        }
      }
      uint64_t v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v20, (uint64_t)&v107, (uint64_t)v111, 16, v24);
    }
    while (v25);
  }
}

void sub_1C4B05DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4B05FD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B06050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B06068(void *a1)
{
  id v1 = a1;
  if (objc_msgSend_length(v1, v2, v3, v4, v5, v6) == 1)
  {
    uint64_t v12 = objc_msgSend_decimalDigitCharacterSet(MEMORY[0x1E4F28B88], v7, v8, v9, v10, v11);
    uint64_t v17 = objc_msgSend_stringByTrimmingCharactersInSet_(v1, v13, (uint64_t)v12, v14, v15, v16);
    uint64_t v23 = objc_msgSend_length(v17, v18, v19, v20, v21, v22);

    if (v23 && (objc_msgSend_isEqualToString_(v1, v24, @".", v25, v26, v27) & 1) == 0)
    {
      uint64_t isEqualToString = objc_msgSend_isEqualToString_(v1, v28, @".", v29, v30, v31);

      return isEqualToString;
    }
    else
    {

      return 1;
    }
  }
  else
  {

    return 0;
  }
}

void sub_1C4B06144(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4B06160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B06174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B0728C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  uint64_t v40 = (void *)STACK[0x358];
  if (STACK[0x358])
  {
    STACK[0x360] = (unint64_t)v40;
    operator delete(v40);
  }
  uint64_t v41 = (void *)STACK[0x370];
  if (STACK[0x370])
  {
    STACK[0x378] = (unint64_t)v41;
    operator delete(v41);
  }

  _Unwind_Resume(a1);
}

void sub_1C4B07628(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    a1[4] = v4;
    uint64_t v6 = (void *)a1[1];
    uint64_t v5 = (char *)a1[2];
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_94:
      *(void *)uint64_t v5 = v8;
      goto LABEL_95;
    }
    uint64_t v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      uint64_t v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1) {
        uint64_t v11 = v10 + 1;
      }
      else {
        uint64_t v11 = v10 + 2;
      }
      uint64_t v12 = v11 >> 1;
      uint64_t v13 = -v12;
      uint64_t v14 = &v7[-8 * v12];
      int64_t v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        uint64_t v7 = (char *)a1[1];
      }
      uint64_t v5 = &v14[v15];
      uint64_t v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    unint64_t v38 = (v5 - v9) >> 2;
    if (v5 == v9) {
      unint64_t v38 = 1;
    }
    if (v38 >> 61) {
      goto LABEL_111;
    }
    unint64_t v39 = v38 >> 2;
    uint64_t v40 = 8 * v38;
    uint64_t v41 = (char *)operator new(8 * v38);
    uint64_t v42 = &v41[8 * v39];
    int64_t v44 = v5 - v7;
    BOOL v43 = v5 == v7;
    uint64_t v5 = v42;
    if (!v43)
    {
      uint64_t v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        uint64_t v92 = &v41[8 * v39];
        uint64_t v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          uint64_t v93 = (v45 >> 3) + 1;
          uint64_t v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v46 = &v42[v94];
          v7 += v94;
          uint64_t v95 = (long long *)(v6 + 3);
          uint64_t v96 = v92 + 16;
          uint64_t v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *uint64_t v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_91;
          }
        }
      }
      else
      {
        uint64_t v46 = &v41[8 * v39];
      }
      do
      {
        uint64_t v99 = *(void *)v7;
        v7 += 8;
        *(void *)uint64_t v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_91:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9) {
      goto LABEL_94;
    }
    uint64_t v100 = v9;
LABEL_93:
    operator delete(v100);
    uint64_t v5 = (char *)a1[2];
    goto LABEL_94;
  }
  uint64_t v18 = (char *)a1[2];
  uint64_t v17 = (char *)a1[3];
  uint64_t v20 = (char *)*a1;
  uint64_t v19 = (char *)a1[1];
  uint64_t v21 = v18 - v19;
  uint64_t v22 = (v18 - v19) >> 3;
  uint64_t v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    uint64_t v24 = operator new(0x1000uLL);
    uint64_t v25 = v24;
    if (v17 != v18)
    {
      *(void *)uint64_t v18 = v24;
LABEL_95:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      unint64_t v69 = (v17 - v19) >> 2;
      if (v18 == v19) {
        unint64_t v69 = 1;
      }
      if (v69 >> 61) {
        goto LABEL_111;
      }
      unint64_t v70 = (v69 + 3) >> 2;
      uint64_t v71 = 8 * v69;
      uint64_t v72 = (char *)operator new(8 * v69);
      uint64_t v47 = &v72[8 * v70];
      uint64_t v73 = v47;
      if (v18 != v19)
      {
        uint64_t v73 = &v47[8 * v22];
        uint64_t v74 = &v72[8 * v70];
        uint64_t v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38) {
          goto LABEL_115;
        }
        uint64_t v76 = &v72[8 * v70];
        uint64_t v74 = v76;
        uint64_t v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20) {
          goto LABEL_115;
        }
        unint64_t v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v74 = &v47[v78];
        uint64_t v75 = &v19[v78];
        uint64_t v79 = (long long *)(v19 + 16);
        uint64_t v80 = v76 + 16;
        uint64_t v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *uint64_t v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_115:
          do
          {
            uint64_t v83 = *(void *)v75;
            v75 += 8;
            *(void *)uint64_t v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        uint64_t v47 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v47 = v19;
    }
    *((void *)v47 - 1) = v25;
    uint64_t v84 = (char *)a1[1];
    uint64_t v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    uint64_t v8 = *((void *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3]) {
      goto LABEL_94;
    }
    uint64_t v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      uint64_t v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1) {
        uint64_t v87 = v86 + 1;
      }
      else {
        uint64_t v87 = v86 + 2;
      }
      uint64_t v88 = v87 >> 1;
      uint64_t v89 = -v88;
      uint64_t v90 = &v84[-8 * v88];
      int64_t v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        uint64_t v84 = (char *)a1[1];
      }
      uint64_t v5 = &v90[v91];
      uint64_t v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_94;
    }
    unint64_t v101 = (v5 - v85) >> 2;
    if (v5 == v85) {
      unint64_t v101 = 1;
    }
    if (!(v101 >> 61))
    {
      unint64_t v102 = v101 >> 2;
      uint64_t v103 = 8 * v101;
      uint64_t v104 = (char *)operator new(8 * v101);
      uint64_t v105 = &v104[8 * v102];
      int64_t v106 = v5 - v84;
      BOOL v43 = v5 == v84;
      uint64_t v5 = v105;
      if (!v43)
      {
        uint64_t v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          long long v109 = &v104[8 * v102];
          long long v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            uint64_t v110 = (v107 >> 3) + 1;
            uint64_t v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            long long v108 = &v105[v111];
            uint64_t v112 = &v84[v111];
            uint64_t v113 = (long long *)(v84 + 16);
            uint64_t v114 = v109 + 16;
            uint64_t v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              _OWORD *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            uint64_t v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_108;
            }
          }
        }
        else
        {
          long long v108 = &v104[8 * v102];
        }
        do
        {
          uint64_t v117 = *(void *)v84;
          v84 += 8;
          *(void *)long long v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_108:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85) {
        goto LABEL_94;
      }
      uint64_t v100 = v85;
      goto LABEL_93;
    }
LABEL_111:
    sub_1C4949AA8();
  }
  uint64_t v26 = v23 >> 2;
  if (v17 == v20) {
    unint64_t v27 = 1;
  }
  else {
    unint64_t v27 = v26;
  }
  if (v27 >> 61) {
    goto LABEL_111;
  }
  uint64_t v28 = (char *)operator new(8 * v27);
  uint64_t v29 = operator new(0x1000uLL);
  uint64_t v30 = v29;
  uint64_t v31 = &v28[8 * v22];
  uint64_t v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v21 >> 2;
      }
      if (v48 >> 61) {
        sub_1C4949AA8();
      }
      uint64_t v31 = (char *)operator new(8 * v48);
      uint64_t v32 = &v31[8 * v48];
      operator delete(v28);
      uint64_t v49 = (char *)a1[1];
      uint64_t v18 = (char *)a1[2];
      uint64_t v28 = v31;
      *(void *)uint64_t v31 = v30;
      NSRange v34 = v31 + 8;
      if (v18 == v49) {
        goto LABEL_25;
      }
      do
      {
LABEL_46:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31) {
              unint64_t v54 = 1;
            }
            else {
              unint64_t v54 = (v32 - v31) >> 2;
            }
            if (v54 >> 61) {
              sub_1C4949AA8();
            }
            uint64_t v55 = (char *)operator new(8 * v54);
            uint64_t v28 = v55;
            unint64_t v56 = (v54 + 3) >> 2;
            uint64_t v50 = &v55[8 * v56];
            double v36 = v50;
            int64_t v57 = v34 - v31;
            if (v34 != v31)
            {
              double v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v58 = v57 - 8;
              uint64_t v59 = &v55[8 * v56];
              uint64_t v60 = v31;
              if (v58 < 0x38) {
                goto LABEL_116;
              }
              uint64_t v61 = 8 * v56;
              uint64_t v59 = &v55[8 * v56];
              uint64_t v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20) {
                goto LABEL_116;
              }
              uint64_t v62 = (v58 >> 3) + 1;
              uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v59 = &v50[v63];
              uint64_t v60 = &v31[v63];
              uint64_t v64 = (long long *)(v31 + 16);
              uint64_t v65 = &v55[v61 + 16];
              uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)uint64_t v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_116:
                do
                {
                  uint64_t v68 = *(void *)v60;
                  v60 += 8;
                  *(void *)uint64_t v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            uint64_t v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            uint64_t v52 = (v32 - v34) >> 3;
            if (v52 >= -1) {
              unint64_t v53 = v52 + 1;
            }
            else {
              unint64_t v53 = v52 + 2;
            }
            double v36 = &v34[8 * (v53 >> 1)];
            uint64_t v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              uint64_t v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              uint64_t v28 = v31;
            }
          }
        }
        else
        {
          uint64_t v50 = v31;
          double v36 = v34;
        }
        uint64_t v51 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v50 - 1) = v51;
        double v35 = v50 - 8;
        NSRange v34 = v36;
        uint64_t v31 = v35;
      }
      while (v18 != (char *)a1[1]);
      goto LABEL_26;
    }
    unint64_t v33 = v22 + 2;
    if (v22 >= -1) {
      unint64_t v33 = v22 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
  *(void *)uint64_t v31 = v29;
  NSRange v34 = v31 + 8;
  if (v18 != v19) {
    goto LABEL_46;
  }
LABEL_25:
  double v35 = v31;
  double v36 = v34;
LABEL_26:
  uint64_t v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
  {
    operator delete(v37);
  }
}

void sub_1C4B07CA4(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B07CC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B07CD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B07CEC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B083B4(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 < a3) {
    return -1;
  }
  else {
    return 1;
  }
}

void sub_1C4B084C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B084E0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4B084F0(uint64_t a1)
{
}

void sub_1C4B084F8(uint64_t a1)
{
}

void sub_1C4B08ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  _Block_object_dispose(&a18, 8);
  _Block_object_dispose(&a27, 8);

  _Block_object_dispose((const void *)(v34 - 176), 8);
  _Block_object_dispose((const void *)(v34 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1C4B08F60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B08F80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B08F94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B08FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B08FC0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4B08FD0(uint64_t a1)
{
}

void sub_1C4B08FD8(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  unint64_t v4 = (id)qword_1EA3C9FB0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = objc_msgSend_description(v3, v5, v6, v7, v8, v9);
    int v13 = 138412290;
    uint64_t v14 = v10;
    _os_log_impl(&dword_1C492D000, v4, OS_LOG_TYPE_ERROR, "An XPC proxy service error occurred: %@", (uint8_t *)&v13, 0xCu);
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v3;
}

void sub_1C4B090E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B090F8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a3;
  uint64_t v10 = v7;
  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
  }
  else if (v7)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a3);
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v11 = (id)qword_1EA3C9FB0;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = objc_msgSend_localizedDescription(v10, v12, v13, v14, v15, v16);
      int v18 = 138412290;
      uint64_t v19 = v17;
      _os_log_impl(&dword_1C492D000, v11, OS_LOG_TYPE_DEBUG, "Error during recognition: %@", (uint8_t *)&v18, 0xCu);
    }
  }
  objc_msgSend_logDrawingsAndResultsForRequest_result_error_(*(void **)(a1 + 32), v8, *(void *)(a1 + 40), (uint64_t)v6, (uint64_t)v10, v9);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
}

void sub_1C4B09260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B0937C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B093B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B09434(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B09564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B0C860(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_setWithObjects_(MEMORY[0x1E4F1CAD0], a2, @"+", a4, a5, a6, @"-", @"\\times", @"\\cdot", @"*", @"\\div", @"/", @":", 0);
  id v7 = (void *)qword_1EA3C9328;
  qword_1EA3C9328 = v6;
}

void sub_1C4B0C980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B0C990(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B0CA04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::describe(CoreHandwriting *this, const CoreHandwriting::BoundingBox *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_stringWithFormat_(NSString, (const char *)a2, @"x_miunint64_t n = %.2f, y_miunint64_t n = %.2f, x_max = %.2f, y_max = %.2f", a4, a5, a6, *(void *)this, *((void *)this + 2), *((void *)this + 1), *((void *)this + 3));
}

id CoreHandwriting::writeObjectToFileInFolder(CoreHandwriting *this, objc_object *a2, NSURL *a3, NSString *a4)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = this;
  id v7 = a2;
  unint64_t v56 = a3;
  id v8 = objc_alloc_init(MEMORY[0x1E4F28CB8]);
  uint64_t v14 = objc_msgSend_absoluteString(v7, v9, v10, v11, v12, v13);
  char v19 = objc_msgSend_fileExistsAtPath_(v8, v15, (uint64_t)v14, v16, v17, v18);

  if (v19)
  {
    uint64_t v24 = 0;
LABEL_5:
    uint64_t v28 = objc_msgSend_URLByAppendingPathComponent_(v7, v20, (uint64_t)v56, v21, v22, v23);
    uint64_t v31 = objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(MEMORY[0x1E4F28DB0], v29, (uint64_t)v6, 1, 0, v30);
    id v57 = v24;
    objc_msgSend_writeToURL_options_error_(v31, v32, (uint64_t)v28, 1, (uint64_t)&v57, v33);
    id v27 = v57;

    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v34 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      double v35 = (objc_class *)objc_opt_class();
      NSStringFromClass(v35);
      double v36 = (objc_object *)(id)objc_claimAutoreleasedReturnValue();
      uint64_t v42 = objc_msgSend_absoluteString(v28, v37, v38, v39, v40, v41);
      unint64_t v48 = objc_msgSend_description(v27, v43, v44, v45, v46, v47);
      *(_DWORD *)std::string buf = 138412802;
      uint64_t v60 = v36;
      __int16 v61 = 2112;
      id v62 = v42;
      __int16 v63 = 2112;
      uint64_t v64 = v48;
      _os_log_impl(&dword_1C492D000, v34, OS_LOG_TYPE_DEFAULT, "%@ saving at URL %@, error = %@", buf, 0x20u);
    }
    if (v27)
    {
      unint64_t v54 = 0;
    }
    else
    {
      unint64_t v54 = objc_msgSend_absoluteString(v28, v49, v50, v51, v52, v53);
    }

    goto LABEL_18;
  }
  id v58 = 0;
  char DirectoryAtURL_withIntermediateDirectories_attributes_error = objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(v8, v20, (uint64_t)v7, 1, 0, (uint64_t)&v58);
  id v26 = v58;
  id v27 = v26;
  if (DirectoryAtURL_withIntermediateDirectories_attributes_error)
  {
    uint64_t v24 = v26;
    goto LABEL_5;
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v28 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 138412546;
    uint64_t v60 = v7;
    __int16 v61 = 2112;
    id v62 = v27;
    _os_log_impl(&dword_1C492D000, v28, OS_LOG_TYPE_ERROR, "Unable to create folder at URL %@: Error %@", buf, 0x16u);
  }
  unint64_t v54 = 0;
LABEL_18:

  return v54;
}

void sub_1C4B0CD7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B0CE38()
{
  id v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.CHGroupingModel.queue", v0);
  unint64_t v2 = (void *)qword_1EA3C9330;
  qword_1EA3C9330 = (uint64_t)v1;

  id v3 = (void *)qword_1EA3C9338;
  qword_1EA3C9338 = 0;

  unint64_t v4 = (void *)qword_1EA3C9340;
  qword_1EA3C9340 = 0;
}

void sub_1C4B0CF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4B0CFA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B0CFB8(uint64_t result)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!qword_1EA3C9338)
  {
    id v1 = *(id *)(result + 32);
    id v7 = (const char *)objc_msgSend_UTF8String(v1, v2, v3, v4, v5, v6);
    pathForResource(v7, 0, (UInt8 *)__s);
    size_t v8 = strlen(__s);
    if (v8 > 0x7FFFFFFFFFFFFFF7) {
      sub_1C4949B7C();
    }
    size_t v9 = v8;
    if (v8 >= 0x17)
    {
      uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v11 = v8 | 7;
      }
      uint64_t v12 = v11 + 1;
      uint64_t v10 = operator new(v11 + 1);
      __dst[1] = v9;
      unint64_t v14 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v14) = v8;
      uint64_t v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((unsigned char *)v10 + v9) = 0;
        operator new();
      }
    }
    memcpy(v10, __s, v9);
    goto LABEL_10;
  }
  return result;
}

void sub_1C4B0D2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (v21 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C4B0D428(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B0D528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CHGroupingModel;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C4B0D7C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B0DA50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B0DC5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B0DCE8(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  objc_msgSend_bounds(a2, v5, v6, v7, v8, v9);
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  CGFloat v15 = v14;
  CGFloat v17 = v16;
  objc_msgSend_bounds(v4, v18, v19, v20, v21, v22);
  CGFloat rect = v23;
  CGFloat v25 = v24;
  CGFloat v27 = v26;
  CGFloat v29 = v28;
  v35.origin.CGFloat x = v11;
  v35.origin.CGFloat y = v13;
  v35.size.CGFloat width = v15;
  v35.size.CGFloat height = v17;
  double MidY = CGRectGetMidY(v35);
  v36.origin.CGFloat x = rect;
  v36.origin.CGFloat y = v25;
  v36.size.CGFloat width = v27;
  v36.size.CGFloat height = v29;
  if (MidY >= CGRectGetMidY(v36))
  {
    v37.origin.CGFloat x = v11;
    v37.origin.CGFloat y = v13;
    v37.size.CGFloat width = v15;
    v37.size.CGFloat height = v17;
    double v32 = CGRectGetMidY(v37);
    v38.origin.CGFloat x = rect;
    v38.origin.CGFloat y = v25;
    v38.size.CGFloat width = v27;
    v38.size.CGFloat height = v29;
    uint64_t v31 = v32 > CGRectGetMidY(v38);
  }
  else
  {
    uint64_t v31 = -1;
  }

  return v31;
}

void sub_1C4B0DDE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B0DDF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B0E0DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B0E328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B0E918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1C4B1091C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58)
{
  operator delete(v58);

  if (__p)
  {
    uint64_t v60 = (void *)a58;
    __int16 v61 = __p;
    if ((void *)a58 != __p)
    {
      do
      {
        id v62 = (void *)*(v60 - 3);
        if (v62)
        {
          do
          {
            __int16 v63 = (void *)*v62;
            operator delete(v62);
            id v62 = v63;
          }
          while (v63);
        }
        uint64_t v65 = (void *)*(v60 - 5);
        v60 -= 5;
        uint64_t v64 = v65;
        *uint64_t v60 = 0;
        if (v65) {
          operator delete(v64);
        }
      }
      while (v60 != __p);
      __int16 v61 = __p;
    }
    operator delete(v61);
  }

  _Unwind_Resume(a1);
}

__n128 sub_1C4B10CAC(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1C4B10CD0(uint64_t a1)
{
  id v1 = *(void **)(a1 + 48);
  if (v1)
  {
    uint64_t v3 = *(void **)(a1 + 56);
    id v4 = *(void **)(a1 + 48);
    if (v3 == v1)
    {
      *(void *)(a1 + 56) = v1;
    }
    else
    {
      do
      {
        uint64_t v5 = (void *)*(v3 - 3);
        if (v5)
        {
          do
          {
            uint64_t v6 = (void *)*v5;
            operator delete(v5);
            uint64_t v5 = v6;
          }
          while (v6);
        }
        uint64_t v8 = (void *)*(v3 - 5);
        v3 -= 5;
        uint64_t v7 = v8;
        void *v3 = 0;
        if (v8) {
          operator delete(v7);
        }
      }
      while (v3 != v1);
      id v4 = *(void **)(a1 + 48);
      *(void *)(a1 + 56) = v1;
    }
    operator delete(v4);
  }
}

void sub_1C4B10D90(uint64_t a1)
{
  v163[1] = *MEMORY[0x1E4F143B8];
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  unint64_t v2 = (id)qword_1EA3C9FC8;
  os_signpost_id_t v3 = os_signpost_id_generate(v2);

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  id v4 = (id)qword_1EA3C9FC8;
  uint64_t v5 = v4;
  unint64_t v6 = v3 - 1;
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    *(_WORD *)std::string buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v3, "CHStrokeGroupingModelFeatureExtraction", "", buf, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v7 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C492D000, v7, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHStrokeGroupingModelFeatureExtraction\"", buf, 2u);
  }

  uint64_t v9 = objc_msgSend_createDrawingForStrokes_interpolationType_resolution_cancellationBlock_(CHStrokeUtilities, v8, *(void *)(a1 + 32), 0, 1, 0);
  uint64_t v14 = objc_msgSend_normalizedDrawing_(*(void **)(a1 + 40), v10, (uint64_t)v9, v11, v12, v13);

  CGFloat v15 = *(void **)(a1 + 40);
  uint64_t v150 = (void *)v14;
  uint64_t v21 = objc_msgSend_count(*(void **)(a1 + 32), v16, v17, v18, v19, v20);
  uint64_t v26 = objc_msgSend__closestConfigurationForInputStrokes_(v15, v22, v21, v23, v24, v25);
  objc_msgSend_extractBBoxFeaturesForDrawing_padTo_(*(void **)(a1 + 40), v27, v14, v26, v28, v29);
  id v153 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_extractSignalFeaturesFromDrawing_padTo_(*(void **)(a1 + 40), v30, v14, v26, v31, v32);
  id v154 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_extractSignalMaskFromDrawing_padTo_(*(void **)(a1 + 40), v33, v14, v26, v34, v35);
  id v155 = (id)objc_claimAutoreleasedReturnValue();
  if (qword_1EA3CA000 == -1)
  {
    CGRect v36 = (id)qword_1EA3C9FC8;
    if (v6 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_16;
    }
  }
  else
  {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    CGRect v36 = (id)qword_1EA3C9FC8;
    if (v6 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_16;
    }
  }
  if (os_signpost_enabled(v36))
  {
    *(_WORD *)std::string buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v36, OS_SIGNPOST_INTERVAL_END, v3, "CHStrokeGroupingModelFeatureExtraction", "", buf, 2u);
  }
LABEL_16:

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  CGRect v37 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C492D000, v37, OS_LOG_TYPE_DEFAULT, "END \"CHStrokeGroupingModelFeatureExtraction\"", buf, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  CGRect v38 = (id)qword_1EA3C9FC8;
  os_signpost_id_t spid = os_signpost_id_generate(v38);

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v39 = (id)qword_1EA3C9FC8;
  uint64_t v40 = v39;
  if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v39))
  {
    *(_WORD *)std::string buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v40, OS_SIGNPOST_INTERVAL_BEGIN, spid, "CHStrokeGroupingModelInference", "", buf, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v41 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C492D000, v41, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHStrokeGroupingModelInference\"", buf, 2u);
  }

  uint64_t v42 = *(void *)(*(void *)(a1 + 40) + 16);
  objc_msgSend_stringWithFormat_(NSString, v43, @"s%ld", v44, v45, v46, v26);
  id v47 = objc_claimAutoreleasedReturnValue();
  uint64_t v53 = (const char *)objc_msgSend_UTF8String(v47, v48, v49, v50, v51, v52);
  size_t v54 = strlen(v53);
  if (v54 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1C4949B7C();
  }
  std::string::size_type v55 = v54;
  if (v54 >= 0x17)
  {
    uint64_t v57 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v54 | 7) != 0x17) {
      uint64_t v57 = v54 | 7;
    }
    uint64_t v58 = v57 + 1;
    p_dst = (std::string *)operator new(v57 + 1);
    __dst.__r_.__value_.__l.__size_ = v55;
    __dst.__r_.__value_.__r.__words[2] = v58 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_38;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v54;
  p_dst = &__dst;
  if (v54) {
LABEL_38:
  }
    memmove(p_dst, v53, v55);
  p_dst->__r_.__value_.__s.__data_[v55] = 0;
  BOOL v152 = sub_1C4B3B9C4(v42, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }

  uint64_t v59 = *(void *)(*(void *)(a1 + 40) + 16);
  id v159 = v153;
  uint64_t v65 = objc_msgSend_dataPointer(v159, v60, v61, v62, v63, v64);
  uint64_t v71 = objc_msgSend_numBBoxFeaturesPerStroke(*(void **)(a1 + 40), v66, v67, v68, v69, v70);
  uint64_t v72 = operator new(0x20uLL);
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)(v72 + 4);
  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)(v72 + 4);
  void *v72 = 1;
  v72[1] = v26;
  v72[2] = 1;
  v72[3] = v71;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
  BOOL v73 = sub_1C4B3B6D8(v59, v65);
  if (__dst.__r_.__value_.__r.__words[0])
  {
    __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  uint64_t v74 = *(void *)(*(void *)(a1 + 40) + 16);
  id v158 = v154;
  uint64_t v80 = objc_msgSend_dataPointer(v158, v75, v76, v77, v78, v79);
  uint64_t v86 = objc_msgSend_maxNumPointsPerStroke(*(void **)(a1 + 40), v81, v82, v83, v84, v85);
  uint64_t v92 = objc_msgSend_numSignalFeaturesPerPoint(*(void **)(a1 + 40), v87, v88, v89, v90, v91);
  uint64_t v93 = operator new(0x20uLL);
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)(v93 + 4);
  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)(v93 + 4);
  *uint64_t v93 = 1;
  v93[1] = v26;
  v93[2] = v86;
  v93[3] = v92;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
  BOOL v94 = sub_1C4B3B6D8(v74, v80);
  if (__dst.__r_.__value_.__r.__words[0])
  {
    __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  uint64_t v95 = *(void *)(*(void *)(a1 + 40) + 16);
  id v157 = v155;
  uint64_t v101 = objc_msgSend_dataPointer(v157, v96, v97, v98, v99, v100);
  uint64_t v107 = objc_msgSend_maxNumPointsPerStroke(*(void **)(a1 + 40), v102, v103, v104, v105, v106);
  long long v108 = operator new(0x20uLL);
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)(v108 + 4);
  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)(v108 + 4);
  *long long v108 = 1;
  v108[1] = v26;
  v108[2] = v107;
  v108[3] = 1;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
  BOOL v109 = sub_1C4B3B6D8(v95, v101);
  if (__dst.__r_.__value_.__r.__words[0])
  {
    __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  BOOL v110 = CoreHandwriting::EspressoModelWrapper::bindOutput(*(void *)(*(void *)(a1 + 40) + 16), (uint64_t)buf, (uint64_t)"adjacency_matrix", 1);
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], v111, v112, v113, v114, v115);
  double v117 = v116;
  BOOL v118 = CoreHandwriting::EspressoModelWrapper::execute(*(CoreHandwriting::EspressoModelWrapper **)(*(void *)(a1 + 40)
                                                                                                  + 16));
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], v119, v120, v121, v122, v123);
  double v125 = v124;
  uint64_t v162 = @"inputStrokeCount";
  uint64_t v130 = objc_msgSend_numberWithInteger_(NSNumber, v126, *(void *)(a1 + 56), v127, v128, v129);
  v163[0] = v130;
  uint64_t v133 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v131, (uint64_t)v163, (uint64_t)&v162, 1, v132);

  uint64_t v151 = (void *)v133;
  objc_msgSend_logModelInference_startTimestamp_endTimestamp_data_((void *)qword_1EA3C9340, v134, 1, v133, v135, v136, v117, v125);
  if (!v152 || !v73 || !v94 || !v109 || !v110 || !v118)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v137 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v137, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C492D000, v137, OS_LOG_TYPE_FAULT, "CHGroupingModel inference failed", (uint8_t *)&__dst, 2u);
    }
  }
  uint64_t v138 = *(void *)(a1 + 56);
  if (v138 >= 1)
  {
    uint64_t v139 = 0;
    uint64_t v140 = *(float **)buf;
    uint64_t v141 = 4 * v26;
    uint64_t v142 = *(float **)buf;
    do
    {
      if (v138 >= 1)
      {
        int64_t v143 = 0;
        uint64_t v144 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 48) + 40 * v139;
        uint64_t v145 = v142;
        do
        {
          float v146 = v140[v143];
          if (v146 > 0.1 && *v145 > 0.1)
          {
            __dst.__r_.__value_.__r.__words[0] = v143;
            *((float *)sub_1C4B11D84(v144, v143, &__dst) + 6) = v146;
            uint64_t v138 = *(void *)(a1 + 56);
          }
          ++v143;
          uint64_t v145 = (float *)((char *)v145 + v141);
        }
        while (v143 < v138);
      }
      ++v139;
      ++v142;
      uint64_t v140 = (float *)((char *)v140 + v141);
    }
    while (v139 < v138);
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v147 = (id)qword_1EA3C9FC8;
  id v148 = v147;
  if (spid - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v147))
  {
    LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
    _os_signpost_emit_with_name_impl(&dword_1C492D000, v148, OS_SIGNPOST_INTERVAL_END, spid, "CHStrokeGroupingModelInference", "", (uint8_t *)&__dst, 2u);
  }

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v149 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v149, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C492D000, v149, OS_LOG_TYPE_DEFAULT, "END \"CHStrokeGroupingModelInference\"", (uint8_t *)&__dst, 2u);
  }
}

void sub_1C4B11770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _Unwind_Resume(a1);
}

void sub_1C4B11934(char **a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  os_signpost_id_t v3 = *(float **)(**(void **)a2 + 40 * a3 + 16);
  if (v3)
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    while (1)
    {
      if (v3[6] <= *(float *)(a2 + 8)) {
        goto LABEL_5;
      }
      if (v8 >= v7) {
        break;
      }
      *(void *)uint64_t v8 = *((void *)v3 + 2);
      uint64_t v9 = (uint64_t)(v8 + 8);
LABEL_4:
      a1[1] = (char *)v9;
      uint64_t v8 = (char *)v9;
LABEL_5:
      os_signpost_id_t v3 = *(float **)v3;
      if (!v3) {
        return;
      }
    }
    uint64_t v10 = (v8 - v6) >> 3;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61) {
      sub_1C494A220();
    }
    if ((v7 - v6) >> 2 > v11) {
      unint64_t v11 = (v7 - v6) >> 2;
    }
    if ((unint64_t)(v7 - v6) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_1C4949AA8();
      }
      uint64_t v13 = operator new(8 * v12);
      uint64_t v14 = &v13[8 * v10];
      *(void *)uint64_t v14 = *((void *)v3 + 2);
      uint64_t v9 = (uint64_t)(v14 + 8);
      int64_t v15 = v8 - v6;
      if (v8 == v6) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = (char *)(8 * v10);
      *(void *)(8 * v10) = *((void *)v3 + 2);
      uint64_t v9 = 8 * v10 + 8;
      int64_t v15 = v8 - v6;
      if (v8 == v6) {
        goto LABEL_22;
      }
    }
    unint64_t v16 = v15 - 8;
    if (v16 >= 0x168)
    {
      unint64_t v19 = (v8 - 8 - v6) & 0xFFFFFFFFFFFFFFF8;
      if (&v13[v8 - v6 - 8 - v19] > &v13[v8 - v6 - 8])
      {
        uint64_t v17 = v8;
      }
      else if (&v8[-v19 - 8] > v8 - 8)
      {
        uint64_t v17 = v8;
      }
      else if ((unint64_t)(v6 - v13) >= 0x20)
      {
        uint64_t v20 = (v16 >> 3) + 1;
        uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v17 = &v8[-v21];
        v14 -= v21;
        uint64_t v22 = &v13[8 * v10 - 16];
        uint64_t v23 = v8 - 16;
        uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v25 = *(_OWORD *)v23;
          *(v22 - 1) = *((_OWORD *)v23 - 1);
          *uint64_t v22 = v25;
          v22 -= 2;
          v23 -= 32;
          v24 -= 4;
        }
        while (v24);
        if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_22:
          uint64_t v7 = &v13[8 * v12];
          *a1 = v14;
          a1[1] = (char *)v9;
          a1[2] = v7;
          if (v6) {
            operator delete(v6);
          }
          unint64_t v6 = v14;
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v17 = v8;
      }
    }
    else
    {
      uint64_t v17 = v8;
    }
    do
    {
      uint64_t v18 = *((void *)v17 - 1);
      v17 -= 8;
      *((void *)v14 - 1) = v18;
      v14 -= 8;
    }
    while (v17 != v6);
    goto LABEL_22;
  }
}

void sub_1C4B11B50(_Unwind_Exception *exception_object)
{
  os_signpost_id_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1C4B11B70(void **a1, uint64_t *a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666) {
    sub_1C494A220();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x333333333333333) {
    unint64_t v6 = 0x666666666666666;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x666666666666666) {
      sub_1C4949AA8();
    }
    uint64_t v7 = (char *)operator new(40 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[40 * v3];
  uint64_t v9 = *a2;
  unint64_t v10 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  *(void *)uint64_t v8 = v9;
  *((void *)v8 + 1) = v10;
  uint64_t v11 = a2[2];
  *((void *)v8 + 2) = v11;
  uint64_t v12 = a2[3];
  *((void *)v8 + 3) = v12;
  *((_DWORD *)v8 + 8) = *((_DWORD *)a2 + 8);
  if (v12)
  {
    unint64_t v13 = *(void *)(v11 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      BOOL v15 = v13 >= v10;
      unint64_t v14 = v13 % v10;
      if (!v15) {
        unint64_t v14 = v13;
      }
    }
    else
    {
      unint64_t v14 = v13 & (v10 - 1);
    }
    *(void *)(v9 + 8 * v14) = v8 + 16;
    a2[2] = 0;
    a2[3] = 0;
  }
  unint64_t v16 = &v7[40 * v6];
  uint64_t v17 = v8 + 40;
  uint64_t v18 = (char *)*a1;
  unint64_t v19 = (char *)a1[1];
  if (v19 == *a1)
  {
    *a1 = v8;
    a1[1] = v17;
    a1[2] = v16;
  }
  else
  {
    uint64_t v20 = 0;
    do
    {
      uint64_t v22 = &v8[v20];
      uint64_t v23 = &v19[v20];
      uint64_t v24 = *(void *)&v19[v20 - 40];
      *((void *)v23 - 5) = 0;
      *((void *)v22 - 5) = v24;
      *((void *)v22 - 4) = *(void *)&v19[v20 - 32];
      *((void *)v23 - 4) = 0;
      uint64_t v25 = *(void *)&v19[v20 - 24];
      *(void *)&v8[v20 - 24] = v25;
      uint64_t v26 = *(void *)&v19[v20 - 16];
      *((void *)v22 - 2) = v26;
      *((_DWORD *)v22 - 2) = *(_DWORD *)&v19[v20 - 8];
      if (v26)
      {
        unint64_t v21 = *(void *)(v25 + 8);
        unint64_t v27 = *((void *)v22 - 4);
        if ((v27 & (v27 - 1)) != 0)
        {
          if (v21 >= v27) {
            v21 %= v27;
          }
        }
        else
        {
          v21 &= v27 - 1;
        }
        *(void *)(v24 + 8 * v21) = &v8[v20 - 24];
        *(void *)&v19[v20 - 24] = 0;
        *(void *)&v19[v20 - 16] = 0;
      }
      v20 -= 40;
    }
    while (&v19[v20] != v18);
    unint64_t v19 = (char *)*a1;
    uint64_t v28 = (char *)a1[1];
    *a1 = &v8[v20];
    a1[1] = v17;
    a1[2] = v16;
    while (v28 != v19)
    {
      uint64_t v29 = (void *)*((void *)v28 - 3);
      if (v29)
      {
        do
        {
          uint64_t v30 = (void *)*v29;
          operator delete(v29);
          uint64_t v29 = v30;
        }
        while (v30);
      }
      uint64_t v32 = (void *)*((void *)v28 - 5);
      v28 -= 40;
      uint64_t v31 = v32;
      *(void *)uint64_t v28 = 0;
      if (v32) {
        operator delete(v31);
      }
    }
  }
  if (v19) {
    operator delete(v19);
  }
  return v17;
}

void *sub_1C4B11D84(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            unint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  unint64_t v10 = operator new(0x20uLL);
  *unint64_t v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  *((_DWORD *)v10 + 6) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v5 = v3;
  }
  else
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_35;
    }
    if (prime < v7)
    {
      unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        unint64_t v19 = std::__next_prime(v19);
      }
      else
      {
        uint64_t v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2) {
          unint64_t v19 = v21;
        }
      }
      if (prime <= v19) {
        size_t prime = v19;
      }
      if (prime < v7) {
LABEL_35:
      }
        sub_1C4949C24(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5) {
        v5 %= v7;
      }
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v5);
  if (v23)
  {
    *unint64_t v10 = *v23;
LABEL_58:
    *uint64_t v23 = v10;
    goto LABEL_59;
  }
  *unint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    unint64_t v24 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7) {
        v24 %= v7;
      }
    }
    else
    {
      v24 &= v7 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1C4B12050(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

CoreHandwriting::AttentionBasedMathSegmentation *CoreHandwriting::AttentionBasedMathSegmentation::AttentionBasedMathSegmentation(CoreHandwriting::AttentionBasedMathSegmentation *this, float a2)
{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = (char *)this + 16;
  unint64_t v3 = (uint64_t **)((char *)this + 8);
  *((void *)this + 3) = 0;
  *(float *)this = a2;
  sub_1C4B1A098((uint64_t **)this + 1, "{");
  sub_1C4B1A098(v3, "}");
  sub_1C4B1A098(v3, "_");
  sub_1C4B1A098(v3, "^");
  sub_1C4B1A098(v3, "&");
  sub_1C4B1A324(v3, "\\\\"");
  sub_1C4B1A098(v3, "\\"");
  sub_1C4B1A098(v3, "[");
  sub_1C4B1A098(v3, "]");
  sub_1C4B1A560(v3, "\\mathrm");
  sub_1C4B1A79C(v3, "\\begin{aligned}");
  sub_1C4B1A9D8(v3, "\\begin{array}{l}");
  sub_1C4B1AC14(v3, "\\begin{array}{lr}");
  sub_1C4B1AE50(v3, "\\begin{matrix}");
  sub_1C4B1B08C(v3, "\\end{aligned}");
  sub_1C4B1B2C8(v3, "\\end{array}");
  sub_1C4B1B504(v3, "\\end{matrix}");
  return this;
}

void sub_1C4B121B8(_Unwind_Exception *a1)
{
  sub_1C4949DD4(v1, *v2);
  _Unwind_Resume(a1);
}

float sub_1C4B121D4(float a1, uint64_t a2, uint64_t **a3, int a4, void *a5, uint64_t a6, unint64_t **a7)
{
  unint64_t v7 = *a7;
  unint64_t v8 = **a7;
  float v9 = 0.0;
  if (v8 && v7[1])
  {
    uint64_t v12 = 0;
    float v13 = a3 + 1;
    uint64_t v71 = a6;
LABEL_6:
    unint64_t v14 = v7[1];
    if (!v14) {
      goto LABEL_5;
    }
    unint64_t v15 = 0;
    uint64_t v73 = v12;
    while (1)
    {
      float v16 = *(float *)(a6 + 4 * (v15 + v14 * v12));
      if (v16 > a1) {
        break;
      }
LABEL_10:
      ++v15;
      unint64_t v14 = v7[1];
      if (v14 <= v15)
      {
        unint64_t v8 = *v7;
LABEL_5:
        if (v8 <= ++v12) {
          return v9;
        }
        goto LABEL_6;
      }
    }
    unint64_t v74 = v15;
    unint64_t v17 = *(uint64_t **)(*(void *)(*a5 + 24 * v12) + 40 * v15 + 16);
    if (!v17)
    {
LABEL_9:
      a6 = v71;
      uint64_t v12 = v73;
      unint64_t v15 = v74;
      goto LABEL_10;
    }
    while (1)
    {
      int v19 = *((_DWORD *)v17 + 4);
      int v18 = *((_DWORD *)v17 + 5);
      uint8x8_t v20 = (char *)*v13;
      uint64_t v21 = v13;
      uint64_t v22 = (char *)*v13;
      if (*v13)
      {
        do
        {
          int v23 = *((_DWORD *)v22 + 8);
          BOOL v24 = v23 < v19;
          if (v23 >= v19) {
            uint64_t v25 = (char **)v22;
          }
          else {
            uint64_t v25 = (char **)(v22 + 8);
          }
          if (!v24) {
            uint64_t v21 = v22;
          }
          uint64_t v22 = *v25;
        }
        while (*v25);
        if (v21 != v13 && v19 >= *((_DWORD *)v21 + 8))
        {
          uint64_t v31 = (char **)v13;
          uint64_t v32 = (char **)v13;
          if (v20) {
            goto LABEL_69;
          }
          goto LABEL_73;
        }
        int v76 = *((_DWORD *)v17 + 5);
        uint64_t v26 = operator new(8uLL);
        unint64_t v27 = v26 + 2;
        _DWORD *v26 = 0;
        v26[1] = a4;
        while (1)
        {
          while (1)
          {
            uint64_t v28 = (char **)v20;
            int v29 = *((_DWORD *)v20 + 8);
            if (v19 >= v29) {
              break;
            }
            uint8x8_t v20 = *(char **)v20;
            if (!*v28)
            {
              uint64_t v30 = v28;
              goto LABEL_38;
            }
          }
          if (v29 >= v19) {
            break;
          }
          uint8x8_t v20 = (char *)*((void *)v20 + 1);
          if (!v20)
          {
            uint64_t v30 = v28 + 1;
            goto LABEL_38;
          }
        }
        uint64_t v49 = v20 + 40;
        unint64_t v48 = (void *)*((void *)v20 + 5);
        if (v48)
        {
LABEL_65:
          *((void *)v20 + 6) = v48;
          operator delete(v48);
          *uint64_t v49 = 0;
          v49[1] = 0;
          v49[2] = 0;
        }
      }
      else
      {
        int v76 = *((_DWORD *)v17 + 5);
        uint64_t v26 = operator new(8uLL);
        unint64_t v27 = v26 + 2;
        _DWORD *v26 = 0;
        v26[1] = a4;
        uint64_t v30 = (char **)v13;
        uint64_t v28 = (char **)v13;
LABEL_38:
        uint64_t v33 = (char *)operator new(0x40uLL);
        uint8x8_t v20 = v33;
        *((_DWORD *)v33 + 8) = v19;
        *((void *)v33 + 6) = 0;
        *((void *)v33 + 7) = 0;
        *((void *)v33 + 5) = 0;
        *(void *)uint64_t v33 = 0;
        *((void *)v33 + 1) = 0;
        *((void *)v33 + 2) = v28;
        *uint64_t v30 = v33;
        uint64_t v34 = (uint64_t *)**a3;
        uint64_t v35 = v33;
        if (v34)
        {
          *a3 = v34;
          uint64_t v35 = *v30;
        }
        CGRect v36 = (char *)*v13;
        BOOL v37 = v35 == (char *)*v13;
        v35[24] = v37;
        if (!v37)
        {
          do
          {
            uint64_t v38 = *((void *)v35 + 2);
            if (*(unsigned char *)(v38 + 24)) {
              break;
            }
            uint64_t v39 = *(char **)(v38 + 16);
            uint64_t v40 = *(void *)v39;
            if (*(void *)v39 == v38)
            {
              uint64_t v43 = *((void *)v39 + 1);
              if (!v43 || (int v44 = *(unsigned __int8 *)(v43 + 24), v41 = (unsigned char *)(v43 + 24), v44))
              {
                if (*(char **)v38 == v35)
                {
                  *(unsigned char *)(v38 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                  v39[24] = 0;
                  uint64_t v47 = *(void *)(v38 + 8);
                  *(void *)uint64_t v39 = v47;
                  if (v47) {
                    goto LABEL_55;
                  }
                }
                else
                {
                  uint64_t v45 = *(uint64_t **)(v38 + 8);
                  uint64_t v46 = *v45;
                  *(void *)(v38 + 8) = *v45;
                  if (v46)
                  {
                    *(void *)(v46 + 16) = v38;
                    uint64_t v39 = *(char **)(v38 + 16);
                  }
                  void v45[2] = (uint64_t)v39;
                  *(void *)(*(void *)(v38 + 16) + 8 * (**(void **)(v38 + 16) != v38)) = v45;
                  uint64_t *v45 = v38;
                  *(void *)(v38 + 16) = v45;
                  uint64_t v39 = (char *)v45[2];
                  uint64_t v38 = *(void *)v39;
                  *((unsigned char *)v45 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                  v39[24] = 0;
                  uint64_t v47 = *(void *)(v38 + 8);
                  *(void *)uint64_t v39 = v47;
                  if (v47) {
LABEL_55:
                  }
                    *(void *)(v47 + 16) = v39;
                }
                *(void *)(v38 + 16) = *((void *)v39 + 2);
                *(void *)(*((void *)v39 + 2) + 8 * (**((void **)v39 + 2) != (void)v39)) = v38;
                *(void *)(v38 + 8) = v39;
LABEL_63:
                *((void *)v39 + 2) = v38;
                break;
              }
            }
            else if (!v40 || (int v42 = *(unsigned __int8 *)(v40 + 24), v41 = (unsigned char *)(v40 + 24), v42))
            {
              if (*(char **)v38 == v35)
              {
                uint64_t v68 = *((void *)v35 + 1);
                *(void *)uint64_t v38 = v68;
                if (v68)
                {
                  *(void *)(v68 + 16) = v38;
                  uint64_t v39 = *(char **)(v38 + 16);
                }
                *((void *)v35 + 2) = v39;
                *(void *)(*(void *)(v38 + 16) + 8 * (**(void **)(v38 + 16) != v38)) = v35;
                *((void *)v35 + 1) = v38;
                *(void *)(v38 + 16) = v35;
                uint64_t v39 = (char *)*((void *)v35 + 2);
                v35[24] = 1;
                v39[24] = 0;
                uint64_t v38 = *((void *)v39 + 1);
                uint64_t v50 = *(char **)v38;
                *((void *)v39 + 1) = *(void *)v38;
                if (v50) {
LABEL_61:
                }
                  *((void *)v50 + 2) = v39;
              }
              else
              {
                *(unsigned char *)(v38 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                v39[24] = 0;
                uint64_t v38 = *((void *)v39 + 1);
                uint64_t v50 = *(char **)v38;
                *((void *)v39 + 1) = *(void *)v38;
                if (v50) {
                  goto LABEL_61;
                }
              }
              *(void *)(v38 + 16) = *((void *)v39 + 2);
              *(void *)(*((void *)v39 + 2) + 8 * (**((void **)v39 + 2) != (void)v39)) = v38;
              *(void *)uint64_t v38 = v39;
              goto LABEL_63;
            }
            *(unsigned char *)(v38 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
            uint64_t v35 = v39;
            v39[24] = v39 == v36;
            unsigned char *v41 = 1;
          }
          while (v39 != v36);
        }
        a3[2] = (uint64_t *)((char *)a3[2] + 1);
        uint64_t v49 = v33 + 40;
        unint64_t v48 = (void *)*((void *)v33 + 5);
        if (v48) {
          goto LABEL_65;
        }
      }
      *((void *)v20 + 5) = v26;
      *((void *)v20 + 6) = v27;
      *((void *)v20 + 7) = v27;
      uint8x8_t v20 = (char *)*v13;
      int v18 = v76;
      uint64_t v31 = (char **)v13;
      uint64_t v32 = (char **)v13;
      if (*v13)
      {
        while (1)
        {
LABEL_69:
          while (1)
          {
            uint64_t v32 = (char **)v20;
            int v51 = *((_DWORD *)v20 + 8);
            if (v19 >= v51) {
              break;
            }
            uint8x8_t v20 = *(char **)v20;
            uint64_t v31 = v32;
            if (!*v32) {
              goto LABEL_73;
            }
          }
          if (v51 >= v19) {
            goto LABEL_18;
          }
          uint8x8_t v20 = (char *)*((void *)v20 + 1);
          if (!v20)
          {
            uint64_t v31 = v32 + 1;
            break;
          }
        }
      }
LABEL_73:
      uint64_t v52 = (char *)v32;
      uint64_t v32 = (char **)operator new(0x40uLL);
      *((_DWORD *)v32 + 8) = v19;
      v32[6] = 0;
      v32[7] = 0;
      v32[5] = 0;
      *uint64_t v32 = 0;
      v32[1] = 0;
      v32[2] = v52;
      *uint64_t v31 = (char *)v32;
      uint64_t v53 = (uint64_t *)**a3;
      size_t v54 = (char *)v32;
      if (v53)
      {
        *a3 = v53;
        size_t v54 = *v31;
      }
      std::string::size_type v55 = (char *)*v13;
      BOOL v37 = v54 == (char *)*v13;
      v54[24] = v37;
      if (!v37)
      {
        do
        {
          uint64_t v56 = *((void *)v54 + 2);
          if (*(unsigned char *)(v56 + 24)) {
            break;
          }
          uint64_t v57 = *(char **)(v56 + 16);
          uint64_t v58 = *(void *)v57;
          if (*(void *)v57 == v56)
          {
            uint64_t v61 = *((void *)v57 + 1);
            if (!v61 || (v62 = *(unsigned __int8 *)(v61 + 24), uint64_t v59 = (unsigned char *)(v61 + 24), v62))
            {
              if (*(char **)v56 == v54)
              {
                *(unsigned char *)(v56 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                v57[24] = 0;
                uint64_t v65 = *(void *)(v56 + 8);
                *(void *)uint64_t v57 = v65;
                if (v65) {
                  goto LABEL_90;
                }
              }
              else
              {
                uint64_t v63 = *(uint64_t **)(v56 + 8);
                uint64_t v64 = *v63;
                *(void *)(v56 + 8) = *v63;
                if (v64)
                {
                  *(void *)(v64 + 16) = v56;
                  uint64_t v57 = *(char **)(v56 + 16);
                }
                v63[2] = (uint64_t)v57;
                *(void *)(*(void *)(v56 + 16) + 8 * (**(void **)(v56 + 16) != v56)) = v63;
                *uint64_t v63 = v56;
                *(void *)(v56 + 16) = v63;
                uint64_t v57 = (char *)v63[2];
                uint64_t v56 = *(void *)v57;
                *((unsigned char *)v63 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                v57[24] = 0;
                uint64_t v65 = *(void *)(v56 + 8);
                *(void *)uint64_t v57 = v65;
                if (v65) {
LABEL_90:
                }
                  *(void *)(v65 + 16) = v57;
              }
              *(void *)(v56 + 16) = *((void *)v57 + 2);
              *(void *)(*((void *)v57 + 2) + 8 * (**((void **)v57 + 2) != (void)v57)) = v56;
              *(void *)(v56 + 8) = v57;
LABEL_16:
              *((void *)v57 + 2) = v56;
              break;
            }
          }
          else if (!v58 || (v60 = *(unsigned __int8 *)(v58 + 24), uint64_t v59 = (unsigned char *)(v58 + 24), v60))
          {
            if (*(char **)v56 == v54)
            {
              uint64_t v67 = *((void *)v54 + 1);
              *(void *)uint64_t v56 = v67;
              if (v67)
              {
                *(void *)(v67 + 16) = v56;
                uint64_t v57 = *(char **)(v56 + 16);
              }
              *((void *)v54 + 2) = v57;
              *(void *)(*(void *)(v56 + 16) + 8 * (**(void **)(v56 + 16) != v56)) = v54;
              *((void *)v54 + 1) = v56;
              *(void *)(v56 + 16) = v54;
              uint64_t v57 = (char *)*((void *)v54 + 2);
              v54[24] = 1;
              v57[24] = 0;
              uint64_t v56 = *((void *)v57 + 1);
              uint64_t v66 = *(char **)v56;
              *((void *)v57 + 1) = *(void *)v56;
              if (!v66) {
                goto LABEL_15;
              }
            }
            else
            {
              *(unsigned char *)(v56 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
              v57[24] = 0;
              uint64_t v56 = *((void *)v57 + 1);
              uint64_t v66 = *(char **)v56;
              *((void *)v57 + 1) = *(void *)v56;
              if (!v66) {
                goto LABEL_15;
              }
            }
            *((void *)v66 + 2) = v57;
LABEL_15:
            *(void *)(v56 + 16) = *((void *)v57 + 2);
            *(void *)(*((void *)v57 + 2) + 8 * (**((void **)v57 + 2) != (void)v57)) = v56;
            *(void *)uint64_t v56 = v57;
            goto LABEL_16;
          }
          *(unsigned char *)(v56 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
          size_t v54 = v57;
          v57[24] = v57 == v55;
          *uint64_t v59 = 1;
        }
        while (v57 != v55);
      }
      a3[2] = (uint64_t *)((char *)a3[2] + 1);
LABEL_18:
      *(float *)v32[5] = *(float *)v32[5] + (float)(v16 * (float)v18);
      float v9 = v9 + (float)(v16 * (float)v18);
      unint64_t v17 = (uint64_t *)*v17;
      if (!v17)
      {
        unint64_t v7 = *a7;
        goto LABEL_9;
      }
    }
  }
  return v9;
}

void sub_1C4B12860(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B12874(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  int64_t v8 = v7 - v6;
  if (v7 != v6)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      sub_1C494A220();
    }
    float v9 = (char *)operator new(v8);
    *a4 = v9;
    a4[2] = &v9[8 * (v8 >> 3)];
    size_t v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    bzero(v9, v10);
    a4[1] = &v9[v10];
  }
  uint64_t v635 = 0;
  uint64_t v636 = 0;
  int v633 = 0;
  int v634 = &v635;
  uint64_t v631 = 0;
  uint64_t v632 = 0;
  unint64_t v11 = (void *)*a3;
  uint64_t v601 = a3 + 1;
  if ((void *)*a3 != a3 + 1)
  {
    uint64_t v599 = a3;
    uint64_t v12 = 0;
    float v13 = 0;
    int v613 = 0;
    uint64_t v615 = (void *)(a1 + 16);
    int v14 = -1;
    do
    {
      if (*((_DWORD *)v11 + 8) > v14) {
        int v14 = *((_DWORD *)v11 + 8);
      }
      int v603 = v14;
      uint64_t v16 = v11[5];
      uint64_t v15 = v11[6];
      uint64_t v602 = v11;
      uint64_t v608 = v15;
      while (v16 != v15)
      {
        int v18 = *(_DWORD *)(v16 + 4);
        uint64_t v19 = *v615;
        if (!*v615) {
          goto LABEL_53;
        }
        uint64_t v20 = *a2 + 24 * v18;
        int v21 = *(char *)(v20 + 23);
        size_t v22 = v21 >= 0 ? *(unsigned __int8 *)(v20 + 23) : *(void *)(v20 + 8);
        int v23 = v21 >= 0 ? (const void *)(*a2 + 24 * v18) : *(const void **)v20;
        BOOL v24 = v615;
        do
        {
          int v25 = *(char *)(v19 + 55);
          if (v25 >= 0) {
            size_t v26 = *(unsigned __int8 *)(v19 + 55);
          }
          else {
            size_t v26 = *(void *)(v19 + 40);
          }
          if (v25 >= 0) {
            unint64_t v27 = (const void *)(v19 + 32);
          }
          else {
            unint64_t v27 = *(const void **)(v19 + 32);
          }
          if (v22 >= v26) {
            size_t v28 = v26;
          }
          else {
            size_t v28 = v22;
          }
          int v29 = memcmp(v27, v23, v28);
          BOOL v30 = v26 < v22;
          if (v29) {
            BOOL v30 = v29 < 0;
          }
          BOOL v31 = !v30;
          if (v30) {
            uint64_t v32 = (uint64_t *)(v19 + 8);
          }
          else {
            uint64_t v32 = (uint64_t *)v19;
          }
          if (v31) {
            BOOL v24 = (void *)v19;
          }
          uint64_t v19 = *v32;
        }
        while (*v32);
        if (v24 == v615) {
          goto LABEL_53;
        }
        uint64_t v35 = (const void *)v24[4];
        uint64_t v34 = v24 + 4;
        uint64_t v33 = v35;
        int v36 = *((char *)v34 + 23);
        if (v36 >= 0) {
          size_t v37 = *((unsigned __int8 *)v34 + 23);
        }
        else {
          size_t v37 = v34[1];
        }
        if (v36 >= 0) {
          uint64_t v38 = v34;
        }
        else {
          uint64_t v38 = v33;
        }
        if (v37 >= v22) {
          size_t v39 = v22;
        }
        else {
          size_t v39 = v37;
        }
        int v40 = memcmp(v23, v38, v39);
        BOOL v41 = v22 < v37;
        if (v40) {
          BOOL v41 = v40 < 0;
        }
        if (v41)
        {
LABEL_53:
          int v42 = v635;
          uint64_t v43 = &v635;
          int v44 = &v635;
          *(void *)uint64_t v611 = v16;
          if (v635)
          {
            while (1)
            {
              while (1)
              {
                uint64_t v43 = (void **)v42;
                int v45 = *((_DWORD *)v42 + 8);
                if (v18 >= v45) {
                  break;
                }
                int v42 = *v43;
                int v44 = v43;
                if (!*v43) {
                  goto LABEL_60;
                }
              }
              if (v45 >= v18) {
                break;
              }
              int v42 = v43[1];
              if (!v42)
              {
                int v44 = v43 + 1;
                goto LABEL_60;
              }
            }
            uint64_t v47 = v43;
            int v60 = v13;
            uint64_t v61 = v13 - v12;
            unint64_t v62 = (unint64_t)v61 >> 2;
            uint64_t v64 = (char *)v47[6];
            unint64_t v63 = v47[7];
            if ((unint64_t)v64 >= v63) {
              goto LABEL_80;
            }
LABEL_108:
            *(_DWORD *)uint64_t v64 = v62;
            uint64_t v86 = v64 + 4;
            uint64_t v16 = *(void *)v611;
            v47[6] = v86;
            uint64_t v84 = v633;
            if (v60 >= v633) {
              goto LABEL_109;
            }
          }
          else
          {
LABEL_60:
            uint64_t v46 = operator new(0x40uLL);
            uint64_t v47 = v46;
            *((_DWORD *)v46 + 8) = v18;
            v46[6] = 0;
            v46[7] = 0;
            v46[5] = 0;
            *uint64_t v46 = 0;
            v46[1] = 0;
            v46[2] = v43;
            *int v44 = v46;
            unint64_t v48 = v46;
            if (*v634)
            {
              int v634 = (void **)*v634;
              unint64_t v48 = (void *)*v44;
            }
            uint64_t v49 = v635;
            BOOL v31 = v48 == v635;
            *((unsigned char *)v48 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v48 == v635;
            if (!v31)
            {
              do
              {
                uint64_t v50 = v48[2];
                if (*(unsigned char *)(v50 + 24)) {
                  break;
                }
                int v51 = *(void **)(v50 + 16);
                uint64_t v52 = *v51;
                if (*v51 == v50)
                {
                  uint64_t v55 = v51[1];
                  if (!v55 || (v56 = *(unsigned __int8 *)(v55 + 24), uint64_t v53 = (unsigned char *)(v55 + 24), v56))
                  {
                    if (*(void **)v50 == v48)
                    {
                      *(unsigned char *)(v50 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                      *((unsigned char *)v51 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                      uint64_t v59 = *(void *)(v50 + 8);
                      *int v51 = v59;
                      if (v59) {
                        goto LABEL_77;
                      }
                    }
                    else
                    {
                      uint64_t v57 = *(uint64_t **)(v50 + 8);
                      uint64_t v58 = *v57;
                      *(void *)(v50 + 8) = *v57;
                      if (v58)
                      {
                        *(void *)(v58 + 16) = v50;
                        int v51 = *(void **)(v50 + 16);
                      }
                      v57[2] = (uint64_t)v51;
                      *(void *)(*(void *)(v50 + 16) + 8 * (**(void **)(v50 + 16) != v50)) = v57;
                      *uint64_t v57 = v50;
                      *(void *)(v50 + 16) = v57;
                      int v51 = (void *)v57[2];
                      uint64_t v50 = *v51;
                      *((unsigned char *)v57 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                      *((unsigned char *)v51 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                      uint64_t v59 = *(void *)(v50 + 8);
                      *int v51 = v59;
                      if (v59) {
LABEL_77:
                      }
                        *(void *)(v59 + 16) = v51;
                    }
                    *(void *)(v50 + 16) = v51[2];
                    *(void *)(v51[2] + 8 * (*(void *)v51[2] != (void)v51)) = v50;
                    *(void *)(v50 + 8) = v51;
LABEL_106:
                    v51[2] = v50;
                    break;
                  }
                }
                else if (!v52 || (int v54 = *(unsigned __int8 *)(v52 + 24), v53 = (unsigned char *)(v52 + 24), v54))
                {
                  if (*(void **)v50 == v48)
                  {
                    uint64_t v98 = v48[1];
                    *(void *)uint64_t v50 = v98;
                    if (v98)
                    {
                      *(void *)(v98 + 16) = v50;
                      int v51 = *(void **)(v50 + 16);
                    }
                    v48[2] = v51;
                    *(void *)(*(void *)(v50 + 16) + 8 * (**(void **)(v50 + 16) != v50)) = v48;
                    v48[1] = v50;
                    *(void *)(v50 + 16) = v48;
                    int v51 = (void *)v48[2];
                    *((unsigned char *)v48 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                    *((unsigned char *)v51 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                    uint64_t v50 = v51[1];
                    uint64_t v85 = *(void **)v50;
                    v51[1] = *(void *)v50;
                    if (v85) {
LABEL_104:
                    }
                      v85[2] = v51;
                  }
                  else
                  {
                    *(unsigned char *)(v50 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                    *((unsigned char *)v51 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                    uint64_t v50 = v51[1];
                    uint64_t v85 = *(void **)v50;
                    v51[1] = *(void *)v50;
                    if (v85) {
                      goto LABEL_104;
                    }
                  }
                  *(void *)(v50 + 16) = v51[2];
                  *(void *)(v51[2] + 8 * (*(void *)v51[2] != (void)v51)) = v50;
                  *(void *)uint64_t v50 = v51;
                  goto LABEL_106;
                }
                *(unsigned char *)(v50 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                unint64_t v48 = v51;
                *((unsigned char *)v51 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v51 == v49;
                unsigned char *v53 = 1;
              }
              while (v51 != v49);
            }
            ++v636;
            uint64_t v12 = (char *)v631;
            int v60 = v632;
            uint64_t v61 = v632 - (unsigned char *)v631;
            unint64_t v62 = (unint64_t)(v632 - (unsigned char *)v631) >> 2;
            uint64_t v64 = (char *)v46[6];
            unint64_t v63 = v46[7];
            if ((unint64_t)v64 < v63) {
              goto LABEL_108;
            }
LABEL_80:
            uint64_t v606 = v61;
            uint64_t v65 = (char *)v47[5];
            uint64_t v66 = (v64 - v65) >> 2;
            unint64_t v67 = v66 + 1;
            if ((unint64_t)(v66 + 1) >> 62) {
              sub_1C494A220();
            }
            uint64_t v68 = v63 - (void)v65;
            if (v68 >> 1 > v67) {
              unint64_t v67 = v68 >> 1;
            }
            if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v69 = v67;
            }
            if (v69)
            {
              if (v69 >> 62) {
                sub_1C4949AA8();
              }
              unint64_t v70 = v69;
              uint64_t v71 = operator new(4 * v69);
              unint64_t v69 = v70;
              uint64_t v72 = &v71[4 * v66];
              _DWORD *v72 = v62;
              uint64_t v73 = (uint64_t)(v72 + 1);
              int64_t v74 = v64 - v65;
              if (v64 != v65)
              {
LABEL_89:
                unint64_t v75 = v74 - 4;
                if (v75 < 0x2C) {
                  goto LABEL_847;
                }
                if ((unint64_t)(v65 - v71) < 0x20) {
                  goto LABEL_847;
                }
                uint64_t v76 = (v75 >> 2) + 1;
                uint64_t v77 = 4 * (v76 & 0x7FFFFFFFFFFFFFF8);
                uint64_t v78 = &v64[-v77];
                uint64_t v72 = (_DWORD *)((char *)v72 - v77);
                uint64_t v79 = &v71[4 * v66 - 16];
                uint64_t v80 = v64 - 16;
                uint64_t v81 = v76 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v82 = *(_OWORD *)v80;
                  *(v79 - 1) = *((_OWORD *)v80 - 1);
                  *uint64_t v79 = v82;
                  v79 -= 2;
                  v80 -= 32;
                  v81 -= 8;
                }
                while (v81);
                uint64_t v64 = v78;
                if (v76 != (v76 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_847:
                  do
                  {
                    int v83 = *((_DWORD *)v64 - 1);
                    v64 -= 4;
                    *--uint64_t v72 = v83;
                  }
                  while (v64 != v65);
                }
              }
            }
            else
            {
              uint64_t v71 = 0;
              uint64_t v72 = (_DWORD *)(4 * v66);
              *(_DWORD *)(4 * v66) = v62;
              uint64_t v73 = 4 * v66 + 4;
              int64_t v74 = v64 - v65;
              if (v64 != v65) {
                goto LABEL_89;
              }
            }
            v47[5] = v72;
            v47[6] = v73;
            v47[7] = &v71[4 * v69];
            if (v65) {
              operator delete(v65);
            }
            uint64_t v16 = *(void *)v611;
            uint64_t v61 = v606;
            v47[6] = v73;
            uint64_t v84 = v633;
            if (v60 >= v633)
            {
LABEL_109:
              uint64_t v87 = v61 >> 2;
              unint64_t v88 = (v61 >> 2) + 1;
              if (v88 >> 62) {
                sub_1C494A220();
              }
              uint64_t v89 = v84 - v12;
              if (v89 >> 1 > v88) {
                unint64_t v88 = v89 >> 1;
              }
              if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v90 = v88;
              }
              if (v90)
              {
                if (v90 >> 62) {
                  sub_1C4949AA8();
                }
                uint64_t v91 = operator new(4 * v90);
                uint64_t v92 = &v91[4 * v87];
                _DWORD *v92 = v18;
                uint64_t v17 = (uint64_t)(v92 + 1);
                int64_t v93 = v60 - v12;
                if (v60 == v12) {
                  goto LABEL_123;
                }
              }
              else
              {
                uint64_t v91 = 0;
                uint64_t v92 = (_DWORD *)(4 * v87);
                *(_DWORD *)(4 * v87) = v18;
                uint64_t v17 = 4 * v87 + 4;
                int64_t v93 = v60 - v12;
                if (v60 == v12) {
                  goto LABEL_123;
                }
              }
              unint64_t v94 = v93 - 4;
              if (v94 >= 0xBC)
              {
                unint64_t v97 = (v60 - 4 - v12) & 0xFFFFFFFFFFFFFFFCLL;
                if (&v91[v61 - 4 - v97] > &v91[v61 - 4])
                {
                  uint64_t v95 = v60;
                }
                else if (&v60[-v97 - 4] > v60 - 4)
                {
                  uint64_t v95 = v60;
                }
                else if ((unint64_t)(v60 - &v91[v61]) >= 0x20)
                {
                  uint64_t v99 = (v94 >> 2) + 1;
                  uint64_t v100 = 4 * (v99 & 0x7FFFFFFFFFFFFFF8);
                  uint64_t v95 = &v60[-v100];
                  uint64_t v92 = (_DWORD *)((char *)v92 - v100);
                  uint64_t v101 = &v91[4 * v87 - 16];
                  unint64_t v102 = v60 - 16;
                  uint64_t v103 = v99 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v104 = *(_OWORD *)v102;
                    *(v101 - 1) = *((_OWORD *)v102 - 1);
                    _OWORD *v101 = v104;
                    v101 -= 2;
                    v102 -= 32;
                    v103 -= 8;
                  }
                  while (v103);
                  if (v99 == (v99 & 0x7FFFFFFFFFFFFFF8)) {
                    goto LABEL_123;
                  }
                }
                else
                {
                  uint64_t v95 = v60;
                }
              }
              else
              {
                uint64_t v95 = v60;
              }
              do
              {
                int v96 = *((_DWORD *)v95 - 1);
                v95 -= 4;
                *--uint64_t v92 = v96;
              }
              while (v95 != v12);
LABEL_123:
              uint64_t v631 = v92;
              uint64_t v632 = (char *)v17;
              int v633 = &v91[4 * v90];
              if (v12) {
                operator delete(v12);
              }
              uint64_t v12 = (char *)v92;
LABEL_11:
              ++v613;
              uint64_t v632 = (char *)v17;
              float v13 = (char *)v17;
              goto LABEL_12;
            }
          }
          *(_DWORD *)int v60 = v18;
          uint64_t v17 = (uint64_t)(v60 + 4);
          goto LABEL_11;
        }
LABEL_12:
        v16 += 8;
        uint64_t v15 = v608;
      }
      uint64_t v105 = v602;
      uint64_t v106 = (void *)v602[1];
      if (v106)
      {
        do
        {
          uint64_t v107 = v106;
          uint64_t v106 = (void *)*v106;
        }
        while (v106);
      }
      else
      {
        do
        {
          uint64_t v107 = (void *)v105[2];
          BOOL v31 = *v107 == (void)v105;
          uint64_t v105 = v107;
        }
        while (!v31);
      }
      unint64_t v11 = v107;
      int v14 = v603;
    }
    while (v107 != v601);
    int v605 = v603 + 1;
    if (v603 == -1 || !v613)
    {
LABEL_819:
      if (v631) {
        operator delete(v631);
      }
      goto LABEL_821;
    }
    uint64_t v108 = 3 * v613 + (uint64_t)v605;
    uint64_t v624 = 0;
    uint64_t v625 = 0;
    float v626 = 0;
    if (v108)
    {
      if ((v108 & 0x80000000) != 0) {
        sub_1C494A220();
      }
      BOOL v109 = operator new(v108 << 6);
      BOOL v110 = &v109[8 * v108];
      uint64_t v624 = v109;
      float v626 = v110;
      do
      {
        *BOOL v109 = 0;
        v109[1] = 0;
        v109[2] = 0;
        v109[5] = 0;
        v109[6] = 0;
        v109[4] = 0;
        v109 += 8;
      }
      while (v109 != v110);
      uint64_t v625 = (char *)v110;
    }
    std::string __p = 0;
    uint64_t v628 = 0;
    char v630 = 0;
    std::string::size_type v629 = 0;
    uint64_t v621 = 0;
    uint64_t v622 = 0;
    uint64_t v623 = 0;
    if (v613 < 0) {
      sub_1C494A220();
    }
    uint64_t v621 = operator new(12 * v613);
    uint64_t v622 = (char *)v621;
    uint64_t v623 = (char *)v621 + 12 * v613;
    uint64_t v111 = (void *)*v599;
    if ((void *)*v599 != v601)
    {
      while (1)
      {
        uint64_t v112 = v111[5];
        uint64_t v607 = v111;
        uint64_t v609 = v111[6];
        if (v112 != v609) {
          break;
        }
LABEL_281:
        uint64_t v195 = v607;
        uint64_t v196 = (void *)v607[1];
        if (v196)
        {
          do
          {
            uint64_t v197 = v196;
            uint64_t v196 = (void *)*v196;
          }
          while (v196);
        }
        else
        {
          do
          {
            uint64_t v197 = (void *)v195[2];
            BOOL v31 = *v197 == (void)v195;
            uint64_t v195 = v197;
          }
          while (!v31);
        }
        uint64_t v111 = v197;
        if (v197 == v601) {
          goto LABEL_287;
        }
      }
      uint64_t v113 = *((int *)v111 + 8);
      while (2)
      {
        float v114 = *(float *)v112;
        uint64_t v115 = v635;
        double v116 = &v635;
        double v117 = &v635;
        int v118 = *(_DWORD *)(v112 + 4);
        *(void *)uint64_t v612 = v112;
        if (!v635)
        {
LABEL_169:
          uint64_t v120 = operator new(0x40uLL);
          v120[8] = v118;
          *((void *)v120 + 6) = 0;
          *((void *)v120 + 7) = 0;
          *((void *)v120 + 5) = 0;
          *(void *)uint64_t v120 = 0;
          *((void *)v120 + 1) = 0;
          *((void *)v120 + 2) = v116;
          *double v117 = v120;
          uint64_t v121 = v120;
          if (*v634)
          {
            int v634 = (void **)*v634;
            uint64_t v121 = (void *)*v117;
          }
          uint64_t v122 = v635;
          BOOL v31 = v121 == v635;
          *((unsigned char *)v121 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v121 == v635;
          if (!v31)
          {
            do
            {
              uint64_t v123 = v121[2];
              if (*(unsigned char *)(v123 + 24)) {
                break;
              }
              double v124 = *(void **)(v123 + 16);
              uint64_t v125 = *v124;
              if (*v124 == v123)
              {
                uint64_t v128 = v124[1];
                if (!v128 || (v129 = *(unsigned __int8 *)(v128 + 24), uint64_t v126 = (unsigned char *)(v128 + 24), v129))
                {
                  if (*(void **)v123 == v121)
                  {
                    *(unsigned char *)(v123 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                    *((unsigned char *)v124 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                    uint64_t v132 = *(void *)(v123 + 8);
                    void *v124 = v132;
                    if (v132) {
                      goto LABEL_186;
                    }
                  }
                  else
                  {
                    uint64_t v130 = *(uint64_t **)(v123 + 8);
                    uint64_t v131 = *v130;
                    *(void *)(v123 + 8) = *v130;
                    if (v131)
                    {
                      *(void *)(v131 + 16) = v123;
                      double v124 = *(void **)(v123 + 16);
                    }
                    v130[2] = (uint64_t)v124;
                    *(void *)(*(void *)(v123 + 16) + 8 * (**(void **)(v123 + 16) != v123)) = v130;
                    uint64_t *v130 = v123;
                    *(void *)(v123 + 16) = v130;
                    double v124 = (void *)v130[2];
                    uint64_t v123 = *v124;
                    *((unsigned char *)v130 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                    *((unsigned char *)v124 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                    uint64_t v132 = *(void *)(v123 + 8);
                    void *v124 = v132;
                    if (v132) {
LABEL_186:
                    }
                      *(void *)(v132 + 16) = v124;
                  }
                  *(void *)(v123 + 16) = v124[2];
                  *(void *)(v124[2] + 8 * (*(void *)v124[2] != (void)v124)) = v123;
                  *(void *)(v123 + 8) = v124;
LABEL_194:
                  v124[2] = v123;
                  break;
                }
              }
              else if (!v125 || (v127 = *(unsigned __int8 *)(v125 + 24), uint64_t v126 = (unsigned char *)(v125 + 24), v127))
              {
                if (*(void **)v123 == v121)
                {
                  uint64_t v194 = v121[1];
                  *(void *)uint64_t v123 = v194;
                  if (v194)
                  {
                    *(void *)(v194 + 16) = v123;
                    double v124 = *(void **)(v123 + 16);
                  }
                  v121[2] = v124;
                  *(void *)(*(void *)(v123 + 16) + 8 * (**(void **)(v123 + 16) != v123)) = v121;
                  v121[1] = v123;
                  *(void *)(v123 + 16) = v121;
                  double v124 = (void *)v121[2];
                  *((unsigned char *)v121 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                  *((unsigned char *)v124 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                  uint64_t v123 = v124[1];
                  uint64_t v135 = *(void **)v123;
                  v124[1] = *(void *)v123;
                  if (v135) {
LABEL_192:
                  }
                    v135[2] = v124;
                }
                else
                {
                  *(unsigned char *)(v123 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                  *((unsigned char *)v124 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                  uint64_t v123 = v124[1];
                  uint64_t v135 = *(void **)v123;
                  v124[1] = *(void *)v123;
                  if (v135) {
                    goto LABEL_192;
                  }
                }
                *(void *)(v123 + 16) = v124[2];
                *(void *)(v124[2] + 8 * (*(void *)v124[2] != (void)v124)) = v123;
                *(void *)uint64_t v123 = v124;
                goto LABEL_194;
              }
              *(unsigned char *)(v123 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
              uint64_t v121 = v124;
              *((unsigned char *)v124 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v124 == v122;
              unsigned char *v126 = 1;
            }
            while (v124 != v122);
          }
          ++v636;
          uint64_t v134 = (int *)*((void *)v120 + 5);
          uint64_t v133 = (int *)*((void *)v120 + 6);
          if (v134 != v133) {
            break;
          }
          goto LABEL_161;
        }
        while (1)
        {
          while (1)
          {
            double v116 = (void **)v115;
            int v119 = *((_DWORD *)v115 + 8);
            if (v118 >= v119) {
              break;
            }
            uint64_t v115 = *v116;
            double v117 = v116;
            if (!*v116) {
              goto LABEL_169;
            }
          }
          if (v119 >= v118) {
            break;
          }
          uint64_t v115 = v116[1];
          if (!v115)
          {
            double v117 = v116 + 1;
            goto LABEL_169;
          }
        }
        uint64_t v134 = (int *)v116[5];
        uint64_t v133 = (int *)v116[6];
        if (v134 == v133)
        {
LABEL_161:
          uint64_t v112 = *(void *)v612 + 8;
          if (*(void *)v612 + 8 == v609) {
            goto LABEL_281;
          }
          continue;
        }
        break;
      }
      int v136 = (int)(float)(v114 * -100.0);
      while (2)
      {
        unint64_t v138 = *v134 + (uint64_t)(v613 + v605);
        if (!v630)
        {
          uint64_t v149 = (char *)v624 + 64 * v113;
          uint64_t v150 = (char *)*((void *)v149 + 4);
          uint64_t v151 = (char *)*((void *)v149 + 5);
          if (v151 != v150)
          {
            unint64_t v152 = (v151 - v150) >> 4;
            do
            {
              unint64_t v153 = v152 >> 1;
              id v154 = (unint64_t *)&v150[16 * (v152 >> 1)];
              unint64_t v156 = *v154;
              id v155 = (char *)(v154 + 2);
              v152 += ~(v152 >> 1);
              if (v156 >= v138) {
                unint64_t v152 = v153;
              }
              else {
                uint64_t v150 = v155;
              }
            }
            while (v152);
          }
          if (v151 != v150 && *(void *)v150 == v138)
          {
LABEL_249:
            uint64_t v175 = v622;
            if (v622 >= v623)
            {
              uint64_t v176 = (char *)v621;
              int64_t v177 = v622 - (unsigned char *)v621;
              uint64_t v178 = (v622 - (unsigned char *)v621) >> 2;
              unint64_t v179 = v178 + 1;
              if ((unint64_t)(v178 + 1) >> 62) {
                sub_1C494A220();
              }
              uint64_t v180 = v623 - (unsigned char *)v621;
              if ((v623 - (unsigned char *)v621) >> 1 > v179) {
                unint64_t v179 = v180 >> 1;
              }
              if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v181 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v181 = v179;
              }
              if (v181)
              {
                if (v181 >> 62) {
LABEL_822:
                }
                  sub_1C4949AA8();
                uint64_t v182 = (char *)operator new(4 * v181);
                uint64_t v183 = (int *)&v182[4 * v178];
                *uint64_t v183 = v136;
                uint64_t v137 = (uint64_t)(v183 + 1);
                int64_t v184 = v175 - v176;
                if (v175 == v176)
                {
LABEL_273:
                  uint64_t v621 = v183;
                  uint64_t v622 = (char *)v137;
                  uint64_t v623 = &v182[4 * v181];
                  if (v176) {
                    operator delete(v176);
                  }
LABEL_198:
                  uint64_t v622 = (char *)v137;
                  if (++v134 == v133) {
                    goto LABEL_161;
                  }
                  continue;
                }
              }
              else
              {
                uint64_t v182 = 0;
                uint64_t v183 = (int *)(4 * v178);
                *(_DWORD *)(4 * v178) = v136;
                uint64_t v137 = 4 * v178 + 4;
                int64_t v184 = v175 - v176;
                if (v175 == v176) {
                  goto LABEL_273;
                }
              }
              unint64_t v185 = v184 - 4;
              if (v185 < 0x2C) {
                goto LABEL_848;
              }
              if ((unint64_t)(v175 - v182 - v177) < 0x20) {
                goto LABEL_848;
              }
              uint64_t v186 = (v185 >> 2) + 1;
              uint64_t v187 = 4 * (v186 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v188 = &v175[-v187];
              uint64_t v183 = (int *)((char *)v183 - v187);
              uint64_t v189 = &v182[4 * v178 - 16];
              uint64_t v190 = v175 - 16;
              uint64_t v191 = v186 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v192 = *(_OWORD *)v190;
                *((_OWORD *)v189 - 1) = *((_OWORD *)v190 - 1);
                *(_OWORD *)uint64_t v189 = v192;
                v189 -= 32;
                v190 -= 32;
                v191 -= 8;
              }
              while (v191);
              uint64_t v175 = v188;
              if (v186 != (v186 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_848:
                do
                {
                  int v193 = *((_DWORD *)v175 - 1);
                  v175 -= 4;
                  *--uint64_t v183 = v193;
                }
                while (v175 != v176);
              }
              goto LABEL_273;
            }
            *(_DWORD *)uint64_t v622 = v136;
            uint64_t v137 = (uint64_t)(v175 + 4);
            goto LABEL_198;
          }
        }
        break;
      }
      uint64_t v139 = v628;
      if (v628 < v629)
      {
        *(void *)uint64_t v628 = v113;
        v139[1] = v138;
        uint64_t v140 = (char *)(v139 + 2);
LABEL_227:
        uint64_t v628 = v140;
        id v157 = (char *)v624;
        unint64_t v158 = ((v140 - (unsigned char *)__p) >> 4) - 1;
        id v159 = (unint64_t *)((char *)__p + 16 * v158);
        unint64_t v161 = *v159;
        unint64_t v160 = v159[1];
        uint64_t v162 = (char *)v624 + 64 * *v159;
        uint64_t v164 = (char *)*((void *)v162 + 4);
        uint64_t v165 = (char *)*((void *)v162 + 5);
        uint64_t v163 = (char **)(v162 + 32);
        if (v165 != v164)
        {
          unint64_t v166 = (v165 - v164) >> 4;
          do
          {
            unint64_t v167 = v166 >> 1;
            uint64_t v168 = &v164[16 * (v166 >> 1)];
            if (*(void *)v168 < v160 || *(void *)v168 == v160 && *(void *)&v164[16 * v167 + 8] < v158)
            {
              uint64_t v164 = v168 + 16;
              unint64_t v167 = v166 + ~v167;
            }
            unint64_t v166 = v167;
          }
          while (v167);
        }
        if (v164 == v165 || v160 < *(void *)v164 || v160 == *(void *)v164 && *((void *)v164 + 1) > v158)
        {
          *(void *)&long long v637 = v160;
          *((void *)&v637 + 1) = ((v140 - (unsigned char *)__p) >> 4) - 1;
          sub_1C4B19E34(v163, v164, &v637);
          id v157 = (char *)v624;
        }
        uint64_t v169 = &v157[64 * v160];
        uint64_t v170 = *(char **)v169;
        uint64_t v171 = (char *)*((void *)v169 + 1);
        if (v171 != *(char **)v169)
        {
          unint64_t v172 = (uint64_t)&v171[-*(void *)v169] >> 4;
          do
          {
            unint64_t v173 = v172 >> 1;
            uint64_t v174 = &v170[16 * (v172 >> 1)];
            if (*(void *)v174 < v161 || *(void *)v174 == v161 && *(void *)&v170[16 * v173 + 8] < v158)
            {
              uint64_t v170 = v174 + 16;
              unint64_t v173 = v172 + ~v173;
            }
            unint64_t v172 = v173;
          }
          while (v173);
        }
        if (v170 == v171 || v161 < *(void *)v170 || v161 == *(void *)v170 && *((void *)v170 + 1) > v158)
        {
          *(void *)&long long v637 = v161;
          *((void *)&v637 + 1) = ((v140 - (unsigned char *)__p) >> 4) - 1;
          sub_1C4B19E34((char **)v169, v170, &v637);
        }
        goto LABEL_249;
      }
      uint64_t v141 = __p;
      uint64_t v142 = (v628 - (unsigned char *)__p) >> 4;
      unint64_t v143 = v142 + 1;
      if ((unint64_t)(v142 + 1) >> 60) {
        sub_1C494A220();
      }
      uint64_t v144 = v629 - (unsigned char *)__p;
      if ((v629 - (unsigned char *)__p) >> 3 > v143) {
        unint64_t v143 = v144 >> 3;
      }
      if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v145 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v145 = v143;
      }
      if (v145)
      {
        if (v145 >> 60) {
          goto LABEL_822;
        }
        float v146 = (char *)operator new(16 * v145);
        uint64_t v147 = &v146[16 * v142];
        *(void *)uint64_t v147 = v113;
        *((void *)v147 + 1) = v138;
        id v148 = v147;
        if (v139 == v141) {
          goto LABEL_225;
        }
        do
        {
LABEL_222:
          *((_OWORD *)v148 - 1) = *((_OWORD *)v139 - 1);
          v148 -= 16;
          v139 -= 2;
        }
        while (v139 != v141);
        uint64_t v139 = __p;
        uint64_t v140 = v147 + 16;
        std::string __p = v148;
        uint64_t v628 = v147 + 16;
        std::string::size_type v629 = &v146[16 * v145];
        if (!v139) {
          goto LABEL_227;
        }
      }
      else
      {
        float v146 = 0;
        uint64_t v147 = (char *)(16 * v142);
        *(void *)uint64_t v147 = v113;
        *((void *)v147 + 1) = v138;
        id v148 = (char *)(16 * v142);
        if (v139 != v141) {
          goto LABEL_222;
        }
LABEL_225:
        uint64_t v140 = v147 + 16;
        std::string __p = v148;
        uint64_t v628 = v147 + 16;
        std::string::size_type v629 = &v146[16 * v145];
        if (!v139) {
          goto LABEL_227;
        }
      }
      operator delete(v139);
      goto LABEL_227;
    }
LABEL_287:
    int v610 = v605 + 2 * v613;
    uint64_t v198 = v634;
    if (v634 != &v635)
    {
      LODWORD(v199) = v603 + 1;
      LODWORD(v200) = v605 + 2 * v613;
      while (1)
      {
        uint64_t v201 = v198[5];
        if (v198[6] != v201) {
          break;
        }
LABEL_450:
        uint64_t v318 = (void *)v198[1];
        if (v318)
        {
          do
          {
            uint64_t v319 = (void **)v318;
            uint64_t v318 = (void *)*v318;
          }
          while (v318);
        }
        else
        {
          do
          {
            uint64_t v319 = (void **)v198[2];
            BOOL v31 = *v319 == v198;
            uint64_t v198 = v319;
          }
          while (!v31);
        }
        uint64_t v198 = v319;
        if (v319 == &v635) {
          goto LABEL_456;
        }
      }
      unint64_t v202 = 0;
      unint64_t v200 = (int)v200;
      uint64_t v199 = (int)v199;
      while (2)
      {
        uint64_t v204 = *(int *)(v201 + 4 * v202);
        if (v202) {
          int v205 = 0;
        }
        else {
          int v205 = 0x7FFFFFFF;
        }
        int v616 = v205;
        unint64_t v206 = v204 + v613 + v605;
        if (!v630)
        {
          uint64_t v217 = (char *)v624 + 64 * v199;
          uint64_t v218 = (char *)*((void *)v217 + 4);
          uint64_t v219 = (char *)*((void *)v217 + 5);
          if (v219 != v218)
          {
            unint64_t v220 = (v219 - v218) >> 4;
            do
            {
              unint64_t v221 = v220 >> 1;
              uint64_t v222 = &v218[16 * (v220 >> 1)];
              unint64_t v224 = *(void *)v222;
              uint64_t v223 = v222 + 16;
              v220 += ~(v220 >> 1);
              if (v224 >= v206) {
                unint64_t v220 = v221;
              }
              else {
                uint64_t v218 = v223;
              }
            }
            while (v220);
          }
          if (v219 != v218 && *(void *)v218 == v206)
          {
LABEL_347:
            long long v243 = v622;
            if (v622 < v623)
            {
              *(_DWORD *)uint64_t v622 = v616;
              uint64_t v244 = (uint64_t)(v243 + 4);
              goto LABEL_374;
            }
            uint64_t v245 = (char *)v621;
            int64_t v246 = v622 - (unsigned char *)v621;
            uint64_t v247 = (v622 - (unsigned char *)v621) >> 2;
            unint64_t v248 = v247 + 1;
            if ((unint64_t)(v247 + 1) >> 62) {
              goto LABEL_828;
            }
            uint64_t v249 = v623 - (unsigned char *)v621;
            if ((v623 - (unsigned char *)v621) >> 1 > v248) {
              unint64_t v248 = v249 >> 1;
            }
            if ((unint64_t)v249 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v250 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v250 = v248;
            }
            if (v250)
            {
              if (v250 >> 62) {
                goto LABEL_827;
              }
              uint64_t v251 = (char *)operator new(4 * v250);
              uint64_t v252 = (int *)&v251[4 * v247];
              int *v252 = v616;
              uint64_t v244 = (uint64_t)(v252 + 1);
              int64_t v253 = v243 - v245;
              if (v243 == v245) {
                goto LABEL_372;
              }
LABEL_366:
              unint64_t v254 = v253 - 4;
              if (v254 < 0x2C) {
                goto LABEL_849;
              }
              if ((unint64_t)(v243 - v251 - v246) < 0x20) {
                goto LABEL_849;
              }
              uint64_t v255 = (v254 >> 2) + 1;
              uint64_t v256 = 4 * (v255 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v257 = &v243[-v256];
              uint64_t v252 = (int *)((char *)v252 - v256);
              uint64_t v258 = &v251[4 * v247 - 16];
              uint64_t v259 = v243 - 16;
              uint64_t v260 = v255 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v261 = *(_OWORD *)v259;
                *((_OWORD *)v258 - 1) = *((_OWORD *)v259 - 1);
                *(_OWORD *)uint64_t v258 = v261;
                v258 -= 32;
                v259 -= 32;
                v260 -= 8;
              }
              while (v260);
              long long v243 = v257;
              if (v255 != (v255 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_849:
                do
                {
                  int v262 = *((_DWORD *)v243 - 1);
                  v243 -= 4;
                  *--uint64_t v252 = v262;
                }
                while (v243 != v245);
              }
            }
            else
            {
              uint64_t v251 = 0;
              uint64_t v252 = (int *)(4 * v247);
              *(_DWORD *)(4 * v247) = v616;
              uint64_t v244 = 4 * v247 + 4;
              int64_t v253 = v243 - v245;
              if (v243 != v245) {
                goto LABEL_366;
              }
            }
LABEL_372:
            uint64_t v621 = v252;
            uint64_t v622 = (char *)v244;
            uint64_t v623 = &v251[4 * v250];
            if (v245) {
              operator delete(v245);
            }
LABEL_374:
            uint64_t v622 = (char *)v244;
            if (!v630)
            {
              uint64_t v273 = (char *)v624 + 64 * v199;
              uint64_t v274 = (char *)*((void *)v273 + 4);
              uint64_t v275 = (char *)*((void *)v273 + 5);
              if (v275 != v274)
              {
                unint64_t v276 = (v275 - v274) >> 4;
                do
                {
                  unint64_t v277 = v276 >> 1;
                  uint64_t v278 = &v274[16 * (v276 >> 1)];
                  unint64_t v280 = *(void *)v278;
                  uint64_t v279 = v278 + 16;
                  v276 += ~(v276 >> 1);
                  if (v280 >= v200) {
                    unint64_t v276 = v277;
                  }
                  else {
                    uint64_t v274 = v279;
                  }
                }
                while (v276);
              }
              if (v275 != v274 && *(void *)v274 == v200)
              {
LABEL_424:
                uint64_t v299 = v622;
                if (v622 >= v623)
                {
                  uint64_t v300 = (char *)v621;
                  int64_t v301 = v622 - (unsigned char *)v621;
                  uint64_t v302 = (v622 - (unsigned char *)v621) >> 2;
                  unint64_t v303 = v302 + 1;
                  if ((unint64_t)(v302 + 1) >> 62) {
LABEL_828:
                  }
                    sub_1C494A220();
                  uint64_t v304 = v623 - (unsigned char *)v621;
                  if ((v623 - (unsigned char *)v621) >> 1 > v303) {
                    unint64_t v303 = v304 >> 1;
                  }
                  if ((unint64_t)v304 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v305 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v305 = v303;
                  }
                  if (v305)
                  {
                    if (v305 >> 62) {
LABEL_827:
                    }
                      sub_1C4949AA8();
                    uint64_t v306 = (char *)operator new(4 * v305);
                    uint64_t v307 = &v306[4 * v302];
                    *(_DWORD *)uint64_t v307 = 2147483646;
                    uint64_t v203 = (uint64_t)(v307 + 4);
                    int64_t v308 = v299 - v300;
                    if (v299 == v300)
                    {
LABEL_448:
                      uint64_t v621 = v307;
                      uint64_t v622 = (char *)v203;
                      uint64_t v623 = &v306[4 * v305];
                      if (v300) {
                        operator delete(v300);
                      }
LABEL_293:
                      uint64_t v622 = (char *)v203;
                      ++v199;
                      ++v200;
                      ++v202;
                      uint64_t v201 = v198[5];
                      if (v202 >= (v198[6] - v201) >> 2) {
                        goto LABEL_450;
                      }
                      continue;
                    }
                  }
                  else
                  {
                    uint64_t v306 = 0;
                    uint64_t v307 = (char *)(4 * v302);
                    *(_DWORD *)(4 * v302) = 2147483646;
                    uint64_t v203 = 4 * v302 + 4;
                    int64_t v308 = v299 - v300;
                    if (v299 == v300) {
                      goto LABEL_448;
                    }
                  }
                  unint64_t v309 = v308 - 4;
                  if (v309 < 0x2C) {
                    goto LABEL_850;
                  }
                  if ((unint64_t)(v299 - v306 - v301) < 0x20) {
                    goto LABEL_850;
                  }
                  uint64_t v310 = (v309 >> 2) + 1;
                  uint64_t v311 = 4 * (v310 & 0x7FFFFFFFFFFFFFF8);
                  uint64_t v312 = &v299[-v311];
                  v307 -= v311;
                  uint64_t v313 = &v306[4 * v302 - 16];
                  uint64_t v314 = v299 - 16;
                  uint64_t v315 = v310 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v316 = *(_OWORD *)v314;
                    *((_OWORD *)v313 - 1) = *((_OWORD *)v314 - 1);
                    *(_OWORD *)uint64_t v313 = v316;
                    v313 -= 32;
                    v314 -= 32;
                    v315 -= 8;
                  }
                  while (v315);
                  uint64_t v299 = v312;
                  if (v310 != (v310 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_850:
                    do
                    {
                      int v317 = *((_DWORD *)v299 - 1);
                      v299 -= 4;
                      *((_DWORD *)v307 - 1) = v317;
                      v307 -= 4;
                    }
                    while (v299 != v300);
                  }
                  goto LABEL_448;
                }
                *(_DWORD *)uint64_t v622 = 2147483646;
                uint64_t v203 = (uint64_t)(v299 + 4);
                goto LABEL_293;
              }
            }
            uint64_t v263 = v628;
            if (v628 < v629)
            {
              *(void *)uint64_t v628 = v199;
              v263[1] = v200;
              uint64_t v264 = (char *)(v263 + 2);
LABEL_402:
              uint64_t v628 = v264;
              uint64_t v281 = (char *)v624;
              unint64_t v282 = ((v264 - (unsigned char *)__p) >> 4) - 1;
              double v283 = (unint64_t *)((char *)__p + 16 * v282);
              unint64_t v285 = *v283;
              unint64_t v284 = v283[1];
              uint64_t v286 = (char *)v624 + 64 * *v283;
              uint64_t v288 = (char *)*((void *)v286 + 4);
              uint64_t v289 = (char *)*((void *)v286 + 5);
              uint64_t v287 = (char **)(v286 + 32);
              if (v289 != v288)
              {
                unint64_t v290 = (v289 - v288) >> 4;
                do
                {
                  unint64_t v291 = v290 >> 1;
                  uint64_t v292 = &v288[16 * (v290 >> 1)];
                  if (*(void *)v292 < v284 || *(void *)v292 == v284 && *(void *)&v288[16 * v291 + 8] < v282)
                  {
                    uint64_t v288 = v292 + 16;
                    unint64_t v291 = v290 + ~v291;
                  }
                  unint64_t v290 = v291;
                }
                while (v291);
              }
              if (v288 == v289 || v284 < *(void *)v288 || v284 == *(void *)v288 && *((void *)v288 + 1) > v282)
              {
                *(void *)&long long v637 = v284;
                *((void *)&v637 + 1) = ((v264 - (unsigned char *)__p) >> 4) - 1;
                sub_1C4B19E34(v287, v288, &v637);
                uint64_t v281 = (char *)v624;
              }
              uint64_t v293 = &v281[64 * v284];
              uint64_t v294 = *(char **)v293;
              uint64_t v295 = (char *)*((void *)v293 + 1);
              if (v295 != *(char **)v293)
              {
                unint64_t v296 = (uint64_t)&v295[-*(void *)v293] >> 4;
                do
                {
                  unint64_t v297 = v296 >> 1;
                  uint64_t v298 = &v294[16 * (v296 >> 1)];
                  if (*(void *)v298 < v285 || *(void *)v298 == v285 && *(void *)&v294[16 * v297 + 8] < v282)
                  {
                    uint64_t v294 = v298 + 16;
                    unint64_t v297 = v296 + ~v297;
                  }
                  unint64_t v296 = v297;
                }
                while (v297);
              }
              if (v294 == v295 || v285 < *(void *)v294 || v285 == *(void *)v294 && *((void *)v294 + 1) > v282)
              {
                *(void *)&long long v637 = v285;
                *((void *)&v637 + 1) = ((v264 - (unsigned char *)__p) >> 4) - 1;
                sub_1C4B19E34((char **)v293, v294, &v637);
              }
              goto LABEL_424;
            }
            uint64_t v265 = __p;
            uint64_t v266 = (v628 - (unsigned char *)__p) >> 4;
            unint64_t v267 = v266 + 1;
            if ((unint64_t)(v266 + 1) >> 60) {
LABEL_829:
            }
              sub_1C494A220();
            uint64_t v268 = v629 - (unsigned char *)__p;
            if ((v629 - (unsigned char *)__p) >> 3 > v267) {
              unint64_t v267 = v268 >> 3;
            }
            if ((unint64_t)v268 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v269 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v269 = v267;
            }
            if (v269)
            {
              if (v269 >> 60) {
                goto LABEL_827;
              }
              double v270 = (char *)operator new(16 * v269);
              uint64_t v271 = &v270[16 * v266];
              *(void *)uint64_t v271 = v199;
              *((void *)v271 + 1) = v200;
              uint64_t v272 = v271;
              if (v263 == v265) {
                goto LABEL_400;
              }
              do
              {
LABEL_397:
                *((_OWORD *)v272 - 1) = *((_OWORD *)v263 - 1);
                v272 -= 16;
                v263 -= 2;
              }
              while (v263 != v265);
              uint64_t v263 = __p;
              uint64_t v264 = v271 + 16;
              std::string __p = v272;
              uint64_t v628 = v271 + 16;
              std::string::size_type v629 = &v270[16 * v269];
              if (!v263) {
                goto LABEL_402;
              }
            }
            else
            {
              double v270 = 0;
              uint64_t v271 = (char *)(16 * v266);
              *(void *)uint64_t v271 = v199;
              *((void *)v271 + 1) = v200;
              uint64_t v272 = (char *)(16 * v266);
              if (v263 != v265) {
                goto LABEL_397;
              }
LABEL_400:
              uint64_t v264 = v271 + 16;
              std::string __p = v272;
              uint64_t v628 = v271 + 16;
              std::string::size_type v629 = &v270[16 * v269];
              if (!v263) {
                goto LABEL_402;
              }
            }
            operator delete(v263);
            goto LABEL_402;
          }
        }
        break;
      }
      uint64_t v207 = v628;
      if (v628 < v629)
      {
        *(void *)uint64_t v628 = v199;
        v207[1] = v206;
        uint64_t v208 = (char *)(v207 + 2);
LABEL_325:
        uint64_t v628 = v208;
        double v225 = (char *)v624;
        unint64_t v226 = ((v208 - (unsigned char *)__p) >> 4) - 1;
        uint64_t v227 = (unint64_t *)((char *)__p + 16 * v226);
        unint64_t v229 = *v227;
        unint64_t v228 = v227[1];
        uint64_t v230 = (char *)v624 + 64 * *v227;
        uint64_t v232 = (char *)*((void *)v230 + 4);
        uint64_t v233 = (char *)*((void *)v230 + 5);
        uint64_t v231 = (char **)(v230 + 32);
        if (v233 != v232)
        {
          unint64_t v234 = (v233 - v232) >> 4;
          do
          {
            unint64_t v235 = v234 >> 1;
            id v236 = &v232[16 * (v234 >> 1)];
            if (*(void *)v236 < v228 || *(void *)v236 == v228 && *(void *)&v232[16 * v235 + 8] < v226)
            {
              uint64_t v232 = v236 + 16;
              unint64_t v235 = v234 + ~v235;
            }
            unint64_t v234 = v235;
          }
          while (v235);
        }
        if (v232 == v233 || v228 < *(void *)v232 || v228 == *(void *)v232 && *((void *)v232 + 1) > v226)
        {
          *(void *)&long long v637 = v228;
          *((void *)&v637 + 1) = ((v208 - (unsigned char *)__p) >> 4) - 1;
          sub_1C4B19E34(v231, v232, &v637);
          double v225 = (char *)v624;
        }
        long long v237 = &v225[64 * v228];
        uint64_t v238 = *(char **)v237;
        long long v239 = (char *)*((void *)v237 + 1);
        if (v239 != *(char **)v237)
        {
          unint64_t v240 = (uint64_t)&v239[-*(void *)v237] >> 4;
          do
          {
            unint64_t v241 = v240 >> 1;
            id v242 = &v238[16 * (v240 >> 1)];
            if (*(void *)v242 < v229 || *(void *)v242 == v229 && *(void *)&v238[16 * v241 + 8] < v226)
            {
              uint64_t v238 = v242 + 16;
              unint64_t v241 = v240 + ~v241;
            }
            unint64_t v240 = v241;
          }
          while (v241);
        }
        if (v238 == v239 || v229 < *(void *)v238 || v229 == *(void *)v238 && *((void *)v238 + 1) > v226)
        {
          *(void *)&long long v637 = v229;
          *((void *)&v637 + 1) = ((v208 - (unsigned char *)__p) >> 4) - 1;
          sub_1C4B19E34((char **)v237, v238, &v637);
        }
        goto LABEL_347;
      }
      uint64_t v209 = __p;
      uint64_t v210 = (v628 - (unsigned char *)__p) >> 4;
      unint64_t v211 = v210 + 1;
      if ((unint64_t)(v210 + 1) >> 60) {
        goto LABEL_829;
      }
      uint64_t v212 = v629 - (unsigned char *)__p;
      if ((v629 - (unsigned char *)__p) >> 3 > v211) {
        unint64_t v211 = v212 >> 3;
      }
      if ((unint64_t)v212 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v213 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v213 = v211;
      }
      if (v213)
      {
        if (v213 >> 60) {
          goto LABEL_827;
        }
        double v214 = (char *)operator new(16 * v213);
        uint64_t v215 = &v214[16 * v210];
        *(void *)uint64_t v215 = v199;
        *((void *)v215 + 1) = v206;
        uint64_t v216 = v215;
        if (v207 == v209) {
          goto LABEL_323;
        }
        do
        {
LABEL_320:
          *((_OWORD *)v216 - 1) = *((_OWORD *)v207 - 1);
          v216 -= 16;
          v207 -= 2;
        }
        while (v207 != v209);
        uint64_t v207 = __p;
        uint64_t v208 = v215 + 16;
        std::string __p = v216;
        uint64_t v628 = v215 + 16;
        std::string::size_type v629 = &v214[16 * v213];
        if (!v207) {
          goto LABEL_325;
        }
      }
      else
      {
        double v214 = 0;
        uint64_t v215 = (char *)(16 * v210);
        *(void *)uint64_t v215 = v199;
        *((void *)v215 + 1) = v206;
        uint64_t v216 = (char *)(16 * v210);
        if (v207 != v209) {
          goto LABEL_320;
        }
LABEL_323:
        uint64_t v208 = v215 + 16;
        std::string __p = v216;
        uint64_t v628 = v215 + 16;
        std::string::size_type v629 = &v214[16 * v213];
        if (!v207) {
          goto LABEL_325;
        }
      }
      operator delete(v207);
      goto LABEL_325;
    }
LABEL_456:
    uint64_t v619 = 0;
    uint64_t v620 = 0;
    uint64_t v618 = 0;
    uint64_t v320 = v622 - (unsigned char *)v621;
    if (v622 != v621)
    {
      if (v320 < 0) {
        sub_1C494A220();
      }
      uint64_t v321 = (char *)operator new(v622 - (unsigned char *)v621);
      uint64_t v322 = &v321[4 * (v320 >> 2)];
      uint64_t v618 = v321;
      uint64_t v620 = v322;
      bzero(v321, v320 & 0xFFFFFFFFFFFFFFFCLL);
      uint64_t v619 = v322;
    }
    uint64_t v617 = 0;
    uint64_t v323 = 0;
    uint64_t v324 = 0;
    uint64_t v325 = 0;
    uint64_t v326 = 0;
    uint64_t v327 = 0;
    unint64_t v328 = 0;
    *(void *)&long long v637 = &v624;
    *((void *)&v637 + 1) = &v621;
    int v648 = 0;
    long long v639 = 0u;
    long long v640 = 0u;
    long long v641 = 0u;
    long long v642 = 0u;
    long long v643 = 0u;
    long long v644 = 0u;
    long long v645 = 0u;
    uint64_t v638 = (void **)&v618;
    unint64_t v646 = 0;
    uint64_t v329 = (char *)v624;
    while (2)
    {
      uint64_t v331 = &v329[64 * v328];
      if (*((void *)v331 + 1) != *(void *)v331)
      {
        if (v323 < v327)
        {
          *(void *)uint64_t v323 = v328;
          uint64_t v330 = (uint64_t)(v323 + 8);
          goto LABEL_461;
        }
        uint64_t v332 = (v323 - v326) >> 3;
        unint64_t v333 = v332 + 1;
        if ((unint64_t)(v332 + 1) >> 61) {
          goto LABEL_836;
        }
        if ((v327 - v326) >> 2 > v333) {
          unint64_t v333 = (v327 - v326) >> 2;
        }
        if ((unint64_t)(v327 - v326) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v334 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v334 = v333;
        }
        if (v334)
        {
          if (v334 >> 61) {
            goto LABEL_834;
          }
          uint64_t v335 = operator new(8 * v334);
          uint64_t v336 = (unint64_t *)&v335[8 * v332];
          *uint64_t v336 = v328;
          uint64_t v330 = (uint64_t)(v336 + 1);
          int64_t v337 = v323 - v326;
          if (v323 == v326)
          {
LABEL_492:
            uint64_t v327 = &v335[8 * v334];
            *((void *)&v640 + 1) = v336;
            *((void *)&v641 + 1) = v327;
            if (v326) {
              operator delete(v326);
            }
            uint64_t v326 = (char *)v336;
LABEL_461:
            *(void *)&long long v641 = v330;
            uint64_t v323 = (char *)v330;
LABEL_462:
            ++v328;
            uint64_t v329 = (char *)v624;
            if (v328 < (v625 - (unsigned char *)v624) >> 6) {
              continue;
            }
            sub_1C49B90FC((uint64_t)&v642, *(void *)(*((void *)&v639 + 1) - 8) + 1, 0);
            sub_1C49B90FC((uint64_t)&v643 + 8, *(void *)(v641 - 8) + 1, 0);
            int v367 = 0;
            unint64_t v368 = (uint64_t)(*((void *)&v639 + 1) - v639) >> 3;
            if ((uint64_t)(v641 - *((void *)&v640 + 1)) >> 3 < v368) {
              unint64_t v368 = (uint64_t)(v641 - *((void *)&v640 + 1)) >> 3;
            }
            unint64_t v647 = v368;
            uint64_t v369 = ((*(void *)(v637 + 32) - *(void *)(v637 + 24)) >> 3) & 0xFFFFFFFELL;
            if ((int)v369 <= 50) {
              LODWORD(v369) = 50;
            }
            if (v369 >= 0x3E8) {
              int v370 = 1000;
            }
            else {
              int v370 = v369;
            }
            int v371 = v648;
            while (2)
            {
              switch(v371)
              {
                case 0:
                  uint64_t v372 = (void *)*((void *)&v639 + 1);
                  uint64_t v373 = (void *)v639;
                  uint64_t v375 = (void *)*((void *)&v640 + 1);
                  uint64_t v374 = (void *)v641;
                  if (*((void *)&v639 + 1) - (void)v639 < (void)v641 - *((void *)&v640 + 1))
                  {
                    if ((void)v639 == *((void *)&v639 + 1)) {
                      goto LABEL_735;
                    }
                    id v376 = (uint64_t *)*((void *)&v637 + 1);
                    uint64_t v377 = *(void *)v637;
                    while (1)
                    {
                      uint64_t v378 = v377 + (*v373 << 6);
                      uint64_t v379 = *(void *)(v378 + 32);
                      uint64_t v380 = *(void *)(v378 + 40);
                      if (v379 != v380) {
                        break;
                      }
LABEL_537:
                      if (++v373 == v372) {
                        goto LABEL_735;
                      }
                    }
                    uint64_t v381 = *v376;
                    unint64_t v382 = v380 - v379 - 16;
                    if (v382 >= 0x10)
                    {
                      uint64_t v385 = (v382 >> 4) + 1;
                      uint64_t v384 = v379 + 16 * (v385 & 0x1FFFFFFFFFFFFFFELL);
                      uint64_t v386 = (uint64_t *)(v379 + 24);
                      int v383 = 0x7FFFFFFF;
                      uint64_t v387 = v385 & 0x1FFFFFFFFFFFFFFELL;
                      int v388 = 0x7FFFFFFF;
                      do
                      {
                        uint64_t v389 = *(v386 - 2);
                        uint64_t v390 = *v386;
                        v386 += 4;
                        int v391 = *(_DWORD *)(v381 + 4 * v389);
                        int v392 = *(_DWORD *)(v381 + 4 * v390);
                        if (v391 < v383) {
                          int v383 = v391;
                        }
                        if (v392 < v388) {
                          int v388 = v392;
                        }
                        v387 -= 2;
                      }
                      while (v387);
                      if (v383 >= v388) {
                        int v383 = v388;
                      }
                      if (v385 == (v385 & 0x1FFFFFFFFFFFFFFELL)) {
                        goto LABEL_553;
                      }
                    }
                    else
                    {
                      int v383 = 0x7FFFFFFF;
                      uint64_t v384 = v379;
                    }
                    do
                    {
                      if (*(_DWORD *)(v381 + 4 * *(void *)(v384 + 8)) < v383) {
                        int v383 = *(_DWORD *)(v381 + 4 * *(void *)(v384 + 8));
                      }
                      v384 += 16;
                    }
                    while (v384 != v380);
                    do
                    {
LABEL_553:
                      *(_DWORD *)(v381 + 4 * *(void *)(v379 + 8)) -= v383;
                      v379 += 16;
                    }
                    while (v379 != v380);
                    goto LABEL_537;
                  }
                  if (*((void *)&v640 + 1) != (void)v641)
                  {
                    uint64_t v523 = (uint64_t *)*((void *)&v637 + 1);
                    uint64_t v524 = *(void *)v637;
                    while (1)
                    {
                      id v525 = (uint64_t *)(v524 + (*v375 << 6));
                      uint64_t v526 = *v525;
                      uint64_t v527 = v525[1];
                      if (v526 != v527) {
                        break;
                      }
LABEL_717:
                      if (++v375 == v374) {
                        goto LABEL_735;
                      }
                    }
                    uint64_t v528 = *v523;
                    unint64_t v529 = v527 - v526 - 16;
                    if (v529 >= 0x10)
                    {
                      uint64_t v532 = (v529 >> 4) + 1;
                      uint64_t v531 = v526 + 16 * (v532 & 0x1FFFFFFFFFFFFFFELL);
                      long long v533 = (uint64_t *)(v526 + 24);
                      int v530 = 0x7FFFFFFF;
                      uint64_t v534 = v532 & 0x1FFFFFFFFFFFFFFELL;
                      int v535 = 0x7FFFFFFF;
                      do
                      {
                        uint64_t v536 = *(v533 - 2);
                        uint64_t v537 = *v533;
                        v533 += 4;
                        int v538 = *(_DWORD *)(v528 + 4 * v536);
                        int v539 = *(_DWORD *)(v528 + 4 * v537);
                        if (v538 < v530) {
                          int v530 = v538;
                        }
                        if (v539 < v535) {
                          int v535 = v539;
                        }
                        v534 -= 2;
                      }
                      while (v534);
                      if (v530 >= v535) {
                        int v530 = v535;
                      }
                      if (v532 == (v532 & 0x1FFFFFFFFFFFFFFELL)) {
                        goto LABEL_733;
                      }
                    }
                    else
                    {
                      int v530 = 0x7FFFFFFF;
                      uint64_t v531 = v526;
                    }
                    do
                    {
                      if (*(_DWORD *)(v528 + 4 * *(void *)(v531 + 8)) < v530) {
                        int v530 = *(_DWORD *)(v528 + 4 * *(void *)(v531 + 8));
                      }
                      v531 += 16;
                    }
                    while (v531 != v527);
                    do
                    {
LABEL_733:
                      *(_DWORD *)(v528 + 4 * *(void *)(v526 + 8)) -= v530;
                      v526 += 16;
                    }
                    while (v526 != v527);
                    goto LABEL_717;
                  }
LABEL_735:
                  int v371 = 1;
LABEL_532:
                  int v648 = v371;
                  if (++v367 != v370) {
                    continue;
                  }
LABEL_757:
                  if ((void)v645)
                  {
                    *((void *)&v645 + 1) = v645;
                    operator delete((void *)v645);
                  }
                  if (*((void *)&v643 + 1)) {
                    operator delete(*((void **)&v643 + 1));
                  }
                  if ((void)v642) {
                    operator delete((void *)v642);
                  }
                  if (*((void *)&v640 + 1))
                  {
                    *(void *)&long long v641 = *((void *)&v640 + 1);
                    operator delete(*((void **)&v640 + 1));
                  }
                  if ((void)v639)
                  {
                    *((void *)&v639 + 1) = v639;
                    operator delete((void *)v639);
                  }
                  uint64_t v553 = v618;
                  uint64_t v554 = v619;
                  if (v619 != v618)
                  {
                    uint64_t v555 = 0;
                    unint64_t v556 = v605;
                    unint64_t v558 = v610;
                    int v559 = v613 + v605;
                    int v614 = v613 + v605;
                    unint64_t v557 = v614;
                    while (1)
                    {
                      if (*(_DWORD *)&v553[4 * v555] != 1) {
                        goto LABEL_771;
                      }
                      uint64_t v561 = (unint64_t *)((char *)__p + 16 * v555);
                      unint64_t v563 = *v561;
                      unint64_t v562 = v561[1];
                      BOOL v564 = v563 < v556 && v562 >= v557;
                      if (!v564 || v562 >= v558) {
                        goto LABEL_771;
                      }
                      uint64_t v566 = *a4 + 24 * *((int *)v631 + (int)v562 - v559);
                      uint64_t v567 = (uint64_t *)(v566 + 8);
                      uint64_t v568 = *(char **)(v566 + 8);
                      uint64_t v570 = (void *)(v566 + 16);
                      unint64_t v569 = *(void *)(v566 + 16);
                      if ((unint64_t)v568 >= v569) {
                        break;
                      }
                      *(_DWORD *)uint64_t v568 = v563;
                      uint64_t v560 = (uint64_t)(v568 + 4);
LABEL_770:
                      *uint64_t v567 = v560;
                      uint64_t v553 = v618;
                      uint64_t v554 = v619;
LABEL_771:
                      if (++v555 >= (unint64_t)((v554 - v553) >> 2)) {
                        goto LABEL_803;
                      }
                    }
                    int v571 = *(char **)v566;
                    uint64_t v572 = (uint64_t)&v568[-*(void *)v566];
                    uint64_t v573 = v572 >> 2;
                    unint64_t v574 = (v572 >> 2) + 1;
                    if (v574 >> 62) {
                      sub_1C494A220();
                    }
                    uint64_t v575 = v569 - (void)v571;
                    if (v575 >> 1 > v574) {
                      unint64_t v574 = v575 >> 1;
                    }
                    if ((unint64_t)v575 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v576 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v576 = v574;
                    }
                    if (v576)
                    {
                      if (v576 >> 62) {
                        sub_1C4949AA8();
                      }
                      float32x4_t v577 = (void *)(v566 + 16);
                      uint64_t v578 = v566;
                      unint64_t v579 = v576;
                      uint64_t v580 = operator new(4 * v576);
                      uint64_t v566 = v578;
                      uint64_t v570 = v577;
                      unint64_t v576 = v579;
                      uint64_t v581 = &v580[4 * v573];
                      _DWORD *v581 = v563;
                      uint64_t v560 = (uint64_t)(v581 + 1);
                      int64_t v582 = v568 - v571;
                      if (v568 != v571) {
                        goto LABEL_790;
                      }
                    }
                    else
                    {
                      uint64_t v580 = 0;
                      uint64_t v581 = (_DWORD *)(4 * v573);
                      *(_DWORD *)(4 * v573) = v563;
                      uint64_t v560 = 4 * v573 + 4;
                      int64_t v582 = v568 - v571;
                      if (v568 != v571)
                      {
LABEL_790:
                        unint64_t v583 = v582 - 4;
                        if (v583 >= 0x2C)
                        {
                          unint64_t v584 = v568 - v580 - v572;
                          unint64_t v556 = v605;
                          unint64_t v557 = v614;
                          unint64_t v558 = v610;
                          if (v584 >= 0x20)
                          {
                            uint64_t v585 = (v583 >> 2) + 1;
                            uint64_t v586 = 4 * (v585 & 0x7FFFFFFFFFFFFFF8);
                            uint64_t v587 = &v568[-v586];
                            uint64_t v581 = (_DWORD *)((char *)v581 - v586);
                            uint64_t v588 = &v580[4 * v573 - 16];
                            uint64_t v589 = v568 - 16;
                            uint64_t v590 = v585 & 0x7FFFFFFFFFFFFFF8;
                            do
                            {
                              long long v591 = *(_OWORD *)v589;
                              *(v588 - 1) = *((_OWORD *)v589 - 1);
                              *uint64_t v588 = v591;
                              v588 -= 2;
                              v589 -= 32;
                              v590 -= 8;
                            }
                            while (v590);
                            uint64_t v568 = v587;
                            if (v585 == (v585 & 0x7FFFFFFFFFFFFFF8)) {
                              goto LABEL_799;
                            }
                          }
                        }
                        else
                        {
                          unint64_t v556 = v605;
                          unint64_t v557 = v614;
                          unint64_t v558 = v610;
                        }
                        do
                        {
                          int v592 = *((_DWORD *)v568 - 1);
                          v568 -= 4;
                          *--uint64_t v581 = v592;
                        }
                        while (v568 != v571);
LABEL_799:
                        *(void *)uint64_t v566 = v581;
                        *uint64_t v567 = v560;
                        void *v570 = &v580[4 * v576];
                        if (v571) {
                          operator delete(v571);
                        }
                        int v559 = v614;
                        goto LABEL_770;
                      }
                    }
                    unint64_t v556 = v605;
                    unint64_t v557 = v614;
                    unint64_t v558 = v610;
                    goto LABEL_799;
                  }
                  uint64_t v553 = v619;
LABEL_803:
                  if (v553)
                  {
                    uint64_t v619 = v553;
                    operator delete(v553);
                  }
                  if (v621)
                  {
                    uint64_t v622 = (char *)v621;
                    operator delete(v621);
                  }
                  if (__p)
                  {
                    uint64_t v628 = (char *)__p;
                    operator delete(__p);
                  }
                  uint64_t v593 = (char *)v624;
                  if (v624)
                  {
                    uint64_t v594 = v625;
                    uint64_t v595 = v624;
                    if (v625 != v624)
                    {
                      do
                      {
                        int v596 = (void *)*((void *)v594 - 4);
                        if (v596)
                        {
                          *((void *)v594 - 3) = v596;
                          operator delete(v596);
                        }
                        v597 = (void *)*((void *)v594 - 8);
                        if (v597)
                        {
                          *((void *)v594 - 7) = v597;
                          operator delete(v597);
                        }
                        v594 -= 64;
                      }
                      while (v594 != v593);
                      uint64_t v595 = v624;
                    }
                    uint64_t v625 = v593;
                    operator delete(v595);
                  }
                  break;
                case 1:
                  uint64_t v419 = (unint64_t *)*((void *)&v639 + 1);
                  id v418 = (unint64_t *)v639;
                  if ((void)v639 != *((void *)&v639 + 1))
                  {
                    uint64_t v420 = v642;
                    uint64_t v421 = (uint64_t *)v637;
                    uint64_t v422 = *((void *)&v643 + 1);
                    do
                    {
                      unint64_t v423 = *v418;
                      if (((*(void *)(v420 + ((*v418 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v418) & 1) == 0)
                      {
                        uint64_t v424 = *v421;
                        uint64_t v425 = *v421 + (v423 << 6);
                        uint64_t v426 = *(void **)(v425 + 32);
                        if (v426 != *(void **)(v425 + 40))
                        {
                          id v427 = (void *)*((void *)&v637 + 1);
                          uint64_t v428 = v638;
                          do
                          {
                            uint64_t v429 = *v426 >> 6;
                            uint64_t v430 = 1 << *v426;
                            uint64_t v431 = *(void *)(v422 + 8 * v429);
                            if ((v430 & v431) == 0
                              && ((*(void *)(v420 + ((v423 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v423) & 1) == 0
                              && !*(_DWORD *)(*v427 + 4 * v426[1]))
                            {
                              *(void *)(v422 + 8 * v429) = v430 | v431;
                              *(void *)(v420 + ((*v418 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *v418;
                              *((_DWORD *)*v428 + v426[1]) = 1;
                              unint64_t v423 = *v418;
                            }
                            v426 += 2;
                          }
                          while (v426 != *(void **)(v424 + (v423 << 6) + 40));
                        }
                      }
                      ++v418;
                    }
                    while (v418 != v419);
                  }
                  if (*((void *)&v642 + 1))
                  {
                    unint64_t v432 = 0;
                    uint64_t v433 = v642;
                    do
                    {
                      *(void *)(v433 + ((v432 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v432);
                      ++v432;
                    }
                    while (v432 < *((void *)&v642 + 1));
                  }
                  if ((void)v644)
                  {
                    unint64_t v434 = 0;
                    uint64_t v435 = *((void *)&v643 + 1);
                    do
                    {
                      *(void *)(v435 + ((v434 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v434);
                      ++v434;
                    }
                    while (v434 < (unint64_t)v644);
                  }
                  goto LABEL_531;
                case 2:
                  uint64_t v447 = (uint64_t *)*((void *)&v639 + 1);
                  uint64_t v446 = (uint64_t *)v639;
                  if ((void)v639 != *((void *)&v639 + 1))
                  {
                    uint64_t v448 = v638;
                    uint64_t v449 = *(void *)v637;
                    do
                    {
                      uint64_t v450 = *v446;
                      uint64_t v451 = v449 + (*v446 << 6);
                      uint64_t v452 = *(void **)(v451 + 32);
                      if (v452 != *(void **)(v451 + 40))
                      {
                        uint64_t v453 = *v448;
                        uint64_t v454 = *((void *)&v643 + 1);
                        do
                        {
                          if (v453[v452[1]] == 1)
                          {
                            *(void *)(v454 + ((*v452 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *v452;
                            uint64_t v450 = *v446;
                          }
                          v452 += 2;
                        }
                        while (v452 != *(void **)(v449 + (v450 << 6) + 40));
                      }
                      ++v446;
                    }
                    while (v446 != v447);
                  }
                  unint64_t v455 = v644;
                  unint64_t v456 = v644 - 64;
                  if ((unint64_t)v644 < 0x40)
                  {
                    unint64_t v457 = 0;
                    id v458 = (int8x8_t *)*((void *)&v643 + 1);
                    goto LABEL_743;
                  }
                  if (v456 < 0xC0)
                  {
                    unint64_t v457 = 0;
                    id v458 = (int8x8_t *)*((void *)&v643 + 1);
                    do
                    {
LABEL_742:
                      int8x8_t v547 = *v458++;
                      uint8x8_t v548 = (uint8x8_t)vcnt_s8(v547);
                      v548.i16[0] = vaddlv_u8(v548);
                      v457 += v548.u32[0];
                      v455 -= 64;
                    }
                    while (v455 > 0x3F);
                    goto LABEL_743;
                  }
                  uint64_t v542 = (v456 >> 6) + 1;
                  id v458 = (int8x8_t *)(*((void *)&v643 + 1) + 8 * (v542 & 0x7FFFFFFFFFFFFFCLL));
                  unint64_t v455 = v644 - ((v542 & 0x7FFFFFFFFFFFFFCLL) << 6);
                  long long v543 = (int8x16_t *)(*((void *)&v643 + 1) + 16);
                  int64x2_t v544 = 0uLL;
                  uint64_t v545 = v542 & 0x7FFFFFFFFFFFFFCLL;
                  int64x2_t v546 = 0uLL;
                  do
                  {
                    int64x2_t v544 = (int64x2_t)vpadalq_u32((uint64x2_t)v544, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v543[-1]))));
                    int64x2_t v546 = (int64x2_t)vpadalq_u32((uint64x2_t)v546, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v543))));
                    v543 += 2;
                    v545 -= 4;
                  }
                  while (v545);
                  unint64_t v457 = vaddvq_s64(vaddq_s64(v546, v544));
                  if (v542 != (v542 & 0x7FFFFFFFFFFFFFCLL)) {
                    goto LABEL_742;
                  }
LABEL_743:
                  if (v455)
                  {
                    uint8x8_t v549 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)v458 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v455)));
                    v549.i16[0] = vaddlv_u8(v549);
                    v457 += v549.u32[0];
                  }
                  if (v457 >= v647) {
                    int v371 = 6;
                  }
                  else {
                    int v371 = 3;
                  }
                  goto LABEL_532;
                case 3:
                  uint64_t v393 = v639;
                  if (*((void *)&v639 + 1) == (void)v639) {
                    goto LABEL_701;
                  }
                  unint64_t v394 = 0;
                  unint64_t v395 = (uint64_t)(*((void *)&v639 + 1) - v639) >> 3;
                  if (v395 <= 1) {
                    uint64_t v396 = 1;
                  }
                  else {
                    uint64_t v396 = (uint64_t)(*((void *)&v639 + 1) - v639) >> 3;
                  }
                  uint64_t v397 = v642;
                  uint64_t v398 = v638;
LABEL_560:
                  uint64_t v399 = 0;
                  uint64_t v400 = *((void *)&v643 + 1);
                  while (1)
                  {
                    if (v394 >= v395) {
                      unint64_t v394 = 0;
                    }
                    unint64_t v401 = *(void *)(v393 + 8 * v394);
                    uint64_t v402 = *(void *)(v397 + 8 * (v401 >> 6));
                    if (((1 << v401) & v402) == 0)
                    {
                      uint64_t v403 = *(void *)v637 + (v401 << 6);
                      uint64_t v405 = *(char **)(v403 + 32);
                      uint64_t v404 = *(char **)(v403 + 40);
                      if (v405 != v404) {
                        break;
                      }
                    }
LABEL_561:
                    ++v399;
                    ++v394;
                    if (v399 == v396)
                    {
LABEL_701:
                      int v371 = 5;
                      goto LABEL_532;
                    }
                  }
                  uint64_t v406 = v405;
                  while (1)
                  {
                    unint64_t v407 = *(void *)v406;
                    if (((*(void *)(*((void *)&v643 + 1) + ((*(void *)v406 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(void *)v406) & 1) == 0
                      && !*(_DWORD *)(**((void **)&v637 + 1) + 4 * *((void *)v406 + 1)))
                    {
                      break;
                    }
                    v406 += 16;
                    if (v406 == v404) {
                      goto LABEL_561;
                    }
                  }
                  int v371 = 5;
                  if (v401 == -1 || v407 == -1) {
                    goto LABEL_532;
                  }
                  unint64_t v408 = (v404 - v405) >> 4;
                  uint64_t v409 = v405;
                  do
                  {
                    unint64_t v410 = v408 >> 1;
                    uint64_t v411 = (unint64_t *)&v409[16 * (v408 >> 1)];
                    unint64_t v413 = *v411;
                    uint64_t v412 = (char *)(v411 + 2);
                    v408 += ~(v408 >> 1);
                    if (v413 >= v407) {
                      unint64_t v408 = v410;
                    }
                    else {
                      uint64_t v409 = v412;
                    }
                  }
                  while (v408);
                  if (v404 == v409 || *(void *)v409 != v407) {
                    uint64_t v414 = 0;
                  }
                  else {
                    uint64_t v414 = *((void *)v409 + 1);
                  }
                  uint64_t v415 = *v398;
                  *((_DWORD *)*v398 + v414) = 2;
                  uint64_t v416 = v405;
                  do
                  {
                    if (v415[*((void *)v416 + 1)] == 1)
                    {
                      unint64_t v394 = v401 + 1;
                      while (v415[*((void *)v405 + 1)] != 1)
                      {
                        v405 += 16;
                        if (v405 == v404)
                        {
                          unint64_t v417 = -1;
LABEL_590:
                          *(void *)(v397 + 8 * (v401 >> 6)) = (1 << v401) | v402;
                          *(void *)(v400 + ((v417 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v417);
                          goto LABEL_560;
                        }
                      }
                      unint64_t v417 = *(void *)v405;
                      goto LABEL_590;
                    }
                    v416 += 16;
                  }
                  while (v416 != v404);
                  unint64_t v540 = (void *)v645;
                  *((void *)&v645 + 1) = v645;
                  if ((unint64_t)v645 >= v646)
                  {
                    unint64_t v550 = (uint64_t)(v646 - v645) >> 3;
                    if (v550 <= 1) {
                      unint64_t v550 = 1;
                    }
                    if (v646 - (unint64_t)v645 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v551 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v551 = v550;
                    }
                    if (v551 >> 60) {
                      goto LABEL_837;
                    }
                    unint64_t v552 = operator new(16 * v551);
                    void *v552 = v401;
                    v552[1] = v407;
                    unint64_t v541 = v552 + 2;
                    *(void *)&long long v645 = v552;
                    *((void *)&v645 + 1) = v552 + 2;
                    unint64_t v646 = (unint64_t)&v552[2 * v551];
                    if (v540) {
                      operator delete(v540);
                    }
                  }
                  else
                  {
                    *(void *)long long v645 = v401;
                    v540[1] = v407;
                    unint64_t v541 = v540 + 2;
                  }
                  *((void *)&v645 + 1) = v541;
                  int v371 = 4;
                  goto LABEL_532;
                case 4:
                  uint64_t v459 = (void *)*((void *)&v645 + 1);
                  uint64_t v460 = (uint64_t *)v637;
                  while (2)
                  {
                    uint64_t v461 = *(v459 - 1);
                    uint64_t v462 = *v460;
                    uint64_t v463 = *v460 + (v461 << 6);
                    uint64_t v464 = *(uint64_t **)v463;
                    uint64_t v465 = *(uint64_t **)(v463 + 8);
                    if (v464 == v465) {
                      break;
                    }
                    while (*((_DWORD *)*v638 + v464[1]) != 1)
                    {
                      v464 += 2;
                      if (v464 == v465) {
                        goto LABEL_674;
                      }
                    }
                    uint64_t v466 = *v464;
                    if (*v464 != -1)
                    {
                      if ((unint64_t)v459 < v646)
                      {
                        *uint64_t v459 = v466;
                        v459[1] = v461;
                        double v467 = v459 + 2;
                        goto LABEL_651;
                      }
                      uint64_t v468 = (void *)v645;
                      uint64_t v469 = (uint64_t)((uint64_t)v459 - v645) >> 4;
                      unint64_t v470 = v469 + 1;
                      if (!((unint64_t)(v469 + 1) >> 60))
                      {
                        uint64_t v471 = v646 - v645;
                        if ((uint64_t)(v646 - v645) >> 3 > v470) {
                          unint64_t v470 = v471 >> 3;
                        }
                        if ((unint64_t)v471 >= 0x7FFFFFFFFFFFFFF0) {
                          unint64_t v472 = 0xFFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v472 = v470;
                        }
                        if (v472 >> 60) {
                          goto LABEL_837;
                        }
                        uint64_t v473 = (char *)operator new(16 * v472);
                        uint64_t v474 = *(v459 - 1);
                        uint64_t v475 = &v473[16 * v469];
                        *(void *)uint64_t v475 = v466;
                        *((void *)v475 + 1) = v474;
                        if (v459 == v468)
                        {
                          double v467 = v475 + 16;
                          *(void *)&long long v645 = &v473[16 * v469];
                          *((void *)&v645 + 1) = v475 + 16;
                          unint64_t v646 = (unint64_t)&v473[16 * v472];
                          if (v468) {
                            goto LABEL_650;
                          }
                        }
                        else
                        {
                          uint64_t v476 = &v473[16 * v469];
                          do
                          {
                            id v477 = v476 - 16;
                            *((_OWORD *)v476 - 1) = *((_OWORD *)v459 - 1);
                            v459 -= 2;
                            v476 -= 16;
                          }
                          while (v459 != v468);
                          double v467 = v475 + 16;
                          *(void *)&long long v645 = v477;
                          *((void *)&v645 + 1) = v475 + 16;
                          unint64_t v646 = (unint64_t)&v473[16 * v472];
                          if (v468)
                          {
LABEL_650:
                            operator delete(v468);
                            uint64_t v460 = (uint64_t *)v637;
                          }
                        }
LABEL_651:
                        *((void *)&v645 + 1) = v467;
                        uint64_t v478 = *v460 + (v466 << 6);
                        id v479 = *(uint64_t **)(v478 + 32);
                        uint64_t v480 = *(uint64_t **)(v478 + 40);
                        if (v479 == v480)
                        {
LABEL_832:
                          exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
                          MEMORY[0x1C87861F0](exception, "Could not find prime in given row!");
LABEL_833:
                          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                        }
                        while (*((_DWORD *)*v638 + v479[1]) != 2)
                        {
                          v479 += 2;
                          if (v479 == v480) {
                            goto LABEL_832;
                          }
                        }
                        uint64_t v481 = *v479;
                        if ((unint64_t)v467 < v646)
                        {
                          *double v467 = v466;
                          v467[1] = v481;
                          uint64_t v459 = v467 + 2;
                          *((void *)&v645 + 1) = v459;
                          continue;
                        }
                        id v482 = (void *)v645;
                        uint64_t v483 = (uint64_t)((uint64_t)v467 - v645) >> 4;
                        unint64_t v484 = v483 + 1;
                        if (!((unint64_t)(v483 + 1) >> 60))
                        {
                          uint64_t v485 = v646 - v645;
                          if ((uint64_t)(v646 - v645) >> 3 > v484) {
                            unint64_t v484 = v485 >> 3;
                          }
                          if ((unint64_t)v485 >= 0x7FFFFFFFFFFFFFF0) {
                            unint64_t v486 = 0xFFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v486 = v484;
                          }
                          if (!(v486 >> 60))
                          {
                            uint64_t v487 = (char *)operator new(16 * v486);
                            uint64_t v488 = &v487[16 * v483];
                            *(void *)uint64_t v488 = v466;
                            *((void *)v488 + 1) = v481;
                            if (v467 == v482)
                            {
                              uint64_t v459 = v488 + 16;
                              *(void *)&long long v645 = &v487[16 * v483];
                              *((void *)&v645 + 1) = v488 + 16;
                              unint64_t v646 = (unint64_t)&v487[16 * v486];
                              if (v482) {
                                goto LABEL_668;
                              }
                            }
                            else
                            {
                              uint64_t v489 = &v487[16 * v483];
                              do
                              {
                                uint64_t v490 = v489 - 16;
                                *((_OWORD *)v489 - 1) = *((_OWORD *)v467 - 1);
                                v467 -= 2;
                                v489 -= 16;
                              }
                              while (v467 != v482);
                              uint64_t v459 = v488 + 16;
                              *(void *)&long long v645 = v490;
                              *((void *)&v645 + 1) = v488 + 16;
                              unint64_t v646 = (unint64_t)&v487[16 * v486];
                              if (v482)
                              {
LABEL_668:
                                operator delete(v482);
                                uint64_t v460 = (uint64_t *)v637;
                              }
                            }
                            *((void *)&v645 + 1) = v459;
                            continue;
                          }
LABEL_837:
                          sub_1C4949AA8();
                        }
                      }
                      sub_1C494A220();
                    }
                    break;
                  }
LABEL_674:
                  uint64_t v491 = (void *)v645;
                  if ((void *)v645 != v459)
                  {
                    uint64_t v492 = *v638;
                    do
                    {
                      unint64_t v494 = v491[1];
                      uint64_t v495 = v462 + (*v491 << 6);
                      uint64_t v496 = *(char **)(v495 + 32);
                      id v497 = *(char **)(v495 + 40);
                      if (v497 != v496)
                      {
                        unint64_t v498 = (v497 - v496) >> 4;
                        do
                        {
                          unint64_t v499 = v498 >> 1;
                          uint64_t v500 = &v496[16 * (v498 >> 1)];
                          unint64_t v502 = *(void *)v500;
                          uint64_t v501 = v500 + 16;
                          v498 += ~(v498 >> 1);
                          if (v502 >= v494) {
                            unint64_t v498 = v499;
                          }
                          else {
                            uint64_t v496 = v501;
                          }
                        }
                        while (v498);
                      }
                      if (v497 == v496 || *(void *)v496 != v494) {
                        uint64_t v493 = 0;
                      }
                      else {
                        uint64_t v493 = *((void *)v496 + 1);
                      }
                      v492[v493] = v492[v493] != 1;
                      v491 += 2;
                    }
                    while (v491 != v459);
                  }
                  if (*((void *)&v642 + 1))
                  {
                    unint64_t v503 = 0;
                    uint64_t v504 = v642;
                    do
                    {
                      *(void *)(v504 + ((v503 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v503);
                      ++v503;
                    }
                    while (v503 < *((void *)&v642 + 1));
                  }
                  if ((void)v644)
                  {
                    unint64_t v505 = 0;
                    uint64_t v506 = *((void *)&v643 + 1);
                    do
                    {
                      *(void *)(v506 + ((v505 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v505);
                      ++v505;
                    }
                    while (v505 < (unint64_t)v644);
                  }
                  double v508 = (void *)*((void *)&v639 + 1);
                  id v507 = (void *)v639;
                  if ((void)v639 != *((void *)&v639 + 1))
                  {
                    uint64_t v509 = v638;
                    do
                    {
                      uint64_t v510 = v462 + (*v507 << 6);
                      uint64_t v511 = *(void *)(v510 + 32);
                      uint64_t v512 = *(void *)(v510 + 40);
                      if (v511 != v512)
                      {
                        id v513 = *v509;
                        do
                        {
                          uint64_t v514 = *(void *)(v511 + 8);
                          if (v513[v514] == 2) {
                            v513[v514] = 0;
                          }
                          v511 += 16;
                        }
                        while (v511 != v512);
                      }
                      ++v507;
                    }
                    while (v507 != v508);
                  }
LABEL_531:
                  int v371 = 2;
                  goto LABEL_532;
                case 5:
                  uint64_t v437 = (void *)*((void *)&v639 + 1);
                  uint64_t v436 = (void *)v639;
                  if ((void)v639 != *((void *)&v639 + 1))
                  {
                    uint64_t v438 = v642;
                    uint64_t v439 = *((void *)&v643 + 1);
                    int v440 = 0x7FFFFFFF;
                    uint64_t v441 = (void *)v639;
                    uint64_t v442 = (uint64_t *)*((void *)&v637 + 1);
                    do
                    {
                      if (((*(void *)(v642 + ((*v441 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v441) & 1) == 0)
                      {
                        uint64_t v443 = *(void *)v637 + (*v441 << 6);
                        uint64_t v444 = *(void **)(v443 + 32);
                        uint64_t v445 = *(void **)(v443 + 40);
                        while (v444 != v445)
                        {
                          if (((*(void *)(*((void *)&v643 + 1) + ((*v444 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v444) & 1) == 0
                            && *(_DWORD *)(**((void **)&v637 + 1) + 4 * v444[1]) < v440)
                          {
                            int v440 = *(_DWORD *)(**((void **)&v637 + 1) + 4 * v444[1]);
                          }
                          v444 += 2;
                        }
                      }
                      ++v441;
                    }
                    while (v441 != *((void **)&v639 + 1));
                    uint64_t v515 = *(void *)v637;
                    do
                    {
                      uint64_t v516 = v515 + (*v436 << 6);
                      long long v517 = *(void **)(v516 + 32);
                      long long v518 = *(void **)(v516 + 40);
                      if (v517 != v518)
                      {
                        if ((*(void *)(v438 + ((*v436 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v436))
                        {
                          uint64_t v519 = *v442;
                          do
                          {
                            uint64_t v520 = v517[1];
                            int v521 = *(_DWORD *)(v519 + 4 * v520);
                            *(_DWORD *)(v519 + 4 * v520) = v521 + v440;
                            if (((*(void *)(v439 + ((*v517 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v517) & 1) == 0) {
                              *(_DWORD *)(v519 + 4 * v520) = v521;
                            }
                            v517 += 2;
                          }
                          while (v517 != v518);
                        }
                        else
                        {
                          long long v522 = (void *)*((void *)&v637 + 1);
                          do
                          {
                            if (((*(void *)(v439 + ((*v517 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v517) & 1) == 0) {
                              *(_DWORD *)(*v522 + 4 * v517[1]) -= v440;
                            }
                            v517 += 2;
                          }
                          while (v517 != v518);
                        }
                      }
                      ++v436;
                    }
                    while (v436 != v437);
                  }
                  int v371 = 3;
                  goto LABEL_532;
                case 6:
                  goto LABEL_757;
                default:
                  exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
                  MEMORY[0x1C87861F0](exception, "Failed to handle step code!");
                  goto LABEL_833;
              }
              goto LABEL_819;
            }
          }
        }
        else
        {
          uint64_t v335 = 0;
          uint64_t v336 = (unint64_t *)(8 * v332);
          *(void *)(8 * v332) = v328;
          uint64_t v330 = 8 * v332 + 8;
          int64_t v337 = v323 - v326;
          if (v323 == v326) {
            goto LABEL_492;
          }
        }
        unint64_t v346 = v337 - 8;
        if (v346 >= 0x168)
        {
          unint64_t v349 = (v323 - 8 - v326) & 0xFFFFFFFFFFFFFFF8;
          if (&v335[v323 - v326 - 8 - v349] > &v335[v323 - v326 - 8])
          {
            uint64_t v347 = v323;
          }
          else if (&v323[-v349 - 8] > v323 - 8)
          {
            uint64_t v347 = v323;
          }
          else if ((unint64_t)(v326 - v335) >= 0x20)
          {
            uint64_t v355 = (v346 >> 3) + 1;
            uint64_t v356 = 8 * (v355 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v347 = &v323[-v356];
            uint64_t v336 = (unint64_t *)((char *)v336 - v356);
            uint64_t v357 = &v335[8 * v332 - 16];
            uint64_t v358 = v323 - 16;
            uint64_t v359 = v355 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v360 = *(_OWORD *)v358;
              *(v357 - 1) = *((_OWORD *)v358 - 1);
              *uint64_t v357 = v360;
              v357 -= 2;
              v358 -= 32;
              v359 -= 4;
            }
            while (v359);
            if (v355 == (v355 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_492;
            }
          }
          else
          {
            uint64_t v347 = v323;
          }
        }
        else
        {
          uint64_t v347 = v323;
        }
        do
        {
          unint64_t v348 = *((void *)v347 - 1);
          v347 -= 8;
          *--uint64_t v336 = v348;
        }
        while (v347 != v326);
        goto LABEL_492;
      }
      break;
    }
    if (*((void *)v331 + 5) == *((void *)v331 + 4)) {
      goto LABEL_462;
    }
    if (v617 < v325)
    {
      *(void *)uint64_t v617 = v328;
      uint64_t v338 = (uint64_t)(v617 + 8);
LABEL_506:
      *((void *)&v639 + 1) = v338;
      uint64_t v617 = (char *)v338;
      goto LABEL_462;
    }
    uint64_t v339 = (v617 - v324) >> 3;
    unint64_t v340 = v339 + 1;
    if ((unint64_t)(v339 + 1) >> 61) {
LABEL_836:
    }
      sub_1C494A220();
    if ((v325 - v324) >> 2 > v340) {
      unint64_t v340 = (v325 - v324) >> 2;
    }
    if ((unint64_t)(v325 - v324) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v341 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v341 = v340;
    }
    if (v341)
    {
      if (v341 >> 61) {
LABEL_834:
      }
        sub_1C4949AA8();
      uint64_t v342 = operator new(8 * v341);
      uint64_t v343 = v617;
      uint64_t v344 = (unint64_t *)&v342[8 * v339];
      *uint64_t v344 = v328;
      uint64_t v338 = (uint64_t)(v344 + 1);
      int64_t v345 = v617 - v324;
      if (v617 == v324) {
        goto LABEL_503;
      }
    }
    else
    {
      uint64_t v342 = 0;
      uint64_t v343 = v617;
      uint64_t v344 = (unint64_t *)(8 * v339);
      *(void *)(8 * v339) = v328;
      uint64_t v338 = 8 * v339 + 8;
      int64_t v345 = v617 - v324;
      if (v617 == v324) {
        goto LABEL_503;
      }
    }
    unint64_t v350 = v345 - 8;
    if (v350 >= 0x168)
    {
      uint64_t v353 = v343 - 8;
      unint64_t v354 = (v353 - v324) & 0xFFFFFFFFFFFFFFF8;
      if (&v342[v617 - v324 - 8 - v354] > &v342[v617 - v324 - 8])
      {
        uint64_t v351 = v617;
      }
      else if (&v353[-v354] > v353)
      {
        uint64_t v351 = v617;
      }
      else if ((unint64_t)(v324 - v342) >= 0x20)
      {
        uint64_t v361 = (v350 >> 3) + 1;
        uint64_t v362 = 8 * (v361 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v351 = &v617[-v362];
        uint64_t v344 = (unint64_t *)((char *)v344 - v362);
        uint64_t v363 = &v342[8 * v339 - 16];
        uint64_t v364 = v617 - 16;
        uint64_t v365 = v361 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v366 = *(_OWORD *)v364;
          *(v363 - 1) = *((_OWORD *)v364 - 1);
          *uint64_t v363 = v366;
          v363 -= 2;
          v364 -= 32;
          v365 -= 4;
        }
        while (v365);
        if (v361 == (v361 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_503;
        }
      }
      else
      {
        uint64_t v351 = v617;
      }
    }
    else
    {
      uint64_t v351 = v343;
    }
    do
    {
      unint64_t v352 = *((void *)v351 - 1);
      v351 -= 8;
      *--uint64_t v344 = v352;
    }
    while (v351 != v324);
LABEL_503:
    uint64_t v325 = &v342[8 * v341];
    *(void *)&long long v639 = v344;
    *(void *)&long long v640 = v325;
    if (v324) {
      operator delete(v324);
    }
    uint64_t v324 = (char *)v344;
    goto LABEL_506;
  }
LABEL_821:
  sub_1C494AC4C((uint64_t)&v634, v635);
}

void sub_1C4B154E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56)
{
  sub_1C4B1B740(&a40);
  if (a21)
  {
    operator delete(a21);
    int v56 = __p;
    if (!__p)
    {
LABEL_4:
      sub_1C4B15770(&a27);
      if (a34)
      {
        a35 = (uint64_t)a34;
        operator delete(a34);
      }
      sub_1C494AC4C((uint64_t)&a37, a38);
      sub_1C496B66C(a10);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    int v56 = __p;
    if (!__p) {
      goto LABEL_4;
    }
  }
  operator delete(v56);
  goto LABEL_4;
}

void sub_1C4B156E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (!a24) {
    JUMPOUT(0x1C4B15630);
  }
  JUMPOUT(0x1C4B15628);
}

void sub_1C4B156F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (!a34) {
    JUMPOUT(0x1C4B15648);
  }
  JUMPOUT(0x1C4B15640);
}

void sub_1C4B15714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (!a24) {
    JUMPOUT(0x1C4B15630);
  }
  JUMPOUT(0x1C4B15628);
}

void sub_1C4B15724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (!a24) {
    JUMPOUT(0x1C4B15630);
  }
  JUMPOUT(0x1C4B15628);
}

void sub_1C4B15734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (!a24) {
    JUMPOUT(0x1C4B15630);
  }
  JUMPOUT(0x1C4B15628);
}

void sub_1C4B15744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (!a24) {
    JUMPOUT(0x1C4B15630);
  }
  JUMPOUT(0x1C4B15628);
}

void **sub_1C4B15770(void **a1)
{
  unint64_t v2 = a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (char *)*a1;
  if (*a1)
  {
    unint64_t v4 = (char *)a1[1];
    unint64_t v5 = *a1;
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 4);
        if (v6)
        {
          *((void *)v4 - 3) = v6;
          operator delete(v6);
        }
        uint64_t v7 = (void *)*((void *)v4 - 8);
        if (v7)
        {
          *((void *)v4 - 7) = v7;
          operator delete(v7);
        }
        v4 -= 64;
      }
      while (v4 != v3);
      unint64_t v5 = *a1;
    }
    a1[1] = v3;
    operator delete(v5);
  }
  return a1;
}

uint64_t **sub_1C4B15804(uint64_t **a1, uint64_t **a2)
{
  uint64_t v167 = *MEMORY[0x1E4F143B8];
  a1[1] = 0;
  unint64_t v3 = (char **)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  *(_OWORD *)(a1 + 7) = 0u;
  uint64_t v4 = (uint64_t)(a1 + 7);
  *(_OWORD *)(a1 + 9) = 0u;
  *((_DWORD *)a1 + 22) = 1065353216;
  *((_OWORD *)a1 + 6) = 0u;
  uint64_t v138 = (uint64_t)(a1 + 12);
  *((_OWORD *)a1 + 7) = 0u;
  *(_OWORD *)(a1 + 17) = 0u;
  uint64_t v137 = (uint64_t)(a1 + 17);
  *((_DWORD *)a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 19) = 0u;
  *((_DWORD *)a1 + 42) = 1065353216;
  *((_OWORD *)a1 + 11) = 0u;
  uint64_t v136 = (uint64_t)(a1 + 22);
  *((_OWORD *)a1 + 12) = 0u;
  *((_DWORD *)a1 + 52) = 1065353216;
  *(_OWORD *)(a1 + 27) = 0u;
  uint64_t v135 = (uint64_t)(a1 + 27);
  *(_OWORD *)(a1 + 29) = 0u;
  *((_DWORD *)a1 + 62) = 1065353216;
  uint64_t v134 = (uint64_t)(a1 + 32);
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_DWORD *)a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 37) = 0u;
  *(_OWORD *)(a1 + 39) = 0u;
  uint64_t v142 = a1 + 37;
  *((_DWORD *)a1 + 82) = 1065353216;
  uint64_t v141 = a1 + 42;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_DWORD *)a1 + 92) = 1065353216;
  *(_OWORD *)(a1 + 47) = 0u;
  *(_OWORD *)(a1 + 49) = 0u;
  uint64_t v144 = a1 + 47;
  *((_DWORD *)a1 + 102) = 1065353216;
  if (a1 != a2)
  {
    unint64_t v5 = (uint64_t *)(a2 + 1);
    uint64_t v6 = *a2;
    if (*a2 != (uint64_t *)(a2 + 1))
    {
      while (1)
      {
        int64_t v8 = (char *)operator new(0x40uLL);
        float v9 = v8;
        *(void *)&long long __dst = v8;
        *((void *)&__dst + 1) = v3;
        LOBYTE(v161) = 0;
        size_t v10 = v8 + 32;
        if (*((char *)v6 + 55) < 0)
        {
          sub_1C4949ADC(v8 + 32, (void *)v6[4], v6[5]);
        }
        else
        {
          long long v11 = *((_OWORD *)v6 + 2);
          *((void *)v8 + 6) = v6[6];
          *size_t v10 = v11;
        }
        *((_DWORD *)v9 + 14) = *((_DWORD *)v6 + 14);
        uint64_t v12 = *v3;
        float v13 = v3;
        int v14 = v3;
        if (*v3) {
          break;
        }
LABEL_65:
        *(void *)float v9 = 0;
        *((void *)v9 + 1) = 0;
        *((void *)v9 + 2) = v13;
        char *v14 = v9;
        size_t v26 = (uint64_t *)**a1;
        if (v26) {
          goto LABEL_66;
        }
LABEL_67:
        sub_1C4949FD4(a1[1], (uint64_t *)v9);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
        unint64_t v27 = (uint64_t *)v6[1];
        if (v27)
        {
          do
          {
            size_t v28 = v27;
            unint64_t v27 = (uint64_t *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            size_t v28 = (uint64_t *)v6[2];
            BOOL v47 = *v28 == (void)v6;
            uint64_t v6 = v28;
          }
          while (!v47);
        }
        uint64_t v6 = v28;
        if (v28 == v5) {
          goto LABEL_3;
        }
      }
      int v15 = v9[55];
      if (v15 >= 0) {
        size_t v16 = v9[55];
      }
      else {
        size_t v16 = *((void *)v9 + 5);
      }
      if (v15 < 0) {
        size_t v10 = (_OWORD *)*((void *)v9 + 4);
      }
      do
      {
        while (1)
        {
          float v13 = (char **)v12;
          uint64_t v19 = (const void *)*((void *)v12 + 4);
          uint64_t v17 = v12 + 32;
          int v18 = v19;
          int v20 = *((char *)v17 + 23);
          if (v20 >= 0) {
            size_t v21 = *((unsigned __int8 *)v17 + 23);
          }
          else {
            size_t v21 = v17[1];
          }
          if (v20 >= 0) {
            size_t v22 = v17;
          }
          else {
            size_t v22 = v18;
          }
          if (v21 >= v16) {
            size_t v23 = v16;
          }
          else {
            size_t v23 = v21;
          }
          int v24 = memcmp(v10, v22, v23);
          BOOL v25 = v16 < v21;
          if (v24) {
            BOOL v25 = v24 < 0;
          }
          if (!v25) {
            break;
          }
          uint64_t v12 = *v13;
          int v14 = v13;
          if (!*v13) {
            goto LABEL_65;
          }
        }
        uint64_t v12 = v13[1];
      }
      while (v12);
      int v14 = v13 + 1;
      *(void *)float v9 = 0;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = v13;
      v13[1] = v9;
      size_t v26 = (uint64_t *)**a1;
      if (!v26) {
        goto LABEL_67;
      }
LABEL_66:
      *a1 = v26;
      float v9 = *v14;
      goto LABEL_67;
    }
  }
LABEL_3:
  HIBYTE(v161) = 1;
  LOWORD(__dst) = 123;
  *(void *)&long long v156 = &__dst;
  unint64_t v143 = a1;
  *((_DWORD *)a1 + 6) = *((_DWORD *)sub_1C4949E58(a1, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v156)
                        + 14);
  if (SHIBYTE(v161) < 0) {
    operator delete((void *)__dst);
  }
  HIBYTE(v161) = 1;
  LOWORD(__dst) = 125;
  *(void *)&long long v156 = &__dst;
  *((_DWORD *)a1 + 7) = *((_DWORD *)sub_1C4949E58(a1, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v156)
                        + 14);
  if (SHIBYTE(v161) < 0) {
    operator delete((void *)__dst);
  }
  HIBYTE(v161) = 1;
  LOWORD(__dst) = 124;
  *(void *)&long long v156 = &__dst;
  *((_DWORD *)a1 + 8) = *((_DWORD *)sub_1C4949E58(a1, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v156)
                        + 14);
  if (SHIBYTE(v161) < 0) {
    operator delete((void *)__dst);
  }
  HIBYTE(v161) = 5;
  strcpy((char *)&__dst, "\\sqrt");
  *(void *)&long long v156 = &__dst;
  *((_DWORD *)a1 + 9) = *((_DWORD *)sub_1C4949E58(a1, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v156)
                        + 14);
  if (SHIBYTE(v161) < 0) {
    operator delete((void *)__dst);
  }
  HIBYTE(v161) = 1;
  LOWORD(__dst) = 91;
  *(void *)&long long v156 = &__dst;
  *((_DWORD *)a1 + 10) = *((_DWORD *)sub_1C4949E58(a1, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v156)
                         + 14);
  if (SHIBYTE(v161) < 0) {
    operator delete((void *)__dst);
  }
  LODWORD(__dst) = *((_DWORD *)a1 + 6);
  char v158 = 1;
  strcpy((char *)&v156, "[");
  v153[0] = &v156;
  DWORD1(__dst) = *((_DWORD *)sub_1C4949E58(a1, (const void **)&v156, (uint64_t)&unk_1C4C39B40, (_OWORD **)v153) + 14);
  char v155 = 14;
  strcpy((char *)v153, "\\begin{matrix}");
  *(void *)&long long v164 = v153;
  uint64_t v133 = (int *)(a1 + 3);
  DWORD2(__dst) = *((_DWORD *)sub_1C4949E58(a1, (const void **)v153, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v164) + 14);
  char v166 = 15;
  strcpy((char *)&v164, "\\begin{aligned}");
  qmemcpy(v140, "aligned}\\begin{a{matrix}\\begin{m", sizeof(v140));
  v163[0] = &v164;
  HIDWORD(__dst) = *((_DWORD *)sub_1C4949E58(a1, (const void **)&v164, (uint64_t)&unk_1C4C39B40, (_OWORD **)v163) + 14);
  HIBYTE(v163[2]) = 16;
  strcpy((char *)v163, "\\begin{array}{l}");
  *(void *)std::string __p = v163;
  LODWORD(v161) = *((_DWORD *)sub_1C4949E58(a1, v163, (uint64_t)&unk_1C4C39B40, (_OWORD **)__p) + 14);
  char v152 = 17;
  qmemcpy(v139, "\\begin{array}{lr\\begin{array}{l}", sizeof(v139));
  strcpy(__p, "\\begin{array}{lr}");
  v149[0] = __p;
  HIDWORD(v161) = *((_DWORD *)sub_1C4949E58(a1, (const void **)__p, (uint64_t)&unk_1C4C39B40, (_OWORD **)v149) + 14);
  sub_1C4B1B7AC(v4, (int *)&__dst, v162);
  if (v152 < 0)
  {
    operator delete(*(void **)__p);
    if ((SHIBYTE(v163[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((v166 & 0x80000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_246;
    }
  }
  else if ((SHIBYTE(v163[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete((void *)v163[0]);
  if ((v166 & 0x80000000) == 0)
  {
LABEL_16:
    if ((v155 & 0x80000000) == 0) {
      goto LABEL_17;
    }
LABEL_247:
    operator delete(v153[0]);
    if ((v158 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_248;
  }
LABEL_246:
  operator delete((void *)v164);
  if (v155 < 0) {
    goto LABEL_247;
  }
LABEL_17:
  if ((v158 & 0x80000000) == 0) {
    goto LABEL_18;
  }
LABEL_248:
  operator delete((void *)v156);
LABEL_18:
  LODWORD(v163[0]) = *((_DWORD *)a1 + 7);
  HIBYTE(v161) = 1;
  LOWORD(__dst) = 93;
  *(void *)&long long v156 = &__dst;
  HIDWORD(v163[0]) = *((_DWORD *)sub_1C4949E58(a1, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v156) + 14);
  char v158 = 12;
  strcpy((char *)&v156, "\\end{matrix}");
  v153[0] = &v156;
  LODWORD(v163[1]) = *((_DWORD *)sub_1C4949E58(a1, (const void **)&v156, (uint64_t)&unk_1C4C39B40, (_OWORD **)v153) + 14);
  char v155 = 13;
  strcpy((char *)v153, "\\end{aligned}");
  *(void *)&long long v164 = v153;
  HIDWORD(v163[1]) = *((_DWORD *)sub_1C4949E58(a1, (const void **)v153, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v164) + 14);
  char v166 = 11;
  strcpy((char *)&v164, "\\end{array}");
  *(void *)std::string __p = &v164;
  LODWORD(v163[2]) = *((_DWORD *)sub_1C4949E58(a1, (const void **)&v164, (uint64_t)&unk_1C4C39B40, (_OWORD **)__p) + 14);
  sub_1C4B1B7AC(v138, (int *)v163, (int *)&v163[2] + 1);
  if (v166 < 0)
  {
    operator delete((void *)v164);
    if ((v155 & 0x80000000) == 0)
    {
LABEL_20:
      if ((v158 & 0x80000000) == 0) {
        goto LABEL_21;
      }
LABEL_251:
      operator delete((void *)v156);
      uint64_t v131 = *(void *)"\\end{aligned}";
      uint64_t v132 = *(void *)"\\end{array}";
      if ((SHIBYTE(v161) & 0x80000000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_252;
    }
  }
  else if ((v155 & 0x80000000) == 0)
  {
    goto LABEL_20;
  }
  operator delete(v153[0]);
  if (v158 < 0) {
    goto LABEL_251;
  }
LABEL_21:
  uint64_t v131 = *(void *)"\\end{aligned}";
  uint64_t v132 = *(void *)"\\end{array}";
  if ((SHIBYTE(v161) & 0x80000000) == 0) {
    goto LABEL_22;
  }
LABEL_252:
  operator delete((void *)__dst);
LABEL_22:
  HIBYTE(v161) = 14;
  *(void *)&long long __dst = v140[3];
  *(void *)((char *)&__dst + 6) = v140[2];
  BYTE14(__dst) = 0;
  *(void *)&long long v156 = &__dst;
  LODWORD(v163[0]) = *((_DWORD *)sub_1C4949E58(a1, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v156) + 14);
  char v158 = 15;
  *(void *)&long long v156 = v140[1];
  *(void *)((char *)&v156 + 7) = v140[0];
  HIBYTE(v156) = 0;
  v153[0] = &v156;
  HIDWORD(v163[0]) = *((_DWORD *)sub_1C4949E58(a1, (const void **)&v156, (uint64_t)&unk_1C4C39B40, (_OWORD **)v153) + 14);
  char v155 = 16;
  *(_OWORD *)unint64_t v153 = v139[1];
  char v154 = 0;
  *(void *)&long long v164 = v153;
  LODWORD(v163[1]) = *((_DWORD *)sub_1C4949E58(a1, (const void **)v153, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v164) + 14);
  char v166 = 17;
  long long v164 = v139[0];
  __int16 v165 = 125;
  *(void *)std::string __p = &v164;
  HIDWORD(v163[1]) = *((_DWORD *)sub_1C4949E58(a1, (const void **)&v164, (uint64_t)&unk_1C4C39B40, (_OWORD **)__p) + 14);
  sub_1C4B1B7AC(v137, (int *)v163, (int *)&v163[2]);
  if (v166 < 0)
  {
    operator delete((void *)v164);
    if ((v155 & 0x80000000) == 0)
    {
LABEL_24:
      if ((v158 & 0x80000000) == 0) {
        goto LABEL_25;
      }
LABEL_255:
      operator delete((void *)v156);
      if ((SHIBYTE(v161) & 0x80000000) == 0) {
        goto LABEL_26;
      }
      goto LABEL_256;
    }
  }
  else if ((v155 & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(v153[0]);
  if (v158 < 0) {
    goto LABEL_255;
  }
LABEL_25:
  if ((SHIBYTE(v161) & 0x80000000) == 0) {
    goto LABEL_26;
  }
LABEL_256:
  operator delete((void *)__dst);
LABEL_26:
  HIBYTE(v161) = 1;
  LOWORD(__dst) = 38;
  *(void *)&long long v156 = &__dst;
  LODWORD(v153[0]) = *((_DWORD *)sub_1C4949E58(a1, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v156) + 14);
  sub_1C4B1B7AC(v136, (int *)v153, (int *)v153 + 1);
  if (SHIBYTE(v161) < 0) {
    operator delete((void *)__dst);
  }
  HIBYTE(v161) = 1;
  LOWORD(__dst) = 94;
  *(void *)&long long v156 = &__dst;
  LODWORD(v164) = *((_DWORD *)sub_1C4949E58(a1, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v156) + 14);
  char v158 = 1;
  strcpy((char *)&v156, "_");
  v153[0] = &v156;
  DWORD1(v164) = *((_DWORD *)sub_1C4949E58(a1, (const void **)&v156, (uint64_t)&unk_1C4C39B40, (_OWORD **)v153) + 14);
  char v155 = 5;
  strcpy((char *)v153, "\\frac");
  v163[0] = v153;
  DWORD2(v164) = *((_DWORD *)sub_1C4949E58(a1, (const void **)v153, (uint64_t)&unk_1C4C39B40, (_OWORD **)v163) + 14);
  sub_1C4B1B7AC(v135, (int *)&v164, (int *)&v164 + 3);
  if ((v155 & 0x80000000) == 0)
  {
    if ((v158 & 0x80000000) == 0) {
      goto LABEL_30;
    }
LABEL_258:
    operator delete((void *)v156);
    if ((SHIBYTE(v161) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_259;
  }
  operator delete(v153[0]);
  if (v158 < 0) {
    goto LABEL_258;
  }
LABEL_30:
  if ((SHIBYTE(v161) & 0x80000000) == 0) {
    goto LABEL_31;
  }
LABEL_259:
  operator delete((void *)__dst);
LABEL_31:
  char v158 = 1;
  strcpy((char *)&v156, "+");
  v153[0] = &v156;
  LODWORD(__dst) = *((_DWORD *)sub_1C4949E58(a1, (const void **)&v156, (uint64_t)&unk_1C4C39B40, (_OWORD **)v153) + 14);
  char v155 = 1;
  LOWORD(v153[0]) = 45;
  *(void *)&long long v164 = v153;
  DWORD1(__dst) = *((_DWORD *)sub_1C4949E58(a1, (const void **)v153, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v164) + 14);
  char v166 = 6;
  strcpy((char *)&v164, "\\times");
  v163[0] = &v164;
  DWORD2(__dst) = *((_DWORD *)sub_1C4949E58(a1, (const void **)&v164, (uint64_t)&unk_1C4C39B40, (_OWORD **)v163) + 14);
  HIBYTE(v163[2]) = 4;
  strcpy((char *)v163, "\\ast");
  *(void *)std::string __p = v163;
  HIDWORD(__dst) = *((_DWORD *)sub_1C4949E58(a1, v163, (uint64_t)&unk_1C4C39B40, (_OWORD **)__p) + 14);
  char v152 = 5;
  strcpy(__p, "\\cdot");
  v149[0] = __p;
  LODWORD(v161) = *((_DWORD *)sub_1C4949E58(a1, (const void **)__p, (uint64_t)&unk_1C4C39B40, (_OWORD **)v149) + 14);
  char v150 = 1;
  LOWORD(v149[0]) = 47;
  v147[0] = v149;
  HIDWORD(v161) = *((_DWORD *)sub_1C4949E58(a1, (const void **)v149, (uint64_t)&unk_1C4C39B40, (_OWORD **)v147) + 14);
  char v148 = 4;
  strcpy((char *)v147, "\\div");
  v145[0] = v147;
  v162[0] = *((_DWORD *)sub_1C4949E58(a1, (const void **)v147, (uint64_t)&unk_1C4C39B40, (_OWORD **)v145) + 14);
  char v146 = 1;
  LOWORD(v145[0]) = 58;
  id v159 = v145;
  v162[1] = *((_DWORD *)sub_1C4949E58(a1, (const void **)v145, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v159) + 14);
  sub_1C4B1B7AC(v134, (int *)&__dst, (int *)v163);
  if (v146 < 0)
  {
    operator delete(v145[0]);
    if ((v148 & 0x80000000) == 0)
    {
LABEL_33:
      if ((v150 & 0x80000000) == 0) {
        goto LABEL_34;
      }
      goto LABEL_262;
    }
  }
  else if ((v148 & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(v147[0]);
  if ((v150 & 0x80000000) == 0)
  {
LABEL_34:
    if ((v152 & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_263;
  }
LABEL_262:
  operator delete(v149[0]);
  if ((v152 & 0x80000000) == 0)
  {
LABEL_35:
    if ((SHIBYTE(v163[2]) & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_264;
  }
LABEL_263:
  operator delete(*(void **)__p);
  if ((SHIBYTE(v163[2]) & 0x80000000) == 0)
  {
LABEL_36:
    if ((v166 & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_265;
  }
LABEL_264:
  operator delete((void *)v163[0]);
  if ((v166 & 0x80000000) == 0)
  {
LABEL_37:
    if ((v155 & 0x80000000) == 0) {
      goto LABEL_38;
    }
LABEL_266:
    operator delete(v153[0]);
    uint64_t v130 = (int *)(a1 + 4);
    if ((v158 & 0x80000000) == 0) {
      goto LABEL_39;
    }
LABEL_267:
    operator delete((void *)v156);
    goto LABEL_39;
  }
LABEL_265:
  operator delete((void *)v164);
  if (v155 < 0) {
    goto LABEL_266;
  }
LABEL_38:
  uint64_t v130 = (int *)(a1 + 4);
  if (v158 < 0) {
    goto LABEL_267;
  }
LABEL_39:
  for (uint64_t i = 0; i != 9; ++i)
  {
    while (1)
    {
      int v29 = off_1E64E3C10[i];
      size_t v30 = strlen(v29);
      if (v30 > 0x7FFFFFFFFFFFFFF7) {
        sub_1C4949B7C();
      }
      size_t v31 = v30;
      if (v30 >= 0x17)
      {
        uint64_t v36 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v30 | 7) != 0x17) {
          uint64_t v36 = v30 | 7;
        }
        uint64_t v37 = v36 + 1;
        p_dst = (long long *)operator new(v36 + 1);
        *((void *)&__dst + 1) = v31;
        unint64_t v161 = v37 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v161) = v30;
        p_dst = &__dst;
        if (!v30)
        {
          LOBYTE(__dst) = 0;
          uint64_t v33 = (uint64_t)*v3;
          uint64_t v34 = HIBYTE(v161);
          int v35 = SHIBYTE(v161);
          if (!*v3) {
            goto LABEL_75;
          }
          goto LABEL_86;
        }
      }
      memmove(p_dst, v29, v31);
      *((unsigned char *)p_dst + v31) = 0;
      uint64_t v33 = (uint64_t)*v3;
      uint64_t v34 = HIBYTE(v161);
      int v35 = SHIBYTE(v161);
      if (!*v3) {
        goto LABEL_75;
      }
LABEL_86:
      size_t v38 = v35 >= 0 ? v34 : *((void *)&__dst + 1);
      size_t v39 = v35 >= 0 ? &__dst : (long long *)__dst;
      int v40 = v3;
      do
      {
        int v41 = *(char *)(v33 + 55);
        if (v41 >= 0) {
          size_t v42 = *(unsigned __int8 *)(v33 + 55);
        }
        else {
          size_t v42 = *(void *)(v33 + 40);
        }
        if (v41 >= 0) {
          uint64_t v43 = (const void *)(v33 + 32);
        }
        else {
          uint64_t v43 = *(const void **)(v33 + 32);
        }
        if (v38 >= v42) {
          size_t v44 = v42;
        }
        else {
          size_t v44 = v38;
        }
        int v45 = memcmp(v43, v39, v44);
        BOOL v46 = v42 < v38;
        if (v45) {
          BOOL v46 = v45 < 0;
        }
        BOOL v47 = !v46;
        if (v46) {
          unint64_t v48 = (uint64_t *)(v33 + 8);
        }
        else {
          unint64_t v48 = (uint64_t *)v33;
        }
        if (v47) {
          int v40 = (char **)v33;
        }
        uint64_t v33 = *v48;
      }
      while (*v48);
      if (v40 != v3)
      {
        int v51 = v40[4];
        uint64_t v50 = v40 + 4;
        uint64_t v49 = v51;
        int v52 = *((char *)v50 + 23);
        if (v52 >= 0) {
          size_t v53 = *((unsigned __int8 *)v50 + 23);
        }
        else {
          size_t v53 = v50[1];
        }
        if (v52 >= 0) {
          int v54 = (char *)v50;
        }
        else {
          int v54 = v49;
        }
        if (v53 >= v38) {
          size_t v55 = v38;
        }
        else {
          size_t v55 = v53;
        }
        int v56 = memcmp(v39, v54, v55);
        BOOL v57 = v38 >= v53;
        if (v56) {
          BOOL v57 = v56 >= 0;
        }
        if (v57)
        {
          *(void *)&long long v156 = &__dst;
          uint64_t v58 = sub_1C494A238(v143, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (long long **)&v156);
          sub_1C4ACB434((uint64_t)v142, (int *)v58 + 14, (_DWORD *)v58 + 14);
          LOBYTE(v35) = HIBYTE(v161);
        }
      }
LABEL_75:
      if ((v35 & 0x80) != 0) {
        break;
      }
      if (++i == 9) {
        goto LABEL_126;
      }
    }
    operator delete((void *)__dst);
  }
LABEL_126:
  for (uint64_t j = 0; j != 9; ++j)
  {
    while (1)
    {
      int v60 = off_1E64E3C58[j];
      size_t v61 = strlen(v60);
      if (v61 > 0x7FFFFFFFFFFFFFF7) {
        sub_1C4949B7C();
      }
      size_t v62 = v61;
      if (v61 >= 0x17)
      {
        uint64_t v67 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v61 | 7) != 0x17) {
          uint64_t v67 = v61 | 7;
        }
        uint64_t v68 = v67 + 1;
        unint64_t v63 = (long long *)operator new(v67 + 1);
        *((void *)&__dst + 1) = v62;
        unint64_t v161 = v68 | 0x8000000000000000;
        *(void *)&long long __dst = v63;
      }
      else
      {
        HIBYTE(v161) = v61;
        unint64_t v63 = &__dst;
        if (!v61)
        {
          LOBYTE(__dst) = 0;
          uint64_t v64 = (uint64_t)*v3;
          uint64_t v65 = HIBYTE(v161);
          int v66 = SHIBYTE(v161);
          if (!*v3) {
            goto LABEL_127;
          }
          goto LABEL_138;
        }
      }
      memmove(v63, v60, v62);
      *((unsigned char *)v63 + v62) = 0;
      uint64_t v64 = (uint64_t)*v3;
      uint64_t v65 = HIBYTE(v161);
      int v66 = SHIBYTE(v161);
      if (!*v3) {
        goto LABEL_127;
      }
LABEL_138:
      size_t v69 = v66 >= 0 ? v65 : *((void *)&__dst + 1);
      unint64_t v70 = v66 >= 0 ? &__dst : (long long *)__dst;
      uint64_t v71 = v3;
      do
      {
        int v72 = *(char *)(v64 + 55);
        if (v72 >= 0) {
          size_t v73 = *(unsigned __int8 *)(v64 + 55);
        }
        else {
          size_t v73 = *(void *)(v64 + 40);
        }
        if (v72 >= 0) {
          int64_t v74 = (const void *)(v64 + 32);
        }
        else {
          int64_t v74 = *(const void **)(v64 + 32);
        }
        if (v69 >= v73) {
          size_t v75 = v73;
        }
        else {
          size_t v75 = v69;
        }
        int v76 = memcmp(v74, v70, v75);
        BOOL v77 = v73 < v69;
        if (v76) {
          BOOL v77 = v76 < 0;
        }
        BOOL v78 = !v77;
        if (v77) {
          uint64_t v79 = (uint64_t *)(v64 + 8);
        }
        else {
          uint64_t v79 = (uint64_t *)v64;
        }
        if (v78) {
          uint64_t v71 = (char **)v64;
        }
        uint64_t v64 = *v79;
      }
      while (*v79);
      if (v71 != v3)
      {
        long long v82 = v71[4];
        uint64_t v81 = v71 + 4;
        uint64_t v80 = v82;
        int v83 = *((char *)v81 + 23);
        if (v83 >= 0) {
          size_t v84 = *((unsigned __int8 *)v81 + 23);
        }
        else {
          size_t v84 = v81[1];
        }
        if (v83 >= 0) {
          uint64_t v85 = (char *)v81;
        }
        else {
          uint64_t v85 = v80;
        }
        if (v84 >= v69) {
          size_t v86 = v69;
        }
        else {
          size_t v86 = v84;
        }
        int v87 = memcmp(v70, v85, v86);
        BOOL v88 = v69 >= v84;
        if (v87) {
          BOOL v88 = v87 >= 0;
        }
        if (v88)
        {
          *(void *)&long long v156 = &__dst;
          uint64_t v89 = sub_1C494A238(v143, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (long long **)&v156);
          sub_1C4ACB434((uint64_t)v141, (int *)v89 + 14, (_DWORD *)v89 + 14);
          LOBYTE(v66) = HIBYTE(v161);
        }
      }
LABEL_127:
      if ((v66 & 0x80) != 0) {
        break;
      }
      if (++j == 9) {
        goto LABEL_178;
      }
    }
    operator delete((void *)__dst);
  }
LABEL_178:
  unint64_t v90 = v143;
  int v91 = *((_DWORD *)v143 + 7);
  *(void *)&long long __dst = v133;
  *((_DWORD *)sub_1C4ACC388((uint64_t)v144, v133, (uint64_t)&unk_1C4C39B40, (_DWORD **)&__dst) + 5) = v91;
  HIBYTE(v161) = 1;
  LOWORD(__dst) = 93;
  *(void *)&long long v156 = &__dst;
  int v92 = *((_DWORD *)sub_1C4949E58(v90, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v156) + 14);
  char v158 = 1;
  strcpy((char *)&v156, "[");
  v153[0] = &v156;
  v153[0] = sub_1C4949E58(v90, (const void **)&v156, (uint64_t)&unk_1C4C39B40, (_OWORD **)v153) + 7;
  *((_DWORD *)sub_1C4ACC388((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1C4C39B40, (_DWORD **)v153) + 5) = v92;
  if (v158 < 0)
  {
    operator delete((void *)v156);
    if (SHIBYTE(v161) < 0) {
      goto LABEL_269;
    }
  }
  else
  {
    if ((SHIBYTE(v161) & 0x80000000) == 0) {
      goto LABEL_180;
    }
LABEL_269:
    operator delete((void *)__dst);
  }
LABEL_180:
  HIBYTE(v161) = 12;
  strcpy((char *)&__dst, "\\end{matrix}");
  *(void *)&long long v156 = &__dst;
  int v93 = *((_DWORD *)sub_1C4949E58(v90, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v156) + 14);
  char v158 = 14;
  *(void *)&long long v156 = v140[3];
  *(void *)((char *)&v156 + 6) = v140[2];
  BYTE14(v156) = 0;
  v153[0] = &v156;
  v153[0] = sub_1C4949E58(v90, (const void **)&v156, (uint64_t)&unk_1C4C39B40, (_OWORD **)v153) + 7;
  *((_DWORD *)sub_1C4ACC388((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1C4C39B40, (_DWORD **)v153) + 5) = v93;
  if (v158 < 0)
  {
    operator delete((void *)v156);
    if (SHIBYTE(v161) < 0) {
      goto LABEL_271;
    }
  }
  else
  {
    if ((SHIBYTE(v161) & 0x80000000) == 0) {
      goto LABEL_182;
    }
LABEL_271:
    operator delete((void *)__dst);
  }
LABEL_182:
  HIBYTE(v161) = 13;
  *(void *)&long long __dst = v131;
  strcpy((char *)&__dst + 5, "aligned}");
  *(void *)&long long v156 = &__dst;
  int v94 = *((_DWORD *)sub_1C4949E58(v90, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v156) + 14);
  char v158 = 15;
  *(void *)&long long v156 = v140[1];
  *(void *)((char *)&v156 + 7) = v140[0];
  HIBYTE(v156) = 0;
  v153[0] = &v156;
  v153[0] = sub_1C4949E58(v90, (const void **)&v156, (uint64_t)&unk_1C4C39B40, (_OWORD **)v153) + 7;
  *((_DWORD *)sub_1C4ACC388((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1C4C39B40, (_DWORD **)v153) + 5) = v94;
  if (v158 < 0)
  {
    operator delete((void *)v156);
    if (SHIBYTE(v161) < 0) {
      goto LABEL_273;
    }
  }
  else
  {
    if ((SHIBYTE(v161) & 0x80000000) == 0) {
      goto LABEL_184;
    }
LABEL_273:
    operator delete((void *)__dst);
  }
LABEL_184:
  HIBYTE(v161) = 11;
  strcpy((char *)&__dst + 7, "ray}");
  *(void *)&long long __dst = v132;
  *(void *)&long long v156 = &__dst;
  int v95 = *((_DWORD *)sub_1C4949E58(v90, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v156) + 14);
  char v158 = 16;
  long long v156 = v139[1];
  LOBYTE(v157) = 0;
  v153[0] = &v156;
  v153[0] = sub_1C4949E58(v90, (const void **)&v156, (uint64_t)&unk_1C4C39B40, (_OWORD **)v153) + 7;
  *((_DWORD *)sub_1C4ACC388((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1C4C39B40, (_DWORD **)v153) + 5) = v95;
  if (v158 < 0)
  {
    operator delete((void *)v156);
    if (SHIBYTE(v161) < 0) {
      goto LABEL_275;
    }
  }
  else
  {
    if ((SHIBYTE(v161) & 0x80000000) == 0) {
      goto LABEL_186;
    }
LABEL_275:
    operator delete((void *)__dst);
  }
LABEL_186:
  HIBYTE(v161) = 11;
  strcpy((char *)&__dst + 7, "ray}");
  *(void *)&long long __dst = v132;
  *(void *)&long long v156 = &__dst;
  int v96 = *((_DWORD *)sub_1C4949E58(v90, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v156) + 14);
  char v158 = 17;
  long long v156 = v139[0];
  __int16 v157 = 125;
  v153[0] = &v156;
  v153[0] = sub_1C4949E58(v90, (const void **)&v156, (uint64_t)&unk_1C4C39B40, (_OWORD **)v153) + 7;
  *((_DWORD *)sub_1C4ACC388((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1C4C39B40, (_DWORD **)v153) + 5) = v96;
  if (v158 < 0)
  {
    operator delete((void *)v156);
    if (SHIBYTE(v161) < 0) {
      goto LABEL_277;
    }
  }
  else
  {
    if ((SHIBYTE(v161) & 0x80000000) == 0) {
      goto LABEL_188;
    }
LABEL_277:
    operator delete((void *)__dst);
  }
LABEL_188:
  HIBYTE(v161) = 1;
  LOWORD(__dst) = 41;
  *(void *)&long long v156 = &__dst;
  int v97 = *((_DWORD *)sub_1C4949E58(v90, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v156) + 14);
  char v158 = 1;
  strcpy((char *)&v156, "(");
  v153[0] = &v156;
  v153[0] = sub_1C4949E58(v90, (const void **)&v156, (uint64_t)&unk_1C4C39B40, (_OWORD **)v153) + 7;
  *((_DWORD *)sub_1C4ACC388((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1C4C39B40, (_DWORD **)v153) + 5) = v97;
  if (v158 < 0)
  {
    operator delete((void *)v156);
    if (SHIBYTE(v161) < 0) {
      goto LABEL_279;
    }
  }
  else
  {
    if ((SHIBYTE(v161) & 0x80000000) == 0) {
      goto LABEL_190;
    }
LABEL_279:
    operator delete((void *)__dst);
  }
LABEL_190:
  HIBYTE(v161) = 7;
  strcpy((char *)&__dst, "\\rbrack");
  *(void *)&long long v156 = &__dst;
  int v98 = *((_DWORD *)sub_1C4949E58(v90, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v156) + 14);
  char v158 = 7;
  strcpy((char *)&v156, "\\lbrack");
  v153[0] = &v156;
  v153[0] = sub_1C4949E58(v90, (const void **)&v156, (uint64_t)&unk_1C4C39B40, (_OWORD **)v153) + 7;
  *((_DWORD *)sub_1C4ACC388((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1C4C39B40, (_DWORD **)v153) + 5) = v98;
  if (v158 < 0)
  {
    operator delete((void *)v156);
    if (SHIBYTE(v161) < 0) {
      goto LABEL_281;
    }
  }
  else
  {
    if ((SHIBYTE(v161) & 0x80000000) == 0) {
      goto LABEL_192;
    }
LABEL_281:
    operator delete((void *)__dst);
  }
LABEL_192:
  HIBYTE(v161) = 7;
  strcpy((char *)&__dst, "\\rangle");
  *(void *)&long long v156 = &__dst;
  int v99 = *((_DWORD *)sub_1C4949E58(v90, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v156) + 14);
  char v158 = 7;
  strcpy((char *)&v156, "\\langle");
  v153[0] = &v156;
  v153[0] = sub_1C4949E58(v90, (const void **)&v156, (uint64_t)&unk_1C4C39B40, (_OWORD **)v153) + 7;
  *((_DWORD *)sub_1C4ACC388((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1C4C39B40, (_DWORD **)v153) + 5) = v99;
  if (v158 < 0)
  {
    operator delete((void *)v156);
    if (SHIBYTE(v161) < 0) {
      goto LABEL_283;
    }
  }
  else
  {
    if ((SHIBYTE(v161) & 0x80000000) == 0) {
      goto LABEL_194;
    }
LABEL_283:
    operator delete((void *)__dst);
  }
LABEL_194:
  HIBYTE(v161) = 6;
  strcpy((char *)&__dst, "\\rceil");
  *(void *)&long long v156 = &__dst;
  int v100 = *((_DWORD *)sub_1C4949E58(v90, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v156) + 14);
  char v158 = 6;
  strcpy((char *)&v156, "\\lceil");
  v153[0] = &v156;
  v153[0] = sub_1C4949E58(v90, (const void **)&v156, (uint64_t)&unk_1C4C39B40, (_OWORD **)v153) + 7;
  *((_DWORD *)sub_1C4ACC388((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1C4C39B40, (_DWORD **)v153) + 5) = v100;
  if (v158 < 0)
  {
    operator delete((void *)v156);
    if (SHIBYTE(v161) < 0) {
      goto LABEL_285;
    }
  }
  else
  {
    if ((SHIBYTE(v161) & 0x80000000) == 0) {
      goto LABEL_196;
    }
LABEL_285:
    operator delete((void *)__dst);
  }
LABEL_196:
  HIBYTE(v161) = 7;
  strcpy((char *)&__dst, "\\rfloor");
  *(void *)&long long v156 = &__dst;
  int v101 = *((_DWORD *)sub_1C4949E58(v90, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v156) + 14);
  char v158 = 7;
  strcpy((char *)&v156, "\\lfloor");
  v153[0] = &v156;
  v153[0] = sub_1C4949E58(v90, (const void **)&v156, (uint64_t)&unk_1C4C39B40, (_OWORD **)v153) + 7;
  *((_DWORD *)sub_1C4ACC388((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1C4C39B40, (_DWORD **)v153) + 5) = v101;
  if (v158 < 0)
  {
    operator delete((void *)v156);
    if (SHIBYTE(v161) < 0) {
      goto LABEL_287;
    }
  }
  else
  {
    if ((SHIBYTE(v161) & 0x80000000) == 0) {
      goto LABEL_198;
    }
LABEL_287:
    operator delete((void *)__dst);
  }
LABEL_198:
  HIBYTE(v161) = 7;
  strcpy((char *)&__dst, "\\rfloor");
  *(void *)&long long v156 = &__dst;
  int v102 = *((_DWORD *)sub_1C4949E58(v90, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v156) + 14);
  char v158 = 2;
  strcpy((char *)&v156, "\\{");
  v153[0] = &v156;
  v153[0] = sub_1C4949E58(v90, (const void **)&v156, (uint64_t)&unk_1C4C39B40, (_OWORD **)v153) + 7;
  *((_DWORD *)sub_1C4ACC388((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1C4C39B40, (_DWORD **)v153) + 5) = v102;
  if (v158 < 0)
  {
    operator delete((void *)v156);
    if ((SHIBYTE(v161) & 0x80000000) == 0) {
      goto LABEL_200;
    }
LABEL_289:
    operator delete((void *)__dst);
    goto LABEL_200;
  }
  if (SHIBYTE(v161) < 0) {
    goto LABEL_289;
  }
LABEL_200:
  int v103 = *v130;
  *(void *)&long long __dst = v130;
  *((_DWORD *)sub_1C4ACC388((uint64_t)v144, v130, (uint64_t)&unk_1C4C39B40, (_DWORD **)&__dst) + 5) = v103;
  HIBYTE(v161) = 6;
  strcpy((char *)&__dst, "\\left(");
  uint64_t v104 = (uint64_t)*v3;
  if (*v3)
  {
    uint64_t v105 = v3;
    do
    {
      unint64_t v106 = *(unsigned __int8 *)(v104 + 55);
      int v107 = (char)v106;
      if ((v106 & 0x80u) != 0) {
        unint64_t v106 = *(void *)(v104 + 40);
      }
      if (v107 >= 0) {
        uint64_t v108 = (const void *)(v104 + 32);
      }
      else {
        uint64_t v108 = *(const void **)(v104 + 32);
      }
      if (v106 >= 6) {
        size_t v109 = 6;
      }
      else {
        size_t v109 = v106;
      }
      BOOL v110 = v106 < 6;
      int v111 = memcmp(v108, &__dst, v109);
      BOOL v112 = v111 < 0;
      if (!v111) {
        BOOL v112 = v110;
      }
      BOOL v113 = !v112;
      if (v112) {
        float v114 = (uint64_t *)(v104 + 8);
      }
      else {
        float v114 = (uint64_t *)v104;
      }
      if (v113) {
        uint64_t v105 = (char **)v104;
      }
      uint64_t v104 = *v114;
    }
    while (*v114);
    if (v105 != v3)
    {
      double v117 = v105[4];
      double v116 = v105 + 4;
      uint64_t v115 = v117;
      unint64_t v118 = *((unsigned __int8 *)v116 + 23);
      int v119 = (char)v118;
      if ((v118 & 0x80u) != 0) {
        unint64_t v118 = v116[1];
      }
      if (v119 >= 0) {
        uint64_t v120 = (char *)v116;
      }
      else {
        uint64_t v120 = v115;
      }
      if (v118 >= 6) {
        size_t v121 = 6;
      }
      else {
        size_t v121 = v118;
      }
      BOOL v122 = v118 > 6;
      int v123 = memcmp(&__dst, v120, v121);
      BOOL v124 = v123 < 0;
      if (!v123) {
        BOOL v124 = v122;
      }
      if (!v124)
      {
        HIBYTE(v161) = 7;
        strcpy((char *)&__dst, "\\right)");
        *(void *)&long long v156 = &__dst;
        int v125 = *((_DWORD *)sub_1C4949E58(v90, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v156) + 14);
        char v158 = 6;
        strcpy((char *)&v156, "\\left(");
        v153[0] = &v156;
        v153[0] = sub_1C4949E58(v90, (const void **)&v156, (uint64_t)&unk_1C4C39B40, (_OWORD **)v153) + 7;
        *((_DWORD *)sub_1C4ACC388((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1C4C39B40, (_DWORD **)v153) + 5) = v125;
        if (v158 < 0)
        {
          operator delete((void *)v156);
          if (SHIBYTE(v161) < 0) {
            goto LABEL_291;
          }
        }
        else
        {
          if ((SHIBYTE(v161) & 0x80000000) == 0) {
            goto LABEL_233;
          }
LABEL_291:
          operator delete((void *)__dst);
        }
LABEL_233:
        HIBYTE(v161) = 7;
        strcpy((char *)&__dst, "\\right|");
        *(void *)&long long v156 = &__dst;
        int v126 = *((_DWORD *)sub_1C4949E58(v90, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v156) + 14);
        char v158 = 6;
        strcpy((char *)&v156, "\\left|");
        v153[0] = &v156;
        v153[0] = sub_1C4949E58(v90, (const void **)&v156, (uint64_t)&unk_1C4C39B40, (_OWORD **)v153) + 7;
        *((_DWORD *)sub_1C4ACC388((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1C4C39B40, (_DWORD **)v153) + 5) = v126;
        if (v158 < 0)
        {
          operator delete((void *)v156);
          if (SHIBYTE(v161) < 0) {
            goto LABEL_293;
          }
        }
        else
        {
          if ((SHIBYTE(v161) & 0x80000000) == 0) {
            goto LABEL_235;
          }
LABEL_293:
          operator delete((void *)__dst);
        }
LABEL_235:
        HIBYTE(v161) = 13;
        strcpy((char *)&__dst, "\\right\\rfloor");
        *(void *)&long long v156 = &__dst;
        int v127 = *((_DWORD *)sub_1C4949E58(v90, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v156) + 14);
        char v158 = 12;
        strcpy((char *)&v156, "\\left\\lfloor");
        v153[0] = &v156;
        v153[0] = sub_1C4949E58(v90, (const void **)&v156, (uint64_t)&unk_1C4C39B40, (_OWORD **)v153) + 7;
        *((_DWORD *)sub_1C4ACC388((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1C4C39B40, (_DWORD **)v153) + 5) = v127;
        if (v158 < 0)
        {
          operator delete((void *)v156);
          if (SHIBYTE(v161) < 0) {
            goto LABEL_295;
          }
        }
        else
        {
          if ((SHIBYTE(v161) & 0x80000000) == 0) {
            goto LABEL_237;
          }
LABEL_295:
          operator delete((void *)__dst);
        }
LABEL_237:
        HIBYTE(v161) = 12;
        strcpy((char *)&__dst, "\\right\\rceil");
        *(void *)&long long v156 = &__dst;
        int v128 = *((_DWORD *)sub_1C4949E58(v90, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v156) + 14);
        char v158 = 11;
        strcpy((char *)&v156, "\\left\\lceil");
        v153[0] = &v156;
        v153[0] = sub_1C4949E58(v90, (const void **)&v156, (uint64_t)&unk_1C4C39B40, (_OWORD **)v153) + 7;
        *((_DWORD *)sub_1C4ACC388((uint64_t)v144, (int *)v153[0], (uint64_t)&unk_1C4C39B40, (_DWORD **)v153) + 5) = v128;
        if (v158 < 0)
        {
          operator delete((void *)v156);
          if (SHIBYTE(v161) < 0) {
            goto LABEL_297;
          }
        }
        else
        {
          if ((SHIBYTE(v161) & 0x80000000) == 0) {
            goto LABEL_239;
          }
LABEL_297:
          operator delete((void *)__dst);
        }
      }
    }
  }
LABEL_239:
  HIBYTE(v161) = 2;
  strcpy((char *)&__dst, "\\\\"");
  *(void *)&long long v156 = &__dst;
  *((_DWORD *)v90 + 11) = *((_DWORD *)sub_1C4949E58(v90, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v156)+ 14);
  if (SHIBYTE(v161) < 0) {
    operator delete((void *)__dst);
  }
  HIBYTE(v161) = 6;
  strcpy((char *)&__dst, "\\hline");
  *(void *)&long long v156 = &__dst;
  *((_DWORD *)v90 + 12) = *((_DWORD *)sub_1C4949E58(v90, (const void **)&__dst, (uint64_t)&unk_1C4C39B40, (_OWORD **)&v156)+ 14);
  if (SHIBYTE(v161) < 0) {
    operator delete((void *)__dst);
  }
  return v90;
}

void sub_1C4B177F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 169) < 0) {
    operator delete(*(void **)(v33 - 192));
  }
  sub_1C498D2E0(a33);
  sub_1C498D2E0(a30);
  sub_1C498D2E0(a31);
  sub_1C498D2E0(a16);
  sub_1C498D2E0(a17);
  sub_1C498D2E0(a18);
  sub_1C498D2E0(a19);
  sub_1C498D2E0(a20);
  sub_1C498D2E0(a9);
  sub_1C4949DD4(a32, *(char **)(a32 + 8));
  _Unwind_Resume(a1);
}

void sub_1C4B17C20(CoreHandwriting::LaTeXSyntaxHelper *a1@<X0>, uint64_t *a2@<X1>, void **a3@<X8>)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  uint64_t v105 = 0;
  unint64_t v106 = 0;
  unint64_t v107 = 0;
  int v4 = *((char *)a2 + 23);
  unint64_t v5 = *((unsigned __int8 *)a2 + 23);
  unint64_t v6 = a2[1];
  if (v4 >= 0) {
    unint64_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    unint64_t v7 = a2[1];
  }
  if (!v7) {
    goto LABEL_173;
  }
  uint64_t v8 = 0;
  float v9 = (uint64_t *)*a2;
  if (v4 >= 0) {
    float v9 = a2;
  }
  while (*((unsigned char *)v9 + v8) == 32)
  {
    if (v7 == ++v8)
    {
      LODWORD(v8) = v7;
      break;
    }
  }
  uint64_t v10 = (int)v8;
  if (v7 <= (int)v8)
  {
LABEL_173:
    int v102 = 0;
    int v103 = 0;
    uint64_t v104 = 0;
    goto LABEL_174;
  }
  unsigned int v11 = v4 >> 31;
  int v12 = v8;
  do
  {
    if (v11)
    {
      int v14 = (uint64_t *)*a2;
      if (*(unsigned char *)(*a2 + v10) == 32)
      {
        uint64_t v15 = v12;
        if (v6 < v12) {
          goto LABEL_187;
        }
        goto LABEL_23;
      }
      if (v6 - 1 != v10) {
        goto LABEL_13;
      }
      uint64_t v21 = v12;
      if (v6 < v12) {
        goto LABEL_190;
      }
LABEL_36:
      unint64_t v22 = v6 - v21;
      if (v22 >= (int)v8 - v12 + 1) {
        size_t v23 = (int)v8 - v12 + 1;
      }
      else {
        size_t v23 = v22;
      }
      if (v23 > 0x7FFFFFFFFFFFFFF7) {
        sub_1C4949B7C();
      }
      if (v23 >= 0x17)
      {
        uint64_t v36 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v23 | 7) != 0x17) {
          uint64_t v36 = v23 | 7;
        }
        uint64_t v37 = v36 + 1;
        p_dst = (long long *)operator new(v36 + 1);
        *((void *)&__dst + 1) = v23;
        unint64_t v109 = v37 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v109) = v23;
        p_dst = &__dst;
        if (!v23)
        {
          LOBYTE(__dst) = 0;
          BOOL v25 = v106;
          if ((unint64_t)v106 < v107)
          {
LABEL_43:
            long long v26 = __dst;
            *((void *)v25 + 2) = v109;
            *(_OWORD *)BOOL v25 = v26;
            unint64_t v106 = v25 + 24;
LABEL_72:
            unint64_t v5 = *((unsigned __int8 *)a2 + 23);
            unint64_t v6 = a2[1];
            goto LABEL_13;
          }
LABEL_70:
          unint64_t v106 = sub_1C4B1BC3C(&v105, (uint64_t)&__dst);
          if (SHIBYTE(v109) < 0) {
            operator delete((void *)__dst);
          }
          goto LABEL_72;
        }
      }
      memmove(p_dst, (char *)v14 + v21, v23);
      *((unsigned char *)p_dst + v23) = 0;
      BOOL v25 = v106;
      if ((unint64_t)v106 < v107) {
        goto LABEL_43;
      }
      goto LABEL_70;
    }
    if (*((unsigned char *)a2 + v10) != 32)
    {
      if (v5 - 1 != v10) {
        goto LABEL_13;
      }
      uint64_t v21 = v12;
      unint64_t v6 = v5;
      int v14 = a2;
      if (v12 > v5) {
LABEL_190:
      }
        sub_1C49470D8();
      goto LABEL_36;
    }
    uint64_t v15 = v12;
    unint64_t v6 = v5;
    int v14 = a2;
    if (v12 > v5) {
LABEL_187:
    }
      sub_1C49470D8();
LABEL_23:
    unint64_t v16 = v6 - v15;
    if (v16 >= (int)v8 - v12) {
      size_t v17 = (int)v8 - v12;
    }
    else {
      size_t v17 = v16;
    }
    if (v17 > 0x7FFFFFFFFFFFFFF7) {
      sub_1C4949B7C();
    }
    if (v17 >= 0x17)
    {
      uint64_t v27 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17) {
        uint64_t v27 = v17 | 7;
      }
      uint64_t v28 = v27 + 1;
      int v18 = (long long *)operator new(v27 + 1);
      *((void *)&__dst + 1) = v17;
      unint64_t v109 = v28 | 0x8000000000000000;
      *(void *)&long long __dst = v18;
    }
    else
    {
      HIBYTE(v109) = v17;
      int v18 = &__dst;
      if (!v17)
      {
        LOBYTE(__dst) = 0;
        uint64_t v19 = v106;
        if ((unint64_t)v106 < v107) {
          goto LABEL_30;
        }
        goto LABEL_48;
      }
    }
    memmove(v18, (char *)v14 + v15, v17);
    *((unsigned char *)v18 + v17) = 0;
    uint64_t v19 = v106;
    if ((unint64_t)v106 < v107)
    {
LABEL_30:
      long long v20 = __dst;
      *((void *)v19 + 2) = v109;
      *(_OWORD *)uint64_t v19 = v20;
      unint64_t v106 = v19 + 24;
      goto LABEL_50;
    }
LABEL_48:
    unint64_t v106 = sub_1C4B1BC3C(&v105, (uint64_t)&__dst);
    if (SHIBYTE(v109) < 0) {
      operator delete((void *)__dst);
    }
LABEL_50:
    unint64_t v5 = *((unsigned __int8 *)a2 + 23);
    unint64_t v6 = a2[1];
    if ((v5 & 0x80u) == 0) {
      unint64_t v29 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      unint64_t v29 = a2[1];
    }
    uint64_t v30 = (int)v8;
    if ((v5 & 0x80u) == 0) {
      size_t v31 = a2;
    }
    else {
      size_t v31 = (uint64_t *)*a2;
    }
    if (v29 <= (int)v8 + 1) {
      int v32 = v8 + 1;
    }
    else {
      int v32 = v29;
    }
    if (v29 <= (int)v8 + 1) {
      int v33 = v8 + 1;
    }
    else {
      int v33 = v29;
    }
    LODWORD(v8) = v33 - 1;
    uint64_t v34 = (uint64_t)v31 + 1;
    do
    {
      int v12 = v30 + 1;
      if (v29 <= v30 + 1)
      {
        int v12 = v32;
        goto LABEL_13;
      }
      int v35 = *(unsigned __int8 *)(v34 + v30++);
    }
    while (v35 == 32);
    LODWORD(v8) = v12 - 1;
LABEL_13:
    LODWORD(v8) = v8 + 1;
    uint64_t v10 = (int)v8;
    LOBYTE(v11) = (v5 & 0x80u) != 0;
    if ((v5 & 0x80u) == 0) {
      unint64_t v13 = v5;
    }
    else {
      unint64_t v13 = v6;
    }
  }
  while (v13 > (int)v8);
  size_t v38 = (char *)v105;
  int v102 = 0;
  int v103 = 0;
  uint64_t v104 = 0;
  if (v106 != v105)
  {
    size_t v39 = 0;
    int v98 = 0;
    int v40 = 0;
    unint64_t v41 = 0;
    size_t v42 = (uint64_t *)((char *)a1 + 8);
    do
    {
      uint64_t v43 = &v38[24 * v41];
      if (v43[23] < 0)
      {
        sub_1C4949ADC(__p, *(void **)v43, *((void *)v43 + 1));
      }
      else
      {
        long long v44 = *(_OWORD *)v43;
        uint64_t v101 = *((void *)v43 + 2);
        *(_OWORD *)std::string __p = v44;
      }
      int v45 = (uint64_t *)*v42;
      if (!*v42) {
        goto LABEL_117;
      }
      BOOL v46 = v101 >= 0 ? (void *)HIBYTE(v101) : __p[1];
      BOOL v47 = v101 >= 0 ? __p : (void **)__p[0];
      unint64_t v48 = (uint64_t *)((char *)a1 + 8);
      uint64_t v49 = *v42;
      do
      {
        int v50 = *(char *)(v49 + 55);
        if (v50 >= 0) {
          size_t v51 = *(unsigned __int8 *)(v49 + 55);
        }
        else {
          size_t v51 = *(void *)(v49 + 40);
        }
        if (v50 >= 0) {
          int v52 = (const void *)(v49 + 32);
        }
        else {
          int v52 = *(const void **)(v49 + 32);
        }
        if ((unint64_t)v46 >= v51) {
          size_t v53 = v51;
        }
        else {
          size_t v53 = (size_t)v46;
        }
        int v54 = memcmp(v52, v47, v53);
        BOOL v55 = v51 < (unint64_t)v46;
        if (v54) {
          BOOL v55 = v54 < 0;
        }
        BOOL v56 = !v55;
        if (v55) {
          BOOL v57 = (uint64_t *)(v49 + 8);
        }
        else {
          BOOL v57 = (uint64_t *)v49;
        }
        if (v56) {
          unint64_t v48 = (uint64_t *)v49;
        }
        uint64_t v49 = *v57;
      }
      while (*v57);
      if (v48 == v42) {
        goto LABEL_117;
      }
      int v60 = (const void *)v48[4];
      uint64_t v59 = v48 + 4;
      uint64_t v58 = v60;
      int v61 = *((char *)v59 + 23);
      if (v61 >= 0) {
        size_t v62 = *((unsigned __int8 *)v59 + 23);
      }
      else {
        size_t v62 = v59[1];
      }
      if (v61 >= 0) {
        unint64_t v63 = v59;
      }
      else {
        unint64_t v63 = v58;
      }
      if (v62 >= (unint64_t)v46) {
        size_t v64 = (size_t)v46;
      }
      else {
        size_t v64 = v62;
      }
      int v65 = memcmp(v47, v63, v64);
      BOOL v66 = (unint64_t)v46 < v62;
      if (v65) {
        BOOL v66 = v65 < 0;
      }
      if (v66)
      {
LABEL_117:
        LODWORD(__dst) = 0;
        uint64_t v67 = operator new(4uLL);
        *((void *)&__dst + 1) = v67;
        _DWORD *v67 = v41;
        unint64_t v109 = (unint64_t)(v67 + 1);
        BOOL v110 = v67 + 1;
        sub_1C4B1BB48(a3, (int *)&__dst, 1);
        if (*((void *)&__dst + 1))
        {
          unint64_t v109 = *((void *)&__dst + 1);
          operator delete(*((void **)&__dst + 1));
        }
        char v68 = 1;
        if ((SHIBYTE(v101) & 0x80000000) == 0) {
          goto LABEL_121;
        }
        goto LABEL_120;
      }
      while (1)
      {
        while (1)
        {
          int v69 = *((char *)v45 + 55);
          if (v69 >= 0) {
            size_t v70 = *((unsigned __int8 *)v45 + 55);
          }
          else {
            size_t v70 = v45[5];
          }
          if (v69 >= 0) {
            uint64_t v71 = v45 + 4;
          }
          else {
            uint64_t v71 = (const void *)v45[4];
          }
          if (v70 >= (unint64_t)v46) {
            size_t v72 = (size_t)v46;
          }
          else {
            size_t v72 = v70;
          }
          int v73 = memcmp(v47, v71, v72);
          BOOL v74 = (unint64_t)v46 < v70;
          if (v73) {
            BOOL v74 = v73 < 0;
          }
          if (!v74) {
            break;
          }
          int v45 = (uint64_t *)*v45;
          if (!v45) {
            goto LABEL_186;
          }
        }
        int v75 = memcmp(v71, v47, v72);
        BOOL v76 = v70 < (unint64_t)v46;
        if (v75) {
          BOOL v76 = v75 < 0;
        }
        if (!v76) {
          break;
        }
        int v45 = (uint64_t *)v45[1];
        if (!v45) {
LABEL_186:
        }
          sub_1C49470F0("map::at:  key not found");
      }
      if (v40 < v98)
      {
        *(_DWORD *)int v40 = *((_DWORD *)v45 + 14);
        v40 += 4;
        char v68 = 0;
        int v103 = v40;
        if ((SHIBYTE(v101) & 0x80000000) == 0) {
          goto LABEL_121;
        }
        goto LABEL_120;
      }
      uint64_t v77 = (v40 - v39) >> 2;
      unint64_t v78 = v77 + 1;
      if ((unint64_t)(v77 + 1) >> 62) {
        sub_1C494A220();
      }
      if ((v98 - v39) >> 1 > v78) {
        unint64_t v78 = (v98 - v39) >> 1;
      }
      if ((unint64_t)(v98 - v39) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v79 = v78;
      }
      if (v79)
      {
        if (v79 >> 62) {
          sub_1C4949AA8();
        }
        uint64_t v80 = operator new(4 * v79);
        uint64_t v81 = &v80[4 * v77];
        *uint64_t v81 = *((_DWORD *)v45 + 14);
        uint64_t v82 = (uint64_t)(v81 + 1);
        int64_t v83 = v40 - v39;
        if (v40 == v39) {
          goto LABEL_159;
        }
      }
      else
      {
        uint64_t v80 = 0;
        uint64_t v81 = (_DWORD *)(4 * v77);
        *(_DWORD *)(4 * v77) = *((_DWORD *)v45 + 14);
        uint64_t v82 = 4 * v77 + 4;
        int64_t v83 = v40 - v39;
        if (v40 == v39) {
          goto LABEL_159;
        }
      }
      unint64_t v84 = v83 - 4;
      if (v84 < 0xBC)
      {
        uint64_t v85 = v40;
        goto LABEL_158;
      }
      unint64_t v87 = (v40 - 4 - v39) & 0xFFFFFFFFFFFFFFFCLL;
      if (&v80[v40 - v39 - 4 - v87] > &v80[v40 - v39 - 4])
      {
        uint64_t v85 = v40;
        do
        {
LABEL_158:
          int v86 = *((_DWORD *)v85 - 1);
          v85 -= 4;
          *--uint64_t v81 = v86;
        }
        while (v85 != v39);
        goto LABEL_159;
      }
      if (&v40[-v87 - 4] > v40 - 4)
      {
        uint64_t v85 = v40;
        goto LABEL_158;
      }
      if ((unint64_t)(v39 - v80) < 0x20)
      {
        uint64_t v85 = v40;
        goto LABEL_158;
      }
      uint64_t v88 = (v84 >> 2) + 1;
      uint64_t v89 = 4 * (v88 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v85 = &v40[-v89];
      uint64_t v81 = (_DWORD *)((char *)v81 - v89);
      unint64_t v90 = &v80[4 * v77 - 16];
      int v91 = v40 - 16;
      uint64_t v92 = v88 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v93 = *(_OWORD *)v91;
        *(v90 - 1) = *((_OWORD *)v91 - 1);
        *unint64_t v90 = v93;
        v90 -= 2;
        v91 -= 32;
        v92 -= 8;
      }
      while (v92);
      if (v88 != (v88 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_158;
      }
LABEL_159:
      int v102 = v81;
      int v103 = (char *)v82;
      int v98 = &v80[4 * v79];
      uint64_t v104 = v98;
      if (v39) {
        operator delete(v39);
      }
      size_t v39 = (char *)v81;
      char v68 = 0;
      int v103 = (char *)v82;
      int v40 = (char *)v82;
      if ((SHIBYTE(v101) & 0x80000000) == 0) {
        goto LABEL_121;
      }
LABEL_120:
      operator delete(__p[0]);
LABEL_121:
      if (v68) {
        goto LABEL_175;
      }
      ++v41;
      size_t v38 = (char *)v105;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v106 - (unsigned char *)v105) >> 3) > v41);
  }
LABEL_174:
  sub_1C4B18568(a1, &v102, a3);
LABEL_175:
  if (v102) {
    operator delete(v102);
  }
  int v94 = (char *)v105;
  if (v105)
  {
    int v95 = v106;
    int v96 = v105;
    if (v106 != v105)
    {
      do
      {
        if (*(v95 - 1) < 0) {
          operator delete(*((void **)v95 - 3));
        }
        v95 -= 24;
      }
      while (v95 != v94);
      int v96 = v105;
    }
    unint64_t v106 = v94;
    operator delete(v96);
  }
}

void sub_1C4B1847C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,int a27,__int16 a28,char a29,char a30)
{
  if (a18 < 0)
  {
    operator delete(__p);
    uint64_t v30 = a19;
    if (!a19) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v30 = a19;
    if (!a19)
    {
LABEL_7:
      sub_1C4935DF0(&a22);
      _Unwind_Resume(a1);
    }
  }
  operator delete(v30);
  goto LABEL_7;
}

void sub_1C4B18568(CoreHandwriting::LaTeXSyntaxHelper *this@<X0>, void *a2@<X1>, void **a3@<X8>)
{
  uint64_t v228 = *MEMORY[0x1E4F143B8];
  unint64_t v221 = 0;
  uint64_t v222 = 0;
  unint64_t v220 = 0;
  uint64_t v4 = *a2;
  if (a2[1] == *a2)
  {
    int v14 = 0;
    unsigned int v11 = 0;
    double v117 = 0;
LABEL_179:
    a3[2] = 0;
    a3[1] = 0;
    *a3 = a3 + 1;
    goto LABEL_180;
  }
  unint64_t v5 = a2;
  uint64_t v219 = a3;
  unint64_t v7 = 0;
  uint64_t v8 = 0;
  float v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = 0;
  int v12 = 0;
  unint64_t v13 = 0;
  int v14 = 0;
  unint64_t v15 = 0;
  do
  {
    int v17 = *(_DWORD *)(v4 + 4 * v15);
    unint64_t v18 = *((void *)this + 8);
    if (v18)
    {
      uint8x8_t v19 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
      v19.i16[0] = vaddlv_u8(v19);
      if (v19.u32[0] > 1uLL)
      {
        unint64_t v20 = v17;
        if (v18 <= v17) {
          unint64_t v20 = v17 % v18;
        }
      }
      else
      {
        unint64_t v20 = (v18 - 1) & v17;
      }
      uint64_t v21 = *(uint64_t ***)(*((void *)this + 7) + 8 * v20);
      if (v21)
      {
        unint64_t v22 = *v21;
        if (v22)
        {
          if (v19.u32[0] < 2uLL)
          {
            unint64_t v23 = v18 - 1;
            while (1)
            {
              uint64_t v25 = v22[1];
              if (v25 == v17)
              {
                if (*((_DWORD *)v22 + 4) == v17) {
                  goto LABEL_45;
                }
              }
              else if ((v25 & v23) != v20)
              {
                goto LABEL_24;
              }
              unint64_t v22 = (uint64_t *)*v22;
              if (!v22) {
                goto LABEL_24;
              }
            }
          }
          do
          {
            unint64_t v24 = v22[1];
            if (v24 == v17)
            {
              if (*((_DWORD *)v22 + 4) == v17)
              {
LABEL_45:
                uint64_t v216 = v11;
                if (v14 < v13)
                {
                  *(_DWORD *)int v14 = v17;
                  uint64_t v34 = (uint64_t)(v14 + 4);
                  uint64_t v222 = (int *)(v14 + 4);
                  if (v11 < v10)
                  {
LABEL_47:
                    *(_DWORD *)unsigned int v11 = v15;
                    uint64_t v35 = (uint64_t)(v11 + 4);
                    goto LABEL_81;
                  }
LABEL_66:
                  unint64_t v211 = v5;
                  int64_t v58 = v11 - v9;
                  uint64_t v59 = (v11 - v9) >> 2;
                  unint64_t v60 = v59 + 1;
                  if (!((unint64_t)(v59 + 1) >> 62))
                  {
                    uint64_t v207 = v12;
                    if ((v10 - v9) >> 1 > v60) {
                      unint64_t v60 = (v10 - v9) >> 1;
                    }
                    if ((unint64_t)(v10 - v9) >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v61 = v60;
                    }
                    double v214 = v13;
                    if (!v61)
                    {
                      uint64_t v67 = 0;
                      char v68 = (char *)(4 * v59);
                      *(_DWORD *)(4 * v59) = v15;
                      uint64_t v35 = 4 * v59 + 4;
                      uint64_t v69 = v216 - v9;
                      if (v216 != v9) {
                        goto LABEL_75;
                      }
                      goto LABEL_158;
                    }
                    int64_t v209 = v11 - v9;
                    if (!(v61 >> 62))
                    {
                      uint64_t v62 = (v11 - v9) >> 2;
                      uint64_t v63 = v34;
                      size_t v64 = v8;
                      int v65 = v9;
                      unint64_t v66 = v61;
                      uint64_t v67 = (char *)operator new(4 * v61);
                      float v9 = v65;
                      uint64_t v8 = v64;
                      uint64_t v34 = v63;
                      unint64_t v61 = v66;
                      uint64_t v59 = v62;
                      int64_t v58 = v209;
                      char v68 = &v67[4 * v62];
                      *(_DWORD *)char v68 = v15;
                      uint64_t v35 = (uint64_t)(v68 + 4);
                      uint64_t v69 = v216 - v9;
                      if (v216 != v9)
                      {
LABEL_75:
                        unint64_t v70 = v69 - 4;
                        if (v70 < 0xBC
                          || (unint64_t v104 = (v216 - 4 - v9) & 0xFFFFFFFFFFFFFFFCLL, &v67[v58 - 4 - v104] > &v67[v58 - 4])
                          || &v216[-v104 - 4] > v216 - 4)
                        {
                          uint64_t v71 = v216;
                          unint64_t v5 = v211;
                        }
                        else
                        {
                          if ((unint64_t)(v216 - v67 - v58) < 0x20)
                          {
                            uint64_t v71 = v216;
                            unint64_t v5 = v211;
                            goto LABEL_77;
                          }
                          uint64_t v111 = (v70 >> 2) + 1;
                          uint64_t v112 = 4 * (v111 & 0x7FFFFFFFFFFFFFF8);
                          uint64_t v71 = &v216[-v112];
                          v68 -= v112;
                          BOOL v113 = &v67[4 * v59 - 16];
                          float v114 = v216 - 16;
                          uint64_t v115 = v111 & 0x7FFFFFFFFFFFFFF8;
                          do
                          {
                            long long v116 = *(_OWORD *)v114;
                            *((_OWORD *)v113 - 1) = *((_OWORD *)v114 - 1);
                            *(_OWORD *)BOOL v113 = v116;
                            v113 -= 32;
                            v114 -= 32;
                            v115 -= 8;
                          }
                          while (v115);
                          unint64_t v5 = v211;
                          if (v111 == (v111 & 0x7FFFFFFFFFFFFFF8))
                          {
LABEL_78:
                            uint64_t v10 = &v67[4 * v61];
                            unint64_t v220 = v68;
                            if (v9) {
                              goto LABEL_79;
                            }
                            goto LABEL_80;
                          }
                        }
                        do
                        {
LABEL_77:
                          int v72 = *((_DWORD *)v71 - 1);
                          v71 -= 4;
                          *((_DWORD *)v68 - 1) = v72;
                          v68 -= 4;
                        }
                        while (v71 != v9);
                        goto LABEL_78;
                      }
LABEL_158:
                      unint64_t v5 = v211;
                      uint64_t v10 = &v67[4 * v61];
                      unint64_t v220 = v68;
                      if (v9)
                      {
LABEL_79:
                        int v73 = v10;
                        BOOL v74 = v8;
                        uint64_t v217 = v34;
                        operator delete(v9);
                        uint64_t v34 = v217;
                        uint64_t v8 = v74;
                        uint64_t v10 = v73;
                      }
LABEL_80:
                      float v9 = v68;
                      unint64_t v13 = v214;
                      int v12 = v207;
                      goto LABEL_81;
                    }
LABEL_376:
                    sub_1C4949AA8();
                  }
LABEL_378:
                  sub_1C494A220();
                }
                int64_t v44 = v14 - v12;
                uint64_t v45 = (v14 - v12) >> 2;
                unint64_t v46 = v45 + 1;
                if ((unint64_t)(v45 + 1) >> 62) {
                  goto LABEL_378;
                }
                unint64_t v213 = v9;
                if ((v13 - v12) >> 1 > v46) {
                  unint64_t v46 = (v13 - v12) >> 1;
                }
                if ((unint64_t)(v13 - v12) >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v47 = v46;
                }
                unint64_t v208 = (unint64_t)v10;
                if (v47)
                {
                  if (v47 >> 62) {
                    goto LABEL_376;
                  }
                  unint64_t v48 = v12;
                  uint64_t v49 = v14;
                  unint64_t v50 = v47;
                  size_t v51 = operator new(4 * v47);
                  int v12 = v48;
                  unint64_t v47 = v50;
                  int v14 = v49;
                  unint64_t v7 = (int *)&v51[4 * v45];
                  int *v7 = v17;
                  uint64_t v34 = (uint64_t)(v7 + 1);
                  int64_t v52 = v49 - v12;
                  if (v49 != v12)
                  {
LABEL_60:
                    unint64_t v53 = v52 - 4;
                    unsigned int v11 = v216;
                    if (v53 < 0xBC)
                    {
                      int v54 = v14;
                      goto LABEL_62;
                    }
                    unint64_t v103 = (v14 - 4 - v12) & 0xFFFFFFFFFFFFFFFCLL;
                    if (&v51[v44 - 4 - v103] > &v51[v44 - 4])
                    {
                      int v54 = v14;
                      goto LABEL_62;
                    }
                    if (&v14[-v103 - 4] > v14 - 4)
                    {
                      int v54 = v14;
                      goto LABEL_62;
                    }
                    if ((unint64_t)(v14 - v51 - v44) < 0x20)
                    {
                      int v54 = v14;
                      goto LABEL_62;
                    }
                    uint64_t v105 = (v53 >> 2) + 1;
                    uint64_t v106 = 4 * (v105 & 0x7FFFFFFFFFFFFFF8);
                    int v54 = &v14[-v106];
                    unint64_t v7 = (int *)((char *)v7 - v106);
                    unint64_t v107 = &v51[4 * v45 - 16];
                    uint64_t v108 = v14 - 16;
                    uint64_t v109 = v105 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      long long v110 = *(_OWORD *)v108;
                      *(v107 - 1) = *((_OWORD *)v108 - 1);
                      *unint64_t v107 = v110;
                      v107 -= 2;
                      v108 -= 32;
                      v109 -= 8;
                    }
                    while (v109);
                    if (v105 != (v105 & 0x7FFFFFFFFFFFFFF8))
                    {
                      do
                      {
LABEL_62:
                        int v55 = *((_DWORD *)v54 - 1);
                        v54 -= 4;
                        *--unint64_t v7 = v55;
                      }
                      while (v54 != v12);
                    }
                    unint64_t v13 = &v51[4 * v47];
                    unint64_t v221 = v7;
                    if (v12)
                    {
LABEL_64:
                      BOOL v56 = v13;
                      uint64_t v57 = v34;
                      operator delete(v12);
                      uint64_t v34 = v57;
                      unint64_t v13 = v56;
                    }
LABEL_65:
                    uint64_t v8 = v7;
                    int v12 = (char *)v7;
                    float v9 = v213;
                    uint64_t v10 = (char *)v208;
                    uint64_t v222 = (int *)v34;
                    if ((unint64_t)v11 < v208) {
                      goto LABEL_47;
                    }
                    goto LABEL_66;
                  }
                }
                else
                {
                  size_t v51 = 0;
                  unint64_t v7 = (int *)(4 * v45);
                  *(_DWORD *)(4 * v45) = v17;
                  uint64_t v34 = 4 * v45 + 4;
                  int64_t v52 = v14 - v12;
                  if (v14 != v12) {
                    goto LABEL_60;
                  }
                }
                unsigned int v11 = v216;
                unint64_t v13 = &v51[4 * v47];
                unint64_t v221 = v7;
                if (v12) {
                  goto LABEL_64;
                }
                goto LABEL_65;
              }
            }
            else
            {
              if (v24 >= v18) {
                v24 %= v18;
              }
              if (v24 != v20) {
                break;
              }
            }
            unint64_t v22 = (uint64_t *)*v22;
          }
          while (v22);
        }
      }
    }
LABEL_24:
    unint64_t v26 = *((void *)this + 13);
    if (!v26) {
      goto LABEL_82;
    }
    uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      unint64_t v28 = v17;
      if (v26 <= v17) {
        unint64_t v28 = v17 % v26;
      }
    }
    else
    {
      unint64_t v28 = (v26 - 1) & v17;
    }
    unint64_t v29 = *(uint64_t ***)(*((void *)this + 12) + 8 * v28);
    if (!v29) {
      goto LABEL_82;
    }
    uint64_t v30 = *v29;
    if (!v30) {
      goto LABEL_82;
    }
    if (v27.u32[0] < 2uLL)
    {
      unint64_t v31 = v26 - 1;
      while (1)
      {
        uint64_t v33 = v30[1];
        if (v33 == v17)
        {
          if (*((_DWORD *)v30 + 4) == v17) {
            goto LABEL_48;
          }
        }
        else if ((v33 & v31) != v28)
        {
          goto LABEL_82;
        }
        uint64_t v30 = (uint64_t *)*v30;
        if (!v30) {
          goto LABEL_82;
        }
      }
    }
    while (1)
    {
      unint64_t v32 = v30[1];
      if (v32 == v17) {
        break;
      }
      if (v32 >= v26) {
        v32 %= v26;
      }
      if (v32 != v28) {
        goto LABEL_82;
      }
LABEL_34:
      uint64_t v30 = (uint64_t *)*v30;
      if (!v30) {
        goto LABEL_82;
      }
    }
    if (*((_DWORD *)v30 + 4) != v17) {
      goto LABEL_34;
    }
LABEL_48:
    if (v14 == (char *)v8) {
      goto LABEL_358;
    }
    uint64_t v36 = v11;
    uint64_t v37 = v8;
    uint64_t v210 = v7;
    uint64_t v212 = v13;
    size_t v38 = v14;
    size_t v39 = v10;
    int v40 = v9;
    unint64_t v41 = v36;
    int v43 = *((_DWORD *)v38 - 1);
    uint64_t v42 = (uint64_t)(v38 - 4);
    if (!CoreHandwriting::LaTeXSyntaxHelper::checkCompatibleSymbols(this, v43, v17)) {
      goto LABEL_358;
    }
    float v9 = v40;
    uint64_t v8 = v37;
    uint64_t v222 = (int *)v42;
    uint64_t v35 = (uint64_t)(v41 - 4);
    int v12 = (char *)v37;
    uint64_t v34 = v42;
    uint64_t v10 = v39;
    unint64_t v7 = v210;
    unint64_t v13 = v212;
LABEL_81:
    unsigned int v11 = (char *)v35;
    int v14 = (char *)v34;
LABEL_82:
    unint64_t v75 = *((void *)this + 23);
    if (!v75) {
      goto LABEL_102;
    }
    uint8x8_t v76 = (uint8x8_t)vcnt_s8((int8x8_t)v75);
    v76.i16[0] = vaddlv_u8(v76);
    if (v76.u32[0] > 1uLL)
    {
      unint64_t v77 = v17;
      if (v75 <= v17) {
        unint64_t v77 = v17 % v75;
      }
    }
    else
    {
      unint64_t v77 = (v75 - 1) & v17;
    }
    unint64_t v78 = *(uint64_t ***)(*((void *)this + 22) + 8 * v77);
    if (!v78 || (unint64_t v79 = *v78) == 0)
    {
LABEL_102:
      uint64_t v4 = *v5;
      if (!v15) {
        goto LABEL_3;
      }
      goto LABEL_103;
    }
    if (v76.u32[0] < 2uLL)
    {
      unint64_t v80 = v75 - 1;
      while (1)
      {
        uint64_t v82 = v79[1];
        if (v82 == v17)
        {
          if (*((_DWORD *)v79 + 4) == v17) {
            goto LABEL_130;
          }
        }
        else if ((v82 & v80) != v77)
        {
          goto LABEL_102;
        }
        unint64_t v79 = (uint64_t *)*v79;
        if (!v79) {
          goto LABEL_102;
        }
      }
    }
    while (2)
    {
      unint64_t v81 = v79[1];
      if (v81 != v17)
      {
        if (v81 >= v75) {
          v81 %= v75;
        }
        if (v81 != v77) {
          goto LABEL_102;
        }
        goto LABEL_92;
      }
      if (*((_DWORD *)v79 + 4) != v17)
      {
LABEL_92:
        unint64_t v79 = (uint64_t *)*v79;
        if (!v79) {
          goto LABEL_102;
        }
        continue;
      }
      break;
    }
LABEL_130:
    int v14 = (char *)v222;
    if (v222 == v7) {
      goto LABEL_358;
    }
    int8x8_t v94 = *(int8x8_t *)((char *)this + 144);
    if (!*(void *)&v94) {
      goto LABEL_358;
    }
    unint64_t v95 = *(v222 - 1);
    uint8x8_t v96 = (uint8x8_t)vcnt_s8(v94);
    v96.i16[0] = vaddlv_u8(v96);
    if (v96.u32[0] > 1uLL)
    {
      unint64_t v97 = *(v222 - 1);
      if (*(void *)&v94 <= v95) {
        unint64_t v97 = v95 % *(void *)&v94;
      }
    }
    else
    {
      unint64_t v97 = (*(void *)&v94 - 1) & v95;
    }
    int v98 = *(uint64_t ***)(*((void *)this + 17) + 8 * v97);
    if (!v98) {
      goto LABEL_358;
    }
    int v99 = *v98;
    if (!v99) {
      goto LABEL_358;
    }
    if (v96.u32[0] < 2uLL)
    {
      uint64_t v100 = *(void *)&v94 - 1;
      while (1)
      {
        uint64_t v102 = v99[1];
        if (v102 == v95)
        {
          if (*((_DWORD *)v99 + 4) == v95) {
            goto LABEL_152;
          }
        }
        else if ((v102 & v100) != v97)
        {
          goto LABEL_358;
        }
        int v99 = (uint64_t *)*v99;
        if (!v99) {
          goto LABEL_358;
        }
      }
    }
    while (2)
    {
      unint64_t v101 = v99[1];
      if (v101 != v95)
      {
        if (v101 >= *(void *)&v94) {
          v101 %= *(void *)&v94;
        }
        if (v101 != v97) {
          goto LABEL_358;
        }
LABEL_141:
        int v99 = (uint64_t *)*v99;
        if (!v99) {
          goto LABEL_358;
        }
        continue;
      }
      break;
    }
    if (*((_DWORD *)v99 + 4) != v95) {
      goto LABEL_141;
    }
LABEL_152:
    uint64_t v8 = v7;
    int v12 = (char *)v7;
    uint64_t v4 = *v5;
    if (!v15) {
      goto LABEL_3;
    }
LABEL_103:
    int v83 = *((_DWORD *)this + 6);
    unint64_t v84 = *(int *)(v4 + 4 * (v15 - 1));
    if (v17 != v83)
    {
      int8x8_t v85 = *(int8x8_t *)((char *)this + 224);
      if (v85)
      {
        uint8x8_t v86 = (uint8x8_t)vcnt_s8(v85);
        v86.i16[0] = vaddlv_u8(v86);
        if (v86.u32[0] > 1uLL)
        {
          unint64_t v87 = *(int *)(v4 + 4 * (v15 - 1));
          if (*(void *)&v85 <= v84) {
            unint64_t v87 = v84 % *(void *)&v85;
          }
        }
        else
        {
          unint64_t v87 = (*(void *)&v85 - 1) & v84;
        }
        uint64_t v88 = *(uint64_t ***)(*((void *)this + 27) + 8 * v87);
        if (v88)
        {
          uint64_t v89 = *v88;
          if (v89)
          {
            if (v86.u32[0] < 2uLL)
            {
              uint64_t v90 = *(void *)&v85 - 1;
              while (1)
              {
                uint64_t v92 = v89[1];
                if (v92 == v84)
                {
                  if (*((_DWORD *)v89 + 4) == v84) {
                    goto LABEL_358;
                  }
                }
                else if ((v92 & v90) != v87)
                {
                  goto LABEL_124;
                }
                uint64_t v89 = (uint64_t *)*v89;
                if (!v89) {
                  goto LABEL_124;
                }
              }
            }
            do
            {
              unint64_t v91 = v89[1];
              if (v91 == v84)
              {
                if (*((_DWORD *)v89 + 4) == v84) {
                  goto LABEL_358;
                }
              }
              else
              {
                if (v91 >= *(void *)&v85) {
                  v91 %= *(void *)&v85;
                }
                if (v91 != v87) {
                  break;
                }
              }
              uint64_t v89 = (uint64_t *)*v89;
            }
            while (v89);
          }
        }
      }
    }
LABEL_124:
    if (v84 == *((_DWORD *)this + 9)
      && (int v93 = *(_DWORD *)(v4 + 4 * v15), v93 != v83)
      && v93 != *((_DWORD *)this + 10)
      || v17 == *((_DWORD *)this + 12) && v84 != *((_DWORD *)this + 11))
    {
LABEL_358:
      int v224 = 1;
      unint64_t v202 = operator new(4uLL);
      std::string __p = v202;
      _DWORD *v202 = v15;
      unint64_t v226 = v202 + 1;
      uint64_t v227 = (char *)(v202 + 1);
      sub_1C4B1BB48(v219, &v224, 1);
      uint64_t v195 = __p;
      if (__p)
      {
        unint64_t v226 = __p;
LABEL_360:
        operator delete(v195);
      }
      goto LABEL_361;
    }
LABEL_3:
    ++v15;
    uint64_t v16 = v5[1];
  }
  while (v15 < (v16 - v4) >> 2);
  uint64_t v223 = 0;
  if (v16 == v4)
  {
    double v117 = 0;
LABEL_353:
    a3 = v219;
    goto LABEL_179;
  }
  uint64_t v215 = v14;
  uint64_t v218 = v11;
  int v127 = 0;
  unint64_t v128 = 0;
  double v117 = 0;
  unint64_t v129 = 0;
  do
  {
    unint64_t v132 = *(int *)(v4 + 4 * v129);
    int v133 = *((_DWORD *)this + 6);
    if (v132 == v133)
    {
      if (v117 < v127)
      {
        *(_DWORD *)double v117 = v129;
        uint64_t v130 = v117 + 4;
        unint64_t v128 = (unint64_t)v127;
        goto LABEL_198;
      }
      uint64_t v134 = v223;
      uint64_t v135 = (v117 - v223) >> 2;
      unint64_t v136 = v135 + 1;
      if (!((unint64_t)(v135 + 1) >> 62))
      {
        if ((v127 - v223) >> 1 > v136) {
          unint64_t v136 = (v127 - v223) >> 1;
        }
        if ((unint64_t)(v127 - v223) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v137 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v137 = v136;
        }
        if (v137)
        {
          if (v137 >> 62) {
            goto LABEL_375;
          }
          uint64_t v138 = operator new(4 * v137);
          uint64_t v139 = &v138[4 * v135];
          *(_DWORD *)uint64_t v139 = v129;
          uint64_t v131 = (uint64_t)(v139 + 4);
          int64_t v140 = v117 - v223;
          if (v117 == v223) {
            goto LABEL_223;
          }
        }
        else
        {
          uint64_t v138 = 0;
          uint64_t v139 = (char *)(4 * v135);
          *(_DWORD *)(4 * v135) = v129;
          uint64_t v131 = 4 * v135 + 4;
          int64_t v140 = v117 - v223;
          if (v117 == v223) {
            goto LABEL_223;
          }
        }
        unint64_t v145 = v140 - 4;
        if (v145 >= 0xBC)
        {
          unint64_t v156 = (v117 - 4 - v223) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v138[v117 - v223 - 4 - v156] > &v138[v117 - v223 - 4])
          {
            char v146 = v117;
          }
          else if (&v117[-v156 - 4] > v117 - 4)
          {
            char v146 = v117;
          }
          else if ((unint64_t)(v223 - v138) >= 0x20)
          {
            uint64_t v162 = (v145 >> 2) + 1;
            uint64_t v163 = 4 * (v162 & 0x7FFFFFFFFFFFFFF8);
            char v146 = &v117[-v163];
            v139 -= v163;
            long long v164 = &v138[4 * v135 - 16];
            __int16 v165 = (long long *)(v117 - 16);
            uint64_t v166 = v162 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v167 = *v165;
              *(v164 - 1) = *(v165 - 1);
              *long long v164 = v167;
              v164 -= 2;
              v165 -= 2;
              v166 -= 8;
            }
            while (v166);
            if (v162 == (v162 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_223;
            }
          }
          else
          {
            char v146 = v117;
          }
        }
        else
        {
          char v146 = v117;
        }
        do
        {
          int v147 = *((_DWORD *)v146 - 1);
          v146 -= 4;
          *((_DWORD *)v139 - 1) = v147;
          v139 -= 4;
        }
        while (v146 != v223);
LABEL_223:
        int v127 = &v138[4 * v137];
        uint64_t v223 = v139;
        if (v134) {
          operator delete(v134);
        }
        unint64_t v128 = (unint64_t)v127;
        goto LABEL_199;
      }
      goto LABEL_374;
    }
    if (v132 == *((_DWORD *)this + 7))
    {
      uint64_t v141 = *((int *)v117 - 1);
      uint64_t v130 = v117 - 4;
      if (*(_DWORD *)(v4 + 4 * v141) == v133) {
        goto LABEL_198;
      }
      int v224 = 5;
      uint64_t v201 = operator new(4uLL);
      std::string __p = v201;
      *uint64_t v201 = v129;
      unint64_t v226 = v201 + 1;
      uint64_t v227 = (char *)(v201 + 1);
      a3 = v219;
      sub_1C4B1BB48(v219, &v224, 1);
      int v14 = v215;
      unsigned int v11 = v218;
      if (__p)
      {
        unint64_t v226 = __p;
        operator delete(__p);
      }
      double v117 = v223;
      goto LABEL_180;
    }
    int8x8_t v142 = *(int8x8_t *)((char *)this + 304);
    if (v142)
    {
      uint8x8_t v143 = (uint8x8_t)vcnt_s8(v142);
      v143.i16[0] = vaddlv_u8(v143);
      if (v143.u32[0] > 1uLL)
      {
        unint64_t v144 = *(int *)(v4 + 4 * v129);
        if (*(void *)&v142 <= v132) {
          unint64_t v144 = v132 % *(void *)&v142;
        }
      }
      else
      {
        unint64_t v144 = (*(void *)&v142 - 1) & v132;
      }
      char v148 = *(uint64_t ***)(*((void *)this + 37) + 8 * v144);
      if (v148)
      {
        uint64_t v149 = *v148;
        if (v149)
        {
          if (v143.u32[0] < 2uLL)
          {
            uint64_t v150 = *(void *)&v142 - 1;
            while (1)
            {
              uint64_t v152 = v149[1];
              if (v152 == v132)
              {
                if (*((_DWORD *)v149 + 4) == v132) {
                  goto LABEL_274;
                }
              }
              else if ((v152 & v150) != v144)
              {
                goto LABEL_243;
              }
              uint64_t v149 = (uint64_t *)*v149;
              if (!v149) {
                goto LABEL_243;
              }
            }
          }
          do
          {
            unint64_t v151 = v149[1];
            if (v151 == v132)
            {
              if (*((_DWORD *)v149 + 4) == v132)
              {
LABEL_274:
                uint64_t v134 = v223;
                if (v132 == *((_DWORD *)this + 8) && v117 != v223)
                {
                  uint64_t v131 = (uint64_t)(v117 - 4);
                  if (*(_DWORD *)(v4 + 4 * *((int *)v117 - 1)) == v132) {
                    goto LABEL_199;
                  }
                }
                if ((unint64_t)v117 < v128)
                {
                  *(_DWORD *)double v117 = v129;
                  uint64_t v130 = v117 + 4;
                  goto LABEL_198;
                }
                uint64_t v174 = (v117 - v223) >> 2;
                unint64_t v175 = v174 + 1;
                if (!((unint64_t)(v174 + 1) >> 62))
                {
                  if ((uint64_t)(v128 - (void)v223) >> 1 > v175) {
                    unint64_t v175 = (uint64_t)(v128 - (void)v223) >> 1;
                  }
                  if (v128 - (unint64_t)v223 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v137 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v137 = v175;
                  }
                  if (v137)
                  {
                    if (!(v137 >> 62))
                    {
                      uint64_t v138 = operator new(4 * v137);
                      goto LABEL_315;
                    }
LABEL_375:
                    sub_1C4949AA8();
                  }
                  uint64_t v138 = 0;
LABEL_315:
                  uint64_t v139 = &v138[4 * v174];
                  *(_DWORD *)uint64_t v139 = v129;
                  uint64_t v131 = (uint64_t)(v139 + 4);
                  if (v117 != v223)
                  {
                    unint64_t v181 = v117 - v223 - 4;
                    if (v181 < 0xBC)
                    {
                      uint64_t v182 = v117;
                      goto LABEL_318;
                    }
                    unint64_t v184 = (v117 - 4 - v223) & 0xFFFFFFFFFFFFFFFCLL;
                    if (&v138[v117 - v223 - 4 - v184] > &v138[v117 - v223 - 4])
                    {
                      uint64_t v182 = v117;
                      goto LABEL_318;
                    }
                    if (&v117[-v184 - 4] > v117 - 4)
                    {
                      uint64_t v182 = v117;
                      goto LABEL_318;
                    }
                    if ((unint64_t)(v223 - v138) < 0x20)
                    {
                      uint64_t v182 = v117;
                      goto LABEL_318;
                    }
                    uint64_t v185 = (v181 >> 2) + 1;
                    uint64_t v186 = 4 * (v185 & 0x7FFFFFFFFFFFFFF8);
                    uint64_t v182 = &v117[-v186];
                    v139 -= v186;
                    uint64_t v187 = &v138[4 * v174 - 16];
                    uint64_t v188 = (long long *)(v117 - 16);
                    uint64_t v189 = v185 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      long long v190 = *v188;
                      *(v187 - 1) = *(v188 - 1);
                      *uint64_t v187 = v190;
                      v187 -= 2;
                      v188 -= 2;
                      v189 -= 8;
                    }
                    while (v189);
                    if (v185 != (v185 & 0x7FFFFFFFFFFFFFF8))
                    {
                      do
                      {
LABEL_318:
                        int v183 = *((_DWORD *)v182 - 1);
                        v182 -= 4;
                        *((_DWORD *)v139 - 1) = v183;
                        v139 -= 4;
                      }
                      while (v182 != v223);
                    }
                  }
                  goto LABEL_223;
                }
LABEL_374:
                sub_1C494A220();
              }
            }
            else
            {
              if (v151 >= *(void *)&v142) {
                v151 %= *(void *)&v142;
              }
              if (v151 != v144) {
                break;
              }
            }
            uint64_t v149 = (uint64_t *)*v149;
          }
          while (v149);
        }
      }
    }
LABEL_243:
    int8x8_t v153 = *(int8x8_t *)((char *)this + 344);
    if (!*(void *)&v153) {
      goto LABEL_200;
    }
    uint8x8_t v154 = (uint8x8_t)vcnt_s8(v153);
    v154.i16[0] = vaddlv_u8(v154);
    if (v154.u32[0] > 1uLL)
    {
      unint64_t v155 = *(int *)(v4 + 4 * v129);
      if (*(void *)&v153 <= v132) {
        unint64_t v155 = v132 % *(void *)&v153;
      }
    }
    else
    {
      unint64_t v155 = (*(void *)&v153 - 1) & v132;
    }
    __int16 v157 = *(uint64_t ***)(*((void *)this + 42) + 8 * v155);
    if (!v157) {
      goto LABEL_200;
    }
    char v158 = *v157;
    if (!v158) {
      goto LABEL_200;
    }
    if (v154.u32[0] < 2uLL)
    {
      uint64_t v159 = *(void *)&v153 - 1;
      while (1)
      {
        uint64_t v161 = v158[1];
        if (v161 == v132)
        {
          if (*((_DWORD *)v158 + 4) == v132) {
            goto LABEL_281;
          }
        }
        else if ((v161 & v159) != v155)
        {
          goto LABEL_200;
        }
        char v158 = (uint64_t *)*v158;
        if (!v158) {
          goto LABEL_200;
        }
      }
    }
    while (1)
    {
      unint64_t v160 = v158[1];
      if (v160 == v132) {
        break;
      }
      if (v160 >= *(void *)&v153) {
        v160 %= *(void *)&v153;
      }
      if (v160 != v155) {
        goto LABEL_200;
      }
LABEL_257:
      char v158 = (uint64_t *)*v158;
      if (!v158) {
        goto LABEL_200;
      }
    }
    if (*((_DWORD *)v158 + 4) != v132) {
      goto LABEL_257;
    }
LABEL_281:
    if (v117 == v223)
    {
      int v224 = 5;
      uint64_t v204 = operator new(4uLL);
      std::string __p = v204;
      *uint64_t v204 = v129;
      unint64_t v226 = v204 + 1;
      uint64_t v227 = (char *)(v204 + 1);
      a3 = v219;
      sub_1C4B1BB48(v219, &v224, 1);
      int v14 = v215;
      unsigned int v11 = v218;
      if (__p)
      {
        unint64_t v226 = __p;
        operator delete(__p);
      }
      goto LABEL_180;
    }
    uint64_t v169 = *((int *)v117 - 1);
    uint64_t v130 = v117 - 4;
    if (!CoreHandwriting::LaTeXSyntaxHelper::checkCompatibleSymbols(this, *(_DWORD *)(v4 + 4 * v169), v132))
    {
      int v224 = 5;
      int v205 = operator new(4uLL);
      std::string __p = v205;
      *int v205 = v129;
      unint64_t v226 = v205 + 1;
      uint64_t v227 = (char *)(v205 + 1);
      a3 = v219;
      sub_1C4B1BB48(v219, &v224, 1);
      int v14 = v215;
      unsigned int v11 = v218;
LABEL_371:
      if (__p)
      {
        unint64_t v226 = __p;
        operator delete(__p);
      }
      double v117 = v223;
      goto LABEL_180;
    }
    if (v129 - *(_DWORD *)v130 == 1)
    {
      int v224 = 6;
      unint64_t v206 = operator new(4uLL);
      std::string __p = v206;
      *unint64_t v206 = v129;
      unint64_t v226 = v206 + 1;
      uint64_t v227 = (char *)(v206 + 1);
      a3 = v219;
      sub_1C4B1BB48(v219, &v224, 1);
      int v14 = v215;
      unsigned int v11 = v218;
      goto LABEL_371;
    }
    int8x8_t v170 = *(int8x8_t *)((char *)this + 264);
    if (v170)
    {
      unint64_t v171 = *(int *)(*v5 + 4 * v129 - 4);
      uint8x8_t v172 = (uint8x8_t)vcnt_s8(v170);
      v172.i16[0] = vaddlv_u8(v172);
      if (v172.u32[0] > 1uLL)
      {
        unint64_t v173 = *(int *)(*v5 + 4 * v129 - 4);
        if (*(void *)&v170 <= v171) {
          unint64_t v173 = v171 % *(void *)&v170;
        }
      }
      else
      {
        unint64_t v173 = (*(void *)&v170 - 1) & v171;
      }
      uint64_t v176 = *(uint64_t ***)(*((void *)this + 32) + 8 * v173);
      if (v176)
      {
        int64_t v177 = *v176;
        if (v177)
        {
          if (v172.u32[0] < 2uLL)
          {
            uint64_t v178 = *(void *)&v170 - 1;
            while (1)
            {
              uint64_t v180 = v177[1];
              if (v180 == v171)
              {
                if (*((_DWORD *)v177 + 4) == v171) {
                  goto LABEL_366;
                }
              }
              else if ((v180 & v178) != v173)
              {
                goto LABEL_198;
              }
              int64_t v177 = (uint64_t *)*v177;
              if (!v177) {
                goto LABEL_198;
              }
            }
          }
          do
          {
            unint64_t v179 = v177[1];
            if (v179 == v171)
            {
              if (*((_DWORD *)v177 + 4) == v171)
              {
LABEL_366:
                int v224 = 7;
                uint64_t v203 = operator new(4uLL);
                std::string __p = v203;
                *uint64_t v203 = v129;
                unint64_t v226 = v203 + 1;
                uint64_t v227 = (char *)(v203 + 1);
                a3 = v219;
                sub_1C4B1BB48(v219, &v224, 1);
                int v14 = v215;
                unsigned int v11 = v218;
                goto LABEL_371;
              }
            }
            else
            {
              if (v179 >= *(void *)&v170) {
                v179 %= *(void *)&v170;
              }
              if (v179 != v173) {
                break;
              }
            }
            int64_t v177 = (uint64_t *)*v177;
          }
          while (v177);
        }
      }
    }
LABEL_198:
    uint64_t v131 = (uint64_t)v130;
LABEL_199:
    double v117 = (char *)v131;
    uint64_t v4 = *v5;
    uint64_t v16 = v5[1];
LABEL_200:
    ++v129;
  }
  while (v129 < (v16 - v4) >> 2);
  int64_t v196 = v117 - v223;
  int v14 = v215;
  unsigned int v11 = v218;
  if (v117 == v223) {
    goto LABEL_353;
  }
  int v224 = 4;
  unint64_t v226 = 0;
  uint64_t v227 = 0;
  std::string __p = 0;
  a3 = v219;
  if (v196 < 0) {
    sub_1C494A220();
  }
  uint64_t v197 = (char *)operator new(v196);
  uint64_t v198 = &v197[4 * (v196 >> 2)];
  std::string __p = v197;
  uint64_t v227 = v198;
  memcpy(v197, v223, v196);
  unint64_t v226 = v198;
  sub_1C4B1BB48(v219, &v224, 1);
  if (__p)
  {
    unint64_t v226 = __p;
    operator delete(__p);
  }
  double v117 = v223;
LABEL_180:
  if (v117) {
    operator delete(v117);
  }
  if (v14 == (char *)v221)
  {
    int v123 = a3 + 1;
    if (a3[1])
    {
      BOOL v124 = a3[1];
      while (1)
      {
        while (1)
        {
          int v125 = v124;
          int v126 = *((_DWORD *)v124 + 8);
          if (v126 < 3) {
            break;
          }
          BOOL v124 = (void *)*v125;
          int v123 = v125;
          if (!*v125) {
            goto LABEL_349;
          }
        }
        if (v126 == 2) {
          break;
        }
        BOOL v124 = (void *)v125[1];
        if (!v124)
        {
          int v123 = v125 + 1;
          goto LABEL_349;
        }
      }
    }
    else
    {
      int v125 = a3 + 1;
LABEL_349:
      uint64_t v199 = operator new(0x40uLL);
      v199[8] = 2;
      *(void *)uint64_t v199 = 0;
      *((void *)v199 + 1) = 0;
      *((void *)v199 + 6) = 0;
      *((void *)v199 + 7) = 0;
      *((void *)v199 + 5) = 0;
      *((void *)v199 + 2) = v125;
      *int v123 = v199;
      unint64_t v200 = (void *)**a3;
      if (v200)
      {
        *a3 = v200;
        uint64_t v199 = (_DWORD *)*v123;
      }
      sub_1C4949FD4(a3[1], (uint64_t *)v199);
      a3[2] = (void *)((char *)a3[2] + 1);
    }
  }
  else
  {
    int v224 = 3;
    unint64_t v226 = 0;
    uint64_t v227 = 0;
    std::string __p = 0;
    int64_t v118 = v11 - v220;
    if (v11 == v220)
    {
      uint64_t v120 = 0;
      int v119 = 0;
      BOOL v122 = a3 + 1;
      size_t v121 = a3[1];
      if (v121) {
        goto LABEL_333;
      }
      goto LABEL_331;
    }
    if (v118 < 0) {
      sub_1C494A220();
    }
    int v119 = (char *)operator new(v11 - v220);
    uint64_t v120 = &v119[4 * (v118 >> 2)];
    std::string __p = v119;
    uint64_t v227 = v120;
    memcpy(v119, v220, v118);
    unint64_t v226 = v120;
    BOOL v122 = a3 + 1;
    size_t v121 = a3[1];
    if (v121)
    {
      while (1)
      {
LABEL_333:
        while (1)
        {
          uint64_t v191 = v121;
          int v192 = *((_DWORD *)v121 + 8);
          if (v192 < 4) {
            break;
          }
          size_t v121 = (void *)*v191;
          BOOL v122 = v191;
          if (!*v191) {
            goto LABEL_337;
          }
        }
        if (v192 == 3) {
          break;
        }
        size_t v121 = (void *)v191[1];
        if (!v121)
        {
          BOOL v122 = v191 + 1;
          goto LABEL_337;
        }
      }
    }
    else
    {
LABEL_331:
      uint64_t v191 = v122;
LABEL_337:
      int v193 = operator new(0x40uLL);
      v193[8] = 3;
      *((void *)v193 + 5) = v119;
      *((void *)v193 + 6) = v120;
      *((void *)v193 + 7) = v120;
      unint64_t v226 = 0;
      uint64_t v227 = 0;
      std::string __p = 0;
      *(void *)int v193 = 0;
      *((void *)v193 + 1) = 0;
      *((void *)v193 + 2) = v191;
      void *v122 = v193;
      uint64_t v194 = (void *)**a3;
      if (v194)
      {
        *a3 = v194;
        int v193 = (_DWORD *)*v122;
      }
      sub_1C4949FD4(a3[1], (uint64_t *)v193);
      a3[2] = (void *)((char *)a3[2] + 1);
      int v119 = (char *)__p;
    }
    if (v119)
    {
      uint64_t v195 = v119;
      goto LABEL_360;
    }
  }
LABEL_361:
  if (v220) {
    operator delete(v220);
  }
  if (v221) {
    operator delete(v221);
  }
}

void sub_1C4B19A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a16)
  {
    operator delete(a16);
    unint64_t v28 = a19;
    if (!a19) {
LABEL_7:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v28 = a19;
    if (!a19) {
      goto LABEL_7;
    }
  }
  operator delete(v28);
  _Unwind_Resume(exception_object);
}

BOOL CoreHandwriting::LaTeXSyntaxHelper::checkCompatibleSymbols(CoreHandwriting::LaTeXSyntaxHelper *this, int a2, int a3)
{
  unint64_t v3 = *((void *)this + 48);
  if (!v3) {
    return 0;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = a2;
    if (v3 <= a2) {
      unint64_t v5 = a2 % v3;
    }
  }
  else
  {
    unint64_t v5 = (v3 - 1) & a2;
  }
  uint64_t v6 = *((void *)this + 47);
  unint64_t v7 = *(uint64_t ***)(v6 + 8 * v5);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *v7;
  if (!*v7) {
    return 0;
  }
  unint64_t v9 = v3 - 1;
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v10 = v8[1];
      if (v10 == a2)
      {
        if (*((_DWORD *)v8 + 4) == a2) {
          goto LABEL_22;
        }
      }
      else if ((v10 & v9) != v5)
      {
        return 0;
      }
      uint64_t v8 = (uint64_t *)*v8;
      if (!v8) {
        return 0;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v8[1];
    if (v11 == a2) {
      break;
    }
    if (v11 >= v3) {
      v11 %= v3;
    }
    if (v11 != v5) {
      return 0;
    }
LABEL_16:
    uint64_t v8 = (uint64_t *)*v8;
    if (!v8) {
      return 0;
    }
  }
  if (*((_DWORD *)v8 + 4) != a2) {
    goto LABEL_16;
  }
LABEL_22:
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v13 = a2;
    if (v3 <= a2) {
      unint64_t v13 = a2 % v3;
    }
  }
  else
  {
    unint64_t v13 = v9 & a2;
  }
  int v14 = *(uint64_t ***)(v6 + 8 * v13);
  if (!v14 || (unint64_t v15 = *v14) == 0) {
LABEL_42:
  }
    sub_1C49470F0("unordered_map::at: key not found");
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v16 = v15[1];
      if (v16 == a2)
      {
        if (*((_DWORD *)v15 + 4) == a2) {
          return *((_DWORD *)v15 + 5) == a3;
        }
      }
      else if ((v16 & v9) != v13)
      {
        goto LABEL_42;
      }
      unint64_t v15 = (uint64_t *)*v15;
      if (!v15) {
        goto LABEL_42;
      }
    }
  }
  while (2)
  {
    unint64_t v17 = v15[1];
    if (v17 != a2)
    {
      if (v17 >= v3) {
        v17 %= v3;
      }
      if (v17 != v13) {
        goto LABEL_42;
      }
      goto LABEL_36;
    }
    if (*((_DWORD *)v15 + 4) != a2)
    {
LABEL_36:
      unint64_t v15 = (uint64_t *)*v15;
      if (!v15) {
        goto LABEL_42;
      }
      continue;
    }
    return *((_DWORD *)v15 + 5) == a3;
  }
}

uint64_t sub_1C4B19D48(uint64_t a1)
{
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  unint64_t v2 = operator new(0x10uLL);
  unint64_t v5 = v2 + 2;
  uint64_t v6 = v2 + 2;
  void *v2 = 0;
  v2[1] = 0;
  std::string __p = v2;
  sub_1C4BDF4EC((char **)a1, (char **)&__p);
  if (__p)
  {
    unint64_t v5 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_1C4B19DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v13 = *(void **)(v11 + 48);
    if (!v13)
    {
LABEL_3:
      int v14 = *(void **)(v11 + 24);
      if (!v14) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unint64_t v13 = *(void **)(v11 + 48);
    if (!v13) {
      goto LABEL_3;
    }
  }
  *(void *)(v11 + 56) = v13;
  operator delete(v13);
  int v14 = *(void **)(v11 + 24);
  if (!v14)
  {
LABEL_4:
    unint64_t v15 = *(void **)v11;
    if (!*(void *)v11) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  *(void *)(v11 + 32) = v14;
  operator delete(v14);
  unint64_t v15 = *(void **)v11;
  if (!*(void *)v11) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  *(void *)(v11 + 8) = v15;
  operator delete(v15);
  _Unwind_Resume(exception_object);
}

void sub_1C4B19E34(char **a1, char *a2, _OWORD *a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 < v9)
  {
    if (v8 == (char *)v5)
    {
      *(_OWORD *)uint64_t v8 = *a3;
      a1[1] = v8 + 16;
    }
    else
    {
      uint64_t v10 = v8 + 16;
      uint64_t v11 = (long long *)(v5 - 16);
      int v12 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          long long v13 = *v11++;
          *(_OWORD *)int v12 = v13;
          v12 += 16;
        }
        while ((unint64_t)v11 < v5);
      }
      a1[1] = v12;
      if ((_OWORD *)v5 != v10) {
        memmove((void *)(v5 - 16 * ((uint64_t)(v5 - (void)v10) >> 4)), v8, v5 - (void)v10);
      }
      *(_OWORD *)uint64_t v8 = *a3;
    }
    return;
  }
  unint64_t v14 = ((uint64_t)(v5 - (void)v6) >> 4) + 1;
  if (v14 >> 60) {
    sub_1C494A220();
  }
  uint64_t v16 = v9 - (void)v6;
  if (v16 >> 3 > v14) {
    unint64_t v14 = v16 >> 3;
  }
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v17 = v14;
  }
  if (v17)
  {
    if (v17 >> 60) {
      sub_1C4949AA8();
    }
    unint64_t v18 = (char *)operator new(16 * v17);
    uint64_t v19 = v7 >> 4;
    unint64_t v20 = &v18[16 * (v7 >> 4)];
    uint64_t v21 = &v18[16 * v17];
    if (v7 >> 4 != v17) {
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  unint64_t v18 = 0;
  uint64_t v19 = v7 >> 4;
  unint64_t v20 = (char *)(16 * (v7 >> 4));
  uint64_t v21 = 0;
  if (!(v7 >> 4))
  {
LABEL_20:
    if (v7 < 1)
    {
      if (v6 == a2) {
        unint64_t v23 = 1;
      }
      else {
        unint64_t v23 = v7 >> 3;
      }
      if (v23 >> 60) {
        sub_1C4949AA8();
      }
      unint64_t v20 = (char *)operator new(16 * v23);
      uint64_t v21 = &v20[16 * v23];
      if (v18)
      {
        operator delete(v18);
        uint64_t v6 = *a1;
      }
    }
    else
    {
      if (v19 >= -1) {
        unint64_t v22 = v19 + 1;
      }
      else {
        unint64_t v22 = v19 + 2;
      }
      v20 -= 16 * (v22 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)unint64_t v20 = *a3;
  unint64_t v24 = v20;
  if (v6 != v8)
  {
    uint64_t v25 = v8;
    unint64_t v26 = v20;
    do
    {
      unint64_t v24 = v26 - 16;
      *((_OWORD *)v26 - 1) = *((_OWORD *)v25 - 1);
      v25 -= 16;
      v26 -= 16;
    }
    while (v25 != v6);
  }
  uint8x8_t v27 = v20 + 16;
  unint64_t v28 = a1[1];
  int64_t v29 = v28 - v8;
  if (v28 != v8) {
    memmove(v27, v8, v28 - v8);
  }
  uint64_t v30 = *a1;
  *a1 = v24;
  a1[1] = &v27[v29];
  a1[2] = v21;
  if (v30)
  {
    operator delete(v30);
  }
}

void sub_1C4B1A080(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1C4B1A098(uint64_t **a1, const char *a2)
{
  uint8x8_t v4 = a1 + 1;
  unint64_t v5 = (char *)operator new(0x38uLL);
  unint64_t v31 = v5;
  uint64_t v6 = v5 + 32;
  size_t v7 = strlen(a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1C4949B7C();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v12 = v7 | 7;
    }
    uint64_t v13 = v12 + 1;
    uint64_t v6 = operator new(v12 + 1);
    *((void *)v5 + 5) = v8;
    *((void *)v5 + 6) = v13 | 0x8000000000000000;
    *((void *)v5 + 4) = v6;
  }
  else
  {
    v5[55] = v7;
    if (!v7)
    {
      unsigned char *v6 = 0;
      unint64_t v9 = v5;
      uint64_t v10 = (void *)*v4;
      uint64_t v11 = v4;
      if (!*v4) {
        goto LABEL_34;
      }
      goto LABEL_10;
    }
  }
  memcpy(v6, a2, v8);
  v6[v8] = 0;
  unint64_t v9 = v5;
  uint64_t v10 = (void *)*v4;
  uint64_t v11 = v4;
  if (!*v4)
  {
LABEL_34:
    *(void *)unint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v11;
    void *v4 = v9;
    int64_t v29 = (uint64_t *)**a1;
    if (v29)
    {
      *a1 = v29;
      unint64_t v9 = (char *)*v4;
    }
    sub_1C4949FD4(a1[1], (uint64_t *)v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v31;
  }
LABEL_10:
  unint64_t v14 = (void *)*((void *)v9 + 4);
  int v15 = v9[55];
  if (v15 < 0) {
    size_t v16 = *((void *)v9 + 5);
  }
  else {
    size_t v16 = v9[55];
  }
  if (v15 < 0) {
    unint64_t v17 = (const void *)*((void *)v9 + 4);
  }
  else {
    unint64_t v17 = v9 + 32;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v11 = v10;
      unint64_t v20 = (const void *)v10[4];
      unint64_t v18 = v10 + 4;
      uint64_t v19 = v20;
      int v21 = *((char *)v18 + 23);
      if (v21 >= 0) {
        size_t v22 = *((unsigned __int8 *)v18 + 23);
      }
      else {
        size_t v22 = v18[1];
      }
      if (v21 >= 0) {
        unint64_t v23 = v18;
      }
      else {
        unint64_t v23 = v19;
      }
      if (v22 >= v16) {
        size_t v24 = v16;
      }
      else {
        size_t v24 = v22;
      }
      int v25 = memcmp(v17, v23, v24);
      BOOL v26 = v16 < v22;
      if (v25) {
        BOOL v26 = v25 < 0;
      }
      if (!v26) {
        break;
      }
      uint64_t v10 = (void *)*v11;
      uint8x8_t v4 = v11;
      if (!*v11) {
        goto LABEL_34;
      }
    }
    int v27 = memcmp(v23, v17, v24);
    BOOL v28 = v22 < v16;
    if (v27) {
      BOOL v28 = v27 < 0;
    }
    if (!v28) {
      break;
    }
    uint64_t v10 = (void *)v11[1];
    if (!v10)
    {
      uint8x8_t v4 = v11 + 1;
      goto LABEL_34;
    }
  }
  if (v9)
  {
    if (v15 < 0) {
      operator delete(v14);
    }
    operator delete(v9);
  }
  return (char *)v11;
}

void sub_1C4B1A2C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4B1A2D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1C4B1A2D4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 55) < 0) {
      operator delete(*(void **)(v2 + 32));
    }
    operator delete((void *)v2);
  }
  return a1;
}

char *sub_1C4B1A324(uint64_t **a1, const char *a2)
{
  uint8x8_t v4 = a1 + 1;
  unint64_t v5 = (char *)operator new(0x38uLL);
  unint64_t v31 = v5;
  uint64_t v6 = v5 + 32;
  size_t v7 = strlen(a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1C4949B7C();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v12 = v7 | 7;
    }
    uint64_t v13 = v12 + 1;
    uint64_t v6 = operator new(v12 + 1);
    *((void *)v5 + 5) = v8;
    *((void *)v5 + 6) = v13 | 0x8000000000000000;
    *((void *)v5 + 4) = v6;
  }
  else
  {
    v5[55] = v7;
    if (!v7)
    {
      unsigned char *v6 = 0;
      unint64_t v9 = v5;
      uint64_t v10 = (void *)*v4;
      uint64_t v11 = v4;
      if (!*v4) {
        goto LABEL_34;
      }
      goto LABEL_10;
    }
  }
  memcpy(v6, a2, v8);
  v6[v8] = 0;
  unint64_t v9 = v5;
  uint64_t v10 = (void *)*v4;
  uint64_t v11 = v4;
  if (!*v4)
  {
LABEL_34:
    *(void *)unint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v11;
    void *v4 = v9;
    int64_t v29 = (uint64_t *)**a1;
    if (v29)
    {
      *a1 = v29;
      unint64_t v9 = (char *)*v4;
    }
    sub_1C4949FD4(a1[1], (uint64_t *)v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v31;
  }
LABEL_10:
  unint64_t v14 = (void *)*((void *)v9 + 4);
  int v15 = v9[55];
  if (v15 < 0) {
    size_t v16 = *((void *)v9 + 5);
  }
  else {
    size_t v16 = v9[55];
  }
  if (v15 < 0) {
    unint64_t v17 = (const void *)*((void *)v9 + 4);
  }
  else {
    unint64_t v17 = v9 + 32;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v11 = v10;
      unint64_t v20 = (const void *)v10[4];
      unint64_t v18 = v10 + 4;
      uint64_t v19 = v20;
      int v21 = *((char *)v18 + 23);
      if (v21 >= 0) {
        size_t v22 = *((unsigned __int8 *)v18 + 23);
      }
      else {
        size_t v22 = v18[1];
      }
      if (v21 >= 0) {
        unint64_t v23 = v18;
      }
      else {
        unint64_t v23 = v19;
      }
      if (v22 >= v16) {
        size_t v24 = v16;
      }
      else {
        size_t v24 = v22;
      }
      int v25 = memcmp(v17, v23, v24);
      BOOL v26 = v16 < v22;
      if (v25) {
        BOOL v26 = v25 < 0;
      }
      if (!v26) {
        break;
      }
      uint64_t v10 = (void *)*v11;
      uint8x8_t v4 = v11;
      if (!*v11) {
        goto LABEL_34;
      }
    }
    int v27 = memcmp(v23, v17, v24);
    BOOL v28 = v22 < v16;
    if (v27) {
      BOOL v28 = v27 < 0;
    }
    if (!v28) {
      break;
    }
    uint64_t v10 = (void *)v11[1];
    if (!v10)
    {
      uint8x8_t v4 = v11 + 1;
      goto LABEL_34;
    }
  }
  if (v9)
  {
    if (v15 < 0) {
      operator delete(v14);
    }
    operator delete(v9);
  }
  return (char *)v11;
}

void sub_1C4B1A54C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4B1A2D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_1C4B1A560(uint64_t **a1, const char *a2)
{
  uint8x8_t v4 = a1 + 1;
  unint64_t v5 = (char *)operator new(0x38uLL);
  unint64_t v31 = v5;
  uint64_t v6 = v5 + 32;
  size_t v7 = strlen(a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1C4949B7C();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v12 = v7 | 7;
    }
    uint64_t v13 = v12 + 1;
    uint64_t v6 = operator new(v12 + 1);
    *((void *)v5 + 5) = v8;
    *((void *)v5 + 6) = v13 | 0x8000000000000000;
    *((void *)v5 + 4) = v6;
  }
  else
  {
    v5[55] = v7;
    if (!v7)
    {
      unsigned char *v6 = 0;
      unint64_t v9 = v5;
      uint64_t v10 = (void *)*v4;
      uint64_t v11 = v4;
      if (!*v4) {
        goto LABEL_34;
      }
      goto LABEL_10;
    }
  }
  memcpy(v6, a2, v8);
  v6[v8] = 0;
  unint64_t v9 = v5;
  uint64_t v10 = (void *)*v4;
  uint64_t v11 = v4;
  if (!*v4)
  {
LABEL_34:
    *(void *)unint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v11;
    void *v4 = v9;
    int64_t v29 = (uint64_t *)**a1;
    if (v29)
    {
      *a1 = v29;
      unint64_t v9 = (char *)*v4;
    }
    sub_1C4949FD4(a1[1], (uint64_t *)v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v31;
  }
LABEL_10:
  unint64_t v14 = (void *)*((void *)v9 + 4);
  int v15 = v9[55];
  if (v15 < 0) {
    size_t v16 = *((void *)v9 + 5);
  }
  else {
    size_t v16 = v9[55];
  }
  if (v15 < 0) {
    unint64_t v17 = (const void *)*((void *)v9 + 4);
  }
  else {
    unint64_t v17 = v9 + 32;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v11 = v10;
      unint64_t v20 = (const void *)v10[4];
      unint64_t v18 = v10 + 4;
      uint64_t v19 = v20;
      int v21 = *((char *)v18 + 23);
      if (v21 >= 0) {
        size_t v22 = *((unsigned __int8 *)v18 + 23);
      }
      else {
        size_t v22 = v18[1];
      }
      if (v21 >= 0) {
        unint64_t v23 = v18;
      }
      else {
        unint64_t v23 = v19;
      }
      if (v22 >= v16) {
        size_t v24 = v16;
      }
      else {
        size_t v24 = v22;
      }
      int v25 = memcmp(v17, v23, v24);
      BOOL v26 = v16 < v22;
      if (v25) {
        BOOL v26 = v25 < 0;
      }
      if (!v26) {
        break;
      }
      uint64_t v10 = (void *)*v11;
      uint8x8_t v4 = v11;
      if (!*v11) {
        goto LABEL_34;
      }
    }
    int v27 = memcmp(v23, v17, v24);
    BOOL v28 = v22 < v16;
    if (v27) {
      BOOL v28 = v27 < 0;
    }
    if (!v28) {
      break;
    }
    uint64_t v10 = (void *)v11[1];
    if (!v10)
    {
      uint8x8_t v4 = v11 + 1;
      goto LABEL_34;
    }
  }
  if (v9)
  {
    if (v15 < 0) {
      operator delete(v14);
    }
    operator delete(v9);
  }
  return (char *)v11;
}

void sub_1C4B1A788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4B1A2D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_1C4B1A79C(uint64_t **a1, const char *a2)
{
  uint8x8_t v4 = a1 + 1;
  unint64_t v5 = (char *)operator new(0x38uLL);
  unint64_t v31 = v5;
  uint64_t v6 = v5 + 32;
  size_t v7 = strlen(a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1C4949B7C();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v12 = v7 | 7;
    }
    uint64_t v13 = v12 + 1;
    uint64_t v6 = operator new(v12 + 1);
    *((void *)v5 + 5) = v8;
    *((void *)v5 + 6) = v13 | 0x8000000000000000;
    *((void *)v5 + 4) = v6;
  }
  else
  {
    v5[55] = v7;
    if (!v7)
    {
      unsigned char *v6 = 0;
      unint64_t v9 = v5;
      uint64_t v10 = (void *)*v4;
      uint64_t v11 = v4;
      if (!*v4) {
        goto LABEL_34;
      }
      goto LABEL_10;
    }
  }
  memcpy(v6, a2, v8);
  v6[v8] = 0;
  unint64_t v9 = v5;
  uint64_t v10 = (void *)*v4;
  uint64_t v11 = v4;
  if (!*v4)
  {
LABEL_34:
    *(void *)unint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v11;
    void *v4 = v9;
    int64_t v29 = (uint64_t *)**a1;
    if (v29)
    {
      *a1 = v29;
      unint64_t v9 = (char *)*v4;
    }
    sub_1C4949FD4(a1[1], (uint64_t *)v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v31;
  }
LABEL_10:
  unint64_t v14 = (void *)*((void *)v9 + 4);
  int v15 = v9[55];
  if (v15 < 0) {
    size_t v16 = *((void *)v9 + 5);
  }
  else {
    size_t v16 = v9[55];
  }
  if (v15 < 0) {
    unint64_t v17 = (const void *)*((void *)v9 + 4);
  }
  else {
    unint64_t v17 = v9 + 32;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v11 = v10;
      unint64_t v20 = (const void *)v10[4];
      unint64_t v18 = v10 + 4;
      uint64_t v19 = v20;
      int v21 = *((char *)v18 + 23);
      if (v21 >= 0) {
        size_t v22 = *((unsigned __int8 *)v18 + 23);
      }
      else {
        size_t v22 = v18[1];
      }
      if (v21 >= 0) {
        unint64_t v23 = v18;
      }
      else {
        unint64_t v23 = v19;
      }
      if (v22 >= v16) {
        size_t v24 = v16;
      }
      else {
        size_t v24 = v22;
      }
      int v25 = memcmp(v17, v23, v24);
      BOOL v26 = v16 < v22;
      if (v25) {
        BOOL v26 = v25 < 0;
      }
      if (!v26) {
        break;
      }
      uint64_t v10 = (void *)*v11;
      uint8x8_t v4 = v11;
      if (!*v11) {
        goto LABEL_34;
      }
    }
    int v27 = memcmp(v23, v17, v24);
    BOOL v28 = v22 < v16;
    if (v27) {
      BOOL v28 = v27 < 0;
    }
    if (!v28) {
      break;
    }
    uint64_t v10 = (void *)v11[1];
    if (!v10)
    {
      uint8x8_t v4 = v11 + 1;
      goto LABEL_34;
    }
  }
  if (v9)
  {
    if (v15 < 0) {
      operator delete(v14);
    }
    operator delete(v9);
  }
  return (char *)v11;
}

void sub_1C4B1A9C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4B1A2D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_1C4B1A9D8(uint64_t **a1, const char *a2)
{
  uint8x8_t v4 = a1 + 1;
  unint64_t v5 = (char *)operator new(0x38uLL);
  unint64_t v31 = v5;
  uint64_t v6 = v5 + 32;
  size_t v7 = strlen(a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1C4949B7C();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v12 = v7 | 7;
    }
    uint64_t v13 = v12 + 1;
    uint64_t v6 = operator new(v12 + 1);
    *((void *)v5 + 5) = v8;
    *((void *)v5 + 6) = v13 | 0x8000000000000000;
    *((void *)v5 + 4) = v6;
  }
  else
  {
    v5[55] = v7;
    if (!v7)
    {
      unsigned char *v6 = 0;
      unint64_t v9 = v5;
      uint64_t v10 = (void *)*v4;
      uint64_t v11 = v4;
      if (!*v4) {
        goto LABEL_34;
      }
      goto LABEL_10;
    }
  }
  memcpy(v6, a2, v8);
  v6[v8] = 0;
  unint64_t v9 = v5;
  uint64_t v10 = (void *)*v4;
  uint64_t v11 = v4;
  if (!*v4)
  {
LABEL_34:
    *(void *)unint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v11;
    void *v4 = v9;
    int64_t v29 = (uint64_t *)**a1;
    if (v29)
    {
      *a1 = v29;
      unint64_t v9 = (char *)*v4;
    }
    sub_1C4949FD4(a1[1], (uint64_t *)v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v31;
  }
LABEL_10:
  unint64_t v14 = (void *)*((void *)v9 + 4);
  int v15 = v9[55];
  if (v15 < 0) {
    size_t v16 = *((void *)v9 + 5);
  }
  else {
    size_t v16 = v9[55];
  }
  if (v15 < 0) {
    unint64_t v17 = (const void *)*((void *)v9 + 4);
  }
  else {
    unint64_t v17 = v9 + 32;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v11 = v10;
      unint64_t v20 = (const void *)v10[4];
      unint64_t v18 = v10 + 4;
      uint64_t v19 = v20;
      int v21 = *((char *)v18 + 23);
      if (v21 >= 0) {
        size_t v22 = *((unsigned __int8 *)v18 + 23);
      }
      else {
        size_t v22 = v18[1];
      }
      if (v21 >= 0) {
        unint64_t v23 = v18;
      }
      else {
        unint64_t v23 = v19;
      }
      if (v22 >= v16) {
        size_t v24 = v16;
      }
      else {
        size_t v24 = v22;
      }
      int v25 = memcmp(v17, v23, v24);
      BOOL v26 = v16 < v22;
      if (v25) {
        BOOL v26 = v25 < 0;
      }
      if (!v26) {
        break;
      }
      uint64_t v10 = (void *)*v11;
      uint8x8_t v4 = v11;
      if (!*v11) {
        goto LABEL_34;
      }
    }
    int v27 = memcmp(v23, v17, v24);
    BOOL v28 = v22 < v16;
    if (v27) {
      BOOL v28 = v27 < 0;
    }
    if (!v28) {
      break;
    }
    uint64_t v10 = (void *)v11[1];
    if (!v10)
    {
      uint8x8_t v4 = v11 + 1;
      goto LABEL_34;
    }
  }
  if (v9)
  {
    if (v15 < 0) {
      operator delete(v14);
    }
    operator delete(v9);
  }
  return (char *)v11;
}

void sub_1C4B1AC00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4B1A2D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_1C4B1AC14(uint64_t **a1, const char *a2)
{
  uint8x8_t v4 = a1 + 1;
  unint64_t v5 = (char *)operator new(0x38uLL);
  unint64_t v31 = v5;
  uint64_t v6 = v5 + 32;
  size_t v7 = strlen(a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1C4949B7C();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v12 = v7 | 7;
    }
    uint64_t v13 = v12 + 1;
    uint64_t v6 = operator new(v12 + 1);
    *((void *)v5 + 5) = v8;
    *((void *)v5 + 6) = v13 | 0x8000000000000000;
    *((void *)v5 + 4) = v6;
  }
  else
  {
    v5[55] = v7;
    if (!v7)
    {
      unsigned char *v6 = 0;
      unint64_t v9 = v5;
      uint64_t v10 = (void *)*v4;
      uint64_t v11 = v4;
      if (!*v4) {
        goto LABEL_34;
      }
      goto LABEL_10;
    }
  }
  memcpy(v6, a2, v8);
  v6[v8] = 0;
  unint64_t v9 = v5;
  uint64_t v10 = (void *)*v4;
  uint64_t v11 = v4;
  if (!*v4)
  {
LABEL_34:
    *(void *)unint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v11;
    void *v4 = v9;
    int64_t v29 = (uint64_t *)**a1;
    if (v29)
    {
      *a1 = v29;
      unint64_t v9 = (char *)*v4;
    }
    sub_1C4949FD4(a1[1], (uint64_t *)v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v31;
  }
LABEL_10:
  unint64_t v14 = (void *)*((void *)v9 + 4);
  int v15 = v9[55];
  if (v15 < 0) {
    size_t v16 = *((void *)v9 + 5);
  }
  else {
    size_t v16 = v9[55];
  }
  if (v15 < 0) {
    unint64_t v17 = (const void *)*((void *)v9 + 4);
  }
  else {
    unint64_t v17 = v9 + 32;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v11 = v10;
      unint64_t v20 = (const void *)v10[4];
      unint64_t v18 = v10 + 4;
      uint64_t v19 = v20;
      int v21 = *((char *)v18 + 23);
      if (v21 >= 0) {
        size_t v22 = *((unsigned __int8 *)v18 + 23);
      }
      else {
        size_t v22 = v18[1];
      }
      if (v21 >= 0) {
        unint64_t v23 = v18;
      }
      else {
        unint64_t v23 = v19;
      }
      if (v22 >= v16) {
        size_t v24 = v16;
      }
      else {
        size_t v24 = v22;
      }
      int v25 = memcmp(v17, v23, v24);
      BOOL v26 = v16 < v22;
      if (v25) {
        BOOL v26 = v25 < 0;
      }
      if (!v26) {
        break;
      }
      uint64_t v10 = (void *)*v11;
      uint8x8_t v4 = v11;
      if (!*v11) {
        goto LABEL_34;
      }
    }
    int v27 = memcmp(v23, v17, v24);
    BOOL v28 = v22 < v16;
    if (v27) {
      BOOL v28 = v27 < 0;
    }
    if (!v28) {
      break;
    }
    uint64_t v10 = (void *)v11[1];
    if (!v10)
    {
      uint8x8_t v4 = v11 + 1;
      goto LABEL_34;
    }
  }
  if (v9)
  {
    if (v15 < 0) {
      operator delete(v14);
    }
    operator delete(v9);
  }
  return (char *)v11;
}

void sub_1C4B1AE3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4B1A2D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_1C4B1AE50(uint64_t **a1, const char *a2)
{
  uint8x8_t v4 = a1 + 1;
  unint64_t v5 = (char *)operator new(0x38uLL);
  unint64_t v31 = v5;
  uint64_t v6 = v5 + 32;
  size_t v7 = strlen(a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1C4949B7C();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v12 = v7 | 7;
    }
    uint64_t v13 = v12 + 1;
    uint64_t v6 = operator new(v12 + 1);
    *((void *)v5 + 5) = v8;
    *((void *)v5 + 6) = v13 | 0x8000000000000000;
    *((void *)v5 + 4) = v6;
  }
  else
  {
    v5[55] = v7;
    if (!v7)
    {
      unsigned char *v6 = 0;
      unint64_t v9 = v5;
      uint64_t v10 = (void *)*v4;
      uint64_t v11 = v4;
      if (!*v4) {
        goto LABEL_34;
      }
      goto LABEL_10;
    }
  }
  memcpy(v6, a2, v8);
  v6[v8] = 0;
  unint64_t v9 = v5;
  uint64_t v10 = (void *)*v4;
  uint64_t v11 = v4;
  if (!*v4)
  {
LABEL_34:
    *(void *)unint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v11;
    void *v4 = v9;
    int64_t v29 = (uint64_t *)**a1;
    if (v29)
    {
      *a1 = v29;
      unint64_t v9 = (char *)*v4;
    }
    sub_1C4949FD4(a1[1], (uint64_t *)v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v31;
  }
LABEL_10:
  unint64_t v14 = (void *)*((void *)v9 + 4);
  int v15 = v9[55];
  if (v15 < 0) {
    size_t v16 = *((void *)v9 + 5);
  }
  else {
    size_t v16 = v9[55];
  }
  if (v15 < 0) {
    unint64_t v17 = (const void *)*((void *)v9 + 4);
  }
  else {
    unint64_t v17 = v9 + 32;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v11 = v10;
      unint64_t v20 = (const void *)v10[4];
      unint64_t v18 = v10 + 4;
      uint64_t v19 = v20;
      int v21 = *((char *)v18 + 23);
      if (v21 >= 0) {
        size_t v22 = *((unsigned __int8 *)v18 + 23);
      }
      else {
        size_t v22 = v18[1];
      }
      if (v21 >= 0) {
        unint64_t v23 = v18;
      }
      else {
        unint64_t v23 = v19;
      }
      if (v22 >= v16) {
        size_t v24 = v16;
      }
      else {
        size_t v24 = v22;
      }
      int v25 = memcmp(v17, v23, v24);
      BOOL v26 = v16 < v22;
      if (v25) {
        BOOL v26 = v25 < 0;
      }
      if (!v26) {
        break;
      }
      uint64_t v10 = (void *)*v11;
      uint8x8_t v4 = v11;
      if (!*v11) {
        goto LABEL_34;
      }
    }
    int v27 = memcmp(v23, v17, v24);
    BOOL v28 = v22 < v16;
    if (v27) {
      BOOL v28 = v27 < 0;
    }
    if (!v28) {
      break;
    }
    uint64_t v10 = (void *)v11[1];
    if (!v10)
    {
      uint8x8_t v4 = v11 + 1;
      goto LABEL_34;
    }
  }
  if (v9)
  {
    if (v15 < 0) {
      operator delete(v14);
    }
    operator delete(v9);
  }
  return (char *)v11;
}

void sub_1C4B1B078(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4B1A2D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_1C4B1B08C(uint64_t **a1, const char *a2)
{
  uint8x8_t v4 = a1 + 1;
  unint64_t v5 = (char *)operator new(0x38uLL);
  unint64_t v31 = v5;
  uint64_t v6 = v5 + 32;
  size_t v7 = strlen(a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1C4949B7C();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v12 = v7 | 7;
    }
    uint64_t v13 = v12 + 1;
    uint64_t v6 = operator new(v12 + 1);
    *((void *)v5 + 5) = v8;
    *((void *)v5 + 6) = v13 | 0x8000000000000000;
    *((void *)v5 + 4) = v6;
  }
  else
  {
    v5[55] = v7;
    if (!v7)
    {
      unsigned char *v6 = 0;
      unint64_t v9 = v5;
      uint64_t v10 = (void *)*v4;
      uint64_t v11 = v4;
      if (!*v4) {
        goto LABEL_34;
      }
      goto LABEL_10;
    }
  }
  memcpy(v6, a2, v8);
  v6[v8] = 0;
  unint64_t v9 = v5;
  uint64_t v10 = (void *)*v4;
  uint64_t v11 = v4;
  if (!*v4)
  {
LABEL_34:
    *(void *)unint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v11;
    void *v4 = v9;
    int64_t v29 = (uint64_t *)**a1;
    if (v29)
    {
      *a1 = v29;
      unint64_t v9 = (char *)*v4;
    }
    sub_1C4949FD4(a1[1], (uint64_t *)v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v31;
  }
LABEL_10:
  unint64_t v14 = (void *)*((void *)v9 + 4);
  int v15 = v9[55];
  if (v15 < 0) {
    size_t v16 = *((void *)v9 + 5);
  }
  else {
    size_t v16 = v9[55];
  }
  if (v15 < 0) {
    unint64_t v17 = (const void *)*((void *)v9 + 4);
  }
  else {
    unint64_t v17 = v9 + 32;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v11 = v10;
      unint64_t v20 = (const void *)v10[4];
      unint64_t v18 = v10 + 4;
      uint64_t v19 = v20;
      int v21 = *((char *)v18 + 23);
      if (v21 >= 0) {
        size_t v22 = *((unsigned __int8 *)v18 + 23);
      }
      else {
        size_t v22 = v18[1];
      }
      if (v21 >= 0) {
        unint64_t v23 = v18;
      }
      else {
        unint64_t v23 = v19;
      }
      if (v22 >= v16) {
        size_t v24 = v16;
      }
      else {
        size_t v24 = v22;
      }
      int v25 = memcmp(v17, v23, v24);
      BOOL v26 = v16 < v22;
      if (v25) {
        BOOL v26 = v25 < 0;
      }
      if (!v26) {
        break;
      }
      uint64_t v10 = (void *)*v11;
      uint8x8_t v4 = v11;
      if (!*v11) {
        goto LABEL_34;
      }
    }
    int v27 = memcmp(v23, v17, v24);
    BOOL v28 = v22 < v16;
    if (v27) {
      BOOL v28 = v27 < 0;
    }
    if (!v28) {
      break;
    }
    uint64_t v10 = (void *)v11[1];
    if (!v10)
    {
      uint8x8_t v4 = v11 + 1;
      goto LABEL_34;
    }
  }
  if (v9)
  {
    if (v15 < 0) {
      operator delete(v14);
    }
    operator delete(v9);
  }
  return (char *)v11;
}

void sub_1C4B1B2B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4B1A2D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_1C4B1B2C8(uint64_t **a1, const char *a2)
{
  uint8x8_t v4 = a1 + 1;
  unint64_t v5 = (char *)operator new(0x38uLL);
  unint64_t v31 = v5;
  uint64_t v6 = v5 + 32;
  size_t v7 = strlen(a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1C4949B7C();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v12 = v7 | 7;
    }
    uint64_t v13 = v12 + 1;
    uint64_t v6 = operator new(v12 + 1);
    *((void *)v5 + 5) = v8;
    *((void *)v5 + 6) = v13 | 0x8000000000000000;
    *((void *)v5 + 4) = v6;
  }
  else
  {
    v5[55] = v7;
    if (!v7)
    {
      unsigned char *v6 = 0;
      unint64_t v9 = v5;
      uint64_t v10 = (void *)*v4;
      uint64_t v11 = v4;
      if (!*v4) {
        goto LABEL_34;
      }
      goto LABEL_10;
    }
  }
  memcpy(v6, a2, v8);
  v6[v8] = 0;
  unint64_t v9 = v5;
  uint64_t v10 = (void *)*v4;
  uint64_t v11 = v4;
  if (!*v4)
  {
LABEL_34:
    *(void *)unint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v11;
    void *v4 = v9;
    int64_t v29 = (uint64_t *)**a1;
    if (v29)
    {
      *a1 = v29;
      unint64_t v9 = (char *)*v4;
    }
    sub_1C4949FD4(a1[1], (uint64_t *)v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v31;
  }
LABEL_10:
  unint64_t v14 = (void *)*((void *)v9 + 4);
  int v15 = v9[55];
  if (v15 < 0) {
    size_t v16 = *((void *)v9 + 5);
  }
  else {
    size_t v16 = v9[55];
  }
  if (v15 < 0) {
    unint64_t v17 = (const void *)*((void *)v9 + 4);
  }
  else {
    unint64_t v17 = v9 + 32;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v11 = v10;
      unint64_t v20 = (const void *)v10[4];
      unint64_t v18 = v10 + 4;
      uint64_t v19 = v20;
      int v21 = *((char *)v18 + 23);
      if (v21 >= 0) {
        size_t v22 = *((unsigned __int8 *)v18 + 23);
      }
      else {
        size_t v22 = v18[1];
      }
      if (v21 >= 0) {
        unint64_t v23 = v18;
      }
      else {
        unint64_t v23 = v19;
      }
      if (v22 >= v16) {
        size_t v24 = v16;
      }
      else {
        size_t v24 = v22;
      }
      int v25 = memcmp(v17, v23, v24);
      BOOL v26 = v16 < v22;
      if (v25) {
        BOOL v26 = v25 < 0;
      }
      if (!v26) {
        break;
      }
      uint64_t v10 = (void *)*v11;
      uint8x8_t v4 = v11;
      if (!*v11) {
        goto LABEL_34;
      }
    }
    int v27 = memcmp(v23, v17, v24);
    BOOL v28 = v22 < v16;
    if (v27) {
      BOOL v28 = v27 < 0;
    }
    if (!v28) {
      break;
    }
    uint64_t v10 = (void *)v11[1];
    if (!v10)
    {
      uint8x8_t v4 = v11 + 1;
      goto LABEL_34;
    }
  }
  if (v9)
  {
    if (v15 < 0) {
      operator delete(v14);
    }
    operator delete(v9);
  }
  return (char *)v11;
}

void sub_1C4B1B4F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4B1A2D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_1C4B1B504(uint64_t **a1, const char *a2)
{
  uint8x8_t v4 = a1 + 1;
  unint64_t v5 = (char *)operator new(0x38uLL);
  unint64_t v31 = v5;
  uint64_t v6 = v5 + 32;
  size_t v7 = strlen(a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1C4949B7C();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v12 = v7 | 7;
    }
    uint64_t v13 = v12 + 1;
    uint64_t v6 = operator new(v12 + 1);
    *((void *)v5 + 5) = v8;
    *((void *)v5 + 6) = v13 | 0x8000000000000000;
    *((void *)v5 + 4) = v6;
  }
  else
  {
    v5[55] = v7;
    if (!v7)
    {
      unsigned char *v6 = 0;
      unint64_t v9 = v5;
      uint64_t v10 = (void *)*v4;
      uint64_t v11 = v4;
      if (!*v4) {
        goto LABEL_34;
      }
      goto LABEL_10;
    }
  }
  memcpy(v6, a2, v8);
  v6[v8] = 0;
  unint64_t v9 = v5;
  uint64_t v10 = (void *)*v4;
  uint64_t v11 = v4;
  if (!*v4)
  {
LABEL_34:
    *(void *)unint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v11;
    void *v4 = v9;
    int64_t v29 = (uint64_t *)**a1;
    if (v29)
    {
      *a1 = v29;
      unint64_t v9 = (char *)*v4;
    }
    sub_1C4949FD4(a1[1], (uint64_t *)v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v31;
  }
LABEL_10:
  unint64_t v14 = (void *)*((void *)v9 + 4);
  int v15 = v9[55];
  if (v15 < 0) {
    size_t v16 = *((void *)v9 + 5);
  }
  else {
    size_t v16 = v9[55];
  }
  if (v15 < 0) {
    unint64_t v17 = (const void *)*((void *)v9 + 4);
  }
  else {
    unint64_t v17 = v9 + 32;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v11 = v10;
      unint64_t v20 = (const void *)v10[4];
      unint64_t v18 = v10 + 4;
      uint64_t v19 = v20;
      int v21 = *((char *)v18 + 23);
      if (v21 >= 0) {
        size_t v22 = *((unsigned __int8 *)v18 + 23);
      }
      else {
        size_t v22 = v18[1];
      }
      if (v21 >= 0) {
        unint64_t v23 = v18;
      }
      else {
        unint64_t v23 = v19;
      }
      if (v22 >= v16) {
        size_t v24 = v16;
      }
      else {
        size_t v24 = v22;
      }
      int v25 = memcmp(v17, v23, v24);
      BOOL v26 = v16 < v22;
      if (v25) {
        BOOL v26 = v25 < 0;
      }
      if (!v26) {
        break;
      }
      uint64_t v10 = (void *)*v11;
      uint8x8_t v4 = v11;
      if (!*v11) {
        goto LABEL_34;
      }
    }
    int v27 = memcmp(v23, v17, v24);
    BOOL v28 = v22 < v16;
    if (v27) {
      BOOL v28 = v27 < 0;
    }
    if (!v28) {
      break;
    }
    uint64_t v10 = (void *)v11[1];
    if (!v10)
    {
      uint8x8_t v4 = v11 + 1;
      goto LABEL_34;
    }
  }
  if (v9)
  {
    if (v15 < 0) {
      operator delete(v14);
    }
    operator delete(v9);
  }
  return (char *)v11;
}

void sub_1C4B1B72C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C4B1A2D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1C4B1B740(void *a1)
{
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[12];
  if (v3) {
    operator delete(v3);
  }
  uint8x8_t v4 = (void *)a1[9];
  if (v4) {
    operator delete(v4);
  }
  unint64_t v5 = (void *)a1[6];
  if (v5)
  {
    a1[7] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[3];
  if (v6)
  {
    a1[4] = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_1C4B1B7AC(uint64_t a1, int *a2, int *a3)
{
  uint8x8_t v4 = a2;
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    goto LABEL_73;
  }
  for (uint64_t i = 0; i != v6; ++i)
    *(void *)(*(void *)a1 + 8 * i) = 0;
  size_t v8 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  if (a2 == a3)
  {
    uint64_t v10 = v8;
    if (!v8) {
      goto LABEL_73;
    }
    do
    {
LABEL_70:
      unint64_t v32 = (void *)*v10;
      operator delete(v10);
      uint64_t v10 = v32;
    }
    while (v32);
    goto LABEL_73;
  }
  if (v8)
  {
    while (1)
    {
      unint64_t v9 = *v4;
      *((_DWORD *)v8 + 4) = v9;
      uint64_t v10 = (void *)*v8;
      v8[1] = v9;
      unint64_t v11 = *(void *)(a1 + 8);
      if (v11)
      {
        uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
        v12.i16[0] = vaddlv_u8(v12);
        if (v12.u32[0] > 1uLL)
        {
          unint64_t v13 = v9;
          if (v11 <= v9) {
            unint64_t v13 = v9 % v11;
          }
        }
        else
        {
          unint64_t v13 = (v11 - 1) & v9;
        }
        unint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v13);
        if (v14)
        {
          int v15 = *v14;
          if (v15)
          {
            if (v12.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v17 = v15[1];
                if (v17 == v9)
                {
                  if (*((_DWORD *)v15 + 4) == v9) {
                    goto LABEL_63;
                  }
                }
                else if ((v17 & (v11 - 1)) != v13)
                {
                  goto LABEL_26;
                }
                int v15 = (uint64_t *)*v15;
                if (!v15) {
                  goto LABEL_26;
                }
              }
            }
            do
            {
              unint64_t v16 = v15[1];
              if (v16 == v9)
              {
                if (*((_DWORD *)v15 + 4) == v9) {
                  goto LABEL_63;
                }
              }
              else
              {
                if (v16 >= v11) {
                  v16 %= v11;
                }
                if (v16 != v13) {
                  break;
                }
              }
              int v15 = (uint64_t *)*v15;
            }
            while (v15);
          }
        }
      }
LABEL_26:
      float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v19 = *(float *)(a1 + 32);
      if (!v11 || (float)(v19 * (float)v11) < v18)
      {
        BOOL v20 = (v11 & (v11 - 1)) != 0;
        if (v11 < 3) {
          BOOL v20 = 1;
        }
        unint64_t v21 = v20 | (2 * v11);
        unint64_t v22 = vcvtps_u32_f32(v18 / v19);
        if (v21 <= v22) {
          size_t prime = v22;
        }
        else {
          size_t prime = v21;
        }
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
          unint64_t v11 = *(void *)(a1 + 8);
        }
        if (prime > v11) {
          goto LABEL_38;
        }
        if (prime < v11)
        {
          unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
          if (v11 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
          {
            unint64_t v24 = std::__next_prime(v24);
          }
          else
          {
            uint64_t v26 = 1 << -(char)__clz(v24 - 1);
            if (v24 >= 2) {
              unint64_t v24 = v26;
            }
          }
          if (prime <= v24) {
            size_t prime = v24;
          }
          if (prime < v11) {
LABEL_38:
          }
            sub_1C4949C24(a1, prime);
        }
      }
      int8x8_t v27 = *(int8x8_t *)(a1 + 8);
      unint64_t v28 = v8[1];
      uint8x8_t v29 = (uint8x8_t)vcnt_s8(v27);
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.u32[0] > 1uLL)
      {
        if (v28 >= *(void *)&v27) {
          v28 %= *(void *)&v27;
        }
      }
      else
      {
        v28 &= *(void *)&v27 - 1;
      }
      uint64_t v30 = *(void **)(*(void *)a1 + 8 * v28);
      if (v30)
      {
        void *v8 = *v30;
      }
      else
      {
        void *v8 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = v8;
        *(void *)(*(void *)a1 + 8 * v28) = a1 + 16;
        if (!*v8) {
          goto LABEL_62;
        }
        unint64_t v31 = *(void *)(*v8 + 8);
        if (v29.u32[0] > 1uLL)
        {
          if (v31 >= *(void *)&v27) {
            v31 %= *(void *)&v27;
          }
        }
        else
        {
          v31 &= *(void *)&v27 - 1;
        }
        uint64_t v30 = (void *)(*(void *)a1 + 8 * v31);
      }
      *uint64_t v30 = v8;
LABEL_62:
      ++*(void *)(a1 + 24);
LABEL_63:
      ++v4;
      if (v10)
      {
        size_t v8 = v10;
        if (v4 != a3) {
          continue;
        }
      }
      goto LABEL_67;
    }
  }
  uint64_t v10 = 0;
LABEL_67:
  if (v10) {
    goto LABEL_70;
  }
LABEL_73:
  while (v4 != a3)
  {
    sub_1C4ACB434(a1, v4, v4);
    ++v4;
  }
}

void sub_1C4B1BB14(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1C4B1BB34(_Unwind_Exception *a1)
{
}

void **sub_1C4B1BB48(void **a1, int *a2, uint64_t a3)
{
  a1[1] = 0;
  uint8x8_t v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      size_t v7 = sub_1C4ACA5FC(a1, v4, &v14, &v13, a2);
      if (!*v7)
      {
        sub_1C4ACA7AC((uint64_t)a1, a2, (uint64_t)&v12);
        size_t v8 = v14;
        unint64_t v9 = v12;
        *uint8x8_t v12 = 0;
        v9[1] = 0;
        v9[2] = (uint64_t)v8;
        uint64_t *v7 = (uint64_t)v9;
        uint64_t v10 = (void *)**a1;
        if (v10)
        {
          *a1 = v10;
          unint64_t v9 = (uint64_t *)*v7;
        }
        sub_1C4949FD4(a1[1], v9);
        a1[2] = (void *)((char *)a1[2] + 1);
      }
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1C4B1BC24(_Unwind_Exception *a1)
{
  sub_1C494AC4C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

char *sub_1C4B1BC3C(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1C494A220();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_1C4949AA8();
    }
    size_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    size_t v7 = 0;
  }
  size_t v8 = &v7[24 * v3];
  unint64_t v9 = &v7[24 * v6];
  *(_OWORD *)size_t v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v10 = v8 + 24;
  unint64_t v11 = (void **)*a1;
  uint8x8_t v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      long long v13 = *(_OWORD *)(v12 - 3);
      *((void *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    uint8x8_t v12 = (void **)*a1;
    unint64_t v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0) {
        operator delete(*(v14 - 3));
      }
      v14 -= 3;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v10;
}

unint64_t CoreHandwriting::InkMapping::getMappedPointIndex(CoreHandwriting::InkMapping *this, unint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3) > a2)
  {
    uint64_t v5 = *(void *)this + 24 * a2;
    size_t v7 = *(unsigned char **)v5;
    unint64_t v6 = *(unsigned char **)(v5 + 8);
    unint64_t v8 = v6 - v7;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0) {
        sub_1C4A38810();
      }
      unint64_t v9 = operator new(v6 - v7);
      memcpy(v9, v7, v8 & 0xFFFFFFFFFFFFFFF0);
      if (a3 < v8 >> 4) {
        unint64_t v4 = *((void *)v9 + 2 * a3);
      }
      operator delete(v9);
    }
  }
  return v4;
}

void sub_1C4B1BE54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1C4B1BE70(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void CoreHandwriting::InkMapping::resizeToAtLeastNumStrokes(CoreHandwriting::InkMapping *this, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
  BOOL v3 = a2 > v2;
  unint64_t v4 = a2 - v2;
  if (v3) {
    sub_1C4B1C684((uint64_t)this, v4);
  }
}

uint64_t *CoreHandwriting::InkMapping::getStrokePointMapping(CoreHandwriting::InkMapping *this, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3) > a2) {
    return (uint64_t *)(*(void *)this + 24 * a2);
  }
  __n128 result = &qword_1EA3C9350;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA3C9348, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EA3C9348))
    {
      qword_1EA3C9358 = 0;
      unk_1EA3C9360 = 0;
      qword_1EA3C9350 = 0;
      __cxa_atexit((void (*)(void *))sub_1C4B1BE70, &qword_1EA3C9350, &dword_1C492D000);
      __cxa_guard_release(&qword_1EA3C9348);
    }
    return &qword_1EA3C9350;
  }
  return result;
}

uint64_t CoreHandwriting::InkMapping::getStrokePointMapping(CoreHandwriting::InkMapping *this, uint64_t a2)
{
  uint64_t v3 = *(void *)this;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
  BOOL v5 = a2 + 1 >= v4;
  unint64_t v6 = a2 + 1 - v4;
  if (v6 != 0 && v5)
  {
    sub_1C4B1C684((uint64_t)this, v6);
    uint64_t v3 = *(void *)this;
  }
  return v3 + 24 * a2;
}

void CoreHandwriting::InkMapping::composeWith(CoreHandwriting::InkMapping *this@<X0>, const CoreHandwriting::InkMapping *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = a3;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
  if (v4 <= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3)) {
    unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3);
  }
  unint64_t v48 = v4;
  if (v4)
  {
    BOOL v5 = a2;
    sub_1C4B1C684((uint64_t)v3, v4);
    unint64_t v7 = 0;
    unint64_t v47 = v3;
    unint64_t v50 = v5;
    while (1)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3) <= v7)
      {
        unint64_t v8 = &qword_1EA3C9350;
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA3C9348, memory_order_acquire) & 1) == 0)
        {
          if (__cxa_guard_acquire(&qword_1EA3C9348))
          {
            qword_1EA3C9358 = 0;
            unk_1EA3C9360 = 0;
            qword_1EA3C9350 = 0;
            unint64_t v8 = &qword_1EA3C9350;
            __cxa_atexit((void (*)(void *))sub_1C4B1BE70, &qword_1EA3C9350, &dword_1C492D000);
            __cxa_guard_release(&qword_1EA3C9348);
          }
          uint64_t v3 = v47;
          BOOL v5 = v50;
        }
      }
      else
      {
        unint64_t v8 = (uint64_t *)(*(void *)this + 24 * v7);
      }
      if (*v8 != v8[1]) {
        break;
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v5 + 1) - *(void *)v5) >> 3) <= v7)
      {
        int v43 = (char **)&qword_1EA3C9350;
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA3C9348, memory_order_acquire) & 1) == 0)
        {
          if (__cxa_guard_acquire(&qword_1EA3C9348))
          {
            qword_1EA3C9358 = 0;
            unk_1EA3C9360 = 0;
            qword_1EA3C9350 = 0;
            int v43 = (char **)&qword_1EA3C9350;
            __cxa_atexit((void (*)(void *))sub_1C4B1BE70, &qword_1EA3C9350, &dword_1C492D000);
            __cxa_guard_release(&qword_1EA3C9348);
          }
          uint64_t v3 = v47;
          BOOL v5 = v50;
        }
      }
      else
      {
        int v43 = (char **)(*(void *)v5 + 24 * v7);
      }
      unint64_t v49 = v7 + 1;
      uint64_t v44 = *v3;
      unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3);
      if (v45 <= v7)
      {
        sub_1C4B1C684((uint64_t)v3, v49 - v45);
        uint64_t v44 = *v3;
      }
      uint64_t v46 = v44 + 24 * v7;
      if ((char **)v46 != v43) {
        sub_1C4A3AF58(v46, *v43, v43[1], (v43[1] - *v43) >> 4);
      }
LABEL_6:
      unint64_t v7 = v49;
      if (v49 == v48) {
        return;
      }
    }
    uint64_t v9 = *v3;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3);
    if (v10 <= v7)
    {
      sub_1C4B1C684((uint64_t)v3, v7 + 1 - v10);
      uint64_t v9 = *v3;
    }
    unint64_t v49 = v7 + 1;
    unint64_t v11 = 0;
    uint64_t v12 = v9 + 24 * v7;
    long long v13 = (unint64_t **)(v12 + 8);
    size_t v51 = (uint64_t *)v12;
    int64_t v52 = (uint64_t *)(v12 + 16);
    while (1)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3) <= v7)
      {
        int v15 = &qword_1EA3C9350;
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA3C9348, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_1EA3C9348))
        {
          qword_1EA3C9358 = 0;
          unk_1EA3C9360 = 0;
          qword_1EA3C9350 = 0;
          int v15 = &qword_1EA3C9350;
          __cxa_atexit((void (*)(void *))sub_1C4B1BE70, &qword_1EA3C9350, &dword_1C492D000);
          __cxa_guard_release(&qword_1EA3C9348);
        }
      }
      else
      {
        int v15 = (uint64_t *)(*(void *)this + 24 * v7);
      }
      if (v11 >= (v15[1] - *v15) >> 4)
      {
        uint64_t v3 = v47;
        goto LABEL_6;
      }
      unint64_t v16 = v7;
      size_t v17 = v11;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3) > v7)
      {
        uint64_t v18 = *(void *)this + 24 * v7;
        BOOL v20 = *(unsigned char **)v18;
        float v19 = *(unsigned char **)(v18 + 8);
        size_t v17 = v11;
        unint64_t v16 = v7;
        int64_t v21 = v19 - v20;
        if (v19 != v20)
        {
          if (v21 < 0) {
            sub_1C4A38810();
          }
          unint64_t v22 = (char *)operator new(v19 - v20);
          size_t v23 = v21 & 0xFFFFFFFFFFFFFFF0;
          memcpy(v22, v20, v23);
          size_t v17 = v11;
          unint64_t v16 = v7;
          if (v11 < v23 >> 4)
          {
            unint64_t v24 = (unint64_t *)&v22[16 * v11];
            unint64_t v16 = *v24;
            size_t v17 = v24[1];
          }
          operator delete(v22);
        }
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v5 + 1) - *(void *)v5) >> 3) <= v16) {
        goto LABEL_32;
      }
      uint64_t v25 = *(void *)v5 + 24 * v16;
      int8x8_t v27 = *(unsigned char **)v25;
      uint64_t v26 = *(unsigned char **)(v25 + 8);
      int64_t v28 = v26 - v27;
      if (v26 != v27) {
        break;
      }
      unint64_t v32 = *v13;
      uint64_t v33 = *v52;
      if ((unint64_t)*v13 < *v52)
      {
LABEL_14:
        *unint64_t v32 = v16;
        v32[1] = v17;
        unint64_t v14 = v32 + 2;
        goto LABEL_15;
      }
LABEL_33:
      uint64_t v34 = (unint64_t *)*v51;
      uint64_t v35 = ((uint64_t)v32 - *v51) >> 4;
      unint64_t v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 60) {
        sub_1C4A38810();
      }
      uint64_t v37 = v33 - (void)v34;
      if (v37 >> 3 > v36) {
        unint64_t v36 = v37 >> 3;
      }
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v38 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v38 = v36;
      }
      if (v38)
      {
        if (v38 >> 60) {
          sub_1C4949AA8();
        }
        size_t v39 = (char *)operator new(16 * v38);
        int v40 = (unint64_t *)&v39[16 * v35];
        unint64_t *v40 = v16;
        v40[1] = v17;
        uint64_t v41 = (uint64_t)v40;
        if (v32 != v34)
        {
LABEL_42:
          BOOL v5 = v50;
          do
          {
            *(_OWORD *)(v41 - 16) = *((_OWORD *)v32 - 1);
            v41 -= 16;
            v32 -= 2;
          }
          while (v32 != v34);
          uint64_t v42 = v51;
          unint64_t v32 = (unint64_t *)*v51;
          goto LABEL_49;
        }
      }
      else
      {
        size_t v39 = 0;
        int v40 = (unint64_t *)(16 * v35);
        unint64_t *v40 = v16;
        v40[1] = v17;
        uint64_t v41 = 16 * v35;
        if (v32 != v34) {
          goto LABEL_42;
        }
      }
      BOOL v5 = v50;
      uint64_t v42 = v51;
LABEL_49:
      *uint64_t v42 = v41;
      unint64_t v14 = v40 + 2;
      *long long v13 = v40 + 2;
      uint64_t *v52 = (uint64_t)&v39[16 * v38];
      if (v32) {
        operator delete(v32);
      }
LABEL_15:
      *long long v13 = v14;
      ++v11;
    }
    if (v28 < 0) {
      sub_1C4A38810();
    }
    uint8x8_t v29 = (char *)operator new(v26 - v27);
    size_t v30 = v28 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v29, v27, v30);
    if (v17 < v30 >> 4)
    {
      unint64_t v31 = (unint64_t *)&v29[16 * v17];
      unint64_t v16 = *v31;
      size_t v17 = v31[1];
    }
    operator delete(v29);
LABEL_32:
    unint64_t v32 = *v13;
    uint64_t v33 = *v52;
    if ((unint64_t)*v13 < *v52) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }
}

void sub_1C4B1C5A0(_Unwind_Exception *a1)
{
  sub_1C496B66C(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B1C5B4(_Unwind_Exception *a1)
{
  sub_1C496B66C(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B1C5C8(_Unwind_Exception *a1)
{
  sub_1C496B66C(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B1C5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
}

void sub_1C4B1C5F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    sub_1C496B66C(a10);
    _Unwind_Resume(a1);
  }
  sub_1C496B66C(a10);
  _Unwind_Resume(a1);
}

void sub_1C4B1C66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
}

void sub_1C4B1C684(uint64_t a1, unint64_t a2)
{
  BOOL v5 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      BOOL v5 = (void *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    unint64_t v6 = *(void **)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_1C494A220();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        sub_1C4949AA8();
      }
      unint64_t v11 = (char *)operator new(24 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    long long v13 = &v11[24 * v7];
    unint64_t v14 = &v11[24 * v10];
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    unint64_t v16 = &v13[v15];
    if (v5 == v6)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
    }
    else
    {
      do
      {
        size_t v17 = v13;
        *((void *)v13 - 2) = 0;
        *((void *)v13 - 1) = 0;
        long long v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v18;
        v13 -= 24;
        *((void *)v17 - 1) = v5[2];
        void *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      BOOL v5 = *(void **)a1;
      float v19 = *(void **)(a1 + 8);
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (v19 != v5)
      {
        BOOL v20 = v19;
        do
        {
          unint64_t v22 = (void *)*(v20 - 3);
          v20 -= 3;
          int64_t v21 = v22;
          if (v22)
          {
            *(v19 - 2) = v21;
            operator delete(v21);
          }
          float v19 = v20;
        }
        while (v20 != v5);
      }
    }
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void sub_1C4B1D224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1C4B1EC44((void **)va);

  _Unwind_Resume(a1);
}

void sub_1C4B1D384(char **a1, void *a2)
{
  if (*a2) {
    operator new();
  }
  *a2 = 0;
  uint64_t v4 = a1[1];
  unint64_t v3 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v3)
  {
    *(void *)uint64_t v4 = 0;
    *((void *)v4 + 1) = 0;
    a1[1] = v4 + 16;
  }
  else
  {
    BOOL v5 = *a1;
    uint64_t v6 = (v4 - *a1) >> 4;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 60) {
      sub_1C494A220();
    }
    uint64_t v8 = v3 - (void)v5;
    if (v8 >> 3 > v7) {
      unint64_t v7 = v8 >> 3;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9 >> 60) {
      sub_1C4949AA8();
    }
    unint64_t v10 = (char *)operator new(16 * v9);
    unint64_t v11 = &v10[16 * v6];
    *(void *)unint64_t v11 = 0;
    *((void *)v11 + 1) = 0;
    size_t v12 = &v10[16 * v9];
    long long v13 = v11 + 16;
    if (v4 == v5)
    {
      *a1 = v11;
      a1[1] = v13;
      a1[2] = v12;
    }
    else
    {
      do
      {
        long long v14 = *((_OWORD *)v4 - 1);
        v4 -= 16;
        *((_OWORD *)v11 - 1) = v14;
        v11 -= 16;
        *(void *)uint64_t v4 = 0;
        *((void *)v4 + 1) = 0;
      }
      while (v4 != v5);
      uint64_t v4 = *a1;
      size_t v15 = a1[1];
      *a1 = v11;
      a1[1] = v13;
      for (a1[2] = v12; v15 != v4; v15 -= 16)
      {
        unint64_t v16 = (std::__shared_weak_count *)*((void *)v15 - 1);
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
    if (v4) {
      operator delete(v4);
    }
    a1[1] = v13;
  }
}

void sub_1C4B1D5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C4B1D664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B1D684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B1DC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,void *a59)
{
  sub_1C4A22830(&a59);
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose(&a42, 8);
  _Block_object_dispose(&a46, 8);
  _Block_object_dispose(&a50, 8);
  sub_1C4A23B3C(a9, a57);

  _Unwind_Resume(a1);
}

void *sub_1C4B1DCF0(void *result, void *a2)
{
  result[6] = a2[6];
  unint64_t v2 = a2 + 7;
  uint64_t v3 = a2[7];
  result[7] = v3;
  uint64_t v4 = result + 7;
  uint64_t v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[6] = v2;
    void *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void sub_1C4B1DD2C(uint64_t a1)
{
}

void sub_1C4B1DD3C(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(uint64_t **)(*(void *)(*(void *)(a1 + 40) + 8) + 56); i; uint64_t i = (uint64_t *)*i)
  {
    unsigned int v13 = *((_DWORD *)i + 8);
    if (v13 <= a2)
    {
      if (v13 >= a2) {
        return;
      }
      ++i;
    }
  }
  std::string __p = 0;
  long long v39 = 0uLL;
  if (*(unsigned char *)(a1 + 72))
  {
    CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventory::collectFastPathCharactersFromHolders(*(void *)(a1 + 32) + 8, a2, 2, (char **)&v36);
    uint64_t v5 = (char *)__p;
    if (__p)
    {
      uint64_t v6 = (char *)v39;
      unint64_t v7 = __p;
      if ((void *)v39 != __p)
      {
        do
        {
          uint64_t v8 = (void *)*((void *)v6 - 3);
          v6 -= 24;
        }
        while (v6 != v5);
        unint64_t v7 = __p;
      }
      *(void *)&long long v39 = v5;
      operator delete(v7);
    }
    std::string __p = v36;
    long long v39 = *(_OWORD *)v37;
    if (*(void **)v37 != v36)
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
      unint64_t v11 = (uint64_t **)(v9 + 56);
      unint64_t v10 = *(uint64_t **)(v9 + 56);
      if (v10)
      {
        while (1)
        {
          while (1)
          {
            size_t v12 = v10;
            unsigned int v14 = *((_DWORD *)v10 + 8);
            if (v14 <= a2) {
              break;
            }
            unint64_t v10 = (uint64_t *)*v12;
            unint64_t v11 = (uint64_t **)v12;
            if (!*v12) {
              goto LABEL_21;
            }
          }
          if (v14 >= a2) {
            break;
          }
          unint64_t v10 = (uint64_t *)v12[1];
          if (!v10)
          {
            unint64_t v11 = (uint64_t **)(v12 + 1);
            goto LABEL_21;
          }
        }
        long long v18 = (void **)(v12 + 5);
        if (v12 + 5 == (uint64_t *)&__p) {
          goto LABEL_41;
        }
      }
      else
      {
        size_t v12 = (uint64_t *)(v9 + 56);
LABEL_21:
        size_t v15 = (char *)operator new(0x40uLL);
        *((_DWORD *)v15 + 8) = a2;
        *((void *)v15 + 6) = 0;
        *((void *)v15 + 7) = 0;
        *((void *)v15 + 5) = 0;
        *(void *)size_t v15 = 0;
        *((void *)v15 + 1) = 0;
        *((void *)v15 + 2) = v12;
        char *v11 = (uint64_t *)v15;
        uint64_t v16 = **(void **)(v9 + 48);
        size_t v17 = (uint64_t *)v15;
        if (v16)
        {
          *(void *)(v9 + 48) = v16;
          size_t v17 = *v11;
        }
        sub_1C4949FD4(*(uint64_t **)(v9 + 56), v17);
        ++*(void *)(v9 + 64);
        long long v18 = (void **)(v15 + 40);
        if (v15 + 40 == (char *)&__p) {
          goto LABEL_41;
        }
      }
      sub_1C4B1ED78(v18, (uint64_t)__p, v39, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - (void)__p) >> 3));
LABEL_41:
      ++*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
      goto LABEL_49;
    }
  }
  CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventory::collectFastPathCharactersFromHolders(*(void *)(a1 + 32) + 8, a2, 1, (char **)&v36);
  float v19 = (char *)v36;
  if (*(void **)v37 != v36)
  {
    uint64_t v20 = *(void *)(*(void *)(a1 + 40) + 8);
    unint64_t v22 = (uint64_t **)(v20 + 56);
    int64_t v21 = *(uint64_t **)(v20 + 56);
    if (v21)
    {
      while (1)
      {
        while (1)
        {
          size_t v23 = v21;
          unsigned int v24 = *((_DWORD *)v21 + 8);
          if (v24 <= a2) {
            break;
          }
          int64_t v21 = (uint64_t *)*v23;
          unint64_t v22 = (uint64_t **)v23;
          if (!*v23) {
            goto LABEL_33;
          }
        }
        if (v24 >= a2) {
          break;
        }
        int64_t v21 = (uint64_t *)v23[1];
        if (!v21)
        {
          unint64_t v22 = (uint64_t **)(v23 + 1);
          goto LABEL_33;
        }
      }
      int64_t v28 = (void **)(v23 + 5);
      if (v23 + 5 == (uint64_t *)&v36)
      {
LABEL_44:
        ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
        if (v19) {
          goto LABEL_45;
        }
        goto LABEL_49;
      }
    }
    else
    {
      size_t v23 = (uint64_t *)(v20 + 56);
LABEL_33:
      uint64_t v25 = (char *)operator new(0x40uLL);
      *((_DWORD *)v25 + 8) = a2;
      *((void *)v25 + 6) = 0;
      *((void *)v25 + 7) = 0;
      *((void *)v25 + 5) = 0;
      *(void *)uint64_t v25 = 0;
      *((void *)v25 + 1) = 0;
      *((void *)v25 + 2) = v23;
      *unint64_t v22 = (uint64_t *)v25;
      uint64_t v26 = **(void **)(v20 + 48);
      int8x8_t v27 = (uint64_t *)v25;
      if (v26)
      {
        *(void *)(v20 + 48) = v26;
        int8x8_t v27 = *v22;
      }
      sub_1C4949FD4(*(uint64_t **)(v20 + 56), v27);
      ++*(void *)(v20 + 64);
      float v19 = (char *)v36;
      int64_t v28 = (void **)(v25 + 40);
      if (v25 + 40 == (char *)&v36) {
        goto LABEL_44;
      }
    }
    sub_1C4B1ED78(v28, (uint64_t)v19, *(uint64_t *)v37, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v37 - (void)v19) >> 3));
    float v19 = (char *)v36;
    goto LABEL_44;
  }
  float v19 = *(char **)v37;
  ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  if (v19)
  {
LABEL_45:
    uint8x8_t v29 = *(char **)v37;
    size_t v30 = v19;
    if (*(char **)v37 != v19)
    {
      do
      {
        unint64_t v31 = (void *)*((void *)v29 - 3);
        v29 -= 24;
      }
      while (v29 != v19);
      size_t v30 = v36;
    }
    *(void *)uint64_t v37 = v19;
    operator delete(v30);
  }
LABEL_49:
  unint64_t v32 = (char *)__p;
  if (__p)
  {
    uint64_t v33 = (char *)v39;
    uint64_t v34 = __p;
    if ((void *)v39 != __p)
    {
      do
      {
        uint64_t v35 = (void *)*((void *)v33 - 3);
        v33 -= 24;
      }
      while (v33 != v32);
      uint64_t v34 = __p;
    }
    *(void *)&long long v39 = v32;
    operator delete(v34);
  }
}

void sub_1C4B1E0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_1C4B1E0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1C4A22830((void **)va);
  _Unwind_Resume(a1);
}

void sub_1C4B1E0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1C4A22830((void **)va);
  _Unwind_Resume(a1);
}

void sub_1C4B1E104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1C4A22830((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B1E118(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(void *)(a1 + 176) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_1C4B1E4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1C4B1E514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B1E52C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B1E554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B1E56C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B1E584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B1E59C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4B1E5AC(uint64_t a1)
{
}

void sub_1C4B1E5B4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6 = (int)a2;
  if (objc_msgSend_countOfIndexesInRange_(*(void **)(a1 + 32), a2, a3, a4, a5, a6) == a4)
  {
    unsigned int v13 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    unicodeToNSString(v6, v8, v9, v10, v11, v12);
    id v46 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v18 = objc_msgSend_stringByAppendingString_(v13, v14, (uint64_t)v46, v15, v16, v17);
  }
  else
  {
    objc_msgSend_controlCharacterSet(MEMORY[0x1E4F28B88], v8, v9, v10, v11, v12);
    id v47 = (id)objc_claimAutoreleasedReturnValue();
    char IsMember = objc_msgSend_characterIsMember_(v47, v19, (unsigned __int16)v6, v20, v21, v22);

    if (IsMember) {
      return;
    }
    CoreHandwriting::synthesis::CHDiffusionSynthesisApplyAllowedUnicodeDecomposition(v6, 0);
    id v46 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v29 = objc_msgSend_length(v46, v24, v25, v26, v27, v28);
    uint64_t v35 = *(void *)(*(void *)(a1 + 40) + 8);
    unint64_t v36 = *(void **)(v35 + 40);
    if (!v29)
    {
      unint64_t v38 = unicodeToNSString(v6, v30, v31, v32, v33, v34);
      uint64_t v43 = objc_msgSend_stringByAppendingString_(v36, v39, (uint64_t)v38, v40, v41, v42);
      uint64_t v44 = *(void *)(*(void *)(a1 + 40) + 8);
      unint64_t v45 = *(void **)(v44 + 40);
      *(void *)(v44 + 40) = v43;

      goto LABEL_7;
    }
    uint64_t v18 = objc_msgSend_stringByAppendingString_(*(void **)(v35 + 40), v30, (uint64_t)v46, v32, v33, v34);
  }
  uint64_t v37 = *(void *)(*(void *)(a1 + 40) + 8);
  unint64_t v38 = *(void **)(v37 + 40);
  *(void *)(v37 + 40) = v18;
LABEL_7:
}

void sub_1C4B1E704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B1E71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B1E730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B1E744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B1E964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B1E974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = v3;

  sub_1C498D2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4B1E994(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C498D2E0((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1C4B1EA60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B1EA80(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4B1EA9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B1EAB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B1EB58(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8786460);
}

uint64_t sub_1C4B1EB90(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1C4B1EBC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C4C43F28) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C4C43F28 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C4C43F28)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C4C43F28 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void **sub_1C4B1EC44(void **a1)
{
  unint64_t v2 = (char *)a1[3];
  if (v2)
  {
    uint64_t v3 = (char *)a1[4];
    uint64_t v4 = a1[3];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (std::__shared_weak_count *)*((void *)v3 - 1);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  int v6 = (char *)*a1;
  if (*a1)
  {
    unint64_t v7 = (char *)a1[1];
    uint64_t v8 = *a1;
    if (v7 != v6)
    {
      do
      {
        uint64_t v9 = (std::__shared_weak_count *)*((void *)v7 - 1);
        if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        v7 -= 16;
      }
      while (v7 != v6);
      uint64_t v8 = *a1;
    }
    a1[1] = v6;
    operator delete(v8);
  }
  return a1;
}

void sub_1C4B1ED78(void **a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t v9 = (id *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)*a1) >> 3) >= __sz)
  {
    uint64_t v18 = (id *)a1[1];
    if (0xAAAAAAAAAAAAAAABLL * (v18 - v9) >= __sz)
    {
      if (a2 == a3)
      {
        uint64_t v22 = (id *)*a1;
      }
      else
      {
        uint64_t v22 = (id *)*a1;
        do
        {
          objc_storeStrong(v9, *(id *)v6);
          v9[1] = *(id *)(v6 + 8);
          v9[2] = *(id *)(v6 + 16);
          v22 += 3;
          v6 += 24;
          v9 += 3;
        }
        while (v6 != a3);
        uint64_t v18 = (id *)a1[1];
      }
      while (v18 != v22)
      {
        size_t v23 = *(v18 - 3);
        v18 -= 3;
      }
      a1[1] = v22;
    }
    else
    {
      uint64_t v19 = a2 + 8 * (v18 - v9);
      if (v18 != v9)
      {
        do
        {
          objc_storeStrong(v9, *(id *)v6);
          v9[1] = *(id *)(v6 + 8);
          v9[2] = *(id *)(v6 + 16);
          v6 += 24;
          v9 += 3;
        }
        while (v6 != v19);
        uint64_t v9 = (id *)a1[1];
      }
      uint64_t v20 = v9;
      if (v19 != a3)
      {
        uint64_t v20 = v9;
        uint64_t v21 = v9;
        do
        {
          *uint64_t v21 = *(id *)v19;
          *(_OWORD *)(v21 + 1) = *(_OWORD *)(v19 + 8);
          v20 += 3;
          v19 += 24;
          v21 += 3;
        }
        while (v19 != a3);
      }
      a1[1] = v20;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = (id *)a1[1];
      uint64_t v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          uint64_t v12 = *(v10 - 3);
          v10 -= 3;
        }
        while (v10 != v9);
        uint64_t v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_33;
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= __sz) {
      uint64_t v14 = __sz;
    }
    unint64_t v15 = v13 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v14;
    if (v15 > 0xAAAAAAAAAAAAAAALL) {
LABEL_33:
    }
      sub_1C4A23B24();
    uint64_t v16 = 24 * v15;
    uint64_t v17 = (char *)operator new(24 * v15);
    *a1 = v17;
    a1[1] = v17;
    for (a1[2] = &v17[v16]; v6 != a3; v6 += 24)
    {
      *(void *)uint64_t v17 = *(id *)v6;
      *(_OWORD *)(v17 + 8) = *(_OWORD *)(v6 + 8);
      v17 += 24;
    }
    a1[1] = v17;
  }
}

void sub_1C4B1F090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B1F0A4()
{
  unint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.CoreHandwriting.CHTextCheckingQuery.TextComposerProcessing", v2);
  uint64_t v1 = (void *)qword_1EA3C9F70;
  qword_1EA3C9F70 = (uint64_t)v0;
}

void sub_1C4B1F668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4B1F6B8(void **a1, void *a2)
{
  uint64_t v846 = *MEMORY[0x1E4F143B8];
  id v795 = a2;
  v787 = a1;
  if (a1)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v3 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1C492D000, v3, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery._textCheckingResultsForSessionResult: start", buf, 2u);
    }

    uint64_t v782 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v4, v5, v6, v7, v8);
    uint64_t v14 = objc_msgSend_strokeGroupingResult(v795, v9, v10, v11, v12, v13);
    uint64_t v776 = objc_msgSend_textStrokeGroupClusters(v14, v15, v16, v17, v18, v19);

    uint64_t v790 = objc_msgSend_autoRefineResults(v795, v20, v21, v22, v23, v24);
    long long v826 = 0u;
    long long v827 = 0u;
    long long v824 = 0u;
    long long v825 = 0u;
    obuint64_t j = v776;
    uint64_t v777 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v25, (uint64_t)&v824, (uint64_t)v830, 16, v26);
    if (v777)
    {
      uint64_t v778 = *(void *)v825;
      do
      {
        for (uint64_t i = 0; i != v777; ++i)
        {
          if (*(void *)v825 != v778) {
            objc_enumerationMutation(obj);
          }
          uint64_t v32 = *(void **)(*((void *)&v824 + 1) + 8 * i);
          uint64_t v791 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v27, v28, v29, v30, v31);
          long long v822 = 0u;
          long long v823 = 0u;
          long long v820 = 0u;
          long long v821 = 0u;
          id v796 = v32;
          uint64_t v800 = objc_msgSend_countByEnumeratingWithState_objects_count_(v796, v33, (uint64_t)&v820, (uint64_t)v829, 16, v34);
          if (!v800) {
            goto LABEL_53;
          }
          uint64_t v798 = *(void *)v821;
          do
          {
            for (uint64_t j = 0; j != v800; ++j)
            {
              if (*(void *)v821 != v798) {
                objc_enumerationMutation(v796);
              }
              uint64_t v40 = *(void **)(*((void *)&v820 + 1) + 8 * j);
              uint64_t v41 = objc_msgSend_uniqueIdentifier(v40, v35, v36, v37, v38, v39);
              uint64_t v808 = objc_msgSend_recognitionResultForStrokeGroupIdentifier_(v795, v42, v41, v43, v44, v45);
              uint64_t v804 = objc_msgSend_preferredLocale(v808, v46, v47, v48, v49, v50);
              if (CHHasPersonalizedSynthesisSupportForLocale(v804))
              {
                size_t v51 = objc_opt_class();
                uint64_t v57 = objc_msgSend_recognitionResultsByLocale(v808, v52, v53, v54, v55, v56);
                uint64_t v63 = objc_msgSend_locales(v795, v58, v59, v60, v61, v62);
                uint64_t v69 = objc_msgSend_languageFitnessByLocale(v808, v64, v65, v66, v67, v68);
                uint64_t v802 = objc_msgSend_filteredResultsByLocale_orderedLocales_usingLanguageFitness_outSortedLocales_(v51, v70, (uint64_t)v57, (uint64_t)v63, (uint64_t)v69, 0);

                unint64_t v75 = objc_msgSend_objectForKeyedSubscript_(v802, v71, (uint64_t)v804, v72, v73, v74);
                unint64_t v81 = objc_msgSend_recognitionResultsByGroupID(v795, v76, v77, v78, v79, v80);
                uint64_t v82 = NSNumber;
                uint64_t v88 = objc_msgSend_uniqueIdentifier(v40, v83, v84, v85, v86, v87);
                int v93 = objc_msgSend_numberWithInteger_(v82, v89, v88, v90, v91, v92);
                int v98 = objc_msgSend_objectForKeyedSubscript_(v81, v94, (uint64_t)v93, v95, v96, v97);
                unint64_t v104 = objc_msgSend_mathResult(v98, v99, v100, v101, v102, v103);
                LOBYTE(v82) = v104 == 0;

                if (v82)
                {
                  long long v818 = 0u;
                  long long v819 = 0u;
                  long long v816 = 0u;
                  long long v817 = 0u;
                  id v119 = v790;
                  uint64_t v127 = objc_msgSend_countByEnumeratingWithState_objects_count_(v119, v120, (uint64_t)&v816, (uint64_t)v828, 16, v121);
                  if (v127)
                  {
                    uint64_t v128 = *(void *)v817;
                    do
                    {
                      for (uint64_t k = 0; k != v127; ++k)
                      {
                        if (*(void *)v817 != v128) {
                          objc_enumerationMutation(v119);
                        }
                        uint64_t v130 = *(void **)(*((void *)&v816 + 1) + 8 * k);
                        uint64_t v131 = objc_msgSend_strokeGroup(v130, v122, v123, v124, v125, v126);
                        if (v40 == v131)
                        {
                          unint64_t v137 = objc_msgSend_refinedTokenColumns(v130, v132, v133, v134, v135, v136);
                          unint64_t v143 = objc_msgSend_count(v137, v138, v139, v140, v141, v142);
                          uint64_t v149 = objc_msgSend_textResult(v130, v144, v145, v146, v147, v148);
                          LODWORD(v143) = v143 < objc_msgSend_tokenColumnCount(v149, v150, v151, v152, v153, v154);

                          if (v143)
                          {
                            *(void *)std::string buf = 0;
                            *(void *)&buf[8] = buf;
                            *(void *)&uint8_t buf[16] = 0x4012000000;
                            *(void *)int v837 = sub_1C4B21F18;
                            *(void *)&v837[8] = nullsub_36;
                            *(void *)&v837[16] = &unk_1C4CB5C62;
                            *(_OWORD *)&v837[24] = xmmword_1C4C3B320;
                            unint64_t v155 = objc_msgSend_refinedTokenColumns(v130, v122, v123, v124, v125, v126);
                            v815[0] = MEMORY[0x1E4F143A8];
                            v815[1] = 3221225472;
                            v815[2] = sub_1C4B21F28;
                            v815[3] = &unk_1E64E3D90;
                            v815[4] = buf;
                            objc_msgSend_enumerateRangesUsingBlock_(v155, v156, (uint64_t)v815, v157, v158, v159);

                            if (*(void *)(*(void *)&buf[8] + 56))
                            {
                              __int16 v165 = objc_msgSend_textResult(v130, v160, v161, v162, v163, v164);
                              uint64_t v169 = objc_msgSend_subResultWithColumnRange_(v165, v166, *(void *)(*(void *)&buf[8] + 48), *(void *)(*(void *)&buf[8] + 56), v167, v168);

                              if (qword_1EA3CA000 != -1) {
                                dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
                              }
                              int8x8_t v170 = (id)qword_1EA3C9FA0;
                              if (os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
                              {
                                uint64_t v176 = objc_msgSend_topTranscription(v169, v171, v172, v173, v174, v175);
                                uint64_t v178 = *(void *)(*(void *)&buf[8] + 48);
                                int64_t v177 = *(void **)(*(void *)&buf[8] + 56);
                                *(_DWORD *)unsigned int v831 = 138740483;
                                *(void *)&v831[4] = v176;
                                *(_WORD *)&v831[12] = 2048;
                                *(void *)&v831[14] = v178;
                                *(_WORD *)&v831[22] = 2048;
                                float v832 = v177;
                                _os_log_impl(&dword_1C492D000, v170, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery: Autorefinable group truncated to transcription %{sensitive}@ (columns in range %ld,%ld) for proofreading", v831, 0x20u);
                              }
                            }
                            else
                            {
                              if (qword_1EA3CA000 != -1) {
                                dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
                              }
                              int8x8_t v170 = (id)qword_1EA3C9FA0;
                              if (os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
                              {
                                unint64_t v184 = objc_msgSend_topTranscription(v75, v179, v180, v181, v182, v183);
                                *(_DWORD *)unsigned int v831 = 138739971;
                                *(void *)&v831[4] = v184;
                                _os_log_impl(&dword_1C492D000, v170, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery: Skipping group with transcription %{sensitive}@ because it is autorefinable and has no refined columns.", v831, 0xCu);
                              }
                              uint64_t v169 = v75;
                            }

                            _Block_object_dispose(buf, 8);
                            unint64_t v75 = v169;
                          }
                        }
                        else
                        {
                        }
                      }
                      uint64_t v127 = objc_msgSend_countByEnumeratingWithState_objects_count_(v119, v122, (uint64_t)&v816, (uint64_t)v828, 16, v126);
                    }
                    while (v127);
                  }

                  if (v75)
                  {
                    uint64_t v185 = [CHContextualTextResult alloc];
                    uint64_t v105 = objc_msgSend_initWithTextResult_terminatingSpecialCharacter_strokeGroup_(v185, v186, (uint64_t)v75, @"\n", (uint64_t)v40, v187);
                    objc_msgSend_setStrokeGroupResult_(v105, v188, (uint64_t)v808, v189, v190, v191);
                    objc_msgSend_addObject_(v791, v192, (uint64_t)v105, v193, v194, v195);
                    goto LABEL_49;
                  }
                }
                else
                {
                  if (qword_1EA3CA000 != -1) {
                    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
                  }
                  uint64_t v105 = (id)qword_1EA3C9FA0;
                  if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v111 = objc_msgSend_topTranscription(v75, v106, v107, v108, v109, v110);
                    *(_DWORD *)std::string buf = 138739971;
                    *(void *)&uint8_t buf[4] = v111;
                    _os_log_impl(&dword_1C492D000, v105, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery: Skipping group with transcription %{sensitive}@ because it has a math result.", buf, 0xCu);
                  }
LABEL_49:
                }
                uint64_t v112 = v802;
                goto LABEL_51;
              }
              if (qword_1EA3CA000 != -1) {
                dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
              }
              uint64_t v112 = (id)qword_1EA3C9FA0;
              if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
              {
                int64_t v118 = objc_msgSend_languageIdentifier(v804, v113, v114, v115, v116, v117);
                *(_DWORD *)std::string buf = 138412290;
                *(void *)&uint8_t buf[4] = v118;
                _os_log_impl(&dword_1C492D000, v112, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery: Skipping group preferred locale %@", buf, 0xCu);
              }
LABEL_51:
            }
            uint64_t v800 = objc_msgSend_countByEnumeratingWithState_objects_count_(v796, v35, (uint64_t)&v820, (uint64_t)v829, 16, v39);
          }
          while (v800);
LABEL_53:

          if (!objc_msgSend_count(v791, v196, v197, v198, v199, v200)) {
            goto LABEL_160;
          }
          uint64_t v781 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v201, v202, v203, v204, v205);
          unint64_t v786 = 0;
LABEL_55:
          if (v786 < objc_msgSend_count(v791, v206, v207, v208, v209, v210))
          {
            uint64_t v783 = objc_msgSend_objectAtIndexedSubscript_(v791, v211, v786, v212, v213, v214);
            unint64_t v220 = objc_msgSend_textResult(v783, v215, v216, v217, v218, v219);
            uint64_t v785 = objc_msgSend_locale(v220, v221, v222, v223, v224, v225);

            unint64_t v226 = (void *)MEMORY[0x1E4FAE1D8];
            uint64_t v232 = objc_msgSend_languageCode(v785, v227, v228, v229, v230, v231);
            LODWORD(v226) = objc_msgSend_checkingEnabledForLanguage_(v226, v233, (uint64_t)v232, v234, v235, v236);

            if (v226) {
              objc_msgSend_addIndex_(v781, v237, v786, v238, v239, v240);
            }
            id v789 = v783;
            uint64_t v784 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v241, v242, v243, v244, v245);
            uint64_t v801 = objc_msgSend_textResult(v789, v246, v247, v248, v249, v250);
            for (uint64_t m = 0; ; uint64_t m = v799 + 1)
            {
              if (m >= objc_msgSend_tokenColumnCount(v801, v251, v252, v253, v254, v255))
              {
                id v725 = v784;
                goto LABEL_158;
              }
              uint64_t v809 = objc_msgSend_tokenRowsAtColumnIndex_(v801, v257, m, v258, v259, v260);
              uint64_t v266 = objc_msgSend_topModelTranscriptionPath(v801, v261, v262, v263, v264, v265);
              unint64_t v807 = objc_msgSend_indexAtPosition_(v266, v267, m, v268, v269, v270);
              uint64_t v799 = m;

              unint64_t v276 = objc_msgSend_transcriptionPaths(v801, v271, v272, v273, v274, v275);
              unint64_t v282 = objc_msgSend_firstObject(v276, v277, v278, v279, v280, v281);
              uint64_t v803 = objc_msgSend_indexAtPosition_(v282, v283, v799, v284, v285, v286);

              if (v807 >= objc_msgSend_count(v809, v287, v288, v289, v290, v291))
              {
                if (qword_1EA3CA000 != -1) {
                  dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
                }
                uint64_t v726 = (id)qword_1EA3C9F90[0];
                if (os_log_type_enabled(v726, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v732 = objc_msgSend_count(v809, v727, v728, v729, v730, v731);
                  *(_DWORD *)std::string buf = 134218240;
                  *(void *)&uint8_t buf[4] = v807;
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v732;
                  _os_log_impl(&dword_1C492D000, v726, OS_LOG_TYPE_ERROR, "SpellChecking detection error: Unexpected indexOfTopModelTokens = %ld for a token column with %ld rows, aborting.", buf, 0x16u);
                }

                id v725 = (id)MEMORY[0x1E4F1CBF0];
LABEL_158:

                objc_msgSend_addObjectsFromArray_(v782, v733, (uint64_t)v725, v734, v735, v736);
                ++v786;
                goto LABEL_55;
              }
              unint64_t v296 = objc_msgSend_objectAtIndexedSubscript_(v809, v292, v807, v293, v294, v295);
              uint64_t v805 = objc_msgSend_firstObject(v296, v297, v298, v299, v300, v301);

              uint64_t v307 = objc_msgSend_string(v805, v302, v303, v304, v305, v306);
              uint64_t v313 = objc_msgSend_countCharacters(v307, v308, v309, v310, v311, v312);

              char v319 = objc_msgSend_properties(v805, v314, v315, v316, v317, v318);
              objc_msgSend_modelScore(v805, v320, v321, v322, v323, v324);
              double v326 = v325;
              uint64_t v332 = objc_msgSend_topModelTranscriptionPath(v801, v327, v328, v329, v330, v331);
              int v793 = objc_msgSend_transcriptionWithPath_columnRange_filterLowConfidence_(v801, v333, (uint64_t)v332, 0, v799, 0);

              uint64_t v338 = objc_msgSend_objectAtIndexedSubscript_(v809, v334, v807, v335, v336, v337);
              if ((unint64_t)objc_msgSend_count(v338, v339, v340, v341, v342, v343) > 1
                || (unint64_t v794 = v319 & 4, (v319 & 4) != 0)
                && (unint64_t)objc_msgSend_count(v809, v344, v345, v346, v347, v348) >= 2
                && v803 == v807)
              {

LABEL_65:
                if (qword_1EA3CA000 != -1) {
                  dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
                }
                uint64_t v797 = (id)qword_1EA3C9FA0;
                if (os_log_type_enabled(v797, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v359 = objc_msgSend_topTranscription(v801, v354, v355, v356, v357, v358);
                  uint64_t v364 = objc_msgSend_objectAtIndexedSubscript_(v809, v360, v807, v361, v362, v363);
                  unint64_t v370 = objc_msgSend_count(v364, v365, v366, v367, v368, v369);
                  *(_DWORD *)std::string buf = 134219011;
                  *(void *)&uint8_t buf[4] = v799;
                  *(_WORD *)&buf[12] = 2117;
                  *(void *)&buf[14] = v359;
                  *(_WORD *)&unsigned char buf[22] = 1024;
                  *(_DWORD *)int v837 = v370 > 1;
                  *(_WORD *)&v837[4] = 1024;
                  *(_DWORD *)&v837[6] = v803 == v807;
                  *(_WORD *)&v837[10] = 2048;
                  *(void *)&v837[12] = v313;
                  _os_log_impl(&dword_1C492D000, v797, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery: Skipping column %ld from group with transcription %{sensitive}@ because no viable replacements: hasMultipleTopModelTokens ? %d, topIsTopModel ? %d, topModelTokenLength: %ld", buf, 0x2Cu);
                }
                goto LABEL_151;
              }

              if (v313 == 1) {
                goto LABEL_65;
              }
              uint64_t v371 = objc_msgSend_length(v793, v349, v350, v351, v352, v353);
              unint64_t v377 = objc_msgSend_properties(v805, v372, v373, v374, v375, v376);
              uint64_t v797 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v378, v379, v380, v381, v382);
              uint64_t v792 = 0;
              unint64_t v388 = 0;
              uint64_t v788 = ((v377 >> 5) & 1) + v371;
              while (v388 < objc_msgSend_count(v809, v383, v384, v385, v386, v387))
              {
                if (v807 != v388 || (unint64_t)objc_msgSend_count(v809, v389, v390, v391, v392, v393) <= 1)
                {
                  unint64_t v394 = objc_msgSend_objectAtIndexedSubscript_(v809, v389, v388, v391, v392, v393);
                  BOOL v400 = (unint64_t)objc_msgSend_count(v394, v395, v396, v397, v398, v399) > 1;

                  if (!v400)
                  {
                    unint64_t v417 = objc_msgSend_objectAtIndexedSubscript_(v809, v401, v388, v402, v403, v404);
                    uint64_t v405 = objc_msgSend_firstObject(v417, v418, v419, v420, v421, v422);

                    objc_msgSend_modelScore(v405, v423, v424, v425, v426, v427);
                    double v429 = v428;
                    char v435 = objc_msgSend_properties(v405, v430, v431, v432, v433, v434);
                    int v441 = objc_msgSend_inputSources(v405, v436, v437, v438, v439, v440);
                    objc_msgSend_recognitionScore(v405, v442, v443, v444, v445, v446);
                    double v453 = v452;
                    if (v807 == v803)
                    {
                      BOOL v454 = 0;
                    }
                    else if (v429 == v326)
                    {
                      BOOL v454 = 1;
                    }
                    else
                    {
                      objc_msgSend_recognitionScore(v405, v447, v448, v449, v450, v451);
                      double v456 = v455;
                      objc_msgSend_recognitionScore(v805, v457, v458, v459, v460, v461);
                      BOOL v454 = v456 == v462;
                    }
                    unint64_t v463 = v435 & 4;
                    unint64_t v464 = v441 & 0x20;
                    BOOL v466 = v453 > 0.55 && v464 != 0;
                    if (v463) {
                      BOOL v467 = v794 == 0;
                    }
                    else {
                      BOOL v467 = 0;
                    }
                    int v468 = v467;
                    if (v429 < v326 + -0.35) {
                      int v469 = v468;
                    }
                    else {
                      int v469 = 0;
                    }
                    if (objc_msgSend_count(v809, v447, v448, v449, v450, v451) == 1)
                    {
                      BOOL v476 = v429 < 0.8 && v463 != 0;
                      if (((v454 || v466) | v469))
                      {
LABEL_116:
                        if (v803 == v388)
                        {
                          uint64_t v515 = objc_msgSend_string(v405, v470, v471, v472, v473, v474);

                          uint64_t v792 = (void *)v515;
                        }
                        id v477 = objc_msgSend_string(v405, v470, v471, v472, v473, v474);
                        objc_msgSend_addObject_(v797, v516, (uint64_t)v477, v517, v518, v519);
                        goto LABEL_119;
                      }
                    }
                    else
                    {
                      BOOL v476 = 0;
                      if (((v454 || v466) | v469)) {
                        goto LABEL_116;
                      }
                    }
                    if (v476) {
                      goto LABEL_116;
                    }
                    if (qword_1EA3CA000 != -1) {
                      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
                    }
                    id v477 = (id)qword_1EA3C9FA0;
                    if (os_log_type_enabled(v477, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v483 = objc_msgSend_string(v805, v478, v479, v480, v481, v482);
                      uint64_t v489 = objc_msgSend_string(v405, v484, v485, v486, v487, v488);
                      uint64_t v495 = objc_msgSend_string(v405, v490, v491, v492, v493, v494);
                      objc_msgSend_recognitionScore(v405, v496, v497, v498, v499, v500);
                      uint64_t v502 = v501;
                      double v508 = objc_msgSend_string(v805, v503, v504, v505, v506, v507);
                      objc_msgSend_recognitionScore(v805, v509, v510, v511, v512, v513);
                      *(_DWORD *)std::string buf = 138742531;
                      *(void *)&uint8_t buf[4] = v483;
                      *(_WORD *)&buf[12] = 2117;
                      *(void *)&buf[14] = v489;
                      *(_WORD *)&unsigned char buf[22] = 2117;
                      *(void *)int v837 = v495;
                      *(_WORD *)&v837[8] = 2048;
                      *(double *)&v837[10] = v429;
                      *(_WORD *)&v837[18] = 2048;
                      *(void *)&v837[20] = v502;
                      *(_WORD *)&v837[28] = 1024;
                      *(_DWORD *)&v837[30] = v463 >> 2;
                      *(_WORD *)&v837[34] = 1024;
                      *(_DWORD *)&v837[36] = v464 >> 5;
                      __int16 v838 = 2117;
                      uint64_t v839 = v508;
                      __int16 v840 = 2048;
                      double v841 = v326;
                      __int16 v842 = 2048;
                      uint64_t v843 = v514;
                      __int16 v844 = 1024;
                      int v845 = v794 >> 2;
                      _os_log_impl(&dword_1C492D000, v477, OS_LOG_TYPE_DEBUG, "CHTextCheckingQuery: Spelling correction skipped for token %{sensitive}@ -> %{sensitive}@ because replacement token(String: %{sensitive}@ model score: %.2f rec score: %.2f in lexicon: %i is spell correction: %i) can't replace top model token(String: %{sensitive}@ model score: %.2f rec score: %.2f in lexicon: %i)", buf, 0x64u);
                    }
LABEL_119:

                    goto LABEL_120;
                  }
                }
                if (qword_1EA3CA000 != -1) {
                  dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
                }
                uint64_t v405 = (id)qword_1EA3C9FA0;
                if (os_log_type_enabled(v405, OS_LOG_TYPE_DEFAULT))
                {
                  unint64_t v410 = objc_msgSend_objectAtIndexedSubscript_(v809, v406, v388, v407, v408, v409);
                  uint64_t v416 = objc_msgSend_description(v410, v411, v412, v413, v414, v415);
                  *(_DWORD *)std::string buf = 138739971;
                  *(void *)&uint8_t buf[4] = v416;
                  _os_log_impl(&dword_1C492D000, v405, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery: Skipping line of transcription %{sensitive}@ because the top model transcription has multiple tokens", buf, 0xCu);
                }
LABEL_120:

                ++v388;
              }
              if (!objc_msgSend_count(v797, v389, v390, v391, v392, v393)) {
                goto LABEL_150;
              }
              uint64_t v524 = (uint64_t)v792;
              if (!v792)
              {
                uint64_t v524 = objc_msgSend_firstObject(v797, v520, 0, v521, v522, v523);
              }
              uint64_t v792 = (void *)v524;
              objc_msgSend_removeObject_(v797, v520, v524, v521, v522, v523);
              id v525 = (void *)MEMORY[0x1E4F29048];
              uint64_t v531 = objc_msgSend_string(v805, v526, v527, v528, v529, v530);
              uint64_t v537 = objc_msgSend_length(v531, v532, v533, v534, v535, v536);
              int v539 = objc_msgSend_correctionCheckingResultWithRange_replacementString_alternativeStrings_(v525, v538, v788, v537, (uint64_t)v792, (uint64_t)v797);

              uint64_t v545 = objc_msgSend_strokeGroupResult(v789, v540, v541, v542, v543, v544);
              unint64_t v551 = objc_msgSend_inputStrokeIdentifiers(v545, v546, v547, v548, v549, v550);
              unint64_t v557 = objc_msgSend_strokeIndexes(v805, v552, v553, v554, v555, v556);
              unint64_t v562 = objc_msgSend_objectsAtIndexes_(v551, v558, (uint64_t)v557, v559, v560, v561);

              uint64_t v568 = objc_msgSend_recognitionSession(v787, v563, v564, v565, v566, v567);
              unint64_t v574 = objc_msgSend_latestStrokeProvider(v568, v569, v570, v571, v572, v573);
              uint64_t v578 = objc_msgSend_strokeIdentifiersForData_withStrokeProvider_(CHStrokeUtilities, v575, (uint64_t)v562, (uint64_t)v574, v576, v577);

              unint64_t v584 = objc_msgSend_recognitionSession(v787, v579, v580, v581, v582, v583);
              uint64_t v590 = objc_msgSend_latestStrokeProvider(v584, v585, v586, v587, v588, v589);
              uint64_t v595 = objc_msgSend_setWithArray_(MEMORY[0x1E4F1CAD0], v591, (uint64_t)v578, v592, v593, v594);
              uint64_t v600 = objc_msgSend_cachedTranscriptionForStrokeGroup_(v590, v596, (uint64_t)v595, v597, v598, v599);
              BOOL v601 = v600 == 0;

              if (!v601)
              {
                if (qword_1EA3CA000 != -1) {
                  dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
                }
                uint64_t v607 = (id)qword_1EA3C9FA0;
                if (os_log_type_enabled(v607, OS_LOG_TYPE_DEFAULT))
                {
                  int v613 = objc_msgSend_string(v805, v608, v609, v610, v611, v612);
                  *(_DWORD *)std::string buf = 138740227;
                  *(void *)&uint8_t buf[4] = v613;
                  *(_WORD *)&buf[12] = 2117;
                  *(void *)&buf[14] = v792;
                  _os_log_impl(&dword_1C492D000, v607, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery Spelling correction skipped for tokeunint64_t n = %{sensitive}@ -> %{sensitive}@ because there is a matching recognition result in the transcription cache.", buf, 0x16u);
                }
                goto LABEL_139;
              }
              if (objc_msgSend_hasValidPrincipalLines(v805, v602, v603, v604, v605, v606))
              {
                objc_msgSend_principalOrientation(v805, v614, v615, v616, v617, v618);
                if (fabs(v622) > 0.2)
                {
                  if (qword_1EA3CA000 != -1) {
                    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
                  }
                  uint64_t v607 = (id)qword_1EA3C9FA0;
                  if (os_log_type_enabled(v607, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v628 = objc_msgSend_string(v805, v623, v624, v625, v626, v627);
                    objc_msgSend_principalOrientation(v805, v629, v630, v631, v632, v633);
                    *(_DWORD *)std::string buf = 138740483;
                    *(void *)&uint8_t buf[4] = v628;
                    *(_WORD *)&buf[12] = 2117;
                    *(void *)&buf[14] = v792;
                    *(_WORD *)&unsigned char buf[22] = 2048;
                    *(void *)int v837 = v634;
                    _os_log_impl(&dword_1C492D000, v607, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery Spelling correction skipped for tokeunint64_t n = %{sensitive}@ -> %{sensitive}@ because baseline is slanted (angle %.2f).", buf, 0x20u);
                  }
                  goto LABEL_139;
                }
                v835 = v805;
                long long v641 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v619, (uint64_t)&v835, 1, v620, v621);
                uint64_t v834 = v562;
                long long v645 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v642, (uint64_t)&v834, 1, v643, v644);
                uint64_t v651 = objc_msgSend_recognitionSession(v787, v646, v647, v648, v649, v650);
                uint64_t v657 = objc_msgSend_latestStrokeProvider(v651, v652, v653, v654, v655, v656);
                uint64_t v660 = (const CGPath *)objc_msgSend_newBaselinePathForTokens_strokeIdentifiers_strokeProvider_(CHTokenizedTextResult, v658, (uint64_t)v641, (uint64_t)v645, (uint64_t)v657, v659);

                unint64_t v661 = [CHTextCheckingQueryItem alloc];
                uint64_t v666 = objc_msgSend_setWithArray_(MEMORY[0x1E4F1CAD0], v662, (uint64_t)v578, v663, v664, v665);
                id v667 = sub_1C4B21E10(v661, v666, v539, v660);

                if (v660) {
                  CGPathRelease(v660);
                }
                if (qword_1EA3CA000 != -1) {
                  dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
                }
                uint64_t v668 = (id)qword_1EA3C9FA0;
                if (os_log_type_enabled(v668, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v673 = objc_msgSend_objectAtIndexedSubscript_(v809, v669, v807, v670, v671, v672);
                  uint64_t v679 = objc_msgSend_firstObject(v673, v674, v675, v676, v677, v678);
                  uint64_t v685 = objc_msgSend_string(v679, v680, v681, v682, v683, v684);
                  uint64_t v691 = objc_msgSend_count(v562, v686, v687, v688, v689, v690);
                  *(_DWORD *)std::string buf = 138740483;
                  *(void *)&uint8_t buf[4] = v792;
                  *(_WORD *)&buf[12] = 2117;
                  *(void *)&buf[14] = v685;
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  *(void *)int v837 = v691;
                  _os_log_impl(&dword_1C492D000, v668, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery Found Spelling correctiounint64_t n = %{sensitive}@ as replacement to %{sensitive}@, covering %ld strokes", buf, 0x20u);
                }
                uint64_t v692 = v787[9];
                *(void *)unsigned int v831 = MEMORY[0x1E4F143A8];
                *(void *)&v831[8] = 3221225472;
                *(void *)&v831[16] = sub_1C4B21F0C;
                float v832 = &unk_1E64E3D68;
                id v693 = v667;
                id v833 = v693;
                uint64_t v702 = objc_msgSend_indexOfObjectPassingTest_(v692, v694, (uint64_t)v831, v695, v696, v697);
                if (v702 == 0x7FFFFFFFFFFFFFFFLL)
                {
                  objc_msgSend_addObject_(v784, v698, (uint64_t)v693, v699, v700, v701);
                }
                else
                {
                  uint64_t v703 = [CHTextCheckingQueryItem alloc];
                  uint64_t v708 = objc_msgSend_setWithArray_(MEMORY[0x1E4F1CAD0], v704, (uint64_t)v578, v705, v706, v707);
                  uint64_t v713 = objc_msgSend_objectAtIndexedSubscript_(v787[9], v709, v702, v710, v711, v712);
                  unint64_t v719 = (const CGPath *)objc_msgSend_estimatedBaseline(v713, v714, v715, v716, v717, v718);
                  id v720 = sub_1C4B21E10(v703, v708, v539, v719);

                  id v693 = v720;
                  objc_msgSend_addObject_(v784, v721, (uint64_t)v720, v722, v723, v724);
                }

LABEL_150:
              }
              else
              {
                if (qword_1EA3CA000 != -1) {
                  dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
                }
                uint64_t v607 = (id)qword_1EA3C9FA0;
                if (os_log_type_enabled(v607, OS_LOG_TYPE_DEFAULT))
                {
                  long long v640 = objc_msgSend_string(v805, v635, v636, v637, v638, v639);
                  *(_DWORD *)std::string buf = 138740227;
                  *(void *)&uint8_t buf[4] = v640;
                  *(_WORD *)&buf[12] = 2117;
                  *(void *)&buf[14] = v792;
                  _os_log_impl(&dword_1C492D000, v607, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery Spelling correction skipped for tokeunint64_t n = %{sensitive}@ -> %{sensitive}@ because no accurate baseline is available.", buf, 0x16u);
                }
LABEL_139:
              }
LABEL_151:
            }
          }
          IndeCGFloat x = objc_msgSend_firstIndex(v781, v211, v786, v212, v213, v214);
          uint64_t v743 = objc_msgSend_lastIndex(v781, v738, v739, v740, v741, v742);
          uint64_t v749 = v743 - objc_msgSend_firstIndex(v781, v744, v745, v746, v747, v748) + 1;
          v811[0] = MEMORY[0x1E4F143A8];
          v811[1] = 3221225472;
          v811[2] = sub_1C4B21F40;
          v811[3] = &unk_1E64E3DB8;
          id v812 = v791;
          uint64_t v813 = v787;
          id v814 = v782;
          objc_msgSend_enumerateRangesInRange_options_usingBlock_(v781, v750, Index, v749, 0, (uint64_t)v811);

LABEL_160:
        }
        uint64_t v777 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v27, (uint64_t)&v824, (uint64_t)v830, 16, v31);
      }
      while (v777);
    }

    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v751 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v751, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v757 = objc_msgSend_count(v782, v752, v753, v754, v755, v756);
      *(_DWORD *)std::string buf = 134217984;
      *(void *)&uint8_t buf[4] = v757;
      _os_log_impl(&dword_1C492D000, v751, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery._textCheckingResultsForSessionResult: completed, found %lu items.", buf, 0xCu);
    }

    v810[0] = MEMORY[0x1E4F143A8];
    v810[1] = 3221225472;
    v810[2] = sub_1C4B22DC8;
    v810[3] = &unk_1E64E3D68;
    v810[4] = v787;
    size_t v762 = objc_msgSend_indexesOfObjectsPassingTest_(v782, v758, (uint64_t)v810, v759, v760, v761);
    uint64_t v767 = objc_msgSend_objectsAtIndexes_(v782, v763, (uint64_t)v762, v764, v765, v766);
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v768 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v768, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v774 = objc_msgSend_count(v782, v769, v770, v771, v772, v773);
      *(_DWORD *)std::string buf = 134217984;
      *(void *)&uint8_t buf[4] = v774;
      _os_log_impl(&dword_1C492D000, v768, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery._textCheckingResultsForSessionResult: completed, kept %lu valid items after codemap filtering.", buf, 0xCu);
    }
  }
  else
  {
    uint64_t v767 = 0;
  }

  return v767;
}

void sub_1C4B21180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B21774(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4B21784(uint64_t a1)
{
}

void sub_1C4B2178C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = objc_msgSend_sharedEditor(MEMORY[0x1E4FAE1D8], a2, a3, a4, a5, a6);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = sub_1C4B21874;
  v13[3] = &unk_1E64E3CD0;
  long long v12 = *(_OWORD *)(a1 + 48);
  id v10 = (id)v12;
  long long v14 = v12;
  objc_msgSend_requestCheckingOfString_language_offset_options_completionHandler_(v7, v11, v8, @"en", 0, v9, v13);
}

void sub_1C4B2185C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C4B21874(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v9 = objc_msgSend_copy(v3, v4, v5, v6, v7, v8);
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  long long v12 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = objc_msgSend_count(*(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v13, v14, v15, v16, v17);
    int v19 = 134217984;
    uint64_t v20 = v18;
    _os_log_impl(&dword_1C492D000, v12, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQueryItem found %ld grammar text checking results in paragraph", (uint8_t *)&v19, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4B21990(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B219B4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  id v80 = a3;
  id v6 = a4;
  ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  long long v87 = 0u;
  long long v88 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  id v7 = v6;
  uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v85, (uint64_t)v90, 16, v9);
  if (v15)
  {
    uint64_t v16 = *(void *)v86;
    do
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        if (*(void *)v86 != v16) {
          objc_enumerationMutation(v7);
        }
        uint64_t v18 = *(void *)(*((void *)&v85 + 1) + 8 * i);
        int v19 = objc_msgSend_recognitionSession(*(void **)(a1 + 32), v10, v11, v12, v13, v14);
        uint64_t v25 = objc_msgSend_latestStrokeProvider(v19, v20, v21, v22, v23, v24);
        uint64_t v29 = objc_msgSend_strokeIdentifiersForData_withStrokeProvider_(CHStrokeUtilities, v26, v18, (uint64_t)v25, v27, v28);

        objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 40), v30, (uint64_t)v29, v31, v32, v33);
      }
      uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v85, (uint64_t)v90, 16, v14);
    }
    while (v15);
  }

  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  id v34 = v80;
  uint64_t v42 = objc_msgSend_countByEnumeratingWithState_objects_count_(v34, v35, (uint64_t)&v81, (uint64_t)v89, 16, v36);
  if (v42)
  {
    uint64_t v43 = *(void *)v82;
    do
    {
      for (uint64_t j = 0; j != v42; ++j)
      {
        if (*(void *)v82 != v43) {
          objc_enumerationMutation(v34);
        }
        uint64_t v45 = *(void **)(*((void *)&v81 + 1) + 8 * j);
        if (objc_msgSend_length(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v37, v38, v39, v40, v41)
          && (objc_msgSend_properties(v45, v46, v47, v48, v49, v50) & 0x20) != 0)
        {
          uint64_t v51 = objc_msgSend_stringByAppendingString_(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v46, @" ", v48, v49, v50);
          uint64_t v52 = *(void *)(*(void *)(a1 + 56) + 8);
          uint64_t v53 = *(void **)(v52 + 40);
          *(void *)(v52 + 40) = v51;
        }
        uint64_t v54 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
        uint64_t v55 = objc_msgSend_string(v45, v46, v47, v48, v49, v50);
        uint64_t v60 = objc_msgSend_stringByAppendingString_(v54, v56, (uint64_t)v55, v57, v58, v59);
        uint64_t v61 = *(void *)(*(void *)(a1 + 56) + 8);
        uint64_t v62 = *(void **)(v61 + 40);
        *(void *)(v61 + 40) = v60;
      }
      uint64_t v42 = objc_msgSend_countByEnumeratingWithState_objects_count_(v34, v37, (uint64_t)&v81, (uint64_t)v89, 16, v41);
    }
    while (v42);
  }

  uint64_t v68 = *(void *)(*(void *)(a1 + 64) + 8);
  char v69 = *(unsigned char *)(v68 + 24);
  if (v69)
  {
    char v69 = objc_msgSend_indexOfObjectPassingTest_(v34, v63, (uint64_t)&unk_1F2013AC8, v65, v66, v67) == 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v68 = *(void *)(*(void *)(a1 + 64) + 8);
  }
  *(unsigned char *)(v68 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v69;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    unint64_t v70 = objc_msgSend_recognitionSession(*(void **)(a1 + 32), v63, v64, v65, v66, v67);
    uint8x8_t v76 = objc_msgSend_latestStrokeProvider(v70, v71, v72, v73, v74, v75);
    uint64_t v79 = (const CGPath *)objc_msgSend_newBaselinePathForTokens_strokeIdentifiers_strokeProvider_(CHTokenizedTextResult, v77, (uint64_t)v34, (uint64_t)v7, (uint64_t)v76, v78);

    CGPathAddPath(*(CGMutablePathRef *)(a1 + 72), 0, v79);
    CGPathRelease(v79);
  }
}

void sub_1C4B21CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B21D8C(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (objc_msgSend_hasValidPrincipalLines(v2, v3, v4, v5, v6, v7))
  {
    objc_msgSend_principalOrientation(v2, v8, v9, v10, v11, v12);
    BOOL v14 = fabs(v13) > 0.2;

    return v14;
  }
  else
  {

    return 1;
  }
}

void sub_1C4B21DF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B21E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_isEquivalentToTextCheckingQueryItem_, a2, a4, a5, a6);
}

id sub_1C4B21E10(id a1, void *a2, void *a3, const CGPath *a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a1)
  {
    v24.receiver = a1;
    v24.super_class = (Class)CHTextCheckingQueryItem;
    a1 = objc_msgSendSuper2(&v24, sel_init);
    if (a1)
    {
      uint64_t v14 = objc_msgSend_copy(v7, v9, v10, v11, v12, v13);
      uint64_t v15 = (void *)*((void *)a1 + 4);
      *((void *)a1 + 4) = v14;

      uint64_t v21 = objc_msgSend_copy(v8, v16, v17, v18, v19, v20);
      uint64_t v22 = (void *)*((void *)a1 + 5);
      *((void *)a1 + 5) = v21;

      *((void *)a1 + 1) = 0x7FFFFFFFFFFFFFFFLL;
      if (!CGPathIsEmpty(a4)) {
        *((void *)a1 + 3) = CGPathRetain(a4);
      }
      *((_DWORD *)a1 + 4) = 0;
    }
  }

  return a1;
}

void sub_1C4B21EF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B21F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_isEquivalentToTextCheckingQueryItem_, a2, a4, a5, a6);
}

__n128 sub_1C4B21F18(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

uint64_t sub_1C4B21F28(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v4 = *(void *)(*(void *)(result + 32) + 8);
  *(void *)(v4 + 48) = a2;
  *(void *)(v4 + 56) = a3;
  *a4 = 1;
  return result;
}

void sub_1C4B21F40(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v324 = *MEMORY[0x1E4F143B8];
  objc_msgSend_subarrayWithRange_(*(void **)(a1 + 32), a2, (uint64_t)a2, a3, a5, a6);
  id v266 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = [CHContextualTextResults alloc];
  uint64_t v11 = objc_msgSend_initWithTextResults_(v6, v7, (uint64_t)v266, v8, v9, v10);
  uint64_t v12 = *(void ***)(a1 + 40);
  id v272 = v11;
  if (v12)
  {
    uint64_t v270 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v13, v14, v15, v16, v17);
    uint64_t v23 = objc_msgSend_rawTranscription(v272, v18, v19, v20, v21, v22);
    uint64_t v273 = v12;
    objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v23, v24, @"\n", @" ", v25, v26);
    unint64_t v276 = (NSString *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E4F28B88], v27, v28, v29, v30, v31);
    uint64_t v32 = (NSCharacterSet *)objc_claimAutoreleasedReturnValue();
    uint64_t v33 = rangeOfCharactersFromSet(v276, v32, 1);

    if (v33 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v39 = objc_msgSend_substringToIndex_(v276, v34, v33, v36, v37, v38);

      unint64_t v276 = (NSString *)v39;
    }
    objc_msgSend_ch_sentenceEndPunctuationCharacterSet(MEMORY[0x1E4F28B88], v34, v35, v36, v37, v38);
    uint64_t v40 = (NSCharacterSet *)objc_claimAutoreleasedReturnValue();
    uint64_t v41 = rangeOfCharactersFromSet(v276, v40, 1);
    uint64_t v43 = v42;

    if (v41 == 0x7FFFFFFFFFFFFFFFLL || v41 + v43 < (unint64_t)objc_msgSend_length(v276, v44, v45, v46, v47, v48))
    {
      uint64_t v49 = objc_msgSend_stringByAppendingString_(v276, v44, @".", v46, v47, v48);

      uint64_t v50 = (void *)v49;
    }
    else
    {
      uint64_t v50 = v276;
    }
    dispatch_block_t v51 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, &unk_1F2010B40);
    uint64_t v313 = 0;
    uint64_t v314 = &v313;
    uint64_t v315 = 0x3032000000;
    uint64_t v316 = sub_1C4B21774;
    uint64_t v317 = sub_1C4B21784;
    id v318 = 0;
    uint64_t v52 = qword_1EA3C9F70;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4B2178C;
    block[3] = &unk_1E64E3CF8;
    unint64_t v277 = v50;
    uint64_t v309 = v277;
    id v310 = 0;
    uint64_t v312 = &v313;
    id v53 = v51;
    id v311 = v53;
    dispatch_sync(v52, block);
    uint64_t v264 = v53;
    dispatch_block_wait(v53, 0xFFFFFFFFFFFFFFFFLL);
    long long v306 = 0u;
    long long v307 = 0u;
    long long v304 = 0u;
    long long v305 = 0u;
    obunint64_t j = (id)v314[5];
    uint64_t v269 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v54, (uint64_t)&v304, (uint64_t)v322, 16, v55);
    if (v269)
    {
      uint64_t v268 = *(void *)v305;
      do
      {
        for (uint64_t i = 0; i != v269; ++i)
        {
          if (*(void *)v305 != v268) {
            objc_enumerationMutation(obj);
          }
          uint64_t v274 = *(void **)(*((void *)&v304 + 1) + 8 * i);
          uint64_t v61 = objc_msgSend_grammarDetails(v274, v56, v57, v58, v59, v60, v264);
          uint64_t v279 = objc_msgSend_mutableCopy(v61, v62, v63, v64, v65, v66);

          for (unint64_t j = 0; j < objc_msgSend_count(v279, v67, v68, v69, v70, v71); unint64_t j = v278 + 1)
          {
            uint64_t v280 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v73, v74, v75, v76, v77);
            uint64_t v298 = 0;
            uint64_t v299 = &v298;
            uint64_t v300 = 0x3032000000;
            uint64_t v301 = sub_1C4B21774;
            uint64_t v302 = sub_1C4B21784;
            uint64_t v303 = &stru_1F20141C8;
            long long v82 = objc_msgSend_objectAtIndex_(v279, v78, j, v79, v80, v81);
            uint64_t v281 = objc_msgSend_mutableCopy(v82, v83, v84, v85, v86, v87);
            uint64_t v278 = j;

            uint64_t v92 = objc_msgSend_objectForKey_(v281, v88, @"NSGrammarRange", v89, v90, v91);
            uint64_t v98 = objc_msgSend_rangeValue(v92, v93, v94, v95, v96, v97);
            uint64_t v100 = v99;

            uint64_t v106 = objc_msgSend_range(v274, v101, v102, v103, v104, v105);
            if (qword_1EA3CA000 != -1) {
              dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
            }
            uint64_t v107 = (id)qword_1EA3C9FA0;
            if (os_log_type_enabled(v107, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v112 = objc_msgSend_objectForKey_(v281, v108, @"NSGrammarCorrections", v109, v110, v111);
              uint64_t v118 = objc_msgSend_count(v112, v113, v114, v115, v116, v117);
              uint64_t v123 = objc_msgSend_objectForKey_(v281, v119, @"NSGrammarCorrections", v120, v121, v122);
              *(_DWORD *)std::string buf = 134218243;
              *(void *)&uint8_t buf[4] = v118;
              *(_WORD *)&buf[12] = 2117;
              *(void *)&buf[14] = v123;
              _os_log_impl(&dword_1C492D000, v107, OS_LOG_TYPE_DEBUG, "CHTextCheckingQuery Found Grammar correction with %ld corrections = %{sensitive}@", buf, 0x16u);
            }
            if (v100)
            {
              CGMutablePathRef Mutable = CGPathCreateMutable();
              unint64_t v125 = v106 + v98;
              *(void *)std::string buf = 0;
              *(void *)&buf[8] = buf;
              *(void *)&uint8_t buf[16] = 0x2020000000;
              char v321 = 1;
              uint64_t v294 = 0;
              uint64_t v295 = &v294;
              uint64_t v296 = 0x2020000000;
              uint64_t v297 = 0;
              v288[0] = MEMORY[0x1E4F143A8];
              v288[1] = 3221225472;
              v288[2] = sub_1C4B219B4;
              v288[3] = &unk_1E64E3D40;
              uint64_t v290 = &v294;
              v288[4] = v273;
              id v126 = v280;
              id v289 = v126;
              uint64_t v291 = &v298;
              uint64_t v292 = buf;
              path = Mutable;
              CGMutablePathRef v293 = Mutable;
              objc_msgSend_enumerateGroupsCoveredByStringRange_block_(v272, v127, v125, v100, (uint64_t)v288, v128);
              uint64_t v134 = objc_msgSend_recognitionSession(v273, v129, v130, v131, v132, v133);
              uint64_t v140 = objc_msgSend_latestStrokeProvider(v134, v135, v136, v137, v138, v139);
              uint64_t v145 = objc_msgSend_cachedTranscriptionForStrokeGroup_(v140, v141, (uint64_t)v126, v142, v143, v144);
              BOOL v146 = v145 == 0;

              if (v146)
              {
                if (*(unsigned char *)(*(void *)&buf[8] + 24)
                  && objc_msgSend_count(v126, v147, v148, v149, v150, v151)
                  && v295[3] == 1)
                {
                  unint64_t v159 = 0;
                  unint64_t v160 = 0;
                  unint64_t v161 = v100 + v125 - 1;
                  while (v159 < objc_msgSend_length(v277, v154, v155, v156, v157, v158))
                  {
                    uint64_t v162 = v299[5];
                    uint64_t v163 = objc_msgSend_length(v277, v154, v155, v156, v157, v158);
                    unint64_t v165 = objc_msgSend_rangeOfString_options_range_(v277, v164, v162, 0, (uint64_t)&v160[v159], v163 - (void)&v160[v159]);
                    unint64_t v159 = v165;
                    if (v165 == 0x7FFFFFFFFFFFFFFFLL)
                    {
                      unint64_t v159 = 0x7FFFFFFFFFFFFFFFLL;
                      break;
                    }
                    unint64_t v160 = v154;
                    if (v125 >= v165
                      && v125 - v165 < (unint64_t)v154
                      && v161 >= v165
                      && v161 - v165 < (unint64_t)v154)
                    {
                      break;
                    }
                  }
                  uint64_t v172 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v154, v155, v156, v157, v158);
                  if (v159 == 0x7FFFFFFFFFFFFFFFLL)
                  {
                    objc_msgSend_objectForKey_(v281, v168, @"NSGrammarCorrections", v169, v170, v171);
                    uint64_t v172 = v173 = v172;
                  }
                  else
                  {
                    long long v286 = 0u;
                    long long v287 = 0u;
                    long long v284 = 0u;
                    long long v285 = 0u;
                    uint64_t v173 = objc_msgSend_objectForKey_(v281, v168, @"NSGrammarCorrections", v169, v170, v171);
                    uint64_t v178 = objc_msgSend_countByEnumeratingWithState_objects_count_(v173, v174, (uint64_t)&v284, (uint64_t)v319, 16, v175);
                    if (v178)
                    {
                      uint64_t v179 = v125 - v159;
                      uint64_t v180 = *(void *)v285;
                      do
                      {
                        for (uint64_t k = 0; k != v178; ++k)
                        {
                          if (*(void *)v285 != v180) {
                            objc_enumerationMutation(v173);
                          }
                          uint64_t v182 = objc_msgSend_stringByReplacingCharactersInRange_withString_((void *)v299[5], v176, v179, v100, *(void *)(*((void *)&v284 + 1) + 8 * k), v177);
                          objc_msgSend_addObject_(v172, v183, (uint64_t)v182, v184, v185, v186);
                        }
                        uint64_t v178 = objc_msgSend_countByEnumeratingWithState_objects_count_(v173, v176, (uint64_t)&v284, (uint64_t)v319, 16, v177);
                      }
                      while (v178);
                    }
                  }

                  objc_msgSend_setObject_forKeyedSubscript_(v281, v187, (uint64_t)v172, @"NSGrammarCorrections", v188, v189);
                  objc_msgSend_setObject_atIndexedSubscript_(v279, v190, (uint64_t)v281, v278, v191, v192);
                  uint64_t v195 = objc_msgSend_grammarCheckingResultWithRange_details_(MEMORY[0x1E4F29048], v193, v125, v100, (uint64_t)v279, v194);
                  int64_t v196 = [CHTextCheckingQueryItem alloc];
                  id v197 = v126;
                  id v198 = v195;
                  if (v196)
                  {
                    v323.receiver = v196;
                    v323.super_class = (Class)CHTextCheckingQueryItem;
                    uint64_t v204 = objc_msgSendSuper2(&v323, sel_init);
                    if (v204)
                    {
                      uint64_t v205 = objc_msgSend_copy(v197, v199, v200, v201, v202, v203);
                      unint64_t v206 = (void *)v204[4];
                      v204[4] = v205;

                      uint64_t v212 = objc_msgSend_copy(v198, v207, v208, v209, v210, v211);
                      uint64_t v213 = (void *)v204[5];
                      v204[5] = v212;

                      v204[1] = v278;
                      if (!CGPathIsEmpty(path)) {
                        v204[3] = CGPathRetain(path);
                      }
                      *((_DWORD *)v204 + 4) = 1;
                    }
                  }
                  else
                  {
                    uint64_t v204 = 0;
                  }

                  uint64_t v214 = v273[9];
                  v282[0] = MEMORY[0x1E4F143A8];
                  v282[1] = 3221225472;
                  v282[2] = sub_1C4B21E04;
                  v282[3] = &unk_1E64E3D68;
                  uint64_t v215 = v204;
                  id v283 = v215;
                  uint64_t v224 = objc_msgSend_indexOfObjectPassingTest_(v214, v216, (uint64_t)v282, v217, v218, v219);
                  if (v224 == 0x7FFFFFFFFFFFFFFFLL)
                  {
                    objc_msgSend_addObject_(v270, v220, (uint64_t)v215, v221, v222, v223);
                    uint64_t v225 = v215;
                  }
                  else
                  {
                    unint64_t v226 = [CHTextCheckingQueryItem alloc];
                    uint64_t v231 = objc_msgSend_objectAtIndexedSubscript_(v273[9], v227, v224, v228, v229, v230);
                    long long v237 = (const CGPath *)objc_msgSend_estimatedBaseline(v231, v232, v233, v234, v235, v236);
                    id v238 = v197;
                    id v239 = v198;
                    if (v226)
                    {
                      v323.receiver = v226;
                      v323.super_class = (Class)CHTextCheckingQueryItem;
                      uint64_t v240 = v238;
                      unint64_t v241 = v239;
                      uint64_t v225 = objc_msgSendSuper2(&v323, sel_init);
                      if (v225)
                      {
                        uint64_t v247 = objc_msgSend_copy(v238, v242, v243, v244, v245, v246);
                        uint64_t v248 = (void *)v225[4];
                        v225[4] = v247;

                        uint64_t v254 = objc_msgSend_copy(v241, v249, v250, v251, v252, v253);
                        uint64_t v255 = (void *)v225[5];
                        v225[5] = v254;

                        v225[1] = v278;
                        if (!CGPathIsEmpty(v237)) {
                          v225[3] = CGPathRetain(v237);
                        }
                        *((_DWORD *)v225 + 4) = 1;
                      }
                    }
                    else
                    {
                      uint64_t v225 = 0;
                      uint64_t v240 = v238;
                      unint64_t v241 = v239;
                    }

                    objc_msgSend_addObject_(v270, v256, (uint64_t)v225, v257, v258, v259);
                  }
                }
                if (path) {
                  CGPathRelease(path);
                }
              }
              else
              {
                if (qword_1EA3CA000 != -1) {
                  dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
                }
                uint64_t v152 = (id)qword_1EA3C9FA0;
                if (os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v153 = (void *)v299[5];
                  LODWORD(v323.receiver) = 138739971;
                  *(id *)((char *)&v323.receiver + 4) = v153;
                  _os_log_impl(&dword_1C492D000, v152, OS_LOG_TYPE_DEFAULT, "CHTextCheckingQuery Grammar correction skipped for string = %{sensitive}@ because there is a matching recognition result in the transcription cache.", (uint8_t *)&v323, 0xCu);
                }
              }
              _Block_object_dispose(&v294, 8);
              _Block_object_dispose(buf, 8);
            }

            _Block_object_dispose(&v298, 8);
          }
        }
        uint64_t v269 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v56, (uint64_t)&v304, (uint64_t)v322, 16, v60);
      }
      while (v269);
    }

    _Block_object_dispose(&v313, 8);
  }
  else
  {
    uint64_t v270 = 0;
  }

  objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 48), v260, (uint64_t)v270, v261, v262, v263);
}

void sub_1C4B22B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  _Unwind_Resume(a1);
}

void sub_1C4B22B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, id a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  _Block_object_dispose(&STACK[0x260], 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B22DC8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  objc_msgSend_replacementStrings(a2, (const char *)a2, a3, a4, a5, a6);
  obunint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v46, (uint64_t)v52, 16, v8);
  if (v14)
  {
    uint64_t v15 = *(void *)v47;
    while (2)
    {
      uint64_t v16 = 0;
      do
      {
        if (*(void *)v47 != v15) {
          objc_enumerationMutation(obj);
        }
        uint64_t v17 = *(void **)(*((void *)&v46 + 1) + 8 * v16);
        uint64_t v18 = objc_msgSend_recognitionSession(*(void **)(a1 + 32), v9, v10, v11, v12, v13);
        objc_super v24 = objc_msgSend_textSynthesizer(v18, v19, v20, v21, v22, v23);
        uint64_t v50 = CHTextSynthesisOptionSupportedCharactersStrict;
        uint64_t v51 = MEMORY[0x1E4F1CC38];
        uint64_t v27 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v25, (uint64_t)&v51, (uint64_t)&v50, 1, v26);
        uint64_t v31 = objc_msgSend_supportedCharacterIndexesForString_options_(v24, v28, (uint64_t)v17, (uint64_t)v27, v29, v30);

        unint64_t v37 = objc_msgSend_count(v31, v32, v33, v34, v35, v36);
        LOBYTE(v37) = v37 < objc_msgSend_length(v17, v38, v39, v40, v41, v42);

        if (v37)
        {
          uint64_t v43 = 0;
          goto LABEL_11;
        }
        ++v16;
      }
      while (v14 != v16);
      uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v46, (uint64_t)v52, 16, v13);
      if (v14) {
        continue;
      }
      break;
    }
  }
  uint64_t v43 = 1;
LABEL_11:

  return v43;
}

void sub_1C4B22F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B230DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4B230FC(uint64_t a1)
{
}

void sub_1C4B231C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CHTextCheckingQueryItem;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C4B232B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B232D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B234A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B23568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B23578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B23700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B23950(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B23AE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B23AFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B23B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B23B20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B23C68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B24DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B251B4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, unsigned char *a5, uint64_t a6)
{
  uint64_t v8 = objc_msgSend_scriptCodeForCodepoint_(CHTextInputScriptSpec, a2, (uint64_t)a2, a4, (uint64_t)a5, a6);
  uint64_t result = objc_msgSend_isSkippableScriptCode_(CHTextInputScriptSpec, v9, v8, v10, v11, v12);
  if ((result & 1) == 0)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v8;
    *a5 = 1;
  }
  return result;
}

void sub_1C4B25218(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v370 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a3;
  obunint64_t j = a4;
  id v340 = a4;
  uint64_t v343 = v6;
  uint64_t v341 = v7;
  uint64_t v13 = objc_msgSend_count(v6, v8, v9, v10, v11, v12);
  if (v13 != objc_msgSend_count(v7, v14, v15, v16, v17, v18))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    objc_super v24 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218240;
      *(void *)&uint8_t buf[4] = objc_msgSend_count(v6, v25, v26, v27, v28, v29);
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = objc_msgSend_count(v7, v30, v31, v32, v33, v34);
      _os_log_impl(&dword_1C492D000, v24, OS_LOG_TYPE_FAULT, "CHDataDetectorQuery: Number of stroke group idenfitiers (%lu) doesn't match the number of stroke index sets (%lu).", buf, 0x16u);
    }
  }
  uint64_t v355 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v19, v20, v21, v22, v23);
  path = CGPathCreateMutable();
  unint64_t v344 = 0;
  do
  {
    if (v344 >= objc_msgSend_count(v343, v35, v36, v37, v38, v39))
    {
      uint64_t v303 = objc_msgSend_allObjects(v355, v40, v41, v42, v43, v44);
      uint64_t v309 = objc_msgSend_recognitionSession(*(void **)(a1 + 48), v304, v305, v306, v307, v308);
      uint64_t v315 = objc_msgSend_latestStrokeProvider(v309, v310, v311, v312, v313, v314);
      char v319 = objc_msgSend_strokeIdentifiersForData_withStrokeProvider_(CHStrokeUtilities, v316, (uint64_t)v303, (uint64_t)v315, v317, v318);

      if (v319)
      {
        uint64_t v324 = [CHDataDetectorQueryItem alloc];
        objc_msgSend_setWithArray_(MEMORY[0x1E4F1CAD0], v325, (uint64_t)v319, v326, v327, v328);
        id v329 = (id)objc_claimAutoreleasedReturnValue();
        id v330 = v340;
        if (v324)
        {
          *(void *)std::string buf = v324;
          *(void *)&buf[8] = CHDataDetectorQueryItem;
          id v336 = objc_msgSendSuper2((objc_super *)buf, sel_init);
          if (v336)
          {
            uint64_t v337 = objc_msgSend_copy(v329, v331, v332, v333, v334, v335);
            uint64_t v338 = (void *)*((void *)v336 + 2);
            *((void *)v336 + 2) = v337;

            objc_storeStrong((id *)v336 + 3, obj);
            *((void *)v336 + 1) = CGPathRetain(path);
          }
        }
        else
        {
          id v336 = 0;
        }

        if (!path) {
          goto LABEL_62;
        }
      }
      else
      {
        id v336 = 0;
        if (!path)
        {
LABEL_62:
          if (v336) {
            objc_msgSend_addObject_(*(void **)(a1 + 56), v320, (uint64_t)v336, v321, v322, v323);
          }

          break;
        }
      }
      CGPathRelease(path);
      goto LABEL_62;
    }
    uint64_t v357 = objc_msgSend_objectAtIndexedSubscript_(v343, v40, v344, v42, v43, v44);
    uint64_t v353 = objc_msgSend_objectAtIndexedSubscript_(v341, v45, v344, v46, v47, v48);
    uint64_t v346 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v49, v50, v51, v52, v53);
    unint64_t v349 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v54, v55, v56, v57, v58);
    uint64_t v350 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v59, v60, v61, v62, v63);
    uint64_t v351 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v64, v65, v66, v67, v68);
    uint64_t v345 = objc_msgSend_string(MEMORY[0x1E4F28E78], v69, v70, v71, v72, v73);
    unint64_t v354 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v74, v75, v76, v77, v78);
    unint64_t v84 = 0;
    while (v84 < objc_msgSend_count(v357, v79, v80, v81, v82, v83))
    {
      uint64_t v85 = objc_msgSend_objectAtIndexedSubscript_(v357, v79, v84, v81, v82, v83);
      uint64_t v90 = objc_msgSend_objectAtIndexedSubscript_(v353, v86, v84, v87, v88, v89);
      uint64_t v91 = *(void **)(a1 + 32);
      uint64_t v97 = objc_msgSend_integerValue(v85, v92, v93, v94, v95, v96);
      uint64_t v102 = objc_msgSend_objectAtIndexedSubscript_(v91, v98, v97, v99, v100, v101);
      objc_msgSend_addObject_(v354, v103, (uint64_t)v102, v104, v105, v106);
      uint64_t v107 = *(void **)(a1 + 40);
      uint64_t v113 = objc_msgSend_uniqueIdentifier(v102, v108, v109, v110, v111, v112);
      uint64_t v118 = objc_msgSend_recognitionResultForStrokeGroupIdentifier_(v107, v114, v113, v115, v116, v117);
      uint64_t v124 = objc_msgSend_inputStrokeIdentifiers(v118, v119, v120, v121, v122, v123);
      unint64_t v130 = objc_msgSend_count(v124, v125, v126, v127, v128, v129);
      if (v130 < objc_msgSend_count(v90, v131, v132, v133, v134, v135))
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        uint64_t v141 = (id)qword_1EA3C9F90[0];
        if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
        {
          uint64_t v147 = objc_msgSend_count(v90, v142, v143, v144, v145, v146);
          uint64_t v153 = objc_msgSend_count(v124, v148, v149, v150, v151, v152);
          *(_DWORD *)std::string buf = 134218754;
          *(void *)&uint8_t buf[4] = v147;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v153;
          *(_WORD *)&unsigned char buf[22] = 2112;
          uint64_t v367 = (__n128 (*)(__n128 *, __n128 *))v124;
          LOWORD(v368) = 2112;
          *(void *)((char *)&v368 + 2) = v90;
          uint64_t v154 = v141;
          uint64_t v155 = "Found %lu strokes in the data detected content but only %lu strokes in the entire stroke group: %@. Fou"
                 "nd stroke indexes: %@";
          uint32_t v156 = 42;
          goto LABEL_22;
        }
        goto LABEL_23;
      }
      IndeCGFloat x = objc_msgSend_lastIndex(v90, v136, v137, v138, v139, v140);
      if (Index >= objc_msgSend_count(v124, v158, v159, v160, v161, v162))
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        uint64_t v141 = (id)qword_1EA3C9F90[0];
        if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
        {
          uint64_t v227 = objc_msgSend_lastIndex(v90, v222, v223, v224, v225, v226);
          uint64_t v233 = objc_msgSend_count(v124, v228, v229, v230, v231, v232);
          *(_DWORD *)std::string buf = 134218240;
          *(void *)&uint8_t buf[4] = v227;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v233;
          uint64_t v154 = v141;
          uint64_t v155 = "The last stroke index found in the data detected content (#strokes=%lu) should be within the scope of t"
                 "he strokeIDs array (#strokes=%lu)";
          uint32_t v156 = 22;
LABEL_22:
          _os_log_impl(&dword_1C492D000, v154, OS_LOG_TYPE_ERROR, v155, buf, v156);
        }
LABEL_23:
        char v221 = 0;
        id v189 = v355;
        uint64_t v355 = 0;
        goto LABEL_24;
      }
      uint64_t v348 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v163, v164, v165, v166, v167);
      uint64_t v347 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v168, v169, v170, v171, v172);
      uint64_t v178 = objc_msgSend_recognitionResultsByLocale(v118, v173, v174, v175, v176, v177);
      uint64_t v184 = objc_msgSend_preferredLocale(v118, v179, v180, v181, v182, v183);
      uint64_t v352 = objc_msgSend_objectForKeyedSubscript_(v178, v185, (uint64_t)v184, v186, v187, v188);

      v359[0] = MEMORY[0x1E4F143A8];
      v359[1] = 3221225472;
      v359[2] = sub_1C4B26038;
      v359[3] = &unk_1E64E24B0;
      id v360 = v90;
      id v361 = v85;
      id v362 = v124;
      uint64_t v141 = v347;
      uint64_t v363 = v141;
      id v189 = v348;
      id v364 = v189;
      id v190 = v355;
      id v365 = v190;
      objc_msgSend_enumerateTokensInTopTranscriptionPathWithBlock_(v352, v191, (uint64_t)v359, v192, v193, v194);
      uint64_t v200 = objc_msgSend_topTranscription(v352, v195, v196, v197, v198, v199);
      objc_msgSend_appendFormat_(v345, v201, @" %@", v202, v203, v204, v200);

      objc_msgSend_addObject_(v350, v205, (uint64_t)v189, v206, v207, v208);
      objc_msgSend_addObject_(v351, v209, (uint64_t)v141, v210, v211, v212);
      objc_msgSend_addObjectsFromArray_(v346, v213, (uint64_t)v189, v214, v215, v216);
      objc_msgSend_addObjectsFromArray_(v349, v217, (uint64_t)v141, v218, v219, v220);

      char v221 = 1;
      uint64_t v355 = v190;
LABEL_24:

      ++v84;
      if ((v221 & 1) == 0) {
        break;
      }
    }
    uint64_t v238 = objc_msgSend_count(v349, v79, v80, v81, v82, v83);
    if (!v238)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v254 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v254, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v260 = objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E4F28B88], v255, v256, v257, v258, v259);
        uint64_t v265 = objc_msgSend_stringByTrimmingCharactersInSet_(v345, v261, (uint64_t)v260, v262, v263, v264);
        *(_DWORD *)std::string buf = 138739971;
        *(void *)&uint8_t buf[4] = v265;
        _os_log_impl(&dword_1C492D000, v254, OS_LOG_TYPE_DEFAULT, "CHDataDetectorQuery - No intersecting tokens found in preferredResult(s) with transcriptiounint64_t n = %{sensitive}@", buf, 0xCu);
      }
      if (path) {
        CGPathRelease(path);
      }
      goto LABEL_39;
    }
    if (objc_msgSend_indexOfObjectPassingTest_(v349, v234, (uint64_t)&unk_1F2012EB0, v235, v236, v237) == 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v244 = objc_msgSend_recognitionSession(*(void **)(a1 + 48), v239, v240, v241, v242, v243);
      uint64_t v250 = objc_msgSend_latestStrokeProvider(v244, v245, v246, v247, v248, v249);
      uint64_t v253 = (const CGPath *)objc_msgSend_newBaselinePathForTokens_strokeIdentifiers_strokeProvider_(CHTokenizedTextResult, v251, (uint64_t)v349, (uint64_t)v346, (uint64_t)v250, v252);

LABEL_36:
      goto LABEL_37;
    }
    if (objc_msgSend_count(v354, v239, v240, v241, v242, v243) == 1)
    {
      uint64_t v244 = objc_msgSend_firstObject(v354, v266, v267, v268, v269, v270);
      uint64_t v253 = (const CGPath *)objc_msgSend_newEstimatedBaselineForStrokesWithTokens_tokenStrokeIdentifiers_(v244, v271, (uint64_t)v349, (uint64_t)v346, v272, v273);
      goto LABEL_36;
    }
    CGMutablePathRef Mutable = CGPathCreateMutable();
    unint64_t v280 = 0;
    while (2)
    {
      if (v280 < objc_msgSend_count(v354, v274, v275, v276, v277, v278))
      {
        long long v285 = objc_msgSend_objectAtIndexedSubscript_(v354, v281, v280, v282, v283, v284);
        uint64_t v290 = objc_msgSend_objectAtIndexedSubscript_(v351, v286, v280, v287, v288, v289);
        uint64_t v295 = objc_msgSend_objectAtIndexedSubscript_(v350, v291, v280, v292, v293, v294);
        uint64_t v299 = (const CGPath *)objc_msgSend_newEstimatedBaselineForStrokesWithTokens_tokenStrokeIdentifiers_(v285, v296, (uint64_t)v290, (uint64_t)v295, v297, v298);

        if (CGPathIsEmpty(Mutable))
        {
          CGPathAddPath(Mutable, 0, v299);
          if (!v299) {
            goto LABEL_51;
          }
        }
        else
        {
          CGPoint CurrentPoint = CGPathGetCurrentPoint(Mutable);
          *(void *)std::string buf = 0;
          *(void *)&buf[8] = buf;
          *(void *)&uint8_t buf[16] = 0x4012000000;
          uint64_t v367 = sub_1C4B26404;
          *(void *)&long long v368 = nullsub_37;
          *((void *)&v368 + 1) = &unk_1C4CB5C62;
          long long v369 = *MEMORY[0x1E4F1DAD8];
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = sub_1C4B26414;
          block[3] = &unk_1E64E3DE0;
          void block[4] = buf;
          CGPathApplyWithBlock(v299, block);
          double v301 = *(double *)(*(void *)&buf[8] + 48);
          double v302 = *(double *)(*(void *)&buf[8] + 56);
          if (CurrentPoint.x != v301 || CurrentPoint.y != v302) {
            CGPathAddLineToPoint(Mutable, 0, v301, v302);
          }
          CGPathAddPath(Mutable, 0, v299);
          _Block_object_dispose(buf, 8);
          if (!v299) {
            goto LABEL_51;
          }
        }
        CGPathRelease(v299);
LABEL_51:

        ++v280;
        continue;
      }
      break;
    }
    uint64_t v253 = (const CGPath *)MEMORY[0x1C8785830](Mutable);
    if (Mutable) {
      CGPathRelease(Mutable);
    }
LABEL_37:
    CGPathAddPath(path, 0, v253);
    if (v253) {
      CGPathRelease(v253);
    }
LABEL_39:

    ++v344;
  }
  while (v238);
}

void sub_1C4B25D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  _Unwind_Resume(a1);
}

void sub_1C4B26038(id *a1, void *a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v9 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v4, v5, v6, v7, v8);
  uint64_t v59 = 0;
  uint64_t v60 = &v59;
  uint64_t v61 = 0x2020000000;
  char v62 = 0;
  uint64_t v15 = objc_msgSend_strokeIndexes(v3, v10, v11, v12, v13, v14);
  v56[0] = MEMORY[0x1E4F143A8];
  v56[1] = 3221225472;
  v56[2] = sub_1C4B26330;
  v56[3] = &unk_1E64E1978;
  id v57 = a1[4];
  uint64_t v58 = &v59;
  objc_msgSend_enumerateIndexesUsingBlock_(v15, v16, (uint64_t)v56, v17, v18, v19);

  if (*((unsigned char *)v60 + 24))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v20 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      int v26 = objc_msgSend_intValue(a1[5], v21, v22, v23, v24, v25);
      *(_DWORD *)std::string buf = 67109120;
      int v64 = v26;
      _os_log_impl(&dword_1C492D000, v20, OS_LOG_TYPE_DEFAULT, "CHDataDetectorQuery._dataDetectorResultsForSessionResult: detection results for group %i", buf, 8u);
    }

    uint64_t v32 = objc_msgSend_strokeIndexes(v3, v27, v28, v29, v30, v31);
    uint64_t v50 = MEMORY[0x1E4F143A8];
    uint64_t v51 = 3221225472;
    uint64_t v52 = sub_1C4B26378;
    uint64_t v53 = &unk_1E64E29C8;
    id v33 = v9;
    id v54 = v33;
    id v55 = a1[6];
    objc_msgSend_enumerateIndexesUsingBlock_(v32, v34, (uint64_t)&v50, v35, v36, v37);

    objc_msgSend_addObject_(a1[7], v38, (uint64_t)v3, v39, v40, v41, v50, v51, v52, v53);
    objc_msgSend_addObject_(a1[8], v42, (uint64_t)v33, v43, v44, v45);
    objc_msgSend_addObjectsFromArray_(a1[9], v46, (uint64_t)v33, v47, v48, v49);
  }
  _Block_object_dispose(&v59, 8);
}

void sub_1C4B2629C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B26330(uint64_t a1, const char *a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = objc_msgSend_containsIndex_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    *a3 = 1;
  }
  return result;
}

void sub_1C4B26378(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void **)(a1 + 32);
  objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), a2, (uint64_t)a2, a4, a5, a6);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v7, (uint64_t)v11, v8, v9, v10);
}

void sub_1C4B263D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B263E4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_hasValidPrincipalLines(a2, (const char *)a2, a3, a4, a5, a6) ^ 1;
}

__n128 sub_1C4B26404(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

__n128 sub_1C4B26414(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)a2)
  {
    id v2 = *(__n128 **)(a2 + 8);
    __n128 result = *v2;
    *(__n128 *)(*(void *)(*(void *)(a1 + 32) + 8) + 48) = *v2;
  }
  return result;
}

void sub_1C4B2653C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B2655C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4B2656C(uint64_t a1)
{
}

void sub_1C4B26574(uint64_t a1)
{
}

void sub_1C4B26680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CHDataDetectorQueryItem;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C4B26778(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1C4B267A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B269D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B26AC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B26AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void RectangleRegressor::RectangleRegressor(RectangleRegressor *this, CHDrawing *a2, HTMLog *a3)
{
  uint64_t v4 = a2;
  *(void *)this = &unk_1F2011C70;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  *((_DWORD *)this + 2) = 12;
  operator new[]();
}

void sub_1C4B28458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37)
{
  operator delete(__p);
  operator delete(a20);
  if (a34) {
    operator delete(a34);
  }
  sub_1C496B66C(&a37);
  if (v37) {
    operator delete(v37);
  }
  uint64_t v40 = *(void **)(v38 - 176);
  if (v40)
  {
    *(void *)(v38 - 168) = v40;
    operator delete(v40);
  }

  _Unwind_Resume(a1);
}

void RectangleRegressor::provideAnAnswer(RectangleRegressor *this, CHDrawing *a2)
{
  id v2 = a2;
  unint64_t v3 = 0;
  uint64_t v38 = (float *)&v38;
  uint64_t v39 = (void **)&v38;
  unint64_t v40 = 0;
  uint64_t v35 = (float *)&v35;
  uint64_t v36 = (void **)&v35;
  unint64_t v37 = 0;
  for (unint64_t i = objc_msgSend_strokeCount(v2, v4, v5, v6, v7, v8);
        i > v3;
        unint64_t i = objc_msgSend_strokeCount(v2, v15, v16, v17, v18, v19))
  {
    for (unint64_t j = 0; objc_msgSend_pointCountForStrokeIndex_(v2, v10, v3, v11, v12, v13) > j; ++j)
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(v2, v15, v3, j, v18, v19);
      double v21 = v20;
      double v23 = v22;
      uint64_t v24 = (float *)operator new(0x18uLL);
      float v25 = v21;
      void v24[4] = v25;
      int v26 = v38;
      *(void *)uint64_t v24 = v38;
      *((void *)v24 + 1) = &v38;
      *((void *)v26 + 1) = v24;
      uint64_t v38 = v24;
      ++v40;
      uint64_t v27 = (float *)operator new(0x18uLL);
      float v28 = v23;
      v27[4] = v28;
      uint64_t v29 = v35;
      *(void *)uint64_t v27 = v35;
      *((void *)v27 + 1) = &v35;
      *((void *)v29 + 1) = v27;
      uint64_t v35 = v27;
      ++v37;
    }
    ++v3;
  }
  sub_1C4AAE95C((uint64_t)v39, (uint64_t)&v38, v40, (uint64_t)&v41);
  sub_1C4AAE95C((uint64_t)v36, (uint64_t)&v35, v37, (uint64_t)&v41);
  uint64_t v30 = (uint64_t)v36;
  uint64_t v31 = (uint64_t)v39;
  if (v40 >= 0xA)
  {
    unint64_t v32 = v40 / 0xA;
    id v33 = (void **)&v38;
    uint64_t v34 = (void **)&v35;
    do
    {
      uint64_t v31 = *(void *)(v31 + 8);
      uint64_t v30 = *(void *)(v30 + 8);
      id v33 = (void **)*v33;
      uint64_t v34 = (void **)*v34;
      --v32;
    }
    while (v32);
  }
  operator new();
}

void sub_1C4B2882C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_1C4AAE650((uint64_t *)va);
  sub_1C4AAE650((uint64_t *)va1);

  _Unwind_Resume(a1);
}

void *RectangleRegressor::writeFeatures(const void **this, float **a2)
{
  __n128 result = memcpy(*a2, this[2], 4 * *((int *)this + 2));
  *a2 += *((int *)this + 2);
  return result;
}

void sub_1C4B288B0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "CHRectangle");
}

void sub_1C4B2892C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CHPrefixQueryItem;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C4B28B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B28C68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B28C78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id *sub_1C4B28C88(id *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (a1)
  {
    v23.receiver = a1;
    v23.super_class = (Class)CHPrefixQuery;
    a1 = (id *)objc_msgSendSuper2(&v23, sel_initWithRecognitionSession_, v9);
    if (a1)
    {
      uint64_t v18 = objc_msgSend_copy(v10, v13, v14, v15, v16, v17);
      id v19 = a1[12];
      a1[12] = (id)v18;

      uint64_t v20 = sub_1C4B28F50(a1, v11);
      id v21 = a1[10];
      a1[10] = (id)v20;

      objc_storeStrong(a1 + 11, a5);
    }
  }

  return a1;
}

void sub_1C4B28D94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B28E5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B28E7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B28F24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B28F3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1C4B28F50(id a1, void *a2)
{
  id v3 = a2;
  id v9 = v3;
  if (a1)
  {
    if (objc_msgSend_count(v3, v4, v5, v6, v7, v8))
    {
      uint64_t v15 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v10, v11, v12, v13, v14);
      uint64_t v27 = MEMORY[0x1E4F143A8];
      uint64_t v28 = 3221225472;
      uint64_t v29 = sub_1C4B293D0;
      uint64_t v30 = &unk_1E64E3E30;
      id v16 = v15;
      id v31 = v16;
      id v32 = a1;
      objc_msgSend_enumerateObjectsUsingBlock_(v9, v17, (uint64_t)&v27, v18, v19, v20);
      a1 = (id)objc_msgSend_copy(v16, v21, v22, v23, v24, v25, v27, v28, v29, v30);
    }
    else
    {
      a1 = v9;
    }
  }

  return a1;
}

void sub_1C4B29040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4B29060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B29070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B293A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B293B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B293D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = v3;
  id v14 = v6;
  if (v5)
  {
    uint64_t v5 = objc_msgSend_stringByFoldingWithOptions_locale_(v6, v7, 385, 0, v8, v9);
  }

  objc_msgSend_addObject_(v4, v10, (uint64_t)v5, v11, v12, v13);
}

void sub_1C4B2944C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B29464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B29704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4B2975C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B29774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B29790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B297A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B297BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B297D0(uint64_t a1, void *a2, unsigned char *a3)
{
  id v22 = a2;
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v11 = objc_msgSend_length(*(void **)(a1 + 40), v6, v7, v8, v9, v10);
  id v16 = objc_msgSend_substringFromIndex_(v5, v12, v11, v13, v14, v15);
  int hasPrefix = objc_msgSend_hasPrefix_(v22, v17, (uint64_t)v16, v18, v19, v20);

  if (hasPrefix)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    *a3 = 1;
  }
}

void sub_1C4B29868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B29880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *sub_1C4B29894(void **a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v100 = v8;
  id v101 = a4;
  if (!a1)
  {
    int v64 = 0;
    goto LABEL_22;
  }
  uint64_t v102 = sub_1C4B29DB8((uint64_t)a1, v7);
  uint64_t v110 = 0;
  uint64_t v111 = &v110;
  uint64_t v112 = 0x2020000000;
  char v113 = 1;
  uint64_t v9 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v15 = objc_msgSend_count(v7, v10, v11, v12, v13, v14);
  uint64_t v20 = objc_msgSend_arrayWithCapacity_(v9, v16, v15, v17, v18, v19);
  int v26 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v21, v22, v23, v24, v25);
  v105[0] = MEMORY[0x1E4F143A8];
  v105[1] = 3221225472;
  v105[2] = sub_1C4B29ED4;
  void v105[3] = &unk_1E64E3E80;
  id v106 = v8;
  id v27 = v20;
  id v107 = v27;
  id v28 = v26;
  id v108 = v28;
  uint64_t v109 = &v110;
  objc_msgSend_enumerateObjectsUsingBlock_(v7, v29, (uint64_t)v105, v30, v31, v32);
  uint64_t v38 = objc_msgSend_recognitionSession(a1, v33, v34, v35, v36, v37);
  uint64_t v44 = objc_msgSend_latestStrokeProvider(v38, v39, v40, v41, v42, v43);
  uint64_t v48 = objc_msgSend_strokeIdentifiersForData_withStrokeProvider_(CHStrokeUtilities, v45, (uint64_t)v28, (uint64_t)v44, v46, v47);

  if (v48)
  {
    if (*((unsigned char *)v111 + 24))
    {
      id v54 = objc_msgSend_recognitionSession(a1, v49, v50, v51, v52, v53, v20, v100);
      uint64_t v60 = objc_msgSend_latestStrokeProvider(v54, v55, v56, v57, v58, v59);
      uint64_t v63 = (const CGPath *)objc_msgSend_newBaselinePathForTokens_strokeIdentifiers_strokeProvider_(CHTokenizedTextResult, v61, (uint64_t)v7, (uint64_t)v27, (uint64_t)v60, v62);
    }
    else
    {
      uint64_t v63 = (const CGPath *)objc_msgSend_newEstimatedBaselineForStrokesWithTokens_tokenStrokeIdentifiers_(v101, v49, (uint64_t)v7, (uint64_t)v27, v52, v53, v20, v100);
    }
    CGMutablePathRef Mutable = CGPathCreateMutable();
    CGPathAddPath(Mutable, 0, v63);
    if (v63) {
      CGPathRelease(v63);
    }
    uint64_t v66 = [CHPrefixQueryItem alloc];
    objc_msgSend_setWithArray_(MEMORY[0x1E4F1CAD0], v67, (uint64_t)v48, v68, v69, v70);
    id v71 = (id)objc_claimAutoreleasedReturnValue();
    id v72 = v102;
    uint64_t v73 = v72;
    if (v66)
    {
      v114.receiver = v66;
      v114.super_class = (Class)CHPrefixQueryItem;
      int v64 = objc_msgSendSuper2(&v114, sel_init);
      if (v64)
      {
        uint64_t v79 = objc_msgSend_copy(v71, v74, v75, v76, v77, v78);
        uint64_t v80 = (void *)v64[1];
        v64[1] = v79;

        uint64_t v86 = objc_msgSend_copy(v73, v81, v82, v83, v84, v85);
        uint64_t v87 = (void *)v64[2];
        v64[2] = v86;

        v64[3] = CGPathRetain(Mutable);
      }

      if (*((unsigned char *)v111 + 24))
      {
LABEL_13:
        if (!Mutable) {
          goto LABEL_21;
        }
        goto LABEL_20;
      }
    }
    else
    {
      int v64 = 0;

      if (*((unsigned char *)v111 + 24)) {
        goto LABEL_13;
      }
    }
    uint64_t v88 = a1[9];
    v103[0] = MEMORY[0x1E4F143A8];
    v103[1] = 3221225472;
    v103[2] = sub_1C4B2A128;
    v103[3] = &unk_1E64E3EA8;
    int v64 = v64;
    id v104 = v64;
    uint64_t v94 = objc_msgSend_indexOfObjectPassingTest_(v88, v89, (uint64_t)v103, v90, v91, v92);
    if (v94 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v98 = objc_msgSend_objectAtIndexedSubscript_(a1[9], v93, v94, v95, v96, v97);

      int v64 = (void *)v98;
    }

    if (!Mutable) {
      goto LABEL_21;
    }
LABEL_20:
    CGPathRelease(Mutable);
    goto LABEL_21;
  }
  int v64 = 0;
LABEL_21:

  _Block_object_dispose(&v110, 8);
LABEL_22:

  return v64;
}

void sub_1C4B29CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

id sub_1C4B29DB8(uint64_t a1, void *a2)
{
  id v8 = a2;
  if (a1)
  {
    uint64_t v9 = objc_msgSend_string(MEMORY[0x1E4F28E78], v3, v4, v5, v6, v7);
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = sub_1C4B2A31C;
    v21[3] = &unk_1E64E3280;
    id v10 = v9;
    id v22 = v10;
    objc_msgSend_enumerateObjectsUsingBlock_(v8, v11, (uint64_t)v21, v12, v13, v14);
    uint64_t v19 = objc_msgSend_stringWithString_(NSString, v15, (uint64_t)v10, v16, v17, v18);
  }
  else
  {
    uint64_t v19 = 0;
  }

  return v19;
}

void sub_1C4B29EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4B29EC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B29ED4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)MEMORY[0x1E4F1CA48];
  id v10 = objc_msgSend_strokeIndexes(v3, v5, v6, v7, v8, v9);
  uint64_t v16 = objc_msgSend_count(v10, v11, v12, v13, v14, v15);
  id v21 = objc_msgSend_arrayWithCapacity_(v4, v17, v16, v18, v19, v20);

  id v27 = objc_msgSend_strokeIndexes(v3, v22, v23, v24, v25, v26);
  uint64_t v46 = MEMORY[0x1E4F143A8];
  uint64_t v47 = 3221225472;
  uint64_t v48 = sub_1C4B2A090;
  uint64_t v49 = &unk_1E64E29C8;
  id v28 = v21;
  id v50 = v28;
  id v51 = *(id *)(a1 + 32);
  objc_msgSend_enumerateIndexesUsingBlock_(v27, v29, (uint64_t)&v46, v30, v31, v32);

  objc_msgSend_addObject_(*(void **)(a1 + 40), v33, (uint64_t)v28, v34, v35, v36, v46, v47, v48, v49);
  objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 48), v37, (uint64_t)v28, v38, v39, v40);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) |= objc_msgSend_hasValidPrincipalLines(v3, v41, v42, v43, v44, v45);
}

void sub_1C4B2A00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2A034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2A048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2A058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2A06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2A090(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void **)(a1 + 32);
  objc_msgSend_inputStrokeIdentifiers(*(void **)(a1 + 40), a2, a3, a4, a5, a6);
  id v17 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v12 = objc_msgSend_objectAtIndexedSubscript_(v17, v8, (uint64_t)a2, v9, v10, v11);
  objc_msgSend_addObject_(v7, v13, (uint64_t)v12, v14, v15, v16);
}

void sub_1C4B2A0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2A114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B2A128(uint64_t a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v2 = *(id *)(a1 + 32);
  id v3 = a2;
  uint64_t isEqualToString = 0;
  if (v3 && v2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v10 = (id)qword_1EA3C9F90[0];
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      {
        int v40 = 138412290;
        id v41 = v3;
        _os_log_impl(&dword_1C492D000, v10, OS_LOG_TYPE_FAULT, "item should be of class CHPrefixQueryItem: %@", (uint8_t *)&v40, 0xCu);
      }
    }
    if (v2 == v3)
    {
      uint64_t isEqualToString = 1;
    }
    else
    {
      uint64_t v11 = objc_msgSend_strokeIdentifiers(v3, v5, v6, v7, v8, v9);
      id v17 = objc_msgSend_strokeIdentifiers(v2, v12, v13, v14, v15, v16);
      int isEqual = objc_msgSend_isEqual_(v11, v18, (uint64_t)v17, v19, v20, v21);

      if (isEqual)
      {
        id v28 = objc_msgSend_queryResult(v3, v23, v24, v25, v26, v27);
        uint64_t v34 = objc_msgSend_queryResult(v2, v29, v30, v31, v32, v33);
        uint64_t isEqualToString = objc_msgSend_isEqualToString_(v28, v35, (uint64_t)v34, v36, v37, v38);
      }
      else
      {
        uint64_t isEqualToString = 0;
      }
    }
  }

  return isEqualToString;
}

void sub_1C4B2A2CC(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;

  _Unwind_Resume(a1);
}

void sub_1C4B2A31C(uint64_t a1, void *a2, uint64_t a3)
{
  id v16 = a2;
  if (a3 && (objc_msgSend_properties(v16, v5, v6, v7, v8, v9) & 0x20) != 0) {
    objc_msgSend_appendString_(*(void **)(a1 + 32), v5, @" ", v7, v8, v9);
  }
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = objc_msgSend_string(v16, v5, v6, v7, v8, v9);
  objc_msgSend_appendString_(v10, v12, (uint64_t)v11, v13, v14, v15);
}

void sub_1C4B2A3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2A3C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2A888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2A9D0(uint64_t a1, void *a2)
{
  id v42 = a2;
  objc_msgSend_addObject_(*(void **)(a1 + 32), v3, (uint64_t)v42, v4, v5, v6);
  uint64_t v7 = sub_1C4B29DB8(*(void *)(a1 + 40), *(void **)(a1 + 32));
  char isTokenStringMatchingQuery_allowPartialMatching = objc_msgSend__isTokenStringMatchingQuery_allowPartialMatching_(*(void **)(a1 + 40), v8, (uint64_t)v7, 1, v9, v10);
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24)) {
    char v17 = isTokenStringMatchingQuery_allowPartialMatching;
  }
  else {
    char v17 = 1;
  }
  if (v17)
  {
    if (isTokenStringMatchingQuery_allowPartialMatching)
    {
LABEL_6:
      char v18 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    objc_msgSend_removeLastObject(*(void **)(a1 + 32), v12, v13, v14, v15, v16);
    uint64_t v19 = sub_1C4B29DB8(*(void *)(a1 + 40), *(void **)(a1 + 32));
    if (objc_msgSend__isTokenStringMatchingQuery_allowPartialMatching_(*(void **)(a1 + 40), v20, (uint64_t)v19, 0, v21, v22))
    {
      uint64_t v32 = sub_1C4B29894(*(void ***)(a1 + 40), *(void **)(a1 + 32), *(void **)(a1 + 48), *(void **)(a1 + 56));
      if (v32) {
        objc_msgSend_addObject_(*(void **)(a1 + 64), v28, (uint64_t)v32, v29, v30, v31);
      }
    }
    objc_msgSend_removeAllObjects(*(void **)(a1 + 32), v23, v24, v25, v26, v27);
    objc_msgSend_addObject_(*(void **)(a1 + 32), v33, (uint64_t)v42, v34, v35, v36);
    uint64_t v37 = sub_1C4B29DB8(*(void *)(a1 + 40), *(void **)(a1 + 32));

    char v41 = objc_msgSend__isTokenStringMatchingQuery_allowPartialMatching_(*(void **)(a1 + 40), v38, (uint64_t)v37, 1, v39, v40);
    if (v41) {
      goto LABEL_6;
    }
  }
  objc_msgSend_removeAllObjects(*(void **)(a1 + 32), v12, v13, v14, v15, v16);
  char v18 = 0;
LABEL_13:
  *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v18;
}

void sub_1C4B2AB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2AB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2ABC4(uint64_t a1, void *a2)
{
  v24[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v10 = objc_msgSend_string(v3, v5, v6, v7, v8, v9);
  LODWORD(v4) = objc_msgSend__isTokenStringMatchingQuery_allowPartialMatching_(v4, v11, (uint64_t)v10, 0, v12, v13);

  if (v4)
  {
    char v17 = *(void ***)(a1 + 32);
    v24[0] = v3;
    char v18 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v14, (uint64_t)v24, 1, v15, v16);
    uint64_t v19 = sub_1C4B29894(v17, v18, *(void **)(a1 + 40), *(void **)(a1 + 48));

    if (v19) {
      objc_msgSend_addObject_(*(void **)(a1 + 56), v20, (uint64_t)v19, v21, v22, v23);
    }
  }
}

void sub_1C4B2ACAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2ADF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B2AE10(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4B2AE20(uint64_t a1)
{
}

void sub_1C4B2AE28(uint64_t a1)
{
}

void sub_1C4B2AF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2AF68(uint64_t a1)
{
}

void sub_1C4B2B038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2B048(uint64_t a1)
{
  sub_1C4B28F50(*(id *)(a1 + 32), *(void **)(a1 + 40));
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  id v3 = (id *)(*(void *)(a1 + 32) + 80);
  obunint64_t j = v2;
  if (*v3 != v2)
  {
    objc_storeStrong(v3, v2);
    objc_msgSend_q_setNeedsQueryResultUpdating(*(void **)(a1 + 32), v4, v5, v6, v7, v8);
  }
}

void sub_1C4B2B0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2B168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2B178()
{
  id v678 = objc_alloc_init(MEMORY[0x1E4F28E58]);
  objc_msgSend_addCharactersInRange_(v678, v0, 173, 1, v1, v2);
  objc_msgSend_addCharactersInRange_(v678, v3, 1541, 1, v4, v5);
  objc_msgSend_addCharactersInRange_(v678, v6, 1757, 1, v7, v8);
  objc_msgSend_addCharactersInRange_(v678, v9, 2274, 1, v10, v11);
  objc_msgSend_addCharactersInRange_(v678, v12, 8203, 1, v13, v14);
  objc_msgSend_addCharactersInRange_(v678, v15, 8206, 2, v16, v17);
  objc_msgSend_addCharactersInRange_(v678, v18, 8234, 5, v19, v20);
  objc_msgSend_addCharactersInRange_(v678, v21, 8288, 5, v22, v23);
  objc_msgSend_addCharactersInRange_(v678, v24, 8294, 10, v25, v26);
  objc_msgSend_addCharactersInRange_(v678, v27, 65279, 1, v28, v29);
  objc_msgSend_addCharactersInRange_(v678, v30, 65529, 3, v31, v32);
  objc_msgSend_addCharactersInRange_(v678, v33, 113824, 4, v34, v35);
  objc_msgSend_addCharactersInRange_(v678, v36, 119155, 8, v37, v38);
  objc_msgSend_addCharactersInRange_(v678, v39, 917505, 1, v40, v41);
  objc_msgSend_addCharactersInRange_(v678, v42, 917536, 96, v43, v44);
  objc_msgSend_addCharactersInRange_(v678, v45, 1536, 5, v46, v47);
  objc_msgSend_addCharactersInRange_(v678, v48, 1564, 1, v49, v50);
  objc_msgSend_addCharactersInRange_(v678, v51, 1807, 1, v52, v53);
  objc_msgSend_addCharactersInRange_(v678, v54, 6158, 1, v55, v56);
  objc_msgSend_addCharactersInRange_(v678, v57, 8204, 2, v58, v59);
  objc_msgSend_addCharactersInRange_(v678, v60, 78896, 9, v61, v62);
  objc_msgSend_addCharactersInRange_(v678, v63, 69821, 1, v64, v65);
  objc_msgSend_addCharactersInRange_(v678, v66, 69837, 1, v67, v68);
  uint64_t v74 = objc_msgSend_alphanumericCharacterSet(MEMORY[0x1E4F28B88], v69, v70, v71, v72, v73);
  objc_msgSend_formUnionWithCharacterSet_(v678, v75, (uint64_t)v74, v76, v77, v78);

  objc_msgSend_addCharactersInRange_(v678, v79, 95, 1, v80, v81);
  objc_msgSend_addCharactersInRange_(v678, v82, 8255, 2, v83, v84);
  objc_msgSend_addCharactersInRange_(v678, v85, 8276, 1, v86, v87);
  objc_msgSend_addCharactersInRange_(v678, v88, 65075, 2, v89, v90);
  objc_msgSend_addCharactersInRange_(v678, v91, 65101, 3, v92, v93);
  objc_msgSend_addCharactersInRange_(v678, v94, 65343, 1, v95, v96);
  objc_msgSend_addCharactersInRange_(v678, v97, 45, 1, v98, v99);
  objc_msgSend_addCharactersInRange_(v678, v100, 8208, 6, v101, v102);
  objc_msgSend_addCharactersInRange_(v678, v103, 11799, 1, v104, v105);
  objc_msgSend_addCharactersInRange_(v678, v106, 11802, 1, v107, v108);
  objc_msgSend_addCharactersInRange_(v678, v109, 11834, 2, v110, v111);
  objc_msgSend_addCharactersInRange_(v678, v112, 11840, 1, v113, v114);
  objc_msgSend_addCharactersInRange_(v678, v115, 12316, 1, v116, v117);
  objc_msgSend_addCharactersInRange_(v678, v118, 12336, 1, v119, v120);
  objc_msgSend_addCharactersInRange_(v678, v121, 12448, 1, v122, v123);
  objc_msgSend_addCharactersInRange_(v678, v124, 65073, 2, v125, v126);
  objc_msgSend_addCharactersInRange_(v678, v127, 65112, 1, v128, v129);
  objc_msgSend_addCharactersInRange_(v678, v130, 65123, 1, v131, v132);
  objc_msgSend_addCharactersInRange_(v678, v133, 65293, 1, v134, v135);
  objc_msgSend_addCharactersInRange_(v678, v136, 1418, 1, v137, v138);
  objc_msgSend_addCharactersInRange_(v678, v139, 1470, 1, v140, v141);
  objc_msgSend_addCharactersInRange_(v678, v142, 5120, 1, v143, v144);
  objc_msgSend_addCharactersInRange_(v678, v145, 6150, 1, v146, v147);
  objc_msgSend_addCharactersInRange_(v678, v148, 69293, 1, v149, v150);
  objc_msgSend_addCharactersInRange_(v678, v151, 41, 1, v152, v153);
  objc_msgSend_addCharactersInRange_(v678, v154, 93, 1, v155, v156);
  objc_msgSend_addCharactersInRange_(v678, v157, 125, 1, v158, v159);
  objc_msgSend_addCharactersInRange_(v678, v160, 8262, 1, v161, v162);
  objc_msgSend_addCharactersInRange_(v678, v163, 8318, 1, v164, v165);
  objc_msgSend_addCharactersInRange_(v678, v166, 8334, 1, v167, v168);
  objc_msgSend_addCharactersInRange_(v678, v169, 8969, 1, v170, v171);
  objc_msgSend_addCharactersInRange_(v678, v172, 8971, 1, v173, v174);
  objc_msgSend_addCharactersInRange_(v678, v175, 9002, 1, v176, v177);
  objc_msgSend_addCharactersInRange_(v678, v178, 10089, 1, v179, v180);
  objc_msgSend_addCharactersInRange_(v678, v181, 10091, 1, v182, v183);
  objc_msgSend_addCharactersInRange_(v678, v184, 10093, 1, v185, v186);
  objc_msgSend_addCharactersInRange_(v678, v187, 10095, 1, v188, v189);
  objc_msgSend_addCharactersInRange_(v678, v190, 10097, 1, v191, v192);
  objc_msgSend_addCharactersInRange_(v678, v193, 10099, 1, v194, v195);
  objc_msgSend_addCharactersInRange_(v678, v196, 10101, 1, v197, v198);
  objc_msgSend_addCharactersInRange_(v678, v199, 10182, 1, v200, v201);
  objc_msgSend_addCharactersInRange_(v678, v202, 10215, 1, v203, v204);
  objc_msgSend_addCharactersInRange_(v678, v205, 10217, 1, v206, v207);
  objc_msgSend_addCharactersInRange_(v678, v208, 10219, 1, v209, v210);
  objc_msgSend_addCharactersInRange_(v678, v211, 10221, 1, v212, v213);
  objc_msgSend_addCharactersInRange_(v678, v214, 10223, 1, v215, v216);
  objc_msgSend_addCharactersInRange_(v678, v217, 10628, 1, v218, v219);
  objc_msgSend_addCharactersInRange_(v678, v220, 10630, 1, v221, v222);
  objc_msgSend_addCharactersInRange_(v678, v223, 10632, 1, v224, v225);
  objc_msgSend_addCharactersInRange_(v678, v226, 10634, 1, v227, v228);
  objc_msgSend_addCharactersInRange_(v678, v229, 10636, 1, v230, v231);
  objc_msgSend_addCharactersInRange_(v678, v232, 10638, 1, v233, v234);
  objc_msgSend_addCharactersInRange_(v678, v235, 10640, 1, v236, v237);
  objc_msgSend_addCharactersInRange_(v678, v238, 10642, 1, v239, v240);
  objc_msgSend_addCharactersInRange_(v678, v241, 10644, 1, v242, v243);
  objc_msgSend_addCharactersInRange_(v678, v244, 10646, 1, v245, v246);
  objc_msgSend_addCharactersInRange_(v678, v247, 10648, 1, v248, v249);
  objc_msgSend_addCharactersInRange_(v678, v250, 10713, 1, v251, v252);
  objc_msgSend_addCharactersInRange_(v678, v253, 10715, 1, v254, v255);
  objc_msgSend_addCharactersInRange_(v678, v256, 10749, 1, v257, v258);
  objc_msgSend_addCharactersInRange_(v678, v259, 11811, 1, v260, v261);
  objc_msgSend_addCharactersInRange_(v678, v262, 11813, 1, v263, v264);
  objc_msgSend_addCharactersInRange_(v678, v265, 11815, 1, v266, v267);
  objc_msgSend_addCharactersInRange_(v678, v268, 11817, 1, v269, v270);
  objc_msgSend_addCharactersInRange_(v678, v271, 12297, 1, v272, v273);
  objc_msgSend_addCharactersInRange_(v678, v274, 12299, 1, v275, v276);
  objc_msgSend_addCharactersInRange_(v678, v277, 12301, 1, v278, v279);
  objc_msgSend_addCharactersInRange_(v678, v280, 12303, 1, v281, v282);
  objc_msgSend_addCharactersInRange_(v678, v283, 12305, 1, v284, v285);
  objc_msgSend_addCharactersInRange_(v678, v286, 12309, 1, v287, v288);
  objc_msgSend_addCharactersInRange_(v678, v289, 12311, 1, v290, v291);
  objc_msgSend_addCharactersInRange_(v678, v292, 12313, 1, v293, v294);
  objc_msgSend_addCharactersInRange_(v678, v295, 12315, 1, v296, v297);
  objc_msgSend_addCharactersInRange_(v678, v298, 12318, 2, v299, v300);
  objc_msgSend_addCharactersInRange_(v678, v301, 64830, 1, v302, v303);
  objc_msgSend_addCharactersInRange_(v678, v304, 65048, 1, v305, v306);
  objc_msgSend_addCharactersInRange_(v678, v307, 65078, 1, v308, v309);
  objc_msgSend_addCharactersInRange_(v678, v310, 65080, 1, v311, v312);
  objc_msgSend_addCharactersInRange_(v678, v313, 65082, 1, v314, v315);
  objc_msgSend_addCharactersInRange_(v678, v316, 65084, 1, v317, v318);
  objc_msgSend_addCharactersInRange_(v678, v319, 65086, 1, v320, v321);
  objc_msgSend_addCharactersInRange_(v678, v322, 65088, 1, v323, v324);
  objc_msgSend_addCharactersInRange_(v678, v325, 65090, 1, v326, v327);
  objc_msgSend_addCharactersInRange_(v678, v328, 65092, 1, v329, v330);
  objc_msgSend_addCharactersInRange_(v678, v331, 65096, 1, v332, v333);
  objc_msgSend_addCharactersInRange_(v678, v334, 65114, 1, v335, v336);
  objc_msgSend_addCharactersInRange_(v678, v337, 65116, 1, v338, v339);
  objc_msgSend_addCharactersInRange_(v678, v340, 65118, 1, v341, v342);
  objc_msgSend_addCharactersInRange_(v678, v343, 65289, 1, v344, v345);
  objc_msgSend_addCharactersInRange_(v678, v346, 65341, 1, v347, v348);
  objc_msgSend_addCharactersInRange_(v678, v349, 65373, 1, v350, v351);
  objc_msgSend_addCharactersInRange_(v678, v352, 65376, 1, v353, v354);
  objc_msgSend_addCharactersInRange_(v678, v355, 65379, 1, v356, v357);
  objc_msgSend_addCharactersInRange_(v678, v358, 3899, 1, v359, v360);
  objc_msgSend_addCharactersInRange_(v678, v361, 3901, 1, v362, v363);
  objc_msgSend_addCharactersInRange_(v678, v364, 5788, 1, v365, v366);
  objc_msgSend_addCharactersInRange_(v678, v367, 187, 1, v368, v369);
  objc_msgSend_addCharactersInRange_(v678, v370, 8217, 1, v371, v372);
  objc_msgSend_addCharactersInRange_(v678, v373, 8221, 1, v374, v375);
  objc_msgSend_addCharactersInRange_(v678, v376, 8250, 1, v377, v378);
  objc_msgSend_addCharactersInRange_(v678, v379, 11779, 1, v380, v381);
  objc_msgSend_addCharactersInRange_(v678, v382, 11781, 1, v383, v384);
  objc_msgSend_addCharactersInRange_(v678, v385, 11786, 1, v386, v387);
  objc_msgSend_addCharactersInRange_(v678, v388, 11789, 1, v389, v390);
  objc_msgSend_addCharactersInRange_(v678, v391, 11805, 1, v392, v393);
  objc_msgSend_addCharactersInRange_(v678, v394, 11809, 1, v395, v396);
  objc_msgSend_addCharactersInRange_(v678, v397, 171, 1, v398, v399);
  objc_msgSend_addCharactersInRange_(v678, v400, 8216, 1, v401, v402);
  objc_msgSend_addCharactersInRange_(v678, v403, 8219, 2, v404, v405);
  objc_msgSend_addCharactersInRange_(v678, v406, 8223, 1, v407, v408);
  objc_msgSend_addCharactersInRange_(v678, v409, 8249, 1, v410, v411);
  objc_msgSend_addCharactersInRange_(v678, v412, 11778, 1, v413, v414);
  objc_msgSend_addCharactersInRange_(v678, v415, 11780, 1, v416, v417);
  objc_msgSend_addCharactersInRange_(v678, v418, 11785, 1, v419, v420);
  objc_msgSend_addCharactersInRange_(v678, v421, 11788, 1, v422, v423);
  objc_msgSend_addCharactersInRange_(v678, v424, 11804, 1, v425, v426);
  objc_msgSend_addCharactersInRange_(v678, v427, 11808, 1, v428, v429);
  objc_msgSend_addCharactersInRange_(v678, v430, 40, 1, v431, v432);
  objc_msgSend_addCharactersInRange_(v678, v433, 91, 1, v434, v435);
  objc_msgSend_addCharactersInRange_(v678, v436, 123, 1, v437, v438);
  objc_msgSend_addCharactersInRange_(v678, v439, 8218, 1, v440, v441);
  objc_msgSend_addCharactersInRange_(v678, v442, 8222, 1, v443, v444);
  objc_msgSend_addCharactersInRange_(v678, v445, 8261, 1, v446, v447);
  objc_msgSend_addCharactersInRange_(v678, v448, 8317, 1, v449, v450);
  objc_msgSend_addCharactersInRange_(v678, v451, 8333, 1, v452, v453);
  objc_msgSend_addCharactersInRange_(v678, v454, 8968, 1, v455, v456);
  objc_msgSend_addCharactersInRange_(v678, v457, 8970, 1, v458, v459);
  objc_msgSend_addCharactersInRange_(v678, v460, 9001, 1, v461, v462);
  objc_msgSend_addCharactersInRange_(v678, v463, 10088, 1, v464, v465);
  objc_msgSend_addCharactersInRange_(v678, v466, 10090, 1, v467, v468);
  objc_msgSend_addCharactersInRange_(v678, v469, 10092, 1, v470, v471);
  objc_msgSend_addCharactersInRange_(v678, v472, 10094, 1, v473, v474);
  objc_msgSend_addCharactersInRange_(v678, v475, 10096, 1, v476, v477);
  objc_msgSend_addCharactersInRange_(v678, v478, 10098, 1, v479, v480);
  objc_msgSend_addCharactersInRange_(v678, v481, 10100, 1, v482, v483);
  objc_msgSend_addCharactersInRange_(v678, v484, 10181, 1, v485, v486);
  objc_msgSend_addCharactersInRange_(v678, v487, 10214, 1, v488, v489);
  objc_msgSend_addCharactersInRange_(v678, v490, 10216, 1, v491, v492);
  objc_msgSend_addCharactersInRange_(v678, v493, 10218, 1, v494, v495);
  objc_msgSend_addCharactersInRange_(v678, v496, 10220, 1, v497, v498);
  objc_msgSend_addCharactersInRange_(v678, v499, 10222, 1, v500, v501);
  objc_msgSend_addCharactersInRange_(v678, v502, 10627, 1, v503, v504);
  objc_msgSend_addCharactersInRange_(v678, v505, 10629, 1, v506, v507);
  objc_msgSend_addCharactersInRange_(v678, v508, 10631, 1, v509, v510);
  objc_msgSend_addCharactersInRange_(v678, v511, 10633, 1, v512, v513);
  objc_msgSend_addCharactersInRange_(v678, v514, 10635, 1, v515, v516);
  objc_msgSend_addCharactersInRange_(v678, v517, 10637, 1, v518, v519);
  objc_msgSend_addCharactersInRange_(v678, v520, 10639, 1, v521, v522);
  objc_msgSend_addCharactersInRange_(v678, v523, 10641, 1, v524, v525);
  objc_msgSend_addCharactersInRange_(v678, v526, 10643, 1, v527, v528);
  objc_msgSend_addCharactersInRange_(v678, v529, 10645, 1, v530, v531);
  objc_msgSend_addCharactersInRange_(v678, v532, 10647, 1, v533, v534);
  objc_msgSend_addCharactersInRange_(v678, v535, 10712, 1, v536, v537);
  objc_msgSend_addCharactersInRange_(v678, v538, 10714, 1, v539, v540);
  objc_msgSend_addCharactersInRange_(v678, v541, 10748, 1, v542, v543);
  objc_msgSend_addCharactersInRange_(v678, v544, 11810, 1, v545, v546);
  objc_msgSend_addCharactersInRange_(v678, v547, 11812, 1, v548, v549);
  objc_msgSend_addCharactersInRange_(v678, v550, 11814, 1, v551, v552);
  objc_msgSend_addCharactersInRange_(v678, v553, 11816, 1, v554, v555);
  objc_msgSend_addCharactersInRange_(v678, v556, 11842, 1, v557, v558);
  objc_msgSend_addCharactersInRange_(v678, v559, 12296, 1, v560, v561);
  objc_msgSend_addCharactersInRange_(v678, v562, 12298, 1, v563, v564);
  objc_msgSend_addCharactersInRange_(v678, v565, 12300, 1, v566, v567);
  objc_msgSend_addCharactersInRange_(v678, v568, 12302, 1, v569, v570);
  objc_msgSend_addCharactersInRange_(v678, v571, 12304, 1, v572, v573);
  objc_msgSend_addCharactersInRange_(v678, v574, 12308, 1, v575, v576);
  objc_msgSend_addCharactersInRange_(v678, v577, 12310, 1, v578, v579);
  objc_msgSend_addCharactersInRange_(v678, v580, 12312, 1, v581, v582);
  objc_msgSend_addCharactersInRange_(v678, v583, 12314, 1, v584, v585);
  objc_msgSend_addCharactersInRange_(v678, v586, 12317, 1, v587, v588);
  objc_msgSend_addCharactersInRange_(v678, v589, 64831, 1, v590, v591);
  objc_msgSend_addCharactersInRange_(v678, v592, 65047, 1, v593, v594);
  objc_msgSend_addCharactersInRange_(v678, v595, 65077, 1, v596, v597);
  objc_msgSend_addCharactersInRange_(v678, v598, 65079, 1, v599, v600);
  objc_msgSend_addCharactersInRange_(v678, v601, 65081, 1, v602, v603);
  objc_msgSend_addCharactersInRange_(v678, v604, 65083, 1, v605, v606);
  objc_msgSend_addCharactersInRange_(v678, v607, 65085, 1, v608, v609);
  objc_msgSend_addCharactersInRange_(v678, v610, 65087, 1, v611, v612);
  objc_msgSend_addCharactersInRange_(v678, v613, 65089, 1, v614, v615);
  objc_msgSend_addCharactersInRange_(v678, v616, 65091, 1, v617, v618);
  objc_msgSend_addCharactersInRange_(v678, v619, 65095, 1, v620, v621);
  objc_msgSend_addCharactersInRange_(v678, v622, 65113, 1, v623, v624);
  objc_msgSend_addCharactersInRange_(v678, v625, 65115, 1, v626, v627);
  objc_msgSend_addCharactersInRange_(v678, v628, 65117, 1, v629, v630);
  objc_msgSend_addCharactersInRange_(v678, v631, 65288, 1, v632, v633);
  objc_msgSend_addCharactersInRange_(v678, v634, 65339, 1, v635, v636);
  objc_msgSend_addCharactersInRange_(v678, v637, 65371, 1, v638, v639);
  objc_msgSend_addCharactersInRange_(v678, v640, 65375, 1, v641, v642);
  objc_msgSend_addCharactersInRange_(v678, v643, 65378, 1, v644, v645);
  objc_msgSend_addCharactersInRange_(v678, v646, 3898, 1, v647, v648);
  objc_msgSend_addCharactersInRange_(v678, v649, 3900, 1, v650, v651);
  objc_msgSend_addCharactersInRange_(v678, v652, 5787, 1, v653, v654);
  uint64_t v660 = objc_msgSend_symbolCharacterSet(MEMORY[0x1E4F28B88], v655, v656, v657, v658, v659);
  objc_msgSend_formUnionWithCharacterSet_(v678, v661, (uint64_t)v660, v662, v663, v664);

  uint64_t v670 = objc_msgSend_copy(v678, v665, v666, v667, v668, v669);
  uint64_t v676 = objc_msgSend_invertedSet(v670, v671, v672, v673, v674, v675);
  uint64_t v677 = (void *)qword_1EA3C8F28;
  qword_1EA3C8F28 = v676;
}

void sub_1C4B2BFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1C4B2BFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2C178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2C8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  if (__p) {
    operator delete(__p);
  }

  _Block_object_dispose(&a30, 8);
  if (a36)
  {
    a37 = (uint64_t)a36;
    operator delete(a36);
  }
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  sub_1C4AAE650(v61);
  _Block_object_dispose(&a60, 8);
  _Block_object_dispose((const void *)(v63 - 216), 8);

  _Unwind_Resume(a1);
}

__n128 sub_1C4B2CA34(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

__n128 sub_1C4B2CA44(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void *sub_1C4B2CA54(void *result, void *a2)
{
  result[6] = result + 6;
  result[7] = result + 6;
  result[8] = 0;
  uint64_t v2 = a2[8];
  if (v2)
  {
    uint64_t v4 = a2[6];
    long long v3 = (uint64_t *)a2[7];
    uint64_t v5 = *v3;
    *(void *)(v5 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v5;
    uint64_t v6 = result[6];
    *(void *)(v6 + 8) = v3;
    uint64_t *v3 = v6;
    result[6] = v4;
    *(void *)(v4 + 8) = result + 6;
    result[8] = v2;
    a2[8] = 0;
  }
  return result;
}

void *sub_1C4B2CAA0(void *result)
{
  if (result[8])
  {
    uint64_t v1 = result;
    uint64_t v2 = result + 6;
    __n128 result = (void *)result[7];
    uint64_t v3 = v1[6];
    uint64_t v4 = *result;
    *(void *)(v4 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v4;
    v1[8] = 0;
    if (result != v2)
    {
      do
      {
        uint64_t v5 = (void *)result[1];
        operator delete(result);
        __n128 result = v5;
      }
      while (v5 != v2);
    }
  }
  return result;
}

__n128 sub_1C4B2CB08(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1C4B2CB2C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1C4B2CB44(uint64_t a1, CGFloat a2, CGFloat a3, double a4)
{
  uint64_t v8 = *(void **)(*(void *)(a1 + 48) + 8);
  uint64_t v10 = (double *)v8[7];
  unint64_t v9 = v8[8];
  if ((unint64_t)v10 < v9)
  {
    *uint64_t v10 = a2;
    v10[1] = a3;
    uint64_t v11 = (uint64_t)(v10 + 2);
    goto LABEL_18;
  }
  uint64_t v12 = (double *)v8[6];
  uint64_t v13 = ((char *)v10 - (char *)v12) >> 4;
  unint64_t v14 = v13 + 1;
  if ((unint64_t)(v13 + 1) >> 60) {
    sub_1C494A220();
  }
  uint64_t v15 = v9 - (void)v12;
  if (v15 >> 3 > v14) {
    unint64_t v14 = v15 >> 3;
  }
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v14;
  }
  if (v16)
  {
    if (v16 >> 60) {
      sub_1C4949AA8();
    }
    uint64_t v17 = (char *)operator new(16 * v16);
    char v18 = (double *)&v17[16 * v13];
    uint64_t v19 = &v17[16 * v16];
    double *v18 = a2;
    v18[1] = a3;
    uint64_t v11 = (uint64_t)(v18 + 2);
    if (v10 == v12) {
      goto LABEL_16;
    }
  }
  else
  {
    char v18 = (double *)(16 * v13);
    uint64_t v19 = 0;
    double *v18 = a2;
    v18[1] = a3;
    uint64_t v11 = 16 * v13 + 16;
    if (v10 == v12) {
      goto LABEL_16;
    }
  }
  do
  {
    *((_OWORD *)v18 - 1) = *((_OWORD *)v10 - 1);
    v18 -= 2;
    v10 -= 2;
  }
  while (v10 != v12);
  uint64_t v10 = (double *)v8[6];
LABEL_16:
  v8[6] = v18;
  v8[7] = v11;
  v8[8] = v19;
  if (v10) {
    operator delete(v10);
  }
LABEL_18:
  v8[7] = v11;
  BOOL IsNull = CGRectIsNull(*(CGRect *)(*(void *)(*(void *)(a1 + 56) + 8) + 48));
  uint64_t v21 = *(void *)(*(void *)(a1 + 56) + 8);
  if (IsNull)
  {
    *(CGFloat *)(v21 + 48) = a2;
    *(CGFloat *)(v21 + 56) = a3;
    *(void *)(v21 + 64) = 0;
    *(void *)(v21 + 72) = 0;
    uint64_t v22 = *(void *)(*(void *)(a1 + 64) + 8);
    double v24 = *(double *)(v22 + 24);
    uint64_t v23 = (double *)(v22 + 24);
    if (v24 != 0.0) {
      goto LABEL_23;
    }
  }
  else
  {
    v83.size.CGFloat width = 0.0;
    v83.size.CGFloat height = 0.0;
    v83.origin.CGFloat x = a2;
    v83.origin.CGFloat y = a3;
    *(CGRect *)(*(void *)(*(void *)(a1 + 56) + 8) + 48) = CGRectUnion(*(CGRect *)(v21 + 48), v83);
    uint64_t v23 = (double *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
  }
  *uint64_t v23 = a4;
LABEL_23:
  uint64_t v25 = *(void *)(*(void *)(a1 + 80) + 8);
  if (vabdd_f64(a2, *(double *)(v25 + 48)) + vabdd_f64(a3, *(double *)(v25 + 56)) > 3.0)
  {
    *(CGFloat *)(v25 + 48) = a2;
    *(CGFloat *)(v25 + 56) = a3;
    uint64_t v26 = *(CGFloat ***)(*(void *)(a1 + 88) + 8);
    uint64_t v27 = (CGFloat *)operator new(0x20uLL);
    v27[2] = a2;
    v27[3] = a3;
    uint64_t v28 = v26[6];
    v26 += 6;
    *(void *)uint64_t v27 = v28;
    *((void *)v27 + 1) = v26;
    *((void *)v28 + 1) = v27;
    void *v26 = v27;
    v26[2] = (CGFloat *)((char *)v26[2] + 1);
    if (*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 64) == 3)
    {
      uint64_t v29 = objc_opt_class();
      objc_msgSend_circumferenceRatioOfCircleFittedToPoints_circleCenter_circleRadius_(v29, v30, *(void *)(*(void *)(a1 + 88) + 8) + 48, 0, 0, v31);
      *(double *)(*(void *)(*(void *)(a1 + 96) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v32
                                                                  + *(double *)(*(void *)(*(void *)(a1 + 96) + 8)
                                                                              + 24);
      uint64_t v33 = *(void *)(*(void *)(a1 + 88) + 8);
      uint64_t v34 = *(uint64_t **)(v33 + 56);
      uint64_t v35 = *v34;
      *(void *)(v35 + 8) = v34[1];
      *(void *)v34[1] = v35;
      --*(void *)(v33 + 64);
      operator delete(v34);
    }
    if (*(double *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) > 18.8495559)
    {
      uint64_t v36 = objc_opt_class();
      if (v36)
      {
        objc_msgSend_convexHullForPoints_(v36, v37, *(void *)(*(void *)(a1 + 48) + 8) + 48, v38, v39, v40);
      }
      else
      {
        std::string __p = 0;
        uint64_t v81 = 0;
        uint64_t v82 = 0;
      }
      uint64_t v41 = [CHSubstroke alloc];
      uint64_t v47 = objc_msgSend_encodedStrokeIdentifier(*(void **)(a1 + 32), v42, v43, v44, v45, v46);
      uint64_t v48 = *(double **)(*(void *)(a1 + 56) + 8);
      started = objc_msgSend_initWithStrokeIdentifier_bounds_startTimestamp_endTimestamp_convexHull_curvature_(v41, v49, (uint64_t)v47, (uint64_t)&__p, v50, v51, v48[6], v48[7], v48[8], v48[9], *(double *)(*(void *)(*(void *)(a1 + 64) + 8) + 24), *(double *)(*(void *)(*(void *)(a1 + 72) + 8) + 24), *(double *)(*(void *)(*(void *)(a1 + 96) + 8) + 24));

      objc_msgSend_addObject_(*(void **)(a1 + 40), v53, (uint64_t)started, v54, v55, v56);
      *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      uint64_t v57 = *(void *)(*(void *)(a1 + 56) + 8);
      long long v58 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
      *(_OWORD *)(v57 + 48) = *MEMORY[0x1E4F1DB20];
      *(_OWORD *)(v57 + 64) = v58;
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 56) = *(void *)(*(void *)(*(void *)(a1 + 48) + 8)
                                                                              + 48);
      uint64_t v59 = *(void **)(*(void *)(a1 + 48) + 8);
      uint64_t v61 = (double *)v59[7];
      unint64_t v60 = v59[8];
      if ((unint64_t)v61 < v60)
      {
        double *v61 = a2;
        v61[1] = a3;
        uint64_t v62 = (uint64_t)(v61 + 2);
LABEL_47:
        v59[7] = v62;
        *(double *)(*(void *)(*(void *)(a1 + 64) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a4;
        *(double *)(*(void *)(*(void *)(a1 + 72) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a4;
        uint64_t v71 = *(void **)(*(void *)(a1 + 88) + 8);
        if (v71[8])
        {
          uint64_t v72 = v71 + 6;
          uint64_t v74 = v71[6];
          uint64_t v73 = (uint64_t *)v71[7];
          uint64_t v75 = *v73;
          *(void *)(v75 + 8) = *(void *)(v74 + 8);
          **(void **)(v74 + 8) = v75;
          v71[8] = 0;
          if (v73 != v71 + 6)
          {
            do
            {
              uint64_t v76 = (uint64_t *)v73[1];
              operator delete(v73);
              uint64_t v73 = v76;
            }
            while (v76 != v72);
          }
        }
        uint64_t v77 = *(CGFloat ***)(*(void *)(a1 + 88) + 8);
        uint64_t v78 = (CGFloat *)operator new(0x20uLL);
        v78[2] = a2;
        v78[3] = a3;
        uint64_t v79 = v77[6];
        v77 += 6;
        *(void *)uint64_t v78 = v79;
        *((void *)v78 + 1) = v77;
        *((void *)v79 + 1) = v78;
        const char *v77 = v78;
        v77[2] = (CGFloat *)((char *)v77[2] + 1);

        if (__p)
        {
          uint64_t v81 = __p;
          operator delete(__p);
        }
        return;
      }
      uint64_t v63 = (double *)v59[6];
      uint64_t v64 = ((char *)v61 - (char *)v63) >> 4;
      unint64_t v65 = v64 + 1;
      if ((unint64_t)(v64 + 1) >> 60) {
        sub_1C494A220();
      }
      uint64_t v66 = v60 - (void)v63;
      if (v66 >> 3 > v65) {
        unint64_t v65 = v66 >> 3;
      }
      if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v67 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v67 = v65;
      }
      if (v67)
      {
        if (v67 >> 60) {
          sub_1C4949AA8();
        }
        uint64_t v68 = (char *)operator new(16 * v67);
        uint64_t v69 = (double *)&v68[16 * v64];
        uint64_t v70 = &v68[16 * v67];
        *uint64_t v69 = a2;
        v69[1] = a3;
        uint64_t v62 = (uint64_t)(v69 + 2);
        if (v61 == v63) {
          goto LABEL_45;
        }
      }
      else
      {
        uint64_t v69 = (double *)(16 * v64);
        uint64_t v70 = 0;
        *uint64_t v69 = a2;
        v69[1] = a3;
        uint64_t v62 = 16 * v64 + 16;
        if (v61 == v63) {
          goto LABEL_45;
        }
      }
      do
      {
        *((_OWORD *)v69 - 1) = *((_OWORD *)v61 - 1);
        v69 -= 2;
        v61 -= 2;
      }
      while (v61 != v63);
      uint64_t v61 = (double *)v59[6];
LABEL_45:
      v59[6] = v69;
      v59[7] = v62;
      v59[8] = v70;
      if (v61) {
        operator delete(v61);
      }
      goto LABEL_47;
    }
  }
}

void sub_1C4B2D068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1C4B2D1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2D1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2D214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2D228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2D244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2D25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2D418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C4B2D484(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2D49C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2D6B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2D6C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2D6D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2D6E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2D6FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2D77C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2D88C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2D940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2D954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2DAF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2DB08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2DB18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2DB28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2E194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C4B2E2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1C4B2E310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B2E508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t p2s@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = MEMORY[0x1E4FBA488] + 104;
  v19[0] = MEMORY[0x1E4FBA488] + 104;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v14 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v5 = (uint64_t *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  v13[0] = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(uint64_t *)((char *)v13 + *(void *)(v13[0] - 24)) = v6;
  v13[1] = 0;
  uint64_t v7 = (std::ios_base *)((char *)v13 + *(void *)(v13[0] - 24));
  std::ios_base::init(v7, v15);
  uint64_t v8 = MEMORY[0x1E4FBA488] + 24;
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  uint64_t v9 = v5[5];
  uint64_t v14 = v5[4];
  *(uint64_t *)((char *)&v15[-1] + *(void *)(v14 - 24)) = v9;
  v13[0] = v5[1];
  *(uint64_t *)((char *)v13 + *(void *)(v13[0] - 24)) = v5[6];
  v19[0] = v3;
  v13[0] = v8;
  uint64_t v14 = v4;
  std::streambuf::basic_streambuf();
  uint64_t v10 = MEMORY[0x1E4FBA470] + 16;
  v15[0] = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)std::string __p = 0u;
  long long v17 = 0u;
  int v18 = 24;
  std::ostream::operator<<();
  sub_1C4B2E9FC(v13, (uint64_t)a1);
  v13[0] = *v5;
  uint64_t v11 = v5[9];
  *(uint64_t *)((char *)v13 + *(void *)(v13[0] - 24)) = v5[8];
  uint64_t v14 = v11;
  v15[0] = v10;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C87863F0](v19);
}

void sub_1C4B2E9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1C4B2E9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1C4B2ECD0((uint64_t)va);
  if (*(char *)(v3 + 23) < 0) {
    operator delete(*(void **)v3);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_1C4B2E9FC(uint64_t *a1, uint64_t a2)
{
  MEMORY[0x1C87862B0](&v20, a1, 0);
  if (!v20) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v4 = *(void *)(*a1 - 24);
  uint64_t v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  uint64_t v7 = std::locale::use_facet(&v19, MEMORY[0x1E4FBA258]);
  std::locale::~locale(&v19);
  uint64_t v8 = 0;
  uint64_t v9 = a1 + 5;
  if (v5 >= 1) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0x7FFFFFFFFFFFFFF7;
  }
  while (1)
  {
    uint64_t v11 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    uint64_t v12 = (unsigned char *)v11[3];
    if (v12 == (unsigned char *)v11[4]) {
      break;
    }
    LOBYTE(v13) = *v12;
LABEL_16:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      int v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    uint64_t v14 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    uint64_t v15 = v14[3];
    if (v15 == v14[4]) {
      (*(void (**)(void *))(*v14 + 80))(v14);
    }
    else {
      v14[3] = v15 + 1;
    }
    if (v10 == ++v8)
    {
      int v16 = 0;
      uint64_t v8 = 1;
      goto LABEL_23;
    }
  }
  int v13 = (*(uint64_t (**)(void *))(*v11 + 72))(v11);
  if (v13 != -1) {
    goto LABEL_16;
  }
  int v16 = 2;
LABEL_23:
  uint64_t v17 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  if (!v8) {
    v16 |= 4u;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(void *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_1C4B2EC20(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  uint64_t v11 = *v9;
  *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v9 + *(void *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1C4B2EBDCLL);
  }
  __cxa_rethrow();
}

void sub_1C4B2ECBC(_Unwind_Exception *a1)
{
}

uint64_t sub_1C4B2ECD0(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C87863F0](a1 + 128);
  return a1;
}

double ul2s@<D0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  do
  {
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      size_t v7 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v7 = *(void *)(a2 + 8);
    }
    unint64_t v8 = v7 + 1;
    if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_1C4949B7C();
    }
    unsigned __int8 v9 = (a1 % 0xA) | 0x30;
    if (v8 >= 0x17)
    {
      uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v11 = v8 | 7;
      }
      uint64_t v12 = v11 + 1;
      int v13 = operator new(v11 + 1);
      *((void *)&v15 + 1) = v7 + 1;
      unint64_t v16 = v12 | 0x8000000000000000;
      *(void *)&long long v15 = v13;
      *int v13 = v9;
      uint64_t v10 = v13 + 1;
    }
    else
    {
      unint64_t v16 = 0;
      HIBYTE(v16) = v7 + 1;
      uint64_t v10 = (char *)&v15 + 1;
      long long v15 = v9;
      if (!v7)
      {
        BYTE1(v15) = 0;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
          goto LABEL_2;
        }
LABEL_19:
        operator delete(*(void **)a2);
        goto LABEL_2;
      }
    }
    if (v6 >= 0) {
      uint64_t v14 = (const void *)a2;
    }
    else {
      uint64_t v14 = *(const void **)a2;
    }
    memmove(v10, v14, v7);
    v10[v7] = 0;
    if (*(char *)(a2 + 23) < 0) {
      goto LABEL_19;
    }
LABEL_2:
    double result = *(double *)&v15;
    *(_OWORD *)a2 = v15;
    *(void *)(a2 + 16) = v16;
    BOOL v5 = a1 >= 0xA;
    a1 /= 0xAuLL;
  }
  while (v5);
  return result;
}

void sub_1C4B2EF6C(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

double i2s@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  if (a1 >= 0) {
    unint64_t v3 = a1;
  }
  else {
    unint64_t v3 = -a1;
  }
  do
  {
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      size_t v7 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v7 = *(void *)(a2 + 8);
    }
    unint64_t v8 = v7 + 1;
    if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_1C4949B7C();
    }
    unsigned __int8 v9 = (v3 % 0xA) | 0x30;
    if (v8 >= 0x17)
    {
      uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v11 = v8 | 7;
      }
      uint64_t v12 = v11 + 1;
      int v13 = operator new(v11 + 1);
      *((void *)&v16 + 1) = v7 + 1;
      unint64_t v17 = v12 | 0x8000000000000000;
      *(void *)&long long v16 = v13;
      *int v13 = v9;
      uint64_t v10 = v13 + 1;
    }
    else
    {
      unint64_t v17 = 0;
      HIBYTE(v17) = v7 + 1;
      uint64_t v10 = (char *)&v16 + 1;
      long long v16 = v9;
      if (!v7)
      {
        BYTE1(v16) = 0;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
          goto LABEL_5;
        }
LABEL_21:
        operator delete(*(void **)a2);
        goto LABEL_5;
      }
    }
    if (v6 >= 0) {
      uint64_t v14 = (const void *)a2;
    }
    else {
      uint64_t v14 = *(const void **)a2;
    }
    memmove(v10, v14, v7);
    v10[v7] = 0;
    if (*(char *)(a2 + 23) < 0) {
      goto LABEL_21;
    }
LABEL_5:
    double result = *(double *)&v16;
    *(_OWORD *)a2 = v16;
    *(void *)(a2 + 16) = v17;
    BOOL v5 = v3 > 9;
    v3 /= 0xAuLL;
  }
  while (v5);
  if (a1 < 0)
  {
    std::operator+<char>();
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    double result = *(double *)&v16;
    *(_OWORD *)a2 = v16;
    *(void *)(a2 + 16) = v17;
  }
  return result;
}

void sub_1C4B2F130(_Unwind_Exception *exception_object)
{
  if ((*(unsigned char *)(v1 + 23) & 0x80) != 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

double i2s@<D0>(int a1@<W0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  if (a1 >= 0) {
    unsigned int v3 = a1;
  }
  else {
    unsigned int v3 = -a1;
  }
  do
  {
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      size_t v7 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v7 = *(void *)(a2 + 8);
    }
    unint64_t v8 = v7 + 1;
    if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_1C4949B7C();
    }
    unsigned int v9 = (v3 % 0xA) | 0x30;
    if (v8 >= 0x17)
    {
      uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v11 = v8 | 7;
      }
      uint64_t v12 = v11 + 1;
      int v13 = operator new(v11 + 1);
      *((void *)&v16 + 1) = v7 + 1;
      unint64_t v17 = v12 | 0x8000000000000000;
      *(void *)&long long v16 = v13;
      *int v13 = v9;
      uint64_t v10 = v13 + 1;
    }
    else
    {
      unint64_t v17 = 0;
      HIBYTE(v17) = v7 + 1;
      uint64_t v10 = (char *)&v16 + 1;
      long long v16 = v9;
      if (!v7)
      {
        BYTE1(v16) = 0;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
          goto LABEL_5;
        }
LABEL_21:
        operator delete(*(void **)a2);
        goto LABEL_5;
      }
    }
    if (v6 >= 0) {
      uint64_t v14 = (const void *)a2;
    }
    else {
      uint64_t v14 = *(const void **)a2;
    }
    memmove(v10, v14, v7);
    v10[v7] = 0;
    if (*(char *)(a2 + 23) < 0) {
      goto LABEL_21;
    }
LABEL_5:
    double result = *(double *)&v16;
    *(_OWORD *)a2 = v16;
    *(void *)(a2 + 16) = v17;
    BOOL v5 = v3 > 9;
    v3 /= 0xAu;
  }
  while (v5);
  if (a1 < 0)
  {
    std::operator+<char>();
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    double result = *(double *)&v16;
    *(_OWORD *)a2 = v16;
    *(void *)(a2 + 16) = v17;
  }
  return result;
}

void sub_1C4B2F300(_Unwind_Exception *exception_object)
{
  if ((*(unsigned char *)(v1 + 23) & 0x80) != 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void d2s(double a1@<D0>, void *a2@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  snprintf(__str, 0x40uLL, "%.10g", a1);
  size_t v3 = strlen(__str);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    sub_1C4949B7C();
  }
  size_t v4 = v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    p_dst = operator new(v6 + 1);
    long long __dst = p_dst;
    unint64_t v15 = v7 | 0x8000000000000000;
    goto LABEL_8;
  }
  HIBYTE(v15) = v3;
  p_dst = &__dst;
  if (v3) {
LABEL_8:
  }
    memcpy(p_dst, __str, v4);
  *((unsigned char *)p_dst + v4) = 0;
  size_t v8 = strlen(__str);
  if (v8 > 0x7FFFFFFFFFFFFFF7) {
    sub_1C4949B7C();
  }
  size_t v9 = v8;
  if (v8 >= 0x17)
  {
    uint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v10 = v8 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v12 = operator new(v10 + 1);
    a2[1] = v9;
    a2[2] = v11 | 0x8000000000000000;
    *a2 = v12;
    a2 = v12;
LABEL_17:
    memcpy(a2, __str, v9);
    *((unsigned char *)a2 + v9) = 0;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_18;
  }
  *((unsigned char *)a2 + 23) = v8;
  if (v8) {
    goto LABEL_17;
  }
  *(unsigned char *)a2 = 0;
  if ((SHIBYTE(v15) & 0x80000000) == 0) {
    return;
  }
LABEL_18:
  int v13 = __dst;
  operator delete(v13);
}

void sub_1C4B2F4F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C4B2F514(uint64_t *a1@<X0>, int **a2@<X8>)
{
  unint64_t v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v5 = *((unsigned __int8 *)a1 + 23);
  uint64_t v7 = (uint64_t *)*a1;
  unint64_t v6 = a1[1];
  do
  {
    if ((v5 & 0x80u) == 0) {
      size_t v8 = a1;
    }
    else {
      size_t v8 = v7;
    }
    if ((v5 & 0x80u) == 0) {
      unint64_t v9 = v5;
    }
    else {
      unint64_t v9 = v6;
    }
    unint64_t v10 = v9 - v4;
    if (v9 <= v4)
    {
      unint64_t v14 = -1;
      size_t v15 = -1 - v4;
LABEL_19:
      if ((char)v5 < 0)
      {
        if (v6 < v4) {
LABEL_113:
        }
          sub_1C49470D8();
      }
      else
      {
        unint64_t v6 = v5;
        uint64_t v7 = a1;
        if (v4 > v5) {
          goto LABEL_113;
        }
      }
      if (v6 - v4 >= v15) {
        size_t v16 = v15;
      }
      else {
        size_t v16 = v6 - v4;
      }
      if (v16 >= 0x7FFFFFFFFFFFFFF8) {
        sub_1C4949B7C();
      }
      if (v16 >= 0x17)
      {
        uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17) {
          uint64_t v18 = v16 | 7;
        }
        uint64_t v19 = v18 + 1;
        p_dst = (void **)operator new(v18 + 1);
        size_t v57 = v16;
        int64_t v58 = v19 | 0x8000000000000000;
        long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v58) = v16;
        p_dst = (void **)&__dst;
        if (!v16)
        {
LABEL_34:
          *((unsigned char *)p_dst + v16) = 0;
          unint64_t v20 = HIBYTE(v58);
          uint64_t v21 = __dst;
          if (v58 < 0) {
            unint64_t v20 = v57;
          }
          else {
            uint64_t v21 = (void **)&__dst;
          }
          if (!v20)
          {
            LODWORD(v22) = 0;
            goto LABEL_83;
          }
          unint64_t v22 = *(unsigned __int8 *)v21 == 45;
          if (*(unsigned char *)v21 == 45)
          {
            if (v20 < 2)
            {
              LODWORD(v22) = 1;
LABEL_83:
              int v23 = 0;
LABEL_84:
              if (v22) {
                int v31 = -v23;
              }
              else {
                int v31 = v23;
              }
              uint64_t v33 = a2[1];
              unint64_t v32 = (unint64_t)a2[2];
              if ((unint64_t)v33 < v32) {
                goto LABEL_88;
              }
              goto LABEL_61;
            }
            uint64_t v45 = 2;
            if (*((unsigned char *)v21 + v22) != 48) {
              goto LABEL_82;
            }
          }
          else
          {
            uint64_t v45 = 1;
            if (*((unsigned char *)v21 + v22) != 48) {
              goto LABEL_82;
            }
          }
          if ((*((unsigned __int8 *)v21 + v45) | 0x20) == 0x78)
          {
            unint64_t v27 = 2;
            if (*(unsigned char *)v21 == 45) {
              unint64_t v27 = 3;
            }
            if (v27 >= v20) {
              goto LABEL_83;
            }
            goto LABEL_42;
          }
LABEL_82:
          unint64_t v27 = *(unsigned __int8 *)v21 == 45;
          if (v22 >= v20) {
            goto LABEL_83;
          }
LABEL_42:
          int v23 = 0;
          do
          {
            int v24 = *((char *)v21 + v27);
            if ((v24 - 48) >= 0xA)
            {
              if ((v24 - 97) >= 6)
              {
                if ((v24 - 65) > 5) {
                  goto LABEL_84;
                }
                int v25 = -55;
              }
              else
              {
                int v25 = -87;
              }
            }
            else
            {
              int v25 = -48;
            }
            int v26 = v24 + 16 * v23 + v25;
            ++v27;
            BOOL v28 = v26 < v23;
            if (v27 >= v20) {
              break;
            }
            int v23 = v26;
          }
          while (!v28);
          if (*(unsigned char *)v21 == 45) {
            unsigned int v29 = 0x80000000;
          }
          else {
            unsigned int v29 = 0x7FFFFFFF;
          }
          if (v22) {
            int v30 = -v26;
          }
          else {
            int v30 = v26;
          }
          if (v28) {
            int v31 = v29;
          }
          else {
            int v31 = v30;
          }
          uint64_t v33 = a2[1];
          unint64_t v32 = (unint64_t)a2[2];
          if ((unint64_t)v33 < v32)
          {
LABEL_88:
            int *v33 = v31;
            a2[1] = v33 + 1;
            if ((SHIBYTE(v58) & 0x80000000) == 0)
            {
LABEL_98:
              unint64_t v5 = *((unsigned __int8 *)a1 + 23);
              uint64_t v7 = (uint64_t *)*a1;
              unint64_t v6 = a1[1];
              goto LABEL_99;
            }
LABEL_89:
            operator delete(__dst);
            goto LABEL_98;
          }
LABEL_61:
          uint64_t v34 = *a2;
          uint64_t v35 = (char *)v33 - (char *)*a2;
          uint64_t v36 = v35 >> 2;
          unint64_t v37 = (v35 >> 2) + 1;
          if (v37 >> 62) {
            sub_1C494A220();
          }
          uint64_t v38 = v32 - (void)v34;
          if (v38 >> 1 > v37) {
            unint64_t v37 = v38 >> 1;
          }
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v37;
          }
          if (v39)
          {
            if (v39 >> 62) {
              sub_1C4949AA8();
            }
            uint64_t v40 = operator new(4 * v39);
            uint64_t v41 = (int *)&v40[4 * v36];
            int *v41 = v31;
            uint64_t v42 = (uint64_t)(v41 + 1);
            int64_t v43 = (char *)v33 - (char *)v34;
            if (v33 == v34)
            {
LABEL_95:
              *a2 = v41;
              a2[1] = (int *)v42;
              a2[2] = (int *)&v40[4 * v39];
              if (v34) {
                operator delete(v34);
              }
              a2[1] = (int *)v42;
              if ((SHIBYTE(v58) & 0x80000000) == 0) {
                goto LABEL_98;
              }
              goto LABEL_89;
            }
          }
          else
          {
            uint64_t v40 = 0;
            uint64_t v41 = (int *)(4 * v36);
            *(_DWORD *)(4 * v36) = v31;
            uint64_t v42 = 4 * v36 + 4;
            int64_t v43 = (char *)v33 - (char *)v34;
            if (v33 == v34) {
              goto LABEL_95;
            }
          }
          unint64_t v44 = v43 - 4;
          if (v44 < 0x2C) {
            goto LABEL_118;
          }
          if ((unint64_t)((char *)v33 - v40 - v35) < 0x20) {
            goto LABEL_118;
          }
          uint64_t v46 = (v44 >> 2) + 1;
          uint64_t v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v48 = &v33[v47 / 0xFFFFFFFFFFFFFFFCLL];
          uint64_t v41 = (int *)((char *)v41 - v47);
          uint64_t v49 = &v40[4 * v36 - 16];
          uint64_t v50 = v33 - 4;
          uint64_t v51 = v46 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v52 = *(_OWORD *)v50;
            *(v49 - 1) = *((_OWORD *)v50 - 1);
            *uint64_t v49 = v52;
            v49 -= 2;
            v50 -= 8;
            v51 -= 8;
          }
          while (v51);
          uint64_t v33 = v48;
          if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_118:
            do
            {
              int v53 = *--v33;
              *--uint64_t v41 = v53;
            }
            while (v33 != v34);
          }
          goto LABEL_95;
        }
      }
      memmove(p_dst, (char *)v7 + v4, v16);
      goto LABEL_34;
    }
    uint64_t v11 = (char *)v8 + v4;
    uint64_t v12 = (char *)v8 + v9;
    while (*v11 != 95)
    {
      ++v11;
      if (!--v10)
      {
        uint64_t v11 = v12;
        break;
      }
    }
    int v13 = (unsigned char *)(v11 - (unsigned char *)v8);
    if (v11 == v12) {
      unint64_t v14 = -1;
    }
    else {
      unint64_t v14 = (unint64_t)v13;
    }
    size_t v15 = v14 - v4;
    if (v14 != v4) {
      goto LABEL_19;
    }
LABEL_99:
    if ((v5 & 0x80u) == 0) {
      uint64_t v54 = a1;
    }
    else {
      uint64_t v54 = v7;
    }
    if ((v5 & 0x80u) == 0) {
      unint64_t v55 = v5;
    }
    else {
      unint64_t v55 = v6;
    }
    if (v55 <= v14) {
      break;
    }
    unint64_t v4 = v14;
    while (*((unsigned char *)v54 + v4) == 95)
    {
      if (v55 == ++v4) {
        return;
      }
    }
  }
  while (v4 != -1);
}

void sub_1C4B2F98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v16 < 0)
  {
    operator delete(__p);
    uint64_t v18 = *(void **)v15;
    if (*(void *)v15)
    {
LABEL_6:
      *(void *)(v15 + 8) = v18;
      operator delete(v18);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v18 = *(void **)v15;
    if (*(void *)v15) {
      goto LABEL_6;
    }
  }
  _Unwind_Resume(a1);
}

double i2sh@<D0>(int a1@<W0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  if (a1 >= 0) {
    unsigned int v3 = a1;
  }
  else {
    unsigned int v3 = -a1;
  }
  do
  {
    if ((v3 & 0xF) >= 0xA) {
      unsigned __int8 v5 = (v3 & 0xF) + 87;
    }
    else {
      unsigned __int8 v5 = v3 & 0xF | 0x30;
    }
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      size_t v7 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v7 = *(void *)(a2 + 8);
    }
    unint64_t v8 = v7 + 1;
    if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_1C4949B7C();
    }
    if (v8 >= 0x17)
    {
      uint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v10 = v8 | 7;
      }
      uint64_t v11 = v10 + 1;
      uint64_t v12 = operator new(v10 + 1);
      *((void *)&v16 + 1) = v7 + 1;
      unint64_t v17 = v11 | 0x8000000000000000;
      *(void *)&long long v16 = v12;
      *uint64_t v12 = v5;
      unint64_t v9 = v12 + 1;
    }
    else
    {
      unint64_t v17 = 0;
      HIBYTE(v17) = v7 + 1;
      unint64_t v9 = (char *)&v16 + 1;
      long long v16 = v5;
      if (!v7)
      {
        BYTE1(v16) = 0;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
          goto LABEL_5;
        }
LABEL_25:
        operator delete(*(void **)a2);
        goto LABEL_5;
      }
    }
    if (v6 >= 0) {
      int v13 = (const void *)a2;
    }
    else {
      int v13 = *(const void **)a2;
    }
    memmove(v9, v13, v7);
    v9[v7] = 0;
    if (*(char *)(a2 + 23) < 0) {
      goto LABEL_25;
    }
LABEL_5:
    *(_OWORD *)a2 = v16;
    *(void *)(a2 + 16) = v17;
    BOOL v4 = v3 > 0xF;
    v3 >>= 4;
  }
  while (v4);
  std::operator+<char>();
  if (*(char *)(a2 + 23) < 0)
  {
    operator delete(*(void **)a2);
    double result = *(double *)&v16;
    *(_OWORD *)a2 = v16;
    *(void *)(a2 + 16) = v17;
    if (a1 < 0) {
      goto LABEL_30;
    }
  }
  else
  {
    double result = *(double *)&v16;
    *(_OWORD *)a2 = v16;
    *(void *)(a2 + 16) = v17;
    if (a1 < 0)
    {
LABEL_30:
      std::operator+<char>();
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      double result = *(double *)&v16;
      *(_OWORD *)a2 = v16;
      *(void *)(a2 + 16) = v17;
    }
  }
  return result;
}

void sub_1C4B2FBE0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C4B2FC08(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  v23[2] = *MEMORY[0x1E4F143B8];
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v6 = *(void *)(a1 + 8) - *(void *)a1;
  if (a2 - 1 < (unint64_t)(v6 >> 2) || (uint64_t v3 = v6 >> 2, (unint64_t)v6 >= 4))
  {
    i2sh(**(_DWORD **)a1, (uint64_t)&__dst);
    *(std::string *)a3 = __dst;
    if (v3 != 1)
    {
      size_t v7 = (size_t *)(a3 + 8);
      size_t v8 = *(unsigned __int8 *)(a3 + 23);
      for (uint64_t i = 1; v3 != i; ++i)
      {
        int v10 = (char)v8;
        if ((v8 & 0x80u) != 0) {
          size_t v8 = *v7;
        }
        unint64_t v11 = v8 + 1;
        if (v8 + 1 >= 0x7FFFFFFFFFFFFFF8) {
          sub_1C4949B7C();
        }
        if (v11 >= 0x17)
        {
          uint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v11 | 7) != 0x17) {
            uint64_t v13 = v11 | 7;
          }
          uint64_t v14 = v13 + 1;
          p_dst = (std::string *)operator new(v13 + 1);
          __dst.__r_.__value_.__l.__size_ = v8 + 1;
          __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          memset(&__dst, 0, sizeof(__dst));
          p_dst = &__dst;
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v8 + 1;
          if (!v8) {
            goto LABEL_20;
          }
        }
        if (v10 >= 0) {
          uint64_t v15 = (const void *)a3;
        }
        else {
          uint64_t v15 = *(const void **)a3;
        }
        memmove(p_dst, v15, v8);
LABEL_20:
        *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v8) = 95;
        i2sh(*(_DWORD *)(*(void *)a1 + 4 * i), (uint64_t)__p);
        if ((v21 & 0x80u) == 0) {
          long long v16 = __p;
        }
        else {
          long long v16 = (void **)__p[0];
        }
        if ((v21 & 0x80u) == 0) {
          std::string::size_type v17 = v21;
        }
        else {
          std::string::size_type v17 = (std::string::size_type)__p[1];
        }
        uint64_t v18 = std::string::append(&__dst, (const std::string::value_type *)v16, v17);
        std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
        v23[0] = v18->__r_.__value_.__l.__size_;
        *(void *)((char *)v23 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
        size_t v8 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
        v18->__r_.__value_.__r.__words[0] = 0;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        if (v10 < 0) {
          operator delete(*(void **)a3);
        }
        *(void *)a3 = v19;
        size_t *v7 = v23[0];
        *(void *)(a3 + 15) = *(void *)((char *)v23 + 7);
        *(unsigned char *)(a3 + 23) = v8;
        if ((char)v21 < 0)
        {
          operator delete(__p[0]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
LABEL_32:
          }
            operator delete(__dst.__r_.__value_.__l.__data_);
        }
        else if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          goto LABEL_32;
        }
      }
    }
  }
}

void sub_1C4B2FE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((v22 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*v21);
  _Unwind_Resume(exception_object);
}

double ul2sh@<D0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  do
  {
    if ((a1 & 0xF) >= 0xA) {
      unsigned __int8 v5 = (a1 & 0xF) + 87;
    }
    else {
      unsigned __int8 v5 = a1 & 0xF | 0x30;
    }
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      size_t v7 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v7 = *(void *)(a2 + 8);
    }
    unint64_t v8 = v7 + 1;
    if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_1C4949B7C();
    }
    if (v8 >= 0x17)
    {
      uint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v10 = v8 | 7;
      }
      uint64_t v11 = v10 + 1;
      uint64_t v12 = operator new(v10 + 1);
      *((void *)&v15 + 1) = v7 + 1;
      unint64_t v16 = v11 | 0x8000000000000000;
      *(void *)&long long v15 = v12;
      *uint64_t v12 = v5;
      unint64_t v9 = v12 + 1;
    }
    else
    {
      unint64_t v16 = 0;
      HIBYTE(v16) = v7 + 1;
      unint64_t v9 = (char *)&v15 + 1;
      long long v15 = v5;
      if (!v7)
      {
        BYTE1(v15) = 0;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
          goto LABEL_3;
        }
LABEL_22:
        operator delete(*(void **)a2);
        goto LABEL_3;
      }
    }
    if (v6 >= 0) {
      uint64_t v13 = (const void *)a2;
    }
    else {
      uint64_t v13 = *(const void **)a2;
    }
    memmove(v9, v13, v7);
    v9[v7] = 0;
    if (*(char *)(a2 + 23) < 0) {
      goto LABEL_22;
    }
LABEL_3:
    *(_OWORD *)a2 = v15;
    *(void *)(a2 + 16) = v16;
    BOOL v4 = a1 > 0xF;
    a1 >>= 4;
  }
  while (v4);
  std::operator+<char>();
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v15;
  *(_OWORD *)a2 = v15;
  *(void *)(a2 + 16) = v16;
  return result;
}

void sub_1C4B30034(_Unwind_Exception *exception_object)
{
  if ((*(unsigned char *)(v1 + 23) & 0x80) != 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void iv2s(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void v24[2] = *MEMORY[0x1E4F143B8];
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (a2)
  {
    short2sh(*a1, (uint64_t)&__dst);
    *(std::string *)a3 = __dst;
    uint64_t v6 = a2 - 1;
    if (a2 != 1)
    {
      size_t v7 = (size_t *)(a3 + 8);
      size_t v8 = *(unsigned __int8 *)(a3 + 23);
      unint64_t v9 = a1 + 1;
      do
      {
        int v10 = (char)v8;
        if ((v8 & 0x80u) == 0) {
          size_t v11 = v8;
        }
        else {
          size_t v11 = *v7;
        }
        unint64_t v12 = v11 + 1;
        if (v11 + 1 >= 0x7FFFFFFFFFFFFFF8) {
          sub_1C4949B7C();
        }
        if (v12 >= 0x17)
        {
          uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v12 | 7) != 0x17) {
            uint64_t v14 = v12 | 7;
          }
          uint64_t v15 = v14 + 1;
          p_dst = (std::string *)operator new(v14 + 1);
          __dst.__r_.__value_.__l.__size_ = v11 + 1;
          __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          memset(&__dst, 0, sizeof(__dst));
          p_dst = &__dst;
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v11 + 1;
          if (!v11) {
            goto LABEL_20;
          }
        }
        if (v10 >= 0) {
          unint64_t v16 = (const void *)a3;
        }
        else {
          unint64_t v16 = *(const void **)a3;
        }
        memmove(p_dst, v16, v11);
LABEL_20:
        *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v11) = 95;
        short2sh(*v9, (uint64_t)__p);
        if ((v22 & 0x80u) == 0) {
          std::string::size_type v17 = __p;
        }
        else {
          std::string::size_type v17 = (void **)__p[0];
        }
        if ((v22 & 0x80u) == 0) {
          std::string::size_type v18 = v22;
        }
        else {
          std::string::size_type v18 = (std::string::size_type)__p[1];
        }
        std::string::size_type v19 = std::string::append(&__dst, (const std::string::value_type *)v17, v18);
        std::string::size_type v20 = v19->__r_.__value_.__r.__words[0];
        v24[0] = v19->__r_.__value_.__l.__size_;
        *(void *)((char *)v24 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
        size_t v8 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
        v19->__r_.__value_.__r.__words[0] = 0;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        if (v10 < 0) {
          operator delete(*(void **)a3);
        }
        *(void *)a3 = v20;
        size_t *v7 = v24[0];
        *(void *)(a3 + 15) = *(void *)((char *)v24 + 7);
        *(unsigned char *)(a3 + 23) = v8;
        if ((char)v22 < 0)
        {
          operator delete(__p[0]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
LABEL_32:
          }
            operator delete(__dst.__r_.__value_.__l.__data_);
        }
        else if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          goto LABEL_32;
        }
        ++v9;
        --v6;
      }
      while (v6);
    }
  }
}

void sub_1C4B30268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((v22 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*v21);
  _Unwind_Resume(exception_object);
}

double short2sh@<D0>(unsigned __int16 a1@<W0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  do
  {
    if ((a1 & 0xFu) >= 0xA) {
      unsigned __int8 v5 = (a1 & 0xF) + 87;
    }
    else {
      unsigned __int8 v5 = a1 & 0xF | 0x30;
    }
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      size_t v7 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v7 = *(void *)(a2 + 8);
    }
    unint64_t v8 = v7 + 1;
    if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_1C4949B7C();
    }
    if (v8 >= 0x17)
    {
      uint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v10 = v8 | 7;
      }
      uint64_t v11 = v10 + 1;
      unint64_t v12 = operator new(v10 + 1);
      *((void *)&v15 + 1) = v7 + 1;
      unint64_t v16 = v11 | 0x8000000000000000;
      *(void *)&long long v15 = v12;
      *unint64_t v12 = v5;
      unint64_t v9 = v12 + 1;
    }
    else
    {
      unint64_t v16 = 0;
      HIBYTE(v16) = v7 + 1;
      unint64_t v9 = (char *)&v15 + 1;
      long long v15 = v5;
      if (!v7)
      {
        BYTE1(v15) = 0;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
          goto LABEL_3;
        }
LABEL_21:
        operator delete(*(void **)a2);
        goto LABEL_3;
      }
    }
    if (v6 >= 0) {
      uint64_t v13 = (const void *)a2;
    }
    else {
      uint64_t v13 = *(const void **)a2;
    }
    memmove(v9, v13, v7);
    v9[v7] = 0;
    if (*(char *)(a2 + 23) < 0) {
      goto LABEL_21;
    }
LABEL_3:
    *(_OWORD *)a2 = v15;
    *(void *)(a2 + 16) = v16;
    unsigned int v4 = a1;
    a1 >>= 4;
  }
  while (v4 > 0xF);
  std::operator+<char>();
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v15;
  *(_OWORD *)a2 = v15;
  *(void *)(a2 + 16) = v16;
  return result;
}

void sub_1C4B30464(_Unwind_Exception *exception_object)
{
  if ((*(unsigned char *)(v1 + 23) & 0x80) != 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C4B30D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_1C4B30DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_1C4B30DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_1C4B30DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_1C4B30DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

id sub_1C4B30E18(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v29[3] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v24 = 0;
    int v25 = &v24;
    uint64_t v26 = 0x2020000000;
    unint64_t v9 = (void *)qword_1EA3C9398;
    uint64_t v27 = qword_1EA3C9398;
    if (!qword_1EA3C9398)
    {
      uint64_t v19 = MEMORY[0x1E4F143A8];
      uint64_t v20 = 3221225472;
      unsigned __int8 v21 = sub_1C4B31854;
      int v22 = &unk_1E64E1EC8;
      int v23 = &v24;
      sub_1C4B31854((uint64_t)&v19);
      unint64_t v9 = (void *)v25[3];
    }
    _Block_object_dispose(&v24, 8);
    if (!v9) {
      goto LABEL_13;
    }
    v28[0] = *v9;
    v29[0] = a4;
    uint64_t v24 = 0;
    int v25 = &v24;
    uint64_t v26 = 0x2020000000;
    uint64_t v10 = (void *)qword_1EA3C93A0;
    uint64_t v27 = qword_1EA3C93A0;
    if (!qword_1EA3C93A0)
    {
      uint64_t v19 = MEMORY[0x1E4F143A8];
      uint64_t v20 = 3221225472;
      unsigned __int8 v21 = sub_1C4B31994;
      int v22 = &unk_1E64E1EC8;
      int v23 = &v24;
      sub_1C4B31994((uint64_t)&v19);
      uint64_t v10 = (void *)v25[3];
    }
    _Block_object_dispose(&v24, 8);
    if (!v10) {
      goto LABEL_13;
    }
    v28[1] = *v10;
    v29[1] = a3;
    uint64_t v24 = 0;
    int v25 = &v24;
    uint64_t v26 = 0x2020000000;
    uint64_t v11 = (void *)qword_1EA3C93A8;
    uint64_t v27 = qword_1EA3C93A8;
    if (!qword_1EA3C93A8)
    {
      uint64_t v19 = MEMORY[0x1E4F143A8];
      uint64_t v20 = 3221225472;
      unsigned __int8 v21 = sub_1C4B31AD4;
      int v22 = &unk_1E64E1EC8;
      int v23 = &v24;
      sub_1C4B31AD4((uint64_t)&v19);
      uint64_t v11 = (void *)v25[3];
    }
    _Block_object_dispose(&v24, 8);
    if (!v11)
    {
LABEL_13:
      dlerror();
      abort_report_np();
      __break(1u);
    }
    v28[2] = *v11;
    v29[2] = a5;
    uint64_t v14 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v12, (uint64_t)v29, (uint64_t)v28, 3, v13);
    id v15 = objc_alloc(MEMORY[0x1E4F28B18]);
    return (id)objc_msgSend_initWithString_attributes_(v15, v16, a2, v14, v17, v18);
  }
  return result;
}

void sub_1C4B310DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4B310F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4B3110C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1C4B311A0(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EA3C9370)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = sub_1C4B312E0;
    v5[4] = &unk_1E64E1AA8;
    v5[5] = v5;
    long long v6 = xmmword_1E64E3F40;
    uint64_t v7 = 0;
    qword_1EA3C9370 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    int v2 = (void *)qword_1EA3C9370;
    if (qword_1EA3C9370)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  int v2 = (void *)qword_1EA3C9370;
LABEL_5:
  double result = dlsym(v2, "CTFontCreateWithName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
  off_1EA3C9368 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1C4B312E0()
{
  uint64_t result = _sl_dlopen();
  qword_1EA3C9370 = result;
  return result;
}

void *sub_1C4B31354(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EA3C9370)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = sub_1C4B312E0;
    v5[4] = &unk_1E64E1AA8;
    v5[5] = v5;
    long long v6 = xmmword_1E64E3F40;
    uint64_t v7 = 0;
    qword_1EA3C9370 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    int v2 = (void *)qword_1EA3C9370;
    if (qword_1EA3C9370)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  int v2 = (void *)qword_1EA3C9370;
LABEL_5:
  uint64_t result = dlsym(v2, "CTParagraphStyleCreate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
  off_1EA3C9378 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1C4B31494(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EA3C9370)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = sub_1C4B312E0;
    v5[4] = &unk_1E64E1AA8;
    v5[5] = v5;
    long long v6 = xmmword_1E64E3F40;
    uint64_t v7 = 0;
    qword_1EA3C9370 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    int v2 = (void *)qword_1EA3C9370;
    if (qword_1EA3C9370)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  int v2 = (void *)qword_1EA3C9370;
LABEL_5:
  uint64_t result = dlsym(v2, "CTFramesetterCreateWithAttributedString");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
  off_1EA3C9380 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1C4B315D4(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EA3C9370)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = sub_1C4B312E0;
    v5[4] = &unk_1E64E1AA8;
    v5[5] = v5;
    long long v6 = xmmword_1E64E3F40;
    uint64_t v7 = 0;
    qword_1EA3C9370 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    int v2 = (void *)qword_1EA3C9370;
    if (qword_1EA3C9370)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  int v2 = (void *)qword_1EA3C9370;
LABEL_5:
  uint64_t result = dlsym(v2, "CTFramesetterCreateFrame");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
  off_1EA3C9388 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1C4B31714(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EA3C9370)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = sub_1C4B312E0;
    v5[4] = &unk_1E64E1AA8;
    v5[5] = v5;
    long long v6 = xmmword_1E64E3F40;
    uint64_t v7 = 0;
    qword_1EA3C9370 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    int v2 = (void *)qword_1EA3C9370;
    if (qword_1EA3C9370)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  int v2 = (void *)qword_1EA3C9370;
LABEL_5:
  uint64_t result = dlsym(v2, "CTFrameDraw");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
  off_1EA3C9390 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1C4B31854(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EA3C9370)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = sub_1C4B312E0;
    v5[4] = &unk_1E64E1AA8;
    v5[5] = v5;
    long long v6 = xmmword_1E64E3F40;
    uint64_t v7 = 0;
    qword_1EA3C9370 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    int v2 = (void *)qword_1EA3C9370;
    if (qword_1EA3C9370)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  int v2 = (void *)qword_1EA3C9370;
LABEL_5:
  uint64_t result = dlsym(v2, "kCTFontAttributeName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
  qword_1EA3C9398 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1C4B31994(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EA3C9370)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = sub_1C4B312E0;
    v5[4] = &unk_1E64E1AA8;
    v5[5] = v5;
    long long v6 = xmmword_1E64E3F40;
    uint64_t v7 = 0;
    qword_1EA3C9370 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    int v2 = (void *)qword_1EA3C9370;
    if (qword_1EA3C9370)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  int v2 = (void *)qword_1EA3C9370;
LABEL_5:
  uint64_t result = dlsym(v2, "kCTForegroundColorAttributeName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
  qword_1EA3C93A0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1C4B31AD4(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EA3C9370)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = sub_1C4B312E0;
    v5[4] = &unk_1E64E1AA8;
    v5[5] = v5;
    long long v6 = xmmword_1E64E3F40;
    uint64_t v7 = 0;
    qword_1EA3C9370 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    int v2 = (void *)qword_1EA3C9370;
    if (qword_1EA3C9370)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  int v2 = (void *)qword_1EA3C9370;
LABEL_5:
  uint64_t result = dlsym(v2, "kCTParagraphStyleAttributeName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
  qword_1EA3C93A8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1C4B31CA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B31DF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B31E00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B31E10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B31E20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B31E30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B31EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CHPolygon;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C4B31FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B31FEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B32220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B32230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3237C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1C4B323A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B32464(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B3247C(uint64_t result, double a2, double a3, double a4, double a5)
{
  double v6 = *(double *)(result + 40);
  double v5 = *(double *)(result + 48);
  double v8 = *(double *)(result + 56);
  double v7 = *(double *)(result + 64);
  float v9 = v8 - v6;
  float v10 = v7 - v5;
  float v11 = (float)(v10 * v10) + (float)(v9 * v9);
  if (v11 > 0.0)
  {
    float v9 = v9 / v11;
    float v10 = v10 / v11;
  }
  float v12 = a4 - a2;
  float v13 = a5 - a3;
  float v14 = (float)(v13 * v13) + (float)(v12 * v12);
  if (v14 > 0.0)
  {
    float v12 = v12 / v14;
    float v13 = v13 / v14;
  }
  double v15 = v9;
  double v16 = v10;
  double v17 = v12;
  double v18 = v13;
  float v19 = v15 * v13 - v17 * v16;
  if (v19 != 0.0)
  {
    float v20 = (v17 * (v5 - a3) - (v6 - a2) * v18) / v19;
    double v21 = v20;
    double v17 = v6 + v20 * v15;
    double v15 = v5 + v21 * v16;
  }
  if (v8 >= v6) {
    double v22 = *(double *)(result + 40);
  }
  else {
    double v22 = *(double *)(result + 56);
  }
  double v23 = v22 + -0.00100000005;
  if (v6 >= v8) {
    double v8 = *(double *)(result + 40);
  }
  double v24 = v8 + 0.00100000005;
  if (a4 >= a2) {
    double v25 = a2;
  }
  else {
    double v25 = a4;
  }
  double v26 = v25 + -0.00100000005;
  if (v17 >= v23 && v17 <= v24 && v17 >= v26)
  {
    if (a2 < a4) {
      a2 = a4;
    }
    double v29 = a2 + 0.00100000005;
    if (v7 >= v5) {
      double v30 = *(double *)(result + 48);
    }
    else {
      double v30 = *(double *)(result + 64);
    }
    double v31 = v30 + -0.00100000005;
    if (v17 <= v29 && v15 >= v31)
    {
      double v33 = v5 >= v7 ? *(double *)(result + 48) : *(double *)(result + 64);
      double v34 = v33 + 0.00100000005;
      double v35 = a5 >= a3 ? a3 : a5;
      double v36 = v35 + -0.00100000005;
      if (v15 <= v34 && v15 >= v36)
      {
        if (a3 >= a5) {
          double v38 = a3;
        }
        else {
          double v38 = a5;
        }
        if (v15 <= v38 + 0.00100000005) {
          ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24);
        }
      }
    }
  }
  return result;
}

BOOL CHLineSegment::intersectsWithLineSegment(CHLineSegment *this, const CHLineSegment *a2)
{
  double x = this->var0.x;
  double y = this->var0.y;
  double v5 = this->var1.x;
  double v4 = this->var1.y;
  float v6 = v5 - this->var0.x;
  float v7 = v4 - y;
  float v8 = (float)(v7 * v7) + (float)(v6 * v6);
  if (v8 > 0.0)
  {
    float v6 = v6 / v8;
    float v7 = v7 / v8;
  }
  double v10 = a2->var0.x;
  double v9 = a2->var0.y;
  double v12 = a2->var1.x;
  double v11 = a2->var1.y;
  float v13 = v12 - a2->var0.x;
  float v14 = v11 - v9;
  float v15 = (float)(v14 * v14) + (float)(v13 * v13);
  if (v15 > 0.0)
  {
    float v13 = v13 / v15;
    float v14 = v14 / v15;
  }
  double v16 = v6;
  double v17 = v7;
  double v18 = v13;
  double v19 = v14;
  float v20 = v16 * v14 - v18 * v17;
  if (v20 != 0.0)
  {
    float v21 = (v18 * (y - v9) - (x - v10) * v19) / v20;
    double v22 = v21;
    double v18 = x + v21 * v16;
    double v16 = y + v22 * v17;
  }
  if (v5 >= x) {
    double v23 = this->var0.x;
  }
  else {
    double v23 = this->var1.x;
  }
  double v24 = v23 + -0.00100000005;
  if (x >= v5) {
    double v5 = this->var0.x;
  }
  double v25 = v5 + 0.00100000005;
  if (v12 >= v10) {
    double v26 = a2->var0.x;
  }
  else {
    double v26 = a2->var1.x;
  }
  double v27 = v26 + -0.00100000005;
  if (v18 < v24 || v18 > v25 || v18 < v27) {
    return 0;
  }
  if (v10 >= v12) {
    double v31 = a2->var0.x;
  }
  else {
    double v31 = a2->var1.x;
  }
  double v32 = v31 + 0.00100000005;
  if (v4 >= y) {
    double v33 = this->var0.y;
  }
  else {
    double v33 = this->var1.y;
  }
  double v34 = v33 + -0.00100000005;
  if (v18 > v32 || v16 < v34) {
    return 0;
  }
  if (y < v4) {
    double y = this->var1.y;
  }
  double v36 = y + 0.00100000005;
  if (v11 >= v9) {
    double v37 = a2->var0.y;
  }
  else {
    double v37 = a2->var1.y;
  }
  double v38 = v37 + -0.00100000005;
  if (v16 > v36 || v16 < v38) {
    return 0;
  }
  if (v9 >= v11) {
    double v40 = a2->var0.y;
  }
  else {
    double v40 = a2->var1.y;
  }
  return v16 <= v40 + 0.00100000005;
}

void sub_1C4B3281C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3282C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3283C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3284C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CHLineSegment::CHLineSegment(CHLineSegment *this, CGPoint a2, CGPoint a3)
{
  this->var0 = a2;
  this->var1 = a3;
}

{
  this->var0 = a2;
  this->var1 = a3;
}

uint64_t sub_1C4B32868(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4B32878(uint64_t a1)
{
}

void sub_1C4B32880(uint64_t a1, double a2, double a3, double a4, double a5)
{
  id v10 = *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  self;
  int64_t v16 = objc_msgSend_vertexCount(v10, v11, v12, v13, v14, v15);
  double v22 = (char *)malloc_type_calloc(v16, 0x10uLL, 0x1000040451B5BE8uLL);
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  double v26 = a4 - a2;
  double v27 = a5 - a3;
  double v28 = -(a5 - a3);
  float v29 = v26;
  float v30 = v27;
  float v31 = (float)(v30 * v30) + (float)(v29 * v29);
  if (v31 <= 0.0) {
    float v31 = 1.0;
  }
  double v32 = (float)(v29 / v31);
  double v33 = (float)(v30 / v31);
LABEL_4:
  uint64_t v34 = 16 * v23;
  while (v23 < objc_msgSend_vertexCount(v10, v17, v18, v19, v20, v21, *(void *)&v95, *(void *)&v96))
  {
    uint64_t v40 = objc_msgSend_vertexCount(v10, v35, v36, v37, v38, v39);
    uint64_t v46 = objc_msgSend_vertices(v10, v41, v42, v43, v44, v45);
    double v47 = *(double *)(v46 + v34);
    double v48 = *(double *)(v46 + v34 + 8);
    uint64_t v54 = objc_msgSend_vertices(v10, v49, v50, v51, v52, v53);
    long long v55 = *(_OWORD *)(v54 + 16 * (++v23 % v40));
    if (v25 + 4 > v16)
    {
      long long v99 = *(_OWORD *)(v54 + 16 * (v23 % v40));
      v16 += 4;
      double v22 = (char *)malloc_type_realloc(v22, 16 * v16, 0x1000040451B5BE8uLL);
      long long v55 = v99;
    }
    double v56 = (v47 - a2) * v28 + v26 * (v48 - a3);
    double v57 = (*(double *)&v55 - a2) * v28 + v26 * (*((double *)&v55 + 1) - a3);
    if (v56 < 0.0 && v57 < 0.0)
    {
      *(_OWORD *)&v22[16 * v25] = v55;
      ++v24;
      ++v25;
      goto LABEL_4;
    }
    if (v56 >= 0.0 && v57 < 0.0)
    {
      float v67 = *(double *)&v55 - v47;
      float v68 = *((double *)&v55 + 1) - v48;
      float v69 = (float)(v68 * v68) + (float)(v67 * v67);
      if (v69 > 0.0)
      {
        float v67 = v67 / v69;
        float v68 = v68 / v69;
      }
      double v70 = v67;
      double v71 = v68;
      float v72 = v32 * v71 - v70 * v33;
      if (v72 != 0.0)
      {
        float v73 = (v70 * (a3 - v48) - (a2 - v47) * v71) / v72;
        double v74 = v73;
        double v97 = a3 + v74 * v33;
        double v98 = a2 + v74 * v32;
      }
      uint64_t v75 = (double *)&v22[16 * v25];
      *uint64_t v75 = v98;
      v75[1] = v97;
      *((_OWORD *)v75 + 1) = v55;
      ++v24;
      v25 += 2;
      goto LABEL_4;
    }
    v34 += 16;
    if (v56 < 0.0 && v57 >= 0.0)
    {
      float v58 = *(double *)&v55 - v47;
      float v59 = *((double *)&v55 + 1) - v48;
      float v60 = (float)(v59 * v59) + (float)(v58 * v58);
      if (v60 > 0.0)
      {
        float v58 = v58 / v60;
        float v59 = v59 / v60;
      }
      double v61 = v58;
      double v62 = v59;
      float v63 = v32 * v62 - v61 * v33;
      if (v63 != 0.0)
      {
        float v64 = (v61 * (a3 - v48) - (a2 - v47) * v62) / v63;
        double v65 = v64;
        double v95 = a3 + v65 * v33;
        double v96 = a2 + v65 * v32;
      }
      uint64_t v66 = (double *)&v22[16 * v25];
      *uint64_t v66 = v96;
      v66[1] = v95;
      ++v25;
      goto LABEL_4;
    }
  }
  uint64_t v76 = malloc_type_calloc(v25, 0x10uLL, 0x1000040451B5BE8uLL);
  uint64_t v82 = v76;
  if (v25 == v24)
  {
    CGRect v83 = (const void *)objc_msgSend_vertices(v10, v77, v78, v79, v80, v81);
    memcpy(v82, v83, 16 * v24);
  }
  else if (v25 >= 1)
  {
    uint64_t v84 = (long long *)v22;
    uint64_t v85 = v76;
    uint64_t v86 = v25;
    do
    {
      long long v87 = *v84++;
      *v85++ = v87;
      --v86;
    }
    while (v86);
  }
  free(v22);

  uint64_t v88 = [CHPolygon alloc];
  uint64_t v92 = objc_msgSend_initWithVertices_vertexCount_(v88, v89, (uint64_t)v82, v25, v90, v91);
  uint64_t v93 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v94 = *(void **)(v93 + 40);
  *(void *)(v93 + 40) = v92;
}

void sub_1C4B32C2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B32C3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B32C4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B32C5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B32C6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B32C7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B32C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B32C9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CGFloat CHLineSegment::getEnd(CHLineSegment *this)
{
  return this->var1.x;
}

CGFloat CHLineSegment::getStart(CHLineSegment *this)
{
  return this->var0.x;
}

CGFloat CHLineSegment::intersectionPointWithLine(CHLineSegment *this, const CHLineSegment *a2)
{
  CGFloat result = this->var0.x;
  double y = this->var0.y;
  float v4 = this->var1.x - this->var0.x;
  float v5 = this->var1.y - y;
  float v6 = (float)(v5 * v5) + (float)(v4 * v4);
  if (v6 > 0.0)
  {
    float v4 = v4 / v6;
    float v5 = v5 / v6;
  }
  double v7 = a2->var0.y;
  float v8 = a2->var1.x - a2->var0.x;
  float v9 = a2->var1.y - v7;
  float v10 = (float)(v9 * v9) + (float)(v8 * v8);
  if (v10 > 0.0)
  {
    float v8 = v8 / v10;
    float v9 = v9 / v10;
  }
  double v11 = v4;
  double v12 = v8;
  double v13 = v9;
  float v14 = v11 * v13 - v12 * v5;
  if (v14 != 0.0)
  {
    float v15 = (v12 * (y - v7) - (result - a2->var0.x) * v13) / v14;
    return result + v15 * v11;
  }
  return result;
}

void replaceUnsupportedCharactersByTransliteration(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v47 = objc_alloc_init(MEMORY[0x1E4F28E78]);
  std::string __p = 0;
  unint64_t v45 = 0;
  unint64_t v46 = 0;
  unint64_t v11 = objc_msgSend_length(v5, v6, v7, v8, v9, v10);
  unint64_t v12 = v11;
  if (v11)
  {
    if (v11 >> 60) {
      sub_1C494A220();
    }
    unint64_t v11 = (unint64_t)operator new(16 * v11);
    std::string __p = (void *)(v11 + (v45 & 0xFFFFFFFFFFFFFFF0));
    unint64_t v45 = (unint64_t)__p;
    unint64_t v46 = v11 + 16 * v12;
  }
  CoreHandwriting::synthesis::CHDiffusionSynthesisSetOfSupportedCharacterByModel((CoreHandwriting::synthesis *)v11);
  double v13 = (CoreHandwriting::synthesis *)objc_claimAutoreleasedReturnValue();
  float v14 = CoreHandwriting::synthesis::CHDiffusionSynthesisTransliterationCharacterExtensionMap(v13);
  uint64_t v40 = 0;
  uint64_t v41 = &v40;
  uint64_t v42 = 0x2020000000;
  uint64_t v43 = 0;
  uint64_t v20 = objc_msgSend_length(v5, v15, v16, v17, v18, v19);
  v33[0] = MEMORY[0x1E4F143A8];
  v33[1] = 3221225472;
  v33[2] = sub_1C4B33160;
  v33[3] = &unk_1E64E3FF8;
  uint64_t v21 = v13;
  uint64_t v34 = v21;
  uint64_t v37 = &v47;
  p_p = &__p;
  id v22 = v14;
  uint64_t v39 = a2;
  id v35 = v22;
  uint64_t v36 = &v40;
  objc_msgSend_enumerateCodepointsInRange_usingBlock_(v5, v23, 0, v20, (uint64_t)v33, v24);
  uint64_t v25 = v41;
  if (v41[3] >= 1)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    double v26 = (id)qword_1EA3C9FD8;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = v41[3];
      *(_DWORD *)std::string buf = 67109120;
      int v49 = v27;
      _os_log_impl(&dword_1C492D000, v26, OS_LOG_TYPE_DEFAULT, "String contains %i unsupported code points.", buf, 8u);
    }

    uint64_t v25 = v41;
  }
  id v28 = v47;
  a3[1] = 0;
  *a3 = v28;
  a3[2] = 0;
  a3[3] = 0;
  float v29 = __p;
  int64_t v30 = v45 - (void)__p;
  if ((void *)v45 != __p)
  {
    if (v30 < 0) {
      sub_1C494A220();
    }
    float v31 = (char *)operator new(v45 - (void)__p);
    a3[1] = v31;
    double v32 = &v31[16 * (v30 >> 4)];
    a3[3] = v32;
    memcpy(v31, v29, v30);
    a3[2] = v32;
  }
  a3[4] = v25[3];

  _Block_object_dispose(&v40, 8);
  if (__p)
  {
    unint64_t v45 = (unint64_t)__p;
    operator delete(__p);
  }
}

void sub_1C4B330B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  _Block_object_dispose(&a19, 8);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C4B33160(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v8 = (int)a2;
  if (objc_msgSend_longCharacterIsMember_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6))
  {
    unicodeToNSString(v8, v10, v11, v12, v13, v14);
    id v74 = (id)objc_claimAutoreleasedReturnValue();
    sub_1C4B33520(a1 + 56, v74, a3, a4);

    return;
  }
  if (objc_msgSend_firstCodepointInString(@" ", v10, v11, v12, v13, v14) != v8)
  {
    uint64_t v20 = objc_msgSend_controlCharacterSet(MEMORY[0x1E4F28B88], v15, v16, v17, v18, v19);
    if (objc_msgSend_characterIsMember_(v20, v21, (unsigned __int16)v8, v22, v23, v24))
    {
      int64_t v30 = objc_msgSend_newlineCharacterSet(MEMORY[0x1E4F28B88], v25, v26, v27, v28, v29);
      int IsMember = objc_msgSend_characterIsMember_(v30, v31, (unsigned __int16)v8, v32, v33, v34);

      if (!IsMember) {
        return;
      }
    }
    else
    {
    }
    uint64_t v41 = unicodeToNSString(v8, v36, v37, v38, v39, v40);
    unint64_t v46 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v42, (uint64_t)v41, v43, v44, v45);

    if (v46)
    {
      uint64_t v51 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v47, (uint64_t)v41, v48, v49, v50);
      uint64_t v78 = 0;
      uint64_t v79 = &v78;
      uint64_t v80 = 0x2020000000;
      char v81 = 1;
      uint64_t v57 = objc_msgSend_length(v51, v52, v53, v54, v55, v56);
      v75[0] = MEMORY[0x1E4F143A8];
      v75[1] = 3221225472;
      v75[2] = sub_1C4B336F4;
      v75[3] = &unk_1E64E2AB0;
      id v76 = *(id *)(a1 + 32);
      uint64_t v77 = &v78;
      objc_msgSend_enumerateCodepointsInRange_usingBlock_(v51, v58, 0, v57, (uint64_t)v75, v59);
      if (*((unsigned char *)v79 + 24)
        || objc_msgSend_isEqualToString_(v51, v60, @" ", v61, v62, v63))
      {
        sub_1C4B33520(a1 + 56, v51, a3, a4);

        _Block_object_dispose(&v78, 8);
LABEL_21:

        return;
      }

      _Block_object_dispose(&v78, 8);
    }
    uint64_t v51 = CoreHandwriting::synthesis::CHDiffusionSynthesisApplyAllowedUnicodeDecomposition(v8, *(void *)(a1 + 72));
    if (!objc_msgSend_length(v51, v64, v65, v66, v67, v68))
    {

      ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
      uint64_t v51 = unicodeToNSString(v8, v69, v70, v71, v72, v73);
    }
    sub_1C4B33520(a1 + 56, v51, a3, a4);
    goto LABEL_21;
  }
  sub_1C4B33520(a1 + 56, @" ", a3, a4);
}

void sub_1C4B3345C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B33470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B33480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4B334D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B334EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B334FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3350C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B33520(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  unint64_t v13 = 0;
  id v26 = v7;
  while (v13 < objc_msgSend_length(v7, v8, v9, v10, v11, v12))
  {
    float v15 = *(uint64_t **)(a1 + 8);
    uint64_t v17 = (void *)v15[1];
    unint64_t v16 = v15[2];
    if ((unint64_t)v17 < v16)
    {
      *uint64_t v17 = a3;
      v17[1] = a4;
      uint64_t v14 = v17 + 2;
      goto LABEL_3;
    }
    uint64_t v18 = (void *)*v15;
    uint64_t v19 = ((uint64_t)v17 - *v15) >> 4;
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 60) {
      sub_1C494A220();
    }
    uint64_t v21 = v16 - (void)v18;
    if (v21 >> 3 > v20) {
      unint64_t v20 = v21 >> 3;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      if (v22 >> 60) {
        sub_1C4949AA8();
      }
      uint64_t v23 = (char *)operator new(16 * v22);
      uint64_t v24 = &v23[16 * v19];
      *(void *)uint64_t v24 = a3;
      *((void *)v24 + 1) = a4;
      uint64_t v25 = (uint64_t)v24;
      if (v17 == v18)
      {
LABEL_15:
        uint64_t v14 = v24 + 16;
        uint64_t *v15 = v25;
        v15[1] = (uint64_t)(v24 + 16);
        v15[2] = (uint64_t)&v23[16 * v22];
        if (v17) {
          goto LABEL_20;
        }
        goto LABEL_3;
      }
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = (char *)(16 * v19);
      *(void *)uint64_t v24 = a3;
      *((void *)v24 + 1) = a4;
      uint64_t v25 = 16 * v19;
      if (v17 == v18) {
        goto LABEL_15;
      }
    }
    do
    {
      *(_OWORD *)(v25 - 16) = *((_OWORD *)v17 - 1);
      v25 -= 16;
      v17 -= 2;
    }
    while (v17 != v18);
    uint64_t v17 = (void *)*v15;
    uint64_t v14 = v24 + 16;
    uint64_t *v15 = v25;
    v15[1] = (uint64_t)(v24 + 16);
    v15[2] = (uint64_t)&v23[16 * v22];
    if (v17) {
LABEL_20:
    }
      operator delete(v17);
LABEL_3:
    id v7 = v26;
    v15[1] = (uint64_t)v14;
    ++v13;
  }
  objc_msgSend_appendString_(**(void ***)a1, v8, (uint64_t)v26, v10, v11, v12);
}

void sub_1C4B336B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B336CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B336E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B336F4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = objc_msgSend_longCharacterIsMember_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
  if ((result & 1) == 0) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  }
  return result;
}

id indicesWithPersonalizedSynthesisSupport(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (CHHasPersonalizedSynthesisSupport())
  {
    if (qword_1EA3C93B0 != -1) {
      dispatch_once(&qword_1EA3C93B0, &unk_1F2012EF0);
    }
    id v9 = objc_alloc_init(MEMORY[0x1E4F28E58]);
    uint64_t v15 = objc_msgSend_length(v3, v10, v11, v12, v13, v14);
    uint64_t v24 = MEMORY[0x1E4F143A8];
    uint64_t v25 = 3221225472;
    id v26 = sub_1C4B33B50;
    uint64_t v27 = &unk_1E64E4020;
    uint64_t v29 = a2;
    id v16 = v9;
    id v28 = v16;
    objc_msgSend_enumerateCodepointsInRange_usingBlock_(v3, v17, 0, v15, (uint64_t)&v24, v18);
    unint64_t v22 = objc_msgSend_indexesOfCharacters_withWeakCharacters_(v3, v19, (uint64_t)v16, qword_1EA3C93C0, v20, v21, v24, v25, v26, v27);
  }
  else
  {
    unint64_t v22 = objc_msgSend_indexSet(MEMORY[0x1E4F28D60], v4, v5, v6, v7, v8);
  }

  return v22;
}

void sub_1C4B33874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4B33894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B338A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B338B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B338C8(CoreHandwriting::synthesis *a1)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  CoreHandwriting::synthesis::CHDiffusionSynthesisTransliterationCharacterExtensionMap(a1);
  float v58 = (CoreHandwriting::synthesis *)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = CoreHandwriting::synthesis::CHDiffusionSynthesisSetOfSupportedCharacterByModel(v58);
  id v2 = objc_alloc_init(MEMORY[0x1E4F28E58]);
  id v59 = objc_alloc_init(MEMORY[0x1E4F28E58]);
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  id v3 = v58;
  uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v60, (uint64_t)v64, 16, v5);
  if (v10)
  {
    uint64_t v11 = *(void *)v61;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v61 != v11) {
          objc_enumerationMutation(v3);
        }
        uint64_t v15 = *(void **)(*((void *)&v60 + 1) + 8 * i);
        id v16 = objc_msgSend_objectForKeyedSubscript_(v3, v6, (uint64_t)v15, v7, v8, v9, v58);
        uint64_t CodepointInString = objc_msgSend_firstCodepointInString(v16, v17, v18, v19, v20, v21);
        int IsMember = objc_msgSend_longCharacterIsMember_(v1, v23, CodepointInString, v24, v25, v26);

        if (IsMember)
        {
          unsigned int v33 = objc_msgSend_firstCodepointInString(v15, v28, v29, v30, v31, v32);
          objc_msgSend_addCharactersInRange_(v2, (const char *)v2, v33, 1, v34, v35);
        }
        else
        {
          uint64_t v36 = objc_msgSend_objectForKeyedSubscript_(v3, v28, (uint64_t)v15, v30, v31, v32);
          int isEqualToString = objc_msgSend_isEqualToString_(v36, v37, @" ", v38, v39, v40);

          if (isEqualToString)
          {
            unsigned int v43 = objc_msgSend_firstCodepointInString(v15, v6, v42, v7, v8, v9);
            objc_msgSend_addCharactersInRange_(v59, (const char *)v59, v43, 1, v13, v14);
          }
        }
      }
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v6, (uint64_t)&v60, (uint64_t)v64, 16, v9);
    }
    while (v10);
  }

  objc_msgSend_formUnionWithCharacterSet_(v2, v44, (uint64_t)v1, v45, v46, v47);
  objc_storeStrong((id *)&qword_1EA3C93B8, v2);
  unsigned int v53 = objc_msgSend_firstCodepointInString(@" ", v48, v49, v50, v51, v52);
  objc_msgSend_addCharactersInRange_(v59, v54, v53, 1, v55, v56);
  uint64_t v57 = (void *)qword_1EA3C93C0;
  qword_1EA3C93C0 = (uint64_t)v59;
}

void sub_1C4B33AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B33B50(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((objc_msgSend_longCharacterIsMember_((void *)qword_1EA3C93C0, a2, (uint64_t)a2, a4, a5, a6) & 1) == 0)
  {
    if ((objc_msgSend_longCharacterIsMember_((void *)qword_1EA3C93B8, v8, (uint64_t)a2, v9, v10, v11) & 1) != 0
      || (CoreHandwriting::synthesis::CHDiffusionSynthesisApplyAllowedUnicodeDecomposition((int)a2, *(void *)(a1 + 40)), v15 = objc_claimAutoreleasedReturnValue(), uint64_t v21 = objc_msgSend_length(v15, v16, v17, v18, v19, v20), v15, v21))
    {
      unint64_t v22 = *(void **)(a1 + 32);
      objc_msgSend_addCharactersInRange_(v22, v12, a2, 1, v13, v14);
    }
  }
}

void sub_1C4B33BF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id chunkStringForSynthesis(NSString *a1, unint64_t a2)
{
  uint64_t v266 = *MEMORY[0x1E4F143B8];
  uint64_t v212 = a1;
  unicodeToNSString(9633, v2, v3, v4, v5, v6);
  id v264 = (id)objc_claimAutoreleasedReturnValue();
  replaceUnsupportedCharactersByTransliteration(v212, 0, buf);
  uint64_t v211 = *(void **)buf;
  std::string __p = v243;
  uint64_t v205 = v244;
  *(void *)std::string buf = 0;
  uint64_t v243 = 0;
  uint64_t v244 = 0;
  uint64_t v245 = 0;
  uint64_t v7 = indicesWithPersonalizedSynthesisSupport(v211, 0);
  uint64_t v204 = v7;
  uint64_t v13 = objc_msgSend_ch_synthesisFastPathOnlyCharSet(MEMORY[0x1E4F28B88], v8, v9, v10, v11, v12);
  uint64_t v207 = (void *)v13;
  if (v7 && CHHasPersonalizedSynthesisModelReady(v13, v14, v15, v16, v17, v18))
  {
    uint64_t v19 = objc_msgSend_mutableCopy(v7, v14, v15, v16, v17, v18);
    uint64_t v24 = objc_msgSend_indexesOfCharacters_(v211, v20, (uint64_t)v207, v21, v22, v23);
    objc_msgSend_addIndexes_(v19, v25, (uint64_t)v24, v26, v27, v28);

    uint64_t v29 = (void *)MEMORY[0x1E4F28E60];
    uint64_t v35 = objc_msgSend_length(v211, v30, v31, v32, v33, v34);
    uint64_t v39 = objc_msgSend_indexSetWithIndexesInRange_(v29, v36, 0, v35, v37, v38);
    objc_msgSend_removeIndexes_(v39, v40, (uint64_t)v19, v41, v42, v43);
  }
  else
  {
    uint64_t v49 = (void *)MEMORY[0x1E4F28E60];
    uint64_t v50 = objc_msgSend_length(v211, v14, v15, v16, v17, v18);
    uint64_t v39 = 0;
    uint64_t v19 = objc_msgSend_indexSetWithIndexesInRange_(v49, v51, 0, v50, v52, v53);
  }
  uint64_t v209 = v19;
  uint64_t v54 = objc_msgSend_newlineCharacterSet(MEMORY[0x1E4F28B88], v44, v45, v46, v47, v48);
  uint64_t v210 = v39;
  id v59 = objc_msgSend_indexesOfCharacters_(v211, v55, (uint64_t)v54, v56, v57, v58);
  uint64_t v208 = objc_msgSend_mutableCopy(v59, v60, v61, v62, v63, v64);

  objc_msgSend_removeIndexes_(v19, v65, (uint64_t)v208, v66, v67, v68);
  objc_msgSend_removeIndexes_(v39, v69, (uint64_t)v208, v70, v71, v72);
  uint64_t v78 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v73, v74, v75, v76, v77);
  v262[0] = MEMORY[0x1E4F143A8];
  v262[1] = 3221225472;
  v262[2] = sub_1C4B347B0;
  v262[3] = &unk_1E64E4048;
  id v206 = v78;
  id v263 = v206;
  objc_msgSend_enumerateRangesUsingBlock_(v19, v79, (uint64_t)v262, v80, v81, v82);
  objc_msgSend_array(MEMORY[0x1E4F1CA48], v83, v84, v85, v86, v87);
  id v261 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v93 = objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E4F28B88], v88, v89, v90, v91, v92);
  double v98 = objc_msgSend_indexesOfCharacters_(v211, v94, (uint64_t)v93, v95, v96, v97);
  uint64_t v218 = objc_msgSend_mutableCopy(v98, v99, v100, v101, v102, v103);

  objc_msgSend_ch_synthesisFastPathFavoredCharSet(MEMORY[0x1E4F28B88], v104, v105, v106, v107, v108);
  id v260 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v203 = objc_msgSend_indexesOfCharacters_(v211, v109, (uint64_t)v260, v110, v111, v112);
  id v201 = objc_alloc_init(MEMORY[0x1E4F28E60]);
  id v113 = objc_alloc_init(MEMORY[0x1E4F28E60]);
  v255[0] = MEMORY[0x1E4F143A8];
  v255[1] = 3221225472;
  v255[2] = sub_1C4B3483C;
  v255[3] = &unk_1E64E4070;
  id v220 = v211;
  id v256 = v220;
  id v114 = v207;
  id v257 = v114;
  id v217 = v201;
  id v258 = v217;
  id v219 = v113;
  id v259 = v219;
  objc_msgSend_enumerateRangesUsingBlock_(v203, v115, (uint64_t)v255, v116, v117, v118, v201);
  uint64_t v202 = v114;
  long long v253 = 0u;
  long long v254 = 0u;
  long long v251 = 0u;
  long long v252 = 0u;
  obunint64_t j = v206;
  uint64_t v126 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v119, (uint64_t)&v251, (uint64_t)v265, 16, v120);
  if (v126)
  {
    uint64_t v215 = *(void *)v252;
    do
    {
      for (uint64_t i = 0; i != v126; ++i)
      {
        if (*(void *)v252 != v215) {
          objc_enumerationMutation(obj);
        }
        uint64_t v128 = objc_msgSend_rangeValue(*(void **)(*((void *)&v251 + 1) + 8 * i), v121, v122, v123, v124, v125);
        uint64_t v130 = v129;
        v250[0] = 0;
        v250[1] = v250;
        v250[2] = 0x2020000000;
        v250[3] = v129 / vcvtpd_u64_f64((double)v129 / (double)a2);
        *(void *)std::string buf = 0;
        uint64_t v243 = buf;
        uint64_t v244 = 0x4012000000;
        uint64_t v245 = sub_1C4B348F0;
        uint64_t v246 = nullsub_40;
        uint64_t v247 = &unk_1C4CB5C62;
        uint64_t v248 = v128;
        uint64_t v249 = 0;
        v241[0] = 0;
        v241[1] = v241;
        v241[2] = 0x4012000000;
        v241[3] = sub_1C4B348F0;
        void v241[4] = nullsub_40;
        v241[5] = &unk_1C4CB5C62;
        v241[6] = v128;
        v241[7] = 0;
        v227[0] = MEMORY[0x1E4F143A8];
        v227[1] = 3221225472;
        v227[2] = sub_1C4B34900;
        v227[3] = &unk_1E64E4098;
        id v228 = v218;
        uint64_t v232 = buf;
        uint64_t v233 = v241;
        uint64_t v235 = v128;
        uint64_t v236 = v130;
        unint64_t v237 = a2;
        id v229 = v217;
        id v230 = v219;
        id v131 = v220;
        uint64_t v238 = &v261;
        uint64_t v239 = &v264;
        uint64_t v240 = &v260;
        id v231 = v131;
        uint64_t v234 = v250;
        objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v131, v132, v128, v130, 2, (uint64_t)v227);

        _Block_object_dispose(v241, 8);
        _Block_object_dispose(buf, 8);
        _Block_object_dispose(v250, 8);
      }
      uint64_t v126 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v121, (uint64_t)&v251, (uint64_t)v265, 16, v125);
    }
    while (v126);
  }

  v221[0] = MEMORY[0x1E4F143A8];
  v221[1] = 3221225472;
  v221[2] = sub_1C4B34E6C;
  v221[3] = &unk_1E64E40C0;
  id v133 = v220;
  id v222 = v133;
  uint64_t v224 = &v261;
  uint64_t v225 = &v264;
  uint64_t v226 = &v260;
  id v223 = v264;
  objc_msgSend_enumerateRangesUsingBlock_(v210, v134, (uint64_t)v221, v135, v136, v137);
  objc_msgSend_sortUsingComparator_(v261, v138, (uint64_t)&unk_1F20133D0, v139, v140, v141);
  for (unint64_t j = 0; j < objc_msgSend_count(v261, v142, v143, v144, v145, v146); ++j)
  {
    uint64_t v152 = objc_msgSend_objectAtIndexedSubscript_(v261, v148, j, v149, v150, v151);
    uint64_t v158 = objc_msgSend_rangeInOriginalString(v152, v153, v154, v155, v156, v157);
    uint64_t v160 = v159;

    if ((v205 - (uint64_t)__p) >> 4 >= (unint64_t)(v158 + v160)) {
      goto LABEL_20;
    }
    if (qword_1EA3CA000 != -1)
    {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      uint64_t v161 = (id)qword_1EA3C9F90[0];
      if (!os_log_type_enabled(v161, OS_LOG_TYPE_FAULT)) {
        goto LABEL_19;
      }
LABEL_18:
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1C492D000, v161, OS_LOG_TYPE_FAULT, "Restoring initial chunk indexes error.", buf, 2u);
      goto LABEL_19;
    }
    uint64_t v161 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v161, OS_LOG_TYPE_FAULT)) {
      goto LABEL_18;
    }
LABEL_19:

LABEL_20:
    if (v160)
    {
      uint64_t v162 = 16 * v158;
      uint64_t v163 = (NSUInteger *)&__p[16 * v158];
      locatiounint64_t n = *v163;
      NSUInteger length = v163[1];
      uint64_t v166 = &__p[v162 + 8];
      do
      {
        v268.locatiounint64_t n = location;
        v268.NSUInteger length = length;
        NSRange v170 = NSUnionRange(v268, *(NSRange *)(v166 - 8));
        locatiounint64_t n = v170.location;
        NSUInteger length = v170.length;
        v166 += 16;
        --v160;
      }
      while (v160);
      uint64_t v171 = objc_msgSend_objectAtIndexedSubscript_(v261, (const char *)v170.length, j, v167, v168, v169);
      objc_msgSend_setRangeInOriginalString_(v171, v172, v170.location, v170.length, v173, v174);

      uint64_t v179 = objc_msgSend_objectAtIndexedSubscript_(v261, v175, j, v176, v177, v178);
      uint64_t v185 = objc_msgSend_rangeInOriginalString(v179, v180, v181, v182, v183, v184);
      uint64_t v189 = objc_msgSend_substringWithComposedCharacterRange_(v212, v186, v185, (uint64_t)v186, v187, v188);
      uint64_t v194 = objc_msgSend_objectAtIndexedSubscript_(v261, v190, j, v191, v192, v193);
      objc_msgSend_setChunkValueOriginal_(v194, v195, (uint64_t)v189, v196, v197, v198);
    }
  }
  id v199 = v261;

  if (__p) {
    operator delete(__p);
  }

  return v199;
}

void sub_1C4B34518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, void *a19, void *a20,void *__p)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1C4B34774(uint64_t a1)
{
  id v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_1C4B347B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3)
  {
    uint64_t v6 = *(void **)(a1 + 32);
    objc_msgSend_valueWithRange_(MEMORY[0x1E4F29238], a2, (uint64_t)a2, a3, a5, a6);
    id v11 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v6, v7, (uint64_t)v11, v8, v9, v10);
  }
}

void sub_1C4B34828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3483C(uint64_t a1, const char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3 > 1
    || (objc_msgSend_substringWithRange_(*(void **)(a1 + 32), a2, (uint64_t)a2, a3, a5, a6),
        uint64_t v9 = objc_claimAutoreleasedReturnValue(),
        objc_msgSend_rangeOfCharacterFromSet_(v9, v10, *(void *)(a1 + 40), v11, v12, v13),
        uint64_t v15 = v14,
        v9,
        v15))
  {
    objc_msgSend_addIndex_(*(void **)(a1 + 48), a2, (uint64_t)a2, a4, a5, a6);
    uint64_t v20 = *(void **)(a1 + 56);
    objc_msgSend_addIndex_(v20, v16, (uint64_t)&a2[a3], v17, v18, v19);
  }
}

void sub_1C4B348E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 sub_1C4B348F0(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1C4B34900(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v9 = objc_msgSend_intersectsIndexesInRange_(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  uint64_t v10 = *(void *)(a1 + 88);
  uint64_t v11 = *(void *)(a1 + 96);
  uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 56);
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 56);
  unint64_t v14 = *(void *)(a1 + 104);
  char v18 = objc_msgSend_intersectsIndexesInRange_(*(void **)(a1 + 40), v15, a3, a4, v16, v17);
  int v22 = objc_msgSend_intersectsIndexesInRange_(*(void **)(a1 + 48), v19, a3, a4, v20, v21);
  if ((v18 & 1) != 0 || v22)
  {
    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 56) += *(void *)(*(void *)(*(void *)(a1 + 72) + 8)
                                                                             + 56);
    uint64_t v26 = *(void *)(*(void *)(a1 + 64) + 8);
    uint64_t v27 = *(void *)(v26 + 56);
    if (v27)
    {
      objc_msgSend_substringWithRange_(*(void **)(a1 + 56), v23, *(void *)(v26 + 48), v27, v24, v25);
      id v46 = (id)objc_claimAutoreleasedReturnValue();
      sub_1C4B34C8C(a1 + 112, v46, *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 48), *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 56));

      uint64_t v26 = *(void *)(*(void *)(a1 + 64) + 8);
      uint64_t v28 = *(void *)(v26 + 56);
    }
    else
    {
      uint64_t v28 = 0;
    }
    *(void *)(v26 + 48) += v28;
    *(void *)(v26 + 56) = 0;
    uint64_t v29 = *(void *)(*(void *)(a1 + 72) + 8);
    *(void *)(v29 + 48) = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 56)
                          + *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 48);
    *(void *)(v29 + 56) = 0;
  }
  uint64_t v30 = a3 + a4;
  uint64_t v31 = v11 + v10;
  if (v30 == v11 + v10) {
    int v32 = 1;
  }
  else {
    int v32 = v9;
  }
  if (v32 == 1)
  {
    uint64_t v33 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 56);
    if ((unint64_t)(v33 + a4) > *(void *)(a1 + 104))
    {
      uint64_t v34 = a4;
    }
    else
    {
      v33 += a4;
      uint64_t v34 = 0;
    }
    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 56) += v33;
    uint64_t v35 = *(void *)(*(void *)(a1 + 72) + 8);
    *(void *)(v35 + 48) = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 56)
                          + *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 48);
    *(void *)(v35 + 56) = v34;
  }
  uint64_t v36 = *(void *)(*(void *)(a1 + 64) + 8);
  unint64_t v37 = *(void *)(v36 + 56);
  char v38 = v9 ^ 1;
  if (v37 < *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24)) {
    char v38 = 1;
  }
  BOOL v39 = v12 + a4 + v13 >= v14 || v30 == v31;
  if (v39 || (v38 & 1) == 0)
  {
    if (v37)
    {
      objc_msgSend_substringWithRange_(*(void **)(a1 + 56), v23, *(void *)(v36 + 48), v37, v24, v25);
      id v47 = (id)objc_claimAutoreleasedReturnValue();
      sub_1C4B34C8C(a1 + 112, v47, *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 48), *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 56));

      uint64_t v36 = *(void *)(*(void *)(a1 + 64) + 8);
      uint64_t v40 = *(void *)(v36 + 56);
    }
    else
    {
      uint64_t v40 = 0;
    }
    *(void *)(v36 + 48) += v40;
    *(void *)(v36 + 56) = 0;
    unint64_t v41 = *(void *)(a1 + 96) - *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 48);
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v41
                                                                / vcvtpd_u64_f64((double)v41/ (double)*(unint64_t *)(a1 + 104));
  }
  uint64_t v42 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 56);
  if ((unint64_t)(v42 + a4) > *(void *)(a1 + 104))
  {
    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 56) += v42;
    uint64_t v43 = *(void *)(*(void *)(a1 + 72) + 8);
    *(void *)(v43 + 48) = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 56)
                          + *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 48);
    *(void *)(v43 + 56) = 0;
    if (v32)
    {
LABEL_28:
      if (v30 != v31) {
        return;
      }
      goto LABEL_32;
    }
  }
  else if (v32)
  {
    goto LABEL_28;
  }
  *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 56) += a4;
  if (v30 != v31) {
    return;
  }
LABEL_32:
  uint64_t v44 = *(void *)(*(void *)(a1 + 72) + 8);
  uint64_t v45 = *(void *)(v44 + 56);
  if (v45)
  {
    objc_msgSend_substringWithRange_(*(void **)(a1 + 56), v23, *(void *)(v44 + 48), v45, v24, v25);
    id v48 = (id)objc_claimAutoreleasedReturnValue();
    sub_1C4B34C8C(a1 + 112, v48, *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 48), *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 56));
  }
}

void sub_1C4B34C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B34C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B34C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B34C8C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  uint64_t v13 = objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E4F28B88], v8, v9, v10, v11, v12);
  objc_msgSend_stringByTrimmingCharactersInSet_(v7, v14, (uint64_t)v13, v15, v16, v17);
  uint64_t v45 = (NSString *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend_length(v45, v18, v19, v20, v21, v22))
  {
    if (objc_msgSend_isEqualToString_(v45, v23, **(void **)(a1 + 8), v24, v25, v26))
    {
      uint64_t v27 = **(void ***)a1;
      uint64_t v28 = [CHTextSynthesizerDataChunk alloc];
      isNotDef_synthesisSuggestiounint64_t n = objc_msgSend_initWithChunkValueForSynthesis_originalValue_range_isNotDef_synthesisSuggestion_(v28, v29, **(void **)(a1 + 8), (uint64_t)&stru_1F20141C8, a3, a4, 1, 1);
      objc_msgSend_addObject_(v27, v31, (uint64_t)isNotDef_synthesisSuggestion, v32, v33, v34);
    }
    else
    {
      BOOL v35 = isStringEntirelyFromSet(v45, **(NSCharacterSet ***)(a1 + 16));
      uint64_t v36 = **(void ***)a1;
      if (v35)
      {
        unint64_t v37 = [CHTextSynthesizerDataChunk alloc];
        isNotDef_synthesisSuggestiounint64_t n = objc_msgSend_initWithChunkValueForSynthesis_originalValue_range_isNotDef_synthesisSuggestion_(v37, v38, (uint64_t)v45, (uint64_t)&stru_1F20141C8, a3, a4, 0, 1);
      }
      else
      {
        uint64_t v43 = [CHTextSynthesizerDataChunk alloc];
        isNotDef_synthesisSuggestiounint64_t n = objc_msgSend_initWithChunkValueForSynthesis_originalValue_range_isNotDef_synthesisSuggestion_(v43, v44, (uint64_t)v45, (uint64_t)&stru_1F20141C8, a3, a4, 0, 0);
      }
      objc_msgSend_addObject_(v36, v39, (uint64_t)isNotDef_synthesisSuggestion, v40, v41, v42);
    }
  }
}

void sub_1C4B34E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B34E44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B34E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B34E6C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_substringWithRange_(*(void **)(a1 + 32), a2, (uint64_t)a2, a3, a5, a6);
  id v25 = (id)objc_claimAutoreleasedReturnValue();
  if (a3)
  {
    unint64_t v14 = objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E4F28B88], v9, v10, v11, v12, v13);
    uint64_t v18 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v25, v15, (uint64_t)v14, -1, v16, v17);
    uint64_t v24 = objc_msgSend_countCodepoints(v25, v19, v20, v21, v22, v23);

    if (v18 < v24) {
      sub_1C4B34C8C(a1 + 48, *(void **)(a1 + 40), (uint64_t)a2, a3);
    }
  }
}

void sub_1C4B34F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B34F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B34F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F4181798](a2, sel_compareByRangeWithDataChunk_, a3, a4, a5, a6);
}

void sub_1C4B35028(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B351D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B35228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B35244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B35348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B35358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3536C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3553C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = v3;
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  sub_1C4B355E4((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_1C4B355AC(_Unwind_Exception *a1)
{
  MEMORY[0x1C8786460](v2, 0x10A0C409A4FACE1);

  _Unwind_Resume(a1);
}

void sub_1C4B355D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *sub_1C4B355E4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = sub_1C4B393E0(v2);
    MEMORY[0x1C8786460](v3, 0x10A0C409A4FACE1);
  }
  return a1;
}

void sub_1C4B35708(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C4B35724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B35738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B35BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  sub_1C4B34774((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4B36068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3660C(_Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  sub_1C4B34774((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C4B367C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B367D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B367E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B36BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  sub_1C4B5343C(&a39);
  if (__p) {
    operator delete(__p);
  }
  if (a24) {
    operator delete(a24);
  }

  _Unwind_Resume(a1);
}

void sub_1C4B36C28(double **a1, void *a2)
{
  uint64_t v72 = a1;
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  id v73 = a2;
  *(void *)&long long v81 = &unk_1F2012838;
  *((void *)&v82 + 1) = &v81;
  id v7 = (id)objc_msgSend_copy(v73, v2, v3, v4, v5, v6);
  uint64_t v77 = 0;
  unint64_t v78 = 0;
  uint64_t v76 = 0;
  unint64_t v13 = objc_msgSend_strokeCount(v7, v8, v9, v10, v11, v12);
  sub_1C4AF17A8((uint64_t)&v76, v13);
  for (unint64_t i = 0; objc_msgSend_strokeCount(v7, v14, v15, v16, v17, v18, v72) > i; ++i)
  {
    unint64_t v24 = objc_msgSend_pointCountForStrokeIndex_(v7, v20, i, v21, v22, v23);
    if (v24)
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v80 = 0;
      id v25 = v77;
      if ((unint64_t)v77 >= v78)
      {
        uint64_t v26 = sub_1C4AAA9E8((char **)&v76, (uint64_t)__p);
        uint64_t v77 = v26;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
          uint64_t v26 = v77;
        }
      }
      else
      {
        *(void *)uint64_t v77 = 0;
        *((void *)v25 + 1) = 0;
        *((void *)v25 + 2) = 0;
        *(_OWORD *)id v25 = *(_OWORD *)__p;
        *((void *)v25 + 2) = v80;
        uint64_t v26 = v25 + 24;
        uint64_t v77 = v25 + 24;
      }
      uint64_t v27 = (unsigned char *)*((void *)v26 - 3);
      if (v24 > (uint64_t)(*((void *)v26 - 1) - (void)v27) >> 4)
      {
        if (v24 >> 60) {
          sub_1C494A220();
        }
        uint64_t v28 = (unsigned char *)*((void *)v26 - 2);
        uint64_t v29 = (char *)operator new(16 * v24);
        uint64_t v30 = &v29[(v28 - v27) & 0xFFFFFFFFFFFFFFF0];
        uint64_t v31 = v30;
        if (v28 != v27)
        {
          uint64_t v32 = &v29[(v28 - v27) & 0xFFFFFFFFFFFFFFF0];
          do
          {
            uint64_t v31 = v32 - 16;
            *((_OWORD *)v32 - 1) = *((_OWORD *)v28 - 1);
            v28 -= 16;
            v32 -= 16;
          }
          while (v28 != v27);
        }
        *((void *)v26 - 3) = v31;
        *((void *)v26 - 2) = v30;
        *((void *)v26 - 1) = &v29[16 * v24];
        if (v27) {
          operator delete(v27);
        }
      }
      uint64_t v33 = 0;
      if (v24 <= 1) {
        uint64_t v34 = 1;
      }
      else {
        uint64_t v34 = v24;
      }
LABEL_19:
      objc_msgSend_pointForStrokeIndex_pointIndex_(v7, v14, i, v33, v17, v18);
      __p[0] = v35;
      __p[1] = v36;
      unint64_t v37 = v77;
      char v38 = (void **)(v77 - 24);
      uint64_t v39 = *((void *)v77 - 2);
      if (v39 != *((void *)v77 - 3)
        && *(double *)(v39 - 16) == *(double *)&v35
        && *(double *)(v39 - 8) == *(double *)&v36)
      {
        goto LABEL_37;
      }
      if (!*((void *)&v82 + 1)) {
        sub_1C4A569C8();
      }
      double v40 = (*(double (**)(void, void **))(**((void **)&v82 + 1) + 48))(*((void *)&v82 + 1), __p);
      double v42 = v40;
      uint64_t v43 = v41;
      uint64_t v45 = (char *)*((void *)v37 - 2);
      unint64_t v44 = *((void *)v37 - 1);
      if ((unint64_t)v45 < v44)
      {
        *(double *)uint64_t v45 = v40;
        *((void *)v45 + 1) = v41;
        id v46 = v45 + 16;
        goto LABEL_36;
      }
      id v47 = (char *)*v38;
      uint64_t v48 = (v45 - (unsigned char *)*v38) >> 4;
      unint64_t v49 = v48 + 1;
      if ((unint64_t)(v48 + 1) >> 60) {
        sub_1C494A220();
      }
      uint64_t v50 = v44 - (void)v47;
      if (v50 >> 3 > v49) {
        unint64_t v49 = v50 >> 3;
      }
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v51 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v51 = v49;
      }
      if (v51)
      {
        if (v51 >> 60) {
          sub_1C4949AA8();
        }
        uint64_t v52 = (char *)operator new(16 * v51);
        uint64_t v53 = (double *)&v52[16 * v48];
        double *v53 = v42;
        *((void *)v53 + 1) = v43;
        uint64_t v54 = (uint64_t)v53;
        if (v45 == v47)
        {
LABEL_34:
          id v46 = v53 + 2;
          *((void *)v37 - 3) = v54;
          *((void *)v37 - 2) = v53 + 2;
          *((void *)v37 - 1) = &v52[16 * v51];
          if (v45) {
            goto LABEL_35;
          }
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v52 = 0;
        uint64_t v53 = (double *)(16 * v48);
        double *v53 = v40;
        *((void *)v53 + 1) = v41;
        uint64_t v54 = 16 * v48;
        if (v45 == v47) {
          goto LABEL_34;
        }
      }
      do
      {
        *(_OWORD *)(v54 - 16) = *((_OWORD *)v45 - 1);
        v54 -= 16;
        v45 -= 16;
      }
      while (v45 != v47);
      uint64_t v45 = (char *)*v38;
      id v46 = v53 + 2;
      *((void *)v37 - 3) = v54;
      *((void *)v37 - 2) = v53 + 2;
      *((void *)v37 - 1) = &v52[16 * v51];
      if (v45) {
LABEL_35:
      }
        operator delete(v45);
LABEL_36:
      *((void *)v37 - 2) = v46;
LABEL_37:
      if (++v33 == v34) {
        continue;
      }
      goto LABEL_19;
    }
  }

  if (*((long long **)&v82 + 1) == &v81)
  {
    (*(void (**)(long long *))(v81 + 32))(&v81);
  }
  else if (*((void *)&v82 + 1))
  {
    (*(void (**)(void))(**((void **)&v82 + 1) + 40))();
  }

  sub_1C4B47CA0((double ***)&v76, __p);
  long long v81 = xmmword_1C4C3B2A0;
  long long v82 = xmmword_1C4C3B2A0;
  uint64_t v55 = (double *)__p[0];
  if (__p[0] != __p[1])
  {
    double v56 = 1.79769313e308;
    double v57 = -1.79769313e308;
    double v58 = -1.79769313e308;
    double v59 = 1.79769313e308;
    double v60 = -1.79769313e308;
    double v61 = 1.79769313e308;
    double v62 = -1.79769313e308;
    double v63 = 1.79769313e308;
    do
    {
      double v64 = *v55;
      double v65 = v55[1];
      v55 += 2;
      if (v63 > v64)
      {
        double v59 = v64;
        double v63 = v64;
      }
      if (v62 < v64)
      {
        double v58 = v64;
        double v62 = v64;
      }
      if (v61 > v65)
      {
        double v56 = v65;
        double v61 = v65;
      }
      if (v60 < v65)
      {
        double v57 = v65;
        double v60 = v65;
      }
    }
    while (v55 != __p[1]);
    *(double *)&long long v81 = v59;
    *((double *)&v81 + 1) = v58;
    *(double *)&long long v82 = v56;
    *((double *)&v82 + 1) = v57;
  }
  sub_1C4B5226C((double **)__p, (double *)&v81, (double **)&v74);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = v74;
  uint64_t v80 = v75;
  sub_1C4B4AD64((char **)__p, v72, 4.0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v66 = (char *)v76;
  if (v76)
  {
    uint64_t v67 = v77;
    uint64_t v68 = v76;
    if (v77 != v76)
    {
      float v69 = v77;
      do
      {
        uint64_t v71 = (void *)*((void *)v69 - 3);
        v69 -= 24;
        uint64_t v70 = v71;
        if (v71)
        {
          *((void *)v67 - 2) = v70;
          operator delete(v70);
        }
        uint64_t v67 = v69;
      }
      while (v69 != v66);
      uint64_t v68 = v76;
    }
    uint64_t v77 = v66;
    operator delete(v68);
  }
}

void sub_1C4B3714C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_1C496B66C(&a14);

  _Unwind_Resume(a1);
}

void sub_1C4B37290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B374D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B375AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B375C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B37654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B37674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B379C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C4B387E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B38CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B39090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B391DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1C4B39244(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_1C4B392D8()
{
}

void *sub_1C4B392EC()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F2012838;
  return result;
}

void sub_1C4B39324(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2012838;
}

double sub_1C4B3934C(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

uint64_t sub_1C4B39354(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C4C4422BLL) {
    return a1 + 8;
  }
  if (((v3 & 0x80000001C4C4422BLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C4C4422BLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C4C4422BLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *sub_1C4B393D4()
{
  return &unk_1F2011B48;
}

uint64_t sub_1C4B393E0(uint64_t a1)
{
  sub_1C4999C7C(a1 + 88, *(void **)(a1 + 96));
  sub_1C4999C7C(a1 + 64, *(void **)(a1 + 72));
  uint64_t v2 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v2)
  {
    if (*(void *)v2) {
      munmap(*(void **)v2, *(void *)(v2 + 8));
    }
    MEMORY[0x1C8786460](v2, 0x1010C40A749B91FLL);
  }

  return a1;
}

void sub_1C4B397BC(void *a1, void *a2)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v9 = v3;
  if (a1 && objc_msgSend_count(v3, v4, v5, v6, v7, v8))
  {
    uint64_t v15 = objc_msgSend_activeStrokeGroupAncestorIdentifiers(a1, v10, v11, v12, v13, v14);
    uint64_t v21 = objc_msgSend_mutableCopy(v15, v16, v17, v18, v19, v20);

    if (!v21)
    {
      uint64_t v21 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v22, v23, v24, v25, v26);
    }
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    id v27 = v9;
    uint64_t v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v28, (uint64_t)&v51, (uint64_t)v55, 16, v29);
    if (v30)
    {
      uint64_t v36 = v30;
      uint64_t v37 = *(void *)v52;
      do
      {
        uint64_t v38 = 0;
        do
        {
          if (*(void *)v52 != v37) {
            objc_enumerationMutation(v27);
          }
          uint64_t v39 = NSNumber;
          uint64_t v40 = objc_msgSend_ancestorIdentifier(*(void **)(*((void *)&v51 + 1) + 8 * v38), v31, v32, v33, v34, v35, (void)v51);
          uint64_t v45 = objc_msgSend_numberWithInteger_(v39, v41, v40, v42, v43, v44);
          objc_msgSend_addObject_(v21, v46, (uint64_t)v45, v47, v48, v49);

          ++v38;
        }
        while (v36 != v38);
        uint64_t v36 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v31, (uint64_t)&v51, (uint64_t)v55, 16, v35);
      }
      while (v36);
    }

    objc_setProperty_nonatomic_copy(a1, v50, v21, 40);
  }
}

void sub_1C4B39E24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B39FF4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v4);
  objc_destroyWeak((id *)(v5 - 56));

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B3A04C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4B3A068(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  sub_1C4B3A120(WeakRetained);

  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v2 = (id)qword_1EA3C9FB0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl(&dword_1C492D000, v2, OS_LOG_TYPE_ERROR, "Remote connection to handwritingd was interrupted", v3, 2u);
  }
}

void sub_1C4B3A110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3A120(void *a1)
{
  if (a1)
  {
    obunint64_t j = a1;
    objc_sync_enter(obj);
    objc_msgSend_invalidate(obj[1], v1, v2, v3, v4, v5);
    uint64_t v6 = obj[1];
    obj[1] = 0;

    objc_sync_exit(obj);
  }
}

void sub_1C4B3A19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3A1B8()
{
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  dispatch_queue_t v0 = (id)qword_1EA3C9FB0;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl(&dword_1C492D000, v0, OS_LOG_TYPE_ERROR, "Remote connection to handwritingd was invalidated", v1, 2u);
  }
}

void sub_1C4B3A2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CHRemoteRecognizer;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C4B3A9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3AB08(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = objc_msgSend_UUID(MEMORY[0x1E4F29128], a2, a3, a4, a5, a6);
  objc_msgSend_UUIDString(v6, v7, v8, v9, v10, v11);
  id v25 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v12 = (void *)MEMORY[0x1E4F1CB10];
  uint64_t v13 = NSTemporaryDirectory();
  uint64_t v18 = objc_msgSend_fileURLWithPath_(v12, v14, (uint64_t)v13, v15, v16, v17);
  uint64_t v23 = objc_msgSend_URLByAppendingPathComponent_(v18, v19, (uint64_t)v25, v20, v21, v22);
  uint64_t v24 = (void *)qword_1EA3C93C8;
  qword_1EA3C93C8 = v23;
}

void sub_1C4B3ABB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1C4B3ABD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3ABEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3ACD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3AD54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CloudRegressor::CloudRegressor(CloudRegressor *this, CHDrawing *a2, HTMLog *a3)
{
  EllipseRegressor::EllipseRegressor((EllipseRegressor *)v3, a2, a3);
}

void sub_1C4B3B094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3B0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3B0C0(char *a1@<X8>)
{
  a1[23] = 7;
  strcpy(a1, "CHCloud");
}

void sub_1C4B3B1F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C4B3B20C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreHandwriting::EspressoModelWrapper::~EspressoModelWrapper(void **this)
{
  if (!CoreHandwriting::EspressoModelWrapper::destroy((CoreHandwriting::EspressoModelWrapper *)this))
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v2 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl(&dword_1C492D000, v2, OS_LOG_TYPE_FAULT, "EspressoModelWrapper::~EspressoModelWrapper Error destroying model", v3, 2u);
    }
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
}

BOOL CoreHandwriting::EspressoModelWrapper::destroy(CoreHandwriting::EspressoModelWrapper *this)
{
  if (espresso_plan_destroy())
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v1 = (id)qword_1EA3C9F90[0];
    BOOL result = os_log_type_enabled(v1, OS_LOG_TYPE_ERROR);
    if (result)
    {
      __int16 v6 = 0;
      uint64_t v3 = "EspressoModelWrapper::destroy Error destroying plan";
      uint64_t v4 = (uint8_t *)&v6;
LABEL_11:
      _os_log_impl(&dword_1C492D000, v1, OS_LOG_TYPE_ERROR, v3, v4, 2u);
      return 0;
    }
  }
  else
  {
    if (!espresso_context_destroy()) {
      return 1;
    }
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v1 = (id)qword_1EA3C9F90[0];
    BOOL result = os_log_type_enabled(v1, OS_LOG_TYPE_ERROR);
    if (result)
    {
      __int16 v5 = 0;
      uint64_t v3 = "EspressoModelWrapper::destroy Error destroying context";
      uint64_t v4 = (uint8_t *)&v5;
      goto LABEL_11;
    }
  }
  return result;
}

BOOL sub_1C4B3B4A4(uint64_t *a1)
{
  uint64_t context = espresso_create_context();
  *a1 = context;
  if (context)
  {
    plaunint64_t n = espresso_create_plan();
    a1[1] = plan;
    if (plan)
    {
      if (espresso_plan_add_network())
      {
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        uint64_t v4 = (id)qword_1EA3C9F90[0];
        BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
        if (result)
        {
          __int16 v9 = 0;
          __int16 v6 = "EspressoModelWrapper::initialize Error loading model";
          uint64_t v7 = (uint8_t *)&v9;
LABEL_21:
          _os_log_impl(&dword_1C492D000, v4, OS_LOG_TYPE_ERROR, v6, v7, 2u);
          return 0;
        }
      }
      else
      {
        if (!espresso_plan_build())
        {
          MEMORY[0x1C8786250](a1 + 4, "");
          return 1;
        }
        if (qword_1EA3CA000 != -1) {
          dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
        }
        uint64_t v4 = (id)qword_1EA3C9F90[0];
        BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
        if (result)
        {
          __int16 v8 = 0;
          __int16 v6 = "EspressoModelWrapper::initialize Error buidling plan";
          uint64_t v7 = (uint8_t *)&v8;
          goto LABEL_21;
        }
      }
    }
    else
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      uint64_t v4 = (id)qword_1EA3C9F90[0];
      BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
      if (result)
      {
        __int16 v10 = 0;
        __int16 v6 = "EspressoModelWrapper::initialize Error creating plan";
        uint64_t v7 = (uint8_t *)&v10;
        goto LABEL_21;
      }
    }
  }
  else
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v4 = (id)qword_1EA3C9F90[0];
    BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (result)
    {
      __int16 v11 = 0;
      __int16 v6 = "EspressoModelWrapper::initialize Error creating context";
      uint64_t v7 = (uint8_t *)&v11;
      goto LABEL_21;
    }
  }
  return result;
}

BOOL sub_1C4B3B6D8(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  if (espresso_buffer_pack_tensor_shape())
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v3 = (id)qword_1EA3C9F90[0];
    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_WORD *)__int16 v6 = 0;
      __int16 v5 = "EspressoModelWrapper::setInput Error setting input buffer shape";
LABEL_11:
      _os_log_impl(&dword_1C492D000, v3, OS_LOG_TYPE_ERROR, v5, v6, 2u);
      return 0;
    }
  }
  else
  {
    *(void *)&long long v7 = a2;
    LODWORD(v17) = 65568;
    if (!espresso_network_bind_buffer()) {
      return 1;
    }
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v3 = (id)qword_1EA3C9F90[0];
    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_WORD *)__int16 v6 = 0;
      __int16 v5 = "EspressoModelWrapper::setInput Error binding input buffer";
      goto LABEL_11;
    }
  }
  return result;
}

BOOL CoreHandwriting::EspressoModelWrapper::bindOutput(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4)
  {
    int v7 = 0;
    espresso_blob_is_dynamic();
  }
  if (!espresso_network_bind_buffer()) {
    return 1;
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v4 = (id)qword_1EA3C9F90[0];
  BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_WORD *)__int16 v6 = 0;
    _os_log_impl(&dword_1C492D000, v4, OS_LOG_TYPE_ERROR, "EspressoModelWrapper::bindOutput Error binding output buffer", v6, 2u);
    return 0;
  }
  return result;
}

BOOL sub_1C4B3B9C4(uint64_t a1, const std::string *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (std::string *)(a1 + 32);
  char v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (*(char *)(a1 + 55) < 0)
  {
    int v7 = *(const void **)(a1 + 32);
    size_t v6 = *(void *)(a1 + 40);
  }
  else
  {
    size_t v6 = *(unsigned __int8 *)(a1 + 55);
    int v7 = (const void *)(a1 + 32);
  }
  if (v5 >= 0) {
    size_t size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = a2->__r_.__value_.__l.__size_;
  }
  if (v5 < 0) {
    a2 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (size >= v6) {
    size_t v9 = v6;
  }
  else {
    size_t v9 = size;
  }
  if (!memcmp(v7, a2, v9) && size == v6) {
    return 1;
  }
  if (espresso_plan_get_phase() == 1 && espresso_plan_build_clean())
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    long long v11 = (id)qword_1EA3C9F90[0];
    BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (result)
    {
      __int16 v17 = 0;
      long long v13 = "EspressoModelWrapper::selectConfiguration Error cleaning current plan";
      long long v14 = (uint8_t *)&v17;
LABEL_32:
      _os_log_impl(&dword_1C492D000, v11, OS_LOG_TYPE_ERROR, v13, v14, 2u);
      return 0;
    }
    return result;
  }
  if (!espresso_network_select_configuration())
  {
    if (espresso_plan_build())
    {
      if (qword_1EA3CA000 != -1) {
        dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
      }
      long long v11 = (id)qword_1EA3C9F90[0];
      BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
      if (result)
      {
        __int16 v15 = 0;
        long long v13 = "EspressoModelWrapper::selectConfiguration Error building Espresso plan";
        long long v14 = (uint8_t *)&v15;
        goto LABEL_32;
      }
      return result;
    }
    std::string::operator=(v4, v2);
    return 1;
  }
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  long long v11 = (id)qword_1EA3C9F90[0];
  BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  if (result)
  {
    __int16 v16 = 0;
    long long v13 = "EspressoModelWrapper::selectConfiguration Error selecting configuration";
    long long v14 = (uint8_t *)&v16;
    goto LABEL_32;
  }
  return result;
}

BOOL CoreHandwriting::EspressoModelWrapper::execute(CoreHandwriting::EspressoModelWrapper *this)
{
  int v1 = espresso_plan_execute_sync();
  if (v1)
  {
    if (qword_1EA3CA000 != -1) {
      dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
    }
    uint64_t v2 = (id)qword_1EA3C9F90[0];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1C492D000, v2, OS_LOG_TYPE_ERROR, "EspressoModelWrapper::execute Error executing model", v4, 2u);
    }
  }
  return v1 == 0;
}

uint64_t sub_1C4B3BC90(uint64_t *a1)
{
  int v1 = (uint64_t **)a1;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*((char *)a1 + 23) < 0)
  {
    int v2 = open((const char *)*a1, 0);
    if (v2 < 1) {
      goto LABEL_7;
    }
  }
  else
  {
    int v2 = open((const char *)a1, 0);
    if (v2 < 1) {
      goto LABEL_7;
    }
  }
  int v3 = v2;
  if (fstat(v2, &v9) || (st_size = v9.st_size, int v7 = mmap(0, v9.st_size, 1, 2, v3, 0), v7 == (void *)-1))
  {
    close(v3);
  }
  else
  {
    long long v8 = v7;
    madvise(v7, st_size, 2);
    close(v3);
    if (v8) {
      operator new();
    }
  }
LABEL_7:
  if (qword_1EA3CA000 != -1) {
    dispatch_once(&qword_1EA3CA000, &unk_1F2012B50);
  }
  uint64_t v4 = (id)qword_1EA3C9F90[0];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)v1 + 23) < 0) {
      int v1 = (uint64_t **)*v1;
    }
    v9.st_dev = 136315138;
    *(void *)&v9.st_mode = v1;
    _os_log_impl(&dword_1C492D000, v4, OS_LOG_TYPE_ERROR, "Error: unable to mmap resource %s", (uint8_t *)&v9, 0xCu);
  }

  return 0;
}

void CHCodeMap::~CHCodeMap(CHCodeMap *this)
{
  var0 = this->var0;
  if (var0) {
    munmap(var0, this->var1);
  }
}

{
  char *var0;

  var0 = this->var0;
  if (var0) {
    munmap(var0, this->var1);
  }
}

void CHCodeMap::serializeCodeMapToFile(CHCodeMap *this, NSString *a2, NSString *a3)
{
  uint64_t v4 = this;
  char v5 = a2;
  long long v11 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], v6, v7, v8, v9, v10);
  uint64_t v16 = objc_msgSend_contentsAtPath_(v11, v12, (uint64_t)v4, v13, v14, v15);

  id v32 = 0;
  uint64_t v19 = objc_msgSend_JSONObjectWithData_options_error_(MEMORY[0x1E4F28D90], v17, v16, 0, (uint64_t)&v32, v18);
  id v20 = v32;
  id v25 = objc_msgSend_keysSortedByValueUsingComparator_(v19, v21, (uint64_t)&unk_1F2012F30, v22, v23, v24);
  int __ptr = objc_msgSend_count(v25, v26, v27, v28, v29, v30);
  operator new[]();
}

void sub_1C4B3C05C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C4B3C0E4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_compare_(a2, (const char *)a2, a3, a4, a5, a6);
}

uint64_t CHCodeMap::operator[](uint64_t a1, unint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 8) <= a2)
  {
    int v3 = CHOSLogForCategory(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 8);
      *(_DWORD *)std::string buf = 134218240;
      unint64_t v8 = a2;
      __int16 v9 = 2048;
      uint64_t v10 = v4;
      _os_log_impl(&dword_1C492D000, v3, OS_LOG_TYPE_ERROR, "Error: Index %lu out of bounds of the code map %lu symbols", buf, 0x16u);
    }

    exit(0);
  }
  return *(void *)(a1 + 16) + 4 * a2;
}